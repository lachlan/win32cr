require "../system/com.cr"
require "../foundation.cr"
require "../graphics/direct3d9.cr"
require "../graphics/dxgi/common.cr"
require "../graphics/direct3d12.cr"
require "../media/dxmediaobjects.cr"
require "../system/com/structuredstorage.cr"
require "../media/audio.cr"
require "../ui/shell/propertiessystem.cr"
require "../media/streaming.cr"
require "../graphics/gdi.cr"
require "../system/winrt.cr"
require "../devices/properties.cr"
require "../media/directshow.cr"

{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link("delayimp")]
{% end %}
@[Link("user32")]
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/IGNORE:4199")]
{% end %}
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/DELAYLOAD:dxva2.dll")]
@[Link(ldflags: "/DELAYLOAD:mfplat.dll")]
@[Link(ldflags: "/DELAYLOAD:mf.dll")]
@[Link(ldflags: "/DELAYLOAD:mfsrcsnk.dll")]
@[Link(ldflags: "/DELAYLOAD:mfsensorgroup.dll")]
@[Link(ldflags: "/DELAYLOAD:mfcore.dll")]
@[Link(ldflags: "/DELAYLOAD:evr.dll")]
@[Link(ldflags: "/DELAYLOAD:mfreadwrite.dll")]
@[Link(ldflags: "/DELAYLOAD:mfplay.dll")]
@[Link(ldflags: "/DELAYLOAD:opmxbox.dll")]
{% else %}
@[Link("dxva2")]
@[Link("mfplat")]
@[Link("mf")]
@[Link("mfsrcsnk")]
@[Link("mfsensorgroup")]
@[Link("mfcore")]
@[Link("evr")]
@[Link("mfreadwrite")]
@[Link("mfplay")]
@[Link("opmxbox")]
{% end %}
lib LibWin32
  MEDIASUBTYPE_None = "e436eb8e-524f-11ce-9f53-0020af0ba770"
  AVENC_H263V_LEVELCOUNT = 8_u32
  AVENC_H264V_LEVELCOUNT = 16_u32
  AVENC_H264V_MAX_MBBITS = 3200_u32
  D3D12_VIDEO_DECODE_PROFILE_MPEG2 = "ee27417f-5e28-4e65-beea-1d26b508adc9"
  D3D12_VIDEO_DECODE_PROFILE_MPEG1_AND_MPEG2 = "86695f12-340e-4f04-9fd3-9253dd327460"
  D3D12_VIDEO_DECODE_PROFILE_H264 = "1b81be68-a0c7-11d3-b984-00c04f2e73c5"
  D3D12_VIDEO_DECODE_PROFILE_H264_STEREO_PROGRESSIVE = "d79be8da-0cf1-4c81-b82a-69a4e236f43d"
  D3D12_VIDEO_DECODE_PROFILE_H264_STEREO = "f9aaccbb-c2b6-4cfc-8779-5707b1760552"
  D3D12_VIDEO_DECODE_PROFILE_H264_MULTIVIEW = "705b9d82-76cf-49d6-b7e6-ac8872db013c"
  D3D12_VIDEO_DECODE_PROFILE_VC1 = "1b81bea3-a0c7-11d3-b984-00c04f2e73c5"
  D3D12_VIDEO_DECODE_PROFILE_VC1_D2010 = "1b81bea4-a0c7-11d3-b984-00c04f2e73c5"
  D3D12_VIDEO_DECODE_PROFILE_MPEG4PT2_SIMPLE = "efd64d74-c9e8-41d7-a5e9-e9b0e39fa319"
  D3D12_VIDEO_DECODE_PROFILE_MPEG4PT2_ADVSIMPLE_NOGMC = "ed418a9f-010d-4eda-9ae3-9a65358d8d2e"
  D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN = "5b11d51b-2f4c-4452-bcc3-09f2a1160cc0"
  D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN10 = "107af0e0-ef1a-4d19-aba8-67a163073d13"
  D3D12_VIDEO_DECODE_PROFILE_VP9 = "463707f8-a1d0-4585-876d-83aa6d60b89e"
  D3D12_VIDEO_DECODE_PROFILE_VP9_10BIT_PROFILE2 = "a4c749ef-6ecf-48aa-8448-50a7a1165ff7"
  D3D12_VIDEO_DECODE_PROFILE_VP8 = "90b899ea-3a62-4705-88b3-8df04b2744e7"
  D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE0 = "b8be4ccb-cf53-46ba-8d59-d6b8a6da5d2a"
  D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE1 = "6936ff0f-45b1-4163-9cc1-646ef6946108"
  D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE2 = "0c5f2aa1-e541-4089-bb7b-98110a19d7c8"
  D3D12_VIDEO_DECODE_PROFILE_AV1_12BIT_PROFILE2 = "17127009-a00f-4ce1-994e-bf4081f6f3f0"
  D3D12_VIDEO_DECODE_PROFILE_AV1_12BIT_PROFILE2_420 = "2d80bed6-9cac-4835-9e91-327bbc4f9ee8"
  DXVA2_ModeMPEG2_MoComp = "e6a9f44b-61b0-4563-9ea4-63d2a3c6fe66"
  DXVA2_ModeMPEG2_IDCT = "bf22ad00-03ea-4690-8077-473346209b7e"
  DXVA2_ModeMPEG2_VLD = "ee27417f-5e28-4e65-beea-1d26b508adc9"
  DXVA2_ModeMPEG1_VLD = "6f3ec719-3735-42cc-8063-65cc3cb36616"
  DXVA2_ModeMPEG2and1_VLD = "86695f12-340e-4f04-9fd3-9253dd327460"
  DXVA2_ModeH264_A = "1b81be64-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeH264_B = "1b81be65-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeH264_C = "1b81be66-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeH264_D = "1b81be67-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeH264_E = "1b81be68-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeH264_F = "1b81be69-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeH264_VLD_WithFMOASO_NoFGT = "d5f04ff9-3418-45d8-9561-32a76aae2ddd"
  DXVA2_ModeH264_VLD_Stereo_Progressive_NoFGT = "d79be8da-0cf1-4c81-b82a-69a4e236f43d"
  DXVA2_ModeH264_VLD_Stereo_NoFGT = "f9aaccbb-c2b6-4cfc-8779-5707b1760552"
  DXVA2_ModeH264_VLD_Multiview_NoFGT = "705b9d82-76cf-49d6-b7e6-ac8872db013c"
  DXVA2_ModeWMV8_A = "1b81be80-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeWMV8_B = "1b81be81-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeWMV9_A = "1b81be90-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeWMV9_B = "1b81be91-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeWMV9_C = "1b81be94-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeVC1_A = "1b81bea0-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeVC1_B = "1b81bea1-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeVC1_C = "1b81bea2-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeVC1_D = "1b81bea3-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeVC1_D2010 = "1b81bea4-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_NoEncrypt = "1b81bed0-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_VideoProcProgressiveDevice = "5a54a0c9-c7ec-4bd9-8ede-f3c75dc4393b"
  DXVA2_VideoProcBobDevice = "335aa36e-7884-43a4-9c91-7f87faf3e37e"
  DXVA2_VideoProcSoftwareDevice = "4553d47f-ee7e-4e3f-9475-dbf1376c4810"
  DXVA2_ModeMPEG4pt2_VLD_Simple = "efd64d74-c9e8-41d7-a5e9-e9b0e39fa319"
  DXVA2_ModeMPEG4pt2_VLD_AdvSimple_NoGMC = "ed418a9f-010d-4eda-9ae3-9a65358d8d2e"
  DXVA2_ModeMPEG4pt2_VLD_AdvSimple_GMC = "ab998b5b-4258-44a9-9feb-94e597a6baae"
  DXVA2_ModeHEVC_VLD_Main = "5b11d51b-2f4c-4452-bcc3-09f2a1160cc0"
  DXVA2_ModeHEVC_VLD_Main10 = "107af0e0-ef1a-4d19-aba8-67a163073d13"
  DXVA2_ModeVP9_VLD_Profile0 = "463707f8-a1d0-4585-876d-83aa6d60b89e"
  DXVA2_ModeVP9_VLD_10bit_Profile2 = "a4c749ef-6ecf-48aa-8448-50a7a1165ff7"
  DXVA2_ModeVP8_VLD = "90b899ea-3a62-4705-88b3-8df04b2744e7"
  DXVA2_E_NOT_INITIALIZED = -2147217408_i32
  DXVA2_E_NEW_VIDEO_DEVICE = -2147217407_i32
  DXVA2_E_VIDEO_DEVICE_LOCKED = -2147217406_i32
  DXVA2_E_NOT_AVAILABLE = -2147217405_i32
  MAX_SUBSTREAMS = 15_u32
  DXVA2_DECODE_GET_DRIVER_HANDLE = 1829_u32
  DXVA2_DECODE_SPECIFY_ENCRYPTED_BLOCKS = 1828_u32
  DXVAp_ModeMPEG2_A = "1b81be0a-a0c7-11d3-b984-00c04f2e73c5"
  DXVAp_ModeMPEG2_C = "1b81be0c-a0c7-11d3-b984-00c04f2e73c5"
  DXVAp_NoEncrypt = "1b81bed0-a0c7-11d3-b984-00c04f2e73c5"
  DXVAp_DeinterlaceBobDevice = "335aa36e-7884-43a4-9c91-7f87faf3e37e"
  DXVAp_DeinterlaceContainerDevice = "0e85cb93-3046-4ff0-aecc-d58cb5f035fd"
  DXVAHD_STREAM_STATE_PRIVATE_IVTC = "9c601e3c-0f33-414c-a739-99540ee42da5"
  DXVAHDControlGuid = "a0386e75-f70c-464c-a9ce-33c44e091623"
  DXVAHDETWGUID_CREATEVIDEOPROCESSOR = "681e3d1e-5674-4fb3-a503-2f2055e91f60"
  DXVAHDETWGUID_VIDEOPROCESSBLTSTATE = "76c94b5a-193f-4692-9484-a4d999da81a8"
  DXVAHDETWGUID_VIDEOPROCESSSTREAMSTATE = "262c0b02-209d-47ed-94d8-82ae02b84aa7"
  DXVAHDETWGUID_VIDEOPROCESSBLTHD = "bef3d435-78c7-4de3-9707-cd1b083b160a"
  DXVAHDETWGUID_VIDEOPROCESSBLTHD_STREAM = "27ae473e-a5fc-4be5-b4e3-f24994d3c495"
  DXVAHDETWGUID_DESTROYVIDEOPROCESSOR = "f943f0a0-3f16-43e0-8093-105a986aa5f1"
  MR_VIDEO_RENDER_SERVICE = "1092a86c-ab1a-459a-a336-831fbc4d11ff"
  MR_VIDEO_MIXER_SERVICE = "073cd2fc-6cf4-40b7-8859-e89552c841f8"
  MR_VIDEO_ACCELERATION_SERVICE = "efef5175-5c7d-4ce2-bbbd-34ff8bca6554"
  MR_BUFFER_SERVICE = "a562248c-9ac6-4ffc-9fba-3af8f8ad1a4d"
  VIDEO_ZOOM_RECT = "7aaa1638-1b7f-4c93-bd89-5b9c9fb6fcf0"
  MFEVRDLL = 0_u32
  MF_SDK_VERSION = 2_u32
  MF_API_VERSION = 112_u32
  MFSTARTUP_NOSOCKET = 1_u32
  MFSTARTUP_LITE = 1_u32
  MFSTARTUP_FULL = 0_u32
  MF_E_DXGI_DEVICE_NOT_INITIALIZED = -2147217408_i32
  MF_E_DXGI_NEW_VIDEO_DEVICE = -2147217407_i32
  MF_E_DXGI_VIDEO_DEVICE_LOCKED = -2147217406_i32
  MF_1_BYTE_ALIGNMENT = 0_u32
  MF_2_BYTE_ALIGNMENT = 1_u32
  MF_4_BYTE_ALIGNMENT = 3_u32
  MF_8_BYTE_ALIGNMENT = 7_u32
  MF_16_BYTE_ALIGNMENT = 15_u32
  MF_32_BYTE_ALIGNMENT = 31_u32
  MF_64_BYTE_ALIGNMENT = 63_u32
  MF_128_BYTE_ALIGNMENT = 127_u32
  MF_256_BYTE_ALIGNMENT = 255_u32
  MF_512_BYTE_ALIGNMENT = 511_u32
  MF_1024_BYTE_ALIGNMENT = 1023_u32
  MF_2048_BYTE_ALIGNMENT = 2047_u32
  MF_4096_BYTE_ALIGNMENT = 4095_u32
  MF_8192_BYTE_ALIGNMENT = 8191_u32
  MF_EVENT_SESSIONCAPS = "7e5ebcd0-11b8-4abe-afad-10f6599a7f42"
  MF_EVENT_SESSIONCAPS_DELTA = "7e5ebcd1-11b8-4abe-afad-10f6599a7f42"
  MFSESSIONCAP_START = 1_u32
  MFSESSIONCAP_SEEK = 2_u32
  MFSESSIONCAP_PAUSE = 4_u32
  MFSESSIONCAP_RATE_FORWARD = 16_u32
  MFSESSIONCAP_RATE_REVERSE = 32_u32
  MFSESSIONCAP_DOES_NOT_USE_NETWORK = 64_u32
  MF_EVENT_TOPOLOGY_STATUS = "30c5018d-9a53-454b-ad9e-6d5f8fa7c43b"
  MF_EVENT_START_PRESENTATION_TIME = "5ad914d0-9b45-4a8d-a2c0-81d1e50bfb07"
  MF_EVENT_PRESENTATION_TIME_OFFSET = "5ad914d1-9b45-4a8d-a2c0-81d1e50bfb07"
  MF_EVENT_START_PRESENTATION_TIME_AT_OUTPUT = "5ad914d2-9b45-4a8d-a2c0-81d1e50bfb07"
  MF_EVENT_SOURCE_FAKE_START = "a8cc55a7-6b31-419f-845d-ffb351a2434b"
  MF_EVENT_SOURCE_PROJECTSTART = "a8cc55a8-6b31-419f-845d-ffb351a2434b"
  MF_EVENT_SOURCE_ACTUAL_START = "a8cc55a9-6b31-419f-845d-ffb351a2434b"
  MF_EVENT_SOURCE_TOPOLOGY_CANCELED = "db62f650-9a5e-4704-acf3-563bc6a73364"
  MF_EVENT_SOURCE_CHARACTERISTICS = "47db8490-8b22-4f52-afda-9ce1b2d3cfa8"
  MF_EVENT_SOURCE_CHARACTERISTICS_OLD = "47db8491-8b22-4f52-afda-9ce1b2d3cfa8"
  MF_EVENT_DO_THINNING = "321ea6fb-dad9-46e4-b31d-d2eae7090e30"
  MF_EVENT_SCRUBSAMPLE_TIME = "9ac712b3-dcb8-44d5-8d0c-37455a2782e3"
  MF_EVENT_OUTPUT_NODE = "830f1a8b-c060-46dd-a801-1c95dec9b107"
  MF_EVENT_MFT_INPUT_STREAM_ID = "f29c2cca-7ae6-42d2-b284-bf837cc874e2"
  MF_EVENT_MFT_CONTEXT = "b7cd31f1-899e-4b41-80c9-26a896d32977"
  MF_EVENT_STREAM_METADATA_KEYDATA = "cd59a4a1-4a3b-4bbd-8665-72a40fbea776"
  MF_EVENT_STREAM_METADATA_CONTENT_KEYIDS = "5063449d-cc29-4fc6-a75a-d247b35af85c"
  MF_EVENT_STREAM_METADATA_SYSTEMID = "1ea2ef64-ba16-4a36-8719-fe7560ba32ad"
  MFSampleExtension_MaxDecodeFrameSize = "d3cc654f-f9f3-4a13-889f-f04eb2b5b957"
  MFSampleExtension_AccumulatedNonRefPicPercent = "79ea74df-a740-445b-bc98-c9ed1f260eee"
  MFSampleExtension_Encryption_ProtectionScheme = "d054d096-28bb-45da-87ec-74f351871406"
  MFSampleExtension_Encryption_CryptByteBlock = "9d84289b-0c7f-4713-ab95-108ab42ad801"
  MFSampleExtension_Encryption_SkipByteBlock = "0d550548-8317-4ab1-845f-d06306e293e3"
  MFSampleExtension_Encryption_SubSample_Mapping = "8444f27a-69a1-48da-bd08-11cef36830d2"
  MFSampleExtension_Encryption_ClearSliceHeaderData = "5509a4f4-320d-4e6c-8d1a-94c66dd20cb0"
  MFSampleExtension_Encryption_HardwareProtection_KeyInfoID = "8cbfcceb-94a5-4de1-8231-a85e47cf81e7"
  MFSampleExtension_Encryption_HardwareProtection_KeyInfo = "b2372080-455b-4dd7-9989-1a955784b754"
  MFSampleExtension_Encryption_HardwareProtection_VideoDecryptorContext = "693470c8-e837-47a0-88cb-535b905e3582"
  MFSampleExtension_Encryption_Opaque_Data = "224d77e5-1391-4ffb-9f41-b432f68c611d"
  MFSampleExtension_NALULengthInfo = "19124e7c-ad4b-465f-bb18-20186287b6af"
  MFSampleExtension_Encryption_ResumeVideoOutput = "a435aba5-afde-4cf5-bc1c-f6acaf13949d"
  MFSampleExtension_Encryption_NALUTypes = "b0f067c7-714c-416c-8d59-5f4ddf8913b6"
  MFSampleExtension_Encryption_SPSPPSData = "aede0fa2-0e0c-453c-b7f3-de8693364d11"
  MFSampleExtension_Encryption_SEIData = "3cf0e972-4542-4687-9999-585f565fba7d"
  MFSampleExtension_Encryption_HardwareProtection = "9a2b2d2b-8270-43e3-8448-994f426e8886"
  MFSampleExtension_CleanPoint = "9cdf01d8-a0f0-43ba-b077-eaa06cbd728a"
  MFSampleExtension_Discontinuity = "9cdf01d9-a0f0-43ba-b077-eaa06cbd728a"
  MFSampleExtension_Token = "8294da66-f328-4805-b551-00deb4c57a61"
  MFSampleExtension_ClosedCaption_CEA708 = "26f09068-e744-47dc-aa03-dbf20403bde6"
  MFSampleExtension_ClosedCaption_CEA708_MAX_SIZE = 256_u32
  MFSampleExtension_DecodeTimestamp = "73a954d4-09e2-4861-befc-94bd97c08e6e"
  MFSampleExtension_VideoEncodeQP = "b2efe478-f979-4c66-b95e-ee2b82c82f36"
  MFSampleExtension_VideoEncodePictureType = "973704e6-cd14-483c-8f20-c9fc0928bad5"
  MFSampleExtension_FrameCorruption = "b4dd4a8c-0beb-44c4-8b75-b02b913b04f0"
  MFSampleExtension_DirtyRects = "9ba70225-b342-4e97-9126-0b566ab7ea7e"
  MFSampleExtension_MoveRegions = "e2a6c693-3a8b-4b8d-95d0-f60281a12fb7"
  MFSampleExtension_HDCP_OptionalHeader = "9a2e7390-121f-455f-8376-c97428e0b540"
  MFSampleExtension_HDCP_FrameCounter = "9d389c60-f507-4aa6-a40a-71027a02f3de"
  MFSampleExtension_HDCP_StreamID = "177e5d74-c370-4a7a-95a2-36833c01d0af"
  MFSampleExtension_Timestamp = "1e436999-69be-4c7a-9369-70068c0260cb"
  MFSampleExtension_RepeatFrame = "88be738f-0711-4f42-b458-344aed42ec2f"
  MFT_ENCODER_ERROR = "c8d1eda4-98e4-41d5-9297-44f53852f90e"
  MFT_GFX_DRIVER_VERSION_ID_Attribute = "f34b9093-05e0-4b16-993d-3e2a2cde6ad3"
  MFSampleExtension_DescrambleData = "43483be6-4903-4314-b032-2951365936fc"
  MFSampleExtension_SampleKeyID = "9ed713c8-9b87-4b26-8297-a93b0c5a8acc"
  MFSampleExtension_GenKeyFunc = "441ca1ee-6b1f-4501-903a-de87df42f6ed"
  MFSampleExtension_GenKeyCtx = "188120cb-d7da-4b59-9b3e-9252fd37301c"
  MFSampleExtension_PacketCrossOffsets = "2789671d-389f-40bb-90d9-c282f77f9abd"
  MFSampleExtension_Encryption_SampleID = "6698b84e-0afa-4330-aeb2-1c0a98d7a44d"
  MFSampleExtension_Encryption_KeyID = "76376591-795f-4da1-86ed-9d46eca109a9"
  MFSampleExtension_Content_KeyID = "c6c7f5b0-acca-415b-87d9-10441469efc6"
  MFSampleExtension_Encryption_SubSampleMappingSplit = "fe0254b9-2aa5-4edc-99f7-17e89dbf9174"
  MFSampleExtension_Interlaced = "b1d5830a-deb8-40e3-90fa-389943716461"
  MFSampleExtension_BottomFieldFirst = "941ce0a3-6ae3-4dda-9a08-a64298340617"
  MFSampleExtension_RepeatFirstField = "304d257c-7493-4fbd-b149-9228de8d9a99"
  MFSampleExtension_SingleField = "9d85f816-658b-455a-bde0-9fa7e15ab8f9"
  MFSampleExtension_DerivedFromTopField = "6852465a-ae1c-4553-8e9b-c3420fcb1637"
  MFSampleExtension_MeanAbsoluteDifference = "1cdbde11-08b4-4311-a6dd-0f9f371907aa"
  MFSampleExtension_LongTermReferenceFrameInfo = "9154733f-e1bd-41bf-81d3-fcd918f71332"
  MFSampleExtension_ROIRectangle = "3414a438-4998-4d2c-be82-be3ca0b24d43"
  MFSampleExtension_LastSlice = "2b5d5457-5547-4f07-b8c8-b4a3a9a1daac"
  MACROBLOCK_FLAG_SKIP = 1_u32
  MACROBLOCK_FLAG_DIRTY = 2_u32
  MACROBLOCK_FLAG_MOTION = 4_u32
  MACROBLOCK_FLAG_VIDEO = 8_u32
  MACROBLOCK_FLAG_HAS_MOTION_VECTOR = 16_u32
  MACROBLOCK_FLAG_HAS_QP = 32_u32
  MFSampleExtension_FeatureMap = "a032d165-46fc-400a-b449-49de53e62a6e"
  MFSampleExtension_ChromaOnly = "1eb9179c-a01f-4845-8c04-0e65a26eb04f"
  MFSampleExtension_PhotoThumbnail = "74bbc85c-c8bb-42dc-b586-da17ffd35dcc"
  MFSampleExtension_PhotoThumbnailMediaType = "61ad5420-ebf8-4143-89af-6bf25f672def"
  MFSampleExtension_CaptureMetadata = "2ebe23a8-faf5-444a-a6a2-eb810880ab5d"
  MFSampleExtension_MDLCacheCookie = "5f002af9-d8f9-41a3-b6c3-a2ad43f647ad"
  MF_CAPTURE_METADATA_PHOTO_FRAME_FLASH = "0f9dd6c6-6003-45d8-bd59-f1f53e3d04e8"
  MF_CAPTURE_METADATA_FRAME_RAWSTREAM = "9252077b-2680-49b9-ae02-b19075973b70"
  MF_CAPTURE_METADATA_FOCUSSTATE = "a87ee154-997f-465d-b91f-29d53b982b88"
  MF_CAPTURE_METADATA_REQUESTED_FRAME_SETTING_ID = "bb3716d9-8a61-47a4-8197-459c7ff174d5"
  MF_CAPTURE_METADATA_EXPOSURE_TIME = "16b9ae99-cd84-4063-879d-a28c7633729e"
  MF_CAPTURE_METADATA_EXPOSURE_COMPENSATION = "d198aa75-4b62-4345-abf3-3c31fa12c299"
  MF_CAPTURE_METADATA_ISO_SPEED = "e528a68f-b2e3-44fe-8b65-07bf4b5a13ff"
  MF_CAPTURE_METADATA_LENS_POSITION = "b5fc8e86-11d1-4e70-819b-723a89fa4520"
  MF_CAPTURE_METADATA_SCENE_MODE = "9cc3b54d-5ed3-4bae-b388-7670aef59e13"
  MF_CAPTURE_METADATA_FLASH = "4a51520b-fb36-446c-9df2-68171b9a0389"
  MF_CAPTURE_METADATA_FLASH_POWER = "9c0e0d49-0205-491a-bc9d-2d6e1f4d5684"
  MF_CAPTURE_METADATA_WHITEBALANCE = "c736fd77-0fb9-4e2e-97a2-fcd490739ee9"
  MF_CAPTURE_METADATA_ZOOMFACTOR = "e50b0b81-e501-42c2-abf2-857ecb13fa5c"
  MF_CAPTURE_METADATA_FACEROIS = "864f25a6-349f-46b1-a30e-54cc22928a47"
  MF_CAPTURE_METADATA_FACEROITIMESTAMPS = "e94d50cc-3da0-44d4-bb34-83198a741868"
  MF_CAPTURE_METADATA_FACEROICHARACTERIZATIONS = "b927a1a8-18ef-46d3-b3af-69372f94d9b2"
  MF_CAPTURE_METADATA_ISO_GAINS = "05802ac9-0e1d-41c7-a8c8-7e7369f84e1e"
  MF_CAPTURE_METADATA_SENSORFRAMERATE = "db51357e-9d3d-4962-b06d-07ce650d9a0a"
  MF_CAPTURE_METADATA_WHITEBALANCE_GAINS = "e7570c8f-2dcb-4c7c-aace-22ece7cce647"
  MF_CAPTURE_METADATA_HISTOGRAM = "85358432-2ef6-4ba9-a3fb-06d82974b895"
  MF_CAPTURE_METADATA_EXIF = "2e9575b8-8c31-4a02-8575-42b197b71592"
  MF_CAPTURE_METADATA_FRAME_ILLUMINATION = "6d688ffc-63d3-46fe-bada-5b947db0d080"
  MF_CAPTURE_METADATA_UVC_PAYLOADHEADER = "f9f88a87-e1dd-441e-95cb-42e21a64f1d9"
  MFSampleExtension_Depth_MinReliableDepth = "5f8582b2-e36b-47c8-9b87-fee1ca72c5b0"
  MFSampleExtension_Depth_MaxReliableDepth = "e45545d1-1f0f-4a32-a8a7-6101a24ea8be"
  MF_CAPTURE_METADATA_FIRST_SCANLINE_START_TIME_QPC = "6a2c49f1-e052-46b6-b2d9-73c1558709af"
  MF_CAPTURE_METADATA_LAST_SCANLINE_END_TIME_QPC = "dccadecb-c4d4-400d-b418-10e88525e1f6"
  MF_CAPTURE_METADATA_SCANLINE_TIME_QPC_ACCURACY = "4cd79c51-f765-4b09-b1e1-27d1f7ebea09"
  MF_CAPTURE_METADATA_SCANLINE_DIRECTION = "6496a3ba-1907-49e6-b0c3-123795f380a9"
  MFCAPTURE_METADATA_SCAN_RIGHT_LEFT = 1_u32
  MFCAPTURE_METADATA_SCAN_BOTTOM_TOP = 2_u32
  MFCAPTURE_METADATA_SCANLINE_VERTICAL = 4_u32
  MF_CAPTURE_METADATA_DIGITALWINDOW = "276f72a2-59c8-4f69-97b4-068b8c0ec044"
  MF_CAPTURE_METADATA_FRAME_BACKGROUND_MASK = "03f14dd3-75dd-433a-a8e2-1e3f5f2a50a0"
  MF_METADATAFACIALEXPRESSION_SMILE = 1_u32
  MF_METADATATIMESTAMPS_DEVICE = 1_u32
  MF_METADATATIMESTAMPS_PRESENTATION = 2_u32
  MF_HISTOGRAM_CHANNEL_Y = 1_u32
  MF_HISTOGRAM_CHANNEL_R = 2_u32
  MF_HISTOGRAM_CHANNEL_G = 4_u32
  MF_HISTOGRAM_CHANNEL_B = 8_u32
  MF_HISTOGRAM_CHANNEL_Cb = 16_u32
  MF_HISTOGRAM_CHANNEL_Cr = 32_u32
  MFT_CATEGORY_VIDEO_DECODER = "d6c02d4b-6833-45b4-971a-05a4b04bab91"
  MFT_CATEGORY_VIDEO_ENCODER = "f79eac7d-e545-4387-bdee-d647d7bde42a"
  MFT_CATEGORY_VIDEO_EFFECT = "12e17c21-532c-4a6e-8a1c-40825a736397"
  MFT_CATEGORY_MULTIPLEXER = "059c561e-05ae-4b61-b69d-55b61ee54a7b"
  MFT_CATEGORY_DEMULTIPLEXER = "a8700a7a-939b-44c5-99d7-76226b23b3f1"
  MFT_CATEGORY_AUDIO_DECODER = "9ea73fb4-ef7a-4559-8d5d-719d8f0426c7"
  MFT_CATEGORY_AUDIO_ENCODER = "91c64bd0-f91e-4d8c-9276-db248279d975"
  MFT_CATEGORY_AUDIO_EFFECT = "11064c48-3648-4ed0-932e-05ce8ac811b7"
  MFT_CATEGORY_VIDEO_PROCESSOR = "302ea3fc-aa5f-47f9-9f7a-c2188bb16302"
  MFT_CATEGORY_OTHER = "90175d57-b7ea-4901-aeb3-933a8747756f"
  MFT_CATEGORY_ENCRYPTOR = "b0c687be-01cd-44b5-b8b2-7c1d7e058b1f"
  MFT_CATEGORY_VIDEO_RENDERER_EFFECT = "145cd8b4-92f4-4b23-8ae7-e0df06c2da95"
  MFT_ENUM_VIDEO_RENDERER_EXTENSION_PROFILE = "62c56928-9a4e-443b-b9dc-cac830c24100"
  MFT_ENUM_ADAPTER_LUID = "1d39518c-e220-4da8-a07f-ba172552d6b1"
  MFT_SUPPORT_DYNAMIC_FORMAT_CHANGE = "53476a11-3f13-49fb-ac42-ee2733c96741"
  LOCAL_D3DFMT_DEFINES = 1_u32
  MFVideoFormat_Base = "00000000-0000-0010-8000-00aa00389b71"
  MFVideoFormat_RGB32 = "00000016-0000-0010-8000-00aa00389b71"
  MFVideoFormat_ARGB32 = "00000015-0000-0010-8000-00aa00389b71"
  MFVideoFormat_RGB24 = "00000014-0000-0010-8000-00aa00389b71"
  MFVideoFormat_RGB555 = "00000018-0000-0010-8000-00aa00389b71"
  MFVideoFormat_RGB565 = "00000017-0000-0010-8000-00aa00389b71"
  MFVideoFormat_RGB8 = "00000029-0000-0010-8000-00aa00389b71"
  MFVideoFormat_L8 = "00000032-0000-0010-8000-00aa00389b71"
  MFVideoFormat_L16 = "00000051-0000-0010-8000-00aa00389b71"
  MFVideoFormat_D16 = "00000050-0000-0010-8000-00aa00389b71"
  MFVideoFormat_AI44 = "34344941-0000-0010-8000-00aa00389b71"
  MFVideoFormat_AYUV = "56555941-0000-0010-8000-00aa00389b71"
  MFVideoFormat_YUY2 = "32595559-0000-0010-8000-00aa00389b71"
  MFVideoFormat_YVYU = "55595659-0000-0010-8000-00aa00389b71"
  MFVideoFormat_YVU9 = "39555659-0000-0010-8000-00aa00389b71"
  MFVideoFormat_UYVY = "59565955-0000-0010-8000-00aa00389b71"
  MFVideoFormat_NV11 = "3131564e-0000-0010-8000-00aa00389b71"
  MFVideoFormat_NV12 = "3231564e-0000-0010-8000-00aa00389b71"
  MFVideoFormat_NV21 = "3132564e-0000-0010-8000-00aa00389b71"
  MFVideoFormat_YV12 = "32315659-0000-0010-8000-00aa00389b71"
  MFVideoFormat_I420 = "30323449-0000-0010-8000-00aa00389b71"
  MFVideoFormat_IYUV = "56555949-0000-0010-8000-00aa00389b71"
  MFVideoFormat_Y210 = "30313259-0000-0010-8000-00aa00389b71"
  MFVideoFormat_Y216 = "36313259-0000-0010-8000-00aa00389b71"
  MFVideoFormat_Y410 = "30313459-0000-0010-8000-00aa00389b71"
  MFVideoFormat_Y416 = "36313459-0000-0010-8000-00aa00389b71"
  MFVideoFormat_Y41P = "50313459-0000-0010-8000-00aa00389b71"
  MFVideoFormat_Y41T = "54313459-0000-0010-8000-00aa00389b71"
  MFVideoFormat_Y42T = "54323459-0000-0010-8000-00aa00389b71"
  MFVideoFormat_P210 = "30313250-0000-0010-8000-00aa00389b71"
  MFVideoFormat_P216 = "36313250-0000-0010-8000-00aa00389b71"
  MFVideoFormat_P010 = "30313050-0000-0010-8000-00aa00389b71"
  MFVideoFormat_P016 = "36313050-0000-0010-8000-00aa00389b71"
  MFVideoFormat_v210 = "30313276-0000-0010-8000-00aa00389b71"
  MFVideoFormat_v216 = "36313276-0000-0010-8000-00aa00389b71"
  MFVideoFormat_v410 = "30313476-0000-0010-8000-00aa00389b71"
  MFVideoFormat_MP43 = "3334504d-0000-0010-8000-00aa00389b71"
  MFVideoFormat_MP4S = "5334504d-0000-0010-8000-00aa00389b71"
  MFVideoFormat_M4S2 = "3253344d-0000-0010-8000-00aa00389b71"
  MFVideoFormat_MP4V = "5634504d-0000-0010-8000-00aa00389b71"
  MFVideoFormat_WMV1 = "31564d57-0000-0010-8000-00aa00389b71"
  MFVideoFormat_WMV2 = "32564d57-0000-0010-8000-00aa00389b71"
  MFVideoFormat_WMV3 = "33564d57-0000-0010-8000-00aa00389b71"
  MFVideoFormat_WVC1 = "31435657-0000-0010-8000-00aa00389b71"
  MFVideoFormat_MSS1 = "3153534d-0000-0010-8000-00aa00389b71"
  MFVideoFormat_MSS2 = "3253534d-0000-0010-8000-00aa00389b71"
  MFVideoFormat_MPG1 = "3147504d-0000-0010-8000-00aa00389b71"
  MFVideoFormat_DVSL = "6c737664-0000-0010-8000-00aa00389b71"
  MFVideoFormat_DVSD = "64737664-0000-0010-8000-00aa00389b71"
  MFVideoFormat_DVHD = "64687664-0000-0010-8000-00aa00389b71"
  MFVideoFormat_DV25 = "35327664-0000-0010-8000-00aa00389b71"
  MFVideoFormat_DV50 = "30357664-0000-0010-8000-00aa00389b71"
  MFVideoFormat_DVH1 = "31687664-0000-0010-8000-00aa00389b71"
  MFVideoFormat_H264 = "34363248-0000-0010-8000-00aa00389b71"
  MFVideoFormat_H265 = "35363248-0000-0010-8000-00aa00389b71"
  MFVideoFormat_MJPG = "47504a4d-0000-0010-8000-00aa00389b71"
  MFVideoFormat_420O = "4f303234-0000-0010-8000-00aa00389b71"
  MFVideoFormat_HEVC = "43564548-0000-0010-8000-00aa00389b71"
  MFVideoFormat_HEVC_ES = "53564548-0000-0010-8000-00aa00389b71"
  MFVideoFormat_VP80 = "30385056-0000-0010-8000-00aa00389b71"
  MFVideoFormat_VP90 = "30395056-0000-0010-8000-00aa00389b71"
  MFVideoFormat_ORAW = "5741524f-0000-0010-8000-00aa00389b71"
  MFVideoFormat_H263 = "33363248-0000-0010-8000-00aa00389b71"
  MFVideoFormat_A2R10G10B10 = "0000001f-0000-0010-8000-00aa00389b71"
  MFVideoFormat_A16B16G16R16F = "00000071-0000-0010-8000-00aa00389b71"
  MFVideoFormat_VP10 = "30315056-0000-0010-8000-00aa00389b71"
  MFVideoFormat_AV1 = "31305641-0000-0010-8000-00aa00389b71"
  MFVideoFormat_Theora = "6f656874-0000-0010-8000-00aa00389b71"
  MFVideoFormat_H264_ES = "3f40f4f0-5622-4ff8-b6d8-a17a584bee5e"
  MFVideoFormat_MPEG2 = "e06d8026-db46-11cf-b4d1-00805f6cbbea"
  MFAudioFormat_Base = "00000000-0000-0010-8000-00aa00389b71"
  MFAudioFormat_PCM = "00000001-0000-0010-8000-00aa00389b71"
  MFAudioFormat_Float = "00000003-0000-0010-8000-00aa00389b71"
  MFAudioFormat_DTS = "00000008-0000-0010-8000-00aa00389b71"
  MFAudioFormat_Dolby_AC3_SPDIF = "00000092-0000-0010-8000-00aa00389b71"
  MFAudioFormat_DRM = "00000009-0000-0010-8000-00aa00389b71"
  MFAudioFormat_WMAudioV8 = "00000161-0000-0010-8000-00aa00389b71"
  MFAudioFormat_WMAudioV9 = "00000162-0000-0010-8000-00aa00389b71"
  MFAudioFormat_WMAudio_Lossless = "00000163-0000-0010-8000-00aa00389b71"
  MFAudioFormat_WMASPDIF = "00000164-0000-0010-8000-00aa00389b71"
  MFAudioFormat_MSP1 = "0000000a-0000-0010-8000-00aa00389b71"
  MFAudioFormat_MP3 = "00000055-0000-0010-8000-00aa00389b71"
  MFAudioFormat_MPEG = "00000050-0000-0010-8000-00aa00389b71"
  MFAudioFormat_AAC = "00001610-0000-0010-8000-00aa00389b71"
  MFAudioFormat_ADTS = "00001600-0000-0010-8000-00aa00389b71"
  MFAudioFormat_AMR_NB = "00007361-0000-0010-8000-00aa00389b71"
  MFAudioFormat_AMR_WB = "00007362-0000-0010-8000-00aa00389b71"
  MFAudioFormat_AMR_WP = "00007363-0000-0010-8000-00aa00389b71"
  MFAudioFormat_FLAC = "0000f1ac-0000-0010-8000-00aa00389b71"
  MFAudioFormat_ALAC = "00006c61-0000-0010-8000-00aa00389b71"
  MFAudioFormat_Opus = "0000704f-0000-0010-8000-00aa00389b71"
  MFAudioFormat_Dolby_AC4 = "0000ac40-0000-0010-8000-00aa00389b71"
  MFAudioFormat_Dolby_AC3 = "e06d802c-db46-11cf-b4d1-00805f6cbbea"
  MFAudioFormat_Dolby_DDPlus = "a7fb87af-2d02-42fb-a4d4-05cd93843bdd"
  MFAudioFormat_Dolby_AC4_V1 = "36b7927c-3d87-4a2a-9196-a21ad9e935e6"
  MFAudioFormat_Dolby_AC4_V2 = "7998b2a0-17dd-49b6-8dfa-9b278552a2ac"
  MFAudioFormat_Dolby_AC4_V1_ES = "9d8dccc6-d156-4fb8-979c-a85be7d21dfa"
  MFAudioFormat_Dolby_AC4_V2_ES = "7e58c9f9-b070-45f4-8ccd-a99a0417c1ac"
  MFAudioFormat_Vorbis = "8d2fd10b-5841-4a6b-8905-588fec1aded9"
  MFAudioFormat_DTS_RAW = "e06d8033-db46-11cf-b4d1-00805f6cbbea"
  MFAudioFormat_DTS_HD = "a2e58eb7-0fa9-48bb-a40c-fa0e156d0645"
  MFAudioFormat_DTS_XLL = "45b37c1b-8c70-4e59-a7be-a1e42c81c80d"
  MFAudioFormat_DTS_LBR = "c2fe6f0a-4e3c-4df1-9b60-50863091e4b9"
  MFAudioFormat_DTS_UHD = "87020117-ace3-42de-b73e-c656706263f8"
  MFAudioFormat_DTS_UHDY = "9b9cca00-91b9-4ccc-883a-8f787ac3cc86"
  MFAudioFormat_Float_SpatialObjects = "fa39cd94-bc64-4ab1-9b71-dcd09d5a7e7a"
  MFAudioFormat_LPCM = "e06d8032-db46-11cf-b4d1-00805f6cbbea"
  MFAudioFormat_PCM_HDCP = "a5e7ff01-8411-4acc-a865-5f4941288d80"
  MFAudioFormat_Dolby_AC3_HDCP = "97663a80-8ffb-4445-a6ba-792d908f497f"
  MFAudioFormat_AAC_HDCP = "419bce76-8b72-400f-adeb-84b57d63484d"
  MFAudioFormat_ADTS_HDCP = "da4963a3-14d8-4dcf-92b7-193eb84363db"
  MFAudioFormat_Base_HDCP = "3884b5bc-e277-43fd-983d-038aa8d9b605"
  MFVideoFormat_H264_HDCP = "5d0ce9dd-9817-49da-bdfd-f5f5b98f18a6"
  MFVideoFormat_HEVC_HDCP = "3cfe0fe6-05c4-47dc-9d70-4bdb2959720f"
  MFVideoFormat_Base_HDCP = "eac3b9d5-bd14-4237-8f1f-bab428e49312"
  MFMPEG4Format_Base = "00000000-767a-494d-b478-f29d25dc9037"
  MFSubtitleFormat_XML = "2006f94f-29ca-4195-b8db-00ded8ff0c97"
  MFSubtitleFormat_TTML = "73e73992-9a10-4356-9557-7194e91e3e54"
  MFSubtitleFormat_ATSC = "7fa7faa3-feae-4e16-aedf-36b9acfbb099"
  MFSubtitleFormat_WebVTT = "c886d215-f485-40bb-8db6-fadbc619a45d"
  MFSubtitleFormat_SRT = "5e467f2e-77ca-4ca5-8391-d142ed4b76c8"
  MFSubtitleFormat_SSA = "57176a1b-1a9e-4eea-abef-c61760198ac4"
  MFSubtitleFormat_CustomUserData = "1bb3d849-6614-4d80-8882-ed24aa82da92"
  MFSubtitleFormat_PGS = "71f40e4a-1278-4442-b30d-39dd1d7722bc"
  MFSubtitleFormat_VobSub = "6b8e40f4-8d2c-4ced-ad91-5960e45b4433"
  MF_MT_MAJOR_TYPE = "48eba18e-f8c9-4687-bf11-0a74c9f96a8f"
  MF_MT_SUBTYPE = "f7e34c9a-42e8-4714-b74b-cb29d72c35e5"
  MF_MT_ALL_SAMPLES_INDEPENDENT = "c9173739-5e56-461c-b713-46fb995cb95f"
  MF_MT_FIXED_SIZE_SAMPLES = "b8ebefaf-b718-4e04-b0a9-116775e3321b"
  MF_MT_COMPRESSED = "3afd0cee-18f2-4ba5-a110-8bea502e1f92"
  MF_MT_SAMPLE_SIZE = "dad3ab78-1990-408b-bce2-eba673dacc10"
  MF_MT_WRAPPED_TYPE = "4d3f7b23-d02f-4e6c-9bee-e4bf2c6c695d"
  MF_MT_VIDEO_3D = "cb5e88cf-7b5b-476b-85aa-1ca5ae187555"
  MF_MT_VIDEO_3D_FORMAT = "5315d8a0-87c5-4697-b793-6606c67c049b"
  MF_MT_VIDEO_3D_NUM_VIEWS = "bb077e8a-dcbf-42eb-af60-418df98aa495"
  MF_MT_VIDEO_3D_LEFT_IS_BASE = "6d4b7bff-5629-4404-948c-c634f4ce26d4"
  MF_MT_VIDEO_3D_FIRST_IS_LEFT = "ec298493-0ada-4ea1-a4fe-cbbd36ce9331"
  MFSampleExtension_3DVideo = "f86f97a4-dd54-4e2e-9a5e-55fc2d74a005"
  MFSampleExtension_3DVideo_SampleFormat = "08671772-e36f-4cff-97b3-d72e20987a48"
  MF_MT_VIDEO_ROTATION = "c380465d-2271-428c-9b83-ecea3b4a85c1"
  MF_DEVICESTREAM_MULTIPLEXED_MANAGER = "6ea542b0-281f-4231-a464-fe2f5022501c"
  MF_MEDIATYPE_MULTIPLEXED_MANAGER = "13c78fb5-f275-4ea0-bb5f-0249832b0d6e"
  MFSampleExtension_MULTIPLEXED_MANAGER = "8dcdee79-6b5a-4c45-8db9-20b395f02fcf"
  MF_MT_SECURE = "c5acc4fd-0304-4ecf-809f-47bc97ff63bd"
  MF_DEVICESTREAM_ATTRIBUTE_FRAMESOURCE_TYPES = "17145fd1-1b2b-423c-8001-2b6833ed3588"
  MF_MT_ALPHA_MODE = "5d959b0d-4cbf-4d04-919f-3f5f7f284211"
  MF_MT_DEPTH_MEASUREMENT = "fd5ac489-0917-4bb6-9d54-3122bf70144b"
  MF_MT_DEPTH_VALUE_UNIT = "21a800f5-3189-4797-beba-f13cd9a31a5e"
  MF_MT_VIDEO_NO_FRAME_ORDERING = "3f5b106f-6bc2-4ee3-b7ed-8902c18f5351"
  MF_MT_VIDEO_H264_NO_FMOASO = "ed461cd6-ec9f-416a-a8a3-26d7d31018d7"
  MFSampleExtension_ForwardedDecodeUnits = "424c754c-97c8-48d6-8777-fc41f7b60879"
  MFSampleExtension_TargetGlobalLuminance = "3f60ef36-31ef-4daf-8360-940397e41ef3"
  MFSampleExtension_ForwardedDecodeUnitType = "089e57c7-47d3-4a26-bf9c-4b64fafb5d1e"
  MF_MT_FORWARD_CUSTOM_NALU = "ed336efd-244f-428d-9153-28f399458890"
  MF_MT_FORWARD_CUSTOM_SEI = "e27362f1-b136-41d1-9594-3a7e4febf2d1"
  MF_MT_VIDEO_RENDERER_EXTENSION_PROFILE = "8437d4b9-d448-4fcd-9b6b-839bf96c7798"
  MF_DECODER_FWD_CUSTOM_SEI_DECODE_ORDER = "f13bbe3c-36d4-410a-b985-7a951a1e6294"
  MF_VIDEO_RENDERER_EFFECT_APP_SERVICE_NAME = "c6052a80-6d9c-40a3-9db8-f027a25c9ab9"
  MF_MT_AUDIO_NUM_CHANNELS = "37e48bf5-645e-4c5b-89de-ada9e29b696a"
  MF_MT_AUDIO_SAMPLES_PER_SECOND = "5faeeae7-0290-4c31-9e8a-c534f68d9dba"
  MF_MT_AUDIO_FLOAT_SAMPLES_PER_SECOND = "fb3b724a-cfb5-4319-aefe-6e42b2406132"
  MF_MT_AUDIO_AVG_BYTES_PER_SECOND = "1aab75c8-cfef-451c-ab95-ac034b8e1731"
  MF_MT_AUDIO_BLOCK_ALIGNMENT = "322de230-9eeb-43bd-ab7a-ff412251541d"
  MF_MT_AUDIO_BITS_PER_SAMPLE = "f2deb57f-40fa-4764-aa33-ed4f2d1ff669"
  MF_MT_AUDIO_VALID_BITS_PER_SAMPLE = "d9bf8d6a-9530-4b7c-9ddf-ff6fd58bbd06"
  MF_MT_AUDIO_SAMPLES_PER_BLOCK = "aab15aac-e13a-4995-9222-501ea15c6877"
  MF_MT_AUDIO_CHANNEL_MASK = "55fb5765-644a-4caf-8479-938983bb1588"
  MF_MT_AUDIO_FOLDDOWN_MATRIX = "9d62927c-36be-4cf2-b5c4-a3926e3e8711"
  MF_MT_AUDIO_WMADRC_PEAKREF = "9d62927d-36be-4cf2-b5c4-a3926e3e8711"
  MF_MT_AUDIO_WMADRC_PEAKTARGET = "9d62927e-36be-4cf2-b5c4-a3926e3e8711"
  MF_MT_AUDIO_WMADRC_AVGREF = "9d62927f-36be-4cf2-b5c4-a3926e3e8711"
  MF_MT_AUDIO_WMADRC_AVGTARGET = "9d629280-36be-4cf2-b5c4-a3926e3e8711"
  MF_MT_AUDIO_PREFER_WAVEFORMATEX = "a901aaba-e037-458a-bdf6-545be2074042"
  MF_MT_AAC_PAYLOAD_TYPE = "bfbabe79-7434-4d1c-94f0-72a3b9e17188"
  MF_MT_AAC_AUDIO_PROFILE_LEVEL_INDICATION = "7632f0e6-9538-4d61-acda-ea29c8c14456"
  MF_MT_AUDIO_FLAC_MAX_BLOCK_SIZE = "8b81adae-4b5a-4d40-8022-f38d09ca3c5c"
  MF_MT_SPATIAL_AUDIO_MAX_DYNAMIC_OBJECTS = "dcfba24a-2609-4240-a721-3faea76a4df9"
  MF_MT_SPATIAL_AUDIO_OBJECT_METADATA_FORMAT_ID = "2ab71bc0-6223-4ba7-ad64-7b94b47ae792"
  MF_MT_SPATIAL_AUDIO_OBJECT_METADATA_LENGTH = "094ba8be-d723-489f-92fa-766777b34726"
  MF_MT_SPATIAL_AUDIO_MAX_METADATA_ITEMS = "11aa80b4-e0da-47c6-8060-96c1259ae50d"
  MF_MT_SPATIAL_AUDIO_MIN_METADATA_ITEM_OFFSET_SPACING = "83e96ec9-1184-417e-8254-9f269158fc06"
  MF_MT_SPATIAL_AUDIO_DATA_PRESENT = "6842f6e7-d43e-4ebb-9c9c-c96f41784863"
  MF_MT_FRAME_SIZE = "1652c33d-d6b2-4012-b834-72030849a37d"
  MF_MT_FRAME_RATE = "c459a2e8-3d2c-4e44-b132-fee5156c7bb0"
  MF_MT_PIXEL_ASPECT_RATIO = "c6376a1e-8d0a-4027-be45-6d9a0ad39bb6"
  MF_MT_DRM_FLAGS = "8772f323-355a-4cc7-bb78-6d61a048ae82"
  MF_MT_TIMESTAMP_CAN_BE_DTS = "24974215-1b7b-41e4-8625-ac469f2dedaa"
  MF_MT_PAD_CONTROL_FLAGS = "4d0e73e5-80ea-4354-a9d0-1176ceb028ea"
  MF_MT_SOURCE_CONTENT_HINT = "68aca3cc-22d0-44e6-85f8-28167197fa38"
  MF_MT_VIDEO_CHROMA_SITING = "65df2370-c773-4c33-aa64-843e068efb0c"
  MF_MT_INTERLACE_MODE = "e2724bb8-e676-4806-b4b2-a8d6efb44ccd"
  MF_MT_TRANSFER_FUNCTION = "5fb0fce9-be5c-4935-a811-ec838f8eed93"
  MF_MT_VIDEO_PRIMARIES = "dbfbe4d7-0740-4ee0-8192-850ab0e21935"
  MF_MT_MAX_LUMINANCE_LEVEL = "50253128-c110-4de4-98ae-46a324fae6da"
  MF_MT_MAX_FRAME_AVERAGE_LUMINANCE_LEVEL = "58d4bf57-6f52-4733-a195-a9e29ecf9e27"
  MF_MT_MAX_MASTERING_LUMINANCE = "d6c6b997-272f-4ca1-8d00-8042111a0ff6"
  MF_MT_MIN_MASTERING_LUMINANCE = "839a4460-4e7e-4b4f-ae79-cc08905c7b27"
  MF_MT_DECODER_USE_MAX_RESOLUTION = "4c547c24-af9a-4f38-96ad-978773cf53e7"
  MF_MT_DECODER_MAX_DPB_COUNT = "67be144c-88b7-4ca9-9628-c808d5262217"
  MF_MT_CUSTOM_VIDEO_PRIMARIES = "47537213-8cfb-4722-aa34-fbc9e24d77b8"
  MF_MT_YUV_MATRIX = "3e23d450-2c75-4d25-a00e-b91670d12327"
  MF_MT_VIDEO_LIGHTING = "53a0529c-890b-4216-8bf9-599367ad6d20"
  MF_MT_VIDEO_NOMINAL_RANGE = "c21b8ee5-b956-4071-8daf-325edf5cab11"
  MF_MT_GEOMETRIC_APERTURE = "66758743-7e5f-400d-980a-aa8596c85696"
  MF_MT_MINIMUM_DISPLAY_APERTURE = "d7388766-18fe-48c6-a177-ee894867c8c4"
  MF_MT_PAN_SCAN_APERTURE = "79614dde-9187-48fb-b8c7-4d52689de649"
  MF_MT_PAN_SCAN_ENABLED = "4b7f6bc3-8b13-40b2-a993-abf630b8204e"
  MF_MT_AVG_BITRATE = "20332624-fb0d-4d9e-bd0d-cbf6786c102e"
  MF_MT_AVG_BIT_ERROR_RATE = "799cabd6-3508-4db4-a3c7-569cd533deb1"
  MF_MT_MAX_KEYFRAME_SPACING = "c16eb52b-73a1-476f-8d62-839d6a020652"
  MF_MT_USER_DATA = "b6bc765f-4c3b-40a4-bd51-2535b66fe09d"
  MF_MT_OUTPUT_BUFFER_NUM = "a505d3ac-f930-436e-8ede-93a509ce23b2"
  MF_MT_REALTIME_CONTENT = "bb12d222-2bdb-425e-91ec-2308e189a58f"
  MF_MT_DEFAULT_STRIDE = "644b4e48-1e02-4516-b0eb-c01ca9d49ac6"
  MF_MT_PALETTE = "6d283f42-9846-4410-afd9-654d503b1a54"
  MF_MT_AM_FORMAT_TYPE = "73d1072d-1870-4174-a063-29ff4ff6c11e"
  MF_MT_VIDEO_PROFILE = "ad76a80b-2d5c-4e0b-b375-64e520137036"
  MF_MT_VIDEO_LEVEL = "96f66574-11c5-4015-8666-bff516436da7"
  MF_MT_MPEG_START_TIME_CODE = "91f67885-4333-4280-97cd-bd5a6c03a06e"
  MF_MT_MPEG2_PROFILE = "ad76a80b-2d5c-4e0b-b375-64e520137036"
  MF_MT_MPEG2_LEVEL = "96f66574-11c5-4015-8666-bff516436da7"
  MF_MT_MPEG2_FLAGS = "31e3991d-f701-4b2f-b426-8ae3bda9e04b"
  MF_MT_MPEG_SEQUENCE_HEADER = "3c036de7-3ad0-4c9e-9216-ee6d6ac21cb3"
  MF_MT_MPEG2_STANDARD = "a20af9e8-928a-4b26-aaa9-f05c74cac47c"
  MF_MT_MPEG2_TIMECODE = "5229ba10-e29d-4f80-a59c-df4f180207d2"
  MF_MT_MPEG2_CONTENT_PACKET = "825d55e4-4f12-4197-9eb3-59b6e4710f06"
  MF_MT_MPEG2_ONE_FRAME_PER_PACKET = "91a49eb5-1d20-4b42-ace8-804269bf95ed"
  MF_MT_MPEG2_HDCP = "168f1b4a-3e91-450f-aea7-e4baeadae5ba"
  MF_MT_H264_MAX_CODEC_CONFIG_DELAY = "f5929986-4c45-4fbb-bb49-6cc534d05b9b"
  MF_MT_H264_SUPPORTED_SLICE_MODES = "c8be1937-4d64-4549-8343-a8086c0bfda5"
  MF_MT_H264_SUPPORTED_SYNC_FRAME_TYPES = "89a52c01-f282-48d2-b522-22e6ae633199"
  MF_MT_H264_RESOLUTION_SCALING = "e3854272-f715-4757-ba90-1b696c773457"
  MF_MT_H264_SIMULCAST_SUPPORT = "9ea2d63d-53f0-4a34-b94e-9de49a078cb3"
  MF_MT_H264_SUPPORTED_RATE_CONTROL_MODES = "6a8ac47e-519c-4f18-9bb3-7eeaaea5594d"
  MF_MT_H264_MAX_MB_PER_SEC = "45256d30-7215-4576-9336-b0f1bcd59bb2"
  MF_MT_H264_SUPPORTED_USAGES = "60b1a998-dc01-40ce-9736-aba845a2dbdc"
  MF_MT_H264_CAPABILITIES = "bb3bd508-490a-11e0-99e4-1316dfd72085"
  MF_MT_H264_SVC_CAPABILITIES = "f8993abe-d937-4a8f-bbca-6966fe9e1152"
  MF_MT_H264_USAGE = "359ce3a5-af00-49ca-a2f4-2ac94ca82b61"
  MF_MT_H264_RATE_CONTROL_MODES = "705177d8-45cb-11e0-ac7d-b91ce0d72085"
  MF_MT_H264_LAYOUT_PER_STREAM = "85e299b2-90e3-4fe8-b2f5-c067e0bfe57a"
  MF_MT_IN_BAND_PARAMETER_SET = "75da5090-910b-4a03-896c-7b898feea5af"
  MF_MT_MPEG4_TRACK_TYPE = "54f486dd-9327-4f6d-80ab-6f709ebb4cce"
  MF_MT_CONTAINER_RATE_SCALING = "83877f5e-0444-4e28-8479-6db0989b8c09"
  MF_MT_DV_AAUX_SRC_PACK_0 = "84bd5d88-0fb8-4ac8-be4b-a8848bef98f3"
  MF_MT_DV_AAUX_CTRL_PACK_0 = "f731004e-1dd1-4515-aabe-f0c06aa536ac"
  MF_MT_DV_AAUX_SRC_PACK_1 = "720e6544-0225-4003-a651-0196563a958e"
  MF_MT_DV_AAUX_CTRL_PACK_1 = "cd1f470d-1f04-4fe0-bfb9-d07ae0386ad8"
  MF_MT_DV_VAUX_SRC_PACK = "41402d9d-7b57-43c6-b129-2cb997f15009"
  MF_MT_DV_VAUX_CTRL_PACK = "2f84e1c4-0da1-4788-938e-0dfbfbb34b48"
  MF_MT_ARBITRARY_HEADER = "9e6bd6f5-0109-4f95-84ac-9309153a19fc"
  MF_MT_ARBITRARY_FORMAT = "5a75b249-0d7d-49a1-a1c3-e0d87f0cade5"
  MF_MT_IMAGE_LOSS_TOLERANT = "ed062cf4-e34e-4922-be99-934032133d7c"
  MF_MT_MPEG4_SAMPLE_DESCRIPTION = "261e9d83-9529-4b8f-a111-8b9c950a81a9"
  MF_MT_MPEG4_CURRENT_SAMPLE_ENTRY = "9aa7e155-b64a-4c1d-a500-455d600b6560"
  MF_SD_AMBISONICS_SAMPLE3D_DESCRIPTION = "f715cf3e-a964-4c3f-94ae-9d6ba7264641"
  MF_MT_ORIGINAL_4CC = "d7be3fe0-2bc7-492d-b843-61a1919b70c3"
  MF_MT_ORIGINAL_WAVE_FORMAT_TAG = "8cbbc843-9fd9-49c2-882f-a72586c408ad"
  MF_MT_FRAME_RATE_RANGE_MIN = "d2e7558c-dc1f-403f-9a72-d28bb1eb3b5e"
  MF_MT_FRAME_RATE_RANGE_MAX = "e3371d41-b4cf-4a05-bd4e-20b88bb2c4d6"
  MF_LOW_LATENCY = "9c27891a-ed7a-40e1-88e8-b22727a024ee"
  MF_VIDEO_MAX_MB_PER_SEC = "e3f2e203-d445-4b8c-9211-ae390d3ba017"
  MF_DISABLE_FRAME_CORRUPTION_INFO = "7086e16c-49c5-4201-882a-8538f38cf13a"
  MFStreamExtension_CameraExtrinsics = "686196d0-13e2-41d9-9638-ef032c272a52"
  MFSampleExtension_CameraExtrinsics = "6b761658-b7ec-4c3b-8225-8623cabec31d"
  MFStreamExtension_PinholeCameraIntrinsics = "dbac0455-0ec8-4aef-9c32-7a3ee3456f53"
  MFSampleExtension_PinholeCameraIntrinsics = "4ee3b6c5-6a15-4e72-9761-70c1db8b9fe3"
  MFMediaType_Default = "81a412e6-8103-4b06-857f-1862781024ac"
  MFMediaType_Audio = "73647561-0000-0010-8000-00aa00389b71"
  MFMediaType_Video = "73646976-0000-0010-8000-00aa00389b71"
  MFMediaType_Protected = "7b4b6fe6-9d04-4494-be14-7e0bd076c8e4"
  MFMediaType_SAMI = "e69669a0-3dcd-40cb-9e2e-3708387c0616"
  MFMediaType_Script = "72178c22-e45b-11d5-bc2a-00b0d0f3f4ab"
  MFMediaType_Image = "72178c23-e45b-11d5-bc2a-00b0d0f3f4ab"
  MFMediaType_HTML = "72178c24-e45b-11d5-bc2a-00b0d0f3f4ab"
  MFMediaType_Binary = "72178c25-e45b-11d5-bc2a-00b0d0f3f4ab"
  MFMediaType_FileTransfer = "72178c26-e45b-11d5-bc2a-00b0d0f3f4ab"
  MFMediaType_Stream = "e436eb83-524f-11ce-9f53-0020af0ba770"
  MFMediaType_MultiplexedFrames = "6ea542b0-281f-4231-a464-fe2f5022501c"
  MFMediaType_Subtitle = "a6d13581-ed50-4e65-ae08-26065576aacc"
  MFMediaType_Perception = "597ff6f9-6ea2-4670-85b4-ea84073fe940"
  MFImageFormat_JPEG = "19e4a5aa-5662-4fc5-a0c0-1758028e1057"
  MFImageFormat_RGB32 = "00000016-0000-0010-8000-00aa00389b71"
  MFStreamFormat_MPEG2Transport = "e06d8023-db46-11cf-b4d1-00805f6cbbea"
  MFStreamFormat_MPEG2Program = "263067d1-d330-45dc-b669-34d986e4e3e1"
  AM_MEDIA_TYPE_REPRESENTATION = "e2e42ad2-132c-491e-a268-3c7c2dca181f"
  FORMAT_MFVideoFormat = "aed4ab2d-7326-43cb-9464-c879cab9c43d"
  MFMediaType_Metadata = "2c8fa20c-82bb-4782-90a0-98a2a5bd8ef8"
  CLSID_MFSourceResolver = "90eab60f-e43a-4188-bcc4-e47fdf04868c"
  MF_DEVICESTREAM_ATTRIBUTE_FACEAUTH_CAPABILITY = "cb6fd12a-2248-4e41-ad46-e78bb90ab9fc"
  MF_DEVICESTREAM_ATTRIBUTE_SECURE_CAPABILITY = "940fd626-ea6e-4684-9840-36bd6ec9fbef"
  MEDIASINK_FIXED_STREAMS = 1_u32
  MEDIASINK_CANNOT_MATCH_CLOCK = 2_u32
  MEDIASINK_RATELESS = 4_u32
  MEDIASINK_CLOCK_REQUIRED = 8_u32
  MEDIASINK_CAN_PREROLL = 16_u32
  MEDIASINK_REQUIRE_REFERENCE_MEDIATYPE = 32_u32
  MFCLOCK_FREQUENCY_HNS = 10000000_u32
  MFCLOCK_TOLERANCE_UNKNOWN = 50000_u32
  MFCLOCK_JITTER_ISR = 1000_u32
  MFCLOCK_JITTER_DPC = 4000_u32
  MFCLOCK_JITTER_PASSIVE = 10000_u32
  PRESENTATION_CURRENT_POSITION = 9223372036854775807_u64
  MF_PD_ADAPTIVE_STREAMING = "ea0d5d97-29f9-488b-ae6b-7d6b4136112b"
  MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_CROSSPROCESS = 1_u32
  MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_NOPERSIST = 2_u32
  MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_DONT_ALLOW_FORMAT_CHANGES = 4_u32
  MFRR_INFO_VERSION = 0_u32
  MF_USER_MODE_COMPONENT_LOAD = 1_u32
  MF_KERNEL_MODE_COMPONENT_LOAD = 2_u32
  MF_GRL_LOAD_FAILED = 16_u32
  MF_INVALID_GRL_SIGNATURE = 32_u32
  MF_GRL_ABSENT = 4096_u32
  MF_COMPONENT_REVOKED = 8192_u32
  MF_COMPONENT_INVALID_EKU = 16384_u32
  MF_COMPONENT_CERT_REVOKED = 32768_u32
  MF_COMPONENT_INVALID_ROOT = 65536_u32
  MF_COMPONENT_HS_CERT_REVOKED = 131072_u32
  MF_COMPONENT_LS_CERT_REVOKED = 262144_u32
  MF_BOOT_DRIVER_VERIFICATION_FAILED = 1048576_u32
  MF_TEST_SIGNED_COMPONENT_LOADING = 16777216_u32
  MF_MINCRYPT_FAILURE = 268435456_u32
  SHA_HASH_LEN = 20_u32
  MFSEQUENCER_INVALID_ELEMENT_ID = 4294967295_u32
  MF_WRAPPED_BUFFER_SERVICE = "ab544072-c269-4ebc-a552-1c3b32bed5ca"
  CLSID_MPEG2ByteStreamPlugin = "40871c59-ab40-471f-8dc3-1f259d862479"
  MFCONTENTPROTECTIONDEVICE_FUNCTIONID_START = 67108864_u32
  MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA_FUNCTIONID = 67108864_u32
  MF_UNKNOWN_DURATION = 0_u32
  MFStreamExtension_ExtendedCameraIntrinsics = "aa74b3df-9a2c-48d6-8393-5bd1c1a81e6e"
  MFSampleExtension_ExtendedCameraIntrinsics = "560bc4a5-4de0-4113-9cdc-832db9740f3d"
  MF_INVALID_PRESENTATION_TIME = 9223372036854775808_u64
  MF_MEDIATYPE_EQUAL_MAJOR_TYPES = 1_u32
  MF_MEDIATYPE_EQUAL_FORMAT_TYPES = 2_u32
  MF_MEDIATYPE_EQUAL_FORMAT_DATA = 4_u32
  MF_MEDIATYPE_EQUAL_FORMAT_USER_DATA = 8_u32
  MFASYNC_FAST_IO_PROCESSING_CALLBACK = 1_u32
  MFASYNC_SIGNAL_CALLBACK = 2_u32
  MFASYNC_BLOCKING_CALLBACK = 4_u32
  MFASYNC_REPLY_CALLBACK = 8_u32
  MFASYNC_LOCALIZE_REMOTE_CALLBACK = 16_u32
  MFASYNC_CALLBACK_QUEUE_UNDEFINED = 0_u32
  MFASYNC_CALLBACK_QUEUE_STANDARD = 1_u32
  MFASYNC_CALLBACK_QUEUE_RT = 2_u32
  MFASYNC_CALLBACK_QUEUE_IO = 3_u32
  MFASYNC_CALLBACK_QUEUE_TIMER = 4_u32
  MFASYNC_CALLBACK_QUEUE_MULTITHREADED = 5_u32
  MFASYNC_CALLBACK_QUEUE_LONG_FUNCTION = 7_u32
  MFASYNC_CALLBACK_QUEUE_PRIVATE_MASK = 4294901760_u32
  MFASYNC_CALLBACK_QUEUE_ALL = 4294967295_u32
  MFBYTESTREAM_IS_READABLE = 1_u32
  MFBYTESTREAM_IS_WRITABLE = 2_u32
  MFBYTESTREAM_IS_SEEKABLE = 4_u32
  MFBYTESTREAM_IS_REMOTE = 8_u32
  MFBYTESTREAM_IS_DIRECTORY = 128_u32
  MFBYTESTREAM_HAS_SLOW_SEEK = 256_u32
  MFBYTESTREAM_IS_PARTIALLY_DOWNLOADED = 512_u32
  MFBYTESTREAM_SHARE_WRITE = 1024_u32
  MFBYTESTREAM_DOES_NOT_USE_NETWORK = 2048_u32
  MFBYTESTREAM_SEEK_FLAG_CANCEL_PENDING_IO = 1_u32
  MF_MEDIA_SHARING_ENGINE_INITIAL_SEEK_TIME = "6f3497f5-d528-4a4f-8dd7-db36657ec4c9"
  MF_SHUTDOWN_RENDERER_ON_ENGINE_SHUTDOWN = "c112d94d-6b9c-48f8-b6f9-7950ff9ab71e"
  MF_PREFERRED_SOURCE_URI = "5fc85488-436a-4db8-90af-4db402ae5c57"
  MF_SHARING_ENGINE_SHAREDRENDERER = "efa446a0-73e7-404e-8ae2-fef60af5a32b"
  MF_SHARING_ENGINE_CALLBACK = "57dc1e95-d252-43fa-9bbc-180070eefe6d"
  MFT_STREAMS_UNLIMITED = 4294967295_u32
  MFT_OUTPUT_BOUND_UPPER_UNBOUNDED = 9223372036854775807_u64
  OPM_GET_CURRENT_HDCP_SRM_VERSION = "99c5ceff-5f1d-4879-81c1-c52443c9482b"
  OPM_GET_CONNECTED_HDCP_DEVICE_INFORMATION = "0db59d74-a992-492e-a0bd-c23fda564e00"
  OPM_GET_ACP_AND_CGMSA_SIGNALING = "6629a591-3b79-4cf3-924a-11e8e7811671"
  OPM_GET_CONNECTOR_TYPE = "81d0bfd5-6afe-48c2-99c0-95a08f97c5da"
  OPM_GET_SUPPORTED_PROTECTION_TYPES = "38f2a801-9a6c-48bb-9107-b6696e6f1797"
  OPM_GET_VIRTUAL_PROTECTION_LEVEL = "b2075857-3eda-4d5d-88db-748f8c1a0549"
  OPM_GET_ACTUAL_PROTECTION_LEVEL = "1957210a-7766-452a-b99a-d27aed54f03a"
  OPM_GET_ACTUAL_OUTPUT_FORMAT = "d7bf1ba3-ad13-4f8e-af98-0dcb3ca204cc"
  OPM_GET_ADAPTER_BUS_TYPE = "c6f4d673-6174-4184-8e35-f6db5200bcba"
  OPM_GET_OUTPUT_ID = "72cb6df3-244f-40ce-b09e-20506af6302f"
  OPM_GET_DVI_CHARACTERISTICS = "a470b3bb-5dd7-4172-839c-3d3776e0ebf5"
  OPM_GET_CODEC_INFO = "4f374491-8f5f-4445-9dba-95588f6b58b4"
  OPM_GET_OUTPUT_HARDWARE_PROTECTION_SUPPORT = "3b129589-2af8-4ef0-96a2-704a845a218e"
  OPM_SET_PROTECTION_LEVEL = "9bb9327c-4eb5-4727-9f00-b42b0919c0da"
  OPM_SET_ACP_AND_CGMSA_SIGNALING = "09a631a5-d684-4c60-8e4d-d3bb0f0be3ee"
  OPM_SET_HDCP_SRM = "8b5ef5d1-c30d-44ff-84a5-ea71dce78f13"
  OPM_SET_PROTECTION_LEVEL_ACCORDING_TO_CSS_DVD = "39ce333e-4cc0-44ae-bfcc-da50b5f82e72"
  WM_CODEC_ONEPASS_CBR = 1_u32
  WM_CODEC_ONEPASS_VBR = 2_u32
  WM_CODEC_TWOPASS_CBR = 4_u32
  WM_CODEC_TWOPASS_VBR_UNCONSTRAINED = 8_u32
  WM_CODEC_TWOPASS_VBR_PEAKCONSTRAINED = 16_u32
  SYSFXUI_DONOTSHOW_LOUDNESSEQUALIZATION = 1_u32
  SYSFXUI_DONOTSHOW_ROOMCORRECTION = 2_u32
  SYSFXUI_DONOTSHOW_BASSMANAGEMENT = 4_u32
  SYSFXUI_DONOTSHOW_BASSBOOST = 8_u32
  SYSFXUI_DONOTSHOW_HEADPHONEVIRTUALIZATION = 16_u32
  SYSFXUI_DONOTSHOW_VIRTUALSURROUND = 32_u32
  SYSFXUI_DONOTSHOW_SPEAKERFILLING = 64_u32
  SYSFXUI_DONOTSHOW_CHANNELPHANTOMING = 128_u32
  AEC_MAX_SYSTEM_MODES = 6_u32
  WMAAECMA_E_NO_ACTIVE_RENDER_STREAM = 2278293514_u32
  MEDIASUBTYPE_Y41T = "54313459-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_Y42T = "54323459-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_NV11 = "3131564e-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_V216 = "36313256-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_V410 = "30313456-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_v210 = "30313276-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_I420 = "30323449-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WVC1 = "31435657-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_wvc1 = "31637677-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WMVA = "41564d57-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_wmva = "61766d77-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WMVB = "42564d57-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_wmvb = "62766d77-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WMVR = "52564d57-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_wmvr = "72766d77-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WMVP = "50564d57-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_wmvp = "70766d77-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WVP2 = "32505657-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_wvp2 = "32707677-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WMV3 = "33564d57-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_wmv3 = "33766d77-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WMV2 = "32564d57-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_wmv2 = "32766d77-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WMV1 = "31564d57-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_wmv1 = "31766d77-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_MPG4 = "3447504d-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_mpg4 = "3467706d-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_MP42 = "3234504d-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_mp42 = "3234706d-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_MP43 = "3334504d-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_mp43 = "3334706d-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_MP4S = "5334504d-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_mp4s = "7334706d-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_M4S2 = "3253344d-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_m4s2 = "3273346d-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_MSS1 = "3153534d-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_MSS2 = "3253534d-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_MSAUDIO1 = "00000160-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WMAUDIO2 = "00000161-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WMAUDIO3 = "00000162-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WMAUDIO_LOSSLESS = "00000163-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WMASPDIF = "00000164-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WMAUDIO4 = "00000168-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_MPEG_ADTS_AAC = "00001600-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_MPEG_RAW_AAC = "00001601-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_MPEG_LOAS = "00001602-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_NOKIA_MPEG_ADTS_AAC = "00001608-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_NOKIA_MPEG_RAW_AAC = "00001609-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_VODAFONE_MPEG_ADTS_AAC = "0000160a-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_VODAFONE_MPEG_RAW_AAC = "0000160b-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_MPEG_HEAAC = "00001610-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_RAW_AAC1 = "000000ff-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_DVM = "00002000-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_DTS2 = "00002001-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_DOLBY_DDPLUS = "a7fb87af-2d02-42fb-a4d4-05cd93843bdd"
  MEDIASUBTYPE_DOLBY_TRUEHD = "eb27cec4-163e-4ca3-8b74-8e25f91b517e"
  MEDIASUBTYPE_DTS_HD = "a2e58eb7-0fa9-48bb-a40c-fa0e156d0645"
  MEDIASUBTYPE_DTS_HD_HRA = "a61ac364-ad0e-4744-89ff-213ce0df8804"
  MEDIASUBTYPE_h264 = "34363268-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_AVC1 = "31435641-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_X264 = "34363258-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_x264 = "34363278-0000-0010-8000-00aa00389b71"
  MF_VIDEODSP_MODE = "16d720f0-768c-11de-8a39-0800200c9a66"
  MFSampleExtension_VideoDSPMode = "c12d55cb-d7d9-476d-81f3-69117f163ea0"
  CLSID_CTocEntry = "f22f5e05-585c-4def-8523-6555cfbc0cb3"
  CLSID_CTocEntryList = "3a8cccbc-0efd-43a3-b838-f38a552ba237"
  CLSID_CToc = "4fe24495-28ce-4920-a4c4-e556e1f0df2a"
  CLSID_CTocCollection = "5058292d-a244-4840-ab44-480975c4ffe4"
  CLSID_CTocParser = "499eaeea-2737-4849-8bb6-47f107eaf358"
  CLSID_CAsfTocParser = "9b77c0f2-8735-46c5-b90f-5f0b303ef6ab"
  CLSID_CAviTocParser = "3adce5cc-13c8-4573-b328-ed438eb694f9"
  CLSID_CFileIo = "11993195-1244-4840-ab44-480975c4ffe4"
  CLSID_CFileClient = "bfccd195-1244-4840-ab44-480975c4ffe4"
  CLSID_CClusterDetectorEx = "47354492-827e-4b8a-b318-c80eba1381f0"
  E_TOCPARSER_INVALIDASFFILE = -1728053247_i32
  E_TOCPARSER_INVALIDRIFFFILE = -1728053246_i32
  TOC_MAX_DESCRIPTION_SIZE = 65535_u32
  TOC_ENTRY_MAX_TITLE_SIZE = 65535_u32
  MFASFINDEXER_PER_ENTRY_BYTES_DYNAMIC = 65535_u32
  MFASFINDEXER_NO_FIXED_INTERVAL = 4294967295_u32
  MFASFINDEXER_READ_FOR_REVERSEPLAYBACK_OUTOFDATASEGMENT = 18446744073709551615_u64
  MFASFINDEXER_APPROX_SEEK_TIME_UNKNOWN = 18446744073709551615_u64
  MFASF_MAX_STREAM_NUMBER = 127_u32
  MFASF_INVALID_STREAM_NUMBER = 128_u32
  MFASF_PAYLOADEXTENSION_MAX_SIZE = 255_u32
  MFASF_PAYLOADEXTENSION_VARIABLE_SIZE = 65535_u32
  MFASF_DEFAULT_BUFFER_WINDOW_MS = 3000_u32
  FACILITY_MF = 13_u32
  FACILITY_MF_WIN32 = 7_u32
  MF_E_PLATFORM_NOT_INITIALIZED = -1072875856_i32
  MF_E_BUFFERTOOSMALL = -1072875855_i32
  MF_E_INVALIDREQUEST = -1072875854_i32
  MF_E_INVALIDSTREAMNUMBER = -1072875853_i32
  MF_E_INVALIDMEDIATYPE = -1072875852_i32
  MF_E_NOTACCEPTING = -1072875851_i32
  MF_E_NOT_INITIALIZED = -1072875850_i32
  MF_E_UNSUPPORTED_REPRESENTATION = -1072875849_i32
  MF_E_NO_MORE_TYPES = -1072875847_i32
  MF_E_UNSUPPORTED_SERVICE = -1072875846_i32
  MF_E_UNEXPECTED = -1072875845_i32
  MF_E_INVALIDNAME = -1072875844_i32
  MF_E_INVALIDTYPE = -1072875843_i32
  MF_E_INVALID_FILE_FORMAT = -1072875842_i32
  MF_E_INVALIDINDEX = -1072875841_i32
  MF_E_INVALID_TIMESTAMP = -1072875840_i32
  MF_E_UNSUPPORTED_SCHEME = -1072875837_i32
  MF_E_UNSUPPORTED_BYTESTREAM_TYPE = -1072875836_i32
  MF_E_UNSUPPORTED_TIME_FORMAT = -1072875835_i32
  MF_E_NO_SAMPLE_TIMESTAMP = -1072875832_i32
  MF_E_NO_SAMPLE_DURATION = -1072875831_i32
  MF_E_INVALID_STREAM_DATA = -1072875829_i32
  MF_E_RT_UNAVAILABLE = -1072875825_i32
  MF_E_UNSUPPORTED_RATE = -1072875824_i32
  MF_E_THINNING_UNSUPPORTED = -1072875823_i32
  MF_E_REVERSE_UNSUPPORTED = -1072875822_i32
  MF_E_UNSUPPORTED_RATE_TRANSITION = -1072875821_i32
  MF_E_RATE_CHANGE_PREEMPTED = -1072875820_i32
  MF_E_NOT_FOUND = -1072875819_i32
  MF_E_NOT_AVAILABLE = -1072875818_i32
  MF_E_NO_CLOCK = -1072875817_i32
  MF_S_MULTIPLE_BEGIN = 866008_i32
  MF_E_MULTIPLE_BEGIN = -1072875815_i32
  MF_E_MULTIPLE_SUBSCRIBERS = -1072875814_i32
  MF_E_TIMER_ORPHANED = -1072875813_i32
  MF_E_STATE_TRANSITION_PENDING = -1072875812_i32
  MF_E_UNSUPPORTED_STATE_TRANSITION = -1072875811_i32
  MF_E_UNRECOVERABLE_ERROR_OCCURRED = -1072875810_i32
  MF_E_SAMPLE_HAS_TOO_MANY_BUFFERS = -1072875809_i32
  MF_E_SAMPLE_NOT_WRITABLE = -1072875808_i32
  MF_E_INVALID_KEY = -1072875806_i32
  MF_E_BAD_STARTUP_VERSION = -1072875805_i32
  MF_E_UNSUPPORTED_CAPTION = -1072875804_i32
  MF_E_INVALID_POSITION = -1072875803_i32
  MF_E_ATTRIBUTENOTFOUND = -1072875802_i32
  MF_E_PROPERTY_TYPE_NOT_ALLOWED = -1072875801_i32
  MF_E_PROPERTY_TYPE_NOT_SUPPORTED = -1072875800_i32
  MF_E_PROPERTY_EMPTY = -1072875799_i32
  MF_E_PROPERTY_NOT_EMPTY = -1072875798_i32
  MF_E_PROPERTY_VECTOR_NOT_ALLOWED = -1072875797_i32
  MF_E_PROPERTY_VECTOR_REQUIRED = -1072875796_i32
  MF_E_OPERATION_CANCELLED = -1072875795_i32
  MF_E_BYTESTREAM_NOT_SEEKABLE = -1072875794_i32
  MF_E_DISABLED_IN_SAFEMODE = -1072875793_i32
  MF_E_CANNOT_PARSE_BYTESTREAM = -1072875792_i32
  MF_E_SOURCERESOLVER_MUTUALLY_EXCLUSIVE_FLAGS = -1072875791_i32
  MF_E_MEDIAPROC_WRONGSTATE = -1072875790_i32
  MF_E_RT_THROUGHPUT_NOT_AVAILABLE = -1072875789_i32
  MF_E_RT_TOO_MANY_CLASSES = -1072875788_i32
  MF_E_RT_WOULDBLOCK = -1072875787_i32
  MF_E_NO_BITPUMP = -1072875786_i32
  MF_E_RT_OUTOFMEMORY = -1072875785_i32
  MF_E_RT_WORKQUEUE_CLASS_NOT_SPECIFIED = -1072875784_i32
  MF_E_INSUFFICIENT_BUFFER = -1072860816_i32
  MF_E_CANNOT_CREATE_SINK = -1072875782_i32
  MF_E_BYTESTREAM_UNKNOWN_LENGTH = -1072875781_i32
  MF_E_SESSION_PAUSEWHILESTOPPED = -1072875780_i32
  MF_S_ACTIVATE_REPLACED = 866045_i32
  MF_E_FORMAT_CHANGE_NOT_SUPPORTED = -1072875778_i32
  MF_E_INVALID_WORKQUEUE = -1072875777_i32
  MF_E_DRM_UNSUPPORTED = -1072875776_i32
  MF_E_UNAUTHORIZED = -1072875775_i32
  MF_E_OUT_OF_RANGE = -1072875774_i32
  MF_E_INVALID_CODEC_MERIT = -1072875773_i32
  MF_E_HW_MFT_FAILED_START_STREAMING = -1072875772_i32
  MF_E_OPERATION_IN_PROGRESS = -1072875771_i32
  MF_E_HARDWARE_DRM_UNSUPPORTED = -1072875770_i32
  MF_E_DURATION_TOO_LONG = -1072875769_i32
  MF_E_OPERATION_UNSUPPORTED_AT_D3D_FEATURE_LEVEL = -1072875768_i32
  MF_E_UNSUPPORTED_MEDIATYPE_AT_D3D_FEATURE_LEVEL = -1072875767_i32
  MF_S_ASF_PARSEINPROGRESS = 1074608792_i32
  MF_E_ASF_PARSINGINCOMPLETE = -1072874856_i32
  MF_E_ASF_MISSINGDATA = -1072874855_i32
  MF_E_ASF_INVALIDDATA = -1072874854_i32
  MF_E_ASF_OPAQUEPACKET = -1072874853_i32
  MF_E_ASF_NOINDEX = -1072874852_i32
  MF_E_ASF_OUTOFRANGE = -1072874851_i32
  MF_E_ASF_INDEXNOTLOADED = -1072874850_i32
  MF_E_ASF_TOO_MANY_PAYLOADS = -1072874849_i32
  MF_E_ASF_UNSUPPORTED_STREAM_TYPE = -1072874848_i32
  MF_E_ASF_DROPPED_PACKET = -1072874847_i32
  MF_E_NO_EVENTS_AVAILABLE = -1072873856_i32
  MF_E_INVALID_STATE_TRANSITION = -1072873854_i32
  MF_E_END_OF_STREAM = -1072873852_i32
  MF_E_SHUTDOWN = -1072873851_i32
  MF_E_MP3_NOTFOUND = -1072873850_i32
  MF_E_MP3_OUTOFDATA = -1072873849_i32
  MF_E_MP3_NOTMP3 = -1072873848_i32
  MF_E_MP3_NOTSUPPORTED = -1072873847_i32
  MF_E_NO_DURATION = -1072873846_i32
  MF_E_INVALID_FORMAT = -1072873844_i32
  MF_E_PROPERTY_NOT_FOUND = -1072873843_i32
  MF_E_PROPERTY_READ_ONLY = -1072873842_i32
  MF_E_PROPERTY_NOT_ALLOWED = -1072873841_i32
  MF_E_MEDIA_SOURCE_NOT_STARTED = -1072873839_i32
  MF_E_UNSUPPORTED_FORMAT = -1072873832_i32
  MF_E_MP3_BAD_CRC = -1072873831_i32
  MF_E_NOT_PROTECTED = -1072873830_i32
  MF_E_MEDIA_SOURCE_WRONGSTATE = -1072873829_i32
  MF_E_MEDIA_SOURCE_NO_STREAMS_SELECTED = -1072873828_i32
  MF_E_CANNOT_FIND_KEYFRAME_SAMPLE = -1072873827_i32
  MF_E_UNSUPPORTED_CHARACTERISTICS = -1072873826_i32
  MF_E_NO_AUDIO_RECORDING_DEVICE = -1072873825_i32
  MF_E_AUDIO_RECORDING_DEVICE_IN_USE = -1072873824_i32
  MF_E_AUDIO_RECORDING_DEVICE_INVALIDATED = -1072873823_i32
  MF_E_VIDEO_RECORDING_DEVICE_INVALIDATED = -1072873822_i32
  MF_E_VIDEO_RECORDING_DEVICE_PREEMPTED = -1072873821_i32
  MF_E_NETWORK_RESOURCE_FAILURE = -1072872856_i32
  MF_E_NET_WRITE = -1072872855_i32
  MF_E_NET_READ = -1072872854_i32
  MF_E_NET_REQUIRE_NETWORK = -1072872853_i32
  MF_E_NET_REQUIRE_ASYNC = -1072872852_i32
  MF_E_NET_BWLEVEL_NOT_SUPPORTED = -1072872851_i32
  MF_E_NET_STREAMGROUPS_NOT_SUPPORTED = -1072872850_i32
  MF_E_NET_MANUALSS_NOT_SUPPORTED = -1072872849_i32
  MF_E_NET_INVALID_PRESENTATION_DESCRIPTOR = -1072872848_i32
  MF_E_NET_CACHESTREAM_NOT_FOUND = -1072872847_i32
  MF_I_MANUAL_PROXY = 1074610802_i32
  MF_E_NET_REQUIRE_INPUT = -1072872844_i32
  MF_E_NET_REDIRECT = -1072872843_i32
  MF_E_NET_REDIRECT_TO_PROXY = -1072872842_i32
  MF_E_NET_TOO_MANY_REDIRECTS = -1072872841_i32
  MF_E_NET_TIMEOUT = -1072872840_i32
  MF_E_NET_CLIENT_CLOSE = -1072872839_i32
  MF_E_NET_BAD_CONTROL_DATA = -1072872838_i32
  MF_E_NET_INCOMPATIBLE_SERVER = -1072872837_i32
  MF_E_NET_UNSAFE_URL = -1072872836_i32
  MF_E_NET_CACHE_NO_DATA = -1072872835_i32
  MF_E_NET_EOL = -1072872834_i32
  MF_E_NET_BAD_REQUEST = -1072872833_i32
  MF_E_NET_INTERNAL_SERVER_ERROR = -1072872832_i32
  MF_E_NET_SESSION_NOT_FOUND = -1072872831_i32
  MF_E_NET_NOCONNECTION = -1072872830_i32
  MF_E_NET_CONNECTION_FAILURE = -1072872829_i32
  MF_E_NET_INCOMPATIBLE_PUSHSERVER = -1072872828_i32
  MF_E_NET_SERVER_ACCESSDENIED = -1072872827_i32
  MF_E_NET_PROXY_ACCESSDENIED = -1072872826_i32
  MF_E_NET_CANNOTCONNECT = -1072872825_i32
  MF_E_NET_INVALID_PUSH_TEMPLATE = -1072872824_i32
  MF_E_NET_INVALID_PUSH_PUBLISHING_POINT = -1072872823_i32
  MF_E_NET_BUSY = -1072872822_i32
  MF_E_NET_RESOURCE_GONE = -1072872821_i32
  MF_E_NET_ERROR_FROM_PROXY = -1072872820_i32
  MF_E_NET_PROXY_TIMEOUT = -1072872819_i32
  MF_E_NET_SERVER_UNAVAILABLE = -1072872818_i32
  MF_E_NET_TOO_MUCH_DATA = -1072872817_i32
  MF_E_NET_SESSION_INVALID = -1072872816_i32
  MF_E_OFFLINE_MODE = -1072872815_i32
  MF_E_NET_UDP_BLOCKED = -1072872814_i32
  MF_E_NET_UNSUPPORTED_CONFIGURATION = -1072872813_i32
  MF_E_NET_PROTOCOL_DISABLED = -1072872812_i32
  MF_E_NET_COMPANION_DRIVER_DISCONNECT = -1072872811_i32
  MF_E_ALREADY_INITIALIZED = -1072871856_i32
  MF_E_BANDWIDTH_OVERRUN = -1072871855_i32
  MF_E_LATE_SAMPLE = -1072871854_i32
  MF_E_FLUSH_NEEDED = -1072871853_i32
  MF_E_INVALID_PROFILE = -1072871852_i32
  MF_E_INDEX_NOT_COMMITTED = -1072871851_i32
  MF_E_NO_INDEX = -1072871850_i32
  MF_E_CANNOT_INDEX_IN_PLACE = -1072871849_i32
  MF_E_MISSING_ASF_LEAKYBUCKET = -1072871848_i32
  MF_E_INVALID_ASF_STREAMID = -1072871847_i32
  MF_E_STREAMSINK_REMOVED = -1072870856_i32
  MF_E_STREAMSINKS_OUT_OF_SYNC = -1072870854_i32
  MF_E_STREAMSINKS_FIXED = -1072870853_i32
  MF_E_STREAMSINK_EXISTS = -1072870852_i32
  MF_E_SAMPLEALLOCATOR_CANCELED = -1072870851_i32
  MF_E_SAMPLEALLOCATOR_EMPTY = -1072870850_i32
  MF_E_SINK_ALREADYSTOPPED = -1072870849_i32
  MF_E_ASF_FILESINK_BITRATE_UNKNOWN = -1072870848_i32
  MF_E_SINK_NO_STREAMS = -1072870847_i32
  MF_S_SINK_NOT_FINALIZED = 870978_i32
  MF_E_METADATA_TOO_LONG = -1072870845_i32
  MF_E_SINK_NO_SAMPLES_PROCESSED = -1072870844_i32
  MF_E_SINK_HEADERS_NOT_FOUND = -1072870843_i32
  MF_E_VIDEO_REN_NO_PROCAMP_HW = -1072869856_i32
  MF_E_VIDEO_REN_NO_DEINTERLACE_HW = -1072869855_i32
  MF_E_VIDEO_REN_COPYPROT_FAILED = -1072869854_i32
  MF_E_VIDEO_REN_SURFACE_NOT_SHARED = -1072869853_i32
  MF_E_VIDEO_DEVICE_LOCKED = -1072869852_i32
  MF_E_NEW_VIDEO_DEVICE = -1072869851_i32
  MF_E_NO_VIDEO_SAMPLE_AVAILABLE = -1072869850_i32
  MF_E_NO_AUDIO_PLAYBACK_DEVICE = -1072869756_i32
  MF_E_AUDIO_PLAYBACK_DEVICE_IN_USE = -1072869755_i32
  MF_E_AUDIO_PLAYBACK_DEVICE_INVALIDATED = -1072869754_i32
  MF_E_AUDIO_SERVICE_NOT_RUNNING = -1072869753_i32
  MF_E_AUDIO_BUFFER_SIZE_ERROR = -1072869752_i32
  MF_E_AUDIO_CLIENT_WRAPPER_SPOOF_ERROR = -1072869751_i32
  MF_E_TOPO_INVALID_OPTIONAL_NODE = -1072868850_i32
  MF_E_TOPO_CANNOT_FIND_DECRYPTOR = -1072868847_i32
  MF_E_TOPO_CODEC_NOT_FOUND = -1072868846_i32
  MF_E_TOPO_CANNOT_CONNECT = -1072868845_i32
  MF_E_TOPO_UNSUPPORTED = -1072868844_i32
  MF_E_TOPO_INVALID_TIME_ATTRIBUTES = -1072868843_i32
  MF_E_TOPO_LOOPS_IN_TOPOLOGY = -1072868842_i32
  MF_E_TOPO_MISSING_PRESENTATION_DESCRIPTOR = -1072868841_i32
  MF_E_TOPO_MISSING_STREAM_DESCRIPTOR = -1072868840_i32
  MF_E_TOPO_STREAM_DESCRIPTOR_NOT_SELECTED = -1072868839_i32
  MF_E_TOPO_MISSING_SOURCE = -1072868838_i32
  MF_E_TOPO_SINK_ACTIVATES_UNSUPPORTED = -1072868837_i32
  MF_E_SEQUENCER_UNKNOWN_SEGMENT_ID = -1072864852_i32
  MF_S_SEQUENCER_CONTEXT_CANCELED = 876973_i32
  MF_E_NO_SOURCE_IN_CACHE = -1072864850_i32
  MF_S_SEQUENCER_SEGMENT_AT_END_OF_STREAM = 876975_i32
  MF_E_TRANSFORM_TYPE_NOT_SET = -1072861856_i32
  MF_E_TRANSFORM_STREAM_CHANGE = -1072861855_i32
  MF_E_TRANSFORM_INPUT_REMAINING = -1072861854_i32
  MF_E_TRANSFORM_PROFILE_MISSING = -1072861853_i32
  MF_E_TRANSFORM_PROFILE_INVALID_OR_CORRUPT = -1072861852_i32
  MF_E_TRANSFORM_PROFILE_TRUNCATED = -1072861851_i32
  MF_E_TRANSFORM_PROPERTY_PID_NOT_RECOGNIZED = -1072861850_i32
  MF_E_TRANSFORM_PROPERTY_VARIANT_TYPE_WRONG = -1072861849_i32
  MF_E_TRANSFORM_PROPERTY_NOT_WRITEABLE = -1072861848_i32
  MF_E_TRANSFORM_PROPERTY_ARRAY_VALUE_WRONG_NUM_DIM = -1072861847_i32
  MF_E_TRANSFORM_PROPERTY_VALUE_SIZE_WRONG = -1072861846_i32
  MF_E_TRANSFORM_PROPERTY_VALUE_OUT_OF_RANGE = -1072861845_i32
  MF_E_TRANSFORM_PROPERTY_VALUE_INCOMPATIBLE = -1072861844_i32
  MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_OUTPUT_MEDIATYPE = -1072861843_i32
  MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_INPUT_MEDIATYPE = -1072861842_i32
  MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_MEDIATYPE_COMBINATION = -1072861841_i32
  MF_E_TRANSFORM_CONFLICTS_WITH_OTHER_CURRENTLY_ENABLED_FEATURES = -1072861840_i32
  MF_E_TRANSFORM_NEED_MORE_INPUT = -1072861838_i32
  MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_SPKR_CONFIG = -1072861837_i32
  MF_E_TRANSFORM_CANNOT_CHANGE_MEDIATYPE_WHILE_PROCESSING = -1072861836_i32
  MF_S_TRANSFORM_DO_NOT_PROPAGATE_EVENT = 879989_i32
  MF_E_UNSUPPORTED_D3D_TYPE = -1072861834_i32
  MF_E_TRANSFORM_ASYNC_LOCKED = -1072861833_i32
  MF_E_TRANSFORM_CANNOT_INITIALIZE_ACM_DRIVER = -1072861832_i32
  MF_E_TRANSFORM_STREAM_INVALID_RESOLUTION = -1072861831_i32
  MF_E_TRANSFORM_ASYNC_MFT_NOT_SUPPORTED = -1072861830_i32
  MF_E_TRANSFORM_EXATTRIBUTE_NOT_SUPPORTED = -1072861828_i32
  MF_E_LICENSE_INCORRECT_RIGHTS = -1072860856_i32
  MF_E_LICENSE_OUTOFDATE = -1072860855_i32
  MF_E_LICENSE_REQUIRED = -1072860854_i32
  MF_E_DRM_HARDWARE_INCONSISTENT = -1072860853_i32
  MF_E_NO_CONTENT_PROTECTION_MANAGER = -1072860852_i32
  MF_E_LICENSE_RESTORE_NO_RIGHTS = -1072860851_i32
  MF_E_BACKUP_RESTRICTED_LICENSE = -1072860850_i32
  MF_E_LICENSE_RESTORE_NEEDS_INDIVIDUALIZATION = -1072860849_i32
  MF_S_PROTECTION_NOT_REQUIRED = 880976_i32
  MF_E_COMPONENT_REVOKED = -1072860847_i32
  MF_E_TRUST_DISABLED = -1072860846_i32
  MF_E_WMDRMOTA_NO_ACTION = -1072860845_i32
  MF_E_WMDRMOTA_ACTION_ALREADY_SET = -1072860844_i32
  MF_E_WMDRMOTA_DRM_HEADER_NOT_AVAILABLE = -1072860843_i32
  MF_E_WMDRMOTA_DRM_ENCRYPTION_SCHEME_NOT_SUPPORTED = -1072860842_i32
  MF_E_WMDRMOTA_ACTION_MISMATCH = -1072860841_i32
  MF_E_WMDRMOTA_INVALID_POLICY = -1072860840_i32
  MF_E_POLICY_UNSUPPORTED = -1072860839_i32
  MF_E_OPL_NOT_SUPPORTED = -1072860838_i32
  MF_E_TOPOLOGY_VERIFICATION_FAILED = -1072860837_i32
  MF_E_SIGNATURE_VERIFICATION_FAILED = -1072860836_i32
  MF_E_DEBUGGING_NOT_ALLOWED = -1072860835_i32
  MF_E_CODE_EXPIRED = -1072860834_i32
  MF_E_GRL_VERSION_TOO_LOW = -1072860833_i32
  MF_E_GRL_RENEWAL_NOT_FOUND = -1072860832_i32
  MF_E_GRL_EXTENSIBLE_ENTRY_NOT_FOUND = -1072860831_i32
  MF_E_KERNEL_UNTRUSTED = -1072860830_i32
  MF_E_PEAUTH_UNTRUSTED = -1072860829_i32
  MF_E_NON_PE_PROCESS = -1072860827_i32
  MF_E_REBOOT_REQUIRED = -1072860825_i32
  MF_S_WAIT_FOR_POLICY_SET = 881000_i32
  MF_S_VIDEO_DISABLED_WITH_UNKNOWN_SOFTWARE_OUTPUT = 881001_i32
  MF_E_GRL_INVALID_FORMAT = -1072860822_i32
  MF_E_GRL_UNRECOGNIZED_FORMAT = -1072860821_i32
  MF_E_ALL_PROCESS_RESTART_REQUIRED = -1072860820_i32
  MF_E_PROCESS_RESTART_REQUIRED = -1072860819_i32
  MF_E_USERMODE_UNTRUSTED = -1072860818_i32
  MF_E_PEAUTH_SESSION_NOT_STARTED = -1072860817_i32
  MF_E_PEAUTH_PUBLICKEY_REVOKED = -1072860815_i32
  MF_E_GRL_ABSENT = -1072860814_i32
  MF_S_PE_TRUSTED = 881011_i32
  MF_E_PE_UNTRUSTED = -1072860812_i32
  MF_E_PEAUTH_NOT_STARTED = -1072860811_i32
  MF_E_INCOMPATIBLE_SAMPLE_PROTECTION = -1072860810_i32
  MF_E_PE_SESSIONS_MAXED = -1072860809_i32
  MF_E_HIGH_SECURITY_LEVEL_CONTENT_NOT_ALLOWED = -1072860808_i32
  MF_E_TEST_SIGNED_COMPONENTS_NOT_ALLOWED = -1072860807_i32
  MF_E_ITA_UNSUPPORTED_ACTION = -1072860806_i32
  MF_E_ITA_ERROR_PARSING_SAP_PARAMETERS = -1072860805_i32
  MF_E_POLICY_MGR_ACTION_OUTOFBOUNDS = -1072860804_i32
  MF_E_BAD_OPL_STRUCTURE_FORMAT = -1072860803_i32
  MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_PROTECTION_GUID = -1072860802_i32
  MF_E_NO_PMP_HOST = -1072860801_i32
  MF_E_ITA_OPL_DATA_NOT_INITIALIZED = -1072860800_i32
  MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_OUTPUT = -1072860799_i32
  MF_E_ITA_UNRECOGNIZED_DIGITAL_VIDEO_OUTPUT = -1072860798_i32
  MF_E_RESOLUTION_REQUIRES_PMP_CREATION_CALLBACK = -1072860797_i32
  MF_E_INVALID_AKE_CHANNEL_PARAMETERS = -1072860796_i32
  MF_E_CONTENT_PROTECTION_SYSTEM_NOT_ENABLED = -1072860795_i32
  MF_E_UNSUPPORTED_CONTENT_PROTECTION_SYSTEM = -1072860794_i32
  MF_E_DRM_MIGRATION_NOT_SUPPORTED = -1072860793_i32
  MF_E_HDCP_AUTHENTICATION_FAILURE = -1072860792_i32
  MF_E_HDCP_LINK_FAILURE = -1072860791_i32
  MF_E_CLOCK_INVALID_CONTINUITY_KEY = -1072849856_i32
  MF_E_CLOCK_NO_TIME_SOURCE = -1072849855_i32
  MF_E_CLOCK_STATE_ALREADY_SET = -1072849854_i32
  MF_E_CLOCK_NOT_SIMPLE = -1072849853_i32
  MF_S_CLOCK_STOPPED = 891972_i32
  MF_E_CLOCK_AUDIO_DEVICE_POSITION_UNEXPECTED = 891973_i32
  MF_E_CLOCK_AUDIO_RENDER_POSITION_UNEXPECTED = 891974_i32
  MF_E_CLOCK_AUDIO_RENDER_TIME_UNEXPECTED = 891975_i32
  MF_E_NO_MORE_DROP_MODES = -1072848856_i32
  MF_E_NO_MORE_QUALITY_LEVELS = -1072848855_i32
  MF_E_DROPTIME_NOT_SUPPORTED = -1072848854_i32
  MF_E_QUALITYKNOB_WAIT_LONGER = -1072848853_i32
  MF_E_QM_INVALIDSTATE = -1072848852_i32
  MF_E_TRANSCODE_NO_CONTAINERTYPE = -1072847856_i32
  MF_E_TRANSCODE_PROFILE_NO_MATCHING_STREAMS = -1072847855_i32
  MF_E_TRANSCODE_NO_MATCHING_ENCODER = -1072847854_i32
  MF_E_TRANSCODE_INVALID_PROFILE = -1072847853_i32
  MF_E_ALLOCATOR_NOT_INITIALIZED = -1072846856_i32
  MF_E_ALLOCATOR_NOT_COMMITED = -1072846855_i32
  MF_E_ALLOCATOR_ALREADY_COMMITED = -1072846854_i32
  MF_E_STREAM_ERROR = -1072846853_i32
  MF_E_INVALID_STREAM_STATE = -1072846852_i32
  MF_E_HW_STREAM_NOT_CONNECTED = -1072846851_i32
  MF_E_NO_CAPTURE_DEVICES_AVAILABLE = -1072845856_i32
  MF_E_CAPTURE_SINK_OUTPUT_NOT_SET = -1072845855_i32
  MF_E_CAPTURE_SINK_MIRROR_ERROR = -1072845854_i32
  MF_E_CAPTURE_SINK_ROTATE_ERROR = -1072845853_i32
  MF_E_CAPTURE_ENGINE_INVALID_OP = -1072845852_i32
  MF_E_CAPTURE_ENGINE_ALL_EFFECTS_REMOVED = -1072845851_i32
  MF_E_CAPTURE_SOURCE_NO_INDEPENDENT_PHOTO_STREAM_PRESENT = -1072845850_i32
  MF_E_CAPTURE_SOURCE_NO_VIDEO_STREAM_PRESENT = -1072845849_i32
  MF_E_CAPTURE_SOURCE_NO_AUDIO_STREAM_PRESENT = -1072845848_i32
  MF_E_CAPTURE_SOURCE_DEVICE_EXTENDEDPROP_OP_IN_PROGRESS = -1072845847_i32
  MF_E_CAPTURE_PROPERTY_SET_DURING_PHOTO = -1072845846_i32
  MF_E_CAPTURE_NO_SAMPLES_IN_QUEUE = -1072845845_i32
  MF_E_HW_ACCELERATED_THUMBNAIL_NOT_SUPPORTED = -1072845844_i32
  MF_E_UNSUPPORTED_CAPTURE_DEVICE_PRESENT = -1072845843_i32
  MF_E_TIMELINECONTROLLER_UNSUPPORTED_SOURCE_TYPE = -1072844856_i32
  MF_E_TIMELINECONTROLLER_NOT_ALLOWED = -1072844855_i32
  MF_E_TIMELINECONTROLLER_CANNOT_ATTACH = -1072844854_i32
  MF_E_MEDIA_EXTENSION_APPSERVICE_CONNECTION_FAILED = -1072843856_i32
  MF_E_MEDIA_EXTENSION_APPSERVICE_REQUEST_FAILED = -1072843855_i32
  MF_E_MEDIA_EXTENSION_PACKAGE_INTEGRITY_CHECK_FAILED = -1072843854_i32
  MF_E_MEDIA_EXTENSION_PACKAGE_LICENSE_INVALID = -1072843853_i32
  MF_INDEX_SIZE_ERR = 2154823681_u32
  MF_NOT_FOUND_ERR = 2154823688_u32
  MF_NOT_SUPPORTED_ERR = 2154823689_u32
  MF_INVALID_STATE_ERR = 2154823691_u32
  MF_SYNTAX_ERR = 2154823692_u32
  MF_INVALID_ACCESS_ERR = 2154823695_u32
  MF_QUOTA_EXCEEDED_ERR = 2154823702_u32
  MF_PARSE_ERR = 2154823761_u32
  MF_TYPE_ERR = 2154840069_u32
  DEVPKEY_DeviceInterface_IsVirtualCamera = PROPERTYKEY.new(LibC::GUID.new(0x6edc630d_u32, 0xc2e3_u16, 0x43b7_u16, StaticArray[0xb2_u8, 0xd1_u8, 0x20_u8, 0x52_u8, 0x5a_u8, 0x1a_u8, 0xf1_u8, 0x20_u8]), 3_u32)
  G_wszspeechformatcaps = "SpeechFormatCap"
  G_wszwmcpcodecname = "_CODECNAME"
  G_wszwmcpsupportedvbrmodes = "_SUPPORTEDVBRMODES"
  G_wszwmcpaudiovbrsupported = "_VBRENABLED"
  G_wszwmcpaudiovbrquality = "_VBRQUALITY"
  G_wszwmcpmaxpasses = "_PASSESRECOMMENDED"
  G_wszwmcpdefaultcrisp = "_DEFAULTCRISP"
  COPP_ProtectionType_Unknown = -2147483648_i32
  COPP_ProtectionType_None = 0_i32
  COPP_ProtectionType_HDCP = 1_i32
  COPP_ProtectionType_ACP = 2_i32
  COPP_ProtectionType_CGMSA = 4_i32
  COPP_ProtectionType_Mask = -2147483641_i32
  COPP_ProtectionType_Reserved = 2147483640_i32
  MF_BYTESTREAM_ORIGIN_NAME = "fc358288-3cb6-460c-a424-b6681260375a"
  MF_BYTESTREAM_CONTENT_TYPE = "fc358289-3cb6-460c-a424-b6681260375a"
  MF_BYTESTREAM_DURATION = "fc35828a-3cb6-460c-a424-b6681260375a"
  MF_BYTESTREAM_LAST_MODIFIED_TIME = "fc35828b-3cb6-460c-a424-b6681260375a"
  MF_BYTESTREAM_IFO_FILE_URI = "fc35828c-3cb6-460c-a424-b6681260375a"
  MF_BYTESTREAM_DLNA_PROFILE_ID = "fc35828d-3cb6-460c-a424-b6681260375a"
  MF_BYTESTREAM_EFFECTIVE_URL = "9afa0209-89d1-42af-8456-1de6b562d691"
  MF_BYTESTREAM_TRANSCODED = "b6c5c282-4dc9-4db9-ab48-cf3b6d8bc5e0"
  CLSID_MFByteStreamProxyClassFactory = "770e8e77-4916-441c-a9a7-b342d0eebc71"
  MEDeviceStreamCreated = "0252a1cf-3540-43b4-9164-d72eb405fa40"
  MF_SA_D3D_AWARE = "eaa35c29-775e-488e-9b61-b3283e49583b"
  MF_SA_REQUIRED_SAMPLE_COUNT = "18802c61-324b-4952-abd0-176ff5c696ff"
  MFT_END_STREAMING_AWARE = "70fbc845-b07e-4089-b064-399dc6110f29"
  MF_SA_AUDIO_ENDPOINT_AWARE = "c0381701-805c-42b2-ac8d-e2b4bf21f4f8"
  MFT_AUDIO_DECODER_AUDIO_ENDPOINT_ID = "c7ccdd6e-5398-4695-8be7-51b3e95111bd"
  MFT_AUDIO_DECODER_SPATIAL_METADATA_CLIENT = "05987df4-1270-4999-925f-8e939a7c0af7"
  MF_DMFT_FRAME_BUFFER_INFO = "396ce1c9-67a9-454c-8797-95a45799d804"
  MF_SA_REQUIRED_SAMPLE_COUNT_PROGRESSIVE = "b172d58e-fa77-4e48-8d2a-1df2d850eac2"
  MF_SA_MINIMUM_OUTPUT_SAMPLE_COUNT = "851745d5-c3d6-476d-9527-498ef2d10d18"
  MF_SA_MINIMUM_OUTPUT_SAMPLE_COUNT_PROGRESSIVE = "0f5523a5-1cb2-47c5-a550-2eeb84b4d14a"
  MFT_SUPPORT_3DVIDEO = "093f81b1-4f2e-4631-8168-7934032a01d3"
  MF_ENABLE_3DVIDEO_OUTPUT = "bdad7bca-0e5f-4b10-ab16-26de381b6293"
  MF_SA_D3D11_BINDFLAGS = "eacf97ad-065c-4408-bee3-fdcbfd128be2"
  MF_SA_D3D11_USAGE = "e85fe442-2ca3-486e-a9c7-109dda609880"
  MF_SA_D3D11_AWARE = "206b4fc8-fcf9-4c51-afe3-9764369e33a0"
  MF_SA_D3D11_SHARED = "7b8f32c3-6d96-4b89-9203-dd38b61414f3"
  MF_SA_D3D11_SHARED_WITHOUT_MUTEX = "39dbd44d-2e44-4931-a4c8-352d3dc42115"
  MF_SA_D3D11_ALLOW_DYNAMIC_YUV_TEXTURE = "ce06d49f-0613-4b9d-86a6-d8c4f9c10075"
  MF_SA_D3D11_HW_PROTECTED = "3a8ba9d9-92ca-4307-a391-6999dbf3b6ce"
  MF_SA_BUFFERS_PER_SAMPLE = "873c5171-1e3d-4e25-988d-b433ce041983"
  MF_SA_D3D11_ALLOCATE_DISPLAYABLE_RESOURCES = "eeface6d-2ea9-4adf-bbdf-7bbc482a1b6d"
  MFT_DECODER_EXPOSE_OUTPUT_TYPES_IN_NATIVE_ORDER = "ef80833f-f8fa-44d9-80d8-41ed6232670c"
  MFT_DECODER_QUALITY_MANAGEMENT_CUSTOM_CONTROL = "a24e30d7-de25-4558-bbfb-71070a2d332e"
  MFT_DECODER_QUALITY_MANAGEMENT_RECOVERY_WITHOUT_ARTIFACTS = "d8980deb-0a48-425f-8623-611db41d3810"
  MFT_REMUX_MARK_I_PICTURE_AS_CLEAN_POINT = "364e8f85-3f2e-436c-b2a2-4440a012a9e8"
  MFT_DECODER_FINAL_VIDEO_RESOLUTION_HINT = "dc2f8496-15c4-407a-b6f0-1b66ab5fbf53"
  MFT_ENCODER_SUPPORTS_CONFIG_EVENT = "86a355ae-3a77-4ec4-9f31-01149a4e92de"
  MFT_ENUM_HARDWARE_VENDOR_ID_Attribute = "3aecb0cc-035b-4bcc-8185-2b8d551ef3af"
  MF_TRANSFORM_ASYNC = "f81a699a-649a-497d-8c73-29f8fed6ad7a"
  MF_TRANSFORM_ASYNC_UNLOCK = "e5666d6b-3422-4eb6-a421-da7db1f8e207"
  MF_TRANSFORM_FLAGS_Attribute = "9359bb7e-6275-46c4-a025-1c01e45f1a86"
  MF_TRANSFORM_CATEGORY_Attribute = "ceabba49-506d-4757-a6ff-66c184987e4e"
  MFT_TRANSFORM_CLSID_Attribute = "6821c42b-65a4-4e82-99bc-9a88205ecd0c"
  MFT_INPUT_TYPES_Attributes = "4276c9b1-759d-4bf3-9cd0-0d723d138f96"
  MFT_OUTPUT_TYPES_Attributes = "8eae8cf3-a44f-4306-ba5c-bf5dda242818"
  MFT_ENUM_HARDWARE_URL_Attribute = "2fb866ac-b078-4942-ab6c-003d05cda674"
  MFT_FRIENDLY_NAME_Attribute = "314ffbae-5b41-4c95-9c19-4e7d586face3"
  MFT_CONNECTED_STREAM_ATTRIBUTE = "71eeb820-a59f-4de2-bcec-38db1dd611a4"
  MFT_CONNECTED_TO_HW_STREAM = "34e6e728-06d6-4491-a553-4795650db912"
  MFT_PREFERRED_OUTPUTTYPE_Attribute = "7e700499-396a-49ee-b1b4-f628021e8c9d"
  MFT_PROCESS_LOCAL_Attribute = "543186e4-4649-4e65-b588-4aa352aff379"
  MFT_PREFERRED_ENCODER_PROFILE = "53004909-1ef5-46d7-a18e-5a75f8b5905f"
  MFT_HW_TIMESTAMP_WITH_QPC_Attribute = "8d030fb8-cc43-4258-a22e-9210bef89be4"
  MFT_FIELDOFUSE_UNLOCK_Attribute = "8ec2e9fd-9148-410d-831e-702439461a8e"
  MFT_CODEC_MERIT_Attribute = "88a7cb15-7b07-4a34-9128-e64c6703c4d3"
  MFT_ENUM_TRANSCODE_ONLY_ATTRIBUTE = "111ea8cd-b62a-4bdb-89f6-67ffcdc2458b"
  MFT_AUDIO_DECODER_DEGRADATION_INFO_ATTRIBUTE = "6c3386ad-ec20-430d-b2a5-505c7178d9c4"
  MFT_POLICY_SET_AWARE = "5a633b19-cc39-4fa8-8ca5-59981b7a0018"
  MFT_USING_HARDWARE_DRM = "34faa77d-d79e-4957-b8ce-362b2684996c"
  MF_WVC1_PROG_SINGLE_SLICE_CONTENT = "67ec2559-0f2f-4420-a4dd-2f8ee7a5738b"
  MF_PROGRESSIVE_CODING_CONTENT = "8f020eea-1508-471f-9da6-507d7cfa40db"
  MF_NALU_LENGTH_SET = "a7911d53-12a4-4965-ae70-6eadd6ff0551"
  MF_NALU_LENGTH_INFORMATION = "19124e7c-ad4b-465f-bb18-20186287b6af"
  MF_USER_DATA_PAYLOAD = "d1d4985d-dc92-457a-b3a0-651a33a31047"
  MF_MPEG4SINK_SPSPPS_PASSTHROUGH = "5601a134-2005-4ad2-b37d-22a6c554deb2"
  MF_MPEG4SINK_MOOV_BEFORE_MDAT = "f672e3ac-e1e6-4f10-b5ec-5f3b30828816"
  MF_MPEG4SINK_MINIMUM_PROPERTIES_SIZE = "dca1ed52-450e-4a22-8c62-4ed452f7a187"
  MF_MPEG4SINK_MIN_FRAGMENT_DURATION = "a30b570c-8efd-45e8-94fe-27c84b5bdff6"
  MF_MPEG4SINK_MAX_CODED_SEQUENCES_PER_FRAGMENT = "fc1b3bd6-692d-4ce5-9299-738aa5463e9a"
  MF_SESSION_TOPOLOADER = "1e83d482-1f1c-4571-8405-88f4b2181f71"
  MF_SESSION_GLOBAL_TIME = "1e83d482-1f1c-4571-8405-88f4b2181f72"
  MF_SESSION_QUALITY_MANAGER = "1e83d482-1f1c-4571-8405-88f4b2181f73"
  MF_SESSION_CONTENT_PROTECTION_MANAGER = "1e83d482-1f1c-4571-8405-88f4b2181f74"
  MF_SESSION_SERVER_CONTEXT = "afe5b291-50fa-46e8-b9be-0c0c3ce4b3a5"
  MF_SESSION_REMOTE_SOURCE_MODE = "f4033ef4-9bb3-4378-941f-85a0856bc244"
  MF_SESSION_APPROX_EVENT_OCCURRENCE_TIME = "190e852f-6238-42d1-b5af-69ea338ef850"
  MF_PMP_SERVER_CONTEXT = "2f00c910-d2cf-4278-8b6a-d077fac3a25f"
  MF_TIME_FORMAT_ENTRY_RELATIVE = "4399f178-46d3-4504-afda-20d32e9ba360"
  MF_SOURCE_STREAM_SUPPORTS_HW_CONNECTION = "a38253aa-6314-42fd-a3ce-bb27b6859946"
  MF_STREAM_SINK_SUPPORTS_HW_CONNECTION = "9b465cbf-0597-4f9e-9f3c-b97eeef90359"
  MF_STREAM_SINK_SUPPORTS_ROTATION = "b3e96280-bd05-41a5-97ad-8a7fee24b912"
  MF_SINK_VIDEO_PTS = "2162bde7-421e-4b90-9b33-e58fbf1d58b6"
  MF_SINK_VIDEO_NATIVE_WIDTH = "e6d6a707-1505-4747-9b10-72d2d158cb3a"
  MF_SINK_VIDEO_NATIVE_HEIGHT = "f0ca6705-490c-43e8-941c-c0b3206b9a65"
  MF_SINK_VIDEO_DISPLAY_ASPECT_RATIO_NUMERATOR = "d0f33b22-b78a-4879-b455-f03ef3fa82cd"
  MF_SINK_VIDEO_DISPLAY_ASPECT_RATIO_DENOMINATOR = "6ea1eb97-1fe0-4f10-a6e4-1f4f661564e0"
  MF_BD_MVC_PLANE_OFFSET_METADATA = "62a654e4-b76c-4901-9823-2cb615d47318"
  MF_LUMA_KEY_ENABLE = "7369820f-76de-43ca-9284-47b8f37e0649"
  MF_LUMA_KEY_LOWER = "93d7b8d5-0b81-4715-aea0-8725871621e9"
  MF_LUMA_KEY_UPPER = "d09f39bb-4602-4c31-a706-a12171a5110a"
  MF_USER_EXTENDED_ATTRIBUTES = "c02abac6-feb2-4541-922f-920b43702722"
  MF_INDEPENDENT_STILL_IMAGE = "ea12af41-0710-42c9-a127-daa3e78483a5"
  MF_XVP_SAMPLE_LOCK_TIMEOUT = "aa4ddb29-5134-4363-ac72-83ec4bc10426"
  MF_TOPOLOGY_PROJECTSTART = "7ed3f802-86bb-4b3f-b7e4-7cb43afd4b80"
  MF_TOPOLOGY_PROJECTSTOP = "7ed3f803-86bb-4b3f-b7e4-7cb43afd4b80"
  MF_TOPOLOGY_NO_MARKIN_MARKOUT = "7ed3f804-86bb-4b3f-b7e4-7cb43afd4b80"
  MF_TOPOLOGY_DXVA_MODE = "1e8d34f6-f5ab-4e23-bb88-874aa3a1a74d"
  MF_TOPOLOGY_ENABLE_XVP_FOR_PLAYBACK = "1967731f-cd78-42fc-b026-0992a56e5693"
  MF_TOPOLOGY_STATIC_PLAYBACK_OPTIMIZATIONS = "b86cac42-41a6-4b79-897a-1ab0e52b4a1b"
  MF_TOPOLOGY_PLAYBACK_MAX_DIMS = "5715cf19-5768-44aa-ad6e-8721f1b0f9bb"
  MF_TOPOLOGY_HARDWARE_MODE = "d2d362fd-4e4f-4191-a579-c618b66706af"
  MF_TOPOLOGY_PLAYBACK_FRAMERATE = "c164737a-c2b1-4553-83bb-5a526072448f"
  MF_TOPOLOGY_DYNAMIC_CHANGE_NOT_ALLOWED = "d529950b-d484-4527-a9cd-b1909532b5b0"
  MF_TOPOLOGY_ENUMERATE_SOURCE_TYPES = "6248c36d-5d0b-4f40-a0bb-b0b305f77698"
  MF_TOPOLOGY_START_TIME_ON_PRESENTATION_SWITCH = "c8cc113f-7951-4548-aad6-9ed6202e62b3"
  MF_DISABLE_LOCALLY_REGISTERED_PLUGINS = "66b16da9-add4-47e0-a16b-5af1fb483634"
  MF_LOCAL_PLUGIN_CONTROL_POLICY = "d91b0085-c86d-4f81-8822-8c68e1d7fa04"
  MF_TOPONODE_FLUSH = "494bbce8-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_DRAIN = "494bbce9-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_D3DAWARE = "494bbced-b031-4e38-97c4-d5422dd618dc"
  MF_TOPOLOGY_RESOLUTION_STATUS = "494bbcde-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_ERRORCODE = "494bbcee-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_CONNECT_METHOD = "494bbcf1-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_LOCKED = "494bbcf7-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_WORKQUEUE_ID = "494bbcf8-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_WORKQUEUE_MMCSS_CLASS = "494bbcf9-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_DECRYPTOR = "494bbcfa-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_DISCARDABLE = "494bbcfb-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_ERROR_MAJORTYPE = "494bbcfd-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_ERROR_SUBTYPE = "494bbcfe-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_WORKQUEUE_MMCSS_TASKID = "494bbcff-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_WORKQUEUE_MMCSS_PRIORITY = "5001f840-2816-48f4-9364-ad1ef661a123"
  MF_TOPONODE_WORKQUEUE_ITEM_PRIORITY = "a1ff99be-5e97-4a53-b494-568c642c0ff3"
  MF_TOPONODE_MARKIN_HERE = "494bbd00-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_MARKOUT_HERE = "494bbd01-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_DECODER = "494bbd02-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_MEDIASTART = "835c58ea-e075-4bc7-bcba-4de000df9ae6"
  MF_TOPONODE_MEDIASTOP = "835c58eb-e075-4bc7-bcba-4de000df9ae6"
  MF_TOPONODE_SOURCE = "835c58ec-e075-4bc7-bcba-4de000df9ae6"
  MF_TOPONODE_PRESENTATION_DESCRIPTOR = "835c58ed-e075-4bc7-bcba-4de000df9ae6"
  MF_TOPONODE_STREAM_DESCRIPTOR = "835c58ee-e075-4bc7-bcba-4de000df9ae6"
  MF_TOPONODE_SEQUENCE_ELEMENTID = "835c58ef-e075-4bc7-bcba-4de000df9ae6"
  MF_TOPONODE_TRANSFORM_OBJECTID = "88dcc0c9-293e-4e8b-9aeb-0ad64cc016b0"
  MF_TOPONODE_STREAMID = "14932f9b-9087-4bb4-8412-5167145cbe04"
  MF_TOPONODE_NOSHUTDOWN_ON_REMOVE = "14932f9c-9087-4bb4-8412-5167145cbe04"
  MF_TOPONODE_RATELESS = "14932f9d-9087-4bb4-8412-5167145cbe04"
  MF_TOPONODE_DISABLE_PREROLL = "14932f9e-9087-4bb4-8412-5167145cbe04"
  MF_TOPONODE_PRIMARYOUTPUT = "6304ef99-16b2-4ebe-9d67-e4c539b3a259"
  MF_PD_PMPHOST_CONTEXT = "6c990d31-bb8e-477a-8598-0d5d96fcd88a"
  MF_PD_APP_CONTEXT = "6c990d32-bb8e-477a-8598-0d5d96fcd88a"
  MF_PD_DURATION = "6c990d33-bb8e-477a-8598-0d5d96fcd88a"
  MF_PD_TOTAL_FILE_SIZE = "6c990d34-bb8e-477a-8598-0d5d96fcd88a"
  MF_PD_AUDIO_ENCODING_BITRATE = "6c990d35-bb8e-477a-8598-0d5d96fcd88a"
  MF_PD_VIDEO_ENCODING_BITRATE = "6c990d36-bb8e-477a-8598-0d5d96fcd88a"
  MF_PD_MIME_TYPE = "6c990d37-bb8e-477a-8598-0d5d96fcd88a"
  MF_PD_LAST_MODIFIED_TIME = "6c990d38-bb8e-477a-8598-0d5d96fcd88a"
  MF_PD_PLAYBACK_ELEMENT_ID = "6c990d39-bb8e-477a-8598-0d5d96fcd88a"
  MF_PD_PREFERRED_LANGUAGE = "6c990d3a-bb8e-477a-8598-0d5d96fcd88a"
  MF_PD_PLAYBACK_BOUNDARY_TIME = "6c990d3b-bb8e-477a-8598-0d5d96fcd88a"
  MF_PD_AUDIO_ISVARIABLEBITRATE = "33026ee0-e387-4582-ae0a-34a2ad3baa18"
  MF_SD_LANGUAGE = "00af2180-bdc2-423c-abca-f503593bc121"
  MF_SD_PROTECTED = "00af2181-bdc2-423c-abca-f503593bc121"
  MF_SD_STREAM_NAME = "4f1b099d-d314-41e5-a781-7fefaa4c501f"
  MF_SD_MUTUALLY_EXCLUSIVE = "023ef79c-388d-487f-ac17-696cd6e3c6f5"
  MF_ACTIVATE_CUSTOM_VIDEO_MIXER_CLSID = "ba491360-be50-451e-95ab-6d4accc7dad8"
  MF_ACTIVATE_CUSTOM_VIDEO_MIXER_ACTIVATE = "ba491361-be50-451e-95ab-6d4accc7dad8"
  MF_ACTIVATE_CUSTOM_VIDEO_MIXER_FLAGS = "ba491362-be50-451e-95ab-6d4accc7dad8"
  MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_CLSID = "ba491364-be50-451e-95ab-6d4accc7dad8"
  MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_ACTIVATE = "ba491365-be50-451e-95ab-6d4accc7dad8"
  MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_FLAGS = "ba491366-be50-451e-95ab-6d4accc7dad8"
  MF_ACTIVATE_MFT_LOCKED = "c1f6093c-7f65-4fbd-9e39-5faec3c4fbd7"
  MF_ACTIVATE_VIDEO_WINDOW = "9a2dbbdd-f57e-4162-82b9-6831377682d3"
  MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS = "ede4b5e0-f805-4d6c-99b3-db01bf95dfab"
  MF_AUDIO_RENDERER_ATTRIBUTE_SESSION_ID = "ede4b5e3-f805-4d6c-99b3-db01bf95dfab"
  MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ID = "b10aaec3-ef71-4cc3-b873-05a9a08b9f8e"
  MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ROLE = "6ba644ff-27c5-4d02-9887-c28619fdb91b"
  MF_AUDIO_RENDERER_ATTRIBUTE_STREAM_CATEGORY = "a9770471-92ec-4df4-94fe-81c36f0c3a7a"
  MFENABLETYPE_WMDRMV1_LicenseAcquisition = "4ff6eeaf-0b43-4797-9b85-abf31815e7b0"
  MFENABLETYPE_WMDRMV7_LicenseAcquisition = "003306df-4a06-4884-a097-ef6d22ec84a3"
  MFENABLETYPE_WMDRMV7_Individualization = "acd2c84a-b303-4f65-bc2c-2c848d01a989"
  MFENABLETYPE_MF_UpdateRevocationInformation = "e558b0b5-b3c4-44a0-924c-50d178932385"
  MFENABLETYPE_MF_UpdateUntrustedComponent = "9879f3d6-cee2-48e6-b573-9767ab172f16"
  MFENABLETYPE_MF_RebootRequired = "6d4d3d4b-0ece-4652-8b3a-f2d24260d887"
  MF_METADATA_PROVIDER_SERVICE = "db214084-58a4-4d2e-b84f-6f755b2f7a0d"
  MF_PROPERTY_HANDLER_SERVICE = "a3face02-32b8-41dd-90e7-5fef7c8991b5"
  MF_RATE_CONTROL_SERVICE = "866fa297-b802-4bf8-9dc9-5e3b6a9f53c9"
  MF_TIMECODE_SERVICE = "a0d502a7-0eb3-4885-b1b9-9feb0d083454"
  MR_POLICY_VOLUME_SERVICE = "1abaa2ac-9d3b-47c6-ab48-c59506de784d"
  MR_CAPTURE_POLICY_VOLUME_SERVICE = "24030acd-107a-4265-975c-414e33e65f2a"
  MR_STREAM_VOLUME_SERVICE = "f8b5fa2f-32ef-46f5-b172-1321212fb2c4"
  MR_AUDIO_POLICY_SERVICE = "911fd737-6775-4ab0-a614-297862fdac88"
  MF_SAMPLEGRABBERSINK_SAMPLE_TIME_OFFSET = "62e3d776-8100-4e03-a6e8-bd3857ac9c47"
  MF_SAMPLEGRABBERSINK_IGNORE_CLOCK = "0efda2c0-2b69-4e2e-ab8d-46dcbff7d25d"
  MF_QUALITY_SERVICES = "b7e2be11-2f96-4640-b52c-282365bdf16c"
  MF_WORKQUEUE_SERVICES = "8e37d489-41e0-413a-9068-287c886d8dda"
  MF_QUALITY_NOTIFY_PROCESSING_LATENCY = "f6b44af8-604d-46fe-a95d-45479b10c9bc"
  MF_QUALITY_NOTIFY_SAMPLE_LAG = "30d15206-ed2a-4760-be17-eb4a9f12295c"
  MF_TIME_FORMAT_SEGMENT_OFFSET = "c8b8be77-869c-431d-812e-169693f65a39"
  MF_SOURCE_PRESENTATION_PROVIDER_SERVICE = "e002aadc-f4af-4ee5-9847-053edf840426"
  MF_TOPONODE_ATTRIBUTE_EDITOR_SERVICE = "65656e1a-077f-4472-83ef-316f11d5087a"
  MFNETSOURCE_SSLCERTIFICATE_MANAGER = "55e6cb27-e69b-4267-940c-2d7ec5bb8a0f"
  MFNETSOURCE_RESOURCE_FILTER = "815d0ff6-265a-4477-9e46-7b80ad80b5fb"
  MFNET_SAVEJOB_SERVICE = "b85a587f-3d02-4e52-9565-55d3ec1e7ff7"
  MFNETSOURCE_STATISTICS_SERVICE = "3cb1f275-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_STATISTICS = "3cb1f274-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_BUFFERINGTIME = "3cb1f276-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_ACCELERATEDSTREAMINGDURATION = "3cb1f277-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_MAXUDPACCELERATEDSTREAMINGDURATION = "4aab2879-bbe1-4994-9ff0-5495bd250129"
  MFNETSOURCE_MAXBUFFERTIMEMS = "408b24e6-4038-4401-b5b2-fe701a9ebf10"
  MFNETSOURCE_CONNECTIONBANDWIDTH = "3cb1f278-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_CACHEENABLED = "3cb1f279-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_AUTORECONNECTLIMIT = "3cb1f27a-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_RESENDSENABLED = "3cb1f27b-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_THINNINGENABLED = "3cb1f27c-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_PROTOCOL = "3cb1f27d-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_TRANSPORT = "3cb1f27e-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_PREVIEWMODEENABLED = "3cb1f27f-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_CREDENTIAL_MANAGER = "3cb1f280-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_PPBANDWIDTH = "3cb1f281-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_AUTORECONNECTPROGRESS = "3cb1f282-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_PROXYLOCATORFACTORY = "3cb1f283-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_BROWSERUSERAGENT = "3cb1f28b-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_BROWSERWEBPAGE = "3cb1f28c-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_PLAYERVERSION = "3cb1f28d-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_PLAYERID = "3cb1f28e-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_HOSTEXE = "3cb1f28f-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_HOSTVERSION = "3cb1f291-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_PLAYERUSERAGENT = "3cb1f292-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_CLIENTGUID = "60a2c4a6-f197-4c14-a5bf-88830d2458af"
  MFNETSOURCE_LOGURL = "3cb1f293-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_ENABLE_UDP = "3cb1f294-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_ENABLE_TCP = "3cb1f295-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_ENABLE_MSB = "3cb1f296-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_ENABLE_RTSP = "3cb1f298-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_ENABLE_HTTP = "3cb1f299-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_ENABLE_STREAMING = "3cb1f29c-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_ENABLE_DOWNLOAD = "3cb1f29d-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_ENABLE_PRIVATEMODE = "824779d8-f18b-4405-8cf1-464fb5aa8f71"
  MFNETSOURCE_UDP_PORT_RANGE = "3cb1f29a-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_PROXYINFO = "3cb1f29b-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_DRMNET_LICENSE_REPRESENTATION = "47eae1bd-bdfe-42e2-82f3-54a48c17962d"
  MFNETSOURCE_PROXYSETTINGS = "3cb1f287-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_PROXYHOSTNAME = "3cb1f284-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_PROXYPORT = "3cb1f288-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_PROXYEXCEPTIONLIST = "3cb1f285-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_PROXYBYPASSFORLOCAL = "3cb1f286-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_PROXYRERUNAUTODETECTION = "3cb1f289-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_STREAM_LANGUAGE = "9ab44318-f7cd-4f2d-8d6d-fa35b492cecb"
  MFNETSOURCE_LOGPARAMS = "64936ae8-9418-453a-8cda-3e0a668b353b"
  MFNETSOURCE_PEERMANAGER = "48b29adb-febf-45ee-a9bf-efb81c492efc"
  MFNETSOURCE_FRIENDLYNAME = "5b2a7757-bc6b-447e-aa06-0dda1c646e2f"
  MF_BYTESTREAMHANDLER_ACCEPTS_SHARE_WRITE = "a6e1f733-3001-4915-8150-1558a2180ec8"
  MF_BYTESTREAM_SERVICE = "ab025e2b-16d9-4180-a127-ba6c70156161"
  MF_MEDIA_PROTECTION_MANAGER_PROPERTIES = "38bd81a9-acea-4c73-89b2-5532c0aeca79"
  MFCONNECTOR_SPDIF = "0b94a712-ad3e-4cee-83ce-ce32e3db6522"
  MFCONNECTOR_UNKNOWN = "ac3aef5c-ce43-11d9-92db-000bdb28ff98"
  MFCONNECTOR_PCI = "ac3aef5d-ce43-11d9-92db-000bdb28ff98"
  MFCONNECTOR_PCIX = "ac3aef5e-ce43-11d9-92db-000bdb28ff98"
  MFCONNECTOR_PCI_Express = "ac3aef5f-ce43-11d9-92db-000bdb28ff98"
  MFCONNECTOR_AGP = "ac3aef60-ce43-11d9-92db-000bdb28ff98"
  MFCONNECTOR_VGA = "57cd5968-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_SVIDEO = "57cd5969-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_COMPOSITE = "57cd596a-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_COMPONENT = "57cd596b-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_DVI = "57cd596c-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_HDMI = "57cd596d-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_LVDS = "57cd596e-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_D_JPN = "57cd5970-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_SDI = "57cd5971-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_DISPLAYPORT_EXTERNAL = "57cd5972-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_DISPLAYPORT_EMBEDDED = "57cd5973-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_UDI_EXTERNAL = "57cd5974-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_UDI_EMBEDDED = "57cd5975-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_MIRACAST = "57cd5977-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_TRANSPORT_AGNOSTIC_DIGITAL_MODE_A = "57cd5978-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_TRANSPORT_AGNOSTIC_DIGITAL_MODE_B = "57cd5979-ce47-11d9-92db-000bdb28ff98"
  MF_POLICY_ID = "b160c24d-c059-48f1-a901-9ee298a9a8c3"
  MFPROTECTION_DISABLE = "8cc6d81b-fec6-4d8f-964b-cfba0b0dad0d"
  MFPROTECTION_CONSTRICTVIDEO = "193370ce-c5e4-4c3a-8a66-6959b4da4442"
  MFPROTECTION_CONSTRICTVIDEO_NOOPM = "a580e8cd-c247-4957-b983-3c2eebd1ff59"
  MFPROTECTION_CONSTRICTAUDIO = "ffc99b44-df48-4e16-8e66-096892c1578a"
  MFPROTECTION_TRUSTEDAUDIODRIVERS = "65bdf3d2-0168-4816-a533-55d47b027101"
  MFPROTECTION_HDCP = "ae7cc03d-c828-4021-acb7-d578d27aaf13"
  MFPROTECTION_CGMSA = "e57e69e9-226b-4d31-b4e3-d3db008736dd"
  MFPROTECTION_ACP = "c3fd11c6-f8b7-4d20-b008-1db17d61f2da"
  MFPROTECTION_WMDRMOTA = "a267a6a1-362e-47d0-8805-4628598a23e4"
  MFPROTECTION_FFT = "462a56b2-2866-4bb6-980d-6d8d9edb1a8c"
  MFPROTECTION_PROTECTED_SURFACE = "4f5d9566-e742-4a25-8d1f-d287b5fa0ade"
  MFPROTECTION_DISABLE_SCREEN_SCRAPE = "a21179a4-b7cd-40d8-9614-8ef2371ba78d"
  MFPROTECTION_VIDEO_FRAMES = "36a59cbc-7401-4a8c-bc20-46a7c9e597f0"
  MFPROTECTION_HARDWARE = "4ee7f0c1-9ed7-424f-b6be-996b33528856"
  MFPROTECTION_HDCP_WITH_TYPE_ENFORCEMENT = "a4a585e8-ed60-442d-814d-db4d4220a06d"
  MFPROTECTIONATTRIBUTE_BEST_EFFORT = "c8e06331-75f0-4ec1-8e77-17578f773b46"
  MFPROTECTIONATTRIBUTE_FAIL_OVER = "8536abc5-38f1-4151-9cce-f55d941229ac"
  MFPROTECTION_GRAPHICS_TRANSFER_AES_ENCRYPTION = "c873de64-d8a5-49e6-88bb-fb963fd3d4ce"
  MFPROTECTIONATTRIBUTE_CONSTRICTVIDEO_IMAGESIZE = "008476fc-4b58-4d80-a790-e7297673161d"
  MFPROTECTIONATTRIBUTE_HDCP_SRM = "6f302107-3477-4468-8a08-eef9db10e20f"
  MF_SampleProtectionSalt = "5403deee-b9ee-438f-aa83-3804997e569d"
  MF_REMOTE_PROXY = "2f00c90e-d2cf-4278-8b6a-d077fac3a25f"
  CLSID_CreateMediaExtensionObject = "ef65a54d-0788-45b8-8b14-bc0f6a6b5137"
  MF_SAMI_SERVICE = "49a89ae7-b4d9-4ef2-aa5c-f65a3e05ae4e"
  MF_PD_SAMI_STYLELIST = "e0b73c7f-486d-484e-9872-4de5192a7bf8"
  MF_SD_SAMI_LANGUAGE = "36fcb98a-6cd0-44cb-acb9-a8f5600dd0bb"
  MF_TRANSCODE_CONTAINERTYPE = "150ff23f-4abc-478b-ac4f-e1916fba1cca"
  MFTranscodeContainerType_ASF = "430f6f6e-b6bf-4fc1-a0bd-9ee46eee2afb"
  MFTranscodeContainerType_MPEG4 = "dc6cd05d-b9d0-40ef-bd35-fa622c1ab28a"
  MFTranscodeContainerType_MP3 = "e438b912-83f1-4de6-9e3a-9ffbc6dd24d1"
  MFTranscodeContainerType_FLAC = "31344aa3-05a9-42b5-901b-8e9d4257f75e"
  MFTranscodeContainerType_3GP = "34c50167-4472-4f34-9ea0-c49fbacf037d"
  MFTranscodeContainerType_AC3 = "6d8d91c3-8c91-4ed1-8742-8c347d5b44d0"
  MFTranscodeContainerType_ADTS = "132fd27d-0f02-43de-a301-38fbbbb3834e"
  MFTranscodeContainerType_MPEG2 = "bfc2dbf9-7bb4-4f8f-afde-e112c44ba882"
  MFTranscodeContainerType_WAVE = "64c3453c-0f26-4741-be63-87bdf8bb935b"
  MFTranscodeContainerType_AVI = "7edfe8af-402f-4d76-a33c-619fd157d0f1"
  MFTranscodeContainerType_FMPEG4 = "9ba876f1-419f-4b77-a1e0-35959d9d4004"
  MFTranscodeContainerType_AMR = "025d5ad3-621a-475b-964d-66b1c824f079"
  MF_TRANSCODE_SKIP_METADATA_TRANSFER = "4e4469ef-b571-4959-8f83-3dcfba33a393"
  MF_TRANSCODE_TOPOLOGYMODE = "3e3df610-394a-40b2-9dea-3bab650bebf2"
  MF_TRANSCODE_ADJUST_PROFILE = "9c37c21b-060f-487c-a690-80d7f50d1c72"
  MF_TRANSCODE_ENCODINGPROFILE = "6947787c-f508-4ea9-b1e9-a1fe3a49fbc9"
  MF_TRANSCODE_QUALITYVSSPEED = "98332df8-03cd-476b-89fa-3f9e442dec9f"
  MF_TRANSCODE_DONOT_INSERT_ENCODER = "f45aa7ce-ab24-4012-a11b-dc8220201410"
  MF_VIDEO_PROCESSOR_ALGORITHM = "4a0a1e1f-272c-4fb6-9eb1-db330cbc97ca"
  MF_XVP_DISABLE_FRC = "2c0afa19-7a97-4d5a-9ee8-16d4fc518d8c"
  MF_XVP_CALLER_ALLOCATES_OUTPUT = "04a2cabc-0cab-40b1-a1b9-75bc3658f000"
  MF_LOCAL_MFT_REGISTRATION_SERVICE = "ddf5cf9c-4506-45aa-abf0-6d5d94dd1b4a"
  MF_WRAPPED_SAMPLE_SERVICE = "31f52bf2-d03e-4048-80d0-9c1046d87c61"
  MF_WRAPPED_OBJECT = "2b182c4c-d6ac-49f4-8915-f71887db70cd"
  CLSID_HttpSchemePlugin = "44cb442b-9da9-49df-b3fd-023777b16e50"
  CLSID_UrlmonSchemePlugin = "9ec4b4f9-3029-45ad-947b-344de2a249e2"
  CLSID_NetSchemePlugin = "e9f4ebab-d97b-463e-a2b1-c54ee3f9414d"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE = "c60ac5fe-252a-478f-a0ef-bc8fa5f7cad3"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_HW_SOURCE = "de7046ba-54d6-4487-a2a4-ec7c0d1bd163"
  MF_DEVSOURCE_ATTRIBUTE_FRIENDLY_NAME = "60d0e559-52f8-4fa2-bbce-acdb34a8ec01"
  MF_DEVSOURCE_ATTRIBUTE_MEDIA_TYPE = "56a819ca-0c78-4de4-a0a7-3ddaba0f24d4"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_CATEGORY = "77f0ae69-c3bd-4509-941d-467e4d24899e"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_SYMBOLIC_LINK = "58f0aad8-22bf-4f8a-bb3d-d2c4978c6e2f"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_SYMBOLIC_LINK = "98d24b5e-5930-4614-b5a1-f600f9355a78"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_MAX_BUFFERS = "7dd9b730-4f2d-41d5-8f95-0cc9a912ba26"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ENDPOINT_ID = "30da9258-feb9-47a7-a453-763a7a8e1c5f"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ROLE = "bc9d118e-8c67-4a18-85d4-12d300400552"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_PROVIDER_DEVICE_ID = "36689d42-a06c-40ae-84cf-f5a034067cc4"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_XADDRESS = "bca0be52-c327-44c7-9b7d-7fa8d9b5bcda"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_STREAM_URL = "9d7b40d2-3617-4043-93e3-8d6da9bb3492"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_USERNAME = "05d01add-949f-46eb-bc8e-8b0d2b32d79d"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_PASSWORD = "a0fd7e16-42d9-49df-84c0-e82c5eab8874"
  CLSID_FrameServerNetworkCameraSource = "7a213aa7-866f-414a-8c1a-275c7283a395"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_GUID = "14dd9a1c-7cff-41be-b1b9-ba1ac6ecb571"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_GUID = "8ac3587a-4ae7-42d8-99e0-0a6013eef90f"
  MF_DEVICESTREAM_IMAGE_STREAM = "a7ffb865-e7b2-43b0-9f6f-9af2a0e50fc0"
  MF_DEVICESTREAM_INDEPENDENT_IMAGE_STREAM = "03eeec7e-d605-4576-8b29-6580b490d7d3"
  MF_DEVICESTREAM_STREAM_ID = "11bd5120-d124-446b-88e6-17060257fff9"
  MF_DEVICESTREAM_STREAM_CATEGORY = "2939e7b8-a62e-4579-b674-d4073dfabbba"
  MF_DEVICESTREAM_FRAMESERVER_SHARED = "1cb378e9-b279-41d4-af97-34a243e68320"
  MF_DEVICESTREAM_TRANSFORM_STREAM_ID = "e63937b7-daaf-4d49-815f-d826f8ad31e7"
  MF_DEVICESTREAM_EXTENSION_PLUGIN_CLSID = "048e6558-60c4-4173-bd5b-6a3ca2896aee"
  MF_DEVICEMFT_EXTENSION_PLUGIN_CLSID = "0844dbae-34fa-48a0-a783-8e696fb1c9a8"
  MF_DEVICESTREAM_EXTENSION_PLUGIN_CONNECTION_POINT = "37f9375c-e664-4ea4-aae4-cb6d1daca1f4"
  MF_DEVICESTREAM_TAKEPHOTO_TRIGGER = "1d180e34-538c-4fbb-a75a-859af7d261a6"
  MF_DEVICESTREAM_MAX_FRAME_BUFFERS = "1684cebe-3175-4985-882c-0efd3e8ac11e"
  MF_DEVICEMFT_CONNECTED_FILTER_KSCONTROL = "6a2c4fa6-d179-41cd-9523-822371ea40e5"
  MF_DEVICEMFT_CONNECTED_PIN_KSCONTROL = "e63310f7-b244-4ef8-9a7d-24c74e32ebd0"
  MF_DEVICE_THERMAL_STATE_CHANGED = "70ccd0af-fc9f-4deb-a875-9fecd16c5bd4"
  MFSampleExtension_DeviceTimestamp = "8f3e35e7-2dcd-4887-8622-2a58baa652b0"
  MFSampleExtension_Spatial_CameraViewTransform = "4e251fa4-830f-4770-859a-4b8d99aa809b"
  MFSampleExtension_Spatial_CameraCoordinateSystem = "9d13c82f-2199-4e67-91cd-d1a4181f2534"
  MFSampleExtension_Spatial_CameraProjectionTransform = "47f9fcb5-2a02-4f26-a477-792fdf95886a"
  MF_MEDIASOURCE_SERVICE = "f09992f7-9fba-4c4a-a37f-8c47b4e1dfe7"
  MF_ACCESS_CONTROLLED_MEDIASOURCE_SERVICE = "014a5031-2f05-4c6a-9f9c-7d0dc4eda5f4"
  MF_CONTENT_DECRYPTOR_SERVICE = "68a72927-fc7b-44ee-85f4-7c51bd55a659"
  MF_CONTENT_PROTECTION_DEVICE_SERVICE = "ff58436f-76a0-41fe-b566-10cc53962edd"
  MF_SD_AUDIO_ENCODER_DELAY = "8e85422c-73de-403f-9a35-550ad6e8b951"
  MF_SD_AUDIO_ENCODER_PADDING = "529c7f2c-ac4b-4e3f-bfc3-0902194982cb"
  CLSID_MSH264DecoderMFT = "62ce7e72-4c71-4d20-b15d-452831a87d9d"
  CLSID_MSH264EncoderMFT = "6ca50344-051a-4ded-9779-a43305165e35"
  CLSID_MSDDPlusDecMFT = "177c0afe-900b-48d4-9e4c-57add250b3d4"
  CLSID_MP3DecMediaObject = "bbeea841-0a63-4f52-a7ab-a9b3a84ed38a"
  CLSID_MSAACDecMFT = "32d186a7-218f-4c75-8876-dd77273a8999"
  CLSID_MSH265DecoderMFT = "420a51a3-d605-430c-b4fc-45274fa6c562"
  CLSID_WMVDecoderMFT = "82d353df-90bd-4382-8bc2-3f6192b76e34"
  CLSID_WMADecMediaObject = "2eeb4adf-4578-4d10-bca7-bb955f56320a"
  CLSID_MSMPEGAudDecMFT = "70707b39-b2ca-4015-abea-f8447d22d88b"
  CLSID_MSMPEGDecoderMFT = "2d709e52-123f-49b5-9cbc-9af5cde28fb9"
  CLSID_AudioResamplerMediaObject = "f447b69e-1884-4a7e-8055-346f74d6edb3"
  CLSID_MSVPxDecoder = "e3aaf548-c9a4-4c6e-234d-5ada374b0000"
  CLSID_MSOpusDecoder = "63e17c10-2d43-4c42-8fe3-8d8b63e46a6a"
  CLSID_VideoProcessorMFT = "88753b26-5b24-49bd-b2e7-0c445c78c982"
  MFNETSOURCE_CROSS_ORIGIN_SUPPORT = "9842207c-b02c-4271-a2fc-72e49308e5c2"
  MFNETSOURCE_HTTP_DOWNLOAD_SESSION_PROVIDER = "7d55081e-307d-4d6d-a663-a93be97c4b5c"
  MF_SD_MEDIASOURCE_STATUS = "1913678b-fc0f-44da-8f43-1ba3b526f4ae"
  MF_SD_VIDEO_SPHERICAL = "a51da449-3fdc-478c-bcb5-30be76595f55"
  MF_SD_VIDEO_SPHERICAL_FORMAT = "4a8fc407-6ea1-46c8-b567-6971d4a139c3"
  MF_SD_VIDEO_SPHERICAL_INITIAL_VIEWDIRECTION = "11d25a49-bb62-467f-9db1-c17165716c49"
  MF_MEDIASOURCE_EXPOSE_ALL_STREAMS = "e7f250b8-8fd9-4a09-b6c1-6a315c7c720e"
  MF_ST_MEDIASOURCE_COLLECTION = "616de972-83ad-4950-8170-630d19cbe307"
  MF_DEVICESTREAM_FILTER_KSCONTROL = "46783cca-3df5-4923-a9ef-36b7223edde0"
  MF_DEVICESTREAM_PIN_KSCONTROL = "ef3ef9a7-87f2-48ca-be02-674878918e98"
  MF_DEVICESTREAM_SOURCE_ATTRIBUTES = "2f8cb617-361b-434f-85ea-99a03e1ce4e0"
  MF_DEVICESTREAM_FRAMESERVER_HIDDEN = "f402567b-4d91-4179-96d1-74c8480c2034"
  MF_STF_VERSION_INFO = "6770bd39-ef82-44ee-a49b-934beb24aef7"
  MF_STF_VERSION_DATE = "31a165d5-df67-4095-8e44-8868fc20dbfd"
  MF_DEVICESTREAM_REQUIRED_CAPABILITIES = "6d8b957e-7cf6-43f4-af56-9c0e1e4fcbe1"
  MF_DEVICESTREAM_REQUIRED_SDDL = "331ae85d-c0d3-49ba-83ba-82a12d63cdd6"
  MF_DEVICEMFT_SENSORPROFILE_COLLECTION = "36ebdc44-b12c-441b-89f4-08b2f41a9cfc"
  MF_DEVICESTREAM_SENSORSTREAM_ID = "e35b9fe4-0659-4cad-bb51-33160be7e413"
  MF_PD_ASF_FILEPROPERTIES_FILE_ID = "3de649b4-d76d-4e66-9ec9-78120fb4c7e3"
  MF_PD_ASF_FILEPROPERTIES_CREATION_TIME = "3de649b6-d76d-4e66-9ec9-78120fb4c7e3"
  MF_PD_ASF_FILEPROPERTIES_PACKETS = "3de649b7-d76d-4e66-9ec9-78120fb4c7e3"
  MF_PD_ASF_FILEPROPERTIES_PLAY_DURATION = "3de649b8-d76d-4e66-9ec9-78120fb4c7e3"
  MF_PD_ASF_FILEPROPERTIES_SEND_DURATION = "3de649b9-d76d-4e66-9ec9-78120fb4c7e3"
  MF_PD_ASF_FILEPROPERTIES_PREROLL = "3de649ba-d76d-4e66-9ec9-78120fb4c7e3"
  MF_PD_ASF_FILEPROPERTIES_FLAGS = "3de649bb-d76d-4e66-9ec9-78120fb4c7e3"
  MF_PD_ASF_FILEPROPERTIES_MIN_PACKET_SIZE = "3de649bc-d76d-4e66-9ec9-78120fb4c7e3"
  MF_PD_ASF_FILEPROPERTIES_MAX_PACKET_SIZE = "3de649bd-d76d-4e66-9ec9-78120fb4c7e3"
  MF_PD_ASF_FILEPROPERTIES_MAX_BITRATE = "3de649be-d76d-4e66-9ec9-78120fb4c7e3"
  CLSID_WMDRMSystemID = "8948bb22-11bd-4796-93e3-974d1b575678"
  MF_PD_ASF_CONTENTENCRYPTION_TYPE = "8520fe3d-277e-46ea-99e4-e30a86db12be"
  MF_PD_ASF_CONTENTENCRYPTION_KEYID = "8520fe3e-277e-46ea-99e4-e30a86db12be"
  MF_PD_ASF_CONTENTENCRYPTION_SECRET_DATA = "8520fe3f-277e-46ea-99e4-e30a86db12be"
  MF_PD_ASF_CONTENTENCRYPTION_LICENSE_URL = "8520fe40-277e-46ea-99e4-e30a86db12be"
  MF_PD_ASF_CONTENTENCRYPTIONEX_ENCRYPTION_DATA = "62508be5-ecdf-4924-a359-72bab3397b9d"
  MF_PD_ASF_LANGLIST = "f23de43c-9977-460d-a6ec-32937f160f7d"
  MF_PD_ASF_LANGLIST_LEGACYORDER = "f23de43d-9977-460d-a6ec-32937f160f7d"
  MF_PD_ASF_MARKER = "5134330e-83a6-475e-a9d5-4fb875fb2e31"
  MF_PD_ASF_SCRIPT = "e29cd0d7-d602-4923-a7fe-73fd97ecc650"
  MF_PD_ASF_CODECLIST = "e4bb3509-c18d-4df1-bb99-7a36b3cc4119"
  MF_PD_ASF_METADATA_IS_VBR = "5fc6947a-ef60-445d-b449-442ecc78b4c1"
  MF_PD_ASF_METADATA_V8_VBRPEAK = "5fc6947b-ef60-445d-b449-442ecc78b4c1"
  MF_PD_ASF_METADATA_V8_BUFFERAVERAGE = "5fc6947c-ef60-445d-b449-442ecc78b4c1"
  MF_PD_ASF_METADATA_LEAKY_BUCKET_PAIRS = "5fc6947d-ef60-445d-b449-442ecc78b4c1"
  MF_PD_ASF_DATA_START_OFFSET = "e7d5b3e7-1f29-45d3-8822-3e78fae272ed"
  MF_PD_ASF_DATA_LENGTH = "e7d5b3e8-1f29-45d3-8822-3e78fae272ed"
  MF_SD_ASF_EXTSTRMPROP_LANGUAGE_ID_INDEX = "48f8a522-305d-422d-8524-2502dda33680"
  MF_SD_ASF_EXTSTRMPROP_AVG_DATA_BITRATE = "48f8a523-305d-422d-8524-2502dda33680"
  MF_SD_ASF_EXTSTRMPROP_AVG_BUFFERSIZE = "48f8a524-305d-422d-8524-2502dda33680"
  MF_SD_ASF_EXTSTRMPROP_MAX_DATA_BITRATE = "48f8a525-305d-422d-8524-2502dda33680"
  MF_SD_ASF_EXTSTRMPROP_MAX_BUFFERSIZE = "48f8a526-305d-422d-8524-2502dda33680"
  MF_SD_ASF_STREAMBITRATES_BITRATE = "a8e182ed-afc8-43d0-b0d1-f65bad9da558"
  MF_SD_ASF_METADATA_DEVICE_CONFORMANCE_TEMPLATE = "245e929d-c44e-4f7e-bb3c-77d4dfd27f8a"
  MF_PD_ASF_INFO_HAS_AUDIO = "80e62295-2296-4a44-b31c-d103c6fed23c"
  MF_PD_ASF_INFO_HAS_VIDEO = "80e62296-2296-4a44-b31c-d103c6fed23c"
  MF_PD_ASF_INFO_HAS_NON_AUDIO_VIDEO = "80e62297-2296-4a44-b31c-d103c6fed23c"
  MF_ASFPROFILE_MINPACKETSIZE = "22587626-47de-4168-87f5-b5aa9b12a8f0"
  MF_ASFPROFILE_MAXPACKETSIZE = "22587627-47de-4168-87f5-b5aa9b12a8f0"
  MF_ASFSTREAMCONFIG_LEAKYBUCKET1 = "c69b5901-ea1a-4c9b-b692-e2a0d29a8add"
  MF_ASFSTREAMCONFIG_LEAKYBUCKET2 = "c69b5902-ea1a-4c9b-b692-e2a0d29a8add"
  MFASFSampleExtension_SampleDuration = "c6bd9450-867f-4907-83a3-c77921b733ad"
  MFASFSampleExtension_OutputCleanPoint = "f72a3c6f-6eb4-4ebc-b192-09ad9759e828"
  MFASFSampleExtension_SMPTE = "399595ec-8667-4e2d-8fdb-98814ce76c1e"
  MFASFSampleExtension_FileName = "e165ec0e-19ed-45d7-b4a7-25cbd1e28e9b"
  MFASFSampleExtension_ContentType = "d590dc20-07bc-436c-9cf7-f3bbfbf1a4dc"
  MFASFSampleExtension_PixelAspectRatio = "1b1ee554-f9ea-4bc8-821a-376b74e4c4b8"
  MFASFSampleExtension_Encryption_SampleID = "6698b84e-0afa-4330-aeb2-1c0a98d7a44d"
  MFASFSampleExtension_Encryption_KeyID = "76376591-795f-4da1-86ed-9d46eca109a9"
  MFASFMutexType_Language = "72178c2b-e45b-11d5-bc2a-00b0d0f3f4ab"
  MFASFMutexType_Bitrate = "72178c2c-e45b-11d5-bc2a-00b0d0f3f4ab"
  MFASFMutexType_Presentation = "72178c2d-e45b-11d5-bc2a-00b0d0f3f4ab"
  MFASFMutexType_Unknown = "72178c2e-e45b-11d5-bc2a-00b0d0f3f4ab"
  MFASFSPLITTER_PACKET_BOUNDARY = "fe584a05-e8d6-42e3-b176-f1211705fb6f"
  MFASFINDEXER_TYPE_TIMECODE = "49815231-6bad-44fd-810a-3f60984ec7fd"
  MF_CAPTURE_ENGINE_INITIALIZED = "219992bc-cf92-4531-a1ae-96e1e886c8f1"
  MF_CAPTURE_ENGINE_PREVIEW_STARTED = "a416df21-f9d3-4a74-991b-b817298952c4"
  MF_CAPTURE_ENGINE_PREVIEW_STOPPED = "13d5143c-1edd-4e50-a2ef-350a47678060"
  MF_CAPTURE_ENGINE_RECORD_STARTED = "ac2b027b-ddf9-48a0-89be-38ab35ef45c0"
  MF_CAPTURE_ENGINE_RECORD_STOPPED = "55e5200a-f98f-4c0d-a9ec-9eb25ed3d773"
  MF_CAPTURE_ENGINE_PHOTO_TAKEN = "3c50c445-7304-48eb-865d-bba19ba3af5c"
  MF_CAPTURE_SOURCE_CURRENT_DEVICE_MEDIA_TYPE_SET = "e7e75e4c-039c-4410-815b-8741307b63aa"
  MF_CAPTURE_ENGINE_ERROR = "46b89fc6-33cc-4399-9dad-784de77d587c"
  MF_CAPTURE_ENGINE_EFFECT_ADDED = "aa8dc7b5-a048-4e13-8ebe-f23c46c830c1"
  MF_CAPTURE_ENGINE_EFFECT_REMOVED = "c6e8db07-fb09-4a48-89c6-bf92a04222c9"
  MF_CAPTURE_ENGINE_ALL_EFFECTS_REMOVED = "fded7521-8ed8-431a-a96b-f3e2565e981c"
  MF_CAPTURE_SINK_PREPARED = "7bfce257-12b1-4409-8c34-d445daab7578"
  MF_CAPTURE_ENGINE_OUTPUT_MEDIA_TYPE_SET = "caaad994-83ec-45e9-a30a-1f20aadb9831"
  MF_CAPTURE_ENGINE_CAMERA_STREAM_BLOCKED = "a4209417-8d39-46f3-b759-5912528f4207"
  MF_CAPTURE_ENGINE_CAMERA_STREAM_UNBLOCKED = "9be9eef0-cdaf-4717-8564-834aae66415c"
  MF_CAPTURE_ENGINE_D3D_MANAGER = "76e25e7b-d595-4283-962c-c594afd78ddf"
  MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_UNPROCESSED_SAMPLES = "b467f705-7913-4894-9d42-a215fea23da9"
  MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_UNPROCESSED_SAMPLES = "1cddb141-a7f4-4d58-9896-4d15a53c4efe"
  MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_PROCESSED_SAMPLES = "e7b4a49e-382c-4aef-a946-aed5490b7111"
  MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_PROCESSED_SAMPLES = "9896e12a-f707-4500-b6bd-db8eb810b50f"
  MF_CAPTURE_ENGINE_USE_AUDIO_DEVICE_ONLY = "1c8077da-8466-4dc4-8b8e-276b3f85923b"
  MF_CAPTURE_ENGINE_USE_VIDEO_DEVICE_ONLY = "7e025171-cf32-4f2e-8f19-410577b73a66"
  MF_CAPTURE_ENGINE_DISABLE_HARDWARE_TRANSFORMS = "b7c42a6b-3207-4495-b4e7-81f9c35d5991"
  MF_CAPTURE_ENGINE_DISABLE_DXVA = "f9818862-179d-433f-a32f-74cbcf74466d"
  MF_CAPTURE_ENGINE_MEDIASOURCE_CONFIG = "bc6989d2-0fc1-46e1-a74f-efd36bc788de"
  MF_CAPTURE_ENGINE_DECODER_MFT_FIELDOFUSE_UNLOCK_Attribute = "2b8ad2e8-7acb-4321-a606-325c4249f4fc"
  MF_CAPTURE_ENGINE_ENCODER_MFT_FIELDOFUSE_UNLOCK_Attribute = "54c63a00-78d5-422f-aa3e-5e99ac649269"
  MF_CAPTURE_ENGINE_ENABLE_CAMERA_STREAMSTATE_NOTIFICATION = "4c808e9d-aaed-4713-90fb-cb24064ab8da"
  MF_CAPTURE_ENGINE_MEDIA_CATEGORY = "8e3f5bd5-dbbf-42f0-8542-d07a3971762a"
  MF_CAPTURE_ENGINE_AUDIO_PROCESSING = "10f1be5e-7e11-410b-973d-f4b6109000fe"
  MF_CAPTURE_ENGINE_EVENT_GENERATOR_GUID = "abfa8ad5-fc6d-4911-87e0-961945f8f7ce"
  MF_CAPTURE_ENGINE_EVENT_STREAM_INDEX = "82697f44-b1cf-42eb-9753-f86d649c8865"
  MF_CAPTURE_ENGINE_SELECTEDCAMERAPROFILE = "03160b7e-1c6f-4db2-ad56-a7c430f82392"
  MF_CAPTURE_ENGINE_SELECTEDCAMERAPROFILE_INDEX = "3ce88613-2214-46c3-b417-82f8a313c9c3"
  CLSID_MFCaptureEngine = "efce38d3-8914-4674-a7df-ae1b3d654b8a"
  CLSID_MFCaptureEngineClassFactory = "efce38d3-8914-4674-a7df-ae1b3d654b8a"
  MFSampleExtension_DeviceReferenceSystemTime = "6523775a-ba2d-405f-b2c5-01ff88e2e8f6"
  MF_D3D12_SYNCHRONIZATION_OBJECT = "2a7c8d6a-85a6-494d-a046-06ea1a138f4b"
  MF_MT_D3D_RESOURCE_VERSION = "174f1e85-fe26-453d-b52e-5bdd4e55b944"
  MF_MT_D3D12_CPU_READBACK = "28ee9fe3-d481-46a6-b98a-7f69d5280e82"
  MF_MT_D3D12_TEXTURE_LAYOUT = "97c85caa-0beb-4ee1-9715-f22fad8c10f5"
  MF_MT_D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET = "eeac2585-3430-498c-84a2-77b1bba570f6"
  MF_MT_D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL = "b1138dc3-01d5-4c14-9bdc-cdc9336f55b9"
  MF_MT_D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS = "82c85647-5057-4960-9559-f45b8e271427"
  MF_MT_D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE = "ba06bfac-ffe3-474a-ab55-161ee4417a2e"
  MF_MT_D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER = "a6a1e439-2f96-4ab5-98dc-adf74973505d"
  MF_MT_D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS = "0a4940b2-cfd6-4738-9d02-98113734015a"
  MF_SA_D3D12_HEAP_FLAGS = "496b3266-d28f-4f8c-93a7-4a596b1a31a1"
  MF_SA_D3D12_HEAP_TYPE = "56f26a76-bbc1-4ce0-bb11-e22368d874ed"
  MF_SA_D3D12_CLEAR_VALUE = "86ba9a39-0526-495d-9ab5-54ec9fad6fc3"
  MF_MSE_CALLBACK = "9063a7c0-42c5-4ffd-a8a8-6fcf9ea3d00c"
  MF_MSE_ACTIVELIST_CALLBACK = "949bda0f-4549-46d5-ad7f-b846e1ab1652"
  MF_MSE_BUFFERLIST_CALLBACK = "42e669b0-d60e-4afb-a85b-d8e5fe6bdab5"
  MF_MSE_VP9_SUPPORT = "92d78429-d88b-4ff0-8322-803efa6e9626"
  MF_MSE_OPUS_SUPPORT = "4d224cc1-8cc4-48a3-a7a7-e4c16ce6388a"
  MF_MEDIA_ENGINE_NEEDKEY_CALLBACK = "7ea80843-b6e4-432c-8ea4-7848ffe4220e"
  MF_MEDIA_ENGINE_CALLBACK = "c60381b8-83a4-41f8-a3d0-de05076849a9"
  MF_MEDIA_ENGINE_DXGI_MANAGER = "065702da-1094-486d-8617-ee7cc4ee4648"
  MF_MEDIA_ENGINE_EXTENSION = "3109fd46-060d-4b62-8dcf-faff811318d2"
  MF_MEDIA_ENGINE_PLAYBACK_HWND = "d988879b-67c9-4d92-baa7-6eadd446039d"
  MF_MEDIA_ENGINE_OPM_HWND = "a0be8ee7-0572-4f2c-a801-2a151bd3e726"
  MF_MEDIA_ENGINE_PLAYBACK_VISUAL = "6debd26f-6ab9-4d7e-b0ee-c61a73ffad15"
  MF_MEDIA_ENGINE_COREWINDOW = "fccae4dc-0b7f-41c2-9f96-4659948acddc"
  MF_MEDIA_ENGINE_VIDEO_OUTPUT_FORMAT = "5066893c-8cf9-42bc-8b8a-472212e52726"
  MF_MEDIA_ENGINE_CONTENT_PROTECTION_FLAGS = "e0350223-5aaf-4d76-a7c3-06de70894db4"
  MF_MEDIA_ENGINE_CONTENT_PROTECTION_MANAGER = "fdd6dfaa-bd85-4af3-9e0f-a01d539d876a"
  MF_MEDIA_ENGINE_AUDIO_ENDPOINT_ROLE = "d2cb93d1-116a-44f2-9385-f7d0fda2fb46"
  MF_MEDIA_ENGINE_AUDIO_CATEGORY = "c8d4c51d-350e-41f2-ba46-faebbb0857f6"
  MF_MEDIA_ENGINE_STREAM_CONTAINS_ALPHA_CHANNEL = "5cbfaf44-d2b2-4cfb-80a7-d429c74c789d"
  MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE = "4e0212e2-e18f-41e1-95e5-c0e7e9235bc3"
  MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE9 = "052c2d39-40c0-4188-ab86-f828273b7522"
  MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE10 = "11a47afd-6589-4124-b312-6158ec517fc3"
  MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE11 = "1cf1315f-ce3f-4035-9391-16142f775189"
  MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE_EDGE = "a6f3e465-3aca-442c-a3f0-ad6ddad839ae"
  MF_MEDIA_ENGINE_COMPATIBILITY_MODE = "3ef26ad4-dc54-45de-b9af-76c8c66bfa8e"
  MF_MEDIA_ENGINE_COMPATIBILITY_MODE_WWA_EDGE = "15b29098-9f01-4e4d-b65a-c06c6c89da2a"
  MF_MEDIA_ENGINE_COMPATIBILITY_MODE_WIN10 = "5b25e089-6ca7-4139-a2cb-fcaab39552a3"
  MF_MEDIA_ENGINE_SOURCE_RESOLVER_CONFIG_STORE = "0ac0c497-b3c4-48c9-9cde-bb8ca2442ca3"
  MF_MEDIA_ENGINE_TRACK_ID = "65bea312-4043-4815-8eab-44dce2ef8f2a"
  MF_MEDIA_ENGINE_TELEMETRY_APPLICATION_ID = "1e7b273b-a7e4-402a-8f51-c48e88a2cabc"
  MF_MEDIA_ENGINE_SYNCHRONOUS_CLOSE = "c3c2e12f-7e0e-4e43-b91c-dc992ccdfa5e"
  MF_MEDIA_ENGINE_MEDIA_PLAYER_MODE = "3ddd8d45-5aa1-4112-82e5-36f6a2197e6e"
  CLSID_MFMediaEngineClassFactory = "b44392da-499b-446b-a4cb-005fead0e6d5"
  MF_MEDIA_ENGINE_TIMEDTEXT = "805ea411-92e0-4e59-9b6e-5c7d7915e64f"
  MF_MEDIA_ENGINE_CONTINUE_ON_CODEC_ERROR = "dbcdb7f9-48e4-4295-b70d-d518234eeb38"
  MF_MEDIA_ENGINE_EME_CALLBACK = "494553a7-a481-4cb7-bec5-380903513731"
  CLSID_MPEG2DLNASink = "fa5fe7c5-6a1d-4b11-b41f-f959d6c76500"
  MF_MP2DLNA_USE_MMCSS = "54f3e2ee-a2a2-497d-9834-973afde521eb"
  MF_MP2DLNA_VIDEO_BIT_RATE = "e88548de-73b4-42d7-9c75-adfa0a2a6e4c"
  MF_MP2DLNA_AUDIO_BIT_RATE = "2d1c070e-2b5f-4ab3-a7e6-8d943ba8d00a"
  MF_MP2DLNA_ENCODE_QUALITY = "b52379d7-1d46-4fb6-a317-a4a5f60959f8"
  MF_MP2DLNA_STATISTICS = "75e488a3-d5ad-4898-85e0-bcce24a722d7"
  CLSID_MFReadWriteClassFactory = "48e2ed0f-98c2-4a37-bed5-166312ddd83f"
  CLSID_MFSourceReader = "1777133c-0881-411b-a577-ad545f0714c4"
  MF_SOURCE_READER_ASYNC_CALLBACK = "1e3dbeac-bb43-4c35-b507-cd644464c965"
  MF_SOURCE_READER_D3D_MANAGER = "ec822da2-e1e9-4b29-a0d8-563c719f5269"
  MF_SOURCE_READER_DISABLE_DXVA = "aa456cfd-3943-4a1e-a77d-1838c0ea2e35"
  MF_SOURCE_READER_MEDIASOURCE_CONFIG = "9085abeb-0354-48f9-abb5-200df838c68e"
  MF_SOURCE_READER_MEDIASOURCE_CHARACTERISTICS = "6d23f5c8-c5d7-4a9b-9971-5d11f8bca880"
  MF_SOURCE_READER_ENABLE_VIDEO_PROCESSING = "fb394f3d-ccf1-42ee-bbb3-f9b845d5681d"
  MF_SOURCE_READER_ENABLE_ADVANCED_VIDEO_PROCESSING = "0f81da2c-b537-4672-a8b2-a681b17307a3"
  MF_SOURCE_READER_DISABLE_CAMERA_PLUGINS = "9d3365dd-058f-4cfb-9f97-b314cc99c8ad"
  MF_SOURCE_READER_DISCONNECT_MEDIASOURCE_ON_SHUTDOWN = "56b67165-219e-456d-a22e-2d3004c7fe56"
  MF_SOURCE_READER_ENABLE_TRANSCODE_ONLY_TRANSFORMS = "dfd4f008-b5fd-4e78-ae44-62a1e67bbe27"
  MF_SOURCE_READER_D3D11_BIND_FLAGS = "33f3197b-f73a-4e14-8d85-0e4c4368788d"
  CLSID_MFSinkWriter = "a3bbfb17-8273-4e52-9e0e-9739dc887990"
  MF_SINK_WRITER_ASYNC_CALLBACK = "48cb183e-7b0b-46f4-822e-5e1d2dda4354"
  MF_SINK_WRITER_DISABLE_THROTTLING = "08b845d8-2b74-4afe-9d53-be16d2d5ae4f"
  MF_SINK_WRITER_D3D_MANAGER = "ec822da2-e1e9-4b29-a0d8-563c719f5269"
  MF_SINK_WRITER_ENCODER_CONFIG = "ad91cd04-a7cc-4ac7-99b6-a57b9a4a7c70"
  MF_READWRITE_DISABLE_CONVERTERS = "98d5b065-1374-4847-8d5d-31520fee7156"
  MF_READWRITE_ENABLE_HARDWARE_TRANSFORMS = "a634a91c-822b-41b9-a494-4de4643612b0"
  MF_READWRITE_MMCSS_CLASS = "39384300-d0eb-40b1-87a0-3318871b5a53"
  MF_READWRITE_MMCSS_PRIORITY = "43ad19ce-f33f-4ba9-a580-e4cd12f2d144"
  MF_READWRITE_MMCSS_CLASS_AUDIO = "430847da-0890-4b0e-938c-054332c547e1"
  MF_READWRITE_MMCSS_PRIORITY_AUDIO = "273db885-2de2-4db2-a6a7-fdb66fb40b61"
  MF_READWRITE_D3D_OPTIONAL = "216479d9-3071-42ca-bb6c-4c22102e1d18"
  MF_MEDIASINK_AUTOFINALIZE_SUPPORTED = "48c131be-135a-41cb-8290-03652509c999"
  MF_MEDIASINK_ENABLE_AUTOFINALIZE = "34014265-cb7e-4cde-ac7c-effd3b3c2530"
  MF_READWRITE_ENABLE_AUTOFINALIZE = "dd7ca129-8cd1-4dc5-9dde-ce168675de61"
  MFP_POSITIONTYPE_100NS = "00000000-0000-0000-0000-000000000000"
  MF_MEDIA_SHARING_ENGINE_DEVICE_NAME = "771e05d1-862f-4299-95ac-ae81fd14f3e7"
  MF_MEDIA_SHARING_ENGINE_DEVICE = "b461c58a-7a08-4b98-99a8-70fd5f3badfd"
  CLSID_MFMediaSharingEngineClassFactory = "f8e307fb-6d45-4ad3-9993-66cd5a529659"
  CLSID_MFImageSharingEngineClassFactory = "b22c3339-87f3-4059-a0c5-037aa9707eaf"
  CLSID_PlayToSourceClassFactory = "da17539a-3dc3-42c1-a749-a183b51f085e"
  GUID_PlayToService = "f6a8ff9d-9e14-41c9-bf0f-120a2b3ce120"
  GUID_NativeDeviceService = "ef71e53c-52f4-43c5-b86a-ad6cb216a61e"
  MF_CONTENTDECRYPTIONMODULE_SERVICE = "15320c45-ff80-484a-9dcb-0df894e69a01"
  MF_VIRTUALCAMERA_CONFIGURATION_APP_PACKAGE_FAMILY_NAME = "658abe51-8044-462e-97ea-e676fd72055f"
  MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_INITIALIZE = "e52c4dff-e46d-4d0b-bc75-ddd4c8723f96"
  MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_START = "b1eeb989-b456-4f4a-ae40-079c28e24af8"
  MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_STOP = "b7fe7a61-fe91-415e-8608-d37dedb1a58b"
  MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_UNINITIALIZE = "a0ebaba7-a422-4e33-8401-b37d2800aa67"
  MF_FRAMESERVER_VCAMEVENT_EXTENDED_PIPELINE_SHUTDOWN = "45a81b31-43f8-4e5d-8ce2-22dce026996d"
  MF_FRAMESERVER_VCAMEVENT_EXTENDED_CUSTOM_EVENT = "6e59489c-47d3-4467-83ef-12d34e871665"
  CLSID_CMpeg4DecMediaObject = LibC::GUID.new(0xf371728a_u32, 0x6052_u16, 0x4d47_u16, StaticArray[0x82_u8, 0x7c_u8, 0xd0_u8, 0x39_u8, 0x33_u8, 0x5d_u8, 0xfe_u8, 0xa_u8])
  CLSID_CMpeg43DecMediaObject = LibC::GUID.new(0xcba9e78b_u32, 0x49a3_u16, 0x49ea_u16, StaticArray[0x93_u8, 0xd4_u8, 0x6b_u8, 0xcb_u8, 0xa8_u8, 0xc4_u8, 0xde_u8, 0x7_u8])
  CLSID_CMpeg4sDecMediaObject = LibC::GUID.new(0x2a11bae2_u32, 0xfe6e_u16, 0x4249_u16, StaticArray[0x86_u8, 0x4b_u8, 0x9e_u8, 0x9e_u8, 0xd6_u8, 0xe8_u8, 0xdb_u8, 0xc2_u8])
  CLSID_CMpeg4sDecMFT = LibC::GUID.new(0x5686a0d9_u32, 0xfe39_u16, 0x409f_u16, StaticArray[0x9d_u8, 0xff_u8, 0x3f_u8, 0xdb_u8, 0xc8_u8, 0x49_u8, 0xf9_u8, 0xf5_u8])
  CLSID_CZuneM4S2DecMediaObject = LibC::GUID.new(0xc56fc25c_u32, 0xfc6_u16, 0x404a_u16, StaticArray[0x95_u8, 0x3_u8, 0xb1_u8, 0xb_u8, 0xf5_u8, 0x1a_u8, 0x8a_u8, 0xb9_u8])
  CLSID_CMpeg4EncMediaObject = LibC::GUID.new(0x24f258d8_u32, 0xc651_u16, 0x4042_u16, StaticArray[0x93_u8, 0xe4_u8, 0xca_u8, 0x65_u8, 0x4a_u8, 0xbb_u8, 0x68_u8, 0x2c_u8])
  CLSID_CMpeg4sEncMediaObject = LibC::GUID.new(0x6ec5a7be_u32, 0xd81e_u16, 0x4f9e_u16, StaticArray[0xad_u8, 0xa3_u8, 0xcd_u8, 0x1b_u8, 0xf2_u8, 0x62_u8, 0xb6_u8, 0xd8_u8])
  CLSID_CMSSCDecMediaObject = LibC::GUID.new(0x7bafb3b1_u32, 0xd8f4_u16, 0x4279_u16, StaticArray[0x92_u8, 0x53_u8, 0x27_u8, 0xda_u8, 0x42_u8, 0x31_u8, 0x8_u8, 0xde_u8])
  CLSID_CMSSCEncMediaObject = LibC::GUID.new(0x8cb9cc06_u32, 0xd139_u16, 0x4ae6_u16, StaticArray[0x8b_u8, 0xb4_u8, 0x41_u8, 0xe6_u8, 0x12_u8, 0xe1_u8, 0x41_u8, 0xd5_u8])
  CLSID_CMSSCEncMediaObject2 = LibC::GUID.new(0xf7ffe0a0_u32, 0xa4f5_u16, 0x44b5_u16, StaticArray[0x94_u8, 0x9e_u8, 0x15_u8, 0xed_u8, 0x2b_u8, 0xc6_u8, 0x6f_u8, 0x9d_u8])
  CLSID_CWMADecMediaObject = LibC::GUID.new(0x2eeb4adf_u32, 0x4578_u16, 0x4d10_u16, StaticArray[0xbc_u8, 0xa7_u8, 0xbb_u8, 0x95_u8, 0x5f_u8, 0x56_u8, 0x32_u8, 0xa_u8])
  CLSID_CWMAEncMediaObject = LibC::GUID.new(0x70f598e9_u32, 0xf4ab_u16, 0x495a_u16, StaticArray[0x99_u8, 0xe2_u8, 0xa7_u8, 0xc4_u8, 0xd3_u8, 0xd8_u8, 0x9a_u8, 0xbf_u8])
  CLSID_CWMATransMediaObject = LibC::GUID.new(0xedcad9cb_u32, 0x3127_u16, 0x40df_u16, StaticArray[0xb5_u8, 0x27_u8, 0x1_u8, 0x52_u8, 0xcc_u8, 0xb3_u8, 0xf6_u8, 0xf5_u8])
  CLSID_CWMSPDecMediaObject = LibC::GUID.new(0x874131cb_u32, 0x4ecc_u16, 0x443b_u16, StaticArray[0x89_u8, 0x48_u8, 0x74_u8, 0x6b_u8, 0x89_u8, 0x59_u8, 0x5d_u8, 0x20_u8])
  CLSID_CWMSPEncMediaObject = LibC::GUID.new(0x67841b03_u32, 0xc689_u16, 0x4188_u16, StaticArray[0xad_u8, 0x3f_u8, 0x4c_u8, 0x9e_u8, 0xbe_u8, 0xec_u8, 0x71_u8, 0xb_u8])
  CLSID_CWMSPEncMediaObject2 = LibC::GUID.new(0x1f1f4e1a_u32, 0x2252_u16, 0x4063_u16, StaticArray[0x84_u8, 0xbb_u8, 0xee_u8, 0xe7_u8, 0x5f_u8, 0x88_u8, 0x56_u8, 0xd5_u8])
  CLSID_CWMTDecMediaObject = LibC::GUID.new(0xf9dbc64e_u32, 0x2dd0_u16, 0x45dd_u16, StaticArray[0x9b_u8, 0x52_u8, 0x66_u8, 0x64_u8, 0x2e_u8, 0xf9_u8, 0x44_u8, 0x31_u8])
  CLSID_CWMTEncMediaObject = LibC::GUID.new(0x60b67652_u32, 0xe46b_u16, 0x4e44_u16, StaticArray[0x86_u8, 0x9_u8, 0xf7_u8, 0x4b_u8, 0xff_u8, 0xdc_u8, 0x8_u8, 0x3c_u8])
  CLSID_CWMVDecMediaObject = LibC::GUID.new(0x82d353df_u32, 0x90bd_u16, 0x4382_u16, StaticArray[0x8b_u8, 0xc2_u8, 0x3f_u8, 0x61_u8, 0x92_u8, 0xb7_u8, 0x6e_u8, 0x34_u8])
  CLSID_CWMVEncMediaObject2 = LibC::GUID.new(0x96b57cdd_u32, 0x8966_u16, 0x410c_u16, StaticArray[0xbb_u8, 0x1f_u8, 0xc9_u8, 0x7e_u8, 0xea_u8, 0x76_u8, 0x5c_u8, 0x4_u8])
  CLSID_CWMVXEncMediaObject = LibC::GUID.new(0x7e320092_u32, 0x596a_u16, 0x41b2_u16, StaticArray[0xbb_u8, 0xeb_u8, 0x17_u8, 0x5d_u8, 0x10_u8, 0x50_u8, 0x4e_u8, 0xb6_u8])
  CLSID_CWMV9EncMediaObject = LibC::GUID.new(0xd23b90d0_u32, 0x144f_u16, 0x46bd_u16, StaticArray[0x84_u8, 0x1d_u8, 0x59_u8, 0xe4_u8, 0xeb_u8, 0x19_u8, 0xdc_u8, 0x59_u8])
  CLSID_CWVC1DecMediaObject = LibC::GUID.new(0xc9bfbccf_u32, 0xe60e_u16, 0x4588_u16, StaticArray[0xa3_u8, 0xdf_u8, 0x5a_u8, 0x3_u8, 0xb1_u8, 0xfd_u8, 0x95_u8, 0x85_u8])
  CLSID_CWVC1EncMediaObject = LibC::GUID.new(0x44653d0d_u32, 0x8cca_u16, 0x41e7_u16, StaticArray[0xba_u8, 0xca_u8, 0x88_u8, 0x43_u8, 0x37_u8, 0xb7_u8, 0x47_u8, 0xac_u8])
  CLSID_CDeColorConvMediaObject = LibC::GUID.new(0x49034c05_u32, 0xf43c_u16, 0x400f_u16, StaticArray[0x84_u8, 0xc1_u8, 0x90_u8, 0xa6_u8, 0x83_u8, 0x19_u8, 0x5a_u8, 0x3a_u8])
  CLSID_CDVDecoderMediaObject = LibC::GUID.new(0xe54709c5_u32, 0x1e17_u16, 0x4c8d_u16, StaticArray[0x94_u8, 0xe7_u8, 0x47_u8, 0x89_u8, 0x40_u8, 0x43_u8, 0x35_u8, 0x84_u8])
  CLSID_CDVEncoderMediaObject = LibC::GUID.new(0xc82ae729_u32, 0xc327_u16, 0x4cce_u16, StaticArray[0x91_u8, 0x4d_u8, 0x81_u8, 0x71_u8, 0xfe_u8, 0xfe_u8, 0xbe_u8, 0xfb_u8])
  CLSID_CMpeg2DecMediaObject = LibC::GUID.new(0x863d66cd_u32, 0xcdce_u16, 0x4617_u16, StaticArray[0xb4_u8, 0x7f_u8, 0xc8_u8, 0x92_u8, 0x9c_u8, 0xfc_u8, 0x28_u8, 0xa6_u8])
  CLSID_CPK_DS_MPEG2Decoder = LibC::GUID.new(0x9910c5cd_u32, 0x95c9_u16, 0x4e06_u16, StaticArray[0x86_u8, 0x5a_u8, 0xef_u8, 0xa1_u8, 0xc8_u8, 0x1_u8, 0x6b_u8, 0xf4_u8])
  CLSID_CAC3DecMediaObject = LibC::GUID.new(0x3d7c802_u32, 0xecfa_u16, 0x47d9_u16, StaticArray[0xb2_u8, 0x68_u8, 0x5f_u8, 0xb3_u8, 0xe3_u8, 0x10_u8, 0xde_u8, 0xe4_u8])
  CLSID_CPK_DS_AC3Decoder = LibC::GUID.new(0x6c9c69d6_u32, 0xffc_u16, 0x4481_u16, StaticArray[0xaf_u8, 0xdb_u8, 0xcd_u8, 0xf1_u8, 0xc7_u8, 0x9c_u8, 0x6f_u8, 0x3e_u8])
  CLSID_CMP3DecMediaObject = LibC::GUID.new(0xbbeea841_u32, 0xa63_u16, 0x4f52_u16, StaticArray[0xa7_u8, 0xab_u8, 0xa9_u8, 0xb3_u8, 0xa8_u8, 0x4e_u8, 0xd3_u8, 0x8a_u8])
  CLSID_CResamplerMediaObject = LibC::GUID.new(0xf447b69e_u32, 0x1884_u16, 0x4a7e_u16, StaticArray[0x80_u8, 0x55_u8, 0x34_u8, 0x6f_u8, 0x74_u8, 0xd6_u8, 0xed_u8, 0xb3_u8])
  CLSID_CResizerMediaObject = LibC::GUID.new(0xd3ec8b8b_u32, 0x7728_u16, 0x4fd8_u16, StaticArray[0x9f_u8, 0xe0_u8, 0x7b_u8, 0x67_u8, 0xd1_u8, 0x9f_u8, 0x73_u8, 0xa3_u8])
  CLSID_CInterlaceMediaObject = LibC::GUID.new(0xb5a89c80_u32, 0x4901_u16, 0x407b_u16, StaticArray[0x9a_u8, 0xbc_u8, 0x90_u8, 0xd9_u8, 0xa6_u8, 0x44_u8, 0xbb_u8, 0x46_u8])
  CLSID_CWMAudioLFXAPO = LibC::GUID.new(0x62dc1a93_u32, 0xae24_u16, 0x464c_u16, StaticArray[0xa4_u8, 0x3e_u8, 0x45_u8, 0x2f_u8, 0x82_u8, 0x4c_u8, 0x42_u8, 0x50_u8])
  CLSID_CWMAudioGFXAPO = LibC::GUID.new(0x637c490d_u32, 0xeee3_u16, 0x4c0a_u16, StaticArray[0x97_u8, 0x3f_u8, 0x37_u8, 0x19_u8, 0x58_u8, 0x80_u8, 0x2d_u8, 0xa2_u8])
  CLSID_CWMAudioCAPXLFXAPO = LibC::GUID.new(0xc9453e73_u32, 0x8c5c_u16, 0x4463_u16, StaticArray[0x99_u8, 0x84_u8, 0xaf_u8, 0x8b_u8, 0xab_u8, 0x2f_u8, 0x54_u8, 0x47_u8])
  CLSID_CWMAudioCAPXGFXAPO = LibC::GUID.new(0x13ab3ebd_u32, 0x137e_u16, 0x4903_u16, StaticArray[0x9d_u8, 0x89_u8, 0x60_u8, 0xbe_u8, 0x82_u8, 0x77_u8, 0xfd_u8, 0x17_u8])
  CLSID_CWMAudioSpdTxDMO = LibC::GUID.new(0x5210f8e4_u32, 0xb0bb_u16, 0x47c3_u16, StaticArray[0xa8_u8, 0xd9_u8, 0x7b_u8, 0x22_u8, 0x82_u8, 0xcc_u8, 0x79_u8, 0xed_u8])
  CLSID_CWMAudioAEC = LibC::GUID.new(0x745057c7_u32, 0xf353_u16, 0x4f2d_u16, StaticArray[0xa7_u8, 0xee_u8, 0x58_u8, 0x43_u8, 0x44_u8, 0x77_u8, 0x73_u8, 0xe_u8])
  CLSID_CClusterDetectorDmo = LibC::GUID.new(0x36e820c4_u32, 0x165a_u16, 0x4521_u16, StaticArray[0x86_u8, 0x3c_u8, 0x61_u8, 0x9e_u8, 0x11_u8, 0x60_u8, 0xd4_u8, 0xd4_u8])
  CLSID_CColorControlDmo = LibC::GUID.new(0x798059f0_u32, 0x89ca_u16, 0x4160_u16, StaticArray[0xb3_u8, 0x25_u8, 0xae_u8, 0xb4_u8, 0x8e_u8, 0xfe_u8, 0x4f_u8, 0x9a_u8])
  CLSID_CColorConvertDMO = LibC::GUID.new(0x98230571_u32, 0x87_u16, 0x4204_u16, StaticArray[0xb0_u8, 0x20_u8, 0x32_u8, 0x82_u8, 0x53_u8, 0x8e_u8, 0x57_u8, 0xd3_u8])
  CLSID_CColorLegalizerDmo = LibC::GUID.new(0xfdfaa753_u32, 0xe48e_u16, 0x4e33_u16, StaticArray[0x9c_u8, 0x74_u8, 0x98_u8, 0xa2_u8, 0x7f_u8, 0xc6_u8, 0x72_u8, 0x6a_u8])
  CLSID_CFrameInterpDMO = LibC::GUID.new(0xa7cfe1b_u32, 0x6ab5_u16, 0x4334_u16, StaticArray[0x9e_u8, 0xd8_u8, 0x3f_u8, 0x97_u8, 0xcb_u8, 0x37_u8, 0xda_u8, 0xa1_u8])
  CLSID_CFrameRateConvertDmo = LibC::GUID.new(0x1f36ce2_u32, 0x907_u16, 0x4d8b_u16, StaticArray[0x97_u8, 0x9d_u8, 0xf1_u8, 0x51_u8, 0xbe_u8, 0x91_u8, 0xc8_u8, 0x83_u8])
  CLSID_CResizerDMO = LibC::GUID.new(0x1ea1ea14_u32, 0x48f4_u16, 0x4054_u16, StaticArray[0xad_u8, 0x1a_u8, 0xe8_u8, 0xae_u8, 0xe1_u8, 0xa_u8, 0xc8_u8, 0x5_u8])
  CLSID_CShotDetectorDmo = LibC::GUID.new(0x56aefacd_u32, 0x110c_u16, 0x4397_u16, StaticArray[0x92_u8, 0x92_u8, 0xb0_u8, 0xa0_u8, 0xc6_u8, 0x1b_u8, 0x67_u8, 0x50_u8])
  CLSID_CSmpteTransformsDmo = LibC::GUID.new(0xbde6388b_u32, 0xda25_u16, 0x485d_u16, StaticArray[0xba_u8, 0x7f_u8, 0xfa_u8, 0xbc_u8, 0x28_u8, 0xb2_u8, 0x3_u8, 0x18_u8])
  CLSID_CThumbnailGeneratorDmo = LibC::GUID.new(0x559c6bad_u32, 0x1ea8_u16, 0x4963_u16, StaticArray[0xa0_u8, 0x87_u8, 0x8a_u8, 0x68_u8, 0x10_u8, 0xf9_u8, 0x21_u8, 0x8b_u8])
  CLSID_CTocGeneratorDmo = LibC::GUID.new(0x4dda1941_u32, 0x77a0_u16, 0x4fb1_u16, StaticArray[0xa5_u8, 0x18_u8, 0xe2_u8, 0x18_u8, 0x50_u8, 0x41_u8, 0xd7_u8, 0xc_u8])
  CLSID_CMPEGAACDecMediaObject = LibC::GUID.new(0x8dde1772_u32, 0xedad_u16, 0x41c3_u16, StaticArray[0xb4_u8, 0xbe_u8, 0x1f_u8, 0x30_u8, 0xfb_u8, 0x4e_u8, 0xe0_u8, 0xd6_u8])
  CLSID_CNokiaAACDecMediaObject = LibC::GUID.new(0x3cb2bde4_u32, 0x4e29_u16, 0x4c44_u16, StaticArray[0xa7_u8, 0x3e_u8, 0x2d_u8, 0x7c_u8, 0x2c_u8, 0x46_u8, 0xd6_u8, 0xec_u8])
  CLSID_CVodafoneAACDecMediaObject = LibC::GUID.new(0x7f36f942_u32, 0xdcf3_u16, 0x4d82_u16, StaticArray[0x92_u8, 0x89_u8, 0x5b_u8, 0x18_u8, 0x20_u8, 0x27_u8, 0x8f_u8, 0x7c_u8])
  CLSID_CZuneAACCCDecMediaObject = LibC::GUID.new(0xa74e98f2_u32, 0x52d6_u16, 0x4b4e_u16, StaticArray[0x88_u8, 0x5b_u8, 0xe0_u8, 0xa6_u8, 0xca_u8, 0x4f_u8, 0x18_u8, 0x7a_u8])
  CLSID_CNokiaAACCCDecMediaObject = LibC::GUID.new(0xeabf7a6f_u32, 0xccba_u16, 0x4d60_u16, StaticArray[0x86_u8, 0x20_u8, 0xb1_u8, 0x52_u8, 0xcc_u8, 0x97_u8, 0x72_u8, 0x63_u8])
  CLSID_CVodafoneAACCCDecMediaObject = LibC::GUID.new(0x7e76bf7f_u32, 0xc993_u16, 0x4e26_u16, StaticArray[0x8f_u8, 0xab_u8, 0x47_u8, 0xa_u8, 0x70_u8, 0xc0_u8, 0xd5_u8, 0x9c_u8])
  CLSID_CMPEG2EncoderDS = LibC::GUID.new(0x5f5aff4a_u32, 0x2f7f_u16, 0x4279_u16, StaticArray[0x88_u8, 0xc2_u8, 0xcd_u8, 0x88_u8, 0xeb_u8, 0x39_u8, 0xd1_u8, 0x44_u8])
  CLSID_CMPEG2EncoderVideoDS = LibC::GUID.new(0x42150cd9_u32, 0xca9a_u16, 0x4ea5_u16, StaticArray[0x99_u8, 0x39_u8, 0x30_u8, 0xee_u8, 0x3_u8, 0x7f_u8, 0x6e_u8, 0x74_u8])
  CLSID_CMPEG2EncoderAudioDS = LibC::GUID.new(0xacd453bc_u32, 0xc58a_u16, 0x44d1_u16, StaticArray[0xbb_u8, 0xf5_u8, 0xbf_u8, 0xb3_u8, 0x25_u8, 0xbe_u8, 0x2d_u8, 0x78_u8])
  CLSID_CMPEG2AudDecoderDS = LibC::GUID.new(0xe1f1a0b8_u32, 0xbeee_u16, 0x490d_u16, StaticArray[0xba_u8, 0x7c_u8, 0x6_u8, 0x6c_u8, 0x40_u8, 0xb5_u8, 0xe2_u8, 0xb9_u8])
  CLSID_CMPEG2VidDecoderDS = LibC::GUID.new(0x212690fb_u32, 0x83e5_u16, 0x4526_u16, StaticArray[0x8f_u8, 0xd7_u8, 0x74_u8, 0x47_u8, 0x8b_u8, 0x79_u8, 0x39_u8, 0xcd_u8])
  CLSID_CDTVAudDecoderDS = LibC::GUID.new(0x8e269032_u32, 0xfe03_u16, 0x4753_u16, StaticArray[0x9b_u8, 0x17_u8, 0x18_u8, 0x25_u8, 0x3c_u8, 0x21_u8, 0x72_u8, 0x2e_u8])
  CLSID_CDTVVidDecoderDS = LibC::GUID.new(0x64777dc8_u32, 0x4e24_u16, 0x4beb_u16, StaticArray[0x9d_u8, 0x19_u8, 0x60_u8, 0xa3_u8, 0x5b_u8, 0xe1_u8, 0xda_u8, 0xaf_u8])
  CLSID_CMSAC3Enc = LibC::GUID.new(0xc6b400e2_u32, 0x20a7_u16, 0x4e58_u16, StaticArray[0xa2_u8, 0xfe_u8, 0x24_u8, 0x61_u8, 0x96_u8, 0x82_u8, 0xce_u8, 0x6c_u8])
  CLSID_CMSH264DecoderMFT = LibC::GUID.new(0x62ce7e72_u32, 0x4c71_u16, 0x4d20_u16, StaticArray[0xb1_u8, 0x5d_u8, 0x45_u8, 0x28_u8, 0x31_u8, 0xa8_u8, 0x7d_u8, 0x9d_u8])
  CLSID_CMSH263EncoderMFT = LibC::GUID.new(0xbc47fcfe_u32, 0x98a0_u16, 0x4f27_u16, StaticArray[0xbb_u8, 0x7_u8, 0x69_u8, 0x8a_u8, 0xf2_u8, 0x4f_u8, 0x2b_u8, 0x38_u8])
  CLSID_CMSH264EncoderMFT = LibC::GUID.new(0x6ca50344_u32, 0x51a_u16, 0x4ded_u16, StaticArray[0x97_u8, 0x79_u8, 0xa4_u8, 0x33_u8, 0x5_u8, 0x16_u8, 0x5e_u8, 0x35_u8])
  CLSID_CMSH265EncoderMFT = LibC::GUID.new(0xf2f84074_u32, 0x8bca_u16, 0x40bd_u16, StaticArray[0x91_u8, 0x59_u8, 0xe8_u8, 0x80_u8, 0xf6_u8, 0x73_u8, 0xdd_u8, 0x3b_u8])
  CLSID_CMSVPXEncoderMFT = LibC::GUID.new(0xaeb6c755_u32, 0x2546_u16, 0x4881_u16, StaticArray[0x82_u8, 0xcc_u8, 0xe1_u8, 0x5a_u8, 0xe5_u8, 0xeb_u8, 0xff_u8, 0x3d_u8])
  CLSID_CMSH264RemuxMFT = LibC::GUID.new(0x5a47ebb_u32, 0x8bf0_u16, 0x4cbf_u16, StaticArray[0xad_u8, 0x2f_u8, 0x3b_u8, 0x71_u8, 0xd7_u8, 0x58_u8, 0x66_u8, 0xf5_u8])
  CLSID_CMSAACDecMFT = LibC::GUID.new(0x32d186a7_u32, 0x218f_u16, 0x4c75_u16, StaticArray[0x88_u8, 0x76_u8, 0xdd_u8, 0x77_u8, 0x27_u8, 0x3a_u8, 0x89_u8, 0x99_u8])
  CLSID_AACMFTEncoder = LibC::GUID.new(0x93af0c51_u32, 0x2275_u16, 0x45d2_u16, StaticArray[0xa3_u8, 0x5b_u8, 0xf2_u8, 0xba_u8, 0x21_u8, 0xca_u8, 0xed_u8, 0x0_u8])
  CLSID_CMSDDPlusDecMFT = LibC::GUID.new(0x177c0afe_u32, 0x900b_u16, 0x48d4_u16, StaticArray[0x9e_u8, 0x4c_u8, 0x57_u8, 0xad_u8, 0xd2_u8, 0x50_u8, 0xb3_u8, 0xd4_u8])
  CLSID_CMPEG2VideoEncoderMFT = LibC::GUID.new(0xe6335f02_u32, 0x80b7_u16, 0x4dc4_u16, StaticArray[0xad_u8, 0xfa_u8, 0xdf_u8, 0xe7_u8, 0x21_u8, 0xd_u8, 0x20_u8, 0xd5_u8])
  CLSID_CMPEG2AudioEncoderMFT = LibC::GUID.new(0x46a4dd5c_u32, 0x73f8_u16, 0x4304_u16, StaticArray[0x94_u8, 0xdf_u8, 0x30_u8, 0x8f_u8, 0x76_u8, 0x9_u8, 0x74_u8, 0xf4_u8])
  CLSID_CMSMPEGDecoderMFT = LibC::GUID.new(0x2d709e52_u32, 0x123f_u16, 0x49b5_u16, StaticArray[0x9c_u8, 0xbc_u8, 0x9a_u8, 0xf5_u8, 0xcd_u8, 0xe2_u8, 0x8f_u8, 0xb9_u8])
  CLSID_CMSMPEGAudDecMFT = LibC::GUID.new(0x70707b39_u32, 0xb2ca_u16, 0x4015_u16, StaticArray[0xab_u8, 0xea_u8, 0xf8_u8, 0x44_u8, 0x7d_u8, 0x22_u8, 0xd8_u8, 0x8b_u8])
  CLSID_CMSDolbyDigitalEncMFT = LibC::GUID.new(0xac3315c9_u32, 0xf481_u16, 0x45d7_u16, StaticArray[0x82_u8, 0x6c_u8, 0xb_u8, 0x40_u8, 0x6c_u8, 0x1f_u8, 0x64_u8, 0xb8_u8])
  CLSID_MP3ACMCodecWrapper = LibC::GUID.new(0x11103421_u32, 0x354c_u16, 0x4cca_u16, StaticArray[0xa7_u8, 0xa3_u8, 0x1a_u8, 0xff_u8, 0x9a_u8, 0x5b_u8, 0x67_u8, 0x1_u8])
  CLSID_ALawCodecWrapper = LibC::GUID.new(0x36cb6e0c_u32, 0x78c1_u16, 0x42b2_u16, StaticArray[0x99_u8, 0x43_u8, 0x84_u8, 0x62_u8, 0x62_u8, 0xf3_u8, 0x17_u8, 0x86_u8])
  CLSID_MULawCodecWrapper = LibC::GUID.new(0x92b66080_u32, 0x5e2d_u16, 0x449e_u16, StaticArray[0x90_u8, 0xc4_u8, 0xc4_u8, 0x1f_u8, 0x26_u8, 0x8e_u8, 0x55_u8, 0x14_u8])
  CLSID_CMSVideoDSPMFT = LibC::GUID.new(0x51571744_u32, 0x7fe4_u16, 0x4ff2_u16, StaticArray[0xa4_u8, 0x98_u8, 0x2d_u8, 0xc3_u8, 0x4f_u8, 0xf7_u8, 0x4f_u8, 0x1b_u8])
  CLSID_VorbisDecoderMFT = LibC::GUID.new(0x1a198ef2_u32, 0x60e5_u16, 0x4ea8_u16, StaticArray[0x90_u8, 0xd8_u8, 0xda_u8, 0x1f_u8, 0x28_u8, 0x32_u8, 0xc2_u8, 0x88_u8])
  CLSID_CMSFLACDecMFT = LibC::GUID.new(0x6b0b3e6b_u32, 0xa2c5_u16, 0x4514_u16, StaticArray[0x80_u8, 0x55_u8, 0xaf_u8, 0xe8_u8, 0xa9_u8, 0x52_u8, 0x42_u8, 0xd9_u8])
  CLSID_CMSFLACEncMFT = LibC::GUID.new(0x128509e9_u32, 0xc44e_u16, 0x45dc_u16, StaticArray[0x95_u8, 0xe9_u8, 0xc2_u8, 0x55_u8, 0xb8_u8, 0xf4_u8, 0x66_u8, 0xa6_u8])
  CLSID_MFFLACBytestreamHandler = LibC::GUID.new(0xe41cfb8_u32, 0x506_u16, 0x40f4_u16, StaticArray[0xa5_u8, 0x16_u8, 0x77_u8, 0xcc_u8, 0x23_u8, 0x64_u8, 0x2d_u8, 0x91_u8])
  CLSID_MFFLACSinkClassFactory = LibC::GUID.new(0x7d39c56f_u32, 0x6075_u16, 0x47c9_u16, StaticArray[0x9b_u8, 0xae_u8, 0x8c_u8, 0xf9_u8, 0xe5_u8, 0x31_u8, 0xb5_u8, 0xf5_u8])
  CLSID_CMSALACDecMFT = LibC::GUID.new(0xc0cd7d12_u32, 0x31fc_u16, 0x4bbc_u16, StaticArray[0xb3_u8, 0x63_u8, 0x73_u8, 0x22_u8, 0xee_u8, 0x3e_u8, 0x18_u8, 0x79_u8])
  CLSID_CMSALACEncMFT = LibC::GUID.new(0x9ab6a28c_u32, 0x748e_u16, 0x4b6a_u16, StaticArray[0xbf_u8, 0xff_u8, 0xcc_u8, 0x44_u8, 0x3b_u8, 0x8e_u8, 0x8f_u8, 0xb4_u8])
  CLSID_CMSOpusDecMFT = LibC::GUID.new(0x63e17c10_u32, 0x2d43_u16, 0x4c42_u16, StaticArray[0x8f_u8, 0xe3_u8, 0x8d_u8, 0x8b_u8, 0x63_u8, 0xe4_u8, 0x6a_u8, 0x6a_u8])
  CLSID_MSAMRNBDecoder = LibC::GUID.new(0x265011ae_u32, 0x5481_u16, 0x4f77_u16, StaticArray[0xa2_u8, 0x95_u8, 0xab_u8, 0xb6_u8, 0xff_u8, 0xe8_u8, 0xd6_u8, 0x3e_u8])
  CLSID_MSAMRNBEncoder = LibC::GUID.new(0x2fae8afe_u32, 0x4a3_u16, 0x423a_u16, StaticArray[0xa8_u8, 0x14_u8, 0x85_u8, 0xdb_u8, 0x45_u8, 0x47_u8, 0x12_u8, 0xb0_u8])
  CLSID_MFAMRNBByteStreamHandler = LibC::GUID.new(0xefe6208a_u32, 0xa2c_u16, 0x49fa_u16, StaticArray[0x8a_u8, 0x1_u8, 0x37_u8, 0x68_u8, 0xb5_u8, 0x59_u8, 0xb6_u8, 0xda_u8])
  CLSID_MFAMRNBSinkClassFactory = LibC::GUID.new(0xb0271158_u32, 0x70d2_u16, 0x4c5b_u16, StaticArray[0x9f_u8, 0x94_u8, 0x76_u8, 0xf5_u8, 0x49_u8, 0xd9_u8, 0xf_u8, 0xdf_u8])
  CLSID_CODECAPI_AVEncCommonFormatConstraint = LibC::GUID.new(0x57cbb9b8_u32, 0x116f_u16, 0x4951_u16, StaticArray[0xb4_u8, 0xc_u8, 0xc2_u8, 0xa0_u8, 0x35_u8, 0xed_u8, 0x8f_u8, 0x17_u8])
  CLSID_CODECAPI_GUID_AVEncCommonFormatUnSpecified = LibC::GUID.new(0xaf46a35a_u32, 0x6024_u16, 0x4525_u16, StaticArray[0xa4_u8, 0x8a_u8, 0x9_u8, 0x4b_u8, 0x97_u8, 0xf5_u8, 0xb3_u8, 0xc2_u8])
  CLSID_CODECAPI_GUID_AVEncCommonFormatDVD_V = LibC::GUID.new(0xcc9598c4_u32, 0xe7fe_u16, 0x451d_u16, StaticArray[0xb1_u8, 0xca_u8, 0x76_u8, 0x1b_u8, 0xc8_u8, 0x40_u8, 0xb7_u8, 0xf3_u8])
  CLSID_CODECAPI_GUID_AVEncCommonFormatDVD_DashVR = LibC::GUID.new(0xe55199d6_u32, 0x44c_u16, 0x4dae_u16, StaticArray[0xa4_u8, 0x88_u8, 0x53_u8, 0x1e_u8, 0xd3_u8, 0x6_u8, 0x23_u8, 0x5b_u8])
  CLSID_CODECAPI_GUID_AVEncCommonFormatDVD_PlusVR = LibC::GUID.new(0xe74c6f2e_u32, 0xec37_u16, 0x478d_u16, StaticArray[0x9a_u8, 0xf4_u8, 0xa5_u8, 0xe1_u8, 0x35_u8, 0xb6_u8, 0x27_u8, 0x1c_u8])
  CLSID_CODECAPI_GUID_AVEncCommonFormatVCD = LibC::GUID.new(0x95035bf7_u32, 0x9d90_u16, 0x40ff_u16, StaticArray[0xad_u8, 0x5c_u8, 0x5c_u8, 0xf8_u8, 0xcf_u8, 0x71_u8, 0xca_u8, 0x1d_u8])
  CLSID_CODECAPI_GUID_AVEncCommonFormatSVCD = LibC::GUID.new(0x51d85818_u32, 0x8220_u16, 0x448c_u16, StaticArray[0x80_u8, 0x66_u8, 0xd6_u8, 0x9b_u8, 0xed_u8, 0x16_u8, 0xc9_u8, 0xad_u8])
  CLSID_CODECAPI_GUID_AVEncCommonFormatATSC = LibC::GUID.new(0x8d7b897c_u32, 0xa019_u16, 0x4670_u16, StaticArray[0xaa_u8, 0x76_u8, 0x2e_u8, 0xdc_u8, 0xac_u8, 0x7a_u8, 0xc2_u8, 0x96_u8])
  CLSID_CODECAPI_GUID_AVEncCommonFormatDVB = LibC::GUID.new(0x71830d8f_u32, 0x6c33_u16, 0x430d_u16, StaticArray[0x84_u8, 0x4b_u8, 0xc2_u8, 0x70_u8, 0x5b_u8, 0xaa_u8, 0xe6_u8, 0xdb_u8])
  CLSID_CODECAPI_GUID_AVEncCommonFormatMP3 = LibC::GUID.new(0x349733cd_u32, 0xeb08_u16, 0x4dc2_u16, StaticArray[0x81_u8, 0x97_u8, 0xe4_u8, 0x98_u8, 0x35_u8, 0xef_u8, 0x82_u8, 0x8b_u8])
  CLSID_CODECAPI_GUID_AVEncCommonFormatHighMAT = LibC::GUID.new(0x1eabe760_u32, 0xfb2b_u16, 0x4928_u16, StaticArray[0x90_u8, 0xd1_u8, 0x78_u8, 0xdb_u8, 0x88_u8, 0xee_u8, 0xe8_u8, 0x89_u8])
  CLSID_CODECAPI_GUID_AVEncCommonFormatHighMPV = LibC::GUID.new(0xa2d25db8_u32, 0xb8f9_u16, 0x42c2_u16, StaticArray[0x8b_u8, 0xc7_u8, 0xb_u8, 0x93_u8, 0xcf_u8, 0x60_u8, 0x47_u8, 0x88_u8])
  CLSID_CODECAPI_AVEncCodecType = LibC::GUID.new(0x8af4ac1_u32, 0xf3f2_u16, 0x4c74_u16, StaticArray[0x9d_u8, 0xcf_u8, 0x37_u8, 0xf2_u8, 0xec_u8, 0x79_u8, 0xf8_u8, 0x26_u8])
  CLSID_CODECAPI_GUID_AVEncMPEG1Video = LibC::GUID.new(0xc8dafefe_u32, 0xda1e_u16, 0x4774_u16, StaticArray[0xb2_u8, 0x7d_u8, 0x11_u8, 0x83_u8, 0xc_u8, 0x16_u8, 0xb1_u8, 0xfe_u8])
  CLSID_CODECAPI_GUID_AVEncMPEG2Video = LibC::GUID.new(0x46dc19a_u32, 0x6677_u16, 0x4aaa_u16, StaticArray[0xa3_u8, 0x1d_u8, 0xc1_u8, 0xab_u8, 0x71_u8, 0x6f_u8, 0x45_u8, 0x60_u8])
  CLSID_CODECAPI_GUID_AVEncMPEG1Audio = LibC::GUID.new(0xd4dd1362_u32, 0xcd4a_u16, 0x4cd6_u16, StaticArray[0x81_u8, 0x38_u8, 0xb9_u8, 0x4d_u8, 0xb4_u8, 0x54_u8, 0x2b_u8, 0x4_u8])
  CLSID_CODECAPI_GUID_AVEncMPEG2Audio = LibC::GUID.new(0xee4cbb1f_u32, 0x9c3f_u16, 0x4770_u16, StaticArray[0x92_u8, 0xb5_u8, 0xfc_u8, 0xb7_u8, 0xc2_u8, 0xa8_u8, 0xd3_u8, 0x81_u8])
  CLSID_CODECAPI_GUID_AVEncWMV = LibC::GUID.new(0x4e0fef9b_u32, 0x1d43_u16, 0x41bd_u16, StaticArray[0xb8_u8, 0xbd_u8, 0x4d_u8, 0x7b_u8, 0xf7_u8, 0x45_u8, 0x7a_u8, 0x2a_u8])
  CLSID_CODECAPI_GUID_AVEndMPEG4Video = LibC::GUID.new(0xdd37b12a_u32, 0x9503_u16, 0x4f8b_u16, StaticArray[0xb8_u8, 0xd0_u8, 0x32_u8, 0x4a_u8, 0x0_u8, 0xc0_u8, 0xa1_u8, 0xcf_u8])
  CLSID_CODECAPI_GUID_AVEncH264Video = LibC::GUID.new(0x95044eab_u32, 0x31b3_u16, 0x47de_u16, StaticArray[0x8e_u8, 0x75_u8, 0x38_u8, 0xa4_u8, 0x2b_u8, 0xb0_u8, 0x3e_u8, 0x28_u8])
  CLSID_CODECAPI_GUID_AVEncDV = LibC::GUID.new(0x9b769c7_u32, 0x3329_u16, 0x44fb_u16, StaticArray[0x89_u8, 0x54_u8, 0xfa_u8, 0x30_u8, 0x93_u8, 0x7d_u8, 0x3d_u8, 0x5a_u8])
  CLSID_CODECAPI_GUID_AVEncWMAPro = LibC::GUID.new(0x1955f90c_u32, 0x33f7_u16, 0x4a68_u16, StaticArray[0xab_u8, 0x81_u8, 0x53_u8, 0xf5_u8, 0x65_u8, 0x71_u8, 0x25_u8, 0xc4_u8])
  CLSID_CODECAPI_GUID_AVEncWMALossless = LibC::GUID.new(0x55ca7265_u32, 0x23d8_u16, 0x4761_u16, StaticArray[0x90_u8, 0x31_u8, 0xb7_u8, 0x4f_u8, 0xbe_u8, 0x12_u8, 0xf4_u8, 0xc1_u8])
  CLSID_CODECAPI_GUID_AVEncWMAVoice = LibC::GUID.new(0x13ed18cb_u32, 0x50e8_u16, 0x4276_u16, StaticArray[0xa2_u8, 0x88_u8, 0xa6_u8, 0xaa_u8, 0x22_u8, 0x83_u8, 0x82_u8, 0xd9_u8])
  CLSID_CODECAPI_GUID_AVEncDolbyDigitalPro = LibC::GUID.new(0xf5be76cc_u32, 0xff8_u16, 0x40eb_u16, StaticArray[0x9c_u8, 0xb1_u8, 0xbb_u8, 0xa9_u8, 0x40_u8, 0x4_u8, 0xd4_u8, 0x4f_u8])
  CLSID_CODECAPI_GUID_AVEncDolbyDigitalConsumer = LibC::GUID.new(0xc1a7bf6c_u32, 0x59_u16, 0x4bfa_u16, StaticArray[0x94_u8, 0xef_u8, 0xef_u8, 0x74_u8, 0x7a_u8, 0x76_u8, 0x8d_u8, 0x52_u8])
  CLSID_CODECAPI_GUID_AVEncDolbyDigitalPlus = LibC::GUID.new(0x698d1b80_u32, 0xf7dd_u16, 0x415c_u16, StaticArray[0x97_u8, 0x1c_u8, 0x42_u8, 0x49_u8, 0x2a_u8, 0x20_u8, 0x56_u8, 0xc6_u8])
  CLSID_CODECAPI_GUID_AVEncDTSHD = LibC::GUID.new(0x2052e630_u32, 0x469d_u16, 0x4bfb_u16, StaticArray[0x80_u8, 0xca_u8, 0x1d_u8, 0x65_u8, 0x6e_u8, 0x7e_u8, 0x91_u8, 0x8f_u8])
  CLSID_CODECAPI_GUID_AVEncDTS = LibC::GUID.new(0x45fbcaa2_u32, 0x5e6e_u16, 0x4ab0_u16, StaticArray[0x88_u8, 0x93_u8, 0x59_u8, 0x3_u8, 0xbe_u8, 0xe9_u8, 0x3a_u8, 0xcf_u8])
  CLSID_CODECAPI_GUID_AVEncMLP = LibC::GUID.new(0x5f73e29_u32, 0xf0d1_u16, 0x431e_u16, StaticArray[0xa4_u8, 0x1c_u8, 0xa4_u8, 0x74_u8, 0x32_u8, 0xec_u8, 0x5a_u8, 0x66_u8])
  CLSID_CODECAPI_GUID_AVEncPCM = LibC::GUID.new(0x844be7f4_u32, 0x26cf_u16, 0x4779_u16, StaticArray[0xb3_u8, 0x86_u8, 0xcc_u8, 0x5_u8, 0xd1_u8, 0x87_u8, 0x99_u8, 0xc_u8])
  CLSID_CODECAPI_GUID_AVEncSDDS = LibC::GUID.new(0x1dc1b82f_u32, 0x11c8_u16, 0x4c71_u16, StaticArray[0xb7_u8, 0xb6_u8, 0xee_u8, 0x3e_u8, 0xb9_u8, 0xbc_u8, 0x2b_u8, 0x94_u8])
  CLSID_CODECAPI_AVEncCommonRateControlMode = LibC::GUID.new(0x1c0608e9_u32, 0x370c_u16, 0x4710_u16, StaticArray[0x8a_u8, 0x58_u8, 0xcb_u8, 0x61_u8, 0x81_u8, 0xc4_u8, 0x24_u8, 0x23_u8])
  CLSID_CODECAPI_AVEncCommonLowLatency = LibC::GUID.new(0x9d3ecd55_u32, 0x89e8_u16, 0x490a_u16, StaticArray[0x97_u8, 0xa_u8, 0xc_u8, 0x95_u8, 0x48_u8, 0xd5_u8, 0xa5_u8, 0x6e_u8])
  CLSID_CODECAPI_AVEncCommonMultipassMode = LibC::GUID.new(0x22533d4c_u32, 0x47e1_u16, 0x41b5_u16, StaticArray[0x93_u8, 0x52_u8, 0xa2_u8, 0xb7_u8, 0x78_u8, 0xe_u8, 0x7a_u8, 0xc4_u8])
  CLSID_CODECAPI_AVEncCommonPassStart = LibC::GUID.new(0x6a67739f_u32, 0x4eb5_u16, 0x4385_u16, StaticArray[0x99_u8, 0x28_u8, 0xf2_u8, 0x76_u8, 0xa9_u8, 0x39_u8, 0xef_u8, 0x95_u8])
  CLSID_CODECAPI_AVEncCommonPassEnd = LibC::GUID.new(0xe3d01bc_u32, 0xc85c_u16, 0x467d_u16, StaticArray[0x8b_u8, 0x60_u8, 0xc4_u8, 0x10_u8, 0x12_u8, 0xee_u8, 0x3b_u8, 0xf6_u8])
  CLSID_CODECAPI_AVEncCommonRealTime = LibC::GUID.new(0x143a0ff6_u32, 0xa131_u16, 0x43da_u16, StaticArray[0xb8_u8, 0x1e_u8, 0x98_u8, 0xfb_u8, 0xb8_u8, 0xec_u8, 0x37_u8, 0x8e_u8])
  CLSID_CODECAPI_AVEncCommonQuality = LibC::GUID.new(0xfcbf57a3_u32, 0x7ea5_u16, 0x4b0c_u16, StaticArray[0x96_u8, 0x44_u8, 0x69_u8, 0xb4_u8, 0xc_u8, 0x39_u8, 0xc3_u8, 0x91_u8])
  CLSID_CODECAPI_AVEncCommonQualityVsSpeed = LibC::GUID.new(0x98332df8_u32, 0x3cd_u16, 0x476b_u16, StaticArray[0x89_u8, 0xfa_u8, 0x3f_u8, 0x9e_u8, 0x44_u8, 0x2d_u8, 0xec_u8, 0x9f_u8])
  CLSID_CODECAPI_AVEncCommonTranscodeEncodingProfile = LibC::GUID.new(0x6947787c_u32, 0xf508_u16, 0x4ea9_u16, StaticArray[0xb1_u8, 0xe9_u8, 0xa1_u8, 0xfe_u8, 0x3a_u8, 0x49_u8, 0xfb_u8, 0xc9_u8])
  CLSID_CODECAPI_AVEncCommonMeanBitRate = LibC::GUID.new(0xf7222374_u32, 0x2144_u16, 0x4815_u16, StaticArray[0xb5_u8, 0x50_u8, 0xa3_u8, 0x7f_u8, 0x8e_u8, 0x12_u8, 0xee_u8, 0x52_u8])
  CLSID_CODECAPI_AVEncCommonMeanBitRateInterval = LibC::GUID.new(0xbfaa2f0c_u32, 0xcb82_u16, 0x4bc0_u16, StaticArray[0x84_u8, 0x74_u8, 0xf0_u8, 0x6a_u8, 0x8a_u8, 0xd_u8, 0x2_u8, 0x58_u8])
  CLSID_CODECAPI_AVEncCommonMaxBitRate = LibC::GUID.new(0x9651eae4_u32, 0x39b9_u16, 0x4ebf_u16, StaticArray[0x85_u8, 0xef_u8, 0xd7_u8, 0xf4_u8, 0x44_u8, 0xec_u8, 0x74_u8, 0x65_u8])
  CLSID_CODECAPI_AVEncCommonMinBitRate = LibC::GUID.new(0x101405b2_u32, 0x2083_u16, 0x4034_u16, StaticArray[0xa8_u8, 0x6_u8, 0xef_u8, 0xbe_u8, 0xdd_u8, 0xd7_u8, 0xc9_u8, 0xff_u8])
  CLSID_CODECAPI_AVEncCommonBufferSize = LibC::GUID.new(0xdb96574_u32, 0xb6a4_u16, 0x4c8b_u16, StaticArray[0x81_u8, 0x6_u8, 0x37_u8, 0x73_u8, 0xde_u8, 0x3_u8, 0x10_u8, 0xcd_u8])
  CLSID_CODECAPI_AVEncCommonBufferInLevel = LibC::GUID.new(0xd9c5c8db_u32, 0xfc74_u16, 0x4064_u16, StaticArray[0x94_u8, 0xe9_u8, 0xcd_u8, 0x19_u8, 0xf9_u8, 0x47_u8, 0xed_u8, 0x45_u8])
  CLSID_CODECAPI_AVEncCommonBufferOutLevel = LibC::GUID.new(0xccae7f49_u32, 0xd0bc_u16, 0x4e3d_u16, StaticArray[0xa5_u8, 0x7e_u8, 0xfb_u8, 0x57_u8, 0x40_u8, 0x14_u8, 0x0_u8, 0x69_u8])
  CLSID_CODECAPI_AVEncCommonStreamEndHandling = LibC::GUID.new(0x6aad30af_u32, 0x6ba8_u16, 0x4ccc_u16, StaticArray[0x8f_u8, 0xca_u8, 0x18_u8, 0xd1_u8, 0x9b_u8, 0xea_u8, 0xeb_u8, 0x1c_u8])
  CLSID_CODECAPI_AVEncStatCommonCompletedPasses = LibC::GUID.new(0x3e5de533_u32, 0x9df7_u16, 0x438c_u16, StaticArray[0x85_u8, 0x4f_u8, 0x9f_u8, 0x7d_u8, 0xd3_u8, 0x68_u8, 0x3d_u8, 0x34_u8])
  CLSID_CODECAPI_AVEncVideoOutputFrameRate = LibC::GUID.new(0xea85e7c3_u32, 0x9567_u16, 0x4d99_u16, StaticArray[0x87_u8, 0xc4_u8, 0x2_u8, 0xc1_u8, 0xc2_u8, 0x78_u8, 0xca_u8, 0x7c_u8])
  CLSID_CODECAPI_AVEncVideoOutputFrameRateConversion = LibC::GUID.new(0x8c068bf4_u32, 0x369a_u16, 0x4ba3_u16, StaticArray[0x82_u8, 0xfd_u8, 0xb2_u8, 0x51_u8, 0x8f_u8, 0xb3_u8, 0x39_u8, 0x6e_u8])
  CLSID_CODECAPI_AVEncVideoPixelAspectRatio = LibC::GUID.new(0x3cdc718f_u32, 0xb3e9_u16, 0x4eb6_u16, StaticArray[0xa5_u8, 0x7f_u8, 0xcf_u8, 0x1f_u8, 0x1b_u8, 0x32_u8, 0x1b_u8, 0x87_u8])
  CLSID_CODECAPI_AVDecVideoAcceleration_MPEG2 = LibC::GUID.new(0xf7db8a2e_u32, 0x4f48_u16, 0x4ee8_u16, StaticArray[0xae_u8, 0x31_u8, 0x8b_u8, 0x6e_u8, 0xbe_u8, 0x55_u8, 0x8a_u8, 0xe2_u8])
  CLSID_CODECAPI_AVDecVideoAcceleration_H264 = LibC::GUID.new(0xf7db8a2f_u32, 0x4f48_u16, 0x4ee8_u16, StaticArray[0xae_u8, 0x31_u8, 0x8b_u8, 0x6e_u8, 0xbe_u8, 0x55_u8, 0x8a_u8, 0xe2_u8])
  CLSID_CODECAPI_AVDecVideoAcceleration_VC1 = LibC::GUID.new(0xf7db8a30_u32, 0x4f48_u16, 0x4ee8_u16, StaticArray[0xae_u8, 0x31_u8, 0x8b_u8, 0x6e_u8, 0xbe_u8, 0x55_u8, 0x8a_u8, 0xe2_u8])
  CLSID_CODECAPI_AVDecVideoProcDeinterlaceCSC = LibC::GUID.new(0xf7db8a31_u32, 0x4f48_u16, 0x4ee8_u16, StaticArray[0xae_u8, 0x31_u8, 0x8b_u8, 0x6e_u8, 0xbe_u8, 0x55_u8, 0x8a_u8, 0xe2_u8])
  CLSID_CODECAPI_AVDecVideoThumbnailGenerationMode = LibC::GUID.new(0x2efd8eee_u32, 0x1150_u16, 0x4328_u16, StaticArray[0x9c_u8, 0xf5_u8, 0x66_u8, 0xdc_u8, 0xe9_u8, 0x33_u8, 0xfc_u8, 0xf4_u8])
  CLSID_CODECAPI_AVDecVideoMaxCodedWidth = LibC::GUID.new(0x5ae557b8_u32, 0x77af_u16, 0x41f5_u16, StaticArray[0x9f_u8, 0xa6_u8, 0x4d_u8, 0xb2_u8, 0xfe_u8, 0x1d_u8, 0x4b_u8, 0xca_u8])
  CLSID_CODECAPI_AVDecVideoMaxCodedHeight = LibC::GUID.new(0x7262a16a_u32, 0xd2dc_u16, 0x4e75_u16, StaticArray[0x9b_u8, 0xa8_u8, 0x65_u8, 0xc0_u8, 0xc6_u8, 0xd3_u8, 0x2b_u8, 0x13_u8])
  CLSID_CODECAPI_AVDecNumWorkerThreads = LibC::GUID.new(0x9561c3e8_u32, 0xea9e_u16, 0x4435_u16, StaticArray[0x9b_u8, 0x1e_u8, 0xa9_u8, 0x3e_u8, 0x69_u8, 0x18_u8, 0x94_u8, 0xd8_u8])
  CLSID_CODECAPI_AVDecSoftwareDynamicFormatChange = LibC::GUID.new(0x862e2f0a_u32, 0x507b_u16, 0x47ff_u16, StaticArray[0xaf_u8, 0x47_u8, 0x1_u8, 0xe2_u8, 0x62_u8, 0x42_u8, 0x98_u8, 0xb7_u8])
  CLSID_CODECAPI_AVDecDisableVideoPostProcessing = LibC::GUID.new(0xf8749193_u32, 0x667a_u16, 0x4f2c_u16, StaticArray[0xa9_u8, 0xe8_u8, 0x5d_u8, 0x4a_u8, 0xf9_u8, 0x24_u8, 0xf0_u8, 0x8f_u8])
  CLSID_CODECAPI_AVDecVideoDropPicWithMissingRef = LibC::GUID.new(0xf8226383_u32, 0x14c2_u16, 0x4567_u16, StaticArray[0x97_u8, 0x34_u8, 0x50_u8, 0x4_u8, 0xe9_u8, 0x6f_u8, 0xf8_u8, 0x87_u8])
  CLSID_CODECAPI_AVDecVideoSoftwareDeinterlaceMode = LibC::GUID.new(0xc08d1ce_u32, 0x9ced_u16, 0x4540_u16, StaticArray[0xba_u8, 0xe3_u8, 0xce_u8, 0xb3_u8, 0x80_u8, 0x14_u8, 0x11_u8, 0x9_u8])
  CLSID_CODECAPI_AVDecVideoFastDecodeMode = LibC::GUID.new(0x6b529f7d_u32, 0xd3b1_u16, 0x49c6_u16, StaticArray[0xa9_u8, 0x99_u8, 0x9e_u8, 0xc6_u8, 0x91_u8, 0x1b_u8, 0xed_u8, 0xbf_u8])
  CLSID_CODECAPI_AVLowLatencyMode = LibC::GUID.new(0x9c27891a_u32, 0xed7a_u16, 0x40e1_u16, StaticArray[0x88_u8, 0xe8_u8, 0xb2_u8, 0x27_u8, 0x27_u8, 0xa0_u8, 0x24_u8, 0xee_u8])
  CLSID_CODECAPI_AVDecVideoH264ErrorConcealment = LibC::GUID.new(0xececace8_u32, 0x3436_u16, 0x462c_u16, StaticArray[0x92_u8, 0x94_u8, 0xcd_u8, 0x7b_u8, 0xac_u8, 0xd7_u8, 0x58_u8, 0xa9_u8])
  CLSID_CODECAPI_AVDecVideoMPEG2ErrorConcealment = LibC::GUID.new(0x9d2bfe18_u32, 0x728d_u16, 0x48d2_u16, StaticArray[0xb3_u8, 0x58_u8, 0xbc_u8, 0x7e_u8, 0x43_u8, 0x6c_u8, 0x66_u8, 0x74_u8])
  CLSID_CODECAPI_AVDecVideoCodecType = LibC::GUID.new(0x434528e5_u32, 0x21f0_u16, 0x46b6_u16, StaticArray[0xb6_u8, 0x2c_u8, 0x9b_u8, 0x1b_u8, 0x6b_u8, 0x65_u8, 0x8c_u8, 0xd1_u8])
  CLSID_CODECAPI_AVDecVideoDXVAMode = LibC::GUID.new(0xf758f09e_u32, 0x7337_u16, 0x4ae7_u16, StaticArray[0x83_u8, 0x87_u8, 0x73_u8, 0xdc_u8, 0x2d_u8, 0x54_u8, 0xe6_u8, 0x7d_u8])
  CLSID_CODECAPI_AVDecVideoDXVABusEncryption = LibC::GUID.new(0x42153c8b_u32, 0xfd0b_u16, 0x4765_u16, StaticArray[0xa4_u8, 0x62_u8, 0xdd_u8, 0xd9_u8, 0xe8_u8, 0xbc_u8, 0xc3_u8, 0x88_u8])
  CLSID_CODECAPI_AVEncVideoForceSourceScanType = LibC::GUID.new(0x1ef2065f_u32, 0x58a_u16, 0x4765_u16, StaticArray[0xa4_u8, 0xfc_u8, 0x8a_u8, 0x86_u8, 0x4c_u8, 0x10_u8, 0x30_u8, 0x12_u8])
  CLSID_CODECAPI_AVEncVideoNoOfFieldsToEncode = LibC::GUID.new(0x61e4bbe2_u32, 0x4ee0_u16, 0x40e7_u16, StaticArray[0x80_u8, 0xab_u8, 0x51_u8, 0xdd_u8, 0xee_u8, 0xbe_u8, 0x62_u8, 0x91_u8])
  CLSID_CODECAPI_AVEncVideoNoOfFieldsToSkip = LibC::GUID.new(0xa97e1240_u32, 0x1427_u16, 0x4c16_u16, StaticArray[0xa7_u8, 0xf7_u8, 0x3d_u8, 0xcf_u8, 0xd8_u8, 0xba_u8, 0x4c_u8, 0xc5_u8])
  CLSID_CODECAPI_AVEncVideoEncodeDimension = LibC::GUID.new(0x1074df28_u32, 0x7e0f_u16, 0x47a4_u16, StaticArray[0xa4_u8, 0x53_u8, 0xcd_u8, 0xd7_u8, 0x38_u8, 0x70_u8, 0xf5_u8, 0xce_u8])
  CLSID_CODECAPI_AVEncVideoEncodeOffsetOrigin = LibC::GUID.new(0x6bc098fe_u32, 0xa71a_u16, 0x4454_u16, StaticArray[0x85_u8, 0x2e_u8, 0x4d_u8, 0x2d_u8, 0xde_u8, 0xb2_u8, 0xcd_u8, 0x24_u8])
  CLSID_CODECAPI_AVEncVideoDisplayDimension = LibC::GUID.new(0xde053668_u32, 0xf4ec_u16, 0x47a9_u16, StaticArray[0x86_u8, 0xd0_u8, 0x83_u8, 0x67_u8, 0x70_u8, 0xf0_u8, 0xc1_u8, 0xd5_u8])
  CLSID_CODECAPI_AVEncVideoOutputScanType = LibC::GUID.new(0x460b5576_u32, 0x842e_u16, 0x49ab_u16, StaticArray[0xa6_u8, 0x2d_u8, 0xb3_u8, 0x6f_u8, 0x73_u8, 0x12_u8, 0xc9_u8, 0xdb_u8])
  CLSID_CODECAPI_AVEncVideoInverseTelecineEnable = LibC::GUID.new(0x2ea9098b_u32, 0xe76d_u16, 0x4ccd_u16, StaticArray[0xa0_u8, 0x30_u8, 0xd3_u8, 0xb8_u8, 0x89_u8, 0xc1_u8, 0xb6_u8, 0x4c_u8])
  CLSID_CODECAPI_AVEncVideoInverseTelecineThreshold = LibC::GUID.new(0x40247d84_u32, 0xe895_u16, 0x497f_u16, StaticArray[0xb4_u8, 0x4c_u8, 0xb7_u8, 0x45_u8, 0x60_u8, 0xac_u8, 0xfe_u8, 0x27_u8])
  CLSID_CODECAPI_AVEncVideoSourceFilmContent = LibC::GUID.new(0x1791c64b_u32, 0xccfc_u16, 0x4827_u16, StaticArray[0xa0_u8, 0xed_u8, 0x25_u8, 0x57_u8, 0x79_u8, 0x3b_u8, 0x2b_u8, 0x1c_u8])
  CLSID_CODECAPI_AVEncVideoSourceIsBW = LibC::GUID.new(0x42ffc49b_u32, 0x1812_u16, 0x4fdc_u16, StaticArray[0x8d_u8, 0x24_u8, 0x70_u8, 0x54_u8, 0xc5_u8, 0x21_u8, 0xe6_u8, 0xeb_u8])
  CLSID_CODECAPI_AVEncVideoFieldSwap = LibC::GUID.new(0xfefd7569_u32, 0x4e0a_u16, 0x49f2_u16, StaticArray[0x9f_u8, 0x2b_u8, 0x36_u8, 0xe_u8, 0xa4_u8, 0x8c_u8, 0x19_u8, 0xa2_u8])
  CLSID_CODECAPI_AVEncVideoInputChromaResolution = LibC::GUID.new(0xbb0cec33_u32, 0x16f1_u16, 0x47b0_u16, StaticArray[0x8a_u8, 0x88_u8, 0x37_u8, 0x81_u8, 0x5b_u8, 0xee_u8, 0x17_u8, 0x39_u8])
  CLSID_CODECAPI_AVEncVideoOutputChromaResolution = LibC::GUID.new(0x6097b4c9_u32, 0x7c1d_u16, 0x4e64_u16, StaticArray[0xbf_u8, 0xcc_u8, 0x9e_u8, 0x97_u8, 0x65_u8, 0x31_u8, 0x8a_u8, 0xe7_u8])
  CLSID_CODECAPI_AVEncVideoInputChromaSubsampling = LibC::GUID.new(0xa8e73a39_u32, 0x4435_u16, 0x4ec3_u16, StaticArray[0xa6_u8, 0xea_u8, 0x98_u8, 0x30_u8, 0xf_u8, 0x4b_u8, 0x36_u8, 0xf7_u8])
  CLSID_CODECAPI_AVEncVideoOutputChromaSubsampling = LibC::GUID.new(0xfa561c6c_u32, 0x7d17_u16, 0x44f0_u16, StaticArray[0x83_u8, 0xc9_u8, 0x32_u8, 0xed_u8, 0x12_u8, 0xe9_u8, 0x63_u8, 0x43_u8])
  CLSID_CODECAPI_AVEncVideoInputColorPrimaries = LibC::GUID.new(0xc24d783f_u32, 0x7ce6_u16, 0x4278_u16, StaticArray[0x90_u8, 0xab_u8, 0x28_u8, 0xa4_u8, 0xf1_u8, 0xe5_u8, 0xf8_u8, 0x6c_u8])
  CLSID_CODECAPI_AVEncVideoOutputColorPrimaries = LibC::GUID.new(0xbe95907c_u32, 0x9d04_u16, 0x4921_u16, StaticArray[0x89_u8, 0x85_u8, 0xa6_u8, 0xd6_u8, 0xd8_u8, 0x7d_u8, 0x1a_u8, 0x6c_u8])
  CLSID_CODECAPI_AVEncVideoInputColorTransferFunction = LibC::GUID.new(0x8c056111_u32, 0xa9c3_u16, 0x4b08_u16, StaticArray[0xa0_u8, 0xa0_u8, 0xce_u8, 0x13_u8, 0xf8_u8, 0xa2_u8, 0x7c_u8, 0x75_u8])
  CLSID_CODECAPI_AVEncVideoOutputColorTransferFunction = LibC::GUID.new(0x4a7f884a_u32, 0xea11_u16, 0x460d_u16, StaticArray[0xbf_u8, 0x57_u8, 0xb8_u8, 0x8b_u8, 0xc7_u8, 0x59_u8, 0x0_u8, 0xde_u8])
  CLSID_CODECAPI_AVEncVideoInputColorTransferMatrix = LibC::GUID.new(0x52ed68b9_u32, 0x72d5_u16, 0x4089_u16, StaticArray[0x95_u8, 0x8d_u8, 0xf5_u8, 0x40_u8, 0x5d_u8, 0x55_u8, 0x8_u8, 0x1c_u8])
  CLSID_CODECAPI_AVEncVideoOutputColorTransferMatrix = LibC::GUID.new(0xa9b90444_u32, 0xaf40_u16, 0x4310_u16, StaticArray[0x8f_u8, 0xbe_u8, 0xed_u8, 0x6d_u8, 0x93_u8, 0x3f_u8, 0x89_u8, 0x2b_u8])
  CLSID_CODECAPI_AVEncVideoInputColorLighting = LibC::GUID.new(0x46a99549_u32, 0x15_u16, 0x4a45_u16, StaticArray[0x9c_u8, 0x30_u8, 0x1d_u8, 0x5c_u8, 0xfa_u8, 0x25_u8, 0x83_u8, 0x16_u8])
  CLSID_CODECAPI_AVEncVideoOutputColorLighting = LibC::GUID.new(0xe5aaac6_u32, 0xace6_u16, 0x4c5c_u16, StaticArray[0x99_u8, 0x8e_u8, 0x1a_u8, 0x8c_u8, 0x9c_u8, 0x6c_u8, 0xf_u8, 0x89_u8])
  CLSID_CODECAPI_AVEncVideoInputColorNominalRange = LibC::GUID.new(0x16cf25c6_u32, 0xa2a6_u16, 0x48e9_u16, StaticArray[0xae_u8, 0x80_u8, 0x21_u8, 0xae_u8, 0xc4_u8, 0x1d_u8, 0x42_u8, 0x7e_u8])
  CLSID_CODECAPI_AVEncVideoOutputColorNominalRange = LibC::GUID.new(0x972835ed_u32, 0x87b5_u16, 0x4e95_u16, StaticArray[0x95_u8, 0x0_u8, 0xc7_u8, 0x39_u8, 0x58_u8, 0x56_u8, 0x6e_u8, 0x54_u8])
  CLSID_CODECAPI_AVEncInputVideoSystem = LibC::GUID.new(0xbede146d_u32, 0xb616_u16, 0x4dc7_u16, StaticArray[0x92_u8, 0xb2_u8, 0xf5_u8, 0xd9_u8, 0xfa_u8, 0x92_u8, 0x98_u8, 0xf7_u8])
  CLSID_CODECAPI_AVEncVideoHeaderDropFrame = LibC::GUID.new(0x6ed9e124_u32, 0x7925_u16, 0x43fe_u16, StaticArray[0x97_u8, 0x1b_u8, 0xe0_u8, 0x19_u8, 0xf6_u8, 0x22_u8, 0x22_u8, 0xb4_u8])
  CLSID_CODECAPI_AVEncVideoHeaderHours = LibC::GUID.new(0x2acc7702_u32, 0xe2da_u16, 0x4158_u16, StaticArray[0xbf_u8, 0x9b_u8, 0x88_u8, 0x88_u8, 0x1_u8, 0x29_u8, 0xd7_u8, 0x40_u8])
  CLSID_CODECAPI_AVEncVideoHeaderMinutes = LibC::GUID.new(0xdc1a99ce_u32, 0x307_u16, 0x408b_u16, StaticArray[0x88_u8, 0xb_u8, 0xb8_u8, 0x34_u8, 0x8e_u8, 0xe8_u8, 0xca_u8, 0x7f_u8])
  CLSID_CODECAPI_AVEncVideoHeaderSeconds = LibC::GUID.new(0x4a2e1a05_u32, 0xa780_u16, 0x4f58_u16, StaticArray[0x81_u8, 0x20_u8, 0x9a_u8, 0x44_u8, 0x9d_u8, 0x69_u8, 0x65_u8, 0x6b_u8])
  CLSID_CODECAPI_AVEncVideoHeaderFrames = LibC::GUID.new(0xafd5f567_u32, 0x5c1b_u16, 0x4adc_u16, StaticArray[0xbd_u8, 0xaf_u8, 0x73_u8, 0x56_u8, 0x10_u8, 0x38_u8, 0x14_u8, 0x36_u8])
  CLSID_CODECAPI_AVEncVideoDefaultUpperFieldDominant = LibC::GUID.new(0x810167c4_u32, 0xbc1_u16, 0x47ca_u16, StaticArray[0x8f_u8, 0xc2_u8, 0x57_u8, 0x5_u8, 0x5a_u8, 0x14_u8, 0x74_u8, 0xa5_u8])
  CLSID_CODECAPI_AVEncVideoCBRMotionTradeoff = LibC::GUID.new(0xd49451e_u32, 0x18d5_u16, 0x4367_u16, StaticArray[0xa4_u8, 0xef_u8, 0x32_u8, 0x40_u8, 0xdf_u8, 0x16_u8, 0x93_u8, 0xc4_u8])
  CLSID_CODECAPI_AVEncVideoCodedVideoAccessUnitSize = LibC::GUID.new(0xb4b10c15_u32, 0x14a7_u16, 0x4ce8_u16, StaticArray[0xb1_u8, 0x73_u8, 0xdc_u8, 0x90_u8, 0xa0_u8, 0xb4_u8, 0xfc_u8, 0xdb_u8])
  CLSID_CODECAPI_AVEncVideoMaxKeyframeDistance = LibC::GUID.new(0x2987123a_u32, 0xba93_u16, 0x4704_u16, StaticArray[0xb4_u8, 0x89_u8, 0xec_u8, 0x1e_u8, 0x5f_u8, 0x25_u8, 0x29_u8, 0x2c_u8])
  CLSID_CODECAPI_AVEncH264CABACEnable = LibC::GUID.new(0xee6cad62_u32, 0xd305_u16, 0x4248_u16, StaticArray[0xa5_u8, 0xe_u8, 0xe1_u8, 0xb2_u8, 0x55_u8, 0xf7_u8, 0xca_u8, 0xf8_u8])
  CLSID_CODECAPI_AVEncVideoContentType = LibC::GUID.new(0x66117aca_u32, 0xeb77_u16, 0x459d_u16, StaticArray[0x93_u8, 0xc_u8, 0xa4_u8, 0x8d_u8, 0x9d_u8, 0x6_u8, 0x83_u8, 0xfc_u8])
  CLSID_CODECAPI_AVEncNumWorkerThreads = LibC::GUID.new(0xb0c8bf60_u32, 0x16f7_u16, 0x4951_u16, StaticArray[0xa3_u8, 0xb_u8, 0x1d_u8, 0xb1_u8, 0x60_u8, 0x92_u8, 0x93_u8, 0xd6_u8])
  CLSID_CODECAPI_AVEncVideoEncodeQP = LibC::GUID.new(0x2cb5696b_u32, 0x23fb_u16, 0x4ce1_u16, StaticArray[0xa0_u8, 0xf9_u8, 0xef_u8, 0x5b_u8, 0x90_u8, 0xfd_u8, 0x55_u8, 0xca_u8])
  CLSID_CODECAPI_AVEncVideoMinQP = LibC::GUID.new(0xee22c6a_u32, 0xa37c_u16, 0x4568_u16, StaticArray[0xb5_u8, 0xf1_u8, 0x9d_u8, 0x4c_u8, 0x2b_u8, 0x3a_u8, 0xb8_u8, 0x86_u8])
  CLSID_CODECAPI_AVEncVideoForceKeyFrame = LibC::GUID.new(0x398c1b98_u32, 0x8353_u16, 0x475a_u16, StaticArray[0x9e_u8, 0xf2_u8, 0x8f_u8, 0x26_u8, 0x5d_u8, 0x26_u8, 0x3_u8, 0x45_u8])
  CLSID_CODECAPI_AVEncH264SPSID = LibC::GUID.new(0x50f38f51_u32, 0x2b79_u16, 0x40e3_u16, StaticArray[0xb3_u8, 0x9c_u8, 0x7e_u8, 0x9f_u8, 0xa0_u8, 0x77_u8, 0x5_u8, 0x1_u8])
  CLSID_CODECAPI_AVEncH264PPSID = LibC::GUID.new(0xbfe29ec2_u32, 0x56c_u16, 0x4d68_u16, StaticArray[0xa3_u8, 0x8d_u8, 0xae_u8, 0x59_u8, 0x44_u8, 0xc8_u8, 0x58_u8, 0x2e_u8])
  CLSID_CODECAPI_AVEncAdaptiveMode = LibC::GUID.new(0x4419b185_u32, 0xda1f_u16, 0x4f53_u16, StaticArray[0xbc_u8, 0x76_u8, 0x9_u8, 0x7d_u8, 0xc_u8, 0x1e_u8, 0xfb_u8, 0x1e_u8])
  CLSID_CODECAPI_AVScenarioInfo = LibC::GUID.new(0xb28a6e64_u32, 0x3ff9_u16, 0x446a_u16, StaticArray[0x8a_u8, 0x4b_u8, 0xd_u8, 0x7a_u8, 0x53_u8, 0x41_u8, 0x32_u8, 0x36_u8])
  CLSID_CODECAPI_AVEncMPVGOPSizeMin = LibC::GUID.new(0x7155cf20_u32, 0xd440_u16, 0x4852_u16, StaticArray[0xad_u8, 0xf_u8, 0x9c_u8, 0x4a_u8, 0xbf_u8, 0xe3_u8, 0x7a_u8, 0x6a_u8])
  CLSID_CODECAPI_AVEncMPVGOPSizeMax = LibC::GUID.new(0xfe7de4c4_u32, 0x1936_u16, 0x4fe2_u16, StaticArray[0xbd_u8, 0xf7_u8, 0x1f_u8, 0x18_u8, 0xca_u8, 0x1d_u8, 0x0_u8, 0x1f_u8])
  CLSID_CODECAPI_AVEncVideoMaxCTBSize = LibC::GUID.new(0x822363ff_u32, 0xcec8_u16, 0x43e5_u16, StaticArray[0x92_u8, 0xfd_u8, 0xe0_u8, 0x97_u8, 0x48_u8, 0x84_u8, 0x85_u8, 0xe9_u8])
  CLSID_CODECAPI_AVEncVideoCTBSize = LibC::GUID.new(0xd47db8b2_u32, 0xe73b_u16, 0x4cb9_u16, StaticArray[0x8c_u8, 0x3e_u8, 0xbd_u8, 0x87_u8, 0x7d_u8, 0x6_u8, 0xd7_u8, 0x7b_u8])
  CLSID_CODECAPI_VideoEncoderDisplayContentType = LibC::GUID.new(0x79b90b27_u32, 0xf4b1_u16, 0x42dc_u16, StaticArray[0x9d_u8, 0xd7_u8, 0xcd_u8, 0xaf_u8, 0x81_u8, 0x35_u8, 0xc4_u8, 0x0_u8])
  CLSID_CODECAPI_AVEncEnableVideoProcessing = LibC::GUID.new(0x6f4bf6_u32, 0xea3_u16, 0x4d42_u16, StaticArray[0x87_u8, 0x2_u8, 0xb5_u8, 0xd8_u8, 0xbe_u8, 0xf_u8, 0x7a_u8, 0x92_u8])
  CLSID_CODECAPI_AVEncVideoGradualIntraRefresh = LibC::GUID.new(0x8f347dee_u32, 0xcb0d_u16, 0x49ba_u16, StaticArray[0xb4_u8, 0x62_u8, 0xdb_u8, 0x69_u8, 0x27_u8, 0xee_u8, 0x21_u8, 0x1_u8])
  CLSID_CODECAPI_GetOPMContext = LibC::GUID.new(0x2f036c05_u32, 0x4c14_u16, 0x4689_u16, StaticArray[0x88_u8, 0x39_u8, 0x29_u8, 0x4c_u8, 0x6d_u8, 0x73_u8, 0xe0_u8, 0x53_u8])
  CLSID_CODECAPI_SetHDCPManagerContext = LibC::GUID.new(0x6d2d1fc8_u32, 0x3dc9_u16, 0x47eb_u16, StaticArray[0xa1_u8, 0xa2_u8, 0x47_u8, 0x1c_u8, 0x80_u8, 0xcd_u8, 0x60_u8, 0xd0_u8])
  CLSID_CODECAPI_AVEncVideoMaxTemporalLayers = LibC::GUID.new(0x9c668cfe_u32, 0x8e1_u16, 0x424a_u16, StaticArray[0x93_u8, 0x4e_u8, 0xb7_u8, 0x64_u8, 0xb0_u8, 0x64_u8, 0x80_u8, 0x2a_u8])
  CLSID_CODECAPI_AVEncVideoNumGOPsPerIDR = LibC::GUID.new(0x83bc5bdb_u32, 0x5b89_u16, 0x4521_u16, StaticArray[0x8f_u8, 0x66_u8, 0x33_u8, 0x15_u8, 0x1c_u8, 0x37_u8, 0x31_u8, 0x76_u8])
  CLSID_CODECAPI_AVEncCommonAllowFrameDrops = LibC::GUID.new(0xd8477dcb_u32, 0x9598_u16, 0x48e3_u16, StaticArray[0x8d_u8, 0xc_u8, 0x75_u8, 0x2b_u8, 0xf2_u8, 0x6_u8, 0x9_u8, 0x3e_u8])
  CLSID_CODECAPI_AVEncVideoIntraLayerPrediction = LibC::GUID.new(0xd3af46b8_u32, 0xbf47_u16, 0x44bb_u16, StaticArray[0xa2_u8, 0x83_u8, 0x69_u8, 0xf0_u8, 0xb0_u8, 0x22_u8, 0x8f_u8, 0xf9_u8])
  CLSID_CODECAPI_AVEncVideoInstantTemporalUpSwitching = LibC::GUID.new(0xa3308307_u32, 0xd96_u16, 0x4ba4_u16, StaticArray[0xb1_u8, 0xf0_u8, 0xb9_u8, 0x1a_u8, 0x5e_u8, 0x49_u8, 0xdf_u8, 0x10_u8])
  CLSID_CODECAPI_AVEncLowPowerEncoder = LibC::GUID.new(0xb668d582_u32, 0x8bad_u16, 0x4f6a_u16, StaticArray[0x91_u8, 0x41_u8, 0x37_u8, 0x5a_u8, 0x95_u8, 0x35_u8, 0x8b_u8, 0x6d_u8])
  CLSID_CODECAPI_AVEnableInLoopDeblockFilter = LibC::GUID.new(0xd2e8e399_u32, 0x623_u16, 0x4bf3_u16, StaticArray[0x92_u8, 0xa8_u8, 0x4d_u8, 0x18_u8, 0x18_u8, 0x52_u8, 0x9d_u8, 0xed_u8])
  CLSID_CODECAPI_AVEncVideoSelectLayer = LibC::GUID.new(0xeb1084f5_u32, 0x6aaa_u16, 0x4914_u16, StaticArray[0xbb_u8, 0x2f_u8, 0x61_u8, 0x47_u8, 0x22_u8, 0x7f_u8, 0x12_u8, 0xe7_u8])
  CLSID_CODECAPI_AVEncVideoTemporalLayerCount = LibC::GUID.new(0x19caebff_u32, 0xb74d_u16, 0x4cfd_u16, StaticArray[0x8c_u8, 0x27_u8, 0xc2_u8, 0xf9_u8, 0xd9_u8, 0x7d_u8, 0x5f_u8, 0x52_u8])
  CLSID_CODECAPI_AVEncVideoUsage = LibC::GUID.new(0x1f636849_u32, 0x5dc1_u16, 0x49f1_u16, StaticArray[0xb1_u8, 0xd8_u8, 0xce_u8, 0x3c_u8, 0xf6_u8, 0x2e_u8, 0xa3_u8, 0x85_u8])
  CLSID_CODECAPI_AVEncVideoRateControlParams = LibC::GUID.new(0x87d43767_u32, 0x7645_u16, 0x44ec_u16, StaticArray[0xb4_u8, 0x38_u8, 0xd3_u8, 0x32_u8, 0x2f_u8, 0xbc_u8, 0xa2_u8, 0x9f_u8])
  CLSID_CODECAPI_AVEncVideoSupportedControls = LibC::GUID.new(0xd3f40fdd_u32, 0x77b9_u16, 0x473d_u16, StaticArray[0x81_u8, 0x96_u8, 0x6_u8, 0x12_u8, 0x59_u8, 0xe6_u8, 0x9c_u8, 0xff_u8])
  CLSID_CODECAPI_AVEncVideoEncodeFrameTypeQP = LibC::GUID.new(0xaa70b610_u32, 0xe03f_u16, 0x450c_u16, StaticArray[0xad_u8, 0x7_u8, 0x7_u8, 0x31_u8, 0x4e_u8, 0x63_u8, 0x9c_u8, 0xe7_u8])
  CLSID_CODECAPI_AVEncSliceControlMode = LibC::GUID.new(0xe9e782ef_u32, 0x5f18_u16, 0x44c9_u16, StaticArray[0xa9_u8, 0xb_u8, 0xe9_u8, 0xc3_u8, 0xc2_u8, 0xc1_u8, 0x7b_u8, 0xb_u8])
  CLSID_CODECAPI_AVEncSliceControlSize = LibC::GUID.new(0x92f51df3_u32, 0x7a5_u16, 0x4172_u16, StaticArray[0xae_u8, 0xfe_u8, 0xc6_u8, 0x9c_u8, 0xa3_u8, 0xb6_u8, 0xe_u8, 0x35_u8])
  CLSID_CODECAPI_AVEncSliceGenerationMode = LibC::GUID.new(0x8a6bc67f_u32, 0x9497_u16, 0x4286_u16, StaticArray[0xb4_u8, 0x6b_u8, 0x2_u8, 0xdb_u8, 0x8d_u8, 0x60_u8, 0xed_u8, 0xbc_u8])
  CLSID_CODECAPI_AVEncVideoMaxNumRefFrame = LibC::GUID.new(0x964829ed_u32, 0x94f9_u16, 0x43b4_u16, StaticArray[0xb7_u8, 0x4d_u8, 0xef_u8, 0x40_u8, 0x94_u8, 0x4b_u8, 0x69_u8, 0xa0_u8])
  CLSID_CODECAPI_AVEncVideoMeanAbsoluteDifference = LibC::GUID.new(0xe5c0c10f_u32, 0x81a4_u16, 0x422d_u16, StaticArray[0x8c_u8, 0x3f_u8, 0xb4_u8, 0x74_u8, 0xa4_u8, 0x58_u8, 0x13_u8, 0x36_u8])
  CLSID_CODECAPI_AVEncVideoMaxQP = LibC::GUID.new(0x3daf6f66_u32, 0xa6a7_u16, 0x45e0_u16, StaticArray[0xa8_u8, 0xe5_u8, 0xf2_u8, 0x74_u8, 0x3f_u8, 0x46_u8, 0xa3_u8, 0xa2_u8])
  CLSID_CODECAPI_AVEncVideoLTRBufferControl = LibC::GUID.new(0xa4a0e93d_u32, 0x4cbc_u16, 0x444c_u16, StaticArray[0x89_u8, 0xf4_u8, 0x82_u8, 0x6d_u8, 0x31_u8, 0xe_u8, 0x92_u8, 0xa7_u8])
  CLSID_CODECAPI_AVEncVideoMarkLTRFrame = LibC::GUID.new(0xe42f4748_u32, 0xa06d_u16, 0x4ef9_u16, StaticArray[0x8c_u8, 0xea_u8, 0x3d_u8, 0x5_u8, 0xfd_u8, 0xe3_u8, 0xbd_u8, 0x3b_u8])
  CLSID_CODECAPI_AVEncVideoUseLTRFrame = LibC::GUID.new(0x752db8_u32, 0x55f7_u16, 0x4f80_u16, StaticArray[0x89_u8, 0x5b_u8, 0x27_u8, 0x63_u8, 0x91_u8, 0x95_u8, 0xf2_u8, 0xad_u8])
  CLSID_CODECAPI_AVEncVideoROIEnabled = LibC::GUID.new(0xd74f7f18_u32, 0x44dd_u16, 0x4b85_u16, StaticArray[0xab_u8, 0xa3_u8, 0x5_u8, 0xd9_u8, 0xf4_u8, 0x2a_u8, 0x82_u8, 0x80_u8])
  CLSID_CODECAPI_AVEncVideoDirtyRectEnabled = LibC::GUID.new(0x8acb8fdd_u32, 0x5e0c_u16, 0x4c66_u16, StaticArray[0x87_u8, 0x29_u8, 0xb8_u8, 0xf6_u8, 0x29_u8, 0xab_u8, 0x4_u8, 0xfb_u8])
  CLSID_CODECAPI_AVEncMaxFrameRate = LibC::GUID.new(0xb98e1b31_u32, 0x19fa_u16, 0x4d4f_u16, StaticArray[0x99_u8, 0x31_u8, 0xd6_u8, 0xa5_u8, 0xb8_u8, 0xaa_u8, 0xb9_u8, 0x3c_u8])
  CLSID_CODECAPI_AVEncMuxOutputStreamType = LibC::GUID.new(0xcedd9e8f_u32, 0x34d3_u16, 0x44db_u16, StaticArray[0xa1_u8, 0xd8_u8, 0xf8_u8, 0x15_u8, 0x20_u8, 0x25_u8, 0x4f_u8, 0x3e_u8])
  CLSID_CODECAPI_AVEncStatVideoOutputFrameRate = LibC::GUID.new(0xbe747849_u32, 0x9ab4_u16, 0x4a63_u16, StaticArray[0x98_u8, 0xfe_u8, 0xf1_u8, 0x43_u8, 0xf0_u8, 0x4f_u8, 0x8e_u8, 0xe9_u8])
  CLSID_CODECAPI_AVEncStatVideoCodedFrames = LibC::GUID.new(0xd47f8d61_u32, 0x6f5a_u16, 0x4a26_u16, StaticArray[0xbb_u8, 0x9f_u8, 0xcd_u8, 0x95_u8, 0x18_u8, 0x46_u8, 0x2b_u8, 0xcd_u8])
  CLSID_CODECAPI_AVEncStatVideoTotalFrames = LibC::GUID.new(0xfdaa9916_u32, 0x119a_u16, 0x4222_u16, StaticArray[0x9a_u8, 0xd6_u8, 0x3f_u8, 0x7c_u8, 0xab_u8, 0x99_u8, 0xcc_u8, 0x8b_u8])
  CLSID_CODECAPI_AVEncAudioIntervalToEncode = LibC::GUID.new(0x866e4b4d_u32, 0x725a_u16, 0x467c_u16, StaticArray[0xbb_u8, 0x1_u8, 0xb4_u8, 0x96_u8, 0xb2_u8, 0x3b_u8, 0x25_u8, 0xf9_u8])
  CLSID_CODECAPI_AVEncAudioIntervalToSkip = LibC::GUID.new(0x88c15f94_u32, 0xc38c_u16, 0x4796_u16, StaticArray[0xa9_u8, 0xe8_u8, 0x96_u8, 0xe9_u8, 0x67_u8, 0x98_u8, 0x3f_u8, 0x26_u8])
  CLSID_CODECAPI_AVEncAudioDualMono = LibC::GUID.new(0x3648126b_u32, 0xa3e8_u16, 0x4329_u16, StaticArray[0x9b_u8, 0x3a_u8, 0x5c_u8, 0xe5_u8, 0x66_u8, 0xa4_u8, 0x3b_u8, 0xd3_u8])
  CLSID_CODECAPI_AVEncAudioMeanBitRate = LibC::GUID.new(0x921295bb_u32, 0x4fca_u16, 0x4679_u16, StaticArray[0xaa_u8, 0xb8_u8, 0x9e_u8, 0x2a_u8, 0x1d_u8, 0x75_u8, 0x33_u8, 0x84_u8])
  CLSID_CODECAPI_AVEncAudioMapDestChannel0 = LibC::GUID.new(0xbc5d0b60_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])
  CLSID_CODECAPI_AVEncAudioMapDestChannel1 = LibC::GUID.new(0xbc5d0b61_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])
  CLSID_CODECAPI_AVEncAudioMapDestChannel2 = LibC::GUID.new(0xbc5d0b62_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])
  CLSID_CODECAPI_AVEncAudioMapDestChannel3 = LibC::GUID.new(0xbc5d0b63_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])
  CLSID_CODECAPI_AVEncAudioMapDestChannel4 = LibC::GUID.new(0xbc5d0b64_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])
  CLSID_CODECAPI_AVEncAudioMapDestChannel5 = LibC::GUID.new(0xbc5d0b65_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])
  CLSID_CODECAPI_AVEncAudioMapDestChannel6 = LibC::GUID.new(0xbc5d0b66_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])
  CLSID_CODECAPI_AVEncAudioMapDestChannel7 = LibC::GUID.new(0xbc5d0b67_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])
  CLSID_CODECAPI_AVEncAudioMapDestChannel8 = LibC::GUID.new(0xbc5d0b68_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])
  CLSID_CODECAPI_AVEncAudioMapDestChannel9 = LibC::GUID.new(0xbc5d0b69_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])
  CLSID_CODECAPI_AVEncAudioMapDestChannel10 = LibC::GUID.new(0xbc5d0b6a_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])
  CLSID_CODECAPI_AVEncAudioMapDestChannel11 = LibC::GUID.new(0xbc5d0b6b_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])
  CLSID_CODECAPI_AVEncAudioMapDestChannel12 = LibC::GUID.new(0xbc5d0b6c_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])
  CLSID_CODECAPI_AVEncAudioMapDestChannel13 = LibC::GUID.new(0xbc5d0b6d_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])
  CLSID_CODECAPI_AVEncAudioMapDestChannel14 = LibC::GUID.new(0xbc5d0b6e_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])
  CLSID_CODECAPI_AVEncAudioMapDestChannel15 = LibC::GUID.new(0xbc5d0b6f_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])
  CLSID_CODECAPI_AVEncAudioInputContent = LibC::GUID.new(0x3e226c2b_u32, 0x60b9_u16, 0x4a39_u16, StaticArray[0xb0_u8, 0xb_u8, 0xa7_u8, 0xb4_u8, 0xf_u8, 0x70_u8, 0xd5_u8, 0x66_u8])
  CLSID_CODECAPI_AVEncStatAudioPeakPCMValue = LibC::GUID.new(0xdce7fd34_u32, 0xdc00_u16, 0x4c16_u16, StaticArray[0x82_u8, 0x1b_u8, 0x35_u8, 0xd9_u8, 0xeb_u8, 0x0_u8, 0xfb_u8, 0x1a_u8])
  CLSID_CODECAPI_AVEncStatAudioAveragePCMValue = LibC::GUID.new(0x979272f8_u32, 0xd17f_u16, 0x4e32_u16, StaticArray[0xbb_u8, 0x73_u8, 0x4e_u8, 0x73_u8, 0x1c_u8, 0x68_u8, 0xba_u8, 0x2d_u8])
  CLSID_CODECAPI_AVEncStatAudioAverageBPS = LibC::GUID.new(0xca6724db_u32, 0x7059_u16, 0x4351_u16, StaticArray[0x8b_u8, 0x43_u8, 0xf8_u8, 0x21_u8, 0x98_u8, 0x82_u8, 0x6a_u8, 0x14_u8])
  CLSID_CODECAPI_AVEncStatAverageBPS = LibC::GUID.new(0xca6724db_u32, 0x7059_u16, 0x4351_u16, StaticArray[0x8b_u8, 0x43_u8, 0xf8_u8, 0x21_u8, 0x98_u8, 0x82_u8, 0x6a_u8, 0x14_u8])
  CLSID_CODECAPI_AVEncStatHardwareProcessorUtilitization = LibC::GUID.new(0x995dc027_u32, 0xcb95_u16, 0x49e6_u16, StaticArray[0xb9_u8, 0x1b_u8, 0x59_u8, 0x67_u8, 0x75_u8, 0x3c_u8, 0xdc_u8, 0xb8_u8])
  CLSID_CODECAPI_AVEncStatHardwareBandwidthUtilitization = LibC::GUID.new(0x124ba9b_u32, 0xdc41_u16, 0x4826_u16, StaticArray[0xb4_u8, 0x5f_u8, 0x18_u8, 0xac_u8, 0x1_u8, 0xb3_u8, 0xd5_u8, 0xa8_u8])
  CLSID_CODECAPI_AVEncMPVGOPSize = LibC::GUID.new(0x95f31b26_u32, 0x95a4_u16, 0x41aa_u16, StaticArray[0x93_u8, 0x3_u8, 0x24_u8, 0x6a_u8, 0x7f_u8, 0xc6_u8, 0xee_u8, 0xf1_u8])
  CLSID_CODECAPI_AVEncMPVGOPOpen = LibC::GUID.new(0xb1d5d4a6_u32, 0x3300_u16, 0x49b1_u16, StaticArray[0xae_u8, 0x61_u8, 0xa0_u8, 0x99_u8, 0x37_u8, 0xab_u8, 0xe_u8, 0x49_u8])
  CLSID_CODECAPI_AVEncMPVDefaultBPictureCount = LibC::GUID.new(0x8d390aac_u32, 0xdc5c_u16, 0x4200_u16, StaticArray[0xb5_u8, 0x7f_u8, 0x81_u8, 0x4d_u8, 0x4_u8, 0xba_u8, 0xba_u8, 0xb2_u8])
  CLSID_CODECAPI_AVEncMPVProfile = LibC::GUID.new(0xdabb534a_u32, 0x1d99_u16, 0x4284_u16, StaticArray[0x97_u8, 0x5a_u8, 0xd9_u8, 0xe_u8, 0x22_u8, 0x39_u8, 0xba_u8, 0xa1_u8])
  CLSID_CODECAPI_AVEncMPVLevel = LibC::GUID.new(0x6ee40c40_u32, 0xa60c_u16, 0x41ef_u16, StaticArray[0x8f_u8, 0x50_u8, 0x37_u8, 0xc2_u8, 0x24_u8, 0x9e_u8, 0x2c_u8, 0xb3_u8])
  CLSID_CODECAPI_AVEncMPVFrameFieldMode = LibC::GUID.new(0xacb5de96_u32, 0x7b93_u16, 0x4c2f_u16, StaticArray[0x88_u8, 0x25_u8, 0xb0_u8, 0x29_u8, 0x5f_u8, 0xa9_u8, 0x3b_u8, 0xf4_u8])
  CLSID_CODECAPI_AVEncMPVAddSeqEndCode = LibC::GUID.new(0xa823178f_u32, 0x57df_u16, 0x4c7a_u16, StaticArray[0xb8_u8, 0xfd_u8, 0xe5_u8, 0xec_u8, 0x88_u8, 0x87_u8, 0x70_u8, 0x8d_u8])
  CLSID_CODECAPI_AVEncMPVGOPSInSeq = LibC::GUID.new(0x993410d4_u32, 0x2691_u16, 0x4192_u16, StaticArray[0x99_u8, 0x78_u8, 0x98_u8, 0xdc_u8, 0x26_u8, 0x3_u8, 0x66_u8, 0x9f_u8])
  CLSID_CODECAPI_AVEncMPVUseConcealmentMotionVectors = LibC::GUID.new(0xec770cf3_u32, 0x6908_u16, 0x4b4b_u16, StaticArray[0xaa_u8, 0x30_u8, 0x7f_u8, 0xb9_u8, 0x86_u8, 0x21_u8, 0x4f_u8, 0xea_u8])
  CLSID_CODECAPI_AVEncMPVSceneDetection = LibC::GUID.new(0x552799f1_u32, 0xdb4c_u16, 0x405b_u16, StaticArray[0x8a_u8, 0x3a_u8, 0xc9_u8, 0x3f_u8, 0x2d_u8, 0x6_u8, 0x74_u8, 0xdc_u8])
  CLSID_CODECAPI_AVEncMPVGenerateHeaderSeqExt = LibC::GUID.new(0xd5e78611_u32, 0x82d_u16, 0x4e6b_u16, StaticArray[0x98_u8, 0xaf_u8, 0xf_u8, 0x51_u8, 0xab_u8, 0x13_u8, 0x92_u8, 0x22_u8])
  CLSID_CODECAPI_AVEncMPVGenerateHeaderSeqDispExt = LibC::GUID.new(0x6437aa6f_u32, 0x5a3c_u16, 0x4de9_u16, StaticArray[0x8a_u8, 0x16_u8, 0x53_u8, 0xd9_u8, 0xc4_u8, 0xad_u8, 0x32_u8, 0x6f_u8])
  CLSID_CODECAPI_AVEncMPVGenerateHeaderPicExt = LibC::GUID.new(0x1b8464ab_u32, 0x944f_u16, 0x45f0_u16, StaticArray[0xb7_u8, 0x4e_u8, 0x3a_u8, 0x58_u8, 0xda_u8, 0xd1_u8, 0x1f_u8, 0x37_u8])
  CLSID_CODECAPI_AVEncMPVGenerateHeaderPicDispExt = LibC::GUID.new(0xc6412f84_u32, 0xc03f_u16, 0x4f40_u16, StaticArray[0xa0_u8, 0xc_u8, 0x42_u8, 0x93_u8, 0xdf_u8, 0x83_u8, 0x95_u8, 0xbb_u8])
  CLSID_CODECAPI_AVEncMPVGenerateHeaderSeqScaleExt = LibC::GUID.new(0x722d62f_u32, 0xdd59_u16, 0x4a86_u16, StaticArray[0x9c_u8, 0xd5_u8, 0x64_u8, 0x4f_u8, 0x8e_u8, 0x26_u8, 0x53_u8, 0xd8_u8])
  CLSID_CODECAPI_AVEncMPVScanPattern = LibC::GUID.new(0x7f8a478e_u32, 0x7bbb_u16, 0x4ae2_u16, StaticArray[0xb2_u8, 0xfc_u8, 0x96_u8, 0xd1_u8, 0x7f_u8, 0xc4_u8, 0xa2_u8, 0xd6_u8])
  CLSID_CODECAPI_AVEncMPVIntraDCPrecision = LibC::GUID.new(0xa0116151_u32, 0xcbc8_u16, 0x4af3_u16, StaticArray[0x97_u8, 0xdc_u8, 0xd0_u8, 0xc_u8, 0xce_u8, 0xb8_u8, 0x2d_u8, 0x79_u8])
  CLSID_CODECAPI_AVEncMPVQScaleType = LibC::GUID.new(0x2b79ebb7_u32, 0xf484_u16, 0x4af7_u16, StaticArray[0xbb_u8, 0x58_u8, 0xa2_u8, 0xa1_u8, 0x88_u8, 0xc5_u8, 0xcb_u8, 0xbe_u8])
  CLSID_CODECAPI_AVEncMPVIntraVLCTable = LibC::GUID.new(0xa2b83ff5_u32, 0x1a99_u16, 0x405a_u16, StaticArray[0xaf_u8, 0x95_u8, 0xc5_u8, 0x99_u8, 0x7d_u8, 0x55_u8, 0x8d_u8, 0x3a_u8])
  CLSID_CODECAPI_AVEncMPVQuantMatrixIntra = LibC::GUID.new(0x9bea04f3_u32, 0x6621_u16, 0x442c_u16, StaticArray[0x8b_u8, 0xa1_u8, 0x3a_u8, 0xc3_u8, 0x78_u8, 0x97_u8, 0x96_u8, 0x98_u8])
  CLSID_CODECAPI_AVEncMPVQuantMatrixNonIntra = LibC::GUID.new(0x87f441d8_u32, 0x997_u16, 0x4beb_u16, StaticArray[0xa0_u8, 0x8e_u8, 0x85_u8, 0x73_u8, 0xd4_u8, 0x9_u8, 0xcf_u8, 0x75_u8])
  CLSID_CODECAPI_AVEncMPVQuantMatrixChromaIntra = LibC::GUID.new(0x9eb9ecd4_u32, 0x18d_u16, 0x4ffd_u16, StaticArray[0x8f_u8, 0x2d_u8, 0x39_u8, 0xe4_u8, 0x9f_u8, 0x7_u8, 0xb1_u8, 0x7a_u8])
  CLSID_CODECAPI_AVEncMPVQuantMatrixChromaNonIntra = LibC::GUID.new(0x1415b6b1_u32, 0x362a_u16, 0x4338_u16, StaticArray[0xba_u8, 0x9a_u8, 0x1e_u8, 0xf5_u8, 0x87_u8, 0x3_u8, 0xc0_u8, 0x5b_u8])
  CLSID_CODECAPI_AVEncMPALayer = LibC::GUID.new(0x9d377230_u32, 0xf91b_u16, 0x453d_u16, StaticArray[0x9c_u8, 0xe0_u8, 0x78_u8, 0x44_u8, 0x54_u8, 0x14_u8, 0xc2_u8, 0x2d_u8])
  CLSID_CODECAPI_AVEncMPACodingMode = LibC::GUID.new(0xb16ade03_u32, 0x4b93_u16, 0x43d7_u16, StaticArray[0xa5_u8, 0x50_u8, 0x90_u8, 0xb4_u8, 0xfe_u8, 0x22_u8, 0x45_u8, 0x37_u8])
  CLSID_CODECAPI_AVEncMPACopyright = LibC::GUID.new(0xa6ae762a_u32, 0xd0a9_u16, 0x4454_u16, StaticArray[0xb8_u8, 0xef_u8, 0xf2_u8, 0xdb_u8, 0xee_u8, 0xfd_u8, 0xd3_u8, 0xbd_u8])
  CLSID_CODECAPI_AVEncMPAOriginalBitstream = LibC::GUID.new(0x3cfb7855_u32, 0x9cc9_u16, 0x47ff_u16, StaticArray[0xb8_u8, 0x29_u8, 0xb3_u8, 0x67_u8, 0x86_u8, 0xc9_u8, 0x23_u8, 0x46_u8])
  CLSID_CODECAPI_AVEncMPAEnableRedundancyProtection = LibC::GUID.new(0x5e54b09e_u32, 0xb2e7_u16, 0x4973_u16, StaticArray[0xa8_u8, 0x9b_u8, 0xb_u8, 0x36_u8, 0x50_u8, 0xa3_u8, 0xbe_u8, 0xda_u8])
  CLSID_CODECAPI_AVEncMPAPrivateUserBit = LibC::GUID.new(0xafa505ce_u32, 0xc1e3_u16, 0x4e3d_u16, StaticArray[0x85_u8, 0x1b_u8, 0x61_u8, 0xb7_u8, 0x0_u8, 0xe5_u8, 0xe6_u8, 0xcc_u8])
  CLSID_CODECAPI_AVEncMPAEmphasisType = LibC::GUID.new(0x2d59fcda_u32, 0xbf4e_u16, 0x4ed6_u16, StaticArray[0xb5_u8, 0xdf_u8, 0x5b_u8, 0x3_u8, 0xb3_u8, 0x6b_u8, 0xa_u8, 0x1f_u8])
  CLSID_CODECAPI_AVEncDDService = LibC::GUID.new(0xd2e1bec7_u32, 0x5172_u16, 0x4d2a_u16, StaticArray[0xa5_u8, 0xe_u8, 0x2f_u8, 0x3b_u8, 0x82_u8, 0xb1_u8, 0xdd_u8, 0xf8_u8])
  CLSID_CODECAPI_AVEncDDDialogNormalization = LibC::GUID.new(0xd7055acf_u32, 0xf125_u16, 0x437d_u16, StaticArray[0xa7_u8, 0x4_u8, 0x79_u8, 0xc7_u8, 0x9f_u8, 0x4_u8, 0x4_u8, 0xa8_u8])
  CLSID_CODECAPI_AVEncDDCentreDownMixLevel = LibC::GUID.new(0xe285072c_u32, 0xc958_u16, 0x4a81_u16, StaticArray[0xaf_u8, 0xd2_u8, 0xe5_u8, 0xe0_u8, 0xda_u8, 0xf1_u8, 0xb1_u8, 0x48_u8])
  CLSID_CODECAPI_AVEncDDSurroundDownMixLevel = LibC::GUID.new(0x7b20d6e5_u32, 0xbcf_u16, 0x4273_u16, StaticArray[0xa4_u8, 0x87_u8, 0x50_u8, 0x6b_u8, 0x4_u8, 0x79_u8, 0x97_u8, 0xe9_u8])
  CLSID_CODECAPI_AVEncDDProductionInfoExists = LibC::GUID.new(0xb0b7fe5f_u32, 0xb6ab_u16, 0x4f40_u16, StaticArray[0x96_u8, 0x4d_u8, 0x8d_u8, 0x91_u8, 0xf1_u8, 0x7c_u8, 0x19_u8, 0xe8_u8])
  CLSID_CODECAPI_AVEncDDProductionRoomType = LibC::GUID.new(0xdad7ad60_u32, 0x23d8_u16, 0x4ab7_u16, StaticArray[0xa2_u8, 0x84_u8, 0x55_u8, 0x69_u8, 0x86_u8, 0xd8_u8, 0xa6_u8, 0xfe_u8])
  CLSID_CODECAPI_AVEncDDProductionMixLevel = LibC::GUID.new(0x301d103a_u32, 0xcbf9_u16, 0x4776_u16, StaticArray[0x88_u8, 0x99_u8, 0x7c_u8, 0x15_u8, 0xb4_u8, 0x61_u8, 0xab_u8, 0x26_u8])
  CLSID_CODECAPI_AVEncDDCopyright = LibC::GUID.new(0x8694f076_u32, 0xcd75_u16, 0x481d_u16, StaticArray[0xa5_u8, 0xc6_u8, 0xa9_u8, 0x4_u8, 0xdc_u8, 0xc8_u8, 0x28_u8, 0xf0_u8])
  CLSID_CODECAPI_AVEncDDOriginalBitstream = LibC::GUID.new(0x966ae800_u32, 0x5bd3_u16, 0x4ff9_u16, StaticArray[0x95_u8, 0xb9_u8, 0xd3_u8, 0x5_u8, 0x66_u8, 0x27_u8, 0x38_u8, 0x56_u8])
  CLSID_CODECAPI_AVEncDDDigitalDeemphasis = LibC::GUID.new(0xe024a2c2_u32, 0x947c_u16, 0x45ac_u16, StaticArray[0x87_u8, 0xd8_u8, 0xf1_u8, 0x3_u8, 0xc_u8, 0x5c_u8, 0x0_u8, 0x82_u8])
  CLSID_CODECAPI_AVEncDDDCHighPassFilter = LibC::GUID.new(0x9565239f_u32, 0x861c_u16, 0x4ac8_u16, StaticArray[0xbf_u8, 0xda_u8, 0xe0_u8, 0xc_u8, 0xb4_u8, 0xdb_u8, 0x85_u8, 0x48_u8])
  CLSID_CODECAPI_AVEncDDChannelBWLowPassFilter = LibC::GUID.new(0xe197821d_u32, 0xd2e7_u16, 0x43e2_u16, StaticArray[0xad_u8, 0x2c_u8, 0x0_u8, 0x58_u8, 0x2f_u8, 0x51_u8, 0x85_u8, 0x45_u8])
  CLSID_CODECAPI_AVEncDDLFELowPassFilter = LibC::GUID.new(0xd3b80f6f_u32, 0x9d15_u16, 0x45e5_u16, StaticArray[0x91_u8, 0xbe_u8, 0x1_u8, 0x9c_u8, 0x3f_u8, 0xab_u8, 0x1f_u8, 0x1_u8])
  CLSID_CODECAPI_AVEncDDSurround90DegreeePhaseShift = LibC::GUID.new(0x25ecec9d_u32, 0x3553_u16, 0x42c0_u16, StaticArray[0xbb_u8, 0x56_u8, 0xd2_u8, 0x57_u8, 0x92_u8, 0x10_u8, 0x4f_u8, 0x80_u8])
  CLSID_CODECAPI_AVEncDDSurround3dBAttenuation = LibC::GUID.new(0x4d43b99d_u32, 0x31e2_u16, 0x48b9_u16, StaticArray[0xbf_u8, 0x2e_u8, 0x5c_u8, 0xbf_u8, 0x1a_u8, 0x57_u8, 0x27_u8, 0x84_u8])
  CLSID_CODECAPI_AVEncDDDynamicRangeCompressionControl = LibC::GUID.new(0xcfc2ff6d_u32, 0x79b8_u16, 0x4b8d_u16, StaticArray[0xa8_u8, 0xaa_u8, 0xa0_u8, 0xc9_u8, 0xbd_u8, 0x1c_u8, 0x29_u8, 0x40_u8])
  CLSID_CODECAPI_AVEncDDRFPreEmphasisFilter = LibC::GUID.new(0x21af44c0_u32, 0x244e_u16, 0x4f3d_u16, StaticArray[0xa2_u8, 0xcc_u8, 0x3d_u8, 0x30_u8, 0x68_u8, 0xb2_u8, 0xe7_u8, 0x3f_u8])
  CLSID_CODECAPI_AVEncDDSurroundExMode = LibC::GUID.new(0x91607cee_u32, 0xdbdd_u16, 0x4eb6_u16, StaticArray[0xbc_u8, 0xa2_u8, 0xaa_u8, 0xdf_u8, 0xaf_u8, 0xa3_u8, 0xdd_u8, 0x68_u8])
  CLSID_CODECAPI_AVEncDDPreferredStereoDownMixMode = LibC::GUID.new(0x7f4e6b31_u32, 0x9185_u16, 0x403d_u16, StaticArray[0xb0_u8, 0xa2_u8, 0x76_u8, 0x37_u8, 0x43_u8, 0xe6_u8, 0xf0_u8, 0x63_u8])
  CLSID_CODECAPI_AVEncDDLtRtCenterMixLvl_x10 = LibC::GUID.new(0xdca128a2_u32, 0x491f_u16, 0x4600_u16, StaticArray[0xb2_u8, 0xda_u8, 0x76_u8, 0xe3_u8, 0x34_u8, 0x4b_u8, 0x41_u8, 0x97_u8])
  CLSID_CODECAPI_AVEncDDLtRtSurroundMixLvl_x10 = LibC::GUID.new(0x212246c7_u32, 0x3d2c_u16, 0x4dfa_u16, StaticArray[0xbc_u8, 0x21_u8, 0x65_u8, 0x2a_u8, 0x90_u8, 0x98_u8, 0x69_u8, 0xd_u8])
  CLSID_CODECAPI_AVEncDDLoRoCenterMixLvl_x10 = LibC::GUID.new(0x1cfba222_u32, 0x25b3_u16, 0x4bf4_u16, StaticArray[0x9b_u8, 0xfd_u8, 0xe7_u8, 0x11_u8, 0x12_u8, 0x67_u8, 0x85_u8, 0x8c_u8])
  CLSID_CODECAPI_AVEncDDLoRoSurroundMixLvl_x10 = LibC::GUID.new(0xe725cff6_u32, 0xeb56_u16, 0x40c7_u16, StaticArray[0x84_u8, 0x50_u8, 0x2b_u8, 0x93_u8, 0x67_u8, 0xe9_u8, 0x15_u8, 0x55_u8])
  CLSID_CODECAPI_AVEncDDAtoDConverterType = LibC::GUID.new(0x719f9612_u32, 0x81a1_u16, 0x47e0_u16, StaticArray[0x9a_u8, 0x5_u8, 0xd9_u8, 0x4a_u8, 0xd5_u8, 0xfc_u8, 0xa9_u8, 0x48_u8])
  CLSID_CODECAPI_AVEncDDHeadphoneMode = LibC::GUID.new(0x4052dbec_u32, 0x52f5_u16, 0x42f5_u16, StaticArray[0x9b_u8, 0x0_u8, 0xd1_u8, 0x34_u8, 0xb1_u8, 0x34_u8, 0x1b_u8, 0x9d_u8])
  CLSID_CODECAPI_AVEncWMVKeyFrameDistance = LibC::GUID.new(0x5569055e_u32, 0xe268_u16, 0x4771_u16, StaticArray[0xb8_u8, 0x3e_u8, 0x95_u8, 0x55_u8, 0xea_u8, 0x28_u8, 0xae_u8, 0xd3_u8])
  CLSID_CODECAPI_AVEncWMVInterlacedEncoding = LibC::GUID.new(0xe3d00f8a_u32, 0xc6f5_u16, 0x4e14_u16, StaticArray[0xa5_u8, 0x88_u8, 0xe_u8, 0xc8_u8, 0x7a_u8, 0x72_u8, 0x6f_u8, 0x9b_u8])
  CLSID_CODECAPI_AVEncWMVDecoderComplexity = LibC::GUID.new(0xf32c0dab_u32, 0xf3cb_u16, 0x4217_u16, StaticArray[0xb7_u8, 0x9f_u8, 0x87_u8, 0x62_u8, 0x76_u8, 0x8b_u8, 0x5f_u8, 0x67_u8])
  CLSID_CODECAPI_AVEncWMVKeyFrameBufferLevelMarker = LibC::GUID.new(0x51ff1115_u32, 0x33ac_u16, 0x426c_u16, StaticArray[0xa1_u8, 0xb1_u8, 0x9_u8, 0x32_u8, 0x1b_u8, 0xdf_u8, 0x96_u8, 0xb4_u8])
  CLSID_CODECAPI_AVEncWMVProduceDummyFrames = LibC::GUID.new(0xd669d001_u32, 0x183c_u16, 0x42e3_u16, StaticArray[0xa3_u8, 0xca_u8, 0x2f_u8, 0x45_u8, 0x86_u8, 0xd2_u8, 0x39_u8, 0x6c_u8])
  CLSID_CODECAPI_AVEncStatWMVCBAvg = LibC::GUID.new(0x6aa6229f_u32, 0xd602_u16, 0x4b9d_u16, StaticArray[0xb6_u8, 0x8c_u8, 0xc1_u8, 0xad_u8, 0x78_u8, 0x88_u8, 0x4b_u8, 0xef_u8])
  CLSID_CODECAPI_AVEncStatWMVCBMax = LibC::GUID.new(0xe976bef8_u32, 0xfe_u16, 0x44b4_u16, StaticArray[0xb6_u8, 0x25_u8, 0x8f_u8, 0x23_u8, 0x8b_u8, 0xc0_u8, 0x34_u8, 0x99_u8])
  CLSID_CODECAPI_AVEncStatWMVDecoderComplexityProfile = LibC::GUID.new(0x89e69fc3_u32, 0xf9b_u16, 0x436c_u16, StaticArray[0x97_u8, 0x4a_u8, 0xdf_u8, 0x82_u8, 0x12_u8, 0x27_u8, 0xc9_u8, 0xd_u8])
  CLSID_CODECAPI_AVEncStatMPVSkippedEmptyFrames = LibC::GUID.new(0x32195fd3_u32, 0x590d_u16, 0x4812_u16, StaticArray[0xa7_u8, 0xed_u8, 0x6d_u8, 0x63_u8, 0x9a_u8, 0x1f_u8, 0x97_u8, 0x11_u8])
  CLSID_CODECAPI_AVEncMP12PktzSTDBuffer = LibC::GUID.new(0xb751bd0_u32, 0x819e_u16, 0x478c_u16, StaticArray[0x94_u8, 0x35_u8, 0x75_u8, 0x20_u8, 0x89_u8, 0x26_u8, 0xb3_u8, 0x77_u8])
  CLSID_CODECAPI_AVEncMP12PktzStreamID = LibC::GUID.new(0xc834d038_u32, 0xf5e8_u16, 0x4408_u16, StaticArray[0x9b_u8, 0x60_u8, 0x88_u8, 0xf3_u8, 0x64_u8, 0x93_u8, 0xfe_u8, 0xdf_u8])
  CLSID_CODECAPI_AVEncMP12PktzInitialPTS = LibC::GUID.new(0x2a4f2065_u32, 0x9a63_u16, 0x4d20_u16, StaticArray[0xae_u8, 0x22_u8, 0xa_u8, 0x1b_u8, 0xc8_u8, 0x96_u8, 0xa3_u8, 0x15_u8])
  CLSID_CODECAPI_AVEncMP12PktzPacketSize = LibC::GUID.new(0xab71347a_u32, 0x1332_u16, 0x4dde_u16, StaticArray[0xa0_u8, 0xe5_u8, 0xcc_u8, 0xf7_u8, 0xda_u8, 0x8a_u8, 0xf_u8, 0x22_u8])
  CLSID_CODECAPI_AVEncMP12PktzCopyright = LibC::GUID.new(0xc8f4b0c1_u32, 0x94c_u16, 0x43c7_u16, StaticArray[0x8e_u8, 0x68_u8, 0xa5_u8, 0x95_u8, 0x40_u8, 0x5a_u8, 0x6e_u8, 0xf8_u8])
  CLSID_CODECAPI_AVEncMP12PktzOriginal = LibC::GUID.new(0x6b178416_u32, 0x31b9_u16, 0x4964_u16, StaticArray[0x94_u8, 0xcb_u8, 0x6b_u8, 0xff_u8, 0x86_u8, 0x6c_u8, 0xdf_u8, 0x83_u8])
  CLSID_CODECAPI_AVEncMP12MuxPacketOverhead = LibC::GUID.new(0xe40bd720_u32, 0x3955_u16, 0x4453_u16, StaticArray[0xac_u8, 0xf9_u8, 0xb7_u8, 0x91_u8, 0x32_u8, 0xa3_u8, 0x8f_u8, 0xa0_u8])
  CLSID_CODECAPI_AVEncMP12MuxNumStreams = LibC::GUID.new(0xf7164a41_u32, 0xdced_u16, 0x4659_u16, StaticArray[0xa8_u8, 0xf2_u8, 0xfb_u8, 0x69_u8, 0x3f_u8, 0x2a_u8, 0x4c_u8, 0xd0_u8])
  CLSID_CODECAPI_AVEncMP12MuxEarliestPTS = LibC::GUID.new(0x157232b6_u32, 0xf809_u16, 0x474e_u16, StaticArray[0x94_u8, 0x64_u8, 0xa7_u8, 0xf9_u8, 0x30_u8, 0x14_u8, 0xa8_u8, 0x17_u8])
  CLSID_CODECAPI_AVEncMP12MuxLargestPacketSize = LibC::GUID.new(0x35ceb711_u32, 0xf461_u16, 0x4b92_u16, StaticArray[0xa4_u8, 0xef_u8, 0x17_u8, 0xb6_u8, 0x84_u8, 0x1e_u8, 0xd2_u8, 0x54_u8])
  CLSID_CODECAPI_AVEncMP12MuxInitialSCR = LibC::GUID.new(0x3433ad21_u32, 0x1b91_u16, 0x4a0b_u16, StaticArray[0xb1_u8, 0x90_u8, 0x2b_u8, 0x77_u8, 0x6_u8, 0x3b_u8, 0x63_u8, 0xa4_u8])
  CLSID_CODECAPI_AVEncMP12MuxMuxRate = LibC::GUID.new(0xee047c72_u32, 0x4bdb_u16, 0x4a9d_u16, StaticArray[0x8e_u8, 0x21_u8, 0x41_u8, 0x92_u8, 0x6c_u8, 0x82_u8, 0x3d_u8, 0xa7_u8])
  CLSID_CODECAPI_AVEncMP12MuxPackSize = LibC::GUID.new(0xf916053a_u32, 0x1ce8_u16, 0x4faf_u16, StaticArray[0xaa_u8, 0xb_u8, 0xba_u8, 0x31_u8, 0xc8_u8, 0x0_u8, 0x34_u8, 0xb8_u8])
  CLSID_CODECAPI_AVEncMP12MuxSysSTDBufferBound = LibC::GUID.new(0x35746903_u32, 0xb545_u16, 0x43e7_u16, StaticArray[0xbb_u8, 0x35_u8, 0xc5_u8, 0xe0_u8, 0xa7_u8, 0xd5_u8, 0x9_u8, 0x3c_u8])
  CLSID_CODECAPI_AVEncMP12MuxSysRateBound = LibC::GUID.new(0x5f0428a_u32, 0xee30_u16, 0x489d_u16, StaticArray[0xae_u8, 0x28_u8, 0x20_u8, 0x5c_u8, 0x72_u8, 0x44_u8, 0x67_u8, 0x10_u8])
  CLSID_CODECAPI_AVEncMP12MuxTargetPacketizer = LibC::GUID.new(0xd862212a_u32, 0x2015_u16, 0x45dd_u16, StaticArray[0x9a_u8, 0x32_u8, 0x1b_u8, 0x3a_u8, 0xa8_u8, 0x82_u8, 0x5_u8, 0xa0_u8])
  CLSID_CODECAPI_AVEncMP12MuxSysFixed = LibC::GUID.new(0xcefb987e_u32, 0x894f_u16, 0x452e_u16, StaticArray[0x8f_u8, 0x89_u8, 0xa4_u8, 0xef_u8, 0x8c_u8, 0xec_u8, 0x6_u8, 0x3a_u8])
  CLSID_CODECAPI_AVEncMP12MuxSysCSPS = LibC::GUID.new(0x7952ff45_u32, 0x9c0d_u16, 0x4822_u16, StaticArray[0xbc_u8, 0x82_u8, 0x8a_u8, 0xd7_u8, 0x72_u8, 0xe0_u8, 0x29_u8, 0x93_u8])
  CLSID_CODECAPI_AVEncMP12MuxSysVideoLock = LibC::GUID.new(0xb8296408_u32, 0x2430_u16, 0x4d37_u16, StaticArray[0xa2_u8, 0xa1_u8, 0x95_u8, 0xb3_u8, 0xe4_u8, 0x35_u8, 0xa9_u8, 0x1d_u8])
  CLSID_CODECAPI_AVEncMP12MuxSysAudioLock = LibC::GUID.new(0xfbb5752_u32, 0x1d43_u16, 0x47bf_u16, StaticArray[0xbd_u8, 0x79_u8, 0xf2_u8, 0x29_u8, 0x3d_u8, 0x8c_u8, 0xe3_u8, 0x37_u8])
  CLSID_CODECAPI_AVEncMP12MuxDVDNavPacks = LibC::GUID.new(0xc7607ced_u32, 0x8cf1_u16, 0x4a99_u16, StaticArray[0x83_u8, 0xa1_u8, 0xee_u8, 0x54_u8, 0x61_u8, 0xbe_u8, 0x35_u8, 0x74_u8])
  CLSID_CODECAPI_AVDecCommonInputFormat = LibC::GUID.new(0xe5005239_u32, 0xbd89_u16, 0x4be3_u16, StaticArray[0x9c_u8, 0xf_u8, 0x5d_u8, 0xde_u8, 0x31_u8, 0x79_u8, 0x88_u8, 0xcc_u8])
  CLSID_CODECAPI_AVDecCommonOutputFormat = LibC::GUID.new(0x3c790028_u32, 0xc0ce_u16, 0x4256_u16, StaticArray[0xb1_u8, 0xa2_u8, 0x1b_u8, 0xf_u8, 0xc8_u8, 0xb1_u8, 0xdc_u8, 0xdc_u8])
  CLSID_CODECAPI_AVDecCommonMeanBitRate = LibC::GUID.new(0x59488217_u32, 0x7a_u16, 0x4f7a_u16, StaticArray[0x8e_u8, 0x41_u8, 0x5c_u8, 0x48_u8, 0xb1_u8, 0xea_u8, 0xc5_u8, 0xc6_u8])
  CLSID_CODECAPI_AVDecCommonMeanBitRateInterval = LibC::GUID.new(0xee437c6_u32, 0x38a7_u16, 0x4c5c_u16, StaticArray[0x94_u8, 0x4c_u8, 0x68_u8, 0xab_u8, 0x42_u8, 0x11_u8, 0x6b_u8, 0x85_u8])
  CLSID_CODECAPI_GUID_AVDecAudioOutputFormat_PCM_Stereo_MatrixEncoded = LibC::GUID.new(0x696e1d30_u32, 0x548f_u16, 0x4036_u16, StaticArray[0x82_u8, 0x5f_u8, 0x70_u8, 0x26_u8, 0xc6_u8, 0x0_u8, 0x11_u8, 0xbd_u8])
  CLSID_CODECAPI_GUID_AVDecAudioOutputFormat_PCM = LibC::GUID.new(0x696e1d31_u32, 0x548f_u16, 0x4036_u16, StaticArray[0x82_u8, 0x5f_u8, 0x70_u8, 0x26_u8, 0xc6_u8, 0x0_u8, 0x11_u8, 0xbd_u8])
  CLSID_CODECAPI_GUID_AVDecAudioOutputFormat_SPDIF_PCM = LibC::GUID.new(0x696e1d32_u32, 0x548f_u16, 0x4036_u16, StaticArray[0x82_u8, 0x5f_u8, 0x70_u8, 0x26_u8, 0xc6_u8, 0x0_u8, 0x11_u8, 0xbd_u8])
  CLSID_CODECAPI_GUID_AVDecAudioOutputFormat_SPDIF_Bitstream = LibC::GUID.new(0x696e1d33_u32, 0x548f_u16, 0x4036_u16, StaticArray[0x82_u8, 0x5f_u8, 0x70_u8, 0x26_u8, 0xc6_u8, 0x0_u8, 0x11_u8, 0xbd_u8])
  CLSID_CODECAPI_GUID_AVDecAudioOutputFormat_PCM_Headphones = LibC::GUID.new(0x696e1d34_u32, 0x548f_u16, 0x4036_u16, StaticArray[0x82_u8, 0x5f_u8, 0x70_u8, 0x26_u8, 0xc6_u8, 0x0_u8, 0x11_u8, 0xbd_u8])
  CLSID_CODECAPI_GUID_AVDecAudioOutputFormat_PCM_Stereo_Auto = LibC::GUID.new(0x696e1d35_u32, 0x548f_u16, 0x4036_u16, StaticArray[0x82_u8, 0x5f_u8, 0x70_u8, 0x26_u8, 0xc6_u8, 0x0_u8, 0x11_u8, 0xbd_u8])
  CLSID_CODECAPI_AVDecVideoImageSize = LibC::GUID.new(0x5ee5747c_u32, 0x6801_u16, 0x4cab_u16, StaticArray[0xaa_u8, 0xf1_u8, 0x62_u8, 0x48_u8, 0xfa_u8, 0x84_u8, 0x1b_u8, 0xa4_u8])
  CLSID_CODECAPI_AVDecVideoPixelAspectRatio = LibC::GUID.new(0xb0cf8245_u32, 0xf32d_u16, 0x41df_u16, StaticArray[0xb0_u8, 0x2c_u8, 0x87_u8, 0xbd_u8, 0x30_u8, 0x4d_u8, 0x12_u8, 0xab_u8])
  CLSID_CODECAPI_AVDecVideoInputScanType = LibC::GUID.new(0x38477e1f_u32, 0xea7_u16, 0x42cd_u16, StaticArray[0x8c_u8, 0xd1_u8, 0x13_u8, 0xc_u8, 0xed_u8, 0x57_u8, 0xc5_u8, 0x80_u8])
  CLSID_CODECAPI_AVDecVideoSWPowerLevel = LibC::GUID.new(0xfb5d2347_u32, 0x4dd8_u16, 0x4509_u16, StaticArray[0xae_u8, 0xd0_u8, 0xdb_u8, 0x5f_u8, 0xa9_u8, 0xaa_u8, 0x93_u8, 0xf4_u8])
  CLSID_CODECAPI_GUID_AVDecAudioInputWMA = LibC::GUID.new(0xc95e8dcf_u32, 0x4058_u16, 0x4204_u16, StaticArray[0x8c_u8, 0x42_u8, 0xcb_u8, 0x24_u8, 0xd9_u8, 0x1e_u8, 0x4b_u8, 0x9b_u8])
  CLSID_CODECAPI_GUID_AVDecAudioInputWMAPro = LibC::GUID.new(0x128b7c7_u32, 0xda72_u16, 0x4fe3_u16, StaticArray[0xbe_u8, 0xf8_u8, 0x5c_u8, 0x52_u8, 0xe3_u8, 0x55_u8, 0x77_u8, 0x4_u8])
  CLSID_CODECAPI_GUID_AVDecAudioInputDolby = LibC::GUID.new(0x8e4228a0_u32, 0xf000_u16, 0x4e0b_u16, StaticArray[0x8f_u8, 0x54_u8, 0xab_u8, 0x8d_u8, 0x24_u8, 0xad_u8, 0x61_u8, 0xa2_u8])
  CLSID_CODECAPI_GUID_AVDecAudioInputDTS = LibC::GUID.new(0x600bc0ca_u32, 0x6a1f_u16, 0x4e91_u16, StaticArray[0xb2_u8, 0x41_u8, 0x1b_u8, 0xbe_u8, 0xb1_u8, 0xcb_u8, 0x19_u8, 0xe0_u8])
  CLSID_CODECAPI_GUID_AVDecAudioInputPCM = LibC::GUID.new(0xf2421da5_u32, 0xbbb4_u16, 0x4cd5_u16, StaticArray[0xa9_u8, 0x96_u8, 0x93_u8, 0x3c_u8, 0x6b_u8, 0x5d_u8, 0x13_u8, 0x47_u8])
  CLSID_CODECAPI_GUID_AVDecAudioInputMPEG = LibC::GUID.new(0x91106f36_u32, 0x2c5_u16, 0x4f75_u16, StaticArray[0x97_u8, 0x19_u8, 0x3b_u8, 0x7a_u8, 0xbf_u8, 0x75_u8, 0xe1_u8, 0xf6_u8])
  CLSID_CODECAPI_GUID_AVDecAudioInputAAC = LibC::GUID.new(0x97df7828_u32, 0xb94a_u16, 0x47e2_u16, StaticArray[0xa4_u8, 0xbc_u8, 0x51_u8, 0x19_u8, 0x4d_u8, 0xb2_u8, 0x2a_u8, 0x4d_u8])
  CLSID_CODECAPI_GUID_AVDecAudioInputHEAAC = LibC::GUID.new(0x16efb4aa_u32, 0x330e_u16, 0x4f5c_u16, StaticArray[0x98_u8, 0xa8_u8, 0xcf_u8, 0x6a_u8, 0xc5_u8, 0x5c_u8, 0xbe_u8, 0x60_u8])
  CLSID_CODECAPI_GUID_AVDecAudioInputDolbyDigitalPlus = LibC::GUID.new(0x803e185_u32, 0x8f5d_u16, 0x47f5_u16, StaticArray[0x99_u8, 0x8_u8, 0x19_u8, 0xa5_u8, 0xbb_u8, 0xc9_u8, 0xfe_u8, 0x34_u8])
  CLSID_CODECAPI_AVDecAACDownmixMode = LibC::GUID.new(0x1274475_u32, 0xf6bb_u16, 0x4017_u16, StaticArray[0xb0_u8, 0x84_u8, 0x81_u8, 0xa7_u8, 0x63_u8, 0xc9_u8, 0x42_u8, 0xd4_u8])
  CLSID_CODECAPI_AVDecHEAACDynamicRangeControl = LibC::GUID.new(0x287c8abe_u32, 0x69a4_u16, 0x4d39_u16, StaticArray[0x80_u8, 0x80_u8, 0xd3_u8, 0xd9_u8, 0x71_u8, 0x21_u8, 0x78_u8, 0xa0_u8])
  CLSID_CODECAPI_AVDecAudioDualMono = LibC::GUID.new(0x4a52cda8_u32, 0x30f8_u16, 0x4216_u16, StaticArray[0xbe_u8, 0xf_u8, 0xba_u8, 0xb_u8, 0x20_u8, 0x25_u8, 0x92_u8, 0x1d_u8])
  CLSID_CODECAPI_AVDecAudioDualMonoReproMode = LibC::GUID.new(0xa5106186_u32, 0xcc94_u16, 0x4bc9_u16, StaticArray[0x8c_u8, 0xd9_u8, 0xaa_u8, 0x2f_u8, 0x61_u8, 0xf6_u8, 0x80_u8, 0x7e_u8])
  CLSID_CODECAPI_AVAudioChannelCount = LibC::GUID.new(0x1d3583c4_u32, 0x1583_u16, 0x474e_u16, StaticArray[0xb7_u8, 0x1a_u8, 0x5e_u8, 0xe4_u8, 0x63_u8, 0xc1_u8, 0x98_u8, 0xe4_u8])
  CLSID_CODECAPI_AVAudioChannelConfig = LibC::GUID.new(0x17f89cb3_u32, 0xc38d_u16, 0x4368_u16, StaticArray[0x9e_u8, 0xde_u8, 0x63_u8, 0xb9_u8, 0x4d_u8, 0x17_u8, 0x7f_u8, 0x9f_u8])
  CLSID_CODECAPI_AVAudioSampleRate = LibC::GUID.new(0x971d2723_u32, 0x1acb_u16, 0x42e7_u16, StaticArray[0x85_u8, 0x5c_u8, 0x52_u8, 0xa_u8, 0x4b_u8, 0x70_u8, 0xa5_u8, 0xf2_u8])
  CLSID_CODECAPI_AVDDSurroundMode = LibC::GUID.new(0x99f2f386_u32, 0x98d1_u16, 0x4452_u16, StaticArray[0xa1_u8, 0x63_u8, 0xab_u8, 0xc7_u8, 0x8a_u8, 0x6e_u8, 0xb7_u8, 0x70_u8])
  CLSID_CODECAPI_AVDecDDOperationalMode = LibC::GUID.new(0xd6d6c6d1_u32, 0x64e_u16, 0x4fdd_u16, StaticArray[0xa4_u8, 0xe_u8, 0x3e_u8, 0xcb_u8, 0xfc_u8, 0xb7_u8, 0xeb_u8, 0xd0_u8])
  CLSID_CODECAPI_AVDecDDMatrixDecodingMode = LibC::GUID.new(0xddc811a5_u32, 0x4ed_u16, 0x4bf3_u16, StaticArray[0xa0_u8, 0xca_u8, 0xd0_u8, 0x4_u8, 0x49_u8, 0xf9_u8, 0x35_u8, 0x5f_u8])
  CLSID_CODECAPI_AVDecDDDynamicRangeScaleHigh = LibC::GUID.new(0x50196c21_u32, 0x1f33_u16, 0x4af5_u16, StaticArray[0xb2_u8, 0x96_u8, 0x11_u8, 0x42_u8, 0x6d_u8, 0x6c_u8, 0x87_u8, 0x89_u8])
  CLSID_CODECAPI_AVDecDDDynamicRangeScaleLow = LibC::GUID.new(0x44e62e4_u32, 0x11a5_u16, 0x42d5_u16, StaticArray[0xa3_u8, 0xb2_u8, 0x3b_u8, 0xb2_u8, 0xc7_u8, 0xc2_u8, 0xd7_u8, 0xcf_u8])
  CLSID_CODECAPI_AVDecDDStereoDownMixMode = LibC::GUID.new(0x6ce4122c_u32, 0x3ee9_u16, 0x4182_u16, StaticArray[0xb4_u8, 0xae_u8, 0xc1_u8, 0xf_u8, 0xc0_u8, 0x88_u8, 0x64_u8, 0x9d_u8])
  CLSID_CODECAPI_AVDSPLoudnessEqualization = LibC::GUID.new(0x8afd1a15_u32, 0x1812_u16, 0x4cbf_u16, StaticArray[0x93_u8, 0x19_u8, 0x43_u8, 0x3a_u8, 0x5b_u8, 0x2a_u8, 0x3b_u8, 0x27_u8])
  CLSID_CODECAPI_AVDSPSpeakerFill = LibC::GUID.new(0x5612bca1_u32, 0x56da_u16, 0x4582_u16, StaticArray[0x8d_u8, 0xa1_u8, 0xca_u8, 0x80_u8, 0x90_u8, 0xf9_u8, 0x27_u8, 0x68_u8])
  CLSID_CODECAPI_AVPriorityControl = LibC::GUID.new(0x54ba3dc8_u32, 0xbdde_u16, 0x4329_u16, StaticArray[0xb1_u8, 0x87_u8, 0x20_u8, 0x18_u8, 0xbc_u8, 0x5c_u8, 0x2b_u8, 0xa1_u8])
  CLSID_CODECAPI_AVRealtimeControl = LibC::GUID.new(0x6f440632_u32, 0xc4ad_u16, 0x4bf7_u16, StaticArray[0x9e_u8, 0x52_u8, 0x45_u8, 0x69_u8, 0x42_u8, 0xb4_u8, 0x54_u8, 0xb0_u8])
  CLSID_CODECAPI_AVEncNoInputCopy = LibC::GUID.new(0xd2b46a2a_u32, 0xe8ee_u16, 0x4ec5_u16, StaticArray[0x86_u8, 0x9e_u8, 0x44_u8, 0x9b_u8, 0x6c_u8, 0x62_u8, 0xc8_u8, 0x1a_u8])
  CLSID_CODECAPI_AVEncChromaEncodeMode = LibC::GUID.new(0x8a47ab5a_u32, 0x4798_u16, 0x4c93_u16, StaticArray[0xb5_u8, 0xa5_u8, 0x55_u8, 0x4f_u8, 0x9a_u8, 0x3b_u8, 0x9f_u8, 0x50_u8])
  CLSID_CODECAPI_AVEncProgressiveUpdateTime = LibC::GUID.new(0x649faf66_u32, 0xafc6_u16, 0x4828_u16, StaticArray[0x8f_u8, 0xdc_u8, 0x7_u8, 0x71_u8, 0xcd_u8, 0x9a_u8, 0xb1_u8, 0x7d_u8])
  CLSID_CODECAPI_AVEncChromaUpdateTime = LibC::GUID.new(0x4b4fd998_u32, 0x4274_u16, 0x40bb_u16, StaticArray[0x8e_u8, 0xe4_u8, 0x7_u8, 0x55_u8, 0x3e_u8, 0x7e_u8, 0x2d_u8, 0x3a_u8])
  CLSID_KSPROPSETID_OPMVideoOutput = LibC::GUID.new(0x6f414bb_u32, 0xf43a_u16, 0x4fe2_u16, StaticArray[0xa5_u8, 0x66_u8, 0x77_u8, 0x4b_u8, 0x4c_u8, 0x81_u8, 0xf0_u8, 0xdb_u8])

  alias PDXVAHDSW_CreateDevice = Proc(IDirect3DDevice9Ex, LibC::HANDLE*, HRESULT)
  alias PDXVAHDSW_ProposeVideoPrivateFormat = Proc(LibC::HANDLE, D3DFORMAT*, HRESULT)
  alias PDXVAHDSW_GetVideoProcessorDeviceCaps = Proc(LibC::HANDLE, DXVAHD_CONTENT_DESC*, DXVAHD_DEVICE_USAGE, DXVAHD_VPDEVCAPS*, HRESULT)
  alias PDXVAHDSW_GetVideoProcessorOutputFormats = Proc(LibC::HANDLE, DXVAHD_CONTENT_DESC*, DXVAHD_DEVICE_USAGE, UInt32, D3DFORMAT*, HRESULT)
  alias PDXVAHDSW_GetVideoProcessorInputFormats = Proc(LibC::HANDLE, DXVAHD_CONTENT_DESC*, DXVAHD_DEVICE_USAGE, UInt32, D3DFORMAT*, HRESULT)
  alias PDXVAHDSW_GetVideoProcessorCaps = Proc(LibC::HANDLE, DXVAHD_CONTENT_DESC*, DXVAHD_DEVICE_USAGE, UInt32, DXVAHD_VPCAPS*, HRESULT)
  alias PDXVAHDSW_GetVideoProcessorCustomRates = Proc(LibC::HANDLE, Guid*, UInt32, DXVAHD_CUSTOM_RATE_DATA*, HRESULT)
  alias PDXVAHDSW_GetVideoProcessorFilterRange = Proc(LibC::HANDLE, DXVAHD_FILTER, DXVAHD_FILTER_RANGE_DATA*, HRESULT)
  alias PDXVAHDSW_DestroyDevice = Proc(LibC::HANDLE, HRESULT)
  alias PDXVAHDSW_CreateVideoProcessor = Proc(LibC::HANDLE, Guid*, LibC::HANDLE*, HRESULT)
  alias PDXVAHDSW_SetVideoProcessBltState = Proc(LibC::HANDLE, DXVAHD_BLT_STATE, UInt32, Void*, HRESULT)
  alias PDXVAHDSW_GetVideoProcessBltStatePrivate = Proc(LibC::HANDLE, DXVAHD_BLT_STATE_PRIVATE_DATA*, HRESULT)
  alias PDXVAHDSW_SetVideoProcessStreamState = Proc(LibC::HANDLE, UInt32, DXVAHD_STREAM_STATE, UInt32, Void*, HRESULT)
  alias PDXVAHDSW_GetVideoProcessStreamStatePrivate = Proc(LibC::HANDLE, UInt32, DXVAHD_STREAM_STATE_PRIVATE_DATA*, HRESULT)
  alias PDXVAHDSW_VideoProcessBltHD = Proc(LibC::HANDLE, IDirect3DSurface9, UInt32, UInt32, DXVAHD_STREAM_DATA*, HRESULT)
  alias PDXVAHDSW_DestroyVideoProcessor = Proc(LibC::HANDLE, HRESULT)
  alias PDXVAHDSW_Plugin = Proc(UInt32, Void*, HRESULT)
  alias PDXVAHD_CreateDevice = Proc(IDirect3DDevice9Ex, DXVAHD_CONTENT_DESC*, DXVAHD_DEVICE_USAGE, PDXVAHDSW_Plugin, IDXVAHD_Device*, HRESULT)
  alias MFPERIODICCALLBACK = Proc(IUnknown, Void)


  enum MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS : UInt32
    MF_EVENT_FLAG_NONE = 0
    MF_EVENT_FLAG_NO_WAIT = 1
  end

  enum MF_Plugin_Type : Int32
    MF_Plugin_Type_MFT = 0
    MF_Plugin_Type_MediaSource = 1
    MF_Plugin_Type_MFT_MatchOutputType = 2
    MF_Plugin_Type_Other = -1
  end

  enum D3D12_VIDEO_FIELD_TYPE : Int32
    D3D12_VIDEO_FIELD_TYPE_NONE = 0
    D3D12_VIDEO_FIELD_TYPE_INTERLACED_TOP_FIELD_FIRST = 1
    D3D12_VIDEO_FIELD_TYPE_INTERLACED_BOTTOM_FIELD_FIRST = 2
  end

  enum D3D12_VIDEO_FRAME_STEREO_FORMAT : Int32
    D3D12_VIDEO_FRAME_STEREO_FORMAT_NONE = 0
    D3D12_VIDEO_FRAME_STEREO_FORMAT_MONO = 1
    D3D12_VIDEO_FRAME_STEREO_FORMAT_HORIZONTAL = 2
    D3D12_VIDEO_FRAME_STEREO_FORMAT_VERTICAL = 3
    D3D12_VIDEO_FRAME_STEREO_FORMAT_SEPARATE = 4
  end

  enum D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE : Int32
    D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_NONE = 0
    D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_FIELD_BASED = 1
  end

  enum D3D12_FEATURE_VIDEO : Int32
    D3D12_FEATURE_VIDEO_DECODE_SUPPORT = 0
    D3D12_FEATURE_VIDEO_DECODE_PROFILES = 1
    D3D12_FEATURE_VIDEO_DECODE_FORMATS = 2
    D3D12_FEATURE_VIDEO_DECODE_CONVERSION_SUPPORT = 3
    D3D12_FEATURE_VIDEO_PROCESS_SUPPORT = 5
    D3D12_FEATURE_VIDEO_PROCESS_MAX_INPUT_STREAMS = 6
    D3D12_FEATURE_VIDEO_PROCESS_REFERENCE_INFO = 7
    D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE = 8
    D3D12_FEATURE_VIDEO_PROCESSOR_SIZE = 9
    D3D12_FEATURE_VIDEO_DECODE_PROFILE_COUNT = 10
    D3D12_FEATURE_VIDEO_DECODE_FORMAT_COUNT = 11
    D3D12_FEATURE_VIDEO_ARCHITECTURE = 17
    D3D12_FEATURE_VIDEO_DECODE_HISTOGRAM = 18
    D3D12_FEATURE_VIDEO_FEATURE_AREA_SUPPORT = 19
    D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR = 20
    D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_SIZE = 21
    D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_COUNT = 22
    D3D12_FEATURE_VIDEO_EXTENSION_COMMANDS = 23
    D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT = 24
    D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETERS = 25
    D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SUPPORT = 26
    D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SIZE = 27
    D3D12_FEATURE_VIDEO_DECODE_PROTECTED_RESOURCES = 28
    D3D12_FEATURE_VIDEO_PROCESS_PROTECTED_RESOURCES = 29
    D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES = 30
    D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE1 = 31
    D3D12_FEATURE_VIDEO_PROCESSOR_SIZE1 = 32
  end

  enum D3D12_BITSTREAM_ENCRYPTION_TYPE : Int32
    D3D12_BITSTREAM_ENCRYPTION_TYPE_NONE = 0
  end

  enum D3D12_VIDEO_PROCESS_FILTER : Int32
    D3D12_VIDEO_PROCESS_FILTER_BRIGHTNESS = 0
    D3D12_VIDEO_PROCESS_FILTER_CONTRAST = 1
    D3D12_VIDEO_PROCESS_FILTER_HUE = 2
    D3D12_VIDEO_PROCESS_FILTER_SATURATION = 3
    D3D12_VIDEO_PROCESS_FILTER_NOISE_REDUCTION = 4
    D3D12_VIDEO_PROCESS_FILTER_EDGE_ENHANCEMENT = 5
    D3D12_VIDEO_PROCESS_FILTER_ANAMORPHIC_SCALING = 6
    D3D12_VIDEO_PROCESS_FILTER_STEREO_ADJUSTMENT = 7
  end

  enum D3D12_VIDEO_PROCESS_FILTER_FLAGS : UInt32
    D3D12_VIDEO_PROCESS_FILTER_FLAG_NONE = 0
    D3D12_VIDEO_PROCESS_FILTER_FLAG_BRIGHTNESS = 1
    D3D12_VIDEO_PROCESS_FILTER_FLAG_CONTRAST = 2
    D3D12_VIDEO_PROCESS_FILTER_FLAG_HUE = 4
    D3D12_VIDEO_PROCESS_FILTER_FLAG_SATURATION = 8
    D3D12_VIDEO_PROCESS_FILTER_FLAG_NOISE_REDUCTION = 16
    D3D12_VIDEO_PROCESS_FILTER_FLAG_EDGE_ENHANCEMENT = 32
    D3D12_VIDEO_PROCESS_FILTER_FLAG_ANAMORPHIC_SCALING = 64
    D3D12_VIDEO_PROCESS_FILTER_FLAG_STEREO_ADJUSTMENT = 128
  end

  enum D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS : UInt32
    D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_NONE = 0
    D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_BOB = 1
    D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_CUSTOM = 2147483648
  end

  enum D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE : Int32
    D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_OPAQUE = 0
    D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_BACKGROUND = 1
    D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_DESTINATION = 2
    D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_SOURCE_STREAM = 3
  end

  enum D3D12_VIDEO_DECODE_TIER : Int32
    D3D12_VIDEO_DECODE_TIER_NOT_SUPPORTED = 0
    D3D12_VIDEO_DECODE_TIER_1 = 1
    D3D12_VIDEO_DECODE_TIER_2 = 2
    D3D12_VIDEO_DECODE_TIER_3 = 3
  end

  enum D3D12_VIDEO_DECODE_SUPPORT_FLAGS : UInt32
    D3D12_VIDEO_DECODE_SUPPORT_FLAG_NONE = 0
    D3D12_VIDEO_DECODE_SUPPORT_FLAG_SUPPORTED = 1
  end

  enum D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS : UInt32
    D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_NONE = 0
    D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_HEIGHT_ALIGNMENT_MULTIPLE_32_REQUIRED = 1
    D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_POST_PROCESSING_SUPPORTED = 2
    D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_REFERENCE_ONLY_ALLOCATIONS_REQUIRED = 4
    D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_ALLOW_RESOLUTION_CHANGE_ON_NON_KEY_FRAME = 8
  end

  enum D3D12_VIDEO_DECODE_STATUS : Int32
    D3D12_VIDEO_DECODE_STATUS_OK = 0
    D3D12_VIDEO_DECODE_STATUS_CONTINUE = 1
    D3D12_VIDEO_DECODE_STATUS_CONTINUE_SKIP_DISPLAY = 2
    D3D12_VIDEO_DECODE_STATUS_RESTART = 3
    D3D12_VIDEO_DECODE_STATUS_RATE_EXCEEDED = 4
  end

  enum D3D12_VIDEO_DECODE_ARGUMENT_TYPE : Int32
    D3D12_VIDEO_DECODE_ARGUMENT_TYPE_PICTURE_PARAMETERS = 0
    D3D12_VIDEO_DECODE_ARGUMENT_TYPE_INVERSE_QUANTIZATION_MATRIX = 1
    D3D12_VIDEO_DECODE_ARGUMENT_TYPE_SLICE_CONTROL = 2
    D3D12_VIDEO_DECODE_ARGUMENT_TYPE_MAX_VALID = 3
  end

  enum D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT : Int32
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_Y = 0
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_U = 1
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_V = 2
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_R = 0
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_G = 1
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_B = 2
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_A = 3
  end

  enum D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS : UInt32
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_NONE = 0
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_Y = 1
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_U = 2
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_V = 4
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_R = 1
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_G = 2
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_B = 4
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_A = 8
  end

  enum D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS : UInt32
    D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_NONE = 0
    D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_SUPPORTED = 1
  end

  enum D3D12_VIDEO_SCALE_SUPPORT_FLAGS : UInt32
    D3D12_VIDEO_SCALE_SUPPORT_FLAG_NONE = 0
    D3D12_VIDEO_SCALE_SUPPORT_FLAG_POW2_ONLY = 1
    D3D12_VIDEO_SCALE_SUPPORT_FLAG_EVEN_DIMENSIONS_ONLY = 2
  end

  enum D3D12_VIDEO_PROCESS_FEATURE_FLAGS : UInt32
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_NONE = 0
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_FILL = 1
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_LUMA_KEY = 2
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_STEREO = 4
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_ROTATION = 8
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_FLIP = 16
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_BLENDING = 32
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_PIXEL_ASPECT_RATIO = 64
  end

  enum D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS : UInt32
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_NONE = 0
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DENOISE = 1
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DERINGING = 2
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_EDGE_ENHANCEMENT = 4
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_COLOR_CORRECTION = 8
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_FLESH_TONE_MAPPING = 16
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_IMAGE_STABILIZATION = 32
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_SUPER_RESOLUTION = 64
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_ANAMORPHIC_SCALING = 128
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_CUSTOM = 2147483648
  end

  enum D3D12_VIDEO_PROCESS_ORIENTATION : Int32
    D3D12_VIDEO_PROCESS_ORIENTATION_DEFAULT = 0
    D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_HORIZONTAL = 1
    D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90 = 2
    D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90_FLIP_HORIZONTAL = 3
    D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_180 = 4
    D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_VERTICAL = 5
    D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270 = 6
    D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270_FLIP_HORIZONTAL = 7
  end

  enum D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS : UInt32
    D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_NONE = 0
    D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_DISCONTINUITY = 1
    D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_REPEAT = 2
  end

  enum D3D12_VIDEO_PROCESS_SUPPORT_FLAGS : UInt32
    D3D12_VIDEO_PROCESS_SUPPORT_FLAG_NONE = 0
    D3D12_VIDEO_PROCESS_SUPPORT_FLAG_SUPPORTED = 1
  end

  enum D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE : Int32
    D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_8X8 = 0
    D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_16X16 = 1
  end

  enum D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS : UInt32
    D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_NONE = 0
    D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_8X8 = 1
    D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_16X16 = 2
  end

  enum D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION : Int32
    D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_QUARTER_PEL = 0
  end

  enum D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS : UInt32
    D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_NONE = 0
    D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_QUARTER_PEL = 1
  end

  enum D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS : UInt32
    D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_NONE = 0
    D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_SUPPORTED = 1
  end

  enum D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE : Int32
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CREATION = 0
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_INITIALIZATION = 1
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_EXECUTION = 2
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_INPUT = 3
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_OUTPUT = 4
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_INPUT = 5
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_OUTPUT = 6
  end

  enum D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE : Int32
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT8 = 0
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT16 = 1
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT32 = 2
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT64 = 3
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT8 = 4
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT16 = 5
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT32 = 6
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT64 = 7
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_FLOAT = 8
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_DOUBLE = 9
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_RESOURCE = 10
  end

  enum D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS : UInt32
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_NONE = 0
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_READ = 1
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_WRITE = 2
  end

  enum D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE : Int32
    D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_ABSOLUTE_QP_MAP = 0
    D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_CQP = 1
    D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_CBR = 2
    D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_VBR = 3
    D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_QVBR = 4
  end

  enum D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_NONE = 0
    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_DELTA_QP = 1
    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_FRAME_ANALYSIS = 2
    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_QP_RANGE = 4
    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_INITIAL_QP = 8
    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_MAX_FRAME_SIZE = 16
    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_VBV_SIZES = 32
  end

  enum D3D12_VIDEO_ENCODER_CODEC : Int32
    D3D12_VIDEO_ENCODER_CODEC_H264 = 0
    D3D12_VIDEO_ENCODER_CODEC_HEVC = 1
  end

  enum D3D12_VIDEO_ENCODER_PROFILE_H264 : Int32
    D3D12_VIDEO_ENCODER_PROFILE_H264_MAIN = 0
    D3D12_VIDEO_ENCODER_PROFILE_H264_HIGH = 1
    D3D12_VIDEO_ENCODER_PROFILE_H264_HIGH_10 = 2
  end

  enum D3D12_VIDEO_ENCODER_PROFILE_HEVC : Int32
    D3D12_VIDEO_ENCODER_PROFILE_HEVC_MAIN = 0
    D3D12_VIDEO_ENCODER_PROFILE_HEVC_MAIN10 = 1
  end

  enum D3D12_VIDEO_ENCODER_LEVELS_H264 : Int32
    D3D12_VIDEO_ENCODER_LEVELS_H264_1 = 0
    D3D12_VIDEO_ENCODER_LEVELS_H264_1b = 1
    D3D12_VIDEO_ENCODER_LEVELS_H264_11 = 2
    D3D12_VIDEO_ENCODER_LEVELS_H264_12 = 3
    D3D12_VIDEO_ENCODER_LEVELS_H264_13 = 4
    D3D12_VIDEO_ENCODER_LEVELS_H264_2 = 5
    D3D12_VIDEO_ENCODER_LEVELS_H264_21 = 6
    D3D12_VIDEO_ENCODER_LEVELS_H264_22 = 7
    D3D12_VIDEO_ENCODER_LEVELS_H264_3 = 8
    D3D12_VIDEO_ENCODER_LEVELS_H264_31 = 9
    D3D12_VIDEO_ENCODER_LEVELS_H264_32 = 10
    D3D12_VIDEO_ENCODER_LEVELS_H264_4 = 11
    D3D12_VIDEO_ENCODER_LEVELS_H264_41 = 12
    D3D12_VIDEO_ENCODER_LEVELS_H264_42 = 13
    D3D12_VIDEO_ENCODER_LEVELS_H264_5 = 14
    D3D12_VIDEO_ENCODER_LEVELS_H264_51 = 15
    D3D12_VIDEO_ENCODER_LEVELS_H264_52 = 16
    D3D12_VIDEO_ENCODER_LEVELS_H264_6 = 17
    D3D12_VIDEO_ENCODER_LEVELS_H264_61 = 18
    D3D12_VIDEO_ENCODER_LEVELS_H264_62 = 19
  end

  enum D3D12_VIDEO_ENCODER_TIER_HEVC : Int32
    D3D12_VIDEO_ENCODER_TIER_HEVC_MAIN = 0
    D3D12_VIDEO_ENCODER_TIER_HEVC_HIGH = 1
  end

  enum D3D12_VIDEO_ENCODER_LEVELS_HEVC : Int32
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_1 = 0
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_2 = 1
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_21 = 2
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_3 = 3
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_31 = 4
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_4 = 5
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_41 = 6
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_5 = 7
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_51 = 8
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_52 = 9
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_6 = 10
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_61 = 11
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_62 = 12
  end

  enum D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE : Int32
    D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE_NONE = 0
    D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE_ROW_BASED = 1
  end

  enum D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE : Int32
    D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_FULL_FRAME = 0
    D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_BYTES_PER_SUBREGION = 1
    D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_SQUARE_UNITS_PER_SUBREGION_ROW_UNALIGNED = 2
    D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_ROWS_PER_SUBREGION = 3
    D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_SUBREGIONS_PER_FRAME = 4
  end

  enum D3D12_VIDEO_ENCODER_HEAP_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_HEAP_FLAG_NONE = 0
  end

  enum D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_NONE = 0
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CABAC_ENCODING_SUPPORT = 1
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT = 2
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_BFRAME_LTR_COMBINED_SUPPORT = 4
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_ADAPTIVE_8x8_TRANSFORM_ENCODING_SUPPORT = 8
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_SPATIAL_ENCODING_SUPPORT = 16
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_TEMPORAL_ENCODING_SUPPORT = 32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT = 64
  end

  enum D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES : Int32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED = 0
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_1_DISABLE_ALL_SLICE_BLOCK_EDGES = 1
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_2_DISABLE_SLICE_BOUNDARIES_BLOCKS = 2
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_3_USE_TWO_STAGE_DEBLOCKING = 3
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_4_DISABLE_CHROMA_BLOCK_EDGES = 4
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES = 5
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING = 6
  end

  enum D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_NONE = 0
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED = 1
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_1_DISABLE_ALL_SLICE_BLOCK_EDGES = 2
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_2_DISABLE_SLICE_BOUNDARIES_BLOCKS = 4
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_3_USE_TWO_STAGE_DEBLOCKING = 8
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_4_DISABLE_CHROMA_BLOCK_EDGES = 16
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES = 32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING = 64
  end

  enum D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_NONE = 0
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_BFRAME_LTR_COMBINED_SUPPORT = 1
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT = 2
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT = 4
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_SAO_FILTER_SUPPORT = 8
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_SUPPORT = 16
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_REQUIRED = 32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_TRANSFORM_SKIP_SUPPORT = 64
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_DISABLING_LOOP_FILTER_ACROSS_SLICES_SUPPORT = 128
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_P_FRAMES_IMPLEMENTED_AS_LOW_DELAY_B_FRAMES = 256
  end

  enum D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE : Int32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_8x8 = 0
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_16x16 = 1
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_32x32 = 2
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_64x64 = 3
  end

  enum D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE : Int32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_4x4 = 0
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_8x8 = 1
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_16x16 = 2
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_32x32 = 3
  end

  enum D3D12_VIDEO_ENCODER_SUPPORT_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_NONE = 0
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_GENERAL_SUPPORT_OK = 1
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_RECONFIGURATION_AVAILABLE = 2
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RESOLUTION_RECONFIGURATION_AVAILABLE = 4
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_VBV_SIZE_CONFIG_AVAILABLE = 8
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_FRAME_ANALYSIS_AVAILABLE = 16
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RECONSTRUCTED_FRAMES_REQUIRE_TEXTURE_ARRAYS = 32
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_DELTA_QP_AVAILABLE = 64
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SUBREGION_LAYOUT_RECONFIGURATION_AVAILABLE = 128
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_ADJUSTABLE_QP_RANGE_AVAILABLE = 256
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_INITIAL_QP_AVAILABLE = 512
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_MAX_FRAME_SIZE_AVAILABLE = 1024
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SEQUENCE_GOP_RECONFIGURATION_AVAILABLE = 2048
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_MOTION_ESTIMATION_PRECISION_MODE_LIMIT_AVAILABLE = 4096
  end

  enum D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_NONE = 0
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_CONSTRAINED_INTRAPREDICTION = 1
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_ADAPTIVE_8x8_TRANSFORM = 2
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ENABLE_CABAC_ENCODING = 4
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES = 8
  end

  enum D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES : Int32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_DISABLED = 0
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_TEMPORAL = 1
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_SPATIAL = 2
  end

  enum D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_NONE = 0
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_DISABLE_LOOP_FILTER_ACROSS_SLICES = 1
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES = 2
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_SAO_FILTER = 4
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_LONG_TERM_REFERENCES = 8
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_ASYMETRIC_MOTION_PARTITION = 16
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_TRANSFORM_SKIPPING = 32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_CONSTRAINED_INTRAPREDICTION = 64
  end

  enum D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE : Int32
    D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_MAXIMUM = 0
    D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_FULL_PIXEL = 1
    D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_HALF_PIXEL = 2
    D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_QUARTER_PIXEL = 3
  end

  enum D3D12_VIDEO_ENCODER_VALIDATION_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_NONE = 0
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_NOT_SUPPORTED = 1
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INPUT_FORMAT_NOT_SUPPORTED = 8
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_CONFIGURATION_NOT_SUPPORTED = 16
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_MODE_NOT_SUPPORTED = 32
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_CONFIGURATION_NOT_SUPPORTED = 64
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INTRA_REFRESH_MODE_NOT_SUPPORTED = 128
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_SUBREGION_LAYOUT_MODE_NOT_SUPPORTED = 256
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RESOLUTION_NOT_SUPPORTED_IN_LIST = 512
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_GOP_STRUCTURE_NOT_SUPPORTED = 2048
  end

  enum D3D12_VIDEO_ENCODER_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_FLAG_NONE = 0
  end

  enum D3D12_VIDEO_ENCODER_FRAME_TYPE_H264 : Int32
    D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_I_FRAME = 0
    D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_P_FRAME = 1
    D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_B_FRAME = 2
    D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_IDR_FRAME = 3
  end

  enum D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_NONE = 0
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES = 1
  end

  enum D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC : Int32
    D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_I_FRAME = 0
    D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_P_FRAME = 1
    D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_B_FRAME = 2
    D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_IDR_FRAME = 3
  end

  enum D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_NONE = 0
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES = 1
  end

  enum D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_NONE = 0
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_USED_AS_REFERENCE_PICTURE = 1
  end

  enum D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_NONE = 0
    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RESOLUTION_CHANGE = 1
    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RATE_CONTROL_CHANGE = 2
    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_SUBREGION_LAYOUT_CHANGE = 4
    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_REQUEST_INTRA_REFRESH = 8
    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_GOP_SEQUENCE_CHANGE = 16
  end

  enum D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_NO_ERROR = 0
    D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_CODEC_PICTURE_CONTROL_NOT_SUPPORTED = 1
    D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_SUBREGION_LAYOUT_CONFIGURATION_NOT_SUPPORTED = 2
    D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_REFERENCE_PICTURES = 4
    D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_RECONFIGURATION_REQUEST_NOT_SUPPORTED = 8
    D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_METADATA_BUFFER_SOURCE = 16
  end

  enum WMT_PROP_DATATYPE : Int32
    WMT_PROP_TYPE_DWORD = 0
    WMT_PROP_TYPE_STRING = 1
    WMT_PROP_TYPE_BINARY = 2
    WMT_PROP_TYPE_BOOL = 3
    WMT_PROP_TYPE_QWORD = 4
    WMT_PROP_TYPE_WORD = 5
    WMT_PROP_TYPE_GUID = 6
  end

  enum WMV_DYNAMIC_FLAGS : Int32
    WMV_DYNAMIC_BITRATE = 1
    WMV_DYNAMIC_RESOLUTION = 2
    WMV_DYNAMIC_COMPLEXITY = 4
  end

  enum MF_AUVRHP_ROOMMODEL : Int32
    VRHP_SMALLROOM = 0
    VRHP_MEDIUMROOM = 1
    VRHP_BIGROOM = 2
    VRHP_CUSTUMIZEDROOM = 3
  end

  enum AEC_SYSTEM_MODE : Int32
    SINGLE_CHANNEL_AEC = 0
    ADAPTIVE_ARRAY_ONLY = 1
    OPTIBEAM_ARRAY_ONLY = 2
    ADAPTIVE_ARRAY_AND_AEC = 3
    OPTIBEAM_ARRAY_AND_AEC = 4
    SINGLE_CHANNEL_NSAGC = 5
    MODE_NOT_SET = 6
  end

  enum AEC_VAD_MODE : Int32
    AEC_VAD_DISABLED = 0
    AEC_VAD_NORMAL = 1
    AEC_VAD_FOR_AGC = 2
    AEC_VAD_FOR_SILENCE_SUPPRESSION = 3
  end

  enum AEC_INPUT_STREAM : Int32
    AEC_CAPTURE_STREAM = 0
    AEC_REFERENCE_STREAM = 1
  end

  enum MIC_ARRAY_MODE : Int32
    MICARRAY_SINGLE_CHAN = 0
    MICARRAY_SIMPLE_SUM = 256
    MICARRAY_SINGLE_BEAM = 512
    MICARRAY_FIXED_BEAM = 1024
    MICARRAY_EXTERN_BEAM = 2048
  end

  enum MFVideoDSPMode : Int32
    MFVideoDSPMode_Passthrough = 1
    MFVideoDSPMode_Stabilization = 4
  end

  enum TOC_POS_TYPE : Int32
    TOC_POS_INHEADER = 0
    TOC_POS_TOPLEVELOBJECT = 1
  end

  enum FILE_OPENMODE : Int32
    OPENMODE_FAIL_IF_NOT_EXIST = 0
    OPENMODE_FAIL_IF_EXIST = 1
    OPENMODE_RESET_IF_EXIST = 2
    OPENMODE_APPEND_IF_EXIST = 3
    OPENMODE_DELETE_IF_EXIST = 4
  end

  enum SEEK_ORIGIN : Int32
    Msobegin = 0
    Msocurrent = 1
  end

  enum FILE_ACCESSMODE : Int32
    ACCESSMODE_READ = 1
    ACCESSMODE_WRITE = 2
    ACCESSMODE_READWRITE = 3
    ACCESSMODE_WRITE_EXCLUSIVE = 4
  end

  enum DXVA_SampleFormat : Int32
    DXVA_SampleFormatMask = 255
    DXVA_SampleUnknown = 0
    DXVA_SamplePreviousFrame = 1
    DXVA_SampleProgressiveFrame = 2
    DXVA_SampleFieldInterleavedEvenFirst = 3
    DXVA_SampleFieldInterleavedOddFirst = 4
    DXVA_SampleFieldSingleEven = 5
    DXVA_SampleFieldSingleOdd = 6
    DXVA_SampleSubStream = 7
  end

  enum DXVA_VideoTransferFunction : Int32
    DXVA_VideoTransFuncShift = 27
    DXVA_VideoTransFuncMask = -134217728
    DXVA_VideoTransFunc_Unknown = 0
    DXVA_VideoTransFunc_10 = 1
    DXVA_VideoTransFunc_18 = 2
    DXVA_VideoTransFunc_20 = 3
    DXVA_VideoTransFunc_22 = 4
    DXVA_VideoTransFunc_22_709 = 5
    DXVA_VideoTransFunc_22_240M = 6
    DXVA_VideoTransFunc_22_8bit_sRGB = 7
    DXVA_VideoTransFunc_28 = 8
  end

  enum DXVA_VideoPrimaries : Int32
    DXVA_VideoPrimariesShift = 22
    DXVA_VideoPrimariesMask = 130023424
    DXVA_VideoPrimaries_Unknown = 0
    DXVA_VideoPrimaries_reserved = 1
    DXVA_VideoPrimaries_BT709 = 2
    DXVA_VideoPrimaries_BT470_2_SysM = 3
    DXVA_VideoPrimaries_BT470_2_SysBG = 4
    DXVA_VideoPrimaries_SMPTE170M = 5
    DXVA_VideoPrimaries_SMPTE240M = 6
    DXVA_VideoPrimaries_EBU3213 = 7
    DXVA_VideoPrimaries_SMPTE_C = 8
  end

  enum DXVA_VideoLighting : Int32
    DXVA_VideoLightingShift = 18
    DXVA_VideoLightingMask = 3932160
    DXVA_VideoLighting_Unknown = 0
    DXVA_VideoLighting_bright = 1
    DXVA_VideoLighting_office = 2
    DXVA_VideoLighting_dim = 3
    DXVA_VideoLighting_dark = 4
  end

  enum DXVA_VideoTransferMatrix : Int32
    DXVA_VideoTransferMatrixShift = 15
    DXVA_VideoTransferMatrixMask = 229376
    DXVA_VideoTransferMatrix_Unknown = 0
    DXVA_VideoTransferMatrix_BT709 = 1
    DXVA_VideoTransferMatrix_BT601 = 2
    DXVA_VideoTransferMatrix_SMPTE240M = 3
  end

  enum DXVA_NominalRange : Int32
    DXVA_NominalRangeShift = 12
    DXVA_NominalRangeMask = 28672
    DXVA_NominalRange_Unknown = 0
    DXVA_NominalRange_Normal = 1
    DXVA_NominalRange_Wide = 2
    DXVA_NominalRange_0_255 = 1
    DXVA_NominalRange_16_235 = 2
    DXVA_NominalRange_48_208 = 3
  end

  enum DXVA_VideoChromaSubsampling : Int32
    DXVA_VideoChromaSubsamplingShift = 8
    DXVA_VideoChromaSubsamplingMask = 3840
    DXVA_VideoChromaSubsampling_Unknown = 0
    DXVA_VideoChromaSubsampling_ProgressiveChroma = 8
    DXVA_VideoChromaSubsampling_Horizontally_Cosited = 4
    DXVA_VideoChromaSubsampling_Vertically_Cosited = 2
    DXVA_VideoChromaSubsampling_Vertically_AlignedChromaPlanes = 1
    DXVA_VideoChromaSubsampling_MPEG2 = 5
    DXVA_VideoChromaSubsampling_MPEG1 = 1
    DXVA_VideoChromaSubsampling_DV_PAL = 6
    DXVA_VideoChromaSubsampling_Cosited = 7
  end

  enum DXVA_VideoProcessCaps : Int32
    DXVA_VideoProcess_None = 0
    DXVA_VideoProcess_YUV2RGB = 1
    DXVA_VideoProcess_StretchX = 2
    DXVA_VideoProcess_StretchY = 4
    DXVA_VideoProcess_AlphaBlend = 8
    DXVA_VideoProcess_SubRects = 16
    DXVA_VideoProcess_SubStreams = 32
    DXVA_VideoProcess_SubStreamsExtended = 64
    DXVA_VideoProcess_YUV2RGBExtended = 128
    DXVA_VideoProcess_AlphaBlendExtended = 256
  end

  enum DXVA_DeinterlaceTech : Int32
    DXVA_DeinterlaceTech_Unknown = 0
    DXVA_DeinterlaceTech_BOBLineReplicate = 1
    DXVA_DeinterlaceTech_BOBVerticalStretch = 2
    DXVA_DeinterlaceTech_BOBVerticalStretch4Tap = 256
    DXVA_DeinterlaceTech_MedianFiltering = 4
    DXVA_DeinterlaceTech_EdgeFiltering = 16
    DXVA_DeinterlaceTech_FieldAdaptive = 32
    DXVA_DeinterlaceTech_PixelAdaptive = 64
    DXVA_DeinterlaceTech_MotionVectorSteered = 128
  end

  enum DXVA_SampleFlags : Int32
    DXVA_SampleFlagsMask = 15
    DXVA_SampleFlag_Palette_Changed = 1
    DXVA_SampleFlag_SrcRect_Changed = 2
    DXVA_SampleFlag_DstRect_Changed = 4
    DXVA_SampleFlag_ColorData_Changed = 8
  end

  enum DXVA_DestinationFlags : Int32
    DXVA_DestinationFlagMask = 15
    DXVA_DestinationFlag_Background_Changed = 1
    DXVA_DestinationFlag_TargetRect_Changed = 2
    DXVA_DestinationFlag_ColorData_Changed = 4
    DXVA_DestinationFlag_Alpha_Changed = 8
  end

  enum DXVA_ProcAmpControlProp : Int32
    DXVA_ProcAmp_None = 0
    DXVA_ProcAmp_Brightness = 1
    DXVA_ProcAmp_Contrast = 2
    DXVA_ProcAmp_Hue = 4
    DXVA_ProcAmp_Saturation = 8
  end

  enum Eavenccommonratecontrolmode : Int32
    Eavenccommonratecontrolmode_cbr = 0
    Eavenccommonratecontrolmode_peakconstrainedvbr = 1
    Eavenccommonratecontrolmode_unconstrainedvbr = 2
    Eavenccommonratecontrolmode_quality = 3
    Eavenccommonratecontrolmode_lowdelayvbr = 4
    Eavenccommonratecontrolmode_globalvbr = 5
    Eavenccommonratecontrolmode_globallowdelayvbr = 6
  end

  enum Eavenccommonstreamendhandling : Int32
    Eavenccommonstreamendhandling_discardpartial = 0
    Eavenccommonstreamendhandling_ensurecomplete = 1
  end

  enum Eavencvideooutputframerateconversion : Int32
    Eavencvideooutputframerateconversion_disable = 0
    Eavencvideooutputframerateconversion_enable = 1
    Eavencvideooutputframerateconversion_alias = 2
  end

  enum Eavdecvideosoftwaredeinterlacemode : Int32
    Eavdecvideosoftwaredeinterlacemode_nodeinterlacing = 0
    Eavdecvideosoftwaredeinterlacemode_progressivedeinterlacing = 1
    Eavdecvideosoftwaredeinterlacemode_bobdeinterlacing = 2
    Eavdecvideosoftwaredeinterlacemode_smartbobdeinterlacing = 3
  end

  enum Eavfastdecodemode : Int32
    Evideodecodecompliant = 0
    Evideodecodeoptimallf = 1
    Evideodecodedisablelf = 2
    Evideodecodefastest = 32
  end

  enum Eavdecvideoh264errorconcealment : Int32
    Eerrorconcealmenttypedrop = 0
    Eerrorconcealmenttypebasic = 1
    Eerrorconcealmenttypeadvanced = 2
    Eerrorconcealmenttypedxvasetblack = 3
  end

  enum Eavdecvideompeg2errorconcealment : Int32
    Eerrorconcealmentoff = 0
    Eerrorconcealmenton = 1
  end

  enum Eavdecvideocodectype : Int32
    Eavdecvideocodectype_notplaying = 0
    Eavdecvideocodectype_mpeg2 = 1
    Eavdecvideocodectype_h264 = 2
  end

  enum Eavdecvideodxvamode : Int32
    Eavdecvideodxvamode_notplaying = 0
    Eavdecvideodxvamode_sw = 1
    Eavdecvideodxvamode_mc = 2
    Eavdecvideodxvamode_idct = 3
    Eavdecvideodxvamode_vld = 4
  end

  enum Eavdecvideodxvabusencryption : Int32
    Eavdecvideodxvabusencryption_none = 0
    Eavdecvideodxvabusencryption_private = 1
    Eavdecvideodxvabusencryption_aes = 2
  end

  enum Eavencvideosourcescantype : Int32
    Eavencvideosourcescan_automatic = 0
    Eavencvideosourcescan_interlaced = 1
    Eavencvideosourcescan_progressive = 2
  end

  enum Eavencvideooutputscantype : Int32
    Eavencvideooutputscan_progressive = 0
    Eavencvideooutputscan_interlaced = 1
    Eavencvideooutputscan_sameasinput = 2
    Eavencvideooutputscan_automatic = 3
  end

  enum Eavencvideofilmcontent : Int32
    Eavencvideofilmcontent_videoonly = 0
    Eavencvideofilmcontent_filmonly = 1
    Eavencvideofilmcontent_mixed = 2
  end

  enum Eavencvideochromaresolution : Int32
    Eavencvideochromaresolution_sameassource = 0
    Eavencvideochromaresolution_444 = 1
    Eavencvideochromaresolution_422 = 2
    Eavencvideochromaresolution_420 = 3
    Eavencvideochromaresolution_411 = 4
  end

  enum Eavencvideochromasubsampling : Int32
    Eavencvideochromasubsamplingformat_sameassource = 0
    Eavencvideochromasubsamplingformat_progressivechroma = 8
    Eavencvideochromasubsamplingformat_horizontally_cosited = 4
    Eavencvideochromasubsamplingformat_vertically_cosited = 2
    Eavencvideochromasubsamplingformat_vertically_alignedchromaplanes = 1
  end

  enum Eavencvideocolorprimaries : Int32
    Eavencvideocolorprimaries_sameassource = 0
    Eavencvideocolorprimaries_reserved = 1
    Eavencvideocolorprimaries_bt709 = 2
    Eavencvideocolorprimaries_bt470_2_sysm = 3
    Eavencvideocolorprimaries_bt470_2_sysbg = 4
    Eavencvideocolorprimaries_smpte170m = 5
    Eavencvideocolorprimaries_smpte240m = 6
    Eavencvideocolorprimaries_ebu3231 = 7
    Eavencvideocolorprimaries_smpte_c = 8
  end

  enum Eavencvideocolortransferfunction : Int32
    Eavencvideocolortransferfunction_sameassource = 0
    Eavencvideocolortransferfunction_10 = 1
    Eavencvideocolortransferfunction_18 = 2
    Eavencvideocolortransferfunction_20 = 3
    Eavencvideocolortransferfunction_22 = 4
    Eavencvideocolortransferfunction_22_709 = 5
    Eavencvideocolortransferfunction_22_240m = 6
    Eavencvideocolortransferfunction_22_8bit_srgb = 7
    Eavencvideocolortransferfunction_28 = 8
  end

  enum Eavencvideocolortransfermatrix : Int32
    Eavencvideocolortransfermatrix_sameassource = 0
    Eavencvideocolortransfermatrix_bt709 = 1
    Eavencvideocolortransfermatrix_bt601 = 2
    Eavencvideocolortransfermatrix_smpte240m = 3
  end

  enum Eavencvideocolorlighting : Int32
    Eavencvideocolorlighting_sameassource = 0
    Eavencvideocolorlighting_unknown = 1
    Eavencvideocolorlighting_bright = 2
    Eavencvideocolorlighting_office = 3
    Eavencvideocolorlighting_dim = 4
    Eavencvideocolorlighting_dark = 5
  end

  enum Eavencvideocolornominalrange : Int32
    Eavencvideocolornominalrange_sameassource = 0
    Eavencvideocolornominalrange_0_255 = 1
    Eavencvideocolornominalrange_16_235 = 2
    Eavencvideocolornominalrange_48_208 = 3
  end

  enum Eavencinputvideosystem : Int32
    Eavencinputvideosystem_unspecified = 0
    Eavencinputvideosystem_pal = 1
    Eavencinputvideosystem_ntsc = 2
    Eavencinputvideosystem_secam = 3
    Eavencinputvideosystem_mac = 4
    Eavencinputvideosystem_hdv = 5
    Eavencinputvideosystem_component = 6
  end

  enum Eavencvideocontenttype : Int32
    Eavencvideocontenttype_unknown = 0
    Eavencvideocontenttype_fixedcameraangle = 1
  end

  enum Eavencadaptivemode : Int32
    Eavencadaptivemode_none = 0
    Eavencadaptivemode_resolution = 1
    Eavencadaptivemode_framerate = 2
  end

  enum Eavscenarioinfo : Int32
    Eavscenarioinfo_unknown = 0
    Eavscenarioinfo_displayremoting = 1
    Eavscenarioinfo_videoconference = 2
    Eavscenarioinfo_archive = 3
    Eavscenarioinfo_livestreaming = 4
    Eavscenarioinfo_camerarecord = 5
    Eavscenarioinfo_displayremotingwithfeaturemap = 6
  end

  enum Evideoencoderdisplaycontenttype : Int32
    Evideoencoderdisplaycontent_unknown = 0
    Evideoencoderdisplaycontent_fullscreenvideo = 1
  end

  enum Eavencmuxoutput : Int32
    Eavencmuxoutputauto = 0
    Eavencmuxoutputps = 1
    Eavencmuxoutputts = 2
  end

  enum Eavencaudiodualmono : Int32
    Eavencaudiodualmono_sameasinput = 0
    Eavencaudiodualmono_off = 1
    Eavencaudiodualmono_on = 2
  end

  enum Eavencaudioinputcontent : Int32
    AVEncAudioInputContent_Unknown = 0
    AVEncAudioInputContent_Voice = 1
    AVEncAudioInputContent_Music = 2
  end

  enum Eavencmpvprofile : Int32
    Eavencmpvprofile_unknown = 0
    Eavencmpvprofile_simple = 1
    Eavencmpvprofile_main = 2
    Eavencmpvprofile_high = 3
    Eavencmpvprofile_422 = 4
  end

  enum Eavencmpvlevel : Int32
    Eavencmpvlevel_low = 1
    Eavencmpvlevel_main = 2
    Eavencmpvlevel_high1440 = 3
    Eavencmpvlevel_high = 4
  end

  enum Eavench263vprofile : Int32
    Eavench263vprofile_base = 0
    Eavench263vprofile_compatibilityv2 = 1
    Eavench263vprofile_compatibilityv1 = 2
    Eavench263vprofile_wirelessv2 = 3
    Eavench263vprofile_wirelessv3 = 4
    Eavench263vprofile_highcompression = 5
    Eavench263vprofile_internet = 6
    Eavench263vprofile_interlace = 7
    Eavench263vprofile_highlatency = 8
  end

  enum Eavench264vprofile : Int32
    Eavench264vprofile_unknown = 0
    Eavench264vprofile_simple = 66
    Eavench264vprofile_base = 66
    Eavench264vprofile_main = 77
    Eavench264vprofile_high = 100
    Eavench264vprofile_422 = 122
    Eavench264vprofile_high10 = 110
    Eavench264vprofile_444 = 244
    Eavench264vprofile_extended = 88
    Eavench264vprofile_scalablebase = 83
    Eavench264vprofile_scalablehigh = 86
    Eavench264vprofile_multiviewhigh = 118
    Eavench264vprofile_stereohigh = 128
    Eavench264vprofile_constrainedbase = 256
    Eavench264vprofile_ucconstrainedhigh = 257
    Eavench264vprofile_ucscalableconstrainedbase = 258
    Eavench264vprofile_ucscalableconstrainedhigh = 259
  end

  enum Eavench265vprofile : Int32
    Eavench265vprofile_unknown = 0
    Eavench265vprofile_main_420_8 = 1
    Eavench265vprofile_main_420_10 = 2
    Eavench265vprofile_main_420_12 = 3
    Eavench265vprofile_main_422_10 = 4
    Eavench265vprofile_main_422_12 = 5
    Eavench265vprofile_main_444_8 = 6
    Eavench265vprofile_main_444_10 = 7
    Eavench265vprofile_main_444_12 = 8
    Eavench265vprofile_monochrome_12 = 9
    Eavench265vprofile_monochrome_16 = 10
    Eavench265vprofile_mainintra_420_8 = 11
    Eavench265vprofile_mainintra_420_10 = 12
    Eavench265vprofile_mainintra_420_12 = 13
    Eavench265vprofile_mainintra_422_10 = 14
    Eavench265vprofile_mainintra_422_12 = 15
    Eavench265vprofile_mainintra_444_8 = 16
    Eavench265vprofile_mainintra_444_10 = 17
    Eavench265vprofile_mainintra_444_12 = 18
    Eavench265vprofile_mainintra_444_16 = 19
    Eavench265vprofile_mainstill_420_8 = 20
    Eavench265vprofile_mainstill_444_8 = 21
    Eavench265vprofile_mainstill_444_16 = 22
  end

  enum Eavencvp9vprofile : Int32
    Eavencvp9vprofile_unknown = 0
    Eavencvp9vprofile_420_8 = 1
    Eavencvp9vprofile_420_10 = 2
    Eavencvp9vprofile_420_12 = 3
  end

  enum Eavench263picturetype : Int32
    Eavench263picturetype_i = 0
    Eavench263picturetype_p = 1
    Eavench263picturetype_b = 2
  end

  enum Eavench264picturetype : Int32
    Eavench264picturetype_idr = 0
    Eavench264picturetype_p = 1
    Eavench264picturetype_b = 2
  end

  enum Eavench263vlevel : Int32
    Eavench263vlevel1 = 10
    Eavench263vlevel2 = 20
    Eavench263vlevel3 = 30
    Eavench263vlevel4 = 40
    Eavench263vlevel4_5 = 45
    Eavench263vlevel5 = 50
    Eavench263vlevel6 = 60
    Eavench263vlevel7 = 70
  end

  enum Eavench264vlevel : Int32
    Eavench264vlevel1 = 10
    Eavench264vlevel1_b = 11
    Eavench264vlevel1_1 = 11
    Eavench264vlevel1_2 = 12
    Eavench264vlevel1_3 = 13
    Eavench264vlevel2 = 20
    Eavench264vlevel2_1 = 21
    Eavench264vlevel2_2 = 22
    Eavench264vlevel3 = 30
    Eavench264vlevel3_1 = 31
    Eavench264vlevel3_2 = 32
    Eavench264vlevel4 = 40
    Eavench264vlevel4_1 = 41
    Eavench264vlevel4_2 = 42
    Eavench264vlevel5 = 50
    Eavench264vlevel5_1 = 51
    Eavench264vlevel5_2 = 52
  end

  enum Eavench265vlevel : Int32
    Eavench265vlevel1 = 30
    Eavench265vlevel2 = 60
    Eavench265vlevel2_1 = 63
    Eavench265vlevel3 = 90
    Eavench265vlevel3_1 = 93
    Eavench265vlevel4 = 120
    Eavench265vlevel4_1 = 123
    Eavench265vlevel5 = 150
    Eavench265vlevel5_1 = 153
    Eavench265vlevel5_2 = 156
    Eavench265vlevel6 = 180
    Eavench265vlevel6_1 = 183
    Eavench265vlevel6_2 = 186
  end

  enum Eavencmpvframefieldmode : Int32
    Eavencmpvframefieldmode_fieldmode = 0
    Eavencmpvframefieldmode_framemode = 1
  end

  enum Eavencmpvscenedetection : Int32
    Eavencmpvscenedetection_none = 0
    Eavencmpvscenedetection_insertipicture = 1
    Eavencmpvscenedetection_startnewgop = 2
    Eavencmpvscenedetection_startnewlocatablegop = 3
  end

  enum Eavencmpvscanpattern : Int32
    Eavencmpvscanpattern_auto = 0
    Eavencmpvscanpattern_zigzagscan = 1
    Eavencmpvscanpattern_alternatescan = 2
  end

  enum Eavencmpvqscaletype : Int32
    Eavencmpvqscaletype_auto = 0
    Eavencmpvqscaletype_linear = 1
    Eavencmpvqscaletype_nonlinear = 2
  end

  enum Eavencmpvintravlctable : Int32
    Eavencmpvintravlctable_auto = 0
    Eavencmpvintravlctable_mpeg1 = 1
    Eavencmpvintravlctable_alternate = 2
  end

  enum Eavencmpalayer : Int32
    Eavencmpalayer_1 = 1
    Eavencmpalayer_2 = 2
    Eavencmpalayer_3 = 3
  end

  enum Eavencmpacodingmode : Int32
    Eavencmpacodingmode_mono = 0
    Eavencmpacodingmode_stereo = 1
    Eavencmpacodingmode_dualchannel = 2
    Eavencmpacodingmode_jointstereo = 3
    Eavencmpacodingmode_surround = 4
  end

  enum Eavencmpaemphasistype : Int32
    Eavencmpaemphasistype_none = 0
    Eavencmpaemphasistype_50_15 = 1
    Eavencmpaemphasistype_reserved = 2
    Eavencmpaemphasistype_ccitt_j17 = 3
  end

  enum Eavencddservice : Int32
    Eavencddservice_cm = 0
    Eavencddservice_me = 1
    Eavencddservice_vi = 2
    Eavencddservice_hi = 3
    Eavencddservice_d = 4
    Eavencddservice_c = 5
    Eavencddservice_e = 6
    Eavencddservice_vo = 7
  end

  enum Eavencddproductionroomtype : Int32
    Eavencddproductionroomtype_notindicated = 0
    Eavencddproductionroomtype_large = 1
    Eavencddproductionroomtype_small = 2
  end

  enum Eavencdddynamicrangecompressioncontrol : Int32
    Eavencdddynamicrangecompressioncontrol_none = 0
    Eavencdddynamicrangecompressioncontrol_filmstandard = 1
    Eavencdddynamicrangecompressioncontrol_filmlight = 2
    Eavencdddynamicrangecompressioncontrol_musicstandard = 3
    Eavencdddynamicrangecompressioncontrol_musiclight = 4
    Eavencdddynamicrangecompressioncontrol_speech = 5
  end

  enum Eavencddsurroundexmode : Int32
    Eavencddsurroundexmode_notindicated = 0
    Eavencddsurroundexmode_no = 1
    Eavencddsurroundexmode_yes = 2
  end

  enum Eavencddpreferredstereodownmixmode : Int32
    Eavencddpreferredstereodownmixmode_ltrt = 0
    Eavencddpreferredstereodownmixmode_loro = 1
  end

  enum Eavencddatodconvertertype : Int32
    Eavencddatodconvertertype_standard = 0
    Eavencddatodconvertertype_hdcd = 1
  end

  enum Eavencddheadphonemode : Int32
    Eavencddheadphonemode_notindicated = 0
    Eavencddheadphonemode_notencoded = 1
    Eavencddheadphonemode_encoded = 2
  end

  enum Eavdecvideoinputscantype : Int32
    Eavdecvideoinputscan_unknown = 0
    Eavdecvideoinputscan_progressive = 1
    Eavdecvideoinputscan_interlaced_upperfieldfirst = 2
    Eavdecvideoinputscan_interlaced_lowerfieldfirst = 3
  end

  enum Eavdecvideoswpowerlevel : Int32
    Eavdecvideoswpowerlevel_batterylife = 0
    Eavdecvideoswpowerlevel_balanced = 50
    Eavdecvideoswpowerlevel_videoquality = 100
  end

  enum Eavdecaacdownmixmode : Int32
    Eavdecaacuseisodownmix = 0
    Eavdecaacusearibdownmix = 1
  end

  enum Eavdecheaacdynamicrangecontrol : Int32
    Eavdecheaacdynamicrangecontrol_off = 0
    Eavdecheaacdynamicrangecontrol_on = 1
  end

  enum Eavdecaudiodualmono : Int32
    Eavdecaudiodualmono_isnotdualmono = 0
    Eavdecaudiodualmono_isdualmono = 1
    Eavdecaudiodualmono_unspecified = 2
  end

  enum Eavdecaudiodualmonorepromode : Int32
    Eavdecaudiodualmonorepromode_stereo = 0
    Eavdecaudiodualmonorepromode_left_mono = 1
    Eavdecaudiodualmonorepromode_right_mono = 2
    Eavdecaudiodualmonorepromode_mix_mono = 3
  end

  enum Eavaudiochannelconfig : Int32
    Eavaudiochannelconfig_front_left = 1
    Eavaudiochannelconfig_front_right = 2
    Eavaudiochannelconfig_front_center = 4
    Eavaudiochannelconfig_low_frequency = 8
    Eavaudiochannelconfig_back_left = 16
    Eavaudiochannelconfig_back_right = 32
    Eavaudiochannelconfig_front_left_of_center = 64
    Eavaudiochannelconfig_front_right_of_center = 128
    Eavaudiochannelconfig_back_center = 256
    Eavaudiochannelconfig_side_left = 512
    Eavaudiochannelconfig_side_right = 1024
    Eavaudiochannelconfig_top_center = 2048
    Eavaudiochannelconfig_top_front_left = 4096
    Eavaudiochannelconfig_top_front_center = 8192
    Eavaudiochannelconfig_top_front_right = 16384
    Eavaudiochannelconfig_top_back_left = 32768
    Eavaudiochannelconfig_top_back_center = 65536
    Eavaudiochannelconfig_top_back_right = 131072
  end

  enum Eavddsurroundmode : Int32
    Eavddsurroundmode_notindicated = 0
    Eavddsurroundmode_no = 1
    Eavddsurroundmode_yes = 2
  end

  enum Eavdecddoperationalmode : Int32
    Eavdecddoperationalmode_none = 0
    Eavdecddoperationalmode_line = 1
    Eavdecddoperationalmode_rf = 2
    Eavdecddoperationalmode_custom0 = 3
    Eavdecddoperationalmode_custom1 = 4
    Eavdecddoperationalmode_portable8 = 5
    Eavdecddoperationalmode_portable11 = 6
    Eavdecddoperationalmode_portable14 = 7
  end

  enum Eavdecddmatrixdecodingmode : Int32
    Eavdecddmatrixdecodingmode_off = 0
    Eavdecddmatrixdecodingmode_on = 1
    Eavdecddmatrixdecodingmode_auto = 2
  end

  enum Eavdecddstereodownmixmode : Int32
    Eavdecddstereodownmixmode_auto = 0
    Eavdecddstereodownmixmode_ltrt = 1
    Eavdecddstereodownmixmode_loro = 2
  end

  enum Eavdsploudnessequalization : Int32
    Eavdsploudnessequalization_off = 0
    Eavdsploudnessequalization_on = 1
    Eavdsploudnessequalization_auto = 2
  end

  enum Eavdspspeakerfill : Int32
    Eavdspspeakerfill_off = 0
    Eavdspspeakerfill_on = 1
    Eavdspspeakerfill_auto = 2
  end

  enum Eavencchromaencodemode : Int32
    Eavencchromaencodemode_420 = 0
    Eavencchromaencodemode_444 = 1
    Eavencchromaencodemode_444_v2 = 2
  end

  enum DXVAHD_FRAME_FORMAT : Int32
    DXVAHD_FRAME_FORMAT_PROGRESSIVE = 0
    DXVAHD_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST = 1
    DXVAHD_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST = 2
  end

  enum DXVAHD_DEVICE_USAGE : Int32
    DXVAHD_DEVICE_USAGE_PLAYBACK_NORMAL = 0
    DXVAHD_DEVICE_USAGE_OPTIMAL_SPEED = 1
    DXVAHD_DEVICE_USAGE_OPTIMAL_QUALITY = 2
  end

  enum DXVAHD_SURFACE_TYPE : Int32
    DXVAHD_SURFACE_TYPE_VIDEO_INPUT = 0
    DXVAHD_SURFACE_TYPE_VIDEO_INPUT_PRIVATE = 1
    DXVAHD_SURFACE_TYPE_VIDEO_OUTPUT = 2
  end

  enum DXVAHD_DEVICE_TYPE : Int32
    DXVAHD_DEVICE_TYPE_HARDWARE = 0
    DXVAHD_DEVICE_TYPE_SOFTWARE = 1
    DXVAHD_DEVICE_TYPE_REFERENCE = 2
    DXVAHD_DEVICE_TYPE_OTHER = 3
  end

  enum DXVAHD_DEVICE_CAPS : Int32
    DXVAHD_DEVICE_CAPS_LINEAR_SPACE = 1
    DXVAHD_DEVICE_CAPS_xvYCC = 2
    DXVAHD_DEVICE_CAPS_RGB_RANGE_CONVERSION = 4
    DXVAHD_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION = 8
  end

  enum DXVAHD_FEATURE_CAPS : Int32
    DXVAHD_FEATURE_CAPS_ALPHA_FILL = 1
    DXVAHD_FEATURE_CAPS_CONSTRICTION = 2
    DXVAHD_FEATURE_CAPS_LUMA_KEY = 4
    DXVAHD_FEATURE_CAPS_ALPHA_PALETTE = 8
  end

  enum DXVAHD_FILTER_CAPS : Int32
    DXVAHD_FILTER_CAPS_BRIGHTNESS = 1
    DXVAHD_FILTER_CAPS_CONTRAST = 2
    DXVAHD_FILTER_CAPS_HUE = 4
    DXVAHD_FILTER_CAPS_SATURATION = 8
    DXVAHD_FILTER_CAPS_NOISE_REDUCTION = 16
    DXVAHD_FILTER_CAPS_EDGE_ENHANCEMENT = 32
    DXVAHD_FILTER_CAPS_ANAMORPHIC_SCALING = 64
  end

  enum DXVAHD_INPUT_FORMAT_CAPS : Int32
    DXVAHD_INPUT_FORMAT_CAPS_RGB_INTERLACED = 1
    DXVAHD_INPUT_FORMAT_CAPS_RGB_PROCAMP = 2
    DXVAHD_INPUT_FORMAT_CAPS_RGB_LUMA_KEY = 4
    DXVAHD_INPUT_FORMAT_CAPS_PALETTE_INTERLACED = 8
  end

  enum DXVAHD_PROCESSOR_CAPS : Int32
    DXVAHD_PROCESSOR_CAPS_DEINTERLACE_BLEND = 1
    DXVAHD_PROCESSOR_CAPS_DEINTERLACE_BOB = 2
    DXVAHD_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE = 4
    DXVAHD_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION = 8
    DXVAHD_PROCESSOR_CAPS_INVERSE_TELECINE = 16
    DXVAHD_PROCESSOR_CAPS_FRAME_RATE_CONVERSION = 32
  end

  enum DXVAHD_ITELECINE_CAPS : Int32
    DXVAHD_ITELECINE_CAPS_32 = 1
    DXVAHD_ITELECINE_CAPS_22 = 2
    DXVAHD_ITELECINE_CAPS_2224 = 4
    DXVAHD_ITELECINE_CAPS_2332 = 8
    DXVAHD_ITELECINE_CAPS_32322 = 16
    DXVAHD_ITELECINE_CAPS_55 = 32
    DXVAHD_ITELECINE_CAPS_64 = 64
    DXVAHD_ITELECINE_CAPS_87 = 128
    DXVAHD_ITELECINE_CAPS_222222222223 = 256
    DXVAHD_ITELECINE_CAPS_OTHER = -2147483648
  end

  enum DXVAHD_FILTER : Int32
    DXVAHD_FILTER_BRIGHTNESS = 0
    DXVAHD_FILTER_CONTRAST = 1
    DXVAHD_FILTER_HUE = 2
    DXVAHD_FILTER_SATURATION = 3
    DXVAHD_FILTER_NOISE_REDUCTION = 4
    DXVAHD_FILTER_EDGE_ENHANCEMENT = 5
    DXVAHD_FILTER_ANAMORPHIC_SCALING = 6
  end

  enum DXVAHD_BLT_STATE : Int32
    DXVAHD_BLT_STATE_TARGET_RECT = 0
    DXVAHD_BLT_STATE_BACKGROUND_COLOR = 1
    DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE = 2
    DXVAHD_BLT_STATE_ALPHA_FILL = 3
    DXVAHD_BLT_STATE_CONSTRICTION = 4
    DXVAHD_BLT_STATE_PRIVATE = 1000
  end

  enum DXVAHD_ALPHA_FILL_MODE : Int32
    DXVAHD_ALPHA_FILL_MODE_OPAQUE = 0
    DXVAHD_ALPHA_FILL_MODE_BACKGROUND = 1
    DXVAHD_ALPHA_FILL_MODE_DESTINATION = 2
    DXVAHD_ALPHA_FILL_MODE_SOURCE_STREAM = 3
  end

  enum DXVAHD_STREAM_STATE : Int32
    DXVAHD_STREAM_STATE_D3DFORMAT = 0
    DXVAHD_STREAM_STATE_FRAME_FORMAT = 1
    DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE = 2
    DXVAHD_STREAM_STATE_OUTPUT_RATE = 3
    DXVAHD_STREAM_STATE_SOURCE_RECT = 4
    DXVAHD_STREAM_STATE_DESTINATION_RECT = 5
    DXVAHD_STREAM_STATE_ALPHA = 6
    DXVAHD_STREAM_STATE_PALETTE = 7
    DXVAHD_STREAM_STATE_LUMA_KEY = 8
    DXVAHD_STREAM_STATE_ASPECT_RATIO = 9
    DXVAHD_STREAM_STATE_FILTER_BRIGHTNESS = 100
    DXVAHD_STREAM_STATE_FILTER_CONTRAST = 101
    DXVAHD_STREAM_STATE_FILTER_HUE = 102
    DXVAHD_STREAM_STATE_FILTER_SATURATION = 103
    DXVAHD_STREAM_STATE_FILTER_NOISE_REDUCTION = 104
    DXVAHD_STREAM_STATE_FILTER_EDGE_ENHANCEMENT = 105
    DXVAHD_STREAM_STATE_FILTER_ANAMORPHIC_SCALING = 106
    DXVAHD_STREAM_STATE_PRIVATE = 1000
  end

  enum DXVAHD_OUTPUT_RATE : Int32
    DXVAHD_OUTPUT_RATE_NORMAL = 0
    DXVAHD_OUTPUT_RATE_HALF = 1
    DXVAHD_OUTPUT_RATE_CUSTOM = 2
  end

  enum DXVA2_SampleFormat : Int32
    DXVA2_SampleFormatMask = 255
    DXVA2_SampleUnknown = 0
    DXVA2_SampleProgressiveFrame = 2
    DXVA2_SampleFieldInterleavedEvenFirst = 3
    DXVA2_SampleFieldInterleavedOddFirst = 4
    DXVA2_SampleFieldSingleEven = 5
    DXVA2_SampleFieldSingleOdd = 6
    DXVA2_SampleSubStream = 7
  end

  enum DXVA2_VideoChromaSubSampling : Int32
    DXVA2_VideoChromaSubsamplingMask = 15
    DXVA2_VideoChromaSubsampling_Unknown = 0
    DXVA2_VideoChromaSubsampling_ProgressiveChroma = 8
    DXVA2_VideoChromaSubsampling_Horizontally_Cosited = 4
    DXVA2_VideoChromaSubsampling_Vertically_Cosited = 2
    DXVA2_VideoChromaSubsampling_Vertically_AlignedChromaPlanes = 1
    DXVA2_VideoChromaSubsampling_MPEG2 = 5
    DXVA2_VideoChromaSubsampling_MPEG1 = 1
    DXVA2_VideoChromaSubsampling_DV_PAL = 6
    DXVA2_VideoChromaSubsampling_Cosited = 7
  end

  enum DXVA2_NominalRange : Int32
    DXVA2_NominalRangeMask = 7
    DXVA2_NominalRange_Unknown = 0
    DXVA2_NominalRange_Normal = 1
    DXVA2_NominalRange_Wide = 2
    DXVA2_NominalRange_0_255 = 1
    DXVA2_NominalRange_16_235 = 2
    DXVA2_NominalRange_48_208 = 3
  end

  enum DXVA2_VideoTransferMatrix : Int32
    DXVA2_VideoTransferMatrixMask = 7
    DXVA2_VideoTransferMatrix_Unknown = 0
    DXVA2_VideoTransferMatrix_BT709 = 1
    DXVA2_VideoTransferMatrix_BT601 = 2
    DXVA2_VideoTransferMatrix_SMPTE240M = 3
  end

  enum DXVA2_VideoLighting : Int32
    DXVA2_VideoLightingMask = 15
    DXVA2_VideoLighting_Unknown = 0
    DXVA2_VideoLighting_bright = 1
    DXVA2_VideoLighting_office = 2
    DXVA2_VideoLighting_dim = 3
    DXVA2_VideoLighting_dark = 4
  end

  enum DXVA2_VideoPrimaries : Int32
    DXVA2_VideoPrimariesMask = 31
    DXVA2_VideoPrimaries_Unknown = 0
    DXVA2_VideoPrimaries_reserved = 1
    DXVA2_VideoPrimaries_BT709 = 2
    DXVA2_VideoPrimaries_BT470_2_SysM = 3
    DXVA2_VideoPrimaries_BT470_2_SysBG = 4
    DXVA2_VideoPrimaries_SMPTE170M = 5
    DXVA2_VideoPrimaries_SMPTE240M = 6
    DXVA2_VideoPrimaries_EBU3213 = 7
    DXVA2_VideoPrimaries_SMPTE_C = 8
  end

  enum DXVA2_VideoTransferFunction : Int32
    DXVA2_VideoTransFuncMask = 31
    DXVA2_VideoTransFunc_Unknown = 0
    DXVA2_VideoTransFunc_10 = 1
    DXVA2_VideoTransFunc_18 = 2
    DXVA2_VideoTransFunc_20 = 3
    DXVA2_VideoTransFunc_22 = 4
    DXVA2_VideoTransFunc_709 = 5
    DXVA2_VideoTransFunc_240M = 6
    DXVA2_VideoTransFunc_sRGB = 7
    DXVA2_VideoTransFunc_28 = 8
  end

  enum DXVA2_DeinterlaceTech : Int32
    DXVA2_DeinterlaceTech_Unknown = 0
    DXVA2_DeinterlaceTech_BOBLineReplicate = 1
    DXVA2_DeinterlaceTech_BOBVerticalStretch = 2
    DXVA2_DeinterlaceTech_BOBVerticalStretch4Tap = 4
    DXVA2_DeinterlaceTech_MedianFiltering = 8
    DXVA2_DeinterlaceTech_EdgeFiltering = 16
    DXVA2_DeinterlaceTech_FieldAdaptive = 32
    DXVA2_DeinterlaceTech_PixelAdaptive = 64
    DXVA2_DeinterlaceTech_MotionVectorSteered = 128
    DXVA2_DeinterlaceTech_InverseTelecine = 256
    DXVA2_DeinterlaceTech_Mask = 511
  end

  enum DXVA2_FilterType : Int32
    DXVA2_NoiseFilterLumaLevel = 1
    DXVA2_NoiseFilterLumaThreshold = 2
    DXVA2_NoiseFilterLumaRadius = 3
    DXVA2_NoiseFilterChromaLevel = 4
    DXVA2_NoiseFilterChromaThreshold = 5
    DXVA2_NoiseFilterChromaRadius = 6
    DXVA2_DetailFilterLumaLevel = 7
    DXVA2_DetailFilterLumaThreshold = 8
    DXVA2_DetailFilterLumaRadius = 9
    DXVA2_DetailFilterChromaLevel = 10
    DXVA2_DetailFilterChromaThreshold = 11
    DXVA2_DetailFilterChromaRadius = 12
  end

  enum DXVA2_NoiseFilterTech : Int32
    DXVA2_NoiseFilterTech_Unsupported = 0
    DXVA2_NoiseFilterTech_Unknown = 1
    DXVA2_NoiseFilterTech_Median = 2
    DXVA2_NoiseFilterTech_Temporal = 4
    DXVA2_NoiseFilterTech_BlockNoise = 8
    DXVA2_NoiseFilterTech_MosquitoNoise = 16
    DXVA2_NoiseFilterTech_Mask = 31
  end

  enum DXVA2_DetailFilterTech : Int32
    DXVA2_DetailFilterTech_Unsupported = 0
    DXVA2_DetailFilterTech_Unknown = 1
    DXVA2_DetailFilterTech_Edge = 2
    DXVA2_DetailFilterTech_Sharpening = 4
    DXVA2_DetailFilterTech_Mask = 7
  end

  enum DXVA2_ProcAmp : Int32
    DXVA2_ProcAmp_None = 0
    DXVA2_ProcAmp_Brightness = 1
    DXVA2_ProcAmp_Contrast = 2
    DXVA2_ProcAmp_Hue = 4
    DXVA2_ProcAmp_Saturation = 8
    DXVA2_ProcAmp_Mask = 15
  end

  enum DXVA2_VideoProcess : Int32
    DXVA2_VideoProcess_None = 0
    DXVA2_VideoProcess_YUV2RGB = 1
    DXVA2_VideoProcess_StretchX = 2
    DXVA2_VideoProcess_StretchY = 4
    DXVA2_VideoProcess_AlphaBlend = 8
    DXVA2_VideoProcess_SubRects = 16
    DXVA2_VideoProcess_SubStreams = 32
    DXVA2_VideoProcess_SubStreamsExtended = 64
    DXVA2_VideoProcess_YUV2RGBExtended = 128
    DXVA2_VideoProcess_AlphaBlendExtended = 256
    DXVA2_VideoProcess_Constriction = 512
    DXVA2_VideoProcess_NoiseFilter = 1024
    DXVA2_VideoProcess_DetailFilter = 2048
    DXVA2_VideoProcess_PlanarAlpha = 4096
    DXVA2_VideoProcess_LinearScaling = 8192
    DXVA2_VideoProcess_GammaCompensated = 16384
    DXVA2_VideoProcess_MaintainsOriginalFieldData = 32768
    DXVA2_VideoProcess_Mask = 65535
  end

  enum DXVA2_VPDev : Int32
    DXVA2_VPDev_HardwareDevice = 1
    DXVA2_VPDev_EmulatedDXVA1 = 2
    DXVA2_VPDev_SoftwareDevice = 4
    DXVA2_VPDev_Mask = 7
  end

  enum DXVA2_SampleData : Int32
    DXVA2_SampleData_RFF = 1
    DXVA2_SampleData_TFF = 2
    DXVA2_SampleData_RFF_TFF_Present = 4
    DXVA2_SampleData_Mask = 65535
  end

  enum DXVA2_DestData : Int32
    DXVA2_DestData_RFF = 1
    DXVA2_DestData_TFF = 2
    DXVA2_DestData_RFF_TFF_Present = 4
    DXVA2_DestData_Mask = 65535
  end

  enum DXVA2_BufferfType : Int32
    DXVA2_PictureParametersBufferType = 0
    DXVA2_MacroBlockControlBufferType = 1
    DXVA2_ResidualDifferenceBufferType = 2
    DXVA2_DeblockingControlBufferType = 3
    DXVA2_InverseQuantizationMatrixBufferType = 4
    DXVA2_SliceControlBufferType = 5
    DXVA2_BitStreamDateBufferType = 6
    DXVA2_MotionVectorBuffer = 7
    DXVA2_FilmGrainBuffer = 8
  end

  enum DXVA2_VideoRenderTargetType : Int32
    DXVA2_VideoDecoderRenderTarget = 0
    DXVA2_VideoProcessorRenderTarget = 1
    DXVA2_VideoSoftwareRenderTarget = 2
  end

  enum DXVA2_SurfaceType : Int32
    DXVA2_SurfaceType_DecoderRenderTarget = 0
    DXVA2_SurfaceType_ProcessorRenderTarget = 1
    DXVA2_SurfaceType_D3DRenderTargetTexture = 2
  end

  enum OPM_TYPE : Int32
    OPM_OMAC_SIZE = 16
    OPM_128_BIT_RANDOM_NUMBER_SIZE = 16
    OPM_ENCRYPTED_INITIALIZATION_PARAMETERS_SIZE = 256
    OPM_CONFIGURE_SETTING_DATA_SIZE = 4056
    OPM_GET_INFORMATION_PARAMETERS_SIZE = 4056
    OPM_REQUESTED_INFORMATION_SIZE = 4076
    OPM_HDCP_KEY_SELECTION_VECTOR_SIZE = 5
    OPM_PROTECTION_TYPE_SIZE = 4
    OPM_BUS_TYPE_MASK = 65535
    OPM_BUS_IMPLEMENTATION_MODIFIER_MASK = 32767
  end

  enum OPM_VIDEO_OUTPUT_SEMANTICS : Int32
    OPM_VOS_COPP_SEMANTICS = 0
    OPM_VOS_OPM_SEMANTICS = 1
    OPM_VOS_OPM_INDIRECT_DISPLAY = 2
  end

  enum OPM_HDCP_FLAGS : UInt32
    OPM_HDCP_FLAG_NONE = 0
    OPM_HDCP_FLAG_REPEATER = 1
  end

  enum OPM_STATUS : Int32
    OPM_STATUS_NORMAL = 0
    OPM_STATUS_LINK_LOST = 1
    OPM_STATUS_RENEGOTIATION_REQUIRED = 2
    OPM_STATUS_TAMPERING_DETECTED = 4
    OPM_STATUS_REVOKED_HDCP_DEVICE_ATTACHED = 8
  end

  enum PM_CONNECTOR_TYPE : Int32
    OPM_CONNECTOR_TYPE_OTHER = -1
    OPM_CONNECTOR_TYPE_VGA = 0
    OPM_CONNECTOR_TYPE_SVIDEO = 1
    OPM_CONNECTOR_TYPE_COMPOSITE_VIDEO = 2
    OPM_CONNECTOR_TYPE_COMPONENT_VIDEO = 3
    OPM_CONNECTOR_TYPE_DVI = 4
    OPM_CONNECTOR_TYPE_HDMI = 5
    OPM_CONNECTOR_TYPE_LVDS = 6
    OPM_CONNECTOR_TYPE_D_JPN = 8
    OPM_CONNECTOR_TYPE_SDI = 9
    OPM_CONNECTOR_TYPE_DISPLAYPORT_EXTERNAL = 10
    OPM_CONNECTOR_TYPE_DISPLAYPORT_EMBEDDED = 11
    OPM_CONNECTOR_TYPE_UDI_EXTERNAL = 12
    OPM_CONNECTOR_TYPE_UDI_EMBEDDED = 13
    OPM_CONNECTOR_TYPE_RESERVED = 14
    OPM_CONNECTOR_TYPE_MIRACAST = 15
    OPM_CONNECTOR_TYPE_TRANSPORT_AGNOSTIC_DIGITAL_MODE_A = 16
    OPM_CONNECTOR_TYPE_TRANSPORT_AGNOSTIC_DIGITAL_MODE_B = 17
    OPM_COPP_COMPATIBLE_CONNECTOR_TYPE_INTERNAL = -2147483648
  end

  enum OPM_DVI_CHARACTERISTIC : Int32
    OPM_DVI_CHARACTERISTIC_1_0 = 1
    OPM_DVI_CHARACTERISTIC_1_1_OR_ABOVE = 2
  end

  enum OPM_OUTPUT_HARDWARE_PROTECTION : Int32
    OPM_OUTPUT_HARDWARE_PROTECTION_NOT_SUPPORTED = 0
    OPM_OUTPUT_HARDWARE_PROTECTION_SUPPORTED = 1
  end

  enum OPM_BUS_TYPE : Int32
    OPM_BUS_TYPE_OTHER = 0
    OPM_BUS_TYPE_PCI = 1
    OPM_BUS_TYPE_PCIX = 2
    OPM_BUS_TYPE_PCIEXPRESS = 3
    OPM_BUS_TYPE_AGP = 4
    OPM_BUS_IMPLEMENTATION_MODIFIER_INSIDE_OF_CHIPSET = 65536
    OPM_BUS_IMPLEMENTATION_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = 131072
    OPM_BUS_IMPLEMENTATION_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = 196608
    OPM_BUS_IMPLEMENTATION_MODIFIER_DAUGHTER_BOARD_CONNECTOR = 262144
    OPM_BUS_IMPLEMENTATION_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 327680
    OPM_BUS_IMPLEMENTATION_MODIFIER_NON_STANDARD = -2147483648
    OPM_COPP_COMPATIBLE_BUS_TYPE_INTEGRATED = -2147483648
  end

  enum OPM_DPCP_PROTECTION_LEVEL : Int32
    OPM_DPCP_OFF = 0
    OPM_DPCP_ON = 1
    OPM_DPCP_FORCE_ULONG = 2147483647
  end

  enum OPM_HDCP_PROTECTION_LEVEL : Int32
    OPM_HDCP_OFF = 0
    OPM_HDCP_ON = 1
    OPM_HDCP_FORCE_ULONG = 2147483647
  end

  enum OPM_TYPE_ENFORCEMENT_HDCP_PROTECTION_LEVEL : Int32
    OPM_TYPE_ENFORCEMENT_HDCP_OFF = 0
    OPM_TYPE_ENFORCEMENT_HDCP_ON_WITH_NO_TYPE_RESTRICTION = 1
    OPM_TYPE_ENFORCEMENT_HDCP_ON_WITH_TYPE1_RESTRICTION = 2
    OPM_TYPE_ENFORCEMENT_HDCP_FORCE_ULONG = 2147483647
  end

  enum OPM_CGMSA : Int32
    OPM_CGMSA_OFF = 0
    OPM_CGMSA_COPY_FREELY = 1
    OPM_CGMSA_COPY_NO_MORE = 2
    OPM_CGMSA_COPY_ONE_GENERATION = 3
    OPM_CGMSA_COPY_NEVER = 4
    OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED = 8
  end

  enum OPM_ACP_PROTECTION_LEVEL : Int32
    OPM_ACP_OFF = 0
    OPM_ACP_LEVEL_ONE = 1
    OPM_ACP_LEVEL_TWO = 2
    OPM_ACP_LEVEL_THREE = 3
    OPM_ACP_FORCE_ULONG = 2147483647
  end

  enum OPM_PROTECTION_TYPE : Int32
    OPM_PROTECTION_TYPE_OTHER = -2147483648
    OPM_PROTECTION_TYPE_NONE = 0
    OPM_PROTECTION_TYPE_COPP_COMPATIBLE_HDCP = 1
    OPM_PROTECTION_TYPE_ACP = 2
    OPM_PROTECTION_TYPE_CGMSA = 4
    OPM_PROTECTION_TYPE_HDCP = 8
    OPM_PROTECTION_TYPE_DPCP = 16
    OPM_PROTECTION_TYPE_TYPE_ENFORCEMENT_HDCP = 32
  end

  enum OPM_PROTECTION_STANDARD_TYPE : UInt32
    OPM_PROTECTION_STANDARD_OTHER = 2147483648
    OPM_PROTECTION_STANDARD_NONE = 0
    OPM_PROTECTION_STANDARD_IEC61880_525I = 1
    OPM_PROTECTION_STANDARD_IEC61880_2_525I = 2
    OPM_PROTECTION_STANDARD_IEC62375_625P = 4
    OPM_PROTECTION_STANDARD_EIA608B_525 = 8
    OPM_PROTECTION_STANDARD_EN300294_625I = 16
    OPM_PROTECTION_STANDARD_CEA805A_TYPEA_525P = 32
    OPM_PROTECTION_STANDARD_CEA805A_TYPEA_750P = 64
    OPM_PROTECTION_STANDARD_CEA805A_TYPEA_1125I = 128
    OPM_PROTECTION_STANDARD_CEA805A_TYPEB_525P = 256
    OPM_PROTECTION_STANDARD_CEA805A_TYPEB_750P = 512
    OPM_PROTECTION_STANDARD_CEA805A_TYPEB_1125I = 1024
    OPM_PROTECTION_STANDARD_ARIBTRB15_525I = 2048
    OPM_PROTECTION_STANDARD_ARIBTRB15_525P = 4096
    OPM_PROTECTION_STANDARD_ARIBTRB15_750P = 8192
    OPM_PROTECTION_STANDARD_ARIBTRB15_1125I = 16384
  end

  enum OPM_IMAGE_ASPECT_RATIO_EN300294 : Int32
    OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_4_BY_3 = 0
    OPM_ASPECT_RATIO_EN300294_BOX_14_BY_9_CENTER = 1
    OPM_ASPECT_RATIO_EN300294_BOX_14_BY_9_TOP = 2
    OPM_ASPECT_RATIO_EN300294_BOX_16_BY_9_CENTER = 3
    OPM_ASPECT_RATIO_EN300294_BOX_16_BY_9_TOP = 4
    OPM_ASPECT_RATIO_EN300294_BOX_GT_16_BY_9_CENTER = 5
    OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_4_BY_3_PROTECTED_CENTER = 6
    OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_16_BY_9_ANAMORPHIC = 7
    OPM_ASPECT_RATIO_FORCE_ULONG = 2147483647
  end

  enum KSMETHOD_OPMVIDEOOUTPUT : Int32
    KSMETHOD_OPMVIDEOOUTPUT_STARTINITIALIZATION = 0
    KSMETHOD_OPMVIDEOOUTPUT_FINISHINITIALIZATION = 1
    KSMETHOD_OPMVIDEOOUTPUT_GETINFORMATION = 2
  end

  enum MF_ATTRIBUTE_TYPE : Int32
    MF_ATTRIBUTE_UINT32 = 19
    MF_ATTRIBUTE_UINT64 = 21
    MF_ATTRIBUTE_DOUBLE = 5
    MF_ATTRIBUTE_GUID = 72
    MF_ATTRIBUTE_STRING = 31
    MF_ATTRIBUTE_BLOB = 4113
    MF_ATTRIBUTE_IUNKNOWN = 13
  end

  enum MF_ATTRIBUTES_MATCH_TYPE : Int32
    MF_ATTRIBUTES_MATCH_OUR_ITEMS = 0
    MF_ATTRIBUTES_MATCH_THEIR_ITEMS = 1
    MF_ATTRIBUTES_MATCH_ALL_ITEMS = 2
    MF_ATTRIBUTES_MATCH_INTERSECTION = 3
    MF_ATTRIBUTES_MATCH_SMALLER = 4
  end

  enum MF_ATTRIBUTE_SERIALIZE_OPTIONS : Int32
    MF_ATTRIBUTE_SERIALIZE_UNKNOWN_BYREF = 1
  end

  enum MF2DBuffer_LockFlags : Int32
    MF2DBuffer_LockFlags_LockTypeMask = 3
    MF2DBuffer_LockFlags_Read = 1
    MF2DBuffer_LockFlags_Write = 2
    MF2DBuffer_LockFlags_ReadWrite = 3
    MF2DBuffer_LockFlags_ForceDWORD = 2147483647
  end

  enum MFVideoInterlaceMode : Int32
    MFVideoInterlace_Unknown = 0
    MFVideoInterlace_Progressive = 2
    MFVideoInterlace_FieldInterleavedUpperFirst = 3
    MFVideoInterlace_FieldInterleavedLowerFirst = 4
    MFVideoInterlace_FieldSingleUpper = 5
    MFVideoInterlace_FieldSingleLower = 6
    MFVideoInterlace_MixedInterlaceOrProgressive = 7
    MFVideoInterlace_Last = 8
    MFVideoInterlace_ForceDWORD = 2147483647
  end

  enum MFVideoTransferFunction : Int32
    MFVideoTransFunc_Unknown = 0
    MFVideoTransFunc_10 = 1
    MFVideoTransFunc_18 = 2
    MFVideoTransFunc_20 = 3
    MFVideoTransFunc_22 = 4
    MFVideoTransFunc_709 = 5
    MFVideoTransFunc_240M = 6
    MFVideoTransFunc_sRGB = 7
    MFVideoTransFunc_28 = 8
    MFVideoTransFunc_Log_100 = 9
    MFVideoTransFunc_Log_316 = 10
    MFVideoTransFunc_709_sym = 11
    MFVideoTransFunc_2020_const = 12
    MFVideoTransFunc_2020 = 13
    MFVideoTransFunc_26 = 14
    MFVideoTransFunc_2084 = 15
    MFVideoTransFunc_HLG = 16
    MFVideoTransFunc_10_rel = 17
    MFVideoTransFunc_Last = 18
    MFVideoTransFunc_ForceDWORD = 2147483647
  end

  enum MFVideoPrimaries : Int32
    MFVideoPrimaries_Unknown = 0
    MFVideoPrimaries_reserved = 1
    MFVideoPrimaries_BT709 = 2
    MFVideoPrimaries_BT470_2_SysM = 3
    MFVideoPrimaries_BT470_2_SysBG = 4
    MFVideoPrimaries_SMPTE170M = 5
    MFVideoPrimaries_SMPTE240M = 6
    MFVideoPrimaries_EBU3213 = 7
    MFVideoPrimaries_SMPTE_C = 8
    MFVideoPrimaries_BT2020 = 9
    MFVideoPrimaries_XYZ = 10
    MFVideoPrimaries_DCI_P3 = 11
    MFVideoPrimaries_ACES = 12
    MFVideoPrimaries_Last = 13
    MFVideoPrimaries_ForceDWORD = 2147483647
  end

  enum MFVideoLighting : Int32
    MFVideoLighting_Unknown = 0
    MFVideoLighting_bright = 1
    MFVideoLighting_office = 2
    MFVideoLighting_dim = 3
    MFVideoLighting_dark = 4
    MFVideoLighting_Last = 5
    MFVideoLighting_ForceDWORD = 2147483647
  end

  enum MFVideoTransferMatrix : Int32
    MFVideoTransferMatrix_Unknown = 0
    MFVideoTransferMatrix_BT709 = 1
    MFVideoTransferMatrix_BT601 = 2
    MFVideoTransferMatrix_SMPTE240M = 3
    MFVideoTransferMatrix_BT2020_10 = 4
    MFVideoTransferMatrix_BT2020_12 = 5
    MFVideoTransferMatrix_Last = 6
    MFVideoTransferMatrix_ForceDWORD = 2147483647
  end

  enum MFVideoChromaSubsampling : Int32
    MFVideoChromaSubsampling_Unknown = 0
    MFVideoChromaSubsampling_ProgressiveChroma = 8
    MFVideoChromaSubsampling_Horizontally_Cosited = 4
    MFVideoChromaSubsampling_Vertically_Cosited = 2
    MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes = 1
    MFVideoChromaSubsampling_MPEG2 = 5
    MFVideoChromaSubsampling_MPEG1 = 1
    MFVideoChromaSubsampling_DV_PAL = 6
    MFVideoChromaSubsampling_Cosited = 7
    MFVideoChromaSubsampling_Last = 8
    MFVideoChromaSubsampling_ForceDWORD = 2147483647
  end

  enum MFNominalRange : Int32
    MFNominalRange_Unknown = 0
    MFNominalRange_Normal = 1
    MFNominalRange_Wide = 2
    MFNominalRange_0_255 = 1
    MFNominalRange_16_235 = 2
    MFNominalRange_48_208 = 3
    MFNominalRange_64_127 = 4
    MFNominalRange_Last = 5
    MFNominalRange_ForceDWORD = 2147483647
  end

  enum MFVideoFlags : Int32
    MFVideoFlag_PAD_TO_Mask = 3
    MFVideoFlag_PAD_TO_None = 0
    MFVideoFlag_PAD_TO_4x3 = 1
    MFVideoFlag_PAD_TO_16x9 = 2
    MFVideoFlag_SrcContentHintMask = 28
    MFVideoFlag_SrcContentHintNone = 0
    MFVideoFlag_SrcContentHint16x9 = 4
    MFVideoFlag_SrcContentHint235_1 = 8
    MFVideoFlag_AnalogProtected = 32
    MFVideoFlag_DigitallyProtected = 64
    MFVideoFlag_ProgressiveContent = 128
    MFVideoFlag_FieldRepeatCountMask = 1792
    MFVideoFlag_FieldRepeatCountShift = 8
    MFVideoFlag_ProgressiveSeqReset = 2048
    MFVideoFlag_PanScanEnabled = 131072
    MFVideoFlag_LowerFieldFirst = 262144
    MFVideoFlag_BottomUpLinearRep = 524288
    MFVideoFlags_DXVASurface = 1048576
    MFVideoFlags_RenderTargetSurface = 4194304
    MFVideoFlags_ForceQWORD = 2147483647
  end

  enum MFStandardVideoFormat : Int32
    MFStdVideoFormat_reserved = 0
    MFStdVideoFormat_NTSC = 1
    MFStdVideoFormat_PAL = 2
    MFStdVideoFormat_DVD_NTSC = 3
    MFStdVideoFormat_DVD_PAL = 4
    MFStdVideoFormat_DV_PAL = 5
    MFStdVideoFormat_DV_NTSC = 6
    MFStdVideoFormat_ATSC_SD480i = 7
    MFStdVideoFormat_ATSC_HD1080i = 8
    MFStdVideoFormat_ATSC_HD720p = 9
  end

  enum MF_EVENT_TYPE : Int32
    MEUnknown = 0
    MEError = 1
    MEExtendedType = 2
    MENonFatalError = 3
    MEGenericV1Anchor = 3
    MESessionUnknown = 100
    MESessionTopologySet = 101
    MESessionTopologiesCleared = 102
    MESessionStarted = 103
    MESessionPaused = 104
    MESessionStopped = 105
    MESessionClosed = 106
    MESessionEnded = 107
    MESessionRateChanged = 108
    MESessionScrubSampleComplete = 109
    MESessionCapabilitiesChanged = 110
    MESessionTopologyStatus = 111
    MESessionNotifyPresentationTime = 112
    MENewPresentation = 113
    MELicenseAcquisitionStart = 114
    MELicenseAcquisitionCompleted = 115
    MEIndividualizationStart = 116
    MEIndividualizationCompleted = 117
    MEEnablerProgress = 118
    MEEnablerCompleted = 119
    MEPolicyError = 120
    MEPolicyReport = 121
    MEBufferingStarted = 122
    MEBufferingStopped = 123
    MEConnectStart = 124
    MEConnectEnd = 125
    MEReconnectStart = 126
    MEReconnectEnd = 127
    MERendererEvent = 128
    MESessionStreamSinkFormatChanged = 129
    MESessionV1Anchor = 129
    MESourceUnknown = 200
    MESourceStarted = 201
    MEStreamStarted = 202
    MESourceSeeked = 203
    MEStreamSeeked = 204
    MENewStream = 205
    MEUpdatedStream = 206
    MESourceStopped = 207
    MEStreamStopped = 208
    MESourcePaused = 209
    MEStreamPaused = 210
    MEEndOfPresentation = 211
    MEEndOfStream = 212
    MEMediaSample = 213
    MEStreamTick = 214
    MEStreamThinMode = 215
    MEStreamFormatChanged = 216
    MESourceRateChanged = 217
    MEEndOfPresentationSegment = 218
    MESourceCharacteristicsChanged = 219
    MESourceRateChangeRequested = 220
    MESourceMetadataChanged = 221
    MESequencerSourceTopologyUpdated = 222
    MESourceV1Anchor = 222
    MESinkUnknown = 300
    MEStreamSinkStarted = 301
    MEStreamSinkStopped = 302
    MEStreamSinkPaused = 303
    MEStreamSinkRateChanged = 304
    MEStreamSinkRequestSample = 305
    MEStreamSinkMarker = 306
    MEStreamSinkPrerolled = 307
    MEStreamSinkScrubSampleComplete = 308
    MEStreamSinkFormatChanged = 309
    MEStreamSinkDeviceChanged = 310
    MEQualityNotify = 311
    MESinkInvalidated = 312
    MEAudioSessionNameChanged = 313
    MEAudioSessionVolumeChanged = 314
    MEAudioSessionDeviceRemoved = 315
    MEAudioSessionServerShutdown = 316
    MEAudioSessionGroupingParamChanged = 317
    MEAudioSessionIconChanged = 318
    MEAudioSessionFormatChanged = 319
    MEAudioSessionDisconnected = 320
    MEAudioSessionExclusiveModeOverride = 321
    MESinkV1Anchor = 321
    MECaptureAudioSessionVolumeChanged = 322
    MECaptureAudioSessionDeviceRemoved = 323
    MECaptureAudioSessionFormatChanged = 324
    MECaptureAudioSessionDisconnected = 325
    MECaptureAudioSessionExclusiveModeOverride = 326
    MECaptureAudioSessionServerShutdown = 327
    MESinkV2Anchor = 327
    METrustUnknown = 400
    MEPolicyChanged = 401
    MEContentProtectionMessage = 402
    MEPolicySet = 403
    METrustV1Anchor = 403
    MEWMDRMLicenseBackupCompleted = 500
    MEWMDRMLicenseBackupProgress = 501
    MEWMDRMLicenseRestoreCompleted = 502
    MEWMDRMLicenseRestoreProgress = 503
    MEWMDRMLicenseAcquisitionCompleted = 506
    MEWMDRMIndividualizationCompleted = 508
    MEWMDRMIndividualizationProgress = 513
    MEWMDRMProximityCompleted = 514
    MEWMDRMLicenseStoreCleaned = 515
    MEWMDRMRevocationDownloadCompleted = 516
    MEWMDRMV1Anchor = 516
    METransformUnknown = 600
    METransformNeedInput = 601
    METransformHaveOutput = 602
    METransformDrainComplete = 603
    METransformMarker = 604
    METransformInputStreamStateChanged = 605
    MEByteStreamCharacteristicsChanged = 700
    MEVideoCaptureDeviceRemoved = 800
    MEVideoCaptureDevicePreempted = 801
    MEStreamSinkFormatInvalidated = 802
    MEEncodingParameters = 803
    MEContentProtectionMetadata = 900
    MEDeviceThermalStateChanged = 950
    MEReservedMax = 10000
  end

  enum MFBYTESTREAM_SEEK_ORIGIN : Int32
    Msobegin = 0
    Msocurrent = 1
  end

  enum MF_FILE_ACCESSMODE : Int32
    MF_ACCESSMODE_READ = 1
    MF_ACCESSMODE_WRITE = 2
    MF_ACCESSMODE_READWRITE = 3
  end

  enum MF_FILE_OPENMODE : Int32
    MF_OPENMODE_FAIL_IF_NOT_EXIST = 0
    MF_OPENMODE_FAIL_IF_EXIST = 1
    MF_OPENMODE_RESET_IF_EXIST = 2
    MF_OPENMODE_APPEND_IF_EXIST = 3
    MF_OPENMODE_DELETE_IF_EXIST = 4
  end

  enum MF_FILE_FLAGS : Int32
    MF_FILEFLAGS_NONE = 0
    MF_FILEFLAGS_NOBUFFERING = 1
    MF_FILEFLAGS_ALLOW_WRITE_SHARING = 2
  end

  enum MF_PLUGIN_CONTROL_POLICY : Int32
    MF_PLUGIN_CONTROL_POLICY_USE_ALL_PLUGINS = 0
    MF_PLUGIN_CONTROL_POLICY_USE_APPROVED_PLUGINS = 1
    MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS = 2
    MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS_EDGEMODE = 3
  end

  enum MF_STREAM_STATE : Int32
    MF_STREAM_STATE_STOPPED = 0
    MF_STREAM_STATE_PAUSED = 1
    MF_STREAM_STATE_RUNNING = 2
  end

  enum MFT_INPUT_DATA_BUFFER_FLAGS : Int32
    MFT_INPUT_DATA_BUFFER_PLACEHOLDER = -1
  end

  enum MFT_OUTPUT_DATA_BUFFER_FLAGS : Int32
    MFT_OUTPUT_DATA_BUFFER_INCOMPLETE = 16777216
    MFT_OUTPUT_DATA_BUFFER_FORMAT_CHANGE = 256
    MFT_OUTPUT_DATA_BUFFER_STREAM_END = 512
    MFT_OUTPUT_DATA_BUFFER_NO_SAMPLE = 768
  end

  enum MFT_INPUT_STATUS_FLAGS : Int32
    MFT_INPUT_STATUS_ACCEPT_DATA = 1
  end

  enum MFT_OUTPUT_STATUS_FLAGS : Int32
    MFT_OUTPUT_STATUS_SAMPLE_READY = 1
  end

  enum MFT_INPUT_STREAM_INFO_FLAGS : Int32
    MFT_INPUT_STREAM_WHOLE_SAMPLES = 1
    MFT_INPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER = 2
    MFT_INPUT_STREAM_FIXED_SAMPLE_SIZE = 4
    MFT_INPUT_STREAM_HOLDS_BUFFERS = 8
    MFT_INPUT_STREAM_DOES_NOT_ADDREF = 256
    MFT_INPUT_STREAM_REMOVABLE = 512
    MFT_INPUT_STREAM_OPTIONAL = 1024
    MFT_INPUT_STREAM_PROCESSES_IN_PLACE = 2048
  end

  enum MFT_OUTPUT_STREAM_INFO_FLAGS : Int32
    MFT_OUTPUT_STREAM_WHOLE_SAMPLES = 1
    MFT_OUTPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER = 2
    MFT_OUTPUT_STREAM_FIXED_SAMPLE_SIZE = 4
    MFT_OUTPUT_STREAM_DISCARDABLE = 8
    MFT_OUTPUT_STREAM_OPTIONAL = 16
    MFT_OUTPUT_STREAM_PROVIDES_SAMPLES = 256
    MFT_OUTPUT_STREAM_CAN_PROVIDE_SAMPLES = 512
    MFT_OUTPUT_STREAM_LAZY_READ = 1024
    MFT_OUTPUT_STREAM_REMOVABLE = 2048
  end

  enum MFT_SET_TYPE_FLAGS : Int32
    MFT_SET_TYPE_TEST_ONLY = 1
  end

  enum MFT_PROCESS_OUTPUT_FLAGS : Int32
    MFT_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER = 1
    MFT_PROCESS_OUTPUT_REGENERATE_LAST_OUTPUT = 2
  end

  enum MFT_PROCESS_OUTPUT_STATUS : Int32
    MFT_PROCESS_OUTPUT_STATUS_NEW_STREAMS = 256
  end

  enum MFT_DRAIN_TYPE : Int32
    MFT_DRAIN_PRODUCE_TAILS = 0
    MFT_DRAIN_NO_TAILS = 1
  end

  enum MFT_MESSAGE_TYPE : Int32
    MFT_MESSAGE_COMMAND_FLUSH = 0
    MFT_MESSAGE_COMMAND_DRAIN = 1
    MFT_MESSAGE_SET_D3D_MANAGER = 2
    MFT_MESSAGE_DROP_SAMPLES = 3
    MFT_MESSAGE_COMMAND_TICK = 4
    MFT_MESSAGE_NOTIFY_BEGIN_STREAMING = 268435456
    MFT_MESSAGE_NOTIFY_END_STREAMING = 268435457
    MFT_MESSAGE_NOTIFY_END_OF_STREAM = 268435458
    MFT_MESSAGE_NOTIFY_START_OF_STREAM = 268435459
    MFT_MESSAGE_NOTIFY_RELEASE_RESOURCES = 268435460
    MFT_MESSAGE_NOTIFY_REACQUIRE_RESOURCES = 268435461
    MFT_MESSAGE_NOTIFY_EVENT = 268435462
    MFT_MESSAGE_COMMAND_SET_OUTPUT_STREAM_STATE = 268435463
    MFT_MESSAGE_COMMAND_FLUSH_OUTPUT_STREAM = 268435464
    MFT_MESSAGE_COMMAND_MARKER = 536870912
  end

  enum DeviceStreamState : Int32
    DeviceStreamState_Stop = 0
    DeviceStreamState_Pause = 1
    DeviceStreamState_Run = 2
    DeviceStreamState_Disabled = 3
  end

  enum MF3DVideoOutputType : Int32
    MF3DVideoOutputType_BaseView = 0
    MF3DVideoOutputType_Stereo = 1
  end

  enum MFT_AUDIO_DECODER_DEGRADATION_REASON : Int32
    MFT_AUDIO_DECODER_DEGRADATION_REASON_NONE = 0
    MFT_AUDIO_DECODER_DEGRADATION_REASON_LICENSING_REQUIREMENT = 1
  end

  enum MFT_AUDIO_DECODER_DEGRADATION_TYPE : Int32
    MFT_AUDIO_DECODER_DEGRADATION_TYPE_NONE = 0
    MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX2CHANNEL = 1
    MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX6CHANNEL = 2
    MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX8CHANNEL = 3
  end

  enum MFSESSION_SETTOPOLOGY_FLAGS : Int32
    MFSESSION_SETTOPOLOGY_IMMEDIATE = 1
    MFSESSION_SETTOPOLOGY_NORESOLUTION = 2
    MFSESSION_SETTOPOLOGY_CLEAR_CURRENT = 4
  end

  enum MFSESSION_GETFULLTOPOLOGY_FLAGS : Int32
    MFSESSION_GETFULLTOPOLOGY_CURRENT = 1
  end

  enum MFPMPSESSION_CREATION_FLAGS : Int32
    MFPMPSESSION_UNPROTECTED_PROCESS = 1
    MFPMPSESSION_IN_PROCESS = 2
  end

  enum MF_OBJECT_TYPE : Int32
    MF_OBJECT_MEDIASOURCE = 0
    MF_OBJECT_BYTESTREAM = 1
    MF_OBJECT_INVALID = 2
  end

  enum MF_RESOLUTION_FLAGS : UInt32
    MF_RESOLUTION_MEDIASOURCE = 1
    MF_RESOLUTION_BYTESTREAM = 2
    MF_RESOLUTION_CONTENT_DOES_NOT_HAVE_TO_MATCH_EXTENSION_OR_MIME_TYPE = 16
    MF_RESOLUTION_KEEP_BYTE_STREAM_ALIVE_ON_FAIL = 32
    MF_RESOLUTION_DISABLE_LOCAL_PLUGINS = 64
    MF_RESOLUTION_PLUGIN_CONTROL_POLICY_APPROVED_ONLY = 128
    MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY = 256
    MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY_EDGEMODE = 512
    MF_RESOLUTION_ENABLE_STORE_PLUGINS = 1024
    MF_RESOLUTION_READ = 65536
    MF_RESOLUTION_WRITE = 131072
  end

  enum MF_CONNECT_METHOD : Int32
    MF_CONNECT_DIRECT = 0
    MF_CONNECT_ALLOW_CONVERTER = 1
    MF_CONNECT_ALLOW_DECODER = 3
    MF_CONNECT_RESOLVE_INDEPENDENT_OUTPUTTYPES = 4
    MF_CONNECT_AS_OPTIONAL = 65536
    MF_CONNECT_AS_OPTIONAL_BRANCH = 131072
  end

  enum MF_TOPOLOGY_RESOLUTION_STATUS_FLAGS : Int32
    MF_TOPOLOGY_RESOLUTION_SUCCEEDED = 0
    MF_OPTIONAL_NODE_REJECTED_MEDIA_TYPE = 1
    MF_OPTIONAL_NODE_REJECTED_PROTECTED_PROCESS = 2
  end

  enum MFMEDIASOURCE_CHARACTERISTICS : Int32
    MFMEDIASOURCE_IS_LIVE = 1
    MFMEDIASOURCE_CAN_SEEK = 2
    MFMEDIASOURCE_CAN_PAUSE = 4
    MFMEDIASOURCE_HAS_SLOW_SEEK = 8
    MFMEDIASOURCE_HAS_MULTIPLE_PRESENTATIONS = 16
    MFMEDIASOURCE_CAN_SKIPFORWARD = 32
    MFMEDIASOURCE_CAN_SKIPBACKWARD = 64
    MFMEDIASOURCE_DOES_NOT_USE_NETWORK = 128
  end

  enum MFSTREAMSINK_MARKER_TYPE : Int32
    MFSTREAMSINK_MARKER_DEFAULT = 0
    MFSTREAMSINK_MARKER_ENDOFSEGMENT = 1
    MFSTREAMSINK_MARKER_TICK = 2
    MFSTREAMSINK_MARKER_EVENT = 3
  end

  enum MF_VIDEO_PROCESSOR_ROTATION : Int32
    ROTATION_NONE = 0
    ROTATION_NORMAL = 1
  end

  enum MF_VIDEO_PROCESSOR_MIRROR : Int32
    MIRROR_NONE = 0
    MIRROR_HORIZONTAL = 1
    MIRROR_VERTICAL = 2
  end

  enum MFVideoSphericalFormat : Int32
    MFVideoSphericalFormat_Unsupported = 0
    MFVideoSphericalFormat_Equirectangular = 1
    MFVideoSphericalFormat_CubeMap = 2
    MFVideoSphericalFormat_3DMesh = 3
  end

  enum MFVideoSphericalProjectionMode : Int32
    MFVideoSphericalProjectionMode_Spherical = 0
    MFVideoSphericalProjectionMode_Flat = 1
  end

  enum MFTOPOLOGY_DXVA_MODE : Int32
    MFTOPOLOGY_DXVA_DEFAULT = 0
    MFTOPOLOGY_DXVA_NONE = 1
    MFTOPOLOGY_DXVA_FULL = 2
  end

  enum MFTOPOLOGY_HARDWARE_MODE : Int32
    MFTOPOLOGY_HWMODE_SOFTWARE_ONLY = 0
    MFTOPOLOGY_HWMODE_USE_HARDWARE = 1
    MFTOPOLOGY_HWMODE_USE_ONLY_HARDWARE = 2
  end

  enum MF_TOPOLOGY_TYPE : Int32
    MF_TOPOLOGY_OUTPUT_NODE = 0
    MF_TOPOLOGY_SOURCESTREAM_NODE = 1
    MF_TOPOLOGY_TRANSFORM_NODE = 2
    MF_TOPOLOGY_TEE_NODE = 3
    MF_TOPOLOGY_MAX = -1
  end

  enum MF_TOPONODE_FLUSH_MODE : Int32
    MF_TOPONODE_FLUSH_ALWAYS = 0
    MF_TOPONODE_FLUSH_SEEK = 1
    MF_TOPONODE_FLUSH_NEVER = 2
  end

  enum MF_TOPONODE_DRAIN_MODE : Int32
    MF_TOPONODE_DRAIN_DEFAULT = 0
    MF_TOPONODE_DRAIN_ALWAYS = 1
    MF_TOPONODE_DRAIN_NEVER = 2
  end

  enum MFCLOCK_CHARACTERISTICS_FLAGS : Int32
    MFCLOCK_CHARACTERISTICS_FLAG_FREQUENCY_10MHZ = 2
    MFCLOCK_CHARACTERISTICS_FLAG_ALWAYS_RUNNING = 4
    MFCLOCK_CHARACTERISTICS_FLAG_IS_SYSTEM_CLOCK = 8
  end

  enum MFCLOCK_STATE : Int32
    MFCLOCK_STATE_INVALID = 0
    MFCLOCK_STATE_RUNNING = 1
    MFCLOCK_STATE_STOPPED = 2
    MFCLOCK_STATE_PAUSED = 3
  end

  enum MFCLOCK_RELATIONAL_FLAGS : Int32
    MFCLOCK_RELATIONAL_FLAG_JITTER_NEVER_AHEAD = 1
  end

  enum MFTIMER_FLAGS : Int32
    MFTIMER_RELATIVE = 1
  end

  enum MF_ACTIVATE_CUSTOM_MIXER : Int32
    MF_ACTIVATE_CUSTOM_MIXER_ALLOWFAIL = 1
  end

  enum MF_ACTIVATE_CUSTOM_PRESENTER : Int32
    MF_ACTIVATE_CUSTOM_PRESENTER_ALLOWFAIL = 1
  end

  enum MFSHUTDOWN_STATUS : Int32
    MFSHUTDOWN_INITIATED = 0
    MFSHUTDOWN_COMPLETED = 1
  end

  enum MF_URL_TRUST_STATUS : Int32
    MF_LICENSE_URL_UNTRUSTED = 0
    MF_LICENSE_URL_TRUSTED = 1
    MF_LICENSE_URL_TAMPERED = 2
  end

  enum MFRATE_DIRECTION : Int32
    MFRATE_FORWARD = 0
    MFRATE_REVERSE = 1
  end

  enum MF_QUALITY_DROP_MODE : Int32
    MF_DROP_MODE_NONE = 0
    MF_DROP_MODE_1 = 1
    MF_DROP_MODE_2 = 2
    MF_DROP_MODE_3 = 3
    MF_DROP_MODE_4 = 4
    MF_DROP_MODE_5 = 5
    MF_NUM_DROP_MODES = 6
  end

  enum MF_QUALITY_LEVEL : Int32
    MF_QUALITY_NORMAL = 0
    MF_QUALITY_NORMAL_MINUS_1 = 1
    MF_QUALITY_NORMAL_MINUS_2 = 2
    MF_QUALITY_NORMAL_MINUS_3 = 3
    MF_QUALITY_NORMAL_MINUS_4 = 4
    MF_QUALITY_NORMAL_MINUS_5 = 5
    MF_NUM_QUALITY_LEVELS = 6
  end

  enum MF_QUALITY_ADVISE_FLAGS : Int32
    MF_QUALITY_CANNOT_KEEP_UP = 1
  end

  enum MFSequencerTopologyFlags : Int32
    SequencerTopologyFlags_Last = 1
  end

  enum MFNetCredentialRequirements : Int32
    REQUIRE_PROMPT = 1
    REQUIRE_SAVE_SELECTED = 2
  end

  enum MFNetCredentialOptions : Int32
    MFNET_CREDENTIAL_SAVE = 1
    MFNET_CREDENTIAL_DONT_CACHE = 2
    MFNET_CREDENTIAL_ALLOW_CLEAR_TEXT = 4
  end

  enum MFNetAuthenticationFlags : Int32
    MFNET_AUTHENTICATION_PROXY = 1
    MFNET_AUTHENTICATION_CLEAR_TEXT = 2
    MFNET_AUTHENTICATION_LOGGED_ON_USER = 4
  end

  enum MFNETSOURCE_PROTOCOL_TYPE : Int32
    MFNETSOURCE_UNDEFINED = 0
    MFNETSOURCE_HTTP = 1
    MFNETSOURCE_RTSP = 2
    MFNETSOURCE_FILE = 3
    MFNETSOURCE_MULTICAST = 4
  end

  enum MFNETSOURCE_TRANSPORT_TYPE : Int32
    MFNETSOURCE_UDP = 0
    MFNETSOURCE_TCP = 1
  end

  enum MFNETSOURCE_CACHE_STATE : Int32
    MFNETSOURCE_CACHE_UNAVAILABLE = 0
    MFNETSOURCE_CACHE_ACTIVE_WRITING = 1
    MFNETSOURCE_CACHE_ACTIVE_COMPLETE = 2
  end

  enum MFNETSOURCE_STATISTICS_IDS : Int32
    MFNETSOURCE_RECVPACKETS_ID = 0
    MFNETSOURCE_LOSTPACKETS_ID = 1
    MFNETSOURCE_RESENDSREQUESTED_ID = 2
    MFNETSOURCE_RESENDSRECEIVED_ID = 3
    MFNETSOURCE_RECOVEREDBYECCPACKETS_ID = 4
    MFNETSOURCE_RECOVEREDBYRTXPACKETS_ID = 5
    MFNETSOURCE_OUTPACKETS_ID = 6
    MFNETSOURCE_RECVRATE_ID = 7
    MFNETSOURCE_AVGBANDWIDTHBPS_ID = 8
    MFNETSOURCE_BYTESRECEIVED_ID = 9
    MFNETSOURCE_PROTOCOL_ID = 10
    MFNETSOURCE_TRANSPORT_ID = 11
    MFNETSOURCE_CACHE_STATE_ID = 12
    MFNETSOURCE_LINKBANDWIDTH_ID = 13
    MFNETSOURCE_CONTENTBITRATE_ID = 14
    MFNETSOURCE_SPEEDFACTOR_ID = 15
    MFNETSOURCE_BUFFERSIZE_ID = 16
    MFNETSOURCE_BUFFERPROGRESS_ID = 17
    MFNETSOURCE_LASTBWSWITCHTS_ID = 18
    MFNETSOURCE_SEEKRANGESTART_ID = 19
    MFNETSOURCE_SEEKRANGEEND_ID = 20
    MFNETSOURCE_BUFFERINGCOUNT_ID = 21
    MFNETSOURCE_INCORRECTLYSIGNEDPACKETS_ID = 22
    MFNETSOURCE_SIGNEDSESSION_ID = 23
    MFNETSOURCE_MAXBITRATE_ID = 24
    MFNETSOURCE_RECEPTION_QUALITY_ID = 25
    MFNETSOURCE_RECOVEREDPACKETS_ID = 26
    MFNETSOURCE_VBR_ID = 27
    MFNETSOURCE_DOWNLOADPROGRESS_ID = 28
    MFNETSOURCE_UNPREDEFINEDPROTOCOLNAME_ID = 29
  end

  enum MFNET_PROXYSETTINGS : Int32
    MFNET_PROXYSETTING_NONE = 0
    MFNET_PROXYSETTING_MANUAL = 1
    MFNET_PROXYSETTING_AUTO = 2
    MFNET_PROXYSETTING_BROWSER = 3
  end

  enum MFPOLICYMANAGER_ACTION : Int32
    PEACTION_NO = 0
    PEACTION_PLAY = 1
    PEACTION_COPY = 2
    PEACTION_EXPORT = 3
    PEACTION_EXTRACT = 4
    PEACTION_RESERVED1 = 5
    PEACTION_RESERVED2 = 6
    PEACTION_RESERVED3 = 7
    PEACTION_LAST = 7
  end

  enum MF_OPM_CGMSA_PROTECTION_LEVEL : Int32
    MF_OPM_CGMSA_OFF = 0
    MF_OPM_CGMSA_COPY_FREELY = 1
    MF_OPM_CGMSA_COPY_NO_MORE = 2
    MF_OPM_CGMSA_COPY_ONE_GENERATION = 3
    MF_OPM_CGMSA_COPY_NEVER = 4
    MF_OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED = 8
  end

  enum MF_OPM_ACP_PROTECTION_LEVEL : Int32
    MF_OPM_ACP_OFF = 0
    MF_OPM_ACP_LEVEL_ONE = 1
    MF_OPM_ACP_LEVEL_TWO = 2
    MF_OPM_ACP_LEVEL_THREE = 3
    MF_OPM_ACP_FORCE_ULONG = 2147483647
  end

  enum MFAudioConstriction : Int32
    MFaudioConstrictionOff = 0
    MFaudioConstriction48_16 = 1
    MFaudioConstriction44_16 = 2
    MFaudioConstriction14_14 = 3
    MFaudioConstrictionMute = 4
  end

  enum SAMPLE_PROTECTION_VERSION : Int32
    SAMPLE_PROTECTION_VERSION_NO = 0
    SAMPLE_PROTECTION_VERSION_BASIC_LOKI = 1
    SAMPLE_PROTECTION_VERSION_SCATTER = 2
    SAMPLE_PROTECTION_VERSION_RC4 = 3
    SAMPLE_PROTECTION_VERSION_AES128CTR = 4
  end

  enum MF_TRANSCODE_TOPOLOGYMODE_FLAGS : Int32
    MF_TRANSCODE_TOPOLOGYMODE_SOFTWARE_ONLY = 0
    MF_TRANSCODE_TOPOLOGYMODE_HARDWARE_ALLOWED = 1
  end

  enum MF_TRANSCODE_ADJUST_PROFILE_FLAGS : Int32
    MF_TRANSCODE_ADJUST_PROFILE_DEFAULT = 0
    MF_TRANSCODE_ADJUST_PROFILE_USE_SOURCE_ATTRIBUTES = 1
  end

  enum MF_VIDEO_PROCESSOR_ALGORITHM_TYPE : Int32
    MF_VIDEO_PROCESSOR_ALGORITHM_DEFAULT = 0
    MF_VIDEO_PROCESSOR_ALGORITHM_MRF_CRF_444 = 1
  end

  enum MF_MEDIAKEYSESSION_TYPE : Int32
    MF_MEDIAKEYSESSION_TYPE_TEMPORARY = 0
    MF_MEDIAKEYSESSION_TYPE_PERSISTENT_LICENSE = 1
    MF_MEDIAKEYSESSION_TYPE_PERSISTENT_RELEASE_MESSAGE = 2
    MF_MEDIAKEYSESSION_TYPE_PERSISTENT_USAGE_RECORD = 3
  end

  enum MF_MEDIAKEY_STATUS : Int32
    MF_MEDIAKEY_STATUS_USABLE = 0
    MF_MEDIAKEY_STATUS_EXPIRED = 1
    MF_MEDIAKEY_STATUS_OUTPUT_DOWNSCALED = 2
    MF_MEDIAKEY_STATUS_OUTPUT_NOT_ALLOWED = 3
    MF_MEDIAKEY_STATUS_STATUS_PENDING = 4
    MF_MEDIAKEY_STATUS_INTERNAL_ERROR = 5
    MF_MEDIAKEY_STATUS_RELEASED = 6
    MF_MEDIAKEY_STATUS_OUTPUT_RESTRICTED = 7
  end

  enum MF_MEDIAKEYSESSION_MESSAGETYPE : Int32
    MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_REQUEST = 0
    MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RENEWAL = 1
    MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RELEASE = 2
    MF_MEDIAKEYSESSION_MESSAGETYPE_INDIVIDUALIZATION_REQUEST = 3
  end

  enum MF_CROSS_ORIGIN_POLICY : Int32
    MF_CROSS_ORIGIN_POLICY_NONE = 0
    MF_CROSS_ORIGIN_POLICY_ANONYMOUS = 1
    MF_CROSS_ORIGIN_POLICY_USE_CREDENTIALS = 2
  end

  enum MFSensorDeviceType : Int32
    MFSensorDeviceType_Unknown = 0
    MFSensorDeviceType_Device = 1
    MFSensorDeviceType_MediaSource = 2
    MFSensorDeviceType_FrameProvider = 3
    MFSensorDeviceType_SensorTransform = 4
  end

  enum MFSensorStreamType : Int32
    MFSensorStreamType_Unknown = 0
    MFSensorStreamType_Input = 1
    MFSensorStreamType_Output = 2
  end

  enum MFSensorDeviceMode : Int32
    MFSensorDeviceMode_Controller = 0
    MFSensorDeviceMode_Shared = 1
  end

  enum MFCameraIntrinsic_DistortionModelType : Int32
    MFCameraIntrinsic_DistortionModelType_6KT = 0
    MFCameraIntrinsic_DistortionModelType_ArcTan = 1
  end

  enum MFCameraOcclusionState : Int32
    MFCameraOcclusionState_Open = 0
    MFCameraOcclusionState_OccludedByLid = 1
    MFCameraOcclusionState_OccludedByCameraHardware = 2
  end

  enum MFSampleAllocatorUsage : Int32
    MFSampleAllocatorUsage_UsesProvidedAllocator = 0
    MFSampleAllocatorUsage_UsesCustomAllocator = 1
    MFSampleAllocatorUsage_DoesNotAllocate = 2
  end

  enum MFASF_INDEXER_FLAGS : Int32
    MFASF_INDEXER_WRITE_NEW_INDEX = 1
    MFASF_INDEXER_READ_FOR_REVERSEPLAYBACK = 2
    MFASF_INDEXER_WRITE_FOR_LIVEREAD = 4
  end

  enum MFASF_SPLITTERFLAGS : Int32
    MFASF_SPLITTER_REVERSE = 1
    MFASF_SPLITTER_WMDRM = 2
  end

  enum ASF_STATUSFLAGS : Int32
    ASF_STATUSFLAGS_INCOMPLETE = 1
    ASF_STATUSFLAGS_NONFATAL_ERROR = 2
  end

  enum MFASF_MULTIPLEXERFLAGS : Int32
    MFASF_MULTIPLEXER_AUTOADJUST_BITRATE = 1
  end

  enum MFASF_STREAMSELECTOR_FLAGS : Int32
    MFASF_STREAMSELECTOR_DISABLE_THINNING = 1
    MFASF_STREAMSELECTOR_USE_AVERAGE_BITRATE = 2
  end

  enum ASF_SELECTION_STATUS : Int32
    ASF_STATUS_NOTSELECTED = 0
    ASF_STATUS_CLEANPOINTSONLY = 1
    ASF_STATUS_ALLDATAUNITS = 2
  end

  enum MFSINK_WMDRMACTION : Int32
    MFSINK_WMDRMACTION_UNDEFINED = 0
    MFSINK_WMDRMACTION_ENCODE = 1
    MFSINK_WMDRMACTION_TRANSCODE = 2
    MFSINK_WMDRMACTION_TRANSCRYPT = 3
    MFSINK_WMDRMACTION_LAST = 3
  end

  enum MF_CAPTURE_ENGINE_DEVICE_TYPE : Int32
    MF_CAPTURE_ENGINE_DEVICE_TYPE_AUDIO = 0
    MF_CAPTURE_ENGINE_DEVICE_TYPE_VIDEO = 1
  end

  enum MF_CAPTURE_ENGINE_SINK_TYPE : Int32
    MF_CAPTURE_ENGINE_SINK_TYPE_RECORD = 0
    MF_CAPTURE_ENGINE_SINK_TYPE_PREVIEW = 1
    MF_CAPTURE_ENGINE_SINK_TYPE_PHOTO = 2
  end

  enum MF_CAPTURE_ENGINE_SOURCE : UInt32
    MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_PREVIEW = 4294967290
    MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_RECORD = 4294967289
    MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_PHOTO = 4294967288
    MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_AUDIO = 4294967287
    MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_METADATA = 4294967286
    MF_CAPTURE_ENGINE_MEDIASOURCE = 4294967295
  end

  enum MF_CAPTURE_ENGINE_STREAM_CATEGORY : Int32
    MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_PREVIEW = 0
    MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_CAPTURE = 1
    MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_INDEPENDENT = 2
    MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_DEPENDENT = 3
    MF_CAPTURE_ENGINE_STREAM_CATEGORY_AUDIO = 4
    MF_CAPTURE_ENGINE_STREAM_CATEGORY_UNSUPPORTED = 5
    MF_CAPTURE_ENGINE_STREAM_CATEGORY_METADATA = 6
  end

  enum MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE : Int32
    MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_OTHER = 0
    MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_COMMUNICATIONS = 1
    MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_MEDIA = 2
    MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_GAMECHAT = 3
    MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_SPEECH = 4
    MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_FARFIELDSPEECH = 5
    MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_UNIFORMSPEECH = 6
    MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_VOICETYPING = 7
  end

  enum MF_CAPTURE_ENGINE_AUDIO_PROCESSING_MODE : Int32
    MF_CAPTURE_ENGINE_AUDIO_PROCESSING_DEFAULT = 0
    MF_CAPTURE_ENGINE_AUDIO_PROCESSING_RAW = 1
  end

  enum MF_MT_D3D_RESOURCE_VERSION_ENUM : Int32
    MF_D3D11_RESOURCE = 0
    MF_D3D12_RESOURCE = 1
  end

  enum MFASYNC_WORKQUEUE_TYPE : Int32
    MF_STANDARD_WORKQUEUE = 0
    MF_WINDOW_WORKQUEUE = 1
    MF_MULTITHREADED_WORKQUEUE = 2
  end

  enum MF_TOPOSTATUS : Int32
    MF_TOPOSTATUS_INVALID = 0
    MF_TOPOSTATUS_READY = 100
    MF_TOPOSTATUS_STARTED_SOURCE = 200
    MF_TOPOSTATUS_DYNAMIC_CHANGED = 210
    MF_TOPOSTATUS_SINK_SWITCHED = 300
    MF_TOPOSTATUS_ENDED = 400
  end

  enum MFSampleEncryptionProtectionScheme : Int32
    MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_NONE = 0
    MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_AES_CTR = 1
    MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_AES_CBC = 2
  end

  enum MFT_ENUM_FLAG : Int32
    MFT_ENUM_FLAG_SYNCMFT = 1
    MFT_ENUM_FLAG_ASYNCMFT = 2
    MFT_ENUM_FLAG_HARDWARE = 4
    MFT_ENUM_FLAG_FIELDOFUSE = 8
    MFT_ENUM_FLAG_LOCALMFT = 16
    MFT_ENUM_FLAG_TRANSCODE_ONLY = 32
    MFT_ENUM_FLAG_SORTANDFILTER = 64
    MFT_ENUM_FLAG_SORTANDFILTER_APPROVED_ONLY = 192
    MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY = 320
    MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY_EDGEMODE = 576
    MFT_ENUM_FLAG_UNTRUSTED_STOREMFT = 1024
    MFT_ENUM_FLAG_ALL = 63
  end

  enum MFFrameSourceTypes : Int32
    MFFrameSourceTypes_Color = 1
    MFFrameSourceTypes_Infrared = 2
    MFFrameSourceTypes_Depth = 4
    MFFrameSourceTypes_Image = 8
    MFFrameSourceTypes_Custom = 128
  end

  enum MFVideo3DFormat : Int32
    MFVideo3DSampleFormat_BaseView = 0
    MFVideo3DSampleFormat_MultiView = 1
    MFVideo3DSampleFormat_Packed_LeftRight = 2
    MFVideo3DSampleFormat_Packed_TopBottom = 3
  end

  enum MFVideo3DSampleFormat : Int32
    MFSampleExtension_3DVideo_MultiView = 1
    MFSampleExtension_3DVideo_Packed = 0
  end

  enum MFVideoRotationFormat : Int32
    MFVideoRotationFormat_0 = 0
    MFVideoRotationFormat_90 = 90
    MFVideoRotationFormat_180 = 180
    MFVideoRotationFormat_270 = 270
  end

  enum MFDepthMeasurement : Int32
    DistanceToFocalPlane = 0
    DistanceToOpticalCenter = 1
  end

  enum MF_CUSTOM_DECODE_UNIT_TYPE : Int32
    MF_DECODE_UNIT_NAL = 0
    MF_DECODE_UNIT_SEI = 1
  end

  enum MFVideoDRMFlags : Int32
    MFVideoDRMFlag_None = 0
    MFVideoDRMFlag_AnalogProtected = 1
    MFVideoDRMFlag_DigitallyProtected = 2
  end

  enum MFVideoPadFlags : Int32
    MFVideoPadFlag_PAD_TO_None = 0
    MFVideoPadFlag_PAD_TO_4x3 = 1
    MFVideoPadFlag_PAD_TO_16x9 = 2
  end

  enum MFVideoSrcContentHintFlags : Int32
    MFVideoSrcContentHintFlag_None = 0
    MFVideoSrcContentHintFlag_16x9 = 1
    MFVideoSrcContentHintFlag_235_1 = 2
  end

  enum MFWaveFormatExConvertFlags : Int32
    MFWaveFormatExConvertFlag_Normal = 0
    MFWaveFormatExConvertFlag_ForceExtensible = 1
  end

  enum EAllocationType : Int32
    Eallocationtypedynamic = 0
    Eallocationtypert = 1
    Eallocationtypepageable = 2
    Eallocationtypeignore = 3
  end

  enum MF_MEDIA_ENGINE_ERR : Int32
    MF_MEDIA_ENGINE_ERR_NOERROR = 0
    MF_MEDIA_ENGINE_ERR_ABORTED = 1
    MF_MEDIA_ENGINE_ERR_NETWORK = 2
    MF_MEDIA_ENGINE_ERR_DECODE = 3
    MF_MEDIA_ENGINE_ERR_SRC_NOT_SUPPORTED = 4
    MF_MEDIA_ENGINE_ERR_ENCRYPTED = 5
  end

  enum MF_MEDIA_ENGINE_EVENT : Int32
    MF_MEDIA_ENGINE_EVENT_LOADSTART = 1
    MF_MEDIA_ENGINE_EVENT_PROGRESS = 2
    MF_MEDIA_ENGINE_EVENT_SUSPEND = 3
    MF_MEDIA_ENGINE_EVENT_ABORT = 4
    MF_MEDIA_ENGINE_EVENT_ERROR = 5
    MF_MEDIA_ENGINE_EVENT_EMPTIED = 6
    MF_MEDIA_ENGINE_EVENT_STALLED = 7
    MF_MEDIA_ENGINE_EVENT_PLAY = 8
    MF_MEDIA_ENGINE_EVENT_PAUSE = 9
    MF_MEDIA_ENGINE_EVENT_LOADEDMETADATA = 10
    MF_MEDIA_ENGINE_EVENT_LOADEDDATA = 11
    MF_MEDIA_ENGINE_EVENT_WAITING = 12
    MF_MEDIA_ENGINE_EVENT_PLAYING = 13
    MF_MEDIA_ENGINE_EVENT_CANPLAY = 14
    MF_MEDIA_ENGINE_EVENT_CANPLAYTHROUGH = 15
    MF_MEDIA_ENGINE_EVENT_SEEKING = 16
    MF_MEDIA_ENGINE_EVENT_SEEKED = 17
    MF_MEDIA_ENGINE_EVENT_TIMEUPDATE = 18
    MF_MEDIA_ENGINE_EVENT_ENDED = 19
    MF_MEDIA_ENGINE_EVENT_RATECHANGE = 20
    MF_MEDIA_ENGINE_EVENT_DURATIONCHANGE = 21
    MF_MEDIA_ENGINE_EVENT_VOLUMECHANGE = 22
    MF_MEDIA_ENGINE_EVENT_FORMATCHANGE = 1000
    MF_MEDIA_ENGINE_EVENT_PURGEQUEUEDEVENTS = 1001
    MF_MEDIA_ENGINE_EVENT_TIMELINE_MARKER = 1002
    MF_MEDIA_ENGINE_EVENT_BALANCECHANGE = 1003
    MF_MEDIA_ENGINE_EVENT_DOWNLOADCOMPLETE = 1004
    MF_MEDIA_ENGINE_EVENT_BUFFERINGSTARTED = 1005
    MF_MEDIA_ENGINE_EVENT_BUFFERINGENDED = 1006
    MF_MEDIA_ENGINE_EVENT_FRAMESTEPCOMPLETED = 1007
    MF_MEDIA_ENGINE_EVENT_NOTIFYSTABLESTATE = 1008
    MF_MEDIA_ENGINE_EVENT_FIRSTFRAMEREADY = 1009
    MF_MEDIA_ENGINE_EVENT_TRACKSCHANGE = 1010
    MF_MEDIA_ENGINE_EVENT_OPMINFO = 1011
    MF_MEDIA_ENGINE_EVENT_RESOURCELOST = 1012
    MF_MEDIA_ENGINE_EVENT_DELAYLOADEVENT_CHANGED = 1013
    MF_MEDIA_ENGINE_EVENT_STREAMRENDERINGERROR = 1014
    MF_MEDIA_ENGINE_EVENT_SUPPORTEDRATES_CHANGED = 1015
    MF_MEDIA_ENGINE_EVENT_AUDIOENDPOINTCHANGE = 1016
  end

  enum MF_MEDIA_ENGINE_NETWORK : Int32
    MF_MEDIA_ENGINE_NETWORK_EMPTY = 0
    MF_MEDIA_ENGINE_NETWORK_IDLE = 1
    MF_MEDIA_ENGINE_NETWORK_LOADING = 2
    MF_MEDIA_ENGINE_NETWORK_NO_SOURCE = 3
  end

  enum MF_MEDIA_ENGINE_READY : Int32
    MF_MEDIA_ENGINE_READY_HAVE_NOTHING = 0
    MF_MEDIA_ENGINE_READY_HAVE_METADATA = 1
    MF_MEDIA_ENGINE_READY_HAVE_CURRENT_DATA = 2
    MF_MEDIA_ENGINE_READY_HAVE_FUTURE_DATA = 3
    MF_MEDIA_ENGINE_READY_HAVE_ENOUGH_DATA = 4
  end

  enum MF_MEDIA_ENGINE_CANPLAY : Int32
    MF_MEDIA_ENGINE_CANPLAY_NOT_SUPPORTED = 0
    MF_MEDIA_ENGINE_CANPLAY_MAYBE = 1
    MF_MEDIA_ENGINE_CANPLAY_PROBABLY = 2
  end

  enum MF_MEDIA_ENGINE_PRELOAD : Int32
    MF_MEDIA_ENGINE_PRELOAD_MISSING = 0
    MF_MEDIA_ENGINE_PRELOAD_EMPTY = 1
    MF_MEDIA_ENGINE_PRELOAD_NONE = 2
    MF_MEDIA_ENGINE_PRELOAD_METADATA = 3
    MF_MEDIA_ENGINE_PRELOAD_AUTOMATIC = 4
  end

  enum MF_MEDIA_ENGINE_S3D_PACKING_MODE : Int32
    MF_MEDIA_ENGINE_S3D_PACKING_MODE_NONE = 0
    MF_MEDIA_ENGINE_S3D_PACKING_MODE_SIDE_BY_SIDE = 1
    MF_MEDIA_ENGINE_S3D_PACKING_MODE_TOP_BOTTOM = 2
  end

  enum MF_MEDIA_ENGINE_STATISTIC : Int32
    MF_MEDIA_ENGINE_STATISTIC_FRAMES_RENDERED = 0
    MF_MEDIA_ENGINE_STATISTIC_FRAMES_DROPPED = 1
    MF_MEDIA_ENGINE_STATISTIC_BYTES_DOWNLOADED = 2
    MF_MEDIA_ENGINE_STATISTIC_BUFFER_PROGRESS = 3
    MF_MEDIA_ENGINE_STATISTIC_FRAMES_PER_SECOND = 4
    MF_MEDIA_ENGINE_STATISTIC_PLAYBACK_JITTER = 5
    MF_MEDIA_ENGINE_STATISTIC_FRAMES_CORRUPTED = 6
    MF_MEDIA_ENGINE_STATISTIC_TOTAL_FRAME_DELAY = 7
  end

  enum MF_MEDIA_ENGINE_SEEK_MODE : Int32
    MF_MEDIA_ENGINE_SEEK_MODE_NORMAL = 0
    MF_MEDIA_ENGINE_SEEK_MODE_APPROXIMATE = 1
  end

  enum MF_MEDIA_ENGINE_EXTENSION_TYPE : Int32
    MF_MEDIA_ENGINE_EXTENSION_TYPE_MEDIASOURCE = 0
    MF_MEDIA_ENGINE_EXTENSION_TYPE_BYTESTREAM = 1
  end

  enum MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAGS : Int32
    MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_PROTECTED = 1
    MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_SURFACE_PROTECTION = 2
    MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_ANTI_SCREEN_SCRAPE_PROTECTION = 4
  end

  enum MF_MSE_VP9_SUPPORT_TYPE : Int32
    MF_MSE_VP9_SUPPORT_DEFAULT = 0
    MF_MSE_VP9_SUPPORT_ON = 1
    MF_MSE_VP9_SUPPORT_OFF = 2
  end

  enum MF_MSE_OPUS_SUPPORT_TYPE : Int32
    MF_MSE_OPUS_SUPPORT_ON = 0
    MF_MSE_OPUS_SUPPORT_OFF = 1
  end

  enum MF_MSE_APPEND_MODE : Int32
    MF_MSE_APPEND_MODE_SEGMENTS = 0
    MF_MSE_APPEND_MODE_SEQUENCE = 1
  end

  enum MF_MSE_READY : Int32
    MF_MSE_READY_CLOSED = 1
    MF_MSE_READY_OPEN = 2
    MF_MSE_READY_ENDED = 3
  end

  enum MF_MSE_ERROR : Int32
    MF_MSE_ERROR_NOERROR = 0
    MF_MSE_ERROR_NETWORK = 1
    MF_MSE_ERROR_DECODE = 2
    MF_MSE_ERROR_UNKNOWN_ERROR = 3
  end

  enum MF_MEDIA_ENGINE_KEYERR : Int32
    MF_MEDIAENGINE_KEYERR_UNKNOWN = 1
    MF_MEDIAENGINE_KEYERR_CLIENT = 2
    MF_MEDIAENGINE_KEYERR_SERVICE = 3
    MF_MEDIAENGINE_KEYERR_OUTPUT = 4
    MF_MEDIAENGINE_KEYERR_HARDWARECHANGE = 5
    MF_MEDIAENGINE_KEYERR_DOMAIN = 6
  end

  enum MF_HDCP_STATUS : Int32
    MF_HDCP_STATUS_ON = 0
    MF_HDCP_STATUS_OFF = 1
    MF_HDCP_STATUS_ON_WITH_TYPE_ENFORCEMENT = 2
  end

  enum MF_MEDIA_ENGINE_OPM_STATUS : Int32
    MF_MEDIA_ENGINE_OPM_NOT_REQUESTED = 0
    MF_MEDIA_ENGINE_OPM_ESTABLISHED = 1
    MF_MEDIA_ENGINE_OPM_FAILED_VM = 2
    MF_MEDIA_ENGINE_OPM_FAILED_BDA = 3
    MF_MEDIA_ENGINE_OPM_FAILED_UNSIGNED_DRIVER = 4
    MF_MEDIA_ENGINE_OPM_FAILED = 5
  end

  enum MF_MEDIA_ENGINE_CREATEFLAGS : Int32
    MF_MEDIA_ENGINE_AUDIOONLY = 1
    MF_MEDIA_ENGINE_WAITFORSTABLE_STATE = 2
    MF_MEDIA_ENGINE_FORCEMUTE = 4
    MF_MEDIA_ENGINE_REAL_TIME_MODE = 8
    MF_MEDIA_ENGINE_DISABLE_LOCAL_PLUGINS = 16
    MF_MEDIA_ENGINE_CREATEFLAGS_MASK = 31
  end

  enum MF_MEDIA_ENGINE_PROTECTION_FLAGS : Int32
    MF_MEDIA_ENGINE_ENABLE_PROTECTED_CONTENT = 1
    MF_MEDIA_ENGINE_USE_PMP_FOR_ALL_CONTENT = 2
    MF_MEDIA_ENGINE_USE_UNPROTECTED_PMP = 4
  end

  enum MF_TIMED_TEXT_TRACK_KIND : Int32
    MF_TIMED_TEXT_TRACK_KIND_UNKNOWN = 0
    MF_TIMED_TEXT_TRACK_KIND_SUBTITLES = 1
    MF_TIMED_TEXT_TRACK_KIND_CAPTIONS = 2
    MF_TIMED_TEXT_TRACK_KIND_METADATA = 3
  end

  enum MF_TIMED_TEXT_UNIT_TYPE : Int32
    MF_TIMED_TEXT_UNIT_TYPE_PIXELS = 0
    MF_TIMED_TEXT_UNIT_TYPE_PERCENTAGE = 1
  end

  enum MF_TIMED_TEXT_FONT_STYLE : Int32
    MF_TIMED_TEXT_FONT_STYLE_NORMAL = 0
    MF_TIMED_TEXT_FONT_STYLE_OBLIQUE = 1
    MF_TIMED_TEXT_FONT_STYLE_ITALIC = 2
  end

  enum MF_TIMED_TEXT_ALIGNMENT : Int32
    MF_TIMED_TEXT_ALIGNMENT_START = 0
    MF_TIMED_TEXT_ALIGNMENT_END = 1
    MF_TIMED_TEXT_ALIGNMENT_CENTER = 2
  end

  enum MF_TIMED_TEXT_DISPLAY_ALIGNMENT : Int32
    MF_TIMED_TEXT_DISPLAY_ALIGNMENT_BEFORE = 0
    MF_TIMED_TEXT_DISPLAY_ALIGNMENT_AFTER = 1
    MF_TIMED_TEXT_DISPLAY_ALIGNMENT_CENTER = 2
  end

  enum MF_TIMED_TEXT_DECORATION : Int32
    MF_TIMED_TEXT_DECORATION_NONE = 0
    MF_TIMED_TEXT_DECORATION_UNDERLINE = 1
    MF_TIMED_TEXT_DECORATION_LINE_THROUGH = 2
    MF_TIMED_TEXT_DECORATION_OVERLINE = 4
  end

  enum MF_TIMED_TEXT_WRITING_MODE : Int32
    MF_TIMED_TEXT_WRITING_MODE_LRTB = 0
    MF_TIMED_TEXT_WRITING_MODE_RLTB = 1
    MF_TIMED_TEXT_WRITING_MODE_TBRL = 2
    MF_TIMED_TEXT_WRITING_MODE_TBLR = 3
    MF_TIMED_TEXT_WRITING_MODE_LR = 4
    MF_TIMED_TEXT_WRITING_MODE_RL = 5
    MF_TIMED_TEXT_WRITING_MODE_TB = 6
  end

  enum MF_TIMED_TEXT_SCROLL_MODE : Int32
    MF_TIMED_TEXT_SCROLL_MODE_POP_ON = 0
    MF_TIMED_TEXT_SCROLL_MODE_ROLL_UP = 1
  end

  enum MF_TIMED_TEXT_ERROR_CODE : Int32
    MF_TIMED_TEXT_ERROR_CODE_NOERROR = 0
    MF_TIMED_TEXT_ERROR_CODE_FATAL = 1
    MF_TIMED_TEXT_ERROR_CODE_DATA_FORMAT = 2
    MF_TIMED_TEXT_ERROR_CODE_NETWORK = 3
    MF_TIMED_TEXT_ERROR_CODE_INTERNAL = 4
  end

  enum MF_TIMED_TEXT_CUE_EVENT : Int32
    MF_TIMED_TEXT_CUE_EVENT_ACTIVE = 0
    MF_TIMED_TEXT_CUE_EVENT_INACTIVE = 1
    MF_TIMED_TEXT_CUE_EVENT_CLEAR = 2
  end

  enum MF_TIMED_TEXT_TRACK_READY_STATE : Int32
    MF_TIMED_TEXT_TRACK_READY_STATE_NONE = 0
    MF_TIMED_TEXT_TRACK_READY_STATE_LOADING = 1
    MF_TIMED_TEXT_TRACK_READY_STATE_LOADED = 2
    MF_TIMED_TEXT_TRACK_READY_STATE_ERROR = 3
  end

  enum MF_TIMED_TEXT_RUBY_POSITION : Int32
    MF_TIMED_TEXT_RUBY_POSITION_BEFORE = 0
    MF_TIMED_TEXT_RUBY_POSITION_AFTER = 1
    MF_TIMED_TEXT_RUBY_POSITION_OUTSIDE = 2
  end

  enum MF_TIMED_TEXT_RUBY_ALIGN : Int32
    MF_TIMED_TEXT_RUBY_ALIGN_CENTER = 0
    MF_TIMED_TEXT_RUBY_ALIGN_START = 1
    MF_TIMED_TEXT_RUBY_ALIGN_END = 2
    MF_TIMED_TEXT_RUBY_ALIGN_SPACEAROUND = 3
    MF_TIMED_TEXT_RUBY_ALIGN_SPACEBETWEEN = 4
    MF_TIMED_TEXT_RUBY_ALIGN_WITHBASE = 5
  end

  enum MF_TIMED_TEXT_RUBY_RESERVE : Int32
    MF_TIMED_TEXT_RUBY_RESERVE_NONE = 0
    MF_TIMED_TEXT_RUBY_RESERVE_BEFORE = 1
    MF_TIMED_TEXT_RUBY_RESERVE_AFTER = 2
    MF_TIMED_TEXT_RUBY_RESERVE_BOTH = 3
    MF_TIMED_TEXT_RUBY_RESERVE_OUTSIDE = 4
  end

  enum MF_TIMED_TEXT_BOUTEN_TYPE : Int32
    MF_TIMED_TEXT_BOUTEN_TYPE_NONE = 0
    MF_TIMED_TEXT_BOUTEN_TYPE_AUTO = 1
    MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDCIRCLE = 2
    MF_TIMED_TEXT_BOUTEN_TYPE_OPENCIRCLE = 3
    MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDDOT = 4
    MF_TIMED_TEXT_BOUTEN_TYPE_OPENDOT = 5
    MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDSESAME = 6
    MF_TIMED_TEXT_BOUTEN_TYPE_OPENSESAME = 7
  end

  enum MF_TIMED_TEXT_BOUTEN_POSITION : Int32
    MF_TIMED_TEXT_BOUTEN_POSITION_BEFORE = 0
    MF_TIMED_TEXT_BOUTEN_POSITION_AFTER = 1
    MF_TIMED_TEXT_BOUTEN_POSITION_OUTSIDE = 2
  end

  enum MF_MEDIA_ENGINE_STREAMTYPE_FAILED : Int32
    MF_MEDIA_ENGINE_STREAMTYPE_FAILED_UNKNOWN = 0
    MF_MEDIA_ENGINE_STREAMTYPE_FAILED_AUDIO = 1
    MF_MEDIA_ENGINE_STREAMTYPE_FAILED_VIDEO = 2
  end

  enum MF_MEDIAKEYS_REQUIREMENT : Int32
    MF_MEDIAKEYS_REQUIREMENT_REQUIRED = 1
    MF_MEDIAKEYS_REQUIREMENT_OPTIONAL = 2
    MF_MEDIAKEYS_REQUIREMENT_NOT_ALLOWED = 3
  end

  enum MF_SOURCE_READER_FLAG : Int32
    MF_SOURCE_READERF_ERROR = 1
    MF_SOURCE_READERF_ENDOFSTREAM = 2
    MF_SOURCE_READERF_NEWSTREAM = 4
    MF_SOURCE_READERF_NATIVEMEDIATYPECHANGED = 16
    MF_SOURCE_READERF_CURRENTMEDIATYPECHANGED = 32
    MF_SOURCE_READERF_STREAMTICK = 256
    MF_SOURCE_READERF_ALLEFFECTSREMOVED = 512
  end

  enum MF_SOURCE_READER_CONTROL_FLAG : Int32
    MF_SOURCE_READER_CONTROLF_DRAIN = 1
  end

  enum MF_SOURCE_READER_CONSTANTS : Int32
    MF_SOURCE_READER_INVALID_STREAM_INDEX = -1
    MF_SOURCE_READER_ALL_STREAMS = -2
    MF_SOURCE_READER_ANY_STREAM = -2
    MF_SOURCE_READER_FIRST_AUDIO_STREAM = -3
    MF_SOURCE_READER_FIRST_VIDEO_STREAM = -4
    MF_SOURCE_READER_MEDIASOURCE = -1
  end

  enum MF_SOURCE_READER_CURRENT_TYPE_CONSTANTS : Int32
    MF_SOURCE_READER_CURRENT_TYPE_INDEX = -1
  end

  enum MF_SINK_WRITER_CONSTANTS : UInt32
    MF_SINK_WRITER_INVALID_STREAM_INDEX = 4294967295
    MF_SINK_WRITER_ALL_STREAMS = 4294967294
    MF_SINK_WRITER_MEDIASINK = 4294967295
  end

  enum MFVideoAspectRatioMode : Int32
    MFVideoARMode_None = 0
    MFVideoARMode_PreservePicture = 1
    MFVideoARMode_PreservePixel = 2
    MFVideoARMode_NonLinearStretch = 4
    MFVideoARMode_Mask = 7
  end

  enum MFVideoRenderPrefs : Int32
    MFVideoRenderPrefs_DoNotRenderBorder = 1
    MFVideoRenderPrefs_DoNotClipToDevice = 2
    MFVideoRenderPrefs_AllowOutputThrottling = 4
    MFVideoRenderPrefs_ForceOutputThrottling = 8
    MFVideoRenderPrefs_ForceBatching = 16
    MFVideoRenderPrefs_AllowBatching = 32
    MFVideoRenderPrefs_ForceScaling = 64
    MFVideoRenderPrefs_AllowScaling = 128
    MFVideoRenderPrefs_DoNotRepaintOnStop = 256
    MFVideoRenderPrefs_Mask = 511
  end

  enum MFVP_MESSAGE_TYPE : Int32
    MFVP_MESSAGE_FLUSH = 0
    MFVP_MESSAGE_INVALIDATEMEDIATYPE = 1
    MFVP_MESSAGE_PROCESSINPUTNOTIFY = 2
    MFVP_MESSAGE_BEGINSTREAMING = 3
    MFVP_MESSAGE_ENDSTREAMING = 4
    MFVP_MESSAGE_ENDOFSTREAM = 5
    MFVP_MESSAGE_STEP = 6
    MFVP_MESSAGE_CANCELSTEP = 7
  end

  enum MFVideoMixPrefs : Int32
    MFVideoMixPrefs_ForceHalfInterlace = 1
    MFVideoMixPrefs_AllowDropToHalfInterlace = 2
    MFVideoMixPrefs_AllowDropToBob = 4
    MFVideoMixPrefs_ForceBob = 8
    MFVideoMixPrefs_EnableRotation = 16
    MFVideoMixPrefs_Mask = 31
  end

  enum EVRFilterConfigPrefs : Int32
    EVRFilterConfigPrefs_EnableQoS = 1
    EVRFilterConfigPrefs_Mask = 1
  end

  enum MF_SERVICE_LOOKUP_TYPE : Int32
    MF_SERVICE_LOOKUP_UPSTREAM = 0
    MF_SERVICE_LOOKUP_UPSTREAM_DIRECT = 1
    MF_SERVICE_LOOKUP_DOWNSTREAM = 2
    MF_SERVICE_LOOKUP_DOWNSTREAM_DIRECT = 3
    MF_SERVICE_LOOKUP_ALL = 4
    MF_SERVICE_LOOKUP_GLOBAL = 5
  end

  enum MFP_CREATION_OPTIONS : Int32
    MFP_OPTION_NONE = 0
    MFP_OPTION_FREE_THREADED_CALLBACK = 1
    MFP_OPTION_NO_MMCSS = 2
    MFP_OPTION_NO_REMOTE_DESKTOP_OPTIMIZATION = 4
  end

  enum MFP_MEDIAPLAYER_STATE : Int32
    MFP_MEDIAPLAYER_STATE_EMPTY = 0
    MFP_MEDIAPLAYER_STATE_STOPPED = 1
    MFP_MEDIAPLAYER_STATE_PLAYING = 2
    MFP_MEDIAPLAYER_STATE_PAUSED = 3
    MFP_MEDIAPLAYER_STATE_SHUTDOWN = 4
  end

  enum MFP_MEDIAITEM_CHARACTERISTICS : Int32
    MFP_MEDIAITEM_IS_LIVE = 1
    MFP_MEDIAITEM_CAN_SEEK = 2
    MFP_MEDIAITEM_CAN_PAUSE = 4
    MFP_MEDIAITEM_HAS_SLOW_SEEK = 8
  end

  enum MFP_CREDENTIAL_FLAGS : Int32
    MFP_CREDENTIAL_PROMPT = 1
    MFP_CREDENTIAL_SAVE = 2
    MFP_CREDENTIAL_DO_NOT_CACHE = 4
    MFP_CREDENTIAL_CLEAR_TEXT = 8
    MFP_CREDENTIAL_PROXY = 16
    MFP_CREDENTIAL_LOGGED_ON_USER = 32
  end

  enum MFP_EVENT_TYPE : Int32
    MFP_EVENT_TYPE_PLAY = 0
    MFP_EVENT_TYPE_PAUSE = 1
    MFP_EVENT_TYPE_STOP = 2
    MFP_EVENT_TYPE_POSITION_SET = 3
    MFP_EVENT_TYPE_RATE_SET = 4
    MFP_EVENT_TYPE_MEDIAITEM_CREATED = 5
    MFP_EVENT_TYPE_MEDIAITEM_SET = 6
    MFP_EVENT_TYPE_FRAME_STEP = 7
    MFP_EVENT_TYPE_MEDIAITEM_CLEARED = 8
    MFP_EVENT_TYPE_MF = 9
    MFP_EVENT_TYPE_ERROR = 10
    MFP_EVENT_TYPE_PLAYBACK_ENDED = 11
    MFP_EVENT_TYPE_ACQUIRE_USER_CREDENTIAL = 12
  end

  enum MF_SHARING_ENGINE_EVENT : Int32
    MF_SHARING_ENGINE_EVENT_DISCONNECT = 2000
    MF_SHARING_ENGINE_EVENT_LOCALRENDERINGSTARTED = 2001
    MF_SHARING_ENGINE_EVENT_LOCALRENDERINGENDED = 2002
    MF_SHARING_ENGINE_EVENT_STOPPED = 2003
    MF_SHARING_ENGINE_EVENT_ERROR = 2501
  end

  enum MF_MEDIA_SHARING_ENGINE_EVENT : Int32
    MF_MEDIA_SHARING_ENGINE_EVENT_DISCONNECT = 2000
  end

  enum PLAYTO_SOURCE_CREATEFLAGS : Int32
    PLAYTO_SOURCE_NONE = 0
    PLAYTO_SOURCE_IMAGE = 1
    PLAYTO_SOURCE_AUDIO = 2
    PLAYTO_SOURCE_VIDEO = 4
    PLAYTO_SOURCE_PROTECTED = 8
  end

  enum MFVideoAlphaBitmapFlags : Int32
    MFVideoAlphaBitmap_EntireDDS = 1
    MFVideoAlphaBitmap_SrcColorKey = 2
    MFVideoAlphaBitmap_SrcRect = 4
    MFVideoAlphaBitmap_DestRect = 8
    MFVideoAlphaBitmap_FilterMode = 16
    MFVideoAlphaBitmap_Alpha = 32
    MFVideoAlphaBitmap_BitMask = 63
  end

  enum MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0001 : Int32
    MFVirtualCameraType_SoftwareCameraSource = 0
  end

  enum MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0002 : Int32
    MFVirtualCameraLifetime_Session = 0
    MFVirtualCameraLifetime_System = 1
  end

  enum MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0003 : Int32
    MFVirtualCameraAccess_CurrentUser = 0
    MFVirtualCameraAccess_AllUsers = 1
  end

  enum OPM_HDCP_TYPE : Int32
    OPM_HDCP_TYPE_0 = 0
    OPM_HDCP_TYPE_1 = 1
  end

  enum OPM_HDCP_STATUS : Int32
    OPM_HDCP_STATUS_ON = 0
    OPM_HDCP_STATUS_OFF = 1
  end

  union D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS_Anonymous_e__Union
    p_configuration_cqp : D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP*
    p_configuration_cbr : D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR*
    p_configuration_vbr : D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR*
    p_configuration_qvbr : D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR*
  end
  union D3D12_VIDEO_ENCODER_PROFILE_DESC_Anonymous_e__Union
    p_h264_profile : D3D12_VIDEO_ENCODER_PROFILE_H264*
    p_hevc_profile : D3D12_VIDEO_ENCODER_PROFILE_HEVC*
  end
  union D3D12_VIDEO_ENCODER_LEVEL_SETTING_Anonymous_e__Union
    p_h264_level_setting : D3D12_VIDEO_ENCODER_LEVELS_H264*
    p_hevc_level_setting : D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC*
  end
  union D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_Anonymous_e__Union
    p_h264_support : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264*
    p_hevc_support : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC*
  end
  union D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_Anonymous_e__Union
    p_h264_support : D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264*
    p_hevc_support : D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC*
  end
  union D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_Anonymous_e__Union
    p_h264_config : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264*
    p_hevc_config : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC*
  end
  union D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_Anonymous_e__Union
    p_h264_group_of_pictures : D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264*
    p_hevc_group_of_pictures : D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC*
  end
  union D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_Anonymous_e__Union
    p_h264_pic_data : D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264*
    p_hevc_pic_data : D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC*
  end
  union D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES_Anonymous_e__Union
    max_bytes_per_slice : UInt32
    number_of_coding_units_per_slice : UInt32
    number_of_rows_per_slice : UInt32
    number_of_slices_per_frame : UInt32
  end
  union D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_Anonymous_e__Union
    p_slices_partition_h264 : D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES*
    p_slices_partition_hevc : D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES*
  end
  union DXVAHD_COLOR
    rgb : DXVAHD_COLOR_RGBA
    y_cb_cr : DXVAHD_COLOR_YCbCrA
  end
  union DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA_Anonymous_e__Union
    anonymous : DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA_Anonymous_e__Union_Anonymous_e__Struct
    value : UInt32
  end
  union DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA_Anonymous_e__Union
    anonymous : DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA_Anonymous_e__Union_Anonymous_e__Struct
    value : UInt32
  end
  union DXVA2_ExtendedFormat_Anonymous_e__Union
    anonymous : DXVA2_ExtendedFormat_Anonymous_e__Union_Anonymous_e__Struct
    value : UInt32
  end
  union DXVA2_Fixed32_Anonymous_e__Union
    anonymous : DXVA2_Fixed32_Anonymous_e__Union_Anonymous_e__Struct
    ll : Int32
  end
  union MFPaletteEntry
    argb : MFARGB
    ay_cb_cr : MFAYUVSample
  end
  union MFTOPONODE_ATTRIBUTE_UPDATE_Anonymous_e__Union
    u32 : UInt32
    u64 : UInt64
    d : Float64
  end
  union MFVideoAlphaBitmap_bitmap_e__Union
    hdc : HDC
    p_dds : IDirect3DSurface9
  end

  struct CodecAPIEventData
    guid : Guid
    data_length : UInt32
    reserved : UInt32[3]*
  end
  struct D3DOVERLAYCAPS
    caps : UInt32
    max_overlay_display_width : UInt32
    max_overlay_display_height : UInt32
  end
  struct D3DCONTENTPROTECTIONCAPS
    caps : UInt32
    key_exchange_type : Guid
    buffer_alignment_start : UInt32
    block_alignment_size : UInt32
    protected_memory_size : UInt64
  end
  struct D3D12_VIDEO_FORMAT
    format : DXGI_FORMAT
    color_space : DXGI_COLOR_SPACE_TYPE
  end
  struct D3D12_VIDEO_SAMPLE
    width : UInt32
    height : UInt32
    format : D3D12_VIDEO_FORMAT
  end
  struct D3D12_VIDEO_DECODE_CONFIGURATION
    decode_profile : Guid
    bitstream_encryption : D3D12_BITSTREAM_ENCRYPTION_TYPE
    interlace_type : D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE
  end
  struct D3D12_VIDEO_DECODER_DESC
    node_mask : UInt32
    configuration : D3D12_VIDEO_DECODE_CONFIGURATION
  end
  struct D3D12_VIDEO_DECODER_HEAP_DESC
    node_mask : UInt32
    configuration : D3D12_VIDEO_DECODE_CONFIGURATION
    decode_width : UInt32
    decode_height : UInt32
    format : DXGI_FORMAT
    frame_rate : DXGI_RATIONAL
    bit_rate : UInt32
    max_decode_picture_buffer_count : UInt32
  end
  struct D3D12_VIDEO_SIZE_RANGE
    max_width : UInt32
    max_height : UInt32
    min_width : UInt32
    min_height : UInt32
  end
  struct D3D12_VIDEO_PROCESS_ALPHA_BLENDING
    enable : LibC::BOOL
    alpha : Float32
  end
  struct D3D12_VIDEO_PROCESS_LUMA_KEY
    enable : LibC::BOOL
    lower : Float32
    upper : Float32
  end
  struct D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC
    format : DXGI_FORMAT
    color_space : DXGI_COLOR_SPACE_TYPE
    source_aspect_ratio : DXGI_RATIONAL
    destination_aspect_ratio : DXGI_RATIONAL
    frame_rate : DXGI_RATIONAL
    source_size_range : D3D12_VIDEO_SIZE_RANGE
    destination_size_range : D3D12_VIDEO_SIZE_RANGE
    enable_orientation : LibC::BOOL
    filter_flags : D3D12_VIDEO_PROCESS_FILTER_FLAGS
    stereo_format : D3D12_VIDEO_FRAME_STEREO_FORMAT
    field_type : D3D12_VIDEO_FIELD_TYPE
    deinterlace_mode : D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS
    enable_alpha_blending : LibC::BOOL
    luma_key : D3D12_VIDEO_PROCESS_LUMA_KEY
    num_past_frames : UInt32
    num_future_frames : UInt32
    enable_auto_processing : LibC::BOOL
  end
  struct D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC
    format : DXGI_FORMAT
    color_space : DXGI_COLOR_SPACE_TYPE
    alpha_fill_mode : D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE
    alpha_fill_mode_source_stream_index : UInt32
    background_color : Float32[4]*
    frame_rate : DXGI_RATIONAL
    enable_stereo : LibC::BOOL
  end
  struct D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT
    node_index : UInt32
    configuration : D3D12_VIDEO_DECODE_CONFIGURATION
    width : UInt32
    height : UInt32
    decode_format : DXGI_FORMAT
    frame_rate : DXGI_RATIONAL
    bit_rate : UInt32
    support_flags : D3D12_VIDEO_DECODE_SUPPORT_FLAGS
    configuration_flags : D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS
    decode_tier : D3D12_VIDEO_DECODE_TIER
  end
  struct D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT
    node_index : UInt32
    profile_count : UInt32
  end
  struct D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES
    node_index : UInt32
    profile_count : UInt32
    p_profiles : Guid*
  end
  struct D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT
    node_index : UInt32
    configuration : D3D12_VIDEO_DECODE_CONFIGURATION
    format_count : UInt32
  end
  struct D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS
    node_index : UInt32
    configuration : D3D12_VIDEO_DECODE_CONFIGURATION
    format_count : UInt32
    p_output_formats : DXGI_FORMAT*
  end
  struct D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE
    io_coherent : LibC::BOOL
  end
  struct D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM
    node_index : UInt32
    decode_profile : Guid
    width : UInt32
    height : UInt32
    decode_format : DXGI_FORMAT
    components : D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS
    bin_count : UInt32
    counter_bit_depth : UInt32
  end
  struct D3D12_VIDEO_SCALE_SUPPORT
    output_size_range : D3D12_VIDEO_SIZE_RANGE
    flags : D3D12_VIDEO_SCALE_SUPPORT_FLAGS
  end
  struct D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT
    node_index : UInt32
    configuration : D3D12_VIDEO_DECODE_CONFIGURATION
    decode_sample : D3D12_VIDEO_SAMPLE
    output_format : D3D12_VIDEO_FORMAT
    frame_rate : DXGI_RATIONAL
    bit_rate : UInt32
    support_flags : D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS
    scale_support : D3D12_VIDEO_SCALE_SUPPORT
  end
  struct D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE
    video_decoder_heap_desc : D3D12_VIDEO_DECODER_HEAP_DESC
    memory_pool_l0_size : UInt64
    memory_pool_l1_size : UInt64
  end
  struct D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE
    node_mask : UInt32
    p_output_stream_desc : D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*
    num_input_stream_descs : UInt32
    p_input_stream_descs : D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*
    memory_pool_l0_size : UInt64
    memory_pool_l1_size : UInt64
  end
  struct D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS
    status : UInt64
    num_macroblocks_affected : UInt64
    frame_rate : DXGI_RATIONAL
    bit_rate : UInt32
  end
  struct D3D12_VIDEO_DECODE_FRAME_ARGUMENT
    type : D3D12_VIDEO_DECODE_ARGUMENT_TYPE
    size : UInt32
    p_data : Void*
  end
  struct D3D12_VIDEO_DECODE_REFERENCE_FRAMES
    num_texture2_ds : UInt32
    pp_texture2_ds : ID3D12Resource*
    p_subresources : UInt32*
    pp_heaps : ID3D12VideoDecoderHeap*
  end
  struct D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM
    p_buffer : ID3D12Resource
    offset : UInt64
    size : UInt64
  end
  struct D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS
    enable : LibC::BOOL
    p_reference_texture2_d : ID3D12Resource
    reference_subresource : UInt32
    output_color_space : DXGI_COLOR_SPACE_TYPE
    decode_color_space : DXGI_COLOR_SPACE_TYPE
  end
  struct D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS
    num_frame_arguments : UInt32
    frame_arguments : D3D12_VIDEO_DECODE_FRAME_ARGUMENT[10]*
    reference_frames : D3D12_VIDEO_DECODE_REFERENCE_FRAMES
    compressed_bitstream : D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM
    p_heap : ID3D12VideoDecoderHeap
  end
  struct D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS
    p_output_texture2_d : ID3D12Resource
    output_subresource : UInt32
    conversion_arguments : D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS
  end
  struct D3D12_VIDEO_PROCESS_FILTER_RANGE
    minimum : Int32
    maximum : Int32
    default : Int32
    multiplier : Float32
  end
  struct D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT
    node_index : UInt32
    input_sample : D3D12_VIDEO_SAMPLE
    input_field_type : D3D12_VIDEO_FIELD_TYPE
    input_stereo_format : D3D12_VIDEO_FRAME_STEREO_FORMAT
    input_frame_rate : DXGI_RATIONAL
    output_format : D3D12_VIDEO_FORMAT
    output_stereo_format : D3D12_VIDEO_FRAME_STEREO_FORMAT
    output_frame_rate : DXGI_RATIONAL
    support_flags : D3D12_VIDEO_PROCESS_SUPPORT_FLAGS
    scale_support : D3D12_VIDEO_SCALE_SUPPORT
    feature_support : D3D12_VIDEO_PROCESS_FEATURE_FLAGS
    deinterlace_support : D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS
    auto_processing_support : D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS
    filter_support : D3D12_VIDEO_PROCESS_FILTER_FLAGS
    filter_range_support : D3D12_VIDEO_PROCESS_FILTER_RANGE[32]*
  end
  struct D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS
    node_index : UInt32
    max_input_streams : UInt32
  end
  struct D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO
    node_index : UInt32
    deinterlace_mode : D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS
    filters : D3D12_VIDEO_PROCESS_FILTER_FLAGS
    feature_support : D3D12_VIDEO_PROCESS_FEATURE_FLAGS
    input_frame_rate : DXGI_RATIONAL
    output_frame_rate : DXGI_RATIONAL
    enable_auto_processing : LibC::BOOL
    past_frames : UInt32
    future_frames : UInt32
  end
  struct D3D12_VIDEO_PROCESS_REFERENCE_SET
    num_past_frames : UInt32
    pp_past_frames : ID3D12Resource*
    p_past_subresources : UInt32*
    num_future_frames : UInt32
    pp_future_frames : ID3D12Resource*
    p_future_subresources : UInt32*
  end
  struct D3D12_VIDEO_PROCESS_TRANSFORM
    source_rectangle : RECT
    destination_rectangle : RECT
    orientation : D3D12_VIDEO_PROCESS_ORIENTATION
  end
  struct D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE
    output_index : UInt32
    input_frame_or_field : UInt32
  end
  struct D3D12_VIDEO_PROCESS_INPUT_STREAM
    p_texture2_d : ID3D12Resource
    subresource : UInt32
    reference_set : D3D12_VIDEO_PROCESS_REFERENCE_SET
  end
  struct D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS
    input_stream : D3D12_VIDEO_PROCESS_INPUT_STREAM[2]*
    transform : D3D12_VIDEO_PROCESS_TRANSFORM
    flags : D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS
    rate_info : D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE
    filter_levels : Int32[32]*
    alpha_blending : D3D12_VIDEO_PROCESS_ALPHA_BLENDING
  end
  struct D3D12_VIDEO_PROCESS_OUTPUT_STREAM
    p_texture2_d : ID3D12Resource
    subresource : UInt32
  end
  struct D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS
    output_stream : D3D12_VIDEO_PROCESS_OUTPUT_STREAM[2]*
    target_rectangle : RECT
  end
  struct D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM
    offset : UInt64
    p_buffer : ID3D12Resource
  end
  struct D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1
    enable : LibC::BOOL
    p_reference_texture2_d : ID3D12Resource
    reference_subresource : UInt32
    output_color_space : DXGI_COLOR_SPACE_TYPE
    decode_color_space : DXGI_COLOR_SPACE_TYPE
    output_width : UInt32
    output_height : UInt32
  end
  struct D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1
    p_output_texture2_d : ID3D12Resource
    output_subresource : UInt32
    conversion_arguments : D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1
    histograms : D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM[4]*
  end
  struct D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1
    input_stream : D3D12_VIDEO_PROCESS_INPUT_STREAM[2]*
    transform : D3D12_VIDEO_PROCESS_TRANSFORM
    flags : D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS
    rate_info : D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE
    filter_levels : Int32[32]*
    alpha_blending : D3D12_VIDEO_PROCESS_ALPHA_BLENDING
    field_type : D3D12_VIDEO_FIELD_TYPE
  end
  struct D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT
    node_index : UInt32
    video_decode_support : LibC::BOOL
    video_process_support : LibC::BOOL
    video_encode_support : LibC::BOOL
  end
  struct D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR
    node_index : UInt32
    input_format : DXGI_FORMAT
    block_size_flags : D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS
    precision_flags : D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS
    size_range : D3D12_VIDEO_SIZE_RANGE
  end
  struct D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE
    node_index : UInt32
    input_format : DXGI_FORMAT
    block_size : D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE
    precision : D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION
    size_range : D3D12_VIDEO_SIZE_RANGE
    protected : LibC::BOOL
    motion_vector_heap_memory_pool_l0_size : UInt64
    motion_vector_heap_memory_pool_l1_size : UInt64
    motion_estimator_memory_pool_l0_size : UInt64
    motion_estimator_memory_pool_l1_size : UInt64
  end
  struct D3D12_VIDEO_MOTION_ESTIMATOR_DESC
    node_mask : UInt32
    input_format : DXGI_FORMAT
    block_size : D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE
    precision : D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION
    size_range : D3D12_VIDEO_SIZE_RANGE
  end
  struct D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC
    node_mask : UInt32
    input_format : DXGI_FORMAT
    block_size : D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE
    precision : D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION
    size_range : D3D12_VIDEO_SIZE_RANGE
  end
  struct D3D12_RESOURCE_COORDINATE
    x : UInt64
    y : UInt32
    z : UInt32
    subresource_index : UInt32
  end
  struct D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT
    p_motion_vector_heap : ID3D12VideoMotionVectorHeap
  end
  struct D3D12_VIDEO_MOTION_ESTIMATOR_INPUT
    p_input_texture2_d : ID3D12Resource
    input_subresource_index : UInt32
    p_reference_texture2_d : ID3D12Resource
    reference_subresource_index : UInt32
    p_hint_motion_vector_heap : ID3D12VideoMotionVectorHeap
  end
  struct D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT
    p_motion_vector_texture2_d : ID3D12Resource
    motion_vector_coordinate : D3D12_RESOURCE_COORDINATE
  end
  struct D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT
    p_motion_vector_heap : ID3D12VideoMotionVectorHeap
    pixel_width : UInt32
    pixel_height : UInt32
  end
  struct D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES
    node_index : UInt32
    configuration : D3D12_VIDEO_DECODE_CONFIGURATION
    support_flags : D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS
  end
  struct D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES
    node_index : UInt32
    support_flags : D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS
  end
  struct D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES
    node_index : UInt32
    support_flags : D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS
  end
  struct D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1
    video_decoder_heap_desc : D3D12_VIDEO_DECODER_HEAP_DESC
    protected : LibC::BOOL
    memory_pool_l0_size : UInt64
    memory_pool_l1_size : UInt64
  end
  struct D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1
    node_mask : UInt32
    p_output_stream_desc : D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*
    num_input_stream_descs : UInt32
    p_input_stream_descs : D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*
    protected : LibC::BOOL
    memory_pool_l0_size : UInt64
    memory_pool_l1_size : UInt64
  end
  struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT
    node_index : UInt32
    command_count : UInt32
  end
  struct D3D12_VIDEO_EXTENSION_COMMAND_INFO
    command_id : Guid
    name : LibC::LPWSTR
    command_list_support_flags : D3D12_COMMAND_LIST_SUPPORT_FLAGS
  end
  struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS
    node_index : UInt32
    command_count : UInt32
    p_command_infos : D3D12_VIDEO_EXTENSION_COMMAND_INFO*
  end
  struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT
    command_id : Guid
    stage : D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE
    parameter_count : UInt32
    parameter_packing : UInt32
  end
  struct D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO
    name : LibC::LPWSTR
    type : D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE
    flags : D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS
  end
  struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS
    command_id : Guid
    stage : D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE
    parameter_count : UInt32
    p_parameter_infos : D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO*
  end
  struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT
    node_index : UInt32
    command_id : Guid
    p_input_data : Void*
    input_data_size_in_bytes : LibC::UINT_PTR
    p_output_data : Void*
    output_data_size_in_bytes : LibC::UINT_PTR
  end
  struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE
    node_index : UInt32
    command_id : Guid
    p_creation_parameters : Void*
    creation_parameters_size_in_bytes : LibC::UINT_PTR
    memory_pool_l0_size : UInt64
    memory_pool_l1_size : UInt64
  end
  struct D3D12_VIDEO_EXTENSION_COMMAND_DESC
    node_mask : UInt32
    command_id : Guid
  end
  struct D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP
    constant_qp_full_intracoded_frame : UInt32
    constant_qp_inter_predicted_frame_prev_ref_only : UInt32
    constant_qp_inter_predicted_frame_bi_directional_ref : UInt32
  end
  struct D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR
    initial_qp : UInt32
    min_qp : UInt32
    max_qp : UInt32
    max_frame_bit_size : UInt64
    target_bit_rate : UInt64
    vbv_capacity : UInt64
    initial_vbv_fullness : UInt64
  end
  struct D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR
    initial_qp : UInt32
    min_qp : UInt32
    max_qp : UInt32
    max_frame_bit_size : UInt64
    target_avg_bit_rate : UInt64
    peak_bit_rate : UInt64
    vbv_capacity : UInt64
    initial_vbv_fullness : UInt64
  end
  struct D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR
    initial_qp : UInt32
    min_qp : UInt32
    max_qp : UInt32
    max_frame_bit_size : UInt64
    target_avg_bit_rate : UInt64
    peak_bit_rate : UInt64
    constant_quality_target : UInt32
  end
  struct D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS
    data_size : UInt32
    anonymous : D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS_Anonymous_e__Union
  end
  struct D3D12_VIDEO_ENCODER_RATE_CONTROL
    mode : D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE
    flags : D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS
    config_params : D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS
    target_frame_rate : DXGI_RATIONAL
  end
  struct D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC
    node_index : UInt32
    codec : D3D12_VIDEO_ENCODER_CODEC
    is_supported : LibC::BOOL
  end
  struct D3D12_VIDEO_ENCODER_PROFILE_DESC
    data_size : UInt32
    anonymous : D3D12_VIDEO_ENCODER_PROFILE_DESC_Anonymous_e__Union
  end
  struct D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC
    level : D3D12_VIDEO_ENCODER_LEVELS_HEVC
    tier : D3D12_VIDEO_ENCODER_TIER_HEVC
  end
  struct D3D12_VIDEO_ENCODER_LEVEL_SETTING
    data_size : UInt32
    anonymous : D3D12_VIDEO_ENCODER_LEVEL_SETTING_Anonymous_e__Union
  end
  struct D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL
    node_index : UInt32
    codec : D3D12_VIDEO_ENCODER_CODEC
    profile : D3D12_VIDEO_ENCODER_PROFILE_DESC
    is_supported : LibC::BOOL
    min_supported_level : D3D12_VIDEO_ENCODER_LEVEL_SETTING
    max_supported_level : D3D12_VIDEO_ENCODER_LEVEL_SETTING
  end
  struct D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC
    width : UInt32
    height : UInt32
  end
  struct D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC
    width_ratio : UInt32
    height_ratio : UInt32
  end
  struct D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT
    node_index : UInt32
    codec : D3D12_VIDEO_ENCODER_CODEC
    resolution_ratios_count : UInt32
  end
  struct D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION
    node_index : UInt32
    codec : D3D12_VIDEO_ENCODER_CODEC
    resolution_ratios_count : UInt32
    is_supported : LibC::BOOL
    min_resolution_supported : D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC
    max_resolution_supported : D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC
    resolution_width_multiple_requirement : UInt32
    resolution_height_multiple_requirement : UInt32
    p_resolution_ratios : D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC*
  end
  struct D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT
    node_index : UInt32
    codec : D3D12_VIDEO_ENCODER_CODEC
    profile : D3D12_VIDEO_ENCODER_PROFILE_DESC
    format : DXGI_FORMAT
    is_supported : LibC::BOOL
  end
  struct D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE
    node_index : UInt32
    codec : D3D12_VIDEO_ENCODER_CODEC
    rate_control_mode : D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE
    is_supported : LibC::BOOL
  end
  struct D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE
    node_index : UInt32
    codec : D3D12_VIDEO_ENCODER_CODEC
    profile : D3D12_VIDEO_ENCODER_PROFILE_DESC
    level : D3D12_VIDEO_ENCODER_LEVEL_SETTING
    intra_refresh_mode : D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE
    is_supported : LibC::BOOL
  end
  struct D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE
    node_index : UInt32
    codec : D3D12_VIDEO_ENCODER_CODEC
    profile : D3D12_VIDEO_ENCODER_PROFILE_DESC
    level : D3D12_VIDEO_ENCODER_LEVEL_SETTING
    subregion_mode : D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE
    is_supported : LibC::BOOL
  end
  struct D3D12_VIDEO_ENCODER_HEAP_DESC
    node_mask : UInt32
    flags : D3D12_VIDEO_ENCODER_HEAP_FLAGS
    encode_codec : D3D12_VIDEO_ENCODER_CODEC
    encode_profile : D3D12_VIDEO_ENCODER_PROFILE_DESC
    encode_level : D3D12_VIDEO_ENCODER_LEVEL_SETTING
    resolutions_list_count : UInt32
    p_resolution_list : D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC*
  end
  struct D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE
    heap_desc : D3D12_VIDEO_ENCODER_HEAP_DESC
    is_supported : LibC::BOOL
    memory_pool_l0_size : UInt64
    memory_pool_l1_size : UInt64
  end
  struct D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264
    support_flags : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS
    disable_deblocking_filter_supported_modes : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS
  end
  struct D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC
    support_flags : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS
    min_luma_coding_unit_size : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE
    max_luma_coding_unit_size : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE
    min_luma_transform_unit_size : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE
    max_luma_transform_unit_size : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE
    max_transform_hierarchy_depth_inter : UInt8
    max_transform_hierarchy_depth_intra : UInt8
  end
  struct D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT
    data_size : UInt32
    anonymous : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_Anonymous_e__Union
  end
  struct D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT
    node_index : UInt32
    codec : D3D12_VIDEO_ENCODER_CODEC
    profile : D3D12_VIDEO_ENCODER_PROFILE_DESC
    is_supported : LibC::BOOL
    codec_support_limits : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT
  end
  struct D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264
    max_l0_references_for_p : UInt32
    max_l0_references_for_b : UInt32
    max_l1_references_for_b : UInt32
    max_long_term_references : UInt32
    max_dpb_capacity : UInt32
  end
  struct D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC
    max_l0_references_for_p : UInt32
    max_l0_references_for_b : UInt32
    max_l1_references_for_b : UInt32
    max_long_term_references : UInt32
    max_dpb_capacity : UInt32
  end
  struct D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT
    data_size : UInt32
    anonymous : D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_Anonymous_e__Union
  end
  struct D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT
    node_index : UInt32
    codec : D3D12_VIDEO_ENCODER_CODEC
    profile : D3D12_VIDEO_ENCODER_PROFILE_DESC
    is_supported : LibC::BOOL
    picture_support : D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT
  end
  struct D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264
    configuration_flags : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS
    direct_mode_config : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES
    disable_deblocking_filter_config : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES
  end
  struct D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC
    configuration_flags : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS
    min_luma_coding_unit_size : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE
    max_luma_coding_unit_size : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE
    min_luma_transform_unit_size : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE
    max_luma_transform_unit_size : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE
    max_transform_hierarchy_depth_inter : UInt8
    max_transform_hierarchy_depth_intra : UInt8
  end
  struct D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION
    data_size : UInt32
    anonymous : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_Anonymous_e__Union
  end
  struct D3D12_VIDEO_ENCODER_INTRA_REFRESH
    mode : D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE
    intra_refresh_duration : UInt32
  end
  struct D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS
    max_subregions_number : UInt32
    max_intra_refresh_frame_duration : UInt32
    subregion_block_pixels_size : UInt32
    qp_map_region_pixels_size : UInt32
  end
  struct D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264
    gop_length : UInt32
    p_picture_period : UInt32
    pic_order_cnt_type : UInt8
    log2_max_frame_num_minus4 : UInt8
    log2_max_pic_order_cnt_lsb_minus4 : UInt8
  end
  struct D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC
    gop_length : UInt32
    p_picture_period : UInt32
    log2_max_pic_order_cnt_lsb_minus4 : UInt8
  end
  struct D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE
    data_size : UInt32
    anonymous : D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_Anonymous_e__Union
  end
  struct D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT
    node_index : UInt32
    codec : D3D12_VIDEO_ENCODER_CODEC
    input_format : DXGI_FORMAT
    codec_configuration : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION
    codec_gop_sequence : D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE
    rate_control : D3D12_VIDEO_ENCODER_RATE_CONTROL
    intra_refresh : D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE
    subregion_frame_encoding : D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE
    resolutions_list_count : UInt32
    p_resolution_list : D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC*
    max_reference_frames_in_dpb : UInt32
    validation_flags : D3D12_VIDEO_ENCODER_VALIDATION_FLAGS
    support_flags : D3D12_VIDEO_ENCODER_SUPPORT_FLAGS
    suggested_profile : D3D12_VIDEO_ENCODER_PROFILE_DESC
    suggested_level : D3D12_VIDEO_ENCODER_LEVEL_SETTING
    p_resolution_dependent_support : D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS*
  end
  struct D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS
    node_index : UInt32
    codec : D3D12_VIDEO_ENCODER_CODEC
    profile : D3D12_VIDEO_ENCODER_PROFILE_DESC
    input_format : DXGI_FORMAT
    picture_target_resolution : D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC
    is_supported : LibC::BOOL
    compressed_bitstream_buffer_access_alignment : UInt32
    encoder_metadata_buffer_access_alignment : UInt32
    max_encoder_output_metadata_buffer_size : UInt32
  end
  struct D3D12_VIDEO_ENCODER_DESC
    node_mask : UInt32
    flags : D3D12_VIDEO_ENCODER_FLAGS
    encode_codec : D3D12_VIDEO_ENCODER_CODEC
    encode_profile : D3D12_VIDEO_ENCODER_PROFILE_DESC
    input_format : DXGI_FORMAT
    codec_configuration : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION
    max_motion_estimation_precision : D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE
  end
  struct D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264
    reconstructed_picture_resource_index : UInt32
    is_long_term_reference : LibC::BOOL
    long_term_picture_idx : UInt32
    picture_order_count_number : UInt32
    frame_decoding_order_number : UInt32
    temporal_layer_index : UInt32
  end
  struct D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION
    memory_management_control_operation : UInt8
    difference_of_pic_nums_minus1 : UInt32
    long_term_pic_num : UInt32
    long_term_frame_idx : UInt32
    max_long_term_frame_idx_plus1 : UInt32
  end
  struct D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION
    modification_of_pic_nums_idc : UInt8
    abs_diff_pic_num_minus1 : UInt32
    long_term_pic_num : UInt32
  end
  struct D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264
    flags : D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS
    frame_type : D3D12_VIDEO_ENCODER_FRAME_TYPE_H264
    pic_parameter_set_id : UInt32
    idr_pic_id : UInt32
    picture_order_count_number : UInt32
    frame_decoding_order_number : UInt32
    temporal_layer_index : UInt32
    list0_reference_frames_count : UInt32
    p_list0_reference_frames : UInt32*
    list1_reference_frames_count : UInt32
    p_list1_reference_frames : UInt32*
    reference_frames_recon_picture_descriptors_count : UInt32
    p_reference_frames_recon_picture_descriptors : D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264*
    adaptive_ref_pic_marking_mode_flag : UInt8
    ref_pic_marking_operations_commands_count : UInt32
    p_ref_pic_marking_operations_commands : D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION*
    list0_ref_pic_modifications_count : UInt32
    p_list0_ref_pic_modifications : D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION*
    list1_ref_pic_modifications_count : UInt32
    p_list1_ref_pic_modifications : D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION*
    qp_map_values_count : UInt32
    p_rate_control_qp_map : Int8*
  end
  struct D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC
    reconstructed_picture_resource_index : UInt32
    is_ref_used_by_current_pic : LibC::BOOL
    is_long_term_reference : LibC::BOOL
    picture_order_count_number : UInt32
    temporal_layer_index : UInt32
  end
  struct D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC
    flags : D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS
    frame_type : D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC
    slice_pic_parameter_set_id : UInt32
    picture_order_count_number : UInt32
    temporal_layer_index : UInt32
    list0_reference_frames_count : UInt32
    p_list0_reference_frames : UInt32*
    list1_reference_frames_count : UInt32
    p_list1_reference_frames : UInt32*
    reference_frames_recon_picture_descriptors_count : UInt32
    p_reference_frames_recon_picture_descriptors : D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC*
    list0_ref_pic_modifications_count : UInt32
    p_list0_ref_pic_modifications : UInt32*
    list1_ref_pic_modifications_count : UInt32
    p_list1_ref_pic_modifications : UInt32*
    qp_map_values_count : UInt32
    p_rate_control_qp_map : Int8*
  end
  struct D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA
    data_size : UInt32
    anonymous : D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_Anonymous_e__Union
  end
  struct D3D12_VIDEO_ENCODE_REFERENCE_FRAMES
    num_texture2_ds : UInt32
    pp_texture2_ds : ID3D12Resource*
    p_subresources : UInt32*
  end
  struct D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC
    intra_refresh_frame_index : UInt32
    flags : D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS
    picture_control_codec_data : D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA
    reference_frames : D3D12_VIDEO_ENCODE_REFERENCE_FRAMES
  end
  struct D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES
    anonymous : D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES_Anonymous_e__Union
  end
  struct D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA
    data_size : UInt32
    anonymous : D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_Anonymous_e__Union
  end
  struct D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC
    flags : D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS
    intra_refresh_config : D3D12_VIDEO_ENCODER_INTRA_REFRESH
    rate_control : D3D12_VIDEO_ENCODER_RATE_CONTROL
    picture_target_resolution : D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC
    selected_layout_mode : D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE
    frame_subregions_layout_data : D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA
    codec_gop_sequence : D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE
  end
  struct D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS
    sequence_control_desc : D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC
    picture_control_desc : D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC
    p_input_frame : ID3D12Resource
    input_frame_subresource : UInt32
    current_frame_bitstream_metadata_size : UInt32
  end
  struct D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM
    p_buffer : ID3D12Resource
    frame_start_offset : UInt64
  end
  struct D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE
    p_reconstructed_picture : ID3D12Resource
    reconstructed_picture_subresource : UInt32
  end
  struct D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA
    b_size : UInt64
    b_start_offset : UInt64
    b_header_size : UInt64
  end
  struct D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS
    average_qp : UInt64
    intra_coding_units_count : UInt64
    inter_coding_units_count : UInt64
    skip_coding_units_count : UInt64
    average_motion_estimation_x_direction : UInt64
    average_motion_estimation_y_direction : UInt64
  end
  struct D3D12_VIDEO_ENCODER_OUTPUT_METADATA
    encode_error_flags : UInt64
    encode_stats : D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS
    encoded_bitstream_written_bytes_count : UInt64
    written_subregions_count : UInt64
  end
  struct D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER
    p_buffer : ID3D12Resource
    offset : UInt64
  end
  struct D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS
    encoder_codec : D3D12_VIDEO_ENCODER_CODEC
    encoder_profile : D3D12_VIDEO_ENCODER_PROFILE_DESC
    encoder_input_format : DXGI_FORMAT
    encoded_picture_effective_resolution : D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC
    hw_layout_metadata : D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER
  end
  struct D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS
    resolved_layout_metadata : D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER
  end
  struct D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS
    bitstream : D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM
    reconstructed_picture : D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE
    encoder_output_metadata : D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER
  end
  struct AecQualityMetrics_Struct
    i64_timestamp : Int64
    convergence_flag : UInt8
    mic_clipped_flag : UInt8
    mic_silence_flag : UInt8
    pstv_feadback_flag : UInt8
    spk_clipped_flag : UInt8
    spk_mute_flag : UInt8
    glitch_flag : UInt8
    double_talk_flag : UInt8
    u_glitch_count : UInt32
    u_mic_clip_count : UInt32
    f_duration : Float32
    f_ts_variance : Float32
    f_ts_drift_rate : Float32
    f_voice_level : Float32
    f_noise_level : Float32
    f_erle : Float32
    f_avg_erle : Float32
    dw_reserved : UInt32
  end
  struct TOC_DESCRIPTOR
    guid_id : Guid
    w_stream_number : UInt16
    guid_type : Guid
    w_language_index : UInt16
  end
  struct TOC_ENTRY_DESCRIPTOR
    qw_start_time : UInt64
    qw_end_time : UInt64
    qw_start_packet_offset : UInt64
    qw_end_packet_offset : UInt64
    qw_representative_frame_time : UInt64
  end
  struct DXVA_AYUVsample2
    b_cr_value : UInt8
    b_cb_value : UInt8
    b_y_value : UInt8
    b_sample_alpha8 : UInt8
  end
  struct DXVA_BufferDescription
    dw_type_index : UInt32
    dw_buffer_index : UInt32
    dw_data_offset : UInt32
    dw_data_size : UInt32
    dw_first_m_baddress : UInt32
    dw_num_m_bs_in_buffer : UInt32
    dw_width : UInt32
    dw_height : UInt32
    dw_stride : UInt32
    dw_reserved_bits : UInt32
  end
  struct DXVA_ConfigPictureDecode
    dw_function : UInt32
    dw_reserved_bits : UInt32[3]*
    guid_config_bitstream_encryption : Guid
    guid_config_m_bcontrol_encryption : Guid
    guid_config_resid_diff_encryption : Guid
    b_config_bitstream_raw : UInt8
    b_config_m_bcontrol_raster_order : UInt8
    b_config_resid_diff_host : UInt8
    b_config_spatial_resid8 : UInt8
    b_config_resid8_subtraction : UInt8
    b_config_spatial_host8or9_clipping : UInt8
    b_config_spatial_resid_interleaved : UInt8
    b_config_intra_resid_unsigned : UInt8
    b_config_resid_diff_accelerator : UInt8
    b_config_host_inverse_scan : UInt8
    b_config_specific_idct : UInt8
    b_config4_grouped_coefs : UInt8
  end
  struct DXVA_PictureParameters
    w_decoded_picture_index : UInt16
    w_deblocked_picture_index : UInt16
    w_forward_ref_picture_index : UInt16
    w_backward_ref_picture_index : UInt16
    w_pic_width_in_m_bminus1 : UInt16
    w_pic_height_in_m_bminus1 : UInt16
    b_macroblock_width_minus1 : UInt8
    b_macroblock_height_minus1 : UInt8
    b_block_width_minus1 : UInt8
    b_block_height_minus1 : UInt8
    b_bp_pminus1 : UInt8
    b_pic_structure : UInt8
    b_second_field : UInt8
    b_pic_intra : UInt8
    b_pic_backward_prediction : UInt8
    b_bidirectional_averaging_mode : UInt8
    b_m_vprecision_and_chroma_relation : UInt8
    b_chroma_format : UInt8
    b_pic_scan_fixed : UInt8
    b_pic_scan_method : UInt8
    b_pic_readback_requests : UInt8
    b_rcontrol : UInt8
    b_pic_spatial_resid8 : UInt8
    b_pic_overflow_blocks : UInt8
    b_pic_extrapolation : UInt8
    b_pic_deblocked : UInt8
    b_pic_deblock_confined : UInt8
    b_pic4_m_vallowed : UInt8
    b_pic_obmc : UInt8
    b_pic_bin_pb : UInt8
    b_mv_rps : UInt8
    b_reserved_bits : UInt8
    w_bitstream_fcodes : UInt16
    w_bitstream_pc_eelements : UInt16
    b_bitstream_concealment_need : UInt8
    b_bitstream_concealment_method : UInt8
  end
  struct DXVAUncompDataInfo
    uncomp_width : UInt32
    uncomp_height : UInt32
    uncomp_format : D3DFORMAT
  end
  struct DXVACompBufferInfo
    num_comp_buffers : UInt32
    width_to_create : UInt32
    height_to_create : UInt32
    bytes_to_allocate : UInt32
    usage : UInt32
    pool : D3DPOOL
    format : D3DFORMAT
  end
  struct DXVABufferInfo
    p_comp_surface : Void*
    data_offset : UInt32
    data_size : UInt32
  end
  struct DXVA_ExtendedFormat
    _bitfield : UInt32
  end
  struct DXVA_Frequency
    numerator : UInt32
    denominator : UInt32
  end
  struct DXVA_VideoDesc
    size : UInt32
    sample_width : UInt32
    sample_height : UInt32
    sample_format : UInt32
    d3d_format : D3DFORMAT
    input_sample_freq : DXVA_Frequency
    output_frame_freq : DXVA_Frequency
  end
  struct DXVA_VideoSample
    rt_start : Int64
    rt_end : Int64
    sample_format : DXVA_SampleFormat
    lp_dds_src_surface : Void*
  end
  struct DXVA_VideoSample2
    size : UInt32
    reserved : UInt32
    rt_start : Int64
    rt_end : Int64
    sample_format : UInt32
    sample_flags : UInt32
    lp_dds_src_surface : Void*
    rc_src : RECT
    rc_dst : RECT
    palette : DXVA_AYUVsample2[16]*
  end
  struct DXVA_DeinterlaceCaps
    size : UInt32
    num_previous_output_frames : UInt32
    input_pool : UInt32
    num_forward_ref_samples : UInt32
    num_backward_ref_samples : UInt32
    d3d_output_format : D3DFORMAT
    video_processing_caps : DXVA_VideoProcessCaps
    deinterlace_technology : DXVA_DeinterlaceTech
  end
  struct DXVA_VideoSample32
    rt_start : Int64
    rt_end : Int64
    sample_format : UInt32
    sample_flags : UInt32
    lp_dds_src_surface : UInt32
    rc_src : RECT
    rc_dst : RECT
    palette : DXVA_AYUVsample2[16]*
  end
  struct DXVA_DeinterlaceBltEx32
    size : UInt32
    background_color : DXVA_AYUVsample2
    rc_target : RECT
    rt_target : Int64
    num_source_surfaces : UInt32
    alpha : Float32
    source : DXVA_VideoSample32[32]*
    destination_format : UInt32
    destination_flags : UInt32
  end
  struct DXVA_DeinterlaceBlt
    size : UInt32
    reserved : UInt32
    rt_target : Int64
    dst_rect : RECT
    src_rect : RECT
    num_source_surfaces : UInt32
    alpha : Float32
    source : DXVA_VideoSample[32]*
  end
  struct DXVA_DeinterlaceBltEx
    size : UInt32
    background_color : DXVA_AYUVsample2
    rc_target : RECT
    rt_target : Int64
    num_source_surfaces : UInt32
    alpha : Float32
    source : DXVA_VideoSample2[32]*
    destination_format : UInt32
    destination_flags : UInt32
  end
  struct DXVA_DeinterlaceQueryAvailableModes
    size : UInt32
    num_guids : UInt32
    guids : Guid[32]*
  end
  struct DXVA_DeinterlaceQueryModeCaps
    size : UInt32
    guid : Guid
    video_desc : DXVA_VideoDesc
  end
  struct DXVA_ProcAmpControlCaps
    size : UInt32
    input_pool : UInt32
    d3d_output_format : D3DFORMAT
    proc_amp_control_props : UInt32
    video_processing_caps : UInt32
  end
  struct DXVA_ProcAmpControlQueryRange
    size : UInt32
    proc_amp_control_prop : DXVA_ProcAmpControlProp
    video_desc : DXVA_VideoDesc
  end
  struct DXVA_VideoPropertyRange
    min_value : Float32
    max_value : Float32
    default_value : Float32
    step_size : Float32
  end
  struct DXVA_ProcAmpControlBlt
    size : UInt32
    dst_rect : RECT
    src_rect : RECT
    alpha : Float32
    brightness : Float32
    contrast : Float32
    hue : Float32
    saturation : Float32
  end
  struct DXVA_COPPSignature
    signature : UInt8[256]*
  end
  struct DXVA_COPPCommand
    mac_kdi : Guid
    guid_command_id : Guid
    dw_sequence : UInt32
    cb_size_data : UInt32
    command_data : UInt8[4056]*
  end
  struct DXVA_COPPStatusInput
    r_app : Guid
    guid_status_request_id : Guid
    dw_sequence : UInt32
    cb_size_data : UInt32
    status_data : UInt8[4056]*
  end
  struct DXVA_COPPStatusOutput
    mac_kdi : Guid
    cb_size_data : UInt32
    copp_status : UInt8[4076]*
  end
  struct DXVAHD_RATIONAL
    numerator : UInt32
    denominator : UInt32
  end
  struct DXVAHD_COLOR_RGBA
    r : Float32
    g : Float32
    b : Float32
    a : Float32
  end
  struct DXVAHD_COLOR_YCbCrA
    y : Float32
    cb : Float32
    cr : Float32
    a : Float32
  end
  struct DXVAHD_CONTENT_DESC
    input_frame_format : DXVAHD_FRAME_FORMAT
    input_frame_rate : DXVAHD_RATIONAL
    input_width : UInt32
    input_height : UInt32
    output_frame_rate : DXVAHD_RATIONAL
    output_width : UInt32
    output_height : UInt32
  end
  struct DXVAHD_VPDEVCAPS
    device_type : DXVAHD_DEVICE_TYPE
    device_caps : UInt32
    feature_caps : UInt32
    filter_caps : UInt32
    input_format_caps : UInt32
    input_pool : D3DPOOL
    output_format_count : UInt32
    input_format_count : UInt32
    video_processor_count : UInt32
    max_input_streams : UInt32
    max_stream_states : UInt32
  end
  struct DXVAHD_VPCAPS
    vp_guid : Guid
    past_frames : UInt32
    future_frames : UInt32
    processor_caps : UInt32
    i_telecine_caps : UInt32
    custom_rate_count : UInt32
  end
  struct DXVAHD_CUSTOM_RATE_DATA
    custom_rate : DXVAHD_RATIONAL
    output_frames : UInt32
    input_interlaced : LibC::BOOL
    input_frames_or_fields : UInt32
  end
  struct DXVAHD_FILTER_RANGE_DATA
    minimum : Int32
    maximum : Int32
    default : Int32
    multiplier : Float32
  end
  struct DXVAHD_BLT_STATE_TARGET_RECT_DATA
    enable : LibC::BOOL
    target_rect : RECT
  end
  struct DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA
    y_cb_cr : LibC::BOOL
    background_color : DXVAHD_COLOR
  end
  struct DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA
    anonymous : DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA_Anonymous_e__Union
  end
  struct DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA_Anonymous_e__Union_Anonymous_e__Struct
    _bitfield : UInt32
  end
  struct DXVAHD_BLT_STATE_ALPHA_FILL_DATA
    mode : DXVAHD_ALPHA_FILL_MODE
    stream_number : UInt32
  end
  struct DXVAHD_BLT_STATE_CONSTRICTION_DATA
    enable : LibC::BOOL
    size : SIZE
  end
  struct DXVAHD_BLT_STATE_PRIVATE_DATA
    guid : Guid
    data_size : UInt32
    p_data : Void*
  end
  struct DXVAHD_STREAM_STATE_D3DFORMAT_DATA
    format : D3DFORMAT
  end
  struct DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA
    frame_format : DXVAHD_FRAME_FORMAT
  end
  struct DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA
    anonymous : DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA_Anonymous_e__Union
  end
  struct DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA_Anonymous_e__Union_Anonymous_e__Struct
    _bitfield : UInt32
  end
  struct DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA
    repeat_frame : LibC::BOOL
    output_rate : DXVAHD_OUTPUT_RATE
    custom_rate : DXVAHD_RATIONAL
  end
  struct DXVAHD_STREAM_STATE_SOURCE_RECT_DATA
    enable : LibC::BOOL
    source_rect : RECT
  end
  struct DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA
    enable : LibC::BOOL
    destination_rect : RECT
  end
  struct DXVAHD_STREAM_STATE_ALPHA_DATA
    enable : LibC::BOOL
    alpha : Float32
  end
  struct DXVAHD_STREAM_STATE_PALETTE_DATA
    count : UInt32
    p_entries : UInt32*
  end
  struct DXVAHD_STREAM_STATE_LUMA_KEY_DATA
    enable : LibC::BOOL
    lower : Float32
    upper : Float32
  end
  struct DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA
    enable : LibC::BOOL
    source_aspect_ratio : DXVAHD_RATIONAL
    destination_aspect_ratio : DXVAHD_RATIONAL
  end
  struct DXVAHD_STREAM_STATE_FILTER_DATA
    enable : LibC::BOOL
    level : Int32
  end
  struct DXVAHD_STREAM_STATE_PRIVATE_DATA
    guid : Guid
    data_size : UInt32
    p_data : Void*
  end
  struct DXVAHD_STREAM_DATA
    enable : LibC::BOOL
    output_index : UInt32
    input_frame_or_field : UInt32
    past_frames : UInt32
    future_frames : UInt32
    pp_past_surfaces : IDirect3DSurface9*
    p_input_surface : IDirect3DSurface9
    pp_future_surfaces : IDirect3DSurface9*
  end
  struct DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA
    enable : LibC::BOOL
    i_telecine_flags : UInt32
    frames : UInt32
    input_field : UInt32
  end
  struct DXVAHDSW_CALLBACKS
    create_device : PDXVAHDSW_CreateDevice
    propose_video_private_format : PDXVAHDSW_ProposeVideoPrivateFormat
    get_video_processor_device_caps : PDXVAHDSW_GetVideoProcessorDeviceCaps
    get_video_processor_output_formats : PDXVAHDSW_GetVideoProcessorOutputFormats
    get_video_processor_input_formats : PDXVAHDSW_GetVideoProcessorInputFormats
    get_video_processor_caps : PDXVAHDSW_GetVideoProcessorCaps
    get_video_processor_custom_rates : PDXVAHDSW_GetVideoProcessorCustomRates
    get_video_processor_filter_range : PDXVAHDSW_GetVideoProcessorFilterRange
    destroy_device : PDXVAHDSW_DestroyDevice
    create_video_processor : PDXVAHDSW_CreateVideoProcessor
    set_video_process_blt_state : PDXVAHDSW_SetVideoProcessBltState
    get_video_process_blt_state_private : PDXVAHDSW_GetVideoProcessBltStatePrivate
    set_video_process_stream_state : PDXVAHDSW_SetVideoProcessStreamState
    get_video_process_stream_state_private : PDXVAHDSW_GetVideoProcessStreamStatePrivate
    video_process_blt_hd : PDXVAHDSW_VideoProcessBltHD
    destroy_video_processor : PDXVAHDSW_DestroyVideoProcessor
  end
  struct DXVAHDETW_CREATEVIDEOPROCESSOR
    p_object : UInt64
    p_d3_d9_ex : UInt64
    vp_guid : Guid
  end
  struct DXVAHDETW_VIDEOPROCESSBLTSTATE
    p_object : UInt64
    state : DXVAHD_BLT_STATE
    data_size : UInt32
    set_state : LibC::BOOL
  end
  struct DXVAHDETW_VIDEOPROCESSSTREAMSTATE
    p_object : UInt64
    stream_number : UInt32
    state : DXVAHD_STREAM_STATE
    data_size : UInt32
    set_state : LibC::BOOL
  end
  struct DXVAHDETW_VIDEOPROCESSBLTHD
    p_object : UInt64
    p_output_surface : UInt64
    target_rect : RECT
    output_format : D3DFORMAT
    color_space : UInt32
    output_frame : UInt32
    stream_count : UInt32
    enter : LibC::BOOL
  end
  struct DXVAHDETW_VIDEOPROCESSBLTHD_STREAM
    p_object : UInt64
    p_input_surface : UInt64
    source_rect : RECT
    destination_rect : RECT
    input_format : D3DFORMAT
    frame_format : DXVAHD_FRAME_FORMAT
    color_space : UInt32
    stream_number : UInt32
    output_index : UInt32
    input_frame_or_field : UInt32
    past_frames : UInt32
    future_frames : UInt32
  end
  struct DXVAHDETW_DESTROYVIDEOPROCESSOR
    p_object : UInt64
  end
  struct DXVA2_ExtendedFormat
    anonymous : DXVA2_ExtendedFormat_Anonymous_e__Union
  end
  struct DXVA2_ExtendedFormat_Anonymous_e__Union_Anonymous_e__Struct
    _bitfield : UInt32
  end
  struct DXVA2_Frequency
    numerator : UInt32
    denominator : UInt32
  end
  struct DXVA2_VideoDesc
    sample_width : UInt32
    sample_height : UInt32
    sample_format : DXVA2_ExtendedFormat
    format : D3DFORMAT
    input_sample_freq : DXVA2_Frequency
    output_frame_freq : DXVA2_Frequency
    uab_protection_level : UInt32
    reserved : UInt32
  end
  struct DXVA2_VideoProcessorCaps
    device_caps : UInt32
    input_pool : D3DPOOL
    num_forward_ref_samples : UInt32
    num_backward_ref_samples : UInt32
    reserved : UInt32
    deinterlace_technology : UInt32
    proc_amp_control_caps : UInt32
    video_processor_operations : UInt32
    noise_filter_technology : UInt32
    detail_filter_technology : UInt32
  end
  struct DXVA2_Fixed32
    anonymous : DXVA2_Fixed32_Anonymous_e__Union
  end
  struct DXVA2_Fixed32_Anonymous_e__Union_Anonymous_e__Struct
    fraction : UInt16
    value : Int16
  end
  struct DXVA2_AYUVSample8
    cr : UInt8
    cb : UInt8
    y : UInt8
    alpha : UInt8
  end
  struct DXVA2_AYUVSample16
    cr : UInt16
    cb : UInt16
    y : UInt16
    alpha : UInt16
  end
  struct DXVA2_VideoSample
    start : Int64
    end_ : Int64
    sample_format : DXVA2_ExtendedFormat
    src_surface : IDirect3DSurface9
    src_rect : RECT
    dst_rect : RECT
    pal : DXVA2_AYUVSample8[16]*
    planar_alpha : DXVA2_Fixed32
    sample_data : UInt32
  end
  struct DXVA2_ValueRange
    min_value : DXVA2_Fixed32
    max_value : DXVA2_Fixed32
    default_value : DXVA2_Fixed32
    step_size : DXVA2_Fixed32
  end
  struct DXVA2_ProcAmpValues
    brightness : DXVA2_Fixed32
    contrast : DXVA2_Fixed32
    hue : DXVA2_Fixed32
    saturation : DXVA2_Fixed32
  end
  struct DXVA2_FilterValues
    level : DXVA2_Fixed32
    threshold : DXVA2_Fixed32
    radius : DXVA2_Fixed32
  end
  struct DXVA2_VideoProcessBltParams
    target_frame : Int64
    target_rect : RECT
    constriction_size : SIZE
    streaming_flags : UInt32
    background_color : DXVA2_AYUVSample16
    dest_format : DXVA2_ExtendedFormat
    proc_amp_values : DXVA2_ProcAmpValues
    alpha : DXVA2_Fixed32
    noise_filter_luma : DXVA2_FilterValues
    noise_filter_chroma : DXVA2_FilterValues
    detail_filter_luma : DXVA2_FilterValues
    detail_filter_chroma : DXVA2_FilterValues
    dest_data : UInt32
  end
  struct DXVA2_ConfigPictureDecode
    guid_config_bitstream_encryption : Guid
    guid_config_m_bcontrol_encryption : Guid
    guid_config_resid_diff_encryption : Guid
    config_bitstream_raw : UInt32
    config_m_bcontrol_raster_order : UInt32
    config_resid_diff_host : UInt32
    config_spatial_resid8 : UInt32
    config_resid8_subtraction : UInt32
    config_spatial_host8or9_clipping : UInt32
    config_spatial_resid_interleaved : UInt32
    config_intra_resid_unsigned : UInt32
    config_resid_diff_accelerator : UInt32
    config_host_inverse_scan : UInt32
    config_specific_idct : UInt32
    config4_grouped_coefs : UInt32
    config_min_render_target_buff_count : UInt16
    config_decoder_specific : UInt16
  end
  struct DXVA2_DecodeBufferDesc
    compressed_buffer_type : DXVA2_BufferfType
    buffer_index : UInt32
    data_offset : UInt32
    data_size : UInt32
    first_m_baddress : UInt32
    num_m_bs_in_buffer : UInt32
    width : UInt32
    height : UInt32
    stride : UInt32
    reserved_bits : UInt32
    pv_pvp_state : Void*
  end
  struct DXVA2_AES_CTR_IV
    iv : UInt64
    count : UInt64
  end
  struct DXVA2_DecodeExtensionData
    function : UInt32
    p_private_input_data : Void*
    private_input_data_size : UInt32
    p_private_output_data : Void*
    private_output_data_size : UInt32
  end
  struct DXVA2_DecodeExecuteParams
    num_comp_buffers : UInt32
    p_compressed_buffers : DXVA2_DecodeBufferDesc*
    p_extension_data : DXVA2_DecodeExtensionData*
  end
  struct OPM_RANDOM_NUMBER
    ab_random_number : UInt8[16]*
  end
  struct OPM_OMAC
    ab_omac : UInt8[16]*
  end
  struct OPM_ENCRYPTED_INITIALIZATION_PARAMETERS
    ab_encrypted_initialization_parameters : UInt8[256]*
  end
  struct OPM_GET_INFO_PARAMETERS
    omac : OPM_OMAC
    rn_random_number : OPM_RANDOM_NUMBER
    guid_information : Guid
    ul_sequence_number : UInt32
    cb_parameters_size : UInt32
    ab_parameters : UInt8[4056]*
  end
  struct OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS
    rn_random_number : OPM_RANDOM_NUMBER
    guid_information : Guid
    ul_sequence_number : UInt32
    cb_parameters_size : UInt32
    ab_parameters : UInt8[4056]*
  end
  struct OPM_HDCP_KEY_SELECTION_VECTOR
    ab_key_selection_vector : UInt8[5]*
  end
  struct OPM_CONNECTED_HDCP_DEVICE_INFORMATION
    rn_random_number : OPM_RANDOM_NUMBER
    ul_status_flags : UInt32
    ul_hdcp_flags : UInt32
    ksv_b : OPM_HDCP_KEY_SELECTION_VECTOR
    reserved : UInt8[11]*
    reserved2 : UInt8[16]*
    reserved3 : UInt8[16]*
  end
  struct OPM_REQUESTED_INFORMATION
    omac : OPM_OMAC
    cb_requested_information_size : UInt32
    ab_requested_information : UInt8[4076]*
  end
  struct OPM_STANDARD_INFORMATION
    rn_random_number : OPM_RANDOM_NUMBER
    ul_status_flags : UInt32
    ul_information : UInt32
    ul_reserved : UInt32
    ul_reserved2 : UInt32
  end
  struct OPM_ACTUAL_OUTPUT_FORMAT
    rn_random_number : OPM_RANDOM_NUMBER
    ul_status_flags : UInt32
    ul_display_width : UInt32
    ul_display_height : UInt32
    dsf_sample_interleave_format : DXVA2_SampleFormat
    d3d_format : D3DFORMAT
    ul_frequency_numerator : UInt32
    ul_frequency_denominator : UInt32
  end
  struct OPM_ACP_AND_CGMSA_SIGNALING
    rn_random_number : OPM_RANDOM_NUMBER
    ul_status_flags : UInt32
    ul_available_tv_protection_standards : UInt32
    ul_active_tv_protection_standard : UInt32
    ul_reserved : UInt32
    ul_aspect_ratio_valid_mask1 : UInt32
    ul_aspect_ratio_data1 : UInt32
    ul_aspect_ratio_valid_mask2 : UInt32
    ul_aspect_ratio_data2 : UInt32
    ul_aspect_ratio_valid_mask3 : UInt32
    ul_aspect_ratio_data3 : UInt32
    ul_reserved2 : UInt32[4]*
    ul_reserved3 : UInt32[4]*
  end
  struct OPM_OUTPUT_ID_DATA
    rn_random_number : OPM_RANDOM_NUMBER
    ul_status_flags : UInt32
    output_id : UInt64
  end
  struct OPM_CONFIGURE_PARAMETERS
    omac : OPM_OMAC
    guid_setting : Guid
    ul_sequence_number : UInt32
    cb_parameters_size : UInt32
    ab_parameters : UInt8[4056]*
  end
  struct OPM_SET_PROTECTION_LEVEL_PARAMETERS
    ul_protection_type : UInt32
    ul_protection_level : UInt32
    reserved : UInt32
    reserved2 : UInt32
  end
  struct OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS
    ul_new_tv_protection_standard : UInt32
    ul_aspect_ratio_change_mask1 : UInt32
    ul_aspect_ratio_data1 : UInt32
    ul_aspect_ratio_change_mask2 : UInt32
    ul_aspect_ratio_data2 : UInt32
    ul_aspect_ratio_change_mask3 : UInt32
    ul_aspect_ratio_data3 : UInt32
    ul_reserved : UInt32[4]*
    ul_reserved2 : UInt32[4]*
    ul_reserved3 : UInt32
  end
  struct OPM_SET_HDCP_SRM_PARAMETERS
    ul_srm_version : UInt32
  end
  struct OPM_GET_CODEC_INFO_PARAMETERS
    cb_verifier : UInt32
    verifier : UInt8[4052]*
  end
  struct OPM_GET_CODEC_INFO_INFORMATION
    rn_random_number : OPM_RANDOM_NUMBER
    merit : UInt32
  end
  struct MFT_REGISTER_TYPE_INFO
    guid_major_type : Guid
    guid_subtype : Guid
  end
  struct MFRatio
    numerator : UInt32
    denominator : UInt32
  end
  struct MFOffset
    fract : UInt16
    value : Int16
  end
  struct MFVideoArea
    offset_x : MFOffset
    offset_y : MFOffset
    area : SIZE
  end
  struct MFVideoInfo
    dw_width : UInt32
    dw_height : UInt32
    pixel_aspect_ratio : MFRatio
    source_chroma_subsampling : MFVideoChromaSubsampling
    interlace_mode : MFVideoInterlaceMode
    transfer_function : MFVideoTransferFunction
    color_primaries : MFVideoPrimaries
    transfer_matrix : MFVideoTransferMatrix
    source_lighting : MFVideoLighting
    frames_per_second : MFRatio
    nominal_range : MFNominalRange
    geometric_aperture : MFVideoArea
    minimum_display_aperture : MFVideoArea
    pan_scan_aperture : MFVideoArea
    video_flags : UInt64
  end
  struct MFAYUVSample
    b_cr_value : UInt8
    b_cb_value : UInt8
    b_y_value : UInt8
    b_sample_alpha8 : UInt8
  end
  struct MFARGB
    rgb_blue : UInt8
    rgb_green : UInt8
    rgb_red : UInt8
    rgb_alpha : UInt8
  end
  struct MFVideoSurfaceInfo
    format : UInt32
    palette_entries : UInt32
    palette : MFPaletteEntry[0]*
  end
  struct MFVideoCompressedInfo
    avg_bitrate : Int64
    avg_bit_error_rate : Int64
    max_key_frame_spacing : UInt32
  end
  struct MFVIDEOFORMAT
    dw_size : UInt32
    video_info : MFVideoInfo
    guid_format : Guid
    compressed_info : MFVideoCompressedInfo
    surface_info : MFVideoSurfaceInfo
  end
  struct MFT_INPUT_STREAM_INFO
    hns_max_latency : Int64
    dw_flags : UInt32
    cb_size : UInt32
    cb_max_lookahead : UInt32
    cb_alignment : UInt32
  end
  struct MFT_OUTPUT_STREAM_INFO
    dw_flags : UInt32
    cb_size : UInt32
    cb_alignment : UInt32
  end
  struct MFT_OUTPUT_DATA_BUFFER
    dw_stream_id : UInt32
    p_sample : IMFSample
    dw_status : UInt32
    p_events : IMFCollection
  end
  struct STREAM_MEDIUM
    gid_medium : Guid
    un_medium_instance : UInt32
  end
  struct MFAudioDecoderDegradationInfo
    e_degradation_reason : MFT_AUDIO_DECODER_DEGRADATION_REASON
    e_type : MFT_AUDIO_DECODER_DEGRADATION_TYPE
  end
  struct MFT_STREAM_STATE_PARAM
    stream_id : UInt32
    state : MF_STREAM_STATE
  end
  struct MFCLOCK_PROPERTIES
    qw_correlation_rate : UInt64
    guid_clock_id : Guid
    dw_clock_flags : UInt32
    qw_clock_frequency : UInt64
    dw_clock_tolerance : UInt32
    dw_clock_jitter : UInt32
  end
  struct MFRR_COMPONENT_HASH_INFO
    ul_reason : UInt32
    rg_header_hash : Char[43]*
    rg_public_key_hash : Char[43]*
    wsz_name : Char[260]*
  end
  struct MFRR_COMPONENTS
    dw_rr_info_version : UInt32
    dw_rr_components : UInt32
    p_rr_components : MFRR_COMPONENT_HASH_INFO*
  end
  struct ASF_FLAT_PICTURE
    b_picture_type : UInt8
    dw_data_len : UInt32
  end
  struct ASF_FLAT_SYNCHRONISED_LYRICS
    b_time_stamp_format : UInt8
    b_content_type : UInt8
    dw_lyrics_len : UInt32
  end
  struct MFTOPONODE_ATTRIBUTE_UPDATE
    node_id : UInt64
    guid_attribute_key : Guid
    attr_type : MF_ATTRIBUTE_TYPE
    anonymous : MFTOPONODE_ATTRIBUTE_UPDATE_Anonymous_e__Union
  end
  struct MF_LEAKY_BUCKET_PAIR
    dw_bitrate : UInt32
    ms_buffer_window : UInt32
  end
  struct MFBYTESTREAM_BUFFERING_PARAMS
    cb_total_file_size : UInt64
    cb_playable_data_size : UInt64
    prg_buckets : MF_LEAKY_BUCKET_PAIR*
    c_buckets : UInt32
    qw_net_buffering_time : UInt64
    qw_extra_buffering_time_during_seek : UInt64
    qw_play_duration : UInt64
    d_rate : Float32
  end
  struct MF_BYTE_STREAM_CACHE_RANGE
    qw_start_offset : UInt64
    qw_end_offset : UInt64
  end
  struct MFNetCredentialManagerGetParam
    hr_op : HRESULT
    f_allow_logged_on_user : LibC::BOOL
    f_clear_text_package : LibC::BOOL
    psz_url : LibC::LPWSTR
    psz_site : LibC::LPWSTR
    psz_realm : LibC::LPWSTR
    psz_package : LibC::LPWSTR
    n_retries : Int32
  end
  struct MFINPUTTRUSTAUTHORITY_ACCESS_ACTION
    action : MFPOLICYMANAGER_ACTION
    pb_ticket : UInt8*
    cb_ticket : UInt32
  end
  struct MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS
    dw_size : UInt32
    dw_ver : UInt32
    cb_signature_offset : UInt32
    cb_signature_size : UInt32
    cb_extension_offset : UInt32
    cb_extension_size : UInt32
    c_actions : UInt32
    rg_output_actions : MFINPUTTRUSTAUTHORITY_ACCESS_ACTION[0]*
  end
  struct MF_TRANSCODE_SINK_INFO
    dw_video_stream_id : UInt32
    p_video_media_type : IMFMediaType
    dw_audio_stream_id : UInt32
    p_audio_media_type : IMFMediaType
  end
  struct MFT_REGISTRATION_INFO
    clsid : Guid
    guid_category : Guid
    ui_flags : UInt32
    psz_name : LibC::LPWSTR
    c_in_types : UInt32
    p_in_types : MFT_REGISTER_TYPE_INFO*
    c_out_types : UInt32
    p_out_types : MFT_REGISTER_TYPE_INFO*
  end
  struct MFCONTENTPROTECTIONDEVICE_INPUT_DATA
    hw_protection_function_id : UInt32
    private_data_byte_count : UInt32
    hw_protection_data_byte_count : UInt32
    reserved : UInt32
    input_data : UInt8[4]*
  end
  struct MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA
    private_data_byte_count : UInt32
    max_hw_protection_data_byte_count : UInt32
    hw_protection_data_byte_count : UInt32
    status : HRESULT
    transport_time_in_hundreds_of_nanoseconds : Int64
    execution_time_in_hundreds_of_nanoseconds : Int64
    output_data : UInt8[4]*
  end
  struct MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA
    task_index : UInt32
    class_name : Char[260]*
    base_priority : Int32
  end
  struct MFMediaKeyStatus
    pb_key_id : UInt8*
    cb_key_id : UInt32
    e_media_key_status : MF_MEDIAKEY_STATUS
  end
  struct MF_VIDEO_SPHERICAL_VIEWDIRECTION
    i_heading : Int32
    i_pitch : Int32
    i_roll : Int32
  end
  struct SENSORPROFILEID
    type : Guid
    index : UInt32
    unused : UInt32
  end
  struct MFCameraIntrinsic_CameraModel
    focal_length_x : Float32
    focal_length_y : Float32
    principal_point_x : Float32
    principal_point_y : Float32
  end
  struct MFCameraIntrinsic_DistortionModel6KT
    radial_k1 : Float32
    radial_k2 : Float32
    radial_k3 : Float32
    radial_k4 : Float32
    radial_k5 : Float32
    radial_k6 : Float32
    tangential_p1 : Float32
    tangential_p2 : Float32
  end
  struct MFCameraIntrinsic_DistortionModelArcTan
    radial_k0 : Float32
    distortion_center_x : Float32
    distortion_center_y : Float32
    tangential_x : Float32
    tangential_y : Float32
  end
  struct MFExtendedCameraIntrinsic_IntrinsicModel
    width : UInt32
    height : UInt32
    split_frame_id : UInt32
    camera_model : MFCameraIntrinsic_CameraModel
  end
  struct ASF_INDEX_IDENTIFIER
    guid_index_type : Guid
    w_stream_number : UInt16
  end
  struct ASF_INDEX_DESCRIPTOR
    identifier : ASF_INDEX_IDENTIFIER
    c_per_entry_bytes : UInt16
    sz_description : Char[32]*
    dw_interval : UInt32
  end
  struct ASF_MUX_STATISTICS
    c_frames_written : UInt32
    c_frames_dropped : UInt32
  end
  struct MFVideoNormalizedRect
    left : Float32
    top : Float32
    right : Float32
    bottom : Float32
  end
  struct MOVE_RECT
    source_point : POINT
    dest_rect : RECT
  end
  struct DIRTYRECT_INFO
    frame_number : UInt32
    num_dirty_rects : UInt32
    dirty_rects : RECT[0]*
  end
  struct MOVEREGION_INFO
    frame_number : UInt32
    num_move_regions : UInt32
    move_regions : MOVE_RECT[0]*
  end
  struct ROI_AREA
    rect : RECT
    qp_delta : Int32
  end
  struct MACROBLOCK_DATA
    flags : UInt32
    motion_vector_x : Int16
    motion_vector_y : Int16
    qp_delta : Int32
  end
  struct DigitalWindowSetting
    origin_x : Float64
    origin_y : Float64
    window_size : Float64
  end
  struct MFFOLDDOWN_MATRIX
    cb_size : UInt32
    c_src_channels : UInt32
    c_dst_channels : UInt32
    dw_channel_mask : UInt32
    coeff : Int32[64]*
  end
  struct MT_CUSTOM_VIDEO_PRIMARIES
    f_rx : Float32
    f_ry : Float32
    f_gx : Float32
    f_gy : Float32
    f_bx : Float32
    f_by : Float32
    f_wx : Float32
    f_wy : Float32
  end
  struct MT_ARBITRARY_HEADER
    majortype : Guid
    subtype : Guid
    b_fixed_size_samples : LibC::BOOL
    b_temporal_compression : LibC::BOOL
    l_sample_size : UInt32
    formattype : Guid
  end
  struct MF_FLOAT2
    x : Float32
    y : Float32
  end
  struct MF_FLOAT3
    x : Float32
    y : Float32
    z : Float32
  end
  struct MF_QUATERNION
    x : Float32
    y : Float32
    z : Float32
    w : Float32
  end
  struct MFCameraExtrinsic_CalibratedTransform
    calibration_id : Guid
    position : MF_FLOAT3
    orientation : MF_QUATERNION
  end
  struct MFCameraExtrinsics
    transform_count : UInt32
    calibrated_transforms : MFCameraExtrinsic_CalibratedTransform[0]*
  end
  struct MFCameraIntrinsic_PinholeCameraModel
    focal_length : MF_FLOAT2
    principal_point : MF_FLOAT2
  end
  struct MFCameraIntrinsic_DistortionModel
    radial_k1 : Float32
    radial_k2 : Float32
    radial_k3 : Float32
    tangential_p1 : Float32
    tangential_p2 : Float32
  end
  struct MFPinholeCameraIntrinsic_IntrinsicModel
    width : UInt32
    height : UInt32
    camera_model : MFCameraIntrinsic_PinholeCameraModel
    distortion_model : MFCameraIntrinsic_DistortionModel
  end
  struct MFPinholeCameraIntrinsics
    intrinsic_model_count : UInt32
    intrinsic_models : MFPinholeCameraIntrinsic_IntrinsicModel[0]*
  end
  struct MFMPEG2DLNASINKSTATS
    c_bytes_written : UInt64
    f_pal : LibC::BOOL
    fcc_video : UInt32
    dw_video_width : UInt32
    dw_video_height : UInt32
    c_video_frames_received : UInt64
    c_video_frames_encoded : UInt64
    c_video_frames_skipped : UInt64
    c_black_video_frames_encoded : UInt64
    c_video_frames_duplicated : UInt64
    c_audio_samples_per_sec : UInt32
    c_audio_channels : UInt32
    c_audio_bytes_received : UInt64
    c_audio_frames_encoded : UInt64
  end
  struct MF_SINK_WRITER_STATISTICS
    cb : UInt32
    ll_last_timestamp_received : Int64
    ll_last_timestamp_encoded : Int64
    ll_last_timestamp_processed : Int64
    ll_last_stream_tick_received : Int64
    ll_last_sink_sample_request : Int64
    qw_num_samples_received : UInt64
    qw_num_samples_encoded : UInt64
    qw_num_samples_processed : UInt64
    qw_num_stream_ticks_received : UInt64
    dw_byte_count_queued : UInt32
    qw_byte_count_processed : UInt64
    dw_num_outstanding_sink_sample_requests : UInt32
    dw_average_sample_rate_received : UInt32
    dw_average_sample_rate_encoded : UInt32
    dw_average_sample_rate_processed : UInt32
  end
  struct MFP_EVENT_HEADER
    e_event_type : MFP_EVENT_TYPE
    hr_event : HRESULT
    p_media_player : IMFPMediaPlayer
    e_state : MFP_MEDIAPLAYER_STATE
    p_property_store : IPropertyStore
  end
  struct MFP_PLAY_EVENT
    header : MFP_EVENT_HEADER
    p_media_item : IMFPMediaItem
  end
  struct MFP_PAUSE_EVENT
    header : MFP_EVENT_HEADER
    p_media_item : IMFPMediaItem
  end
  struct MFP_STOP_EVENT
    header : MFP_EVENT_HEADER
    p_media_item : IMFPMediaItem
  end
  struct MFP_POSITION_SET_EVENT
    header : MFP_EVENT_HEADER
    p_media_item : IMFPMediaItem
  end
  struct MFP_RATE_SET_EVENT
    header : MFP_EVENT_HEADER
    p_media_item : IMFPMediaItem
    fl_rate : Float32
  end
  struct MFP_MEDIAITEM_CREATED_EVENT
    header : MFP_EVENT_HEADER
    p_media_item : IMFPMediaItem
    dw_user_data : LibC::UINT_PTR
  end
  struct MFP_MEDIAITEM_SET_EVENT
    header : MFP_EVENT_HEADER
    p_media_item : IMFPMediaItem
  end
  struct MFP_FRAME_STEP_EVENT
    header : MFP_EVENT_HEADER
    p_media_item : IMFPMediaItem
  end
  struct MFP_MEDIAITEM_CLEARED_EVENT
    header : MFP_EVENT_HEADER
    p_media_item : IMFPMediaItem
  end
  struct MFP_MF_EVENT
    header : MFP_EVENT_HEADER
    mf_event_type : UInt32
    p_mf_media_event : IMFMediaEvent
    p_media_item : IMFPMediaItem
  end
  struct MFP_ERROR_EVENT
    header : MFP_EVENT_HEADER
  end
  struct MFP_PLAYBACK_ENDED_EVENT
    header : MFP_EVENT_HEADER
    p_media_item : IMFPMediaItem
  end
  struct MFP_ACQUIRE_USER_CREDENTIAL_EVENT
    header : MFP_EVENT_HEADER
    dw_user_data : LibC::UINT_PTR
    f_proceed_with_authentication : LibC::BOOL
    hr_authentication_status : HRESULT
    pwsz_url : LibC::LPWSTR
    pwsz_site : LibC::LPWSTR
    pwsz_realm : LibC::LPWSTR
    pwsz_package : LibC::LPWSTR
    n_retries : Int32
    flags : UInt32
    p_credential : IMFNetCredential
  end
  struct DEVICE_INFO
    p_friendly_device_name : UInt8*
    p_unique_device_name : UInt8*
    p_manufacturer_name : UInt8*
    p_model_name : UInt8*
    p_icon_url : UInt8*
  end
  struct MFVideoAlphaBitmapParams
    dw_flags : UInt32
    clr_src_key : UInt32
    rc_src : RECT
    nrc_dest : MFVideoNormalizedRect
    f_alpha : Float32
    dw_filter_mode : UInt32
  end
  struct MFVideoAlphaBitmap
    get_bitmap_from_dc : LibC::BOOL
    bitmap : MFVideoAlphaBitmap_bitmap_e__Union
    params : MFVideoAlphaBitmapParams
  end


  struct ICodecAPIVTbl
    query_interface : Proc(ICodecAPI*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICodecAPI*, UInt32)
    release : Proc(ICodecAPI*, UInt32)
    is_supported : Proc(ICodecAPI*, Guid*, HRESULT)
    is_modifiable : Proc(ICodecAPI*, Guid*, HRESULT)
    get_parameter_range : Proc(ICodecAPI*, Guid*, VARIANT*, VARIANT*, VARIANT*, HRESULT)
    get_parameter_values : Proc(ICodecAPI*, Guid*, VARIANT**, UInt32*, HRESULT)
    get_default_value : Proc(ICodecAPI*, Guid*, VARIANT*, HRESULT)
    get_value : Proc(ICodecAPI*, Guid*, VARIANT*, HRESULT)
    set_value : Proc(ICodecAPI*, Guid*, VARIANT*, HRESULT)
    register_for_event : Proc(ICodecAPI*, Guid*, LibC::IntPtrT, HRESULT)
    unregister_for_event : Proc(ICodecAPI*, Guid*, HRESULT)
    set_all_defaults : Proc(ICodecAPI*, HRESULT)
    set_value_with_notify : Proc(ICodecAPI*, Guid*, VARIANT*, Guid**, UInt32*, HRESULT)
    set_all_defaults_with_notify : Proc(ICodecAPI*, Guid**, UInt32*, HRESULT)
    get_all_settings : Proc(ICodecAPI*, IStream, HRESULT)
    set_all_settings : Proc(ICodecAPI*, IStream, HRESULT)
    set_all_settings_with_notify : Proc(ICodecAPI*, IStream, Guid**, UInt32*, HRESULT)
  end

  ICodecAPI_GUID = "901db4c7-31ce-41a2-85dc-8fa0bf41b8da"
  IID_ICodecAPI = LibC::GUID.new(0x901db4c7_u32, 0x31ce_u16, 0x41a2_u16, StaticArray[0x85_u8, 0xdc_u8, 0x8f_u8, 0xa0_u8, 0xbf_u8, 0x41_u8, 0xb8_u8, 0xda_u8])
  struct ICodecAPI
    lpVtbl : ICodecAPIVTbl*
  end

  struct IDirect3D9ExOverlayExtensionVTbl
    query_interface : Proc(IDirect3D9ExOverlayExtension*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirect3D9ExOverlayExtension*, UInt32)
    release : Proc(IDirect3D9ExOverlayExtension*, UInt32)
    check_device_overlay_type : Proc(IDirect3D9ExOverlayExtension*, UInt32, D3DDEVTYPE, UInt32, UInt32, D3DFORMAT, D3DDISPLAYMODEEX*, D3DDISPLAYROTATION, D3DOVERLAYCAPS*, HRESULT)
  end

  IDirect3D9ExOverlayExtension_GUID = "187aeb13-aaf5-4c59-876d-e059088c0df8"
  IID_IDirect3D9ExOverlayExtension = LibC::GUID.new(0x187aeb13_u32, 0xaaf5_u16, 0x4c59_u16, StaticArray[0x87_u8, 0x6d_u8, 0xe0_u8, 0x59_u8, 0x8_u8, 0x8c_u8, 0xd_u8, 0xf8_u8])
  struct IDirect3D9ExOverlayExtension
    lpVtbl : IDirect3D9ExOverlayExtensionVTbl*
  end

  struct IDirect3DDevice9VideoVTbl
    query_interface : Proc(IDirect3DDevice9Video*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirect3DDevice9Video*, UInt32)
    release : Proc(IDirect3DDevice9Video*, UInt32)
    get_content_protection_caps : Proc(IDirect3DDevice9Video*, Guid*, Guid*, D3DCONTENTPROTECTIONCAPS*, HRESULT)
    create_authenticated_channel : Proc(IDirect3DDevice9Video*, D3DAUTHENTICATEDCHANNELTYPE, IDirect3DAuthenticatedChannel9*, LibC::HANDLE*, HRESULT)
    create_crypto_session : Proc(IDirect3DDevice9Video*, Guid*, Guid*, IDirect3DCryptoSession9*, LibC::HANDLE*, HRESULT)
  end

  IDirect3DDevice9Video_GUID = "26dc4561-a1ee-4ae7-96da-118a36c0ec95"
  IID_IDirect3DDevice9Video = LibC::GUID.new(0x26dc4561_u32, 0xa1ee_u16, 0x4ae7_u16, StaticArray[0x96_u8, 0xda_u8, 0x11_u8, 0x8a_u8, 0x36_u8, 0xc0_u8, 0xec_u8, 0x95_u8])
  struct IDirect3DDevice9Video
    lpVtbl : IDirect3DDevice9VideoVTbl*
  end

  struct IDirect3DAuthenticatedChannel9VTbl
    query_interface : Proc(IDirect3DAuthenticatedChannel9*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirect3DAuthenticatedChannel9*, UInt32)
    release : Proc(IDirect3DAuthenticatedChannel9*, UInt32)
    get_certificate_size : Proc(IDirect3DAuthenticatedChannel9*, UInt32*, HRESULT)
    get_certificate : Proc(IDirect3DAuthenticatedChannel9*, UInt32, UInt8*, HRESULT)
    negotiate_key_exchange : Proc(IDirect3DAuthenticatedChannel9*, UInt32, Void*, HRESULT)
    query : Proc(IDirect3DAuthenticatedChannel9*, UInt32, Void*, UInt32, Void*, HRESULT)
    configure : Proc(IDirect3DAuthenticatedChannel9*, UInt32, Void*, D3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT*, HRESULT)
  end

  IDirect3DAuthenticatedChannel9_GUID = "ff24beee-da21-4beb-98b5-d2f899f98af9"
  IID_IDirect3DAuthenticatedChannel9 = LibC::GUID.new(0xff24beee_u32, 0xda21_u16, 0x4beb_u16, StaticArray[0x98_u8, 0xb5_u8, 0xd2_u8, 0xf8_u8, 0x99_u8, 0xf9_u8, 0x8a_u8, 0xf9_u8])
  struct IDirect3DAuthenticatedChannel9
    lpVtbl : IDirect3DAuthenticatedChannel9VTbl*
  end

  struct IDirect3DCryptoSession9VTbl
    query_interface : Proc(IDirect3DCryptoSession9*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirect3DCryptoSession9*, UInt32)
    release : Proc(IDirect3DCryptoSession9*, UInt32)
    get_certificate_size : Proc(IDirect3DCryptoSession9*, UInt32*, HRESULT)
    get_certificate : Proc(IDirect3DCryptoSession9*, UInt32, UInt8*, HRESULT)
    negotiate_key_exchange : Proc(IDirect3DCryptoSession9*, UInt32, Void*, HRESULT)
    encryption_blt : Proc(IDirect3DCryptoSession9*, IDirect3DSurface9, IDirect3DSurface9, UInt32, Void*, HRESULT)
    decryption_blt : Proc(IDirect3DCryptoSession9*, IDirect3DSurface9, IDirect3DSurface9, UInt32, D3DENCRYPTED_BLOCK_INFO*, Void*, Void*, HRESULT)
    get_surface_pitch : Proc(IDirect3DCryptoSession9*, IDirect3DSurface9, UInt32*, HRESULT)
    start_session_key_refresh : Proc(IDirect3DCryptoSession9*, Void*, UInt32, HRESULT)
    finish_session_key_refresh : Proc(IDirect3DCryptoSession9*, HRESULT)
    get_encryption_blt_key : Proc(IDirect3DCryptoSession9*, Void*, UInt32, HRESULT)
  end

  IDirect3DCryptoSession9_GUID = "fa0ab799-7a9c-48ca-8c5b-237e71a54434"
  IID_IDirect3DCryptoSession9 = LibC::GUID.new(0xfa0ab799_u32, 0x7a9c_u16, 0x48ca_u16, StaticArray[0x8c_u8, 0x5b_u8, 0x23_u8, 0x7e_u8, 0x71_u8, 0xa5_u8, 0x44_u8, 0x34_u8])
  struct IDirect3DCryptoSession9
    lpVtbl : IDirect3DCryptoSession9VTbl*
  end

  struct ID3D12VideoDecoderHeapVTbl
    query_interface : Proc(ID3D12VideoDecoderHeap*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D12VideoDecoderHeap*, UInt32)
    release : Proc(ID3D12VideoDecoderHeap*, UInt32)
    get_private_data : Proc(ID3D12VideoDecoderHeap*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D12VideoDecoderHeap*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D12VideoDecoderHeap*, Guid*, IUnknown, HRESULT)
    set_name : Proc(ID3D12VideoDecoderHeap*, LibC::LPWSTR, HRESULT)
    get_device : Proc(ID3D12VideoDecoderHeap*, Guid*, Void**, HRESULT)
    get_desc : Proc(ID3D12VideoDecoderHeap*, D3D12_VIDEO_DECODER_HEAP_DESC)
  end

  ID3D12VideoDecoderHeap_GUID = "0946b7c9-ebf6-4047-bb73-8683e27dbb1f"
  IID_ID3D12VideoDecoderHeap = LibC::GUID.new(0x946b7c9_u32, 0xebf6_u16, 0x4047_u16, StaticArray[0xbb_u8, 0x73_u8, 0x86_u8, 0x83_u8, 0xe2_u8, 0x7d_u8, 0xbb_u8, 0x1f_u8])
  struct ID3D12VideoDecoderHeap
    lpVtbl : ID3D12VideoDecoderHeapVTbl*
  end

  struct ID3D12VideoDeviceVTbl
    query_interface : Proc(ID3D12VideoDevice*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D12VideoDevice*, UInt32)
    release : Proc(ID3D12VideoDevice*, UInt32)
    check_feature_support : Proc(ID3D12VideoDevice*, D3D12_FEATURE_VIDEO, Void*, UInt32, HRESULT)
    create_video_decoder : Proc(ID3D12VideoDevice*, D3D12_VIDEO_DECODER_DESC*, Guid*, Void**, HRESULT)
    create_video_decoder_heap : Proc(ID3D12VideoDevice*, D3D12_VIDEO_DECODER_HEAP_DESC*, Guid*, Void**, HRESULT)
    create_video_processor : Proc(ID3D12VideoDevice*, UInt32, D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*, UInt32, D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, Guid*, Void**, HRESULT)
  end

  ID3D12VideoDevice_GUID = "1f052807-0b46-4acc-8a89-364f793718a4"
  IID_ID3D12VideoDevice = LibC::GUID.new(0x1f052807_u32, 0xb46_u16, 0x4acc_u16, StaticArray[0x8a_u8, 0x89_u8, 0x36_u8, 0x4f_u8, 0x79_u8, 0x37_u8, 0x18_u8, 0xa4_u8])
  struct ID3D12VideoDevice
    lpVtbl : ID3D12VideoDeviceVTbl*
  end

  struct ID3D12VideoDecoderVTbl
    query_interface : Proc(ID3D12VideoDecoder*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D12VideoDecoder*, UInt32)
    release : Proc(ID3D12VideoDecoder*, UInt32)
    get_private_data : Proc(ID3D12VideoDecoder*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D12VideoDecoder*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D12VideoDecoder*, Guid*, IUnknown, HRESULT)
    set_name : Proc(ID3D12VideoDecoder*, LibC::LPWSTR, HRESULT)
    get_device : Proc(ID3D12VideoDecoder*, Guid*, Void**, HRESULT)
    get_desc : Proc(ID3D12VideoDecoder*, D3D12_VIDEO_DECODER_DESC)
  end

  ID3D12VideoDecoder_GUID = "c59b6bdc-7720-4074-a136-17a156037470"
  IID_ID3D12VideoDecoder = LibC::GUID.new(0xc59b6bdc_u32, 0x7720_u16, 0x4074_u16, StaticArray[0xa1_u8, 0x36_u8, 0x17_u8, 0xa1_u8, 0x56_u8, 0x3_u8, 0x74_u8, 0x70_u8])
  struct ID3D12VideoDecoder
    lpVtbl : ID3D12VideoDecoderVTbl*
  end

  struct ID3D12VideoProcessorVTbl
    query_interface : Proc(ID3D12VideoProcessor*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D12VideoProcessor*, UInt32)
    release : Proc(ID3D12VideoProcessor*, UInt32)
    get_private_data : Proc(ID3D12VideoProcessor*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D12VideoProcessor*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D12VideoProcessor*, Guid*, IUnknown, HRESULT)
    set_name : Proc(ID3D12VideoProcessor*, LibC::LPWSTR, HRESULT)
    get_device : Proc(ID3D12VideoProcessor*, Guid*, Void**, HRESULT)
    get_node_mask : Proc(ID3D12VideoProcessor*, UInt32)
    get_num_input_stream_descs : Proc(ID3D12VideoProcessor*, UInt32)
    get_input_stream_descs : Proc(ID3D12VideoProcessor*, UInt32, D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, HRESULT)
    get_output_stream_desc : Proc(ID3D12VideoProcessor*, D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC)
  end

  ID3D12VideoProcessor_GUID = "304fdb32-bede-410a-8545-943ac6a46138"
  IID_ID3D12VideoProcessor = LibC::GUID.new(0x304fdb32_u32, 0xbede_u16, 0x410a_u16, StaticArray[0x85_u8, 0x45_u8, 0x94_u8, 0x3a_u8, 0xc6_u8, 0xa4_u8, 0x61_u8, 0x38_u8])
  struct ID3D12VideoProcessor
    lpVtbl : ID3D12VideoProcessorVTbl*
  end

  struct ID3D12VideoDecodeCommandListVTbl
    query_interface : Proc(ID3D12VideoDecodeCommandList*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D12VideoDecodeCommandList*, UInt32)
    release : Proc(ID3D12VideoDecodeCommandList*, UInt32)
    get_private_data : Proc(ID3D12VideoDecodeCommandList*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D12VideoDecodeCommandList*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D12VideoDecodeCommandList*, Guid*, IUnknown, HRESULT)
    set_name : Proc(ID3D12VideoDecodeCommandList*, LibC::LPWSTR, HRESULT)
    get_device : Proc(ID3D12VideoDecodeCommandList*, Guid*, Void**, HRESULT)
    get_type : Proc(ID3D12VideoDecodeCommandList*, D3D12_COMMAND_LIST_TYPE)
    close : Proc(ID3D12VideoDecodeCommandList*, HRESULT)
    reset : Proc(ID3D12VideoDecodeCommandList*, ID3D12CommandAllocator, HRESULT)
    clear_state : Proc(ID3D12VideoDecodeCommandList*, Void)
    resource_barrier : Proc(ID3D12VideoDecodeCommandList*, UInt32, D3D12_RESOURCE_BARRIER*, Void)
    discard_resource : Proc(ID3D12VideoDecodeCommandList*, ID3D12Resource, D3D12_DISCARD_REGION*, Void)
    begin_query : Proc(ID3D12VideoDecodeCommandList*, ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)
    end_query : Proc(ID3D12VideoDecodeCommandList*, ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)
    resolve_query_data : Proc(ID3D12VideoDecodeCommandList*, ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, UInt32, ID3D12Resource, UInt64, Void)
    set_predication : Proc(ID3D12VideoDecodeCommandList*, ID3D12Resource, UInt64, D3D12_PREDICATION_OP, Void)
    set_marker : Proc(ID3D12VideoDecodeCommandList*, UInt32, Void*, UInt32, Void)
    begin_event : Proc(ID3D12VideoDecodeCommandList*, UInt32, Void*, UInt32, Void)
    end_event : Proc(ID3D12VideoDecodeCommandList*, Void)
    decode_frame : Proc(ID3D12VideoDecodeCommandList*, ID3D12VideoDecoder, D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS*, D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*, Void)
    write_buffer_immediate : Proc(ID3D12VideoDecodeCommandList*, UInt32, D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void)
  end

  ID3D12VideoDecodeCommandList_GUID = "3b60536e-ad29-4e64-a269-f853837e5e53"
  IID_ID3D12VideoDecodeCommandList = LibC::GUID.new(0x3b60536e_u32, 0xad29_u16, 0x4e64_u16, StaticArray[0xa2_u8, 0x69_u8, 0xf8_u8, 0x53_u8, 0x83_u8, 0x7e_u8, 0x5e_u8, 0x53_u8])
  struct ID3D12VideoDecodeCommandList
    lpVtbl : ID3D12VideoDecodeCommandListVTbl*
  end

  struct ID3D12VideoProcessCommandListVTbl
    query_interface : Proc(ID3D12VideoProcessCommandList*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D12VideoProcessCommandList*, UInt32)
    release : Proc(ID3D12VideoProcessCommandList*, UInt32)
    get_private_data : Proc(ID3D12VideoProcessCommandList*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D12VideoProcessCommandList*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D12VideoProcessCommandList*, Guid*, IUnknown, HRESULT)
    set_name : Proc(ID3D12VideoProcessCommandList*, LibC::LPWSTR, HRESULT)
    get_device : Proc(ID3D12VideoProcessCommandList*, Guid*, Void**, HRESULT)
    get_type : Proc(ID3D12VideoProcessCommandList*, D3D12_COMMAND_LIST_TYPE)
    close : Proc(ID3D12VideoProcessCommandList*, HRESULT)
    reset : Proc(ID3D12VideoProcessCommandList*, ID3D12CommandAllocator, HRESULT)
    clear_state : Proc(ID3D12VideoProcessCommandList*, Void)
    resource_barrier : Proc(ID3D12VideoProcessCommandList*, UInt32, D3D12_RESOURCE_BARRIER*, Void)
    discard_resource : Proc(ID3D12VideoProcessCommandList*, ID3D12Resource, D3D12_DISCARD_REGION*, Void)
    begin_query : Proc(ID3D12VideoProcessCommandList*, ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)
    end_query : Proc(ID3D12VideoProcessCommandList*, ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)
    resolve_query_data : Proc(ID3D12VideoProcessCommandList*, ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, UInt32, ID3D12Resource, UInt64, Void)
    set_predication : Proc(ID3D12VideoProcessCommandList*, ID3D12Resource, UInt64, D3D12_PREDICATION_OP, Void)
    set_marker : Proc(ID3D12VideoProcessCommandList*, UInt32, Void*, UInt32, Void)
    begin_event : Proc(ID3D12VideoProcessCommandList*, UInt32, Void*, UInt32, Void)
    end_event : Proc(ID3D12VideoProcessCommandList*, Void)
    process_frames : Proc(ID3D12VideoProcessCommandList*, ID3D12VideoProcessor, D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*, UInt32, D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS*, Void)
    write_buffer_immediate : Proc(ID3D12VideoProcessCommandList*, UInt32, D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void)
  end

  ID3D12VideoProcessCommandList_GUID = "aeb2543a-167f-4682-acc8-d159ed4a6209"
  IID_ID3D12VideoProcessCommandList = LibC::GUID.new(0xaeb2543a_u32, 0x167f_u16, 0x4682_u16, StaticArray[0xac_u8, 0xc8_u8, 0xd1_u8, 0x59_u8, 0xed_u8, 0x4a_u8, 0x62_u8, 0x9_u8])
  struct ID3D12VideoProcessCommandList
    lpVtbl : ID3D12VideoProcessCommandListVTbl*
  end

  struct ID3D12VideoDecodeCommandList1VTbl
    query_interface : Proc(ID3D12VideoDecodeCommandList1*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D12VideoDecodeCommandList1*, UInt32)
    release : Proc(ID3D12VideoDecodeCommandList1*, UInt32)
    get_private_data : Proc(ID3D12VideoDecodeCommandList1*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D12VideoDecodeCommandList1*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D12VideoDecodeCommandList1*, Guid*, IUnknown, HRESULT)
    set_name : Proc(ID3D12VideoDecodeCommandList1*, LibC::LPWSTR, HRESULT)
    get_device : Proc(ID3D12VideoDecodeCommandList1*, Guid*, Void**, HRESULT)
    get_type : Proc(ID3D12VideoDecodeCommandList1*, D3D12_COMMAND_LIST_TYPE)
    close : Proc(ID3D12VideoDecodeCommandList1*, HRESULT)
    reset : Proc(ID3D12VideoDecodeCommandList1*, ID3D12CommandAllocator, HRESULT)
    clear_state : Proc(ID3D12VideoDecodeCommandList1*, Void)
    resource_barrier : Proc(ID3D12VideoDecodeCommandList1*, UInt32, D3D12_RESOURCE_BARRIER*, Void)
    discard_resource : Proc(ID3D12VideoDecodeCommandList1*, ID3D12Resource, D3D12_DISCARD_REGION*, Void)
    begin_query : Proc(ID3D12VideoDecodeCommandList1*, ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)
    end_query : Proc(ID3D12VideoDecodeCommandList1*, ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)
    resolve_query_data : Proc(ID3D12VideoDecodeCommandList1*, ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, UInt32, ID3D12Resource, UInt64, Void)
    set_predication : Proc(ID3D12VideoDecodeCommandList1*, ID3D12Resource, UInt64, D3D12_PREDICATION_OP, Void)
    set_marker : Proc(ID3D12VideoDecodeCommandList1*, UInt32, Void*, UInt32, Void)
    begin_event : Proc(ID3D12VideoDecodeCommandList1*, UInt32, Void*, UInt32, Void)
    end_event : Proc(ID3D12VideoDecodeCommandList1*, Void)
    decode_frame : Proc(ID3D12VideoDecodeCommandList1*, ID3D12VideoDecoder, D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS*, D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*, Void)
    write_buffer_immediate : Proc(ID3D12VideoDecodeCommandList1*, UInt32, D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void)
    decode_frame1 : Proc(ID3D12VideoDecodeCommandList1*, ID3D12VideoDecoder, D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1*, D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*, Void)
  end

  ID3D12VideoDecodeCommandList1_GUID = "d52f011b-b56e-453c-a05a-a7f311c8f472"
  IID_ID3D12VideoDecodeCommandList1 = LibC::GUID.new(0xd52f011b_u32, 0xb56e_u16, 0x453c_u16, StaticArray[0xa0_u8, 0x5a_u8, 0xa7_u8, 0xf3_u8, 0x11_u8, 0xc8_u8, 0xf4_u8, 0x72_u8])
  struct ID3D12VideoDecodeCommandList1
    lpVtbl : ID3D12VideoDecodeCommandList1VTbl*
  end

  struct ID3D12VideoProcessCommandList1VTbl
    query_interface : Proc(ID3D12VideoProcessCommandList1*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D12VideoProcessCommandList1*, UInt32)
    release : Proc(ID3D12VideoProcessCommandList1*, UInt32)
    get_private_data : Proc(ID3D12VideoProcessCommandList1*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D12VideoProcessCommandList1*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D12VideoProcessCommandList1*, Guid*, IUnknown, HRESULT)
    set_name : Proc(ID3D12VideoProcessCommandList1*, LibC::LPWSTR, HRESULT)
    get_device : Proc(ID3D12VideoProcessCommandList1*, Guid*, Void**, HRESULT)
    get_type : Proc(ID3D12VideoProcessCommandList1*, D3D12_COMMAND_LIST_TYPE)
    close : Proc(ID3D12VideoProcessCommandList1*, HRESULT)
    reset : Proc(ID3D12VideoProcessCommandList1*, ID3D12CommandAllocator, HRESULT)
    clear_state : Proc(ID3D12VideoProcessCommandList1*, Void)
    resource_barrier : Proc(ID3D12VideoProcessCommandList1*, UInt32, D3D12_RESOURCE_BARRIER*, Void)
    discard_resource : Proc(ID3D12VideoProcessCommandList1*, ID3D12Resource, D3D12_DISCARD_REGION*, Void)
    begin_query : Proc(ID3D12VideoProcessCommandList1*, ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)
    end_query : Proc(ID3D12VideoProcessCommandList1*, ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)
    resolve_query_data : Proc(ID3D12VideoProcessCommandList1*, ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, UInt32, ID3D12Resource, UInt64, Void)
    set_predication : Proc(ID3D12VideoProcessCommandList1*, ID3D12Resource, UInt64, D3D12_PREDICATION_OP, Void)
    set_marker : Proc(ID3D12VideoProcessCommandList1*, UInt32, Void*, UInt32, Void)
    begin_event : Proc(ID3D12VideoProcessCommandList1*, UInt32, Void*, UInt32, Void)
    end_event : Proc(ID3D12VideoProcessCommandList1*, Void)
    process_frames : Proc(ID3D12VideoProcessCommandList1*, ID3D12VideoProcessor, D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*, UInt32, D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS*, Void)
    write_buffer_immediate : Proc(ID3D12VideoProcessCommandList1*, UInt32, D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void)
    process_frames1 : Proc(ID3D12VideoProcessCommandList1*, ID3D12VideoProcessor, D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*, UInt32, D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1*, Void)
  end

  ID3D12VideoProcessCommandList1_GUID = "542c5c4d-7596-434f-8c93-4efa6766f267"
  IID_ID3D12VideoProcessCommandList1 = LibC::GUID.new(0x542c5c4d_u32, 0x7596_u16, 0x434f_u16, StaticArray[0x8c_u8, 0x93_u8, 0x4e_u8, 0xfa_u8, 0x67_u8, 0x66_u8, 0xf2_u8, 0x67_u8])
  struct ID3D12VideoProcessCommandList1
    lpVtbl : ID3D12VideoProcessCommandList1VTbl*
  end

  struct ID3D12VideoMotionEstimatorVTbl
    query_interface : Proc(ID3D12VideoMotionEstimator*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D12VideoMotionEstimator*, UInt32)
    release : Proc(ID3D12VideoMotionEstimator*, UInt32)
    get_private_data : Proc(ID3D12VideoMotionEstimator*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D12VideoMotionEstimator*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D12VideoMotionEstimator*, Guid*, IUnknown, HRESULT)
    set_name : Proc(ID3D12VideoMotionEstimator*, LibC::LPWSTR, HRESULT)
    get_device : Proc(ID3D12VideoMotionEstimator*, Guid*, Void**, HRESULT)
    get_desc : Proc(ID3D12VideoMotionEstimator*, D3D12_VIDEO_MOTION_ESTIMATOR_DESC)
    get_protected_resource_session : Proc(ID3D12VideoMotionEstimator*, Guid*, Void**, HRESULT)
  end

  ID3D12VideoMotionEstimator_GUID = "33fdae0e-098b-428f-87bb-34b695de08f8"
  IID_ID3D12VideoMotionEstimator = LibC::GUID.new(0x33fdae0e_u32, 0x98b_u16, 0x428f_u16, StaticArray[0x87_u8, 0xbb_u8, 0x34_u8, 0xb6_u8, 0x95_u8, 0xde_u8, 0x8_u8, 0xf8_u8])
  struct ID3D12VideoMotionEstimator
    lpVtbl : ID3D12VideoMotionEstimatorVTbl*
  end

  struct ID3D12VideoMotionVectorHeapVTbl
    query_interface : Proc(ID3D12VideoMotionVectorHeap*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D12VideoMotionVectorHeap*, UInt32)
    release : Proc(ID3D12VideoMotionVectorHeap*, UInt32)
    get_private_data : Proc(ID3D12VideoMotionVectorHeap*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D12VideoMotionVectorHeap*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D12VideoMotionVectorHeap*, Guid*, IUnknown, HRESULT)
    set_name : Proc(ID3D12VideoMotionVectorHeap*, LibC::LPWSTR, HRESULT)
    get_device : Proc(ID3D12VideoMotionVectorHeap*, Guid*, Void**, HRESULT)
    get_desc : Proc(ID3D12VideoMotionVectorHeap*, D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC)
    get_protected_resource_session : Proc(ID3D12VideoMotionVectorHeap*, Guid*, Void**, HRESULT)
  end

  ID3D12VideoMotionVectorHeap_GUID = "5be17987-743a-4061-834b-23d22daea505"
  IID_ID3D12VideoMotionVectorHeap = LibC::GUID.new(0x5be17987_u32, 0x743a_u16, 0x4061_u16, StaticArray[0x83_u8, 0x4b_u8, 0x23_u8, 0xd2_u8, 0x2d_u8, 0xae_u8, 0xa5_u8, 0x5_u8])
  struct ID3D12VideoMotionVectorHeap
    lpVtbl : ID3D12VideoMotionVectorHeapVTbl*
  end

  struct ID3D12VideoDevice1VTbl
    query_interface : Proc(ID3D12VideoDevice1*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D12VideoDevice1*, UInt32)
    release : Proc(ID3D12VideoDevice1*, UInt32)
    check_feature_support : Proc(ID3D12VideoDevice1*, D3D12_FEATURE_VIDEO, Void*, UInt32, HRESULT)
    create_video_decoder : Proc(ID3D12VideoDevice1*, D3D12_VIDEO_DECODER_DESC*, Guid*, Void**, HRESULT)
    create_video_decoder_heap : Proc(ID3D12VideoDevice1*, D3D12_VIDEO_DECODER_HEAP_DESC*, Guid*, Void**, HRESULT)
    create_video_processor : Proc(ID3D12VideoDevice1*, UInt32, D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*, UInt32, D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, Guid*, Void**, HRESULT)
    create_video_motion_estimator : Proc(ID3D12VideoDevice1*, D3D12_VIDEO_MOTION_ESTIMATOR_DESC*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)
    create_video_motion_vector_heap : Proc(ID3D12VideoDevice1*, D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)
  end

  ID3D12VideoDevice1_GUID = "981611ad-a144-4c83-9890-f30e26d658ab"
  IID_ID3D12VideoDevice1 = LibC::GUID.new(0x981611ad_u32, 0xa144_u16, 0x4c83_u16, StaticArray[0x98_u8, 0x90_u8, 0xf3_u8, 0xe_u8, 0x26_u8, 0xd6_u8, 0x58_u8, 0xab_u8])
  struct ID3D12VideoDevice1
    lpVtbl : ID3D12VideoDevice1VTbl*
  end

  struct ID3D12VideoEncodeCommandListVTbl
    query_interface : Proc(ID3D12VideoEncodeCommandList*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D12VideoEncodeCommandList*, UInt32)
    release : Proc(ID3D12VideoEncodeCommandList*, UInt32)
    get_private_data : Proc(ID3D12VideoEncodeCommandList*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D12VideoEncodeCommandList*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D12VideoEncodeCommandList*, Guid*, IUnknown, HRESULT)
    set_name : Proc(ID3D12VideoEncodeCommandList*, LibC::LPWSTR, HRESULT)
    get_device : Proc(ID3D12VideoEncodeCommandList*, Guid*, Void**, HRESULT)
    get_type : Proc(ID3D12VideoEncodeCommandList*, D3D12_COMMAND_LIST_TYPE)
    close : Proc(ID3D12VideoEncodeCommandList*, HRESULT)
    reset : Proc(ID3D12VideoEncodeCommandList*, ID3D12CommandAllocator, HRESULT)
    clear_state : Proc(ID3D12VideoEncodeCommandList*, Void)
    resource_barrier : Proc(ID3D12VideoEncodeCommandList*, UInt32, D3D12_RESOURCE_BARRIER*, Void)
    discard_resource : Proc(ID3D12VideoEncodeCommandList*, ID3D12Resource, D3D12_DISCARD_REGION*, Void)
    begin_query : Proc(ID3D12VideoEncodeCommandList*, ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)
    end_query : Proc(ID3D12VideoEncodeCommandList*, ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)
    resolve_query_data : Proc(ID3D12VideoEncodeCommandList*, ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, UInt32, ID3D12Resource, UInt64, Void)
    set_predication : Proc(ID3D12VideoEncodeCommandList*, ID3D12Resource, UInt64, D3D12_PREDICATION_OP, Void)
    set_marker : Proc(ID3D12VideoEncodeCommandList*, UInt32, Void*, UInt32, Void)
    begin_event : Proc(ID3D12VideoEncodeCommandList*, UInt32, Void*, UInt32, Void)
    end_event : Proc(ID3D12VideoEncodeCommandList*, Void)
    estimate_motion : Proc(ID3D12VideoEncodeCommandList*, ID3D12VideoMotionEstimator, D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT*, D3D12_VIDEO_MOTION_ESTIMATOR_INPUT*, Void)
    resolve_motion_vector_heap : Proc(ID3D12VideoEncodeCommandList*, D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT*, D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT*, Void)
    write_buffer_immediate : Proc(ID3D12VideoEncodeCommandList*, UInt32, D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void)
    set_protected_resource_session : Proc(ID3D12VideoEncodeCommandList*, ID3D12ProtectedResourceSession, Void)
  end

  ID3D12VideoEncodeCommandList_GUID = "8455293a-0cbd-4831-9b39-fbdbab724723"
  IID_ID3D12VideoEncodeCommandList = LibC::GUID.new(0x8455293a_u32, 0xcbd_u16, 0x4831_u16, StaticArray[0x9b_u8, 0x39_u8, 0xfb_u8, 0xdb_u8, 0xab_u8, 0x72_u8, 0x47_u8, 0x23_u8])
  struct ID3D12VideoEncodeCommandList
    lpVtbl : ID3D12VideoEncodeCommandListVTbl*
  end

  struct ID3D12VideoDecoder1VTbl
    query_interface : Proc(ID3D12VideoDecoder1*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D12VideoDecoder1*, UInt32)
    release : Proc(ID3D12VideoDecoder1*, UInt32)
    get_private_data : Proc(ID3D12VideoDecoder1*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D12VideoDecoder1*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D12VideoDecoder1*, Guid*, IUnknown, HRESULT)
    set_name : Proc(ID3D12VideoDecoder1*, LibC::LPWSTR, HRESULT)
    get_device : Proc(ID3D12VideoDecoder1*, Guid*, Void**, HRESULT)
    get_desc : Proc(ID3D12VideoDecoder1*, D3D12_VIDEO_DECODER_DESC)
    get_protected_resource_session : Proc(ID3D12VideoDecoder1*, Guid*, Void**, HRESULT)
  end

  ID3D12VideoDecoder1_GUID = "79a2e5fb-ccd2-469a-9fde-195d10951f7e"
  IID_ID3D12VideoDecoder1 = LibC::GUID.new(0x79a2e5fb_u32, 0xccd2_u16, 0x469a_u16, StaticArray[0x9f_u8, 0xde_u8, 0x19_u8, 0x5d_u8, 0x10_u8, 0x95_u8, 0x1f_u8, 0x7e_u8])
  struct ID3D12VideoDecoder1
    lpVtbl : ID3D12VideoDecoder1VTbl*
  end

  struct ID3D12VideoDecoderHeap1VTbl
    query_interface : Proc(ID3D12VideoDecoderHeap1*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D12VideoDecoderHeap1*, UInt32)
    release : Proc(ID3D12VideoDecoderHeap1*, UInt32)
    get_private_data : Proc(ID3D12VideoDecoderHeap1*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D12VideoDecoderHeap1*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D12VideoDecoderHeap1*, Guid*, IUnknown, HRESULT)
    set_name : Proc(ID3D12VideoDecoderHeap1*, LibC::LPWSTR, HRESULT)
    get_device : Proc(ID3D12VideoDecoderHeap1*, Guid*, Void**, HRESULT)
    get_desc : Proc(ID3D12VideoDecoderHeap1*, D3D12_VIDEO_DECODER_HEAP_DESC)
    get_protected_resource_session : Proc(ID3D12VideoDecoderHeap1*, Guid*, Void**, HRESULT)
  end

  ID3D12VideoDecoderHeap1_GUID = "da1d98c5-539f-41b2-bf6b-1198a03b6d26"
  IID_ID3D12VideoDecoderHeap1 = LibC::GUID.new(0xda1d98c5_u32, 0x539f_u16, 0x41b2_u16, StaticArray[0xbf_u8, 0x6b_u8, 0x11_u8, 0x98_u8, 0xa0_u8, 0x3b_u8, 0x6d_u8, 0x26_u8])
  struct ID3D12VideoDecoderHeap1
    lpVtbl : ID3D12VideoDecoderHeap1VTbl*
  end

  struct ID3D12VideoProcessor1VTbl
    query_interface : Proc(ID3D12VideoProcessor1*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D12VideoProcessor1*, UInt32)
    release : Proc(ID3D12VideoProcessor1*, UInt32)
    get_private_data : Proc(ID3D12VideoProcessor1*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D12VideoProcessor1*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D12VideoProcessor1*, Guid*, IUnknown, HRESULT)
    set_name : Proc(ID3D12VideoProcessor1*, LibC::LPWSTR, HRESULT)
    get_device : Proc(ID3D12VideoProcessor1*, Guid*, Void**, HRESULT)
    get_node_mask : Proc(ID3D12VideoProcessor1*, UInt32)
    get_num_input_stream_descs : Proc(ID3D12VideoProcessor1*, UInt32)
    get_input_stream_descs : Proc(ID3D12VideoProcessor1*, UInt32, D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, HRESULT)
    get_output_stream_desc : Proc(ID3D12VideoProcessor1*, D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC)
    get_protected_resource_session : Proc(ID3D12VideoProcessor1*, Guid*, Void**, HRESULT)
  end

  ID3D12VideoProcessor1_GUID = "f3cfe615-553f-425c-86d8-ee8c1b1fb01c"
  IID_ID3D12VideoProcessor1 = LibC::GUID.new(0xf3cfe615_u32, 0x553f_u16, 0x425c_u16, StaticArray[0x86_u8, 0xd8_u8, 0xee_u8, 0x8c_u8, 0x1b_u8, 0x1f_u8, 0xb0_u8, 0x1c_u8])
  struct ID3D12VideoProcessor1
    lpVtbl : ID3D12VideoProcessor1VTbl*
  end

  struct ID3D12VideoExtensionCommandVTbl
    query_interface : Proc(ID3D12VideoExtensionCommand*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D12VideoExtensionCommand*, UInt32)
    release : Proc(ID3D12VideoExtensionCommand*, UInt32)
    get_private_data : Proc(ID3D12VideoExtensionCommand*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D12VideoExtensionCommand*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D12VideoExtensionCommand*, Guid*, IUnknown, HRESULT)
    set_name : Proc(ID3D12VideoExtensionCommand*, LibC::LPWSTR, HRESULT)
    get_device : Proc(ID3D12VideoExtensionCommand*, Guid*, Void**, HRESULT)
    get_desc : Proc(ID3D12VideoExtensionCommand*, D3D12_VIDEO_EXTENSION_COMMAND_DESC)
    get_protected_resource_session : Proc(ID3D12VideoExtensionCommand*, Guid*, Void**, HRESULT)
  end

  ID3D12VideoExtensionCommand_GUID = "554e41e8-ae8e-4a8c-b7d2-5b4f274a30e4"
  IID_ID3D12VideoExtensionCommand = LibC::GUID.new(0x554e41e8_u32, 0xae8e_u16, 0x4a8c_u16, StaticArray[0xb7_u8, 0xd2_u8, 0x5b_u8, 0x4f_u8, 0x27_u8, 0x4a_u8, 0x30_u8, 0xe4_u8])
  struct ID3D12VideoExtensionCommand
    lpVtbl : ID3D12VideoExtensionCommandVTbl*
  end

  struct ID3D12VideoDevice2VTbl
    query_interface : Proc(ID3D12VideoDevice2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D12VideoDevice2*, UInt32)
    release : Proc(ID3D12VideoDevice2*, UInt32)
    check_feature_support : Proc(ID3D12VideoDevice2*, D3D12_FEATURE_VIDEO, Void*, UInt32, HRESULT)
    create_video_decoder : Proc(ID3D12VideoDevice2*, D3D12_VIDEO_DECODER_DESC*, Guid*, Void**, HRESULT)
    create_video_decoder_heap : Proc(ID3D12VideoDevice2*, D3D12_VIDEO_DECODER_HEAP_DESC*, Guid*, Void**, HRESULT)
    create_video_processor : Proc(ID3D12VideoDevice2*, UInt32, D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*, UInt32, D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, Guid*, Void**, HRESULT)
    create_video_motion_estimator : Proc(ID3D12VideoDevice2*, D3D12_VIDEO_MOTION_ESTIMATOR_DESC*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)
    create_video_motion_vector_heap : Proc(ID3D12VideoDevice2*, D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)
    create_video_decoder1 : Proc(ID3D12VideoDevice2*, D3D12_VIDEO_DECODER_DESC*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)
    create_video_decoder_heap1 : Proc(ID3D12VideoDevice2*, D3D12_VIDEO_DECODER_HEAP_DESC*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)
    create_video_processor1 : Proc(ID3D12VideoDevice2*, UInt32, D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*, UInt32, D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)
    create_video_extension_command : Proc(ID3D12VideoDevice2*, D3D12_VIDEO_EXTENSION_COMMAND_DESC*, Void*, LibC::UINT_PTR, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)
    execute_extension_command : Proc(ID3D12VideoDevice2*, ID3D12VideoExtensionCommand, Void*, LibC::UINT_PTR, Void*, LibC::UINT_PTR, HRESULT)
  end

  ID3D12VideoDevice2_GUID = "f019ac49-f838-4a95-9b17-579437c8f513"
  IID_ID3D12VideoDevice2 = LibC::GUID.new(0xf019ac49_u32, 0xf838_u16, 0x4a95_u16, StaticArray[0x9b_u8, 0x17_u8, 0x57_u8, 0x94_u8, 0x37_u8, 0xc8_u8, 0xf5_u8, 0x13_u8])
  struct ID3D12VideoDevice2
    lpVtbl : ID3D12VideoDevice2VTbl*
  end

  struct ID3D12VideoDecodeCommandList2VTbl
    query_interface : Proc(ID3D12VideoDecodeCommandList2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D12VideoDecodeCommandList2*, UInt32)
    release : Proc(ID3D12VideoDecodeCommandList2*, UInt32)
    get_private_data : Proc(ID3D12VideoDecodeCommandList2*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D12VideoDecodeCommandList2*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D12VideoDecodeCommandList2*, Guid*, IUnknown, HRESULT)
    set_name : Proc(ID3D12VideoDecodeCommandList2*, LibC::LPWSTR, HRESULT)
    get_device : Proc(ID3D12VideoDecodeCommandList2*, Guid*, Void**, HRESULT)
    get_type : Proc(ID3D12VideoDecodeCommandList2*, D3D12_COMMAND_LIST_TYPE)
    close : Proc(ID3D12VideoDecodeCommandList2*, HRESULT)
    reset : Proc(ID3D12VideoDecodeCommandList2*, ID3D12CommandAllocator, HRESULT)
    clear_state : Proc(ID3D12VideoDecodeCommandList2*, Void)
    resource_barrier : Proc(ID3D12VideoDecodeCommandList2*, UInt32, D3D12_RESOURCE_BARRIER*, Void)
    discard_resource : Proc(ID3D12VideoDecodeCommandList2*, ID3D12Resource, D3D12_DISCARD_REGION*, Void)
    begin_query : Proc(ID3D12VideoDecodeCommandList2*, ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)
    end_query : Proc(ID3D12VideoDecodeCommandList2*, ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)
    resolve_query_data : Proc(ID3D12VideoDecodeCommandList2*, ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, UInt32, ID3D12Resource, UInt64, Void)
    set_predication : Proc(ID3D12VideoDecodeCommandList2*, ID3D12Resource, UInt64, D3D12_PREDICATION_OP, Void)
    set_marker : Proc(ID3D12VideoDecodeCommandList2*, UInt32, Void*, UInt32, Void)
    begin_event : Proc(ID3D12VideoDecodeCommandList2*, UInt32, Void*, UInt32, Void)
    end_event : Proc(ID3D12VideoDecodeCommandList2*, Void)
    decode_frame : Proc(ID3D12VideoDecodeCommandList2*, ID3D12VideoDecoder, D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS*, D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*, Void)
    write_buffer_immediate : Proc(ID3D12VideoDecodeCommandList2*, UInt32, D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void)
    decode_frame1 : Proc(ID3D12VideoDecodeCommandList2*, ID3D12VideoDecoder, D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1*, D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*, Void)
    set_protected_resource_session : Proc(ID3D12VideoDecodeCommandList2*, ID3D12ProtectedResourceSession, Void)
    initialize_extension_command : Proc(ID3D12VideoDecodeCommandList2*, ID3D12VideoExtensionCommand, Void*, LibC::UINT_PTR, Void)
    execute_extension_command : Proc(ID3D12VideoDecodeCommandList2*, ID3D12VideoExtensionCommand, Void*, LibC::UINT_PTR, Void)
  end

  ID3D12VideoDecodeCommandList2_GUID = "6e120880-c114-4153-8036-d247051e1729"
  IID_ID3D12VideoDecodeCommandList2 = LibC::GUID.new(0x6e120880_u32, 0xc114_u16, 0x4153_u16, StaticArray[0x80_u8, 0x36_u8, 0xd2_u8, 0x47_u8, 0x5_u8, 0x1e_u8, 0x17_u8, 0x29_u8])
  struct ID3D12VideoDecodeCommandList2
    lpVtbl : ID3D12VideoDecodeCommandList2VTbl*
  end

  struct ID3D12VideoProcessCommandList2VTbl
    query_interface : Proc(ID3D12VideoProcessCommandList2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D12VideoProcessCommandList2*, UInt32)
    release : Proc(ID3D12VideoProcessCommandList2*, UInt32)
    get_private_data : Proc(ID3D12VideoProcessCommandList2*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D12VideoProcessCommandList2*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D12VideoProcessCommandList2*, Guid*, IUnknown, HRESULT)
    set_name : Proc(ID3D12VideoProcessCommandList2*, LibC::LPWSTR, HRESULT)
    get_device : Proc(ID3D12VideoProcessCommandList2*, Guid*, Void**, HRESULT)
    get_type : Proc(ID3D12VideoProcessCommandList2*, D3D12_COMMAND_LIST_TYPE)
    close : Proc(ID3D12VideoProcessCommandList2*, HRESULT)
    reset : Proc(ID3D12VideoProcessCommandList2*, ID3D12CommandAllocator, HRESULT)
    clear_state : Proc(ID3D12VideoProcessCommandList2*, Void)
    resource_barrier : Proc(ID3D12VideoProcessCommandList2*, UInt32, D3D12_RESOURCE_BARRIER*, Void)
    discard_resource : Proc(ID3D12VideoProcessCommandList2*, ID3D12Resource, D3D12_DISCARD_REGION*, Void)
    begin_query : Proc(ID3D12VideoProcessCommandList2*, ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)
    end_query : Proc(ID3D12VideoProcessCommandList2*, ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)
    resolve_query_data : Proc(ID3D12VideoProcessCommandList2*, ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, UInt32, ID3D12Resource, UInt64, Void)
    set_predication : Proc(ID3D12VideoProcessCommandList2*, ID3D12Resource, UInt64, D3D12_PREDICATION_OP, Void)
    set_marker : Proc(ID3D12VideoProcessCommandList2*, UInt32, Void*, UInt32, Void)
    begin_event : Proc(ID3D12VideoProcessCommandList2*, UInt32, Void*, UInt32, Void)
    end_event : Proc(ID3D12VideoProcessCommandList2*, Void)
    process_frames : Proc(ID3D12VideoProcessCommandList2*, ID3D12VideoProcessor, D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*, UInt32, D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS*, Void)
    write_buffer_immediate : Proc(ID3D12VideoProcessCommandList2*, UInt32, D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void)
    process_frames1 : Proc(ID3D12VideoProcessCommandList2*, ID3D12VideoProcessor, D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*, UInt32, D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1*, Void)
    set_protected_resource_session : Proc(ID3D12VideoProcessCommandList2*, ID3D12ProtectedResourceSession, Void)
    initialize_extension_command : Proc(ID3D12VideoProcessCommandList2*, ID3D12VideoExtensionCommand, Void*, LibC::UINT_PTR, Void)
    execute_extension_command : Proc(ID3D12VideoProcessCommandList2*, ID3D12VideoExtensionCommand, Void*, LibC::UINT_PTR, Void)
  end

  ID3D12VideoProcessCommandList2_GUID = "db525ae4-6ad6-473c-baa7-59b2e37082e4"
  IID_ID3D12VideoProcessCommandList2 = LibC::GUID.new(0xdb525ae4_u32, 0x6ad6_u16, 0x473c_u16, StaticArray[0xba_u8, 0xa7_u8, 0x59_u8, 0xb2_u8, 0xe3_u8, 0x70_u8, 0x82_u8, 0xe4_u8])
  struct ID3D12VideoProcessCommandList2
    lpVtbl : ID3D12VideoProcessCommandList2VTbl*
  end

  struct ID3D12VideoEncodeCommandList1VTbl
    query_interface : Proc(ID3D12VideoEncodeCommandList1*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D12VideoEncodeCommandList1*, UInt32)
    release : Proc(ID3D12VideoEncodeCommandList1*, UInt32)
    get_private_data : Proc(ID3D12VideoEncodeCommandList1*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D12VideoEncodeCommandList1*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D12VideoEncodeCommandList1*, Guid*, IUnknown, HRESULT)
    set_name : Proc(ID3D12VideoEncodeCommandList1*, LibC::LPWSTR, HRESULT)
    get_device : Proc(ID3D12VideoEncodeCommandList1*, Guid*, Void**, HRESULT)
    get_type : Proc(ID3D12VideoEncodeCommandList1*, D3D12_COMMAND_LIST_TYPE)
    close : Proc(ID3D12VideoEncodeCommandList1*, HRESULT)
    reset : Proc(ID3D12VideoEncodeCommandList1*, ID3D12CommandAllocator, HRESULT)
    clear_state : Proc(ID3D12VideoEncodeCommandList1*, Void)
    resource_barrier : Proc(ID3D12VideoEncodeCommandList1*, UInt32, D3D12_RESOURCE_BARRIER*, Void)
    discard_resource : Proc(ID3D12VideoEncodeCommandList1*, ID3D12Resource, D3D12_DISCARD_REGION*, Void)
    begin_query : Proc(ID3D12VideoEncodeCommandList1*, ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)
    end_query : Proc(ID3D12VideoEncodeCommandList1*, ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)
    resolve_query_data : Proc(ID3D12VideoEncodeCommandList1*, ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, UInt32, ID3D12Resource, UInt64, Void)
    set_predication : Proc(ID3D12VideoEncodeCommandList1*, ID3D12Resource, UInt64, D3D12_PREDICATION_OP, Void)
    set_marker : Proc(ID3D12VideoEncodeCommandList1*, UInt32, Void*, UInt32, Void)
    begin_event : Proc(ID3D12VideoEncodeCommandList1*, UInt32, Void*, UInt32, Void)
    end_event : Proc(ID3D12VideoEncodeCommandList1*, Void)
    estimate_motion : Proc(ID3D12VideoEncodeCommandList1*, ID3D12VideoMotionEstimator, D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT*, D3D12_VIDEO_MOTION_ESTIMATOR_INPUT*, Void)
    resolve_motion_vector_heap : Proc(ID3D12VideoEncodeCommandList1*, D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT*, D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT*, Void)
    write_buffer_immediate : Proc(ID3D12VideoEncodeCommandList1*, UInt32, D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void)
    set_protected_resource_session : Proc(ID3D12VideoEncodeCommandList1*, ID3D12ProtectedResourceSession, Void)
    initialize_extension_command : Proc(ID3D12VideoEncodeCommandList1*, ID3D12VideoExtensionCommand, Void*, LibC::UINT_PTR, Void)
    execute_extension_command : Proc(ID3D12VideoEncodeCommandList1*, ID3D12VideoExtensionCommand, Void*, LibC::UINT_PTR, Void)
  end

  ID3D12VideoEncodeCommandList1_GUID = "94971eca-2bdb-4769-88cf-3675ea757ebc"
  IID_ID3D12VideoEncodeCommandList1 = LibC::GUID.new(0x94971eca_u32, 0x2bdb_u16, 0x4769_u16, StaticArray[0x88_u8, 0xcf_u8, 0x36_u8, 0x75_u8, 0xea_u8, 0x75_u8, 0x7e_u8, 0xbc_u8])
  struct ID3D12VideoEncodeCommandList1
    lpVtbl : ID3D12VideoEncodeCommandList1VTbl*
  end

  struct ID3D12VideoEncoderVTbl
    query_interface : Proc(ID3D12VideoEncoder*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D12VideoEncoder*, UInt32)
    release : Proc(ID3D12VideoEncoder*, UInt32)
    get_private_data : Proc(ID3D12VideoEncoder*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D12VideoEncoder*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D12VideoEncoder*, Guid*, IUnknown, HRESULT)
    set_name : Proc(ID3D12VideoEncoder*, LibC::LPWSTR, HRESULT)
    get_device : Proc(ID3D12VideoEncoder*, Guid*, Void**, HRESULT)
    get_node_mask : Proc(ID3D12VideoEncoder*, UInt32)
    get_encoder_flags : Proc(ID3D12VideoEncoder*, D3D12_VIDEO_ENCODER_FLAGS)
    get_codec : Proc(ID3D12VideoEncoder*, D3D12_VIDEO_ENCODER_CODEC)
    get_codec_profile : Proc(ID3D12VideoEncoder*, D3D12_VIDEO_ENCODER_PROFILE_DESC, HRESULT)
    get_codec_configuration : Proc(ID3D12VideoEncoder*, D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION, HRESULT)
    get_input_format : Proc(ID3D12VideoEncoder*, DXGI_FORMAT)
    get_max_motion_estimation_precision : Proc(ID3D12VideoEncoder*, D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE)
  end

  ID3D12VideoEncoder_GUID = "2e0d212d-8df9-44a6-a770-bb289b182737"
  IID_ID3D12VideoEncoder = LibC::GUID.new(0x2e0d212d_u32, 0x8df9_u16, 0x44a6_u16, StaticArray[0xa7_u8, 0x70_u8, 0xbb_u8, 0x28_u8, 0x9b_u8, 0x18_u8, 0x27_u8, 0x37_u8])
  struct ID3D12VideoEncoder
    lpVtbl : ID3D12VideoEncoderVTbl*
  end

  struct ID3D12VideoEncoderHeapVTbl
    query_interface : Proc(ID3D12VideoEncoderHeap*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D12VideoEncoderHeap*, UInt32)
    release : Proc(ID3D12VideoEncoderHeap*, UInt32)
    get_private_data : Proc(ID3D12VideoEncoderHeap*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D12VideoEncoderHeap*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D12VideoEncoderHeap*, Guid*, IUnknown, HRESULT)
    set_name : Proc(ID3D12VideoEncoderHeap*, LibC::LPWSTR, HRESULT)
    get_device : Proc(ID3D12VideoEncoderHeap*, Guid*, Void**, HRESULT)
    get_node_mask : Proc(ID3D12VideoEncoderHeap*, UInt32)
    get_encoder_heap_flags : Proc(ID3D12VideoEncoderHeap*, D3D12_VIDEO_ENCODER_HEAP_FLAGS)
    get_codec : Proc(ID3D12VideoEncoderHeap*, D3D12_VIDEO_ENCODER_CODEC)
    get_codec_profile : Proc(ID3D12VideoEncoderHeap*, D3D12_VIDEO_ENCODER_PROFILE_DESC, HRESULT)
    get_codec_level : Proc(ID3D12VideoEncoderHeap*, D3D12_VIDEO_ENCODER_LEVEL_SETTING, HRESULT)
    get_resolution_list_count : Proc(ID3D12VideoEncoderHeap*, UInt32)
    get_resolution_list : Proc(ID3D12VideoEncoderHeap*, UInt32, D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC*, HRESULT)
  end

  ID3D12VideoEncoderHeap_GUID = "22b35d96-876a-44c0-b25e-fb8c9c7f1c4a"
  IID_ID3D12VideoEncoderHeap = LibC::GUID.new(0x22b35d96_u32, 0x876a_u16, 0x44c0_u16, StaticArray[0xb2_u8, 0x5e_u8, 0xfb_u8, 0x8c_u8, 0x9c_u8, 0x7f_u8, 0x1c_u8, 0x4a_u8])
  struct ID3D12VideoEncoderHeap
    lpVtbl : ID3D12VideoEncoderHeapVTbl*
  end

  struct ID3D12VideoDevice3VTbl
    query_interface : Proc(ID3D12VideoDevice3*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D12VideoDevice3*, UInt32)
    release : Proc(ID3D12VideoDevice3*, UInt32)
    check_feature_support : Proc(ID3D12VideoDevice3*, D3D12_FEATURE_VIDEO, Void*, UInt32, HRESULT)
    create_video_decoder : Proc(ID3D12VideoDevice3*, D3D12_VIDEO_DECODER_DESC*, Guid*, Void**, HRESULT)
    create_video_decoder_heap : Proc(ID3D12VideoDevice3*, D3D12_VIDEO_DECODER_HEAP_DESC*, Guid*, Void**, HRESULT)
    create_video_processor : Proc(ID3D12VideoDevice3*, UInt32, D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*, UInt32, D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, Guid*, Void**, HRESULT)
    create_video_motion_estimator : Proc(ID3D12VideoDevice3*, D3D12_VIDEO_MOTION_ESTIMATOR_DESC*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)
    create_video_motion_vector_heap : Proc(ID3D12VideoDevice3*, D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)
    create_video_decoder1 : Proc(ID3D12VideoDevice3*, D3D12_VIDEO_DECODER_DESC*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)
    create_video_decoder_heap1 : Proc(ID3D12VideoDevice3*, D3D12_VIDEO_DECODER_HEAP_DESC*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)
    create_video_processor1 : Proc(ID3D12VideoDevice3*, UInt32, D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*, UInt32, D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)
    create_video_extension_command : Proc(ID3D12VideoDevice3*, D3D12_VIDEO_EXTENSION_COMMAND_DESC*, Void*, LibC::UINT_PTR, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)
    execute_extension_command : Proc(ID3D12VideoDevice3*, ID3D12VideoExtensionCommand, Void*, LibC::UINT_PTR, Void*, LibC::UINT_PTR, HRESULT)
    create_video_encoder : Proc(ID3D12VideoDevice3*, D3D12_VIDEO_ENCODER_DESC*, Guid*, Void**, HRESULT)
    create_video_encoder_heap : Proc(ID3D12VideoDevice3*, D3D12_VIDEO_ENCODER_HEAP_DESC*, Guid*, Void**, HRESULT)
  end

  ID3D12VideoDevice3_GUID = "4243adb4-3a32-4666-973c-0ccc5625dc44"
  IID_ID3D12VideoDevice3 = LibC::GUID.new(0x4243adb4_u32, 0x3a32_u16, 0x4666_u16, StaticArray[0x97_u8, 0x3c_u8, 0xc_u8, 0xcc_u8, 0x56_u8, 0x25_u8, 0xdc_u8, 0x44_u8])
  struct ID3D12VideoDevice3
    lpVtbl : ID3D12VideoDevice3VTbl*
  end

  struct ID3D12VideoEncodeCommandList2VTbl
    query_interface : Proc(ID3D12VideoEncodeCommandList2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D12VideoEncodeCommandList2*, UInt32)
    release : Proc(ID3D12VideoEncodeCommandList2*, UInt32)
    get_private_data : Proc(ID3D12VideoEncodeCommandList2*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D12VideoEncodeCommandList2*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D12VideoEncodeCommandList2*, Guid*, IUnknown, HRESULT)
    set_name : Proc(ID3D12VideoEncodeCommandList2*, LibC::LPWSTR, HRESULT)
    get_device : Proc(ID3D12VideoEncodeCommandList2*, Guid*, Void**, HRESULT)
    get_type : Proc(ID3D12VideoEncodeCommandList2*, D3D12_COMMAND_LIST_TYPE)
    close : Proc(ID3D12VideoEncodeCommandList2*, HRESULT)
    reset : Proc(ID3D12VideoEncodeCommandList2*, ID3D12CommandAllocator, HRESULT)
    clear_state : Proc(ID3D12VideoEncodeCommandList2*, Void)
    resource_barrier : Proc(ID3D12VideoEncodeCommandList2*, UInt32, D3D12_RESOURCE_BARRIER*, Void)
    discard_resource : Proc(ID3D12VideoEncodeCommandList2*, ID3D12Resource, D3D12_DISCARD_REGION*, Void)
    begin_query : Proc(ID3D12VideoEncodeCommandList2*, ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)
    end_query : Proc(ID3D12VideoEncodeCommandList2*, ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)
    resolve_query_data : Proc(ID3D12VideoEncodeCommandList2*, ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, UInt32, ID3D12Resource, UInt64, Void)
    set_predication : Proc(ID3D12VideoEncodeCommandList2*, ID3D12Resource, UInt64, D3D12_PREDICATION_OP, Void)
    set_marker : Proc(ID3D12VideoEncodeCommandList2*, UInt32, Void*, UInt32, Void)
    begin_event : Proc(ID3D12VideoEncodeCommandList2*, UInt32, Void*, UInt32, Void)
    end_event : Proc(ID3D12VideoEncodeCommandList2*, Void)
    estimate_motion : Proc(ID3D12VideoEncodeCommandList2*, ID3D12VideoMotionEstimator, D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT*, D3D12_VIDEO_MOTION_ESTIMATOR_INPUT*, Void)
    resolve_motion_vector_heap : Proc(ID3D12VideoEncodeCommandList2*, D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT*, D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT*, Void)
    write_buffer_immediate : Proc(ID3D12VideoEncodeCommandList2*, UInt32, D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void)
    set_protected_resource_session : Proc(ID3D12VideoEncodeCommandList2*, ID3D12ProtectedResourceSession, Void)
    initialize_extension_command : Proc(ID3D12VideoEncodeCommandList2*, ID3D12VideoExtensionCommand, Void*, LibC::UINT_PTR, Void)
    execute_extension_command : Proc(ID3D12VideoEncodeCommandList2*, ID3D12VideoExtensionCommand, Void*, LibC::UINT_PTR, Void)
    encode_frame : Proc(ID3D12VideoEncodeCommandList2*, ID3D12VideoEncoder, ID3D12VideoEncoderHeap, D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS*, D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS*, Void)
    resolve_encoder_output_metadata : Proc(ID3D12VideoEncodeCommandList2*, D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS*, D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS*, Void)
  end

  ID3D12VideoEncodeCommandList2_GUID = "895491e2-e701-46a9-9a1f-8d3480ed867a"
  IID_ID3D12VideoEncodeCommandList2 = LibC::GUID.new(0x895491e2_u32, 0xe701_u16, 0x46a9_u16, StaticArray[0x9a_u8, 0x1f_u8, 0x8d_u8, 0x34_u8, 0x80_u8, 0xed_u8, 0x86_u8, 0x7a_u8])
  struct ID3D12VideoEncodeCommandList2
    lpVtbl : ID3D12VideoEncodeCommandList2VTbl*
  end

  struct IWMValidateVTbl
    query_interface : Proc(IWMValidate*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMValidate*, UInt32)
    release : Proc(IWMValidate*, UInt32)
    set_identifier : Proc(IWMValidate*, Guid, HRESULT)
  end

  IWMValidate_GUID = "cee3def2-3808-414d-be66-fafd472210bc"
  IID_IWMValidate = LibC::GUID.new(0xcee3def2_u32, 0x3808_u16, 0x414d_u16, StaticArray[0xbe_u8, 0x66_u8, 0xfa_u8, 0xfd_u8, 0x47_u8, 0x22_u8, 0x10_u8, 0xbc_u8])
  struct IWMValidate
    lpVtbl : IWMValidateVTbl*
  end

  struct IValidateBindingVTbl
    query_interface : Proc(IValidateBinding*, Guid*, Void**, HRESULT)
    add_ref : Proc(IValidateBinding*, UInt32)
    release : Proc(IValidateBinding*, UInt32)
    get_identifier : Proc(IValidateBinding*, Guid, UInt8*, UInt32, UInt8**, UInt32*, HRESULT)
  end

  IValidateBinding_GUID = "04a578b2-e778-422a-a805-b3ee54d90bd9"
  IID_IValidateBinding = LibC::GUID.new(0x4a578b2_u32, 0xe778_u16, 0x422a_u16, StaticArray[0xa8_u8, 0x5_u8, 0xb3_u8, 0xee_u8, 0x54_u8, 0xd9_u8, 0xb_u8, 0xd9_u8])
  struct IValidateBinding
    lpVtbl : IValidateBindingVTbl*
  end

  struct IWMVideoDecoderHurryupVTbl
    query_interface : Proc(IWMVideoDecoderHurryup*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMVideoDecoderHurryup*, UInt32)
    release : Proc(IWMVideoDecoderHurryup*, UInt32)
    set_hurryup : Proc(IWMVideoDecoderHurryup*, Int32, HRESULT)
    get_hurryup : Proc(IWMVideoDecoderHurryup*, Int32*, HRESULT)
  end

  IWMVideoDecoderHurryup_GUID = "352bb3bd-2d4d-4323-9e71-dcdcfbd53ca6"
  IID_IWMVideoDecoderHurryup = LibC::GUID.new(0x352bb3bd_u32, 0x2d4d_u16, 0x4323_u16, StaticArray[0x9e_u8, 0x71_u8, 0xdc_u8, 0xdc_u8, 0xfb_u8, 0xd5_u8, 0x3c_u8, 0xa6_u8])
  struct IWMVideoDecoderHurryup
    lpVtbl : IWMVideoDecoderHurryupVTbl*
  end

  struct IWMVideoForceKeyFrameVTbl
    query_interface : Proc(IWMVideoForceKeyFrame*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMVideoForceKeyFrame*, UInt32)
    release : Proc(IWMVideoForceKeyFrame*, UInt32)
    set_key_frame : Proc(IWMVideoForceKeyFrame*, HRESULT)
  end

  IWMVideoForceKeyFrame_GUID = "9f8496be-5b9a-41b9-a9e8-f21cd80596c2"
  IID_IWMVideoForceKeyFrame = LibC::GUID.new(0x9f8496be_u32, 0x5b9a_u16, 0x41b9_u16, StaticArray[0xa9_u8, 0xe8_u8, 0xf2_u8, 0x1c_u8, 0xd8_u8, 0x5_u8, 0x96_u8, 0xc2_u8])
  struct IWMVideoForceKeyFrame
    lpVtbl : IWMVideoForceKeyFrameVTbl*
  end

  struct IWMCodecStringsVTbl
    query_interface : Proc(IWMCodecStrings*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMCodecStrings*, UInt32)
    release : Proc(IWMCodecStrings*, UInt32)
    get_name : Proc(IWMCodecStrings*, DMO_MEDIA_TYPE*, UInt32, Char*, UInt32*, HRESULT)
    get_description : Proc(IWMCodecStrings*, DMO_MEDIA_TYPE*, UInt32, Char*, UInt32*, HRESULT)
  end

  IWMCodecStrings_GUID = "a7b2504b-e58a-47fb-958b-cac7165a057d"
  IID_IWMCodecStrings = LibC::GUID.new(0xa7b2504b_u32, 0xe58a_u16, 0x47fb_u16, StaticArray[0x95_u8, 0x8b_u8, 0xca_u8, 0xc7_u8, 0x16_u8, 0x5a_u8, 0x5_u8, 0x7d_u8])
  struct IWMCodecStrings
    lpVtbl : IWMCodecStringsVTbl*
  end

  struct IWMCodecPropsVTbl
    query_interface : Proc(IWMCodecProps*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMCodecProps*, UInt32)
    release : Proc(IWMCodecProps*, UInt32)
    get_format_prop : Proc(IWMCodecProps*, DMO_MEDIA_TYPE*, LibC::LPWSTR, WMT_PROP_DATATYPE*, UInt8*, UInt32*, HRESULT)
    get_codec_prop : Proc(IWMCodecProps*, UInt32, LibC::LPWSTR, WMT_PROP_DATATYPE*, UInt8*, UInt32*, HRESULT)
  end

  IWMCodecProps_GUID = "2573e11a-f01a-4fdd-a98d-63b8e0ba9589"
  IID_IWMCodecProps = LibC::GUID.new(0x2573e11a_u32, 0xf01a_u16, 0x4fdd_u16, StaticArray[0xa9_u8, 0x8d_u8, 0x63_u8, 0xb8_u8, 0xe0_u8, 0xba_u8, 0x95_u8, 0x89_u8])
  struct IWMCodecProps
    lpVtbl : IWMCodecPropsVTbl*
  end

  struct IWMCodecLeakyBucketVTbl
    query_interface : Proc(IWMCodecLeakyBucket*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMCodecLeakyBucket*, UInt32)
    release : Proc(IWMCodecLeakyBucket*, UInt32)
    set_buffer_size_bits : Proc(IWMCodecLeakyBucket*, UInt32, HRESULT)
    get_buffer_size_bits : Proc(IWMCodecLeakyBucket*, UInt32*, HRESULT)
    set_buffer_fullness_bits : Proc(IWMCodecLeakyBucket*, UInt32, HRESULT)
    get_buffer_fullness_bits : Proc(IWMCodecLeakyBucket*, UInt32*, HRESULT)
  end

  IWMCodecLeakyBucket_GUID = "a81ba647-6227-43b7-b231-c7b15135dd7d"
  IID_IWMCodecLeakyBucket = LibC::GUID.new(0xa81ba647_u32, 0x6227_u16, 0x43b7_u16, StaticArray[0xb2_u8, 0x31_u8, 0xc7_u8, 0xb1_u8, 0x51_u8, 0x35_u8, 0xdd_u8, 0x7d_u8])
  struct IWMCodecLeakyBucket
    lpVtbl : IWMCodecLeakyBucketVTbl*
  end

  struct IWMCodecOutputTimestampVTbl
    query_interface : Proc(IWMCodecOutputTimestamp*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMCodecOutputTimestamp*, UInt32)
    release : Proc(IWMCodecOutputTimestamp*, UInt32)
    get_next_output_time : Proc(IWMCodecOutputTimestamp*, Int64*, HRESULT)
  end

  IWMCodecOutputTimestamp_GUID = "b72adf95-7adc-4a72-bc05-577d8ea6bf68"
  IID_IWMCodecOutputTimestamp = LibC::GUID.new(0xb72adf95_u32, 0x7adc_u16, 0x4a72_u16, StaticArray[0xbc_u8, 0x5_u8, 0x57_u8, 0x7d_u8, 0x8e_u8, 0xa6_u8, 0xbf_u8, 0x68_u8])
  struct IWMCodecOutputTimestamp
    lpVtbl : IWMCodecOutputTimestampVTbl*
  end

  struct IWMVideoDecoderReconBufferVTbl
    query_interface : Proc(IWMVideoDecoderReconBuffer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMVideoDecoderReconBuffer*, UInt32)
    release : Proc(IWMVideoDecoderReconBuffer*, UInt32)
    get_reconstructed_video_frame_size : Proc(IWMVideoDecoderReconBuffer*, UInt32*, HRESULT)
    get_reconstructed_video_frame : Proc(IWMVideoDecoderReconBuffer*, IMediaBuffer, HRESULT)
    set_reconstructed_video_frame : Proc(IWMVideoDecoderReconBuffer*, IMediaBuffer, HRESULT)
  end

  IWMVideoDecoderReconBuffer_GUID = "45bda2ac-88e2-4923-98ba-3949080711a3"
  IID_IWMVideoDecoderReconBuffer = LibC::GUID.new(0x45bda2ac_u32, 0x88e2_u16, 0x4923_u16, StaticArray[0x98_u8, 0xba_u8, 0x39_u8, 0x49_u8, 0x8_u8, 0x7_u8, 0x11_u8, 0xa3_u8])
  struct IWMVideoDecoderReconBuffer
    lpVtbl : IWMVideoDecoderReconBufferVTbl*
  end

  struct IWMCodecPrivateDataVTbl
    query_interface : Proc(IWMCodecPrivateData*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMCodecPrivateData*, UInt32)
    release : Proc(IWMCodecPrivateData*, UInt32)
    set_partial_output_type : Proc(IWMCodecPrivateData*, DMO_MEDIA_TYPE*, HRESULT)
    get_private_data : Proc(IWMCodecPrivateData*, UInt8*, UInt32*, HRESULT)
  end

  IWMCodecPrivateData_GUID = "73f0be8e-57f7-4f01-aa66-9f57340cfe0e"
  IID_IWMCodecPrivateData = LibC::GUID.new(0x73f0be8e_u32, 0x57f7_u16, 0x4f01_u16, StaticArray[0xaa_u8, 0x66_u8, 0x9f_u8, 0x57_u8, 0x34_u8, 0xc_u8, 0xfe_u8, 0xe_u8])
  struct IWMCodecPrivateData
    lpVtbl : IWMCodecPrivateDataVTbl*
  end

  struct IWMSampleExtensionSupportVTbl
    query_interface : Proc(IWMSampleExtensionSupport*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMSampleExtensionSupport*, UInt32)
    release : Proc(IWMSampleExtensionSupport*, UInt32)
    set_use_sample_extensions : Proc(IWMSampleExtensionSupport*, LibC::BOOL, HRESULT)
  end

  IWMSampleExtensionSupport_GUID = "9bca9884-0604-4c2a-87da-793ff4d586c3"
  IID_IWMSampleExtensionSupport = LibC::GUID.new(0x9bca9884_u32, 0x604_u16, 0x4c2a_u16, StaticArray[0x87_u8, 0xda_u8, 0x79_u8, 0x3f_u8, 0xf4_u8, 0xd5_u8, 0x86_u8, 0xc3_u8])
  struct IWMSampleExtensionSupport
    lpVtbl : IWMSampleExtensionSupportVTbl*
  end

  struct IWMResamplerPropsVTbl
    query_interface : Proc(IWMResamplerProps*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMResamplerProps*, UInt32)
    release : Proc(IWMResamplerProps*, UInt32)
    set_half_filter_length : Proc(IWMResamplerProps*, Int32, HRESULT)
    set_user_channel_mtx : Proc(IWMResamplerProps*, Float32*, HRESULT)
  end

  IWMResamplerProps_GUID = "e7e9984f-f09f-4da4-903f-6e2e0efe56b5"
  IID_IWMResamplerProps = LibC::GUID.new(0xe7e9984f_u32, 0xf09f_u16, 0x4da4_u16, StaticArray[0x90_u8, 0x3f_u8, 0x6e_u8, 0x2e_u8, 0xe_u8, 0xfe_u8, 0x56_u8, 0xb5_u8])
  struct IWMResamplerProps
    lpVtbl : IWMResamplerPropsVTbl*
  end

  struct IWMResizerPropsVTbl
    query_interface : Proc(IWMResizerProps*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMResizerProps*, UInt32)
    release : Proc(IWMResizerProps*, UInt32)
    set_resizer_quality : Proc(IWMResizerProps*, Int32, HRESULT)
    set_interlace_mode : Proc(IWMResizerProps*, Int32, HRESULT)
    set_clip_region : Proc(IWMResizerProps*, Int32, Int32, Int32, Int32, HRESULT)
    set_full_crop_region : Proc(IWMResizerProps*, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, HRESULT)
    get_full_crop_region : Proc(IWMResizerProps*, Int32*, Int32*, Int32*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
  end

  IWMResizerProps_GUID = "57665d4c-0414-4faa-905b-10e546f81c33"
  IID_IWMResizerProps = LibC::GUID.new(0x57665d4c_u32, 0x414_u16, 0x4faa_u16, StaticArray[0x90_u8, 0x5b_u8, 0x10_u8, 0xe5_u8, 0x46_u8, 0xf8_u8, 0x1c_u8, 0x33_u8])
  struct IWMResizerProps
    lpVtbl : IWMResizerPropsVTbl*
  end

  struct IWMColorLegalizerPropsVTbl
    query_interface : Proc(IWMColorLegalizerProps*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMColorLegalizerProps*, UInt32)
    release : Proc(IWMColorLegalizerProps*, UInt32)
    set_color_legalizer_quality : Proc(IWMColorLegalizerProps*, Int32, HRESULT)
  end

  IWMColorLegalizerProps_GUID = "776c93b3-b72d-4508-b6d0-208785f553e7"
  IID_IWMColorLegalizerProps = LibC::GUID.new(0x776c93b3_u32, 0xb72d_u16, 0x4508_u16, StaticArray[0xb6_u8, 0xd0_u8, 0x20_u8, 0x87_u8, 0x85_u8, 0xf5_u8, 0x53_u8, 0xe7_u8])
  struct IWMColorLegalizerProps
    lpVtbl : IWMColorLegalizerPropsVTbl*
  end

  struct IWMInterlacePropsVTbl
    query_interface : Proc(IWMInterlaceProps*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMInterlaceProps*, UInt32)
    release : Proc(IWMInterlaceProps*, UInt32)
    set_process_type : Proc(IWMInterlaceProps*, Int32, HRESULT)
    set_init_inverse_tele_cine_pattern : Proc(IWMInterlaceProps*, Int32, HRESULT)
    set_last_frame : Proc(IWMInterlaceProps*, HRESULT)
  end

  IWMInterlaceProps_GUID = "7b12e5d1-bd22-48ea-bc06-98e893221c89"
  IID_IWMInterlaceProps = LibC::GUID.new(0x7b12e5d1_u32, 0xbd22_u16, 0x48ea_u16, StaticArray[0xbc_u8, 0x6_u8, 0x98_u8, 0xe8_u8, 0x93_u8, 0x22_u8, 0x1c_u8, 0x89_u8])
  struct IWMInterlaceProps
    lpVtbl : IWMInterlacePropsVTbl*
  end

  struct IWMFrameInterpPropsVTbl
    query_interface : Proc(IWMFrameInterpProps*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMFrameInterpProps*, UInt32)
    release : Proc(IWMFrameInterpProps*, UInt32)
    set_frame_rate_in : Proc(IWMFrameInterpProps*, Int32, Int32, HRESULT)
    set_frame_rate_out : Proc(IWMFrameInterpProps*, Int32, Int32, HRESULT)
    set_frame_interp_enabled : Proc(IWMFrameInterpProps*, LibC::BOOL, HRESULT)
    set_complexity_level : Proc(IWMFrameInterpProps*, Int32, HRESULT)
  end

  IWMFrameInterpProps_GUID = "4c06bb9b-626c-4614-8329-cc6a21b93fa0"
  IID_IWMFrameInterpProps = LibC::GUID.new(0x4c06bb9b_u32, 0x626c_u16, 0x4614_u16, StaticArray[0x83_u8, 0x29_u8, 0xcc_u8, 0x6a_u8, 0x21_u8, 0xb9_u8, 0x3f_u8, 0xa0_u8])
  struct IWMFrameInterpProps
    lpVtbl : IWMFrameInterpPropsVTbl*
  end

  struct IWMColorConvPropsVTbl
    query_interface : Proc(IWMColorConvProps*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMColorConvProps*, UInt32)
    release : Proc(IWMColorConvProps*, UInt32)
    set_mode : Proc(IWMColorConvProps*, Int32, HRESULT)
    set_full_cropping_param : Proc(IWMColorConvProps*, Int32, Int32, Int32, Int32, Int32, Int32, HRESULT)
  end

  IWMColorConvProps_GUID = "e6a49e22-c099-421d-aad3-c061fb4ae85b"
  IID_IWMColorConvProps = LibC::GUID.new(0xe6a49e22_u32, 0xc099_u16, 0x421d_u16, StaticArray[0xaa_u8, 0xd3_u8, 0xc0_u8, 0x61_u8, 0xfb_u8, 0x4a_u8, 0xe8_u8, 0x5b_u8])
  struct IWMColorConvProps
    lpVtbl : IWMColorConvPropsVTbl*
  end

  struct ITocEntryVTbl
    query_interface : Proc(ITocEntry*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITocEntry*, UInt32)
    release : Proc(ITocEntry*, UInt32)
    set_title : Proc(ITocEntry*, LibC::LPWSTR, HRESULT)
    get_title : Proc(ITocEntry*, UInt16*, Char*, HRESULT)
    set_descriptor : Proc(ITocEntry*, TOC_ENTRY_DESCRIPTOR*, HRESULT)
    get_descriptor : Proc(ITocEntry*, TOC_ENTRY_DESCRIPTOR*, HRESULT)
    set_sub_entries : Proc(ITocEntry*, UInt32, UInt16*, HRESULT)
    get_sub_entries : Proc(ITocEntry*, UInt32*, UInt16*, HRESULT)
    set_description_data : Proc(ITocEntry*, UInt32, UInt8*, Guid*, HRESULT)
    get_description_data : Proc(ITocEntry*, UInt32*, UInt8*, Guid*, HRESULT)
  end

  ITocEntry_GUID = "f22f5e06-585c-4def-8523-6555cfbc0cb3"
  IID_ITocEntry = LibC::GUID.new(0xf22f5e06_u32, 0x585c_u16, 0x4def_u16, StaticArray[0x85_u8, 0x23_u8, 0x65_u8, 0x55_u8, 0xcf_u8, 0xbc_u8, 0xc_u8, 0xb3_u8])
  struct ITocEntry
    lpVtbl : ITocEntryVTbl*
  end

  struct ITocEntryListVTbl
    query_interface : Proc(ITocEntryList*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITocEntryList*, UInt32)
    release : Proc(ITocEntryList*, UInt32)
    get_entry_count : Proc(ITocEntryList*, UInt32*, HRESULT)
    get_entry_by_index : Proc(ITocEntryList*, UInt32, ITocEntry*, HRESULT)
    add_entry : Proc(ITocEntryList*, ITocEntry, UInt32*, HRESULT)
    add_entry_by_index : Proc(ITocEntryList*, UInt32, ITocEntry, HRESULT)
    remove_entry_by_index : Proc(ITocEntryList*, UInt32, HRESULT)
  end

  ITocEntryList_GUID = "3a8cccbd-0efd-43a3-b838-f38a552ba237"
  IID_ITocEntryList = LibC::GUID.new(0x3a8cccbd_u32, 0xefd_u16, 0x43a3_u16, StaticArray[0xb8_u8, 0x38_u8, 0xf3_u8, 0x8a_u8, 0x55_u8, 0x2b_u8, 0xa2_u8, 0x37_u8])
  struct ITocEntryList
    lpVtbl : ITocEntryListVTbl*
  end

  struct ITocVTbl
    query_interface : Proc(IToc*, Guid*, Void**, HRESULT)
    add_ref : Proc(IToc*, UInt32)
    release : Proc(IToc*, UInt32)
    set_descriptor : Proc(IToc*, TOC_DESCRIPTOR*, HRESULT)
    get_descriptor : Proc(IToc*, TOC_DESCRIPTOR*, HRESULT)
    set_description : Proc(IToc*, LibC::LPWSTR, HRESULT)
    get_description : Proc(IToc*, UInt16*, Char*, HRESULT)
    set_context : Proc(IToc*, UInt32, UInt8*, HRESULT)
    get_context : Proc(IToc*, UInt32*, UInt8*, HRESULT)
    get_entry_list_count : Proc(IToc*, UInt16*, HRESULT)
    get_entry_list_by_index : Proc(IToc*, UInt16, ITocEntryList*, HRESULT)
    add_entry_list : Proc(IToc*, ITocEntryList, UInt16*, HRESULT)
    add_entry_list_by_index : Proc(IToc*, UInt16, ITocEntryList, HRESULT)
    remove_entry_list_by_index : Proc(IToc*, UInt16, HRESULT)
  end

  IToc_GUID = "d6f05441-a919-423b-91a0-89d5b4a8ab77"
  IID_IToc = LibC::GUID.new(0xd6f05441_u32, 0xa919_u16, 0x423b_u16, StaticArray[0x91_u8, 0xa0_u8, 0x89_u8, 0xd5_u8, 0xb4_u8, 0xa8_u8, 0xab_u8, 0x77_u8])
  struct IToc
    lpVtbl : ITocVTbl*
  end

  struct ITocCollectionVTbl
    query_interface : Proc(ITocCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITocCollection*, UInt32)
    release : Proc(ITocCollection*, UInt32)
    get_entry_count : Proc(ITocCollection*, UInt32*, HRESULT)
    get_entry_by_index : Proc(ITocCollection*, UInt32, IToc*, HRESULT)
    add_entry : Proc(ITocCollection*, IToc, UInt32*, HRESULT)
    add_entry_by_index : Proc(ITocCollection*, UInt32, IToc, HRESULT)
    remove_entry_by_index : Proc(ITocCollection*, UInt32, HRESULT)
  end

  ITocCollection_GUID = "23fee831-ae96-42df-b170-25a04847a3ca"
  IID_ITocCollection = LibC::GUID.new(0x23fee831_u32, 0xae96_u16, 0x42df_u16, StaticArray[0xb1_u8, 0x70_u8, 0x25_u8, 0xa0_u8, 0x48_u8, 0x47_u8, 0xa3_u8, 0xca_u8])
  struct ITocCollection
    lpVtbl : ITocCollectionVTbl*
  end

  struct ITocParserVTbl
    query_interface : Proc(ITocParser*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITocParser*, UInt32)
    release : Proc(ITocParser*, UInt32)
    init : Proc(ITocParser*, LibC::LPWSTR, HRESULT)
    get_toc_count : Proc(ITocParser*, TOC_POS_TYPE, UInt32*, HRESULT)
    get_toc_by_index : Proc(ITocParser*, TOC_POS_TYPE, UInt32, IToc*, HRESULT)
    get_toc_by_type : Proc(ITocParser*, TOC_POS_TYPE, Guid, ITocCollection*, HRESULT)
    add_toc : Proc(ITocParser*, TOC_POS_TYPE, IToc, UInt32*, HRESULT)
    remove_toc_by_index : Proc(ITocParser*, TOC_POS_TYPE, UInt32, HRESULT)
    remove_toc_by_type : Proc(ITocParser*, TOC_POS_TYPE, Guid, HRESULT)
    commit : Proc(ITocParser*, HRESULT)
  end

  ITocParser_GUID = "ecfb9a55-9298-4f49-887f-0b36206599d2"
  IID_ITocParser = LibC::GUID.new(0xecfb9a55_u32, 0x9298_u16, 0x4f49_u16, StaticArray[0x88_u8, 0x7f_u8, 0xb_u8, 0x36_u8, 0x20_u8, 0x65_u8, 0x99_u8, 0xd2_u8])
  struct ITocParser
    lpVtbl : ITocParserVTbl*
  end

  struct IFileIoVTbl
    query_interface : Proc(IFileIo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFileIo*, UInt32)
    release : Proc(IFileIo*, UInt32)
    initialize : Proc(IFileIo*, FILE_ACCESSMODE, FILE_OPENMODE, LibC::LPWSTR, HRESULT)
    get_length : Proc(IFileIo*, UInt64*, HRESULT)
    set_length : Proc(IFileIo*, UInt64, HRESULT)
    get_current_position : Proc(IFileIo*, UInt64*, HRESULT)
    set_current_position : Proc(IFileIo*, UInt64, HRESULT)
    is_end_of_stream : Proc(IFileIo*, LibC::BOOL*, HRESULT)
    read : Proc(IFileIo*, UInt8*, UInt32, UInt32*, HRESULT)
    write : Proc(IFileIo*, UInt8*, UInt32, UInt32*, HRESULT)
    seek : Proc(IFileIo*, SEEK_ORIGIN, UInt64, UInt32, UInt64*, HRESULT)
    close : Proc(IFileIo*, HRESULT)
  end

  IFileIo_GUID = "11993196-1244-4840-ab44-480975c4ffe4"
  IID_IFileIo = LibC::GUID.new(0x11993196_u32, 0x1244_u16, 0x4840_u16, StaticArray[0xab_u8, 0x44_u8, 0x48_u8, 0x9_u8, 0x75_u8, 0xc4_u8, 0xff_u8, 0xe4_u8])
  struct IFileIo
    lpVtbl : IFileIoVTbl*
  end

  struct IFileClientVTbl
    query_interface : Proc(IFileClient*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFileClient*, UInt32)
    release : Proc(IFileClient*, UInt32)
    get_object_disk_size : Proc(IFileClient*, UInt64*, HRESULT)
    write : Proc(IFileClient*, IFileIo, HRESULT)
    read : Proc(IFileClient*, IFileIo, HRESULT)
  end

  IFileClient_GUID = "bfccd196-1244-4840-ab44-480975c4ffe4"
  IID_IFileClient = LibC::GUID.new(0xbfccd196_u32, 0x1244_u16, 0x4840_u16, StaticArray[0xab_u8, 0x44_u8, 0x48_u8, 0x9_u8, 0x75_u8, 0xc4_u8, 0xff_u8, 0xe4_u8])
  struct IFileClient
    lpVtbl : IFileClientVTbl*
  end

  struct IClusterDetectorVTbl
    query_interface : Proc(IClusterDetector*, Guid*, Void**, HRESULT)
    add_ref : Proc(IClusterDetector*, UInt32)
    release : Proc(IClusterDetector*, UInt32)
    initialize : Proc(IClusterDetector*, UInt16, UInt16, HRESULT)
    detect : Proc(IClusterDetector*, UInt32, Float32, Float32, IToc, IToc*, HRESULT)
  end

  IClusterDetector_GUID = "3f07f7b7-c680-41d9-9423-915107ec9ff9"
  IID_IClusterDetector = LibC::GUID.new(0x3f07f7b7_u32, 0xc680_u16, 0x41d9_u16, StaticArray[0x94_u8, 0x23_u8, 0x91_u8, 0x51_u8, 0x7_u8, 0xec_u8, 0x9f_u8, 0xf9_u8])
  struct IClusterDetector
    lpVtbl : IClusterDetectorVTbl*
  end

  struct IDXVAHD_DeviceVTbl
    query_interface : Proc(IDXVAHD_Device*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDXVAHD_Device*, UInt32)
    release : Proc(IDXVAHD_Device*, UInt32)
    create_video_surface : Proc(IDXVAHD_Device*, UInt32, UInt32, D3DFORMAT, D3DPOOL, UInt32, DXVAHD_SURFACE_TYPE, UInt32, IDirect3DSurface9*, LibC::HANDLE*, HRESULT)
    get_video_processor_device_caps : Proc(IDXVAHD_Device*, DXVAHD_VPDEVCAPS*, HRESULT)
    get_video_processor_output_formats : Proc(IDXVAHD_Device*, UInt32, D3DFORMAT*, HRESULT)
    get_video_processor_input_formats : Proc(IDXVAHD_Device*, UInt32, D3DFORMAT*, HRESULT)
    get_video_processor_caps : Proc(IDXVAHD_Device*, UInt32, DXVAHD_VPCAPS*, HRESULT)
    get_video_processor_custom_rates : Proc(IDXVAHD_Device*, Guid*, UInt32, DXVAHD_CUSTOM_RATE_DATA*, HRESULT)
    get_video_processor_filter_range : Proc(IDXVAHD_Device*, DXVAHD_FILTER, DXVAHD_FILTER_RANGE_DATA*, HRESULT)
    create_video_processor : Proc(IDXVAHD_Device*, Guid*, IDXVAHD_VideoProcessor*, HRESULT)
  end

  IDXVAHD_Device_GUID = "95f12dfd-d77e-49be-815f-57d579634d6d"
  IID_IDXVAHD_Device = LibC::GUID.new(0x95f12dfd_u32, 0xd77e_u16, 0x49be_u16, StaticArray[0x81_u8, 0x5f_u8, 0x57_u8, 0xd5_u8, 0x79_u8, 0x63_u8, 0x4d_u8, 0x6d_u8])
  struct IDXVAHD_Device
    lpVtbl : IDXVAHD_DeviceVTbl*
  end

  struct IDXVAHD_VideoProcessorVTbl
    query_interface : Proc(IDXVAHD_VideoProcessor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDXVAHD_VideoProcessor*, UInt32)
    release : Proc(IDXVAHD_VideoProcessor*, UInt32)
    set_video_process_blt_state : Proc(IDXVAHD_VideoProcessor*, DXVAHD_BLT_STATE, UInt32, Void*, HRESULT)
    get_video_process_blt_state : Proc(IDXVAHD_VideoProcessor*, DXVAHD_BLT_STATE, UInt32, Void*, HRESULT)
    set_video_process_stream_state : Proc(IDXVAHD_VideoProcessor*, UInt32, DXVAHD_STREAM_STATE, UInt32, Void*, HRESULT)
    get_video_process_stream_state : Proc(IDXVAHD_VideoProcessor*, UInt32, DXVAHD_STREAM_STATE, UInt32, Void*, HRESULT)
    video_process_blt_hd : Proc(IDXVAHD_VideoProcessor*, IDirect3DSurface9, UInt32, UInt32, DXVAHD_STREAM_DATA*, HRESULT)
  end

  IDXVAHD_VideoProcessor_GUID = "95f4edf4-6e03-4cd7-be1b-3075d665aa52"
  IID_IDXVAHD_VideoProcessor = LibC::GUID.new(0x95f4edf4_u32, 0x6e03_u16, 0x4cd7_u16, StaticArray[0xbe_u8, 0x1b_u8, 0x30_u8, 0x75_u8, 0xd6_u8, 0x65_u8, 0xaa_u8, 0x52_u8])
  struct IDXVAHD_VideoProcessor
    lpVtbl : IDXVAHD_VideoProcessorVTbl*
  end

  struct IDirect3DDeviceManager9VTbl
    query_interface : Proc(IDirect3DDeviceManager9*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirect3DDeviceManager9*, UInt32)
    release : Proc(IDirect3DDeviceManager9*, UInt32)
    reset_device : Proc(IDirect3DDeviceManager9*, IDirect3DDevice9, UInt32, HRESULT)
    open_device_handle : Proc(IDirect3DDeviceManager9*, LibC::HANDLE*, HRESULT)
    close_device_handle : Proc(IDirect3DDeviceManager9*, LibC::HANDLE, HRESULT)
    test_device : Proc(IDirect3DDeviceManager9*, LibC::HANDLE, HRESULT)
    lock_device : Proc(IDirect3DDeviceManager9*, LibC::HANDLE, IDirect3DDevice9*, LibC::BOOL, HRESULT)
    unlock_device : Proc(IDirect3DDeviceManager9*, LibC::HANDLE, LibC::BOOL, HRESULT)
    get_video_service : Proc(IDirect3DDeviceManager9*, LibC::HANDLE, Guid*, Void**, HRESULT)
  end

  IDirect3DDeviceManager9_GUID = "a0cade0f-06d5-4cf4-a1c7-f3cdd725aa75"
  IID_IDirect3DDeviceManager9 = LibC::GUID.new(0xa0cade0f_u32, 0x6d5_u16, 0x4cf4_u16, StaticArray[0xa1_u8, 0xc7_u8, 0xf3_u8, 0xcd_u8, 0xd7_u8, 0x25_u8, 0xaa_u8, 0x75_u8])
  struct IDirect3DDeviceManager9
    lpVtbl : IDirect3DDeviceManager9VTbl*
  end

  struct IDirectXVideoAccelerationServiceVTbl
    query_interface : Proc(IDirectXVideoAccelerationService*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectXVideoAccelerationService*, UInt32)
    release : Proc(IDirectXVideoAccelerationService*, UInt32)
    create_surface : Proc(IDirectXVideoAccelerationService*, UInt32, UInt32, UInt32, D3DFORMAT, D3DPOOL, UInt32, DXVA2_VideoRenderTargetType, IDirect3DSurface9*, LibC::HANDLE*, HRESULT)
  end

  IDirectXVideoAccelerationService_GUID = "fc51a550-d5e7-11d9-af55-00054e43ff02"
  IID_IDirectXVideoAccelerationService = LibC::GUID.new(0xfc51a550_u32, 0xd5e7_u16, 0x11d9_u16, StaticArray[0xaf_u8, 0x55_u8, 0x0_u8, 0x5_u8, 0x4e_u8, 0x43_u8, 0xff_u8, 0x2_u8])
  struct IDirectXVideoAccelerationService
    lpVtbl : IDirectXVideoAccelerationServiceVTbl*
  end

  struct IDirectXVideoDecoderServiceVTbl
    query_interface : Proc(IDirectXVideoDecoderService*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectXVideoDecoderService*, UInt32)
    release : Proc(IDirectXVideoDecoderService*, UInt32)
    create_surface : Proc(IDirectXVideoDecoderService*, UInt32, UInt32, UInt32, D3DFORMAT, D3DPOOL, UInt32, DXVA2_VideoRenderTargetType, IDirect3DSurface9*, LibC::HANDLE*, HRESULT)
    get_decoder_device_guids : Proc(IDirectXVideoDecoderService*, UInt32*, Guid**, HRESULT)
    get_decoder_render_targets : Proc(IDirectXVideoDecoderService*, Guid*, UInt32*, D3DFORMAT**, HRESULT)
    get_decoder_configurations : Proc(IDirectXVideoDecoderService*, Guid*, DXVA2_VideoDesc*, Void*, UInt32*, DXVA2_ConfigPictureDecode**, HRESULT)
    create_video_decoder : Proc(IDirectXVideoDecoderService*, Guid*, DXVA2_VideoDesc*, DXVA2_ConfigPictureDecode*, IDirect3DSurface9*, UInt32, IDirectXVideoDecoder*, HRESULT)
  end

  IDirectXVideoDecoderService_GUID = "fc51a551-d5e7-11d9-af55-00054e43ff02"
  IID_IDirectXVideoDecoderService = LibC::GUID.new(0xfc51a551_u32, 0xd5e7_u16, 0x11d9_u16, StaticArray[0xaf_u8, 0x55_u8, 0x0_u8, 0x5_u8, 0x4e_u8, 0x43_u8, 0xff_u8, 0x2_u8])
  struct IDirectXVideoDecoderService
    lpVtbl : IDirectXVideoDecoderServiceVTbl*
  end

  struct IDirectXVideoProcessorServiceVTbl
    query_interface : Proc(IDirectXVideoProcessorService*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectXVideoProcessorService*, UInt32)
    release : Proc(IDirectXVideoProcessorService*, UInt32)
    create_surface : Proc(IDirectXVideoProcessorService*, UInt32, UInt32, UInt32, D3DFORMAT, D3DPOOL, UInt32, DXVA2_VideoRenderTargetType, IDirect3DSurface9*, LibC::HANDLE*, HRESULT)
    register_video_processor_software_device : Proc(IDirectXVideoProcessorService*, Void*, HRESULT)
    get_video_processor_device_guids : Proc(IDirectXVideoProcessorService*, DXVA2_VideoDesc*, UInt32*, Guid**, HRESULT)
    get_video_processor_render_targets : Proc(IDirectXVideoProcessorService*, Guid*, DXVA2_VideoDesc*, UInt32*, D3DFORMAT**, HRESULT)
    get_video_processor_sub_stream_formats : Proc(IDirectXVideoProcessorService*, Guid*, DXVA2_VideoDesc*, D3DFORMAT, UInt32*, D3DFORMAT**, HRESULT)
    get_video_processor_caps : Proc(IDirectXVideoProcessorService*, Guid*, DXVA2_VideoDesc*, D3DFORMAT, DXVA2_VideoProcessorCaps*, HRESULT)
    get_proc_amp_range : Proc(IDirectXVideoProcessorService*, Guid*, DXVA2_VideoDesc*, D3DFORMAT, UInt32, DXVA2_ValueRange*, HRESULT)
    get_filter_property_range : Proc(IDirectXVideoProcessorService*, Guid*, DXVA2_VideoDesc*, D3DFORMAT, UInt32, DXVA2_ValueRange*, HRESULT)
    create_video_processor : Proc(IDirectXVideoProcessorService*, Guid*, DXVA2_VideoDesc*, D3DFORMAT, UInt32, IDirectXVideoProcessor*, HRESULT)
  end

  IDirectXVideoProcessorService_GUID = "fc51a552-d5e7-11d9-af55-00054e43ff02"
  IID_IDirectXVideoProcessorService = LibC::GUID.new(0xfc51a552_u32, 0xd5e7_u16, 0x11d9_u16, StaticArray[0xaf_u8, 0x55_u8, 0x0_u8, 0x5_u8, 0x4e_u8, 0x43_u8, 0xff_u8, 0x2_u8])
  struct IDirectXVideoProcessorService
    lpVtbl : IDirectXVideoProcessorServiceVTbl*
  end

  struct IDirectXVideoDecoderVTbl
    query_interface : Proc(IDirectXVideoDecoder*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectXVideoDecoder*, UInt32)
    release : Proc(IDirectXVideoDecoder*, UInt32)
    get_video_decoder_service : Proc(IDirectXVideoDecoder*, IDirectXVideoDecoderService*, HRESULT)
    get_creation_parameters : Proc(IDirectXVideoDecoder*, Guid*, DXVA2_VideoDesc*, DXVA2_ConfigPictureDecode*, IDirect3DSurface9**, UInt32*, HRESULT)
    get_buffer : Proc(IDirectXVideoDecoder*, DXVA2_BufferfType, Void**, UInt32*, HRESULT)
    release_buffer : Proc(IDirectXVideoDecoder*, UInt32, HRESULT)
    begin_frame : Proc(IDirectXVideoDecoder*, IDirect3DSurface9, Void*, HRESULT)
    end_frame : Proc(IDirectXVideoDecoder*, LibC::HANDLE*, HRESULT)
    execute : Proc(IDirectXVideoDecoder*, DXVA2_DecodeExecuteParams*, HRESULT)
  end

  IDirectXVideoDecoder_GUID = "f2b0810a-fd00-43c9-918c-df94e2d8ef7d"
  IID_IDirectXVideoDecoder = LibC::GUID.new(0xf2b0810a_u32, 0xfd00_u16, 0x43c9_u16, StaticArray[0x91_u8, 0x8c_u8, 0xdf_u8, 0x94_u8, 0xe2_u8, 0xd8_u8, 0xef_u8, 0x7d_u8])
  struct IDirectXVideoDecoder
    lpVtbl : IDirectXVideoDecoderVTbl*
  end

  struct IDirectXVideoProcessorVTbl
    query_interface : Proc(IDirectXVideoProcessor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectXVideoProcessor*, UInt32)
    release : Proc(IDirectXVideoProcessor*, UInt32)
    get_video_processor_service : Proc(IDirectXVideoProcessor*, IDirectXVideoProcessorService*, HRESULT)
    get_creation_parameters : Proc(IDirectXVideoProcessor*, Guid*, DXVA2_VideoDesc*, D3DFORMAT*, UInt32*, HRESULT)
    get_video_processor_caps : Proc(IDirectXVideoProcessor*, DXVA2_VideoProcessorCaps*, HRESULT)
    get_proc_amp_range : Proc(IDirectXVideoProcessor*, UInt32, DXVA2_ValueRange*, HRESULT)
    get_filter_property_range : Proc(IDirectXVideoProcessor*, UInt32, DXVA2_ValueRange*, HRESULT)
    video_process_blt : Proc(IDirectXVideoProcessor*, IDirect3DSurface9, DXVA2_VideoProcessBltParams*, DXVA2_VideoSample*, UInt32, LibC::HANDLE*, HRESULT)
  end

  IDirectXVideoProcessor_GUID = "8c3a39f0-916e-4690-804f-4c8001355d25"
  IID_IDirectXVideoProcessor = LibC::GUID.new(0x8c3a39f0_u32, 0x916e_u16, 0x4690_u16, StaticArray[0x80_u8, 0x4f_u8, 0x4c_u8, 0x80_u8, 0x1_u8, 0x35_u8, 0x5d_u8, 0x25_u8])
  struct IDirectXVideoProcessor
    lpVtbl : IDirectXVideoProcessorVTbl*
  end

  struct IDirectXVideoMemoryConfigurationVTbl
    query_interface : Proc(IDirectXVideoMemoryConfiguration*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectXVideoMemoryConfiguration*, UInt32)
    release : Proc(IDirectXVideoMemoryConfiguration*, UInt32)
    get_available_surface_type_by_index : Proc(IDirectXVideoMemoryConfiguration*, UInt32, DXVA2_SurfaceType*, HRESULT)
    set_surface_type : Proc(IDirectXVideoMemoryConfiguration*, DXVA2_SurfaceType, HRESULT)
  end

  IDirectXVideoMemoryConfiguration_GUID = "b7f916dd-db3b-49c1-84d7-e45ef99ec726"
  IID_IDirectXVideoMemoryConfiguration = LibC::GUID.new(0xb7f916dd_u32, 0xdb3b_u16, 0x49c1_u16, StaticArray[0x84_u8, 0xd7_u8, 0xe4_u8, 0x5e_u8, 0xf9_u8, 0x9e_u8, 0xc7_u8, 0x26_u8])
  struct IDirectXVideoMemoryConfiguration
    lpVtbl : IDirectXVideoMemoryConfigurationVTbl*
  end

  struct IOPMVideoOutputVTbl
    query_interface : Proc(IOPMVideoOutput*, Guid*, Void**, HRESULT)
    add_ref : Proc(IOPMVideoOutput*, UInt32)
    release : Proc(IOPMVideoOutput*, UInt32)
    start_initialization : Proc(IOPMVideoOutput*, OPM_RANDOM_NUMBER*, UInt8**, UInt32*, HRESULT)
    finish_initialization : Proc(IOPMVideoOutput*, OPM_ENCRYPTED_INITIALIZATION_PARAMETERS*, HRESULT)
    get_information : Proc(IOPMVideoOutput*, OPM_GET_INFO_PARAMETERS*, OPM_REQUESTED_INFORMATION*, HRESULT)
    copp_compatible_get_information : Proc(IOPMVideoOutput*, OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS*, OPM_REQUESTED_INFORMATION*, HRESULT)
    configure : Proc(IOPMVideoOutput*, OPM_CONFIGURE_PARAMETERS*, UInt32, UInt8*, HRESULT)
  end

  IOPMVideoOutput_GUID = "0a15159d-41c7-4456-93e1-284cd61d4e8d"
  IID_IOPMVideoOutput = LibC::GUID.new(0xa15159d_u32, 0x41c7_u16, 0x4456_u16, StaticArray[0x93_u8, 0xe1_u8, 0x28_u8, 0x4c_u8, 0xd6_u8, 0x1d_u8, 0x4e_u8, 0x8d_u8])
  struct IOPMVideoOutput
    lpVtbl : IOPMVideoOutputVTbl*
  end

  struct IMFAttributesVTbl
    query_interface : Proc(IMFAttributes*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFAttributes*, UInt32)
    release : Proc(IMFAttributes*, UInt32)
    get_item : Proc(IMFAttributes*, Guid*, PROPVARIANT*, HRESULT)
    get_item_type : Proc(IMFAttributes*, Guid*, MF_ATTRIBUTE_TYPE*, HRESULT)
    compare_item : Proc(IMFAttributes*, Guid*, PROPVARIANT*, LibC::BOOL*, HRESULT)
    compare : Proc(IMFAttributes*, IMFAttributes, MF_ATTRIBUTES_MATCH_TYPE, LibC::BOOL*, HRESULT)
    get_uint32 : Proc(IMFAttributes*, Guid*, UInt32*, HRESULT)
    get_uint64 : Proc(IMFAttributes*, Guid*, UInt64*, HRESULT)
    get_double : Proc(IMFAttributes*, Guid*, Float64*, HRESULT)
    get_guid : Proc(IMFAttributes*, Guid*, Guid*, HRESULT)
    get_string_length : Proc(IMFAttributes*, Guid*, UInt32*, HRESULT)
    get_string : Proc(IMFAttributes*, Guid*, Char*, UInt32, UInt32*, HRESULT)
    get_allocated_string : Proc(IMFAttributes*, Guid*, LibC::LPWSTR*, UInt32*, HRESULT)
    get_blob_size : Proc(IMFAttributes*, Guid*, UInt32*, HRESULT)
    get_blob : Proc(IMFAttributes*, Guid*, UInt8*, UInt32, UInt32*, HRESULT)
    get_allocated_blob : Proc(IMFAttributes*, Guid*, UInt8**, UInt32*, HRESULT)
    get_unknown : Proc(IMFAttributes*, Guid*, Guid*, Void**, HRESULT)
    set_item : Proc(IMFAttributes*, Guid*, PROPVARIANT*, HRESULT)
    delete_item : Proc(IMFAttributes*, Guid*, HRESULT)
    delete_all_items : Proc(IMFAttributes*, HRESULT)
    set_uint32 : Proc(IMFAttributes*, Guid*, UInt32, HRESULT)
    set_uint64 : Proc(IMFAttributes*, Guid*, UInt64, HRESULT)
    set_double : Proc(IMFAttributes*, Guid*, Float64, HRESULT)
    set_guid : Proc(IMFAttributes*, Guid*, Guid*, HRESULT)
    set_string : Proc(IMFAttributes*, Guid*, LibC::LPWSTR, HRESULT)
    set_blob : Proc(IMFAttributes*, Guid*, UInt8*, UInt32, HRESULT)
    set_unknown : Proc(IMFAttributes*, Guid*, IUnknown, HRESULT)
    lock_store : Proc(IMFAttributes*, HRESULT)
    unlock_store : Proc(IMFAttributes*, HRESULT)
    get_count : Proc(IMFAttributes*, UInt32*, HRESULT)
    get_item_by_index : Proc(IMFAttributes*, UInt32, Guid*, PROPVARIANT*, HRESULT)
    copy_all_items : Proc(IMFAttributes*, IMFAttributes, HRESULT)
  end

  IMFAttributes_GUID = "2cd2d921-c447-44a7-a13c-4adabfc247e3"
  IID_IMFAttributes = LibC::GUID.new(0x2cd2d921_u32, 0xc447_u16, 0x44a7_u16, StaticArray[0xa1_u8, 0x3c_u8, 0x4a_u8, 0xda_u8, 0xbf_u8, 0xc2_u8, 0x47_u8, 0xe3_u8])
  struct IMFAttributes
    lpVtbl : IMFAttributesVTbl*
  end

  struct IMFMediaBufferVTbl
    query_interface : Proc(IMFMediaBuffer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaBuffer*, UInt32)
    release : Proc(IMFMediaBuffer*, UInt32)
    lock : Proc(IMFMediaBuffer*, UInt8**, UInt32*, UInt32*, HRESULT)
    unlock : Proc(IMFMediaBuffer*, HRESULT)
    get_current_length : Proc(IMFMediaBuffer*, UInt32*, HRESULT)
    set_current_length : Proc(IMFMediaBuffer*, UInt32, HRESULT)
    get_max_length : Proc(IMFMediaBuffer*, UInt32*, HRESULT)
  end

  IMFMediaBuffer_GUID = "045fa593-8799-42b8-bc8d-8968c6453507"
  IID_IMFMediaBuffer = LibC::GUID.new(0x45fa593_u32, 0x8799_u16, 0x42b8_u16, StaticArray[0xbc_u8, 0x8d_u8, 0x89_u8, 0x68_u8, 0xc6_u8, 0x45_u8, 0x35_u8, 0x7_u8])
  struct IMFMediaBuffer
    lpVtbl : IMFMediaBufferVTbl*
  end

  struct IMFSampleVTbl
    query_interface : Proc(IMFSample*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSample*, UInt32)
    release : Proc(IMFSample*, UInt32)
    get_item : Proc(IMFSample*, Guid*, PROPVARIANT*, HRESULT)
    get_item_type : Proc(IMFSample*, Guid*, MF_ATTRIBUTE_TYPE*, HRESULT)
    compare_item : Proc(IMFSample*, Guid*, PROPVARIANT*, LibC::BOOL*, HRESULT)
    compare : Proc(IMFSample*, IMFAttributes, MF_ATTRIBUTES_MATCH_TYPE, LibC::BOOL*, HRESULT)
    get_uint32 : Proc(IMFSample*, Guid*, UInt32*, HRESULT)
    get_uint64 : Proc(IMFSample*, Guid*, UInt64*, HRESULT)
    get_double : Proc(IMFSample*, Guid*, Float64*, HRESULT)
    get_guid : Proc(IMFSample*, Guid*, Guid*, HRESULT)
    get_string_length : Proc(IMFSample*, Guid*, UInt32*, HRESULT)
    get_string : Proc(IMFSample*, Guid*, Char*, UInt32, UInt32*, HRESULT)
    get_allocated_string : Proc(IMFSample*, Guid*, LibC::LPWSTR*, UInt32*, HRESULT)
    get_blob_size : Proc(IMFSample*, Guid*, UInt32*, HRESULT)
    get_blob : Proc(IMFSample*, Guid*, UInt8*, UInt32, UInt32*, HRESULT)
    get_allocated_blob : Proc(IMFSample*, Guid*, UInt8**, UInt32*, HRESULT)
    get_unknown : Proc(IMFSample*, Guid*, Guid*, Void**, HRESULT)
    set_item : Proc(IMFSample*, Guid*, PROPVARIANT*, HRESULT)
    delete_item : Proc(IMFSample*, Guid*, HRESULT)
    delete_all_items : Proc(IMFSample*, HRESULT)
    set_uint32 : Proc(IMFSample*, Guid*, UInt32, HRESULT)
    set_uint64 : Proc(IMFSample*, Guid*, UInt64, HRESULT)
    set_double : Proc(IMFSample*, Guid*, Float64, HRESULT)
    set_guid : Proc(IMFSample*, Guid*, Guid*, HRESULT)
    set_string : Proc(IMFSample*, Guid*, LibC::LPWSTR, HRESULT)
    set_blob : Proc(IMFSample*, Guid*, UInt8*, UInt32, HRESULT)
    set_unknown : Proc(IMFSample*, Guid*, IUnknown, HRESULT)
    lock_store : Proc(IMFSample*, HRESULT)
    unlock_store : Proc(IMFSample*, HRESULT)
    get_count : Proc(IMFSample*, UInt32*, HRESULT)
    get_item_by_index : Proc(IMFSample*, UInt32, Guid*, PROPVARIANT*, HRESULT)
    copy_all_items : Proc(IMFSample*, IMFAttributes, HRESULT)
    get_sample_flags : Proc(IMFSample*, UInt32*, HRESULT)
    set_sample_flags : Proc(IMFSample*, UInt32, HRESULT)
    get_sample_time : Proc(IMFSample*, Int64*, HRESULT)
    set_sample_time : Proc(IMFSample*, Int64, HRESULT)
    get_sample_duration : Proc(IMFSample*, Int64*, HRESULT)
    set_sample_duration : Proc(IMFSample*, Int64, HRESULT)
    get_buffer_count : Proc(IMFSample*, UInt32*, HRESULT)
    get_buffer_by_index : Proc(IMFSample*, UInt32, IMFMediaBuffer*, HRESULT)
    convert_to_contiguous_buffer : Proc(IMFSample*, IMFMediaBuffer*, HRESULT)
    add_buffer : Proc(IMFSample*, IMFMediaBuffer, HRESULT)
    remove_buffer_by_index : Proc(IMFSample*, UInt32, HRESULT)
    remove_all_buffers : Proc(IMFSample*, HRESULT)
    get_total_length : Proc(IMFSample*, UInt32*, HRESULT)
    copy_to_buffer : Proc(IMFSample*, IMFMediaBuffer, HRESULT)
  end

  IMFSample_GUID = "c40a00f2-b93a-4d80-ae8c-5a1c634f58e4"
  IID_IMFSample = LibC::GUID.new(0xc40a00f2_u32, 0xb93a_u16, 0x4d80_u16, StaticArray[0xae_u8, 0x8c_u8, 0x5a_u8, 0x1c_u8, 0x63_u8, 0x4f_u8, 0x58_u8, 0xe4_u8])
  struct IMFSample
    lpVtbl : IMFSampleVTbl*
  end

  struct IMF2DBufferVTbl
    query_interface : Proc(IMF2DBuffer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMF2DBuffer*, UInt32)
    release : Proc(IMF2DBuffer*, UInt32)
    lock2_d : Proc(IMF2DBuffer*, UInt8**, Int32*, HRESULT)
    unlock2_d : Proc(IMF2DBuffer*, HRESULT)
    get_scanline0_and_pitch : Proc(IMF2DBuffer*, UInt8**, Int32*, HRESULT)
    is_contiguous_format : Proc(IMF2DBuffer*, LibC::BOOL*, HRESULT)
    get_contiguous_length : Proc(IMF2DBuffer*, UInt32*, HRESULT)
    contiguous_copy_to : Proc(IMF2DBuffer*, UInt8*, UInt32, HRESULT)
    contiguous_copy_from : Proc(IMF2DBuffer*, UInt8*, UInt32, HRESULT)
  end

  IMF2DBuffer_GUID = "7dc9d5f9-9ed9-44ec-9bbf-0600bb589fbb"
  IID_IMF2DBuffer = LibC::GUID.new(0x7dc9d5f9_u32, 0x9ed9_u16, 0x44ec_u16, StaticArray[0x9b_u8, 0xbf_u8, 0x6_u8, 0x0_u8, 0xbb_u8, 0x58_u8, 0x9f_u8, 0xbb_u8])
  struct IMF2DBuffer
    lpVtbl : IMF2DBufferVTbl*
  end

  struct IMF2DBuffer2VTbl
    query_interface : Proc(IMF2DBuffer2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMF2DBuffer2*, UInt32)
    release : Proc(IMF2DBuffer2*, UInt32)
    lock2_d : Proc(IMF2DBuffer2*, UInt8**, Int32*, HRESULT)
    unlock2_d : Proc(IMF2DBuffer2*, HRESULT)
    get_scanline0_and_pitch : Proc(IMF2DBuffer2*, UInt8**, Int32*, HRESULT)
    is_contiguous_format : Proc(IMF2DBuffer2*, LibC::BOOL*, HRESULT)
    get_contiguous_length : Proc(IMF2DBuffer2*, UInt32*, HRESULT)
    contiguous_copy_to : Proc(IMF2DBuffer2*, UInt8*, UInt32, HRESULT)
    contiguous_copy_from : Proc(IMF2DBuffer2*, UInt8*, UInt32, HRESULT)
    lock2_d_size : Proc(IMF2DBuffer2*, MF2DBuffer_LockFlags, UInt8**, Int32*, UInt8**, UInt32*, HRESULT)
    copy2_d_to : Proc(IMF2DBuffer2*, IMF2DBuffer2, HRESULT)
  end

  IMF2DBuffer2_GUID = "33ae5ea6-4316-436f-8ddd-d73d22f829ec"
  IID_IMF2DBuffer2 = LibC::GUID.new(0x33ae5ea6_u32, 0x4316_u16, 0x436f_u16, StaticArray[0x8d_u8, 0xdd_u8, 0xd7_u8, 0x3d_u8, 0x22_u8, 0xf8_u8, 0x29_u8, 0xec_u8])
  struct IMF2DBuffer2
    lpVtbl : IMF2DBuffer2VTbl*
  end

  struct IMFDXGIBufferVTbl
    query_interface : Proc(IMFDXGIBuffer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFDXGIBuffer*, UInt32)
    release : Proc(IMFDXGIBuffer*, UInt32)
    get_resource : Proc(IMFDXGIBuffer*, Guid*, Void**, HRESULT)
    get_subresource_index : Proc(IMFDXGIBuffer*, UInt32*, HRESULT)
    get_unknown : Proc(IMFDXGIBuffer*, Guid*, Guid*, Void**, HRESULT)
    set_unknown : Proc(IMFDXGIBuffer*, Guid*, IUnknown, HRESULT)
  end

  IMFDXGIBuffer_GUID = "e7174cfa-1c9e-48b1-8866-626226bfc258"
  IID_IMFDXGIBuffer = LibC::GUID.new(0xe7174cfa_u32, 0x1c9e_u16, 0x48b1_u16, StaticArray[0x88_u8, 0x66_u8, 0x62_u8, 0x62_u8, 0x26_u8, 0xbf_u8, 0xc2_u8, 0x58_u8])
  struct IMFDXGIBuffer
    lpVtbl : IMFDXGIBufferVTbl*
  end

  struct IMFMediaTypeVTbl
    query_interface : Proc(IMFMediaType*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaType*, UInt32)
    release : Proc(IMFMediaType*, UInt32)
    get_item : Proc(IMFMediaType*, Guid*, PROPVARIANT*, HRESULT)
    get_item_type : Proc(IMFMediaType*, Guid*, MF_ATTRIBUTE_TYPE*, HRESULT)
    compare_item : Proc(IMFMediaType*, Guid*, PROPVARIANT*, LibC::BOOL*, HRESULT)
    compare : Proc(IMFMediaType*, IMFAttributes, MF_ATTRIBUTES_MATCH_TYPE, LibC::BOOL*, HRESULT)
    get_uint32 : Proc(IMFMediaType*, Guid*, UInt32*, HRESULT)
    get_uint64 : Proc(IMFMediaType*, Guid*, UInt64*, HRESULT)
    get_double : Proc(IMFMediaType*, Guid*, Float64*, HRESULT)
    get_guid : Proc(IMFMediaType*, Guid*, Guid*, HRESULT)
    get_string_length : Proc(IMFMediaType*, Guid*, UInt32*, HRESULT)
    get_string : Proc(IMFMediaType*, Guid*, Char*, UInt32, UInt32*, HRESULT)
    get_allocated_string : Proc(IMFMediaType*, Guid*, LibC::LPWSTR*, UInt32*, HRESULT)
    get_blob_size : Proc(IMFMediaType*, Guid*, UInt32*, HRESULT)
    get_blob : Proc(IMFMediaType*, Guid*, UInt8*, UInt32, UInt32*, HRESULT)
    get_allocated_blob : Proc(IMFMediaType*, Guid*, UInt8**, UInt32*, HRESULT)
    get_unknown : Proc(IMFMediaType*, Guid*, Guid*, Void**, HRESULT)
    set_item : Proc(IMFMediaType*, Guid*, PROPVARIANT*, HRESULT)
    delete_item : Proc(IMFMediaType*, Guid*, HRESULT)
    delete_all_items : Proc(IMFMediaType*, HRESULT)
    set_uint32 : Proc(IMFMediaType*, Guid*, UInt32, HRESULT)
    set_uint64 : Proc(IMFMediaType*, Guid*, UInt64, HRESULT)
    set_double : Proc(IMFMediaType*, Guid*, Float64, HRESULT)
    set_guid : Proc(IMFMediaType*, Guid*, Guid*, HRESULT)
    set_string : Proc(IMFMediaType*, Guid*, LibC::LPWSTR, HRESULT)
    set_blob : Proc(IMFMediaType*, Guid*, UInt8*, UInt32, HRESULT)
    set_unknown : Proc(IMFMediaType*, Guid*, IUnknown, HRESULT)
    lock_store : Proc(IMFMediaType*, HRESULT)
    unlock_store : Proc(IMFMediaType*, HRESULT)
    get_count : Proc(IMFMediaType*, UInt32*, HRESULT)
    get_item_by_index : Proc(IMFMediaType*, UInt32, Guid*, PROPVARIANT*, HRESULT)
    copy_all_items : Proc(IMFMediaType*, IMFAttributes, HRESULT)
    get_major_type : Proc(IMFMediaType*, Guid*, HRESULT)
    is_compressed_format : Proc(IMFMediaType*, LibC::BOOL*, HRESULT)
    is_equal : Proc(IMFMediaType*, IMFMediaType, UInt32*, HRESULT)
    get_representation : Proc(IMFMediaType*, Guid, Void**, HRESULT)
    free_representation : Proc(IMFMediaType*, Guid, Void*, HRESULT)
  end

  IMFMediaType_GUID = "44ae0fa8-ea31-4109-8d2e-4cae4997c555"
  IID_IMFMediaType = LibC::GUID.new(0x44ae0fa8_u32, 0xea31_u16, 0x4109_u16, StaticArray[0x8d_u8, 0x2e_u8, 0x4c_u8, 0xae_u8, 0x49_u8, 0x97_u8, 0xc5_u8, 0x55_u8])
  struct IMFMediaType
    lpVtbl : IMFMediaTypeVTbl*
  end

  struct IMFAudioMediaTypeVTbl
    query_interface : Proc(IMFAudioMediaType*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFAudioMediaType*, UInt32)
    release : Proc(IMFAudioMediaType*, UInt32)
    get_item : Proc(IMFAudioMediaType*, Guid*, PROPVARIANT*, HRESULT)
    get_item_type : Proc(IMFAudioMediaType*, Guid*, MF_ATTRIBUTE_TYPE*, HRESULT)
    compare_item : Proc(IMFAudioMediaType*, Guid*, PROPVARIANT*, LibC::BOOL*, HRESULT)
    compare : Proc(IMFAudioMediaType*, IMFAttributes, MF_ATTRIBUTES_MATCH_TYPE, LibC::BOOL*, HRESULT)
    get_uint32 : Proc(IMFAudioMediaType*, Guid*, UInt32*, HRESULT)
    get_uint64 : Proc(IMFAudioMediaType*, Guid*, UInt64*, HRESULT)
    get_double : Proc(IMFAudioMediaType*, Guid*, Float64*, HRESULT)
    get_guid : Proc(IMFAudioMediaType*, Guid*, Guid*, HRESULT)
    get_string_length : Proc(IMFAudioMediaType*, Guid*, UInt32*, HRESULT)
    get_string : Proc(IMFAudioMediaType*, Guid*, Char*, UInt32, UInt32*, HRESULT)
    get_allocated_string : Proc(IMFAudioMediaType*, Guid*, LibC::LPWSTR*, UInt32*, HRESULT)
    get_blob_size : Proc(IMFAudioMediaType*, Guid*, UInt32*, HRESULT)
    get_blob : Proc(IMFAudioMediaType*, Guid*, UInt8*, UInt32, UInt32*, HRESULT)
    get_allocated_blob : Proc(IMFAudioMediaType*, Guid*, UInt8**, UInt32*, HRESULT)
    get_unknown : Proc(IMFAudioMediaType*, Guid*, Guid*, Void**, HRESULT)
    set_item : Proc(IMFAudioMediaType*, Guid*, PROPVARIANT*, HRESULT)
    delete_item : Proc(IMFAudioMediaType*, Guid*, HRESULT)
    delete_all_items : Proc(IMFAudioMediaType*, HRESULT)
    set_uint32 : Proc(IMFAudioMediaType*, Guid*, UInt32, HRESULT)
    set_uint64 : Proc(IMFAudioMediaType*, Guid*, UInt64, HRESULT)
    set_double : Proc(IMFAudioMediaType*, Guid*, Float64, HRESULT)
    set_guid : Proc(IMFAudioMediaType*, Guid*, Guid*, HRESULT)
    set_string : Proc(IMFAudioMediaType*, Guid*, LibC::LPWSTR, HRESULT)
    set_blob : Proc(IMFAudioMediaType*, Guid*, UInt8*, UInt32, HRESULT)
    set_unknown : Proc(IMFAudioMediaType*, Guid*, IUnknown, HRESULT)
    lock_store : Proc(IMFAudioMediaType*, HRESULT)
    unlock_store : Proc(IMFAudioMediaType*, HRESULT)
    get_count : Proc(IMFAudioMediaType*, UInt32*, HRESULT)
    get_item_by_index : Proc(IMFAudioMediaType*, UInt32, Guid*, PROPVARIANT*, HRESULT)
    copy_all_items : Proc(IMFAudioMediaType*, IMFAttributes, HRESULT)
    get_major_type : Proc(IMFAudioMediaType*, Guid*, HRESULT)
    is_compressed_format : Proc(IMFAudioMediaType*, LibC::BOOL*, HRESULT)
    is_equal : Proc(IMFAudioMediaType*, IMFMediaType, UInt32*, HRESULT)
    get_representation : Proc(IMFAudioMediaType*, Guid, Void**, HRESULT)
    free_representation : Proc(IMFAudioMediaType*, Guid, Void*, HRESULT)
    get_audio_format : Proc(IMFAudioMediaType*, WAVEFORMATEX**)
  end

  IMFAudioMediaType_GUID = "26a0adc3-ce26-4672-9304-69552edd3faf"
  IID_IMFAudioMediaType = LibC::GUID.new(0x26a0adc3_u32, 0xce26_u16, 0x4672_u16, StaticArray[0x93_u8, 0x4_u8, 0x69_u8, 0x55_u8, 0x2e_u8, 0xdd_u8, 0x3f_u8, 0xaf_u8])
  struct IMFAudioMediaType
    lpVtbl : IMFAudioMediaTypeVTbl*
  end

  struct IMFVideoMediaTypeVTbl
    query_interface : Proc(IMFVideoMediaType*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFVideoMediaType*, UInt32)
    release : Proc(IMFVideoMediaType*, UInt32)
    get_item : Proc(IMFVideoMediaType*, Guid*, PROPVARIANT*, HRESULT)
    get_item_type : Proc(IMFVideoMediaType*, Guid*, MF_ATTRIBUTE_TYPE*, HRESULT)
    compare_item : Proc(IMFVideoMediaType*, Guid*, PROPVARIANT*, LibC::BOOL*, HRESULT)
    compare : Proc(IMFVideoMediaType*, IMFAttributes, MF_ATTRIBUTES_MATCH_TYPE, LibC::BOOL*, HRESULT)
    get_uint32 : Proc(IMFVideoMediaType*, Guid*, UInt32*, HRESULT)
    get_uint64 : Proc(IMFVideoMediaType*, Guid*, UInt64*, HRESULT)
    get_double : Proc(IMFVideoMediaType*, Guid*, Float64*, HRESULT)
    get_guid : Proc(IMFVideoMediaType*, Guid*, Guid*, HRESULT)
    get_string_length : Proc(IMFVideoMediaType*, Guid*, UInt32*, HRESULT)
    get_string : Proc(IMFVideoMediaType*, Guid*, Char*, UInt32, UInt32*, HRESULT)
    get_allocated_string : Proc(IMFVideoMediaType*, Guid*, LibC::LPWSTR*, UInt32*, HRESULT)
    get_blob_size : Proc(IMFVideoMediaType*, Guid*, UInt32*, HRESULT)
    get_blob : Proc(IMFVideoMediaType*, Guid*, UInt8*, UInt32, UInt32*, HRESULT)
    get_allocated_blob : Proc(IMFVideoMediaType*, Guid*, UInt8**, UInt32*, HRESULT)
    get_unknown : Proc(IMFVideoMediaType*, Guid*, Guid*, Void**, HRESULT)
    set_item : Proc(IMFVideoMediaType*, Guid*, PROPVARIANT*, HRESULT)
    delete_item : Proc(IMFVideoMediaType*, Guid*, HRESULT)
    delete_all_items : Proc(IMFVideoMediaType*, HRESULT)
    set_uint32 : Proc(IMFVideoMediaType*, Guid*, UInt32, HRESULT)
    set_uint64 : Proc(IMFVideoMediaType*, Guid*, UInt64, HRESULT)
    set_double : Proc(IMFVideoMediaType*, Guid*, Float64, HRESULT)
    set_guid : Proc(IMFVideoMediaType*, Guid*, Guid*, HRESULT)
    set_string : Proc(IMFVideoMediaType*, Guid*, LibC::LPWSTR, HRESULT)
    set_blob : Proc(IMFVideoMediaType*, Guid*, UInt8*, UInt32, HRESULT)
    set_unknown : Proc(IMFVideoMediaType*, Guid*, IUnknown, HRESULT)
    lock_store : Proc(IMFVideoMediaType*, HRESULT)
    unlock_store : Proc(IMFVideoMediaType*, HRESULT)
    get_count : Proc(IMFVideoMediaType*, UInt32*, HRESULT)
    get_item_by_index : Proc(IMFVideoMediaType*, UInt32, Guid*, PROPVARIANT*, HRESULT)
    copy_all_items : Proc(IMFVideoMediaType*, IMFAttributes, HRESULT)
    get_major_type : Proc(IMFVideoMediaType*, Guid*, HRESULT)
    is_compressed_format : Proc(IMFVideoMediaType*, LibC::BOOL*, HRESULT)
    is_equal : Proc(IMFVideoMediaType*, IMFMediaType, UInt32*, HRESULT)
    get_representation : Proc(IMFVideoMediaType*, Guid, Void**, HRESULT)
    free_representation : Proc(IMFVideoMediaType*, Guid, Void*, HRESULT)
    get_video_format : Proc(IMFVideoMediaType*, MFVIDEOFORMAT**)
    get_video_representation : Proc(IMFVideoMediaType*, Guid, Void**, Int32, HRESULT)
  end

  IMFVideoMediaType_GUID = "b99f381f-a8f9-47a2-a5af-ca3a225a3890"
  IID_IMFVideoMediaType = LibC::GUID.new(0xb99f381f_u32, 0xa8f9_u16, 0x47a2_u16, StaticArray[0xa5_u8, 0xaf_u8, 0xca_u8, 0x3a_u8, 0x22_u8, 0x5a_u8, 0x38_u8, 0x90_u8])
  struct IMFVideoMediaType
    lpVtbl : IMFVideoMediaTypeVTbl*
  end

  struct IMFAsyncResultVTbl
    query_interface : Proc(IMFAsyncResult*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFAsyncResult*, UInt32)
    release : Proc(IMFAsyncResult*, UInt32)
    get_state : Proc(IMFAsyncResult*, IUnknown*, HRESULT)
    get_status : Proc(IMFAsyncResult*, HRESULT)
    set_status : Proc(IMFAsyncResult*, HRESULT, HRESULT)
    get_object : Proc(IMFAsyncResult*, IUnknown*, HRESULT)
    get_state_no_add_ref : Proc(IMFAsyncResult*, IUnknown)
  end

  IMFAsyncResult_GUID = "ac6b7889-0740-4d51-8619-905994a55cc6"
  IID_IMFAsyncResult = LibC::GUID.new(0xac6b7889_u32, 0x740_u16, 0x4d51_u16, StaticArray[0x86_u8, 0x19_u8, 0x90_u8, 0x59_u8, 0x94_u8, 0xa5_u8, 0x5c_u8, 0xc6_u8])
  struct IMFAsyncResult
    lpVtbl : IMFAsyncResultVTbl*
  end

  struct IMFAsyncCallbackVTbl
    query_interface : Proc(IMFAsyncCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFAsyncCallback*, UInt32)
    release : Proc(IMFAsyncCallback*, UInt32)
    get_parameters : Proc(IMFAsyncCallback*, UInt32*, UInt32*, HRESULT)
    invoke : Proc(IMFAsyncCallback*, IMFAsyncResult, HRESULT)
  end

  IMFAsyncCallback_GUID = "a27003cf-2354-4f2a-8d6a-ab7cff15437e"
  IID_IMFAsyncCallback = LibC::GUID.new(0xa27003cf_u32, 0x2354_u16, 0x4f2a_u16, StaticArray[0x8d_u8, 0x6a_u8, 0xab_u8, 0x7c_u8, 0xff_u8, 0x15_u8, 0x43_u8, 0x7e_u8])
  struct IMFAsyncCallback
    lpVtbl : IMFAsyncCallbackVTbl*
  end

  struct IMFAsyncCallbackLoggingVTbl
    query_interface : Proc(IMFAsyncCallbackLogging*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFAsyncCallbackLogging*, UInt32)
    release : Proc(IMFAsyncCallbackLogging*, UInt32)
    get_parameters : Proc(IMFAsyncCallbackLogging*, UInt32*, UInt32*, HRESULT)
    invoke : Proc(IMFAsyncCallbackLogging*, IMFAsyncResult, HRESULT)
    get_object_pointer : Proc(IMFAsyncCallbackLogging*, Void**)
    get_object_tag : Proc(IMFAsyncCallbackLogging*, UInt32)
  end

  IMFAsyncCallbackLogging_GUID = "c7a4dca1-f5f0-47b6-b92b-bf0106d25791"
  IID_IMFAsyncCallbackLogging = LibC::GUID.new(0xc7a4dca1_u32, 0xf5f0_u16, 0x47b6_u16, StaticArray[0xb9_u8, 0x2b_u8, 0xbf_u8, 0x1_u8, 0x6_u8, 0xd2_u8, 0x57_u8, 0x91_u8])
  struct IMFAsyncCallbackLogging
    lpVtbl : IMFAsyncCallbackLoggingVTbl*
  end

  struct IMFMediaEventVTbl
    query_interface : Proc(IMFMediaEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaEvent*, UInt32)
    release : Proc(IMFMediaEvent*, UInt32)
    get_item : Proc(IMFMediaEvent*, Guid*, PROPVARIANT*, HRESULT)
    get_item_type : Proc(IMFMediaEvent*, Guid*, MF_ATTRIBUTE_TYPE*, HRESULT)
    compare_item : Proc(IMFMediaEvent*, Guid*, PROPVARIANT*, LibC::BOOL*, HRESULT)
    compare : Proc(IMFMediaEvent*, IMFAttributes, MF_ATTRIBUTES_MATCH_TYPE, LibC::BOOL*, HRESULT)
    get_uint32 : Proc(IMFMediaEvent*, Guid*, UInt32*, HRESULT)
    get_uint64 : Proc(IMFMediaEvent*, Guid*, UInt64*, HRESULT)
    get_double : Proc(IMFMediaEvent*, Guid*, Float64*, HRESULT)
    get_guid : Proc(IMFMediaEvent*, Guid*, Guid*, HRESULT)
    get_string_length : Proc(IMFMediaEvent*, Guid*, UInt32*, HRESULT)
    get_string : Proc(IMFMediaEvent*, Guid*, Char*, UInt32, UInt32*, HRESULT)
    get_allocated_string : Proc(IMFMediaEvent*, Guid*, LibC::LPWSTR*, UInt32*, HRESULT)
    get_blob_size : Proc(IMFMediaEvent*, Guid*, UInt32*, HRESULT)
    get_blob : Proc(IMFMediaEvent*, Guid*, UInt8*, UInt32, UInt32*, HRESULT)
    get_allocated_blob : Proc(IMFMediaEvent*, Guid*, UInt8**, UInt32*, HRESULT)
    get_unknown : Proc(IMFMediaEvent*, Guid*, Guid*, Void**, HRESULT)
    set_item : Proc(IMFMediaEvent*, Guid*, PROPVARIANT*, HRESULT)
    delete_item : Proc(IMFMediaEvent*, Guid*, HRESULT)
    delete_all_items : Proc(IMFMediaEvent*, HRESULT)
    set_uint32 : Proc(IMFMediaEvent*, Guid*, UInt32, HRESULT)
    set_uint64 : Proc(IMFMediaEvent*, Guid*, UInt64, HRESULT)
    set_double : Proc(IMFMediaEvent*, Guid*, Float64, HRESULT)
    set_guid : Proc(IMFMediaEvent*, Guid*, Guid*, HRESULT)
    set_string : Proc(IMFMediaEvent*, Guid*, LibC::LPWSTR, HRESULT)
    set_blob : Proc(IMFMediaEvent*, Guid*, UInt8*, UInt32, HRESULT)
    set_unknown : Proc(IMFMediaEvent*, Guid*, IUnknown, HRESULT)
    lock_store : Proc(IMFMediaEvent*, HRESULT)
    unlock_store : Proc(IMFMediaEvent*, HRESULT)
    get_count : Proc(IMFMediaEvent*, UInt32*, HRESULT)
    get_item_by_index : Proc(IMFMediaEvent*, UInt32, Guid*, PROPVARIANT*, HRESULT)
    copy_all_items : Proc(IMFMediaEvent*, IMFAttributes, HRESULT)
    get_type : Proc(IMFMediaEvent*, UInt32*, HRESULT)
    get_extended_type : Proc(IMFMediaEvent*, Guid*, HRESULT)
    get_status : Proc(IMFMediaEvent*, HRESULT*, HRESULT)
    get_value : Proc(IMFMediaEvent*, PROPVARIANT*, HRESULT)
  end

  IMFMediaEvent_GUID = "df598932-f10c-4e39-bba2-c308f101daa3"
  IID_IMFMediaEvent = LibC::GUID.new(0xdf598932_u32, 0xf10c_u16, 0x4e39_u16, StaticArray[0xbb_u8, 0xa2_u8, 0xc3_u8, 0x8_u8, 0xf1_u8, 0x1_u8, 0xda_u8, 0xa3_u8])
  struct IMFMediaEvent
    lpVtbl : IMFMediaEventVTbl*
  end

  struct IMFMediaEventGeneratorVTbl
    query_interface : Proc(IMFMediaEventGenerator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaEventGenerator*, UInt32)
    release : Proc(IMFMediaEventGenerator*, UInt32)
    get_event : Proc(IMFMediaEventGenerator*, MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, IMFMediaEvent*, HRESULT)
    begin_get_event : Proc(IMFMediaEventGenerator*, IMFAsyncCallback, IUnknown, HRESULT)
    end_get_event : Proc(IMFMediaEventGenerator*, IMFAsyncResult, IMFMediaEvent*, HRESULT)
    queue_event : Proc(IMFMediaEventGenerator*, UInt32, Guid*, HRESULT, PROPVARIANT*, HRESULT)
  end

  IMFMediaEventGenerator_GUID = "2cd0bd52-bcd5-4b89-b62c-eadc0c031e7d"
  IID_IMFMediaEventGenerator = LibC::GUID.new(0x2cd0bd52_u32, 0xbcd5_u16, 0x4b89_u16, StaticArray[0xb6_u8, 0x2c_u8, 0xea_u8, 0xdc_u8, 0xc_u8, 0x3_u8, 0x1e_u8, 0x7d_u8])
  struct IMFMediaEventGenerator
    lpVtbl : IMFMediaEventGeneratorVTbl*
  end

  struct IMFRemoteAsyncCallbackVTbl
    query_interface : Proc(IMFRemoteAsyncCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFRemoteAsyncCallback*, UInt32)
    release : Proc(IMFRemoteAsyncCallback*, UInt32)
    invoke : Proc(IMFRemoteAsyncCallback*, HRESULT, IUnknown, HRESULT)
  end

  IMFRemoteAsyncCallback_GUID = "a27003d0-2354-4f2a-8d6a-ab7cff15437e"
  IID_IMFRemoteAsyncCallback = LibC::GUID.new(0xa27003d0_u32, 0x2354_u16, 0x4f2a_u16, StaticArray[0x8d_u8, 0x6a_u8, 0xab_u8, 0x7c_u8, 0xff_u8, 0x15_u8, 0x43_u8, 0x7e_u8])
  struct IMFRemoteAsyncCallback
    lpVtbl : IMFRemoteAsyncCallbackVTbl*
  end

  struct IMFByteStreamVTbl
    query_interface : Proc(IMFByteStream*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFByteStream*, UInt32)
    release : Proc(IMFByteStream*, UInt32)
    get_capabilities : Proc(IMFByteStream*, UInt32*, HRESULT)
    get_length : Proc(IMFByteStream*, UInt64*, HRESULT)
    set_length : Proc(IMFByteStream*, UInt64, HRESULT)
    get_current_position : Proc(IMFByteStream*, UInt64*, HRESULT)
    set_current_position : Proc(IMFByteStream*, UInt64, HRESULT)
    is_end_of_stream : Proc(IMFByteStream*, LibC::BOOL*, HRESULT)
    read : Proc(IMFByteStream*, UInt8*, UInt32, UInt32*, HRESULT)
    begin_read : Proc(IMFByteStream*, UInt8*, UInt32, IMFAsyncCallback, IUnknown, HRESULT)
    end_read : Proc(IMFByteStream*, IMFAsyncResult, UInt32*, HRESULT)
    write : Proc(IMFByteStream*, UInt8*, UInt32, UInt32*, HRESULT)
    begin_write : Proc(IMFByteStream*, UInt8*, UInt32, IMFAsyncCallback, IUnknown, HRESULT)
    end_write : Proc(IMFByteStream*, IMFAsyncResult, UInt32*, HRESULT)
    seek : Proc(IMFByteStream*, MFBYTESTREAM_SEEK_ORIGIN, Int64, UInt32, UInt64*, HRESULT)
    flush : Proc(IMFByteStream*, HRESULT)
    close : Proc(IMFByteStream*, HRESULT)
  end

  IMFByteStream_GUID = "ad4c1b00-4bf7-422f-9175-756693d9130d"
  IID_IMFByteStream = LibC::GUID.new(0xad4c1b00_u32, 0x4bf7_u16, 0x422f_u16, StaticArray[0x91_u8, 0x75_u8, 0x75_u8, 0x66_u8, 0x93_u8, 0xd9_u8, 0x13_u8, 0xd_u8])
  struct IMFByteStream
    lpVtbl : IMFByteStreamVTbl*
  end

  struct IMFByteStreamProxyClassFactoryVTbl
    query_interface : Proc(IMFByteStreamProxyClassFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFByteStreamProxyClassFactory*, UInt32)
    release : Proc(IMFByteStreamProxyClassFactory*, UInt32)
    create_byte_stream_proxy : Proc(IMFByteStreamProxyClassFactory*, IMFByteStream, IMFAttributes, Guid*, Void**, HRESULT)
  end

  IMFByteStreamProxyClassFactory_GUID = "a6b43f84-5c0a-42e8-a44d-b1857a76992f"
  IID_IMFByteStreamProxyClassFactory = LibC::GUID.new(0xa6b43f84_u32, 0x5c0a_u16, 0x42e8_u16, StaticArray[0xa4_u8, 0x4d_u8, 0xb1_u8, 0x85_u8, 0x7a_u8, 0x76_u8, 0x99_u8, 0x2f_u8])
  struct IMFByteStreamProxyClassFactory
    lpVtbl : IMFByteStreamProxyClassFactoryVTbl*
  end

  struct IMFSampleOutputStreamVTbl
    query_interface : Proc(IMFSampleOutputStream*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSampleOutputStream*, UInt32)
    release : Proc(IMFSampleOutputStream*, UInt32)
    begin_write_sample : Proc(IMFSampleOutputStream*, IMFSample, IMFAsyncCallback, IUnknown, HRESULT)
    end_write_sample : Proc(IMFSampleOutputStream*, IMFAsyncResult, HRESULT)
    close : Proc(IMFSampleOutputStream*, HRESULT)
  end

  IMFSampleOutputStream_GUID = "8feed468-6f7e-440d-869a-49bdd283ad0d"
  IID_IMFSampleOutputStream = LibC::GUID.new(0x8feed468_u32, 0x6f7e_u16, 0x440d_u16, StaticArray[0x86_u8, 0x9a_u8, 0x49_u8, 0xbd_u8, 0xd2_u8, 0x83_u8, 0xad_u8, 0xd_u8])
  struct IMFSampleOutputStream
    lpVtbl : IMFSampleOutputStreamVTbl*
  end

  struct IMFCollectionVTbl
    query_interface : Proc(IMFCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFCollection*, UInt32)
    release : Proc(IMFCollection*, UInt32)
    get_element_count : Proc(IMFCollection*, UInt32*, HRESULT)
    get_element : Proc(IMFCollection*, UInt32, IUnknown*, HRESULT)
    add_element : Proc(IMFCollection*, IUnknown, HRESULT)
    remove_element : Proc(IMFCollection*, UInt32, IUnknown*, HRESULT)
    insert_element_at : Proc(IMFCollection*, UInt32, IUnknown, HRESULT)
    remove_all_elements : Proc(IMFCollection*, HRESULT)
  end

  IMFCollection_GUID = "5bc8a76b-869a-46a3-9b03-fa218a66aebe"
  IID_IMFCollection = LibC::GUID.new(0x5bc8a76b_u32, 0x869a_u16, 0x46a3_u16, StaticArray[0x9b_u8, 0x3_u8, 0xfa_u8, 0x21_u8, 0x8a_u8, 0x66_u8, 0xae_u8, 0xbe_u8])
  struct IMFCollection
    lpVtbl : IMFCollectionVTbl*
  end

  struct IMFMediaEventQueueVTbl
    query_interface : Proc(IMFMediaEventQueue*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaEventQueue*, UInt32)
    release : Proc(IMFMediaEventQueue*, UInt32)
    get_event : Proc(IMFMediaEventQueue*, UInt32, IMFMediaEvent*, HRESULT)
    begin_get_event : Proc(IMFMediaEventQueue*, IMFAsyncCallback, IUnknown, HRESULT)
    end_get_event : Proc(IMFMediaEventQueue*, IMFAsyncResult, IMFMediaEvent*, HRESULT)
    queue_event : Proc(IMFMediaEventQueue*, IMFMediaEvent, HRESULT)
    queue_event_param_var : Proc(IMFMediaEventQueue*, UInt32, Guid*, HRESULT, PROPVARIANT*, HRESULT)
    queue_event_param_unk : Proc(IMFMediaEventQueue*, UInt32, Guid*, HRESULT, IUnknown, HRESULT)
    shutdown : Proc(IMFMediaEventQueue*, HRESULT)
  end

  IMFMediaEventQueue_GUID = "36f846fc-2256-48b6-b58e-e2b638316581"
  IID_IMFMediaEventQueue = LibC::GUID.new(0x36f846fc_u32, 0x2256_u16, 0x48b6_u16, StaticArray[0xb5_u8, 0x8e_u8, 0xe2_u8, 0xb6_u8, 0x38_u8, 0x31_u8, 0x65_u8, 0x81_u8])
  struct IMFMediaEventQueue
    lpVtbl : IMFMediaEventQueueVTbl*
  end

  struct IMFActivateVTbl
    query_interface : Proc(IMFActivate*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFActivate*, UInt32)
    release : Proc(IMFActivate*, UInt32)
    get_item : Proc(IMFActivate*, Guid*, PROPVARIANT*, HRESULT)
    get_item_type : Proc(IMFActivate*, Guid*, MF_ATTRIBUTE_TYPE*, HRESULT)
    compare_item : Proc(IMFActivate*, Guid*, PROPVARIANT*, LibC::BOOL*, HRESULT)
    compare : Proc(IMFActivate*, IMFAttributes, MF_ATTRIBUTES_MATCH_TYPE, LibC::BOOL*, HRESULT)
    get_uint32 : Proc(IMFActivate*, Guid*, UInt32*, HRESULT)
    get_uint64 : Proc(IMFActivate*, Guid*, UInt64*, HRESULT)
    get_double : Proc(IMFActivate*, Guid*, Float64*, HRESULT)
    get_guid : Proc(IMFActivate*, Guid*, Guid*, HRESULT)
    get_string_length : Proc(IMFActivate*, Guid*, UInt32*, HRESULT)
    get_string : Proc(IMFActivate*, Guid*, Char*, UInt32, UInt32*, HRESULT)
    get_allocated_string : Proc(IMFActivate*, Guid*, LibC::LPWSTR*, UInt32*, HRESULT)
    get_blob_size : Proc(IMFActivate*, Guid*, UInt32*, HRESULT)
    get_blob : Proc(IMFActivate*, Guid*, UInt8*, UInt32, UInt32*, HRESULT)
    get_allocated_blob : Proc(IMFActivate*, Guid*, UInt8**, UInt32*, HRESULT)
    get_unknown : Proc(IMFActivate*, Guid*, Guid*, Void**, HRESULT)
    set_item : Proc(IMFActivate*, Guid*, PROPVARIANT*, HRESULT)
    delete_item : Proc(IMFActivate*, Guid*, HRESULT)
    delete_all_items : Proc(IMFActivate*, HRESULT)
    set_uint32 : Proc(IMFActivate*, Guid*, UInt32, HRESULT)
    set_uint64 : Proc(IMFActivate*, Guid*, UInt64, HRESULT)
    set_double : Proc(IMFActivate*, Guid*, Float64, HRESULT)
    set_guid : Proc(IMFActivate*, Guid*, Guid*, HRESULT)
    set_string : Proc(IMFActivate*, Guid*, LibC::LPWSTR, HRESULT)
    set_blob : Proc(IMFActivate*, Guid*, UInt8*, UInt32, HRESULT)
    set_unknown : Proc(IMFActivate*, Guid*, IUnknown, HRESULT)
    lock_store : Proc(IMFActivate*, HRESULT)
    unlock_store : Proc(IMFActivate*, HRESULT)
    get_count : Proc(IMFActivate*, UInt32*, HRESULT)
    get_item_by_index : Proc(IMFActivate*, UInt32, Guid*, PROPVARIANT*, HRESULT)
    copy_all_items : Proc(IMFActivate*, IMFAttributes, HRESULT)
    activate_object : Proc(IMFActivate*, Guid*, Void**, HRESULT)
    shutdown_object : Proc(IMFActivate*, HRESULT)
    detach_object : Proc(IMFActivate*, HRESULT)
  end

  IMFActivate_GUID = "7fee9e9a-4a89-47a6-899c-b6a53a70fb67"
  IID_IMFActivate = LibC::GUID.new(0x7fee9e9a_u32, 0x4a89_u16, 0x47a6_u16, StaticArray[0x89_u8, 0x9c_u8, 0xb6_u8, 0xa5_u8, 0x3a_u8, 0x70_u8, 0xfb_u8, 0x67_u8])
  struct IMFActivate
    lpVtbl : IMFActivateVTbl*
  end

  struct IMFPluginControlVTbl
    query_interface : Proc(IMFPluginControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFPluginControl*, UInt32)
    release : Proc(IMFPluginControl*, UInt32)
    get_preferred_clsid : Proc(IMFPluginControl*, UInt32, LibC::LPWSTR, Guid*, HRESULT)
    get_preferred_clsid_by_index : Proc(IMFPluginControl*, UInt32, UInt32, LibC::LPWSTR*, Guid*, HRESULT)
    set_preferred_clsid : Proc(IMFPluginControl*, UInt32, LibC::LPWSTR, Guid*, HRESULT)
    is_disabled : Proc(IMFPluginControl*, UInt32, Guid*, HRESULT)
    get_disabled_by_index : Proc(IMFPluginControl*, UInt32, UInt32, Guid*, HRESULT)
    set_disabled : Proc(IMFPluginControl*, UInt32, Guid*, LibC::BOOL, HRESULT)
  end

  IMFPluginControl_GUID = "5c6c44bf-1db6-435b-9249-e8cd10fdec96"
  IID_IMFPluginControl = LibC::GUID.new(0x5c6c44bf_u32, 0x1db6_u16, 0x435b_u16, StaticArray[0x92_u8, 0x49_u8, 0xe8_u8, 0xcd_u8, 0x10_u8, 0xfd_u8, 0xec_u8, 0x96_u8])
  struct IMFPluginControl
    lpVtbl : IMFPluginControlVTbl*
  end

  struct IMFPluginControl2VTbl
    query_interface : Proc(IMFPluginControl2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFPluginControl2*, UInt32)
    release : Proc(IMFPluginControl2*, UInt32)
    get_preferred_clsid : Proc(IMFPluginControl2*, UInt32, LibC::LPWSTR, Guid*, HRESULT)
    get_preferred_clsid_by_index : Proc(IMFPluginControl2*, UInt32, UInt32, LibC::LPWSTR*, Guid*, HRESULT)
    set_preferred_clsid : Proc(IMFPluginControl2*, UInt32, LibC::LPWSTR, Guid*, HRESULT)
    is_disabled : Proc(IMFPluginControl2*, UInt32, Guid*, HRESULT)
    get_disabled_by_index : Proc(IMFPluginControl2*, UInt32, UInt32, Guid*, HRESULT)
    set_disabled : Proc(IMFPluginControl2*, UInt32, Guid*, LibC::BOOL, HRESULT)
    set_policy : Proc(IMFPluginControl2*, MF_PLUGIN_CONTROL_POLICY, HRESULT)
  end

  IMFPluginControl2_GUID = "c6982083-3ddc-45cb-af5e-0f7a8ce4de77"
  IID_IMFPluginControl2 = LibC::GUID.new(0xc6982083_u32, 0x3ddc_u16, 0x45cb_u16, StaticArray[0xaf_u8, 0x5e_u8, 0xf_u8, 0x7a_u8, 0x8c_u8, 0xe4_u8, 0xde_u8, 0x77_u8])
  struct IMFPluginControl2
    lpVtbl : IMFPluginControl2VTbl*
  end

  struct IMFDXGIDeviceManagerVTbl
    query_interface : Proc(IMFDXGIDeviceManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFDXGIDeviceManager*, UInt32)
    release : Proc(IMFDXGIDeviceManager*, UInt32)
    close_device_handle : Proc(IMFDXGIDeviceManager*, LibC::HANDLE, HRESULT)
    get_video_service : Proc(IMFDXGIDeviceManager*, LibC::HANDLE, Guid*, Void**, HRESULT)
    lock_device : Proc(IMFDXGIDeviceManager*, LibC::HANDLE, Guid*, Void**, LibC::BOOL, HRESULT)
    open_device_handle : Proc(IMFDXGIDeviceManager*, LibC::HANDLE*, HRESULT)
    reset_device : Proc(IMFDXGIDeviceManager*, IUnknown, UInt32, HRESULT)
    test_device : Proc(IMFDXGIDeviceManager*, LibC::HANDLE, HRESULT)
    unlock_device : Proc(IMFDXGIDeviceManager*, LibC::HANDLE, LibC::BOOL, HRESULT)
  end

  IMFDXGIDeviceManager_GUID = "eb533d5d-2db6-40f8-97a9-494692014f07"
  IID_IMFDXGIDeviceManager = LibC::GUID.new(0xeb533d5d_u32, 0x2db6_u16, 0x40f8_u16, StaticArray[0x97_u8, 0xa9_u8, 0x49_u8, 0x46_u8, 0x92_u8, 0x1_u8, 0x4f_u8, 0x7_u8])
  struct IMFDXGIDeviceManager
    lpVtbl : IMFDXGIDeviceManagerVTbl*
  end

  struct IMFMuxStreamAttributesManagerVTbl
    query_interface : Proc(IMFMuxStreamAttributesManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMuxStreamAttributesManager*, UInt32)
    release : Proc(IMFMuxStreamAttributesManager*, UInt32)
    get_stream_count : Proc(IMFMuxStreamAttributesManager*, UInt32*, HRESULT)
    get_attributes : Proc(IMFMuxStreamAttributesManager*, UInt32, IMFAttributes*, HRESULT)
  end

  IMFMuxStreamAttributesManager_GUID = "ce8bd576-e440-43b3-be34-1e53f565f7e8"
  IID_IMFMuxStreamAttributesManager = LibC::GUID.new(0xce8bd576_u32, 0xe440_u16, 0x43b3_u16, StaticArray[0xbe_u8, 0x34_u8, 0x1e_u8, 0x53_u8, 0xf5_u8, 0x65_u8, 0xf7_u8, 0xe8_u8])
  struct IMFMuxStreamAttributesManager
    lpVtbl : IMFMuxStreamAttributesManagerVTbl*
  end

  struct IMFMuxStreamMediaTypeManagerVTbl
    query_interface : Proc(IMFMuxStreamMediaTypeManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMuxStreamMediaTypeManager*, UInt32)
    release : Proc(IMFMuxStreamMediaTypeManager*, UInt32)
    get_stream_count : Proc(IMFMuxStreamMediaTypeManager*, UInt32*, HRESULT)
    get_media_type : Proc(IMFMuxStreamMediaTypeManager*, UInt32, IMFMediaType*, HRESULT)
    get_stream_configuration_count : Proc(IMFMuxStreamMediaTypeManager*, UInt32*, HRESULT)
    add_stream_configuration : Proc(IMFMuxStreamMediaTypeManager*, UInt64, HRESULT)
    remove_stream_configuration : Proc(IMFMuxStreamMediaTypeManager*, UInt64, HRESULT)
    get_stream_configuration : Proc(IMFMuxStreamMediaTypeManager*, UInt32, UInt64*, HRESULT)
  end

  IMFMuxStreamMediaTypeManager_GUID = "505a2c72-42f7-4690-aeab-8f513d0ffdb8"
  IID_IMFMuxStreamMediaTypeManager = LibC::GUID.new(0x505a2c72_u32, 0x42f7_u16, 0x4690_u16, StaticArray[0xae_u8, 0xab_u8, 0x8f_u8, 0x51_u8, 0x3d_u8, 0xf_u8, 0xfd_u8, 0xb8_u8])
  struct IMFMuxStreamMediaTypeManager
    lpVtbl : IMFMuxStreamMediaTypeManagerVTbl*
  end

  struct IMFMuxStreamSampleManagerVTbl
    query_interface : Proc(IMFMuxStreamSampleManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMuxStreamSampleManager*, UInt32)
    release : Proc(IMFMuxStreamSampleManager*, UInt32)
    get_stream_count : Proc(IMFMuxStreamSampleManager*, UInt32*, HRESULT)
    get_sample : Proc(IMFMuxStreamSampleManager*, UInt32, IMFSample*, HRESULT)
    get_stream_configuration : Proc(IMFMuxStreamSampleManager*, UInt64)
  end

  IMFMuxStreamSampleManager_GUID = "74abbc19-b1cc-4e41-bb8b-9d9b86a8f6ca"
  IID_IMFMuxStreamSampleManager = LibC::GUID.new(0x74abbc19_u32, 0xb1cc_u16, 0x4e41_u16, StaticArray[0xbb_u8, 0x8b_u8, 0x9d_u8, 0x9b_u8, 0x86_u8, 0xa8_u8, 0xf6_u8, 0xca_u8])
  struct IMFMuxStreamSampleManager
    lpVtbl : IMFMuxStreamSampleManagerVTbl*
  end

  struct IMFSecureBufferVTbl
    query_interface : Proc(IMFSecureBuffer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSecureBuffer*, UInt32)
    release : Proc(IMFSecureBuffer*, UInt32)
    get_identifier : Proc(IMFSecureBuffer*, Guid*, HRESULT)
  end

  IMFSecureBuffer_GUID = "c1209904-e584-4752-a2d6-7f21693f8b21"
  IID_IMFSecureBuffer = LibC::GUID.new(0xc1209904_u32, 0xe584_u16, 0x4752_u16, StaticArray[0xa2_u8, 0xd6_u8, 0x7f_u8, 0x21_u8, 0x69_u8, 0x3f_u8, 0x8b_u8, 0x21_u8])
  struct IMFSecureBuffer
    lpVtbl : IMFSecureBufferVTbl*
  end

  struct IMFTransformVTbl
    query_interface : Proc(IMFTransform*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFTransform*, UInt32)
    release : Proc(IMFTransform*, UInt32)
    get_stream_limits : Proc(IMFTransform*, UInt32*, UInt32*, UInt32*, UInt32*, HRESULT)
    get_stream_count : Proc(IMFTransform*, UInt32*, UInt32*, HRESULT)
    get_stream_i_ds : Proc(IMFTransform*, UInt32, UInt32*, UInt32, UInt32*, HRESULT)
    get_input_stream_info : Proc(IMFTransform*, UInt32, MFT_INPUT_STREAM_INFO*, HRESULT)
    get_output_stream_info : Proc(IMFTransform*, UInt32, MFT_OUTPUT_STREAM_INFO*, HRESULT)
    get_attributes : Proc(IMFTransform*, IMFAttributes*, HRESULT)
    get_input_stream_attributes : Proc(IMFTransform*, UInt32, IMFAttributes*, HRESULT)
    get_output_stream_attributes : Proc(IMFTransform*, UInt32, IMFAttributes*, HRESULT)
    delete_input_stream : Proc(IMFTransform*, UInt32, HRESULT)
    add_input_streams : Proc(IMFTransform*, UInt32, UInt32*, HRESULT)
    get_input_available_type : Proc(IMFTransform*, UInt32, UInt32, IMFMediaType*, HRESULT)
    get_output_available_type : Proc(IMFTransform*, UInt32, UInt32, IMFMediaType*, HRESULT)
    set_input_type : Proc(IMFTransform*, UInt32, IMFMediaType, UInt32, HRESULT)
    set_output_type : Proc(IMFTransform*, UInt32, IMFMediaType, UInt32, HRESULT)
    get_input_current_type : Proc(IMFTransform*, UInt32, IMFMediaType*, HRESULT)
    get_output_current_type : Proc(IMFTransform*, UInt32, IMFMediaType*, HRESULT)
    get_input_status : Proc(IMFTransform*, UInt32, UInt32*, HRESULT)
    get_output_status : Proc(IMFTransform*, UInt32*, HRESULT)
    set_output_bounds : Proc(IMFTransform*, Int64, Int64, HRESULT)
    process_event : Proc(IMFTransform*, UInt32, IMFMediaEvent, HRESULT)
    process_message : Proc(IMFTransform*, MFT_MESSAGE_TYPE, LibC::UINT_PTR, HRESULT)
    process_input : Proc(IMFTransform*, UInt32, IMFSample, UInt32, HRESULT)
    process_output : Proc(IMFTransform*, UInt32, UInt32, MFT_OUTPUT_DATA_BUFFER*, UInt32*, HRESULT)
  end

  IMFTransform_GUID = "bf94c121-5b05-4e6f-8000-ba598961414d"
  IID_IMFTransform = LibC::GUID.new(0xbf94c121_u32, 0x5b05_u16, 0x4e6f_u16, StaticArray[0x80_u8, 0x0_u8, 0xba_u8, 0x59_u8, 0x89_u8, 0x61_u8, 0x41_u8, 0x4d_u8])
  struct IMFTransform
    lpVtbl : IMFTransformVTbl*
  end

  struct IMFMediaSessionVTbl
    query_interface : Proc(IMFMediaSession*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaSession*, UInt32)
    release : Proc(IMFMediaSession*, UInt32)
    get_event : Proc(IMFMediaSession*, MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, IMFMediaEvent*, HRESULT)
    begin_get_event : Proc(IMFMediaSession*, IMFAsyncCallback, IUnknown, HRESULT)
    end_get_event : Proc(IMFMediaSession*, IMFAsyncResult, IMFMediaEvent*, HRESULT)
    queue_event : Proc(IMFMediaSession*, UInt32, Guid*, HRESULT, PROPVARIANT*, HRESULT)
    set_topology : Proc(IMFMediaSession*, UInt32, IMFTopology, HRESULT)
    clear_topologies : Proc(IMFMediaSession*, HRESULT)
    start : Proc(IMFMediaSession*, Guid*, PROPVARIANT*, HRESULT)
    pause : Proc(IMFMediaSession*, HRESULT)
    stop : Proc(IMFMediaSession*, HRESULT)
    close : Proc(IMFMediaSession*, HRESULT)
    shutdown : Proc(IMFMediaSession*, HRESULT)
    get_clock : Proc(IMFMediaSession*, IMFClock*, HRESULT)
    get_session_capabilities : Proc(IMFMediaSession*, UInt32*, HRESULT)
    get_full_topology : Proc(IMFMediaSession*, UInt32, UInt64, IMFTopology*, HRESULT)
  end

  IMFMediaSession_GUID = "90377834-21d0-4dee-8214-ba2e3e6c1127"
  IID_IMFMediaSession = LibC::GUID.new(0x90377834_u32, 0x21d0_u16, 0x4dee_u16, StaticArray[0x82_u8, 0x14_u8, 0xba_u8, 0x2e_u8, 0x3e_u8, 0x6c_u8, 0x11_u8, 0x27_u8])
  struct IMFMediaSession
    lpVtbl : IMFMediaSessionVTbl*
  end

  struct IMFSourceResolverVTbl
    query_interface : Proc(IMFSourceResolver*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSourceResolver*, UInt32)
    release : Proc(IMFSourceResolver*, UInt32)
    create_object_from_url : Proc(IMFSourceResolver*, LibC::LPWSTR, UInt32, IPropertyStore, MF_OBJECT_TYPE*, IUnknown*, HRESULT)
    create_object_from_byte_stream : Proc(IMFSourceResolver*, IMFByteStream, LibC::LPWSTR, UInt32, IPropertyStore, MF_OBJECT_TYPE*, IUnknown*, HRESULT)
    begin_create_object_from_url : Proc(IMFSourceResolver*, LibC::LPWSTR, UInt32, IPropertyStore, IUnknown*, IMFAsyncCallback, IUnknown, HRESULT)
    end_create_object_from_url : Proc(IMFSourceResolver*, IMFAsyncResult, MF_OBJECT_TYPE*, IUnknown*, HRESULT)
    begin_create_object_from_byte_stream : Proc(IMFSourceResolver*, IMFByteStream, LibC::LPWSTR, UInt32, IPropertyStore, IUnknown*, IMFAsyncCallback, IUnknown, HRESULT)
    end_create_object_from_byte_stream : Proc(IMFSourceResolver*, IMFAsyncResult, MF_OBJECT_TYPE*, IUnknown*, HRESULT)
    cancel_object_creation : Proc(IMFSourceResolver*, IUnknown, HRESULT)
  end

  IMFSourceResolver_GUID = "fbe5a32d-a497-4b61-bb85-97b1a848a6e3"
  IID_IMFSourceResolver = LibC::GUID.new(0xfbe5a32d_u32, 0xa497_u16, 0x4b61_u16, StaticArray[0xbb_u8, 0x85_u8, 0x97_u8, 0xb1_u8, 0xa8_u8, 0x48_u8, 0xa6_u8, 0xe3_u8])
  struct IMFSourceResolver
    lpVtbl : IMFSourceResolverVTbl*
  end

  struct IMFMediaSourceVTbl
    query_interface : Proc(IMFMediaSource*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaSource*, UInt32)
    release : Proc(IMFMediaSource*, UInt32)
    get_event : Proc(IMFMediaSource*, MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, IMFMediaEvent*, HRESULT)
    begin_get_event : Proc(IMFMediaSource*, IMFAsyncCallback, IUnknown, HRESULT)
    end_get_event : Proc(IMFMediaSource*, IMFAsyncResult, IMFMediaEvent*, HRESULT)
    queue_event : Proc(IMFMediaSource*, UInt32, Guid*, HRESULT, PROPVARIANT*, HRESULT)
    get_characteristics : Proc(IMFMediaSource*, UInt32*, HRESULT)
    create_presentation_descriptor : Proc(IMFMediaSource*, IMFPresentationDescriptor*, HRESULT)
    start : Proc(IMFMediaSource*, IMFPresentationDescriptor, Guid*, PROPVARIANT*, HRESULT)
    stop : Proc(IMFMediaSource*, HRESULT)
    pause : Proc(IMFMediaSource*, HRESULT)
    shutdown : Proc(IMFMediaSource*, HRESULT)
  end

  IMFMediaSource_GUID = "279a808d-aec7-40c8-9c6b-a6b492c78a66"
  IID_IMFMediaSource = LibC::GUID.new(0x279a808d_u32, 0xaec7_u16, 0x40c8_u16, StaticArray[0x9c_u8, 0x6b_u8, 0xa6_u8, 0xb4_u8, 0x92_u8, 0xc7_u8, 0x8a_u8, 0x66_u8])
  struct IMFMediaSource
    lpVtbl : IMFMediaSourceVTbl*
  end

  struct IMFMediaSourceExVTbl
    query_interface : Proc(IMFMediaSourceEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaSourceEx*, UInt32)
    release : Proc(IMFMediaSourceEx*, UInt32)
    get_event : Proc(IMFMediaSourceEx*, MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, IMFMediaEvent*, HRESULT)
    begin_get_event : Proc(IMFMediaSourceEx*, IMFAsyncCallback, IUnknown, HRESULT)
    end_get_event : Proc(IMFMediaSourceEx*, IMFAsyncResult, IMFMediaEvent*, HRESULT)
    queue_event : Proc(IMFMediaSourceEx*, UInt32, Guid*, HRESULT, PROPVARIANT*, HRESULT)
    get_characteristics : Proc(IMFMediaSourceEx*, UInt32*, HRESULT)
    create_presentation_descriptor : Proc(IMFMediaSourceEx*, IMFPresentationDescriptor*, HRESULT)
    start : Proc(IMFMediaSourceEx*, IMFPresentationDescriptor, Guid*, PROPVARIANT*, HRESULT)
    stop : Proc(IMFMediaSourceEx*, HRESULT)
    pause : Proc(IMFMediaSourceEx*, HRESULT)
    shutdown : Proc(IMFMediaSourceEx*, HRESULT)
    get_source_attributes : Proc(IMFMediaSourceEx*, IMFAttributes*, HRESULT)
    get_stream_attributes : Proc(IMFMediaSourceEx*, UInt32, IMFAttributes*, HRESULT)
    set_d3_d_manager : Proc(IMFMediaSourceEx*, IUnknown, HRESULT)
  end

  IMFMediaSourceEx_GUID = "3c9b2eb9-86d5-4514-a394-f56664f9f0d8"
  IID_IMFMediaSourceEx = LibC::GUID.new(0x3c9b2eb9_u32, 0x86d5_u16, 0x4514_u16, StaticArray[0xa3_u8, 0x94_u8, 0xf5_u8, 0x66_u8, 0x64_u8, 0xf9_u8, 0xf0_u8, 0xd8_u8])
  struct IMFMediaSourceEx
    lpVtbl : IMFMediaSourceExVTbl*
  end

  struct IMFClockConsumerVTbl
    query_interface : Proc(IMFClockConsumer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFClockConsumer*, UInt32)
    release : Proc(IMFClockConsumer*, UInt32)
    set_presentation_clock : Proc(IMFClockConsumer*, IMFPresentationClock, HRESULT)
    get_presentation_clock : Proc(IMFClockConsumer*, IMFPresentationClock*, HRESULT)
  end

  IMFClockConsumer_GUID = "6ef2a662-47c0-4666-b13d-cbb717f2fa2c"
  IID_IMFClockConsumer = LibC::GUID.new(0x6ef2a662_u32, 0x47c0_u16, 0x4666_u16, StaticArray[0xb1_u8, 0x3d_u8, 0xcb_u8, 0xb7_u8, 0x17_u8, 0xf2_u8, 0xfa_u8, 0x2c_u8])
  struct IMFClockConsumer
    lpVtbl : IMFClockConsumerVTbl*
  end

  struct IMFMediaStreamVTbl
    query_interface : Proc(IMFMediaStream*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaStream*, UInt32)
    release : Proc(IMFMediaStream*, UInt32)
    get_event : Proc(IMFMediaStream*, MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, IMFMediaEvent*, HRESULT)
    begin_get_event : Proc(IMFMediaStream*, IMFAsyncCallback, IUnknown, HRESULT)
    end_get_event : Proc(IMFMediaStream*, IMFAsyncResult, IMFMediaEvent*, HRESULT)
    queue_event : Proc(IMFMediaStream*, UInt32, Guid*, HRESULT, PROPVARIANT*, HRESULT)
    get_media_source : Proc(IMFMediaStream*, IMFMediaSource*, HRESULT)
    get_stream_descriptor : Proc(IMFMediaStream*, IMFStreamDescriptor*, HRESULT)
    request_sample : Proc(IMFMediaStream*, IUnknown, HRESULT)
  end

  IMFMediaStream_GUID = "d182108f-4ec6-443f-aa42-a71106ec825f"
  IID_IMFMediaStream = LibC::GUID.new(0xd182108f_u32, 0x4ec6_u16, 0x443f_u16, StaticArray[0xaa_u8, 0x42_u8, 0xa7_u8, 0x11_u8, 0x6_u8, 0xec_u8, 0x82_u8, 0x5f_u8])
  struct IMFMediaStream
    lpVtbl : IMFMediaStreamVTbl*
  end

  struct IMFMediaSinkVTbl
    query_interface : Proc(IMFMediaSink*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaSink*, UInt32)
    release : Proc(IMFMediaSink*, UInt32)
    get_characteristics : Proc(IMFMediaSink*, UInt32*, HRESULT)
    add_stream_sink : Proc(IMFMediaSink*, UInt32, IMFMediaType, IMFStreamSink*, HRESULT)
    remove_stream_sink : Proc(IMFMediaSink*, UInt32, HRESULT)
    get_stream_sink_count : Proc(IMFMediaSink*, UInt32*, HRESULT)
    get_stream_sink_by_index : Proc(IMFMediaSink*, UInt32, IMFStreamSink*, HRESULT)
    get_stream_sink_by_id : Proc(IMFMediaSink*, UInt32, IMFStreamSink*, HRESULT)
    set_presentation_clock : Proc(IMFMediaSink*, IMFPresentationClock, HRESULT)
    get_presentation_clock : Proc(IMFMediaSink*, IMFPresentationClock*, HRESULT)
    shutdown : Proc(IMFMediaSink*, HRESULT)
  end

  IMFMediaSink_GUID = "6ef2a660-47c0-4666-b13d-cbb717f2fa2c"
  IID_IMFMediaSink = LibC::GUID.new(0x6ef2a660_u32, 0x47c0_u16, 0x4666_u16, StaticArray[0xb1_u8, 0x3d_u8, 0xcb_u8, 0xb7_u8, 0x17_u8, 0xf2_u8, 0xfa_u8, 0x2c_u8])
  struct IMFMediaSink
    lpVtbl : IMFMediaSinkVTbl*
  end

  struct IMFStreamSinkVTbl
    query_interface : Proc(IMFStreamSink*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFStreamSink*, UInt32)
    release : Proc(IMFStreamSink*, UInt32)
    get_event : Proc(IMFStreamSink*, MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, IMFMediaEvent*, HRESULT)
    begin_get_event : Proc(IMFStreamSink*, IMFAsyncCallback, IUnknown, HRESULT)
    end_get_event : Proc(IMFStreamSink*, IMFAsyncResult, IMFMediaEvent*, HRESULT)
    queue_event : Proc(IMFStreamSink*, UInt32, Guid*, HRESULT, PROPVARIANT*, HRESULT)
    get_media_sink : Proc(IMFStreamSink*, IMFMediaSink*, HRESULT)
    get_identifier : Proc(IMFStreamSink*, UInt32*, HRESULT)
    get_media_type_handler : Proc(IMFStreamSink*, IMFMediaTypeHandler*, HRESULT)
    process_sample : Proc(IMFStreamSink*, IMFSample, HRESULT)
    place_marker : Proc(IMFStreamSink*, MFSTREAMSINK_MARKER_TYPE, PROPVARIANT*, PROPVARIANT*, HRESULT)
    flush : Proc(IMFStreamSink*, HRESULT)
  end

  IMFStreamSink_GUID = "0a97b3cf-8e7c-4a3d-8f8c-0c843dc247fb"
  IID_IMFStreamSink = LibC::GUID.new(0xa97b3cf_u32, 0x8e7c_u16, 0x4a3d_u16, StaticArray[0x8f_u8, 0x8c_u8, 0xc_u8, 0x84_u8, 0x3d_u8, 0xc2_u8, 0x47_u8, 0xfb_u8])
  struct IMFStreamSink
    lpVtbl : IMFStreamSinkVTbl*
  end

  struct IMFVideoSampleAllocatorVTbl
    query_interface : Proc(IMFVideoSampleAllocator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFVideoSampleAllocator*, UInt32)
    release : Proc(IMFVideoSampleAllocator*, UInt32)
    set_direct_x_manager : Proc(IMFVideoSampleAllocator*, IUnknown, HRESULT)
    uninitialize_sample_allocator : Proc(IMFVideoSampleAllocator*, HRESULT)
    initialize_sample_allocator : Proc(IMFVideoSampleAllocator*, UInt32, IMFMediaType, HRESULT)
    allocate_sample : Proc(IMFVideoSampleAllocator*, IMFSample*, HRESULT)
  end

  IMFVideoSampleAllocator_GUID = "86cbc910-e533-4751-8e3b-f19b5b806a03"
  IID_IMFVideoSampleAllocator = LibC::GUID.new(0x86cbc910_u32, 0xe533_u16, 0x4751_u16, StaticArray[0x8e_u8, 0x3b_u8, 0xf1_u8, 0x9b_u8, 0x5b_u8, 0x80_u8, 0x6a_u8, 0x3_u8])
  struct IMFVideoSampleAllocator
    lpVtbl : IMFVideoSampleAllocatorVTbl*
  end

  struct IMFVideoSampleAllocatorNotifyVTbl
    query_interface : Proc(IMFVideoSampleAllocatorNotify*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFVideoSampleAllocatorNotify*, UInt32)
    release : Proc(IMFVideoSampleAllocatorNotify*, UInt32)
    notify_release : Proc(IMFVideoSampleAllocatorNotify*, HRESULT)
  end

  IMFVideoSampleAllocatorNotify_GUID = "a792cdbe-c374-4e89-8335-278e7b9956a4"
  IID_IMFVideoSampleAllocatorNotify = LibC::GUID.new(0xa792cdbe_u32, 0xc374_u16, 0x4e89_u16, StaticArray[0x83_u8, 0x35_u8, 0x27_u8, 0x8e_u8, 0x7b_u8, 0x99_u8, 0x56_u8, 0xa4_u8])
  struct IMFVideoSampleAllocatorNotify
    lpVtbl : IMFVideoSampleAllocatorNotifyVTbl*
  end

  struct IMFVideoSampleAllocatorNotifyExVTbl
    query_interface : Proc(IMFVideoSampleAllocatorNotifyEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFVideoSampleAllocatorNotifyEx*, UInt32)
    release : Proc(IMFVideoSampleAllocatorNotifyEx*, UInt32)
    notify_release : Proc(IMFVideoSampleAllocatorNotifyEx*, HRESULT)
    notify_prune : Proc(IMFVideoSampleAllocatorNotifyEx*, IMFSample, HRESULT)
  end

  IMFVideoSampleAllocatorNotifyEx_GUID = "3978aa1a-6d5b-4b7f-a340-90899189ae34"
  IID_IMFVideoSampleAllocatorNotifyEx = LibC::GUID.new(0x3978aa1a_u32, 0x6d5b_u16, 0x4b7f_u16, StaticArray[0xa3_u8, 0x40_u8, 0x90_u8, 0x89_u8, 0x91_u8, 0x89_u8, 0xae_u8, 0x34_u8])
  struct IMFVideoSampleAllocatorNotifyEx
    lpVtbl : IMFVideoSampleAllocatorNotifyExVTbl*
  end

  struct IMFVideoSampleAllocatorCallbackVTbl
    query_interface : Proc(IMFVideoSampleAllocatorCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFVideoSampleAllocatorCallback*, UInt32)
    release : Proc(IMFVideoSampleAllocatorCallback*, UInt32)
    set_callback : Proc(IMFVideoSampleAllocatorCallback*, IMFVideoSampleAllocatorNotify, HRESULT)
    get_free_sample_count : Proc(IMFVideoSampleAllocatorCallback*, Int32*, HRESULT)
  end

  IMFVideoSampleAllocatorCallback_GUID = "992388b4-3372-4f67-8b6f-c84c071f4751"
  IID_IMFVideoSampleAllocatorCallback = LibC::GUID.new(0x992388b4_u32, 0x3372_u16, 0x4f67_u16, StaticArray[0x8b_u8, 0x6f_u8, 0xc8_u8, 0x4c_u8, 0x7_u8, 0x1f_u8, 0x47_u8, 0x51_u8])
  struct IMFVideoSampleAllocatorCallback
    lpVtbl : IMFVideoSampleAllocatorCallbackVTbl*
  end

  struct IMFVideoSampleAllocatorExVTbl
    query_interface : Proc(IMFVideoSampleAllocatorEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFVideoSampleAllocatorEx*, UInt32)
    release : Proc(IMFVideoSampleAllocatorEx*, UInt32)
    set_direct_x_manager : Proc(IMFVideoSampleAllocatorEx*, IUnknown, HRESULT)
    uninitialize_sample_allocator : Proc(IMFVideoSampleAllocatorEx*, HRESULT)
    initialize_sample_allocator : Proc(IMFVideoSampleAllocatorEx*, UInt32, IMFMediaType, HRESULT)
    allocate_sample : Proc(IMFVideoSampleAllocatorEx*, IMFSample*, HRESULT)
    initialize_sample_allocator_ex : Proc(IMFVideoSampleAllocatorEx*, UInt32, UInt32, IMFAttributes, IMFMediaType, HRESULT)
  end

  IMFVideoSampleAllocatorEx_GUID = "545b3a48-3283-4f62-866f-a62d8f598f9f"
  IID_IMFVideoSampleAllocatorEx = LibC::GUID.new(0x545b3a48_u32, 0x3283_u16, 0x4f62_u16, StaticArray[0x86_u8, 0x6f_u8, 0xa6_u8, 0x2d_u8, 0x8f_u8, 0x59_u8, 0x8f_u8, 0x9f_u8])
  struct IMFVideoSampleAllocatorEx
    lpVtbl : IMFVideoSampleAllocatorExVTbl*
  end

  struct IMFDXGIDeviceManagerSourceVTbl
    query_interface : Proc(IMFDXGIDeviceManagerSource*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFDXGIDeviceManagerSource*, UInt32)
    release : Proc(IMFDXGIDeviceManagerSource*, UInt32)
    get_manager : Proc(IMFDXGIDeviceManagerSource*, IMFDXGIDeviceManager*, HRESULT)
  end

  IMFDXGIDeviceManagerSource_GUID = "20bc074b-7a8d-4609-8c3b-64a0a3b5d7ce"
  IID_IMFDXGIDeviceManagerSource = LibC::GUID.new(0x20bc074b_u32, 0x7a8d_u16, 0x4609_u16, StaticArray[0x8c_u8, 0x3b_u8, 0x64_u8, 0xa0_u8, 0xa3_u8, 0xb5_u8, 0xd7_u8, 0xce_u8])
  struct IMFDXGIDeviceManagerSource
    lpVtbl : IMFDXGIDeviceManagerSourceVTbl*
  end

  struct IMFVideoProcessorControlVTbl
    query_interface : Proc(IMFVideoProcessorControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFVideoProcessorControl*, UInt32)
    release : Proc(IMFVideoProcessorControl*, UInt32)
    set_border_color : Proc(IMFVideoProcessorControl*, MFARGB*, HRESULT)
    set_source_rectangle : Proc(IMFVideoProcessorControl*, RECT*, HRESULT)
    set_destination_rectangle : Proc(IMFVideoProcessorControl*, RECT*, HRESULT)
    set_mirror : Proc(IMFVideoProcessorControl*, MF_VIDEO_PROCESSOR_MIRROR, HRESULT)
    set_rotation : Proc(IMFVideoProcessorControl*, MF_VIDEO_PROCESSOR_ROTATION, HRESULT)
    set_constriction_size : Proc(IMFVideoProcessorControl*, SIZE*, HRESULT)
  end

  IMFVideoProcessorControl_GUID = "a3f675d5-6119-4f7f-a100-1d8b280f0efb"
  IID_IMFVideoProcessorControl = LibC::GUID.new(0xa3f675d5_u32, 0x6119_u16, 0x4f7f_u16, StaticArray[0xa1_u8, 0x0_u8, 0x1d_u8, 0x8b_u8, 0x28_u8, 0xf_u8, 0xe_u8, 0xfb_u8])
  struct IMFVideoProcessorControl
    lpVtbl : IMFVideoProcessorControlVTbl*
  end

  struct IMFVideoProcessorControl2VTbl
    query_interface : Proc(IMFVideoProcessorControl2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFVideoProcessorControl2*, UInt32)
    release : Proc(IMFVideoProcessorControl2*, UInt32)
    set_border_color : Proc(IMFVideoProcessorControl2*, MFARGB*, HRESULT)
    set_source_rectangle : Proc(IMFVideoProcessorControl2*, RECT*, HRESULT)
    set_destination_rectangle : Proc(IMFVideoProcessorControl2*, RECT*, HRESULT)
    set_mirror : Proc(IMFVideoProcessorControl2*, MF_VIDEO_PROCESSOR_MIRROR, HRESULT)
    set_rotation : Proc(IMFVideoProcessorControl2*, MF_VIDEO_PROCESSOR_ROTATION, HRESULT)
    set_constriction_size : Proc(IMFVideoProcessorControl2*, SIZE*, HRESULT)
    set_rotation_override : Proc(IMFVideoProcessorControl2*, UInt32, HRESULT)
    enable_hardware_effects : Proc(IMFVideoProcessorControl2*, LibC::BOOL, HRESULT)
    get_supported_hardware_effects : Proc(IMFVideoProcessorControl2*, UInt32*, HRESULT)
  end

  IMFVideoProcessorControl2_GUID = "bde633d3-e1dc-4a7f-a693-bbae399c4a20"
  IID_IMFVideoProcessorControl2 = LibC::GUID.new(0xbde633d3_u32, 0xe1dc_u16, 0x4a7f_u16, StaticArray[0xa6_u8, 0x93_u8, 0xbb_u8, 0xae_u8, 0x39_u8, 0x9c_u8, 0x4a_u8, 0x20_u8])
  struct IMFVideoProcessorControl2
    lpVtbl : IMFVideoProcessorControl2VTbl*
  end

  struct IMFVideoProcessorControl3VTbl
    query_interface : Proc(IMFVideoProcessorControl3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFVideoProcessorControl3*, UInt32)
    release : Proc(IMFVideoProcessorControl3*, UInt32)
    set_border_color : Proc(IMFVideoProcessorControl3*, MFARGB*, HRESULT)
    set_source_rectangle : Proc(IMFVideoProcessorControl3*, RECT*, HRESULT)
    set_destination_rectangle : Proc(IMFVideoProcessorControl3*, RECT*, HRESULT)
    set_mirror : Proc(IMFVideoProcessorControl3*, MF_VIDEO_PROCESSOR_MIRROR, HRESULT)
    set_rotation : Proc(IMFVideoProcessorControl3*, MF_VIDEO_PROCESSOR_ROTATION, HRESULT)
    set_constriction_size : Proc(IMFVideoProcessorControl3*, SIZE*, HRESULT)
    set_rotation_override : Proc(IMFVideoProcessorControl3*, UInt32, HRESULT)
    enable_hardware_effects : Proc(IMFVideoProcessorControl3*, LibC::BOOL, HRESULT)
    get_supported_hardware_effects : Proc(IMFVideoProcessorControl3*, UInt32*, HRESULT)
    get_natural_output_type : Proc(IMFVideoProcessorControl3*, IMFMediaType*, HRESULT)
    enable_spherical_video_processing : Proc(IMFVideoProcessorControl3*, LibC::BOOL, MFVideoSphericalFormat, MFVideoSphericalProjectionMode, HRESULT)
    set_spherical_video_properties : Proc(IMFVideoProcessorControl3*, Float32, Float32, Float32, Float32, Float32, HRESULT)
    set_output_device : Proc(IMFVideoProcessorControl3*, IUnknown, HRESULT)
  end

  IMFVideoProcessorControl3_GUID = "2424b3f2-eb23-40f1-91aa-74bddeea0883"
  IID_IMFVideoProcessorControl3 = LibC::GUID.new(0x2424b3f2_u32, 0xeb23_u16, 0x40f1_u16, StaticArray[0x91_u8, 0xaa_u8, 0x74_u8, 0xbd_u8, 0xde_u8, 0xea_u8, 0x8_u8, 0x83_u8])
  struct IMFVideoProcessorControl3
    lpVtbl : IMFVideoProcessorControl3VTbl*
  end

  struct IMFVideoRendererEffectControlVTbl
    query_interface : Proc(IMFVideoRendererEffectControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFVideoRendererEffectControl*, UInt32)
    release : Proc(IMFVideoRendererEffectControl*, UInt32)
    on_app_service_connection_established : Proc(IMFVideoRendererEffectControl*, IUnknown, HRESULT)
  end

  IMFVideoRendererEffectControl_GUID = "604d33d7-cf23-41d5-8224-5bbbb1a87475"
  IID_IMFVideoRendererEffectControl = LibC::GUID.new(0x604d33d7_u32, 0xcf23_u16, 0x41d5_u16, StaticArray[0x82_u8, 0x24_u8, 0x5b_u8, 0xbb_u8, 0xb1_u8, 0xa8_u8, 0x74_u8, 0x75_u8])
  struct IMFVideoRendererEffectControl
    lpVtbl : IMFVideoRendererEffectControlVTbl*
  end

  struct IMFTopologyVTbl
    query_interface : Proc(IMFTopology*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFTopology*, UInt32)
    release : Proc(IMFTopology*, UInt32)
    get_item : Proc(IMFTopology*, Guid*, PROPVARIANT*, HRESULT)
    get_item_type : Proc(IMFTopology*, Guid*, MF_ATTRIBUTE_TYPE*, HRESULT)
    compare_item : Proc(IMFTopology*, Guid*, PROPVARIANT*, LibC::BOOL*, HRESULT)
    compare : Proc(IMFTopology*, IMFAttributes, MF_ATTRIBUTES_MATCH_TYPE, LibC::BOOL*, HRESULT)
    get_uint32 : Proc(IMFTopology*, Guid*, UInt32*, HRESULT)
    get_uint64 : Proc(IMFTopology*, Guid*, UInt64*, HRESULT)
    get_double : Proc(IMFTopology*, Guid*, Float64*, HRESULT)
    get_guid : Proc(IMFTopology*, Guid*, Guid*, HRESULT)
    get_string_length : Proc(IMFTopology*, Guid*, UInt32*, HRESULT)
    get_string : Proc(IMFTopology*, Guid*, Char*, UInt32, UInt32*, HRESULT)
    get_allocated_string : Proc(IMFTopology*, Guid*, LibC::LPWSTR*, UInt32*, HRESULT)
    get_blob_size : Proc(IMFTopology*, Guid*, UInt32*, HRESULT)
    get_blob : Proc(IMFTopology*, Guid*, UInt8*, UInt32, UInt32*, HRESULT)
    get_allocated_blob : Proc(IMFTopology*, Guid*, UInt8**, UInt32*, HRESULT)
    get_unknown : Proc(IMFTopology*, Guid*, Guid*, Void**, HRESULT)
    set_item : Proc(IMFTopology*, Guid*, PROPVARIANT*, HRESULT)
    delete_item : Proc(IMFTopology*, Guid*, HRESULT)
    delete_all_items : Proc(IMFTopology*, HRESULT)
    set_uint32 : Proc(IMFTopology*, Guid*, UInt32, HRESULT)
    set_uint64 : Proc(IMFTopology*, Guid*, UInt64, HRESULT)
    set_double : Proc(IMFTopology*, Guid*, Float64, HRESULT)
    set_guid : Proc(IMFTopology*, Guid*, Guid*, HRESULT)
    set_string : Proc(IMFTopology*, Guid*, LibC::LPWSTR, HRESULT)
    set_blob : Proc(IMFTopology*, Guid*, UInt8*, UInt32, HRESULT)
    set_unknown : Proc(IMFTopology*, Guid*, IUnknown, HRESULT)
    lock_store : Proc(IMFTopology*, HRESULT)
    unlock_store : Proc(IMFTopology*, HRESULT)
    get_count : Proc(IMFTopology*, UInt32*, HRESULT)
    get_item_by_index : Proc(IMFTopology*, UInt32, Guid*, PROPVARIANT*, HRESULT)
    copy_all_items : Proc(IMFTopology*, IMFAttributes, HRESULT)
    get_topology_id : Proc(IMFTopology*, UInt64*, HRESULT)
    add_node : Proc(IMFTopology*, IMFTopologyNode, HRESULT)
    remove_node : Proc(IMFTopology*, IMFTopologyNode, HRESULT)
    get_node_count : Proc(IMFTopology*, UInt16*, HRESULT)
    get_node : Proc(IMFTopology*, UInt16, IMFTopologyNode*, HRESULT)
    clear : Proc(IMFTopology*, HRESULT)
    clone_from : Proc(IMFTopology*, IMFTopology, HRESULT)
    get_node_by_id : Proc(IMFTopology*, UInt64, IMFTopologyNode*, HRESULT)
    get_source_node_collection : Proc(IMFTopology*, IMFCollection*, HRESULT)
    get_output_node_collection : Proc(IMFTopology*, IMFCollection*, HRESULT)
  end

  IMFTopology_GUID = "83cf873a-f6da-4bc8-823f-bacfd55dc433"
  IID_IMFTopology = LibC::GUID.new(0x83cf873a_u32, 0xf6da_u16, 0x4bc8_u16, StaticArray[0x82_u8, 0x3f_u8, 0xba_u8, 0xcf_u8, 0xd5_u8, 0x5d_u8, 0xc4_u8, 0x33_u8])
  struct IMFTopology
    lpVtbl : IMFTopologyVTbl*
  end

  struct IMFTopologyNodeVTbl
    query_interface : Proc(IMFTopologyNode*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFTopologyNode*, UInt32)
    release : Proc(IMFTopologyNode*, UInt32)
    get_item : Proc(IMFTopologyNode*, Guid*, PROPVARIANT*, HRESULT)
    get_item_type : Proc(IMFTopologyNode*, Guid*, MF_ATTRIBUTE_TYPE*, HRESULT)
    compare_item : Proc(IMFTopologyNode*, Guid*, PROPVARIANT*, LibC::BOOL*, HRESULT)
    compare : Proc(IMFTopologyNode*, IMFAttributes, MF_ATTRIBUTES_MATCH_TYPE, LibC::BOOL*, HRESULT)
    get_uint32 : Proc(IMFTopologyNode*, Guid*, UInt32*, HRESULT)
    get_uint64 : Proc(IMFTopologyNode*, Guid*, UInt64*, HRESULT)
    get_double : Proc(IMFTopologyNode*, Guid*, Float64*, HRESULT)
    get_guid : Proc(IMFTopologyNode*, Guid*, Guid*, HRESULT)
    get_string_length : Proc(IMFTopologyNode*, Guid*, UInt32*, HRESULT)
    get_string : Proc(IMFTopologyNode*, Guid*, Char*, UInt32, UInt32*, HRESULT)
    get_allocated_string : Proc(IMFTopologyNode*, Guid*, LibC::LPWSTR*, UInt32*, HRESULT)
    get_blob_size : Proc(IMFTopologyNode*, Guid*, UInt32*, HRESULT)
    get_blob : Proc(IMFTopologyNode*, Guid*, UInt8*, UInt32, UInt32*, HRESULT)
    get_allocated_blob : Proc(IMFTopologyNode*, Guid*, UInt8**, UInt32*, HRESULT)
    get_unknown : Proc(IMFTopologyNode*, Guid*, Guid*, Void**, HRESULT)
    set_item : Proc(IMFTopologyNode*, Guid*, PROPVARIANT*, HRESULT)
    delete_item : Proc(IMFTopologyNode*, Guid*, HRESULT)
    delete_all_items : Proc(IMFTopologyNode*, HRESULT)
    set_uint32 : Proc(IMFTopologyNode*, Guid*, UInt32, HRESULT)
    set_uint64 : Proc(IMFTopologyNode*, Guid*, UInt64, HRESULT)
    set_double : Proc(IMFTopologyNode*, Guid*, Float64, HRESULT)
    set_guid : Proc(IMFTopologyNode*, Guid*, Guid*, HRESULT)
    set_string : Proc(IMFTopologyNode*, Guid*, LibC::LPWSTR, HRESULT)
    set_blob : Proc(IMFTopologyNode*, Guid*, UInt8*, UInt32, HRESULT)
    set_unknown : Proc(IMFTopologyNode*, Guid*, IUnknown, HRESULT)
    lock_store : Proc(IMFTopologyNode*, HRESULT)
    unlock_store : Proc(IMFTopologyNode*, HRESULT)
    get_count : Proc(IMFTopologyNode*, UInt32*, HRESULT)
    get_item_by_index : Proc(IMFTopologyNode*, UInt32, Guid*, PROPVARIANT*, HRESULT)
    copy_all_items : Proc(IMFTopologyNode*, IMFAttributes, HRESULT)
    set_object : Proc(IMFTopologyNode*, IUnknown, HRESULT)
    get_object : Proc(IMFTopologyNode*, IUnknown*, HRESULT)
    get_node_type : Proc(IMFTopologyNode*, MF_TOPOLOGY_TYPE*, HRESULT)
    get_topo_node_id : Proc(IMFTopologyNode*, UInt64*, HRESULT)
    set_topo_node_id : Proc(IMFTopologyNode*, UInt64, HRESULT)
    get_input_count : Proc(IMFTopologyNode*, UInt32*, HRESULT)
    get_output_count : Proc(IMFTopologyNode*, UInt32*, HRESULT)
    connect_output : Proc(IMFTopologyNode*, UInt32, IMFTopologyNode, UInt32, HRESULT)
    disconnect_output : Proc(IMFTopologyNode*, UInt32, HRESULT)
    get_input : Proc(IMFTopologyNode*, UInt32, IMFTopologyNode*, UInt32*, HRESULT)
    get_output : Proc(IMFTopologyNode*, UInt32, IMFTopologyNode*, UInt32*, HRESULT)
    set_output_pref_type : Proc(IMFTopologyNode*, UInt32, IMFMediaType, HRESULT)
    get_output_pref_type : Proc(IMFTopologyNode*, UInt32, IMFMediaType*, HRESULT)
    set_input_pref_type : Proc(IMFTopologyNode*, UInt32, IMFMediaType, HRESULT)
    get_input_pref_type : Proc(IMFTopologyNode*, UInt32, IMFMediaType*, HRESULT)
    clone_from : Proc(IMFTopologyNode*, IMFTopologyNode, HRESULT)
  end

  IMFTopologyNode_GUID = "83cf873a-f6da-4bc8-823f-bacfd55dc430"
  IID_IMFTopologyNode = LibC::GUID.new(0x83cf873a_u32, 0xf6da_u16, 0x4bc8_u16, StaticArray[0x82_u8, 0x3f_u8, 0xba_u8, 0xcf_u8, 0xd5_u8, 0x5d_u8, 0xc4_u8, 0x30_u8])
  struct IMFTopologyNode
    lpVtbl : IMFTopologyNodeVTbl*
  end

  struct IMFGetServiceVTbl
    query_interface : Proc(IMFGetService*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFGetService*, UInt32)
    release : Proc(IMFGetService*, UInt32)
    get_service : Proc(IMFGetService*, Guid*, Guid*, Void**, HRESULT)
  end

  IMFGetService_GUID = "fa993888-4383-415a-a930-dd472a8cf6f7"
  IID_IMFGetService = LibC::GUID.new(0xfa993888_u32, 0x4383_u16, 0x415a_u16, StaticArray[0xa9_u8, 0x30_u8, 0xdd_u8, 0x47_u8, 0x2a_u8, 0x8c_u8, 0xf6_u8, 0xf7_u8])
  struct IMFGetService
    lpVtbl : IMFGetServiceVTbl*
  end

  struct IMFClockVTbl
    query_interface : Proc(IMFClock*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFClock*, UInt32)
    release : Proc(IMFClock*, UInt32)
    get_clock_characteristics : Proc(IMFClock*, UInt32*, HRESULT)
    get_correlated_time : Proc(IMFClock*, UInt32, Int64*, Int64*, HRESULT)
    get_continuity_key : Proc(IMFClock*, UInt32*, HRESULT)
    get_state : Proc(IMFClock*, UInt32, MFCLOCK_STATE*, HRESULT)
    get_properties : Proc(IMFClock*, MFCLOCK_PROPERTIES*, HRESULT)
  end

  IMFClock_GUID = "2eb1e945-18b8-4139-9b1a-d5d584818530"
  IID_IMFClock = LibC::GUID.new(0x2eb1e945_u32, 0x18b8_u16, 0x4139_u16, StaticArray[0x9b_u8, 0x1a_u8, 0xd5_u8, 0xd5_u8, 0x84_u8, 0x81_u8, 0x85_u8, 0x30_u8])
  struct IMFClock
    lpVtbl : IMFClockVTbl*
  end

  struct IMFPresentationClockVTbl
    query_interface : Proc(IMFPresentationClock*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFPresentationClock*, UInt32)
    release : Proc(IMFPresentationClock*, UInt32)
    get_clock_characteristics : Proc(IMFPresentationClock*, UInt32*, HRESULT)
    get_correlated_time : Proc(IMFPresentationClock*, UInt32, Int64*, Int64*, HRESULT)
    get_continuity_key : Proc(IMFPresentationClock*, UInt32*, HRESULT)
    get_state : Proc(IMFPresentationClock*, UInt32, MFCLOCK_STATE*, HRESULT)
    get_properties : Proc(IMFPresentationClock*, MFCLOCK_PROPERTIES*, HRESULT)
    set_time_source : Proc(IMFPresentationClock*, IMFPresentationTimeSource, HRESULT)
    get_time_source : Proc(IMFPresentationClock*, IMFPresentationTimeSource*, HRESULT)
    get_time : Proc(IMFPresentationClock*, Int64*, HRESULT)
    add_clock_state_sink : Proc(IMFPresentationClock*, IMFClockStateSink, HRESULT)
    remove_clock_state_sink : Proc(IMFPresentationClock*, IMFClockStateSink, HRESULT)
    start : Proc(IMFPresentationClock*, Int64, HRESULT)
    stop : Proc(IMFPresentationClock*, HRESULT)
    pause : Proc(IMFPresentationClock*, HRESULT)
  end

  IMFPresentationClock_GUID = "868ce85c-8ea9-4f55-ab82-b009a910a805"
  IID_IMFPresentationClock = LibC::GUID.new(0x868ce85c_u32, 0x8ea9_u16, 0x4f55_u16, StaticArray[0xab_u8, 0x82_u8, 0xb0_u8, 0x9_u8, 0xa9_u8, 0x10_u8, 0xa8_u8, 0x5_u8])
  struct IMFPresentationClock
    lpVtbl : IMFPresentationClockVTbl*
  end

  struct IMFPresentationTimeSourceVTbl
    query_interface : Proc(IMFPresentationTimeSource*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFPresentationTimeSource*, UInt32)
    release : Proc(IMFPresentationTimeSource*, UInt32)
    get_clock_characteristics : Proc(IMFPresentationTimeSource*, UInt32*, HRESULT)
    get_correlated_time : Proc(IMFPresentationTimeSource*, UInt32, Int64*, Int64*, HRESULT)
    get_continuity_key : Proc(IMFPresentationTimeSource*, UInt32*, HRESULT)
    get_state : Proc(IMFPresentationTimeSource*, UInt32, MFCLOCK_STATE*, HRESULT)
    get_properties : Proc(IMFPresentationTimeSource*, MFCLOCK_PROPERTIES*, HRESULT)
    get_underlying_clock : Proc(IMFPresentationTimeSource*, IMFClock*, HRESULT)
  end

  IMFPresentationTimeSource_GUID = "7ff12cce-f76f-41c2-863b-1666c8e5e139"
  IID_IMFPresentationTimeSource = LibC::GUID.new(0x7ff12cce_u32, 0xf76f_u16, 0x41c2_u16, StaticArray[0x86_u8, 0x3b_u8, 0x16_u8, 0x66_u8, 0xc8_u8, 0xe5_u8, 0xe1_u8, 0x39_u8])
  struct IMFPresentationTimeSource
    lpVtbl : IMFPresentationTimeSourceVTbl*
  end

  struct IMFClockStateSinkVTbl
    query_interface : Proc(IMFClockStateSink*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFClockStateSink*, UInt32)
    release : Proc(IMFClockStateSink*, UInt32)
    on_clock_start : Proc(IMFClockStateSink*, Int64, Int64, HRESULT)
    on_clock_stop : Proc(IMFClockStateSink*, Int64, HRESULT)
    on_clock_pause : Proc(IMFClockStateSink*, Int64, HRESULT)
    on_clock_restart : Proc(IMFClockStateSink*, Int64, HRESULT)
    on_clock_set_rate : Proc(IMFClockStateSink*, Int64, Float32, HRESULT)
  end

  IMFClockStateSink_GUID = "f6696e82-74f7-4f3d-a178-8a5e09c3659f"
  IID_IMFClockStateSink = LibC::GUID.new(0xf6696e82_u32, 0x74f7_u16, 0x4f3d_u16, StaticArray[0xa1_u8, 0x78_u8, 0x8a_u8, 0x5e_u8, 0x9_u8, 0xc3_u8, 0x65_u8, 0x9f_u8])
  struct IMFClockStateSink
    lpVtbl : IMFClockStateSinkVTbl*
  end

  struct IMFPresentationDescriptorVTbl
    query_interface : Proc(IMFPresentationDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFPresentationDescriptor*, UInt32)
    release : Proc(IMFPresentationDescriptor*, UInt32)
    get_item : Proc(IMFPresentationDescriptor*, Guid*, PROPVARIANT*, HRESULT)
    get_item_type : Proc(IMFPresentationDescriptor*, Guid*, MF_ATTRIBUTE_TYPE*, HRESULT)
    compare_item : Proc(IMFPresentationDescriptor*, Guid*, PROPVARIANT*, LibC::BOOL*, HRESULT)
    compare : Proc(IMFPresentationDescriptor*, IMFAttributes, MF_ATTRIBUTES_MATCH_TYPE, LibC::BOOL*, HRESULT)
    get_uint32 : Proc(IMFPresentationDescriptor*, Guid*, UInt32*, HRESULT)
    get_uint64 : Proc(IMFPresentationDescriptor*, Guid*, UInt64*, HRESULT)
    get_double : Proc(IMFPresentationDescriptor*, Guid*, Float64*, HRESULT)
    get_guid : Proc(IMFPresentationDescriptor*, Guid*, Guid*, HRESULT)
    get_string_length : Proc(IMFPresentationDescriptor*, Guid*, UInt32*, HRESULT)
    get_string : Proc(IMFPresentationDescriptor*, Guid*, Char*, UInt32, UInt32*, HRESULT)
    get_allocated_string : Proc(IMFPresentationDescriptor*, Guid*, LibC::LPWSTR*, UInt32*, HRESULT)
    get_blob_size : Proc(IMFPresentationDescriptor*, Guid*, UInt32*, HRESULT)
    get_blob : Proc(IMFPresentationDescriptor*, Guid*, UInt8*, UInt32, UInt32*, HRESULT)
    get_allocated_blob : Proc(IMFPresentationDescriptor*, Guid*, UInt8**, UInt32*, HRESULT)
    get_unknown : Proc(IMFPresentationDescriptor*, Guid*, Guid*, Void**, HRESULT)
    set_item : Proc(IMFPresentationDescriptor*, Guid*, PROPVARIANT*, HRESULT)
    delete_item : Proc(IMFPresentationDescriptor*, Guid*, HRESULT)
    delete_all_items : Proc(IMFPresentationDescriptor*, HRESULT)
    set_uint32 : Proc(IMFPresentationDescriptor*, Guid*, UInt32, HRESULT)
    set_uint64 : Proc(IMFPresentationDescriptor*, Guid*, UInt64, HRESULT)
    set_double : Proc(IMFPresentationDescriptor*, Guid*, Float64, HRESULT)
    set_guid : Proc(IMFPresentationDescriptor*, Guid*, Guid*, HRESULT)
    set_string : Proc(IMFPresentationDescriptor*, Guid*, LibC::LPWSTR, HRESULT)
    set_blob : Proc(IMFPresentationDescriptor*, Guid*, UInt8*, UInt32, HRESULT)
    set_unknown : Proc(IMFPresentationDescriptor*, Guid*, IUnknown, HRESULT)
    lock_store : Proc(IMFPresentationDescriptor*, HRESULT)
    unlock_store : Proc(IMFPresentationDescriptor*, HRESULT)
    get_count : Proc(IMFPresentationDescriptor*, UInt32*, HRESULT)
    get_item_by_index : Proc(IMFPresentationDescriptor*, UInt32, Guid*, PROPVARIANT*, HRESULT)
    copy_all_items : Proc(IMFPresentationDescriptor*, IMFAttributes, HRESULT)
    get_stream_descriptor_count : Proc(IMFPresentationDescriptor*, UInt32*, HRESULT)
    get_stream_descriptor_by_index : Proc(IMFPresentationDescriptor*, UInt32, LibC::BOOL*, IMFStreamDescriptor*, HRESULT)
    select_stream : Proc(IMFPresentationDescriptor*, UInt32, HRESULT)
    deselect_stream : Proc(IMFPresentationDescriptor*, UInt32, HRESULT)
    clone : Proc(IMFPresentationDescriptor*, IMFPresentationDescriptor*, HRESULT)
  end

  IMFPresentationDescriptor_GUID = "03cb2711-24d7-4db6-a17f-f3a7a479a536"
  IID_IMFPresentationDescriptor = LibC::GUID.new(0x3cb2711_u32, 0x24d7_u16, 0x4db6_u16, StaticArray[0xa1_u8, 0x7f_u8, 0xf3_u8, 0xa7_u8, 0xa4_u8, 0x79_u8, 0xa5_u8, 0x36_u8])
  struct IMFPresentationDescriptor
    lpVtbl : IMFPresentationDescriptorVTbl*
  end

  struct IMFStreamDescriptorVTbl
    query_interface : Proc(IMFStreamDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFStreamDescriptor*, UInt32)
    release : Proc(IMFStreamDescriptor*, UInt32)
    get_item : Proc(IMFStreamDescriptor*, Guid*, PROPVARIANT*, HRESULT)
    get_item_type : Proc(IMFStreamDescriptor*, Guid*, MF_ATTRIBUTE_TYPE*, HRESULT)
    compare_item : Proc(IMFStreamDescriptor*, Guid*, PROPVARIANT*, LibC::BOOL*, HRESULT)
    compare : Proc(IMFStreamDescriptor*, IMFAttributes, MF_ATTRIBUTES_MATCH_TYPE, LibC::BOOL*, HRESULT)
    get_uint32 : Proc(IMFStreamDescriptor*, Guid*, UInt32*, HRESULT)
    get_uint64 : Proc(IMFStreamDescriptor*, Guid*, UInt64*, HRESULT)
    get_double : Proc(IMFStreamDescriptor*, Guid*, Float64*, HRESULT)
    get_guid : Proc(IMFStreamDescriptor*, Guid*, Guid*, HRESULT)
    get_string_length : Proc(IMFStreamDescriptor*, Guid*, UInt32*, HRESULT)
    get_string : Proc(IMFStreamDescriptor*, Guid*, Char*, UInt32, UInt32*, HRESULT)
    get_allocated_string : Proc(IMFStreamDescriptor*, Guid*, LibC::LPWSTR*, UInt32*, HRESULT)
    get_blob_size : Proc(IMFStreamDescriptor*, Guid*, UInt32*, HRESULT)
    get_blob : Proc(IMFStreamDescriptor*, Guid*, UInt8*, UInt32, UInt32*, HRESULT)
    get_allocated_blob : Proc(IMFStreamDescriptor*, Guid*, UInt8**, UInt32*, HRESULT)
    get_unknown : Proc(IMFStreamDescriptor*, Guid*, Guid*, Void**, HRESULT)
    set_item : Proc(IMFStreamDescriptor*, Guid*, PROPVARIANT*, HRESULT)
    delete_item : Proc(IMFStreamDescriptor*, Guid*, HRESULT)
    delete_all_items : Proc(IMFStreamDescriptor*, HRESULT)
    set_uint32 : Proc(IMFStreamDescriptor*, Guid*, UInt32, HRESULT)
    set_uint64 : Proc(IMFStreamDescriptor*, Guid*, UInt64, HRESULT)
    set_double : Proc(IMFStreamDescriptor*, Guid*, Float64, HRESULT)
    set_guid : Proc(IMFStreamDescriptor*, Guid*, Guid*, HRESULT)
    set_string : Proc(IMFStreamDescriptor*, Guid*, LibC::LPWSTR, HRESULT)
    set_blob : Proc(IMFStreamDescriptor*, Guid*, UInt8*, UInt32, HRESULT)
    set_unknown : Proc(IMFStreamDescriptor*, Guid*, IUnknown, HRESULT)
    lock_store : Proc(IMFStreamDescriptor*, HRESULT)
    unlock_store : Proc(IMFStreamDescriptor*, HRESULT)
    get_count : Proc(IMFStreamDescriptor*, UInt32*, HRESULT)
    get_item_by_index : Proc(IMFStreamDescriptor*, UInt32, Guid*, PROPVARIANT*, HRESULT)
    copy_all_items : Proc(IMFStreamDescriptor*, IMFAttributes, HRESULT)
    get_stream_identifier : Proc(IMFStreamDescriptor*, UInt32*, HRESULT)
    get_media_type_handler : Proc(IMFStreamDescriptor*, IMFMediaTypeHandler*, HRESULT)
  end

  IMFStreamDescriptor_GUID = "56c03d9c-9dbb-45f5-ab4b-d80f47c05938"
  IID_IMFStreamDescriptor = LibC::GUID.new(0x56c03d9c_u32, 0x9dbb_u16, 0x45f5_u16, StaticArray[0xab_u8, 0x4b_u8, 0xd8_u8, 0xf_u8, 0x47_u8, 0xc0_u8, 0x59_u8, 0x38_u8])
  struct IMFStreamDescriptor
    lpVtbl : IMFStreamDescriptorVTbl*
  end

  struct IMFMediaTypeHandlerVTbl
    query_interface : Proc(IMFMediaTypeHandler*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaTypeHandler*, UInt32)
    release : Proc(IMFMediaTypeHandler*, UInt32)
    is_media_type_supported : Proc(IMFMediaTypeHandler*, IMFMediaType, IMFMediaType*, HRESULT)
    get_media_type_count : Proc(IMFMediaTypeHandler*, UInt32*, HRESULT)
    get_media_type_by_index : Proc(IMFMediaTypeHandler*, UInt32, IMFMediaType*, HRESULT)
    set_current_media_type : Proc(IMFMediaTypeHandler*, IMFMediaType, HRESULT)
    get_current_media_type : Proc(IMFMediaTypeHandler*, IMFMediaType*, HRESULT)
    get_major_type : Proc(IMFMediaTypeHandler*, Guid*, HRESULT)
  end

  IMFMediaTypeHandler_GUID = "e93dcf6c-4b07-4e1e-8123-aa16ed6eadf5"
  IID_IMFMediaTypeHandler = LibC::GUID.new(0xe93dcf6c_u32, 0x4b07_u16, 0x4e1e_u16, StaticArray[0x81_u8, 0x23_u8, 0xaa_u8, 0x16_u8, 0xed_u8, 0x6e_u8, 0xad_u8, 0xf5_u8])
  struct IMFMediaTypeHandler
    lpVtbl : IMFMediaTypeHandlerVTbl*
  end

  struct IMFTimerVTbl
    query_interface : Proc(IMFTimer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFTimer*, UInt32)
    release : Proc(IMFTimer*, UInt32)
    set_timer : Proc(IMFTimer*, UInt32, Int64, IMFAsyncCallback, IUnknown, IUnknown*, HRESULT)
    cancel_timer : Proc(IMFTimer*, IUnknown, HRESULT)
  end

  IMFTimer_GUID = "e56e4cbd-8f70-49d8-a0f8-edb3d6ab9bf2"
  IID_IMFTimer = LibC::GUID.new(0xe56e4cbd_u32, 0x8f70_u16, 0x49d8_u16, StaticArray[0xa0_u8, 0xf8_u8, 0xed_u8, 0xb3_u8, 0xd6_u8, 0xab_u8, 0x9b_u8, 0xf2_u8])
  struct IMFTimer
    lpVtbl : IMFTimerVTbl*
  end

  struct IMFShutdownVTbl
    query_interface : Proc(IMFShutdown*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFShutdown*, UInt32)
    release : Proc(IMFShutdown*, UInt32)
    shutdown : Proc(IMFShutdown*, HRESULT)
    get_shutdown_status : Proc(IMFShutdown*, MFSHUTDOWN_STATUS*, HRESULT)
  end

  IMFShutdown_GUID = "97ec2ea4-0e42-4937-97ac-9d6d328824e1"
  IID_IMFShutdown = LibC::GUID.new(0x97ec2ea4_u32, 0xe42_u16, 0x4937_u16, StaticArray[0x97_u8, 0xac_u8, 0x9d_u8, 0x6d_u8, 0x32_u8, 0x88_u8, 0x24_u8, 0xe1_u8])
  struct IMFShutdown
    lpVtbl : IMFShutdownVTbl*
  end

  struct IMFTopoLoaderVTbl
    query_interface : Proc(IMFTopoLoader*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFTopoLoader*, UInt32)
    release : Proc(IMFTopoLoader*, UInt32)
    load : Proc(IMFTopoLoader*, IMFTopology, IMFTopology*, IMFTopology, HRESULT)
  end

  IMFTopoLoader_GUID = "de9a6157-f660-4643-b56a-df9f7998c7cd"
  IID_IMFTopoLoader = LibC::GUID.new(0xde9a6157_u32, 0xf660_u16, 0x4643_u16, StaticArray[0xb5_u8, 0x6a_u8, 0xdf_u8, 0x9f_u8, 0x79_u8, 0x98_u8, 0xc7_u8, 0xcd_u8])
  struct IMFTopoLoader
    lpVtbl : IMFTopoLoaderVTbl*
  end

  struct IMFContentProtectionManagerVTbl
    query_interface : Proc(IMFContentProtectionManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFContentProtectionManager*, UInt32)
    release : Proc(IMFContentProtectionManager*, UInt32)
    begin_enable_content : Proc(IMFContentProtectionManager*, IMFActivate, IMFTopology, IMFAsyncCallback, IUnknown, HRESULT)
    end_enable_content : Proc(IMFContentProtectionManager*, IMFAsyncResult, HRESULT)
  end

  IMFContentProtectionManager_GUID = "acf92459-6a61-42bd-b57c-b43e51203cb0"
  IID_IMFContentProtectionManager = LibC::GUID.new(0xacf92459_u32, 0x6a61_u16, 0x42bd_u16, StaticArray[0xb5_u8, 0x7c_u8, 0xb4_u8, 0x3e_u8, 0x51_u8, 0x20_u8, 0x3c_u8, 0xb0_u8])
  struct IMFContentProtectionManager
    lpVtbl : IMFContentProtectionManagerVTbl*
  end

  struct IMFContentEnablerVTbl
    query_interface : Proc(IMFContentEnabler*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFContentEnabler*, UInt32)
    release : Proc(IMFContentEnabler*, UInt32)
    get_enable_type : Proc(IMFContentEnabler*, Guid*, HRESULT)
    get_enable_url : Proc(IMFContentEnabler*, LibC::LPWSTR*, UInt32*, MF_URL_TRUST_STATUS*, HRESULT)
    get_enable_data : Proc(IMFContentEnabler*, UInt8**, UInt32*, HRESULT)
    is_automatic_supported : Proc(IMFContentEnabler*, LibC::BOOL*, HRESULT)
    automatic_enable : Proc(IMFContentEnabler*, HRESULT)
    monitor_enable : Proc(IMFContentEnabler*, HRESULT)
    cancel : Proc(IMFContentEnabler*, HRESULT)
  end

  IMFContentEnabler_GUID = "d3c4ef59-49ce-4381-9071-d5bcd044c770"
  IID_IMFContentEnabler = LibC::GUID.new(0xd3c4ef59_u32, 0x49ce_u16, 0x4381_u16, StaticArray[0x90_u8, 0x71_u8, 0xd5_u8, 0xbc_u8, 0xd0_u8, 0x44_u8, 0xc7_u8, 0x70_u8])
  struct IMFContentEnabler
    lpVtbl : IMFContentEnablerVTbl*
  end

  struct IMFMetadataVTbl
    query_interface : Proc(IMFMetadata*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMetadata*, UInt32)
    release : Proc(IMFMetadata*, UInt32)
    set_language : Proc(IMFMetadata*, LibC::LPWSTR, HRESULT)
    get_language : Proc(IMFMetadata*, LibC::LPWSTR*, HRESULT)
    get_all_languages : Proc(IMFMetadata*, PROPVARIANT*, HRESULT)
    set_property : Proc(IMFMetadata*, LibC::LPWSTR, PROPVARIANT*, HRESULT)
    get_property : Proc(IMFMetadata*, LibC::LPWSTR, PROPVARIANT*, HRESULT)
    delete_property : Proc(IMFMetadata*, LibC::LPWSTR, HRESULT)
    get_all_property_names : Proc(IMFMetadata*, PROPVARIANT*, HRESULT)
  end

  IMFMetadata_GUID = "f88cfb8c-ef16-4991-b450-cb8c69e51704"
  IID_IMFMetadata = LibC::GUID.new(0xf88cfb8c_u32, 0xef16_u16, 0x4991_u16, StaticArray[0xb4_u8, 0x50_u8, 0xcb_u8, 0x8c_u8, 0x69_u8, 0xe5_u8, 0x17_u8, 0x4_u8])
  struct IMFMetadata
    lpVtbl : IMFMetadataVTbl*
  end

  struct IMFMetadataProviderVTbl
    query_interface : Proc(IMFMetadataProvider*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMetadataProvider*, UInt32)
    release : Proc(IMFMetadataProvider*, UInt32)
    get_mf_metadata : Proc(IMFMetadataProvider*, IMFPresentationDescriptor, UInt32, UInt32, IMFMetadata*, HRESULT)
  end

  IMFMetadataProvider_GUID = "56181d2d-e221-4adb-b1c8-3cee6a53f76f"
  IID_IMFMetadataProvider = LibC::GUID.new(0x56181d2d_u32, 0xe221_u16, 0x4adb_u16, StaticArray[0xb1_u8, 0xc8_u8, 0x3c_u8, 0xee_u8, 0x6a_u8, 0x53_u8, 0xf7_u8, 0x6f_u8])
  struct IMFMetadataProvider
    lpVtbl : IMFMetadataProviderVTbl*
  end

  struct IMFRateSupportVTbl
    query_interface : Proc(IMFRateSupport*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFRateSupport*, UInt32)
    release : Proc(IMFRateSupport*, UInt32)
    get_slowest_rate : Proc(IMFRateSupport*, MFRATE_DIRECTION, LibC::BOOL, Float32*, HRESULT)
    get_fastest_rate : Proc(IMFRateSupport*, MFRATE_DIRECTION, LibC::BOOL, Float32*, HRESULT)
    is_rate_supported : Proc(IMFRateSupport*, LibC::BOOL, Float32, Float32*, HRESULT)
  end

  IMFRateSupport_GUID = "0a9ccdbc-d797-4563-9667-94ec5d79292d"
  IID_IMFRateSupport = LibC::GUID.new(0xa9ccdbc_u32, 0xd797_u16, 0x4563_u16, StaticArray[0x96_u8, 0x67_u8, 0x94_u8, 0xec_u8, 0x5d_u8, 0x79_u8, 0x29_u8, 0x2d_u8])
  struct IMFRateSupport
    lpVtbl : IMFRateSupportVTbl*
  end

  struct IMFRateControlVTbl
    query_interface : Proc(IMFRateControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFRateControl*, UInt32)
    release : Proc(IMFRateControl*, UInt32)
    set_rate : Proc(IMFRateControl*, LibC::BOOL, Float32, HRESULT)
    get_rate : Proc(IMFRateControl*, LibC::BOOL*, Float32*, HRESULT)
  end

  IMFRateControl_GUID = "88ddcd21-03c3-4275-91ed-55ee3929328f"
  IID_IMFRateControl = LibC::GUID.new(0x88ddcd21_u32, 0x3c3_u16, 0x4275_u16, StaticArray[0x91_u8, 0xed_u8, 0x55_u8, 0xee_u8, 0x39_u8, 0x29_u8, 0x32_u8, 0x8f_u8])
  struct IMFRateControl
    lpVtbl : IMFRateControlVTbl*
  end

  struct IMFTimecodeTranslateVTbl
    query_interface : Proc(IMFTimecodeTranslate*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFTimecodeTranslate*, UInt32)
    release : Proc(IMFTimecodeTranslate*, UInt32)
    begin_convert_timecode_to_hns : Proc(IMFTimecodeTranslate*, PROPVARIANT*, IMFAsyncCallback, IUnknown, HRESULT)
    end_convert_timecode_to_hns : Proc(IMFTimecodeTranslate*, IMFAsyncResult, Int64*, HRESULT)
    begin_convert_hns_to_timecode : Proc(IMFTimecodeTranslate*, Int64, IMFAsyncCallback, IUnknown, HRESULT)
    end_convert_hns_to_timecode : Proc(IMFTimecodeTranslate*, IMFAsyncResult, PROPVARIANT*, HRESULT)
  end

  IMFTimecodeTranslate_GUID = "ab9d8661-f7e8-4ef4-9861-89f334f94e74"
  IID_IMFTimecodeTranslate = LibC::GUID.new(0xab9d8661_u32, 0xf7e8_u16, 0x4ef4_u16, StaticArray[0x98_u8, 0x61_u8, 0x89_u8, 0xf3_u8, 0x34_u8, 0xf9_u8, 0x4e_u8, 0x74_u8])
  struct IMFTimecodeTranslate
    lpVtbl : IMFTimecodeTranslateVTbl*
  end

  struct IMFSeekInfoVTbl
    query_interface : Proc(IMFSeekInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSeekInfo*, UInt32)
    release : Proc(IMFSeekInfo*, UInt32)
    get_nearest_key_frames : Proc(IMFSeekInfo*, Guid*, PROPVARIANT*, PROPVARIANT*, PROPVARIANT*, HRESULT)
  end

  IMFSeekInfo_GUID = "26afea53-d9ed-42b5-ab80-e64f9ee34779"
  IID_IMFSeekInfo = LibC::GUID.new(0x26afea53_u32, 0xd9ed_u16, 0x42b5_u16, StaticArray[0xab_u8, 0x80_u8, 0xe6_u8, 0x4f_u8, 0x9e_u8, 0xe3_u8, 0x47_u8, 0x79_u8])
  struct IMFSeekInfo
    lpVtbl : IMFSeekInfoVTbl*
  end

  struct IMFSimpleAudioVolumeVTbl
    query_interface : Proc(IMFSimpleAudioVolume*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSimpleAudioVolume*, UInt32)
    release : Proc(IMFSimpleAudioVolume*, UInt32)
    set_master_volume : Proc(IMFSimpleAudioVolume*, Float32, HRESULT)
    get_master_volume : Proc(IMFSimpleAudioVolume*, Float32*, HRESULT)
    set_mute : Proc(IMFSimpleAudioVolume*, LibC::BOOL, HRESULT)
    get_mute : Proc(IMFSimpleAudioVolume*, LibC::BOOL*, HRESULT)
  end

  IMFSimpleAudioVolume_GUID = "089edf13-cf71-4338-8d13-9e569dbdc319"
  IID_IMFSimpleAudioVolume = LibC::GUID.new(0x89edf13_u32, 0xcf71_u16, 0x4338_u16, StaticArray[0x8d_u8, 0x13_u8, 0x9e_u8, 0x56_u8, 0x9d_u8, 0xbd_u8, 0xc3_u8, 0x19_u8])
  struct IMFSimpleAudioVolume
    lpVtbl : IMFSimpleAudioVolumeVTbl*
  end

  struct IMFAudioStreamVolumeVTbl
    query_interface : Proc(IMFAudioStreamVolume*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFAudioStreamVolume*, UInt32)
    release : Proc(IMFAudioStreamVolume*, UInt32)
    get_channel_count : Proc(IMFAudioStreamVolume*, UInt32*, HRESULT)
    set_channel_volume : Proc(IMFAudioStreamVolume*, UInt32, Float32, HRESULT)
    get_channel_volume : Proc(IMFAudioStreamVolume*, UInt32, Float32*, HRESULT)
    set_all_volumes : Proc(IMFAudioStreamVolume*, UInt32, Float32*, HRESULT)
    get_all_volumes : Proc(IMFAudioStreamVolume*, UInt32, Float32*, HRESULT)
  end

  IMFAudioStreamVolume_GUID = "76b1bbdb-4ec8-4f36-b106-70a9316df593"
  IID_IMFAudioStreamVolume = LibC::GUID.new(0x76b1bbdb_u32, 0x4ec8_u16, 0x4f36_u16, StaticArray[0xb1_u8, 0x6_u8, 0x70_u8, 0xa9_u8, 0x31_u8, 0x6d_u8, 0xf5_u8, 0x93_u8])
  struct IMFAudioStreamVolume
    lpVtbl : IMFAudioStreamVolumeVTbl*
  end

  struct IMFAudioPolicyVTbl
    query_interface : Proc(IMFAudioPolicy*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFAudioPolicy*, UInt32)
    release : Proc(IMFAudioPolicy*, UInt32)
    set_grouping_param : Proc(IMFAudioPolicy*, Guid*, HRESULT)
    get_grouping_param : Proc(IMFAudioPolicy*, Guid*, HRESULT)
    set_display_name : Proc(IMFAudioPolicy*, LibC::LPWSTR, HRESULT)
    get_display_name : Proc(IMFAudioPolicy*, LibC::LPWSTR*, HRESULT)
    set_icon_path : Proc(IMFAudioPolicy*, LibC::LPWSTR, HRESULT)
    get_icon_path : Proc(IMFAudioPolicy*, LibC::LPWSTR*, HRESULT)
  end

  IMFAudioPolicy_GUID = "a0638c2b-6465-4395-9ae7-a321a9fd2856"
  IID_IMFAudioPolicy = LibC::GUID.new(0xa0638c2b_u32, 0x6465_u16, 0x4395_u16, StaticArray[0x9a_u8, 0xe7_u8, 0xa3_u8, 0x21_u8, 0xa9_u8, 0xfd_u8, 0x28_u8, 0x56_u8])
  struct IMFAudioPolicy
    lpVtbl : IMFAudioPolicyVTbl*
  end

  struct IMFSampleGrabberSinkCallbackVTbl
    query_interface : Proc(IMFSampleGrabberSinkCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSampleGrabberSinkCallback*, UInt32)
    release : Proc(IMFSampleGrabberSinkCallback*, UInt32)
    on_clock_start : Proc(IMFSampleGrabberSinkCallback*, Int64, Int64, HRESULT)
    on_clock_stop : Proc(IMFSampleGrabberSinkCallback*, Int64, HRESULT)
    on_clock_pause : Proc(IMFSampleGrabberSinkCallback*, Int64, HRESULT)
    on_clock_restart : Proc(IMFSampleGrabberSinkCallback*, Int64, HRESULT)
    on_clock_set_rate : Proc(IMFSampleGrabberSinkCallback*, Int64, Float32, HRESULT)
    on_set_presentation_clock : Proc(IMFSampleGrabberSinkCallback*, IMFPresentationClock, HRESULT)
    on_process_sample : Proc(IMFSampleGrabberSinkCallback*, Guid*, UInt32, Int64, Int64, UInt8*, UInt32, HRESULT)
    on_shutdown : Proc(IMFSampleGrabberSinkCallback*, HRESULT)
  end

  IMFSampleGrabberSinkCallback_GUID = "8c7b80bf-ee42-4b59-b1df-55668e1bdca8"
  IID_IMFSampleGrabberSinkCallback = LibC::GUID.new(0x8c7b80bf_u32, 0xee42_u16, 0x4b59_u16, StaticArray[0xb1_u8, 0xdf_u8, 0x55_u8, 0x66_u8, 0x8e_u8, 0x1b_u8, 0xdc_u8, 0xa8_u8])
  struct IMFSampleGrabberSinkCallback
    lpVtbl : IMFSampleGrabberSinkCallbackVTbl*
  end

  struct IMFSampleGrabberSinkCallback2VTbl
    query_interface : Proc(IMFSampleGrabberSinkCallback2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSampleGrabberSinkCallback2*, UInt32)
    release : Proc(IMFSampleGrabberSinkCallback2*, UInt32)
    on_clock_start : Proc(IMFSampleGrabberSinkCallback2*, Int64, Int64, HRESULT)
    on_clock_stop : Proc(IMFSampleGrabberSinkCallback2*, Int64, HRESULT)
    on_clock_pause : Proc(IMFSampleGrabberSinkCallback2*, Int64, HRESULT)
    on_clock_restart : Proc(IMFSampleGrabberSinkCallback2*, Int64, HRESULT)
    on_clock_set_rate : Proc(IMFSampleGrabberSinkCallback2*, Int64, Float32, HRESULT)
    on_set_presentation_clock : Proc(IMFSampleGrabberSinkCallback2*, IMFPresentationClock, HRESULT)
    on_process_sample : Proc(IMFSampleGrabberSinkCallback2*, Guid*, UInt32, Int64, Int64, UInt8*, UInt32, HRESULT)
    on_shutdown : Proc(IMFSampleGrabberSinkCallback2*, HRESULT)
    on_process_sample_ex : Proc(IMFSampleGrabberSinkCallback2*, Guid*, UInt32, Int64, Int64, UInt8*, UInt32, IMFAttributes, HRESULT)
  end

  IMFSampleGrabberSinkCallback2_GUID = "ca86aa50-c46e-429e-ab27-16d6ac6844cb"
  IID_IMFSampleGrabberSinkCallback2 = LibC::GUID.new(0xca86aa50_u32, 0xc46e_u16, 0x429e_u16, StaticArray[0xab_u8, 0x27_u8, 0x16_u8, 0xd6_u8, 0xac_u8, 0x68_u8, 0x44_u8, 0xcb_u8])
  struct IMFSampleGrabberSinkCallback2
    lpVtbl : IMFSampleGrabberSinkCallback2VTbl*
  end

  struct IMFWorkQueueServicesVTbl
    query_interface : Proc(IMFWorkQueueServices*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFWorkQueueServices*, UInt32)
    release : Proc(IMFWorkQueueServices*, UInt32)
    begin_register_topology_work_queues_with_mmcss : Proc(IMFWorkQueueServices*, IMFAsyncCallback, IUnknown, HRESULT)
    end_register_topology_work_queues_with_mmcss : Proc(IMFWorkQueueServices*, IMFAsyncResult, HRESULT)
    begin_unregister_topology_work_queues_with_mmcss : Proc(IMFWorkQueueServices*, IMFAsyncCallback, IUnknown, HRESULT)
    end_unregister_topology_work_queues_with_mmcss : Proc(IMFWorkQueueServices*, IMFAsyncResult, HRESULT)
    get_topology_work_queue_mmcss_class : Proc(IMFWorkQueueServices*, UInt32, Char*, UInt32*, HRESULT)
    get_topology_work_queue_mmcss_task_id : Proc(IMFWorkQueueServices*, UInt32, UInt32*, HRESULT)
    begin_register_platform_work_queue_with_mmcss : Proc(IMFWorkQueueServices*, UInt32, LibC::LPWSTR, UInt32, IMFAsyncCallback, IUnknown, HRESULT)
    end_register_platform_work_queue_with_mmcss : Proc(IMFWorkQueueServices*, IMFAsyncResult, UInt32*, HRESULT)
    begin_unregister_platform_work_queue_with_mmcss : Proc(IMFWorkQueueServices*, UInt32, IMFAsyncCallback, IUnknown, HRESULT)
    end_unregister_platform_work_queue_with_mmcss : Proc(IMFWorkQueueServices*, IMFAsyncResult, HRESULT)
    get_plaftorm_work_queue_mmcss_class : Proc(IMFWorkQueueServices*, UInt32, Char*, UInt32*, HRESULT)
    get_platform_work_queue_mmcss_task_id : Proc(IMFWorkQueueServices*, UInt32, UInt32*, HRESULT)
  end

  IMFWorkQueueServices_GUID = "35fe1bb8-a3a9-40fe-bbec-eb569c9ccca3"
  IID_IMFWorkQueueServices = LibC::GUID.new(0x35fe1bb8_u32, 0xa3a9_u16, 0x40fe_u16, StaticArray[0xbb_u8, 0xec_u8, 0xeb_u8, 0x56_u8, 0x9c_u8, 0x9c_u8, 0xcc_u8, 0xa3_u8])
  struct IMFWorkQueueServices
    lpVtbl : IMFWorkQueueServicesVTbl*
  end

  struct IMFWorkQueueServicesExVTbl
    query_interface : Proc(IMFWorkQueueServicesEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFWorkQueueServicesEx*, UInt32)
    release : Proc(IMFWorkQueueServicesEx*, UInt32)
    begin_register_topology_work_queues_with_mmcss : Proc(IMFWorkQueueServicesEx*, IMFAsyncCallback, IUnknown, HRESULT)
    end_register_topology_work_queues_with_mmcss : Proc(IMFWorkQueueServicesEx*, IMFAsyncResult, HRESULT)
    begin_unregister_topology_work_queues_with_mmcss : Proc(IMFWorkQueueServicesEx*, IMFAsyncCallback, IUnknown, HRESULT)
    end_unregister_topology_work_queues_with_mmcss : Proc(IMFWorkQueueServicesEx*, IMFAsyncResult, HRESULT)
    get_topology_work_queue_mmcss_class : Proc(IMFWorkQueueServicesEx*, UInt32, Char*, UInt32*, HRESULT)
    get_topology_work_queue_mmcss_task_id : Proc(IMFWorkQueueServicesEx*, UInt32, UInt32*, HRESULT)
    begin_register_platform_work_queue_with_mmcss : Proc(IMFWorkQueueServicesEx*, UInt32, LibC::LPWSTR, UInt32, IMFAsyncCallback, IUnknown, HRESULT)
    end_register_platform_work_queue_with_mmcss : Proc(IMFWorkQueueServicesEx*, IMFAsyncResult, UInt32*, HRESULT)
    begin_unregister_platform_work_queue_with_mmcss : Proc(IMFWorkQueueServicesEx*, UInt32, IMFAsyncCallback, IUnknown, HRESULT)
    end_unregister_platform_work_queue_with_mmcss : Proc(IMFWorkQueueServicesEx*, IMFAsyncResult, HRESULT)
    get_plaftorm_work_queue_mmcss_class : Proc(IMFWorkQueueServicesEx*, UInt32, Char*, UInt32*, HRESULT)
    get_platform_work_queue_mmcss_task_id : Proc(IMFWorkQueueServicesEx*, UInt32, UInt32*, HRESULT)
    get_topology_work_queue_mmcss_priority : Proc(IMFWorkQueueServicesEx*, UInt32, Int32*, HRESULT)
    begin_register_platform_work_queue_with_mmcss_ex : Proc(IMFWorkQueueServicesEx*, UInt32, LibC::LPWSTR, UInt32, Int32, IMFAsyncCallback, IUnknown, HRESULT)
    get_platform_work_queue_mmcss_priority : Proc(IMFWorkQueueServicesEx*, UInt32, Int32*, HRESULT)
  end

  IMFWorkQueueServicesEx_GUID = "96bf961b-40fe-42f1-ba9d-320238b49700"
  IID_IMFWorkQueueServicesEx = LibC::GUID.new(0x96bf961b_u32, 0x40fe_u16, 0x42f1_u16, StaticArray[0xba_u8, 0x9d_u8, 0x32_u8, 0x2_u8, 0x38_u8, 0xb4_u8, 0x97_u8, 0x0_u8])
  struct IMFWorkQueueServicesEx
    lpVtbl : IMFWorkQueueServicesExVTbl*
  end

  struct IMFQualityManagerVTbl
    query_interface : Proc(IMFQualityManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFQualityManager*, UInt32)
    release : Proc(IMFQualityManager*, UInt32)
    notify_topology : Proc(IMFQualityManager*, IMFTopology, HRESULT)
    notify_presentation_clock : Proc(IMFQualityManager*, IMFPresentationClock, HRESULT)
    notify_process_input : Proc(IMFQualityManager*, IMFTopologyNode, Int32, IMFSample, HRESULT)
    notify_process_output : Proc(IMFQualityManager*, IMFTopologyNode, Int32, IMFSample, HRESULT)
    notify_quality_event : Proc(IMFQualityManager*, IUnknown, IMFMediaEvent, HRESULT)
    shutdown : Proc(IMFQualityManager*, HRESULT)
  end

  IMFQualityManager_GUID = "8d009d86-5b9f-4115-b1fc-9f80d52ab8ab"
  IID_IMFQualityManager = LibC::GUID.new(0x8d009d86_u32, 0x5b9f_u16, 0x4115_u16, StaticArray[0xb1_u8, 0xfc_u8, 0x9f_u8, 0x80_u8, 0xd5_u8, 0x2a_u8, 0xb8_u8, 0xab_u8])
  struct IMFQualityManager
    lpVtbl : IMFQualityManagerVTbl*
  end

  struct IMFQualityAdviseVTbl
    query_interface : Proc(IMFQualityAdvise*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFQualityAdvise*, UInt32)
    release : Proc(IMFQualityAdvise*, UInt32)
    set_drop_mode : Proc(IMFQualityAdvise*, MF_QUALITY_DROP_MODE, HRESULT)
    set_quality_level : Proc(IMFQualityAdvise*, MF_QUALITY_LEVEL, HRESULT)
    get_drop_mode : Proc(IMFQualityAdvise*, MF_QUALITY_DROP_MODE*, HRESULT)
    get_quality_level : Proc(IMFQualityAdvise*, MF_QUALITY_LEVEL*, HRESULT)
    drop_time : Proc(IMFQualityAdvise*, Int64, HRESULT)
  end

  IMFQualityAdvise_GUID = "ec15e2e9-e36b-4f7c-8758-77d452ef4ce7"
  IID_IMFQualityAdvise = LibC::GUID.new(0xec15e2e9_u32, 0xe36b_u16, 0x4f7c_u16, StaticArray[0x87_u8, 0x58_u8, 0x77_u8, 0xd4_u8, 0x52_u8, 0xef_u8, 0x4c_u8, 0xe7_u8])
  struct IMFQualityAdvise
    lpVtbl : IMFQualityAdviseVTbl*
  end

  struct IMFQualityAdvise2VTbl
    query_interface : Proc(IMFQualityAdvise2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFQualityAdvise2*, UInt32)
    release : Proc(IMFQualityAdvise2*, UInt32)
    set_drop_mode : Proc(IMFQualityAdvise2*, MF_QUALITY_DROP_MODE, HRESULT)
    set_quality_level : Proc(IMFQualityAdvise2*, MF_QUALITY_LEVEL, HRESULT)
    get_drop_mode : Proc(IMFQualityAdvise2*, MF_QUALITY_DROP_MODE*, HRESULT)
    get_quality_level : Proc(IMFQualityAdvise2*, MF_QUALITY_LEVEL*, HRESULT)
    drop_time : Proc(IMFQualityAdvise2*, Int64, HRESULT)
    notify_quality_event : Proc(IMFQualityAdvise2*, IMFMediaEvent, UInt32*, HRESULT)
  end

  IMFQualityAdvise2_GUID = "f3706f0d-8ea2-4886-8000-7155e9ec2eae"
  IID_IMFQualityAdvise2 = LibC::GUID.new(0xf3706f0d_u32, 0x8ea2_u16, 0x4886_u16, StaticArray[0x80_u8, 0x0_u8, 0x71_u8, 0x55_u8, 0xe9_u8, 0xec_u8, 0x2e_u8, 0xae_u8])
  struct IMFQualityAdvise2
    lpVtbl : IMFQualityAdvise2VTbl*
  end

  struct IMFQualityAdviseLimitsVTbl
    query_interface : Proc(IMFQualityAdviseLimits*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFQualityAdviseLimits*, UInt32)
    release : Proc(IMFQualityAdviseLimits*, UInt32)
    get_maximum_drop_mode : Proc(IMFQualityAdviseLimits*, MF_QUALITY_DROP_MODE*, HRESULT)
    get_minimum_quality_level : Proc(IMFQualityAdviseLimits*, MF_QUALITY_LEVEL*, HRESULT)
  end

  IMFQualityAdviseLimits_GUID = "dfcd8e4d-30b5-4567-acaa-8eb5b7853dc9"
  IID_IMFQualityAdviseLimits = LibC::GUID.new(0xdfcd8e4d_u32, 0x30b5_u16, 0x4567_u16, StaticArray[0xac_u8, 0xaa_u8, 0x8e_u8, 0xb5_u8, 0xb7_u8, 0x85_u8, 0x3d_u8, 0xc9_u8])
  struct IMFQualityAdviseLimits
    lpVtbl : IMFQualityAdviseLimitsVTbl*
  end

  struct IMFRealTimeClientVTbl
    query_interface : Proc(IMFRealTimeClient*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFRealTimeClient*, UInt32)
    release : Proc(IMFRealTimeClient*, UInt32)
    register_threads : Proc(IMFRealTimeClient*, UInt32, LibC::LPWSTR, HRESULT)
    unregister_threads : Proc(IMFRealTimeClient*, HRESULT)
    set_work_queue : Proc(IMFRealTimeClient*, UInt32, HRESULT)
  end

  IMFRealTimeClient_GUID = "2347d60b-3fb5-480c-8803-8df3adcd3ef0"
  IID_IMFRealTimeClient = LibC::GUID.new(0x2347d60b_u32, 0x3fb5_u16, 0x480c_u16, StaticArray[0x88_u8, 0x3_u8, 0x8d_u8, 0xf3_u8, 0xad_u8, 0xcd_u8, 0x3e_u8, 0xf0_u8])
  struct IMFRealTimeClient
    lpVtbl : IMFRealTimeClientVTbl*
  end

  struct IMFRealTimeClientExVTbl
    query_interface : Proc(IMFRealTimeClientEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFRealTimeClientEx*, UInt32)
    release : Proc(IMFRealTimeClientEx*, UInt32)
    register_threads_ex : Proc(IMFRealTimeClientEx*, UInt32*, LibC::LPWSTR, Int32, HRESULT)
    unregister_threads : Proc(IMFRealTimeClientEx*, HRESULT)
    set_work_queue_ex : Proc(IMFRealTimeClientEx*, UInt32, Int32, HRESULT)
  end

  IMFRealTimeClientEx_GUID = "03910848-ab16-4611-b100-17b88ae2f248"
  IID_IMFRealTimeClientEx = LibC::GUID.new(0x3910848_u32, 0xab16_u16, 0x4611_u16, StaticArray[0xb1_u8, 0x0_u8, 0x17_u8, 0xb8_u8, 0x8a_u8, 0xe2_u8, 0xf2_u8, 0x48_u8])
  struct IMFRealTimeClientEx
    lpVtbl : IMFRealTimeClientExVTbl*
  end

  struct IMFSequencerSourceVTbl
    query_interface : Proc(IMFSequencerSource*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSequencerSource*, UInt32)
    release : Proc(IMFSequencerSource*, UInt32)
    append_topology : Proc(IMFSequencerSource*, IMFTopology, UInt32, UInt32*, HRESULT)
    delete_topology : Proc(IMFSequencerSource*, UInt32, HRESULT)
    get_presentation_context : Proc(IMFSequencerSource*, IMFPresentationDescriptor, UInt32*, IMFTopology*, HRESULT)
    update_topology : Proc(IMFSequencerSource*, UInt32, IMFTopology, HRESULT)
    update_topology_flags : Proc(IMFSequencerSource*, UInt32, UInt32, HRESULT)
  end

  IMFSequencerSource_GUID = "197cd219-19cb-4de1-a64c-acf2edcbe59e"
  IID_IMFSequencerSource = LibC::GUID.new(0x197cd219_u32, 0x19cb_u16, 0x4de1_u16, StaticArray[0xa6_u8, 0x4c_u8, 0xac_u8, 0xf2_u8, 0xed_u8, 0xcb_u8, 0xe5_u8, 0x9e_u8])
  struct IMFSequencerSource
    lpVtbl : IMFSequencerSourceVTbl*
  end

  struct IMFMediaSourceTopologyProviderVTbl
    query_interface : Proc(IMFMediaSourceTopologyProvider*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaSourceTopologyProvider*, UInt32)
    release : Proc(IMFMediaSourceTopologyProvider*, UInt32)
    get_media_source_topology : Proc(IMFMediaSourceTopologyProvider*, IMFPresentationDescriptor, IMFTopology*, HRESULT)
  end

  IMFMediaSourceTopologyProvider_GUID = "0e1d6009-c9f3-442d-8c51-a42d2d49452f"
  IID_IMFMediaSourceTopologyProvider = LibC::GUID.new(0xe1d6009_u32, 0xc9f3_u16, 0x442d_u16, StaticArray[0x8c_u8, 0x51_u8, 0xa4_u8, 0x2d_u8, 0x2d_u8, 0x49_u8, 0x45_u8, 0x2f_u8])
  struct IMFMediaSourceTopologyProvider
    lpVtbl : IMFMediaSourceTopologyProviderVTbl*
  end

  struct IMFMediaSourcePresentationProviderVTbl
    query_interface : Proc(IMFMediaSourcePresentationProvider*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaSourcePresentationProvider*, UInt32)
    release : Proc(IMFMediaSourcePresentationProvider*, UInt32)
    force_end_of_presentation : Proc(IMFMediaSourcePresentationProvider*, IMFPresentationDescriptor, HRESULT)
  end

  IMFMediaSourcePresentationProvider_GUID = "0e1d600a-c9f3-442d-8c51-a42d2d49452f"
  IID_IMFMediaSourcePresentationProvider = LibC::GUID.new(0xe1d600a_u32, 0xc9f3_u16, 0x442d_u16, StaticArray[0x8c_u8, 0x51_u8, 0xa4_u8, 0x2d_u8, 0x2d_u8, 0x49_u8, 0x45_u8, 0x2f_u8])
  struct IMFMediaSourcePresentationProvider
    lpVtbl : IMFMediaSourcePresentationProviderVTbl*
  end

  struct IMFTopologyNodeAttributeEditorVTbl
    query_interface : Proc(IMFTopologyNodeAttributeEditor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFTopologyNodeAttributeEditor*, UInt32)
    release : Proc(IMFTopologyNodeAttributeEditor*, UInt32)
    update_node_attributes : Proc(IMFTopologyNodeAttributeEditor*, UInt64, UInt32, MFTOPONODE_ATTRIBUTE_UPDATE*, HRESULT)
  end

  IMFTopologyNodeAttributeEditor_GUID = "676aa6dd-238a-410d-bb99-65668d01605a"
  IID_IMFTopologyNodeAttributeEditor = LibC::GUID.new(0x676aa6dd_u32, 0x238a_u16, 0x410d_u16, StaticArray[0xbb_u8, 0x99_u8, 0x65_u8, 0x66_u8, 0x8d_u8, 0x1_u8, 0x60_u8, 0x5a_u8])
  struct IMFTopologyNodeAttributeEditor
    lpVtbl : IMFTopologyNodeAttributeEditorVTbl*
  end

  struct IMFByteStreamBufferingVTbl
    query_interface : Proc(IMFByteStreamBuffering*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFByteStreamBuffering*, UInt32)
    release : Proc(IMFByteStreamBuffering*, UInt32)
    set_buffering_params : Proc(IMFByteStreamBuffering*, MFBYTESTREAM_BUFFERING_PARAMS*, HRESULT)
    enable_buffering : Proc(IMFByteStreamBuffering*, LibC::BOOL, HRESULT)
    stop_buffering : Proc(IMFByteStreamBuffering*, HRESULT)
  end

  IMFByteStreamBuffering_GUID = "6d66d782-1d4f-4db7-8c63-cb8c77f1ef5e"
  IID_IMFByteStreamBuffering = LibC::GUID.new(0x6d66d782_u32, 0x1d4f_u16, 0x4db7_u16, StaticArray[0x8c_u8, 0x63_u8, 0xcb_u8, 0x8c_u8, 0x77_u8, 0xf1_u8, 0xef_u8, 0x5e_u8])
  struct IMFByteStreamBuffering
    lpVtbl : IMFByteStreamBufferingVTbl*
  end

  struct IMFByteStreamCacheControlVTbl
    query_interface : Proc(IMFByteStreamCacheControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFByteStreamCacheControl*, UInt32)
    release : Proc(IMFByteStreamCacheControl*, UInt32)
    stop_background_transfer : Proc(IMFByteStreamCacheControl*, HRESULT)
  end

  IMFByteStreamCacheControl_GUID = "f5042ea4-7a96-4a75-aa7b-2be1ef7f88d5"
  IID_IMFByteStreamCacheControl = LibC::GUID.new(0xf5042ea4_u32, 0x7a96_u16, 0x4a75_u16, StaticArray[0xaa_u8, 0x7b_u8, 0x2b_u8, 0xe1_u8, 0xef_u8, 0x7f_u8, 0x88_u8, 0xd5_u8])
  struct IMFByteStreamCacheControl
    lpVtbl : IMFByteStreamCacheControlVTbl*
  end

  struct IMFByteStreamTimeSeekVTbl
    query_interface : Proc(IMFByteStreamTimeSeek*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFByteStreamTimeSeek*, UInt32)
    release : Proc(IMFByteStreamTimeSeek*, UInt32)
    is_time_seek_supported : Proc(IMFByteStreamTimeSeek*, LibC::BOOL*, HRESULT)
    time_seek : Proc(IMFByteStreamTimeSeek*, UInt64, HRESULT)
    get_time_seek_result : Proc(IMFByteStreamTimeSeek*, UInt64*, UInt64*, UInt64*, HRESULT)
  end

  IMFByteStreamTimeSeek_GUID = "64976bfa-fb61-4041-9069-8c9a5f659beb"
  IID_IMFByteStreamTimeSeek = LibC::GUID.new(0x64976bfa_u32, 0xfb61_u16, 0x4041_u16, StaticArray[0x90_u8, 0x69_u8, 0x8c_u8, 0x9a_u8, 0x5f_u8, 0x65_u8, 0x9b_u8, 0xeb_u8])
  struct IMFByteStreamTimeSeek
    lpVtbl : IMFByteStreamTimeSeekVTbl*
  end

  struct IMFByteStreamCacheControl2VTbl
    query_interface : Proc(IMFByteStreamCacheControl2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFByteStreamCacheControl2*, UInt32)
    release : Proc(IMFByteStreamCacheControl2*, UInt32)
    stop_background_transfer : Proc(IMFByteStreamCacheControl2*, HRESULT)
    get_byte_ranges : Proc(IMFByteStreamCacheControl2*, UInt32*, MF_BYTE_STREAM_CACHE_RANGE**, HRESULT)
    set_cache_limit : Proc(IMFByteStreamCacheControl2*, UInt64, HRESULT)
    is_background_transfer_active : Proc(IMFByteStreamCacheControl2*, LibC::BOOL*, HRESULT)
  end

  IMFByteStreamCacheControl2_GUID = "71ce469c-f34b-49ea-a56b-2d2a10e51149"
  IID_IMFByteStreamCacheControl2 = LibC::GUID.new(0x71ce469c_u32, 0xf34b_u16, 0x49ea_u16, StaticArray[0xa5_u8, 0x6b_u8, 0x2d_u8, 0x2a_u8, 0x10_u8, 0xe5_u8, 0x11_u8, 0x49_u8])
  struct IMFByteStreamCacheControl2
    lpVtbl : IMFByteStreamCacheControl2VTbl*
  end

  struct IMFNetCredentialVTbl
    query_interface : Proc(IMFNetCredential*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFNetCredential*, UInt32)
    release : Proc(IMFNetCredential*, UInt32)
    set_user : Proc(IMFNetCredential*, UInt8*, UInt32, LibC::BOOL, HRESULT)
    set_password : Proc(IMFNetCredential*, UInt8*, UInt32, LibC::BOOL, HRESULT)
    get_user : Proc(IMFNetCredential*, UInt8*, UInt32*, LibC::BOOL, HRESULT)
    get_password : Proc(IMFNetCredential*, UInt8*, UInt32*, LibC::BOOL, HRESULT)
    logged_on_user : Proc(IMFNetCredential*, LibC::BOOL*, HRESULT)
  end

  IMFNetCredential_GUID = "5b87ef6a-7ed8-434f-ba0e-184fac1628d1"
  IID_IMFNetCredential = LibC::GUID.new(0x5b87ef6a_u32, 0x7ed8_u16, 0x434f_u16, StaticArray[0xba_u8, 0xe_u8, 0x18_u8, 0x4f_u8, 0xac_u8, 0x16_u8, 0x28_u8, 0xd1_u8])
  struct IMFNetCredential
    lpVtbl : IMFNetCredentialVTbl*
  end

  struct IMFNetCredentialManagerVTbl
    query_interface : Proc(IMFNetCredentialManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFNetCredentialManager*, UInt32)
    release : Proc(IMFNetCredentialManager*, UInt32)
    begin_get_credentials : Proc(IMFNetCredentialManager*, MFNetCredentialManagerGetParam*, IMFAsyncCallback, IUnknown, HRESULT)
    end_get_credentials : Proc(IMFNetCredentialManager*, IMFAsyncResult, IMFNetCredential*, HRESULT)
    set_good : Proc(IMFNetCredentialManager*, IMFNetCredential, LibC::BOOL, HRESULT)
  end

  IMFNetCredentialManager_GUID = "5b87ef6b-7ed8-434f-ba0e-184fac1628d1"
  IID_IMFNetCredentialManager = LibC::GUID.new(0x5b87ef6b_u32, 0x7ed8_u16, 0x434f_u16, StaticArray[0xba_u8, 0xe_u8, 0x18_u8, 0x4f_u8, 0xac_u8, 0x16_u8, 0x28_u8, 0xd1_u8])
  struct IMFNetCredentialManager
    lpVtbl : IMFNetCredentialManagerVTbl*
  end

  struct IMFNetCredentialCacheVTbl
    query_interface : Proc(IMFNetCredentialCache*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFNetCredentialCache*, UInt32)
    release : Proc(IMFNetCredentialCache*, UInt32)
    get_credential : Proc(IMFNetCredentialCache*, LibC::LPWSTR, LibC::LPWSTR, UInt32, IMFNetCredential*, UInt32*, HRESULT)
    set_good : Proc(IMFNetCredentialCache*, IMFNetCredential, LibC::BOOL, HRESULT)
    set_user_options : Proc(IMFNetCredentialCache*, IMFNetCredential, UInt32, HRESULT)
  end

  IMFNetCredentialCache_GUID = "5b87ef6c-7ed8-434f-ba0e-184fac1628d1"
  IID_IMFNetCredentialCache = LibC::GUID.new(0x5b87ef6c_u32, 0x7ed8_u16, 0x434f_u16, StaticArray[0xba_u8, 0xe_u8, 0x18_u8, 0x4f_u8, 0xac_u8, 0x16_u8, 0x28_u8, 0xd1_u8])
  struct IMFNetCredentialCache
    lpVtbl : IMFNetCredentialCacheVTbl*
  end

  struct IMFSSLCertificateManagerVTbl
    query_interface : Proc(IMFSSLCertificateManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSSLCertificateManager*, UInt32)
    release : Proc(IMFSSLCertificateManager*, UInt32)
    get_client_certificate : Proc(IMFSSLCertificateManager*, LibC::LPWSTR, UInt8**, UInt32*, HRESULT)
    begin_get_client_certificate : Proc(IMFSSLCertificateManager*, LibC::LPWSTR, IMFAsyncCallback, IUnknown, HRESULT)
    end_get_client_certificate : Proc(IMFSSLCertificateManager*, IMFAsyncResult, UInt8**, UInt32*, HRESULT)
    get_certificate_policy : Proc(IMFSSLCertificateManager*, LibC::LPWSTR, LibC::BOOL*, LibC::BOOL*, HRESULT)
    on_server_certificate : Proc(IMFSSLCertificateManager*, LibC::LPWSTR, UInt8*, UInt32, LibC::BOOL*, HRESULT)
  end

  IMFSSLCertificateManager_GUID = "61f7d887-1230-4a8b-aeba-8ad434d1a64d"
  IID_IMFSSLCertificateManager = LibC::GUID.new(0x61f7d887_u32, 0x1230_u16, 0x4a8b_u16, StaticArray[0xae_u8, 0xba_u8, 0x8a_u8, 0xd4_u8, 0x34_u8, 0xd1_u8, 0xa6_u8, 0x4d_u8])
  struct IMFSSLCertificateManager
    lpVtbl : IMFSSLCertificateManagerVTbl*
  end

  struct IMFNetResourceFilterVTbl
    query_interface : Proc(IMFNetResourceFilter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFNetResourceFilter*, UInt32)
    release : Proc(IMFNetResourceFilter*, UInt32)
    on_redirect : Proc(IMFNetResourceFilter*, LibC::LPWSTR, Int16*, HRESULT)
    on_sending_request : Proc(IMFNetResourceFilter*, LibC::LPWSTR, HRESULT)
  end

  IMFNetResourceFilter_GUID = "091878a3-bf11-4a5c-bc9f-33995b06ef2d"
  IID_IMFNetResourceFilter = LibC::GUID.new(0x91878a3_u32, 0xbf11_u16, 0x4a5c_u16, StaticArray[0xbc_u8, 0x9f_u8, 0x33_u8, 0x99_u8, 0x5b_u8, 0x6_u8, 0xef_u8, 0x2d_u8])
  struct IMFNetResourceFilter
    lpVtbl : IMFNetResourceFilterVTbl*
  end

  struct IMFSourceOpenMonitorVTbl
    query_interface : Proc(IMFSourceOpenMonitor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSourceOpenMonitor*, UInt32)
    release : Proc(IMFSourceOpenMonitor*, UInt32)
    on_source_event : Proc(IMFSourceOpenMonitor*, IMFMediaEvent, HRESULT)
  end

  IMFSourceOpenMonitor_GUID = "059054b3-027c-494c-a27d-9113291cf87f"
  IID_IMFSourceOpenMonitor = LibC::GUID.new(0x59054b3_u32, 0x27c_u16, 0x494c_u16, StaticArray[0xa2_u8, 0x7d_u8, 0x91_u8, 0x13_u8, 0x29_u8, 0x1c_u8, 0xf8_u8, 0x7f_u8])
  struct IMFSourceOpenMonitor
    lpVtbl : IMFSourceOpenMonitorVTbl*
  end

  struct IMFNetProxyLocatorVTbl
    query_interface : Proc(IMFNetProxyLocator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFNetProxyLocator*, UInt32)
    release : Proc(IMFNetProxyLocator*, UInt32)
    find_first_proxy : Proc(IMFNetProxyLocator*, LibC::LPWSTR, LibC::LPWSTR, LibC::BOOL, HRESULT)
    find_next_proxy : Proc(IMFNetProxyLocator*, HRESULT)
    register_proxy_result : Proc(IMFNetProxyLocator*, HRESULT, HRESULT)
    get_current_proxy : Proc(IMFNetProxyLocator*, Char*, UInt32*, HRESULT)
    clone : Proc(IMFNetProxyLocator*, IMFNetProxyLocator*, HRESULT)
  end

  IMFNetProxyLocator_GUID = "e9cd0383-a268-4bb4-82de-658d53574d41"
  IID_IMFNetProxyLocator = LibC::GUID.new(0xe9cd0383_u32, 0xa268_u16, 0x4bb4_u16, StaticArray[0x82_u8, 0xde_u8, 0x65_u8, 0x8d_u8, 0x53_u8, 0x57_u8, 0x4d_u8, 0x41_u8])
  struct IMFNetProxyLocator
    lpVtbl : IMFNetProxyLocatorVTbl*
  end

  struct IMFNetProxyLocatorFactoryVTbl
    query_interface : Proc(IMFNetProxyLocatorFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFNetProxyLocatorFactory*, UInt32)
    release : Proc(IMFNetProxyLocatorFactory*, UInt32)
    create_proxy_locator : Proc(IMFNetProxyLocatorFactory*, LibC::LPWSTR, IMFNetProxyLocator*, HRESULT)
  end

  IMFNetProxyLocatorFactory_GUID = "e9cd0384-a268-4bb4-82de-658d53574d41"
  IID_IMFNetProxyLocatorFactory = LibC::GUID.new(0xe9cd0384_u32, 0xa268_u16, 0x4bb4_u16, StaticArray[0x82_u8, 0xde_u8, 0x65_u8, 0x8d_u8, 0x53_u8, 0x57_u8, 0x4d_u8, 0x41_u8])
  struct IMFNetProxyLocatorFactory
    lpVtbl : IMFNetProxyLocatorFactoryVTbl*
  end

  struct IMFSaveJobVTbl
    query_interface : Proc(IMFSaveJob*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSaveJob*, UInt32)
    release : Proc(IMFSaveJob*, UInt32)
    begin_save : Proc(IMFSaveJob*, IMFByteStream, IMFAsyncCallback, IUnknown, HRESULT)
    end_save : Proc(IMFSaveJob*, IMFAsyncResult, HRESULT)
    cancel_save : Proc(IMFSaveJob*, HRESULT)
    get_progress : Proc(IMFSaveJob*, UInt32*, HRESULT)
  end

  IMFSaveJob_GUID = "e9931663-80bf-4c6e-98af-5dcf58747d1f"
  IID_IMFSaveJob = LibC::GUID.new(0xe9931663_u32, 0x80bf_u16, 0x4c6e_u16, StaticArray[0x98_u8, 0xaf_u8, 0x5d_u8, 0xcf_u8, 0x58_u8, 0x74_u8, 0x7d_u8, 0x1f_u8])
  struct IMFSaveJob
    lpVtbl : IMFSaveJobVTbl*
  end

  struct IMFNetSchemeHandlerConfigVTbl
    query_interface : Proc(IMFNetSchemeHandlerConfig*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFNetSchemeHandlerConfig*, UInt32)
    release : Proc(IMFNetSchemeHandlerConfig*, UInt32)
    get_number_of_supported_protocols : Proc(IMFNetSchemeHandlerConfig*, UInt32*, HRESULT)
    get_supported_protocol_type : Proc(IMFNetSchemeHandlerConfig*, UInt32, MFNETSOURCE_PROTOCOL_TYPE*, HRESULT)
    reset_protocol_rollover_settings : Proc(IMFNetSchemeHandlerConfig*, HRESULT)
  end

  IMFNetSchemeHandlerConfig_GUID = "7be19e73-c9bf-468a-ac5a-a5e8653bec87"
  IID_IMFNetSchemeHandlerConfig = LibC::GUID.new(0x7be19e73_u32, 0xc9bf_u16, 0x468a_u16, StaticArray[0xac_u8, 0x5a_u8, 0xa5_u8, 0xe8_u8, 0x65_u8, 0x3b_u8, 0xec_u8, 0x87_u8])
  struct IMFNetSchemeHandlerConfig
    lpVtbl : IMFNetSchemeHandlerConfigVTbl*
  end

  struct IMFSchemeHandlerVTbl
    query_interface : Proc(IMFSchemeHandler*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSchemeHandler*, UInt32)
    release : Proc(IMFSchemeHandler*, UInt32)
    begin_create_object : Proc(IMFSchemeHandler*, LibC::LPWSTR, UInt32, IPropertyStore, IUnknown*, IMFAsyncCallback, IUnknown, HRESULT)
    end_create_object : Proc(IMFSchemeHandler*, IMFAsyncResult, MF_OBJECT_TYPE*, IUnknown*, HRESULT)
    cancel_object_creation : Proc(IMFSchemeHandler*, IUnknown, HRESULT)
  end

  IMFSchemeHandler_GUID = "6d4c7b74-52a0-4bb7-b0db-55f29f47a668"
  IID_IMFSchemeHandler = LibC::GUID.new(0x6d4c7b74_u32, 0x52a0_u16, 0x4bb7_u16, StaticArray[0xb0_u8, 0xdb_u8, 0x55_u8, 0xf2_u8, 0x9f_u8, 0x47_u8, 0xa6_u8, 0x68_u8])
  struct IMFSchemeHandler
    lpVtbl : IMFSchemeHandlerVTbl*
  end

  struct IMFByteStreamHandlerVTbl
    query_interface : Proc(IMFByteStreamHandler*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFByteStreamHandler*, UInt32)
    release : Proc(IMFByteStreamHandler*, UInt32)
    begin_create_object : Proc(IMFByteStreamHandler*, IMFByteStream, LibC::LPWSTR, UInt32, IPropertyStore, IUnknown*, IMFAsyncCallback, IUnknown, HRESULT)
    end_create_object : Proc(IMFByteStreamHandler*, IMFAsyncResult, MF_OBJECT_TYPE*, IUnknown*, HRESULT)
    cancel_object_creation : Proc(IMFByteStreamHandler*, IUnknown, HRESULT)
    get_max_number_of_bytes_required_for_resolution : Proc(IMFByteStreamHandler*, UInt64*, HRESULT)
  end

  IMFByteStreamHandler_GUID = "bb420aa4-765b-4a1f-91fe-d6a8a143924c"
  IID_IMFByteStreamHandler = LibC::GUID.new(0xbb420aa4_u32, 0x765b_u16, 0x4a1f_u16, StaticArray[0x91_u8, 0xfe_u8, 0xd6_u8, 0xa8_u8, 0xa1_u8, 0x43_u8, 0x92_u8, 0x4c_u8])
  struct IMFByteStreamHandler
    lpVtbl : IMFByteStreamHandlerVTbl*
  end

  struct IMFTrustedInputVTbl
    query_interface : Proc(IMFTrustedInput*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFTrustedInput*, UInt32)
    release : Proc(IMFTrustedInput*, UInt32)
    get_input_trust_authority : Proc(IMFTrustedInput*, UInt32, Guid*, IUnknown*, HRESULT)
  end

  IMFTrustedInput_GUID = "542612c4-a1b8-4632-b521-de11ea64a0b0"
  IID_IMFTrustedInput = LibC::GUID.new(0x542612c4_u32, 0xa1b8_u16, 0x4632_u16, StaticArray[0xb5_u8, 0x21_u8, 0xde_u8, 0x11_u8, 0xea_u8, 0x64_u8, 0xa0_u8, 0xb0_u8])
  struct IMFTrustedInput
    lpVtbl : IMFTrustedInputVTbl*
  end

  struct IMFInputTrustAuthorityVTbl
    query_interface : Proc(IMFInputTrustAuthority*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFInputTrustAuthority*, UInt32)
    release : Proc(IMFInputTrustAuthority*, UInt32)
    get_decrypter : Proc(IMFInputTrustAuthority*, Guid*, Void**, HRESULT)
    request_access : Proc(IMFInputTrustAuthority*, MFPOLICYMANAGER_ACTION, IMFActivate*, HRESULT)
    get_policy : Proc(IMFInputTrustAuthority*, MFPOLICYMANAGER_ACTION, IMFOutputPolicy*, HRESULT)
    bind_access : Proc(IMFInputTrustAuthority*, MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS*, HRESULT)
    update_access : Proc(IMFInputTrustAuthority*, MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS*, HRESULT)
    reset : Proc(IMFInputTrustAuthority*, HRESULT)
  end

  IMFInputTrustAuthority_GUID = "d19f8e98-b126-4446-890c-5dcb7ad71453"
  IID_IMFInputTrustAuthority = LibC::GUID.new(0xd19f8e98_u32, 0xb126_u16, 0x4446_u16, StaticArray[0x89_u8, 0xc_u8, 0x5d_u8, 0xcb_u8, 0x7a_u8, 0xd7_u8, 0x14_u8, 0x53_u8])
  struct IMFInputTrustAuthority
    lpVtbl : IMFInputTrustAuthorityVTbl*
  end

  struct IMFTrustedOutputVTbl
    query_interface : Proc(IMFTrustedOutput*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFTrustedOutput*, UInt32)
    release : Proc(IMFTrustedOutput*, UInt32)
    get_output_trust_authority_count : Proc(IMFTrustedOutput*, UInt32*, HRESULT)
    get_output_trust_authority_by_index : Proc(IMFTrustedOutput*, UInt32, IMFOutputTrustAuthority*, HRESULT)
    is_final : Proc(IMFTrustedOutput*, LibC::BOOL*, HRESULT)
  end

  IMFTrustedOutput_GUID = "d19f8e95-b126-4446-890c-5dcb7ad71453"
  IID_IMFTrustedOutput = LibC::GUID.new(0xd19f8e95_u32, 0xb126_u16, 0x4446_u16, StaticArray[0x89_u8, 0xc_u8, 0x5d_u8, 0xcb_u8, 0x7a_u8, 0xd7_u8, 0x14_u8, 0x53_u8])
  struct IMFTrustedOutput
    lpVtbl : IMFTrustedOutputVTbl*
  end

  struct IMFOutputTrustAuthorityVTbl
    query_interface : Proc(IMFOutputTrustAuthority*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFOutputTrustAuthority*, UInt32)
    release : Proc(IMFOutputTrustAuthority*, UInt32)
    get_action : Proc(IMFOutputTrustAuthority*, MFPOLICYMANAGER_ACTION*, HRESULT)
    set_policy : Proc(IMFOutputTrustAuthority*, IMFOutputPolicy*, UInt32, UInt8**, UInt32*, HRESULT)
  end

  IMFOutputTrustAuthority_GUID = "d19f8e94-b126-4446-890c-5dcb7ad71453"
  IID_IMFOutputTrustAuthority = LibC::GUID.new(0xd19f8e94_u32, 0xb126_u16, 0x4446_u16, StaticArray[0x89_u8, 0xc_u8, 0x5d_u8, 0xcb_u8, 0x7a_u8, 0xd7_u8, 0x14_u8, 0x53_u8])
  struct IMFOutputTrustAuthority
    lpVtbl : IMFOutputTrustAuthorityVTbl*
  end

  struct IMFOutputPolicyVTbl
    query_interface : Proc(IMFOutputPolicy*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFOutputPolicy*, UInt32)
    release : Proc(IMFOutputPolicy*, UInt32)
    get_item : Proc(IMFOutputPolicy*, Guid*, PROPVARIANT*, HRESULT)
    get_item_type : Proc(IMFOutputPolicy*, Guid*, MF_ATTRIBUTE_TYPE*, HRESULT)
    compare_item : Proc(IMFOutputPolicy*, Guid*, PROPVARIANT*, LibC::BOOL*, HRESULT)
    compare : Proc(IMFOutputPolicy*, IMFAttributes, MF_ATTRIBUTES_MATCH_TYPE, LibC::BOOL*, HRESULT)
    get_uint32 : Proc(IMFOutputPolicy*, Guid*, UInt32*, HRESULT)
    get_uint64 : Proc(IMFOutputPolicy*, Guid*, UInt64*, HRESULT)
    get_double : Proc(IMFOutputPolicy*, Guid*, Float64*, HRESULT)
    get_guid : Proc(IMFOutputPolicy*, Guid*, Guid*, HRESULT)
    get_string_length : Proc(IMFOutputPolicy*, Guid*, UInt32*, HRESULT)
    get_string : Proc(IMFOutputPolicy*, Guid*, Char*, UInt32, UInt32*, HRESULT)
    get_allocated_string : Proc(IMFOutputPolicy*, Guid*, LibC::LPWSTR*, UInt32*, HRESULT)
    get_blob_size : Proc(IMFOutputPolicy*, Guid*, UInt32*, HRESULT)
    get_blob : Proc(IMFOutputPolicy*, Guid*, UInt8*, UInt32, UInt32*, HRESULT)
    get_allocated_blob : Proc(IMFOutputPolicy*, Guid*, UInt8**, UInt32*, HRESULT)
    get_unknown : Proc(IMFOutputPolicy*, Guid*, Guid*, Void**, HRESULT)
    set_item : Proc(IMFOutputPolicy*, Guid*, PROPVARIANT*, HRESULT)
    delete_item : Proc(IMFOutputPolicy*, Guid*, HRESULT)
    delete_all_items : Proc(IMFOutputPolicy*, HRESULT)
    set_uint32 : Proc(IMFOutputPolicy*, Guid*, UInt32, HRESULT)
    set_uint64 : Proc(IMFOutputPolicy*, Guid*, UInt64, HRESULT)
    set_double : Proc(IMFOutputPolicy*, Guid*, Float64, HRESULT)
    set_guid : Proc(IMFOutputPolicy*, Guid*, Guid*, HRESULT)
    set_string : Proc(IMFOutputPolicy*, Guid*, LibC::LPWSTR, HRESULT)
    set_blob : Proc(IMFOutputPolicy*, Guid*, UInt8*, UInt32, HRESULT)
    set_unknown : Proc(IMFOutputPolicy*, Guid*, IUnknown, HRESULT)
    lock_store : Proc(IMFOutputPolicy*, HRESULT)
    unlock_store : Proc(IMFOutputPolicy*, HRESULT)
    get_count : Proc(IMFOutputPolicy*, UInt32*, HRESULT)
    get_item_by_index : Proc(IMFOutputPolicy*, UInt32, Guid*, PROPVARIANT*, HRESULT)
    copy_all_items : Proc(IMFOutputPolicy*, IMFAttributes, HRESULT)
    generate_required_schemas : Proc(IMFOutputPolicy*, UInt32, Guid, Guid*, UInt32, IMFCollection*, HRESULT)
    get_originator_id : Proc(IMFOutputPolicy*, Guid*, HRESULT)
    get_minimum_grl_version : Proc(IMFOutputPolicy*, UInt32*, HRESULT)
  end

  IMFOutputPolicy_GUID = "7f00f10a-daed-41af-ab26-5fdfa4dfba3c"
  IID_IMFOutputPolicy = LibC::GUID.new(0x7f00f10a_u32, 0xdaed_u16, 0x41af_u16, StaticArray[0xab_u8, 0x26_u8, 0x5f_u8, 0xdf_u8, 0xa4_u8, 0xdf_u8, 0xba_u8, 0x3c_u8])
  struct IMFOutputPolicy
    lpVtbl : IMFOutputPolicyVTbl*
  end

  struct IMFOutputSchemaVTbl
    query_interface : Proc(IMFOutputSchema*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFOutputSchema*, UInt32)
    release : Proc(IMFOutputSchema*, UInt32)
    get_item : Proc(IMFOutputSchema*, Guid*, PROPVARIANT*, HRESULT)
    get_item_type : Proc(IMFOutputSchema*, Guid*, MF_ATTRIBUTE_TYPE*, HRESULT)
    compare_item : Proc(IMFOutputSchema*, Guid*, PROPVARIANT*, LibC::BOOL*, HRESULT)
    compare : Proc(IMFOutputSchema*, IMFAttributes, MF_ATTRIBUTES_MATCH_TYPE, LibC::BOOL*, HRESULT)
    get_uint32 : Proc(IMFOutputSchema*, Guid*, UInt32*, HRESULT)
    get_uint64 : Proc(IMFOutputSchema*, Guid*, UInt64*, HRESULT)
    get_double : Proc(IMFOutputSchema*, Guid*, Float64*, HRESULT)
    get_guid : Proc(IMFOutputSchema*, Guid*, Guid*, HRESULT)
    get_string_length : Proc(IMFOutputSchema*, Guid*, UInt32*, HRESULT)
    get_string : Proc(IMFOutputSchema*, Guid*, Char*, UInt32, UInt32*, HRESULT)
    get_allocated_string : Proc(IMFOutputSchema*, Guid*, LibC::LPWSTR*, UInt32*, HRESULT)
    get_blob_size : Proc(IMFOutputSchema*, Guid*, UInt32*, HRESULT)
    get_blob : Proc(IMFOutputSchema*, Guid*, UInt8*, UInt32, UInt32*, HRESULT)
    get_allocated_blob : Proc(IMFOutputSchema*, Guid*, UInt8**, UInt32*, HRESULT)
    get_unknown : Proc(IMFOutputSchema*, Guid*, Guid*, Void**, HRESULT)
    set_item : Proc(IMFOutputSchema*, Guid*, PROPVARIANT*, HRESULT)
    delete_item : Proc(IMFOutputSchema*, Guid*, HRESULT)
    delete_all_items : Proc(IMFOutputSchema*, HRESULT)
    set_uint32 : Proc(IMFOutputSchema*, Guid*, UInt32, HRESULT)
    set_uint64 : Proc(IMFOutputSchema*, Guid*, UInt64, HRESULT)
    set_double : Proc(IMFOutputSchema*, Guid*, Float64, HRESULT)
    set_guid : Proc(IMFOutputSchema*, Guid*, Guid*, HRESULT)
    set_string : Proc(IMFOutputSchema*, Guid*, LibC::LPWSTR, HRESULT)
    set_blob : Proc(IMFOutputSchema*, Guid*, UInt8*, UInt32, HRESULT)
    set_unknown : Proc(IMFOutputSchema*, Guid*, IUnknown, HRESULT)
    lock_store : Proc(IMFOutputSchema*, HRESULT)
    unlock_store : Proc(IMFOutputSchema*, HRESULT)
    get_count : Proc(IMFOutputSchema*, UInt32*, HRESULT)
    get_item_by_index : Proc(IMFOutputSchema*, UInt32, Guid*, PROPVARIANT*, HRESULT)
    copy_all_items : Proc(IMFOutputSchema*, IMFAttributes, HRESULT)
    get_schema_type : Proc(IMFOutputSchema*, Guid*, HRESULT)
    get_configuration_data : Proc(IMFOutputSchema*, UInt32*, HRESULT)
    get_originator_id : Proc(IMFOutputSchema*, Guid*, HRESULT)
  end

  IMFOutputSchema_GUID = "7be0fc5b-abd9-44fb-a5c8-f50136e71599"
  IID_IMFOutputSchema = LibC::GUID.new(0x7be0fc5b_u32, 0xabd9_u16, 0x44fb_u16, StaticArray[0xa5_u8, 0xc8_u8, 0xf5_u8, 0x1_u8, 0x36_u8, 0xe7_u8, 0x15_u8, 0x99_u8])
  struct IMFOutputSchema
    lpVtbl : IMFOutputSchemaVTbl*
  end

  struct IMFSecureChannelVTbl
    query_interface : Proc(IMFSecureChannel*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSecureChannel*, UInt32)
    release : Proc(IMFSecureChannel*, UInt32)
    get_certificate : Proc(IMFSecureChannel*, UInt8**, UInt32*, HRESULT)
    setup_session : Proc(IMFSecureChannel*, UInt8*, UInt32, HRESULT)
  end

  IMFSecureChannel_GUID = "d0ae555d-3b12-4d97-b060-0990bc5aeb67"
  IID_IMFSecureChannel = LibC::GUID.new(0xd0ae555d_u32, 0x3b12_u16, 0x4d97_u16, StaticArray[0xb0_u8, 0x60_u8, 0x9_u8, 0x90_u8, 0xbc_u8, 0x5a_u8, 0xeb_u8, 0x67_u8])
  struct IMFSecureChannel
    lpVtbl : IMFSecureChannelVTbl*
  end

  struct IMFSampleProtectionVTbl
    query_interface : Proc(IMFSampleProtection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSampleProtection*, UInt32)
    release : Proc(IMFSampleProtection*, UInt32)
    get_input_protection_version : Proc(IMFSampleProtection*, UInt32*, HRESULT)
    get_output_protection_version : Proc(IMFSampleProtection*, UInt32*, HRESULT)
    get_protection_certificate : Proc(IMFSampleProtection*, UInt32, UInt8**, UInt32*, HRESULT)
    init_output_protection : Proc(IMFSampleProtection*, UInt32, UInt32, UInt8*, UInt32, UInt8**, UInt32*, HRESULT)
    init_input_protection : Proc(IMFSampleProtection*, UInt32, UInt32, UInt8*, UInt32, HRESULT)
  end

  IMFSampleProtection_GUID = "8e36395f-c7b9-43c4-a54d-512b4af63c95"
  IID_IMFSampleProtection = LibC::GUID.new(0x8e36395f_u32, 0xc7b9_u16, 0x43c4_u16, StaticArray[0xa5_u8, 0x4d_u8, 0x51_u8, 0x2b_u8, 0x4a_u8, 0xf6_u8, 0x3c_u8, 0x95_u8])
  struct IMFSampleProtection
    lpVtbl : IMFSampleProtectionVTbl*
  end

  struct IMFMediaSinkPrerollVTbl
    query_interface : Proc(IMFMediaSinkPreroll*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaSinkPreroll*, UInt32)
    release : Proc(IMFMediaSinkPreroll*, UInt32)
    notify_preroll : Proc(IMFMediaSinkPreroll*, Int64, HRESULT)
  end

  IMFMediaSinkPreroll_GUID = "5dfd4b2a-7674-4110-a4e6-8a68fd5f3688"
  IID_IMFMediaSinkPreroll = LibC::GUID.new(0x5dfd4b2a_u32, 0x7674_u16, 0x4110_u16, StaticArray[0xa4_u8, 0xe6_u8, 0x8a_u8, 0x68_u8, 0xfd_u8, 0x5f_u8, 0x36_u8, 0x88_u8])
  struct IMFMediaSinkPreroll
    lpVtbl : IMFMediaSinkPrerollVTbl*
  end

  struct IMFFinalizableMediaSinkVTbl
    query_interface : Proc(IMFFinalizableMediaSink*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFFinalizableMediaSink*, UInt32)
    release : Proc(IMFFinalizableMediaSink*, UInt32)
    get_characteristics : Proc(IMFFinalizableMediaSink*, UInt32*, HRESULT)
    add_stream_sink : Proc(IMFFinalizableMediaSink*, UInt32, IMFMediaType, IMFStreamSink*, HRESULT)
    remove_stream_sink : Proc(IMFFinalizableMediaSink*, UInt32, HRESULT)
    get_stream_sink_count : Proc(IMFFinalizableMediaSink*, UInt32*, HRESULT)
    get_stream_sink_by_index : Proc(IMFFinalizableMediaSink*, UInt32, IMFStreamSink*, HRESULT)
    get_stream_sink_by_id : Proc(IMFFinalizableMediaSink*, UInt32, IMFStreamSink*, HRESULT)
    set_presentation_clock : Proc(IMFFinalizableMediaSink*, IMFPresentationClock, HRESULT)
    get_presentation_clock : Proc(IMFFinalizableMediaSink*, IMFPresentationClock*, HRESULT)
    shutdown : Proc(IMFFinalizableMediaSink*, HRESULT)
    begin_finalize : Proc(IMFFinalizableMediaSink*, IMFAsyncCallback, IUnknown, HRESULT)
    end_finalize : Proc(IMFFinalizableMediaSink*, IMFAsyncResult, HRESULT)
  end

  IMFFinalizableMediaSink_GUID = "eaecb74a-9a50-42ce-9541-6a7f57aa4ad7"
  IID_IMFFinalizableMediaSink = LibC::GUID.new(0xeaecb74a_u32, 0x9a50_u16, 0x42ce_u16, StaticArray[0x95_u8, 0x41_u8, 0x6a_u8, 0x7f_u8, 0x57_u8, 0xaa_u8, 0x4a_u8, 0xd7_u8])
  struct IMFFinalizableMediaSink
    lpVtbl : IMFFinalizableMediaSinkVTbl*
  end

  struct IMFStreamingSinkConfigVTbl
    query_interface : Proc(IMFStreamingSinkConfig*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFStreamingSinkConfig*, UInt32)
    release : Proc(IMFStreamingSinkConfig*, UInt32)
    start_streaming : Proc(IMFStreamingSinkConfig*, LibC::BOOL, UInt64, HRESULT)
  end

  IMFStreamingSinkConfig_GUID = "9db7aa41-3cc5-40d4-8509-555804ad34cc"
  IID_IMFStreamingSinkConfig = LibC::GUID.new(0x9db7aa41_u32, 0x3cc5_u16, 0x40d4_u16, StaticArray[0x85_u8, 0x9_u8, 0x55_u8, 0x58_u8, 0x4_u8, 0xad_u8, 0x34_u8, 0xcc_u8])
  struct IMFStreamingSinkConfig
    lpVtbl : IMFStreamingSinkConfigVTbl*
  end

  struct IMFRemoteProxyVTbl
    query_interface : Proc(IMFRemoteProxy*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFRemoteProxy*, UInt32)
    release : Proc(IMFRemoteProxy*, UInt32)
    get_remote_object : Proc(IMFRemoteProxy*, Guid*, Void**, HRESULT)
    get_remote_host : Proc(IMFRemoteProxy*, Guid*, Void**, HRESULT)
  end

  IMFRemoteProxy_GUID = "994e23ad-1cc2-493c-b9fa-46f1cb040fa4"
  IID_IMFRemoteProxy = LibC::GUID.new(0x994e23ad_u32, 0x1cc2_u16, 0x493c_u16, StaticArray[0xb9_u8, 0xfa_u8, 0x46_u8, 0xf1_u8, 0xcb_u8, 0x4_u8, 0xf_u8, 0xa4_u8])
  struct IMFRemoteProxy
    lpVtbl : IMFRemoteProxyVTbl*
  end

  struct IMFObjectReferenceStreamVTbl
    query_interface : Proc(IMFObjectReferenceStream*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFObjectReferenceStream*, UInt32)
    release : Proc(IMFObjectReferenceStream*, UInt32)
    save_reference : Proc(IMFObjectReferenceStream*, Guid*, IUnknown, HRESULT)
    load_reference : Proc(IMFObjectReferenceStream*, Guid*, Void**, HRESULT)
  end

  IMFObjectReferenceStream_GUID = "09ef5be3-c8a7-469e-8b70-73bf25bb193f"
  IID_IMFObjectReferenceStream = LibC::GUID.new(0x9ef5be3_u32, 0xc8a7_u16, 0x469e_u16, StaticArray[0x8b_u8, 0x70_u8, 0x73_u8, 0xbf_u8, 0x25_u8, 0xbb_u8, 0x19_u8, 0x3f_u8])
  struct IMFObjectReferenceStream
    lpVtbl : IMFObjectReferenceStreamVTbl*
  end

  struct IMFPMPHostVTbl
    query_interface : Proc(IMFPMPHost*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFPMPHost*, UInt32)
    release : Proc(IMFPMPHost*, UInt32)
    lock_process : Proc(IMFPMPHost*, HRESULT)
    unlock_process : Proc(IMFPMPHost*, HRESULT)
    create_object_by_clsid : Proc(IMFPMPHost*, Guid*, IStream, Guid*, Void**, HRESULT)
  end

  IMFPMPHost_GUID = "f70ca1a9-fdc7-4782-b994-adffb1c98606"
  IID_IMFPMPHost = LibC::GUID.new(0xf70ca1a9_u32, 0xfdc7_u16, 0x4782_u16, StaticArray[0xb9_u8, 0x94_u8, 0xad_u8, 0xff_u8, 0xb1_u8, 0xc9_u8, 0x86_u8, 0x6_u8])
  struct IMFPMPHost
    lpVtbl : IMFPMPHostVTbl*
  end

  struct IMFPMPClientVTbl
    query_interface : Proc(IMFPMPClient*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFPMPClient*, UInt32)
    release : Proc(IMFPMPClient*, UInt32)
    set_pmp_host : Proc(IMFPMPClient*, IMFPMPHost, HRESULT)
  end

  IMFPMPClient_GUID = "6c4e655d-ead8-4421-b6b9-54dcdbbdf820"
  IID_IMFPMPClient = LibC::GUID.new(0x6c4e655d_u32, 0xead8_u16, 0x4421_u16, StaticArray[0xb6_u8, 0xb9_u8, 0x54_u8, 0xdc_u8, 0xdb_u8, 0xbd_u8, 0xf8_u8, 0x20_u8])
  struct IMFPMPClient
    lpVtbl : IMFPMPClientVTbl*
  end

  struct IMFPMPServerVTbl
    query_interface : Proc(IMFPMPServer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFPMPServer*, UInt32)
    release : Proc(IMFPMPServer*, UInt32)
    lock_process : Proc(IMFPMPServer*, HRESULT)
    unlock_process : Proc(IMFPMPServer*, HRESULT)
    create_object_by_clsid : Proc(IMFPMPServer*, Guid*, Guid*, Void**, HRESULT)
  end

  IMFPMPServer_GUID = "994e23af-1cc2-493c-b9fa-46f1cb040fa4"
  IID_IMFPMPServer = LibC::GUID.new(0x994e23af_u32, 0x1cc2_u16, 0x493c_u16, StaticArray[0xb9_u8, 0xfa_u8, 0x46_u8, 0xf1_u8, 0xcb_u8, 0x4_u8, 0xf_u8, 0xa4_u8])
  struct IMFPMPServer
    lpVtbl : IMFPMPServerVTbl*
  end

  struct IMFRemoteDesktopPluginVTbl
    query_interface : Proc(IMFRemoteDesktopPlugin*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFRemoteDesktopPlugin*, UInt32)
    release : Proc(IMFRemoteDesktopPlugin*, UInt32)
    update_topology : Proc(IMFRemoteDesktopPlugin*, IMFTopology, HRESULT)
  end

  IMFRemoteDesktopPlugin_GUID = "1cde6309-cae0-4940-907e-c1ec9c3d1d4a"
  IID_IMFRemoteDesktopPlugin = LibC::GUID.new(0x1cde6309_u32, 0xcae0_u16, 0x4940_u16, StaticArray[0x90_u8, 0x7e_u8, 0xc1_u8, 0xec_u8, 0x9c_u8, 0x3d_u8, 0x1d_u8, 0x4a_u8])
  struct IMFRemoteDesktopPlugin
    lpVtbl : IMFRemoteDesktopPluginVTbl*
  end

  struct IMFSAMIStyleVTbl
    query_interface : Proc(IMFSAMIStyle*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSAMIStyle*, UInt32)
    release : Proc(IMFSAMIStyle*, UInt32)
    get_style_count : Proc(IMFSAMIStyle*, UInt32*, HRESULT)
    get_styles : Proc(IMFSAMIStyle*, PROPVARIANT*, HRESULT)
    set_selected_style : Proc(IMFSAMIStyle*, LibC::LPWSTR, HRESULT)
    get_selected_style : Proc(IMFSAMIStyle*, LibC::LPWSTR*, HRESULT)
  end

  IMFSAMIStyle_GUID = "a7e025dd-5303-4a62-89d6-e747e1efac73"
  IID_IMFSAMIStyle = LibC::GUID.new(0xa7e025dd_u32, 0x5303_u16, 0x4a62_u16, StaticArray[0x89_u8, 0xd6_u8, 0xe7_u8, 0x47_u8, 0xe1_u8, 0xef_u8, 0xac_u8, 0x73_u8])
  struct IMFSAMIStyle
    lpVtbl : IMFSAMIStyleVTbl*
  end

  struct IMFTranscodeProfileVTbl
    query_interface : Proc(IMFTranscodeProfile*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFTranscodeProfile*, UInt32)
    release : Proc(IMFTranscodeProfile*, UInt32)
    set_audio_attributes : Proc(IMFTranscodeProfile*, IMFAttributes, HRESULT)
    get_audio_attributes : Proc(IMFTranscodeProfile*, IMFAttributes*, HRESULT)
    set_video_attributes : Proc(IMFTranscodeProfile*, IMFAttributes, HRESULT)
    get_video_attributes : Proc(IMFTranscodeProfile*, IMFAttributes*, HRESULT)
    set_container_attributes : Proc(IMFTranscodeProfile*, IMFAttributes, HRESULT)
    get_container_attributes : Proc(IMFTranscodeProfile*, IMFAttributes*, HRESULT)
  end

  IMFTranscodeProfile_GUID = "4adfdba3-7ab0-4953-a62b-461e7ff3da1e"
  IID_IMFTranscodeProfile = LibC::GUID.new(0x4adfdba3_u32, 0x7ab0_u16, 0x4953_u16, StaticArray[0xa6_u8, 0x2b_u8, 0x46_u8, 0x1e_u8, 0x7f_u8, 0xf3_u8, 0xda_u8, 0x1e_u8])
  struct IMFTranscodeProfile
    lpVtbl : IMFTranscodeProfileVTbl*
  end

  struct IMFTranscodeSinkInfoProviderVTbl
    query_interface : Proc(IMFTranscodeSinkInfoProvider*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFTranscodeSinkInfoProvider*, UInt32)
    release : Proc(IMFTranscodeSinkInfoProvider*, UInt32)
    set_output_file : Proc(IMFTranscodeSinkInfoProvider*, LibC::LPWSTR, HRESULT)
    set_output_byte_stream : Proc(IMFTranscodeSinkInfoProvider*, IMFActivate, HRESULT)
    set_profile : Proc(IMFTranscodeSinkInfoProvider*, IMFTranscodeProfile, HRESULT)
    get_sink_info : Proc(IMFTranscodeSinkInfoProvider*, MF_TRANSCODE_SINK_INFO*, HRESULT)
  end

  IMFTranscodeSinkInfoProvider_GUID = "8cffcd2e-5a03-4a3a-aff7-edcd107c620e"
  IID_IMFTranscodeSinkInfoProvider = LibC::GUID.new(0x8cffcd2e_u32, 0x5a03_u16, 0x4a3a_u16, StaticArray[0xaf_u8, 0xf7_u8, 0xed_u8, 0xcd_u8, 0x10_u8, 0x7c_u8, 0x62_u8, 0xe_u8])
  struct IMFTranscodeSinkInfoProvider
    lpVtbl : IMFTranscodeSinkInfoProviderVTbl*
  end

  struct IMFFieldOfUseMFTUnlockVTbl
    query_interface : Proc(IMFFieldOfUseMFTUnlock*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFFieldOfUseMFTUnlock*, UInt32)
    release : Proc(IMFFieldOfUseMFTUnlock*, UInt32)
    unlock : Proc(IMFFieldOfUseMFTUnlock*, IUnknown, HRESULT)
  end

  IMFFieldOfUseMFTUnlock_GUID = "508e71d3-ec66-4fc3-8775-b4b9ed6ba847"
  IID_IMFFieldOfUseMFTUnlock = LibC::GUID.new(0x508e71d3_u32, 0xec66_u16, 0x4fc3_u16, StaticArray[0x87_u8, 0x75_u8, 0xb4_u8, 0xb9_u8, 0xed_u8, 0x6b_u8, 0xa8_u8, 0x47_u8])
  struct IMFFieldOfUseMFTUnlock
    lpVtbl : IMFFieldOfUseMFTUnlockVTbl*
  end

  struct IMFLocalMFTRegistrationVTbl
    query_interface : Proc(IMFLocalMFTRegistration*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFLocalMFTRegistration*, UInt32)
    release : Proc(IMFLocalMFTRegistration*, UInt32)
    register_mf_ts : Proc(IMFLocalMFTRegistration*, MFT_REGISTRATION_INFO*, UInt32, HRESULT)
  end

  IMFLocalMFTRegistration_GUID = "149c4d73-b4be-4f8d-8b87-079e926b6add"
  IID_IMFLocalMFTRegistration = LibC::GUID.new(0x149c4d73_u32, 0xb4be_u16, 0x4f8d_u16, StaticArray[0x8b_u8, 0x87_u8, 0x7_u8, 0x9e_u8, 0x92_u8, 0x6b_u8, 0x6a_u8, 0xdd_u8])
  struct IMFLocalMFTRegistration
    lpVtbl : IMFLocalMFTRegistrationVTbl*
  end

  struct IMFCapturePhotoConfirmationVTbl
    query_interface : Proc(IMFCapturePhotoConfirmation*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFCapturePhotoConfirmation*, UInt32)
    release : Proc(IMFCapturePhotoConfirmation*, UInt32)
    set_photo_confirmation_callback : Proc(IMFCapturePhotoConfirmation*, IMFAsyncCallback, HRESULT)
    set_pixel_format : Proc(IMFCapturePhotoConfirmation*, Guid, HRESULT)
    get_pixel_format : Proc(IMFCapturePhotoConfirmation*, Guid*, HRESULT)
  end

  IMFCapturePhotoConfirmation_GUID = "19f68549-ca8a-4706-a4ef-481dbc95e12c"
  IID_IMFCapturePhotoConfirmation = LibC::GUID.new(0x19f68549_u32, 0xca8a_u16, 0x4706_u16, StaticArray[0xa4_u8, 0xef_u8, 0x48_u8, 0x1d_u8, 0xbc_u8, 0x95_u8, 0xe1_u8, 0x2c_u8])
  struct IMFCapturePhotoConfirmation
    lpVtbl : IMFCapturePhotoConfirmationVTbl*
  end

  struct IMFPMPHostAppVTbl
    query_interface : Proc(IMFPMPHostApp*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFPMPHostApp*, UInt32)
    release : Proc(IMFPMPHostApp*, UInt32)
    lock_process : Proc(IMFPMPHostApp*, HRESULT)
    unlock_process : Proc(IMFPMPHostApp*, HRESULT)
    activate_class_by_id : Proc(IMFPMPHostApp*, LibC::LPWSTR, IStream, Guid*, Void**, HRESULT)
  end

  IMFPMPHostApp_GUID = "84d2054a-3aa1-4728-a3b0-440a418cf49c"
  IID_IMFPMPHostApp = LibC::GUID.new(0x84d2054a_u32, 0x3aa1_u16, 0x4728_u16, StaticArray[0xa3_u8, 0xb0_u8, 0x44_u8, 0xa_u8, 0x41_u8, 0x8c_u8, 0xf4_u8, 0x9c_u8])
  struct IMFPMPHostApp
    lpVtbl : IMFPMPHostAppVTbl*
  end

  struct IMFPMPClientAppVTbl
    query_interface : Proc(IMFPMPClientApp*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFPMPClientApp*, UInt32)
    release : Proc(IMFPMPClientApp*, UInt32)
    set_pmp_host : Proc(IMFPMPClientApp*, IMFPMPHostApp, HRESULT)
  end

  IMFPMPClientApp_GUID = "c004f646-be2c-48f3-93a2-a0983eba1108"
  IID_IMFPMPClientApp = LibC::GUID.new(0xc004f646_u32, 0xbe2c_u16, 0x48f3_u16, StaticArray[0x93_u8, 0xa2_u8, 0xa0_u8, 0x98_u8, 0x3e_u8, 0xba_u8, 0x11_u8, 0x8_u8])
  struct IMFPMPClientApp
    lpVtbl : IMFPMPClientAppVTbl*
  end

  struct IMFMediaStreamSourceSampleRequestVTbl
    query_interface : Proc(IMFMediaStreamSourceSampleRequest*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaStreamSourceSampleRequest*, UInt32)
    release : Proc(IMFMediaStreamSourceSampleRequest*, UInt32)
    set_sample : Proc(IMFMediaStreamSourceSampleRequest*, IMFSample, HRESULT)
  end

  IMFMediaStreamSourceSampleRequest_GUID = "380b9af9-a85b-4e78-a2af-ea5ce645c6b4"
  IID_IMFMediaStreamSourceSampleRequest = LibC::GUID.new(0x380b9af9_u32, 0xa85b_u16, 0x4e78_u16, StaticArray[0xa2_u8, 0xaf_u8, 0xea_u8, 0x5c_u8, 0xe6_u8, 0x45_u8, 0xc6_u8, 0xb4_u8])
  struct IMFMediaStreamSourceSampleRequest
    lpVtbl : IMFMediaStreamSourceSampleRequestVTbl*
  end

  struct IMFTrackedSampleVTbl
    query_interface : Proc(IMFTrackedSample*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFTrackedSample*, UInt32)
    release : Proc(IMFTrackedSample*, UInt32)
    set_allocator : Proc(IMFTrackedSample*, IMFAsyncCallback, IUnknown, HRESULT)
  end

  IMFTrackedSample_GUID = "245bf8e9-0755-40f7-88a5-ae0f18d55e17"
  IID_IMFTrackedSample = LibC::GUID.new(0x245bf8e9_u32, 0x755_u16, 0x40f7_u16, StaticArray[0x88_u8, 0xa5_u8, 0xae_u8, 0xf_u8, 0x18_u8, 0xd5_u8, 0x5e_u8, 0x17_u8])
  struct IMFTrackedSample
    lpVtbl : IMFTrackedSampleVTbl*
  end

  struct IMFProtectedEnvironmentAccessVTbl
    query_interface : Proc(IMFProtectedEnvironmentAccess*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFProtectedEnvironmentAccess*, UInt32)
    release : Proc(IMFProtectedEnvironmentAccess*, UInt32)
    call : Proc(IMFProtectedEnvironmentAccess*, UInt32, UInt8*, UInt32, UInt8*, HRESULT)
    read_grl : Proc(IMFProtectedEnvironmentAccess*, UInt32*, UInt8**, HRESULT)
  end

  IMFProtectedEnvironmentAccess_GUID = "ef5dc845-f0d9-4ec9-b00c-cb5183d38434"
  IID_IMFProtectedEnvironmentAccess = LibC::GUID.new(0xef5dc845_u32, 0xf0d9_u16, 0x4ec9_u16, StaticArray[0xb0_u8, 0xc_u8, 0xcb_u8, 0x51_u8, 0x83_u8, 0xd3_u8, 0x84_u8, 0x34_u8])
  struct IMFProtectedEnvironmentAccess
    lpVtbl : IMFProtectedEnvironmentAccessVTbl*
  end

  struct IMFSignedLibraryVTbl
    query_interface : Proc(IMFSignedLibrary*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSignedLibrary*, UInt32)
    release : Proc(IMFSignedLibrary*, UInt32)
    get_procedure_address : Proc(IMFSignedLibrary*, PSTR, Void**, HRESULT)
  end

  IMFSignedLibrary_GUID = "4a724bca-ff6a-4c07-8e0d-7a358421cf06"
  IID_IMFSignedLibrary = LibC::GUID.new(0x4a724bca_u32, 0xff6a_u16, 0x4c07_u16, StaticArray[0x8e_u8, 0xd_u8, 0x7a_u8, 0x35_u8, 0x84_u8, 0x21_u8, 0xcf_u8, 0x6_u8])
  struct IMFSignedLibrary
    lpVtbl : IMFSignedLibraryVTbl*
  end

  struct IMFSystemIdVTbl
    query_interface : Proc(IMFSystemId*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSystemId*, UInt32)
    release : Proc(IMFSystemId*, UInt32)
    get_data : Proc(IMFSystemId*, UInt32*, UInt8**, HRESULT)
    setup : Proc(IMFSystemId*, UInt32, UInt32, UInt8*, UInt32*, UInt8**, HRESULT)
  end

  IMFSystemId_GUID = "fff4af3a-1fc1-4ef9-a29b-d26c49e2f31a"
  IID_IMFSystemId = LibC::GUID.new(0xfff4af3a_u32, 0x1fc1_u16, 0x4ef9_u16, StaticArray[0xa2_u8, 0x9b_u8, 0xd2_u8, 0x6c_u8, 0x49_u8, 0xe2_u8, 0xf3_u8, 0x1a_u8])
  struct IMFSystemId
    lpVtbl : IMFSystemIdVTbl*
  end

  struct IMFContentProtectionDeviceVTbl
    query_interface : Proc(IMFContentProtectionDevice*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFContentProtectionDevice*, UInt32)
    release : Proc(IMFContentProtectionDevice*, UInt32)
    invoke_function : Proc(IMFContentProtectionDevice*, UInt32, UInt32, UInt8*, UInt32*, UInt8*, HRESULT)
    get_private_data_byte_count : Proc(IMFContentProtectionDevice*, UInt32*, UInt32*, HRESULT)
  end

  IMFContentProtectionDevice_GUID = "e6257174-a060-4c9a-a088-3b1b471cad28"
  IID_IMFContentProtectionDevice = LibC::GUID.new(0xe6257174_u32, 0xa060_u16, 0x4c9a_u16, StaticArray[0xa0_u8, 0x88_u8, 0x3b_u8, 0x1b_u8, 0x47_u8, 0x1c_u8, 0xad_u8, 0x28_u8])
  struct IMFContentProtectionDevice
    lpVtbl : IMFContentProtectionDeviceVTbl*
  end

  struct IMFContentDecryptorContextVTbl
    query_interface : Proc(IMFContentDecryptorContext*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFContentDecryptorContext*, UInt32)
    release : Proc(IMFContentDecryptorContext*, UInt32)
    initialize_hardware_key : Proc(IMFContentDecryptorContext*, UInt32, Void*, UInt64*, HRESULT)
  end

  IMFContentDecryptorContext_GUID = "7ec4b1bd-43fb-4763-85d2-64fcb5c5f4cb"
  IID_IMFContentDecryptorContext = LibC::GUID.new(0x7ec4b1bd_u32, 0x43fb_u16, 0x4763_u16, StaticArray[0x85_u8, 0xd2_u8, 0x64_u8, 0xfc_u8, 0xb5_u8, 0xc5_u8, 0xf4_u8, 0xcb_u8])
  struct IMFContentDecryptorContext
    lpVtbl : IMFContentDecryptorContextVTbl*
  end

  struct IMFNetCrossOriginSupportVTbl
    query_interface : Proc(IMFNetCrossOriginSupport*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFNetCrossOriginSupport*, UInt32)
    release : Proc(IMFNetCrossOriginSupport*, UInt32)
    get_cross_origin_policy : Proc(IMFNetCrossOriginSupport*, MF_CROSS_ORIGIN_POLICY*, HRESULT)
    get_source_origin : Proc(IMFNetCrossOriginSupport*, LibC::LPWSTR*, HRESULT)
    is_same_origin : Proc(IMFNetCrossOriginSupport*, LibC::LPWSTR, LibC::BOOL*, HRESULT)
  end

  IMFNetCrossOriginSupport_GUID = "bc2b7d44-a72d-49d5-8376-1480dee58b22"
  IID_IMFNetCrossOriginSupport = LibC::GUID.new(0xbc2b7d44_u32, 0xa72d_u16, 0x49d5_u16, StaticArray[0x83_u8, 0x76_u8, 0x14_u8, 0x80_u8, 0xde_u8, 0xe5_u8, 0x8b_u8, 0x22_u8])
  struct IMFNetCrossOriginSupport
    lpVtbl : IMFNetCrossOriginSupportVTbl*
  end

  struct IMFHttpDownloadRequestVTbl
    query_interface : Proc(IMFHttpDownloadRequest*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFHttpDownloadRequest*, UInt32)
    release : Proc(IMFHttpDownloadRequest*, UInt32)
    add_header : Proc(IMFHttpDownloadRequest*, LibC::LPWSTR, HRESULT)
    begin_send_request : Proc(IMFHttpDownloadRequest*, UInt8*, UInt32, IMFAsyncCallback, IUnknown, HRESULT)
    end_send_request : Proc(IMFHttpDownloadRequest*, IMFAsyncResult, HRESULT)
    begin_receive_response : Proc(IMFHttpDownloadRequest*, IMFAsyncCallback, IUnknown, HRESULT)
    end_receive_response : Proc(IMFHttpDownloadRequest*, IMFAsyncResult, HRESULT)
    begin_read_payload : Proc(IMFHttpDownloadRequest*, UInt8*, UInt32, IMFAsyncCallback, IUnknown, HRESULT)
    end_read_payload : Proc(IMFHttpDownloadRequest*, IMFAsyncResult, UInt64*, UInt32*, HRESULT)
    query_header : Proc(IMFHttpDownloadRequest*, LibC::LPWSTR, UInt32, LibC::LPWSTR*, HRESULT)
    get_url : Proc(IMFHttpDownloadRequest*, LibC::LPWSTR*, HRESULT)
    has_null_source_origin : Proc(IMFHttpDownloadRequest*, LibC::BOOL*, HRESULT)
    get_time_seek_result : Proc(IMFHttpDownloadRequest*, UInt64*, UInt64*, UInt64*, HRESULT)
    get_http_status : Proc(IMFHttpDownloadRequest*, UInt32*, HRESULT)
    get_at_end_of_payload : Proc(IMFHttpDownloadRequest*, LibC::BOOL*, HRESULT)
    get_total_length : Proc(IMFHttpDownloadRequest*, UInt64*, HRESULT)
    get_range_end_offset : Proc(IMFHttpDownloadRequest*, UInt64*, HRESULT)
    close : Proc(IMFHttpDownloadRequest*, HRESULT)
  end

  IMFHttpDownloadRequest_GUID = "f779fddf-26e7-4270-8a8b-b983d1859de0"
  IID_IMFHttpDownloadRequest = LibC::GUID.new(0xf779fddf_u32, 0x26e7_u16, 0x4270_u16, StaticArray[0x8a_u8, 0x8b_u8, 0xb9_u8, 0x83_u8, 0xd1_u8, 0x85_u8, 0x9d_u8, 0xe0_u8])
  struct IMFHttpDownloadRequest
    lpVtbl : IMFHttpDownloadRequestVTbl*
  end

  struct IMFHttpDownloadSessionVTbl
    query_interface : Proc(IMFHttpDownloadSession*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFHttpDownloadSession*, UInt32)
    release : Proc(IMFHttpDownloadSession*, UInt32)
    set_server : Proc(IMFHttpDownloadSession*, LibC::LPWSTR, UInt32, HRESULT)
    create_request : Proc(IMFHttpDownloadSession*, LibC::LPWSTR, LibC::BOOL, LibC::BOOL, LibC::LPWSTR, LibC::LPWSTR, IMFHttpDownloadRequest*, HRESULT)
    close : Proc(IMFHttpDownloadSession*, HRESULT)
  end

  IMFHttpDownloadSession_GUID = "71fa9a2c-53ce-4662-a132-1a7e8cbf62db"
  IID_IMFHttpDownloadSession = LibC::GUID.new(0x71fa9a2c_u32, 0x53ce_u16, 0x4662_u16, StaticArray[0xa1_u8, 0x32_u8, 0x1a_u8, 0x7e_u8, 0x8c_u8, 0xbf_u8, 0x62_u8, 0xdb_u8])
  struct IMFHttpDownloadSession
    lpVtbl : IMFHttpDownloadSessionVTbl*
  end

  struct IMFHttpDownloadSessionProviderVTbl
    query_interface : Proc(IMFHttpDownloadSessionProvider*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFHttpDownloadSessionProvider*, UInt32)
    release : Proc(IMFHttpDownloadSessionProvider*, UInt32)
    create_http_download_session : Proc(IMFHttpDownloadSessionProvider*, LibC::LPWSTR, IMFHttpDownloadSession*, HRESULT)
  end

  IMFHttpDownloadSessionProvider_GUID = "1b4cf4b9-3a16-4115-839d-03cc5c99df01"
  IID_IMFHttpDownloadSessionProvider = LibC::GUID.new(0x1b4cf4b9_u32, 0x3a16_u16, 0x4115_u16, StaticArray[0x83_u8, 0x9d_u8, 0x3_u8, 0xcc_u8, 0x5c_u8, 0x99_u8, 0xdf_u8, 0x1_u8])
  struct IMFHttpDownloadSessionProvider
    lpVtbl : IMFHttpDownloadSessionProviderVTbl*
  end

  struct IMFMediaSource2VTbl
    query_interface : Proc(IMFMediaSource2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaSource2*, UInt32)
    release : Proc(IMFMediaSource2*, UInt32)
    get_event : Proc(IMFMediaSource2*, MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, IMFMediaEvent*, HRESULT)
    begin_get_event : Proc(IMFMediaSource2*, IMFAsyncCallback, IUnknown, HRESULT)
    end_get_event : Proc(IMFMediaSource2*, IMFAsyncResult, IMFMediaEvent*, HRESULT)
    queue_event : Proc(IMFMediaSource2*, UInt32, Guid*, HRESULT, PROPVARIANT*, HRESULT)
    get_characteristics : Proc(IMFMediaSource2*, UInt32*, HRESULT)
    create_presentation_descriptor : Proc(IMFMediaSource2*, IMFPresentationDescriptor*, HRESULT)
    start : Proc(IMFMediaSource2*, IMFPresentationDescriptor, Guid*, PROPVARIANT*, HRESULT)
    stop : Proc(IMFMediaSource2*, HRESULT)
    pause : Proc(IMFMediaSource2*, HRESULT)
    shutdown : Proc(IMFMediaSource2*, HRESULT)
    get_source_attributes : Proc(IMFMediaSource2*, IMFAttributes*, HRESULT)
    get_stream_attributes : Proc(IMFMediaSource2*, UInt32, IMFAttributes*, HRESULT)
    set_d3_d_manager : Proc(IMFMediaSource2*, IUnknown, HRESULT)
    set_media_type : Proc(IMFMediaSource2*, UInt32, IMFMediaType, HRESULT)
  end

  IMFMediaSource2_GUID = "fbb03414-d13b-4786-8319-5ac51fc0a136"
  IID_IMFMediaSource2 = LibC::GUID.new(0xfbb03414_u32, 0xd13b_u16, 0x4786_u16, StaticArray[0x83_u8, 0x19_u8, 0x5a_u8, 0xc5_u8, 0x1f_u8, 0xc0_u8, 0xa1_u8, 0x36_u8])
  struct IMFMediaSource2
    lpVtbl : IMFMediaSource2VTbl*
  end

  struct IMFMediaStream2VTbl
    query_interface : Proc(IMFMediaStream2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaStream2*, UInt32)
    release : Proc(IMFMediaStream2*, UInt32)
    get_event : Proc(IMFMediaStream2*, MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, IMFMediaEvent*, HRESULT)
    begin_get_event : Proc(IMFMediaStream2*, IMFAsyncCallback, IUnknown, HRESULT)
    end_get_event : Proc(IMFMediaStream2*, IMFAsyncResult, IMFMediaEvent*, HRESULT)
    queue_event : Proc(IMFMediaStream2*, UInt32, Guid*, HRESULT, PROPVARIANT*, HRESULT)
    get_media_source : Proc(IMFMediaStream2*, IMFMediaSource*, HRESULT)
    get_stream_descriptor : Proc(IMFMediaStream2*, IMFStreamDescriptor*, HRESULT)
    request_sample : Proc(IMFMediaStream2*, IUnknown, HRESULT)
    set_stream_state : Proc(IMFMediaStream2*, MF_STREAM_STATE, HRESULT)
    get_stream_state : Proc(IMFMediaStream2*, MF_STREAM_STATE*, HRESULT)
  end

  IMFMediaStream2_GUID = "c5bc37d6-75c7-46a1-a132-81b5f723c20f"
  IID_IMFMediaStream2 = LibC::GUID.new(0xc5bc37d6_u32, 0x75c7_u16, 0x46a1_u16, StaticArray[0xa1_u8, 0x32_u8, 0x81_u8, 0xb5_u8, 0xf7_u8, 0x23_u8, 0xc2_u8, 0xf_u8])
  struct IMFMediaStream2
    lpVtbl : IMFMediaStream2VTbl*
  end

  struct IMFSensorDeviceVTbl
    query_interface : Proc(IMFSensorDevice*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSensorDevice*, UInt32)
    release : Proc(IMFSensorDevice*, UInt32)
    get_device_id : Proc(IMFSensorDevice*, UInt64*, HRESULT)
    get_device_type : Proc(IMFSensorDevice*, MFSensorDeviceType*, HRESULT)
    get_flags : Proc(IMFSensorDevice*, UInt64*, HRESULT)
    get_symbolic_link : Proc(IMFSensorDevice*, Char*, Int32, Int32*, HRESULT)
    get_device_attributes : Proc(IMFSensorDevice*, IMFAttributes*, HRESULT)
    get_stream_attributes_count : Proc(IMFSensorDevice*, MFSensorStreamType, UInt32*, HRESULT)
    get_stream_attributes : Proc(IMFSensorDevice*, MFSensorStreamType, UInt32, IMFAttributes*, HRESULT)
    set_sensor_device_mode : Proc(IMFSensorDevice*, MFSensorDeviceMode, HRESULT)
    get_sensor_device_mode : Proc(IMFSensorDevice*, MFSensorDeviceMode*, HRESULT)
  end

  IMFSensorDevice_GUID = "fb9f48f2-2a18-4e28-9730-786f30f04dc4"
  IID_IMFSensorDevice = LibC::GUID.new(0xfb9f48f2_u32, 0x2a18_u16, 0x4e28_u16, StaticArray[0x97_u8, 0x30_u8, 0x78_u8, 0x6f_u8, 0x30_u8, 0xf0_u8, 0x4d_u8, 0xc4_u8])
  struct IMFSensorDevice
    lpVtbl : IMFSensorDeviceVTbl*
  end

  struct IMFSensorGroupVTbl
    query_interface : Proc(IMFSensorGroup*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSensorGroup*, UInt32)
    release : Proc(IMFSensorGroup*, UInt32)
    get_symbolic_link : Proc(IMFSensorGroup*, Char*, Int32, Int32*, HRESULT)
    get_flags : Proc(IMFSensorGroup*, UInt64*, HRESULT)
    get_sensor_group_attributes : Proc(IMFSensorGroup*, IMFAttributes*, HRESULT)
    get_sensor_device_count : Proc(IMFSensorGroup*, UInt32*, HRESULT)
    get_sensor_device : Proc(IMFSensorGroup*, UInt32, IMFSensorDevice*, HRESULT)
    set_default_sensor_device_index : Proc(IMFSensorGroup*, UInt32, HRESULT)
    get_default_sensor_device_index : Proc(IMFSensorGroup*, UInt32*, HRESULT)
    create_media_source : Proc(IMFSensorGroup*, IMFMediaSource*, HRESULT)
  end

  IMFSensorGroup_GUID = "4110243a-9757-461f-89f1-f22345bcab4e"
  IID_IMFSensorGroup = LibC::GUID.new(0x4110243a_u32, 0x9757_u16, 0x461f_u16, StaticArray[0x89_u8, 0xf1_u8, 0xf2_u8, 0x23_u8, 0x45_u8, 0xbc_u8, 0xab_u8, 0x4e_u8])
  struct IMFSensorGroup
    lpVtbl : IMFSensorGroupVTbl*
  end

  struct IMFSensorStreamVTbl
    query_interface : Proc(IMFSensorStream*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSensorStream*, UInt32)
    release : Proc(IMFSensorStream*, UInt32)
    get_item : Proc(IMFSensorStream*, Guid*, PROPVARIANT*, HRESULT)
    get_item_type : Proc(IMFSensorStream*, Guid*, MF_ATTRIBUTE_TYPE*, HRESULT)
    compare_item : Proc(IMFSensorStream*, Guid*, PROPVARIANT*, LibC::BOOL*, HRESULT)
    compare : Proc(IMFSensorStream*, IMFAttributes, MF_ATTRIBUTES_MATCH_TYPE, LibC::BOOL*, HRESULT)
    get_uint32 : Proc(IMFSensorStream*, Guid*, UInt32*, HRESULT)
    get_uint64 : Proc(IMFSensorStream*, Guid*, UInt64*, HRESULT)
    get_double : Proc(IMFSensorStream*, Guid*, Float64*, HRESULT)
    get_guid : Proc(IMFSensorStream*, Guid*, Guid*, HRESULT)
    get_string_length : Proc(IMFSensorStream*, Guid*, UInt32*, HRESULT)
    get_string : Proc(IMFSensorStream*, Guid*, Char*, UInt32, UInt32*, HRESULT)
    get_allocated_string : Proc(IMFSensorStream*, Guid*, LibC::LPWSTR*, UInt32*, HRESULT)
    get_blob_size : Proc(IMFSensorStream*, Guid*, UInt32*, HRESULT)
    get_blob : Proc(IMFSensorStream*, Guid*, UInt8*, UInt32, UInt32*, HRESULT)
    get_allocated_blob : Proc(IMFSensorStream*, Guid*, UInt8**, UInt32*, HRESULT)
    get_unknown : Proc(IMFSensorStream*, Guid*, Guid*, Void**, HRESULT)
    set_item : Proc(IMFSensorStream*, Guid*, PROPVARIANT*, HRESULT)
    delete_item : Proc(IMFSensorStream*, Guid*, HRESULT)
    delete_all_items : Proc(IMFSensorStream*, HRESULT)
    set_uint32 : Proc(IMFSensorStream*, Guid*, UInt32, HRESULT)
    set_uint64 : Proc(IMFSensorStream*, Guid*, UInt64, HRESULT)
    set_double : Proc(IMFSensorStream*, Guid*, Float64, HRESULT)
    set_guid : Proc(IMFSensorStream*, Guid*, Guid*, HRESULT)
    set_string : Proc(IMFSensorStream*, Guid*, LibC::LPWSTR, HRESULT)
    set_blob : Proc(IMFSensorStream*, Guid*, UInt8*, UInt32, HRESULT)
    set_unknown : Proc(IMFSensorStream*, Guid*, IUnknown, HRESULT)
    lock_store : Proc(IMFSensorStream*, HRESULT)
    unlock_store : Proc(IMFSensorStream*, HRESULT)
    get_count : Proc(IMFSensorStream*, UInt32*, HRESULT)
    get_item_by_index : Proc(IMFSensorStream*, UInt32, Guid*, PROPVARIANT*, HRESULT)
    copy_all_items : Proc(IMFSensorStream*, IMFAttributes, HRESULT)
    get_media_type_count : Proc(IMFSensorStream*, UInt32*, HRESULT)
    get_media_type : Proc(IMFSensorStream*, UInt32, IMFMediaType*, HRESULT)
    clone_sensor_stream : Proc(IMFSensorStream*, IMFSensorStream*, HRESULT)
  end

  IMFSensorStream_GUID = "e9a42171-c56e-498a-8b39-eda5a070b7fc"
  IID_IMFSensorStream = LibC::GUID.new(0xe9a42171_u32, 0xc56e_u16, 0x498a_u16, StaticArray[0x8b_u8, 0x39_u8, 0xed_u8, 0xa5_u8, 0xa0_u8, 0x70_u8, 0xb7_u8, 0xfc_u8])
  struct IMFSensorStream
    lpVtbl : IMFSensorStreamVTbl*
  end

  struct IMFSensorTransformFactoryVTbl
    query_interface : Proc(IMFSensorTransformFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSensorTransformFactory*, UInt32)
    release : Proc(IMFSensorTransformFactory*, UInt32)
    get_factory_attributes : Proc(IMFSensorTransformFactory*, IMFAttributes*, HRESULT)
    initialize_factory : Proc(IMFSensorTransformFactory*, UInt32, IMFCollection, IMFAttributes, HRESULT)
    get_transform_count : Proc(IMFSensorTransformFactory*, UInt32*, HRESULT)
    get_transform_information : Proc(IMFSensorTransformFactory*, UInt32, Guid*, IMFAttributes*, IMFCollection*, HRESULT)
    create_transform : Proc(IMFSensorTransformFactory*, Guid*, IMFAttributes, IMFDeviceTransform*, HRESULT)
  end

  IMFSensorTransformFactory_GUID = "eed9c2ee-66b4-4f18-a697-ac7d3960215c"
  IID_IMFSensorTransformFactory = LibC::GUID.new(0xeed9c2ee_u32, 0x66b4_u16, 0x4f18_u16, StaticArray[0xa6_u8, 0x97_u8, 0xac_u8, 0x7d_u8, 0x39_u8, 0x60_u8, 0x21_u8, 0x5c_u8])
  struct IMFSensorTransformFactory
    lpVtbl : IMFSensorTransformFactoryVTbl*
  end

  struct IMFSensorProfileVTbl
    query_interface : Proc(IMFSensorProfile*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSensorProfile*, UInt32)
    release : Proc(IMFSensorProfile*, UInt32)
    get_profile_id : Proc(IMFSensorProfile*, SENSORPROFILEID*, HRESULT)
    add_profile_filter : Proc(IMFSensorProfile*, UInt32, LibC::LPWSTR, HRESULT)
    is_media_type_supported : Proc(IMFSensorProfile*, UInt32, IMFMediaType, LibC::BOOL*, HRESULT)
    add_blocked_control : Proc(IMFSensorProfile*, LibC::LPWSTR, HRESULT)
  end

  IMFSensorProfile_GUID = "22f765d1-8dab-4107-846d-56baf72215e7"
  IID_IMFSensorProfile = LibC::GUID.new(0x22f765d1_u32, 0x8dab_u16, 0x4107_u16, StaticArray[0x84_u8, 0x6d_u8, 0x56_u8, 0xba_u8, 0xf7_u8, 0x22_u8, 0x15_u8, 0xe7_u8])
  struct IMFSensorProfile
    lpVtbl : IMFSensorProfileVTbl*
  end

  struct IMFSensorProfileCollectionVTbl
    query_interface : Proc(IMFSensorProfileCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSensorProfileCollection*, UInt32)
    release : Proc(IMFSensorProfileCollection*, UInt32)
    get_profile_count : Proc(IMFSensorProfileCollection*, UInt32)
    get_profile : Proc(IMFSensorProfileCollection*, UInt32, IMFSensorProfile*, HRESULT)
    add_profile : Proc(IMFSensorProfileCollection*, IMFSensorProfile, HRESULT)
    find_profile : Proc(IMFSensorProfileCollection*, SENSORPROFILEID*, IMFSensorProfile*, HRESULT)
    remove_profile_by_index : Proc(IMFSensorProfileCollection*, UInt32, Void)
    remove_profile : Proc(IMFSensorProfileCollection*, SENSORPROFILEID*, Void)
  end

  IMFSensorProfileCollection_GUID = "c95ea55b-0187-48be-9353-8d2507662351"
  IID_IMFSensorProfileCollection = LibC::GUID.new(0xc95ea55b_u32, 0x187_u16, 0x48be_u16, StaticArray[0x93_u8, 0x53_u8, 0x8d_u8, 0x25_u8, 0x7_u8, 0x66_u8, 0x23_u8, 0x51_u8])
  struct IMFSensorProfileCollection
    lpVtbl : IMFSensorProfileCollectionVTbl*
  end

  struct IMFSensorProcessActivityVTbl
    query_interface : Proc(IMFSensorProcessActivity*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSensorProcessActivity*, UInt32)
    release : Proc(IMFSensorProcessActivity*, UInt32)
    get_process_id : Proc(IMFSensorProcessActivity*, UInt32*, HRESULT)
    get_streaming_state : Proc(IMFSensorProcessActivity*, LibC::BOOL*, HRESULT)
    get_streaming_mode : Proc(IMFSensorProcessActivity*, MFSensorDeviceMode*, HRESULT)
    get_report_time : Proc(IMFSensorProcessActivity*, FILETIME*, HRESULT)
  end

  IMFSensorProcessActivity_GUID = "39dc7f4a-b141-4719-813c-a7f46162a2b8"
  IID_IMFSensorProcessActivity = LibC::GUID.new(0x39dc7f4a_u32, 0xb141_u16, 0x4719_u16, StaticArray[0x81_u8, 0x3c_u8, 0xa7_u8, 0xf4_u8, 0x61_u8, 0x62_u8, 0xa2_u8, 0xb8_u8])
  struct IMFSensorProcessActivity
    lpVtbl : IMFSensorProcessActivityVTbl*
  end

  struct IMFSensorActivityReportVTbl
    query_interface : Proc(IMFSensorActivityReport*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSensorActivityReport*, UInt32)
    release : Proc(IMFSensorActivityReport*, UInt32)
    get_friendly_name : Proc(IMFSensorActivityReport*, Char*, UInt32, UInt32*, HRESULT)
    get_symbolic_link : Proc(IMFSensorActivityReport*, Char*, UInt32, UInt32*, HRESULT)
    get_process_count : Proc(IMFSensorActivityReport*, UInt32*, HRESULT)
    get_process_activity : Proc(IMFSensorActivityReport*, UInt32, IMFSensorProcessActivity*, HRESULT)
  end

  IMFSensorActivityReport_GUID = "3e8c4be1-a8c2-4528-90de-2851bde5fead"
  IID_IMFSensorActivityReport = LibC::GUID.new(0x3e8c4be1_u32, 0xa8c2_u16, 0x4528_u16, StaticArray[0x90_u8, 0xde_u8, 0x28_u8, 0x51_u8, 0xbd_u8, 0xe5_u8, 0xfe_u8, 0xad_u8])
  struct IMFSensorActivityReport
    lpVtbl : IMFSensorActivityReportVTbl*
  end

  struct IMFSensorActivitiesReportVTbl
    query_interface : Proc(IMFSensorActivitiesReport*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSensorActivitiesReport*, UInt32)
    release : Proc(IMFSensorActivitiesReport*, UInt32)
    get_count : Proc(IMFSensorActivitiesReport*, UInt32*, HRESULT)
    get_activity_report : Proc(IMFSensorActivitiesReport*, UInt32, IMFSensorActivityReport*, HRESULT)
    get_activity_report_by_device_name : Proc(IMFSensorActivitiesReport*, LibC::LPWSTR, IMFSensorActivityReport*, HRESULT)
  end

  IMFSensorActivitiesReport_GUID = "683f7a5e-4a19-43cd-b1a9-dbf4ab3f7777"
  IID_IMFSensorActivitiesReport = LibC::GUID.new(0x683f7a5e_u32, 0x4a19_u16, 0x43cd_u16, StaticArray[0xb1_u8, 0xa9_u8, 0xdb_u8, 0xf4_u8, 0xab_u8, 0x3f_u8, 0x77_u8, 0x77_u8])
  struct IMFSensorActivitiesReport
    lpVtbl : IMFSensorActivitiesReportVTbl*
  end

  struct IMFSensorActivitiesReportCallbackVTbl
    query_interface : Proc(IMFSensorActivitiesReportCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSensorActivitiesReportCallback*, UInt32)
    release : Proc(IMFSensorActivitiesReportCallback*, UInt32)
    on_activities_report : Proc(IMFSensorActivitiesReportCallback*, IMFSensorActivitiesReport, HRESULT)
  end

  IMFSensorActivitiesReportCallback_GUID = "de5072ee-dbe3-46dc-8a87-b6f631194751"
  IID_IMFSensorActivitiesReportCallback = LibC::GUID.new(0xde5072ee_u32, 0xdbe3_u16, 0x46dc_u16, StaticArray[0x8a_u8, 0x87_u8, 0xb6_u8, 0xf6_u8, 0x31_u8, 0x19_u8, 0x47_u8, 0x51_u8])
  struct IMFSensorActivitiesReportCallback
    lpVtbl : IMFSensorActivitiesReportCallbackVTbl*
  end

  struct IMFSensorActivityMonitorVTbl
    query_interface : Proc(IMFSensorActivityMonitor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSensorActivityMonitor*, UInt32)
    release : Proc(IMFSensorActivityMonitor*, UInt32)
    start : Proc(IMFSensorActivityMonitor*, HRESULT)
    stop : Proc(IMFSensorActivityMonitor*, HRESULT)
  end

  IMFSensorActivityMonitor_GUID = "d0cef145-b3f4-4340-a2e5-7a5080ca05cb"
  IID_IMFSensorActivityMonitor = LibC::GUID.new(0xd0cef145_u32, 0xb3f4_u16, 0x4340_u16, StaticArray[0xa2_u8, 0xe5_u8, 0x7a_u8, 0x50_u8, 0x80_u8, 0xca_u8, 0x5_u8, 0xcb_u8])
  struct IMFSensorActivityMonitor
    lpVtbl : IMFSensorActivityMonitorVTbl*
  end

  struct IMFExtendedCameraIntrinsicModelVTbl
    query_interface : Proc(IMFExtendedCameraIntrinsicModel*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFExtendedCameraIntrinsicModel*, UInt32)
    release : Proc(IMFExtendedCameraIntrinsicModel*, UInt32)
    get_model : Proc(IMFExtendedCameraIntrinsicModel*, MFExtendedCameraIntrinsic_IntrinsicModel*, HRESULT)
    set_model : Proc(IMFExtendedCameraIntrinsicModel*, MFExtendedCameraIntrinsic_IntrinsicModel*, HRESULT)
    get_distortion_model_type : Proc(IMFExtendedCameraIntrinsicModel*, MFCameraIntrinsic_DistortionModelType*, HRESULT)
  end

  IMFExtendedCameraIntrinsicModel_GUID = "5c595e64-4630-4231-855a-12842f733245"
  IID_IMFExtendedCameraIntrinsicModel = LibC::GUID.new(0x5c595e64_u32, 0x4630_u16, 0x4231_u16, StaticArray[0x85_u8, 0x5a_u8, 0x12_u8, 0x84_u8, 0x2f_u8, 0x73_u8, 0x32_u8, 0x45_u8])
  struct IMFExtendedCameraIntrinsicModel
    lpVtbl : IMFExtendedCameraIntrinsicModelVTbl*
  end

  struct IMFExtendedCameraIntrinsicsDistortionModel6KTVTbl
    query_interface : Proc(IMFExtendedCameraIntrinsicsDistortionModel6KT*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFExtendedCameraIntrinsicsDistortionModel6KT*, UInt32)
    release : Proc(IMFExtendedCameraIntrinsicsDistortionModel6KT*, UInt32)
    get_distortion_model : Proc(IMFExtendedCameraIntrinsicsDistortionModel6KT*, MFCameraIntrinsic_DistortionModel6KT*, HRESULT)
    set_distortion_model : Proc(IMFExtendedCameraIntrinsicsDistortionModel6KT*, MFCameraIntrinsic_DistortionModel6KT*, HRESULT)
  end

  IMFExtendedCameraIntrinsicsDistortionModel6KT_GUID = "74c2653b-5f55-4eb1-9f0f-18b8f68b7d3d"
  IID_IMFExtendedCameraIntrinsicsDistortionModel6KT = LibC::GUID.new(0x74c2653b_u32, 0x5f55_u16, 0x4eb1_u16, StaticArray[0x9f_u8, 0xf_u8, 0x18_u8, 0xb8_u8, 0xf6_u8, 0x8b_u8, 0x7d_u8, 0x3d_u8])
  struct IMFExtendedCameraIntrinsicsDistortionModel6KT
    lpVtbl : IMFExtendedCameraIntrinsicsDistortionModel6KTVTbl*
  end

  struct IMFExtendedCameraIntrinsicsDistortionModelArcTanVTbl
    query_interface : Proc(IMFExtendedCameraIntrinsicsDistortionModelArcTan*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFExtendedCameraIntrinsicsDistortionModelArcTan*, UInt32)
    release : Proc(IMFExtendedCameraIntrinsicsDistortionModelArcTan*, UInt32)
    get_distortion_model : Proc(IMFExtendedCameraIntrinsicsDistortionModelArcTan*, MFCameraIntrinsic_DistortionModelArcTan*, HRESULT)
    set_distortion_model : Proc(IMFExtendedCameraIntrinsicsDistortionModelArcTan*, MFCameraIntrinsic_DistortionModelArcTan*, HRESULT)
  end

  IMFExtendedCameraIntrinsicsDistortionModelArcTan_GUID = "812d5f95-b572-45dc-bafc-ae24199ddda8"
  IID_IMFExtendedCameraIntrinsicsDistortionModelArcTan = LibC::GUID.new(0x812d5f95_u32, 0xb572_u16, 0x45dc_u16, StaticArray[0xba_u8, 0xfc_u8, 0xae_u8, 0x24_u8, 0x19_u8, 0x9d_u8, 0xdd_u8, 0xa8_u8])
  struct IMFExtendedCameraIntrinsicsDistortionModelArcTan
    lpVtbl : IMFExtendedCameraIntrinsicsDistortionModelArcTanVTbl*
  end

  struct IMFExtendedCameraIntrinsicsVTbl
    query_interface : Proc(IMFExtendedCameraIntrinsics*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFExtendedCameraIntrinsics*, UInt32)
    release : Proc(IMFExtendedCameraIntrinsics*, UInt32)
    initialize_from_buffer : Proc(IMFExtendedCameraIntrinsics*, UInt8*, UInt32, HRESULT)
    get_buffer_size : Proc(IMFExtendedCameraIntrinsics*, UInt32*, HRESULT)
    serialize_to_buffer : Proc(IMFExtendedCameraIntrinsics*, UInt8*, UInt32*, HRESULT)
    get_intrinsic_model_count : Proc(IMFExtendedCameraIntrinsics*, UInt32*, HRESULT)
    get_intrinsic_model_by_index : Proc(IMFExtendedCameraIntrinsics*, UInt32, IMFExtendedCameraIntrinsicModel*, HRESULT)
    add_intrinsic_model : Proc(IMFExtendedCameraIntrinsics*, IMFExtendedCameraIntrinsicModel, HRESULT)
  end

  IMFExtendedCameraIntrinsics_GUID = "687f6dac-6987-4750-a16a-734d1e7a10fe"
  IID_IMFExtendedCameraIntrinsics = LibC::GUID.new(0x687f6dac_u32, 0x6987_u16, 0x4750_u16, StaticArray[0xa1_u8, 0x6a_u8, 0x73_u8, 0x4d_u8, 0x1e_u8, 0x7a_u8, 0x10_u8, 0xfe_u8])
  struct IMFExtendedCameraIntrinsics
    lpVtbl : IMFExtendedCameraIntrinsicsVTbl*
  end

  struct IMFExtendedCameraControlVTbl
    query_interface : Proc(IMFExtendedCameraControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFExtendedCameraControl*, UInt32)
    release : Proc(IMFExtendedCameraControl*, UInt32)
    get_capabilities : Proc(IMFExtendedCameraControl*, UInt64)
    set_flags : Proc(IMFExtendedCameraControl*, UInt64, HRESULT)
    get_flags : Proc(IMFExtendedCameraControl*, UInt64)
    lock_payload : Proc(IMFExtendedCameraControl*, UInt8**, UInt32*, HRESULT)
    unlock_payload : Proc(IMFExtendedCameraControl*, HRESULT)
    commit_settings : Proc(IMFExtendedCameraControl*, HRESULT)
  end

  IMFExtendedCameraControl_GUID = "38e33520-fca1-4845-a27a-68b7c6ab3789"
  IID_IMFExtendedCameraControl = LibC::GUID.new(0x38e33520_u32, 0xfca1_u16, 0x4845_u16, StaticArray[0xa2_u8, 0x7a_u8, 0x68_u8, 0xb7_u8, 0xc6_u8, 0xab_u8, 0x37_u8, 0x89_u8])
  struct IMFExtendedCameraControl
    lpVtbl : IMFExtendedCameraControlVTbl*
  end

  struct IMFExtendedCameraControllerVTbl
    query_interface : Proc(IMFExtendedCameraController*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFExtendedCameraController*, UInt32)
    release : Proc(IMFExtendedCameraController*, UInt32)
    get_extended_camera_control : Proc(IMFExtendedCameraController*, UInt32, UInt32, IMFExtendedCameraControl*, HRESULT)
  end

  IMFExtendedCameraController_GUID = "b91ebfee-ca03-4af4-8a82-a31752f4a0fc"
  IID_IMFExtendedCameraController = LibC::GUID.new(0xb91ebfee_u32, 0xca03_u16, 0x4af4_u16, StaticArray[0x8a_u8, 0x82_u8, 0xa3_u8, 0x17_u8, 0x52_u8, 0xf4_u8, 0xa0_u8, 0xfc_u8])
  struct IMFExtendedCameraController
    lpVtbl : IMFExtendedCameraControllerVTbl*
  end

  struct IMFRelativePanelReportVTbl
    query_interface : Proc(IMFRelativePanelReport*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFRelativePanelReport*, UInt32)
    release : Proc(IMFRelativePanelReport*, UInt32)
    get_relative_panel : Proc(IMFRelativePanelReport*, UInt32*, HRESULT)
  end

  IMFRelativePanelReport_GUID = "f25362ea-2c0e-447f-81e2-755914cdc0c3"
  IID_IMFRelativePanelReport = LibC::GUID.new(0xf25362ea_u32, 0x2c0e_u16, 0x447f_u16, StaticArray[0x81_u8, 0xe2_u8, 0x75_u8, 0x59_u8, 0x14_u8, 0xcd_u8, 0xc0_u8, 0xc3_u8])
  struct IMFRelativePanelReport
    lpVtbl : IMFRelativePanelReportVTbl*
  end

  struct IMFRelativePanelWatcherVTbl
    query_interface : Proc(IMFRelativePanelWatcher*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFRelativePanelWatcher*, UInt32)
    release : Proc(IMFRelativePanelWatcher*, UInt32)
    shutdown : Proc(IMFRelativePanelWatcher*, HRESULT)
    get_shutdown_status : Proc(IMFRelativePanelWatcher*, MFSHUTDOWN_STATUS*, HRESULT)
    begin_get_report : Proc(IMFRelativePanelWatcher*, IMFAsyncCallback, IUnknown, HRESULT)
    end_get_report : Proc(IMFRelativePanelWatcher*, IMFAsyncResult, IMFRelativePanelReport*, HRESULT)
    get_report : Proc(IMFRelativePanelWatcher*, IMFRelativePanelReport*, HRESULT)
  end

  IMFRelativePanelWatcher_GUID = "421af7f6-573e-4ad0-8fda-2e57cedb18c6"
  IID_IMFRelativePanelWatcher = LibC::GUID.new(0x421af7f6_u32, 0x573e_u16, 0x4ad0_u16, StaticArray[0x8f_u8, 0xda_u8, 0x2e_u8, 0x57_u8, 0xce_u8, 0xdb_u8, 0x18_u8, 0xc6_u8])
  struct IMFRelativePanelWatcher
    lpVtbl : IMFRelativePanelWatcherVTbl*
  end

  struct IMFCameraOcclusionStateReportVTbl
    query_interface : Proc(IMFCameraOcclusionStateReport*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFCameraOcclusionStateReport*, UInt32)
    release : Proc(IMFCameraOcclusionStateReport*, UInt32)
    get_occlusion_state : Proc(IMFCameraOcclusionStateReport*, UInt32*, HRESULT)
  end

  IMFCameraOcclusionStateReport_GUID = "1640b2cf-74da-4462-a43b-b76d3bdc1434"
  IID_IMFCameraOcclusionStateReport = LibC::GUID.new(0x1640b2cf_u32, 0x74da_u16, 0x4462_u16, StaticArray[0xa4_u8, 0x3b_u8, 0xb7_u8, 0x6d_u8, 0x3b_u8, 0xdc_u8, 0x14_u8, 0x34_u8])
  struct IMFCameraOcclusionStateReport
    lpVtbl : IMFCameraOcclusionStateReportVTbl*
  end

  struct IMFCameraOcclusionStateReportCallbackVTbl
    query_interface : Proc(IMFCameraOcclusionStateReportCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFCameraOcclusionStateReportCallback*, UInt32)
    release : Proc(IMFCameraOcclusionStateReportCallback*, UInt32)
    on_occlusion_state_report : Proc(IMFCameraOcclusionStateReportCallback*, IMFCameraOcclusionStateReport, HRESULT)
  end

  IMFCameraOcclusionStateReportCallback_GUID = "6e5841c7-3889-4019-9035-783fb19b5948"
  IID_IMFCameraOcclusionStateReportCallback = LibC::GUID.new(0x6e5841c7_u32, 0x3889_u16, 0x4019_u16, StaticArray[0x90_u8, 0x35_u8, 0x78_u8, 0x3f_u8, 0xb1_u8, 0x9b_u8, 0x59_u8, 0x48_u8])
  struct IMFCameraOcclusionStateReportCallback
    lpVtbl : IMFCameraOcclusionStateReportCallbackVTbl*
  end

  struct IMFCameraOcclusionStateMonitorVTbl
    query_interface : Proc(IMFCameraOcclusionStateMonitor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFCameraOcclusionStateMonitor*, UInt32)
    release : Proc(IMFCameraOcclusionStateMonitor*, UInt32)
    start : Proc(IMFCameraOcclusionStateMonitor*, HRESULT)
    stop : Proc(IMFCameraOcclusionStateMonitor*, HRESULT)
    get_supported_states : Proc(IMFCameraOcclusionStateMonitor*, UInt32)
  end

  IMFCameraOcclusionStateMonitor_GUID = "cc692f46-c697-47e2-a72d-7b064617749b"
  IID_IMFCameraOcclusionStateMonitor = LibC::GUID.new(0xcc692f46_u32, 0xc697_u16, 0x47e2_u16, StaticArray[0xa7_u8, 0x2d_u8, 0x7b_u8, 0x6_u8, 0x46_u8, 0x17_u8, 0x74_u8, 0x9b_u8])
  struct IMFCameraOcclusionStateMonitor
    lpVtbl : IMFCameraOcclusionStateMonitorVTbl*
  end

  struct IMFVideoCaptureSampleAllocatorVTbl
    query_interface : Proc(IMFVideoCaptureSampleAllocator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFVideoCaptureSampleAllocator*, UInt32)
    release : Proc(IMFVideoCaptureSampleAllocator*, UInt32)
    set_direct_x_manager : Proc(IMFVideoCaptureSampleAllocator*, IUnknown, HRESULT)
    uninitialize_sample_allocator : Proc(IMFVideoCaptureSampleAllocator*, HRESULT)
    initialize_sample_allocator : Proc(IMFVideoCaptureSampleAllocator*, UInt32, IMFMediaType, HRESULT)
    allocate_sample : Proc(IMFVideoCaptureSampleAllocator*, IMFSample*, HRESULT)
    initialize_capture_sample_allocator : Proc(IMFVideoCaptureSampleAllocator*, UInt32, UInt32, UInt32, UInt32, IMFAttributes, IMFMediaType, HRESULT)
  end

  IMFVideoCaptureSampleAllocator_GUID = "725b77c7-ca9f-4fe5-9d72-9946bf9b3c70"
  IID_IMFVideoCaptureSampleAllocator = LibC::GUID.new(0x725b77c7_u32, 0xca9f_u16, 0x4fe5_u16, StaticArray[0x9d_u8, 0x72_u8, 0x99_u8, 0x46_u8, 0xbf_u8, 0x9b_u8, 0x3c_u8, 0x70_u8])
  struct IMFVideoCaptureSampleAllocator
    lpVtbl : IMFVideoCaptureSampleAllocatorVTbl*
  end

  struct IMFSampleAllocatorControlVTbl
    query_interface : Proc(IMFSampleAllocatorControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSampleAllocatorControl*, UInt32)
    release : Proc(IMFSampleAllocatorControl*, UInt32)
    set_default_allocator : Proc(IMFSampleAllocatorControl*, UInt32, IUnknown, HRESULT)
    get_allocator_usage : Proc(IMFSampleAllocatorControl*, UInt32, UInt32*, MFSampleAllocatorUsage*, HRESULT)
  end

  IMFSampleAllocatorControl_GUID = "da62b958-3a38-4a97-bd27-149c640c0771"
  IID_IMFSampleAllocatorControl = LibC::GUID.new(0xda62b958_u32, 0x3a38_u16, 0x4a97_u16, StaticArray[0xbd_u8, 0x27_u8, 0x14_u8, 0x9c_u8, 0x64_u8, 0xc_u8, 0x7_u8, 0x71_u8])
  struct IMFSampleAllocatorControl
    lpVtbl : IMFSampleAllocatorControlVTbl*
  end

  struct IMFASFContentInfoVTbl
    query_interface : Proc(IMFASFContentInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFASFContentInfo*, UInt32)
    release : Proc(IMFASFContentInfo*, UInt32)
    get_header_size : Proc(IMFASFContentInfo*, IMFMediaBuffer, UInt64*, HRESULT)
    parse_header : Proc(IMFASFContentInfo*, IMFMediaBuffer, UInt64, HRESULT)
    generate_header : Proc(IMFASFContentInfo*, IMFMediaBuffer, UInt32*, HRESULT)
    get_profile : Proc(IMFASFContentInfo*, IMFASFProfile*, HRESULT)
    set_profile : Proc(IMFASFContentInfo*, IMFASFProfile, HRESULT)
    generate_presentation_descriptor : Proc(IMFASFContentInfo*, IMFPresentationDescriptor*, HRESULT)
    get_encoding_configuration_property_store : Proc(IMFASFContentInfo*, UInt16, IPropertyStore*, HRESULT)
  end

  IMFASFContentInfo_GUID = "b1dca5cd-d5da-4451-8e9e-db5c59914ead"
  IID_IMFASFContentInfo = LibC::GUID.new(0xb1dca5cd_u32, 0xd5da_u16, 0x4451_u16, StaticArray[0x8e_u8, 0x9e_u8, 0xdb_u8, 0x5c_u8, 0x59_u8, 0x91_u8, 0x4e_u8, 0xad_u8])
  struct IMFASFContentInfo
    lpVtbl : IMFASFContentInfoVTbl*
  end

  struct IMFASFProfileVTbl
    query_interface : Proc(IMFASFProfile*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFASFProfile*, UInt32)
    release : Proc(IMFASFProfile*, UInt32)
    get_item : Proc(IMFASFProfile*, Guid*, PROPVARIANT*, HRESULT)
    get_item_type : Proc(IMFASFProfile*, Guid*, MF_ATTRIBUTE_TYPE*, HRESULT)
    compare_item : Proc(IMFASFProfile*, Guid*, PROPVARIANT*, LibC::BOOL*, HRESULT)
    compare : Proc(IMFASFProfile*, IMFAttributes, MF_ATTRIBUTES_MATCH_TYPE, LibC::BOOL*, HRESULT)
    get_uint32 : Proc(IMFASFProfile*, Guid*, UInt32*, HRESULT)
    get_uint64 : Proc(IMFASFProfile*, Guid*, UInt64*, HRESULT)
    get_double : Proc(IMFASFProfile*, Guid*, Float64*, HRESULT)
    get_guid : Proc(IMFASFProfile*, Guid*, Guid*, HRESULT)
    get_string_length : Proc(IMFASFProfile*, Guid*, UInt32*, HRESULT)
    get_string : Proc(IMFASFProfile*, Guid*, Char*, UInt32, UInt32*, HRESULT)
    get_allocated_string : Proc(IMFASFProfile*, Guid*, LibC::LPWSTR*, UInt32*, HRESULT)
    get_blob_size : Proc(IMFASFProfile*, Guid*, UInt32*, HRESULT)
    get_blob : Proc(IMFASFProfile*, Guid*, UInt8*, UInt32, UInt32*, HRESULT)
    get_allocated_blob : Proc(IMFASFProfile*, Guid*, UInt8**, UInt32*, HRESULT)
    get_unknown : Proc(IMFASFProfile*, Guid*, Guid*, Void**, HRESULT)
    set_item : Proc(IMFASFProfile*, Guid*, PROPVARIANT*, HRESULT)
    delete_item : Proc(IMFASFProfile*, Guid*, HRESULT)
    delete_all_items : Proc(IMFASFProfile*, HRESULT)
    set_uint32 : Proc(IMFASFProfile*, Guid*, UInt32, HRESULT)
    set_uint64 : Proc(IMFASFProfile*, Guid*, UInt64, HRESULT)
    set_double : Proc(IMFASFProfile*, Guid*, Float64, HRESULT)
    set_guid : Proc(IMFASFProfile*, Guid*, Guid*, HRESULT)
    set_string : Proc(IMFASFProfile*, Guid*, LibC::LPWSTR, HRESULT)
    set_blob : Proc(IMFASFProfile*, Guid*, UInt8*, UInt32, HRESULT)
    set_unknown : Proc(IMFASFProfile*, Guid*, IUnknown, HRESULT)
    lock_store : Proc(IMFASFProfile*, HRESULT)
    unlock_store : Proc(IMFASFProfile*, HRESULT)
    get_count : Proc(IMFASFProfile*, UInt32*, HRESULT)
    get_item_by_index : Proc(IMFASFProfile*, UInt32, Guid*, PROPVARIANT*, HRESULT)
    copy_all_items : Proc(IMFASFProfile*, IMFAttributes, HRESULT)
    get_stream_count : Proc(IMFASFProfile*, UInt32*, HRESULT)
    get_stream : Proc(IMFASFProfile*, UInt32, UInt16*, IMFASFStreamConfig*, HRESULT)
    get_stream_by_number : Proc(IMFASFProfile*, UInt16, IMFASFStreamConfig*, HRESULT)
    set_stream : Proc(IMFASFProfile*, IMFASFStreamConfig, HRESULT)
    remove_stream : Proc(IMFASFProfile*, UInt16, HRESULT)
    create_stream : Proc(IMFASFProfile*, IMFMediaType, IMFASFStreamConfig*, HRESULT)
    get_mutual_exclusion_count : Proc(IMFASFProfile*, UInt32*, HRESULT)
    get_mutual_exclusion : Proc(IMFASFProfile*, UInt32, IMFASFMutualExclusion*, HRESULT)
    add_mutual_exclusion : Proc(IMFASFProfile*, IMFASFMutualExclusion, HRESULT)
    remove_mutual_exclusion : Proc(IMFASFProfile*, UInt32, HRESULT)
    create_mutual_exclusion : Proc(IMFASFProfile*, IMFASFMutualExclusion*, HRESULT)
    get_stream_prioritization : Proc(IMFASFProfile*, IMFASFStreamPrioritization*, HRESULT)
    add_stream_prioritization : Proc(IMFASFProfile*, IMFASFStreamPrioritization, HRESULT)
    remove_stream_prioritization : Proc(IMFASFProfile*, HRESULT)
    create_stream_prioritization : Proc(IMFASFProfile*, IMFASFStreamPrioritization*, HRESULT)
    clone : Proc(IMFASFProfile*, IMFASFProfile*, HRESULT)
  end

  IMFASFProfile_GUID = "d267bf6a-028b-4e0d-903d-43f0ef82d0d4"
  IID_IMFASFProfile = LibC::GUID.new(0xd267bf6a_u32, 0x28b_u16, 0x4e0d_u16, StaticArray[0x90_u8, 0x3d_u8, 0x43_u8, 0xf0_u8, 0xef_u8, 0x82_u8, 0xd0_u8, 0xd4_u8])
  struct IMFASFProfile
    lpVtbl : IMFASFProfileVTbl*
  end

  struct IMFASFStreamConfigVTbl
    query_interface : Proc(IMFASFStreamConfig*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFASFStreamConfig*, UInt32)
    release : Proc(IMFASFStreamConfig*, UInt32)
    get_item : Proc(IMFASFStreamConfig*, Guid*, PROPVARIANT*, HRESULT)
    get_item_type : Proc(IMFASFStreamConfig*, Guid*, MF_ATTRIBUTE_TYPE*, HRESULT)
    compare_item : Proc(IMFASFStreamConfig*, Guid*, PROPVARIANT*, LibC::BOOL*, HRESULT)
    compare : Proc(IMFASFStreamConfig*, IMFAttributes, MF_ATTRIBUTES_MATCH_TYPE, LibC::BOOL*, HRESULT)
    get_uint32 : Proc(IMFASFStreamConfig*, Guid*, UInt32*, HRESULT)
    get_uint64 : Proc(IMFASFStreamConfig*, Guid*, UInt64*, HRESULT)
    get_double : Proc(IMFASFStreamConfig*, Guid*, Float64*, HRESULT)
    get_guid : Proc(IMFASFStreamConfig*, Guid*, Guid*, HRESULT)
    get_string_length : Proc(IMFASFStreamConfig*, Guid*, UInt32*, HRESULT)
    get_string : Proc(IMFASFStreamConfig*, Guid*, Char*, UInt32, UInt32*, HRESULT)
    get_allocated_string : Proc(IMFASFStreamConfig*, Guid*, LibC::LPWSTR*, UInt32*, HRESULT)
    get_blob_size : Proc(IMFASFStreamConfig*, Guid*, UInt32*, HRESULT)
    get_blob : Proc(IMFASFStreamConfig*, Guid*, UInt8*, UInt32, UInt32*, HRESULT)
    get_allocated_blob : Proc(IMFASFStreamConfig*, Guid*, UInt8**, UInt32*, HRESULT)
    get_unknown : Proc(IMFASFStreamConfig*, Guid*, Guid*, Void**, HRESULT)
    set_item : Proc(IMFASFStreamConfig*, Guid*, PROPVARIANT*, HRESULT)
    delete_item : Proc(IMFASFStreamConfig*, Guid*, HRESULT)
    delete_all_items : Proc(IMFASFStreamConfig*, HRESULT)
    set_uint32 : Proc(IMFASFStreamConfig*, Guid*, UInt32, HRESULT)
    set_uint64 : Proc(IMFASFStreamConfig*, Guid*, UInt64, HRESULT)
    set_double : Proc(IMFASFStreamConfig*, Guid*, Float64, HRESULT)
    set_guid : Proc(IMFASFStreamConfig*, Guid*, Guid*, HRESULT)
    set_string : Proc(IMFASFStreamConfig*, Guid*, LibC::LPWSTR, HRESULT)
    set_blob : Proc(IMFASFStreamConfig*, Guid*, UInt8*, UInt32, HRESULT)
    set_unknown : Proc(IMFASFStreamConfig*, Guid*, IUnknown, HRESULT)
    lock_store : Proc(IMFASFStreamConfig*, HRESULT)
    unlock_store : Proc(IMFASFStreamConfig*, HRESULT)
    get_count : Proc(IMFASFStreamConfig*, UInt32*, HRESULT)
    get_item_by_index : Proc(IMFASFStreamConfig*, UInt32, Guid*, PROPVARIANT*, HRESULT)
    copy_all_items : Proc(IMFASFStreamConfig*, IMFAttributes, HRESULT)
    get_stream_type : Proc(IMFASFStreamConfig*, Guid*, HRESULT)
    get_stream_number : Proc(IMFASFStreamConfig*, UInt16)
    set_stream_number : Proc(IMFASFStreamConfig*, UInt16, HRESULT)
    get_media_type : Proc(IMFASFStreamConfig*, IMFMediaType*, HRESULT)
    set_media_type : Proc(IMFASFStreamConfig*, IMFMediaType, HRESULT)
    get_payload_extension_count : Proc(IMFASFStreamConfig*, UInt16*, HRESULT)
    get_payload_extension : Proc(IMFASFStreamConfig*, UInt16, Guid*, UInt16*, UInt8*, UInt32*, HRESULT)
    add_payload_extension : Proc(IMFASFStreamConfig*, Guid, UInt16, UInt8*, UInt32, HRESULT)
    remove_all_payload_extensions : Proc(IMFASFStreamConfig*, HRESULT)
    clone : Proc(IMFASFStreamConfig*, IMFASFStreamConfig*, HRESULT)
  end

  IMFASFStreamConfig_GUID = "9e8ae8d2-dbbd-4200-9aca-06e6df484913"
  IID_IMFASFStreamConfig = LibC::GUID.new(0x9e8ae8d2_u32, 0xdbbd_u16, 0x4200_u16, StaticArray[0x9a_u8, 0xca_u8, 0x6_u8, 0xe6_u8, 0xdf_u8, 0x48_u8, 0x49_u8, 0x13_u8])
  struct IMFASFStreamConfig
    lpVtbl : IMFASFStreamConfigVTbl*
  end

  struct IMFASFMutualExclusionVTbl
    query_interface : Proc(IMFASFMutualExclusion*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFASFMutualExclusion*, UInt32)
    release : Proc(IMFASFMutualExclusion*, UInt32)
    get_type : Proc(IMFASFMutualExclusion*, Guid*, HRESULT)
    set_type : Proc(IMFASFMutualExclusion*, Guid*, HRESULT)
    get_record_count : Proc(IMFASFMutualExclusion*, UInt32*, HRESULT)
    get_streams_for_record : Proc(IMFASFMutualExclusion*, UInt32, UInt16*, UInt32*, HRESULT)
    add_stream_for_record : Proc(IMFASFMutualExclusion*, UInt32, UInt16, HRESULT)
    remove_stream_from_record : Proc(IMFASFMutualExclusion*, UInt32, UInt16, HRESULT)
    remove_record : Proc(IMFASFMutualExclusion*, UInt32, HRESULT)
    add_record : Proc(IMFASFMutualExclusion*, UInt32*, HRESULT)
    clone : Proc(IMFASFMutualExclusion*, IMFASFMutualExclusion*, HRESULT)
  end

  IMFASFMutualExclusion_GUID = "12558291-e399-11d5-bc2a-00b0d0f3f4ab"
  IID_IMFASFMutualExclusion = LibC::GUID.new(0x12558291_u32, 0xe399_u16, 0x11d5_u16, StaticArray[0xbc_u8, 0x2a_u8, 0x0_u8, 0xb0_u8, 0xd0_u8, 0xf3_u8, 0xf4_u8, 0xab_u8])
  struct IMFASFMutualExclusion
    lpVtbl : IMFASFMutualExclusionVTbl*
  end

  struct IMFASFStreamPrioritizationVTbl
    query_interface : Proc(IMFASFStreamPrioritization*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFASFStreamPrioritization*, UInt32)
    release : Proc(IMFASFStreamPrioritization*, UInt32)
    get_stream_count : Proc(IMFASFStreamPrioritization*, UInt32*, HRESULT)
    get_stream : Proc(IMFASFStreamPrioritization*, UInt32, UInt16*, UInt16*, HRESULT)
    add_stream : Proc(IMFASFStreamPrioritization*, UInt16, UInt16, HRESULT)
    remove_stream : Proc(IMFASFStreamPrioritization*, UInt32, HRESULT)
    clone : Proc(IMFASFStreamPrioritization*, IMFASFStreamPrioritization*, HRESULT)
  end

  IMFASFStreamPrioritization_GUID = "699bdc27-bbaf-49ff-8e38-9c39c9b5e088"
  IID_IMFASFStreamPrioritization = LibC::GUID.new(0x699bdc27_u32, 0xbbaf_u16, 0x49ff_u16, StaticArray[0x8e_u8, 0x38_u8, 0x9c_u8, 0x39_u8, 0xc9_u8, 0xb5_u8, 0xe0_u8, 0x88_u8])
  struct IMFASFStreamPrioritization
    lpVtbl : IMFASFStreamPrioritizationVTbl*
  end

  struct IMFASFIndexerVTbl
    query_interface : Proc(IMFASFIndexer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFASFIndexer*, UInt32)
    release : Proc(IMFASFIndexer*, UInt32)
    set_flags : Proc(IMFASFIndexer*, UInt32, HRESULT)
    get_flags : Proc(IMFASFIndexer*, UInt32*, HRESULT)
    initialize : Proc(IMFASFIndexer*, IMFASFContentInfo, HRESULT)
    get_index_position : Proc(IMFASFIndexer*, IMFASFContentInfo, UInt64*, HRESULT)
    set_index_byte_streams : Proc(IMFASFIndexer*, IMFByteStream*, UInt32, HRESULT)
    get_index_byte_stream_count : Proc(IMFASFIndexer*, UInt32*, HRESULT)
    get_index_status : Proc(IMFASFIndexer*, ASF_INDEX_IDENTIFIER*, LibC::BOOL*, UInt8*, UInt32*, HRESULT)
    set_index_status : Proc(IMFASFIndexer*, UInt8*, UInt32, LibC::BOOL, HRESULT)
    get_seek_position_for_value : Proc(IMFASFIndexer*, PROPVARIANT*, ASF_INDEX_IDENTIFIER*, UInt64*, Int64*, UInt32*, HRESULT)
    generate_index_entries : Proc(IMFASFIndexer*, IMFSample, HRESULT)
    commit_index : Proc(IMFASFIndexer*, IMFASFContentInfo, HRESULT)
    get_index_write_space : Proc(IMFASFIndexer*, UInt64*, HRESULT)
    get_completed_index : Proc(IMFASFIndexer*, IMFMediaBuffer, UInt64, HRESULT)
  end

  IMFASFIndexer_GUID = "53590f48-dc3b-4297-813f-787761ad7b3e"
  IID_IMFASFIndexer = LibC::GUID.new(0x53590f48_u32, 0xdc3b_u16, 0x4297_u16, StaticArray[0x81_u8, 0x3f_u8, 0x78_u8, 0x77_u8, 0x61_u8, 0xad_u8, 0x7b_u8, 0x3e_u8])
  struct IMFASFIndexer
    lpVtbl : IMFASFIndexerVTbl*
  end

  struct IMFASFSplitterVTbl
    query_interface : Proc(IMFASFSplitter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFASFSplitter*, UInt32)
    release : Proc(IMFASFSplitter*, UInt32)
    initialize : Proc(IMFASFSplitter*, IMFASFContentInfo, HRESULT)
    set_flags : Proc(IMFASFSplitter*, UInt32, HRESULT)
    get_flags : Proc(IMFASFSplitter*, UInt32*, HRESULT)
    select_streams : Proc(IMFASFSplitter*, UInt16*, UInt16, HRESULT)
    get_selected_streams : Proc(IMFASFSplitter*, UInt16*, UInt16*, HRESULT)
    parse_data : Proc(IMFASFSplitter*, IMFMediaBuffer, UInt32, UInt32, HRESULT)
    get_next_sample : Proc(IMFASFSplitter*, ASF_STATUSFLAGS*, UInt16*, IMFSample*, HRESULT)
    flush : Proc(IMFASFSplitter*, HRESULT)
    get_last_send_time : Proc(IMFASFSplitter*, UInt32*, HRESULT)
  end

  IMFASFSplitter_GUID = "12558295-e399-11d5-bc2a-00b0d0f3f4ab"
  IID_IMFASFSplitter = LibC::GUID.new(0x12558295_u32, 0xe399_u16, 0x11d5_u16, StaticArray[0xbc_u8, 0x2a_u8, 0x0_u8, 0xb0_u8, 0xd0_u8, 0xf3_u8, 0xf4_u8, 0xab_u8])
  struct IMFASFSplitter
    lpVtbl : IMFASFSplitterVTbl*
  end

  struct IMFASFMultiplexerVTbl
    query_interface : Proc(IMFASFMultiplexer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFASFMultiplexer*, UInt32)
    release : Proc(IMFASFMultiplexer*, UInt32)
    initialize : Proc(IMFASFMultiplexer*, IMFASFContentInfo, HRESULT)
    set_flags : Proc(IMFASFMultiplexer*, UInt32, HRESULT)
    get_flags : Proc(IMFASFMultiplexer*, UInt32*, HRESULT)
    process_sample : Proc(IMFASFMultiplexer*, UInt16, IMFSample, Int64, HRESULT)
    get_next_packet : Proc(IMFASFMultiplexer*, UInt32*, IMFSample*, HRESULT)
    flush : Proc(IMFASFMultiplexer*, HRESULT)
    end_ : Proc(IMFASFMultiplexer*, IMFASFContentInfo, HRESULT)
    get_statistics : Proc(IMFASFMultiplexer*, UInt16, ASF_MUX_STATISTICS*, HRESULT)
    set_sync_tolerance : Proc(IMFASFMultiplexer*, UInt32, HRESULT)
  end

  IMFASFMultiplexer_GUID = "57bdd80a-9b38-4838-b737-c58f670d7d4f"
  IID_IMFASFMultiplexer = LibC::GUID.new(0x57bdd80a_u32, 0x9b38_u16, 0x4838_u16, StaticArray[0xb7_u8, 0x37_u8, 0xc5_u8, 0x8f_u8, 0x67_u8, 0xd_u8, 0x7d_u8, 0x4f_u8])
  struct IMFASFMultiplexer
    lpVtbl : IMFASFMultiplexerVTbl*
  end

  struct IMFASFStreamSelectorVTbl
    query_interface : Proc(IMFASFStreamSelector*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFASFStreamSelector*, UInt32)
    release : Proc(IMFASFStreamSelector*, UInt32)
    get_stream_count : Proc(IMFASFStreamSelector*, UInt32*, HRESULT)
    get_output_count : Proc(IMFASFStreamSelector*, UInt32*, HRESULT)
    get_output_stream_count : Proc(IMFASFStreamSelector*, UInt32, UInt32*, HRESULT)
    get_output_stream_numbers : Proc(IMFASFStreamSelector*, UInt32, UInt16*, HRESULT)
    get_output_from_stream : Proc(IMFASFStreamSelector*, UInt16, UInt32*, HRESULT)
    get_output_override : Proc(IMFASFStreamSelector*, UInt32, ASF_SELECTION_STATUS*, HRESULT)
    set_output_override : Proc(IMFASFStreamSelector*, UInt32, ASF_SELECTION_STATUS, HRESULT)
    get_output_mutex_count : Proc(IMFASFStreamSelector*, UInt32, UInt32*, HRESULT)
    get_output_mutex : Proc(IMFASFStreamSelector*, UInt32, UInt32, IUnknown*, HRESULT)
    set_output_mutex_selection : Proc(IMFASFStreamSelector*, UInt32, UInt32, UInt16, HRESULT)
    get_bandwidth_step_count : Proc(IMFASFStreamSelector*, UInt32*, HRESULT)
    get_bandwidth_step : Proc(IMFASFStreamSelector*, UInt32, UInt32*, UInt16*, ASF_SELECTION_STATUS*, HRESULT)
    bitrate_to_step_number : Proc(IMFASFStreamSelector*, UInt32, UInt32*, HRESULT)
    set_stream_selector_flags : Proc(IMFASFStreamSelector*, UInt32, HRESULT)
  end

  IMFASFStreamSelector_GUID = "d01bad4a-4fa0-4a60-9349-c27e62da9d41"
  IID_IMFASFStreamSelector = LibC::GUID.new(0xd01bad4a_u32, 0x4fa0_u16, 0x4a60_u16, StaticArray[0x93_u8, 0x49_u8, 0xc2_u8, 0x7e_u8, 0x62_u8, 0xda_u8, 0x9d_u8, 0x41_u8])
  struct IMFASFStreamSelector
    lpVtbl : IMFASFStreamSelectorVTbl*
  end

  struct IMFDRMNetHelperVTbl
    query_interface : Proc(IMFDRMNetHelper*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFDRMNetHelper*, UInt32)
    release : Proc(IMFDRMNetHelper*, UInt32)
    process_license_request : Proc(IMFDRMNetHelper*, UInt8*, UInt32, UInt8**, UInt32*, UInt8**, HRESULT)
    get_chained_license_response : Proc(IMFDRMNetHelper*, UInt8**, UInt32*, HRESULT)
  end

  IMFDRMNetHelper_GUID = "3d1ff0ea-679a-4190-8d46-7fa69e8c7e15"
  IID_IMFDRMNetHelper = LibC::GUID.new(0x3d1ff0ea_u32, 0x679a_u16, 0x4190_u16, StaticArray[0x8d_u8, 0x46_u8, 0x7f_u8, 0xa6_u8, 0x9e_u8, 0x8c_u8, 0x7e_u8, 0x15_u8])
  struct IMFDRMNetHelper
    lpVtbl : IMFDRMNetHelperVTbl*
  end

  struct IMFCaptureEngineOnEventCallbackVTbl
    query_interface : Proc(IMFCaptureEngineOnEventCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFCaptureEngineOnEventCallback*, UInt32)
    release : Proc(IMFCaptureEngineOnEventCallback*, UInt32)
    on_event : Proc(IMFCaptureEngineOnEventCallback*, IMFMediaEvent, HRESULT)
  end

  IMFCaptureEngineOnEventCallback_GUID = "aeda51c0-9025-4983-9012-de597b88b089"
  IID_IMFCaptureEngineOnEventCallback = LibC::GUID.new(0xaeda51c0_u32, 0x9025_u16, 0x4983_u16, StaticArray[0x90_u8, 0x12_u8, 0xde_u8, 0x59_u8, 0x7b_u8, 0x88_u8, 0xb0_u8, 0x89_u8])
  struct IMFCaptureEngineOnEventCallback
    lpVtbl : IMFCaptureEngineOnEventCallbackVTbl*
  end

  struct IMFCaptureEngineOnSampleCallbackVTbl
    query_interface : Proc(IMFCaptureEngineOnSampleCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFCaptureEngineOnSampleCallback*, UInt32)
    release : Proc(IMFCaptureEngineOnSampleCallback*, UInt32)
    on_sample : Proc(IMFCaptureEngineOnSampleCallback*, IMFSample, HRESULT)
  end

  IMFCaptureEngineOnSampleCallback_GUID = "52150b82-ab39-4467-980f-e48bf0822ecd"
  IID_IMFCaptureEngineOnSampleCallback = LibC::GUID.new(0x52150b82_u32, 0xab39_u16, 0x4467_u16, StaticArray[0x98_u8, 0xf_u8, 0xe4_u8, 0x8b_u8, 0xf0_u8, 0x82_u8, 0x2e_u8, 0xcd_u8])
  struct IMFCaptureEngineOnSampleCallback
    lpVtbl : IMFCaptureEngineOnSampleCallbackVTbl*
  end

  struct IMFCaptureSinkVTbl
    query_interface : Proc(IMFCaptureSink*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFCaptureSink*, UInt32)
    release : Proc(IMFCaptureSink*, UInt32)
    get_output_media_type : Proc(IMFCaptureSink*, UInt32, IMFMediaType*, HRESULT)
    get_service : Proc(IMFCaptureSink*, UInt32, Guid*, Guid*, IUnknown*, HRESULT)
    add_stream : Proc(IMFCaptureSink*, UInt32, IMFMediaType, IMFAttributes, UInt32*, HRESULT)
    prepare : Proc(IMFCaptureSink*, HRESULT)
    remove_all_streams : Proc(IMFCaptureSink*, HRESULT)
  end

  IMFCaptureSink_GUID = "72d6135b-35e9-412c-b926-fd5265f2a885"
  IID_IMFCaptureSink = LibC::GUID.new(0x72d6135b_u32, 0x35e9_u16, 0x412c_u16, StaticArray[0xb9_u8, 0x26_u8, 0xfd_u8, 0x52_u8, 0x65_u8, 0xf2_u8, 0xa8_u8, 0x85_u8])
  struct IMFCaptureSink
    lpVtbl : IMFCaptureSinkVTbl*
  end

  struct IMFCaptureRecordSinkVTbl
    query_interface : Proc(IMFCaptureRecordSink*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFCaptureRecordSink*, UInt32)
    release : Proc(IMFCaptureRecordSink*, UInt32)
    get_output_media_type : Proc(IMFCaptureRecordSink*, UInt32, IMFMediaType*, HRESULT)
    get_service : Proc(IMFCaptureRecordSink*, UInt32, Guid*, Guid*, IUnknown*, HRESULT)
    add_stream : Proc(IMFCaptureRecordSink*, UInt32, IMFMediaType, IMFAttributes, UInt32*, HRESULT)
    prepare : Proc(IMFCaptureRecordSink*, HRESULT)
    remove_all_streams : Proc(IMFCaptureRecordSink*, HRESULT)
    set_output_byte_stream : Proc(IMFCaptureRecordSink*, IMFByteStream, Guid*, HRESULT)
    set_output_file_name : Proc(IMFCaptureRecordSink*, LibC::LPWSTR, HRESULT)
    set_sample_callback : Proc(IMFCaptureRecordSink*, UInt32, IMFCaptureEngineOnSampleCallback, HRESULT)
    set_custom_sink : Proc(IMFCaptureRecordSink*, IMFMediaSink, HRESULT)
    get_rotation : Proc(IMFCaptureRecordSink*, UInt32, UInt32*, HRESULT)
    set_rotation : Proc(IMFCaptureRecordSink*, UInt32, UInt32, HRESULT)
  end

  IMFCaptureRecordSink_GUID = "3323b55a-f92a-4fe2-8edc-e9bfc0634d77"
  IID_IMFCaptureRecordSink = LibC::GUID.new(0x3323b55a_u32, 0xf92a_u16, 0x4fe2_u16, StaticArray[0x8e_u8, 0xdc_u8, 0xe9_u8, 0xbf_u8, 0xc0_u8, 0x63_u8, 0x4d_u8, 0x77_u8])
  struct IMFCaptureRecordSink
    lpVtbl : IMFCaptureRecordSinkVTbl*
  end

  struct IMFCapturePreviewSinkVTbl
    query_interface : Proc(IMFCapturePreviewSink*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFCapturePreviewSink*, UInt32)
    release : Proc(IMFCapturePreviewSink*, UInt32)
    get_output_media_type : Proc(IMFCapturePreviewSink*, UInt32, IMFMediaType*, HRESULT)
    get_service : Proc(IMFCapturePreviewSink*, UInt32, Guid*, Guid*, IUnknown*, HRESULT)
    add_stream : Proc(IMFCapturePreviewSink*, UInt32, IMFMediaType, IMFAttributes, UInt32*, HRESULT)
    prepare : Proc(IMFCapturePreviewSink*, HRESULT)
    remove_all_streams : Proc(IMFCapturePreviewSink*, HRESULT)
    set_render_handle : Proc(IMFCapturePreviewSink*, LibC::HANDLE, HRESULT)
    set_render_surface : Proc(IMFCapturePreviewSink*, IUnknown, HRESULT)
    update_video : Proc(IMFCapturePreviewSink*, MFVideoNormalizedRect*, RECT*, UInt32*, HRESULT)
    set_sample_callback : Proc(IMFCapturePreviewSink*, UInt32, IMFCaptureEngineOnSampleCallback, HRESULT)
    get_mirror_state : Proc(IMFCapturePreviewSink*, LibC::BOOL*, HRESULT)
    set_mirror_state : Proc(IMFCapturePreviewSink*, LibC::BOOL, HRESULT)
    get_rotation : Proc(IMFCapturePreviewSink*, UInt32, UInt32*, HRESULT)
    set_rotation : Proc(IMFCapturePreviewSink*, UInt32, UInt32, HRESULT)
    set_custom_sink : Proc(IMFCapturePreviewSink*, IMFMediaSink, HRESULT)
  end

  IMFCapturePreviewSink_GUID = "77346cfd-5b49-4d73-ace0-5b52a859f2e0"
  IID_IMFCapturePreviewSink = LibC::GUID.new(0x77346cfd_u32, 0x5b49_u16, 0x4d73_u16, StaticArray[0xac_u8, 0xe0_u8, 0x5b_u8, 0x52_u8, 0xa8_u8, 0x59_u8, 0xf2_u8, 0xe0_u8])
  struct IMFCapturePreviewSink
    lpVtbl : IMFCapturePreviewSinkVTbl*
  end

  struct IMFCapturePhotoSinkVTbl
    query_interface : Proc(IMFCapturePhotoSink*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFCapturePhotoSink*, UInt32)
    release : Proc(IMFCapturePhotoSink*, UInt32)
    get_output_media_type : Proc(IMFCapturePhotoSink*, UInt32, IMFMediaType*, HRESULT)
    get_service : Proc(IMFCapturePhotoSink*, UInt32, Guid*, Guid*, IUnknown*, HRESULT)
    add_stream : Proc(IMFCapturePhotoSink*, UInt32, IMFMediaType, IMFAttributes, UInt32*, HRESULT)
    prepare : Proc(IMFCapturePhotoSink*, HRESULT)
    remove_all_streams : Proc(IMFCapturePhotoSink*, HRESULT)
    set_output_file_name : Proc(IMFCapturePhotoSink*, LibC::LPWSTR, HRESULT)
    set_sample_callback : Proc(IMFCapturePhotoSink*, IMFCaptureEngineOnSampleCallback, HRESULT)
    set_output_byte_stream : Proc(IMFCapturePhotoSink*, IMFByteStream, HRESULT)
  end

  IMFCapturePhotoSink_GUID = "d2d43cc8-48bb-4aa7-95db-10c06977e777"
  IID_IMFCapturePhotoSink = LibC::GUID.new(0xd2d43cc8_u32, 0x48bb_u16, 0x4aa7_u16, StaticArray[0x95_u8, 0xdb_u8, 0x10_u8, 0xc0_u8, 0x69_u8, 0x77_u8, 0xe7_u8, 0x77_u8])
  struct IMFCapturePhotoSink
    lpVtbl : IMFCapturePhotoSinkVTbl*
  end

  struct IMFCaptureSourceVTbl
    query_interface : Proc(IMFCaptureSource*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFCaptureSource*, UInt32)
    release : Proc(IMFCaptureSource*, UInt32)
    get_capture_device_source : Proc(IMFCaptureSource*, MF_CAPTURE_ENGINE_DEVICE_TYPE, IMFMediaSource*, HRESULT)
    get_capture_device_activate : Proc(IMFCaptureSource*, MF_CAPTURE_ENGINE_DEVICE_TYPE, IMFActivate*, HRESULT)
    get_service : Proc(IMFCaptureSource*, Guid*, Guid*, IUnknown*, HRESULT)
    add_effect : Proc(IMFCaptureSource*, UInt32, IUnknown, HRESULT)
    remove_effect : Proc(IMFCaptureSource*, UInt32, IUnknown, HRESULT)
    remove_all_effects : Proc(IMFCaptureSource*, UInt32, HRESULT)
    get_available_device_media_type : Proc(IMFCaptureSource*, UInt32, UInt32, IMFMediaType*, HRESULT)
    set_current_device_media_type : Proc(IMFCaptureSource*, UInt32, IMFMediaType, HRESULT)
    get_current_device_media_type : Proc(IMFCaptureSource*, UInt32, IMFMediaType*, HRESULT)
    get_device_stream_count : Proc(IMFCaptureSource*, UInt32*, HRESULT)
    get_device_stream_category : Proc(IMFCaptureSource*, UInt32, MF_CAPTURE_ENGINE_STREAM_CATEGORY*, HRESULT)
    get_mirror_state : Proc(IMFCaptureSource*, UInt32, LibC::BOOL*, HRESULT)
    set_mirror_state : Proc(IMFCaptureSource*, UInt32, LibC::BOOL, HRESULT)
    get_stream_index_from_friendly_name : Proc(IMFCaptureSource*, UInt32, UInt32*, HRESULT)
  end

  IMFCaptureSource_GUID = "439a42a8-0d2c-4505-be83-f79b2a05d5c4"
  IID_IMFCaptureSource = LibC::GUID.new(0x439a42a8_u32, 0xd2c_u16, 0x4505_u16, StaticArray[0xbe_u8, 0x83_u8, 0xf7_u8, 0x9b_u8, 0x2a_u8, 0x5_u8, 0xd5_u8, 0xc4_u8])
  struct IMFCaptureSource
    lpVtbl : IMFCaptureSourceVTbl*
  end

  struct IMFCaptureEngineVTbl
    query_interface : Proc(IMFCaptureEngine*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFCaptureEngine*, UInt32)
    release : Proc(IMFCaptureEngine*, UInt32)
    initialize : Proc(IMFCaptureEngine*, IMFCaptureEngineOnEventCallback, IMFAttributes, IUnknown, IUnknown, HRESULT)
    start_preview : Proc(IMFCaptureEngine*, HRESULT)
    stop_preview : Proc(IMFCaptureEngine*, HRESULT)
    start_record : Proc(IMFCaptureEngine*, HRESULT)
    stop_record : Proc(IMFCaptureEngine*, LibC::BOOL, LibC::BOOL, HRESULT)
    take_photo : Proc(IMFCaptureEngine*, HRESULT)
    get_sink : Proc(IMFCaptureEngine*, MF_CAPTURE_ENGINE_SINK_TYPE, IMFCaptureSink*, HRESULT)
    get_source : Proc(IMFCaptureEngine*, IMFCaptureSource*, HRESULT)
  end

  IMFCaptureEngine_GUID = "a6bba433-176b-48b2-b375-53aa03473207"
  IID_IMFCaptureEngine = LibC::GUID.new(0xa6bba433_u32, 0x176b_u16, 0x48b2_u16, StaticArray[0xb3_u8, 0x75_u8, 0x53_u8, 0xaa_u8, 0x3_u8, 0x47_u8, 0x32_u8, 0x7_u8])
  struct IMFCaptureEngine
    lpVtbl : IMFCaptureEngineVTbl*
  end

  struct IMFCaptureEngineClassFactoryVTbl
    query_interface : Proc(IMFCaptureEngineClassFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFCaptureEngineClassFactory*, UInt32)
    release : Proc(IMFCaptureEngineClassFactory*, UInt32)
    create_instance : Proc(IMFCaptureEngineClassFactory*, Guid*, Guid*, Void**, HRESULT)
  end

  IMFCaptureEngineClassFactory_GUID = "8f02d140-56fc-4302-a705-3a97c78be779"
  IID_IMFCaptureEngineClassFactory = LibC::GUID.new(0x8f02d140_u32, 0x56fc_u16, 0x4302_u16, StaticArray[0xa7_u8, 0x5_u8, 0x3a_u8, 0x97_u8, 0xc7_u8, 0x8b_u8, 0xe7_u8, 0x79_u8])
  struct IMFCaptureEngineClassFactory
    lpVtbl : IMFCaptureEngineClassFactoryVTbl*
  end

  struct IMFCaptureEngineOnSampleCallback2VTbl
    query_interface : Proc(IMFCaptureEngineOnSampleCallback2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFCaptureEngineOnSampleCallback2*, UInt32)
    release : Proc(IMFCaptureEngineOnSampleCallback2*, UInt32)
    on_sample : Proc(IMFCaptureEngineOnSampleCallback2*, IMFSample, HRESULT)
    on_synchronized_event : Proc(IMFCaptureEngineOnSampleCallback2*, IMFMediaEvent, HRESULT)
  end

  IMFCaptureEngineOnSampleCallback2_GUID = "e37ceed7-340f-4514-9f4d-9c2ae026100b"
  IID_IMFCaptureEngineOnSampleCallback2 = LibC::GUID.new(0xe37ceed7_u32, 0x340f_u16, 0x4514_u16, StaticArray[0x9f_u8, 0x4d_u8, 0x9c_u8, 0x2a_u8, 0xe0_u8, 0x26_u8, 0x10_u8, 0xb_u8])
  struct IMFCaptureEngineOnSampleCallback2
    lpVtbl : IMFCaptureEngineOnSampleCallback2VTbl*
  end

  struct IMFCaptureSink2VTbl
    query_interface : Proc(IMFCaptureSink2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFCaptureSink2*, UInt32)
    release : Proc(IMFCaptureSink2*, UInt32)
    get_output_media_type : Proc(IMFCaptureSink2*, UInt32, IMFMediaType*, HRESULT)
    get_service : Proc(IMFCaptureSink2*, UInt32, Guid*, Guid*, IUnknown*, HRESULT)
    add_stream : Proc(IMFCaptureSink2*, UInt32, IMFMediaType, IMFAttributes, UInt32*, HRESULT)
    prepare : Proc(IMFCaptureSink2*, HRESULT)
    remove_all_streams : Proc(IMFCaptureSink2*, HRESULT)
    set_output_media_type : Proc(IMFCaptureSink2*, UInt32, IMFMediaType, IMFAttributes, HRESULT)
  end

  IMFCaptureSink2_GUID = "f9e4219e-6197-4b5e-b888-bee310ab2c59"
  IID_IMFCaptureSink2 = LibC::GUID.new(0xf9e4219e_u32, 0x6197_u16, 0x4b5e_u16, StaticArray[0xb8_u8, 0x88_u8, 0xbe_u8, 0xe3_u8, 0x10_u8, 0xab_u8, 0x2c_u8, 0x59_u8])
  struct IMFCaptureSink2
    lpVtbl : IMFCaptureSink2VTbl*
  end

  struct IMFD3D12SynchronizationObjectCommandsVTbl
    query_interface : Proc(IMFD3D12SynchronizationObjectCommands*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFD3D12SynchronizationObjectCommands*, UInt32)
    release : Proc(IMFD3D12SynchronizationObjectCommands*, UInt32)
    enqueue_resource_ready : Proc(IMFD3D12SynchronizationObjectCommands*, ID3D12CommandQueue, HRESULT)
    enqueue_resource_ready_wait : Proc(IMFD3D12SynchronizationObjectCommands*, ID3D12CommandQueue, HRESULT)
    signal_event_on_resource_ready : Proc(IMFD3D12SynchronizationObjectCommands*, LibC::HANDLE, HRESULT)
    enqueue_resource_release : Proc(IMFD3D12SynchronizationObjectCommands*, ID3D12CommandQueue, HRESULT)
  end

  IMFD3D12SynchronizationObjectCommands_GUID = "09d0f835-92ff-4e53-8efa-40faa551f233"
  IID_IMFD3D12SynchronizationObjectCommands = LibC::GUID.new(0x9d0f835_u32, 0x92ff_u16, 0x4e53_u16, StaticArray[0x8e_u8, 0xfa_u8, 0x40_u8, 0xfa_u8, 0xa5_u8, 0x51_u8, 0xf2_u8, 0x33_u8])
  struct IMFD3D12SynchronizationObjectCommands
    lpVtbl : IMFD3D12SynchronizationObjectCommandsVTbl*
  end

  struct IMFD3D12SynchronizationObjectVTbl
    query_interface : Proc(IMFD3D12SynchronizationObject*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFD3D12SynchronizationObject*, UInt32)
    release : Proc(IMFD3D12SynchronizationObject*, UInt32)
    signal_event_on_final_resource_release : Proc(IMFD3D12SynchronizationObject*, LibC::HANDLE, HRESULT)
    reset : Proc(IMFD3D12SynchronizationObject*, HRESULT)
  end

  IMFD3D12SynchronizationObject_GUID = "802302b0-82de-45e1-b421-f19ee5bdaf23"
  IID_IMFD3D12SynchronizationObject = LibC::GUID.new(0x802302b0_u32, 0x82de_u16, 0x45e1_u16, StaticArray[0xb4_u8, 0x21_u8, 0xf1_u8, 0x9e_u8, 0xe5_u8, 0xbd_u8, 0xaf_u8, 0x23_u8])
  struct IMFD3D12SynchronizationObject
    lpVtbl : IMFD3D12SynchronizationObjectVTbl*
  end

  struct MFASYNCRESULTVTbl
    query_interface : Proc(MFASYNCRESULT*, Guid*, Void**, HRESULT)
    add_ref : Proc(MFASYNCRESULT*, UInt32)
    release : Proc(MFASYNCRESULT*, UInt32)
    get_state : Proc(MFASYNCRESULT*, IUnknown*, HRESULT)
    get_status : Proc(MFASYNCRESULT*, HRESULT)
    set_status : Proc(MFASYNCRESULT*, HRESULT, HRESULT)
    get_object : Proc(MFASYNCRESULT*, IUnknown*, HRESULT)
    get_state_no_add_ref : Proc(MFASYNCRESULT*, IUnknown)
  end

  struct MFASYNCRESULT
    lpVtbl : MFASYNCRESULTVTbl*
  end

  struct IMFMediaErrorVTbl
    query_interface : Proc(IMFMediaError*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaError*, UInt32)
    release : Proc(IMFMediaError*, UInt32)
    get_error_code : Proc(IMFMediaError*, UInt16)
    get_extended_error_code : Proc(IMFMediaError*, HRESULT)
    set_error_code : Proc(IMFMediaError*, MF_MEDIA_ENGINE_ERR, HRESULT)
    set_extended_error_code : Proc(IMFMediaError*, HRESULT, HRESULT)
  end

  IMFMediaError_GUID = "fc0e10d2-ab2a-4501-a951-06bb1075184c"
  IID_IMFMediaError = LibC::GUID.new(0xfc0e10d2_u32, 0xab2a_u16, 0x4501_u16, StaticArray[0xa9_u8, 0x51_u8, 0x6_u8, 0xbb_u8, 0x10_u8, 0x75_u8, 0x18_u8, 0x4c_u8])
  struct IMFMediaError
    lpVtbl : IMFMediaErrorVTbl*
  end

  struct IMFMediaTimeRangeVTbl
    query_interface : Proc(IMFMediaTimeRange*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaTimeRange*, UInt32)
    release : Proc(IMFMediaTimeRange*, UInt32)
    get_length : Proc(IMFMediaTimeRange*, UInt32)
    get_start : Proc(IMFMediaTimeRange*, UInt32, Float64*, HRESULT)
    get_end : Proc(IMFMediaTimeRange*, UInt32, Float64*, HRESULT)
    contains_time : Proc(IMFMediaTimeRange*, Float64, LibC::BOOL)
    add_range : Proc(IMFMediaTimeRange*, Float64, Float64, HRESULT)
    clear : Proc(IMFMediaTimeRange*, HRESULT)
  end

  IMFMediaTimeRange_GUID = "db71a2fc-078a-414e-9df9-8c2531b0aa6c"
  IID_IMFMediaTimeRange = LibC::GUID.new(0xdb71a2fc_u32, 0x78a_u16, 0x414e_u16, StaticArray[0x9d_u8, 0xf9_u8, 0x8c_u8, 0x25_u8, 0x31_u8, 0xb0_u8, 0xaa_u8, 0x6c_u8])
  struct IMFMediaTimeRange
    lpVtbl : IMFMediaTimeRangeVTbl*
  end

  struct IMFMediaEngineNotifyVTbl
    query_interface : Proc(IMFMediaEngineNotify*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaEngineNotify*, UInt32)
    release : Proc(IMFMediaEngineNotify*, UInt32)
    event_notify : Proc(IMFMediaEngineNotify*, UInt32, LibC::UINT_PTR, UInt32, HRESULT)
  end

  IMFMediaEngineNotify_GUID = "fee7c112-e776-42b5-9bbf-0048524e2bd5"
  IID_IMFMediaEngineNotify = LibC::GUID.new(0xfee7c112_u32, 0xe776_u16, 0x42b5_u16, StaticArray[0x9b_u8, 0xbf_u8, 0x0_u8, 0x48_u8, 0x52_u8, 0x4e_u8, 0x2b_u8, 0xd5_u8])
  struct IMFMediaEngineNotify
    lpVtbl : IMFMediaEngineNotifyVTbl*
  end

  struct IMFMediaEngineSrcElementsVTbl
    query_interface : Proc(IMFMediaEngineSrcElements*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaEngineSrcElements*, UInt32)
    release : Proc(IMFMediaEngineSrcElements*, UInt32)
    get_length : Proc(IMFMediaEngineSrcElements*, UInt32)
    get_url : Proc(IMFMediaEngineSrcElements*, UInt32, UInt8**, HRESULT)
    get_type : Proc(IMFMediaEngineSrcElements*, UInt32, UInt8**, HRESULT)
    get_media : Proc(IMFMediaEngineSrcElements*, UInt32, UInt8**, HRESULT)
    add_element : Proc(IMFMediaEngineSrcElements*, UInt8*, UInt8*, UInt8*, HRESULT)
    remove_all_elements : Proc(IMFMediaEngineSrcElements*, HRESULT)
  end

  IMFMediaEngineSrcElements_GUID = "7a5e5354-b114-4c72-b991-3131d75032ea"
  IID_IMFMediaEngineSrcElements = LibC::GUID.new(0x7a5e5354_u32, 0xb114_u16, 0x4c72_u16, StaticArray[0xb9_u8, 0x91_u8, 0x31_u8, 0x31_u8, 0xd7_u8, 0x50_u8, 0x32_u8, 0xea_u8])
  struct IMFMediaEngineSrcElements
    lpVtbl : IMFMediaEngineSrcElementsVTbl*
  end

  struct IMFMediaEngineVTbl
    query_interface : Proc(IMFMediaEngine*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaEngine*, UInt32)
    release : Proc(IMFMediaEngine*, UInt32)
    get_error : Proc(IMFMediaEngine*, IMFMediaError*, HRESULT)
    set_error_code : Proc(IMFMediaEngine*, MF_MEDIA_ENGINE_ERR, HRESULT)
    set_source_elements : Proc(IMFMediaEngine*, IMFMediaEngineSrcElements, HRESULT)
    set_source : Proc(IMFMediaEngine*, UInt8*, HRESULT)
    get_current_source : Proc(IMFMediaEngine*, UInt8**, HRESULT)
    get_network_state : Proc(IMFMediaEngine*, UInt16)
    get_preload : Proc(IMFMediaEngine*, MF_MEDIA_ENGINE_PRELOAD)
    set_preload : Proc(IMFMediaEngine*, MF_MEDIA_ENGINE_PRELOAD, HRESULT)
    get_buffered : Proc(IMFMediaEngine*, IMFMediaTimeRange*, HRESULT)
    load : Proc(IMFMediaEngine*, HRESULT)
    can_play_type : Proc(IMFMediaEngine*, UInt8*, MF_MEDIA_ENGINE_CANPLAY*, HRESULT)
    get_ready_state : Proc(IMFMediaEngine*, UInt16)
    is_seeking : Proc(IMFMediaEngine*, LibC::BOOL)
    get_current_time : Proc(IMFMediaEngine*, Float64)
    set_current_time : Proc(IMFMediaEngine*, Float64, HRESULT)
    get_start_time : Proc(IMFMediaEngine*, Float64)
    get_duration : Proc(IMFMediaEngine*, Float64)
    is_paused : Proc(IMFMediaEngine*, LibC::BOOL)
    get_default_playback_rate : Proc(IMFMediaEngine*, Float64)
    set_default_playback_rate : Proc(IMFMediaEngine*, Float64, HRESULT)
    get_playback_rate : Proc(IMFMediaEngine*, Float64)
    set_playback_rate : Proc(IMFMediaEngine*, Float64, HRESULT)
    get_played : Proc(IMFMediaEngine*, IMFMediaTimeRange*, HRESULT)
    get_seekable : Proc(IMFMediaEngine*, IMFMediaTimeRange*, HRESULT)
    is_ended : Proc(IMFMediaEngine*, LibC::BOOL)
    get_auto_play : Proc(IMFMediaEngine*, LibC::BOOL)
    set_auto_play : Proc(IMFMediaEngine*, LibC::BOOL, HRESULT)
    get_loop : Proc(IMFMediaEngine*, LibC::BOOL)
    set_loop : Proc(IMFMediaEngine*, LibC::BOOL, HRESULT)
    play : Proc(IMFMediaEngine*, HRESULT)
    pause : Proc(IMFMediaEngine*, HRESULT)
    get_muted : Proc(IMFMediaEngine*, LibC::BOOL)
    set_muted : Proc(IMFMediaEngine*, LibC::BOOL, HRESULT)
    get_volume : Proc(IMFMediaEngine*, Float64)
    set_volume : Proc(IMFMediaEngine*, Float64, HRESULT)
    has_video : Proc(IMFMediaEngine*, LibC::BOOL)
    has_audio : Proc(IMFMediaEngine*, LibC::BOOL)
    get_native_video_size : Proc(IMFMediaEngine*, UInt32*, UInt32*, HRESULT)
    get_video_aspect_ratio : Proc(IMFMediaEngine*, UInt32*, UInt32*, HRESULT)
    shutdown : Proc(IMFMediaEngine*, HRESULT)
    transfer_video_frame : Proc(IMFMediaEngine*, IUnknown, MFVideoNormalizedRect*, RECT*, MFARGB*, HRESULT)
    on_video_stream_tick : Proc(IMFMediaEngine*, Int64*, HRESULT)
  end

  IMFMediaEngine_GUID = "98a1b0bb-03eb-4935-ae7c-93c1fa0e1c93"
  IID_IMFMediaEngine = LibC::GUID.new(0x98a1b0bb_u32, 0x3eb_u16, 0x4935_u16, StaticArray[0xae_u8, 0x7c_u8, 0x93_u8, 0xc1_u8, 0xfa_u8, 0xe_u8, 0x1c_u8, 0x93_u8])
  struct IMFMediaEngine
    lpVtbl : IMFMediaEngineVTbl*
  end

  struct IMFMediaEngineExVTbl
    query_interface : Proc(IMFMediaEngineEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaEngineEx*, UInt32)
    release : Proc(IMFMediaEngineEx*, UInt32)
    get_error : Proc(IMFMediaEngineEx*, IMFMediaError*, HRESULT)
    set_error_code : Proc(IMFMediaEngineEx*, MF_MEDIA_ENGINE_ERR, HRESULT)
    set_source_elements : Proc(IMFMediaEngineEx*, IMFMediaEngineSrcElements, HRESULT)
    set_source : Proc(IMFMediaEngineEx*, UInt8*, HRESULT)
    get_current_source : Proc(IMFMediaEngineEx*, UInt8**, HRESULT)
    get_network_state : Proc(IMFMediaEngineEx*, UInt16)
    get_preload : Proc(IMFMediaEngineEx*, MF_MEDIA_ENGINE_PRELOAD)
    set_preload : Proc(IMFMediaEngineEx*, MF_MEDIA_ENGINE_PRELOAD, HRESULT)
    get_buffered : Proc(IMFMediaEngineEx*, IMFMediaTimeRange*, HRESULT)
    load : Proc(IMFMediaEngineEx*, HRESULT)
    can_play_type : Proc(IMFMediaEngineEx*, UInt8*, MF_MEDIA_ENGINE_CANPLAY*, HRESULT)
    get_ready_state : Proc(IMFMediaEngineEx*, UInt16)
    is_seeking : Proc(IMFMediaEngineEx*, LibC::BOOL)
    get_current_time : Proc(IMFMediaEngineEx*, Float64)
    set_current_time : Proc(IMFMediaEngineEx*, Float64, HRESULT)
    get_start_time : Proc(IMFMediaEngineEx*, Float64)
    get_duration : Proc(IMFMediaEngineEx*, Float64)
    is_paused : Proc(IMFMediaEngineEx*, LibC::BOOL)
    get_default_playback_rate : Proc(IMFMediaEngineEx*, Float64)
    set_default_playback_rate : Proc(IMFMediaEngineEx*, Float64, HRESULT)
    get_playback_rate : Proc(IMFMediaEngineEx*, Float64)
    set_playback_rate : Proc(IMFMediaEngineEx*, Float64, HRESULT)
    get_played : Proc(IMFMediaEngineEx*, IMFMediaTimeRange*, HRESULT)
    get_seekable : Proc(IMFMediaEngineEx*, IMFMediaTimeRange*, HRESULT)
    is_ended : Proc(IMFMediaEngineEx*, LibC::BOOL)
    get_auto_play : Proc(IMFMediaEngineEx*, LibC::BOOL)
    set_auto_play : Proc(IMFMediaEngineEx*, LibC::BOOL, HRESULT)
    get_loop : Proc(IMFMediaEngineEx*, LibC::BOOL)
    set_loop : Proc(IMFMediaEngineEx*, LibC::BOOL, HRESULT)
    play : Proc(IMFMediaEngineEx*, HRESULT)
    pause : Proc(IMFMediaEngineEx*, HRESULT)
    get_muted : Proc(IMFMediaEngineEx*, LibC::BOOL)
    set_muted : Proc(IMFMediaEngineEx*, LibC::BOOL, HRESULT)
    get_volume : Proc(IMFMediaEngineEx*, Float64)
    set_volume : Proc(IMFMediaEngineEx*, Float64, HRESULT)
    has_video : Proc(IMFMediaEngineEx*, LibC::BOOL)
    has_audio : Proc(IMFMediaEngineEx*, LibC::BOOL)
    get_native_video_size : Proc(IMFMediaEngineEx*, UInt32*, UInt32*, HRESULT)
    get_video_aspect_ratio : Proc(IMFMediaEngineEx*, UInt32*, UInt32*, HRESULT)
    shutdown : Proc(IMFMediaEngineEx*, HRESULT)
    transfer_video_frame : Proc(IMFMediaEngineEx*, IUnknown, MFVideoNormalizedRect*, RECT*, MFARGB*, HRESULT)
    on_video_stream_tick : Proc(IMFMediaEngineEx*, Int64*, HRESULT)
    set_source_from_byte_stream : Proc(IMFMediaEngineEx*, IMFByteStream, UInt8*, HRESULT)
    get_statistics : Proc(IMFMediaEngineEx*, MF_MEDIA_ENGINE_STATISTIC, PROPVARIANT*, HRESULT)
    update_video_stream : Proc(IMFMediaEngineEx*, MFVideoNormalizedRect*, RECT*, MFARGB*, HRESULT)
    get_balance : Proc(IMFMediaEngineEx*, Float64)
    set_balance : Proc(IMFMediaEngineEx*, Float64, HRESULT)
    is_playback_rate_supported : Proc(IMFMediaEngineEx*, Float64, LibC::BOOL)
    frame_step : Proc(IMFMediaEngineEx*, LibC::BOOL, HRESULT)
    get_resource_characteristics : Proc(IMFMediaEngineEx*, UInt32*, HRESULT)
    get_presentation_attribute : Proc(IMFMediaEngineEx*, Guid*, PROPVARIANT*, HRESULT)
    get_number_of_streams : Proc(IMFMediaEngineEx*, UInt32*, HRESULT)
    get_stream_attribute : Proc(IMFMediaEngineEx*, UInt32, Guid*, PROPVARIANT*, HRESULT)
    get_stream_selection : Proc(IMFMediaEngineEx*, UInt32, LibC::BOOL*, HRESULT)
    set_stream_selection : Proc(IMFMediaEngineEx*, UInt32, LibC::BOOL, HRESULT)
    apply_stream_selections : Proc(IMFMediaEngineEx*, HRESULT)
    is_protected : Proc(IMFMediaEngineEx*, LibC::BOOL*, HRESULT)
    insert_video_effect : Proc(IMFMediaEngineEx*, IUnknown, LibC::BOOL, HRESULT)
    insert_audio_effect : Proc(IMFMediaEngineEx*, IUnknown, LibC::BOOL, HRESULT)
    remove_all_effects : Proc(IMFMediaEngineEx*, HRESULT)
    set_timeline_marker_timer : Proc(IMFMediaEngineEx*, Float64, HRESULT)
    get_timeline_marker_timer : Proc(IMFMediaEngineEx*, Float64*, HRESULT)
    cancel_timeline_marker_timer : Proc(IMFMediaEngineEx*, HRESULT)
    is_stereo3_d : Proc(IMFMediaEngineEx*, LibC::BOOL)
    get_stereo3_d_frame_packing_mode : Proc(IMFMediaEngineEx*, MF_MEDIA_ENGINE_S3D_PACKING_MODE*, HRESULT)
    set_stereo3_d_frame_packing_mode : Proc(IMFMediaEngineEx*, MF_MEDIA_ENGINE_S3D_PACKING_MODE, HRESULT)
    get_stereo3_d_render_mode : Proc(IMFMediaEngineEx*, MF3DVideoOutputType*, HRESULT)
    set_stereo3_d_render_mode : Proc(IMFMediaEngineEx*, MF3DVideoOutputType, HRESULT)
    enable_windowless_swapchain_mode : Proc(IMFMediaEngineEx*, LibC::BOOL, HRESULT)
    get_video_swapchain_handle : Proc(IMFMediaEngineEx*, LibC::HANDLE*, HRESULT)
    enable_horizontal_mirror_mode : Proc(IMFMediaEngineEx*, LibC::BOOL, HRESULT)
    get_audio_stream_category : Proc(IMFMediaEngineEx*, UInt32*, HRESULT)
    set_audio_stream_category : Proc(IMFMediaEngineEx*, UInt32, HRESULT)
    get_audio_endpoint_role : Proc(IMFMediaEngineEx*, UInt32*, HRESULT)
    set_audio_endpoint_role : Proc(IMFMediaEngineEx*, UInt32, HRESULT)
    get_real_time_mode : Proc(IMFMediaEngineEx*, LibC::BOOL*, HRESULT)
    set_real_time_mode : Proc(IMFMediaEngineEx*, LibC::BOOL, HRESULT)
    set_current_time_ex : Proc(IMFMediaEngineEx*, Float64, MF_MEDIA_ENGINE_SEEK_MODE, HRESULT)
    enable_time_update_timer : Proc(IMFMediaEngineEx*, LibC::BOOL, HRESULT)
  end

  IMFMediaEngineEx_GUID = "83015ead-b1e6-40d0-a98a-37145ffe1ad1"
  IID_IMFMediaEngineEx = LibC::GUID.new(0x83015ead_u32, 0xb1e6_u16, 0x40d0_u16, StaticArray[0xa9_u8, 0x8a_u8, 0x37_u8, 0x14_u8, 0x5f_u8, 0xfe_u8, 0x1a_u8, 0xd1_u8])
  struct IMFMediaEngineEx
    lpVtbl : IMFMediaEngineExVTbl*
  end

  struct IMFMediaEngineAudioEndpointIdVTbl
    query_interface : Proc(IMFMediaEngineAudioEndpointId*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaEngineAudioEndpointId*, UInt32)
    release : Proc(IMFMediaEngineAudioEndpointId*, UInt32)
    set_audio_endpoint_id : Proc(IMFMediaEngineAudioEndpointId*, LibC::LPWSTR, HRESULT)
    get_audio_endpoint_id : Proc(IMFMediaEngineAudioEndpointId*, LibC::LPWSTR*, HRESULT)
  end

  IMFMediaEngineAudioEndpointId_GUID = "7a3bac98-0e76-49fb-8c20-8a86fd98eaf2"
  IID_IMFMediaEngineAudioEndpointId = LibC::GUID.new(0x7a3bac98_u32, 0xe76_u16, 0x49fb_u16, StaticArray[0x8c_u8, 0x20_u8, 0x8a_u8, 0x86_u8, 0xfd_u8, 0x98_u8, 0xea_u8, 0xf2_u8])
  struct IMFMediaEngineAudioEndpointId
    lpVtbl : IMFMediaEngineAudioEndpointIdVTbl*
  end

  struct IMFMediaEngineExtensionVTbl
    query_interface : Proc(IMFMediaEngineExtension*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaEngineExtension*, UInt32)
    release : Proc(IMFMediaEngineExtension*, UInt32)
    can_play_type : Proc(IMFMediaEngineExtension*, LibC::BOOL, UInt8*, MF_MEDIA_ENGINE_CANPLAY*, HRESULT)
    begin_create_object : Proc(IMFMediaEngineExtension*, UInt8*, IMFByteStream, MF_OBJECT_TYPE, IUnknown*, IMFAsyncCallback, IUnknown, HRESULT)
    cancel_object_creation : Proc(IMFMediaEngineExtension*, IUnknown, HRESULT)
    end_create_object : Proc(IMFMediaEngineExtension*, IMFAsyncResult, IUnknown*, HRESULT)
  end

  IMFMediaEngineExtension_GUID = "2f69d622-20b5-41e9-afdf-89ced1dda04e"
  IID_IMFMediaEngineExtension = LibC::GUID.new(0x2f69d622_u32, 0x20b5_u16, 0x41e9_u16, StaticArray[0xaf_u8, 0xdf_u8, 0x89_u8, 0xce_u8, 0xd1_u8, 0xdd_u8, 0xa0_u8, 0x4e_u8])
  struct IMFMediaEngineExtension
    lpVtbl : IMFMediaEngineExtensionVTbl*
  end

  struct IMFMediaEngineProtectedContentVTbl
    query_interface : Proc(IMFMediaEngineProtectedContent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaEngineProtectedContent*, UInt32)
    release : Proc(IMFMediaEngineProtectedContent*, UInt32)
    share_resources : Proc(IMFMediaEngineProtectedContent*, IUnknown, HRESULT)
    get_required_protections : Proc(IMFMediaEngineProtectedContent*, UInt32*, HRESULT)
    set_opm_window : Proc(IMFMediaEngineProtectedContent*, LibC::HANDLE, HRESULT)
    transfer_video_frame : Proc(IMFMediaEngineProtectedContent*, IUnknown, MFVideoNormalizedRect*, RECT*, MFARGB*, UInt32*, HRESULT)
    set_content_protection_manager : Proc(IMFMediaEngineProtectedContent*, IMFContentProtectionManager, HRESULT)
    set_application_certificate : Proc(IMFMediaEngineProtectedContent*, UInt8*, UInt32, HRESULT)
  end

  IMFMediaEngineProtectedContent_GUID = "9f8021e8-9c8c-487e-bb5c-79aa4779938c"
  IID_IMFMediaEngineProtectedContent = LibC::GUID.new(0x9f8021e8_u32, 0x9c8c_u16, 0x487e_u16, StaticArray[0xbb_u8, 0x5c_u8, 0x79_u8, 0xaa_u8, 0x47_u8, 0x79_u8, 0x93_u8, 0x8c_u8])
  struct IMFMediaEngineProtectedContent
    lpVtbl : IMFMediaEngineProtectedContentVTbl*
  end

  struct IAudioSourceProviderVTbl
    query_interface : Proc(IAudioSourceProvider*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioSourceProvider*, UInt32)
    release : Proc(IAudioSourceProvider*, UInt32)
    provide_input : Proc(IAudioSourceProvider*, UInt32, UInt32*, Float32*, HRESULT)
  end

  IAudioSourceProvider_GUID = "ebbaf249-afc2-4582-91c6-b60df2e84954"
  IID_IAudioSourceProvider = LibC::GUID.new(0xebbaf249_u32, 0xafc2_u16, 0x4582_u16, StaticArray[0x91_u8, 0xc6_u8, 0xb6_u8, 0xd_u8, 0xf2_u8, 0xe8_u8, 0x49_u8, 0x54_u8])
  struct IAudioSourceProvider
    lpVtbl : IAudioSourceProviderVTbl*
  end

  struct IMFMediaEngineWebSupportVTbl
    query_interface : Proc(IMFMediaEngineWebSupport*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaEngineWebSupport*, UInt32)
    release : Proc(IMFMediaEngineWebSupport*, UInt32)
    should_delay_the_load_event : Proc(IMFMediaEngineWebSupport*, LibC::BOOL)
    connect_web_audio : Proc(IMFMediaEngineWebSupport*, UInt32, IAudioSourceProvider*, HRESULT)
    disconnect_web_audio : Proc(IMFMediaEngineWebSupport*, HRESULT)
  end

  IMFMediaEngineWebSupport_GUID = "ba2743a1-07e0-48ef-84b6-9a2ed023ca6c"
  IID_IMFMediaEngineWebSupport = LibC::GUID.new(0xba2743a1_u32, 0x7e0_u16, 0x48ef_u16, StaticArray[0x84_u8, 0xb6_u8, 0x9a_u8, 0x2e_u8, 0xd0_u8, 0x23_u8, 0xca_u8, 0x6c_u8])
  struct IMFMediaEngineWebSupport
    lpVtbl : IMFMediaEngineWebSupportVTbl*
  end

  struct IMFMediaSourceExtensionNotifyVTbl
    query_interface : Proc(IMFMediaSourceExtensionNotify*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaSourceExtensionNotify*, UInt32)
    release : Proc(IMFMediaSourceExtensionNotify*, UInt32)
    on_source_open : Proc(IMFMediaSourceExtensionNotify*, Void)
    on_source_ended : Proc(IMFMediaSourceExtensionNotify*, Void)
    on_source_close : Proc(IMFMediaSourceExtensionNotify*, Void)
  end

  IMFMediaSourceExtensionNotify_GUID = "a7901327-05dd-4469-a7b7-0e01979e361d"
  IID_IMFMediaSourceExtensionNotify = LibC::GUID.new(0xa7901327_u32, 0x5dd_u16, 0x4469_u16, StaticArray[0xa7_u8, 0xb7_u8, 0xe_u8, 0x1_u8, 0x97_u8, 0x9e_u8, 0x36_u8, 0x1d_u8])
  struct IMFMediaSourceExtensionNotify
    lpVtbl : IMFMediaSourceExtensionNotifyVTbl*
  end

  struct IMFBufferListNotifyVTbl
    query_interface : Proc(IMFBufferListNotify*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFBufferListNotify*, UInt32)
    release : Proc(IMFBufferListNotify*, UInt32)
    on_add_source_buffer : Proc(IMFBufferListNotify*, Void)
    on_remove_source_buffer : Proc(IMFBufferListNotify*, Void)
  end

  IMFBufferListNotify_GUID = "24cd47f7-81d8-4785-adb2-af697a963cd2"
  IID_IMFBufferListNotify = LibC::GUID.new(0x24cd47f7_u32, 0x81d8_u16, 0x4785_u16, StaticArray[0xad_u8, 0xb2_u8, 0xaf_u8, 0x69_u8, 0x7a_u8, 0x96_u8, 0x3c_u8, 0xd2_u8])
  struct IMFBufferListNotify
    lpVtbl : IMFBufferListNotifyVTbl*
  end

  struct IMFSourceBufferNotifyVTbl
    query_interface : Proc(IMFSourceBufferNotify*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSourceBufferNotify*, UInt32)
    release : Proc(IMFSourceBufferNotify*, UInt32)
    on_update_start : Proc(IMFSourceBufferNotify*, Void)
    on_abort : Proc(IMFSourceBufferNotify*, Void)
    on_error : Proc(IMFSourceBufferNotify*, HRESULT, Void)
    on_update : Proc(IMFSourceBufferNotify*, Void)
    on_update_end : Proc(IMFSourceBufferNotify*, Void)
  end

  IMFSourceBufferNotify_GUID = "87e47623-2ceb-45d6-9b88-d8520c4dcbbc"
  IID_IMFSourceBufferNotify = LibC::GUID.new(0x87e47623_u32, 0x2ceb_u16, 0x45d6_u16, StaticArray[0x9b_u8, 0x88_u8, 0xd8_u8, 0x52_u8, 0xc_u8, 0x4d_u8, 0xcb_u8, 0xbc_u8])
  struct IMFSourceBufferNotify
    lpVtbl : IMFSourceBufferNotifyVTbl*
  end

  struct IMFSourceBufferVTbl
    query_interface : Proc(IMFSourceBuffer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSourceBuffer*, UInt32)
    release : Proc(IMFSourceBuffer*, UInt32)
    get_updating : Proc(IMFSourceBuffer*, LibC::BOOL)
    get_buffered : Proc(IMFSourceBuffer*, IMFMediaTimeRange*, HRESULT)
    get_time_stamp_offset : Proc(IMFSourceBuffer*, Float64)
    set_time_stamp_offset : Proc(IMFSourceBuffer*, Float64, HRESULT)
    get_append_window_start : Proc(IMFSourceBuffer*, Float64)
    set_append_window_start : Proc(IMFSourceBuffer*, Float64, HRESULT)
    get_append_window_end : Proc(IMFSourceBuffer*, Float64)
    set_append_window_end : Proc(IMFSourceBuffer*, Float64, HRESULT)
    append : Proc(IMFSourceBuffer*, UInt8*, UInt32, HRESULT)
    append_byte_stream : Proc(IMFSourceBuffer*, IMFByteStream, UInt64*, HRESULT)
    abort : Proc(IMFSourceBuffer*, HRESULT)
    remove : Proc(IMFSourceBuffer*, Float64, Float64, HRESULT)
  end

  IMFSourceBuffer_GUID = "e2cd3a4b-af25-4d3d-9110-da0e6f8ee877"
  IID_IMFSourceBuffer = LibC::GUID.new(0xe2cd3a4b_u32, 0xaf25_u16, 0x4d3d_u16, StaticArray[0x91_u8, 0x10_u8, 0xda_u8, 0xe_u8, 0x6f_u8, 0x8e_u8, 0xe8_u8, 0x77_u8])
  struct IMFSourceBuffer
    lpVtbl : IMFSourceBufferVTbl*
  end

  struct IMFSourceBufferAppendModeVTbl
    query_interface : Proc(IMFSourceBufferAppendMode*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSourceBufferAppendMode*, UInt32)
    release : Proc(IMFSourceBufferAppendMode*, UInt32)
    get_append_mode : Proc(IMFSourceBufferAppendMode*, MF_MSE_APPEND_MODE)
    set_append_mode : Proc(IMFSourceBufferAppendMode*, MF_MSE_APPEND_MODE, HRESULT)
  end

  IMFSourceBufferAppendMode_GUID = "19666fb4-babe-4c55-bc03-0a074da37e2a"
  IID_IMFSourceBufferAppendMode = LibC::GUID.new(0x19666fb4_u32, 0xbabe_u16, 0x4c55_u16, StaticArray[0xbc_u8, 0x3_u8, 0xa_u8, 0x7_u8, 0x4d_u8, 0xa3_u8, 0x7e_u8, 0x2a_u8])
  struct IMFSourceBufferAppendMode
    lpVtbl : IMFSourceBufferAppendModeVTbl*
  end

  struct IMFSourceBufferListVTbl
    query_interface : Proc(IMFSourceBufferList*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSourceBufferList*, UInt32)
    release : Proc(IMFSourceBufferList*, UInt32)
    get_length : Proc(IMFSourceBufferList*, UInt32)
    get_source_buffer : Proc(IMFSourceBufferList*, UInt32, IMFSourceBuffer)
  end

  IMFSourceBufferList_GUID = "249981f8-8325-41f3-b80c-3b9e3aad0cbe"
  IID_IMFSourceBufferList = LibC::GUID.new(0x249981f8_u32, 0x8325_u16, 0x41f3_u16, StaticArray[0xb8_u8, 0xc_u8, 0x3b_u8, 0x9e_u8, 0x3a_u8, 0xad_u8, 0xc_u8, 0xbe_u8])
  struct IMFSourceBufferList
    lpVtbl : IMFSourceBufferListVTbl*
  end

  struct IMFMediaSourceExtensionVTbl
    query_interface : Proc(IMFMediaSourceExtension*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaSourceExtension*, UInt32)
    release : Proc(IMFMediaSourceExtension*, UInt32)
    get_source_buffers : Proc(IMFMediaSourceExtension*, IMFSourceBufferList)
    get_active_source_buffers : Proc(IMFMediaSourceExtension*, IMFSourceBufferList)
    get_ready_state : Proc(IMFMediaSourceExtension*, MF_MSE_READY)
    get_duration : Proc(IMFMediaSourceExtension*, Float64)
    set_duration : Proc(IMFMediaSourceExtension*, Float64, HRESULT)
    add_source_buffer : Proc(IMFMediaSourceExtension*, UInt8*, IMFSourceBufferNotify, IMFSourceBuffer*, HRESULT)
    remove_source_buffer : Proc(IMFMediaSourceExtension*, IMFSourceBuffer, HRESULT)
    set_end_of_stream : Proc(IMFMediaSourceExtension*, MF_MSE_ERROR, HRESULT)
    is_type_supported : Proc(IMFMediaSourceExtension*, UInt8*, LibC::BOOL)
    get_source_buffer : Proc(IMFMediaSourceExtension*, UInt32, IMFSourceBuffer)
  end

  IMFMediaSourceExtension_GUID = "e467b94e-a713-4562-a802-816a42e9008a"
  IID_IMFMediaSourceExtension = LibC::GUID.new(0xe467b94e_u32, 0xa713_u16, 0x4562_u16, StaticArray[0xa8_u8, 0x2_u8, 0x81_u8, 0x6a_u8, 0x42_u8, 0xe9_u8, 0x0_u8, 0x8a_u8])
  struct IMFMediaSourceExtension
    lpVtbl : IMFMediaSourceExtensionVTbl*
  end

  struct IMFMediaSourceExtensionLiveSeekableRangeVTbl
    query_interface : Proc(IMFMediaSourceExtensionLiveSeekableRange*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaSourceExtensionLiveSeekableRange*, UInt32)
    release : Proc(IMFMediaSourceExtensionLiveSeekableRange*, UInt32)
    set_live_seekable_range : Proc(IMFMediaSourceExtensionLiveSeekableRange*, Float64, Float64, HRESULT)
    clear_live_seekable_range : Proc(IMFMediaSourceExtensionLiveSeekableRange*, HRESULT)
  end

  IMFMediaSourceExtensionLiveSeekableRange_GUID = "5d1abfd6-450a-4d92-9efc-d6b6cbc1f4da"
  IID_IMFMediaSourceExtensionLiveSeekableRange = LibC::GUID.new(0x5d1abfd6_u32, 0x450a_u16, 0x4d92_u16, StaticArray[0x9e_u8, 0xfc_u8, 0xd6_u8, 0xb6_u8, 0xcb_u8, 0xc1_u8, 0xf4_u8, 0xda_u8])
  struct IMFMediaSourceExtensionLiveSeekableRange
    lpVtbl : IMFMediaSourceExtensionLiveSeekableRangeVTbl*
  end

  struct IMFMediaEngineEMEVTbl
    query_interface : Proc(IMFMediaEngineEME*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaEngineEME*, UInt32)
    release : Proc(IMFMediaEngineEME*, UInt32)
    get_keys : Proc(IMFMediaEngineEME*, IMFMediaKeys*, HRESULT)
    set_media_keys : Proc(IMFMediaEngineEME*, IMFMediaKeys, HRESULT)
  end

  IMFMediaEngineEME_GUID = "50dc93e4-ba4f-4275-ae66-83e836e57469"
  IID_IMFMediaEngineEME = LibC::GUID.new(0x50dc93e4_u32, 0xba4f_u16, 0x4275_u16, StaticArray[0xae_u8, 0x66_u8, 0x83_u8, 0xe8_u8, 0x36_u8, 0xe5_u8, 0x74_u8, 0x69_u8])
  struct IMFMediaEngineEME
    lpVtbl : IMFMediaEngineEMEVTbl*
  end

  struct IMFMediaEngineSrcElementsExVTbl
    query_interface : Proc(IMFMediaEngineSrcElementsEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaEngineSrcElementsEx*, UInt32)
    release : Proc(IMFMediaEngineSrcElementsEx*, UInt32)
    get_length : Proc(IMFMediaEngineSrcElementsEx*, UInt32)
    get_url : Proc(IMFMediaEngineSrcElementsEx*, UInt32, UInt8**, HRESULT)
    get_type : Proc(IMFMediaEngineSrcElementsEx*, UInt32, UInt8**, HRESULT)
    get_media : Proc(IMFMediaEngineSrcElementsEx*, UInt32, UInt8**, HRESULT)
    add_element : Proc(IMFMediaEngineSrcElementsEx*, UInt8*, UInt8*, UInt8*, HRESULT)
    remove_all_elements : Proc(IMFMediaEngineSrcElementsEx*, HRESULT)
    add_element_ex : Proc(IMFMediaEngineSrcElementsEx*, UInt8*, UInt8*, UInt8*, UInt8*, HRESULT)
    get_key_system : Proc(IMFMediaEngineSrcElementsEx*, UInt32, UInt8**, HRESULT)
  end

  IMFMediaEngineSrcElementsEx_GUID = "654a6bb3-e1a3-424a-9908-53a43a0dfda0"
  IID_IMFMediaEngineSrcElementsEx = LibC::GUID.new(0x654a6bb3_u32, 0xe1a3_u16, 0x424a_u16, StaticArray[0x99_u8, 0x8_u8, 0x53_u8, 0xa4_u8, 0x3a_u8, 0xd_u8, 0xfd_u8, 0xa0_u8])
  struct IMFMediaEngineSrcElementsEx
    lpVtbl : IMFMediaEngineSrcElementsExVTbl*
  end

  struct IMFMediaEngineNeedKeyNotifyVTbl
    query_interface : Proc(IMFMediaEngineNeedKeyNotify*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaEngineNeedKeyNotify*, UInt32)
    release : Proc(IMFMediaEngineNeedKeyNotify*, UInt32)
    need_key : Proc(IMFMediaEngineNeedKeyNotify*, UInt8*, UInt32, Void)
  end

  IMFMediaEngineNeedKeyNotify_GUID = "46a30204-a696-4b18-8804-246b8f031bb1"
  IID_IMFMediaEngineNeedKeyNotify = LibC::GUID.new(0x46a30204_u32, 0xa696_u16, 0x4b18_u16, StaticArray[0x88_u8, 0x4_u8, 0x24_u8, 0x6b_u8, 0x8f_u8, 0x3_u8, 0x1b_u8, 0xb1_u8])
  struct IMFMediaEngineNeedKeyNotify
    lpVtbl : IMFMediaEngineNeedKeyNotifyVTbl*
  end

  struct IMFMediaKeysVTbl
    query_interface : Proc(IMFMediaKeys*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaKeys*, UInt32)
    release : Proc(IMFMediaKeys*, UInt32)
    create_session : Proc(IMFMediaKeys*, UInt8*, UInt8*, UInt32, UInt8*, UInt32, IMFMediaKeySessionNotify, IMFMediaKeySession*, HRESULT)
    get_key_system : Proc(IMFMediaKeys*, UInt8**, HRESULT)
    shutdown : Proc(IMFMediaKeys*, HRESULT)
    get_suspend_notify : Proc(IMFMediaKeys*, IMFCdmSuspendNotify*, HRESULT)
  end

  IMFMediaKeys_GUID = "5cb31c05-61ff-418f-afda-caaf41421a38"
  IID_IMFMediaKeys = LibC::GUID.new(0x5cb31c05_u32, 0x61ff_u16, 0x418f_u16, StaticArray[0xaf_u8, 0xda_u8, 0xca_u8, 0xaf_u8, 0x41_u8, 0x42_u8, 0x1a_u8, 0x38_u8])
  struct IMFMediaKeys
    lpVtbl : IMFMediaKeysVTbl*
  end

  struct IMFMediaKeySessionVTbl
    query_interface : Proc(IMFMediaKeySession*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaKeySession*, UInt32)
    release : Proc(IMFMediaKeySession*, UInt32)
    get_error : Proc(IMFMediaKeySession*, UInt16*, UInt32*, HRESULT)
    get_key_system : Proc(IMFMediaKeySession*, UInt8**, HRESULT)
    get_session_id : Proc(IMFMediaKeySession*, UInt8**, HRESULT)
    update : Proc(IMFMediaKeySession*, UInt8*, UInt32, HRESULT)
    close : Proc(IMFMediaKeySession*, HRESULT)
  end

  IMFMediaKeySession_GUID = "24fa67d5-d1d0-4dc5-995c-c0efdc191fb5"
  IID_IMFMediaKeySession = LibC::GUID.new(0x24fa67d5_u32, 0xd1d0_u16, 0x4dc5_u16, StaticArray[0x99_u8, 0x5c_u8, 0xc0_u8, 0xef_u8, 0xdc_u8, 0x19_u8, 0x1f_u8, 0xb5_u8])
  struct IMFMediaKeySession
    lpVtbl : IMFMediaKeySessionVTbl*
  end

  struct IMFMediaKeySessionNotifyVTbl
    query_interface : Proc(IMFMediaKeySessionNotify*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaKeySessionNotify*, UInt32)
    release : Proc(IMFMediaKeySessionNotify*, UInt32)
    key_message : Proc(IMFMediaKeySessionNotify*, UInt8*, UInt8*, UInt32, Void)
    key_added : Proc(IMFMediaKeySessionNotify*, Void)
    key_error : Proc(IMFMediaKeySessionNotify*, UInt16, UInt32, Void)
  end

  IMFMediaKeySessionNotify_GUID = "6a0083f9-8947-4c1d-9ce0-cdee22b23135"
  IID_IMFMediaKeySessionNotify = LibC::GUID.new(0x6a0083f9_u32, 0x8947_u16, 0x4c1d_u16, StaticArray[0x9c_u8, 0xe0_u8, 0xcd_u8, 0xee_u8, 0x22_u8, 0xb2_u8, 0x31_u8, 0x35_u8])
  struct IMFMediaKeySessionNotify
    lpVtbl : IMFMediaKeySessionNotifyVTbl*
  end

  struct IMFCdmSuspendNotifyVTbl
    query_interface : Proc(IMFCdmSuspendNotify*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFCdmSuspendNotify*, UInt32)
    release : Proc(IMFCdmSuspendNotify*, UInt32)
    begin_ : Proc(IMFCdmSuspendNotify*, HRESULT)
    end_ : Proc(IMFCdmSuspendNotify*, HRESULT)
  end

  IMFCdmSuspendNotify_GUID = "7a5645d2-43bd-47fd-87b7-dcd24cc7d692"
  IID_IMFCdmSuspendNotify = LibC::GUID.new(0x7a5645d2_u32, 0x43bd_u16, 0x47fd_u16, StaticArray[0x87_u8, 0xb7_u8, 0xdc_u8, 0xd2_u8, 0x4c_u8, 0xc7_u8, 0xd6_u8, 0x92_u8])
  struct IMFCdmSuspendNotify
    lpVtbl : IMFCdmSuspendNotifyVTbl*
  end

  struct IMFHDCPStatusVTbl
    query_interface : Proc(IMFHDCPStatus*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFHDCPStatus*, UInt32)
    release : Proc(IMFHDCPStatus*, UInt32)
    query : Proc(IMFHDCPStatus*, MF_HDCP_STATUS*, LibC::BOOL*, HRESULT)
    set : Proc(IMFHDCPStatus*, MF_HDCP_STATUS, HRESULT)
  end

  IMFHDCPStatus_GUID = "de400f54-5bf1-40cf-8964-0bea136b1e3d"
  IID_IMFHDCPStatus = LibC::GUID.new(0xde400f54_u32, 0x5bf1_u16, 0x40cf_u16, StaticArray[0x89_u8, 0x64_u8, 0xb_u8, 0xea_u8, 0x13_u8, 0x6b_u8, 0x1e_u8, 0x3d_u8])
  struct IMFHDCPStatus
    lpVtbl : IMFHDCPStatusVTbl*
  end

  struct IMFMediaEngineOPMInfoVTbl
    query_interface : Proc(IMFMediaEngineOPMInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaEngineOPMInfo*, UInt32)
    release : Proc(IMFMediaEngineOPMInfo*, UInt32)
    get_opm_info : Proc(IMFMediaEngineOPMInfo*, MF_MEDIA_ENGINE_OPM_STATUS*, LibC::BOOL*, HRESULT)
  end

  IMFMediaEngineOPMInfo_GUID = "765763e6-6c01-4b01-bb0f-b829f60ed28c"
  IID_IMFMediaEngineOPMInfo = LibC::GUID.new(0x765763e6_u32, 0x6c01_u16, 0x4b01_u16, StaticArray[0xbb_u8, 0xf_u8, 0xb8_u8, 0x29_u8, 0xf6_u8, 0xe_u8, 0xd2_u8, 0x8c_u8])
  struct IMFMediaEngineOPMInfo
    lpVtbl : IMFMediaEngineOPMInfoVTbl*
  end

  struct IMFMediaEngineClassFactoryVTbl
    query_interface : Proc(IMFMediaEngineClassFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaEngineClassFactory*, UInt32)
    release : Proc(IMFMediaEngineClassFactory*, UInt32)
    create_instance : Proc(IMFMediaEngineClassFactory*, UInt32, IMFAttributes, IMFMediaEngine*, HRESULT)
    create_time_range : Proc(IMFMediaEngineClassFactory*, IMFMediaTimeRange*, HRESULT)
    create_error : Proc(IMFMediaEngineClassFactory*, IMFMediaError*, HRESULT)
  end

  IMFMediaEngineClassFactory_GUID = "4d645ace-26aa-4688-9be1-df3516990b93"
  IID_IMFMediaEngineClassFactory = LibC::GUID.new(0x4d645ace_u32, 0x26aa_u16, 0x4688_u16, StaticArray[0x9b_u8, 0xe1_u8, 0xdf_u8, 0x35_u8, 0x16_u8, 0x99_u8, 0xb_u8, 0x93_u8])
  struct IMFMediaEngineClassFactory
    lpVtbl : IMFMediaEngineClassFactoryVTbl*
  end

  struct IMFMediaEngineClassFactoryExVTbl
    query_interface : Proc(IMFMediaEngineClassFactoryEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaEngineClassFactoryEx*, UInt32)
    release : Proc(IMFMediaEngineClassFactoryEx*, UInt32)
    create_instance : Proc(IMFMediaEngineClassFactoryEx*, UInt32, IMFAttributes, IMFMediaEngine*, HRESULT)
    create_time_range : Proc(IMFMediaEngineClassFactoryEx*, IMFMediaTimeRange*, HRESULT)
    create_error : Proc(IMFMediaEngineClassFactoryEx*, IMFMediaError*, HRESULT)
    create_media_source_extension : Proc(IMFMediaEngineClassFactoryEx*, UInt32, IMFAttributes, IMFMediaSourceExtension*, HRESULT)
    create_media_keys : Proc(IMFMediaEngineClassFactoryEx*, UInt8*, UInt8*, IMFMediaKeys*, HRESULT)
    is_type_supported : Proc(IMFMediaEngineClassFactoryEx*, UInt8*, UInt8*, LibC::BOOL*, HRESULT)
  end

  IMFMediaEngineClassFactoryEx_GUID = "c56156c6-ea5b-48a5-9df8-fbe035d0929e"
  IID_IMFMediaEngineClassFactoryEx = LibC::GUID.new(0xc56156c6_u32, 0xea5b_u16, 0x48a5_u16, StaticArray[0x9d_u8, 0xf8_u8, 0xfb_u8, 0xe0_u8, 0x35_u8, 0xd0_u8, 0x92_u8, 0x9e_u8])
  struct IMFMediaEngineClassFactoryEx
    lpVtbl : IMFMediaEngineClassFactoryExVTbl*
  end

  struct IMFMediaEngineClassFactory2VTbl
    query_interface : Proc(IMFMediaEngineClassFactory2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaEngineClassFactory2*, UInt32)
    release : Proc(IMFMediaEngineClassFactory2*, UInt32)
    create_media_keys2 : Proc(IMFMediaEngineClassFactory2*, UInt8*, UInt8*, UInt8*, IMFMediaKeys*, HRESULT)
  end

  IMFMediaEngineClassFactory2_GUID = "09083cef-867f-4bf6-8776-dee3a7b42fca"
  IID_IMFMediaEngineClassFactory2 = LibC::GUID.new(0x9083cef_u32, 0x867f_u16, 0x4bf6_u16, StaticArray[0x87_u8, 0x76_u8, 0xde_u8, 0xe3_u8, 0xa7_u8, 0xb4_u8, 0x2f_u8, 0xca_u8])
  struct IMFMediaEngineClassFactory2
    lpVtbl : IMFMediaEngineClassFactory2VTbl*
  end

  struct IMFExtendedDRMTypeSupportVTbl
    query_interface : Proc(IMFExtendedDRMTypeSupport*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFExtendedDRMTypeSupport*, UInt32)
    release : Proc(IMFExtendedDRMTypeSupport*, UInt32)
    is_type_supported_ex : Proc(IMFExtendedDRMTypeSupport*, UInt8*, UInt8*, MF_MEDIA_ENGINE_CANPLAY*, HRESULT)
  end

  IMFExtendedDRMTypeSupport_GUID = "332ec562-3758-468d-a784-e38f23552128"
  IID_IMFExtendedDRMTypeSupport = LibC::GUID.new(0x332ec562_u32, 0x3758_u16, 0x468d_u16, StaticArray[0xa7_u8, 0x84_u8, 0xe3_u8, 0x8f_u8, 0x23_u8, 0x55_u8, 0x21_u8, 0x28_u8])
  struct IMFExtendedDRMTypeSupport
    lpVtbl : IMFExtendedDRMTypeSupportVTbl*
  end

  struct IMFMediaEngineSupportsSourceTransferVTbl
    query_interface : Proc(IMFMediaEngineSupportsSourceTransfer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaEngineSupportsSourceTransfer*, UInt32)
    release : Proc(IMFMediaEngineSupportsSourceTransfer*, UInt32)
    should_transfer_source : Proc(IMFMediaEngineSupportsSourceTransfer*, LibC::BOOL*, HRESULT)
    detach_media_source : Proc(IMFMediaEngineSupportsSourceTransfer*, IMFByteStream*, IMFMediaSource*, IMFMediaSourceExtension*, HRESULT)
    attach_media_source : Proc(IMFMediaEngineSupportsSourceTransfer*, IMFByteStream, IMFMediaSource, IMFMediaSourceExtension, HRESULT)
  end

  IMFMediaEngineSupportsSourceTransfer_GUID = "a724b056-1b2e-4642-a6f3-db9420c52908"
  IID_IMFMediaEngineSupportsSourceTransfer = LibC::GUID.new(0xa724b056_u32, 0x1b2e_u16, 0x4642_u16, StaticArray[0xa6_u8, 0xf3_u8, 0xdb_u8, 0x94_u8, 0x20_u8, 0xc5_u8, 0x29_u8, 0x8_u8])
  struct IMFMediaEngineSupportsSourceTransfer
    lpVtbl : IMFMediaEngineSupportsSourceTransferVTbl*
  end

  struct IMFMediaEngineTransferSourceVTbl
    query_interface : Proc(IMFMediaEngineTransferSource*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaEngineTransferSource*, UInt32)
    release : Proc(IMFMediaEngineTransferSource*, UInt32)
    transfer_source_to_media_engine : Proc(IMFMediaEngineTransferSource*, IMFMediaEngine, HRESULT)
  end

  IMFMediaEngineTransferSource_GUID = "24230452-fe54-40cc-94f3-fcc394c340d6"
  IID_IMFMediaEngineTransferSource = LibC::GUID.new(0x24230452_u32, 0xfe54_u16, 0x40cc_u16, StaticArray[0x94_u8, 0xf3_u8, 0xfc_u8, 0xc3_u8, 0x94_u8, 0xc3_u8, 0x40_u8, 0xd6_u8])
  struct IMFMediaEngineTransferSource
    lpVtbl : IMFMediaEngineTransferSourceVTbl*
  end

  struct IMFTimedTextVTbl
    query_interface : Proc(IMFTimedText*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFTimedText*, UInt32)
    release : Proc(IMFTimedText*, UInt32)
    register_notifications : Proc(IMFTimedText*, IMFTimedTextNotify, HRESULT)
    select_track : Proc(IMFTimedText*, UInt32, LibC::BOOL, HRESULT)
    add_data_source : Proc(IMFTimedText*, IMFByteStream, LibC::LPWSTR, LibC::LPWSTR, MF_TIMED_TEXT_TRACK_KIND, LibC::BOOL, UInt32*, HRESULT)
    add_data_source_from_url : Proc(IMFTimedText*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, MF_TIMED_TEXT_TRACK_KIND, LibC::BOOL, UInt32*, HRESULT)
    add_track : Proc(IMFTimedText*, LibC::LPWSTR, LibC::LPWSTR, MF_TIMED_TEXT_TRACK_KIND, IMFTimedTextTrack*, HRESULT)
    remove_track : Proc(IMFTimedText*, IMFTimedTextTrack, HRESULT)
    get_cue_time_offset : Proc(IMFTimedText*, Float64*, HRESULT)
    set_cue_time_offset : Proc(IMFTimedText*, Float64, HRESULT)
    get_tracks : Proc(IMFTimedText*, IMFTimedTextTrackList*, HRESULT)
    get_active_tracks : Proc(IMFTimedText*, IMFTimedTextTrackList*, HRESULT)
    get_text_tracks : Proc(IMFTimedText*, IMFTimedTextTrackList*, HRESULT)
    get_metadata_tracks : Proc(IMFTimedText*, IMFTimedTextTrackList*, HRESULT)
    set_in_band_enabled : Proc(IMFTimedText*, LibC::BOOL, HRESULT)
    is_in_band_enabled : Proc(IMFTimedText*, LibC::BOOL)
  end

  IMFTimedText_GUID = "1f2a94c9-a3df-430d-9d0f-acd85ddc29af"
  IID_IMFTimedText = LibC::GUID.new(0x1f2a94c9_u32, 0xa3df_u16, 0x430d_u16, StaticArray[0x9d_u8, 0xf_u8, 0xac_u8, 0xd8_u8, 0x5d_u8, 0xdc_u8, 0x29_u8, 0xaf_u8])
  struct IMFTimedText
    lpVtbl : IMFTimedTextVTbl*
  end

  struct IMFTimedTextNotifyVTbl
    query_interface : Proc(IMFTimedTextNotify*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFTimedTextNotify*, UInt32)
    release : Proc(IMFTimedTextNotify*, UInt32)
    track_added : Proc(IMFTimedTextNotify*, UInt32, Void)
    track_removed : Proc(IMFTimedTextNotify*, UInt32, Void)
    track_selected : Proc(IMFTimedTextNotify*, UInt32, LibC::BOOL, Void)
    track_ready_state_changed : Proc(IMFTimedTextNotify*, UInt32, Void)
    error : Proc(IMFTimedTextNotify*, MF_TIMED_TEXT_ERROR_CODE, HRESULT, UInt32, Void)
    cue : Proc(IMFTimedTextNotify*, MF_TIMED_TEXT_CUE_EVENT, Float64, IMFTimedTextCue, Void)
    reset : Proc(IMFTimedTextNotify*, Void)
  end

  IMFTimedTextNotify_GUID = "df6b87b6-ce12-45db-aba7-432fe054e57d"
  IID_IMFTimedTextNotify = LibC::GUID.new(0xdf6b87b6_u32, 0xce12_u16, 0x45db_u16, StaticArray[0xab_u8, 0xa7_u8, 0x43_u8, 0x2f_u8, 0xe0_u8, 0x54_u8, 0xe5_u8, 0x7d_u8])
  struct IMFTimedTextNotify
    lpVtbl : IMFTimedTextNotifyVTbl*
  end

  struct IMFTimedTextTrackVTbl
    query_interface : Proc(IMFTimedTextTrack*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFTimedTextTrack*, UInt32)
    release : Proc(IMFTimedTextTrack*, UInt32)
    get_id : Proc(IMFTimedTextTrack*, UInt32)
    get_label : Proc(IMFTimedTextTrack*, LibC::LPWSTR*, HRESULT)
    set_label : Proc(IMFTimedTextTrack*, LibC::LPWSTR, HRESULT)
    get_language : Proc(IMFTimedTextTrack*, LibC::LPWSTR*, HRESULT)
    get_track_kind : Proc(IMFTimedTextTrack*, MF_TIMED_TEXT_TRACK_KIND)
    is_in_band : Proc(IMFTimedTextTrack*, LibC::BOOL)
    get_in_band_metadata_track_dispatch_type : Proc(IMFTimedTextTrack*, LibC::LPWSTR*, HRESULT)
    is_active : Proc(IMFTimedTextTrack*, LibC::BOOL)
    get_error_code : Proc(IMFTimedTextTrack*, MF_TIMED_TEXT_ERROR_CODE)
    get_extended_error_code : Proc(IMFTimedTextTrack*, HRESULT)
    get_data_format : Proc(IMFTimedTextTrack*, Guid*, HRESULT)
    get_ready_state : Proc(IMFTimedTextTrack*, MF_TIMED_TEXT_TRACK_READY_STATE)
    get_cue_list : Proc(IMFTimedTextTrack*, IMFTimedTextCueList*, HRESULT)
  end

  IMFTimedTextTrack_GUID = "8822c32d-654e-4233-bf21-d7f2e67d30d4"
  IID_IMFTimedTextTrack = LibC::GUID.new(0x8822c32d_u32, 0x654e_u16, 0x4233_u16, StaticArray[0xbf_u8, 0x21_u8, 0xd7_u8, 0xf2_u8, 0xe6_u8, 0x7d_u8, 0x30_u8, 0xd4_u8])
  struct IMFTimedTextTrack
    lpVtbl : IMFTimedTextTrackVTbl*
  end

  struct IMFTimedTextTrackListVTbl
    query_interface : Proc(IMFTimedTextTrackList*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFTimedTextTrackList*, UInt32)
    release : Proc(IMFTimedTextTrackList*, UInt32)
    get_length : Proc(IMFTimedTextTrackList*, UInt32)
    get_track : Proc(IMFTimedTextTrackList*, UInt32, IMFTimedTextTrack*, HRESULT)
    get_track_by_id : Proc(IMFTimedTextTrackList*, UInt32, IMFTimedTextTrack*, HRESULT)
  end

  IMFTimedTextTrackList_GUID = "23ff334c-442c-445f-bccc-edc438aa11e2"
  IID_IMFTimedTextTrackList = LibC::GUID.new(0x23ff334c_u32, 0x442c_u16, 0x445f_u16, StaticArray[0xbc_u8, 0xcc_u8, 0xed_u8, 0xc4_u8, 0x38_u8, 0xaa_u8, 0x11_u8, 0xe2_u8])
  struct IMFTimedTextTrackList
    lpVtbl : IMFTimedTextTrackListVTbl*
  end

  struct IMFTimedTextCueVTbl
    query_interface : Proc(IMFTimedTextCue*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFTimedTextCue*, UInt32)
    release : Proc(IMFTimedTextCue*, UInt32)
    get_id : Proc(IMFTimedTextCue*, UInt32)
    get_original_id : Proc(IMFTimedTextCue*, LibC::LPWSTR*, HRESULT)
    get_cue_kind : Proc(IMFTimedTextCue*, MF_TIMED_TEXT_TRACK_KIND)
    get_start_time : Proc(IMFTimedTextCue*, Float64)
    get_duration : Proc(IMFTimedTextCue*, Float64)
    get_track_id : Proc(IMFTimedTextCue*, UInt32)
    get_data : Proc(IMFTimedTextCue*, IMFTimedTextBinary*, HRESULT)
    get_region : Proc(IMFTimedTextCue*, IMFTimedTextRegion*, HRESULT)
    get_style : Proc(IMFTimedTextCue*, IMFTimedTextStyle*, HRESULT)
    get_line_count : Proc(IMFTimedTextCue*, UInt32)
    get_line : Proc(IMFTimedTextCue*, UInt32, IMFTimedTextFormattedText*, HRESULT)
  end

  IMFTimedTextCue_GUID = "1e560447-9a2b-43e1-a94c-b0aaabfbfbc9"
  IID_IMFTimedTextCue = LibC::GUID.new(0x1e560447_u32, 0x9a2b_u16, 0x43e1_u16, StaticArray[0xa9_u8, 0x4c_u8, 0xb0_u8, 0xaa_u8, 0xab_u8, 0xfb_u8, 0xfb_u8, 0xc9_u8])
  struct IMFTimedTextCue
    lpVtbl : IMFTimedTextCueVTbl*
  end

  struct IMFTimedTextFormattedTextVTbl
    query_interface : Proc(IMFTimedTextFormattedText*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFTimedTextFormattedText*, UInt32)
    release : Proc(IMFTimedTextFormattedText*, UInt32)
    get_text : Proc(IMFTimedTextFormattedText*, LibC::LPWSTR*, HRESULT)
    get_subformatting_count : Proc(IMFTimedTextFormattedText*, UInt32)
    get_subformatting : Proc(IMFTimedTextFormattedText*, UInt32, UInt32*, UInt32*, IMFTimedTextStyle*, HRESULT)
  end

  IMFTimedTextFormattedText_GUID = "e13af3c1-4d47-4354-b1f5-e83ae0ecae60"
  IID_IMFTimedTextFormattedText = LibC::GUID.new(0xe13af3c1_u32, 0x4d47_u16, 0x4354_u16, StaticArray[0xb1_u8, 0xf5_u8, 0xe8_u8, 0x3a_u8, 0xe0_u8, 0xec_u8, 0xae_u8, 0x60_u8])
  struct IMFTimedTextFormattedText
    lpVtbl : IMFTimedTextFormattedTextVTbl*
  end

  struct IMFTimedTextStyleVTbl
    query_interface : Proc(IMFTimedTextStyle*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFTimedTextStyle*, UInt32)
    release : Proc(IMFTimedTextStyle*, UInt32)
    get_name : Proc(IMFTimedTextStyle*, LibC::LPWSTR*, HRESULT)
    is_external : Proc(IMFTimedTextStyle*, LibC::BOOL)
    get_font_family : Proc(IMFTimedTextStyle*, LibC::LPWSTR*, HRESULT)
    get_font_size : Proc(IMFTimedTextStyle*, Float64*, MF_TIMED_TEXT_UNIT_TYPE*, HRESULT)
    get_color : Proc(IMFTimedTextStyle*, MFARGB*, HRESULT)
    get_background_color : Proc(IMFTimedTextStyle*, MFARGB*, HRESULT)
    get_show_background_always : Proc(IMFTimedTextStyle*, LibC::BOOL*, HRESULT)
    get_font_style : Proc(IMFTimedTextStyle*, MF_TIMED_TEXT_FONT_STYLE*, HRESULT)
    get_bold : Proc(IMFTimedTextStyle*, LibC::BOOL*, HRESULT)
    get_right_to_left : Proc(IMFTimedTextStyle*, LibC::BOOL*, HRESULT)
    get_text_alignment : Proc(IMFTimedTextStyle*, MF_TIMED_TEXT_ALIGNMENT*, HRESULT)
    get_text_decoration : Proc(IMFTimedTextStyle*, UInt32*, HRESULT)
    get_text_outline : Proc(IMFTimedTextStyle*, MFARGB*, Float64*, Float64*, MF_TIMED_TEXT_UNIT_TYPE*, HRESULT)
  end

  IMFTimedTextStyle_GUID = "09b2455d-b834-4f01-a347-9052e21c450e"
  IID_IMFTimedTextStyle = LibC::GUID.new(0x9b2455d_u32, 0xb834_u16, 0x4f01_u16, StaticArray[0xa3_u8, 0x47_u8, 0x90_u8, 0x52_u8, 0xe2_u8, 0x1c_u8, 0x45_u8, 0xe_u8])
  struct IMFTimedTextStyle
    lpVtbl : IMFTimedTextStyleVTbl*
  end

  struct IMFTimedTextRegionVTbl
    query_interface : Proc(IMFTimedTextRegion*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFTimedTextRegion*, UInt32)
    release : Proc(IMFTimedTextRegion*, UInt32)
    get_name : Proc(IMFTimedTextRegion*, LibC::LPWSTR*, HRESULT)
    get_position : Proc(IMFTimedTextRegion*, Float64*, Float64*, MF_TIMED_TEXT_UNIT_TYPE*, HRESULT)
    get_extent : Proc(IMFTimedTextRegion*, Float64*, Float64*, MF_TIMED_TEXT_UNIT_TYPE*, HRESULT)
    get_background_color : Proc(IMFTimedTextRegion*, MFARGB*, HRESULT)
    get_writing_mode : Proc(IMFTimedTextRegion*, MF_TIMED_TEXT_WRITING_MODE*, HRESULT)
    get_display_alignment : Proc(IMFTimedTextRegion*, MF_TIMED_TEXT_DISPLAY_ALIGNMENT*, HRESULT)
    get_line_height : Proc(IMFTimedTextRegion*, Float64*, MF_TIMED_TEXT_UNIT_TYPE*, HRESULT)
    get_clip_overflow : Proc(IMFTimedTextRegion*, LibC::BOOL*, HRESULT)
    get_padding : Proc(IMFTimedTextRegion*, Float64*, Float64*, Float64*, Float64*, MF_TIMED_TEXT_UNIT_TYPE*, HRESULT)
    get_wrap : Proc(IMFTimedTextRegion*, LibC::BOOL*, HRESULT)
    get_z_index : Proc(IMFTimedTextRegion*, Int32*, HRESULT)
    get_scroll_mode : Proc(IMFTimedTextRegion*, MF_TIMED_TEXT_SCROLL_MODE*, HRESULT)
  end

  IMFTimedTextRegion_GUID = "c8d22afc-bc47-4bdf-9b04-787e49ce3f58"
  IID_IMFTimedTextRegion = LibC::GUID.new(0xc8d22afc_u32, 0xbc47_u16, 0x4bdf_u16, StaticArray[0x9b_u8, 0x4_u8, 0x78_u8, 0x7e_u8, 0x49_u8, 0xce_u8, 0x3f_u8, 0x58_u8])
  struct IMFTimedTextRegion
    lpVtbl : IMFTimedTextRegionVTbl*
  end

  struct IMFTimedTextBinaryVTbl
    query_interface : Proc(IMFTimedTextBinary*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFTimedTextBinary*, UInt32)
    release : Proc(IMFTimedTextBinary*, UInt32)
    get_data : Proc(IMFTimedTextBinary*, UInt8**, UInt32*, HRESULT)
  end

  IMFTimedTextBinary_GUID = "4ae3a412-0545-43c4-bf6f-6b97a5c6c432"
  IID_IMFTimedTextBinary = LibC::GUID.new(0x4ae3a412_u32, 0x545_u16, 0x43c4_u16, StaticArray[0xbf_u8, 0x6f_u8, 0x6b_u8, 0x97_u8, 0xa5_u8, 0xc6_u8, 0xc4_u8, 0x32_u8])
  struct IMFTimedTextBinary
    lpVtbl : IMFTimedTextBinaryVTbl*
  end

  struct IMFTimedTextCueListVTbl
    query_interface : Proc(IMFTimedTextCueList*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFTimedTextCueList*, UInt32)
    release : Proc(IMFTimedTextCueList*, UInt32)
    get_length : Proc(IMFTimedTextCueList*, UInt32)
    get_cue_by_index : Proc(IMFTimedTextCueList*, UInt32, IMFTimedTextCue*, HRESULT)
    get_cue_by_id : Proc(IMFTimedTextCueList*, UInt32, IMFTimedTextCue*, HRESULT)
    get_cue_by_original_id : Proc(IMFTimedTextCueList*, LibC::LPWSTR, IMFTimedTextCue*, HRESULT)
    add_text_cue : Proc(IMFTimedTextCueList*, Float64, Float64, LibC::LPWSTR, IMFTimedTextCue*, HRESULT)
    add_data_cue : Proc(IMFTimedTextCueList*, Float64, Float64, UInt8*, UInt32, IMFTimedTextCue*, HRESULT)
    remove_cue : Proc(IMFTimedTextCueList*, IMFTimedTextCue, HRESULT)
  end

  IMFTimedTextCueList_GUID = "ad128745-211b-40a0-9981-fe65f166d0fd"
  IID_IMFTimedTextCueList = LibC::GUID.new(0xad128745_u32, 0x211b_u16, 0x40a0_u16, StaticArray[0x99_u8, 0x81_u8, 0xfe_u8, 0x65_u8, 0xf1_u8, 0x66_u8, 0xd0_u8, 0xfd_u8])
  struct IMFTimedTextCueList
    lpVtbl : IMFTimedTextCueListVTbl*
  end

  struct IMFTimedTextRubyVTbl
    query_interface : Proc(IMFTimedTextRuby*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFTimedTextRuby*, UInt32)
    release : Proc(IMFTimedTextRuby*, UInt32)
    get_ruby_text : Proc(IMFTimedTextRuby*, LibC::LPWSTR*, HRESULT)
    get_ruby_position : Proc(IMFTimedTextRuby*, MF_TIMED_TEXT_RUBY_POSITION*, HRESULT)
    get_ruby_align : Proc(IMFTimedTextRuby*, MF_TIMED_TEXT_RUBY_ALIGN*, HRESULT)
    get_ruby_reserve : Proc(IMFTimedTextRuby*, MF_TIMED_TEXT_RUBY_RESERVE*, HRESULT)
  end

  IMFTimedTextRuby_GUID = "76c6a6f5-4955-4de5-b27b-14b734cc14b4"
  IID_IMFTimedTextRuby = LibC::GUID.new(0x76c6a6f5_u32, 0x4955_u16, 0x4de5_u16, StaticArray[0xb2_u8, 0x7b_u8, 0x14_u8, 0xb7_u8, 0x34_u8, 0xcc_u8, 0x14_u8, 0xb4_u8])
  struct IMFTimedTextRuby
    lpVtbl : IMFTimedTextRubyVTbl*
  end

  struct IMFTimedTextBoutenVTbl
    query_interface : Proc(IMFTimedTextBouten*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFTimedTextBouten*, UInt32)
    release : Proc(IMFTimedTextBouten*, UInt32)
    get_bouten_type : Proc(IMFTimedTextBouten*, MF_TIMED_TEXT_BOUTEN_TYPE*, HRESULT)
    get_bouten_color : Proc(IMFTimedTextBouten*, MFARGB*, HRESULT)
    get_bouten_position : Proc(IMFTimedTextBouten*, MF_TIMED_TEXT_BOUTEN_POSITION*, HRESULT)
  end

  IMFTimedTextBouten_GUID = "3c5f3e8a-90c0-464e-8136-898d2975f847"
  IID_IMFTimedTextBouten = LibC::GUID.new(0x3c5f3e8a_u32, 0x90c0_u16, 0x464e_u16, StaticArray[0x81_u8, 0x36_u8, 0x89_u8, 0x8d_u8, 0x29_u8, 0x75_u8, 0xf8_u8, 0x47_u8])
  struct IMFTimedTextBouten
    lpVtbl : IMFTimedTextBoutenVTbl*
  end

  struct IMFTimedTextStyle2VTbl
    query_interface : Proc(IMFTimedTextStyle2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFTimedTextStyle2*, UInt32)
    release : Proc(IMFTimedTextStyle2*, UInt32)
    get_ruby : Proc(IMFTimedTextStyle2*, IMFTimedTextRuby*, HRESULT)
    get_bouten : Proc(IMFTimedTextStyle2*, IMFTimedTextBouten*, HRESULT)
    is_text_combined : Proc(IMFTimedTextStyle2*, LibC::BOOL*, HRESULT)
    get_font_angle_in_degrees : Proc(IMFTimedTextStyle2*, Float64*, HRESULT)
  end

  IMFTimedTextStyle2_GUID = "db639199-c809-4c89-bfca-d0bbb9729d6e"
  IID_IMFTimedTextStyle2 = LibC::GUID.new(0xdb639199_u32, 0xc809_u16, 0x4c89_u16, StaticArray[0xbf_u8, 0xca_u8, 0xd0_u8, 0xbb_u8, 0xb9_u8, 0x72_u8, 0x9d_u8, 0x6e_u8])
  struct IMFTimedTextStyle2
    lpVtbl : IMFTimedTextStyle2VTbl*
  end

  struct IMFMediaEngineEMENotifyVTbl
    query_interface : Proc(IMFMediaEngineEMENotify*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaEngineEMENotify*, UInt32)
    release : Proc(IMFMediaEngineEMENotify*, UInt32)
    encrypted : Proc(IMFMediaEngineEMENotify*, UInt8*, UInt32, UInt8*, Void)
    waiting_for_key : Proc(IMFMediaEngineEMENotify*, Void)
  end

  IMFMediaEngineEMENotify_GUID = "9e184d15-cdb7-4f86-b49e-566689f4a601"
  IID_IMFMediaEngineEMENotify = LibC::GUID.new(0x9e184d15_u32, 0xcdb7_u16, 0x4f86_u16, StaticArray[0xb4_u8, 0x9e_u8, 0x56_u8, 0x66_u8, 0x89_u8, 0xf4_u8, 0xa6_u8, 0x1_u8])
  struct IMFMediaEngineEMENotify
    lpVtbl : IMFMediaEngineEMENotifyVTbl*
  end

  struct IMFMediaKeySessionNotify2VTbl
    query_interface : Proc(IMFMediaKeySessionNotify2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaKeySessionNotify2*, UInt32)
    release : Proc(IMFMediaKeySessionNotify2*, UInt32)
    key_message : Proc(IMFMediaKeySessionNotify2*, UInt8*, UInt8*, UInt32, Void)
    key_added : Proc(IMFMediaKeySessionNotify2*, Void)
    key_error : Proc(IMFMediaKeySessionNotify2*, UInt16, UInt32, Void)
    key_message2 : Proc(IMFMediaKeySessionNotify2*, MF_MEDIAKEYSESSION_MESSAGETYPE, UInt8*, UInt8*, UInt32, Void)
    key_status_change : Proc(IMFMediaKeySessionNotify2*, Void)
  end

  IMFMediaKeySessionNotify2_GUID = "c3a9e92a-da88-46b0-a110-6cf953026cb9"
  IID_IMFMediaKeySessionNotify2 = LibC::GUID.new(0xc3a9e92a_u32, 0xda88_u16, 0x46b0_u16, StaticArray[0xa1_u8, 0x10_u8, 0x6c_u8, 0xf9_u8, 0x53_u8, 0x2_u8, 0x6c_u8, 0xb9_u8])
  struct IMFMediaKeySessionNotify2
    lpVtbl : IMFMediaKeySessionNotify2VTbl*
  end

  struct IMFMediaKeySystemAccessVTbl
    query_interface : Proc(IMFMediaKeySystemAccess*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaKeySystemAccess*, UInt32)
    release : Proc(IMFMediaKeySystemAccess*, UInt32)
    create_media_keys : Proc(IMFMediaKeySystemAccess*, IPropertyStore, IMFMediaKeys2*, HRESULT)
    get_supported_configuration : Proc(IMFMediaKeySystemAccess*, IPropertyStore*, HRESULT)
    get_key_system : Proc(IMFMediaKeySystemAccess*, UInt8**, HRESULT)
  end

  IMFMediaKeySystemAccess_GUID = "aec63fda-7a97-4944-b35c-6c6df8085cc3"
  IID_IMFMediaKeySystemAccess = LibC::GUID.new(0xaec63fda_u32, 0x7a97_u16, 0x4944_u16, StaticArray[0xb3_u8, 0x5c_u8, 0x6c_u8, 0x6d_u8, 0xf8_u8, 0x8_u8, 0x5c_u8, 0xc3_u8])
  struct IMFMediaKeySystemAccess
    lpVtbl : IMFMediaKeySystemAccessVTbl*
  end

  struct IMFMediaEngineClassFactory3VTbl
    query_interface : Proc(IMFMediaEngineClassFactory3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaEngineClassFactory3*, UInt32)
    release : Proc(IMFMediaEngineClassFactory3*, UInt32)
    create_media_key_system_access : Proc(IMFMediaEngineClassFactory3*, UInt8*, IPropertyStore*, UInt32, IMFMediaKeySystemAccess*, HRESULT)
  end

  IMFMediaEngineClassFactory3_GUID = "3787614f-65f7-4003-b673-ead8293a0e60"
  IID_IMFMediaEngineClassFactory3 = LibC::GUID.new(0x3787614f_u32, 0x65f7_u16, 0x4003_u16, StaticArray[0xb6_u8, 0x73_u8, 0xea_u8, 0xd8_u8, 0x29_u8, 0x3a_u8, 0xe_u8, 0x60_u8])
  struct IMFMediaEngineClassFactory3
    lpVtbl : IMFMediaEngineClassFactory3VTbl*
  end

  struct IMFMediaKeys2VTbl
    query_interface : Proc(IMFMediaKeys2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaKeys2*, UInt32)
    release : Proc(IMFMediaKeys2*, UInt32)
    create_session : Proc(IMFMediaKeys2*, UInt8*, UInt8*, UInt32, UInt8*, UInt32, IMFMediaKeySessionNotify, IMFMediaKeySession*, HRESULT)
    get_key_system : Proc(IMFMediaKeys2*, UInt8**, HRESULT)
    shutdown : Proc(IMFMediaKeys2*, HRESULT)
    get_suspend_notify : Proc(IMFMediaKeys2*, IMFCdmSuspendNotify*, HRESULT)
    create_session2 : Proc(IMFMediaKeys2*, MF_MEDIAKEYSESSION_TYPE, IMFMediaKeySessionNotify2, IMFMediaKeySession2*, HRESULT)
    set_server_certificate : Proc(IMFMediaKeys2*, UInt8*, UInt32, HRESULT)
    get_dom_exception : Proc(IMFMediaKeys2*, HRESULT, HRESULT*, HRESULT)
  end

  IMFMediaKeys2_GUID = "45892507-ad66-4de2-83a2-acbb13cd8d43"
  IID_IMFMediaKeys2 = LibC::GUID.new(0x45892507_u32, 0xad66_u16, 0x4de2_u16, StaticArray[0x83_u8, 0xa2_u8, 0xac_u8, 0xbb_u8, 0x13_u8, 0xcd_u8, 0x8d_u8, 0x43_u8])
  struct IMFMediaKeys2
    lpVtbl : IMFMediaKeys2VTbl*
  end

  struct IMFMediaKeySession2VTbl
    query_interface : Proc(IMFMediaKeySession2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaKeySession2*, UInt32)
    release : Proc(IMFMediaKeySession2*, UInt32)
    get_error : Proc(IMFMediaKeySession2*, UInt16*, UInt32*, HRESULT)
    get_key_system : Proc(IMFMediaKeySession2*, UInt8**, HRESULT)
    get_session_id : Proc(IMFMediaKeySession2*, UInt8**, HRESULT)
    update : Proc(IMFMediaKeySession2*, UInt8*, UInt32, HRESULT)
    close : Proc(IMFMediaKeySession2*, HRESULT)
    get_key_statuses : Proc(IMFMediaKeySession2*, MFMediaKeyStatus**, UInt32*, HRESULT)
    load : Proc(IMFMediaKeySession2*, UInt8*, LibC::BOOL*, HRESULT)
    generate_request : Proc(IMFMediaKeySession2*, UInt8*, UInt8*, UInt32, HRESULT)
    get_expiration : Proc(IMFMediaKeySession2*, Float64*, HRESULT)
    remove : Proc(IMFMediaKeySession2*, HRESULT)
    shutdown : Proc(IMFMediaKeySession2*, HRESULT)
  end

  IMFMediaKeySession2_GUID = "e9707e05-6d55-4636-b185-3de21210bd75"
  IID_IMFMediaKeySession2 = LibC::GUID.new(0xe9707e05_u32, 0x6d55_u16, 0x4636_u16, StaticArray[0xb1_u8, 0x85_u8, 0x3d_u8, 0xe2_u8, 0x12_u8, 0x10_u8, 0xbd_u8, 0x75_u8])
  struct IMFMediaKeySession2
    lpVtbl : IMFMediaKeySession2VTbl*
  end

  struct IMFMediaEngineClassFactory4VTbl
    query_interface : Proc(IMFMediaEngineClassFactory4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaEngineClassFactory4*, UInt32)
    release : Proc(IMFMediaEngineClassFactory4*, UInt32)
    create_content_decryption_module_factory : Proc(IMFMediaEngineClassFactory4*, LibC::LPWSTR, Guid*, Void**, HRESULT)
  end

  IMFMediaEngineClassFactory4_GUID = "fbe256c1-43cf-4a9b-8cb8-ce8632a34186"
  IID_IMFMediaEngineClassFactory4 = LibC::GUID.new(0xfbe256c1_u32, 0x43cf_u16, 0x4a9b_u16, StaticArray[0x8c_u8, 0xb8_u8, 0xce_u8, 0x86_u8, 0x32_u8, 0xa3_u8, 0x41_u8, 0x86_u8])
  struct IMFMediaEngineClassFactory4
    lpVtbl : IMFMediaEngineClassFactory4VTbl*
  end

  struct IMFDLNASinkInitVTbl
    query_interface : Proc(IMFDLNASinkInit*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFDLNASinkInit*, UInt32)
    release : Proc(IMFDLNASinkInit*, UInt32)
    initialize : Proc(IMFDLNASinkInit*, IMFByteStream, LibC::BOOL, HRESULT)
  end

  IMFDLNASinkInit_GUID = "0c012799-1b61-4c10-bda9-04445be5f561"
  IID_IMFDLNASinkInit = LibC::GUID.new(0xc012799_u32, 0x1b61_u16, 0x4c10_u16, StaticArray[0xbd_u8, 0xa9_u8, 0x4_u8, 0x44_u8, 0x5b_u8, 0xe5_u8, 0xf5_u8, 0x61_u8])
  struct IMFDLNASinkInit
    lpVtbl : IMFDLNASinkInitVTbl*
  end

  struct IMFReadWriteClassFactoryVTbl
    query_interface : Proc(IMFReadWriteClassFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFReadWriteClassFactory*, UInt32)
    release : Proc(IMFReadWriteClassFactory*, UInt32)
    create_instance_from_url : Proc(IMFReadWriteClassFactory*, Guid*, LibC::LPWSTR, IMFAttributes, Guid*, Void**, HRESULT)
    create_instance_from_object : Proc(IMFReadWriteClassFactory*, Guid*, IUnknown, IMFAttributes, Guid*, Void**, HRESULT)
  end

  IMFReadWriteClassFactory_GUID = "e7fe2e12-661c-40da-92f9-4f002ab67627"
  IID_IMFReadWriteClassFactory = LibC::GUID.new(0xe7fe2e12_u32, 0x661c_u16, 0x40da_u16, StaticArray[0x92_u8, 0xf9_u8, 0x4f_u8, 0x0_u8, 0x2a_u8, 0xb6_u8, 0x76_u8, 0x27_u8])
  struct IMFReadWriteClassFactory
    lpVtbl : IMFReadWriteClassFactoryVTbl*
  end

  struct IMFSourceReaderVTbl
    query_interface : Proc(IMFSourceReader*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSourceReader*, UInt32)
    release : Proc(IMFSourceReader*, UInt32)
    get_stream_selection : Proc(IMFSourceReader*, UInt32, LibC::BOOL*, HRESULT)
    set_stream_selection : Proc(IMFSourceReader*, UInt32, LibC::BOOL, HRESULT)
    get_native_media_type : Proc(IMFSourceReader*, UInt32, UInt32, IMFMediaType*, HRESULT)
    get_current_media_type : Proc(IMFSourceReader*, UInt32, IMFMediaType*, HRESULT)
    set_current_media_type : Proc(IMFSourceReader*, UInt32, UInt32*, IMFMediaType, HRESULT)
    set_current_position : Proc(IMFSourceReader*, Guid*, PROPVARIANT*, HRESULT)
    read_sample : Proc(IMFSourceReader*, UInt32, UInt32, UInt32*, UInt32*, Int64*, IMFSample*, HRESULT)
    flush : Proc(IMFSourceReader*, UInt32, HRESULT)
    get_service_for_stream : Proc(IMFSourceReader*, UInt32, Guid*, Guid*, Void**, HRESULT)
    get_presentation_attribute : Proc(IMFSourceReader*, UInt32, Guid*, PROPVARIANT*, HRESULT)
  end

  IMFSourceReader_GUID = "70ae66f2-c809-4e4f-8915-bdcb406b7993"
  IID_IMFSourceReader = LibC::GUID.new(0x70ae66f2_u32, 0xc809_u16, 0x4e4f_u16, StaticArray[0x89_u8, 0x15_u8, 0xbd_u8, 0xcb_u8, 0x40_u8, 0x6b_u8, 0x79_u8, 0x93_u8])
  struct IMFSourceReader
    lpVtbl : IMFSourceReaderVTbl*
  end

  struct IMFSourceReaderExVTbl
    query_interface : Proc(IMFSourceReaderEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSourceReaderEx*, UInt32)
    release : Proc(IMFSourceReaderEx*, UInt32)
    get_stream_selection : Proc(IMFSourceReaderEx*, UInt32, LibC::BOOL*, HRESULT)
    set_stream_selection : Proc(IMFSourceReaderEx*, UInt32, LibC::BOOL, HRESULT)
    get_native_media_type : Proc(IMFSourceReaderEx*, UInt32, UInt32, IMFMediaType*, HRESULT)
    get_current_media_type : Proc(IMFSourceReaderEx*, UInt32, IMFMediaType*, HRESULT)
    set_current_media_type : Proc(IMFSourceReaderEx*, UInt32, UInt32*, IMFMediaType, HRESULT)
    set_current_position : Proc(IMFSourceReaderEx*, Guid*, PROPVARIANT*, HRESULT)
    read_sample : Proc(IMFSourceReaderEx*, UInt32, UInt32, UInt32*, UInt32*, Int64*, IMFSample*, HRESULT)
    flush : Proc(IMFSourceReaderEx*, UInt32, HRESULT)
    get_service_for_stream : Proc(IMFSourceReaderEx*, UInt32, Guid*, Guid*, Void**, HRESULT)
    get_presentation_attribute : Proc(IMFSourceReaderEx*, UInt32, Guid*, PROPVARIANT*, HRESULT)
    set_native_media_type : Proc(IMFSourceReaderEx*, UInt32, IMFMediaType, UInt32*, HRESULT)
    add_transform_for_stream : Proc(IMFSourceReaderEx*, UInt32, IUnknown, HRESULT)
    remove_all_transforms_for_stream : Proc(IMFSourceReaderEx*, UInt32, HRESULT)
    get_transform_for_stream : Proc(IMFSourceReaderEx*, UInt32, UInt32, Guid*, IMFTransform*, HRESULT)
  end

  IMFSourceReaderEx_GUID = "7b981cf0-560e-4116-9875-b099895f23d7"
  IID_IMFSourceReaderEx = LibC::GUID.new(0x7b981cf0_u32, 0x560e_u16, 0x4116_u16, StaticArray[0x98_u8, 0x75_u8, 0xb0_u8, 0x99_u8, 0x89_u8, 0x5f_u8, 0x23_u8, 0xd7_u8])
  struct IMFSourceReaderEx
    lpVtbl : IMFSourceReaderExVTbl*
  end

  struct IMFSourceReaderCallbackVTbl
    query_interface : Proc(IMFSourceReaderCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSourceReaderCallback*, UInt32)
    release : Proc(IMFSourceReaderCallback*, UInt32)
    on_read_sample : Proc(IMFSourceReaderCallback*, HRESULT, UInt32, UInt32, Int64, IMFSample, HRESULT)
    on_flush : Proc(IMFSourceReaderCallback*, UInt32, HRESULT)
    on_event : Proc(IMFSourceReaderCallback*, UInt32, IMFMediaEvent, HRESULT)
  end

  IMFSourceReaderCallback_GUID = "deec8d99-fa1d-4d82-84c2-2c8969944867"
  IID_IMFSourceReaderCallback = LibC::GUID.new(0xdeec8d99_u32, 0xfa1d_u16, 0x4d82_u16, StaticArray[0x84_u8, 0xc2_u8, 0x2c_u8, 0x89_u8, 0x69_u8, 0x94_u8, 0x48_u8, 0x67_u8])
  struct IMFSourceReaderCallback
    lpVtbl : IMFSourceReaderCallbackVTbl*
  end

  struct IMFSourceReaderCallback2VTbl
    query_interface : Proc(IMFSourceReaderCallback2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSourceReaderCallback2*, UInt32)
    release : Proc(IMFSourceReaderCallback2*, UInt32)
    on_read_sample : Proc(IMFSourceReaderCallback2*, HRESULT, UInt32, UInt32, Int64, IMFSample, HRESULT)
    on_flush : Proc(IMFSourceReaderCallback2*, UInt32, HRESULT)
    on_event : Proc(IMFSourceReaderCallback2*, UInt32, IMFMediaEvent, HRESULT)
    on_transform_change : Proc(IMFSourceReaderCallback2*, HRESULT)
    on_stream_error : Proc(IMFSourceReaderCallback2*, UInt32, HRESULT, HRESULT)
  end

  IMFSourceReaderCallback2_GUID = "cf839fe6-8c2a-4dd2-b6ea-c22d6961af05"
  IID_IMFSourceReaderCallback2 = LibC::GUID.new(0xcf839fe6_u32, 0x8c2a_u16, 0x4dd2_u16, StaticArray[0xb6_u8, 0xea_u8, 0xc2_u8, 0x2d_u8, 0x69_u8, 0x61_u8, 0xaf_u8, 0x5_u8])
  struct IMFSourceReaderCallback2
    lpVtbl : IMFSourceReaderCallback2VTbl*
  end

  struct IMFSinkWriterVTbl
    query_interface : Proc(IMFSinkWriter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSinkWriter*, UInt32)
    release : Proc(IMFSinkWriter*, UInt32)
    add_stream : Proc(IMFSinkWriter*, IMFMediaType, UInt32*, HRESULT)
    set_input_media_type : Proc(IMFSinkWriter*, UInt32, IMFMediaType, IMFAttributes, HRESULT)
    begin_writing : Proc(IMFSinkWriter*, HRESULT)
    write_sample : Proc(IMFSinkWriter*, UInt32, IMFSample, HRESULT)
    send_stream_tick : Proc(IMFSinkWriter*, UInt32, Int64, HRESULT)
    place_marker : Proc(IMFSinkWriter*, UInt32, Void*, HRESULT)
    notify_end_of_segment : Proc(IMFSinkWriter*, UInt32, HRESULT)
    flush : Proc(IMFSinkWriter*, UInt32, HRESULT)
    finalize_ : Proc(IMFSinkWriter*, HRESULT)
    get_service_for_stream : Proc(IMFSinkWriter*, UInt32, Guid*, Guid*, Void**, HRESULT)
    get_statistics : Proc(IMFSinkWriter*, UInt32, MF_SINK_WRITER_STATISTICS*, HRESULT)
  end

  IMFSinkWriter_GUID = "3137f1cd-fe5e-4805-a5d8-fb477448cb3d"
  IID_IMFSinkWriter = LibC::GUID.new(0x3137f1cd_u32, 0xfe5e_u16, 0x4805_u16, StaticArray[0xa5_u8, 0xd8_u8, 0xfb_u8, 0x47_u8, 0x74_u8, 0x48_u8, 0xcb_u8, 0x3d_u8])
  struct IMFSinkWriter
    lpVtbl : IMFSinkWriterVTbl*
  end

  struct IMFSinkWriterExVTbl
    query_interface : Proc(IMFSinkWriterEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSinkWriterEx*, UInt32)
    release : Proc(IMFSinkWriterEx*, UInt32)
    add_stream : Proc(IMFSinkWriterEx*, IMFMediaType, UInt32*, HRESULT)
    set_input_media_type : Proc(IMFSinkWriterEx*, UInt32, IMFMediaType, IMFAttributes, HRESULT)
    begin_writing : Proc(IMFSinkWriterEx*, HRESULT)
    write_sample : Proc(IMFSinkWriterEx*, UInt32, IMFSample, HRESULT)
    send_stream_tick : Proc(IMFSinkWriterEx*, UInt32, Int64, HRESULT)
    place_marker : Proc(IMFSinkWriterEx*, UInt32, Void*, HRESULT)
    notify_end_of_segment : Proc(IMFSinkWriterEx*, UInt32, HRESULT)
    flush : Proc(IMFSinkWriterEx*, UInt32, HRESULT)
    finalize_ : Proc(IMFSinkWriterEx*, HRESULT)
    get_service_for_stream : Proc(IMFSinkWriterEx*, UInt32, Guid*, Guid*, Void**, HRESULT)
    get_statistics : Proc(IMFSinkWriterEx*, UInt32, MF_SINK_WRITER_STATISTICS*, HRESULT)
    get_transform_for_stream : Proc(IMFSinkWriterEx*, UInt32, UInt32, Guid*, IMFTransform*, HRESULT)
  end

  IMFSinkWriterEx_GUID = "588d72ab-5bc1-496a-8714-b70617141b25"
  IID_IMFSinkWriterEx = LibC::GUID.new(0x588d72ab_u32, 0x5bc1_u16, 0x496a_u16, StaticArray[0x87_u8, 0x14_u8, 0xb7_u8, 0x6_u8, 0x17_u8, 0x14_u8, 0x1b_u8, 0x25_u8])
  struct IMFSinkWriterEx
    lpVtbl : IMFSinkWriterExVTbl*
  end

  struct IMFSinkWriterEncoderConfigVTbl
    query_interface : Proc(IMFSinkWriterEncoderConfig*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSinkWriterEncoderConfig*, UInt32)
    release : Proc(IMFSinkWriterEncoderConfig*, UInt32)
    set_target_media_type : Proc(IMFSinkWriterEncoderConfig*, UInt32, IMFMediaType, IMFAttributes, HRESULT)
    place_encoding_parameters : Proc(IMFSinkWriterEncoderConfig*, UInt32, IMFAttributes, HRESULT)
  end

  IMFSinkWriterEncoderConfig_GUID = "17c3779e-3cde-4ede-8c60-3899f5f53ad6"
  IID_IMFSinkWriterEncoderConfig = LibC::GUID.new(0x17c3779e_u32, 0x3cde_u16, 0x4ede_u16, StaticArray[0x8c_u8, 0x60_u8, 0x38_u8, 0x99_u8, 0xf5_u8, 0xf5_u8, 0x3a_u8, 0xd6_u8])
  struct IMFSinkWriterEncoderConfig
    lpVtbl : IMFSinkWriterEncoderConfigVTbl*
  end

  struct IMFSinkWriterCallbackVTbl
    query_interface : Proc(IMFSinkWriterCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSinkWriterCallback*, UInt32)
    release : Proc(IMFSinkWriterCallback*, UInt32)
    on_finalize : Proc(IMFSinkWriterCallback*, HRESULT, HRESULT)
    on_marker : Proc(IMFSinkWriterCallback*, UInt32, Void*, HRESULT)
  end

  IMFSinkWriterCallback_GUID = "666f76de-33d2-41b9-a458-29ed0a972c58"
  IID_IMFSinkWriterCallback = LibC::GUID.new(0x666f76de_u32, 0x33d2_u16, 0x41b9_u16, StaticArray[0xa4_u8, 0x58_u8, 0x29_u8, 0xed_u8, 0xa_u8, 0x97_u8, 0x2c_u8, 0x58_u8])
  struct IMFSinkWriterCallback
    lpVtbl : IMFSinkWriterCallbackVTbl*
  end

  struct IMFSinkWriterCallback2VTbl
    query_interface : Proc(IMFSinkWriterCallback2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSinkWriterCallback2*, UInt32)
    release : Proc(IMFSinkWriterCallback2*, UInt32)
    on_finalize : Proc(IMFSinkWriterCallback2*, HRESULT, HRESULT)
    on_marker : Proc(IMFSinkWriterCallback2*, UInt32, Void*, HRESULT)
    on_transform_change : Proc(IMFSinkWriterCallback2*, HRESULT)
    on_stream_error : Proc(IMFSinkWriterCallback2*, UInt32, HRESULT, HRESULT)
  end

  IMFSinkWriterCallback2_GUID = "2456bd58-c067-4513-84fe-8d0c88ffdc61"
  IID_IMFSinkWriterCallback2 = LibC::GUID.new(0x2456bd58_u32, 0xc067_u16, 0x4513_u16, StaticArray[0x84_u8, 0xfe_u8, 0x8d_u8, 0xc_u8, 0x88_u8, 0xff_u8, 0xdc_u8, 0x61_u8])
  struct IMFSinkWriterCallback2
    lpVtbl : IMFSinkWriterCallback2VTbl*
  end

  struct IMFVideoPositionMapperVTbl
    query_interface : Proc(IMFVideoPositionMapper*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFVideoPositionMapper*, UInt32)
    release : Proc(IMFVideoPositionMapper*, UInt32)
    map_output_coordinate_to_input_stream : Proc(IMFVideoPositionMapper*, Float32, Float32, UInt32, UInt32, Float32*, Float32*, HRESULT)
  end

  IMFVideoPositionMapper_GUID = "1f6a9f17-e70b-4e24-8ae4-0b2c3ba7a4ae"
  IID_IMFVideoPositionMapper = LibC::GUID.new(0x1f6a9f17_u32, 0xe70b_u16, 0x4e24_u16, StaticArray[0x8a_u8, 0xe4_u8, 0xb_u8, 0x2c_u8, 0x3b_u8, 0xa7_u8, 0xa4_u8, 0xae_u8])
  struct IMFVideoPositionMapper
    lpVtbl : IMFVideoPositionMapperVTbl*
  end

  struct IMFVideoDeviceIDVTbl
    query_interface : Proc(IMFVideoDeviceID*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFVideoDeviceID*, UInt32)
    release : Proc(IMFVideoDeviceID*, UInt32)
    get_device_id : Proc(IMFVideoDeviceID*, Guid*, HRESULT)
  end

  IMFVideoDeviceID_GUID = "a38d9567-5a9c-4f3c-b293-8eb415b279ba"
  IID_IMFVideoDeviceID = LibC::GUID.new(0xa38d9567_u32, 0x5a9c_u16, 0x4f3c_u16, StaticArray[0xb2_u8, 0x93_u8, 0x8e_u8, 0xb4_u8, 0x15_u8, 0xb2_u8, 0x79_u8, 0xba_u8])
  struct IMFVideoDeviceID
    lpVtbl : IMFVideoDeviceIDVTbl*
  end

  struct IMFVideoDisplayControlVTbl
    query_interface : Proc(IMFVideoDisplayControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFVideoDisplayControl*, UInt32)
    release : Proc(IMFVideoDisplayControl*, UInt32)
    get_native_video_size : Proc(IMFVideoDisplayControl*, SIZE*, SIZE*, HRESULT)
    get_ideal_video_size : Proc(IMFVideoDisplayControl*, SIZE*, SIZE*, HRESULT)
    set_video_position : Proc(IMFVideoDisplayControl*, MFVideoNormalizedRect*, RECT*, HRESULT)
    get_video_position : Proc(IMFVideoDisplayControl*, MFVideoNormalizedRect*, RECT*, HRESULT)
    set_aspect_ratio_mode : Proc(IMFVideoDisplayControl*, UInt32, HRESULT)
    get_aspect_ratio_mode : Proc(IMFVideoDisplayControl*, UInt32*, HRESULT)
    set_video_window : Proc(IMFVideoDisplayControl*, LibC::HANDLE, HRESULT)
    get_video_window : Proc(IMFVideoDisplayControl*, HANDLE*, HRESULT)
    repaint_video : Proc(IMFVideoDisplayControl*, HRESULT)
    get_current_image : Proc(IMFVideoDisplayControl*, BITMAPINFOHEADER*, UInt8**, UInt32*, Int64*, HRESULT)
    set_border_color : Proc(IMFVideoDisplayControl*, UInt32, HRESULT)
    get_border_color : Proc(IMFVideoDisplayControl*, UInt32*, HRESULT)
    set_rendering_prefs : Proc(IMFVideoDisplayControl*, UInt32, HRESULT)
    get_rendering_prefs : Proc(IMFVideoDisplayControl*, UInt32*, HRESULT)
    set_fullscreen : Proc(IMFVideoDisplayControl*, LibC::BOOL, HRESULT)
    get_fullscreen : Proc(IMFVideoDisplayControl*, LibC::BOOL*, HRESULT)
  end

  IMFVideoDisplayControl_GUID = "a490b1e4-ab84-4d31-a1b2-181e03b1077a"
  IID_IMFVideoDisplayControl = LibC::GUID.new(0xa490b1e4_u32, 0xab84_u16, 0x4d31_u16, StaticArray[0xa1_u8, 0xb2_u8, 0x18_u8, 0x1e_u8, 0x3_u8, 0xb1_u8, 0x7_u8, 0x7a_u8])
  struct IMFVideoDisplayControl
    lpVtbl : IMFVideoDisplayControlVTbl*
  end

  struct IMFVideoPresenterVTbl
    query_interface : Proc(IMFVideoPresenter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFVideoPresenter*, UInt32)
    release : Proc(IMFVideoPresenter*, UInt32)
    on_clock_start : Proc(IMFVideoPresenter*, Int64, Int64, HRESULT)
    on_clock_stop : Proc(IMFVideoPresenter*, Int64, HRESULT)
    on_clock_pause : Proc(IMFVideoPresenter*, Int64, HRESULT)
    on_clock_restart : Proc(IMFVideoPresenter*, Int64, HRESULT)
    on_clock_set_rate : Proc(IMFVideoPresenter*, Int64, Float32, HRESULT)
    process_message : Proc(IMFVideoPresenter*, MFVP_MESSAGE_TYPE, LibC::UINT_PTR, HRESULT)
    get_current_media_type : Proc(IMFVideoPresenter*, IMFVideoMediaType*, HRESULT)
  end

  IMFVideoPresenter_GUID = "29aff080-182a-4a5d-af3b-448f3a6346cb"
  IID_IMFVideoPresenter = LibC::GUID.new(0x29aff080_u32, 0x182a_u16, 0x4a5d_u16, StaticArray[0xaf_u8, 0x3b_u8, 0x44_u8, 0x8f_u8, 0x3a_u8, 0x63_u8, 0x46_u8, 0xcb_u8])
  struct IMFVideoPresenter
    lpVtbl : IMFVideoPresenterVTbl*
  end

  struct IMFDesiredSampleVTbl
    query_interface : Proc(IMFDesiredSample*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFDesiredSample*, UInt32)
    release : Proc(IMFDesiredSample*, UInt32)
    get_desired_sample_time_and_duration : Proc(IMFDesiredSample*, Int64*, Int64*, HRESULT)
    set_desired_sample_time_and_duration : Proc(IMFDesiredSample*, Int64, Int64, Void)
    clear : Proc(IMFDesiredSample*, Void)
  end

  IMFDesiredSample_GUID = "56c294d0-753e-4260-8d61-a3d8820b1d54"
  IID_IMFDesiredSample = LibC::GUID.new(0x56c294d0_u32, 0x753e_u16, 0x4260_u16, StaticArray[0x8d_u8, 0x61_u8, 0xa3_u8, 0xd8_u8, 0x82_u8, 0xb_u8, 0x1d_u8, 0x54_u8])
  struct IMFDesiredSample
    lpVtbl : IMFDesiredSampleVTbl*
  end

  struct IMFVideoMixerControlVTbl
    query_interface : Proc(IMFVideoMixerControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFVideoMixerControl*, UInt32)
    release : Proc(IMFVideoMixerControl*, UInt32)
    set_stream_z_order : Proc(IMFVideoMixerControl*, UInt32, UInt32, HRESULT)
    get_stream_z_order : Proc(IMFVideoMixerControl*, UInt32, UInt32*, HRESULT)
    set_stream_output_rect : Proc(IMFVideoMixerControl*, UInt32, MFVideoNormalizedRect*, HRESULT)
    get_stream_output_rect : Proc(IMFVideoMixerControl*, UInt32, MFVideoNormalizedRect*, HRESULT)
  end

  IMFVideoMixerControl_GUID = "a5c6c53f-c202-4aa5-9695-175ba8c508a5"
  IID_IMFVideoMixerControl = LibC::GUID.new(0xa5c6c53f_u32, 0xc202_u16, 0x4aa5_u16, StaticArray[0x96_u8, 0x95_u8, 0x17_u8, 0x5b_u8, 0xa8_u8, 0xc5_u8, 0x8_u8, 0xa5_u8])
  struct IMFVideoMixerControl
    lpVtbl : IMFVideoMixerControlVTbl*
  end

  struct IMFVideoMixerControl2VTbl
    query_interface : Proc(IMFVideoMixerControl2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFVideoMixerControl2*, UInt32)
    release : Proc(IMFVideoMixerControl2*, UInt32)
    set_stream_z_order : Proc(IMFVideoMixerControl2*, UInt32, UInt32, HRESULT)
    get_stream_z_order : Proc(IMFVideoMixerControl2*, UInt32, UInt32*, HRESULT)
    set_stream_output_rect : Proc(IMFVideoMixerControl2*, UInt32, MFVideoNormalizedRect*, HRESULT)
    get_stream_output_rect : Proc(IMFVideoMixerControl2*, UInt32, MFVideoNormalizedRect*, HRESULT)
    set_mixing_prefs : Proc(IMFVideoMixerControl2*, UInt32, HRESULT)
    get_mixing_prefs : Proc(IMFVideoMixerControl2*, UInt32*, HRESULT)
  end

  IMFVideoMixerControl2_GUID = "8459616d-966e-4930-b658-54fa7e5a16d3"
  IID_IMFVideoMixerControl2 = LibC::GUID.new(0x8459616d_u32, 0x966e_u16, 0x4930_u16, StaticArray[0xb6_u8, 0x58_u8, 0x54_u8, 0xfa_u8, 0x7e_u8, 0x5a_u8, 0x16_u8, 0xd3_u8])
  struct IMFVideoMixerControl2
    lpVtbl : IMFVideoMixerControl2VTbl*
  end

  struct IMFVideoRendererVTbl
    query_interface : Proc(IMFVideoRenderer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFVideoRenderer*, UInt32)
    release : Proc(IMFVideoRenderer*, UInt32)
    initialize_renderer : Proc(IMFVideoRenderer*, IMFTransform, IMFVideoPresenter, HRESULT)
  end

  IMFVideoRenderer_GUID = "dfdfd197-a9ca-43d8-b341-6af3503792cd"
  IID_IMFVideoRenderer = LibC::GUID.new(0xdfdfd197_u32, 0xa9ca_u16, 0x43d8_u16, StaticArray[0xb3_u8, 0x41_u8, 0x6a_u8, 0xf3_u8, 0x50_u8, 0x37_u8, 0x92_u8, 0xcd_u8])
  struct IMFVideoRenderer
    lpVtbl : IMFVideoRendererVTbl*
  end

  struct IEVRFilterConfigVTbl
    query_interface : Proc(IEVRFilterConfig*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEVRFilterConfig*, UInt32)
    release : Proc(IEVRFilterConfig*, UInt32)
    set_number_of_streams : Proc(IEVRFilterConfig*, UInt32, HRESULT)
    get_number_of_streams : Proc(IEVRFilterConfig*, UInt32*, HRESULT)
  end

  IEVRFilterConfig_GUID = "83e91e85-82c1-4ea7-801d-85dc50b75086"
  IID_IEVRFilterConfig = LibC::GUID.new(0x83e91e85_u32, 0x82c1_u16, 0x4ea7_u16, StaticArray[0x80_u8, 0x1d_u8, 0x85_u8, 0xdc_u8, 0x50_u8, 0xb7_u8, 0x50_u8, 0x86_u8])
  struct IEVRFilterConfig
    lpVtbl : IEVRFilterConfigVTbl*
  end

  struct IEVRFilterConfigExVTbl
    query_interface : Proc(IEVRFilterConfigEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEVRFilterConfigEx*, UInt32)
    release : Proc(IEVRFilterConfigEx*, UInt32)
    set_number_of_streams : Proc(IEVRFilterConfigEx*, UInt32, HRESULT)
    get_number_of_streams : Proc(IEVRFilterConfigEx*, UInt32*, HRESULT)
    set_config_prefs : Proc(IEVRFilterConfigEx*, UInt32, HRESULT)
    get_config_prefs : Proc(IEVRFilterConfigEx*, UInt32*, HRESULT)
  end

  IEVRFilterConfigEx_GUID = "aea36028-796d-454f-beee-b48071e24304"
  IID_IEVRFilterConfigEx = LibC::GUID.new(0xaea36028_u32, 0x796d_u16, 0x454f_u16, StaticArray[0xbe_u8, 0xee_u8, 0xb4_u8, 0x80_u8, 0x71_u8, 0xe2_u8, 0x43_u8, 0x4_u8])
  struct IEVRFilterConfigEx
    lpVtbl : IEVRFilterConfigExVTbl*
  end

  struct IMFTopologyServiceLookupVTbl
    query_interface : Proc(IMFTopologyServiceLookup*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFTopologyServiceLookup*, UInt32)
    release : Proc(IMFTopologyServiceLookup*, UInt32)
    lookup_service : Proc(IMFTopologyServiceLookup*, MF_SERVICE_LOOKUP_TYPE, UInt32, Guid*, Guid*, Void**, UInt32*, HRESULT)
  end

  IMFTopologyServiceLookup_GUID = "fa993889-4383-415a-a930-dd472a8cf6f7"
  IID_IMFTopologyServiceLookup = LibC::GUID.new(0xfa993889_u32, 0x4383_u16, 0x415a_u16, StaticArray[0xa9_u8, 0x30_u8, 0xdd_u8, 0x47_u8, 0x2a_u8, 0x8c_u8, 0xf6_u8, 0xf7_u8])
  struct IMFTopologyServiceLookup
    lpVtbl : IMFTopologyServiceLookupVTbl*
  end

  struct IMFTopologyServiceLookupClientVTbl
    query_interface : Proc(IMFTopologyServiceLookupClient*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFTopologyServiceLookupClient*, UInt32)
    release : Proc(IMFTopologyServiceLookupClient*, UInt32)
    init_service_pointers : Proc(IMFTopologyServiceLookupClient*, IMFTopologyServiceLookup, HRESULT)
    release_service_pointers : Proc(IMFTopologyServiceLookupClient*, HRESULT)
  end

  IMFTopologyServiceLookupClient_GUID = "fa99388a-4383-415a-a930-dd472a8cf6f7"
  IID_IMFTopologyServiceLookupClient = LibC::GUID.new(0xfa99388a_u32, 0x4383_u16, 0x415a_u16, StaticArray[0xa9_u8, 0x30_u8, 0xdd_u8, 0x47_u8, 0x2a_u8, 0x8c_u8, 0xf6_u8, 0xf7_u8])
  struct IMFTopologyServiceLookupClient
    lpVtbl : IMFTopologyServiceLookupClientVTbl*
  end

  struct IEVRTrustedVideoPluginVTbl
    query_interface : Proc(IEVRTrustedVideoPlugin*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEVRTrustedVideoPlugin*, UInt32)
    release : Proc(IEVRTrustedVideoPlugin*, UInt32)
    is_in_trusted_video_mode : Proc(IEVRTrustedVideoPlugin*, LibC::BOOL*, HRESULT)
    can_constrict : Proc(IEVRTrustedVideoPlugin*, LibC::BOOL*, HRESULT)
    set_constriction : Proc(IEVRTrustedVideoPlugin*, UInt32, HRESULT)
    disable_image_export : Proc(IEVRTrustedVideoPlugin*, LibC::BOOL, HRESULT)
  end

  IEVRTrustedVideoPlugin_GUID = "83a4ce40-7710-494b-a893-a472049af630"
  IID_IEVRTrustedVideoPlugin = LibC::GUID.new(0x83a4ce40_u32, 0x7710_u16, 0x494b_u16, StaticArray[0xa8_u8, 0x93_u8, 0xa4_u8, 0x72_u8, 0x4_u8, 0x9a_u8, 0xf6_u8, 0x30_u8])
  struct IEVRTrustedVideoPlugin
    lpVtbl : IEVRTrustedVideoPluginVTbl*
  end

  struct IMFPMediaPlayerVTbl
    query_interface : Proc(IMFPMediaPlayer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFPMediaPlayer*, UInt32)
    release : Proc(IMFPMediaPlayer*, UInt32)
    play : Proc(IMFPMediaPlayer*, HRESULT)
    pause : Proc(IMFPMediaPlayer*, HRESULT)
    stop : Proc(IMFPMediaPlayer*, HRESULT)
    frame_step : Proc(IMFPMediaPlayer*, HRESULT)
    set_position : Proc(IMFPMediaPlayer*, Guid*, PROPVARIANT*, HRESULT)
    get_position : Proc(IMFPMediaPlayer*, Guid*, PROPVARIANT*, HRESULT)
    get_duration : Proc(IMFPMediaPlayer*, Guid*, PROPVARIANT*, HRESULT)
    set_rate : Proc(IMFPMediaPlayer*, Float32, HRESULT)
    get_rate : Proc(IMFPMediaPlayer*, Float32*, HRESULT)
    get_supported_rates : Proc(IMFPMediaPlayer*, LibC::BOOL, Float32*, Float32*, HRESULT)
    get_state : Proc(IMFPMediaPlayer*, MFP_MEDIAPLAYER_STATE*, HRESULT)
    create_media_item_from_url : Proc(IMFPMediaPlayer*, LibC::LPWSTR, LibC::BOOL, LibC::UINT_PTR, IMFPMediaItem*, HRESULT)
    create_media_item_from_object : Proc(IMFPMediaPlayer*, IUnknown, LibC::BOOL, LibC::UINT_PTR, IMFPMediaItem*, HRESULT)
    set_media_item : Proc(IMFPMediaPlayer*, IMFPMediaItem, HRESULT)
    clear_media_item : Proc(IMFPMediaPlayer*, HRESULT)
    get_media_item : Proc(IMFPMediaPlayer*, IMFPMediaItem*, HRESULT)
    get_volume : Proc(IMFPMediaPlayer*, Float32*, HRESULT)
    set_volume : Proc(IMFPMediaPlayer*, Float32, HRESULT)
    get_balance : Proc(IMFPMediaPlayer*, Float32*, HRESULT)
    set_balance : Proc(IMFPMediaPlayer*, Float32, HRESULT)
    get_mute : Proc(IMFPMediaPlayer*, LibC::BOOL*, HRESULT)
    set_mute : Proc(IMFPMediaPlayer*, LibC::BOOL, HRESULT)
    get_native_video_size : Proc(IMFPMediaPlayer*, SIZE*, SIZE*, HRESULT)
    get_ideal_video_size : Proc(IMFPMediaPlayer*, SIZE*, SIZE*, HRESULT)
    set_video_source_rect : Proc(IMFPMediaPlayer*, MFVideoNormalizedRect*, HRESULT)
    get_video_source_rect : Proc(IMFPMediaPlayer*, MFVideoNormalizedRect*, HRESULT)
    set_aspect_ratio_mode : Proc(IMFPMediaPlayer*, UInt32, HRESULT)
    get_aspect_ratio_mode : Proc(IMFPMediaPlayer*, UInt32*, HRESULT)
    get_video_window : Proc(IMFPMediaPlayer*, HANDLE*, HRESULT)
    update_video : Proc(IMFPMediaPlayer*, HRESULT)
    set_border_color : Proc(IMFPMediaPlayer*, UInt32, HRESULT)
    get_border_color : Proc(IMFPMediaPlayer*, UInt32*, HRESULT)
    insert_effect : Proc(IMFPMediaPlayer*, IUnknown, LibC::BOOL, HRESULT)
    remove_effect : Proc(IMFPMediaPlayer*, IUnknown, HRESULT)
    remove_all_effects : Proc(IMFPMediaPlayer*, HRESULT)
    shutdown : Proc(IMFPMediaPlayer*, HRESULT)
  end

  IMFPMediaPlayer_GUID = "a714590a-58af-430a-85bf-44f5ec838d85"
  IID_IMFPMediaPlayer = LibC::GUID.new(0xa714590a_u32, 0x58af_u16, 0x430a_u16, StaticArray[0x85_u8, 0xbf_u8, 0x44_u8, 0xf5_u8, 0xec_u8, 0x83_u8, 0x8d_u8, 0x85_u8])
  struct IMFPMediaPlayer
    lpVtbl : IMFPMediaPlayerVTbl*
  end

  struct IMFPMediaItemVTbl
    query_interface : Proc(IMFPMediaItem*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFPMediaItem*, UInt32)
    release : Proc(IMFPMediaItem*, UInt32)
    get_media_player : Proc(IMFPMediaItem*, IMFPMediaPlayer*, HRESULT)
    get_url : Proc(IMFPMediaItem*, LibC::LPWSTR*, HRESULT)
    get_object : Proc(IMFPMediaItem*, IUnknown*, HRESULT)
    get_user_data : Proc(IMFPMediaItem*, LibC::UINT_PTR*, HRESULT)
    set_user_data : Proc(IMFPMediaItem*, LibC::UINT_PTR, HRESULT)
    get_start_stop_position : Proc(IMFPMediaItem*, Guid*, PROPVARIANT*, Guid*, PROPVARIANT*, HRESULT)
    set_start_stop_position : Proc(IMFPMediaItem*, Guid*, PROPVARIANT*, Guid*, PROPVARIANT*, HRESULT)
    has_video : Proc(IMFPMediaItem*, LibC::BOOL*, LibC::BOOL*, HRESULT)
    has_audio : Proc(IMFPMediaItem*, LibC::BOOL*, LibC::BOOL*, HRESULT)
    is_protected : Proc(IMFPMediaItem*, LibC::BOOL*, HRESULT)
    get_duration : Proc(IMFPMediaItem*, Guid*, PROPVARIANT*, HRESULT)
    get_number_of_streams : Proc(IMFPMediaItem*, UInt32*, HRESULT)
    get_stream_selection : Proc(IMFPMediaItem*, UInt32, LibC::BOOL*, HRESULT)
    set_stream_selection : Proc(IMFPMediaItem*, UInt32, LibC::BOOL, HRESULT)
    get_stream_attribute : Proc(IMFPMediaItem*, UInt32, Guid*, PROPVARIANT*, HRESULT)
    get_presentation_attribute : Proc(IMFPMediaItem*, Guid*, PROPVARIANT*, HRESULT)
    get_characteristics : Proc(IMFPMediaItem*, UInt32*, HRESULT)
    set_stream_sink : Proc(IMFPMediaItem*, UInt32, IUnknown, HRESULT)
    get_metadata : Proc(IMFPMediaItem*, IPropertyStore*, HRESULT)
  end

  IMFPMediaItem_GUID = "90eb3e6b-ecbf-45cc-b1da-c6fe3ea70d57"
  IID_IMFPMediaItem = LibC::GUID.new(0x90eb3e6b_u32, 0xecbf_u16, 0x45cc_u16, StaticArray[0xb1_u8, 0xda_u8, 0xc6_u8, 0xfe_u8, 0x3e_u8, 0xa7_u8, 0xd_u8, 0x57_u8])
  struct IMFPMediaItem
    lpVtbl : IMFPMediaItemVTbl*
  end

  struct IMFPMediaPlayerCallbackVTbl
    query_interface : Proc(IMFPMediaPlayerCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFPMediaPlayerCallback*, UInt32)
    release : Proc(IMFPMediaPlayerCallback*, UInt32)
    on_media_player_event : Proc(IMFPMediaPlayerCallback*, MFP_EVENT_HEADER*, Void)
  end

  IMFPMediaPlayerCallback_GUID = "766c8ffb-5fdb-4fea-a28d-b912996f51bd"
  IID_IMFPMediaPlayerCallback = LibC::GUID.new(0x766c8ffb_u32, 0x5fdb_u16, 0x4fea_u16, StaticArray[0xa2_u8, 0x8d_u8, 0xb9_u8, 0x12_u8, 0x99_u8, 0x6f_u8, 0x51_u8, 0xbd_u8])
  struct IMFPMediaPlayerCallback
    lpVtbl : IMFPMediaPlayerCallbackVTbl*
  end

  struct IMFSharingEngineClassFactoryVTbl
    query_interface : Proc(IMFSharingEngineClassFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSharingEngineClassFactory*, UInt32)
    release : Proc(IMFSharingEngineClassFactory*, UInt32)
    create_instance : Proc(IMFSharingEngineClassFactory*, UInt32, IMFAttributes, IUnknown*, HRESULT)
  end

  IMFSharingEngineClassFactory_GUID = "2ba61f92-8305-413b-9733-faf15f259384"
  IID_IMFSharingEngineClassFactory = LibC::GUID.new(0x2ba61f92_u32, 0x8305_u16, 0x413b_u16, StaticArray[0x97_u8, 0x33_u8, 0xfa_u8, 0xf1_u8, 0x5f_u8, 0x25_u8, 0x93_u8, 0x84_u8])
  struct IMFSharingEngineClassFactory
    lpVtbl : IMFSharingEngineClassFactoryVTbl*
  end

  struct IMFMediaSharingEngineVTbl
    query_interface : Proc(IMFMediaSharingEngine*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaSharingEngine*, UInt32)
    release : Proc(IMFMediaSharingEngine*, UInt32)
    get_error : Proc(IMFMediaSharingEngine*, IMFMediaError*, HRESULT)
    set_error_code : Proc(IMFMediaSharingEngine*, MF_MEDIA_ENGINE_ERR, HRESULT)
    set_source_elements : Proc(IMFMediaSharingEngine*, IMFMediaEngineSrcElements, HRESULT)
    set_source : Proc(IMFMediaSharingEngine*, UInt8*, HRESULT)
    get_current_source : Proc(IMFMediaSharingEngine*, UInt8**, HRESULT)
    get_network_state : Proc(IMFMediaSharingEngine*, UInt16)
    get_preload : Proc(IMFMediaSharingEngine*, MF_MEDIA_ENGINE_PRELOAD)
    set_preload : Proc(IMFMediaSharingEngine*, MF_MEDIA_ENGINE_PRELOAD, HRESULT)
    get_buffered : Proc(IMFMediaSharingEngine*, IMFMediaTimeRange*, HRESULT)
    load : Proc(IMFMediaSharingEngine*, HRESULT)
    can_play_type : Proc(IMFMediaSharingEngine*, UInt8*, MF_MEDIA_ENGINE_CANPLAY*, HRESULT)
    get_ready_state : Proc(IMFMediaSharingEngine*, UInt16)
    is_seeking : Proc(IMFMediaSharingEngine*, LibC::BOOL)
    get_current_time : Proc(IMFMediaSharingEngine*, Float64)
    set_current_time : Proc(IMFMediaSharingEngine*, Float64, HRESULT)
    get_start_time : Proc(IMFMediaSharingEngine*, Float64)
    get_duration : Proc(IMFMediaSharingEngine*, Float64)
    is_paused : Proc(IMFMediaSharingEngine*, LibC::BOOL)
    get_default_playback_rate : Proc(IMFMediaSharingEngine*, Float64)
    set_default_playback_rate : Proc(IMFMediaSharingEngine*, Float64, HRESULT)
    get_playback_rate : Proc(IMFMediaSharingEngine*, Float64)
    set_playback_rate : Proc(IMFMediaSharingEngine*, Float64, HRESULT)
    get_played : Proc(IMFMediaSharingEngine*, IMFMediaTimeRange*, HRESULT)
    get_seekable : Proc(IMFMediaSharingEngine*, IMFMediaTimeRange*, HRESULT)
    is_ended : Proc(IMFMediaSharingEngine*, LibC::BOOL)
    get_auto_play : Proc(IMFMediaSharingEngine*, LibC::BOOL)
    set_auto_play : Proc(IMFMediaSharingEngine*, LibC::BOOL, HRESULT)
    get_loop : Proc(IMFMediaSharingEngine*, LibC::BOOL)
    set_loop : Proc(IMFMediaSharingEngine*, LibC::BOOL, HRESULT)
    play : Proc(IMFMediaSharingEngine*, HRESULT)
    pause : Proc(IMFMediaSharingEngine*, HRESULT)
    get_muted : Proc(IMFMediaSharingEngine*, LibC::BOOL)
    set_muted : Proc(IMFMediaSharingEngine*, LibC::BOOL, HRESULT)
    get_volume : Proc(IMFMediaSharingEngine*, Float64)
    set_volume : Proc(IMFMediaSharingEngine*, Float64, HRESULT)
    has_video : Proc(IMFMediaSharingEngine*, LibC::BOOL)
    has_audio : Proc(IMFMediaSharingEngine*, LibC::BOOL)
    get_native_video_size : Proc(IMFMediaSharingEngine*, UInt32*, UInt32*, HRESULT)
    get_video_aspect_ratio : Proc(IMFMediaSharingEngine*, UInt32*, UInt32*, HRESULT)
    shutdown : Proc(IMFMediaSharingEngine*, HRESULT)
    transfer_video_frame : Proc(IMFMediaSharingEngine*, IUnknown, MFVideoNormalizedRect*, RECT*, MFARGB*, HRESULT)
    on_video_stream_tick : Proc(IMFMediaSharingEngine*, Int64*, HRESULT)
    get_device : Proc(IMFMediaSharingEngine*, DEVICE_INFO*, HRESULT)
  end

  IMFMediaSharingEngine_GUID = "8d3ce1bf-2367-40e0-9eee-40d377cc1b46"
  IID_IMFMediaSharingEngine = LibC::GUID.new(0x8d3ce1bf_u32, 0x2367_u16, 0x40e0_u16, StaticArray[0x9e_u8, 0xee_u8, 0x40_u8, 0xd3_u8, 0x77_u8, 0xcc_u8, 0x1b_u8, 0x46_u8])
  struct IMFMediaSharingEngine
    lpVtbl : IMFMediaSharingEngineVTbl*
  end

  struct IMFMediaSharingEngineClassFactoryVTbl
    query_interface : Proc(IMFMediaSharingEngineClassFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFMediaSharingEngineClassFactory*, UInt32)
    release : Proc(IMFMediaSharingEngineClassFactory*, UInt32)
    create_instance : Proc(IMFMediaSharingEngineClassFactory*, UInt32, IMFAttributes, IMFMediaSharingEngine*, HRESULT)
  end

  IMFMediaSharingEngineClassFactory_GUID = "524d2bc4-b2b1-4fe5-8fac-fa4e4512b4e0"
  IID_IMFMediaSharingEngineClassFactory = LibC::GUID.new(0x524d2bc4_u32, 0xb2b1_u16, 0x4fe5_u16, StaticArray[0x8f_u8, 0xac_u8, 0xfa_u8, 0x4e_u8, 0x45_u8, 0x12_u8, 0xb4_u8, 0xe0_u8])
  struct IMFMediaSharingEngineClassFactory
    lpVtbl : IMFMediaSharingEngineClassFactoryVTbl*
  end

  struct IMFImageSharingEngineVTbl
    query_interface : Proc(IMFImageSharingEngine*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFImageSharingEngine*, UInt32)
    release : Proc(IMFImageSharingEngine*, UInt32)
    set_source : Proc(IMFImageSharingEngine*, IUnknown, HRESULT)
    get_device : Proc(IMFImageSharingEngine*, DEVICE_INFO*, HRESULT)
    shutdown : Proc(IMFImageSharingEngine*, HRESULT)
  end

  IMFImageSharingEngine_GUID = "cfa0ae8e-7e1c-44d2-ae68-fc4c148a6354"
  IID_IMFImageSharingEngine = LibC::GUID.new(0xcfa0ae8e_u32, 0x7e1c_u16, 0x44d2_u16, StaticArray[0xae_u8, 0x68_u8, 0xfc_u8, 0x4c_u8, 0x14_u8, 0x8a_u8, 0x63_u8, 0x54_u8])
  struct IMFImageSharingEngine
    lpVtbl : IMFImageSharingEngineVTbl*
  end

  struct IMFImageSharingEngineClassFactoryVTbl
    query_interface : Proc(IMFImageSharingEngineClassFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFImageSharingEngineClassFactory*, UInt32)
    release : Proc(IMFImageSharingEngineClassFactory*, UInt32)
    create_instance_from_udn : Proc(IMFImageSharingEngineClassFactory*, UInt8*, IMFImageSharingEngine*, HRESULT)
  end

  IMFImageSharingEngineClassFactory_GUID = "1fc55727-a7fb-4fc8-83ae-8af024990af1"
  IID_IMFImageSharingEngineClassFactory = LibC::GUID.new(0x1fc55727_u32, 0xa7fb_u16, 0x4fc8_u16, StaticArray[0x83_u8, 0xae_u8, 0x8a_u8, 0xf0_u8, 0x24_u8, 0x99_u8, 0xa_u8, 0xf1_u8])
  struct IMFImageSharingEngineClassFactory
    lpVtbl : IMFImageSharingEngineClassFactoryVTbl*
  end

  struct IPlayToControlVTbl
    query_interface : Proc(IPlayToControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPlayToControl*, UInt32)
    release : Proc(IPlayToControl*, UInt32)
    connect : Proc(IPlayToControl*, IMFSharingEngineClassFactory, HRESULT)
    disconnect : Proc(IPlayToControl*, HRESULT)
  end

  IPlayToControl_GUID = "607574eb-f4b6-45c1-b08c-cb715122901d"
  IID_IPlayToControl = LibC::GUID.new(0x607574eb_u32, 0xf4b6_u16, 0x45c1_u16, StaticArray[0xb0_u8, 0x8c_u8, 0xcb_u8, 0x71_u8, 0x51_u8, 0x22_u8, 0x90_u8, 0x1d_u8])
  struct IPlayToControl
    lpVtbl : IPlayToControlVTbl*
  end

  struct IPlayToControlWithCapabilitiesVTbl
    query_interface : Proc(IPlayToControlWithCapabilities*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPlayToControlWithCapabilities*, UInt32)
    release : Proc(IPlayToControlWithCapabilities*, UInt32)
    connect : Proc(IPlayToControlWithCapabilities*, IMFSharingEngineClassFactory, HRESULT)
    disconnect : Proc(IPlayToControlWithCapabilities*, HRESULT)
    get_capabilities : Proc(IPlayToControlWithCapabilities*, PLAYTO_SOURCE_CREATEFLAGS*, HRESULT)
  end

  IPlayToControlWithCapabilities_GUID = "aa9dd80f-c50a-4220-91c1-332287f82a34"
  IID_IPlayToControlWithCapabilities = LibC::GUID.new(0xaa9dd80f_u32, 0xc50a_u16, 0x4220_u16, StaticArray[0x91_u8, 0xc1_u8, 0x33_u8, 0x22_u8, 0x87_u8, 0xf8_u8, 0x2a_u8, 0x34_u8])
  struct IPlayToControlWithCapabilities
    lpVtbl : IPlayToControlWithCapabilitiesVTbl*
  end

  struct IPlayToSourceClassFactoryVTbl
    query_interface : Proc(IPlayToSourceClassFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPlayToSourceClassFactory*, UInt32)
    release : Proc(IPlayToSourceClassFactory*, UInt32)
    create_instance : Proc(IPlayToSourceClassFactory*, UInt32, IPlayToControl, IInspectable*, HRESULT)
  end

  IPlayToSourceClassFactory_GUID = "842b32a3-9b9b-4d1c-b3f3-49193248a554"
  IID_IPlayToSourceClassFactory = LibC::GUID.new(0x842b32a3_u32, 0x9b9b_u16, 0x4d1c_u16, StaticArray[0xb3_u8, 0xf3_u8, 0x49_u8, 0x19_u8, 0x32_u8, 0x48_u8, 0xa5_u8, 0x54_u8])
  struct IPlayToSourceClassFactory
    lpVtbl : IPlayToSourceClassFactoryVTbl*
  end

  struct IEVRVideoStreamControlVTbl
    query_interface : Proc(IEVRVideoStreamControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEVRVideoStreamControl*, UInt32)
    release : Proc(IEVRVideoStreamControl*, UInt32)
    set_stream_active_state : Proc(IEVRVideoStreamControl*, LibC::BOOL, HRESULT)
    get_stream_active_state : Proc(IEVRVideoStreamControl*, LibC::BOOL*, HRESULT)
  end

  IEVRVideoStreamControl_GUID = "d0cfe38b-93e7-4772-8957-0400c49a4485"
  IID_IEVRVideoStreamControl = LibC::GUID.new(0xd0cfe38b_u32, 0x93e7_u16, 0x4772_u16, StaticArray[0x89_u8, 0x57_u8, 0x4_u8, 0x0_u8, 0xc4_u8, 0x9a_u8, 0x44_u8, 0x85_u8])
  struct IEVRVideoStreamControl
    lpVtbl : IEVRVideoStreamControlVTbl*
  end

  struct IMFVideoProcessorVTbl
    query_interface : Proc(IMFVideoProcessor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFVideoProcessor*, UInt32)
    release : Proc(IMFVideoProcessor*, UInt32)
    get_available_video_processor_modes : Proc(IMFVideoProcessor*, UInt32*, Guid**, HRESULT)
    get_video_processor_caps : Proc(IMFVideoProcessor*, Guid*, DXVA2_VideoProcessorCaps*, HRESULT)
    get_video_processor_mode : Proc(IMFVideoProcessor*, Guid*, HRESULT)
    set_video_processor_mode : Proc(IMFVideoProcessor*, Guid*, HRESULT)
    get_proc_amp_range : Proc(IMFVideoProcessor*, UInt32, DXVA2_ValueRange*, HRESULT)
    get_proc_amp_values : Proc(IMFVideoProcessor*, UInt32, DXVA2_ProcAmpValues*, HRESULT)
    set_proc_amp_values : Proc(IMFVideoProcessor*, UInt32, DXVA2_ProcAmpValues*, HRESULT)
    get_filtering_range : Proc(IMFVideoProcessor*, UInt32, DXVA2_ValueRange*, HRESULT)
    get_filtering_value : Proc(IMFVideoProcessor*, UInt32, DXVA2_Fixed32*, HRESULT)
    set_filtering_value : Proc(IMFVideoProcessor*, UInt32, DXVA2_Fixed32*, HRESULT)
    get_background_color : Proc(IMFVideoProcessor*, UInt32*, HRESULT)
    set_background_color : Proc(IMFVideoProcessor*, UInt32, HRESULT)
  end

  IMFVideoProcessor_GUID = "6ab0000c-fece-4d1f-a2ac-a9573530656e"
  IID_IMFVideoProcessor = LibC::GUID.new(0x6ab0000c_u32, 0xfece_u16, 0x4d1f_u16, StaticArray[0xa2_u8, 0xac_u8, 0xa9_u8, 0x57_u8, 0x35_u8, 0x30_u8, 0x65_u8, 0x6e_u8])
  struct IMFVideoProcessor
    lpVtbl : IMFVideoProcessorVTbl*
  end

  struct IMFVideoMixerBitmapVTbl
    query_interface : Proc(IMFVideoMixerBitmap*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFVideoMixerBitmap*, UInt32)
    release : Proc(IMFVideoMixerBitmap*, UInt32)
    set_alpha_bitmap : Proc(IMFVideoMixerBitmap*, MFVideoAlphaBitmap*, HRESULT)
    clear_alpha_bitmap : Proc(IMFVideoMixerBitmap*, HRESULT)
    update_alpha_bitmap_parameters : Proc(IMFVideoMixerBitmap*, MFVideoAlphaBitmapParams*, HRESULT)
    get_alpha_bitmap_parameters : Proc(IMFVideoMixerBitmap*, MFVideoAlphaBitmapParams*, HRESULT)
  end

  IMFVideoMixerBitmap_GUID = "814c7b20-0fdb-4eec-af8f-f957c8f69edc"
  IID_IMFVideoMixerBitmap = LibC::GUID.new(0x814c7b20_u32, 0xfdb_u16, 0x4eec_u16, StaticArray[0xaf_u8, 0x8f_u8, 0xf9_u8, 0x57_u8, 0xc8_u8, 0xf6_u8, 0x9e_u8, 0xdc_u8])
  struct IMFVideoMixerBitmap
    lpVtbl : IMFVideoMixerBitmapVTbl*
  end

  struct IAdvancedMediaCaptureInitializationSettingsVTbl
    query_interface : Proc(IAdvancedMediaCaptureInitializationSettings*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAdvancedMediaCaptureInitializationSettings*, UInt32)
    release : Proc(IAdvancedMediaCaptureInitializationSettings*, UInt32)
    set_directx_device_manager : Proc(IAdvancedMediaCaptureInitializationSettings*, IMFDXGIDeviceManager, HRESULT)
  end

  IAdvancedMediaCaptureInitializationSettings_GUID = "3de21209-8ba6-4f2a-a577-2819b56ff14d"
  IID_IAdvancedMediaCaptureInitializationSettings = LibC::GUID.new(0x3de21209_u32, 0x8ba6_u16, 0x4f2a_u16, StaticArray[0xa5_u8, 0x77_u8, 0x28_u8, 0x19_u8, 0xb5_u8, 0x6f_u8, 0xf1_u8, 0x4d_u8])
  struct IAdvancedMediaCaptureInitializationSettings
    lpVtbl : IAdvancedMediaCaptureInitializationSettingsVTbl*
  end

  struct IAdvancedMediaCaptureSettingsVTbl
    query_interface : Proc(IAdvancedMediaCaptureSettings*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAdvancedMediaCaptureSettings*, UInt32)
    release : Proc(IAdvancedMediaCaptureSettings*, UInt32)
    get_directx_device_manager : Proc(IAdvancedMediaCaptureSettings*, IMFDXGIDeviceManager*, HRESULT)
  end

  IAdvancedMediaCaptureSettings_GUID = "24e0485f-a33e-4aa1-b564-6019b1d14f65"
  IID_IAdvancedMediaCaptureSettings = LibC::GUID.new(0x24e0485f_u32, 0xa33e_u16, 0x4aa1_u16, StaticArray[0xb5_u8, 0x64_u8, 0x60_u8, 0x19_u8, 0xb1_u8, 0xd1_u8, 0x4f_u8, 0x65_u8])
  struct IAdvancedMediaCaptureSettings
    lpVtbl : IAdvancedMediaCaptureSettingsVTbl*
  end

  struct IAdvancedMediaCaptureVTbl
    query_interface : Proc(IAdvancedMediaCapture*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAdvancedMediaCapture*, UInt32)
    release : Proc(IAdvancedMediaCapture*, UInt32)
    get_advanced_media_capture_settings : Proc(IAdvancedMediaCapture*, IAdvancedMediaCaptureSettings*, HRESULT)
  end

  IAdvancedMediaCapture_GUID = "d0751585-d216-4344-b5bf-463b68f977bb"
  IID_IAdvancedMediaCapture = LibC::GUID.new(0xd0751585_u32, 0xd216_u16, 0x4344_u16, StaticArray[0xb5_u8, 0xbf_u8, 0x46_u8, 0x3b_u8, 0x68_u8, 0xf9_u8, 0x77_u8, 0xbb_u8])
  struct IAdvancedMediaCapture
    lpVtbl : IAdvancedMediaCaptureVTbl*
  end

  struct IMFSpatialAudioObjectBufferVTbl
    query_interface : Proc(IMFSpatialAudioObjectBuffer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSpatialAudioObjectBuffer*, UInt32)
    release : Proc(IMFSpatialAudioObjectBuffer*, UInt32)
    lock : Proc(IMFSpatialAudioObjectBuffer*, UInt8**, UInt32*, UInt32*, HRESULT)
    unlock : Proc(IMFSpatialAudioObjectBuffer*, HRESULT)
    get_current_length : Proc(IMFSpatialAudioObjectBuffer*, UInt32*, HRESULT)
    set_current_length : Proc(IMFSpatialAudioObjectBuffer*, UInt32, HRESULT)
    get_max_length : Proc(IMFSpatialAudioObjectBuffer*, UInt32*, HRESULT)
    set_id : Proc(IMFSpatialAudioObjectBuffer*, UInt32, HRESULT)
    get_id : Proc(IMFSpatialAudioObjectBuffer*, UInt32*, HRESULT)
    set_type : Proc(IMFSpatialAudioObjectBuffer*, AudioObjectType, HRESULT)
    get_type : Proc(IMFSpatialAudioObjectBuffer*, AudioObjectType*, HRESULT)
    get_metadata_items : Proc(IMFSpatialAudioObjectBuffer*, ISpatialAudioMetadataItems*, HRESULT)
  end

  IMFSpatialAudioObjectBuffer_GUID = "d396ec8c-605e-4249-978d-72ad1c312872"
  IID_IMFSpatialAudioObjectBuffer = LibC::GUID.new(0xd396ec8c_u32, 0x605e_u16, 0x4249_u16, StaticArray[0x97_u8, 0x8d_u8, 0x72_u8, 0xad_u8, 0x1c_u8, 0x31_u8, 0x28_u8, 0x72_u8])
  struct IMFSpatialAudioObjectBuffer
    lpVtbl : IMFSpatialAudioObjectBufferVTbl*
  end

  struct IMFSpatialAudioSampleVTbl
    query_interface : Proc(IMFSpatialAudioSample*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFSpatialAudioSample*, UInt32)
    release : Proc(IMFSpatialAudioSample*, UInt32)
    get_item : Proc(IMFSpatialAudioSample*, Guid*, PROPVARIANT*, HRESULT)
    get_item_type : Proc(IMFSpatialAudioSample*, Guid*, MF_ATTRIBUTE_TYPE*, HRESULT)
    compare_item : Proc(IMFSpatialAudioSample*, Guid*, PROPVARIANT*, LibC::BOOL*, HRESULT)
    compare : Proc(IMFSpatialAudioSample*, IMFAttributes, MF_ATTRIBUTES_MATCH_TYPE, LibC::BOOL*, HRESULT)
    get_uint32 : Proc(IMFSpatialAudioSample*, Guid*, UInt32*, HRESULT)
    get_uint64 : Proc(IMFSpatialAudioSample*, Guid*, UInt64*, HRESULT)
    get_double : Proc(IMFSpatialAudioSample*, Guid*, Float64*, HRESULT)
    get_guid : Proc(IMFSpatialAudioSample*, Guid*, Guid*, HRESULT)
    get_string_length : Proc(IMFSpatialAudioSample*, Guid*, UInt32*, HRESULT)
    get_string : Proc(IMFSpatialAudioSample*, Guid*, Char*, UInt32, UInt32*, HRESULT)
    get_allocated_string : Proc(IMFSpatialAudioSample*, Guid*, LibC::LPWSTR*, UInt32*, HRESULT)
    get_blob_size : Proc(IMFSpatialAudioSample*, Guid*, UInt32*, HRESULT)
    get_blob : Proc(IMFSpatialAudioSample*, Guid*, UInt8*, UInt32, UInt32*, HRESULT)
    get_allocated_blob : Proc(IMFSpatialAudioSample*, Guid*, UInt8**, UInt32*, HRESULT)
    get_unknown : Proc(IMFSpatialAudioSample*, Guid*, Guid*, Void**, HRESULT)
    set_item : Proc(IMFSpatialAudioSample*, Guid*, PROPVARIANT*, HRESULT)
    delete_item : Proc(IMFSpatialAudioSample*, Guid*, HRESULT)
    delete_all_items : Proc(IMFSpatialAudioSample*, HRESULT)
    set_uint32 : Proc(IMFSpatialAudioSample*, Guid*, UInt32, HRESULT)
    set_uint64 : Proc(IMFSpatialAudioSample*, Guid*, UInt64, HRESULT)
    set_double : Proc(IMFSpatialAudioSample*, Guid*, Float64, HRESULT)
    set_guid : Proc(IMFSpatialAudioSample*, Guid*, Guid*, HRESULT)
    set_string : Proc(IMFSpatialAudioSample*, Guid*, LibC::LPWSTR, HRESULT)
    set_blob : Proc(IMFSpatialAudioSample*, Guid*, UInt8*, UInt32, HRESULT)
    set_unknown : Proc(IMFSpatialAudioSample*, Guid*, IUnknown, HRESULT)
    lock_store : Proc(IMFSpatialAudioSample*, HRESULT)
    unlock_store : Proc(IMFSpatialAudioSample*, HRESULT)
    get_count : Proc(IMFSpatialAudioSample*, UInt32*, HRESULT)
    get_item_by_index : Proc(IMFSpatialAudioSample*, UInt32, Guid*, PROPVARIANT*, HRESULT)
    copy_all_items : Proc(IMFSpatialAudioSample*, IMFAttributes, HRESULT)
    get_sample_flags : Proc(IMFSpatialAudioSample*, UInt32*, HRESULT)
    set_sample_flags : Proc(IMFSpatialAudioSample*, UInt32, HRESULT)
    get_sample_time : Proc(IMFSpatialAudioSample*, Int64*, HRESULT)
    set_sample_time : Proc(IMFSpatialAudioSample*, Int64, HRESULT)
    get_sample_duration : Proc(IMFSpatialAudioSample*, Int64*, HRESULT)
    set_sample_duration : Proc(IMFSpatialAudioSample*, Int64, HRESULT)
    get_buffer_count : Proc(IMFSpatialAudioSample*, UInt32*, HRESULT)
    get_buffer_by_index : Proc(IMFSpatialAudioSample*, UInt32, IMFMediaBuffer*, HRESULT)
    convert_to_contiguous_buffer : Proc(IMFSpatialAudioSample*, IMFMediaBuffer*, HRESULT)
    add_buffer : Proc(IMFSpatialAudioSample*, IMFMediaBuffer, HRESULT)
    remove_buffer_by_index : Proc(IMFSpatialAudioSample*, UInt32, HRESULT)
    remove_all_buffers : Proc(IMFSpatialAudioSample*, HRESULT)
    get_total_length : Proc(IMFSpatialAudioSample*, UInt32*, HRESULT)
    copy_to_buffer : Proc(IMFSpatialAudioSample*, IMFMediaBuffer, HRESULT)
    get_object_count : Proc(IMFSpatialAudioSample*, UInt32*, HRESULT)
    add_spatial_audio_object : Proc(IMFSpatialAudioSample*, IMFSpatialAudioObjectBuffer, HRESULT)
    get_spatial_audio_object_by_index : Proc(IMFSpatialAudioSample*, UInt32, IMFSpatialAudioObjectBuffer*, HRESULT)
  end

  IMFSpatialAudioSample_GUID = "abf28a9b-3393-4290-ba79-5ffc46d986b2"
  IID_IMFSpatialAudioSample = LibC::GUID.new(0xabf28a9b_u32, 0x3393_u16, 0x4290_u16, StaticArray[0xba_u8, 0x79_u8, 0x5f_u8, 0xfc_u8, 0x46_u8, 0xd9_u8, 0x86_u8, 0xb2_u8])
  struct IMFSpatialAudioSample
    lpVtbl : IMFSpatialAudioSampleVTbl*
  end

  struct IMFContentDecryptionModuleSessionVTbl
    query_interface : Proc(IMFContentDecryptionModuleSession*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFContentDecryptionModuleSession*, UInt32)
    release : Proc(IMFContentDecryptionModuleSession*, UInt32)
    get_session_id : Proc(IMFContentDecryptionModuleSession*, LibC::LPWSTR*, HRESULT)
    get_expiration : Proc(IMFContentDecryptionModuleSession*, Float64*, HRESULT)
    get_key_statuses : Proc(IMFContentDecryptionModuleSession*, MFMediaKeyStatus**, UInt32*, HRESULT)
    load : Proc(IMFContentDecryptionModuleSession*, LibC::LPWSTR, LibC::BOOL*, HRESULT)
    generate_request : Proc(IMFContentDecryptionModuleSession*, LibC::LPWSTR, UInt8*, UInt32, HRESULT)
    update : Proc(IMFContentDecryptionModuleSession*, UInt8*, UInt32, HRESULT)
    close : Proc(IMFContentDecryptionModuleSession*, HRESULT)
    remove : Proc(IMFContentDecryptionModuleSession*, HRESULT)
  end

  IMFContentDecryptionModuleSession_GUID = "4e233efd-1dd2-49e8-b577-d63eee4c0d33"
  IID_IMFContentDecryptionModuleSession = LibC::GUID.new(0x4e233efd_u32, 0x1dd2_u16, 0x49e8_u16, StaticArray[0xb5_u8, 0x77_u8, 0xd6_u8, 0x3e_u8, 0xee_u8, 0x4c_u8, 0xd_u8, 0x33_u8])
  struct IMFContentDecryptionModuleSession
    lpVtbl : IMFContentDecryptionModuleSessionVTbl*
  end

  struct IMFContentDecryptionModuleSessionCallbacksVTbl
    query_interface : Proc(IMFContentDecryptionModuleSessionCallbacks*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFContentDecryptionModuleSessionCallbacks*, UInt32)
    release : Proc(IMFContentDecryptionModuleSessionCallbacks*, UInt32)
    key_message : Proc(IMFContentDecryptionModuleSessionCallbacks*, MF_MEDIAKEYSESSION_MESSAGETYPE, UInt8*, UInt32, LibC::LPWSTR, HRESULT)
    key_status_changed : Proc(IMFContentDecryptionModuleSessionCallbacks*, HRESULT)
  end

  IMFContentDecryptionModuleSessionCallbacks_GUID = "3f96ee40-ad81-4096-8470-59a4b770f89a"
  IID_IMFContentDecryptionModuleSessionCallbacks = LibC::GUID.new(0x3f96ee40_u32, 0xad81_u16, 0x4096_u16, StaticArray[0x84_u8, 0x70_u8, 0x59_u8, 0xa4_u8, 0xb7_u8, 0x70_u8, 0xf8_u8, 0x9a_u8])
  struct IMFContentDecryptionModuleSessionCallbacks
    lpVtbl : IMFContentDecryptionModuleSessionCallbacksVTbl*
  end

  struct IMFContentDecryptionModuleVTbl
    query_interface : Proc(IMFContentDecryptionModule*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFContentDecryptionModule*, UInt32)
    release : Proc(IMFContentDecryptionModule*, UInt32)
    set_content_enabler : Proc(IMFContentDecryptionModule*, IMFContentEnabler, IMFAsyncResult, HRESULT)
    get_suspend_notify : Proc(IMFContentDecryptionModule*, IMFCdmSuspendNotify*, HRESULT)
    set_pmp_host_app : Proc(IMFContentDecryptionModule*, IMFPMPHostApp, HRESULT)
    create_session : Proc(IMFContentDecryptionModule*, MF_MEDIAKEYSESSION_TYPE, IMFContentDecryptionModuleSessionCallbacks, IMFContentDecryptionModuleSession*, HRESULT)
    set_server_certificate : Proc(IMFContentDecryptionModule*, UInt8*, UInt32, HRESULT)
    create_trusted_input : Proc(IMFContentDecryptionModule*, UInt8*, UInt32, IMFTrustedInput*, HRESULT)
    get_protection_system_ids : Proc(IMFContentDecryptionModule*, Guid**, UInt32*, HRESULT)
  end

  IMFContentDecryptionModule_GUID = "87be986c-10be-4943-bf48-4b54ce1983a2"
  IID_IMFContentDecryptionModule = LibC::GUID.new(0x87be986c_u32, 0x10be_u16, 0x4943_u16, StaticArray[0xbf_u8, 0x48_u8, 0x4b_u8, 0x54_u8, 0xce_u8, 0x19_u8, 0x83_u8, 0xa2_u8])
  struct IMFContentDecryptionModule
    lpVtbl : IMFContentDecryptionModuleVTbl*
  end

  struct IMFContentDecryptionModuleAccessVTbl
    query_interface : Proc(IMFContentDecryptionModuleAccess*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFContentDecryptionModuleAccess*, UInt32)
    release : Proc(IMFContentDecryptionModuleAccess*, UInt32)
    create_content_decryption_module : Proc(IMFContentDecryptionModuleAccess*, IPropertyStore, IMFContentDecryptionModule*, HRESULT)
    get_configuration : Proc(IMFContentDecryptionModuleAccess*, IPropertyStore*, HRESULT)
    get_key_system : Proc(IMFContentDecryptionModuleAccess*, LibC::LPWSTR*, HRESULT)
  end

  IMFContentDecryptionModuleAccess_GUID = "a853d1f4-e2a0-4303-9edc-f1a68ee43136"
  IID_IMFContentDecryptionModuleAccess = LibC::GUID.new(0xa853d1f4_u32, 0xe2a0_u16, 0x4303_u16, StaticArray[0x9e_u8, 0xdc_u8, 0xf1_u8, 0xa6_u8, 0x8e_u8, 0xe4_u8, 0x31_u8, 0x36_u8])
  struct IMFContentDecryptionModuleAccess
    lpVtbl : IMFContentDecryptionModuleAccessVTbl*
  end

  struct IMFContentDecryptionModuleFactoryVTbl
    query_interface : Proc(IMFContentDecryptionModuleFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFContentDecryptionModuleFactory*, UInt32)
    release : Proc(IMFContentDecryptionModuleFactory*, UInt32)
    is_type_supported : Proc(IMFContentDecryptionModuleFactory*, LibC::LPWSTR, LibC::LPWSTR, LibC::BOOL)
    create_content_decryption_module_access : Proc(IMFContentDecryptionModuleFactory*, LibC::LPWSTR, IPropertyStore*, UInt32, IMFContentDecryptionModuleAccess*, HRESULT)
  end

  IMFContentDecryptionModuleFactory_GUID = "7d5abf16-4cbb-4e08-b977-9ba59049943e"
  IID_IMFContentDecryptionModuleFactory = LibC::GUID.new(0x7d5abf16_u32, 0x4cbb_u16, 0x4e08_u16, StaticArray[0xb9_u8, 0x77_u8, 0x9b_u8, 0xa5_u8, 0x90_u8, 0x49_u8, 0x94_u8, 0x3e_u8])
  struct IMFContentDecryptionModuleFactory
    lpVtbl : IMFContentDecryptionModuleFactoryVTbl*
  end

  struct IMFCameraSyncObjectVTbl
    query_interface : Proc(IMFCameraSyncObject*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFCameraSyncObject*, UInt32)
    release : Proc(IMFCameraSyncObject*, UInt32)
    wait_on_signal : Proc(IMFCameraSyncObject*, UInt32, HRESULT)
    shutdown : Proc(IMFCameraSyncObject*, Void)
  end

  IMFCameraSyncObject_GUID = "6338b23a-3042-49d2-a3ea-ec0fed815407"
  IID_IMFCameraSyncObject = LibC::GUID.new(0x6338b23a_u32, 0x3042_u16, 0x49d2_u16, StaticArray[0xa3_u8, 0xea_u8, 0xec_u8, 0xf_u8, 0xed_u8, 0x81_u8, 0x54_u8, 0x7_u8])
  struct IMFCameraSyncObject
    lpVtbl : IMFCameraSyncObjectVTbl*
  end

  struct IMFVirtualCameraVTbl
    query_interface : Proc(IMFVirtualCamera*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMFVirtualCamera*, UInt32)
    release : Proc(IMFVirtualCamera*, UInt32)
    get_item : Proc(IMFVirtualCamera*, Guid*, PROPVARIANT*, HRESULT)
    get_item_type : Proc(IMFVirtualCamera*, Guid*, MF_ATTRIBUTE_TYPE*, HRESULT)
    compare_item : Proc(IMFVirtualCamera*, Guid*, PROPVARIANT*, LibC::BOOL*, HRESULT)
    compare : Proc(IMFVirtualCamera*, IMFAttributes, MF_ATTRIBUTES_MATCH_TYPE, LibC::BOOL*, HRESULT)
    get_uint32 : Proc(IMFVirtualCamera*, Guid*, UInt32*, HRESULT)
    get_uint64 : Proc(IMFVirtualCamera*, Guid*, UInt64*, HRESULT)
    get_double : Proc(IMFVirtualCamera*, Guid*, Float64*, HRESULT)
    get_guid : Proc(IMFVirtualCamera*, Guid*, Guid*, HRESULT)
    get_string_length : Proc(IMFVirtualCamera*, Guid*, UInt32*, HRESULT)
    get_string : Proc(IMFVirtualCamera*, Guid*, Char*, UInt32, UInt32*, HRESULT)
    get_allocated_string : Proc(IMFVirtualCamera*, Guid*, LibC::LPWSTR*, UInt32*, HRESULT)
    get_blob_size : Proc(IMFVirtualCamera*, Guid*, UInt32*, HRESULT)
    get_blob : Proc(IMFVirtualCamera*, Guid*, UInt8*, UInt32, UInt32*, HRESULT)
    get_allocated_blob : Proc(IMFVirtualCamera*, Guid*, UInt8**, UInt32*, HRESULT)
    get_unknown : Proc(IMFVirtualCamera*, Guid*, Guid*, Void**, HRESULT)
    set_item : Proc(IMFVirtualCamera*, Guid*, PROPVARIANT*, HRESULT)
    delete_item : Proc(IMFVirtualCamera*, Guid*, HRESULT)
    delete_all_items : Proc(IMFVirtualCamera*, HRESULT)
    set_uint32 : Proc(IMFVirtualCamera*, Guid*, UInt32, HRESULT)
    set_uint64 : Proc(IMFVirtualCamera*, Guid*, UInt64, HRESULT)
    set_double : Proc(IMFVirtualCamera*, Guid*, Float64, HRESULT)
    set_guid : Proc(IMFVirtualCamera*, Guid*, Guid*, HRESULT)
    set_string : Proc(IMFVirtualCamera*, Guid*, LibC::LPWSTR, HRESULT)
    set_blob : Proc(IMFVirtualCamera*, Guid*, UInt8*, UInt32, HRESULT)
    set_unknown : Proc(IMFVirtualCamera*, Guid*, IUnknown, HRESULT)
    lock_store : Proc(IMFVirtualCamera*, HRESULT)
    unlock_store : Proc(IMFVirtualCamera*, HRESULT)
    get_count : Proc(IMFVirtualCamera*, UInt32*, HRESULT)
    get_item_by_index : Proc(IMFVirtualCamera*, UInt32, Guid*, PROPVARIANT*, HRESULT)
    copy_all_items : Proc(IMFVirtualCamera*, IMFAttributes, HRESULT)
    add_device_source_info : Proc(IMFVirtualCamera*, LibC::LPWSTR, HRESULT)
    add_property : Proc(IMFVirtualCamera*, DEVPROPKEY*, UInt32, UInt8*, UInt32, HRESULT)
    add_registry_entry : Proc(IMFVirtualCamera*, LibC::LPWSTR, LibC::LPWSTR, UInt32, UInt8*, UInt32, HRESULT)
    start : Proc(IMFVirtualCamera*, IMFAsyncCallback, HRESULT)
    stop : Proc(IMFVirtualCamera*, HRESULT)
    remove : Proc(IMFVirtualCamera*, HRESULT)
    get_media_source : Proc(IMFVirtualCamera*, IMFMediaSource*, HRESULT)
    send_camera_property : Proc(IMFVirtualCamera*, Guid*, UInt32, UInt32, Void*, UInt32, Void*, UInt32, UInt32*, HRESULT)
    create_sync_event : Proc(IMFVirtualCamera*, Guid*, UInt32, UInt32, LibC::HANDLE, IMFCameraSyncObject*, HRESULT)
    create_sync_semaphore : Proc(IMFVirtualCamera*, Guid*, UInt32, UInt32, LibC::HANDLE, Int32, IMFCameraSyncObject*, HRESULT)
    shutdown : Proc(IMFVirtualCamera*, HRESULT)
  end

  IMFVirtualCamera_GUID = "1c08a864-ef6c-4c75-af59-5f2d68da9563"
  IID_IMFVirtualCamera = LibC::GUID.new(0x1c08a864_u32, 0xef6c_u16, 0x4c75_u16, StaticArray[0xaf_u8, 0x59_u8, 0x5f_u8, 0x2d_u8, 0x68_u8, 0xda_u8, 0x95_u8, 0x63_u8])
  struct IMFVirtualCamera
    lpVtbl : IMFVirtualCameraVTbl*
  end


  # Params # pd3ddevice : IDirect3DDevice9Ex [In],pcontentdesc : DXVAHD_CONTENT_DESC* [In],usage : DXVAHD_DEVICE_USAGE [In],pplugin : PDXVAHDSW_Plugin [In],ppdevice : IDXVAHD_Device* [In]
  fun DXVAHD_CreateDevice(pd3ddevice : IDirect3DDevice9Ex, pcontentdesc : DXVAHD_CONTENT_DESC*, usage : DXVAHD_DEVICE_USAGE, pplugin : PDXVAHDSW_Plugin, ppdevice : IDXVAHD_Device*) : HRESULT

  # Params # presettoken : UInt32* [In],ppdevicemanager : IDirect3DDeviceManager9* [In]
  fun DXVA2CreateDirect3DDeviceManager9(presettoken : UInt32*, ppdevicemanager : IDirect3DDeviceManager9*) : HRESULT

  # Params # pdd : IDirect3DDevice9 [In],riid : Guid* [In],ppservice : Void** [In]
  fun DXVA2CreateVideoService(pdd : IDirect3DDevice9, riid : Guid*, ppservice : Void**) : HRESULT

  # Params # hmonitor : HMONITOR [In],vos : OPM_VIDEO_OUTPUT_SEMANTICS [In],pulnumvideooutputs : UInt32* [In],pppopmvideooutputarray : IOPMVideoOutput** [In]
  fun OPMGetVideoOutputsFromHMONITOR(hmonitor : HMONITOR, vos : OPM_VIDEO_OUTPUT_SEMANTICS, pulnumvideooutputs : UInt32*, pppopmvideooutputarray : IOPMVideoOutput**) : HRESULT

  # Params # padapterluid : LUID* [In],vidpntarget : UInt32 [In],vos : OPM_VIDEO_OUTPUT_SEMANTICS [In],ppopmvideooutput : IOPMVideoOutput* [In]
  fun OPMGetVideoOutputForTarget(padapterluid : LUID*, vidpntarget : UInt32, vos : OPM_VIDEO_OUTPUT_SEMANTICS, ppopmvideooutput : IOPMVideoOutput*) : HRESULT

  # Params # pdirect3ddevice9 : IDirect3DDevice9 [In],vos : OPM_VIDEO_OUTPUT_SEMANTICS [In],pulnumvideooutputs : UInt32* [In],pppopmvideooutputarray : IOPMVideoOutput** [In]
  fun OPMGetVideoOutputsFromIDirect3DDevice9Object(pdirect3ddevice9 : IDirect3DDevice9, vos : OPM_VIDEO_OUTPUT_SEMANTICS, pulnumvideooutputs : UInt32*, pppopmvideooutputarray : IOPMVideoOutput**) : HRESULT

  # Params # pattr : IMFAttributes [In],dwoptions : UInt32 [In],pstm : IStream [In]
  fun MFSerializeAttributesToStream(pattr : IMFAttributes, dwoptions : UInt32, pstm : IStream) : HRESULT

  # Params # pattr : IMFAttributes [In],dwoptions : UInt32 [In],pstm : IStream [In]
  fun MFDeserializeAttributesFromStream(pattr : IMFAttributes, dwoptions : UInt32, pstm : IStream) : HRESULT

  # Params # ppactivate : IMFActivate* [In]
  fun MFCreateTransformActivate(ppactivate : IMFActivate*) : HRESULT

  # Params # pconfiguration : IMFAttributes [In],ppmediasession : IMFMediaSession* [In]
  fun MFCreateMediaSession(pconfiguration : IMFAttributes, ppmediasession : IMFMediaSession*) : HRESULT

  # Params # dwcreationflags : UInt32 [In],pconfiguration : IMFAttributes [In],ppmediasession : IMFMediaSession* [In],ppenableractivate : IMFActivate* [In]
  fun MFCreatePMPMediaSession(dwcreationflags : UInt32, pconfiguration : IMFAttributes, ppmediasession : IMFMediaSession*, ppenableractivate : IMFActivate*) : HRESULT

  # Params # ppisourceresolver : IMFSourceResolver* [In]
  fun MFCreateSourceResolver(ppisourceresolver : IMFSourceResolver*) : HRESULT

  # Params # ppstore : IPropertyStore* [In]
  fun CreatePropertyStore(ppstore : IPropertyStore*) : HRESULT

  # Params # ppropvarschemearray : PROPVARIANT* [In]
  fun MFGetSupportedSchemes(ppropvarschemearray : PROPVARIANT*) : HRESULT

  # Params # ppropvarmimetypearray : PROPVARIANT* [In]
  fun MFGetSupportedMimeTypes(ppropvarmimetypearray : PROPVARIANT*) : HRESULT

  # Params # pptopo : IMFTopology* [In]
  fun MFCreateTopology(pptopo : IMFTopology*) : HRESULT

  # Params # nodetype : MF_TOPOLOGY_TYPE [In],ppnode : IMFTopologyNode* [In]
  fun MFCreateTopologyNode(nodetype : MF_TOPOLOGY_TYPE, ppnode : IMFTopologyNode*) : HRESULT

  # Params # pnode : IMFTopologyNode [In],dwstreamindex : UInt32 [In],foutput : LibC::BOOL [In],pptype : IMFMediaType* [In]
  fun MFGetTopoNodeCurrentType(pnode : IMFTopologyNode, dwstreamindex : UInt32, foutput : LibC::BOOL, pptype : IMFMediaType*) : HRESULT

  # Params # punkobject : IUnknown [In],guidservice : Guid* [In],riid : Guid* [In],ppvobject : Void** [In]
  fun MFGetService(punkobject : IUnknown, guidservice : Guid*, riid : Guid*, ppvobject : Void**) : HRESULT

  # Params # 
  fun MFGetSystemTime : Int64

  # Params # pppresentationclock : IMFPresentationClock* [In]
  fun MFCreatePresentationClock(pppresentationclock : IMFPresentationClock*) : HRESULT

  # Params # ppsystemtimesource : IMFPresentationTimeSource* [In]
  fun MFCreateSystemTimeSource(ppsystemtimesource : IMFPresentationTimeSource*) : HRESULT

  # Params # cstreamdescriptors : UInt32 [In],apstreamdescriptors : IMFStreamDescriptor* [In],pppresentationdescriptor : IMFPresentationDescriptor* [In]
  fun MFCreatePresentationDescriptor(cstreamdescriptors : UInt32, apstreamdescriptors : IMFStreamDescriptor*, pppresentationdescriptor : IMFPresentationDescriptor*) : HRESULT

  # Params # ppresentationdescriptor : IMFPresentationDescriptor [In]
  fun MFRequireProtectedEnvironment(ppresentationdescriptor : IMFPresentationDescriptor) : HRESULT

  # Params # ppd : IMFPresentationDescriptor [In],pcbdata : UInt32* [In],ppbdata : UInt8** [In]
  fun MFSerializePresentationDescriptor(ppd : IMFPresentationDescriptor, pcbdata : UInt32*, ppbdata : UInt8**) : HRESULT

  # Params # cbdata : UInt32 [In],pbdata : UInt8* [In],pppd : IMFPresentationDescriptor* [In]
  fun MFDeserializePresentationDescriptor(cbdata : UInt32, pbdata : UInt8*, pppd : IMFPresentationDescriptor*) : HRESULT

  # Params # dwstreamidentifier : UInt32 [In],cmediatypes : UInt32 [In],apmediatypes : IMFMediaType* [In],ppdescriptor : IMFStreamDescriptor* [In]
  fun MFCreateStreamDescriptor(dwstreamidentifier : UInt32, cmediatypes : UInt32, apmediatypes : IMFMediaType*, ppdescriptor : IMFStreamDescriptor*) : HRESULT

  # Params # pphandler : IMFMediaTypeHandler* [In]
  fun MFCreateSimpleTypeHandler(pphandler : IMFMediaTypeHandler*) : HRESULT

  # Params # punk : IUnknown [In]
  fun MFShutdownObject(punk : IUnknown) : HRESULT

  # Params # paudioattributes : IMFAttributes [In],ppsink : IMFMediaSink* [In]
  fun MFCreateAudioRenderer(paudioattributes : IMFAttributes, ppsink : IMFMediaSink*) : HRESULT

  # Params # ppactivate : IMFActivate* [In]
  fun MFCreateAudioRendererActivate(ppactivate : IMFActivate*) : HRESULT

  # Params # hwndvideo : LibC::HANDLE [In],ppactivate : IMFActivate* [In]
  fun MFCreateVideoRendererActivate(hwndvideo : LibC::HANDLE, ppactivate : IMFActivate*) : HRESULT

  # Params # pibytestream : IMFByteStream [In],pvideomediatype : IMFMediaType [In],paudiomediatype : IMFMediaType [In],ppimediasink : IMFMediaSink* [In]
  fun MFCreateMPEG4MediaSink(pibytestream : IMFByteStream, pvideomediatype : IMFMediaType, paudiomediatype : IMFMediaType, ppimediasink : IMFMediaSink*) : HRESULT

  # Params # pibytestream : IMFByteStream [In],pvideomediatype : IMFMediaType [In],paudiomediatype : IMFMediaType [In],ppimediasink : IMFMediaSink* [In]
  fun MFCreate3GPMediaSink(pibytestream : IMFByteStream, pvideomediatype : IMFMediaType, paudiomediatype : IMFMediaType, ppimediasink : IMFMediaSink*) : HRESULT

  # Params # ptargetbytestream : IMFByteStream [In],ppmediasink : IMFMediaSink* [In]
  fun MFCreateMP3MediaSink(ptargetbytestream : IMFByteStream, ppmediasink : IMFMediaSink*) : HRESULT

  # Params # ptargetbytestream : IMFByteStream [In],paudiomediatype : IMFMediaType [In],ppmediasink : IMFMediaSink* [In]
  fun MFCreateAC3MediaSink(ptargetbytestream : IMFByteStream, paudiomediatype : IMFMediaType, ppmediasink : IMFMediaSink*) : HRESULT

  # Params # ptargetbytestream : IMFByteStream [In],paudiomediatype : IMFMediaType [In],ppmediasink : IMFMediaSink* [In]
  fun MFCreateADTSMediaSink(ptargetbytestream : IMFByteStream, paudiomediatype : IMFMediaType, ppmediasink : IMFMediaSink*) : HRESULT

  # Params # guidoutputsubtype : Guid [In],poutputattributes : IMFAttributes [In],poutputbytestream : IMFByteStream [In],ppmuxsink : IMFMediaSink* [In]
  fun MFCreateMuxSink(guidoutputsubtype : Guid, poutputattributes : IMFAttributes, poutputbytestream : IMFByteStream, ppmuxsink : IMFMediaSink*) : HRESULT

  # Params # pibytestream : IMFByteStream [In],pvideomediatype : IMFMediaType [In],paudiomediatype : IMFMediaType [In],ppimediasink : IMFMediaSink* [In]
  fun MFCreateFMPEG4MediaSink(pibytestream : IMFByteStream, pvideomediatype : IMFMediaType, paudiomediatype : IMFMediaType, ppimediasink : IMFMediaSink*) : HRESULT

  # Params # pibytestream : IMFByteStream [In],pvideomediatype : IMFMediaType [In],paudiomediatype : IMFMediaType [In],ppimediasink : IMFMediaSink* [In]
  fun MFCreateAVIMediaSink(pibytestream : IMFByteStream, pvideomediatype : IMFMediaType, paudiomediatype : IMFMediaType, ppimediasink : IMFMediaSink*) : HRESULT

  # Params # ptargetbytestream : IMFByteStream [In],paudiomediatype : IMFMediaType [In],ppmediasink : IMFMediaSink* [In]
  fun MFCreateWAVEMediaSink(ptargetbytestream : IMFByteStream, paudiomediatype : IMFMediaType, ppmediasink : IMFMediaSink*) : HRESULT

  # Params # ppobj : IMFTopoLoader* [In]
  fun MFCreateTopoLoader(ppobj : IMFTopoLoader*) : HRESULT

  # Params # pimfmediatype : IMFMediaType [In],pimfsamplegrabbersinkcallback : IMFSampleGrabberSinkCallback [In],ppiactivate : IMFActivate* [In]
  fun MFCreateSampleGrabberSinkActivate(pimfmediatype : IMFMediaType, pimfsamplegrabbersinkcallback : IMFSampleGrabberSinkCallback, ppiactivate : IMFActivate*) : HRESULT

  # Params # ppqualitymanager : IMFQualityManager* [In]
  fun MFCreateStandardQualityManager(ppqualitymanager : IMFQualityManager*) : HRESULT

  # Params # preserved : IUnknown [In],ppsequencersource : IMFSequencerSource* [In]
  fun MFCreateSequencerSource(preserved : IUnknown, ppsequencersource : IMFSequencerSource*) : HRESULT

  # Params # dwid : UInt32 [In],hnsoffset : Int64 [In],pvarsegmentoffset : PROPVARIANT* [In]
  fun MFCreateSequencerSegmentOffset(dwid : UInt32, hnsoffset : Int64, pvarsegmentoffset : PROPVARIANT*) : HRESULT

  # Params # psourcecollection : IMFCollection [In],ppaggsource : IMFMediaSource* [In]
  fun MFCreateAggregateSource(psourcecollection : IMFCollection, ppaggsource : IMFMediaSource*) : HRESULT

  # Params # ppcache : IMFNetCredentialCache* [In]
  fun MFCreateCredentialCache(ppcache : IMFNetCredentialCache*) : HRESULT

  # Params # pszprotocol : LibC::LPWSTR [In],pproxyconfig : IPropertyStore [In],ppproxylocator : IMFNetProxyLocator* [In]
  fun MFCreateProxyLocator(pszprotocol : LibC::LPWSTR, pproxyconfig : IPropertyStore, ppproxylocator : IMFNetProxyLocator*) : HRESULT

  # Params # riid : Guid* [In],ppvhandler : Void** [In]
  fun MFCreateNetSchemePlugin(riid : Guid*, ppvhandler : Void**) : HRESULT

  # Params # dwcreationflags : UInt32 [In],pppmpserver : IMFPMPServer* [In]
  fun MFCreatePMPServer(dwcreationflags : UInt32, pppmpserver : IMFPMPServer*) : HRESULT

  # Params # ppplugin : IMFRemoteDesktopPlugin* [In]
  fun MFCreateRemoteDesktopPlugin(ppplugin : IMFRemoteDesktopPlugin*) : HRESULT

  # Params # ppstore : INamedPropertyStore* [In]
  fun CreateNamedPropertyStore(ppstore : INamedPropertyStore*) : HRESULT

  # Params # ppcopiermft : IMFTransform* [In]
  fun MFCreateSampleCopierMFT(ppcopiermft : IMFTransform*) : HRESULT

  # Params # pptranscodeprofile : IMFTranscodeProfile* [In]
  fun MFCreateTranscodeProfile(pptranscodeprofile : IMFTranscodeProfile*) : HRESULT

  # Params # psrc : IMFMediaSource [In],pwszoutputfilepath : LibC::LPWSTR [In],pprofile : IMFTranscodeProfile [In],pptranscodetopo : IMFTopology* [In]
  fun MFCreateTranscodeTopology(psrc : IMFMediaSource, pwszoutputfilepath : LibC::LPWSTR, pprofile : IMFTranscodeProfile, pptranscodetopo : IMFTopology*) : HRESULT

  # Params # psrc : IMFMediaSource [In],poutputstream : IMFByteStream [In],pprofile : IMFTranscodeProfile [In],pptranscodetopo : IMFTopology* [In]
  fun MFCreateTranscodeTopologyFromByteStream(psrc : IMFMediaSource, poutputstream : IMFByteStream, pprofile : IMFTranscodeProfile, pptranscodetopo : IMFTopology*) : HRESULT

  # Params # guidsubtype : Guid* [In],dwmftflags : UInt32 [In],pcodecconfig : IMFAttributes [In],ppavailabletypes : IMFCollection* [In]
  fun MFTranscodeGetAudioOutputAvailableTypes(guidsubtype : Guid*, dwmftflags : UInt32, pcodecconfig : IMFAttributes, ppavailabletypes : IMFCollection*) : HRESULT

  # Params # ppactivate : IMFActivate* [In]
  fun MFCreateTranscodeSinkActivate(ppactivate : IMFActivate*) : HRESULT

  # Params # ppmfsample : IMFTrackedSample* [In]
  fun MFCreateTrackedSample(ppmfsample : IMFTrackedSample*) : HRESULT

  # Params # pstream : IStream [In],ppbytestream : IMFByteStream* [In]
  fun MFCreateMFByteStreamOnStream(pstream : IStream, ppbytestream : IMFByteStream*) : HRESULT

  # Params # pbytestream : IMFByteStream [In],ppstream : IStream* [In]
  fun MFCreateStreamOnMFByteStream(pbytestream : IMFByteStream, ppstream : IStream*) : HRESULT

  # Params # punkstream : IUnknown [In],ppbytestream : IMFByteStream* [In]
  fun MFCreateMFByteStreamOnStreamEx(punkstream : IUnknown, ppbytestream : IMFByteStream*) : HRESULT

  # Params # pbytestream : IMFByteStream [In],riid : Guid* [In],ppv : Void** [In]
  fun MFCreateStreamOnMFByteStreamEx(pbytestream : IMFByteStream, riid : Guid*, ppv : Void**) : HRESULT

  # Params # punkstream : IUnknown [In],ppmediatype : IMFMediaType* [In]
  fun MFCreateMediaTypeFromProperties(punkstream : IUnknown, ppmediatype : IMFMediaType*) : HRESULT

  # Params # pmediatype : IMFMediaType [In],riid : Guid* [In],ppv : Void** [In]
  fun MFCreatePropertiesFromMediaType(pmediatype : IMFMediaType, riid : Guid*, ppv : Void**) : HRESULT

  # Params # pattributes : IMFAttributes [In],pppsourceactivate : IMFActivate** [In],pcsourceactivate : UInt32* [In]
  fun MFEnumDeviceSources(pattributes : IMFAttributes, pppsourceactivate : IMFActivate**, pcsourceactivate : UInt32*) : HRESULT

  # Params # pattributes : IMFAttributes [In],ppsource : IMFMediaSource* [In]
  fun MFCreateDeviceSource(pattributes : IMFAttributes, ppsource : IMFMediaSource*) : HRESULT

  # Params # pattributes : IMFAttributes [In],ppactivate : IMFActivate* [In]
  fun MFCreateDeviceSourceActivate(pattributes : IMFAttributes, ppactivate : IMFActivate*) : HRESULT

  # Params # ppaccess : IMFProtectedEnvironmentAccess* [In]
  fun MFCreateProtectedEnvironmentAccess(ppaccess : IMFProtectedEnvironmentAccess*) : HRESULT

  # Params # pszname : LibC::LPWSTR [In],pplib : IMFSignedLibrary* [In]
  fun MFLoadSignedLibrary(pszname : LibC::LPWSTR, pplib : IMFSignedLibrary*) : HRESULT

  # Params # ppid : IMFSystemId* [In]
  fun MFGetSystemId(ppid : IMFSystemId*) : HRESULT

  # Params # verifier : UInt8* [In],size : UInt32 [In],id : LibC::LPWSTR* [In]
  fun MFGetLocalId(verifier : UInt8*, size : UInt32, id : LibC::LPWSTR*) : HRESULT

  # Params # protectionsystemid : Guid* [In],contentprotectiondevice : IMFContentProtectionDevice* [In]
  fun MFCreateContentProtectionDevice(protectionsystemid : Guid*, contentprotectiondevice : IMFContentProtectionDevice*) : HRESULT

  # Params # protectionsystemid : Guid* [In],issupported : LibC::BOOL* [In]
  fun MFIsContentProtectionDeviceSupported(protectionsystemid : Guid*, issupported : LibC::BOOL*) : HRESULT

  # Params # guidmediaprotectionsystemid : Guid* [In],pd3dmanager : IMFDXGIDeviceManager [In],pcontentprotectiondevice : IMFContentProtectionDevice [In],ppcontentdecryptorcontext : IMFContentDecryptorContext* [In]
  fun MFCreateContentDecryptorContext(guidmediaprotectionsystemid : Guid*, pd3dmanager : IMFDXGIDeviceManager, pcontentprotectiondevice : IMFContentProtectionDevice, ppcontentdecryptorcontext : IMFContentDecryptorContext*) : HRESULT

  # Params # sensorgroupsymboliclink : LibC::LPWSTR [In],ppsensorgroup : IMFSensorGroup* [In]
  fun MFCreateSensorGroup(sensorgroupsymboliclink : LibC::LPWSTR, ppsensorgroup : IMFSensorGroup*) : HRESULT

  # Params # streamid : UInt32 [In],pattributes : IMFAttributes [In],pmediatypecollection : IMFCollection [In],ppstream : IMFSensorStream* [In]
  fun MFCreateSensorStream(streamid : UInt32, pattributes : IMFAttributes, pmediatypecollection : IMFCollection, ppstream : IMFSensorStream*) : HRESULT

  # Params # profiletype : Guid* [In],profileindex : UInt32 [In],constraints : LibC::LPWSTR [In],ppprofile : IMFSensorProfile* [In]
  fun MFCreateSensorProfile(profiletype : Guid*, profileindex : UInt32, constraints : LibC::LPWSTR, ppprofile : IMFSensorProfile*) : HRESULT

  # Params # ppsensorprofile : IMFSensorProfileCollection* [In]
  fun MFCreateSensorProfileCollection(ppsensorprofile : IMFSensorProfileCollection*) : HRESULT

  # Params # pcallback : IMFSensorActivitiesReportCallback [In],ppactivitymonitor : IMFSensorActivityMonitor* [In]
  fun MFCreateSensorActivityMonitor(pcallback : IMFSensorActivitiesReportCallback, ppactivitymonitor : IMFSensorActivityMonitor*) : HRESULT

  # Params # ppextendedcameraintrinsics : IMFExtendedCameraIntrinsics* [In]
  fun MFCreateExtendedCameraIntrinsics(ppextendedcameraintrinsics : IMFExtendedCameraIntrinsics*) : HRESULT

  # Params # distortionmodeltype : MFCameraIntrinsic_DistortionModelType [In],ppextendedcameraintrinsicmodel : IMFExtendedCameraIntrinsicModel* [In]
  fun MFCreateExtendedCameraIntrinsicModel(distortionmodeltype : MFCameraIntrinsic_DistortionModelType, ppextendedcameraintrinsicmodel : IMFExtendedCameraIntrinsicModel*) : HRESULT

  # Params # videodeviceid : LibC::LPWSTR [In],displaymonitordeviceid : LibC::LPWSTR [In],pprelativepanelwatcher : IMFRelativePanelWatcher* [In]
  fun MFCreateRelativePanelWatcher(videodeviceid : LibC::LPWSTR, displaymonitordeviceid : LibC::LPWSTR, pprelativepanelwatcher : IMFRelativePanelWatcher*) : HRESULT

  # Params # symboliclink : LibC::LPWSTR [In],callback : IMFCameraOcclusionStateReportCallback [In],occlusionstatemonitor : IMFCameraOcclusionStateMonitor* [In]
  fun MFCreateCameraOcclusionStateMonitor(symboliclink : LibC::LPWSTR, callback : IMFCameraOcclusionStateReportCallback, occlusionstatemonitor : IMFCameraOcclusionStateMonitor*) : HRESULT

  # Params # ppicontentinfo : IMFASFContentInfo* [In]
  fun MFCreateASFContentInfo(ppicontentinfo : IMFASFContentInfo*) : HRESULT

  # Params # ppiindexer : IMFASFIndexer* [In]
  fun MFCreateASFIndexer(ppiindexer : IMFASFIndexer*) : HRESULT

  # Params # picontentbytestream : IMFByteStream [In],cbindexstartoffset : UInt64 [In],piindexbytestream : IMFByteStream* [In]
  fun MFCreateASFIndexerByteStream(picontentbytestream : IMFByteStream, cbindexstartoffset : UInt64, piindexbytestream : IMFByteStream*) : HRESULT

  # Params # ppisplitter : IMFASFSplitter* [In]
  fun MFCreateASFSplitter(ppisplitter : IMFASFSplitter*) : HRESULT

  # Params # ppiprofile : IMFASFProfile* [In]
  fun MFCreateASFProfile(ppiprofile : IMFASFProfile*) : HRESULT

  # Params # pipd : IMFPresentationDescriptor [In],ppiprofile : IMFASFProfile* [In]
  fun MFCreateASFProfileFromPresentationDescriptor(pipd : IMFPresentationDescriptor, ppiprofile : IMFASFProfile*) : HRESULT

  # Params # piprofile : IMFASFProfile [In],ppipd : IMFPresentationDescriptor* [In]
  fun MFCreatePresentationDescriptorFromASFProfile(piprofile : IMFASFProfile, ppipd : IMFPresentationDescriptor*) : HRESULT

  # Params # ppimultiplexer : IMFASFMultiplexer* [In]
  fun MFCreateASFMultiplexer(ppimultiplexer : IMFASFMultiplexer*) : HRESULT

  # Params # piasfprofile : IMFASFProfile [In],ppselector : IMFASFStreamSelector* [In]
  fun MFCreateASFStreamSelector(piasfprofile : IMFASFProfile, ppselector : IMFASFStreamSelector*) : HRESULT

  # Params # pibytestream : IMFByteStream [In],ppimediasink : IMFMediaSink* [In]
  fun MFCreateASFMediaSink(pibytestream : IMFByteStream, ppimediasink : IMFMediaSink*) : HRESULT

  # Params # pwszfilename : LibC::LPWSTR [In],pcontentinfo : IMFASFContentInfo [In],ppiactivate : IMFActivate* [In]
  fun MFCreateASFMediaSinkActivate(pwszfilename : LibC::LPWSTR, pcontentinfo : IMFASFContentInfo, ppiactivate : IMFActivate*) : HRESULT

  # Params # pmediatype : IMFMediaType [In],pencodingconfigurationproperties : IPropertyStore [In],ppactivate : IMFActivate* [In]
  fun MFCreateWMVEncoderActivate(pmediatype : IMFMediaType, pencodingconfigurationproperties : IPropertyStore, ppactivate : IMFActivate*) : HRESULT

  # Params # pmediatype : IMFMediaType [In],pencodingconfigurationproperties : IPropertyStore [In],ppactivate : IMFActivate* [In]
  fun MFCreateWMAEncoderActivate(pmediatype : IMFMediaType, pencodingconfigurationproperties : IPropertyStore, ppactivate : IMFActivate*) : HRESULT

  # Params # pibytestream : IMFByteStream [In],ppimediasink : IMFMediaSink* [In]
  fun MFCreateASFStreamingMediaSink(pibytestream : IMFByteStream, ppimediasink : IMFMediaSink*) : HRESULT

  # Params # pbytestreamactivate : IMFActivate [In],pcontentinfo : IMFASFContentInfo [In],ppiactivate : IMFActivate* [In]
  fun MFCreateASFStreamingMediaSinkActivate(pbytestreamactivate : IMFActivate, pcontentinfo : IMFASFContentInfo, ppiactivate : IMFActivate*) : HRESULT

  # Params # pdevice : ID3D12Device [In],riid : Guid* [In],ppvsyncobject : Void** [In]
  fun MFCreateD3D12SynchronizationObject(pdevice : ID3D12Device, riid : Guid*, ppvsyncobject : Void**) : HRESULT

  # Params # version : UInt32 [In],dwflags : UInt32 [In]
  fun MFStartup(version : UInt32, dwflags : UInt32) : HRESULT

  # Params # 
  fun MFShutdown : HRESULT

  # Params # 
  fun MFLockPlatform : HRESULT

  # Params # 
  fun MFUnlockPlatform : HRESULT

  # Params # dwqueue : UInt32 [In],pcallback : IMFAsyncCallback [In],pstate : IUnknown [In]
  fun MFPutWorkItem(dwqueue : UInt32, pcallback : IMFAsyncCallback, pstate : IUnknown) : HRESULT

  # Params # dwqueue : UInt32 [In],priority : Int32 [In],pcallback : IMFAsyncCallback [In],pstate : IUnknown [In]
  fun MFPutWorkItem2(dwqueue : UInt32, priority : Int32, pcallback : IMFAsyncCallback, pstate : IUnknown) : HRESULT

  # Params # dwqueue : UInt32 [In],presult : IMFAsyncResult [In]
  fun MFPutWorkItemEx(dwqueue : UInt32, presult : IMFAsyncResult) : HRESULT

  # Params # dwqueue : UInt32 [In],priority : Int32 [In],presult : IMFAsyncResult [In]
  fun MFPutWorkItemEx2(dwqueue : UInt32, priority : Int32, presult : IMFAsyncResult) : HRESULT

  # Params # hevent : LibC::HANDLE [In],priority : Int32 [In],presult : IMFAsyncResult [In],pkey : UInt64* [In]
  fun MFPutWaitingWorkItem(hevent : LibC::HANDLE, priority : Int32, presult : IMFAsyncResult, pkey : UInt64*) : HRESULT

  # Params # dwworkqueue : UInt32 [In],pdwworkqueue : UInt32* [In]
  fun MFAllocateSerialWorkQueue(dwworkqueue : UInt32, pdwworkqueue : UInt32*) : HRESULT

  # Params # presult : IMFAsyncResult [In],timeout : Int64 [In],pkey : UInt64* [In]
  fun MFScheduleWorkItemEx(presult : IMFAsyncResult, timeout : Int64, pkey : UInt64*) : HRESULT

  # Params # pcallback : IMFAsyncCallback [In],pstate : IUnknown [In],timeout : Int64 [In],pkey : UInt64* [In]
  fun MFScheduleWorkItem(pcallback : IMFAsyncCallback, pstate : IUnknown, timeout : Int64, pkey : UInt64*) : HRESULT

  # Params # key : UInt64 [In]
  fun MFCancelWorkItem(key : UInt64) : HRESULT

  # Params # periodicity : UInt32* [In]
  fun MFGetTimerPeriodicity(periodicity : UInt32*) : HRESULT

  # Params # callback : MFPERIODICCALLBACK [In],pcontext : IUnknown [In],pdwkey : UInt32* [In]
  fun MFAddPeriodicCallback(callback : MFPERIODICCALLBACK, pcontext : IUnknown, pdwkey : UInt32*) : HRESULT

  # Params # dwkey : UInt32 [In]
  fun MFRemovePeriodicCallback(dwkey : UInt32) : HRESULT

  # Params # workqueuetype : MFASYNC_WORKQUEUE_TYPE [In],pdwworkqueue : UInt32* [In]
  fun MFAllocateWorkQueueEx(workqueuetype : MFASYNC_WORKQUEUE_TYPE, pdwworkqueue : UInt32*) : HRESULT

  # Params # pdwworkqueue : UInt32* [In]
  fun MFAllocateWorkQueue(pdwworkqueue : UInt32*) : HRESULT

  # Params # dwworkqueue : UInt32 [In]
  fun MFLockWorkQueue(dwworkqueue : UInt32) : HRESULT

  # Params # dwworkqueue : UInt32 [In]
  fun MFUnlockWorkQueue(dwworkqueue : UInt32) : HRESULT

  # Params # dwworkqueueid : UInt32 [In],wszclass : LibC::LPWSTR [In],dwtaskid : UInt32 [In],pdonecallback : IMFAsyncCallback [In],pdonestate : IUnknown [In]
  fun MFBeginRegisterWorkQueueWithMMCSS(dwworkqueueid : UInt32, wszclass : LibC::LPWSTR, dwtaskid : UInt32, pdonecallback : IMFAsyncCallback, pdonestate : IUnknown) : HRESULT

  # Params # dwworkqueueid : UInt32 [In],wszclass : LibC::LPWSTR [In],dwtaskid : UInt32 [In],lpriority : Int32 [In],pdonecallback : IMFAsyncCallback [In],pdonestate : IUnknown [In]
  fun MFBeginRegisterWorkQueueWithMMCSSEx(dwworkqueueid : UInt32, wszclass : LibC::LPWSTR, dwtaskid : UInt32, lpriority : Int32, pdonecallback : IMFAsyncCallback, pdonestate : IUnknown) : HRESULT

  # Params # presult : IMFAsyncResult [In],pdwtaskid : UInt32* [In]
  fun MFEndRegisterWorkQueueWithMMCSS(presult : IMFAsyncResult, pdwtaskid : UInt32*) : HRESULT

  # Params # dwworkqueueid : UInt32 [In],pdonecallback : IMFAsyncCallback [In],pdonestate : IUnknown [In]
  fun MFBeginUnregisterWorkQueueWithMMCSS(dwworkqueueid : UInt32, pdonecallback : IMFAsyncCallback, pdonestate : IUnknown) : HRESULT

  # Params # presult : IMFAsyncResult [In]
  fun MFEndUnregisterWorkQueueWithMMCSS(presult : IMFAsyncResult) : HRESULT

  # Params # dwworkqueueid : UInt32 [In],pwszclass : Char* [In],pcchclass : UInt32* [In]
  fun MFGetWorkQueueMMCSSClass(dwworkqueueid : UInt32, pwszclass : Char*, pcchclass : UInt32*) : HRESULT

  # Params # dwworkqueueid : UInt32 [In],pdwtaskid : UInt32* [In]
  fun MFGetWorkQueueMMCSSTaskId(dwworkqueueid : UInt32, pdwtaskid : UInt32*) : HRESULT

  # Params # wszclass : LibC::LPWSTR [In],pdwtaskid : UInt32* [In],lpriority : Int32 [In]
  fun MFRegisterPlatformWithMMCSS(wszclass : LibC::LPWSTR, pdwtaskid : UInt32*, lpriority : Int32) : HRESULT

  # Params # 
  fun MFUnregisterPlatformFromMMCSS : HRESULT

  # Params # wszclass : LibC::LPWSTR [In],basepriority : Int32 [In],pdwtaskid : UInt32* [In],pid : UInt32* [In]
  fun MFLockSharedWorkQueue(wszclass : LibC::LPWSTR, basepriority : Int32, pdwtaskid : UInt32*, pid : UInt32*) : HRESULT

  # Params # dwworkqueueid : UInt32 [In],lpriority : Int32* [In]
  fun MFGetWorkQueueMMCSSPriority(dwworkqueueid : UInt32, lpriority : Int32*) : HRESULT

  # Params # punkobject : IUnknown [In],pcallback : IMFAsyncCallback [In],punkstate : IUnknown [In],ppasyncresult : IMFAsyncResult* [In]
  fun MFCreateAsyncResult(punkobject : IUnknown, pcallback : IMFAsyncCallback, punkstate : IUnknown, ppasyncresult : IMFAsyncResult*) : HRESULT

  # Params # pasyncresult : IMFAsyncResult [In]
  fun MFInvokeCallback(pasyncresult : IMFAsyncResult) : HRESULT

  # Params # accessmode : MF_FILE_ACCESSMODE [In],openmode : MF_FILE_OPENMODE [In],fflags : MF_FILE_FLAGS [In],pwszfileurl : LibC::LPWSTR [In],ppibytestream : IMFByteStream* [In]
  fun MFCreateFile(accessmode : MF_FILE_ACCESSMODE, openmode : MF_FILE_OPENMODE, fflags : MF_FILE_FLAGS, pwszfileurl : LibC::LPWSTR, ppibytestream : IMFByteStream*) : HRESULT

  # Params # accessmode : MF_FILE_ACCESSMODE [In],openmode : MF_FILE_OPENMODE [In],fflags : MF_FILE_FLAGS [In],ppibytestream : IMFByteStream* [In]
  fun MFCreateTempFile(accessmode : MF_FILE_ACCESSMODE, openmode : MF_FILE_OPENMODE, fflags : MF_FILE_FLAGS, ppibytestream : IMFByteStream*) : HRESULT

  # Params # accessmode : MF_FILE_ACCESSMODE [In],openmode : MF_FILE_OPENMODE [In],fflags : MF_FILE_FLAGS [In],pwszfilepath : LibC::LPWSTR [In],pcallback : IMFAsyncCallback [In],pstate : IUnknown [In],ppcancelcookie : IUnknown* [In]
  fun MFBeginCreateFile(accessmode : MF_FILE_ACCESSMODE, openmode : MF_FILE_OPENMODE, fflags : MF_FILE_FLAGS, pwszfilepath : LibC::LPWSTR, pcallback : IMFAsyncCallback, pstate : IUnknown, ppcancelcookie : IUnknown*) : HRESULT

  # Params # presult : IMFAsyncResult [In],ppfile : IMFByteStream* [In]
  fun MFEndCreateFile(presult : IMFAsyncResult, ppfile : IMFByteStream*) : HRESULT

  # Params # pcancelcookie : IUnknown [In]
  fun MFCancelCreateFile(pcancelcookie : IUnknown) : HRESULT

  # Params # cbmaxlength : UInt32 [In],ppbuffer : IMFMediaBuffer* [In]
  fun MFCreateMemoryBuffer(cbmaxlength : UInt32, ppbuffer : IMFMediaBuffer*) : HRESULT

  # Params # pbuffer : IMFMediaBuffer [In],cboffset : UInt32 [In],dwlength : UInt32 [In],ppbuffer : IMFMediaBuffer* [In]
  fun MFCreateMediaBufferWrapper(pbuffer : IMFMediaBuffer, cboffset : UInt32, dwlength : UInt32, ppbuffer : IMFMediaBuffer*) : HRESULT

  # Params # psample : IMFSample [In],pmfmediabuffer : IMFMediaBuffer [In],cboffset : UInt32 [In],ppmediabuffer : IMediaBuffer* [In]
  fun MFCreateLegacyMediaBufferOnMFMediaBuffer(psample : IMFSample, pmfmediabuffer : IMFMediaBuffer, cboffset : UInt32, ppmediabuffer : IMediaBuffer*) : HRESULT

  # Params # dx9 : UInt32 [In]
  fun MFMapDX9FormatToDXGIFormat(dx9 : UInt32) : DXGI_FORMAT

  # Params # dx11 : DXGI_FORMAT [In]
  fun MFMapDXGIFormatToDX9Format(dx11 : DXGI_FORMAT) : UInt32

  # Params # presettoken : UInt32* [In],ppmanager : IMFDXGIDeviceManager* [In]
  fun MFLockDXGIDeviceManager(presettoken : UInt32*, ppmanager : IMFDXGIDeviceManager*) : HRESULT

  # Params # 
  fun MFUnlockDXGIDeviceManager : HRESULT

  # Params # riid : Guid* [In],punksurface : IUnknown [In],fbottomupwhenlinear : LibC::BOOL [In],ppbuffer : IMFMediaBuffer* [In]
  fun MFCreateDXSurfaceBuffer(riid : Guid*, punksurface : IUnknown, fbottomupwhenlinear : LibC::BOOL, ppbuffer : IMFMediaBuffer*) : HRESULT

  # Params # riid : Guid* [In],punksurface : IUnknown [In],ppbuffer : IMFMediaBuffer* [In]
  fun MFCreateWICBitmapBuffer(riid : Guid*, punksurface : IUnknown, ppbuffer : IMFMediaBuffer*) : HRESULT

  # Params # riid : Guid* [In],punksurface : IUnknown [In],usubresourceindex : UInt32 [In],fbottomupwhenlinear : LibC::BOOL [In],ppbuffer : IMFMediaBuffer* [In]
  fun MFCreateDXGISurfaceBuffer(riid : Guid*, punksurface : IUnknown, usubresourceindex : UInt32, fbottomupwhenlinear : LibC::BOOL, ppbuffer : IMFMediaBuffer*) : HRESULT

  # Params # riid : Guid* [In],ppsampleallocator : Void** [In]
  fun MFCreateVideoSampleAllocatorEx(riid : Guid*, ppsampleallocator : Void**) : HRESULT

  # Params # resettoken : UInt32* [In],ppdevicemanager : IMFDXGIDeviceManager* [In]
  fun MFCreateDXGIDeviceManager(resettoken : UInt32*, ppdevicemanager : IMFDXGIDeviceManager*) : HRESULT

  # Params # cbmaxlength : UInt32 [In],cbaligment : UInt32 [In],ppbuffer : IMFMediaBuffer* [In]
  fun MFCreateAlignedMemoryBuffer(cbmaxlength : UInt32, cbaligment : UInt32, ppbuffer : IMFMediaBuffer*) : HRESULT

  # Params # met : UInt32 [In],guidextendedtype : Guid* [In],hrstatus : HRESULT [In],pvvalue : PROPVARIANT* [In],ppevent : IMFMediaEvent* [In]
  fun MFCreateMediaEvent(met : UInt32, guidextendedtype : Guid*, hrstatus : HRESULT, pvvalue : PROPVARIANT*, ppevent : IMFMediaEvent*) : HRESULT

  # Params # ppmediaeventqueue : IMFMediaEventQueue* [In]
  fun MFCreateEventQueue(ppmediaeventqueue : IMFMediaEventQueue*) : HRESULT

  # Params # ppimfsample : IMFSample* [In]
  fun MFCreateSample(ppimfsample : IMFSample*) : HRESULT

  # Params # ppmfattributes : IMFAttributes* [In],cinitialsize : UInt32 [In]
  fun MFCreateAttributes(ppmfattributes : IMFAttributes*, cinitialsize : UInt32) : HRESULT

  # Params # pattributes : IMFAttributes [In],pbuf : UInt8* [In],cbbufsize : UInt32 [In]
  fun MFInitAttributesFromBlob(pattributes : IMFAttributes, pbuf : UInt8*, cbbufsize : UInt32) : HRESULT

  # Params # pattributes : IMFAttributes [In],pcbbufsize : UInt32* [In]
  fun MFGetAttributesAsBlobSize(pattributes : IMFAttributes, pcbbufsize : UInt32*) : HRESULT

  # Params # pattributes : IMFAttributes [In],pbuf : UInt8* [In],cbbufsize : UInt32 [In]
  fun MFGetAttributesAsBlob(pattributes : IMFAttributes, pbuf : UInt8*, cbbufsize : UInt32) : HRESULT

  # Params # clsidmft : Guid [In],guidcategory : Guid [In],pszname : LibC::LPWSTR [In],flags : UInt32 [In],cinputtypes : UInt32 [In],pinputtypes : MFT_REGISTER_TYPE_INFO* [In],coutputtypes : UInt32 [In],poutputtypes : MFT_REGISTER_TYPE_INFO* [In],pattributes : IMFAttributes [In]
  fun MFTRegister(clsidmft : Guid, guidcategory : Guid, pszname : LibC::LPWSTR, flags : UInt32, cinputtypes : UInt32, pinputtypes : MFT_REGISTER_TYPE_INFO*, coutputtypes : UInt32, poutputtypes : MFT_REGISTER_TYPE_INFO*, pattributes : IMFAttributes) : HRESULT

  # Params # clsidmft : Guid [In]
  fun MFTUnregister(clsidmft : Guid) : HRESULT

  # Params # pclassfactory : IClassFactory [In],guidcategory : Guid* [In],pszname : LibC::LPWSTR [In],flags : UInt32 [In],cinputtypes : UInt32 [In],pinputtypes : MFT_REGISTER_TYPE_INFO* [In],coutputtypes : UInt32 [In],poutputtypes : MFT_REGISTER_TYPE_INFO* [In]
  fun MFTRegisterLocal(pclassfactory : IClassFactory, guidcategory : Guid*, pszname : LibC::LPWSTR, flags : UInt32, cinputtypes : UInt32, pinputtypes : MFT_REGISTER_TYPE_INFO*, coutputtypes : UInt32, poutputtypes : MFT_REGISTER_TYPE_INFO*) : HRESULT

  # Params # pclassfactory : IClassFactory [In]
  fun MFTUnregisterLocal(pclassfactory : IClassFactory) : HRESULT

  # Params # clisdmft : Guid* [In],guidcategory : Guid* [In],pszname : LibC::LPWSTR [In],flags : UInt32 [In],cinputtypes : UInt32 [In],pinputtypes : MFT_REGISTER_TYPE_INFO* [In],coutputtypes : UInt32 [In],poutputtypes : MFT_REGISTER_TYPE_INFO* [In]
  fun MFTRegisterLocalByCLSID(clisdmft : Guid*, guidcategory : Guid*, pszname : LibC::LPWSTR, flags : UInt32, cinputtypes : UInt32, pinputtypes : MFT_REGISTER_TYPE_INFO*, coutputtypes : UInt32, poutputtypes : MFT_REGISTER_TYPE_INFO*) : HRESULT

  # Params # clsidmft : Guid [In]
  fun MFTUnregisterLocalByCLSID(clsidmft : Guid) : HRESULT

  # Params # guidcategory : Guid [In],flags : UInt32 [In],pinputtype : MFT_REGISTER_TYPE_INFO* [In],poutputtype : MFT_REGISTER_TYPE_INFO* [In],pattributes : IMFAttributes [In],ppclsidmft : Guid** [In],pcmfts : UInt32* [In]
  fun MFTEnum(guidcategory : Guid, flags : UInt32, pinputtype : MFT_REGISTER_TYPE_INFO*, poutputtype : MFT_REGISTER_TYPE_INFO*, pattributes : IMFAttributes, ppclsidmft : Guid**, pcmfts : UInt32*) : HRESULT

  # Params # guidcategory : Guid [In],flags : UInt32 [In],pinputtype : MFT_REGISTER_TYPE_INFO* [In],poutputtype : MFT_REGISTER_TYPE_INFO* [In],pppmftactivate : IMFActivate** [In],pnummftactivate : UInt32* [In]
  fun MFTEnumEx(guidcategory : Guid, flags : UInt32, pinputtype : MFT_REGISTER_TYPE_INFO*, poutputtype : MFT_REGISTER_TYPE_INFO*, pppmftactivate : IMFActivate**, pnummftactivate : UInt32*) : HRESULT

  # Params # guidcategory : Guid [In],flags : UInt32 [In],pinputtype : MFT_REGISTER_TYPE_INFO* [In],poutputtype : MFT_REGISTER_TYPE_INFO* [In],pattributes : IMFAttributes [In],pppmftactivate : IMFActivate** [In],pnummftactivate : UInt32* [In]
  fun MFTEnum2(guidcategory : Guid, flags : UInt32, pinputtype : MFT_REGISTER_TYPE_INFO*, poutputtype : MFT_REGISTER_TYPE_INFO*, pattributes : IMFAttributes, pppmftactivate : IMFActivate**, pnummftactivate : UInt32*) : HRESULT

  # Params # clsidmft : Guid [In],pszname : LibC::LPWSTR* [In],ppinputtypes : MFT_REGISTER_TYPE_INFO** [In],pcinputtypes : UInt32* [In],ppoutputtypes : MFT_REGISTER_TYPE_INFO** [In],pcoutputtypes : UInt32* [In],ppattributes : IMFAttributes* [In]
  fun MFTGetInfo(clsidmft : Guid, pszname : LibC::LPWSTR*, ppinputtypes : MFT_REGISTER_TYPE_INFO**, pcinputtypes : UInt32*, ppoutputtypes : MFT_REGISTER_TYPE_INFO**, pcoutputtypes : UInt32*, ppattributes : IMFAttributes*) : HRESULT

  # Params # ppplugincontrol : IMFPluginControl* [In]
  fun MFGetPluginControl(ppplugincontrol : IMFPluginControl*) : HRESULT

  # Params # pmft : IUnknown [In],cbverifier : UInt32 [In],verifier : UInt8* [In],merit : UInt32* [In]
  fun MFGetMFTMerit(pmft : IUnknown, cbverifier : UInt32, verifier : UInt8*, merit : UInt32*) : HRESULT

  # Params # szscheme : LibC::LPWSTR [In],pactivate : IMFActivate [In]
  fun MFRegisterLocalSchemeHandler(szscheme : LibC::LPWSTR, pactivate : IMFActivate) : HRESULT

  # Params # szfileextension : LibC::LPWSTR [In],szmimetype : LibC::LPWSTR [In],pactivate : IMFActivate [In]
  fun MFRegisterLocalByteStreamHandler(szfileextension : LibC::LPWSTR, szmimetype : LibC::LPWSTR, pactivate : IMFActivate) : HRESULT

  # Params # pstream : IMFByteStream [In],ppstreamwrapper : IMFByteStream* [In]
  fun MFCreateMFByteStreamWrapper(pstream : IMFByteStream, ppstreamwrapper : IMFByteStream*) : HRESULT

  # Params # szactivatableclassid : LibC::LPWSTR [In],pconfiguration : IUnknown [In],riid : Guid* [In],ppvobject : Void** [In]
  fun MFCreateMediaExtensionActivate(szactivatableclassid : LibC::LPWSTR, pconfiguration : IUnknown, riid : Guid*, ppvobject : Void**) : HRESULT

  # Params # pattributestomux : IMFCollection [In],ppmuxattribs : IMFAttributes* [In]
  fun MFCreateMuxStreamAttributes(pattributestomux : IMFCollection, ppmuxattribs : IMFAttributes*) : HRESULT

  # Params # pmediatypestomux : IMFCollection [In],ppmuxmediatype : IMFMediaType* [In]
  fun MFCreateMuxStreamMediaType(pmediatypestomux : IMFCollection, ppmuxmediatype : IMFMediaType*) : HRESULT

  # Params # psamplestomux : IMFCollection [In],ppmuxsample : IMFSample* [In]
  fun MFCreateMuxStreamSample(psamplestomux : IMFCollection, ppmuxsample : IMFSample*) : HRESULT

  # Params # formattype : Guid [In],pblock : UInt8* [In],cbsize : UInt32 [In]
  fun MFValidateMediaTypeSize(formattype : Guid, pblock : UInt8*, cbsize : UInt32) : HRESULT

  # Params # ppmftype : IMFMediaType* [In]
  fun MFCreateMediaType(ppmftype : IMFMediaType*) : HRESULT

  # Params # pmftype : IMFMediaType [In],ppmfvf : MFVIDEOFORMAT** [In],pcbsize : UInt32* [In]
  fun MFCreateMFVideoFormatFromMFMediaType(pmftype : IMFMediaType, ppmfvf : MFVIDEOFORMAT**, pcbsize : UInt32*) : HRESULT

  # Params # pmftype : IMFMediaType [In],ppwf : WAVEFORMATEX** [In],pcbsize : UInt32* [In],flags : UInt32 [In]
  fun MFCreateWaveFormatExFromMFMediaType(pmftype : IMFMediaType, ppwf : WAVEFORMATEX**, pcbsize : UInt32*, flags : UInt32) : HRESULT

  # Params # pmftype : IMFMediaType [In],pvih : VIDEOINFOHEADER* [In],cbbufsize : UInt32 [In],psubtype : Guid* [In]
  fun MFInitMediaTypeFromVideoInfoHeader(pmftype : IMFMediaType, pvih : VIDEOINFOHEADER*, cbbufsize : UInt32, psubtype : Guid*) : HRESULT

  # Params # pmftype : IMFMediaType [In],pvih2 : VIDEOINFOHEADER2* [In],cbbufsize : UInt32 [In],psubtype : Guid* [In]
  fun MFInitMediaTypeFromVideoInfoHeader2(pmftype : IMFMediaType, pvih2 : VIDEOINFOHEADER2*, cbbufsize : UInt32, psubtype : Guid*) : HRESULT

  # Params # pmftype : IMFMediaType [In],pmp1vi : MPEG1VIDEOINFO* [In],cbbufsize : UInt32 [In],psubtype : Guid* [In]
  fun MFInitMediaTypeFromMPEG1VideoInfo(pmftype : IMFMediaType, pmp1vi : MPEG1VIDEOINFO*, cbbufsize : UInt32, psubtype : Guid*) : HRESULT

  # Params # pmftype : IMFMediaType [In],pmp2vi : MPEG2VIDEOINFO* [In],cbbufsize : UInt32 [In],psubtype : Guid* [In]
  fun MFInitMediaTypeFromMPEG2VideoInfo(pmftype : IMFMediaType, pmp2vi : MPEG2VIDEOINFO*, cbbufsize : UInt32, psubtype : Guid*) : HRESULT

  # Params # pbmih : BITMAPINFOHEADER* [In],cbbufsize : UInt32 [In],pcbimagesize : UInt32* [In],pbknown : LibC::BOOL* [In]
  fun MFCalculateBitmapImageSize(pbmih : BITMAPINFOHEADER*, cbbufsize : UInt32, pcbimagesize : UInt32*, pbknown : LibC::BOOL*) : HRESULT

  # Params # guidsubtype : Guid* [In],unwidth : UInt32 [In],unheight : UInt32 [In],pcbimagesize : UInt32* [In]
  fun MFCalculateImageSize(guidsubtype : Guid*, unwidth : UInt32, unheight : UInt32, pcbimagesize : UInt32*) : HRESULT

  # Params # unnumerator : UInt32 [In],undenominator : UInt32 [In],punaveragetimeperframe : UInt64* [In]
  fun MFFrameRateToAverageTimePerFrame(unnumerator : UInt32, undenominator : UInt32, punaveragetimeperframe : UInt64*) : HRESULT

  # Params # unaveragetimeperframe : UInt64 [In],punnumerator : UInt32* [In],pundenominator : UInt32* [In]
  fun MFAverageTimePerFrameToFrameRate(unaveragetimeperframe : UInt64, punnumerator : UInt32*, pundenominator : UInt32*) : HRESULT

  # Params # pmftype : IMFMediaType [In],pmfvf : MFVIDEOFORMAT* [In],cbbufsize : UInt32 [In]
  fun MFInitMediaTypeFromMFVideoFormat(pmftype : IMFMediaType, pmfvf : MFVIDEOFORMAT*, cbbufsize : UInt32) : HRESULT

  # Params # pmftype : IMFMediaType [In],pwaveformat : WAVEFORMATEX* [In],cbbufsize : UInt32 [In]
  fun MFInitMediaTypeFromWaveFormatEx(pmftype : IMFMediaType, pwaveformat : WAVEFORMATEX*, cbbufsize : UInt32) : HRESULT

  # Params # pmftype : IMFMediaType [In],pamtype : AM_MEDIA_TYPE* [In]
  fun MFInitMediaTypeFromAMMediaType(pmftype : IMFMediaType, pamtype : AM_MEDIA_TYPE*) : HRESULT

  # Params # pmftype : IMFMediaType [In],guidformatblocktype : Guid [In],pamtype : AM_MEDIA_TYPE* [In]
  fun MFInitAMMediaTypeFromMFMediaType(pmftype : IMFMediaType, guidformatblocktype : Guid, pamtype : AM_MEDIA_TYPE*) : HRESULT

  # Params # pmftype : IMFMediaType [In],guidformatblocktype : Guid [In],ppamtype : AM_MEDIA_TYPE** [In]
  fun MFCreateAMMediaTypeFromMFMediaType(pmftype : IMFMediaType, guidformatblocktype : Guid, ppamtype : AM_MEDIA_TYPE**) : HRESULT

  # Params # pmftypefull : IMFMediaType [In],pmftypepartial : IMFMediaType [In]
  fun MFCompareFullToPartialMediaType(pmftypefull : IMFMediaType, pmftypepartial : IMFMediaType) : LibC::BOOL

  # Params # porig : IMFMediaType [In],majortype : Guid* [In],subtype : Guid* [In],ppwrap : IMFMediaType* [In]
  fun MFWrapMediaType(porig : IMFMediaType, majortype : Guid*, subtype : Guid*, ppwrap : IMFMediaType*) : HRESULT

  # Params # pwrap : IMFMediaType [In],pporig : IMFMediaType* [In]
  fun MFUnwrapMediaType(pwrap : IMFMediaType, pporig : IMFMediaType*) : HRESULT

  # Params # pvideoformat : MFVIDEOFORMAT* [In],ppivideomediatype : IMFVideoMediaType* [In]
  fun MFCreateVideoMediaType(pvideoformat : MFVIDEOFORMAT*, ppivideomediatype : IMFVideoMediaType*) : HRESULT

  # Params # pamsubtype : Guid* [In],ppivideomediatype : IMFVideoMediaType* [In]
  fun MFCreateVideoMediaTypeFromSubtype(pamsubtype : Guid*, ppivideomediatype : IMFVideoMediaType*) : HRESULT

  # Params # format : UInt32 [In]
  fun MFIsFormatYUV(format : UInt32) : LibC::BOOL

  # Params # pbmihbitmapinfoheader : BITMAPINFOHEADER* [In],dwpixelaspectratiox : UInt32 [In],dwpixelaspectratioy : UInt32 [In],interlacemode : MFVideoInterlaceMode [In],videoflags : UInt64 [In],qwframespersecondnumerator : UInt64 [In],qwframesperseconddenominator : UInt64 [In],dwmaxbitrate : UInt32 [In],ppivideomediatype : IMFVideoMediaType* [In]
  fun MFCreateVideoMediaTypeFromBitMapInfoHeader(pbmihbitmapinfoheader : BITMAPINFOHEADER*, dwpixelaspectratiox : UInt32, dwpixelaspectratioy : UInt32, interlacemode : MFVideoInterlaceMode, videoflags : UInt64, qwframespersecondnumerator : UInt64, qwframesperseconddenominator : UInt64, dwmaxbitrate : UInt32, ppivideomediatype : IMFVideoMediaType*) : HRESULT

  # Params # format : UInt32 [In],dwwidth : UInt32 [In],pstride : Int32* [In]
  fun MFGetStrideForBitmapInfoHeader(format : UInt32, dwwidth : UInt32, pstride : Int32*) : HRESULT

  # Params # format : UInt32 [In],dwwidth : UInt32 [In],dwheight : UInt32 [In],pdwplanesize : UInt32* [In]
  fun MFGetPlaneSize(format : UInt32, dwwidth : UInt32, dwheight : UInt32, pdwplanesize : UInt32*) : HRESULT

  # Params # pbmihbitmapinfoheader : BITMAPINFOHEADER* [In],cbbitmapinfoheader : UInt32 [In],dwpixelaspectratiox : UInt32 [In],dwpixelaspectratioy : UInt32 [In],interlacemode : MFVideoInterlaceMode [In],videoflags : UInt64 [In],dwframespersecondnumerator : UInt32 [In],dwframesperseconddenominator : UInt32 [In],dwmaxbitrate : UInt32 [In],ppivideomediatype : IMFVideoMediaType* [In]
  fun MFCreateVideoMediaTypeFromBitMapInfoHeaderEx(pbmihbitmapinfoheader : BITMAPINFOHEADER*, cbbitmapinfoheader : UInt32, dwpixelaspectratiox : UInt32, dwpixelaspectratioy : UInt32, interlacemode : MFVideoInterlaceMode, videoflags : UInt64, dwframespersecondnumerator : UInt32, dwframesperseconddenominator : UInt32, dwmaxbitrate : UInt32, ppivideomediatype : IMFVideoMediaType*) : HRESULT

  # Params # guidrepresentation : Guid [In],pvrepresentation : Void* [In],ppimediatype : IMFMediaType* [In]
  fun MFCreateMediaTypeFromRepresentation(guidrepresentation : Guid, pvrepresentation : Void*, ppimediatype : IMFMediaType*) : HRESULT

  # Params # paudioformat : WAVEFORMATEX* [In],ppiaudiomediatype : IMFAudioMediaType* [In]
  fun MFCreateAudioMediaType(paudioformat : WAVEFORMATEX*, ppiaudiomediatype : IMFAudioMediaType*) : HRESULT

  # Params # pvideoformat : MFVIDEOFORMAT* [In]
  fun MFGetUncompressedVideoFormat(pvideoformat : MFVIDEOFORMAT*) : UInt32

  # Params # pvideoformat : MFVIDEOFORMAT* [In],type : MFStandardVideoFormat [In]
  fun MFInitVideoFormat(pvideoformat : MFVIDEOFORMAT*, type : MFStandardVideoFormat) : HRESULT

  # Params # pvideoformat : MFVIDEOFORMAT* [In],dwwidth : UInt32 [In],dwheight : UInt32 [In],d3dfmt : UInt32 [In]
  fun MFInitVideoFormat_RGB(pvideoformat : MFVIDEOFORMAT*, dwwidth : UInt32, dwheight : UInt32, d3dfmt : UInt32) : HRESULT

  # Params # pdwtodxva : UInt32* [In],pfromformat : MFVIDEOFORMAT* [In]
  fun MFConvertColorInfoToDXVA(pdwtodxva : UInt32*, pfromformat : MFVIDEOFORMAT*) : HRESULT

  # Params # ptoformat : MFVIDEOFORMAT* [In],dwfromdxva : UInt32 [In]
  fun MFConvertColorInfoFromDXVA(ptoformat : MFVIDEOFORMAT*, dwfromdxva : UInt32) : HRESULT

  # Params # pdest : UInt8* [In],ldeststride : Int32 [In],psrc : UInt8* [In],lsrcstride : Int32 [In],dwwidthinbytes : UInt32 [In],dwlines : UInt32 [In]
  fun MFCopyImage(pdest : UInt8*, ldeststride : Int32, psrc : UInt8*, lsrcstride : Int32, dwwidthinbytes : UInt32, dwlines : UInt32) : HRESULT

  # Params # pdest : Float32* [In],psrc : UInt16* [In],dwcount : UInt32 [In]
  fun MFConvertFromFP16Array(pdest : Float32*, psrc : UInt16*, dwcount : UInt32) : HRESULT

  # Params # pdest : UInt16* [In],psrc : Float32* [In],dwcount : UInt32 [In]
  fun MFConvertToFP16Array(pdest : UInt16*, psrc : Float32*, dwcount : UInt32) : HRESULT

  # Params # dwwidth : UInt32 [In],dwheight : UInt32 [In],dwfourcc : UInt32 [In],fbottomup : LibC::BOOL [In],ppbuffer : IMFMediaBuffer* [In]
  fun MFCreate2DMediaBuffer(dwwidth : UInt32, dwheight : UInt32, dwfourcc : UInt32, fbottomup : LibC::BOOL, ppbuffer : IMFMediaBuffer*) : HRESULT

  # Params # pmediatype : IMFMediaType [In],llduration : Int64 [In],dwminlength : UInt32 [In],dwminalignment : UInt32 [In],ppbuffer : IMFMediaBuffer* [In]
  fun MFCreateMediaBufferFromMediaType(pmediatype : IMFMediaType, llduration : Int64, dwminlength : UInt32, dwminalignment : UInt32, ppbuffer : IMFMediaBuffer*) : HRESULT

  # Params # ppimfcollection : IMFCollection* [In]
  fun MFCreateCollection(ppimfcollection : IMFCollection*) : HRESULT

  # Params # nsize : LibC::UINT_PTR [In],dwflags : UInt32 [In],pszfile : PSTR [In],line : Int32 [In],eat : EAllocationType [In]
  fun MFHeapAlloc(nsize : LibC::UINT_PTR, dwflags : UInt32, pszfile : PSTR, line : Int32, eat : EAllocationType) : Void*

  # Params # pv : Void* [In]
  fun MFHeapFree(pv : Void*) : Void

  # Params # a : Int64 [In],b : Int64 [In],c : Int64 [In],d : Int64 [In]
  fun MFllMulDiv(a : Int64, b : Int64, c : Int64, d : Int64) : Int64

  # Params # guidprotectionsystemid : Guid* [In],pclsid : Guid* [In]
  fun MFGetContentProtectionSystemCLSID(guidprotectionsystemid : Guid*, pclsid : Guid*) : HRESULT

  # Params # psample : IMFSample [In],psampletoadd : IMFSample [In],dwmaxmergeddurationinms : UInt32 [In],pmerged : LibC::BOOL* [In]
  fun MFCombineSamples(psample : IMFSample, psampletoadd : IMFSample, dwmaxmergeddurationinms : UInt32, pmerged : LibC::BOOL*) : HRESULT

  # Params # psample : IMFSample [In],poutputsamples : IMFSample* [In],dwoutputsamplemaxcount : UInt32 [In],pdwoutputsamplecount : UInt32* [In]
  fun MFSplitSample(psample : IMFSample, poutputsamples : IMFSample*, dwoutputsamplemaxcount : UInt32, pdwoutputsamplecount : UInt32*) : HRESULT

  # Params # pwszurl : LibC::LPWSTR [In],pattributes : IMFAttributes [In],ppsourcereader : IMFSourceReader* [In]
  fun MFCreateSourceReaderFromURL(pwszurl : LibC::LPWSTR, pattributes : IMFAttributes, ppsourcereader : IMFSourceReader*) : HRESULT

  # Params # pbytestream : IMFByteStream [In],pattributes : IMFAttributes [In],ppsourcereader : IMFSourceReader* [In]
  fun MFCreateSourceReaderFromByteStream(pbytestream : IMFByteStream, pattributes : IMFAttributes, ppsourcereader : IMFSourceReader*) : HRESULT

  # Params # pmediasource : IMFMediaSource [In],pattributes : IMFAttributes [In],ppsourcereader : IMFSourceReader* [In]
  fun MFCreateSourceReaderFromMediaSource(pmediasource : IMFMediaSource, pattributes : IMFAttributes, ppsourcereader : IMFSourceReader*) : HRESULT

  # Params # pwszoutputurl : LibC::LPWSTR [In],pbytestream : IMFByteStream [In],pattributes : IMFAttributes [In],ppsinkwriter : IMFSinkWriter* [In]
  fun MFCreateSinkWriterFromURL(pwszoutputurl : LibC::LPWSTR, pbytestream : IMFByteStream, pattributes : IMFAttributes, ppsinkwriter : IMFSinkWriter*) : HRESULT

  # Params # pmediasink : IMFMediaSink [In],pattributes : IMFAttributes [In],ppsinkwriter : IMFSinkWriter* [In]
  fun MFCreateSinkWriterFromMediaSink(pmediasink : IMFMediaSink, pattributes : IMFAttributes, ppsinkwriter : IMFSinkWriter*) : HRESULT

  # Params # powner : IUnknown [In],riiddevice : Guid* [In],riid : Guid* [In],ppvideopresenter : Void** [In]
  fun MFCreateVideoPresenter(powner : IUnknown, riiddevice : Guid*, riid : Guid*, ppvideopresenter : Void**) : HRESULT

  # Params # powner : IUnknown [In],riiddevice : Guid* [In],riid : Guid* [In],ppv : Void** [In]
  fun MFCreateVideoMixer(powner : IUnknown, riiddevice : Guid*, riid : Guid*, ppv : Void**) : HRESULT

  # Params # pmixerowner : IUnknown [In],ppresenterowner : IUnknown [In],riidmixer : Guid* [In],ppvvideomixer : Void** [In],riidpresenter : Guid* [In],ppvvideopresenter : Void** [In]
  fun MFCreateVideoMixerAndPresenter(pmixerowner : IUnknown, ppresenterowner : IUnknown, riidmixer : Guid*, ppvvideomixer : Void**, riidpresenter : Guid*, ppvvideopresenter : Void**) : HRESULT

  # Params # riidrenderer : Guid* [In],ppvideorenderer : Void** [In]
  fun MFCreateVideoRenderer(riidrenderer : Guid*, ppvideorenderer : Void**) : HRESULT

  # Params # punksurface : IUnknown [In],ppsample : IMFSample* [In]
  fun MFCreateVideoSampleFromSurface(punksurface : IUnknown, ppsample : IMFSample*) : HRESULT

  # Params # riid : Guid* [In],ppsampleallocator : Void** [In]
  fun MFCreateVideoSampleAllocator(riid : Guid*, ppsampleallocator : Void**) : HRESULT

  # Params # pwszurl : LibC::LPWSTR [In],fstartplayback : LibC::BOOL [In],creationoptions : MFP_CREATION_OPTIONS [In],pcallback : IMFPMediaPlayerCallback [In],hwnd : LibC::HANDLE [In],ppmediaplayer : IMFPMediaPlayer* [In]
  fun MFPCreateMediaPlayer(pwszurl : LibC::LPWSTR, fstartplayback : LibC::BOOL, creationoptions : MFP_CREATION_OPTIONS, pcallback : IMFPMediaPlayerCallback, hwnd : LibC::HANDLE, ppmediaplayer : IMFPMediaPlayer*) : HRESULT

  # Params # pmphost : IMFPMPHostApp [In],objectstream : IStream [In],classid : LibC::LPWSTR [In],activate : IMFActivate* [In]
  fun MFCreateEncryptedMediaExtensionsStoreActivate(pmphost : IMFPMPHostApp, objectstream : IStream, classid : LibC::LPWSTR, activate : IMFActivate*) : HRESULT

  # Params # type : MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0001 [In],lifetime : MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0002 [In],access : MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0003 [In],friendlyname : LibC::LPWSTR [In],sourceid : LibC::LPWSTR [In],categories : Guid* [In],categorycount : UInt32 [In],virtualcamera : IMFVirtualCamera* [In]
  fun MFCreateVirtualCamera(type : MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0001, lifetime : MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0002, access : MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0003, friendlyname : LibC::LPWSTR, sourceid : LibC::LPWSTR, categories : Guid*, categorycount : UInt32, virtualcamera : IMFVirtualCamera*) : HRESULT

  # Params # type : MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0001 [In],supported : LibC::BOOL* [In]
  fun MFIsVirtualCameraTypeSupported(type : MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0001, supported : LibC::BOOL*) : HRESULT

  # Params # hdcptype : OPM_HDCP_TYPE [In]
  fun OPMXboxEnableHDCP(hdcptype : OPM_HDCP_TYPE) : HRESULT

  # Params # phdcpstatus : OPM_HDCP_STATUS* [In]
  fun OPMXboxGetHDCPStatus(phdcpstatus : OPM_HDCP_STATUS*) : HRESULT

  # Params # phdcpstatus : OPM_HDCP_STATUS* [In],phdcptype : OPM_HDCP_TYPE* [In]
  fun OPMXboxGetHDCPStatusAndType(phdcpstatus : OPM_HDCP_STATUS*, phdcptype : OPM_HDCP_TYPE*) : HRESULT
end
struct LibWin32::ICodecAPI
  def query_interface(this : ICodecAPI*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ICodecAPI*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ICodecAPI*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def is_supported(this : ICodecAPI*, api : Guid*) : HRESULT
    @lpVtbl.value.is_supported.call(this, api)
  end
  def is_modifiable(this : ICodecAPI*, api : Guid*) : HRESULT
    @lpVtbl.value.is_modifiable.call(this, api)
  end
  def get_parameter_range(this : ICodecAPI*, api : Guid*, valuemin : VARIANT*, valuemax : VARIANT*, steppingdelta : VARIANT*) : HRESULT
    @lpVtbl.value.get_parameter_range.call(this, api, valuemin, valuemax, steppingdelta)
  end
  def get_parameter_values(this : ICodecAPI*, api : Guid*, values : VARIANT**, valuescount : UInt32*) : HRESULT
    @lpVtbl.value.get_parameter_values.call(this, api, values, valuescount)
  end
  def get_default_value(this : ICodecAPI*, api : Guid*, value : VARIANT*) : HRESULT
    @lpVtbl.value.get_default_value.call(this, api, value)
  end
  def get_value(this : ICodecAPI*, api : Guid*, value : VARIANT*) : HRESULT
    @lpVtbl.value.get_value.call(this, api, value)
  end
  def set_value(this : ICodecAPI*, api : Guid*, value : VARIANT*) : HRESULT
    @lpVtbl.value.set_value.call(this, api, value)
  end
  def register_for_event(this : ICodecAPI*, api : Guid*, userdata : LibC::IntPtrT) : HRESULT
    @lpVtbl.value.register_for_event.call(this, api, userdata)
  end
  def unregister_for_event(this : ICodecAPI*, api : Guid*) : HRESULT
    @lpVtbl.value.unregister_for_event.call(this, api)
  end
  def set_all_defaults(this : ICodecAPI*) : HRESULT
    @lpVtbl.value.set_all_defaults.call(this)
  end
  def set_value_with_notify(this : ICodecAPI*, api : Guid*, value : VARIANT*, changedparam : Guid**, changedparamcount : UInt32*) : HRESULT
    @lpVtbl.value.set_value_with_notify.call(this, api, value, changedparam, changedparamcount)
  end
  def set_all_defaults_with_notify(this : ICodecAPI*, changedparam : Guid**, changedparamcount : UInt32*) : HRESULT
    @lpVtbl.value.set_all_defaults_with_notify.call(this, changedparam, changedparamcount)
  end
  def get_all_settings(this : ICodecAPI*, midl__icodecapi0000 : IStream) : HRESULT
    @lpVtbl.value.get_all_settings.call(this, midl__icodecapi0000)
  end
  def set_all_settings(this : ICodecAPI*, midl__icodecapi0001 : IStream) : HRESULT
    @lpVtbl.value.set_all_settings.call(this, midl__icodecapi0001)
  end
  def set_all_settings_with_notify(this : ICodecAPI*, midl__icodecapi0002 : IStream, changedparam : Guid**, changedparamcount : UInt32*) : HRESULT
    @lpVtbl.value.set_all_settings_with_notify.call(this, midl__icodecapi0002, changedparam, changedparamcount)
  end
end
struct LibWin32::IDirect3D9ExOverlayExtension
  def query_interface(this : IDirect3D9ExOverlayExtension*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDirect3D9ExOverlayExtension*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDirect3D9ExOverlayExtension*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def check_device_overlay_type(this : IDirect3D9ExOverlayExtension*, adapter : UInt32, devtype : D3DDEVTYPE, overlaywidth : UInt32, overlayheight : UInt32, overlayformat : D3DFORMAT, pdisplaymode : D3DDISPLAYMODEEX*, displayrotation : D3DDISPLAYROTATION, poverlaycaps : D3DOVERLAYCAPS*) : HRESULT
    @lpVtbl.value.check_device_overlay_type.call(this, adapter, devtype, overlaywidth, overlayheight, overlayformat, pdisplaymode, displayrotation, poverlaycaps)
  end
end
struct LibWin32::IDirect3DDevice9Video
  def query_interface(this : IDirect3DDevice9Video*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDirect3DDevice9Video*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDirect3DDevice9Video*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_content_protection_caps(this : IDirect3DDevice9Video*, pcryptotype : Guid*, pdecodeprofile : Guid*, pcaps : D3DCONTENTPROTECTIONCAPS*) : HRESULT
    @lpVtbl.value.get_content_protection_caps.call(this, pcryptotype, pdecodeprofile, pcaps)
  end
  def create_authenticated_channel(this : IDirect3DDevice9Video*, channeltype : D3DAUTHENTICATEDCHANNELTYPE, ppauthenticatedchannel : IDirect3DAuthenticatedChannel9*, pchannelhandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_authenticated_channel.call(this, channeltype, ppauthenticatedchannel, pchannelhandle)
  end
  def create_crypto_session(this : IDirect3DDevice9Video*, pcryptotype : Guid*, pdecodeprofile : Guid*, ppcryptosession : IDirect3DCryptoSession9*, pcryptohandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_crypto_session.call(this, pcryptotype, pdecodeprofile, ppcryptosession, pcryptohandle)
  end
end
struct LibWin32::IDirect3DAuthenticatedChannel9
  def query_interface(this : IDirect3DAuthenticatedChannel9*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDirect3DAuthenticatedChannel9*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDirect3DAuthenticatedChannel9*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_certificate_size(this : IDirect3DAuthenticatedChannel9*, pcertificatesize : UInt32*) : HRESULT
    @lpVtbl.value.get_certificate_size.call(this, pcertificatesize)
  end
  def get_certificate(this : IDirect3DAuthenticatedChannel9*, certifactesize : UInt32, ppcertificate : UInt8*) : HRESULT
    @lpVtbl.value.get_certificate.call(this, certifactesize, ppcertificate)
  end
  def negotiate_key_exchange(this : IDirect3DAuthenticatedChannel9*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.negotiate_key_exchange.call(this, datasize, pdata)
  end
  def query(this : IDirect3DAuthenticatedChannel9*, inputsize : UInt32, pinput : Void*, outputsize : UInt32, poutput : Void*) : HRESULT
    @lpVtbl.value.query.call(this, inputsize, pinput, outputsize, poutput)
  end
  def configure(this : IDirect3DAuthenticatedChannel9*, inputsize : UInt32, pinput : Void*, poutput : D3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT*) : HRESULT
    @lpVtbl.value.configure.call(this, inputsize, pinput, poutput)
  end
end
struct LibWin32::IDirect3DCryptoSession9
  def query_interface(this : IDirect3DCryptoSession9*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDirect3DCryptoSession9*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDirect3DCryptoSession9*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_certificate_size(this : IDirect3DCryptoSession9*, pcertificatesize : UInt32*) : HRESULT
    @lpVtbl.value.get_certificate_size.call(this, pcertificatesize)
  end
  def get_certificate(this : IDirect3DCryptoSession9*, certifactesize : UInt32, ppcertificate : UInt8*) : HRESULT
    @lpVtbl.value.get_certificate.call(this, certifactesize, ppcertificate)
  end
  def negotiate_key_exchange(this : IDirect3DCryptoSession9*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.negotiate_key_exchange.call(this, datasize, pdata)
  end
  def encryption_blt(this : IDirect3DCryptoSession9*, psrcsurface : IDirect3DSurface9, pdstsurface : IDirect3DSurface9, dstsurfacesize : UInt32, piv : Void*) : HRESULT
    @lpVtbl.value.encryption_blt.call(this, psrcsurface, pdstsurface, dstsurfacesize, piv)
  end
  def decryption_blt(this : IDirect3DCryptoSession9*, psrcsurface : IDirect3DSurface9, pdstsurface : IDirect3DSurface9, srcsurfacesize : UInt32, pencryptedblockinfo : D3DENCRYPTED_BLOCK_INFO*, pcontentkey : Void*, piv : Void*) : HRESULT
    @lpVtbl.value.decryption_blt.call(this, psrcsurface, pdstsurface, srcsurfacesize, pencryptedblockinfo, pcontentkey, piv)
  end
  def get_surface_pitch(this : IDirect3DCryptoSession9*, psrcsurface : IDirect3DSurface9, psurfacepitch : UInt32*) : HRESULT
    @lpVtbl.value.get_surface_pitch.call(this, psrcsurface, psurfacepitch)
  end
  def start_session_key_refresh(this : IDirect3DCryptoSession9*, prandomnumber : Void*, randomnumbersize : UInt32) : HRESULT
    @lpVtbl.value.start_session_key_refresh.call(this, prandomnumber, randomnumbersize)
  end
  def finish_session_key_refresh(this : IDirect3DCryptoSession9*) : HRESULT
    @lpVtbl.value.finish_session_key_refresh.call(this)
  end
  def get_encryption_blt_key(this : IDirect3DCryptoSession9*, preadbackkey : Void*, keysize : UInt32) : HRESULT
    @lpVtbl.value.get_encryption_blt_key.call(this, preadbackkey, keysize)
  end
end
struct LibWin32::ID3D12VideoDecoderHeap
  def query_interface(this : ID3D12VideoDecoderHeap*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D12VideoDecoderHeap*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D12VideoDecoderHeap*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_private_data(this : ID3D12VideoDecoderHeap*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D12VideoDecoderHeap*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D12VideoDecoderHeap*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def set_name(this : ID3D12VideoDecoderHeap*, name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.call(this, name)
  end
  def get_device(this : ID3D12VideoDecoderHeap*, riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.call(this, riid, ppvdevice)
  end
  def get_desc(this : ID3D12VideoDecoderHeap*) : D3D12_VIDEO_DECODER_HEAP_DESC
    @lpVtbl.value.get_desc.call(this)
  end
end
struct LibWin32::ID3D12VideoDevice
  def query_interface(this : ID3D12VideoDevice*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D12VideoDevice*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D12VideoDevice*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def check_feature_support(this : ID3D12VideoDevice*, featurevideo : D3D12_FEATURE_VIDEO, pfeaturesupportdata : Void*, featuresupportdatasize : UInt32) : HRESULT
    @lpVtbl.value.check_feature_support.call(this, featurevideo, pfeaturesupportdata, featuresupportdatasize)
  end
  def create_video_decoder(this : ID3D12VideoDevice*, pdesc : D3D12_VIDEO_DECODER_DESC*, riid : Guid*, ppvideodecoder : Void**) : HRESULT
    @lpVtbl.value.create_video_decoder.call(this, pdesc, riid, ppvideodecoder)
  end
  def create_video_decoder_heap(this : ID3D12VideoDevice*, pvideodecoderheapdesc : D3D12_VIDEO_DECODER_HEAP_DESC*, riid : Guid*, ppvideodecoderheap : Void**) : HRESULT
    @lpVtbl.value.create_video_decoder_heap.call(this, pvideodecoderheapdesc, riid, ppvideodecoderheap)
  end
  def create_video_processor(this : ID3D12VideoDevice*, nodemask : UInt32, poutputstreamdesc : D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*, numinputstreamdescs : UInt32, pinputstreamdescs : D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, riid : Guid*, ppvideoprocessor : Void**) : HRESULT
    @lpVtbl.value.create_video_processor.call(this, nodemask, poutputstreamdesc, numinputstreamdescs, pinputstreamdescs, riid, ppvideoprocessor)
  end
end
struct LibWin32::ID3D12VideoDecoder
  def query_interface(this : ID3D12VideoDecoder*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D12VideoDecoder*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D12VideoDecoder*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_private_data(this : ID3D12VideoDecoder*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D12VideoDecoder*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D12VideoDecoder*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def set_name(this : ID3D12VideoDecoder*, name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.call(this, name)
  end
  def get_device(this : ID3D12VideoDecoder*, riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.call(this, riid, ppvdevice)
  end
  def get_desc(this : ID3D12VideoDecoder*) : D3D12_VIDEO_DECODER_DESC
    @lpVtbl.value.get_desc.call(this)
  end
end
struct LibWin32::ID3D12VideoProcessor
  def query_interface(this : ID3D12VideoProcessor*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D12VideoProcessor*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D12VideoProcessor*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_private_data(this : ID3D12VideoProcessor*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D12VideoProcessor*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D12VideoProcessor*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def set_name(this : ID3D12VideoProcessor*, name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.call(this, name)
  end
  def get_device(this : ID3D12VideoProcessor*, riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.call(this, riid, ppvdevice)
  end
  def get_node_mask(this : ID3D12VideoProcessor*) : UInt32
    @lpVtbl.value.get_node_mask.call(this)
  end
  def get_num_input_stream_descs(this : ID3D12VideoProcessor*) : UInt32
    @lpVtbl.value.get_num_input_stream_descs.call(this)
  end
  def get_input_stream_descs(this : ID3D12VideoProcessor*, numinputstreamdescs : UInt32, pinputstreamdescs : D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*) : HRESULT
    @lpVtbl.value.get_input_stream_descs.call(this, numinputstreamdescs, pinputstreamdescs)
  end
  def get_output_stream_desc(this : ID3D12VideoProcessor*) : D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC
    @lpVtbl.value.get_output_stream_desc.call(this)
  end
end
struct LibWin32::ID3D12VideoDecodeCommandList
  def query_interface(this : ID3D12VideoDecodeCommandList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D12VideoDecodeCommandList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D12VideoDecodeCommandList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_private_data(this : ID3D12VideoDecodeCommandList*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D12VideoDecodeCommandList*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D12VideoDecodeCommandList*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def set_name(this : ID3D12VideoDecodeCommandList*, name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.call(this, name)
  end
  def get_device(this : ID3D12VideoDecodeCommandList*, riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.call(this, riid, ppvdevice)
  end
  def get_type(this : ID3D12VideoDecodeCommandList*) : D3D12_COMMAND_LIST_TYPE
    @lpVtbl.value.get_type.call(this)
  end
  def close(this : ID3D12VideoDecodeCommandList*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def reset(this : ID3D12VideoDecodeCommandList*, pallocator : ID3D12CommandAllocator) : HRESULT
    @lpVtbl.value.reset.call(this, pallocator)
  end
  def clear_state(this : ID3D12VideoDecodeCommandList*) : Void
    @lpVtbl.value.clear_state.call(this)
  end
  def resource_barrier(this : ID3D12VideoDecodeCommandList*, numbarriers : UInt32, pbarriers : D3D12_RESOURCE_BARRIER*) : Void
    @lpVtbl.value.resource_barrier.call(this, numbarriers, pbarriers)
  end
  def discard_resource(this : ID3D12VideoDecodeCommandList*, presource : ID3D12Resource, pregion : D3D12_DISCARD_REGION*) : Void
    @lpVtbl.value.discard_resource.call(this, presource, pregion)
  end
  def begin_query(this : ID3D12VideoDecodeCommandList*, pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.begin_query.call(this, pqueryheap, type, index)
  end
  def end_query(this : ID3D12VideoDecodeCommandList*, pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.end_query.call(this, pqueryheap, type, index)
  end
  def resolve_query_data(this : ID3D12VideoDecodeCommandList*, pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, startindex : UInt32, numqueries : UInt32, pdestinationbuffer : ID3D12Resource, aligneddestinationbufferoffset : UInt64) : Void
    @lpVtbl.value.resolve_query_data.call(this, pqueryheap, type, startindex, numqueries, pdestinationbuffer, aligneddestinationbufferoffset)
  end
  def set_predication(this : ID3D12VideoDecodeCommandList*, pbuffer : ID3D12Resource, alignedbufferoffset : UInt64, operation : D3D12_PREDICATION_OP) : Void
    @lpVtbl.value.set_predication.call(this, pbuffer, alignedbufferoffset, operation)
  end
  def set_marker(this : ID3D12VideoDecodeCommandList*, metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.set_marker.call(this, metadata, pdata, size)
  end
  def begin_event(this : ID3D12VideoDecodeCommandList*, metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.begin_event.call(this, metadata, pdata, size)
  end
  def end_event(this : ID3D12VideoDecodeCommandList*) : Void
    @lpVtbl.value.end_event.call(this)
  end
  def decode_frame(this : ID3D12VideoDecodeCommandList*, pdecoder : ID3D12VideoDecoder, poutputarguments : D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS*, pinputarguments : D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*) : Void
    @lpVtbl.value.decode_frame.call(this, pdecoder, poutputarguments, pinputarguments)
  end
  def write_buffer_immediate(this : ID3D12VideoDecodeCommandList*, count : UInt32, pparams : D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pmodes : D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
    @lpVtbl.value.write_buffer_immediate.call(this, count, pparams, pmodes)
  end
end
struct LibWin32::ID3D12VideoProcessCommandList
  def query_interface(this : ID3D12VideoProcessCommandList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D12VideoProcessCommandList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D12VideoProcessCommandList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_private_data(this : ID3D12VideoProcessCommandList*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D12VideoProcessCommandList*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D12VideoProcessCommandList*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def set_name(this : ID3D12VideoProcessCommandList*, name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.call(this, name)
  end
  def get_device(this : ID3D12VideoProcessCommandList*, riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.call(this, riid, ppvdevice)
  end
  def get_type(this : ID3D12VideoProcessCommandList*) : D3D12_COMMAND_LIST_TYPE
    @lpVtbl.value.get_type.call(this)
  end
  def close(this : ID3D12VideoProcessCommandList*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def reset(this : ID3D12VideoProcessCommandList*, pallocator : ID3D12CommandAllocator) : HRESULT
    @lpVtbl.value.reset.call(this, pallocator)
  end
  def clear_state(this : ID3D12VideoProcessCommandList*) : Void
    @lpVtbl.value.clear_state.call(this)
  end
  def resource_barrier(this : ID3D12VideoProcessCommandList*, numbarriers : UInt32, pbarriers : D3D12_RESOURCE_BARRIER*) : Void
    @lpVtbl.value.resource_barrier.call(this, numbarriers, pbarriers)
  end
  def discard_resource(this : ID3D12VideoProcessCommandList*, presource : ID3D12Resource, pregion : D3D12_DISCARD_REGION*) : Void
    @lpVtbl.value.discard_resource.call(this, presource, pregion)
  end
  def begin_query(this : ID3D12VideoProcessCommandList*, pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.begin_query.call(this, pqueryheap, type, index)
  end
  def end_query(this : ID3D12VideoProcessCommandList*, pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.end_query.call(this, pqueryheap, type, index)
  end
  def resolve_query_data(this : ID3D12VideoProcessCommandList*, pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, startindex : UInt32, numqueries : UInt32, pdestinationbuffer : ID3D12Resource, aligneddestinationbufferoffset : UInt64) : Void
    @lpVtbl.value.resolve_query_data.call(this, pqueryheap, type, startindex, numqueries, pdestinationbuffer, aligneddestinationbufferoffset)
  end
  def set_predication(this : ID3D12VideoProcessCommandList*, pbuffer : ID3D12Resource, alignedbufferoffset : UInt64, operation : D3D12_PREDICATION_OP) : Void
    @lpVtbl.value.set_predication.call(this, pbuffer, alignedbufferoffset, operation)
  end
  def set_marker(this : ID3D12VideoProcessCommandList*, metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.set_marker.call(this, metadata, pdata, size)
  end
  def begin_event(this : ID3D12VideoProcessCommandList*, metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.begin_event.call(this, metadata, pdata, size)
  end
  def end_event(this : ID3D12VideoProcessCommandList*) : Void
    @lpVtbl.value.end_event.call(this)
  end
  def process_frames(this : ID3D12VideoProcessCommandList*, pvideoprocessor : ID3D12VideoProcessor, poutputarguments : D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*, numinputstreams : UInt32, pinputarguments : D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS*) : Void
    @lpVtbl.value.process_frames.call(this, pvideoprocessor, poutputarguments, numinputstreams, pinputarguments)
  end
  def write_buffer_immediate(this : ID3D12VideoProcessCommandList*, count : UInt32, pparams : D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pmodes : D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
    @lpVtbl.value.write_buffer_immediate.call(this, count, pparams, pmodes)
  end
end
struct LibWin32::ID3D12VideoDecodeCommandList1
  def query_interface(this : ID3D12VideoDecodeCommandList1*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D12VideoDecodeCommandList1*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D12VideoDecodeCommandList1*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_private_data(this : ID3D12VideoDecodeCommandList1*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D12VideoDecodeCommandList1*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D12VideoDecodeCommandList1*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def set_name(this : ID3D12VideoDecodeCommandList1*, name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.call(this, name)
  end
  def get_device(this : ID3D12VideoDecodeCommandList1*, riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.call(this, riid, ppvdevice)
  end
  def get_type(this : ID3D12VideoDecodeCommandList1*) : D3D12_COMMAND_LIST_TYPE
    @lpVtbl.value.get_type.call(this)
  end
  def close(this : ID3D12VideoDecodeCommandList1*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def reset(this : ID3D12VideoDecodeCommandList1*, pallocator : ID3D12CommandAllocator) : HRESULT
    @lpVtbl.value.reset.call(this, pallocator)
  end
  def clear_state(this : ID3D12VideoDecodeCommandList1*) : Void
    @lpVtbl.value.clear_state.call(this)
  end
  def resource_barrier(this : ID3D12VideoDecodeCommandList1*, numbarriers : UInt32, pbarriers : D3D12_RESOURCE_BARRIER*) : Void
    @lpVtbl.value.resource_barrier.call(this, numbarriers, pbarriers)
  end
  def discard_resource(this : ID3D12VideoDecodeCommandList1*, presource : ID3D12Resource, pregion : D3D12_DISCARD_REGION*) : Void
    @lpVtbl.value.discard_resource.call(this, presource, pregion)
  end
  def begin_query(this : ID3D12VideoDecodeCommandList1*, pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.begin_query.call(this, pqueryheap, type, index)
  end
  def end_query(this : ID3D12VideoDecodeCommandList1*, pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.end_query.call(this, pqueryheap, type, index)
  end
  def resolve_query_data(this : ID3D12VideoDecodeCommandList1*, pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, startindex : UInt32, numqueries : UInt32, pdestinationbuffer : ID3D12Resource, aligneddestinationbufferoffset : UInt64) : Void
    @lpVtbl.value.resolve_query_data.call(this, pqueryheap, type, startindex, numqueries, pdestinationbuffer, aligneddestinationbufferoffset)
  end
  def set_predication(this : ID3D12VideoDecodeCommandList1*, pbuffer : ID3D12Resource, alignedbufferoffset : UInt64, operation : D3D12_PREDICATION_OP) : Void
    @lpVtbl.value.set_predication.call(this, pbuffer, alignedbufferoffset, operation)
  end
  def set_marker(this : ID3D12VideoDecodeCommandList1*, metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.set_marker.call(this, metadata, pdata, size)
  end
  def begin_event(this : ID3D12VideoDecodeCommandList1*, metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.begin_event.call(this, metadata, pdata, size)
  end
  def end_event(this : ID3D12VideoDecodeCommandList1*) : Void
    @lpVtbl.value.end_event.call(this)
  end
  def decode_frame(this : ID3D12VideoDecodeCommandList1*, pdecoder : ID3D12VideoDecoder, poutputarguments : D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS*, pinputarguments : D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*) : Void
    @lpVtbl.value.decode_frame.call(this, pdecoder, poutputarguments, pinputarguments)
  end
  def write_buffer_immediate(this : ID3D12VideoDecodeCommandList1*, count : UInt32, pparams : D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pmodes : D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
    @lpVtbl.value.write_buffer_immediate.call(this, count, pparams, pmodes)
  end
  def decode_frame1(this : ID3D12VideoDecodeCommandList1*, pdecoder : ID3D12VideoDecoder, poutputarguments : D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1*, pinputarguments : D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*) : Void
    @lpVtbl.value.decode_frame1.call(this, pdecoder, poutputarguments, pinputarguments)
  end
end
struct LibWin32::ID3D12VideoProcessCommandList1
  def query_interface(this : ID3D12VideoProcessCommandList1*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D12VideoProcessCommandList1*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D12VideoProcessCommandList1*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_private_data(this : ID3D12VideoProcessCommandList1*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D12VideoProcessCommandList1*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D12VideoProcessCommandList1*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def set_name(this : ID3D12VideoProcessCommandList1*, name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.call(this, name)
  end
  def get_device(this : ID3D12VideoProcessCommandList1*, riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.call(this, riid, ppvdevice)
  end
  def get_type(this : ID3D12VideoProcessCommandList1*) : D3D12_COMMAND_LIST_TYPE
    @lpVtbl.value.get_type.call(this)
  end
  def close(this : ID3D12VideoProcessCommandList1*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def reset(this : ID3D12VideoProcessCommandList1*, pallocator : ID3D12CommandAllocator) : HRESULT
    @lpVtbl.value.reset.call(this, pallocator)
  end
  def clear_state(this : ID3D12VideoProcessCommandList1*) : Void
    @lpVtbl.value.clear_state.call(this)
  end
  def resource_barrier(this : ID3D12VideoProcessCommandList1*, numbarriers : UInt32, pbarriers : D3D12_RESOURCE_BARRIER*) : Void
    @lpVtbl.value.resource_barrier.call(this, numbarriers, pbarriers)
  end
  def discard_resource(this : ID3D12VideoProcessCommandList1*, presource : ID3D12Resource, pregion : D3D12_DISCARD_REGION*) : Void
    @lpVtbl.value.discard_resource.call(this, presource, pregion)
  end
  def begin_query(this : ID3D12VideoProcessCommandList1*, pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.begin_query.call(this, pqueryheap, type, index)
  end
  def end_query(this : ID3D12VideoProcessCommandList1*, pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.end_query.call(this, pqueryheap, type, index)
  end
  def resolve_query_data(this : ID3D12VideoProcessCommandList1*, pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, startindex : UInt32, numqueries : UInt32, pdestinationbuffer : ID3D12Resource, aligneddestinationbufferoffset : UInt64) : Void
    @lpVtbl.value.resolve_query_data.call(this, pqueryheap, type, startindex, numqueries, pdestinationbuffer, aligneddestinationbufferoffset)
  end
  def set_predication(this : ID3D12VideoProcessCommandList1*, pbuffer : ID3D12Resource, alignedbufferoffset : UInt64, operation : D3D12_PREDICATION_OP) : Void
    @lpVtbl.value.set_predication.call(this, pbuffer, alignedbufferoffset, operation)
  end
  def set_marker(this : ID3D12VideoProcessCommandList1*, metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.set_marker.call(this, metadata, pdata, size)
  end
  def begin_event(this : ID3D12VideoProcessCommandList1*, metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.begin_event.call(this, metadata, pdata, size)
  end
  def end_event(this : ID3D12VideoProcessCommandList1*) : Void
    @lpVtbl.value.end_event.call(this)
  end
  def process_frames(this : ID3D12VideoProcessCommandList1*, pvideoprocessor : ID3D12VideoProcessor, poutputarguments : D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*, numinputstreams : UInt32, pinputarguments : D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS*) : Void
    @lpVtbl.value.process_frames.call(this, pvideoprocessor, poutputarguments, numinputstreams, pinputarguments)
  end
  def write_buffer_immediate(this : ID3D12VideoProcessCommandList1*, count : UInt32, pparams : D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pmodes : D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
    @lpVtbl.value.write_buffer_immediate.call(this, count, pparams, pmodes)
  end
  def process_frames1(this : ID3D12VideoProcessCommandList1*, pvideoprocessor : ID3D12VideoProcessor, poutputarguments : D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*, numinputstreams : UInt32, pinputarguments : D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1*) : Void
    @lpVtbl.value.process_frames1.call(this, pvideoprocessor, poutputarguments, numinputstreams, pinputarguments)
  end
end
struct LibWin32::ID3D12VideoMotionEstimator
  def query_interface(this : ID3D12VideoMotionEstimator*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D12VideoMotionEstimator*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D12VideoMotionEstimator*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_private_data(this : ID3D12VideoMotionEstimator*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D12VideoMotionEstimator*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D12VideoMotionEstimator*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def set_name(this : ID3D12VideoMotionEstimator*, name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.call(this, name)
  end
  def get_device(this : ID3D12VideoMotionEstimator*, riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.call(this, riid, ppvdevice)
  end
  def get_desc(this : ID3D12VideoMotionEstimator*) : D3D12_VIDEO_MOTION_ESTIMATOR_DESC
    @lpVtbl.value.get_desc.call(this)
  end
  def get_protected_resource_session(this : ID3D12VideoMotionEstimator*, riid : Guid*, ppprotectedsession : Void**) : HRESULT
    @lpVtbl.value.get_protected_resource_session.call(this, riid, ppprotectedsession)
  end
end
struct LibWin32::ID3D12VideoMotionVectorHeap
  def query_interface(this : ID3D12VideoMotionVectorHeap*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D12VideoMotionVectorHeap*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D12VideoMotionVectorHeap*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_private_data(this : ID3D12VideoMotionVectorHeap*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D12VideoMotionVectorHeap*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D12VideoMotionVectorHeap*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def set_name(this : ID3D12VideoMotionVectorHeap*, name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.call(this, name)
  end
  def get_device(this : ID3D12VideoMotionVectorHeap*, riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.call(this, riid, ppvdevice)
  end
  def get_desc(this : ID3D12VideoMotionVectorHeap*) : D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC
    @lpVtbl.value.get_desc.call(this)
  end
  def get_protected_resource_session(this : ID3D12VideoMotionVectorHeap*, riid : Guid*, ppprotectedsession : Void**) : HRESULT
    @lpVtbl.value.get_protected_resource_session.call(this, riid, ppprotectedsession)
  end
end
struct LibWin32::ID3D12VideoDevice1
  def query_interface(this : ID3D12VideoDevice1*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D12VideoDevice1*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D12VideoDevice1*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def check_feature_support(this : ID3D12VideoDevice1*, featurevideo : D3D12_FEATURE_VIDEO, pfeaturesupportdata : Void*, featuresupportdatasize : UInt32) : HRESULT
    @lpVtbl.value.check_feature_support.call(this, featurevideo, pfeaturesupportdata, featuresupportdatasize)
  end
  def create_video_decoder(this : ID3D12VideoDevice1*, pdesc : D3D12_VIDEO_DECODER_DESC*, riid : Guid*, ppvideodecoder : Void**) : HRESULT
    @lpVtbl.value.create_video_decoder.call(this, pdesc, riid, ppvideodecoder)
  end
  def create_video_decoder_heap(this : ID3D12VideoDevice1*, pvideodecoderheapdesc : D3D12_VIDEO_DECODER_HEAP_DESC*, riid : Guid*, ppvideodecoderheap : Void**) : HRESULT
    @lpVtbl.value.create_video_decoder_heap.call(this, pvideodecoderheapdesc, riid, ppvideodecoderheap)
  end
  def create_video_processor(this : ID3D12VideoDevice1*, nodemask : UInt32, poutputstreamdesc : D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*, numinputstreamdescs : UInt32, pinputstreamdescs : D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, riid : Guid*, ppvideoprocessor : Void**) : HRESULT
    @lpVtbl.value.create_video_processor.call(this, nodemask, poutputstreamdesc, numinputstreamdescs, pinputstreamdescs, riid, ppvideoprocessor)
  end
  def create_video_motion_estimator(this : ID3D12VideoDevice1*, pdesc : D3D12_VIDEO_MOTION_ESTIMATOR_DESC*, pprotectedresourcesession : ID3D12ProtectedResourceSession, riid : Guid*, ppvideomotionestimator : Void**) : HRESULT
    @lpVtbl.value.create_video_motion_estimator.call(this, pdesc, pprotectedresourcesession, riid, ppvideomotionestimator)
  end
  def create_video_motion_vector_heap(this : ID3D12VideoDevice1*, pdesc : D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC*, pprotectedresourcesession : ID3D12ProtectedResourceSession, riid : Guid*, ppvideomotionvectorheap : Void**) : HRESULT
    @lpVtbl.value.create_video_motion_vector_heap.call(this, pdesc, pprotectedresourcesession, riid, ppvideomotionvectorheap)
  end
end
struct LibWin32::ID3D12VideoEncodeCommandList
  def query_interface(this : ID3D12VideoEncodeCommandList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D12VideoEncodeCommandList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D12VideoEncodeCommandList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_private_data(this : ID3D12VideoEncodeCommandList*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D12VideoEncodeCommandList*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D12VideoEncodeCommandList*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def set_name(this : ID3D12VideoEncodeCommandList*, name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.call(this, name)
  end
  def get_device(this : ID3D12VideoEncodeCommandList*, riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.call(this, riid, ppvdevice)
  end
  def get_type(this : ID3D12VideoEncodeCommandList*) : D3D12_COMMAND_LIST_TYPE
    @lpVtbl.value.get_type.call(this)
  end
  def close(this : ID3D12VideoEncodeCommandList*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def reset(this : ID3D12VideoEncodeCommandList*, pallocator : ID3D12CommandAllocator) : HRESULT
    @lpVtbl.value.reset.call(this, pallocator)
  end
  def clear_state(this : ID3D12VideoEncodeCommandList*) : Void
    @lpVtbl.value.clear_state.call(this)
  end
  def resource_barrier(this : ID3D12VideoEncodeCommandList*, numbarriers : UInt32, pbarriers : D3D12_RESOURCE_BARRIER*) : Void
    @lpVtbl.value.resource_barrier.call(this, numbarriers, pbarriers)
  end
  def discard_resource(this : ID3D12VideoEncodeCommandList*, presource : ID3D12Resource, pregion : D3D12_DISCARD_REGION*) : Void
    @lpVtbl.value.discard_resource.call(this, presource, pregion)
  end
  def begin_query(this : ID3D12VideoEncodeCommandList*, pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.begin_query.call(this, pqueryheap, type, index)
  end
  def end_query(this : ID3D12VideoEncodeCommandList*, pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.end_query.call(this, pqueryheap, type, index)
  end
  def resolve_query_data(this : ID3D12VideoEncodeCommandList*, pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, startindex : UInt32, numqueries : UInt32, pdestinationbuffer : ID3D12Resource, aligneddestinationbufferoffset : UInt64) : Void
    @lpVtbl.value.resolve_query_data.call(this, pqueryheap, type, startindex, numqueries, pdestinationbuffer, aligneddestinationbufferoffset)
  end
  def set_predication(this : ID3D12VideoEncodeCommandList*, pbuffer : ID3D12Resource, alignedbufferoffset : UInt64, operation : D3D12_PREDICATION_OP) : Void
    @lpVtbl.value.set_predication.call(this, pbuffer, alignedbufferoffset, operation)
  end
  def set_marker(this : ID3D12VideoEncodeCommandList*, metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.set_marker.call(this, metadata, pdata, size)
  end
  def begin_event(this : ID3D12VideoEncodeCommandList*, metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.begin_event.call(this, metadata, pdata, size)
  end
  def end_event(this : ID3D12VideoEncodeCommandList*) : Void
    @lpVtbl.value.end_event.call(this)
  end
  def estimate_motion(this : ID3D12VideoEncodeCommandList*, pmotionestimator : ID3D12VideoMotionEstimator, poutputarguments : D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT*, pinputarguments : D3D12_VIDEO_MOTION_ESTIMATOR_INPUT*) : Void
    @lpVtbl.value.estimate_motion.call(this, pmotionestimator, poutputarguments, pinputarguments)
  end
  def resolve_motion_vector_heap(this : ID3D12VideoEncodeCommandList*, poutputarguments : D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT*, pinputarguments : D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT*) : Void
    @lpVtbl.value.resolve_motion_vector_heap.call(this, poutputarguments, pinputarguments)
  end
  def write_buffer_immediate(this : ID3D12VideoEncodeCommandList*, count : UInt32, pparams : D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pmodes : D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
    @lpVtbl.value.write_buffer_immediate.call(this, count, pparams, pmodes)
  end
  def set_protected_resource_session(this : ID3D12VideoEncodeCommandList*, pprotectedresourcesession : ID3D12ProtectedResourceSession) : Void
    @lpVtbl.value.set_protected_resource_session.call(this, pprotectedresourcesession)
  end
end
struct LibWin32::ID3D12VideoDecoder1
  def query_interface(this : ID3D12VideoDecoder1*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D12VideoDecoder1*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D12VideoDecoder1*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_private_data(this : ID3D12VideoDecoder1*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D12VideoDecoder1*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D12VideoDecoder1*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def set_name(this : ID3D12VideoDecoder1*, name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.call(this, name)
  end
  def get_device(this : ID3D12VideoDecoder1*, riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.call(this, riid, ppvdevice)
  end
  def get_desc(this : ID3D12VideoDecoder1*) : D3D12_VIDEO_DECODER_DESC
    @lpVtbl.value.get_desc.call(this)
  end
  def get_protected_resource_session(this : ID3D12VideoDecoder1*, riid : Guid*, ppprotectedsession : Void**) : HRESULT
    @lpVtbl.value.get_protected_resource_session.call(this, riid, ppprotectedsession)
  end
end
struct LibWin32::ID3D12VideoDecoderHeap1
  def query_interface(this : ID3D12VideoDecoderHeap1*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D12VideoDecoderHeap1*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D12VideoDecoderHeap1*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_private_data(this : ID3D12VideoDecoderHeap1*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D12VideoDecoderHeap1*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D12VideoDecoderHeap1*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def set_name(this : ID3D12VideoDecoderHeap1*, name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.call(this, name)
  end
  def get_device(this : ID3D12VideoDecoderHeap1*, riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.call(this, riid, ppvdevice)
  end
  def get_desc(this : ID3D12VideoDecoderHeap1*) : D3D12_VIDEO_DECODER_HEAP_DESC
    @lpVtbl.value.get_desc.call(this)
  end
  def get_protected_resource_session(this : ID3D12VideoDecoderHeap1*, riid : Guid*, ppprotectedsession : Void**) : HRESULT
    @lpVtbl.value.get_protected_resource_session.call(this, riid, ppprotectedsession)
  end
end
struct LibWin32::ID3D12VideoProcessor1
  def query_interface(this : ID3D12VideoProcessor1*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D12VideoProcessor1*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D12VideoProcessor1*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_private_data(this : ID3D12VideoProcessor1*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D12VideoProcessor1*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D12VideoProcessor1*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def set_name(this : ID3D12VideoProcessor1*, name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.call(this, name)
  end
  def get_device(this : ID3D12VideoProcessor1*, riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.call(this, riid, ppvdevice)
  end
  def get_node_mask(this : ID3D12VideoProcessor1*) : UInt32
    @lpVtbl.value.get_node_mask.call(this)
  end
  def get_num_input_stream_descs(this : ID3D12VideoProcessor1*) : UInt32
    @lpVtbl.value.get_num_input_stream_descs.call(this)
  end
  def get_input_stream_descs(this : ID3D12VideoProcessor1*, numinputstreamdescs : UInt32, pinputstreamdescs : D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*) : HRESULT
    @lpVtbl.value.get_input_stream_descs.call(this, numinputstreamdescs, pinputstreamdescs)
  end
  def get_output_stream_desc(this : ID3D12VideoProcessor1*) : D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC
    @lpVtbl.value.get_output_stream_desc.call(this)
  end
  def get_protected_resource_session(this : ID3D12VideoProcessor1*, riid : Guid*, ppprotectedsession : Void**) : HRESULT
    @lpVtbl.value.get_protected_resource_session.call(this, riid, ppprotectedsession)
  end
end
struct LibWin32::ID3D12VideoExtensionCommand
  def query_interface(this : ID3D12VideoExtensionCommand*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D12VideoExtensionCommand*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D12VideoExtensionCommand*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_private_data(this : ID3D12VideoExtensionCommand*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D12VideoExtensionCommand*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D12VideoExtensionCommand*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def set_name(this : ID3D12VideoExtensionCommand*, name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.call(this, name)
  end
  def get_device(this : ID3D12VideoExtensionCommand*, riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.call(this, riid, ppvdevice)
  end
  def get_desc(this : ID3D12VideoExtensionCommand*) : D3D12_VIDEO_EXTENSION_COMMAND_DESC
    @lpVtbl.value.get_desc.call(this)
  end
  def get_protected_resource_session(this : ID3D12VideoExtensionCommand*, riid : Guid*, ppprotectedsession : Void**) : HRESULT
    @lpVtbl.value.get_protected_resource_session.call(this, riid, ppprotectedsession)
  end
end
struct LibWin32::ID3D12VideoDevice2
  def query_interface(this : ID3D12VideoDevice2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D12VideoDevice2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D12VideoDevice2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def check_feature_support(this : ID3D12VideoDevice2*, featurevideo : D3D12_FEATURE_VIDEO, pfeaturesupportdata : Void*, featuresupportdatasize : UInt32) : HRESULT
    @lpVtbl.value.check_feature_support.call(this, featurevideo, pfeaturesupportdata, featuresupportdatasize)
  end
  def create_video_decoder(this : ID3D12VideoDevice2*, pdesc : D3D12_VIDEO_DECODER_DESC*, riid : Guid*, ppvideodecoder : Void**) : HRESULT
    @lpVtbl.value.create_video_decoder.call(this, pdesc, riid, ppvideodecoder)
  end
  def create_video_decoder_heap(this : ID3D12VideoDevice2*, pvideodecoderheapdesc : D3D12_VIDEO_DECODER_HEAP_DESC*, riid : Guid*, ppvideodecoderheap : Void**) : HRESULT
    @lpVtbl.value.create_video_decoder_heap.call(this, pvideodecoderheapdesc, riid, ppvideodecoderheap)
  end
  def create_video_processor(this : ID3D12VideoDevice2*, nodemask : UInt32, poutputstreamdesc : D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*, numinputstreamdescs : UInt32, pinputstreamdescs : D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, riid : Guid*, ppvideoprocessor : Void**) : HRESULT
    @lpVtbl.value.create_video_processor.call(this, nodemask, poutputstreamdesc, numinputstreamdescs, pinputstreamdescs, riid, ppvideoprocessor)
  end
  def create_video_motion_estimator(this : ID3D12VideoDevice2*, pdesc : D3D12_VIDEO_MOTION_ESTIMATOR_DESC*, pprotectedresourcesession : ID3D12ProtectedResourceSession, riid : Guid*, ppvideomotionestimator : Void**) : HRESULT
    @lpVtbl.value.create_video_motion_estimator.call(this, pdesc, pprotectedresourcesession, riid, ppvideomotionestimator)
  end
  def create_video_motion_vector_heap(this : ID3D12VideoDevice2*, pdesc : D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC*, pprotectedresourcesession : ID3D12ProtectedResourceSession, riid : Guid*, ppvideomotionvectorheap : Void**) : HRESULT
    @lpVtbl.value.create_video_motion_vector_heap.call(this, pdesc, pprotectedresourcesession, riid, ppvideomotionvectorheap)
  end
  def create_video_decoder1(this : ID3D12VideoDevice2*, pdesc : D3D12_VIDEO_DECODER_DESC*, pprotectedresourcesession : ID3D12ProtectedResourceSession, riid : Guid*, ppvideodecoder : Void**) : HRESULT
    @lpVtbl.value.create_video_decoder1.call(this, pdesc, pprotectedresourcesession, riid, ppvideodecoder)
  end
  def create_video_decoder_heap1(this : ID3D12VideoDevice2*, pvideodecoderheapdesc : D3D12_VIDEO_DECODER_HEAP_DESC*, pprotectedresourcesession : ID3D12ProtectedResourceSession, riid : Guid*, ppvideodecoderheap : Void**) : HRESULT
    @lpVtbl.value.create_video_decoder_heap1.call(this, pvideodecoderheapdesc, pprotectedresourcesession, riid, ppvideodecoderheap)
  end
  def create_video_processor1(this : ID3D12VideoDevice2*, nodemask : UInt32, poutputstreamdesc : D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*, numinputstreamdescs : UInt32, pinputstreamdescs : D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, pprotectedresourcesession : ID3D12ProtectedResourceSession, riid : Guid*, ppvideoprocessor : Void**) : HRESULT
    @lpVtbl.value.create_video_processor1.call(this, nodemask, poutputstreamdesc, numinputstreamdescs, pinputstreamdescs, pprotectedresourcesession, riid, ppvideoprocessor)
  end
  def create_video_extension_command(this : ID3D12VideoDevice2*, pdesc : D3D12_VIDEO_EXTENSION_COMMAND_DESC*, pcreationparameters : Void*, creationparametersdatasizeinbytes : LibC::UINT_PTR, pprotectedresourcesession : ID3D12ProtectedResourceSession, riid : Guid*, ppvideoextensioncommand : Void**) : HRESULT
    @lpVtbl.value.create_video_extension_command.call(this, pdesc, pcreationparameters, creationparametersdatasizeinbytes, pprotectedresourcesession, riid, ppvideoextensioncommand)
  end
  def execute_extension_command(this : ID3D12VideoDevice2*, pextensioncommand : ID3D12VideoExtensionCommand, pexecutionparameters : Void*, executionparameterssizeinbytes : LibC::UINT_PTR, poutputdata : Void*, outputdatasizeinbytes : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.execute_extension_command.call(this, pextensioncommand, pexecutionparameters, executionparameterssizeinbytes, poutputdata, outputdatasizeinbytes)
  end
end
struct LibWin32::ID3D12VideoDecodeCommandList2
  def query_interface(this : ID3D12VideoDecodeCommandList2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D12VideoDecodeCommandList2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D12VideoDecodeCommandList2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_private_data(this : ID3D12VideoDecodeCommandList2*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D12VideoDecodeCommandList2*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D12VideoDecodeCommandList2*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def set_name(this : ID3D12VideoDecodeCommandList2*, name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.call(this, name)
  end
  def get_device(this : ID3D12VideoDecodeCommandList2*, riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.call(this, riid, ppvdevice)
  end
  def get_type(this : ID3D12VideoDecodeCommandList2*) : D3D12_COMMAND_LIST_TYPE
    @lpVtbl.value.get_type.call(this)
  end
  def close(this : ID3D12VideoDecodeCommandList2*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def reset(this : ID3D12VideoDecodeCommandList2*, pallocator : ID3D12CommandAllocator) : HRESULT
    @lpVtbl.value.reset.call(this, pallocator)
  end
  def clear_state(this : ID3D12VideoDecodeCommandList2*) : Void
    @lpVtbl.value.clear_state.call(this)
  end
  def resource_barrier(this : ID3D12VideoDecodeCommandList2*, numbarriers : UInt32, pbarriers : D3D12_RESOURCE_BARRIER*) : Void
    @lpVtbl.value.resource_barrier.call(this, numbarriers, pbarriers)
  end
  def discard_resource(this : ID3D12VideoDecodeCommandList2*, presource : ID3D12Resource, pregion : D3D12_DISCARD_REGION*) : Void
    @lpVtbl.value.discard_resource.call(this, presource, pregion)
  end
  def begin_query(this : ID3D12VideoDecodeCommandList2*, pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.begin_query.call(this, pqueryheap, type, index)
  end
  def end_query(this : ID3D12VideoDecodeCommandList2*, pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.end_query.call(this, pqueryheap, type, index)
  end
  def resolve_query_data(this : ID3D12VideoDecodeCommandList2*, pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, startindex : UInt32, numqueries : UInt32, pdestinationbuffer : ID3D12Resource, aligneddestinationbufferoffset : UInt64) : Void
    @lpVtbl.value.resolve_query_data.call(this, pqueryheap, type, startindex, numqueries, pdestinationbuffer, aligneddestinationbufferoffset)
  end
  def set_predication(this : ID3D12VideoDecodeCommandList2*, pbuffer : ID3D12Resource, alignedbufferoffset : UInt64, operation : D3D12_PREDICATION_OP) : Void
    @lpVtbl.value.set_predication.call(this, pbuffer, alignedbufferoffset, operation)
  end
  def set_marker(this : ID3D12VideoDecodeCommandList2*, metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.set_marker.call(this, metadata, pdata, size)
  end
  def begin_event(this : ID3D12VideoDecodeCommandList2*, metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.begin_event.call(this, metadata, pdata, size)
  end
  def end_event(this : ID3D12VideoDecodeCommandList2*) : Void
    @lpVtbl.value.end_event.call(this)
  end
  def decode_frame(this : ID3D12VideoDecodeCommandList2*, pdecoder : ID3D12VideoDecoder, poutputarguments : D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS*, pinputarguments : D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*) : Void
    @lpVtbl.value.decode_frame.call(this, pdecoder, poutputarguments, pinputarguments)
  end
  def write_buffer_immediate(this : ID3D12VideoDecodeCommandList2*, count : UInt32, pparams : D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pmodes : D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
    @lpVtbl.value.write_buffer_immediate.call(this, count, pparams, pmodes)
  end
  def decode_frame1(this : ID3D12VideoDecodeCommandList2*, pdecoder : ID3D12VideoDecoder, poutputarguments : D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1*, pinputarguments : D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*) : Void
    @lpVtbl.value.decode_frame1.call(this, pdecoder, poutputarguments, pinputarguments)
  end
  def set_protected_resource_session(this : ID3D12VideoDecodeCommandList2*, pprotectedresourcesession : ID3D12ProtectedResourceSession) : Void
    @lpVtbl.value.set_protected_resource_session.call(this, pprotectedresourcesession)
  end
  def initialize_extension_command(this : ID3D12VideoDecodeCommandList2*, pextensioncommand : ID3D12VideoExtensionCommand, pinitializationparameters : Void*, initializationparameterssizeinbytes : LibC::UINT_PTR) : Void
    @lpVtbl.value.initialize_extension_command.call(this, pextensioncommand, pinitializationparameters, initializationparameterssizeinbytes)
  end
  def execute_extension_command(this : ID3D12VideoDecodeCommandList2*, pextensioncommand : ID3D12VideoExtensionCommand, pexecutionparameters : Void*, executionparameterssizeinbytes : LibC::UINT_PTR) : Void
    @lpVtbl.value.execute_extension_command.call(this, pextensioncommand, pexecutionparameters, executionparameterssizeinbytes)
  end
end
struct LibWin32::ID3D12VideoProcessCommandList2
  def query_interface(this : ID3D12VideoProcessCommandList2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D12VideoProcessCommandList2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D12VideoProcessCommandList2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_private_data(this : ID3D12VideoProcessCommandList2*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D12VideoProcessCommandList2*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D12VideoProcessCommandList2*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def set_name(this : ID3D12VideoProcessCommandList2*, name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.call(this, name)
  end
  def get_device(this : ID3D12VideoProcessCommandList2*, riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.call(this, riid, ppvdevice)
  end
  def get_type(this : ID3D12VideoProcessCommandList2*) : D3D12_COMMAND_LIST_TYPE
    @lpVtbl.value.get_type.call(this)
  end
  def close(this : ID3D12VideoProcessCommandList2*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def reset(this : ID3D12VideoProcessCommandList2*, pallocator : ID3D12CommandAllocator) : HRESULT
    @lpVtbl.value.reset.call(this, pallocator)
  end
  def clear_state(this : ID3D12VideoProcessCommandList2*) : Void
    @lpVtbl.value.clear_state.call(this)
  end
  def resource_barrier(this : ID3D12VideoProcessCommandList2*, numbarriers : UInt32, pbarriers : D3D12_RESOURCE_BARRIER*) : Void
    @lpVtbl.value.resource_barrier.call(this, numbarriers, pbarriers)
  end
  def discard_resource(this : ID3D12VideoProcessCommandList2*, presource : ID3D12Resource, pregion : D3D12_DISCARD_REGION*) : Void
    @lpVtbl.value.discard_resource.call(this, presource, pregion)
  end
  def begin_query(this : ID3D12VideoProcessCommandList2*, pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.begin_query.call(this, pqueryheap, type, index)
  end
  def end_query(this : ID3D12VideoProcessCommandList2*, pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.end_query.call(this, pqueryheap, type, index)
  end
  def resolve_query_data(this : ID3D12VideoProcessCommandList2*, pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, startindex : UInt32, numqueries : UInt32, pdestinationbuffer : ID3D12Resource, aligneddestinationbufferoffset : UInt64) : Void
    @lpVtbl.value.resolve_query_data.call(this, pqueryheap, type, startindex, numqueries, pdestinationbuffer, aligneddestinationbufferoffset)
  end
  def set_predication(this : ID3D12VideoProcessCommandList2*, pbuffer : ID3D12Resource, alignedbufferoffset : UInt64, operation : D3D12_PREDICATION_OP) : Void
    @lpVtbl.value.set_predication.call(this, pbuffer, alignedbufferoffset, operation)
  end
  def set_marker(this : ID3D12VideoProcessCommandList2*, metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.set_marker.call(this, metadata, pdata, size)
  end
  def begin_event(this : ID3D12VideoProcessCommandList2*, metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.begin_event.call(this, metadata, pdata, size)
  end
  def end_event(this : ID3D12VideoProcessCommandList2*) : Void
    @lpVtbl.value.end_event.call(this)
  end
  def process_frames(this : ID3D12VideoProcessCommandList2*, pvideoprocessor : ID3D12VideoProcessor, poutputarguments : D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*, numinputstreams : UInt32, pinputarguments : D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS*) : Void
    @lpVtbl.value.process_frames.call(this, pvideoprocessor, poutputarguments, numinputstreams, pinputarguments)
  end
  def write_buffer_immediate(this : ID3D12VideoProcessCommandList2*, count : UInt32, pparams : D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pmodes : D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
    @lpVtbl.value.write_buffer_immediate.call(this, count, pparams, pmodes)
  end
  def process_frames1(this : ID3D12VideoProcessCommandList2*, pvideoprocessor : ID3D12VideoProcessor, poutputarguments : D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*, numinputstreams : UInt32, pinputarguments : D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1*) : Void
    @lpVtbl.value.process_frames1.call(this, pvideoprocessor, poutputarguments, numinputstreams, pinputarguments)
  end
  def set_protected_resource_session(this : ID3D12VideoProcessCommandList2*, pprotectedresourcesession : ID3D12ProtectedResourceSession) : Void
    @lpVtbl.value.set_protected_resource_session.call(this, pprotectedresourcesession)
  end
  def initialize_extension_command(this : ID3D12VideoProcessCommandList2*, pextensioncommand : ID3D12VideoExtensionCommand, pinitializationparameters : Void*, initializationparameterssizeinbytes : LibC::UINT_PTR) : Void
    @lpVtbl.value.initialize_extension_command.call(this, pextensioncommand, pinitializationparameters, initializationparameterssizeinbytes)
  end
  def execute_extension_command(this : ID3D12VideoProcessCommandList2*, pextensioncommand : ID3D12VideoExtensionCommand, pexecutionparameters : Void*, executionparameterssizeinbytes : LibC::UINT_PTR) : Void
    @lpVtbl.value.execute_extension_command.call(this, pextensioncommand, pexecutionparameters, executionparameterssizeinbytes)
  end
end
struct LibWin32::ID3D12VideoEncodeCommandList1
  def query_interface(this : ID3D12VideoEncodeCommandList1*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D12VideoEncodeCommandList1*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D12VideoEncodeCommandList1*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_private_data(this : ID3D12VideoEncodeCommandList1*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D12VideoEncodeCommandList1*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D12VideoEncodeCommandList1*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def set_name(this : ID3D12VideoEncodeCommandList1*, name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.call(this, name)
  end
  def get_device(this : ID3D12VideoEncodeCommandList1*, riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.call(this, riid, ppvdevice)
  end
  def get_type(this : ID3D12VideoEncodeCommandList1*) : D3D12_COMMAND_LIST_TYPE
    @lpVtbl.value.get_type.call(this)
  end
  def close(this : ID3D12VideoEncodeCommandList1*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def reset(this : ID3D12VideoEncodeCommandList1*, pallocator : ID3D12CommandAllocator) : HRESULT
    @lpVtbl.value.reset.call(this, pallocator)
  end
  def clear_state(this : ID3D12VideoEncodeCommandList1*) : Void
    @lpVtbl.value.clear_state.call(this)
  end
  def resource_barrier(this : ID3D12VideoEncodeCommandList1*, numbarriers : UInt32, pbarriers : D3D12_RESOURCE_BARRIER*) : Void
    @lpVtbl.value.resource_barrier.call(this, numbarriers, pbarriers)
  end
  def discard_resource(this : ID3D12VideoEncodeCommandList1*, presource : ID3D12Resource, pregion : D3D12_DISCARD_REGION*) : Void
    @lpVtbl.value.discard_resource.call(this, presource, pregion)
  end
  def begin_query(this : ID3D12VideoEncodeCommandList1*, pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.begin_query.call(this, pqueryheap, type, index)
  end
  def end_query(this : ID3D12VideoEncodeCommandList1*, pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.end_query.call(this, pqueryheap, type, index)
  end
  def resolve_query_data(this : ID3D12VideoEncodeCommandList1*, pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, startindex : UInt32, numqueries : UInt32, pdestinationbuffer : ID3D12Resource, aligneddestinationbufferoffset : UInt64) : Void
    @lpVtbl.value.resolve_query_data.call(this, pqueryheap, type, startindex, numqueries, pdestinationbuffer, aligneddestinationbufferoffset)
  end
  def set_predication(this : ID3D12VideoEncodeCommandList1*, pbuffer : ID3D12Resource, alignedbufferoffset : UInt64, operation : D3D12_PREDICATION_OP) : Void
    @lpVtbl.value.set_predication.call(this, pbuffer, alignedbufferoffset, operation)
  end
  def set_marker(this : ID3D12VideoEncodeCommandList1*, metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.set_marker.call(this, metadata, pdata, size)
  end
  def begin_event(this : ID3D12VideoEncodeCommandList1*, metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.begin_event.call(this, metadata, pdata, size)
  end
  def end_event(this : ID3D12VideoEncodeCommandList1*) : Void
    @lpVtbl.value.end_event.call(this)
  end
  def estimate_motion(this : ID3D12VideoEncodeCommandList1*, pmotionestimator : ID3D12VideoMotionEstimator, poutputarguments : D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT*, pinputarguments : D3D12_VIDEO_MOTION_ESTIMATOR_INPUT*) : Void
    @lpVtbl.value.estimate_motion.call(this, pmotionestimator, poutputarguments, pinputarguments)
  end
  def resolve_motion_vector_heap(this : ID3D12VideoEncodeCommandList1*, poutputarguments : D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT*, pinputarguments : D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT*) : Void
    @lpVtbl.value.resolve_motion_vector_heap.call(this, poutputarguments, pinputarguments)
  end
  def write_buffer_immediate(this : ID3D12VideoEncodeCommandList1*, count : UInt32, pparams : D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pmodes : D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
    @lpVtbl.value.write_buffer_immediate.call(this, count, pparams, pmodes)
  end
  def set_protected_resource_session(this : ID3D12VideoEncodeCommandList1*, pprotectedresourcesession : ID3D12ProtectedResourceSession) : Void
    @lpVtbl.value.set_protected_resource_session.call(this, pprotectedresourcesession)
  end
  def initialize_extension_command(this : ID3D12VideoEncodeCommandList1*, pextensioncommand : ID3D12VideoExtensionCommand, pinitializationparameters : Void*, initializationparameterssizeinbytes : LibC::UINT_PTR) : Void
    @lpVtbl.value.initialize_extension_command.call(this, pextensioncommand, pinitializationparameters, initializationparameterssizeinbytes)
  end
  def execute_extension_command(this : ID3D12VideoEncodeCommandList1*, pextensioncommand : ID3D12VideoExtensionCommand, pexecutionparameters : Void*, executionparameterssizeinbytes : LibC::UINT_PTR) : Void
    @lpVtbl.value.execute_extension_command.call(this, pextensioncommand, pexecutionparameters, executionparameterssizeinbytes)
  end
end
struct LibWin32::ID3D12VideoEncoder
  def query_interface(this : ID3D12VideoEncoder*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D12VideoEncoder*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D12VideoEncoder*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_private_data(this : ID3D12VideoEncoder*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D12VideoEncoder*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D12VideoEncoder*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def set_name(this : ID3D12VideoEncoder*, name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.call(this, name)
  end
  def get_device(this : ID3D12VideoEncoder*, riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.call(this, riid, ppvdevice)
  end
  def get_node_mask(this : ID3D12VideoEncoder*) : UInt32
    @lpVtbl.value.get_node_mask.call(this)
  end
  def get_encoder_flags(this : ID3D12VideoEncoder*) : D3D12_VIDEO_ENCODER_FLAGS
    @lpVtbl.value.get_encoder_flags.call(this)
  end
  def get_codec(this : ID3D12VideoEncoder*) : D3D12_VIDEO_ENCODER_CODEC
    @lpVtbl.value.get_codec.call(this)
  end
  def get_codec_profile(this : ID3D12VideoEncoder*, dstprofile : D3D12_VIDEO_ENCODER_PROFILE_DESC) : HRESULT
    @lpVtbl.value.get_codec_profile.call(this, dstprofile)
  end
  def get_codec_configuration(this : ID3D12VideoEncoder*, dstcodecconfig : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION) : HRESULT
    @lpVtbl.value.get_codec_configuration.call(this, dstcodecconfig)
  end
  def get_input_format(this : ID3D12VideoEncoder*) : DXGI_FORMAT
    @lpVtbl.value.get_input_format.call(this)
  end
  def get_max_motion_estimation_precision(this : ID3D12VideoEncoder*) : D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE
    @lpVtbl.value.get_max_motion_estimation_precision.call(this)
  end
end
struct LibWin32::ID3D12VideoEncoderHeap
  def query_interface(this : ID3D12VideoEncoderHeap*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D12VideoEncoderHeap*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D12VideoEncoderHeap*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_private_data(this : ID3D12VideoEncoderHeap*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D12VideoEncoderHeap*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D12VideoEncoderHeap*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def set_name(this : ID3D12VideoEncoderHeap*, name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.call(this, name)
  end
  def get_device(this : ID3D12VideoEncoderHeap*, riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.call(this, riid, ppvdevice)
  end
  def get_node_mask(this : ID3D12VideoEncoderHeap*) : UInt32
    @lpVtbl.value.get_node_mask.call(this)
  end
  def get_encoder_heap_flags(this : ID3D12VideoEncoderHeap*) : D3D12_VIDEO_ENCODER_HEAP_FLAGS
    @lpVtbl.value.get_encoder_heap_flags.call(this)
  end
  def get_codec(this : ID3D12VideoEncoderHeap*) : D3D12_VIDEO_ENCODER_CODEC
    @lpVtbl.value.get_codec.call(this)
  end
  def get_codec_profile(this : ID3D12VideoEncoderHeap*, dstprofile : D3D12_VIDEO_ENCODER_PROFILE_DESC) : HRESULT
    @lpVtbl.value.get_codec_profile.call(this, dstprofile)
  end
  def get_codec_level(this : ID3D12VideoEncoderHeap*, dstlevel : D3D12_VIDEO_ENCODER_LEVEL_SETTING) : HRESULT
    @lpVtbl.value.get_codec_level.call(this, dstlevel)
  end
  def get_resolution_list_count(this : ID3D12VideoEncoderHeap*) : UInt32
    @lpVtbl.value.get_resolution_list_count.call(this)
  end
  def get_resolution_list(this : ID3D12VideoEncoderHeap*, resolutionslistcount : UInt32, presolutionlist : D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC*) : HRESULT
    @lpVtbl.value.get_resolution_list.call(this, resolutionslistcount, presolutionlist)
  end
end
struct LibWin32::ID3D12VideoDevice3
  def query_interface(this : ID3D12VideoDevice3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D12VideoDevice3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D12VideoDevice3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def check_feature_support(this : ID3D12VideoDevice3*, featurevideo : D3D12_FEATURE_VIDEO, pfeaturesupportdata : Void*, featuresupportdatasize : UInt32) : HRESULT
    @lpVtbl.value.check_feature_support.call(this, featurevideo, pfeaturesupportdata, featuresupportdatasize)
  end
  def create_video_decoder(this : ID3D12VideoDevice3*, pdesc : D3D12_VIDEO_DECODER_DESC*, riid : Guid*, ppvideodecoder : Void**) : HRESULT
    @lpVtbl.value.create_video_decoder.call(this, pdesc, riid, ppvideodecoder)
  end
  def create_video_decoder_heap(this : ID3D12VideoDevice3*, pvideodecoderheapdesc : D3D12_VIDEO_DECODER_HEAP_DESC*, riid : Guid*, ppvideodecoderheap : Void**) : HRESULT
    @lpVtbl.value.create_video_decoder_heap.call(this, pvideodecoderheapdesc, riid, ppvideodecoderheap)
  end
  def create_video_processor(this : ID3D12VideoDevice3*, nodemask : UInt32, poutputstreamdesc : D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*, numinputstreamdescs : UInt32, pinputstreamdescs : D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, riid : Guid*, ppvideoprocessor : Void**) : HRESULT
    @lpVtbl.value.create_video_processor.call(this, nodemask, poutputstreamdesc, numinputstreamdescs, pinputstreamdescs, riid, ppvideoprocessor)
  end
  def create_video_motion_estimator(this : ID3D12VideoDevice3*, pdesc : D3D12_VIDEO_MOTION_ESTIMATOR_DESC*, pprotectedresourcesession : ID3D12ProtectedResourceSession, riid : Guid*, ppvideomotionestimator : Void**) : HRESULT
    @lpVtbl.value.create_video_motion_estimator.call(this, pdesc, pprotectedresourcesession, riid, ppvideomotionestimator)
  end
  def create_video_motion_vector_heap(this : ID3D12VideoDevice3*, pdesc : D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC*, pprotectedresourcesession : ID3D12ProtectedResourceSession, riid : Guid*, ppvideomotionvectorheap : Void**) : HRESULT
    @lpVtbl.value.create_video_motion_vector_heap.call(this, pdesc, pprotectedresourcesession, riid, ppvideomotionvectorheap)
  end
  def create_video_decoder1(this : ID3D12VideoDevice3*, pdesc : D3D12_VIDEO_DECODER_DESC*, pprotectedresourcesession : ID3D12ProtectedResourceSession, riid : Guid*, ppvideodecoder : Void**) : HRESULT
    @lpVtbl.value.create_video_decoder1.call(this, pdesc, pprotectedresourcesession, riid, ppvideodecoder)
  end
  def create_video_decoder_heap1(this : ID3D12VideoDevice3*, pvideodecoderheapdesc : D3D12_VIDEO_DECODER_HEAP_DESC*, pprotectedresourcesession : ID3D12ProtectedResourceSession, riid : Guid*, ppvideodecoderheap : Void**) : HRESULT
    @lpVtbl.value.create_video_decoder_heap1.call(this, pvideodecoderheapdesc, pprotectedresourcesession, riid, ppvideodecoderheap)
  end
  def create_video_processor1(this : ID3D12VideoDevice3*, nodemask : UInt32, poutputstreamdesc : D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*, numinputstreamdescs : UInt32, pinputstreamdescs : D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, pprotectedresourcesession : ID3D12ProtectedResourceSession, riid : Guid*, ppvideoprocessor : Void**) : HRESULT
    @lpVtbl.value.create_video_processor1.call(this, nodemask, poutputstreamdesc, numinputstreamdescs, pinputstreamdescs, pprotectedresourcesession, riid, ppvideoprocessor)
  end
  def create_video_extension_command(this : ID3D12VideoDevice3*, pdesc : D3D12_VIDEO_EXTENSION_COMMAND_DESC*, pcreationparameters : Void*, creationparametersdatasizeinbytes : LibC::UINT_PTR, pprotectedresourcesession : ID3D12ProtectedResourceSession, riid : Guid*, ppvideoextensioncommand : Void**) : HRESULT
    @lpVtbl.value.create_video_extension_command.call(this, pdesc, pcreationparameters, creationparametersdatasizeinbytes, pprotectedresourcesession, riid, ppvideoextensioncommand)
  end
  def execute_extension_command(this : ID3D12VideoDevice3*, pextensioncommand : ID3D12VideoExtensionCommand, pexecutionparameters : Void*, executionparameterssizeinbytes : LibC::UINT_PTR, poutputdata : Void*, outputdatasizeinbytes : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.execute_extension_command.call(this, pextensioncommand, pexecutionparameters, executionparameterssizeinbytes, poutputdata, outputdatasizeinbytes)
  end
  def create_video_encoder(this : ID3D12VideoDevice3*, pdesc : D3D12_VIDEO_ENCODER_DESC*, riid : Guid*, ppvideoencoder : Void**) : HRESULT
    @lpVtbl.value.create_video_encoder.call(this, pdesc, riid, ppvideoencoder)
  end
  def create_video_encoder_heap(this : ID3D12VideoDevice3*, pdesc : D3D12_VIDEO_ENCODER_HEAP_DESC*, riid : Guid*, ppvideoencoderheap : Void**) : HRESULT
    @lpVtbl.value.create_video_encoder_heap.call(this, pdesc, riid, ppvideoencoderheap)
  end
end
struct LibWin32::ID3D12VideoEncodeCommandList2
  def query_interface(this : ID3D12VideoEncodeCommandList2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D12VideoEncodeCommandList2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D12VideoEncodeCommandList2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_private_data(this : ID3D12VideoEncodeCommandList2*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D12VideoEncodeCommandList2*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D12VideoEncodeCommandList2*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def set_name(this : ID3D12VideoEncodeCommandList2*, name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.call(this, name)
  end
  def get_device(this : ID3D12VideoEncodeCommandList2*, riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.call(this, riid, ppvdevice)
  end
  def get_type(this : ID3D12VideoEncodeCommandList2*) : D3D12_COMMAND_LIST_TYPE
    @lpVtbl.value.get_type.call(this)
  end
  def close(this : ID3D12VideoEncodeCommandList2*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def reset(this : ID3D12VideoEncodeCommandList2*, pallocator : ID3D12CommandAllocator) : HRESULT
    @lpVtbl.value.reset.call(this, pallocator)
  end
  def clear_state(this : ID3D12VideoEncodeCommandList2*) : Void
    @lpVtbl.value.clear_state.call(this)
  end
  def resource_barrier(this : ID3D12VideoEncodeCommandList2*, numbarriers : UInt32, pbarriers : D3D12_RESOURCE_BARRIER*) : Void
    @lpVtbl.value.resource_barrier.call(this, numbarriers, pbarriers)
  end
  def discard_resource(this : ID3D12VideoEncodeCommandList2*, presource : ID3D12Resource, pregion : D3D12_DISCARD_REGION*) : Void
    @lpVtbl.value.discard_resource.call(this, presource, pregion)
  end
  def begin_query(this : ID3D12VideoEncodeCommandList2*, pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.begin_query.call(this, pqueryheap, type, index)
  end
  def end_query(this : ID3D12VideoEncodeCommandList2*, pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.end_query.call(this, pqueryheap, type, index)
  end
  def resolve_query_data(this : ID3D12VideoEncodeCommandList2*, pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, startindex : UInt32, numqueries : UInt32, pdestinationbuffer : ID3D12Resource, aligneddestinationbufferoffset : UInt64) : Void
    @lpVtbl.value.resolve_query_data.call(this, pqueryheap, type, startindex, numqueries, pdestinationbuffer, aligneddestinationbufferoffset)
  end
  def set_predication(this : ID3D12VideoEncodeCommandList2*, pbuffer : ID3D12Resource, alignedbufferoffset : UInt64, operation : D3D12_PREDICATION_OP) : Void
    @lpVtbl.value.set_predication.call(this, pbuffer, alignedbufferoffset, operation)
  end
  def set_marker(this : ID3D12VideoEncodeCommandList2*, metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.set_marker.call(this, metadata, pdata, size)
  end
  def begin_event(this : ID3D12VideoEncodeCommandList2*, metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.begin_event.call(this, metadata, pdata, size)
  end
  def end_event(this : ID3D12VideoEncodeCommandList2*) : Void
    @lpVtbl.value.end_event.call(this)
  end
  def estimate_motion(this : ID3D12VideoEncodeCommandList2*, pmotionestimator : ID3D12VideoMotionEstimator, poutputarguments : D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT*, pinputarguments : D3D12_VIDEO_MOTION_ESTIMATOR_INPUT*) : Void
    @lpVtbl.value.estimate_motion.call(this, pmotionestimator, poutputarguments, pinputarguments)
  end
  def resolve_motion_vector_heap(this : ID3D12VideoEncodeCommandList2*, poutputarguments : D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT*, pinputarguments : D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT*) : Void
    @lpVtbl.value.resolve_motion_vector_heap.call(this, poutputarguments, pinputarguments)
  end
  def write_buffer_immediate(this : ID3D12VideoEncodeCommandList2*, count : UInt32, pparams : D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pmodes : D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
    @lpVtbl.value.write_buffer_immediate.call(this, count, pparams, pmodes)
  end
  def set_protected_resource_session(this : ID3D12VideoEncodeCommandList2*, pprotectedresourcesession : ID3D12ProtectedResourceSession) : Void
    @lpVtbl.value.set_protected_resource_session.call(this, pprotectedresourcesession)
  end
  def initialize_extension_command(this : ID3D12VideoEncodeCommandList2*, pextensioncommand : ID3D12VideoExtensionCommand, pinitializationparameters : Void*, initializationparameterssizeinbytes : LibC::UINT_PTR) : Void
    @lpVtbl.value.initialize_extension_command.call(this, pextensioncommand, pinitializationparameters, initializationparameterssizeinbytes)
  end
  def execute_extension_command(this : ID3D12VideoEncodeCommandList2*, pextensioncommand : ID3D12VideoExtensionCommand, pexecutionparameters : Void*, executionparameterssizeinbytes : LibC::UINT_PTR) : Void
    @lpVtbl.value.execute_extension_command.call(this, pextensioncommand, pexecutionparameters, executionparameterssizeinbytes)
  end
  def encode_frame(this : ID3D12VideoEncodeCommandList2*, pencoder : ID3D12VideoEncoder, pheap : ID3D12VideoEncoderHeap, pinputarguments : D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS*, poutputarguments : D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS*) : Void
    @lpVtbl.value.encode_frame.call(this, pencoder, pheap, pinputarguments, poutputarguments)
  end
  def resolve_encoder_output_metadata(this : ID3D12VideoEncodeCommandList2*, pinputarguments : D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS*, poutputarguments : D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS*) : Void
    @lpVtbl.value.resolve_encoder_output_metadata.call(this, pinputarguments, poutputarguments)
  end
end
struct LibWin32::IWMValidate
  def query_interface(this : IWMValidate*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMValidate*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMValidate*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_identifier(this : IWMValidate*, guidvalidationid : Guid) : HRESULT
    @lpVtbl.value.set_identifier.call(this, guidvalidationid)
  end
end
struct LibWin32::IValidateBinding
  def query_interface(this : IValidateBinding*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IValidateBinding*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IValidateBinding*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_identifier(this : IValidateBinding*, guidlicensorid : Guid, pbephemeron : UInt8*, cbephemeron : UInt32, ppbblobvalidationid : UInt8**, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_identifier.call(this, guidlicensorid, pbephemeron, cbephemeron, ppbblobvalidationid, pcbblobsize)
  end
end
struct LibWin32::IWMVideoDecoderHurryup
  def query_interface(this : IWMVideoDecoderHurryup*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMVideoDecoderHurryup*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMVideoDecoderHurryup*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_hurryup(this : IWMVideoDecoderHurryup*, lhurryup : Int32) : HRESULT
    @lpVtbl.value.set_hurryup.call(this, lhurryup)
  end
  def get_hurryup(this : IWMVideoDecoderHurryup*, plhurryup : Int32*) : HRESULT
    @lpVtbl.value.get_hurryup.call(this, plhurryup)
  end
end
struct LibWin32::IWMVideoForceKeyFrame
  def query_interface(this : IWMVideoForceKeyFrame*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMVideoForceKeyFrame*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMVideoForceKeyFrame*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_key_frame(this : IWMVideoForceKeyFrame*) : HRESULT
    @lpVtbl.value.set_key_frame.call(this)
  end
end
struct LibWin32::IWMCodecStrings
  def query_interface(this : IWMCodecStrings*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMCodecStrings*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMCodecStrings*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_name(this : IWMCodecStrings*, pmt : DMO_MEDIA_TYPE*, cchlength : UInt32, szname : Char*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_name.call(this, pmt, cchlength, szname, pcchlength)
  end
  def get_description(this : IWMCodecStrings*, pmt : DMO_MEDIA_TYPE*, cchlength : UInt32, szdescription : Char*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_description.call(this, pmt, cchlength, szdescription, pcchlength)
  end
end
struct LibWin32::IWMCodecProps
  def query_interface(this : IWMCodecProps*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMCodecProps*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMCodecProps*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_format_prop(this : IWMCodecProps*, pmt : DMO_MEDIA_TYPE*, pszname : LibC::LPWSTR, ptype : WMT_PROP_DATATYPE*, pvalue : UInt8*, pdwsize : UInt32*) : HRESULT
    @lpVtbl.value.get_format_prop.call(this, pmt, pszname, ptype, pvalue, pdwsize)
  end
  def get_codec_prop(this : IWMCodecProps*, dwformat : UInt32, pszname : LibC::LPWSTR, ptype : WMT_PROP_DATATYPE*, pvalue : UInt8*, pdwsize : UInt32*) : HRESULT
    @lpVtbl.value.get_codec_prop.call(this, dwformat, pszname, ptype, pvalue, pdwsize)
  end
end
struct LibWin32::IWMCodecLeakyBucket
  def query_interface(this : IWMCodecLeakyBucket*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMCodecLeakyBucket*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMCodecLeakyBucket*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_buffer_size_bits(this : IWMCodecLeakyBucket*, ulbuffersize : UInt32) : HRESULT
    @lpVtbl.value.set_buffer_size_bits.call(this, ulbuffersize)
  end
  def get_buffer_size_bits(this : IWMCodecLeakyBucket*, pulbuffersize : UInt32*) : HRESULT
    @lpVtbl.value.get_buffer_size_bits.call(this, pulbuffersize)
  end
  def set_buffer_fullness_bits(this : IWMCodecLeakyBucket*, ulbufferfullness : UInt32) : HRESULT
    @lpVtbl.value.set_buffer_fullness_bits.call(this, ulbufferfullness)
  end
  def get_buffer_fullness_bits(this : IWMCodecLeakyBucket*, pulbufferfullness : UInt32*) : HRESULT
    @lpVtbl.value.get_buffer_fullness_bits.call(this, pulbufferfullness)
  end
end
struct LibWin32::IWMCodecOutputTimestamp
  def query_interface(this : IWMCodecOutputTimestamp*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMCodecOutputTimestamp*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMCodecOutputTimestamp*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_next_output_time(this : IWMCodecOutputTimestamp*, prttime : Int64*) : HRESULT
    @lpVtbl.value.get_next_output_time.call(this, prttime)
  end
end
struct LibWin32::IWMVideoDecoderReconBuffer
  def query_interface(this : IWMVideoDecoderReconBuffer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMVideoDecoderReconBuffer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMVideoDecoderReconBuffer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_reconstructed_video_frame_size(this : IWMVideoDecoderReconBuffer*, pdwsize : UInt32*) : HRESULT
    @lpVtbl.value.get_reconstructed_video_frame_size.call(this, pdwsize)
  end
  def get_reconstructed_video_frame(this : IWMVideoDecoderReconBuffer*, pbuf : IMediaBuffer) : HRESULT
    @lpVtbl.value.get_reconstructed_video_frame.call(this, pbuf)
  end
  def set_reconstructed_video_frame(this : IWMVideoDecoderReconBuffer*, pbuf : IMediaBuffer) : HRESULT
    @lpVtbl.value.set_reconstructed_video_frame.call(this, pbuf)
  end
end
struct LibWin32::IWMCodecPrivateData
  def query_interface(this : IWMCodecPrivateData*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMCodecPrivateData*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMCodecPrivateData*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_partial_output_type(this : IWMCodecPrivateData*, pmt : DMO_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.set_partial_output_type.call(this, pmt)
  end
  def get_private_data(this : IWMCodecPrivateData*, pbdata : UInt8*, pcbdata : UInt32*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, pbdata, pcbdata)
  end
end
struct LibWin32::IWMSampleExtensionSupport
  def query_interface(this : IWMSampleExtensionSupport*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMSampleExtensionSupport*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMSampleExtensionSupport*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_use_sample_extensions(this : IWMSampleExtensionSupport*, fuseextensions : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_use_sample_extensions.call(this, fuseextensions)
  end
end
struct LibWin32::IWMResamplerProps
  def query_interface(this : IWMResamplerProps*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMResamplerProps*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMResamplerProps*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_half_filter_length(this : IWMResamplerProps*, lhalffilterlen : Int32) : HRESULT
    @lpVtbl.value.set_half_filter_length.call(this, lhalffilterlen)
  end
  def set_user_channel_mtx(this : IWMResamplerProps*, userchannelmtx : Float32*) : HRESULT
    @lpVtbl.value.set_user_channel_mtx.call(this, userchannelmtx)
  end
end
struct LibWin32::IWMResizerProps
  def query_interface(this : IWMResizerProps*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMResizerProps*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMResizerProps*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_resizer_quality(this : IWMResizerProps*, lquality : Int32) : HRESULT
    @lpVtbl.value.set_resizer_quality.call(this, lquality)
  end
  def set_interlace_mode(this : IWMResizerProps*, lmode : Int32) : HRESULT
    @lpVtbl.value.set_interlace_mode.call(this, lmode)
  end
  def set_clip_region(this : IWMResizerProps*, lcliporixsrc : Int32, lcliporiysrc : Int32, lclipwidthsrc : Int32, lclipheightsrc : Int32) : HRESULT
    @lpVtbl.value.set_clip_region.call(this, lcliporixsrc, lcliporiysrc, lclipwidthsrc, lclipheightsrc)
  end
  def set_full_crop_region(this : IWMResizerProps*, lcliporixsrc : Int32, lcliporiysrc : Int32, lclipwidthsrc : Int32, lclipheightsrc : Int32, lcliporixdst : Int32, lcliporiydst : Int32, lclipwidthdst : Int32, lclipheightdst : Int32) : HRESULT
    @lpVtbl.value.set_full_crop_region.call(this, lcliporixsrc, lcliporiysrc, lclipwidthsrc, lclipheightsrc, lcliporixdst, lcliporiydst, lclipwidthdst, lclipheightdst)
  end
  def get_full_crop_region(this : IWMResizerProps*, lcliporixsrc : Int32*, lcliporiysrc : Int32*, lclipwidthsrc : Int32*, lclipheightsrc : Int32*, lcliporixdst : Int32*, lcliporiydst : Int32*, lclipwidthdst : Int32*, lclipheightdst : Int32*) : HRESULT
    @lpVtbl.value.get_full_crop_region.call(this, lcliporixsrc, lcliporiysrc, lclipwidthsrc, lclipheightsrc, lcliporixdst, lcliporiydst, lclipwidthdst, lclipheightdst)
  end
end
struct LibWin32::IWMColorLegalizerProps
  def query_interface(this : IWMColorLegalizerProps*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMColorLegalizerProps*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMColorLegalizerProps*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_color_legalizer_quality(this : IWMColorLegalizerProps*, lquality : Int32) : HRESULT
    @lpVtbl.value.set_color_legalizer_quality.call(this, lquality)
  end
end
struct LibWin32::IWMInterlaceProps
  def query_interface(this : IWMInterlaceProps*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMInterlaceProps*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMInterlaceProps*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_process_type(this : IWMInterlaceProps*, iprocesstype : Int32) : HRESULT
    @lpVtbl.value.set_process_type.call(this, iprocesstype)
  end
  def set_init_inverse_tele_cine_pattern(this : IWMInterlaceProps*, iinitpattern : Int32) : HRESULT
    @lpVtbl.value.set_init_inverse_tele_cine_pattern.call(this, iinitpattern)
  end
  def set_last_frame(this : IWMInterlaceProps*) : HRESULT
    @lpVtbl.value.set_last_frame.call(this)
  end
end
struct LibWin32::IWMFrameInterpProps
  def query_interface(this : IWMFrameInterpProps*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMFrameInterpProps*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMFrameInterpProps*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_frame_rate_in(this : IWMFrameInterpProps*, lframerate : Int32, lscale : Int32) : HRESULT
    @lpVtbl.value.set_frame_rate_in.call(this, lframerate, lscale)
  end
  def set_frame_rate_out(this : IWMFrameInterpProps*, lframerate : Int32, lscale : Int32) : HRESULT
    @lpVtbl.value.set_frame_rate_out.call(this, lframerate, lscale)
  end
  def set_frame_interp_enabled(this : IWMFrameInterpProps*, bfienabled : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_frame_interp_enabled.call(this, bfienabled)
  end
  def set_complexity_level(this : IWMFrameInterpProps*, icomplexity : Int32) : HRESULT
    @lpVtbl.value.set_complexity_level.call(this, icomplexity)
  end
end
struct LibWin32::IWMColorConvProps
  def query_interface(this : IWMColorConvProps*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMColorConvProps*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMColorConvProps*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_mode(this : IWMColorConvProps*, lmode : Int32) : HRESULT
    @lpVtbl.value.set_mode.call(this, lmode)
  end
  def set_full_cropping_param(this : IWMColorConvProps*, lsrccropleft : Int32, lsrccroptop : Int32, ldstcropleft : Int32, ldstcroptop : Int32, lcropwidth : Int32, lcropheight : Int32) : HRESULT
    @lpVtbl.value.set_full_cropping_param.call(this, lsrccropleft, lsrccroptop, ldstcropleft, ldstcroptop, lcropwidth, lcropheight)
  end
end
struct LibWin32::ITocEntry
  def query_interface(this : ITocEntry*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ITocEntry*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ITocEntry*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_title(this : ITocEntry*, pwsztitle : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_title.call(this, pwsztitle)
  end
  def get_title(this : ITocEntry*, pwtitlesize : UInt16*, pwsztitle : Char*) : HRESULT
    @lpVtbl.value.get_title.call(this, pwtitlesize, pwsztitle)
  end
  def set_descriptor(this : ITocEntry*, pdescriptor : TOC_ENTRY_DESCRIPTOR*) : HRESULT
    @lpVtbl.value.set_descriptor.call(this, pdescriptor)
  end
  def get_descriptor(this : ITocEntry*, pdescriptor : TOC_ENTRY_DESCRIPTOR*) : HRESULT
    @lpVtbl.value.get_descriptor.call(this, pdescriptor)
  end
  def set_sub_entries(this : ITocEntry*, dwnumsubentries : UInt32, pwsubentryindices : UInt16*) : HRESULT
    @lpVtbl.value.set_sub_entries.call(this, dwnumsubentries, pwsubentryindices)
  end
  def get_sub_entries(this : ITocEntry*, pdwnumsubentries : UInt32*, pwsubentryindices : UInt16*) : HRESULT
    @lpVtbl.value.get_sub_entries.call(this, pdwnumsubentries, pwsubentryindices)
  end
  def set_description_data(this : ITocEntry*, dwdescriptiondatasize : UInt32, pbtdescriptiondata : UInt8*, pguidtype : Guid*) : HRESULT
    @lpVtbl.value.set_description_data.call(this, dwdescriptiondatasize, pbtdescriptiondata, pguidtype)
  end
  def get_description_data(this : ITocEntry*, pdwdescriptiondatasize : UInt32*, pbtdescriptiondata : UInt8*, pguidtype : Guid*) : HRESULT
    @lpVtbl.value.get_description_data.call(this, pdwdescriptiondatasize, pbtdescriptiondata, pguidtype)
  end
end
struct LibWin32::ITocEntryList
  def query_interface(this : ITocEntryList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ITocEntryList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ITocEntryList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_entry_count(this : ITocEntryList*, pdwentrycount : UInt32*) : HRESULT
    @lpVtbl.value.get_entry_count.call(this, pdwentrycount)
  end
  def get_entry_by_index(this : ITocEntryList*, dwentryindex : UInt32, ppentry : ITocEntry*) : HRESULT
    @lpVtbl.value.get_entry_by_index.call(this, dwentryindex, ppentry)
  end
  def add_entry(this : ITocEntryList*, pentry : ITocEntry, pdwentryindex : UInt32*) : HRESULT
    @lpVtbl.value.add_entry.call(this, pentry, pdwentryindex)
  end
  def add_entry_by_index(this : ITocEntryList*, dwentryindex : UInt32, pentry : ITocEntry) : HRESULT
    @lpVtbl.value.add_entry_by_index.call(this, dwentryindex, pentry)
  end
  def remove_entry_by_index(this : ITocEntryList*, dwentryindex : UInt32) : HRESULT
    @lpVtbl.value.remove_entry_by_index.call(this, dwentryindex)
  end
end
struct LibWin32::IToc
  def query_interface(this : IToc*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IToc*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IToc*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_descriptor(this : IToc*, pdescriptor : TOC_DESCRIPTOR*) : HRESULT
    @lpVtbl.value.set_descriptor.call(this, pdescriptor)
  end
  def get_descriptor(this : IToc*, pdescriptor : TOC_DESCRIPTOR*) : HRESULT
    @lpVtbl.value.get_descriptor.call(this, pdescriptor)
  end
  def set_description(this : IToc*, pwszdescription : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_description.call(this, pwszdescription)
  end
  def get_description(this : IToc*, pwdescriptionsize : UInt16*, pwszdescription : Char*) : HRESULT
    @lpVtbl.value.get_description.call(this, pwdescriptionsize, pwszdescription)
  end
  def set_context(this : IToc*, dwcontextsize : UInt32, pbtcontext : UInt8*) : HRESULT
    @lpVtbl.value.set_context.call(this, dwcontextsize, pbtcontext)
  end
  def get_context(this : IToc*, pdwcontextsize : UInt32*, pbtcontext : UInt8*) : HRESULT
    @lpVtbl.value.get_context.call(this, pdwcontextsize, pbtcontext)
  end
  def get_entry_list_count(this : IToc*, pwcount : UInt16*) : HRESULT
    @lpVtbl.value.get_entry_list_count.call(this, pwcount)
  end
  def get_entry_list_by_index(this : IToc*, wentrylistindex : UInt16, ppentrylist : ITocEntryList*) : HRESULT
    @lpVtbl.value.get_entry_list_by_index.call(this, wentrylistindex, ppentrylist)
  end
  def add_entry_list(this : IToc*, pentrylist : ITocEntryList, pwentrylistindex : UInt16*) : HRESULT
    @lpVtbl.value.add_entry_list.call(this, pentrylist, pwentrylistindex)
  end
  def add_entry_list_by_index(this : IToc*, wentrylistindex : UInt16, pentrylist : ITocEntryList) : HRESULT
    @lpVtbl.value.add_entry_list_by_index.call(this, wentrylistindex, pentrylist)
  end
  def remove_entry_list_by_index(this : IToc*, wentrylistindex : UInt16) : HRESULT
    @lpVtbl.value.remove_entry_list_by_index.call(this, wentrylistindex)
  end
end
struct LibWin32::ITocCollection
  def query_interface(this : ITocCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ITocCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ITocCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_entry_count(this : ITocCollection*, pdwentrycount : UInt32*) : HRESULT
    @lpVtbl.value.get_entry_count.call(this, pdwentrycount)
  end
  def get_entry_by_index(this : ITocCollection*, dwentryindex : UInt32, pptoc : IToc*) : HRESULT
    @lpVtbl.value.get_entry_by_index.call(this, dwentryindex, pptoc)
  end
  def add_entry(this : ITocCollection*, ptoc : IToc, pdwentryindex : UInt32*) : HRESULT
    @lpVtbl.value.add_entry.call(this, ptoc, pdwentryindex)
  end
  def add_entry_by_index(this : ITocCollection*, dwentryindex : UInt32, ptoc : IToc) : HRESULT
    @lpVtbl.value.add_entry_by_index.call(this, dwentryindex, ptoc)
  end
  def remove_entry_by_index(this : ITocCollection*, dwentryindex : UInt32) : HRESULT
    @lpVtbl.value.remove_entry_by_index.call(this, dwentryindex)
  end
end
struct LibWin32::ITocParser
  def query_interface(this : ITocParser*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ITocParser*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ITocParser*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def init(this : ITocParser*, pwszfilename : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.init.call(this, pwszfilename)
  end
  def get_toc_count(this : ITocParser*, enumtocpostype : TOC_POS_TYPE, pdwtoccount : UInt32*) : HRESULT
    @lpVtbl.value.get_toc_count.call(this, enumtocpostype, pdwtoccount)
  end
  def get_toc_by_index(this : ITocParser*, enumtocpostype : TOC_POS_TYPE, dwtocindex : UInt32, pptoc : IToc*) : HRESULT
    @lpVtbl.value.get_toc_by_index.call(this, enumtocpostype, dwtocindex, pptoc)
  end
  def get_toc_by_type(this : ITocParser*, enumtocpostype : TOC_POS_TYPE, guidtoctype : Guid, pptocs : ITocCollection*) : HRESULT
    @lpVtbl.value.get_toc_by_type.call(this, enumtocpostype, guidtoctype, pptocs)
  end
  def add_toc(this : ITocParser*, enumtocpostype : TOC_POS_TYPE, ptoc : IToc, pdwtocindex : UInt32*) : HRESULT
    @lpVtbl.value.add_toc.call(this, enumtocpostype, ptoc, pdwtocindex)
  end
  def remove_toc_by_index(this : ITocParser*, enumtocpostype : TOC_POS_TYPE, dwtocindex : UInt32) : HRESULT
    @lpVtbl.value.remove_toc_by_index.call(this, enumtocpostype, dwtocindex)
  end
  def remove_toc_by_type(this : ITocParser*, enumtocpostype : TOC_POS_TYPE, guidtoctype : Guid) : HRESULT
    @lpVtbl.value.remove_toc_by_type.call(this, enumtocpostype, guidtoctype)
  end
  def commit(this : ITocParser*) : HRESULT
    @lpVtbl.value.commit.call(this)
  end
end
struct LibWin32::IFileIo
  def query_interface(this : IFileIo*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IFileIo*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IFileIo*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def initialize(this : IFileIo*, eaccessmode : FILE_ACCESSMODE, eopenmode : FILE_OPENMODE, pwszfilename : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.initialize.call(this, eaccessmode, eopenmode, pwszfilename)
  end
  def get_length(this : IFileIo*, pqwlength : UInt64*) : HRESULT
    @lpVtbl.value.get_length.call(this, pqwlength)
  end
  def set_length(this : IFileIo*, qwlength : UInt64) : HRESULT
    @lpVtbl.value.set_length.call(this, qwlength)
  end
  def get_current_position(this : IFileIo*, pqwposition : UInt64*) : HRESULT
    @lpVtbl.value.get_current_position.call(this, pqwposition)
  end
  def set_current_position(this : IFileIo*, qwposition : UInt64) : HRESULT
    @lpVtbl.value.set_current_position.call(this, qwposition)
  end
  def is_end_of_stream(this : IFileIo*, pbendofstream : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_end_of_stream.call(this, pbendofstream)
  end
  def read(this : IFileIo*, pbt : UInt8*, ul : UInt32, pulread : UInt32*) : HRESULT
    @lpVtbl.value.read.call(this, pbt, ul, pulread)
  end
  def write(this : IFileIo*, pbt : UInt8*, ul : UInt32, pulwritten : UInt32*) : HRESULT
    @lpVtbl.value.write.call(this, pbt, ul, pulwritten)
  end
  def seek(this : IFileIo*, eseekorigin : SEEK_ORIGIN, qwseekoffset : UInt64, dwseekflags : UInt32, pqwcurrentposition : UInt64*) : HRESULT
    @lpVtbl.value.seek.call(this, eseekorigin, qwseekoffset, dwseekflags, pqwcurrentposition)
  end
  def close(this : IFileIo*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
end
struct LibWin32::IFileClient
  def query_interface(this : IFileClient*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IFileClient*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IFileClient*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_object_disk_size(this : IFileClient*, pqwsize : UInt64*) : HRESULT
    @lpVtbl.value.get_object_disk_size.call(this, pqwsize)
  end
  def write(this : IFileClient*, pfio : IFileIo) : HRESULT
    @lpVtbl.value.write.call(this, pfio)
  end
  def read(this : IFileClient*, pfio : IFileIo) : HRESULT
    @lpVtbl.value.read.call(this, pfio)
  end
end
struct LibWin32::IClusterDetector
  def query_interface(this : IClusterDetector*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IClusterDetector*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IClusterDetector*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def initialize(this : IClusterDetector*, wbaseentrylevel : UInt16, wclusterentrylevel : UInt16) : HRESULT
    @lpVtbl.value.initialize.call(this, wbaseentrylevel, wclusterentrylevel)
  end
  def detect(this : IClusterDetector*, dwmaxnumclusters : UInt32, fminclusterduration : Float32, fmaxclusterduration : Float32, psrctoc : IToc, ppdsttoc : IToc*) : HRESULT
    @lpVtbl.value.detect.call(this, dwmaxnumclusters, fminclusterduration, fmaxclusterduration, psrctoc, ppdsttoc)
  end
end
struct LibWin32::IDXVAHD_Device
  def query_interface(this : IDXVAHD_Device*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDXVAHD_Device*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDXVAHD_Device*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_video_surface(this : IDXVAHD_Device*, width : UInt32, height : UInt32, format : D3DFORMAT, pool : D3DPOOL, usage : UInt32, type : DXVAHD_SURFACE_TYPE, numsurfaces : UInt32, ppsurfaces : IDirect3DSurface9*, psharedhandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_video_surface.call(this, width, height, format, pool, usage, type, numsurfaces, ppsurfaces, psharedhandle)
  end
  def get_video_processor_device_caps(this : IDXVAHD_Device*, pcaps : DXVAHD_VPDEVCAPS*) : HRESULT
    @lpVtbl.value.get_video_processor_device_caps.call(this, pcaps)
  end
  def get_video_processor_output_formats(this : IDXVAHD_Device*, count : UInt32, pformats : D3DFORMAT*) : HRESULT
    @lpVtbl.value.get_video_processor_output_formats.call(this, count, pformats)
  end
  def get_video_processor_input_formats(this : IDXVAHD_Device*, count : UInt32, pformats : D3DFORMAT*) : HRESULT
    @lpVtbl.value.get_video_processor_input_formats.call(this, count, pformats)
  end
  def get_video_processor_caps(this : IDXVAHD_Device*, count : UInt32, pcaps : DXVAHD_VPCAPS*) : HRESULT
    @lpVtbl.value.get_video_processor_caps.call(this, count, pcaps)
  end
  def get_video_processor_custom_rates(this : IDXVAHD_Device*, pvpguid : Guid*, count : UInt32, prates : DXVAHD_CUSTOM_RATE_DATA*) : HRESULT
    @lpVtbl.value.get_video_processor_custom_rates.call(this, pvpguid, count, prates)
  end
  def get_video_processor_filter_range(this : IDXVAHD_Device*, filter : DXVAHD_FILTER, prange : DXVAHD_FILTER_RANGE_DATA*) : HRESULT
    @lpVtbl.value.get_video_processor_filter_range.call(this, filter, prange)
  end
  def create_video_processor(this : IDXVAHD_Device*, pvpguid : Guid*, ppvideoprocessor : IDXVAHD_VideoProcessor*) : HRESULT
    @lpVtbl.value.create_video_processor.call(this, pvpguid, ppvideoprocessor)
  end
end
struct LibWin32::IDXVAHD_VideoProcessor
  def query_interface(this : IDXVAHD_VideoProcessor*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDXVAHD_VideoProcessor*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDXVAHD_VideoProcessor*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_video_process_blt_state(this : IDXVAHD_VideoProcessor*, state : DXVAHD_BLT_STATE, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_video_process_blt_state.call(this, state, datasize, pdata)
  end
  def get_video_process_blt_state(this : IDXVAHD_VideoProcessor*, state : DXVAHD_BLT_STATE, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.get_video_process_blt_state.call(this, state, datasize, pdata)
  end
  def set_video_process_stream_state(this : IDXVAHD_VideoProcessor*, streamnumber : UInt32, state : DXVAHD_STREAM_STATE, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_video_process_stream_state.call(this, streamnumber, state, datasize, pdata)
  end
  def get_video_process_stream_state(this : IDXVAHD_VideoProcessor*, streamnumber : UInt32, state : DXVAHD_STREAM_STATE, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.get_video_process_stream_state.call(this, streamnumber, state, datasize, pdata)
  end
  def video_process_blt_hd(this : IDXVAHD_VideoProcessor*, poutputsurface : IDirect3DSurface9, outputframe : UInt32, streamcount : UInt32, pstreams : DXVAHD_STREAM_DATA*) : HRESULT
    @lpVtbl.value.video_process_blt_hd.call(this, poutputsurface, outputframe, streamcount, pstreams)
  end
end
struct LibWin32::IDirect3DDeviceManager9
  def query_interface(this : IDirect3DDeviceManager9*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDirect3DDeviceManager9*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDirect3DDeviceManager9*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def reset_device(this : IDirect3DDeviceManager9*, pdevice : IDirect3DDevice9, resettoken : UInt32) : HRESULT
    @lpVtbl.value.reset_device.call(this, pdevice, resettoken)
  end
  def open_device_handle(this : IDirect3DDeviceManager9*, phdevice : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.open_device_handle.call(this, phdevice)
  end
  def close_device_handle(this : IDirect3DDeviceManager9*, hdevice : LibC::HANDLE) : HRESULT
    @lpVtbl.value.close_device_handle.call(this, hdevice)
  end
  def test_device(this : IDirect3DDeviceManager9*, hdevice : LibC::HANDLE) : HRESULT
    @lpVtbl.value.test_device.call(this, hdevice)
  end
  def lock_device(this : IDirect3DDeviceManager9*, hdevice : LibC::HANDLE, ppdevice : IDirect3DDevice9*, fblock : LibC::BOOL) : HRESULT
    @lpVtbl.value.lock_device.call(this, hdevice, ppdevice, fblock)
  end
  def unlock_device(this : IDirect3DDeviceManager9*, hdevice : LibC::HANDLE, fsavestate : LibC::BOOL) : HRESULT
    @lpVtbl.value.unlock_device.call(this, hdevice, fsavestate)
  end
  def get_video_service(this : IDirect3DDeviceManager9*, hdevice : LibC::HANDLE, riid : Guid*, ppservice : Void**) : HRESULT
    @lpVtbl.value.get_video_service.call(this, hdevice, riid, ppservice)
  end
end
struct LibWin32::IDirectXVideoAccelerationService
  def query_interface(this : IDirectXVideoAccelerationService*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDirectXVideoAccelerationService*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDirectXVideoAccelerationService*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_surface(this : IDirectXVideoAccelerationService*, width : UInt32, height : UInt32, backbuffers : UInt32, format : D3DFORMAT, pool : D3DPOOL, usage : UInt32, dxvatype : DXVA2_VideoRenderTargetType, ppsurface : IDirect3DSurface9*, psharedhandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_surface.call(this, width, height, backbuffers, format, pool, usage, dxvatype, ppsurface, psharedhandle)
  end
end
struct LibWin32::IDirectXVideoDecoderService
  def query_interface(this : IDirectXVideoDecoderService*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDirectXVideoDecoderService*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDirectXVideoDecoderService*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_surface(this : IDirectXVideoDecoderService*, width : UInt32, height : UInt32, backbuffers : UInt32, format : D3DFORMAT, pool : D3DPOOL, usage : UInt32, dxvatype : DXVA2_VideoRenderTargetType, ppsurface : IDirect3DSurface9*, psharedhandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_surface.call(this, width, height, backbuffers, format, pool, usage, dxvatype, ppsurface, psharedhandle)
  end
  def get_decoder_device_guids(this : IDirectXVideoDecoderService*, pcount : UInt32*, pguids : Guid**) : HRESULT
    @lpVtbl.value.get_decoder_device_guids.call(this, pcount, pguids)
  end
  def get_decoder_render_targets(this : IDirectXVideoDecoderService*, guid : Guid*, pcount : UInt32*, pformats : D3DFORMAT**) : HRESULT
    @lpVtbl.value.get_decoder_render_targets.call(this, guid, pcount, pformats)
  end
  def get_decoder_configurations(this : IDirectXVideoDecoderService*, guid : Guid*, pvideodesc : DXVA2_VideoDesc*, preserved : Void*, pcount : UInt32*, ppconfigs : DXVA2_ConfigPictureDecode**) : HRESULT
    @lpVtbl.value.get_decoder_configurations.call(this, guid, pvideodesc, preserved, pcount, ppconfigs)
  end
  def create_video_decoder(this : IDirectXVideoDecoderService*, guid : Guid*, pvideodesc : DXVA2_VideoDesc*, pconfig : DXVA2_ConfigPictureDecode*, ppdecoderrendertargets : IDirect3DSurface9*, numrendertargets : UInt32, ppdecode : IDirectXVideoDecoder*) : HRESULT
    @lpVtbl.value.create_video_decoder.call(this, guid, pvideodesc, pconfig, ppdecoderrendertargets, numrendertargets, ppdecode)
  end
end
struct LibWin32::IDirectXVideoProcessorService
  def query_interface(this : IDirectXVideoProcessorService*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDirectXVideoProcessorService*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDirectXVideoProcessorService*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_surface(this : IDirectXVideoProcessorService*, width : UInt32, height : UInt32, backbuffers : UInt32, format : D3DFORMAT, pool : D3DPOOL, usage : UInt32, dxvatype : DXVA2_VideoRenderTargetType, ppsurface : IDirect3DSurface9*, psharedhandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_surface.call(this, width, height, backbuffers, format, pool, usage, dxvatype, ppsurface, psharedhandle)
  end
  def register_video_processor_software_device(this : IDirectXVideoProcessorService*, pcallbacks : Void*) : HRESULT
    @lpVtbl.value.register_video_processor_software_device.call(this, pcallbacks)
  end
  def get_video_processor_device_guids(this : IDirectXVideoProcessorService*, pvideodesc : DXVA2_VideoDesc*, pcount : UInt32*, pguids : Guid**) : HRESULT
    @lpVtbl.value.get_video_processor_device_guids.call(this, pvideodesc, pcount, pguids)
  end
  def get_video_processor_render_targets(this : IDirectXVideoProcessorService*, videoprocdeviceguid : Guid*, pvideodesc : DXVA2_VideoDesc*, pcount : UInt32*, pformats : D3DFORMAT**) : HRESULT
    @lpVtbl.value.get_video_processor_render_targets.call(this, videoprocdeviceguid, pvideodesc, pcount, pformats)
  end
  def get_video_processor_sub_stream_formats(this : IDirectXVideoProcessorService*, videoprocdeviceguid : Guid*, pvideodesc : DXVA2_VideoDesc*, rendertargetformat : D3DFORMAT, pcount : UInt32*, pformats : D3DFORMAT**) : HRESULT
    @lpVtbl.value.get_video_processor_sub_stream_formats.call(this, videoprocdeviceguid, pvideodesc, rendertargetformat, pcount, pformats)
  end
  def get_video_processor_caps(this : IDirectXVideoProcessorService*, videoprocdeviceguid : Guid*, pvideodesc : DXVA2_VideoDesc*, rendertargetformat : D3DFORMAT, pcaps : DXVA2_VideoProcessorCaps*) : HRESULT
    @lpVtbl.value.get_video_processor_caps.call(this, videoprocdeviceguid, pvideodesc, rendertargetformat, pcaps)
  end
  def get_proc_amp_range(this : IDirectXVideoProcessorService*, videoprocdeviceguid : Guid*, pvideodesc : DXVA2_VideoDesc*, rendertargetformat : D3DFORMAT, procampcap : UInt32, prange : DXVA2_ValueRange*) : HRESULT
    @lpVtbl.value.get_proc_amp_range.call(this, videoprocdeviceguid, pvideodesc, rendertargetformat, procampcap, prange)
  end
  def get_filter_property_range(this : IDirectXVideoProcessorService*, videoprocdeviceguid : Guid*, pvideodesc : DXVA2_VideoDesc*, rendertargetformat : D3DFORMAT, filtersetting : UInt32, prange : DXVA2_ValueRange*) : HRESULT
    @lpVtbl.value.get_filter_property_range.call(this, videoprocdeviceguid, pvideodesc, rendertargetformat, filtersetting, prange)
  end
  def create_video_processor(this : IDirectXVideoProcessorService*, videoprocdeviceguid : Guid*, pvideodesc : DXVA2_VideoDesc*, rendertargetformat : D3DFORMAT, maxnumsubstreams : UInt32, ppvidprocess : IDirectXVideoProcessor*) : HRESULT
    @lpVtbl.value.create_video_processor.call(this, videoprocdeviceguid, pvideodesc, rendertargetformat, maxnumsubstreams, ppvidprocess)
  end
end
struct LibWin32::IDirectXVideoDecoder
  def query_interface(this : IDirectXVideoDecoder*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDirectXVideoDecoder*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDirectXVideoDecoder*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_video_decoder_service(this : IDirectXVideoDecoder*, ppservice : IDirectXVideoDecoderService*) : HRESULT
    @lpVtbl.value.get_video_decoder_service.call(this, ppservice)
  end
  def get_creation_parameters(this : IDirectXVideoDecoder*, pdeviceguid : Guid*, pvideodesc : DXVA2_VideoDesc*, pconfig : DXVA2_ConfigPictureDecode*, pdecoderrendertargets : IDirect3DSurface9**, pnumsurfaces : UInt32*) : HRESULT
    @lpVtbl.value.get_creation_parameters.call(this, pdeviceguid, pvideodesc, pconfig, pdecoderrendertargets, pnumsurfaces)
  end
  def get_buffer(this : IDirectXVideoDecoder*, buffertype : DXVA2_BufferfType, ppbuffer : Void**, pbuffersize : UInt32*) : HRESULT
    @lpVtbl.value.get_buffer.call(this, buffertype, ppbuffer, pbuffersize)
  end
  def release_buffer(this : IDirectXVideoDecoder*, buffertype : UInt32) : HRESULT
    @lpVtbl.value.release_buffer.call(this, buffertype)
  end
  def begin_frame(this : IDirectXVideoDecoder*, prendertarget : IDirect3DSurface9, pvpvpdata : Void*) : HRESULT
    @lpVtbl.value.begin_frame.call(this, prendertarget, pvpvpdata)
  end
  def end_frame(this : IDirectXVideoDecoder*, phandlecomplete : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.end_frame.call(this, phandlecomplete)
  end
  def execute(this : IDirectXVideoDecoder*, pexecuteparams : DXVA2_DecodeExecuteParams*) : HRESULT
    @lpVtbl.value.execute.call(this, pexecuteparams)
  end
end
struct LibWin32::IDirectXVideoProcessor
  def query_interface(this : IDirectXVideoProcessor*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDirectXVideoProcessor*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDirectXVideoProcessor*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_video_processor_service(this : IDirectXVideoProcessor*, ppservice : IDirectXVideoProcessorService*) : HRESULT
    @lpVtbl.value.get_video_processor_service.call(this, ppservice)
  end
  def get_creation_parameters(this : IDirectXVideoProcessor*, pdeviceguid : Guid*, pvideodesc : DXVA2_VideoDesc*, prendertargetformat : D3DFORMAT*, pmaxnumsubstreams : UInt32*) : HRESULT
    @lpVtbl.value.get_creation_parameters.call(this, pdeviceguid, pvideodesc, prendertargetformat, pmaxnumsubstreams)
  end
  def get_video_processor_caps(this : IDirectXVideoProcessor*, pcaps : DXVA2_VideoProcessorCaps*) : HRESULT
    @lpVtbl.value.get_video_processor_caps.call(this, pcaps)
  end
  def get_proc_amp_range(this : IDirectXVideoProcessor*, procampcap : UInt32, prange : DXVA2_ValueRange*) : HRESULT
    @lpVtbl.value.get_proc_amp_range.call(this, procampcap, prange)
  end
  def get_filter_property_range(this : IDirectXVideoProcessor*, filtersetting : UInt32, prange : DXVA2_ValueRange*) : HRESULT
    @lpVtbl.value.get_filter_property_range.call(this, filtersetting, prange)
  end
  def video_process_blt(this : IDirectXVideoProcessor*, prendertarget : IDirect3DSurface9, pbltparams : DXVA2_VideoProcessBltParams*, psamples : DXVA2_VideoSample*, numsamples : UInt32, phandlecomplete : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.video_process_blt.call(this, prendertarget, pbltparams, psamples, numsamples, phandlecomplete)
  end
end
struct LibWin32::IDirectXVideoMemoryConfiguration
  def query_interface(this : IDirectXVideoMemoryConfiguration*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDirectXVideoMemoryConfiguration*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDirectXVideoMemoryConfiguration*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_available_surface_type_by_index(this : IDirectXVideoMemoryConfiguration*, dwtypeindex : UInt32, pdwtype : DXVA2_SurfaceType*) : HRESULT
    @lpVtbl.value.get_available_surface_type_by_index.call(this, dwtypeindex, pdwtype)
  end
  def set_surface_type(this : IDirectXVideoMemoryConfiguration*, dwtype : DXVA2_SurfaceType) : HRESULT
    @lpVtbl.value.set_surface_type.call(this, dwtype)
  end
end
struct LibWin32::IOPMVideoOutput
  def query_interface(this : IOPMVideoOutput*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IOPMVideoOutput*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IOPMVideoOutput*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def start_initialization(this : IOPMVideoOutput*, prnrandomnumber : OPM_RANDOM_NUMBER*, ppbcertificate : UInt8**, pulcertificatelength : UInt32*) : HRESULT
    @lpVtbl.value.start_initialization.call(this, prnrandomnumber, ppbcertificate, pulcertificatelength)
  end
  def finish_initialization(this : IOPMVideoOutput*, pparameters : OPM_ENCRYPTED_INITIALIZATION_PARAMETERS*) : HRESULT
    @lpVtbl.value.finish_initialization.call(this, pparameters)
  end
  def get_information(this : IOPMVideoOutput*, pparameters : OPM_GET_INFO_PARAMETERS*, prequestedinformation : OPM_REQUESTED_INFORMATION*) : HRESULT
    @lpVtbl.value.get_information.call(this, pparameters, prequestedinformation)
  end
  def copp_compatible_get_information(this : IOPMVideoOutput*, pparameters : OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS*, prequestedinformation : OPM_REQUESTED_INFORMATION*) : HRESULT
    @lpVtbl.value.copp_compatible_get_information.call(this, pparameters, prequestedinformation)
  end
  def configure(this : IOPMVideoOutput*, pparameters : OPM_CONFIGURE_PARAMETERS*, uladditionalparameterssize : UInt32, pbadditionalparameters : UInt8*) : HRESULT
    @lpVtbl.value.configure.call(this, pparameters, uladditionalparameterssize, pbadditionalparameters)
  end
end
struct LibWin32::IMFAttributes
  def query_interface(this : IMFAttributes*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFAttributes*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFAttributes*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_item(this : IMFAttributes*, guidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item.call(this, guidkey, pvalue)
  end
  def get_item_type(this : IMFAttributes*, guidkey : Guid*, ptype : MF_ATTRIBUTE_TYPE*) : HRESULT
    @lpVtbl.value.get_item_type.call(this, guidkey, ptype)
  end
  def compare_item(this : IMFAttributes*, guidkey : Guid*, value : PROPVARIANT*, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare_item.call(this, guidkey, value, pbresult)
  end
  def compare(this : IMFAttributes*, ptheirs : IMFAttributes, matchtype : MF_ATTRIBUTES_MATCH_TYPE, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare.call(this, ptheirs, matchtype, pbresult)
  end
  def get_uint32(this : IMFAttributes*, guidkey : Guid*, punvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_uint32.call(this, guidkey, punvalue)
  end
  def get_uint64(this : IMFAttributes*, guidkey : Guid*, punvalue : UInt64*) : HRESULT
    @lpVtbl.value.get_uint64.call(this, guidkey, punvalue)
  end
  def get_double(this : IMFAttributes*, guidkey : Guid*, pfvalue : Float64*) : HRESULT
    @lpVtbl.value.get_double.call(this, guidkey, pfvalue)
  end
  def get_guid(this : IMFAttributes*, guidkey : Guid*, pguidvalue : Guid*) : HRESULT
    @lpVtbl.value.get_guid.call(this, guidkey, pguidvalue)
  end
  def get_string_length(this : IMFAttributes*, guidkey : Guid*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string_length.call(this, guidkey, pcchlength)
  end
  def get_string(this : IMFAttributes*, guidkey : Guid*, pwszvalue : Char*, cchbufsize : UInt32, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string.call(this, guidkey, pwszvalue, cchbufsize, pcchlength)
  end
  def get_allocated_string(this : IMFAttributes*, guidkey : Guid*, ppwszvalue : LibC::LPWSTR*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_string.call(this, guidkey, ppwszvalue, pcchlength)
  end
  def get_blob_size(this : IMFAttributes*, guidkey : Guid*, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob_size.call(this, guidkey, pcbblobsize)
  end
  def get_blob(this : IMFAttributes*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob.call(this, guidkey, pbuf, cbbufsize, pcbblobsize)
  end
  def get_allocated_blob(this : IMFAttributes*, guidkey : Guid*, ppbuf : UInt8**, pcbsize : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_blob.call(this, guidkey, ppbuf, pcbsize)
  end
  def get_unknown(this : IMFAttributes*, guidkey : Guid*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_unknown.call(this, guidkey, riid, ppv)
  end
  def set_item(this : IMFAttributes*, guidkey : Guid*, value : PROPVARIANT*) : HRESULT
    @lpVtbl.value.set_item.call(this, guidkey, value)
  end
  def delete_item(this : IMFAttributes*, guidkey : Guid*) : HRESULT
    @lpVtbl.value.delete_item.call(this, guidkey)
  end
  def delete_all_items(this : IMFAttributes*) : HRESULT
    @lpVtbl.value.delete_all_items.call(this)
  end
  def set_uint32(this : IMFAttributes*, guidkey : Guid*, unvalue : UInt32) : HRESULT
    @lpVtbl.value.set_uint32.call(this, guidkey, unvalue)
  end
  def set_uint64(this : IMFAttributes*, guidkey : Guid*, unvalue : UInt64) : HRESULT
    @lpVtbl.value.set_uint64.call(this, guidkey, unvalue)
  end
  def set_double(this : IMFAttributes*, guidkey : Guid*, fvalue : Float64) : HRESULT
    @lpVtbl.value.set_double.call(this, guidkey, fvalue)
  end
  def set_guid(this : IMFAttributes*, guidkey : Guid*, guidvalue : Guid*) : HRESULT
    @lpVtbl.value.set_guid.call(this, guidkey, guidvalue)
  end
  def set_string(this : IMFAttributes*, guidkey : Guid*, wszvalue : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_string.call(this, guidkey, wszvalue)
  end
  def set_blob(this : IMFAttributes*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32) : HRESULT
    @lpVtbl.value.set_blob.call(this, guidkey, pbuf, cbbufsize)
  end
  def set_unknown(this : IMFAttributes*, guidkey : Guid*, punknown : IUnknown) : HRESULT
    @lpVtbl.value.set_unknown.call(this, guidkey, punknown)
  end
  def lock_store(this : IMFAttributes*) : HRESULT
    @lpVtbl.value.lock_store.call(this)
  end
  def unlock_store(this : IMFAttributes*) : HRESULT
    @lpVtbl.value.unlock_store.call(this)
  end
  def get_count(this : IMFAttributes*, pcitems : UInt32*) : HRESULT
    @lpVtbl.value.get_count.call(this, pcitems)
  end
  def get_item_by_index(this : IMFAttributes*, unindex : UInt32, pguidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item_by_index.call(this, unindex, pguidkey, pvalue)
  end
  def copy_all_items(this : IMFAttributes*, pdest : IMFAttributes) : HRESULT
    @lpVtbl.value.copy_all_items.call(this, pdest)
  end
end
struct LibWin32::IMFMediaBuffer
  def query_interface(this : IMFMediaBuffer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaBuffer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaBuffer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def lock(this : IMFMediaBuffer*, ppbbuffer : UInt8**, pcbmaxlength : UInt32*, pcbcurrentlength : UInt32*) : HRESULT
    @lpVtbl.value.lock.call(this, ppbbuffer, pcbmaxlength, pcbcurrentlength)
  end
  def unlock(this : IMFMediaBuffer*) : HRESULT
    @lpVtbl.value.unlock.call(this)
  end
  def get_current_length(this : IMFMediaBuffer*, pcbcurrentlength : UInt32*) : HRESULT
    @lpVtbl.value.get_current_length.call(this, pcbcurrentlength)
  end
  def set_current_length(this : IMFMediaBuffer*, cbcurrentlength : UInt32) : HRESULT
    @lpVtbl.value.set_current_length.call(this, cbcurrentlength)
  end
  def get_max_length(this : IMFMediaBuffer*, pcbmaxlength : UInt32*) : HRESULT
    @lpVtbl.value.get_max_length.call(this, pcbmaxlength)
  end
end
struct LibWin32::IMFSample
  def query_interface(this : IMFSample*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSample*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSample*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_item(this : IMFSample*, guidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item.call(this, guidkey, pvalue)
  end
  def get_item_type(this : IMFSample*, guidkey : Guid*, ptype : MF_ATTRIBUTE_TYPE*) : HRESULT
    @lpVtbl.value.get_item_type.call(this, guidkey, ptype)
  end
  def compare_item(this : IMFSample*, guidkey : Guid*, value : PROPVARIANT*, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare_item.call(this, guidkey, value, pbresult)
  end
  def compare(this : IMFSample*, ptheirs : IMFAttributes, matchtype : MF_ATTRIBUTES_MATCH_TYPE, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare.call(this, ptheirs, matchtype, pbresult)
  end
  def get_uint32(this : IMFSample*, guidkey : Guid*, punvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_uint32.call(this, guidkey, punvalue)
  end
  def get_uint64(this : IMFSample*, guidkey : Guid*, punvalue : UInt64*) : HRESULT
    @lpVtbl.value.get_uint64.call(this, guidkey, punvalue)
  end
  def get_double(this : IMFSample*, guidkey : Guid*, pfvalue : Float64*) : HRESULT
    @lpVtbl.value.get_double.call(this, guidkey, pfvalue)
  end
  def get_guid(this : IMFSample*, guidkey : Guid*, pguidvalue : Guid*) : HRESULT
    @lpVtbl.value.get_guid.call(this, guidkey, pguidvalue)
  end
  def get_string_length(this : IMFSample*, guidkey : Guid*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string_length.call(this, guidkey, pcchlength)
  end
  def get_string(this : IMFSample*, guidkey : Guid*, pwszvalue : Char*, cchbufsize : UInt32, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string.call(this, guidkey, pwszvalue, cchbufsize, pcchlength)
  end
  def get_allocated_string(this : IMFSample*, guidkey : Guid*, ppwszvalue : LibC::LPWSTR*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_string.call(this, guidkey, ppwszvalue, pcchlength)
  end
  def get_blob_size(this : IMFSample*, guidkey : Guid*, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob_size.call(this, guidkey, pcbblobsize)
  end
  def get_blob(this : IMFSample*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob.call(this, guidkey, pbuf, cbbufsize, pcbblobsize)
  end
  def get_allocated_blob(this : IMFSample*, guidkey : Guid*, ppbuf : UInt8**, pcbsize : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_blob.call(this, guidkey, ppbuf, pcbsize)
  end
  def get_unknown(this : IMFSample*, guidkey : Guid*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_unknown.call(this, guidkey, riid, ppv)
  end
  def set_item(this : IMFSample*, guidkey : Guid*, value : PROPVARIANT*) : HRESULT
    @lpVtbl.value.set_item.call(this, guidkey, value)
  end
  def delete_item(this : IMFSample*, guidkey : Guid*) : HRESULT
    @lpVtbl.value.delete_item.call(this, guidkey)
  end
  def delete_all_items(this : IMFSample*) : HRESULT
    @lpVtbl.value.delete_all_items.call(this)
  end
  def set_uint32(this : IMFSample*, guidkey : Guid*, unvalue : UInt32) : HRESULT
    @lpVtbl.value.set_uint32.call(this, guidkey, unvalue)
  end
  def set_uint64(this : IMFSample*, guidkey : Guid*, unvalue : UInt64) : HRESULT
    @lpVtbl.value.set_uint64.call(this, guidkey, unvalue)
  end
  def set_double(this : IMFSample*, guidkey : Guid*, fvalue : Float64) : HRESULT
    @lpVtbl.value.set_double.call(this, guidkey, fvalue)
  end
  def set_guid(this : IMFSample*, guidkey : Guid*, guidvalue : Guid*) : HRESULT
    @lpVtbl.value.set_guid.call(this, guidkey, guidvalue)
  end
  def set_string(this : IMFSample*, guidkey : Guid*, wszvalue : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_string.call(this, guidkey, wszvalue)
  end
  def set_blob(this : IMFSample*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32) : HRESULT
    @lpVtbl.value.set_blob.call(this, guidkey, pbuf, cbbufsize)
  end
  def set_unknown(this : IMFSample*, guidkey : Guid*, punknown : IUnknown) : HRESULT
    @lpVtbl.value.set_unknown.call(this, guidkey, punknown)
  end
  def lock_store(this : IMFSample*) : HRESULT
    @lpVtbl.value.lock_store.call(this)
  end
  def unlock_store(this : IMFSample*) : HRESULT
    @lpVtbl.value.unlock_store.call(this)
  end
  def get_count(this : IMFSample*, pcitems : UInt32*) : HRESULT
    @lpVtbl.value.get_count.call(this, pcitems)
  end
  def get_item_by_index(this : IMFSample*, unindex : UInt32, pguidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item_by_index.call(this, unindex, pguidkey, pvalue)
  end
  def copy_all_items(this : IMFSample*, pdest : IMFAttributes) : HRESULT
    @lpVtbl.value.copy_all_items.call(this, pdest)
  end
  def get_sample_flags(this : IMFSample*, pdwsampleflags : UInt32*) : HRESULT
    @lpVtbl.value.get_sample_flags.call(this, pdwsampleflags)
  end
  def set_sample_flags(this : IMFSample*, dwsampleflags : UInt32) : HRESULT
    @lpVtbl.value.set_sample_flags.call(this, dwsampleflags)
  end
  def get_sample_time(this : IMFSample*, phnssampletime : Int64*) : HRESULT
    @lpVtbl.value.get_sample_time.call(this, phnssampletime)
  end
  def set_sample_time(this : IMFSample*, hnssampletime : Int64) : HRESULT
    @lpVtbl.value.set_sample_time.call(this, hnssampletime)
  end
  def get_sample_duration(this : IMFSample*, phnssampleduration : Int64*) : HRESULT
    @lpVtbl.value.get_sample_duration.call(this, phnssampleduration)
  end
  def set_sample_duration(this : IMFSample*, hnssampleduration : Int64) : HRESULT
    @lpVtbl.value.set_sample_duration.call(this, hnssampleduration)
  end
  def get_buffer_count(this : IMFSample*, pdwbuffercount : UInt32*) : HRESULT
    @lpVtbl.value.get_buffer_count.call(this, pdwbuffercount)
  end
  def get_buffer_by_index(this : IMFSample*, dwindex : UInt32, ppbuffer : IMFMediaBuffer*) : HRESULT
    @lpVtbl.value.get_buffer_by_index.call(this, dwindex, ppbuffer)
  end
  def convert_to_contiguous_buffer(this : IMFSample*, ppbuffer : IMFMediaBuffer*) : HRESULT
    @lpVtbl.value.convert_to_contiguous_buffer.call(this, ppbuffer)
  end
  def add_buffer(this : IMFSample*, pbuffer : IMFMediaBuffer) : HRESULT
    @lpVtbl.value.add_buffer.call(this, pbuffer)
  end
  def remove_buffer_by_index(this : IMFSample*, dwindex : UInt32) : HRESULT
    @lpVtbl.value.remove_buffer_by_index.call(this, dwindex)
  end
  def remove_all_buffers(this : IMFSample*) : HRESULT
    @lpVtbl.value.remove_all_buffers.call(this)
  end
  def get_total_length(this : IMFSample*, pcbtotallength : UInt32*) : HRESULT
    @lpVtbl.value.get_total_length.call(this, pcbtotallength)
  end
  def copy_to_buffer(this : IMFSample*, pbuffer : IMFMediaBuffer) : HRESULT
    @lpVtbl.value.copy_to_buffer.call(this, pbuffer)
  end
end
struct LibWin32::IMF2DBuffer
  def query_interface(this : IMF2DBuffer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMF2DBuffer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMF2DBuffer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def lock2_d(this : IMF2DBuffer*, ppbscanline0 : UInt8**, plpitch : Int32*) : HRESULT
    @lpVtbl.value.lock2_d.call(this, ppbscanline0, plpitch)
  end
  def unlock2_d(this : IMF2DBuffer*) : HRESULT
    @lpVtbl.value.unlock2_d.call(this)
  end
  def get_scanline0_and_pitch(this : IMF2DBuffer*, pbscanline0 : UInt8**, plpitch : Int32*) : HRESULT
    @lpVtbl.value.get_scanline0_and_pitch.call(this, pbscanline0, plpitch)
  end
  def is_contiguous_format(this : IMF2DBuffer*, pfiscontiguous : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_contiguous_format.call(this, pfiscontiguous)
  end
  def get_contiguous_length(this : IMF2DBuffer*, pcblength : UInt32*) : HRESULT
    @lpVtbl.value.get_contiguous_length.call(this, pcblength)
  end
  def contiguous_copy_to(this : IMF2DBuffer*, pbdestbuffer : UInt8*, cbdestbuffer : UInt32) : HRESULT
    @lpVtbl.value.contiguous_copy_to.call(this, pbdestbuffer, cbdestbuffer)
  end
  def contiguous_copy_from(this : IMF2DBuffer*, pbsrcbuffer : UInt8*, cbsrcbuffer : UInt32) : HRESULT
    @lpVtbl.value.contiguous_copy_from.call(this, pbsrcbuffer, cbsrcbuffer)
  end
end
struct LibWin32::IMF2DBuffer2
  def query_interface(this : IMF2DBuffer2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMF2DBuffer2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMF2DBuffer2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def lock2_d(this : IMF2DBuffer2*, ppbscanline0 : UInt8**, plpitch : Int32*) : HRESULT
    @lpVtbl.value.lock2_d.call(this, ppbscanline0, plpitch)
  end
  def unlock2_d(this : IMF2DBuffer2*) : HRESULT
    @lpVtbl.value.unlock2_d.call(this)
  end
  def get_scanline0_and_pitch(this : IMF2DBuffer2*, pbscanline0 : UInt8**, plpitch : Int32*) : HRESULT
    @lpVtbl.value.get_scanline0_and_pitch.call(this, pbscanline0, plpitch)
  end
  def is_contiguous_format(this : IMF2DBuffer2*, pfiscontiguous : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_contiguous_format.call(this, pfiscontiguous)
  end
  def get_contiguous_length(this : IMF2DBuffer2*, pcblength : UInt32*) : HRESULT
    @lpVtbl.value.get_contiguous_length.call(this, pcblength)
  end
  def contiguous_copy_to(this : IMF2DBuffer2*, pbdestbuffer : UInt8*, cbdestbuffer : UInt32) : HRESULT
    @lpVtbl.value.contiguous_copy_to.call(this, pbdestbuffer, cbdestbuffer)
  end
  def contiguous_copy_from(this : IMF2DBuffer2*, pbsrcbuffer : UInt8*, cbsrcbuffer : UInt32) : HRESULT
    @lpVtbl.value.contiguous_copy_from.call(this, pbsrcbuffer, cbsrcbuffer)
  end
  def lock2_d_size(this : IMF2DBuffer2*, lockflags : MF2DBuffer_LockFlags, ppbscanline0 : UInt8**, plpitch : Int32*, ppbbufferstart : UInt8**, pcbbufferlength : UInt32*) : HRESULT
    @lpVtbl.value.lock2_d_size.call(this, lockflags, ppbscanline0, plpitch, ppbbufferstart, pcbbufferlength)
  end
  def copy2_d_to(this : IMF2DBuffer2*, pdestbuffer : IMF2DBuffer2) : HRESULT
    @lpVtbl.value.copy2_d_to.call(this, pdestbuffer)
  end
end
struct LibWin32::IMFDXGIBuffer
  def query_interface(this : IMFDXGIBuffer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFDXGIBuffer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFDXGIBuffer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_resource(this : IMFDXGIBuffer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.get_resource.call(this, riid, ppvobject)
  end
  def get_subresource_index(this : IMFDXGIBuffer*, pusubresource : UInt32*) : HRESULT
    @lpVtbl.value.get_subresource_index.call(this, pusubresource)
  end
  def get_unknown(this : IMFDXGIBuffer*, guid : Guid*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.get_unknown.call(this, guid, riid, ppvobject)
  end
  def set_unknown(this : IMFDXGIBuffer*, guid : Guid*, punkdata : IUnknown) : HRESULT
    @lpVtbl.value.set_unknown.call(this, guid, punkdata)
  end
end
struct LibWin32::IMFMediaType
  def query_interface(this : IMFMediaType*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaType*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaType*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_item(this : IMFMediaType*, guidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item.call(this, guidkey, pvalue)
  end
  def get_item_type(this : IMFMediaType*, guidkey : Guid*, ptype : MF_ATTRIBUTE_TYPE*) : HRESULT
    @lpVtbl.value.get_item_type.call(this, guidkey, ptype)
  end
  def compare_item(this : IMFMediaType*, guidkey : Guid*, value : PROPVARIANT*, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare_item.call(this, guidkey, value, pbresult)
  end
  def compare(this : IMFMediaType*, ptheirs : IMFAttributes, matchtype : MF_ATTRIBUTES_MATCH_TYPE, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare.call(this, ptheirs, matchtype, pbresult)
  end
  def get_uint32(this : IMFMediaType*, guidkey : Guid*, punvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_uint32.call(this, guidkey, punvalue)
  end
  def get_uint64(this : IMFMediaType*, guidkey : Guid*, punvalue : UInt64*) : HRESULT
    @lpVtbl.value.get_uint64.call(this, guidkey, punvalue)
  end
  def get_double(this : IMFMediaType*, guidkey : Guid*, pfvalue : Float64*) : HRESULT
    @lpVtbl.value.get_double.call(this, guidkey, pfvalue)
  end
  def get_guid(this : IMFMediaType*, guidkey : Guid*, pguidvalue : Guid*) : HRESULT
    @lpVtbl.value.get_guid.call(this, guidkey, pguidvalue)
  end
  def get_string_length(this : IMFMediaType*, guidkey : Guid*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string_length.call(this, guidkey, pcchlength)
  end
  def get_string(this : IMFMediaType*, guidkey : Guid*, pwszvalue : Char*, cchbufsize : UInt32, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string.call(this, guidkey, pwszvalue, cchbufsize, pcchlength)
  end
  def get_allocated_string(this : IMFMediaType*, guidkey : Guid*, ppwszvalue : LibC::LPWSTR*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_string.call(this, guidkey, ppwszvalue, pcchlength)
  end
  def get_blob_size(this : IMFMediaType*, guidkey : Guid*, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob_size.call(this, guidkey, pcbblobsize)
  end
  def get_blob(this : IMFMediaType*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob.call(this, guidkey, pbuf, cbbufsize, pcbblobsize)
  end
  def get_allocated_blob(this : IMFMediaType*, guidkey : Guid*, ppbuf : UInt8**, pcbsize : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_blob.call(this, guidkey, ppbuf, pcbsize)
  end
  def get_unknown(this : IMFMediaType*, guidkey : Guid*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_unknown.call(this, guidkey, riid, ppv)
  end
  def set_item(this : IMFMediaType*, guidkey : Guid*, value : PROPVARIANT*) : HRESULT
    @lpVtbl.value.set_item.call(this, guidkey, value)
  end
  def delete_item(this : IMFMediaType*, guidkey : Guid*) : HRESULT
    @lpVtbl.value.delete_item.call(this, guidkey)
  end
  def delete_all_items(this : IMFMediaType*) : HRESULT
    @lpVtbl.value.delete_all_items.call(this)
  end
  def set_uint32(this : IMFMediaType*, guidkey : Guid*, unvalue : UInt32) : HRESULT
    @lpVtbl.value.set_uint32.call(this, guidkey, unvalue)
  end
  def set_uint64(this : IMFMediaType*, guidkey : Guid*, unvalue : UInt64) : HRESULT
    @lpVtbl.value.set_uint64.call(this, guidkey, unvalue)
  end
  def set_double(this : IMFMediaType*, guidkey : Guid*, fvalue : Float64) : HRESULT
    @lpVtbl.value.set_double.call(this, guidkey, fvalue)
  end
  def set_guid(this : IMFMediaType*, guidkey : Guid*, guidvalue : Guid*) : HRESULT
    @lpVtbl.value.set_guid.call(this, guidkey, guidvalue)
  end
  def set_string(this : IMFMediaType*, guidkey : Guid*, wszvalue : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_string.call(this, guidkey, wszvalue)
  end
  def set_blob(this : IMFMediaType*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32) : HRESULT
    @lpVtbl.value.set_blob.call(this, guidkey, pbuf, cbbufsize)
  end
  def set_unknown(this : IMFMediaType*, guidkey : Guid*, punknown : IUnknown) : HRESULT
    @lpVtbl.value.set_unknown.call(this, guidkey, punknown)
  end
  def lock_store(this : IMFMediaType*) : HRESULT
    @lpVtbl.value.lock_store.call(this)
  end
  def unlock_store(this : IMFMediaType*) : HRESULT
    @lpVtbl.value.unlock_store.call(this)
  end
  def get_count(this : IMFMediaType*, pcitems : UInt32*) : HRESULT
    @lpVtbl.value.get_count.call(this, pcitems)
  end
  def get_item_by_index(this : IMFMediaType*, unindex : UInt32, pguidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item_by_index.call(this, unindex, pguidkey, pvalue)
  end
  def copy_all_items(this : IMFMediaType*, pdest : IMFAttributes) : HRESULT
    @lpVtbl.value.copy_all_items.call(this, pdest)
  end
  def get_major_type(this : IMFMediaType*, pguidmajortype : Guid*) : HRESULT
    @lpVtbl.value.get_major_type.call(this, pguidmajortype)
  end
  def is_compressed_format(this : IMFMediaType*, pfcompressed : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_compressed_format.call(this, pfcompressed)
  end
  def is_equal(this : IMFMediaType*, pimediatype : IMFMediaType, pdwflags : UInt32*) : HRESULT
    @lpVtbl.value.is_equal.call(this, pimediatype, pdwflags)
  end
  def get_representation(this : IMFMediaType*, guidrepresentation : Guid, ppvrepresentation : Void**) : HRESULT
    @lpVtbl.value.get_representation.call(this, guidrepresentation, ppvrepresentation)
  end
  def free_representation(this : IMFMediaType*, guidrepresentation : Guid, pvrepresentation : Void*) : HRESULT
    @lpVtbl.value.free_representation.call(this, guidrepresentation, pvrepresentation)
  end
end
struct LibWin32::IMFAudioMediaType
  def query_interface(this : IMFAudioMediaType*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFAudioMediaType*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFAudioMediaType*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_item(this : IMFAudioMediaType*, guidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item.call(this, guidkey, pvalue)
  end
  def get_item_type(this : IMFAudioMediaType*, guidkey : Guid*, ptype : MF_ATTRIBUTE_TYPE*) : HRESULT
    @lpVtbl.value.get_item_type.call(this, guidkey, ptype)
  end
  def compare_item(this : IMFAudioMediaType*, guidkey : Guid*, value : PROPVARIANT*, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare_item.call(this, guidkey, value, pbresult)
  end
  def compare(this : IMFAudioMediaType*, ptheirs : IMFAttributes, matchtype : MF_ATTRIBUTES_MATCH_TYPE, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare.call(this, ptheirs, matchtype, pbresult)
  end
  def get_uint32(this : IMFAudioMediaType*, guidkey : Guid*, punvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_uint32.call(this, guidkey, punvalue)
  end
  def get_uint64(this : IMFAudioMediaType*, guidkey : Guid*, punvalue : UInt64*) : HRESULT
    @lpVtbl.value.get_uint64.call(this, guidkey, punvalue)
  end
  def get_double(this : IMFAudioMediaType*, guidkey : Guid*, pfvalue : Float64*) : HRESULT
    @lpVtbl.value.get_double.call(this, guidkey, pfvalue)
  end
  def get_guid(this : IMFAudioMediaType*, guidkey : Guid*, pguidvalue : Guid*) : HRESULT
    @lpVtbl.value.get_guid.call(this, guidkey, pguidvalue)
  end
  def get_string_length(this : IMFAudioMediaType*, guidkey : Guid*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string_length.call(this, guidkey, pcchlength)
  end
  def get_string(this : IMFAudioMediaType*, guidkey : Guid*, pwszvalue : Char*, cchbufsize : UInt32, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string.call(this, guidkey, pwszvalue, cchbufsize, pcchlength)
  end
  def get_allocated_string(this : IMFAudioMediaType*, guidkey : Guid*, ppwszvalue : LibC::LPWSTR*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_string.call(this, guidkey, ppwszvalue, pcchlength)
  end
  def get_blob_size(this : IMFAudioMediaType*, guidkey : Guid*, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob_size.call(this, guidkey, pcbblobsize)
  end
  def get_blob(this : IMFAudioMediaType*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob.call(this, guidkey, pbuf, cbbufsize, pcbblobsize)
  end
  def get_allocated_blob(this : IMFAudioMediaType*, guidkey : Guid*, ppbuf : UInt8**, pcbsize : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_blob.call(this, guidkey, ppbuf, pcbsize)
  end
  def get_unknown(this : IMFAudioMediaType*, guidkey : Guid*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_unknown.call(this, guidkey, riid, ppv)
  end
  def set_item(this : IMFAudioMediaType*, guidkey : Guid*, value : PROPVARIANT*) : HRESULT
    @lpVtbl.value.set_item.call(this, guidkey, value)
  end
  def delete_item(this : IMFAudioMediaType*, guidkey : Guid*) : HRESULT
    @lpVtbl.value.delete_item.call(this, guidkey)
  end
  def delete_all_items(this : IMFAudioMediaType*) : HRESULT
    @lpVtbl.value.delete_all_items.call(this)
  end
  def set_uint32(this : IMFAudioMediaType*, guidkey : Guid*, unvalue : UInt32) : HRESULT
    @lpVtbl.value.set_uint32.call(this, guidkey, unvalue)
  end
  def set_uint64(this : IMFAudioMediaType*, guidkey : Guid*, unvalue : UInt64) : HRESULT
    @lpVtbl.value.set_uint64.call(this, guidkey, unvalue)
  end
  def set_double(this : IMFAudioMediaType*, guidkey : Guid*, fvalue : Float64) : HRESULT
    @lpVtbl.value.set_double.call(this, guidkey, fvalue)
  end
  def set_guid(this : IMFAudioMediaType*, guidkey : Guid*, guidvalue : Guid*) : HRESULT
    @lpVtbl.value.set_guid.call(this, guidkey, guidvalue)
  end
  def set_string(this : IMFAudioMediaType*, guidkey : Guid*, wszvalue : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_string.call(this, guidkey, wszvalue)
  end
  def set_blob(this : IMFAudioMediaType*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32) : HRESULT
    @lpVtbl.value.set_blob.call(this, guidkey, pbuf, cbbufsize)
  end
  def set_unknown(this : IMFAudioMediaType*, guidkey : Guid*, punknown : IUnknown) : HRESULT
    @lpVtbl.value.set_unknown.call(this, guidkey, punknown)
  end
  def lock_store(this : IMFAudioMediaType*) : HRESULT
    @lpVtbl.value.lock_store.call(this)
  end
  def unlock_store(this : IMFAudioMediaType*) : HRESULT
    @lpVtbl.value.unlock_store.call(this)
  end
  def get_count(this : IMFAudioMediaType*, pcitems : UInt32*) : HRESULT
    @lpVtbl.value.get_count.call(this, pcitems)
  end
  def get_item_by_index(this : IMFAudioMediaType*, unindex : UInt32, pguidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item_by_index.call(this, unindex, pguidkey, pvalue)
  end
  def copy_all_items(this : IMFAudioMediaType*, pdest : IMFAttributes) : HRESULT
    @lpVtbl.value.copy_all_items.call(this, pdest)
  end
  def get_major_type(this : IMFAudioMediaType*, pguidmajortype : Guid*) : HRESULT
    @lpVtbl.value.get_major_type.call(this, pguidmajortype)
  end
  def is_compressed_format(this : IMFAudioMediaType*, pfcompressed : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_compressed_format.call(this, pfcompressed)
  end
  def is_equal(this : IMFAudioMediaType*, pimediatype : IMFMediaType, pdwflags : UInt32*) : HRESULT
    @lpVtbl.value.is_equal.call(this, pimediatype, pdwflags)
  end
  def get_representation(this : IMFAudioMediaType*, guidrepresentation : Guid, ppvrepresentation : Void**) : HRESULT
    @lpVtbl.value.get_representation.call(this, guidrepresentation, ppvrepresentation)
  end
  def free_representation(this : IMFAudioMediaType*, guidrepresentation : Guid, pvrepresentation : Void*) : HRESULT
    @lpVtbl.value.free_representation.call(this, guidrepresentation, pvrepresentation)
  end
  def get_audio_format(this : IMFAudioMediaType*) : WAVEFORMATEX*
    @lpVtbl.value.get_audio_format.call(this)
  end
end
struct LibWin32::IMFVideoMediaType
  def query_interface(this : IMFVideoMediaType*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFVideoMediaType*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFVideoMediaType*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_item(this : IMFVideoMediaType*, guidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item.call(this, guidkey, pvalue)
  end
  def get_item_type(this : IMFVideoMediaType*, guidkey : Guid*, ptype : MF_ATTRIBUTE_TYPE*) : HRESULT
    @lpVtbl.value.get_item_type.call(this, guidkey, ptype)
  end
  def compare_item(this : IMFVideoMediaType*, guidkey : Guid*, value : PROPVARIANT*, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare_item.call(this, guidkey, value, pbresult)
  end
  def compare(this : IMFVideoMediaType*, ptheirs : IMFAttributes, matchtype : MF_ATTRIBUTES_MATCH_TYPE, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare.call(this, ptheirs, matchtype, pbresult)
  end
  def get_uint32(this : IMFVideoMediaType*, guidkey : Guid*, punvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_uint32.call(this, guidkey, punvalue)
  end
  def get_uint64(this : IMFVideoMediaType*, guidkey : Guid*, punvalue : UInt64*) : HRESULT
    @lpVtbl.value.get_uint64.call(this, guidkey, punvalue)
  end
  def get_double(this : IMFVideoMediaType*, guidkey : Guid*, pfvalue : Float64*) : HRESULT
    @lpVtbl.value.get_double.call(this, guidkey, pfvalue)
  end
  def get_guid(this : IMFVideoMediaType*, guidkey : Guid*, pguidvalue : Guid*) : HRESULT
    @lpVtbl.value.get_guid.call(this, guidkey, pguidvalue)
  end
  def get_string_length(this : IMFVideoMediaType*, guidkey : Guid*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string_length.call(this, guidkey, pcchlength)
  end
  def get_string(this : IMFVideoMediaType*, guidkey : Guid*, pwszvalue : Char*, cchbufsize : UInt32, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string.call(this, guidkey, pwszvalue, cchbufsize, pcchlength)
  end
  def get_allocated_string(this : IMFVideoMediaType*, guidkey : Guid*, ppwszvalue : LibC::LPWSTR*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_string.call(this, guidkey, ppwszvalue, pcchlength)
  end
  def get_blob_size(this : IMFVideoMediaType*, guidkey : Guid*, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob_size.call(this, guidkey, pcbblobsize)
  end
  def get_blob(this : IMFVideoMediaType*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob.call(this, guidkey, pbuf, cbbufsize, pcbblobsize)
  end
  def get_allocated_blob(this : IMFVideoMediaType*, guidkey : Guid*, ppbuf : UInt8**, pcbsize : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_blob.call(this, guidkey, ppbuf, pcbsize)
  end
  def get_unknown(this : IMFVideoMediaType*, guidkey : Guid*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_unknown.call(this, guidkey, riid, ppv)
  end
  def set_item(this : IMFVideoMediaType*, guidkey : Guid*, value : PROPVARIANT*) : HRESULT
    @lpVtbl.value.set_item.call(this, guidkey, value)
  end
  def delete_item(this : IMFVideoMediaType*, guidkey : Guid*) : HRESULT
    @lpVtbl.value.delete_item.call(this, guidkey)
  end
  def delete_all_items(this : IMFVideoMediaType*) : HRESULT
    @lpVtbl.value.delete_all_items.call(this)
  end
  def set_uint32(this : IMFVideoMediaType*, guidkey : Guid*, unvalue : UInt32) : HRESULT
    @lpVtbl.value.set_uint32.call(this, guidkey, unvalue)
  end
  def set_uint64(this : IMFVideoMediaType*, guidkey : Guid*, unvalue : UInt64) : HRESULT
    @lpVtbl.value.set_uint64.call(this, guidkey, unvalue)
  end
  def set_double(this : IMFVideoMediaType*, guidkey : Guid*, fvalue : Float64) : HRESULT
    @lpVtbl.value.set_double.call(this, guidkey, fvalue)
  end
  def set_guid(this : IMFVideoMediaType*, guidkey : Guid*, guidvalue : Guid*) : HRESULT
    @lpVtbl.value.set_guid.call(this, guidkey, guidvalue)
  end
  def set_string(this : IMFVideoMediaType*, guidkey : Guid*, wszvalue : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_string.call(this, guidkey, wszvalue)
  end
  def set_blob(this : IMFVideoMediaType*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32) : HRESULT
    @lpVtbl.value.set_blob.call(this, guidkey, pbuf, cbbufsize)
  end
  def set_unknown(this : IMFVideoMediaType*, guidkey : Guid*, punknown : IUnknown) : HRESULT
    @lpVtbl.value.set_unknown.call(this, guidkey, punknown)
  end
  def lock_store(this : IMFVideoMediaType*) : HRESULT
    @lpVtbl.value.lock_store.call(this)
  end
  def unlock_store(this : IMFVideoMediaType*) : HRESULT
    @lpVtbl.value.unlock_store.call(this)
  end
  def get_count(this : IMFVideoMediaType*, pcitems : UInt32*) : HRESULT
    @lpVtbl.value.get_count.call(this, pcitems)
  end
  def get_item_by_index(this : IMFVideoMediaType*, unindex : UInt32, pguidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item_by_index.call(this, unindex, pguidkey, pvalue)
  end
  def copy_all_items(this : IMFVideoMediaType*, pdest : IMFAttributes) : HRESULT
    @lpVtbl.value.copy_all_items.call(this, pdest)
  end
  def get_major_type(this : IMFVideoMediaType*, pguidmajortype : Guid*) : HRESULT
    @lpVtbl.value.get_major_type.call(this, pguidmajortype)
  end
  def is_compressed_format(this : IMFVideoMediaType*, pfcompressed : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_compressed_format.call(this, pfcompressed)
  end
  def is_equal(this : IMFVideoMediaType*, pimediatype : IMFMediaType, pdwflags : UInt32*) : HRESULT
    @lpVtbl.value.is_equal.call(this, pimediatype, pdwflags)
  end
  def get_representation(this : IMFVideoMediaType*, guidrepresentation : Guid, ppvrepresentation : Void**) : HRESULT
    @lpVtbl.value.get_representation.call(this, guidrepresentation, ppvrepresentation)
  end
  def free_representation(this : IMFVideoMediaType*, guidrepresentation : Guid, pvrepresentation : Void*) : HRESULT
    @lpVtbl.value.free_representation.call(this, guidrepresentation, pvrepresentation)
  end
  def get_video_format(this : IMFVideoMediaType*) : MFVIDEOFORMAT*
    @lpVtbl.value.get_video_format.call(this)
  end
  def get_video_representation(this : IMFVideoMediaType*, guidrepresentation : Guid, ppvrepresentation : Void**, lstride : Int32) : HRESULT
    @lpVtbl.value.get_video_representation.call(this, guidrepresentation, ppvrepresentation, lstride)
  end
end
struct LibWin32::IMFAsyncResult
  def query_interface(this : IMFAsyncResult*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFAsyncResult*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFAsyncResult*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_state(this : IMFAsyncResult*, ppunkstate : IUnknown*) : HRESULT
    @lpVtbl.value.get_state.call(this, ppunkstate)
  end
  def get_status(this : IMFAsyncResult*) : HRESULT
    @lpVtbl.value.get_status.call(this)
  end
  def set_status(this : IMFAsyncResult*, hrstatus : HRESULT) : HRESULT
    @lpVtbl.value.set_status.call(this, hrstatus)
  end
  def get_object(this : IMFAsyncResult*, ppobject : IUnknown*) : HRESULT
    @lpVtbl.value.get_object.call(this, ppobject)
  end
  def get_state_no_add_ref(this : IMFAsyncResult*) : IUnknown
    @lpVtbl.value.get_state_no_add_ref.call(this)
  end
end
struct LibWin32::IMFAsyncCallback
  def query_interface(this : IMFAsyncCallback*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFAsyncCallback*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFAsyncCallback*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_parameters(this : IMFAsyncCallback*, pdwflags : UInt32*, pdwqueue : UInt32*) : HRESULT
    @lpVtbl.value.get_parameters.call(this, pdwflags, pdwqueue)
  end
  def invoke(this : IMFAsyncCallback*, pasyncresult : IMFAsyncResult) : HRESULT
    @lpVtbl.value.invoke.call(this, pasyncresult)
  end
end
struct LibWin32::IMFAsyncCallbackLogging
  def query_interface(this : IMFAsyncCallbackLogging*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFAsyncCallbackLogging*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFAsyncCallbackLogging*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_parameters(this : IMFAsyncCallbackLogging*, pdwflags : UInt32*, pdwqueue : UInt32*) : HRESULT
    @lpVtbl.value.get_parameters.call(this, pdwflags, pdwqueue)
  end
  def invoke(this : IMFAsyncCallbackLogging*, pasyncresult : IMFAsyncResult) : HRESULT
    @lpVtbl.value.invoke.call(this, pasyncresult)
  end
  def get_object_pointer(this : IMFAsyncCallbackLogging*) : Void*
    @lpVtbl.value.get_object_pointer.call(this)
  end
  def get_object_tag(this : IMFAsyncCallbackLogging*) : UInt32
    @lpVtbl.value.get_object_tag.call(this)
  end
end
struct LibWin32::IMFMediaEvent
  def query_interface(this : IMFMediaEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_item(this : IMFMediaEvent*, guidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item.call(this, guidkey, pvalue)
  end
  def get_item_type(this : IMFMediaEvent*, guidkey : Guid*, ptype : MF_ATTRIBUTE_TYPE*) : HRESULT
    @lpVtbl.value.get_item_type.call(this, guidkey, ptype)
  end
  def compare_item(this : IMFMediaEvent*, guidkey : Guid*, value : PROPVARIANT*, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare_item.call(this, guidkey, value, pbresult)
  end
  def compare(this : IMFMediaEvent*, ptheirs : IMFAttributes, matchtype : MF_ATTRIBUTES_MATCH_TYPE, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare.call(this, ptheirs, matchtype, pbresult)
  end
  def get_uint32(this : IMFMediaEvent*, guidkey : Guid*, punvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_uint32.call(this, guidkey, punvalue)
  end
  def get_uint64(this : IMFMediaEvent*, guidkey : Guid*, punvalue : UInt64*) : HRESULT
    @lpVtbl.value.get_uint64.call(this, guidkey, punvalue)
  end
  def get_double(this : IMFMediaEvent*, guidkey : Guid*, pfvalue : Float64*) : HRESULT
    @lpVtbl.value.get_double.call(this, guidkey, pfvalue)
  end
  def get_guid(this : IMFMediaEvent*, guidkey : Guid*, pguidvalue : Guid*) : HRESULT
    @lpVtbl.value.get_guid.call(this, guidkey, pguidvalue)
  end
  def get_string_length(this : IMFMediaEvent*, guidkey : Guid*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string_length.call(this, guidkey, pcchlength)
  end
  def get_string(this : IMFMediaEvent*, guidkey : Guid*, pwszvalue : Char*, cchbufsize : UInt32, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string.call(this, guidkey, pwszvalue, cchbufsize, pcchlength)
  end
  def get_allocated_string(this : IMFMediaEvent*, guidkey : Guid*, ppwszvalue : LibC::LPWSTR*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_string.call(this, guidkey, ppwszvalue, pcchlength)
  end
  def get_blob_size(this : IMFMediaEvent*, guidkey : Guid*, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob_size.call(this, guidkey, pcbblobsize)
  end
  def get_blob(this : IMFMediaEvent*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob.call(this, guidkey, pbuf, cbbufsize, pcbblobsize)
  end
  def get_allocated_blob(this : IMFMediaEvent*, guidkey : Guid*, ppbuf : UInt8**, pcbsize : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_blob.call(this, guidkey, ppbuf, pcbsize)
  end
  def get_unknown(this : IMFMediaEvent*, guidkey : Guid*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_unknown.call(this, guidkey, riid, ppv)
  end
  def set_item(this : IMFMediaEvent*, guidkey : Guid*, value : PROPVARIANT*) : HRESULT
    @lpVtbl.value.set_item.call(this, guidkey, value)
  end
  def delete_item(this : IMFMediaEvent*, guidkey : Guid*) : HRESULT
    @lpVtbl.value.delete_item.call(this, guidkey)
  end
  def delete_all_items(this : IMFMediaEvent*) : HRESULT
    @lpVtbl.value.delete_all_items.call(this)
  end
  def set_uint32(this : IMFMediaEvent*, guidkey : Guid*, unvalue : UInt32) : HRESULT
    @lpVtbl.value.set_uint32.call(this, guidkey, unvalue)
  end
  def set_uint64(this : IMFMediaEvent*, guidkey : Guid*, unvalue : UInt64) : HRESULT
    @lpVtbl.value.set_uint64.call(this, guidkey, unvalue)
  end
  def set_double(this : IMFMediaEvent*, guidkey : Guid*, fvalue : Float64) : HRESULT
    @lpVtbl.value.set_double.call(this, guidkey, fvalue)
  end
  def set_guid(this : IMFMediaEvent*, guidkey : Guid*, guidvalue : Guid*) : HRESULT
    @lpVtbl.value.set_guid.call(this, guidkey, guidvalue)
  end
  def set_string(this : IMFMediaEvent*, guidkey : Guid*, wszvalue : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_string.call(this, guidkey, wszvalue)
  end
  def set_blob(this : IMFMediaEvent*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32) : HRESULT
    @lpVtbl.value.set_blob.call(this, guidkey, pbuf, cbbufsize)
  end
  def set_unknown(this : IMFMediaEvent*, guidkey : Guid*, punknown : IUnknown) : HRESULT
    @lpVtbl.value.set_unknown.call(this, guidkey, punknown)
  end
  def lock_store(this : IMFMediaEvent*) : HRESULT
    @lpVtbl.value.lock_store.call(this)
  end
  def unlock_store(this : IMFMediaEvent*) : HRESULT
    @lpVtbl.value.unlock_store.call(this)
  end
  def get_count(this : IMFMediaEvent*, pcitems : UInt32*) : HRESULT
    @lpVtbl.value.get_count.call(this, pcitems)
  end
  def get_item_by_index(this : IMFMediaEvent*, unindex : UInt32, pguidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item_by_index.call(this, unindex, pguidkey, pvalue)
  end
  def copy_all_items(this : IMFMediaEvent*, pdest : IMFAttributes) : HRESULT
    @lpVtbl.value.copy_all_items.call(this, pdest)
  end
  def get_type(this : IMFMediaEvent*, pmet : UInt32*) : HRESULT
    @lpVtbl.value.get_type.call(this, pmet)
  end
  def get_extended_type(this : IMFMediaEvent*, pguidextendedtype : Guid*) : HRESULT
    @lpVtbl.value.get_extended_type.call(this, pguidextendedtype)
  end
  def get_status(this : IMFMediaEvent*, phrstatus : HRESULT*) : HRESULT
    @lpVtbl.value.get_status.call(this, phrstatus)
  end
  def get_value(this : IMFMediaEvent*, pvvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_value.call(this, pvvalue)
  end
end
struct LibWin32::IMFMediaEventGenerator
  def query_interface(this : IMFMediaEventGenerator*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaEventGenerator*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaEventGenerator*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_event(this : IMFMediaEventGenerator*, dwflags : MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, ppevent : IMFMediaEvent*) : HRESULT
    @lpVtbl.value.get_event.call(this, dwflags, ppevent)
  end
  def begin_get_event(this : IMFMediaEventGenerator*, pcallback : IMFAsyncCallback, punkstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_get_event.call(this, pcallback, punkstate)
  end
  def end_get_event(this : IMFMediaEventGenerator*, presult : IMFAsyncResult, ppevent : IMFMediaEvent*) : HRESULT
    @lpVtbl.value.end_get_event.call(this, presult, ppevent)
  end
  def queue_event(this : IMFMediaEventGenerator*, met : UInt32, guidextendedtype : Guid*, hrstatus : HRESULT, pvvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.queue_event.call(this, met, guidextendedtype, hrstatus, pvvalue)
  end
end
struct LibWin32::IMFRemoteAsyncCallback
  def query_interface(this : IMFRemoteAsyncCallback*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFRemoteAsyncCallback*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFRemoteAsyncCallback*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def invoke(this : IMFRemoteAsyncCallback*, hr : HRESULT, premoteresult : IUnknown) : HRESULT
    @lpVtbl.value.invoke.call(this, hr, premoteresult)
  end
end
struct LibWin32::IMFByteStream
  def query_interface(this : IMFByteStream*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFByteStream*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFByteStream*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_capabilities(this : IMFByteStream*, pdwcapabilities : UInt32*) : HRESULT
    @lpVtbl.value.get_capabilities.call(this, pdwcapabilities)
  end
  def get_length(this : IMFByteStream*, pqwlength : UInt64*) : HRESULT
    @lpVtbl.value.get_length.call(this, pqwlength)
  end
  def set_length(this : IMFByteStream*, qwlength : UInt64) : HRESULT
    @lpVtbl.value.set_length.call(this, qwlength)
  end
  def get_current_position(this : IMFByteStream*, pqwposition : UInt64*) : HRESULT
    @lpVtbl.value.get_current_position.call(this, pqwposition)
  end
  def set_current_position(this : IMFByteStream*, qwposition : UInt64) : HRESULT
    @lpVtbl.value.set_current_position.call(this, qwposition)
  end
  def is_end_of_stream(this : IMFByteStream*, pfendofstream : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_end_of_stream.call(this, pfendofstream)
  end
  def read(this : IMFByteStream*, pb : UInt8*, cb : UInt32, pcbread : UInt32*) : HRESULT
    @lpVtbl.value.read.call(this, pb, cb, pcbread)
  end
  def begin_read(this : IMFByteStream*, pb : UInt8*, cb : UInt32, pcallback : IMFAsyncCallback, punkstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_read.call(this, pb, cb, pcallback, punkstate)
  end
  def end_read(this : IMFByteStream*, presult : IMFAsyncResult, pcbread : UInt32*) : HRESULT
    @lpVtbl.value.end_read.call(this, presult, pcbread)
  end
  def write(this : IMFByteStream*, pb : UInt8*, cb : UInt32, pcbwritten : UInt32*) : HRESULT
    @lpVtbl.value.write.call(this, pb, cb, pcbwritten)
  end
  def begin_write(this : IMFByteStream*, pb : UInt8*, cb : UInt32, pcallback : IMFAsyncCallback, punkstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_write.call(this, pb, cb, pcallback, punkstate)
  end
  def end_write(this : IMFByteStream*, presult : IMFAsyncResult, pcbwritten : UInt32*) : HRESULT
    @lpVtbl.value.end_write.call(this, presult, pcbwritten)
  end
  def seek(this : IMFByteStream*, seekorigin : MFBYTESTREAM_SEEK_ORIGIN, llseekoffset : Int64, dwseekflags : UInt32, pqwcurrentposition : UInt64*) : HRESULT
    @lpVtbl.value.seek.call(this, seekorigin, llseekoffset, dwseekflags, pqwcurrentposition)
  end
  def flush(this : IMFByteStream*) : HRESULT
    @lpVtbl.value.flush.call(this)
  end
  def close(this : IMFByteStream*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
end
struct LibWin32::IMFByteStreamProxyClassFactory
  def query_interface(this : IMFByteStreamProxyClassFactory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFByteStreamProxyClassFactory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFByteStreamProxyClassFactory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_byte_stream_proxy(this : IMFByteStreamProxyClassFactory*, pbytestream : IMFByteStream, pattributes : IMFAttributes, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.create_byte_stream_proxy.call(this, pbytestream, pattributes, riid, ppvobject)
  end
end
struct LibWin32::IMFSampleOutputStream
  def query_interface(this : IMFSampleOutputStream*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSampleOutputStream*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSampleOutputStream*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def begin_write_sample(this : IMFSampleOutputStream*, psample : IMFSample, pcallback : IMFAsyncCallback, punkstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_write_sample.call(this, psample, pcallback, punkstate)
  end
  def end_write_sample(this : IMFSampleOutputStream*, presult : IMFAsyncResult) : HRESULT
    @lpVtbl.value.end_write_sample.call(this, presult)
  end
  def close(this : IMFSampleOutputStream*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
end
struct LibWin32::IMFCollection
  def query_interface(this : IMFCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_element_count(this : IMFCollection*, pcelements : UInt32*) : HRESULT
    @lpVtbl.value.get_element_count.call(this, pcelements)
  end
  def get_element(this : IMFCollection*, dwelementindex : UInt32, ppunkelement : IUnknown*) : HRESULT
    @lpVtbl.value.get_element.call(this, dwelementindex, ppunkelement)
  end
  def add_element(this : IMFCollection*, punkelement : IUnknown) : HRESULT
    @lpVtbl.value.add_element.call(this, punkelement)
  end
  def remove_element(this : IMFCollection*, dwelementindex : UInt32, ppunkelement : IUnknown*) : HRESULT
    @lpVtbl.value.remove_element.call(this, dwelementindex, ppunkelement)
  end
  def insert_element_at(this : IMFCollection*, dwindex : UInt32, punknown : IUnknown) : HRESULT
    @lpVtbl.value.insert_element_at.call(this, dwindex, punknown)
  end
  def remove_all_elements(this : IMFCollection*) : HRESULT
    @lpVtbl.value.remove_all_elements.call(this)
  end
end
struct LibWin32::IMFMediaEventQueue
  def query_interface(this : IMFMediaEventQueue*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaEventQueue*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaEventQueue*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_event(this : IMFMediaEventQueue*, dwflags : UInt32, ppevent : IMFMediaEvent*) : HRESULT
    @lpVtbl.value.get_event.call(this, dwflags, ppevent)
  end
  def begin_get_event(this : IMFMediaEventQueue*, pcallback : IMFAsyncCallback, punkstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_get_event.call(this, pcallback, punkstate)
  end
  def end_get_event(this : IMFMediaEventQueue*, presult : IMFAsyncResult, ppevent : IMFMediaEvent*) : HRESULT
    @lpVtbl.value.end_get_event.call(this, presult, ppevent)
  end
  def queue_event(this : IMFMediaEventQueue*, pevent : IMFMediaEvent) : HRESULT
    @lpVtbl.value.queue_event.call(this, pevent)
  end
  def queue_event_param_var(this : IMFMediaEventQueue*, met : UInt32, guidextendedtype : Guid*, hrstatus : HRESULT, pvvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.queue_event_param_var.call(this, met, guidextendedtype, hrstatus, pvvalue)
  end
  def queue_event_param_unk(this : IMFMediaEventQueue*, met : UInt32, guidextendedtype : Guid*, hrstatus : HRESULT, punk : IUnknown) : HRESULT
    @lpVtbl.value.queue_event_param_unk.call(this, met, guidextendedtype, hrstatus, punk)
  end
  def shutdown(this : IMFMediaEventQueue*) : HRESULT
    @lpVtbl.value.shutdown.call(this)
  end
end
struct LibWin32::IMFActivate
  def query_interface(this : IMFActivate*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFActivate*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFActivate*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_item(this : IMFActivate*, guidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item.call(this, guidkey, pvalue)
  end
  def get_item_type(this : IMFActivate*, guidkey : Guid*, ptype : MF_ATTRIBUTE_TYPE*) : HRESULT
    @lpVtbl.value.get_item_type.call(this, guidkey, ptype)
  end
  def compare_item(this : IMFActivate*, guidkey : Guid*, value : PROPVARIANT*, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare_item.call(this, guidkey, value, pbresult)
  end
  def compare(this : IMFActivate*, ptheirs : IMFAttributes, matchtype : MF_ATTRIBUTES_MATCH_TYPE, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare.call(this, ptheirs, matchtype, pbresult)
  end
  def get_uint32(this : IMFActivate*, guidkey : Guid*, punvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_uint32.call(this, guidkey, punvalue)
  end
  def get_uint64(this : IMFActivate*, guidkey : Guid*, punvalue : UInt64*) : HRESULT
    @lpVtbl.value.get_uint64.call(this, guidkey, punvalue)
  end
  def get_double(this : IMFActivate*, guidkey : Guid*, pfvalue : Float64*) : HRESULT
    @lpVtbl.value.get_double.call(this, guidkey, pfvalue)
  end
  def get_guid(this : IMFActivate*, guidkey : Guid*, pguidvalue : Guid*) : HRESULT
    @lpVtbl.value.get_guid.call(this, guidkey, pguidvalue)
  end
  def get_string_length(this : IMFActivate*, guidkey : Guid*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string_length.call(this, guidkey, pcchlength)
  end
  def get_string(this : IMFActivate*, guidkey : Guid*, pwszvalue : Char*, cchbufsize : UInt32, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string.call(this, guidkey, pwszvalue, cchbufsize, pcchlength)
  end
  def get_allocated_string(this : IMFActivate*, guidkey : Guid*, ppwszvalue : LibC::LPWSTR*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_string.call(this, guidkey, ppwszvalue, pcchlength)
  end
  def get_blob_size(this : IMFActivate*, guidkey : Guid*, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob_size.call(this, guidkey, pcbblobsize)
  end
  def get_blob(this : IMFActivate*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob.call(this, guidkey, pbuf, cbbufsize, pcbblobsize)
  end
  def get_allocated_blob(this : IMFActivate*, guidkey : Guid*, ppbuf : UInt8**, pcbsize : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_blob.call(this, guidkey, ppbuf, pcbsize)
  end
  def get_unknown(this : IMFActivate*, guidkey : Guid*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_unknown.call(this, guidkey, riid, ppv)
  end
  def set_item(this : IMFActivate*, guidkey : Guid*, value : PROPVARIANT*) : HRESULT
    @lpVtbl.value.set_item.call(this, guidkey, value)
  end
  def delete_item(this : IMFActivate*, guidkey : Guid*) : HRESULT
    @lpVtbl.value.delete_item.call(this, guidkey)
  end
  def delete_all_items(this : IMFActivate*) : HRESULT
    @lpVtbl.value.delete_all_items.call(this)
  end
  def set_uint32(this : IMFActivate*, guidkey : Guid*, unvalue : UInt32) : HRESULT
    @lpVtbl.value.set_uint32.call(this, guidkey, unvalue)
  end
  def set_uint64(this : IMFActivate*, guidkey : Guid*, unvalue : UInt64) : HRESULT
    @lpVtbl.value.set_uint64.call(this, guidkey, unvalue)
  end
  def set_double(this : IMFActivate*, guidkey : Guid*, fvalue : Float64) : HRESULT
    @lpVtbl.value.set_double.call(this, guidkey, fvalue)
  end
  def set_guid(this : IMFActivate*, guidkey : Guid*, guidvalue : Guid*) : HRESULT
    @lpVtbl.value.set_guid.call(this, guidkey, guidvalue)
  end
  def set_string(this : IMFActivate*, guidkey : Guid*, wszvalue : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_string.call(this, guidkey, wszvalue)
  end
  def set_blob(this : IMFActivate*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32) : HRESULT
    @lpVtbl.value.set_blob.call(this, guidkey, pbuf, cbbufsize)
  end
  def set_unknown(this : IMFActivate*, guidkey : Guid*, punknown : IUnknown) : HRESULT
    @lpVtbl.value.set_unknown.call(this, guidkey, punknown)
  end
  def lock_store(this : IMFActivate*) : HRESULT
    @lpVtbl.value.lock_store.call(this)
  end
  def unlock_store(this : IMFActivate*) : HRESULT
    @lpVtbl.value.unlock_store.call(this)
  end
  def get_count(this : IMFActivate*, pcitems : UInt32*) : HRESULT
    @lpVtbl.value.get_count.call(this, pcitems)
  end
  def get_item_by_index(this : IMFActivate*, unindex : UInt32, pguidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item_by_index.call(this, unindex, pguidkey, pvalue)
  end
  def copy_all_items(this : IMFActivate*, pdest : IMFAttributes) : HRESULT
    @lpVtbl.value.copy_all_items.call(this, pdest)
  end
  def activate_object(this : IMFActivate*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.activate_object.call(this, riid, ppv)
  end
  def shutdown_object(this : IMFActivate*) : HRESULT
    @lpVtbl.value.shutdown_object.call(this)
  end
  def detach_object(this : IMFActivate*) : HRESULT
    @lpVtbl.value.detach_object.call(this)
  end
end
struct LibWin32::IMFPluginControl
  def query_interface(this : IMFPluginControl*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFPluginControl*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFPluginControl*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_preferred_clsid(this : IMFPluginControl*, plugintype : UInt32, selector : LibC::LPWSTR, clsid : Guid*) : HRESULT
    @lpVtbl.value.get_preferred_clsid.call(this, plugintype, selector, clsid)
  end
  def get_preferred_clsid_by_index(this : IMFPluginControl*, plugintype : UInt32, index : UInt32, selector : LibC::LPWSTR*, clsid : Guid*) : HRESULT
    @lpVtbl.value.get_preferred_clsid_by_index.call(this, plugintype, index, selector, clsid)
  end
  def set_preferred_clsid(this : IMFPluginControl*, plugintype : UInt32, selector : LibC::LPWSTR, clsid : Guid*) : HRESULT
    @lpVtbl.value.set_preferred_clsid.call(this, plugintype, selector, clsid)
  end
  def is_disabled(this : IMFPluginControl*, plugintype : UInt32, clsid : Guid*) : HRESULT
    @lpVtbl.value.is_disabled.call(this, plugintype, clsid)
  end
  def get_disabled_by_index(this : IMFPluginControl*, plugintype : UInt32, index : UInt32, clsid : Guid*) : HRESULT
    @lpVtbl.value.get_disabled_by_index.call(this, plugintype, index, clsid)
  end
  def set_disabled(this : IMFPluginControl*, plugintype : UInt32, clsid : Guid*, disabled : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_disabled.call(this, plugintype, clsid, disabled)
  end
end
struct LibWin32::IMFPluginControl2
  def query_interface(this : IMFPluginControl2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFPluginControl2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFPluginControl2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_preferred_clsid(this : IMFPluginControl2*, plugintype : UInt32, selector : LibC::LPWSTR, clsid : Guid*) : HRESULT
    @lpVtbl.value.get_preferred_clsid.call(this, plugintype, selector, clsid)
  end
  def get_preferred_clsid_by_index(this : IMFPluginControl2*, plugintype : UInt32, index : UInt32, selector : LibC::LPWSTR*, clsid : Guid*) : HRESULT
    @lpVtbl.value.get_preferred_clsid_by_index.call(this, plugintype, index, selector, clsid)
  end
  def set_preferred_clsid(this : IMFPluginControl2*, plugintype : UInt32, selector : LibC::LPWSTR, clsid : Guid*) : HRESULT
    @lpVtbl.value.set_preferred_clsid.call(this, plugintype, selector, clsid)
  end
  def is_disabled(this : IMFPluginControl2*, plugintype : UInt32, clsid : Guid*) : HRESULT
    @lpVtbl.value.is_disabled.call(this, plugintype, clsid)
  end
  def get_disabled_by_index(this : IMFPluginControl2*, plugintype : UInt32, index : UInt32, clsid : Guid*) : HRESULT
    @lpVtbl.value.get_disabled_by_index.call(this, plugintype, index, clsid)
  end
  def set_disabled(this : IMFPluginControl2*, plugintype : UInt32, clsid : Guid*, disabled : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_disabled.call(this, plugintype, clsid, disabled)
  end
  def set_policy(this : IMFPluginControl2*, policy : MF_PLUGIN_CONTROL_POLICY) : HRESULT
    @lpVtbl.value.set_policy.call(this, policy)
  end
end
struct LibWin32::IMFDXGIDeviceManager
  def query_interface(this : IMFDXGIDeviceManager*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFDXGIDeviceManager*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFDXGIDeviceManager*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def close_device_handle(this : IMFDXGIDeviceManager*, hdevice : LibC::HANDLE) : HRESULT
    @lpVtbl.value.close_device_handle.call(this, hdevice)
  end
  def get_video_service(this : IMFDXGIDeviceManager*, hdevice : LibC::HANDLE, riid : Guid*, ppservice : Void**) : HRESULT
    @lpVtbl.value.get_video_service.call(this, hdevice, riid, ppservice)
  end
  def lock_device(this : IMFDXGIDeviceManager*, hdevice : LibC::HANDLE, riid : Guid*, ppunkdevice : Void**, fblock : LibC::BOOL) : HRESULT
    @lpVtbl.value.lock_device.call(this, hdevice, riid, ppunkdevice, fblock)
  end
  def open_device_handle(this : IMFDXGIDeviceManager*, phdevice : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.open_device_handle.call(this, phdevice)
  end
  def reset_device(this : IMFDXGIDeviceManager*, punkdevice : IUnknown, resettoken : UInt32) : HRESULT
    @lpVtbl.value.reset_device.call(this, punkdevice, resettoken)
  end
  def test_device(this : IMFDXGIDeviceManager*, hdevice : LibC::HANDLE) : HRESULT
    @lpVtbl.value.test_device.call(this, hdevice)
  end
  def unlock_device(this : IMFDXGIDeviceManager*, hdevice : LibC::HANDLE, fsavestate : LibC::BOOL) : HRESULT
    @lpVtbl.value.unlock_device.call(this, hdevice, fsavestate)
  end
end
struct LibWin32::IMFMuxStreamAttributesManager
  def query_interface(this : IMFMuxStreamAttributesManager*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMuxStreamAttributesManager*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMuxStreamAttributesManager*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_stream_count(this : IMFMuxStreamAttributesManager*, pdwmuxstreamcount : UInt32*) : HRESULT
    @lpVtbl.value.get_stream_count.call(this, pdwmuxstreamcount)
  end
  def get_attributes(this : IMFMuxStreamAttributesManager*, dwmuxstreamindex : UInt32, ppstreamattributes : IMFAttributes*) : HRESULT
    @lpVtbl.value.get_attributes.call(this, dwmuxstreamindex, ppstreamattributes)
  end
end
struct LibWin32::IMFMuxStreamMediaTypeManager
  def query_interface(this : IMFMuxStreamMediaTypeManager*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMuxStreamMediaTypeManager*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMuxStreamMediaTypeManager*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_stream_count(this : IMFMuxStreamMediaTypeManager*, pdwmuxstreamcount : UInt32*) : HRESULT
    @lpVtbl.value.get_stream_count.call(this, pdwmuxstreamcount)
  end
  def get_media_type(this : IMFMuxStreamMediaTypeManager*, dwmuxstreamindex : UInt32, ppmediatype : IMFMediaType*) : HRESULT
    @lpVtbl.value.get_media_type.call(this, dwmuxstreamindex, ppmediatype)
  end
  def get_stream_configuration_count(this : IMFMuxStreamMediaTypeManager*, pdwcount : UInt32*) : HRESULT
    @lpVtbl.value.get_stream_configuration_count.call(this, pdwcount)
  end
  def add_stream_configuration(this : IMFMuxStreamMediaTypeManager*, ullstreammask : UInt64) : HRESULT
    @lpVtbl.value.add_stream_configuration.call(this, ullstreammask)
  end
  def remove_stream_configuration(this : IMFMuxStreamMediaTypeManager*, ullstreammask : UInt64) : HRESULT
    @lpVtbl.value.remove_stream_configuration.call(this, ullstreammask)
  end
  def get_stream_configuration(this : IMFMuxStreamMediaTypeManager*, ulindex : UInt32, pullstreammask : UInt64*) : HRESULT
    @lpVtbl.value.get_stream_configuration.call(this, ulindex, pullstreammask)
  end
end
struct LibWin32::IMFMuxStreamSampleManager
  def query_interface(this : IMFMuxStreamSampleManager*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMuxStreamSampleManager*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMuxStreamSampleManager*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_stream_count(this : IMFMuxStreamSampleManager*, pdwmuxstreamcount : UInt32*) : HRESULT
    @lpVtbl.value.get_stream_count.call(this, pdwmuxstreamcount)
  end
  def get_sample(this : IMFMuxStreamSampleManager*, dwmuxstreamindex : UInt32, ppsample : IMFSample*) : HRESULT
    @lpVtbl.value.get_sample.call(this, dwmuxstreamindex, ppsample)
  end
  def get_stream_configuration(this : IMFMuxStreamSampleManager*) : UInt64
    @lpVtbl.value.get_stream_configuration.call(this)
  end
end
struct LibWin32::IMFSecureBuffer
  def query_interface(this : IMFSecureBuffer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSecureBuffer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSecureBuffer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_identifier(this : IMFSecureBuffer*, pguididentifier : Guid*) : HRESULT
    @lpVtbl.value.get_identifier.call(this, pguididentifier)
  end
end
struct LibWin32::IMFTransform
  def query_interface(this : IMFTransform*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFTransform*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFTransform*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_stream_limits(this : IMFTransform*, pdwinputminimum : UInt32*, pdwinputmaximum : UInt32*, pdwoutputminimum : UInt32*, pdwoutputmaximum : UInt32*) : HRESULT
    @lpVtbl.value.get_stream_limits.call(this, pdwinputminimum, pdwinputmaximum, pdwoutputminimum, pdwoutputmaximum)
  end
  def get_stream_count(this : IMFTransform*, pcinputstreams : UInt32*, pcoutputstreams : UInt32*) : HRESULT
    @lpVtbl.value.get_stream_count.call(this, pcinputstreams, pcoutputstreams)
  end
  def get_stream_i_ds(this : IMFTransform*, dwinputidarraysize : UInt32, pdwinputids : UInt32*, dwoutputidarraysize : UInt32, pdwoutputids : UInt32*) : HRESULT
    @lpVtbl.value.get_stream_i_ds.call(this, dwinputidarraysize, pdwinputids, dwoutputidarraysize, pdwoutputids)
  end
  def get_input_stream_info(this : IMFTransform*, dwinputstreamid : UInt32, pstreaminfo : MFT_INPUT_STREAM_INFO*) : HRESULT
    @lpVtbl.value.get_input_stream_info.call(this, dwinputstreamid, pstreaminfo)
  end
  def get_output_stream_info(this : IMFTransform*, dwoutputstreamid : UInt32, pstreaminfo : MFT_OUTPUT_STREAM_INFO*) : HRESULT
    @lpVtbl.value.get_output_stream_info.call(this, dwoutputstreamid, pstreaminfo)
  end
  def get_attributes(this : IMFTransform*, pattributes : IMFAttributes*) : HRESULT
    @lpVtbl.value.get_attributes.call(this, pattributes)
  end
  def get_input_stream_attributes(this : IMFTransform*, dwinputstreamid : UInt32, pattributes : IMFAttributes*) : HRESULT
    @lpVtbl.value.get_input_stream_attributes.call(this, dwinputstreamid, pattributes)
  end
  def get_output_stream_attributes(this : IMFTransform*, dwoutputstreamid : UInt32, pattributes : IMFAttributes*) : HRESULT
    @lpVtbl.value.get_output_stream_attributes.call(this, dwoutputstreamid, pattributes)
  end
  def delete_input_stream(this : IMFTransform*, dwstreamid : UInt32) : HRESULT
    @lpVtbl.value.delete_input_stream.call(this, dwstreamid)
  end
  def add_input_streams(this : IMFTransform*, cstreams : UInt32, adwstreamids : UInt32*) : HRESULT
    @lpVtbl.value.add_input_streams.call(this, cstreams, adwstreamids)
  end
  def get_input_available_type(this : IMFTransform*, dwinputstreamid : UInt32, dwtypeindex : UInt32, pptype : IMFMediaType*) : HRESULT
    @lpVtbl.value.get_input_available_type.call(this, dwinputstreamid, dwtypeindex, pptype)
  end
  def get_output_available_type(this : IMFTransform*, dwoutputstreamid : UInt32, dwtypeindex : UInt32, pptype : IMFMediaType*) : HRESULT
    @lpVtbl.value.get_output_available_type.call(this, dwoutputstreamid, dwtypeindex, pptype)
  end
  def set_input_type(this : IMFTransform*, dwinputstreamid : UInt32, ptype : IMFMediaType, dwflags : UInt32) : HRESULT
    @lpVtbl.value.set_input_type.call(this, dwinputstreamid, ptype, dwflags)
  end
  def set_output_type(this : IMFTransform*, dwoutputstreamid : UInt32, ptype : IMFMediaType, dwflags : UInt32) : HRESULT
    @lpVtbl.value.set_output_type.call(this, dwoutputstreamid, ptype, dwflags)
  end
  def get_input_current_type(this : IMFTransform*, dwinputstreamid : UInt32, pptype : IMFMediaType*) : HRESULT
    @lpVtbl.value.get_input_current_type.call(this, dwinputstreamid, pptype)
  end
  def get_output_current_type(this : IMFTransform*, dwoutputstreamid : UInt32, pptype : IMFMediaType*) : HRESULT
    @lpVtbl.value.get_output_current_type.call(this, dwoutputstreamid, pptype)
  end
  def get_input_status(this : IMFTransform*, dwinputstreamid : UInt32, pdwflags : UInt32*) : HRESULT
    @lpVtbl.value.get_input_status.call(this, dwinputstreamid, pdwflags)
  end
  def get_output_status(this : IMFTransform*, pdwflags : UInt32*) : HRESULT
    @lpVtbl.value.get_output_status.call(this, pdwflags)
  end
  def set_output_bounds(this : IMFTransform*, hnslowerbound : Int64, hnsupperbound : Int64) : HRESULT
    @lpVtbl.value.set_output_bounds.call(this, hnslowerbound, hnsupperbound)
  end
  def process_event(this : IMFTransform*, dwinputstreamid : UInt32, pevent : IMFMediaEvent) : HRESULT
    @lpVtbl.value.process_event.call(this, dwinputstreamid, pevent)
  end
  def process_message(this : IMFTransform*, emessage : MFT_MESSAGE_TYPE, ulparam : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.process_message.call(this, emessage, ulparam)
  end
  def process_input(this : IMFTransform*, dwinputstreamid : UInt32, psample : IMFSample, dwflags : UInt32) : HRESULT
    @lpVtbl.value.process_input.call(this, dwinputstreamid, psample, dwflags)
  end
  def process_output(this : IMFTransform*, dwflags : UInt32, coutputbuffercount : UInt32, poutputsamples : MFT_OUTPUT_DATA_BUFFER*, pdwstatus : UInt32*) : HRESULT
    @lpVtbl.value.process_output.call(this, dwflags, coutputbuffercount, poutputsamples, pdwstatus)
  end
end
struct LibWin32::IMFMediaSession
  def query_interface(this : IMFMediaSession*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaSession*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaSession*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_event(this : IMFMediaSession*, dwflags : MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, ppevent : IMFMediaEvent*) : HRESULT
    @lpVtbl.value.get_event.call(this, dwflags, ppevent)
  end
  def begin_get_event(this : IMFMediaSession*, pcallback : IMFAsyncCallback, punkstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_get_event.call(this, pcallback, punkstate)
  end
  def end_get_event(this : IMFMediaSession*, presult : IMFAsyncResult, ppevent : IMFMediaEvent*) : HRESULT
    @lpVtbl.value.end_get_event.call(this, presult, ppevent)
  end
  def queue_event(this : IMFMediaSession*, met : UInt32, guidextendedtype : Guid*, hrstatus : HRESULT, pvvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.queue_event.call(this, met, guidextendedtype, hrstatus, pvvalue)
  end
  def set_topology(this : IMFMediaSession*, dwsettopologyflags : UInt32, ptopology : IMFTopology) : HRESULT
    @lpVtbl.value.set_topology.call(this, dwsettopologyflags, ptopology)
  end
  def clear_topologies(this : IMFMediaSession*) : HRESULT
    @lpVtbl.value.clear_topologies.call(this)
  end
  def start(this : IMFMediaSession*, pguidtimeformat : Guid*, pvarstartposition : PROPVARIANT*) : HRESULT
    @lpVtbl.value.start.call(this, pguidtimeformat, pvarstartposition)
  end
  def pause(this : IMFMediaSession*) : HRESULT
    @lpVtbl.value.pause.call(this)
  end
  def stop(this : IMFMediaSession*) : HRESULT
    @lpVtbl.value.stop.call(this)
  end
  def close(this : IMFMediaSession*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def shutdown(this : IMFMediaSession*) : HRESULT
    @lpVtbl.value.shutdown.call(this)
  end
  def get_clock(this : IMFMediaSession*, ppclock : IMFClock*) : HRESULT
    @lpVtbl.value.get_clock.call(this, ppclock)
  end
  def get_session_capabilities(this : IMFMediaSession*, pdwcaps : UInt32*) : HRESULT
    @lpVtbl.value.get_session_capabilities.call(this, pdwcaps)
  end
  def get_full_topology(this : IMFMediaSession*, dwgetfulltopologyflags : UInt32, topoid : UInt64, ppfulltopology : IMFTopology*) : HRESULT
    @lpVtbl.value.get_full_topology.call(this, dwgetfulltopologyflags, topoid, ppfulltopology)
  end
end
struct LibWin32::IMFSourceResolver
  def query_interface(this : IMFSourceResolver*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSourceResolver*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSourceResolver*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_object_from_url(this : IMFSourceResolver*, pwszurl : LibC::LPWSTR, dwflags : UInt32, pprops : IPropertyStore, pobjecttype : MF_OBJECT_TYPE*, ppobject : IUnknown*) : HRESULT
    @lpVtbl.value.create_object_from_url.call(this, pwszurl, dwflags, pprops, pobjecttype, ppobject)
  end
  def create_object_from_byte_stream(this : IMFSourceResolver*, pbytestream : IMFByteStream, pwszurl : LibC::LPWSTR, dwflags : UInt32, pprops : IPropertyStore, pobjecttype : MF_OBJECT_TYPE*, ppobject : IUnknown*) : HRESULT
    @lpVtbl.value.create_object_from_byte_stream.call(this, pbytestream, pwszurl, dwflags, pprops, pobjecttype, ppobject)
  end
  def begin_create_object_from_url(this : IMFSourceResolver*, pwszurl : LibC::LPWSTR, dwflags : UInt32, pprops : IPropertyStore, ppiunknowncancelcookie : IUnknown*, pcallback : IMFAsyncCallback, punkstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_create_object_from_url.call(this, pwszurl, dwflags, pprops, ppiunknowncancelcookie, pcallback, punkstate)
  end
  def end_create_object_from_url(this : IMFSourceResolver*, presult : IMFAsyncResult, pobjecttype : MF_OBJECT_TYPE*, ppobject : IUnknown*) : HRESULT
    @lpVtbl.value.end_create_object_from_url.call(this, presult, pobjecttype, ppobject)
  end
  def begin_create_object_from_byte_stream(this : IMFSourceResolver*, pbytestream : IMFByteStream, pwszurl : LibC::LPWSTR, dwflags : UInt32, pprops : IPropertyStore, ppiunknowncancelcookie : IUnknown*, pcallback : IMFAsyncCallback, punkstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_create_object_from_byte_stream.call(this, pbytestream, pwszurl, dwflags, pprops, ppiunknowncancelcookie, pcallback, punkstate)
  end
  def end_create_object_from_byte_stream(this : IMFSourceResolver*, presult : IMFAsyncResult, pobjecttype : MF_OBJECT_TYPE*, ppobject : IUnknown*) : HRESULT
    @lpVtbl.value.end_create_object_from_byte_stream.call(this, presult, pobjecttype, ppobject)
  end
  def cancel_object_creation(this : IMFSourceResolver*, piunknowncancelcookie : IUnknown) : HRESULT
    @lpVtbl.value.cancel_object_creation.call(this, piunknowncancelcookie)
  end
end
struct LibWin32::IMFMediaSource
  def query_interface(this : IMFMediaSource*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaSource*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaSource*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_event(this : IMFMediaSource*, dwflags : MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, ppevent : IMFMediaEvent*) : HRESULT
    @lpVtbl.value.get_event.call(this, dwflags, ppevent)
  end
  def begin_get_event(this : IMFMediaSource*, pcallback : IMFAsyncCallback, punkstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_get_event.call(this, pcallback, punkstate)
  end
  def end_get_event(this : IMFMediaSource*, presult : IMFAsyncResult, ppevent : IMFMediaEvent*) : HRESULT
    @lpVtbl.value.end_get_event.call(this, presult, ppevent)
  end
  def queue_event(this : IMFMediaSource*, met : UInt32, guidextendedtype : Guid*, hrstatus : HRESULT, pvvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.queue_event.call(this, met, guidextendedtype, hrstatus, pvvalue)
  end
  def get_characteristics(this : IMFMediaSource*, pdwcharacteristics : UInt32*) : HRESULT
    @lpVtbl.value.get_characteristics.call(this, pdwcharacteristics)
  end
  def create_presentation_descriptor(this : IMFMediaSource*, pppresentationdescriptor : IMFPresentationDescriptor*) : HRESULT
    @lpVtbl.value.create_presentation_descriptor.call(this, pppresentationdescriptor)
  end
  def start(this : IMFMediaSource*, ppresentationdescriptor : IMFPresentationDescriptor, pguidtimeformat : Guid*, pvarstartposition : PROPVARIANT*) : HRESULT
    @lpVtbl.value.start.call(this, ppresentationdescriptor, pguidtimeformat, pvarstartposition)
  end
  def stop(this : IMFMediaSource*) : HRESULT
    @lpVtbl.value.stop.call(this)
  end
  def pause(this : IMFMediaSource*) : HRESULT
    @lpVtbl.value.pause.call(this)
  end
  def shutdown(this : IMFMediaSource*) : HRESULT
    @lpVtbl.value.shutdown.call(this)
  end
end
struct LibWin32::IMFMediaSourceEx
  def query_interface(this : IMFMediaSourceEx*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaSourceEx*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaSourceEx*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_event(this : IMFMediaSourceEx*, dwflags : MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, ppevent : IMFMediaEvent*) : HRESULT
    @lpVtbl.value.get_event.call(this, dwflags, ppevent)
  end
  def begin_get_event(this : IMFMediaSourceEx*, pcallback : IMFAsyncCallback, punkstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_get_event.call(this, pcallback, punkstate)
  end
  def end_get_event(this : IMFMediaSourceEx*, presult : IMFAsyncResult, ppevent : IMFMediaEvent*) : HRESULT
    @lpVtbl.value.end_get_event.call(this, presult, ppevent)
  end
  def queue_event(this : IMFMediaSourceEx*, met : UInt32, guidextendedtype : Guid*, hrstatus : HRESULT, pvvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.queue_event.call(this, met, guidextendedtype, hrstatus, pvvalue)
  end
  def get_characteristics(this : IMFMediaSourceEx*, pdwcharacteristics : UInt32*) : HRESULT
    @lpVtbl.value.get_characteristics.call(this, pdwcharacteristics)
  end
  def create_presentation_descriptor(this : IMFMediaSourceEx*, pppresentationdescriptor : IMFPresentationDescriptor*) : HRESULT
    @lpVtbl.value.create_presentation_descriptor.call(this, pppresentationdescriptor)
  end
  def start(this : IMFMediaSourceEx*, ppresentationdescriptor : IMFPresentationDescriptor, pguidtimeformat : Guid*, pvarstartposition : PROPVARIANT*) : HRESULT
    @lpVtbl.value.start.call(this, ppresentationdescriptor, pguidtimeformat, pvarstartposition)
  end
  def stop(this : IMFMediaSourceEx*) : HRESULT
    @lpVtbl.value.stop.call(this)
  end
  def pause(this : IMFMediaSourceEx*) : HRESULT
    @lpVtbl.value.pause.call(this)
  end
  def shutdown(this : IMFMediaSourceEx*) : HRESULT
    @lpVtbl.value.shutdown.call(this)
  end
  def get_source_attributes(this : IMFMediaSourceEx*, ppattributes : IMFAttributes*) : HRESULT
    @lpVtbl.value.get_source_attributes.call(this, ppattributes)
  end
  def get_stream_attributes(this : IMFMediaSourceEx*, dwstreamidentifier : UInt32, ppattributes : IMFAttributes*) : HRESULT
    @lpVtbl.value.get_stream_attributes.call(this, dwstreamidentifier, ppattributes)
  end
  def set_d3_d_manager(this : IMFMediaSourceEx*, pmanager : IUnknown) : HRESULT
    @lpVtbl.value.set_d3_d_manager.call(this, pmanager)
  end
end
struct LibWin32::IMFClockConsumer
  def query_interface(this : IMFClockConsumer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFClockConsumer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFClockConsumer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_presentation_clock(this : IMFClockConsumer*, ppresentationclock : IMFPresentationClock) : HRESULT
    @lpVtbl.value.set_presentation_clock.call(this, ppresentationclock)
  end
  def get_presentation_clock(this : IMFClockConsumer*, pppresentationclock : IMFPresentationClock*) : HRESULT
    @lpVtbl.value.get_presentation_clock.call(this, pppresentationclock)
  end
end
struct LibWin32::IMFMediaStream
  def query_interface(this : IMFMediaStream*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaStream*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaStream*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_event(this : IMFMediaStream*, dwflags : MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, ppevent : IMFMediaEvent*) : HRESULT
    @lpVtbl.value.get_event.call(this, dwflags, ppevent)
  end
  def begin_get_event(this : IMFMediaStream*, pcallback : IMFAsyncCallback, punkstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_get_event.call(this, pcallback, punkstate)
  end
  def end_get_event(this : IMFMediaStream*, presult : IMFAsyncResult, ppevent : IMFMediaEvent*) : HRESULT
    @lpVtbl.value.end_get_event.call(this, presult, ppevent)
  end
  def queue_event(this : IMFMediaStream*, met : UInt32, guidextendedtype : Guid*, hrstatus : HRESULT, pvvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.queue_event.call(this, met, guidextendedtype, hrstatus, pvvalue)
  end
  def get_media_source(this : IMFMediaStream*, ppmediasource : IMFMediaSource*) : HRESULT
    @lpVtbl.value.get_media_source.call(this, ppmediasource)
  end
  def get_stream_descriptor(this : IMFMediaStream*, ppstreamdescriptor : IMFStreamDescriptor*) : HRESULT
    @lpVtbl.value.get_stream_descriptor.call(this, ppstreamdescriptor)
  end
  def request_sample(this : IMFMediaStream*, ptoken : IUnknown) : HRESULT
    @lpVtbl.value.request_sample.call(this, ptoken)
  end
end
struct LibWin32::IMFMediaSink
  def query_interface(this : IMFMediaSink*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaSink*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaSink*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_characteristics(this : IMFMediaSink*, pdwcharacteristics : UInt32*) : HRESULT
    @lpVtbl.value.get_characteristics.call(this, pdwcharacteristics)
  end
  def add_stream_sink(this : IMFMediaSink*, dwstreamsinkidentifier : UInt32, pmediatype : IMFMediaType, ppstreamsink : IMFStreamSink*) : HRESULT
    @lpVtbl.value.add_stream_sink.call(this, dwstreamsinkidentifier, pmediatype, ppstreamsink)
  end
  def remove_stream_sink(this : IMFMediaSink*, dwstreamsinkidentifier : UInt32) : HRESULT
    @lpVtbl.value.remove_stream_sink.call(this, dwstreamsinkidentifier)
  end
  def get_stream_sink_count(this : IMFMediaSink*, pcstreamsinkcount : UInt32*) : HRESULT
    @lpVtbl.value.get_stream_sink_count.call(this, pcstreamsinkcount)
  end
  def get_stream_sink_by_index(this : IMFMediaSink*, dwindex : UInt32, ppstreamsink : IMFStreamSink*) : HRESULT
    @lpVtbl.value.get_stream_sink_by_index.call(this, dwindex, ppstreamsink)
  end
  def get_stream_sink_by_id(this : IMFMediaSink*, dwstreamsinkidentifier : UInt32, ppstreamsink : IMFStreamSink*) : HRESULT
    @lpVtbl.value.get_stream_sink_by_id.call(this, dwstreamsinkidentifier, ppstreamsink)
  end
  def set_presentation_clock(this : IMFMediaSink*, ppresentationclock : IMFPresentationClock) : HRESULT
    @lpVtbl.value.set_presentation_clock.call(this, ppresentationclock)
  end
  def get_presentation_clock(this : IMFMediaSink*, pppresentationclock : IMFPresentationClock*) : HRESULT
    @lpVtbl.value.get_presentation_clock.call(this, pppresentationclock)
  end
  def shutdown(this : IMFMediaSink*) : HRESULT
    @lpVtbl.value.shutdown.call(this)
  end
end
struct LibWin32::IMFStreamSink
  def query_interface(this : IMFStreamSink*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFStreamSink*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFStreamSink*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_event(this : IMFStreamSink*, dwflags : MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, ppevent : IMFMediaEvent*) : HRESULT
    @lpVtbl.value.get_event.call(this, dwflags, ppevent)
  end
  def begin_get_event(this : IMFStreamSink*, pcallback : IMFAsyncCallback, punkstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_get_event.call(this, pcallback, punkstate)
  end
  def end_get_event(this : IMFStreamSink*, presult : IMFAsyncResult, ppevent : IMFMediaEvent*) : HRESULT
    @lpVtbl.value.end_get_event.call(this, presult, ppevent)
  end
  def queue_event(this : IMFStreamSink*, met : UInt32, guidextendedtype : Guid*, hrstatus : HRESULT, pvvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.queue_event.call(this, met, guidextendedtype, hrstatus, pvvalue)
  end
  def get_media_sink(this : IMFStreamSink*, ppmediasink : IMFMediaSink*) : HRESULT
    @lpVtbl.value.get_media_sink.call(this, ppmediasink)
  end
  def get_identifier(this : IMFStreamSink*, pdwidentifier : UInt32*) : HRESULT
    @lpVtbl.value.get_identifier.call(this, pdwidentifier)
  end
  def get_media_type_handler(this : IMFStreamSink*, pphandler : IMFMediaTypeHandler*) : HRESULT
    @lpVtbl.value.get_media_type_handler.call(this, pphandler)
  end
  def process_sample(this : IMFStreamSink*, psample : IMFSample) : HRESULT
    @lpVtbl.value.process_sample.call(this, psample)
  end
  def place_marker(this : IMFStreamSink*, emarkertype : MFSTREAMSINK_MARKER_TYPE, pvarmarkervalue : PROPVARIANT*, pvarcontextvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.place_marker.call(this, emarkertype, pvarmarkervalue, pvarcontextvalue)
  end
  def flush(this : IMFStreamSink*) : HRESULT
    @lpVtbl.value.flush.call(this)
  end
end
struct LibWin32::IMFVideoSampleAllocator
  def query_interface(this : IMFVideoSampleAllocator*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFVideoSampleAllocator*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFVideoSampleAllocator*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_direct_x_manager(this : IMFVideoSampleAllocator*, pmanager : IUnknown) : HRESULT
    @lpVtbl.value.set_direct_x_manager.call(this, pmanager)
  end
  def uninitialize_sample_allocator(this : IMFVideoSampleAllocator*) : HRESULT
    @lpVtbl.value.uninitialize_sample_allocator.call(this)
  end
  def initialize_sample_allocator(this : IMFVideoSampleAllocator*, crequestedframes : UInt32, pmediatype : IMFMediaType) : HRESULT
    @lpVtbl.value.initialize_sample_allocator.call(this, crequestedframes, pmediatype)
  end
  def allocate_sample(this : IMFVideoSampleAllocator*, ppsample : IMFSample*) : HRESULT
    @lpVtbl.value.allocate_sample.call(this, ppsample)
  end
end
struct LibWin32::IMFVideoSampleAllocatorNotify
  def query_interface(this : IMFVideoSampleAllocatorNotify*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFVideoSampleAllocatorNotify*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFVideoSampleAllocatorNotify*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def notify_release(this : IMFVideoSampleAllocatorNotify*) : HRESULT
    @lpVtbl.value.notify_release.call(this)
  end
end
struct LibWin32::IMFVideoSampleAllocatorNotifyEx
  def query_interface(this : IMFVideoSampleAllocatorNotifyEx*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFVideoSampleAllocatorNotifyEx*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFVideoSampleAllocatorNotifyEx*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def notify_release(this : IMFVideoSampleAllocatorNotifyEx*) : HRESULT
    @lpVtbl.value.notify_release.call(this)
  end
  def notify_prune(this : IMFVideoSampleAllocatorNotifyEx*, midl__imfvideosampleallocatornotifyex0000 : IMFSample) : HRESULT
    @lpVtbl.value.notify_prune.call(this, midl__imfvideosampleallocatornotifyex0000)
  end
end
struct LibWin32::IMFVideoSampleAllocatorCallback
  def query_interface(this : IMFVideoSampleAllocatorCallback*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFVideoSampleAllocatorCallback*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFVideoSampleAllocatorCallback*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_callback(this : IMFVideoSampleAllocatorCallback*, pnotify : IMFVideoSampleAllocatorNotify) : HRESULT
    @lpVtbl.value.set_callback.call(this, pnotify)
  end
  def get_free_sample_count(this : IMFVideoSampleAllocatorCallback*, plsamples : Int32*) : HRESULT
    @lpVtbl.value.get_free_sample_count.call(this, plsamples)
  end
end
struct LibWin32::IMFVideoSampleAllocatorEx
  def query_interface(this : IMFVideoSampleAllocatorEx*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFVideoSampleAllocatorEx*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFVideoSampleAllocatorEx*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_direct_x_manager(this : IMFVideoSampleAllocatorEx*, pmanager : IUnknown) : HRESULT
    @lpVtbl.value.set_direct_x_manager.call(this, pmanager)
  end
  def uninitialize_sample_allocator(this : IMFVideoSampleAllocatorEx*) : HRESULT
    @lpVtbl.value.uninitialize_sample_allocator.call(this)
  end
  def initialize_sample_allocator(this : IMFVideoSampleAllocatorEx*, crequestedframes : UInt32, pmediatype : IMFMediaType) : HRESULT
    @lpVtbl.value.initialize_sample_allocator.call(this, crequestedframes, pmediatype)
  end
  def allocate_sample(this : IMFVideoSampleAllocatorEx*, ppsample : IMFSample*) : HRESULT
    @lpVtbl.value.allocate_sample.call(this, ppsample)
  end
  def initialize_sample_allocator_ex(this : IMFVideoSampleAllocatorEx*, cinitialsamples : UInt32, cmaximumsamples : UInt32, pattributes : IMFAttributes, pmediatype : IMFMediaType) : HRESULT
    @lpVtbl.value.initialize_sample_allocator_ex.call(this, cinitialsamples, cmaximumsamples, pattributes, pmediatype)
  end
end
struct LibWin32::IMFDXGIDeviceManagerSource
  def query_interface(this : IMFDXGIDeviceManagerSource*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFDXGIDeviceManagerSource*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFDXGIDeviceManagerSource*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_manager(this : IMFDXGIDeviceManagerSource*, ppmanager : IMFDXGIDeviceManager*) : HRESULT
    @lpVtbl.value.get_manager.call(this, ppmanager)
  end
end
struct LibWin32::IMFVideoProcessorControl
  def query_interface(this : IMFVideoProcessorControl*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFVideoProcessorControl*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFVideoProcessorControl*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_border_color(this : IMFVideoProcessorControl*, pbordercolor : MFARGB*) : HRESULT
    @lpVtbl.value.set_border_color.call(this, pbordercolor)
  end
  def set_source_rectangle(this : IMFVideoProcessorControl*, psrcrect : RECT*) : HRESULT
    @lpVtbl.value.set_source_rectangle.call(this, psrcrect)
  end
  def set_destination_rectangle(this : IMFVideoProcessorControl*, pdstrect : RECT*) : HRESULT
    @lpVtbl.value.set_destination_rectangle.call(this, pdstrect)
  end
  def set_mirror(this : IMFVideoProcessorControl*, emirror : MF_VIDEO_PROCESSOR_MIRROR) : HRESULT
    @lpVtbl.value.set_mirror.call(this, emirror)
  end
  def set_rotation(this : IMFVideoProcessorControl*, erotation : MF_VIDEO_PROCESSOR_ROTATION) : HRESULT
    @lpVtbl.value.set_rotation.call(this, erotation)
  end
  def set_constriction_size(this : IMFVideoProcessorControl*, pconstrictionsize : SIZE*) : HRESULT
    @lpVtbl.value.set_constriction_size.call(this, pconstrictionsize)
  end
end
struct LibWin32::IMFVideoProcessorControl2
  def query_interface(this : IMFVideoProcessorControl2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFVideoProcessorControl2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFVideoProcessorControl2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_border_color(this : IMFVideoProcessorControl2*, pbordercolor : MFARGB*) : HRESULT
    @lpVtbl.value.set_border_color.call(this, pbordercolor)
  end
  def set_source_rectangle(this : IMFVideoProcessorControl2*, psrcrect : RECT*) : HRESULT
    @lpVtbl.value.set_source_rectangle.call(this, psrcrect)
  end
  def set_destination_rectangle(this : IMFVideoProcessorControl2*, pdstrect : RECT*) : HRESULT
    @lpVtbl.value.set_destination_rectangle.call(this, pdstrect)
  end
  def set_mirror(this : IMFVideoProcessorControl2*, emirror : MF_VIDEO_PROCESSOR_MIRROR) : HRESULT
    @lpVtbl.value.set_mirror.call(this, emirror)
  end
  def set_rotation(this : IMFVideoProcessorControl2*, erotation : MF_VIDEO_PROCESSOR_ROTATION) : HRESULT
    @lpVtbl.value.set_rotation.call(this, erotation)
  end
  def set_constriction_size(this : IMFVideoProcessorControl2*, pconstrictionsize : SIZE*) : HRESULT
    @lpVtbl.value.set_constriction_size.call(this, pconstrictionsize)
  end
  def set_rotation_override(this : IMFVideoProcessorControl2*, uirotation : UInt32) : HRESULT
    @lpVtbl.value.set_rotation_override.call(this, uirotation)
  end
  def enable_hardware_effects(this : IMFVideoProcessorControl2*, fenabled : LibC::BOOL) : HRESULT
    @lpVtbl.value.enable_hardware_effects.call(this, fenabled)
  end
  def get_supported_hardware_effects(this : IMFVideoProcessorControl2*, puisupport : UInt32*) : HRESULT
    @lpVtbl.value.get_supported_hardware_effects.call(this, puisupport)
  end
end
struct LibWin32::IMFVideoProcessorControl3
  def query_interface(this : IMFVideoProcessorControl3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFVideoProcessorControl3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFVideoProcessorControl3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_border_color(this : IMFVideoProcessorControl3*, pbordercolor : MFARGB*) : HRESULT
    @lpVtbl.value.set_border_color.call(this, pbordercolor)
  end
  def set_source_rectangle(this : IMFVideoProcessorControl3*, psrcrect : RECT*) : HRESULT
    @lpVtbl.value.set_source_rectangle.call(this, psrcrect)
  end
  def set_destination_rectangle(this : IMFVideoProcessorControl3*, pdstrect : RECT*) : HRESULT
    @lpVtbl.value.set_destination_rectangle.call(this, pdstrect)
  end
  def set_mirror(this : IMFVideoProcessorControl3*, emirror : MF_VIDEO_PROCESSOR_MIRROR) : HRESULT
    @lpVtbl.value.set_mirror.call(this, emirror)
  end
  def set_rotation(this : IMFVideoProcessorControl3*, erotation : MF_VIDEO_PROCESSOR_ROTATION) : HRESULT
    @lpVtbl.value.set_rotation.call(this, erotation)
  end
  def set_constriction_size(this : IMFVideoProcessorControl3*, pconstrictionsize : SIZE*) : HRESULT
    @lpVtbl.value.set_constriction_size.call(this, pconstrictionsize)
  end
  def set_rotation_override(this : IMFVideoProcessorControl3*, uirotation : UInt32) : HRESULT
    @lpVtbl.value.set_rotation_override.call(this, uirotation)
  end
  def enable_hardware_effects(this : IMFVideoProcessorControl3*, fenabled : LibC::BOOL) : HRESULT
    @lpVtbl.value.enable_hardware_effects.call(this, fenabled)
  end
  def get_supported_hardware_effects(this : IMFVideoProcessorControl3*, puisupport : UInt32*) : HRESULT
    @lpVtbl.value.get_supported_hardware_effects.call(this, puisupport)
  end
  def get_natural_output_type(this : IMFVideoProcessorControl3*, pptype : IMFMediaType*) : HRESULT
    @lpVtbl.value.get_natural_output_type.call(this, pptype)
  end
  def enable_spherical_video_processing(this : IMFVideoProcessorControl3*, fenable : LibC::BOOL, eformat : MFVideoSphericalFormat, eprojectionmode : MFVideoSphericalProjectionMode) : HRESULT
    @lpVtbl.value.enable_spherical_video_processing.call(this, fenable, eformat, eprojectionmode)
  end
  def set_spherical_video_properties(this : IMFVideoProcessorControl3*, x : Float32, y : Float32, z : Float32, w : Float32, fieldofview : Float32) : HRESULT
    @lpVtbl.value.set_spherical_video_properties.call(this, x, y, z, w, fieldofview)
  end
  def set_output_device(this : IMFVideoProcessorControl3*, poutputdevice : IUnknown) : HRESULT
    @lpVtbl.value.set_output_device.call(this, poutputdevice)
  end
end
struct LibWin32::IMFVideoRendererEffectControl
  def query_interface(this : IMFVideoRendererEffectControl*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFVideoRendererEffectControl*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFVideoRendererEffectControl*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_app_service_connection_established(this : IMFVideoRendererEffectControl*, pappserviceconnection : IUnknown) : HRESULT
    @lpVtbl.value.on_app_service_connection_established.call(this, pappserviceconnection)
  end
end
struct LibWin32::IMFTopology
  def query_interface(this : IMFTopology*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFTopology*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFTopology*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_item(this : IMFTopology*, guidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item.call(this, guidkey, pvalue)
  end
  def get_item_type(this : IMFTopology*, guidkey : Guid*, ptype : MF_ATTRIBUTE_TYPE*) : HRESULT
    @lpVtbl.value.get_item_type.call(this, guidkey, ptype)
  end
  def compare_item(this : IMFTopology*, guidkey : Guid*, value : PROPVARIANT*, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare_item.call(this, guidkey, value, pbresult)
  end
  def compare(this : IMFTopology*, ptheirs : IMFAttributes, matchtype : MF_ATTRIBUTES_MATCH_TYPE, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare.call(this, ptheirs, matchtype, pbresult)
  end
  def get_uint32(this : IMFTopology*, guidkey : Guid*, punvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_uint32.call(this, guidkey, punvalue)
  end
  def get_uint64(this : IMFTopology*, guidkey : Guid*, punvalue : UInt64*) : HRESULT
    @lpVtbl.value.get_uint64.call(this, guidkey, punvalue)
  end
  def get_double(this : IMFTopology*, guidkey : Guid*, pfvalue : Float64*) : HRESULT
    @lpVtbl.value.get_double.call(this, guidkey, pfvalue)
  end
  def get_guid(this : IMFTopology*, guidkey : Guid*, pguidvalue : Guid*) : HRESULT
    @lpVtbl.value.get_guid.call(this, guidkey, pguidvalue)
  end
  def get_string_length(this : IMFTopology*, guidkey : Guid*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string_length.call(this, guidkey, pcchlength)
  end
  def get_string(this : IMFTopology*, guidkey : Guid*, pwszvalue : Char*, cchbufsize : UInt32, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string.call(this, guidkey, pwszvalue, cchbufsize, pcchlength)
  end
  def get_allocated_string(this : IMFTopology*, guidkey : Guid*, ppwszvalue : LibC::LPWSTR*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_string.call(this, guidkey, ppwszvalue, pcchlength)
  end
  def get_blob_size(this : IMFTopology*, guidkey : Guid*, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob_size.call(this, guidkey, pcbblobsize)
  end
  def get_blob(this : IMFTopology*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob.call(this, guidkey, pbuf, cbbufsize, pcbblobsize)
  end
  def get_allocated_blob(this : IMFTopology*, guidkey : Guid*, ppbuf : UInt8**, pcbsize : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_blob.call(this, guidkey, ppbuf, pcbsize)
  end
  def get_unknown(this : IMFTopology*, guidkey : Guid*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_unknown.call(this, guidkey, riid, ppv)
  end
  def set_item(this : IMFTopology*, guidkey : Guid*, value : PROPVARIANT*) : HRESULT
    @lpVtbl.value.set_item.call(this, guidkey, value)
  end
  def delete_item(this : IMFTopology*, guidkey : Guid*) : HRESULT
    @lpVtbl.value.delete_item.call(this, guidkey)
  end
  def delete_all_items(this : IMFTopology*) : HRESULT
    @lpVtbl.value.delete_all_items.call(this)
  end
  def set_uint32(this : IMFTopology*, guidkey : Guid*, unvalue : UInt32) : HRESULT
    @lpVtbl.value.set_uint32.call(this, guidkey, unvalue)
  end
  def set_uint64(this : IMFTopology*, guidkey : Guid*, unvalue : UInt64) : HRESULT
    @lpVtbl.value.set_uint64.call(this, guidkey, unvalue)
  end
  def set_double(this : IMFTopology*, guidkey : Guid*, fvalue : Float64) : HRESULT
    @lpVtbl.value.set_double.call(this, guidkey, fvalue)
  end
  def set_guid(this : IMFTopology*, guidkey : Guid*, guidvalue : Guid*) : HRESULT
    @lpVtbl.value.set_guid.call(this, guidkey, guidvalue)
  end
  def set_string(this : IMFTopology*, guidkey : Guid*, wszvalue : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_string.call(this, guidkey, wszvalue)
  end
  def set_blob(this : IMFTopology*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32) : HRESULT
    @lpVtbl.value.set_blob.call(this, guidkey, pbuf, cbbufsize)
  end
  def set_unknown(this : IMFTopology*, guidkey : Guid*, punknown : IUnknown) : HRESULT
    @lpVtbl.value.set_unknown.call(this, guidkey, punknown)
  end
  def lock_store(this : IMFTopology*) : HRESULT
    @lpVtbl.value.lock_store.call(this)
  end
  def unlock_store(this : IMFTopology*) : HRESULT
    @lpVtbl.value.unlock_store.call(this)
  end
  def get_count(this : IMFTopology*, pcitems : UInt32*) : HRESULT
    @lpVtbl.value.get_count.call(this, pcitems)
  end
  def get_item_by_index(this : IMFTopology*, unindex : UInt32, pguidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item_by_index.call(this, unindex, pguidkey, pvalue)
  end
  def copy_all_items(this : IMFTopology*, pdest : IMFAttributes) : HRESULT
    @lpVtbl.value.copy_all_items.call(this, pdest)
  end
  def get_topology_id(this : IMFTopology*, pid : UInt64*) : HRESULT
    @lpVtbl.value.get_topology_id.call(this, pid)
  end
  def add_node(this : IMFTopology*, pnode : IMFTopologyNode) : HRESULT
    @lpVtbl.value.add_node.call(this, pnode)
  end
  def remove_node(this : IMFTopology*, pnode : IMFTopologyNode) : HRESULT
    @lpVtbl.value.remove_node.call(this, pnode)
  end
  def get_node_count(this : IMFTopology*, pwnodes : UInt16*) : HRESULT
    @lpVtbl.value.get_node_count.call(this, pwnodes)
  end
  def get_node(this : IMFTopology*, windex : UInt16, ppnode : IMFTopologyNode*) : HRESULT
    @lpVtbl.value.get_node.call(this, windex, ppnode)
  end
  def clear(this : IMFTopology*) : HRESULT
    @lpVtbl.value.clear.call(this)
  end
  def clone_from(this : IMFTopology*, ptopology : IMFTopology) : HRESULT
    @lpVtbl.value.clone_from.call(this, ptopology)
  end
  def get_node_by_id(this : IMFTopology*, qwtoponodeid : UInt64, ppnode : IMFTopologyNode*) : HRESULT
    @lpVtbl.value.get_node_by_id.call(this, qwtoponodeid, ppnode)
  end
  def get_source_node_collection(this : IMFTopology*, ppcollection : IMFCollection*) : HRESULT
    @lpVtbl.value.get_source_node_collection.call(this, ppcollection)
  end
  def get_output_node_collection(this : IMFTopology*, ppcollection : IMFCollection*) : HRESULT
    @lpVtbl.value.get_output_node_collection.call(this, ppcollection)
  end
end
struct LibWin32::IMFTopologyNode
  def query_interface(this : IMFTopologyNode*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFTopologyNode*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFTopologyNode*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_item(this : IMFTopologyNode*, guidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item.call(this, guidkey, pvalue)
  end
  def get_item_type(this : IMFTopologyNode*, guidkey : Guid*, ptype : MF_ATTRIBUTE_TYPE*) : HRESULT
    @lpVtbl.value.get_item_type.call(this, guidkey, ptype)
  end
  def compare_item(this : IMFTopologyNode*, guidkey : Guid*, value : PROPVARIANT*, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare_item.call(this, guidkey, value, pbresult)
  end
  def compare(this : IMFTopologyNode*, ptheirs : IMFAttributes, matchtype : MF_ATTRIBUTES_MATCH_TYPE, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare.call(this, ptheirs, matchtype, pbresult)
  end
  def get_uint32(this : IMFTopologyNode*, guidkey : Guid*, punvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_uint32.call(this, guidkey, punvalue)
  end
  def get_uint64(this : IMFTopologyNode*, guidkey : Guid*, punvalue : UInt64*) : HRESULT
    @lpVtbl.value.get_uint64.call(this, guidkey, punvalue)
  end
  def get_double(this : IMFTopologyNode*, guidkey : Guid*, pfvalue : Float64*) : HRESULT
    @lpVtbl.value.get_double.call(this, guidkey, pfvalue)
  end
  def get_guid(this : IMFTopologyNode*, guidkey : Guid*, pguidvalue : Guid*) : HRESULT
    @lpVtbl.value.get_guid.call(this, guidkey, pguidvalue)
  end
  def get_string_length(this : IMFTopologyNode*, guidkey : Guid*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string_length.call(this, guidkey, pcchlength)
  end
  def get_string(this : IMFTopologyNode*, guidkey : Guid*, pwszvalue : Char*, cchbufsize : UInt32, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string.call(this, guidkey, pwszvalue, cchbufsize, pcchlength)
  end
  def get_allocated_string(this : IMFTopologyNode*, guidkey : Guid*, ppwszvalue : LibC::LPWSTR*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_string.call(this, guidkey, ppwszvalue, pcchlength)
  end
  def get_blob_size(this : IMFTopologyNode*, guidkey : Guid*, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob_size.call(this, guidkey, pcbblobsize)
  end
  def get_blob(this : IMFTopologyNode*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob.call(this, guidkey, pbuf, cbbufsize, pcbblobsize)
  end
  def get_allocated_blob(this : IMFTopologyNode*, guidkey : Guid*, ppbuf : UInt8**, pcbsize : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_blob.call(this, guidkey, ppbuf, pcbsize)
  end
  def get_unknown(this : IMFTopologyNode*, guidkey : Guid*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_unknown.call(this, guidkey, riid, ppv)
  end
  def set_item(this : IMFTopologyNode*, guidkey : Guid*, value : PROPVARIANT*) : HRESULT
    @lpVtbl.value.set_item.call(this, guidkey, value)
  end
  def delete_item(this : IMFTopologyNode*, guidkey : Guid*) : HRESULT
    @lpVtbl.value.delete_item.call(this, guidkey)
  end
  def delete_all_items(this : IMFTopologyNode*) : HRESULT
    @lpVtbl.value.delete_all_items.call(this)
  end
  def set_uint32(this : IMFTopologyNode*, guidkey : Guid*, unvalue : UInt32) : HRESULT
    @lpVtbl.value.set_uint32.call(this, guidkey, unvalue)
  end
  def set_uint64(this : IMFTopologyNode*, guidkey : Guid*, unvalue : UInt64) : HRESULT
    @lpVtbl.value.set_uint64.call(this, guidkey, unvalue)
  end
  def set_double(this : IMFTopologyNode*, guidkey : Guid*, fvalue : Float64) : HRESULT
    @lpVtbl.value.set_double.call(this, guidkey, fvalue)
  end
  def set_guid(this : IMFTopologyNode*, guidkey : Guid*, guidvalue : Guid*) : HRESULT
    @lpVtbl.value.set_guid.call(this, guidkey, guidvalue)
  end
  def set_string(this : IMFTopologyNode*, guidkey : Guid*, wszvalue : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_string.call(this, guidkey, wszvalue)
  end
  def set_blob(this : IMFTopologyNode*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32) : HRESULT
    @lpVtbl.value.set_blob.call(this, guidkey, pbuf, cbbufsize)
  end
  def set_unknown(this : IMFTopologyNode*, guidkey : Guid*, punknown : IUnknown) : HRESULT
    @lpVtbl.value.set_unknown.call(this, guidkey, punknown)
  end
  def lock_store(this : IMFTopologyNode*) : HRESULT
    @lpVtbl.value.lock_store.call(this)
  end
  def unlock_store(this : IMFTopologyNode*) : HRESULT
    @lpVtbl.value.unlock_store.call(this)
  end
  def get_count(this : IMFTopologyNode*, pcitems : UInt32*) : HRESULT
    @lpVtbl.value.get_count.call(this, pcitems)
  end
  def get_item_by_index(this : IMFTopologyNode*, unindex : UInt32, pguidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item_by_index.call(this, unindex, pguidkey, pvalue)
  end
  def copy_all_items(this : IMFTopologyNode*, pdest : IMFAttributes) : HRESULT
    @lpVtbl.value.copy_all_items.call(this, pdest)
  end
  def set_object(this : IMFTopologyNode*, pobject : IUnknown) : HRESULT
    @lpVtbl.value.set_object.call(this, pobject)
  end
  def get_object(this : IMFTopologyNode*, ppobject : IUnknown*) : HRESULT
    @lpVtbl.value.get_object.call(this, ppobject)
  end
  def get_node_type(this : IMFTopologyNode*, ptype : MF_TOPOLOGY_TYPE*) : HRESULT
    @lpVtbl.value.get_node_type.call(this, ptype)
  end
  def get_topo_node_id(this : IMFTopologyNode*, pid : UInt64*) : HRESULT
    @lpVtbl.value.get_topo_node_id.call(this, pid)
  end
  def set_topo_node_id(this : IMFTopologyNode*, ulltopoid : UInt64) : HRESULT
    @lpVtbl.value.set_topo_node_id.call(this, ulltopoid)
  end
  def get_input_count(this : IMFTopologyNode*, pcinputs : UInt32*) : HRESULT
    @lpVtbl.value.get_input_count.call(this, pcinputs)
  end
  def get_output_count(this : IMFTopologyNode*, pcoutputs : UInt32*) : HRESULT
    @lpVtbl.value.get_output_count.call(this, pcoutputs)
  end
  def connect_output(this : IMFTopologyNode*, dwoutputindex : UInt32, pdownstreamnode : IMFTopologyNode, dwinputindexondownstreamnode : UInt32) : HRESULT
    @lpVtbl.value.connect_output.call(this, dwoutputindex, pdownstreamnode, dwinputindexondownstreamnode)
  end
  def disconnect_output(this : IMFTopologyNode*, dwoutputindex : UInt32) : HRESULT
    @lpVtbl.value.disconnect_output.call(this, dwoutputindex)
  end
  def get_input(this : IMFTopologyNode*, dwinputindex : UInt32, ppupstreamnode : IMFTopologyNode*, pdwoutputindexonupstreamnode : UInt32*) : HRESULT
    @lpVtbl.value.get_input.call(this, dwinputindex, ppupstreamnode, pdwoutputindexonupstreamnode)
  end
  def get_output(this : IMFTopologyNode*, dwoutputindex : UInt32, ppdownstreamnode : IMFTopologyNode*, pdwinputindexondownstreamnode : UInt32*) : HRESULT
    @lpVtbl.value.get_output.call(this, dwoutputindex, ppdownstreamnode, pdwinputindexondownstreamnode)
  end
  def set_output_pref_type(this : IMFTopologyNode*, dwoutputindex : UInt32, ptype : IMFMediaType) : HRESULT
    @lpVtbl.value.set_output_pref_type.call(this, dwoutputindex, ptype)
  end
  def get_output_pref_type(this : IMFTopologyNode*, dwoutputindex : UInt32, pptype : IMFMediaType*) : HRESULT
    @lpVtbl.value.get_output_pref_type.call(this, dwoutputindex, pptype)
  end
  def set_input_pref_type(this : IMFTopologyNode*, dwinputindex : UInt32, ptype : IMFMediaType) : HRESULT
    @lpVtbl.value.set_input_pref_type.call(this, dwinputindex, ptype)
  end
  def get_input_pref_type(this : IMFTopologyNode*, dwinputindex : UInt32, pptype : IMFMediaType*) : HRESULT
    @lpVtbl.value.get_input_pref_type.call(this, dwinputindex, pptype)
  end
  def clone_from(this : IMFTopologyNode*, pnode : IMFTopologyNode) : HRESULT
    @lpVtbl.value.clone_from.call(this, pnode)
  end
end
struct LibWin32::IMFGetService
  def query_interface(this : IMFGetService*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFGetService*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFGetService*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_service(this : IMFGetService*, guidservice : Guid*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.get_service.call(this, guidservice, riid, ppvobject)
  end
end
struct LibWin32::IMFClock
  def query_interface(this : IMFClock*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFClock*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFClock*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_clock_characteristics(this : IMFClock*, pdwcharacteristics : UInt32*) : HRESULT
    @lpVtbl.value.get_clock_characteristics.call(this, pdwcharacteristics)
  end
  def get_correlated_time(this : IMFClock*, dwreserved : UInt32, pllclocktime : Int64*, phnssystemtime : Int64*) : HRESULT
    @lpVtbl.value.get_correlated_time.call(this, dwreserved, pllclocktime, phnssystemtime)
  end
  def get_continuity_key(this : IMFClock*, pdwcontinuitykey : UInt32*) : HRESULT
    @lpVtbl.value.get_continuity_key.call(this, pdwcontinuitykey)
  end
  def get_state(this : IMFClock*, dwreserved : UInt32, peclockstate : MFCLOCK_STATE*) : HRESULT
    @lpVtbl.value.get_state.call(this, dwreserved, peclockstate)
  end
  def get_properties(this : IMFClock*, pclockproperties : MFCLOCK_PROPERTIES*) : HRESULT
    @lpVtbl.value.get_properties.call(this, pclockproperties)
  end
end
struct LibWin32::IMFPresentationClock
  def query_interface(this : IMFPresentationClock*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFPresentationClock*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFPresentationClock*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_clock_characteristics(this : IMFPresentationClock*, pdwcharacteristics : UInt32*) : HRESULT
    @lpVtbl.value.get_clock_characteristics.call(this, pdwcharacteristics)
  end
  def get_correlated_time(this : IMFPresentationClock*, dwreserved : UInt32, pllclocktime : Int64*, phnssystemtime : Int64*) : HRESULT
    @lpVtbl.value.get_correlated_time.call(this, dwreserved, pllclocktime, phnssystemtime)
  end
  def get_continuity_key(this : IMFPresentationClock*, pdwcontinuitykey : UInt32*) : HRESULT
    @lpVtbl.value.get_continuity_key.call(this, pdwcontinuitykey)
  end
  def get_state(this : IMFPresentationClock*, dwreserved : UInt32, peclockstate : MFCLOCK_STATE*) : HRESULT
    @lpVtbl.value.get_state.call(this, dwreserved, peclockstate)
  end
  def get_properties(this : IMFPresentationClock*, pclockproperties : MFCLOCK_PROPERTIES*) : HRESULT
    @lpVtbl.value.get_properties.call(this, pclockproperties)
  end
  def set_time_source(this : IMFPresentationClock*, ptimesource : IMFPresentationTimeSource) : HRESULT
    @lpVtbl.value.set_time_source.call(this, ptimesource)
  end
  def get_time_source(this : IMFPresentationClock*, pptimesource : IMFPresentationTimeSource*) : HRESULT
    @lpVtbl.value.get_time_source.call(this, pptimesource)
  end
  def get_time(this : IMFPresentationClock*, phnsclocktime : Int64*) : HRESULT
    @lpVtbl.value.get_time.call(this, phnsclocktime)
  end
  def add_clock_state_sink(this : IMFPresentationClock*, pstatesink : IMFClockStateSink) : HRESULT
    @lpVtbl.value.add_clock_state_sink.call(this, pstatesink)
  end
  def remove_clock_state_sink(this : IMFPresentationClock*, pstatesink : IMFClockStateSink) : HRESULT
    @lpVtbl.value.remove_clock_state_sink.call(this, pstatesink)
  end
  def start(this : IMFPresentationClock*, llclockstartoffset : Int64) : HRESULT
    @lpVtbl.value.start.call(this, llclockstartoffset)
  end
  def stop(this : IMFPresentationClock*) : HRESULT
    @lpVtbl.value.stop.call(this)
  end
  def pause(this : IMFPresentationClock*) : HRESULT
    @lpVtbl.value.pause.call(this)
  end
end
struct LibWin32::IMFPresentationTimeSource
  def query_interface(this : IMFPresentationTimeSource*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFPresentationTimeSource*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFPresentationTimeSource*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_clock_characteristics(this : IMFPresentationTimeSource*, pdwcharacteristics : UInt32*) : HRESULT
    @lpVtbl.value.get_clock_characteristics.call(this, pdwcharacteristics)
  end
  def get_correlated_time(this : IMFPresentationTimeSource*, dwreserved : UInt32, pllclocktime : Int64*, phnssystemtime : Int64*) : HRESULT
    @lpVtbl.value.get_correlated_time.call(this, dwreserved, pllclocktime, phnssystemtime)
  end
  def get_continuity_key(this : IMFPresentationTimeSource*, pdwcontinuitykey : UInt32*) : HRESULT
    @lpVtbl.value.get_continuity_key.call(this, pdwcontinuitykey)
  end
  def get_state(this : IMFPresentationTimeSource*, dwreserved : UInt32, peclockstate : MFCLOCK_STATE*) : HRESULT
    @lpVtbl.value.get_state.call(this, dwreserved, peclockstate)
  end
  def get_properties(this : IMFPresentationTimeSource*, pclockproperties : MFCLOCK_PROPERTIES*) : HRESULT
    @lpVtbl.value.get_properties.call(this, pclockproperties)
  end
  def get_underlying_clock(this : IMFPresentationTimeSource*, ppclock : IMFClock*) : HRESULT
    @lpVtbl.value.get_underlying_clock.call(this, ppclock)
  end
end
struct LibWin32::IMFClockStateSink
  def query_interface(this : IMFClockStateSink*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFClockStateSink*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFClockStateSink*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_clock_start(this : IMFClockStateSink*, hnssystemtime : Int64, llclockstartoffset : Int64) : HRESULT
    @lpVtbl.value.on_clock_start.call(this, hnssystemtime, llclockstartoffset)
  end
  def on_clock_stop(this : IMFClockStateSink*, hnssystemtime : Int64) : HRESULT
    @lpVtbl.value.on_clock_stop.call(this, hnssystemtime)
  end
  def on_clock_pause(this : IMFClockStateSink*, hnssystemtime : Int64) : HRESULT
    @lpVtbl.value.on_clock_pause.call(this, hnssystemtime)
  end
  def on_clock_restart(this : IMFClockStateSink*, hnssystemtime : Int64) : HRESULT
    @lpVtbl.value.on_clock_restart.call(this, hnssystemtime)
  end
  def on_clock_set_rate(this : IMFClockStateSink*, hnssystemtime : Int64, flrate : Float32) : HRESULT
    @lpVtbl.value.on_clock_set_rate.call(this, hnssystemtime, flrate)
  end
end
struct LibWin32::IMFPresentationDescriptor
  def query_interface(this : IMFPresentationDescriptor*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFPresentationDescriptor*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFPresentationDescriptor*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_item(this : IMFPresentationDescriptor*, guidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item.call(this, guidkey, pvalue)
  end
  def get_item_type(this : IMFPresentationDescriptor*, guidkey : Guid*, ptype : MF_ATTRIBUTE_TYPE*) : HRESULT
    @lpVtbl.value.get_item_type.call(this, guidkey, ptype)
  end
  def compare_item(this : IMFPresentationDescriptor*, guidkey : Guid*, value : PROPVARIANT*, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare_item.call(this, guidkey, value, pbresult)
  end
  def compare(this : IMFPresentationDescriptor*, ptheirs : IMFAttributes, matchtype : MF_ATTRIBUTES_MATCH_TYPE, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare.call(this, ptheirs, matchtype, pbresult)
  end
  def get_uint32(this : IMFPresentationDescriptor*, guidkey : Guid*, punvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_uint32.call(this, guidkey, punvalue)
  end
  def get_uint64(this : IMFPresentationDescriptor*, guidkey : Guid*, punvalue : UInt64*) : HRESULT
    @lpVtbl.value.get_uint64.call(this, guidkey, punvalue)
  end
  def get_double(this : IMFPresentationDescriptor*, guidkey : Guid*, pfvalue : Float64*) : HRESULT
    @lpVtbl.value.get_double.call(this, guidkey, pfvalue)
  end
  def get_guid(this : IMFPresentationDescriptor*, guidkey : Guid*, pguidvalue : Guid*) : HRESULT
    @lpVtbl.value.get_guid.call(this, guidkey, pguidvalue)
  end
  def get_string_length(this : IMFPresentationDescriptor*, guidkey : Guid*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string_length.call(this, guidkey, pcchlength)
  end
  def get_string(this : IMFPresentationDescriptor*, guidkey : Guid*, pwszvalue : Char*, cchbufsize : UInt32, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string.call(this, guidkey, pwszvalue, cchbufsize, pcchlength)
  end
  def get_allocated_string(this : IMFPresentationDescriptor*, guidkey : Guid*, ppwszvalue : LibC::LPWSTR*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_string.call(this, guidkey, ppwszvalue, pcchlength)
  end
  def get_blob_size(this : IMFPresentationDescriptor*, guidkey : Guid*, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob_size.call(this, guidkey, pcbblobsize)
  end
  def get_blob(this : IMFPresentationDescriptor*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob.call(this, guidkey, pbuf, cbbufsize, pcbblobsize)
  end
  def get_allocated_blob(this : IMFPresentationDescriptor*, guidkey : Guid*, ppbuf : UInt8**, pcbsize : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_blob.call(this, guidkey, ppbuf, pcbsize)
  end
  def get_unknown(this : IMFPresentationDescriptor*, guidkey : Guid*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_unknown.call(this, guidkey, riid, ppv)
  end
  def set_item(this : IMFPresentationDescriptor*, guidkey : Guid*, value : PROPVARIANT*) : HRESULT
    @lpVtbl.value.set_item.call(this, guidkey, value)
  end
  def delete_item(this : IMFPresentationDescriptor*, guidkey : Guid*) : HRESULT
    @lpVtbl.value.delete_item.call(this, guidkey)
  end
  def delete_all_items(this : IMFPresentationDescriptor*) : HRESULT
    @lpVtbl.value.delete_all_items.call(this)
  end
  def set_uint32(this : IMFPresentationDescriptor*, guidkey : Guid*, unvalue : UInt32) : HRESULT
    @lpVtbl.value.set_uint32.call(this, guidkey, unvalue)
  end
  def set_uint64(this : IMFPresentationDescriptor*, guidkey : Guid*, unvalue : UInt64) : HRESULT
    @lpVtbl.value.set_uint64.call(this, guidkey, unvalue)
  end
  def set_double(this : IMFPresentationDescriptor*, guidkey : Guid*, fvalue : Float64) : HRESULT
    @lpVtbl.value.set_double.call(this, guidkey, fvalue)
  end
  def set_guid(this : IMFPresentationDescriptor*, guidkey : Guid*, guidvalue : Guid*) : HRESULT
    @lpVtbl.value.set_guid.call(this, guidkey, guidvalue)
  end
  def set_string(this : IMFPresentationDescriptor*, guidkey : Guid*, wszvalue : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_string.call(this, guidkey, wszvalue)
  end
  def set_blob(this : IMFPresentationDescriptor*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32) : HRESULT
    @lpVtbl.value.set_blob.call(this, guidkey, pbuf, cbbufsize)
  end
  def set_unknown(this : IMFPresentationDescriptor*, guidkey : Guid*, punknown : IUnknown) : HRESULT
    @lpVtbl.value.set_unknown.call(this, guidkey, punknown)
  end
  def lock_store(this : IMFPresentationDescriptor*) : HRESULT
    @lpVtbl.value.lock_store.call(this)
  end
  def unlock_store(this : IMFPresentationDescriptor*) : HRESULT
    @lpVtbl.value.unlock_store.call(this)
  end
  def get_count(this : IMFPresentationDescriptor*, pcitems : UInt32*) : HRESULT
    @lpVtbl.value.get_count.call(this, pcitems)
  end
  def get_item_by_index(this : IMFPresentationDescriptor*, unindex : UInt32, pguidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item_by_index.call(this, unindex, pguidkey, pvalue)
  end
  def copy_all_items(this : IMFPresentationDescriptor*, pdest : IMFAttributes) : HRESULT
    @lpVtbl.value.copy_all_items.call(this, pdest)
  end
  def get_stream_descriptor_count(this : IMFPresentationDescriptor*, pdwdescriptorcount : UInt32*) : HRESULT
    @lpVtbl.value.get_stream_descriptor_count.call(this, pdwdescriptorcount)
  end
  def get_stream_descriptor_by_index(this : IMFPresentationDescriptor*, dwindex : UInt32, pfselected : LibC::BOOL*, ppdescriptor : IMFStreamDescriptor*) : HRESULT
    @lpVtbl.value.get_stream_descriptor_by_index.call(this, dwindex, pfselected, ppdescriptor)
  end
  def select_stream(this : IMFPresentationDescriptor*, dwdescriptorindex : UInt32) : HRESULT
    @lpVtbl.value.select_stream.call(this, dwdescriptorindex)
  end
  def deselect_stream(this : IMFPresentationDescriptor*, dwdescriptorindex : UInt32) : HRESULT
    @lpVtbl.value.deselect_stream.call(this, dwdescriptorindex)
  end
  def clone(this : IMFPresentationDescriptor*, pppresentationdescriptor : IMFPresentationDescriptor*) : HRESULT
    @lpVtbl.value.clone.call(this, pppresentationdescriptor)
  end
end
struct LibWin32::IMFStreamDescriptor
  def query_interface(this : IMFStreamDescriptor*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFStreamDescriptor*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFStreamDescriptor*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_item(this : IMFStreamDescriptor*, guidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item.call(this, guidkey, pvalue)
  end
  def get_item_type(this : IMFStreamDescriptor*, guidkey : Guid*, ptype : MF_ATTRIBUTE_TYPE*) : HRESULT
    @lpVtbl.value.get_item_type.call(this, guidkey, ptype)
  end
  def compare_item(this : IMFStreamDescriptor*, guidkey : Guid*, value : PROPVARIANT*, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare_item.call(this, guidkey, value, pbresult)
  end
  def compare(this : IMFStreamDescriptor*, ptheirs : IMFAttributes, matchtype : MF_ATTRIBUTES_MATCH_TYPE, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare.call(this, ptheirs, matchtype, pbresult)
  end
  def get_uint32(this : IMFStreamDescriptor*, guidkey : Guid*, punvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_uint32.call(this, guidkey, punvalue)
  end
  def get_uint64(this : IMFStreamDescriptor*, guidkey : Guid*, punvalue : UInt64*) : HRESULT
    @lpVtbl.value.get_uint64.call(this, guidkey, punvalue)
  end
  def get_double(this : IMFStreamDescriptor*, guidkey : Guid*, pfvalue : Float64*) : HRESULT
    @lpVtbl.value.get_double.call(this, guidkey, pfvalue)
  end
  def get_guid(this : IMFStreamDescriptor*, guidkey : Guid*, pguidvalue : Guid*) : HRESULT
    @lpVtbl.value.get_guid.call(this, guidkey, pguidvalue)
  end
  def get_string_length(this : IMFStreamDescriptor*, guidkey : Guid*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string_length.call(this, guidkey, pcchlength)
  end
  def get_string(this : IMFStreamDescriptor*, guidkey : Guid*, pwszvalue : Char*, cchbufsize : UInt32, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string.call(this, guidkey, pwszvalue, cchbufsize, pcchlength)
  end
  def get_allocated_string(this : IMFStreamDescriptor*, guidkey : Guid*, ppwszvalue : LibC::LPWSTR*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_string.call(this, guidkey, ppwszvalue, pcchlength)
  end
  def get_blob_size(this : IMFStreamDescriptor*, guidkey : Guid*, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob_size.call(this, guidkey, pcbblobsize)
  end
  def get_blob(this : IMFStreamDescriptor*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob.call(this, guidkey, pbuf, cbbufsize, pcbblobsize)
  end
  def get_allocated_blob(this : IMFStreamDescriptor*, guidkey : Guid*, ppbuf : UInt8**, pcbsize : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_blob.call(this, guidkey, ppbuf, pcbsize)
  end
  def get_unknown(this : IMFStreamDescriptor*, guidkey : Guid*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_unknown.call(this, guidkey, riid, ppv)
  end
  def set_item(this : IMFStreamDescriptor*, guidkey : Guid*, value : PROPVARIANT*) : HRESULT
    @lpVtbl.value.set_item.call(this, guidkey, value)
  end
  def delete_item(this : IMFStreamDescriptor*, guidkey : Guid*) : HRESULT
    @lpVtbl.value.delete_item.call(this, guidkey)
  end
  def delete_all_items(this : IMFStreamDescriptor*) : HRESULT
    @lpVtbl.value.delete_all_items.call(this)
  end
  def set_uint32(this : IMFStreamDescriptor*, guidkey : Guid*, unvalue : UInt32) : HRESULT
    @lpVtbl.value.set_uint32.call(this, guidkey, unvalue)
  end
  def set_uint64(this : IMFStreamDescriptor*, guidkey : Guid*, unvalue : UInt64) : HRESULT
    @lpVtbl.value.set_uint64.call(this, guidkey, unvalue)
  end
  def set_double(this : IMFStreamDescriptor*, guidkey : Guid*, fvalue : Float64) : HRESULT
    @lpVtbl.value.set_double.call(this, guidkey, fvalue)
  end
  def set_guid(this : IMFStreamDescriptor*, guidkey : Guid*, guidvalue : Guid*) : HRESULT
    @lpVtbl.value.set_guid.call(this, guidkey, guidvalue)
  end
  def set_string(this : IMFStreamDescriptor*, guidkey : Guid*, wszvalue : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_string.call(this, guidkey, wszvalue)
  end
  def set_blob(this : IMFStreamDescriptor*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32) : HRESULT
    @lpVtbl.value.set_blob.call(this, guidkey, pbuf, cbbufsize)
  end
  def set_unknown(this : IMFStreamDescriptor*, guidkey : Guid*, punknown : IUnknown) : HRESULT
    @lpVtbl.value.set_unknown.call(this, guidkey, punknown)
  end
  def lock_store(this : IMFStreamDescriptor*) : HRESULT
    @lpVtbl.value.lock_store.call(this)
  end
  def unlock_store(this : IMFStreamDescriptor*) : HRESULT
    @lpVtbl.value.unlock_store.call(this)
  end
  def get_count(this : IMFStreamDescriptor*, pcitems : UInt32*) : HRESULT
    @lpVtbl.value.get_count.call(this, pcitems)
  end
  def get_item_by_index(this : IMFStreamDescriptor*, unindex : UInt32, pguidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item_by_index.call(this, unindex, pguidkey, pvalue)
  end
  def copy_all_items(this : IMFStreamDescriptor*, pdest : IMFAttributes) : HRESULT
    @lpVtbl.value.copy_all_items.call(this, pdest)
  end
  def get_stream_identifier(this : IMFStreamDescriptor*, pdwstreamidentifier : UInt32*) : HRESULT
    @lpVtbl.value.get_stream_identifier.call(this, pdwstreamidentifier)
  end
  def get_media_type_handler(this : IMFStreamDescriptor*, ppmediatypehandler : IMFMediaTypeHandler*) : HRESULT
    @lpVtbl.value.get_media_type_handler.call(this, ppmediatypehandler)
  end
end
struct LibWin32::IMFMediaTypeHandler
  def query_interface(this : IMFMediaTypeHandler*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaTypeHandler*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaTypeHandler*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def is_media_type_supported(this : IMFMediaTypeHandler*, pmediatype : IMFMediaType, ppmediatype : IMFMediaType*) : HRESULT
    @lpVtbl.value.is_media_type_supported.call(this, pmediatype, ppmediatype)
  end
  def get_media_type_count(this : IMFMediaTypeHandler*, pdwtypecount : UInt32*) : HRESULT
    @lpVtbl.value.get_media_type_count.call(this, pdwtypecount)
  end
  def get_media_type_by_index(this : IMFMediaTypeHandler*, dwindex : UInt32, pptype : IMFMediaType*) : HRESULT
    @lpVtbl.value.get_media_type_by_index.call(this, dwindex, pptype)
  end
  def set_current_media_type(this : IMFMediaTypeHandler*, pmediatype : IMFMediaType) : HRESULT
    @lpVtbl.value.set_current_media_type.call(this, pmediatype)
  end
  def get_current_media_type(this : IMFMediaTypeHandler*, ppmediatype : IMFMediaType*) : HRESULT
    @lpVtbl.value.get_current_media_type.call(this, ppmediatype)
  end
  def get_major_type(this : IMFMediaTypeHandler*, pguidmajortype : Guid*) : HRESULT
    @lpVtbl.value.get_major_type.call(this, pguidmajortype)
  end
end
struct LibWin32::IMFTimer
  def query_interface(this : IMFTimer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFTimer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFTimer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_timer(this : IMFTimer*, dwflags : UInt32, llclocktime : Int64, pcallback : IMFAsyncCallback, punkstate : IUnknown, ppunkkey : IUnknown*) : HRESULT
    @lpVtbl.value.set_timer.call(this, dwflags, llclocktime, pcallback, punkstate, ppunkkey)
  end
  def cancel_timer(this : IMFTimer*, punkkey : IUnknown) : HRESULT
    @lpVtbl.value.cancel_timer.call(this, punkkey)
  end
end
struct LibWin32::IMFShutdown
  def query_interface(this : IMFShutdown*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFShutdown*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFShutdown*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def shutdown(this : IMFShutdown*) : HRESULT
    @lpVtbl.value.shutdown.call(this)
  end
  def get_shutdown_status(this : IMFShutdown*, pstatus : MFSHUTDOWN_STATUS*) : HRESULT
    @lpVtbl.value.get_shutdown_status.call(this, pstatus)
  end
end
struct LibWin32::IMFTopoLoader
  def query_interface(this : IMFTopoLoader*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFTopoLoader*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFTopoLoader*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def load(this : IMFTopoLoader*, pinputtopo : IMFTopology, ppoutputtopo : IMFTopology*, pcurrenttopo : IMFTopology) : HRESULT
    @lpVtbl.value.load.call(this, pinputtopo, ppoutputtopo, pcurrenttopo)
  end
end
struct LibWin32::IMFContentProtectionManager
  def query_interface(this : IMFContentProtectionManager*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFContentProtectionManager*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFContentProtectionManager*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def begin_enable_content(this : IMFContentProtectionManager*, penableractivate : IMFActivate, ptopo : IMFTopology, pcallback : IMFAsyncCallback, punkstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_enable_content.call(this, penableractivate, ptopo, pcallback, punkstate)
  end
  def end_enable_content(this : IMFContentProtectionManager*, presult : IMFAsyncResult) : HRESULT
    @lpVtbl.value.end_enable_content.call(this, presult)
  end
end
struct LibWin32::IMFContentEnabler
  def query_interface(this : IMFContentEnabler*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFContentEnabler*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFContentEnabler*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_enable_type(this : IMFContentEnabler*, ptype : Guid*) : HRESULT
    @lpVtbl.value.get_enable_type.call(this, ptype)
  end
  def get_enable_url(this : IMFContentEnabler*, ppwszurl : LibC::LPWSTR*, pcchurl : UInt32*, ptruststatus : MF_URL_TRUST_STATUS*) : HRESULT
    @lpVtbl.value.get_enable_url.call(this, ppwszurl, pcchurl, ptruststatus)
  end
  def get_enable_data(this : IMFContentEnabler*, ppbdata : UInt8**, pcbdata : UInt32*) : HRESULT
    @lpVtbl.value.get_enable_data.call(this, ppbdata, pcbdata)
  end
  def is_automatic_supported(this : IMFContentEnabler*, pfautomatic : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_automatic_supported.call(this, pfautomatic)
  end
  def automatic_enable(this : IMFContentEnabler*) : HRESULT
    @lpVtbl.value.automatic_enable.call(this)
  end
  def monitor_enable(this : IMFContentEnabler*) : HRESULT
    @lpVtbl.value.monitor_enable.call(this)
  end
  def cancel(this : IMFContentEnabler*) : HRESULT
    @lpVtbl.value.cancel.call(this)
  end
end
struct LibWin32::IMFMetadata
  def query_interface(this : IMFMetadata*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMetadata*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMetadata*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_language(this : IMFMetadata*, pwszrfc1766 : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_language.call(this, pwszrfc1766)
  end
  def get_language(this : IMFMetadata*, ppwszrfc1766 : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_language.call(this, ppwszrfc1766)
  end
  def get_all_languages(this : IMFMetadata*, ppvlanguages : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_all_languages.call(this, ppvlanguages)
  end
  def set_property(this : IMFMetadata*, pwszname : LibC::LPWSTR, ppvvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.set_property.call(this, pwszname, ppvvalue)
  end
  def get_property(this : IMFMetadata*, pwszname : LibC::LPWSTR, ppvvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_property.call(this, pwszname, ppvvalue)
  end
  def delete_property(this : IMFMetadata*, pwszname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.delete_property.call(this, pwszname)
  end
  def get_all_property_names(this : IMFMetadata*, ppvnames : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_all_property_names.call(this, ppvnames)
  end
end
struct LibWin32::IMFMetadataProvider
  def query_interface(this : IMFMetadataProvider*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMetadataProvider*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMetadataProvider*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_mf_metadata(this : IMFMetadataProvider*, ppresentationdescriptor : IMFPresentationDescriptor, dwstreamidentifier : UInt32, dwflags : UInt32, ppmfmetadata : IMFMetadata*) : HRESULT
    @lpVtbl.value.get_mf_metadata.call(this, ppresentationdescriptor, dwstreamidentifier, dwflags, ppmfmetadata)
  end
end
struct LibWin32::IMFRateSupport
  def query_interface(this : IMFRateSupport*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFRateSupport*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFRateSupport*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_slowest_rate(this : IMFRateSupport*, edirection : MFRATE_DIRECTION, fthin : LibC::BOOL, pflrate : Float32*) : HRESULT
    @lpVtbl.value.get_slowest_rate.call(this, edirection, fthin, pflrate)
  end
  def get_fastest_rate(this : IMFRateSupport*, edirection : MFRATE_DIRECTION, fthin : LibC::BOOL, pflrate : Float32*) : HRESULT
    @lpVtbl.value.get_fastest_rate.call(this, edirection, fthin, pflrate)
  end
  def is_rate_supported(this : IMFRateSupport*, fthin : LibC::BOOL, flrate : Float32, pflnearestsupportedrate : Float32*) : HRESULT
    @lpVtbl.value.is_rate_supported.call(this, fthin, flrate, pflnearestsupportedrate)
  end
end
struct LibWin32::IMFRateControl
  def query_interface(this : IMFRateControl*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFRateControl*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFRateControl*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_rate(this : IMFRateControl*, fthin : LibC::BOOL, flrate : Float32) : HRESULT
    @lpVtbl.value.set_rate.call(this, fthin, flrate)
  end
  def get_rate(this : IMFRateControl*, pfthin : LibC::BOOL*, pflrate : Float32*) : HRESULT
    @lpVtbl.value.get_rate.call(this, pfthin, pflrate)
  end
end
struct LibWin32::IMFTimecodeTranslate
  def query_interface(this : IMFTimecodeTranslate*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFTimecodeTranslate*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFTimecodeTranslate*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def begin_convert_timecode_to_hns(this : IMFTimecodeTranslate*, ppropvartimecode : PROPVARIANT*, pcallback : IMFAsyncCallback, punkstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_convert_timecode_to_hns.call(this, ppropvartimecode, pcallback, punkstate)
  end
  def end_convert_timecode_to_hns(this : IMFTimecodeTranslate*, presult : IMFAsyncResult, phnstime : Int64*) : HRESULT
    @lpVtbl.value.end_convert_timecode_to_hns.call(this, presult, phnstime)
  end
  def begin_convert_hns_to_timecode(this : IMFTimecodeTranslate*, hnstime : Int64, pcallback : IMFAsyncCallback, punkstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_convert_hns_to_timecode.call(this, hnstime, pcallback, punkstate)
  end
  def end_convert_hns_to_timecode(this : IMFTimecodeTranslate*, presult : IMFAsyncResult, ppropvartimecode : PROPVARIANT*) : HRESULT
    @lpVtbl.value.end_convert_hns_to_timecode.call(this, presult, ppropvartimecode)
  end
end
struct LibWin32::IMFSeekInfo
  def query_interface(this : IMFSeekInfo*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSeekInfo*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSeekInfo*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_nearest_key_frames(this : IMFSeekInfo*, pguidtimeformat : Guid*, pvarstartposition : PROPVARIANT*, pvarpreviouskeyframe : PROPVARIANT*, pvarnextkeyframe : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_nearest_key_frames.call(this, pguidtimeformat, pvarstartposition, pvarpreviouskeyframe, pvarnextkeyframe)
  end
end
struct LibWin32::IMFSimpleAudioVolume
  def query_interface(this : IMFSimpleAudioVolume*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSimpleAudioVolume*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSimpleAudioVolume*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_master_volume(this : IMFSimpleAudioVolume*, flevel : Float32) : HRESULT
    @lpVtbl.value.set_master_volume.call(this, flevel)
  end
  def get_master_volume(this : IMFSimpleAudioVolume*, pflevel : Float32*) : HRESULT
    @lpVtbl.value.get_master_volume.call(this, pflevel)
  end
  def set_mute(this : IMFSimpleAudioVolume*, bmute : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_mute.call(this, bmute)
  end
  def get_mute(this : IMFSimpleAudioVolume*, pbmute : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_mute.call(this, pbmute)
  end
end
struct LibWin32::IMFAudioStreamVolume
  def query_interface(this : IMFAudioStreamVolume*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFAudioStreamVolume*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFAudioStreamVolume*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_channel_count(this : IMFAudioStreamVolume*, pdwcount : UInt32*) : HRESULT
    @lpVtbl.value.get_channel_count.call(this, pdwcount)
  end
  def set_channel_volume(this : IMFAudioStreamVolume*, dwindex : UInt32, flevel : Float32) : HRESULT
    @lpVtbl.value.set_channel_volume.call(this, dwindex, flevel)
  end
  def get_channel_volume(this : IMFAudioStreamVolume*, dwindex : UInt32, pflevel : Float32*) : HRESULT
    @lpVtbl.value.get_channel_volume.call(this, dwindex, pflevel)
  end
  def set_all_volumes(this : IMFAudioStreamVolume*, dwcount : UInt32, pfvolumes : Float32*) : HRESULT
    @lpVtbl.value.set_all_volumes.call(this, dwcount, pfvolumes)
  end
  def get_all_volumes(this : IMFAudioStreamVolume*, dwcount : UInt32, pfvolumes : Float32*) : HRESULT
    @lpVtbl.value.get_all_volumes.call(this, dwcount, pfvolumes)
  end
end
struct LibWin32::IMFAudioPolicy
  def query_interface(this : IMFAudioPolicy*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFAudioPolicy*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFAudioPolicy*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_grouping_param(this : IMFAudioPolicy*, rguidclass : Guid*) : HRESULT
    @lpVtbl.value.set_grouping_param.call(this, rguidclass)
  end
  def get_grouping_param(this : IMFAudioPolicy*, pguidclass : Guid*) : HRESULT
    @lpVtbl.value.get_grouping_param.call(this, pguidclass)
  end
  def set_display_name(this : IMFAudioPolicy*, pszname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_display_name.call(this, pszname)
  end
  def get_display_name(this : IMFAudioPolicy*, pszname : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_display_name.call(this, pszname)
  end
  def set_icon_path(this : IMFAudioPolicy*, pszpath : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_icon_path.call(this, pszpath)
  end
  def get_icon_path(this : IMFAudioPolicy*, pszpath : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_icon_path.call(this, pszpath)
  end
end
struct LibWin32::IMFSampleGrabberSinkCallback
  def query_interface(this : IMFSampleGrabberSinkCallback*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSampleGrabberSinkCallback*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSampleGrabberSinkCallback*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_clock_start(this : IMFSampleGrabberSinkCallback*, hnssystemtime : Int64, llclockstartoffset : Int64) : HRESULT
    @lpVtbl.value.on_clock_start.call(this, hnssystemtime, llclockstartoffset)
  end
  def on_clock_stop(this : IMFSampleGrabberSinkCallback*, hnssystemtime : Int64) : HRESULT
    @lpVtbl.value.on_clock_stop.call(this, hnssystemtime)
  end
  def on_clock_pause(this : IMFSampleGrabberSinkCallback*, hnssystemtime : Int64) : HRESULT
    @lpVtbl.value.on_clock_pause.call(this, hnssystemtime)
  end
  def on_clock_restart(this : IMFSampleGrabberSinkCallback*, hnssystemtime : Int64) : HRESULT
    @lpVtbl.value.on_clock_restart.call(this, hnssystemtime)
  end
  def on_clock_set_rate(this : IMFSampleGrabberSinkCallback*, hnssystemtime : Int64, flrate : Float32) : HRESULT
    @lpVtbl.value.on_clock_set_rate.call(this, hnssystemtime, flrate)
  end
  def on_set_presentation_clock(this : IMFSampleGrabberSinkCallback*, ppresentationclock : IMFPresentationClock) : HRESULT
    @lpVtbl.value.on_set_presentation_clock.call(this, ppresentationclock)
  end
  def on_process_sample(this : IMFSampleGrabberSinkCallback*, guidmajormediatype : Guid*, dwsampleflags : UInt32, llsampletime : Int64, llsampleduration : Int64, psamplebuffer : UInt8*, dwsamplesize : UInt32) : HRESULT
    @lpVtbl.value.on_process_sample.call(this, guidmajormediatype, dwsampleflags, llsampletime, llsampleduration, psamplebuffer, dwsamplesize)
  end
  def on_shutdown(this : IMFSampleGrabberSinkCallback*) : HRESULT
    @lpVtbl.value.on_shutdown.call(this)
  end
end
struct LibWin32::IMFSampleGrabberSinkCallback2
  def query_interface(this : IMFSampleGrabberSinkCallback2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSampleGrabberSinkCallback2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSampleGrabberSinkCallback2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_clock_start(this : IMFSampleGrabberSinkCallback2*, hnssystemtime : Int64, llclockstartoffset : Int64) : HRESULT
    @lpVtbl.value.on_clock_start.call(this, hnssystemtime, llclockstartoffset)
  end
  def on_clock_stop(this : IMFSampleGrabberSinkCallback2*, hnssystemtime : Int64) : HRESULT
    @lpVtbl.value.on_clock_stop.call(this, hnssystemtime)
  end
  def on_clock_pause(this : IMFSampleGrabberSinkCallback2*, hnssystemtime : Int64) : HRESULT
    @lpVtbl.value.on_clock_pause.call(this, hnssystemtime)
  end
  def on_clock_restart(this : IMFSampleGrabberSinkCallback2*, hnssystemtime : Int64) : HRESULT
    @lpVtbl.value.on_clock_restart.call(this, hnssystemtime)
  end
  def on_clock_set_rate(this : IMFSampleGrabberSinkCallback2*, hnssystemtime : Int64, flrate : Float32) : HRESULT
    @lpVtbl.value.on_clock_set_rate.call(this, hnssystemtime, flrate)
  end
  def on_set_presentation_clock(this : IMFSampleGrabberSinkCallback2*, ppresentationclock : IMFPresentationClock) : HRESULT
    @lpVtbl.value.on_set_presentation_clock.call(this, ppresentationclock)
  end
  def on_process_sample(this : IMFSampleGrabberSinkCallback2*, guidmajormediatype : Guid*, dwsampleflags : UInt32, llsampletime : Int64, llsampleduration : Int64, psamplebuffer : UInt8*, dwsamplesize : UInt32) : HRESULT
    @lpVtbl.value.on_process_sample.call(this, guidmajormediatype, dwsampleflags, llsampletime, llsampleduration, psamplebuffer, dwsamplesize)
  end
  def on_shutdown(this : IMFSampleGrabberSinkCallback2*) : HRESULT
    @lpVtbl.value.on_shutdown.call(this)
  end
  def on_process_sample_ex(this : IMFSampleGrabberSinkCallback2*, guidmajormediatype : Guid*, dwsampleflags : UInt32, llsampletime : Int64, llsampleduration : Int64, psamplebuffer : UInt8*, dwsamplesize : UInt32, pattributes : IMFAttributes) : HRESULT
    @lpVtbl.value.on_process_sample_ex.call(this, guidmajormediatype, dwsampleflags, llsampletime, llsampleduration, psamplebuffer, dwsamplesize, pattributes)
  end
end
struct LibWin32::IMFWorkQueueServices
  def query_interface(this : IMFWorkQueueServices*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFWorkQueueServices*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFWorkQueueServices*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def begin_register_topology_work_queues_with_mmcss(this : IMFWorkQueueServices*, pcallback : IMFAsyncCallback, pstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_register_topology_work_queues_with_mmcss.call(this, pcallback, pstate)
  end
  def end_register_topology_work_queues_with_mmcss(this : IMFWorkQueueServices*, presult : IMFAsyncResult) : HRESULT
    @lpVtbl.value.end_register_topology_work_queues_with_mmcss.call(this, presult)
  end
  def begin_unregister_topology_work_queues_with_mmcss(this : IMFWorkQueueServices*, pcallback : IMFAsyncCallback, pstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_unregister_topology_work_queues_with_mmcss.call(this, pcallback, pstate)
  end
  def end_unregister_topology_work_queues_with_mmcss(this : IMFWorkQueueServices*, presult : IMFAsyncResult) : HRESULT
    @lpVtbl.value.end_unregister_topology_work_queues_with_mmcss.call(this, presult)
  end
  def get_topology_work_queue_mmcss_class(this : IMFWorkQueueServices*, dwtopologyworkqueueid : UInt32, pwszclass : Char*, pcchclass : UInt32*) : HRESULT
    @lpVtbl.value.get_topology_work_queue_mmcss_class.call(this, dwtopologyworkqueueid, pwszclass, pcchclass)
  end
  def get_topology_work_queue_mmcss_task_id(this : IMFWorkQueueServices*, dwtopologyworkqueueid : UInt32, pdwtaskid : UInt32*) : HRESULT
    @lpVtbl.value.get_topology_work_queue_mmcss_task_id.call(this, dwtopologyworkqueueid, pdwtaskid)
  end
  def begin_register_platform_work_queue_with_mmcss(this : IMFWorkQueueServices*, dwplatformworkqueue : UInt32, wszclass : LibC::LPWSTR, dwtaskid : UInt32, pcallback : IMFAsyncCallback, pstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_register_platform_work_queue_with_mmcss.call(this, dwplatformworkqueue, wszclass, dwtaskid, pcallback, pstate)
  end
  def end_register_platform_work_queue_with_mmcss(this : IMFWorkQueueServices*, presult : IMFAsyncResult, pdwtaskid : UInt32*) : HRESULT
    @lpVtbl.value.end_register_platform_work_queue_with_mmcss.call(this, presult, pdwtaskid)
  end
  def begin_unregister_platform_work_queue_with_mmcss(this : IMFWorkQueueServices*, dwplatformworkqueue : UInt32, pcallback : IMFAsyncCallback, pstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_unregister_platform_work_queue_with_mmcss.call(this, dwplatformworkqueue, pcallback, pstate)
  end
  def end_unregister_platform_work_queue_with_mmcss(this : IMFWorkQueueServices*, presult : IMFAsyncResult) : HRESULT
    @lpVtbl.value.end_unregister_platform_work_queue_with_mmcss.call(this, presult)
  end
  def get_plaftorm_work_queue_mmcss_class(this : IMFWorkQueueServices*, dwplatformworkqueueid : UInt32, pwszclass : Char*, pcchclass : UInt32*) : HRESULT
    @lpVtbl.value.get_plaftorm_work_queue_mmcss_class.call(this, dwplatformworkqueueid, pwszclass, pcchclass)
  end
  def get_platform_work_queue_mmcss_task_id(this : IMFWorkQueueServices*, dwplatformworkqueueid : UInt32, pdwtaskid : UInt32*) : HRESULT
    @lpVtbl.value.get_platform_work_queue_mmcss_task_id.call(this, dwplatformworkqueueid, pdwtaskid)
  end
end
struct LibWin32::IMFWorkQueueServicesEx
  def query_interface(this : IMFWorkQueueServicesEx*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFWorkQueueServicesEx*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFWorkQueueServicesEx*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def begin_register_topology_work_queues_with_mmcss(this : IMFWorkQueueServicesEx*, pcallback : IMFAsyncCallback, pstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_register_topology_work_queues_with_mmcss.call(this, pcallback, pstate)
  end
  def end_register_topology_work_queues_with_mmcss(this : IMFWorkQueueServicesEx*, presult : IMFAsyncResult) : HRESULT
    @lpVtbl.value.end_register_topology_work_queues_with_mmcss.call(this, presult)
  end
  def begin_unregister_topology_work_queues_with_mmcss(this : IMFWorkQueueServicesEx*, pcallback : IMFAsyncCallback, pstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_unregister_topology_work_queues_with_mmcss.call(this, pcallback, pstate)
  end
  def end_unregister_topology_work_queues_with_mmcss(this : IMFWorkQueueServicesEx*, presult : IMFAsyncResult) : HRESULT
    @lpVtbl.value.end_unregister_topology_work_queues_with_mmcss.call(this, presult)
  end
  def get_topology_work_queue_mmcss_class(this : IMFWorkQueueServicesEx*, dwtopologyworkqueueid : UInt32, pwszclass : Char*, pcchclass : UInt32*) : HRESULT
    @lpVtbl.value.get_topology_work_queue_mmcss_class.call(this, dwtopologyworkqueueid, pwszclass, pcchclass)
  end
  def get_topology_work_queue_mmcss_task_id(this : IMFWorkQueueServicesEx*, dwtopologyworkqueueid : UInt32, pdwtaskid : UInt32*) : HRESULT
    @lpVtbl.value.get_topology_work_queue_mmcss_task_id.call(this, dwtopologyworkqueueid, pdwtaskid)
  end
  def begin_register_platform_work_queue_with_mmcss(this : IMFWorkQueueServicesEx*, dwplatformworkqueue : UInt32, wszclass : LibC::LPWSTR, dwtaskid : UInt32, pcallback : IMFAsyncCallback, pstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_register_platform_work_queue_with_mmcss.call(this, dwplatformworkqueue, wszclass, dwtaskid, pcallback, pstate)
  end
  def end_register_platform_work_queue_with_mmcss(this : IMFWorkQueueServicesEx*, presult : IMFAsyncResult, pdwtaskid : UInt32*) : HRESULT
    @lpVtbl.value.end_register_platform_work_queue_with_mmcss.call(this, presult, pdwtaskid)
  end
  def begin_unregister_platform_work_queue_with_mmcss(this : IMFWorkQueueServicesEx*, dwplatformworkqueue : UInt32, pcallback : IMFAsyncCallback, pstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_unregister_platform_work_queue_with_mmcss.call(this, dwplatformworkqueue, pcallback, pstate)
  end
  def end_unregister_platform_work_queue_with_mmcss(this : IMFWorkQueueServicesEx*, presult : IMFAsyncResult) : HRESULT
    @lpVtbl.value.end_unregister_platform_work_queue_with_mmcss.call(this, presult)
  end
  def get_plaftorm_work_queue_mmcss_class(this : IMFWorkQueueServicesEx*, dwplatformworkqueueid : UInt32, pwszclass : Char*, pcchclass : UInt32*) : HRESULT
    @lpVtbl.value.get_plaftorm_work_queue_mmcss_class.call(this, dwplatformworkqueueid, pwszclass, pcchclass)
  end
  def get_platform_work_queue_mmcss_task_id(this : IMFWorkQueueServicesEx*, dwplatformworkqueueid : UInt32, pdwtaskid : UInt32*) : HRESULT
    @lpVtbl.value.get_platform_work_queue_mmcss_task_id.call(this, dwplatformworkqueueid, pdwtaskid)
  end
  def get_topology_work_queue_mmcss_priority(this : IMFWorkQueueServicesEx*, dwtopologyworkqueueid : UInt32, plpriority : Int32*) : HRESULT
    @lpVtbl.value.get_topology_work_queue_mmcss_priority.call(this, dwtopologyworkqueueid, plpriority)
  end
  def begin_register_platform_work_queue_with_mmcss_ex(this : IMFWorkQueueServicesEx*, dwplatformworkqueue : UInt32, wszclass : LibC::LPWSTR, dwtaskid : UInt32, lpriority : Int32, pcallback : IMFAsyncCallback, pstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_register_platform_work_queue_with_mmcss_ex.call(this, dwplatformworkqueue, wszclass, dwtaskid, lpriority, pcallback, pstate)
  end
  def get_platform_work_queue_mmcss_priority(this : IMFWorkQueueServicesEx*, dwplatformworkqueueid : UInt32, plpriority : Int32*) : HRESULT
    @lpVtbl.value.get_platform_work_queue_mmcss_priority.call(this, dwplatformworkqueueid, plpriority)
  end
end
struct LibWin32::IMFQualityManager
  def query_interface(this : IMFQualityManager*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFQualityManager*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFQualityManager*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def notify_topology(this : IMFQualityManager*, ptopology : IMFTopology) : HRESULT
    @lpVtbl.value.notify_topology.call(this, ptopology)
  end
  def notify_presentation_clock(this : IMFQualityManager*, pclock : IMFPresentationClock) : HRESULT
    @lpVtbl.value.notify_presentation_clock.call(this, pclock)
  end
  def notify_process_input(this : IMFQualityManager*, pnode : IMFTopologyNode, linputindex : Int32, psample : IMFSample) : HRESULT
    @lpVtbl.value.notify_process_input.call(this, pnode, linputindex, psample)
  end
  def notify_process_output(this : IMFQualityManager*, pnode : IMFTopologyNode, loutputindex : Int32, psample : IMFSample) : HRESULT
    @lpVtbl.value.notify_process_output.call(this, pnode, loutputindex, psample)
  end
  def notify_quality_event(this : IMFQualityManager*, pobject : IUnknown, pevent : IMFMediaEvent) : HRESULT
    @lpVtbl.value.notify_quality_event.call(this, pobject, pevent)
  end
  def shutdown(this : IMFQualityManager*) : HRESULT
    @lpVtbl.value.shutdown.call(this)
  end
end
struct LibWin32::IMFQualityAdvise
  def query_interface(this : IMFQualityAdvise*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFQualityAdvise*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFQualityAdvise*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_drop_mode(this : IMFQualityAdvise*, edropmode : MF_QUALITY_DROP_MODE) : HRESULT
    @lpVtbl.value.set_drop_mode.call(this, edropmode)
  end
  def set_quality_level(this : IMFQualityAdvise*, equalitylevel : MF_QUALITY_LEVEL) : HRESULT
    @lpVtbl.value.set_quality_level.call(this, equalitylevel)
  end
  def get_drop_mode(this : IMFQualityAdvise*, pedropmode : MF_QUALITY_DROP_MODE*) : HRESULT
    @lpVtbl.value.get_drop_mode.call(this, pedropmode)
  end
  def get_quality_level(this : IMFQualityAdvise*, pequalitylevel : MF_QUALITY_LEVEL*) : HRESULT
    @lpVtbl.value.get_quality_level.call(this, pequalitylevel)
  end
  def drop_time(this : IMFQualityAdvise*, hnsamounttodrop : Int64) : HRESULT
    @lpVtbl.value.drop_time.call(this, hnsamounttodrop)
  end
end
struct LibWin32::IMFQualityAdvise2
  def query_interface(this : IMFQualityAdvise2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFQualityAdvise2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFQualityAdvise2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_drop_mode(this : IMFQualityAdvise2*, edropmode : MF_QUALITY_DROP_MODE) : HRESULT
    @lpVtbl.value.set_drop_mode.call(this, edropmode)
  end
  def set_quality_level(this : IMFQualityAdvise2*, equalitylevel : MF_QUALITY_LEVEL) : HRESULT
    @lpVtbl.value.set_quality_level.call(this, equalitylevel)
  end
  def get_drop_mode(this : IMFQualityAdvise2*, pedropmode : MF_QUALITY_DROP_MODE*) : HRESULT
    @lpVtbl.value.get_drop_mode.call(this, pedropmode)
  end
  def get_quality_level(this : IMFQualityAdvise2*, pequalitylevel : MF_QUALITY_LEVEL*) : HRESULT
    @lpVtbl.value.get_quality_level.call(this, pequalitylevel)
  end
  def drop_time(this : IMFQualityAdvise2*, hnsamounttodrop : Int64) : HRESULT
    @lpVtbl.value.drop_time.call(this, hnsamounttodrop)
  end
  def notify_quality_event(this : IMFQualityAdvise2*, pevent : IMFMediaEvent, pdwflags : UInt32*) : HRESULT
    @lpVtbl.value.notify_quality_event.call(this, pevent, pdwflags)
  end
end
struct LibWin32::IMFQualityAdviseLimits
  def query_interface(this : IMFQualityAdviseLimits*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFQualityAdviseLimits*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFQualityAdviseLimits*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_maximum_drop_mode(this : IMFQualityAdviseLimits*, pedropmode : MF_QUALITY_DROP_MODE*) : HRESULT
    @lpVtbl.value.get_maximum_drop_mode.call(this, pedropmode)
  end
  def get_minimum_quality_level(this : IMFQualityAdviseLimits*, pequalitylevel : MF_QUALITY_LEVEL*) : HRESULT
    @lpVtbl.value.get_minimum_quality_level.call(this, pequalitylevel)
  end
end
struct LibWin32::IMFRealTimeClient
  def query_interface(this : IMFRealTimeClient*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFRealTimeClient*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFRealTimeClient*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def register_threads(this : IMFRealTimeClient*, dwtaskindex : UInt32, wszclass : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.register_threads.call(this, dwtaskindex, wszclass)
  end
  def unregister_threads(this : IMFRealTimeClient*) : HRESULT
    @lpVtbl.value.unregister_threads.call(this)
  end
  def set_work_queue(this : IMFRealTimeClient*, dwworkqueueid : UInt32) : HRESULT
    @lpVtbl.value.set_work_queue.call(this, dwworkqueueid)
  end
end
struct LibWin32::IMFRealTimeClientEx
  def query_interface(this : IMFRealTimeClientEx*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFRealTimeClientEx*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFRealTimeClientEx*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def register_threads_ex(this : IMFRealTimeClientEx*, pdwtaskindex : UInt32*, wszclassname : LibC::LPWSTR, lbasepriority : Int32) : HRESULT
    @lpVtbl.value.register_threads_ex.call(this, pdwtaskindex, wszclassname, lbasepriority)
  end
  def unregister_threads(this : IMFRealTimeClientEx*) : HRESULT
    @lpVtbl.value.unregister_threads.call(this)
  end
  def set_work_queue_ex(this : IMFRealTimeClientEx*, dwmultithreadedworkqueueid : UInt32, lworkitembasepriority : Int32) : HRESULT
    @lpVtbl.value.set_work_queue_ex.call(this, dwmultithreadedworkqueueid, lworkitembasepriority)
  end
end
struct LibWin32::IMFSequencerSource
  def query_interface(this : IMFSequencerSource*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSequencerSource*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSequencerSource*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def append_topology(this : IMFSequencerSource*, ptopology : IMFTopology, dwflags : UInt32, pdwid : UInt32*) : HRESULT
    @lpVtbl.value.append_topology.call(this, ptopology, dwflags, pdwid)
  end
  def delete_topology(this : IMFSequencerSource*, dwid : UInt32) : HRESULT
    @lpVtbl.value.delete_topology.call(this, dwid)
  end
  def get_presentation_context(this : IMFSequencerSource*, ppd : IMFPresentationDescriptor, pid : UInt32*, pptopology : IMFTopology*) : HRESULT
    @lpVtbl.value.get_presentation_context.call(this, ppd, pid, pptopology)
  end
  def update_topology(this : IMFSequencerSource*, dwid : UInt32, ptopology : IMFTopology) : HRESULT
    @lpVtbl.value.update_topology.call(this, dwid, ptopology)
  end
  def update_topology_flags(this : IMFSequencerSource*, dwid : UInt32, dwflags : UInt32) : HRESULT
    @lpVtbl.value.update_topology_flags.call(this, dwid, dwflags)
  end
end
struct LibWin32::IMFMediaSourceTopologyProvider
  def query_interface(this : IMFMediaSourceTopologyProvider*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaSourceTopologyProvider*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaSourceTopologyProvider*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_media_source_topology(this : IMFMediaSourceTopologyProvider*, ppresentationdescriptor : IMFPresentationDescriptor, pptopology : IMFTopology*) : HRESULT
    @lpVtbl.value.get_media_source_topology.call(this, ppresentationdescriptor, pptopology)
  end
end
struct LibWin32::IMFMediaSourcePresentationProvider
  def query_interface(this : IMFMediaSourcePresentationProvider*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaSourcePresentationProvider*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaSourcePresentationProvider*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def force_end_of_presentation(this : IMFMediaSourcePresentationProvider*, ppresentationdescriptor : IMFPresentationDescriptor) : HRESULT
    @lpVtbl.value.force_end_of_presentation.call(this, ppresentationdescriptor)
  end
end
struct LibWin32::IMFTopologyNodeAttributeEditor
  def query_interface(this : IMFTopologyNodeAttributeEditor*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFTopologyNodeAttributeEditor*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFTopologyNodeAttributeEditor*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def update_node_attributes(this : IMFTopologyNodeAttributeEditor*, topoid : UInt64, cupdates : UInt32, pupdates : MFTOPONODE_ATTRIBUTE_UPDATE*) : HRESULT
    @lpVtbl.value.update_node_attributes.call(this, topoid, cupdates, pupdates)
  end
end
struct LibWin32::IMFByteStreamBuffering
  def query_interface(this : IMFByteStreamBuffering*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFByteStreamBuffering*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFByteStreamBuffering*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_buffering_params(this : IMFByteStreamBuffering*, pparams : MFBYTESTREAM_BUFFERING_PARAMS*) : HRESULT
    @lpVtbl.value.set_buffering_params.call(this, pparams)
  end
  def enable_buffering(this : IMFByteStreamBuffering*, fenable : LibC::BOOL) : HRESULT
    @lpVtbl.value.enable_buffering.call(this, fenable)
  end
  def stop_buffering(this : IMFByteStreamBuffering*) : HRESULT
    @lpVtbl.value.stop_buffering.call(this)
  end
end
struct LibWin32::IMFByteStreamCacheControl
  def query_interface(this : IMFByteStreamCacheControl*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFByteStreamCacheControl*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFByteStreamCacheControl*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def stop_background_transfer(this : IMFByteStreamCacheControl*) : HRESULT
    @lpVtbl.value.stop_background_transfer.call(this)
  end
end
struct LibWin32::IMFByteStreamTimeSeek
  def query_interface(this : IMFByteStreamTimeSeek*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFByteStreamTimeSeek*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFByteStreamTimeSeek*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def is_time_seek_supported(this : IMFByteStreamTimeSeek*, pftimeseekissupported : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_time_seek_supported.call(this, pftimeseekissupported)
  end
  def time_seek(this : IMFByteStreamTimeSeek*, qwtimeposition : UInt64) : HRESULT
    @lpVtbl.value.time_seek.call(this, qwtimeposition)
  end
  def get_time_seek_result(this : IMFByteStreamTimeSeek*, pqwstarttime : UInt64*, pqwstoptime : UInt64*, pqwduration : UInt64*) : HRESULT
    @lpVtbl.value.get_time_seek_result.call(this, pqwstarttime, pqwstoptime, pqwduration)
  end
end
struct LibWin32::IMFByteStreamCacheControl2
  def query_interface(this : IMFByteStreamCacheControl2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFByteStreamCacheControl2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFByteStreamCacheControl2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def stop_background_transfer(this : IMFByteStreamCacheControl2*) : HRESULT
    @lpVtbl.value.stop_background_transfer.call(this)
  end
  def get_byte_ranges(this : IMFByteStreamCacheControl2*, pcranges : UInt32*, ppranges : MF_BYTE_STREAM_CACHE_RANGE**) : HRESULT
    @lpVtbl.value.get_byte_ranges.call(this, pcranges, ppranges)
  end
  def set_cache_limit(this : IMFByteStreamCacheControl2*, qwbytes : UInt64) : HRESULT
    @lpVtbl.value.set_cache_limit.call(this, qwbytes)
  end
  def is_background_transfer_active(this : IMFByteStreamCacheControl2*, pfactive : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_background_transfer_active.call(this, pfactive)
  end
end
struct LibWin32::IMFNetCredential
  def query_interface(this : IMFNetCredential*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFNetCredential*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFNetCredential*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_user(this : IMFNetCredential*, pbdata : UInt8*, cbdata : UInt32, fdataisencrypted : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_user.call(this, pbdata, cbdata, fdataisencrypted)
  end
  def set_password(this : IMFNetCredential*, pbdata : UInt8*, cbdata : UInt32, fdataisencrypted : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_password.call(this, pbdata, cbdata, fdataisencrypted)
  end
  def get_user(this : IMFNetCredential*, pbdata : UInt8*, pcbdata : UInt32*, fencryptdata : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_user.call(this, pbdata, pcbdata, fencryptdata)
  end
  def get_password(this : IMFNetCredential*, pbdata : UInt8*, pcbdata : UInt32*, fencryptdata : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_password.call(this, pbdata, pcbdata, fencryptdata)
  end
  def logged_on_user(this : IMFNetCredential*, pfloggedonuser : LibC::BOOL*) : HRESULT
    @lpVtbl.value.logged_on_user.call(this, pfloggedonuser)
  end
end
struct LibWin32::IMFNetCredentialManager
  def query_interface(this : IMFNetCredentialManager*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFNetCredentialManager*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFNetCredentialManager*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def begin_get_credentials(this : IMFNetCredentialManager*, pparam : MFNetCredentialManagerGetParam*, pcallback : IMFAsyncCallback, pstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_get_credentials.call(this, pparam, pcallback, pstate)
  end
  def end_get_credentials(this : IMFNetCredentialManager*, presult : IMFAsyncResult, ppcred : IMFNetCredential*) : HRESULT
    @lpVtbl.value.end_get_credentials.call(this, presult, ppcred)
  end
  def set_good(this : IMFNetCredentialManager*, pcred : IMFNetCredential, fgood : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_good.call(this, pcred, fgood)
  end
end
struct LibWin32::IMFNetCredentialCache
  def query_interface(this : IMFNetCredentialCache*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFNetCredentialCache*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFNetCredentialCache*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_credential(this : IMFNetCredentialCache*, pszurl : LibC::LPWSTR, pszrealm : LibC::LPWSTR, dwauthenticationflags : UInt32, ppcred : IMFNetCredential*, pdwrequirementsflags : UInt32*) : HRESULT
    @lpVtbl.value.get_credential.call(this, pszurl, pszrealm, dwauthenticationflags, ppcred, pdwrequirementsflags)
  end
  def set_good(this : IMFNetCredentialCache*, pcred : IMFNetCredential, fgood : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_good.call(this, pcred, fgood)
  end
  def set_user_options(this : IMFNetCredentialCache*, pcred : IMFNetCredential, dwoptionsflags : UInt32) : HRESULT
    @lpVtbl.value.set_user_options.call(this, pcred, dwoptionsflags)
  end
end
struct LibWin32::IMFSSLCertificateManager
  def query_interface(this : IMFSSLCertificateManager*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSSLCertificateManager*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSSLCertificateManager*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_client_certificate(this : IMFSSLCertificateManager*, pszurl : LibC::LPWSTR, ppbdata : UInt8**, pcbdata : UInt32*) : HRESULT
    @lpVtbl.value.get_client_certificate.call(this, pszurl, ppbdata, pcbdata)
  end
  def begin_get_client_certificate(this : IMFSSLCertificateManager*, pszurl : LibC::LPWSTR, pcallback : IMFAsyncCallback, pstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_get_client_certificate.call(this, pszurl, pcallback, pstate)
  end
  def end_get_client_certificate(this : IMFSSLCertificateManager*, presult : IMFAsyncResult, ppbdata : UInt8**, pcbdata : UInt32*) : HRESULT
    @lpVtbl.value.end_get_client_certificate.call(this, presult, ppbdata, pcbdata)
  end
  def get_certificate_policy(this : IMFSSLCertificateManager*, pszurl : LibC::LPWSTR, pfoverrideautomaticcheck : LibC::BOOL*, pfclientcertificateavailable : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_certificate_policy.call(this, pszurl, pfoverrideautomaticcheck, pfclientcertificateavailable)
  end
  def on_server_certificate(this : IMFSSLCertificateManager*, pszurl : LibC::LPWSTR, pbdata : UInt8*, cbdata : UInt32, pfisgood : LibC::BOOL*) : HRESULT
    @lpVtbl.value.on_server_certificate.call(this, pszurl, pbdata, cbdata, pfisgood)
  end
end
struct LibWin32::IMFNetResourceFilter
  def query_interface(this : IMFNetResourceFilter*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFNetResourceFilter*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFNetResourceFilter*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_redirect(this : IMFNetResourceFilter*, pszurl : LibC::LPWSTR, pvbcancel : Int16*) : HRESULT
    @lpVtbl.value.on_redirect.call(this, pszurl, pvbcancel)
  end
  def on_sending_request(this : IMFNetResourceFilter*, pszurl : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.on_sending_request.call(this, pszurl)
  end
end
struct LibWin32::IMFSourceOpenMonitor
  def query_interface(this : IMFSourceOpenMonitor*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSourceOpenMonitor*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSourceOpenMonitor*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_source_event(this : IMFSourceOpenMonitor*, pevent : IMFMediaEvent) : HRESULT
    @lpVtbl.value.on_source_event.call(this, pevent)
  end
end
struct LibWin32::IMFNetProxyLocator
  def query_interface(this : IMFNetProxyLocator*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFNetProxyLocator*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFNetProxyLocator*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def find_first_proxy(this : IMFNetProxyLocator*, pszhost : LibC::LPWSTR, pszurl : LibC::LPWSTR, freserved : LibC::BOOL) : HRESULT
    @lpVtbl.value.find_first_proxy.call(this, pszhost, pszurl, freserved)
  end
  def find_next_proxy(this : IMFNetProxyLocator*) : HRESULT
    @lpVtbl.value.find_next_proxy.call(this)
  end
  def register_proxy_result(this : IMFNetProxyLocator*, hrop : HRESULT) : HRESULT
    @lpVtbl.value.register_proxy_result.call(this, hrop)
  end
  def get_current_proxy(this : IMFNetProxyLocator*, pszstr : Char*, pcchstr : UInt32*) : HRESULT
    @lpVtbl.value.get_current_proxy.call(this, pszstr, pcchstr)
  end
  def clone(this : IMFNetProxyLocator*, ppproxylocator : IMFNetProxyLocator*) : HRESULT
    @lpVtbl.value.clone.call(this, ppproxylocator)
  end
end
struct LibWin32::IMFNetProxyLocatorFactory
  def query_interface(this : IMFNetProxyLocatorFactory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFNetProxyLocatorFactory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFNetProxyLocatorFactory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_proxy_locator(this : IMFNetProxyLocatorFactory*, pszprotocol : LibC::LPWSTR, ppproxylocator : IMFNetProxyLocator*) : HRESULT
    @lpVtbl.value.create_proxy_locator.call(this, pszprotocol, ppproxylocator)
  end
end
struct LibWin32::IMFSaveJob
  def query_interface(this : IMFSaveJob*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSaveJob*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSaveJob*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def begin_save(this : IMFSaveJob*, pstream : IMFByteStream, pcallback : IMFAsyncCallback, pstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_save.call(this, pstream, pcallback, pstate)
  end
  def end_save(this : IMFSaveJob*, presult : IMFAsyncResult) : HRESULT
    @lpVtbl.value.end_save.call(this, presult)
  end
  def cancel_save(this : IMFSaveJob*) : HRESULT
    @lpVtbl.value.cancel_save.call(this)
  end
  def get_progress(this : IMFSaveJob*, pdwpercentcomplete : UInt32*) : HRESULT
    @lpVtbl.value.get_progress.call(this, pdwpercentcomplete)
  end
end
struct LibWin32::IMFNetSchemeHandlerConfig
  def query_interface(this : IMFNetSchemeHandlerConfig*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFNetSchemeHandlerConfig*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFNetSchemeHandlerConfig*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_number_of_supported_protocols(this : IMFNetSchemeHandlerConfig*, pcprotocols : UInt32*) : HRESULT
    @lpVtbl.value.get_number_of_supported_protocols.call(this, pcprotocols)
  end
  def get_supported_protocol_type(this : IMFNetSchemeHandlerConfig*, nprotocolindex : UInt32, pnprotocoltype : MFNETSOURCE_PROTOCOL_TYPE*) : HRESULT
    @lpVtbl.value.get_supported_protocol_type.call(this, nprotocolindex, pnprotocoltype)
  end
  def reset_protocol_rollover_settings(this : IMFNetSchemeHandlerConfig*) : HRESULT
    @lpVtbl.value.reset_protocol_rollover_settings.call(this)
  end
end
struct LibWin32::IMFSchemeHandler
  def query_interface(this : IMFSchemeHandler*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSchemeHandler*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSchemeHandler*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def begin_create_object(this : IMFSchemeHandler*, pwszurl : LibC::LPWSTR, dwflags : UInt32, pprops : IPropertyStore, ppiunknowncancelcookie : IUnknown*, pcallback : IMFAsyncCallback, punkstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_create_object.call(this, pwszurl, dwflags, pprops, ppiunknowncancelcookie, pcallback, punkstate)
  end
  def end_create_object(this : IMFSchemeHandler*, presult : IMFAsyncResult, pobjecttype : MF_OBJECT_TYPE*, ppobject : IUnknown*) : HRESULT
    @lpVtbl.value.end_create_object.call(this, presult, pobjecttype, ppobject)
  end
  def cancel_object_creation(this : IMFSchemeHandler*, piunknowncancelcookie : IUnknown) : HRESULT
    @lpVtbl.value.cancel_object_creation.call(this, piunknowncancelcookie)
  end
end
struct LibWin32::IMFByteStreamHandler
  def query_interface(this : IMFByteStreamHandler*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFByteStreamHandler*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFByteStreamHandler*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def begin_create_object(this : IMFByteStreamHandler*, pbytestream : IMFByteStream, pwszurl : LibC::LPWSTR, dwflags : UInt32, pprops : IPropertyStore, ppiunknowncancelcookie : IUnknown*, pcallback : IMFAsyncCallback, punkstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_create_object.call(this, pbytestream, pwszurl, dwflags, pprops, ppiunknowncancelcookie, pcallback, punkstate)
  end
  def end_create_object(this : IMFByteStreamHandler*, presult : IMFAsyncResult, pobjecttype : MF_OBJECT_TYPE*, ppobject : IUnknown*) : HRESULT
    @lpVtbl.value.end_create_object.call(this, presult, pobjecttype, ppobject)
  end
  def cancel_object_creation(this : IMFByteStreamHandler*, piunknowncancelcookie : IUnknown) : HRESULT
    @lpVtbl.value.cancel_object_creation.call(this, piunknowncancelcookie)
  end
  def get_max_number_of_bytes_required_for_resolution(this : IMFByteStreamHandler*, pqwbytes : UInt64*) : HRESULT
    @lpVtbl.value.get_max_number_of_bytes_required_for_resolution.call(this, pqwbytes)
  end
end
struct LibWin32::IMFTrustedInput
  def query_interface(this : IMFTrustedInput*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFTrustedInput*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFTrustedInput*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_input_trust_authority(this : IMFTrustedInput*, dwstreamid : UInt32, riid : Guid*, ppunkobject : IUnknown*) : HRESULT
    @lpVtbl.value.get_input_trust_authority.call(this, dwstreamid, riid, ppunkobject)
  end
end
struct LibWin32::IMFInputTrustAuthority
  def query_interface(this : IMFInputTrustAuthority*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFInputTrustAuthority*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFInputTrustAuthority*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_decrypter(this : IMFInputTrustAuthority*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_decrypter.call(this, riid, ppv)
  end
  def request_access(this : IMFInputTrustAuthority*, action : MFPOLICYMANAGER_ACTION, ppcontentenableractivate : IMFActivate*) : HRESULT
    @lpVtbl.value.request_access.call(this, action, ppcontentenableractivate)
  end
  def get_policy(this : IMFInputTrustAuthority*, action : MFPOLICYMANAGER_ACTION, pppolicy : IMFOutputPolicy*) : HRESULT
    @lpVtbl.value.get_policy.call(this, action, pppolicy)
  end
  def bind_access(this : IMFInputTrustAuthority*, pparam : MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS*) : HRESULT
    @lpVtbl.value.bind_access.call(this, pparam)
  end
  def update_access(this : IMFInputTrustAuthority*, pparam : MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS*) : HRESULT
    @lpVtbl.value.update_access.call(this, pparam)
  end
  def reset(this : IMFInputTrustAuthority*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
end
struct LibWin32::IMFTrustedOutput
  def query_interface(this : IMFTrustedOutput*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFTrustedOutput*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFTrustedOutput*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_output_trust_authority_count(this : IMFTrustedOutput*, pcoutputtrustauthorities : UInt32*) : HRESULT
    @lpVtbl.value.get_output_trust_authority_count.call(this, pcoutputtrustauthorities)
  end
  def get_output_trust_authority_by_index(this : IMFTrustedOutput*, dwindex : UInt32, ppauthority : IMFOutputTrustAuthority*) : HRESULT
    @lpVtbl.value.get_output_trust_authority_by_index.call(this, dwindex, ppauthority)
  end
  def is_final(this : IMFTrustedOutput*, pfisfinal : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_final.call(this, pfisfinal)
  end
end
struct LibWin32::IMFOutputTrustAuthority
  def query_interface(this : IMFOutputTrustAuthority*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFOutputTrustAuthority*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFOutputTrustAuthority*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_action(this : IMFOutputTrustAuthority*, paction : MFPOLICYMANAGER_ACTION*) : HRESULT
    @lpVtbl.value.get_action.call(this, paction)
  end
  def set_policy(this : IMFOutputTrustAuthority*, pppolicy : IMFOutputPolicy*, npolicy : UInt32, ppbticket : UInt8**, pcbticket : UInt32*) : HRESULT
    @lpVtbl.value.set_policy.call(this, pppolicy, npolicy, ppbticket, pcbticket)
  end
end
struct LibWin32::IMFOutputPolicy
  def query_interface(this : IMFOutputPolicy*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFOutputPolicy*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFOutputPolicy*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_item(this : IMFOutputPolicy*, guidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item.call(this, guidkey, pvalue)
  end
  def get_item_type(this : IMFOutputPolicy*, guidkey : Guid*, ptype : MF_ATTRIBUTE_TYPE*) : HRESULT
    @lpVtbl.value.get_item_type.call(this, guidkey, ptype)
  end
  def compare_item(this : IMFOutputPolicy*, guidkey : Guid*, value : PROPVARIANT*, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare_item.call(this, guidkey, value, pbresult)
  end
  def compare(this : IMFOutputPolicy*, ptheirs : IMFAttributes, matchtype : MF_ATTRIBUTES_MATCH_TYPE, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare.call(this, ptheirs, matchtype, pbresult)
  end
  def get_uint32(this : IMFOutputPolicy*, guidkey : Guid*, punvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_uint32.call(this, guidkey, punvalue)
  end
  def get_uint64(this : IMFOutputPolicy*, guidkey : Guid*, punvalue : UInt64*) : HRESULT
    @lpVtbl.value.get_uint64.call(this, guidkey, punvalue)
  end
  def get_double(this : IMFOutputPolicy*, guidkey : Guid*, pfvalue : Float64*) : HRESULT
    @lpVtbl.value.get_double.call(this, guidkey, pfvalue)
  end
  def get_guid(this : IMFOutputPolicy*, guidkey : Guid*, pguidvalue : Guid*) : HRESULT
    @lpVtbl.value.get_guid.call(this, guidkey, pguidvalue)
  end
  def get_string_length(this : IMFOutputPolicy*, guidkey : Guid*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string_length.call(this, guidkey, pcchlength)
  end
  def get_string(this : IMFOutputPolicy*, guidkey : Guid*, pwszvalue : Char*, cchbufsize : UInt32, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string.call(this, guidkey, pwszvalue, cchbufsize, pcchlength)
  end
  def get_allocated_string(this : IMFOutputPolicy*, guidkey : Guid*, ppwszvalue : LibC::LPWSTR*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_string.call(this, guidkey, ppwszvalue, pcchlength)
  end
  def get_blob_size(this : IMFOutputPolicy*, guidkey : Guid*, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob_size.call(this, guidkey, pcbblobsize)
  end
  def get_blob(this : IMFOutputPolicy*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob.call(this, guidkey, pbuf, cbbufsize, pcbblobsize)
  end
  def get_allocated_blob(this : IMFOutputPolicy*, guidkey : Guid*, ppbuf : UInt8**, pcbsize : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_blob.call(this, guidkey, ppbuf, pcbsize)
  end
  def get_unknown(this : IMFOutputPolicy*, guidkey : Guid*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_unknown.call(this, guidkey, riid, ppv)
  end
  def set_item(this : IMFOutputPolicy*, guidkey : Guid*, value : PROPVARIANT*) : HRESULT
    @lpVtbl.value.set_item.call(this, guidkey, value)
  end
  def delete_item(this : IMFOutputPolicy*, guidkey : Guid*) : HRESULT
    @lpVtbl.value.delete_item.call(this, guidkey)
  end
  def delete_all_items(this : IMFOutputPolicy*) : HRESULT
    @lpVtbl.value.delete_all_items.call(this)
  end
  def set_uint32(this : IMFOutputPolicy*, guidkey : Guid*, unvalue : UInt32) : HRESULT
    @lpVtbl.value.set_uint32.call(this, guidkey, unvalue)
  end
  def set_uint64(this : IMFOutputPolicy*, guidkey : Guid*, unvalue : UInt64) : HRESULT
    @lpVtbl.value.set_uint64.call(this, guidkey, unvalue)
  end
  def set_double(this : IMFOutputPolicy*, guidkey : Guid*, fvalue : Float64) : HRESULT
    @lpVtbl.value.set_double.call(this, guidkey, fvalue)
  end
  def set_guid(this : IMFOutputPolicy*, guidkey : Guid*, guidvalue : Guid*) : HRESULT
    @lpVtbl.value.set_guid.call(this, guidkey, guidvalue)
  end
  def set_string(this : IMFOutputPolicy*, guidkey : Guid*, wszvalue : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_string.call(this, guidkey, wszvalue)
  end
  def set_blob(this : IMFOutputPolicy*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32) : HRESULT
    @lpVtbl.value.set_blob.call(this, guidkey, pbuf, cbbufsize)
  end
  def set_unknown(this : IMFOutputPolicy*, guidkey : Guid*, punknown : IUnknown) : HRESULT
    @lpVtbl.value.set_unknown.call(this, guidkey, punknown)
  end
  def lock_store(this : IMFOutputPolicy*) : HRESULT
    @lpVtbl.value.lock_store.call(this)
  end
  def unlock_store(this : IMFOutputPolicy*) : HRESULT
    @lpVtbl.value.unlock_store.call(this)
  end
  def get_count(this : IMFOutputPolicy*, pcitems : UInt32*) : HRESULT
    @lpVtbl.value.get_count.call(this, pcitems)
  end
  def get_item_by_index(this : IMFOutputPolicy*, unindex : UInt32, pguidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item_by_index.call(this, unindex, pguidkey, pvalue)
  end
  def copy_all_items(this : IMFOutputPolicy*, pdest : IMFAttributes) : HRESULT
    @lpVtbl.value.copy_all_items.call(this, pdest)
  end
  def generate_required_schemas(this : IMFOutputPolicy*, dwattributes : UInt32, guidoutputsubtype : Guid, rgguidprotectionschemassupported : Guid*, cprotectionschemassupported : UInt32, pprequiredprotectionschemas : IMFCollection*) : HRESULT
    @lpVtbl.value.generate_required_schemas.call(this, dwattributes, guidoutputsubtype, rgguidprotectionschemassupported, cprotectionschemassupported, pprequiredprotectionschemas)
  end
  def get_originator_id(this : IMFOutputPolicy*, pguidoriginatorid : Guid*) : HRESULT
    @lpVtbl.value.get_originator_id.call(this, pguidoriginatorid)
  end
  def get_minimum_grl_version(this : IMFOutputPolicy*, pdwminimumgrlversion : UInt32*) : HRESULT
    @lpVtbl.value.get_minimum_grl_version.call(this, pdwminimumgrlversion)
  end
end
struct LibWin32::IMFOutputSchema
  def query_interface(this : IMFOutputSchema*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFOutputSchema*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFOutputSchema*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_item(this : IMFOutputSchema*, guidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item.call(this, guidkey, pvalue)
  end
  def get_item_type(this : IMFOutputSchema*, guidkey : Guid*, ptype : MF_ATTRIBUTE_TYPE*) : HRESULT
    @lpVtbl.value.get_item_type.call(this, guidkey, ptype)
  end
  def compare_item(this : IMFOutputSchema*, guidkey : Guid*, value : PROPVARIANT*, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare_item.call(this, guidkey, value, pbresult)
  end
  def compare(this : IMFOutputSchema*, ptheirs : IMFAttributes, matchtype : MF_ATTRIBUTES_MATCH_TYPE, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare.call(this, ptheirs, matchtype, pbresult)
  end
  def get_uint32(this : IMFOutputSchema*, guidkey : Guid*, punvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_uint32.call(this, guidkey, punvalue)
  end
  def get_uint64(this : IMFOutputSchema*, guidkey : Guid*, punvalue : UInt64*) : HRESULT
    @lpVtbl.value.get_uint64.call(this, guidkey, punvalue)
  end
  def get_double(this : IMFOutputSchema*, guidkey : Guid*, pfvalue : Float64*) : HRESULT
    @lpVtbl.value.get_double.call(this, guidkey, pfvalue)
  end
  def get_guid(this : IMFOutputSchema*, guidkey : Guid*, pguidvalue : Guid*) : HRESULT
    @lpVtbl.value.get_guid.call(this, guidkey, pguidvalue)
  end
  def get_string_length(this : IMFOutputSchema*, guidkey : Guid*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string_length.call(this, guidkey, pcchlength)
  end
  def get_string(this : IMFOutputSchema*, guidkey : Guid*, pwszvalue : Char*, cchbufsize : UInt32, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string.call(this, guidkey, pwszvalue, cchbufsize, pcchlength)
  end
  def get_allocated_string(this : IMFOutputSchema*, guidkey : Guid*, ppwszvalue : LibC::LPWSTR*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_string.call(this, guidkey, ppwszvalue, pcchlength)
  end
  def get_blob_size(this : IMFOutputSchema*, guidkey : Guid*, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob_size.call(this, guidkey, pcbblobsize)
  end
  def get_blob(this : IMFOutputSchema*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob.call(this, guidkey, pbuf, cbbufsize, pcbblobsize)
  end
  def get_allocated_blob(this : IMFOutputSchema*, guidkey : Guid*, ppbuf : UInt8**, pcbsize : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_blob.call(this, guidkey, ppbuf, pcbsize)
  end
  def get_unknown(this : IMFOutputSchema*, guidkey : Guid*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_unknown.call(this, guidkey, riid, ppv)
  end
  def set_item(this : IMFOutputSchema*, guidkey : Guid*, value : PROPVARIANT*) : HRESULT
    @lpVtbl.value.set_item.call(this, guidkey, value)
  end
  def delete_item(this : IMFOutputSchema*, guidkey : Guid*) : HRESULT
    @lpVtbl.value.delete_item.call(this, guidkey)
  end
  def delete_all_items(this : IMFOutputSchema*) : HRESULT
    @lpVtbl.value.delete_all_items.call(this)
  end
  def set_uint32(this : IMFOutputSchema*, guidkey : Guid*, unvalue : UInt32) : HRESULT
    @lpVtbl.value.set_uint32.call(this, guidkey, unvalue)
  end
  def set_uint64(this : IMFOutputSchema*, guidkey : Guid*, unvalue : UInt64) : HRESULT
    @lpVtbl.value.set_uint64.call(this, guidkey, unvalue)
  end
  def set_double(this : IMFOutputSchema*, guidkey : Guid*, fvalue : Float64) : HRESULT
    @lpVtbl.value.set_double.call(this, guidkey, fvalue)
  end
  def set_guid(this : IMFOutputSchema*, guidkey : Guid*, guidvalue : Guid*) : HRESULT
    @lpVtbl.value.set_guid.call(this, guidkey, guidvalue)
  end
  def set_string(this : IMFOutputSchema*, guidkey : Guid*, wszvalue : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_string.call(this, guidkey, wszvalue)
  end
  def set_blob(this : IMFOutputSchema*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32) : HRESULT
    @lpVtbl.value.set_blob.call(this, guidkey, pbuf, cbbufsize)
  end
  def set_unknown(this : IMFOutputSchema*, guidkey : Guid*, punknown : IUnknown) : HRESULT
    @lpVtbl.value.set_unknown.call(this, guidkey, punknown)
  end
  def lock_store(this : IMFOutputSchema*) : HRESULT
    @lpVtbl.value.lock_store.call(this)
  end
  def unlock_store(this : IMFOutputSchema*) : HRESULT
    @lpVtbl.value.unlock_store.call(this)
  end
  def get_count(this : IMFOutputSchema*, pcitems : UInt32*) : HRESULT
    @lpVtbl.value.get_count.call(this, pcitems)
  end
  def get_item_by_index(this : IMFOutputSchema*, unindex : UInt32, pguidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item_by_index.call(this, unindex, pguidkey, pvalue)
  end
  def copy_all_items(this : IMFOutputSchema*, pdest : IMFAttributes) : HRESULT
    @lpVtbl.value.copy_all_items.call(this, pdest)
  end
  def get_schema_type(this : IMFOutputSchema*, pguidschematype : Guid*) : HRESULT
    @lpVtbl.value.get_schema_type.call(this, pguidschematype)
  end
  def get_configuration_data(this : IMFOutputSchema*, pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_configuration_data.call(this, pdwval)
  end
  def get_originator_id(this : IMFOutputSchema*, pguidoriginatorid : Guid*) : HRESULT
    @lpVtbl.value.get_originator_id.call(this, pguidoriginatorid)
  end
end
struct LibWin32::IMFSecureChannel
  def query_interface(this : IMFSecureChannel*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSecureChannel*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSecureChannel*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_certificate(this : IMFSecureChannel*, ppcert : UInt8**, pcbcert : UInt32*) : HRESULT
    @lpVtbl.value.get_certificate.call(this, ppcert, pcbcert)
  end
  def setup_session(this : IMFSecureChannel*, pbencryptedsessionkey : UInt8*, cbsessionkey : UInt32) : HRESULT
    @lpVtbl.value.setup_session.call(this, pbencryptedsessionkey, cbsessionkey)
  end
end
struct LibWin32::IMFSampleProtection
  def query_interface(this : IMFSampleProtection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSampleProtection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSampleProtection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_input_protection_version(this : IMFSampleProtection*, pdwversion : UInt32*) : HRESULT
    @lpVtbl.value.get_input_protection_version.call(this, pdwversion)
  end
  def get_output_protection_version(this : IMFSampleProtection*, pdwversion : UInt32*) : HRESULT
    @lpVtbl.value.get_output_protection_version.call(this, pdwversion)
  end
  def get_protection_certificate(this : IMFSampleProtection*, dwversion : UInt32, ppcert : UInt8**, pcbcert : UInt32*) : HRESULT
    @lpVtbl.value.get_protection_certificate.call(this, dwversion, ppcert, pcbcert)
  end
  def init_output_protection(this : IMFSampleProtection*, dwversion : UInt32, dwoutputid : UInt32, pbcert : UInt8*, cbcert : UInt32, ppbseed : UInt8**, pcbseed : UInt32*) : HRESULT
    @lpVtbl.value.init_output_protection.call(this, dwversion, dwoutputid, pbcert, cbcert, ppbseed, pcbseed)
  end
  def init_input_protection(this : IMFSampleProtection*, dwversion : UInt32, dwinputid : UInt32, pbseed : UInt8*, cbseed : UInt32) : HRESULT
    @lpVtbl.value.init_input_protection.call(this, dwversion, dwinputid, pbseed, cbseed)
  end
end
struct LibWin32::IMFMediaSinkPreroll
  def query_interface(this : IMFMediaSinkPreroll*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaSinkPreroll*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaSinkPreroll*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def notify_preroll(this : IMFMediaSinkPreroll*, hnsupcomingstarttime : Int64) : HRESULT
    @lpVtbl.value.notify_preroll.call(this, hnsupcomingstarttime)
  end
end
struct LibWin32::IMFFinalizableMediaSink
  def query_interface(this : IMFFinalizableMediaSink*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFFinalizableMediaSink*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFFinalizableMediaSink*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_characteristics(this : IMFFinalizableMediaSink*, pdwcharacteristics : UInt32*) : HRESULT
    @lpVtbl.value.get_characteristics.call(this, pdwcharacteristics)
  end
  def add_stream_sink(this : IMFFinalizableMediaSink*, dwstreamsinkidentifier : UInt32, pmediatype : IMFMediaType, ppstreamsink : IMFStreamSink*) : HRESULT
    @lpVtbl.value.add_stream_sink.call(this, dwstreamsinkidentifier, pmediatype, ppstreamsink)
  end
  def remove_stream_sink(this : IMFFinalizableMediaSink*, dwstreamsinkidentifier : UInt32) : HRESULT
    @lpVtbl.value.remove_stream_sink.call(this, dwstreamsinkidentifier)
  end
  def get_stream_sink_count(this : IMFFinalizableMediaSink*, pcstreamsinkcount : UInt32*) : HRESULT
    @lpVtbl.value.get_stream_sink_count.call(this, pcstreamsinkcount)
  end
  def get_stream_sink_by_index(this : IMFFinalizableMediaSink*, dwindex : UInt32, ppstreamsink : IMFStreamSink*) : HRESULT
    @lpVtbl.value.get_stream_sink_by_index.call(this, dwindex, ppstreamsink)
  end
  def get_stream_sink_by_id(this : IMFFinalizableMediaSink*, dwstreamsinkidentifier : UInt32, ppstreamsink : IMFStreamSink*) : HRESULT
    @lpVtbl.value.get_stream_sink_by_id.call(this, dwstreamsinkidentifier, ppstreamsink)
  end
  def set_presentation_clock(this : IMFFinalizableMediaSink*, ppresentationclock : IMFPresentationClock) : HRESULT
    @lpVtbl.value.set_presentation_clock.call(this, ppresentationclock)
  end
  def get_presentation_clock(this : IMFFinalizableMediaSink*, pppresentationclock : IMFPresentationClock*) : HRESULT
    @lpVtbl.value.get_presentation_clock.call(this, pppresentationclock)
  end
  def shutdown(this : IMFFinalizableMediaSink*) : HRESULT
    @lpVtbl.value.shutdown.call(this)
  end
  def begin_finalize(this : IMFFinalizableMediaSink*, pcallback : IMFAsyncCallback, punkstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_finalize.call(this, pcallback, punkstate)
  end
  def end_finalize(this : IMFFinalizableMediaSink*, presult : IMFAsyncResult) : HRESULT
    @lpVtbl.value.end_finalize.call(this, presult)
  end
end
struct LibWin32::IMFStreamingSinkConfig
  def query_interface(this : IMFStreamingSinkConfig*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFStreamingSinkConfig*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFStreamingSinkConfig*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def start_streaming(this : IMFStreamingSinkConfig*, fseekoffsetisbyteoffset : LibC::BOOL, qwseekoffset : UInt64) : HRESULT
    @lpVtbl.value.start_streaming.call(this, fseekoffsetisbyteoffset, qwseekoffset)
  end
end
struct LibWin32::IMFRemoteProxy
  def query_interface(this : IMFRemoteProxy*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFRemoteProxy*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFRemoteProxy*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_remote_object(this : IMFRemoteProxy*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_remote_object.call(this, riid, ppv)
  end
  def get_remote_host(this : IMFRemoteProxy*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_remote_host.call(this, riid, ppv)
  end
end
struct LibWin32::IMFObjectReferenceStream
  def query_interface(this : IMFObjectReferenceStream*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFObjectReferenceStream*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFObjectReferenceStream*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def save_reference(this : IMFObjectReferenceStream*, riid : Guid*, punk : IUnknown) : HRESULT
    @lpVtbl.value.save_reference.call(this, riid, punk)
  end
  def load_reference(this : IMFObjectReferenceStream*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.load_reference.call(this, riid, ppv)
  end
end
struct LibWin32::IMFPMPHost
  def query_interface(this : IMFPMPHost*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFPMPHost*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFPMPHost*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def lock_process(this : IMFPMPHost*) : HRESULT
    @lpVtbl.value.lock_process.call(this)
  end
  def unlock_process(this : IMFPMPHost*) : HRESULT
    @lpVtbl.value.unlock_process.call(this)
  end
  def create_object_by_clsid(this : IMFPMPHost*, clsid : Guid*, pstream : IStream, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.create_object_by_clsid.call(this, clsid, pstream, riid, ppv)
  end
end
struct LibWin32::IMFPMPClient
  def query_interface(this : IMFPMPClient*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFPMPClient*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFPMPClient*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_pmp_host(this : IMFPMPClient*, ppmphost : IMFPMPHost) : HRESULT
    @lpVtbl.value.set_pmp_host.call(this, ppmphost)
  end
end
struct LibWin32::IMFPMPServer
  def query_interface(this : IMFPMPServer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFPMPServer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFPMPServer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def lock_process(this : IMFPMPServer*) : HRESULT
    @lpVtbl.value.lock_process.call(this)
  end
  def unlock_process(this : IMFPMPServer*) : HRESULT
    @lpVtbl.value.unlock_process.call(this)
  end
  def create_object_by_clsid(this : IMFPMPServer*, clsid : Guid*, riid : Guid*, ppobject : Void**) : HRESULT
    @lpVtbl.value.create_object_by_clsid.call(this, clsid, riid, ppobject)
  end
end
struct LibWin32::IMFRemoteDesktopPlugin
  def query_interface(this : IMFRemoteDesktopPlugin*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFRemoteDesktopPlugin*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFRemoteDesktopPlugin*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def update_topology(this : IMFRemoteDesktopPlugin*, ptopology : IMFTopology) : HRESULT
    @lpVtbl.value.update_topology.call(this, ptopology)
  end
end
struct LibWin32::IMFSAMIStyle
  def query_interface(this : IMFSAMIStyle*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSAMIStyle*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSAMIStyle*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_style_count(this : IMFSAMIStyle*, pdwcount : UInt32*) : HRESULT
    @lpVtbl.value.get_style_count.call(this, pdwcount)
  end
  def get_styles(this : IMFSAMIStyle*, ppropvarstylearray : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_styles.call(this, ppropvarstylearray)
  end
  def set_selected_style(this : IMFSAMIStyle*, pwszstyle : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_selected_style.call(this, pwszstyle)
  end
  def get_selected_style(this : IMFSAMIStyle*, ppwszstyle : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_selected_style.call(this, ppwszstyle)
  end
end
struct LibWin32::IMFTranscodeProfile
  def query_interface(this : IMFTranscodeProfile*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFTranscodeProfile*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFTranscodeProfile*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_audio_attributes(this : IMFTranscodeProfile*, pattrs : IMFAttributes) : HRESULT
    @lpVtbl.value.set_audio_attributes.call(this, pattrs)
  end
  def get_audio_attributes(this : IMFTranscodeProfile*, ppattrs : IMFAttributes*) : HRESULT
    @lpVtbl.value.get_audio_attributes.call(this, ppattrs)
  end
  def set_video_attributes(this : IMFTranscodeProfile*, pattrs : IMFAttributes) : HRESULT
    @lpVtbl.value.set_video_attributes.call(this, pattrs)
  end
  def get_video_attributes(this : IMFTranscodeProfile*, ppattrs : IMFAttributes*) : HRESULT
    @lpVtbl.value.get_video_attributes.call(this, ppattrs)
  end
  def set_container_attributes(this : IMFTranscodeProfile*, pattrs : IMFAttributes) : HRESULT
    @lpVtbl.value.set_container_attributes.call(this, pattrs)
  end
  def get_container_attributes(this : IMFTranscodeProfile*, ppattrs : IMFAttributes*) : HRESULT
    @lpVtbl.value.get_container_attributes.call(this, ppattrs)
  end
end
struct LibWin32::IMFTranscodeSinkInfoProvider
  def query_interface(this : IMFTranscodeSinkInfoProvider*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFTranscodeSinkInfoProvider*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFTranscodeSinkInfoProvider*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_output_file(this : IMFTranscodeSinkInfoProvider*, pwszfilename : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_output_file.call(this, pwszfilename)
  end
  def set_output_byte_stream(this : IMFTranscodeSinkInfoProvider*, pbytestreamactivate : IMFActivate) : HRESULT
    @lpVtbl.value.set_output_byte_stream.call(this, pbytestreamactivate)
  end
  def set_profile(this : IMFTranscodeSinkInfoProvider*, pprofile : IMFTranscodeProfile) : HRESULT
    @lpVtbl.value.set_profile.call(this, pprofile)
  end
  def get_sink_info(this : IMFTranscodeSinkInfoProvider*, psinkinfo : MF_TRANSCODE_SINK_INFO*) : HRESULT
    @lpVtbl.value.get_sink_info.call(this, psinkinfo)
  end
end
struct LibWin32::IMFFieldOfUseMFTUnlock
  def query_interface(this : IMFFieldOfUseMFTUnlock*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFFieldOfUseMFTUnlock*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFFieldOfUseMFTUnlock*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def unlock(this : IMFFieldOfUseMFTUnlock*, punkmft : IUnknown) : HRESULT
    @lpVtbl.value.unlock.call(this, punkmft)
  end
end
struct LibWin32::IMFLocalMFTRegistration
  def query_interface(this : IMFLocalMFTRegistration*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFLocalMFTRegistration*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFLocalMFTRegistration*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def register_mf_ts(this : IMFLocalMFTRegistration*, pmfts : MFT_REGISTRATION_INFO*, cmfts : UInt32) : HRESULT
    @lpVtbl.value.register_mf_ts.call(this, pmfts, cmfts)
  end
end
struct LibWin32::IMFCapturePhotoConfirmation
  def query_interface(this : IMFCapturePhotoConfirmation*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFCapturePhotoConfirmation*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFCapturePhotoConfirmation*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_photo_confirmation_callback(this : IMFCapturePhotoConfirmation*, pnotificationcallback : IMFAsyncCallback) : HRESULT
    @lpVtbl.value.set_photo_confirmation_callback.call(this, pnotificationcallback)
  end
  def set_pixel_format(this : IMFCapturePhotoConfirmation*, subtype : Guid) : HRESULT
    @lpVtbl.value.set_pixel_format.call(this, subtype)
  end
  def get_pixel_format(this : IMFCapturePhotoConfirmation*, subtype : Guid*) : HRESULT
    @lpVtbl.value.get_pixel_format.call(this, subtype)
  end
end
struct LibWin32::IMFPMPHostApp
  def query_interface(this : IMFPMPHostApp*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFPMPHostApp*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFPMPHostApp*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def lock_process(this : IMFPMPHostApp*) : HRESULT
    @lpVtbl.value.lock_process.call(this)
  end
  def unlock_process(this : IMFPMPHostApp*) : HRESULT
    @lpVtbl.value.unlock_process.call(this)
  end
  def activate_class_by_id(this : IMFPMPHostApp*, id : LibC::LPWSTR, pstream : IStream, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.activate_class_by_id.call(this, id, pstream, riid, ppv)
  end
end
struct LibWin32::IMFPMPClientApp
  def query_interface(this : IMFPMPClientApp*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFPMPClientApp*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFPMPClientApp*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_pmp_host(this : IMFPMPClientApp*, ppmphost : IMFPMPHostApp) : HRESULT
    @lpVtbl.value.set_pmp_host.call(this, ppmphost)
  end
end
struct LibWin32::IMFMediaStreamSourceSampleRequest
  def query_interface(this : IMFMediaStreamSourceSampleRequest*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaStreamSourceSampleRequest*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaStreamSourceSampleRequest*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_sample(this : IMFMediaStreamSourceSampleRequest*, value : IMFSample) : HRESULT
    @lpVtbl.value.set_sample.call(this, value)
  end
end
struct LibWin32::IMFTrackedSample
  def query_interface(this : IMFTrackedSample*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFTrackedSample*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFTrackedSample*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_allocator(this : IMFTrackedSample*, psampleallocator : IMFAsyncCallback, punkstate : IUnknown) : HRESULT
    @lpVtbl.value.set_allocator.call(this, psampleallocator, punkstate)
  end
end
struct LibWin32::IMFProtectedEnvironmentAccess
  def query_interface(this : IMFProtectedEnvironmentAccess*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFProtectedEnvironmentAccess*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFProtectedEnvironmentAccess*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def call(this : IMFProtectedEnvironmentAccess*, inputlength : UInt32, input : UInt8*, outputlength : UInt32, output : UInt8*) : HRESULT
    @lpVtbl.value.call.call(this, inputlength, input, outputlength, output)
  end
  def read_grl(this : IMFProtectedEnvironmentAccess*, outputlength : UInt32*, output : UInt8**) : HRESULT
    @lpVtbl.value.read_grl.call(this, outputlength, output)
  end
end
struct LibWin32::IMFSignedLibrary
  def query_interface(this : IMFSignedLibrary*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSignedLibrary*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSignedLibrary*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_procedure_address(this : IMFSignedLibrary*, name : PSTR, address : Void**) : HRESULT
    @lpVtbl.value.get_procedure_address.call(this, name, address)
  end
end
struct LibWin32::IMFSystemId
  def query_interface(this : IMFSystemId*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSystemId*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSystemId*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_data(this : IMFSystemId*, size : UInt32*, data : UInt8**) : HRESULT
    @lpVtbl.value.get_data.call(this, size, data)
  end
  def setup(this : IMFSystemId*, stage : UInt32, cbin : UInt32, pbin : UInt8*, pcbout : UInt32*, ppbout : UInt8**) : HRESULT
    @lpVtbl.value.setup.call(this, stage, cbin, pbin, pcbout, ppbout)
  end
end
struct LibWin32::IMFContentProtectionDevice
  def query_interface(this : IMFContentProtectionDevice*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFContentProtectionDevice*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFContentProtectionDevice*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def invoke_function(this : IMFContentProtectionDevice*, functionid : UInt32, inputbufferbytecount : UInt32, inputbuffer : UInt8*, outputbufferbytecount : UInt32*, outputbuffer : UInt8*) : HRESULT
    @lpVtbl.value.invoke_function.call(this, functionid, inputbufferbytecount, inputbuffer, outputbufferbytecount, outputbuffer)
  end
  def get_private_data_byte_count(this : IMFContentProtectionDevice*, privateinputbytecount : UInt32*, privateoutputbytecount : UInt32*) : HRESULT
    @lpVtbl.value.get_private_data_byte_count.call(this, privateinputbytecount, privateoutputbytecount)
  end
end
struct LibWin32::IMFContentDecryptorContext
  def query_interface(this : IMFContentDecryptorContext*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFContentDecryptorContext*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFContentDecryptorContext*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def initialize_hardware_key(this : IMFContentDecryptorContext*, inputprivatedatabytecount : UInt32, inputprivatedata : Void*, outputprivatedata : UInt64*) : HRESULT
    @lpVtbl.value.initialize_hardware_key.call(this, inputprivatedatabytecount, inputprivatedata, outputprivatedata)
  end
end
struct LibWin32::IMFNetCrossOriginSupport
  def query_interface(this : IMFNetCrossOriginSupport*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFNetCrossOriginSupport*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFNetCrossOriginSupport*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_cross_origin_policy(this : IMFNetCrossOriginSupport*, ppolicy : MF_CROSS_ORIGIN_POLICY*) : HRESULT
    @lpVtbl.value.get_cross_origin_policy.call(this, ppolicy)
  end
  def get_source_origin(this : IMFNetCrossOriginSupport*, wszsourceorigin : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_source_origin.call(this, wszsourceorigin)
  end
  def is_same_origin(this : IMFNetCrossOriginSupport*, wszurl : LibC::LPWSTR, pfissameorigin : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_same_origin.call(this, wszurl, pfissameorigin)
  end
end
struct LibWin32::IMFHttpDownloadRequest
  def query_interface(this : IMFHttpDownloadRequest*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFHttpDownloadRequest*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFHttpDownloadRequest*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def add_header(this : IMFHttpDownloadRequest*, szheader : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.add_header.call(this, szheader)
  end
  def begin_send_request(this : IMFHttpDownloadRequest*, pbpayload : UInt8*, cbpayload : UInt32, pcallback : IMFAsyncCallback, punkstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_send_request.call(this, pbpayload, cbpayload, pcallback, punkstate)
  end
  def end_send_request(this : IMFHttpDownloadRequest*, presult : IMFAsyncResult) : HRESULT
    @lpVtbl.value.end_send_request.call(this, presult)
  end
  def begin_receive_response(this : IMFHttpDownloadRequest*, pcallback : IMFAsyncCallback, punkstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_receive_response.call(this, pcallback, punkstate)
  end
  def end_receive_response(this : IMFHttpDownloadRequest*, presult : IMFAsyncResult) : HRESULT
    @lpVtbl.value.end_receive_response.call(this, presult)
  end
  def begin_read_payload(this : IMFHttpDownloadRequest*, pb : UInt8*, cb : UInt32, pcallback : IMFAsyncCallback, punkstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_read_payload.call(this, pb, cb, pcallback, punkstate)
  end
  def end_read_payload(this : IMFHttpDownloadRequest*, presult : IMFAsyncResult, pqwoffset : UInt64*, pcbread : UInt32*) : HRESULT
    @lpVtbl.value.end_read_payload.call(this, presult, pqwoffset, pcbread)
  end
  def query_header(this : IMFHttpDownloadRequest*, szheadername : LibC::LPWSTR, dwindex : UInt32, ppszheadervalue : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.query_header.call(this, szheadername, dwindex, ppszheadervalue)
  end
  def get_url(this : IMFHttpDownloadRequest*, ppszurl : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_url.call(this, ppszurl)
  end
  def has_null_source_origin(this : IMFHttpDownloadRequest*, pfnullsourceorigin : LibC::BOOL*) : HRESULT
    @lpVtbl.value.has_null_source_origin.call(this, pfnullsourceorigin)
  end
  def get_time_seek_result(this : IMFHttpDownloadRequest*, pqwstarttime : UInt64*, pqwstoptime : UInt64*, pqwduration : UInt64*) : HRESULT
    @lpVtbl.value.get_time_seek_result.call(this, pqwstarttime, pqwstoptime, pqwduration)
  end
  def get_http_status(this : IMFHttpDownloadRequest*, pdwhttpstatus : UInt32*) : HRESULT
    @lpVtbl.value.get_http_status.call(this, pdwhttpstatus)
  end
  def get_at_end_of_payload(this : IMFHttpDownloadRequest*, pfatendofpayload : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_at_end_of_payload.call(this, pfatendofpayload)
  end
  def get_total_length(this : IMFHttpDownloadRequest*, pqwtotallength : UInt64*) : HRESULT
    @lpVtbl.value.get_total_length.call(this, pqwtotallength)
  end
  def get_range_end_offset(this : IMFHttpDownloadRequest*, pqwrangeend : UInt64*) : HRESULT
    @lpVtbl.value.get_range_end_offset.call(this, pqwrangeend)
  end
  def close(this : IMFHttpDownloadRequest*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
end
struct LibWin32::IMFHttpDownloadSession
  def query_interface(this : IMFHttpDownloadSession*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFHttpDownloadSession*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFHttpDownloadSession*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_server(this : IMFHttpDownloadSession*, szservername : LibC::LPWSTR, nport : UInt32) : HRESULT
    @lpVtbl.value.set_server.call(this, szservername, nport)
  end
  def create_request(this : IMFHttpDownloadSession*, szobjectname : LibC::LPWSTR, fbypassproxycache : LibC::BOOL, fsecure : LibC::BOOL, szverb : LibC::LPWSTR, szreferrer : LibC::LPWSTR, pprequest : IMFHttpDownloadRequest*) : HRESULT
    @lpVtbl.value.create_request.call(this, szobjectname, fbypassproxycache, fsecure, szverb, szreferrer, pprequest)
  end
  def close(this : IMFHttpDownloadSession*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
end
struct LibWin32::IMFHttpDownloadSessionProvider
  def query_interface(this : IMFHttpDownloadSessionProvider*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFHttpDownloadSessionProvider*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFHttpDownloadSessionProvider*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_http_download_session(this : IMFHttpDownloadSessionProvider*, wszscheme : LibC::LPWSTR, ppdownloadsession : IMFHttpDownloadSession*) : HRESULT
    @lpVtbl.value.create_http_download_session.call(this, wszscheme, ppdownloadsession)
  end
end
struct LibWin32::IMFMediaSource2
  def query_interface(this : IMFMediaSource2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaSource2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaSource2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_event(this : IMFMediaSource2*, dwflags : MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, ppevent : IMFMediaEvent*) : HRESULT
    @lpVtbl.value.get_event.call(this, dwflags, ppevent)
  end
  def begin_get_event(this : IMFMediaSource2*, pcallback : IMFAsyncCallback, punkstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_get_event.call(this, pcallback, punkstate)
  end
  def end_get_event(this : IMFMediaSource2*, presult : IMFAsyncResult, ppevent : IMFMediaEvent*) : HRESULT
    @lpVtbl.value.end_get_event.call(this, presult, ppevent)
  end
  def queue_event(this : IMFMediaSource2*, met : UInt32, guidextendedtype : Guid*, hrstatus : HRESULT, pvvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.queue_event.call(this, met, guidextendedtype, hrstatus, pvvalue)
  end
  def get_characteristics(this : IMFMediaSource2*, pdwcharacteristics : UInt32*) : HRESULT
    @lpVtbl.value.get_characteristics.call(this, pdwcharacteristics)
  end
  def create_presentation_descriptor(this : IMFMediaSource2*, pppresentationdescriptor : IMFPresentationDescriptor*) : HRESULT
    @lpVtbl.value.create_presentation_descriptor.call(this, pppresentationdescriptor)
  end
  def start(this : IMFMediaSource2*, ppresentationdescriptor : IMFPresentationDescriptor, pguidtimeformat : Guid*, pvarstartposition : PROPVARIANT*) : HRESULT
    @lpVtbl.value.start.call(this, ppresentationdescriptor, pguidtimeformat, pvarstartposition)
  end
  def stop(this : IMFMediaSource2*) : HRESULT
    @lpVtbl.value.stop.call(this)
  end
  def pause(this : IMFMediaSource2*) : HRESULT
    @lpVtbl.value.pause.call(this)
  end
  def shutdown(this : IMFMediaSource2*) : HRESULT
    @lpVtbl.value.shutdown.call(this)
  end
  def get_source_attributes(this : IMFMediaSource2*, ppattributes : IMFAttributes*) : HRESULT
    @lpVtbl.value.get_source_attributes.call(this, ppattributes)
  end
  def get_stream_attributes(this : IMFMediaSource2*, dwstreamidentifier : UInt32, ppattributes : IMFAttributes*) : HRESULT
    @lpVtbl.value.get_stream_attributes.call(this, dwstreamidentifier, ppattributes)
  end
  def set_d3_d_manager(this : IMFMediaSource2*, pmanager : IUnknown) : HRESULT
    @lpVtbl.value.set_d3_d_manager.call(this, pmanager)
  end
  def set_media_type(this : IMFMediaSource2*, dwstreamid : UInt32, pmediatype : IMFMediaType) : HRESULT
    @lpVtbl.value.set_media_type.call(this, dwstreamid, pmediatype)
  end
end
struct LibWin32::IMFMediaStream2
  def query_interface(this : IMFMediaStream2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaStream2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaStream2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_event(this : IMFMediaStream2*, dwflags : MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, ppevent : IMFMediaEvent*) : HRESULT
    @lpVtbl.value.get_event.call(this, dwflags, ppevent)
  end
  def begin_get_event(this : IMFMediaStream2*, pcallback : IMFAsyncCallback, punkstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_get_event.call(this, pcallback, punkstate)
  end
  def end_get_event(this : IMFMediaStream2*, presult : IMFAsyncResult, ppevent : IMFMediaEvent*) : HRESULT
    @lpVtbl.value.end_get_event.call(this, presult, ppevent)
  end
  def queue_event(this : IMFMediaStream2*, met : UInt32, guidextendedtype : Guid*, hrstatus : HRESULT, pvvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.queue_event.call(this, met, guidextendedtype, hrstatus, pvvalue)
  end
  def get_media_source(this : IMFMediaStream2*, ppmediasource : IMFMediaSource*) : HRESULT
    @lpVtbl.value.get_media_source.call(this, ppmediasource)
  end
  def get_stream_descriptor(this : IMFMediaStream2*, ppstreamdescriptor : IMFStreamDescriptor*) : HRESULT
    @lpVtbl.value.get_stream_descriptor.call(this, ppstreamdescriptor)
  end
  def request_sample(this : IMFMediaStream2*, ptoken : IUnknown) : HRESULT
    @lpVtbl.value.request_sample.call(this, ptoken)
  end
  def set_stream_state(this : IMFMediaStream2*, value : MF_STREAM_STATE) : HRESULT
    @lpVtbl.value.set_stream_state.call(this, value)
  end
  def get_stream_state(this : IMFMediaStream2*, value : MF_STREAM_STATE*) : HRESULT
    @lpVtbl.value.get_stream_state.call(this, value)
  end
end
struct LibWin32::IMFSensorDevice
  def query_interface(this : IMFSensorDevice*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSensorDevice*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSensorDevice*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device_id(this : IMFSensorDevice*, pdeviceid : UInt64*) : HRESULT
    @lpVtbl.value.get_device_id.call(this, pdeviceid)
  end
  def get_device_type(this : IMFSensorDevice*, ptype : MFSensorDeviceType*) : HRESULT
    @lpVtbl.value.get_device_type.call(this, ptype)
  end
  def get_flags(this : IMFSensorDevice*, pflags : UInt64*) : HRESULT
    @lpVtbl.value.get_flags.call(this, pflags)
  end
  def get_symbolic_link(this : IMFSensorDevice*, symboliclink : Char*, cchsymboliclink : Int32, pcchwritten : Int32*) : HRESULT
    @lpVtbl.value.get_symbolic_link.call(this, symboliclink, cchsymboliclink, pcchwritten)
  end
  def get_device_attributes(this : IMFSensorDevice*, ppattributes : IMFAttributes*) : HRESULT
    @lpVtbl.value.get_device_attributes.call(this, ppattributes)
  end
  def get_stream_attributes_count(this : IMFSensorDevice*, etype : MFSensorStreamType, pdwcount : UInt32*) : HRESULT
    @lpVtbl.value.get_stream_attributes_count.call(this, etype, pdwcount)
  end
  def get_stream_attributes(this : IMFSensorDevice*, etype : MFSensorStreamType, dwindex : UInt32, ppattributes : IMFAttributes*) : HRESULT
    @lpVtbl.value.get_stream_attributes.call(this, etype, dwindex, ppattributes)
  end
  def set_sensor_device_mode(this : IMFSensorDevice*, emode : MFSensorDeviceMode) : HRESULT
    @lpVtbl.value.set_sensor_device_mode.call(this, emode)
  end
  def get_sensor_device_mode(this : IMFSensorDevice*, pemode : MFSensorDeviceMode*) : HRESULT
    @lpVtbl.value.get_sensor_device_mode.call(this, pemode)
  end
end
struct LibWin32::IMFSensorGroup
  def query_interface(this : IMFSensorGroup*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSensorGroup*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSensorGroup*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_symbolic_link(this : IMFSensorGroup*, symboliclink : Char*, cchsymboliclink : Int32, pcchwritten : Int32*) : HRESULT
    @lpVtbl.value.get_symbolic_link.call(this, symboliclink, cchsymboliclink, pcchwritten)
  end
  def get_flags(this : IMFSensorGroup*, pflags : UInt64*) : HRESULT
    @lpVtbl.value.get_flags.call(this, pflags)
  end
  def get_sensor_group_attributes(this : IMFSensorGroup*, ppattributes : IMFAttributes*) : HRESULT
    @lpVtbl.value.get_sensor_group_attributes.call(this, ppattributes)
  end
  def get_sensor_device_count(this : IMFSensorGroup*, pdwcount : UInt32*) : HRESULT
    @lpVtbl.value.get_sensor_device_count.call(this, pdwcount)
  end
  def get_sensor_device(this : IMFSensorGroup*, dwindex : UInt32, ppdevice : IMFSensorDevice*) : HRESULT
    @lpVtbl.value.get_sensor_device.call(this, dwindex, ppdevice)
  end
  def set_default_sensor_device_index(this : IMFSensorGroup*, dwindex : UInt32) : HRESULT
    @lpVtbl.value.set_default_sensor_device_index.call(this, dwindex)
  end
  def get_default_sensor_device_index(this : IMFSensorGroup*, pdwindex : UInt32*) : HRESULT
    @lpVtbl.value.get_default_sensor_device_index.call(this, pdwindex)
  end
  def create_media_source(this : IMFSensorGroup*, ppsource : IMFMediaSource*) : HRESULT
    @lpVtbl.value.create_media_source.call(this, ppsource)
  end
end
struct LibWin32::IMFSensorStream
  def query_interface(this : IMFSensorStream*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSensorStream*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSensorStream*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_item(this : IMFSensorStream*, guidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item.call(this, guidkey, pvalue)
  end
  def get_item_type(this : IMFSensorStream*, guidkey : Guid*, ptype : MF_ATTRIBUTE_TYPE*) : HRESULT
    @lpVtbl.value.get_item_type.call(this, guidkey, ptype)
  end
  def compare_item(this : IMFSensorStream*, guidkey : Guid*, value : PROPVARIANT*, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare_item.call(this, guidkey, value, pbresult)
  end
  def compare(this : IMFSensorStream*, ptheirs : IMFAttributes, matchtype : MF_ATTRIBUTES_MATCH_TYPE, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare.call(this, ptheirs, matchtype, pbresult)
  end
  def get_uint32(this : IMFSensorStream*, guidkey : Guid*, punvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_uint32.call(this, guidkey, punvalue)
  end
  def get_uint64(this : IMFSensorStream*, guidkey : Guid*, punvalue : UInt64*) : HRESULT
    @lpVtbl.value.get_uint64.call(this, guidkey, punvalue)
  end
  def get_double(this : IMFSensorStream*, guidkey : Guid*, pfvalue : Float64*) : HRESULT
    @lpVtbl.value.get_double.call(this, guidkey, pfvalue)
  end
  def get_guid(this : IMFSensorStream*, guidkey : Guid*, pguidvalue : Guid*) : HRESULT
    @lpVtbl.value.get_guid.call(this, guidkey, pguidvalue)
  end
  def get_string_length(this : IMFSensorStream*, guidkey : Guid*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string_length.call(this, guidkey, pcchlength)
  end
  def get_string(this : IMFSensorStream*, guidkey : Guid*, pwszvalue : Char*, cchbufsize : UInt32, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string.call(this, guidkey, pwszvalue, cchbufsize, pcchlength)
  end
  def get_allocated_string(this : IMFSensorStream*, guidkey : Guid*, ppwszvalue : LibC::LPWSTR*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_string.call(this, guidkey, ppwszvalue, pcchlength)
  end
  def get_blob_size(this : IMFSensorStream*, guidkey : Guid*, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob_size.call(this, guidkey, pcbblobsize)
  end
  def get_blob(this : IMFSensorStream*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob.call(this, guidkey, pbuf, cbbufsize, pcbblobsize)
  end
  def get_allocated_blob(this : IMFSensorStream*, guidkey : Guid*, ppbuf : UInt8**, pcbsize : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_blob.call(this, guidkey, ppbuf, pcbsize)
  end
  def get_unknown(this : IMFSensorStream*, guidkey : Guid*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_unknown.call(this, guidkey, riid, ppv)
  end
  def set_item(this : IMFSensorStream*, guidkey : Guid*, value : PROPVARIANT*) : HRESULT
    @lpVtbl.value.set_item.call(this, guidkey, value)
  end
  def delete_item(this : IMFSensorStream*, guidkey : Guid*) : HRESULT
    @lpVtbl.value.delete_item.call(this, guidkey)
  end
  def delete_all_items(this : IMFSensorStream*) : HRESULT
    @lpVtbl.value.delete_all_items.call(this)
  end
  def set_uint32(this : IMFSensorStream*, guidkey : Guid*, unvalue : UInt32) : HRESULT
    @lpVtbl.value.set_uint32.call(this, guidkey, unvalue)
  end
  def set_uint64(this : IMFSensorStream*, guidkey : Guid*, unvalue : UInt64) : HRESULT
    @lpVtbl.value.set_uint64.call(this, guidkey, unvalue)
  end
  def set_double(this : IMFSensorStream*, guidkey : Guid*, fvalue : Float64) : HRESULT
    @lpVtbl.value.set_double.call(this, guidkey, fvalue)
  end
  def set_guid(this : IMFSensorStream*, guidkey : Guid*, guidvalue : Guid*) : HRESULT
    @lpVtbl.value.set_guid.call(this, guidkey, guidvalue)
  end
  def set_string(this : IMFSensorStream*, guidkey : Guid*, wszvalue : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_string.call(this, guidkey, wszvalue)
  end
  def set_blob(this : IMFSensorStream*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32) : HRESULT
    @lpVtbl.value.set_blob.call(this, guidkey, pbuf, cbbufsize)
  end
  def set_unknown(this : IMFSensorStream*, guidkey : Guid*, punknown : IUnknown) : HRESULT
    @lpVtbl.value.set_unknown.call(this, guidkey, punknown)
  end
  def lock_store(this : IMFSensorStream*) : HRESULT
    @lpVtbl.value.lock_store.call(this)
  end
  def unlock_store(this : IMFSensorStream*) : HRESULT
    @lpVtbl.value.unlock_store.call(this)
  end
  def get_count(this : IMFSensorStream*, pcitems : UInt32*) : HRESULT
    @lpVtbl.value.get_count.call(this, pcitems)
  end
  def get_item_by_index(this : IMFSensorStream*, unindex : UInt32, pguidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item_by_index.call(this, unindex, pguidkey, pvalue)
  end
  def copy_all_items(this : IMFSensorStream*, pdest : IMFAttributes) : HRESULT
    @lpVtbl.value.copy_all_items.call(this, pdest)
  end
  def get_media_type_count(this : IMFSensorStream*, pdwcount : UInt32*) : HRESULT
    @lpVtbl.value.get_media_type_count.call(this, pdwcount)
  end
  def get_media_type(this : IMFSensorStream*, dwindex : UInt32, ppmediatype : IMFMediaType*) : HRESULT
    @lpVtbl.value.get_media_type.call(this, dwindex, ppmediatype)
  end
  def clone_sensor_stream(this : IMFSensorStream*, ppstream : IMFSensorStream*) : HRESULT
    @lpVtbl.value.clone_sensor_stream.call(this, ppstream)
  end
end
struct LibWin32::IMFSensorTransformFactory
  def query_interface(this : IMFSensorTransformFactory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSensorTransformFactory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSensorTransformFactory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_factory_attributes(this : IMFSensorTransformFactory*, ppattributes : IMFAttributes*) : HRESULT
    @lpVtbl.value.get_factory_attributes.call(this, ppattributes)
  end
  def initialize_factory(this : IMFSensorTransformFactory*, dwmaxtransformcount : UInt32, psensordevices : IMFCollection, pattributes : IMFAttributes) : HRESULT
    @lpVtbl.value.initialize_factory.call(this, dwmaxtransformcount, psensordevices, pattributes)
  end
  def get_transform_count(this : IMFSensorTransformFactory*, pdwcount : UInt32*) : HRESULT
    @lpVtbl.value.get_transform_count.call(this, pdwcount)
  end
  def get_transform_information(this : IMFSensorTransformFactory*, transformindex : UInt32, pguidtransformid : Guid*, ppattributes : IMFAttributes*, ppstreaminformation : IMFCollection*) : HRESULT
    @lpVtbl.value.get_transform_information.call(this, transformindex, pguidtransformid, ppattributes, ppstreaminformation)
  end
  def create_transform(this : IMFSensorTransformFactory*, guidsensortransformid : Guid*, pattributes : IMFAttributes, ppdevicemft : IMFDeviceTransform*) : HRESULT
    @lpVtbl.value.create_transform.call(this, guidsensortransformid, pattributes, ppdevicemft)
  end
end
struct LibWin32::IMFSensorProfile
  def query_interface(this : IMFSensorProfile*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSensorProfile*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSensorProfile*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_profile_id(this : IMFSensorProfile*, pid : SENSORPROFILEID*) : HRESULT
    @lpVtbl.value.get_profile_id.call(this, pid)
  end
  def add_profile_filter(this : IMFSensorProfile*, streamid : UInt32, wzfiltersetstring : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.add_profile_filter.call(this, streamid, wzfiltersetstring)
  end
  def is_media_type_supported(this : IMFSensorProfile*, streamid : UInt32, pmediatype : IMFMediaType, pfsupported : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_media_type_supported.call(this, streamid, pmediatype, pfsupported)
  end
  def add_blocked_control(this : IMFSensorProfile*, wzblockedcontrol : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.add_blocked_control.call(this, wzblockedcontrol)
  end
end
struct LibWin32::IMFSensorProfileCollection
  def query_interface(this : IMFSensorProfileCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSensorProfileCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSensorProfileCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_profile_count(this : IMFSensorProfileCollection*) : UInt32
    @lpVtbl.value.get_profile_count.call(this)
  end
  def get_profile(this : IMFSensorProfileCollection*, index : UInt32, ppprofile : IMFSensorProfile*) : HRESULT
    @lpVtbl.value.get_profile.call(this, index, ppprofile)
  end
  def add_profile(this : IMFSensorProfileCollection*, pprofile : IMFSensorProfile) : HRESULT
    @lpVtbl.value.add_profile.call(this, pprofile)
  end
  def find_profile(this : IMFSensorProfileCollection*, profileid : SENSORPROFILEID*, ppprofile : IMFSensorProfile*) : HRESULT
    @lpVtbl.value.find_profile.call(this, profileid, ppprofile)
  end
  def remove_profile_by_index(this : IMFSensorProfileCollection*, index : UInt32) : Void
    @lpVtbl.value.remove_profile_by_index.call(this, index)
  end
  def remove_profile(this : IMFSensorProfileCollection*, profileid : SENSORPROFILEID*) : Void
    @lpVtbl.value.remove_profile.call(this, profileid)
  end
end
struct LibWin32::IMFSensorProcessActivity
  def query_interface(this : IMFSensorProcessActivity*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSensorProcessActivity*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSensorProcessActivity*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_process_id(this : IMFSensorProcessActivity*, ppid : UInt32*) : HRESULT
    @lpVtbl.value.get_process_id.call(this, ppid)
  end
  def get_streaming_state(this : IMFSensorProcessActivity*, pfstreaming : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_streaming_state.call(this, pfstreaming)
  end
  def get_streaming_mode(this : IMFSensorProcessActivity*, pmode : MFSensorDeviceMode*) : HRESULT
    @lpVtbl.value.get_streaming_mode.call(this, pmode)
  end
  def get_report_time(this : IMFSensorProcessActivity*, pft : FILETIME*) : HRESULT
    @lpVtbl.value.get_report_time.call(this, pft)
  end
end
struct LibWin32::IMFSensorActivityReport
  def query_interface(this : IMFSensorActivityReport*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSensorActivityReport*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSensorActivityReport*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_friendly_name(this : IMFSensorActivityReport*, friendlyname : Char*, cchfriendlyname : UInt32, pcchwritten : UInt32*) : HRESULT
    @lpVtbl.value.get_friendly_name.call(this, friendlyname, cchfriendlyname, pcchwritten)
  end
  def get_symbolic_link(this : IMFSensorActivityReport*, symboliclink : Char*, cchsymboliclink : UInt32, pcchwritten : UInt32*) : HRESULT
    @lpVtbl.value.get_symbolic_link.call(this, symboliclink, cchsymboliclink, pcchwritten)
  end
  def get_process_count(this : IMFSensorActivityReport*, pccount : UInt32*) : HRESULT
    @lpVtbl.value.get_process_count.call(this, pccount)
  end
  def get_process_activity(this : IMFSensorActivityReport*, index : UInt32, ppprocessactivity : IMFSensorProcessActivity*) : HRESULT
    @lpVtbl.value.get_process_activity.call(this, index, ppprocessactivity)
  end
end
struct LibWin32::IMFSensorActivitiesReport
  def query_interface(this : IMFSensorActivitiesReport*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSensorActivitiesReport*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSensorActivitiesReport*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_count(this : IMFSensorActivitiesReport*, pccount : UInt32*) : HRESULT
    @lpVtbl.value.get_count.call(this, pccount)
  end
  def get_activity_report(this : IMFSensorActivitiesReport*, index : UInt32, sensoractivityreport : IMFSensorActivityReport*) : HRESULT
    @lpVtbl.value.get_activity_report.call(this, index, sensoractivityreport)
  end
  def get_activity_report_by_device_name(this : IMFSensorActivitiesReport*, symbolicname : LibC::LPWSTR, sensoractivityreport : IMFSensorActivityReport*) : HRESULT
    @lpVtbl.value.get_activity_report_by_device_name.call(this, symbolicname, sensoractivityreport)
  end
end
struct LibWin32::IMFSensorActivitiesReportCallback
  def query_interface(this : IMFSensorActivitiesReportCallback*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSensorActivitiesReportCallback*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSensorActivitiesReportCallback*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_activities_report(this : IMFSensorActivitiesReportCallback*, sensoractivitiesreport : IMFSensorActivitiesReport) : HRESULT
    @lpVtbl.value.on_activities_report.call(this, sensoractivitiesreport)
  end
end
struct LibWin32::IMFSensorActivityMonitor
  def query_interface(this : IMFSensorActivityMonitor*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSensorActivityMonitor*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSensorActivityMonitor*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def start(this : IMFSensorActivityMonitor*) : HRESULT
    @lpVtbl.value.start.call(this)
  end
  def stop(this : IMFSensorActivityMonitor*) : HRESULT
    @lpVtbl.value.stop.call(this)
  end
end
struct LibWin32::IMFExtendedCameraIntrinsicModel
  def query_interface(this : IMFExtendedCameraIntrinsicModel*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFExtendedCameraIntrinsicModel*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFExtendedCameraIntrinsicModel*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_model(this : IMFExtendedCameraIntrinsicModel*, pintrinsicmodel : MFExtendedCameraIntrinsic_IntrinsicModel*) : HRESULT
    @lpVtbl.value.get_model.call(this, pintrinsicmodel)
  end
  def set_model(this : IMFExtendedCameraIntrinsicModel*, pintrinsicmodel : MFExtendedCameraIntrinsic_IntrinsicModel*) : HRESULT
    @lpVtbl.value.set_model.call(this, pintrinsicmodel)
  end
  def get_distortion_model_type(this : IMFExtendedCameraIntrinsicModel*, pdistortionmodeltype : MFCameraIntrinsic_DistortionModelType*) : HRESULT
    @lpVtbl.value.get_distortion_model_type.call(this, pdistortionmodeltype)
  end
end
struct LibWin32::IMFExtendedCameraIntrinsicsDistortionModel6KT
  def query_interface(this : IMFExtendedCameraIntrinsicsDistortionModel6KT*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFExtendedCameraIntrinsicsDistortionModel6KT*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFExtendedCameraIntrinsicsDistortionModel6KT*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_distortion_model(this : IMFExtendedCameraIntrinsicsDistortionModel6KT*, pdistortionmodel : MFCameraIntrinsic_DistortionModel6KT*) : HRESULT
    @lpVtbl.value.get_distortion_model.call(this, pdistortionmodel)
  end
  def set_distortion_model(this : IMFExtendedCameraIntrinsicsDistortionModel6KT*, pdistortionmodel : MFCameraIntrinsic_DistortionModel6KT*) : HRESULT
    @lpVtbl.value.set_distortion_model.call(this, pdistortionmodel)
  end
end
struct LibWin32::IMFExtendedCameraIntrinsicsDistortionModelArcTan
  def query_interface(this : IMFExtendedCameraIntrinsicsDistortionModelArcTan*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFExtendedCameraIntrinsicsDistortionModelArcTan*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFExtendedCameraIntrinsicsDistortionModelArcTan*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_distortion_model(this : IMFExtendedCameraIntrinsicsDistortionModelArcTan*, pdistortionmodel : MFCameraIntrinsic_DistortionModelArcTan*) : HRESULT
    @lpVtbl.value.get_distortion_model.call(this, pdistortionmodel)
  end
  def set_distortion_model(this : IMFExtendedCameraIntrinsicsDistortionModelArcTan*, pdistortionmodel : MFCameraIntrinsic_DistortionModelArcTan*) : HRESULT
    @lpVtbl.value.set_distortion_model.call(this, pdistortionmodel)
  end
end
struct LibWin32::IMFExtendedCameraIntrinsics
  def query_interface(this : IMFExtendedCameraIntrinsics*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFExtendedCameraIntrinsics*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFExtendedCameraIntrinsics*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def initialize_from_buffer(this : IMFExtendedCameraIntrinsics*, pbbuffer : UInt8*, dwbuffersize : UInt32) : HRESULT
    @lpVtbl.value.initialize_from_buffer.call(this, pbbuffer, dwbuffersize)
  end
  def get_buffer_size(this : IMFExtendedCameraIntrinsics*, pdwbuffersize : UInt32*) : HRESULT
    @lpVtbl.value.get_buffer_size.call(this, pdwbuffersize)
  end
  def serialize_to_buffer(this : IMFExtendedCameraIntrinsics*, pbbuffer : UInt8*, pdwbuffersize : UInt32*) : HRESULT
    @lpVtbl.value.serialize_to_buffer.call(this, pbbuffer, pdwbuffersize)
  end
  def get_intrinsic_model_count(this : IMFExtendedCameraIntrinsics*, pdwcount : UInt32*) : HRESULT
    @lpVtbl.value.get_intrinsic_model_count.call(this, pdwcount)
  end
  def get_intrinsic_model_by_index(this : IMFExtendedCameraIntrinsics*, dwindex : UInt32, ppintrinsicmodel : IMFExtendedCameraIntrinsicModel*) : HRESULT
    @lpVtbl.value.get_intrinsic_model_by_index.call(this, dwindex, ppintrinsicmodel)
  end
  def add_intrinsic_model(this : IMFExtendedCameraIntrinsics*, pintrinsicmodel : IMFExtendedCameraIntrinsicModel) : HRESULT
    @lpVtbl.value.add_intrinsic_model.call(this, pintrinsicmodel)
  end
end
struct LibWin32::IMFExtendedCameraControl
  def query_interface(this : IMFExtendedCameraControl*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFExtendedCameraControl*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFExtendedCameraControl*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_capabilities(this : IMFExtendedCameraControl*) : UInt64
    @lpVtbl.value.get_capabilities.call(this)
  end
  def set_flags(this : IMFExtendedCameraControl*, ulflags : UInt64) : HRESULT
    @lpVtbl.value.set_flags.call(this, ulflags)
  end
  def get_flags(this : IMFExtendedCameraControl*) : UInt64
    @lpVtbl.value.get_flags.call(this)
  end
  def lock_payload(this : IMFExtendedCameraControl*, pppayload : UInt8**, pulpayload : UInt32*) : HRESULT
    @lpVtbl.value.lock_payload.call(this, pppayload, pulpayload)
  end
  def unlock_payload(this : IMFExtendedCameraControl*) : HRESULT
    @lpVtbl.value.unlock_payload.call(this)
  end
  def commit_settings(this : IMFExtendedCameraControl*) : HRESULT
    @lpVtbl.value.commit_settings.call(this)
  end
end
struct LibWin32::IMFExtendedCameraController
  def query_interface(this : IMFExtendedCameraController*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFExtendedCameraController*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFExtendedCameraController*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_extended_camera_control(this : IMFExtendedCameraController*, dwstreamindex : UInt32, ulpropertyid : UInt32, ppcontrol : IMFExtendedCameraControl*) : HRESULT
    @lpVtbl.value.get_extended_camera_control.call(this, dwstreamindex, ulpropertyid, ppcontrol)
  end
end
struct LibWin32::IMFRelativePanelReport
  def query_interface(this : IMFRelativePanelReport*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFRelativePanelReport*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFRelativePanelReport*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_relative_panel(this : IMFRelativePanelReport*, panel : UInt32*) : HRESULT
    @lpVtbl.value.get_relative_panel.call(this, panel)
  end
end
struct LibWin32::IMFRelativePanelWatcher
  def query_interface(this : IMFRelativePanelWatcher*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFRelativePanelWatcher*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFRelativePanelWatcher*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def shutdown(this : IMFRelativePanelWatcher*) : HRESULT
    @lpVtbl.value.shutdown.call(this)
  end
  def get_shutdown_status(this : IMFRelativePanelWatcher*, pstatus : MFSHUTDOWN_STATUS*) : HRESULT
    @lpVtbl.value.get_shutdown_status.call(this, pstatus)
  end
  def begin_get_report(this : IMFRelativePanelWatcher*, pcallback : IMFAsyncCallback, pstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_get_report.call(this, pcallback, pstate)
  end
  def end_get_report(this : IMFRelativePanelWatcher*, presult : IMFAsyncResult, pprelativepanelreport : IMFRelativePanelReport*) : HRESULT
    @lpVtbl.value.end_get_report.call(this, presult, pprelativepanelreport)
  end
  def get_report(this : IMFRelativePanelWatcher*, pprelativepanelreport : IMFRelativePanelReport*) : HRESULT
    @lpVtbl.value.get_report.call(this, pprelativepanelreport)
  end
end
struct LibWin32::IMFCameraOcclusionStateReport
  def query_interface(this : IMFCameraOcclusionStateReport*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFCameraOcclusionStateReport*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFCameraOcclusionStateReport*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_occlusion_state(this : IMFCameraOcclusionStateReport*, occlusionstate : UInt32*) : HRESULT
    @lpVtbl.value.get_occlusion_state.call(this, occlusionstate)
  end
end
struct LibWin32::IMFCameraOcclusionStateReportCallback
  def query_interface(this : IMFCameraOcclusionStateReportCallback*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFCameraOcclusionStateReportCallback*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFCameraOcclusionStateReportCallback*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_occlusion_state_report(this : IMFCameraOcclusionStateReportCallback*, occlusionstatereport : IMFCameraOcclusionStateReport) : HRESULT
    @lpVtbl.value.on_occlusion_state_report.call(this, occlusionstatereport)
  end
end
struct LibWin32::IMFCameraOcclusionStateMonitor
  def query_interface(this : IMFCameraOcclusionStateMonitor*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFCameraOcclusionStateMonitor*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFCameraOcclusionStateMonitor*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def start(this : IMFCameraOcclusionStateMonitor*) : HRESULT
    @lpVtbl.value.start.call(this)
  end
  def stop(this : IMFCameraOcclusionStateMonitor*) : HRESULT
    @lpVtbl.value.stop.call(this)
  end
  def get_supported_states(this : IMFCameraOcclusionStateMonitor*) : UInt32
    @lpVtbl.value.get_supported_states.call(this)
  end
end
struct LibWin32::IMFVideoCaptureSampleAllocator
  def query_interface(this : IMFVideoCaptureSampleAllocator*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFVideoCaptureSampleAllocator*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFVideoCaptureSampleAllocator*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_direct_x_manager(this : IMFVideoCaptureSampleAllocator*, pmanager : IUnknown) : HRESULT
    @lpVtbl.value.set_direct_x_manager.call(this, pmanager)
  end
  def uninitialize_sample_allocator(this : IMFVideoCaptureSampleAllocator*) : HRESULT
    @lpVtbl.value.uninitialize_sample_allocator.call(this)
  end
  def initialize_sample_allocator(this : IMFVideoCaptureSampleAllocator*, crequestedframes : UInt32, pmediatype : IMFMediaType) : HRESULT
    @lpVtbl.value.initialize_sample_allocator.call(this, crequestedframes, pmediatype)
  end
  def allocate_sample(this : IMFVideoCaptureSampleAllocator*, ppsample : IMFSample*) : HRESULT
    @lpVtbl.value.allocate_sample.call(this, ppsample)
  end
  def initialize_capture_sample_allocator(this : IMFVideoCaptureSampleAllocator*, cbsamplesize : UInt32, cbcapturemetadatasize : UInt32, cbalignment : UInt32, cminimumsamples : UInt32, pattributes : IMFAttributes, pmediatype : IMFMediaType) : HRESULT
    @lpVtbl.value.initialize_capture_sample_allocator.call(this, cbsamplesize, cbcapturemetadatasize, cbalignment, cminimumsamples, pattributes, pmediatype)
  end
end
struct LibWin32::IMFSampleAllocatorControl
  def query_interface(this : IMFSampleAllocatorControl*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSampleAllocatorControl*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSampleAllocatorControl*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_default_allocator(this : IMFSampleAllocatorControl*, dwoutputstreamid : UInt32, pallocator : IUnknown) : HRESULT
    @lpVtbl.value.set_default_allocator.call(this, dwoutputstreamid, pallocator)
  end
  def get_allocator_usage(this : IMFSampleAllocatorControl*, dwoutputstreamid : UInt32, pdwinputstreamid : UInt32*, peusage : MFSampleAllocatorUsage*) : HRESULT
    @lpVtbl.value.get_allocator_usage.call(this, dwoutputstreamid, pdwinputstreamid, peusage)
  end
end
struct LibWin32::IMFASFContentInfo
  def query_interface(this : IMFASFContentInfo*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFASFContentInfo*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFASFContentInfo*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_header_size(this : IMFASFContentInfo*, pistartofcontent : IMFMediaBuffer, cbheadersize : UInt64*) : HRESULT
    @lpVtbl.value.get_header_size.call(this, pistartofcontent, cbheadersize)
  end
  def parse_header(this : IMFASFContentInfo*, piheaderbuffer : IMFMediaBuffer, cboffsetwithinheader : UInt64) : HRESULT
    @lpVtbl.value.parse_header.call(this, piheaderbuffer, cboffsetwithinheader)
  end
  def generate_header(this : IMFASFContentInfo*, piheader : IMFMediaBuffer, pcbheader : UInt32*) : HRESULT
    @lpVtbl.value.generate_header.call(this, piheader, pcbheader)
  end
  def get_profile(this : IMFASFContentInfo*, ppiprofile : IMFASFProfile*) : HRESULT
    @lpVtbl.value.get_profile.call(this, ppiprofile)
  end
  def set_profile(this : IMFASFContentInfo*, piprofile : IMFASFProfile) : HRESULT
    @lpVtbl.value.set_profile.call(this, piprofile)
  end
  def generate_presentation_descriptor(this : IMFASFContentInfo*, ppipresentationdescriptor : IMFPresentationDescriptor*) : HRESULT
    @lpVtbl.value.generate_presentation_descriptor.call(this, ppipresentationdescriptor)
  end
  def get_encoding_configuration_property_store(this : IMFASFContentInfo*, wstreamnumber : UInt16, ppistore : IPropertyStore*) : HRESULT
    @lpVtbl.value.get_encoding_configuration_property_store.call(this, wstreamnumber, ppistore)
  end
end
struct LibWin32::IMFASFProfile
  def query_interface(this : IMFASFProfile*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFASFProfile*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFASFProfile*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_item(this : IMFASFProfile*, guidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item.call(this, guidkey, pvalue)
  end
  def get_item_type(this : IMFASFProfile*, guidkey : Guid*, ptype : MF_ATTRIBUTE_TYPE*) : HRESULT
    @lpVtbl.value.get_item_type.call(this, guidkey, ptype)
  end
  def compare_item(this : IMFASFProfile*, guidkey : Guid*, value : PROPVARIANT*, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare_item.call(this, guidkey, value, pbresult)
  end
  def compare(this : IMFASFProfile*, ptheirs : IMFAttributes, matchtype : MF_ATTRIBUTES_MATCH_TYPE, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare.call(this, ptheirs, matchtype, pbresult)
  end
  def get_uint32(this : IMFASFProfile*, guidkey : Guid*, punvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_uint32.call(this, guidkey, punvalue)
  end
  def get_uint64(this : IMFASFProfile*, guidkey : Guid*, punvalue : UInt64*) : HRESULT
    @lpVtbl.value.get_uint64.call(this, guidkey, punvalue)
  end
  def get_double(this : IMFASFProfile*, guidkey : Guid*, pfvalue : Float64*) : HRESULT
    @lpVtbl.value.get_double.call(this, guidkey, pfvalue)
  end
  def get_guid(this : IMFASFProfile*, guidkey : Guid*, pguidvalue : Guid*) : HRESULT
    @lpVtbl.value.get_guid.call(this, guidkey, pguidvalue)
  end
  def get_string_length(this : IMFASFProfile*, guidkey : Guid*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string_length.call(this, guidkey, pcchlength)
  end
  def get_string(this : IMFASFProfile*, guidkey : Guid*, pwszvalue : Char*, cchbufsize : UInt32, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string.call(this, guidkey, pwszvalue, cchbufsize, pcchlength)
  end
  def get_allocated_string(this : IMFASFProfile*, guidkey : Guid*, ppwszvalue : LibC::LPWSTR*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_string.call(this, guidkey, ppwszvalue, pcchlength)
  end
  def get_blob_size(this : IMFASFProfile*, guidkey : Guid*, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob_size.call(this, guidkey, pcbblobsize)
  end
  def get_blob(this : IMFASFProfile*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob.call(this, guidkey, pbuf, cbbufsize, pcbblobsize)
  end
  def get_allocated_blob(this : IMFASFProfile*, guidkey : Guid*, ppbuf : UInt8**, pcbsize : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_blob.call(this, guidkey, ppbuf, pcbsize)
  end
  def get_unknown(this : IMFASFProfile*, guidkey : Guid*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_unknown.call(this, guidkey, riid, ppv)
  end
  def set_item(this : IMFASFProfile*, guidkey : Guid*, value : PROPVARIANT*) : HRESULT
    @lpVtbl.value.set_item.call(this, guidkey, value)
  end
  def delete_item(this : IMFASFProfile*, guidkey : Guid*) : HRESULT
    @lpVtbl.value.delete_item.call(this, guidkey)
  end
  def delete_all_items(this : IMFASFProfile*) : HRESULT
    @lpVtbl.value.delete_all_items.call(this)
  end
  def set_uint32(this : IMFASFProfile*, guidkey : Guid*, unvalue : UInt32) : HRESULT
    @lpVtbl.value.set_uint32.call(this, guidkey, unvalue)
  end
  def set_uint64(this : IMFASFProfile*, guidkey : Guid*, unvalue : UInt64) : HRESULT
    @lpVtbl.value.set_uint64.call(this, guidkey, unvalue)
  end
  def set_double(this : IMFASFProfile*, guidkey : Guid*, fvalue : Float64) : HRESULT
    @lpVtbl.value.set_double.call(this, guidkey, fvalue)
  end
  def set_guid(this : IMFASFProfile*, guidkey : Guid*, guidvalue : Guid*) : HRESULT
    @lpVtbl.value.set_guid.call(this, guidkey, guidvalue)
  end
  def set_string(this : IMFASFProfile*, guidkey : Guid*, wszvalue : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_string.call(this, guidkey, wszvalue)
  end
  def set_blob(this : IMFASFProfile*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32) : HRESULT
    @lpVtbl.value.set_blob.call(this, guidkey, pbuf, cbbufsize)
  end
  def set_unknown(this : IMFASFProfile*, guidkey : Guid*, punknown : IUnknown) : HRESULT
    @lpVtbl.value.set_unknown.call(this, guidkey, punknown)
  end
  def lock_store(this : IMFASFProfile*) : HRESULT
    @lpVtbl.value.lock_store.call(this)
  end
  def unlock_store(this : IMFASFProfile*) : HRESULT
    @lpVtbl.value.unlock_store.call(this)
  end
  def get_count(this : IMFASFProfile*, pcitems : UInt32*) : HRESULT
    @lpVtbl.value.get_count.call(this, pcitems)
  end
  def get_item_by_index(this : IMFASFProfile*, unindex : UInt32, pguidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item_by_index.call(this, unindex, pguidkey, pvalue)
  end
  def copy_all_items(this : IMFASFProfile*, pdest : IMFAttributes) : HRESULT
    @lpVtbl.value.copy_all_items.call(this, pdest)
  end
  def get_stream_count(this : IMFASFProfile*, pcstreams : UInt32*) : HRESULT
    @lpVtbl.value.get_stream_count.call(this, pcstreams)
  end
  def get_stream(this : IMFASFProfile*, dwstreamindex : UInt32, pwstreamnumber : UInt16*, ppistream : IMFASFStreamConfig*) : HRESULT
    @lpVtbl.value.get_stream.call(this, dwstreamindex, pwstreamnumber, ppistream)
  end
  def get_stream_by_number(this : IMFASFProfile*, wstreamnumber : UInt16, ppistream : IMFASFStreamConfig*) : HRESULT
    @lpVtbl.value.get_stream_by_number.call(this, wstreamnumber, ppistream)
  end
  def set_stream(this : IMFASFProfile*, pistream : IMFASFStreamConfig) : HRESULT
    @lpVtbl.value.set_stream.call(this, pistream)
  end
  def remove_stream(this : IMFASFProfile*, wstreamnumber : UInt16) : HRESULT
    @lpVtbl.value.remove_stream.call(this, wstreamnumber)
  end
  def create_stream(this : IMFASFProfile*, pimediatype : IMFMediaType, ppistream : IMFASFStreamConfig*) : HRESULT
    @lpVtbl.value.create_stream.call(this, pimediatype, ppistream)
  end
  def get_mutual_exclusion_count(this : IMFASFProfile*, pcmutexs : UInt32*) : HRESULT
    @lpVtbl.value.get_mutual_exclusion_count.call(this, pcmutexs)
  end
  def get_mutual_exclusion(this : IMFASFProfile*, dwmutexindex : UInt32, ppimutex : IMFASFMutualExclusion*) : HRESULT
    @lpVtbl.value.get_mutual_exclusion.call(this, dwmutexindex, ppimutex)
  end
  def add_mutual_exclusion(this : IMFASFProfile*, pimutex : IMFASFMutualExclusion) : HRESULT
    @lpVtbl.value.add_mutual_exclusion.call(this, pimutex)
  end
  def remove_mutual_exclusion(this : IMFASFProfile*, dwmutexindex : UInt32) : HRESULT
    @lpVtbl.value.remove_mutual_exclusion.call(this, dwmutexindex)
  end
  def create_mutual_exclusion(this : IMFASFProfile*, ppimutex : IMFASFMutualExclusion*) : HRESULT
    @lpVtbl.value.create_mutual_exclusion.call(this, ppimutex)
  end
  def get_stream_prioritization(this : IMFASFProfile*, ppistreamprioritization : IMFASFStreamPrioritization*) : HRESULT
    @lpVtbl.value.get_stream_prioritization.call(this, ppistreamprioritization)
  end
  def add_stream_prioritization(this : IMFASFProfile*, pistreamprioritization : IMFASFStreamPrioritization) : HRESULT
    @lpVtbl.value.add_stream_prioritization.call(this, pistreamprioritization)
  end
  def remove_stream_prioritization(this : IMFASFProfile*) : HRESULT
    @lpVtbl.value.remove_stream_prioritization.call(this)
  end
  def create_stream_prioritization(this : IMFASFProfile*, ppistreamprioritization : IMFASFStreamPrioritization*) : HRESULT
    @lpVtbl.value.create_stream_prioritization.call(this, ppistreamprioritization)
  end
  def clone(this : IMFASFProfile*, ppiprofile : IMFASFProfile*) : HRESULT
    @lpVtbl.value.clone.call(this, ppiprofile)
  end
end
struct LibWin32::IMFASFStreamConfig
  def query_interface(this : IMFASFStreamConfig*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFASFStreamConfig*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFASFStreamConfig*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_item(this : IMFASFStreamConfig*, guidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item.call(this, guidkey, pvalue)
  end
  def get_item_type(this : IMFASFStreamConfig*, guidkey : Guid*, ptype : MF_ATTRIBUTE_TYPE*) : HRESULT
    @lpVtbl.value.get_item_type.call(this, guidkey, ptype)
  end
  def compare_item(this : IMFASFStreamConfig*, guidkey : Guid*, value : PROPVARIANT*, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare_item.call(this, guidkey, value, pbresult)
  end
  def compare(this : IMFASFStreamConfig*, ptheirs : IMFAttributes, matchtype : MF_ATTRIBUTES_MATCH_TYPE, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare.call(this, ptheirs, matchtype, pbresult)
  end
  def get_uint32(this : IMFASFStreamConfig*, guidkey : Guid*, punvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_uint32.call(this, guidkey, punvalue)
  end
  def get_uint64(this : IMFASFStreamConfig*, guidkey : Guid*, punvalue : UInt64*) : HRESULT
    @lpVtbl.value.get_uint64.call(this, guidkey, punvalue)
  end
  def get_double(this : IMFASFStreamConfig*, guidkey : Guid*, pfvalue : Float64*) : HRESULT
    @lpVtbl.value.get_double.call(this, guidkey, pfvalue)
  end
  def get_guid(this : IMFASFStreamConfig*, guidkey : Guid*, pguidvalue : Guid*) : HRESULT
    @lpVtbl.value.get_guid.call(this, guidkey, pguidvalue)
  end
  def get_string_length(this : IMFASFStreamConfig*, guidkey : Guid*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string_length.call(this, guidkey, pcchlength)
  end
  def get_string(this : IMFASFStreamConfig*, guidkey : Guid*, pwszvalue : Char*, cchbufsize : UInt32, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string.call(this, guidkey, pwszvalue, cchbufsize, pcchlength)
  end
  def get_allocated_string(this : IMFASFStreamConfig*, guidkey : Guid*, ppwszvalue : LibC::LPWSTR*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_string.call(this, guidkey, ppwszvalue, pcchlength)
  end
  def get_blob_size(this : IMFASFStreamConfig*, guidkey : Guid*, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob_size.call(this, guidkey, pcbblobsize)
  end
  def get_blob(this : IMFASFStreamConfig*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob.call(this, guidkey, pbuf, cbbufsize, pcbblobsize)
  end
  def get_allocated_blob(this : IMFASFStreamConfig*, guidkey : Guid*, ppbuf : UInt8**, pcbsize : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_blob.call(this, guidkey, ppbuf, pcbsize)
  end
  def get_unknown(this : IMFASFStreamConfig*, guidkey : Guid*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_unknown.call(this, guidkey, riid, ppv)
  end
  def set_item(this : IMFASFStreamConfig*, guidkey : Guid*, value : PROPVARIANT*) : HRESULT
    @lpVtbl.value.set_item.call(this, guidkey, value)
  end
  def delete_item(this : IMFASFStreamConfig*, guidkey : Guid*) : HRESULT
    @lpVtbl.value.delete_item.call(this, guidkey)
  end
  def delete_all_items(this : IMFASFStreamConfig*) : HRESULT
    @lpVtbl.value.delete_all_items.call(this)
  end
  def set_uint32(this : IMFASFStreamConfig*, guidkey : Guid*, unvalue : UInt32) : HRESULT
    @lpVtbl.value.set_uint32.call(this, guidkey, unvalue)
  end
  def set_uint64(this : IMFASFStreamConfig*, guidkey : Guid*, unvalue : UInt64) : HRESULT
    @lpVtbl.value.set_uint64.call(this, guidkey, unvalue)
  end
  def set_double(this : IMFASFStreamConfig*, guidkey : Guid*, fvalue : Float64) : HRESULT
    @lpVtbl.value.set_double.call(this, guidkey, fvalue)
  end
  def set_guid(this : IMFASFStreamConfig*, guidkey : Guid*, guidvalue : Guid*) : HRESULT
    @lpVtbl.value.set_guid.call(this, guidkey, guidvalue)
  end
  def set_string(this : IMFASFStreamConfig*, guidkey : Guid*, wszvalue : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_string.call(this, guidkey, wszvalue)
  end
  def set_blob(this : IMFASFStreamConfig*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32) : HRESULT
    @lpVtbl.value.set_blob.call(this, guidkey, pbuf, cbbufsize)
  end
  def set_unknown(this : IMFASFStreamConfig*, guidkey : Guid*, punknown : IUnknown) : HRESULT
    @lpVtbl.value.set_unknown.call(this, guidkey, punknown)
  end
  def lock_store(this : IMFASFStreamConfig*) : HRESULT
    @lpVtbl.value.lock_store.call(this)
  end
  def unlock_store(this : IMFASFStreamConfig*) : HRESULT
    @lpVtbl.value.unlock_store.call(this)
  end
  def get_count(this : IMFASFStreamConfig*, pcitems : UInt32*) : HRESULT
    @lpVtbl.value.get_count.call(this, pcitems)
  end
  def get_item_by_index(this : IMFASFStreamConfig*, unindex : UInt32, pguidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item_by_index.call(this, unindex, pguidkey, pvalue)
  end
  def copy_all_items(this : IMFASFStreamConfig*, pdest : IMFAttributes) : HRESULT
    @lpVtbl.value.copy_all_items.call(this, pdest)
  end
  def get_stream_type(this : IMFASFStreamConfig*, pguidstreamtype : Guid*) : HRESULT
    @lpVtbl.value.get_stream_type.call(this, pguidstreamtype)
  end
  def get_stream_number(this : IMFASFStreamConfig*) : UInt16
    @lpVtbl.value.get_stream_number.call(this)
  end
  def set_stream_number(this : IMFASFStreamConfig*, wstreamnum : UInt16) : HRESULT
    @lpVtbl.value.set_stream_number.call(this, wstreamnum)
  end
  def get_media_type(this : IMFASFStreamConfig*, ppimediatype : IMFMediaType*) : HRESULT
    @lpVtbl.value.get_media_type.call(this, ppimediatype)
  end
  def set_media_type(this : IMFASFStreamConfig*, pimediatype : IMFMediaType) : HRESULT
    @lpVtbl.value.set_media_type.call(this, pimediatype)
  end
  def get_payload_extension_count(this : IMFASFStreamConfig*, pcpayloadextensions : UInt16*) : HRESULT
    @lpVtbl.value.get_payload_extension_count.call(this, pcpayloadextensions)
  end
  def get_payload_extension(this : IMFASFStreamConfig*, wpayloadextensionnumber : UInt16, pguidextensionsystemid : Guid*, pcbextensiondatasize : UInt16*, pbextensionsysteminfo : UInt8*, pcbextensionsysteminfo : UInt32*) : HRESULT
    @lpVtbl.value.get_payload_extension.call(this, wpayloadextensionnumber, pguidextensionsystemid, pcbextensiondatasize, pbextensionsysteminfo, pcbextensionsysteminfo)
  end
  def add_payload_extension(this : IMFASFStreamConfig*, guidextensionsystemid : Guid, cbextensiondatasize : UInt16, pbextensionsysteminfo : UInt8*, cbextensionsysteminfo : UInt32) : HRESULT
    @lpVtbl.value.add_payload_extension.call(this, guidextensionsystemid, cbextensiondatasize, pbextensionsysteminfo, cbextensionsysteminfo)
  end
  def remove_all_payload_extensions(this : IMFASFStreamConfig*) : HRESULT
    @lpVtbl.value.remove_all_payload_extensions.call(this)
  end
  def clone(this : IMFASFStreamConfig*, ppistreamconfig : IMFASFStreamConfig*) : HRESULT
    @lpVtbl.value.clone.call(this, ppistreamconfig)
  end
end
struct LibWin32::IMFASFMutualExclusion
  def query_interface(this : IMFASFMutualExclusion*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFASFMutualExclusion*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFASFMutualExclusion*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type(this : IMFASFMutualExclusion*, pguidtype : Guid*) : HRESULT
    @lpVtbl.value.get_type.call(this, pguidtype)
  end
  def set_type(this : IMFASFMutualExclusion*, guidtype : Guid*) : HRESULT
    @lpVtbl.value.set_type.call(this, guidtype)
  end
  def get_record_count(this : IMFASFMutualExclusion*, pdwrecordcount : UInt32*) : HRESULT
    @lpVtbl.value.get_record_count.call(this, pdwrecordcount)
  end
  def get_streams_for_record(this : IMFASFMutualExclusion*, dwrecordnumber : UInt32, pwstreamnumarray : UInt16*, pcstreams : UInt32*) : HRESULT
    @lpVtbl.value.get_streams_for_record.call(this, dwrecordnumber, pwstreamnumarray, pcstreams)
  end
  def add_stream_for_record(this : IMFASFMutualExclusion*, dwrecordnumber : UInt32, wstreamnumber : UInt16) : HRESULT
    @lpVtbl.value.add_stream_for_record.call(this, dwrecordnumber, wstreamnumber)
  end
  def remove_stream_from_record(this : IMFASFMutualExclusion*, dwrecordnumber : UInt32, wstreamnumber : UInt16) : HRESULT
    @lpVtbl.value.remove_stream_from_record.call(this, dwrecordnumber, wstreamnumber)
  end
  def remove_record(this : IMFASFMutualExclusion*, dwrecordnumber : UInt32) : HRESULT
    @lpVtbl.value.remove_record.call(this, dwrecordnumber)
  end
  def add_record(this : IMFASFMutualExclusion*, pdwrecordnumber : UInt32*) : HRESULT
    @lpVtbl.value.add_record.call(this, pdwrecordnumber)
  end
  def clone(this : IMFASFMutualExclusion*, ppimutex : IMFASFMutualExclusion*) : HRESULT
    @lpVtbl.value.clone.call(this, ppimutex)
  end
end
struct LibWin32::IMFASFStreamPrioritization
  def query_interface(this : IMFASFStreamPrioritization*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFASFStreamPrioritization*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFASFStreamPrioritization*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_stream_count(this : IMFASFStreamPrioritization*, pdwstreamcount : UInt32*) : HRESULT
    @lpVtbl.value.get_stream_count.call(this, pdwstreamcount)
  end
  def get_stream(this : IMFASFStreamPrioritization*, dwstreamindex : UInt32, pwstreamnumber : UInt16*, pwstreamflags : UInt16*) : HRESULT
    @lpVtbl.value.get_stream.call(this, dwstreamindex, pwstreamnumber, pwstreamflags)
  end
  def add_stream(this : IMFASFStreamPrioritization*, wstreamnumber : UInt16, wstreamflags : UInt16) : HRESULT
    @lpVtbl.value.add_stream.call(this, wstreamnumber, wstreamflags)
  end
  def remove_stream(this : IMFASFStreamPrioritization*, dwstreamindex : UInt32) : HRESULT
    @lpVtbl.value.remove_stream.call(this, dwstreamindex)
  end
  def clone(this : IMFASFStreamPrioritization*, ppistreamprioritization : IMFASFStreamPrioritization*) : HRESULT
    @lpVtbl.value.clone.call(this, ppistreamprioritization)
  end
end
struct LibWin32::IMFASFIndexer
  def query_interface(this : IMFASFIndexer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFASFIndexer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFASFIndexer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_flags(this : IMFASFIndexer*, dwflags : UInt32) : HRESULT
    @lpVtbl.value.set_flags.call(this, dwflags)
  end
  def get_flags(this : IMFASFIndexer*, pdwflags : UInt32*) : HRESULT
    @lpVtbl.value.get_flags.call(this, pdwflags)
  end
  def initialize(this : IMFASFIndexer*, picontentinfo : IMFASFContentInfo) : HRESULT
    @lpVtbl.value.initialize.call(this, picontentinfo)
  end
  def get_index_position(this : IMFASFIndexer*, picontentinfo : IMFASFContentInfo, pcbindexoffset : UInt64*) : HRESULT
    @lpVtbl.value.get_index_position.call(this, picontentinfo, pcbindexoffset)
  end
  def set_index_byte_streams(this : IMFASFIndexer*, ppibytestreams : IMFByteStream*, cbytestreams : UInt32) : HRESULT
    @lpVtbl.value.set_index_byte_streams.call(this, ppibytestreams, cbytestreams)
  end
  def get_index_byte_stream_count(this : IMFASFIndexer*, pcbytestreams : UInt32*) : HRESULT
    @lpVtbl.value.get_index_byte_stream_count.call(this, pcbytestreams)
  end
  def get_index_status(this : IMFASFIndexer*, pindexidentifier : ASF_INDEX_IDENTIFIER*, pfisindexed : LibC::BOOL*, pbindexdescriptor : UInt8*, pcbindexdescriptor : UInt32*) : HRESULT
    @lpVtbl.value.get_index_status.call(this, pindexidentifier, pfisindexed, pbindexdescriptor, pcbindexdescriptor)
  end
  def set_index_status(this : IMFASFIndexer*, pbindexdescriptor : UInt8*, cbindexdescriptor : UInt32, fgenerateindex : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_index_status.call(this, pbindexdescriptor, cbindexdescriptor, fgenerateindex)
  end
  def get_seek_position_for_value(this : IMFASFIndexer*, pvarvalue : PROPVARIANT*, pindexidentifier : ASF_INDEX_IDENTIFIER*, pcboffsetwithindata : UInt64*, phnsapproxtime : Int64*, pdwpayloadnumberofstreamwithinpacket : UInt32*) : HRESULT
    @lpVtbl.value.get_seek_position_for_value.call(this, pvarvalue, pindexidentifier, pcboffsetwithindata, phnsapproxtime, pdwpayloadnumberofstreamwithinpacket)
  end
  def generate_index_entries(this : IMFASFIndexer*, piasfpacketsample : IMFSample) : HRESULT
    @lpVtbl.value.generate_index_entries.call(this, piasfpacketsample)
  end
  def commit_index(this : IMFASFIndexer*, picontentinfo : IMFASFContentInfo) : HRESULT
    @lpVtbl.value.commit_index.call(this, picontentinfo)
  end
  def get_index_write_space(this : IMFASFIndexer*, pcbindexwritespace : UInt64*) : HRESULT
    @lpVtbl.value.get_index_write_space.call(this, pcbindexwritespace)
  end
  def get_completed_index(this : IMFASFIndexer*, piindexbuffer : IMFMediaBuffer, cboffsetwithinindex : UInt64) : HRESULT
    @lpVtbl.value.get_completed_index.call(this, piindexbuffer, cboffsetwithinindex)
  end
end
struct LibWin32::IMFASFSplitter
  def query_interface(this : IMFASFSplitter*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFASFSplitter*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFASFSplitter*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def initialize(this : IMFASFSplitter*, picontentinfo : IMFASFContentInfo) : HRESULT
    @lpVtbl.value.initialize.call(this, picontentinfo)
  end
  def set_flags(this : IMFASFSplitter*, dwflags : UInt32) : HRESULT
    @lpVtbl.value.set_flags.call(this, dwflags)
  end
  def get_flags(this : IMFASFSplitter*, pdwflags : UInt32*) : HRESULT
    @lpVtbl.value.get_flags.call(this, pdwflags)
  end
  def select_streams(this : IMFASFSplitter*, pwstreamnumbers : UInt16*, wnumstreams : UInt16) : HRESULT
    @lpVtbl.value.select_streams.call(this, pwstreamnumbers, wnumstreams)
  end
  def get_selected_streams(this : IMFASFSplitter*, pwstreamnumbers : UInt16*, pwnumstreams : UInt16*) : HRESULT
    @lpVtbl.value.get_selected_streams.call(this, pwstreamnumbers, pwnumstreams)
  end
  def parse_data(this : IMFASFSplitter*, pibuffer : IMFMediaBuffer, cbbufferoffset : UInt32, cblength : UInt32) : HRESULT
    @lpVtbl.value.parse_data.call(this, pibuffer, cbbufferoffset, cblength)
  end
  def get_next_sample(this : IMFASFSplitter*, pdwstatusflags : ASF_STATUSFLAGS*, pwstreamnumber : UInt16*, ppisample : IMFSample*) : HRESULT
    @lpVtbl.value.get_next_sample.call(this, pdwstatusflags, pwstreamnumber, ppisample)
  end
  def flush(this : IMFASFSplitter*) : HRESULT
    @lpVtbl.value.flush.call(this)
  end
  def get_last_send_time(this : IMFASFSplitter*, pdwlastsendtime : UInt32*) : HRESULT
    @lpVtbl.value.get_last_send_time.call(this, pdwlastsendtime)
  end
end
struct LibWin32::IMFASFMultiplexer
  def query_interface(this : IMFASFMultiplexer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFASFMultiplexer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFASFMultiplexer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def initialize(this : IMFASFMultiplexer*, picontentinfo : IMFASFContentInfo) : HRESULT
    @lpVtbl.value.initialize.call(this, picontentinfo)
  end
  def set_flags(this : IMFASFMultiplexer*, dwflags : UInt32) : HRESULT
    @lpVtbl.value.set_flags.call(this, dwflags)
  end
  def get_flags(this : IMFASFMultiplexer*, pdwflags : UInt32*) : HRESULT
    @lpVtbl.value.get_flags.call(this, pdwflags)
  end
  def process_sample(this : IMFASFMultiplexer*, wstreamnumber : UInt16, pisample : IMFSample, hnstimestampadjust : Int64) : HRESULT
    @lpVtbl.value.process_sample.call(this, wstreamnumber, pisample, hnstimestampadjust)
  end
  def get_next_packet(this : IMFASFMultiplexer*, pdwstatusflags : UInt32*, ppipacket : IMFSample*) : HRESULT
    @lpVtbl.value.get_next_packet.call(this, pdwstatusflags, ppipacket)
  end
  def flush(this : IMFASFMultiplexer*) : HRESULT
    @lpVtbl.value.flush.call(this)
  end
  def end_(this : IMFASFMultiplexer*, picontentinfo : IMFASFContentInfo) : HRESULT
    @lpVtbl.value.end_.call(this, picontentinfo)
  end
  def get_statistics(this : IMFASFMultiplexer*, wstreamnumber : UInt16, pmuxstats : ASF_MUX_STATISTICS*) : HRESULT
    @lpVtbl.value.get_statistics.call(this, wstreamnumber, pmuxstats)
  end
  def set_sync_tolerance(this : IMFASFMultiplexer*, mssynctolerance : UInt32) : HRESULT
    @lpVtbl.value.set_sync_tolerance.call(this, mssynctolerance)
  end
end
struct LibWin32::IMFASFStreamSelector
  def query_interface(this : IMFASFStreamSelector*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFASFStreamSelector*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFASFStreamSelector*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_stream_count(this : IMFASFStreamSelector*, pcstreams : UInt32*) : HRESULT
    @lpVtbl.value.get_stream_count.call(this, pcstreams)
  end
  def get_output_count(this : IMFASFStreamSelector*, pcoutputs : UInt32*) : HRESULT
    @lpVtbl.value.get_output_count.call(this, pcoutputs)
  end
  def get_output_stream_count(this : IMFASFStreamSelector*, dwoutputnum : UInt32, pcstreams : UInt32*) : HRESULT
    @lpVtbl.value.get_output_stream_count.call(this, dwoutputnum, pcstreams)
  end
  def get_output_stream_numbers(this : IMFASFStreamSelector*, dwoutputnum : UInt32, rgwstreamnumbers : UInt16*) : HRESULT
    @lpVtbl.value.get_output_stream_numbers.call(this, dwoutputnum, rgwstreamnumbers)
  end
  def get_output_from_stream(this : IMFASFStreamSelector*, wstreamnum : UInt16, pdwoutput : UInt32*) : HRESULT
    @lpVtbl.value.get_output_from_stream.call(this, wstreamnum, pdwoutput)
  end
  def get_output_override(this : IMFASFStreamSelector*, dwoutputnum : UInt32, pselection : ASF_SELECTION_STATUS*) : HRESULT
    @lpVtbl.value.get_output_override.call(this, dwoutputnum, pselection)
  end
  def set_output_override(this : IMFASFStreamSelector*, dwoutputnum : UInt32, selection : ASF_SELECTION_STATUS) : HRESULT
    @lpVtbl.value.set_output_override.call(this, dwoutputnum, selection)
  end
  def get_output_mutex_count(this : IMFASFStreamSelector*, dwoutputnum : UInt32, pcmutexes : UInt32*) : HRESULT
    @lpVtbl.value.get_output_mutex_count.call(this, dwoutputnum, pcmutexes)
  end
  def get_output_mutex(this : IMFASFStreamSelector*, dwoutputnum : UInt32, dwmutexnum : UInt32, ppmutex : IUnknown*) : HRESULT
    @lpVtbl.value.get_output_mutex.call(this, dwoutputnum, dwmutexnum, ppmutex)
  end
  def set_output_mutex_selection(this : IMFASFStreamSelector*, dwoutputnum : UInt32, dwmutexnum : UInt32, wselectedrecord : UInt16) : HRESULT
    @lpVtbl.value.set_output_mutex_selection.call(this, dwoutputnum, dwmutexnum, wselectedrecord)
  end
  def get_bandwidth_step_count(this : IMFASFStreamSelector*, pcstepcount : UInt32*) : HRESULT
    @lpVtbl.value.get_bandwidth_step_count.call(this, pcstepcount)
  end
  def get_bandwidth_step(this : IMFASFStreamSelector*, dwstepnum : UInt32, pdwbitrate : UInt32*, rgwstreamnumbers : UInt16*, rgselections : ASF_SELECTION_STATUS*) : HRESULT
    @lpVtbl.value.get_bandwidth_step.call(this, dwstepnum, pdwbitrate, rgwstreamnumbers, rgselections)
  end
  def bitrate_to_step_number(this : IMFASFStreamSelector*, dwbitrate : UInt32, pdwstepnum : UInt32*) : HRESULT
    @lpVtbl.value.bitrate_to_step_number.call(this, dwbitrate, pdwstepnum)
  end
  def set_stream_selector_flags(this : IMFASFStreamSelector*, dwstreamselectorflags : UInt32) : HRESULT
    @lpVtbl.value.set_stream_selector_flags.call(this, dwstreamselectorflags)
  end
end
struct LibWin32::IMFDRMNetHelper
  def query_interface(this : IMFDRMNetHelper*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFDRMNetHelper*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFDRMNetHelper*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def process_license_request(this : IMFDRMNetHelper*, plicenserequest : UInt8*, cblicenserequest : UInt32, pplicenseresponse : UInt8**, pcblicenseresponse : UInt32*, pbstrkid : UInt8**) : HRESULT
    @lpVtbl.value.process_license_request.call(this, plicenserequest, cblicenserequest, pplicenseresponse, pcblicenseresponse, pbstrkid)
  end
  def get_chained_license_response(this : IMFDRMNetHelper*, pplicenseresponse : UInt8**, pcblicenseresponse : UInt32*) : HRESULT
    @lpVtbl.value.get_chained_license_response.call(this, pplicenseresponse, pcblicenseresponse)
  end
end
struct LibWin32::IMFCaptureEngineOnEventCallback
  def query_interface(this : IMFCaptureEngineOnEventCallback*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFCaptureEngineOnEventCallback*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFCaptureEngineOnEventCallback*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_event(this : IMFCaptureEngineOnEventCallback*, pevent : IMFMediaEvent) : HRESULT
    @lpVtbl.value.on_event.call(this, pevent)
  end
end
struct LibWin32::IMFCaptureEngineOnSampleCallback
  def query_interface(this : IMFCaptureEngineOnSampleCallback*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFCaptureEngineOnSampleCallback*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFCaptureEngineOnSampleCallback*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_sample(this : IMFCaptureEngineOnSampleCallback*, psample : IMFSample) : HRESULT
    @lpVtbl.value.on_sample.call(this, psample)
  end
end
struct LibWin32::IMFCaptureSink
  def query_interface(this : IMFCaptureSink*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFCaptureSink*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFCaptureSink*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_output_media_type(this : IMFCaptureSink*, dwsinkstreamindex : UInt32, ppmediatype : IMFMediaType*) : HRESULT
    @lpVtbl.value.get_output_media_type.call(this, dwsinkstreamindex, ppmediatype)
  end
  def get_service(this : IMFCaptureSink*, dwsinkstreamindex : UInt32, rguidservice : Guid*, riid : Guid*, ppunknown : IUnknown*) : HRESULT
    @lpVtbl.value.get_service.call(this, dwsinkstreamindex, rguidservice, riid, ppunknown)
  end
  def add_stream(this : IMFCaptureSink*, dwsourcestreamindex : UInt32, pmediatype : IMFMediaType, pattributes : IMFAttributes, pdwsinkstreamindex : UInt32*) : HRESULT
    @lpVtbl.value.add_stream.call(this, dwsourcestreamindex, pmediatype, pattributes, pdwsinkstreamindex)
  end
  def prepare(this : IMFCaptureSink*) : HRESULT
    @lpVtbl.value.prepare.call(this)
  end
  def remove_all_streams(this : IMFCaptureSink*) : HRESULT
    @lpVtbl.value.remove_all_streams.call(this)
  end
end
struct LibWin32::IMFCaptureRecordSink
  def query_interface(this : IMFCaptureRecordSink*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFCaptureRecordSink*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFCaptureRecordSink*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_output_media_type(this : IMFCaptureRecordSink*, dwsinkstreamindex : UInt32, ppmediatype : IMFMediaType*) : HRESULT
    @lpVtbl.value.get_output_media_type.call(this, dwsinkstreamindex, ppmediatype)
  end
  def get_service(this : IMFCaptureRecordSink*, dwsinkstreamindex : UInt32, rguidservice : Guid*, riid : Guid*, ppunknown : IUnknown*) : HRESULT
    @lpVtbl.value.get_service.call(this, dwsinkstreamindex, rguidservice, riid, ppunknown)
  end
  def add_stream(this : IMFCaptureRecordSink*, dwsourcestreamindex : UInt32, pmediatype : IMFMediaType, pattributes : IMFAttributes, pdwsinkstreamindex : UInt32*) : HRESULT
    @lpVtbl.value.add_stream.call(this, dwsourcestreamindex, pmediatype, pattributes, pdwsinkstreamindex)
  end
  def prepare(this : IMFCaptureRecordSink*) : HRESULT
    @lpVtbl.value.prepare.call(this)
  end
  def remove_all_streams(this : IMFCaptureRecordSink*) : HRESULT
    @lpVtbl.value.remove_all_streams.call(this)
  end
  def set_output_byte_stream(this : IMFCaptureRecordSink*, pbytestream : IMFByteStream, guidcontainertype : Guid*) : HRESULT
    @lpVtbl.value.set_output_byte_stream.call(this, pbytestream, guidcontainertype)
  end
  def set_output_file_name(this : IMFCaptureRecordSink*, filename : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_output_file_name.call(this, filename)
  end
  def set_sample_callback(this : IMFCaptureRecordSink*, dwstreamsinkindex : UInt32, pcallback : IMFCaptureEngineOnSampleCallback) : HRESULT
    @lpVtbl.value.set_sample_callback.call(this, dwstreamsinkindex, pcallback)
  end
  def set_custom_sink(this : IMFCaptureRecordSink*, pmediasink : IMFMediaSink) : HRESULT
    @lpVtbl.value.set_custom_sink.call(this, pmediasink)
  end
  def get_rotation(this : IMFCaptureRecordSink*, dwstreamindex : UInt32, pdwrotationvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_rotation.call(this, dwstreamindex, pdwrotationvalue)
  end
  def set_rotation(this : IMFCaptureRecordSink*, dwstreamindex : UInt32, dwrotationvalue : UInt32) : HRESULT
    @lpVtbl.value.set_rotation.call(this, dwstreamindex, dwrotationvalue)
  end
end
struct LibWin32::IMFCapturePreviewSink
  def query_interface(this : IMFCapturePreviewSink*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFCapturePreviewSink*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFCapturePreviewSink*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_output_media_type(this : IMFCapturePreviewSink*, dwsinkstreamindex : UInt32, ppmediatype : IMFMediaType*) : HRESULT
    @lpVtbl.value.get_output_media_type.call(this, dwsinkstreamindex, ppmediatype)
  end
  def get_service(this : IMFCapturePreviewSink*, dwsinkstreamindex : UInt32, rguidservice : Guid*, riid : Guid*, ppunknown : IUnknown*) : HRESULT
    @lpVtbl.value.get_service.call(this, dwsinkstreamindex, rguidservice, riid, ppunknown)
  end
  def add_stream(this : IMFCapturePreviewSink*, dwsourcestreamindex : UInt32, pmediatype : IMFMediaType, pattributes : IMFAttributes, pdwsinkstreamindex : UInt32*) : HRESULT
    @lpVtbl.value.add_stream.call(this, dwsourcestreamindex, pmediatype, pattributes, pdwsinkstreamindex)
  end
  def prepare(this : IMFCapturePreviewSink*) : HRESULT
    @lpVtbl.value.prepare.call(this)
  end
  def remove_all_streams(this : IMFCapturePreviewSink*) : HRESULT
    @lpVtbl.value.remove_all_streams.call(this)
  end
  def set_render_handle(this : IMFCapturePreviewSink*, handle : LibC::HANDLE) : HRESULT
    @lpVtbl.value.set_render_handle.call(this, handle)
  end
  def set_render_surface(this : IMFCapturePreviewSink*, psurface : IUnknown) : HRESULT
    @lpVtbl.value.set_render_surface.call(this, psurface)
  end
  def update_video(this : IMFCapturePreviewSink*, psrc : MFVideoNormalizedRect*, pdst : RECT*, pborderclr : UInt32*) : HRESULT
    @lpVtbl.value.update_video.call(this, psrc, pdst, pborderclr)
  end
  def set_sample_callback(this : IMFCapturePreviewSink*, dwstreamsinkindex : UInt32, pcallback : IMFCaptureEngineOnSampleCallback) : HRESULT
    @lpVtbl.value.set_sample_callback.call(this, dwstreamsinkindex, pcallback)
  end
  def get_mirror_state(this : IMFCapturePreviewSink*, pfmirrorstate : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_mirror_state.call(this, pfmirrorstate)
  end
  def set_mirror_state(this : IMFCapturePreviewSink*, fmirrorstate : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_mirror_state.call(this, fmirrorstate)
  end
  def get_rotation(this : IMFCapturePreviewSink*, dwstreamindex : UInt32, pdwrotationvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_rotation.call(this, dwstreamindex, pdwrotationvalue)
  end
  def set_rotation(this : IMFCapturePreviewSink*, dwstreamindex : UInt32, dwrotationvalue : UInt32) : HRESULT
    @lpVtbl.value.set_rotation.call(this, dwstreamindex, dwrotationvalue)
  end
  def set_custom_sink(this : IMFCapturePreviewSink*, pmediasink : IMFMediaSink) : HRESULT
    @lpVtbl.value.set_custom_sink.call(this, pmediasink)
  end
end
struct LibWin32::IMFCapturePhotoSink
  def query_interface(this : IMFCapturePhotoSink*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFCapturePhotoSink*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFCapturePhotoSink*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_output_media_type(this : IMFCapturePhotoSink*, dwsinkstreamindex : UInt32, ppmediatype : IMFMediaType*) : HRESULT
    @lpVtbl.value.get_output_media_type.call(this, dwsinkstreamindex, ppmediatype)
  end
  def get_service(this : IMFCapturePhotoSink*, dwsinkstreamindex : UInt32, rguidservice : Guid*, riid : Guid*, ppunknown : IUnknown*) : HRESULT
    @lpVtbl.value.get_service.call(this, dwsinkstreamindex, rguidservice, riid, ppunknown)
  end
  def add_stream(this : IMFCapturePhotoSink*, dwsourcestreamindex : UInt32, pmediatype : IMFMediaType, pattributes : IMFAttributes, pdwsinkstreamindex : UInt32*) : HRESULT
    @lpVtbl.value.add_stream.call(this, dwsourcestreamindex, pmediatype, pattributes, pdwsinkstreamindex)
  end
  def prepare(this : IMFCapturePhotoSink*) : HRESULT
    @lpVtbl.value.prepare.call(this)
  end
  def remove_all_streams(this : IMFCapturePhotoSink*) : HRESULT
    @lpVtbl.value.remove_all_streams.call(this)
  end
  def set_output_file_name(this : IMFCapturePhotoSink*, filename : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_output_file_name.call(this, filename)
  end
  def set_sample_callback(this : IMFCapturePhotoSink*, pcallback : IMFCaptureEngineOnSampleCallback) : HRESULT
    @lpVtbl.value.set_sample_callback.call(this, pcallback)
  end
  def set_output_byte_stream(this : IMFCapturePhotoSink*, pbytestream : IMFByteStream) : HRESULT
    @lpVtbl.value.set_output_byte_stream.call(this, pbytestream)
  end
end
struct LibWin32::IMFCaptureSource
  def query_interface(this : IMFCaptureSource*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFCaptureSource*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFCaptureSource*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_capture_device_source(this : IMFCaptureSource*, mfcaptureenginedevicetype : MF_CAPTURE_ENGINE_DEVICE_TYPE, ppmediasource : IMFMediaSource*) : HRESULT
    @lpVtbl.value.get_capture_device_source.call(this, mfcaptureenginedevicetype, ppmediasource)
  end
  def get_capture_device_activate(this : IMFCaptureSource*, mfcaptureenginedevicetype : MF_CAPTURE_ENGINE_DEVICE_TYPE, ppactivate : IMFActivate*) : HRESULT
    @lpVtbl.value.get_capture_device_activate.call(this, mfcaptureenginedevicetype, ppactivate)
  end
  def get_service(this : IMFCaptureSource*, rguidservice : Guid*, riid : Guid*, ppunknown : IUnknown*) : HRESULT
    @lpVtbl.value.get_service.call(this, rguidservice, riid, ppunknown)
  end
  def add_effect(this : IMFCaptureSource*, dwsourcestreamindex : UInt32, punknown : IUnknown) : HRESULT
    @lpVtbl.value.add_effect.call(this, dwsourcestreamindex, punknown)
  end
  def remove_effect(this : IMFCaptureSource*, dwsourcestreamindex : UInt32, punknown : IUnknown) : HRESULT
    @lpVtbl.value.remove_effect.call(this, dwsourcestreamindex, punknown)
  end
  def remove_all_effects(this : IMFCaptureSource*, dwsourcestreamindex : UInt32) : HRESULT
    @lpVtbl.value.remove_all_effects.call(this, dwsourcestreamindex)
  end
  def get_available_device_media_type(this : IMFCaptureSource*, dwsourcestreamindex : UInt32, dwmediatypeindex : UInt32, ppmediatype : IMFMediaType*) : HRESULT
    @lpVtbl.value.get_available_device_media_type.call(this, dwsourcestreamindex, dwmediatypeindex, ppmediatype)
  end
  def set_current_device_media_type(this : IMFCaptureSource*, dwsourcestreamindex : UInt32, pmediatype : IMFMediaType) : HRESULT
    @lpVtbl.value.set_current_device_media_type.call(this, dwsourcestreamindex, pmediatype)
  end
  def get_current_device_media_type(this : IMFCaptureSource*, dwsourcestreamindex : UInt32, ppmediatype : IMFMediaType*) : HRESULT
    @lpVtbl.value.get_current_device_media_type.call(this, dwsourcestreamindex, ppmediatype)
  end
  def get_device_stream_count(this : IMFCaptureSource*, pdwstreamcount : UInt32*) : HRESULT
    @lpVtbl.value.get_device_stream_count.call(this, pdwstreamcount)
  end
  def get_device_stream_category(this : IMFCaptureSource*, dwsourcestreamindex : UInt32, pstreamcategory : MF_CAPTURE_ENGINE_STREAM_CATEGORY*) : HRESULT
    @lpVtbl.value.get_device_stream_category.call(this, dwsourcestreamindex, pstreamcategory)
  end
  def get_mirror_state(this : IMFCaptureSource*, dwstreamindex : UInt32, pfmirrorstate : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_mirror_state.call(this, dwstreamindex, pfmirrorstate)
  end
  def set_mirror_state(this : IMFCaptureSource*, dwstreamindex : UInt32, fmirrorstate : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_mirror_state.call(this, dwstreamindex, fmirrorstate)
  end
  def get_stream_index_from_friendly_name(this : IMFCaptureSource*, uifriendlyname : UInt32, pdwactualstreamindex : UInt32*) : HRESULT
    @lpVtbl.value.get_stream_index_from_friendly_name.call(this, uifriendlyname, pdwactualstreamindex)
  end
end
struct LibWin32::IMFCaptureEngine
  def query_interface(this : IMFCaptureEngine*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFCaptureEngine*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFCaptureEngine*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def initialize(this : IMFCaptureEngine*, peventcallback : IMFCaptureEngineOnEventCallback, pattributes : IMFAttributes, paudiosource : IUnknown, pvideosource : IUnknown) : HRESULT
    @lpVtbl.value.initialize.call(this, peventcallback, pattributes, paudiosource, pvideosource)
  end
  def start_preview(this : IMFCaptureEngine*) : HRESULT
    @lpVtbl.value.start_preview.call(this)
  end
  def stop_preview(this : IMFCaptureEngine*) : HRESULT
    @lpVtbl.value.stop_preview.call(this)
  end
  def start_record(this : IMFCaptureEngine*) : HRESULT
    @lpVtbl.value.start_record.call(this)
  end
  def stop_record(this : IMFCaptureEngine*, bfinalize : LibC::BOOL, bflushunprocessedsamples : LibC::BOOL) : HRESULT
    @lpVtbl.value.stop_record.call(this, bfinalize, bflushunprocessedsamples)
  end
  def take_photo(this : IMFCaptureEngine*) : HRESULT
    @lpVtbl.value.take_photo.call(this)
  end
  def get_sink(this : IMFCaptureEngine*, mfcaptureenginesinktype : MF_CAPTURE_ENGINE_SINK_TYPE, ppsink : IMFCaptureSink*) : HRESULT
    @lpVtbl.value.get_sink.call(this, mfcaptureenginesinktype, ppsink)
  end
  def get_source(this : IMFCaptureEngine*, ppsource : IMFCaptureSource*) : HRESULT
    @lpVtbl.value.get_source.call(this, ppsource)
  end
end
struct LibWin32::IMFCaptureEngineClassFactory
  def query_interface(this : IMFCaptureEngineClassFactory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFCaptureEngineClassFactory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFCaptureEngineClassFactory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_instance(this : IMFCaptureEngineClassFactory*, clsid : Guid*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.create_instance.call(this, clsid, riid, ppvobject)
  end
end
struct LibWin32::IMFCaptureEngineOnSampleCallback2
  def query_interface(this : IMFCaptureEngineOnSampleCallback2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFCaptureEngineOnSampleCallback2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFCaptureEngineOnSampleCallback2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_sample(this : IMFCaptureEngineOnSampleCallback2*, psample : IMFSample) : HRESULT
    @lpVtbl.value.on_sample.call(this, psample)
  end
  def on_synchronized_event(this : IMFCaptureEngineOnSampleCallback2*, pevent : IMFMediaEvent) : HRESULT
    @lpVtbl.value.on_synchronized_event.call(this, pevent)
  end
end
struct LibWin32::IMFCaptureSink2
  def query_interface(this : IMFCaptureSink2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFCaptureSink2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFCaptureSink2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_output_media_type(this : IMFCaptureSink2*, dwsinkstreamindex : UInt32, ppmediatype : IMFMediaType*) : HRESULT
    @lpVtbl.value.get_output_media_type.call(this, dwsinkstreamindex, ppmediatype)
  end
  def get_service(this : IMFCaptureSink2*, dwsinkstreamindex : UInt32, rguidservice : Guid*, riid : Guid*, ppunknown : IUnknown*) : HRESULT
    @lpVtbl.value.get_service.call(this, dwsinkstreamindex, rguidservice, riid, ppunknown)
  end
  def add_stream(this : IMFCaptureSink2*, dwsourcestreamindex : UInt32, pmediatype : IMFMediaType, pattributes : IMFAttributes, pdwsinkstreamindex : UInt32*) : HRESULT
    @lpVtbl.value.add_stream.call(this, dwsourcestreamindex, pmediatype, pattributes, pdwsinkstreamindex)
  end
  def prepare(this : IMFCaptureSink2*) : HRESULT
    @lpVtbl.value.prepare.call(this)
  end
  def remove_all_streams(this : IMFCaptureSink2*) : HRESULT
    @lpVtbl.value.remove_all_streams.call(this)
  end
  def set_output_media_type(this : IMFCaptureSink2*, dwstreamindex : UInt32, pmediatype : IMFMediaType, pencodingattributes : IMFAttributes) : HRESULT
    @lpVtbl.value.set_output_media_type.call(this, dwstreamindex, pmediatype, pencodingattributes)
  end
end
struct LibWin32::IMFD3D12SynchronizationObjectCommands
  def query_interface(this : IMFD3D12SynchronizationObjectCommands*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFD3D12SynchronizationObjectCommands*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFD3D12SynchronizationObjectCommands*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def enqueue_resource_ready(this : IMFD3D12SynchronizationObjectCommands*, pproducercommandqueue : ID3D12CommandQueue) : HRESULT
    @lpVtbl.value.enqueue_resource_ready.call(this, pproducercommandqueue)
  end
  def enqueue_resource_ready_wait(this : IMFD3D12SynchronizationObjectCommands*, pconsumercommandqueue : ID3D12CommandQueue) : HRESULT
    @lpVtbl.value.enqueue_resource_ready_wait.call(this, pconsumercommandqueue)
  end
  def signal_event_on_resource_ready(this : IMFD3D12SynchronizationObjectCommands*, hevent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.signal_event_on_resource_ready.call(this, hevent)
  end
  def enqueue_resource_release(this : IMFD3D12SynchronizationObjectCommands*, pconsumercommandqueue : ID3D12CommandQueue) : HRESULT
    @lpVtbl.value.enqueue_resource_release.call(this, pconsumercommandqueue)
  end
end
struct LibWin32::IMFD3D12SynchronizationObject
  def query_interface(this : IMFD3D12SynchronizationObject*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFD3D12SynchronizationObject*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFD3D12SynchronizationObject*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def signal_event_on_final_resource_release(this : IMFD3D12SynchronizationObject*, hevent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.signal_event_on_final_resource_release.call(this, hevent)
  end
  def reset(this : IMFD3D12SynchronizationObject*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
end
struct LibWin32::MFASYNCRESULT
  def query_interface(this : MFASYNCRESULT*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : MFASYNCRESULT*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : MFASYNCRESULT*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_state(this : MFASYNCRESULT*, ppunkstate : IUnknown*) : HRESULT
    @lpVtbl.value.get_state.call(this, ppunkstate)
  end
  def get_status(this : MFASYNCRESULT*) : HRESULT
    @lpVtbl.value.get_status.call(this)
  end
  def set_status(this : MFASYNCRESULT*, hrstatus : HRESULT) : HRESULT
    @lpVtbl.value.set_status.call(this, hrstatus)
  end
  def get_object(this : MFASYNCRESULT*, ppobject : IUnknown*) : HRESULT
    @lpVtbl.value.get_object.call(this, ppobject)
  end
  def get_state_no_add_ref(this : MFASYNCRESULT*) : IUnknown
    @lpVtbl.value.get_state_no_add_ref.call(this)
  end
end
struct LibWin32::IMFMediaError
  def query_interface(this : IMFMediaError*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaError*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaError*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_error_code(this : IMFMediaError*) : UInt16
    @lpVtbl.value.get_error_code.call(this)
  end
  def get_extended_error_code(this : IMFMediaError*) : HRESULT
    @lpVtbl.value.get_extended_error_code.call(this)
  end
  def set_error_code(this : IMFMediaError*, error : MF_MEDIA_ENGINE_ERR) : HRESULT
    @lpVtbl.value.set_error_code.call(this, error)
  end
  def set_extended_error_code(this : IMFMediaError*, error : HRESULT) : HRESULT
    @lpVtbl.value.set_extended_error_code.call(this, error)
  end
end
struct LibWin32::IMFMediaTimeRange
  def query_interface(this : IMFMediaTimeRange*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaTimeRange*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaTimeRange*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_length(this : IMFMediaTimeRange*) : UInt32
    @lpVtbl.value.get_length.call(this)
  end
  def get_start(this : IMFMediaTimeRange*, index : UInt32, pstart : Float64*) : HRESULT
    @lpVtbl.value.get_start.call(this, index, pstart)
  end
  def get_end(this : IMFMediaTimeRange*, index : UInt32, pend : Float64*) : HRESULT
    @lpVtbl.value.get_end.call(this, index, pend)
  end
  def contains_time(this : IMFMediaTimeRange*, time : Float64) : LibC::BOOL
    @lpVtbl.value.contains_time.call(this, time)
  end
  def add_range(this : IMFMediaTimeRange*, starttime : Float64, endtime : Float64) : HRESULT
    @lpVtbl.value.add_range.call(this, starttime, endtime)
  end
  def clear(this : IMFMediaTimeRange*) : HRESULT
    @lpVtbl.value.clear.call(this)
  end
end
struct LibWin32::IMFMediaEngineNotify
  def query_interface(this : IMFMediaEngineNotify*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaEngineNotify*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaEngineNotify*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def event_notify(this : IMFMediaEngineNotify*, event : UInt32, param1 : LibC::UINT_PTR, param2 : UInt32) : HRESULT
    @lpVtbl.value.event_notify.call(this, event, param1, param2)
  end
end
struct LibWin32::IMFMediaEngineSrcElements
  def query_interface(this : IMFMediaEngineSrcElements*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaEngineSrcElements*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaEngineSrcElements*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_length(this : IMFMediaEngineSrcElements*) : UInt32
    @lpVtbl.value.get_length.call(this)
  end
  def get_url(this : IMFMediaEngineSrcElements*, index : UInt32, purl : UInt8**) : HRESULT
    @lpVtbl.value.get_url.call(this, index, purl)
  end
  def get_type(this : IMFMediaEngineSrcElements*, index : UInt32, ptype : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, index, ptype)
  end
  def get_media(this : IMFMediaEngineSrcElements*, index : UInt32, pmedia : UInt8**) : HRESULT
    @lpVtbl.value.get_media.call(this, index, pmedia)
  end
  def add_element(this : IMFMediaEngineSrcElements*, purl : UInt8*, ptype : UInt8*, pmedia : UInt8*) : HRESULT
    @lpVtbl.value.add_element.call(this, purl, ptype, pmedia)
  end
  def remove_all_elements(this : IMFMediaEngineSrcElements*) : HRESULT
    @lpVtbl.value.remove_all_elements.call(this)
  end
end
struct LibWin32::IMFMediaEngine
  def query_interface(this : IMFMediaEngine*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaEngine*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaEngine*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_error(this : IMFMediaEngine*, pperror : IMFMediaError*) : HRESULT
    @lpVtbl.value.get_error.call(this, pperror)
  end
  def set_error_code(this : IMFMediaEngine*, error : MF_MEDIA_ENGINE_ERR) : HRESULT
    @lpVtbl.value.set_error_code.call(this, error)
  end
  def set_source_elements(this : IMFMediaEngine*, psrcelements : IMFMediaEngineSrcElements) : HRESULT
    @lpVtbl.value.set_source_elements.call(this, psrcelements)
  end
  def set_source(this : IMFMediaEngine*, purl : UInt8*) : HRESULT
    @lpVtbl.value.set_source.call(this, purl)
  end
  def get_current_source(this : IMFMediaEngine*, ppurl : UInt8**) : HRESULT
    @lpVtbl.value.get_current_source.call(this, ppurl)
  end
  def get_network_state(this : IMFMediaEngine*) : UInt16
    @lpVtbl.value.get_network_state.call(this)
  end
  def get_preload(this : IMFMediaEngine*) : MF_MEDIA_ENGINE_PRELOAD
    @lpVtbl.value.get_preload.call(this)
  end
  def set_preload(this : IMFMediaEngine*, preload : MF_MEDIA_ENGINE_PRELOAD) : HRESULT
    @lpVtbl.value.set_preload.call(this, preload)
  end
  def get_buffered(this : IMFMediaEngine*, ppbuffered : IMFMediaTimeRange*) : HRESULT
    @lpVtbl.value.get_buffered.call(this, ppbuffered)
  end
  def load(this : IMFMediaEngine*) : HRESULT
    @lpVtbl.value.load.call(this)
  end
  def can_play_type(this : IMFMediaEngine*, type : UInt8*, panswer : MF_MEDIA_ENGINE_CANPLAY*) : HRESULT
    @lpVtbl.value.can_play_type.call(this, type, panswer)
  end
  def get_ready_state(this : IMFMediaEngine*) : UInt16
    @lpVtbl.value.get_ready_state.call(this)
  end
  def is_seeking(this : IMFMediaEngine*) : LibC::BOOL
    @lpVtbl.value.is_seeking.call(this)
  end
  def get_current_time(this : IMFMediaEngine*) : Float64
    @lpVtbl.value.get_current_time.call(this)
  end
  def set_current_time(this : IMFMediaEngine*, seektime : Float64) : HRESULT
    @lpVtbl.value.set_current_time.call(this, seektime)
  end
  def get_start_time(this : IMFMediaEngine*) : Float64
    @lpVtbl.value.get_start_time.call(this)
  end
  def get_duration(this : IMFMediaEngine*) : Float64
    @lpVtbl.value.get_duration.call(this)
  end
  def is_paused(this : IMFMediaEngine*) : LibC::BOOL
    @lpVtbl.value.is_paused.call(this)
  end
  def get_default_playback_rate(this : IMFMediaEngine*) : Float64
    @lpVtbl.value.get_default_playback_rate.call(this)
  end
  def set_default_playback_rate(this : IMFMediaEngine*, rate : Float64) : HRESULT
    @lpVtbl.value.set_default_playback_rate.call(this, rate)
  end
  def get_playback_rate(this : IMFMediaEngine*) : Float64
    @lpVtbl.value.get_playback_rate.call(this)
  end
  def set_playback_rate(this : IMFMediaEngine*, rate : Float64) : HRESULT
    @lpVtbl.value.set_playback_rate.call(this, rate)
  end
  def get_played(this : IMFMediaEngine*, ppplayed : IMFMediaTimeRange*) : HRESULT
    @lpVtbl.value.get_played.call(this, ppplayed)
  end
  def get_seekable(this : IMFMediaEngine*, ppseekable : IMFMediaTimeRange*) : HRESULT
    @lpVtbl.value.get_seekable.call(this, ppseekable)
  end
  def is_ended(this : IMFMediaEngine*) : LibC::BOOL
    @lpVtbl.value.is_ended.call(this)
  end
  def get_auto_play(this : IMFMediaEngine*) : LibC::BOOL
    @lpVtbl.value.get_auto_play.call(this)
  end
  def set_auto_play(this : IMFMediaEngine*, autoplay : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_auto_play.call(this, autoplay)
  end
  def get_loop(this : IMFMediaEngine*) : LibC::BOOL
    @lpVtbl.value.get_loop.call(this)
  end
  def set_loop(this : IMFMediaEngine*, loop : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_loop.call(this, loop)
  end
  def play(this : IMFMediaEngine*) : HRESULT
    @lpVtbl.value.play.call(this)
  end
  def pause(this : IMFMediaEngine*) : HRESULT
    @lpVtbl.value.pause.call(this)
  end
  def get_muted(this : IMFMediaEngine*) : LibC::BOOL
    @lpVtbl.value.get_muted.call(this)
  end
  def set_muted(this : IMFMediaEngine*, muted : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_muted.call(this, muted)
  end
  def get_volume(this : IMFMediaEngine*) : Float64
    @lpVtbl.value.get_volume.call(this)
  end
  def set_volume(this : IMFMediaEngine*, volume : Float64) : HRESULT
    @lpVtbl.value.set_volume.call(this, volume)
  end
  def has_video(this : IMFMediaEngine*) : LibC::BOOL
    @lpVtbl.value.has_video.call(this)
  end
  def has_audio(this : IMFMediaEngine*) : LibC::BOOL
    @lpVtbl.value.has_audio.call(this)
  end
  def get_native_video_size(this : IMFMediaEngine*, cx : UInt32*, cy : UInt32*) : HRESULT
    @lpVtbl.value.get_native_video_size.call(this, cx, cy)
  end
  def get_video_aspect_ratio(this : IMFMediaEngine*, cx : UInt32*, cy : UInt32*) : HRESULT
    @lpVtbl.value.get_video_aspect_ratio.call(this, cx, cy)
  end
  def shutdown(this : IMFMediaEngine*) : HRESULT
    @lpVtbl.value.shutdown.call(this)
  end
  def transfer_video_frame(this : IMFMediaEngine*, pdstsurf : IUnknown, psrc : MFVideoNormalizedRect*, pdst : RECT*, pborderclr : MFARGB*) : HRESULT
    @lpVtbl.value.transfer_video_frame.call(this, pdstsurf, psrc, pdst, pborderclr)
  end
  def on_video_stream_tick(this : IMFMediaEngine*, ppts : Int64*) : HRESULT
    @lpVtbl.value.on_video_stream_tick.call(this, ppts)
  end
end
struct LibWin32::IMFMediaEngineEx
  def query_interface(this : IMFMediaEngineEx*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaEngineEx*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaEngineEx*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_error(this : IMFMediaEngineEx*, pperror : IMFMediaError*) : HRESULT
    @lpVtbl.value.get_error.call(this, pperror)
  end
  def set_error_code(this : IMFMediaEngineEx*, error : MF_MEDIA_ENGINE_ERR) : HRESULT
    @lpVtbl.value.set_error_code.call(this, error)
  end
  def set_source_elements(this : IMFMediaEngineEx*, psrcelements : IMFMediaEngineSrcElements) : HRESULT
    @lpVtbl.value.set_source_elements.call(this, psrcelements)
  end
  def set_source(this : IMFMediaEngineEx*, purl : UInt8*) : HRESULT
    @lpVtbl.value.set_source.call(this, purl)
  end
  def get_current_source(this : IMFMediaEngineEx*, ppurl : UInt8**) : HRESULT
    @lpVtbl.value.get_current_source.call(this, ppurl)
  end
  def get_network_state(this : IMFMediaEngineEx*) : UInt16
    @lpVtbl.value.get_network_state.call(this)
  end
  def get_preload(this : IMFMediaEngineEx*) : MF_MEDIA_ENGINE_PRELOAD
    @lpVtbl.value.get_preload.call(this)
  end
  def set_preload(this : IMFMediaEngineEx*, preload : MF_MEDIA_ENGINE_PRELOAD) : HRESULT
    @lpVtbl.value.set_preload.call(this, preload)
  end
  def get_buffered(this : IMFMediaEngineEx*, ppbuffered : IMFMediaTimeRange*) : HRESULT
    @lpVtbl.value.get_buffered.call(this, ppbuffered)
  end
  def load(this : IMFMediaEngineEx*) : HRESULT
    @lpVtbl.value.load.call(this)
  end
  def can_play_type(this : IMFMediaEngineEx*, type : UInt8*, panswer : MF_MEDIA_ENGINE_CANPLAY*) : HRESULT
    @lpVtbl.value.can_play_type.call(this, type, panswer)
  end
  def get_ready_state(this : IMFMediaEngineEx*) : UInt16
    @lpVtbl.value.get_ready_state.call(this)
  end
  def is_seeking(this : IMFMediaEngineEx*) : LibC::BOOL
    @lpVtbl.value.is_seeking.call(this)
  end
  def get_current_time(this : IMFMediaEngineEx*) : Float64
    @lpVtbl.value.get_current_time.call(this)
  end
  def set_current_time(this : IMFMediaEngineEx*, seektime : Float64) : HRESULT
    @lpVtbl.value.set_current_time.call(this, seektime)
  end
  def get_start_time(this : IMFMediaEngineEx*) : Float64
    @lpVtbl.value.get_start_time.call(this)
  end
  def get_duration(this : IMFMediaEngineEx*) : Float64
    @lpVtbl.value.get_duration.call(this)
  end
  def is_paused(this : IMFMediaEngineEx*) : LibC::BOOL
    @lpVtbl.value.is_paused.call(this)
  end
  def get_default_playback_rate(this : IMFMediaEngineEx*) : Float64
    @lpVtbl.value.get_default_playback_rate.call(this)
  end
  def set_default_playback_rate(this : IMFMediaEngineEx*, rate : Float64) : HRESULT
    @lpVtbl.value.set_default_playback_rate.call(this, rate)
  end
  def get_playback_rate(this : IMFMediaEngineEx*) : Float64
    @lpVtbl.value.get_playback_rate.call(this)
  end
  def set_playback_rate(this : IMFMediaEngineEx*, rate : Float64) : HRESULT
    @lpVtbl.value.set_playback_rate.call(this, rate)
  end
  def get_played(this : IMFMediaEngineEx*, ppplayed : IMFMediaTimeRange*) : HRESULT
    @lpVtbl.value.get_played.call(this, ppplayed)
  end
  def get_seekable(this : IMFMediaEngineEx*, ppseekable : IMFMediaTimeRange*) : HRESULT
    @lpVtbl.value.get_seekable.call(this, ppseekable)
  end
  def is_ended(this : IMFMediaEngineEx*) : LibC::BOOL
    @lpVtbl.value.is_ended.call(this)
  end
  def get_auto_play(this : IMFMediaEngineEx*) : LibC::BOOL
    @lpVtbl.value.get_auto_play.call(this)
  end
  def set_auto_play(this : IMFMediaEngineEx*, autoplay : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_auto_play.call(this, autoplay)
  end
  def get_loop(this : IMFMediaEngineEx*) : LibC::BOOL
    @lpVtbl.value.get_loop.call(this)
  end
  def set_loop(this : IMFMediaEngineEx*, loop : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_loop.call(this, loop)
  end
  def play(this : IMFMediaEngineEx*) : HRESULT
    @lpVtbl.value.play.call(this)
  end
  def pause(this : IMFMediaEngineEx*) : HRESULT
    @lpVtbl.value.pause.call(this)
  end
  def get_muted(this : IMFMediaEngineEx*) : LibC::BOOL
    @lpVtbl.value.get_muted.call(this)
  end
  def set_muted(this : IMFMediaEngineEx*, muted : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_muted.call(this, muted)
  end
  def get_volume(this : IMFMediaEngineEx*) : Float64
    @lpVtbl.value.get_volume.call(this)
  end
  def set_volume(this : IMFMediaEngineEx*, volume : Float64) : HRESULT
    @lpVtbl.value.set_volume.call(this, volume)
  end
  def has_video(this : IMFMediaEngineEx*) : LibC::BOOL
    @lpVtbl.value.has_video.call(this)
  end
  def has_audio(this : IMFMediaEngineEx*) : LibC::BOOL
    @lpVtbl.value.has_audio.call(this)
  end
  def get_native_video_size(this : IMFMediaEngineEx*, cx : UInt32*, cy : UInt32*) : HRESULT
    @lpVtbl.value.get_native_video_size.call(this, cx, cy)
  end
  def get_video_aspect_ratio(this : IMFMediaEngineEx*, cx : UInt32*, cy : UInt32*) : HRESULT
    @lpVtbl.value.get_video_aspect_ratio.call(this, cx, cy)
  end
  def shutdown(this : IMFMediaEngineEx*) : HRESULT
    @lpVtbl.value.shutdown.call(this)
  end
  def transfer_video_frame(this : IMFMediaEngineEx*, pdstsurf : IUnknown, psrc : MFVideoNormalizedRect*, pdst : RECT*, pborderclr : MFARGB*) : HRESULT
    @lpVtbl.value.transfer_video_frame.call(this, pdstsurf, psrc, pdst, pborderclr)
  end
  def on_video_stream_tick(this : IMFMediaEngineEx*, ppts : Int64*) : HRESULT
    @lpVtbl.value.on_video_stream_tick.call(this, ppts)
  end
  def set_source_from_byte_stream(this : IMFMediaEngineEx*, pbytestream : IMFByteStream, purl : UInt8*) : HRESULT
    @lpVtbl.value.set_source_from_byte_stream.call(this, pbytestream, purl)
  end
  def get_statistics(this : IMFMediaEngineEx*, statisticid : MF_MEDIA_ENGINE_STATISTIC, pstatistic : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_statistics.call(this, statisticid, pstatistic)
  end
  def update_video_stream(this : IMFMediaEngineEx*, psrc : MFVideoNormalizedRect*, pdst : RECT*, pborderclr : MFARGB*) : HRESULT
    @lpVtbl.value.update_video_stream.call(this, psrc, pdst, pborderclr)
  end
  def get_balance(this : IMFMediaEngineEx*) : Float64
    @lpVtbl.value.get_balance.call(this)
  end
  def set_balance(this : IMFMediaEngineEx*, balance : Float64) : HRESULT
    @lpVtbl.value.set_balance.call(this, balance)
  end
  def is_playback_rate_supported(this : IMFMediaEngineEx*, rate : Float64) : LibC::BOOL
    @lpVtbl.value.is_playback_rate_supported.call(this, rate)
  end
  def frame_step(this : IMFMediaEngineEx*, forward : LibC::BOOL) : HRESULT
    @lpVtbl.value.frame_step.call(this, forward)
  end
  def get_resource_characteristics(this : IMFMediaEngineEx*, pcharacteristics : UInt32*) : HRESULT
    @lpVtbl.value.get_resource_characteristics.call(this, pcharacteristics)
  end
  def get_presentation_attribute(this : IMFMediaEngineEx*, guidmfattribute : Guid*, pvvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_presentation_attribute.call(this, guidmfattribute, pvvalue)
  end
  def get_number_of_streams(this : IMFMediaEngineEx*, pdwstreamcount : UInt32*) : HRESULT
    @lpVtbl.value.get_number_of_streams.call(this, pdwstreamcount)
  end
  def get_stream_attribute(this : IMFMediaEngineEx*, dwstreamindex : UInt32, guidmfattribute : Guid*, pvvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_stream_attribute.call(this, dwstreamindex, guidmfattribute, pvvalue)
  end
  def get_stream_selection(this : IMFMediaEngineEx*, dwstreamindex : UInt32, penabled : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_stream_selection.call(this, dwstreamindex, penabled)
  end
  def set_stream_selection(this : IMFMediaEngineEx*, dwstreamindex : UInt32, enabled : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_stream_selection.call(this, dwstreamindex, enabled)
  end
  def apply_stream_selections(this : IMFMediaEngineEx*) : HRESULT
    @lpVtbl.value.apply_stream_selections.call(this)
  end
  def is_protected(this : IMFMediaEngineEx*, pprotected : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_protected.call(this, pprotected)
  end
  def insert_video_effect(this : IMFMediaEngineEx*, peffect : IUnknown, foptional : LibC::BOOL) : HRESULT
    @lpVtbl.value.insert_video_effect.call(this, peffect, foptional)
  end
  def insert_audio_effect(this : IMFMediaEngineEx*, peffect : IUnknown, foptional : LibC::BOOL) : HRESULT
    @lpVtbl.value.insert_audio_effect.call(this, peffect, foptional)
  end
  def remove_all_effects(this : IMFMediaEngineEx*) : HRESULT
    @lpVtbl.value.remove_all_effects.call(this)
  end
  def set_timeline_marker_timer(this : IMFMediaEngineEx*, timetofire : Float64) : HRESULT
    @lpVtbl.value.set_timeline_marker_timer.call(this, timetofire)
  end
  def get_timeline_marker_timer(this : IMFMediaEngineEx*, ptimetofire : Float64*) : HRESULT
    @lpVtbl.value.get_timeline_marker_timer.call(this, ptimetofire)
  end
  def cancel_timeline_marker_timer(this : IMFMediaEngineEx*) : HRESULT
    @lpVtbl.value.cancel_timeline_marker_timer.call(this)
  end
  def is_stereo3_d(this : IMFMediaEngineEx*) : LibC::BOOL
    @lpVtbl.value.is_stereo3_d.call(this)
  end
  def get_stereo3_d_frame_packing_mode(this : IMFMediaEngineEx*, packmode : MF_MEDIA_ENGINE_S3D_PACKING_MODE*) : HRESULT
    @lpVtbl.value.get_stereo3_d_frame_packing_mode.call(this, packmode)
  end
  def set_stereo3_d_frame_packing_mode(this : IMFMediaEngineEx*, packmode : MF_MEDIA_ENGINE_S3D_PACKING_MODE) : HRESULT
    @lpVtbl.value.set_stereo3_d_frame_packing_mode.call(this, packmode)
  end
  def get_stereo3_d_render_mode(this : IMFMediaEngineEx*, outputtype : MF3DVideoOutputType*) : HRESULT
    @lpVtbl.value.get_stereo3_d_render_mode.call(this, outputtype)
  end
  def set_stereo3_d_render_mode(this : IMFMediaEngineEx*, outputtype : MF3DVideoOutputType) : HRESULT
    @lpVtbl.value.set_stereo3_d_render_mode.call(this, outputtype)
  end
  def enable_windowless_swapchain_mode(this : IMFMediaEngineEx*, fenable : LibC::BOOL) : HRESULT
    @lpVtbl.value.enable_windowless_swapchain_mode.call(this, fenable)
  end
  def get_video_swapchain_handle(this : IMFMediaEngineEx*, phswapchain : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.get_video_swapchain_handle.call(this, phswapchain)
  end
  def enable_horizontal_mirror_mode(this : IMFMediaEngineEx*, fenable : LibC::BOOL) : HRESULT
    @lpVtbl.value.enable_horizontal_mirror_mode.call(this, fenable)
  end
  def get_audio_stream_category(this : IMFMediaEngineEx*, pcategory : UInt32*) : HRESULT
    @lpVtbl.value.get_audio_stream_category.call(this, pcategory)
  end
  def set_audio_stream_category(this : IMFMediaEngineEx*, category : UInt32) : HRESULT
    @lpVtbl.value.set_audio_stream_category.call(this, category)
  end
  def get_audio_endpoint_role(this : IMFMediaEngineEx*, prole : UInt32*) : HRESULT
    @lpVtbl.value.get_audio_endpoint_role.call(this, prole)
  end
  def set_audio_endpoint_role(this : IMFMediaEngineEx*, role : UInt32) : HRESULT
    @lpVtbl.value.set_audio_endpoint_role.call(this, role)
  end
  def get_real_time_mode(this : IMFMediaEngineEx*, pfenabled : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_real_time_mode.call(this, pfenabled)
  end
  def set_real_time_mode(this : IMFMediaEngineEx*, fenable : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_real_time_mode.call(this, fenable)
  end
  def set_current_time_ex(this : IMFMediaEngineEx*, seektime : Float64, seekmode : MF_MEDIA_ENGINE_SEEK_MODE) : HRESULT
    @lpVtbl.value.set_current_time_ex.call(this, seektime, seekmode)
  end
  def enable_time_update_timer(this : IMFMediaEngineEx*, fenabletimer : LibC::BOOL) : HRESULT
    @lpVtbl.value.enable_time_update_timer.call(this, fenabletimer)
  end
end
struct LibWin32::IMFMediaEngineAudioEndpointId
  def query_interface(this : IMFMediaEngineAudioEndpointId*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaEngineAudioEndpointId*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaEngineAudioEndpointId*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_audio_endpoint_id(this : IMFMediaEngineAudioEndpointId*, pszendpointid : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_audio_endpoint_id.call(this, pszendpointid)
  end
  def get_audio_endpoint_id(this : IMFMediaEngineAudioEndpointId*, ppszendpointid : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_audio_endpoint_id.call(this, ppszendpointid)
  end
end
struct LibWin32::IMFMediaEngineExtension
  def query_interface(this : IMFMediaEngineExtension*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaEngineExtension*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaEngineExtension*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def can_play_type(this : IMFMediaEngineExtension*, audioonly : LibC::BOOL, mimetype : UInt8*, panswer : MF_MEDIA_ENGINE_CANPLAY*) : HRESULT
    @lpVtbl.value.can_play_type.call(this, audioonly, mimetype, panswer)
  end
  def begin_create_object(this : IMFMediaEngineExtension*, bstrurl : UInt8*, pbytestream : IMFByteStream, type : MF_OBJECT_TYPE, ppiunknowncancelcookie : IUnknown*, pcallback : IMFAsyncCallback, punkstate : IUnknown) : HRESULT
    @lpVtbl.value.begin_create_object.call(this, bstrurl, pbytestream, type, ppiunknowncancelcookie, pcallback, punkstate)
  end
  def cancel_object_creation(this : IMFMediaEngineExtension*, piunknowncancelcookie : IUnknown) : HRESULT
    @lpVtbl.value.cancel_object_creation.call(this, piunknowncancelcookie)
  end
  def end_create_object(this : IMFMediaEngineExtension*, presult : IMFAsyncResult, ppobject : IUnknown*) : HRESULT
    @lpVtbl.value.end_create_object.call(this, presult, ppobject)
  end
end
struct LibWin32::IMFMediaEngineProtectedContent
  def query_interface(this : IMFMediaEngineProtectedContent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaEngineProtectedContent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaEngineProtectedContent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def share_resources(this : IMFMediaEngineProtectedContent*, punkdevicecontext : IUnknown) : HRESULT
    @lpVtbl.value.share_resources.call(this, punkdevicecontext)
  end
  def get_required_protections(this : IMFMediaEngineProtectedContent*, pframeprotectionflags : UInt32*) : HRESULT
    @lpVtbl.value.get_required_protections.call(this, pframeprotectionflags)
  end
  def set_opm_window(this : IMFMediaEngineProtectedContent*, hwnd : LibC::HANDLE) : HRESULT
    @lpVtbl.value.set_opm_window.call(this, hwnd)
  end
  def transfer_video_frame(this : IMFMediaEngineProtectedContent*, pdstsurf : IUnknown, psrc : MFVideoNormalizedRect*, pdst : RECT*, pborderclr : MFARGB*, pframeprotectionflags : UInt32*) : HRESULT
    @lpVtbl.value.transfer_video_frame.call(this, pdstsurf, psrc, pdst, pborderclr, pframeprotectionflags)
  end
  def set_content_protection_manager(this : IMFMediaEngineProtectedContent*, pcpm : IMFContentProtectionManager) : HRESULT
    @lpVtbl.value.set_content_protection_manager.call(this, pcpm)
  end
  def set_application_certificate(this : IMFMediaEngineProtectedContent*, pbblob : UInt8*, cbblob : UInt32) : HRESULT
    @lpVtbl.value.set_application_certificate.call(this, pbblob, cbblob)
  end
end
struct LibWin32::IAudioSourceProvider
  def query_interface(this : IAudioSourceProvider*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IAudioSourceProvider*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IAudioSourceProvider*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def provide_input(this : IAudioSourceProvider*, dwsamplecount : UInt32, pdwchannelcount : UInt32*, pinterleavedaudiodata : Float32*) : HRESULT
    @lpVtbl.value.provide_input.call(this, dwsamplecount, pdwchannelcount, pinterleavedaudiodata)
  end
end
struct LibWin32::IMFMediaEngineWebSupport
  def query_interface(this : IMFMediaEngineWebSupport*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaEngineWebSupport*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaEngineWebSupport*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def should_delay_the_load_event(this : IMFMediaEngineWebSupport*) : LibC::BOOL
    @lpVtbl.value.should_delay_the_load_event.call(this)
  end
  def connect_web_audio(this : IMFMediaEngineWebSupport*, dwsamplerate : UInt32, ppsourceprovider : IAudioSourceProvider*) : HRESULT
    @lpVtbl.value.connect_web_audio.call(this, dwsamplerate, ppsourceprovider)
  end
  def disconnect_web_audio(this : IMFMediaEngineWebSupport*) : HRESULT
    @lpVtbl.value.disconnect_web_audio.call(this)
  end
end
struct LibWin32::IMFMediaSourceExtensionNotify
  def query_interface(this : IMFMediaSourceExtensionNotify*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaSourceExtensionNotify*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaSourceExtensionNotify*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_source_open(this : IMFMediaSourceExtensionNotify*) : Void
    @lpVtbl.value.on_source_open.call(this)
  end
  def on_source_ended(this : IMFMediaSourceExtensionNotify*) : Void
    @lpVtbl.value.on_source_ended.call(this)
  end
  def on_source_close(this : IMFMediaSourceExtensionNotify*) : Void
    @lpVtbl.value.on_source_close.call(this)
  end
end
struct LibWin32::IMFBufferListNotify
  def query_interface(this : IMFBufferListNotify*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFBufferListNotify*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFBufferListNotify*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_add_source_buffer(this : IMFBufferListNotify*) : Void
    @lpVtbl.value.on_add_source_buffer.call(this)
  end
  def on_remove_source_buffer(this : IMFBufferListNotify*) : Void
    @lpVtbl.value.on_remove_source_buffer.call(this)
  end
end
struct LibWin32::IMFSourceBufferNotify
  def query_interface(this : IMFSourceBufferNotify*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSourceBufferNotify*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSourceBufferNotify*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_update_start(this : IMFSourceBufferNotify*) : Void
    @lpVtbl.value.on_update_start.call(this)
  end
  def on_abort(this : IMFSourceBufferNotify*) : Void
    @lpVtbl.value.on_abort.call(this)
  end
  def on_error(this : IMFSourceBufferNotify*, hr : HRESULT) : Void
    @lpVtbl.value.on_error.call(this, hr)
  end
  def on_update(this : IMFSourceBufferNotify*) : Void
    @lpVtbl.value.on_update.call(this)
  end
  def on_update_end(this : IMFSourceBufferNotify*) : Void
    @lpVtbl.value.on_update_end.call(this)
  end
end
struct LibWin32::IMFSourceBuffer
  def query_interface(this : IMFSourceBuffer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSourceBuffer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSourceBuffer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_updating(this : IMFSourceBuffer*) : LibC::BOOL
    @lpVtbl.value.get_updating.call(this)
  end
  def get_buffered(this : IMFSourceBuffer*, ppbuffered : IMFMediaTimeRange*) : HRESULT
    @lpVtbl.value.get_buffered.call(this, ppbuffered)
  end
  def get_time_stamp_offset(this : IMFSourceBuffer*) : Float64
    @lpVtbl.value.get_time_stamp_offset.call(this)
  end
  def set_time_stamp_offset(this : IMFSourceBuffer*, offset : Float64) : HRESULT
    @lpVtbl.value.set_time_stamp_offset.call(this, offset)
  end
  def get_append_window_start(this : IMFSourceBuffer*) : Float64
    @lpVtbl.value.get_append_window_start.call(this)
  end
  def set_append_window_start(this : IMFSourceBuffer*, time : Float64) : HRESULT
    @lpVtbl.value.set_append_window_start.call(this, time)
  end
  def get_append_window_end(this : IMFSourceBuffer*) : Float64
    @lpVtbl.value.get_append_window_end.call(this)
  end
  def set_append_window_end(this : IMFSourceBuffer*, time : Float64) : HRESULT
    @lpVtbl.value.set_append_window_end.call(this, time)
  end
  def append(this : IMFSourceBuffer*, pdata : UInt8*, len : UInt32) : HRESULT
    @lpVtbl.value.append.call(this, pdata, len)
  end
  def append_byte_stream(this : IMFSourceBuffer*, pstream : IMFByteStream, pmaxlen : UInt64*) : HRESULT
    @lpVtbl.value.append_byte_stream.call(this, pstream, pmaxlen)
  end
  def abort(this : IMFSourceBuffer*) : HRESULT
    @lpVtbl.value.abort.call(this)
  end
  def remove(this : IMFSourceBuffer*, start : Float64, end_ : Float64) : HRESULT
    @lpVtbl.value.remove.call(this, start, end_)
  end
end
struct LibWin32::IMFSourceBufferAppendMode
  def query_interface(this : IMFSourceBufferAppendMode*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSourceBufferAppendMode*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSourceBufferAppendMode*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_append_mode(this : IMFSourceBufferAppendMode*) : MF_MSE_APPEND_MODE
    @lpVtbl.value.get_append_mode.call(this)
  end
  def set_append_mode(this : IMFSourceBufferAppendMode*, mode : MF_MSE_APPEND_MODE) : HRESULT
    @lpVtbl.value.set_append_mode.call(this, mode)
  end
end
struct LibWin32::IMFSourceBufferList
  def query_interface(this : IMFSourceBufferList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSourceBufferList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSourceBufferList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_length(this : IMFSourceBufferList*) : UInt32
    @lpVtbl.value.get_length.call(this)
  end
  def get_source_buffer(this : IMFSourceBufferList*, index : UInt32) : IMFSourceBuffer
    @lpVtbl.value.get_source_buffer.call(this, index)
  end
end
struct LibWin32::IMFMediaSourceExtension
  def query_interface(this : IMFMediaSourceExtension*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaSourceExtension*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaSourceExtension*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_source_buffers(this : IMFMediaSourceExtension*) : IMFSourceBufferList
    @lpVtbl.value.get_source_buffers.call(this)
  end
  def get_active_source_buffers(this : IMFMediaSourceExtension*) : IMFSourceBufferList
    @lpVtbl.value.get_active_source_buffers.call(this)
  end
  def get_ready_state(this : IMFMediaSourceExtension*) : MF_MSE_READY
    @lpVtbl.value.get_ready_state.call(this)
  end
  def get_duration(this : IMFMediaSourceExtension*) : Float64
    @lpVtbl.value.get_duration.call(this)
  end
  def set_duration(this : IMFMediaSourceExtension*, duration : Float64) : HRESULT
    @lpVtbl.value.set_duration.call(this, duration)
  end
  def add_source_buffer(this : IMFMediaSourceExtension*, type : UInt8*, pnotify : IMFSourceBufferNotify, ppsourcebuffer : IMFSourceBuffer*) : HRESULT
    @lpVtbl.value.add_source_buffer.call(this, type, pnotify, ppsourcebuffer)
  end
  def remove_source_buffer(this : IMFMediaSourceExtension*, psourcebuffer : IMFSourceBuffer) : HRESULT
    @lpVtbl.value.remove_source_buffer.call(this, psourcebuffer)
  end
  def set_end_of_stream(this : IMFMediaSourceExtension*, error : MF_MSE_ERROR) : HRESULT
    @lpVtbl.value.set_end_of_stream.call(this, error)
  end
  def is_type_supported(this : IMFMediaSourceExtension*, type : UInt8*) : LibC::BOOL
    @lpVtbl.value.is_type_supported.call(this, type)
  end
  def get_source_buffer(this : IMFMediaSourceExtension*, dwstreamindex : UInt32) : IMFSourceBuffer
    @lpVtbl.value.get_source_buffer.call(this, dwstreamindex)
  end
end
struct LibWin32::IMFMediaSourceExtensionLiveSeekableRange
  def query_interface(this : IMFMediaSourceExtensionLiveSeekableRange*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaSourceExtensionLiveSeekableRange*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaSourceExtensionLiveSeekableRange*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_live_seekable_range(this : IMFMediaSourceExtensionLiveSeekableRange*, start : Float64, end_ : Float64) : HRESULT
    @lpVtbl.value.set_live_seekable_range.call(this, start, end_)
  end
  def clear_live_seekable_range(this : IMFMediaSourceExtensionLiveSeekableRange*) : HRESULT
    @lpVtbl.value.clear_live_seekable_range.call(this)
  end
end
struct LibWin32::IMFMediaEngineEME
  def query_interface(this : IMFMediaEngineEME*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaEngineEME*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaEngineEME*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_keys(this : IMFMediaEngineEME*, keys : IMFMediaKeys*) : HRESULT
    @lpVtbl.value.get_keys.call(this, keys)
  end
  def set_media_keys(this : IMFMediaEngineEME*, keys : IMFMediaKeys) : HRESULT
    @lpVtbl.value.set_media_keys.call(this, keys)
  end
end
struct LibWin32::IMFMediaEngineSrcElementsEx
  def query_interface(this : IMFMediaEngineSrcElementsEx*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaEngineSrcElementsEx*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaEngineSrcElementsEx*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_length(this : IMFMediaEngineSrcElementsEx*) : UInt32
    @lpVtbl.value.get_length.call(this)
  end
  def get_url(this : IMFMediaEngineSrcElementsEx*, index : UInt32, purl : UInt8**) : HRESULT
    @lpVtbl.value.get_url.call(this, index, purl)
  end
  def get_type(this : IMFMediaEngineSrcElementsEx*, index : UInt32, ptype : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, index, ptype)
  end
  def get_media(this : IMFMediaEngineSrcElementsEx*, index : UInt32, pmedia : UInt8**) : HRESULT
    @lpVtbl.value.get_media.call(this, index, pmedia)
  end
  def add_element(this : IMFMediaEngineSrcElementsEx*, purl : UInt8*, ptype : UInt8*, pmedia : UInt8*) : HRESULT
    @lpVtbl.value.add_element.call(this, purl, ptype, pmedia)
  end
  def remove_all_elements(this : IMFMediaEngineSrcElementsEx*) : HRESULT
    @lpVtbl.value.remove_all_elements.call(this)
  end
  def add_element_ex(this : IMFMediaEngineSrcElementsEx*, purl : UInt8*, ptype : UInt8*, pmedia : UInt8*, keysystem : UInt8*) : HRESULT
    @lpVtbl.value.add_element_ex.call(this, purl, ptype, pmedia, keysystem)
  end
  def get_key_system(this : IMFMediaEngineSrcElementsEx*, index : UInt32, ptype : UInt8**) : HRESULT
    @lpVtbl.value.get_key_system.call(this, index, ptype)
  end
end
struct LibWin32::IMFMediaEngineNeedKeyNotify
  def query_interface(this : IMFMediaEngineNeedKeyNotify*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaEngineNeedKeyNotify*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaEngineNeedKeyNotify*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def need_key(this : IMFMediaEngineNeedKeyNotify*, initdata : UInt8*, cb : UInt32) : Void
    @lpVtbl.value.need_key.call(this, initdata, cb)
  end
end
struct LibWin32::IMFMediaKeys
  def query_interface(this : IMFMediaKeys*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaKeys*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaKeys*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_session(this : IMFMediaKeys*, mimetype : UInt8*, initdata : UInt8*, cb : UInt32, customdata : UInt8*, cbcustomdata : UInt32, notify : IMFMediaKeySessionNotify, ppsession : IMFMediaKeySession*) : HRESULT
    @lpVtbl.value.create_session.call(this, mimetype, initdata, cb, customdata, cbcustomdata, notify, ppsession)
  end
  def get_key_system(this : IMFMediaKeys*, keysystem : UInt8**) : HRESULT
    @lpVtbl.value.get_key_system.call(this, keysystem)
  end
  def shutdown(this : IMFMediaKeys*) : HRESULT
    @lpVtbl.value.shutdown.call(this)
  end
  def get_suspend_notify(this : IMFMediaKeys*, notify : IMFCdmSuspendNotify*) : HRESULT
    @lpVtbl.value.get_suspend_notify.call(this, notify)
  end
end
struct LibWin32::IMFMediaKeySession
  def query_interface(this : IMFMediaKeySession*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaKeySession*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaKeySession*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_error(this : IMFMediaKeySession*, code : UInt16*, systemcode : UInt32*) : HRESULT
    @lpVtbl.value.get_error.call(this, code, systemcode)
  end
  def get_key_system(this : IMFMediaKeySession*, keysystem : UInt8**) : HRESULT
    @lpVtbl.value.get_key_system.call(this, keysystem)
  end
  def get_session_id(this : IMFMediaKeySession*, sessionid : UInt8**) : HRESULT
    @lpVtbl.value.get_session_id.call(this, sessionid)
  end
  def update(this : IMFMediaKeySession*, key : UInt8*, cb : UInt32) : HRESULT
    @lpVtbl.value.update.call(this, key, cb)
  end
  def close(this : IMFMediaKeySession*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
end
struct LibWin32::IMFMediaKeySessionNotify
  def query_interface(this : IMFMediaKeySessionNotify*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaKeySessionNotify*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaKeySessionNotify*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def key_message(this : IMFMediaKeySessionNotify*, destinationurl : UInt8*, message : UInt8*, cb : UInt32) : Void
    @lpVtbl.value.key_message.call(this, destinationurl, message, cb)
  end
  def key_added(this : IMFMediaKeySessionNotify*) : Void
    @lpVtbl.value.key_added.call(this)
  end
  def key_error(this : IMFMediaKeySessionNotify*, code : UInt16, systemcode : UInt32) : Void
    @lpVtbl.value.key_error.call(this, code, systemcode)
  end
end
struct LibWin32::IMFCdmSuspendNotify
  def query_interface(this : IMFCdmSuspendNotify*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFCdmSuspendNotify*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFCdmSuspendNotify*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def begin_(this : IMFCdmSuspendNotify*) : HRESULT
    @lpVtbl.value.begin_.call(this)
  end
  def end_(this : IMFCdmSuspendNotify*) : HRESULT
    @lpVtbl.value.end_.call(this)
  end
end
struct LibWin32::IMFHDCPStatus
  def query_interface(this : IMFHDCPStatus*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFHDCPStatus*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFHDCPStatus*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def query(this : IMFHDCPStatus*, pstatus : MF_HDCP_STATUS*, pfstatus : LibC::BOOL*) : HRESULT
    @lpVtbl.value.query.call(this, pstatus, pfstatus)
  end
  def set(this : IMFHDCPStatus*, status : MF_HDCP_STATUS) : HRESULT
    @lpVtbl.value.set.call(this, status)
  end
end
struct LibWin32::IMFMediaEngineOPMInfo
  def query_interface(this : IMFMediaEngineOPMInfo*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaEngineOPMInfo*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaEngineOPMInfo*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_opm_info(this : IMFMediaEngineOPMInfo*, pstatus : MF_MEDIA_ENGINE_OPM_STATUS*, pconstricted : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_opm_info.call(this, pstatus, pconstricted)
  end
end
struct LibWin32::IMFMediaEngineClassFactory
  def query_interface(this : IMFMediaEngineClassFactory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaEngineClassFactory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaEngineClassFactory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_instance(this : IMFMediaEngineClassFactory*, dwflags : UInt32, pattr : IMFAttributes, ppplayer : IMFMediaEngine*) : HRESULT
    @lpVtbl.value.create_instance.call(this, dwflags, pattr, ppplayer)
  end
  def create_time_range(this : IMFMediaEngineClassFactory*, pptimerange : IMFMediaTimeRange*) : HRESULT
    @lpVtbl.value.create_time_range.call(this, pptimerange)
  end
  def create_error(this : IMFMediaEngineClassFactory*, pperror : IMFMediaError*) : HRESULT
    @lpVtbl.value.create_error.call(this, pperror)
  end
end
struct LibWin32::IMFMediaEngineClassFactoryEx
  def query_interface(this : IMFMediaEngineClassFactoryEx*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaEngineClassFactoryEx*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaEngineClassFactoryEx*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_instance(this : IMFMediaEngineClassFactoryEx*, dwflags : UInt32, pattr : IMFAttributes, ppplayer : IMFMediaEngine*) : HRESULT
    @lpVtbl.value.create_instance.call(this, dwflags, pattr, ppplayer)
  end
  def create_time_range(this : IMFMediaEngineClassFactoryEx*, pptimerange : IMFMediaTimeRange*) : HRESULT
    @lpVtbl.value.create_time_range.call(this, pptimerange)
  end
  def create_error(this : IMFMediaEngineClassFactoryEx*, pperror : IMFMediaError*) : HRESULT
    @lpVtbl.value.create_error.call(this, pperror)
  end
  def create_media_source_extension(this : IMFMediaEngineClassFactoryEx*, dwflags : UInt32, pattr : IMFAttributes, ppmse : IMFMediaSourceExtension*) : HRESULT
    @lpVtbl.value.create_media_source_extension.call(this, dwflags, pattr, ppmse)
  end
  def create_media_keys(this : IMFMediaEngineClassFactoryEx*, keysystem : UInt8*, cdmstorepath : UInt8*, ppkeys : IMFMediaKeys*) : HRESULT
    @lpVtbl.value.create_media_keys.call(this, keysystem, cdmstorepath, ppkeys)
  end
  def is_type_supported(this : IMFMediaEngineClassFactoryEx*, type : UInt8*, keysystem : UInt8*, issupported : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_type_supported.call(this, type, keysystem, issupported)
  end
end
struct LibWin32::IMFMediaEngineClassFactory2
  def query_interface(this : IMFMediaEngineClassFactory2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaEngineClassFactory2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaEngineClassFactory2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_media_keys2(this : IMFMediaEngineClassFactory2*, keysystem : UInt8*, defaultcdmstorepath : UInt8*, inprivatecdmstorepath : UInt8*, ppkeys : IMFMediaKeys*) : HRESULT
    @lpVtbl.value.create_media_keys2.call(this, keysystem, defaultcdmstorepath, inprivatecdmstorepath, ppkeys)
  end
end
struct LibWin32::IMFExtendedDRMTypeSupport
  def query_interface(this : IMFExtendedDRMTypeSupport*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFExtendedDRMTypeSupport*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFExtendedDRMTypeSupport*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def is_type_supported_ex(this : IMFExtendedDRMTypeSupport*, type : UInt8*, keysystem : UInt8*, panswer : MF_MEDIA_ENGINE_CANPLAY*) : HRESULT
    @lpVtbl.value.is_type_supported_ex.call(this, type, keysystem, panswer)
  end
end
struct LibWin32::IMFMediaEngineSupportsSourceTransfer
  def query_interface(this : IMFMediaEngineSupportsSourceTransfer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaEngineSupportsSourceTransfer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaEngineSupportsSourceTransfer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def should_transfer_source(this : IMFMediaEngineSupportsSourceTransfer*, pfshouldtransfer : LibC::BOOL*) : HRESULT
    @lpVtbl.value.should_transfer_source.call(this, pfshouldtransfer)
  end
  def detach_media_source(this : IMFMediaEngineSupportsSourceTransfer*, ppbytestream : IMFByteStream*, ppmediasource : IMFMediaSource*, ppmse : IMFMediaSourceExtension*) : HRESULT
    @lpVtbl.value.detach_media_source.call(this, ppbytestream, ppmediasource, ppmse)
  end
  def attach_media_source(this : IMFMediaEngineSupportsSourceTransfer*, pbytestream : IMFByteStream, pmediasource : IMFMediaSource, pmse : IMFMediaSourceExtension) : HRESULT
    @lpVtbl.value.attach_media_source.call(this, pbytestream, pmediasource, pmse)
  end
end
struct LibWin32::IMFMediaEngineTransferSource
  def query_interface(this : IMFMediaEngineTransferSource*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaEngineTransferSource*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaEngineTransferSource*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def transfer_source_to_media_engine(this : IMFMediaEngineTransferSource*, destination : IMFMediaEngine) : HRESULT
    @lpVtbl.value.transfer_source_to_media_engine.call(this, destination)
  end
end
struct LibWin32::IMFTimedText
  def query_interface(this : IMFTimedText*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFTimedText*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFTimedText*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def register_notifications(this : IMFTimedText*, notify : IMFTimedTextNotify) : HRESULT
    @lpVtbl.value.register_notifications.call(this, notify)
  end
  def select_track(this : IMFTimedText*, trackid : UInt32, selected : LibC::BOOL) : HRESULT
    @lpVtbl.value.select_track.call(this, trackid, selected)
  end
  def add_data_source(this : IMFTimedText*, bytestream : IMFByteStream, label : LibC::LPWSTR, language : LibC::LPWSTR, kind : MF_TIMED_TEXT_TRACK_KIND, isdefault : LibC::BOOL, trackid : UInt32*) : HRESULT
    @lpVtbl.value.add_data_source.call(this, bytestream, label, language, kind, isdefault, trackid)
  end
  def add_data_source_from_url(this : IMFTimedText*, url : LibC::LPWSTR, label : LibC::LPWSTR, language : LibC::LPWSTR, kind : MF_TIMED_TEXT_TRACK_KIND, isdefault : LibC::BOOL, trackid : UInt32*) : HRESULT
    @lpVtbl.value.add_data_source_from_url.call(this, url, label, language, kind, isdefault, trackid)
  end
  def add_track(this : IMFTimedText*, label : LibC::LPWSTR, language : LibC::LPWSTR, kind : MF_TIMED_TEXT_TRACK_KIND, track : IMFTimedTextTrack*) : HRESULT
    @lpVtbl.value.add_track.call(this, label, language, kind, track)
  end
  def remove_track(this : IMFTimedText*, track : IMFTimedTextTrack) : HRESULT
    @lpVtbl.value.remove_track.call(this, track)
  end
  def get_cue_time_offset(this : IMFTimedText*, offset : Float64*) : HRESULT
    @lpVtbl.value.get_cue_time_offset.call(this, offset)
  end
  def set_cue_time_offset(this : IMFTimedText*, offset : Float64) : HRESULT
    @lpVtbl.value.set_cue_time_offset.call(this, offset)
  end
  def get_tracks(this : IMFTimedText*, tracks : IMFTimedTextTrackList*) : HRESULT
    @lpVtbl.value.get_tracks.call(this, tracks)
  end
  def get_active_tracks(this : IMFTimedText*, activetracks : IMFTimedTextTrackList*) : HRESULT
    @lpVtbl.value.get_active_tracks.call(this, activetracks)
  end
  def get_text_tracks(this : IMFTimedText*, texttracks : IMFTimedTextTrackList*) : HRESULT
    @lpVtbl.value.get_text_tracks.call(this, texttracks)
  end
  def get_metadata_tracks(this : IMFTimedText*, metadatatracks : IMFTimedTextTrackList*) : HRESULT
    @lpVtbl.value.get_metadata_tracks.call(this, metadatatracks)
  end
  def set_in_band_enabled(this : IMFTimedText*, enabled : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_in_band_enabled.call(this, enabled)
  end
  def is_in_band_enabled(this : IMFTimedText*) : LibC::BOOL
    @lpVtbl.value.is_in_band_enabled.call(this)
  end
end
struct LibWin32::IMFTimedTextNotify
  def query_interface(this : IMFTimedTextNotify*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFTimedTextNotify*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFTimedTextNotify*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def track_added(this : IMFTimedTextNotify*, trackid : UInt32) : Void
    @lpVtbl.value.track_added.call(this, trackid)
  end
  def track_removed(this : IMFTimedTextNotify*, trackid : UInt32) : Void
    @lpVtbl.value.track_removed.call(this, trackid)
  end
  def track_selected(this : IMFTimedTextNotify*, trackid : UInt32, selected : LibC::BOOL) : Void
    @lpVtbl.value.track_selected.call(this, trackid, selected)
  end
  def track_ready_state_changed(this : IMFTimedTextNotify*, trackid : UInt32) : Void
    @lpVtbl.value.track_ready_state_changed.call(this, trackid)
  end
  def error(this : IMFTimedTextNotify*, errorcode : MF_TIMED_TEXT_ERROR_CODE, extendederrorcode : HRESULT, sourcetrackid : UInt32) : Void
    @lpVtbl.value.error.call(this, errorcode, extendederrorcode, sourcetrackid)
  end
  def cue(this : IMFTimedTextNotify*, cueevent : MF_TIMED_TEXT_CUE_EVENT, currenttime : Float64, cue : IMFTimedTextCue) : Void
    @lpVtbl.value.cue.call(this, cueevent, currenttime, cue)
  end
  def reset(this : IMFTimedTextNotify*) : Void
    @lpVtbl.value.reset.call(this)
  end
end
struct LibWin32::IMFTimedTextTrack
  def query_interface(this : IMFTimedTextTrack*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFTimedTextTrack*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFTimedTextTrack*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_id(this : IMFTimedTextTrack*) : UInt32
    @lpVtbl.value.get_id.call(this)
  end
  def get_label(this : IMFTimedTextTrack*, label : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_label.call(this, label)
  end
  def set_label(this : IMFTimedTextTrack*, label : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_label.call(this, label)
  end
  def get_language(this : IMFTimedTextTrack*, language : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_language.call(this, language)
  end
  def get_track_kind(this : IMFTimedTextTrack*) : MF_TIMED_TEXT_TRACK_KIND
    @lpVtbl.value.get_track_kind.call(this)
  end
  def is_in_band(this : IMFTimedTextTrack*) : LibC::BOOL
    @lpVtbl.value.is_in_band.call(this)
  end
  def get_in_band_metadata_track_dispatch_type(this : IMFTimedTextTrack*, dispatchtype : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_in_band_metadata_track_dispatch_type.call(this, dispatchtype)
  end
  def is_active(this : IMFTimedTextTrack*) : LibC::BOOL
    @lpVtbl.value.is_active.call(this)
  end
  def get_error_code(this : IMFTimedTextTrack*) : MF_TIMED_TEXT_ERROR_CODE
    @lpVtbl.value.get_error_code.call(this)
  end
  def get_extended_error_code(this : IMFTimedTextTrack*) : HRESULT
    @lpVtbl.value.get_extended_error_code.call(this)
  end
  def get_data_format(this : IMFTimedTextTrack*, format : Guid*) : HRESULT
    @lpVtbl.value.get_data_format.call(this, format)
  end
  def get_ready_state(this : IMFTimedTextTrack*) : MF_TIMED_TEXT_TRACK_READY_STATE
    @lpVtbl.value.get_ready_state.call(this)
  end
  def get_cue_list(this : IMFTimedTextTrack*, cues : IMFTimedTextCueList*) : HRESULT
    @lpVtbl.value.get_cue_list.call(this, cues)
  end
end
struct LibWin32::IMFTimedTextTrackList
  def query_interface(this : IMFTimedTextTrackList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFTimedTextTrackList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFTimedTextTrackList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_length(this : IMFTimedTextTrackList*) : UInt32
    @lpVtbl.value.get_length.call(this)
  end
  def get_track(this : IMFTimedTextTrackList*, index : UInt32, track : IMFTimedTextTrack*) : HRESULT
    @lpVtbl.value.get_track.call(this, index, track)
  end
  def get_track_by_id(this : IMFTimedTextTrackList*, trackid : UInt32, track : IMFTimedTextTrack*) : HRESULT
    @lpVtbl.value.get_track_by_id.call(this, trackid, track)
  end
end
struct LibWin32::IMFTimedTextCue
  def query_interface(this : IMFTimedTextCue*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFTimedTextCue*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFTimedTextCue*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_id(this : IMFTimedTextCue*) : UInt32
    @lpVtbl.value.get_id.call(this)
  end
  def get_original_id(this : IMFTimedTextCue*, originalid : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_original_id.call(this, originalid)
  end
  def get_cue_kind(this : IMFTimedTextCue*) : MF_TIMED_TEXT_TRACK_KIND
    @lpVtbl.value.get_cue_kind.call(this)
  end
  def get_start_time(this : IMFTimedTextCue*) : Float64
    @lpVtbl.value.get_start_time.call(this)
  end
  def get_duration(this : IMFTimedTextCue*) : Float64
    @lpVtbl.value.get_duration.call(this)
  end
  def get_track_id(this : IMFTimedTextCue*) : UInt32
    @lpVtbl.value.get_track_id.call(this)
  end
  def get_data(this : IMFTimedTextCue*, data : IMFTimedTextBinary*) : HRESULT
    @lpVtbl.value.get_data.call(this, data)
  end
  def get_region(this : IMFTimedTextCue*, region : IMFTimedTextRegion*) : HRESULT
    @lpVtbl.value.get_region.call(this, region)
  end
  def get_style(this : IMFTimedTextCue*, style : IMFTimedTextStyle*) : HRESULT
    @lpVtbl.value.get_style.call(this, style)
  end
  def get_line_count(this : IMFTimedTextCue*) : UInt32
    @lpVtbl.value.get_line_count.call(this)
  end
  def get_line(this : IMFTimedTextCue*, index : UInt32, line : IMFTimedTextFormattedText*) : HRESULT
    @lpVtbl.value.get_line.call(this, index, line)
  end
end
struct LibWin32::IMFTimedTextFormattedText
  def query_interface(this : IMFTimedTextFormattedText*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFTimedTextFormattedText*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFTimedTextFormattedText*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_text(this : IMFTimedTextFormattedText*, text : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_text.call(this, text)
  end
  def get_subformatting_count(this : IMFTimedTextFormattedText*) : UInt32
    @lpVtbl.value.get_subformatting_count.call(this)
  end
  def get_subformatting(this : IMFTimedTextFormattedText*, index : UInt32, firstchar : UInt32*, charlength : UInt32*, style : IMFTimedTextStyle*) : HRESULT
    @lpVtbl.value.get_subformatting.call(this, index, firstchar, charlength, style)
  end
end
struct LibWin32::IMFTimedTextStyle
  def query_interface(this : IMFTimedTextStyle*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFTimedTextStyle*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFTimedTextStyle*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_name(this : IMFTimedTextStyle*, name : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_name.call(this, name)
  end
  def is_external(this : IMFTimedTextStyle*) : LibC::BOOL
    @lpVtbl.value.is_external.call(this)
  end
  def get_font_family(this : IMFTimedTextStyle*, fontfamily : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_font_family.call(this, fontfamily)
  end
  def get_font_size(this : IMFTimedTextStyle*, fontsize : Float64*, unittype : MF_TIMED_TEXT_UNIT_TYPE*) : HRESULT
    @lpVtbl.value.get_font_size.call(this, fontsize, unittype)
  end
  def get_color(this : IMFTimedTextStyle*, color : MFARGB*) : HRESULT
    @lpVtbl.value.get_color.call(this, color)
  end
  def get_background_color(this : IMFTimedTextStyle*, bgcolor : MFARGB*) : HRESULT
    @lpVtbl.value.get_background_color.call(this, bgcolor)
  end
  def get_show_background_always(this : IMFTimedTextStyle*, showbackgroundalways : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_show_background_always.call(this, showbackgroundalways)
  end
  def get_font_style(this : IMFTimedTextStyle*, fontstyle : MF_TIMED_TEXT_FONT_STYLE*) : HRESULT
    @lpVtbl.value.get_font_style.call(this, fontstyle)
  end
  def get_bold(this : IMFTimedTextStyle*, bold : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_bold.call(this, bold)
  end
  def get_right_to_left(this : IMFTimedTextStyle*, righttoleft : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_right_to_left.call(this, righttoleft)
  end
  def get_text_alignment(this : IMFTimedTextStyle*, textalign : MF_TIMED_TEXT_ALIGNMENT*) : HRESULT
    @lpVtbl.value.get_text_alignment.call(this, textalign)
  end
  def get_text_decoration(this : IMFTimedTextStyle*, textdecoration : UInt32*) : HRESULT
    @lpVtbl.value.get_text_decoration.call(this, textdecoration)
  end
  def get_text_outline(this : IMFTimedTextStyle*, color : MFARGB*, thickness : Float64*, blurradius : Float64*, unittype : MF_TIMED_TEXT_UNIT_TYPE*) : HRESULT
    @lpVtbl.value.get_text_outline.call(this, color, thickness, blurradius, unittype)
  end
end
struct LibWin32::IMFTimedTextRegion
  def query_interface(this : IMFTimedTextRegion*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFTimedTextRegion*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFTimedTextRegion*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_name(this : IMFTimedTextRegion*, name : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_name.call(this, name)
  end
  def get_position(this : IMFTimedTextRegion*, px : Float64*, py : Float64*, unittype : MF_TIMED_TEXT_UNIT_TYPE*) : HRESULT
    @lpVtbl.value.get_position.call(this, px, py, unittype)
  end
  def get_extent(this : IMFTimedTextRegion*, pwidth : Float64*, pheight : Float64*, unittype : MF_TIMED_TEXT_UNIT_TYPE*) : HRESULT
    @lpVtbl.value.get_extent.call(this, pwidth, pheight, unittype)
  end
  def get_background_color(this : IMFTimedTextRegion*, bgcolor : MFARGB*) : HRESULT
    @lpVtbl.value.get_background_color.call(this, bgcolor)
  end
  def get_writing_mode(this : IMFTimedTextRegion*, writingmode : MF_TIMED_TEXT_WRITING_MODE*) : HRESULT
    @lpVtbl.value.get_writing_mode.call(this, writingmode)
  end
  def get_display_alignment(this : IMFTimedTextRegion*, displayalign : MF_TIMED_TEXT_DISPLAY_ALIGNMENT*) : HRESULT
    @lpVtbl.value.get_display_alignment.call(this, displayalign)
  end
  def get_line_height(this : IMFTimedTextRegion*, plineheight : Float64*, unittype : MF_TIMED_TEXT_UNIT_TYPE*) : HRESULT
    @lpVtbl.value.get_line_height.call(this, plineheight, unittype)
  end
  def get_clip_overflow(this : IMFTimedTextRegion*, clipoverflow : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_clip_overflow.call(this, clipoverflow)
  end
  def get_padding(this : IMFTimedTextRegion*, before : Float64*, start : Float64*, after : Float64*, end_ : Float64*, unittype : MF_TIMED_TEXT_UNIT_TYPE*) : HRESULT
    @lpVtbl.value.get_padding.call(this, before, start, after, end_, unittype)
  end
  def get_wrap(this : IMFTimedTextRegion*, wrap : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_wrap.call(this, wrap)
  end
  def get_z_index(this : IMFTimedTextRegion*, zindex : Int32*) : HRESULT
    @lpVtbl.value.get_z_index.call(this, zindex)
  end
  def get_scroll_mode(this : IMFTimedTextRegion*, scrollmode : MF_TIMED_TEXT_SCROLL_MODE*) : HRESULT
    @lpVtbl.value.get_scroll_mode.call(this, scrollmode)
  end
end
struct LibWin32::IMFTimedTextBinary
  def query_interface(this : IMFTimedTextBinary*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFTimedTextBinary*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFTimedTextBinary*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_data(this : IMFTimedTextBinary*, data : UInt8**, length : UInt32*) : HRESULT
    @lpVtbl.value.get_data.call(this, data, length)
  end
end
struct LibWin32::IMFTimedTextCueList
  def query_interface(this : IMFTimedTextCueList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFTimedTextCueList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFTimedTextCueList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_length(this : IMFTimedTextCueList*) : UInt32
    @lpVtbl.value.get_length.call(this)
  end
  def get_cue_by_index(this : IMFTimedTextCueList*, index : UInt32, cue : IMFTimedTextCue*) : HRESULT
    @lpVtbl.value.get_cue_by_index.call(this, index, cue)
  end
  def get_cue_by_id(this : IMFTimedTextCueList*, id : UInt32, cue : IMFTimedTextCue*) : HRESULT
    @lpVtbl.value.get_cue_by_id.call(this, id, cue)
  end
  def get_cue_by_original_id(this : IMFTimedTextCueList*, originalid : LibC::LPWSTR, cue : IMFTimedTextCue*) : HRESULT
    @lpVtbl.value.get_cue_by_original_id.call(this, originalid, cue)
  end
  def add_text_cue(this : IMFTimedTextCueList*, start : Float64, duration : Float64, text : LibC::LPWSTR, cue : IMFTimedTextCue*) : HRESULT
    @lpVtbl.value.add_text_cue.call(this, start, duration, text, cue)
  end
  def add_data_cue(this : IMFTimedTextCueList*, start : Float64, duration : Float64, data : UInt8*, datasize : UInt32, cue : IMFTimedTextCue*) : HRESULT
    @lpVtbl.value.add_data_cue.call(this, start, duration, data, datasize, cue)
  end
  def remove_cue(this : IMFTimedTextCueList*, cue : IMFTimedTextCue) : HRESULT
    @lpVtbl.value.remove_cue.call(this, cue)
  end
end
struct LibWin32::IMFTimedTextRuby
  def query_interface(this : IMFTimedTextRuby*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFTimedTextRuby*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFTimedTextRuby*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_ruby_text(this : IMFTimedTextRuby*, rubytext : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_ruby_text.call(this, rubytext)
  end
  def get_ruby_position(this : IMFTimedTextRuby*, value : MF_TIMED_TEXT_RUBY_POSITION*) : HRESULT
    @lpVtbl.value.get_ruby_position.call(this, value)
  end
  def get_ruby_align(this : IMFTimedTextRuby*, value : MF_TIMED_TEXT_RUBY_ALIGN*) : HRESULT
    @lpVtbl.value.get_ruby_align.call(this, value)
  end
  def get_ruby_reserve(this : IMFTimedTextRuby*, value : MF_TIMED_TEXT_RUBY_RESERVE*) : HRESULT
    @lpVtbl.value.get_ruby_reserve.call(this, value)
  end
end
struct LibWin32::IMFTimedTextBouten
  def query_interface(this : IMFTimedTextBouten*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFTimedTextBouten*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFTimedTextBouten*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_bouten_type(this : IMFTimedTextBouten*, value : MF_TIMED_TEXT_BOUTEN_TYPE*) : HRESULT
    @lpVtbl.value.get_bouten_type.call(this, value)
  end
  def get_bouten_color(this : IMFTimedTextBouten*, value : MFARGB*) : HRESULT
    @lpVtbl.value.get_bouten_color.call(this, value)
  end
  def get_bouten_position(this : IMFTimedTextBouten*, value : MF_TIMED_TEXT_BOUTEN_POSITION*) : HRESULT
    @lpVtbl.value.get_bouten_position.call(this, value)
  end
end
struct LibWin32::IMFTimedTextStyle2
  def query_interface(this : IMFTimedTextStyle2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFTimedTextStyle2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFTimedTextStyle2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_ruby(this : IMFTimedTextStyle2*, ruby : IMFTimedTextRuby*) : HRESULT
    @lpVtbl.value.get_ruby.call(this, ruby)
  end
  def get_bouten(this : IMFTimedTextStyle2*, bouten : IMFTimedTextBouten*) : HRESULT
    @lpVtbl.value.get_bouten.call(this, bouten)
  end
  def is_text_combined(this : IMFTimedTextStyle2*, value : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_text_combined.call(this, value)
  end
  def get_font_angle_in_degrees(this : IMFTimedTextStyle2*, value : Float64*) : HRESULT
    @lpVtbl.value.get_font_angle_in_degrees.call(this, value)
  end
end
struct LibWin32::IMFMediaEngineEMENotify
  def query_interface(this : IMFMediaEngineEMENotify*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaEngineEMENotify*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaEngineEMENotify*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def encrypted(this : IMFMediaEngineEMENotify*, pbinitdata : UInt8*, cb : UInt32, bstrinitdatatype : UInt8*) : Void
    @lpVtbl.value.encrypted.call(this, pbinitdata, cb, bstrinitdatatype)
  end
  def waiting_for_key(this : IMFMediaEngineEMENotify*) : Void
    @lpVtbl.value.waiting_for_key.call(this)
  end
end
struct LibWin32::IMFMediaKeySessionNotify2
  def query_interface(this : IMFMediaKeySessionNotify2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaKeySessionNotify2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaKeySessionNotify2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def key_message(this : IMFMediaKeySessionNotify2*, destinationurl : UInt8*, message : UInt8*, cb : UInt32) : Void
    @lpVtbl.value.key_message.call(this, destinationurl, message, cb)
  end
  def key_added(this : IMFMediaKeySessionNotify2*) : Void
    @lpVtbl.value.key_added.call(this)
  end
  def key_error(this : IMFMediaKeySessionNotify2*, code : UInt16, systemcode : UInt32) : Void
    @lpVtbl.value.key_error.call(this, code, systemcode)
  end
  def key_message2(this : IMFMediaKeySessionNotify2*, emessagetype : MF_MEDIAKEYSESSION_MESSAGETYPE, destinationurl : UInt8*, pbmessage : UInt8*, cbmessage : UInt32) : Void
    @lpVtbl.value.key_message2.call(this, emessagetype, destinationurl, pbmessage, cbmessage)
  end
  def key_status_change(this : IMFMediaKeySessionNotify2*) : Void
    @lpVtbl.value.key_status_change.call(this)
  end
end
struct LibWin32::IMFMediaKeySystemAccess
  def query_interface(this : IMFMediaKeySystemAccess*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaKeySystemAccess*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaKeySystemAccess*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_media_keys(this : IMFMediaKeySystemAccess*, pcdmcustomconfig : IPropertyStore, ppkeys : IMFMediaKeys2*) : HRESULT
    @lpVtbl.value.create_media_keys.call(this, pcdmcustomconfig, ppkeys)
  end
  def get_supported_configuration(this : IMFMediaKeySystemAccess*, ppsupportedconfiguration : IPropertyStore*) : HRESULT
    @lpVtbl.value.get_supported_configuration.call(this, ppsupportedconfiguration)
  end
  def get_key_system(this : IMFMediaKeySystemAccess*, pkeysystem : UInt8**) : HRESULT
    @lpVtbl.value.get_key_system.call(this, pkeysystem)
  end
end
struct LibWin32::IMFMediaEngineClassFactory3
  def query_interface(this : IMFMediaEngineClassFactory3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaEngineClassFactory3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaEngineClassFactory3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_media_key_system_access(this : IMFMediaEngineClassFactory3*, keysystem : UInt8*, ppsupportedconfigurationsarray : IPropertyStore*, usize : UInt32, ppkeyaccess : IMFMediaKeySystemAccess*) : HRESULT
    @lpVtbl.value.create_media_key_system_access.call(this, keysystem, ppsupportedconfigurationsarray, usize, ppkeyaccess)
  end
end
struct LibWin32::IMFMediaKeys2
  def query_interface(this : IMFMediaKeys2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaKeys2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaKeys2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_session(this : IMFMediaKeys2*, mimetype : UInt8*, initdata : UInt8*, cb : UInt32, customdata : UInt8*, cbcustomdata : UInt32, notify : IMFMediaKeySessionNotify, ppsession : IMFMediaKeySession*) : HRESULT
    @lpVtbl.value.create_session.call(this, mimetype, initdata, cb, customdata, cbcustomdata, notify, ppsession)
  end
  def get_key_system(this : IMFMediaKeys2*, keysystem : UInt8**) : HRESULT
    @lpVtbl.value.get_key_system.call(this, keysystem)
  end
  def shutdown(this : IMFMediaKeys2*) : HRESULT
    @lpVtbl.value.shutdown.call(this)
  end
  def get_suspend_notify(this : IMFMediaKeys2*, notify : IMFCdmSuspendNotify*) : HRESULT
    @lpVtbl.value.get_suspend_notify.call(this, notify)
  end
  def create_session2(this : IMFMediaKeys2*, esessiontype : MF_MEDIAKEYSESSION_TYPE, pmfmediakeysessionnotify2 : IMFMediaKeySessionNotify2, ppsession : IMFMediaKeySession2*) : HRESULT
    @lpVtbl.value.create_session2.call(this, esessiontype, pmfmediakeysessionnotify2, ppsession)
  end
  def set_server_certificate(this : IMFMediaKeys2*, pbservercertificate : UInt8*, cb : UInt32) : HRESULT
    @lpVtbl.value.set_server_certificate.call(this, pbservercertificate, cb)
  end
  def get_dom_exception(this : IMFMediaKeys2*, systemcode : HRESULT, code : HRESULT*) : HRESULT
    @lpVtbl.value.get_dom_exception.call(this, systemcode, code)
  end
end
struct LibWin32::IMFMediaKeySession2
  def query_interface(this : IMFMediaKeySession2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaKeySession2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaKeySession2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_error(this : IMFMediaKeySession2*, code : UInt16*, systemcode : UInt32*) : HRESULT
    @lpVtbl.value.get_error.call(this, code, systemcode)
  end
  def get_key_system(this : IMFMediaKeySession2*, keysystem : UInt8**) : HRESULT
    @lpVtbl.value.get_key_system.call(this, keysystem)
  end
  def get_session_id(this : IMFMediaKeySession2*, sessionid : UInt8**) : HRESULT
    @lpVtbl.value.get_session_id.call(this, sessionid)
  end
  def update(this : IMFMediaKeySession2*, key : UInt8*, cb : UInt32) : HRESULT
    @lpVtbl.value.update.call(this, key, cb)
  end
  def close(this : IMFMediaKeySession2*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def get_key_statuses(this : IMFMediaKeySession2*, pkeystatusesarray : MFMediaKeyStatus**, pusize : UInt32*) : HRESULT
    @lpVtbl.value.get_key_statuses.call(this, pkeystatusesarray, pusize)
  end
  def load(this : IMFMediaKeySession2*, bstrsessionid : UInt8*, pfloaded : LibC::BOOL*) : HRESULT
    @lpVtbl.value.load.call(this, bstrsessionid, pfloaded)
  end
  def generate_request(this : IMFMediaKeySession2*, initdatatype : UInt8*, pbinitdata : UInt8*, cb : UInt32) : HRESULT
    @lpVtbl.value.generate_request.call(this, initdatatype, pbinitdata, cb)
  end
  def get_expiration(this : IMFMediaKeySession2*, dblexpiration : Float64*) : HRESULT
    @lpVtbl.value.get_expiration.call(this, dblexpiration)
  end
  def remove(this : IMFMediaKeySession2*) : HRESULT
    @lpVtbl.value.remove.call(this)
  end
  def shutdown(this : IMFMediaKeySession2*) : HRESULT
    @lpVtbl.value.shutdown.call(this)
  end
end
struct LibWin32::IMFMediaEngineClassFactory4
  def query_interface(this : IMFMediaEngineClassFactory4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaEngineClassFactory4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaEngineClassFactory4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_content_decryption_module_factory(this : IMFMediaEngineClassFactory4*, keysystem : LibC::LPWSTR, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.create_content_decryption_module_factory.call(this, keysystem, riid, ppvobject)
  end
end
struct LibWin32::IMFDLNASinkInit
  def query_interface(this : IMFDLNASinkInit*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFDLNASinkInit*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFDLNASinkInit*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def initialize(this : IMFDLNASinkInit*, pbytestream : IMFByteStream, fpal : LibC::BOOL) : HRESULT
    @lpVtbl.value.initialize.call(this, pbytestream, fpal)
  end
end
struct LibWin32::IMFReadWriteClassFactory
  def query_interface(this : IMFReadWriteClassFactory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFReadWriteClassFactory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFReadWriteClassFactory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_instance_from_url(this : IMFReadWriteClassFactory*, clsid : Guid*, pwszurl : LibC::LPWSTR, pattributes : IMFAttributes, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.create_instance_from_url.call(this, clsid, pwszurl, pattributes, riid, ppvobject)
  end
  def create_instance_from_object(this : IMFReadWriteClassFactory*, clsid : Guid*, punkobject : IUnknown, pattributes : IMFAttributes, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.create_instance_from_object.call(this, clsid, punkobject, pattributes, riid, ppvobject)
  end
end
struct LibWin32::IMFSourceReader
  def query_interface(this : IMFSourceReader*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSourceReader*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSourceReader*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_stream_selection(this : IMFSourceReader*, dwstreamindex : UInt32, pfselected : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_stream_selection.call(this, dwstreamindex, pfselected)
  end
  def set_stream_selection(this : IMFSourceReader*, dwstreamindex : UInt32, fselected : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_stream_selection.call(this, dwstreamindex, fselected)
  end
  def get_native_media_type(this : IMFSourceReader*, dwstreamindex : UInt32, dwmediatypeindex : UInt32, ppmediatype : IMFMediaType*) : HRESULT
    @lpVtbl.value.get_native_media_type.call(this, dwstreamindex, dwmediatypeindex, ppmediatype)
  end
  def get_current_media_type(this : IMFSourceReader*, dwstreamindex : UInt32, ppmediatype : IMFMediaType*) : HRESULT
    @lpVtbl.value.get_current_media_type.call(this, dwstreamindex, ppmediatype)
  end
  def set_current_media_type(this : IMFSourceReader*, dwstreamindex : UInt32, pdwreserved : UInt32*, pmediatype : IMFMediaType) : HRESULT
    @lpVtbl.value.set_current_media_type.call(this, dwstreamindex, pdwreserved, pmediatype)
  end
  def set_current_position(this : IMFSourceReader*, guidtimeformat : Guid*, varposition : PROPVARIANT*) : HRESULT
    @lpVtbl.value.set_current_position.call(this, guidtimeformat, varposition)
  end
  def read_sample(this : IMFSourceReader*, dwstreamindex : UInt32, dwcontrolflags : UInt32, pdwactualstreamindex : UInt32*, pdwstreamflags : UInt32*, plltimestamp : Int64*, ppsample : IMFSample*) : HRESULT
    @lpVtbl.value.read_sample.call(this, dwstreamindex, dwcontrolflags, pdwactualstreamindex, pdwstreamflags, plltimestamp, ppsample)
  end
  def flush(this : IMFSourceReader*, dwstreamindex : UInt32) : HRESULT
    @lpVtbl.value.flush.call(this, dwstreamindex)
  end
  def get_service_for_stream(this : IMFSourceReader*, dwstreamindex : UInt32, guidservice : Guid*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.get_service_for_stream.call(this, dwstreamindex, guidservice, riid, ppvobject)
  end
  def get_presentation_attribute(this : IMFSourceReader*, dwstreamindex : UInt32, guidattribute : Guid*, pvarattribute : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_presentation_attribute.call(this, dwstreamindex, guidattribute, pvarattribute)
  end
end
struct LibWin32::IMFSourceReaderEx
  def query_interface(this : IMFSourceReaderEx*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSourceReaderEx*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSourceReaderEx*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_stream_selection(this : IMFSourceReaderEx*, dwstreamindex : UInt32, pfselected : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_stream_selection.call(this, dwstreamindex, pfselected)
  end
  def set_stream_selection(this : IMFSourceReaderEx*, dwstreamindex : UInt32, fselected : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_stream_selection.call(this, dwstreamindex, fselected)
  end
  def get_native_media_type(this : IMFSourceReaderEx*, dwstreamindex : UInt32, dwmediatypeindex : UInt32, ppmediatype : IMFMediaType*) : HRESULT
    @lpVtbl.value.get_native_media_type.call(this, dwstreamindex, dwmediatypeindex, ppmediatype)
  end
  def get_current_media_type(this : IMFSourceReaderEx*, dwstreamindex : UInt32, ppmediatype : IMFMediaType*) : HRESULT
    @lpVtbl.value.get_current_media_type.call(this, dwstreamindex, ppmediatype)
  end
  def set_current_media_type(this : IMFSourceReaderEx*, dwstreamindex : UInt32, pdwreserved : UInt32*, pmediatype : IMFMediaType) : HRESULT
    @lpVtbl.value.set_current_media_type.call(this, dwstreamindex, pdwreserved, pmediatype)
  end
  def set_current_position(this : IMFSourceReaderEx*, guidtimeformat : Guid*, varposition : PROPVARIANT*) : HRESULT
    @lpVtbl.value.set_current_position.call(this, guidtimeformat, varposition)
  end
  def read_sample(this : IMFSourceReaderEx*, dwstreamindex : UInt32, dwcontrolflags : UInt32, pdwactualstreamindex : UInt32*, pdwstreamflags : UInt32*, plltimestamp : Int64*, ppsample : IMFSample*) : HRESULT
    @lpVtbl.value.read_sample.call(this, dwstreamindex, dwcontrolflags, pdwactualstreamindex, pdwstreamflags, plltimestamp, ppsample)
  end
  def flush(this : IMFSourceReaderEx*, dwstreamindex : UInt32) : HRESULT
    @lpVtbl.value.flush.call(this, dwstreamindex)
  end
  def get_service_for_stream(this : IMFSourceReaderEx*, dwstreamindex : UInt32, guidservice : Guid*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.get_service_for_stream.call(this, dwstreamindex, guidservice, riid, ppvobject)
  end
  def get_presentation_attribute(this : IMFSourceReaderEx*, dwstreamindex : UInt32, guidattribute : Guid*, pvarattribute : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_presentation_attribute.call(this, dwstreamindex, guidattribute, pvarattribute)
  end
  def set_native_media_type(this : IMFSourceReaderEx*, dwstreamindex : UInt32, pmediatype : IMFMediaType, pdwstreamflags : UInt32*) : HRESULT
    @lpVtbl.value.set_native_media_type.call(this, dwstreamindex, pmediatype, pdwstreamflags)
  end
  def add_transform_for_stream(this : IMFSourceReaderEx*, dwstreamindex : UInt32, ptransformoractivate : IUnknown) : HRESULT
    @lpVtbl.value.add_transform_for_stream.call(this, dwstreamindex, ptransformoractivate)
  end
  def remove_all_transforms_for_stream(this : IMFSourceReaderEx*, dwstreamindex : UInt32) : HRESULT
    @lpVtbl.value.remove_all_transforms_for_stream.call(this, dwstreamindex)
  end
  def get_transform_for_stream(this : IMFSourceReaderEx*, dwstreamindex : UInt32, dwtransformindex : UInt32, pguidcategory : Guid*, pptransform : IMFTransform*) : HRESULT
    @lpVtbl.value.get_transform_for_stream.call(this, dwstreamindex, dwtransformindex, pguidcategory, pptransform)
  end
end
struct LibWin32::IMFSourceReaderCallback
  def query_interface(this : IMFSourceReaderCallback*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSourceReaderCallback*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSourceReaderCallback*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_read_sample(this : IMFSourceReaderCallback*, hrstatus : HRESULT, dwstreamindex : UInt32, dwstreamflags : UInt32, lltimestamp : Int64, psample : IMFSample) : HRESULT
    @lpVtbl.value.on_read_sample.call(this, hrstatus, dwstreamindex, dwstreamflags, lltimestamp, psample)
  end
  def on_flush(this : IMFSourceReaderCallback*, dwstreamindex : UInt32) : HRESULT
    @lpVtbl.value.on_flush.call(this, dwstreamindex)
  end
  def on_event(this : IMFSourceReaderCallback*, dwstreamindex : UInt32, pevent : IMFMediaEvent) : HRESULT
    @lpVtbl.value.on_event.call(this, dwstreamindex, pevent)
  end
end
struct LibWin32::IMFSourceReaderCallback2
  def query_interface(this : IMFSourceReaderCallback2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSourceReaderCallback2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSourceReaderCallback2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_read_sample(this : IMFSourceReaderCallback2*, hrstatus : HRESULT, dwstreamindex : UInt32, dwstreamflags : UInt32, lltimestamp : Int64, psample : IMFSample) : HRESULT
    @lpVtbl.value.on_read_sample.call(this, hrstatus, dwstreamindex, dwstreamflags, lltimestamp, psample)
  end
  def on_flush(this : IMFSourceReaderCallback2*, dwstreamindex : UInt32) : HRESULT
    @lpVtbl.value.on_flush.call(this, dwstreamindex)
  end
  def on_event(this : IMFSourceReaderCallback2*, dwstreamindex : UInt32, pevent : IMFMediaEvent) : HRESULT
    @lpVtbl.value.on_event.call(this, dwstreamindex, pevent)
  end
  def on_transform_change(this : IMFSourceReaderCallback2*) : HRESULT
    @lpVtbl.value.on_transform_change.call(this)
  end
  def on_stream_error(this : IMFSourceReaderCallback2*, dwstreamindex : UInt32, hrstatus : HRESULT) : HRESULT
    @lpVtbl.value.on_stream_error.call(this, dwstreamindex, hrstatus)
  end
end
struct LibWin32::IMFSinkWriter
  def query_interface(this : IMFSinkWriter*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSinkWriter*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSinkWriter*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def add_stream(this : IMFSinkWriter*, ptargetmediatype : IMFMediaType, pdwstreamindex : UInt32*) : HRESULT
    @lpVtbl.value.add_stream.call(this, ptargetmediatype, pdwstreamindex)
  end
  def set_input_media_type(this : IMFSinkWriter*, dwstreamindex : UInt32, pinputmediatype : IMFMediaType, pencodingparameters : IMFAttributes) : HRESULT
    @lpVtbl.value.set_input_media_type.call(this, dwstreamindex, pinputmediatype, pencodingparameters)
  end
  def begin_writing(this : IMFSinkWriter*) : HRESULT
    @lpVtbl.value.begin_writing.call(this)
  end
  def write_sample(this : IMFSinkWriter*, dwstreamindex : UInt32, psample : IMFSample) : HRESULT
    @lpVtbl.value.write_sample.call(this, dwstreamindex, psample)
  end
  def send_stream_tick(this : IMFSinkWriter*, dwstreamindex : UInt32, lltimestamp : Int64) : HRESULT
    @lpVtbl.value.send_stream_tick.call(this, dwstreamindex, lltimestamp)
  end
  def place_marker(this : IMFSinkWriter*, dwstreamindex : UInt32, pvcontext : Void*) : HRESULT
    @lpVtbl.value.place_marker.call(this, dwstreamindex, pvcontext)
  end
  def notify_end_of_segment(this : IMFSinkWriter*, dwstreamindex : UInt32) : HRESULT
    @lpVtbl.value.notify_end_of_segment.call(this, dwstreamindex)
  end
  def flush(this : IMFSinkWriter*, dwstreamindex : UInt32) : HRESULT
    @lpVtbl.value.flush.call(this, dwstreamindex)
  end
  def finalize_(this : IMFSinkWriter*) : HRESULT
    @lpVtbl.value.finalize_.call(this)
  end
  def get_service_for_stream(this : IMFSinkWriter*, dwstreamindex : UInt32, guidservice : Guid*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.get_service_for_stream.call(this, dwstreamindex, guidservice, riid, ppvobject)
  end
  def get_statistics(this : IMFSinkWriter*, dwstreamindex : UInt32, pstats : MF_SINK_WRITER_STATISTICS*) : HRESULT
    @lpVtbl.value.get_statistics.call(this, dwstreamindex, pstats)
  end
end
struct LibWin32::IMFSinkWriterEx
  def query_interface(this : IMFSinkWriterEx*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSinkWriterEx*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSinkWriterEx*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def add_stream(this : IMFSinkWriterEx*, ptargetmediatype : IMFMediaType, pdwstreamindex : UInt32*) : HRESULT
    @lpVtbl.value.add_stream.call(this, ptargetmediatype, pdwstreamindex)
  end
  def set_input_media_type(this : IMFSinkWriterEx*, dwstreamindex : UInt32, pinputmediatype : IMFMediaType, pencodingparameters : IMFAttributes) : HRESULT
    @lpVtbl.value.set_input_media_type.call(this, dwstreamindex, pinputmediatype, pencodingparameters)
  end
  def begin_writing(this : IMFSinkWriterEx*) : HRESULT
    @lpVtbl.value.begin_writing.call(this)
  end
  def write_sample(this : IMFSinkWriterEx*, dwstreamindex : UInt32, psample : IMFSample) : HRESULT
    @lpVtbl.value.write_sample.call(this, dwstreamindex, psample)
  end
  def send_stream_tick(this : IMFSinkWriterEx*, dwstreamindex : UInt32, lltimestamp : Int64) : HRESULT
    @lpVtbl.value.send_stream_tick.call(this, dwstreamindex, lltimestamp)
  end
  def place_marker(this : IMFSinkWriterEx*, dwstreamindex : UInt32, pvcontext : Void*) : HRESULT
    @lpVtbl.value.place_marker.call(this, dwstreamindex, pvcontext)
  end
  def notify_end_of_segment(this : IMFSinkWriterEx*, dwstreamindex : UInt32) : HRESULT
    @lpVtbl.value.notify_end_of_segment.call(this, dwstreamindex)
  end
  def flush(this : IMFSinkWriterEx*, dwstreamindex : UInt32) : HRESULT
    @lpVtbl.value.flush.call(this, dwstreamindex)
  end
  def finalize_(this : IMFSinkWriterEx*) : HRESULT
    @lpVtbl.value.finalize_.call(this)
  end
  def get_service_for_stream(this : IMFSinkWriterEx*, dwstreamindex : UInt32, guidservice : Guid*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.get_service_for_stream.call(this, dwstreamindex, guidservice, riid, ppvobject)
  end
  def get_statistics(this : IMFSinkWriterEx*, dwstreamindex : UInt32, pstats : MF_SINK_WRITER_STATISTICS*) : HRESULT
    @lpVtbl.value.get_statistics.call(this, dwstreamindex, pstats)
  end
  def get_transform_for_stream(this : IMFSinkWriterEx*, dwstreamindex : UInt32, dwtransformindex : UInt32, pguidcategory : Guid*, pptransform : IMFTransform*) : HRESULT
    @lpVtbl.value.get_transform_for_stream.call(this, dwstreamindex, dwtransformindex, pguidcategory, pptransform)
  end
end
struct LibWin32::IMFSinkWriterEncoderConfig
  def query_interface(this : IMFSinkWriterEncoderConfig*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSinkWriterEncoderConfig*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSinkWriterEncoderConfig*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_target_media_type(this : IMFSinkWriterEncoderConfig*, dwstreamindex : UInt32, ptargetmediatype : IMFMediaType, pencodingparameters : IMFAttributes) : HRESULT
    @lpVtbl.value.set_target_media_type.call(this, dwstreamindex, ptargetmediatype, pencodingparameters)
  end
  def place_encoding_parameters(this : IMFSinkWriterEncoderConfig*, dwstreamindex : UInt32, pencodingparameters : IMFAttributes) : HRESULT
    @lpVtbl.value.place_encoding_parameters.call(this, dwstreamindex, pencodingparameters)
  end
end
struct LibWin32::IMFSinkWriterCallback
  def query_interface(this : IMFSinkWriterCallback*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSinkWriterCallback*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSinkWriterCallback*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_finalize(this : IMFSinkWriterCallback*, hrstatus : HRESULT) : HRESULT
    @lpVtbl.value.on_finalize.call(this, hrstatus)
  end
  def on_marker(this : IMFSinkWriterCallback*, dwstreamindex : UInt32, pvcontext : Void*) : HRESULT
    @lpVtbl.value.on_marker.call(this, dwstreamindex, pvcontext)
  end
end
struct LibWin32::IMFSinkWriterCallback2
  def query_interface(this : IMFSinkWriterCallback2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSinkWriterCallback2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSinkWriterCallback2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_finalize(this : IMFSinkWriterCallback2*, hrstatus : HRESULT) : HRESULT
    @lpVtbl.value.on_finalize.call(this, hrstatus)
  end
  def on_marker(this : IMFSinkWriterCallback2*, dwstreamindex : UInt32, pvcontext : Void*) : HRESULT
    @lpVtbl.value.on_marker.call(this, dwstreamindex, pvcontext)
  end
  def on_transform_change(this : IMFSinkWriterCallback2*) : HRESULT
    @lpVtbl.value.on_transform_change.call(this)
  end
  def on_stream_error(this : IMFSinkWriterCallback2*, dwstreamindex : UInt32, hrstatus : HRESULT) : HRESULT
    @lpVtbl.value.on_stream_error.call(this, dwstreamindex, hrstatus)
  end
end
struct LibWin32::IMFVideoPositionMapper
  def query_interface(this : IMFVideoPositionMapper*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFVideoPositionMapper*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFVideoPositionMapper*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def map_output_coordinate_to_input_stream(this : IMFVideoPositionMapper*, xout : Float32, yout : Float32, dwoutputstreamindex : UInt32, dwinputstreamindex : UInt32, pxin : Float32*, pyin : Float32*) : HRESULT
    @lpVtbl.value.map_output_coordinate_to_input_stream.call(this, xout, yout, dwoutputstreamindex, dwinputstreamindex, pxin, pyin)
  end
end
struct LibWin32::IMFVideoDeviceID
  def query_interface(this : IMFVideoDeviceID*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFVideoDeviceID*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFVideoDeviceID*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device_id(this : IMFVideoDeviceID*, pdeviceid : Guid*) : HRESULT
    @lpVtbl.value.get_device_id.call(this, pdeviceid)
  end
end
struct LibWin32::IMFVideoDisplayControl
  def query_interface(this : IMFVideoDisplayControl*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFVideoDisplayControl*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFVideoDisplayControl*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_native_video_size(this : IMFVideoDisplayControl*, pszvideo : SIZE*, pszarvideo : SIZE*) : HRESULT
    @lpVtbl.value.get_native_video_size.call(this, pszvideo, pszarvideo)
  end
  def get_ideal_video_size(this : IMFVideoDisplayControl*, pszmin : SIZE*, pszmax : SIZE*) : HRESULT
    @lpVtbl.value.get_ideal_video_size.call(this, pszmin, pszmax)
  end
  def set_video_position(this : IMFVideoDisplayControl*, pnrcsource : MFVideoNormalizedRect*, prcdest : RECT*) : HRESULT
    @lpVtbl.value.set_video_position.call(this, pnrcsource, prcdest)
  end
  def get_video_position(this : IMFVideoDisplayControl*, pnrcsource : MFVideoNormalizedRect*, prcdest : RECT*) : HRESULT
    @lpVtbl.value.get_video_position.call(this, pnrcsource, prcdest)
  end
  def set_aspect_ratio_mode(this : IMFVideoDisplayControl*, dwaspectratiomode : UInt32) : HRESULT
    @lpVtbl.value.set_aspect_ratio_mode.call(this, dwaspectratiomode)
  end
  def get_aspect_ratio_mode(this : IMFVideoDisplayControl*, pdwaspectratiomode : UInt32*) : HRESULT
    @lpVtbl.value.get_aspect_ratio_mode.call(this, pdwaspectratiomode)
  end
  def set_video_window(this : IMFVideoDisplayControl*, hwndvideo : LibC::HANDLE) : HRESULT
    @lpVtbl.value.set_video_window.call(this, hwndvideo)
  end
  def get_video_window(this : IMFVideoDisplayControl*, phwndvideo : HANDLE*) : HRESULT
    @lpVtbl.value.get_video_window.call(this, phwndvideo)
  end
  def repaint_video(this : IMFVideoDisplayControl*) : HRESULT
    @lpVtbl.value.repaint_video.call(this)
  end
  def get_current_image(this : IMFVideoDisplayControl*, pbih : BITMAPINFOHEADER*, pdib : UInt8**, pcbdib : UInt32*, ptimestamp : Int64*) : HRESULT
    @lpVtbl.value.get_current_image.call(this, pbih, pdib, pcbdib, ptimestamp)
  end
  def set_border_color(this : IMFVideoDisplayControl*, clr : UInt32) : HRESULT
    @lpVtbl.value.set_border_color.call(this, clr)
  end
  def get_border_color(this : IMFVideoDisplayControl*, pclr : UInt32*) : HRESULT
    @lpVtbl.value.get_border_color.call(this, pclr)
  end
  def set_rendering_prefs(this : IMFVideoDisplayControl*, dwrenderflags : UInt32) : HRESULT
    @lpVtbl.value.set_rendering_prefs.call(this, dwrenderflags)
  end
  def get_rendering_prefs(this : IMFVideoDisplayControl*, pdwrenderflags : UInt32*) : HRESULT
    @lpVtbl.value.get_rendering_prefs.call(this, pdwrenderflags)
  end
  def set_fullscreen(this : IMFVideoDisplayControl*, ffullscreen : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_fullscreen.call(this, ffullscreen)
  end
  def get_fullscreen(this : IMFVideoDisplayControl*, pffullscreen : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_fullscreen.call(this, pffullscreen)
  end
end
struct LibWin32::IMFVideoPresenter
  def query_interface(this : IMFVideoPresenter*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFVideoPresenter*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFVideoPresenter*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_clock_start(this : IMFVideoPresenter*, hnssystemtime : Int64, llclockstartoffset : Int64) : HRESULT
    @lpVtbl.value.on_clock_start.call(this, hnssystemtime, llclockstartoffset)
  end
  def on_clock_stop(this : IMFVideoPresenter*, hnssystemtime : Int64) : HRESULT
    @lpVtbl.value.on_clock_stop.call(this, hnssystemtime)
  end
  def on_clock_pause(this : IMFVideoPresenter*, hnssystemtime : Int64) : HRESULT
    @lpVtbl.value.on_clock_pause.call(this, hnssystemtime)
  end
  def on_clock_restart(this : IMFVideoPresenter*, hnssystemtime : Int64) : HRESULT
    @lpVtbl.value.on_clock_restart.call(this, hnssystemtime)
  end
  def on_clock_set_rate(this : IMFVideoPresenter*, hnssystemtime : Int64, flrate : Float32) : HRESULT
    @lpVtbl.value.on_clock_set_rate.call(this, hnssystemtime, flrate)
  end
  def process_message(this : IMFVideoPresenter*, emessage : MFVP_MESSAGE_TYPE, ulparam : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.process_message.call(this, emessage, ulparam)
  end
  def get_current_media_type(this : IMFVideoPresenter*, ppmediatype : IMFVideoMediaType*) : HRESULT
    @lpVtbl.value.get_current_media_type.call(this, ppmediatype)
  end
end
struct LibWin32::IMFDesiredSample
  def query_interface(this : IMFDesiredSample*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFDesiredSample*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFDesiredSample*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_desired_sample_time_and_duration(this : IMFDesiredSample*, phnssampletime : Int64*, phnssampleduration : Int64*) : HRESULT
    @lpVtbl.value.get_desired_sample_time_and_duration.call(this, phnssampletime, phnssampleduration)
  end
  def set_desired_sample_time_and_duration(this : IMFDesiredSample*, hnssampletime : Int64, hnssampleduration : Int64) : Void
    @lpVtbl.value.set_desired_sample_time_and_duration.call(this, hnssampletime, hnssampleduration)
  end
  def clear(this : IMFDesiredSample*) : Void
    @lpVtbl.value.clear.call(this)
  end
end
struct LibWin32::IMFVideoMixerControl
  def query_interface(this : IMFVideoMixerControl*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFVideoMixerControl*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFVideoMixerControl*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_stream_z_order(this : IMFVideoMixerControl*, dwstreamid : UInt32, dwz : UInt32) : HRESULT
    @lpVtbl.value.set_stream_z_order.call(this, dwstreamid, dwz)
  end
  def get_stream_z_order(this : IMFVideoMixerControl*, dwstreamid : UInt32, pdwz : UInt32*) : HRESULT
    @lpVtbl.value.get_stream_z_order.call(this, dwstreamid, pdwz)
  end
  def set_stream_output_rect(this : IMFVideoMixerControl*, dwstreamid : UInt32, pnrcoutput : MFVideoNormalizedRect*) : HRESULT
    @lpVtbl.value.set_stream_output_rect.call(this, dwstreamid, pnrcoutput)
  end
  def get_stream_output_rect(this : IMFVideoMixerControl*, dwstreamid : UInt32, pnrcoutput : MFVideoNormalizedRect*) : HRESULT
    @lpVtbl.value.get_stream_output_rect.call(this, dwstreamid, pnrcoutput)
  end
end
struct LibWin32::IMFVideoMixerControl2
  def query_interface(this : IMFVideoMixerControl2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFVideoMixerControl2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFVideoMixerControl2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_stream_z_order(this : IMFVideoMixerControl2*, dwstreamid : UInt32, dwz : UInt32) : HRESULT
    @lpVtbl.value.set_stream_z_order.call(this, dwstreamid, dwz)
  end
  def get_stream_z_order(this : IMFVideoMixerControl2*, dwstreamid : UInt32, pdwz : UInt32*) : HRESULT
    @lpVtbl.value.get_stream_z_order.call(this, dwstreamid, pdwz)
  end
  def set_stream_output_rect(this : IMFVideoMixerControl2*, dwstreamid : UInt32, pnrcoutput : MFVideoNormalizedRect*) : HRESULT
    @lpVtbl.value.set_stream_output_rect.call(this, dwstreamid, pnrcoutput)
  end
  def get_stream_output_rect(this : IMFVideoMixerControl2*, dwstreamid : UInt32, pnrcoutput : MFVideoNormalizedRect*) : HRESULT
    @lpVtbl.value.get_stream_output_rect.call(this, dwstreamid, pnrcoutput)
  end
  def set_mixing_prefs(this : IMFVideoMixerControl2*, dwmixflags : UInt32) : HRESULT
    @lpVtbl.value.set_mixing_prefs.call(this, dwmixflags)
  end
  def get_mixing_prefs(this : IMFVideoMixerControl2*, pdwmixflags : UInt32*) : HRESULT
    @lpVtbl.value.get_mixing_prefs.call(this, pdwmixflags)
  end
end
struct LibWin32::IMFVideoRenderer
  def query_interface(this : IMFVideoRenderer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFVideoRenderer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFVideoRenderer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def initialize_renderer(this : IMFVideoRenderer*, pvideomixer : IMFTransform, pvideopresenter : IMFVideoPresenter) : HRESULT
    @lpVtbl.value.initialize_renderer.call(this, pvideomixer, pvideopresenter)
  end
end
struct LibWin32::IEVRFilterConfig
  def query_interface(this : IEVRFilterConfig*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IEVRFilterConfig*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IEVRFilterConfig*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_number_of_streams(this : IEVRFilterConfig*, dwmaxstreams : UInt32) : HRESULT
    @lpVtbl.value.set_number_of_streams.call(this, dwmaxstreams)
  end
  def get_number_of_streams(this : IEVRFilterConfig*, pdwmaxstreams : UInt32*) : HRESULT
    @lpVtbl.value.get_number_of_streams.call(this, pdwmaxstreams)
  end
end
struct LibWin32::IEVRFilterConfigEx
  def query_interface(this : IEVRFilterConfigEx*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IEVRFilterConfigEx*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IEVRFilterConfigEx*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_number_of_streams(this : IEVRFilterConfigEx*, dwmaxstreams : UInt32) : HRESULT
    @lpVtbl.value.set_number_of_streams.call(this, dwmaxstreams)
  end
  def get_number_of_streams(this : IEVRFilterConfigEx*, pdwmaxstreams : UInt32*) : HRESULT
    @lpVtbl.value.get_number_of_streams.call(this, pdwmaxstreams)
  end
  def set_config_prefs(this : IEVRFilterConfigEx*, dwconfigflags : UInt32) : HRESULT
    @lpVtbl.value.set_config_prefs.call(this, dwconfigflags)
  end
  def get_config_prefs(this : IEVRFilterConfigEx*, pdwconfigflags : UInt32*) : HRESULT
    @lpVtbl.value.get_config_prefs.call(this, pdwconfigflags)
  end
end
struct LibWin32::IMFTopologyServiceLookup
  def query_interface(this : IMFTopologyServiceLookup*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFTopologyServiceLookup*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFTopologyServiceLookup*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def lookup_service(this : IMFTopologyServiceLookup*, type : MF_SERVICE_LOOKUP_TYPE, dwindex : UInt32, guidservice : Guid*, riid : Guid*, ppvobjects : Void**, pnobjects : UInt32*) : HRESULT
    @lpVtbl.value.lookup_service.call(this, type, dwindex, guidservice, riid, ppvobjects, pnobjects)
  end
end
struct LibWin32::IMFTopologyServiceLookupClient
  def query_interface(this : IMFTopologyServiceLookupClient*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFTopologyServiceLookupClient*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFTopologyServiceLookupClient*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def init_service_pointers(this : IMFTopologyServiceLookupClient*, plookup : IMFTopologyServiceLookup) : HRESULT
    @lpVtbl.value.init_service_pointers.call(this, plookup)
  end
  def release_service_pointers(this : IMFTopologyServiceLookupClient*) : HRESULT
    @lpVtbl.value.release_service_pointers.call(this)
  end
end
struct LibWin32::IEVRTrustedVideoPlugin
  def query_interface(this : IEVRTrustedVideoPlugin*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IEVRTrustedVideoPlugin*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IEVRTrustedVideoPlugin*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def is_in_trusted_video_mode(this : IEVRTrustedVideoPlugin*, pyes : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_in_trusted_video_mode.call(this, pyes)
  end
  def can_constrict(this : IEVRTrustedVideoPlugin*, pyes : LibC::BOOL*) : HRESULT
    @lpVtbl.value.can_constrict.call(this, pyes)
  end
  def set_constriction(this : IEVRTrustedVideoPlugin*, dwkpix : UInt32) : HRESULT
    @lpVtbl.value.set_constriction.call(this, dwkpix)
  end
  def disable_image_export(this : IEVRTrustedVideoPlugin*, bdisable : LibC::BOOL) : HRESULT
    @lpVtbl.value.disable_image_export.call(this, bdisable)
  end
end
struct LibWin32::IMFPMediaPlayer
  def query_interface(this : IMFPMediaPlayer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFPMediaPlayer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFPMediaPlayer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def play(this : IMFPMediaPlayer*) : HRESULT
    @lpVtbl.value.play.call(this)
  end
  def pause(this : IMFPMediaPlayer*) : HRESULT
    @lpVtbl.value.pause.call(this)
  end
  def stop(this : IMFPMediaPlayer*) : HRESULT
    @lpVtbl.value.stop.call(this)
  end
  def frame_step(this : IMFPMediaPlayer*) : HRESULT
    @lpVtbl.value.frame_step.call(this)
  end
  def set_position(this : IMFPMediaPlayer*, guidpositiontype : Guid*, pvpositionvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.set_position.call(this, guidpositiontype, pvpositionvalue)
  end
  def get_position(this : IMFPMediaPlayer*, guidpositiontype : Guid*, pvpositionvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_position.call(this, guidpositiontype, pvpositionvalue)
  end
  def get_duration(this : IMFPMediaPlayer*, guidpositiontype : Guid*, pvdurationvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_duration.call(this, guidpositiontype, pvdurationvalue)
  end
  def set_rate(this : IMFPMediaPlayer*, flrate : Float32) : HRESULT
    @lpVtbl.value.set_rate.call(this, flrate)
  end
  def get_rate(this : IMFPMediaPlayer*, pflrate : Float32*) : HRESULT
    @lpVtbl.value.get_rate.call(this, pflrate)
  end
  def get_supported_rates(this : IMFPMediaPlayer*, fforwarddirection : LibC::BOOL, pflslowestrate : Float32*, pflfastestrate : Float32*) : HRESULT
    @lpVtbl.value.get_supported_rates.call(this, fforwarddirection, pflslowestrate, pflfastestrate)
  end
  def get_state(this : IMFPMediaPlayer*, pestate : MFP_MEDIAPLAYER_STATE*) : HRESULT
    @lpVtbl.value.get_state.call(this, pestate)
  end
  def create_media_item_from_url(this : IMFPMediaPlayer*, pwszurl : LibC::LPWSTR, fsync : LibC::BOOL, dwuserdata : LibC::UINT_PTR, ppmediaitem : IMFPMediaItem*) : HRESULT
    @lpVtbl.value.create_media_item_from_url.call(this, pwszurl, fsync, dwuserdata, ppmediaitem)
  end
  def create_media_item_from_object(this : IMFPMediaPlayer*, piunknownobj : IUnknown, fsync : LibC::BOOL, dwuserdata : LibC::UINT_PTR, ppmediaitem : IMFPMediaItem*) : HRESULT
    @lpVtbl.value.create_media_item_from_object.call(this, piunknownobj, fsync, dwuserdata, ppmediaitem)
  end
  def set_media_item(this : IMFPMediaPlayer*, pimfpmediaitem : IMFPMediaItem) : HRESULT
    @lpVtbl.value.set_media_item.call(this, pimfpmediaitem)
  end
  def clear_media_item(this : IMFPMediaPlayer*) : HRESULT
    @lpVtbl.value.clear_media_item.call(this)
  end
  def get_media_item(this : IMFPMediaPlayer*, ppimfpmediaitem : IMFPMediaItem*) : HRESULT
    @lpVtbl.value.get_media_item.call(this, ppimfpmediaitem)
  end
  def get_volume(this : IMFPMediaPlayer*, pflvolume : Float32*) : HRESULT
    @lpVtbl.value.get_volume.call(this, pflvolume)
  end
  def set_volume(this : IMFPMediaPlayer*, flvolume : Float32) : HRESULT
    @lpVtbl.value.set_volume.call(this, flvolume)
  end
  def get_balance(this : IMFPMediaPlayer*, pflbalance : Float32*) : HRESULT
    @lpVtbl.value.get_balance.call(this, pflbalance)
  end
  def set_balance(this : IMFPMediaPlayer*, flbalance : Float32) : HRESULT
    @lpVtbl.value.set_balance.call(this, flbalance)
  end
  def get_mute(this : IMFPMediaPlayer*, pfmute : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_mute.call(this, pfmute)
  end
  def set_mute(this : IMFPMediaPlayer*, fmute : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_mute.call(this, fmute)
  end
  def get_native_video_size(this : IMFPMediaPlayer*, pszvideo : SIZE*, pszarvideo : SIZE*) : HRESULT
    @lpVtbl.value.get_native_video_size.call(this, pszvideo, pszarvideo)
  end
  def get_ideal_video_size(this : IMFPMediaPlayer*, pszmin : SIZE*, pszmax : SIZE*) : HRESULT
    @lpVtbl.value.get_ideal_video_size.call(this, pszmin, pszmax)
  end
  def set_video_source_rect(this : IMFPMediaPlayer*, pnrcsource : MFVideoNormalizedRect*) : HRESULT
    @lpVtbl.value.set_video_source_rect.call(this, pnrcsource)
  end
  def get_video_source_rect(this : IMFPMediaPlayer*, pnrcsource : MFVideoNormalizedRect*) : HRESULT
    @lpVtbl.value.get_video_source_rect.call(this, pnrcsource)
  end
  def set_aspect_ratio_mode(this : IMFPMediaPlayer*, dwaspectratiomode : UInt32) : HRESULT
    @lpVtbl.value.set_aspect_ratio_mode.call(this, dwaspectratiomode)
  end
  def get_aspect_ratio_mode(this : IMFPMediaPlayer*, pdwaspectratiomode : UInt32*) : HRESULT
    @lpVtbl.value.get_aspect_ratio_mode.call(this, pdwaspectratiomode)
  end
  def get_video_window(this : IMFPMediaPlayer*, phwndvideo : HANDLE*) : HRESULT
    @lpVtbl.value.get_video_window.call(this, phwndvideo)
  end
  def update_video(this : IMFPMediaPlayer*) : HRESULT
    @lpVtbl.value.update_video.call(this)
  end
  def set_border_color(this : IMFPMediaPlayer*, clr : UInt32) : HRESULT
    @lpVtbl.value.set_border_color.call(this, clr)
  end
  def get_border_color(this : IMFPMediaPlayer*, pclr : UInt32*) : HRESULT
    @lpVtbl.value.get_border_color.call(this, pclr)
  end
  def insert_effect(this : IMFPMediaPlayer*, peffect : IUnknown, foptional : LibC::BOOL) : HRESULT
    @lpVtbl.value.insert_effect.call(this, peffect, foptional)
  end
  def remove_effect(this : IMFPMediaPlayer*, peffect : IUnknown) : HRESULT
    @lpVtbl.value.remove_effect.call(this, peffect)
  end
  def remove_all_effects(this : IMFPMediaPlayer*) : HRESULT
    @lpVtbl.value.remove_all_effects.call(this)
  end
  def shutdown(this : IMFPMediaPlayer*) : HRESULT
    @lpVtbl.value.shutdown.call(this)
  end
end
struct LibWin32::IMFPMediaItem
  def query_interface(this : IMFPMediaItem*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFPMediaItem*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFPMediaItem*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_media_player(this : IMFPMediaItem*, ppmediaplayer : IMFPMediaPlayer*) : HRESULT
    @lpVtbl.value.get_media_player.call(this, ppmediaplayer)
  end
  def get_url(this : IMFPMediaItem*, ppwszurl : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_url.call(this, ppwszurl)
  end
  def get_object(this : IMFPMediaItem*, ppiunknown : IUnknown*) : HRESULT
    @lpVtbl.value.get_object.call(this, ppiunknown)
  end
  def get_user_data(this : IMFPMediaItem*, pdwuserdata : LibC::UINT_PTR*) : HRESULT
    @lpVtbl.value.get_user_data.call(this, pdwuserdata)
  end
  def set_user_data(this : IMFPMediaItem*, dwuserdata : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.set_user_data.call(this, dwuserdata)
  end
  def get_start_stop_position(this : IMFPMediaItem*, pguidstartpositiontype : Guid*, pvstartvalue : PROPVARIANT*, pguidstoppositiontype : Guid*, pvstopvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_start_stop_position.call(this, pguidstartpositiontype, pvstartvalue, pguidstoppositiontype, pvstopvalue)
  end
  def set_start_stop_position(this : IMFPMediaItem*, pguidstartpositiontype : Guid*, pvstartvalue : PROPVARIANT*, pguidstoppositiontype : Guid*, pvstopvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.set_start_stop_position.call(this, pguidstartpositiontype, pvstartvalue, pguidstoppositiontype, pvstopvalue)
  end
  def has_video(this : IMFPMediaItem*, pfhasvideo : LibC::BOOL*, pfselected : LibC::BOOL*) : HRESULT
    @lpVtbl.value.has_video.call(this, pfhasvideo, pfselected)
  end
  def has_audio(this : IMFPMediaItem*, pfhasaudio : LibC::BOOL*, pfselected : LibC::BOOL*) : HRESULT
    @lpVtbl.value.has_audio.call(this, pfhasaudio, pfselected)
  end
  def is_protected(this : IMFPMediaItem*, pfprotected : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_protected.call(this, pfprotected)
  end
  def get_duration(this : IMFPMediaItem*, guidpositiontype : Guid*, pvdurationvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_duration.call(this, guidpositiontype, pvdurationvalue)
  end
  def get_number_of_streams(this : IMFPMediaItem*, pdwstreamcount : UInt32*) : HRESULT
    @lpVtbl.value.get_number_of_streams.call(this, pdwstreamcount)
  end
  def get_stream_selection(this : IMFPMediaItem*, dwstreamindex : UInt32, pfenabled : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_stream_selection.call(this, dwstreamindex, pfenabled)
  end
  def set_stream_selection(this : IMFPMediaItem*, dwstreamindex : UInt32, fenabled : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_stream_selection.call(this, dwstreamindex, fenabled)
  end
  def get_stream_attribute(this : IMFPMediaItem*, dwstreamindex : UInt32, guidmfattribute : Guid*, pvvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_stream_attribute.call(this, dwstreamindex, guidmfattribute, pvvalue)
  end
  def get_presentation_attribute(this : IMFPMediaItem*, guidmfattribute : Guid*, pvvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_presentation_attribute.call(this, guidmfattribute, pvvalue)
  end
  def get_characteristics(this : IMFPMediaItem*, pcharacteristics : UInt32*) : HRESULT
    @lpVtbl.value.get_characteristics.call(this, pcharacteristics)
  end
  def set_stream_sink(this : IMFPMediaItem*, dwstreamindex : UInt32, pmediasink : IUnknown) : HRESULT
    @lpVtbl.value.set_stream_sink.call(this, dwstreamindex, pmediasink)
  end
  def get_metadata(this : IMFPMediaItem*, ppmetadatastore : IPropertyStore*) : HRESULT
    @lpVtbl.value.get_metadata.call(this, ppmetadatastore)
  end
end
struct LibWin32::IMFPMediaPlayerCallback
  def query_interface(this : IMFPMediaPlayerCallback*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFPMediaPlayerCallback*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFPMediaPlayerCallback*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_media_player_event(this : IMFPMediaPlayerCallback*, peventheader : MFP_EVENT_HEADER*) : Void
    @lpVtbl.value.on_media_player_event.call(this, peventheader)
  end
end
struct LibWin32::IMFSharingEngineClassFactory
  def query_interface(this : IMFSharingEngineClassFactory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSharingEngineClassFactory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSharingEngineClassFactory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_instance(this : IMFSharingEngineClassFactory*, dwflags : UInt32, pattr : IMFAttributes, ppengine : IUnknown*) : HRESULT
    @lpVtbl.value.create_instance.call(this, dwflags, pattr, ppengine)
  end
end
struct LibWin32::IMFMediaSharingEngine
  def query_interface(this : IMFMediaSharingEngine*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaSharingEngine*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaSharingEngine*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_error(this : IMFMediaSharingEngine*, pperror : IMFMediaError*) : HRESULT
    @lpVtbl.value.get_error.call(this, pperror)
  end
  def set_error_code(this : IMFMediaSharingEngine*, error : MF_MEDIA_ENGINE_ERR) : HRESULT
    @lpVtbl.value.set_error_code.call(this, error)
  end
  def set_source_elements(this : IMFMediaSharingEngine*, psrcelements : IMFMediaEngineSrcElements) : HRESULT
    @lpVtbl.value.set_source_elements.call(this, psrcelements)
  end
  def set_source(this : IMFMediaSharingEngine*, purl : UInt8*) : HRESULT
    @lpVtbl.value.set_source.call(this, purl)
  end
  def get_current_source(this : IMFMediaSharingEngine*, ppurl : UInt8**) : HRESULT
    @lpVtbl.value.get_current_source.call(this, ppurl)
  end
  def get_network_state(this : IMFMediaSharingEngine*) : UInt16
    @lpVtbl.value.get_network_state.call(this)
  end
  def get_preload(this : IMFMediaSharingEngine*) : MF_MEDIA_ENGINE_PRELOAD
    @lpVtbl.value.get_preload.call(this)
  end
  def set_preload(this : IMFMediaSharingEngine*, preload : MF_MEDIA_ENGINE_PRELOAD) : HRESULT
    @lpVtbl.value.set_preload.call(this, preload)
  end
  def get_buffered(this : IMFMediaSharingEngine*, ppbuffered : IMFMediaTimeRange*) : HRESULT
    @lpVtbl.value.get_buffered.call(this, ppbuffered)
  end
  def load(this : IMFMediaSharingEngine*) : HRESULT
    @lpVtbl.value.load.call(this)
  end
  def can_play_type(this : IMFMediaSharingEngine*, type : UInt8*, panswer : MF_MEDIA_ENGINE_CANPLAY*) : HRESULT
    @lpVtbl.value.can_play_type.call(this, type, panswer)
  end
  def get_ready_state(this : IMFMediaSharingEngine*) : UInt16
    @lpVtbl.value.get_ready_state.call(this)
  end
  def is_seeking(this : IMFMediaSharingEngine*) : LibC::BOOL
    @lpVtbl.value.is_seeking.call(this)
  end
  def get_current_time(this : IMFMediaSharingEngine*) : Float64
    @lpVtbl.value.get_current_time.call(this)
  end
  def set_current_time(this : IMFMediaSharingEngine*, seektime : Float64) : HRESULT
    @lpVtbl.value.set_current_time.call(this, seektime)
  end
  def get_start_time(this : IMFMediaSharingEngine*) : Float64
    @lpVtbl.value.get_start_time.call(this)
  end
  def get_duration(this : IMFMediaSharingEngine*) : Float64
    @lpVtbl.value.get_duration.call(this)
  end
  def is_paused(this : IMFMediaSharingEngine*) : LibC::BOOL
    @lpVtbl.value.is_paused.call(this)
  end
  def get_default_playback_rate(this : IMFMediaSharingEngine*) : Float64
    @lpVtbl.value.get_default_playback_rate.call(this)
  end
  def set_default_playback_rate(this : IMFMediaSharingEngine*, rate : Float64) : HRESULT
    @lpVtbl.value.set_default_playback_rate.call(this, rate)
  end
  def get_playback_rate(this : IMFMediaSharingEngine*) : Float64
    @lpVtbl.value.get_playback_rate.call(this)
  end
  def set_playback_rate(this : IMFMediaSharingEngine*, rate : Float64) : HRESULT
    @lpVtbl.value.set_playback_rate.call(this, rate)
  end
  def get_played(this : IMFMediaSharingEngine*, ppplayed : IMFMediaTimeRange*) : HRESULT
    @lpVtbl.value.get_played.call(this, ppplayed)
  end
  def get_seekable(this : IMFMediaSharingEngine*, ppseekable : IMFMediaTimeRange*) : HRESULT
    @lpVtbl.value.get_seekable.call(this, ppseekable)
  end
  def is_ended(this : IMFMediaSharingEngine*) : LibC::BOOL
    @lpVtbl.value.is_ended.call(this)
  end
  def get_auto_play(this : IMFMediaSharingEngine*) : LibC::BOOL
    @lpVtbl.value.get_auto_play.call(this)
  end
  def set_auto_play(this : IMFMediaSharingEngine*, autoplay : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_auto_play.call(this, autoplay)
  end
  def get_loop(this : IMFMediaSharingEngine*) : LibC::BOOL
    @lpVtbl.value.get_loop.call(this)
  end
  def set_loop(this : IMFMediaSharingEngine*, loop : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_loop.call(this, loop)
  end
  def play(this : IMFMediaSharingEngine*) : HRESULT
    @lpVtbl.value.play.call(this)
  end
  def pause(this : IMFMediaSharingEngine*) : HRESULT
    @lpVtbl.value.pause.call(this)
  end
  def get_muted(this : IMFMediaSharingEngine*) : LibC::BOOL
    @lpVtbl.value.get_muted.call(this)
  end
  def set_muted(this : IMFMediaSharingEngine*, muted : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_muted.call(this, muted)
  end
  def get_volume(this : IMFMediaSharingEngine*) : Float64
    @lpVtbl.value.get_volume.call(this)
  end
  def set_volume(this : IMFMediaSharingEngine*, volume : Float64) : HRESULT
    @lpVtbl.value.set_volume.call(this, volume)
  end
  def has_video(this : IMFMediaSharingEngine*) : LibC::BOOL
    @lpVtbl.value.has_video.call(this)
  end
  def has_audio(this : IMFMediaSharingEngine*) : LibC::BOOL
    @lpVtbl.value.has_audio.call(this)
  end
  def get_native_video_size(this : IMFMediaSharingEngine*, cx : UInt32*, cy : UInt32*) : HRESULT
    @lpVtbl.value.get_native_video_size.call(this, cx, cy)
  end
  def get_video_aspect_ratio(this : IMFMediaSharingEngine*, cx : UInt32*, cy : UInt32*) : HRESULT
    @lpVtbl.value.get_video_aspect_ratio.call(this, cx, cy)
  end
  def shutdown(this : IMFMediaSharingEngine*) : HRESULT
    @lpVtbl.value.shutdown.call(this)
  end
  def transfer_video_frame(this : IMFMediaSharingEngine*, pdstsurf : IUnknown, psrc : MFVideoNormalizedRect*, pdst : RECT*, pborderclr : MFARGB*) : HRESULT
    @lpVtbl.value.transfer_video_frame.call(this, pdstsurf, psrc, pdst, pborderclr)
  end
  def on_video_stream_tick(this : IMFMediaSharingEngine*, ppts : Int64*) : HRESULT
    @lpVtbl.value.on_video_stream_tick.call(this, ppts)
  end
  def get_device(this : IMFMediaSharingEngine*, pdevice : DEVICE_INFO*) : HRESULT
    @lpVtbl.value.get_device.call(this, pdevice)
  end
end
struct LibWin32::IMFMediaSharingEngineClassFactory
  def query_interface(this : IMFMediaSharingEngineClassFactory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFMediaSharingEngineClassFactory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFMediaSharingEngineClassFactory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_instance(this : IMFMediaSharingEngineClassFactory*, dwflags : UInt32, pattr : IMFAttributes, ppengine : IMFMediaSharingEngine*) : HRESULT
    @lpVtbl.value.create_instance.call(this, dwflags, pattr, ppengine)
  end
end
struct LibWin32::IMFImageSharingEngine
  def query_interface(this : IMFImageSharingEngine*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFImageSharingEngine*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFImageSharingEngine*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_source(this : IMFImageSharingEngine*, pstream : IUnknown) : HRESULT
    @lpVtbl.value.set_source.call(this, pstream)
  end
  def get_device(this : IMFImageSharingEngine*, pdevice : DEVICE_INFO*) : HRESULT
    @lpVtbl.value.get_device.call(this, pdevice)
  end
  def shutdown(this : IMFImageSharingEngine*) : HRESULT
    @lpVtbl.value.shutdown.call(this)
  end
end
struct LibWin32::IMFImageSharingEngineClassFactory
  def query_interface(this : IMFImageSharingEngineClassFactory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFImageSharingEngineClassFactory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFImageSharingEngineClassFactory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_instance_from_udn(this : IMFImageSharingEngineClassFactory*, puniquedevicename : UInt8*, ppengine : IMFImageSharingEngine*) : HRESULT
    @lpVtbl.value.create_instance_from_udn.call(this, puniquedevicename, ppengine)
  end
end
struct LibWin32::IPlayToControl
  def query_interface(this : IPlayToControl*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IPlayToControl*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IPlayToControl*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def connect(this : IPlayToControl*, pfactory : IMFSharingEngineClassFactory) : HRESULT
    @lpVtbl.value.connect.call(this, pfactory)
  end
  def disconnect(this : IPlayToControl*) : HRESULT
    @lpVtbl.value.disconnect.call(this)
  end
end
struct LibWin32::IPlayToControlWithCapabilities
  def query_interface(this : IPlayToControlWithCapabilities*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IPlayToControlWithCapabilities*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IPlayToControlWithCapabilities*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def connect(this : IPlayToControlWithCapabilities*, pfactory : IMFSharingEngineClassFactory) : HRESULT
    @lpVtbl.value.connect.call(this, pfactory)
  end
  def disconnect(this : IPlayToControlWithCapabilities*) : HRESULT
    @lpVtbl.value.disconnect.call(this)
  end
  def get_capabilities(this : IPlayToControlWithCapabilities*, pcapabilities : PLAYTO_SOURCE_CREATEFLAGS*) : HRESULT
    @lpVtbl.value.get_capabilities.call(this, pcapabilities)
  end
end
struct LibWin32::IPlayToSourceClassFactory
  def query_interface(this : IPlayToSourceClassFactory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IPlayToSourceClassFactory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IPlayToSourceClassFactory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_instance(this : IPlayToSourceClassFactory*, dwflags : UInt32, pcontrol : IPlayToControl, ppsource : IInspectable*) : HRESULT
    @lpVtbl.value.create_instance.call(this, dwflags, pcontrol, ppsource)
  end
end
struct LibWin32::IEVRVideoStreamControl
  def query_interface(this : IEVRVideoStreamControl*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IEVRVideoStreamControl*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IEVRVideoStreamControl*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_stream_active_state(this : IEVRVideoStreamControl*, factive : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_stream_active_state.call(this, factive)
  end
  def get_stream_active_state(this : IEVRVideoStreamControl*, lpfactive : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_stream_active_state.call(this, lpfactive)
  end
end
struct LibWin32::IMFVideoProcessor
  def query_interface(this : IMFVideoProcessor*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFVideoProcessor*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFVideoProcessor*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_available_video_processor_modes(this : IMFVideoProcessor*, lpdwnumprocessingmodes : UInt32*, ppvideoprocessingmodes : Guid**) : HRESULT
    @lpVtbl.value.get_available_video_processor_modes.call(this, lpdwnumprocessingmodes, ppvideoprocessingmodes)
  end
  def get_video_processor_caps(this : IMFVideoProcessor*, lpvideoprocessormode : Guid*, lpvideoprocessorcaps : DXVA2_VideoProcessorCaps*) : HRESULT
    @lpVtbl.value.get_video_processor_caps.call(this, lpvideoprocessormode, lpvideoprocessorcaps)
  end
  def get_video_processor_mode(this : IMFVideoProcessor*, lpmode : Guid*) : HRESULT
    @lpVtbl.value.get_video_processor_mode.call(this, lpmode)
  end
  def set_video_processor_mode(this : IMFVideoProcessor*, lpmode : Guid*) : HRESULT
    @lpVtbl.value.set_video_processor_mode.call(this, lpmode)
  end
  def get_proc_amp_range(this : IMFVideoProcessor*, dwproperty : UInt32, pproprange : DXVA2_ValueRange*) : HRESULT
    @lpVtbl.value.get_proc_amp_range.call(this, dwproperty, pproprange)
  end
  def get_proc_amp_values(this : IMFVideoProcessor*, dwflags : UInt32, values : DXVA2_ProcAmpValues*) : HRESULT
    @lpVtbl.value.get_proc_amp_values.call(this, dwflags, values)
  end
  def set_proc_amp_values(this : IMFVideoProcessor*, dwflags : UInt32, pvalues : DXVA2_ProcAmpValues*) : HRESULT
    @lpVtbl.value.set_proc_amp_values.call(this, dwflags, pvalues)
  end
  def get_filtering_range(this : IMFVideoProcessor*, dwproperty : UInt32, pproprange : DXVA2_ValueRange*) : HRESULT
    @lpVtbl.value.get_filtering_range.call(this, dwproperty, pproprange)
  end
  def get_filtering_value(this : IMFVideoProcessor*, dwproperty : UInt32, pvalue : DXVA2_Fixed32*) : HRESULT
    @lpVtbl.value.get_filtering_value.call(this, dwproperty, pvalue)
  end
  def set_filtering_value(this : IMFVideoProcessor*, dwproperty : UInt32, pvalue : DXVA2_Fixed32*) : HRESULT
    @lpVtbl.value.set_filtering_value.call(this, dwproperty, pvalue)
  end
  def get_background_color(this : IMFVideoProcessor*, lpclrbkg : UInt32*) : HRESULT
    @lpVtbl.value.get_background_color.call(this, lpclrbkg)
  end
  def set_background_color(this : IMFVideoProcessor*, clrbkg : UInt32) : HRESULT
    @lpVtbl.value.set_background_color.call(this, clrbkg)
  end
end
struct LibWin32::IMFVideoMixerBitmap
  def query_interface(this : IMFVideoMixerBitmap*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFVideoMixerBitmap*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFVideoMixerBitmap*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_alpha_bitmap(this : IMFVideoMixerBitmap*, pbmpparms : MFVideoAlphaBitmap*) : HRESULT
    @lpVtbl.value.set_alpha_bitmap.call(this, pbmpparms)
  end
  def clear_alpha_bitmap(this : IMFVideoMixerBitmap*) : HRESULT
    @lpVtbl.value.clear_alpha_bitmap.call(this)
  end
  def update_alpha_bitmap_parameters(this : IMFVideoMixerBitmap*, pbmpparms : MFVideoAlphaBitmapParams*) : HRESULT
    @lpVtbl.value.update_alpha_bitmap_parameters.call(this, pbmpparms)
  end
  def get_alpha_bitmap_parameters(this : IMFVideoMixerBitmap*, pbmpparms : MFVideoAlphaBitmapParams*) : HRESULT
    @lpVtbl.value.get_alpha_bitmap_parameters.call(this, pbmpparms)
  end
end
struct LibWin32::IAdvancedMediaCaptureInitializationSettings
  def query_interface(this : IAdvancedMediaCaptureInitializationSettings*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IAdvancedMediaCaptureInitializationSettings*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IAdvancedMediaCaptureInitializationSettings*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_directx_device_manager(this : IAdvancedMediaCaptureInitializationSettings*, value : IMFDXGIDeviceManager) : HRESULT
    @lpVtbl.value.set_directx_device_manager.call(this, value)
  end
end
struct LibWin32::IAdvancedMediaCaptureSettings
  def query_interface(this : IAdvancedMediaCaptureSettings*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IAdvancedMediaCaptureSettings*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IAdvancedMediaCaptureSettings*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_directx_device_manager(this : IAdvancedMediaCaptureSettings*, value : IMFDXGIDeviceManager*) : HRESULT
    @lpVtbl.value.get_directx_device_manager.call(this, value)
  end
end
struct LibWin32::IAdvancedMediaCapture
  def query_interface(this : IAdvancedMediaCapture*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IAdvancedMediaCapture*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IAdvancedMediaCapture*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_advanced_media_capture_settings(this : IAdvancedMediaCapture*, value : IAdvancedMediaCaptureSettings*) : HRESULT
    @lpVtbl.value.get_advanced_media_capture_settings.call(this, value)
  end
end
struct LibWin32::IMFSpatialAudioObjectBuffer
  def query_interface(this : IMFSpatialAudioObjectBuffer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSpatialAudioObjectBuffer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSpatialAudioObjectBuffer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def lock(this : IMFSpatialAudioObjectBuffer*, ppbbuffer : UInt8**, pcbmaxlength : UInt32*, pcbcurrentlength : UInt32*) : HRESULT
    @lpVtbl.value.lock.call(this, ppbbuffer, pcbmaxlength, pcbcurrentlength)
  end
  def unlock(this : IMFSpatialAudioObjectBuffer*) : HRESULT
    @lpVtbl.value.unlock.call(this)
  end
  def get_current_length(this : IMFSpatialAudioObjectBuffer*, pcbcurrentlength : UInt32*) : HRESULT
    @lpVtbl.value.get_current_length.call(this, pcbcurrentlength)
  end
  def set_current_length(this : IMFSpatialAudioObjectBuffer*, cbcurrentlength : UInt32) : HRESULT
    @lpVtbl.value.set_current_length.call(this, cbcurrentlength)
  end
  def get_max_length(this : IMFSpatialAudioObjectBuffer*, pcbmaxlength : UInt32*) : HRESULT
    @lpVtbl.value.get_max_length.call(this, pcbmaxlength)
  end
  def set_id(this : IMFSpatialAudioObjectBuffer*, u32id : UInt32) : HRESULT
    @lpVtbl.value.set_id.call(this, u32id)
  end
  def get_id(this : IMFSpatialAudioObjectBuffer*, pu32id : UInt32*) : HRESULT
    @lpVtbl.value.get_id.call(this, pu32id)
  end
  def set_type(this : IMFSpatialAudioObjectBuffer*, type : AudioObjectType) : HRESULT
    @lpVtbl.value.set_type.call(this, type)
  end
  def get_type(this : IMFSpatialAudioObjectBuffer*, ptype : AudioObjectType*) : HRESULT
    @lpVtbl.value.get_type.call(this, ptype)
  end
  def get_metadata_items(this : IMFSpatialAudioObjectBuffer*, ppmetadataitems : ISpatialAudioMetadataItems*) : HRESULT
    @lpVtbl.value.get_metadata_items.call(this, ppmetadataitems)
  end
end
struct LibWin32::IMFSpatialAudioSample
  def query_interface(this : IMFSpatialAudioSample*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFSpatialAudioSample*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFSpatialAudioSample*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_item(this : IMFSpatialAudioSample*, guidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item.call(this, guidkey, pvalue)
  end
  def get_item_type(this : IMFSpatialAudioSample*, guidkey : Guid*, ptype : MF_ATTRIBUTE_TYPE*) : HRESULT
    @lpVtbl.value.get_item_type.call(this, guidkey, ptype)
  end
  def compare_item(this : IMFSpatialAudioSample*, guidkey : Guid*, value : PROPVARIANT*, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare_item.call(this, guidkey, value, pbresult)
  end
  def compare(this : IMFSpatialAudioSample*, ptheirs : IMFAttributes, matchtype : MF_ATTRIBUTES_MATCH_TYPE, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare.call(this, ptheirs, matchtype, pbresult)
  end
  def get_uint32(this : IMFSpatialAudioSample*, guidkey : Guid*, punvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_uint32.call(this, guidkey, punvalue)
  end
  def get_uint64(this : IMFSpatialAudioSample*, guidkey : Guid*, punvalue : UInt64*) : HRESULT
    @lpVtbl.value.get_uint64.call(this, guidkey, punvalue)
  end
  def get_double(this : IMFSpatialAudioSample*, guidkey : Guid*, pfvalue : Float64*) : HRESULT
    @lpVtbl.value.get_double.call(this, guidkey, pfvalue)
  end
  def get_guid(this : IMFSpatialAudioSample*, guidkey : Guid*, pguidvalue : Guid*) : HRESULT
    @lpVtbl.value.get_guid.call(this, guidkey, pguidvalue)
  end
  def get_string_length(this : IMFSpatialAudioSample*, guidkey : Guid*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string_length.call(this, guidkey, pcchlength)
  end
  def get_string(this : IMFSpatialAudioSample*, guidkey : Guid*, pwszvalue : Char*, cchbufsize : UInt32, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string.call(this, guidkey, pwszvalue, cchbufsize, pcchlength)
  end
  def get_allocated_string(this : IMFSpatialAudioSample*, guidkey : Guid*, ppwszvalue : LibC::LPWSTR*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_string.call(this, guidkey, ppwszvalue, pcchlength)
  end
  def get_blob_size(this : IMFSpatialAudioSample*, guidkey : Guid*, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob_size.call(this, guidkey, pcbblobsize)
  end
  def get_blob(this : IMFSpatialAudioSample*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob.call(this, guidkey, pbuf, cbbufsize, pcbblobsize)
  end
  def get_allocated_blob(this : IMFSpatialAudioSample*, guidkey : Guid*, ppbuf : UInt8**, pcbsize : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_blob.call(this, guidkey, ppbuf, pcbsize)
  end
  def get_unknown(this : IMFSpatialAudioSample*, guidkey : Guid*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_unknown.call(this, guidkey, riid, ppv)
  end
  def set_item(this : IMFSpatialAudioSample*, guidkey : Guid*, value : PROPVARIANT*) : HRESULT
    @lpVtbl.value.set_item.call(this, guidkey, value)
  end
  def delete_item(this : IMFSpatialAudioSample*, guidkey : Guid*) : HRESULT
    @lpVtbl.value.delete_item.call(this, guidkey)
  end
  def delete_all_items(this : IMFSpatialAudioSample*) : HRESULT
    @lpVtbl.value.delete_all_items.call(this)
  end
  def set_uint32(this : IMFSpatialAudioSample*, guidkey : Guid*, unvalue : UInt32) : HRESULT
    @lpVtbl.value.set_uint32.call(this, guidkey, unvalue)
  end
  def set_uint64(this : IMFSpatialAudioSample*, guidkey : Guid*, unvalue : UInt64) : HRESULT
    @lpVtbl.value.set_uint64.call(this, guidkey, unvalue)
  end
  def set_double(this : IMFSpatialAudioSample*, guidkey : Guid*, fvalue : Float64) : HRESULT
    @lpVtbl.value.set_double.call(this, guidkey, fvalue)
  end
  def set_guid(this : IMFSpatialAudioSample*, guidkey : Guid*, guidvalue : Guid*) : HRESULT
    @lpVtbl.value.set_guid.call(this, guidkey, guidvalue)
  end
  def set_string(this : IMFSpatialAudioSample*, guidkey : Guid*, wszvalue : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_string.call(this, guidkey, wszvalue)
  end
  def set_blob(this : IMFSpatialAudioSample*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32) : HRESULT
    @lpVtbl.value.set_blob.call(this, guidkey, pbuf, cbbufsize)
  end
  def set_unknown(this : IMFSpatialAudioSample*, guidkey : Guid*, punknown : IUnknown) : HRESULT
    @lpVtbl.value.set_unknown.call(this, guidkey, punknown)
  end
  def lock_store(this : IMFSpatialAudioSample*) : HRESULT
    @lpVtbl.value.lock_store.call(this)
  end
  def unlock_store(this : IMFSpatialAudioSample*) : HRESULT
    @lpVtbl.value.unlock_store.call(this)
  end
  def get_count(this : IMFSpatialAudioSample*, pcitems : UInt32*) : HRESULT
    @lpVtbl.value.get_count.call(this, pcitems)
  end
  def get_item_by_index(this : IMFSpatialAudioSample*, unindex : UInt32, pguidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item_by_index.call(this, unindex, pguidkey, pvalue)
  end
  def copy_all_items(this : IMFSpatialAudioSample*, pdest : IMFAttributes) : HRESULT
    @lpVtbl.value.copy_all_items.call(this, pdest)
  end
  def get_sample_flags(this : IMFSpatialAudioSample*, pdwsampleflags : UInt32*) : HRESULT
    @lpVtbl.value.get_sample_flags.call(this, pdwsampleflags)
  end
  def set_sample_flags(this : IMFSpatialAudioSample*, dwsampleflags : UInt32) : HRESULT
    @lpVtbl.value.set_sample_flags.call(this, dwsampleflags)
  end
  def get_sample_time(this : IMFSpatialAudioSample*, phnssampletime : Int64*) : HRESULT
    @lpVtbl.value.get_sample_time.call(this, phnssampletime)
  end
  def set_sample_time(this : IMFSpatialAudioSample*, hnssampletime : Int64) : HRESULT
    @lpVtbl.value.set_sample_time.call(this, hnssampletime)
  end
  def get_sample_duration(this : IMFSpatialAudioSample*, phnssampleduration : Int64*) : HRESULT
    @lpVtbl.value.get_sample_duration.call(this, phnssampleduration)
  end
  def set_sample_duration(this : IMFSpatialAudioSample*, hnssampleduration : Int64) : HRESULT
    @lpVtbl.value.set_sample_duration.call(this, hnssampleduration)
  end
  def get_buffer_count(this : IMFSpatialAudioSample*, pdwbuffercount : UInt32*) : HRESULT
    @lpVtbl.value.get_buffer_count.call(this, pdwbuffercount)
  end
  def get_buffer_by_index(this : IMFSpatialAudioSample*, dwindex : UInt32, ppbuffer : IMFMediaBuffer*) : HRESULT
    @lpVtbl.value.get_buffer_by_index.call(this, dwindex, ppbuffer)
  end
  def convert_to_contiguous_buffer(this : IMFSpatialAudioSample*, ppbuffer : IMFMediaBuffer*) : HRESULT
    @lpVtbl.value.convert_to_contiguous_buffer.call(this, ppbuffer)
  end
  def add_buffer(this : IMFSpatialAudioSample*, pbuffer : IMFMediaBuffer) : HRESULT
    @lpVtbl.value.add_buffer.call(this, pbuffer)
  end
  def remove_buffer_by_index(this : IMFSpatialAudioSample*, dwindex : UInt32) : HRESULT
    @lpVtbl.value.remove_buffer_by_index.call(this, dwindex)
  end
  def remove_all_buffers(this : IMFSpatialAudioSample*) : HRESULT
    @lpVtbl.value.remove_all_buffers.call(this)
  end
  def get_total_length(this : IMFSpatialAudioSample*, pcbtotallength : UInt32*) : HRESULT
    @lpVtbl.value.get_total_length.call(this, pcbtotallength)
  end
  def copy_to_buffer(this : IMFSpatialAudioSample*, pbuffer : IMFMediaBuffer) : HRESULT
    @lpVtbl.value.copy_to_buffer.call(this, pbuffer)
  end
  def get_object_count(this : IMFSpatialAudioSample*, pdwobjectcount : UInt32*) : HRESULT
    @lpVtbl.value.get_object_count.call(this, pdwobjectcount)
  end
  def add_spatial_audio_object(this : IMFSpatialAudioSample*, paudioobjbuffer : IMFSpatialAudioObjectBuffer) : HRESULT
    @lpVtbl.value.add_spatial_audio_object.call(this, paudioobjbuffer)
  end
  def get_spatial_audio_object_by_index(this : IMFSpatialAudioSample*, dwindex : UInt32, ppaudioobjbuffer : IMFSpatialAudioObjectBuffer*) : HRESULT
    @lpVtbl.value.get_spatial_audio_object_by_index.call(this, dwindex, ppaudioobjbuffer)
  end
end
struct LibWin32::IMFContentDecryptionModuleSession
  def query_interface(this : IMFContentDecryptionModuleSession*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFContentDecryptionModuleSession*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFContentDecryptionModuleSession*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_session_id(this : IMFContentDecryptionModuleSession*, sessionid : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_session_id.call(this, sessionid)
  end
  def get_expiration(this : IMFContentDecryptionModuleSession*, expiration : Float64*) : HRESULT
    @lpVtbl.value.get_expiration.call(this, expiration)
  end
  def get_key_statuses(this : IMFContentDecryptionModuleSession*, keystatuses : MFMediaKeyStatus**, numkeystatuses : UInt32*) : HRESULT
    @lpVtbl.value.get_key_statuses.call(this, keystatuses, numkeystatuses)
  end
  def load(this : IMFContentDecryptionModuleSession*, sessionid : LibC::LPWSTR, loaded : LibC::BOOL*) : HRESULT
    @lpVtbl.value.load.call(this, sessionid, loaded)
  end
  def generate_request(this : IMFContentDecryptionModuleSession*, initdatatype : LibC::LPWSTR, initdata : UInt8*, initdatasize : UInt32) : HRESULT
    @lpVtbl.value.generate_request.call(this, initdatatype, initdata, initdatasize)
  end
  def update(this : IMFContentDecryptionModuleSession*, response : UInt8*, responsesize : UInt32) : HRESULT
    @lpVtbl.value.update.call(this, response, responsesize)
  end
  def close(this : IMFContentDecryptionModuleSession*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def remove(this : IMFContentDecryptionModuleSession*) : HRESULT
    @lpVtbl.value.remove.call(this)
  end
end
struct LibWin32::IMFContentDecryptionModuleSessionCallbacks
  def query_interface(this : IMFContentDecryptionModuleSessionCallbacks*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFContentDecryptionModuleSessionCallbacks*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFContentDecryptionModuleSessionCallbacks*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def key_message(this : IMFContentDecryptionModuleSessionCallbacks*, messagetype : MF_MEDIAKEYSESSION_MESSAGETYPE, message : UInt8*, messagesize : UInt32, destinationurl : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.key_message.call(this, messagetype, message, messagesize, destinationurl)
  end
  def key_status_changed(this : IMFContentDecryptionModuleSessionCallbacks*) : HRESULT
    @lpVtbl.value.key_status_changed.call(this)
  end
end
struct LibWin32::IMFContentDecryptionModule
  def query_interface(this : IMFContentDecryptionModule*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFContentDecryptionModule*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFContentDecryptionModule*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_content_enabler(this : IMFContentDecryptionModule*, contentenabler : IMFContentEnabler, result : IMFAsyncResult) : HRESULT
    @lpVtbl.value.set_content_enabler.call(this, contentenabler, result)
  end
  def get_suspend_notify(this : IMFContentDecryptionModule*, notify : IMFCdmSuspendNotify*) : HRESULT
    @lpVtbl.value.get_suspend_notify.call(this, notify)
  end
  def set_pmp_host_app(this : IMFContentDecryptionModule*, pmphostapp : IMFPMPHostApp) : HRESULT
    @lpVtbl.value.set_pmp_host_app.call(this, pmphostapp)
  end
  def create_session(this : IMFContentDecryptionModule*, sessiontype : MF_MEDIAKEYSESSION_TYPE, callbacks : IMFContentDecryptionModuleSessionCallbacks, session : IMFContentDecryptionModuleSession*) : HRESULT
    @lpVtbl.value.create_session.call(this, sessiontype, callbacks, session)
  end
  def set_server_certificate(this : IMFContentDecryptionModule*, certificate : UInt8*, certificatesize : UInt32) : HRESULT
    @lpVtbl.value.set_server_certificate.call(this, certificate, certificatesize)
  end
  def create_trusted_input(this : IMFContentDecryptionModule*, contentinitdata : UInt8*, contentinitdatasize : UInt32, trustedinput : IMFTrustedInput*) : HRESULT
    @lpVtbl.value.create_trusted_input.call(this, contentinitdata, contentinitdatasize, trustedinput)
  end
  def get_protection_system_ids(this : IMFContentDecryptionModule*, systemids : Guid**, count : UInt32*) : HRESULT
    @lpVtbl.value.get_protection_system_ids.call(this, systemids, count)
  end
end
struct LibWin32::IMFContentDecryptionModuleAccess
  def query_interface(this : IMFContentDecryptionModuleAccess*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFContentDecryptionModuleAccess*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFContentDecryptionModuleAccess*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_content_decryption_module(this : IMFContentDecryptionModuleAccess*, contentdecryptionmoduleproperties : IPropertyStore, contentdecryptionmodule : IMFContentDecryptionModule*) : HRESULT
    @lpVtbl.value.create_content_decryption_module.call(this, contentdecryptionmoduleproperties, contentdecryptionmodule)
  end
  def get_configuration(this : IMFContentDecryptionModuleAccess*, configuration : IPropertyStore*) : HRESULT
    @lpVtbl.value.get_configuration.call(this, configuration)
  end
  def get_key_system(this : IMFContentDecryptionModuleAccess*, keysystem : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_key_system.call(this, keysystem)
  end
end
struct LibWin32::IMFContentDecryptionModuleFactory
  def query_interface(this : IMFContentDecryptionModuleFactory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFContentDecryptionModuleFactory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFContentDecryptionModuleFactory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def is_type_supported(this : IMFContentDecryptionModuleFactory*, keysystem : LibC::LPWSTR, contenttype : LibC::LPWSTR) : LibC::BOOL
    @lpVtbl.value.is_type_supported.call(this, keysystem, contenttype)
  end
  def create_content_decryption_module_access(this : IMFContentDecryptionModuleFactory*, keysystem : LibC::LPWSTR, configurations : IPropertyStore*, numconfigurations : UInt32, contentdecryptionmoduleaccess : IMFContentDecryptionModuleAccess*) : HRESULT
    @lpVtbl.value.create_content_decryption_module_access.call(this, keysystem, configurations, numconfigurations, contentdecryptionmoduleaccess)
  end
end
struct LibWin32::IMFCameraSyncObject
  def query_interface(this : IMFCameraSyncObject*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFCameraSyncObject*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFCameraSyncObject*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def wait_on_signal(this : IMFCameraSyncObject*, timeoutinms : UInt32) : HRESULT
    @lpVtbl.value.wait_on_signal.call(this, timeoutinms)
  end
  def shutdown(this : IMFCameraSyncObject*) : Void
    @lpVtbl.value.shutdown.call(this)
  end
end
struct LibWin32::IMFVirtualCamera
  def query_interface(this : IMFVirtualCamera*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMFVirtualCamera*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMFVirtualCamera*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_item(this : IMFVirtualCamera*, guidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item.call(this, guidkey, pvalue)
  end
  def get_item_type(this : IMFVirtualCamera*, guidkey : Guid*, ptype : MF_ATTRIBUTE_TYPE*) : HRESULT
    @lpVtbl.value.get_item_type.call(this, guidkey, ptype)
  end
  def compare_item(this : IMFVirtualCamera*, guidkey : Guid*, value : PROPVARIANT*, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare_item.call(this, guidkey, value, pbresult)
  end
  def compare(this : IMFVirtualCamera*, ptheirs : IMFAttributes, matchtype : MF_ATTRIBUTES_MATCH_TYPE, pbresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.compare.call(this, ptheirs, matchtype, pbresult)
  end
  def get_uint32(this : IMFVirtualCamera*, guidkey : Guid*, punvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_uint32.call(this, guidkey, punvalue)
  end
  def get_uint64(this : IMFVirtualCamera*, guidkey : Guid*, punvalue : UInt64*) : HRESULT
    @lpVtbl.value.get_uint64.call(this, guidkey, punvalue)
  end
  def get_double(this : IMFVirtualCamera*, guidkey : Guid*, pfvalue : Float64*) : HRESULT
    @lpVtbl.value.get_double.call(this, guidkey, pfvalue)
  end
  def get_guid(this : IMFVirtualCamera*, guidkey : Guid*, pguidvalue : Guid*) : HRESULT
    @lpVtbl.value.get_guid.call(this, guidkey, pguidvalue)
  end
  def get_string_length(this : IMFVirtualCamera*, guidkey : Guid*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string_length.call(this, guidkey, pcchlength)
  end
  def get_string(this : IMFVirtualCamera*, guidkey : Guid*, pwszvalue : Char*, cchbufsize : UInt32, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_string.call(this, guidkey, pwszvalue, cchbufsize, pcchlength)
  end
  def get_allocated_string(this : IMFVirtualCamera*, guidkey : Guid*, ppwszvalue : LibC::LPWSTR*, pcchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_string.call(this, guidkey, ppwszvalue, pcchlength)
  end
  def get_blob_size(this : IMFVirtualCamera*, guidkey : Guid*, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob_size.call(this, guidkey, pcbblobsize)
  end
  def get_blob(this : IMFVirtualCamera*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32, pcbblobsize : UInt32*) : HRESULT
    @lpVtbl.value.get_blob.call(this, guidkey, pbuf, cbbufsize, pcbblobsize)
  end
  def get_allocated_blob(this : IMFVirtualCamera*, guidkey : Guid*, ppbuf : UInt8**, pcbsize : UInt32*) : HRESULT
    @lpVtbl.value.get_allocated_blob.call(this, guidkey, ppbuf, pcbsize)
  end
  def get_unknown(this : IMFVirtualCamera*, guidkey : Guid*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_unknown.call(this, guidkey, riid, ppv)
  end
  def set_item(this : IMFVirtualCamera*, guidkey : Guid*, value : PROPVARIANT*) : HRESULT
    @lpVtbl.value.set_item.call(this, guidkey, value)
  end
  def delete_item(this : IMFVirtualCamera*, guidkey : Guid*) : HRESULT
    @lpVtbl.value.delete_item.call(this, guidkey)
  end
  def delete_all_items(this : IMFVirtualCamera*) : HRESULT
    @lpVtbl.value.delete_all_items.call(this)
  end
  def set_uint32(this : IMFVirtualCamera*, guidkey : Guid*, unvalue : UInt32) : HRESULT
    @lpVtbl.value.set_uint32.call(this, guidkey, unvalue)
  end
  def set_uint64(this : IMFVirtualCamera*, guidkey : Guid*, unvalue : UInt64) : HRESULT
    @lpVtbl.value.set_uint64.call(this, guidkey, unvalue)
  end
  def set_double(this : IMFVirtualCamera*, guidkey : Guid*, fvalue : Float64) : HRESULT
    @lpVtbl.value.set_double.call(this, guidkey, fvalue)
  end
  def set_guid(this : IMFVirtualCamera*, guidkey : Guid*, guidvalue : Guid*) : HRESULT
    @lpVtbl.value.set_guid.call(this, guidkey, guidvalue)
  end
  def set_string(this : IMFVirtualCamera*, guidkey : Guid*, wszvalue : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_string.call(this, guidkey, wszvalue)
  end
  def set_blob(this : IMFVirtualCamera*, guidkey : Guid*, pbuf : UInt8*, cbbufsize : UInt32) : HRESULT
    @lpVtbl.value.set_blob.call(this, guidkey, pbuf, cbbufsize)
  end
  def set_unknown(this : IMFVirtualCamera*, guidkey : Guid*, punknown : IUnknown) : HRESULT
    @lpVtbl.value.set_unknown.call(this, guidkey, punknown)
  end
  def lock_store(this : IMFVirtualCamera*) : HRESULT
    @lpVtbl.value.lock_store.call(this)
  end
  def unlock_store(this : IMFVirtualCamera*) : HRESULT
    @lpVtbl.value.unlock_store.call(this)
  end
  def get_count(this : IMFVirtualCamera*, pcitems : UInt32*) : HRESULT
    @lpVtbl.value.get_count.call(this, pcitems)
  end
  def get_item_by_index(this : IMFVirtualCamera*, unindex : UInt32, pguidkey : Guid*, pvalue : PROPVARIANT*) : HRESULT
    @lpVtbl.value.get_item_by_index.call(this, unindex, pguidkey, pvalue)
  end
  def copy_all_items(this : IMFVirtualCamera*, pdest : IMFAttributes) : HRESULT
    @lpVtbl.value.copy_all_items.call(this, pdest)
  end
  def add_device_source_info(this : IMFVirtualCamera*, devicesourceinfo : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.add_device_source_info.call(this, devicesourceinfo)
  end
  def add_property(this : IMFVirtualCamera*, pkey : DEVPROPKEY*, type : UInt32, pbdata : UInt8*, cbdata : UInt32) : HRESULT
    @lpVtbl.value.add_property.call(this, pkey, type, pbdata, cbdata)
  end
  def add_registry_entry(this : IMFVirtualCamera*, entryname : LibC::LPWSTR, subkeypath : LibC::LPWSTR, dwregtype : UInt32, pbdata : UInt8*, cbdata : UInt32) : HRESULT
    @lpVtbl.value.add_registry_entry.call(this, entryname, subkeypath, dwregtype, pbdata, cbdata)
  end
  def start(this : IMFVirtualCamera*, pcallback : IMFAsyncCallback) : HRESULT
    @lpVtbl.value.start.call(this, pcallback)
  end
  def stop(this : IMFVirtualCamera*) : HRESULT
    @lpVtbl.value.stop.call(this)
  end
  def remove(this : IMFVirtualCamera*) : HRESULT
    @lpVtbl.value.remove.call(this)
  end
  def get_media_source(this : IMFVirtualCamera*, ppmediasource : IMFMediaSource*) : HRESULT
    @lpVtbl.value.get_media_source.call(this, ppmediasource)
  end
  def send_camera_property(this : IMFVirtualCamera*, propertyset : Guid*, propertyid : UInt32, propertyflags : UInt32, propertypayload : Void*, propertypayloadlength : UInt32, data : Void*, datalength : UInt32, datawritten : UInt32*) : HRESULT
    @lpVtbl.value.send_camera_property.call(this, propertyset, propertyid, propertyflags, propertypayload, propertypayloadlength, data, datalength, datawritten)
  end
  def create_sync_event(this : IMFVirtualCamera*, kseventset : Guid*, kseventid : UInt32, kseventflags : UInt32, eventhandle : LibC::HANDLE, camerasyncobject : IMFCameraSyncObject*) : HRESULT
    @lpVtbl.value.create_sync_event.call(this, kseventset, kseventid, kseventflags, eventhandle, camerasyncobject)
  end
  def create_sync_semaphore(this : IMFVirtualCamera*, kseventset : Guid*, kseventid : UInt32, kseventflags : UInt32, semaphorehandle : LibC::HANDLE, semaphoreadjustment : Int32, camerasyncobject : IMFCameraSyncObject*) : HRESULT
    @lpVtbl.value.create_sync_semaphore.call(this, kseventset, kseventid, kseventflags, semaphorehandle, semaphoreadjustment, camerasyncobject)
  end
  def shutdown(this : IMFVirtualCamera*) : HRESULT
    @lpVtbl.value.shutdown.call(this)
  end
end
