require "../system/com.cr"
require "../foundation.cr"
require "../media/mediafoundation.cr"
require "../system/ole.cr"
require "../graphics/gdi.cr"
require "../ui/windowsandmessaging.cr"

{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link("delayimp")]
{% end %}
@[Link("user32")]
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/IGNORE:4199")]
{% end %}
lib LibWin32
  CLSID_XFeedsManager = "fe6b11c3-c72e-4061-86c6-9d163121f229"
  WMPGC_FLAGS_ALLOW_PREROLL = 1_u32
  WMPGC_FLAGS_SUPPRESS_DIALOGS = 2_u32
  WMPGC_FLAGS_IGNORE_AV_SYNC = 4_u32
  WMPGC_FLAGS_DISABLE_PLUGINS = 8_u32
  WMPGC_FLAGS_USE_CUSTOM_GRAPH = 16_u32
  WMPUE_EC_USER = 33024_u32
  WMP_MDRT_FLAGS_UNREPORTED_DELETED_ITEMS = 1_u32
  WMP_MDRT_FLAGS_UNREPORTED_ADDED_ITEMS = 2_u32
  IOCTL_WMP_METADATA_ROUND_TRIP = 827346263_u32
  IOCTL_WMP_DEVICE_CAN_SYNC = 844123479_u32
  EFFECT_CANGOFULLSCREEN = 1_u32
  EFFECT_HASPROPERTYPAGE = 2_u32
  EFFECT_VARIABLEFREQSTEP = 4_u32
  EFFECT_WINDOWEDONLY = 8_u32
  EFFECT2_FULLSCREENEXCLUSIVE = 16_u32
  SA_BUFFER_SIZE = 1024_u32
  PLUGIN_TYPE_BACKGROUND = 1_u32
  PLUGIN_TYPE_SEPARATEWINDOW = 2_u32
  PLUGIN_TYPE_DISPLAYAREA = 3_u32
  PLUGIN_TYPE_SETTINGSAREA = 4_u32
  PLUGIN_TYPE_METADATAAREA = 5_u32
  PLUGIN_FLAGS_HASPROPERTYPAGE = 2147483648_u32
  PLUGIN_FLAGS_INSTALLAUTORUN = 1073741824_u32
  PLUGIN_FLAGS_LAUNCHPROPERTYPAGE = 536870912_u32
  PLUGIN_FLAGS_ACCEPTSMEDIA = 268435456_u32
  PLUGIN_FLAGS_ACCEPTSPLAYLISTS = 134217728_u32
  PLUGIN_FLAGS_HASPRESETS = 67108864_u32
  PLUGIN_FLAGS_HIDDEN = 33554432_u32
  SUBSCRIPTION_CAP_DEVICEAVAILABLE = 16_u32
  SUBSCRIPTION_CAP_BACKGROUNDPROCESSING = 8_u32
  SUBSCRIPTION_CAP_IS_CONTENTPARTNER = 64_u32
  SUBSCRIPTION_CAP_ALTLOGIN = 128_u32
  SUBSCRIPTION_CAP_ALLOWPLAY = 1_u32
  SUBSCRIPTION_CAP_ALLOWCDBURN = 2_u32
  SUBSCRIPTION_CAP_ALLOWPDATRANSFER = 4_u32
  SUBSCRIPTION_CAP_PREPAREFORSYNC = 32_u32
  SUBSCRIPTION_V1_CAPS = 15_u32
  SUBSCRIPTION_CAP_UILESSMODE_ALLOWPLAY = 256_u32
  DISPID_FEEDS_RootFolder = 4096_u32
  DISPID_FEEDS_IsSubscribed = 4097_u32
  DISPID_FEEDS_ExistsFeed = 4098_u32
  DISPID_FEEDS_GetFeed = 4099_u32
  DISPID_FEEDS_ExistsFolder = 4100_u32
  DISPID_FEEDS_GetFolder = 4101_u32
  DISPID_FEEDS_DeleteFeed = 4102_u32
  DISPID_FEEDS_DeleteFolder = 4103_u32
  DISPID_FEEDS_GetFeedByUrl = 4104_u32
  DISPID_FEEDS_BackgroundSync = 4105_u32
  DISPID_FEEDS_BackgroundSyncStatus = 4106_u32
  DISPID_FEEDS_DefaultInterval = 4107_u32
  DISPID_FEEDS_AsyncSyncAll = 4108_u32
  DISPID_FEEDS_Normalize = 4109_u32
  DISPID_FEEDS_ItemCountLimit = 4110_u32
  DISPID_FEEDSENUM_Count = 8192_u32
  DISPID_FEEDSENUM_Item = 8193_u32
  DISPID_FEEDFOLDER_Feeds = 12288_u32
  DISPID_FEEDFOLDER_Subfolders = 12289_u32
  DISPID_FEEDFOLDER_CreateFeed = 12290_u32
  DISPID_FEEDFOLDER_CreateSubfolder = 12291_u32
  DISPID_FEEDFOLDER_ExistsFeed = 12292_u32
  DISPID_FEEDFOLDER_GetFeed = 12293_u32
  DISPID_FEEDFOLDER_ExistsSubfolder = 12294_u32
  DISPID_FEEDFOLDER_GetSubfolder = 12295_u32
  DISPID_FEEDFOLDER_Delete = 12296_u32
  DISPID_FEEDFOLDER_Name = 12297_u32
  DISPID_FEEDFOLDER_Rename = 12298_u32
  DISPID_FEEDFOLDER_Path = 12299_u32
  DISPID_FEEDFOLDER_Move = 12300_u32
  DISPID_FEEDFOLDER_Parent = 12301_u32
  DISPID_FEEDFOLDER_IsRoot = 12302_u32
  DISPID_FEEDFOLDER_TotalUnreadItemCount = 12303_u32
  DISPID_FEEDFOLDER_TotalItemCount = 12304_u32
  DISPID_FEEDFOLDER_GetWatcher = 12305_u32
  DISPID_FEED_Xml = 16384_u32
  DISPID_FEED_Name = 16385_u32
  DISPID_FEED_Rename = 16386_u32
  DISPID_FEED_Url = 16387_u32
  DISPID_FEED_LocalId = 16388_u32
  DISPID_FEED_Path = 16389_u32
  DISPID_FEED_Move = 16390_u32
  DISPID_FEED_Parent = 16391_u32
  DISPID_FEED_LastWriteTime = 16392_u32
  DISPID_FEED_Delete = 16393_u32
  DISPID_FEED_Download = 16394_u32
  DISPID_FEED_AsyncDownload = 16395_u32
  DISPID_FEED_CancelAsyncDownload = 16396_u32
  DISPID_FEED_Interval = 16397_u32
  DISPID_FEED_SyncSetting = 16398_u32
  DISPID_FEED_LastDownloadTime = 16399_u32
  DISPID_FEED_LocalEnclosurePath = 16400_u32
  DISPID_FEED_Items = 16401_u32
  DISPID_FEED_GetItem = 16402_u32
  DISPID_FEED_Title = 16403_u32
  DISPID_FEED_Description = 16404_u32
  DISPID_FEED_Link = 16405_u32
  DISPID_FEED_Image = 16406_u32
  DISPID_FEED_LastBuildDate = 16407_u32
  DISPID_FEED_PubDate = 16408_u32
  DISPID_FEED_Ttl = 16409_u32
  DISPID_FEED_Language = 16410_u32
  DISPID_FEED_Copyright = 16411_u32
  DISPID_FEED_DownloadEnclosuresAutomatically = 16412_u32
  DISPID_FEED_DownloadStatus = 16413_u32
  DISPID_FEED_LastDownloadError = 16414_u32
  DISPID_FEED_Merge = 16415_u32
  DISPID_FEED_DownloadUrl = 16416_u32
  DISPID_FEED_IsList = 16417_u32
  DISPID_FEED_MarkAllItemsRead = 16418_u32
  DISPID_FEED_GetWatcher = 16419_u32
  DISPID_FEED_UnreadItemCount = 16420_u32
  DISPID_FEED_ItemCount = 16421_u32
  DISPID_FEED_MaxItemCount = 16422_u32
  DISPID_FEED_GetItemByEffectiveId = 16423_u32
  DISPID_FEED_LastItemDownloadTime = 16424_u32
  DISPID_FEED_Username = 16425_u32
  DISPID_FEED_Password = 16426_u32
  DISPID_FEED_SetCredentials = 16427_u32
  DISPID_FEED_ClearCredentials = 16428_u32
  DISPID_FEEDITEM_Xml = 20480_u32
  DISPID_FEEDITEM_Title = 20481_u32
  DISPID_FEEDITEM_Link = 20482_u32
  DISPID_FEEDITEM_Guid = 20483_u32
  DISPID_FEEDITEM_Description = 20484_u32
  DISPID_FEEDITEM_PubDate = 20485_u32
  DISPID_FEEDITEM_Comments = 20486_u32
  DISPID_FEEDITEM_Author = 20487_u32
  DISPID_FEEDITEM_Enclosure = 20488_u32
  DISPID_FEEDITEM_IsRead = 20489_u32
  DISPID_FEEDITEM_LocalId = 20490_u32
  DISPID_FEEDITEM_Parent = 20491_u32
  DISPID_FEEDITEM_Delete = 20492_u32
  DISPID_FEEDITEM_DownloadUrl = 20493_u32
  DISPID_FEEDITEM_LastDownloadTime = 20494_u32
  DISPID_FEEDITEM_Modified = 20495_u32
  DISPID_FEEDITEM_EffectiveId = 20496_u32
  DISPID_FEEDENCLOSURE_Url = 24576_u32
  DISPID_FEEDENCLOSURE_Type = 24577_u32
  DISPID_FEEDENCLOSURE_Length = 24578_u32
  DISPID_FEEDENCLOSURE_AsyncDownload = 24579_u32
  DISPID_FEEDENCLOSURE_CancelAsyncDownload = 24580_u32
  DISPID_FEEDENCLOSURE_DownloadStatus = 24581_u32
  DISPID_FEEDENCLOSURE_LastDownloadError = 24582_u32
  DISPID_FEEDENCLOSURE_LocalPath = 24583_u32
  DISPID_FEEDENCLOSURE_Parent = 24584_u32
  DISPID_FEEDENCLOSURE_DownloadUrl = 24585_u32
  DISPID_FEEDENCLOSURE_DownloadMimeType = 24586_u32
  DISPID_FEEDENCLOSURE_RemoveFile = 24587_u32
  DISPID_FEEDENCLOSURE_SetFile = 24588_u32
  DISPID_FEEDFOLDEREVENTS_Error = 28672_u32
  DISPID_FEEDFOLDEREVENTS_FolderAdded = 28673_u32
  DISPID_FEEDFOLDEREVENTS_FolderDeleted = 28674_u32
  DISPID_FEEDFOLDEREVENTS_FolderRenamed = 28675_u32
  DISPID_FEEDFOLDEREVENTS_FolderMovedFrom = 28676_u32
  DISPID_FEEDFOLDEREVENTS_FolderMovedTo = 28677_u32
  DISPID_FEEDFOLDEREVENTS_FolderItemCountChanged = 28678_u32
  DISPID_FEEDFOLDEREVENTS_FeedAdded = 28679_u32
  DISPID_FEEDFOLDEREVENTS_FeedDeleted = 28680_u32
  DISPID_FEEDFOLDEREVENTS_FeedRenamed = 28681_u32
  DISPID_FEEDFOLDEREVENTS_FeedUrlChanged = 28682_u32
  DISPID_FEEDFOLDEREVENTS_FeedMovedFrom = 28683_u32
  DISPID_FEEDFOLDEREVENTS_FeedMovedTo = 28684_u32
  DISPID_FEEDFOLDEREVENTS_FeedDownloading = 28685_u32
  DISPID_FEEDFOLDEREVENTS_FeedDownloadCompleted = 28686_u32
  DISPID_FEEDFOLDEREVENTS_FeedItemCountChanged = 28687_u32
  DISPID_FEEDEVENTS_Error = 32768_u32
  DISPID_FEEDEVENTS_FeedDeleted = 32769_u32
  DISPID_FEEDEVENTS_FeedRenamed = 32770_u32
  DISPID_FEEDEVENTS_FeedUrlChanged = 32771_u32
  DISPID_FEEDEVENTS_FeedMoved = 32772_u32
  DISPID_FEEDEVENTS_FeedDownloading = 32773_u32
  DISPID_FEEDEVENTS_FeedDownloadCompleted = 32774_u32
  DISPID_FEEDEVENTS_FeedItemCountChanged = 32775_u32
  DISPID_DELTA = 50_u32
  DISPID_WMPCORE_BASE = 0_u32
  DISPID_WMPCORE_URL = 1_u32
  DISPID_WMPCORE_OPENSTATE = 2_u32
  DISPID_WMPCORE_CLOSE = 3_u32
  DISPID_WMPCORE_CONTROLS = 4_u32
  DISPID_WMPCORE_SETTINGS = 5_u32
  DISPID_WMPCORE_CURRENTMEDIA = 6_u32
  DISPID_WMPCORE_NETWORK = 7_u32
  DISPID_WMPCORE_MEDIACOLLECTION = 8_u32
  DISPID_WMPCORE_PLAYLISTCOLLECTION = 9_u32
  DISPID_WMPCORE_PLAYSTATE = 10_u32
  DISPID_WMPCORE_VERSIONINFO = 11_u32
  DISPID_WMPCORE_LAUNCHURL = 12_u32
  DISPID_WMPCORE_CURRENTPLAYLIST = 13_u32
  DISPID_WMPCORE_CDROMCOLLECTION = 14_u32
  DISPID_WMPCORE_CLOSEDCAPTION = 15_u32
  DISPID_WMPCORE_ISONLINE = 16_u32
  DISPID_WMPCORE_ERROR = 17_u32
  DISPID_WMPCORE_STATUS = 18_u32
  DISPID_WMPCORE_LAST = 18_u32
  DISPID_WMPOCX_BASE = 18_u32
  DISPID_WMPOCX_ENABLED = 19_u32
  DISPID_WMPOCX_TRANSPARENTATSTART = 20_u32
  DISPID_WMPOCX_FULLSCREEN = 21_u32
  DISPID_WMPOCX_ENABLECONTEXTMENU = 22_u32
  DISPID_WMPOCX_UIMODE = 23_u32
  DISPID_WMPOCX_LAST = 23_u32
  DISPID_WMPOCX2_BASE = 23_u32
  DISPID_WMPOCX2_STRETCHTOFIT = 24_u32
  DISPID_WMPOCX2_WINDOWLESSVIDEO = 25_u32
  DISPID_WMPOCX4_ISREMOTE = 26_u32
  DISPID_WMPOCX4_PLAYERAPPLICATION = 27_u32
  DISPID_WMPOCX4_OPENPLAYER = 28_u32
  DISPID_WMPCORE2_BASE = 39_u32
  DISPID_WMPCORE2_DVD = 40_u32
  DISPID_WMPCORE3_NEWPLAYLIST = 41_u32
  DISPID_WMPCORE3_NEWMEDIA = 42_u32
  DISPID_WMPCONTROLS_PLAY = 51_u32
  DISPID_WMPCONTROLS_STOP = 52_u32
  DISPID_WMPCONTROLS_PAUSE = 53_u32
  DISPID_WMPCONTROLS_FASTFORWARD = 54_u32
  DISPID_WMPCONTROLS_FASTREVERSE = 55_u32
  DISPID_WMPCONTROLS_CURRENTPOSITION = 56_u32
  DISPID_WMPCONTROLS_CURRENTPOSITIONSTRING = 57_u32
  DISPID_WMPCONTROLS_NEXT = 58_u32
  DISPID_WMPCONTROLS_PREVIOUS = 59_u32
  DISPID_WMPCONTROLS_CURRENTITEM = 60_u32
  DISPID_WMPCONTROLS_CURRENTMARKER = 61_u32
  DISPID_WMPCONTROLS_ISAVAILABLE = 62_u32
  DISPID_WMPCONTROLS_PLAYITEM = 63_u32
  DISPID_WMPCONTROLS2_STEP = 64_u32
  DISPID_WMPCONTROLS3_AUDIOLANGUAGECOUNT = 65_u32
  DISPID_WMPCONTROLS3_GETAUDIOLANGUAGEID = 66_u32
  DISPID_WMPCONTROLS3_GETAUDIOLANGUAGEDESC = 67_u32
  DISPID_WMPCONTROLS3_CURRENTAUDIOLANGUAGE = 68_u32
  DISPID_WMPCONTROLS3_CURRENTAUDIOLANGUAGEINDEX = 69_u32
  DISPID_WMPCONTROLS3_GETLANGUAGENAME = 70_u32
  DISPID_WMPCONTROLS3_CURRENTPOSITIONTIMECODE = 71_u32
  DISPID_WMPCONTROLSFAKE_TIMECOMPRESSION = 72_u32
  DISPID_WMPSETTINGS_AUTOSTART = 101_u32
  DISPID_WMPSETTINGS_BALANCE = 102_u32
  DISPID_WMPSETTINGS_INVOKEURLS = 103_u32
  DISPID_WMPSETTINGS_MUTE = 104_u32
  DISPID_WMPSETTINGS_PLAYCOUNT = 105_u32
  DISPID_WMPSETTINGS_RATE = 106_u32
  DISPID_WMPSETTINGS_VOLUME = 107_u32
  DISPID_WMPSETTINGS_BASEURL = 108_u32
  DISPID_WMPSETTINGS_DEFAULTFRAME = 109_u32
  DISPID_WMPSETTINGS_GETMODE = 110_u32
  DISPID_WMPSETTINGS_SETMODE = 111_u32
  DISPID_WMPSETTINGS_ENABLEERRORDIALOGS = 112_u32
  DISPID_WMPSETTINGS_ISAVAILABLE = 113_u32
  DISPID_WMPSETTINGS2_DEFAULTAUDIOLANGUAGE = 114_u32
  DISPID_WMPSETTINGS2_LIBRARYACCESSRIGHTS = 115_u32
  DISPID_WMPSETTINGS2_REQUESTLIBRARYACCESSRIGHTS = 116_u32
  DISPID_WMPPLAYLIST_COUNT = 201_u32
  DISPID_WMPPLAYLIST_NAME = 202_u32
  DISPID_WMPPLAYLIST_GETITEMINFO = 203_u32
  DISPID_WMPPLAYLIST_SETITEMINFO = 204_u32
  DISPID_WMPPLAYLIST_CLEAR = 205_u32
  DISPID_WMPPLAYLIST_INSERTITEM = 206_u32
  DISPID_WMPPLAYLIST_APPENDITEM = 207_u32
  DISPID_WMPPLAYLIST_REMOVEITEM = 208_u32
  DISPID_WMPPLAYLIST_MOVEITEM = 209_u32
  DISPID_WMPPLAYLIST_ATTRIBUTECOUNT = 210_u32
  DISPID_WMPPLAYLIST_ATTRIBUTENAME = 211_u32
  DISPID_WMPPLAYLIST_ITEM = 212_u32
  DISPID_WMPPLAYLIST_ISIDENTICAL = 213_u32
  DISPID_WMPCDROM_DRIVESPECIFIER = 251_u32
  DISPID_WMPCDROM_PLAYLIST = 252_u32
  DISPID_WMPCDROM_EJECT = 253_u32
  DISPID_WMPCDROMCOLLECTION_COUNT = 301_u32
  DISPID_WMPCDROMCOLLECTION_ITEM = 302_u32
  DISPID_WMPCDROMCOLLECTION_GETBYDRIVESPECIFIER = 303_u32
  DISPID_WMPCDROMCOLLECTION_STARTMONITORINGCDROMS = 304_u32
  DISPID_WMPCDROMCOLLECTION_STOPMONITORINGCDROMS = 305_u32
  DISPID_WMPSTRINGCOLLECTION_COUNT = 401_u32
  DISPID_WMPSTRINGCOLLECTION_ITEM = 402_u32
  DISPID_WMPMEDIACOLLECTION_ADD = 452_u32
  DISPID_WMPMEDIACOLLECTION_GETALL = 453_u32
  DISPID_WMPMEDIACOLLECTION_GETBYNAME = 454_u32
  DISPID_WMPMEDIACOLLECTION_GETBYGENRE = 455_u32
  DISPID_WMPMEDIACOLLECTION_GETBYAUTHOR = 456_u32
  DISPID_WMPMEDIACOLLECTION_GETBYALBUM = 457_u32
  DISPID_WMPMEDIACOLLECTION_GETBYATTRIBUTE = 458_u32
  DISPID_WMPMEDIACOLLECTION_REMOVE = 459_u32
  DISPID_WMPMEDIACOLLECTION_GETATTRIBUTESTRINGCOLLECTION = 461_u32
  DISPID_WMPMEDIACOLLECTION_NEWQUERY = 462_u32
  DISPID_WMPMEDIACOLLECTION_STARTMONITORING = 463_u32
  DISPID_WMPMEDIACOLLECTION_STOPMONITORING = 464_u32
  DISPID_WMPMEDIACOLLECTION_STARTCONTENTSCAN = 465_u32
  DISPID_WMPMEDIACOLLECTION_STOPCONTENTSCAN = 466_u32
  DISPID_WMPMEDIACOLLECTION_STARTSEARCH = 467_u32
  DISPID_WMPMEDIACOLLECTION_STOPSEARCH = 468_u32
  DISPID_WMPMEDIACOLLECTION_UPDATEMETADATA = 469_u32
  DISPID_WMPMEDIACOLLECTION_GETMEDIAATOM = 470_u32
  DISPID_WMPMEDIACOLLECTION_SETDELETED = 471_u32
  DISPID_WMPMEDIACOLLECTION_ISDELETED = 472_u32
  DISPID_WMPMEDIACOLLECTION_GETBYQUERYDESCRIPTION = 473_u32
  DISPID_WMPMEDIACOLLECTION_FREEZECOLLECTIONCHANGE = 474_u32
  DISPID_WMPMEDIACOLLECTION_UNFREEZECOLLECTIONCHANGE = 475_u32
  DISPID_WMPMEDIACOLLECTION_POSTCOLLECTIONCHANGE = 476_u32
  DISPID_WMPPLAYLISTARRAY_COUNT = 501_u32
  DISPID_WMPPLAYLISTARRAY_ITEM = 502_u32
  DISPID_WMPPLAYLISTCOLLECTION_NEWPLAYLIST = 552_u32
  DISPID_WMPPLAYLISTCOLLECTION_GETALL = 553_u32
  DISPID_WMPPLAYLISTCOLLECTION_GETBYNAME = 554_u32
  DISPID_WMPPLAYLISTCOLLECTION_GETBYQUERYDESCRIPTION = 555_u32
  DISPID_WMPPLAYLISTCOLLECTION_REMOVE = 556_u32
  DISPID_WMPPLAYLISTCOLLECTION_NEWQUERY = 557_u32
  DISPID_WMPPLAYLISTCOLLECTION_STARTMONITORING = 558_u32
  DISPID_WMPPLAYLISTCOLLECTION_STOPMONITORING = 559_u32
  DISPID_WMPPLAYLISTCOLLECTION_SETDELETED = 560_u32
  DISPID_WMPPLAYLISTCOLLECTION_ISDELETED = 561_u32
  DISPID_WMPPLAYLISTCOLLECTION_IMPORTPLAYLIST = 562_u32
  DISPID_WMPMEDIA_SOURCEURL = 751_u32
  DISPID_WMPMEDIA_IMAGESOURCEWIDTH = 752_u32
  DISPID_WMPMEDIA_IMAGESOURCEHEIGHT = 753_u32
  DISPID_WMPMEDIA_MARKERCOUNT = 754_u32
  DISPID_WMPMEDIA_GETMARKERTIME = 755_u32
  DISPID_WMPMEDIA_GETMARKERNAME = 756_u32
  DISPID_WMPMEDIA_DURATION = 757_u32
  DISPID_WMPMEDIA_DURATIONSTRING = 758_u32
  DISPID_WMPMEDIA_ATTRIBUTECOUNT = 759_u32
  DISPID_WMPMEDIA_GETATTRIBUTENAME = 760_u32
  DISPID_WMPMEDIA_GETITEMINFO = 761_u32
  DISPID_WMPMEDIA_SETITEMINFO = 762_u32
  DISPID_WMPMEDIA_ISIDENTICAL = 763_u32
  DISPID_WMPMEDIA_NAME = 764_u32
  DISPID_WMPMEDIA_GETITEMINFOBYATOM = 765_u32
  DISPID_WMPMEDIA_ISMEMBEROF = 766_u32
  DISPID_WMPMEDIA_ISREADONLYITEM = 767_u32
  DISPID_WMPMEDIA2_ERROR = 768_u32
  DISPID_WMPMEDIA3_GETATTRIBUTECOUNTBYTYPE = 769_u32
  DISPID_WMPMEDIA3_GETITEMINFOBYTYPE = 770_u32
  DISPID_WMPNETWORK_BANDWIDTH = 801_u32
  DISPID_WMPNETWORK_RECOVEREDPACKETS = 802_u32
  DISPID_WMPNETWORK_SOURCEPROTOCOL = 803_u32
  DISPID_WMPNETWORK_RECEIVEDPACKETS = 804_u32
  DISPID_WMPNETWORK_LOSTPACKETS = 805_u32
  DISPID_WMPNETWORK_RECEPTIONQUALITY = 806_u32
  DISPID_WMPNETWORK_BUFFERINGCOUNT = 807_u32
  DISPID_WMPNETWORK_BUFFERINGPROGRESS = 808_u32
  DISPID_WMPNETWORK_BUFFERINGTIME = 809_u32
  DISPID_WMPNETWORK_FRAMERATE = 810_u32
  DISPID_WMPNETWORK_MAXBITRATE = 811_u32
  DISPID_WMPNETWORK_BITRATE = 812_u32
  DISPID_WMPNETWORK_GETPROXYSETTINGS = 813_u32
  DISPID_WMPNETWORK_SETPROXYSETTINGS = 814_u32
  DISPID_WMPNETWORK_GETPROXYNAME = 815_u32
  DISPID_WMPNETWORK_SETPROXYNAME = 816_u32
  DISPID_WMPNETWORK_GETPROXYPORT = 817_u32
  DISPID_WMPNETWORK_SETPROXYPORT = 818_u32
  DISPID_WMPNETWORK_GETPROXYEXCEPTIONLIST = 819_u32
  DISPID_WMPNETWORK_SETPROXYEXCEPTIONLIST = 820_u32
  DISPID_WMPNETWORK_GETPROXYBYPASSFORLOCAL = 821_u32
  DISPID_WMPNETWORK_SETPROXYBYPASSFORLOCAL = 822_u32
  DISPID_WMPNETWORK_MAXBANDWIDTH = 823_u32
  DISPID_WMPNETWORK_DOWNLOADPROGRESS = 824_u32
  DISPID_WMPNETWORK_ENCODEDFRAMERATE = 825_u32
  DISPID_WMPNETWORK_FRAMESSKIPPED = 826_u32
  DISPID_WMPERROR_CLEARERRORQUEUE = 851_u32
  DISPID_WMPERROR_ERRORCOUNT = 852_u32
  DISPID_WMPERROR_ITEM = 853_u32
  DISPID_WMPERROR_WEBHELP = 854_u32
  DISPID_WMPERRORITEM_ERRORCODE = 901_u32
  DISPID_WMPERRORITEM_ERRORDESCRIPTION = 902_u32
  DISPID_WMPERRORITEM_ERRORCONTEXT = 903_u32
  DISPID_WMPERRORITEM_REMEDY = 904_u32
  DISPID_WMPERRORITEM_CUSTOMURL = 905_u32
  DISPID_WMPERRORITEM2_CONDITION = 906_u32
  DISPID_WMPCLOSEDCAPTION_SAMISTYLE = 951_u32
  DISPID_WMPCLOSEDCAPTION_SAMILANG = 952_u32
  DISPID_WMPCLOSEDCAPTION_SAMIFILENAME = 953_u32
  DISPID_WMPCLOSEDCAPTION_CAPTIONINGID = 954_u32
  DISPID_WMPCLOSEDCAPTION2_GETLANGCOUNT = 955_u32
  DISPID_WMPCLOSEDCAPTION2_GETLANGNAME = 956_u32
  DISPID_WMPCLOSEDCAPTION2_GETLANGID = 957_u32
  DISPID_WMPCLOSEDCAPTION2_GETSTYLECOUNT = 958_u32
  DISPID_WMPCLOSEDCAPTION2_GETSTYLENAME = 959_u32
  DISPID_WMPDVD_ISAVAILABLE = 1001_u32
  DISPID_WMPDVD_DOMAIN = 1002_u32
  DISPID_WMPDVD_TOPMENU = 1003_u32
  DISPID_WMPDVD_TITLEMENU = 1004_u32
  DISPID_WMPDVD_BACK = 1005_u32
  DISPID_WMPDVD_RESUME = 1006_u32
  DISPID_WMPMETADATA_PICTURE_MIMETYPE = 1051_u32
  DISPID_WMPMETADATA_PICTURE_PICTURETYPE = 1052_u32
  DISPID_WMPMETADATA_PICTURE_DESCRIPTION = 1053_u32
  DISPID_WMPMETADATA_PICTURE_URL = 1054_u32
  DISPID_WMPMETADATA_TEXT_TEXT = 1055_u32
  DISPID_WMPMETADATA_TEXT_DESCRIPTION = 1056_u32
  DISPID_WMPPLAYERAPP_SWITCHTOPLAYERAPPLICATION = 1101_u32
  DISPID_WMPPLAYERAPP_SWITCHTOCONTROL = 1102_u32
  DISPID_WMPPLAYERAPP_PLAYERDOCKED = 1103_u32
  DISPID_WMPPLAYERAPP_HASDISPLAY = 1104_u32
  DISPID_WMPPLAYERAPP_REMOTESTATUS = 1105_u32
  DISPID_WMPDOWNLOADMANAGER_GETDOWNLOADCOLLECTION = 1151_u32
  DISPID_WMPDOWNLOADMANAGER_CREATEDOWNLOADCOLLECTION = 1152_u32
  DISPID_WMPDOWNLOADCOLLECTION_ID = 1201_u32
  DISPID_WMPDOWNLOADCOLLECTION_COUNT = 1202_u32
  DISPID_WMPDOWNLOADCOLLECTION_ITEM = 1203_u32
  DISPID_WMPDOWNLOADCOLLECTION_STARTDOWNLOAD = 1204_u32
  DISPID_WMPDOWNLOADCOLLECTION_REMOVEITEM = 1205_u32
  DISPID_WMPDOWNLOADCOLLECTION_CLEAR = 1206_u32
  DISPID_WMPDOWNLOADITEM_SOURCEURL = 1251_u32
  DISPID_WMPDOWNLOADITEM_SIZE = 1252_u32
  DISPID_WMPDOWNLOADITEM_TYPE = 1253_u32
  DISPID_WMPDOWNLOADITEM_PROGRESS = 1254_u32
  DISPID_WMPDOWNLOADITEM_DOWNLOADSTATE = 1255_u32
  DISPID_WMPDOWNLOADITEM_PAUSE = 1256_u32
  DISPID_WMPDOWNLOADITEM_RESUME = 1257_u32
  DISPID_WMPDOWNLOADITEM_CANCEL = 1258_u32
  DISPID_WMPDOWNLOADITEM2_GETITEMINFO = 1301_u32
  DISPID_WMPQUERY_ADDCONDITION = 1351_u32
  DISPID_WMPQUERY_BEGINNEXTGROUP = 1352_u32
  DISPID_WMPMEDIACOLLECTION2_CREATEQUERY = 1401_u32
  DISPID_WMPMEDIACOLLECTION2_GETPLAYLISTBYQUERY = 1402_u32
  DISPID_WMPMEDIACOLLECTION2_GETSTRINGCOLLBYQUERY = 1403_u32
  DISPID_WMPMEDIACOLLECTION2_GETBYATTRANDMEDIATYPE = 1404_u32
  DISPID_WMPSTRINGCOLLECTION2_ISIDENTICAL = 1451_u32
  DISPID_WMPSTRINGCOLLECTION2_GETITEMINFO = 1452_u32
  DISPID_WMPSTRINGCOLLECTION2_GETATTRCOUNTBYTYPE = 1453_u32
  DISPID_WMPSTRINGCOLLECTION2_GETITEMINFOBYTYPE = 1454_u32
  DISPID_WMPCORE_MIN = 1_u32
  DISPID_WMPCORE_MAX = 1454_u32
  WMPCOREEVENT_BASE = 5000_u32
  DISPID_WMPCOREEVENT_OPENSTATECHANGE = 5001_u32
  DISPID_WMPCOREEVENT_STATUSCHANGE = 5002_u32
  WMPCOREEVENT_CONTROL_BASE = 5100_u32
  DISPID_WMPCOREEVENT_PLAYSTATECHANGE = 5101_u32
  DISPID_WMPCOREEVENT_AUDIOLANGUAGECHANGE = 5102_u32
  WMPCOREEVENT_SEEK_BASE = 5200_u32
  DISPID_WMPCOREEVENT_ENDOFSTREAM = 5201_u32
  DISPID_WMPCOREEVENT_POSITIONCHANGE = 5202_u32
  DISPID_WMPCOREEVENT_MARKERHIT = 5203_u32
  DISPID_WMPCOREEVENT_DURATIONUNITCHANGE = 5204_u32
  WMPCOREEVENT_CONTENT_BASE = 5300_u32
  DISPID_WMPCOREEVENT_SCRIPTCOMMAND = 5301_u32
  WMPCOREEVENT_NETWORK_BASE = 5400_u32
  DISPID_WMPCOREEVENT_DISCONNECT = 5401_u32
  DISPID_WMPCOREEVENT_BUFFERING = 5402_u32
  DISPID_WMPCOREEVENT_NEWSTREAM = 5403_u32
  WMPCOREEVENT_ERROR_BASE = 5500_u32
  DISPID_WMPCOREEVENT_ERROR = 5501_u32
  WMPCOREEVENT_WARNING_BASE = 5600_u32
  DISPID_WMPCOREEVENT_WARNING = 5601_u32
  WMPCOREEVENT_CDROM_BASE = 5700_u32
  DISPID_WMPCOREEVENT_CDROMMEDIACHANGE = 5701_u32
  WMPCOREEVENT_PLAYLIST_BASE = 5800_u32
  DISPID_WMPCOREEVENT_PLAYLISTCHANGE = 5801_u32
  DISPID_WMPCOREEVENT_MEDIACHANGE = 5802_u32
  DISPID_WMPCOREEVENT_CURRENTMEDIAITEMAVAILABLE = 5803_u32
  DISPID_WMPCOREEVENT_CURRENTPLAYLISTCHANGE = 5804_u32
  DISPID_WMPCOREEVENT_CURRENTPLAYLISTITEMAVAILABLE = 5805_u32
  DISPID_WMPCOREEVENT_CURRENTITEMCHANGE = 5806_u32
  DISPID_WMPCOREEVENT_MEDIACOLLECTIONCHANGE = 5807_u32
  DISPID_WMPCOREEVENT_MEDIACOLLECTIONATTRIBUTESTRINGADDED = 5808_u32
  DISPID_WMPCOREEVENT_MEDIACOLLECTIONATTRIBUTESTRINGREMOVED = 5809_u32
  DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONCHANGE = 5810_u32
  DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONPLAYLISTADDED = 5811_u32
  DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONPLAYLISTREMOVED = 5812_u32
  DISPID_WMPCOREEVENT_MEDIACOLLECTIONCONTENTSCANADDEDITEM = 5813_u32
  DISPID_WMPCOREEVENT_MEDIACOLLECTIONCONTENTSCANPROGRESS = 5814_u32
  DISPID_WMPCOREEVENT_MEDIACOLLECTIONSEARCHFOUNDITEM = 5815_u32
  DISPID_WMPCOREEVENT_MEDIACOLLECTIONSEARCHPROGRESS = 5816_u32
  DISPID_WMPCOREEVENT_MEDIACOLLECTIONSEARCHCOMPLETE = 5817_u32
  DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONPLAYLISTSETASDELETED = 5818_u32
  DISPID_WMPCOREEVENT_MODECHANGE = 5819_u32
  DISPID_WMPCOREEVENT_MEDIACOLLECTIONATTRIBUTESTRINGCHANGED = 5820_u32
  DISPID_WMPCOREEVENT_MEDIAERROR = 5821_u32
  DISPID_WMPCOREEVENT_DOMAINCHANGE = 5822_u32
  DISPID_WMPCOREEVENT_OPENPLAYLISTSWITCH = 5823_u32
  DISPID_WMPCOREEVENT_STRINGCOLLECTIONCHANGE = 5824_u32
  DISPID_WMPCOREEVENT_MEDIACOLLECTIONMEDIAADDED = 5825_u32
  DISPID_WMPCOREEVENT_MEDIACOLLECTIONMEDIAREMOVED = 5826_u32
  WMPOCXEVENT_BASE = 6500_u32
  DISPID_WMPOCXEVENT_SWITCHEDTOPLAYERAPPLICATION = 6501_u32
  DISPID_WMPOCXEVENT_SWITCHEDTOCONTROL = 6502_u32
  DISPID_WMPOCXEVENT_PLAYERDOCKEDSTATECHANGE = 6503_u32
  DISPID_WMPOCXEVENT_PLAYERRECONNECT = 6504_u32
  DISPID_WMPOCXEVENT_CLICK = 6505_u32
  DISPID_WMPOCXEVENT_DOUBLECLICK = 6506_u32
  DISPID_WMPOCXEVENT_KEYDOWN = 6507_u32
  DISPID_WMPOCXEVENT_KEYPRESS = 6508_u32
  DISPID_WMPOCXEVENT_KEYUP = 6509_u32
  DISPID_WMPOCXEVENT_MOUSEDOWN = 6510_u32
  DISPID_WMPOCXEVENT_MOUSEMOVE = 6511_u32
  DISPID_WMPOCXEVENT_MOUSEUP = 6512_u32
  DISPID_WMPOCXEVENT_DEVICECONNECT = 6513_u32
  DISPID_WMPOCXEVENT_DEVICEDISCONNECT = 6514_u32
  DISPID_WMPOCXEVENT_DEVICESTATUSCHANGE = 6515_u32
  DISPID_WMPOCXEVENT_DEVICESYNCSTATECHANGE = 6516_u32
  DISPID_WMPOCXEVENT_DEVICESYNCERROR = 6517_u32
  DISPID_WMPOCXEVENT_CREATEPARTNERSHIPCOMPLETE = 6518_u32
  DISPID_WMPOCXEVENT_CDROMRIPSTATECHANGE = 6519_u32
  DISPID_WMPOCXEVENT_CDROMRIPMEDIAERROR = 6520_u32
  DISPID_WMPOCXEVENT_CDROMBURNSTATECHANGE = 6521_u32
  DISPID_WMPOCXEVENT_CDROMBURNMEDIAERROR = 6522_u32
  DISPID_WMPOCXEVENT_CDROMBURNERROR = 6523_u32
  DISPID_WMPOCXEVENT_LIBRARYCONNECT = 6524_u32
  DISPID_WMPOCXEVENT_LIBRARYDISCONNECT = 6525_u32
  DISPID_WMPOCXEVENT_FOLDERSCANSTATECHANGE = 6526_u32
  DISPID_WMPOCXEVENT_DEVICEESTIMATION = 6527_u32
  DISPID_WMPCONTROLS_BASE = 50_u32
  DISPID_WMPSETTINGS_BASE = 100_u32
  DISPID_WMPPLAYLIST_BASE = 200_u32
  DISPID_WMPCDROM_BASE = 250_u32
  DISPID_WMPCDROMCOLLECTION_BASE = 300_u32
  DISPID_WMPSTRINGCOLLECTION_BASE = 400_u32
  DISPID_WMPMEDIACOLLECTION_BASE = 450_u32
  DISPID_WMPPLAYLISTARRAY_BASE = 500_u32
  DISPID_WMPPLAYLISTCOLLECTION_BASE = 550_u32
  DISPID_WMPMEDIA_BASE = 750_u32
  DISPID_WMPNETWORK_BASE = 800_u32
  DISPID_WMPERROR_BASE = 850_u32
  DISPID_WMPERRORITEM_BASE = 900_u32
  DISPID_WMPCLOSEDCAPTION_BASE = 950_u32
  DISPID_WMPDVD_BASE = 1000_u32
  DISPID_WMPMETADATA_BASE = 1050_u32
  DISPID_WMPPLAYERAPP_BASE = 1100_u32
  DISPID_WMPDOWNLOADMANAGER_BASE = 1150_u32
  DISPID_WMPDOWNLOADCOLLECTION_BASE = 1200_u32
  DISPID_WMPDOWNLOADITEM_BASE = 1250_u32
  DISPID_WMPDOWNLOADITEM2_BASE = 1300_u32
  DISPID_WMPQUERY_BASE = 1350_u32
  DISPID_WMPMEDIACOLLECTION2_BASE = 1400_u32
  DISPID_WMPSTRINGCOLLECTION2_BASE = 1450_u32
  CLSID_WMPSkinManager = "b2a7fd52-301f-4348-b93a-638c6de49229"
  CLSID_WMPMediaPluginRegistrar = "5569e7f5-424b-4b93-89ca-79d17924689a"
  WMP_PLUGINTYPE_DSP = "6434baea-4954-498d-abd5-2b07123e1f04"
  WMP_PLUGINTYPE_DSP_OUTOFPROC = "ef29b174-c347-44cc-9a4f-2399118ff38c"
  WMP_PLUGINTYPE_RENDERING = "a8554541-115d-406a-a4c7-51111c330183"
  Kflttimedlevelmaximumfrequency = "22050.0_f32"
  Kflttimedlevelminimumfrequency = "20.0_f32"
  G_szcontentpartnerinfo_loginstate = "LoginState"
  G_szcontentpartnerinfo_mediaplayeraccounttype = "MediaPlayerAccountType"
  G_szcontentpartnerinfo_accounttype = "AccountType"
  G_szcontentpartnerinfo_hascachedcredentials = "HasCachedCredentials"
  G_szcontentpartnerinfo_licenserefreshadvancewarning = "LicenseRefreshAdvanceWarning"
  G_szcontentpartnerinfo_purchasedtrackrequiresredownload = "PurchasedTrackRequiresReDownload"
  G_szcontentpartnerinfo_maximumtrackpurchaseperpurchase = "MaximumNumberOfTracksPerPurchase"
  G_szcontentpartnerinfo_accountbalance = "AccountBalance"
  G_szcontentpartnerinfo_username = "UserName"
  G_szmediaplayertask_burn = "Burn"
  G_szmediaplayertask_browse = "Browse"
  G_szmediaplayertask_sync = "Sync"
  G_sziteminfo_popupurl = "Popup"
  G_sziteminfo_authenticationsuccessurl = "AuthenticationSuccessURL"
  G_sziteminfo_loginfailureurl = "LoginFailureURL"
  G_sziteminfo_htmlviewurl = "HTMLViewURL"
  G_sziteminfo_popupcaption = "PopupCaption"
  G_sziteminfo_altloginurl = "ALTLoginURL"
  G_sziteminfo_altlogincaption = "ALTLoginCaption"
  G_sziteminfo_forgetpasswordurl = "ForgotPassword"
  G_sziteminfo_createaccounturl = "CreateAccount"
  G_sziteminfo_artistarturl = "ArtistArt"
  G_sziteminfo_albumarturl = "AlbumArt"
  G_sziteminfo_listarturl = "ListArt"
  G_sziteminfo_genrearturl = "GenreArt"
  G_sziteminfo_subgenrearturl = "SubGenreArt"
  G_sziteminfo_radioarturl = "RadioArt"
  G_sziteminfo_treelisticonurl = "CPListIDIcon"
  G_sziteminfo_errordescription = "CPErrorDescription"
  G_sziteminfo_errorurl = "CPErrorURL"
  G_sziteminfo_errorurllinktext = "CPErrorURLLinkText"
  G_szunknownlocation = "UnknownLocation"
  G_szrootlocation = "RootLocation"
  G_szflyoutmenu = "FlyoutMenu"
  G_szonlinestore = "OnlineStore"
  G_szvideorecent = "VideoRecent"
  G_szvideoroot = "VideoRoot"
  G_szcplistid = "CPListID"
  G_szallcplistids = "AllCPListIDs"
  G_szcptrackid = "CPTrackID"
  G_szallcptrackids = "AllCPTrackIDs"
  G_szcpartistid = "CPArtistID"
  G_szallcpartistids = "AllCPArtistIDs"
  G_szcpalbumid = "CPAlbumID"
  G_szallcpalbumids = "AllCPAlbumIDs"
  G_szcpgenreid = "CPGenreID"
  G_szallcpgenreids = "AllCPGenreIDs"
  G_szcpalbumsubgenreid = "CPAlbumSubGenreID"
  G_szallcpalbumsubgenreids = "AllCPAlbumSubGenreIDs"
  G_szreleasedateyear = "ReleaseDateYear"
  G_szallreleasedateyears = "AllReleaseDateYears"
  G_szcpradioid = "CPRadioID"
  G_szallcpradioids = "AllCPRadioIDs"
  G_szauthor = "Author"
  G_szallauthors = "AllAuthors"
  G_szwmparentalrating = "WMParentalRating"
  G_szallwmparentalratings = "AllWMParentalRatings"
  G_szallusereffectiveratingstarss = "AllUserEffectiveRatingStarss"
  G_szusereffectiveratingstars = "UserEffectiveRatingStars"
  G_szuserplaylist = "UserPlaylist"
  G_szviewmode_report = "ViewModeReport"
  G_szviewmode_details = "ViewModeDetails"
  G_szviewmode_icon = "ViewModeIcon"
  G_szviewmode_tile = "ViewModeTile"
  G_szviewmode_orderedlist = "ViewModeOrderedList"
  G_szcontentprice_unknown = "PriceUnknown"
  G_szcontentprice_cannotbuy = "PriceCannotBuy"
  G_szcontentprice_free = "PriceFree"
  G_szrefreshlicenseplay = "RefreshForPlay"
  G_szrefreshlicenseburn = "RefreshForBurn"
  G_szrefreshlicensesync = "RefreshForSync"
  G_szverifypermissionsync = "VerifyPermissionSync"
  G_szstationevent_started = "TrackStarted"
  G_szstationevent_complete = "TrackComplete"
  G_szstationevent_skipped = "TrackSkipped"
  WMProfile_V40_DialUpMBR = "fd7f47f1-72a6-45a4-80f0-3aecefc32c07"
  WMProfile_V40_IntranetMBR = "82cd3321-a94a-4ffc-9c2b-092c10ca16e7"
  WMProfile_V40_2856100MBR = "5a1c2206-dc5e-4186-beb2-4c5a994b132e"
  WMProfile_V40_6VoiceAudio = "d508978a-11a0-4d15-b0da-acdc99d4f890"
  WMProfile_V40_16AMRadio = "0f4be81f-d57d-41e1-b2e3-2fad986bfec2"
  WMProfile_V40_288FMRadioMono = "7fa57fc8-6ea4-4645-8abf-b6e5a8f814a1"
  WMProfile_V40_288FMRadioStereo = "22fcf466-aa40-431f-a289-06d0ea1a1e40"
  WMProfile_V40_56DialUpStereo = "e8026f87-e905-4594-a3c7-00d00041d1d9"
  WMProfile_V40_64Audio = "4820b3f7-cbec-41dc-9391-78598714c8e5"
  WMProfile_V40_96Audio = "0efa0ee3-9e64-41e2-837f-3c0038f327ba"
  WMProfile_V40_128Audio = "93ddbe12-13dc-4e32-a35e-40378e34279a"
  WMProfile_V40_288VideoVoice = "bb2bc274-0eb6-4da9-b550-ecf7f2b9948f"
  WMProfile_V40_288VideoAudio = "ac617f2d-6cbe-4e84-8e9a-ce151a12a354"
  WMProfile_V40_288VideoWebServer = "abf2f00d-d555-4815-94ce-8275f3a70bfe"
  WMProfile_V40_56DialUpVideo = "e21713bb-652f-4dab-99de-71e04400270f"
  WMProfile_V40_56DialUpVideoWebServer = "b756ff10-520f-4749-a399-b780e2fc9250"
  WMProfile_V40_100Video = "8f99ddd8-6684-456b-a0a3-33e1316895f0"
  WMProfile_V40_250Video = "541841c3-9339-4f7b-9a22-b11540894e42"
  WMProfile_V40_512Video = "70440e6d-c4ef-4f84-8cd0-d5c28686e784"
  WMProfile_V40_1MBVideo = "b4482a4c-cc17-4b07-a94e-9818d5e0f13f"
  WMProfile_V40_3MBVideo = "55374ac0-309b-4396-b88f-e6e292113f28"
  WMProfile_V70_DialUpMBR = "5b16e74b-4068-45b5-b80e-7bf8c80d2c2f"
  WMProfile_V70_IntranetMBR = "045880dc-34b6-4ca9-a326-73557ed143f3"
  WMProfile_V70_2856100MBR = "07df7a25-3fe2-4a5b-8b1e-348b0721ca70"
  WMProfile_V70_288VideoVoice = "b952f38e-7dbc-4533-a9ca-b00b1c6e9800"
  WMProfile_V70_288VideoAudio = "58bba0ee-896a-4948-9953-85b736f83947"
  WMProfile_V70_288VideoWebServer = "70a32e2b-e2df-4ebd-9105-d9ca194a2d50"
  WMProfile_V70_56VideoWebServer = "def99e40-57bc-4ab3-b2d1-b6e3caf64257"
  WMProfile_V70_64VideoISDN = "c2b7a7e9-7b8e-4992-a1a1-068217a3b311"
  WMProfile_V70_100Video = "d9f3c932-5ea9-4c6d-89b4-2686e515426e"
  WMProfile_V70_256Video = "afe69b3a-403f-4a1b-8007-0e21cfb3df84"
  WMProfile_V70_384Video = "f3d45fbb-8782-44df-97c6-8678e2f9b13d"
  WMProfile_V70_768Video = "0326ebb6-f76e-4964-b0db-e729978d35ee"
  WMProfile_V70_1500Video = "0b89164a-5490-4686-9e37-5a80884e5146"
  WMProfile_V70_2000Video = "aa980124-bf10-4e4f-9afd-4329a7395cff"
  WMProfile_V70_700FilmContentVideo = "7a747920-2449-4d76-99cb-fdb0c90484d4"
  WMProfile_V70_1500FilmContentVideo = "f6a5f6df-ee3f-434c-a433-523ce55f516b"
  WMProfile_V70_6VoiceAudio = "eaba9fbf-b64f-49b3-aa0c-73fbdd150ad0"
  WMProfile_V70_288FMRadioMono = "c012a833-a03b-44a5-96dc-ed95cc65582d"
  WMProfile_V70_288FMRadioStereo = "e96d67c9-1a39-4dc4-b900-b1184dc83620"
  WMProfile_V70_56DialUpStereo = "674ee767-0949-4fac-875e-f4c9c292013b"
  WMProfile_V70_64AudioISDN = "91dea458-9d60-4212-9c59-d40919c939e4"
  WMProfile_V70_64Audio = "b29cffc6-f131-41db-b5e8-99d8b0b945f4"
  WMProfile_V70_96Audio = "a9d4b819-16cc-4a59-9f37-693dbb0302d6"
  WMProfile_V70_128Audio = "c64cf5da-df45-40d3-8027-de698d68dc66"
  WMProfile_V70_225VideoPDA = "f55ea573-4c02-42b5-9026-a8260c438a9f"
  WMProfile_V70_150VideoPDA = "0f472967-e3c6-4797-9694-f0304c5e2f17"
  WMProfile_V80_255VideoPDA = "feedbcdf-3fac-4c93-ac0d-47941ec72c0b"
  WMProfile_V80_150VideoPDA = "aee16dfa-2c14-4a2f-ad3f-a3034031784f"
  WMProfile_V80_28856VideoMBR = "d66920c4-c21f-4ec8-a0b4-95cf2bd57fc4"
  WMProfile_V80_100768VideoMBR = "5bdb5a0e-979e-47d3-9596-73b386392a55"
  WMProfile_V80_288100VideoMBR = "d8722c69-2419-4b36-b4e0-6e17b60564e5"
  WMProfile_V80_288Video = "3df678d9-1352-4186-bbf8-74f0c19b6ae2"
  WMProfile_V80_56Video = "254e8a96-2612-405c-8039-f0bf725ced7d"
  WMProfile_V80_100Video = "a2e300b4-c2d4-4fc0-b5dd-ecbd948dc0df"
  WMProfile_V80_256Video = "bbc75500-33d2-4466-b86b-122b201cc9ae"
  WMProfile_V80_384Video = "29b00c2b-09a9-48bd-ad09-cdae117d1da7"
  WMProfile_V80_768Video = "74d01102-e71a-4820-8f0d-13d2ec1e4872"
  WMProfile_V80_700NTSCVideo = "c8c2985f-e5d9-4538-9e23-9b21bf78f745"
  WMProfile_V80_1400NTSCVideo = "931d1bee-617a-4bcd-9905-ccd0786683ee"
  WMProfile_V80_384PALVideo = "9227c692-ae62-4f72-a7ea-736062d0e21e"
  WMProfile_V80_700PALVideo = "ec298949-639b-45e2-96fd-4ab32d5919c2"
  WMProfile_V80_288MonoAudio = "7ea3126d-e1ba-4716-89af-f65cee0c0c67"
  WMProfile_V80_288StereoAudio = "7e4cab5c-35dc-45bb-a7c0-19b28070d0cc"
  WMProfile_V80_32StereoAudio = "60907f9f-b352-47e5-b210-0ef1f47e9f9d"
  WMProfile_V80_48StereoAudio = "5ee06be5-492b-480a-8a8f-12f373ecf9d4"
  WMProfile_V80_64StereoAudio = "09bb5bc4-3176-457f-8dd6-3cd919123e2d"
  WMProfile_V80_96StereoAudio = "1fc81930-61f2-436f-9d33-349f2a1c0f10"
  WMProfile_V80_128StereoAudio = "407b9450-8bdc-4ee5-88b8-6f527bd941f2"
  WMProfile_V80_288VideoOnly = "8c45b4c7-4aeb-4f78-a5ec-88420b9dadef"
  WMProfile_V80_56VideoOnly = "6e2a6955-81df-4943-ba50-68a986a708f6"
  WMProfile_V80_FAIRVBRVideo = "3510a862-5850-4886-835f-d78ec6a64042"
  WMProfile_V80_HIGHVBRVideo = "0f10d9d3-3b04-4fb0-a3d3-88d4ac854acc"
  WMProfile_V80_BESTVBRVideo = "048439ba-309c-440e-9cb4-3dcca3756423"
  CLSID_WindowsMediaPlayer = LibC::GUID.new(0x6bf52a52_u32, 0x394a_u16, 0x11d3_u16, StaticArray[0xb1_u8, 0x53_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0xfa_u8, 0xa6_u8])
  CLSID_WMPLib = LibC::GUID.new(0x6bf52a50_u32, 0x394a_u16, 0x11d3_u16, StaticArray[0xb1_u8, 0x53_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0xfa_u8, 0xa6_u8])
  CLSID_WMPRemoteMediaServices = LibC::GUID.new(0xdf333473_u32, 0x2cf7_u16, 0x4be2_u16, StaticArray[0x90_u8, 0x7f_u8, 0x9a_u8, 0xad_u8, 0x56_u8, 0x61_u8, 0x36_u8, 0x4f_u8])
  CLSID_FeedsManager = LibC::GUID.new(0xfaeb54c4_u32, 0xf66f_u16, 0x4806_u16, StaticArray[0x83_u8, 0xa0_u8, 0x80_u8, 0x52_u8, 0x99_u8, 0xf5_u8, 0xe3_u8, 0xad_u8])
  CLSID_FeedFolderWatcher = LibC::GUID.new(0x281001ed_u32, 0x7765_u16, 0x4cb0_u16, StaticArray[0x84_u8, 0xaf_u8, 0xe9_u8, 0xb3_u8, 0x87_u8, 0xaf_u8, 0x1_u8, 0xff_u8])
  CLSID_FeedWatcher = LibC::GUID.new(0x18a6737b_u32, 0xf433_u16, 0x4687_u16, StaticArray[0x89_u8, 0xbc_u8, 0xa1_u8, 0xb4_u8, 0xdf_u8, 0xb9_u8, 0xf1_u8, 0x23_u8])


  enum WMPOpenState : Int32
    Wmposundefined = 0
    Wmposplaylistchanging = 1
    Wmposplaylistlocating = 2
    Wmposplaylistconnecting = 3
    Wmposplaylistloading = 4
    Wmposplaylistopening = 5
    Wmposplaylistopennomedia = 6
    Wmposplaylistchanged = 7
    Wmposmediachanging = 8
    Wmposmedialocating = 9
    Wmposmediaconnecting = 10
    Wmposmedialoading = 11
    Wmposmediaopening = 12
    Wmposmediaopen = 13
    Wmposbegincodecacquisition = 14
    Wmposendcodecacquisition = 15
    Wmposbeginlicenseacquisition = 16
    Wmposendlicenseacquisition = 17
    Wmposbeginindividualization = 18
    Wmposendindividualization = 19
    Wmposmediawaiting = 20
    Wmposopeningunknownurl = 21
  end

  enum WMPPlayState : Int32
    Wmppsundefined = 0
    Wmppsstopped = 1
    Wmppspaused = 2
    Wmppsplaying = 3
    Wmppsscanforward = 4
    Wmppsscanreverse = 5
    Wmppsbuffering = 6
    Wmppswaiting = 7
    Wmppsmediaended = 8
    Wmppstransitioning = 9
    Wmppsready = 10
    Wmppsreconnecting = 11
    Wmppslast = 12
  end

  enum WMPPlaylistChangeEventType : Int32
    Wmplcunknown = 0
    Wmplcclear = 1
    Wmplcinfochange = 2
    Wmplcmove = 3
    Wmplcdelete = 4
    Wmplcinsert = 5
    Wmplcappend = 6
    Wmplcprivate = 7
    Wmplcnamechange = 8
    Wmplcmorph = 9
    Wmplcsort = 10
    Wmplclast = 11
  end

  enum WMPSyncState : Int32
    Wmpssunknown = 0
    Wmpsssynchronizing = 1
    Wmpssstopped = 2
    Wmpssestimating = 3
    Wmpsslast = 4
  end

  enum WMPDeviceStatus : Int32
    Wmpdsunknown = 0
    Wmpdspartnershipexists = 1
    Wmpdspartnershipdeclined = 2
    Wmpdspartnershipanother = 3
    Wmpdsmanualdevice = 4
    Wmpdsnewdevice = 5
    Wmpdslast = 6
  end

  enum WMPRipState : Int32
    Wmprsunknown = 0
    Wmprsripping = 1
    Wmprsstopped = 2
  end

  enum WMPBurnFormat : Int32
    Wmpbfaudiocd = 0
    Wmpbfdatacd = 1
  end

  enum WMPBurnState : Int32
    Wmpbsunknown = 0
    Wmpbsbusy = 1
    Wmpbsready = 2
    Wmpbswaitingfordisc = 3
    Wmpbsrefreshstatuspending = 4
    Wmpbspreparingtoburn = 5
    Wmpbsburning = 6
    Wmpbsstopped = 7
    Wmpbserasing = 8
    Wmpbsdownloading = 9
  end

  enum WMPStringCollectionChangeEventType : Int32
    Wmpsccetunknown = 0
    Wmpsccetinsert = 1
    Wmpsccetchange = 2
    Wmpsccetdelete = 3
    Wmpsccetclear = 4
    Wmpsccetbeginupdates = 5
    Wmpsccetendupdates = 6
  end

  enum WMPLibraryType : Int32
    Wmpltunknown = 0
    Wmpltall = 1
    Wmpltlocal = 2
    Wmpltremote = 3
    Wmpltdisc = 4
    Wmpltportabledevice = 5
  end

  enum WMPFolderScanState : Int32
    Wmpfssunknown = 0
    Wmpfssscanning = 1
    Wmpfssupdating = 2
    Wmpfssstopped = 3
  end

  enum WMPServices_StreamState : Int32
    WMPServices_StreamState_Stop = 0
    WMPServices_StreamState_Pause = 1
    WMPServices_StreamState_Play = 2
  end

  enum WMPPlugin_Caps : Int32
    WMPPlugin_Caps_CannotConvertFormats = 1
  end

  enum FEEDS_BACKGROUNDSYNC_ACTION : Int32
    FBSA_DISABLE = 0
    FBSA_ENABLE = 1
    FBSA_RUNNOW = 2
  end

  enum FEEDS_BACKGROUNDSYNC_STATUS : Int32
    FBSS_DISABLED = 0
    FBSS_ENABLED = 1
  end

  enum FEEDS_EVENTS_SCOPE : Int32
    FES_ALL = 0
    FES_SELF_ONLY = 1
    FES_SELF_AND_CHILDREN_ONLY = 2
  end

  enum FEEDS_EVENTS_MASK : Int32
    FEM_FOLDEREVENTS = 1
    FEM_FEEDEVENTS = 2
  end

  enum FEEDS_XML_SORT_PROPERTY : Int32
    FXSP_NONE = 0
    FXSP_PUBDATE = 1
    FXSP_DOWNLOADTIME = 2
  end

  enum FEEDS_XML_SORT_ORDER : Int32
    FXSO_NONE = 0
    FXSO_ASCENDING = 1
    FXSO_DESCENDING = 2
  end

  enum FEEDS_XML_FILTER_FLAGS : Int32
    FXFF_ALL = 0
    FXFF_UNREAD = 1
    FXFF_READ = 2
  end

  enum FEEDS_XML_INCLUDE_FLAGS : Int32
    FXIF_NONE = 0
    FXIF_CF_EXTENSIONS = 1
  end

  enum FEEDS_DOWNLOAD_STATUS : Int32
    FDS_NONE = 0
    FDS_PENDING = 1
    FDS_DOWNLOADING = 2
    FDS_DOWNLOADED = 3
    FDS_DOWNLOAD_FAILED = 4
  end

  enum FEEDS_SYNC_SETTING : Int32
    FSS_DEFAULT = 0
    FSS_INTERVAL = 1
    FSS_MANUAL = 2
    FSS_SUGGESTED = 3
  end

  enum FEEDS_DOWNLOAD_ERROR : Int32
    FDE_NONE = 0
    FDE_DOWNLOAD_FAILED = 1
    FDE_INVALID_FEED_FORMAT = 2
    FDE_NORMALIZATION_FAILED = 3
    FDE_PERSISTENCE_FAILED = 4
    FDE_DOWNLOAD_BLOCKED = 5
    FDE_CANCELED = 6
    FDE_UNSUPPORTED_AUTH = 7
    FDE_BACKGROUND_DOWNLOAD_DISABLED = 8
    FDE_NOT_EXIST = 9
    FDE_UNSUPPORTED_MSXML = 10
    FDE_UNSUPPORTED_DTD = 11
    FDE_DOWNLOAD_SIZE_LIMIT_EXCEEDED = 12
    FDE_ACCESS_DENIED = 13
    FDE_AUTH_FAILED = 14
    FDE_INVALID_AUTH = 15
  end

  enum FEEDS_EVENTS_ITEM_COUNT_FLAGS : Int32
    FEICF_READ_ITEM_COUNT_CHANGED = 1
    FEICF_UNREAD_ITEM_COUNT_CHANGED = 2
  end

  enum FEEDS_ERROR_CODE : Int32
    FEC_E_ERRORBASE = -1073479168
    FEC_E_INVALIDMSXMLPROPERTY = -1073479168
    FEC_E_DOWNLOADSIZELIMITEXCEEDED = -1073479167
  end

  enum PlayerState : Int32
    Stop_state = 0
    Pause_state = 1
    Play_state = 2
  end

  enum WMPPartnerNotification : Int32
    Wmpsnbackgroundprocessingbegin = 1
    Wmpsnbackgroundprocessingend = 2
    Wmpsncatalogdownloadfailure = 3
    Wmpsncatalogdownloadcomplete = 4
  end

  enum WMPCallbackNotification : Int32
    Wmpcnloginstatechange = 1
    Wmpcnauthresult = 2
    Wmpcnlicenseupdated = 3
    Wmpcnnewcatalogavailable = 4
    Wmpcnnewpluginavailable = 5
    Wmpcndisableradioskipping = 6
  end

  enum WMPTaskType : Int32
    Wmpttbrowse = 1
    Wmpttsync = 2
    Wmpttburn = 3
    Wmpttcurrent = 4
  end

  enum WMPTransactionType : Int32
    Wmpttnotransaction = 0
    Wmpttdownload = 1
    Wmpttbuy = 2
  end

  enum WMPTemplateSize : Int32
    Wmptssmall = 0
    Wmptsmedium = 1
    Wmptslarge = 2
  end

  enum WMPStreamingType : Int32
    Wmpstunknown = 0
    Wmpstmusic = 1
    Wmpstvideo = 2
    Wmpstradio = 3
  end

  enum WMPAccountType : Int32
    Wmpatbuyonly = 1
    Wmpatsubscription = 2
    Wmpatjanus = 3
  end

  enum WMPSubscriptionServiceEvent : Int32
    Wmpssecurrentbegin = 1
    Wmpssecurrentend = 2
    Wmpssefullbegin = 3
    Wmpssefullend = 4
  end

  enum WMPSubscriptionDownloadState : Int32
    Wmpsdlsdownloading = 0
    Wmpsdlspaused = 1
    Wmpsdlsprocessing = 2
    Wmpsdlscompleted = 3
    Wmpsdlscancelled = 4
  end

  struct TimedLevel
    frequency : UInt8[2048]*
    waveform : UInt8[2048]*
    state : Int32
    time_stamp : Int64
  end
  struct WMPContextMenuInfo
    dw_id : UInt32
    bstr_menu_text : UInt8*
    bstr_help_text : UInt8*
  end
  struct WMP_WMDM_METADATA_ROUND_TRIP_PC2DEVICE
    dw_changes_since_transaction_id : UInt32
    dw_result_set_starting_index : UInt32
  end
  struct WMP_WMDM_METADATA_ROUND_TRIP_DEVICE2PC
    dw_current_transaction_id : UInt32
    dw_returned_object_count : UInt32
    dw_unretrieved_object_count : UInt32
    dw_deleted_object_starting_offset : UInt32
    dw_flags : UInt32
    ws_object_pathname_list : Char[0]*
  end


  struct IWMPErrorItemVTbl
    query_interface : Proc(IWMPErrorItem*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPErrorItem*, UInt32)
    release : Proc(IWMPErrorItem*, UInt32)
    get_type_info_count : Proc(IWMPErrorItem*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPErrorItem*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPErrorItem*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPErrorItem*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_error_code : Proc(IWMPErrorItem*, Int32*, HRESULT)
    get_error_description : Proc(IWMPErrorItem*, UInt8**, HRESULT)
    get_error_context : Proc(IWMPErrorItem*, VARIANT*, HRESULT)
    get_remedy : Proc(IWMPErrorItem*, Int32*, HRESULT)
    get_custom_url : Proc(IWMPErrorItem*, UInt8**, HRESULT)
  end

  IWMPErrorItem_GUID = "3614c646-3b3b-4de7-a81e-930e3f2127b3"
  IID_IWMPErrorItem = LibC::GUID.new(0x3614c646_u32, 0x3b3b_u16, 0x4de7_u16, StaticArray[0xa8_u8, 0x1e_u8, 0x93_u8, 0xe_u8, 0x3f_u8, 0x21_u8, 0x27_u8, 0xb3_u8])
  struct IWMPErrorItem
    lpVtbl : IWMPErrorItemVTbl*
  end

  struct IWMPErrorVTbl
    query_interface : Proc(IWMPError*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPError*, UInt32)
    release : Proc(IWMPError*, UInt32)
    get_type_info_count : Proc(IWMPError*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPError*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPError*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPError*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    clear_error_queue : Proc(IWMPError*, HRESULT)
    get_error_count : Proc(IWMPError*, Int32*, HRESULT)
    get_item : Proc(IWMPError*, Int32, IWMPErrorItem*, HRESULT)
    web_help : Proc(IWMPError*, HRESULT)
  end

  IWMPError_GUID = "a12dcf7d-14ab-4c1b-a8cd-63909f06025b"
  IID_IWMPError = LibC::GUID.new(0xa12dcf7d_u32, 0x14ab_u16, 0x4c1b_u16, StaticArray[0xa8_u8, 0xcd_u8, 0x63_u8, 0x90_u8, 0x9f_u8, 0x6_u8, 0x2_u8, 0x5b_u8])
  struct IWMPError
    lpVtbl : IWMPErrorVTbl*
  end

  struct IWMPMediaVTbl
    query_interface : Proc(IWMPMedia*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPMedia*, UInt32)
    release : Proc(IWMPMedia*, UInt32)
    get_type_info_count : Proc(IWMPMedia*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPMedia*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPMedia*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPMedia*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_is_identical : Proc(IWMPMedia*, IWMPMedia, Int16*, HRESULT)
    get_source_url : Proc(IWMPMedia*, UInt8**, HRESULT)
    get_name : Proc(IWMPMedia*, UInt8**, HRESULT)
    put_name : Proc(IWMPMedia*, UInt8*, HRESULT)
    get_image_source_width : Proc(IWMPMedia*, Int32*, HRESULT)
    get_image_source_height : Proc(IWMPMedia*, Int32*, HRESULT)
    get_marker_count : Proc(IWMPMedia*, Int32*, HRESULT)
    get_marker_time : Proc(IWMPMedia*, Int32, Float64*, HRESULT)
    get_marker_name : Proc(IWMPMedia*, Int32, UInt8**, HRESULT)
    get_duration : Proc(IWMPMedia*, Float64*, HRESULT)
    get_duration_string : Proc(IWMPMedia*, UInt8**, HRESULT)
    get_attribute_count : Proc(IWMPMedia*, Int32*, HRESULT)
    get_attribute_name : Proc(IWMPMedia*, Int32, UInt8**, HRESULT)
    get_item_info : Proc(IWMPMedia*, UInt8*, UInt8**, HRESULT)
    set_item_info : Proc(IWMPMedia*, UInt8*, UInt8*, HRESULT)
    get_item_info_by_atom : Proc(IWMPMedia*, Int32, UInt8**, HRESULT)
    is_member_of : Proc(IWMPMedia*, IWMPPlaylist, Int16*, HRESULT)
    is_read_only_item : Proc(IWMPMedia*, UInt8*, Int16*, HRESULT)
  end

  IWMPMedia_GUID = "94d55e95-3fac-11d3-b155-00c04f79faa6"
  IID_IWMPMedia = LibC::GUID.new(0x94d55e95_u32, 0x3fac_u16, 0x11d3_u16, StaticArray[0xb1_u8, 0x55_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0xfa_u8, 0xa6_u8])
  struct IWMPMedia
    lpVtbl : IWMPMediaVTbl*
  end

  struct IWMPControlsVTbl
    query_interface : Proc(IWMPControls*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPControls*, UInt32)
    release : Proc(IWMPControls*, UInt32)
    get_type_info_count : Proc(IWMPControls*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPControls*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPControls*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPControls*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_is_available : Proc(IWMPControls*, UInt8*, Int16*, HRESULT)
    play : Proc(IWMPControls*, HRESULT)
    stop : Proc(IWMPControls*, HRESULT)
    pause : Proc(IWMPControls*, HRESULT)
    fast_forward : Proc(IWMPControls*, HRESULT)
    fast_reverse : Proc(IWMPControls*, HRESULT)
    get_current_position : Proc(IWMPControls*, Float64*, HRESULT)
    put_current_position : Proc(IWMPControls*, Float64, HRESULT)
    get_current_position_string : Proc(IWMPControls*, UInt8**, HRESULT)
    next : Proc(IWMPControls*, HRESULT)
    previous : Proc(IWMPControls*, HRESULT)
    get_current_item : Proc(IWMPControls*, IWMPMedia*, HRESULT)
    put_current_item : Proc(IWMPControls*, IWMPMedia, HRESULT)
    get_current_marker : Proc(IWMPControls*, Int32*, HRESULT)
    put_current_marker : Proc(IWMPControls*, Int32, HRESULT)
    play_item : Proc(IWMPControls*, IWMPMedia, HRESULT)
  end

  IWMPControls_GUID = "74c09e02-f828-11d2-a74b-00a0c905f36e"
  IID_IWMPControls = LibC::GUID.new(0x74c09e02_u32, 0xf828_u16, 0x11d2_u16, StaticArray[0xa7_u8, 0x4b_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x5_u8, 0xf3_u8, 0x6e_u8])
  struct IWMPControls
    lpVtbl : IWMPControlsVTbl*
  end

  struct IWMPSettingsVTbl
    query_interface : Proc(IWMPSettings*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPSettings*, UInt32)
    release : Proc(IWMPSettings*, UInt32)
    get_type_info_count : Proc(IWMPSettings*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPSettings*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPSettings*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPSettings*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_is_available : Proc(IWMPSettings*, UInt8*, Int16*, HRESULT)
    get_auto_start : Proc(IWMPSettings*, Int16*, HRESULT)
    put_auto_start : Proc(IWMPSettings*, Int16, HRESULT)
    get_base_url : Proc(IWMPSettings*, UInt8**, HRESULT)
    put_base_url : Proc(IWMPSettings*, UInt8*, HRESULT)
    get_default_frame : Proc(IWMPSettings*, UInt8**, HRESULT)
    put_default_frame : Proc(IWMPSettings*, UInt8*, HRESULT)
    get_invoke_ur_ls : Proc(IWMPSettings*, Int16*, HRESULT)
    put_invoke_ur_ls : Proc(IWMPSettings*, Int16, HRESULT)
    get_mute : Proc(IWMPSettings*, Int16*, HRESULT)
    put_mute : Proc(IWMPSettings*, Int16, HRESULT)
    get_play_count : Proc(IWMPSettings*, Int32*, HRESULT)
    put_play_count : Proc(IWMPSettings*, Int32, HRESULT)
    get_rate : Proc(IWMPSettings*, Float64*, HRESULT)
    put_rate : Proc(IWMPSettings*, Float64, HRESULT)
    get_balance : Proc(IWMPSettings*, Int32*, HRESULT)
    put_balance : Proc(IWMPSettings*, Int32, HRESULT)
    get_volume : Proc(IWMPSettings*, Int32*, HRESULT)
    put_volume : Proc(IWMPSettings*, Int32, HRESULT)
    get_mode : Proc(IWMPSettings*, UInt8*, Int16*, HRESULT)
    set_mode : Proc(IWMPSettings*, UInt8*, Int16, HRESULT)
    get_enable_error_dialogs : Proc(IWMPSettings*, Int16*, HRESULT)
    put_enable_error_dialogs : Proc(IWMPSettings*, Int16, HRESULT)
  end

  IWMPSettings_GUID = "9104d1ab-80c9-4fed-abf0-2e6417a6df14"
  IID_IWMPSettings = LibC::GUID.new(0x9104d1ab_u32, 0x80c9_u16, 0x4fed_u16, StaticArray[0xab_u8, 0xf0_u8, 0x2e_u8, 0x64_u8, 0x17_u8, 0xa6_u8, 0xdf_u8, 0x14_u8])
  struct IWMPSettings
    lpVtbl : IWMPSettingsVTbl*
  end

  struct IWMPClosedCaptionVTbl
    query_interface : Proc(IWMPClosedCaption*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPClosedCaption*, UInt32)
    release : Proc(IWMPClosedCaption*, UInt32)
    get_type_info_count : Proc(IWMPClosedCaption*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPClosedCaption*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPClosedCaption*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPClosedCaption*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_sami_style : Proc(IWMPClosedCaption*, UInt8**, HRESULT)
    put_sami_style : Proc(IWMPClosedCaption*, UInt8*, HRESULT)
    get_sami_lang : Proc(IWMPClosedCaption*, UInt8**, HRESULT)
    put_sami_lang : Proc(IWMPClosedCaption*, UInt8*, HRESULT)
    get_sami_file_name : Proc(IWMPClosedCaption*, UInt8**, HRESULT)
    put_sami_file_name : Proc(IWMPClosedCaption*, UInt8*, HRESULT)
    get_captioning_id : Proc(IWMPClosedCaption*, UInt8**, HRESULT)
    put_captioning_id : Proc(IWMPClosedCaption*, UInt8*, HRESULT)
  end

  IWMPClosedCaption_GUID = "4f2df574-c588-11d3-9ed0-00c04fb6e937"
  IID_IWMPClosedCaption = LibC::GUID.new(0x4f2df574_u32, 0xc588_u16, 0x11d3_u16, StaticArray[0x9e_u8, 0xd0_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xe9_u8, 0x37_u8])
  struct IWMPClosedCaption
    lpVtbl : IWMPClosedCaptionVTbl*
  end

  struct IWMPPlaylistVTbl
    query_interface : Proc(IWMPPlaylist*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPPlaylist*, UInt32)
    release : Proc(IWMPPlaylist*, UInt32)
    get_type_info_count : Proc(IWMPPlaylist*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPPlaylist*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPPlaylist*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPPlaylist*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(IWMPPlaylist*, Int32*, HRESULT)
    get_name : Proc(IWMPPlaylist*, UInt8**, HRESULT)
    put_name : Proc(IWMPPlaylist*, UInt8*, HRESULT)
    get_attribute_count : Proc(IWMPPlaylist*, Int32*, HRESULT)
    get_attribute_name : Proc(IWMPPlaylist*, Int32, UInt8**, HRESULT)
    get_item : Proc(IWMPPlaylist*, Int32, IWMPMedia*, HRESULT)
    get_item_info : Proc(IWMPPlaylist*, UInt8*, UInt8**, HRESULT)
    set_item_info : Proc(IWMPPlaylist*, UInt8*, UInt8*, HRESULT)
    get_is_identical : Proc(IWMPPlaylist*, IWMPPlaylist, Int16*, HRESULT)
    clear : Proc(IWMPPlaylist*, HRESULT)
    insert_item : Proc(IWMPPlaylist*, Int32, IWMPMedia, HRESULT)
    append_item : Proc(IWMPPlaylist*, IWMPMedia, HRESULT)
    remove_item : Proc(IWMPPlaylist*, IWMPMedia, HRESULT)
    move_item : Proc(IWMPPlaylist*, Int32, Int32, HRESULT)
  end

  IWMPPlaylist_GUID = "d5f0f4f1-130c-11d3-b14e-00c04f79faa6"
  IID_IWMPPlaylist = LibC::GUID.new(0xd5f0f4f1_u32, 0x130c_u16, 0x11d3_u16, StaticArray[0xb1_u8, 0x4e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0xfa_u8, 0xa6_u8])
  struct IWMPPlaylist
    lpVtbl : IWMPPlaylistVTbl*
  end

  struct IWMPCdromVTbl
    query_interface : Proc(IWMPCdrom*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPCdrom*, UInt32)
    release : Proc(IWMPCdrom*, UInt32)
    get_type_info_count : Proc(IWMPCdrom*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPCdrom*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPCdrom*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPCdrom*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_drive_specifier : Proc(IWMPCdrom*, UInt8**, HRESULT)
    get_playlist : Proc(IWMPCdrom*, IWMPPlaylist*, HRESULT)
    eject : Proc(IWMPCdrom*, HRESULT)
  end

  IWMPCdrom_GUID = "cfab6e98-8730-11d3-b388-00c04f68574b"
  IID_IWMPCdrom = LibC::GUID.new(0xcfab6e98_u32, 0x8730_u16, 0x11d3_u16, StaticArray[0xb3_u8, 0x88_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x68_u8, 0x57_u8, 0x4b_u8])
  struct IWMPCdrom
    lpVtbl : IWMPCdromVTbl*
  end

  struct IWMPCdromCollectionVTbl
    query_interface : Proc(IWMPCdromCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPCdromCollection*, UInt32)
    release : Proc(IWMPCdromCollection*, UInt32)
    get_type_info_count : Proc(IWMPCdromCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPCdromCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPCdromCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPCdromCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(IWMPCdromCollection*, Int32*, HRESULT)
    item : Proc(IWMPCdromCollection*, Int32, IWMPCdrom*, HRESULT)
    get_by_drive_specifier : Proc(IWMPCdromCollection*, UInt8*, IWMPCdrom*, HRESULT)
  end

  IWMPCdromCollection_GUID = "ee4c8fe2-34b2-11d3-a3bf-006097c9b344"
  IID_IWMPCdromCollection = LibC::GUID.new(0xee4c8fe2_u32, 0x34b2_u16, 0x11d3_u16, StaticArray[0xa3_u8, 0xbf_u8, 0x0_u8, 0x60_u8, 0x97_u8, 0xc9_u8, 0xb3_u8, 0x44_u8])
  struct IWMPCdromCollection
    lpVtbl : IWMPCdromCollectionVTbl*
  end

  struct IWMPStringCollectionVTbl
    query_interface : Proc(IWMPStringCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPStringCollection*, UInt32)
    release : Proc(IWMPStringCollection*, UInt32)
    get_type_info_count : Proc(IWMPStringCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPStringCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPStringCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPStringCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(IWMPStringCollection*, Int32*, HRESULT)
    item : Proc(IWMPStringCollection*, Int32, UInt8**, HRESULT)
  end

  IWMPStringCollection_GUID = "4a976298-8c0d-11d3-b389-00c04f68574b"
  IID_IWMPStringCollection = LibC::GUID.new(0x4a976298_u32, 0x8c0d_u16, 0x11d3_u16, StaticArray[0xb3_u8, 0x89_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x68_u8, 0x57_u8, 0x4b_u8])
  struct IWMPStringCollection
    lpVtbl : IWMPStringCollectionVTbl*
  end

  struct IWMPMediaCollectionVTbl
    query_interface : Proc(IWMPMediaCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPMediaCollection*, UInt32)
    release : Proc(IWMPMediaCollection*, UInt32)
    get_type_info_count : Proc(IWMPMediaCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPMediaCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPMediaCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPMediaCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    add : Proc(IWMPMediaCollection*, UInt8*, IWMPMedia*, HRESULT)
    get_all : Proc(IWMPMediaCollection*, IWMPPlaylist*, HRESULT)
    get_by_name : Proc(IWMPMediaCollection*, UInt8*, IWMPPlaylist*, HRESULT)
    get_by_genre : Proc(IWMPMediaCollection*, UInt8*, IWMPPlaylist*, HRESULT)
    get_by_author : Proc(IWMPMediaCollection*, UInt8*, IWMPPlaylist*, HRESULT)
    get_by_album : Proc(IWMPMediaCollection*, UInt8*, IWMPPlaylist*, HRESULT)
    get_by_attribute : Proc(IWMPMediaCollection*, UInt8*, UInt8*, IWMPPlaylist*, HRESULT)
    remove : Proc(IWMPMediaCollection*, IWMPMedia, Int16, HRESULT)
    get_attribute_string_collection : Proc(IWMPMediaCollection*, UInt8*, UInt8*, IWMPStringCollection*, HRESULT)
    get_media_atom : Proc(IWMPMediaCollection*, UInt8*, Int32*, HRESULT)
    set_deleted : Proc(IWMPMediaCollection*, IWMPMedia, Int16, HRESULT)
    is_deleted : Proc(IWMPMediaCollection*, IWMPMedia, Int16*, HRESULT)
  end

  IWMPMediaCollection_GUID = "8363bc22-b4b4-4b19-989d-1cd765749dd1"
  IID_IWMPMediaCollection = LibC::GUID.new(0x8363bc22_u32, 0xb4b4_u16, 0x4b19_u16, StaticArray[0x98_u8, 0x9d_u8, 0x1c_u8, 0xd7_u8, 0x65_u8, 0x74_u8, 0x9d_u8, 0xd1_u8])
  struct IWMPMediaCollection
    lpVtbl : IWMPMediaCollectionVTbl*
  end

  struct IWMPPlaylistArrayVTbl
    query_interface : Proc(IWMPPlaylistArray*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPPlaylistArray*, UInt32)
    release : Proc(IWMPPlaylistArray*, UInt32)
    get_type_info_count : Proc(IWMPPlaylistArray*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPPlaylistArray*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPPlaylistArray*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPPlaylistArray*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(IWMPPlaylistArray*, Int32*, HRESULT)
    item : Proc(IWMPPlaylistArray*, Int32, IWMPPlaylist*, HRESULT)
  end

  IWMPPlaylistArray_GUID = "679409c0-99f7-11d3-9fb7-00105aa620bb"
  IID_IWMPPlaylistArray = LibC::GUID.new(0x679409c0_u32, 0x99f7_u16, 0x11d3_u16, StaticArray[0x9f_u8, 0xb7_u8, 0x0_u8, 0x10_u8, 0x5a_u8, 0xa6_u8, 0x20_u8, 0xbb_u8])
  struct IWMPPlaylistArray
    lpVtbl : IWMPPlaylistArrayVTbl*
  end

  struct IWMPPlaylistCollectionVTbl
    query_interface : Proc(IWMPPlaylistCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPPlaylistCollection*, UInt32)
    release : Proc(IWMPPlaylistCollection*, UInt32)
    get_type_info_count : Proc(IWMPPlaylistCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPPlaylistCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPPlaylistCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPPlaylistCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    new_playlist : Proc(IWMPPlaylistCollection*, UInt8*, IWMPPlaylist*, HRESULT)
    get_all : Proc(IWMPPlaylistCollection*, IWMPPlaylistArray*, HRESULT)
    get_by_name : Proc(IWMPPlaylistCollection*, UInt8*, IWMPPlaylistArray*, HRESULT)
    remove : Proc(IWMPPlaylistCollection*, IWMPPlaylist, HRESULT)
    set_deleted : Proc(IWMPPlaylistCollection*, IWMPPlaylist, Int16, HRESULT)
    is_deleted : Proc(IWMPPlaylistCollection*, IWMPPlaylist, Int16*, HRESULT)
    import_playlist : Proc(IWMPPlaylistCollection*, IWMPPlaylist, IWMPPlaylist*, HRESULT)
  end

  IWMPPlaylistCollection_GUID = "10a13217-23a7-439b-b1c0-d847c79b7774"
  IID_IWMPPlaylistCollection = LibC::GUID.new(0x10a13217_u32, 0x23a7_u16, 0x439b_u16, StaticArray[0xb1_u8, 0xc0_u8, 0xd8_u8, 0x47_u8, 0xc7_u8, 0x9b_u8, 0x77_u8, 0x74_u8])
  struct IWMPPlaylistCollection
    lpVtbl : IWMPPlaylistCollectionVTbl*
  end

  struct IWMPNetworkVTbl
    query_interface : Proc(IWMPNetwork*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPNetwork*, UInt32)
    release : Proc(IWMPNetwork*, UInt32)
    get_type_info_count : Proc(IWMPNetwork*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPNetwork*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPNetwork*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPNetwork*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_band_width : Proc(IWMPNetwork*, Int32*, HRESULT)
    get_recovered_packets : Proc(IWMPNetwork*, Int32*, HRESULT)
    get_source_protocol : Proc(IWMPNetwork*, UInt8**, HRESULT)
    get_received_packets : Proc(IWMPNetwork*, Int32*, HRESULT)
    get_lost_packets : Proc(IWMPNetwork*, Int32*, HRESULT)
    get_reception_quality : Proc(IWMPNetwork*, Int32*, HRESULT)
    get_buffering_count : Proc(IWMPNetwork*, Int32*, HRESULT)
    get_buffering_progress : Proc(IWMPNetwork*, Int32*, HRESULT)
    get_buffering_time : Proc(IWMPNetwork*, Int32*, HRESULT)
    put_buffering_time : Proc(IWMPNetwork*, Int32, HRESULT)
    get_frame_rate : Proc(IWMPNetwork*, Int32*, HRESULT)
    get_max_bit_rate : Proc(IWMPNetwork*, Int32*, HRESULT)
    get_bit_rate : Proc(IWMPNetwork*, Int32*, HRESULT)
    get_proxy_settings : Proc(IWMPNetwork*, UInt8*, Int32*, HRESULT)
    set_proxy_settings : Proc(IWMPNetwork*, UInt8*, Int32, HRESULT)
    get_proxy_name : Proc(IWMPNetwork*, UInt8*, UInt8**, HRESULT)
    set_proxy_name : Proc(IWMPNetwork*, UInt8*, UInt8*, HRESULT)
    get_proxy_port : Proc(IWMPNetwork*, UInt8*, Int32*, HRESULT)
    set_proxy_port : Proc(IWMPNetwork*, UInt8*, Int32, HRESULT)
    get_proxy_exception_list : Proc(IWMPNetwork*, UInt8*, UInt8**, HRESULT)
    set_proxy_exception_list : Proc(IWMPNetwork*, UInt8*, UInt8*, HRESULT)
    get_proxy_bypass_for_local : Proc(IWMPNetwork*, UInt8*, Int16*, HRESULT)
    set_proxy_bypass_for_local : Proc(IWMPNetwork*, UInt8*, Int16, HRESULT)
    get_max_bandwidth : Proc(IWMPNetwork*, Int32*, HRESULT)
    put_max_bandwidth : Proc(IWMPNetwork*, Int32, HRESULT)
    get_download_progress : Proc(IWMPNetwork*, Int32*, HRESULT)
    get_encoded_frame_rate : Proc(IWMPNetwork*, Int32*, HRESULT)
    get_frames_skipped : Proc(IWMPNetwork*, Int32*, HRESULT)
  end

  IWMPNetwork_GUID = "ec21b779-edef-462d-bba4-ad9dde2b29a7"
  IID_IWMPNetwork = LibC::GUID.new(0xec21b779_u32, 0xedef_u16, 0x462d_u16, StaticArray[0xbb_u8, 0xa4_u8, 0xad_u8, 0x9d_u8, 0xde_u8, 0x2b_u8, 0x29_u8, 0xa7_u8])
  struct IWMPNetwork
    lpVtbl : IWMPNetworkVTbl*
  end

  struct IWMPCoreVTbl
    query_interface : Proc(IWMPCore*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPCore*, UInt32)
    release : Proc(IWMPCore*, UInt32)
    get_type_info_count : Proc(IWMPCore*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPCore*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPCore*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPCore*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    close : Proc(IWMPCore*, HRESULT)
    get_url : Proc(IWMPCore*, UInt8**, HRESULT)
    put_url : Proc(IWMPCore*, UInt8*, HRESULT)
    get_open_state : Proc(IWMPCore*, WMPOpenState*, HRESULT)
    get_play_state : Proc(IWMPCore*, WMPPlayState*, HRESULT)
    get_controls : Proc(IWMPCore*, IWMPControls*, HRESULT)
    get_settings : Proc(IWMPCore*, IWMPSettings*, HRESULT)
    get_current_media : Proc(IWMPCore*, IWMPMedia*, HRESULT)
    put_current_media : Proc(IWMPCore*, IWMPMedia, HRESULT)
    get_media_collection : Proc(IWMPCore*, IWMPMediaCollection*, HRESULT)
    get_playlist_collection : Proc(IWMPCore*, IWMPPlaylistCollection*, HRESULT)
    get_version_info : Proc(IWMPCore*, UInt8**, HRESULT)
    launch_url : Proc(IWMPCore*, UInt8*, HRESULT)
    get_network : Proc(IWMPCore*, IWMPNetwork*, HRESULT)
    get_current_playlist : Proc(IWMPCore*, IWMPPlaylist*, HRESULT)
    put_current_playlist : Proc(IWMPCore*, IWMPPlaylist, HRESULT)
    get_cdrom_collection : Proc(IWMPCore*, IWMPCdromCollection*, HRESULT)
    get_closed_caption : Proc(IWMPCore*, IWMPClosedCaption*, HRESULT)
    get_is_online : Proc(IWMPCore*, Int16*, HRESULT)
    get_error : Proc(IWMPCore*, IWMPError*, HRESULT)
    get_status : Proc(IWMPCore*, UInt8**, HRESULT)
  end

  IWMPCore_GUID = "d84cca99-cce2-11d2-9ecc-0000f8085981"
  IID_IWMPCore = LibC::GUID.new(0xd84cca99_u32, 0xcce2_u16, 0x11d2_u16, StaticArray[0x9e_u8, 0xcc_u8, 0x0_u8, 0x0_u8, 0xf8_u8, 0x8_u8, 0x59_u8, 0x81_u8])
  struct IWMPCore
    lpVtbl : IWMPCoreVTbl*
  end

  struct IWMPPlayerVTbl
    query_interface : Proc(IWMPPlayer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPPlayer*, UInt32)
    release : Proc(IWMPPlayer*, UInt32)
    get_type_info_count : Proc(IWMPPlayer*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPPlayer*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPPlayer*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPPlayer*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    close : Proc(IWMPPlayer*, HRESULT)
    get_url : Proc(IWMPPlayer*, UInt8**, HRESULT)
    put_url : Proc(IWMPPlayer*, UInt8*, HRESULT)
    get_open_state : Proc(IWMPPlayer*, WMPOpenState*, HRESULT)
    get_play_state : Proc(IWMPPlayer*, WMPPlayState*, HRESULT)
    get_controls : Proc(IWMPPlayer*, IWMPControls*, HRESULT)
    get_settings : Proc(IWMPPlayer*, IWMPSettings*, HRESULT)
    get_current_media : Proc(IWMPPlayer*, IWMPMedia*, HRESULT)
    put_current_media : Proc(IWMPPlayer*, IWMPMedia, HRESULT)
    get_media_collection : Proc(IWMPPlayer*, IWMPMediaCollection*, HRESULT)
    get_playlist_collection : Proc(IWMPPlayer*, IWMPPlaylistCollection*, HRESULT)
    get_version_info : Proc(IWMPPlayer*, UInt8**, HRESULT)
    launch_url : Proc(IWMPPlayer*, UInt8*, HRESULT)
    get_network : Proc(IWMPPlayer*, IWMPNetwork*, HRESULT)
    get_current_playlist : Proc(IWMPPlayer*, IWMPPlaylist*, HRESULT)
    put_current_playlist : Proc(IWMPPlayer*, IWMPPlaylist, HRESULT)
    get_cdrom_collection : Proc(IWMPPlayer*, IWMPCdromCollection*, HRESULT)
    get_closed_caption : Proc(IWMPPlayer*, IWMPClosedCaption*, HRESULT)
    get_is_online : Proc(IWMPPlayer*, Int16*, HRESULT)
    get_error : Proc(IWMPPlayer*, IWMPError*, HRESULT)
    get_status : Proc(IWMPPlayer*, UInt8**, HRESULT)
    get_enabled : Proc(IWMPPlayer*, Int16*, HRESULT)
    put_enabled : Proc(IWMPPlayer*, Int16, HRESULT)
    get_full_screen : Proc(IWMPPlayer*, Int16*, HRESULT)
    put_full_screen : Proc(IWMPPlayer*, Int16, HRESULT)
    get_enable_context_menu : Proc(IWMPPlayer*, Int16*, HRESULT)
    put_enable_context_menu : Proc(IWMPPlayer*, Int16, HRESULT)
    put_ui_mode : Proc(IWMPPlayer*, UInt8*, HRESULT)
    get_ui_mode : Proc(IWMPPlayer*, UInt8**, HRESULT)
  end

  IWMPPlayer_GUID = "6bf52a4f-394a-11d3-b153-00c04f79faa6"
  IID_IWMPPlayer = LibC::GUID.new(0x6bf52a4f_u32, 0x394a_u16, 0x11d3_u16, StaticArray[0xb1_u8, 0x53_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0xfa_u8, 0xa6_u8])
  struct IWMPPlayer
    lpVtbl : IWMPPlayerVTbl*
  end

  struct IWMPPlayer2VTbl
    query_interface : Proc(IWMPPlayer2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPPlayer2*, UInt32)
    release : Proc(IWMPPlayer2*, UInt32)
    get_type_info_count : Proc(IWMPPlayer2*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPPlayer2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPPlayer2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPPlayer2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    close : Proc(IWMPPlayer2*, HRESULT)
    get_url : Proc(IWMPPlayer2*, UInt8**, HRESULT)
    put_url : Proc(IWMPPlayer2*, UInt8*, HRESULT)
    get_open_state : Proc(IWMPPlayer2*, WMPOpenState*, HRESULT)
    get_play_state : Proc(IWMPPlayer2*, WMPPlayState*, HRESULT)
    get_controls : Proc(IWMPPlayer2*, IWMPControls*, HRESULT)
    get_settings : Proc(IWMPPlayer2*, IWMPSettings*, HRESULT)
    get_current_media : Proc(IWMPPlayer2*, IWMPMedia*, HRESULT)
    put_current_media : Proc(IWMPPlayer2*, IWMPMedia, HRESULT)
    get_media_collection : Proc(IWMPPlayer2*, IWMPMediaCollection*, HRESULT)
    get_playlist_collection : Proc(IWMPPlayer2*, IWMPPlaylistCollection*, HRESULT)
    get_version_info : Proc(IWMPPlayer2*, UInt8**, HRESULT)
    launch_url : Proc(IWMPPlayer2*, UInt8*, HRESULT)
    get_network : Proc(IWMPPlayer2*, IWMPNetwork*, HRESULT)
    get_current_playlist : Proc(IWMPPlayer2*, IWMPPlaylist*, HRESULT)
    put_current_playlist : Proc(IWMPPlayer2*, IWMPPlaylist, HRESULT)
    get_cdrom_collection : Proc(IWMPPlayer2*, IWMPCdromCollection*, HRESULT)
    get_closed_caption : Proc(IWMPPlayer2*, IWMPClosedCaption*, HRESULT)
    get_is_online : Proc(IWMPPlayer2*, Int16*, HRESULT)
    get_error : Proc(IWMPPlayer2*, IWMPError*, HRESULT)
    get_status : Proc(IWMPPlayer2*, UInt8**, HRESULT)
    get_enabled : Proc(IWMPPlayer2*, Int16*, HRESULT)
    put_enabled : Proc(IWMPPlayer2*, Int16, HRESULT)
    get_full_screen : Proc(IWMPPlayer2*, Int16*, HRESULT)
    put_full_screen : Proc(IWMPPlayer2*, Int16, HRESULT)
    get_enable_context_menu : Proc(IWMPPlayer2*, Int16*, HRESULT)
    put_enable_context_menu : Proc(IWMPPlayer2*, Int16, HRESULT)
    put_ui_mode : Proc(IWMPPlayer2*, UInt8*, HRESULT)
    get_ui_mode : Proc(IWMPPlayer2*, UInt8**, HRESULT)
    get_stretch_to_fit : Proc(IWMPPlayer2*, Int16*, HRESULT)
    put_stretch_to_fit : Proc(IWMPPlayer2*, Int16, HRESULT)
    get_windowless_video : Proc(IWMPPlayer2*, Int16*, HRESULT)
    put_windowless_video : Proc(IWMPPlayer2*, Int16, HRESULT)
  end

  IWMPPlayer2_GUID = "0e6b01d1-d407-4c85-bf5f-1c01f6150280"
  IID_IWMPPlayer2 = LibC::GUID.new(0xe6b01d1_u32, 0xd407_u16, 0x4c85_u16, StaticArray[0xbf_u8, 0x5f_u8, 0x1c_u8, 0x1_u8, 0xf6_u8, 0x15_u8, 0x2_u8, 0x80_u8])
  struct IWMPPlayer2
    lpVtbl : IWMPPlayer2VTbl*
  end

  struct IWMPMedia2VTbl
    query_interface : Proc(IWMPMedia2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPMedia2*, UInt32)
    release : Proc(IWMPMedia2*, UInt32)
    get_type_info_count : Proc(IWMPMedia2*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPMedia2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPMedia2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPMedia2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_is_identical : Proc(IWMPMedia2*, IWMPMedia, Int16*, HRESULT)
    get_source_url : Proc(IWMPMedia2*, UInt8**, HRESULT)
    get_name : Proc(IWMPMedia2*, UInt8**, HRESULT)
    put_name : Proc(IWMPMedia2*, UInt8*, HRESULT)
    get_image_source_width : Proc(IWMPMedia2*, Int32*, HRESULT)
    get_image_source_height : Proc(IWMPMedia2*, Int32*, HRESULT)
    get_marker_count : Proc(IWMPMedia2*, Int32*, HRESULT)
    get_marker_time : Proc(IWMPMedia2*, Int32, Float64*, HRESULT)
    get_marker_name : Proc(IWMPMedia2*, Int32, UInt8**, HRESULT)
    get_duration : Proc(IWMPMedia2*, Float64*, HRESULT)
    get_duration_string : Proc(IWMPMedia2*, UInt8**, HRESULT)
    get_attribute_count : Proc(IWMPMedia2*, Int32*, HRESULT)
    get_attribute_name : Proc(IWMPMedia2*, Int32, UInt8**, HRESULT)
    get_item_info : Proc(IWMPMedia2*, UInt8*, UInt8**, HRESULT)
    set_item_info : Proc(IWMPMedia2*, UInt8*, UInt8*, HRESULT)
    get_item_info_by_atom : Proc(IWMPMedia2*, Int32, UInt8**, HRESULT)
    is_member_of : Proc(IWMPMedia2*, IWMPPlaylist, Int16*, HRESULT)
    is_read_only_item : Proc(IWMPMedia2*, UInt8*, Int16*, HRESULT)
    get_error : Proc(IWMPMedia2*, IWMPErrorItem*, HRESULT)
  end

  IWMPMedia2_GUID = "ab7c88bb-143e-4ea4-acc3-e4350b2106c3"
  IID_IWMPMedia2 = LibC::GUID.new(0xab7c88bb_u32, 0x143e_u16, 0x4ea4_u16, StaticArray[0xac_u8, 0xc3_u8, 0xe4_u8, 0x35_u8, 0xb_u8, 0x21_u8, 0x6_u8, 0xc3_u8])
  struct IWMPMedia2
    lpVtbl : IWMPMedia2VTbl*
  end

  struct IWMPControls2VTbl
    query_interface : Proc(IWMPControls2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPControls2*, UInt32)
    release : Proc(IWMPControls2*, UInt32)
    get_type_info_count : Proc(IWMPControls2*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPControls2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPControls2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPControls2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_is_available : Proc(IWMPControls2*, UInt8*, Int16*, HRESULT)
    play : Proc(IWMPControls2*, HRESULT)
    stop : Proc(IWMPControls2*, HRESULT)
    pause : Proc(IWMPControls2*, HRESULT)
    fast_forward : Proc(IWMPControls2*, HRESULT)
    fast_reverse : Proc(IWMPControls2*, HRESULT)
    get_current_position : Proc(IWMPControls2*, Float64*, HRESULT)
    put_current_position : Proc(IWMPControls2*, Float64, HRESULT)
    get_current_position_string : Proc(IWMPControls2*, UInt8**, HRESULT)
    next : Proc(IWMPControls2*, HRESULT)
    previous : Proc(IWMPControls2*, HRESULT)
    get_current_item : Proc(IWMPControls2*, IWMPMedia*, HRESULT)
    put_current_item : Proc(IWMPControls2*, IWMPMedia, HRESULT)
    get_current_marker : Proc(IWMPControls2*, Int32*, HRESULT)
    put_current_marker : Proc(IWMPControls2*, Int32, HRESULT)
    play_item : Proc(IWMPControls2*, IWMPMedia, HRESULT)
    step : Proc(IWMPControls2*, Int32, HRESULT)
  end

  IWMPControls2_GUID = "6f030d25-0890-480f-9775-1f7e40ab5b8e"
  IID_IWMPControls2 = LibC::GUID.new(0x6f030d25_u32, 0x890_u16, 0x480f_u16, StaticArray[0x97_u8, 0x75_u8, 0x1f_u8, 0x7e_u8, 0x40_u8, 0xab_u8, 0x5b_u8, 0x8e_u8])
  struct IWMPControls2
    lpVtbl : IWMPControls2VTbl*
  end

  struct IWMPDVDVTbl
    query_interface : Proc(IWMPDVD*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPDVD*, UInt32)
    release : Proc(IWMPDVD*, UInt32)
    get_type_info_count : Proc(IWMPDVD*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPDVD*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPDVD*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPDVD*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_is_available : Proc(IWMPDVD*, UInt8*, Int16*, HRESULT)
    get_domain : Proc(IWMPDVD*, UInt8**, HRESULT)
    top_menu : Proc(IWMPDVD*, HRESULT)
    title_menu : Proc(IWMPDVD*, HRESULT)
    back : Proc(IWMPDVD*, HRESULT)
    resume : Proc(IWMPDVD*, HRESULT)
  end

  IWMPDVD_GUID = "8da61686-4668-4a5c-ae5d-803193293dbe"
  IID_IWMPDVD = LibC::GUID.new(0x8da61686_u32, 0x4668_u16, 0x4a5c_u16, StaticArray[0xae_u8, 0x5d_u8, 0x80_u8, 0x31_u8, 0x93_u8, 0x29_u8, 0x3d_u8, 0xbe_u8])
  struct IWMPDVD
    lpVtbl : IWMPDVDVTbl*
  end

  struct IWMPCore2VTbl
    query_interface : Proc(IWMPCore2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPCore2*, UInt32)
    release : Proc(IWMPCore2*, UInt32)
    get_type_info_count : Proc(IWMPCore2*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPCore2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPCore2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPCore2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    close : Proc(IWMPCore2*, HRESULT)
    get_url : Proc(IWMPCore2*, UInt8**, HRESULT)
    put_url : Proc(IWMPCore2*, UInt8*, HRESULT)
    get_open_state : Proc(IWMPCore2*, WMPOpenState*, HRESULT)
    get_play_state : Proc(IWMPCore2*, WMPPlayState*, HRESULT)
    get_controls : Proc(IWMPCore2*, IWMPControls*, HRESULT)
    get_settings : Proc(IWMPCore2*, IWMPSettings*, HRESULT)
    get_current_media : Proc(IWMPCore2*, IWMPMedia*, HRESULT)
    put_current_media : Proc(IWMPCore2*, IWMPMedia, HRESULT)
    get_media_collection : Proc(IWMPCore2*, IWMPMediaCollection*, HRESULT)
    get_playlist_collection : Proc(IWMPCore2*, IWMPPlaylistCollection*, HRESULT)
    get_version_info : Proc(IWMPCore2*, UInt8**, HRESULT)
    launch_url : Proc(IWMPCore2*, UInt8*, HRESULT)
    get_network : Proc(IWMPCore2*, IWMPNetwork*, HRESULT)
    get_current_playlist : Proc(IWMPCore2*, IWMPPlaylist*, HRESULT)
    put_current_playlist : Proc(IWMPCore2*, IWMPPlaylist, HRESULT)
    get_cdrom_collection : Proc(IWMPCore2*, IWMPCdromCollection*, HRESULT)
    get_closed_caption : Proc(IWMPCore2*, IWMPClosedCaption*, HRESULT)
    get_is_online : Proc(IWMPCore2*, Int16*, HRESULT)
    get_error : Proc(IWMPCore2*, IWMPError*, HRESULT)
    get_status : Proc(IWMPCore2*, UInt8**, HRESULT)
    get_dvd : Proc(IWMPCore2*, IWMPDVD*, HRESULT)
  end

  IWMPCore2_GUID = "bc17e5b7-7561-4c18-bb90-17d485775659"
  IID_IWMPCore2 = LibC::GUID.new(0xbc17e5b7_u32, 0x7561_u16, 0x4c18_u16, StaticArray[0xbb_u8, 0x90_u8, 0x17_u8, 0xd4_u8, 0x85_u8, 0x77_u8, 0x56_u8, 0x59_u8])
  struct IWMPCore2
    lpVtbl : IWMPCore2VTbl*
  end

  struct IWMPPlayer3VTbl
    query_interface : Proc(IWMPPlayer3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPPlayer3*, UInt32)
    release : Proc(IWMPPlayer3*, UInt32)
    get_type_info_count : Proc(IWMPPlayer3*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPPlayer3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPPlayer3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPPlayer3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    close : Proc(IWMPPlayer3*, HRESULT)
    get_url : Proc(IWMPPlayer3*, UInt8**, HRESULT)
    put_url : Proc(IWMPPlayer3*, UInt8*, HRESULT)
    get_open_state : Proc(IWMPPlayer3*, WMPOpenState*, HRESULT)
    get_play_state : Proc(IWMPPlayer3*, WMPPlayState*, HRESULT)
    get_controls : Proc(IWMPPlayer3*, IWMPControls*, HRESULT)
    get_settings : Proc(IWMPPlayer3*, IWMPSettings*, HRESULT)
    get_current_media : Proc(IWMPPlayer3*, IWMPMedia*, HRESULT)
    put_current_media : Proc(IWMPPlayer3*, IWMPMedia, HRESULT)
    get_media_collection : Proc(IWMPPlayer3*, IWMPMediaCollection*, HRESULT)
    get_playlist_collection : Proc(IWMPPlayer3*, IWMPPlaylistCollection*, HRESULT)
    get_version_info : Proc(IWMPPlayer3*, UInt8**, HRESULT)
    launch_url : Proc(IWMPPlayer3*, UInt8*, HRESULT)
    get_network : Proc(IWMPPlayer3*, IWMPNetwork*, HRESULT)
    get_current_playlist : Proc(IWMPPlayer3*, IWMPPlaylist*, HRESULT)
    put_current_playlist : Proc(IWMPPlayer3*, IWMPPlaylist, HRESULT)
    get_cdrom_collection : Proc(IWMPPlayer3*, IWMPCdromCollection*, HRESULT)
    get_closed_caption : Proc(IWMPPlayer3*, IWMPClosedCaption*, HRESULT)
    get_is_online : Proc(IWMPPlayer3*, Int16*, HRESULT)
    get_error : Proc(IWMPPlayer3*, IWMPError*, HRESULT)
    get_status : Proc(IWMPPlayer3*, UInt8**, HRESULT)
    get_dvd : Proc(IWMPPlayer3*, IWMPDVD*, HRESULT)
    get_enabled : Proc(IWMPPlayer3*, Int16*, HRESULT)
    put_enabled : Proc(IWMPPlayer3*, Int16, HRESULT)
    get_full_screen : Proc(IWMPPlayer3*, Int16*, HRESULT)
    put_full_screen : Proc(IWMPPlayer3*, Int16, HRESULT)
    get_enable_context_menu : Proc(IWMPPlayer3*, Int16*, HRESULT)
    put_enable_context_menu : Proc(IWMPPlayer3*, Int16, HRESULT)
    put_ui_mode : Proc(IWMPPlayer3*, UInt8*, HRESULT)
    get_ui_mode : Proc(IWMPPlayer3*, UInt8**, HRESULT)
    get_stretch_to_fit : Proc(IWMPPlayer3*, Int16*, HRESULT)
    put_stretch_to_fit : Proc(IWMPPlayer3*, Int16, HRESULT)
    get_windowless_video : Proc(IWMPPlayer3*, Int16*, HRESULT)
    put_windowless_video : Proc(IWMPPlayer3*, Int16, HRESULT)
  end

  IWMPPlayer3_GUID = "54062b68-052a-4c25-a39f-8b63346511d4"
  IID_IWMPPlayer3 = LibC::GUID.new(0x54062b68_u32, 0x52a_u16, 0x4c25_u16, StaticArray[0xa3_u8, 0x9f_u8, 0x8b_u8, 0x63_u8, 0x34_u8, 0x65_u8, 0x11_u8, 0xd4_u8])
  struct IWMPPlayer3
    lpVtbl : IWMPPlayer3VTbl*
  end

  struct IWMPErrorItem2VTbl
    query_interface : Proc(IWMPErrorItem2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPErrorItem2*, UInt32)
    release : Proc(IWMPErrorItem2*, UInt32)
    get_type_info_count : Proc(IWMPErrorItem2*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPErrorItem2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPErrorItem2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPErrorItem2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_error_code : Proc(IWMPErrorItem2*, Int32*, HRESULT)
    get_error_description : Proc(IWMPErrorItem2*, UInt8**, HRESULT)
    get_error_context : Proc(IWMPErrorItem2*, VARIANT*, HRESULT)
    get_remedy : Proc(IWMPErrorItem2*, Int32*, HRESULT)
    get_custom_url : Proc(IWMPErrorItem2*, UInt8**, HRESULT)
    get_condition : Proc(IWMPErrorItem2*, Int32*, HRESULT)
  end

  IWMPErrorItem2_GUID = "f75ccec0-c67c-475c-931e-8719870bee7d"
  IID_IWMPErrorItem2 = LibC::GUID.new(0xf75ccec0_u32, 0xc67c_u16, 0x475c_u16, StaticArray[0x93_u8, 0x1e_u8, 0x87_u8, 0x19_u8, 0x87_u8, 0xb_u8, 0xee_u8, 0x7d_u8])
  struct IWMPErrorItem2
    lpVtbl : IWMPErrorItem2VTbl*
  end

  struct IWMPRemoteMediaServicesVTbl
    query_interface : Proc(IWMPRemoteMediaServices*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPRemoteMediaServices*, UInt32)
    release : Proc(IWMPRemoteMediaServices*, UInt32)
    get_service_type : Proc(IWMPRemoteMediaServices*, UInt8**, HRESULT)
    get_application_name : Proc(IWMPRemoteMediaServices*, UInt8**, HRESULT)
    get_scriptable_object : Proc(IWMPRemoteMediaServices*, UInt8**, IDispatch*, HRESULT)
    get_custom_ui_mode : Proc(IWMPRemoteMediaServices*, UInt8**, HRESULT)
  end

  IWMPRemoteMediaServices_GUID = "cbb92747-741f-44fe-ab5b-f1a48f3b2a59"
  IID_IWMPRemoteMediaServices = LibC::GUID.new(0xcbb92747_u32, 0x741f_u16, 0x44fe_u16, StaticArray[0xab_u8, 0x5b_u8, 0xf1_u8, 0xa4_u8, 0x8f_u8, 0x3b_u8, 0x2a_u8, 0x59_u8])
  struct IWMPRemoteMediaServices
    lpVtbl : IWMPRemoteMediaServicesVTbl*
  end

  struct IWMPSkinManagerVTbl
    query_interface : Proc(IWMPSkinManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPSkinManager*, UInt32)
    release : Proc(IWMPSkinManager*, UInt32)
    set_visual_style : Proc(IWMPSkinManager*, UInt8*, HRESULT)
  end

  IWMPSkinManager_GUID = "076f2fa6-ed30-448b-8cc5-3f3ef3529c7a"
  IID_IWMPSkinManager = LibC::GUID.new(0x76f2fa6_u32, 0xed30_u16, 0x448b_u16, StaticArray[0x8c_u8, 0xc5_u8, 0x3f_u8, 0x3e_u8, 0xf3_u8, 0x52_u8, 0x9c_u8, 0x7a_u8])
  struct IWMPSkinManager
    lpVtbl : IWMPSkinManagerVTbl*
  end

  struct IWMPMetadataPictureVTbl
    query_interface : Proc(IWMPMetadataPicture*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPMetadataPicture*, UInt32)
    release : Proc(IWMPMetadataPicture*, UInt32)
    get_type_info_count : Proc(IWMPMetadataPicture*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPMetadataPicture*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPMetadataPicture*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPMetadataPicture*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_mime_type : Proc(IWMPMetadataPicture*, UInt8**, HRESULT)
    get_picture_type : Proc(IWMPMetadataPicture*, UInt8**, HRESULT)
    get_description : Proc(IWMPMetadataPicture*, UInt8**, HRESULT)
    get_url : Proc(IWMPMetadataPicture*, UInt8**, HRESULT)
  end

  IWMPMetadataPicture_GUID = "5c29bbe0-f87d-4c45-aa28-a70f0230ffa9"
  IID_IWMPMetadataPicture = LibC::GUID.new(0x5c29bbe0_u32, 0xf87d_u16, 0x4c45_u16, StaticArray[0xaa_u8, 0x28_u8, 0xa7_u8, 0xf_u8, 0x2_u8, 0x30_u8, 0xff_u8, 0xa9_u8])
  struct IWMPMetadataPicture
    lpVtbl : IWMPMetadataPictureVTbl*
  end

  struct IWMPMetadataTextVTbl
    query_interface : Proc(IWMPMetadataText*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPMetadataText*, UInt32)
    release : Proc(IWMPMetadataText*, UInt32)
    get_type_info_count : Proc(IWMPMetadataText*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPMetadataText*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPMetadataText*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPMetadataText*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_description : Proc(IWMPMetadataText*, UInt8**, HRESULT)
    get_text : Proc(IWMPMetadataText*, UInt8**, HRESULT)
  end

  IWMPMetadataText_GUID = "769a72db-13d2-45e2-9c48-53ca9d5b7450"
  IID_IWMPMetadataText = LibC::GUID.new(0x769a72db_u32, 0x13d2_u16, 0x45e2_u16, StaticArray[0x9c_u8, 0x48_u8, 0x53_u8, 0xca_u8, 0x9d_u8, 0x5b_u8, 0x74_u8, 0x50_u8])
  struct IWMPMetadataText
    lpVtbl : IWMPMetadataTextVTbl*
  end

  struct IWMPMedia3VTbl
    query_interface : Proc(IWMPMedia3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPMedia3*, UInt32)
    release : Proc(IWMPMedia3*, UInt32)
    get_type_info_count : Proc(IWMPMedia3*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPMedia3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPMedia3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPMedia3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_is_identical : Proc(IWMPMedia3*, IWMPMedia, Int16*, HRESULT)
    get_source_url : Proc(IWMPMedia3*, UInt8**, HRESULT)
    get_name : Proc(IWMPMedia3*, UInt8**, HRESULT)
    put_name : Proc(IWMPMedia3*, UInt8*, HRESULT)
    get_image_source_width : Proc(IWMPMedia3*, Int32*, HRESULT)
    get_image_source_height : Proc(IWMPMedia3*, Int32*, HRESULT)
    get_marker_count : Proc(IWMPMedia3*, Int32*, HRESULT)
    get_marker_time : Proc(IWMPMedia3*, Int32, Float64*, HRESULT)
    get_marker_name : Proc(IWMPMedia3*, Int32, UInt8**, HRESULT)
    get_duration : Proc(IWMPMedia3*, Float64*, HRESULT)
    get_duration_string : Proc(IWMPMedia3*, UInt8**, HRESULT)
    get_attribute_count : Proc(IWMPMedia3*, Int32*, HRESULT)
    get_attribute_name : Proc(IWMPMedia3*, Int32, UInt8**, HRESULT)
    get_item_info : Proc(IWMPMedia3*, UInt8*, UInt8**, HRESULT)
    set_item_info : Proc(IWMPMedia3*, UInt8*, UInt8*, HRESULT)
    get_item_info_by_atom : Proc(IWMPMedia3*, Int32, UInt8**, HRESULT)
    is_member_of : Proc(IWMPMedia3*, IWMPPlaylist, Int16*, HRESULT)
    is_read_only_item : Proc(IWMPMedia3*, UInt8*, Int16*, HRESULT)
    get_error : Proc(IWMPMedia3*, IWMPErrorItem*, HRESULT)
    get_attribute_count_by_type : Proc(IWMPMedia3*, UInt8*, UInt8*, Int32*, HRESULT)
    get_item_info_by_type : Proc(IWMPMedia3*, UInt8*, UInt8*, Int32, VARIANT*, HRESULT)
  end

  IWMPMedia3_GUID = "f118efc7-f03a-4fb4-99c9-1c02a5c1065b"
  IID_IWMPMedia3 = LibC::GUID.new(0xf118efc7_u32, 0xf03a_u16, 0x4fb4_u16, StaticArray[0x99_u8, 0xc9_u8, 0x1c_u8, 0x2_u8, 0xa5_u8, 0xc1_u8, 0x6_u8, 0x5b_u8])
  struct IWMPMedia3
    lpVtbl : IWMPMedia3VTbl*
  end

  struct IWMPSettings2VTbl
    query_interface : Proc(IWMPSettings2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPSettings2*, UInt32)
    release : Proc(IWMPSettings2*, UInt32)
    get_type_info_count : Proc(IWMPSettings2*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPSettings2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPSettings2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPSettings2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_is_available : Proc(IWMPSettings2*, UInt8*, Int16*, HRESULT)
    get_auto_start : Proc(IWMPSettings2*, Int16*, HRESULT)
    put_auto_start : Proc(IWMPSettings2*, Int16, HRESULT)
    get_base_url : Proc(IWMPSettings2*, UInt8**, HRESULT)
    put_base_url : Proc(IWMPSettings2*, UInt8*, HRESULT)
    get_default_frame : Proc(IWMPSettings2*, UInt8**, HRESULT)
    put_default_frame : Proc(IWMPSettings2*, UInt8*, HRESULT)
    get_invoke_ur_ls : Proc(IWMPSettings2*, Int16*, HRESULT)
    put_invoke_ur_ls : Proc(IWMPSettings2*, Int16, HRESULT)
    get_mute : Proc(IWMPSettings2*, Int16*, HRESULT)
    put_mute : Proc(IWMPSettings2*, Int16, HRESULT)
    get_play_count : Proc(IWMPSettings2*, Int32*, HRESULT)
    put_play_count : Proc(IWMPSettings2*, Int32, HRESULT)
    get_rate : Proc(IWMPSettings2*, Float64*, HRESULT)
    put_rate : Proc(IWMPSettings2*, Float64, HRESULT)
    get_balance : Proc(IWMPSettings2*, Int32*, HRESULT)
    put_balance : Proc(IWMPSettings2*, Int32, HRESULT)
    get_volume : Proc(IWMPSettings2*, Int32*, HRESULT)
    put_volume : Proc(IWMPSettings2*, Int32, HRESULT)
    get_mode : Proc(IWMPSettings2*, UInt8*, Int16*, HRESULT)
    set_mode : Proc(IWMPSettings2*, UInt8*, Int16, HRESULT)
    get_enable_error_dialogs : Proc(IWMPSettings2*, Int16*, HRESULT)
    put_enable_error_dialogs : Proc(IWMPSettings2*, Int16, HRESULT)
    get_default_audio_language : Proc(IWMPSettings2*, Int32*, HRESULT)
    get_media_access_rights : Proc(IWMPSettings2*, UInt8**, HRESULT)
    request_media_access_rights : Proc(IWMPSettings2*, UInt8*, Int16*, HRESULT)
  end

  IWMPSettings2_GUID = "fda937a4-eece-4da5-a0b6-39bf89ade2c2"
  IID_IWMPSettings2 = LibC::GUID.new(0xfda937a4_u32, 0xeece_u16, 0x4da5_u16, StaticArray[0xa0_u8, 0xb6_u8, 0x39_u8, 0xbf_u8, 0x89_u8, 0xad_u8, 0xe2_u8, 0xc2_u8])
  struct IWMPSettings2
    lpVtbl : IWMPSettings2VTbl*
  end

  struct IWMPControls3VTbl
    query_interface : Proc(IWMPControls3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPControls3*, UInt32)
    release : Proc(IWMPControls3*, UInt32)
    get_type_info_count : Proc(IWMPControls3*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPControls3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPControls3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPControls3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_is_available : Proc(IWMPControls3*, UInt8*, Int16*, HRESULT)
    play : Proc(IWMPControls3*, HRESULT)
    stop : Proc(IWMPControls3*, HRESULT)
    pause : Proc(IWMPControls3*, HRESULT)
    fast_forward : Proc(IWMPControls3*, HRESULT)
    fast_reverse : Proc(IWMPControls3*, HRESULT)
    get_current_position : Proc(IWMPControls3*, Float64*, HRESULT)
    put_current_position : Proc(IWMPControls3*, Float64, HRESULT)
    get_current_position_string : Proc(IWMPControls3*, UInt8**, HRESULT)
    next : Proc(IWMPControls3*, HRESULT)
    previous : Proc(IWMPControls3*, HRESULT)
    get_current_item : Proc(IWMPControls3*, IWMPMedia*, HRESULT)
    put_current_item : Proc(IWMPControls3*, IWMPMedia, HRESULT)
    get_current_marker : Proc(IWMPControls3*, Int32*, HRESULT)
    put_current_marker : Proc(IWMPControls3*, Int32, HRESULT)
    play_item : Proc(IWMPControls3*, IWMPMedia, HRESULT)
    step : Proc(IWMPControls3*, Int32, HRESULT)
    get_audio_language_count : Proc(IWMPControls3*, Int32*, HRESULT)
    get_audio_language_id : Proc(IWMPControls3*, Int32, Int32*, HRESULT)
    get_audio_language_description : Proc(IWMPControls3*, Int32, UInt8**, HRESULT)
    get_current_audio_language : Proc(IWMPControls3*, Int32*, HRESULT)
    put_current_audio_language : Proc(IWMPControls3*, Int32, HRESULT)
    get_current_audio_language_index : Proc(IWMPControls3*, Int32*, HRESULT)
    put_current_audio_language_index : Proc(IWMPControls3*, Int32, HRESULT)
    get_language_name : Proc(IWMPControls3*, Int32, UInt8**, HRESULT)
    get_current_position_timecode : Proc(IWMPControls3*, UInt8**, HRESULT)
    put_current_position_timecode : Proc(IWMPControls3*, UInt8*, HRESULT)
  end

  IWMPControls3_GUID = "a1d1110e-d545-476a-9a78-ac3e4cb1e6bd"
  IID_IWMPControls3 = LibC::GUID.new(0xa1d1110e_u32, 0xd545_u16, 0x476a_u16, StaticArray[0x9a_u8, 0x78_u8, 0xac_u8, 0x3e_u8, 0x4c_u8, 0xb1_u8, 0xe6_u8, 0xbd_u8])
  struct IWMPControls3
    lpVtbl : IWMPControls3VTbl*
  end

  struct IWMPClosedCaption2VTbl
    query_interface : Proc(IWMPClosedCaption2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPClosedCaption2*, UInt32)
    release : Proc(IWMPClosedCaption2*, UInt32)
    get_type_info_count : Proc(IWMPClosedCaption2*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPClosedCaption2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPClosedCaption2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPClosedCaption2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_sami_style : Proc(IWMPClosedCaption2*, UInt8**, HRESULT)
    put_sami_style : Proc(IWMPClosedCaption2*, UInt8*, HRESULT)
    get_sami_lang : Proc(IWMPClosedCaption2*, UInt8**, HRESULT)
    put_sami_lang : Proc(IWMPClosedCaption2*, UInt8*, HRESULT)
    get_sami_file_name : Proc(IWMPClosedCaption2*, UInt8**, HRESULT)
    put_sami_file_name : Proc(IWMPClosedCaption2*, UInt8*, HRESULT)
    get_captioning_id : Proc(IWMPClosedCaption2*, UInt8**, HRESULT)
    put_captioning_id : Proc(IWMPClosedCaption2*, UInt8*, HRESULT)
    get_sami_lang_count : Proc(IWMPClosedCaption2*, Int32*, HRESULT)
    get_sami_lang_name : Proc(IWMPClosedCaption2*, Int32, UInt8**, HRESULT)
    get_sami_lang_id : Proc(IWMPClosedCaption2*, Int32, Int32*, HRESULT)
    get_sami_style_count : Proc(IWMPClosedCaption2*, Int32*, HRESULT)
    get_sami_style_name : Proc(IWMPClosedCaption2*, Int32, UInt8**, HRESULT)
  end

  IWMPClosedCaption2_GUID = "350ba78b-6bc8-4113-a5f5-312056934eb6"
  IID_IWMPClosedCaption2 = LibC::GUID.new(0x350ba78b_u32, 0x6bc8_u16, 0x4113_u16, StaticArray[0xa5_u8, 0xf5_u8, 0x31_u8, 0x20_u8, 0x56_u8, 0x93_u8, 0x4e_u8, 0xb6_u8])
  struct IWMPClosedCaption2
    lpVtbl : IWMPClosedCaption2VTbl*
  end

  struct IWMPPlayerApplicationVTbl
    query_interface : Proc(IWMPPlayerApplication*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPPlayerApplication*, UInt32)
    release : Proc(IWMPPlayerApplication*, UInt32)
    get_type_info_count : Proc(IWMPPlayerApplication*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPPlayerApplication*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPPlayerApplication*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPPlayerApplication*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    switch_to_player_application : Proc(IWMPPlayerApplication*, HRESULT)
    switch_to_control : Proc(IWMPPlayerApplication*, HRESULT)
    get_player_docked : Proc(IWMPPlayerApplication*, Int16*, HRESULT)
    get_has_display : Proc(IWMPPlayerApplication*, Int16*, HRESULT)
  end

  IWMPPlayerApplication_GUID = "40897764-ceab-47be-ad4a-8e28537f9bbf"
  IID_IWMPPlayerApplication = LibC::GUID.new(0x40897764_u32, 0xceab_u16, 0x47be_u16, StaticArray[0xad_u8, 0x4a_u8, 0x8e_u8, 0x28_u8, 0x53_u8, 0x7f_u8, 0x9b_u8, 0xbf_u8])
  struct IWMPPlayerApplication
    lpVtbl : IWMPPlayerApplicationVTbl*
  end

  struct IWMPCore3VTbl
    query_interface : Proc(IWMPCore3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPCore3*, UInt32)
    release : Proc(IWMPCore3*, UInt32)
    get_type_info_count : Proc(IWMPCore3*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPCore3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPCore3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPCore3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    close : Proc(IWMPCore3*, HRESULT)
    get_url : Proc(IWMPCore3*, UInt8**, HRESULT)
    put_url : Proc(IWMPCore3*, UInt8*, HRESULT)
    get_open_state : Proc(IWMPCore3*, WMPOpenState*, HRESULT)
    get_play_state : Proc(IWMPCore3*, WMPPlayState*, HRESULT)
    get_controls : Proc(IWMPCore3*, IWMPControls*, HRESULT)
    get_settings : Proc(IWMPCore3*, IWMPSettings*, HRESULT)
    get_current_media : Proc(IWMPCore3*, IWMPMedia*, HRESULT)
    put_current_media : Proc(IWMPCore3*, IWMPMedia, HRESULT)
    get_media_collection : Proc(IWMPCore3*, IWMPMediaCollection*, HRESULT)
    get_playlist_collection : Proc(IWMPCore3*, IWMPPlaylistCollection*, HRESULT)
    get_version_info : Proc(IWMPCore3*, UInt8**, HRESULT)
    launch_url : Proc(IWMPCore3*, UInt8*, HRESULT)
    get_network : Proc(IWMPCore3*, IWMPNetwork*, HRESULT)
    get_current_playlist : Proc(IWMPCore3*, IWMPPlaylist*, HRESULT)
    put_current_playlist : Proc(IWMPCore3*, IWMPPlaylist, HRESULT)
    get_cdrom_collection : Proc(IWMPCore3*, IWMPCdromCollection*, HRESULT)
    get_closed_caption : Proc(IWMPCore3*, IWMPClosedCaption*, HRESULT)
    get_is_online : Proc(IWMPCore3*, Int16*, HRESULT)
    get_error : Proc(IWMPCore3*, IWMPError*, HRESULT)
    get_status : Proc(IWMPCore3*, UInt8**, HRESULT)
    get_dvd : Proc(IWMPCore3*, IWMPDVD*, HRESULT)
    new_playlist : Proc(IWMPCore3*, UInt8*, UInt8*, IWMPPlaylist*, HRESULT)
    new_media : Proc(IWMPCore3*, UInt8*, IWMPMedia*, HRESULT)
  end

  IWMPCore3_GUID = "7587c667-628f-499f-88e7-6a6f4e888464"
  IID_IWMPCore3 = LibC::GUID.new(0x7587c667_u32, 0x628f_u16, 0x499f_u16, StaticArray[0x88_u8, 0xe7_u8, 0x6a_u8, 0x6f_u8, 0x4e_u8, 0x88_u8, 0x84_u8, 0x64_u8])
  struct IWMPCore3
    lpVtbl : IWMPCore3VTbl*
  end

  struct IWMPPlayer4VTbl
    query_interface : Proc(IWMPPlayer4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPPlayer4*, UInt32)
    release : Proc(IWMPPlayer4*, UInt32)
    get_type_info_count : Proc(IWMPPlayer4*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPPlayer4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPPlayer4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPPlayer4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    close : Proc(IWMPPlayer4*, HRESULT)
    get_url : Proc(IWMPPlayer4*, UInt8**, HRESULT)
    put_url : Proc(IWMPPlayer4*, UInt8*, HRESULT)
    get_open_state : Proc(IWMPPlayer4*, WMPOpenState*, HRESULT)
    get_play_state : Proc(IWMPPlayer4*, WMPPlayState*, HRESULT)
    get_controls : Proc(IWMPPlayer4*, IWMPControls*, HRESULT)
    get_settings : Proc(IWMPPlayer4*, IWMPSettings*, HRESULT)
    get_current_media : Proc(IWMPPlayer4*, IWMPMedia*, HRESULT)
    put_current_media : Proc(IWMPPlayer4*, IWMPMedia, HRESULT)
    get_media_collection : Proc(IWMPPlayer4*, IWMPMediaCollection*, HRESULT)
    get_playlist_collection : Proc(IWMPPlayer4*, IWMPPlaylistCollection*, HRESULT)
    get_version_info : Proc(IWMPPlayer4*, UInt8**, HRESULT)
    launch_url : Proc(IWMPPlayer4*, UInt8*, HRESULT)
    get_network : Proc(IWMPPlayer4*, IWMPNetwork*, HRESULT)
    get_current_playlist : Proc(IWMPPlayer4*, IWMPPlaylist*, HRESULT)
    put_current_playlist : Proc(IWMPPlayer4*, IWMPPlaylist, HRESULT)
    get_cdrom_collection : Proc(IWMPPlayer4*, IWMPCdromCollection*, HRESULT)
    get_closed_caption : Proc(IWMPPlayer4*, IWMPClosedCaption*, HRESULT)
    get_is_online : Proc(IWMPPlayer4*, Int16*, HRESULT)
    get_error : Proc(IWMPPlayer4*, IWMPError*, HRESULT)
    get_status : Proc(IWMPPlayer4*, UInt8**, HRESULT)
    get_dvd : Proc(IWMPPlayer4*, IWMPDVD*, HRESULT)
    new_playlist : Proc(IWMPPlayer4*, UInt8*, UInt8*, IWMPPlaylist*, HRESULT)
    new_media : Proc(IWMPPlayer4*, UInt8*, IWMPMedia*, HRESULT)
    get_enabled : Proc(IWMPPlayer4*, Int16*, HRESULT)
    put_enabled : Proc(IWMPPlayer4*, Int16, HRESULT)
    get_full_screen : Proc(IWMPPlayer4*, Int16*, HRESULT)
    put_full_screen : Proc(IWMPPlayer4*, Int16, HRESULT)
    get_enable_context_menu : Proc(IWMPPlayer4*, Int16*, HRESULT)
    put_enable_context_menu : Proc(IWMPPlayer4*, Int16, HRESULT)
    put_ui_mode : Proc(IWMPPlayer4*, UInt8*, HRESULT)
    get_ui_mode : Proc(IWMPPlayer4*, UInt8**, HRESULT)
    get_stretch_to_fit : Proc(IWMPPlayer4*, Int16*, HRESULT)
    put_stretch_to_fit : Proc(IWMPPlayer4*, Int16, HRESULT)
    get_windowless_video : Proc(IWMPPlayer4*, Int16*, HRESULT)
    put_windowless_video : Proc(IWMPPlayer4*, Int16, HRESULT)
    get_is_remote : Proc(IWMPPlayer4*, Int16*, HRESULT)
    get_player_application : Proc(IWMPPlayer4*, IWMPPlayerApplication*, HRESULT)
    open_player : Proc(IWMPPlayer4*, UInt8*, HRESULT)
  end

  IWMPPlayer4_GUID = "6c497d62-8919-413c-82db-e935fb3ec584"
  IID_IWMPPlayer4 = LibC::GUID.new(0x6c497d62_u32, 0x8919_u16, 0x413c_u16, StaticArray[0x82_u8, 0xdb_u8, 0xe9_u8, 0x35_u8, 0xfb_u8, 0x3e_u8, 0xc5_u8, 0x84_u8])
  struct IWMPPlayer4
    lpVtbl : IWMPPlayer4VTbl*
  end

  struct IWMPPlayerServicesVTbl
    query_interface : Proc(IWMPPlayerServices*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPPlayerServices*, UInt32)
    release : Proc(IWMPPlayerServices*, UInt32)
    activate_ui_plugin : Proc(IWMPPlayerServices*, UInt8*, HRESULT)
    set_task_pane : Proc(IWMPPlayerServices*, UInt8*, HRESULT)
    set_task_pane_url : Proc(IWMPPlayerServices*, UInt8*, UInt8*, UInt8*, HRESULT)
  end

  IWMPPlayerServices_GUID = "1d01fbdb-ade2-4c8d-9842-c190b95c3306"
  IID_IWMPPlayerServices = LibC::GUID.new(0x1d01fbdb_u32, 0xade2_u16, 0x4c8d_u16, StaticArray[0x98_u8, 0x42_u8, 0xc1_u8, 0x90_u8, 0xb9_u8, 0x5c_u8, 0x33_u8, 0x6_u8])
  struct IWMPPlayerServices
    lpVtbl : IWMPPlayerServicesVTbl*
  end

  struct IWMPSyncDeviceVTbl
    query_interface : Proc(IWMPSyncDevice*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPSyncDevice*, UInt32)
    release : Proc(IWMPSyncDevice*, UInt32)
    get_friendly_name : Proc(IWMPSyncDevice*, UInt8**, HRESULT)
    put_friendly_name : Proc(IWMPSyncDevice*, UInt8*, HRESULT)
    get_device_name : Proc(IWMPSyncDevice*, UInt8**, HRESULT)
    get_device_id : Proc(IWMPSyncDevice*, UInt8**, HRESULT)
    get_partnership_index : Proc(IWMPSyncDevice*, Int32*, HRESULT)
    get_connected : Proc(IWMPSyncDevice*, Int16*, HRESULT)
    get_status : Proc(IWMPSyncDevice*, WMPDeviceStatus*, HRESULT)
    get_sync_state : Proc(IWMPSyncDevice*, WMPSyncState*, HRESULT)
    get_progress : Proc(IWMPSyncDevice*, Int32*, HRESULT)
    get_item_info : Proc(IWMPSyncDevice*, UInt8*, UInt8**, HRESULT)
    create_partnership : Proc(IWMPSyncDevice*, Int16, HRESULT)
    delete_partnership : Proc(IWMPSyncDevice*, HRESULT)
    start : Proc(IWMPSyncDevice*, HRESULT)
    stop : Proc(IWMPSyncDevice*, HRESULT)
    show_settings : Proc(IWMPSyncDevice*, HRESULT)
    is_identical : Proc(IWMPSyncDevice*, IWMPSyncDevice, Int16*, HRESULT)
  end

  IWMPSyncDevice_GUID = "82a2986c-0293-4fd0-b279-b21b86c058be"
  IID_IWMPSyncDevice = LibC::GUID.new(0x82a2986c_u32, 0x293_u16, 0x4fd0_u16, StaticArray[0xb2_u8, 0x79_u8, 0xb2_u8, 0x1b_u8, 0x86_u8, 0xc0_u8, 0x58_u8, 0xbe_u8])
  struct IWMPSyncDevice
    lpVtbl : IWMPSyncDeviceVTbl*
  end

  struct IWMPSyncServicesVTbl
    query_interface : Proc(IWMPSyncServices*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPSyncServices*, UInt32)
    release : Proc(IWMPSyncServices*, UInt32)
    get_device_count : Proc(IWMPSyncServices*, Int32*, HRESULT)
    get_device : Proc(IWMPSyncServices*, Int32, IWMPSyncDevice*, HRESULT)
  end

  IWMPSyncServices_GUID = "8b5050ff-e0a4-4808-b3a8-893a9e1ed894"
  IID_IWMPSyncServices = LibC::GUID.new(0x8b5050ff_u32, 0xe0a4_u16, 0x4808_u16, StaticArray[0xb3_u8, 0xa8_u8, 0x89_u8, 0x3a_u8, 0x9e_u8, 0x1e_u8, 0xd8_u8, 0x94_u8])
  struct IWMPSyncServices
    lpVtbl : IWMPSyncServicesVTbl*
  end

  struct IWMPPlayerServices2VTbl
    query_interface : Proc(IWMPPlayerServices2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPPlayerServices2*, UInt32)
    release : Proc(IWMPPlayerServices2*, UInt32)
    activate_ui_plugin : Proc(IWMPPlayerServices2*, UInt8*, HRESULT)
    set_task_pane : Proc(IWMPPlayerServices2*, UInt8*, HRESULT)
    set_task_pane_url : Proc(IWMPPlayerServices2*, UInt8*, UInt8*, UInt8*, HRESULT)
    set_background_processing_priority : Proc(IWMPPlayerServices2*, UInt8*, HRESULT)
  end

  IWMPPlayerServices2_GUID = "1bb1592f-f040-418a-9f71-17c7512b4d70"
  IID_IWMPPlayerServices2 = LibC::GUID.new(0x1bb1592f_u32, 0xf040_u16, 0x418a_u16, StaticArray[0x9f_u8, 0x71_u8, 0x17_u8, 0xc7_u8, 0x51_u8, 0x2b_u8, 0x4d_u8, 0x70_u8])
  struct IWMPPlayerServices2
    lpVtbl : IWMPPlayerServices2VTbl*
  end

  struct IWMPCdromRipVTbl
    query_interface : Proc(IWMPCdromRip*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPCdromRip*, UInt32)
    release : Proc(IWMPCdromRip*, UInt32)
    get_rip_state : Proc(IWMPCdromRip*, WMPRipState*, HRESULT)
    get_rip_progress : Proc(IWMPCdromRip*, Int32*, HRESULT)
    start_rip : Proc(IWMPCdromRip*, HRESULT)
    stop_rip : Proc(IWMPCdromRip*, HRESULT)
  end

  IWMPCdromRip_GUID = "56e2294f-69ed-4629-a869-aea72c0dcc2c"
  IID_IWMPCdromRip = LibC::GUID.new(0x56e2294f_u32, 0x69ed_u16, 0x4629_u16, StaticArray[0xa8_u8, 0x69_u8, 0xae_u8, 0xa7_u8, 0x2c_u8, 0xd_u8, 0xcc_u8, 0x2c_u8])
  struct IWMPCdromRip
    lpVtbl : IWMPCdromRipVTbl*
  end

  struct IWMPCdromBurnVTbl
    query_interface : Proc(IWMPCdromBurn*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPCdromBurn*, UInt32)
    release : Proc(IWMPCdromBurn*, UInt32)
    is_available : Proc(IWMPCdromBurn*, UInt8*, Int16*, HRESULT)
    get_item_info : Proc(IWMPCdromBurn*, UInt8*, UInt8**, HRESULT)
    get_label : Proc(IWMPCdromBurn*, UInt8**, HRESULT)
    put_label : Proc(IWMPCdromBurn*, UInt8*, HRESULT)
    get_burn_format : Proc(IWMPCdromBurn*, WMPBurnFormat*, HRESULT)
    put_burn_format : Proc(IWMPCdromBurn*, WMPBurnFormat, HRESULT)
    get_burn_playlist : Proc(IWMPCdromBurn*, IWMPPlaylist*, HRESULT)
    put_burn_playlist : Proc(IWMPCdromBurn*, IWMPPlaylist, HRESULT)
    refresh_status : Proc(IWMPCdromBurn*, HRESULT)
    get_burn_state : Proc(IWMPCdromBurn*, WMPBurnState*, HRESULT)
    get_burn_progress : Proc(IWMPCdromBurn*, Int32*, HRESULT)
    start_burn : Proc(IWMPCdromBurn*, HRESULT)
    stop_burn : Proc(IWMPCdromBurn*, HRESULT)
    erase : Proc(IWMPCdromBurn*, HRESULT)
  end

  IWMPCdromBurn_GUID = "bd94dbeb-417f-4928-aa06-087d56ed9b59"
  IID_IWMPCdromBurn = LibC::GUID.new(0xbd94dbeb_u32, 0x417f_u16, 0x4928_u16, StaticArray[0xaa_u8, 0x6_u8, 0x8_u8, 0x7d_u8, 0x56_u8, 0xed_u8, 0x9b_u8, 0x59_u8])
  struct IWMPCdromBurn
    lpVtbl : IWMPCdromBurnVTbl*
  end

  struct IWMPQueryVTbl
    query_interface : Proc(IWMPQuery*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPQuery*, UInt32)
    release : Proc(IWMPQuery*, UInt32)
    get_type_info_count : Proc(IWMPQuery*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPQuery*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPQuery*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPQuery*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    add_condition : Proc(IWMPQuery*, UInt8*, UInt8*, UInt8*, HRESULT)
    begin_next_group : Proc(IWMPQuery*, HRESULT)
  end

  IWMPQuery_GUID = "a00918f3-a6b0-4bfb-9189-fd834c7bc5a5"
  IID_IWMPQuery = LibC::GUID.new(0xa00918f3_u32, 0xa6b0_u16, 0x4bfb_u16, StaticArray[0x91_u8, 0x89_u8, 0xfd_u8, 0x83_u8, 0x4c_u8, 0x7b_u8, 0xc5_u8, 0xa5_u8])
  struct IWMPQuery
    lpVtbl : IWMPQueryVTbl*
  end

  struct IWMPMediaCollection2VTbl
    query_interface : Proc(IWMPMediaCollection2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPMediaCollection2*, UInt32)
    release : Proc(IWMPMediaCollection2*, UInt32)
    get_type_info_count : Proc(IWMPMediaCollection2*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPMediaCollection2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPMediaCollection2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPMediaCollection2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    add : Proc(IWMPMediaCollection2*, UInt8*, IWMPMedia*, HRESULT)
    get_all : Proc(IWMPMediaCollection2*, IWMPPlaylist*, HRESULT)
    get_by_name : Proc(IWMPMediaCollection2*, UInt8*, IWMPPlaylist*, HRESULT)
    get_by_genre : Proc(IWMPMediaCollection2*, UInt8*, IWMPPlaylist*, HRESULT)
    get_by_author : Proc(IWMPMediaCollection2*, UInt8*, IWMPPlaylist*, HRESULT)
    get_by_album : Proc(IWMPMediaCollection2*, UInt8*, IWMPPlaylist*, HRESULT)
    get_by_attribute : Proc(IWMPMediaCollection2*, UInt8*, UInt8*, IWMPPlaylist*, HRESULT)
    remove : Proc(IWMPMediaCollection2*, IWMPMedia, Int16, HRESULT)
    get_attribute_string_collection : Proc(IWMPMediaCollection2*, UInt8*, UInt8*, IWMPStringCollection*, HRESULT)
    get_media_atom : Proc(IWMPMediaCollection2*, UInt8*, Int32*, HRESULT)
    set_deleted : Proc(IWMPMediaCollection2*, IWMPMedia, Int16, HRESULT)
    is_deleted : Proc(IWMPMediaCollection2*, IWMPMedia, Int16*, HRESULT)
    create_query : Proc(IWMPMediaCollection2*, IWMPQuery*, HRESULT)
    get_playlist_by_query : Proc(IWMPMediaCollection2*, IWMPQuery, UInt8*, UInt8*, Int16, IWMPPlaylist*, HRESULT)
    get_string_collection_by_query : Proc(IWMPMediaCollection2*, UInt8*, IWMPQuery, UInt8*, UInt8*, Int16, IWMPStringCollection*, HRESULT)
    get_by_attribute_and_media_type : Proc(IWMPMediaCollection2*, UInt8*, UInt8*, UInt8*, IWMPPlaylist*, HRESULT)
  end

  IWMPMediaCollection2_GUID = "8ba957f5-fd8c-4791-b82d-f840401ee474"
  IID_IWMPMediaCollection2 = LibC::GUID.new(0x8ba957f5_u32, 0xfd8c_u16, 0x4791_u16, StaticArray[0xb8_u8, 0x2d_u8, 0xf8_u8, 0x40_u8, 0x40_u8, 0x1e_u8, 0xe4_u8, 0x74_u8])
  struct IWMPMediaCollection2
    lpVtbl : IWMPMediaCollection2VTbl*
  end

  struct IWMPStringCollection2VTbl
    query_interface : Proc(IWMPStringCollection2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPStringCollection2*, UInt32)
    release : Proc(IWMPStringCollection2*, UInt32)
    get_type_info_count : Proc(IWMPStringCollection2*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPStringCollection2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPStringCollection2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPStringCollection2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(IWMPStringCollection2*, Int32*, HRESULT)
    item : Proc(IWMPStringCollection2*, Int32, UInt8**, HRESULT)
    is_identical : Proc(IWMPStringCollection2*, IWMPStringCollection2, Int16*, HRESULT)
    get_item_info : Proc(IWMPStringCollection2*, Int32, UInt8*, UInt8**, HRESULT)
    get_attribute_count_by_type : Proc(IWMPStringCollection2*, Int32, UInt8*, UInt8*, Int32*, HRESULT)
    get_item_info_by_type : Proc(IWMPStringCollection2*, Int32, UInt8*, UInt8*, Int32, VARIANT*, HRESULT)
  end

  IWMPStringCollection2_GUID = "46ad648d-53f1-4a74-92e2-2a1b68d63fd4"
  IID_IWMPStringCollection2 = LibC::GUID.new(0x46ad648d_u32, 0x53f1_u16, 0x4a74_u16, StaticArray[0x92_u8, 0xe2_u8, 0x2a_u8, 0x1b_u8, 0x68_u8, 0xd6_u8, 0x3f_u8, 0xd4_u8])
  struct IWMPStringCollection2
    lpVtbl : IWMPStringCollection2VTbl*
  end

  struct IWMPLibraryVTbl
    query_interface : Proc(IWMPLibrary*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPLibrary*, UInt32)
    release : Proc(IWMPLibrary*, UInt32)
    get_name : Proc(IWMPLibrary*, UInt8**, HRESULT)
    get_type : Proc(IWMPLibrary*, WMPLibraryType*, HRESULT)
    get_media_collection : Proc(IWMPLibrary*, IWMPMediaCollection*, HRESULT)
    is_identical : Proc(IWMPLibrary*, IWMPLibrary, Int16*, HRESULT)
  end

  IWMPLibrary_GUID = "3df47861-7df1-4c1f-a81b-4c26f0f7a7c6"
  IID_IWMPLibrary = LibC::GUID.new(0x3df47861_u32, 0x7df1_u16, 0x4c1f_u16, StaticArray[0xa8_u8, 0x1b_u8, 0x4c_u8, 0x26_u8, 0xf0_u8, 0xf7_u8, 0xa7_u8, 0xc6_u8])
  struct IWMPLibrary
    lpVtbl : IWMPLibraryVTbl*
  end

  struct IWMPLibraryServicesVTbl
    query_interface : Proc(IWMPLibraryServices*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPLibraryServices*, UInt32)
    release : Proc(IWMPLibraryServices*, UInt32)
    get_count_by_type : Proc(IWMPLibraryServices*, WMPLibraryType, Int32*, HRESULT)
    get_library_by_type : Proc(IWMPLibraryServices*, WMPLibraryType, Int32, IWMPLibrary*, HRESULT)
  end

  IWMPLibraryServices_GUID = "39c2f8d5-1cf2-4d5e-ae09-d73492cf9eaa"
  IID_IWMPLibraryServices = LibC::GUID.new(0x39c2f8d5_u32, 0x1cf2_u16, 0x4d5e_u16, StaticArray[0xae_u8, 0x9_u8, 0xd7_u8, 0x34_u8, 0x92_u8, 0xcf_u8, 0x9e_u8, 0xaa_u8])
  struct IWMPLibraryServices
    lpVtbl : IWMPLibraryServicesVTbl*
  end

  struct IWMPLibrarySharingServicesVTbl
    query_interface : Proc(IWMPLibrarySharingServices*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPLibrarySharingServices*, UInt32)
    release : Proc(IWMPLibrarySharingServices*, UInt32)
    is_library_shared : Proc(IWMPLibrarySharingServices*, Int16*, HRESULT)
    is_library_sharing_enabled : Proc(IWMPLibrarySharingServices*, Int16*, HRESULT)
    show_library_sharing : Proc(IWMPLibrarySharingServices*, HRESULT)
  end

  IWMPLibrarySharingServices_GUID = "82cba86b-9f04-474b-a365-d6dd1466e541"
  IID_IWMPLibrarySharingServices = LibC::GUID.new(0x82cba86b_u32, 0x9f04_u16, 0x474b_u16, StaticArray[0xa3_u8, 0x65_u8, 0xd6_u8, 0xdd_u8, 0x14_u8, 0x66_u8, 0xe5_u8, 0x41_u8])
  struct IWMPLibrarySharingServices
    lpVtbl : IWMPLibrarySharingServicesVTbl*
  end

  struct IWMPFolderMonitorServicesVTbl
    query_interface : Proc(IWMPFolderMonitorServices*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPFolderMonitorServices*, UInt32)
    release : Proc(IWMPFolderMonitorServices*, UInt32)
    get_count : Proc(IWMPFolderMonitorServices*, Int32*, HRESULT)
    item : Proc(IWMPFolderMonitorServices*, Int32, UInt8**, HRESULT)
    add : Proc(IWMPFolderMonitorServices*, UInt8*, HRESULT)
    remove : Proc(IWMPFolderMonitorServices*, Int32, HRESULT)
    get_scan_state : Proc(IWMPFolderMonitorServices*, WMPFolderScanState*, HRESULT)
    get_current_folder : Proc(IWMPFolderMonitorServices*, UInt8**, HRESULT)
    get_scanned_files_count : Proc(IWMPFolderMonitorServices*, Int32*, HRESULT)
    get_added_files_count : Proc(IWMPFolderMonitorServices*, Int32*, HRESULT)
    get_update_progress : Proc(IWMPFolderMonitorServices*, Int32*, HRESULT)
    start_scan : Proc(IWMPFolderMonitorServices*, HRESULT)
    stop_scan : Proc(IWMPFolderMonitorServices*, HRESULT)
  end

  IWMPFolderMonitorServices_GUID = "788c8743-e57f-439d-a468-5bc77f2e59c6"
  IID_IWMPFolderMonitorServices = LibC::GUID.new(0x788c8743_u32, 0xe57f_u16, 0x439d_u16, StaticArray[0xa4_u8, 0x68_u8, 0x5b_u8, 0xc7_u8, 0x7f_u8, 0x2e_u8, 0x59_u8, 0xc6_u8])
  struct IWMPFolderMonitorServices
    lpVtbl : IWMPFolderMonitorServicesVTbl*
  end

  struct IWMPSyncDevice2VTbl
    query_interface : Proc(IWMPSyncDevice2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPSyncDevice2*, UInt32)
    release : Proc(IWMPSyncDevice2*, UInt32)
    get_friendly_name : Proc(IWMPSyncDevice2*, UInt8**, HRESULT)
    put_friendly_name : Proc(IWMPSyncDevice2*, UInt8*, HRESULT)
    get_device_name : Proc(IWMPSyncDevice2*, UInt8**, HRESULT)
    get_device_id : Proc(IWMPSyncDevice2*, UInt8**, HRESULT)
    get_partnership_index : Proc(IWMPSyncDevice2*, Int32*, HRESULT)
    get_connected : Proc(IWMPSyncDevice2*, Int16*, HRESULT)
    get_status : Proc(IWMPSyncDevice2*, WMPDeviceStatus*, HRESULT)
    get_sync_state : Proc(IWMPSyncDevice2*, WMPSyncState*, HRESULT)
    get_progress : Proc(IWMPSyncDevice2*, Int32*, HRESULT)
    get_item_info : Proc(IWMPSyncDevice2*, UInt8*, UInt8**, HRESULT)
    create_partnership : Proc(IWMPSyncDevice2*, Int16, HRESULT)
    delete_partnership : Proc(IWMPSyncDevice2*, HRESULT)
    start : Proc(IWMPSyncDevice2*, HRESULT)
    stop : Proc(IWMPSyncDevice2*, HRESULT)
    show_settings : Proc(IWMPSyncDevice2*, HRESULT)
    is_identical : Proc(IWMPSyncDevice2*, IWMPSyncDevice, Int16*, HRESULT)
    set_item_info : Proc(IWMPSyncDevice2*, UInt8*, UInt8*, HRESULT)
  end

  IWMPSyncDevice2_GUID = "88afb4b2-140a-44d2-91e6-4543da467cd1"
  IID_IWMPSyncDevice2 = LibC::GUID.new(0x88afb4b2_u32, 0x140a_u16, 0x44d2_u16, StaticArray[0x91_u8, 0xe6_u8, 0x45_u8, 0x43_u8, 0xda_u8, 0x46_u8, 0x7c_u8, 0xd1_u8])
  struct IWMPSyncDevice2
    lpVtbl : IWMPSyncDevice2VTbl*
  end

  struct IWMPSyncDevice3VTbl
    query_interface : Proc(IWMPSyncDevice3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPSyncDevice3*, UInt32)
    release : Proc(IWMPSyncDevice3*, UInt32)
    get_friendly_name : Proc(IWMPSyncDevice3*, UInt8**, HRESULT)
    put_friendly_name : Proc(IWMPSyncDevice3*, UInt8*, HRESULT)
    get_device_name : Proc(IWMPSyncDevice3*, UInt8**, HRESULT)
    get_device_id : Proc(IWMPSyncDevice3*, UInt8**, HRESULT)
    get_partnership_index : Proc(IWMPSyncDevice3*, Int32*, HRESULT)
    get_connected : Proc(IWMPSyncDevice3*, Int16*, HRESULT)
    get_status : Proc(IWMPSyncDevice3*, WMPDeviceStatus*, HRESULT)
    get_sync_state : Proc(IWMPSyncDevice3*, WMPSyncState*, HRESULT)
    get_progress : Proc(IWMPSyncDevice3*, Int32*, HRESULT)
    get_item_info : Proc(IWMPSyncDevice3*, UInt8*, UInt8**, HRESULT)
    create_partnership : Proc(IWMPSyncDevice3*, Int16, HRESULT)
    delete_partnership : Proc(IWMPSyncDevice3*, HRESULT)
    start : Proc(IWMPSyncDevice3*, HRESULT)
    stop : Proc(IWMPSyncDevice3*, HRESULT)
    show_settings : Proc(IWMPSyncDevice3*, HRESULT)
    is_identical : Proc(IWMPSyncDevice3*, IWMPSyncDevice, Int16*, HRESULT)
    set_item_info : Proc(IWMPSyncDevice3*, UInt8*, UInt8*, HRESULT)
    estimate_sync_size : Proc(IWMPSyncDevice3*, IWMPPlaylist, IWMPPlaylist, HRESULT)
    cancel_estimation : Proc(IWMPSyncDevice3*, HRESULT)
  end

  IWMPSyncDevice3_GUID = "b22c85f9-263c-4372-a0da-b518db9b4098"
  IID_IWMPSyncDevice3 = LibC::GUID.new(0xb22c85f9_u32, 0x263c_u16, 0x4372_u16, StaticArray[0xa0_u8, 0xda_u8, 0xb5_u8, 0x18_u8, 0xdb_u8, 0x9b_u8, 0x40_u8, 0x98_u8])
  struct IWMPSyncDevice3
    lpVtbl : IWMPSyncDevice3VTbl*
  end

  struct IWMPLibrary2VTbl
    query_interface : Proc(IWMPLibrary2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPLibrary2*, UInt32)
    release : Proc(IWMPLibrary2*, UInt32)
    get_name : Proc(IWMPLibrary2*, UInt8**, HRESULT)
    get_type : Proc(IWMPLibrary2*, WMPLibraryType*, HRESULT)
    get_media_collection : Proc(IWMPLibrary2*, IWMPMediaCollection*, HRESULT)
    is_identical : Proc(IWMPLibrary2*, IWMPLibrary, Int16*, HRESULT)
    get_item_info : Proc(IWMPLibrary2*, UInt8*, UInt8**, HRESULT)
  end

  IWMPLibrary2_GUID = "dd578a4e-79b1-426c-bf8f-3add9072500b"
  IID_IWMPLibrary2 = LibC::GUID.new(0xdd578a4e_u32, 0x79b1_u16, 0x426c_u16, StaticArray[0xbf_u8, 0x8f_u8, 0x3a_u8, 0xdd_u8, 0x90_u8, 0x72_u8, 0x50_u8, 0xb_u8])
  struct IWMPLibrary2
    lpVtbl : IWMPLibrary2VTbl*
  end

  struct IWMPEventsVTbl
    query_interface : Proc(IWMPEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPEvents*, UInt32)
    release : Proc(IWMPEvents*, UInt32)
    open_state_change : Proc(IWMPEvents*, Int32, Void)
    play_state_change : Proc(IWMPEvents*, Int32, Void)
    audio_language_change : Proc(IWMPEvents*, Int32, Void)
    status_change : Proc(IWMPEvents*, Void)
    script_command : Proc(IWMPEvents*, UInt8*, UInt8*, Void)
    new_stream : Proc(IWMPEvents*, Void)
    disconnect : Proc(IWMPEvents*, Int32, Void)
    buffering : Proc(IWMPEvents*, Int16, Void)
    error : Proc(IWMPEvents*, Void)
    warning : Proc(IWMPEvents*, Int32, Int32, UInt8*, Void)
    end_of_stream : Proc(IWMPEvents*, Int32, Void)
    position_change : Proc(IWMPEvents*, Float64, Float64, Void)
    marker_hit : Proc(IWMPEvents*, Int32, Void)
    duration_unit_change : Proc(IWMPEvents*, Int32, Void)
    cdrom_media_change : Proc(IWMPEvents*, Int32, Void)
    playlist_change : Proc(IWMPEvents*, IDispatch, WMPPlaylistChangeEventType, Void)
    current_playlist_change : Proc(IWMPEvents*, WMPPlaylistChangeEventType, Void)
    current_playlist_item_available : Proc(IWMPEvents*, UInt8*, Void)
    media_change : Proc(IWMPEvents*, IDispatch, Void)
    current_media_item_available : Proc(IWMPEvents*, UInt8*, Void)
    current_item_change : Proc(IWMPEvents*, IDispatch, Void)
    media_collection_change : Proc(IWMPEvents*, Void)
    media_collection_attribute_string_added : Proc(IWMPEvents*, UInt8*, UInt8*, Void)
    media_collection_attribute_string_removed : Proc(IWMPEvents*, UInt8*, UInt8*, Void)
    media_collection_attribute_string_changed : Proc(IWMPEvents*, UInt8*, UInt8*, UInt8*, Void)
    playlist_collection_change : Proc(IWMPEvents*, Void)
    playlist_collection_playlist_added : Proc(IWMPEvents*, UInt8*, Void)
    playlist_collection_playlist_removed : Proc(IWMPEvents*, UInt8*, Void)
    playlist_collection_playlist_set_as_deleted : Proc(IWMPEvents*, UInt8*, Int16, Void)
    mode_change : Proc(IWMPEvents*, UInt8*, Int16, Void)
    media_error : Proc(IWMPEvents*, IDispatch, Void)
    open_playlist_switch : Proc(IWMPEvents*, IDispatch, Void)
    domain_change : Proc(IWMPEvents*, UInt8*, Void)
    switched_to_player_application : Proc(IWMPEvents*, Void)
    switched_to_control : Proc(IWMPEvents*, Void)
    player_docked_state_change : Proc(IWMPEvents*, Void)
    player_reconnect : Proc(IWMPEvents*, Void)
    click : Proc(IWMPEvents*, Int16, Int16, Int32, Int32, Void)
    double_click : Proc(IWMPEvents*, Int16, Int16, Int32, Int32, Void)
    key_down : Proc(IWMPEvents*, Int16, Int16, Void)
    key_press : Proc(IWMPEvents*, Int16, Void)
    key_up : Proc(IWMPEvents*, Int16, Int16, Void)
    mouse_down : Proc(IWMPEvents*, Int16, Int16, Int32, Int32, Void)
    mouse_move : Proc(IWMPEvents*, Int16, Int16, Int32, Int32, Void)
    mouse_up : Proc(IWMPEvents*, Int16, Int16, Int32, Int32, Void)
  end

  IWMPEvents_GUID = "19a6627b-da9e-47c1-bb23-00b5e668236a"
  IID_IWMPEvents = LibC::GUID.new(0x19a6627b_u32, 0xda9e_u16, 0x47c1_u16, StaticArray[0xbb_u8, 0x23_u8, 0x0_u8, 0xb5_u8, 0xe6_u8, 0x68_u8, 0x23_u8, 0x6a_u8])
  struct IWMPEvents
    lpVtbl : IWMPEventsVTbl*
  end

  struct IWMPEvents2VTbl
    query_interface : Proc(IWMPEvents2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPEvents2*, UInt32)
    release : Proc(IWMPEvents2*, UInt32)
    open_state_change : Proc(IWMPEvents2*, Int32, Void)
    play_state_change : Proc(IWMPEvents2*, Int32, Void)
    audio_language_change : Proc(IWMPEvents2*, Int32, Void)
    status_change : Proc(IWMPEvents2*, Void)
    script_command : Proc(IWMPEvents2*, UInt8*, UInt8*, Void)
    new_stream : Proc(IWMPEvents2*, Void)
    disconnect : Proc(IWMPEvents2*, Int32, Void)
    buffering : Proc(IWMPEvents2*, Int16, Void)
    error : Proc(IWMPEvents2*, Void)
    warning : Proc(IWMPEvents2*, Int32, Int32, UInt8*, Void)
    end_of_stream : Proc(IWMPEvents2*, Int32, Void)
    position_change : Proc(IWMPEvents2*, Float64, Float64, Void)
    marker_hit : Proc(IWMPEvents2*, Int32, Void)
    duration_unit_change : Proc(IWMPEvents2*, Int32, Void)
    cdrom_media_change : Proc(IWMPEvents2*, Int32, Void)
    playlist_change : Proc(IWMPEvents2*, IDispatch, WMPPlaylistChangeEventType, Void)
    current_playlist_change : Proc(IWMPEvents2*, WMPPlaylistChangeEventType, Void)
    current_playlist_item_available : Proc(IWMPEvents2*, UInt8*, Void)
    media_change : Proc(IWMPEvents2*, IDispatch, Void)
    current_media_item_available : Proc(IWMPEvents2*, UInt8*, Void)
    current_item_change : Proc(IWMPEvents2*, IDispatch, Void)
    media_collection_change : Proc(IWMPEvents2*, Void)
    media_collection_attribute_string_added : Proc(IWMPEvents2*, UInt8*, UInt8*, Void)
    media_collection_attribute_string_removed : Proc(IWMPEvents2*, UInt8*, UInt8*, Void)
    media_collection_attribute_string_changed : Proc(IWMPEvents2*, UInt8*, UInt8*, UInt8*, Void)
    playlist_collection_change : Proc(IWMPEvents2*, Void)
    playlist_collection_playlist_added : Proc(IWMPEvents2*, UInt8*, Void)
    playlist_collection_playlist_removed : Proc(IWMPEvents2*, UInt8*, Void)
    playlist_collection_playlist_set_as_deleted : Proc(IWMPEvents2*, UInt8*, Int16, Void)
    mode_change : Proc(IWMPEvents2*, UInt8*, Int16, Void)
    media_error : Proc(IWMPEvents2*, IDispatch, Void)
    open_playlist_switch : Proc(IWMPEvents2*, IDispatch, Void)
    domain_change : Proc(IWMPEvents2*, UInt8*, Void)
    switched_to_player_application : Proc(IWMPEvents2*, Void)
    switched_to_control : Proc(IWMPEvents2*, Void)
    player_docked_state_change : Proc(IWMPEvents2*, Void)
    player_reconnect : Proc(IWMPEvents2*, Void)
    click : Proc(IWMPEvents2*, Int16, Int16, Int32, Int32, Void)
    double_click : Proc(IWMPEvents2*, Int16, Int16, Int32, Int32, Void)
    key_down : Proc(IWMPEvents2*, Int16, Int16, Void)
    key_press : Proc(IWMPEvents2*, Int16, Void)
    key_up : Proc(IWMPEvents2*, Int16, Int16, Void)
    mouse_down : Proc(IWMPEvents2*, Int16, Int16, Int32, Int32, Void)
    mouse_move : Proc(IWMPEvents2*, Int16, Int16, Int32, Int32, Void)
    mouse_up : Proc(IWMPEvents2*, Int16, Int16, Int32, Int32, Void)
    device_connect : Proc(IWMPEvents2*, IWMPSyncDevice, Void)
    device_disconnect : Proc(IWMPEvents2*, IWMPSyncDevice, Void)
    device_status_change : Proc(IWMPEvents2*, IWMPSyncDevice, WMPDeviceStatus, Void)
    device_sync_state_change : Proc(IWMPEvents2*, IWMPSyncDevice, WMPSyncState, Void)
    device_sync_error : Proc(IWMPEvents2*, IWMPSyncDevice, IDispatch, Void)
    create_partnership_complete : Proc(IWMPEvents2*, IWMPSyncDevice, HRESULT, Void)
  end

  IWMPEvents2_GUID = "1e7601fa-47ea-4107-9ea9-9004ed9684ff"
  IID_IWMPEvents2 = LibC::GUID.new(0x1e7601fa_u32, 0x47ea_u16, 0x4107_u16, StaticArray[0x9e_u8, 0xa9_u8, 0x90_u8, 0x4_u8, 0xed_u8, 0x96_u8, 0x84_u8, 0xff_u8])
  struct IWMPEvents2
    lpVtbl : IWMPEvents2VTbl*
  end

  struct IWMPEvents3VTbl
    query_interface : Proc(IWMPEvents3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPEvents3*, UInt32)
    release : Proc(IWMPEvents3*, UInt32)
    open_state_change : Proc(IWMPEvents3*, Int32, Void)
    play_state_change : Proc(IWMPEvents3*, Int32, Void)
    audio_language_change : Proc(IWMPEvents3*, Int32, Void)
    status_change : Proc(IWMPEvents3*, Void)
    script_command : Proc(IWMPEvents3*, UInt8*, UInt8*, Void)
    new_stream : Proc(IWMPEvents3*, Void)
    disconnect : Proc(IWMPEvents3*, Int32, Void)
    buffering : Proc(IWMPEvents3*, Int16, Void)
    error : Proc(IWMPEvents3*, Void)
    warning : Proc(IWMPEvents3*, Int32, Int32, UInt8*, Void)
    end_of_stream : Proc(IWMPEvents3*, Int32, Void)
    position_change : Proc(IWMPEvents3*, Float64, Float64, Void)
    marker_hit : Proc(IWMPEvents3*, Int32, Void)
    duration_unit_change : Proc(IWMPEvents3*, Int32, Void)
    cdrom_media_change : Proc(IWMPEvents3*, Int32, Void)
    playlist_change : Proc(IWMPEvents3*, IDispatch, WMPPlaylistChangeEventType, Void)
    current_playlist_change : Proc(IWMPEvents3*, WMPPlaylistChangeEventType, Void)
    current_playlist_item_available : Proc(IWMPEvents3*, UInt8*, Void)
    media_change : Proc(IWMPEvents3*, IDispatch, Void)
    current_media_item_available : Proc(IWMPEvents3*, UInt8*, Void)
    current_item_change : Proc(IWMPEvents3*, IDispatch, Void)
    media_collection_change : Proc(IWMPEvents3*, Void)
    media_collection_attribute_string_added : Proc(IWMPEvents3*, UInt8*, UInt8*, Void)
    media_collection_attribute_string_removed : Proc(IWMPEvents3*, UInt8*, UInt8*, Void)
    media_collection_attribute_string_changed : Proc(IWMPEvents3*, UInt8*, UInt8*, UInt8*, Void)
    playlist_collection_change : Proc(IWMPEvents3*, Void)
    playlist_collection_playlist_added : Proc(IWMPEvents3*, UInt8*, Void)
    playlist_collection_playlist_removed : Proc(IWMPEvents3*, UInt8*, Void)
    playlist_collection_playlist_set_as_deleted : Proc(IWMPEvents3*, UInt8*, Int16, Void)
    mode_change : Proc(IWMPEvents3*, UInt8*, Int16, Void)
    media_error : Proc(IWMPEvents3*, IDispatch, Void)
    open_playlist_switch : Proc(IWMPEvents3*, IDispatch, Void)
    domain_change : Proc(IWMPEvents3*, UInt8*, Void)
    switched_to_player_application : Proc(IWMPEvents3*, Void)
    switched_to_control : Proc(IWMPEvents3*, Void)
    player_docked_state_change : Proc(IWMPEvents3*, Void)
    player_reconnect : Proc(IWMPEvents3*, Void)
    click : Proc(IWMPEvents3*, Int16, Int16, Int32, Int32, Void)
    double_click : Proc(IWMPEvents3*, Int16, Int16, Int32, Int32, Void)
    key_down : Proc(IWMPEvents3*, Int16, Int16, Void)
    key_press : Proc(IWMPEvents3*, Int16, Void)
    key_up : Proc(IWMPEvents3*, Int16, Int16, Void)
    mouse_down : Proc(IWMPEvents3*, Int16, Int16, Int32, Int32, Void)
    mouse_move : Proc(IWMPEvents3*, Int16, Int16, Int32, Int32, Void)
    mouse_up : Proc(IWMPEvents3*, Int16, Int16, Int32, Int32, Void)
    device_connect : Proc(IWMPEvents3*, IWMPSyncDevice, Void)
    device_disconnect : Proc(IWMPEvents3*, IWMPSyncDevice, Void)
    device_status_change : Proc(IWMPEvents3*, IWMPSyncDevice, WMPDeviceStatus, Void)
    device_sync_state_change : Proc(IWMPEvents3*, IWMPSyncDevice, WMPSyncState, Void)
    device_sync_error : Proc(IWMPEvents3*, IWMPSyncDevice, IDispatch, Void)
    create_partnership_complete : Proc(IWMPEvents3*, IWMPSyncDevice, HRESULT, Void)
    cdrom_rip_state_change : Proc(IWMPEvents3*, IWMPCdromRip, WMPRipState, Void)
    cdrom_rip_media_error : Proc(IWMPEvents3*, IWMPCdromRip, IDispatch, Void)
    cdrom_burn_state_change : Proc(IWMPEvents3*, IWMPCdromBurn, WMPBurnState, Void)
    cdrom_burn_media_error : Proc(IWMPEvents3*, IWMPCdromBurn, IDispatch, Void)
    cdrom_burn_error : Proc(IWMPEvents3*, IWMPCdromBurn, HRESULT, Void)
    library_connect : Proc(IWMPEvents3*, IWMPLibrary, Void)
    library_disconnect : Proc(IWMPEvents3*, IWMPLibrary, Void)
    folder_scan_state_change : Proc(IWMPEvents3*, WMPFolderScanState, Void)
    string_collection_change : Proc(IWMPEvents3*, IDispatch, WMPStringCollectionChangeEventType, Int32, Void)
    media_collection_media_added : Proc(IWMPEvents3*, IDispatch, Void)
    media_collection_media_removed : Proc(IWMPEvents3*, IDispatch, Void)
  end

  IWMPEvents3_GUID = "1f504270-a66b-4223-8e96-26a06c63d69f"
  IID_IWMPEvents3 = LibC::GUID.new(0x1f504270_u32, 0xa66b_u16, 0x4223_u16, StaticArray[0x8e_u8, 0x96_u8, 0x26_u8, 0xa0_u8, 0x6c_u8, 0x63_u8, 0xd6_u8, 0x9f_u8])
  struct IWMPEvents3
    lpVtbl : IWMPEvents3VTbl*
  end

  struct IWMPEvents4VTbl
    query_interface : Proc(IWMPEvents4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPEvents4*, UInt32)
    release : Proc(IWMPEvents4*, UInt32)
    open_state_change : Proc(IWMPEvents4*, Int32, Void)
    play_state_change : Proc(IWMPEvents4*, Int32, Void)
    audio_language_change : Proc(IWMPEvents4*, Int32, Void)
    status_change : Proc(IWMPEvents4*, Void)
    script_command : Proc(IWMPEvents4*, UInt8*, UInt8*, Void)
    new_stream : Proc(IWMPEvents4*, Void)
    disconnect : Proc(IWMPEvents4*, Int32, Void)
    buffering : Proc(IWMPEvents4*, Int16, Void)
    error : Proc(IWMPEvents4*, Void)
    warning : Proc(IWMPEvents4*, Int32, Int32, UInt8*, Void)
    end_of_stream : Proc(IWMPEvents4*, Int32, Void)
    position_change : Proc(IWMPEvents4*, Float64, Float64, Void)
    marker_hit : Proc(IWMPEvents4*, Int32, Void)
    duration_unit_change : Proc(IWMPEvents4*, Int32, Void)
    cdrom_media_change : Proc(IWMPEvents4*, Int32, Void)
    playlist_change : Proc(IWMPEvents4*, IDispatch, WMPPlaylistChangeEventType, Void)
    current_playlist_change : Proc(IWMPEvents4*, WMPPlaylistChangeEventType, Void)
    current_playlist_item_available : Proc(IWMPEvents4*, UInt8*, Void)
    media_change : Proc(IWMPEvents4*, IDispatch, Void)
    current_media_item_available : Proc(IWMPEvents4*, UInt8*, Void)
    current_item_change : Proc(IWMPEvents4*, IDispatch, Void)
    media_collection_change : Proc(IWMPEvents4*, Void)
    media_collection_attribute_string_added : Proc(IWMPEvents4*, UInt8*, UInt8*, Void)
    media_collection_attribute_string_removed : Proc(IWMPEvents4*, UInt8*, UInt8*, Void)
    media_collection_attribute_string_changed : Proc(IWMPEvents4*, UInt8*, UInt8*, UInt8*, Void)
    playlist_collection_change : Proc(IWMPEvents4*, Void)
    playlist_collection_playlist_added : Proc(IWMPEvents4*, UInt8*, Void)
    playlist_collection_playlist_removed : Proc(IWMPEvents4*, UInt8*, Void)
    playlist_collection_playlist_set_as_deleted : Proc(IWMPEvents4*, UInt8*, Int16, Void)
    mode_change : Proc(IWMPEvents4*, UInt8*, Int16, Void)
    media_error : Proc(IWMPEvents4*, IDispatch, Void)
    open_playlist_switch : Proc(IWMPEvents4*, IDispatch, Void)
    domain_change : Proc(IWMPEvents4*, UInt8*, Void)
    switched_to_player_application : Proc(IWMPEvents4*, Void)
    switched_to_control : Proc(IWMPEvents4*, Void)
    player_docked_state_change : Proc(IWMPEvents4*, Void)
    player_reconnect : Proc(IWMPEvents4*, Void)
    click : Proc(IWMPEvents4*, Int16, Int16, Int32, Int32, Void)
    double_click : Proc(IWMPEvents4*, Int16, Int16, Int32, Int32, Void)
    key_down : Proc(IWMPEvents4*, Int16, Int16, Void)
    key_press : Proc(IWMPEvents4*, Int16, Void)
    key_up : Proc(IWMPEvents4*, Int16, Int16, Void)
    mouse_down : Proc(IWMPEvents4*, Int16, Int16, Int32, Int32, Void)
    mouse_move : Proc(IWMPEvents4*, Int16, Int16, Int32, Int32, Void)
    mouse_up : Proc(IWMPEvents4*, Int16, Int16, Int32, Int32, Void)
    device_connect : Proc(IWMPEvents4*, IWMPSyncDevice, Void)
    device_disconnect : Proc(IWMPEvents4*, IWMPSyncDevice, Void)
    device_status_change : Proc(IWMPEvents4*, IWMPSyncDevice, WMPDeviceStatus, Void)
    device_sync_state_change : Proc(IWMPEvents4*, IWMPSyncDevice, WMPSyncState, Void)
    device_sync_error : Proc(IWMPEvents4*, IWMPSyncDevice, IDispatch, Void)
    create_partnership_complete : Proc(IWMPEvents4*, IWMPSyncDevice, HRESULT, Void)
    cdrom_rip_state_change : Proc(IWMPEvents4*, IWMPCdromRip, WMPRipState, Void)
    cdrom_rip_media_error : Proc(IWMPEvents4*, IWMPCdromRip, IDispatch, Void)
    cdrom_burn_state_change : Proc(IWMPEvents4*, IWMPCdromBurn, WMPBurnState, Void)
    cdrom_burn_media_error : Proc(IWMPEvents4*, IWMPCdromBurn, IDispatch, Void)
    cdrom_burn_error : Proc(IWMPEvents4*, IWMPCdromBurn, HRESULT, Void)
    library_connect : Proc(IWMPEvents4*, IWMPLibrary, Void)
    library_disconnect : Proc(IWMPEvents4*, IWMPLibrary, Void)
    folder_scan_state_change : Proc(IWMPEvents4*, WMPFolderScanState, Void)
    string_collection_change : Proc(IWMPEvents4*, IDispatch, WMPStringCollectionChangeEventType, Int32, Void)
    media_collection_media_added : Proc(IWMPEvents4*, IDispatch, Void)
    media_collection_media_removed : Proc(IWMPEvents4*, IDispatch, Void)
    device_estimation : Proc(IWMPEvents4*, IWMPSyncDevice, HRESULT, Int64, Int64, Void)
  end

  IWMPEvents4_GUID = "26dabcfa-306b-404d-9a6f-630a8405048d"
  IID_IWMPEvents4 = LibC::GUID.new(0x26dabcfa_u32, 0x306b_u16, 0x404d_u16, StaticArray[0x9a_u8, 0x6f_u8, 0x63_u8, 0xa_u8, 0x84_u8, 0x5_u8, 0x4_u8, 0x8d_u8])
  struct IWMPEvents4
    lpVtbl : IWMPEvents4VTbl*
  end

  struct IWMPOCXEventsVTbl
    query_interface : Proc(IWMPOCXEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPOCXEvents*, UInt32)
    release : Proc(IWMPOCXEvents*, UInt32)
    get_type_info_count : Proc(IWMPOCXEvents*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPOCXEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPOCXEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPOCXEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  IWMPOCXEvents_GUID = "6bf52a51-394a-11d3-b153-00c04f79faa6"
  IID_IWMPOCXEvents = LibC::GUID.new(0x6bf52a51_u32, 0x394a_u16, 0x11d3_u16, StaticArray[0xb1_u8, 0x53_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0xfa_u8, 0xa6_u8])
  struct IWMPOCXEvents
    lpVtbl : IWMPOCXEventsVTbl*
  end

  struct IWMPNodeRealEstateVTbl
    query_interface : Proc(IWMPNodeRealEstate*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPNodeRealEstate*, UInt32)
    release : Proc(IWMPNodeRealEstate*, UInt32)
    get_desired_size : Proc(IWMPNodeRealEstate*, SIZE*, HRESULT)
    set_rects : Proc(IWMPNodeRealEstate*, RECT*, RECT*, RECT*, HRESULT)
    get_rects : Proc(IWMPNodeRealEstate*, RECT*, RECT*, RECT*, HRESULT)
    set_windowless : Proc(IWMPNodeRealEstate*, LibC::BOOL, HRESULT)
    get_windowless : Proc(IWMPNodeRealEstate*, LibC::BOOL*, HRESULT)
    set_full_screen : Proc(IWMPNodeRealEstate*, LibC::BOOL, HRESULT)
    get_full_screen : Proc(IWMPNodeRealEstate*, LibC::BOOL*, HRESULT)
  end

  IWMPNodeRealEstate_GUID = "42751198-5a50-4460-bcb4-709f8bdc8e59"
  IID_IWMPNodeRealEstate = LibC::GUID.new(0x42751198_u32, 0x5a50_u16, 0x4460_u16, StaticArray[0xbc_u8, 0xb4_u8, 0x70_u8, 0x9f_u8, 0x8b_u8, 0xdc_u8, 0x8e_u8, 0x59_u8])
  struct IWMPNodeRealEstate
    lpVtbl : IWMPNodeRealEstateVTbl*
  end

  struct IWMPNodeRealEstateHostVTbl
    query_interface : Proc(IWMPNodeRealEstateHost*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPNodeRealEstateHost*, UInt32)
    release : Proc(IWMPNodeRealEstateHost*, UInt32)
    on_desired_size_change : Proc(IWMPNodeRealEstateHost*, SIZE*, HRESULT)
    on_full_screen_transition : Proc(IWMPNodeRealEstateHost*, LibC::BOOL, HRESULT)
  end

  IWMPNodeRealEstateHost_GUID = "1491087d-2c6b-44c8-b019-b3c929d2ada9"
  IID_IWMPNodeRealEstateHost = LibC::GUID.new(0x1491087d_u32, 0x2c6b_u16, 0x44c8_u16, StaticArray[0xb0_u8, 0x19_u8, 0xb3_u8, 0xc9_u8, 0x29_u8, 0xd2_u8, 0xad_u8, 0xa9_u8])
  struct IWMPNodeRealEstateHost
    lpVtbl : IWMPNodeRealEstateHostVTbl*
  end

  struct IWMPNodeWindowedVTbl
    query_interface : Proc(IWMPNodeWindowed*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPNodeWindowed*, UInt32)
    release : Proc(IWMPNodeWindowed*, UInt32)
    set_owner_window : Proc(IWMPNodeWindowed*, LibC::IntPtrT, HRESULT)
    get_owner_window : Proc(IWMPNodeWindowed*, LibC::IntPtrT*, HRESULT)
  end

  IWMPNodeWindowed_GUID = "96740bfa-c56a-45d1-a3a4-762914d4ade9"
  IID_IWMPNodeWindowed = LibC::GUID.new(0x96740bfa_u32, 0xc56a_u16, 0x45d1_u16, StaticArray[0xa3_u8, 0xa4_u8, 0x76_u8, 0x29_u8, 0x14_u8, 0xd4_u8, 0xad_u8, 0xe9_u8])
  struct IWMPNodeWindowed
    lpVtbl : IWMPNodeWindowedVTbl*
  end

  struct IWMPNodeWindowedHostVTbl
    query_interface : Proc(IWMPNodeWindowedHost*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPNodeWindowedHost*, UInt32)
    release : Proc(IWMPNodeWindowedHost*, UInt32)
    on_window_message_from_renderer : Proc(IWMPNodeWindowedHost*, UInt32, LibC::UINT_PTR, LPARAM, LRESULT*, LibC::BOOL*, HRESULT)
  end

  IWMPNodeWindowedHost_GUID = "a300415a-54aa-4081-adbf-3b13610d8958"
  IID_IWMPNodeWindowedHost = LibC::GUID.new(0xa300415a_u32, 0x54aa_u16, 0x4081_u16, StaticArray[0xad_u8, 0xbf_u8, 0x3b_u8, 0x13_u8, 0x61_u8, 0xd_u8, 0x89_u8, 0x58_u8])
  struct IWMPNodeWindowedHost
    lpVtbl : IWMPNodeWindowedHostVTbl*
  end

  struct IWMPWindowMessageSinkVTbl
    query_interface : Proc(IWMPWindowMessageSink*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPWindowMessageSink*, UInt32)
    release : Proc(IWMPWindowMessageSink*, UInt32)
    on_window_message : Proc(IWMPWindowMessageSink*, UInt32, LibC::UINT_PTR, LPARAM, LRESULT*, LibC::BOOL*, HRESULT)
  end

  IWMPWindowMessageSink_GUID = "3a0daa30-908d-4789-ba87-aed879b5c49b"
  IID_IWMPWindowMessageSink = LibC::GUID.new(0x3a0daa30_u32, 0x908d_u16, 0x4789_u16, StaticArray[0xba_u8, 0x87_u8, 0xae_u8, 0xd8_u8, 0x79_u8, 0xb5_u8, 0xc4_u8, 0x9b_u8])
  struct IWMPWindowMessageSink
    lpVtbl : IWMPWindowMessageSinkVTbl*
  end

  struct IWMPNodeWindowlessVTbl
    query_interface : Proc(IWMPNodeWindowless*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPNodeWindowless*, UInt32)
    release : Proc(IWMPNodeWindowless*, UInt32)
    on_window_message : Proc(IWMPNodeWindowless*, UInt32, LibC::UINT_PTR, LPARAM, LRESULT*, LibC::BOOL*, HRESULT)
    on_draw : Proc(IWMPNodeWindowless*, LibC::IntPtrT, RECT*, HRESULT)
  end

  IWMPNodeWindowless_GUID = "9b9199ad-780c-4eda-b816-261eba5d1575"
  IID_IWMPNodeWindowless = LibC::GUID.new(0x9b9199ad_u32, 0x780c_u16, 0x4eda_u16, StaticArray[0xb8_u8, 0x16_u8, 0x26_u8, 0x1e_u8, 0xba_u8, 0x5d_u8, 0x15_u8, 0x75_u8])
  struct IWMPNodeWindowless
    lpVtbl : IWMPNodeWindowlessVTbl*
  end

  struct IWMPNodeWindowlessHostVTbl
    query_interface : Proc(IWMPNodeWindowlessHost*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPNodeWindowlessHost*, UInt32)
    release : Proc(IWMPNodeWindowlessHost*, UInt32)
    invalidate_rect : Proc(IWMPNodeWindowlessHost*, RECT*, LibC::BOOL, HRESULT)
  end

  IWMPNodeWindowlessHost_GUID = "be7017c6-ce34-4901-8106-770381aa6e3e"
  IID_IWMPNodeWindowlessHost = LibC::GUID.new(0xbe7017c6_u32, 0xce34_u16, 0x4901_u16, StaticArray[0x81_u8, 0x6_u8, 0x77_u8, 0x3_u8, 0x81_u8, 0xaa_u8, 0x6e_u8, 0x3e_u8])
  struct IWMPNodeWindowlessHost
    lpVtbl : IWMPNodeWindowlessHostVTbl*
  end

  struct IWMPVideoRenderConfigVTbl
    query_interface : Proc(IWMPVideoRenderConfig*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPVideoRenderConfig*, UInt32)
    release : Proc(IWMPVideoRenderConfig*, UInt32)
    put_presenter_activate : Proc(IWMPVideoRenderConfig*, IMFActivate, HRESULT)
  end

  IWMPVideoRenderConfig_GUID = "6d6cf803-1ec0-4c8d-b3ca-f18e27282074"
  IID_IWMPVideoRenderConfig = LibC::GUID.new(0x6d6cf803_u32, 0x1ec0_u16, 0x4c8d_u16, StaticArray[0xb3_u8, 0xca_u8, 0xf1_u8, 0x8e_u8, 0x27_u8, 0x28_u8, 0x20_u8, 0x74_u8])
  struct IWMPVideoRenderConfig
    lpVtbl : IWMPVideoRenderConfigVTbl*
  end

  struct IWMPAudioRenderConfigVTbl
    query_interface : Proc(IWMPAudioRenderConfig*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPAudioRenderConfig*, UInt32)
    release : Proc(IWMPAudioRenderConfig*, UInt32)
    get_audio_output_device : Proc(IWMPAudioRenderConfig*, UInt8**, HRESULT)
    put_audio_output_device : Proc(IWMPAudioRenderConfig*, UInt8*, HRESULT)
  end

  IWMPAudioRenderConfig_GUID = "e79c6349-5997-4ce4-917c-22a3391ec564"
  IID_IWMPAudioRenderConfig = LibC::GUID.new(0xe79c6349_u32, 0x5997_u16, 0x4ce4_u16, StaticArray[0x91_u8, 0x7c_u8, 0x22_u8, 0xa3_u8, 0x39_u8, 0x1e_u8, 0xc5_u8, 0x64_u8])
  struct IWMPAudioRenderConfig
    lpVtbl : IWMPAudioRenderConfigVTbl*
  end

  struct IWMPRenderConfigVTbl
    query_interface : Proc(IWMPRenderConfig*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPRenderConfig*, UInt32)
    release : Proc(IWMPRenderConfig*, UInt32)
    put_in_proc_only : Proc(IWMPRenderConfig*, LibC::BOOL, HRESULT)
    get_in_proc_only : Proc(IWMPRenderConfig*, LibC::BOOL*, HRESULT)
  end

  IWMPRenderConfig_GUID = "959506c1-0314-4ec5-9e61-8528db5e5478"
  IID_IWMPRenderConfig = LibC::GUID.new(0x959506c1_u32, 0x314_u16, 0x4ec5_u16, StaticArray[0x9e_u8, 0x61_u8, 0x85_u8, 0x28_u8, 0xdb_u8, 0x5e_u8, 0x54_u8, 0x78_u8])
  struct IWMPRenderConfig
    lpVtbl : IWMPRenderConfigVTbl*
  end

  struct IWMPServicesVTbl
    query_interface : Proc(IWMPServices*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPServices*, UInt32)
    release : Proc(IWMPServices*, UInt32)
    get_stream_time : Proc(IWMPServices*, Int64*, HRESULT)
    get_stream_state : Proc(IWMPServices*, WMPServices_StreamState*, HRESULT)
  end

  IWMPServices_GUID = "afb6b76b-1e20-4198-83b3-191db6e0b149"
  IID_IWMPServices = LibC::GUID.new(0xafb6b76b_u32, 0x1e20_u16, 0x4198_u16, StaticArray[0x83_u8, 0xb3_u8, 0x19_u8, 0x1d_u8, 0xb6_u8, 0xe0_u8, 0xb1_u8, 0x49_u8])
  struct IWMPServices
    lpVtbl : IWMPServicesVTbl*
  end

  struct IWMPMediaPluginRegistrarVTbl
    query_interface : Proc(IWMPMediaPluginRegistrar*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPMediaPluginRegistrar*, UInt32)
    release : Proc(IWMPMediaPluginRegistrar*, UInt32)
    wmp_register_player_plugin : Proc(IWMPMediaPluginRegistrar*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, UInt32, Guid, Guid, UInt32, Void*, HRESULT)
    wmp_un_register_player_plugin : Proc(IWMPMediaPluginRegistrar*, Guid, Guid, HRESULT)
  end

  IWMPMediaPluginRegistrar_GUID = "68e27045-05bd-40b2-9720-23088c78e390"
  IID_IWMPMediaPluginRegistrar = LibC::GUID.new(0x68e27045_u32, 0x5bd_u16, 0x40b2_u16, StaticArray[0x97_u8, 0x20_u8, 0x23_u8, 0x8_u8, 0x8c_u8, 0x78_u8, 0xe3_u8, 0x90_u8])
  struct IWMPMediaPluginRegistrar
    lpVtbl : IWMPMediaPluginRegistrarVTbl*
  end

  struct IWMPPluginVTbl
    query_interface : Proc(IWMPPlugin*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPPlugin*, UInt32)
    release : Proc(IWMPPlugin*, UInt32)
    init : Proc(IWMPPlugin*, LibC::UINT_PTR, HRESULT)
    shutdown : Proc(IWMPPlugin*, HRESULT)
    get_id : Proc(IWMPPlugin*, Guid*, HRESULT)
    get_caps : Proc(IWMPPlugin*, UInt32*, HRESULT)
    advise_wmp_services : Proc(IWMPPlugin*, IWMPServices, HRESULT)
    un_advise_wmp_services : Proc(IWMPPlugin*, HRESULT)
  end

  IWMPPlugin_GUID = "f1392a70-024c-42bb-a998-73dfdfe7d5a7"
  IID_IWMPPlugin = LibC::GUID.new(0xf1392a70_u32, 0x24c_u16, 0x42bb_u16, StaticArray[0xa9_u8, 0x98_u8, 0x73_u8, 0xdf_u8, 0xdf_u8, 0xe7_u8, 0xd5_u8, 0xa7_u8])
  struct IWMPPlugin
    lpVtbl : IWMPPluginVTbl*
  end

  struct IWMPPluginEnableVTbl
    query_interface : Proc(IWMPPluginEnable*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPPluginEnable*, UInt32)
    release : Proc(IWMPPluginEnable*, UInt32)
    set_enable : Proc(IWMPPluginEnable*, LibC::BOOL, HRESULT)
    get_enable : Proc(IWMPPluginEnable*, LibC::BOOL*, HRESULT)
  end

  IWMPPluginEnable_GUID = "5fca444c-7ad1-479d-a4ef-40566a5309d6"
  IID_IWMPPluginEnable = LibC::GUID.new(0x5fca444c_u32, 0x7ad1_u16, 0x479d_u16, StaticArray[0xa4_u8, 0xef_u8, 0x40_u8, 0x56_u8, 0x6a_u8, 0x53_u8, 0x9_u8, 0xd6_u8])
  struct IWMPPluginEnable
    lpVtbl : IWMPPluginEnableVTbl*
  end

  struct IWMPGraphCreationVTbl
    query_interface : Proc(IWMPGraphCreation*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPGraphCreation*, UInt32)
    release : Proc(IWMPGraphCreation*, UInt32)
    graph_creation_pre_render : Proc(IWMPGraphCreation*, IUnknown, IUnknown, HRESULT)
    graph_creation_post_render : Proc(IWMPGraphCreation*, IUnknown, HRESULT)
    get_graph_creation_flags : Proc(IWMPGraphCreation*, UInt32*, HRESULT)
  end

  IWMPGraphCreation_GUID = "bfb377e5-c594-4369-a970-de896d5ece74"
  IID_IWMPGraphCreation = LibC::GUID.new(0xbfb377e5_u32, 0xc594_u16, 0x4369_u16, StaticArray[0xa9_u8, 0x70_u8, 0xde_u8, 0x89_u8, 0x6d_u8, 0x5e_u8, 0xce_u8, 0x74_u8])
  struct IWMPGraphCreation
    lpVtbl : IWMPGraphCreationVTbl*
  end

  struct IWMPConvertVTbl
    query_interface : Proc(IWMPConvert*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPConvert*, UInt32)
    release : Proc(IWMPConvert*, UInt32)
    convert_file : Proc(IWMPConvert*, UInt8*, UInt8*, UInt8**, HRESULT)
    get_error_url : Proc(IWMPConvert*, UInt8**, HRESULT)
  end

  IWMPConvert_GUID = "d683162f-57d4-4108-8373-4a9676d1c2e9"
  IID_IWMPConvert = LibC::GUID.new(0xd683162f_u32, 0x57d4_u16, 0x4108_u16, StaticArray[0x83_u8, 0x73_u8, 0x4a_u8, 0x96_u8, 0x76_u8, 0xd1_u8, 0xc2_u8, 0xe9_u8])
  struct IWMPConvert
    lpVtbl : IWMPConvertVTbl*
  end

  struct IWMPTranscodePolicyVTbl
    query_interface : Proc(IWMPTranscodePolicy*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPTranscodePolicy*, UInt32)
    release : Proc(IWMPTranscodePolicy*, UInt32)
    allow_transcode : Proc(IWMPTranscodePolicy*, Int16*, HRESULT)
  end

  IWMPTranscodePolicy_GUID = "b64cbac3-401c-4327-a3e8-b9feb3a8c25c"
  IID_IWMPTranscodePolicy = LibC::GUID.new(0xb64cbac3_u32, 0x401c_u16, 0x4327_u16, StaticArray[0xa3_u8, 0xe8_u8, 0xb9_u8, 0xfe_u8, 0xb3_u8, 0xa8_u8, 0xc2_u8, 0x5c_u8])
  struct IWMPTranscodePolicy
    lpVtbl : IWMPTranscodePolicyVTbl*
  end

  struct IWMPUserEventSinkVTbl
    query_interface : Proc(IWMPUserEventSink*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPUserEventSink*, UInt32)
    release : Proc(IWMPUserEventSink*, UInt32)
    notify_user_event : Proc(IWMPUserEventSink*, Int32, HRESULT)
  end

  IWMPUserEventSink_GUID = "cfccfa72-c343-48c3-a2de-b7a4402e39f2"
  IID_IWMPUserEventSink = LibC::GUID.new(0xcfccfa72_u32, 0xc343_u16, 0x48c3_u16, StaticArray[0xa2_u8, 0xde_u8, 0xb7_u8, 0xa4_u8, 0x40_u8, 0x2e_u8, 0x39_u8, 0xf2_u8])
  struct IWMPUserEventSink
    lpVtbl : IWMPUserEventSinkVTbl*
  end

  struct IXFeedsManagerVTbl
    query_interface : Proc(IXFeedsManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IXFeedsManager*, UInt32)
    release : Proc(IXFeedsManager*, UInt32)
    root_folder : Proc(IXFeedsManager*, Guid*, Void**, HRESULT)
    is_subscribed : Proc(IXFeedsManager*, LibC::LPWSTR, LibC::BOOL*, HRESULT)
    exists_feed : Proc(IXFeedsManager*, LibC::LPWSTR, LibC::BOOL*, HRESULT)
    get_feed : Proc(IXFeedsManager*, LibC::LPWSTR, Guid*, Void**, HRESULT)
    get_feed_by_url : Proc(IXFeedsManager*, LibC::LPWSTR, Guid*, Void**, HRESULT)
    exists_folder : Proc(IXFeedsManager*, LibC::LPWSTR, LibC::BOOL*, HRESULT)
    get_folder : Proc(IXFeedsManager*, LibC::LPWSTR, Guid*, Void**, HRESULT)
    delete_feed : Proc(IXFeedsManager*, LibC::LPWSTR, HRESULT)
    delete_folder : Proc(IXFeedsManager*, LibC::LPWSTR, HRESULT)
    background_sync : Proc(IXFeedsManager*, FEEDS_BACKGROUNDSYNC_ACTION, HRESULT)
    background_sync_status : Proc(IXFeedsManager*, FEEDS_BACKGROUNDSYNC_STATUS*, HRESULT)
    default_interval : Proc(IXFeedsManager*, UInt32*, HRESULT)
    set_default_interval : Proc(IXFeedsManager*, UInt32, HRESULT)
    async_sync_all : Proc(IXFeedsManager*, HRESULT)
    normalize : Proc(IXFeedsManager*, IStream, IStream*, HRESULT)
    item_count_limit : Proc(IXFeedsManager*, UInt32*, HRESULT)
  end

  IXFeedsManager_GUID = "5357e238-fb12-4aca-a930-cab7832b84bf"
  IID_IXFeedsManager = LibC::GUID.new(0x5357e238_u32, 0xfb12_u16, 0x4aca_u16, StaticArray[0xa9_u8, 0x30_u8, 0xca_u8, 0xb7_u8, 0x83_u8, 0x2b_u8, 0x84_u8, 0xbf_u8])
  struct IXFeedsManager
    lpVtbl : IXFeedsManagerVTbl*
  end

  struct IXFeedsEnumVTbl
    query_interface : Proc(IXFeedsEnum*, Guid*, Void**, HRESULT)
    add_ref : Proc(IXFeedsEnum*, UInt32)
    release : Proc(IXFeedsEnum*, UInt32)
    count : Proc(IXFeedsEnum*, UInt32*, HRESULT)
    item : Proc(IXFeedsEnum*, UInt32, Guid*, Void**, HRESULT)
  end

  IXFeedsEnum_GUID = "dc43a9d5-5015-4301-8c96-a47434b4d658"
  IID_IXFeedsEnum = LibC::GUID.new(0xdc43a9d5_u32, 0x5015_u16, 0x4301_u16, StaticArray[0x8c_u8, 0x96_u8, 0xa4_u8, 0x74_u8, 0x34_u8, 0xb4_u8, 0xd6_u8, 0x58_u8])
  struct IXFeedsEnum
    lpVtbl : IXFeedsEnumVTbl*
  end

  struct IXFeedFolderVTbl
    query_interface : Proc(IXFeedFolder*, Guid*, Void**, HRESULT)
    add_ref : Proc(IXFeedFolder*, UInt32)
    release : Proc(IXFeedFolder*, UInt32)
    feeds : Proc(IXFeedFolder*, IXFeedsEnum*, HRESULT)
    subfolders : Proc(IXFeedFolder*, IXFeedsEnum*, HRESULT)
    create_feed : Proc(IXFeedFolder*, LibC::LPWSTR, LibC::LPWSTR, Guid*, Void**, HRESULT)
    create_subfolder : Proc(IXFeedFolder*, LibC::LPWSTR, Guid*, Void**, HRESULT)
    exists_feed : Proc(IXFeedFolder*, LibC::LPWSTR, LibC::BOOL*, HRESULT)
    exists_subfolder : Proc(IXFeedFolder*, LibC::LPWSTR, LibC::BOOL*, HRESULT)
    get_feed : Proc(IXFeedFolder*, LibC::LPWSTR, Guid*, Void**, HRESULT)
    get_subfolder : Proc(IXFeedFolder*, LibC::LPWSTR, Guid*, Void**, HRESULT)
    delete : Proc(IXFeedFolder*, HRESULT)
    name : Proc(IXFeedFolder*, LibC::LPWSTR*, HRESULT)
    rename : Proc(IXFeedFolder*, LibC::LPWSTR, HRESULT)
    path : Proc(IXFeedFolder*, LibC::LPWSTR*, HRESULT)
    move : Proc(IXFeedFolder*, LibC::LPWSTR, HRESULT)
    parent : Proc(IXFeedFolder*, Guid*, Void**, HRESULT)
    is_root : Proc(IXFeedFolder*, LibC::BOOL*, HRESULT)
    get_watcher : Proc(IXFeedFolder*, FEEDS_EVENTS_SCOPE, FEEDS_EVENTS_MASK, Guid*, Void**, HRESULT)
    total_unread_item_count : Proc(IXFeedFolder*, UInt32*, HRESULT)
    total_item_count : Proc(IXFeedFolder*, UInt32*, HRESULT)
  end

  IXFeedFolder_GUID = "4c963678-3a51-4b88-8531-98b90b6508f2"
  IID_IXFeedFolder = LibC::GUID.new(0x4c963678_u32, 0x3a51_u16, 0x4b88_u16, StaticArray[0x85_u8, 0x31_u8, 0x98_u8, 0xb9_u8, 0xb_u8, 0x65_u8, 0x8_u8, 0xf2_u8])
  struct IXFeedFolder
    lpVtbl : IXFeedFolderVTbl*
  end

  struct IXFeedFolderEventsVTbl
    query_interface : Proc(IXFeedFolderEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(IXFeedFolderEvents*, UInt32)
    release : Proc(IXFeedFolderEvents*, UInt32)
    error : Proc(IXFeedFolderEvents*, HRESULT)
    folder_added : Proc(IXFeedFolderEvents*, LibC::LPWSTR, HRESULT)
    folder_deleted : Proc(IXFeedFolderEvents*, LibC::LPWSTR, HRESULT)
    folder_renamed : Proc(IXFeedFolderEvents*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    folder_moved_from : Proc(IXFeedFolderEvents*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    folder_moved_to : Proc(IXFeedFolderEvents*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    folder_item_count_changed : Proc(IXFeedFolderEvents*, LibC::LPWSTR, Int32, HRESULT)
    feed_added : Proc(IXFeedFolderEvents*, LibC::LPWSTR, HRESULT)
    feed_deleted : Proc(IXFeedFolderEvents*, LibC::LPWSTR, HRESULT)
    feed_renamed : Proc(IXFeedFolderEvents*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    feed_url_changed : Proc(IXFeedFolderEvents*, LibC::LPWSTR, HRESULT)
    feed_moved_from : Proc(IXFeedFolderEvents*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    feed_moved_to : Proc(IXFeedFolderEvents*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    feed_downloading : Proc(IXFeedFolderEvents*, LibC::LPWSTR, HRESULT)
    feed_download_completed : Proc(IXFeedFolderEvents*, LibC::LPWSTR, FEEDS_DOWNLOAD_ERROR, HRESULT)
    feed_item_count_changed : Proc(IXFeedFolderEvents*, LibC::LPWSTR, Int32, HRESULT)
  end

  IXFeedFolderEvents_GUID = "7964b769-234a-4bb1-a5f4-90454c8ad07e"
  IID_IXFeedFolderEvents = LibC::GUID.new(0x7964b769_u32, 0x234a_u16, 0x4bb1_u16, StaticArray[0xa5_u8, 0xf4_u8, 0x90_u8, 0x45_u8, 0x4c_u8, 0x8a_u8, 0xd0_u8, 0x7e_u8])
  struct IXFeedFolderEvents
    lpVtbl : IXFeedFolderEventsVTbl*
  end

  struct IXFeedVTbl
    query_interface : Proc(IXFeed*, Guid*, Void**, HRESULT)
    add_ref : Proc(IXFeed*, UInt32)
    release : Proc(IXFeed*, UInt32)
    xml : Proc(IXFeed*, UInt32, FEEDS_XML_SORT_PROPERTY, FEEDS_XML_SORT_ORDER, FEEDS_XML_FILTER_FLAGS, FEEDS_XML_INCLUDE_FLAGS, IStream*, HRESULT)
    name : Proc(IXFeed*, LibC::LPWSTR*, HRESULT)
    rename : Proc(IXFeed*, LibC::LPWSTR, HRESULT)
    url : Proc(IXFeed*, LibC::LPWSTR*, HRESULT)
    set_url : Proc(IXFeed*, LibC::LPWSTR, HRESULT)
    local_id : Proc(IXFeed*, Guid*, HRESULT)
    path : Proc(IXFeed*, LibC::LPWSTR*, HRESULT)
    move : Proc(IXFeed*, LibC::LPWSTR, HRESULT)
    parent : Proc(IXFeed*, Guid*, Void**, HRESULT)
    last_write_time : Proc(IXFeed*, SYSTEMTIME*, HRESULT)
    delete : Proc(IXFeed*, HRESULT)
    download : Proc(IXFeed*, HRESULT)
    async_download : Proc(IXFeed*, HRESULT)
    cancel_async_download : Proc(IXFeed*, HRESULT)
    sync_setting : Proc(IXFeed*, FEEDS_SYNC_SETTING*, HRESULT)
    set_sync_setting : Proc(IXFeed*, FEEDS_SYNC_SETTING, HRESULT)
    interval : Proc(IXFeed*, UInt32*, HRESULT)
    set_interval : Proc(IXFeed*, UInt32, HRESULT)
    last_download_time : Proc(IXFeed*, SYSTEMTIME*, HRESULT)
    local_enclosure_path : Proc(IXFeed*, LibC::LPWSTR*, HRESULT)
    items : Proc(IXFeed*, IXFeedsEnum*, HRESULT)
    get_item : Proc(IXFeed*, UInt32, Guid*, Void**, HRESULT)
    mark_all_items_read : Proc(IXFeed*, HRESULT)
    max_item_count : Proc(IXFeed*, UInt32*, HRESULT)
    set_max_item_count : Proc(IXFeed*, UInt32, HRESULT)
    download_enclosures_automatically : Proc(IXFeed*, LibC::BOOL*, HRESULT)
    set_download_enclosures_automatically : Proc(IXFeed*, LibC::BOOL, HRESULT)
    download_status : Proc(IXFeed*, FEEDS_DOWNLOAD_STATUS*, HRESULT)
    last_download_error : Proc(IXFeed*, FEEDS_DOWNLOAD_ERROR*, HRESULT)
    merge : Proc(IXFeed*, IStream, LibC::LPWSTR, HRESULT)
    download_url : Proc(IXFeed*, LibC::LPWSTR*, HRESULT)
    title : Proc(IXFeed*, LibC::LPWSTR*, HRESULT)
    description : Proc(IXFeed*, LibC::LPWSTR*, HRESULT)
    link : Proc(IXFeed*, LibC::LPWSTR*, HRESULT)
    image : Proc(IXFeed*, LibC::LPWSTR*, HRESULT)
    last_build_date : Proc(IXFeed*, SYSTEMTIME*, HRESULT)
    pub_date : Proc(IXFeed*, SYSTEMTIME*, HRESULT)
    ttl : Proc(IXFeed*, UInt32*, HRESULT)
    language : Proc(IXFeed*, LibC::LPWSTR*, HRESULT)
    copyright : Proc(IXFeed*, LibC::LPWSTR*, HRESULT)
    is_list : Proc(IXFeed*, LibC::BOOL*, HRESULT)
    get_watcher : Proc(IXFeed*, FEEDS_EVENTS_SCOPE, FEEDS_EVENTS_MASK, Guid*, Void**, HRESULT)
    unread_item_count : Proc(IXFeed*, UInt32*, HRESULT)
    item_count : Proc(IXFeed*, UInt32*, HRESULT)
  end

  IXFeed_GUID = "a44179a4-e0f6-403b-af8d-d080f425a451"
  IID_IXFeed = LibC::GUID.new(0xa44179a4_u32, 0xe0f6_u16, 0x403b_u16, StaticArray[0xaf_u8, 0x8d_u8, 0xd0_u8, 0x80_u8, 0xf4_u8, 0x25_u8, 0xa4_u8, 0x51_u8])
  struct IXFeed
    lpVtbl : IXFeedVTbl*
  end

  struct IXFeed2VTbl
    query_interface : Proc(IXFeed2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IXFeed2*, UInt32)
    release : Proc(IXFeed2*, UInt32)
    xml : Proc(IXFeed2*, UInt32, FEEDS_XML_SORT_PROPERTY, FEEDS_XML_SORT_ORDER, FEEDS_XML_FILTER_FLAGS, FEEDS_XML_INCLUDE_FLAGS, IStream*, HRESULT)
    name : Proc(IXFeed2*, LibC::LPWSTR*, HRESULT)
    rename : Proc(IXFeed2*, LibC::LPWSTR, HRESULT)
    url : Proc(IXFeed2*, LibC::LPWSTR*, HRESULT)
    set_url : Proc(IXFeed2*, LibC::LPWSTR, HRESULT)
    local_id : Proc(IXFeed2*, Guid*, HRESULT)
    path : Proc(IXFeed2*, LibC::LPWSTR*, HRESULT)
    move : Proc(IXFeed2*, LibC::LPWSTR, HRESULT)
    parent : Proc(IXFeed2*, Guid*, Void**, HRESULT)
    last_write_time : Proc(IXFeed2*, SYSTEMTIME*, HRESULT)
    delete : Proc(IXFeed2*, HRESULT)
    download : Proc(IXFeed2*, HRESULT)
    async_download : Proc(IXFeed2*, HRESULT)
    cancel_async_download : Proc(IXFeed2*, HRESULT)
    sync_setting : Proc(IXFeed2*, FEEDS_SYNC_SETTING*, HRESULT)
    set_sync_setting : Proc(IXFeed2*, FEEDS_SYNC_SETTING, HRESULT)
    interval : Proc(IXFeed2*, UInt32*, HRESULT)
    set_interval : Proc(IXFeed2*, UInt32, HRESULT)
    last_download_time : Proc(IXFeed2*, SYSTEMTIME*, HRESULT)
    local_enclosure_path : Proc(IXFeed2*, LibC::LPWSTR*, HRESULT)
    items : Proc(IXFeed2*, IXFeedsEnum*, HRESULT)
    get_item : Proc(IXFeed2*, UInt32, Guid*, Void**, HRESULT)
    mark_all_items_read : Proc(IXFeed2*, HRESULT)
    max_item_count : Proc(IXFeed2*, UInt32*, HRESULT)
    set_max_item_count : Proc(IXFeed2*, UInt32, HRESULT)
    download_enclosures_automatically : Proc(IXFeed2*, LibC::BOOL*, HRESULT)
    set_download_enclosures_automatically : Proc(IXFeed2*, LibC::BOOL, HRESULT)
    download_status : Proc(IXFeed2*, FEEDS_DOWNLOAD_STATUS*, HRESULT)
    last_download_error : Proc(IXFeed2*, FEEDS_DOWNLOAD_ERROR*, HRESULT)
    merge : Proc(IXFeed2*, IStream, LibC::LPWSTR, HRESULT)
    download_url : Proc(IXFeed2*, LibC::LPWSTR*, HRESULT)
    title : Proc(IXFeed2*, LibC::LPWSTR*, HRESULT)
    description : Proc(IXFeed2*, LibC::LPWSTR*, HRESULT)
    link : Proc(IXFeed2*, LibC::LPWSTR*, HRESULT)
    image : Proc(IXFeed2*, LibC::LPWSTR*, HRESULT)
    last_build_date : Proc(IXFeed2*, SYSTEMTIME*, HRESULT)
    pub_date : Proc(IXFeed2*, SYSTEMTIME*, HRESULT)
    ttl : Proc(IXFeed2*, UInt32*, HRESULT)
    language : Proc(IXFeed2*, LibC::LPWSTR*, HRESULT)
    copyright : Proc(IXFeed2*, LibC::LPWSTR*, HRESULT)
    is_list : Proc(IXFeed2*, LibC::BOOL*, HRESULT)
    get_watcher : Proc(IXFeed2*, FEEDS_EVENTS_SCOPE, FEEDS_EVENTS_MASK, Guid*, Void**, HRESULT)
    unread_item_count : Proc(IXFeed2*, UInt32*, HRESULT)
    item_count : Proc(IXFeed2*, UInt32*, HRESULT)
    get_item_by_effective_id : Proc(IXFeed2*, UInt32, Guid*, Void**, HRESULT)
    last_item_download_time : Proc(IXFeed2*, SYSTEMTIME*, HRESULT)
    username : Proc(IXFeed2*, LibC::LPWSTR*, HRESULT)
    password : Proc(IXFeed2*, LibC::LPWSTR*, HRESULT)
    set_credentials : Proc(IXFeed2*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    clear_credentials : Proc(IXFeed2*, HRESULT)
  end

  IXFeed2_GUID = "ce528e77-3716-4eb7-956d-f5e37502e12a"
  IID_IXFeed2 = LibC::GUID.new(0xce528e77_u32, 0x3716_u16, 0x4eb7_u16, StaticArray[0x95_u8, 0x6d_u8, 0xf5_u8, 0xe3_u8, 0x75_u8, 0x2_u8, 0xe1_u8, 0x2a_u8])
  struct IXFeed2
    lpVtbl : IXFeed2VTbl*
  end

  struct IXFeedEventsVTbl
    query_interface : Proc(IXFeedEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(IXFeedEvents*, UInt32)
    release : Proc(IXFeedEvents*, UInt32)
    error : Proc(IXFeedEvents*, HRESULT)
    feed_deleted : Proc(IXFeedEvents*, LibC::LPWSTR, HRESULT)
    feed_renamed : Proc(IXFeedEvents*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    feed_url_changed : Proc(IXFeedEvents*, LibC::LPWSTR, HRESULT)
    feed_moved : Proc(IXFeedEvents*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    feed_downloading : Proc(IXFeedEvents*, LibC::LPWSTR, HRESULT)
    feed_download_completed : Proc(IXFeedEvents*, LibC::LPWSTR, FEEDS_DOWNLOAD_ERROR, HRESULT)
    feed_item_count_changed : Proc(IXFeedEvents*, LibC::LPWSTR, Int32, HRESULT)
  end

  IXFeedEvents_GUID = "1630852e-1263-465b-98e5-fe60ffec4ac2"
  IID_IXFeedEvents = LibC::GUID.new(0x1630852e_u32, 0x1263_u16, 0x465b_u16, StaticArray[0x98_u8, 0xe5_u8, 0xfe_u8, 0x60_u8, 0xff_u8, 0xec_u8, 0x4a_u8, 0xc2_u8])
  struct IXFeedEvents
    lpVtbl : IXFeedEventsVTbl*
  end

  struct IXFeedItemVTbl
    query_interface : Proc(IXFeedItem*, Guid*, Void**, HRESULT)
    add_ref : Proc(IXFeedItem*, UInt32)
    release : Proc(IXFeedItem*, UInt32)
    xml : Proc(IXFeedItem*, FEEDS_XML_INCLUDE_FLAGS, IStream*, HRESULT)
    title : Proc(IXFeedItem*, LibC::LPWSTR*, HRESULT)
    link : Proc(IXFeedItem*, LibC::LPWSTR*, HRESULT)
    guid : Proc(IXFeedItem*, LibC::LPWSTR*, HRESULT)
    description : Proc(IXFeedItem*, LibC::LPWSTR*, HRESULT)
    pub_date : Proc(IXFeedItem*, SYSTEMTIME*, HRESULT)
    comments : Proc(IXFeedItem*, LibC::LPWSTR*, HRESULT)
    author : Proc(IXFeedItem*, LibC::LPWSTR*, HRESULT)
    enclosure : Proc(IXFeedItem*, Guid*, Void**, HRESULT)
    is_read : Proc(IXFeedItem*, LibC::BOOL*, HRESULT)
    set_is_read : Proc(IXFeedItem*, LibC::BOOL, HRESULT)
    local_id : Proc(IXFeedItem*, UInt32*, HRESULT)
    parent : Proc(IXFeedItem*, Guid*, Void**, HRESULT)
    delete : Proc(IXFeedItem*, HRESULT)
    download_url : Proc(IXFeedItem*, LibC::LPWSTR*, HRESULT)
    last_download_time : Proc(IXFeedItem*, SYSTEMTIME*, HRESULT)
    modified : Proc(IXFeedItem*, SYSTEMTIME*, HRESULT)
  end

  IXFeedItem_GUID = "e757b2f5-e73e-434e-a1bf-2bd7c3e60fcb"
  IID_IXFeedItem = LibC::GUID.new(0xe757b2f5_u32, 0xe73e_u16, 0x434e_u16, StaticArray[0xa1_u8, 0xbf_u8, 0x2b_u8, 0xd7_u8, 0xc3_u8, 0xe6_u8, 0xf_u8, 0xcb_u8])
  struct IXFeedItem
    lpVtbl : IXFeedItemVTbl*
  end

  struct IXFeedItem2VTbl
    query_interface : Proc(IXFeedItem2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IXFeedItem2*, UInt32)
    release : Proc(IXFeedItem2*, UInt32)
    xml : Proc(IXFeedItem2*, FEEDS_XML_INCLUDE_FLAGS, IStream*, HRESULT)
    title : Proc(IXFeedItem2*, LibC::LPWSTR*, HRESULT)
    link : Proc(IXFeedItem2*, LibC::LPWSTR*, HRESULT)
    guid : Proc(IXFeedItem2*, LibC::LPWSTR*, HRESULT)
    description : Proc(IXFeedItem2*, LibC::LPWSTR*, HRESULT)
    pub_date : Proc(IXFeedItem2*, SYSTEMTIME*, HRESULT)
    comments : Proc(IXFeedItem2*, LibC::LPWSTR*, HRESULT)
    author : Proc(IXFeedItem2*, LibC::LPWSTR*, HRESULT)
    enclosure : Proc(IXFeedItem2*, Guid*, Void**, HRESULT)
    is_read : Proc(IXFeedItem2*, LibC::BOOL*, HRESULT)
    set_is_read : Proc(IXFeedItem2*, LibC::BOOL, HRESULT)
    local_id : Proc(IXFeedItem2*, UInt32*, HRESULT)
    parent : Proc(IXFeedItem2*, Guid*, Void**, HRESULT)
    delete : Proc(IXFeedItem2*, HRESULT)
    download_url : Proc(IXFeedItem2*, LibC::LPWSTR*, HRESULT)
    last_download_time : Proc(IXFeedItem2*, SYSTEMTIME*, HRESULT)
    modified : Proc(IXFeedItem2*, SYSTEMTIME*, HRESULT)
    effective_id : Proc(IXFeedItem2*, UInt32*, HRESULT)
  end

  IXFeedItem2_GUID = "6cda2dc7-9013-4522-9970-2a9dd9ead5a3"
  IID_IXFeedItem2 = LibC::GUID.new(0x6cda2dc7_u32, 0x9013_u16, 0x4522_u16, StaticArray[0x99_u8, 0x70_u8, 0x2a_u8, 0x9d_u8, 0xd9_u8, 0xea_u8, 0xd5_u8, 0xa3_u8])
  struct IXFeedItem2
    lpVtbl : IXFeedItem2VTbl*
  end

  struct IXFeedEnclosureVTbl
    query_interface : Proc(IXFeedEnclosure*, Guid*, Void**, HRESULT)
    add_ref : Proc(IXFeedEnclosure*, UInt32)
    release : Proc(IXFeedEnclosure*, UInt32)
    url : Proc(IXFeedEnclosure*, LibC::LPWSTR*, HRESULT)
    type : Proc(IXFeedEnclosure*, LibC::LPWSTR*, HRESULT)
    length : Proc(IXFeedEnclosure*, UInt32*, HRESULT)
    async_download : Proc(IXFeedEnclosure*, HRESULT)
    cancel_async_download : Proc(IXFeedEnclosure*, HRESULT)
    download_status : Proc(IXFeedEnclosure*, FEEDS_DOWNLOAD_STATUS*, HRESULT)
    last_download_error : Proc(IXFeedEnclosure*, FEEDS_DOWNLOAD_ERROR*, HRESULT)
    local_path : Proc(IXFeedEnclosure*, LibC::LPWSTR*, HRESULT)
    parent : Proc(IXFeedEnclosure*, Guid*, Void**, HRESULT)
    download_url : Proc(IXFeedEnclosure*, LibC::LPWSTR*, HRESULT)
    download_mime_type : Proc(IXFeedEnclosure*, LibC::LPWSTR*, HRESULT)
    remove_file : Proc(IXFeedEnclosure*, HRESULT)
    set_file : Proc(IXFeedEnclosure*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
  end

  IXFeedEnclosure_GUID = "bfbfb953-644f-4792-b69c-dfaca4cbf89a"
  IID_IXFeedEnclosure = LibC::GUID.new(0xbfbfb953_u32, 0x644f_u16, 0x4792_u16, StaticArray[0xb6_u8, 0x9c_u8, 0xdf_u8, 0xac_u8, 0xa4_u8, 0xcb_u8, 0xf8_u8, 0x9a_u8])
  struct IXFeedEnclosure
    lpVtbl : IXFeedEnclosureVTbl*
  end

  struct IFeedsManagerVTbl
    query_interface : Proc(IFeedsManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFeedsManager*, UInt32)
    release : Proc(IFeedsManager*, UInt32)
    get_type_info_count : Proc(IFeedsManager*, UInt32*, HRESULT)
    get_type_info : Proc(IFeedsManager*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IFeedsManager*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IFeedsManager*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_root_folder : Proc(IFeedsManager*, IDispatch*, HRESULT)
    is_subscribed : Proc(IFeedsManager*, UInt8*, Int16*, HRESULT)
    exists_feed : Proc(IFeedsManager*, UInt8*, Int16*, HRESULT)
    get_feed : Proc(IFeedsManager*, UInt8*, IDispatch*, HRESULT)
    get_feed_by_url : Proc(IFeedsManager*, UInt8*, IDispatch*, HRESULT)
    exists_folder : Proc(IFeedsManager*, UInt8*, Int16*, HRESULT)
    get_folder : Proc(IFeedsManager*, UInt8*, IDispatch*, HRESULT)
    delete_feed : Proc(IFeedsManager*, UInt8*, HRESULT)
    delete_folder : Proc(IFeedsManager*, UInt8*, HRESULT)
    background_sync : Proc(IFeedsManager*, FEEDS_BACKGROUNDSYNC_ACTION, HRESULT)
    get_background_sync_status : Proc(IFeedsManager*, FEEDS_BACKGROUNDSYNC_STATUS*, HRESULT)
    get_default_interval : Proc(IFeedsManager*, Int32*, HRESULT)
    put_default_interval : Proc(IFeedsManager*, Int32, HRESULT)
    async_sync_all : Proc(IFeedsManager*, HRESULT)
    normalize : Proc(IFeedsManager*, UInt8*, UInt8**, HRESULT)
    get_item_count_limit : Proc(IFeedsManager*, Int32*, HRESULT)
  end

  IFeedsManager_GUID = "a74029cc-1f1a-4906-88f0-810638d86591"
  IID_IFeedsManager = LibC::GUID.new(0xa74029cc_u32, 0x1f1a_u16, 0x4906_u16, StaticArray[0x88_u8, 0xf0_u8, 0x81_u8, 0x6_u8, 0x38_u8, 0xd8_u8, 0x65_u8, 0x91_u8])
  struct IFeedsManager
    lpVtbl : IFeedsManagerVTbl*
  end

  struct IFeedsEnumVTbl
    query_interface : Proc(IFeedsEnum*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFeedsEnum*, UInt32)
    release : Proc(IFeedsEnum*, UInt32)
    get_type_info_count : Proc(IFeedsEnum*, UInt32*, HRESULT)
    get_type_info : Proc(IFeedsEnum*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IFeedsEnum*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IFeedsEnum*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(IFeedsEnum*, Int32*, HRESULT)
    item : Proc(IFeedsEnum*, Int32, IDispatch*, HRESULT)
    get__new_enum : Proc(IFeedsEnum*, IEnumVARIANT*, HRESULT)
  end

  IFeedsEnum_GUID = "e3cd0028-2eed-4c60-8fae-a3225309a836"
  IID_IFeedsEnum = LibC::GUID.new(0xe3cd0028_u32, 0x2eed_u16, 0x4c60_u16, StaticArray[0x8f_u8, 0xae_u8, 0xa3_u8, 0x22_u8, 0x53_u8, 0x9_u8, 0xa8_u8, 0x36_u8])
  struct IFeedsEnum
    lpVtbl : IFeedsEnumVTbl*
  end

  struct IFeedFolderVTbl
    query_interface : Proc(IFeedFolder*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFeedFolder*, UInt32)
    release : Proc(IFeedFolder*, UInt32)
    get_type_info_count : Proc(IFeedFolder*, UInt32*, HRESULT)
    get_type_info : Proc(IFeedFolder*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IFeedFolder*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IFeedFolder*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_feeds : Proc(IFeedFolder*, IDispatch*, HRESULT)
    get_subfolders : Proc(IFeedFolder*, IDispatch*, HRESULT)
    create_feed : Proc(IFeedFolder*, UInt8*, UInt8*, IDispatch*, HRESULT)
    create_subfolder : Proc(IFeedFolder*, UInt8*, IDispatch*, HRESULT)
    exists_feed : Proc(IFeedFolder*, UInt8*, Int16*, HRESULT)
    get_feed : Proc(IFeedFolder*, UInt8*, IDispatch*, HRESULT)
    exists_subfolder : Proc(IFeedFolder*, UInt8*, Int16*, HRESULT)
    get_subfolder : Proc(IFeedFolder*, UInt8*, IDispatch*, HRESULT)
    delete : Proc(IFeedFolder*, HRESULT)
    get_name : Proc(IFeedFolder*, UInt8**, HRESULT)
    rename : Proc(IFeedFolder*, UInt8*, HRESULT)
    get_path : Proc(IFeedFolder*, UInt8**, HRESULT)
    move : Proc(IFeedFolder*, UInt8*, HRESULT)
    get_parent : Proc(IFeedFolder*, IDispatch*, HRESULT)
    get_is_root : Proc(IFeedFolder*, Int16*, HRESULT)
    get_total_unread_item_count : Proc(IFeedFolder*, Int32*, HRESULT)
    get_total_item_count : Proc(IFeedFolder*, Int32*, HRESULT)
    get_watcher : Proc(IFeedFolder*, FEEDS_EVENTS_SCOPE, FEEDS_EVENTS_MASK, IDispatch*, HRESULT)
  end

  IFeedFolder_GUID = "81f04ad1-4194-4d7d-86d6-11813cec163c"
  IID_IFeedFolder = LibC::GUID.new(0x81f04ad1_u32, 0x4194_u16, 0x4d7d_u16, StaticArray[0x86_u8, 0xd6_u8, 0x11_u8, 0x81_u8, 0x3c_u8, 0xec_u8, 0x16_u8, 0x3c_u8])
  struct IFeedFolder
    lpVtbl : IFeedFolderVTbl*
  end

  struct IFeedFolderEventsVTbl
    query_interface : Proc(IFeedFolderEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFeedFolderEvents*, UInt32)
    release : Proc(IFeedFolderEvents*, UInt32)
    get_type_info_count : Proc(IFeedFolderEvents*, UInt32*, HRESULT)
    get_type_info : Proc(IFeedFolderEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IFeedFolderEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IFeedFolderEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    error : Proc(IFeedFolderEvents*, HRESULT)
    folder_added : Proc(IFeedFolderEvents*, UInt8*, HRESULT)
    folder_deleted : Proc(IFeedFolderEvents*, UInt8*, HRESULT)
    folder_renamed : Proc(IFeedFolderEvents*, UInt8*, UInt8*, HRESULT)
    folder_moved_from : Proc(IFeedFolderEvents*, UInt8*, UInt8*, HRESULT)
    folder_moved_to : Proc(IFeedFolderEvents*, UInt8*, UInt8*, HRESULT)
    folder_item_count_changed : Proc(IFeedFolderEvents*, UInt8*, Int32, HRESULT)
    feed_added : Proc(IFeedFolderEvents*, UInt8*, HRESULT)
    feed_deleted : Proc(IFeedFolderEvents*, UInt8*, HRESULT)
    feed_renamed : Proc(IFeedFolderEvents*, UInt8*, UInt8*, HRESULT)
    feed_url_changed : Proc(IFeedFolderEvents*, UInt8*, HRESULT)
    feed_moved_from : Proc(IFeedFolderEvents*, UInt8*, UInt8*, HRESULT)
    feed_moved_to : Proc(IFeedFolderEvents*, UInt8*, UInt8*, HRESULT)
    feed_downloading : Proc(IFeedFolderEvents*, UInt8*, HRESULT)
    feed_download_completed : Proc(IFeedFolderEvents*, UInt8*, FEEDS_DOWNLOAD_ERROR, HRESULT)
    feed_item_count_changed : Proc(IFeedFolderEvents*, UInt8*, Int32, HRESULT)
  end

  IFeedFolderEvents_GUID = "20a59fa6-a844-4630-9e98-175f70b4d55b"
  IID_IFeedFolderEvents = LibC::GUID.new(0x20a59fa6_u32, 0xa844_u16, 0x4630_u16, StaticArray[0x9e_u8, 0x98_u8, 0x17_u8, 0x5f_u8, 0x70_u8, 0xb4_u8, 0xd5_u8, 0x5b_u8])
  struct IFeedFolderEvents
    lpVtbl : IFeedFolderEventsVTbl*
  end

  struct IFeedVTbl
    query_interface : Proc(IFeed*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFeed*, UInt32)
    release : Proc(IFeed*, UInt32)
    get_type_info_count : Proc(IFeed*, UInt32*, HRESULT)
    get_type_info : Proc(IFeed*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IFeed*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IFeed*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    xml : Proc(IFeed*, Int32, FEEDS_XML_SORT_PROPERTY, FEEDS_XML_SORT_ORDER, FEEDS_XML_FILTER_FLAGS, FEEDS_XML_INCLUDE_FLAGS, UInt8**, HRESULT)
    get_name : Proc(IFeed*, UInt8**, HRESULT)
    rename : Proc(IFeed*, UInt8*, HRESULT)
    get_url : Proc(IFeed*, UInt8**, HRESULT)
    put_url : Proc(IFeed*, UInt8*, HRESULT)
    get_local_id : Proc(IFeed*, UInt8**, HRESULT)
    get_path : Proc(IFeed*, UInt8**, HRESULT)
    move : Proc(IFeed*, UInt8*, HRESULT)
    get_parent : Proc(IFeed*, IDispatch*, HRESULT)
    get_last_write_time : Proc(IFeed*, Float64*, HRESULT)
    delete : Proc(IFeed*, HRESULT)
    download : Proc(IFeed*, HRESULT)
    async_download : Proc(IFeed*, HRESULT)
    cancel_async_download : Proc(IFeed*, HRESULT)
    get_sync_setting : Proc(IFeed*, FEEDS_SYNC_SETTING*, HRESULT)
    put_sync_setting : Proc(IFeed*, FEEDS_SYNC_SETTING, HRESULT)
    get_interval : Proc(IFeed*, Int32*, HRESULT)
    put_interval : Proc(IFeed*, Int32, HRESULT)
    get_last_download_time : Proc(IFeed*, Float64*, HRESULT)
    get_local_enclosure_path : Proc(IFeed*, UInt8**, HRESULT)
    get_items : Proc(IFeed*, IDispatch*, HRESULT)
    get_item : Proc(IFeed*, Int32, IDispatch*, HRESULT)
    get_title : Proc(IFeed*, UInt8**, HRESULT)
    get_description : Proc(IFeed*, UInt8**, HRESULT)
    get_link : Proc(IFeed*, UInt8**, HRESULT)
    get_image : Proc(IFeed*, UInt8**, HRESULT)
    get_last_build_date : Proc(IFeed*, Float64*, HRESULT)
    get_pub_date : Proc(IFeed*, Float64*, HRESULT)
    get_ttl : Proc(IFeed*, Int32*, HRESULT)
    get_language : Proc(IFeed*, UInt8**, HRESULT)
    get_copyright : Proc(IFeed*, UInt8**, HRESULT)
    get_max_item_count : Proc(IFeed*, Int32*, HRESULT)
    put_max_item_count : Proc(IFeed*, Int32, HRESULT)
    get_download_enclosures_automatically : Proc(IFeed*, Int16*, HRESULT)
    put_download_enclosures_automatically : Proc(IFeed*, Int16, HRESULT)
    get_download_status : Proc(IFeed*, FEEDS_DOWNLOAD_STATUS*, HRESULT)
    get_last_download_error : Proc(IFeed*, FEEDS_DOWNLOAD_ERROR*, HRESULT)
    merge : Proc(IFeed*, UInt8*, UInt8*, HRESULT)
    get_download_url : Proc(IFeed*, UInt8**, HRESULT)
    get_is_list : Proc(IFeed*, Int16*, HRESULT)
    mark_all_items_read : Proc(IFeed*, HRESULT)
    get_watcher : Proc(IFeed*, FEEDS_EVENTS_SCOPE, FEEDS_EVENTS_MASK, IDispatch*, HRESULT)
    get_unread_item_count : Proc(IFeed*, Int32*, HRESULT)
    get_item_count : Proc(IFeed*, Int32*, HRESULT)
  end

  IFeed_GUID = "f7f915d8-2ede-42bc-98e7-a5d05063a757"
  IID_IFeed = LibC::GUID.new(0xf7f915d8_u32, 0x2ede_u16, 0x42bc_u16, StaticArray[0x98_u8, 0xe7_u8, 0xa5_u8, 0xd0_u8, 0x50_u8, 0x63_u8, 0xa7_u8, 0x57_u8])
  struct IFeed
    lpVtbl : IFeedVTbl*
  end

  struct IFeed2VTbl
    query_interface : Proc(IFeed2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFeed2*, UInt32)
    release : Proc(IFeed2*, UInt32)
    get_type_info_count : Proc(IFeed2*, UInt32*, HRESULT)
    get_type_info : Proc(IFeed2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IFeed2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IFeed2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    xml : Proc(IFeed2*, Int32, FEEDS_XML_SORT_PROPERTY, FEEDS_XML_SORT_ORDER, FEEDS_XML_FILTER_FLAGS, FEEDS_XML_INCLUDE_FLAGS, UInt8**, HRESULT)
    get_name : Proc(IFeed2*, UInt8**, HRESULT)
    rename : Proc(IFeed2*, UInt8*, HRESULT)
    get_url : Proc(IFeed2*, UInt8**, HRESULT)
    put_url : Proc(IFeed2*, UInt8*, HRESULT)
    get_local_id : Proc(IFeed2*, UInt8**, HRESULT)
    get_path : Proc(IFeed2*, UInt8**, HRESULT)
    move : Proc(IFeed2*, UInt8*, HRESULT)
    get_parent : Proc(IFeed2*, IDispatch*, HRESULT)
    get_last_write_time : Proc(IFeed2*, Float64*, HRESULT)
    delete : Proc(IFeed2*, HRESULT)
    download : Proc(IFeed2*, HRESULT)
    async_download : Proc(IFeed2*, HRESULT)
    cancel_async_download : Proc(IFeed2*, HRESULT)
    get_sync_setting : Proc(IFeed2*, FEEDS_SYNC_SETTING*, HRESULT)
    put_sync_setting : Proc(IFeed2*, FEEDS_SYNC_SETTING, HRESULT)
    get_interval : Proc(IFeed2*, Int32*, HRESULT)
    put_interval : Proc(IFeed2*, Int32, HRESULT)
    get_last_download_time : Proc(IFeed2*, Float64*, HRESULT)
    get_local_enclosure_path : Proc(IFeed2*, UInt8**, HRESULT)
    get_items : Proc(IFeed2*, IDispatch*, HRESULT)
    get_item : Proc(IFeed2*, Int32, IDispatch*, HRESULT)
    get_title : Proc(IFeed2*, UInt8**, HRESULT)
    get_description : Proc(IFeed2*, UInt8**, HRESULT)
    get_link : Proc(IFeed2*, UInt8**, HRESULT)
    get_image : Proc(IFeed2*, UInt8**, HRESULT)
    get_last_build_date : Proc(IFeed2*, Float64*, HRESULT)
    get_pub_date : Proc(IFeed2*, Float64*, HRESULT)
    get_ttl : Proc(IFeed2*, Int32*, HRESULT)
    get_language : Proc(IFeed2*, UInt8**, HRESULT)
    get_copyright : Proc(IFeed2*, UInt8**, HRESULT)
    get_max_item_count : Proc(IFeed2*, Int32*, HRESULT)
    put_max_item_count : Proc(IFeed2*, Int32, HRESULT)
    get_download_enclosures_automatically : Proc(IFeed2*, Int16*, HRESULT)
    put_download_enclosures_automatically : Proc(IFeed2*, Int16, HRESULT)
    get_download_status : Proc(IFeed2*, FEEDS_DOWNLOAD_STATUS*, HRESULT)
    get_last_download_error : Proc(IFeed2*, FEEDS_DOWNLOAD_ERROR*, HRESULT)
    merge : Proc(IFeed2*, UInt8*, UInt8*, HRESULT)
    get_download_url : Proc(IFeed2*, UInt8**, HRESULT)
    get_is_list : Proc(IFeed2*, Int16*, HRESULT)
    mark_all_items_read : Proc(IFeed2*, HRESULT)
    get_watcher : Proc(IFeed2*, FEEDS_EVENTS_SCOPE, FEEDS_EVENTS_MASK, IDispatch*, HRESULT)
    get_unread_item_count : Proc(IFeed2*, Int32*, HRESULT)
    get_item_count : Proc(IFeed2*, Int32*, HRESULT)
    get_item_by_effective_id : Proc(IFeed2*, Int32, IDispatch*, HRESULT)
    get_last_item_download_time : Proc(IFeed2*, Float64*, HRESULT)
    get_username : Proc(IFeed2*, UInt8**, HRESULT)
    get_password : Proc(IFeed2*, UInt8**, HRESULT)
    set_credentials : Proc(IFeed2*, UInt8*, UInt8*, HRESULT)
    clear_credentials : Proc(IFeed2*, HRESULT)
  end

  IFeed2_GUID = "33f2ea09-1398-4ab9-b6a4-f94b49d0a42e"
  IID_IFeed2 = LibC::GUID.new(0x33f2ea09_u32, 0x1398_u16, 0x4ab9_u16, StaticArray[0xb6_u8, 0xa4_u8, 0xf9_u8, 0x4b_u8, 0x49_u8, 0xd0_u8, 0xa4_u8, 0x2e_u8])
  struct IFeed2
    lpVtbl : IFeed2VTbl*
  end

  struct IFeedEventsVTbl
    query_interface : Proc(IFeedEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFeedEvents*, UInt32)
    release : Proc(IFeedEvents*, UInt32)
    get_type_info_count : Proc(IFeedEvents*, UInt32*, HRESULT)
    get_type_info : Proc(IFeedEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IFeedEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IFeedEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    error : Proc(IFeedEvents*, HRESULT)
    feed_deleted : Proc(IFeedEvents*, UInt8*, HRESULT)
    feed_renamed : Proc(IFeedEvents*, UInt8*, UInt8*, HRESULT)
    feed_url_changed : Proc(IFeedEvents*, UInt8*, HRESULT)
    feed_moved : Proc(IFeedEvents*, UInt8*, UInt8*, HRESULT)
    feed_downloading : Proc(IFeedEvents*, UInt8*, HRESULT)
    feed_download_completed : Proc(IFeedEvents*, UInt8*, FEEDS_DOWNLOAD_ERROR, HRESULT)
    feed_item_count_changed : Proc(IFeedEvents*, UInt8*, Int32, HRESULT)
  end

  IFeedEvents_GUID = "abf35c99-0681-47ea-9a8c-1436a375a99e"
  IID_IFeedEvents = LibC::GUID.new(0xabf35c99_u32, 0x681_u16, 0x47ea_u16, StaticArray[0x9a_u8, 0x8c_u8, 0x14_u8, 0x36_u8, 0xa3_u8, 0x75_u8, 0xa9_u8, 0x9e_u8])
  struct IFeedEvents
    lpVtbl : IFeedEventsVTbl*
  end

  struct IFeedItemVTbl
    query_interface : Proc(IFeedItem*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFeedItem*, UInt32)
    release : Proc(IFeedItem*, UInt32)
    get_type_info_count : Proc(IFeedItem*, UInt32*, HRESULT)
    get_type_info : Proc(IFeedItem*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IFeedItem*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IFeedItem*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    xml : Proc(IFeedItem*, FEEDS_XML_INCLUDE_FLAGS, UInt8**, HRESULT)
    get_title : Proc(IFeedItem*, UInt8**, HRESULT)
    get_link : Proc(IFeedItem*, UInt8**, HRESULT)
    get_guid : Proc(IFeedItem*, UInt8**, HRESULT)
    get_description : Proc(IFeedItem*, UInt8**, HRESULT)
    get_pub_date : Proc(IFeedItem*, Float64*, HRESULT)
    get_comments : Proc(IFeedItem*, UInt8**, HRESULT)
    get_author : Proc(IFeedItem*, UInt8**, HRESULT)
    get_enclosure : Proc(IFeedItem*, IDispatch*, HRESULT)
    get_is_read : Proc(IFeedItem*, Int16*, HRESULT)
    put_is_read : Proc(IFeedItem*, Int16, HRESULT)
    get_local_id : Proc(IFeedItem*, Int32*, HRESULT)
    get_parent : Proc(IFeedItem*, IDispatch*, HRESULT)
    delete : Proc(IFeedItem*, HRESULT)
    get_download_url : Proc(IFeedItem*, UInt8**, HRESULT)
    get_last_download_time : Proc(IFeedItem*, Float64*, HRESULT)
    get_modified : Proc(IFeedItem*, Float64*, HRESULT)
  end

  IFeedItem_GUID = "0a1e6cad-0a47-4da2-a13d-5baaa5c8bd4f"
  IID_IFeedItem = LibC::GUID.new(0xa1e6cad_u32, 0xa47_u16, 0x4da2_u16, StaticArray[0xa1_u8, 0x3d_u8, 0x5b_u8, 0xaa_u8, 0xa5_u8, 0xc8_u8, 0xbd_u8, 0x4f_u8])
  struct IFeedItem
    lpVtbl : IFeedItemVTbl*
  end

  struct IFeedItem2VTbl
    query_interface : Proc(IFeedItem2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFeedItem2*, UInt32)
    release : Proc(IFeedItem2*, UInt32)
    get_type_info_count : Proc(IFeedItem2*, UInt32*, HRESULT)
    get_type_info : Proc(IFeedItem2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IFeedItem2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IFeedItem2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    xml : Proc(IFeedItem2*, FEEDS_XML_INCLUDE_FLAGS, UInt8**, HRESULT)
    get_title : Proc(IFeedItem2*, UInt8**, HRESULT)
    get_link : Proc(IFeedItem2*, UInt8**, HRESULT)
    get_guid : Proc(IFeedItem2*, UInt8**, HRESULT)
    get_description : Proc(IFeedItem2*, UInt8**, HRESULT)
    get_pub_date : Proc(IFeedItem2*, Float64*, HRESULT)
    get_comments : Proc(IFeedItem2*, UInt8**, HRESULT)
    get_author : Proc(IFeedItem2*, UInt8**, HRESULT)
    get_enclosure : Proc(IFeedItem2*, IDispatch*, HRESULT)
    get_is_read : Proc(IFeedItem2*, Int16*, HRESULT)
    put_is_read : Proc(IFeedItem2*, Int16, HRESULT)
    get_local_id : Proc(IFeedItem2*, Int32*, HRESULT)
    get_parent : Proc(IFeedItem2*, IDispatch*, HRESULT)
    delete : Proc(IFeedItem2*, HRESULT)
    get_download_url : Proc(IFeedItem2*, UInt8**, HRESULT)
    get_last_download_time : Proc(IFeedItem2*, Float64*, HRESULT)
    get_modified : Proc(IFeedItem2*, Float64*, HRESULT)
    get_effective_id : Proc(IFeedItem2*, Int32*, HRESULT)
  end

  IFeedItem2_GUID = "79ac9ef4-f9c1-4d2b-a50b-a7ffba4dcf37"
  IID_IFeedItem2 = LibC::GUID.new(0x79ac9ef4_u32, 0xf9c1_u16, 0x4d2b_u16, StaticArray[0xa5_u8, 0xb_u8, 0xa7_u8, 0xff_u8, 0xba_u8, 0x4d_u8, 0xcf_u8, 0x37_u8])
  struct IFeedItem2
    lpVtbl : IFeedItem2VTbl*
  end

  struct IFeedEnclosureVTbl
    query_interface : Proc(IFeedEnclosure*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFeedEnclosure*, UInt32)
    release : Proc(IFeedEnclosure*, UInt32)
    get_type_info_count : Proc(IFeedEnclosure*, UInt32*, HRESULT)
    get_type_info : Proc(IFeedEnclosure*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IFeedEnclosure*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IFeedEnclosure*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_url : Proc(IFeedEnclosure*, UInt8**, HRESULT)
    get_type : Proc(IFeedEnclosure*, UInt8**, HRESULT)
    get_length : Proc(IFeedEnclosure*, Int32*, HRESULT)
    async_download : Proc(IFeedEnclosure*, HRESULT)
    cancel_async_download : Proc(IFeedEnclosure*, HRESULT)
    get_download_status : Proc(IFeedEnclosure*, FEEDS_DOWNLOAD_STATUS*, HRESULT)
    get_last_download_error : Proc(IFeedEnclosure*, FEEDS_DOWNLOAD_ERROR*, HRESULT)
    get_local_path : Proc(IFeedEnclosure*, UInt8**, HRESULT)
    get_parent : Proc(IFeedEnclosure*, IDispatch*, HRESULT)
    get_download_url : Proc(IFeedEnclosure*, UInt8**, HRESULT)
    get_download_mime_type : Proc(IFeedEnclosure*, UInt8**, HRESULT)
    remove_file : Proc(IFeedEnclosure*, HRESULT)
    set_file : Proc(IFeedEnclosure*, UInt8*, UInt8*, UInt8*, UInt8*, HRESULT)
  end

  IFeedEnclosure_GUID = "361c26f7-90a4-4e67-ae09-3a36a546436a"
  IID_IFeedEnclosure = LibC::GUID.new(0x361c26f7_u32, 0x90a4_u16, 0x4e67_u16, StaticArray[0xae_u8, 0x9_u8, 0x3a_u8, 0x36_u8, 0xa5_u8, 0x46_u8, 0x43_u8, 0x6a_u8])
  struct IFeedEnclosure
    lpVtbl : IFeedEnclosureVTbl*
  end

  struct IWMPEffectsVTbl
    query_interface : Proc(IWMPEffects*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPEffects*, UInt32)
    release : Proc(IWMPEffects*, UInt32)
    render : Proc(IWMPEffects*, TimedLevel*, HDC, RECT*, HRESULT)
    media_info : Proc(IWMPEffects*, Int32, Int32, UInt8*, HRESULT)
    get_capabilities : Proc(IWMPEffects*, UInt32*, HRESULT)
    get_title : Proc(IWMPEffects*, UInt8**, HRESULT)
    get_preset_title : Proc(IWMPEffects*, Int32, UInt8**, HRESULT)
    get_preset_count : Proc(IWMPEffects*, Int32*, HRESULT)
    set_current_preset : Proc(IWMPEffects*, Int32, HRESULT)
    get_current_preset : Proc(IWMPEffects*, Int32*, HRESULT)
    display_property_page : Proc(IWMPEffects*, LibC::HANDLE, HRESULT)
    go_fullscreen : Proc(IWMPEffects*, LibC::BOOL, HRESULT)
    render_full_screen : Proc(IWMPEffects*, TimedLevel*, HRESULT)
  end

  IWMPEffects_GUID = "d3984c13-c3cb-48e2-8be5-5168340b4f35"
  IID_IWMPEffects = LibC::GUID.new(0xd3984c13_u32, 0xc3cb_u16, 0x48e2_u16, StaticArray[0x8b_u8, 0xe5_u8, 0x51_u8, 0x68_u8, 0x34_u8, 0xb_u8, 0x4f_u8, 0x35_u8])
  struct IWMPEffects
    lpVtbl : IWMPEffectsVTbl*
  end

  struct IWMPEffects2VTbl
    query_interface : Proc(IWMPEffects2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPEffects2*, UInt32)
    release : Proc(IWMPEffects2*, UInt32)
    render : Proc(IWMPEffects2*, TimedLevel*, HDC, RECT*, HRESULT)
    media_info : Proc(IWMPEffects2*, Int32, Int32, UInt8*, HRESULT)
    get_capabilities : Proc(IWMPEffects2*, UInt32*, HRESULT)
    get_title : Proc(IWMPEffects2*, UInt8**, HRESULT)
    get_preset_title : Proc(IWMPEffects2*, Int32, UInt8**, HRESULT)
    get_preset_count : Proc(IWMPEffects2*, Int32*, HRESULT)
    set_current_preset : Proc(IWMPEffects2*, Int32, HRESULT)
    get_current_preset : Proc(IWMPEffects2*, Int32*, HRESULT)
    display_property_page : Proc(IWMPEffects2*, LibC::HANDLE, HRESULT)
    go_fullscreen : Proc(IWMPEffects2*, LibC::BOOL, HRESULT)
    render_full_screen : Proc(IWMPEffects2*, TimedLevel*, HRESULT)
    set_core : Proc(IWMPEffects2*, IWMPCore, HRESULT)
    create : Proc(IWMPEffects2*, LibC::HANDLE, HRESULT)
    destroy : Proc(IWMPEffects2*, HRESULT)
    notify_new_media : Proc(IWMPEffects2*, IWMPMedia, HRESULT)
    on_window_message : Proc(IWMPEffects2*, UInt32, LibC::UINT_PTR, LPARAM, LRESULT*, HRESULT)
    render_windowed : Proc(IWMPEffects2*, TimedLevel*, LibC::BOOL, HRESULT)
  end

  IWMPEffects2_GUID = "695386ec-aa3c-4618-a5e1-dd9a8b987632"
  IID_IWMPEffects2 = LibC::GUID.new(0x695386ec_u32, 0xaa3c_u16, 0x4618_u16, StaticArray[0xa5_u8, 0xe1_u8, 0xdd_u8, 0x9a_u8, 0x8b_u8, 0x98_u8, 0x76_u8, 0x32_u8])
  struct IWMPEffects2
    lpVtbl : IWMPEffects2VTbl*
  end

  struct IWMPPluginUIVTbl
    query_interface : Proc(IWMPPluginUI*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPPluginUI*, UInt32)
    release : Proc(IWMPPluginUI*, UInt32)
    set_core : Proc(IWMPPluginUI*, IWMPCore, HRESULT)
    create : Proc(IWMPPluginUI*, LibC::HANDLE, HANDLE*, HRESULT)
    destroy : Proc(IWMPPluginUI*, HRESULT)
    display_property_page : Proc(IWMPPluginUI*, LibC::HANDLE, HRESULT)
    get_property : Proc(IWMPPluginUI*, LibC::LPWSTR, VARIANT*, HRESULT)
    set_property : Proc(IWMPPluginUI*, LibC::LPWSTR, VARIANT*, HRESULT)
    translate_accelerator : Proc(IWMPPluginUI*, MSG*, HRESULT)
  end

  IWMPPluginUI_GUID = "4c5e8f9f-ad3e-4bf9-9753-fcd30d6d38dd"
  IID_IWMPPluginUI = LibC::GUID.new(0x4c5e8f9f_u32, 0xad3e_u16, 0x4bf9_u16, StaticArray[0x97_u8, 0x53_u8, 0xfc_u8, 0xd3_u8, 0xd_u8, 0x6d_u8, 0x38_u8, 0xdd_u8])
  struct IWMPPluginUI
    lpVtbl : IWMPPluginUIVTbl*
  end

  struct IWMPContentContainerVTbl
    query_interface : Proc(IWMPContentContainer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPContentContainer*, UInt32)
    release : Proc(IWMPContentContainer*, UInt32)
    get_id : Proc(IWMPContentContainer*, UInt32*, HRESULT)
    get_price : Proc(IWMPContentContainer*, UInt8**, HRESULT)
    get_type : Proc(IWMPContentContainer*, UInt8**, HRESULT)
    get_content_count : Proc(IWMPContentContainer*, UInt32*, HRESULT)
    get_content_price : Proc(IWMPContentContainer*, UInt32, UInt8**, HRESULT)
    get_content_id : Proc(IWMPContentContainer*, UInt32, UInt32*, HRESULT)
  end

  IWMPContentContainer_GUID = "ad7f4d9c-1a9f-4ed2-9815-ecc0b58cb616"
  IID_IWMPContentContainer = LibC::GUID.new(0xad7f4d9c_u32, 0x1a9f_u16, 0x4ed2_u16, StaticArray[0x98_u8, 0x15_u8, 0xec_u8, 0xc0_u8, 0xb5_u8, 0x8c_u8, 0xb6_u8, 0x16_u8])
  struct IWMPContentContainer
    lpVtbl : IWMPContentContainerVTbl*
  end

  struct IWMPContentContainerListVTbl
    query_interface : Proc(IWMPContentContainerList*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPContentContainerList*, UInt32)
    release : Proc(IWMPContentContainerList*, UInt32)
    get_transaction_type : Proc(IWMPContentContainerList*, WMPTransactionType*, HRESULT)
    get_container_count : Proc(IWMPContentContainerList*, UInt32*, HRESULT)
    get_container : Proc(IWMPContentContainerList*, UInt32, IWMPContentContainer*, HRESULT)
  end

  IWMPContentContainerList_GUID = "a9937f78-0802-4af8-8b8d-e3f045bc8ab5"
  IID_IWMPContentContainerList = LibC::GUID.new(0xa9937f78_u32, 0x802_u16, 0x4af8_u16, StaticArray[0x8b_u8, 0x8d_u8, 0xe3_u8, 0xf0_u8, 0x45_u8, 0xbc_u8, 0x8a_u8, 0xb5_u8])
  struct IWMPContentContainerList
    lpVtbl : IWMPContentContainerListVTbl*
  end

  struct IWMPContentPartnerCallbackVTbl
    query_interface : Proc(IWMPContentPartnerCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPContentPartnerCallback*, UInt32)
    release : Proc(IWMPContentPartnerCallback*, UInt32)
    notify : Proc(IWMPContentPartnerCallback*, WMPCallbackNotification, VARIANT*, HRESULT)
    buy_complete : Proc(IWMPContentPartnerCallback*, HRESULT, UInt32, HRESULT)
    download_track : Proc(IWMPContentPartnerCallback*, UInt32, UInt8*, UInt32, UInt8*, HRESULT, HRESULT)
    get_catalog_version : Proc(IWMPContentPartnerCallback*, UInt32*, UInt32*, UInt32*, HRESULT)
    update_device_complete : Proc(IWMPContentPartnerCallback*, UInt8*, HRESULT)
    change_view : Proc(IWMPContentPartnerCallback*, UInt8*, UInt8*, UInt8*, HRESULT)
    add_list_contents : Proc(IWMPContentPartnerCallback*, UInt32, UInt32, UInt32*, HRESULT)
    list_contents_complete : Proc(IWMPContentPartnerCallback*, UInt32, HRESULT, HRESULT)
    send_message_complete : Proc(IWMPContentPartnerCallback*, UInt8*, UInt8*, UInt8*, HRESULT)
    get_content_i_ds_in_library : Proc(IWMPContentPartnerCallback*, UInt32*, UInt32**, HRESULT)
    refresh_license_complete : Proc(IWMPContentPartnerCallback*, UInt32, UInt32, HRESULT, HRESULT)
    show_popup : Proc(IWMPContentPartnerCallback*, Int32, UInt8*, HRESULT)
    verify_permission_complete : Proc(IWMPContentPartnerCallback*, UInt8*, VARIANT*, HRESULT, HRESULT)
  end

  IWMPContentPartnerCallback_GUID = "9e8f7da2-0695-403c-b697-da10fafaa676"
  IID_IWMPContentPartnerCallback = LibC::GUID.new(0x9e8f7da2_u32, 0x695_u16, 0x403c_u16, StaticArray[0xb6_u8, 0x97_u8, 0xda_u8, 0x10_u8, 0xfa_u8, 0xfa_u8, 0xa6_u8, 0x76_u8])
  struct IWMPContentPartnerCallback
    lpVtbl : IWMPContentPartnerCallbackVTbl*
  end

  struct IWMPContentPartnerVTbl
    query_interface : Proc(IWMPContentPartner*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPContentPartner*, UInt32)
    release : Proc(IWMPContentPartner*, UInt32)
    set_callback : Proc(IWMPContentPartner*, IWMPContentPartnerCallback, HRESULT)
    notify : Proc(IWMPContentPartner*, WMPPartnerNotification, VARIANT*, HRESULT)
    get_item_info : Proc(IWMPContentPartner*, UInt8*, VARIANT*, VARIANT*, HRESULT)
    get_content_partner_info : Proc(IWMPContentPartner*, UInt8*, VARIANT*, HRESULT)
    get_commands : Proc(IWMPContentPartner*, UInt8*, VARIANT*, UInt8*, UInt32, UInt32*, UInt32*, WMPContextMenuInfo**, HRESULT)
    invoke_command : Proc(IWMPContentPartner*, UInt32, UInt8*, VARIANT*, UInt8*, UInt32, UInt32*, HRESULT)
    can_buy_silent : Proc(IWMPContentPartner*, IWMPContentContainerList, UInt8**, Int16*, HRESULT)
    buy : Proc(IWMPContentPartner*, IWMPContentContainerList, UInt32, HRESULT)
    get_streaming_url : Proc(IWMPContentPartner*, WMPStreamingType, VARIANT*, UInt8**, HRESULT)
    download : Proc(IWMPContentPartner*, IWMPContentContainerList, UInt32, HRESULT)
    download_track_complete : Proc(IWMPContentPartner*, HRESULT, UInt32, UInt8*, HRESULT)
    refresh_license : Proc(IWMPContentPartner*, UInt32, Int16, UInt8*, WMPStreamingType, UInt32, UInt8*, VARIANT*, HRESULT)
    get_catalog_url : Proc(IWMPContentPartner*, UInt32, UInt32, UInt32, UInt32*, UInt8**, VARIANT*, HRESULT)
    get_template : Proc(IWMPContentPartner*, WMPTaskType, UInt8*, VARIANT*, UInt8*, VARIANT*, UInt8*, UInt8*, UInt8**, WMPTemplateSize*, HRESULT)
    update_device : Proc(IWMPContentPartner*, UInt8*, HRESULT)
    get_list_contents : Proc(IWMPContentPartner*, UInt8*, VARIANT*, UInt8*, UInt8*, UInt32, HRESULT)
    login : Proc(IWMPContentPartner*, BLOB, BLOB, Int16, Int16, HRESULT)
    authenticate : Proc(IWMPContentPartner*, BLOB, BLOB, HRESULT)
    logout : Proc(IWMPContentPartner*, HRESULT)
    send_message : Proc(IWMPContentPartner*, UInt8*, UInt8*, HRESULT)
    station_event : Proc(IWMPContentPartner*, UInt8*, UInt32, UInt32, UInt32, UInt8*, UInt32, HRESULT)
    compare_container_list_prices : Proc(IWMPContentPartner*, IWMPContentContainerList, IWMPContentContainerList, Int32*, HRESULT)
    verify_permission : Proc(IWMPContentPartner*, UInt8*, VARIANT*, HRESULT)
  end

  IWMPContentPartner_GUID = "55455073-41b5-4e75-87b8-f13bdb291d08"
  IID_IWMPContentPartner = LibC::GUID.new(0x55455073_u32, 0x41b5_u16, 0x4e75_u16, StaticArray[0x87_u8, 0xb8_u8, 0xf1_u8, 0x3b_u8, 0xdb_u8, 0x29_u8, 0x1d_u8, 0x8_u8])
  struct IWMPContentPartner
    lpVtbl : IWMPContentPartnerVTbl*
  end

  struct IWMPSubscriptionServiceVTbl
    query_interface : Proc(IWMPSubscriptionService*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPSubscriptionService*, UInt32)
    release : Proc(IWMPSubscriptionService*, UInt32)
    allow_play : Proc(IWMPSubscriptionService*, LibC::HANDLE, IWMPMedia, LibC::BOOL*, HRESULT)
    allow_cd_burn : Proc(IWMPSubscriptionService*, LibC::HANDLE, IWMPPlaylist, LibC::BOOL*, HRESULT)
    allow_pda_transfer : Proc(IWMPSubscriptionService*, LibC::HANDLE, IWMPPlaylist, LibC::BOOL*, HRESULT)
    start_background_processing : Proc(IWMPSubscriptionService*, LibC::HANDLE, HRESULT)
  end

  IWMPSubscriptionService_GUID = "376055f8-2a59-4a73-9501-dca5273a7a10"
  IID_IWMPSubscriptionService = LibC::GUID.new(0x376055f8_u32, 0x2a59_u16, 0x4a73_u16, StaticArray[0x95_u8, 0x1_u8, 0xdc_u8, 0xa5_u8, 0x27_u8, 0x3a_u8, 0x7a_u8, 0x10_u8])
  struct IWMPSubscriptionService
    lpVtbl : IWMPSubscriptionServiceVTbl*
  end

  struct IWMPSubscriptionServiceCallbackVTbl
    query_interface : Proc(IWMPSubscriptionServiceCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPSubscriptionServiceCallback*, UInt32)
    release : Proc(IWMPSubscriptionServiceCallback*, UInt32)
    on_complete : Proc(IWMPSubscriptionServiceCallback*, HRESULT, HRESULT)
  end

  IWMPSubscriptionServiceCallback_GUID = "dd01d127-2dc2-4c3a-876e-63312079f9b0"
  IID_IWMPSubscriptionServiceCallback = LibC::GUID.new(0xdd01d127_u32, 0x2dc2_u16, 0x4c3a_u16, StaticArray[0x87_u8, 0x6e_u8, 0x63_u8, 0x31_u8, 0x20_u8, 0x79_u8, 0xf9_u8, 0xb0_u8])
  struct IWMPSubscriptionServiceCallback
    lpVtbl : IWMPSubscriptionServiceCallbackVTbl*
  end

  struct IWMPSubscriptionService2VTbl
    query_interface : Proc(IWMPSubscriptionService2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPSubscriptionService2*, UInt32)
    release : Proc(IWMPSubscriptionService2*, UInt32)
    allow_play : Proc(IWMPSubscriptionService2*, LibC::HANDLE, IWMPMedia, LibC::BOOL*, HRESULT)
    allow_cd_burn : Proc(IWMPSubscriptionService2*, LibC::HANDLE, IWMPPlaylist, LibC::BOOL*, HRESULT)
    allow_pda_transfer : Proc(IWMPSubscriptionService2*, LibC::HANDLE, IWMPPlaylist, LibC::BOOL*, HRESULT)
    start_background_processing : Proc(IWMPSubscriptionService2*, LibC::HANDLE, HRESULT)
    stop_background_processing : Proc(IWMPSubscriptionService2*, HRESULT)
    service_event : Proc(IWMPSubscriptionService2*, WMPSubscriptionServiceEvent, HRESULT)
    device_available : Proc(IWMPSubscriptionService2*, UInt8*, IWMPSubscriptionServiceCallback, HRESULT)
    prepare_for_sync : Proc(IWMPSubscriptionService2*, UInt8*, UInt8*, IWMPSubscriptionServiceCallback, HRESULT)
  end

  IWMPSubscriptionService2_GUID = "a94c120e-d600-4ec6-b05e-ec9d56d84de0"
  IID_IWMPSubscriptionService2 = LibC::GUID.new(0xa94c120e_u32, 0xd600_u16, 0x4ec6_u16, StaticArray[0xb0_u8, 0x5e_u8, 0xec_u8, 0x9d_u8, 0x56_u8, 0xd8_u8, 0x4d_u8, 0xe0_u8])
  struct IWMPSubscriptionService2
    lpVtbl : IWMPSubscriptionService2VTbl*
  end

  struct IWMPDownloadItemVTbl
    query_interface : Proc(IWMPDownloadItem*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPDownloadItem*, UInt32)
    release : Proc(IWMPDownloadItem*, UInt32)
    get_type_info_count : Proc(IWMPDownloadItem*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPDownloadItem*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPDownloadItem*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPDownloadItem*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_source_url : Proc(IWMPDownloadItem*, UInt8**, HRESULT)
    get_size : Proc(IWMPDownloadItem*, Int32*, HRESULT)
    get_type : Proc(IWMPDownloadItem*, UInt8**, HRESULT)
    get_progress : Proc(IWMPDownloadItem*, Int32*, HRESULT)
    get_download_state : Proc(IWMPDownloadItem*, WMPSubscriptionDownloadState*, HRESULT)
    pause : Proc(IWMPDownloadItem*, HRESULT)
    resume : Proc(IWMPDownloadItem*, HRESULT)
    cancel : Proc(IWMPDownloadItem*, HRESULT)
  end

  IWMPDownloadItem_GUID = "c9470e8e-3f6b-46a9-a0a9-452815c34297"
  IID_IWMPDownloadItem = LibC::GUID.new(0xc9470e8e_u32, 0x3f6b_u16, 0x46a9_u16, StaticArray[0xa0_u8, 0xa9_u8, 0x45_u8, 0x28_u8, 0x15_u8, 0xc3_u8, 0x42_u8, 0x97_u8])
  struct IWMPDownloadItem
    lpVtbl : IWMPDownloadItemVTbl*
  end

  struct IWMPDownloadItem2VTbl
    query_interface : Proc(IWMPDownloadItem2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPDownloadItem2*, UInt32)
    release : Proc(IWMPDownloadItem2*, UInt32)
    get_type_info_count : Proc(IWMPDownloadItem2*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPDownloadItem2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPDownloadItem2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPDownloadItem2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_source_url : Proc(IWMPDownloadItem2*, UInt8**, HRESULT)
    get_size : Proc(IWMPDownloadItem2*, Int32*, HRESULT)
    get_type : Proc(IWMPDownloadItem2*, UInt8**, HRESULT)
    get_progress : Proc(IWMPDownloadItem2*, Int32*, HRESULT)
    get_download_state : Proc(IWMPDownloadItem2*, WMPSubscriptionDownloadState*, HRESULT)
    pause : Proc(IWMPDownloadItem2*, HRESULT)
    resume : Proc(IWMPDownloadItem2*, HRESULT)
    cancel : Proc(IWMPDownloadItem2*, HRESULT)
    get_item_info : Proc(IWMPDownloadItem2*, UInt8*, UInt8**, HRESULT)
  end

  IWMPDownloadItem2_GUID = "9fbb3336-6da3-479d-b8ff-67d46e20a987"
  IID_IWMPDownloadItem2 = LibC::GUID.new(0x9fbb3336_u32, 0x6da3_u16, 0x479d_u16, StaticArray[0xb8_u8, 0xff_u8, 0x67_u8, 0xd4_u8, 0x6e_u8, 0x20_u8, 0xa9_u8, 0x87_u8])
  struct IWMPDownloadItem2
    lpVtbl : IWMPDownloadItem2VTbl*
  end

  struct IWMPDownloadCollectionVTbl
    query_interface : Proc(IWMPDownloadCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPDownloadCollection*, UInt32)
    release : Proc(IWMPDownloadCollection*, UInt32)
    get_type_info_count : Proc(IWMPDownloadCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPDownloadCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPDownloadCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPDownloadCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_id : Proc(IWMPDownloadCollection*, Int32*, HRESULT)
    get_count : Proc(IWMPDownloadCollection*, Int32*, HRESULT)
    item : Proc(IWMPDownloadCollection*, Int32, IWMPDownloadItem2*, HRESULT)
    start_download : Proc(IWMPDownloadCollection*, UInt8*, UInt8*, IWMPDownloadItem2*, HRESULT)
    remove_item : Proc(IWMPDownloadCollection*, Int32, HRESULT)
    clear : Proc(IWMPDownloadCollection*, HRESULT)
  end

  IWMPDownloadCollection_GUID = "0a319c7f-85f9-436c-b88e-82fd88000e1c"
  IID_IWMPDownloadCollection = LibC::GUID.new(0xa319c7f_u32, 0x85f9_u16, 0x436c_u16, StaticArray[0xb8_u8, 0x8e_u8, 0x82_u8, 0xfd_u8, 0x88_u8, 0x0_u8, 0xe_u8, 0x1c_u8])
  struct IWMPDownloadCollection
    lpVtbl : IWMPDownloadCollectionVTbl*
  end

  struct IWMPDownloadManagerVTbl
    query_interface : Proc(IWMPDownloadManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWMPDownloadManager*, UInt32)
    release : Proc(IWMPDownloadManager*, UInt32)
    get_type_info_count : Proc(IWMPDownloadManager*, UInt32*, HRESULT)
    get_type_info : Proc(IWMPDownloadManager*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWMPDownloadManager*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWMPDownloadManager*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_download_collection : Proc(IWMPDownloadManager*, Int32, IWMPDownloadCollection*, HRESULT)
    create_download_collection : Proc(IWMPDownloadManager*, IWMPDownloadCollection*, HRESULT)
  end

  IWMPDownloadManager_GUID = "e15e9ad1-8f20-4cc4-9ec7-1a328ca86a0d"
  IID_IWMPDownloadManager = LibC::GUID.new(0xe15e9ad1_u32, 0x8f20_u16, 0x4cc4_u16, StaticArray[0x9e_u8, 0xc7_u8, 0x1a_u8, 0x32_u8, 0x8c_u8, 0xa8_u8, 0x6a_u8, 0xd_u8])
  struct IWMPDownloadManager
    lpVtbl : IWMPDownloadManagerVTbl*
  end

end
struct LibWin32::IWMPErrorItem
  def query_interface(this : IWMPErrorItem*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPErrorItem*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPErrorItem*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPErrorItem*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPErrorItem*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPErrorItem*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPErrorItem*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_error_code(this : IWMPErrorItem*, phr : Int32*) : HRESULT
    @lpVtbl.value.get_error_code.call(this, phr)
  end
  def get_error_description(this : IWMPErrorItem*, pbstrdescription : UInt8**) : HRESULT
    @lpVtbl.value.get_error_description.call(this, pbstrdescription)
  end
  def get_error_context(this : IWMPErrorItem*, pvarcontext : VARIANT*) : HRESULT
    @lpVtbl.value.get_error_context.call(this, pvarcontext)
  end
  def get_remedy(this : IWMPErrorItem*, plremedy : Int32*) : HRESULT
    @lpVtbl.value.get_remedy.call(this, plremedy)
  end
  def get_custom_url(this : IWMPErrorItem*, pbstrcustomurl : UInt8**) : HRESULT
    @lpVtbl.value.get_custom_url.call(this, pbstrcustomurl)
  end
end
struct LibWin32::IWMPError
  def query_interface(this : IWMPError*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPError*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPError*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPError*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPError*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPError*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPError*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def clear_error_queue(this : IWMPError*) : HRESULT
    @lpVtbl.value.clear_error_queue.call(this)
  end
  def get_error_count(this : IWMPError*, plnumerrors : Int32*) : HRESULT
    @lpVtbl.value.get_error_count.call(this, plnumerrors)
  end
  def get_item(this : IWMPError*, dwindex : Int32, pperroritem : IWMPErrorItem*) : HRESULT
    @lpVtbl.value.get_item.call(this, dwindex, pperroritem)
  end
  def web_help(this : IWMPError*) : HRESULT
    @lpVtbl.value.web_help.call(this)
  end
end
struct LibWin32::IWMPMedia
  def query_interface(this : IWMPMedia*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPMedia*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPMedia*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPMedia*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPMedia*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPMedia*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPMedia*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_is_identical(this : IWMPMedia*, piwmpmedia : IWMPMedia, pvbool : Int16*) : HRESULT
    @lpVtbl.value.get_is_identical.call(this, piwmpmedia, pvbool)
  end
  def get_source_url(this : IWMPMedia*, pbstrsourceurl : UInt8**) : HRESULT
    @lpVtbl.value.get_source_url.call(this, pbstrsourceurl)
  end
  def get_name(this : IWMPMedia*, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, pbstrname)
  end
  def put_name(this : IWMPMedia*, bstrname : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, bstrname)
  end
  def get_image_source_width(this : IWMPMedia*, pwidth : Int32*) : HRESULT
    @lpVtbl.value.get_image_source_width.call(this, pwidth)
  end
  def get_image_source_height(this : IWMPMedia*, pheight : Int32*) : HRESULT
    @lpVtbl.value.get_image_source_height.call(this, pheight)
  end
  def get_marker_count(this : IWMPMedia*, pmarkercount : Int32*) : HRESULT
    @lpVtbl.value.get_marker_count.call(this, pmarkercount)
  end
  def get_marker_time(this : IWMPMedia*, markernum : Int32, pmarkertime : Float64*) : HRESULT
    @lpVtbl.value.get_marker_time.call(this, markernum, pmarkertime)
  end
  def get_marker_name(this : IWMPMedia*, markernum : Int32, pbstrmarkername : UInt8**) : HRESULT
    @lpVtbl.value.get_marker_name.call(this, markernum, pbstrmarkername)
  end
  def get_duration(this : IWMPMedia*, pduration : Float64*) : HRESULT
    @lpVtbl.value.get_duration.call(this, pduration)
  end
  def get_duration_string(this : IWMPMedia*, pbstrduration : UInt8**) : HRESULT
    @lpVtbl.value.get_duration_string.call(this, pbstrduration)
  end
  def get_attribute_count(this : IWMPMedia*, plcount : Int32*) : HRESULT
    @lpVtbl.value.get_attribute_count.call(this, plcount)
  end
  def get_attribute_name(this : IWMPMedia*, lindex : Int32, pbstritemname : UInt8**) : HRESULT
    @lpVtbl.value.get_attribute_name.call(this, lindex, pbstritemname)
  end
  def get_item_info(this : IWMPMedia*, bstritemname : UInt8*, pbstrval : UInt8**) : HRESULT
    @lpVtbl.value.get_item_info.call(this, bstritemname, pbstrval)
  end
  def set_item_info(this : IWMPMedia*, bstritemname : UInt8*, bstrval : UInt8*) : HRESULT
    @lpVtbl.value.set_item_info.call(this, bstritemname, bstrval)
  end
  def get_item_info_by_atom(this : IWMPMedia*, latom : Int32, pbstrval : UInt8**) : HRESULT
    @lpVtbl.value.get_item_info_by_atom.call(this, latom, pbstrval)
  end
  def is_member_of(this : IWMPMedia*, pplaylist : IWMPPlaylist, pvarfismemberof : Int16*) : HRESULT
    @lpVtbl.value.is_member_of.call(this, pplaylist, pvarfismemberof)
  end
  def is_read_only_item(this : IWMPMedia*, bstritemname : UInt8*, pvarfisreadonly : Int16*) : HRESULT
    @lpVtbl.value.is_read_only_item.call(this, bstritemname, pvarfisreadonly)
  end
end
struct LibWin32::IWMPControls
  def query_interface(this : IWMPControls*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPControls*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPControls*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPControls*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPControls*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPControls*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPControls*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_is_available(this : IWMPControls*, bstritem : UInt8*, pisavailable : Int16*) : HRESULT
    @lpVtbl.value.get_is_available.call(this, bstritem, pisavailable)
  end
  def play(this : IWMPControls*) : HRESULT
    @lpVtbl.value.play.call(this)
  end
  def stop(this : IWMPControls*) : HRESULT
    @lpVtbl.value.stop.call(this)
  end
  def pause(this : IWMPControls*) : HRESULT
    @lpVtbl.value.pause.call(this)
  end
  def fast_forward(this : IWMPControls*) : HRESULT
    @lpVtbl.value.fast_forward.call(this)
  end
  def fast_reverse(this : IWMPControls*) : HRESULT
    @lpVtbl.value.fast_reverse.call(this)
  end
  def get_current_position(this : IWMPControls*, pdcurrentposition : Float64*) : HRESULT
    @lpVtbl.value.get_current_position.call(this, pdcurrentposition)
  end
  def put_current_position(this : IWMPControls*, dcurrentposition : Float64) : HRESULT
    @lpVtbl.value.put_current_position.call(this, dcurrentposition)
  end
  def get_current_position_string(this : IWMPControls*, pbstrcurrentposition : UInt8**) : HRESULT
    @lpVtbl.value.get_current_position_string.call(this, pbstrcurrentposition)
  end
  def next(this : IWMPControls*) : HRESULT
    @lpVtbl.value.next.call(this)
  end
  def previous(this : IWMPControls*) : HRESULT
    @lpVtbl.value.previous.call(this)
  end
  def get_current_item(this : IWMPControls*, ppiwmpmedia : IWMPMedia*) : HRESULT
    @lpVtbl.value.get_current_item.call(this, ppiwmpmedia)
  end
  def put_current_item(this : IWMPControls*, piwmpmedia : IWMPMedia) : HRESULT
    @lpVtbl.value.put_current_item.call(this, piwmpmedia)
  end
  def get_current_marker(this : IWMPControls*, plmarker : Int32*) : HRESULT
    @lpVtbl.value.get_current_marker.call(this, plmarker)
  end
  def put_current_marker(this : IWMPControls*, lmarker : Int32) : HRESULT
    @lpVtbl.value.put_current_marker.call(this, lmarker)
  end
  def play_item(this : IWMPControls*, piwmpmedia : IWMPMedia) : HRESULT
    @lpVtbl.value.play_item.call(this, piwmpmedia)
  end
end
struct LibWin32::IWMPSettings
  def query_interface(this : IWMPSettings*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPSettings*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPSettings*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPSettings*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPSettings*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPSettings*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPSettings*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_is_available(this : IWMPSettings*, bstritem : UInt8*, pisavailable : Int16*) : HRESULT
    @lpVtbl.value.get_is_available.call(this, bstritem, pisavailable)
  end
  def get_auto_start(this : IWMPSettings*, pfautostart : Int16*) : HRESULT
    @lpVtbl.value.get_auto_start.call(this, pfautostart)
  end
  def put_auto_start(this : IWMPSettings*, fautostart : Int16) : HRESULT
    @lpVtbl.value.put_auto_start.call(this, fautostart)
  end
  def get_base_url(this : IWMPSettings*, pbstrbaseurl : UInt8**) : HRESULT
    @lpVtbl.value.get_base_url.call(this, pbstrbaseurl)
  end
  def put_base_url(this : IWMPSettings*, bstrbaseurl : UInt8*) : HRESULT
    @lpVtbl.value.put_base_url.call(this, bstrbaseurl)
  end
  def get_default_frame(this : IWMPSettings*, pbstrdefaultframe : UInt8**) : HRESULT
    @lpVtbl.value.get_default_frame.call(this, pbstrdefaultframe)
  end
  def put_default_frame(this : IWMPSettings*, bstrdefaultframe : UInt8*) : HRESULT
    @lpVtbl.value.put_default_frame.call(this, bstrdefaultframe)
  end
  def get_invoke_ur_ls(this : IWMPSettings*, pfinvokeurls : Int16*) : HRESULT
    @lpVtbl.value.get_invoke_ur_ls.call(this, pfinvokeurls)
  end
  def put_invoke_ur_ls(this : IWMPSettings*, finvokeurls : Int16) : HRESULT
    @lpVtbl.value.put_invoke_ur_ls.call(this, finvokeurls)
  end
  def get_mute(this : IWMPSettings*, pfmute : Int16*) : HRESULT
    @lpVtbl.value.get_mute.call(this, pfmute)
  end
  def put_mute(this : IWMPSettings*, fmute : Int16) : HRESULT
    @lpVtbl.value.put_mute.call(this, fmute)
  end
  def get_play_count(this : IWMPSettings*, plcount : Int32*) : HRESULT
    @lpVtbl.value.get_play_count.call(this, plcount)
  end
  def put_play_count(this : IWMPSettings*, lcount : Int32) : HRESULT
    @lpVtbl.value.put_play_count.call(this, lcount)
  end
  def get_rate(this : IWMPSettings*, pdrate : Float64*) : HRESULT
    @lpVtbl.value.get_rate.call(this, pdrate)
  end
  def put_rate(this : IWMPSettings*, drate : Float64) : HRESULT
    @lpVtbl.value.put_rate.call(this, drate)
  end
  def get_balance(this : IWMPSettings*, plbalance : Int32*) : HRESULT
    @lpVtbl.value.get_balance.call(this, plbalance)
  end
  def put_balance(this : IWMPSettings*, lbalance : Int32) : HRESULT
    @lpVtbl.value.put_balance.call(this, lbalance)
  end
  def get_volume(this : IWMPSettings*, plvolume : Int32*) : HRESULT
    @lpVtbl.value.get_volume.call(this, plvolume)
  end
  def put_volume(this : IWMPSettings*, lvolume : Int32) : HRESULT
    @lpVtbl.value.put_volume.call(this, lvolume)
  end
  def get_mode(this : IWMPSettings*, bstrmode : UInt8*, pvarfmode : Int16*) : HRESULT
    @lpVtbl.value.get_mode.call(this, bstrmode, pvarfmode)
  end
  def set_mode(this : IWMPSettings*, bstrmode : UInt8*, varfmode : Int16) : HRESULT
    @lpVtbl.value.set_mode.call(this, bstrmode, varfmode)
  end
  def get_enable_error_dialogs(this : IWMPSettings*, pfenableerrordialogs : Int16*) : HRESULT
    @lpVtbl.value.get_enable_error_dialogs.call(this, pfenableerrordialogs)
  end
  def put_enable_error_dialogs(this : IWMPSettings*, fenableerrordialogs : Int16) : HRESULT
    @lpVtbl.value.put_enable_error_dialogs.call(this, fenableerrordialogs)
  end
end
struct LibWin32::IWMPClosedCaption
  def query_interface(this : IWMPClosedCaption*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPClosedCaption*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPClosedCaption*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPClosedCaption*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPClosedCaption*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPClosedCaption*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPClosedCaption*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_sami_style(this : IWMPClosedCaption*, pbstrsamistyle : UInt8**) : HRESULT
    @lpVtbl.value.get_sami_style.call(this, pbstrsamistyle)
  end
  def put_sami_style(this : IWMPClosedCaption*, bstrsamistyle : UInt8*) : HRESULT
    @lpVtbl.value.put_sami_style.call(this, bstrsamistyle)
  end
  def get_sami_lang(this : IWMPClosedCaption*, pbstrsamilang : UInt8**) : HRESULT
    @lpVtbl.value.get_sami_lang.call(this, pbstrsamilang)
  end
  def put_sami_lang(this : IWMPClosedCaption*, bstrsamilang : UInt8*) : HRESULT
    @lpVtbl.value.put_sami_lang.call(this, bstrsamilang)
  end
  def get_sami_file_name(this : IWMPClosedCaption*, pbstrsamifilename : UInt8**) : HRESULT
    @lpVtbl.value.get_sami_file_name.call(this, pbstrsamifilename)
  end
  def put_sami_file_name(this : IWMPClosedCaption*, bstrsamifilename : UInt8*) : HRESULT
    @lpVtbl.value.put_sami_file_name.call(this, bstrsamifilename)
  end
  def get_captioning_id(this : IWMPClosedCaption*, pbstrcaptioningid : UInt8**) : HRESULT
    @lpVtbl.value.get_captioning_id.call(this, pbstrcaptioningid)
  end
  def put_captioning_id(this : IWMPClosedCaption*, bstrcaptioningid : UInt8*) : HRESULT
    @lpVtbl.value.put_captioning_id.call(this, bstrcaptioningid)
  end
end
struct LibWin32::IWMPPlaylist
  def query_interface(this : IWMPPlaylist*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPPlaylist*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPPlaylist*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPPlaylist*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPPlaylist*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPPlaylist*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPPlaylist*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_count(this : IWMPPlaylist*, plcount : Int32*) : HRESULT
    @lpVtbl.value.get_count.call(this, plcount)
  end
  def get_name(this : IWMPPlaylist*, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, pbstrname)
  end
  def put_name(this : IWMPPlaylist*, bstrname : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, bstrname)
  end
  def get_attribute_count(this : IWMPPlaylist*, plcount : Int32*) : HRESULT
    @lpVtbl.value.get_attribute_count.call(this, plcount)
  end
  def get_attribute_name(this : IWMPPlaylist*, lindex : Int32, pbstrattributename : UInt8**) : HRESULT
    @lpVtbl.value.get_attribute_name.call(this, lindex, pbstrattributename)
  end
  def get_item(this : IWMPPlaylist*, lindex : Int32, ppiwmpmedia : IWMPMedia*) : HRESULT
    @lpVtbl.value.get_item.call(this, lindex, ppiwmpmedia)
  end
  def get_item_info(this : IWMPPlaylist*, bstrname : UInt8*, pbstrval : UInt8**) : HRESULT
    @lpVtbl.value.get_item_info.call(this, bstrname, pbstrval)
  end
  def set_item_info(this : IWMPPlaylist*, bstrname : UInt8*, bstrvalue : UInt8*) : HRESULT
    @lpVtbl.value.set_item_info.call(this, bstrname, bstrvalue)
  end
  def get_is_identical(this : IWMPPlaylist*, piwmpplaylist : IWMPPlaylist, pvbool : Int16*) : HRESULT
    @lpVtbl.value.get_is_identical.call(this, piwmpplaylist, pvbool)
  end
  def clear(this : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.clear.call(this)
  end
  def insert_item(this : IWMPPlaylist*, lindex : Int32, piwmpmedia : IWMPMedia) : HRESULT
    @lpVtbl.value.insert_item.call(this, lindex, piwmpmedia)
  end
  def append_item(this : IWMPPlaylist*, piwmpmedia : IWMPMedia) : HRESULT
    @lpVtbl.value.append_item.call(this, piwmpmedia)
  end
  def remove_item(this : IWMPPlaylist*, piwmpmedia : IWMPMedia) : HRESULT
    @lpVtbl.value.remove_item.call(this, piwmpmedia)
  end
  def move_item(this : IWMPPlaylist*, lindexold : Int32, lindexnew : Int32) : HRESULT
    @lpVtbl.value.move_item.call(this, lindexold, lindexnew)
  end
end
struct LibWin32::IWMPCdrom
  def query_interface(this : IWMPCdrom*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPCdrom*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPCdrom*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPCdrom*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPCdrom*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPCdrom*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPCdrom*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_drive_specifier(this : IWMPCdrom*, pbstrdrive : UInt8**) : HRESULT
    @lpVtbl.value.get_drive_specifier.call(this, pbstrdrive)
  end
  def get_playlist(this : IWMPCdrom*, ppplaylist : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.get_playlist.call(this, ppplaylist)
  end
  def eject(this : IWMPCdrom*) : HRESULT
    @lpVtbl.value.eject.call(this)
  end
end
struct LibWin32::IWMPCdromCollection
  def query_interface(this : IWMPCdromCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPCdromCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPCdromCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPCdromCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPCdromCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPCdromCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPCdromCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_count(this : IWMPCdromCollection*, plcount : Int32*) : HRESULT
    @lpVtbl.value.get_count.call(this, plcount)
  end
  def item(this : IWMPCdromCollection*, lindex : Int32, ppitem : IWMPCdrom*) : HRESULT
    @lpVtbl.value.item.call(this, lindex, ppitem)
  end
  def get_by_drive_specifier(this : IWMPCdromCollection*, bstrdrivespecifier : UInt8*, ppcdrom : IWMPCdrom*) : HRESULT
    @lpVtbl.value.get_by_drive_specifier.call(this, bstrdrivespecifier, ppcdrom)
  end
end
struct LibWin32::IWMPStringCollection
  def query_interface(this : IWMPStringCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPStringCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPStringCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPStringCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPStringCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPStringCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPStringCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_count(this : IWMPStringCollection*, plcount : Int32*) : HRESULT
    @lpVtbl.value.get_count.call(this, plcount)
  end
  def item(this : IWMPStringCollection*, lindex : Int32, pbstrstring : UInt8**) : HRESULT
    @lpVtbl.value.item.call(this, lindex, pbstrstring)
  end
end
struct LibWin32::IWMPMediaCollection
  def query_interface(this : IWMPMediaCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPMediaCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPMediaCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPMediaCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPMediaCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPMediaCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPMediaCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def add(this : IWMPMediaCollection*, bstrurl : UInt8*, ppitem : IWMPMedia*) : HRESULT
    @lpVtbl.value.add.call(this, bstrurl, ppitem)
  end
  def get_all(this : IWMPMediaCollection*, ppmediaitems : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.get_all.call(this, ppmediaitems)
  end
  def get_by_name(this : IWMPMediaCollection*, bstrname : UInt8*, ppmediaitems : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.get_by_name.call(this, bstrname, ppmediaitems)
  end
  def get_by_genre(this : IWMPMediaCollection*, bstrgenre : UInt8*, ppmediaitems : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.get_by_genre.call(this, bstrgenre, ppmediaitems)
  end
  def get_by_author(this : IWMPMediaCollection*, bstrauthor : UInt8*, ppmediaitems : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.get_by_author.call(this, bstrauthor, ppmediaitems)
  end
  def get_by_album(this : IWMPMediaCollection*, bstralbum : UInt8*, ppmediaitems : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.get_by_album.call(this, bstralbum, ppmediaitems)
  end
  def get_by_attribute(this : IWMPMediaCollection*, bstrattribute : UInt8*, bstrvalue : UInt8*, ppmediaitems : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.get_by_attribute.call(this, bstrattribute, bstrvalue, ppmediaitems)
  end
  def remove(this : IWMPMediaCollection*, pitem : IWMPMedia, varfdeletefile : Int16) : HRESULT
    @lpVtbl.value.remove.call(this, pitem, varfdeletefile)
  end
  def get_attribute_string_collection(this : IWMPMediaCollection*, bstrattribute : UInt8*, bstrmediatype : UInt8*, ppstringcollection : IWMPStringCollection*) : HRESULT
    @lpVtbl.value.get_attribute_string_collection.call(this, bstrattribute, bstrmediatype, ppstringcollection)
  end
  def get_media_atom(this : IWMPMediaCollection*, bstritemname : UInt8*, platom : Int32*) : HRESULT
    @lpVtbl.value.get_media_atom.call(this, bstritemname, platom)
  end
  def set_deleted(this : IWMPMediaCollection*, pitem : IWMPMedia, varfisdeleted : Int16) : HRESULT
    @lpVtbl.value.set_deleted.call(this, pitem, varfisdeleted)
  end
  def is_deleted(this : IWMPMediaCollection*, pitem : IWMPMedia, pvarfisdeleted : Int16*) : HRESULT
    @lpVtbl.value.is_deleted.call(this, pitem, pvarfisdeleted)
  end
end
struct LibWin32::IWMPPlaylistArray
  def query_interface(this : IWMPPlaylistArray*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPPlaylistArray*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPPlaylistArray*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPPlaylistArray*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPPlaylistArray*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPPlaylistArray*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPPlaylistArray*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_count(this : IWMPPlaylistArray*, plcount : Int32*) : HRESULT
    @lpVtbl.value.get_count.call(this, plcount)
  end
  def item(this : IWMPPlaylistArray*, lindex : Int32, ppitem : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.item.call(this, lindex, ppitem)
  end
end
struct LibWin32::IWMPPlaylistCollection
  def query_interface(this : IWMPPlaylistCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPPlaylistCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPPlaylistCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPPlaylistCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPPlaylistCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPPlaylistCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPPlaylistCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def new_playlist(this : IWMPPlaylistCollection*, bstrname : UInt8*, ppitem : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.new_playlist.call(this, bstrname, ppitem)
  end
  def get_all(this : IWMPPlaylistCollection*, ppplaylistarray : IWMPPlaylistArray*) : HRESULT
    @lpVtbl.value.get_all.call(this, ppplaylistarray)
  end
  def get_by_name(this : IWMPPlaylistCollection*, bstrname : UInt8*, ppplaylistarray : IWMPPlaylistArray*) : HRESULT
    @lpVtbl.value.get_by_name.call(this, bstrname, ppplaylistarray)
  end
  def remove(this : IWMPPlaylistCollection*, pitem : IWMPPlaylist) : HRESULT
    @lpVtbl.value.remove.call(this, pitem)
  end
  def set_deleted(this : IWMPPlaylistCollection*, pitem : IWMPPlaylist, varfisdeleted : Int16) : HRESULT
    @lpVtbl.value.set_deleted.call(this, pitem, varfisdeleted)
  end
  def is_deleted(this : IWMPPlaylistCollection*, pitem : IWMPPlaylist, pvarfisdeleted : Int16*) : HRESULT
    @lpVtbl.value.is_deleted.call(this, pitem, pvarfisdeleted)
  end
  def import_playlist(this : IWMPPlaylistCollection*, pitem : IWMPPlaylist, ppimporteditem : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.import_playlist.call(this, pitem, ppimporteditem)
  end
end
struct LibWin32::IWMPNetwork
  def query_interface(this : IWMPNetwork*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPNetwork*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPNetwork*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPNetwork*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPNetwork*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPNetwork*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPNetwork*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_band_width(this : IWMPNetwork*, plbandwidth : Int32*) : HRESULT
    @lpVtbl.value.get_band_width.call(this, plbandwidth)
  end
  def get_recovered_packets(this : IWMPNetwork*, plrecoveredpackets : Int32*) : HRESULT
    @lpVtbl.value.get_recovered_packets.call(this, plrecoveredpackets)
  end
  def get_source_protocol(this : IWMPNetwork*, pbstrsourceprotocol : UInt8**) : HRESULT
    @lpVtbl.value.get_source_protocol.call(this, pbstrsourceprotocol)
  end
  def get_received_packets(this : IWMPNetwork*, plreceivedpackets : Int32*) : HRESULT
    @lpVtbl.value.get_received_packets.call(this, plreceivedpackets)
  end
  def get_lost_packets(this : IWMPNetwork*, pllostpackets : Int32*) : HRESULT
    @lpVtbl.value.get_lost_packets.call(this, pllostpackets)
  end
  def get_reception_quality(this : IWMPNetwork*, plreceptionquality : Int32*) : HRESULT
    @lpVtbl.value.get_reception_quality.call(this, plreceptionquality)
  end
  def get_buffering_count(this : IWMPNetwork*, plbufferingcount : Int32*) : HRESULT
    @lpVtbl.value.get_buffering_count.call(this, plbufferingcount)
  end
  def get_buffering_progress(this : IWMPNetwork*, plbufferingprogress : Int32*) : HRESULT
    @lpVtbl.value.get_buffering_progress.call(this, plbufferingprogress)
  end
  def get_buffering_time(this : IWMPNetwork*, plbufferingtime : Int32*) : HRESULT
    @lpVtbl.value.get_buffering_time.call(this, plbufferingtime)
  end
  def put_buffering_time(this : IWMPNetwork*, lbufferingtime : Int32) : HRESULT
    @lpVtbl.value.put_buffering_time.call(this, lbufferingtime)
  end
  def get_frame_rate(this : IWMPNetwork*, plframerate : Int32*) : HRESULT
    @lpVtbl.value.get_frame_rate.call(this, plframerate)
  end
  def get_max_bit_rate(this : IWMPNetwork*, plbitrate : Int32*) : HRESULT
    @lpVtbl.value.get_max_bit_rate.call(this, plbitrate)
  end
  def get_bit_rate(this : IWMPNetwork*, plbitrate : Int32*) : HRESULT
    @lpVtbl.value.get_bit_rate.call(this, plbitrate)
  end
  def get_proxy_settings(this : IWMPNetwork*, bstrprotocol : UInt8*, plproxysetting : Int32*) : HRESULT
    @lpVtbl.value.get_proxy_settings.call(this, bstrprotocol, plproxysetting)
  end
  def set_proxy_settings(this : IWMPNetwork*, bstrprotocol : UInt8*, lproxysetting : Int32) : HRESULT
    @lpVtbl.value.set_proxy_settings.call(this, bstrprotocol, lproxysetting)
  end
  def get_proxy_name(this : IWMPNetwork*, bstrprotocol : UInt8*, pbstrproxyname : UInt8**) : HRESULT
    @lpVtbl.value.get_proxy_name.call(this, bstrprotocol, pbstrproxyname)
  end
  def set_proxy_name(this : IWMPNetwork*, bstrprotocol : UInt8*, bstrproxyname : UInt8*) : HRESULT
    @lpVtbl.value.set_proxy_name.call(this, bstrprotocol, bstrproxyname)
  end
  def get_proxy_port(this : IWMPNetwork*, bstrprotocol : UInt8*, lproxyport : Int32*) : HRESULT
    @lpVtbl.value.get_proxy_port.call(this, bstrprotocol, lproxyport)
  end
  def set_proxy_port(this : IWMPNetwork*, bstrprotocol : UInt8*, lproxyport : Int32) : HRESULT
    @lpVtbl.value.set_proxy_port.call(this, bstrprotocol, lproxyport)
  end
  def get_proxy_exception_list(this : IWMPNetwork*, bstrprotocol : UInt8*, pbstrexceptionlist : UInt8**) : HRESULT
    @lpVtbl.value.get_proxy_exception_list.call(this, bstrprotocol, pbstrexceptionlist)
  end
  def set_proxy_exception_list(this : IWMPNetwork*, bstrprotocol : UInt8*, pbstrexceptionlist : UInt8*) : HRESULT
    @lpVtbl.value.set_proxy_exception_list.call(this, bstrprotocol, pbstrexceptionlist)
  end
  def get_proxy_bypass_for_local(this : IWMPNetwork*, bstrprotocol : UInt8*, pfbypassforlocal : Int16*) : HRESULT
    @lpVtbl.value.get_proxy_bypass_for_local.call(this, bstrprotocol, pfbypassforlocal)
  end
  def set_proxy_bypass_for_local(this : IWMPNetwork*, bstrprotocol : UInt8*, fbypassforlocal : Int16) : HRESULT
    @lpVtbl.value.set_proxy_bypass_for_local.call(this, bstrprotocol, fbypassforlocal)
  end
  def get_max_bandwidth(this : IWMPNetwork*, lmaxbandwidth : Int32*) : HRESULT
    @lpVtbl.value.get_max_bandwidth.call(this, lmaxbandwidth)
  end
  def put_max_bandwidth(this : IWMPNetwork*, lmaxbandwidth : Int32) : HRESULT
    @lpVtbl.value.put_max_bandwidth.call(this, lmaxbandwidth)
  end
  def get_download_progress(this : IWMPNetwork*, pldownloadprogress : Int32*) : HRESULT
    @lpVtbl.value.get_download_progress.call(this, pldownloadprogress)
  end
  def get_encoded_frame_rate(this : IWMPNetwork*, plframerate : Int32*) : HRESULT
    @lpVtbl.value.get_encoded_frame_rate.call(this, plframerate)
  end
  def get_frames_skipped(this : IWMPNetwork*, plframes : Int32*) : HRESULT
    @lpVtbl.value.get_frames_skipped.call(this, plframes)
  end
end
struct LibWin32::IWMPCore
  def query_interface(this : IWMPCore*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPCore*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPCore*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPCore*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPCore*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPCore*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPCore*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def close(this : IWMPCore*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def get_url(this : IWMPCore*, pbstrurl : UInt8**) : HRESULT
    @lpVtbl.value.get_url.call(this, pbstrurl)
  end
  def put_url(this : IWMPCore*, bstrurl : UInt8*) : HRESULT
    @lpVtbl.value.put_url.call(this, bstrurl)
  end
  def get_open_state(this : IWMPCore*, pwmpos : WMPOpenState*) : HRESULT
    @lpVtbl.value.get_open_state.call(this, pwmpos)
  end
  def get_play_state(this : IWMPCore*, pwmpps : WMPPlayState*) : HRESULT
    @lpVtbl.value.get_play_state.call(this, pwmpps)
  end
  def get_controls(this : IWMPCore*, ppcontrol : IWMPControls*) : HRESULT
    @lpVtbl.value.get_controls.call(this, ppcontrol)
  end
  def get_settings(this : IWMPCore*, ppsettings : IWMPSettings*) : HRESULT
    @lpVtbl.value.get_settings.call(this, ppsettings)
  end
  def get_current_media(this : IWMPCore*, ppmedia : IWMPMedia*) : HRESULT
    @lpVtbl.value.get_current_media.call(this, ppmedia)
  end
  def put_current_media(this : IWMPCore*, pmedia : IWMPMedia) : HRESULT
    @lpVtbl.value.put_current_media.call(this, pmedia)
  end
  def get_media_collection(this : IWMPCore*, ppmediacollection : IWMPMediaCollection*) : HRESULT
    @lpVtbl.value.get_media_collection.call(this, ppmediacollection)
  end
  def get_playlist_collection(this : IWMPCore*, ppplaylistcollection : IWMPPlaylistCollection*) : HRESULT
    @lpVtbl.value.get_playlist_collection.call(this, ppplaylistcollection)
  end
  def get_version_info(this : IWMPCore*, pbstrversioninfo : UInt8**) : HRESULT
    @lpVtbl.value.get_version_info.call(this, pbstrversioninfo)
  end
  def launch_url(this : IWMPCore*, bstrurl : UInt8*) : HRESULT
    @lpVtbl.value.launch_url.call(this, bstrurl)
  end
  def get_network(this : IWMPCore*, ppqni : IWMPNetwork*) : HRESULT
    @lpVtbl.value.get_network.call(this, ppqni)
  end
  def get_current_playlist(this : IWMPCore*, pppl : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.get_current_playlist.call(this, pppl)
  end
  def put_current_playlist(this : IWMPCore*, ppl : IWMPPlaylist) : HRESULT
    @lpVtbl.value.put_current_playlist.call(this, ppl)
  end
  def get_cdrom_collection(this : IWMPCore*, ppcdromcollection : IWMPCdromCollection*) : HRESULT
    @lpVtbl.value.get_cdrom_collection.call(this, ppcdromcollection)
  end
  def get_closed_caption(this : IWMPCore*, ppclosedcaption : IWMPClosedCaption*) : HRESULT
    @lpVtbl.value.get_closed_caption.call(this, ppclosedcaption)
  end
  def get_is_online(this : IWMPCore*, pfonline : Int16*) : HRESULT
    @lpVtbl.value.get_is_online.call(this, pfonline)
  end
  def get_error(this : IWMPCore*, pperror : IWMPError*) : HRESULT
    @lpVtbl.value.get_error.call(this, pperror)
  end
  def get_status(this : IWMPCore*, pbstrstatus : UInt8**) : HRESULT
    @lpVtbl.value.get_status.call(this, pbstrstatus)
  end
end
struct LibWin32::IWMPPlayer
  def query_interface(this : IWMPPlayer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPPlayer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPPlayer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPPlayer*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPPlayer*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPPlayer*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPPlayer*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def close(this : IWMPPlayer*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def get_url(this : IWMPPlayer*, pbstrurl : UInt8**) : HRESULT
    @lpVtbl.value.get_url.call(this, pbstrurl)
  end
  def put_url(this : IWMPPlayer*, bstrurl : UInt8*) : HRESULT
    @lpVtbl.value.put_url.call(this, bstrurl)
  end
  def get_open_state(this : IWMPPlayer*, pwmpos : WMPOpenState*) : HRESULT
    @lpVtbl.value.get_open_state.call(this, pwmpos)
  end
  def get_play_state(this : IWMPPlayer*, pwmpps : WMPPlayState*) : HRESULT
    @lpVtbl.value.get_play_state.call(this, pwmpps)
  end
  def get_controls(this : IWMPPlayer*, ppcontrol : IWMPControls*) : HRESULT
    @lpVtbl.value.get_controls.call(this, ppcontrol)
  end
  def get_settings(this : IWMPPlayer*, ppsettings : IWMPSettings*) : HRESULT
    @lpVtbl.value.get_settings.call(this, ppsettings)
  end
  def get_current_media(this : IWMPPlayer*, ppmedia : IWMPMedia*) : HRESULT
    @lpVtbl.value.get_current_media.call(this, ppmedia)
  end
  def put_current_media(this : IWMPPlayer*, pmedia : IWMPMedia) : HRESULT
    @lpVtbl.value.put_current_media.call(this, pmedia)
  end
  def get_media_collection(this : IWMPPlayer*, ppmediacollection : IWMPMediaCollection*) : HRESULT
    @lpVtbl.value.get_media_collection.call(this, ppmediacollection)
  end
  def get_playlist_collection(this : IWMPPlayer*, ppplaylistcollection : IWMPPlaylistCollection*) : HRESULT
    @lpVtbl.value.get_playlist_collection.call(this, ppplaylistcollection)
  end
  def get_version_info(this : IWMPPlayer*, pbstrversioninfo : UInt8**) : HRESULT
    @lpVtbl.value.get_version_info.call(this, pbstrversioninfo)
  end
  def launch_url(this : IWMPPlayer*, bstrurl : UInt8*) : HRESULT
    @lpVtbl.value.launch_url.call(this, bstrurl)
  end
  def get_network(this : IWMPPlayer*, ppqni : IWMPNetwork*) : HRESULT
    @lpVtbl.value.get_network.call(this, ppqni)
  end
  def get_current_playlist(this : IWMPPlayer*, pppl : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.get_current_playlist.call(this, pppl)
  end
  def put_current_playlist(this : IWMPPlayer*, ppl : IWMPPlaylist) : HRESULT
    @lpVtbl.value.put_current_playlist.call(this, ppl)
  end
  def get_cdrom_collection(this : IWMPPlayer*, ppcdromcollection : IWMPCdromCollection*) : HRESULT
    @lpVtbl.value.get_cdrom_collection.call(this, ppcdromcollection)
  end
  def get_closed_caption(this : IWMPPlayer*, ppclosedcaption : IWMPClosedCaption*) : HRESULT
    @lpVtbl.value.get_closed_caption.call(this, ppclosedcaption)
  end
  def get_is_online(this : IWMPPlayer*, pfonline : Int16*) : HRESULT
    @lpVtbl.value.get_is_online.call(this, pfonline)
  end
  def get_error(this : IWMPPlayer*, pperror : IWMPError*) : HRESULT
    @lpVtbl.value.get_error.call(this, pperror)
  end
  def get_status(this : IWMPPlayer*, pbstrstatus : UInt8**) : HRESULT
    @lpVtbl.value.get_status.call(this, pbstrstatus)
  end
  def get_enabled(this : IWMPPlayer*, pbenabled : Int16*) : HRESULT
    @lpVtbl.value.get_enabled.call(this, pbenabled)
  end
  def put_enabled(this : IWMPPlayer*, benabled : Int16) : HRESULT
    @lpVtbl.value.put_enabled.call(this, benabled)
  end
  def get_full_screen(this : IWMPPlayer*, pbfullscreen : Int16*) : HRESULT
    @lpVtbl.value.get_full_screen.call(this, pbfullscreen)
  end
  def put_full_screen(this : IWMPPlayer*, bfullscreen : Int16) : HRESULT
    @lpVtbl.value.put_full_screen.call(this, bfullscreen)
  end
  def get_enable_context_menu(this : IWMPPlayer*, pbenablecontextmenu : Int16*) : HRESULT
    @lpVtbl.value.get_enable_context_menu.call(this, pbenablecontextmenu)
  end
  def put_enable_context_menu(this : IWMPPlayer*, benablecontextmenu : Int16) : HRESULT
    @lpVtbl.value.put_enable_context_menu.call(this, benablecontextmenu)
  end
  def put_ui_mode(this : IWMPPlayer*, bstrmode : UInt8*) : HRESULT
    @lpVtbl.value.put_ui_mode.call(this, bstrmode)
  end
  def get_ui_mode(this : IWMPPlayer*, pbstrmode : UInt8**) : HRESULT
    @lpVtbl.value.get_ui_mode.call(this, pbstrmode)
  end
end
struct LibWin32::IWMPPlayer2
  def query_interface(this : IWMPPlayer2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPPlayer2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPPlayer2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPPlayer2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPPlayer2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPPlayer2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPPlayer2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def close(this : IWMPPlayer2*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def get_url(this : IWMPPlayer2*, pbstrurl : UInt8**) : HRESULT
    @lpVtbl.value.get_url.call(this, pbstrurl)
  end
  def put_url(this : IWMPPlayer2*, bstrurl : UInt8*) : HRESULT
    @lpVtbl.value.put_url.call(this, bstrurl)
  end
  def get_open_state(this : IWMPPlayer2*, pwmpos : WMPOpenState*) : HRESULT
    @lpVtbl.value.get_open_state.call(this, pwmpos)
  end
  def get_play_state(this : IWMPPlayer2*, pwmpps : WMPPlayState*) : HRESULT
    @lpVtbl.value.get_play_state.call(this, pwmpps)
  end
  def get_controls(this : IWMPPlayer2*, ppcontrol : IWMPControls*) : HRESULT
    @lpVtbl.value.get_controls.call(this, ppcontrol)
  end
  def get_settings(this : IWMPPlayer2*, ppsettings : IWMPSettings*) : HRESULT
    @lpVtbl.value.get_settings.call(this, ppsettings)
  end
  def get_current_media(this : IWMPPlayer2*, ppmedia : IWMPMedia*) : HRESULT
    @lpVtbl.value.get_current_media.call(this, ppmedia)
  end
  def put_current_media(this : IWMPPlayer2*, pmedia : IWMPMedia) : HRESULT
    @lpVtbl.value.put_current_media.call(this, pmedia)
  end
  def get_media_collection(this : IWMPPlayer2*, ppmediacollection : IWMPMediaCollection*) : HRESULT
    @lpVtbl.value.get_media_collection.call(this, ppmediacollection)
  end
  def get_playlist_collection(this : IWMPPlayer2*, ppplaylistcollection : IWMPPlaylistCollection*) : HRESULT
    @lpVtbl.value.get_playlist_collection.call(this, ppplaylistcollection)
  end
  def get_version_info(this : IWMPPlayer2*, pbstrversioninfo : UInt8**) : HRESULT
    @lpVtbl.value.get_version_info.call(this, pbstrversioninfo)
  end
  def launch_url(this : IWMPPlayer2*, bstrurl : UInt8*) : HRESULT
    @lpVtbl.value.launch_url.call(this, bstrurl)
  end
  def get_network(this : IWMPPlayer2*, ppqni : IWMPNetwork*) : HRESULT
    @lpVtbl.value.get_network.call(this, ppqni)
  end
  def get_current_playlist(this : IWMPPlayer2*, pppl : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.get_current_playlist.call(this, pppl)
  end
  def put_current_playlist(this : IWMPPlayer2*, ppl : IWMPPlaylist) : HRESULT
    @lpVtbl.value.put_current_playlist.call(this, ppl)
  end
  def get_cdrom_collection(this : IWMPPlayer2*, ppcdromcollection : IWMPCdromCollection*) : HRESULT
    @lpVtbl.value.get_cdrom_collection.call(this, ppcdromcollection)
  end
  def get_closed_caption(this : IWMPPlayer2*, ppclosedcaption : IWMPClosedCaption*) : HRESULT
    @lpVtbl.value.get_closed_caption.call(this, ppclosedcaption)
  end
  def get_is_online(this : IWMPPlayer2*, pfonline : Int16*) : HRESULT
    @lpVtbl.value.get_is_online.call(this, pfonline)
  end
  def get_error(this : IWMPPlayer2*, pperror : IWMPError*) : HRESULT
    @lpVtbl.value.get_error.call(this, pperror)
  end
  def get_status(this : IWMPPlayer2*, pbstrstatus : UInt8**) : HRESULT
    @lpVtbl.value.get_status.call(this, pbstrstatus)
  end
  def get_enabled(this : IWMPPlayer2*, pbenabled : Int16*) : HRESULT
    @lpVtbl.value.get_enabled.call(this, pbenabled)
  end
  def put_enabled(this : IWMPPlayer2*, benabled : Int16) : HRESULT
    @lpVtbl.value.put_enabled.call(this, benabled)
  end
  def get_full_screen(this : IWMPPlayer2*, pbfullscreen : Int16*) : HRESULT
    @lpVtbl.value.get_full_screen.call(this, pbfullscreen)
  end
  def put_full_screen(this : IWMPPlayer2*, bfullscreen : Int16) : HRESULT
    @lpVtbl.value.put_full_screen.call(this, bfullscreen)
  end
  def get_enable_context_menu(this : IWMPPlayer2*, pbenablecontextmenu : Int16*) : HRESULT
    @lpVtbl.value.get_enable_context_menu.call(this, pbenablecontextmenu)
  end
  def put_enable_context_menu(this : IWMPPlayer2*, benablecontextmenu : Int16) : HRESULT
    @lpVtbl.value.put_enable_context_menu.call(this, benablecontextmenu)
  end
  def put_ui_mode(this : IWMPPlayer2*, bstrmode : UInt8*) : HRESULT
    @lpVtbl.value.put_ui_mode.call(this, bstrmode)
  end
  def get_ui_mode(this : IWMPPlayer2*, pbstrmode : UInt8**) : HRESULT
    @lpVtbl.value.get_ui_mode.call(this, pbstrmode)
  end
  def get_stretch_to_fit(this : IWMPPlayer2*, pbenabled : Int16*) : HRESULT
    @lpVtbl.value.get_stretch_to_fit.call(this, pbenabled)
  end
  def put_stretch_to_fit(this : IWMPPlayer2*, benabled : Int16) : HRESULT
    @lpVtbl.value.put_stretch_to_fit.call(this, benabled)
  end
  def get_windowless_video(this : IWMPPlayer2*, pbenabled : Int16*) : HRESULT
    @lpVtbl.value.get_windowless_video.call(this, pbenabled)
  end
  def put_windowless_video(this : IWMPPlayer2*, benabled : Int16) : HRESULT
    @lpVtbl.value.put_windowless_video.call(this, benabled)
  end
end
struct LibWin32::IWMPMedia2
  def query_interface(this : IWMPMedia2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPMedia2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPMedia2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPMedia2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPMedia2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPMedia2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPMedia2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_is_identical(this : IWMPMedia2*, piwmpmedia : IWMPMedia, pvbool : Int16*) : HRESULT
    @lpVtbl.value.get_is_identical.call(this, piwmpmedia, pvbool)
  end
  def get_source_url(this : IWMPMedia2*, pbstrsourceurl : UInt8**) : HRESULT
    @lpVtbl.value.get_source_url.call(this, pbstrsourceurl)
  end
  def get_name(this : IWMPMedia2*, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, pbstrname)
  end
  def put_name(this : IWMPMedia2*, bstrname : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, bstrname)
  end
  def get_image_source_width(this : IWMPMedia2*, pwidth : Int32*) : HRESULT
    @lpVtbl.value.get_image_source_width.call(this, pwidth)
  end
  def get_image_source_height(this : IWMPMedia2*, pheight : Int32*) : HRESULT
    @lpVtbl.value.get_image_source_height.call(this, pheight)
  end
  def get_marker_count(this : IWMPMedia2*, pmarkercount : Int32*) : HRESULT
    @lpVtbl.value.get_marker_count.call(this, pmarkercount)
  end
  def get_marker_time(this : IWMPMedia2*, markernum : Int32, pmarkertime : Float64*) : HRESULT
    @lpVtbl.value.get_marker_time.call(this, markernum, pmarkertime)
  end
  def get_marker_name(this : IWMPMedia2*, markernum : Int32, pbstrmarkername : UInt8**) : HRESULT
    @lpVtbl.value.get_marker_name.call(this, markernum, pbstrmarkername)
  end
  def get_duration(this : IWMPMedia2*, pduration : Float64*) : HRESULT
    @lpVtbl.value.get_duration.call(this, pduration)
  end
  def get_duration_string(this : IWMPMedia2*, pbstrduration : UInt8**) : HRESULT
    @lpVtbl.value.get_duration_string.call(this, pbstrduration)
  end
  def get_attribute_count(this : IWMPMedia2*, plcount : Int32*) : HRESULT
    @lpVtbl.value.get_attribute_count.call(this, plcount)
  end
  def get_attribute_name(this : IWMPMedia2*, lindex : Int32, pbstritemname : UInt8**) : HRESULT
    @lpVtbl.value.get_attribute_name.call(this, lindex, pbstritemname)
  end
  def get_item_info(this : IWMPMedia2*, bstritemname : UInt8*, pbstrval : UInt8**) : HRESULT
    @lpVtbl.value.get_item_info.call(this, bstritemname, pbstrval)
  end
  def set_item_info(this : IWMPMedia2*, bstritemname : UInt8*, bstrval : UInt8*) : HRESULT
    @lpVtbl.value.set_item_info.call(this, bstritemname, bstrval)
  end
  def get_item_info_by_atom(this : IWMPMedia2*, latom : Int32, pbstrval : UInt8**) : HRESULT
    @lpVtbl.value.get_item_info_by_atom.call(this, latom, pbstrval)
  end
  def is_member_of(this : IWMPMedia2*, pplaylist : IWMPPlaylist, pvarfismemberof : Int16*) : HRESULT
    @lpVtbl.value.is_member_of.call(this, pplaylist, pvarfismemberof)
  end
  def is_read_only_item(this : IWMPMedia2*, bstritemname : UInt8*, pvarfisreadonly : Int16*) : HRESULT
    @lpVtbl.value.is_read_only_item.call(this, bstritemname, pvarfisreadonly)
  end
  def get_error(this : IWMPMedia2*, ppiwmperroritem : IWMPErrorItem*) : HRESULT
    @lpVtbl.value.get_error.call(this, ppiwmperroritem)
  end
end
struct LibWin32::IWMPControls2
  def query_interface(this : IWMPControls2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPControls2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPControls2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPControls2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPControls2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPControls2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPControls2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_is_available(this : IWMPControls2*, bstritem : UInt8*, pisavailable : Int16*) : HRESULT
    @lpVtbl.value.get_is_available.call(this, bstritem, pisavailable)
  end
  def play(this : IWMPControls2*) : HRESULT
    @lpVtbl.value.play.call(this)
  end
  def stop(this : IWMPControls2*) : HRESULT
    @lpVtbl.value.stop.call(this)
  end
  def pause(this : IWMPControls2*) : HRESULT
    @lpVtbl.value.pause.call(this)
  end
  def fast_forward(this : IWMPControls2*) : HRESULT
    @lpVtbl.value.fast_forward.call(this)
  end
  def fast_reverse(this : IWMPControls2*) : HRESULT
    @lpVtbl.value.fast_reverse.call(this)
  end
  def get_current_position(this : IWMPControls2*, pdcurrentposition : Float64*) : HRESULT
    @lpVtbl.value.get_current_position.call(this, pdcurrentposition)
  end
  def put_current_position(this : IWMPControls2*, dcurrentposition : Float64) : HRESULT
    @lpVtbl.value.put_current_position.call(this, dcurrentposition)
  end
  def get_current_position_string(this : IWMPControls2*, pbstrcurrentposition : UInt8**) : HRESULT
    @lpVtbl.value.get_current_position_string.call(this, pbstrcurrentposition)
  end
  def next(this : IWMPControls2*) : HRESULT
    @lpVtbl.value.next.call(this)
  end
  def previous(this : IWMPControls2*) : HRESULT
    @lpVtbl.value.previous.call(this)
  end
  def get_current_item(this : IWMPControls2*, ppiwmpmedia : IWMPMedia*) : HRESULT
    @lpVtbl.value.get_current_item.call(this, ppiwmpmedia)
  end
  def put_current_item(this : IWMPControls2*, piwmpmedia : IWMPMedia) : HRESULT
    @lpVtbl.value.put_current_item.call(this, piwmpmedia)
  end
  def get_current_marker(this : IWMPControls2*, plmarker : Int32*) : HRESULT
    @lpVtbl.value.get_current_marker.call(this, plmarker)
  end
  def put_current_marker(this : IWMPControls2*, lmarker : Int32) : HRESULT
    @lpVtbl.value.put_current_marker.call(this, lmarker)
  end
  def play_item(this : IWMPControls2*, piwmpmedia : IWMPMedia) : HRESULT
    @lpVtbl.value.play_item.call(this, piwmpmedia)
  end
  def step(this : IWMPControls2*, lstep : Int32) : HRESULT
    @lpVtbl.value.step.call(this, lstep)
  end
end
struct LibWin32::IWMPDVD
  def query_interface(this : IWMPDVD*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPDVD*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPDVD*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPDVD*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPDVD*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPDVD*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPDVD*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_is_available(this : IWMPDVD*, bstritem : UInt8*, pisavailable : Int16*) : HRESULT
    @lpVtbl.value.get_is_available.call(this, bstritem, pisavailable)
  end
  def get_domain(this : IWMPDVD*, strdomain : UInt8**) : HRESULT
    @lpVtbl.value.get_domain.call(this, strdomain)
  end
  def top_menu(this : IWMPDVD*) : HRESULT
    @lpVtbl.value.top_menu.call(this)
  end
  def title_menu(this : IWMPDVD*) : HRESULT
    @lpVtbl.value.title_menu.call(this)
  end
  def back(this : IWMPDVD*) : HRESULT
    @lpVtbl.value.back.call(this)
  end
  def resume(this : IWMPDVD*) : HRESULT
    @lpVtbl.value.resume.call(this)
  end
end
struct LibWin32::IWMPCore2
  def query_interface(this : IWMPCore2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPCore2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPCore2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPCore2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPCore2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPCore2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPCore2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def close(this : IWMPCore2*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def get_url(this : IWMPCore2*, pbstrurl : UInt8**) : HRESULT
    @lpVtbl.value.get_url.call(this, pbstrurl)
  end
  def put_url(this : IWMPCore2*, bstrurl : UInt8*) : HRESULT
    @lpVtbl.value.put_url.call(this, bstrurl)
  end
  def get_open_state(this : IWMPCore2*, pwmpos : WMPOpenState*) : HRESULT
    @lpVtbl.value.get_open_state.call(this, pwmpos)
  end
  def get_play_state(this : IWMPCore2*, pwmpps : WMPPlayState*) : HRESULT
    @lpVtbl.value.get_play_state.call(this, pwmpps)
  end
  def get_controls(this : IWMPCore2*, ppcontrol : IWMPControls*) : HRESULT
    @lpVtbl.value.get_controls.call(this, ppcontrol)
  end
  def get_settings(this : IWMPCore2*, ppsettings : IWMPSettings*) : HRESULT
    @lpVtbl.value.get_settings.call(this, ppsettings)
  end
  def get_current_media(this : IWMPCore2*, ppmedia : IWMPMedia*) : HRESULT
    @lpVtbl.value.get_current_media.call(this, ppmedia)
  end
  def put_current_media(this : IWMPCore2*, pmedia : IWMPMedia) : HRESULT
    @lpVtbl.value.put_current_media.call(this, pmedia)
  end
  def get_media_collection(this : IWMPCore2*, ppmediacollection : IWMPMediaCollection*) : HRESULT
    @lpVtbl.value.get_media_collection.call(this, ppmediacollection)
  end
  def get_playlist_collection(this : IWMPCore2*, ppplaylistcollection : IWMPPlaylistCollection*) : HRESULT
    @lpVtbl.value.get_playlist_collection.call(this, ppplaylistcollection)
  end
  def get_version_info(this : IWMPCore2*, pbstrversioninfo : UInt8**) : HRESULT
    @lpVtbl.value.get_version_info.call(this, pbstrversioninfo)
  end
  def launch_url(this : IWMPCore2*, bstrurl : UInt8*) : HRESULT
    @lpVtbl.value.launch_url.call(this, bstrurl)
  end
  def get_network(this : IWMPCore2*, ppqni : IWMPNetwork*) : HRESULT
    @lpVtbl.value.get_network.call(this, ppqni)
  end
  def get_current_playlist(this : IWMPCore2*, pppl : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.get_current_playlist.call(this, pppl)
  end
  def put_current_playlist(this : IWMPCore2*, ppl : IWMPPlaylist) : HRESULT
    @lpVtbl.value.put_current_playlist.call(this, ppl)
  end
  def get_cdrom_collection(this : IWMPCore2*, ppcdromcollection : IWMPCdromCollection*) : HRESULT
    @lpVtbl.value.get_cdrom_collection.call(this, ppcdromcollection)
  end
  def get_closed_caption(this : IWMPCore2*, ppclosedcaption : IWMPClosedCaption*) : HRESULT
    @lpVtbl.value.get_closed_caption.call(this, ppclosedcaption)
  end
  def get_is_online(this : IWMPCore2*, pfonline : Int16*) : HRESULT
    @lpVtbl.value.get_is_online.call(this, pfonline)
  end
  def get_error(this : IWMPCore2*, pperror : IWMPError*) : HRESULT
    @lpVtbl.value.get_error.call(this, pperror)
  end
  def get_status(this : IWMPCore2*, pbstrstatus : UInt8**) : HRESULT
    @lpVtbl.value.get_status.call(this, pbstrstatus)
  end
  def get_dvd(this : IWMPCore2*, ppdvd : IWMPDVD*) : HRESULT
    @lpVtbl.value.get_dvd.call(this, ppdvd)
  end
end
struct LibWin32::IWMPPlayer3
  def query_interface(this : IWMPPlayer3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPPlayer3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPPlayer3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPPlayer3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPPlayer3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPPlayer3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPPlayer3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def close(this : IWMPPlayer3*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def get_url(this : IWMPPlayer3*, pbstrurl : UInt8**) : HRESULT
    @lpVtbl.value.get_url.call(this, pbstrurl)
  end
  def put_url(this : IWMPPlayer3*, bstrurl : UInt8*) : HRESULT
    @lpVtbl.value.put_url.call(this, bstrurl)
  end
  def get_open_state(this : IWMPPlayer3*, pwmpos : WMPOpenState*) : HRESULT
    @lpVtbl.value.get_open_state.call(this, pwmpos)
  end
  def get_play_state(this : IWMPPlayer3*, pwmpps : WMPPlayState*) : HRESULT
    @lpVtbl.value.get_play_state.call(this, pwmpps)
  end
  def get_controls(this : IWMPPlayer3*, ppcontrol : IWMPControls*) : HRESULT
    @lpVtbl.value.get_controls.call(this, ppcontrol)
  end
  def get_settings(this : IWMPPlayer3*, ppsettings : IWMPSettings*) : HRESULT
    @lpVtbl.value.get_settings.call(this, ppsettings)
  end
  def get_current_media(this : IWMPPlayer3*, ppmedia : IWMPMedia*) : HRESULT
    @lpVtbl.value.get_current_media.call(this, ppmedia)
  end
  def put_current_media(this : IWMPPlayer3*, pmedia : IWMPMedia) : HRESULT
    @lpVtbl.value.put_current_media.call(this, pmedia)
  end
  def get_media_collection(this : IWMPPlayer3*, ppmediacollection : IWMPMediaCollection*) : HRESULT
    @lpVtbl.value.get_media_collection.call(this, ppmediacollection)
  end
  def get_playlist_collection(this : IWMPPlayer3*, ppplaylistcollection : IWMPPlaylistCollection*) : HRESULT
    @lpVtbl.value.get_playlist_collection.call(this, ppplaylistcollection)
  end
  def get_version_info(this : IWMPPlayer3*, pbstrversioninfo : UInt8**) : HRESULT
    @lpVtbl.value.get_version_info.call(this, pbstrversioninfo)
  end
  def launch_url(this : IWMPPlayer3*, bstrurl : UInt8*) : HRESULT
    @lpVtbl.value.launch_url.call(this, bstrurl)
  end
  def get_network(this : IWMPPlayer3*, ppqni : IWMPNetwork*) : HRESULT
    @lpVtbl.value.get_network.call(this, ppqni)
  end
  def get_current_playlist(this : IWMPPlayer3*, pppl : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.get_current_playlist.call(this, pppl)
  end
  def put_current_playlist(this : IWMPPlayer3*, ppl : IWMPPlaylist) : HRESULT
    @lpVtbl.value.put_current_playlist.call(this, ppl)
  end
  def get_cdrom_collection(this : IWMPPlayer3*, ppcdromcollection : IWMPCdromCollection*) : HRESULT
    @lpVtbl.value.get_cdrom_collection.call(this, ppcdromcollection)
  end
  def get_closed_caption(this : IWMPPlayer3*, ppclosedcaption : IWMPClosedCaption*) : HRESULT
    @lpVtbl.value.get_closed_caption.call(this, ppclosedcaption)
  end
  def get_is_online(this : IWMPPlayer3*, pfonline : Int16*) : HRESULT
    @lpVtbl.value.get_is_online.call(this, pfonline)
  end
  def get_error(this : IWMPPlayer3*, pperror : IWMPError*) : HRESULT
    @lpVtbl.value.get_error.call(this, pperror)
  end
  def get_status(this : IWMPPlayer3*, pbstrstatus : UInt8**) : HRESULT
    @lpVtbl.value.get_status.call(this, pbstrstatus)
  end
  def get_dvd(this : IWMPPlayer3*, ppdvd : IWMPDVD*) : HRESULT
    @lpVtbl.value.get_dvd.call(this, ppdvd)
  end
  def get_enabled(this : IWMPPlayer3*, pbenabled : Int16*) : HRESULT
    @lpVtbl.value.get_enabled.call(this, pbenabled)
  end
  def put_enabled(this : IWMPPlayer3*, benabled : Int16) : HRESULT
    @lpVtbl.value.put_enabled.call(this, benabled)
  end
  def get_full_screen(this : IWMPPlayer3*, pbfullscreen : Int16*) : HRESULT
    @lpVtbl.value.get_full_screen.call(this, pbfullscreen)
  end
  def put_full_screen(this : IWMPPlayer3*, bfullscreen : Int16) : HRESULT
    @lpVtbl.value.put_full_screen.call(this, bfullscreen)
  end
  def get_enable_context_menu(this : IWMPPlayer3*, pbenablecontextmenu : Int16*) : HRESULT
    @lpVtbl.value.get_enable_context_menu.call(this, pbenablecontextmenu)
  end
  def put_enable_context_menu(this : IWMPPlayer3*, benablecontextmenu : Int16) : HRESULT
    @lpVtbl.value.put_enable_context_menu.call(this, benablecontextmenu)
  end
  def put_ui_mode(this : IWMPPlayer3*, bstrmode : UInt8*) : HRESULT
    @lpVtbl.value.put_ui_mode.call(this, bstrmode)
  end
  def get_ui_mode(this : IWMPPlayer3*, pbstrmode : UInt8**) : HRESULT
    @lpVtbl.value.get_ui_mode.call(this, pbstrmode)
  end
  def get_stretch_to_fit(this : IWMPPlayer3*, pbenabled : Int16*) : HRESULT
    @lpVtbl.value.get_stretch_to_fit.call(this, pbenabled)
  end
  def put_stretch_to_fit(this : IWMPPlayer3*, benabled : Int16) : HRESULT
    @lpVtbl.value.put_stretch_to_fit.call(this, benabled)
  end
  def get_windowless_video(this : IWMPPlayer3*, pbenabled : Int16*) : HRESULT
    @lpVtbl.value.get_windowless_video.call(this, pbenabled)
  end
  def put_windowless_video(this : IWMPPlayer3*, benabled : Int16) : HRESULT
    @lpVtbl.value.put_windowless_video.call(this, benabled)
  end
end
struct LibWin32::IWMPErrorItem2
  def query_interface(this : IWMPErrorItem2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPErrorItem2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPErrorItem2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPErrorItem2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPErrorItem2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPErrorItem2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPErrorItem2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_error_code(this : IWMPErrorItem2*, phr : Int32*) : HRESULT
    @lpVtbl.value.get_error_code.call(this, phr)
  end
  def get_error_description(this : IWMPErrorItem2*, pbstrdescription : UInt8**) : HRESULT
    @lpVtbl.value.get_error_description.call(this, pbstrdescription)
  end
  def get_error_context(this : IWMPErrorItem2*, pvarcontext : VARIANT*) : HRESULT
    @lpVtbl.value.get_error_context.call(this, pvarcontext)
  end
  def get_remedy(this : IWMPErrorItem2*, plremedy : Int32*) : HRESULT
    @lpVtbl.value.get_remedy.call(this, plremedy)
  end
  def get_custom_url(this : IWMPErrorItem2*, pbstrcustomurl : UInt8**) : HRESULT
    @lpVtbl.value.get_custom_url.call(this, pbstrcustomurl)
  end
  def get_condition(this : IWMPErrorItem2*, plcondition : Int32*) : HRESULT
    @lpVtbl.value.get_condition.call(this, plcondition)
  end
end
struct LibWin32::IWMPRemoteMediaServices
  def query_interface(this : IWMPRemoteMediaServices*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPRemoteMediaServices*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPRemoteMediaServices*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_service_type(this : IWMPRemoteMediaServices*, pbstrtype : UInt8**) : HRESULT
    @lpVtbl.value.get_service_type.call(this, pbstrtype)
  end
  def get_application_name(this : IWMPRemoteMediaServices*, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_application_name.call(this, pbstrname)
  end
  def get_scriptable_object(this : IWMPRemoteMediaServices*, pbstrname : UInt8**, ppdispatch : IDispatch*) : HRESULT
    @lpVtbl.value.get_scriptable_object.call(this, pbstrname, ppdispatch)
  end
  def get_custom_ui_mode(this : IWMPRemoteMediaServices*, pbstrfile : UInt8**) : HRESULT
    @lpVtbl.value.get_custom_ui_mode.call(this, pbstrfile)
  end
end
struct LibWin32::IWMPSkinManager
  def query_interface(this : IWMPSkinManager*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPSkinManager*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPSkinManager*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_visual_style(this : IWMPSkinManager*, bstrpath : UInt8*) : HRESULT
    @lpVtbl.value.set_visual_style.call(this, bstrpath)
  end
end
struct LibWin32::IWMPMetadataPicture
  def query_interface(this : IWMPMetadataPicture*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPMetadataPicture*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPMetadataPicture*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPMetadataPicture*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPMetadataPicture*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPMetadataPicture*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPMetadataPicture*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_mime_type(this : IWMPMetadataPicture*, pbstrmimetype : UInt8**) : HRESULT
    @lpVtbl.value.get_mime_type.call(this, pbstrmimetype)
  end
  def get_picture_type(this : IWMPMetadataPicture*, pbstrpicturetype : UInt8**) : HRESULT
    @lpVtbl.value.get_picture_type.call(this, pbstrpicturetype)
  end
  def get_description(this : IWMPMetadataPicture*, pbstrdescription : UInt8**) : HRESULT
    @lpVtbl.value.get_description.call(this, pbstrdescription)
  end
  def get_url(this : IWMPMetadataPicture*, pbstrurl : UInt8**) : HRESULT
    @lpVtbl.value.get_url.call(this, pbstrurl)
  end
end
struct LibWin32::IWMPMetadataText
  def query_interface(this : IWMPMetadataText*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPMetadataText*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPMetadataText*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPMetadataText*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPMetadataText*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPMetadataText*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPMetadataText*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_description(this : IWMPMetadataText*, pbstrdescription : UInt8**) : HRESULT
    @lpVtbl.value.get_description.call(this, pbstrdescription)
  end
  def get_text(this : IWMPMetadataText*, pbstrtext : UInt8**) : HRESULT
    @lpVtbl.value.get_text.call(this, pbstrtext)
  end
end
struct LibWin32::IWMPMedia3
  def query_interface(this : IWMPMedia3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPMedia3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPMedia3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPMedia3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPMedia3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPMedia3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPMedia3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_is_identical(this : IWMPMedia3*, piwmpmedia : IWMPMedia, pvbool : Int16*) : HRESULT
    @lpVtbl.value.get_is_identical.call(this, piwmpmedia, pvbool)
  end
  def get_source_url(this : IWMPMedia3*, pbstrsourceurl : UInt8**) : HRESULT
    @lpVtbl.value.get_source_url.call(this, pbstrsourceurl)
  end
  def get_name(this : IWMPMedia3*, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, pbstrname)
  end
  def put_name(this : IWMPMedia3*, bstrname : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, bstrname)
  end
  def get_image_source_width(this : IWMPMedia3*, pwidth : Int32*) : HRESULT
    @lpVtbl.value.get_image_source_width.call(this, pwidth)
  end
  def get_image_source_height(this : IWMPMedia3*, pheight : Int32*) : HRESULT
    @lpVtbl.value.get_image_source_height.call(this, pheight)
  end
  def get_marker_count(this : IWMPMedia3*, pmarkercount : Int32*) : HRESULT
    @lpVtbl.value.get_marker_count.call(this, pmarkercount)
  end
  def get_marker_time(this : IWMPMedia3*, markernum : Int32, pmarkertime : Float64*) : HRESULT
    @lpVtbl.value.get_marker_time.call(this, markernum, pmarkertime)
  end
  def get_marker_name(this : IWMPMedia3*, markernum : Int32, pbstrmarkername : UInt8**) : HRESULT
    @lpVtbl.value.get_marker_name.call(this, markernum, pbstrmarkername)
  end
  def get_duration(this : IWMPMedia3*, pduration : Float64*) : HRESULT
    @lpVtbl.value.get_duration.call(this, pduration)
  end
  def get_duration_string(this : IWMPMedia3*, pbstrduration : UInt8**) : HRESULT
    @lpVtbl.value.get_duration_string.call(this, pbstrduration)
  end
  def get_attribute_count(this : IWMPMedia3*, plcount : Int32*) : HRESULT
    @lpVtbl.value.get_attribute_count.call(this, plcount)
  end
  def get_attribute_name(this : IWMPMedia3*, lindex : Int32, pbstritemname : UInt8**) : HRESULT
    @lpVtbl.value.get_attribute_name.call(this, lindex, pbstritemname)
  end
  def get_item_info(this : IWMPMedia3*, bstritemname : UInt8*, pbstrval : UInt8**) : HRESULT
    @lpVtbl.value.get_item_info.call(this, bstritemname, pbstrval)
  end
  def set_item_info(this : IWMPMedia3*, bstritemname : UInt8*, bstrval : UInt8*) : HRESULT
    @lpVtbl.value.set_item_info.call(this, bstritemname, bstrval)
  end
  def get_item_info_by_atom(this : IWMPMedia3*, latom : Int32, pbstrval : UInt8**) : HRESULT
    @lpVtbl.value.get_item_info_by_atom.call(this, latom, pbstrval)
  end
  def is_member_of(this : IWMPMedia3*, pplaylist : IWMPPlaylist, pvarfismemberof : Int16*) : HRESULT
    @lpVtbl.value.is_member_of.call(this, pplaylist, pvarfismemberof)
  end
  def is_read_only_item(this : IWMPMedia3*, bstritemname : UInt8*, pvarfisreadonly : Int16*) : HRESULT
    @lpVtbl.value.is_read_only_item.call(this, bstritemname, pvarfisreadonly)
  end
  def get_error(this : IWMPMedia3*, ppiwmperroritem : IWMPErrorItem*) : HRESULT
    @lpVtbl.value.get_error.call(this, ppiwmperroritem)
  end
  def get_attribute_count_by_type(this : IWMPMedia3*, bstrtype : UInt8*, bstrlanguage : UInt8*, plcount : Int32*) : HRESULT
    @lpVtbl.value.get_attribute_count_by_type.call(this, bstrtype, bstrlanguage, plcount)
  end
  def get_item_info_by_type(this : IWMPMedia3*, bstrtype : UInt8*, bstrlanguage : UInt8*, lindex : Int32, pvarvalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_item_info_by_type.call(this, bstrtype, bstrlanguage, lindex, pvarvalue)
  end
end
struct LibWin32::IWMPSettings2
  def query_interface(this : IWMPSettings2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPSettings2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPSettings2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPSettings2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPSettings2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPSettings2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPSettings2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_is_available(this : IWMPSettings2*, bstritem : UInt8*, pisavailable : Int16*) : HRESULT
    @lpVtbl.value.get_is_available.call(this, bstritem, pisavailable)
  end
  def get_auto_start(this : IWMPSettings2*, pfautostart : Int16*) : HRESULT
    @lpVtbl.value.get_auto_start.call(this, pfautostart)
  end
  def put_auto_start(this : IWMPSettings2*, fautostart : Int16) : HRESULT
    @lpVtbl.value.put_auto_start.call(this, fautostart)
  end
  def get_base_url(this : IWMPSettings2*, pbstrbaseurl : UInt8**) : HRESULT
    @lpVtbl.value.get_base_url.call(this, pbstrbaseurl)
  end
  def put_base_url(this : IWMPSettings2*, bstrbaseurl : UInt8*) : HRESULT
    @lpVtbl.value.put_base_url.call(this, bstrbaseurl)
  end
  def get_default_frame(this : IWMPSettings2*, pbstrdefaultframe : UInt8**) : HRESULT
    @lpVtbl.value.get_default_frame.call(this, pbstrdefaultframe)
  end
  def put_default_frame(this : IWMPSettings2*, bstrdefaultframe : UInt8*) : HRESULT
    @lpVtbl.value.put_default_frame.call(this, bstrdefaultframe)
  end
  def get_invoke_ur_ls(this : IWMPSettings2*, pfinvokeurls : Int16*) : HRESULT
    @lpVtbl.value.get_invoke_ur_ls.call(this, pfinvokeurls)
  end
  def put_invoke_ur_ls(this : IWMPSettings2*, finvokeurls : Int16) : HRESULT
    @lpVtbl.value.put_invoke_ur_ls.call(this, finvokeurls)
  end
  def get_mute(this : IWMPSettings2*, pfmute : Int16*) : HRESULT
    @lpVtbl.value.get_mute.call(this, pfmute)
  end
  def put_mute(this : IWMPSettings2*, fmute : Int16) : HRESULT
    @lpVtbl.value.put_mute.call(this, fmute)
  end
  def get_play_count(this : IWMPSettings2*, plcount : Int32*) : HRESULT
    @lpVtbl.value.get_play_count.call(this, plcount)
  end
  def put_play_count(this : IWMPSettings2*, lcount : Int32) : HRESULT
    @lpVtbl.value.put_play_count.call(this, lcount)
  end
  def get_rate(this : IWMPSettings2*, pdrate : Float64*) : HRESULT
    @lpVtbl.value.get_rate.call(this, pdrate)
  end
  def put_rate(this : IWMPSettings2*, drate : Float64) : HRESULT
    @lpVtbl.value.put_rate.call(this, drate)
  end
  def get_balance(this : IWMPSettings2*, plbalance : Int32*) : HRESULT
    @lpVtbl.value.get_balance.call(this, plbalance)
  end
  def put_balance(this : IWMPSettings2*, lbalance : Int32) : HRESULT
    @lpVtbl.value.put_balance.call(this, lbalance)
  end
  def get_volume(this : IWMPSettings2*, plvolume : Int32*) : HRESULT
    @lpVtbl.value.get_volume.call(this, plvolume)
  end
  def put_volume(this : IWMPSettings2*, lvolume : Int32) : HRESULT
    @lpVtbl.value.put_volume.call(this, lvolume)
  end
  def get_mode(this : IWMPSettings2*, bstrmode : UInt8*, pvarfmode : Int16*) : HRESULT
    @lpVtbl.value.get_mode.call(this, bstrmode, pvarfmode)
  end
  def set_mode(this : IWMPSettings2*, bstrmode : UInt8*, varfmode : Int16) : HRESULT
    @lpVtbl.value.set_mode.call(this, bstrmode, varfmode)
  end
  def get_enable_error_dialogs(this : IWMPSettings2*, pfenableerrordialogs : Int16*) : HRESULT
    @lpVtbl.value.get_enable_error_dialogs.call(this, pfenableerrordialogs)
  end
  def put_enable_error_dialogs(this : IWMPSettings2*, fenableerrordialogs : Int16) : HRESULT
    @lpVtbl.value.put_enable_error_dialogs.call(this, fenableerrordialogs)
  end
  def get_default_audio_language(this : IWMPSettings2*, pllangid : Int32*) : HRESULT
    @lpVtbl.value.get_default_audio_language.call(this, pllangid)
  end
  def get_media_access_rights(this : IWMPSettings2*, pbstrrights : UInt8**) : HRESULT
    @lpVtbl.value.get_media_access_rights.call(this, pbstrrights)
  end
  def request_media_access_rights(this : IWMPSettings2*, bstrdesiredaccess : UInt8*, pvbaccepted : Int16*) : HRESULT
    @lpVtbl.value.request_media_access_rights.call(this, bstrdesiredaccess, pvbaccepted)
  end
end
struct LibWin32::IWMPControls3
  def query_interface(this : IWMPControls3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPControls3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPControls3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPControls3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPControls3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPControls3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPControls3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_is_available(this : IWMPControls3*, bstritem : UInt8*, pisavailable : Int16*) : HRESULT
    @lpVtbl.value.get_is_available.call(this, bstritem, pisavailable)
  end
  def play(this : IWMPControls3*) : HRESULT
    @lpVtbl.value.play.call(this)
  end
  def stop(this : IWMPControls3*) : HRESULT
    @lpVtbl.value.stop.call(this)
  end
  def pause(this : IWMPControls3*) : HRESULT
    @lpVtbl.value.pause.call(this)
  end
  def fast_forward(this : IWMPControls3*) : HRESULT
    @lpVtbl.value.fast_forward.call(this)
  end
  def fast_reverse(this : IWMPControls3*) : HRESULT
    @lpVtbl.value.fast_reverse.call(this)
  end
  def get_current_position(this : IWMPControls3*, pdcurrentposition : Float64*) : HRESULT
    @lpVtbl.value.get_current_position.call(this, pdcurrentposition)
  end
  def put_current_position(this : IWMPControls3*, dcurrentposition : Float64) : HRESULT
    @lpVtbl.value.put_current_position.call(this, dcurrentposition)
  end
  def get_current_position_string(this : IWMPControls3*, pbstrcurrentposition : UInt8**) : HRESULT
    @lpVtbl.value.get_current_position_string.call(this, pbstrcurrentposition)
  end
  def next(this : IWMPControls3*) : HRESULT
    @lpVtbl.value.next.call(this)
  end
  def previous(this : IWMPControls3*) : HRESULT
    @lpVtbl.value.previous.call(this)
  end
  def get_current_item(this : IWMPControls3*, ppiwmpmedia : IWMPMedia*) : HRESULT
    @lpVtbl.value.get_current_item.call(this, ppiwmpmedia)
  end
  def put_current_item(this : IWMPControls3*, piwmpmedia : IWMPMedia) : HRESULT
    @lpVtbl.value.put_current_item.call(this, piwmpmedia)
  end
  def get_current_marker(this : IWMPControls3*, plmarker : Int32*) : HRESULT
    @lpVtbl.value.get_current_marker.call(this, plmarker)
  end
  def put_current_marker(this : IWMPControls3*, lmarker : Int32) : HRESULT
    @lpVtbl.value.put_current_marker.call(this, lmarker)
  end
  def play_item(this : IWMPControls3*, piwmpmedia : IWMPMedia) : HRESULT
    @lpVtbl.value.play_item.call(this, piwmpmedia)
  end
  def step(this : IWMPControls3*, lstep : Int32) : HRESULT
    @lpVtbl.value.step.call(this, lstep)
  end
  def get_audio_language_count(this : IWMPControls3*, plcount : Int32*) : HRESULT
    @lpVtbl.value.get_audio_language_count.call(this, plcount)
  end
  def get_audio_language_id(this : IWMPControls3*, lindex : Int32, pllangid : Int32*) : HRESULT
    @lpVtbl.value.get_audio_language_id.call(this, lindex, pllangid)
  end
  def get_audio_language_description(this : IWMPControls3*, lindex : Int32, pbstrlangdesc : UInt8**) : HRESULT
    @lpVtbl.value.get_audio_language_description.call(this, lindex, pbstrlangdesc)
  end
  def get_current_audio_language(this : IWMPControls3*, pllangid : Int32*) : HRESULT
    @lpVtbl.value.get_current_audio_language.call(this, pllangid)
  end
  def put_current_audio_language(this : IWMPControls3*, llangid : Int32) : HRESULT
    @lpVtbl.value.put_current_audio_language.call(this, llangid)
  end
  def get_current_audio_language_index(this : IWMPControls3*, plindex : Int32*) : HRESULT
    @lpVtbl.value.get_current_audio_language_index.call(this, plindex)
  end
  def put_current_audio_language_index(this : IWMPControls3*, lindex : Int32) : HRESULT
    @lpVtbl.value.put_current_audio_language_index.call(this, lindex)
  end
  def get_language_name(this : IWMPControls3*, llangid : Int32, pbstrlangname : UInt8**) : HRESULT
    @lpVtbl.value.get_language_name.call(this, llangid, pbstrlangname)
  end
  def get_current_position_timecode(this : IWMPControls3*, bstrtimecode : UInt8**) : HRESULT
    @lpVtbl.value.get_current_position_timecode.call(this, bstrtimecode)
  end
  def put_current_position_timecode(this : IWMPControls3*, bstrtimecode : UInt8*) : HRESULT
    @lpVtbl.value.put_current_position_timecode.call(this, bstrtimecode)
  end
end
struct LibWin32::IWMPClosedCaption2
  def query_interface(this : IWMPClosedCaption2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPClosedCaption2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPClosedCaption2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPClosedCaption2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPClosedCaption2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPClosedCaption2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPClosedCaption2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_sami_style(this : IWMPClosedCaption2*, pbstrsamistyle : UInt8**) : HRESULT
    @lpVtbl.value.get_sami_style.call(this, pbstrsamistyle)
  end
  def put_sami_style(this : IWMPClosedCaption2*, bstrsamistyle : UInt8*) : HRESULT
    @lpVtbl.value.put_sami_style.call(this, bstrsamistyle)
  end
  def get_sami_lang(this : IWMPClosedCaption2*, pbstrsamilang : UInt8**) : HRESULT
    @lpVtbl.value.get_sami_lang.call(this, pbstrsamilang)
  end
  def put_sami_lang(this : IWMPClosedCaption2*, bstrsamilang : UInt8*) : HRESULT
    @lpVtbl.value.put_sami_lang.call(this, bstrsamilang)
  end
  def get_sami_file_name(this : IWMPClosedCaption2*, pbstrsamifilename : UInt8**) : HRESULT
    @lpVtbl.value.get_sami_file_name.call(this, pbstrsamifilename)
  end
  def put_sami_file_name(this : IWMPClosedCaption2*, bstrsamifilename : UInt8*) : HRESULT
    @lpVtbl.value.put_sami_file_name.call(this, bstrsamifilename)
  end
  def get_captioning_id(this : IWMPClosedCaption2*, pbstrcaptioningid : UInt8**) : HRESULT
    @lpVtbl.value.get_captioning_id.call(this, pbstrcaptioningid)
  end
  def put_captioning_id(this : IWMPClosedCaption2*, bstrcaptioningid : UInt8*) : HRESULT
    @lpVtbl.value.put_captioning_id.call(this, bstrcaptioningid)
  end
  def get_sami_lang_count(this : IWMPClosedCaption2*, plcount : Int32*) : HRESULT
    @lpVtbl.value.get_sami_lang_count.call(this, plcount)
  end
  def get_sami_lang_name(this : IWMPClosedCaption2*, nindex : Int32, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_sami_lang_name.call(this, nindex, pbstrname)
  end
  def get_sami_lang_id(this : IWMPClosedCaption2*, nindex : Int32, pllangid : Int32*) : HRESULT
    @lpVtbl.value.get_sami_lang_id.call(this, nindex, pllangid)
  end
  def get_sami_style_count(this : IWMPClosedCaption2*, plcount : Int32*) : HRESULT
    @lpVtbl.value.get_sami_style_count.call(this, plcount)
  end
  def get_sami_style_name(this : IWMPClosedCaption2*, nindex : Int32, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_sami_style_name.call(this, nindex, pbstrname)
  end
end
struct LibWin32::IWMPPlayerApplication
  def query_interface(this : IWMPPlayerApplication*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPPlayerApplication*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPPlayerApplication*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPPlayerApplication*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPPlayerApplication*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPPlayerApplication*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPPlayerApplication*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def switch_to_player_application(this : IWMPPlayerApplication*) : HRESULT
    @lpVtbl.value.switch_to_player_application.call(this)
  end
  def switch_to_control(this : IWMPPlayerApplication*) : HRESULT
    @lpVtbl.value.switch_to_control.call(this)
  end
  def get_player_docked(this : IWMPPlayerApplication*, pbplayerdocked : Int16*) : HRESULT
    @lpVtbl.value.get_player_docked.call(this, pbplayerdocked)
  end
  def get_has_display(this : IWMPPlayerApplication*, pbhasdisplay : Int16*) : HRESULT
    @lpVtbl.value.get_has_display.call(this, pbhasdisplay)
  end
end
struct LibWin32::IWMPCore3
  def query_interface(this : IWMPCore3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPCore3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPCore3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPCore3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPCore3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPCore3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPCore3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def close(this : IWMPCore3*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def get_url(this : IWMPCore3*, pbstrurl : UInt8**) : HRESULT
    @lpVtbl.value.get_url.call(this, pbstrurl)
  end
  def put_url(this : IWMPCore3*, bstrurl : UInt8*) : HRESULT
    @lpVtbl.value.put_url.call(this, bstrurl)
  end
  def get_open_state(this : IWMPCore3*, pwmpos : WMPOpenState*) : HRESULT
    @lpVtbl.value.get_open_state.call(this, pwmpos)
  end
  def get_play_state(this : IWMPCore3*, pwmpps : WMPPlayState*) : HRESULT
    @lpVtbl.value.get_play_state.call(this, pwmpps)
  end
  def get_controls(this : IWMPCore3*, ppcontrol : IWMPControls*) : HRESULT
    @lpVtbl.value.get_controls.call(this, ppcontrol)
  end
  def get_settings(this : IWMPCore3*, ppsettings : IWMPSettings*) : HRESULT
    @lpVtbl.value.get_settings.call(this, ppsettings)
  end
  def get_current_media(this : IWMPCore3*, ppmedia : IWMPMedia*) : HRESULT
    @lpVtbl.value.get_current_media.call(this, ppmedia)
  end
  def put_current_media(this : IWMPCore3*, pmedia : IWMPMedia) : HRESULT
    @lpVtbl.value.put_current_media.call(this, pmedia)
  end
  def get_media_collection(this : IWMPCore3*, ppmediacollection : IWMPMediaCollection*) : HRESULT
    @lpVtbl.value.get_media_collection.call(this, ppmediacollection)
  end
  def get_playlist_collection(this : IWMPCore3*, ppplaylistcollection : IWMPPlaylistCollection*) : HRESULT
    @lpVtbl.value.get_playlist_collection.call(this, ppplaylistcollection)
  end
  def get_version_info(this : IWMPCore3*, pbstrversioninfo : UInt8**) : HRESULT
    @lpVtbl.value.get_version_info.call(this, pbstrversioninfo)
  end
  def launch_url(this : IWMPCore3*, bstrurl : UInt8*) : HRESULT
    @lpVtbl.value.launch_url.call(this, bstrurl)
  end
  def get_network(this : IWMPCore3*, ppqni : IWMPNetwork*) : HRESULT
    @lpVtbl.value.get_network.call(this, ppqni)
  end
  def get_current_playlist(this : IWMPCore3*, pppl : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.get_current_playlist.call(this, pppl)
  end
  def put_current_playlist(this : IWMPCore3*, ppl : IWMPPlaylist) : HRESULT
    @lpVtbl.value.put_current_playlist.call(this, ppl)
  end
  def get_cdrom_collection(this : IWMPCore3*, ppcdromcollection : IWMPCdromCollection*) : HRESULT
    @lpVtbl.value.get_cdrom_collection.call(this, ppcdromcollection)
  end
  def get_closed_caption(this : IWMPCore3*, ppclosedcaption : IWMPClosedCaption*) : HRESULT
    @lpVtbl.value.get_closed_caption.call(this, ppclosedcaption)
  end
  def get_is_online(this : IWMPCore3*, pfonline : Int16*) : HRESULT
    @lpVtbl.value.get_is_online.call(this, pfonline)
  end
  def get_error(this : IWMPCore3*, pperror : IWMPError*) : HRESULT
    @lpVtbl.value.get_error.call(this, pperror)
  end
  def get_status(this : IWMPCore3*, pbstrstatus : UInt8**) : HRESULT
    @lpVtbl.value.get_status.call(this, pbstrstatus)
  end
  def get_dvd(this : IWMPCore3*, ppdvd : IWMPDVD*) : HRESULT
    @lpVtbl.value.get_dvd.call(this, ppdvd)
  end
  def new_playlist(this : IWMPCore3*, bstrname : UInt8*, bstrurl : UInt8*, ppplaylist : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.new_playlist.call(this, bstrname, bstrurl, ppplaylist)
  end
  def new_media(this : IWMPCore3*, bstrurl : UInt8*, ppmedia : IWMPMedia*) : HRESULT
    @lpVtbl.value.new_media.call(this, bstrurl, ppmedia)
  end
end
struct LibWin32::IWMPPlayer4
  def query_interface(this : IWMPPlayer4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPPlayer4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPPlayer4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPPlayer4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPPlayer4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPPlayer4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPPlayer4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def close(this : IWMPPlayer4*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def get_url(this : IWMPPlayer4*, pbstrurl : UInt8**) : HRESULT
    @lpVtbl.value.get_url.call(this, pbstrurl)
  end
  def put_url(this : IWMPPlayer4*, bstrurl : UInt8*) : HRESULT
    @lpVtbl.value.put_url.call(this, bstrurl)
  end
  def get_open_state(this : IWMPPlayer4*, pwmpos : WMPOpenState*) : HRESULT
    @lpVtbl.value.get_open_state.call(this, pwmpos)
  end
  def get_play_state(this : IWMPPlayer4*, pwmpps : WMPPlayState*) : HRESULT
    @lpVtbl.value.get_play_state.call(this, pwmpps)
  end
  def get_controls(this : IWMPPlayer4*, ppcontrol : IWMPControls*) : HRESULT
    @lpVtbl.value.get_controls.call(this, ppcontrol)
  end
  def get_settings(this : IWMPPlayer4*, ppsettings : IWMPSettings*) : HRESULT
    @lpVtbl.value.get_settings.call(this, ppsettings)
  end
  def get_current_media(this : IWMPPlayer4*, ppmedia : IWMPMedia*) : HRESULT
    @lpVtbl.value.get_current_media.call(this, ppmedia)
  end
  def put_current_media(this : IWMPPlayer4*, pmedia : IWMPMedia) : HRESULT
    @lpVtbl.value.put_current_media.call(this, pmedia)
  end
  def get_media_collection(this : IWMPPlayer4*, ppmediacollection : IWMPMediaCollection*) : HRESULT
    @lpVtbl.value.get_media_collection.call(this, ppmediacollection)
  end
  def get_playlist_collection(this : IWMPPlayer4*, ppplaylistcollection : IWMPPlaylistCollection*) : HRESULT
    @lpVtbl.value.get_playlist_collection.call(this, ppplaylistcollection)
  end
  def get_version_info(this : IWMPPlayer4*, pbstrversioninfo : UInt8**) : HRESULT
    @lpVtbl.value.get_version_info.call(this, pbstrversioninfo)
  end
  def launch_url(this : IWMPPlayer4*, bstrurl : UInt8*) : HRESULT
    @lpVtbl.value.launch_url.call(this, bstrurl)
  end
  def get_network(this : IWMPPlayer4*, ppqni : IWMPNetwork*) : HRESULT
    @lpVtbl.value.get_network.call(this, ppqni)
  end
  def get_current_playlist(this : IWMPPlayer4*, pppl : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.get_current_playlist.call(this, pppl)
  end
  def put_current_playlist(this : IWMPPlayer4*, ppl : IWMPPlaylist) : HRESULT
    @lpVtbl.value.put_current_playlist.call(this, ppl)
  end
  def get_cdrom_collection(this : IWMPPlayer4*, ppcdromcollection : IWMPCdromCollection*) : HRESULT
    @lpVtbl.value.get_cdrom_collection.call(this, ppcdromcollection)
  end
  def get_closed_caption(this : IWMPPlayer4*, ppclosedcaption : IWMPClosedCaption*) : HRESULT
    @lpVtbl.value.get_closed_caption.call(this, ppclosedcaption)
  end
  def get_is_online(this : IWMPPlayer4*, pfonline : Int16*) : HRESULT
    @lpVtbl.value.get_is_online.call(this, pfonline)
  end
  def get_error(this : IWMPPlayer4*, pperror : IWMPError*) : HRESULT
    @lpVtbl.value.get_error.call(this, pperror)
  end
  def get_status(this : IWMPPlayer4*, pbstrstatus : UInt8**) : HRESULT
    @lpVtbl.value.get_status.call(this, pbstrstatus)
  end
  def get_dvd(this : IWMPPlayer4*, ppdvd : IWMPDVD*) : HRESULT
    @lpVtbl.value.get_dvd.call(this, ppdvd)
  end
  def new_playlist(this : IWMPPlayer4*, bstrname : UInt8*, bstrurl : UInt8*, ppplaylist : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.new_playlist.call(this, bstrname, bstrurl, ppplaylist)
  end
  def new_media(this : IWMPPlayer4*, bstrurl : UInt8*, ppmedia : IWMPMedia*) : HRESULT
    @lpVtbl.value.new_media.call(this, bstrurl, ppmedia)
  end
  def get_enabled(this : IWMPPlayer4*, pbenabled : Int16*) : HRESULT
    @lpVtbl.value.get_enabled.call(this, pbenabled)
  end
  def put_enabled(this : IWMPPlayer4*, benabled : Int16) : HRESULT
    @lpVtbl.value.put_enabled.call(this, benabled)
  end
  def get_full_screen(this : IWMPPlayer4*, pbfullscreen : Int16*) : HRESULT
    @lpVtbl.value.get_full_screen.call(this, pbfullscreen)
  end
  def put_full_screen(this : IWMPPlayer4*, bfullscreen : Int16) : HRESULT
    @lpVtbl.value.put_full_screen.call(this, bfullscreen)
  end
  def get_enable_context_menu(this : IWMPPlayer4*, pbenablecontextmenu : Int16*) : HRESULT
    @lpVtbl.value.get_enable_context_menu.call(this, pbenablecontextmenu)
  end
  def put_enable_context_menu(this : IWMPPlayer4*, benablecontextmenu : Int16) : HRESULT
    @lpVtbl.value.put_enable_context_menu.call(this, benablecontextmenu)
  end
  def put_ui_mode(this : IWMPPlayer4*, bstrmode : UInt8*) : HRESULT
    @lpVtbl.value.put_ui_mode.call(this, bstrmode)
  end
  def get_ui_mode(this : IWMPPlayer4*, pbstrmode : UInt8**) : HRESULT
    @lpVtbl.value.get_ui_mode.call(this, pbstrmode)
  end
  def get_stretch_to_fit(this : IWMPPlayer4*, pbenabled : Int16*) : HRESULT
    @lpVtbl.value.get_stretch_to_fit.call(this, pbenabled)
  end
  def put_stretch_to_fit(this : IWMPPlayer4*, benabled : Int16) : HRESULT
    @lpVtbl.value.put_stretch_to_fit.call(this, benabled)
  end
  def get_windowless_video(this : IWMPPlayer4*, pbenabled : Int16*) : HRESULT
    @lpVtbl.value.get_windowless_video.call(this, pbenabled)
  end
  def put_windowless_video(this : IWMPPlayer4*, benabled : Int16) : HRESULT
    @lpVtbl.value.put_windowless_video.call(this, benabled)
  end
  def get_is_remote(this : IWMPPlayer4*, pvarfisremote : Int16*) : HRESULT
    @lpVtbl.value.get_is_remote.call(this, pvarfisremote)
  end
  def get_player_application(this : IWMPPlayer4*, ppiwmpplayerapplication : IWMPPlayerApplication*) : HRESULT
    @lpVtbl.value.get_player_application.call(this, ppiwmpplayerapplication)
  end
  def open_player(this : IWMPPlayer4*, bstrurl : UInt8*) : HRESULT
    @lpVtbl.value.open_player.call(this, bstrurl)
  end
end
struct LibWin32::IWMPPlayerServices
  def query_interface(this : IWMPPlayerServices*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPPlayerServices*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPPlayerServices*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def activate_ui_plugin(this : IWMPPlayerServices*, bstrplugin : UInt8*) : HRESULT
    @lpVtbl.value.activate_ui_plugin.call(this, bstrplugin)
  end
  def set_task_pane(this : IWMPPlayerServices*, bstrtaskpane : UInt8*) : HRESULT
    @lpVtbl.value.set_task_pane.call(this, bstrtaskpane)
  end
  def set_task_pane_url(this : IWMPPlayerServices*, bstrtaskpane : UInt8*, bstrurl : UInt8*, bstrfriendlyname : UInt8*) : HRESULT
    @lpVtbl.value.set_task_pane_url.call(this, bstrtaskpane, bstrurl, bstrfriendlyname)
  end
end
struct LibWin32::IWMPSyncDevice
  def query_interface(this : IWMPSyncDevice*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPSyncDevice*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPSyncDevice*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_friendly_name(this : IWMPSyncDevice*, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_friendly_name.call(this, pbstrname)
  end
  def put_friendly_name(this : IWMPSyncDevice*, bstrname : UInt8*) : HRESULT
    @lpVtbl.value.put_friendly_name.call(this, bstrname)
  end
  def get_device_name(this : IWMPSyncDevice*, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_device_name.call(this, pbstrname)
  end
  def get_device_id(this : IWMPSyncDevice*, pbstrdeviceid : UInt8**) : HRESULT
    @lpVtbl.value.get_device_id.call(this, pbstrdeviceid)
  end
  def get_partnership_index(this : IWMPSyncDevice*, plindex : Int32*) : HRESULT
    @lpVtbl.value.get_partnership_index.call(this, plindex)
  end
  def get_connected(this : IWMPSyncDevice*, pvbconnected : Int16*) : HRESULT
    @lpVtbl.value.get_connected.call(this, pvbconnected)
  end
  def get_status(this : IWMPSyncDevice*, pwmpds : WMPDeviceStatus*) : HRESULT
    @lpVtbl.value.get_status.call(this, pwmpds)
  end
  def get_sync_state(this : IWMPSyncDevice*, pwmpss : WMPSyncState*) : HRESULT
    @lpVtbl.value.get_sync_state.call(this, pwmpss)
  end
  def get_progress(this : IWMPSyncDevice*, plprogress : Int32*) : HRESULT
    @lpVtbl.value.get_progress.call(this, plprogress)
  end
  def get_item_info(this : IWMPSyncDevice*, bstritemname : UInt8*, pbstrval : UInt8**) : HRESULT
    @lpVtbl.value.get_item_info.call(this, bstritemname, pbstrval)
  end
  def create_partnership(this : IWMPSyncDevice*, vbshowui : Int16) : HRESULT
    @lpVtbl.value.create_partnership.call(this, vbshowui)
  end
  def delete_partnership(this : IWMPSyncDevice*) : HRESULT
    @lpVtbl.value.delete_partnership.call(this)
  end
  def start(this : IWMPSyncDevice*) : HRESULT
    @lpVtbl.value.start.call(this)
  end
  def stop(this : IWMPSyncDevice*) : HRESULT
    @lpVtbl.value.stop.call(this)
  end
  def show_settings(this : IWMPSyncDevice*) : HRESULT
    @lpVtbl.value.show_settings.call(this)
  end
  def is_identical(this : IWMPSyncDevice*, pdevice : IWMPSyncDevice, pvbool : Int16*) : HRESULT
    @lpVtbl.value.is_identical.call(this, pdevice, pvbool)
  end
end
struct LibWin32::IWMPSyncServices
  def query_interface(this : IWMPSyncServices*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPSyncServices*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPSyncServices*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device_count(this : IWMPSyncServices*, plcount : Int32*) : HRESULT
    @lpVtbl.value.get_device_count.call(this, plcount)
  end
  def get_device(this : IWMPSyncServices*, lindex : Int32, ppdevice : IWMPSyncDevice*) : HRESULT
    @lpVtbl.value.get_device.call(this, lindex, ppdevice)
  end
end
struct LibWin32::IWMPPlayerServices2
  def query_interface(this : IWMPPlayerServices2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPPlayerServices2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPPlayerServices2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def activate_ui_plugin(this : IWMPPlayerServices2*, bstrplugin : UInt8*) : HRESULT
    @lpVtbl.value.activate_ui_plugin.call(this, bstrplugin)
  end
  def set_task_pane(this : IWMPPlayerServices2*, bstrtaskpane : UInt8*) : HRESULT
    @lpVtbl.value.set_task_pane.call(this, bstrtaskpane)
  end
  def set_task_pane_url(this : IWMPPlayerServices2*, bstrtaskpane : UInt8*, bstrurl : UInt8*, bstrfriendlyname : UInt8*) : HRESULT
    @lpVtbl.value.set_task_pane_url.call(this, bstrtaskpane, bstrurl, bstrfriendlyname)
  end
  def set_background_processing_priority(this : IWMPPlayerServices2*, bstrpriority : UInt8*) : HRESULT
    @lpVtbl.value.set_background_processing_priority.call(this, bstrpriority)
  end
end
struct LibWin32::IWMPCdromRip
  def query_interface(this : IWMPCdromRip*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPCdromRip*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPCdromRip*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_rip_state(this : IWMPCdromRip*, pwmprs : WMPRipState*) : HRESULT
    @lpVtbl.value.get_rip_state.call(this, pwmprs)
  end
  def get_rip_progress(this : IWMPCdromRip*, plprogress : Int32*) : HRESULT
    @lpVtbl.value.get_rip_progress.call(this, plprogress)
  end
  def start_rip(this : IWMPCdromRip*) : HRESULT
    @lpVtbl.value.start_rip.call(this)
  end
  def stop_rip(this : IWMPCdromRip*) : HRESULT
    @lpVtbl.value.stop_rip.call(this)
  end
end
struct LibWin32::IWMPCdromBurn
  def query_interface(this : IWMPCdromBurn*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPCdromBurn*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPCdromBurn*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def is_available(this : IWMPCdromBurn*, bstritem : UInt8*, pisavailable : Int16*) : HRESULT
    @lpVtbl.value.is_available.call(this, bstritem, pisavailable)
  end
  def get_item_info(this : IWMPCdromBurn*, bstritem : UInt8*, pbstrval : UInt8**) : HRESULT
    @lpVtbl.value.get_item_info.call(this, bstritem, pbstrval)
  end
  def get_label(this : IWMPCdromBurn*, pbstrlabel : UInt8**) : HRESULT
    @lpVtbl.value.get_label.call(this, pbstrlabel)
  end
  def put_label(this : IWMPCdromBurn*, bstrlabel : UInt8*) : HRESULT
    @lpVtbl.value.put_label.call(this, bstrlabel)
  end
  def get_burn_format(this : IWMPCdromBurn*, pwmpbf : WMPBurnFormat*) : HRESULT
    @lpVtbl.value.get_burn_format.call(this, pwmpbf)
  end
  def put_burn_format(this : IWMPCdromBurn*, wmpbf : WMPBurnFormat) : HRESULT
    @lpVtbl.value.put_burn_format.call(this, wmpbf)
  end
  def get_burn_playlist(this : IWMPCdromBurn*, ppplaylist : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.get_burn_playlist.call(this, ppplaylist)
  end
  def put_burn_playlist(this : IWMPCdromBurn*, pplaylist : IWMPPlaylist) : HRESULT
    @lpVtbl.value.put_burn_playlist.call(this, pplaylist)
  end
  def refresh_status(this : IWMPCdromBurn*) : HRESULT
    @lpVtbl.value.refresh_status.call(this)
  end
  def get_burn_state(this : IWMPCdromBurn*, pwmpbs : WMPBurnState*) : HRESULT
    @lpVtbl.value.get_burn_state.call(this, pwmpbs)
  end
  def get_burn_progress(this : IWMPCdromBurn*, plprogress : Int32*) : HRESULT
    @lpVtbl.value.get_burn_progress.call(this, plprogress)
  end
  def start_burn(this : IWMPCdromBurn*) : HRESULT
    @lpVtbl.value.start_burn.call(this)
  end
  def stop_burn(this : IWMPCdromBurn*) : HRESULT
    @lpVtbl.value.stop_burn.call(this)
  end
  def erase(this : IWMPCdromBurn*) : HRESULT
    @lpVtbl.value.erase.call(this)
  end
end
struct LibWin32::IWMPQuery
  def query_interface(this : IWMPQuery*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPQuery*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPQuery*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPQuery*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPQuery*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPQuery*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPQuery*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def add_condition(this : IWMPQuery*, bstrattribute : UInt8*, bstroperator : UInt8*, bstrvalue : UInt8*) : HRESULT
    @lpVtbl.value.add_condition.call(this, bstrattribute, bstroperator, bstrvalue)
  end
  def begin_next_group(this : IWMPQuery*) : HRESULT
    @lpVtbl.value.begin_next_group.call(this)
  end
end
struct LibWin32::IWMPMediaCollection2
  def query_interface(this : IWMPMediaCollection2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPMediaCollection2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPMediaCollection2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPMediaCollection2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPMediaCollection2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPMediaCollection2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPMediaCollection2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def add(this : IWMPMediaCollection2*, bstrurl : UInt8*, ppitem : IWMPMedia*) : HRESULT
    @lpVtbl.value.add.call(this, bstrurl, ppitem)
  end
  def get_all(this : IWMPMediaCollection2*, ppmediaitems : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.get_all.call(this, ppmediaitems)
  end
  def get_by_name(this : IWMPMediaCollection2*, bstrname : UInt8*, ppmediaitems : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.get_by_name.call(this, bstrname, ppmediaitems)
  end
  def get_by_genre(this : IWMPMediaCollection2*, bstrgenre : UInt8*, ppmediaitems : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.get_by_genre.call(this, bstrgenre, ppmediaitems)
  end
  def get_by_author(this : IWMPMediaCollection2*, bstrauthor : UInt8*, ppmediaitems : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.get_by_author.call(this, bstrauthor, ppmediaitems)
  end
  def get_by_album(this : IWMPMediaCollection2*, bstralbum : UInt8*, ppmediaitems : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.get_by_album.call(this, bstralbum, ppmediaitems)
  end
  def get_by_attribute(this : IWMPMediaCollection2*, bstrattribute : UInt8*, bstrvalue : UInt8*, ppmediaitems : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.get_by_attribute.call(this, bstrattribute, bstrvalue, ppmediaitems)
  end
  def remove(this : IWMPMediaCollection2*, pitem : IWMPMedia, varfdeletefile : Int16) : HRESULT
    @lpVtbl.value.remove.call(this, pitem, varfdeletefile)
  end
  def get_attribute_string_collection(this : IWMPMediaCollection2*, bstrattribute : UInt8*, bstrmediatype : UInt8*, ppstringcollection : IWMPStringCollection*) : HRESULT
    @lpVtbl.value.get_attribute_string_collection.call(this, bstrattribute, bstrmediatype, ppstringcollection)
  end
  def get_media_atom(this : IWMPMediaCollection2*, bstritemname : UInt8*, platom : Int32*) : HRESULT
    @lpVtbl.value.get_media_atom.call(this, bstritemname, platom)
  end
  def set_deleted(this : IWMPMediaCollection2*, pitem : IWMPMedia, varfisdeleted : Int16) : HRESULT
    @lpVtbl.value.set_deleted.call(this, pitem, varfisdeleted)
  end
  def is_deleted(this : IWMPMediaCollection2*, pitem : IWMPMedia, pvarfisdeleted : Int16*) : HRESULT
    @lpVtbl.value.is_deleted.call(this, pitem, pvarfisdeleted)
  end
  def create_query(this : IWMPMediaCollection2*, ppquery : IWMPQuery*) : HRESULT
    @lpVtbl.value.create_query.call(this, ppquery)
  end
  def get_playlist_by_query(this : IWMPMediaCollection2*, pquery : IWMPQuery, bstrmediatype : UInt8*, bstrsortattribute : UInt8*, fsortascending : Int16, ppplaylist : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.get_playlist_by_query.call(this, pquery, bstrmediatype, bstrsortattribute, fsortascending, ppplaylist)
  end
  def get_string_collection_by_query(this : IWMPMediaCollection2*, bstrattribute : UInt8*, pquery : IWMPQuery, bstrmediatype : UInt8*, bstrsortattribute : UInt8*, fsortascending : Int16, ppstringcollection : IWMPStringCollection*) : HRESULT
    @lpVtbl.value.get_string_collection_by_query.call(this, bstrattribute, pquery, bstrmediatype, bstrsortattribute, fsortascending, ppstringcollection)
  end
  def get_by_attribute_and_media_type(this : IWMPMediaCollection2*, bstrattribute : UInt8*, bstrvalue : UInt8*, bstrmediatype : UInt8*, ppmediaitems : IWMPPlaylist*) : HRESULT
    @lpVtbl.value.get_by_attribute_and_media_type.call(this, bstrattribute, bstrvalue, bstrmediatype, ppmediaitems)
  end
end
struct LibWin32::IWMPStringCollection2
  def query_interface(this : IWMPStringCollection2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPStringCollection2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPStringCollection2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPStringCollection2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPStringCollection2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPStringCollection2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPStringCollection2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_count(this : IWMPStringCollection2*, plcount : Int32*) : HRESULT
    @lpVtbl.value.get_count.call(this, plcount)
  end
  def item(this : IWMPStringCollection2*, lindex : Int32, pbstrstring : UInt8**) : HRESULT
    @lpVtbl.value.item.call(this, lindex, pbstrstring)
  end
  def is_identical(this : IWMPStringCollection2*, piwmpstringcollection2 : IWMPStringCollection2, pvbool : Int16*) : HRESULT
    @lpVtbl.value.is_identical.call(this, piwmpstringcollection2, pvbool)
  end
  def get_item_info(this : IWMPStringCollection2*, lcollectionindex : Int32, bstritemname : UInt8*, pbstrvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_item_info.call(this, lcollectionindex, bstritemname, pbstrvalue)
  end
  def get_attribute_count_by_type(this : IWMPStringCollection2*, lcollectionindex : Int32, bstrtype : UInt8*, bstrlanguage : UInt8*, plcount : Int32*) : HRESULT
    @lpVtbl.value.get_attribute_count_by_type.call(this, lcollectionindex, bstrtype, bstrlanguage, plcount)
  end
  def get_item_info_by_type(this : IWMPStringCollection2*, lcollectionindex : Int32, bstrtype : UInt8*, bstrlanguage : UInt8*, lattributeindex : Int32, pvarvalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_item_info_by_type.call(this, lcollectionindex, bstrtype, bstrlanguage, lattributeindex, pvarvalue)
  end
end
struct LibWin32::IWMPLibrary
  def query_interface(this : IWMPLibrary*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPLibrary*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPLibrary*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_name(this : IWMPLibrary*, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, pbstrname)
  end
  def get_type(this : IWMPLibrary*, pwmplt : WMPLibraryType*) : HRESULT
    @lpVtbl.value.get_type.call(this, pwmplt)
  end
  def get_media_collection(this : IWMPLibrary*, ppiwmpmediacollection : IWMPMediaCollection*) : HRESULT
    @lpVtbl.value.get_media_collection.call(this, ppiwmpmediacollection)
  end
  def is_identical(this : IWMPLibrary*, piwmplibrary : IWMPLibrary, pvbool : Int16*) : HRESULT
    @lpVtbl.value.is_identical.call(this, piwmplibrary, pvbool)
  end
end
struct LibWin32::IWMPLibraryServices
  def query_interface(this : IWMPLibraryServices*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPLibraryServices*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPLibraryServices*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_count_by_type(this : IWMPLibraryServices*, wmplt : WMPLibraryType, plcount : Int32*) : HRESULT
    @lpVtbl.value.get_count_by_type.call(this, wmplt, plcount)
  end
  def get_library_by_type(this : IWMPLibraryServices*, wmplt : WMPLibraryType, lindex : Int32, ppiwmplibrary : IWMPLibrary*) : HRESULT
    @lpVtbl.value.get_library_by_type.call(this, wmplt, lindex, ppiwmplibrary)
  end
end
struct LibWin32::IWMPLibrarySharingServices
  def query_interface(this : IWMPLibrarySharingServices*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPLibrarySharingServices*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPLibrarySharingServices*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def is_library_shared(this : IWMPLibrarySharingServices*, pvbshared : Int16*) : HRESULT
    @lpVtbl.value.is_library_shared.call(this, pvbshared)
  end
  def is_library_sharing_enabled(this : IWMPLibrarySharingServices*, pvbenabled : Int16*) : HRESULT
    @lpVtbl.value.is_library_sharing_enabled.call(this, pvbenabled)
  end
  def show_library_sharing(this : IWMPLibrarySharingServices*) : HRESULT
    @lpVtbl.value.show_library_sharing.call(this)
  end
end
struct LibWin32::IWMPFolderMonitorServices
  def query_interface(this : IWMPFolderMonitorServices*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPFolderMonitorServices*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPFolderMonitorServices*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_count(this : IWMPFolderMonitorServices*, plcount : Int32*) : HRESULT
    @lpVtbl.value.get_count.call(this, plcount)
  end
  def item(this : IWMPFolderMonitorServices*, lindex : Int32, pbstrfolder : UInt8**) : HRESULT
    @lpVtbl.value.item.call(this, lindex, pbstrfolder)
  end
  def add(this : IWMPFolderMonitorServices*, bstrfolder : UInt8*) : HRESULT
    @lpVtbl.value.add.call(this, bstrfolder)
  end
  def remove(this : IWMPFolderMonitorServices*, lindex : Int32) : HRESULT
    @lpVtbl.value.remove.call(this, lindex)
  end
  def get_scan_state(this : IWMPFolderMonitorServices*, pwmpfss : WMPFolderScanState*) : HRESULT
    @lpVtbl.value.get_scan_state.call(this, pwmpfss)
  end
  def get_current_folder(this : IWMPFolderMonitorServices*, pbstrfolder : UInt8**) : HRESULT
    @lpVtbl.value.get_current_folder.call(this, pbstrfolder)
  end
  def get_scanned_files_count(this : IWMPFolderMonitorServices*, plcount : Int32*) : HRESULT
    @lpVtbl.value.get_scanned_files_count.call(this, plcount)
  end
  def get_added_files_count(this : IWMPFolderMonitorServices*, plcount : Int32*) : HRESULT
    @lpVtbl.value.get_added_files_count.call(this, plcount)
  end
  def get_update_progress(this : IWMPFolderMonitorServices*, plprogress : Int32*) : HRESULT
    @lpVtbl.value.get_update_progress.call(this, plprogress)
  end
  def start_scan(this : IWMPFolderMonitorServices*) : HRESULT
    @lpVtbl.value.start_scan.call(this)
  end
  def stop_scan(this : IWMPFolderMonitorServices*) : HRESULT
    @lpVtbl.value.stop_scan.call(this)
  end
end
struct LibWin32::IWMPSyncDevice2
  def query_interface(this : IWMPSyncDevice2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPSyncDevice2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPSyncDevice2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_friendly_name(this : IWMPSyncDevice2*, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_friendly_name.call(this, pbstrname)
  end
  def put_friendly_name(this : IWMPSyncDevice2*, bstrname : UInt8*) : HRESULT
    @lpVtbl.value.put_friendly_name.call(this, bstrname)
  end
  def get_device_name(this : IWMPSyncDevice2*, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_device_name.call(this, pbstrname)
  end
  def get_device_id(this : IWMPSyncDevice2*, pbstrdeviceid : UInt8**) : HRESULT
    @lpVtbl.value.get_device_id.call(this, pbstrdeviceid)
  end
  def get_partnership_index(this : IWMPSyncDevice2*, plindex : Int32*) : HRESULT
    @lpVtbl.value.get_partnership_index.call(this, plindex)
  end
  def get_connected(this : IWMPSyncDevice2*, pvbconnected : Int16*) : HRESULT
    @lpVtbl.value.get_connected.call(this, pvbconnected)
  end
  def get_status(this : IWMPSyncDevice2*, pwmpds : WMPDeviceStatus*) : HRESULT
    @lpVtbl.value.get_status.call(this, pwmpds)
  end
  def get_sync_state(this : IWMPSyncDevice2*, pwmpss : WMPSyncState*) : HRESULT
    @lpVtbl.value.get_sync_state.call(this, pwmpss)
  end
  def get_progress(this : IWMPSyncDevice2*, plprogress : Int32*) : HRESULT
    @lpVtbl.value.get_progress.call(this, plprogress)
  end
  def get_item_info(this : IWMPSyncDevice2*, bstritemname : UInt8*, pbstrval : UInt8**) : HRESULT
    @lpVtbl.value.get_item_info.call(this, bstritemname, pbstrval)
  end
  def create_partnership(this : IWMPSyncDevice2*, vbshowui : Int16) : HRESULT
    @lpVtbl.value.create_partnership.call(this, vbshowui)
  end
  def delete_partnership(this : IWMPSyncDevice2*) : HRESULT
    @lpVtbl.value.delete_partnership.call(this)
  end
  def start(this : IWMPSyncDevice2*) : HRESULT
    @lpVtbl.value.start.call(this)
  end
  def stop(this : IWMPSyncDevice2*) : HRESULT
    @lpVtbl.value.stop.call(this)
  end
  def show_settings(this : IWMPSyncDevice2*) : HRESULT
    @lpVtbl.value.show_settings.call(this)
  end
  def is_identical(this : IWMPSyncDevice2*, pdevice : IWMPSyncDevice, pvbool : Int16*) : HRESULT
    @lpVtbl.value.is_identical.call(this, pdevice, pvbool)
  end
  def set_item_info(this : IWMPSyncDevice2*, bstritemname : UInt8*, bstrval : UInt8*) : HRESULT
    @lpVtbl.value.set_item_info.call(this, bstritemname, bstrval)
  end
end
struct LibWin32::IWMPSyncDevice3
  def query_interface(this : IWMPSyncDevice3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPSyncDevice3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPSyncDevice3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_friendly_name(this : IWMPSyncDevice3*, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_friendly_name.call(this, pbstrname)
  end
  def put_friendly_name(this : IWMPSyncDevice3*, bstrname : UInt8*) : HRESULT
    @lpVtbl.value.put_friendly_name.call(this, bstrname)
  end
  def get_device_name(this : IWMPSyncDevice3*, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_device_name.call(this, pbstrname)
  end
  def get_device_id(this : IWMPSyncDevice3*, pbstrdeviceid : UInt8**) : HRESULT
    @lpVtbl.value.get_device_id.call(this, pbstrdeviceid)
  end
  def get_partnership_index(this : IWMPSyncDevice3*, plindex : Int32*) : HRESULT
    @lpVtbl.value.get_partnership_index.call(this, plindex)
  end
  def get_connected(this : IWMPSyncDevice3*, pvbconnected : Int16*) : HRESULT
    @lpVtbl.value.get_connected.call(this, pvbconnected)
  end
  def get_status(this : IWMPSyncDevice3*, pwmpds : WMPDeviceStatus*) : HRESULT
    @lpVtbl.value.get_status.call(this, pwmpds)
  end
  def get_sync_state(this : IWMPSyncDevice3*, pwmpss : WMPSyncState*) : HRESULT
    @lpVtbl.value.get_sync_state.call(this, pwmpss)
  end
  def get_progress(this : IWMPSyncDevice3*, plprogress : Int32*) : HRESULT
    @lpVtbl.value.get_progress.call(this, plprogress)
  end
  def get_item_info(this : IWMPSyncDevice3*, bstritemname : UInt8*, pbstrval : UInt8**) : HRESULT
    @lpVtbl.value.get_item_info.call(this, bstritemname, pbstrval)
  end
  def create_partnership(this : IWMPSyncDevice3*, vbshowui : Int16) : HRESULT
    @lpVtbl.value.create_partnership.call(this, vbshowui)
  end
  def delete_partnership(this : IWMPSyncDevice3*) : HRESULT
    @lpVtbl.value.delete_partnership.call(this)
  end
  def start(this : IWMPSyncDevice3*) : HRESULT
    @lpVtbl.value.start.call(this)
  end
  def stop(this : IWMPSyncDevice3*) : HRESULT
    @lpVtbl.value.stop.call(this)
  end
  def show_settings(this : IWMPSyncDevice3*) : HRESULT
    @lpVtbl.value.show_settings.call(this)
  end
  def is_identical(this : IWMPSyncDevice3*, pdevice : IWMPSyncDevice, pvbool : Int16*) : HRESULT
    @lpVtbl.value.is_identical.call(this, pdevice, pvbool)
  end
  def set_item_info(this : IWMPSyncDevice3*, bstritemname : UInt8*, bstrval : UInt8*) : HRESULT
    @lpVtbl.value.set_item_info.call(this, bstritemname, bstrval)
  end
  def estimate_sync_size(this : IWMPSyncDevice3*, pnonruleplaylist : IWMPPlaylist, prulesplaylist : IWMPPlaylist) : HRESULT
    @lpVtbl.value.estimate_sync_size.call(this, pnonruleplaylist, prulesplaylist)
  end
  def cancel_estimation(this : IWMPSyncDevice3*) : HRESULT
    @lpVtbl.value.cancel_estimation.call(this)
  end
end
struct LibWin32::IWMPLibrary2
  def query_interface(this : IWMPLibrary2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPLibrary2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPLibrary2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_name(this : IWMPLibrary2*, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, pbstrname)
  end
  def get_type(this : IWMPLibrary2*, pwmplt : WMPLibraryType*) : HRESULT
    @lpVtbl.value.get_type.call(this, pwmplt)
  end
  def get_media_collection(this : IWMPLibrary2*, ppiwmpmediacollection : IWMPMediaCollection*) : HRESULT
    @lpVtbl.value.get_media_collection.call(this, ppiwmpmediacollection)
  end
  def is_identical(this : IWMPLibrary2*, piwmplibrary : IWMPLibrary, pvbool : Int16*) : HRESULT
    @lpVtbl.value.is_identical.call(this, piwmplibrary, pvbool)
  end
  def get_item_info(this : IWMPLibrary2*, bstritemname : UInt8*, pbstrval : UInt8**) : HRESULT
    @lpVtbl.value.get_item_info.call(this, bstritemname, pbstrval)
  end
end
struct LibWin32::IWMPEvents
  def query_interface(this : IWMPEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def open_state_change(this : IWMPEvents*, newstate : Int32) : Void
    @lpVtbl.value.open_state_change.call(this, newstate)
  end
  def play_state_change(this : IWMPEvents*, newstate : Int32) : Void
    @lpVtbl.value.play_state_change.call(this, newstate)
  end
  def audio_language_change(this : IWMPEvents*, langid : Int32) : Void
    @lpVtbl.value.audio_language_change.call(this, langid)
  end
  def status_change(this : IWMPEvents*) : Void
    @lpVtbl.value.status_change.call(this)
  end
  def script_command(this : IWMPEvents*, sctype : UInt8*, param : UInt8*) : Void
    @lpVtbl.value.script_command.call(this, sctype, param)
  end
  def new_stream(this : IWMPEvents*) : Void
    @lpVtbl.value.new_stream.call(this)
  end
  def disconnect(this : IWMPEvents*, result : Int32) : Void
    @lpVtbl.value.disconnect.call(this, result)
  end
  def buffering(this : IWMPEvents*, start : Int16) : Void
    @lpVtbl.value.buffering.call(this, start)
  end
  def error(this : IWMPEvents*) : Void
    @lpVtbl.value.error.call(this)
  end
  def warning(this : IWMPEvents*, warningtype : Int32, param : Int32, description : UInt8*) : Void
    @lpVtbl.value.warning.call(this, warningtype, param, description)
  end
  def end_of_stream(this : IWMPEvents*, result : Int32) : Void
    @lpVtbl.value.end_of_stream.call(this, result)
  end
  def position_change(this : IWMPEvents*, oldposition : Float64, newposition : Float64) : Void
    @lpVtbl.value.position_change.call(this, oldposition, newposition)
  end
  def marker_hit(this : IWMPEvents*, markernum : Int32) : Void
    @lpVtbl.value.marker_hit.call(this, markernum)
  end
  def duration_unit_change(this : IWMPEvents*, newdurationunit : Int32) : Void
    @lpVtbl.value.duration_unit_change.call(this, newdurationunit)
  end
  def cdrom_media_change(this : IWMPEvents*, cdromnum : Int32) : Void
    @lpVtbl.value.cdrom_media_change.call(this, cdromnum)
  end
  def playlist_change(this : IWMPEvents*, playlist : IDispatch, change : WMPPlaylistChangeEventType) : Void
    @lpVtbl.value.playlist_change.call(this, playlist, change)
  end
  def current_playlist_change(this : IWMPEvents*, change : WMPPlaylistChangeEventType) : Void
    @lpVtbl.value.current_playlist_change.call(this, change)
  end
  def current_playlist_item_available(this : IWMPEvents*, bstritemname : UInt8*) : Void
    @lpVtbl.value.current_playlist_item_available.call(this, bstritemname)
  end
  def media_change(this : IWMPEvents*, item : IDispatch) : Void
    @lpVtbl.value.media_change.call(this, item)
  end
  def current_media_item_available(this : IWMPEvents*, bstritemname : UInt8*) : Void
    @lpVtbl.value.current_media_item_available.call(this, bstritemname)
  end
  def current_item_change(this : IWMPEvents*, pdispmedia : IDispatch) : Void
    @lpVtbl.value.current_item_change.call(this, pdispmedia)
  end
  def media_collection_change(this : IWMPEvents*) : Void
    @lpVtbl.value.media_collection_change.call(this)
  end
  def media_collection_attribute_string_added(this : IWMPEvents*, bstrattribname : UInt8*, bstrattribval : UInt8*) : Void
    @lpVtbl.value.media_collection_attribute_string_added.call(this, bstrattribname, bstrattribval)
  end
  def media_collection_attribute_string_removed(this : IWMPEvents*, bstrattribname : UInt8*, bstrattribval : UInt8*) : Void
    @lpVtbl.value.media_collection_attribute_string_removed.call(this, bstrattribname, bstrattribval)
  end
  def media_collection_attribute_string_changed(this : IWMPEvents*, bstrattribname : UInt8*, bstroldattribval : UInt8*, bstrnewattribval : UInt8*) : Void
    @lpVtbl.value.media_collection_attribute_string_changed.call(this, bstrattribname, bstroldattribval, bstrnewattribval)
  end
  def playlist_collection_change(this : IWMPEvents*) : Void
    @lpVtbl.value.playlist_collection_change.call(this)
  end
  def playlist_collection_playlist_added(this : IWMPEvents*, bstrplaylistname : UInt8*) : Void
    @lpVtbl.value.playlist_collection_playlist_added.call(this, bstrplaylistname)
  end
  def playlist_collection_playlist_removed(this : IWMPEvents*, bstrplaylistname : UInt8*) : Void
    @lpVtbl.value.playlist_collection_playlist_removed.call(this, bstrplaylistname)
  end
  def playlist_collection_playlist_set_as_deleted(this : IWMPEvents*, bstrplaylistname : UInt8*, varfisdeleted : Int16) : Void
    @lpVtbl.value.playlist_collection_playlist_set_as_deleted.call(this, bstrplaylistname, varfisdeleted)
  end
  def mode_change(this : IWMPEvents*, modename : UInt8*, newvalue : Int16) : Void
    @lpVtbl.value.mode_change.call(this, modename, newvalue)
  end
  def media_error(this : IWMPEvents*, pmediaobject : IDispatch) : Void
    @lpVtbl.value.media_error.call(this, pmediaobject)
  end
  def open_playlist_switch(this : IWMPEvents*, pitem : IDispatch) : Void
    @lpVtbl.value.open_playlist_switch.call(this, pitem)
  end
  def domain_change(this : IWMPEvents*, strdomain : UInt8*) : Void
    @lpVtbl.value.domain_change.call(this, strdomain)
  end
  def switched_to_player_application(this : IWMPEvents*) : Void
    @lpVtbl.value.switched_to_player_application.call(this)
  end
  def switched_to_control(this : IWMPEvents*) : Void
    @lpVtbl.value.switched_to_control.call(this)
  end
  def player_docked_state_change(this : IWMPEvents*) : Void
    @lpVtbl.value.player_docked_state_change.call(this)
  end
  def player_reconnect(this : IWMPEvents*) : Void
    @lpVtbl.value.player_reconnect.call(this)
  end
  def click(this : IWMPEvents*, nbutton : Int16, nshiftstate : Int16, fx : Int32, fy : Int32) : Void
    @lpVtbl.value.click.call(this, nbutton, nshiftstate, fx, fy)
  end
  def double_click(this : IWMPEvents*, nbutton : Int16, nshiftstate : Int16, fx : Int32, fy : Int32) : Void
    @lpVtbl.value.double_click.call(this, nbutton, nshiftstate, fx, fy)
  end
  def key_down(this : IWMPEvents*, nkeycode : Int16, nshiftstate : Int16) : Void
    @lpVtbl.value.key_down.call(this, nkeycode, nshiftstate)
  end
  def key_press(this : IWMPEvents*, nkeyascii : Int16) : Void
    @lpVtbl.value.key_press.call(this, nkeyascii)
  end
  def key_up(this : IWMPEvents*, nkeycode : Int16, nshiftstate : Int16) : Void
    @lpVtbl.value.key_up.call(this, nkeycode, nshiftstate)
  end
  def mouse_down(this : IWMPEvents*, nbutton : Int16, nshiftstate : Int16, fx : Int32, fy : Int32) : Void
    @lpVtbl.value.mouse_down.call(this, nbutton, nshiftstate, fx, fy)
  end
  def mouse_move(this : IWMPEvents*, nbutton : Int16, nshiftstate : Int16, fx : Int32, fy : Int32) : Void
    @lpVtbl.value.mouse_move.call(this, nbutton, nshiftstate, fx, fy)
  end
  def mouse_up(this : IWMPEvents*, nbutton : Int16, nshiftstate : Int16, fx : Int32, fy : Int32) : Void
    @lpVtbl.value.mouse_up.call(this, nbutton, nshiftstate, fx, fy)
  end
end
struct LibWin32::IWMPEvents2
  def query_interface(this : IWMPEvents2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPEvents2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPEvents2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def open_state_change(this : IWMPEvents2*, newstate : Int32) : Void
    @lpVtbl.value.open_state_change.call(this, newstate)
  end
  def play_state_change(this : IWMPEvents2*, newstate : Int32) : Void
    @lpVtbl.value.play_state_change.call(this, newstate)
  end
  def audio_language_change(this : IWMPEvents2*, langid : Int32) : Void
    @lpVtbl.value.audio_language_change.call(this, langid)
  end
  def status_change(this : IWMPEvents2*) : Void
    @lpVtbl.value.status_change.call(this)
  end
  def script_command(this : IWMPEvents2*, sctype : UInt8*, param : UInt8*) : Void
    @lpVtbl.value.script_command.call(this, sctype, param)
  end
  def new_stream(this : IWMPEvents2*) : Void
    @lpVtbl.value.new_stream.call(this)
  end
  def disconnect(this : IWMPEvents2*, result : Int32) : Void
    @lpVtbl.value.disconnect.call(this, result)
  end
  def buffering(this : IWMPEvents2*, start : Int16) : Void
    @lpVtbl.value.buffering.call(this, start)
  end
  def error(this : IWMPEvents2*) : Void
    @lpVtbl.value.error.call(this)
  end
  def warning(this : IWMPEvents2*, warningtype : Int32, param : Int32, description : UInt8*) : Void
    @lpVtbl.value.warning.call(this, warningtype, param, description)
  end
  def end_of_stream(this : IWMPEvents2*, result : Int32) : Void
    @lpVtbl.value.end_of_stream.call(this, result)
  end
  def position_change(this : IWMPEvents2*, oldposition : Float64, newposition : Float64) : Void
    @lpVtbl.value.position_change.call(this, oldposition, newposition)
  end
  def marker_hit(this : IWMPEvents2*, markernum : Int32) : Void
    @lpVtbl.value.marker_hit.call(this, markernum)
  end
  def duration_unit_change(this : IWMPEvents2*, newdurationunit : Int32) : Void
    @lpVtbl.value.duration_unit_change.call(this, newdurationunit)
  end
  def cdrom_media_change(this : IWMPEvents2*, cdromnum : Int32) : Void
    @lpVtbl.value.cdrom_media_change.call(this, cdromnum)
  end
  def playlist_change(this : IWMPEvents2*, playlist : IDispatch, change : WMPPlaylistChangeEventType) : Void
    @lpVtbl.value.playlist_change.call(this, playlist, change)
  end
  def current_playlist_change(this : IWMPEvents2*, change : WMPPlaylistChangeEventType) : Void
    @lpVtbl.value.current_playlist_change.call(this, change)
  end
  def current_playlist_item_available(this : IWMPEvents2*, bstritemname : UInt8*) : Void
    @lpVtbl.value.current_playlist_item_available.call(this, bstritemname)
  end
  def media_change(this : IWMPEvents2*, item : IDispatch) : Void
    @lpVtbl.value.media_change.call(this, item)
  end
  def current_media_item_available(this : IWMPEvents2*, bstritemname : UInt8*) : Void
    @lpVtbl.value.current_media_item_available.call(this, bstritemname)
  end
  def current_item_change(this : IWMPEvents2*, pdispmedia : IDispatch) : Void
    @lpVtbl.value.current_item_change.call(this, pdispmedia)
  end
  def media_collection_change(this : IWMPEvents2*) : Void
    @lpVtbl.value.media_collection_change.call(this)
  end
  def media_collection_attribute_string_added(this : IWMPEvents2*, bstrattribname : UInt8*, bstrattribval : UInt8*) : Void
    @lpVtbl.value.media_collection_attribute_string_added.call(this, bstrattribname, bstrattribval)
  end
  def media_collection_attribute_string_removed(this : IWMPEvents2*, bstrattribname : UInt8*, bstrattribval : UInt8*) : Void
    @lpVtbl.value.media_collection_attribute_string_removed.call(this, bstrattribname, bstrattribval)
  end
  def media_collection_attribute_string_changed(this : IWMPEvents2*, bstrattribname : UInt8*, bstroldattribval : UInt8*, bstrnewattribval : UInt8*) : Void
    @lpVtbl.value.media_collection_attribute_string_changed.call(this, bstrattribname, bstroldattribval, bstrnewattribval)
  end
  def playlist_collection_change(this : IWMPEvents2*) : Void
    @lpVtbl.value.playlist_collection_change.call(this)
  end
  def playlist_collection_playlist_added(this : IWMPEvents2*, bstrplaylistname : UInt8*) : Void
    @lpVtbl.value.playlist_collection_playlist_added.call(this, bstrplaylistname)
  end
  def playlist_collection_playlist_removed(this : IWMPEvents2*, bstrplaylistname : UInt8*) : Void
    @lpVtbl.value.playlist_collection_playlist_removed.call(this, bstrplaylistname)
  end
  def playlist_collection_playlist_set_as_deleted(this : IWMPEvents2*, bstrplaylistname : UInt8*, varfisdeleted : Int16) : Void
    @lpVtbl.value.playlist_collection_playlist_set_as_deleted.call(this, bstrplaylistname, varfisdeleted)
  end
  def mode_change(this : IWMPEvents2*, modename : UInt8*, newvalue : Int16) : Void
    @lpVtbl.value.mode_change.call(this, modename, newvalue)
  end
  def media_error(this : IWMPEvents2*, pmediaobject : IDispatch) : Void
    @lpVtbl.value.media_error.call(this, pmediaobject)
  end
  def open_playlist_switch(this : IWMPEvents2*, pitem : IDispatch) : Void
    @lpVtbl.value.open_playlist_switch.call(this, pitem)
  end
  def domain_change(this : IWMPEvents2*, strdomain : UInt8*) : Void
    @lpVtbl.value.domain_change.call(this, strdomain)
  end
  def switched_to_player_application(this : IWMPEvents2*) : Void
    @lpVtbl.value.switched_to_player_application.call(this)
  end
  def switched_to_control(this : IWMPEvents2*) : Void
    @lpVtbl.value.switched_to_control.call(this)
  end
  def player_docked_state_change(this : IWMPEvents2*) : Void
    @lpVtbl.value.player_docked_state_change.call(this)
  end
  def player_reconnect(this : IWMPEvents2*) : Void
    @lpVtbl.value.player_reconnect.call(this)
  end
  def click(this : IWMPEvents2*, nbutton : Int16, nshiftstate : Int16, fx : Int32, fy : Int32) : Void
    @lpVtbl.value.click.call(this, nbutton, nshiftstate, fx, fy)
  end
  def double_click(this : IWMPEvents2*, nbutton : Int16, nshiftstate : Int16, fx : Int32, fy : Int32) : Void
    @lpVtbl.value.double_click.call(this, nbutton, nshiftstate, fx, fy)
  end
  def key_down(this : IWMPEvents2*, nkeycode : Int16, nshiftstate : Int16) : Void
    @lpVtbl.value.key_down.call(this, nkeycode, nshiftstate)
  end
  def key_press(this : IWMPEvents2*, nkeyascii : Int16) : Void
    @lpVtbl.value.key_press.call(this, nkeyascii)
  end
  def key_up(this : IWMPEvents2*, nkeycode : Int16, nshiftstate : Int16) : Void
    @lpVtbl.value.key_up.call(this, nkeycode, nshiftstate)
  end
  def mouse_down(this : IWMPEvents2*, nbutton : Int16, nshiftstate : Int16, fx : Int32, fy : Int32) : Void
    @lpVtbl.value.mouse_down.call(this, nbutton, nshiftstate, fx, fy)
  end
  def mouse_move(this : IWMPEvents2*, nbutton : Int16, nshiftstate : Int16, fx : Int32, fy : Int32) : Void
    @lpVtbl.value.mouse_move.call(this, nbutton, nshiftstate, fx, fy)
  end
  def mouse_up(this : IWMPEvents2*, nbutton : Int16, nshiftstate : Int16, fx : Int32, fy : Int32) : Void
    @lpVtbl.value.mouse_up.call(this, nbutton, nshiftstate, fx, fy)
  end
  def device_connect(this : IWMPEvents2*, pdevice : IWMPSyncDevice) : Void
    @lpVtbl.value.device_connect.call(this, pdevice)
  end
  def device_disconnect(this : IWMPEvents2*, pdevice : IWMPSyncDevice) : Void
    @lpVtbl.value.device_disconnect.call(this, pdevice)
  end
  def device_status_change(this : IWMPEvents2*, pdevice : IWMPSyncDevice, newstatus : WMPDeviceStatus) : Void
    @lpVtbl.value.device_status_change.call(this, pdevice, newstatus)
  end
  def device_sync_state_change(this : IWMPEvents2*, pdevice : IWMPSyncDevice, newstate : WMPSyncState) : Void
    @lpVtbl.value.device_sync_state_change.call(this, pdevice, newstate)
  end
  def device_sync_error(this : IWMPEvents2*, pdevice : IWMPSyncDevice, pmedia : IDispatch) : Void
    @lpVtbl.value.device_sync_error.call(this, pdevice, pmedia)
  end
  def create_partnership_complete(this : IWMPEvents2*, pdevice : IWMPSyncDevice, hrresult : HRESULT) : Void
    @lpVtbl.value.create_partnership_complete.call(this, pdevice, hrresult)
  end
end
struct LibWin32::IWMPEvents3
  def query_interface(this : IWMPEvents3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPEvents3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPEvents3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def open_state_change(this : IWMPEvents3*, newstate : Int32) : Void
    @lpVtbl.value.open_state_change.call(this, newstate)
  end
  def play_state_change(this : IWMPEvents3*, newstate : Int32) : Void
    @lpVtbl.value.play_state_change.call(this, newstate)
  end
  def audio_language_change(this : IWMPEvents3*, langid : Int32) : Void
    @lpVtbl.value.audio_language_change.call(this, langid)
  end
  def status_change(this : IWMPEvents3*) : Void
    @lpVtbl.value.status_change.call(this)
  end
  def script_command(this : IWMPEvents3*, sctype : UInt8*, param : UInt8*) : Void
    @lpVtbl.value.script_command.call(this, sctype, param)
  end
  def new_stream(this : IWMPEvents3*) : Void
    @lpVtbl.value.new_stream.call(this)
  end
  def disconnect(this : IWMPEvents3*, result : Int32) : Void
    @lpVtbl.value.disconnect.call(this, result)
  end
  def buffering(this : IWMPEvents3*, start : Int16) : Void
    @lpVtbl.value.buffering.call(this, start)
  end
  def error(this : IWMPEvents3*) : Void
    @lpVtbl.value.error.call(this)
  end
  def warning(this : IWMPEvents3*, warningtype : Int32, param : Int32, description : UInt8*) : Void
    @lpVtbl.value.warning.call(this, warningtype, param, description)
  end
  def end_of_stream(this : IWMPEvents3*, result : Int32) : Void
    @lpVtbl.value.end_of_stream.call(this, result)
  end
  def position_change(this : IWMPEvents3*, oldposition : Float64, newposition : Float64) : Void
    @lpVtbl.value.position_change.call(this, oldposition, newposition)
  end
  def marker_hit(this : IWMPEvents3*, markernum : Int32) : Void
    @lpVtbl.value.marker_hit.call(this, markernum)
  end
  def duration_unit_change(this : IWMPEvents3*, newdurationunit : Int32) : Void
    @lpVtbl.value.duration_unit_change.call(this, newdurationunit)
  end
  def cdrom_media_change(this : IWMPEvents3*, cdromnum : Int32) : Void
    @lpVtbl.value.cdrom_media_change.call(this, cdromnum)
  end
  def playlist_change(this : IWMPEvents3*, playlist : IDispatch, change : WMPPlaylistChangeEventType) : Void
    @lpVtbl.value.playlist_change.call(this, playlist, change)
  end
  def current_playlist_change(this : IWMPEvents3*, change : WMPPlaylistChangeEventType) : Void
    @lpVtbl.value.current_playlist_change.call(this, change)
  end
  def current_playlist_item_available(this : IWMPEvents3*, bstritemname : UInt8*) : Void
    @lpVtbl.value.current_playlist_item_available.call(this, bstritemname)
  end
  def media_change(this : IWMPEvents3*, item : IDispatch) : Void
    @lpVtbl.value.media_change.call(this, item)
  end
  def current_media_item_available(this : IWMPEvents3*, bstritemname : UInt8*) : Void
    @lpVtbl.value.current_media_item_available.call(this, bstritemname)
  end
  def current_item_change(this : IWMPEvents3*, pdispmedia : IDispatch) : Void
    @lpVtbl.value.current_item_change.call(this, pdispmedia)
  end
  def media_collection_change(this : IWMPEvents3*) : Void
    @lpVtbl.value.media_collection_change.call(this)
  end
  def media_collection_attribute_string_added(this : IWMPEvents3*, bstrattribname : UInt8*, bstrattribval : UInt8*) : Void
    @lpVtbl.value.media_collection_attribute_string_added.call(this, bstrattribname, bstrattribval)
  end
  def media_collection_attribute_string_removed(this : IWMPEvents3*, bstrattribname : UInt8*, bstrattribval : UInt8*) : Void
    @lpVtbl.value.media_collection_attribute_string_removed.call(this, bstrattribname, bstrattribval)
  end
  def media_collection_attribute_string_changed(this : IWMPEvents3*, bstrattribname : UInt8*, bstroldattribval : UInt8*, bstrnewattribval : UInt8*) : Void
    @lpVtbl.value.media_collection_attribute_string_changed.call(this, bstrattribname, bstroldattribval, bstrnewattribval)
  end
  def playlist_collection_change(this : IWMPEvents3*) : Void
    @lpVtbl.value.playlist_collection_change.call(this)
  end
  def playlist_collection_playlist_added(this : IWMPEvents3*, bstrplaylistname : UInt8*) : Void
    @lpVtbl.value.playlist_collection_playlist_added.call(this, bstrplaylistname)
  end
  def playlist_collection_playlist_removed(this : IWMPEvents3*, bstrplaylistname : UInt8*) : Void
    @lpVtbl.value.playlist_collection_playlist_removed.call(this, bstrplaylistname)
  end
  def playlist_collection_playlist_set_as_deleted(this : IWMPEvents3*, bstrplaylistname : UInt8*, varfisdeleted : Int16) : Void
    @lpVtbl.value.playlist_collection_playlist_set_as_deleted.call(this, bstrplaylistname, varfisdeleted)
  end
  def mode_change(this : IWMPEvents3*, modename : UInt8*, newvalue : Int16) : Void
    @lpVtbl.value.mode_change.call(this, modename, newvalue)
  end
  def media_error(this : IWMPEvents3*, pmediaobject : IDispatch) : Void
    @lpVtbl.value.media_error.call(this, pmediaobject)
  end
  def open_playlist_switch(this : IWMPEvents3*, pitem : IDispatch) : Void
    @lpVtbl.value.open_playlist_switch.call(this, pitem)
  end
  def domain_change(this : IWMPEvents3*, strdomain : UInt8*) : Void
    @lpVtbl.value.domain_change.call(this, strdomain)
  end
  def switched_to_player_application(this : IWMPEvents3*) : Void
    @lpVtbl.value.switched_to_player_application.call(this)
  end
  def switched_to_control(this : IWMPEvents3*) : Void
    @lpVtbl.value.switched_to_control.call(this)
  end
  def player_docked_state_change(this : IWMPEvents3*) : Void
    @lpVtbl.value.player_docked_state_change.call(this)
  end
  def player_reconnect(this : IWMPEvents3*) : Void
    @lpVtbl.value.player_reconnect.call(this)
  end
  def click(this : IWMPEvents3*, nbutton : Int16, nshiftstate : Int16, fx : Int32, fy : Int32) : Void
    @lpVtbl.value.click.call(this, nbutton, nshiftstate, fx, fy)
  end
  def double_click(this : IWMPEvents3*, nbutton : Int16, nshiftstate : Int16, fx : Int32, fy : Int32) : Void
    @lpVtbl.value.double_click.call(this, nbutton, nshiftstate, fx, fy)
  end
  def key_down(this : IWMPEvents3*, nkeycode : Int16, nshiftstate : Int16) : Void
    @lpVtbl.value.key_down.call(this, nkeycode, nshiftstate)
  end
  def key_press(this : IWMPEvents3*, nkeyascii : Int16) : Void
    @lpVtbl.value.key_press.call(this, nkeyascii)
  end
  def key_up(this : IWMPEvents3*, nkeycode : Int16, nshiftstate : Int16) : Void
    @lpVtbl.value.key_up.call(this, nkeycode, nshiftstate)
  end
  def mouse_down(this : IWMPEvents3*, nbutton : Int16, nshiftstate : Int16, fx : Int32, fy : Int32) : Void
    @lpVtbl.value.mouse_down.call(this, nbutton, nshiftstate, fx, fy)
  end
  def mouse_move(this : IWMPEvents3*, nbutton : Int16, nshiftstate : Int16, fx : Int32, fy : Int32) : Void
    @lpVtbl.value.mouse_move.call(this, nbutton, nshiftstate, fx, fy)
  end
  def mouse_up(this : IWMPEvents3*, nbutton : Int16, nshiftstate : Int16, fx : Int32, fy : Int32) : Void
    @lpVtbl.value.mouse_up.call(this, nbutton, nshiftstate, fx, fy)
  end
  def device_connect(this : IWMPEvents3*, pdevice : IWMPSyncDevice) : Void
    @lpVtbl.value.device_connect.call(this, pdevice)
  end
  def device_disconnect(this : IWMPEvents3*, pdevice : IWMPSyncDevice) : Void
    @lpVtbl.value.device_disconnect.call(this, pdevice)
  end
  def device_status_change(this : IWMPEvents3*, pdevice : IWMPSyncDevice, newstatus : WMPDeviceStatus) : Void
    @lpVtbl.value.device_status_change.call(this, pdevice, newstatus)
  end
  def device_sync_state_change(this : IWMPEvents3*, pdevice : IWMPSyncDevice, newstate : WMPSyncState) : Void
    @lpVtbl.value.device_sync_state_change.call(this, pdevice, newstate)
  end
  def device_sync_error(this : IWMPEvents3*, pdevice : IWMPSyncDevice, pmedia : IDispatch) : Void
    @lpVtbl.value.device_sync_error.call(this, pdevice, pmedia)
  end
  def create_partnership_complete(this : IWMPEvents3*, pdevice : IWMPSyncDevice, hrresult : HRESULT) : Void
    @lpVtbl.value.create_partnership_complete.call(this, pdevice, hrresult)
  end
  def cdrom_rip_state_change(this : IWMPEvents3*, pcdromrip : IWMPCdromRip, wmprs : WMPRipState) : Void
    @lpVtbl.value.cdrom_rip_state_change.call(this, pcdromrip, wmprs)
  end
  def cdrom_rip_media_error(this : IWMPEvents3*, pcdromrip : IWMPCdromRip, pmedia : IDispatch) : Void
    @lpVtbl.value.cdrom_rip_media_error.call(this, pcdromrip, pmedia)
  end
  def cdrom_burn_state_change(this : IWMPEvents3*, pcdromburn : IWMPCdromBurn, wmpbs : WMPBurnState) : Void
    @lpVtbl.value.cdrom_burn_state_change.call(this, pcdromburn, wmpbs)
  end
  def cdrom_burn_media_error(this : IWMPEvents3*, pcdromburn : IWMPCdromBurn, pmedia : IDispatch) : Void
    @lpVtbl.value.cdrom_burn_media_error.call(this, pcdromburn, pmedia)
  end
  def cdrom_burn_error(this : IWMPEvents3*, pcdromburn : IWMPCdromBurn, hrerror : HRESULT) : Void
    @lpVtbl.value.cdrom_burn_error.call(this, pcdromburn, hrerror)
  end
  def library_connect(this : IWMPEvents3*, plibrary : IWMPLibrary) : Void
    @lpVtbl.value.library_connect.call(this, plibrary)
  end
  def library_disconnect(this : IWMPEvents3*, plibrary : IWMPLibrary) : Void
    @lpVtbl.value.library_disconnect.call(this, plibrary)
  end
  def folder_scan_state_change(this : IWMPEvents3*, wmpfss : WMPFolderScanState) : Void
    @lpVtbl.value.folder_scan_state_change.call(this, wmpfss)
  end
  def string_collection_change(this : IWMPEvents3*, pdispstringcollection : IDispatch, change : WMPStringCollectionChangeEventType, lcollectionindex : Int32) : Void
    @lpVtbl.value.string_collection_change.call(this, pdispstringcollection, change, lcollectionindex)
  end
  def media_collection_media_added(this : IWMPEvents3*, pdispmedia : IDispatch) : Void
    @lpVtbl.value.media_collection_media_added.call(this, pdispmedia)
  end
  def media_collection_media_removed(this : IWMPEvents3*, pdispmedia : IDispatch) : Void
    @lpVtbl.value.media_collection_media_removed.call(this, pdispmedia)
  end
end
struct LibWin32::IWMPEvents4
  def query_interface(this : IWMPEvents4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPEvents4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPEvents4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def open_state_change(this : IWMPEvents4*, newstate : Int32) : Void
    @lpVtbl.value.open_state_change.call(this, newstate)
  end
  def play_state_change(this : IWMPEvents4*, newstate : Int32) : Void
    @lpVtbl.value.play_state_change.call(this, newstate)
  end
  def audio_language_change(this : IWMPEvents4*, langid : Int32) : Void
    @lpVtbl.value.audio_language_change.call(this, langid)
  end
  def status_change(this : IWMPEvents4*) : Void
    @lpVtbl.value.status_change.call(this)
  end
  def script_command(this : IWMPEvents4*, sctype : UInt8*, param : UInt8*) : Void
    @lpVtbl.value.script_command.call(this, sctype, param)
  end
  def new_stream(this : IWMPEvents4*) : Void
    @lpVtbl.value.new_stream.call(this)
  end
  def disconnect(this : IWMPEvents4*, result : Int32) : Void
    @lpVtbl.value.disconnect.call(this, result)
  end
  def buffering(this : IWMPEvents4*, start : Int16) : Void
    @lpVtbl.value.buffering.call(this, start)
  end
  def error(this : IWMPEvents4*) : Void
    @lpVtbl.value.error.call(this)
  end
  def warning(this : IWMPEvents4*, warningtype : Int32, param : Int32, description : UInt8*) : Void
    @lpVtbl.value.warning.call(this, warningtype, param, description)
  end
  def end_of_stream(this : IWMPEvents4*, result : Int32) : Void
    @lpVtbl.value.end_of_stream.call(this, result)
  end
  def position_change(this : IWMPEvents4*, oldposition : Float64, newposition : Float64) : Void
    @lpVtbl.value.position_change.call(this, oldposition, newposition)
  end
  def marker_hit(this : IWMPEvents4*, markernum : Int32) : Void
    @lpVtbl.value.marker_hit.call(this, markernum)
  end
  def duration_unit_change(this : IWMPEvents4*, newdurationunit : Int32) : Void
    @lpVtbl.value.duration_unit_change.call(this, newdurationunit)
  end
  def cdrom_media_change(this : IWMPEvents4*, cdromnum : Int32) : Void
    @lpVtbl.value.cdrom_media_change.call(this, cdromnum)
  end
  def playlist_change(this : IWMPEvents4*, playlist : IDispatch, change : WMPPlaylistChangeEventType) : Void
    @lpVtbl.value.playlist_change.call(this, playlist, change)
  end
  def current_playlist_change(this : IWMPEvents4*, change : WMPPlaylistChangeEventType) : Void
    @lpVtbl.value.current_playlist_change.call(this, change)
  end
  def current_playlist_item_available(this : IWMPEvents4*, bstritemname : UInt8*) : Void
    @lpVtbl.value.current_playlist_item_available.call(this, bstritemname)
  end
  def media_change(this : IWMPEvents4*, item : IDispatch) : Void
    @lpVtbl.value.media_change.call(this, item)
  end
  def current_media_item_available(this : IWMPEvents4*, bstritemname : UInt8*) : Void
    @lpVtbl.value.current_media_item_available.call(this, bstritemname)
  end
  def current_item_change(this : IWMPEvents4*, pdispmedia : IDispatch) : Void
    @lpVtbl.value.current_item_change.call(this, pdispmedia)
  end
  def media_collection_change(this : IWMPEvents4*) : Void
    @lpVtbl.value.media_collection_change.call(this)
  end
  def media_collection_attribute_string_added(this : IWMPEvents4*, bstrattribname : UInt8*, bstrattribval : UInt8*) : Void
    @lpVtbl.value.media_collection_attribute_string_added.call(this, bstrattribname, bstrattribval)
  end
  def media_collection_attribute_string_removed(this : IWMPEvents4*, bstrattribname : UInt8*, bstrattribval : UInt8*) : Void
    @lpVtbl.value.media_collection_attribute_string_removed.call(this, bstrattribname, bstrattribval)
  end
  def media_collection_attribute_string_changed(this : IWMPEvents4*, bstrattribname : UInt8*, bstroldattribval : UInt8*, bstrnewattribval : UInt8*) : Void
    @lpVtbl.value.media_collection_attribute_string_changed.call(this, bstrattribname, bstroldattribval, bstrnewattribval)
  end
  def playlist_collection_change(this : IWMPEvents4*) : Void
    @lpVtbl.value.playlist_collection_change.call(this)
  end
  def playlist_collection_playlist_added(this : IWMPEvents4*, bstrplaylistname : UInt8*) : Void
    @lpVtbl.value.playlist_collection_playlist_added.call(this, bstrplaylistname)
  end
  def playlist_collection_playlist_removed(this : IWMPEvents4*, bstrplaylistname : UInt8*) : Void
    @lpVtbl.value.playlist_collection_playlist_removed.call(this, bstrplaylistname)
  end
  def playlist_collection_playlist_set_as_deleted(this : IWMPEvents4*, bstrplaylistname : UInt8*, varfisdeleted : Int16) : Void
    @lpVtbl.value.playlist_collection_playlist_set_as_deleted.call(this, bstrplaylistname, varfisdeleted)
  end
  def mode_change(this : IWMPEvents4*, modename : UInt8*, newvalue : Int16) : Void
    @lpVtbl.value.mode_change.call(this, modename, newvalue)
  end
  def media_error(this : IWMPEvents4*, pmediaobject : IDispatch) : Void
    @lpVtbl.value.media_error.call(this, pmediaobject)
  end
  def open_playlist_switch(this : IWMPEvents4*, pitem : IDispatch) : Void
    @lpVtbl.value.open_playlist_switch.call(this, pitem)
  end
  def domain_change(this : IWMPEvents4*, strdomain : UInt8*) : Void
    @lpVtbl.value.domain_change.call(this, strdomain)
  end
  def switched_to_player_application(this : IWMPEvents4*) : Void
    @lpVtbl.value.switched_to_player_application.call(this)
  end
  def switched_to_control(this : IWMPEvents4*) : Void
    @lpVtbl.value.switched_to_control.call(this)
  end
  def player_docked_state_change(this : IWMPEvents4*) : Void
    @lpVtbl.value.player_docked_state_change.call(this)
  end
  def player_reconnect(this : IWMPEvents4*) : Void
    @lpVtbl.value.player_reconnect.call(this)
  end
  def click(this : IWMPEvents4*, nbutton : Int16, nshiftstate : Int16, fx : Int32, fy : Int32) : Void
    @lpVtbl.value.click.call(this, nbutton, nshiftstate, fx, fy)
  end
  def double_click(this : IWMPEvents4*, nbutton : Int16, nshiftstate : Int16, fx : Int32, fy : Int32) : Void
    @lpVtbl.value.double_click.call(this, nbutton, nshiftstate, fx, fy)
  end
  def key_down(this : IWMPEvents4*, nkeycode : Int16, nshiftstate : Int16) : Void
    @lpVtbl.value.key_down.call(this, nkeycode, nshiftstate)
  end
  def key_press(this : IWMPEvents4*, nkeyascii : Int16) : Void
    @lpVtbl.value.key_press.call(this, nkeyascii)
  end
  def key_up(this : IWMPEvents4*, nkeycode : Int16, nshiftstate : Int16) : Void
    @lpVtbl.value.key_up.call(this, nkeycode, nshiftstate)
  end
  def mouse_down(this : IWMPEvents4*, nbutton : Int16, nshiftstate : Int16, fx : Int32, fy : Int32) : Void
    @lpVtbl.value.mouse_down.call(this, nbutton, nshiftstate, fx, fy)
  end
  def mouse_move(this : IWMPEvents4*, nbutton : Int16, nshiftstate : Int16, fx : Int32, fy : Int32) : Void
    @lpVtbl.value.mouse_move.call(this, nbutton, nshiftstate, fx, fy)
  end
  def mouse_up(this : IWMPEvents4*, nbutton : Int16, nshiftstate : Int16, fx : Int32, fy : Int32) : Void
    @lpVtbl.value.mouse_up.call(this, nbutton, nshiftstate, fx, fy)
  end
  def device_connect(this : IWMPEvents4*, pdevice : IWMPSyncDevice) : Void
    @lpVtbl.value.device_connect.call(this, pdevice)
  end
  def device_disconnect(this : IWMPEvents4*, pdevice : IWMPSyncDevice) : Void
    @lpVtbl.value.device_disconnect.call(this, pdevice)
  end
  def device_status_change(this : IWMPEvents4*, pdevice : IWMPSyncDevice, newstatus : WMPDeviceStatus) : Void
    @lpVtbl.value.device_status_change.call(this, pdevice, newstatus)
  end
  def device_sync_state_change(this : IWMPEvents4*, pdevice : IWMPSyncDevice, newstate : WMPSyncState) : Void
    @lpVtbl.value.device_sync_state_change.call(this, pdevice, newstate)
  end
  def device_sync_error(this : IWMPEvents4*, pdevice : IWMPSyncDevice, pmedia : IDispatch) : Void
    @lpVtbl.value.device_sync_error.call(this, pdevice, pmedia)
  end
  def create_partnership_complete(this : IWMPEvents4*, pdevice : IWMPSyncDevice, hrresult : HRESULT) : Void
    @lpVtbl.value.create_partnership_complete.call(this, pdevice, hrresult)
  end
  def cdrom_rip_state_change(this : IWMPEvents4*, pcdromrip : IWMPCdromRip, wmprs : WMPRipState) : Void
    @lpVtbl.value.cdrom_rip_state_change.call(this, pcdromrip, wmprs)
  end
  def cdrom_rip_media_error(this : IWMPEvents4*, pcdromrip : IWMPCdromRip, pmedia : IDispatch) : Void
    @lpVtbl.value.cdrom_rip_media_error.call(this, pcdromrip, pmedia)
  end
  def cdrom_burn_state_change(this : IWMPEvents4*, pcdromburn : IWMPCdromBurn, wmpbs : WMPBurnState) : Void
    @lpVtbl.value.cdrom_burn_state_change.call(this, pcdromburn, wmpbs)
  end
  def cdrom_burn_media_error(this : IWMPEvents4*, pcdromburn : IWMPCdromBurn, pmedia : IDispatch) : Void
    @lpVtbl.value.cdrom_burn_media_error.call(this, pcdromburn, pmedia)
  end
  def cdrom_burn_error(this : IWMPEvents4*, pcdromburn : IWMPCdromBurn, hrerror : HRESULT) : Void
    @lpVtbl.value.cdrom_burn_error.call(this, pcdromburn, hrerror)
  end
  def library_connect(this : IWMPEvents4*, plibrary : IWMPLibrary) : Void
    @lpVtbl.value.library_connect.call(this, plibrary)
  end
  def library_disconnect(this : IWMPEvents4*, plibrary : IWMPLibrary) : Void
    @lpVtbl.value.library_disconnect.call(this, plibrary)
  end
  def folder_scan_state_change(this : IWMPEvents4*, wmpfss : WMPFolderScanState) : Void
    @lpVtbl.value.folder_scan_state_change.call(this, wmpfss)
  end
  def string_collection_change(this : IWMPEvents4*, pdispstringcollection : IDispatch, change : WMPStringCollectionChangeEventType, lcollectionindex : Int32) : Void
    @lpVtbl.value.string_collection_change.call(this, pdispstringcollection, change, lcollectionindex)
  end
  def media_collection_media_added(this : IWMPEvents4*, pdispmedia : IDispatch) : Void
    @lpVtbl.value.media_collection_media_added.call(this, pdispmedia)
  end
  def media_collection_media_removed(this : IWMPEvents4*, pdispmedia : IDispatch) : Void
    @lpVtbl.value.media_collection_media_removed.call(this, pdispmedia)
  end
  def device_estimation(this : IWMPEvents4*, pdevice : IWMPSyncDevice, hrresult : HRESULT, qwestimatedusedspace : Int64, qwestimatedspace : Int64) : Void
    @lpVtbl.value.device_estimation.call(this, pdevice, hrresult, qwestimatedusedspace, qwestimatedspace)
  end
end
struct LibWin32::IWMPOCXEvents
  def query_interface(this : IWMPOCXEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPOCXEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPOCXEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPOCXEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPOCXEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPOCXEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPOCXEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IWMPNodeRealEstate
  def query_interface(this : IWMPNodeRealEstate*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPNodeRealEstate*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPNodeRealEstate*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_desired_size(this : IWMPNodeRealEstate*, psize : SIZE*) : HRESULT
    @lpVtbl.value.get_desired_size.call(this, psize)
  end
  def set_rects(this : IWMPNodeRealEstate*, psrc : RECT*, pdest : RECT*, pclip : RECT*) : HRESULT
    @lpVtbl.value.set_rects.call(this, psrc, pdest, pclip)
  end
  def get_rects(this : IWMPNodeRealEstate*, psrc : RECT*, pdest : RECT*, pclip : RECT*) : HRESULT
    @lpVtbl.value.get_rects.call(this, psrc, pdest, pclip)
  end
  def set_windowless(this : IWMPNodeRealEstate*, fwindowless : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_windowless.call(this, fwindowless)
  end
  def get_windowless(this : IWMPNodeRealEstate*, pfwindowless : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_windowless.call(this, pfwindowless)
  end
  def set_full_screen(this : IWMPNodeRealEstate*, ffullscreen : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_full_screen.call(this, ffullscreen)
  end
  def get_full_screen(this : IWMPNodeRealEstate*, pffullscreen : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_full_screen.call(this, pffullscreen)
  end
end
struct LibWin32::IWMPNodeRealEstateHost
  def query_interface(this : IWMPNodeRealEstateHost*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPNodeRealEstateHost*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPNodeRealEstateHost*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_desired_size_change(this : IWMPNodeRealEstateHost*, psize : SIZE*) : HRESULT
    @lpVtbl.value.on_desired_size_change.call(this, psize)
  end
  def on_full_screen_transition(this : IWMPNodeRealEstateHost*, ffullscreen : LibC::BOOL) : HRESULT
    @lpVtbl.value.on_full_screen_transition.call(this, ffullscreen)
  end
end
struct LibWin32::IWMPNodeWindowed
  def query_interface(this : IWMPNodeWindowed*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPNodeWindowed*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPNodeWindowed*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_owner_window(this : IWMPNodeWindowed*, hwnd : LibC::IntPtrT) : HRESULT
    @lpVtbl.value.set_owner_window.call(this, hwnd)
  end
  def get_owner_window(this : IWMPNodeWindowed*, phwnd : LibC::IntPtrT*) : HRESULT
    @lpVtbl.value.get_owner_window.call(this, phwnd)
  end
end
struct LibWin32::IWMPNodeWindowedHost
  def query_interface(this : IWMPNodeWindowedHost*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPNodeWindowedHost*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPNodeWindowedHost*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_window_message_from_renderer(this : IWMPNodeWindowedHost*, umsg : UInt32, wparam : LibC::UINT_PTR, lparam : LPARAM, plret : LRESULT*, pfhandled : LibC::BOOL*) : HRESULT
    @lpVtbl.value.on_window_message_from_renderer.call(this, umsg, wparam, lparam, plret, pfhandled)
  end
end
struct LibWin32::IWMPWindowMessageSink
  def query_interface(this : IWMPWindowMessageSink*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPWindowMessageSink*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPWindowMessageSink*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_window_message(this : IWMPWindowMessageSink*, umsg : UInt32, wparam : LibC::UINT_PTR, lparam : LPARAM, plret : LRESULT*, pfhandled : LibC::BOOL*) : HRESULT
    @lpVtbl.value.on_window_message.call(this, umsg, wparam, lparam, plret, pfhandled)
  end
end
struct LibWin32::IWMPNodeWindowless
  def query_interface(this : IWMPNodeWindowless*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPNodeWindowless*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPNodeWindowless*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_window_message(this : IWMPNodeWindowless*, umsg : UInt32, wparam : LibC::UINT_PTR, lparam : LPARAM, plret : LRESULT*, pfhandled : LibC::BOOL*) : HRESULT
    @lpVtbl.value.on_window_message.call(this, umsg, wparam, lparam, plret, pfhandled)
  end
  def on_draw(this : IWMPNodeWindowless*, hdc : LibC::IntPtrT, prcdraw : RECT*) : HRESULT
    @lpVtbl.value.on_draw.call(this, hdc, prcdraw)
  end
end
struct LibWin32::IWMPNodeWindowlessHost
  def query_interface(this : IWMPNodeWindowlessHost*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPNodeWindowlessHost*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPNodeWindowlessHost*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def invalidate_rect(this : IWMPNodeWindowlessHost*, prc : RECT*, ferase : LibC::BOOL) : HRESULT
    @lpVtbl.value.invalidate_rect.call(this, prc, ferase)
  end
end
struct LibWin32::IWMPVideoRenderConfig
  def query_interface(this : IWMPVideoRenderConfig*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPVideoRenderConfig*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPVideoRenderConfig*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def put_presenter_activate(this : IWMPVideoRenderConfig*, pactivate : IMFActivate) : HRESULT
    @lpVtbl.value.put_presenter_activate.call(this, pactivate)
  end
end
struct LibWin32::IWMPAudioRenderConfig
  def query_interface(this : IWMPAudioRenderConfig*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPAudioRenderConfig*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPAudioRenderConfig*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_audio_output_device(this : IWMPAudioRenderConfig*, pbstroutputdevice : UInt8**) : HRESULT
    @lpVtbl.value.get_audio_output_device.call(this, pbstroutputdevice)
  end
  def put_audio_output_device(this : IWMPAudioRenderConfig*, bstroutputdevice : UInt8*) : HRESULT
    @lpVtbl.value.put_audio_output_device.call(this, bstroutputdevice)
  end
end
struct LibWin32::IWMPRenderConfig
  def query_interface(this : IWMPRenderConfig*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPRenderConfig*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPRenderConfig*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def put_in_proc_only(this : IWMPRenderConfig*, finproc : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_in_proc_only.call(this, finproc)
  end
  def get_in_proc_only(this : IWMPRenderConfig*, pfinproc : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_in_proc_only.call(this, pfinproc)
  end
end
struct LibWin32::IWMPServices
  def query_interface(this : IWMPServices*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPServices*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPServices*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_stream_time(this : IWMPServices*, prt : Int64*) : HRESULT
    @lpVtbl.value.get_stream_time.call(this, prt)
  end
  def get_stream_state(this : IWMPServices*, pstate : WMPServices_StreamState*) : HRESULT
    @lpVtbl.value.get_stream_state.call(this, pstate)
  end
end
struct LibWin32::IWMPMediaPluginRegistrar
  def query_interface(this : IWMPMediaPluginRegistrar*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPMediaPluginRegistrar*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPMediaPluginRegistrar*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def wmp_register_player_plugin(this : IWMPMediaPluginRegistrar*, pwszfriendlyname : LibC::LPWSTR, pwszdescription : LibC::LPWSTR, pwszuninstallstring : LibC::LPWSTR, dwpriority : UInt32, guidplugintype : Guid, clsid : Guid, cmediatypes : UInt32, pmediatypes : Void*) : HRESULT
    @lpVtbl.value.wmp_register_player_plugin.call(this, pwszfriendlyname, pwszdescription, pwszuninstallstring, dwpriority, guidplugintype, clsid, cmediatypes, pmediatypes)
  end
  def wmp_un_register_player_plugin(this : IWMPMediaPluginRegistrar*, guidplugintype : Guid, clsid : Guid) : HRESULT
    @lpVtbl.value.wmp_un_register_player_plugin.call(this, guidplugintype, clsid)
  end
end
struct LibWin32::IWMPPlugin
  def query_interface(this : IWMPPlugin*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPPlugin*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPPlugin*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def init(this : IWMPPlugin*, dwplaybackcontext : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.init.call(this, dwplaybackcontext)
  end
  def shutdown(this : IWMPPlugin*) : HRESULT
    @lpVtbl.value.shutdown.call(this)
  end
  def get_id(this : IWMPPlugin*, pguid : Guid*) : HRESULT
    @lpVtbl.value.get_id.call(this, pguid)
  end
  def get_caps(this : IWMPPlugin*, pdwflags : UInt32*) : HRESULT
    @lpVtbl.value.get_caps.call(this, pdwflags)
  end
  def advise_wmp_services(this : IWMPPlugin*, pwmpservices : IWMPServices) : HRESULT
    @lpVtbl.value.advise_wmp_services.call(this, pwmpservices)
  end
  def un_advise_wmp_services(this : IWMPPlugin*) : HRESULT
    @lpVtbl.value.un_advise_wmp_services.call(this)
  end
end
struct LibWin32::IWMPPluginEnable
  def query_interface(this : IWMPPluginEnable*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPPluginEnable*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPPluginEnable*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_enable(this : IWMPPluginEnable*, fenable : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_enable.call(this, fenable)
  end
  def get_enable(this : IWMPPluginEnable*, pfenable : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_enable.call(this, pfenable)
  end
end
struct LibWin32::IWMPGraphCreation
  def query_interface(this : IWMPGraphCreation*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPGraphCreation*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPGraphCreation*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def graph_creation_pre_render(this : IWMPGraphCreation*, pfiltergraph : IUnknown, preserved : IUnknown) : HRESULT
    @lpVtbl.value.graph_creation_pre_render.call(this, pfiltergraph, preserved)
  end
  def graph_creation_post_render(this : IWMPGraphCreation*, pfiltergraph : IUnknown) : HRESULT
    @lpVtbl.value.graph_creation_post_render.call(this, pfiltergraph)
  end
  def get_graph_creation_flags(this : IWMPGraphCreation*, pdwflags : UInt32*) : HRESULT
    @lpVtbl.value.get_graph_creation_flags.call(this, pdwflags)
  end
end
struct LibWin32::IWMPConvert
  def query_interface(this : IWMPConvert*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPConvert*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPConvert*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def convert_file(this : IWMPConvert*, bstrinputfile : UInt8*, bstrdestinationfolder : UInt8*, pbstroutputfile : UInt8**) : HRESULT
    @lpVtbl.value.convert_file.call(this, bstrinputfile, bstrdestinationfolder, pbstroutputfile)
  end
  def get_error_url(this : IWMPConvert*, pbstrurl : UInt8**) : HRESULT
    @lpVtbl.value.get_error_url.call(this, pbstrurl)
  end
end
struct LibWin32::IWMPTranscodePolicy
  def query_interface(this : IWMPTranscodePolicy*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPTranscodePolicy*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPTranscodePolicy*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def allow_transcode(this : IWMPTranscodePolicy*, pvballow : Int16*) : HRESULT
    @lpVtbl.value.allow_transcode.call(this, pvballow)
  end
end
struct LibWin32::IWMPUserEventSink
  def query_interface(this : IWMPUserEventSink*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPUserEventSink*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPUserEventSink*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def notify_user_event(this : IWMPUserEventSink*, eventcode : Int32) : HRESULT
    @lpVtbl.value.notify_user_event.call(this, eventcode)
  end
end
struct LibWin32::IXFeedsManager
  def query_interface(this : IXFeedsManager*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IXFeedsManager*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IXFeedsManager*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def root_folder(this : IXFeedsManager*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.root_folder.call(this, riid, ppv)
  end
  def is_subscribed(this : IXFeedsManager*, pszurl : LibC::LPWSTR, pbsubscribed : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_subscribed.call(this, pszurl, pbsubscribed)
  end
  def exists_feed(this : IXFeedsManager*, pszpath : LibC::LPWSTR, pbfeedexists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.exists_feed.call(this, pszpath, pbfeedexists)
  end
  def get_feed(this : IXFeedsManager*, pszpath : LibC::LPWSTR, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_feed.call(this, pszpath, riid, ppv)
  end
  def get_feed_by_url(this : IXFeedsManager*, pszurl : LibC::LPWSTR, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_feed_by_url.call(this, pszurl, riid, ppv)
  end
  def exists_folder(this : IXFeedsManager*, pszpath : LibC::LPWSTR, pbfolderexists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.exists_folder.call(this, pszpath, pbfolderexists)
  end
  def get_folder(this : IXFeedsManager*, pszpath : LibC::LPWSTR, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_folder.call(this, pszpath, riid, ppv)
  end
  def delete_feed(this : IXFeedsManager*, pszpath : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.delete_feed.call(this, pszpath)
  end
  def delete_folder(this : IXFeedsManager*, pszpath : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.delete_folder.call(this, pszpath)
  end
  def background_sync(this : IXFeedsManager*, fbsa : FEEDS_BACKGROUNDSYNC_ACTION) : HRESULT
    @lpVtbl.value.background_sync.call(this, fbsa)
  end
  def background_sync_status(this : IXFeedsManager*, pfbss : FEEDS_BACKGROUNDSYNC_STATUS*) : HRESULT
    @lpVtbl.value.background_sync_status.call(this, pfbss)
  end
  def default_interval(this : IXFeedsManager*, puiinterval : UInt32*) : HRESULT
    @lpVtbl.value.default_interval.call(this, puiinterval)
  end
  def set_default_interval(this : IXFeedsManager*, uiinterval : UInt32) : HRESULT
    @lpVtbl.value.set_default_interval.call(this, uiinterval)
  end
  def async_sync_all(this : IXFeedsManager*) : HRESULT
    @lpVtbl.value.async_sync_all.call(this)
  end
  def normalize(this : IXFeedsManager*, pstreamin : IStream, ppstreamout : IStream*) : HRESULT
    @lpVtbl.value.normalize.call(this, pstreamin, ppstreamout)
  end
  def item_count_limit(this : IXFeedsManager*, puiitemcountlimit : UInt32*) : HRESULT
    @lpVtbl.value.item_count_limit.call(this, puiitemcountlimit)
  end
end
struct LibWin32::IXFeedsEnum
  def query_interface(this : IXFeedsEnum*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IXFeedsEnum*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IXFeedsEnum*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def count(this : IXFeedsEnum*, puicount : UInt32*) : HRESULT
    @lpVtbl.value.count.call(this, puicount)
  end
  def item(this : IXFeedsEnum*, uiindex : UInt32, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.item.call(this, uiindex, riid, ppv)
  end
end
struct LibWin32::IXFeedFolder
  def query_interface(this : IXFeedFolder*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IXFeedFolder*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IXFeedFolder*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def feeds(this : IXFeedFolder*, ppfe : IXFeedsEnum*) : HRESULT
    @lpVtbl.value.feeds.call(this, ppfe)
  end
  def subfolders(this : IXFeedFolder*, ppfe : IXFeedsEnum*) : HRESULT
    @lpVtbl.value.subfolders.call(this, ppfe)
  end
  def create_feed(this : IXFeedFolder*, pszname : LibC::LPWSTR, pszurl : LibC::LPWSTR, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.create_feed.call(this, pszname, pszurl, riid, ppv)
  end
  def create_subfolder(this : IXFeedFolder*, pszname : LibC::LPWSTR, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.create_subfolder.call(this, pszname, riid, ppv)
  end
  def exists_feed(this : IXFeedFolder*, pszname : LibC::LPWSTR, pbfeedexists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.exists_feed.call(this, pszname, pbfeedexists)
  end
  def exists_subfolder(this : IXFeedFolder*, pszname : LibC::LPWSTR, pbsubfolderexists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.exists_subfolder.call(this, pszname, pbsubfolderexists)
  end
  def get_feed(this : IXFeedFolder*, pszname : LibC::LPWSTR, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_feed.call(this, pszname, riid, ppv)
  end
  def get_subfolder(this : IXFeedFolder*, pszname : LibC::LPWSTR, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_subfolder.call(this, pszname, riid, ppv)
  end
  def delete(this : IXFeedFolder*) : HRESULT
    @lpVtbl.value.delete.call(this)
  end
  def name(this : IXFeedFolder*, ppszname : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.name.call(this, ppszname)
  end
  def rename(this : IXFeedFolder*, pszname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.rename.call(this, pszname)
  end
  def path(this : IXFeedFolder*, ppszpath : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.path.call(this, ppszpath)
  end
  def move(this : IXFeedFolder*, pszpath : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.move.call(this, pszpath)
  end
  def parent(this : IXFeedFolder*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.parent.call(this, riid, ppv)
  end
  def is_root(this : IXFeedFolder*, pbisrootfeedfolder : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_root.call(this, pbisrootfeedfolder)
  end
  def get_watcher(this : IXFeedFolder*, scope : FEEDS_EVENTS_SCOPE, mask : FEEDS_EVENTS_MASK, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_watcher.call(this, scope, mask, riid, ppv)
  end
  def total_unread_item_count(this : IXFeedFolder*, puitotalunreaditemcount : UInt32*) : HRESULT
    @lpVtbl.value.total_unread_item_count.call(this, puitotalunreaditemcount)
  end
  def total_item_count(this : IXFeedFolder*, puitotalitemcount : UInt32*) : HRESULT
    @lpVtbl.value.total_item_count.call(this, puitotalitemcount)
  end
end
struct LibWin32::IXFeedFolderEvents
  def query_interface(this : IXFeedFolderEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IXFeedFolderEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IXFeedFolderEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def error(this : IXFeedFolderEvents*) : HRESULT
    @lpVtbl.value.error.call(this)
  end
  def folder_added(this : IXFeedFolderEvents*, pszpath : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.folder_added.call(this, pszpath)
  end
  def folder_deleted(this : IXFeedFolderEvents*, pszpath : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.folder_deleted.call(this, pszpath)
  end
  def folder_renamed(this : IXFeedFolderEvents*, pszpath : LibC::LPWSTR, pszoldpath : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.folder_renamed.call(this, pszpath, pszoldpath)
  end
  def folder_moved_from(this : IXFeedFolderEvents*, pszpath : LibC::LPWSTR, pszoldpath : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.folder_moved_from.call(this, pszpath, pszoldpath)
  end
  def folder_moved_to(this : IXFeedFolderEvents*, pszpath : LibC::LPWSTR, pszoldpath : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.folder_moved_to.call(this, pszpath, pszoldpath)
  end
  def folder_item_count_changed(this : IXFeedFolderEvents*, pszpath : LibC::LPWSTR, feicfflags : Int32) : HRESULT
    @lpVtbl.value.folder_item_count_changed.call(this, pszpath, feicfflags)
  end
  def feed_added(this : IXFeedFolderEvents*, pszpath : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.feed_added.call(this, pszpath)
  end
  def feed_deleted(this : IXFeedFolderEvents*, pszpath : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.feed_deleted.call(this, pszpath)
  end
  def feed_renamed(this : IXFeedFolderEvents*, pszpath : LibC::LPWSTR, pszoldpath : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.feed_renamed.call(this, pszpath, pszoldpath)
  end
  def feed_url_changed(this : IXFeedFolderEvents*, pszpath : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.feed_url_changed.call(this, pszpath)
  end
  def feed_moved_from(this : IXFeedFolderEvents*, pszpath : LibC::LPWSTR, pszoldpath : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.feed_moved_from.call(this, pszpath, pszoldpath)
  end
  def feed_moved_to(this : IXFeedFolderEvents*, pszpath : LibC::LPWSTR, pszoldpath : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.feed_moved_to.call(this, pszpath, pszoldpath)
  end
  def feed_downloading(this : IXFeedFolderEvents*, pszpath : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.feed_downloading.call(this, pszpath)
  end
  def feed_download_completed(this : IXFeedFolderEvents*, pszpath : LibC::LPWSTR, fde : FEEDS_DOWNLOAD_ERROR) : HRESULT
    @lpVtbl.value.feed_download_completed.call(this, pszpath, fde)
  end
  def feed_item_count_changed(this : IXFeedFolderEvents*, pszpath : LibC::LPWSTR, feicfflags : Int32) : HRESULT
    @lpVtbl.value.feed_item_count_changed.call(this, pszpath, feicfflags)
  end
end
struct LibWin32::IXFeed
  def query_interface(this : IXFeed*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IXFeed*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IXFeed*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def xml(this : IXFeed*, uiitemcount : UInt32, sortproperty : FEEDS_XML_SORT_PROPERTY, sortorder : FEEDS_XML_SORT_ORDER, filterflags : FEEDS_XML_FILTER_FLAGS, includeflags : FEEDS_XML_INCLUDE_FLAGS, pps : IStream*) : HRESULT
    @lpVtbl.value.xml.call(this, uiitemcount, sortproperty, sortorder, filterflags, includeflags, pps)
  end
  def name(this : IXFeed*, ppszname : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.name.call(this, ppszname)
  end
  def rename(this : IXFeed*, pszname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.rename.call(this, pszname)
  end
  def url(this : IXFeed*, ppszurl : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.url.call(this, ppszurl)
  end
  def set_url(this : IXFeed*, pszurl : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_url.call(this, pszurl)
  end
  def local_id(this : IXFeed*, pguid : Guid*) : HRESULT
    @lpVtbl.value.local_id.call(this, pguid)
  end
  def path(this : IXFeed*, ppszpath : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.path.call(this, ppszpath)
  end
  def move(this : IXFeed*, pszpath : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.move.call(this, pszpath)
  end
  def parent(this : IXFeed*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.parent.call(this, riid, ppv)
  end
  def last_write_time(this : IXFeed*, pstlastwritetime : SYSTEMTIME*) : HRESULT
    @lpVtbl.value.last_write_time.call(this, pstlastwritetime)
  end
  def delete(this : IXFeed*) : HRESULT
    @lpVtbl.value.delete.call(this)
  end
  def download(this : IXFeed*) : HRESULT
    @lpVtbl.value.download.call(this)
  end
  def async_download(this : IXFeed*) : HRESULT
    @lpVtbl.value.async_download.call(this)
  end
  def cancel_async_download(this : IXFeed*) : HRESULT
    @lpVtbl.value.cancel_async_download.call(this)
  end
  def sync_setting(this : IXFeed*, pfss : FEEDS_SYNC_SETTING*) : HRESULT
    @lpVtbl.value.sync_setting.call(this, pfss)
  end
  def set_sync_setting(this : IXFeed*, fss : FEEDS_SYNC_SETTING) : HRESULT
    @lpVtbl.value.set_sync_setting.call(this, fss)
  end
  def interval(this : IXFeed*, puiinterval : UInt32*) : HRESULT
    @lpVtbl.value.interval.call(this, puiinterval)
  end
  def set_interval(this : IXFeed*, uiinterval : UInt32) : HRESULT
    @lpVtbl.value.set_interval.call(this, uiinterval)
  end
  def last_download_time(this : IXFeed*, pstlastdownloadtime : SYSTEMTIME*) : HRESULT
    @lpVtbl.value.last_download_time.call(this, pstlastdownloadtime)
  end
  def local_enclosure_path(this : IXFeed*, ppszpath : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.local_enclosure_path.call(this, ppszpath)
  end
  def items(this : IXFeed*, ppfe : IXFeedsEnum*) : HRESULT
    @lpVtbl.value.items.call(this, ppfe)
  end
  def get_item(this : IXFeed*, uiid : UInt32, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_item.call(this, uiid, riid, ppv)
  end
  def mark_all_items_read(this : IXFeed*) : HRESULT
    @lpVtbl.value.mark_all_items_read.call(this)
  end
  def max_item_count(this : IXFeed*, puimaxitemcount : UInt32*) : HRESULT
    @lpVtbl.value.max_item_count.call(this, puimaxitemcount)
  end
  def set_max_item_count(this : IXFeed*, uimaxitemcount : UInt32) : HRESULT
    @lpVtbl.value.set_max_item_count.call(this, uimaxitemcount)
  end
  def download_enclosures_automatically(this : IXFeed*, pbdownloadenclosuresautomatically : LibC::BOOL*) : HRESULT
    @lpVtbl.value.download_enclosures_automatically.call(this, pbdownloadenclosuresautomatically)
  end
  def set_download_enclosures_automatically(this : IXFeed*, bdownloadenclosuresautomatically : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_download_enclosures_automatically.call(this, bdownloadenclosuresautomatically)
  end
  def download_status(this : IXFeed*, pfds : FEEDS_DOWNLOAD_STATUS*) : HRESULT
    @lpVtbl.value.download_status.call(this, pfds)
  end
  def last_download_error(this : IXFeed*, pfde : FEEDS_DOWNLOAD_ERROR*) : HRESULT
    @lpVtbl.value.last_download_error.call(this, pfde)
  end
  def merge(this : IXFeed*, pstream : IStream, pszurl : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.merge.call(this, pstream, pszurl)
  end
  def download_url(this : IXFeed*, ppszurl : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.download_url.call(this, ppszurl)
  end
  def title(this : IXFeed*, ppsztitle : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.title.call(this, ppsztitle)
  end
  def description(this : IXFeed*, ppszdescription : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.description.call(this, ppszdescription)
  end
  def link(this : IXFeed*, ppszhomepage : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.link.call(this, ppszhomepage)
  end
  def image(this : IXFeed*, ppszimageurl : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.image.call(this, ppszimageurl)
  end
  def last_build_date(this : IXFeed*, pstlastbuilddate : SYSTEMTIME*) : HRESULT
    @lpVtbl.value.last_build_date.call(this, pstlastbuilddate)
  end
  def pub_date(this : IXFeed*, pstpubdate : SYSTEMTIME*) : HRESULT
    @lpVtbl.value.pub_date.call(this, pstpubdate)
  end
  def ttl(this : IXFeed*, puittl : UInt32*) : HRESULT
    @lpVtbl.value.ttl.call(this, puittl)
  end
  def language(this : IXFeed*, ppszlanguage : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.language.call(this, ppszlanguage)
  end
  def copyright(this : IXFeed*, ppszcopyright : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.copyright.call(this, ppszcopyright)
  end
  def is_list(this : IXFeed*, pbislist : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_list.call(this, pbislist)
  end
  def get_watcher(this : IXFeed*, scope : FEEDS_EVENTS_SCOPE, mask : FEEDS_EVENTS_MASK, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_watcher.call(this, scope, mask, riid, ppv)
  end
  def unread_item_count(this : IXFeed*, puiunreaditemcount : UInt32*) : HRESULT
    @lpVtbl.value.unread_item_count.call(this, puiunreaditemcount)
  end
  def item_count(this : IXFeed*, puiitemcount : UInt32*) : HRESULT
    @lpVtbl.value.item_count.call(this, puiitemcount)
  end
end
struct LibWin32::IXFeed2
  def query_interface(this : IXFeed2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IXFeed2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IXFeed2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def xml(this : IXFeed2*, uiitemcount : UInt32, sortproperty : FEEDS_XML_SORT_PROPERTY, sortorder : FEEDS_XML_SORT_ORDER, filterflags : FEEDS_XML_FILTER_FLAGS, includeflags : FEEDS_XML_INCLUDE_FLAGS, pps : IStream*) : HRESULT
    @lpVtbl.value.xml.call(this, uiitemcount, sortproperty, sortorder, filterflags, includeflags, pps)
  end
  def name(this : IXFeed2*, ppszname : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.name.call(this, ppszname)
  end
  def rename(this : IXFeed2*, pszname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.rename.call(this, pszname)
  end
  def url(this : IXFeed2*, ppszurl : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.url.call(this, ppszurl)
  end
  def set_url(this : IXFeed2*, pszurl : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_url.call(this, pszurl)
  end
  def local_id(this : IXFeed2*, pguid : Guid*) : HRESULT
    @lpVtbl.value.local_id.call(this, pguid)
  end
  def path(this : IXFeed2*, ppszpath : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.path.call(this, ppszpath)
  end
  def move(this : IXFeed2*, pszpath : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.move.call(this, pszpath)
  end
  def parent(this : IXFeed2*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.parent.call(this, riid, ppv)
  end
  def last_write_time(this : IXFeed2*, pstlastwritetime : SYSTEMTIME*) : HRESULT
    @lpVtbl.value.last_write_time.call(this, pstlastwritetime)
  end
  def delete(this : IXFeed2*) : HRESULT
    @lpVtbl.value.delete.call(this)
  end
  def download(this : IXFeed2*) : HRESULT
    @lpVtbl.value.download.call(this)
  end
  def async_download(this : IXFeed2*) : HRESULT
    @lpVtbl.value.async_download.call(this)
  end
  def cancel_async_download(this : IXFeed2*) : HRESULT
    @lpVtbl.value.cancel_async_download.call(this)
  end
  def sync_setting(this : IXFeed2*, pfss : FEEDS_SYNC_SETTING*) : HRESULT
    @lpVtbl.value.sync_setting.call(this, pfss)
  end
  def set_sync_setting(this : IXFeed2*, fss : FEEDS_SYNC_SETTING) : HRESULT
    @lpVtbl.value.set_sync_setting.call(this, fss)
  end
  def interval(this : IXFeed2*, puiinterval : UInt32*) : HRESULT
    @lpVtbl.value.interval.call(this, puiinterval)
  end
  def set_interval(this : IXFeed2*, uiinterval : UInt32) : HRESULT
    @lpVtbl.value.set_interval.call(this, uiinterval)
  end
  def last_download_time(this : IXFeed2*, pstlastdownloadtime : SYSTEMTIME*) : HRESULT
    @lpVtbl.value.last_download_time.call(this, pstlastdownloadtime)
  end
  def local_enclosure_path(this : IXFeed2*, ppszpath : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.local_enclosure_path.call(this, ppszpath)
  end
  def items(this : IXFeed2*, ppfe : IXFeedsEnum*) : HRESULT
    @lpVtbl.value.items.call(this, ppfe)
  end
  def get_item(this : IXFeed2*, uiid : UInt32, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_item.call(this, uiid, riid, ppv)
  end
  def mark_all_items_read(this : IXFeed2*) : HRESULT
    @lpVtbl.value.mark_all_items_read.call(this)
  end
  def max_item_count(this : IXFeed2*, puimaxitemcount : UInt32*) : HRESULT
    @lpVtbl.value.max_item_count.call(this, puimaxitemcount)
  end
  def set_max_item_count(this : IXFeed2*, uimaxitemcount : UInt32) : HRESULT
    @lpVtbl.value.set_max_item_count.call(this, uimaxitemcount)
  end
  def download_enclosures_automatically(this : IXFeed2*, pbdownloadenclosuresautomatically : LibC::BOOL*) : HRESULT
    @lpVtbl.value.download_enclosures_automatically.call(this, pbdownloadenclosuresautomatically)
  end
  def set_download_enclosures_automatically(this : IXFeed2*, bdownloadenclosuresautomatically : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_download_enclosures_automatically.call(this, bdownloadenclosuresautomatically)
  end
  def download_status(this : IXFeed2*, pfds : FEEDS_DOWNLOAD_STATUS*) : HRESULT
    @lpVtbl.value.download_status.call(this, pfds)
  end
  def last_download_error(this : IXFeed2*, pfde : FEEDS_DOWNLOAD_ERROR*) : HRESULT
    @lpVtbl.value.last_download_error.call(this, pfde)
  end
  def merge(this : IXFeed2*, pstream : IStream, pszurl : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.merge.call(this, pstream, pszurl)
  end
  def download_url(this : IXFeed2*, ppszurl : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.download_url.call(this, ppszurl)
  end
  def title(this : IXFeed2*, ppsztitle : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.title.call(this, ppsztitle)
  end
  def description(this : IXFeed2*, ppszdescription : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.description.call(this, ppszdescription)
  end
  def link(this : IXFeed2*, ppszhomepage : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.link.call(this, ppszhomepage)
  end
  def image(this : IXFeed2*, ppszimageurl : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.image.call(this, ppszimageurl)
  end
  def last_build_date(this : IXFeed2*, pstlastbuilddate : SYSTEMTIME*) : HRESULT
    @lpVtbl.value.last_build_date.call(this, pstlastbuilddate)
  end
  def pub_date(this : IXFeed2*, pstpubdate : SYSTEMTIME*) : HRESULT
    @lpVtbl.value.pub_date.call(this, pstpubdate)
  end
  def ttl(this : IXFeed2*, puittl : UInt32*) : HRESULT
    @lpVtbl.value.ttl.call(this, puittl)
  end
  def language(this : IXFeed2*, ppszlanguage : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.language.call(this, ppszlanguage)
  end
  def copyright(this : IXFeed2*, ppszcopyright : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.copyright.call(this, ppszcopyright)
  end
  def is_list(this : IXFeed2*, pbislist : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_list.call(this, pbislist)
  end
  def get_watcher(this : IXFeed2*, scope : FEEDS_EVENTS_SCOPE, mask : FEEDS_EVENTS_MASK, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_watcher.call(this, scope, mask, riid, ppv)
  end
  def unread_item_count(this : IXFeed2*, puiunreaditemcount : UInt32*) : HRESULT
    @lpVtbl.value.unread_item_count.call(this, puiunreaditemcount)
  end
  def item_count(this : IXFeed2*, puiitemcount : UInt32*) : HRESULT
    @lpVtbl.value.item_count.call(this, puiitemcount)
  end
  def get_item_by_effective_id(this : IXFeed2*, uieffectiveid : UInt32, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_item_by_effective_id.call(this, uieffectiveid, riid, ppv)
  end
  def last_item_download_time(this : IXFeed2*, pstlastitemdownloadtime : SYSTEMTIME*) : HRESULT
    @lpVtbl.value.last_item_download_time.call(this, pstlastitemdownloadtime)
  end
  def username(this : IXFeed2*, ppszusername : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.username.call(this, ppszusername)
  end
  def password(this : IXFeed2*, ppszpassword : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.password.call(this, ppszpassword)
  end
  def set_credentials(this : IXFeed2*, pszusername : LibC::LPWSTR, pszpassword : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_credentials.call(this, pszusername, pszpassword)
  end
  def clear_credentials(this : IXFeed2*) : HRESULT
    @lpVtbl.value.clear_credentials.call(this)
  end
end
struct LibWin32::IXFeedEvents
  def query_interface(this : IXFeedEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IXFeedEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IXFeedEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def error(this : IXFeedEvents*) : HRESULT
    @lpVtbl.value.error.call(this)
  end
  def feed_deleted(this : IXFeedEvents*, pszpath : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.feed_deleted.call(this, pszpath)
  end
  def feed_renamed(this : IXFeedEvents*, pszpath : LibC::LPWSTR, pszoldpath : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.feed_renamed.call(this, pszpath, pszoldpath)
  end
  def feed_url_changed(this : IXFeedEvents*, pszpath : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.feed_url_changed.call(this, pszpath)
  end
  def feed_moved(this : IXFeedEvents*, pszpath : LibC::LPWSTR, pszoldpath : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.feed_moved.call(this, pszpath, pszoldpath)
  end
  def feed_downloading(this : IXFeedEvents*, pszpath : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.feed_downloading.call(this, pszpath)
  end
  def feed_download_completed(this : IXFeedEvents*, pszpath : LibC::LPWSTR, fde : FEEDS_DOWNLOAD_ERROR) : HRESULT
    @lpVtbl.value.feed_download_completed.call(this, pszpath, fde)
  end
  def feed_item_count_changed(this : IXFeedEvents*, pszpath : LibC::LPWSTR, feicfflags : Int32) : HRESULT
    @lpVtbl.value.feed_item_count_changed.call(this, pszpath, feicfflags)
  end
end
struct LibWin32::IXFeedItem
  def query_interface(this : IXFeedItem*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IXFeedItem*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IXFeedItem*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def xml(this : IXFeedItem*, fxif : FEEDS_XML_INCLUDE_FLAGS, pps : IStream*) : HRESULT
    @lpVtbl.value.xml.call(this, fxif, pps)
  end
  def title(this : IXFeedItem*, ppsztitle : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.title.call(this, ppsztitle)
  end
  def link(this : IXFeedItem*, ppszurl : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.link.call(this, ppszurl)
  end
  def guid(this : IXFeedItem*, ppszguid : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.guid.call(this, ppszguid)
  end
  def description(this : IXFeedItem*, ppszdescription : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.description.call(this, ppszdescription)
  end
  def pub_date(this : IXFeedItem*, pstpubdate : SYSTEMTIME*) : HRESULT
    @lpVtbl.value.pub_date.call(this, pstpubdate)
  end
  def comments(this : IXFeedItem*, ppszurl : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.comments.call(this, ppszurl)
  end
  def author(this : IXFeedItem*, ppszauthor : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.author.call(this, ppszauthor)
  end
  def enclosure(this : IXFeedItem*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.enclosure.call(this, riid, ppv)
  end
  def is_read(this : IXFeedItem*, pbisread : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_read.call(this, pbisread)
  end
  def set_is_read(this : IXFeedItem*, bisread : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_is_read.call(this, bisread)
  end
  def local_id(this : IXFeedItem*, puiid : UInt32*) : HRESULT
    @lpVtbl.value.local_id.call(this, puiid)
  end
  def parent(this : IXFeedItem*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.parent.call(this, riid, ppv)
  end
  def delete(this : IXFeedItem*) : HRESULT
    @lpVtbl.value.delete.call(this)
  end
  def download_url(this : IXFeedItem*, ppszurl : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.download_url.call(this, ppszurl)
  end
  def last_download_time(this : IXFeedItem*, pstlastdownloadtime : SYSTEMTIME*) : HRESULT
    @lpVtbl.value.last_download_time.call(this, pstlastdownloadtime)
  end
  def modified(this : IXFeedItem*, pstmodifiedtime : SYSTEMTIME*) : HRESULT
    @lpVtbl.value.modified.call(this, pstmodifiedtime)
  end
end
struct LibWin32::IXFeedItem2
  def query_interface(this : IXFeedItem2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IXFeedItem2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IXFeedItem2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def xml(this : IXFeedItem2*, fxif : FEEDS_XML_INCLUDE_FLAGS, pps : IStream*) : HRESULT
    @lpVtbl.value.xml.call(this, fxif, pps)
  end
  def title(this : IXFeedItem2*, ppsztitle : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.title.call(this, ppsztitle)
  end
  def link(this : IXFeedItem2*, ppszurl : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.link.call(this, ppszurl)
  end
  def guid(this : IXFeedItem2*, ppszguid : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.guid.call(this, ppszguid)
  end
  def description(this : IXFeedItem2*, ppszdescription : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.description.call(this, ppszdescription)
  end
  def pub_date(this : IXFeedItem2*, pstpubdate : SYSTEMTIME*) : HRESULT
    @lpVtbl.value.pub_date.call(this, pstpubdate)
  end
  def comments(this : IXFeedItem2*, ppszurl : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.comments.call(this, ppszurl)
  end
  def author(this : IXFeedItem2*, ppszauthor : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.author.call(this, ppszauthor)
  end
  def enclosure(this : IXFeedItem2*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.enclosure.call(this, riid, ppv)
  end
  def is_read(this : IXFeedItem2*, pbisread : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_read.call(this, pbisread)
  end
  def set_is_read(this : IXFeedItem2*, bisread : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_is_read.call(this, bisread)
  end
  def local_id(this : IXFeedItem2*, puiid : UInt32*) : HRESULT
    @lpVtbl.value.local_id.call(this, puiid)
  end
  def parent(this : IXFeedItem2*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.parent.call(this, riid, ppv)
  end
  def delete(this : IXFeedItem2*) : HRESULT
    @lpVtbl.value.delete.call(this)
  end
  def download_url(this : IXFeedItem2*, ppszurl : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.download_url.call(this, ppszurl)
  end
  def last_download_time(this : IXFeedItem2*, pstlastdownloadtime : SYSTEMTIME*) : HRESULT
    @lpVtbl.value.last_download_time.call(this, pstlastdownloadtime)
  end
  def modified(this : IXFeedItem2*, pstmodifiedtime : SYSTEMTIME*) : HRESULT
    @lpVtbl.value.modified.call(this, pstmodifiedtime)
  end
  def effective_id(this : IXFeedItem2*, puieffectiveid : UInt32*) : HRESULT
    @lpVtbl.value.effective_id.call(this, puieffectiveid)
  end
end
struct LibWin32::IXFeedEnclosure
  def query_interface(this : IXFeedEnclosure*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IXFeedEnclosure*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IXFeedEnclosure*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def url(this : IXFeedEnclosure*, ppszurl : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.url.call(this, ppszurl)
  end
  def type(this : IXFeedEnclosure*, ppszmimetype : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.type.call(this, ppszmimetype)
  end
  def length(this : IXFeedEnclosure*, puilength : UInt32*) : HRESULT
    @lpVtbl.value.length.call(this, puilength)
  end
  def async_download(this : IXFeedEnclosure*) : HRESULT
    @lpVtbl.value.async_download.call(this)
  end
  def cancel_async_download(this : IXFeedEnclosure*) : HRESULT
    @lpVtbl.value.cancel_async_download.call(this)
  end
  def download_status(this : IXFeedEnclosure*, pfds : FEEDS_DOWNLOAD_STATUS*) : HRESULT
    @lpVtbl.value.download_status.call(this, pfds)
  end
  def last_download_error(this : IXFeedEnclosure*, pfde : FEEDS_DOWNLOAD_ERROR*) : HRESULT
    @lpVtbl.value.last_download_error.call(this, pfde)
  end
  def local_path(this : IXFeedEnclosure*, ppszpath : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.local_path.call(this, ppszpath)
  end
  def parent(this : IXFeedEnclosure*, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.parent.call(this, riid, ppv)
  end
  def download_url(this : IXFeedEnclosure*, ppszurl : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.download_url.call(this, ppszurl)
  end
  def download_mime_type(this : IXFeedEnclosure*, ppszmimetype : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.download_mime_type.call(this, ppszmimetype)
  end
  def remove_file(this : IXFeedEnclosure*) : HRESULT
    @lpVtbl.value.remove_file.call(this)
  end
  def set_file(this : IXFeedEnclosure*, pszdownloadurl : LibC::LPWSTR, pszdownloadfilepath : LibC::LPWSTR, pszdownloadmimetype : LibC::LPWSTR, pszenclosurefilename : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_file.call(this, pszdownloadurl, pszdownloadfilepath, pszdownloadmimetype, pszenclosurefilename)
  end
end
struct LibWin32::IFeedsManager
  def query_interface(this : IFeedsManager*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IFeedsManager*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IFeedsManager*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IFeedsManager*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IFeedsManager*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IFeedsManager*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IFeedsManager*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_root_folder(this : IFeedsManager*, disp : IDispatch*) : HRESULT
    @lpVtbl.value.get_root_folder.call(this, disp)
  end
  def is_subscribed(this : IFeedsManager*, feedurl : UInt8*, subscribed : Int16*) : HRESULT
    @lpVtbl.value.is_subscribed.call(this, feedurl, subscribed)
  end
  def exists_feed(this : IFeedsManager*, feedpath : UInt8*, exists : Int16*) : HRESULT
    @lpVtbl.value.exists_feed.call(this, feedpath, exists)
  end
  def get_feed(this : IFeedsManager*, feedpath : UInt8*, disp : IDispatch*) : HRESULT
    @lpVtbl.value.get_feed.call(this, feedpath, disp)
  end
  def get_feed_by_url(this : IFeedsManager*, feedurl : UInt8*, disp : IDispatch*) : HRESULT
    @lpVtbl.value.get_feed_by_url.call(this, feedurl, disp)
  end
  def exists_folder(this : IFeedsManager*, folderpath : UInt8*, exists : Int16*) : HRESULT
    @lpVtbl.value.exists_folder.call(this, folderpath, exists)
  end
  def get_folder(this : IFeedsManager*, folderpath : UInt8*, disp : IDispatch*) : HRESULT
    @lpVtbl.value.get_folder.call(this, folderpath, disp)
  end
  def delete_feed(this : IFeedsManager*, feedpath : UInt8*) : HRESULT
    @lpVtbl.value.delete_feed.call(this, feedpath)
  end
  def delete_folder(this : IFeedsManager*, folderpath : UInt8*) : HRESULT
    @lpVtbl.value.delete_folder.call(this, folderpath)
  end
  def background_sync(this : IFeedsManager*, action : FEEDS_BACKGROUNDSYNC_ACTION) : HRESULT
    @lpVtbl.value.background_sync.call(this, action)
  end
  def get_background_sync_status(this : IFeedsManager*, status : FEEDS_BACKGROUNDSYNC_STATUS*) : HRESULT
    @lpVtbl.value.get_background_sync_status.call(this, status)
  end
  def get_default_interval(this : IFeedsManager*, minutes : Int32*) : HRESULT
    @lpVtbl.value.get_default_interval.call(this, minutes)
  end
  def put_default_interval(this : IFeedsManager*, minutes : Int32) : HRESULT
    @lpVtbl.value.put_default_interval.call(this, minutes)
  end
  def async_sync_all(this : IFeedsManager*) : HRESULT
    @lpVtbl.value.async_sync_all.call(this)
  end
  def normalize(this : IFeedsManager*, feedxmlin : UInt8*, feedxmlout : UInt8**) : HRESULT
    @lpVtbl.value.normalize.call(this, feedxmlin, feedxmlout)
  end
  def get_item_count_limit(this : IFeedsManager*, itemcountlimit : Int32*) : HRESULT
    @lpVtbl.value.get_item_count_limit.call(this, itemcountlimit)
  end
end
struct LibWin32::IFeedsEnum
  def query_interface(this : IFeedsEnum*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IFeedsEnum*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IFeedsEnum*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IFeedsEnum*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IFeedsEnum*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IFeedsEnum*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IFeedsEnum*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_count(this : IFeedsEnum*, count : Int32*) : HRESULT
    @lpVtbl.value.get_count.call(this, count)
  end
  def item(this : IFeedsEnum*, index : Int32, disp : IDispatch*) : HRESULT
    @lpVtbl.value.item.call(this, index, disp)
  end
  def get__new_enum(this : IFeedsEnum*, enumvar : IEnumVARIANT*) : HRESULT
    @lpVtbl.value.get__new_enum.call(this, enumvar)
  end
end
struct LibWin32::IFeedFolder
  def query_interface(this : IFeedFolder*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IFeedFolder*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IFeedFolder*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IFeedFolder*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IFeedFolder*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IFeedFolder*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IFeedFolder*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_feeds(this : IFeedFolder*, disp : IDispatch*) : HRESULT
    @lpVtbl.value.get_feeds.call(this, disp)
  end
  def get_subfolders(this : IFeedFolder*, disp : IDispatch*) : HRESULT
    @lpVtbl.value.get_subfolders.call(this, disp)
  end
  def create_feed(this : IFeedFolder*, feedname : UInt8*, feedurl : UInt8*, disp : IDispatch*) : HRESULT
    @lpVtbl.value.create_feed.call(this, feedname, feedurl, disp)
  end
  def create_subfolder(this : IFeedFolder*, foldername : UInt8*, disp : IDispatch*) : HRESULT
    @lpVtbl.value.create_subfolder.call(this, foldername, disp)
  end
  def exists_feed(this : IFeedFolder*, feedname : UInt8*, exists : Int16*) : HRESULT
    @lpVtbl.value.exists_feed.call(this, feedname, exists)
  end
  def get_feed(this : IFeedFolder*, feedname : UInt8*, disp : IDispatch*) : HRESULT
    @lpVtbl.value.get_feed.call(this, feedname, disp)
  end
  def exists_subfolder(this : IFeedFolder*, foldername : UInt8*, exists : Int16*) : HRESULT
    @lpVtbl.value.exists_subfolder.call(this, foldername, exists)
  end
  def get_subfolder(this : IFeedFolder*, foldername : UInt8*, disp : IDispatch*) : HRESULT
    @lpVtbl.value.get_subfolder.call(this, foldername, disp)
  end
  def delete(this : IFeedFolder*) : HRESULT
    @lpVtbl.value.delete.call(this)
  end
  def get_name(this : IFeedFolder*, foldername : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, foldername)
  end
  def rename(this : IFeedFolder*, foldername : UInt8*) : HRESULT
    @lpVtbl.value.rename.call(this, foldername)
  end
  def get_path(this : IFeedFolder*, folderpath : UInt8**) : HRESULT
    @lpVtbl.value.get_path.call(this, folderpath)
  end
  def move(this : IFeedFolder*, newparentpath : UInt8*) : HRESULT
    @lpVtbl.value.move.call(this, newparentpath)
  end
  def get_parent(this : IFeedFolder*, disp : IDispatch*) : HRESULT
    @lpVtbl.value.get_parent.call(this, disp)
  end
  def get_is_root(this : IFeedFolder*, isroot : Int16*) : HRESULT
    @lpVtbl.value.get_is_root.call(this, isroot)
  end
  def get_total_unread_item_count(this : IFeedFolder*, count : Int32*) : HRESULT
    @lpVtbl.value.get_total_unread_item_count.call(this, count)
  end
  def get_total_item_count(this : IFeedFolder*, count : Int32*) : HRESULT
    @lpVtbl.value.get_total_item_count.call(this, count)
  end
  def get_watcher(this : IFeedFolder*, scope : FEEDS_EVENTS_SCOPE, mask : FEEDS_EVENTS_MASK, disp : IDispatch*) : HRESULT
    @lpVtbl.value.get_watcher.call(this, scope, mask, disp)
  end
end
struct LibWin32::IFeedFolderEvents
  def query_interface(this : IFeedFolderEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IFeedFolderEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IFeedFolderEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IFeedFolderEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IFeedFolderEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IFeedFolderEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IFeedFolderEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def error(this : IFeedFolderEvents*) : HRESULT
    @lpVtbl.value.error.call(this)
  end
  def folder_added(this : IFeedFolderEvents*, path : UInt8*) : HRESULT
    @lpVtbl.value.folder_added.call(this, path)
  end
  def folder_deleted(this : IFeedFolderEvents*, path : UInt8*) : HRESULT
    @lpVtbl.value.folder_deleted.call(this, path)
  end
  def folder_renamed(this : IFeedFolderEvents*, path : UInt8*, oldpath : UInt8*) : HRESULT
    @lpVtbl.value.folder_renamed.call(this, path, oldpath)
  end
  def folder_moved_from(this : IFeedFolderEvents*, path : UInt8*, oldpath : UInt8*) : HRESULT
    @lpVtbl.value.folder_moved_from.call(this, path, oldpath)
  end
  def folder_moved_to(this : IFeedFolderEvents*, path : UInt8*, oldpath : UInt8*) : HRESULT
    @lpVtbl.value.folder_moved_to.call(this, path, oldpath)
  end
  def folder_item_count_changed(this : IFeedFolderEvents*, path : UInt8*, itemcounttype : Int32) : HRESULT
    @lpVtbl.value.folder_item_count_changed.call(this, path, itemcounttype)
  end
  def feed_added(this : IFeedFolderEvents*, path : UInt8*) : HRESULT
    @lpVtbl.value.feed_added.call(this, path)
  end
  def feed_deleted(this : IFeedFolderEvents*, path : UInt8*) : HRESULT
    @lpVtbl.value.feed_deleted.call(this, path)
  end
  def feed_renamed(this : IFeedFolderEvents*, path : UInt8*, oldpath : UInt8*) : HRESULT
    @lpVtbl.value.feed_renamed.call(this, path, oldpath)
  end
  def feed_url_changed(this : IFeedFolderEvents*, path : UInt8*) : HRESULT
    @lpVtbl.value.feed_url_changed.call(this, path)
  end
  def feed_moved_from(this : IFeedFolderEvents*, path : UInt8*, oldpath : UInt8*) : HRESULT
    @lpVtbl.value.feed_moved_from.call(this, path, oldpath)
  end
  def feed_moved_to(this : IFeedFolderEvents*, path : UInt8*, oldpath : UInt8*) : HRESULT
    @lpVtbl.value.feed_moved_to.call(this, path, oldpath)
  end
  def feed_downloading(this : IFeedFolderEvents*, path : UInt8*) : HRESULT
    @lpVtbl.value.feed_downloading.call(this, path)
  end
  def feed_download_completed(this : IFeedFolderEvents*, path : UInt8*, error : FEEDS_DOWNLOAD_ERROR) : HRESULT
    @lpVtbl.value.feed_download_completed.call(this, path, error)
  end
  def feed_item_count_changed(this : IFeedFolderEvents*, path : UInt8*, itemcounttype : Int32) : HRESULT
    @lpVtbl.value.feed_item_count_changed.call(this, path, itemcounttype)
  end
end
struct LibWin32::IFeed
  def query_interface(this : IFeed*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IFeed*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IFeed*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IFeed*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IFeed*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IFeed*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IFeed*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def xml(this : IFeed*, count : Int32, sortproperty : FEEDS_XML_SORT_PROPERTY, sortorder : FEEDS_XML_SORT_ORDER, filterflags : FEEDS_XML_FILTER_FLAGS, includeflags : FEEDS_XML_INCLUDE_FLAGS, xml : UInt8**) : HRESULT
    @lpVtbl.value.xml.call(this, count, sortproperty, sortorder, filterflags, includeflags, xml)
  end
  def get_name(this : IFeed*, name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, name)
  end
  def rename(this : IFeed*, name : UInt8*) : HRESULT
    @lpVtbl.value.rename.call(this, name)
  end
  def get_url(this : IFeed*, feedurl : UInt8**) : HRESULT
    @lpVtbl.value.get_url.call(this, feedurl)
  end
  def put_url(this : IFeed*, feedurl : UInt8*) : HRESULT
    @lpVtbl.value.put_url.call(this, feedurl)
  end
  def get_local_id(this : IFeed*, feedguid : UInt8**) : HRESULT
    @lpVtbl.value.get_local_id.call(this, feedguid)
  end
  def get_path(this : IFeed*, path : UInt8**) : HRESULT
    @lpVtbl.value.get_path.call(this, path)
  end
  def move(this : IFeed*, newparentpath : UInt8*) : HRESULT
    @lpVtbl.value.move.call(this, newparentpath)
  end
  def get_parent(this : IFeed*, disp : IDispatch*) : HRESULT
    @lpVtbl.value.get_parent.call(this, disp)
  end
  def get_last_write_time(this : IFeed*, lastwrite : Float64*) : HRESULT
    @lpVtbl.value.get_last_write_time.call(this, lastwrite)
  end
  def delete(this : IFeed*) : HRESULT
    @lpVtbl.value.delete.call(this)
  end
  def download(this : IFeed*) : HRESULT
    @lpVtbl.value.download.call(this)
  end
  def async_download(this : IFeed*) : HRESULT
    @lpVtbl.value.async_download.call(this)
  end
  def cancel_async_download(this : IFeed*) : HRESULT
    @lpVtbl.value.cancel_async_download.call(this)
  end
  def get_sync_setting(this : IFeed*, syncsetting : FEEDS_SYNC_SETTING*) : HRESULT
    @lpVtbl.value.get_sync_setting.call(this, syncsetting)
  end
  def put_sync_setting(this : IFeed*, syncsetting : FEEDS_SYNC_SETTING) : HRESULT
    @lpVtbl.value.put_sync_setting.call(this, syncsetting)
  end
  def get_interval(this : IFeed*, minutes : Int32*) : HRESULT
    @lpVtbl.value.get_interval.call(this, minutes)
  end
  def put_interval(this : IFeed*, minutes : Int32) : HRESULT
    @lpVtbl.value.put_interval.call(this, minutes)
  end
  def get_last_download_time(this : IFeed*, lastdownload : Float64*) : HRESULT
    @lpVtbl.value.get_last_download_time.call(this, lastdownload)
  end
  def get_local_enclosure_path(this : IFeed*, path : UInt8**) : HRESULT
    @lpVtbl.value.get_local_enclosure_path.call(this, path)
  end
  def get_items(this : IFeed*, disp : IDispatch*) : HRESULT
    @lpVtbl.value.get_items.call(this, disp)
  end
  def get_item(this : IFeed*, itemid : Int32, disp : IDispatch*) : HRESULT
    @lpVtbl.value.get_item.call(this, itemid, disp)
  end
  def get_title(this : IFeed*, title : UInt8**) : HRESULT
    @lpVtbl.value.get_title.call(this, title)
  end
  def get_description(this : IFeed*, description : UInt8**) : HRESULT
    @lpVtbl.value.get_description.call(this, description)
  end
  def get_link(this : IFeed*, homepage : UInt8**) : HRESULT
    @lpVtbl.value.get_link.call(this, homepage)
  end
  def get_image(this : IFeed*, imageurl : UInt8**) : HRESULT
    @lpVtbl.value.get_image.call(this, imageurl)
  end
  def get_last_build_date(this : IFeed*, lastbuilddate : Float64*) : HRESULT
    @lpVtbl.value.get_last_build_date.call(this, lastbuilddate)
  end
  def get_pub_date(this : IFeed*, lastpopulatedate : Float64*) : HRESULT
    @lpVtbl.value.get_pub_date.call(this, lastpopulatedate)
  end
  def get_ttl(this : IFeed*, ttl : Int32*) : HRESULT
    @lpVtbl.value.get_ttl.call(this, ttl)
  end
  def get_language(this : IFeed*, language : UInt8**) : HRESULT
    @lpVtbl.value.get_language.call(this, language)
  end
  def get_copyright(this : IFeed*, copyright : UInt8**) : HRESULT
    @lpVtbl.value.get_copyright.call(this, copyright)
  end
  def get_max_item_count(this : IFeed*, count : Int32*) : HRESULT
    @lpVtbl.value.get_max_item_count.call(this, count)
  end
  def put_max_item_count(this : IFeed*, count : Int32) : HRESULT
    @lpVtbl.value.put_max_item_count.call(this, count)
  end
  def get_download_enclosures_automatically(this : IFeed*, downloadenclosuresautomatically : Int16*) : HRESULT
    @lpVtbl.value.get_download_enclosures_automatically.call(this, downloadenclosuresautomatically)
  end
  def put_download_enclosures_automatically(this : IFeed*, downloadenclosuresautomatically : Int16) : HRESULT
    @lpVtbl.value.put_download_enclosures_automatically.call(this, downloadenclosuresautomatically)
  end
  def get_download_status(this : IFeed*, status : FEEDS_DOWNLOAD_STATUS*) : HRESULT
    @lpVtbl.value.get_download_status.call(this, status)
  end
  def get_last_download_error(this : IFeed*, error : FEEDS_DOWNLOAD_ERROR*) : HRESULT
    @lpVtbl.value.get_last_download_error.call(this, error)
  end
  def merge(this : IFeed*, feedxml : UInt8*, feedurl : UInt8*) : HRESULT
    @lpVtbl.value.merge.call(this, feedxml, feedurl)
  end
  def get_download_url(this : IFeed*, feedurl : UInt8**) : HRESULT
    @lpVtbl.value.get_download_url.call(this, feedurl)
  end
  def get_is_list(this : IFeed*, islist : Int16*) : HRESULT
    @lpVtbl.value.get_is_list.call(this, islist)
  end
  def mark_all_items_read(this : IFeed*) : HRESULT
    @lpVtbl.value.mark_all_items_read.call(this)
  end
  def get_watcher(this : IFeed*, scope : FEEDS_EVENTS_SCOPE, mask : FEEDS_EVENTS_MASK, disp : IDispatch*) : HRESULT
    @lpVtbl.value.get_watcher.call(this, scope, mask, disp)
  end
  def get_unread_item_count(this : IFeed*, count : Int32*) : HRESULT
    @lpVtbl.value.get_unread_item_count.call(this, count)
  end
  def get_item_count(this : IFeed*, count : Int32*) : HRESULT
    @lpVtbl.value.get_item_count.call(this, count)
  end
end
struct LibWin32::IFeed2
  def query_interface(this : IFeed2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IFeed2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IFeed2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IFeed2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IFeed2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IFeed2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IFeed2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def xml(this : IFeed2*, count : Int32, sortproperty : FEEDS_XML_SORT_PROPERTY, sortorder : FEEDS_XML_SORT_ORDER, filterflags : FEEDS_XML_FILTER_FLAGS, includeflags : FEEDS_XML_INCLUDE_FLAGS, xml : UInt8**) : HRESULT
    @lpVtbl.value.xml.call(this, count, sortproperty, sortorder, filterflags, includeflags, xml)
  end
  def get_name(this : IFeed2*, name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, name)
  end
  def rename(this : IFeed2*, name : UInt8*) : HRESULT
    @lpVtbl.value.rename.call(this, name)
  end
  def get_url(this : IFeed2*, feedurl : UInt8**) : HRESULT
    @lpVtbl.value.get_url.call(this, feedurl)
  end
  def put_url(this : IFeed2*, feedurl : UInt8*) : HRESULT
    @lpVtbl.value.put_url.call(this, feedurl)
  end
  def get_local_id(this : IFeed2*, feedguid : UInt8**) : HRESULT
    @lpVtbl.value.get_local_id.call(this, feedguid)
  end
  def get_path(this : IFeed2*, path : UInt8**) : HRESULT
    @lpVtbl.value.get_path.call(this, path)
  end
  def move(this : IFeed2*, newparentpath : UInt8*) : HRESULT
    @lpVtbl.value.move.call(this, newparentpath)
  end
  def get_parent(this : IFeed2*, disp : IDispatch*) : HRESULT
    @lpVtbl.value.get_parent.call(this, disp)
  end
  def get_last_write_time(this : IFeed2*, lastwrite : Float64*) : HRESULT
    @lpVtbl.value.get_last_write_time.call(this, lastwrite)
  end
  def delete(this : IFeed2*) : HRESULT
    @lpVtbl.value.delete.call(this)
  end
  def download(this : IFeed2*) : HRESULT
    @lpVtbl.value.download.call(this)
  end
  def async_download(this : IFeed2*) : HRESULT
    @lpVtbl.value.async_download.call(this)
  end
  def cancel_async_download(this : IFeed2*) : HRESULT
    @lpVtbl.value.cancel_async_download.call(this)
  end
  def get_sync_setting(this : IFeed2*, syncsetting : FEEDS_SYNC_SETTING*) : HRESULT
    @lpVtbl.value.get_sync_setting.call(this, syncsetting)
  end
  def put_sync_setting(this : IFeed2*, syncsetting : FEEDS_SYNC_SETTING) : HRESULT
    @lpVtbl.value.put_sync_setting.call(this, syncsetting)
  end
  def get_interval(this : IFeed2*, minutes : Int32*) : HRESULT
    @lpVtbl.value.get_interval.call(this, minutes)
  end
  def put_interval(this : IFeed2*, minutes : Int32) : HRESULT
    @lpVtbl.value.put_interval.call(this, minutes)
  end
  def get_last_download_time(this : IFeed2*, lastdownload : Float64*) : HRESULT
    @lpVtbl.value.get_last_download_time.call(this, lastdownload)
  end
  def get_local_enclosure_path(this : IFeed2*, path : UInt8**) : HRESULT
    @lpVtbl.value.get_local_enclosure_path.call(this, path)
  end
  def get_items(this : IFeed2*, disp : IDispatch*) : HRESULT
    @lpVtbl.value.get_items.call(this, disp)
  end
  def get_item(this : IFeed2*, itemid : Int32, disp : IDispatch*) : HRESULT
    @lpVtbl.value.get_item.call(this, itemid, disp)
  end
  def get_title(this : IFeed2*, title : UInt8**) : HRESULT
    @lpVtbl.value.get_title.call(this, title)
  end
  def get_description(this : IFeed2*, description : UInt8**) : HRESULT
    @lpVtbl.value.get_description.call(this, description)
  end
  def get_link(this : IFeed2*, homepage : UInt8**) : HRESULT
    @lpVtbl.value.get_link.call(this, homepage)
  end
  def get_image(this : IFeed2*, imageurl : UInt8**) : HRESULT
    @lpVtbl.value.get_image.call(this, imageurl)
  end
  def get_last_build_date(this : IFeed2*, lastbuilddate : Float64*) : HRESULT
    @lpVtbl.value.get_last_build_date.call(this, lastbuilddate)
  end
  def get_pub_date(this : IFeed2*, lastpopulatedate : Float64*) : HRESULT
    @lpVtbl.value.get_pub_date.call(this, lastpopulatedate)
  end
  def get_ttl(this : IFeed2*, ttl : Int32*) : HRESULT
    @lpVtbl.value.get_ttl.call(this, ttl)
  end
  def get_language(this : IFeed2*, language : UInt8**) : HRESULT
    @lpVtbl.value.get_language.call(this, language)
  end
  def get_copyright(this : IFeed2*, copyright : UInt8**) : HRESULT
    @lpVtbl.value.get_copyright.call(this, copyright)
  end
  def get_max_item_count(this : IFeed2*, count : Int32*) : HRESULT
    @lpVtbl.value.get_max_item_count.call(this, count)
  end
  def put_max_item_count(this : IFeed2*, count : Int32) : HRESULT
    @lpVtbl.value.put_max_item_count.call(this, count)
  end
  def get_download_enclosures_automatically(this : IFeed2*, downloadenclosuresautomatically : Int16*) : HRESULT
    @lpVtbl.value.get_download_enclosures_automatically.call(this, downloadenclosuresautomatically)
  end
  def put_download_enclosures_automatically(this : IFeed2*, downloadenclosuresautomatically : Int16) : HRESULT
    @lpVtbl.value.put_download_enclosures_automatically.call(this, downloadenclosuresautomatically)
  end
  def get_download_status(this : IFeed2*, status : FEEDS_DOWNLOAD_STATUS*) : HRESULT
    @lpVtbl.value.get_download_status.call(this, status)
  end
  def get_last_download_error(this : IFeed2*, error : FEEDS_DOWNLOAD_ERROR*) : HRESULT
    @lpVtbl.value.get_last_download_error.call(this, error)
  end
  def merge(this : IFeed2*, feedxml : UInt8*, feedurl : UInt8*) : HRESULT
    @lpVtbl.value.merge.call(this, feedxml, feedurl)
  end
  def get_download_url(this : IFeed2*, feedurl : UInt8**) : HRESULT
    @lpVtbl.value.get_download_url.call(this, feedurl)
  end
  def get_is_list(this : IFeed2*, islist : Int16*) : HRESULT
    @lpVtbl.value.get_is_list.call(this, islist)
  end
  def mark_all_items_read(this : IFeed2*) : HRESULT
    @lpVtbl.value.mark_all_items_read.call(this)
  end
  def get_watcher(this : IFeed2*, scope : FEEDS_EVENTS_SCOPE, mask : FEEDS_EVENTS_MASK, disp : IDispatch*) : HRESULT
    @lpVtbl.value.get_watcher.call(this, scope, mask, disp)
  end
  def get_unread_item_count(this : IFeed2*, count : Int32*) : HRESULT
    @lpVtbl.value.get_unread_item_count.call(this, count)
  end
  def get_item_count(this : IFeed2*, count : Int32*) : HRESULT
    @lpVtbl.value.get_item_count.call(this, count)
  end
  def get_item_by_effective_id(this : IFeed2*, itemeffectiveid : Int32, disp : IDispatch*) : HRESULT
    @lpVtbl.value.get_item_by_effective_id.call(this, itemeffectiveid, disp)
  end
  def get_last_item_download_time(this : IFeed2*, lastitemdownloadtime : Float64*) : HRESULT
    @lpVtbl.value.get_last_item_download_time.call(this, lastitemdownloadtime)
  end
  def get_username(this : IFeed2*, username : UInt8**) : HRESULT
    @lpVtbl.value.get_username.call(this, username)
  end
  def get_password(this : IFeed2*, password : UInt8**) : HRESULT
    @lpVtbl.value.get_password.call(this, password)
  end
  def set_credentials(this : IFeed2*, username : UInt8*, password : UInt8*) : HRESULT
    @lpVtbl.value.set_credentials.call(this, username, password)
  end
  def clear_credentials(this : IFeed2*) : HRESULT
    @lpVtbl.value.clear_credentials.call(this)
  end
end
struct LibWin32::IFeedEvents
  def query_interface(this : IFeedEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IFeedEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IFeedEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IFeedEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IFeedEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IFeedEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IFeedEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def error(this : IFeedEvents*) : HRESULT
    @lpVtbl.value.error.call(this)
  end
  def feed_deleted(this : IFeedEvents*, path : UInt8*) : HRESULT
    @lpVtbl.value.feed_deleted.call(this, path)
  end
  def feed_renamed(this : IFeedEvents*, path : UInt8*, oldpath : UInt8*) : HRESULT
    @lpVtbl.value.feed_renamed.call(this, path, oldpath)
  end
  def feed_url_changed(this : IFeedEvents*, path : UInt8*) : HRESULT
    @lpVtbl.value.feed_url_changed.call(this, path)
  end
  def feed_moved(this : IFeedEvents*, path : UInt8*, oldpath : UInt8*) : HRESULT
    @lpVtbl.value.feed_moved.call(this, path, oldpath)
  end
  def feed_downloading(this : IFeedEvents*, path : UInt8*) : HRESULT
    @lpVtbl.value.feed_downloading.call(this, path)
  end
  def feed_download_completed(this : IFeedEvents*, path : UInt8*, error : FEEDS_DOWNLOAD_ERROR) : HRESULT
    @lpVtbl.value.feed_download_completed.call(this, path, error)
  end
  def feed_item_count_changed(this : IFeedEvents*, path : UInt8*, itemcounttype : Int32) : HRESULT
    @lpVtbl.value.feed_item_count_changed.call(this, path, itemcounttype)
  end
end
struct LibWin32::IFeedItem
  def query_interface(this : IFeedItem*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IFeedItem*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IFeedItem*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IFeedItem*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IFeedItem*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IFeedItem*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IFeedItem*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def xml(this : IFeedItem*, includeflags : FEEDS_XML_INCLUDE_FLAGS, xml : UInt8**) : HRESULT
    @lpVtbl.value.xml.call(this, includeflags, xml)
  end
  def get_title(this : IFeedItem*, title : UInt8**) : HRESULT
    @lpVtbl.value.get_title.call(this, title)
  end
  def get_link(this : IFeedItem*, linkurl : UInt8**) : HRESULT
    @lpVtbl.value.get_link.call(this, linkurl)
  end
  def get_guid(this : IFeedItem*, itemguid : UInt8**) : HRESULT
    @lpVtbl.value.get_guid.call(this, itemguid)
  end
  def get_description(this : IFeedItem*, description : UInt8**) : HRESULT
    @lpVtbl.value.get_description.call(this, description)
  end
  def get_pub_date(this : IFeedItem*, pubdate : Float64*) : HRESULT
    @lpVtbl.value.get_pub_date.call(this, pubdate)
  end
  def get_comments(this : IFeedItem*, comments : UInt8**) : HRESULT
    @lpVtbl.value.get_comments.call(this, comments)
  end
  def get_author(this : IFeedItem*, author : UInt8**) : HRESULT
    @lpVtbl.value.get_author.call(this, author)
  end
  def get_enclosure(this : IFeedItem*, disp : IDispatch*) : HRESULT
    @lpVtbl.value.get_enclosure.call(this, disp)
  end
  def get_is_read(this : IFeedItem*, isread : Int16*) : HRESULT
    @lpVtbl.value.get_is_read.call(this, isread)
  end
  def put_is_read(this : IFeedItem*, isread : Int16) : HRESULT
    @lpVtbl.value.put_is_read.call(this, isread)
  end
  def get_local_id(this : IFeedItem*, itemid : Int32*) : HRESULT
    @lpVtbl.value.get_local_id.call(this, itemid)
  end
  def get_parent(this : IFeedItem*, disp : IDispatch*) : HRESULT
    @lpVtbl.value.get_parent.call(this, disp)
  end
  def delete(this : IFeedItem*) : HRESULT
    @lpVtbl.value.delete.call(this)
  end
  def get_download_url(this : IFeedItem*, itemurl : UInt8**) : HRESULT
    @lpVtbl.value.get_download_url.call(this, itemurl)
  end
  def get_last_download_time(this : IFeedItem*, lastdownload : Float64*) : HRESULT
    @lpVtbl.value.get_last_download_time.call(this, lastdownload)
  end
  def get_modified(this : IFeedItem*, modified : Float64*) : HRESULT
    @lpVtbl.value.get_modified.call(this, modified)
  end
end
struct LibWin32::IFeedItem2
  def query_interface(this : IFeedItem2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IFeedItem2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IFeedItem2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IFeedItem2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IFeedItem2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IFeedItem2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IFeedItem2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def xml(this : IFeedItem2*, includeflags : FEEDS_XML_INCLUDE_FLAGS, xml : UInt8**) : HRESULT
    @lpVtbl.value.xml.call(this, includeflags, xml)
  end
  def get_title(this : IFeedItem2*, title : UInt8**) : HRESULT
    @lpVtbl.value.get_title.call(this, title)
  end
  def get_link(this : IFeedItem2*, linkurl : UInt8**) : HRESULT
    @lpVtbl.value.get_link.call(this, linkurl)
  end
  def get_guid(this : IFeedItem2*, itemguid : UInt8**) : HRESULT
    @lpVtbl.value.get_guid.call(this, itemguid)
  end
  def get_description(this : IFeedItem2*, description : UInt8**) : HRESULT
    @lpVtbl.value.get_description.call(this, description)
  end
  def get_pub_date(this : IFeedItem2*, pubdate : Float64*) : HRESULT
    @lpVtbl.value.get_pub_date.call(this, pubdate)
  end
  def get_comments(this : IFeedItem2*, comments : UInt8**) : HRESULT
    @lpVtbl.value.get_comments.call(this, comments)
  end
  def get_author(this : IFeedItem2*, author : UInt8**) : HRESULT
    @lpVtbl.value.get_author.call(this, author)
  end
  def get_enclosure(this : IFeedItem2*, disp : IDispatch*) : HRESULT
    @lpVtbl.value.get_enclosure.call(this, disp)
  end
  def get_is_read(this : IFeedItem2*, isread : Int16*) : HRESULT
    @lpVtbl.value.get_is_read.call(this, isread)
  end
  def put_is_read(this : IFeedItem2*, isread : Int16) : HRESULT
    @lpVtbl.value.put_is_read.call(this, isread)
  end
  def get_local_id(this : IFeedItem2*, itemid : Int32*) : HRESULT
    @lpVtbl.value.get_local_id.call(this, itemid)
  end
  def get_parent(this : IFeedItem2*, disp : IDispatch*) : HRESULT
    @lpVtbl.value.get_parent.call(this, disp)
  end
  def delete(this : IFeedItem2*) : HRESULT
    @lpVtbl.value.delete.call(this)
  end
  def get_download_url(this : IFeedItem2*, itemurl : UInt8**) : HRESULT
    @lpVtbl.value.get_download_url.call(this, itemurl)
  end
  def get_last_download_time(this : IFeedItem2*, lastdownload : Float64*) : HRESULT
    @lpVtbl.value.get_last_download_time.call(this, lastdownload)
  end
  def get_modified(this : IFeedItem2*, modified : Float64*) : HRESULT
    @lpVtbl.value.get_modified.call(this, modified)
  end
  def get_effective_id(this : IFeedItem2*, effectiveid : Int32*) : HRESULT
    @lpVtbl.value.get_effective_id.call(this, effectiveid)
  end
end
struct LibWin32::IFeedEnclosure
  def query_interface(this : IFeedEnclosure*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IFeedEnclosure*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IFeedEnclosure*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IFeedEnclosure*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IFeedEnclosure*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IFeedEnclosure*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IFeedEnclosure*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_url(this : IFeedEnclosure*, enclosureurl : UInt8**) : HRESULT
    @lpVtbl.value.get_url.call(this, enclosureurl)
  end
  def get_type(this : IFeedEnclosure*, mimetype : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, mimetype)
  end
  def get_length(this : IFeedEnclosure*, length : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, length)
  end
  def async_download(this : IFeedEnclosure*) : HRESULT
    @lpVtbl.value.async_download.call(this)
  end
  def cancel_async_download(this : IFeedEnclosure*) : HRESULT
    @lpVtbl.value.cancel_async_download.call(this)
  end
  def get_download_status(this : IFeedEnclosure*, status : FEEDS_DOWNLOAD_STATUS*) : HRESULT
    @lpVtbl.value.get_download_status.call(this, status)
  end
  def get_last_download_error(this : IFeedEnclosure*, error : FEEDS_DOWNLOAD_ERROR*) : HRESULT
    @lpVtbl.value.get_last_download_error.call(this, error)
  end
  def get_local_path(this : IFeedEnclosure*, localpath : UInt8**) : HRESULT
    @lpVtbl.value.get_local_path.call(this, localpath)
  end
  def get_parent(this : IFeedEnclosure*, disp : IDispatch*) : HRESULT
    @lpVtbl.value.get_parent.call(this, disp)
  end
  def get_download_url(this : IFeedEnclosure*, enclosureurl : UInt8**) : HRESULT
    @lpVtbl.value.get_download_url.call(this, enclosureurl)
  end
  def get_download_mime_type(this : IFeedEnclosure*, mimetype : UInt8**) : HRESULT
    @lpVtbl.value.get_download_mime_type.call(this, mimetype)
  end
  def remove_file(this : IFeedEnclosure*) : HRESULT
    @lpVtbl.value.remove_file.call(this)
  end
  def set_file(this : IFeedEnclosure*, downloadurl : UInt8*, downloadfilepath : UInt8*, downloadmimetype : UInt8*, enclosurefilename : UInt8*) : HRESULT
    @lpVtbl.value.set_file.call(this, downloadurl, downloadfilepath, downloadmimetype, enclosurefilename)
  end
end
struct LibWin32::IWMPEffects
  def query_interface(this : IWMPEffects*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPEffects*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPEffects*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def render(this : IWMPEffects*, plevels : TimedLevel*, hdc : HDC, prc : RECT*) : HRESULT
    @lpVtbl.value.render.call(this, plevels, hdc, prc)
  end
  def media_info(this : IWMPEffects*, lchannelcount : Int32, lsamplerate : Int32, bstrtitle : UInt8*) : HRESULT
    @lpVtbl.value.media_info.call(this, lchannelcount, lsamplerate, bstrtitle)
  end
  def get_capabilities(this : IWMPEffects*, pdwcapabilities : UInt32*) : HRESULT
    @lpVtbl.value.get_capabilities.call(this, pdwcapabilities)
  end
  def get_title(this : IWMPEffects*, bstrtitle : UInt8**) : HRESULT
    @lpVtbl.value.get_title.call(this, bstrtitle)
  end
  def get_preset_title(this : IWMPEffects*, npreset : Int32, bstrpresettitle : UInt8**) : HRESULT
    @lpVtbl.value.get_preset_title.call(this, npreset, bstrpresettitle)
  end
  def get_preset_count(this : IWMPEffects*, pnpresetcount : Int32*) : HRESULT
    @lpVtbl.value.get_preset_count.call(this, pnpresetcount)
  end
  def set_current_preset(this : IWMPEffects*, npreset : Int32) : HRESULT
    @lpVtbl.value.set_current_preset.call(this, npreset)
  end
  def get_current_preset(this : IWMPEffects*, pnpreset : Int32*) : HRESULT
    @lpVtbl.value.get_current_preset.call(this, pnpreset)
  end
  def display_property_page(this : IWMPEffects*, hwndowner : LibC::HANDLE) : HRESULT
    @lpVtbl.value.display_property_page.call(this, hwndowner)
  end
  def go_fullscreen(this : IWMPEffects*, ffullscreen : LibC::BOOL) : HRESULT
    @lpVtbl.value.go_fullscreen.call(this, ffullscreen)
  end
  def render_full_screen(this : IWMPEffects*, plevels : TimedLevel*) : HRESULT
    @lpVtbl.value.render_full_screen.call(this, plevels)
  end
end
struct LibWin32::IWMPEffects2
  def query_interface(this : IWMPEffects2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPEffects2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPEffects2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def render(this : IWMPEffects2*, plevels : TimedLevel*, hdc : HDC, prc : RECT*) : HRESULT
    @lpVtbl.value.render.call(this, plevels, hdc, prc)
  end
  def media_info(this : IWMPEffects2*, lchannelcount : Int32, lsamplerate : Int32, bstrtitle : UInt8*) : HRESULT
    @lpVtbl.value.media_info.call(this, lchannelcount, lsamplerate, bstrtitle)
  end
  def get_capabilities(this : IWMPEffects2*, pdwcapabilities : UInt32*) : HRESULT
    @lpVtbl.value.get_capabilities.call(this, pdwcapabilities)
  end
  def get_title(this : IWMPEffects2*, bstrtitle : UInt8**) : HRESULT
    @lpVtbl.value.get_title.call(this, bstrtitle)
  end
  def get_preset_title(this : IWMPEffects2*, npreset : Int32, bstrpresettitle : UInt8**) : HRESULT
    @lpVtbl.value.get_preset_title.call(this, npreset, bstrpresettitle)
  end
  def get_preset_count(this : IWMPEffects2*, pnpresetcount : Int32*) : HRESULT
    @lpVtbl.value.get_preset_count.call(this, pnpresetcount)
  end
  def set_current_preset(this : IWMPEffects2*, npreset : Int32) : HRESULT
    @lpVtbl.value.set_current_preset.call(this, npreset)
  end
  def get_current_preset(this : IWMPEffects2*, pnpreset : Int32*) : HRESULT
    @lpVtbl.value.get_current_preset.call(this, pnpreset)
  end
  def display_property_page(this : IWMPEffects2*, hwndowner : LibC::HANDLE) : HRESULT
    @lpVtbl.value.display_property_page.call(this, hwndowner)
  end
  def go_fullscreen(this : IWMPEffects2*, ffullscreen : LibC::BOOL) : HRESULT
    @lpVtbl.value.go_fullscreen.call(this, ffullscreen)
  end
  def render_full_screen(this : IWMPEffects2*, plevels : TimedLevel*) : HRESULT
    @lpVtbl.value.render_full_screen.call(this, plevels)
  end
  def set_core(this : IWMPEffects2*, pplayer : IWMPCore) : HRESULT
    @lpVtbl.value.set_core.call(this, pplayer)
  end
  def create(this : IWMPEffects2*, hwndparent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.create.call(this, hwndparent)
  end
  def destroy(this : IWMPEffects2*) : HRESULT
    @lpVtbl.value.destroy.call(this)
  end
  def notify_new_media(this : IWMPEffects2*, pmedia : IWMPMedia) : HRESULT
    @lpVtbl.value.notify_new_media.call(this, pmedia)
  end
  def on_window_message(this : IWMPEffects2*, msg : UInt32, wparam : LibC::UINT_PTR, lparam : LPARAM, plresultparam : LRESULT*) : HRESULT
    @lpVtbl.value.on_window_message.call(this, msg, wparam, lparam, plresultparam)
  end
  def render_windowed(this : IWMPEffects2*, pdata : TimedLevel*, frequiredrender : LibC::BOOL) : HRESULT
    @lpVtbl.value.render_windowed.call(this, pdata, frequiredrender)
  end
end
struct LibWin32::IWMPPluginUI
  def query_interface(this : IWMPPluginUI*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPPluginUI*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPPluginUI*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_core(this : IWMPPluginUI*, pcore : IWMPCore) : HRESULT
    @lpVtbl.value.set_core.call(this, pcore)
  end
  def create(this : IWMPPluginUI*, hwndparent : LibC::HANDLE, phwndwindow : HANDLE*) : HRESULT
    @lpVtbl.value.create.call(this, hwndparent, phwndwindow)
  end
  def destroy(this : IWMPPluginUI*) : HRESULT
    @lpVtbl.value.destroy.call(this)
  end
  def display_property_page(this : IWMPPluginUI*, hwndparent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.display_property_page.call(this, hwndparent)
  end
  def get_property(this : IWMPPluginUI*, pwszname : LibC::LPWSTR, pvarproperty : VARIANT*) : HRESULT
    @lpVtbl.value.get_property.call(this, pwszname, pvarproperty)
  end
  def set_property(this : IWMPPluginUI*, pwszname : LibC::LPWSTR, pvarproperty : VARIANT*) : HRESULT
    @lpVtbl.value.set_property.call(this, pwszname, pvarproperty)
  end
  def translate_accelerator(this : IWMPPluginUI*, lpmsg : MSG*) : HRESULT
    @lpVtbl.value.translate_accelerator.call(this, lpmsg)
  end
end
struct LibWin32::IWMPContentContainer
  def query_interface(this : IWMPContentContainer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPContentContainer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPContentContainer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_id(this : IWMPContentContainer*, pcontentid : UInt32*) : HRESULT
    @lpVtbl.value.get_id.call(this, pcontentid)
  end
  def get_price(this : IWMPContentContainer*, pbstrprice : UInt8**) : HRESULT
    @lpVtbl.value.get_price.call(this, pbstrprice)
  end
  def get_type(this : IWMPContentContainer*, pbstrtype : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, pbstrtype)
  end
  def get_content_count(this : IWMPContentContainer*, pccontent : UInt32*) : HRESULT
    @lpVtbl.value.get_content_count.call(this, pccontent)
  end
  def get_content_price(this : IWMPContentContainer*, idxcontent : UInt32, pbstrprice : UInt8**) : HRESULT
    @lpVtbl.value.get_content_price.call(this, idxcontent, pbstrprice)
  end
  def get_content_id(this : IWMPContentContainer*, idxcontent : UInt32, pcontentid : UInt32*) : HRESULT
    @lpVtbl.value.get_content_id.call(this, idxcontent, pcontentid)
  end
end
struct LibWin32::IWMPContentContainerList
  def query_interface(this : IWMPContentContainerList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPContentContainerList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPContentContainerList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_transaction_type(this : IWMPContentContainerList*, pwmptt : WMPTransactionType*) : HRESULT
    @lpVtbl.value.get_transaction_type.call(this, pwmptt)
  end
  def get_container_count(this : IWMPContentContainerList*, pccontainer : UInt32*) : HRESULT
    @lpVtbl.value.get_container_count.call(this, pccontainer)
  end
  def get_container(this : IWMPContentContainerList*, idxcontainer : UInt32, ppcontent : IWMPContentContainer*) : HRESULT
    @lpVtbl.value.get_container.call(this, idxcontainer, ppcontent)
  end
end
struct LibWin32::IWMPContentPartnerCallback
  def query_interface(this : IWMPContentPartnerCallback*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPContentPartnerCallback*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPContentPartnerCallback*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def notify(this : IWMPContentPartnerCallback*, type : WMPCallbackNotification, pcontext : VARIANT*) : HRESULT
    @lpVtbl.value.notify.call(this, type, pcontext)
  end
  def buy_complete(this : IWMPContentPartnerCallback*, hrresult : HRESULT, dwbuycookie : UInt32) : HRESULT
    @lpVtbl.value.buy_complete.call(this, hrresult, dwbuycookie)
  end
  def download_track(this : IWMPContentPartnerCallback*, cookie : UInt32, bstrtrackurl : UInt8*, dwservicetrackid : UInt32, bstrdownloadparams : UInt8*, hrdownload : HRESULT) : HRESULT
    @lpVtbl.value.download_track.call(this, cookie, bstrtrackurl, dwservicetrackid, bstrdownloadparams, hrdownload)
  end
  def get_catalog_version(this : IWMPContentPartnerCallback*, pdwversion : UInt32*, pdwschemaversion : UInt32*, plcid : UInt32*) : HRESULT
    @lpVtbl.value.get_catalog_version.call(this, pdwversion, pdwschemaversion, plcid)
  end
  def update_device_complete(this : IWMPContentPartnerCallback*, bstrdevicename : UInt8*) : HRESULT
    @lpVtbl.value.update_device_complete.call(this, bstrdevicename)
  end
  def change_view(this : IWMPContentPartnerCallback*, bstrtype : UInt8*, bstrid : UInt8*, bstrfilter : UInt8*) : HRESULT
    @lpVtbl.value.change_view.call(this, bstrtype, bstrid, bstrfilter)
  end
  def add_list_contents(this : IWMPContentPartnerCallback*, dwlistcookie : UInt32, citems : UInt32, prgitems : UInt32*) : HRESULT
    @lpVtbl.value.add_list_contents.call(this, dwlistcookie, citems, prgitems)
  end
  def list_contents_complete(this : IWMPContentPartnerCallback*, dwlistcookie : UInt32, hrsuccess : HRESULT) : HRESULT
    @lpVtbl.value.list_contents_complete.call(this, dwlistcookie, hrsuccess)
  end
  def send_message_complete(this : IWMPContentPartnerCallback*, bstrmsg : UInt8*, bstrparam : UInt8*, bstrresult : UInt8*) : HRESULT
    @lpVtbl.value.send_message_complete.call(this, bstrmsg, bstrparam, bstrresult)
  end
  def get_content_i_ds_in_library(this : IWMPContentPartnerCallback*, pccontentids : UInt32*, pprgids : UInt32**) : HRESULT
    @lpVtbl.value.get_content_i_ds_in_library.call(this, pccontentids, pprgids)
  end
  def refresh_license_complete(this : IWMPContentPartnerCallback*, dwcookie : UInt32, contentid : UInt32, hrrefresh : HRESULT) : HRESULT
    @lpVtbl.value.refresh_license_complete.call(this, dwcookie, contentid, hrrefresh)
  end
  def show_popup(this : IWMPContentPartnerCallback*, lindex : Int32, bstrparameters : UInt8*) : HRESULT
    @lpVtbl.value.show_popup.call(this, lindex, bstrparameters)
  end
  def verify_permission_complete(this : IWMPContentPartnerCallback*, bstrpermission : UInt8*, pcontext : VARIANT*, hrpermission : HRESULT) : HRESULT
    @lpVtbl.value.verify_permission_complete.call(this, bstrpermission, pcontext, hrpermission)
  end
end
struct LibWin32::IWMPContentPartner
  def query_interface(this : IWMPContentPartner*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPContentPartner*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPContentPartner*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_callback(this : IWMPContentPartner*, pcallback : IWMPContentPartnerCallback) : HRESULT
    @lpVtbl.value.set_callback.call(this, pcallback)
  end
  def notify(this : IWMPContentPartner*, type : WMPPartnerNotification, pcontext : VARIANT*) : HRESULT
    @lpVtbl.value.notify.call(this, type, pcontext)
  end
  def get_item_info(this : IWMPContentPartner*, bstrinfoname : UInt8*, pcontext : VARIANT*, pdata : VARIANT*) : HRESULT
    @lpVtbl.value.get_item_info.call(this, bstrinfoname, pcontext, pdata)
  end
  def get_content_partner_info(this : IWMPContentPartner*, bstrinfoname : UInt8*, pdata : VARIANT*) : HRESULT
    @lpVtbl.value.get_content_partner_info.call(this, bstrinfoname, pdata)
  end
  def get_commands(this : IWMPContentPartner*, location : UInt8*, plocationcontext : VARIANT*, itemlocation : UInt8*, citemids : UInt32, prgitemids : UInt32*, pcitemids : UInt32*, pprgitems : WMPContextMenuInfo**) : HRESULT
    @lpVtbl.value.get_commands.call(this, location, plocationcontext, itemlocation, citemids, prgitemids, pcitemids, pprgitems)
  end
  def invoke_command(this : IWMPContentPartner*, dwcommandid : UInt32, location : UInt8*, plocationcontext : VARIANT*, itemlocation : UInt8*, citemids : UInt32, rgitemids : UInt32*) : HRESULT
    @lpVtbl.value.invoke_command.call(this, dwcommandid, location, plocationcontext, itemlocation, citemids, rgitemids)
  end
  def can_buy_silent(this : IWMPContentPartner*, pinfo : IWMPContentContainerList, pbstrtotalprice : UInt8**, psilentok : Int16*) : HRESULT
    @lpVtbl.value.can_buy_silent.call(this, pinfo, pbstrtotalprice, psilentok)
  end
  def buy(this : IWMPContentPartner*, pinfo : IWMPContentContainerList, cookie : UInt32) : HRESULT
    @lpVtbl.value.buy.call(this, pinfo, cookie)
  end
  def get_streaming_url(this : IWMPContentPartner*, st : WMPStreamingType, pstreamcontext : VARIANT*, pbstrurl : UInt8**) : HRESULT
    @lpVtbl.value.get_streaming_url.call(this, st, pstreamcontext, pbstrurl)
  end
  def download(this : IWMPContentPartner*, pinfo : IWMPContentContainerList, cookie : UInt32) : HRESULT
    @lpVtbl.value.download.call(this, pinfo, cookie)
  end
  def download_track_complete(this : IWMPContentPartner*, hrresult : HRESULT, contentid : UInt32, downloadtrackparam : UInt8*) : HRESULT
    @lpVtbl.value.download_track_complete.call(this, hrresult, contentid, downloadtrackparam)
  end
  def refresh_license(this : IWMPContentPartner*, dwcookie : UInt32, flocal : Int16, bstrurl : UInt8*, type : WMPStreamingType, contentid : UInt32, bstrrefreshreason : UInt8*, preasoncontext : VARIANT*) : HRESULT
    @lpVtbl.value.refresh_license.call(this, dwcookie, flocal, bstrurl, type, contentid, bstrrefreshreason, preasoncontext)
  end
  def get_catalog_url(this : IWMPContentPartner*, dwcatalogversion : UInt32, dwcatalogschemaversion : UInt32, cataloglcid : UInt32, pdwnewcatalogversion : UInt32*, pbstrcatalogurl : UInt8**, pexpirationdate : VARIANT*) : HRESULT
    @lpVtbl.value.get_catalog_url.call(this, dwcatalogversion, dwcatalogschemaversion, cataloglcid, pdwnewcatalogversion, pbstrcatalogurl, pexpirationdate)
  end
  def get_template(this : IWMPContentPartner*, task : WMPTaskType, location : UInt8*, pcontext : VARIANT*, clicklocation : UInt8*, pclickcontext : VARIANT*, bstrfilter : UInt8*, bstrviewparams : UInt8*, pbstrtemplateurl : UInt8**, ptemplatesize : WMPTemplateSize*) : HRESULT
    @lpVtbl.value.get_template.call(this, task, location, pcontext, clicklocation, pclickcontext, bstrfilter, bstrviewparams, pbstrtemplateurl, ptemplatesize)
  end
  def update_device(this : IWMPContentPartner*, bstrdevicename : UInt8*) : HRESULT
    @lpVtbl.value.update_device.call(this, bstrdevicename)
  end
  def get_list_contents(this : IWMPContentPartner*, location : UInt8*, pcontext : VARIANT*, bstrlisttype : UInt8*, bstrparams : UInt8*, dwlistcookie : UInt32) : HRESULT
    @lpVtbl.value.get_list_contents.call(this, location, pcontext, bstrlisttype, bstrparams, dwlistcookie)
  end
  def login(this : IWMPContentPartner*, userinfo : BLOB, pwdinfo : BLOB, fusedcachedcreds : Int16, foktocache : Int16) : HRESULT
    @lpVtbl.value.login.call(this, userinfo, pwdinfo, fusedcachedcreds, foktocache)
  end
  def authenticate(this : IWMPContentPartner*, userinfo : BLOB, pwdinfo : BLOB) : HRESULT
    @lpVtbl.value.authenticate.call(this, userinfo, pwdinfo)
  end
  def logout(this : IWMPContentPartner*) : HRESULT
    @lpVtbl.value.logout.call(this)
  end
  def send_message(this : IWMPContentPartner*, bstrmsg : UInt8*, bstrparam : UInt8*) : HRESULT
    @lpVtbl.value.send_message.call(this, bstrmsg, bstrparam)
  end
  def station_event(this : IWMPContentPartner*, bstrstationeventtype : UInt8*, stationid : UInt32, playlistindex : UInt32, trackid : UInt32, trackdata : UInt8*, dwsecondsplayed : UInt32) : HRESULT
    @lpVtbl.value.station_event.call(this, bstrstationeventtype, stationid, playlistindex, trackid, trackdata, dwsecondsplayed)
  end
  def compare_container_list_prices(this : IWMPContentPartner*, plistbase : IWMPContentContainerList, plistcompare : IWMPContentContainerList, presult : Int32*) : HRESULT
    @lpVtbl.value.compare_container_list_prices.call(this, plistbase, plistcompare, presult)
  end
  def verify_permission(this : IWMPContentPartner*, bstrpermission : UInt8*, pcontext : VARIANT*) : HRESULT
    @lpVtbl.value.verify_permission.call(this, bstrpermission, pcontext)
  end
end
struct LibWin32::IWMPSubscriptionService
  def query_interface(this : IWMPSubscriptionService*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPSubscriptionService*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPSubscriptionService*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def allow_play(this : IWMPSubscriptionService*, hwnd : LibC::HANDLE, pmedia : IWMPMedia, pfallowplay : LibC::BOOL*) : HRESULT
    @lpVtbl.value.allow_play.call(this, hwnd, pmedia, pfallowplay)
  end
  def allow_cd_burn(this : IWMPSubscriptionService*, hwnd : LibC::HANDLE, pplaylist : IWMPPlaylist, pfallowburn : LibC::BOOL*) : HRESULT
    @lpVtbl.value.allow_cd_burn.call(this, hwnd, pplaylist, pfallowburn)
  end
  def allow_pda_transfer(this : IWMPSubscriptionService*, hwnd : LibC::HANDLE, pplaylist : IWMPPlaylist, pfallowtransfer : LibC::BOOL*) : HRESULT
    @lpVtbl.value.allow_pda_transfer.call(this, hwnd, pplaylist, pfallowtransfer)
  end
  def start_background_processing(this : IWMPSubscriptionService*, hwnd : LibC::HANDLE) : HRESULT
    @lpVtbl.value.start_background_processing.call(this, hwnd)
  end
end
struct LibWin32::IWMPSubscriptionServiceCallback
  def query_interface(this : IWMPSubscriptionServiceCallback*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPSubscriptionServiceCallback*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPSubscriptionServiceCallback*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_complete(this : IWMPSubscriptionServiceCallback*, hrresult : HRESULT) : HRESULT
    @lpVtbl.value.on_complete.call(this, hrresult)
  end
end
struct LibWin32::IWMPSubscriptionService2
  def query_interface(this : IWMPSubscriptionService2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPSubscriptionService2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPSubscriptionService2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def allow_play(this : IWMPSubscriptionService2*, hwnd : LibC::HANDLE, pmedia : IWMPMedia, pfallowplay : LibC::BOOL*) : HRESULT
    @lpVtbl.value.allow_play.call(this, hwnd, pmedia, pfallowplay)
  end
  def allow_cd_burn(this : IWMPSubscriptionService2*, hwnd : LibC::HANDLE, pplaylist : IWMPPlaylist, pfallowburn : LibC::BOOL*) : HRESULT
    @lpVtbl.value.allow_cd_burn.call(this, hwnd, pplaylist, pfallowburn)
  end
  def allow_pda_transfer(this : IWMPSubscriptionService2*, hwnd : LibC::HANDLE, pplaylist : IWMPPlaylist, pfallowtransfer : LibC::BOOL*) : HRESULT
    @lpVtbl.value.allow_pda_transfer.call(this, hwnd, pplaylist, pfallowtransfer)
  end
  def start_background_processing(this : IWMPSubscriptionService2*, hwnd : LibC::HANDLE) : HRESULT
    @lpVtbl.value.start_background_processing.call(this, hwnd)
  end
  def stop_background_processing(this : IWMPSubscriptionService2*) : HRESULT
    @lpVtbl.value.stop_background_processing.call(this)
  end
  def service_event(this : IWMPSubscriptionService2*, event : WMPSubscriptionServiceEvent) : HRESULT
    @lpVtbl.value.service_event.call(this, event)
  end
  def device_available(this : IWMPSubscriptionService2*, bstrdevicename : UInt8*, pcb : IWMPSubscriptionServiceCallback) : HRESULT
    @lpVtbl.value.device_available.call(this, bstrdevicename, pcb)
  end
  def prepare_for_sync(this : IWMPSubscriptionService2*, bstrfilename : UInt8*, bstrdevicename : UInt8*, pcb : IWMPSubscriptionServiceCallback) : HRESULT
    @lpVtbl.value.prepare_for_sync.call(this, bstrfilename, bstrdevicename, pcb)
  end
end
struct LibWin32::IWMPDownloadItem
  def query_interface(this : IWMPDownloadItem*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPDownloadItem*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPDownloadItem*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPDownloadItem*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPDownloadItem*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPDownloadItem*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPDownloadItem*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_source_url(this : IWMPDownloadItem*, pbstrurl : UInt8**) : HRESULT
    @lpVtbl.value.get_source_url.call(this, pbstrurl)
  end
  def get_size(this : IWMPDownloadItem*, plsize : Int32*) : HRESULT
    @lpVtbl.value.get_size.call(this, plsize)
  end
  def get_type(this : IWMPDownloadItem*, pbstrtype : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, pbstrtype)
  end
  def get_progress(this : IWMPDownloadItem*, plprogress : Int32*) : HRESULT
    @lpVtbl.value.get_progress.call(this, plprogress)
  end
  def get_download_state(this : IWMPDownloadItem*, pwmpsdls : WMPSubscriptionDownloadState*) : HRESULT
    @lpVtbl.value.get_download_state.call(this, pwmpsdls)
  end
  def pause(this : IWMPDownloadItem*) : HRESULT
    @lpVtbl.value.pause.call(this)
  end
  def resume(this : IWMPDownloadItem*) : HRESULT
    @lpVtbl.value.resume.call(this)
  end
  def cancel(this : IWMPDownloadItem*) : HRESULT
    @lpVtbl.value.cancel.call(this)
  end
end
struct LibWin32::IWMPDownloadItem2
  def query_interface(this : IWMPDownloadItem2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPDownloadItem2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPDownloadItem2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPDownloadItem2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPDownloadItem2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPDownloadItem2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPDownloadItem2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_source_url(this : IWMPDownloadItem2*, pbstrurl : UInt8**) : HRESULT
    @lpVtbl.value.get_source_url.call(this, pbstrurl)
  end
  def get_size(this : IWMPDownloadItem2*, plsize : Int32*) : HRESULT
    @lpVtbl.value.get_size.call(this, plsize)
  end
  def get_type(this : IWMPDownloadItem2*, pbstrtype : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, pbstrtype)
  end
  def get_progress(this : IWMPDownloadItem2*, plprogress : Int32*) : HRESULT
    @lpVtbl.value.get_progress.call(this, plprogress)
  end
  def get_download_state(this : IWMPDownloadItem2*, pwmpsdls : WMPSubscriptionDownloadState*) : HRESULT
    @lpVtbl.value.get_download_state.call(this, pwmpsdls)
  end
  def pause(this : IWMPDownloadItem2*) : HRESULT
    @lpVtbl.value.pause.call(this)
  end
  def resume(this : IWMPDownloadItem2*) : HRESULT
    @lpVtbl.value.resume.call(this)
  end
  def cancel(this : IWMPDownloadItem2*) : HRESULT
    @lpVtbl.value.cancel.call(this)
  end
  def get_item_info(this : IWMPDownloadItem2*, bstritemname : UInt8*, pbstrval : UInt8**) : HRESULT
    @lpVtbl.value.get_item_info.call(this, bstritemname, pbstrval)
  end
end
struct LibWin32::IWMPDownloadCollection
  def query_interface(this : IWMPDownloadCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPDownloadCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPDownloadCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPDownloadCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPDownloadCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPDownloadCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPDownloadCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_id(this : IWMPDownloadCollection*, plid : Int32*) : HRESULT
    @lpVtbl.value.get_id.call(this, plid)
  end
  def get_count(this : IWMPDownloadCollection*, plcount : Int32*) : HRESULT
    @lpVtbl.value.get_count.call(this, plcount)
  end
  def item(this : IWMPDownloadCollection*, litem : Int32, ppdownload : IWMPDownloadItem2*) : HRESULT
    @lpVtbl.value.item.call(this, litem, ppdownload)
  end
  def start_download(this : IWMPDownloadCollection*, bstrsourceurl : UInt8*, bstrtype : UInt8*, ppdownload : IWMPDownloadItem2*) : HRESULT
    @lpVtbl.value.start_download.call(this, bstrsourceurl, bstrtype, ppdownload)
  end
  def remove_item(this : IWMPDownloadCollection*, litem : Int32) : HRESULT
    @lpVtbl.value.remove_item.call(this, litem)
  end
  def clear(this : IWMPDownloadCollection*) : HRESULT
    @lpVtbl.value.clear.call(this)
  end
end
struct LibWin32::IWMPDownloadManager
  def query_interface(this : IWMPDownloadManager*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWMPDownloadManager*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWMPDownloadManager*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWMPDownloadManager*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWMPDownloadManager*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWMPDownloadManager*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWMPDownloadManager*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_download_collection(this : IWMPDownloadManager*, lcollectionid : Int32, ppcollection : IWMPDownloadCollection*) : HRESULT
    @lpVtbl.value.get_download_collection.call(this, lcollectionid, ppcollection)
  end
  def create_download_collection(this : IWMPDownloadManager*, ppcollection : IWMPDownloadCollection*) : HRESULT
    @lpVtbl.value.create_download_collection.call(this, ppcollection)
  end
end
