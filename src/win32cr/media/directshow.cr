require "../foundation.cr"
require "../system/com.cr"
require "../media.cr"
require "../graphics/gdi.cr"
require "../system/com/structuredstorage.cr"
require "../system/registry.cr"
require "../graphics/directdraw.cr"
require "../media/audio/directsound.cr"
require "../media/kernelstreaming.cr"
require "../media/windowsmediaformat.cr"
require "../media/audio.cr"
require "../ui/windowsandmessaging.cr"
require "../graphics/direct3d9.cr"
require "../media/mediafoundation.cr"
require "../system/diagnostics/etw.cr"
require "../system/ole.cr"

{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link("delayimp")]
{% end %}
@[Link("user32")]
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/IGNORE:4199")]
{% end %}
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/DELAYLOAD:quartz.dll")]
{% else %}
@[Link("quartz")]
{% end %}
lib LibWin32
  EC_SND_DEVICE_ERROR_BASE = 512_u32
  EC_SNDDEV_IN_ERROR = 512_u32
  EC_SNDDEV_OUT_ERROR = 513_u32
  EC_SYSTEMBASE = 0_u32
  EC_USER = 32768_u32
  EC_COMPLETE = 1_u32
  EC_USERABORT = 2_u32
  EC_ERRORABORT = 3_u32
  EC_TIME = 4_u32
  EC_REPAINT = 5_u32
  EC_STREAM_ERROR_STOPPED = 6_u32
  EC_STREAM_ERROR_STILLPLAYING = 7_u32
  EC_ERROR_STILLPLAYING = 8_u32
  EC_PALETTE_CHANGED = 9_u32
  EC_VIDEO_SIZE_CHANGED = 10_u32
  EC_QUALITY_CHANGE = 11_u32
  EC_SHUTTING_DOWN = 12_u32
  EC_CLOCK_CHANGED = 13_u32
  EC_PAUSED = 14_u32
  EC_OPENING_FILE = 16_u32
  EC_BUFFERING_DATA = 17_u32
  EC_FULLSCREEN_LOST = 18_u32
  EC_ACTIVATE = 19_u32
  EC_NEED_RESTART = 20_u32
  EC_WINDOW_DESTROYED = 21_u32
  EC_DISPLAY_CHANGED = 22_u32
  EC_STARVATION = 23_u32
  EC_OLE_EVENT = 24_u32
  EC_NOTIFY_WINDOW = 25_u32
  EC_STREAM_CONTROL_STOPPED = 26_u32
  EC_STREAM_CONTROL_STARTED = 27_u32
  EC_END_OF_SEGMENT = 28_u32
  EC_SEGMENT_STARTED = 29_u32
  EC_LENGTH_CHANGED = 30_u32
  EC_DEVICE_LOST = 31_u32
  EC_SAMPLE_NEEDED = 32_u32
  EC_PROCESSING_LATENCY = 33_u32
  EC_SAMPLE_LATENCY = 34_u32
  EC_SCRUB_TIME = 35_u32
  EC_STEP_COMPLETE = 36_u32
  EC_TIMECODE_AVAILABLE = 48_u32
  EC_EXTDEVICE_MODE_CHANGE = 49_u32
  EC_STATE_CHANGE = 50_u32
  EC_GRAPH_CHANGED = 80_u32
  EC_CLOCK_UNSET = 81_u32
  EC_VMR_RENDERDEVICE_SET = 83_u32
  VMR_RENDER_DEVICE_OVERLAY = 1_u32
  VMR_RENDER_DEVICE_VIDMEM = 2_u32
  VMR_RENDER_DEVICE_SYSMEM = 4_u32
  EC_VMR_SURFACE_FLIPPED = 84_u32
  EC_VMR_RECONNECTION_FAILED = 85_u32
  EC_PREPROCESS_COMPLETE = 86_u32
  EC_CODECAPI_EVENT = 87_u32
  EC_WMT_EVENT_BASE = 593_u32
  EC_WMT_INDEX_EVENT = 593_u32
  EC_WMT_EVENT = 594_u32
  EC_BUILT = 768_u32
  EC_UNBUILT = 769_u32
  EC_SKIP_FRAMES = 37_u32
  EC_PLEASE_REOPEN = 64_u32
  EC_STATUS = 65_u32
  EC_MARKER_HIT = 66_u32
  EC_LOADSTATUS = 67_u32
  EC_FILE_CLOSED = 68_u32
  EC_ERRORABORTEX = 69_u32
  AM_LOADSTATUS_CLOSED = 0_u32
  AM_LOADSTATUS_LOADINGDESCR = 1_u32
  AM_LOADSTATUS_LOADINGMCAST = 2_u32
  AM_LOADSTATUS_LOCATING = 3_u32
  AM_LOADSTATUS_CONNECTING = 4_u32
  AM_LOADSTATUS_OPENING = 5_u32
  AM_LOADSTATUS_OPEN = 6_u32
  EC_NEW_PIN = 32_u32
  EC_RENDER_FINISHED = 33_u32
  EC_EOS_SOON = 70_u32
  EC_CONTENTPROPERTY_CHANGED = 71_u32
  AM_CONTENTPROPERTY_TITLE = 1_u32
  AM_CONTENTPROPERTY_AUTHOR = 2_u32
  AM_CONTENTPROPERTY_COPYRIGHT = 4_u32
  AM_CONTENTPROPERTY_DESCRIPTION = 8_u32
  EC_BANDWIDTHCHANGE = 72_u32
  EC_VIDEOFRAMEREADY = 73_u32
  EC_DVDBASE = 256_u32
  EC_DVD_DOMAIN_CHANGE = 257_u32
  EC_DVD_TITLE_CHANGE = 258_u32
  EC_DVD_CHAPTER_START = 259_u32
  EC_DVD_AUDIO_STREAM_CHANGE = 260_u32
  EC_DVD_SUBPICTURE_STREAM_CHANGE = 261_u32
  EC_DVD_ANGLE_CHANGE = 262_u32
  EC_DVD_BUTTON_CHANGE = 263_u32
  EC_DVD_VALID_UOPS_CHANGE = 264_u32
  EC_DVD_STILL_ON = 265_u32
  EC_DVD_STILL_OFF = 266_u32
  EC_DVD_CURRENT_TIME = 267_u32
  EC_DVD_ERROR = 268_u32
  EC_DVD_WARNING = 269_u32
  EC_DVD_CHAPTER_AUTOSTOP = 270_u32
  EC_DVD_NO_FP_PGC = 271_u32
  EC_DVD_PLAYBACK_RATE_CHANGE = 272_u32
  EC_DVD_PARENTAL_LEVEL_CHANGE = 273_u32
  EC_DVD_PLAYBACK_STOPPED = 274_u32
  EC_DVD_ANGLES_AVAILABLE = 275_u32
  EC_DVD_PLAYPERIOD_AUTOSTOP = 276_u32
  EC_DVD_BUTTON_AUTO_ACTIVATED = 277_u32
  EC_DVD_CMD_START = 278_u32
  EC_DVD_CMD_END = 279_u32
  EC_DVD_DISC_EJECTED = 280_u32
  EC_DVD_DISC_INSERTED = 281_u32
  EC_DVD_CURRENT_HMSF_TIME = 282_u32
  EC_DVD_KARAOKE_MODE = 283_u32
  EC_DVD_PROGRAM_CELL_CHANGE = 284_u32
  EC_DVD_TITLE_SET_CHANGE = 285_u32
  EC_DVD_PROGRAM_CHAIN_CHANGE = 286_u32
  EC_DVD_VOBU_Offset = 287_u32
  EC_DVD_VOBU_Timestamp = 288_u32
  EC_DVD_GPRM_Change = 289_u32
  EC_DVD_SPRM_Change = 290_u32
  EC_DVD_BeginNavigationCommands = 291_u32
  EC_DVD_NavigationCommand = 292_u32
  AM_AC3_ALTERNATE_AUDIO_1 = 1_u32
  AM_AC3_ALTERNATE_AUDIO_2 = 2_u32
  AM_AC3_ALTERNATE_AUDIO_BOTH = 3_u32
  AM_AC3_SERVICE_MAIN_AUDIO = 0_u32
  AM_AC3_SERVICE_NO_DIALOG = 1_u32
  AM_AC3_SERVICE_VISUALLY_IMPAIRED = 2_u32
  AM_AC3_SERVICE_HEARING_IMPAIRED = 3_u32
  AM_AC3_SERVICE_DIALOG_ONLY = 4_u32
  AM_AC3_SERVICE_COMMENTARY = 5_u32
  AM_AC3_SERVICE_EMERGENCY_FLASH = 6_u32
  AM_AC3_SERVICE_VOICE_OVER = 7_u32
  AM_UseNewCSSKey = 1_u32
  AM_ReverseBlockStart = 2_u32
  AM_ReverseBlockEnd = 4_u32
  AM_DVD_CGMS_RESERVED_MASK = 120_u32
  AM_DVD_CGMS_COPY_PROTECT_MASK = 24_u32
  AM_DVD_CGMS_COPY_PERMITTED = 0_u32
  AM_DVD_CGMS_COPY_ONCE = 16_u32
  AM_DVD_CGMS_NO_COPY = 24_u32
  AM_DVD_COPYRIGHT_MASK = 64_u32
  AM_DVD_NOT_COPYRIGHTED = 0_u32
  AM_DVD_COPYRIGHTED = 64_u32
  AM_DVD_SECTOR_PROTECT_MASK = 32_u32
  AM_DVD_SECTOR_NOT_PROTECTED = 0_u32
  AM_DVD_SECTOR_PROTECTED = 32_u32
  AMINTERLACE_IsInterlaced = 1_u32
  AMINTERLACE_1FieldPerSample = 2_u32
  AMINTERLACE_Field1First = 4_u32
  AMINTERLACE_UNUSED = 8_u32
  AMINTERLACE_FieldPatternMask = 48_u32
  AMINTERLACE_FieldPatField1Only = 0_u32
  AMINTERLACE_FieldPatField2Only = 16_u32
  AMINTERLACE_FieldPatBothRegular = 32_u32
  AMINTERLACE_FieldPatBothIrregular = 48_u32
  AMINTERLACE_DisplayModeMask = 192_u32
  AMINTERLACE_DisplayModeBobOnly = 0_u32
  AMINTERLACE_DisplayModeWeaveOnly = 64_u32
  AMINTERLACE_DisplayModeBobOrWeave = 128_u32
  AMCOPYPROTECT_RestrictDuplication = 1_u32
  AMCONTROL_USED = 1_u32
  AMCONTROL_PAD_TO_4x3 = 2_u32
  AMCONTROL_PAD_TO_16x9 = 4_u32
  AMCONTROL_COLORINFO_PRESENT = 128_u32
  AM_VIDEO_FLAG_FIELD_MASK = 3_i32
  AM_VIDEO_FLAG_INTERLEAVED_FRAME = 0_i32
  AM_VIDEO_FLAG_FIELD1 = 1_i32
  AM_VIDEO_FLAG_FIELD2 = 2_i32
  AM_VIDEO_FLAG_FIELD1FIRST = 4_i32
  AM_VIDEO_FLAG_WEAVE = 8_i32
  AM_VIDEO_FLAG_IPB_MASK = 48_i32
  AM_VIDEO_FLAG_I_SAMPLE = 0_i32
  AM_VIDEO_FLAG_P_SAMPLE = 16_i32
  AM_VIDEO_FLAG_B_SAMPLE = 32_i32
  AM_VIDEO_FLAG_REPEAT_FIELD = 64_i32
  AVIF_HASINDEX = 16_u32
  AVIF_MUSTUSEINDEX = 32_u32
  AVIF_ISINTERLEAVED = 256_u32
  AVIF_TRUSTCKTYPE = 2048_u32
  AVIF_WASCAPTUREFILE = 65536_u32
  AVIF_COPYRIGHTED = 131072_u32
  AVI_HEADERSIZE = 2048_u32
  AVISF_DISABLED = 1_u32
  AVISF_VIDEO_PALCHANGES = 65536_u32
  AVIIF_LIST = 1_i32
  AVIIF_KEYFRAME = 16_i32
  AVIIF_FIRSTPART = 32_i32
  AVIIF_LASTPART = 64_i32
  AVIIF_NOTIME = 256_i32
  AVIIF_COMPUSE = 268369920_i32
  AVIIF_NO_TIME = 256_u32
  AVIIF_COMPRESSOR = 268369920_u32
  TIMECODE_RATE_30DROP = 0_u32
  TIMECODE_SMPTE_BINARY_GROUP = 7_u32
  TIMECODE_SMPTE_COLOR_FRAME = 8_u32
  AVI_INDEX_OF_INDEXES = 0_u32
  AVI_INDEX_OF_CHUNKS = 1_u32
  AVI_INDEX_OF_TIMED_CHUNKS = 2_u32
  AVI_INDEX_OF_SUB_2FIELD = 3_u32
  AVI_INDEX_IS_DATA = 128_u32
  AVI_INDEX_SUB_DEFAULT = 0_u32
  AVI_INDEX_SUB_2FIELD = 1_u32
  STDINDEXSIZE = 16384_u32
  AVISTDINDEX_DELTAFRAME = 2147483648_u32
  AMVA_TYPEINDEX_OUTPUTFRAME = 4294967295_u32
  AMVA_QUERYRENDERSTATUSF_READ = 1_u32
  MIN_DIMENSION = 1_u32
  BDA_PLP_ID_NOT_SET = -1_i32
  CDEF_CLASS_DEFAULT = 1_u32
  CDEF_BYPASS_CLASS_MANAGER = 2_u32
  CDEF_MERIT_ABOVE_DO_NOT_USE = 8_u32
  CDEF_DEVMON_CMGR_DEVICE = 16_u32
  CDEF_DEVMON_DMO = 32_u32
  CDEF_DEVMON_PNP_DEVICE = 64_u32
  CDEF_DEVMON_FILTER = 128_u32
  CDEF_DEVMON_SELECTIVE_MASK = 240_u32
  CHARS_IN_GUID = 39_u32
  MAX_PIN_NAME = 128_u32
  MAX_FILTER_NAME = 128_u32
  AM_GBF_PREVFRAMESKIPPED = 1_u32
  AM_GBF_NOTASYNCPOINT = 2_u32
  AM_GBF_NOWAIT = 4_u32
  AM_GBF_NODDSURFACELOCK = 8_u32
  AMF_AUTOMATICGAIN = "-1.0_f64"
  AnalogVideo_NTSC_Mask = 7_u32
  AnalogVideo_PAL_Mask = 1052656_u32
  AnalogVideo_SECAM_Mask = 1044480_u32
  MPEG2_PROGRAM_STREAM_MAP = 0_u32
  MPEG2_PROGRAM_ELEMENTARY_STREAM = 1_u32
  MPEG2_PROGRAM_DIRECTORY_PES_PACKET = 2_u32
  MPEG2_PROGRAM_PACK_HEADER = 3_u32
  MPEG2_PROGRAM_PES_STREAM = 4_u32
  MPEG2_PROGRAM_SYSTEM_HEADER = 5_u32
  SUBSTREAM_FILTER_VAL_NONE = 268435456_u32
  AM_GETDECODERCAP_QUERY_VMR_SUPPORT = 1_u32
  VMR_NOTSUPPORTED = 0_u32
  VMR_SUPPORTED = 1_u32
  AM_QUERY_DECODER_VMR_SUPPORT = 1_u32
  AM_QUERY_DECODER_DXVA_1_SUPPORT = 2_u32
  AM_QUERY_DECODER_DVD_SUPPORT = 3_u32
  AM_QUERY_DECODER_ATSC_SD_SUPPORT = 4_u32
  AM_QUERY_DECODER_ATSC_HD_SUPPORT = 5_u32
  AM_GETDECODERCAP_QUERY_VMR9_SUPPORT = 6_u32
  AM_GETDECODERCAP_QUERY_EVR_SUPPORT = 7_u32
  DECODER_CAP_NOTSUPPORTED = 0_u32
  DECODER_CAP_SUPPORTED = 1_u32
  VMRBITMAP_DISABLE = 1_u32
  VMRBITMAP_HDC = 2_u32
  VMRBITMAP_ENTIREDDS = 4_u32
  VMRBITMAP_SRCCOLORKEY = 8_u32
  VMRBITMAP_SRCRECT = 16_u32
  DVD_TITLE_MENU = 0_u32
  DVD_STREAM_DATA_CURRENT = 2048_u32
  DVD_STREAM_DATA_VMGM = 1024_u32
  DVD_STREAM_DATA_VTSM = 1025_u32
  DVD_DEFAULT_AUDIO_STREAM = 15_u32
  DVD_AUDIO_CAPS_AC3 = 1_u32
  DVD_AUDIO_CAPS_MPEG2 = 2_u32
  DVD_AUDIO_CAPS_LPCM = 4_u32
  DVD_AUDIO_CAPS_DTS = 8_u32
  DVD_AUDIO_CAPS_SDDS = 16_u32
  MEDIATYPE_MPEG2_PACK = "36523b13-8ee5-11d1-8ca3-0060b057664a"
  PBDA_AUX_CONNECTOR_TYPE_SVideo = "a0e905f4-24c9-4a54-b761-213355efc13a"
  PBDA_AUX_CONNECTOR_TYPE_Composite = "f6298b4c-c725-4d42-849b-410bbb14ea62"
  CLSID_PBDA_AUX_DATA_TYPE = "fd456373-3323-4090-adca-8ed45f55cf10"
  CLSID_PBDA_Encoder_DATA_TYPE = "728fd6bc-5546-4716-b103-f899f5a1fa68"
  PBDA_Encoder_Audio_AlgorithmType_MPEG1LayerII = 0_u32
  PBDA_Encoder_Audio_AlgorithmType_AC3 = 1_u32
  PBDA_Encoder_Video_MPEG2PartII = 0_u32
  PBDA_Encoder_Video_MPEG4Part10 = 1_u32
  PBDA_Encoder_Video_AVC = 1_u32
  PBDA_Encoder_Video_H264 = 1_u32
  PBDA_Encoder_BitrateMode_Constant = 1_u32
  PBDA_Encoder_BitrateMode_Variable = 2_u32
  PBDA_Encoder_BitrateMode_Average = 3_u32
  CLSID_PBDA_FDC_DATA_TYPE = "e7dbf9a0-22ab-4047-8e67-ef9ad504e729"
  CLSID_PBDA_GDDS_DATA_TYPE = "c80c0df3-6052-4c16-9f56-c44c21f73c45"
  LIBID_QuartzNetTypeLib = "56a868b1-0ad4-11ce-b03a-0020af0ba770"
  LIBID_QuartzTypeLib = "56a868b0-0ad4-11ce-b03a-0020af0ba770"
  CLSID_AMMultiMediaStream = "49c47ce5-9ba4-11d0-8212-00c04fc32c45"
  CLSID_AMDirectDrawStream = "49c47ce4-9ba4-11d0-8212-00c04fc32c45"
  CLSID_AMAudioStream = "8496e040-af4c-11d0-8212-00c04fc32c45"
  CLSID_AMAudioData = "f2468580-af8a-11d0-8212-00c04fc32c45"
  CLSID_AMMediaTypeStream = "cf0f2f7c-f7bf-11d0-900d-00c04fd9189d"
  AMDDS_NONE = 0_u32
  AMDDS_DCIPS = 1_u32
  AMDDS_PS = 2_u32
  AMDDS_RGBOVR = 4_u32
  AMDDS_YUVOVR = 8_u32
  AMDDS_RGBOFF = 16_u32
  AMDDS_YUVOFF = 32_u32
  AMDDS_RGBFLP = 64_u32
  AMDDS_YUVFLP = 128_u32
  AMDDS_ALL = 255_u32
  AMDDS_DEFAULT = 255_u32
  MAX_SIZE_MPEG1_SEQUENCE_INFO = 140_u32
  CLSID_DMOWrapperFilter = "94297043-bd82-4dfd-b0de-8177739c6d20"
  CLSID_DMOFilterCategory = "bcd5796c-bd52-4d30-ab76-70f975b89199"
  AM_MPEG_AUDIO_DUAL_MERGE = 0_u32
  AM_MPEG_AUDIO_DUAL_LEFT = 1_u32
  AM_MPEG_AUDIO_DUAL_RIGHT = 2_u32
  VFW_FIRST_CODE = 512_u32
  MAX_ERROR_TEXT_LEN = 160_u32
  MPBOOL_TRUE = 1_u32
  MPBOOL_FALSE = 0_u32
  DWORD_ALLPARAMS = -1_i32
  GUID_TIME_REFERENCE = "93ad712b-daa0-4ffe-bc81-b0ce500fcdd9"
  GUID_TIME_MUSIC = "0574c49d-5b04-4b15-a542-ae282030117b"
  GUID_TIME_SAMPLES = "a8593d05-0c43-4984-9a63-97af9e02c4c0"
  MPF_ENVLP_STANDARD = 0_u32
  MPF_ENVLP_BEGIN_CURRENTVAL = 1_u32
  MPF_ENVLP_BEGIN_NEUTRALVAL = 2_u32
  MPF_PUNCHIN_REFTIME = 0_u32
  MPF_PUNCHIN_NOW = 1_u32
  MPF_PUNCHIN_STOPPED = 2_u32
  MSPID_PrimaryVideo = "a35ff56a-9fda-11d0-8fdf-00c04fd9189d"
  MSPID_PrimaryAudio = "a35ff56b-9fda-11d0-8fdf-00c04fd9189d"
  VFW_E_INVALIDMEDIATYPE = -2147220992_i32
  VFW_E_INVALIDSUBTYPE = -2147220991_i32
  VFW_E_NEED_OWNER = -2147220990_i32
  VFW_E_ENUM_OUT_OF_SYNC = -2147220989_i32
  VFW_E_ALREADY_CONNECTED = -2147220988_i32
  VFW_E_FILTER_ACTIVE = -2147220987_i32
  VFW_E_NO_TYPES = -2147220986_i32
  VFW_E_NO_ACCEPTABLE_TYPES = -2147220985_i32
  VFW_E_INVALID_DIRECTION = -2147220984_i32
  VFW_E_NOT_CONNECTED = -2147220983_i32
  VFW_E_NO_ALLOCATOR = -2147220982_i32
  VFW_E_RUNTIME_ERROR = -2147220981_i32
  VFW_E_BUFFER_NOTSET = -2147220980_i32
  VFW_E_BUFFER_OVERFLOW = -2147220979_i32
  VFW_E_BADALIGN = -2147220978_i32
  VFW_E_ALREADY_COMMITTED = -2147220977_i32
  VFW_E_BUFFERS_OUTSTANDING = -2147220976_i32
  VFW_E_NOT_COMMITTED = -2147220975_i32
  VFW_E_SIZENOTSET = -2147220974_i32
  VFW_E_NO_CLOCK = -2147220973_i32
  VFW_E_NO_SINK = -2147220972_i32
  VFW_E_NO_INTERFACE = -2147220971_i32
  VFW_E_NOT_FOUND = -2147220970_i32
  VFW_E_CANNOT_CONNECT = -2147220969_i32
  VFW_E_CANNOT_RENDER = -2147220968_i32
  VFW_E_CHANGING_FORMAT = -2147220967_i32
  VFW_E_NO_COLOR_KEY_SET = -2147220966_i32
  VFW_E_NOT_OVERLAY_CONNECTION = -2147220965_i32
  VFW_E_NOT_SAMPLE_CONNECTION = -2147220964_i32
  VFW_E_PALETTE_SET = -2147220963_i32
  VFW_E_COLOR_KEY_SET = -2147220962_i32
  VFW_E_NO_COLOR_KEY_FOUND = -2147220961_i32
  VFW_E_NO_PALETTE_AVAILABLE = -2147220960_i32
  VFW_E_NO_DISPLAY_PALETTE = -2147220959_i32
  VFW_E_TOO_MANY_COLORS = -2147220958_i32
  VFW_E_STATE_CHANGED = -2147220957_i32
  VFW_E_NOT_STOPPED = -2147220956_i32
  VFW_E_NOT_PAUSED = -2147220955_i32
  VFW_E_NOT_RUNNING = -2147220954_i32
  VFW_E_WRONG_STATE = -2147220953_i32
  VFW_E_START_TIME_AFTER_END = -2147220952_i32
  VFW_E_INVALID_RECT = -2147220951_i32
  VFW_E_TYPE_NOT_ACCEPTED = -2147220950_i32
  VFW_E_SAMPLE_REJECTED = -2147220949_i32
  VFW_E_SAMPLE_REJECTED_EOS = -2147220948_i32
  VFW_E_DUPLICATE_NAME = -2147220947_i32
  VFW_S_DUPLICATE_NAME = 262701_i32
  VFW_E_TIMEOUT = -2147220946_i32
  VFW_E_INVALID_FILE_FORMAT = -2147220945_i32
  VFW_E_ENUM_OUT_OF_RANGE = -2147220944_i32
  VFW_E_CIRCULAR_GRAPH = -2147220943_i32
  VFW_E_NOT_ALLOWED_TO_SAVE = -2147220942_i32
  VFW_E_TIME_ALREADY_PASSED = -2147220941_i32
  VFW_E_ALREADY_CANCELLED = -2147220940_i32
  VFW_E_CORRUPT_GRAPH_FILE = -2147220939_i32
  VFW_E_ADVISE_ALREADY_SET = -2147220938_i32
  VFW_S_STATE_INTERMEDIATE = 262711_i32
  VFW_E_NO_MODEX_AVAILABLE = -2147220936_i32
  VFW_E_NO_ADVISE_SET = -2147220935_i32
  VFW_E_NO_FULLSCREEN = -2147220934_i32
  VFW_E_IN_FULLSCREEN_MODE = -2147220933_i32
  VFW_E_UNKNOWN_FILE_TYPE = -2147220928_i32
  VFW_E_CANNOT_LOAD_SOURCE_FILTER = -2147220927_i32
  VFW_S_PARTIAL_RENDER = 262722_i32
  VFW_E_FILE_TOO_SHORT = -2147220925_i32
  VFW_E_INVALID_FILE_VERSION = -2147220924_i32
  VFW_S_SOME_DATA_IGNORED = 262725_i32
  VFW_S_CONNECTIONS_DEFERRED = 262726_i32
  VFW_E_INVALID_CLSID = -2147220921_i32
  VFW_E_INVALID_MEDIA_TYPE = -2147220920_i32
  VFW_E_BAD_KEY = -2147220494_i32
  VFW_S_NO_MORE_ITEMS = 262403_i32
  VFW_E_SAMPLE_TIME_NOT_SET = -2147220919_i32
  VFW_S_RESOURCE_NOT_NEEDED = 262736_i32
  VFW_E_MEDIA_TIME_NOT_SET = -2147220911_i32
  VFW_E_NO_TIME_FORMAT_SET = -2147220910_i32
  VFW_E_MONO_AUDIO_HW = -2147220909_i32
  VFW_S_MEDIA_TYPE_IGNORED = 262740_i32
  VFW_E_NO_DECOMPRESSOR = -2147220907_i32
  VFW_E_NO_AUDIO_HARDWARE = -2147220906_i32
  VFW_S_VIDEO_NOT_RENDERED = 262743_i32
  VFW_S_AUDIO_NOT_RENDERED = 262744_i32
  VFW_E_RPZA = -2147220903_i32
  VFW_S_RPZA = 262746_i32
  VFW_E_PROCESSOR_NOT_SUITABLE = -2147220901_i32
  VFW_E_UNSUPPORTED_AUDIO = -2147220900_i32
  VFW_E_UNSUPPORTED_VIDEO = -2147220899_i32
  VFW_E_MPEG_NOT_CONSTRAINED = -2147220898_i32
  VFW_E_NOT_IN_GRAPH = -2147220897_i32
  VFW_S_ESTIMATED = 262752_i32
  VFW_E_NO_TIME_FORMAT = -2147220895_i32
  VFW_E_READ_ONLY = -2147220894_i32
  VFW_S_RESERVED = 262755_i32
  VFW_E_BUFFER_UNDERFLOW = -2147220892_i32
  VFW_E_UNSUPPORTED_STREAM = -2147220891_i32
  VFW_E_NO_TRANSPORT = -2147220890_i32
  VFW_S_STREAM_OFF = 262759_i32
  VFW_S_CANT_CUE = 262760_i32
  VFW_E_BAD_VIDEOCD = -2147220887_i32
  VFW_S_NO_STOP_TIME = 262768_i32
  VFW_E_OUT_OF_VIDEO_MEMORY = -2147220879_i32
  VFW_E_VP_NEGOTIATION_FAILED = -2147220878_i32
  VFW_E_DDRAW_CAPS_NOT_SUITABLE = -2147220877_i32
  VFW_E_NO_VP_HARDWARE = -2147220876_i32
  VFW_E_NO_CAPTURE_HARDWARE = -2147220875_i32
  VFW_E_DVD_OPERATION_INHIBITED = -2147220874_i32
  VFW_E_DVD_INVALIDDOMAIN = -2147220873_i32
  VFW_E_DVD_NO_BUTTON = -2147220872_i32
  VFW_E_DVD_GRAPHNOTREADY = -2147220871_i32
  VFW_E_DVD_RENDERFAIL = -2147220870_i32
  VFW_E_DVD_DECNOTENOUGH = -2147220869_i32
  VFW_E_DDRAW_VERSION_NOT_SUITABLE = -2147220868_i32
  VFW_E_COPYPROT_FAILED = -2147220867_i32
  VFW_S_NOPREVIEWPIN = 262782_i32
  VFW_E_TIME_EXPIRED = -2147220865_i32
  VFW_S_DVD_NON_ONE_SEQUENTIAL = 262784_i32
  VFW_E_DVD_WRONG_SPEED = -2147220863_i32
  VFW_E_DVD_MENU_DOES_NOT_EXIST = -2147220862_i32
  VFW_E_DVD_CMD_CANCELLED = -2147220861_i32
  VFW_E_DVD_STATE_WRONG_VERSION = -2147220860_i32
  VFW_E_DVD_STATE_CORRUPT = -2147220859_i32
  VFW_E_DVD_STATE_WRONG_DISC = -2147220858_i32
  VFW_E_DVD_INCOMPATIBLE_REGION = -2147220857_i32
  VFW_E_DVD_NO_ATTRIBUTES = -2147220856_i32
  VFW_E_DVD_NO_GOUP_PGC = -2147220855_i32
  VFW_E_DVD_LOW_PARENTAL_LEVEL = -2147220854_i32
  VFW_E_DVD_NOT_IN_KARAOKE_MODE = -2147220853_i32
  VFW_S_DVD_CHANNEL_CONTENTS_NOT_AVAILABLE = 262796_i32
  VFW_S_DVD_NOT_ACCURATE = 262797_i32
  VFW_E_FRAME_STEP_UNSUPPORTED = -2147220850_i32
  VFW_E_DVD_STREAM_DISABLED = -2147220849_i32
  VFW_E_DVD_TITLE_UNKNOWN = -2147220848_i32
  VFW_E_DVD_INVALID_DISC = -2147220847_i32
  VFW_E_DVD_NO_RESUME_INFORMATION = -2147220846_i32
  VFW_E_PIN_ALREADY_BLOCKED_ON_THIS_THREAD = -2147220845_i32
  VFW_E_PIN_ALREADY_BLOCKED = -2147220844_i32
  VFW_E_CERTIFICATION_FAILURE = -2147220843_i32
  VFW_E_VMR_NOT_IN_MIXER_MODE = -2147220842_i32
  VFW_E_VMR_NO_AP_SUPPLIED = -2147220841_i32
  VFW_E_VMR_NO_DEINTERLACE_HW = -2147220840_i32
  VFW_E_VMR_NO_PROCAMP_HW = -2147220839_i32
  VFW_E_DVD_VMR9_INCOMPATIBLEDEC = -2147220838_i32
  VFW_E_NO_COPP_HW = -2147220837_i32
  VFW_E_DVD_NONBLOCKING = -2147220836_i32
  VFW_E_DVD_TOO_MANY_RENDERERS_IN_FILTER_GRAPH = -2147220835_i32
  VFW_E_DVD_NON_EVR_RENDERER_IN_FILTER_GRAPH = -2147220834_i32
  VFW_E_DVD_RESOLUTION_ERROR = -2147220833_i32
  E_PROP_SET_UNSUPPORTED = -2147023726_i32
  E_PROP_ID_UNSUPPORTED = -2147023728_i32
  VFW_E_CODECAPI_LINEAR_RANGE = -2147220720_i32
  VFW_E_CODECAPI_ENUMERATED = -2147220719_i32
  VFW_E_CODECAPI_NO_DEFAULT = -2147220717_i32
  VFW_E_CODECAPI_NO_CURRENT_VALUE = -2147220716_i32
  VFW_E_DVD_CHAPTER_DOES_NOT_EXIST = -2147220715_i32
  VFW_S_DVD_RENDER_STATUS = 262944_i32
  DXVA_ModeNone = "1b81be00-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH261_A = "1b81be01-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH261_B = "1b81be02-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH263_A = "1b81be03-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH263_B = "1b81be04-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH263_C = "1b81be05-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH263_D = "1b81be06-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH263_E = "1b81be07-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH263_F = "1b81be08-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeMPEG1_A = "1b81be09-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeMPEG1_VLD = "6f3ec719-3735-42cc-8063-65cc3cb36616"
  DXVA_ModeMPEG2_A = "1b81be0a-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeMPEG2_B = "1b81be0b-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeMPEG2_C = "1b81be0c-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeMPEG2_D = "1b81be0d-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeMPEG2and1_VLD = "86695f12-340e-4f04-9fd3-9253dd327460"
  DXVA_ModeH264_A = "1b81be64-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH264_B = "1b81be65-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH264_C = "1b81be66-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH264_D = "1b81be67-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH264_E = "1b81be68-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH264_F = "1b81be69-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH264_VLD_WithFMOASO_NoFGT = "d5f04ff9-3418-45d8-9561-32a76aae2ddd"
  DXVA_ModeH264_VLD_Stereo_Progressive_NoFGT = "d79be8da-0cf1-4c81-b82a-69a4e236f43d"
  DXVA_ModeH264_VLD_Stereo_NoFGT = "f9aaccbb-c2b6-4cfc-8779-5707b1760552"
  DXVA_ModeH264_VLD_Multiview_NoFGT = "705b9d82-76cf-49d6-b7e6-ac8872db013c"
  DXVA_ModeWMV8_A = "1b81be80-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeWMV8_B = "1b81be81-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeWMV9_A = "1b81be90-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeWMV9_B = "1b81be91-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeWMV9_C = "1b81be94-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeVC1_A = "1b81bea0-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeVC1_B = "1b81bea1-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeVC1_C = "1b81bea2-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeVC1_D = "1b81bea3-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeVC1_D2010 = "1b81bea4-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeMPEG4pt2_VLD_Simple = "efd64d74-c9e8-41d7-a5e9-e9b0e39fa319"
  DXVA_ModeMPEG4pt2_VLD_AdvSimple_NoGMC = "ed418a9f-010d-4eda-9ae3-9a65358d8d2e"
  DXVA_ModeMPEG4pt2_VLD_AdvSimple_GMC = "ab998b5b-4258-44a9-9feb-94e597a6baae"
  DXVA_ModeHEVC_VLD_Main = "5b11d51b-2f4c-4452-bcc3-09f2a1160cc0"
  DXVA_ModeHEVC_VLD_Main10 = "107af0e0-ef1a-4d19-aba8-67a163073d13"
  DXVA_ModeVP9_VLD_Profile0 = "463707f8-a1d0-4585-876d-83aa6d60b89e"
  DXVA_ModeVP9_VLD_10bit_Profile2 = "a4c749ef-6ecf-48aa-8448-50a7a1165ff7"
  DXVA_ModeVP8_VLD = "90b899ea-3a62-4705-88b3-8df04b2744e7"
  DXVA_ModeAV1_VLD_Profile0 = "b8be4ccb-cf53-46ba-8d59-d6b8a6da5d2a"
  DXVA_ModeAV1_VLD_Profile1 = "6936ff0f-45b1-4163-9cc1-646ef6946108"
  DXVA_ModeAV1_VLD_Profile2 = "0c5f2aa1-e541-4089-bb7b-98110a19d7c8"
  DXVA_ModeAV1_VLD_12bit_Profile2 = "17127009-a00f-4ce1-994e-bf4081f6f3f0"
  DXVA_ModeAV1_VLD_12bit_Profile2_420 = "2d80bed6-9cac-4835-9e91-327bbc4f9ee8"
  DXVA_NoEncrypt = "1b81bed0-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_RESTRICTED_MODE_UNRESTRICTED = 65535_u32
  DXVA_RESTRICTED_MODE_H261_A = 1_u32
  DXVA_RESTRICTED_MODE_H261_B = 2_u32
  DXVA_RESTRICTED_MODE_H263_A = 3_u32
  DXVA_RESTRICTED_MODE_H263_B = 4_u32
  DXVA_RESTRICTED_MODE_H263_C = 5_u32
  DXVA_RESTRICTED_MODE_H263_D = 6_u32
  DXVA_RESTRICTED_MODE_H263_E = 7_u32
  DXVA_RESTRICTED_MODE_H263_F = 8_u32
  DXVA_RESTRICTED_MODE_MPEG1_A = 9_u32
  DXVA_RESTRICTED_MODE_MPEG2_A = 10_u32
  DXVA_RESTRICTED_MODE_MPEG2_B = 11_u32
  DXVA_RESTRICTED_MODE_MPEG2_C = 12_u32
  DXVA_RESTRICTED_MODE_MPEG2_D = 13_u32
  DXVA_RESTRICTED_MODE_MPEG1_VLD = 16_u32
  DXVA_RESTRICTED_MODE_MPEG2and1_VLD = 17_u32
  DXVA_RESTRICTED_MODE_H264_A = 100_u32
  DXVA_RESTRICTED_MODE_H264_B = 101_u32
  DXVA_RESTRICTED_MODE_H264_C = 102_u32
  DXVA_RESTRICTED_MODE_H264_D = 103_u32
  DXVA_RESTRICTED_MODE_H264_E = 104_u32
  DXVA_RESTRICTED_MODE_H264_F = 105_u32
  DXVA_RESTRICTED_MODE_H264_VLD_WITHFMOASO_NOFGT = 112_u32
  DXVA_RESTRICTED_MODE_H264_VLD_STEREO_PROGRESSIVE_NOFGT = 113_u32
  DXVA_RESTRICTED_MODE_H264_VLD_STEREO_NOFGT = 114_u32
  DXVA_RESTRICTED_MODE_H264_VLD_MULTIVIEW_NOFGT = 115_u32
  DXVA_RESTRICTED_MODE_WMV8_A = 128_u32
  DXVA_RESTRICTED_MODE_WMV8_B = 129_u32
  DXVA_RESTRICTED_MODE_WMV9_A = 144_u32
  DXVA_RESTRICTED_MODE_WMV9_B = 145_u32
  DXVA_RESTRICTED_MODE_WMV9_C = 148_u32
  DXVA_RESTRICTED_MODE_VC1_A = 160_u32
  DXVA_RESTRICTED_MODE_VC1_B = 161_u32
  DXVA_RESTRICTED_MODE_VC1_C = 162_u32
  DXVA_RESTRICTED_MODE_VC1_D = 163_u32
  DXVA_RESTRICTED_MODE_VC1_D2010 = 164_u32
  DXVA_RESTRICTED_MODE_MPEG4PT2_VLD_SIMPLE = 176_u32
  DXVA_RESTRICTED_MODE_MPEG4PT2_VLD_ADV_SIMPLE_NOGMC = 177_u32
  DXVA_RESTRICTED_MODE_MPEG4PT2_VLD_ADV_SIMPLE_GMC = 178_u32
  DXVA_RESTRICTED_MODE_WMV8_POSTPROC = 128_u32
  DXVA_RESTRICTED_MODE_WMV8_MOCOMP = 129_u32
  DXVA_RESTRICTED_MODE_WMV9_POSTPROC = 144_u32
  DXVA_RESTRICTED_MODE_WMV9_MOCOMP = 145_u32
  DXVA_RESTRICTED_MODE_WMV9_IDCT = 148_u32
  DXVA_RESTRICTED_MODE_VC1_POSTPROC = 160_u32
  DXVA_RESTRICTED_MODE_VC1_MOCOMP = 161_u32
  DXVA_RESTRICTED_MODE_VC1_IDCT = 162_u32
  DXVA_RESTRICTED_MODE_VC1_VLD = 163_u32
  DXVA_RESTRICTED_MODE_H264_MOCOMP_NOFGT = 100_u32
  DXVA_RESTRICTED_MODE_H264_MOCOMP_FGT = 101_u32
  DXVA_RESTRICTED_MODE_H264_IDCT_NOFGT = 102_u32
  DXVA_RESTRICTED_MODE_H264_IDCT_FGT = 103_u32
  DXVA_RESTRICTED_MODE_H264_VLD_NOFGT = 104_u32
  DXVA_RESTRICTED_MODE_H264_VLD_FGT = 105_u32
  DXVA_COMPBUFFER_TYPE_THAT_IS_NOT_USED = 0_u32
  DXVA_PICTURE_DECODE_BUFFER = 1_u32
  DXVA_MACROBLOCK_CONTROL_BUFFER = 2_u32
  DXVA_RESIDUAL_DIFFERENCE_BUFFER = 3_u32
  DXVA_DEBLOCKING_CONTROL_BUFFER = 4_u32
  DXVA_INVERSE_QUANTIZATION_MATRIX_BUFFER = 5_u32
  DXVA_SLICE_CONTROL_BUFFER = 6_u32
  DXVA_BITSTREAM_DATA_BUFFER = 7_u32
  DXVA_AYUV_BUFFER = 8_u32
  DXVA_IA44_SURFACE_BUFFER = 9_u32
  DXVA_DPXD_SURFACE_BUFFER = 10_u32
  DXVA_HIGHLIGHT_BUFFER = 11_u32
  DXVA_DCCMD_SURFACE_BUFFER = 12_u32
  DXVA_ALPHA_BLEND_COMBINATION_BUFFER = 13_u32
  DXVA_PICTURE_RESAMPLE_BUFFER = 14_u32
  DXVA_READ_BACK_BUFFER = 15_u32
  DXVA_MOTION_VECTOR_BUFFER = 16_u32
  DXVA_FILM_GRAIN_BUFFER = 17_u32
  DXVA_NUM_TYPES_COMP_BUFFERS = 18_u32
  DXVA_PICTURE_DECODING_FUNCTION = 1_u32
  DXVA_ALPHA_BLEND_DATA_LOAD_FUNCTION = 2_u32
  DXVA_ALPHA_BLEND_COMBINATION_FUNCTION = 3_u32
  DXVA_PICTURE_RESAMPLE_FUNCTION = 4_u32
  DXVA_DEBLOCKING_FILTER_FUNCTION = 5_u32
  DXVA_FILM_GRAIN_SYNTHESIS_FUNCTION = 6_u32
  DXVA_STATUS_REPORTING_FUNCTION = 7_u32
  DXVA_EXECUTE_RETURN_OK = 0_u32
  DXVA_EXECUTE_RETURN_DATA_ERROR_MINOR = 1_u32
  DXVA_EXECUTE_RETURN_DATA_ERROR_SIGNIF = 2_u32
  DXVA_EXECUTE_RETURN_DATA_ERROR_SEVERE = 3_u32
  DXVA_EXECUTE_RETURN_OTHER_ERROR_SEVERE = 4_u32
  DXVA_QUERYORREPLYFUNCFLAG_DECODER_PROBE_QUERY = 16777201_u32
  DXVA_QUERYORREPLYFUNCFLAG_DECODER_LOCK_QUERY = 16777205_u32
  DXVA_QUERYORREPLYFUNCFLAG_ACCEL_PROBE_OK_COPY = 16777208_u32
  DXVA_QUERYORREPLYFUNCFLAG_ACCEL_PROBE_OK_PLUS = 16777209_u32
  DXVA_QUERYORREPLYFUNCFLAG_ACCEL_LOCK_OK_COPY = 16777212_u32
  DXVA_QUERYORREPLYFUNCFLAG_ACCEL_PROBE_FALSE_PLUS = 16777211_u32
  DXVA_QUERYORREPLYFUNCFLAG_ACCEL_LOCK_FALSE_PLUS = 16777215_u32
  DXVA_ENCRYPTPROTOCOLFUNCFLAG_HOST = 16776960_u32
  DXVA_ENCRYPTPROTOCOLFUNCFLAG_ACCEL = 16776968_u32
  DXVA_CHROMA_FORMAT_420 = 1_u32
  DXVA_CHROMA_FORMAT_422 = 2_u32
  DXVA_CHROMA_FORMAT_444 = 3_u32
  DXVA_PICTURE_STRUCTURE_TOP_FIELD = 1_u32
  DXVA_PICTURE_STRUCTURE_BOTTOM_FIELD = 2_u32
  DXVA_PICTURE_STRUCTURE_FRAME = 3_u32
  DXVA_BIDIRECTIONAL_AVERAGING_MPEG2_ROUND = 0_u32
  DXVA_BIDIRECTIONAL_AVERAGING_H263_TRUNC = 1_u32
  DXVA_MV_PRECISION_AND_CHROMA_RELATION_MPEG2 = 0_u32
  DXVA_MV_PRECISION_AND_CHROMA_RELATION_H263 = 1_u32
  DXVA_MV_PRECISION_AND_CHROMA_RELATION_H261 = 2_u32
  DXVA_SCAN_METHOD_ZIG_ZAG = 0_u32
  DXVA_SCAN_METHOD_ALTERNATE_VERTICAL = 1_u32
  DXVA_SCAN_METHOD_ALTERNATE_HORIZONTAL = 2_u32
  DXVA_SCAN_METHOD_ARBITRARY = 3_u32
  DXVA_BITSTREAM_CONCEALMENT_NEED_UNLIKELY = 0_u32
  DXVA_BITSTREAM_CONCEALMENT_NEED_MILD = 1_u32
  DXVA_BITSTREAM_CONCEALMENT_NEED_LIKELY = 2_u32
  DXVA_BITSTREAM_CONCEALMENT_NEED_SEVERE = 3_u32
  DXVA_BITSTREAM_CONCEALMENT_METHOD_UNSPECIFIED = 0_u32
  DXVA_BITSTREAM_CONCEALMENT_METHOD_INTRA = 1_u32
  DXVA_BITSTREAM_CONCEALMENT_METHOD_FORWARD = 2_u32
  DXVA_BITSTREAM_CONCEALMENT_METHOD_BACKWARD = 3_u32
  DXVA_USUAL_BLOCK_WIDTH = 8_u32
  DXVA_USUAL_BLOCK_HEIGHT = 8_u32
  DXVA_NumMV_OBMC_off_BinPBwith4MV_off = 4_u32
  DXVA_NumMV_OBMC_off_BinPBwith4MV_on = 5_u32
  DXVA_NumMV_OBMC_on__BinPB_off = 10_u32
  DXVA_NumMV_OBMC_on__BinPB_on = 11_u32
  DXVA_CONFIG_DATA_TYPE_IA44 = 0_u32
  DXVA_CONFIG_DATA_TYPE_AI44 = 1_u32
  DXVA_CONFIG_DATA_TYPE_DPXD = 2_u32
  DXVA_CONFIG_DATA_TYPE_AYUV = 3_u32
  DXVA_CONFIG_BLEND_TYPE_FRONT_BUFFER = 0_u32
  DXVA_CONFIG_BLEND_TYPE_BACK_HARDWARE = 1_u32
  DXVA_ExtColorData_ShiftBase = 8_u32
  DXVA_DeinterlaceBobDevice = "335aa36e-7884-43a4-9c91-7f87faf3e37e"
  DXVA_DeinterlaceContainerDevice = "0e85cb93-3046-4ff0-aecc-d58cb5f035fd"
  MAX_DEINTERLACE_SURFACES = 32_u32
  DXVA_DeinterlaceBltFnCode = 1_u32
  DXVA_DeinterlaceBltExFnCode = 2_u32
  MAX_DEINTERLACE_DEVICE_GUIDS = 32_u32
  DXVA_DeinterlaceQueryAvailableModesFnCode = 1_u32
  DXVA_DeinterlaceQueryModeCapsFnCode = 2_u32
  DXVA_ProcAmpControlDevice = "9f200913-2ffd-4056-9f1e-e1b508f22dcf"
  DXVA_ProcAmpControlQueryCapsFnCode = 3_u32
  DXVA_ProcAmpControlQueryRangeFnCode = 4_u32
  DXVA_ProcAmpControlBltFnCode = 1_u32
  DXVA_COPPDevice = "d2457add-8999-45ed-8a8a-d1aa047ba4d5"
  DXVA_COPPGetCertificateLengthFnCode = 1_u32
  DXVA_COPPKeyExchangeFnCode = 2_u32
  DXVA_COPPSequenceStartFnCode = 3_u32
  DXVA_COPPCommandFnCode = 4_u32
  DXVA_COPPSetProtectionLevel = "9bb9327c-4eb5-4727-9f00-b42b0919c0da"
  COPP_NoProtectionLevelAvailable = -1_i32
  COPP_DefaultProtectionLevel = 0_u32
  DXVA_COPPSetSignaling = "09a631a5-d684-4c60-8e4d-d3bb0f0be3ee"
  COPP_ImageAspectRatio_EN300294_Mask = 7_u32
  DXVA_COPPQueryStatusFnCode = 5_u32
  DXVA_COPPQueryConnectorType = "81d0bfd5-6afe-48c2-99c0-95a08f97c5da"
  DXVA_COPPQueryProtectionType = "38f2a801-9a6c-48bb-9107-b6696e6f1797"
  DXVA_COPPQueryLocalProtectionLevel = "b2075857-3eda-4d5d-88db-748f8c1a0549"
  DXVA_COPPQueryGlobalProtectionLevel = "1957210a-7766-452a-b99a-d27aed54f03a"
  DXVA_COPPQueryDisplayData = "d7bf1ba3-ad13-4f8e-af98-0dcb3ca204cc"
  DXVA_COPPQueryHDCPKeyData = "0db59d74-a992-492e-a0bd-c23fda564e00"
  DXVA_COPPQueryBusData = "c6f4d673-6174-4184-8e35-f6db5200bcba"
  DXVA_COPPQuerySignaling = "6629a591-3b79-4cf3-924a-11e8e7811671"
  DXVA2Trace_Control = "a0386e75-f70c-464c-a9ce-33c44e091623"
  DXVA2Trace_DecodeDevCreated = "b4de17a1-c5b2-44fe-86d5-d97a648114ff"
  DXVA2Trace_DecodeDevDestroyed = "853ebdf2-4160-421d-8893-63dcea4f18bb"
  DXVA2Trace_DecodeDevBeginFrame = "9fd1acf6-44cb-4637-bc62-2c11a9608f90"
  DXVA2Trace_DecodeDevExecute = "850aeb4c-d19a-4609-b3b4-bcbf0e22121e"
  DXVA2Trace_DecodeDevGetBuffer = "57b128fb-72cb-4137-a575-d91fa3160897"
  DXVA2Trace_DecodeDevEndFrame = "9fb3cb33-47dc-4899-98c8-c0c6cd7cd3cb"
  DXVA2Trace_VideoProcessDevCreated = "895508c6-540d-4c87-98f8-8dcbf2dabb2a"
  DXVA2Trace_VideoProcessDevDestroyed = "f97f30b1-fb49-42c7-8ee8-88bdfa92d4e2"
  DXVA2Trace_VideoProcessBlt = "69089cc0-71ab-42d0-953a-2887bf05a8af"
  DTV_CardStatus_Inserted = 0_u32
  DTV_CardStatus_Removed = 1_u32
  DTV_CardStatus_Error = 2_u32
  DTV_CardStatus_FirmwareDownload = 3_u32
  OCUR_PAIRING_PROTOCOL_VERSION = 2_u32
  PBDA_PAIRING_PROTOCOL_VERSION = 3_u32
  DTV_MMIMessage_Open = 0_u32
  DTV_MMIMessage_Close = 1_u32
  DTV_Entitlement_CanDecrypt = 0_u32
  DTV_Entitlement_NotEntitled = 1_u32
  DTV_Entitlement_TechnicalFailure = 2_u32
  AudioType_Standard = 0_u32
  AudioType_Music_And_Effects = 1_u32
  AudioType_Visually_Impaired = 2_u32
  AudioType_Hearing_Impaired = 3_u32
  AudioType_Dialogue = 4_u32
  AudioType_Commentary = 5_u32
  AudioType_Emergency = 6_u32
  AudioType_Voiceover = 7_u32
  AudioType_Reserved = -1_i32
  MAX_COUNTRY_CODE_STRING = 3_u32
  PARENTAL_CONTROL_TIME_RANGE = 1_u32
  REQUIRED_PARENTAL_CONTROL_TIME_RANGE = 2_u32
  PARENTAL_CONTROL_CONTENT_RATING = 256_u32
  PARENTAL_CONTROL_ATTRIB_VIOLENCE = 512_u32
  PARENTAL_CONTROL_ATTRIB_LANGUAGE = 513_u32
  PARENTAL_CONTROL_ATTRIB_SEXUAL = 514_u32
  PARENTAL_CONTROL_ATTRIB_DIALOGUE = 515_u32
  PARENTAL_CONTROL_ATTRIB_FANTASY = 516_u32
  PARENTAL_CONTROL_VALUE_UNDEFINED = 0_u32
  MPEG2_FILTER_VERSION_1_SIZE = 124_u32
  MPEG2_FILTER_VERSION_2_SIZE = 133_u32
  SID_MSVidCtl_CurrentAudioEndpoint = "cf9a88f4-abcf-4ed8-9b74-7db33445459e"
  STREAMBUFFER_EC_BASE = 806_u32
  EVENTID_SBE2RecControlStarted = "8966a89e-f83e-4c0e-bc3b-bfa7649e04cb"
  EVENTID_SBE2RecControlStopped = "454b1ec8-0c9b-4caa-b1a1-1e7a2666f6c3"
  SBE2_STREAM_DESC_EVENT = "2313a4ed-bf2d-454f-ad8a-d95ba7f91fee"
  SBE2_V1_STREAMS_CREATION_EVENT = "000fcf09-97f5-46ac-9769-7a83b35384fb"
  SBE2_V2_STREAMS_CREATION_EVENT = "a72530a3-0344-4cab-a2d0-fe937dbdcab3"
  SBE2_STREAM_DESC_VERSION = 1_u32
  SID_DRMSecureServiceChannel = "c4c4c4c4-0049-4e2b-98fb-9537f6ce516d"
  CLSID_ETFilterEncProperties = "c4c4c481-0049-4e2b-98fb-9537f6ce516d"
  CLSID_ETFilterTagProperties = "c4c4c491-0049-4e2b-98fb-9537f6ce516d"
  CLSID_PTFilter = "9cd31617-b303-4f96-8330-2eb173ea4dc6"
  CLSID_DTFilterEncProperties = "c4c4c482-0049-4e2b-98fb-9537f6ce516d"
  CLSID_DTFilterTagProperties = "c4c4c492-0049-4e2b-98fb-9537f6ce516d"
  CLSID_XDSCodecProperties = "c4c4c483-0049-4e2b-98fb-9537f6ce516d"
  CLSID_XDSCodecTagProperties = "c4c4c493-0049-4e2b-98fb-9537f6ce516d"
  CLSID_CPCAFiltersCategory = "c4c4c4fc-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_XDSCodecNewXDSRating = "c4c4c4e0-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_XDSCodecDuplicateXDSRating = "c4c4c4df-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_XDSCodecNewXDSPacket = "c4c4c4e1-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_DTFilterRatingChange = "c4c4c4e2-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_DTFilterRatingsBlock = "c4c4c4e3-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_DTFilterRatingsUnblock = "c4c4c4e4-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_DTFilterXDSPacket = "c4c4c4e5-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_ETFilterEncryptionOn = "c4c4c4e6-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_ETFilterEncryptionOff = "c4c4c4e7-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_DTFilterCOPPUnblock = "c4c4c4e8-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_EncDecFilterError = "c4c4c4e9-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_DTFilterCOPPBlock = "c4c4c4ea-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_ETFilterCopyOnce = "c4c4c4eb-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_ETFilterCopyNever = "c4c4c4f0-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_DTFilterDataFormatOK = "c4c4c4ec-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_DTFilterDataFormatFailure = "c4c4c4ed-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_ETDTFilterLicenseOK = "c4c4c4ee-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_ETDTFilterLicenseFailure = "c4c4c4ef-0049-4e2b-98fb-9537f6ce516d"
  MEDIASUBTYPE_ETDTFilter_Tagged = "c4c4c4d0-0049-4e2b-98fb-9537f6ce516d"
  FORMATTYPE_ETDTFilter_Tagged = "c4c4c4d1-0049-4e2b-98fb-9537f6ce516d"
  MEDIASUBTYPE_CPFilters_Processed = "46adbd28-6fd0-4796-93b2-155c51dc048d"
  FORMATTYPE_CPFilters_Processed = "6739b36f-1d5f-4ac2-8192-28bb0e73d16a"
  EVENTID_EncDecFilterEvent = "4a1b465b-0fb9-4159-afbd-e33006a0f9f4"
  EVENTID_FormatNotSupportedEvent = "24b2280a-b2aa-4777-bf65-63f35e7b024a"
  EVENTID_DemultiplexerFilterDiscontinuity = "16155770-aed5-475c-bb98-95a33070df0c"
  DSATTRIB_WMDRMProtectionInfo = "40749583-6b9d-4eec-b43c-67a1801e1a9b"
  DSATTRIB_BadSampleInfo = "e4846dda-5838-42b4-b897-6f7e5faa2f2f"
  MPEG_PAT_PID = 0_u32
  MPEG_PAT_TID = 0_u32
  MPEG_CAT_PID = 1_u32
  MPEG_CAT_TID = 1_u32
  MPEG_PMT_TID = 2_u32
  MPEG_TSDT_PID = 2_u32
  MPEG_TSDT_TID = 3_u32
  ATSC_MGT_PID = 8187_u32
  ATSC_MGT_TID = 199_u32
  ATSC_VCT_PID = 8187_u32
  ATSC_VCT_TERR_TID = 200_u32
  ATSC_VCT_CABL_TID = 201_u32
  ATSC_EIT_TID = 203_u32
  ATSC_ETT_TID = 204_u32
  ATSC_RRT_TID = 202_u32
  ATSC_RRT_PID = 8187_u32
  ATSC_STT_PID = 8187_u32
  ATSC_STT_TID = 205_u32
  ATSC_PIT_TID = 208_u32
  DVB_NIT_PID = 16_u32
  DVB_NIT_ACTUAL_TID = 64_u32
  DVB_NIT_OTHER_TID = 65_u32
  DVB_SDT_PID = 17_u32
  DVB_SDT_ACTUAL_TID = 66_u32
  DVB_SDT_OTHER_TID = 70_u32
  DVB_BAT_PID = 17_u32
  DVB_BAT_TID = 74_u32
  DVB_EIT_PID = 18_u32
  DVB_EIT_ACTUAL_TID = 78_u32
  DVB_EIT_OTHER_TID = 79_u32
  DVB_RST_PID = 19_u32
  DVB_RST_TID = 113_u32
  DVB_TDT_PID = 20_u32
  DVB_TDT_TID = 112_u32
  DVB_ST_PID_16 = 16_u32
  DVB_ST_PID_17 = 17_u32
  DVB_ST_PID_18 = 18_u32
  DVB_ST_PID_19 = 19_u32
  DVB_ST_PID_20 = 20_u32
  DVB_ST_TID = 114_u32
  ISDB_ST_TID = 114_u32
  DVB_TOT_PID = 20_u32
  DVB_TOT_TID = 115_u32
  DVB_DIT_PID = 30_u32
  DVB_DIT_TID = 126_u32
  DVB_SIT_PID = 31_u32
  DVB_SIT_TID = 127_u32
  ISDB_EMM_TID = 133_u32
  ISDB_BIT_PID = 36_u32
  ISDB_BIT_TID = 196_u32
  ISDB_NBIT_PID = 37_u32
  ISDB_NBIT_MSG_TID = 197_u32
  ISDB_NBIT_REF_TID = 198_u32
  ISDB_LDT_PID = 37_u32
  ISDB_LDT_TID = 199_u32
  ISDB_SDTT_PID = 35_u32
  ISDB_SDTT_ALT_PID = 40_u32
  ISDB_SDTT_TID = 195_u32
  ISDB_CDT_PID = 41_u32
  ISDB_CDT_TID = 200_u32
  SCTE_EAS_TID = 216_u32
  SCTE_EAS_IB_PID = 8187_u32
  SCTE_EAS_OOB_PID = 8188_u32
  CLSID_Mpeg2TableFilter = "752845f1-758f-4c83-a043-4270c593308e"
  ATSC_ETM_LOCATION_NOT_PRESENT = 0_u32
  ATSC_ETM_LOCATION_IN_PTC_FOR_PSIP = 1_u32
  ATSC_ETM_LOCATION_IN_PTC_FOR_EVENT = 2_u32
  ATSC_ETM_LOCATION_RESERVED = 3_u32
  SAMPLE_SEQ_SEQUENCE_HEADER = 1_u32
  SAMPLE_SEQ_GOP_HEADER = 2_u32
  SAMPLE_SEQ_PICTURE_HEADER = 3_u32
  SAMPLE_SEQ_SEQUENCE_START = 1_u32
  SAMPLE_SEQ_SEEK_POINT = 2_u32
  SAMPLE_SEQ_FRAME_START = 3_u32
  SAMPLE_SEQ_CONTENT_UNKNOWN = 0_u32
  SAMPLE_SEQ_CONTENT_I_FRAME = 1_u32
  SAMPLE_SEQ_CONTENT_P_FRAME = 2_u32
  SAMPLE_SEQ_CONTENT_B_FRAME = 3_u32
  SAMPLE_SEQ_CONTENT_STANDALONE_FRAME = 1_u32
  SAMPLE_SEQ_CONTENT_REF_FRAME = 2_u32
  SAMPLE_SEQ_CONTENT_NONREF_FRAME = 3_u32
  COMPONENT_TAG_CAPTION_MIN = 48_u32
  COMPONENT_TAG_CAPTION_MAX = 55_u32
  COMPONENT_TAG_SUPERIMPOSE_MIN = 56_u32
  COMPONENT_TAG_SUPERIMPOSE_MAX = 63_u32
  DVBS_SCAN_TABLE_MAX_SIZE = 400_u32
  G_wszexcludescriptstreamdeliverysynchronization = "ExcludeScriptStreamDeliverySynchronization"
  MPEG2_BASE = 512_u32
  MPEG2_S_MORE_DATA_AVAILABLE = 262656_i32
  MPEG2_S_NO_MORE_DATA_AVAILABLE = 262657_i32
  MPEG2_S_SG_INFO_FOUND = 262658_i32
  MPEG2_S_SG_INFO_NOT_FOUND = 262659_i32
  MPEG2_S_MPE_INFO_FOUND = 262660_i32
  MPEG2_S_MPE_INFO_NOT_FOUND = 262661_i32
  MPEG2_S_NEW_MODULE_VERSION = 262662_i32
  MPEG2_E_UNINITIALIZED = -2147220992_i32
  MPEG2_E_ALREADY_INITIALIZED = -2147220991_i32
  MPEG2_E_OUT_OF_BOUNDS = -2147220990_i32
  MPEG2_E_MALFORMED_TABLE = -2147220989_i32
  MPEG2_E_UNDEFINED = -2147220988_i32
  MPEG2_E_NOT_PRESENT = -2147220987_i32
  MPEG2_E_SECTION_NOT_FOUND = -2147220986_i32
  MPEG2_E_TX_STREAM_UNAVAILABLE = -2147220985_i32
  MPEG2_E_SERVICE_ID_NOT_FOUND = -2147220984_i32
  MPEG2_E_SERVICE_PMT_NOT_FOUND = -2147220983_i32
  MPEG2_E_DSI_NOT_FOUND = -2147220982_i32
  MPEG2_E_SERVER_UNAVAILABLE = -2147220981_i32
  MPEG2_E_INVALID_CAROUSEL_ID = -2147220980_i32
  MPEG2_E_MALFORMED_DSMCC_MESSAGE = -2147220979_i32
  MPEG2_E_INVALID_SG_OBJECT_KIND = -2147220978_i32
  MPEG2_E_OBJECT_NOT_FOUND = -2147220977_i32
  MPEG2_E_OBJECT_KIND_NOT_A_DIRECTORY = -2147220976_i32
  MPEG2_E_OBJECT_KIND_NOT_A_FILE = -2147220975_i32
  MPEG2_E_FILE_OFFSET_TOO_BIG = -2147220974_i32
  MPEG2_E_STREAM_STOPPED = -2147220973_i32
  MPEG2_E_REGISTRY_ACCESS_FAILED = -2147220972_i32
  MPEG2_E_INVALID_UDP_PORT = -2147220971_i32
  MPEG2_E_DATA_SOURCE_FAILED = -2147220970_i32
  MPEG2_E_DII_NOT_FOUND = -2147220969_i32
  MPEG2_E_DSHOW_PIN_NOT_FOUND = -2147220968_i32
  MPEG2_E_BUFFER_TOO_SMALL = -2147220967_i32
  MPEG2_E_MISSING_SECTIONS = -2147220966_i32
  MPEG2_E_TOO_MANY_SECTIONS = -2147220965_i32
  MPEG2_E_NEXT_TABLE_OPS_NOT_AVAILABLE = -2147220964_i32
  MPEG2_E_INCORRECT_DESCRIPTOR_TAG = -2147220963_i32
  MSDRI_S_MMI_PENDING = 2_i32
  MSDRI_S_PENDING = 1_i32
  BDA_E_FAILURE = -1073479679_i32
  BDA_E_NOT_IMPLEMENTED = -1073479678_i32
  BDA_E_NO_SUCH_COMMAND = -1073479677_i32
  BDA_E_OUT_OF_BOUNDS = -1073479676_i32
  BDA_E_INVALID_SCHEMA = -1073479675_i32
  BDA_E_INVALID_HANDLE = -1073479674_i32
  BDA_E_INVALID_TYPE = -1073479673_i32
  BDA_E_READ_ONLY = -1073479672_i32
  BDA_E_ACCESS_DENIED = -1073479671_i32
  BDA_E_NOT_FOUND = -1073479670_i32
  BDA_E_BUFFER_TOO_SMALL = -1073479669_i32
  BDA_E_OUT_OF_RESOURCES = -1073479668_i32
  BDA_E_OUT_OF_MEMORY = -1073479667_i32
  BDA_E_DISABLED = -1073479666_i32
  BDA_E_NO_HANDLER = -1073479665_i32
  BDA_E_INVALID_LANGUAGE = -1073479664_i32
  BDA_E_TIMEOUT_ELAPSED = -1073479663_i32
  BDA_E_NO_MORE_EVENTS = -1073475583_i32
  BDA_E_NO_MORE_DATA = -1073475582_i32
  BDA_E_TUNER_INITIALIZING = -1073467391_i32
  BDA_E_TUNER_REQUIRED = -1073467390_i32
  BDA_E_TUNER_CONFLICT = -1073467389_i32
  BDA_E_INVALID_TUNE_REQUEST = -1073467388_i32
  BDA_E_INVALID_ENTITLEMENT_TOKEN = -1073463295_i32
  BDA_E_INVALID_CAPTURE_TOKEN = -1073463294_i32
  BDA_E_WOULD_DISRUPT_STREAMING = -1073463293_i32
  BDA_E_INVALID_PURCHASE_TOKEN = -1073463292_i32
  BDA_E_IPNETWORK_ERROR = -1073459199_i32
  BDA_E_IPNETWORK_ADDRESS_NOT_FOUND = -1073459198_i32
  BDA_E_IPNETWORK_TIMEOUT = -1073459197_i32
  BDA_E_IPNETWORK_UNAVAILABLE = -1073459196_i32
  BDA_E_TUNE_FAILED_SDV01 = -1073455103_i32
  BDA_E_TUNE_FAILED_SDV02 = -1073455102_i32
  BDA_E_TUNE_FAILED_SDV03 = -1073455101_i32
  BDA_E_TUNE_FAILED_SDV04 = -1073455100_i32
  BDA_E_TUNE_FAILED_SDV05 = -1073455099_i32
  BDA_E_TUNE_FAILED_SDV06 = -1073455098_i32
  BDA_E_TUNE_FAILED_SDV07 = -1073455097_i32
  BDA_E_TUNE_FAILED_SDV08 = -1073455096_i32
  BDA_E_TUNE_FAILED_SDVFF = -1073454849_i32
  BDA_E_WMDRM_INVALID_SIGNATURE = -1073418239_i32
  BDA_E_WMDRM_INVALID_CERTIFICATE = -1073418238_i32
  BDA_E_WMDRM_INVALID_VERSION = -1073418236_i32
  BDA_E_WMDRM_INVALID_DATE = -1073418235_i32
  BDA_E_WMDRM_INVALID_PROXIMITY = -1073418234_i32
  BDA_E_WMDRM_KEY_ID_NOT_FOUND = -1073418232_i32
  SPECIFYPAGES_STATISTICS = "4c437b92-6e9e-11d1-a704-006097c4e476"
  G_wszstreambufferrecordingduration = "Duration"
  G_wszstreambufferrecordingbitrate = "Bitrate"
  G_wszstreambufferrecordingseekable = "Seekable"
  G_wszstreambufferrecordingstridable = "Stridable"
  G_wszstreambufferrecordingbroadcast = "Broadcast"
  G_wszstreambufferrecordingprotected = "Is_Protected"
  G_wszstreambufferrecordingtrusted = "Is_Trusted"
  G_wszstreambufferrecordingsignature_name = "Signature_Name"
  G_wszstreambufferrecordinghasaudio = "HasAudio"
  G_wszstreambufferrecordinghasimage = "HasImage"
  G_wszstreambufferrecordinghasscript = "HasScript"
  G_wszstreambufferrecordinghasvideo = "HasVideo"
  G_wszstreambufferrecordingcurrentbitrate = "CurrentBitrate"
  G_wszstreambufferrecordingoptimalbitrate = "OptimalBitrate"
  G_wszstreambufferrecordinghasattachedimages = "HasAttachedImages"
  G_wszstreambufferrecordingskipbackward = "Can_Skip_Backward"
  G_wszstreambufferrecordingskipforward = "Can_Skip_Forward"
  G_wszstreambufferrecordingnumberofframes = "NumberOfFrames"
  G_wszstreambufferrecordingfilesize = "FileSize"
  G_wszstreambufferrecordinghasarbitrarydatastream = "HasArbitraryDataStream"
  G_wszstreambufferrecordinghasfiletransferstream = "HasFileTransferStream"
  G_wszstreambufferrecordingtitle = "Title"
  G_wszstreambufferrecordingauthor = "Author"
  G_wszstreambufferrecordingdescription = "Description"
  G_wszstreambufferrecordingrating = "Rating"
  G_wszstreambufferrecordingcopyright = "Copyright"
  G_wszstreambufferrecordinguse_drm = "Use_DRM"
  G_wszstreambufferrecordingdrm_flags = "DRM_Flags"
  G_wszstreambufferrecordingdrm_level = "DRM_Level"
  G_wszstreambufferrecordingalbumtitle = "WM/AlbumTitle"
  G_wszstreambufferrecordingtrack = "WM/Track"
  G_wszstreambufferrecordingpromotionurl = "WM/PromotionURL"
  G_wszstreambufferrecordingalbumcoverurl = "WM/AlbumCoverURL"
  G_wszstreambufferrecordinggenre = "WM/Genre"
  G_wszstreambufferrecordingyear = "WM/Year"
  G_wszstreambufferrecordinggenreid = "WM/GenreID"
  G_wszstreambufferrecordingmcdi = "WM/MCDI"
  G_wszstreambufferrecordingcomposer = "WM/Composer"
  G_wszstreambufferrecordinglyrics = "WM/Lyrics"
  G_wszstreambufferrecordingtracknumber = "WM/TrackNumber"
  G_wszstreambufferrecordingtoolname = "WM/ToolName"
  G_wszstreambufferrecordingtoolversion = "WM/ToolVersion"
  G_wszstreambufferrecordingisvbr = "IsVBR"
  G_wszstreambufferrecordingalbumartist = "WM/AlbumArtist"
  G_wszstreambufferrecordingbannerimagetype = "BannerImageType"
  G_wszstreambufferrecordingbannerimagedata = "BannerImageData"
  G_wszstreambufferrecordingbannerimageurl = "BannerImageURL"
  G_wszstreambufferrecordingcopyrighturl = "CopyrightURL"
  G_wszstreambufferrecordingaspectratiox = "AspectRatioX"
  G_wszstreambufferrecordingaspectratioy = "AspectRatioY"
  G_wszstreambufferrecordingnscname = "NSC_Name"
  G_wszstreambufferrecordingnscaddress = "NSC_Address"
  G_wszstreambufferrecordingnscphone = "NSC_Phone"
  G_wszstreambufferrecordingnscemail = "NSC_Email"
  G_wszstreambufferrecordingnscdescription = "NSC_Description"
  STREAMBUFFER_EC_TIMEHOLE = 806_i32
  STREAMBUFFER_EC_STALE_DATA_READ = 807_i32
  STREAMBUFFER_EC_STALE_FILE_DELETED = 808_i32
  STREAMBUFFER_EC_CONTENT_BECOMING_STALE = 809_i32
  STREAMBUFFER_EC_WRITE_FAILURE = 810_i32
  STREAMBUFFER_EC_WRITE_FAILURE_CLEAR = 811_i32
  STREAMBUFFER_EC_READ_FAILURE = 812_i32
  STREAMBUFFER_EC_RATE_CHANGED = 813_i32
  STREAMBUFFER_EC_PRIMARY_AUDIO = 814_i32
  STREAMBUFFER_EC_RATE_CHANGING_FOR_SETPOSITIONS = 815_i32
  STREAMBUFFER_EC_SETPOSITIONS_EVENTS_DONE = 816_i32
  CLSID_FilgraphManager = LibC::GUID.new(0xe436ebb3_u32, 0x524f_u16, 0x11ce_u16, StaticArray[0x9f_u8, 0x53_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  CLSID_SystemTuningSpaces = LibC::GUID.new(0xd02aac50_u32, 0x27e_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
  CLSID_TuningSpace = LibC::GUID.new(0x5ffdc5e6_u32, 0xb83a_u16, 0x4b55_u16, StaticArray[0xb6_u8, 0xe8_u8, 0xc6_u8, 0x9e_u8, 0x76_u8, 0x5f_u8, 0xe9_u8, 0xdb_u8])
  CLSID_ChannelIDTuningSpace = LibC::GUID.new(0xcc829a2f_u32, 0x3365_u16, 0x463f_u16, StaticArray[0xaf_u8, 0x13_u8, 0x81_u8, 0xdb_u8, 0xb6_u8, 0xf3_u8, 0xa5_u8, 0x55_u8])
  CLSID_ATSCTuningSpace = LibC::GUID.new(0xa2e30750_u32, 0x6c3d_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x53_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  CLSID_DigitalCableTuningSpace = LibC::GUID.new(0xd9bb4cee_u32, 0xb87a_u16, 0x47f1_u16, StaticArray[0xac_u8, 0x92_u8, 0xb0_u8, 0x8d_u8, 0x9c_u8, 0x78_u8, 0x13_u8, 0xfc_u8])
  CLSID_AnalogRadioTuningSpace = LibC::GUID.new(0x8a674b4c_u32, 0x1f63_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x4c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  CLSID_AuxInTuningSpace = LibC::GUID.new(0xf9769a06_u32, 0x7aca_u16, 0x4e39_u16, StaticArray[0x9c_u8, 0xfb_u8, 0x97_u8, 0xbb_u8, 0x35_u8, 0xf0_u8, 0xe7_u8, 0x7e_u8])
  CLSID_AnalogTVTuningSpace = LibC::GUID.new(0x8a674b4d_u32, 0x1f63_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x4c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  CLSID_DVBTuningSpace = LibC::GUID.new(0xc6b14b32_u32, 0x76aa_u16, 0x4a86_u16, StaticArray[0xa7_u8, 0xac_u8, 0x5c_u8, 0x79_u8, 0xaa_u8, 0xf5_u8, 0x8d_u8, 0xa7_u8])
  CLSID_DVBSTuningSpace = LibC::GUID.new(0xb64016f3_u32, 0xc9a2_u16, 0x4066_u16, StaticArray[0x96_u8, 0xf0_u8, 0xbd_u8, 0x95_u8, 0x63_u8, 0x31_u8, 0x47_u8, 0x26_u8])
  CLSID_ComponentTypes = LibC::GUID.new(0xa1a2b1c4_u32, 0xe3a_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
  CLSID_ComponentType = LibC::GUID.new(0x823535a0_u32, 0x318_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
  CLSID_LanguageComponentType = LibC::GUID.new(0x1be49f30_u32, 0xe1b_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
  CLSID_MPEG2ComponentType = LibC::GUID.new(0x418008f3_u32, 0xcf67_u16, 0x4668_u16, StaticArray[0x96_u8, 0x28_u8, 0x10_u8, 0xdc_u8, 0x52_u8, 0xbe_u8, 0x1d_u8, 0x8_u8])
  CLSID_ATSCComponentType = LibC::GUID.new(0xa8dcf3d5_u32, 0x780_u16, 0x4ef4_u16, StaticArray[0x8a_u8, 0x83_u8, 0x2c_u8, 0xff_u8, 0xaa_u8, 0xcb_u8, 0x8a_u8, 0xce_u8])
  CLSID_Components = LibC::GUID.new(0x809b6661_u32, 0x94c4_u16, 0x49e6_u16, StaticArray[0xb6_u8, 0xec_u8, 0x3f_u8, 0xf_u8, 0x86_u8, 0x22_u8, 0x15_u8, 0xaa_u8])
  CLSID_Component = LibC::GUID.new(0x59dc47a8_u32, 0x116c_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
  CLSID_MPEG2Component = LibC::GUID.new(0x55cb2d7_u32, 0x2969_u16, 0x45cd_u16, StaticArray[0x91_u8, 0x4b_u8, 0x76_u8, 0x89_u8, 0x7_u8, 0x22_u8, 0xf1_u8, 0x12_u8])
  CLSID_AnalogAudioComponentType = LibC::GUID.new(0x28ab0005_u32, 0xe845_u16, 0x4ffa_u16, StaticArray[0xaa_u8, 0x9b_u8, 0xf4_u8, 0x66_u8, 0x52_u8, 0x36_u8, 0x14_u8, 0x1c_u8])
  CLSID_TuneRequest = LibC::GUID.new(0xb46e0d38_u32, 0xab35_u16, 0x4a06_u16, StaticArray[0xa1_u8, 0x37_u8, 0x70_u8, 0x57_u8, 0x6b_u8, 0x1_u8, 0xb3_u8, 0x9f_u8])
  CLSID_ChannelIDTuneRequest = LibC::GUID.new(0x3a9428a7_u32, 0x31a4_u16, 0x45e9_u16, StaticArray[0x9e_u8, 0xfb_u8, 0xe0_u8, 0x55_u8, 0xbf_u8, 0x7b_u8, 0xb3_u8, 0xdb_u8])
  CLSID_ChannelTuneRequest = LibC::GUID.new(0x369b4e5_u32, 0x45b6_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x50_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  CLSID_ATSCChannelTuneRequest = LibC::GUID.new(0x369b4e6_u32, 0x45b6_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x50_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  CLSID_DigitalCableTuneRequest = LibC::GUID.new(0x26ec0b63_u32, 0xaa90_u16, 0x458a_u16, StaticArray[0x8d_u8, 0xf4_u8, 0x56_u8, 0x59_u8, 0xf2_u8, 0xc8_u8, 0xa1_u8, 0x8a_u8])
  CLSID_MPEG2TuneRequest = LibC::GUID.new(0x955ac62_u32, 0xbf2e_u16, 0x4cba_u16, StaticArray[0xa2_u8, 0xb9_u8, 0xa6_u8, 0x3f_u8, 0x77_u8, 0x2d_u8, 0x46_u8, 0xcf_u8])
  CLSID_MPEG2TuneRequestFactory = LibC::GUID.new(0x2c63e4eb_u32, 0x4cea_u16, 0x41b8_u16, StaticArray[0x91_u8, 0x9c_u8, 0xe9_u8, 0x47_u8, 0xea_u8, 0x19_u8, 0xa7_u8, 0x7c_u8])
  CLSID_Locator = LibC::GUID.new(0x888c883_u32, 0xac4f_u16, 0x4943_u16, StaticArray[0xb5_u8, 0x16_u8, 0x2c_u8, 0x38_u8, 0xd9_u8, 0xb3_u8, 0x45_u8, 0x62_u8])
  CLSID_DigitalLocator = LibC::GUID.new(0x6e50cc0d_u32, 0xc19b_u16, 0x4bf6_u16, StaticArray[0x81_u8, 0xb_u8, 0x5b_u8, 0xd6_u8, 0x7_u8, 0x61_u8, 0xf5_u8, 0xcc_u8])
  CLSID_AnalogLocator = LibC::GUID.new(0x49638b91_u32, 0x48ab_u16, 0x48b7_u16, StaticArray[0xa4_u8, 0x7a_u8, 0x7d_u8, 0xe_u8, 0x75_u8, 0xa0_u8, 0x8e_u8, 0xde_u8])
  CLSID_ATSCLocator = LibC::GUID.new(0x8872ff1b_u32, 0x98fa_u16, 0x4d7a_u16, StaticArray[0x8d_u8, 0x93_u8, 0xc9_u8, 0xf1_u8, 0x5_u8, 0x5f_u8, 0x85_u8, 0xbb_u8])
  CLSID_DigitalCableLocator = LibC::GUID.new(0x3c06416_u32, 0xd127_u16, 0x407a_u16, StaticArray[0xab_u8, 0x4c_u8, 0xfd_u8, 0xd2_u8, 0x79_u8, 0xab_u8, 0xbe_u8, 0x5d_u8])
  CLSID_DVBTLocator = LibC::GUID.new(0x9cd64701_u32, 0xbdf3_u16, 0x4d14_u16, StaticArray[0x8e_u8, 0x3_u8, 0xf1_u8, 0x29_u8, 0x83_u8, 0xd8_u8, 0x66_u8, 0x64_u8])
  CLSID_DVBTLocator2 = LibC::GUID.new(0xefe3fa02_u32, 0x45d7_u16, 0x4920_u16, StaticArray[0xbe_u8, 0x96_u8, 0x53_u8, 0xfa_u8, 0x7f_u8, 0x35_u8, 0xb0_u8, 0xe6_u8])
  CLSID_DVBSLocator = LibC::GUID.new(0x1df7d126_u32, 0x4050_u16, 0x47f0_u16, StaticArray[0xa7_u8, 0xcf_u8, 0x4c_u8, 0x4c_u8, 0xa9_u8, 0x24_u8, 0x13_u8, 0x33_u8])
  CLSID_DVBCLocator = LibC::GUID.new(0xc531d9fd_u32, 0x9685_u16, 0x4028_u16, StaticArray[0x8b_u8, 0x68_u8, 0x6e_u8, 0x12_u8, 0x32_u8, 0x7_u8, 0x9f_u8, 0x1e_u8])
  CLSID_ISDBSLocator = LibC::GUID.new(0x6504afed_u32, 0xa629_u16, 0x455c_u16, StaticArray[0xa7_u8, 0xf1_u8, 0x4_u8, 0x96_u8, 0x4d_u8, 0xea_u8, 0x5c_u8, 0xc4_u8])
  CLSID_DVBTuneRequest = LibC::GUID.new(0x15d6504a_u32, 0x5494_u16, 0x499c_u16, StaticArray[0x88_u8, 0x6c_u8, 0x97_u8, 0x3c_u8, 0x9e_u8, 0x53_u8, 0xb9_u8, 0xf1_u8])
  CLSID_CreatePropBagOnRegKey = LibC::GUID.new(0x8a674b49_u32, 0x1f63_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x4c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  CLSID_BroadcastEventService = LibC::GUID.new(0xb3ffb92_u32, 0x919_u16, 0x4934_u16, StaticArray[0x9d_u8, 0x5b_u8, 0x61_u8, 0x9c_u8, 0x71_u8, 0x9d_u8, 0x2_u8, 0x2_u8])
  CLSID_TunerMarshaler = LibC::GUID.new(0x6438570b_u32, 0xc08_u16, 0x4a25_u16, StaticArray[0x95_u8, 0x4_u8, 0x80_u8, 0x12_u8, 0xbb_u8, 0x4d_u8, 0x50_u8, 0xcf_u8])
  CLSID_PersistTuneXmlUtility = LibC::GUID.new(0xe77026b0_u32, 0xb97f_u16, 0x4cbb_u16, StaticArray[0xb7_u8, 0xfb_u8, 0xf4_u8, 0xf0_u8, 0x3a_u8, 0xd6_u8, 0x9f_u8, 0x11_u8])
  CLSID_ESEventService = LibC::GUID.new(0xc20447fc_u32, 0xec60_u16, 0x475e_u16, StaticArray[0x81_u8, 0x3f_u8, 0xd2_u8, 0xb0_u8, 0xa6_u8, 0xde_u8, 0xce_u8, 0xfe_u8])
  CLSID_ESEventFactory = LibC::GUID.new(0x8e8a07da_u32, 0x71f8_u16, 0x40c1_u16, StaticArray[0xa9_u8, 0x29_u8, 0x5e_u8, 0x3a_u8, 0x86_u8, 0x8a_u8, 0xc2_u8, 0xc6_u8])
  CLSID_XDSToRat = LibC::GUID.new(0xc5c5c5f0_u32, 0x3abc_u16, 0x11d6_u16, StaticArray[0xb2_u8, 0x5b_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xa0_u8, 0xc0_u8, 0x26_u8])
  CLSID_EvalRat = LibC::GUID.new(0xc5c5c5f1_u32, 0x3abc_u16, 0x11d6_u16, StaticArray[0xb2_u8, 0x5b_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xa0_u8, 0xc0_u8, 0x26_u8])
  CLSID_ETFilter = LibC::GUID.new(0xc4c4c4f1_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
  CLSID_DTFilter = LibC::GUID.new(0xc4c4c4f2_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
  CLSID_XDSCodec = LibC::GUID.new(0xc4c4c4f3_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
  CLSID_CXDSData = LibC::GUID.new(0xc4c4c4f4_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
  CLSID_MSVidAnalogTunerDevice = LibC::GUID.new(0x1c15d484_u32, 0x911d_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  CLSID_MSVidBDATunerDevice = LibC::GUID.new(0xa2e3074e_u32, 0x6c3d_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x53_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  CLSID_MSVidFilePlaybackDevice = LibC::GUID.new(0x37b0353c_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  CLSID_MSVidWebDVD = LibC::GUID.new(0x11b3619_u32, 0xfe63_u16, 0x4814_u16, StaticArray[0x8a_u8, 0x84_u8, 0x15_u8, 0xa1_u8, 0x94_u8, 0xce_u8, 0x9c_u8, 0xe3_u8])
  CLSID_MSVidWebDVDAdm = LibC::GUID.new(0xfa7c375b_u32, 0x66a7_u16, 0x4280_u16, StaticArray[0x87_u8, 0x9d_u8, 0xfd_u8, 0x45_u8, 0x9c_u8, 0x84_u8, 0xbb_u8, 0x2_u8])
  CLSID_MSVidVideoRenderer = LibC::GUID.new(0x37b03543_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  CLSID_MSVidVMR9 = LibC::GUID.new(0x24dc3975_u32, 0x9bf_u16, 0x4231_u16, StaticArray[0x86_u8, 0x55_u8, 0x3e_u8, 0xe7_u8, 0x1f_u8, 0x43_u8, 0x83_u8, 0x7d_u8])
  CLSID_MSVidEVR = LibC::GUID.new(0xc45268a2_u32, 0xfa81_u16, 0x4e19_u16, StaticArray[0xb1_u8, 0xe3_u8, 0x72_u8, 0xed_u8, 0xbd_u8, 0x60_u8, 0xae_u8, 0xda_u8])
  CLSID_MSVidAudioRenderer = LibC::GUID.new(0x37b03544_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  CLSID_MSVidGenericSink = LibC::GUID.new(0x4a5869cf_u32, 0x929d_u16, 0x4040_u16, StaticArray[0xae_u8, 0x3_u8, 0xfc_u8, 0xaf_u8, 0xc5_u8, 0xb9_u8, 0xcd_u8, 0x42_u8])
  CLSID_MSVidStreamBufferSink = LibC::GUID.new(0x9e77aac4_u32, 0x35e5_u16, 0x42a1_u16, StaticArray[0xbd_u8, 0xc2_u8, 0x8f_u8, 0x3f_u8, 0xf3_u8, 0x99_u8, 0x84_u8, 0x7c_u8])
  CLSID_MSVidStreamBufferSource = LibC::GUID.new(0xad8e510d_u32, 0x217f_u16, 0x409b_u16, StaticArray[0x80_u8, 0x76_u8, 0x29_u8, 0xc5_u8, 0xe7_u8, 0x3b_u8, 0x98_u8, 0xe8_u8])
  CLSID_MSVidStreamBufferV2Source = LibC::GUID.new(0xfd351ea1_u32, 0x4173_u16, 0x4af4_u16, StaticArray[0x82_u8, 0x1d_u8, 0x80_u8, 0xd4_u8, 0xae_u8, 0x97_u8, 0x90_u8, 0x48_u8])
  CLSID_MSVidEncoder = LibC::GUID.new(0xbb530c63_u32, 0xd9df_u16, 0x4b49_u16, StaticArray[0x94_u8, 0x39_u8, 0x63_u8, 0x45_u8, 0x39_u8, 0x62_u8, 0xe5_u8, 0x98_u8])
  CLSID_MSVidITVCapture = LibC::GUID.new(0x5740a302_u32, 0xef0b_u16, 0x45ce_u16, StaticArray[0xbf_u8, 0x3b_u8, 0x44_u8, 0x70_u8, 0xa1_u8, 0x4a_u8, 0x89_u8, 0x80_u8])
  CLSID_MSVidITVPlayback = LibC::GUID.new(0x9e797ed0_u32, 0x5253_u16, 0x4243_u16, StaticArray[0xa9_u8, 0xb7_u8, 0xbd_u8, 0x6_u8, 0xc5_u8, 0x8f_u8, 0x8e_u8, 0xf3_u8])
  CLSID_MSVidCCA = LibC::GUID.new(0x86151827_u32, 0xe47b_u16, 0x45ee_u16, StaticArray[0x84_u8, 0x21_u8, 0xd1_u8, 0xe_u8, 0x6e_u8, 0x69_u8, 0x9_u8, 0x79_u8])
  CLSID_MSVidClosedCaptioning = LibC::GUID.new(0x7f9cb14d_u32, 0x48e4_u16, 0x43b6_u16, StaticArray[0x93_u8, 0x46_u8, 0x1a_u8, 0xeb_u8, 0xc3_u8, 0x9c_u8, 0x64_u8, 0xd3_u8])
  CLSID_MSVidClosedCaptioningSI = LibC::GUID.new(0x92ed88bf_u32, 0x879e_u16, 0x448f_u16, StaticArray[0xb6_u8, 0xb6_u8, 0xa3_u8, 0x85_u8, 0xbc_u8, 0xeb_u8, 0x84_u8, 0x6d_u8])
  CLSID_MSVidDataServices = LibC::GUID.new(0x334125c0_u32, 0x77e5_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x53_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  CLSID_MSVidXDS = LibC::GUID.new(0x149eedf_u32, 0xd08f_u16, 0x4142_u16, StaticArray[0x8d_u8, 0x73_u8, 0xd2_u8, 0x39_u8, 0x3_u8, 0xd2_u8, 0x1e_u8, 0x90_u8])
  CLSID_MSVidAnalogCaptureToDataServices = LibC::GUID.new(0xc5702cd6_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  CLSID_MSVidDataServicesToStreamBufferSink = LibC::GUID.new(0x38f03426_u32, 0xe83b_u16, 0x4e68_u16, StaticArray[0xb6_u8, 0x5b_u8, 0xdc_u8, 0xae_u8, 0x73_u8, 0x30_u8, 0x48_u8, 0x38_u8])
  CLSID_MSVidDataServicesToXDS = LibC::GUID.new(0x429ec6e_u32, 0x1144_u16, 0x4bed_u16, StaticArray[0xb8_u8, 0x8b_u8, 0x2f_u8, 0xb9_u8, 0x89_u8, 0x9a_u8, 0x4a_u8, 0x3d_u8])
  CLSID_MSVidAnalogCaptureToXDS = LibC::GUID.new(0x3540d440_u32, 0x5b1d_u16, 0x49cb_u16, StaticArray[0x82_u8, 0x1a_u8, 0xe8_u8, 0x4b_u8, 0x8c_u8, 0xf0_u8, 0x65_u8, 0xa7_u8])
  CLSID_MSVidCtl = LibC::GUID.new(0xb0edf163_u32, 0x910a_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  CLSID_MSVidInputDevices = LibC::GUID.new(0xc5702ccc_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  CLSID_MSVidOutputDevices = LibC::GUID.new(0xc5702ccd_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  CLSID_MSVidVideoRendererDevices = LibC::GUID.new(0xc5702cce_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  CLSID_MSVidAudioRendererDevices = LibC::GUID.new(0xc5702ccf_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  CLSID_MSVidFeatures = LibC::GUID.new(0xc5702cd0_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  CLSID_MSVidGenericComposite = LibC::GUID.new(0x2764bce5_u32, 0xcc39_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x39_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  CLSID_MSVidAnalogCaptureToOverlayMixer = LibC::GUID.new(0xe18af75a_u32, 0x8af_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x4a_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  CLSID_MSVidWebDVDToVideoRenderer = LibC::GUID.new(0x267db0b3_u32, 0x55e3_u16, 0x4902_u16, StaticArray[0x94_u8, 0x9b_u8, 0xdf_u8, 0x8f_u8, 0x5c_u8, 0xec_u8, 0x1_u8, 0x91_u8])
  CLSID_MSVidWebDVDToAudioRenderer = LibC::GUID.new(0x8d04238e_u32, 0x9fd1_u16, 0x41c6_u16, StaticArray[0x8d_u8, 0xe3_u8, 0x9e_u8, 0x1e_u8, 0xe3_u8, 0x9_u8, 0xe9_u8, 0x35_u8])
  CLSID_MSVidMPEG2DecoderToClosedCaptioning = LibC::GUID.new(0x6ad28ee1_u32, 0x5002_u16, 0x4e71_u16, StaticArray[0xaa_u8, 0xf7_u8, 0xbd_u8, 0x7_u8, 0x79_u8, 0x7_u8, 0xb1_u8, 0xa4_u8])
  CLSID_MSVidAnalogCaptureToStreamBufferSink = LibC::GUID.new(0x9f50e8b1_u32, 0x9530_u16, 0x4ddc_u16, StaticArray[0x82_u8, 0x5e_u8, 0x1a_u8, 0xf8_u8, 0x1d_u8, 0x47_u8, 0xae_u8, 0xd6_u8])
  CLSID_MSVidDigitalCaptureToStreamBufferSink = LibC::GUID.new(0xabe40035_u32, 0x27c3_u16, 0x4a2f_u16, StaticArray[0x81_u8, 0x53_u8, 0x66_u8, 0x24_u8, 0x47_u8, 0x16_u8, 0x8_u8, 0xaf_u8])
  CLSID_MSVidITVToStreamBufferSink = LibC::GUID.new(0x92b94828_u32, 0x1af7_u16, 0x4e6e_u16, StaticArray[0x9e_u8, 0xbf_u8, 0x77_u8, 0x6_u8, 0x57_u8, 0xf7_u8, 0x7a_u8, 0xf5_u8])
  CLSID_MSVidCCAToStreamBufferSink = LibC::GUID.new(0x3ef76d68_u32, 0x8661_u16, 0x4843_u16, StaticArray[0x8b_u8, 0x8f_u8, 0xc3_u8, 0x71_u8, 0x63_u8, 0xd8_u8, 0xc9_u8, 0xce_u8])
  CLSID_MSVidEncoderToStreamBufferSink = LibC::GUID.new(0xa0b9b497_u32, 0xafbc_u16, 0x45ad_u16, StaticArray[0xa8_u8, 0xa6_u8, 0x9b_u8, 0x7_u8, 0x7c_u8, 0x40_u8, 0xd4_u8, 0xf2_u8])
  CLSID_MSVidFilePlaybackToVideoRenderer = LibC::GUID.new(0xb401c5eb_u32, 0x8457_u16, 0x427f_u16, StaticArray[0x84_u8, 0xea_u8, 0xa4_u8, 0xd2_u8, 0x36_u8, 0x33_u8, 0x64_u8, 0xb0_u8])
  CLSID_MSVidFilePlaybackToAudioRenderer = LibC::GUID.new(0xcc23f537_u32, 0x18d4_u16, 0x4ece_u16, StaticArray[0x93_u8, 0xbd_u8, 0x20_u8, 0x7a_u8, 0x84_u8, 0x72_u8, 0x69_u8, 0x79_u8])
  CLSID_MSVidAnalogTVToEncoder = LibC::GUID.new(0x28953661_u32, 0x231_u16, 0x41db_u16, StaticArray[0x89_u8, 0x86_u8, 0x21_u8, 0xff_u8, 0x43_u8, 0x88_u8, 0xee_u8, 0x9b_u8])
  CLSID_MSVidStreamBufferSourceToVideoRenderer = LibC::GUID.new(0x3c4708dc_u32, 0xb181_u16, 0x46a8_u16, StaticArray[0x8d_u8, 0xa8_u8, 0x4a_u8, 0xb0_u8, 0x37_u8, 0x17_u8, 0x58_u8, 0xcd_u8])
  CLSID_MSVidAnalogCaptureToCCA = LibC::GUID.new(0x942b7909_u32, 0xa28e_u16, 0x49a1_u16, StaticArray[0xa2_u8, 0x7_u8, 0x34_u8, 0xeb_u8, 0xcb_u8, 0xcb_u8, 0x4b_u8, 0x3b_u8])
  CLSID_MSVidDigitalCaptureToCCA = LibC::GUID.new(0x73d14237_u32, 0xb9db_u16, 0x4efa_u16, StaticArray[0xa6_u8, 0xdd_u8, 0x84_u8, 0x35_u8, 0x4_u8, 0x21_u8, 0xfb_u8, 0x2f_u8])
  CLSID_MSVidDigitalCaptureToITV = LibC::GUID.new(0x5d8e73f7_u32, 0x4989_u16, 0x4ac8_u16, StaticArray[0x8a_u8, 0x98_u8, 0x39_u8, 0xba_u8, 0xd_u8, 0x32_u8, 0x53_u8, 0x2_u8])
  CLSID_MSVidSBESourceToITV = LibC::GUID.new(0x2291478c_u32, 0x5ee3_u16, 0x4bef_u16, StaticArray[0xab_u8, 0x5d_u8, 0xb5_u8, 0xff_u8, 0x2c_u8, 0xf5_u8, 0x83_u8, 0x52_u8])
  CLSID_MSVidSBESourceToCC = LibC::GUID.new(0x9193a8f9_u32, 0xcba_u16, 0x400e_u16, StaticArray[0xaa_u8, 0x97_u8, 0xeb_u8, 0x47_u8, 0x9_u8, 0x16_u8, 0x45_u8, 0x76_u8])
  CLSID_MSVidSBESourceToGenericSink = LibC::GUID.new(0x991da7e5_u32, 0x953f_u16, 0x435b_u16, StaticArray[0xbe_u8, 0x5e_u8, 0xb9_u8, 0x2a_u8, 0x5_u8, 0xed_u8, 0xfc_u8, 0x42_u8])
  CLSID_MSVidCCToVMR = LibC::GUID.new(0xc4bf2784_u32, 0xae00_u16, 0x41ba_u16, StaticArray[0x98_u8, 0x28_u8, 0x9c_u8, 0x95_u8, 0x3b_u8, 0xd3_u8, 0xc5_u8, 0x4a_u8])
  CLSID_MSVidCCToAR = LibC::GUID.new(0xd76334ca_u32, 0xd89e_u16, 0x4baf_u16, StaticArray[0x86_u8, 0xab_u8, 0xdd_u8, 0xb5_u8, 0x93_u8, 0x72_u8, 0xaf_u8, 0xc2_u8])
  CLSID_MSEventBinder = LibC::GUID.new(0x577faa18_u32, 0x4518_u16, 0x445e_u16, StaticArray[0x8f_u8, 0x70_u8, 0x14_u8, 0x73_u8, 0xf8_u8, 0xcf_u8, 0x4b_u8, 0xa4_u8])
  CLSID_MSVidStreamBufferRecordingControl = LibC::GUID.new(0xcaafdd83_u32, 0xcefc_u16, 0x4e3d_u16, StaticArray[0xba_u8, 0x3_u8, 0x17_u8, 0x5f_u8, 0x17_u8, 0xa2_u8, 0x4f_u8, 0x91_u8])
  CLSID_MSVidRect = LibC::GUID.new(0xcb4276e6_u32, 0x7d5f_u16, 0x4cf1_u16, StaticArray[0x97_u8, 0x27_u8, 0x62_u8, 0x9c_u8, 0x5e_u8, 0x6d_u8, 0xb6_u8, 0xae_u8])
  CLSID_MSVidDevice = LibC::GUID.new(0x6e40476f_u32, 0x9c49_u16, 0x4c3e_u16, StaticArray[0x8b_u8, 0xb9_u8, 0x85_u8, 0x87_u8, 0x95_u8, 0x8e_u8, 0xff_u8, 0x74_u8])
  CLSID_MSVidDevice2 = LibC::GUID.new(0x30997f7d_u32, 0xb3b5_u16, 0x4a1c_u16, StaticArray[0x98_u8, 0x3a_u8, 0x1f_u8, 0xe8_u8, 0x9_u8, 0x8c_u8, 0xb7_u8, 0x7d_u8])
  CLSID_MSVidInputDevice = LibC::GUID.new(0xac1972f2_u32, 0x138a_u16, 0x4ca3_u16, StaticArray[0x90_u8, 0xda_u8, 0xae_u8, 0x51_u8, 0x11_u8, 0x2e_u8, 0xda_u8, 0x28_u8])
  CLSID_MSVidVideoInputDevice = LibC::GUID.new(0x95f4820b_u32, 0xbb3a_u16, 0x4e2d_u16, StaticArray[0xbc_u8, 0x64_u8, 0x5b_u8, 0x81_u8, 0x7b_u8, 0xc2_u8, 0xc3_u8, 0xe_u8])
  CLSID_MSVidVideoPlaybackDevice = LibC::GUID.new(0x1990d634_u32, 0x1a5e_u16, 0x4071_u16, StaticArray[0xa3_u8, 0x4a_u8, 0x53_u8, 0xaa_u8, 0xff_u8, 0xce_u8, 0x9f_u8, 0x36_u8])
  CLSID_MSVidFeature = LibC::GUID.new(0x7748530b_u32, 0xc08a_u16, 0x47ea_u16, StaticArray[0xb2_u8, 0x4c_u8, 0xbe_u8, 0x86_u8, 0x95_u8, 0xff_u8, 0x40_u8, 0x5f_u8])
  CLSID_MSVidOutput = LibC::GUID.new(0x87eb890d_u32, 0x3ad_u16, 0x4e9d_u16, StaticArray[0x98_u8, 0x66_u8, 0x37_u8, 0x6e_u8, 0x5e_u8, 0xc5_u8, 0x72_u8, 0xed_u8])
  CLSID_SectionList = LibC::GUID.new(0x73da5d04_u32, 0x4347_u16, 0x45d3_u16, StaticArray[0xa9_u8, 0xdc_u8, 0xfa_u8, 0xe9_u8, 0xdd_u8, 0xbe_u8, 0x55_u8, 0x8d_u8])
  CLSID_Mpeg2Stream = LibC::GUID.new(0xf91d96c7_u32, 0x8509_u16, 0x4d0b_u16, StaticArray[0xab_u8, 0x26_u8, 0xa0_u8, 0xdd_u8, 0x10_u8, 0x90_u8, 0x4b_u8, 0xb7_u8])
  CLSID_Mpeg2Data = LibC::GUID.new(0xc666e115_u32, 0xbb62_u16, 0x4027_u16, StaticArray[0xa1_u8, 0x13_u8, 0x82_u8, 0xd6_u8, 0x43_u8, 0xfe_u8, 0x2d_u8, 0x99_u8])
  CLSID_Mpeg2DataLib = LibC::GUID.new(0xdbaf6c1b_u32, 0xb6a4_u16, 0x4898_u16, StaticArray[0xae_u8, 0x65_u8, 0x20_u8, 0x4f_u8, 0xd_u8, 0x95_u8, 0x9_u8, 0xa1_u8])
  CLSID_TIFLoad = LibC::GUID.new(0x14eb8748_u32, 0x1753_u16, 0x4393_u16, StaticArray[0x95_u8, 0xae_u8, 0x4f_u8, 0x7e_u8, 0x7a_u8, 0x87_u8, 0xaa_u8, 0xd6_u8])
  CLSID_EVENTID_TuningChanging = LibC::GUID.new(0x83183c03_u32, 0xc09e_u16, 0x45c4_u16, StaticArray[0xa7_u8, 0x19_u8, 0x80_u8, 0x7a_u8, 0x94_u8, 0x95_u8, 0x2b_u8, 0xf9_u8])
  CLSID_EVENTID_TuningChanged = LibC::GUID.new(0x9d7e6235_u32, 0x4b7d_u16, 0x425d_u16, StaticArray[0xa6_u8, 0xd1_u8, 0xd7_u8, 0x17_u8, 0xc3_u8, 0x3b_u8, 0x9c_u8, 0x4c_u8])
  CLSID_EVENTID_CandidatePostTuneData = LibC::GUID.new(0x9f02d3d0_u32, 0x9f06_u16, 0x4369_u16, StaticArray[0x9f_u8, 0x1e_u8, 0x3a_u8, 0xd6_u8, 0xca_u8, 0x19_u8, 0x80_u8, 0x7e_u8])
  CLSID_EVENTID_CADenialCountChanged = LibC::GUID.new(0x2a65c528_u32, 0x2249_u16, 0x4070_u16, StaticArray[0xac_u8, 0x16_u8, 0x0_u8, 0x39_u8, 0xc_u8, 0xdf_u8, 0xb2_u8, 0xdd_u8])
  CLSID_EVENTID_SignalStatusChanged = LibC::GUID.new(0x6d9cfaf2_u32, 0x702d_u16, 0x4b01_u16, StaticArray[0x8d_u8, 0xff_u8, 0x68_u8, 0x92_u8, 0xad_u8, 0x20_u8, 0xd1_u8, 0x91_u8])
  CLSID_EVENTID_NewSignalAcquired = LibC::GUID.new(0xc87ec52d_u32, 0xcd18_u16, 0x404a_u16, StaticArray[0xa0_u8, 0x76_u8, 0xc0_u8, 0x2a_u8, 0x27_u8, 0x3d_u8, 0x3d_u8, 0xe7_u8])
  CLSID_EVENTID_EASMessageReceived = LibC::GUID.new(0xd10df9d5_u32, 0xc261_u16, 0x4b85_u16, StaticArray[0x9e_u8, 0x8a_u8, 0x51_u8, 0x7b_u8, 0x32_u8, 0x99_u8, 0xca_u8, 0xb2_u8])
  CLSID_EVENTID_PSITable = LibC::GUID.new(0x1b9c3703_u32, 0xd447_u16, 0x4e16_u16, StaticArray[0x97_u8, 0xbb_u8, 0x1_u8, 0x79_u8, 0x9f_u8, 0xc0_u8, 0x31_u8, 0xed_u8])
  CLSID_EVENTID_ServiceTerminated = LibC::GUID.new(0xa1d591c_u32, 0xe0d2_u16, 0x4f8e_u16, StaticArray[0x89_u8, 0x60_u8, 0x23_u8, 0x35_u8, 0xbe_u8, 0xf4_u8, 0x5c_u8, 0xcb_u8])
  CLSID_EVENTID_CardStatusChanged = LibC::GUID.new(0xa265faea_u32, 0xf874_u16, 0x4b38_u16, StaticArray[0x9f_u8, 0xf7_u8, 0xc5_u8, 0x3d_u8, 0x2_u8, 0x96_u8, 0x99_u8, 0x96_u8])
  CLSID_EVENTID_DRMParingStatusChanged = LibC::GUID.new(0x906f5_u32, 0xf0d1_u16, 0x41d6_u16, StaticArray[0xa7_u8, 0xdf_u8, 0x40_u8, 0x28_u8, 0x69_u8, 0x76_u8, 0x69_u8, 0xf6_u8])
  CLSID_EVENTID_DRMParingStepComplete = LibC::GUID.new(0x5b2ebf78_u32, 0xb752_u16, 0x4420_u16, StaticArray[0xb4_u8, 0x1e_u8, 0xa4_u8, 0x72_u8, 0xdc_u8, 0x95_u8, 0x82_u8, 0x8e_u8])
  CLSID_EVENTID_MMIMessage = LibC::GUID.new(0x52c29af_u32, 0x9a4_u16, 0x4b93_u16, StaticArray[0x89_u8, 0xf_u8, 0xbd_u8, 0x6a_u8, 0x34_u8, 0x89_u8, 0x68_u8, 0xa4_u8])
  CLSID_EVENTID_EntitlementChanged = LibC::GUID.new(0x9071ad5d_u32, 0x2359_u16, 0x4c95_u16, StaticArray[0x86_u8, 0x94_u8, 0xaf_u8, 0xa8_u8, 0x1d_u8, 0x70_u8, 0xbf_u8, 0xd5_u8])
  CLSID_EVENTID_STBChannelNumber = LibC::GUID.new(0x17c4d730_u32, 0xd0f0_u16, 0x413a_u16, StaticArray[0x8c_u8, 0x99_u8, 0x50_u8, 0x4_u8, 0x69_u8, 0xde_u8, 0x35_u8, 0xad_u8])
  CLSID_EVENTID_BDAEventingServicePendingEvent = LibC::GUID.new(0x5ca51711_u32, 0x5ddc_u16, 0x41a6_u16, StaticArray[0x94_u8, 0x30_u8, 0xe4_u8, 0x1b_u8, 0x8b_u8, 0x3b_u8, 0xbc_u8, 0x5b_u8])
  CLSID_EVENTID_BDAConditionalAccessTAG = LibC::GUID.new(0xefc3a459_u32, 0xae8b_u16, 0x4b4a_u16, StaticArray[0x8f_u8, 0xe9_u8, 0x79_u8, 0xa0_u8, 0xd0_u8, 0x97_u8, 0xf3_u8, 0xea_u8])
  CLSID_EVENTTYPE_CASDescrambleFailureEvent = LibC::GUID.new(0xb2127d42_u32, 0x7be5_u16, 0x4f4b_u16, StaticArray[0x91_u8, 0x30_u8, 0x66_u8, 0x79_u8, 0x89_u8, 0x9f_u8, 0x4f_u8, 0x4b_u8])
  CLSID_EVENTID_CASFailureSpanningEvent = LibC::GUID.new(0xead831ae_u32, 0x5529_u16, 0x4d1f_u16, StaticArray[0xaf_u8, 0xce_u8, 0xd_u8, 0x8c_u8, 0xd1_u8, 0x25_u8, 0x7d_u8, 0x30_u8])
  CLSID_EVENTID_ChannelChangeSpanningEvent = LibC::GUID.new(0x9067c5e5_u32, 0x4c5c_u16, 0x4205_u16, StaticArray[0x86_u8, 0xc8_u8, 0x7a_u8, 0xfe_u8, 0x20_u8, 0xfe_u8, 0x1e_u8, 0xfa_u8])
  CLSID_EVENTID_ChannelTypeSpanningEvent = LibC::GUID.new(0x72ab1d51_u32, 0x87d2_u16, 0x489b_u16, StaticArray[0xba_u8, 0x11_u8, 0xe_u8, 0x8_u8, 0xdc_u8, 0x21_u8, 0x2_u8, 0x43_u8])
  CLSID_EVENTID_ChannelInfoSpanningEvent = LibC::GUID.new(0x41f36d80_u32, 0x4132_u16, 0x4cc2_u16, StaticArray[0xb1_u8, 0x21_u8, 0x1_u8, 0xa4_u8, 0x32_u8, 0x19_u8, 0xd8_u8, 0x1b_u8])
  CLSID_EVENTID_RRTSpanningEvent = LibC::GUID.new(0xf6cfc8f4_u32, 0xda93_u16, 0x4f2f_u16, StaticArray[0xbf_u8, 0xf8_u8, 0xba_u8, 0x1e_u8, 0xe6_u8, 0xfc_u8, 0xa3_u8, 0xa2_u8])
  CLSID_EVENTID_CSDescriptorSpanningEvent = LibC::GUID.new(0xefe779d9_u32, 0x97f0_u16, 0x4786_u16, StaticArray[0x80_u8, 0xd_u8, 0x95_u8, 0xcf_u8, 0x50_u8, 0x5d_u8, 0xdc_u8, 0x66_u8])
  CLSID_EVENTID_CtxADescriptorSpanningEvent = LibC::GUID.new(0x3ab4a2e6_u32, 0x4247_u16, 0x4b34_u16, StaticArray[0x89_u8, 0x6c_u8, 0x30_u8, 0xaf_u8, 0xa5_u8, 0xd2_u8, 0x1c_u8, 0x24_u8])
  CLSID_EVENTID_DVBScramblingControlSpanningEvent = LibC::GUID.new(0x4bd4e1c4_u32, 0x90a1_u16, 0x4109_u16, StaticArray[0x82_u8, 0x36_u8, 0x27_u8, 0xf0_u8, 0xe_u8, 0x7d_u8, 0xcc_u8, 0x5b_u8])
  CLSID_EVENTID_SignalAndServiceStatusSpanningEvent = LibC::GUID.new(0x8068c5cb_u32, 0x3c04_u16, 0x492b_u16, StaticArray[0xb4_u8, 0x7d_u8, 0x3_u8, 0x8_u8, 0x82_u8, 0xd_u8, 0xce_u8, 0x51_u8])
  CLSID_EVENTID_EmmMessageSpanningEvent = LibC::GUID.new(0x6bf00268_u32, 0x4f7e_u16, 0x4294_u16, StaticArray[0xaa_u8, 0x87_u8, 0xe9_u8, 0xe9_u8, 0x53_u8, 0xe4_u8, 0x3f_u8, 0x14_u8])
  CLSID_EVENTID_AudioTypeSpanningEvent = LibC::GUID.new(0x501cbfbe_u32, 0xb849_u16, 0x42ce_u16, StaticArray[0x9b_u8, 0xe9_u8, 0x3d_u8, 0xb8_u8, 0x69_u8, 0xfb_u8, 0x82_u8, 0xb3_u8])
  CLSID_EVENTID_StreamTypeSpanningEvent = LibC::GUID.new(0x82af2ebc_u32, 0x30a6_u16, 0x4264_u16, StaticArray[0xa8_u8, 0xb_u8, 0xad_u8, 0x2e_u8, 0x13_u8, 0x72_u8, 0xac_u8, 0x60_u8])
  CLSID_EVENTID_ARIBcontentSpanningEvent = LibC::GUID.new(0x3a954083_u32, 0x93d0_u16, 0x463e_u16, StaticArray[0x90_u8, 0xb2_u8, 0x7_u8, 0x42_u8, 0xc4_u8, 0x96_u8, 0xed_u8, 0xf0_u8])
  CLSID_EVENTID_LanguageSpanningEvent = LibC::GUID.new(0xe292666d_u32, 0x9c02_u16, 0x448d_u16, StaticArray[0xaa_u8, 0x8d_u8, 0x78_u8, 0x1a_u8, 0x93_u8, 0xfd_u8, 0xc3_u8, 0x95_u8])
  CLSID_EVENTID_DualMonoSpanningEvent = LibC::GUID.new(0xa9a29b56_u32, 0xa84b_u16, 0x488c_u16, StaticArray[0x89_u8, 0xd5_u8, 0xd_u8, 0x4e_u8, 0x76_u8, 0x57_u8, 0xc8_u8, 0xce_u8])
  CLSID_EVENTID_PIDListSpanningEvent = LibC::GUID.new(0x47fc8f65_u32, 0xe2bb_u16, 0x4634_u16, StaticArray[0x9c_u8, 0xef_u8, 0xfd_u8, 0xbf_u8, 0xe6_u8, 0x26_u8, 0x1d_u8, 0x5c_u8])
  CLSID_EVENTID_AudioDescriptorSpanningEvent = LibC::GUID.new(0x107bd41c_u32, 0xa6da_u16, 0x4691_u16, StaticArray[0x83_u8, 0x69_u8, 0x11_u8, 0xb2_u8, 0xcd_u8, 0xaa_u8, 0x28_u8, 0x8e_u8])
  CLSID_EVENTID_SubtitleSpanningEvent = LibC::GUID.new(0x5dcec048_u32, 0xd0b9_u16, 0x4163_u16, StaticArray[0x87_u8, 0x2c_u8, 0x4f_u8, 0x32_u8, 0x22_u8, 0x3b_u8, 0xe8_u8, 0x8a_u8])
  CLSID_EVENTID_TeletextSpanningEvent = LibC::GUID.new(0x9599d950_u32, 0x5f33_u16, 0x4617_u16, StaticArray[0xaf_u8, 0x7c_u8, 0x1e_u8, 0x54_u8, 0xb5_u8, 0x10_u8, 0xda_u8, 0xa3_u8])
  CLSID_EVENTID_StreamIDSpanningEvent = LibC::GUID.new(0xcaf1ab68_u32, 0xe153_u16, 0x4d41_u16, StaticArray[0xa6_u8, 0xb3_u8, 0xa7_u8, 0xc9_u8, 0x98_u8, 0xdb_u8, 0x75_u8, 0xee_u8])
  CLSID_EVENTID_PBDAParentalControlEvent = LibC::GUID.new(0xf947aa85_u32, 0xfb52_u16, 0x48e8_u16, StaticArray[0xb9_u8, 0xc5_u8, 0xe1_u8, 0xe1_u8, 0xf4_u8, 0x11_u8, 0xa5_u8, 0x1a_u8])
  CLSID_EVENTID_TuneFailureEvent = LibC::GUID.new(0xd97287b2_u32, 0x2dfd_u16, 0x436a_u16, StaticArray[0x94_u8, 0x85_u8, 0x99_u8, 0xd7_u8, 0xd4_u8, 0xab_u8, 0x5a_u8, 0x69_u8])
  CLSID_EVENTID_TuneFailureSpanningEvent = LibC::GUID.new(0x6f8aa455_u32, 0x5ee1_u16, 0x48ab_u16, StaticArray[0xa2_u8, 0x7c_u8, 0x4c_u8, 0x8d_u8, 0x70_u8, 0xb9_u8, 0xae_u8, 0xba_u8])
  CLSID_EVENTID_DvbParentalRatingDescriptor = LibC::GUID.new(0x2a67a58d_u32, 0xeca5_u16, 0x4eac_u16, StaticArray[0xab_u8, 0xcb_u8, 0xe7_u8, 0x34_u8, 0xd3_u8, 0x77_u8, 0x6d_u8, 0xa_u8])
  CLSID_EVENTID_DFNWithNoActualAVData = LibC::GUID.new(0xf5689ffe_u32, 0x55f9_u16, 0x4bb3_u16, StaticArray[0x96_u8, 0xbe_u8, 0xae_u8, 0x97_u8, 0x1c_u8, 0x63_u8, 0xba_u8, 0xe0_u8])
  CLSID_KSDATAFORMAT_TYPE_BDA_ANTENNA = LibC::GUID.new(0x71985f41_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  CLSID_KSDATAFORMAT_SUBTYPE_BDA_MPEG2_TRANSPORT = LibC::GUID.new(0xf4aeb342_u32, 0x329_u16, 0x4fdd_u16, StaticArray[0xa8_u8, 0xfd_u8, 0x4a_u8, 0xff_u8, 0x49_u8, 0x26_u8, 0xc9_u8, 0x78_u8])
  CLSID_KSDATAFORMAT_SPECIFIER_BDA_TRANSPORT = LibC::GUID.new(0x8deda6fd_u32, 0xac5f_u16, 0x4334_u16, StaticArray[0x8e_u8, 0xcf_u8, 0xa4_u8, 0xba_u8, 0x8f_u8, 0xa7_u8, 0xd0_u8, 0xf0_u8])
  CLSID_KSDATAFORMAT_TYPE_BDA_IF_SIGNAL = LibC::GUID.new(0x61be0b47_u32, 0xa5eb_u16, 0x499b_u16, StaticArray[0x9a_u8, 0x85_u8, 0x5b_u8, 0x16_u8, 0xc0_u8, 0x7f_u8, 0x12_u8, 0x58_u8])
  CLSID_KSDATAFORMAT_TYPE_MPEG2_SECTIONS = LibC::GUID.new(0x455f176c_u32, 0x4b06_u16, 0x47ce_u16, StaticArray[0x9a_u8, 0xef_u8, 0x8c_u8, 0xae_u8, 0xf7_u8, 0x3d_u8, 0xf7_u8, 0xb5_u8])
  CLSID_KSDATAFORMAT_SUBTYPE_ATSC_SI = LibC::GUID.new(0xb3c7397c_u32, 0xd303_u16, 0x414d_u16, StaticArray[0xb3_u8, 0x3c_u8, 0x4e_u8, 0xd2_u8, 0xc9_u8, 0xd2_u8, 0x97_u8, 0x33_u8])
  CLSID_KSDATAFORMAT_SUBTYPE_DVB_SI = LibC::GUID.new(0xe9dd31a3_u32, 0x221d_u16, 0x4adb_u16, StaticArray[0x85_u8, 0x32_u8, 0x9a_u8, 0xf3_u8, 0x9_u8, 0xc1_u8, 0xa4_u8, 0x8_u8])
  CLSID_KSDATAFORMAT_SUBTYPE_BDA_OPENCABLE_PSIP = LibC::GUID.new(0x762e3f66_u32, 0x336f_u16, 0x48d1_u16, StaticArray[0xbf_u8, 0x83_u8, 0x2b_u8, 0x0_u8, 0x35_u8, 0x2c_u8, 0x11_u8, 0xf0_u8])
  CLSID_KSDATAFORMAT_SUBTYPE_BDA_OPENCABLE_OOB_PSIP = LibC::GUID.new(0x951727db_u32, 0xd2ce_u16, 0x4528_u16, StaticArray[0x96_u8, 0xf6_u8, 0x33_u8, 0x1_u8, 0xfa_u8, 0xbb_u8, 0x2d_u8, 0xe0_u8])
  CLSID_KSDATAFORMAT_SUBTYPE_ISDB_SI = LibC::GUID.new(0x4a2eeb99_u32, 0x6458_u16, 0x4538_u16, StaticArray[0xb1_u8, 0x87_u8, 0x4_u8, 0x1_u8, 0x7c_u8, 0x41_u8, 0x41_u8, 0x3f_u8])
  CLSID_KSDATAFORMAT_SUBTYPE_PBDA_TRANSPORT_RAW = LibC::GUID.new(0xd7aed42_u32, 0xcb9a_u16, 0x11db_u16, StaticArray[0x97_u8, 0x5_u8, 0x0_u8, 0x50_u8, 0x56_u8, 0xc0_u8, 0x0_u8, 0x8_u8])
  CLSID_PINNAME_BDA_TRANSPORT = LibC::GUID.new(0x78216a81_u32, 0xcfa8_u16, 0x493e_u16, StaticArray[0x97_u8, 0x11_u8, 0x36_u8, 0xa6_u8, 0x1c_u8, 0x8_u8, 0xbd_u8, 0x9d_u8])
  CLSID_PINNAME_BDA_ANALOG_VIDEO = LibC::GUID.new(0x5c0c8281_u32, 0x5667_u16, 0x486c_u16, StaticArray[0x84_u8, 0x82_u8, 0x63_u8, 0xe3_u8, 0x1f_u8, 0x1_u8, 0xa6_u8, 0xe9_u8])
  CLSID_PINNAME_BDA_ANALOG_AUDIO = LibC::GUID.new(0xd28a580a_u32, 0x9b1f_u16, 0x4b0c_u16, StaticArray[0x9c_u8, 0x33_u8, 0x9b_u8, 0xf0_u8, 0xa8_u8, 0xea_u8, 0x63_u8, 0x6b_u8])
  CLSID_PINNAME_BDA_FM_RADIO = LibC::GUID.new(0xd2855fed_u32, 0xb2d3_u16, 0x4eeb_u16, StaticArray[0x9b_u8, 0xd0_u8, 0x19_u8, 0x34_u8, 0x36_u8, 0xa2_u8, 0xf8_u8, 0x90_u8])
  CLSID_PINNAME_BDA_IF_PIN = LibC::GUID.new(0x1a9d4a42_u32, 0xf3cd_u16, 0x48a1_u16, StaticArray[0x9a_u8, 0xea_u8, 0x71_u8, 0xde_u8, 0x13_u8, 0x3c_u8, 0xbe_u8, 0x14_u8])
  CLSID_PINNAME_BDA_OPENCABLE_PSIP_PIN = LibC::GUID.new(0x297bb104_u32, 0xe5c9_u16, 0x4ace_u16, StaticArray[0xb1_u8, 0x23_u8, 0x95_u8, 0xc3_u8, 0xcb_u8, 0xb2_u8, 0x4d_u8, 0x4f_u8])
  CLSID_KSPROPSETID_BdaEthernetFilter = LibC::GUID.new(0x71985f43_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  CLSID_KSPROPSETID_BdaIPv4Filter = LibC::GUID.new(0x71985f44_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  CLSID_KSPROPSETID_BdaIPv6Filter = LibC::GUID.new(0xe1785a74_u32, 0x2a23_u16, 0x4fb3_u16, StaticArray[0x92_u8, 0x45_u8, 0xa8_u8, 0xf8_u8, 0x80_u8, 0x17_u8, 0xef_u8, 0x33_u8])
  CLSID_KSPROPSETID_BdaSignalStats = LibC::GUID.new(0x1347d106_u32, 0xcf3a_u16, 0x428a_u16, StaticArray[0xa5_u8, 0xcb_u8, 0xac_u8, 0xd_u8, 0x9a_u8, 0x2a_u8, 0x43_u8, 0x38_u8])
  CLSID_KSMETHODSETID_BdaChangeSync = LibC::GUID.new(0xfd0a5af3_u32, 0xb41d_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0x95_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  CLSID_KSMETHODSETID_BdaDeviceConfiguration = LibC::GUID.new(0x71985f45_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  CLSID_KSPROPSETID_BdaTopology = LibC::GUID.new(0xa14ee835_u32, 0xa23_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc7_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  CLSID_KSPROPSETID_BdaPinControl = LibC::GUID.new(0xded49d5_u32, 0xa8b7_u16, 0x4d5d_u16, StaticArray[0x97_u8, 0xa1_u8, 0x12_u8, 0xb0_u8, 0xc1_u8, 0x95_u8, 0x87_u8, 0x4d_u8])
  CLSID_KSEVENTSETID_BdaPinEvent = LibC::GUID.new(0x104781cd_u32, 0x50bd_u16, 0x40d5_u16, StaticArray[0x95_u8, 0xfb_u8, 0x8_u8, 0x7e_u8, 0xe_u8, 0x86_u8, 0xa5_u8, 0x91_u8])
  CLSID_KSPROPSETID_BdaVoidTransform = LibC::GUID.new(0x71985f46_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  CLSID_KSPROPSETID_BdaNullTransform = LibC::GUID.new(0xddf15b0d_u32, 0xbd25_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0xa0_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  CLSID_KSPROPSETID_BdaFrequencyFilter = LibC::GUID.new(0x71985f47_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  CLSID_KSEVENTSETID_BdaTunerEvent = LibC::GUID.new(0xaab59e17_u32, 0x1c9_u16, 0x4ebf_u16, StaticArray[0x93_u8, 0xf2_u8, 0xfc_u8, 0x3b_u8, 0x79_u8, 0xb4_u8, 0x6f_u8, 0x91_u8])
  CLSID_KSPROPSETID_BdaLNBInfo = LibC::GUID.new(0x992cf102_u32, 0x49f9_u16, 0x4719_u16, StaticArray[0xa6_u8, 0x64_u8, 0xc4_u8, 0xf2_u8, 0x3e_u8, 0x24_u8, 0x8_u8, 0xf4_u8])
  CLSID_KSPROPSETID_BdaDiseqCommand = LibC::GUID.new(0xf84e2ab0_u32, 0x3c6b_u16, 0x45e3_u16, StaticArray[0xa0_u8, 0xfc_u8, 0x86_u8, 0x69_u8, 0xd4_u8, 0xb8_u8, 0x1f_u8, 0x11_u8])
  CLSID_KSEVENTSETID_BdaDiseqCEvent = LibC::GUID.new(0x8b19bbf0_u32, 0x4184_u16, 0x43ac_u16, StaticArray[0xad_u8, 0x3c_u8, 0xc_u8, 0x88_u8, 0x9b_u8, 0xe4_u8, 0xc2_u8, 0x12_u8])
  CLSID_KSPROPSETID_BdaDigitalDemodulator = LibC::GUID.new(0xef30f379_u32, 0x985b_u16, 0x4d10_u16, StaticArray[0xb6_u8, 0x40_u8, 0xa7_u8, 0x9d_u8, 0x5e_u8, 0x4_u8, 0xe1_u8, 0xe0_u8])
  CLSID_KSPROPSETID_BdaAutodemodulate = LibC::GUID.new(0xddf15b12_u32, 0xbd25_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0xa0_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  CLSID_KSPROPSETID_BdaTableSection = LibC::GUID.new(0x516b99c5_u32, 0x971c_u16, 0x4aaf_u16, StaticArray[0xb3_u8, 0xf3_u8, 0xd9_u8, 0xfd_u8, 0xa8_u8, 0xa1_u8, 0x5e_u8, 0x16_u8])
  CLSID_KSPROPSETID_BdaPIDFilter = LibC::GUID.new(0xd0a67d65_u32, 0x8df_u16, 0x4fec_u16, StaticArray[0x85_u8, 0x33_u8, 0xe5_u8, 0xb5_u8, 0x50_u8, 0x41_u8, 0xb_u8, 0x85_u8])
  CLSID_KSPROPSETID_BdaCA = LibC::GUID.new(0xb0693766_u32, 0x5278_u16, 0x4ec6_u16, StaticArray[0xb9_u8, 0xe1_u8, 0x3c_u8, 0xe4_u8, 0x5_u8, 0x60_u8, 0xef_u8, 0x5a_u8])
  CLSID_KSEVENTSETID_BdaCAEvent = LibC::GUID.new(0x488c4ccc_u32, 0xb768_u16, 0x4129_u16, StaticArray[0x8e_u8, 0xb1_u8, 0xb0_u8, 0xa_u8, 0x7_u8, 0x1f_u8, 0x90_u8, 0x68_u8])
  CLSID_KSMETHODSETID_BdaDrmService = LibC::GUID.new(0xbff6b5bb_u32, 0xb0ae_u16, 0x484c_u16, StaticArray[0x9d_u8, 0xca_u8, 0x73_u8, 0x52_u8, 0x8f_u8, 0xb0_u8, 0xb4_u8, 0x6e_u8])
  CLSID_KSMETHODSETID_BdaWmdrmSession = LibC::GUID.new(0x4be6fa3d_u32, 0x7cd_u16, 0x4139_u16, StaticArray[0x8b_u8, 0x80_u8, 0x8c_u8, 0x18_u8, 0xba_u8, 0x3a_u8, 0xec_u8, 0x88_u8])
  CLSID_KSMETHODSETID_BdaWmdrmTuner = LibC::GUID.new(0x86d979cf_u32, 0xa8a7_u16, 0x4f94_u16, StaticArray[0xb5_u8, 0xfb_u8, 0x14_u8, 0xc0_u8, 0xac_u8, 0xa6_u8, 0x8f_u8, 0xe6_u8])
  CLSID_KSMETHODSETID_BdaEventing = LibC::GUID.new(0xf99492da_u32, 0x6193_u16, 0x4eb0_u16, StaticArray[0x86_u8, 0x90_u8, 0x66_u8, 0x86_u8, 0xcb_u8, 0xff_u8, 0x71_u8, 0x3e_u8])
  CLSID_KSEVENTSETID_BdaEvent = LibC::GUID.new(0xae7e55b2_u32, 0x96d7_u16, 0x4e29_u16, StaticArray[0x90_u8, 0x8f_u8, 0x62_u8, 0xf9_u8, 0x5b_u8, 0x2a_u8, 0x16_u8, 0x79_u8])
  CLSID_KSMETHODSETID_BdaDebug = LibC::GUID.new(0xd4a90ec_u32, 0xc69d_u16, 0x4ee2_u16, StaticArray[0x8c_u8, 0x5a_u8, 0xfb_u8, 0x1f_u8, 0x63_u8, 0xa5_u8, 0xd_u8, 0xa1_u8])
  CLSID_KSMETHODSETID_BdaTuner = LibC::GUID.new(0xb774102f_u32, 0xac07_u16, 0x478a_u16, StaticArray[0x82_u8, 0x28_u8, 0x27_u8, 0x42_u8, 0xd9_u8, 0x61_u8, 0xfa_u8, 0x7e_u8])
  CLSID_KSMETHODSETID_BdaNameValueA = LibC::GUID.new(0xc24096d_u32, 0x5ff5_u16, 0x47de_u16, StaticArray[0xa8_u8, 0x56_u8, 0x6_u8, 0x2e_u8, 0x58_u8, 0x7e_u8, 0x37_u8, 0x27_u8])
  CLSID_KSMETHODSETID_BdaNameValue = LibC::GUID.new(0x36e07304_u32, 0x9f0d_u16, 0x4e88_u16, StaticArray[0x91_u8, 0x18_u8, 0xac_u8, 0xb_u8, 0xa3_u8, 0x17_u8, 0xb7_u8, 0xf2_u8])
  CLSID_KSMETHODSETID_BdaMux = LibC::GUID.new(0x942aafec_u32, 0x4c05_u16, 0x4c74_u16, StaticArray[0xb8_u8, 0xeb_u8, 0x87_u8, 0x6_u8, 0xc2_u8, 0xa4_u8, 0x94_u8, 0x3f_u8])
  CLSID_KSMETHODSETID_BdaScanning = LibC::GUID.new(0x12eb49df_u32, 0x6249_u16, 0x47f3_u16, StaticArray[0xb1_u8, 0x90_u8, 0xe2_u8, 0x1e_u8, 0x6e_u8, 0x2f_u8, 0x8a_u8, 0x9c_u8])
  CLSID_KSMETHODSETID_BdaGuideDataDeliveryService = LibC::GUID.new(0x8d9d5562_u32, 0x1589_u16, 0x417d_u16, StaticArray[0x99_u8, 0xce_u8, 0xac_u8, 0x53_u8, 0x1d_u8, 0xda_u8, 0x19_u8, 0xf9_u8])
  CLSID_KSMETHODSETID_BdaConditionalAccessService = LibC::GUID.new(0x10ced3b4_u32, 0x320b_u16, 0x41bf_u16, StaticArray[0x98_u8, 0x24_u8, 0x1b_u8, 0x2e_u8, 0x68_u8, 0xe7_u8, 0x1e_u8, 0xb9_u8])
  CLSID_KSMETHODSETID_BdaIsdbConditionalAccess = LibC::GUID.new(0x5e68c627_u32, 0x16c2_u16, 0x4e6c_u16, StaticArray[0xb1_u8, 0xe2_u8, 0xd0_u8, 0x1_u8, 0x70_u8, 0xcd_u8, 0xaa_u8, 0xf_u8])
  CLSID_KSMETHODSETID_BdaTSSelector = LibC::GUID.new(0x1dcfafe9_u32, 0xb45e_u16, 0x41b3_u16, StaticArray[0xbb_u8, 0x2a_u8, 0x56_u8, 0x1e_u8, 0xb1_u8, 0x29_u8, 0xae_u8, 0x98_u8])
  CLSID_KSMETHODSETID_BdaUserActivity = LibC::GUID.new(0xeda5c834_u32, 0x4531_u16, 0x483c_u16, StaticArray[0xbe_u8, 0xa_u8, 0x94_u8, 0xe6_u8, 0xc9_u8, 0x6f_u8, 0xf3_u8, 0x96_u8])
  CLSID_KSCATEGORY_BDA_RECEIVER_COMPONENT = LibC::GUID.new(0xfd0a5af4_u32, 0xb41d_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0x95_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  CLSID_KSCATEGORY_BDA_NETWORK_TUNER = LibC::GUID.new(0x71985f48_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  CLSID_KSCATEGORY_BDA_NETWORK_EPG = LibC::GUID.new(0x71985f49_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  CLSID_KSCATEGORY_BDA_IP_SINK = LibC::GUID.new(0x71985f4a_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  CLSID_KSCATEGORY_BDA_NETWORK_PROVIDER = LibC::GUID.new(0x71985f4b_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  CLSID_KSCATEGORY_BDA_TRANSPORT_INFORMATION = LibC::GUID.new(0xa2e3074f_u32, 0x6c3d_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x53_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  CLSID_KSNODE_BDA_RF_TUNER = LibC::GUID.new(0x71985f4c_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  CLSID_KSNODE_BDA_ANALOG_DEMODULATOR = LibC::GUID.new(0x634db199_u32, 0x27dd_u16, 0x46b8_u16, StaticArray[0xac_u8, 0xfb_u8, 0xec_u8, 0xc9_u8, 0x8e_u8, 0x61_u8, 0xa2_u8, 0xad_u8])
  CLSID_KSNODE_BDA_QAM_DEMODULATOR = LibC::GUID.new(0x71985f4d_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  CLSID_KSNODE_BDA_QPSK_DEMODULATOR = LibC::GUID.new(0x6390c905_u32, 0x27c1_u16, 0x4d67_u16, StaticArray[0xbd_u8, 0xb7_u8, 0x77_u8, 0xc5_u8, 0xd_u8, 0x7_u8, 0x93_u8, 0x0_u8])
  CLSID_KSNODE_BDA_8VSB_DEMODULATOR = LibC::GUID.new(0x71985f4f_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  CLSID_KSNODE_BDA_COFDM_DEMODULATOR = LibC::GUID.new(0x2dac6e05_u32, 0xedbe_u16, 0x4b9c_u16, StaticArray[0xb3_u8, 0x87_u8, 0x1b_u8, 0x6f_u8, 0xad_u8, 0x7d_u8, 0x64_u8, 0x95_u8])
  CLSID_KSNODE_BDA_8PSK_DEMODULATOR = LibC::GUID.new(0xe957a0e7_u32, 0xdd98_u16, 0x4a3c_u16, StaticArray[0x81_u8, 0xb_u8, 0x35_u8, 0x25_u8, 0x15_u8, 0x7a_u8, 0xb6_u8, 0x2e_u8])
  CLSID_KSNODE_BDA_ISDB_T_DEMODULATOR = LibC::GUID.new(0xfcea3ae3_u32, 0x2cb2_u16, 0x464d_u16, StaticArray[0x8f_u8, 0x5d_u8, 0x30_u8, 0x5c_u8, 0xb_u8, 0xb7_u8, 0x78_u8, 0xa2_u8])
  CLSID_KSNODE_BDA_ISDB_S_DEMODULATOR = LibC::GUID.new(0xedde230a_u32, 0x9086_u16, 0x432d_u16, StaticArray[0xb8_u8, 0xa5_u8, 0x66_u8, 0x70_u8, 0x26_u8, 0x38_u8, 0x7_u8, 0xe9_u8])
  CLSID_KSNODE_BDA_OPENCABLE_POD = LibC::GUID.new(0x345812a0_u32, 0xfb7c_u16, 0x4790_u16, StaticArray[0xaa_u8, 0x7e_u8, 0xb1_u8, 0xdb_u8, 0x88_u8, 0xac_u8, 0x19_u8, 0xc9_u8])
  CLSID_KSNODE_BDA_COMMON_CA_POD = LibC::GUID.new(0xd83ef8fc_u32, 0xf3b8_u16, 0x45ab_u16, StaticArray[0x8b_u8, 0x71_u8, 0xec_u8, 0xf7_u8, 0xc3_u8, 0x39_u8, 0xde_u8, 0xb4_u8])
  CLSID_KSNODE_BDA_PID_FILTER = LibC::GUID.new(0xf5412789_u32, 0xb0a0_u16, 0x44e1_u16, StaticArray[0xae_u8, 0x4f_u8, 0xee_u8, 0x99_u8, 0x9b_u8, 0x1b_u8, 0x7f_u8, 0xbe_u8])
  CLSID_KSNODE_BDA_IP_SINK = LibC::GUID.new(0x71985f4e_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  CLSID_KSNODE_BDA_VIDEO_ENCODER = LibC::GUID.new(0xd98429e3_u32, 0x65c9_u16, 0x4ac4_u16, StaticArray[0x93_u8, 0xaa_u8, 0x76_u8, 0x67_u8, 0x82_u8, 0x83_u8, 0x3b_u8, 0x7a_u8])
  CLSID_KSNODE_BDA_PBDA_CAS = LibC::GUID.new(0xc026869f_u32, 0x7129_u16, 0x4e71_u16, StaticArray[0x86_u8, 0x96_u8, 0xec_u8, 0x8f_u8, 0x75_u8, 0x29_u8, 0x9b_u8, 0x77_u8])
  CLSID_KSNODE_BDA_PBDA_ISDBCAS = LibC::GUID.new(0xf2cf2ab3_u32, 0x5b9d_u16, 0x40ae_u16, StaticArray[0xab_u8, 0x7c_u8, 0x4e_u8, 0x7a_u8, 0xd0_u8, 0xbd_u8, 0x1c_u8, 0x52_u8])
  CLSID_KSNODE_BDA_PBDA_TUNER = LibC::GUID.new(0xaa5e8286_u32, 0x593c_u16, 0x4979_u16, StaticArray[0x94_u8, 0x94_u8, 0x46_u8, 0xa2_u8, 0xa9_u8, 0xdf_u8, 0xe0_u8, 0x76_u8])
  CLSID_KSNODE_BDA_PBDA_MUX = LibC::GUID.new(0xf88c7787_u32, 0x6678_u16, 0x4f4b_u16, StaticArray[0xa1_u8, 0x3e_u8, 0xda_u8, 0x9_u8, 0x86_u8, 0x1d_u8, 0x68_u8, 0x2b_u8])
  CLSID_KSNODE_BDA_PBDA_DRM = LibC::GUID.new(0x9eeebd03_u32, 0xeea1_u16, 0x450f_u16, StaticArray[0x96_u8, 0xae_u8, 0x63_u8, 0x3e_u8, 0x6d_u8, 0xe6_u8, 0x3c_u8, 0xce_u8])
  CLSID_KSNODE_BDA_DRI_DRM = LibC::GUID.new(0x4f95ad74_u32, 0xcefb_u16, 0x42d2_u16, StaticArray[0x94_u8, 0xa9_u8, 0x68_u8, 0xc5_u8, 0xb2_u8, 0xc1_u8, 0xaa_u8, 0xbe_u8])
  CLSID_KSNODE_BDA_TS_SELECTOR = LibC::GUID.new(0x5eddf185_u32, 0xfed1_u16, 0x4f45_u16, StaticArray[0x96_u8, 0x85_u8, 0xbb_u8, 0xb7_u8, 0x3c_u8, 0x32_u8, 0x3c_u8, 0xfc_u8])
  CLSID_PINNAME_IPSINK_INPUT = LibC::GUID.new(0x3fdffa70_u32, 0xac9a_u16, 0x11d2_u16, StaticArray[0x8f_u8, 0x17_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe2_u8])
  CLSID_KSDATAFORMAT_TYPE_BDA_IP = LibC::GUID.new(0xe25f7b8e_u32, 0xcccc_u16, 0x11d2_u16, StaticArray[0x8f_u8, 0x25_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe2_u8])
  CLSID_KSDATAFORMAT_SUBTYPE_BDA_IP = LibC::GUID.new(0x5a9a213c_u32, 0xdb08_u16, 0x11d2_u16, StaticArray[0x8f_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe2_u8])
  CLSID_KSDATAFORMAT_SPECIFIER_BDA_IP = LibC::GUID.new(0x6b891420_u32, 0xdb09_u16, 0x11d2_u16, StaticArray[0x8f_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe2_u8])
  CLSID_KSDATAFORMAT_TYPE_BDA_IP_CONTROL = LibC::GUID.new(0xdadd5799_u32, 0x7d5b_u16, 0x4b63_u16, StaticArray[0x80_u8, 0xfb_u8, 0xd1_u8, 0x44_u8, 0x2f_u8, 0x26_u8, 0xb6_u8, 0x21_u8])
  CLSID_KSDATAFORMAT_SUBTYPE_BDA_IP_CONTROL = LibC::GUID.new(0x499856e8_u32, 0xe85b_u16, 0x48ed_u16, StaticArray[0x9b_u8, 0xea_u8, 0x41_u8, 0xd_u8, 0xd_u8, 0xd4_u8, 0xef_u8, 0x81_u8])
  CLSID_PINNAME_MPE = LibC::GUID.new(0xc1b06d73_u32, 0x1dbb_u16, 0x11d3_u16, StaticArray[0x8f_u8, 0x46_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe2_u8])
  CLSID_KSDATAFORMAT_TYPE_MPE = LibC::GUID.new(0x455f176c_u32, 0x4b06_u16, 0x47ce_u16, StaticArray[0x9a_u8, 0xef_u8, 0x8c_u8, 0xae_u8, 0xf7_u8, 0x3d_u8, 0xf7_u8, 0xb5_u8])
  CLSID_DIGITAL_CABLE_NETWORK_TYPE = LibC::GUID.new(0x143827ab_u32, 0xf77b_u16, 0x498d_u16, StaticArray[0x81_u8, 0xca_u8, 0x5a_u8, 0x0_u8, 0x7a_u8, 0xec_u8, 0x28_u8, 0xbf_u8])
  CLSID_ANALOG_TV_NETWORK_TYPE = LibC::GUID.new(0xb820d87e_u32, 0xe0e3_u16, 0x478f_u16, StaticArray[0x8a_u8, 0x38_u8, 0x4e_u8, 0x13_u8, 0xf7_u8, 0xb3_u8, 0xdf_u8, 0x42_u8])
  CLSID_ANALOG_AUXIN_NETWORK_TYPE = LibC::GUID.new(0x742ef867_u32, 0x9e1_u16, 0x40a3_u16, StaticArray[0x82_u8, 0xd3_u8, 0x96_u8, 0x69_u8, 0xba_u8, 0x35_u8, 0x32_u8, 0x5f_u8])
  CLSID_ANALOG_FM_NETWORK_TYPE = LibC::GUID.new(0x7728087b_u32, 0x2bb9_u16, 0x4e30_u16, StaticArray[0x80_u8, 0x78_u8, 0x44_u8, 0x94_u8, 0x76_u8, 0xe5_u8, 0x9d_u8, 0xbb_u8])
  CLSID_ISDB_TERRESTRIAL_TV_NETWORK_TYPE = LibC::GUID.new(0x95037f6f_u32, 0x3ac7_u16, 0x4452_u16, StaticArray[0xb6_u8, 0xc4_u8, 0x45_u8, 0xa9_u8, 0xce_u8, 0x92_u8, 0x92_u8, 0xa2_u8])
  CLSID_ISDB_T_NETWORK_TYPE = LibC::GUID.new(0xfc3855a6_u32, 0xc901_u16, 0x4f2e_u16, StaticArray[0xab_u8, 0xa8_u8, 0x90_u8, 0x81_u8, 0x5a_u8, 0xfc_u8, 0x6c_u8, 0x83_u8])
  CLSID_ISDB_SATELLITE_TV_NETWORK_TYPE = LibC::GUID.new(0xb0a4e6a0_u32, 0x6a1a_u16, 0x4b83_u16, StaticArray[0xbb_u8, 0x5b_u8, 0x90_u8, 0x3e_u8, 0x1d_u8, 0x90_u8, 0xe6_u8, 0xb6_u8])
  CLSID_ISDB_S_NETWORK_TYPE = LibC::GUID.new(0xa1e78202_u32, 0x1459_u16, 0x41b1_u16, StaticArray[0x9c_u8, 0xa9_u8, 0x2a_u8, 0x92_u8, 0x58_u8, 0x7a_u8, 0x42_u8, 0xcc_u8])
  CLSID_ISDB_CABLE_TV_NETWORK_TYPE = LibC::GUID.new(0xc974ddb5_u32, 0x41fe_u16, 0x4b25_u16, StaticArray[0x97_u8, 0x41_u8, 0x92_u8, 0xf0_u8, 0x49_u8, 0xf1_u8, 0xd5_u8, 0xd1_u8])
  CLSID_DIRECT_TV_SATELLITE_TV_NETWORK_TYPE = LibC::GUID.new(0x93b66fb5_u32, 0x93d4_u16, 0x4323_u16, StaticArray[0x92_u8, 0x1c_u8, 0xc1_u8, 0xf5_u8, 0x2d_u8, 0xf6_u8, 0x1d_u8, 0x3f_u8])
  CLSID_ECHOSTAR_SATELLITE_TV_NETWORK_TYPE = LibC::GUID.new(0xc4f6b31b_u32, 0xc6bf_u16, 0x4759_u16, StaticArray[0x88_u8, 0x6f_u8, 0xa7_u8, 0x38_u8, 0x6d_u8, 0xca_u8, 0x27_u8, 0xa0_u8])
  CLSID_ATSC_TERRESTRIAL_TV_NETWORK_TYPE = LibC::GUID.new(0xdad2fdd_u32, 0x5fd7_u16, 0x11d3_u16, StaticArray[0x8f_u8, 0x50_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe2_u8])
  CLSID_DVB_TERRESTRIAL_TV_NETWORK_TYPE = LibC::GUID.new(0x216c62df_u32, 0x6d7f_u16, 0x4e9a_u16, StaticArray[0x85_u8, 0x71_u8, 0x5_u8, 0xf1_u8, 0x4e_u8, 0xdb_u8, 0x76_u8, 0x6a_u8])
  CLSID_BSKYB_TERRESTRIAL_TV_NETWORK_TYPE = LibC::GUID.new(0x9e9e46c6_u32, 0x3aba_u16, 0x4f08_u16, StaticArray[0xad_u8, 0xe_u8, 0xcc_u8, 0x5a_u8, 0xc8_u8, 0x14_u8, 0x8c_u8, 0x2b_u8])
  CLSID_DVB_SATELLITE_TV_NETWORK_TYPE = LibC::GUID.new(0xfa4b375a_u32, 0x45b4_u16, 0x4d45_u16, StaticArray[0x84_u8, 0x40_u8, 0x26_u8, 0x39_u8, 0x57_u8, 0xb1_u8, 0x16_u8, 0x23_u8])
  CLSID_DVB_CABLE_TV_NETWORK_TYPE = LibC::GUID.new(0xdc0c0fe7_u32, 0x485_u16, 0x4266_u16, StaticArray[0xb9_u8, 0x3f_u8, 0x68_u8, 0xfb_u8, 0xf8_u8, 0xe_u8, 0xd8_u8, 0x34_u8])
  CLSID_BDA_DEBUG_DATA_AVAILABLE = LibC::GUID.new(0x69c24f54_u32, 0x9983_u16, 0x497e_u16, StaticArray[0xb4_u8, 0x15_u8, 0x28_u8, 0x2b_u8, 0xe4_u8, 0xc5_u8, 0x55_u8, 0xfb_u8])
  CLSID_BDA_DEBUG_DATA_TYPE_STRING = LibC::GUID.new(0xa806e767_u32, 0xde5c_u16, 0x430c_u16, StaticArray[0x80_u8, 0xbf_u8, 0xa2_u8, 0x1e_u8, 0xbe_u8, 0x6_u8, 0xc7_u8, 0x48_u8])
  CLSID_EVENTID_BDA_IsdbCASResponse = LibC::GUID.new(0xd4cb1966_u32, 0x41bc_u16, 0x4ced_u16, StaticArray[0x9a_u8, 0x20_u8, 0xfd_u8, 0xce_u8, 0xac_u8, 0x78_u8, 0xf7_u8, 0xd_u8])
  CLSID_EVENTID_BDA_CASRequestTuner = LibC::GUID.new(0xcf39a9d8_u32, 0xf5d3_u16, 0x4685_u16, StaticArray[0xbe_u8, 0x57_u8, 0xed_u8, 0x81_u8, 0xdb_u8, 0xa4_u8, 0x6b_u8, 0x27_u8])
  CLSID_EVENTID_BDA_CASReleaseTuner = LibC::GUID.new(0x20c1a16b_u32, 0x441f_u16, 0x49a5_u16, StaticArray[0xbb_u8, 0x5c_u8, 0xe9_u8, 0xa0_u8, 0x44_u8, 0x95_u8, 0xc6_u8, 0xc1_u8])
  CLSID_EVENTID_BDA_CASOpenMMI = LibC::GUID.new(0x85dac915_u32, 0xe593_u16, 0x410d_u16, StaticArray[0x84_u8, 0x71_u8, 0xd6_u8, 0x81_u8, 0x21_u8, 0x5_u8, 0xf2_u8, 0x8e_u8])
  CLSID_EVENTID_BDA_CASCloseMMI = LibC::GUID.new(0x5d0f550f_u32, 0xde2e_u16, 0x479d_u16, StaticArray[0x83_u8, 0x45_u8, 0xec_u8, 0xe_u8, 0x95_u8, 0x57_u8, 0xe8_u8, 0xa2_u8])
  CLSID_EVENTID_BDA_CASBroadcastMMI = LibC::GUID.new(0x676876f0_u32, 0x1132_u16, 0x404c_u16, StaticArray[0xa7_u8, 0xca_u8, 0xe7_u8, 0x20_u8, 0x69_u8, 0xa9_u8, 0xd5_u8, 0x4f_u8])
  CLSID_EVENTID_BDA_TunerSignalLock = LibC::GUID.new(0x1872e740_u32, 0xf573_u16, 0x429b_u16, StaticArray[0xa0_u8, 0xe_u8, 0xd9_u8, 0xc1_u8, 0xe4_u8, 0x8_u8, 0xaf_u8, 0x9_u8])
  CLSID_EVENTID_BDA_TunerNoSignal = LibC::GUID.new(0xe29b382b_u32, 0x1edd_u16, 0x4930_u16, StaticArray[0xbc_u8, 0x46_u8, 0x68_u8, 0x2f_u8, 0xd7_u8, 0x2d_u8, 0x2d_u8, 0xfb_u8])
  CLSID_EVENTID_BDA_GPNVValueUpdate = LibC::GUID.new(0xff75c68c_u32, 0xf416_u16, 0x4e7e_u16, StaticArray[0xbf_u8, 0x17_u8, 0x6d_u8, 0x55_u8, 0xc5_u8, 0xdf_u8, 0x15_u8, 0x75_u8])
  CLSID_EVENTID_BDA_UpdateDrmStatus = LibC::GUID.new(0x65a6f681_u32, 0x1462_u16, 0x473b_u16, StaticArray[0x88_u8, 0xce_u8, 0xcb_u8, 0x73_u8, 0x14_u8, 0x27_u8, 0xbd_u8, 0xb5_u8])
  CLSID_EVENTID_BDA_UpdateScanState = LibC::GUID.new(0x55702b50_u32, 0x7b49_u16, 0x42b8_u16, StaticArray[0xa8_u8, 0x2f_u8, 0x4a_u8, 0xfb_u8, 0x69_u8, 0x1b_u8, 0x6_u8, 0x28_u8])
  CLSID_EVENTID_BDA_GuideDataAvailable = LibC::GUID.new(0x98db717a_u32, 0x478a_u16, 0x4cd4_u16, StaticArray[0x92_u8, 0xd0_u8, 0x95_u8, 0xf6_u8, 0x6b_u8, 0x89_u8, 0xe5_u8, 0xb1_u8])
  CLSID_EVENTID_BDA_GuideServiceInformationUpdated = LibC::GUID.new(0xa1c3ea2b_u32, 0x175f_u16, 0x4458_u16, StaticArray[0xb7_u8, 0x35_u8, 0x50_u8, 0x7d_u8, 0x22_u8, 0xdb_u8, 0x23_u8, 0xa6_u8])
  CLSID_EVENTID_BDA_GuideDataError = LibC::GUID.new(0xac33c448_u32, 0x6f73_u16, 0x4fd7_u16, StaticArray[0xb3_u8, 0x41_u8, 0x59_u8, 0x4c_u8, 0x36_u8, 0xd_u8, 0x8d_u8, 0x74_u8])
  CLSID_EVENTID_BDA_DiseqCResponseAvailable = LibC::GUID.new(0xefa628f8_u32, 0x1f2c_u16, 0x4b67_u16, StaticArray[0x9e_u8, 0xa5_u8, 0xac_u8, 0xf6_u8, 0xfa_u8, 0x9a_u8, 0x1f_u8, 0x36_u8])
  CLSID_EVENTID_BDA_LbigsOpenConnection = LibC::GUID.new(0x356207b2_u32, 0x6f31_u16, 0x4eb0_u16, StaticArray[0xa2_u8, 0x71_u8, 0xb3_u8, 0xfa_u8, 0x6b_u8, 0xb7_u8, 0x68_u8, 0xf_u8])
  CLSID_EVENTID_BDA_LbigsSendData = LibC::GUID.new(0x1123277b_u32, 0xf1c6_u16, 0x4154_u16, StaticArray[0x8b_u8, 0xd_u8, 0x48_u8, 0xe6_u8, 0x15_u8, 0x70_u8, 0x59_u8, 0xaa_u8])
  CLSID_EVENTID_BDA_LbigsCloseConnectionHandle = LibC::GUID.new(0xc2f08b99_u32, 0x65ef_u16, 0x4314_u16, StaticArray[0x96_u8, 0x71_u8, 0xe9_u8, 0x9d_u8, 0x4c_u8, 0xce_u8, 0xb_u8, 0xae_u8])
  CLSID_EVENTID_BDA_EncoderSignalLock = LibC::GUID.new(0x5ec90eb9_u32, 0x39fa_u16, 0x4cfc_u16, StaticArray[0xb9_u8, 0x3f_u8, 0x0_u8, 0xbb_u8, 0x11_u8, 0x7_u8, 0x7f_u8, 0x5e_u8])
  CLSID_EVENTID_BDA_FdcStatus = LibC::GUID.new(0x5f25366_u32, 0xd0eb_u16, 0x43d2_u16, StaticArray[0xbc_u8, 0x3c_u8, 0x68_u8, 0x2b_u8, 0x86_u8, 0x3d_u8, 0xf1_u8, 0x42_u8])
  CLSID_EVENTID_BDA_FdcTableSection = LibC::GUID.new(0x6a0cd757_u32, 0x4ce3_u16, 0x4e5b_u16, StaticArray[0x94_u8, 0x44_u8, 0x71_u8, 0x87_u8, 0xb8_u8, 0x71_u8, 0x52_u8, 0xc5_u8])
  CLSID_EVENTID_BDA_TransprtStreamSelectorInfo = LibC::GUID.new(0xc40f9f85_u32, 0x9d0_u16, 0x489c_u16, StaticArray[0x9e_u8, 0x9c_u8, 0xa_u8, 0xbb_u8, 0xb5_u8, 0x69_u8, 0x51_u8, 0xb0_u8])
  CLSID_EVENTID_BDA_RatingPinReset = LibC::GUID.new(0xc6e048c0_u32, 0xc574_u16, 0x4c26_u16, StaticArray[0xbc_u8, 0xda_u8, 0x2f_u8, 0x4d_u8, 0x35_u8, 0xeb_u8, 0x5e_u8, 0x85_u8])
  CLSID_PBDA_ALWAYS_TUNE_IN_MUX = LibC::GUID.new(0x1e1d7141_u32, 0x583f_u16, 0x4ac2_u16, StaticArray[0xb0_u8, 0x19_u8, 0x1f_u8, 0x43_u8, 0xe_u8, 0xda_u8, 0xf_u8, 0x4c_u8])
  CLSID_BDANETWORKTYPE_ATSC = LibC::GUID.new(0x71985f51_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])

  alias AMGETERRORTEXTPROCA = Proc(HRESULT, PSTR, UInt32, LibC::BOOL)
  alias AMGETERRORTEXTPROCW = Proc(HRESULT, LibC::LPWSTR, UInt32, LibC::BOOL)
  alias PDXVA2SW_GETVIDEOPROCESSORRENDERTARGETCOUNT = Proc(DXVA2_VideoDesc*, UInt32*, HRESULT)
  alias PDXVA2SW_GETVIDEOPROCESSORRENDERTARGETS = Proc(DXVA2_VideoDesc*, UInt32, D3DFORMAT*, HRESULT)
  alias PDXVA2SW_GETVIDEOPROCESSORCAPS = Proc(DXVA2_VideoDesc*, D3DFORMAT, DXVA2_VideoProcessorCaps*, HRESULT)
  alias PDXVA2SW_GETVIDEOPROCESSORSUBSTREAMFORMATCOUNT = Proc(DXVA2_VideoDesc*, D3DFORMAT, UInt32*, HRESULT)
  alias PDXVA2SW_GETVIDEOPROCESSORSUBSTREAMFORMATS = Proc(DXVA2_VideoDesc*, D3DFORMAT, UInt32, D3DFORMAT*, HRESULT)
  alias PDXVA2SW_GETPROCAMPRANGE = Proc(DXVA2_VideoDesc*, D3DFORMAT, UInt32, DXVA2_ValueRange*, HRESULT)
  alias PDXVA2SW_GETFILTERPROPERTYRANGE = Proc(DXVA2_VideoDesc*, D3DFORMAT, UInt32, DXVA2_ValueRange*, HRESULT)
  alias PDXVA2SW_CREATEVIDEOPROCESSDEVICE = Proc(IDirect3DDevice9, DXVA2_VideoDesc*, D3DFORMAT, UInt32, LibC::HANDLE*, HRESULT)
  alias PDXVA2SW_DESTROYVIDEOPROCESSDEVICE = Proc(LibC::HANDLE, HRESULT)
  alias PDXVA2SW_VIDEOPROCESSBEGINFRAME = Proc(LibC::HANDLE, HRESULT)
  alias PDXVA2SW_VIDEOPROCESSENDFRAME = Proc(LibC::HANDLE, LibC::HANDLE*, HRESULT)
  alias PDXVA2SW_VIDEOPROCESSSETRENDERTARGET = Proc(LibC::HANDLE, IDirect3DSurface9, HRESULT)
  alias PDXVA2SW_VIDEOPROCESSBLT = Proc(LibC::HANDLE, DXVA2_VIDEOPROCESSBLT*, HRESULT)


  enum OA_BOOL : Int32
    OATRUE = -1
    OAFALSE = 0
  end

  enum MPEG2VIDEOINFO_FLAGS : UInt32
    AMMPEG2_DoPanScan = 1
    AMMPEG2_DVDLine21Field1 = 2
    AMMPEG2_DVDLine21Field2 = 4
    AMMPEG2_SourceIsLetterboxed = 8
    AMMPEG2_FilmCameraMode = 16
    AMMPEG2_LetterboxAnalogOut = 32
    AMMPEG2_DSS_UserData = 64
    AMMPEG2_DVB_UserData = 128
    AMMPEG2_27MhzTimebase = 256
    AMMPEG2_WidescreenAnalogOut = 512
  end

  enum MPEGLAYER3WAVEFORMAT_FLAGS : UInt32
    MPEGLAYER3_FLAG_PADDING_ISO = 0
    MPEGLAYER3_FLAG_PADDING_ON = 1
    MPEGLAYER3_FLAG_PADDING_OFF = 2
  end

  enum AMVP_SELECT_FORMAT_BY : Int32
    AMVP_DO_NOT_CARE = 0
    AMVP_BEST_BANDWIDTH = 1
    AMVP_INPUT_SAME_AS_OUTPUT = 2
  end

  enum AMVP_MODE : Int32
    AMVP_MODE_WEAVE = 0
    AMVP_MODE_BOBINTERLEAVED = 1
    AMVP_MODE_BOBNONINTERLEAVED = 2
    AMVP_MODE_SKIPEVEN = 3
    AMVP_MODE_SKIPODD = 4
  end

  enum PIN_DIRECTION : Int32
    PINDIR_INPUT = 0
    PINDIR_OUTPUT = 1
  end

  enum FILTER_STATE : Int32
    State_Stopped = 0
    State_Paused = 1
    State_Running = 2
  end

  enum AM_SAMPLE_PROPERTY_FLAGS : Int32
    AM_SAMPLE_SPLICEPOINT = 1
    AM_SAMPLE_PREROLL = 2
    AM_SAMPLE_DATADISCONTINUITY = 4
    AM_SAMPLE_TYPECHANGED = 8
    AM_SAMPLE_TIMEVALID = 16
    AM_SAMPLE_TIMEDISCONTINUITY = 64
    AM_SAMPLE_FLUSH_ON_PAUSE = 128
    AM_SAMPLE_STOPVALID = 256
    AM_SAMPLE_ENDOFSTREAM = 512
    AM_STREAM_MEDIA = 0
    AM_STREAM_CONTROL = 1
  end

  enum AM_SEEKING_SeekingFlags : Int32
    AM_SEEKING_NoPositioning = 0
    AM_SEEKING_AbsolutePositioning = 1
    AM_SEEKING_RelativePositioning = 2
    AM_SEEKING_IncrementalPositioning = 3
    AM_SEEKING_PositioningBitsMask = 3
    AM_SEEKING_SeekToKeyFrame = 4
    AM_SEEKING_ReturnTime = 8
    AM_SEEKING_Segment = 16
    AM_SEEKING_NoFlush = 32
  end

  enum AM_SEEKING_SEEKING_CAPABILITIES : Int32
    AM_SEEKING_CanSeekAbsolute = 1
    AM_SEEKING_CanSeekForwards = 2
    AM_SEEKING_CanSeekBackwards = 4
    AM_SEEKING_CanGetCurrentPos = 8
    AM_SEEKING_CanGetStopPos = 16
    AM_SEEKING_CanGetDuration = 32
    AM_SEEKING_CanPlayBackwards = 64
    AM_SEEKING_CanDoSegments = 128
    AM_SEEKING_Source = 256
  end

  enum AM_MEDIAEVENT_FLAGS : Int32
    AM_MEDIAEVENT_NONOTIFY = 1
  end

  enum IFILTERMAPPER_MERIT : Int32
    MERIT_PREFERRED = 8388608
    MERIT_NORMAL = 6291456
    MERIT_UNLIKELY = 4194304
    MERIT_DO_NOT_USE = 2097152
    MERIT_SW_COMPRESSOR = 1048576
    MERIT_HW_COMPRESSOR = 1048656
  end

  enum REG_PINFLAG : UInt32
    REG_PINFLAG_B_ZERO = 1
    REG_PINFLAG_B_RENDERER = 2
    REG_PINFLAG_B_MANY = 4
    REG_PINFLAG_B_OUTPUT = 8
  end

  enum QualityMessageType : Int32
    Famine = 0
    Flood = 1
  end

  enum COLORKEY_TYPE : Int32
    CK_NOCOLORKEY = 0
    CK_INDEX = 1
    CK_RGB = 2
  end

  enum ADVISE_TYPE : UInt32
    ADVISE_NONE = 0
    ADVISE_CLIPPING = 1
    ADVISE_PALETTE = 2
    ADVISE_COLORKEY = 4
    ADVISE_POSITION = 8
    ADVISE_DISPLAY_CHANGE = 16
  end

  enum AM_FILESINK_FLAGS : Int32
    AM_FILE_OVERWRITE = 1
  end

  enum AM_RENSDEREXFLAGS : Int32
    AM_RENDEREX_RENDERTOEXISTINGRENDERERS = 1
  end

  enum AM_STREAM_INFO_FLAGS : Int32
    AM_STREAM_INFO_START_DEFINED = 1
    AM_STREAM_INFO_STOP_DEFINED = 2
    AM_STREAM_INFO_DISCARDING = 4
    AM_STREAM_INFO_STOP_SEND_EXTRA = 16
  end

  enum InterleavingMode : Int32
    INTERLEAVE_NONE = 0
    INTERLEAVE_CAPTURE = 1
    INTERLEAVE_FULL = 2
    INTERLEAVE_NONE_BUFFERED = 3
  end

  enum CompressionCaps : Int32
    CompressionCaps_CanQuality = 1
    CompressionCaps_CanCrunch = 2
    CompressionCaps_CanKeyFrame = 4
    CompressionCaps_CanBFrame = 8
    CompressionCaps_CanWindow = 16
  end

  enum VfwCaptureDialogs : Int32
    VfwCaptureDialog_Source = 1
    VfwCaptureDialog_Format = 2
    VfwCaptureDialog_Display = 4
  end

  enum VfwCompressDialogs : Int32
    VfwCompressDialog_Config = 1
    VfwCompressDialog_About = 2
    VfwCompressDialog_QueryConfig = 4
    VfwCompressDialog_QueryAbout = 8
  end

  enum AnalogVideoStandard : Int32
    AnalogVideo_None = 0
    AnalogVideo_NTSC_M = 1
    AnalogVideo_NTSC_M_J = 2
    AnalogVideo_NTSC_433 = 4
    AnalogVideo_PAL_B = 16
    AnalogVideo_PAL_D = 32
    AnalogVideo_PAL_G = 64
    AnalogVideo_PAL_H = 128
    AnalogVideo_PAL_I = 256
    AnalogVideo_PAL_M = 512
    AnalogVideo_PAL_N = 1024
    AnalogVideo_PAL_60 = 2048
    AnalogVideo_SECAM_B = 4096
    AnalogVideo_SECAM_D = 8192
    AnalogVideo_SECAM_G = 16384
    AnalogVideo_SECAM_H = 32768
    AnalogVideo_SECAM_K = 65536
    AnalogVideo_SECAM_K1 = 131072
    AnalogVideo_SECAM_L = 262144
    AnalogVideo_SECAM_L1 = 524288
    AnalogVideo_PAL_N_COMBO = 1048576
    AnalogVideoMask_MCE_NTSC = 1052167
    AnalogVideoMask_MCE_PAL = 496
    AnalogVideoMask_MCE_SECAM = 1044480
  end

  enum TunerInputType : Int32
    TunerInputCable = 0
    TunerInputAntenna = 1
  end

  enum VideoCopyProtectionType : Int32
    VideoCopyProtectionMacrovisionBasic = 0
    VideoCopyProtectionMacrovisionCBI = 1
  end

  enum PhysicalConnectorType : Int32
    PhysConn_Video_Tuner = 1
    PhysConn_Video_Composite = 2
    PhysConn_Video_SVideo = 3
    PhysConn_Video_RGB = 4
    PhysConn_Video_YRYBY = 5
    PhysConn_Video_SerialDigital = 6
    PhysConn_Video_ParallelDigital = 7
    PhysConn_Video_SCSI = 8
    PhysConn_Video_AUX = 9
    PhysConn_Video_1394 = 10
    PhysConn_Video_USB = 11
    PhysConn_Video_VideoDecoder = 12
    PhysConn_Video_VideoEncoder = 13
    PhysConn_Video_SCART = 14
    PhysConn_Video_Black = 15
    PhysConn_Audio_Tuner = 4096
    PhysConn_Audio_Line = 4097
    PhysConn_Audio_Mic = 4098
    PhysConn_Audio_AESDigital = 4099
    PhysConn_Audio_SPDIFDigital = 4100
    PhysConn_Audio_SCSI = 4101
    PhysConn_Audio_AUX = 4102
    PhysConn_Audio_1394 = 4103
    PhysConn_Audio_USB = 4104
    PhysConn_Audio_AudioDecoder = 4105
  end

  enum VideoProcAmpProperty : Int32
    VideoProcAmp_Brightness = 0
    VideoProcAmp_Contrast = 1
    VideoProcAmp_Hue = 2
    VideoProcAmp_Saturation = 3
    VideoProcAmp_Sharpness = 4
    VideoProcAmp_Gamma = 5
    VideoProcAmp_ColorEnable = 6
    VideoProcAmp_WhiteBalance = 7
    VideoProcAmp_BacklightCompensation = 8
    VideoProcAmp_Gain = 9
  end

  enum VideoProcAmpFlags : Int32
    VideoProcAmp_Flags_Auto = 1
    VideoProcAmp_Flags_Manual = 2
  end

  enum CameraControlProperty : Int32
    CameraControl_Pan = 0
    CameraControl_Tilt = 1
    CameraControl_Roll = 2
    CameraControl_Zoom = 3
    CameraControl_Exposure = 4
    CameraControl_Iris = 5
    CameraControl_Focus = 6
  end

  enum CameraControlFlags : Int32
    CameraControl_Flags_Auto = 1
    CameraControl_Flags_Manual = 2
  end

  enum VideoControlFlags : Int32
    VideoControlFlag_FlipHorizontal = 1
    VideoControlFlag_FlipVertical = 2
    VideoControlFlag_ExternalTriggerEnable = 4
    VideoControlFlag_Trigger = 8
  end

  enum AMTunerSubChannel : Int32
    AMTUNER_SUBCHAN_NO_TUNE = -2
    AMTUNER_SUBCHAN_DEFAULT = -1
  end

  enum AMTunerSignalStrength : Int32
    AMTUNER_HASNOSIGNALSTRENGTH = -1
    AMTUNER_NOSIGNAL = 0
    AMTUNER_SIGNALPRESENT = 1
  end

  enum AMTunerModeType : Int32
    AMTUNER_MODE_DEFAULT = 0
    AMTUNER_MODE_TV = 1
    AMTUNER_MODE_FM_RADIO = 2
    AMTUNER_MODE_AM_RADIO = 4
    AMTUNER_MODE_DSS = 8
  end

  enum AMTunerEventType : Int32
    AMTUNER_EVENT_CHANGED = 1
  end

  enum TVAudioMode : Int32
    AMTVAUDIO_MODE_MONO = 1
    AMTVAUDIO_MODE_STEREO = 2
    AMTVAUDIO_MODE_LANG_A = 16
    AMTVAUDIO_MODE_LANG_B = 32
    AMTVAUDIO_MODE_LANG_C = 64
    AMTVAUDIO_PRESET_STEREO = 512
    AMTVAUDIO_PRESET_LANG_A = 4096
    AMTVAUDIO_PRESET_LANG_B = 8192
    AMTVAUDIO_PRESET_LANG_C = 16384
  end

  enum AMTVAudioEventType : Int32
    AMTVAUDIO_EVENT_CHANGED = 1
  end

  enum AMPROPERTY_PIN : Int32
    AMPROPERTY_PIN_CATEGORY = 0
    AMPROPERTY_PIN_MEDIUM = 1
  end

  enum AMSTREAMSELECTINFOFLAGS : Int32
    AMSTREAMSELECTINFO_ENABLED = 1
    AMSTREAMSELECTINFO_EXCLUSIVE = 2
  end

  enum AMSTREAMSELECTENABLEFLAGS : Int32
    AMSTREAMSELECTENABLE_ENABLE = 1
    AMSTREAMSELECTENABLE_ENABLEALL = 2
  end

  enum AMRESCTL_RESERVEFLAGS : Int32
    AMRESCTL_RESERVEFLAGS_RESERVE = 0
    AMRESCTL_RESERVEFLAGS_UNRESERVE = 1
  end

  enum AM_FILTER_MISC_FLAGS : Int32
    AM_FILTER_MISC_FLAGS_IS_RENDERER = 1
    AM_FILTER_MISC_FLAGS_IS_SOURCE = 2
  end

  enum DECIMATION_USAGE : Int32
    DECIMATION_LEGACY = 0
    DECIMATION_USE_DECODER_ONLY = 1
    DECIMATION_USE_VIDEOPORT_ONLY = 2
    DECIMATION_USE_OVERLAY_ONLY = 3
    DECIMATION_DEFAULT = 4
  end

  enum AM_PUSHSOURCE_FLAGS : Int32
    AM_PUSHSOURCECAPS_INTERNAL_RM = 1
    AM_PUSHSOURCECAPS_NOT_LIVE = 2
    AM_PUSHSOURCECAPS_PRIVATE_CLOCK = 4
    AM_PUSHSOURCEREQS_USE_STREAM_CLOCK = 65536
    AM_PUSHSOURCEREQS_USE_CLOCK_CHAIN = 131072
  end

  enum DVENCODERRESOLUTION : Int32
    DVENCODERRESOLUTION_720x480 = 2012
    DVENCODERRESOLUTION_360x240 = 2013
    DVENCODERRESOLUTION_180x120 = 2014
    DVENCODERRESOLUTION_88x60 = 2015
  end

  enum DVENCODERVIDEOFORMAT : Int32
    DVENCODERVIDEOFORMAT_NTSC = 2000
    DVENCODERVIDEOFORMAT_PAL = 2001
  end

  enum DVENCODERFORMAT : Int32
    DVENCODERFORMAT_DVSD = 2007
    DVENCODERFORMAT_DVHD = 2008
    DVENCODERFORMAT_DVSL = 2009
  end

  enum DVDECODERRESOLUTION : Int32
    DVDECODERRESOLUTION_720x480 = 1000
    DVDECODERRESOLUTION_360x240 = 1001
    DVDECODERRESOLUTION_180x120 = 1002
    DVDECODERRESOLUTION_88x60 = 1003
  end

  enum DVRESOLUTION : Int32
    DVRESOLUTION_FULL = 1000
    DVRESOLUTION_HALF = 1001
    DVRESOLUTION_QUARTER = 1002
    DVRESOLUTION_DC = 1003
  end

  enum AM_AUDIO_RENDERER_STAT_PARAM : Int32
    AM_AUDREND_STAT_PARAM_BREAK_COUNT = 1
    AM_AUDREND_STAT_PARAM_SLAVE_MODE = 2
    AM_AUDREND_STAT_PARAM_SILENCE_DUR = 3
    AM_AUDREND_STAT_PARAM_LAST_BUFFER_DUR = 4
    AM_AUDREND_STAT_PARAM_DISCONTINUITIES = 5
    AM_AUDREND_STAT_PARAM_SLAVE_RATE = 6
    AM_AUDREND_STAT_PARAM_SLAVE_DROPWRITE_DUR = 7
    AM_AUDREND_STAT_PARAM_SLAVE_HIGHLOWERROR = 8
    AM_AUDREND_STAT_PARAM_SLAVE_LASTHIGHLOWERROR = 9
    AM_AUDREND_STAT_PARAM_SLAVE_ACCUMERROR = 10
    AM_AUDREND_STAT_PARAM_BUFFERFULLNESS = 11
    AM_AUDREND_STAT_PARAM_JITTER = 12
  end

  enum AM_INTF_SEARCH_FLAGS : Int32
    AM_INTF_SEARCH_INPUT_PIN = 1
    AM_INTF_SEARCH_OUTPUT_PIN = 2
    AM_INTF_SEARCH_FILTER = 4
  end

  enum AMOVERLAYFX : Int32
    AMOVERFX_NOFX = 0
    AMOVERFX_MIRRORLEFTRIGHT = 2
    AMOVERFX_MIRRORUPDOWN = 4
    AMOVERFX_DEINTERLACE = 8
  end

  enum AM_PIN_FLOW_CONTROL_BLOCK_FLAGS : Int32
    AM_PIN_FLOW_CONTROL_BLOCK = 1
  end

  enum AM_GRAPH_CONFIG_RECONNECT_FLAGS : Int32
    AM_GRAPH_CONFIG_RECONNECT_DIRECTCONNECT = 1
    AM_GRAPH_CONFIG_RECONNECT_CACHE_REMOVED_FILTERS = 2
    AM_GRAPH_CONFIG_RECONNECT_USE_ONLY_CACHED_FILTERS = 4
  end

  enum REM_FILTER_FLAGS : Int32
    REMFILTERF_LEAVECONNECTED = 1
  end

  enum AM_FILTER_FLAGS : Int32
    AM_FILTER_FLAGS_REMOVABLE = 1
  end

  enum VMRPresentationFlags : Int32
    VMRSample_SyncPoint = 1
    VMRSample_Preroll = 2
    VMRSample_Discontinuity = 4
    VMRSample_TimeValid = 8
    VMRSample_SrcDstRectsValid = 16
  end

  enum VMRSurfaceAllocationFlags : Int32
    AMAP_PIXELFORMAT_VALID = 1
    AMAP_3D_TARGET = 2
    AMAP_ALLOW_SYSMEM = 4
    AMAP_FORCE_SYSMEM = 8
    AMAP_DIRECTED_FLIP = 16
    AMAP_DXVA_TARGET = 32
  end

  enum VMR_ASPECT_RATIO_MODE : Int32
    VMR_ARMODE_NONE = 0
    VMR_ARMODE_LETTER_BOX = 1
  end

  enum VMRMixerPrefs : Int32
    MixerPref_NoDecimation = 1
    MixerPref_DecimateOutput = 2
    MixerPref_ARAdjustXorY = 4
    MixerPref_DecimationReserved = 8
    MixerPref_DecimateMask = 15
    MixerPref_BiLinearFiltering = 16
    MixerPref_PointFiltering = 32
    MixerPref_FilteringMask = 240
    MixerPref_RenderTargetRGB = 256
    MixerPref_RenderTargetYUV = 4096
    MixerPref_RenderTargetYUV420 = 512
    MixerPref_RenderTargetYUV422 = 1024
    MixerPref_RenderTargetYUV444 = 2048
    MixerPref_RenderTargetReserved = 57344
    MixerPref_RenderTargetMask = 65280
    MixerPref_DynamicSwitchToBOB = 65536
    MixerPref_DynamicDecimateBy2 = 131072
    MixerPref_DynamicReserved = 786432
    MixerPref_DynamicMask = 983040
  end

  enum VMRRenderPrefs : Int32
    RenderPrefs_RestrictToInitialMonitor = 0
    RenderPrefs_ForceOffscreen = 1
    RenderPrefs_ForceOverlays = 2
    RenderPrefs_AllowOverlays = 0
    RenderPrefs_AllowOffscreen = 0
    RenderPrefs_DoNotRenderColorKeyAndBorder = 8
    RenderPrefs_Reserved = 16
    RenderPrefs_PreferAGPMemWhenMixing = 32
    RenderPrefs_Mask = 63
  end

  enum VMRMode : Int32
    VMRMode_Windowed = 1
    VMRMode_Windowless = 2
    VMRMode_Renderless = 4
    VMRMode_Mask = 7
  end

  enum STREAMIF_CONSTANTS : Int32
    MAX_NUMBER_OF_STREAMS = 16
  end

  enum VMRDeinterlacePrefs : Int32
    DeinterlacePref_NextBest = 1
    DeinterlacePref_BOB = 2
    DeinterlacePref_Weave = 4
    DeinterlacePref_Mask = 7
  end

  enum VMRDeinterlaceTech : Int32
    DeinterlaceTech_Unknown = 0
    DeinterlaceTech_BOBLineReplicate = 1
    DeinterlaceTech_BOBVerticalStretch = 2
    DeinterlaceTech_MedianFiltering = 4
    DeinterlaceTech_EdgeFiltering = 16
    DeinterlaceTech_FieldAdaptive = 32
    DeinterlaceTech_PixelAdaptive = 64
    DeinterlaceTech_MotionVectorSteered = 128
  end

  enum DVD_DOMAIN : Int32
    DVD_DOMAIN_FirstPlay = 1
    DVD_DOMAIN_VideoManagerMenu = 2
    DVD_DOMAIN_VideoTitleSetMenu = 3
    DVD_DOMAIN_Title = 4
    DVD_DOMAIN_Stop = 5
  end

  enum DVD_MENU_ID : Int32
    DVD_MENU_Title = 2
    DVD_MENU_Root = 3
    DVD_MENU_Subpicture = 4
    DVD_MENU_Audio = 5
    DVD_MENU_Angle = 6
    DVD_MENU_Chapter = 7
  end

  enum DVD_DISC_SIDE : Int32
    DVD_SIDE_A = 1
    DVD_SIDE_B = 2
  end

  enum DVD_PREFERRED_DISPLAY_MODE : Int32
    DISPLAY_CONTENT_DEFAULT = 0
    DISPLAY_16x9 = 1
    DISPLAY_4x3_PANSCAN_PREFERRED = 2
    DISPLAY_4x3_LETTERBOX_PREFERRED = 3
  end

  enum DVD_FRAMERATE : Int32
    DVD_FPS_25 = 1
    DVD_FPS_30NonDrop = 3
  end

  enum DVD_NavCmdType : Int32
    DVD_NavCmdType_Pre = 1
    DVD_NavCmdType_Post = 2
    DVD_NavCmdType_Cell = 3
    DVD_NavCmdType_Button = 4
  end

  enum DVD_TIMECODE_FLAGS : Int32
    DVD_TC_FLAG_25fps = 1
    DVD_TC_FLAG_30fps = 2
    DVD_TC_FLAG_DropFrame = 4
    DVD_TC_FLAG_Interpolated = 8
  end

  enum VALID_UOP_FLAG : Int32
    UOP_FLAG_Play_Title_Or_AtTime = 1
    UOP_FLAG_Play_Chapter = 2
    UOP_FLAG_Play_Title = 4
    UOP_FLAG_Stop = 8
    UOP_FLAG_ReturnFromSubMenu = 16
    UOP_FLAG_Play_Chapter_Or_AtTime = 32
    UOP_FLAG_PlayPrev_Or_Replay_Chapter = 64
    UOP_FLAG_PlayNext_Chapter = 128
    UOP_FLAG_Play_Forwards = 256
    UOP_FLAG_Play_Backwards = 512
    UOP_FLAG_ShowMenu_Title = 1024
    UOP_FLAG_ShowMenu_Root = 2048
    UOP_FLAG_ShowMenu_SubPic = 4096
    UOP_FLAG_ShowMenu_Audio = 8192
    UOP_FLAG_ShowMenu_Angle = 16384
    UOP_FLAG_ShowMenu_Chapter = 32768
    UOP_FLAG_Resume = 65536
    UOP_FLAG_Select_Or_Activate_Button = 131072
    UOP_FLAG_Still_Off = 262144
    UOP_FLAG_Pause_On = 524288
    UOP_FLAG_Select_Audio_Stream = 1048576
    UOP_FLAG_Select_SubPic_Stream = 2097152
    UOP_FLAG_Select_Angle = 4194304
    UOP_FLAG_Select_Karaoke_Audio_Presentation_Mode = 8388608
    UOP_FLAG_Select_Video_Mode_Preference = 16777216
  end

  enum DVD_CMD_FLAGS : Int32
    DVD_CMD_FLAG_None = 0
    DVD_CMD_FLAG_Flush = 1
    DVD_CMD_FLAG_SendEvents = 2
    DVD_CMD_FLAG_Block = 4
    DVD_CMD_FLAG_StartWhenRendered = 8
    DVD_CMD_FLAG_EndAfterRendered = 16
  end

  enum DVD_OPTION_FLAG : Int32
    DVD_ResetOnStop = 1
    DVD_NotifyParentalLevelChange = 2
    DVD_HMSF_TimeCodeEvents = 3
    DVD_AudioDuringFFwdRew = 4
    DVD_EnableNonblockingAPIs = 5
    DVD_CacheSizeInMB = 6
    DVD_EnablePortableBookmarks = 7
    DVD_EnableExtendedCopyProtectErrors = 8
    DVD_NotifyPositionChange = 9
    DVD_IncreaseOutputControl = 10
    DVD_EnableStreaming = 11
    DVD_EnableESOutput = 12
    DVD_EnableTitleLength = 13
    DVD_DisableStillThrottle = 14
    DVD_EnableLoggingEvents = 15
    DVD_MaxReadBurstInKB = 16
    DVD_ReadBurstPeriodInMS = 17
    DVD_RestartDisc = 18
    DVD_EnableCC = 19
  end

  enum DVD_RELATIVE_BUTTON : Int32
    DVD_Relative_Upper = 1
    DVD_Relative_Lower = 2
    DVD_Relative_Left = 3
    DVD_Relative_Right = 4
  end

  enum DVD_PARENTAL_LEVEL : Int32
    DVD_PARENTAL_LEVEL_8 = 32768
    DVD_PARENTAL_LEVEL_7 = 16384
    DVD_PARENTAL_LEVEL_6 = 8192
    DVD_PARENTAL_LEVEL_5 = 4096
    DVD_PARENTAL_LEVEL_4 = 2048
    DVD_PARENTAL_LEVEL_3 = 1024
    DVD_PARENTAL_LEVEL_2 = 512
    DVD_PARENTAL_LEVEL_1 = 256
  end

  enum DVD_AUDIO_LANG_EXT : Int32
    DVD_AUD_EXT_NotSpecified = 0
    DVD_AUD_EXT_Captions = 1
    DVD_AUD_EXT_VisuallyImpaired = 2
    DVD_AUD_EXT_DirectorComments1 = 3
    DVD_AUD_EXT_DirectorComments2 = 4
  end

  enum DVD_SUBPICTURE_LANG_EXT : Int32
    DVD_SP_EXT_NotSpecified = 0
    DVD_SP_EXT_Caption_Normal = 1
    DVD_SP_EXT_Caption_Big = 2
    DVD_SP_EXT_Caption_Children = 3
    DVD_SP_EXT_CC_Normal = 5
    DVD_SP_EXT_CC_Big = 6
    DVD_SP_EXT_CC_Children = 7
    DVD_SP_EXT_Forced = 9
    DVD_SP_EXT_DirectorComments_Normal = 13
    DVD_SP_EXT_DirectorComments_Big = 14
    DVD_SP_EXT_DirectorComments_Children = 15
  end

  enum DVD_AUDIO_APPMODE : Int32
    DVD_AudioMode_None = 0
    DVD_AudioMode_Karaoke = 1
    DVD_AudioMode_Surround = 2
    DVD_AudioMode_Other = 3
  end

  enum DVD_AUDIO_FORMAT : Int32
    DVD_AudioFormat_AC3 = 0
    DVD_AudioFormat_MPEG1 = 1
    DVD_AudioFormat_MPEG1_DRC = 2
    DVD_AudioFormat_MPEG2 = 3
    DVD_AudioFormat_MPEG2_DRC = 4
    DVD_AudioFormat_LPCM = 5
    DVD_AudioFormat_DTS = 6
    DVD_AudioFormat_SDDS = 7
    DVD_AudioFormat_Other = 8
  end

  enum DVD_KARAOKE_DOWNMIX : Int32
    DVD_Mix_0to0 = 1
    DVD_Mix_1to0 = 2
    DVD_Mix_2to0 = 4
    DVD_Mix_3to0 = 8
    DVD_Mix_4to0 = 16
    DVD_Mix_Lto0 = 32
    DVD_Mix_Rto0 = 64
    DVD_Mix_0to1 = 256
    DVD_Mix_1to1 = 512
    DVD_Mix_2to1 = 1024
    DVD_Mix_3to1 = 2048
    DVD_Mix_4to1 = 4096
    DVD_Mix_Lto1 = 8192
    DVD_Mix_Rto1 = 16384
  end

  enum DVD_KARAOKE_CONTENTS : Int32
    DVD_Karaoke_GuideVocal1 = 1
    DVD_Karaoke_GuideVocal2 = 2
    DVD_Karaoke_GuideMelody1 = 4
    DVD_Karaoke_GuideMelody2 = 8
    DVD_Karaoke_GuideMelodyA = 16
    DVD_Karaoke_GuideMelodyB = 32
    DVD_Karaoke_SoundEffectA = 64
    DVD_Karaoke_SoundEffectB = 128
  end

  enum DVD_KARAOKE_ASSIGNMENT : Int32
    DVD_Assignment_reserved0 = 0
    DVD_Assignment_reserved1 = 1
    DVD_Assignment_LR = 2
    DVD_Assignment_LRM = 3
    DVD_Assignment_LR1 = 4
    DVD_Assignment_LRM1 = 5
    DVD_Assignment_LR12 = 6
    DVD_Assignment_LRM12 = 7
  end

  enum DVD_VIDEO_COMPRESSION : Int32
    DVD_VideoCompression_Other = 0
    DVD_VideoCompression_MPEG1 = 1
    DVD_VideoCompression_MPEG2 = 2
  end

  enum DVD_SUBPICTURE_TYPE : Int32
    DVD_SPType_NotSpecified = 0
    DVD_SPType_Language = 1
    DVD_SPType_Other = 2
  end

  enum DVD_SUBPICTURE_CODING : Int32
    DVD_SPCoding_RunLength = 0
    DVD_SPCoding_Extended = 1
    DVD_SPCoding_Other = 2
  end

  enum DVD_TITLE_APPMODE : Int32
    DVD_AppMode_Not_Specified = 0
    DVD_AppMode_Karaoke = 1
    DVD_AppMode_Other = 3
  end

  enum DVD_TextStringType : Int32
    DVD_Struct_Volume = 1
    DVD_Struct_Title = 2
    DVD_Struct_ParentalID = 3
    DVD_Struct_PartOfTitle = 4
    DVD_Struct_Cell = 5
    DVD_Stream_Audio = 16
    DVD_Stream_Subpicture = 17
    DVD_Stream_Angle = 18
    DVD_Channel_Audio = 32
    DVD_General_Name = 48
    DVD_General_Comments = 49
    DVD_Title_Series = 56
    DVD_Title_Movie = 57
    DVD_Title_Video = 58
    DVD_Title_Album = 59
    DVD_Title_Song = 60
    DVD_Title_Other = 63
    DVD_Title_Sub_Series = 64
    DVD_Title_Sub_Movie = 65
    DVD_Title_Sub_Video = 66
    DVD_Title_Sub_Album = 67
    DVD_Title_Sub_Song = 68
    DVD_Title_Sub_Other = 71
    DVD_Title_Orig_Series = 72
    DVD_Title_Orig_Movie = 73
    DVD_Title_Orig_Video = 74
    DVD_Title_Orig_Album = 75
    DVD_Title_Orig_Song = 76
    DVD_Title_Orig_Other = 79
    DVD_Other_Scene = 80
    DVD_Other_Cut = 81
    DVD_Other_Take = 82
  end

  enum DVD_TextCharSet : Int32
    DVD_CharSet_Unicode = 0
    DVD_CharSet_ISO646 = 1
    DVD_CharSet_JIS_Roman_Kanji = 2
    DVD_CharSet_ISO8859_1 = 3
    DVD_CharSet_ShiftJIS_Kanji_Roman_Katakana = 4
  end

  enum AM_DVD_GRAPH_FLAGS : Int32
    AM_DVD_HWDEC_PREFER = 1
    AM_DVD_HWDEC_ONLY = 2
    AM_DVD_SWDEC_PREFER = 4
    AM_DVD_SWDEC_ONLY = 8
    AM_DVD_NOVPE = 256
    AM_DVD_DO_NOT_CLEAR = 512
    AM_DVD_VMR9_ONLY = 2048
    AM_DVD_EVR_ONLY = 4096
    AM_DVD_EVR_QOS = 8192
    AM_DVD_ADAPT_GRAPH = 16384
    AM_DVD_MASK = 65535
  end

  enum AM_DVD_STREAM_FLAGS : Int32
    AM_DVD_STREAM_VIDEO = 1
    AM_DVD_STREAM_AUDIO = 2
    AM_DVD_STREAM_SUBPIC = 4
  end

  enum AM_OVERLAY_NOTIFY_FLAGS : Int32
    AM_OVERLAY_NOTIFY_VISIBLE_CHANGE = 1
    AM_OVERLAY_NOTIFY_SOURCE_CHANGE = 2
    AM_OVERLAY_NOTIFY_DEST_CHANGE = 4
  end

  enum BDA_EVENT_ID : Int32
    BDA_EVENT_SIGNAL_LOSS = 0
    BDA_EVENT_SIGNAL_LOCK = 1
    BDA_EVENT_DATA_START = 2
    BDA_EVENT_DATA_STOP = 3
    BDA_EVENT_CHANNEL_ACQUIRED = 4
    BDA_EVENT_CHANNEL_LOST = 5
    BDA_EVENT_CHANNEL_SOURCE_CHANGED = 6
    BDA_EVENT_CHANNEL_ACTIVATED = 7
    BDA_EVENT_CHANNEL_DEACTIVATED = 8
    BDA_EVENT_SUBCHANNEL_ACQUIRED = 9
    BDA_EVENT_SUBCHANNEL_LOST = 10
    BDA_EVENT_SUBCHANNEL_SOURCE_CHANGED = 11
    BDA_EVENT_SUBCHANNEL_ACTIVATED = 12
    BDA_EVENT_SUBCHANNEL_DEACTIVATED = 13
    BDA_EVENT_ACCESS_GRANTED = 14
    BDA_EVENT_ACCESS_DENIED = 15
    BDA_EVENT_OFFER_EXTENDED = 16
    BDA_EVENT_PURCHASE_COMPLETED = 17
    BDA_EVENT_SMART_CARD_INSERTED = 18
    BDA_EVENT_SMART_CARD_REMOVED = 19
  end

  enum BDA_MULTICAST_MODE : Int32
    BDA_PROMISCUOUS_MULTICAST = 0
    BDA_FILTERED_MULTICAST = 1
    BDA_NO_MULTICAST = 2
  end

  enum BDA_SIGNAL_STATE : Int32
    BDA_SIGNAL_UNAVAILABLE = 0
    BDA_SIGNAL_INACTIVE = 1
    BDA_SIGNAL_ACTIVE = 2
  end

  enum BDA_CHANGE_STATE : Int32
    BDA_CHANGES_COMPLETE = 0
    BDA_CHANGES_PENDING = 1
  end

  enum MEDIA_SAMPLE_CONTENT : Int32
    MEDIA_TRANSPORT_PACKET = 0
    MEDIA_ELEMENTARY_STREAM = 1
    MEDIA_MPEG2_PSI = 2
    MEDIA_TRANSPORT_PAYLOAD = 3
  end

  enum ISDBCAS_REQUEST_ID : Int32
    ISDBCAS_REQUEST_ID_EMG = 56
    ISDBCAS_REQUEST_ID_EMD = 58
  end

  enum MUX_PID_TYPE : Int32
    PID_OTHER = -1
    PID_ELEMENTARY_STREAM = 0
    PID_MPEG2_SECTION_PSI_SI = 1
  end

  enum DVBSystemType : Int32
    DVB_Cable = 0
    DVB_Terrestrial = 1
    DVB_Satellite = 2
    ISDB_Terrestrial = 3
    ISDB_Satellite = 4
  end

  enum BDA_Channel : Int32
    BDA_UNDEFINED_CHANNEL = -1
  end

  enum ComponentCategory : Int32
    CategoryNotSet = -1
    CategoryOther = 0
    CategoryVideo = 1
    CategoryAudio = 2
    CategoryText = 3
    CategorySubtitles = 4
    CategoryCaptions = 5
    CategorySuperimpose = 6
    CategoryData = 7
    CATEGORY_COUNT = 8
  end

  enum ComponentStatus : Int32
    StatusActive = 0
    StatusInactive = 1
    StatusUnavailable = 2
  end

  enum MPEG2StreamType : Int32
    BDA_UNITIALIZED_MPEG2STREAMTYPE = -1
    Reserved1 = 0
    ISO_IEC_11172_2_VIDEO = 1
    ISO_IEC_13818_2_VIDEO = 2
    ISO_IEC_11172_3_AUDIO = 3
    ISO_IEC_13818_3_AUDIO = 4
    ISO_IEC_13818_1_PRIVATE_SECTION = 5
    ISO_IEC_13818_1_PES = 6
    ISO_IEC_13522_MHEG = 7
    ANNEX_A_DSM_CC = 8
    ITU_T_REC_H_222_1 = 9
    ISO_IEC_13818_6_TYPE_A = 10
    ISO_IEC_13818_6_TYPE_B = 11
    ISO_IEC_13818_6_TYPE_C = 12
    ISO_IEC_13818_6_TYPE_D = 13
    ISO_IEC_13818_1_AUXILIARY = 14
    ISO_IEC_13818_7_AUDIO = 15
    ISO_IEC_14496_2_VISUAL = 16
    ISO_IEC_14496_3_AUDIO = 17
    ISO_IEC_14496_1_IN_PES = 18
    ISO_IEC_14496_1_IN_SECTION = 19
    ISO_IEC_13818_6_DOWNLOAD = 20
    METADATA_IN_PES = 21
    METADATA_IN_SECTION = 22
    METADATA_IN_DATA_CAROUSEL = 23
    METADATA_IN_OBJECT_CAROUSEL = 24
    METADATA_IN_DOWNLOAD_PROTOCOL = 25
    IRPM_STREAMM = 26
    ITU_T_H264 = 27
    ISO_IEC_13818_1_RESERVED = 28
    USER_PRIVATE = 16
    HEVC_VIDEO_OR_TEMPORAL_VIDEO = 36
    HEVC_TEMPORAL_VIDEO_SUBSET = 37
    ISO_IEC_USER_PRIVATE = 128
    DOLBY_AC3_AUDIO = 129
    DOLBY_DIGITAL_PLUS_AUDIO_ATSC = 135
  end

  enum ATSCComponentTypeFlags : Int32
    ATSCCT_AC3 = 1
  end

  enum BinaryConvolutionCodeRate : Int32
    BDA_BCC_RATE_NOT_SET = -1
    BDA_BCC_RATE_NOT_DEFINED = 0
    BDA_BCC_RATE_1_2 = 1
    BDA_BCC_RATE_2_3 = 2
    BDA_BCC_RATE_3_4 = 3
    BDA_BCC_RATE_3_5 = 4
    BDA_BCC_RATE_4_5 = 5
    BDA_BCC_RATE_5_6 = 6
    BDA_BCC_RATE_5_11 = 7
    BDA_BCC_RATE_7_8 = 8
    BDA_BCC_RATE_1_4 = 9
    BDA_BCC_RATE_1_3 = 10
    BDA_BCC_RATE_2_5 = 11
    BDA_BCC_RATE_6_7 = 12
    BDA_BCC_RATE_8_9 = 13
    BDA_BCC_RATE_9_10 = 14
    BDA_BCC_RATE_MAX = 15
  end

  enum FECMethod : Int32
    BDA_FEC_METHOD_NOT_SET = -1
    BDA_FEC_METHOD_NOT_DEFINED = 0
    BDA_FEC_VITERBI = 1
    BDA_FEC_RS_204_188 = 2
    BDA_FEC_LDPC = 3
    BDA_FEC_BCH = 4
    BDA_FEC_RS_147_130 = 5
    BDA_FEC_MAX = 6
  end

  enum ModulationType : Int32
    BDA_MOD_NOT_SET = -1
    BDA_MOD_NOT_DEFINED = 0
    BDA_MOD_16QAM = 1
    BDA_MOD_32QAM = 2
    BDA_MOD_64QAM = 3
    BDA_MOD_80QAM = 4
    BDA_MOD_96QAM = 5
    BDA_MOD_112QAM = 6
    BDA_MOD_128QAM = 7
    BDA_MOD_160QAM = 8
    BDA_MOD_192QAM = 9
    BDA_MOD_224QAM = 10
    BDA_MOD_256QAM = 11
    BDA_MOD_320QAM = 12
    BDA_MOD_384QAM = 13
    BDA_MOD_448QAM = 14
    BDA_MOD_512QAM = 15
    BDA_MOD_640QAM = 16
    BDA_MOD_768QAM = 17
    BDA_MOD_896QAM = 18
    BDA_MOD_1024QAM = 19
    BDA_MOD_QPSK = 20
    BDA_MOD_BPSK = 21
    BDA_MOD_OQPSK = 22
    BDA_MOD_8VSB = 23
    BDA_MOD_16VSB = 24
    BDA_MOD_ANALOG_AMPLITUDE = 25
    BDA_MOD_ANALOG_FREQUENCY = 26
    BDA_MOD_8PSK = 27
    BDA_MOD_RF = 28
    BDA_MOD_16APSK = 29
    BDA_MOD_32APSK = 30
    BDA_MOD_NBC_QPSK = 31
    BDA_MOD_NBC_8PSK = 32
    BDA_MOD_DIRECTV = 33
    BDA_MOD_ISDB_T_TMCC = 34
    BDA_MOD_ISDB_S_TMCC = 35
    BDA_MOD_MAX = 36
  end

  enum ScanModulationTypes : Int32
    BDA_SCAN_MOD_16QAM = 1
    BDA_SCAN_MOD_32QAM = 2
    BDA_SCAN_MOD_64QAM = 4
    BDA_SCAN_MOD_80QAM = 8
    BDA_SCAN_MOD_96QAM = 16
    BDA_SCAN_MOD_112QAM = 32
    BDA_SCAN_MOD_128QAM = 64
    BDA_SCAN_MOD_160QAM = 128
    BDA_SCAN_MOD_192QAM = 256
    BDA_SCAN_MOD_224QAM = 512
    BDA_SCAN_MOD_256QAM = 1024
    BDA_SCAN_MOD_320QAM = 2048
    BDA_SCAN_MOD_384QAM = 4096
    BDA_SCAN_MOD_448QAM = 8192
    BDA_SCAN_MOD_512QAM = 16384
    BDA_SCAN_MOD_640QAM = 32768
    BDA_SCAN_MOD_768QAM = 65536
    BDA_SCAN_MOD_896QAM = 131072
    BDA_SCAN_MOD_1024QAM = 262144
    BDA_SCAN_MOD_QPSK = 524288
    BDA_SCAN_MOD_BPSK = 1048576
    BDA_SCAN_MOD_OQPSK = 2097152
    BDA_SCAN_MOD_8VSB = 4194304
    BDA_SCAN_MOD_16VSB = 8388608
    BDA_SCAN_MOD_AM_RADIO = 16777216
    BDA_SCAN_MOD_FM_RADIO = 33554432
    BDA_SCAN_MOD_8PSK = 67108864
    BDA_SCAN_MOD_RF = 134217728
    ScanModulationTypesMask_MCE_DigitalCable = 11
    ScanModulationTypesMask_MCE_TerrestrialATSC = 23
    ScanModulationTypesMask_MCE_AnalogTv = 28
    ScanModulationTypesMask_MCE_All_TV = -1
    ScanModulationTypesMask_DVBC = 75
    BDA_SCAN_MOD_16APSK = 268435456
    BDA_SCAN_MOD_32APSK = 536870912
  end

  enum SpectralInversion : Int32
    BDA_SPECTRAL_INVERSION_NOT_SET = -1
    BDA_SPECTRAL_INVERSION_NOT_DEFINED = 0
    BDA_SPECTRAL_INVERSION_AUTOMATIC = 1
    BDA_SPECTRAL_INVERSION_NORMAL = 2
    BDA_SPECTRAL_INVERSION_INVERTED = 3
    BDA_SPECTRAL_INVERSION_MAX = 4
  end

  enum Polarisation : Int32
    BDA_POLARISATION_NOT_SET = -1
    BDA_POLARISATION_NOT_DEFINED = 0
    BDA_POLARISATION_LINEAR_H = 1
    BDA_POLARISATION_LINEAR_V = 2
    BDA_POLARISATION_CIRCULAR_L = 3
    BDA_POLARISATION_CIRCULAR_R = 4
    BDA_POLARISATION_MAX = 5
  end

  enum LNB_Source : Int32
    BDA_LNB_SOURCE_NOT_SET = -1
    BDA_LNB_SOURCE_NOT_DEFINED = 0
    BDA_LNB_SOURCE_A = 1
    BDA_LNB_SOURCE_B = 2
    BDA_LNB_SOURCE_C = 3
    BDA_LNB_SOURCE_D = 4
    BDA_LNB_SOURCE_MAX = 5
  end

  enum GuardInterval : Int32
    BDA_GUARD_NOT_SET = -1
    BDA_GUARD_NOT_DEFINED = 0
    BDA_GUARD_1_32 = 1
    BDA_GUARD_1_16 = 2
    BDA_GUARD_1_8 = 3
    BDA_GUARD_1_4 = 4
    BDA_GUARD_1_128 = 5
    BDA_GUARD_19_128 = 6
    BDA_GUARD_19_256 = 7
    BDA_GUARD_MAX = 8
  end

  enum HierarchyAlpha : Int32
    BDA_HALPHA_NOT_SET = -1
    BDA_HALPHA_NOT_DEFINED = 0
    BDA_HALPHA_1 = 1
    BDA_HALPHA_2 = 2
    BDA_HALPHA_4 = 3
    BDA_HALPHA_MAX = 4
  end

  enum TransmissionMode : Int32
    BDA_XMIT_MODE_NOT_SET = -1
    BDA_XMIT_MODE_NOT_DEFINED = 0
    BDA_XMIT_MODE_2K = 1
    BDA_XMIT_MODE_8K = 2
    BDA_XMIT_MODE_4K = 3
    BDA_XMIT_MODE_2K_INTERLEAVED = 4
    BDA_XMIT_MODE_4K_INTERLEAVED = 5
    BDA_XMIT_MODE_1K = 6
    BDA_XMIT_MODE_16K = 7
    BDA_XMIT_MODE_32K = 8
    BDA_XMIT_MODE_MAX = 9
  end

  enum RollOff : Int32
    BDA_ROLL_OFF_NOT_SET = -1
    BDA_ROLL_OFF_NOT_DEFINED = 0
    BDA_ROLL_OFF_20 = 1
    BDA_ROLL_OFF_25 = 2
    BDA_ROLL_OFF_35 = 3
    BDA_ROLL_OFF_MAX = 4
  end

  enum Pilot : Int32
    BDA_PILOT_NOT_SET = -1
    BDA_PILOT_NOT_DEFINED = 0
    BDA_PILOT_OFF = 1
    BDA_PILOT_ON = 2
    BDA_PILOT_MAX = 3
  end

  enum BDA_Frequency : Int32
    BDA_FREQUENCY_NOT_SET = -1
    BDA_FREQUENCY_NOT_DEFINED = 0
  end

  enum BDA_Range : Int32
    BDA_RANGE_NOT_SET = -1
    BDA_RANGE_NOT_DEFINED = 0
  end

  enum BDA_Channel_Bandwidth : Int32
    BDA_CHAN_BANDWITH_NOT_SET = -1
    BDA_CHAN_BANDWITH_NOT_DEFINED = 0
  end

  enum BDA_Frequency_Multiplier : Int32
    BDA_FREQUENCY_MULTIPLIER_NOT_SET = -1
    BDA_FREQUENCY_MULTIPLIER_NOT_DEFINED = 0
  end

  enum BDA_Comp_Flags : Int32
    BDACOMP_NOT_DEFINED = 0
    BDACOMP_EXCLUDE_TS_FROM_TR = 1
    BDACOMP_INCLUDE_LOCATOR_IN_TR = 2
    BDACOMP_INCLUDE_COMPONENTS_IN_TR = 4
  end

  enum ApplicationTypeType : Int32
    SCTE28_ConditionalAccess = 0
    SCTE28_POD_Host_Binding_Information = 1
    SCTE28_IPService = 2
    SCTE28_NetworkInterface_SCTE55_2 = 3
    SCTE28_NetworkInterface_SCTE55_1 = 4
    SCTE28_CopyProtection = 5
    SCTE28_Diagnostic = 6
    SCTE28_Undesignated = 7
    SCTE28_Reserved = 8
  end

  enum BDA_CONDITIONALACCESS_REQUESTTYPE : Int32
    CONDITIONALACCESS_ACCESS_UNSPECIFIED = 0
    CONDITIONALACCESS_ACCESS_NOT_POSSIBLE = 1
    CONDITIONALACCESS_ACCESS_POSSIBLE = 2
    CONDITIONALACCESS_ACCESS_POSSIBLE_NO_STREAMING_DISRUPTION = 3
  end

  enum BDA_CONDITIONALACCESS_MMICLOSEREASON : Int32
    CONDITIONALACCESS_UNSPECIFIED = 0
    CONDITIONALACCESS_CLOSED_ITSELF = 1
    CONDITIONALACCESS_TUNER_REQUESTED_CLOSE = 2
    CONDITIONALACCESS_DIALOG_TIMEOUT = 3
    CONDITIONALACCESS_DIALOG_FOCUS_CHANGE = 4
    CONDITIONALACCESS_DIALOG_USER_DISMISSED = 5
    CONDITIONALACCESS_DIALOG_USER_NOT_AVAILABLE = 6
  end

  enum BDA_CONDITIONALACCESS_SESSION_RESULT : Int32
    CONDITIONALACCESS_SUCCESSFULL = 0
    CONDITIONALACCESS_ENDED_NOCHANGE = 1
    CONDITIONALACCESS_ABORTED = 2
  end

  enum BDA_DISCOVERY_STATE : Int32
    BDA_DISCOVERY_UNSPECIFIED = 0
    BDA_DISCOVERY_REQUIRED = 1
    BDA_DISCOVERY_COMPLETE = 2
  end

  enum SmartCardStatusType : Int32
    CardInserted = 0
    CardRemoved = 1
    CardError = 2
    CardDataChanged = 3
    CardFirmwareUpgrade = 4
  end

  enum SmartCardAssociationType : Int32
    NotAssociated = 0
    Associated = 1
    AssociationUnknown = 2
  end

  enum LocationCodeSchemeType : Int32
    SCTE_18 = 0
  end

  enum EntitlementType : Int32
    Entitled = 0
    NotEntitled = 1
    TechnicalFailure = 2
  end

  enum UICloseReasonType : Int32
    NotReady = 0
    UserClosed = 1
    SystemClosed = 2
    DeviceClosed = 3
    ErrorClosed = 4
  end

  enum BDA_DrmPairingError : Int32
    BDA_DrmPairing_Succeeded = 0
    BDA_DrmPairing_HardwareFailure = 1
    BDA_DrmPairing_NeedRevocationData = 2
    BDA_DrmPairing_NeedIndiv = 3
    BDA_DrmPairing_Other = 4
    BDA_DrmPairing_DrmInitFailed = 5
    BDA_DrmPairing_DrmNotPaired = 6
    BDA_DrmPairing_DrmRePairSoon = 7
    BDA_DrmPairing_Aborted = 8
    BDA_DrmPairing_NeedSDKUpdate = 9
  end

  enum KSPROPERTY_IPSINK : UInt32
    KSPROPERTY_IPSINK_MULTICASTLIST = 0
    KSPROPERTY_IPSINK_ADAPTER_DESCRIPTION = 1
    KSPROPERTY_IPSINK_ADAPTER_ADDRESS = 2
  end

  enum AMExtendedSeekingCapabilities : Int32
    AM_EXSEEK_CANSEEK = 1
    AM_EXSEEK_CANSCAN = 2
    AM_EXSEEK_MARKERSEEK = 4
    AM_EXSEEK_SCANWITHOUTCLOCK = 8
    AM_EXSEEK_NOSTANDARDREPAINT = 16
    AM_EXSEEK_BUFFERING = 32
    AM_EXSEEK_SENDS_VIDEOFRAMEREADY = 64
  end

  enum AM_LINE21_CCLEVEL : Int32
    AM_L21_CCLEVEL_TC2 = 0
  end

  enum AM_LINE21_CCSERVICE : Int32
    AM_L21_CCSERVICE_None = 0
    AM_L21_CCSERVICE_Caption1 = 1
    AM_L21_CCSERVICE_Caption2 = 2
    AM_L21_CCSERVICE_Text1 = 3
    AM_L21_CCSERVICE_Text2 = 4
    AM_L21_CCSERVICE_XDS = 5
    AM_L21_CCSERVICE_DefChannel = 10
    AM_L21_CCSERVICE_Invalid = 11
  end

  enum AM_LINE21_CCSTATE : Int32
    AM_L21_CCSTATE_Off = 0
    AM_L21_CCSTATE_On = 1
  end

  enum AM_LINE21_CCSTYLE : Int32
    AM_L21_CCSTYLE_None = 0
    AM_L21_CCSTYLE_PopOn = 1
    AM_L21_CCSTYLE_PaintOn = 2
    AM_L21_CCSTYLE_RollUp = 3
  end

  enum AM_LINE21_DRAWBGMODE : Int32
    AM_L21_DRAWBGMODE_Opaque = 0
    AM_L21_DRAWBGMODE_Transparent = 1
  end

  enum AM_WST_LEVEL : Int32
    AM_WST_LEVEL_1_5 = 0
  end

  enum AM_WST_SERVICE : Int32
    AM_WST_SERVICE_None = 0
    AM_WST_SERVICE_Text = 1
    AM_WST_SERVICE_IDS = 2
    AM_WST_SERVICE_Invalid = 3
  end

  enum AM_WST_STATE : Int32
    AM_WST_STATE_Off = 0
    AM_WST_STATE_On = 1
  end

  enum AM_WST_STYLE : Int32
    AM_WST_STYLE_None = 0
    AM_WST_STYLE_Invers = 1
  end

  enum AM_WST_DRAWBGMODE : Int32
    AM_WST_DRAWBGMODE_Opaque = 0
    AM_WST_DRAWBGMODE_Transparent = 1
  end

  enum STREAM_TYPE : Int32
    STREAMTYPE_READ = 0
    STREAMTYPE_WRITE = 1
    STREAMTYPE_TRANSFORM = 2
  end

  enum STREAM_STATE : Int32
    STREAMSTATE_STOP = 0
    STREAMSTATE_RUN = 1
  end

  enum COMPLETION_STATUS_FLAGS : Int32
    COMPSTAT_NOUPDATEOK = 1
    COMPSTAT_WAIT = 2
    COMPSTAT_ABORT = 4
  end

  enum MMSSF_GET_INFORMATION_FLAGS : UInt32
    MMSSF_HASCLOCK = 1
    MMSSF_SUPPORTSEEK = 2
    MMSSF_ASYNCHRONOUS = 4
  end

  enum SSUPDATE_TYPE : Int32
    SSUPDATE_ASYNC = 1
    SSUPDATE_CONTINUOUS = 2
  end

  enum DDSFF_FLAGS : UInt32
    DDSFF_PROGRESSIVERENDER = 1
  end

  enum AMMSF_MMS_INIT_FLAGS : UInt32
    AMMSF_NOGRAPHTHREAD = 1
  end

  enum AMMSF_MS_FLAGS : UInt32
    AMMSF_ADDDEFAULTRENDERER = 1
    AMMSF_CREATEPEER = 2
    AMMSF_STOPIFNOSAMPLES = 4
    AMMSF_NOSTALL = 8
  end

  enum AMMSF_RENDER_FLAGS : UInt32
    AMMSF_RENDERTYPEMASK = 3
    AMMSF_RENDERTOEXISTING = 0
    AMMSF_RENDERALLSTREAMS = 1
    AMMSF_NORENDER = 2
    AMMSF_NOCLOCK = 4
    AMMSF_RUN = 8
  end

  enum OUTPUT_STATE : UInt32
    Disabled = 0
    ReadData = 1
    RenderData = 2
  end

  enum AM_PROPERTY_FRAMESTEP : Int32
    AM_PROPERTY_FRAMESTEP_STEP = 1
    AM_PROPERTY_FRAMESTEP_CANCEL = 2
    AM_PROPERTY_FRAMESTEP_CANSTEP = 3
    AM_PROPERTY_FRAMESTEP_CANSTEPMULTIPLE = 4
  end

  enum AM_ASPECT_RATIO_MODE : Int32
    AM_ARMODE_STRETCHED = 0
    AM_ARMODE_LETTER_BOX = 1
    AM_ARMODE_CROP = 2
    AM_ARMODE_STRETCHED_AS_PRIMARY = 3
  end

  enum VMR9PresentationFlags : Int32
    VMR9Sample_SyncPoint = 1
    VMR9Sample_Preroll = 2
    VMR9Sample_Discontinuity = 4
    VMR9Sample_TimeValid = 8
    VMR9Sample_SrcDstRectsValid = 16
  end

  enum VMR9SurfaceAllocationFlags : Int32
    VMR9AllocFlag_3DRenderTarget = 1
    VMR9AllocFlag_DXVATarget = 2
    VMR9AllocFlag_TextureSurface = 4
    VMR9AllocFlag_OffscreenSurface = 8
    VMR9AllocFlag_RGBDynamicSwitch = 16
    VMR9AllocFlag_UsageReserved = 224
    VMR9AllocFlag_UsageMask = 255
  end

  enum VMR9AspectRatioMode : Int32
    VMR9ARMode_None = 0
    VMR9ARMode_LetterBox = 1
  end

  enum VMR9MixerPrefs : Int32
    MixerPref9_NoDecimation = 1
    MixerPref9_DecimateOutput = 2
    MixerPref9_ARAdjustXorY = 4
    MixerPref9_NonSquareMixing = 8
    MixerPref9_DecimateMask = 15
    MixerPref9_BiLinearFiltering = 16
    MixerPref9_PointFiltering = 32
    MixerPref9_AnisotropicFiltering = 64
    MixerPref9_PyramidalQuadFiltering = 128
    MixerPref9_GaussianQuadFiltering = 256
    MixerPref9_FilteringReserved = 3584
    MixerPref9_FilteringMask = 4080
    MixerPref9_RenderTargetRGB = 4096
    MixerPref9_RenderTargetYUV = 8192
    MixerPref9_RenderTargetReserved = 1032192
    MixerPref9_RenderTargetMask = 1044480
    MixerPref9_DynamicSwitchToBOB = 1048576
    MixerPref9_DynamicDecimateBy2 = 2097152
    MixerPref9_DynamicReserved = 12582912
    MixerPref9_DynamicMask = 15728640
  end

  enum VMR9ProcAmpControlFlags : Int32
    ProcAmpControl9_Brightness = 1
    ProcAmpControl9_Contrast = 2
    ProcAmpControl9_Hue = 4
    ProcAmpControl9_Saturation = 8
    ProcAmpControl9_Mask = 15
  end

  enum VMR9AlphaBitmapFlags : Int32
    VMR9AlphaBitmap_Disable = 1
    VMR9AlphaBitmap_hDC = 2
    VMR9AlphaBitmap_EntireDDS = 4
    VMR9AlphaBitmap_SrcColorKey = 8
    VMR9AlphaBitmap_SrcRect = 16
    VMR9AlphaBitmap_FilterMode = 32
  end

  enum VMR9RenderPrefs : Int32
    RenderPrefs9_DoNotRenderBorder = 1
    RenderPrefs9_Mask = 1
  end

  enum VMR9Mode : Int32
    VMR9Mode_Windowed = 1
    VMR9Mode_Windowless = 2
    VMR9Mode_Renderless = 4
    VMR9Mode_Mask = 7
  end

  enum VMR9DeinterlacePrefs : Int32
    DeinterlacePref9_NextBest = 1
    DeinterlacePref9_BOB = 2
    DeinterlacePref9_Weave = 4
    DeinterlacePref9_Mask = 7
  end

  enum VMR9DeinterlaceTech : Int32
    DeinterlaceTech9_Unknown = 0
    DeinterlaceTech9_BOBLineReplicate = 1
    DeinterlaceTech9_BOBVerticalStretch = 2
    DeinterlaceTech9_MedianFiltering = 4
    DeinterlaceTech9_EdgeFiltering = 16
    DeinterlaceTech9_FieldAdaptive = 32
    DeinterlaceTech9_PixelAdaptive = 64
    DeinterlaceTech9_MotionVectorSteered = 128
  end

  enum VMR9_SampleFormat : Int32
    VMR9_SampleReserved = 1
    VMR9_SampleProgressiveFrame = 2
    VMR9_SampleFieldInterleavedEvenFirst = 3
    VMR9_SampleFieldInterleavedOddFirst = 4
    VMR9_SampleFieldSingleEven = 5
    VMR9_SampleFieldSingleOdd = 6
  end

  enum AM_PROPERTY_AC3 : Int32
    AM_PROPERTY_AC3_ERROR_CONCEALMENT = 1
    AM_PROPERTY_AC3_ALTERNATE_AUDIO = 2
    AM_PROPERTY_AC3_DOWNMIX = 3
    AM_PROPERTY_AC3_BIT_STREAM_MODE = 4
    AM_PROPERTY_AC3_DIALOGUE_LEVEL = 5
    AM_PROPERTY_AC3_LANGUAGE_CODE = 6
    AM_PROPERTY_AC3_ROOM_TYPE = 7
  end

  enum AM_PROPERTY_DVDSUBPIC : Int32
    AM_PROPERTY_DVDSUBPIC_PALETTE = 0
    AM_PROPERTY_DVDSUBPIC_HLI = 1
    AM_PROPERTY_DVDSUBPIC_COMPOSIT_ON = 2
  end

  enum AM_PROPERTY_DVDCOPYPROT : Int32
    AM_PROPERTY_DVDCOPY_CHLG_KEY = 1
    AM_PROPERTY_DVDCOPY_DVD_KEY1 = 2
    AM_PROPERTY_DVDCOPY_DEC_KEY2 = 3
    AM_PROPERTY_DVDCOPY_TITLE_KEY = 4
    AM_PROPERTY_COPY_MACROVISION = 5
    AM_PROPERTY_DVDCOPY_REGION = 6
    AM_PROPERTY_DVDCOPY_SET_COPY_STATE = 7
    AM_PROPERTY_COPY_ANALOG_COMPONENT = 8
    AM_PROPERTY_COPY_DIGITAL_CP = 9
    AM_PROPERTY_COPY_DVD_SRM = 10
    AM_PROPERTY_DVDCOPY_SUPPORTS_NEW_KEYCOUNT = 11
    AM_PROPERTY_DVDCOPY_DISC_KEY = 128
  end

  enum AM_DIGITAL_CP : Int32
    AM_DIGITAL_CP_OFF = 0
    AM_DIGITAL_CP_ON = 1
    AM_DIGITAL_CP_DVD_COMPLIANT = 2
  end

  enum AM_DVDCOPYSTATE : Int32
    AM_DVDCOPYSTATE_INITIALIZE = 0
    AM_DVDCOPYSTATE_INITIALIZE_TITLE = 1
    AM_DVDCOPYSTATE_AUTHENTICATION_NOT_REQUIRED = 2
    AM_DVDCOPYSTATE_AUTHENTICATION_REQUIRED = 3
    AM_DVDCOPYSTATE_DONE = 4
  end

  enum AM_COPY_MACROVISION_LEVEL : Int32
    AM_MACROVISION_DISABLED = 0
    AM_MACROVISION_LEVEL1 = 1
    AM_MACROVISION_LEVEL2 = 2
    AM_MACROVISION_LEVEL3 = 3
  end

  enum AM_MPEG2Level : Int32
    AM_MPEG2Level_Low = 1
    AM_MPEG2Level_Main = 2
    AM_MPEG2Level_High1440 = 3
    AM_MPEG2Level_High = 4
  end

  enum AM_MPEG2Profile : Int32
    AM_MPEG2Profile_Simple = 1
    AM_MPEG2Profile_Main = 2
    AM_MPEG2Profile_SNRScalable = 3
    AM_MPEG2Profile_SpatiallyScalable = 4
    AM_MPEG2Profile_High = 5
  end

  enum AM_PROPERTY_DVDKARAOKE : Int32
    AM_PROPERTY_DVDKARAOKE_ENABLE = 0
    AM_PROPERTY_DVDKARAOKE_DATA = 1
  end

  enum AM_PROPERTY_TS_RATE_CHANGE : Int32
    AM_RATE_SimpleRateChange = 1
    AM_RATE_ExactRateChange = 2
    AM_RATE_MaxFullDataRate = 3
    AM_RATE_Step = 4
    AM_RATE_UseRateVersion = 5
    AM_RATE_QueryFullFrameRate = 6
    AM_RATE_QueryLastRateSegPTS = 7
    AM_RATE_CorrectTS = 8
    AM_RATE_ReverseMaxFullDataRate = 9
    AM_RATE_ResetOnTimeDisc = 10
    AM_RATE_QueryMapping = 11
  end

  enum AM_PROPERTY_DVD_RATE_CHANGE : Int32
    AM_RATE_ChangeRate = 1
    AM_RATE_FullDataRateMax = 2
    AM_RATE_ReverseDecode = 3
    AM_RATE_DecoderPosition = 4
    AM_RATE_DecoderVersion = 5
  end

  enum DVD_PLAY_DIRECTION : Int32
    DVD_DIR_FORWARD = 0
    DVD_DIR_BACKWARD = 1
  end

  enum DVD_ERROR : Int32
    DVD_ERROR_Unexpected = 1
    DVD_ERROR_CopyProtectFail = 2
    DVD_ERROR_InvalidDVD1_0Disc = 3
    DVD_ERROR_InvalidDiscRegion = 4
    DVD_ERROR_LowParentalLevel = 5
    DVD_ERROR_MacrovisionFail = 6
    DVD_ERROR_IncompatibleSystemAndDecoderRegions = 7
    DVD_ERROR_IncompatibleDiscAndDecoderRegions = 8
    DVD_ERROR_CopyProtectOutputFail = 9
    DVD_ERROR_CopyProtectOutputNotSupported = 10
  end

  enum DVD_WARNING : Int32
    DVD_WARNING_InvalidDVD1_0Disc = 1
    DVD_WARNING_FormatNotSupported = 2
    DVD_WARNING_IllegalNavCommand = 3
    DVD_WARNING_Open = 4
    DVD_WARNING_Seek = 5
    DVD_WARNING_Read = 6
  end

  enum DVD_PB_STOPPED : Int32
    DVD_PB_STOPPED_Other = 0
    DVD_PB_STOPPED_NoBranch = 1
    DVD_PB_STOPPED_NoFirstPlayDomain = 2
    DVD_PB_STOPPED_StopCommand = 3
    DVD_PB_STOPPED_Reset = 4
    DVD_PB_STOPPED_DiscEjected = 5
    DVD_PB_STOPPED_IllegalNavCommand = 6
    DVD_PB_STOPPED_PlayPeriodAutoStop = 7
    DVD_PB_STOPPED_PlayChapterAutoStop = 8
    DVD_PB_STOPPED_ParentalFailure = 9
    DVD_PB_STOPPED_RegionFailure = 10
    DVD_PB_STOPPED_MacrovisionFailure = 11
    DVD_PB_STOPPED_DiscReadError = 12
    DVD_PB_STOPPED_CopyProtectFailure = 13
    DVD_PB_STOPPED_CopyProtectOutputFailure = 14
    DVD_PB_STOPPED_CopyProtectOutputNotSupported = 15
  end

  enum SNDDEV_ERR : Int32
    SNDDEV_ERROR_Open = 1
    SNDDEV_ERROR_Close = 2
    SNDDEV_ERROR_GetCaps = 3
    SNDDEV_ERROR_PrepareHeader = 4
    SNDDEV_ERROR_UnprepareHeader = 5
    SNDDEV_ERROR_Reset = 6
    SNDDEV_ERROR_Restart = 7
    SNDDEV_ERROR_GetPosition = 8
    SNDDEV_ERROR_Write = 9
    SNDDEV_ERROR_Pause = 10
    SNDDEV_ERROR_Stop = 11
    SNDDEV_ERROR_Start = 12
    SNDDEV_ERROR_AddBuffer = 13
    SNDDEV_ERROR_Query = 14
  end

  enum MP_TYPE : Int32
    MPT_INT = 0
    MPT_FLOAT = 1
    MPT_BOOL = 2
    MPT_ENUM = 3
    MPT_MAX = 4
  end

  enum MP_CURVE_TYPE : Int32
    MP_CURVE_JUMP = 1
    MP_CURVE_LINEAR = 2
    MP_CURVE_SQUARE = 4
    MP_CURVE_INVSQUARE = 8
    MP_CURVE_SINE = 16
  end

  enum DXVA2_SampleFlags : Int32
    DXVA2_SampleFlag_Palette_Changed = 1
    DXVA2_SampleFlag_SrcRect_Changed = 2
    DXVA2_SampleFlag_DstRect_Changed = 4
    DXVA2_SampleFlag_ColorData_Changed = 8
    DXVA2_SampleFlag_PlanarAlpha_Changed = 16
    DXVA2_SampleFlag_RFF = 65536
    DXVA2_SampleFlag_TFF = 131072
    DXVA2_SampleFlag_RFF_TFF_Present = 262144
    DXVA2_SampleFlagsMask = -65505
  end

  enum DXVA2_DestinationFlags : Int32
    DXVA2_DestinationFlag_Background_Changed = 1
    DXVA2_DestinationFlag_TargetRect_Changed = 2
    DXVA2_DestinationFlag_ColorData_Changed = 4
    DXVA2_DestinationFlag_Alpha_Changed = 8
    DXVA2_DestinationFlag_RFF = 65536
    DXVA2_DestinationFlag_TFF = 131072
    DXVA2_DestinationFlag_RFF_TFF_Present = 262144
    DXVA2_DestinationFlagMask = -65521
  end

  enum AMPlayListItemFlags : Int32
    AMPLAYLISTITEM_CANSKIP = 1
    AMPLAYLISTITEM_CANBIND = 2
  end

  enum AMPlayListFlags : Int32
    AMPLAYLIST_STARTINSCANMODE = 1
    AMPLAYLIST_FORCEBANNER = 2
  end

  enum AMPlayListEventFlags : Int32
    AMPLAYLISTEVENT_RESUME = 0
    AMPLAYLISTEVENT_BREAK = 1
    AMPLAYLISTEVENT_NEXT = 2
    AMPLAYLISTEVENT_MASK = 15
    AMPLAYLISTEVENT_REFRESH = 16
  end

  enum DISPID_TUNER : Int32
    DISPID_TUNER_TS_UNIQUENAME = 1
    DISPID_TUNER_TS_FRIENDLYNAME = 2
    DISPID_TUNER_TS_CLSID = 3
    DISPID_TUNER_TS_NETWORKTYPE = 4
    DISPID_TUNER_TS__NETWORKTYPE = 5
    DISPID_TUNER_TS_CREATETUNEREQUEST = 6
    DISPID_TUNER_TS_ENUMCATEGORYGUIDS = 7
    DISPID_TUNER_TS_ENUMDEVICEMONIKERS = 8
    DISPID_TUNER_TS_DEFAULTPREFERREDCOMPONENTTYPES = 9
    DISPID_TUNER_TS_FREQMAP = 10
    DISPID_TUNER_TS_DEFLOCATOR = 11
    DISPID_TUNER_TS_CLONE = 12
    DISPID_TUNER_TR_TUNINGSPACE = 1
    DISPID_TUNER_TR_COMPONENTS = 2
    DISPID_TUNER_TR_CLONE = 3
    DISPID_TUNER_TR_LOCATOR = 4
    DISPID_TUNER_CT_CATEGORY = 1
    DISPID_TUNER_CT_MEDIAMAJORTYPE = 2
    DISPID_TUNER_CT__MEDIAMAJORTYPE = 3
    DISPID_TUNER_CT_MEDIASUBTYPE = 4
    DISPID_TUNER_CT__MEDIASUBTYPE = 5
    DISPID_TUNER_CT_MEDIAFORMATTYPE = 6
    DISPID_TUNER_CT__MEDIAFORMATTYPE = 7
    DISPID_TUNER_CT_MEDIATYPE = 8
    DISPID_TUNER_CT_CLONE = 9
    DISPID_TUNER_LCT_LANGID = 100
    DISPID_TUNER_MP2CT_TYPE = 200
    DISPID_TUNER_ATSCCT_FLAGS = 300
    DISPID_TUNER_L_CARRFREQ = 1
    DISPID_TUNER_L_INNERFECMETHOD = 2
    DISPID_TUNER_L_INNERFECRATE = 3
    DISPID_TUNER_L_OUTERFECMETHOD = 4
    DISPID_TUNER_L_OUTERFECRATE = 5
    DISPID_TUNER_L_MOD = 6
    DISPID_TUNER_L_SYMRATE = 7
    DISPID_TUNER_L_CLONE = 8
    DISPID_TUNER_L_ATSC_PHYS_CHANNEL = 201
    DISPID_TUNER_L_ATSC_TSID = 202
    DISPID_TUNER_L_ATSC_MP2_PROGNO = 203
    DISPID_TUNER_L_DVBT_BANDWIDTH = 301
    DISPID_TUNER_L_DVBT_LPINNERFECMETHOD = 302
    DISPID_TUNER_L_DVBT_LPINNERFECRATE = 303
    DISPID_TUNER_L_DVBT_GUARDINTERVAL = 304
    DISPID_TUNER_L_DVBT_HALPHA = 305
    DISPID_TUNER_L_DVBT_TRANSMISSIONMODE = 306
    DISPID_TUNER_L_DVBT_INUSE = 307
    DISPID_TUNER_L_DVBT2_PHYSICALLAYERPIPEID = 351
    DISPID_TUNER_L_DVBS_POLARISATION = 401
    DISPID_TUNER_L_DVBS_WEST = 402
    DISPID_TUNER_L_DVBS_ORBITAL = 403
    DISPID_TUNER_L_DVBS_AZIMUTH = 404
    DISPID_TUNER_L_DVBS_ELEVATION = 405
    DISPID_TUNER_L_DVBS2_DISEQ_LNB_SOURCE = 406
    DISPID_TUNER_TS_DVBS2_LOW_OSC_FREQ_OVERRIDE = 407
    DISPID_TUNER_TS_DVBS2_HI_OSC_FREQ_OVERRIDE = 408
    DISPID_TUNER_TS_DVBS2_LNB_SWITCH_FREQ_OVERRIDE = 409
    DISPID_TUNER_TS_DVBS2_SPECTRAL_INVERSION_OVERRIDE = 410
    DISPID_TUNER_L_DVBS2_ROLLOFF = 411
    DISPID_TUNER_L_DVBS2_PILOT = 412
    DISPID_TUNER_L_ANALOG_STANDARD = 601
    DISPID_TUNER_L_DTV_O_MAJOR_CHANNEL = 701
    DISPID_TUNER_C_TYPE = 1
    DISPID_TUNER_C_STATUS = 2
    DISPID_TUNER_C_LANGID = 3
    DISPID_TUNER_C_DESCRIPTION = 4
    DISPID_TUNER_C_CLONE = 5
    DISPID_TUNER_C_MP2_PID = 101
    DISPID_TUNER_C_MP2_PCRPID = 102
    DISPID_TUNER_C_MP2_PROGNO = 103
    DISPID_TUNER_C_ANALOG_AUDIO = 201
    DISPID_TUNER_TS_DVB_SYSTEMTYPE = 101
    DISPID_TUNER_TS_DVB2_NETWORK_ID = 102
    DISPID_TUNER_TS_DVBS_LOW_OSC_FREQ = 1001
    DISPID_TUNER_TS_DVBS_HI_OSC_FREQ = 1002
    DISPID_TUNER_TS_DVBS_LNB_SWITCH_FREQ = 1003
    DISPID_TUNER_TS_DVBS_INPUT_RANGE = 1004
    DISPID_TUNER_TS_DVBS_SPECTRAL_INVERSION = 1005
    DISPID_TUNER_TS_AR_MINFREQUENCY = 101
    DISPID_TUNER_TS_AR_MAXFREQUENCY = 102
    DISPID_TUNER_TS_AR_STEP = 103
    DISPID_TUNER_TS_AR_COUNTRYCODE = 104
    DISPID_TUNER_TS_AUX_COUNTRYCODE = 101
    DISPID_TUNER_TS_ATV_MINCHANNEL = 101
    DISPID_TUNER_TS_ATV_MAXCHANNEL = 102
    DISPID_TUNER_TS_ATV_INPUTTYPE = 103
    DISPID_TUNER_TS_ATV_COUNTRYCODE = 104
    DISPID_TUNER_TS_ATSC_MINMINORCHANNEL = 201
    DISPID_TUNER_TS_ATSC_MAXMINORCHANNEL = 202
    DISPID_TUNER_TS_ATSC_MINPHYSCHANNEL = 203
    DISPID_TUNER_TS_ATSC_MAXPHYSCHANNEL = 204
    DISPID_TUNER_TS_DC_MINMAJORCHANNEL = 301
    DISPID_TUNER_TS_DC_MAXMAJORCHANNEL = 302
    DISPID_TUNER_TS_DC_MINSOURCEID = 303
    DISPID_TUNER_TS_DC_MAXSOURCEID = 304
    DISPID_CHTUNER_ATVAC_CHANNEL = 101
    DISPID_CHTUNER_ATVDC_SYSTEM = 101
    DISPID_CHTUNER_ATVDC_CONTENT = 102
    DISPID_CHTUNER_CIDTR_CHANNELID = 101
    DISPID_CHTUNER_CTR_CHANNEL = 101
    DISPID_CHTUNER_ACTR_MINOR_CHANNEL = 201
    DISPID_CHTUNER_DCTR_MAJOR_CHANNEL = 301
    DISPID_CHTUNER_DCTR_SRCID = 302
    DISPID_DVBTUNER_DVBC_ATTRIBUTESVALID = 101
    DISPID_DVBTUNER_DVBC_PID = 102
    DISPID_DVBTUNER_DVBC_TAG = 103
    DISPID_DVBTUNER_DVBC_COMPONENTTYPE = 104
    DISPID_DVBTUNER_ONID = 101
    DISPID_DVBTUNER_TSID = 102
    DISPID_DVBTUNER_SID = 103
    DISPID_MP2TUNER_TSID = 101
    DISPID_MP2TUNER_PROGNO = 102
    DISPID_MP2TUNERFACTORY_CREATETUNEREQUEST = 1
  end

  enum EnTvRat_System : Int32
    MPAA = 0
    US_TV = 1
    Canadian_English = 2
    Canadian_French = 3
    Reserved4 = 4
    System5 = 5
    System6 = 6
    Reserved7 = 7
    PBDA = 8
    AgeBased = 9
    TvRat_kSystems = 10
    TvRat_SystemDontKnow = 255
  end

  enum EnTvRat_GenericLevel : Int32
    TvRat_0 = 0
    TvRat_1 = 1
    TvRat_2 = 2
    TvRat_3 = 3
    TvRat_4 = 4
    TvRat_5 = 5
    TvRat_6 = 6
    TvRat_7 = 7
    TvRat_8 = 8
    TvRat_9 = 9
    TvRat_10 = 10
    TvRat_11 = 11
    TvRat_12 = 12
    TvRat_13 = 13
    TvRat_14 = 14
    TvRat_15 = 15
    TvRat_16 = 16
    TvRat_17 = 17
    TvRat_18 = 18
    TvRat_19 = 19
    TvRat_20 = 20
    TvRat_21 = 21
    TvRat_kLevels = 22
    TvRat_Unblock = -1
    TvRat_LevelDontKnow = 255
  end

  enum EnTvRat_MPAA : Int32
    MPAA_NotApplicable = 0
    MPAA_G = 1
    MPAA_PG = 2
    MPAA_PG13 = 3
    MPAA_R = 4
    MPAA_NC17 = 5
    MPAA_X = 6
    MPAA_NotRated = 7
  end

  enum EnTvRat_US_TV : Int32
    US_TV_None = 0
    US_TV_Y = 1
    US_TV_Y7 = 2
    US_TV_G = 3
    US_TV_PG = 4
    US_TV_14 = 5
    US_TV_MA = 6
    US_TV_None7 = 7
  end

  enum EnTvRat_CAE_TV : Int32
    CAE_TV_Exempt = 0
    CAE_TV_C = 1
    CAE_TV_C8 = 2
    CAE_TV_G = 3
    CAE_TV_PG = 4
    CAE_TV_14 = 5
    CAE_TV_18 = 6
    CAE_TV_Reserved = 7
  end

  enum EnTvRat_CAF_TV : Int32
    CAF_TV_Exempt = 0
    CAF_TV_G = 1
    CAF_TV_8 = 2
    CAF_TV_13 = 3
    CAF_TV_16 = 4
    CAF_TV_18 = 5
    CAF_TV_Reserved6 = 6
    CAF_TV_Reserved = 7
  end

  enum BfEnTvRat_GenericAttributes : Int32
    BfAttrNone = 0
    BfIsBlocked = 1
    BfIsAttr_1 = 2
    BfIsAttr_2 = 4
    BfIsAttr_3 = 8
    BfIsAttr_4 = 16
    BfIsAttr_5 = 32
    BfIsAttr_6 = 64
    BfIsAttr_7 = 128
    BfValidAttrSubmask = 255
  end

  enum BfEnTvRat_Attributes_US_TV : Int32
    US_TV_IsBlocked = 1
    US_TV_IsViolent = 2
    US_TV_IsSexualSituation = 4
    US_TV_IsAdultLanguage = 8
    US_TV_IsSexuallySuggestiveDialog = 16
    US_TV_ValidAttrSubmask = 31
  end

  enum BfEnTvRat_Attributes_MPAA : Int32
    MPAA_IsBlocked = 1
    MPAA_ValidAttrSubmask = 1
  end

  enum BfEnTvRat_Attributes_CAE_TV : Int32
    CAE_IsBlocked = 1
    CAE_ValidAttrSubmask = 1
  end

  enum BfEnTvRat_Attributes_CAF_TV : Int32
    CAF_IsBlocked = 1
    CAF_ValidAttrSubmask = 1
  end

  enum FormatNotSupportedEvents : Int32
    FORMATNOTSUPPORTED_CLEAR = 0
    FORMATNOTSUPPORTED_NOTSUPPORTED = 1
  end

  enum ProtType : Int32
    PROT_COPY_FREE = 1
    PROT_COPY_ONCE = 2
    PROT_COPY_NEVER = 3
    PROT_COPY_NEVER_REALLY = 4
    PROT_COPY_NO_MORE = 5
    PROT_COPY_FREE_CIT = 6
    PROT_COPY_BF = 7
    PROT_COPY_CN_RECORDING_STOP = 8
    PROT_COPY_FREE_SECURE = 9
    PROT_COPY_INVALID = 50
  end

  enum EncDecEvents : Int32
    ENCDEC_CPEVENT = 0
    ENCDEC_RECORDING_STATUS = 1
  end

  enum CPRecordingStatus : Int32
    RECORDING_STOPPED = 0
    RECORDING_STARTED = 1
  end

  enum CPEventBitShift : Int32
    CPEVENT_BITSHIFT_RATINGS = 0
    CPEVENT_BITSHIFT_COPP = 1
    CPEVENT_BITSHIFT_LICENSE = 2
    CPEVENT_BITSHIFT_ROLLBACK = 3
    CPEVENT_BITSHIFT_SAC = 4
    CPEVENT_BITSHIFT_DOWNRES = 5
    CPEVENT_BITSHIFT_STUBLIB = 6
    CPEVENT_BITSHIFT_UNTRUSTEDGRAPH = 7
    CPEVENT_BITSHIFT_PENDING_CERTIFICATE = 8
    CPEVENT_BITSHIFT_NO_PLAYREADY = 9
  end

  enum CPEvents : Int32
    CPEVENT_NONE = 0
    CPEVENT_RATINGS = 1
    CPEVENT_COPP = 2
    CPEVENT_LICENSE = 3
    CPEVENT_ROLLBACK = 4
    CPEVENT_SAC = 5
    CPEVENT_DOWNRES = 6
    CPEVENT_STUBLIB = 7
    CPEVENT_UNTRUSTEDGRAPH = 8
    CPEVENT_PROTECTWINDOWED = 9
  end

  enum RevokedComponent : Int32
    REVOKED_COPP = 0
    REVOKED_SAC = 1
    REVOKED_APP_STUB = 2
    REVOKED_SECURE_PIPELINE = 3
    REVOKED_MAX_TYPES = 4
  end

  enum EnTag_Mode : Int32
    EnTag_Remove = 0
    EnTag_Once = 1
    EnTag_Repeat = 2
  end

  enum COPPEventBlockReason : Int32
    COPP_Unknown = -1
    COPP_BadDriver = 0
    COPP_NoCardHDCPSupport = 1
    COPP_NoMonitorHDCPSupport = 2
    COPP_BadCertificate = 3
    COPP_InvalidBusProtection = 4
    COPP_AeroGlassOff = 5
    COPP_RogueApp = 6
    COPP_ForbiddenVideo = 7
    COPP_Activate = 8
    COPP_DigitalAudioUnprotected = 9
  end

  enum LicenseEventBlockReason : Int32
    LIC_BadLicense = 0
    LIC_NeedIndiv = 1
    LIC_Expired = 2
    LIC_NeedActivation = 3
    LIC_ExtenderBlocked = 4
  end

  enum DownResEventParam : Int32
    DOWNRES_Always = 0
    DOWNRES_InWindowOnly = 1
    DOWNRES_Undefined = 2
  end

  enum SegDispidList : Int32
    Dispidname = 0
    Dispidstatus = 1
    Dispiddevimagesourcewidth = 2
    Dispiddevimagesourceheight = 3
    Dispiddevcountrycode = 4
    Dispiddevoverscan = 5
    Dispidsegment = 6
    Dispiddevvolume = 7
    Dispiddevbalance = 8
    Dispiddevpower = 9
    Dispidtunechan = 10
    Dispiddevvideosubchannel = 11
    Dispiddevaudiosubchannel = 12
    Dispidchannelavailable = 13
    Dispiddevvideofrequency = 14
    Dispiddevaudiofrequency = 15
    Dispidcount = 16
    Dispiddevfilename = 17
    Dispidvisible = 18
    Dispidowner = 19
    Dispidmessagedrain = 20
    Dispidviewable = 21
    Dispiddevview = 22
    Dispidkscat = 23
    Dispidclsid = 24
    Dispid_kscat = 25
    Dispid_clsid = 26
    Dispidtune = 27
    Dispidts = 28
    Dispiddevsap = 29
    Dispidclip = 30
    Dispidrequestedcliprect = 31
    Dispidclippedsourcerect = 32
    Dispidavailablesourcerect = 33
    Dispidmediaposition = 34
    Dispiddevrun = 35
    Dispiddevpause = 36
    Dispiddevstop = 37
    Dispidccenable = 38
    Dispiddevstep = 39
    Dispiddevcanstep = 40
    Dispidsourcesize = 41
    Dispid_playtitle = 42
    Dispid_playchapterintitle = 43
    Dispid_playchapter = 44
    Dispid_playchaptersautostop = 45
    Dispid_playattime = 46
    Dispid_playattimeintitle = 47
    Dispid_playperiodintitleautostop = 48
    Dispid_replaychapter = 49
    Dispid_playprevchapter = 50
    Dispid_playnextchapter = 51
    Dispid_playforwards = 52
    Dispid_playbackwards = 53
    Dispid_stilloff = 54
    Dispid_audiolanguage = 55
    Dispid_showmenu = 56
    Dispid_resume = 57
    Dispid_returnfromsubmenu = 58
    Dispid_buttonsavailable = 59
    Dispid_currentbutton = 60
    Dispid_selectandactivatebutton = 61
    Dispid_activatebutton = 62
    Dispid_selectrightbutton = 63
    Dispid_selectleftbutton = 64
    Dispid_selectlowerbutton = 65
    Dispid_selectupperbutton = 66
    Dispid_activateatposition = 67
    Dispid_selectatposition = 68
    Dispid_buttonatposition = 69
    Dispid_numberofchapters = 70
    Dispid_totaltitletime = 71
    Dispid_titlesavailable = 72
    Dispid_volumesavailable = 73
    Dispid_currentvolume = 74
    Dispid_currentdiscside = 75
    Dispid_currentdomain = 76
    Dispid_currentchapter = 77
    Dispid_currenttitle = 78
    Dispid_currenttime = 79
    Dispid_framespersecond = 80
    Dispid_dvdtimecode2bstr = 81
    Dispid_dvddirectory = 82
    Dispid_issubpicturestreamenabled = 83
    Dispid_isaudiostreamenabled = 84
    Dispid_currentsubpicturestream = 85
    Dispid_subpicturelanguage = 86
    Dispid_currentaudiostream = 87
    Dispid_audiostreamsavailable = 88
    Dispid_anglesavailable = 89
    Dispid_currentangle = 90
    Dispid_ccactive = 91
    Dispid_currentccservice = 92
    Dispid_subpicturestreamsavailable = 93
    Dispid_subpictureon = 94
    Dispid_dvduniqueid = 95
    Dispid_enableresetonstop = 96
    Dispid_acceptparentallevelchange = 97
    Dispid_notifyparentallevelchange = 98
    Dispid_selectparentalcountry = 99
    Dispid_selectparentallevel = 100
    Dispid_titleparentallevels = 101
    Dispid_playerparentalcountry = 102
    Dispid_playerparentallevel = 103
    Dispid_eject = 104
    Dispid_uopvalid = 105
    Dispid_sprm = 106
    Dispid_gprm = 107
    Dispid_dvdtextstringtype = 108
    Dispid_dvdtextstring = 109
    Dispid_dvdtextnumberofstrings = 110
    Dispid_dvdtextnumberoflanguages = 111
    Dispid_dvdtextlanguagelcid = 112
    Dispid_regionchange = 113
    Dispid_dvdadm = 114
    Dispid_deletebookmark = 115
    Dispid_restorebookmark = 116
    Dispid_savebookmark = 117
    Dispid_selectdefaultaudiolanguage = 118
    Dispid_selectdefaultsubpicturelanguage = 119
    Dispid_preferredsubpicturestream = 120
    Dispid_defaultmenulanguage = 121
    Dispid_defaultsubpicturelanguage = 122
    Dispid_defaultaudiolanguage = 123
    Dispid_defaultsubpicturelanguageext = 124
    Dispid_defaultaudiolanguageext = 125
    Dispid_languagefromlcid = 126
    Dispid_karaokeaudiopresentationmode = 127
    Dispid_karaokechannelcontent = 128
    Dispid_karaokechannelassignment = 129
    Dispid_restorepreferredsettings = 130
    Dispid_buttonrect = 131
    Dispid_dvdscreeninmousecoordinates = 132
    Dispid_customcompositorclass = 133
    Dispidcustomcompositorclass = 134
    Dispid_customcompositor = 135
    Dispidmixerbitmap = 136
    Dispid_mixerbitmap = 137
    Dispidmixerbitmapopacity = 138
    Dispidmixerbitmaprect = 139
    Dispidsetupmixerbitmap = 140
    Dispidusingoverlay = 141
    Dispiddisplaychange = 142
    Dispidrepaint = 143
    Dispid_isequaldevice = 144
    Dispidrate = 145
    Dispidposition = 146
    Dispidpositionmode = 147
    Dispidlength = 148
    Dispidchangepassword = 149
    Dispidsaveparentallevel = 150
    Dispidsaveparentalcountry = 151
    Dispidconfirmpassword = 152
    Dispidgetparentallevel = 153
    Dispidgetparentalcountry = 154
    Dispiddefaultaudiolcid = 155
    Dispiddefaultsubpicturelcid = 156
    Dispiddefaultmenulcid = 157
    Dispidbookmarkonstop = 158
    Dispidmaxvidrect = 159
    Dispidminvidrect = 160
    Dispidcapture = 161
    Dispid_decimateinput = 162
    Dispidalloctor = 163
    Dispid_allocator = 164
    Dispidallocpresentid = 165
    Dispidsetallocator = 166
    Dispid_setallocator = 167
    Dispidstreambuffersinkname = 168
    Dispidstreambuffersourcename = 169
    Dispidstreambuffercontentrecording = 170
    Dispidstreambufferreferencerecording = 171
    Dispidstarttime = 172
    Dispidstoptime = 173
    Dispidrecordingstopped = 174
    Dispidrecordingstarted = 175
    Dispidnamesetlock = 176
    Dispidrecordingtype = 177
    Dispidstart = 178
    Dispidrecordingattribute = 179
    Dispid_recordingattribute = 180
    Dispidsbeconfigure = 181
    Dispid_currentratings = 182
    Dispid_maxratingslevel = 183
    Dispid_audioencoderint = 184
    Dispid_videoencoderint = 185
    Dispidservice = 186
    Dispid_blockunrated = 187
    Dispid_unrateddelay = 188
    Dispid_suppresseffects = 189
    Dispidsbesource = 190
    Dispidsetsinkfilter = 191
    Dispid_sinkstreams = 192
    Dispidtvformats = 193
    Dispidmodes = 194
    Dispidauxinputs = 195
    Dispidteletextfilter = 196
    Dispid_channelchangeint = 197
    Dispidunlockprofile = 198
    Dispid_addfilter = 199
    Dispidsetminseek = 200
    Dispidrateex = 201
    Dispidaudiocounter = 202
    Dispidvideocounter = 203
    Dispidcccounter = 204
    Dispidwstcounter = 205
    Dispid_audiocounter = 206
    Dispid_videocounter = 207
    Dispid_cccounter = 208
    Dispid_wstcounter = 209
    Dispidaudioanalysis = 210
    Dispidvideoanalysis = 211
    Dispiddataanalysis = 212
    Dispidaudio_analysis = 213
    Dispidvideo_analysis = 214
    Dispiddata_analysis = 215
    Dispid_resetfilterlist = 216
    Dispiddevicepath = 217
    Dispid_sourcefilter = 218
    Dispid__sourcefilter = 219
    Dispiduserevent = 220
    Dispid_bookmark = 221
    LastReservedDeviceDispid = 16383
  end

  enum SegEventidList : Int32
    Eventidstatechange = 0
    Eventidontunechanged = 1
    Eventidendofmedia = 2
    Eventiddvdnotify = 3
    Eventidplayforwards = 4
    Eventidplaybackwards = 5
    Eventidshowmenu = 6
    Eventidresume = 7
    Eventidselectoractivatebutton = 8
    Eventidstilloff = 9
    Eventidpauseon = 10
    Eventidchangecurrentaudiostream = 11
    Eventidchangecurrentsubpicturestream = 12
    Eventidchangecurrentangle = 13
    Eventidplayattimeintitle = 14
    Eventidplayattime = 15
    Eventidplaychapterintitle = 16
    Eventidplaychapter = 17
    Eventidreplaychapter = 18
    Eventidplaynextchapter = 19
    Eventidstop = 20
    Eventidreturnfromsubmenu = 21
    Eventidplaytitle = 22
    Eventidplayprevchapter = 23
    Eventidchangekaraokepresmode = 24
    Eventidchangevideopresmode = 25
    Eventidoverlayunavailable = 26
    Eventidsinkcertificatefailure = 27
    Eventidsinkcertificatesuccess = 28
    Eventidsourcecertificatefailure = 29
    Eventidsourcecertificatesuccess = 30
    Eventidratingsblocked = 31
    Eventidratingsunlocked = 32
    Eventidratingschanged = 33
    Eventidwritefailure = 34
    Eventidtimehole = 35
    Eventidstaledataread = 36
    Eventidcontentbecomingstale = 37
    Eventidstalefiledeleted = 38
    Eventidencryptionon = 39
    Eventidencryptionoff = 40
    Eventidratechange = 41
    Eventidlicensechange = 42
    Eventidcoppblocked = 43
    Eventidcoppunblocked = 44
    Dispidlicenseerrorcode = 45
    Eventidbroadcastevent = 46
    Eventidbroadcasteventex = 47
    Eventidcontentprimarilyaudio = 48
    Dispidavdecaudiodualmonoevent = 49
    Dispidavaudiosamplerateevent = 50
    Dispidavaudiochannelconfigevent = 51
    Dispidavaudiochannelcountevent = 52
    Dispidavdeccommonmeanbitrateevent = 53
    Dispidavddsurroundmodeevent = 54
    Dispidavdeccommoninputformatevent = 55
    Dispidavdeccommonoutputformatevent = 56
    Eventidwritefailureclear = 57
    LastReservedDeviceEvent = 16383
  end

  enum PositionModeList : Int32
    FrameMode = 0
    TenthsSecondsMode = 1
  end

  enum RecordingType : Int32
    CONTENT = 0
    REFERENCE = 1
  end

  enum MSVidCCService : Int32
    None = 0
    Caption1 = 1
    Caption2 = 2
    Text1 = 3
    Text2 = 4
    XDS = 5
  end

  enum MSVidSinkStreams : Int32
    MSVidSink_Video = 1
    MSVidSink_Audio = 2
    MSVidSink_Other = 4
  end

  enum MSVidSegmentType : Int32
    MSVidSEG_SOURCE = 0
    MSVidSEG_XFORM = 1
    MSVidSEG_DEST = 2
  end

  enum MSVidCtlButtonstate : Int32
    MSVIDCTL_LEFT_BUTTON = 1
    MSVIDCTL_RIGHT_BUTTON = 2
    MSVIDCTL_MIDDLE_BUTTON = 4
    MSVIDCTL_X_BUTTON1 = 8
    MSVIDCTL_X_BUTTON2 = 16
    MSVIDCTL_SHIFT = 1
    MSVIDCTL_CTRL = 2
    MSVIDCTL_ALT = 4
  end

  enum DVDMenuIDConstants : Int32
    Dvdmenu_title = 2
    Dvdmenu_root = 3
    Dvdmenu_subpicture = 4
    Dvdmenu_audio = 5
    Dvdmenu_angle = 6
    Dvdmenu_chapter = 7
  end

  enum DVDFilterState : Int32
    Dvdstate_undefined = -2
    Dvdstate_unitialized = -1
    Dvdstate_stopped = 0
    Dvdstate_paused = 1
    Dvdstate_running = 2
  end

  enum DVDTextStringType : Int32
    Dvdstruct_volume = 1
    Dvdstruct_title = 2
    Dvdstruct_parentalid = 3
    Dvdstruct_partoftitle = 4
    Dvdstruct_cell = 5
    Dvdstream_audio = 16
    Dvdstream_subpicture = 17
    Dvdstream_angle = 18
    Dvdchannel_audio = 32
    Dvdgeneral_name = 48
    Dvdgeneral_comments = 49
    Dvdtitle_series = 56
    Dvdtitle_movie = 57
    Dvdtitle_video = 58
    Dvdtitle_album = 59
    Dvdtitle_song = 60
    Dvdtitle_other = 63
    Dvdtitle_sub_series = 64
    Dvdtitle_sub_movie = 65
    Dvdtitle_sub_video = 66
    Dvdtitle_sub_album = 67
    Dvdtitle_sub_song = 68
    Dvdtitle_sub_other = 71
    Dvdtitle_orig_series = 72
    Dvdtitle_orig_movie = 73
    Dvdtitle_orig_video = 74
    Dvdtitle_orig_album = 75
    Dvdtitle_orig_song = 76
    Dvdtitle_orig_other = 79
    Dvdother_scene = 80
    Dvdother_cut = 81
    Dvdother_take = 82
  end

  enum DVDSPExt : Int32
    Dvdspext_notspecified = 0
    Dvdspext_caption_normal = 1
    Dvdspext_caption_big = 2
    Dvdspext_caption_children = 3
    Dvdspext_cc_normal = 5
    Dvdspext_cc_big = 6
    Dvdspext_cc_children = 7
    Dvdspext_forced = 9
    Dvdspext_directorcomments_normal = 13
    Dvdspext_directorcomments_big = 14
    Dvdspext_directorcomments_children = 15
  end

  enum SourceSizeList : Int32
    Sslfullsize = 0
    Sslclipbyoverscan = 1
    Sslclipbycliprect = 2
  end

  enum MSViddispidList : Int32
    Dispidinputs = 0
    Dispidoutputs = 1
    Dispid_inputs = 2
    Dispid_outputs = 3
    Dispidvideorenderers = 4
    Dispidaudiorenderers = 5
    Dispidfeatures = 6
    Dispidinput = 7
    Dispidoutput = 8
    Dispidvideorenderer = 9
    Dispidaudiorenderer = 10
    Dispidselectedfeatures = 11
    Dispidview = 12
    Dispidbuild = 13
    Dispidpause = 14
    Dispidrun = 15
    Dispidstop = 16
    Dispiddecompose = 17
    Dispiddisplaysize = 18
    Dispidmaintainaspectratio = 19
    Dispidcolorkey = 20
    Dispidstatechange = 21
    Dispidgetstate = 22
    Dispidunbind = 23
    Dispidbind = 24
    Dispiddisablevideo = 25
    Dispiddisableaudio = 26
    Dispidviewnext = 27
    Dispidservicep = 28
  end

  enum DisplaySizeList : Int32
    Dsldefaultsize = 0
    Dslsourcesize = 0
    Dslhalfsourcesize = 1
    Dsldoublesourcesize = 2
    Dslfullscreen = 3
    Dslhalfscreen = 4
    Dslquarterscreen = 5
    Dslsixteenthscreen = 6
  end

  enum MSVidCtlStateList : Int32
    STATE_UNBUILT = -1
    STATE_STOP = 0
    STATE_PAUSE = 1
    STATE_PLAY = 2
  end

  enum RECORDING_TYPE : Int32
    RECORDING_TYPE_CONTENT = 0
    RECORDING_TYPE_REFERENCE = 1
  end

  enum STREAMBUFFER_ATTR_DATATYPE : Int32
    STREAMBUFFER_TYPE_DWORD = 0
    STREAMBUFFER_TYPE_STRING = 1
    STREAMBUFFER_TYPE_BINARY = 2
    STREAMBUFFER_TYPE_BOOL = 3
    STREAMBUFFER_TYPE_QWORD = 4
    STREAMBUFFER_TYPE_WORD = 5
    STREAMBUFFER_TYPE_GUID = 6
  end

  enum CROSSBAR_DEFAULT_FLAGS : Int32
    DEF_MODE_PROFILE = 1
    DEF_MODE_STREAMS = 2
  end

  enum MPEG_CURRENT_NEXT_BIT : Int32
    MPEG_SECTION_IS_NEXT = 0
    MPEG_SECTION_IS_CURRENT = 1
  end

  enum MPEG_CONTEXT_TYPE : Int32
    MPEG_CONTEXT_BCS_DEMUX = 0
    MPEG_CONTEXT_WINSOCK = 1
  end

  enum MPEG_REQUEST_TYPE : Int32
    MPEG_RQST_UNKNOWN = 0
    MPEG_RQST_GET_SECTION = 1
    MPEG_RQST_GET_SECTION_ASYNC = 2
    MPEG_RQST_GET_TABLE = 3
    MPEG_RQST_GET_TABLE_ASYNC = 4
    MPEG_RQST_GET_SECTIONS_STREAM = 5
    MPEG_RQST_GET_PES_STREAM = 6
    MPEG_RQST_GET_TS_STREAM = 7
    MPEG_RQST_START_MPE_STREAM = 8
  end

  enum VA_VIDEO_FORMAT : Int32
    VA_VIDEO_COMPONENT = 0
    VA_VIDEO_PAL = 1
    VA_VIDEO_NTSC = 2
    VA_VIDEO_SECAM = 3
    VA_VIDEO_MAC = 4
    VA_VIDEO_UNSPECIFIED = 5
  end

  enum VA_COLOR_PRIMARIES : Int32
    VA_PRIMARIES_ITU_R_BT_709 = 1
    VA_PRIMARIES_UNSPECIFIED = 2
    VA_PRIMARIES_ITU_R_BT_470_SYSTEM_M = 4
    VA_PRIMARIES_ITU_R_BT_470_SYSTEM_B_G = 5
    VA_PRIMARIES_SMPTE_170M = 6
    VA_PRIMARIES_SMPTE_240M = 7
    VA_PRIMARIES_H264_GENERIC_FILM = 8
  end

  enum VA_TRANSFER_CHARACTERISTICS : Int32
    VA_TRANSFER_CHARACTERISTICS_ITU_R_BT_709 = 1
    VA_TRANSFER_CHARACTERISTICS_UNSPECIFIED = 2
    VA_TRANSFER_CHARACTERISTICS_ITU_R_BT_470_SYSTEM_M = 4
    VA_TRANSFER_CHARACTERISTICS_ITU_R_BT_470_SYSTEM_B_G = 5
    VA_TRANSFER_CHARACTERISTICS_SMPTE_170M = 6
    VA_TRANSFER_CHARACTERISTICS_SMPTE_240M = 7
    VA_TRANSFER_CHARACTERISTICS_LINEAR = 8
    VA_TRANSFER_CHARACTERISTICS_H264_LOG_100_TO_1 = 9
    VA_TRANSFER_CHARACTERISTICS_H264_LOG_316_TO_1 = 10
  end

  enum VA_MATRIX_COEFFICIENTS : Int32
    VA_MATRIX_COEFF_H264_RGB = 0
    VA_MATRIX_COEFF_ITU_R_BT_709 = 1
    VA_MATRIX_COEFF_UNSPECIFIED = 2
    VA_MATRIX_COEFF_FCC = 4
    VA_MATRIX_COEFF_ITU_R_BT_470_SYSTEM_B_G = 5
    VA_MATRIX_COEFF_SMPTE_170M = 6
    VA_MATRIX_COEFF_SMPTE_240M = 7
    VA_MATRIX_COEFF_H264_YCgCo = 8
  end

  enum DVB_STRCONV_MODE : Int32
    STRCONV_MODE_DVB = 0
    STRCONV_MODE_DVB_EMPHASIS = 1
    STRCONV_MODE_DVB_WITHOUT_EMPHASIS = 2
    STRCONV_MODE_ISDB = 3
  end

  enum CRID_LOCATION : Int32
    CRID_LOCATION_IN_DESCRIPTOR = 0
    CRID_LOCATION_IN_CIT = 1
    CRID_LOCATION_DVB_RESERVED1 = 2
    CRID_LOCATION_DVB_RESERVED2 = 3
  end

  enum DESC_LINKAGE_TYPE : Int32
    DESC_LINKAGE_RESERVED0 = 0
    DESC_LINKAGE_INFORMATION = 1
    DESC_LINKAGE_EPG = 2
    DESC_LINKAGE_CA_REPLACEMENT = 3
    DESC_LINKAGE_COMPLETE_NET_BOUQUET_SI = 4
    DESC_LINKAGE_REPLACEMENT = 5
    DESC_LINKAGE_DATA = 6
    DESC_LINKAGE_RESERVED1 = 7
    DESC_LINKAGE_USER = 8
    DESC_LINKAGE_RESERVED2 = 255
  end

  enum ChannelChangeSpanningEvent_State : Int32
    ChannelChangeSpanningEvent_Start = 0
    ChannelChangeSpanningEvent_End = 2
  end

  enum ChannelType : Int32
    ChannelTypeNone = 0
    ChannelTypeOther = 1
    ChannelTypeVideo = 2
    ChannelTypeAudio = 4
    ChannelTypeText = 8
    ChannelTypeSubtitles = 16
    ChannelTypeCaptions = 32
    ChannelTypeSuperimpose = 64
    ChannelTypeData = 128
  end

  enum SignalAndServiceStatusSpanningEvent_State : Int32
    SignalAndServiceStatusSpanningEvent_None = -1
    SignalAndServiceStatusSpanningEvent_Clear = 0
    SignalAndServiceStatusSpanningEvent_NoTVSignal = 1
    SignalAndServiceStatusSpanningEvent_ServiceOffAir = 2
    SignalAndServiceStatusSpanningEvent_WeakTVSignal = 3
    SignalAndServiceStatusSpanningEvent_NoSubscription = 4
    SignalAndServiceStatusSpanningEvent_AllAVScrambled = 5
  end

  enum KSPROPERTY_BDA_ETHERNET_FILTER : Int32
    KSPROPERTY_BDA_ETHERNET_FILTER_MULTICAST_LIST_SIZE = 0
    KSPROPERTY_BDA_ETHERNET_FILTER_MULTICAST_LIST = 1
    KSPROPERTY_BDA_ETHERNET_FILTER_MULTICAST_MODE = 2
  end

  enum KSPROPERTY_BDA_IPv4_FILTER : Int32
    KSPROPERTY_BDA_IPv4_FILTER_MULTICAST_LIST_SIZE = 0
    KSPROPERTY_BDA_IPv4_FILTER_MULTICAST_LIST = 1
    KSPROPERTY_BDA_IPv4_FILTER_MULTICAST_MODE = 2
  end

  enum KSPROPERTY_BDA_IPv6_FILTER : Int32
    KSPROPERTY_BDA_IPv6_FILTER_MULTICAST_LIST_SIZE = 0
    KSPROPERTY_BDA_IPv6_FILTER_MULTICAST_LIST = 1
    KSPROPERTY_BDA_IPv6_FILTER_MULTICAST_MODE = 2
  end

  enum KSPROPERTY_BDA_SIGNAL_STATS : Int32
    KSPROPERTY_BDA_SIGNAL_STRENGTH = 0
    KSPROPERTY_BDA_SIGNAL_QUALITY = 1
    KSPROPERTY_BDA_SIGNAL_PRESENT = 2
    KSPROPERTY_BDA_SIGNAL_LOCKED = 3
    KSPROPERTY_BDA_SAMPLE_TIME = 4
    KSPROPERTY_BDA_SIGNAL_LOCK_CAPS = 5
    KSPROPERTY_BDA_SIGNAL_LOCK_TYPE = 6
  end

  enum BDA_LockType : Int32
    Bda_LockType_None = 0
    Bda_LockType_PLL = 1
    Bda_LockType_DecoderDemod = 2
    Bda_LockType_Complete = 128
  end

  enum KSMETHOD_BDA_CHANGE_SYNC : Int32
    KSMETHOD_BDA_START_CHANGES = 0
    KSMETHOD_BDA_CHECK_CHANGES = 1
    KSMETHOD_BDA_COMMIT_CHANGES = 2
    KSMETHOD_BDA_GET_CHANGE_STATE = 3
  end

  enum KSMETHOD_BDA_DEVICE_CONFIGURATION : Int32
    KSMETHOD_BDA_CREATE_PIN_FACTORY = 0
    KSMETHOD_BDA_DELETE_PIN_FACTORY = 1
    KSMETHOD_BDA_CREATE_TOPOLOGY = 2
  end

  enum KSPROPERTY_BDA_TOPOLOGY : Int32
    KSPROPERTY_BDA_NODE_TYPES = 0
    KSPROPERTY_BDA_PIN_TYPES = 1
    KSPROPERTY_BDA_TEMPLATE_CONNECTIONS = 2
    KSPROPERTY_BDA_NODE_METHODS = 3
    KSPROPERTY_BDA_NODE_PROPERTIES = 4
    KSPROPERTY_BDA_NODE_EVENTS = 5
    KSPROPERTY_BDA_CONTROLLING_PIN_ID = 6
    KSPROPERTY_BDA_NODE_DESCRIPTORS = 7
  end

  enum KSPROPERTY_BDA_PIN_CONTROL : Int32
    KSPROPERTY_BDA_PIN_ID = 0
    KSPROPERTY_BDA_PIN_TYPE = 1
  end

  enum KSPROPERTY_BDA_PIN_EVENT : Int32
    KSEVENT_BDA_PIN_CONNECTED = 0
    KSEVENT_BDA_PIN_DISCONNECTED = 1
  end

  enum KSPROPERTY_BDA_VOID_TRANSFORM : Int32
    KSPROPERTY_BDA_VOID_TRANSFORM_START = 0
    KSPROPERTY_BDA_VOID_TRANSFORM_STOP = 1
  end

  enum KSPROPERTY_BDA_NULL_TRANSFORM : Int32
    KSPROPERTY_BDA_NULL_TRANSFORM_START = 0
    KSPROPERTY_BDA_NULL_TRANSFORM_STOP = 1
  end

  enum KSPROPERTY_BDA_FREQUENCY_FILTER : Int32
    KSPROPERTY_BDA_RF_TUNER_FREQUENCY = 0
    KSPROPERTY_BDA_RF_TUNER_POLARITY = 1
    KSPROPERTY_BDA_RF_TUNER_RANGE = 2
    KSPROPERTY_BDA_RF_TUNER_TRANSPONDER = 3
    KSPROPERTY_BDA_RF_TUNER_BANDWIDTH = 4
    KSPROPERTY_BDA_RF_TUNER_FREQUENCY_MULTIPLIER = 5
    KSPROPERTY_BDA_RF_TUNER_CAPS = 6
    KSPROPERTY_BDA_RF_TUNER_SCAN_STATUS = 7
    KSPROPERTY_BDA_RF_TUNER_STANDARD = 8
    KSPROPERTY_BDA_RF_TUNER_STANDARD_MODE = 9
  end

  enum BDA_SignalType : Int32
    Bda_SignalType_Unknown = 0
    Bda_SignalType_Analog = 1
    Bda_SignalType_Digital = 2
  end

  enum BDA_DigitalSignalStandard : Int32
    Bda_DigitalStandard_None = 0
    Bda_DigitalStandard_DVB_T = 1
    Bda_DigitalStandard_DVB_S = 2
    Bda_DigitalStandard_DVB_C = 4
    Bda_DigitalStandard_ATSC = 8
    Bda_DigitalStandard_ISDB_T = 16
    Bda_DigitalStandard_ISDB_S = 32
    Bda_DigitalStandard_ISDB_C = 64
  end

  enum KSEVENT_BDA_TUNER : Int32
    KSEVENT_BDA_TUNER_SCAN = 0
  end

  enum KSPROPERTY_BDA_LNB_INFO : Int32
    KSPROPERTY_BDA_LNB_LOF_LOW_BAND = 0
    KSPROPERTY_BDA_LNB_LOF_HIGH_BAND = 1
    KSPROPERTY_BDA_LNB_SWITCH_FREQUENCY = 2
  end

  enum KSPROPERTY_BDA_DISEQC_COMMAND : Int32
    KSPROPERTY_BDA_DISEQC_ENABLE = 0
    KSPROPERTY_BDA_DISEQC_LNB_SOURCE = 1
    KSPROPERTY_BDA_DISEQC_USETONEBURST = 2
    KSPROPERTY_BDA_DISEQC_REPEATS = 3
    KSPROPERTY_BDA_DISEQC_SEND = 4
    KSPROPERTY_BDA_DISEQC_RESPONSE = 5
  end

  enum KSPROPERTY_BDA_DISEQC_EVENT : Int32
    KSEVENT_BDA_DISEQC_DATA_RECEIVED = 0
  end

  enum KSPROPERTY_BDA_DIGITAL_DEMODULATOR : Int32
    KSPROPERTY_BDA_MODULATION_TYPE = 0
    KSPROPERTY_BDA_INNER_FEC_TYPE = 1
    KSPROPERTY_BDA_INNER_FEC_RATE = 2
    KSPROPERTY_BDA_OUTER_FEC_TYPE = 3
    KSPROPERTY_BDA_OUTER_FEC_RATE = 4
    KSPROPERTY_BDA_SYMBOL_RATE = 5
    KSPROPERTY_BDA_SPECTRAL_INVERSION = 6
    KSPROPERTY_BDA_GUARD_INTERVAL = 7
    KSPROPERTY_BDA_TRANSMISSION_MODE = 8
    KSPROPERTY_BDA_ROLL_OFF = 9
    KSPROPERTY_BDA_PILOT = 10
    KSPROPERTY_BDA_SIGNALTIMEOUTS = 11
    KSPROPERTY_BDA_PLP_NUMBER = 12
  end

  enum KSPROPERTY_BDA_AUTODEMODULATE : Int32
    KSPROPERTY_BDA_AUTODEMODULATE_START = 0
    KSPROPERTY_BDA_AUTODEMODULATE_STOP = 1
  end

  enum KSPROPERTY_IDS_BDA_TABLE : Int32
    KSPROPERTY_BDA_TABLE_SECTION = 0
  end

  enum KSPROPERTY_BDA_PIDFILTER : Int32
    KSPROPERTY_BDA_PIDFILTER_MAP_PIDS = 0
    KSPROPERTY_BDA_PIDFILTER_UNMAP_PIDS = 1
    KSPROPERTY_BDA_PIDFILTER_LIST_PIDS = 2
  end

  enum KSPROPERTY_BDA_CA : Int32
    KSPROPERTY_BDA_ECM_MAP_STATUS = 0
    KSPROPERTY_BDA_CA_MODULE_STATUS = 1
    KSPROPERTY_BDA_CA_SMART_CARD_STATUS = 2
    KSPROPERTY_BDA_CA_MODULE_UI = 3
    KSPROPERTY_BDA_CA_SET_PROGRAM_PIDS = 4
    KSPROPERTY_BDA_CA_REMOVE_PROGRAM = 5
  end

  enum KSPROPERTY_BDA_CA_EVENT : Int32
    KSEVENT_BDA_PROGRAM_FLOW_STATUS_CHANGED = 0
    KSEVENT_BDA_CA_MODULE_STATUS_CHANGED = 1
    KSEVENT_BDA_CA_SMART_CARD_STATUS_CHANGED = 2
    KSEVENT_BDA_CA_MODULE_UI_REQUESTED = 3
  end

  enum KSMETHOD_BDA_DRM : Int32
    KSMETHOD_BDA_DRM_CURRENT = 0
    KSMETHOD_BDA_DRM_DRMSTATUS = 1
  end

  enum KSMETHOD_BDA_WMDRM : Int32
    KSMETHOD_BDA_WMDRM_STATUS = 0
    KSMETHOD_BDA_WMDRM_REVINFO = 1
    KSMETHOD_BDA_WMDRM_CRL = 2
    KSMETHOD_BDA_WMDRM_MESSAGE = 3
    KSMETHOD_BDA_WMDRM_REISSUELICENSE = 4
    KSMETHOD_BDA_WMDRM_RENEWLICENSE = 5
    KSMETHOD_BDA_WMDRM_LICENSE = 6
    KSMETHOD_BDA_WMDRM_KEYINFO = 7
  end

  enum KSMETHOD_BDA_WMDRM_TUNER : Int32
    KSMETHOD_BDA_WMDRMTUNER_CANCELCAPTURETOKEN = 0
    KSMETHOD_BDA_WMDRMTUNER_SETPIDPROTECTION = 1
    KSMETHOD_BDA_WMDRMTUNER_GETPIDPROTECTION = 2
    KSMETHOD_BDA_WMDRMTUNER_SETSYNCVALUE = 3
    KSMETHOD_BDA_WMDRMTUNER_STARTCODEPROFILE = 4
    KSMETHOD_BDA_WMDRMTUNER_PURCHASE_ENTITLEMENT = 5
  end

  enum KSMETHOD_BDA_EVENTING_SERVICE : Int32
    KSMETHOD_BDA_EVENT_DATA = 0
    KSMETHOD_BDA_EVENT_COMPLETE = 1
  end

  enum KSEVENT_BDA_EVENT_TYPE : Int32
    KSEVENT_BDA_EVENT_PENDINGEVENT = 0
  end

  enum KSMETHOD_BDA_DEBUG_SERVICE : Int32
    KSMETHOD_BDA_DEBUG_LEVEL = 0
    KSMETHOD_BDA_DEBUG_DATA = 1
  end

  enum KSMETHOD_BDA_TUNER_SERVICE : Int32
    KSMETHOD_BDA_TUNER_SETTUNER = 0
    KSMETHOD_BDA_TUNER_GETTUNERSTATE = 1
    KSMETHOD_BDA_TUNER_SIGNALNOISERATIO = 2
  end

  enum KSMETHOD_BDA_GPNV_SERVICE : Int32
    KSMETHOD_BDA_GPNV_GETVALUE = 0
    KSMETHOD_BDA_GPNV_SETVALUE = 1
    KSMETHOD_BDA_GPNV_NAMEFROMINDEX = 2
    KSMETHOD_BDA_GPNV_GETVALUEUPDATENAME = 3
  end

  enum KSMETHOD_BDA_MUX_SERVICE : Int32
    KSMETHOD_BDA_MUX_GETPIDLIST = 0
    KSMETHOD_BDA_MUX_SETPIDLIST = 1
  end

  enum KSMETHOD_BDA_SCAN_SERVICE : Int32
    KSMETHOD_BDA_SCAN_CAPABILTIES = 0
    KSMETHOD_BDA_SCANNING_STATE = 1
    KSMETHOD_BDA_SCAN_FILTER = 2
    KSMETHOD_BDA_SCAN_START = 3
    KSMETHOD_BDA_SCAN_RESUME = 4
    KSMETHOD_BDA_SCAN_STOP = 5
  end

  enum KSMETHOD_BDA_GDDS_SERVICE : Int32
    KSMETHOD_BDA_GDDS_DATATYPE = 0
    KSMETHOD_BDA_GDDS_DATA = 1
    KSMETHOD_BDA_GDDS_TUNEXMLFROMIDX = 2
    KSMETHOD_BDA_GDDS_GETSERVICES = 3
    KSMETHOD_BDA_GDDS_SERVICEFROMTUNEXML = 4
    KSMETHOD_BDA_GDDS_DATAUPDATE = 5
  end

  enum KSMETHOD_BDA_CAS_SERVICE : Int32
    KSMETHOD_BDA_CAS_CHECKENTITLEMENTTOKEN = 0
    KSMETHOD_BDA_CAS_SETCAPTURETOKEN = 1
    KSMETHOD_BDA_CAS_OPENBROADCASTMMI = 2
    KSMETHOD_BDA_CAS_CLOSEMMIDIALOG = 3
  end

  enum KSMETHOD_BDA_ISDB_CAS : Int32
    KSMETHOD_BDA_ISDBCAS_SETREQUEST = 0
    KSMETHOD_BDA_ISDBCAS_RESPONSEDATA = 1
  end

  enum KSMETHOD_BDA_TS_SELECTOR : Int32
    KSMETHOD_BDA_TS_SELECTOR_SETTSID = 0
    KSMETHOD_BDA_TS_SELECTOR_GETTSINFORMATION = 1
  end

  enum KSMETHOD_BDA_USERACTIVITY_SERVICE : Int32
    KSMETHOD_BDA_USERACTIVITY_USEREASON = 0
    KSMETHOD_BDA_USERACTIVITY_INTERVAL = 1
    KSMETHOD_BDA_USERACTIVITY_DETECTED = 2
  end

  enum VIDEOENCODER_BITRATE_MODE : Int32
    ConstantBitRate = 0
    VariableBitRateAverage = 1
    VariableBitRatePeak = 2
  end

  enum COPP_HDCP_Protection_Level : Int32
    COPP_HDCP_Level0 = 0
    COPP_HDCP_LevelMin = 0
    COPP_HDCP_Level1 = 1
    COPP_HDCP_LevelMax = 1
    COPP_HDCP_ForceDWORD = 2147483647
  end

  enum COPP_CGMSA_Protection_Level : Int32
    COPP_CGMSA_Disabled = 0
    COPP_CGMSA_LevelMin = 0
    COPP_CGMSA_CopyFreely = 1
    COPP_CGMSA_CopyNoMore = 2
    COPP_CGMSA_CopyOneGeneration = 3
    COPP_CGMSA_CopyNever = 4
    COPP_CGMSA_RedistributionControlRequired = 8
    COPP_CGMSA_LevelMax = 12
    COPP_CGMSA_ForceDWORD = 2147483647
  end

  enum COPP_ACP_Protection_Level : Int32
    COPP_ACP_Level0 = 0
    COPP_ACP_LevelMin = 0
    COPP_ACP_Level1 = 1
    COPP_ACP_Level2 = 2
    COPP_ACP_Level3 = 3
    COPP_ACP_LevelMax = 3
    COPP_ACP_ForceDWORD = 2147483647
  end

  enum COPP_TVProtectionStandard : Int32
    COPP_ProtectionStandard_Unknown = -2147483648
    COPP_ProtectionStandard_None = 0
    COPP_ProtectionStandard_IEC61880_525i = 1
    COPP_ProtectionStandard_IEC61880_2_525i = 2
    COPP_ProtectionStandard_IEC62375_625p = 4
    COPP_ProtectionStandard_EIA608B_525 = 8
    COPP_ProtectionStandard_EN300294_625i = 16
    COPP_ProtectionStandard_CEA805A_TypeA_525p = 32
    COPP_ProtectionStandard_CEA805A_TypeA_750p = 64
    COPP_ProtectionStandard_CEA805A_TypeA_1125i = 128
    COPP_ProtectionStandard_CEA805A_TypeB_525p = 256
    COPP_ProtectionStandard_CEA805A_TypeB_750p = 512
    COPP_ProtectionStandard_CEA805A_TypeB_1125i = 1024
    COPP_ProtectionStandard_ARIBTRB15_525i = 2048
    COPP_ProtectionStandard_ARIBTRB15_525p = 4096
    COPP_ProtectionStandard_ARIBTRB15_750p = 8192
    COPP_ProtectionStandard_ARIBTRB15_1125i = 16384
    COPP_ProtectionStandard_Mask = -2147450881
    COPP_ProtectionStandard_Reserved = 2147450880
  end

  enum COPP_ImageAspectRatio_EN300294 : Int32
    COPP_AspectRatio_EN300294_FullFormat4by3 = 0
    COPP_AspectRatio_EN300294_Box14by9Center = 1
    COPP_AspectRatio_EN300294_Box14by9Top = 2
    COPP_AspectRatio_EN300294_Box16by9Center = 3
    COPP_AspectRatio_EN300294_Box16by9Top = 4
    COPP_AspectRatio_EN300294_BoxGT16by9Center = 5
    COPP_AspectRatio_EN300294_FullFormat4by3ProtectedCenter = 6
    COPP_AspectRatio_EN300294_FullFormat16by9Anamorphic = 7
    COPP_AspectRatio_ForceDWORD = 2147483647
  end

  enum COPP_StatusFlags : Int32
    COPP_StatusNormal = 0
    COPP_LinkLost = 1
    COPP_RenegotiationRequired = 2
    COPP_StatusFlagsReserved = -4
  end

  enum COPP_StatusHDCPFlags : Int32
    COPP_HDCPRepeater = 1
    COPP_HDCPFlagsReserved = -2
  end

  enum COPP_ConnectorType : Int32
    COPP_ConnectorType_Unknown = -1
    COPP_ConnectorType_VGA = 0
    COPP_ConnectorType_SVideo = 1
    COPP_ConnectorType_CompositeVideo = 2
    COPP_ConnectorType_ComponentVideo = 3
    COPP_ConnectorType_DVI = 4
    COPP_ConnectorType_HDMI = 5
    COPP_ConnectorType_LVDS = 6
    COPP_ConnectorType_TMDS = 7
    COPP_ConnectorType_D_JPN = 8
    COPP_ConnectorType_Internal = -2147483648
    COPP_ConnectorType_ForceDWORD = 2147483647
  end

  enum COPP_BusType : Int32
    COPP_BusType_Unknown = 0
    COPP_BusType_PCI = 1
    COPP_BusType_PCIX = 2
    COPP_BusType_PCIExpress = 3
    COPP_BusType_AGP = 4
    COPP_BusType_Integrated = -2147483648
    COPP_BusType_ForceDWORD = 2147483647
  end

  union REGFILTER2_Anonymous_e__Union
    anonymous1 : REGFILTER2_Anonymous_e__Union_Anonymous1_e__Struct
    anonymous2 : REGFILTER2_Anonymous_e__Union_Anonymous2_e__Struct
  end
  union DVD_TitleAttributes_Anonymous_e__Union
    app_mode : DVD_TITLE_APPMODE
    title_length : DVD_HMSF_TIMECODE
  end
  union VIDEOINFO_Anonymous_e__Union
    bmi_colors : RGBQUAD[256]*
    dw_bit_masks : UInt32[3]*
    true_color_info : TRUECOLORINFO
  end
  union VIDEOINFOHEADER2_Anonymous_e__Union
    dw_control_flags : UInt32
    dw_reserved1 : UInt32
  end
  union SECTION_Header_e__Union
    s : MPEG_HEADER_BITS_MIDL
    w : UInt16
  end
  union LONG_SECTION_Header_e__Union
    s : MPEG_HEADER_BITS_MIDL
    w : UInt16
  end
  union LONG_SECTION_Version_e__Union
    s : MPEG_HEADER_VERSION_BITS_MIDL
    b : UInt8
  end
  union DSMCC_SECTION_Header_e__Union
    s : MPEG_HEADER_BITS_MIDL
    w : UInt16
  end
  union DSMCC_SECTION_Version_e__Union
    s : MPEG_HEADER_VERSION_BITS_MIDL
    b : UInt8
  end
  union MPEG2_FILTER2_Anonymous_e__Union
    anonymous : MPEG2_FILTER2_Anonymous_e__Union_Anonymous_e__Struct
    b_version1_bytes : UInt8[124]*
  end
  union MPEG_CONTEXT_U_e__Union
    demux : MPEG_BCS_DEMUX
    winsock : MPEG_WINSOCK
  end
  union TRANSPORT_PROPERTIES_Fields_e__Union
    others : TRANSPORT_PROPERTIES_Fields_e__Union_Others
    value : Int64
  end
  union KSM_BDA_PIN_Anonymous_e__Union
    pin_id : UInt32
    pin_type : UInt32
  end
  union KSM_BDA_PIN_PAIR_Anonymous1_e__Union
    input_pin_id : UInt32
    input_pin_type : UInt32
  end
  union KSM_BDA_PIN_PAIR_Anonymous2_e__Union
    output_pin_id : UInt32
    output_pin_type : UInt32
  end
  union ChannelInfo_Anonymous_e__Union
    dvb : ChannelInfo_Anonymous_e__Union_DVB_e__Struct
    dc : ChannelInfo_Anonymous_e__Union_DC_e__Struct
    atsc : ChannelInfo_Anonymous_e__Union_ATSC_e__Struct
  end

  struct AMVPSIZE
    dw_width : UInt32
    dw_height : UInt32
  end
  struct AMVPDIMINFO
    dw_field_width : UInt32
    dw_field_height : UInt32
    dw_vbi_width : UInt32
    dw_vbi_height : UInt32
    rc_valid_region : RECT
  end
  struct AMVPDATAINFO
    dw_size : UInt32
    dw_microseconds_per_field : UInt32
    amvp_dim_info : AMVPDIMINFO
    dw_pict_aspect_ratio_x : UInt32
    dw_pict_aspect_ratio_y : UInt32
    b_enable_double_clock : LibC::BOOL
    b_enable_vact : LibC::BOOL
    b_data_is_interlaced : LibC::BOOL
    l_half_lines_odd : Int32
    b_field_polarity_inverted : LibC::BOOL
    dw_num_lines_in_vref : UInt32
    l_half_lines_even : Int32
    dw_reserved1 : UInt32
  end
  struct AM_MEDIA_TYPE
    majortype : Guid
    subtype : Guid
    b_fixed_size_samples : LibC::BOOL
    b_temporal_compression : LibC::BOOL
    l_sample_size : UInt32
    formattype : Guid
    p_unk : IUnknown
    cb_format : UInt32
    pb_format : UInt8*
  end
  struct ALLOCATOR_PROPERTIES
    c_buffers : Int32
    cb_buffer : Int32
    cb_align : Int32
    cb_prefix : Int32
  end
  struct PIN_INFO
    p_filter : IBaseFilter
    dir : PIN_DIRECTION
    ach_name : Char[128]*
  end
  struct FILTER_INFO
    ach_name : Char[128]*
    p_graph : IFilterGraph
  end
  struct AM_SAMPLE2_PROPERTIES
    cb_data : UInt32
    dw_type_specific_flags : UInt32
    dw_sample_flags : UInt32
    l_actual : Int32
    t_start : Int64
    t_stop : Int64
    dw_stream_id : UInt32
    p_media_type : AM_MEDIA_TYPE*
    pb_buffer : UInt8*
    cb_buffer : Int32
  end
  struct REGFILTER
    clsid : Guid
    name : LibC::LPWSTR
  end
  struct REGPINTYPES
    cls_major_type : Guid*
    cls_minor_type : Guid*
  end
  struct REGFILTERPINS
    str_name : LibC::LPWSTR
    b_rendered : LibC::BOOL
    b_output : LibC::BOOL
    b_zero : LibC::BOOL
    b_many : LibC::BOOL
    cls_connects_to_filter : Guid*
    str_connects_to_pin : LibC::LPWSTR
    n_media_types : UInt32
    lp_media_type : REGPINTYPES*
  end
  struct REGPINMEDIUM
    cls_medium : Guid
    dw1 : UInt32
    dw2 : UInt32
  end
  struct REGFILTERPINS2
    dw_flags : UInt32
    c_instances : UInt32
    n_media_types : UInt32
    lp_media_type : REGPINTYPES*
    n_mediums : UInt32
    lp_medium : REGPINMEDIUM*
    cls_pin_category : Guid*
  end
  struct REGFILTER2
    dw_version : UInt32
    dw_merit : UInt32
    anonymous : REGFILTER2_Anonymous_e__Union
  end
  struct REGFILTER2_Anonymous_e__Union_Anonymous1_e__Struct
    c_pins : UInt32
    rg_pins : REGFILTERPINS*
  end
  struct REGFILTER2_Anonymous_e__Union_Anonymous2_e__Struct
    c_pins2 : UInt32
    rg_pins2 : REGFILTERPINS2*
  end
  struct Quality
    type : QualityMessageType
    proportion : Int32
    late : Int64
    time_stamp : Int64
  end
  struct COLORKEY
    key_type : UInt32
    palette_index : UInt32
    low_color_value : UInt32
    high_color_value : UInt32
  end
  struct AM_STREAM_INFO
    t_start : Int64
    t_stop : Int64
    dw_start_cookie : UInt32
    dw_stop_cookie : UInt32
    dw_flags : UInt32
  end
  struct VIDEO_STREAM_CONFIG_CAPS
    guid : Guid
    video_standard : UInt32
    input_size : SIZE
    min_cropping_size : SIZE
    max_cropping_size : SIZE
    crop_granularity_x : Int32
    crop_granularity_y : Int32
    crop_align_x : Int32
    crop_align_y : Int32
    min_output_size : SIZE
    max_output_size : SIZE
    output_granularity_x : Int32
    output_granularity_y : Int32
    stretch_taps_x : Int32
    stretch_taps_y : Int32
    shrink_taps_x : Int32
    shrink_taps_y : Int32
    min_frame_interval : Int64
    max_frame_interval : Int64
    min_bits_per_second : Int32
    max_bits_per_second : Int32
  end
  struct AUDIO_STREAM_CONFIG_CAPS
    guid : Guid
    minimum_channels : UInt32
    maximum_channels : UInt32
    channels_granularity : UInt32
    minimum_bits_per_sample : UInt32
    maximum_bits_per_sample : UInt32
    bits_per_sample_granularity : UInt32
    minimum_sample_frequency : UInt32
    maximum_sample_frequency : UInt32
    sample_frequency_granularity : UInt32
  end
  struct DVINFO
    dw_dva_aux_src : UInt32
    dw_dva_aux_ctl : UInt32
    dw_dva_aux_src1 : UInt32
    dw_dva_aux_ctl1 : UInt32
    dw_dvv_aux_src : UInt32
    dw_dvv_aux_ctl : UInt32
    dw_dv_reserved : UInt32[2]*
  end
  struct STREAM_ID_MAP
    stream_id : UInt32
    dw_media_sample_content : UInt32
    ul_substream_filter_value : UInt32
    i_data_offset : Int32
  end
  struct AMCOPPSignature
    signature : UInt8[256]*
  end
  struct AMCOPPCommand
    mac_kdi : Guid
    guid_command_id : Guid
    dw_sequence : UInt32
    cb_size_data : UInt32
    command_data : UInt8[4056]*
  end
  struct AMCOPPStatusInput
    r_app : Guid
    guid_status_request_id : Guid
    dw_sequence : UInt32
    cb_size_data : UInt32
    status_data : UInt8[4056]*
  end
  struct AMCOPPStatusOutput
    mac_kdi : Guid
    cb_size_data : UInt32
    copp_status : UInt8[4076]*
  end
  struct VMRPRESENTATIONINFO
    dw_flags : UInt32
    lp_surf : IDirectDrawSurface7
    rt_start : Int64
    rt_end : Int64
    sz_aspect_ratio : SIZE
    rc_src : RECT
    rc_dst : RECT
    dw_type_specific_flags : UInt32
    dw_interlace_flags : UInt32
  end
  struct VMRALLOCATIONINFO
    dw_flags : UInt32
    lp_hdr : BITMAPINFOHEADER*
    lp_pix_fmt : DDPIXELFORMAT*
    sz_aspect_ratio : SIZE
    dw_min_buffers : UInt32
    dw_max_buffers : UInt32
    dw_interlace_flags : UInt32
    sz_native_size : SIZE
  end
  struct NORMALIZEDRECT
    left : Float32
    top : Float32
    right : Float32
    bottom : Float32
  end
  struct VMRGUID
    p_guid : Guid*
    guid : Guid
  end
  struct VMRMONITORINFO
    guid : VMRGUID
    rc_monitor : RECT
    h_mon : HMONITOR
    dw_flags : UInt32
    sz_device : Char[32]*
    sz_description : Char[256]*
    li_driver_version : LARGE_INTEGER
    dw_vendor_id : UInt32
    dw_device_id : UInt32
    dw_sub_sys_id : UInt32
    dw_revision : UInt32
  end
  struct VMRFrequency
    dw_numerator : UInt32
    dw_denominator : UInt32
  end
  struct VMRVideoDesc
    dw_size : UInt32
    dw_sample_width : UInt32
    dw_sample_height : UInt32
    single_field_per_sample : LibC::BOOL
    dw_four_cc : UInt32
    input_sample_freq : VMRFrequency
    output_frame_freq : VMRFrequency
  end
  struct VMRDeinterlaceCaps
    dw_size : UInt32
    dw_num_previous_output_frames : UInt32
    dw_num_forward_ref_samples : UInt32
    dw_num_backward_ref_samples : UInt32
    deinterlace_technology : VMRDeinterlaceTech
  end
  struct VMRALPHABITMAP
    dw_flags : UInt32
    hdc : HDC
    p_dds : IDirectDrawSurface7
    r_src : RECT
    r_dest : NORMALIZEDRECT
    f_alpha : Float32
    clr_src_key : UInt32
  end
  struct VMRVIDEOSTREAMINFO
    pdds_video_surface : IDirectDrawSurface7
    dw_width : UInt32
    dw_height : UInt32
    dw_strm_id : UInt32
    f_alpha : Float32
    dd_clr_key : DDCOLORKEY
    r_normal : NORMALIZEDRECT
  end
  struct DVD_ATR
    ul_cat : UInt32
    pb_atri : UInt8[768]*
  end
  struct DVD_TIMECODE
    _bitfield : UInt32
  end
  struct DVD_HMSF_TIMECODE
    b_hours : UInt8
    b_minutes : UInt8
    b_seconds : UInt8
    b_frames : UInt8
  end
  struct DVD_PLAYBACK_LOCATION2
    title_num : UInt32
    chapter_num : UInt32
    time_code : DVD_HMSF_TIMECODE
    time_code_flags : UInt32
  end
  struct DVD_PLAYBACK_LOCATION
    title_num : UInt32
    chapter_num : UInt32
    time_code : UInt32
  end
  struct DVD_AudioAttributes
    app_mode : DVD_AUDIO_APPMODE
    app_mode_data : UInt8
    audio_format : DVD_AUDIO_FORMAT
    language : UInt32
    language_extension : DVD_AUDIO_LANG_EXT
    f_has_multichannel_info : LibC::BOOL
    dw_frequency : UInt32
    b_quantization : UInt8
    b_number_of_channels : UInt8
    dw_reserved : UInt32[2]*
  end
  struct DVD_MUA_MixingInfo
    f_mix_to0 : LibC::BOOL
    f_mix_to1 : LibC::BOOL
    f_mix0_in_phase : LibC::BOOL
    f_mix1_in_phase : LibC::BOOL
    dw_speaker_position : UInt32
  end
  struct DVD_MUA_Coeff
    log2_alpha : Float64
    log2_beta : Float64
  end
  struct DVD_MultichannelAudioAttributes
    info : DVD_MUA_MixingInfo[8]*
    coeff : DVD_MUA_Coeff[8]*
  end
  struct DVD_KaraokeAttributes
    b_version : UInt8
    f_master_of_ceremonies_in_guide_vocal1 : LibC::BOOL
    f_duet : LibC::BOOL
    channel_assignment : DVD_KARAOKE_ASSIGNMENT
    w_channel_contents : UInt16[8]*
  end
  struct DVD_VideoAttributes
    f_panscan_permitted : LibC::BOOL
    f_letterbox_permitted : LibC::BOOL
    ul_aspect_x : UInt32
    ul_aspect_y : UInt32
    ul_frame_rate : UInt32
    ul_frame_height : UInt32
    compression : DVD_VIDEO_COMPRESSION
    f_line21_field1_in_gop : LibC::BOOL
    f_line21_field2_in_gop : LibC::BOOL
    ul_source_resolution_x : UInt32
    ul_source_resolution_y : UInt32
    f_is_source_letterboxed : LibC::BOOL
    f_is_film_mode : LibC::BOOL
  end
  struct DVD_SubpictureAttributes
    type : DVD_SUBPICTURE_TYPE
    coding_mode : DVD_SUBPICTURE_CODING
    language : UInt32
    language_extension : DVD_SUBPICTURE_LANG_EXT
  end
  struct DVD_TitleAttributes
    anonymous : DVD_TitleAttributes_Anonymous_e__Union
    video_attributes : DVD_VideoAttributes
    ul_number_of_audio_streams : UInt32
    audio_attributes : DVD_AudioAttributes[8]*
    multichannel_audio_attributes : DVD_MultichannelAudioAttributes[8]*
    ul_number_of_subpicture_streams : UInt32
    subpicture_attributes : DVD_SubpictureAttributes[32]*
  end
  struct DVD_MenuAttributes
    f_compatible_region : LibC::BOOL[8]*
    video_attributes : DVD_VideoAttributes
    f_audio_present : LibC::BOOL
    audio_attributes : DVD_AudioAttributes
    f_subpicture_present : LibC::BOOL
    subpicture_attributes : DVD_SubpictureAttributes
  end
  struct DVD_DECODER_CAPS
    dw_size : UInt32
    dw_audio_caps : UInt32
    d_fwd_max_rate_video : Float64
    d_fwd_max_rate_audio : Float64
    d_fwd_max_rate_sp : Float64
    d_bwd_max_rate_video : Float64
    d_bwd_max_rate_audio : Float64
    d_bwd_max_rate_sp : Float64
    dw_res1 : UInt32
    dw_res2 : UInt32
    dw_res3 : UInt32
    dw_res4 : UInt32
  end
  struct AM_DVD_RENDERSTATUS
    hr_vpe_status : HRESULT
    b_dvd_vol_invalid : LibC::BOOL
    b_dvd_vol_unknown : LibC::BOOL
    b_no_line21_in : LibC::BOOL
    b_no_line21_out : LibC::BOOL
    i_num_streams : Int32
    i_num_streams_failed : Int32
    dw_failed_streams_flag : UInt32
  end
  struct BDA_TEMPLATE_CONNECTION
    from_node_type : UInt32
    from_node_pin_type : UInt32
    to_node_type : UInt32
    to_node_pin_type : UInt32
  end
  struct BDA_TEMPLATE_PIN_JOINT
    uli_template_connection : UInt32
    ulc_instances_max : UInt32
  end
  struct KS_BDA_FRAME_INFO
    extended_header_size : UInt32
    dw_frame_flags : UInt32
    ul_event : UInt32
    ul_channel_number : UInt32
    ul_subchannel_number : UInt32
    ul_reason : UInt32
  end
  struct BDA_ETHERNET_ADDRESS
    rgb_address : UInt8[6]*
  end
  struct BDA_ETHERNET_ADDRESS_LIST
    ulc_addresses : UInt32
    rg_addressl : BDA_ETHERNET_ADDRESS[0]*
  end
  struct BDA_IPv4_ADDRESS
    rgb_address : UInt8[4]*
  end
  struct BDA_IPv4_ADDRESS_LIST
    ulc_addresses : UInt32
    rg_addressl : BDA_IPv4_ADDRESS[0]*
  end
  struct BDA_IPv6_ADDRESS
    rgb_address : UInt8[6]*
  end
  struct BDA_IPv6_ADDRESS_LIST
    ulc_addresses : UInt32
    rg_addressl : BDA_IPv6_ADDRESS[0]*
  end
  struct BDANODE_DESCRIPTOR
    ul_bda_node_type : UInt32
    guid_function : Guid
    guid_name : Guid
  end
  struct BDA_TABLE_SECTION
    ul_primary_section_id : UInt32
    ul_secondary_section_id : UInt32
    ulcb_section_length : UInt32
    argb_section_data : UInt32[0]*
  end
  struct BDA_DISEQC_SEND
    ul_request_id : UInt32
    ul_packet_length : UInt32
    argb_packet_data : UInt8[8]*
  end
  struct BDA_DISEQC_RESPONSE
    ul_request_id : UInt32
    ul_packet_length : UInt32
    argb_packet_data : UInt8[8]*
  end
  struct PID_MAP
    ul_pid : UInt32
    media_sample_content : MEDIA_SAMPLE_CONTENT
  end
  struct BDA_PID_MAP
    media_sample_content : MEDIA_SAMPLE_CONTENT
    ulc_pi_ds : UInt32
    aul_pi_ds : UInt32[0]*
  end
  struct BDA_PID_UNMAP
    ulc_pi_ds : UInt32
    aul_pi_ds : UInt32[0]*
  end
  struct BDA_CA_MODULE_UI
    ul_format : UInt32
    ulbc_desc : UInt32
    ul_desc : UInt32[0]*
  end
  struct BDA_PROGRAM_PID_LIST
    ul_program_number : UInt32
    ulc_pi_ds : UInt32
    ul_pid : UInt32[0]*
  end
  struct BDA_DRM_DRMSTATUS
    l_result : Int32
    dr_muuid : Guid
    ul_drm_uuid_list_string_size : UInt32
    argb_drm_uuid_list_string : Guid[0]*
  end
  struct BDA_WMDRM_STATUS
    l_result : Int32
    ul_max_capture_token_size : UInt32
    u_max_streaming_pid : UInt32
    ul_max_license : UInt32
    ul_min_security_level : UInt32
    ul_rev_info_sequence_number : UInt32
    ul_rev_info_issued_time : UInt64
    ul_rev_list_version : UInt32
    ul_rev_info_ttl : UInt32
    ul_state : UInt32
  end
  struct BDA_WMDRM_KEYINFOLIST
    l_result : Int32
    ul_keyuuid_buffer_len : UInt32
    arg_keyuuid_buffer : Guid[0]*
  end
  struct BDA_BUFFER
    l_result : Int32
    ul_buffer_size : UInt32
    argb_buffer : UInt8[0]*
  end
  struct BDA_WMDRM_RENEWLICENSE
    l_result : Int32
    ul_descramble_status : UInt32
    ul_xmr_license_output_length : UInt32
    argb_xmr_licence_output_buffer : UInt8[0]*
  end
  struct BDA_WMDRMTUNER_PIDPROTECTION
    l_result : Int32
    uuid_key_id : Guid
  end
  struct BDA_WMDRMTUNER_PURCHASEENTITLEMENT
    l_result : Int32
    ul_descramble_status : UInt32
    ul_capture_token_length : UInt32
    argb_capture_token_buffer : UInt8[0]*
  end
  struct BDA_TUNER_TUNERSTATE
    l_result : Int32
    ul_tune_length : UInt32
    argb_tune_data : UInt8[0]*
  end
  struct BDA_TUNER_DIAGNOSTICS
    l_result : Int32
    ul_signal_level : UInt32
    ul_signal_level_quality : UInt32
    ul_signal_noise_ratio : UInt32
  end
  struct BDA_STRING
    l_result : Int32
    ul_string_size : UInt32
    argb_string : UInt8[0]*
  end
  struct BDA_SCAN_CAPABILTIES
    l_result : Int32
    ul64_analog_standards_supported : UInt64
  end
  struct BDA_SCAN_STATE
    l_result : Int32
    ul_signal_lock : UInt32
    ul_seconds_left : UInt32
    ul_current_frequency : UInt32
  end
  struct BDA_SCAN_START
    l_result : Int32
    lower_frequency : UInt32
    higer_frequency : UInt32
  end
  struct BDA_GDDS_DATATYPE
    l_result : Int32
    uuid_data_type : Guid
  end
  struct BDA_GDDS_DATA
    l_result : Int32
    ul_data_length : UInt32
    ul_percentage_progress : UInt32
    argb_data : UInt8[0]*
  end
  struct BDA_USERACTIVITY_INTERVAL
    l_result : Int32
    ul_activity_interval : UInt32
  end
  struct BDA_CAS_CHECK_ENTITLEMENTTOKEN
    l_result : Int32
    ul_descramble_status : UInt32
  end
  struct BDA_CAS_CLOSE_MMIDIALOG
    l_result : Int32
    session_result : UInt32
  end
  struct BDA_CAS_REQUESTTUNERDATA
    uc_request_priority : UInt8
    uc_request_reason : UInt8
    uc_request_consequences : UInt8
    ul_estimated_time : UInt32
  end
  struct BDA_CAS_OPENMMIDATA
    ul_dialog_number : UInt32
    ul_dialog_request : UInt32
    uuid_dialog_type : Guid
    us_dialog_data_length : UInt16
    argb_dialog_data : UInt8[0]*
  end
  struct BDA_CAS_CLOSEMMIDATA
    ul_dialog_number : UInt32
  end
  struct BDA_ISDBCAS_REQUESTHEADER
    b_instruction : UInt8
    b_reserved : UInt8[3]*
    ul_data_length : UInt32
    argb_isdb_command : UInt8[0]*
  end
  struct BDA_ISDBCAS_RESPONSEDATA
    l_result : Int32
    ul_request_id : UInt32
    ul_isdb_status : UInt32
    ul_isdb_data_size : UInt32
    argb_isdb_command_data : UInt8[0]*
  end
  struct BDA_ISDBCAS_EMG_REQ
    b_cla : UInt8
    b_ins : UInt8
    b_p1 : UInt8
    b_p2 : UInt8
    b_lc : UInt8
    b_card_id : UInt8[6]*
    b_protocol : UInt8
    b_ca_broadcaster_group_id : UInt8
    b_message_control : UInt8
    b_message_code : UInt8[0]*
  end
  struct BDA_MUX_PIDLISTITEM
    us_pid_number : UInt16
    us_program_number : UInt16
    e_pid_type : MUX_PID_TYPE
  end
  struct BDA_TS_SELECTORINFO
    b_ts_infolength : UInt8
    b_reserved : UInt8[2]*
    guid_network_type : Guid
    b_tsid_count : UInt8
    us_tsid : UInt16[0]*
  end
  struct BDA_TS_SELECTORINFO_ISDBS_EXT
    b_tmcc : UInt8[48]*
  end
  struct BDA_DVBT2_L1_SIGNALLING_DATA
    l1_pre_type : UInt8
    l1_pre_bwt_s1_s2 : UInt8
    l1_pre_repetition_guard_papr : UInt8
    l1_pre_mod_cod_fec : UInt8
    l1_pre_postsize_info_pilot : UInt8[5]*
    l1_pre_tx_id_avail : UInt8
    l1_pre_cell_id : UInt8[2]*
    l1_pre_network_id : UInt8[2]*
    l1_pre_t2_system_id : UInt8[2]*
    l1_pre_num_t2_frames : UInt8
    l1_pre_num_data_regenflag_l1_postext : UInt8[2]*
    l1_pre_numrf_currentrf_reserved : UInt8[2]*
    l1_pre_crc32 : UInt8[4]*
    l1_post_data : UInt8[0]*
  end
  struct BDA_RATING_PINRESET
    b_pin_length : UInt8
    argb_new_pin : UInt8[0]*
  end
  struct MPEG2_TRANSPORT_STRIDE
    dw_offset : UInt32
    dw_packet_length : UInt32
    dw_stride : UInt32
  end
  struct BDA_SIGNAL_TIMEOUTS
    ul_carrier_timeout_ms : UInt32
    ul_scanning_timeout_ms : UInt32
    ul_tuning_timeout_ms : UInt32
  end
  struct EALocationCodeType
    location_code_scheme : LocationCodeSchemeType
    state_code : UInt8
    county_subdivision : UInt8
    county_code : UInt16
  end
  struct SmartCardApplication
    application_type : ApplicationTypeType
    application_version : UInt16
    pbstr_application_name : UInt8*
    pbstr_application_url : UInt8*
  end
  struct AMVAUncompBufferInfo
    dw_min_num_surfaces : UInt32
    dw_max_num_surfaces : UInt32
    dd_uncomp_pixel_format : DDPIXELFORMAT
  end
  struct AMVAUncompDataInfo
    dw_uncomp_width : UInt32
    dw_uncomp_height : UInt32
    dd_uncomp_pixel_format : DDPIXELFORMAT
  end
  struct AMVAInternalMemInfo
    dw_scratch_mem_alloc : UInt32
  end
  struct AMVACompBufferInfo
    dw_num_comp_buffers : UInt32
    dw_width_to_create : UInt32
    dw_height_to_create : UInt32
    dw_bytes_to_allocate : UInt32
    dd_comp_caps : DDSCAPS2
    dd_pixel_format : DDPIXELFORMAT
  end
  struct AMVABeginFrameInfo
    dw_dest_surface_index : UInt32
    p_input_data : Void*
    dw_size_input_data : UInt32
    p_output_data : Void*
    dw_size_output_data : UInt32
  end
  struct AMVAEndFrameInfo
    dw_size_misc_data : UInt32
    p_misc_data : Void*
  end
  struct AMVABUFFERINFO
    dw_type_index : UInt32
    dw_buffer_index : UInt32
    dw_data_offset : UInt32
    dw_data_size : UInt32
  end
  struct AM_WST_PAGE
    dw_page_nr : UInt32
    dw_sub_page_nr : UInt32
    puc_page_data : UInt8*
  end
  struct TRUECOLORINFO
    dw_bit_masks : UInt32[3]*
    bmi_colors : RGBQUAD[256]*
  end
  struct VIDEOINFOHEADER
    rc_source : RECT
    rc_target : RECT
    dw_bit_rate : UInt32
    dw_bit_error_rate : UInt32
    avg_time_per_frame : Int64
    bmi_header : BITMAPINFOHEADER
  end
  struct VIDEOINFO
    rc_source : RECT
    rc_target : RECT
    dw_bit_rate : UInt32
    dw_bit_error_rate : UInt32
    avg_time_per_frame : Int64
    bmi_header : BITMAPINFOHEADER
    anonymous : VIDEOINFO_Anonymous_e__Union
  end
  struct MPEG1VIDEOINFO
    hdr : VIDEOINFOHEADER
    dw_start_time_code : UInt32
    cb_sequence_header : UInt32
    b_sequence_header : UInt8[0]*
  end
  struct ANALOGVIDEOINFO
    rc_source : RECT
    rc_target : RECT
    dw_active_width : UInt32
    dw_active_height : UInt32
    avg_time_per_frame : Int64
  end
  struct AM_FRAMESTEP_STEP
    dw_frames_to_step : UInt32
  end
  struct AM_MPEGSTREAMTYPE
    dw_stream_id : UInt32
    dw_reserved : UInt32
    mt : AM_MEDIA_TYPE
    b_format : UInt8[0]*
  end
  struct AM_MPEGSYSTEMTYPE
    dw_bit_rate : UInt32
    c_streams : UInt32
    streams : AM_MPEGSTREAMTYPE[0]*
  end
  struct VMR9PresentationInfo
    dw_flags : UInt32
    lp_surf : IDirect3DSurface9
    rt_start : Int64
    rt_end : Int64
    sz_aspect_ratio : SIZE
    rc_src : RECT
    rc_dst : RECT
    dw_reserved1 : UInt32
    dw_reserved2 : UInt32
  end
  struct VMR9AllocationInfo
    dw_flags : UInt32
    dw_width : UInt32
    dw_height : UInt32
    format : D3DFORMAT
    pool : D3DPOOL
    min_buffers : UInt32
    sz_aspect_ratio : SIZE
    sz_native_size : SIZE
  end
  struct VMR9NormalizedRect
    left : Float32
    top : Float32
    right : Float32
    bottom : Float32
  end
  struct VMR9ProcAmpControl
    dw_size : UInt32
    dw_flags : UInt32
    brightness : Float32
    contrast : Float32
    hue : Float32
    saturation : Float32
  end
  struct VMR9ProcAmpControlRange
    dw_size : UInt32
    dw_property : VMR9ProcAmpControlFlags
    min_value : Float32
    max_value : Float32
    default_value : Float32
    step_size : Float32
  end
  struct VMR9AlphaBitmap
    dw_flags : UInt32
    hdc : HDC
    p_dds : IDirect3DSurface9
    r_src : RECT
    r_dest : VMR9NormalizedRect
    f_alpha : Float32
    clr_src_key : UInt32
    dw_filter_mode : UInt32
  end
  struct VMR9MonitorInfo
    u_dev_id : UInt32
    rc_monitor : RECT
    h_mon : HMONITOR
    dw_flags : UInt32
    sz_device : Char[32]*
    sz_description : Char[512]*
    li_driver_version : LARGE_INTEGER
    dw_vendor_id : UInt32
    dw_device_id : UInt32
    dw_sub_sys_id : UInt32
    dw_revision : UInt32
  end
  struct VMR9Frequency
    dw_numerator : UInt32
    dw_denominator : UInt32
  end
  struct VMR9VideoDesc
    dw_size : UInt32
    dw_sample_width : UInt32
    dw_sample_height : UInt32
    sample_format : VMR9_SampleFormat
    dw_four_cc : UInt32
    input_sample_freq : VMR9Frequency
    output_frame_freq : VMR9Frequency
  end
  struct VMR9DeinterlaceCaps
    dw_size : UInt32
    dw_num_previous_output_frames : UInt32
    dw_num_forward_ref_samples : UInt32
    dw_num_backward_ref_samples : UInt32
    deinterlace_technology : VMR9DeinterlaceTech
  end
  struct VMR9VideoStreamInfo
    pdds_video_surface : IDirect3DSurface9
    dw_width : UInt32
    dw_height : UInt32
    dw_strm_id : UInt32
    f_alpha : Float32
    r_normal : VMR9NormalizedRect
    rt_start : Int64
    rt_end : Int64
    sample_format : VMR9_SampleFormat
  end
  struct RIFFCHUNK
    fcc : UInt32
    cb : UInt32
  end
  struct RIFFLIST
    fcc : UInt32
    cb : UInt32
    fcc_list_type : UInt32
  end
  struct AVIMAINHEADER
    fcc : UInt32
    cb : UInt32
    dw_micro_sec_per_frame : UInt32
    dw_max_bytes_per_sec : UInt32
    dw_padding_granularity : UInt32
    dw_flags : UInt32
    dw_total_frames : UInt32
    dw_initial_frames : UInt32
    dw_streams : UInt32
    dw_suggested_buffer_size : UInt32
    dw_width : UInt32
    dw_height : UInt32
    dw_reserved : UInt32[4]*
  end
  struct AVIEXTHEADER
    fcc : UInt32
    cb : UInt32
    dw_grand_frames : UInt32
    dw_future : UInt32[61]*
  end
  struct AVISTREAMHEADER
    fcc : UInt32
    cb : UInt32
    fcc_type : UInt32
    fcc_handler : UInt32
    dw_flags : UInt32
    w_priority : UInt16
    w_language : UInt16
    dw_initial_frames : UInt32
    dw_scale : UInt32
    dw_rate : UInt32
    dw_start : UInt32
    dw_length : UInt32
    dw_suggested_buffer_size : UInt32
    dw_quality : UInt32
    dw_sample_size : UInt32
    rc_frame : AVISTREAMHEADER_rcFrame_e__Struct
  end
  struct AVISTREAMHEADER_rcFrame_e__Struct
    left : Int16
    top : Int16
    right : Int16
    bottom : Int16
  end
  struct AVIOLDINDEX
    fcc : UInt32
    cb : UInt32
    a_index : AVIOLDINDEX_avioldindex_entry[0]*
  end
  struct AVIOLDINDEX_avioldindex_entry
    dw_chunk_id : UInt32
    dw_flags : UInt32
    dw_offset : UInt32
    dw_size : UInt32
  end
  struct TIMECODEDATA
    time : TIMECODE
    dw_smpt_eflags : UInt32
    dw_user : UInt32
  end
  struct AVIMETAINDEX
    fcc : UInt32
    cb : UInt32
    w_longs_per_entry : UInt16
    b_index_sub_type : UInt8
    b_index_type : UInt8
    n_entries_in_use : UInt32
    dw_chunk_id : UInt32
    dw_reserved : UInt32[3]*
    adw_index : UInt32[0]*
  end
  struct AVISUPERINDEX
    fcc : UInt32
    cb : UInt32
    w_longs_per_entry : UInt16
    b_index_sub_type : UInt8
    b_index_type : UInt8
    n_entries_in_use : UInt32
    dw_chunk_id : UInt32
    dw_reserved : UInt32[3]*
    a_index : AVISUPERINDEX_avisuperindex_entry[1022]*
  end
  struct AVISUPERINDEX_avisuperindex_entry
    qw_offset : UInt64
    dw_size : UInt32
    dw_duration : UInt32
  end
  struct AVISTDINDEX_ENTRY
    dw_offset : UInt32
    dw_size : UInt32
  end
  struct AVISTDINDEX
    fcc : UInt32
    cb : UInt32
    w_longs_per_entry : UInt16
    b_index_sub_type : UInt8
    b_index_type : UInt8
    n_entries_in_use : UInt32
    dw_chunk_id : UInt32
    qw_base_offset : UInt64
    dw_reserved_3 : UInt32
    a_index : AVISTDINDEX_ENTRY[2044]*
  end
  struct AVITIMEDINDEX_ENTRY
    dw_offset : UInt32
    dw_size : UInt32
    dw_duration : UInt32
  end
  struct Avitimedindex
    fcc : UInt32
    cb : UInt32
    w_longs_per_entry : UInt16
    b_index_sub_type : UInt8
    b_index_type : UInt8
    n_entries_in_use : UInt32
    dw_chunk_id : UInt32
    qw_base_offset : UInt64
    dw_reserved_3 : UInt32
    a_index : AVITIMEDINDEX_ENTRY[1362]*
    adw_trailing_fill : UInt32[2734]*
  end
  struct AVITIMECODEINDEX
    fcc : UInt32
    cb : UInt32
    w_longs_per_entry : UInt16
    b_index_sub_type : UInt8
    b_index_type : UInt8
    n_entries_in_use : UInt32
    dw_chunk_id : UInt32
    dw_reserved : UInt32[3]*
    a_index : TIMECODEDATA[1022]*
  end
  struct AVITCDLINDEX_ENTRY
    dw_tick : UInt32
    time : TIMECODE
    dw_smpt_eflags : UInt32
    dw_user : UInt32
    sz_reel_id : Int8[12]*
  end
  struct Avitcdlindex
    fcc : UInt32
    cb : UInt32
    w_longs_per_entry : UInt16
    b_index_sub_type : UInt8
    b_index_type : UInt8
    n_entries_in_use : UInt32
    dw_chunk_id : UInt32
    dw_reserved : UInt32[3]*
    a_index : AVITCDLINDEX_ENTRY[584]*
    adw_trailing_fill : UInt32[3512]*
  end
  struct AVIFIELDINDEX
    fcc : UInt32
    cb : UInt32
    w_longs_per_entry : UInt16
    b_index_sub_type : UInt8
    b_index_type : UInt8
    n_entries_in_use : UInt32
    dw_chunk_id : UInt32
    qw_base_offset : UInt64
    dw_reserved3 : UInt32
    a_index : AVIFIELDINDEX_avifieldindex_entry[0]*
  end
  struct AVIFIELDINDEX_avifieldindex_entry
    dw_offset : UInt32
    dw_size : UInt32
    dw_offset_field2 : UInt32
  end
  struct MainAVIHeader
    dw_micro_sec_per_frame : UInt32
    dw_max_bytes_per_sec : UInt32
    dw_padding_granularity : UInt32
    dw_flags : UInt32
    dw_total_frames : UInt32
    dw_initial_frames : UInt32
    dw_streams : UInt32
    dw_suggested_buffer_size : UInt32
    dw_width : UInt32
    dw_height : UInt32
    dw_reserved : UInt32[4]*
  end
  struct AVIStreamHeader
    fcc_type : UInt32
    fcc_handler : UInt32
    dw_flags : UInt32
    w_priority : UInt16
    w_language : UInt16
    dw_initial_frames : UInt32
    dw_scale : UInt32
    dw_rate : UInt32
    dw_start : UInt32
    dw_length : UInt32
    dw_suggested_buffer_size : UInt32
    dw_quality : UInt32
    dw_sample_size : UInt32
    rc_frame : RECT
  end
  struct AVIINDEXENTRY
    ckid : UInt32
    dw_flags : UInt32
    dw_chunk_offset : UInt32
    dw_chunk_length : UInt32
  end
  struct AVIPALCHANGE
    b_first_entry : UInt8
    b_num_entries : UInt8
    w_flags : UInt16
    pe_new : PALETTEENTRY[0]*
  end
  struct AM_AC3_ERROR_CONCEALMENT
    f_repeat_previous_block : LibC::BOOL
    f_error_in_current_block : LibC::BOOL
  end
  struct AM_AC3_ALTERNATE_AUDIO
    f_stereo : LibC::BOOL
    dual_mode : UInt32
  end
  struct AM_AC3_DOWNMIX
    f_down_mix : LibC::BOOL
    f_dolby_surround : LibC::BOOL
  end
  struct AM_AC3_BIT_STREAM_MODE
    bit_stream_mode : Int32
  end
  struct AM_AC3_DIALOGUE_LEVEL
    dialogue_level : UInt32
  end
  struct AM_AC3_ROOM_TYPE
    f_large_room : LibC::BOOL
  end
  struct AM_DVD_YUV
    reserved : UInt8
    y : UInt8
    u : UInt8
    v : UInt8
  end
  struct AM_PROPERTY_SPPAL
    sppal : AM_DVD_YUV[16]*
  end
  struct AM_COLCON
    _bitfield1 : UInt8
    _bitfield2 : UInt8
    _bitfield3 : UInt8
    _bitfield4 : UInt8
  end
  struct AM_PROPERTY_SPHLI
    hliss : UInt16
    reserved : UInt16
    start_ptm : UInt32
    end_ptm : UInt32
    start_x : UInt16
    start_y : UInt16
    stop_x : UInt16
    stop_y : UInt16
    col_con : AM_COLCON
  end
  struct AM_DVDCOPY_CHLGKEY
    chlg_key : UInt8[10]*
    reserved : UInt8[2]*
  end
  struct AM_DVDCOPY_BUSKEY
    bus_key : UInt8[5]*
    reserved : UInt8[0]*
  end
  struct AM_DVDCOPY_DISCKEY
    disc_key : UInt8[2048]*
  end
  struct AM_DVDCOPY_TITLEKEY
    key_flags : UInt32
    reserved1 : UInt32[2]*
    title_key : UInt8[6]*
    reserved2 : UInt8[2]*
  end
  struct AM_COPY_MACROVISION
    macrovision_level : UInt32
  end
  struct AM_DVDCOPY_SET_COPY_STATE
    dvd_copy_state : UInt32
  end
  struct DVD_REGION
    copy_system : UInt8
    region_data : UInt8
    system_region : UInt8
    reset_count : UInt8
  end
  struct VIDEOINFOHEADER2
    rc_source : RECT
    rc_target : RECT
    dw_bit_rate : UInt32
    dw_bit_error_rate : UInt32
    avg_time_per_frame : Int64
    dw_interlace_flags : UInt32
    dw_copy_protect_flags : UInt32
    dw_pict_aspect_ratio_x : UInt32
    dw_pict_aspect_ratio_y : UInt32
    anonymous : VIDEOINFOHEADER2_Anonymous_e__Union
    dw_reserved2 : UInt32
    bmi_header : BITMAPINFOHEADER
  end
  struct MPEG2VIDEOINFO
    hdr : VIDEOINFOHEADER2
    dw_start_time_code : UInt32
    cb_sequence_header : UInt32
    dw_profile : UInt32
    dw_level : UInt32
    dw_flags : MPEG2VIDEOINFO_FLAGS
    dw_sequence_header : UInt32[0]*
  end
  struct AM_DvdKaraokeData
    dw_downmix : UInt32
    dw_speaker_assignment : UInt32
  end
  struct AM_SimpleRateChange
    start_time : Int64
    rate : Int32
  end
  struct AM_QueryRate
    l_max_forward_full_frame : Int32
    l_max_reverse_full_frame : Int32
  end
  struct AM_ExactRateChange
    output_zero_time : Int64
    rate : Int32
  end
  struct AM_DVD_ChangeRate
    start_in_time : Int64
    start_out_time : Int64
    rate : Int32
  end
  struct MP_PARAMINFO
    mp_type : MP_TYPE
    mop_caps : UInt32
    mpd_min_value : Float32
    mpd_max_value : Float32
    mpd_neutral_value : Float32
    sz_unit_text : Char[32]*
    sz_label : Char[32]*
  end
  struct MP_ENVELOPE_SEGMENT
    rt_start : Int64
    rt_end : Int64
    val_start : Float32
    val_end : Float32
    i_curve : MP_CURVE_TYPE
    flags : UInt32
  end
  struct VFW_FILTERLIST
    c_filters : UInt32
    a_cls_id : Guid[0]*
  end
  struct DXVA2_VIDEOSAMPLE
    start : Int64
    end_ : Int64
    sample_format : DXVA2_ExtendedFormat
    sample_flags : UInt32
    src_resource : Void*
    src_rect : RECT
    dst_rect : RECT
    pal : DXVA2_AYUVSample8[16]*
    planar_alpha : DXVA2_Fixed32
  end
  struct DXVA2_VIDEOPROCESSBLT
    target_frame : Int64
    target_rect : RECT
    constriction_size : SIZE
    streaming_flags : UInt32
    background_color : DXVA2_AYUVSample16
    dest_format : DXVA2_ExtendedFormat
    dest_flags : UInt32
    proc_amp_values : DXVA2_ProcAmpValues
    alpha : DXVA2_Fixed32
    noise_filter_luma : DXVA2_FilterValues
    noise_filter_chroma : DXVA2_FilterValues
    detail_filter_luma : DXVA2_FilterValues
    detail_filter_chroma : DXVA2_FilterValues
    p_src_surfaces : DXVA2_VIDEOSAMPLE*
    num_src_surfaces : UInt32
  end
  struct DXVA2SW_CALLBACKS
    size : UInt32
    get_video_processor_render_target_count : PDXVA2SW_GETVIDEOPROCESSORRENDERTARGETCOUNT
    get_video_processor_render_targets : PDXVA2SW_GETVIDEOPROCESSORRENDERTARGETS
    get_video_processor_caps : PDXVA2SW_GETVIDEOPROCESSORCAPS
    get_video_processor_sub_stream_format_count : PDXVA2SW_GETVIDEOPROCESSORSUBSTREAMFORMATCOUNT
    get_video_processor_sub_stream_formats : PDXVA2SW_GETVIDEOPROCESSORSUBSTREAMFORMATS
    get_proc_amp_range : PDXVA2SW_GETPROCAMPRANGE
    get_filter_property_range : PDXVA2SW_GETFILTERPROPERTYRANGE
    create_video_process_device : PDXVA2SW_CREATEVIDEOPROCESSDEVICE
    destroy_video_process_device : PDXVA2SW_DESTROYVIDEOPROCESSDEVICE
    video_process_begin_frame : PDXVA2SW_VIDEOPROCESSBEGINFRAME
    video_process_end_frame : PDXVA2SW_VIDEOPROCESSENDFRAME
    video_process_set_render_target : PDXVA2SW_VIDEOPROCESSSETRENDERTARGET
    video_process_blt : PDXVA2SW_VIDEOPROCESSBLT
  end
  struct DXVA2Trace_DecodeDevCreatedData
    wmi_header : EVENT_TRACE_HEADER
    p_object : UInt64
    p_d3_d_device : UInt64
    device_guid : Guid
    width : UInt32
    height : UInt32
    enter : LibC::BOOL
  end
  struct DXVA2Trace_DecodeDeviceData
    wmi_header : EVENT_TRACE_HEADER
    p_object : UInt64
    enter : LibC::BOOL
  end
  struct DXVA2Trace_DecodeDevBeginFrameData
    wmi_header : EVENT_TRACE_HEADER
    p_object : UInt64
    p_render_target : UInt64
    enter : LibC::BOOL
  end
  struct DXVA2Trace_DecodeDevGetBufferData
    wmi_header : EVENT_TRACE_HEADER
    p_object : UInt64
    buffer_type : UInt32
    enter : LibC::BOOL
  end
  struct DXVA2Trace_VideoProcessDevCreatedData
    wmi_header : EVENT_TRACE_HEADER
    p_object : UInt64
    p_d3_d_device : UInt64
    device_guid : Guid
    rt_four_cc : UInt32
    width : UInt32
    height : UInt32
    enter : LibC::BOOL
  end
  struct DXVA2Trace_VideoProcessDeviceData
    wmi_header : EVENT_TRACE_HEADER
    p_object : UInt64
    enter : LibC::BOOL
  end
  struct DXVA2TraceVideoProcessBltData
    wmi_header : EVENT_TRACE_HEADER
    p_object : UInt64
    p_render_target : UInt64
    target_frame_time : UInt64
    target_rect : RECT
    enter : LibC::BOOL
  end
  struct WMDRMProtectionInfo
    wsz_kid : UInt16[25]*
    qw_counter : UInt64
    qw_index : UInt64
    b_offset : UInt8
  end
  struct BadSampleInfo
    hr_reason : HRESULT
  end
  struct STREAMBUFFER_ATTRIBUTE
    psz_name : LibC::LPWSTR
    stream_buffer_attribute_type : STREAMBUFFER_ATTR_DATATYPE
    pb_attribute : UInt8*
    cb_length : UInt16
  end
  struct SBE_PIN_DATA
    c_data_bytes : UInt64
    c_samples_processed : UInt64
    c_discontinuities : UInt64
    c_sync_points : UInt64
    c_timestamps : UInt64
  end
  struct SBE2_STREAM_DESC
    version : UInt32
    stream_id : UInt32
    default : UInt32
    reserved : UInt32
  end
  struct DVR_STREAM_DESC
    version : UInt32
    stream_id : UInt32
    default : LibC::BOOL
    creation : LibC::BOOL
    reserved : UInt32
    guid_sub_media_type : Guid
    guid_format_type : Guid
    media_type : AM_MEDIA_TYPE
  end
  struct PID_BITS_MIDL
    bits : UInt16
  end
  struct MPEG_HEADER_BITS_MIDL
    bits : UInt16
  end
  struct MPEG_HEADER_VERSION_BITS_MIDL
    bits : UInt8
  end
  struct TID_EXTENSION
    w_tid_ext : UInt16
    w_count : UInt16
  end
  struct SECTION
    table_id : UInt8
    header : SECTION_Header_e__Union
    section_data : UInt8[0]*
  end
  struct LONG_SECTION
    table_id : UInt8
    header : LONG_SECTION_Header_e__Union
    table_id_extension : UInt16
    version : LONG_SECTION_Version_e__Union
    section_number : UInt8
    last_section_number : UInt8
    remaining_data : UInt8[0]*
  end
  struct DSMCC_SECTION
    table_id : UInt8
    header : DSMCC_SECTION_Header_e__Union
    table_id_extension : UInt16
    version : DSMCC_SECTION_Version_e__Union
    section_number : UInt8
    last_section_number : UInt8
    protocol_discriminator : UInt8
    dsmcc_type : UInt8
    message_id : UInt16
    transaction_id : UInt32
    reserved : UInt8
    adaptation_length : UInt8
    message_length : UInt16
    remaining_data : UInt8[0]*
  end
  struct MPEG_RQST_PACKET
    dw_length : UInt32
    p_section : SECTION*
  end
  struct MPEG_PACKET_LIST
    w_packet_count : UInt16
    packet_list : MPEG_RQST_PACKET[0]**
  end
  struct DSMCC_FILTER_OPTIONS
    f_specify_protocol : LibC::BOOL
    protocol : UInt8
    f_specify_type : LibC::BOOL
    type : UInt8
    f_specify_message_id : LibC::BOOL
    message_id : UInt16
    f_specify_transaction_id : LibC::BOOL
    f_use_trx_id_message_id_mask : LibC::BOOL
    transaction_id : UInt32
    f_specify_module_version : LibC::BOOL
    module_version : UInt8
    f_specify_block_number : LibC::BOOL
    block_number : UInt16
    f_get_module_call : LibC::BOOL
    number_of_blocks_in_module : UInt16
  end
  struct ATSC_FILTER_OPTIONS
    f_specify_etm_id : LibC::BOOL
    etm_id : UInt32
  end
  struct DVB_EIT_FILTER_OPTIONS
    f_specify_segment : LibC::BOOL
    b_segment : UInt8
  end
  struct MPEG2_FILTER
    b_version_number : UInt8
    w_filter_size : UInt16
    f_use_raw_filtering_bits : LibC::BOOL
    filter : UInt8[16]*
    mask : UInt8[16]*
    f_specify_table_id_extension : LibC::BOOL
    table_id_extension : UInt16
    f_specify_version : LibC::BOOL
    version : UInt8
    f_specify_section_number : LibC::BOOL
    section_number : UInt8
    f_specify_current_next : LibC::BOOL
    f_next : LibC::BOOL
    f_specify_dsmcc_options : LibC::BOOL
    dsmcc : DSMCC_FILTER_OPTIONS
    f_specify_atsc_options : LibC::BOOL
    atsc : ATSC_FILTER_OPTIONS
  end
  struct MPEG2_FILTER2
    anonymous : MPEG2_FILTER2_Anonymous_e__Union
    f_specify_dvb_eit_options : LibC::BOOL
    dvb_eit : DVB_EIT_FILTER_OPTIONS
  end
  struct MPEG2_FILTER2_Anonymous_e__Union_Anonymous_e__Struct
    b_version_number : UInt8
    w_filter_size : UInt16
    f_use_raw_filtering_bits : LibC::BOOL
    filter : UInt8[16]*
    mask : UInt8[16]*
    f_specify_table_id_extension : LibC::BOOL
    table_id_extension : UInt16
    f_specify_version : LibC::BOOL
    version : UInt8
    f_specify_section_number : LibC::BOOL
    section_number : UInt8
    f_specify_current_next : LibC::BOOL
    f_next : LibC::BOOL
    f_specify_dsmcc_options : LibC::BOOL
    dsmcc : DSMCC_FILTER_OPTIONS
    f_specify_atsc_options : LibC::BOOL
    atsc : ATSC_FILTER_OPTIONS
  end
  struct MPEG_STREAM_BUFFER
    hr : HRESULT
    dw_data_buffer_size : UInt32
    dw_size_of_data_read : UInt32
    p_data_buffer : UInt8*
  end
  struct MPEG_TIME
    hours : UInt8
    minutes : UInt8
    seconds : UInt8
  end
  struct MPEG_DATE
    date : UInt8
    month : UInt8
    year : UInt16
  end
  struct MPEG_DATE_AND_TIME
    d : MPEG_DATE
    t : MPEG_TIME
  end
  struct MPEG_BCS_DEMUX
    avm_graph_id : UInt32
  end
  struct MPEG_WINSOCK
    avm_graph_id : UInt32
  end
  struct MPEG_CONTEXT
    type : MPEG_CONTEXT_TYPE
    u : MPEG_CONTEXT_U_e__Union
  end
  struct MPEG_SERVICE_REQUEST
    type : MPEG_REQUEST_TYPE
    context : MPEG_CONTEXT
    pid : UInt16
    table_id : UInt8
    filter : MPEG2_FILTER
    flags : UInt32
  end
  struct MPEG_SERVICE_RESPONSE
    ip_address : UInt32
    port : UInt16
  end
  struct DSMCC_ELEMENT
    pid : UInt16
    b_component_tag : UInt8
    dw_carousel_id : UInt32
    dw_transaction_id : UInt32
    p_next : DSMCC_ELEMENT*
  end
  struct MPE_ELEMENT
    pid : UInt16
    b_component_tag : UInt8
    p_next : MPE_ELEMENT*
  end
  struct MPEG_STREAM_FILTER
    w_pid_value : UInt16
    dw_filter_size : UInt32
    f_crc_enabled : LibC::BOOL
    rgch_filter : UInt8[16]*
    rgch_mask : UInt8[16]*
  end
  struct Mpeg2TableSampleHdr
    section_count : UInt8
    reserved : UInt8[3]*
    section_offsets : Int32[0]*
  end
  struct ProgramElement
    w_program_number : UInt16
    w_program_map_pid : UInt16
  end
  struct UDCR_TAG
    b_version : UInt8
    kid : UInt8[25]*
    ull_base_counter : UInt64
    ull_base_counter_range : UInt64
    f_scrambled : LibC::BOOL
    b_stream_mark : UInt8
    dw_reserved1 : UInt32
    dw_reserved2 : UInt32
  end
  struct PIC_SEQ_SAMPLE
    _bitfield : UInt32
  end
  struct SAMPLE_SEQ_OFFSET
    _bitfield : UInt32
  end
  struct VA_OPTIONAL_VIDEO_PROPERTIES
    dw_picture_height : UInt16
    dw_picture_width : UInt16
    dw_aspect_ratio_x : UInt16
    dw_aspect_ratio_y : UInt16
    va_video_format : VA_VIDEO_FORMAT
    va_color_primaries : VA_COLOR_PRIMARIES
    va_transfer_characteristics : VA_TRANSFER_CHARACTERISTICS
    va_matrix_coefficients : VA_MATRIX_COEFFICIENTS
  end
  struct TRANSPORT_PROPERTIES
    pid : UInt32
    pcr : Int64
    fields : TRANSPORT_PROPERTIES_Fields_e__Union
  end
  struct TRANSPORT_PROPERTIES_Fields_e__Union_Others
    _bitfield : Int64
  end
  struct PBDA_TAG_ATTRIBUTE
    table_uu_id : Guid
    table_id : UInt8
    version_no : UInt16
    table_data_size : UInt32
    table_data : UInt8[0]*
  end
  struct CAPTURE_STREAMTIME
    stream_time : Int64
  end
  struct DSHOW_STREAM_DESC
    version_no : UInt32
    stream_id : UInt32
    default : LibC::BOOL
    creation : LibC::BOOL
    reserved : UInt32
  end
  struct SAMPLE_LIVE_STREAM_TIME
    qw_stream_time : UInt64
    qw_live_time : UInt64
  end
  struct KSP_BDA_NODE_PIN
    property : KSIDENTIFIER
    ul_node_type : UInt32
    ul_input_pin_id : UInt32
    ul_output_pin_id : UInt32
  end
  struct KSM_BDA_PIN
    method : KSIDENTIFIER
    anonymous : KSM_BDA_PIN_Anonymous_e__Union
    reserved : UInt32
  end
  struct KSM_BDA_PIN_PAIR
    method : KSIDENTIFIER
    anonymous1 : KSM_BDA_PIN_PAIR_Anonymous1_e__Union
    anonymous2 : KSM_BDA_PIN_PAIR_Anonymous2_e__Union
  end
  struct KSP_NODE_ESPID
    property : KSP_NODE
    es_pid : UInt32
  end
  struct KSM_BDA_DEBUG_LEVEL
    method : KSIDENTIFIER
    uc_debug_level : UInt8
    ul_debug_string_size : UInt32
    argb_debug_string : UInt8[0]*
  end
  struct BDA_DEBUG_DATA
    l_result : Int32
    uuid_debug_data_type : Guid
    ul_data_size : UInt32
    argb_debug_data : UInt8[0]*
  end
  struct BDA_EVENT_DATA
    l_result : Int32
    ul_event_id : UInt32
    uuid_event_type : Guid
    ul_event_data_length : UInt32
    argb_event_data : UInt8[0]*
  end
  struct KSM_BDA_EVENT_COMPLETE
    method : KSIDENTIFIER
    ul_event_id : UInt32
    ul_event_result : UInt32
  end
  struct KSM_BDA_DRM_SETDRM
    node_method : KSM_NODE
    new_dr_muuid : Guid
  end
  struct KSM_BDA_BUFFER
    node_method : KSM_NODE
    ul_buffer_size : UInt32
    argb_buffer : UInt8[0]*
  end
  struct KSM_BDA_WMDRM_LICENSE
    node_method : KSM_NODE
    uuid_key_id : Guid
  end
  struct KSM_BDA_WMDRM_RENEWLICENSE
    node_method : KSM_NODE
    ul_xmr_license_length : UInt32
    ul_entitlement_token_length : UInt32
    argb_data_buffer : UInt8[0]*
  end
  struct KSM_BDA_WMDRMTUNER_PURCHASEENTITLEMENT
    node_method : KSM_NODE
    ul_dialog_request : UInt32
    c_language : CHAR[12]*
    ul_purchase_token_length : UInt32
    argb_data_buffer : UInt8[0]*
  end
  struct KSM_BDA_WMDRMTUNER_SETPIDPROTECTION
    node_method : KSM_NODE
    ul_pid : UInt32
    uuid_key_id : Guid
  end
  struct KSM_BDA_WMDRMTUNER_GETPIDPROTECTION
    node_method : KSM_NODE
    ul_pid : UInt32
  end
  struct KSM_BDA_WMDRMTUNER_SYNCVALUE
    node_method : KSM_NODE
    ul_sync_value : UInt32
  end
  struct KSM_BDA_TUNER_TUNEREQUEST
    method : KSIDENTIFIER
    ul_tune_length : UInt32
    argb_tune_data : UInt8[0]*
  end
  struct KSM_BDA_GPNV_GETVALUE
    method : KSIDENTIFIER
    ul_name_length : UInt32
    c_language : CHAR[12]*
    argb_data : UInt8[0]*
  end
  struct KSM_BDA_GPNV_SETVALUE
    method : KSIDENTIFIER
    ul_dialog_request : UInt32
    c_language : CHAR[12]*
    ul_name_length : UInt32
    ul_value_length : UInt32
    argb_name : UInt8[0]*
  end
  struct KSM_BDA_GPNV_NAMEINDEX
    method : KSIDENTIFIER
    ul_value_name_index : UInt32
  end
  struct KSM_BDA_SCAN_CAPABILTIES
    method : KSIDENTIFIER
    uuid_broadcast_standard : Guid
  end
  struct KSM_BDA_SCAN_FILTER
    method : KSIDENTIFIER
    ul_scan_modulation_type_size : UInt32
    analog_video_standards : UInt64
    argb_scan_modulation_types : UInt8[0]*
  end
  struct KSM_BDA_SCAN_START
    method : KSIDENTIFIER
    lower_frequency : UInt32
    higher_frequency : UInt32
  end
  struct KSM_BDA_GDDS_TUNEXMLFROMIDX
    method : KSIDENTIFIER
    ul_idx : UInt64
  end
  struct KSM_BDA_GDDS_SERVICEFROMTUNEXML
    method : KSIDENTIFIER
    ul_tune_xml_length : UInt32
    argb_tune_xml : UInt8[0]*
  end
  struct KSM_BDA_USERACTIVITY_USEREASON
    method : KSIDENTIFIER
    ul_use_reason : UInt32
  end
  struct KSM_BDA_CAS_ENTITLEMENTTOKEN
    node_method : KSM_NODE
    ul_dialog_request : UInt32
    c_language : CHAR[12]*
    ul_request_type : UInt32
    ul_entitlement_token_len : UInt32
    argb_entitlement_token : UInt8[0]*
  end
  struct KSM_BDA_CAS_CAPTURETOKEN
    node_method : KSM_NODE
    ul_token_length : UInt32
    argb_token : UInt8[0]*
  end
  struct KSM_BDA_CAS_OPENBROADCASTMMI
    node_method : KSM_NODE
    ul_dialog_request : UInt32
    c_language : CHAR[12]*
    ul_event_id : UInt32
  end
  struct KSM_BDA_CAS_CLOSEMMIDIALOG
    node_method : KSM_NODE
    ul_dialog_request : UInt32
    c_language : CHAR[12]*
    ul_dialog_number : UInt32
    ul_reason : UInt32
  end
  struct KSM_BDA_ISDBCAS_REQUEST
    node_method : KSM_NODE
    ul_request_id : UInt32
    ul_isdb_command_size : UInt32
    argb_isdb_command_data : UInt8[0]*
  end
  struct KSM_BDA_TS_SELECTOR_SETTSID
    node_method : KSM_NODE
    us_tsid : UInt16
  end
  struct KS_DATARANGE_BDA_ANTENNA
    data_range : KSDATAFORMAT
  end
  struct BDA_TRANSPORT_INFO
    ulcb_phyiscal_packet : UInt32
    ulcb_phyiscal_frame : UInt32
    ulcb_phyiscal_frame_alignment : UInt32
    avg_time_per_frame : Int64
  end
  struct KS_DATARANGE_BDA_TRANSPORT
    data_range : KSDATAFORMAT
    bda_transport_info : BDA_TRANSPORT_INFO
  end
  struct ChannelChangeInfo
    state : ChannelChangeSpanningEvent_State
    time_stamp : UInt64
  end
  struct ChannelTypeInfo
    channel_type : ChannelType
    time_stamp : UInt64
  end
  struct ChannelInfo
    l_frequency : Int32
    anonymous : ChannelInfo_Anonymous_e__Union
  end
  struct ChannelInfo_Anonymous_e__Union_DC_e__Struct
    l_prog_number : Int32
  end
  struct ChannelInfo_Anonymous_e__Union_DVB_e__Struct
    l_onid : Int32
    l_tsid : Int32
    l_sid : Int32
  end
  struct ChannelInfo_Anonymous_e__Union_ATSC_e__Struct
    l_prog_number : Int32
  end
  struct SpanningEventDescriptor
    w_data_len : UInt16
    w_prog_number : UInt16
    w_sid : UInt16
    b_descriptor : UInt8[0]*
  end
  struct DVBScramblingControlSpanningEvent
    ul_pid : UInt32
    f_scrambled : LibC::BOOL
  end
  struct SpanningEventEmmMessage
    b_c_abroadcaster_group_id : UInt8
    b_message_control : UInt8
    w_service_id : UInt16
    w_table_id_extension : UInt16
    b_deletion_status : UInt8
    b_displaying_duration1 : UInt8
    b_displaying_duration2 : UInt8
    b_displaying_duration3 : UInt8
    b_displaying_cycle : UInt8
    b_format_version : UInt8
    b_display_position : UInt8
    w_message_length : UInt16
    sz_message_area : Char[0]*
  end
  struct LanguageInfo
    lang_id : UInt16
    l_iso_lang_code : Int32
  end
  struct DualMonoInfo
    lang_id1 : UInt16
    lang_id2 : UInt16
    l_iso_lang_code1 : Int32
    l_iso_lang_code2 : Int32
  end
  struct PIDListSpanningEvent
    w_pid_count : UInt16
    pul_pi_ds : UInt32[0]*
  end
  struct RATING_ATTRIBUTE
    rating_attribute_id : UInt32
    rating_attribute_value : UInt32
  end
  struct RATING_SYSTEM
    rating_system_id : Guid
    _bitfield : UInt8
    country_code : UInt8[3]*
    rating_attribute_count : UInt32
    lpratingattrib : RATING_ATTRIBUTE*
  end
  struct RATING_INFO
    rating_system_count : UInt32
    lpratingsystem : RATING_SYSTEM*
  end
  struct PBDAParentalControl
    rating_system_count : UInt32
    rating_systems : RATING_SYSTEM*
  end
  struct DvbParentalRatingParam
    sz_country_code : CHAR[4]*
    b_rating : UInt8
  end
  struct DvbParentalRatingDescriptor
    ul_num_params : UInt32
    p_params : DvbParentalRatingParam[0]*
  end
  struct KSPROPERTY_BDA_RF_TUNER_CAPS_S
    property : KSP_NODE
    mode : UInt32
    analog_standards_supported : UInt32
    digital_standards_supported : UInt32
    min_frequency : UInt32
    max_frequency : UInt32
    settling_time : UInt32
    analog_sensing_range : UInt32
    digital_sensing_range : UInt32
    milli_seconds_per_m_hz : UInt32
  end
  struct KSPROPERTY_BDA_RF_TUNER_SCAN_STATUS_S
    property : KSP_NODE
    current_frequency : UInt32
    frequency_range_min : UInt32
    frequency_range_max : UInt32
    milli_seconds_left : UInt32
  end
  struct KSPROPERTY_BDA_RF_TUNER_STANDARD_S
    property : KSP_NODE
    signal_type : BDA_SignalType
    signal_standard : UInt32
  end
  struct KSPROPERTY_BDA_RF_TUNER_STANDARD_MODE_S
    property : KSP_NODE
    auto_detect : LibC::BOOL
  end
  struct KSEVENTDATA_BDA_RF_TUNER_SCAN_S
    event_data : KSEVENTDATA
    start_frequency : UInt32
    end_frequency : UInt32
    lock_requested : BDA_LockType
  end
  struct PID_BITS
    _bitfield : UInt16
  end
  struct MPEG_HEADER_BITS
    _bitfield : UInt16
  end
  struct MPEG_HEADER_VERSION_BITS
    _bitfield : UInt8
  end
  struct MPEG1WAVEFORMAT
    wfx : WAVEFORMATEX
    fw_head_layer : UInt16
    dw_head_bitrate : UInt32
    fw_head_mode : UInt16
    fw_head_mode_ext : UInt16
    w_head_emphasis : UInt16
    fw_head_flags : UInt16
    dw_pts_low : UInt32
    dw_pts_high : UInt32
  end
  struct MPEGLAYER3WAVEFORMAT
    wfx : WAVEFORMATEX
    w_id : UInt16
    fdw_flags : MPEGLAYER3WAVEFORMAT_FLAGS
    n_block_size : UInt16
    n_frames_per_block : UInt16
    n_codec_delay : UInt16
  end
  struct HEAACWAVEINFO
    wfx : WAVEFORMATEX
    w_payload_type : UInt16
    w_audio_profile_level_indication : UInt16
    w_struct_type : UInt16
    w_reserved1 : UInt16
    dw_reserved2 : UInt32
  end
  struct HEAACWAVEFORMAT
    wf_info : HEAACWAVEINFO
    pb_audio_specific_config : UInt8[0]*
  end
  struct DXVA_COPPSetProtectionLevelCmdData
    prot_type : UInt32
    prot_level : UInt32
    extended_info_change_mask : UInt32
    extended_info_data : UInt32
  end
  struct DXVA_COPPSetSignalingCmdData
    active_tv_protection_standard : UInt32
    aspect_ratio_change_mask1 : UInt32
    aspect_ratio_data1 : UInt32
    aspect_ratio_change_mask2 : UInt32
    aspect_ratio_data2 : UInt32
    aspect_ratio_change_mask3 : UInt32
    aspect_ratio_data3 : UInt32
    extended_info_change_mask : UInt32[4]*
    extended_info_data : UInt32[4]*
    reserved : UInt32
  end
  struct DXVA_COPPStatusData
    r_app : Guid
    dw_flags : UInt32
    dw_data : UInt32
    extended_info_valid_mask : UInt32
    extended_info_data : UInt32
  end
  struct DXVA_COPPStatusDisplayData
    r_app : Guid
    dw_flags : UInt32
    display_width : UInt32
    display_height : UInt32
    format : UInt32
    d3d_format : UInt32
    freq_numerator : UInt32
    freq_denominator : UInt32
  end
  struct DXVA_COPPStatusHDCPKeyData
    r_app : Guid
    dw_flags : UInt32
    dw_hdcp_flags : UInt32
    b_key : Guid
    reserved1 : Guid
    reserved2 : Guid
  end
  struct DXVA_COPPStatusSignalingCmdData
    r_app : Guid
    dw_flags : UInt32
    available_tv_protection_standards : UInt32
    active_tv_protection_standard : UInt32
    tv_type : UInt32
    aspect_ratio_valid_mask1 : UInt32
    aspect_ratio_data1 : UInt32
    aspect_ratio_valid_mask2 : UInt32
    aspect_ratio_data2 : UInt32
    aspect_ratio_valid_mask3 : UInt32
    aspect_ratio_data3 : UInt32
    extended_info_valid_mask : UInt32[4]*
    extended_info_data : UInt32[4]*
  end


  struct ICreateDevEnumVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    create_class_enumerator : UInt64
  end

  ICreateDevEnum_GUID = "29840822-5b84-11d0-bd3b-00a0c911ce86"
  IID_ICreateDevEnum = LibC::GUID.new(0x29840822_u32, 0x5b84_u16, 0x11d0_u16, StaticArray[0xbd_u8, 0x3b_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0xce_u8, 0x86_u8])
  struct ICreateDevEnum
    lpVtbl : ICreateDevEnumVTbl*
  end

  struct IPinVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    connect : UInt64
    receive_connection : UInt64
    disconnect : UInt64
    connected_to : UInt64
    connection_media_type : UInt64
    query_pin_info : UInt64
    query_direction : UInt64
    query_id : UInt64
    query_accept : UInt64
    enum_media_types : UInt64
    query_internal_connections : UInt64
    end_of_stream : UInt64
    begin_flush : UInt64
    end_flush : UInt64
    new_segment : UInt64
  end

  IPin_GUID = "56a86891-0ad4-11ce-b03a-0020af0ba770"
  IID_IPin = LibC::GUID.new(0x56a86891_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IPin
    lpVtbl : IPinVTbl*
  end

  struct IEnumPinsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    next : UInt64
    skip : UInt64
    reset : UInt64
    clone : UInt64
  end

  IEnumPins_GUID = "56a86892-0ad4-11ce-b03a-0020af0ba770"
  IID_IEnumPins = LibC::GUID.new(0x56a86892_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IEnumPins
    lpVtbl : IEnumPinsVTbl*
  end

  struct IEnumMediaTypesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    next : UInt64
    skip : UInt64
    reset : UInt64
    clone : UInt64
  end

  IEnumMediaTypes_GUID = "89c31040-846b-11ce-97d3-00aa0055595a"
  IID_IEnumMediaTypes = LibC::GUID.new(0x89c31040_u32, 0x846b_u16, 0x11ce_u16, StaticArray[0x97_u8, 0xd3_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x55_u8, 0x59_u8, 0x5a_u8])
  struct IEnumMediaTypes
    lpVtbl : IEnumMediaTypesVTbl*
  end

  struct IFilterGraphVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    add_filter : UInt64
    remove_filter : UInt64
    enum_filters : UInt64
    find_filter_by_name : UInt64
    connect_direct : UInt64
    reconnect : UInt64
    disconnect : UInt64
    set_default_sync_source : UInt64
  end

  IFilterGraph_GUID = "56a8689f-0ad4-11ce-b03a-0020af0ba770"
  IID_IFilterGraph = LibC::GUID.new(0x56a8689f_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IFilterGraph
    lpVtbl : IFilterGraphVTbl*
  end

  struct IEnumFiltersVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    next : UInt64
    skip : UInt64
    reset : UInt64
    clone : UInt64
  end

  IEnumFilters_GUID = "56a86893-0ad4-11ce-b03a-0020af0ba770"
  IID_IEnumFilters = LibC::GUID.new(0x56a86893_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IEnumFilters
    lpVtbl : IEnumFiltersVTbl*
  end

  struct IMediaFilterVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_class_id : UInt64
    stop : UInt64
    pause : UInt64
    run : UInt64
    get_state : UInt64
    set_sync_source : UInt64
    get_sync_source : UInt64
  end

  IMediaFilter_GUID = "56a86899-0ad4-11ce-b03a-0020af0ba770"
  IID_IMediaFilter = LibC::GUID.new(0x56a86899_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IMediaFilter
    lpVtbl : IMediaFilterVTbl*
  end

  struct IBaseFilterVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_class_id : UInt64
    stop : UInt64
    pause : UInt64
    run : UInt64
    get_state : UInt64
    set_sync_source : UInt64
    get_sync_source : UInt64
    enum_pins : UInt64
    find_pin : UInt64
    query_filter_info : UInt64
    join_filter_graph : UInt64
    query_vendor_info : UInt64
  end

  IBaseFilter_GUID = "56a86895-0ad4-11ce-b03a-0020af0ba770"
  IID_IBaseFilter = LibC::GUID.new(0x56a86895_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IBaseFilter
    lpVtbl : IBaseFilterVTbl*
  end

  struct IMediaSampleVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_pointer : UInt64
    get_size : UInt64
    get_time : UInt64
    set_time : UInt64
    is_sync_point : UInt64
    set_sync_point : UInt64
    is_preroll : UInt64
    set_preroll : UInt64
    get_actual_data_length : UInt64
    set_actual_data_length : UInt64
    get_media_type : UInt64
    set_media_type : UInt64
    is_discontinuity : UInt64
    set_discontinuity : UInt64
    get_media_time : UInt64
    set_media_time : UInt64
  end

  IMediaSample_GUID = "56a8689a-0ad4-11ce-b03a-0020af0ba770"
  IID_IMediaSample = LibC::GUID.new(0x56a8689a_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IMediaSample
    lpVtbl : IMediaSampleVTbl*
  end

  struct IMediaSample2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_pointer : UInt64
    get_size : UInt64
    get_time : UInt64
    set_time : UInt64
    is_sync_point : UInt64
    set_sync_point : UInt64
    is_preroll : UInt64
    set_preroll : UInt64
    get_actual_data_length : UInt64
    set_actual_data_length : UInt64
    get_media_type : UInt64
    set_media_type : UInt64
    is_discontinuity : UInt64
    set_discontinuity : UInt64
    get_media_time : UInt64
    set_media_time : UInt64
    get_properties : UInt64
    set_properties : UInt64
  end

  IMediaSample2_GUID = "36b73884-c2c8-11cf-8b46-00805f6cef60"
  IID_IMediaSample2 = LibC::GUID.new(0x36b73884_u32, 0xc2c8_u16, 0x11cf_u16, StaticArray[0x8b_u8, 0x46_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x6c_u8, 0xef_u8, 0x60_u8])
  struct IMediaSample2
    lpVtbl : IMediaSample2VTbl*
  end

  struct IMediaSample2ConfigVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_surface : UInt64
  end

  IMediaSample2Config_GUID = "68961e68-832b-41ea-bc91-63593f3e70e3"
  IID_IMediaSample2Config = LibC::GUID.new(0x68961e68_u32, 0x832b_u16, 0x41ea_u16, StaticArray[0xbc_u8, 0x91_u8, 0x63_u8, 0x59_u8, 0x3f_u8, 0x3e_u8, 0x70_u8, 0xe3_u8])
  struct IMediaSample2Config
    lpVtbl : IMediaSample2ConfigVTbl*
  end

  struct IMemAllocatorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_properties : UInt64
    get_properties : UInt64
    commit : UInt64
    decommit : UInt64
    get_buffer : UInt64
    release_buffer : UInt64
  end

  IMemAllocator_GUID = "56a8689c-0ad4-11ce-b03a-0020af0ba770"
  IID_IMemAllocator = LibC::GUID.new(0x56a8689c_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IMemAllocator
    lpVtbl : IMemAllocatorVTbl*
  end

  struct IMemAllocatorCallbackTempVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_properties : UInt64
    get_properties : UInt64
    commit : UInt64
    decommit : UInt64
    get_buffer : UInt64
    release_buffer : UInt64
    set_notify : UInt64
    get_free_count : UInt64
  end

  IMemAllocatorCallbackTemp_GUID = "379a0cf0-c1de-11d2-abf5-00a0c905f375"
  IID_IMemAllocatorCallbackTemp = LibC::GUID.new(0x379a0cf0_u32, 0xc1de_u16, 0x11d2_u16, StaticArray[0xab_u8, 0xf5_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x5_u8, 0xf3_u8, 0x75_u8])
  struct IMemAllocatorCallbackTemp
    lpVtbl : IMemAllocatorCallbackTempVTbl*
  end

  struct IMemAllocatorNotifyCallbackTempVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    notify_release : UInt64
  end

  IMemAllocatorNotifyCallbackTemp_GUID = "92980b30-c1de-11d2-abf5-00a0c905f375"
  IID_IMemAllocatorNotifyCallbackTemp = LibC::GUID.new(0x92980b30_u32, 0xc1de_u16, 0x11d2_u16, StaticArray[0xab_u8, 0xf5_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x5_u8, 0xf3_u8, 0x75_u8])
  struct IMemAllocatorNotifyCallbackTemp
    lpVtbl : IMemAllocatorNotifyCallbackTempVTbl*
  end

  struct IMemInputPinVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_allocator : UInt64
    notify_allocator : UInt64
    get_allocator_requirements : UInt64
    receive : UInt64
    receive_multiple : UInt64
    receive_can_block : UInt64
  end

  IMemInputPin_GUID = "56a8689d-0ad4-11ce-b03a-0020af0ba770"
  IID_IMemInputPin = LibC::GUID.new(0x56a8689d_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IMemInputPin
    lpVtbl : IMemInputPinVTbl*
  end

  struct IAMovieSetupVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    register : UInt64
    unregister : UInt64
  end

  IAMovieSetup_GUID = "a3d8cec0-7e5a-11cf-bbc5-00805f6cef20"
  IID_IAMovieSetup = LibC::GUID.new(0xa3d8cec0_u32, 0x7e5a_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0xc5_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x6c_u8, 0xef_u8, 0x20_u8])
  struct IAMovieSetup
    lpVtbl : IAMovieSetupVTbl*
  end

  struct IMediaSeekingVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_capabilities : UInt64
    check_capabilities : UInt64
    is_format_supported : UInt64
    query_preferred_format : UInt64
    get_time_format : UInt64
    is_using_time_format : UInt64
    set_time_format : UInt64
    get_duration : UInt64
    get_stop_position : UInt64
    get_current_position : UInt64
    convert_time_format : UInt64
    set_positions : UInt64
    get_positions : UInt64
    get_available : UInt64
    set_rate : UInt64
    get_rate : UInt64
    get_preroll : UInt64
  end

  IMediaSeeking_GUID = "36b73880-c2c8-11cf-8b46-00805f6cef60"
  IID_IMediaSeeking = LibC::GUID.new(0x36b73880_u32, 0xc2c8_u16, 0x11cf_u16, StaticArray[0x8b_u8, 0x46_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x6c_u8, 0xef_u8, 0x60_u8])
  struct IMediaSeeking
    lpVtbl : IMediaSeekingVTbl*
  end

  struct IEnumRegFiltersVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    next : UInt64
    skip : UInt64
    reset : UInt64
    clone : UInt64
  end

  IEnumRegFilters_GUID = "56a868a4-0ad4-11ce-b03a-0020af0ba770"
  IID_IEnumRegFilters = LibC::GUID.new(0x56a868a4_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IEnumRegFilters
    lpVtbl : IEnumRegFiltersVTbl*
  end

  struct IFilterMapperVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    register_filter : UInt64
    register_filter_instance : UInt64
    register_pin : UInt64
    register_pin_type : UInt64
    unregister_filter : UInt64
    unregister_filter_instance : UInt64
    unregister_pin : UInt64
    enum_matching_filters : UInt64
  end

  IFilterMapper_GUID = "56a868a3-0ad4-11ce-b03a-0020af0ba770"
  IID_IFilterMapper = LibC::GUID.new(0x56a868a3_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IFilterMapper
    lpVtbl : IFilterMapperVTbl*
  end

  struct IFilterMapper2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    create_category : UInt64
    unregister_filter : UInt64
    register_filter : UInt64
    enum_matching_filters : UInt64
  end

  IFilterMapper2_GUID = "b79bb0b0-33c1-11d1-abe1-00a0c905f375"
  IID_IFilterMapper2 = LibC::GUID.new(0xb79bb0b0_u32, 0x33c1_u16, 0x11d1_u16, StaticArray[0xab_u8, 0xe1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x5_u8, 0xf3_u8, 0x75_u8])
  struct IFilterMapper2
    lpVtbl : IFilterMapper2VTbl*
  end

  struct IFilterMapper3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    create_category : UInt64
    unregister_filter : UInt64
    register_filter : UInt64
    enum_matching_filters : UInt64
    get_i_create_dev_enum : UInt64
  end

  IFilterMapper3_GUID = "b79bb0b1-33c1-11d1-abe1-00a0c905f375"
  IID_IFilterMapper3 = LibC::GUID.new(0xb79bb0b1_u32, 0x33c1_u16, 0x11d1_u16, StaticArray[0xab_u8, 0xe1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x5_u8, 0xf3_u8, 0x75_u8])
  struct IFilterMapper3
    lpVtbl : IFilterMapper3VTbl*
  end

  struct IQualityControlVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    notify : UInt64
    set_sink : UInt64
  end

  IQualityControl_GUID = "56a868a5-0ad4-11ce-b03a-0020af0ba770"
  IID_IQualityControl = LibC::GUID.new(0x56a868a5_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IQualityControl
    lpVtbl : IQualityControlVTbl*
  end

  struct IOverlayNotifyVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    on_palette_change : UInt64
    on_clip_change : UInt64
    on_color_key_change : UInt64
    on_position_change : UInt64
  end

  IOverlayNotify_GUID = "56a868a0-0ad4-11ce-b03a-0020af0ba770"
  IID_IOverlayNotify = LibC::GUID.new(0x56a868a0_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IOverlayNotify
    lpVtbl : IOverlayNotifyVTbl*
  end

  struct IOverlayNotify2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    on_palette_change : UInt64
    on_clip_change : UInt64
    on_color_key_change : UInt64
    on_position_change : UInt64
    on_display_change : UInt64
  end

  IOverlayNotify2_GUID = "680efa10-d535-11d1-87c8-00a0c9223196"
  IID_IOverlayNotify2 = LibC::GUID.new(0x680efa10_u32, 0xd535_u16, 0x11d1_u16, StaticArray[0x87_u8, 0xc8_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x22_u8, 0x31_u8, 0x96_u8])
  struct IOverlayNotify2
    lpVtbl : IOverlayNotify2VTbl*
  end

  struct IOverlayVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_palette : UInt64
    set_palette : UInt64
    get_default_color_key : UInt64
    get_color_key : UInt64
    set_color_key : UInt64
    get_window_handle : UInt64
    get_clip_list : UInt64
    get_video_position : UInt64
    advise : UInt64
    unadvise : UInt64
  end

  IOverlay_GUID = "56a868a1-0ad4-11ce-b03a-0020af0ba770"
  IID_IOverlay = LibC::GUID.new(0x56a868a1_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IOverlay
    lpVtbl : IOverlayVTbl*
  end

  struct IMediaEventSinkVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    notify : UInt64
  end

  IMediaEventSink_GUID = "56a868a2-0ad4-11ce-b03a-0020af0ba770"
  IID_IMediaEventSink = LibC::GUID.new(0x56a868a2_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IMediaEventSink
    lpVtbl : IMediaEventSinkVTbl*
  end

  struct IFileSourceFilterVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    load : UInt64
    get_cur_file : UInt64
  end

  IFileSourceFilter_GUID = "56a868a6-0ad4-11ce-b03a-0020af0ba770"
  IID_IFileSourceFilter = LibC::GUID.new(0x56a868a6_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IFileSourceFilter
    lpVtbl : IFileSourceFilterVTbl*
  end

  struct IFileSinkFilterVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_file_name : UInt64
    get_cur_file : UInt64
  end

  IFileSinkFilter_GUID = "a2104830-7c70-11cf-8bce-00aa00a3f1a6"
  IID_IFileSinkFilter = LibC::GUID.new(0xa2104830_u32, 0x7c70_u16, 0x11cf_u16, StaticArray[0x8b_u8, 0xce_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xa3_u8, 0xf1_u8, 0xa6_u8])
  struct IFileSinkFilter
    lpVtbl : IFileSinkFilterVTbl*
  end

  struct IFileSinkFilter2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_file_name : UInt64
    get_cur_file : UInt64
    set_mode : UInt64
    get_mode : UInt64
  end

  IFileSinkFilter2_GUID = "00855b90-ce1b-11d0-bd4f-00a0c911ce86"
  IID_IFileSinkFilter2 = LibC::GUID.new(0x855b90_u32, 0xce1b_u16, 0x11d0_u16, StaticArray[0xbd_u8, 0x4f_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0xce_u8, 0x86_u8])
  struct IFileSinkFilter2
    lpVtbl : IFileSinkFilter2VTbl*
  end

  struct IGraphBuilderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    add_filter : UInt64
    remove_filter : UInt64
    enum_filters : UInt64
    find_filter_by_name : UInt64
    connect_direct : UInt64
    reconnect : UInt64
    disconnect : UInt64
    set_default_sync_source : UInt64
    connect : UInt64
    render : UInt64
    render_file : UInt64
    add_source_filter : UInt64
    set_log_file : UInt64
    abort : UInt64
    should_operation_continue : UInt64
  end

  IGraphBuilder_GUID = "56a868a9-0ad4-11ce-b03a-0020af0ba770"
  IID_IGraphBuilder = LibC::GUID.new(0x56a868a9_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IGraphBuilder
    lpVtbl : IGraphBuilderVTbl*
  end

  struct ICaptureGraphBuilderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_filtergraph : UInt64
    get_filtergraph : UInt64
    set_output_file_name : UInt64
    find_interface : UInt64
    render_stream : UInt64
    control_stream : UInt64
    alloc_cap_file : UInt64
    copy_capture_file : UInt64
  end

  ICaptureGraphBuilder_GUID = "bf87b6e0-8c27-11d0-b3f0-00aa003761c5"
  IID_ICaptureGraphBuilder = LibC::GUID.new(0xbf87b6e0_u32, 0x8c27_u16, 0x11d0_u16, StaticArray[0xb3_u8, 0xf0_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x37_u8, 0x61_u8, 0xc5_u8])
  struct ICaptureGraphBuilder
    lpVtbl : ICaptureGraphBuilderVTbl*
  end

  struct IAMCopyCaptureFileProgressVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    progress : UInt64
  end

  IAMCopyCaptureFileProgress_GUID = "670d1d20-a068-11d0-b3f0-00aa003761c5"
  IID_IAMCopyCaptureFileProgress = LibC::GUID.new(0x670d1d20_u32, 0xa068_u16, 0x11d0_u16, StaticArray[0xb3_u8, 0xf0_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x37_u8, 0x61_u8, 0xc5_u8])
  struct IAMCopyCaptureFileProgress
    lpVtbl : IAMCopyCaptureFileProgressVTbl*
  end

  struct ICaptureGraphBuilder2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_filtergraph : UInt64
    get_filtergraph : UInt64
    set_output_file_name : UInt64
    find_interface : UInt64
    render_stream : UInt64
    control_stream : UInt64
    alloc_cap_file : UInt64
    copy_capture_file : UInt64
    find_pin : UInt64
  end

  ICaptureGraphBuilder2_GUID = "93e5a4e0-2d50-11d2-abfa-00a0c9c6e38d"
  IID_ICaptureGraphBuilder2 = LibC::GUID.new(0x93e5a4e0_u32, 0x2d50_u16, 0x11d2_u16, StaticArray[0xab_u8, 0xfa_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xc6_u8, 0xe3_u8, 0x8d_u8])
  struct ICaptureGraphBuilder2
    lpVtbl : ICaptureGraphBuilder2VTbl*
  end

  struct IFilterGraph2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    add_filter : UInt64
    remove_filter : UInt64
    enum_filters : UInt64
    find_filter_by_name : UInt64
    connect_direct : UInt64
    reconnect : UInt64
    disconnect : UInt64
    set_default_sync_source : UInt64
    connect : UInt64
    render : UInt64
    render_file : UInt64
    add_source_filter : UInt64
    set_log_file : UInt64
    abort : UInt64
    should_operation_continue : UInt64
    add_source_filter_for_moniker : UInt64
    reconnect_ex : UInt64
    render_ex : UInt64
  end

  IFilterGraph2_GUID = "36b73882-c2c8-11cf-8b46-00805f6cef60"
  IID_IFilterGraph2 = LibC::GUID.new(0x36b73882_u32, 0xc2c8_u16, 0x11cf_u16, StaticArray[0x8b_u8, 0x46_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x6c_u8, 0xef_u8, 0x60_u8])
  struct IFilterGraph2
    lpVtbl : IFilterGraph2VTbl*
  end

  struct IFilterGraph3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    add_filter : UInt64
    remove_filter : UInt64
    enum_filters : UInt64
    find_filter_by_name : UInt64
    connect_direct : UInt64
    reconnect : UInt64
    disconnect : UInt64
    set_default_sync_source : UInt64
    connect : UInt64
    render : UInt64
    render_file : UInt64
    add_source_filter : UInt64
    set_log_file : UInt64
    abort : UInt64
    should_operation_continue : UInt64
    add_source_filter_for_moniker : UInt64
    reconnect_ex : UInt64
    render_ex : UInt64
    set_sync_source_ex : UInt64
  end

  IFilterGraph3_GUID = "aaf38154-b80b-422f-91e6-b66467509a07"
  IID_IFilterGraph3 = LibC::GUID.new(0xaaf38154_u32, 0xb80b_u16, 0x422f_u16, StaticArray[0x91_u8, 0xe6_u8, 0xb6_u8, 0x64_u8, 0x67_u8, 0x50_u8, 0x9a_u8, 0x7_u8])
  struct IFilterGraph3
    lpVtbl : IFilterGraph3VTbl*
  end

  struct IStreamBuilderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    render : UInt64
    backout : UInt64
  end

  IStreamBuilder_GUID = "56a868bf-0ad4-11ce-b03a-0020af0ba770"
  IID_IStreamBuilder = LibC::GUID.new(0x56a868bf_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IStreamBuilder
    lpVtbl : IStreamBuilderVTbl*
  end

  struct IAsyncReaderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    request_allocator : UInt64
    request : UInt64
    wait_for_next : UInt64
    sync_read_aligned : UInt64
    sync_read : UInt64
    length : UInt64
    begin_flush : UInt64
    end_flush : UInt64
  end

  IAsyncReader_GUID = "56a868aa-0ad4-11ce-b03a-0020af0ba770"
  IID_IAsyncReader = LibC::GUID.new(0x56a868aa_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IAsyncReader
    lpVtbl : IAsyncReaderVTbl*
  end

  struct IGraphVersionVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    query_version : UInt64
  end

  IGraphVersion_GUID = "56a868ab-0ad4-11ce-b03a-0020af0ba770"
  IID_IGraphVersion = LibC::GUID.new(0x56a868ab_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IGraphVersion
    lpVtbl : IGraphVersionVTbl*
  end

  struct IResourceConsumerVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    acquire_resource : UInt64
    release_resource : UInt64
  end

  IResourceConsumer_GUID = "56a868ad-0ad4-11ce-b03a-0020af0ba770"
  IID_IResourceConsumer = LibC::GUID.new(0x56a868ad_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IResourceConsumer
    lpVtbl : IResourceConsumerVTbl*
  end

  struct IResourceManagerVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    register : UInt64
    register_group : UInt64
    request_resource : UInt64
    notify_acquire : UInt64
    notify_release : UInt64
    cancel_request : UInt64
    set_focus : UInt64
    release_focus : UInt64
  end

  IResourceManager_GUID = "56a868ac-0ad4-11ce-b03a-0020af0ba770"
  IID_IResourceManager = LibC::GUID.new(0x56a868ac_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IResourceManager
    lpVtbl : IResourceManagerVTbl*
  end

  struct IDistributorNotifyVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    stop : UInt64
    pause : UInt64
    run : UInt64
    set_sync_source : UInt64
    notify_graph_change : UInt64
  end

  IDistributorNotify_GUID = "56a868af-0ad4-11ce-b03a-0020af0ba770"
  IID_IDistributorNotify = LibC::GUID.new(0x56a868af_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IDistributorNotify
    lpVtbl : IDistributorNotifyVTbl*
  end

  struct IAMStreamControlVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    start_at : UInt64
    stop_at : UInt64
    get_info : UInt64
  end

  IAMStreamControl_GUID = "36b73881-c2c8-11cf-8b46-00805f6cef60"
  IID_IAMStreamControl = LibC::GUID.new(0x36b73881_u32, 0xc2c8_u16, 0x11cf_u16, StaticArray[0x8b_u8, 0x46_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x6c_u8, 0xef_u8, 0x60_u8])
  struct IAMStreamControl
    lpVtbl : IAMStreamControlVTbl*
  end

  struct ISeekingPassThruVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    init : UInt64
  end

  ISeekingPassThru_GUID = "36b73883-c2c8-11cf-8b46-00805f6cef60"
  IID_ISeekingPassThru = LibC::GUID.new(0x36b73883_u32, 0xc2c8_u16, 0x11cf_u16, StaticArray[0x8b_u8, 0x46_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x6c_u8, 0xef_u8, 0x60_u8])
  struct ISeekingPassThru
    lpVtbl : ISeekingPassThruVTbl*
  end

  struct IAMStreamConfigVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_format : UInt64
    get_format : UInt64
    get_number_of_capabilities : UInt64
    get_stream_caps : UInt64
  end

  IAMStreamConfig_GUID = "c6e13340-30ac-11d0-a18c-00a0c9118956"
  IID_IAMStreamConfig = LibC::GUID.new(0xc6e13340_u32, 0x30ac_u16, 0x11d0_u16, StaticArray[0xa1_u8, 0x8c_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0x89_u8, 0x56_u8])
  struct IAMStreamConfig
    lpVtbl : IAMStreamConfigVTbl*
  end

  struct IConfigInterleavingVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    put_mode : UInt64
    get_mode : UInt64
    put_interleaving : UInt64
    get_interleaving : UInt64
  end

  IConfigInterleaving_GUID = "bee3d220-157b-11d0-bd23-00a0c911ce86"
  IID_IConfigInterleaving = LibC::GUID.new(0xbee3d220_u32, 0x157b_u16, 0x11d0_u16, StaticArray[0xbd_u8, 0x23_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0xce_u8, 0x86_u8])
  struct IConfigInterleaving
    lpVtbl : IConfigInterleavingVTbl*
  end

  struct IConfigAviMuxVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_master_stream : UInt64
    get_master_stream : UInt64
    set_output_compatibility_index : UInt64
    get_output_compatibility_index : UInt64
  end

  IConfigAviMux_GUID = "5acd6aa0-f482-11ce-8b67-00aa00a3f1a6"
  IID_IConfigAviMux = LibC::GUID.new(0x5acd6aa0_u32, 0xf482_u16, 0x11ce_u16, StaticArray[0x8b_u8, 0x67_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xa3_u8, 0xf1_u8, 0xa6_u8])
  struct IConfigAviMux
    lpVtbl : IConfigAviMuxVTbl*
  end

  struct IAMVideoCompressionVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    put_key_frame_rate : UInt64
    get_key_frame_rate : UInt64
    put_p_frames_per_key_frame : UInt64
    get_p_frames_per_key_frame : UInt64
    put_quality : UInt64
    get_quality : UInt64
    put_window_size : UInt64
    get_window_size : UInt64
    get_info : UInt64
    override_key_frame : UInt64
    override_frame_size : UInt64
  end

  IAMVideoCompression_GUID = "c6e13343-30ac-11d0-a18c-00a0c9118956"
  IID_IAMVideoCompression = LibC::GUID.new(0xc6e13343_u32, 0x30ac_u16, 0x11d0_u16, StaticArray[0xa1_u8, 0x8c_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0x89_u8, 0x56_u8])
  struct IAMVideoCompression
    lpVtbl : IAMVideoCompressionVTbl*
  end

  struct IAMVfwCaptureDialogsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    has_dialog : UInt64
    show_dialog : UInt64
    send_driver_message : UInt64
  end

  IAMVfwCaptureDialogs_GUID = "d8d715a0-6e5e-11d0-b3f0-00aa003761c5"
  IID_IAMVfwCaptureDialogs = LibC::GUID.new(0xd8d715a0_u32, 0x6e5e_u16, 0x11d0_u16, StaticArray[0xb3_u8, 0xf0_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x37_u8, 0x61_u8, 0xc5_u8])
  struct IAMVfwCaptureDialogs
    lpVtbl : IAMVfwCaptureDialogsVTbl*
  end

  struct IAMVfwCompressDialogsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    show_dialog : UInt64
    get_state : UInt64
    set_state : UInt64
    send_driver_message : UInt64
  end

  IAMVfwCompressDialogs_GUID = "d8d715a3-6e5e-11d0-b3f0-00aa003761c5"
  IID_IAMVfwCompressDialogs = LibC::GUID.new(0xd8d715a3_u32, 0x6e5e_u16, 0x11d0_u16, StaticArray[0xb3_u8, 0xf0_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x37_u8, 0x61_u8, 0xc5_u8])
  struct IAMVfwCompressDialogs
    lpVtbl : IAMVfwCompressDialogsVTbl*
  end

  struct IAMDroppedFramesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_num_dropped : UInt64
    get_num_not_dropped : UInt64
    get_dropped_info : UInt64
    get_average_frame_size : UInt64
  end

  IAMDroppedFrames_GUID = "c6e13344-30ac-11d0-a18c-00a0c9118956"
  IID_IAMDroppedFrames = LibC::GUID.new(0xc6e13344_u32, 0x30ac_u16, 0x11d0_u16, StaticArray[0xa1_u8, 0x8c_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0x89_u8, 0x56_u8])
  struct IAMDroppedFrames
    lpVtbl : IAMDroppedFramesVTbl*
  end

  struct IAMAudioInputMixerVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    put_enable : UInt64
    get_enable : UInt64
    put_mono : UInt64
    get_mono : UInt64
    put_mix_level : UInt64
    get_mix_level : UInt64
    put_pan : UInt64
    get_pan : UInt64
    put_loudness : UInt64
    get_loudness : UInt64
    put_treble : UInt64
    get_treble : UInt64
    get_treble_range : UInt64
    put_bass : UInt64
    get_bass : UInt64
    get_bass_range : UInt64
  end

  IAMAudioInputMixer_GUID = "54c39221-8380-11d0-b3f0-00aa003761c5"
  IID_IAMAudioInputMixer = LibC::GUID.new(0x54c39221_u32, 0x8380_u16, 0x11d0_u16, StaticArray[0xb3_u8, 0xf0_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x37_u8, 0x61_u8, 0xc5_u8])
  struct IAMAudioInputMixer
    lpVtbl : IAMAudioInputMixerVTbl*
  end

  struct IAMBufferNegotiationVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    suggest_allocator_properties : UInt64
    get_allocator_properties : UInt64
  end

  IAMBufferNegotiation_GUID = "56ed71a0-af5f-11d0-b3f0-00aa003761c5"
  IID_IAMBufferNegotiation = LibC::GUID.new(0x56ed71a0_u32, 0xaf5f_u16, 0x11d0_u16, StaticArray[0xb3_u8, 0xf0_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x37_u8, 0x61_u8, 0xc5_u8])
  struct IAMBufferNegotiation
    lpVtbl : IAMBufferNegotiationVTbl*
  end

  struct IAMAnalogVideoDecoderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_available_tv_formats : UInt64
    put_tv_format : UInt64
    get_tv_format : UInt64
    get_horizontal_locked : UInt64
    put_vcr_horizontal_locking : UInt64
    get_vcr_horizontal_locking : UInt64
    get_number_of_lines : UInt64
    put_output_enable : UInt64
    get_output_enable : UInt64
  end

  IAMAnalogVideoDecoder_GUID = "c6e13350-30ac-11d0-a18c-00a0c9118956"
  IID_IAMAnalogVideoDecoder = LibC::GUID.new(0xc6e13350_u32, 0x30ac_u16, 0x11d0_u16, StaticArray[0xa1_u8, 0x8c_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0x89_u8, 0x56_u8])
  struct IAMAnalogVideoDecoder
    lpVtbl : IAMAnalogVideoDecoderVTbl*
  end

  struct IAMVideoProcAmpVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_range : UInt64
    set : UInt64
    get : UInt64
  end

  IAMVideoProcAmp_GUID = "c6e13360-30ac-11d0-a18c-00a0c9118956"
  IID_IAMVideoProcAmp = LibC::GUID.new(0xc6e13360_u32, 0x30ac_u16, 0x11d0_u16, StaticArray[0xa1_u8, 0x8c_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0x89_u8, 0x56_u8])
  struct IAMVideoProcAmp
    lpVtbl : IAMVideoProcAmpVTbl*
  end

  struct IAMCameraControlVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_range : UInt64
    set : UInt64
    get : UInt64
  end

  IAMCameraControl_GUID = "c6e13370-30ac-11d0-a18c-00a0c9118956"
  IID_IAMCameraControl = LibC::GUID.new(0xc6e13370_u32, 0x30ac_u16, 0x11d0_u16, StaticArray[0xa1_u8, 0x8c_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0x89_u8, 0x56_u8])
  struct IAMCameraControl
    lpVtbl : IAMCameraControlVTbl*
  end

  struct IAMVideoControlVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_caps : UInt64
    set_mode : UInt64
    get_mode : UInt64
    get_current_actual_frame_rate : UInt64
    get_max_available_frame_rate : UInt64
    get_frame_rate_list : UInt64
  end

  IAMVideoControl_GUID = "6a2e0670-28e4-11d0-a18c-00a0c9118956"
  IID_IAMVideoControl = LibC::GUID.new(0x6a2e0670_u32, 0x28e4_u16, 0x11d0_u16, StaticArray[0xa1_u8, 0x8c_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0x89_u8, 0x56_u8])
  struct IAMVideoControl
    lpVtbl : IAMVideoControlVTbl*
  end

  struct IAMCrossbarVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_pin_counts : UInt64
    can_route : UInt64
    route : UInt64
    get_is_routed_to : UInt64
    get_crossbar_pin_info : UInt64
  end

  IAMCrossbar_GUID = "c6e13380-30ac-11d0-a18c-00a0c9118956"
  IID_IAMCrossbar = LibC::GUID.new(0xc6e13380_u32, 0x30ac_u16, 0x11d0_u16, StaticArray[0xa1_u8, 0x8c_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0x89_u8, 0x56_u8])
  struct IAMCrossbar
    lpVtbl : IAMCrossbarVTbl*
  end

  struct IAMTunerVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    put_channel : UInt64
    get_channel : UInt64
    channel_min_max : UInt64
    put_country_code : UInt64
    get_country_code : UInt64
    put_tuning_space : UInt64
    get_tuning_space : UInt64
    logon : UInt64
    logout : UInt64
    signal_present : UInt64
    put_mode : UInt64
    get_mode : UInt64
    get_available_modes : UInt64
    register_notification_call_back : UInt64
    un_register_notification_call_back : UInt64
  end

  IAMTuner_GUID = "211a8761-03ac-11d1-8d13-00aa00bd8339"
  IID_IAMTuner = LibC::GUID.new(0x211a8761_u32, 0x3ac_u16, 0x11d1_u16, StaticArray[0x8d_u8, 0x13_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0x83_u8, 0x39_u8])
  struct IAMTuner
    lpVtbl : IAMTunerVTbl*
  end

  struct IAMTunerNotificationVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    on_event : UInt64
  end

  IAMTunerNotification_GUID = "211a8760-03ac-11d1-8d13-00aa00bd8339"
  IID_IAMTunerNotification = LibC::GUID.new(0x211a8760_u32, 0x3ac_u16, 0x11d1_u16, StaticArray[0x8d_u8, 0x13_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0x83_u8, 0x39_u8])
  struct IAMTunerNotification
    lpVtbl : IAMTunerNotificationVTbl*
  end

  struct IAMTVTunerVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    put_channel : UInt64
    get_channel : UInt64
    channel_min_max : UInt64
    put_country_code : UInt64
    get_country_code : UInt64
    put_tuning_space : UInt64
    get_tuning_space : UInt64
    logon : UInt64
    logout : UInt64
    signal_present : UInt64
    put_mode : UInt64
    get_mode : UInt64
    get_available_modes : UInt64
    register_notification_call_back : UInt64
    un_register_notification_call_back : UInt64
    get_available_tv_formats : UInt64
    get_tv_format : UInt64
    auto_tune : UInt64
    store_auto_tune : UInt64
    get_num_input_connections : UInt64
    put_input_type : UInt64
    get_input_type : UInt64
    put_connect_input : UInt64
    get_connect_input : UInt64
    get_video_frequency : UInt64
    get_audio_frequency : UInt64
  end

  IAMTVTuner_GUID = "211a8766-03ac-11d1-8d13-00aa00bd8339"
  IID_IAMTVTuner = LibC::GUID.new(0x211a8766_u32, 0x3ac_u16, 0x11d1_u16, StaticArray[0x8d_u8, 0x13_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0x83_u8, 0x39_u8])
  struct IAMTVTuner
    lpVtbl : IAMTVTunerVTbl*
  end

  struct IBPCSatelliteTunerVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    put_channel : UInt64
    get_channel : UInt64
    channel_min_max : UInt64
    put_country_code : UInt64
    get_country_code : UInt64
    put_tuning_space : UInt64
    get_tuning_space : UInt64
    logon : UInt64
    logout : UInt64
    signal_present : UInt64
    put_mode : UInt64
    get_mode : UInt64
    get_available_modes : UInt64
    register_notification_call_back : UInt64
    un_register_notification_call_back : UInt64
    get_default_sub_channel_types : UInt64
    put_default_sub_channel_types : UInt64
    is_taping_permitted : UInt64
  end

  IBPCSatelliteTuner_GUID = "211a8765-03ac-11d1-8d13-00aa00bd8339"
  IID_IBPCSatelliteTuner = LibC::GUID.new(0x211a8765_u32, 0x3ac_u16, 0x11d1_u16, StaticArray[0x8d_u8, 0x13_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0x83_u8, 0x39_u8])
  struct IBPCSatelliteTuner
    lpVtbl : IBPCSatelliteTunerVTbl*
  end

  struct IAMTVAudioVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_hardware_supported_tv_audio_modes : UInt64
    get_available_tv_audio_modes : UInt64
    get_tv_audio_mode : UInt64
    put_tv_audio_mode : UInt64
    register_notification_call_back : UInt64
    un_register_notification_call_back : UInt64
  end

  IAMTVAudio_GUID = "83ec1c30-23d1-11d1-99e6-00a0c9560266"
  IID_IAMTVAudio = LibC::GUID.new(0x83ec1c30_u32, 0x23d1_u16, 0x11d1_u16, StaticArray[0x99_u8, 0xe6_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x56_u8, 0x2_u8, 0x66_u8])
  struct IAMTVAudio
    lpVtbl : IAMTVAudioVTbl*
  end

  struct IAMTVAudioNotificationVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    on_event : UInt64
  end

  IAMTVAudioNotification_GUID = "83ec1c33-23d1-11d1-99e6-00a0c9560266"
  IID_IAMTVAudioNotification = LibC::GUID.new(0x83ec1c33_u32, 0x23d1_u16, 0x11d1_u16, StaticArray[0x99_u8, 0xe6_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x56_u8, 0x2_u8, 0x66_u8])
  struct IAMTVAudioNotification
    lpVtbl : IAMTVAudioNotificationVTbl*
  end

  struct IAMAnalogVideoEncoderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_available_tv_formats : UInt64
    put_tv_format : UInt64
    get_tv_format : UInt64
    put_copy_protection : UInt64
    get_copy_protection : UInt64
    put_cc_enable : UInt64
    get_cc_enable : UInt64
  end

  IAMAnalogVideoEncoder_GUID = "c6e133b0-30ac-11d0-a18c-00a0c9118956"
  IID_IAMAnalogVideoEncoder = LibC::GUID.new(0xc6e133b0_u32, 0x30ac_u16, 0x11d0_u16, StaticArray[0xa1_u8, 0x8c_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0x89_u8, 0x56_u8])
  struct IAMAnalogVideoEncoder
    lpVtbl : IAMAnalogVideoEncoderVTbl*
  end

  struct IMediaPropertyBagVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    read : UInt64
    write : UInt64
    enum_property : UInt64
  end

  IMediaPropertyBag_GUID = "6025a880-c0d5-11d0-bd4e-00a0c911ce86"
  IID_IMediaPropertyBag = LibC::GUID.new(0x6025a880_u32, 0xc0d5_u16, 0x11d0_u16, StaticArray[0xbd_u8, 0x4e_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0xce_u8, 0x86_u8])
  struct IMediaPropertyBag
    lpVtbl : IMediaPropertyBagVTbl*
  end

  struct IPersistMediaPropertyBagVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_class_id : UInt64
    init_new : UInt64
    load : UInt64
    save : UInt64
  end

  IPersistMediaPropertyBag_GUID = "5738e040-b67f-11d0-bd4d-00a0c911ce86"
  IID_IPersistMediaPropertyBag = LibC::GUID.new(0x5738e040_u32, 0xb67f_u16, 0x11d0_u16, StaticArray[0xbd_u8, 0x4d_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0xce_u8, 0x86_u8])
  struct IPersistMediaPropertyBag
    lpVtbl : IPersistMediaPropertyBagVTbl*
  end

  struct IAMPhysicalPinInfoVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_physical_type : UInt64
  end

  IAMPhysicalPinInfo_GUID = "f938c991-3029-11cf-8c44-00aa006b6814"
  IID_IAMPhysicalPinInfo = LibC::GUID.new(0xf938c991_u32, 0x3029_u16, 0x11cf_u16, StaticArray[0x8c_u8, 0x44_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0x68_u8, 0x14_u8])
  struct IAMPhysicalPinInfo
    lpVtbl : IAMPhysicalPinInfoVTbl*
  end

  struct IAMExtDeviceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_capability : UInt64
    get_external_device_id : UInt64
    get_external_device_version : UInt64
    put_device_power : UInt64
    get_device_power : UInt64
    calibrate : UInt64
    put_device_port : UInt64
    get_device_port : UInt64
  end

  IAMExtDevice_GUID = "b5730a90-1a2c-11cf-8c23-00aa006b6814"
  IID_IAMExtDevice = LibC::GUID.new(0xb5730a90_u32, 0x1a2c_u16, 0x11cf_u16, StaticArray[0x8c_u8, 0x23_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0x68_u8, 0x14_u8])
  struct IAMExtDevice
    lpVtbl : IAMExtDeviceVTbl*
  end

  struct IAMExtTransportVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_capability : UInt64
    put_media_state : UInt64
    get_media_state : UInt64
    put_local_control : UInt64
    get_local_control : UInt64
    get_status : UInt64
    get_transport_basic_parameters : UInt64
    set_transport_basic_parameters : UInt64
    get_transport_video_parameters : UInt64
    set_transport_video_parameters : UInt64
    get_transport_audio_parameters : UInt64
    set_transport_audio_parameters : UInt64
    put_mode : UInt64
    get_mode : UInt64
    put_rate : UInt64
    get_rate : UInt64
    get_chase : UInt64
    set_chase : UInt64
    get_bump : UInt64
    set_bump : UInt64
    get_anti_clog_control : UInt64
    put_anti_clog_control : UInt64
    get_edit_property_set : UInt64
    set_edit_property_set : UInt64
    get_edit_property : UInt64
    set_edit_property : UInt64
    get_edit_start : UInt64
    put_edit_start : UInt64
  end

  IAMExtTransport_GUID = "a03cd5f0-3045-11cf-8c44-00aa006b6814"
  IID_IAMExtTransport = LibC::GUID.new(0xa03cd5f0_u32, 0x3045_u16, 0x11cf_u16, StaticArray[0x8c_u8, 0x44_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0x68_u8, 0x14_u8])
  struct IAMExtTransport
    lpVtbl : IAMExtTransportVTbl*
  end

  struct IAMTimecodeReaderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tcr_mode : UInt64
    set_tcr_mode : UInt64
    put_vitc_line : UInt64
    get_vitc_line : UInt64
    get_timecode : UInt64
  end

  IAMTimecodeReader_GUID = "9b496ce1-811b-11cf-8c77-00aa006b6814"
  IID_IAMTimecodeReader = LibC::GUID.new(0x9b496ce1_u32, 0x811b_u16, 0x11cf_u16, StaticArray[0x8c_u8, 0x77_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0x68_u8, 0x14_u8])
  struct IAMTimecodeReader
    lpVtbl : IAMTimecodeReaderVTbl*
  end

  struct IAMTimecodeGeneratorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tcg_mode : UInt64
    set_tcg_mode : UInt64
    put_vitc_line : UInt64
    get_vitc_line : UInt64
    set_timecode : UInt64
    get_timecode : UInt64
  end

  IAMTimecodeGenerator_GUID = "9b496ce0-811b-11cf-8c77-00aa006b6814"
  IID_IAMTimecodeGenerator = LibC::GUID.new(0x9b496ce0_u32, 0x811b_u16, 0x11cf_u16, StaticArray[0x8c_u8, 0x77_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0x68_u8, 0x14_u8])
  struct IAMTimecodeGenerator
    lpVtbl : IAMTimecodeGeneratorVTbl*
  end

  struct IAMTimecodeDisplayVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tc_display_enable : UInt64
    set_tc_display_enable : UInt64
    get_tc_display : UInt64
    set_tc_display : UInt64
  end

  IAMTimecodeDisplay_GUID = "9b496ce2-811b-11cf-8c77-00aa006b6814"
  IID_IAMTimecodeDisplay = LibC::GUID.new(0x9b496ce2_u32, 0x811b_u16, 0x11cf_u16, StaticArray[0x8c_u8, 0x77_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0x68_u8, 0x14_u8])
  struct IAMTimecodeDisplay
    lpVtbl : IAMTimecodeDisplayVTbl*
  end

  struct IAMDevMemoryAllocatorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_info : UInt64
    check_memory : UInt64
    alloc : UInt64
    free : UInt64
    get_dev_memory_object : UInt64
  end

  IAMDevMemoryAllocator_GUID = "c6545bf0-e76b-11d0-bd52-00a0c911ce86"
  IID_IAMDevMemoryAllocator = LibC::GUID.new(0xc6545bf0_u32, 0xe76b_u16, 0x11d0_u16, StaticArray[0xbd_u8, 0x52_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0xce_u8, 0x86_u8])
  struct IAMDevMemoryAllocator
    lpVtbl : IAMDevMemoryAllocatorVTbl*
  end

  struct IAMDevMemoryControlVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    query_write_sync : UInt64
    write_sync : UInt64
    get_dev_id : UInt64
  end

  IAMDevMemoryControl_GUID = "c6545bf1-e76b-11d0-bd52-00a0c911ce86"
  IID_IAMDevMemoryControl = LibC::GUID.new(0xc6545bf1_u32, 0xe76b_u16, 0x11d0_u16, StaticArray[0xbd_u8, 0x52_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0xce_u8, 0x86_u8])
  struct IAMDevMemoryControl
    lpVtbl : IAMDevMemoryControlVTbl*
  end

  struct IAMStreamSelectVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    count : UInt64
    info : UInt64
    enable : UInt64
  end

  IAMStreamSelect_GUID = "c1960960-17f5-11d1-abe1-00a0c905f375"
  IID_IAMStreamSelect = LibC::GUID.new(0xc1960960_u32, 0x17f5_u16, 0x11d1_u16, StaticArray[0xab_u8, 0xe1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x5_u8, 0xf3_u8, 0x75_u8])
  struct IAMStreamSelect
    lpVtbl : IAMStreamSelectVTbl*
  end

  struct IAMResourceControlVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    reserve : UInt64
  end

  IAMResourceControl_GUID = "8389d2d0-77d7-11d1-abe6-00a0c905f375"
  IID_IAMResourceControl = LibC::GUID.new(0x8389d2d0_u32, 0x77d7_u16, 0x11d1_u16, StaticArray[0xab_u8, 0xe6_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x5_u8, 0xf3_u8, 0x75_u8])
  struct IAMResourceControl
    lpVtbl : IAMResourceControlVTbl*
  end

  struct IAMClockAdjustVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_clock_delta : UInt64
  end

  IAMClockAdjust_GUID = "4d5466b0-a49c-11d1-abe8-00a0c905f375"
  IID_IAMClockAdjust = LibC::GUID.new(0x4d5466b0_u32, 0xa49c_u16, 0x11d1_u16, StaticArray[0xab_u8, 0xe8_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x5_u8, 0xf3_u8, 0x75_u8])
  struct IAMClockAdjust
    lpVtbl : IAMClockAdjustVTbl*
  end

  struct IAMFilterMiscFlagsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_misc_flags : UInt64
  end

  IAMFilterMiscFlags_GUID = "2dd74950-a890-11d1-abe8-00a0c905f375"
  IID_IAMFilterMiscFlags = LibC::GUID.new(0x2dd74950_u32, 0xa890_u16, 0x11d1_u16, StaticArray[0xab_u8, 0xe8_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x5_u8, 0xf3_u8, 0x75_u8])
  struct IAMFilterMiscFlags
    lpVtbl : IAMFilterMiscFlagsVTbl*
  end

  struct IDrawVideoImageVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    draw_video_image_begin : UInt64
    draw_video_image_end : UInt64
    draw_video_image_draw : UInt64
  end

  IDrawVideoImage_GUID = "48efb120-ab49-11d2-aed2-00a0c995e8d5"
  IID_IDrawVideoImage = LibC::GUID.new(0x48efb120_u32, 0xab49_u16, 0x11d2_u16, StaticArray[0xae_u8, 0xd2_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x95_u8, 0xe8_u8, 0xd5_u8])
  struct IDrawVideoImage
    lpVtbl : IDrawVideoImageVTbl*
  end

  struct IDecimateVideoImageVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_decimation_image_size : UInt64
    reset_decimation_image_size : UInt64
  end

  IDecimateVideoImage_GUID = "2e5ea3e0-e924-11d2-b6da-00a0c995e8df"
  IID_IDecimateVideoImage = LibC::GUID.new(0x2e5ea3e0_u32, 0xe924_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0xda_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x95_u8, 0xe8_u8, 0xdf_u8])
  struct IDecimateVideoImage
    lpVtbl : IDecimateVideoImageVTbl*
  end

  struct IAMVideoDecimationPropertiesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    query_decimation_usage : UInt64
    set_decimation_usage : UInt64
  end

  IAMVideoDecimationProperties_GUID = "60d32930-13da-11d3-9ec6-c4fcaef5c7be"
  IID_IAMVideoDecimationProperties = LibC::GUID.new(0x60d32930_u32, 0x13da_u16, 0x11d3_u16, StaticArray[0x9e_u8, 0xc6_u8, 0xc4_u8, 0xfc_u8, 0xae_u8, 0xf5_u8, 0xc7_u8, 0xbe_u8])
  struct IAMVideoDecimationProperties
    lpVtbl : IAMVideoDecimationPropertiesVTbl*
  end

  struct IVideoFrameStepVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    step : UInt64
    can_step : UInt64
    cancel_step : UInt64
  end

  IVideoFrameStep_GUID = "e46a9787-2b71-444d-a4b5-1fab7b708d6a"
  IID_IVideoFrameStep = LibC::GUID.new(0xe46a9787_u32, 0x2b71_u16, 0x444d_u16, StaticArray[0xa4_u8, 0xb5_u8, 0x1f_u8, 0xab_u8, 0x7b_u8, 0x70_u8, 0x8d_u8, 0x6a_u8])
  struct IVideoFrameStep
    lpVtbl : IVideoFrameStepVTbl*
  end

  struct IAMLatencyVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_latency : UInt64
  end

  IAMLatency_GUID = "62ea93ba-ec62-11d2-b770-00c04fb6bd3d"
  IID_IAMLatency = LibC::GUID.new(0x62ea93ba_u32, 0xec62_u16, 0x11d2_u16, StaticArray[0xb7_u8, 0x70_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xbd_u8, 0x3d_u8])
  struct IAMLatency
    lpVtbl : IAMLatencyVTbl*
  end

  struct IAMPushSourceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_latency : UInt64
    get_push_source_flags : UInt64
    set_push_source_flags : UInt64
    set_stream_offset : UInt64
    get_stream_offset : UInt64
    get_max_stream_offset : UInt64
    set_max_stream_offset : UInt64
  end

  IAMPushSource_GUID = "f185fe76-e64e-11d2-b76e-00c04fb6bd3d"
  IID_IAMPushSource = LibC::GUID.new(0xf185fe76_u32, 0xe64e_u16, 0x11d2_u16, StaticArray[0xb7_u8, 0x6e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xbd_u8, 0x3d_u8])
  struct IAMPushSource
    lpVtbl : IAMPushSourceVTbl*
  end

  struct IAMDeviceRemovalVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    device_info : UInt64
    reassociate : UInt64
    disassociate : UInt64
  end

  IAMDeviceRemoval_GUID = "f90a6130-b658-11d2-ae49-0000f8754b99"
  IID_IAMDeviceRemoval = LibC::GUID.new(0xf90a6130_u32, 0xb658_u16, 0x11d2_u16, StaticArray[0xae_u8, 0x49_u8, 0x0_u8, 0x0_u8, 0xf8_u8, 0x75_u8, 0x4b_u8, 0x99_u8])
  struct IAMDeviceRemoval
    lpVtbl : IAMDeviceRemovalVTbl*
  end

  struct IDVEncVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_i_format_resolution : UInt64
    put_i_format_resolution : UInt64
  end

  IDVEnc_GUID = "d18e17a0-aacb-11d0-afb0-00aa00b67a42"
  IID_IDVEnc = LibC::GUID.new(0xd18e17a0_u32, 0xaacb_u16, 0x11d0_u16, StaticArray[0xaf_u8, 0xb0_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xb6_u8, 0x7a_u8, 0x42_u8])
  struct IDVEnc
    lpVtbl : IDVEncVTbl*
  end

  struct IIPDVDecVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_ip_display : UInt64
    put_ip_display : UInt64
  end

  IIPDVDec_GUID = "b8e8bd60-0bfe-11d0-af91-00aa00b67a42"
  IID_IIPDVDec = LibC::GUID.new(0xb8e8bd60_u32, 0xbfe_u16, 0x11d0_u16, StaticArray[0xaf_u8, 0x91_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xb6_u8, 0x7a_u8, 0x42_u8])
  struct IIPDVDec
    lpVtbl : IIPDVDecVTbl*
  end

  struct IDVRGB219VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_rgb219 : UInt64
  end

  IDVRGB219_GUID = "58473a19-2bc8-4663-8012-25f81babddd1"
  IID_IDVRGB219 = LibC::GUID.new(0x58473a19_u32, 0x2bc8_u16, 0x4663_u16, StaticArray[0x80_u8, 0x12_u8, 0x25_u8, 0xf8_u8, 0x1b_u8, 0xab_u8, 0xdd_u8, 0xd1_u8])
  struct IDVRGB219
    lpVtbl : IDVRGB219VTbl*
  end

  struct IDVSplitterVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    discard_alternate_video_frames : UInt64
  end

  IDVSplitter_GUID = "92a3a302-da7c-4a1f-ba7e-1802bb5d2d02"
  IID_IDVSplitter = LibC::GUID.new(0x92a3a302_u32, 0xda7c_u16, 0x4a1f_u16, StaticArray[0xba_u8, 0x7e_u8, 0x18_u8, 0x2_u8, 0xbb_u8, 0x5d_u8, 0x2d_u8, 0x2_u8])
  struct IDVSplitter
    lpVtbl : IDVSplitterVTbl*
  end

  struct IAMAudioRendererStatsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_stat_param : UInt64
  end

  IAMAudioRendererStats_GUID = "22320cb2-d41a-11d2-bf7c-d7cb9df0bf93"
  IID_IAMAudioRendererStats = LibC::GUID.new(0x22320cb2_u32, 0xd41a_u16, 0x11d2_u16, StaticArray[0xbf_u8, 0x7c_u8, 0xd7_u8, 0xcb_u8, 0x9d_u8, 0xf0_u8, 0xbf_u8, 0x93_u8])
  struct IAMAudioRendererStats
    lpVtbl : IAMAudioRendererStatsVTbl*
  end

  struct IAMGraphStreamsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    find_upstream_interface : UInt64
    sync_using_stream_offset : UInt64
    set_max_graph_latency : UInt64
  end

  IAMGraphStreams_GUID = "632105fa-072e-11d3-8af9-00c04fb6bd3d"
  IID_IAMGraphStreams = LibC::GUID.new(0x632105fa_u32, 0x72e_u16, 0x11d3_u16, StaticArray[0x8a_u8, 0xf9_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xbd_u8, 0x3d_u8])
  struct IAMGraphStreams
    lpVtbl : IAMGraphStreamsVTbl*
  end

  struct IAMOverlayFXVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    query_overlay_fx_caps : UInt64
    set_overlay_fx : UInt64
    get_overlay_fx : UInt64
  end

  IAMOverlayFX_GUID = "62fae250-7e65-4460-bfc9-6398b322073c"
  IID_IAMOverlayFX = LibC::GUID.new(0x62fae250_u32, 0x7e65_u16, 0x4460_u16, StaticArray[0xbf_u8, 0xc9_u8, 0x63_u8, 0x98_u8, 0xb3_u8, 0x22_u8, 0x7_u8, 0x3c_u8])
  struct IAMOverlayFX
    lpVtbl : IAMOverlayFXVTbl*
  end

  struct IAMOpenProgressVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    query_progress : UInt64
    abort_operation : UInt64
  end

  IAMOpenProgress_GUID = "8e1c39a1-de53-11cf-aa63-0080c744528d"
  IID_IAMOpenProgress = LibC::GUID.new(0x8e1c39a1_u32, 0xde53_u16, 0x11cf_u16, StaticArray[0xaa_u8, 0x63_u8, 0x0_u8, 0x80_u8, 0xc7_u8, 0x44_u8, 0x52_u8, 0x8d_u8])
  struct IAMOpenProgress
    lpVtbl : IAMOpenProgressVTbl*
  end

  struct IMpeg2DemultiplexerVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    create_output_pin : UInt64
    set_output_pin_media_type : UInt64
    delete_output_pin : UInt64
  end

  IMpeg2Demultiplexer_GUID = "436eee9c-264f-4242-90e1-4e330c107512"
  IID_IMpeg2Demultiplexer = LibC::GUID.new(0x436eee9c_u32, 0x264f_u16, 0x4242_u16, StaticArray[0x90_u8, 0xe1_u8, 0x4e_u8, 0x33_u8, 0xc_u8, 0x10_u8, 0x75_u8, 0x12_u8])
  struct IMpeg2Demultiplexer
    lpVtbl : IMpeg2DemultiplexerVTbl*
  end

  struct IEnumStreamIdMapVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    next : UInt64
    skip : UInt64
    reset : UInt64
    clone : UInt64
  end

  IEnumStreamIdMap_GUID = "945c1566-6202-46fc-96c7-d87f289c6534"
  IID_IEnumStreamIdMap = LibC::GUID.new(0x945c1566_u32, 0x6202_u16, 0x46fc_u16, StaticArray[0x96_u8, 0xc7_u8, 0xd8_u8, 0x7f_u8, 0x28_u8, 0x9c_u8, 0x65_u8, 0x34_u8])
  struct IEnumStreamIdMap
    lpVtbl : IEnumStreamIdMapVTbl*
  end

  struct IMPEG2StreamIdMapVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    map_stream_id : UInt64
    unmap_stream_id : UInt64
    enum_stream_id_map : UInt64
  end

  IMPEG2StreamIdMap_GUID = "d0e04c47-25b8-4369-925a-362a01d95444"
  IID_IMPEG2StreamIdMap = LibC::GUID.new(0xd0e04c47_u32, 0x25b8_u16, 0x4369_u16, StaticArray[0x92_u8, 0x5a_u8, 0x36_u8, 0x2a_u8, 0x1_u8, 0xd9_u8, 0x54_u8, 0x44_u8])
  struct IMPEG2StreamIdMap
    lpVtbl : IMPEG2StreamIdMapVTbl*
  end

  struct IRegisterServiceProviderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    register_service : UInt64
  end

  IRegisterServiceProvider_GUID = "7b3a2f01-0751-48dd-b556-004785171c54"
  IID_IRegisterServiceProvider = LibC::GUID.new(0x7b3a2f01_u32, 0x751_u16, 0x48dd_u16, StaticArray[0xb5_u8, 0x56_u8, 0x0_u8, 0x47_u8, 0x85_u8, 0x17_u8, 0x1c_u8, 0x54_u8])
  struct IRegisterServiceProvider
    lpVtbl : IRegisterServiceProviderVTbl*
  end

  struct IAMClockSlaveVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_error_tolerance : UInt64
    get_error_tolerance : UInt64
  end

  IAMClockSlave_GUID = "9fd52741-176d-4b36-8f51-ca8f933223be"
  IID_IAMClockSlave = LibC::GUID.new(0x9fd52741_u32, 0x176d_u16, 0x4b36_u16, StaticArray[0x8f_u8, 0x51_u8, 0xca_u8, 0x8f_u8, 0x93_u8, 0x32_u8, 0x23_u8, 0xbe_u8])
  struct IAMClockSlave
    lpVtbl : IAMClockSlaveVTbl*
  end

  struct IAMGraphBuilderCallbackVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    selected_filter : UInt64
    created_filter : UInt64
  end

  IAMGraphBuilderCallback_GUID = "4995f511-9ddb-4f12-bd3b-f04611807b79"
  IID_IAMGraphBuilderCallback = LibC::GUID.new(0x4995f511_u32, 0x9ddb_u16, 0x4f12_u16, StaticArray[0xbd_u8, 0x3b_u8, 0xf0_u8, 0x46_u8, 0x11_u8, 0x80_u8, 0x7b_u8, 0x79_u8])
  struct IAMGraphBuilderCallback
    lpVtbl : IAMGraphBuilderCallbackVTbl*
  end

  struct IAMFilterGraphCallbackVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    unable_to_render : UInt64
  end

  IAMFilterGraphCallback_GUID = "56a868fd-0ad4-11ce-b0a3-0020af0ba770"
  IID_IAMFilterGraphCallback = LibC::GUID.new(0x56a868fd_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0xa3_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IAMFilterGraphCallback
    lpVtbl : IAMFilterGraphCallbackVTbl*
  end

  struct IGetCapabilitiesKeyVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_capabilities_key : UInt64
  end

  IGetCapabilitiesKey_GUID = "a8809222-07bb-48ea-951c-33158100625b"
  IID_IGetCapabilitiesKey = LibC::GUID.new(0xa8809222_u32, 0x7bb_u16, 0x48ea_u16, StaticArray[0x95_u8, 0x1c_u8, 0x33_u8, 0x15_u8, 0x81_u8, 0x0_u8, 0x62_u8, 0x5b_u8])
  struct IGetCapabilitiesKey
    lpVtbl : IGetCapabilitiesKeyVTbl*
  end

  struct IEncoderAPIVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    is_supported : UInt64
    is_available : UInt64
    get_parameter_range : UInt64
    get_parameter_values : UInt64
    get_default_value : UInt64
    get_value : UInt64
    set_value : UInt64
  end

  IEncoderAPI_GUID = "70423839-6acc-4b23-b079-21dbf08156a5"
  IID_IEncoderAPI = LibC::GUID.new(0x70423839_u32, 0x6acc_u16, 0x4b23_u16, StaticArray[0xb0_u8, 0x79_u8, 0x21_u8, 0xdb_u8, 0xf0_u8, 0x81_u8, 0x56_u8, 0xa5_u8])
  struct IEncoderAPI
    lpVtbl : IEncoderAPIVTbl*
  end

  struct IVideoEncoderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    is_supported : UInt64
    is_available : UInt64
    get_parameter_range : UInt64
    get_parameter_values : UInt64
    get_default_value : UInt64
    get_value : UInt64
    set_value : UInt64
  end

  IVideoEncoder_GUID = "02997c3b-8e1b-460e-9270-545e0de9563e"
  IID_IVideoEncoder = LibC::GUID.new(0x2997c3b_u32, 0x8e1b_u16, 0x460e_u16, StaticArray[0x92_u8, 0x70_u8, 0x54_u8, 0x5e_u8, 0xd_u8, 0xe9_u8, 0x56_u8, 0x3e_u8])
  struct IVideoEncoder
    lpVtbl : IVideoEncoderVTbl*
  end

  struct IAMDecoderCapsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_decoder_caps : UInt64
  end

  IAMDecoderCaps_GUID = "c0dff467-d499-4986-972b-e1d9090fa941"
  IID_IAMDecoderCaps = LibC::GUID.new(0xc0dff467_u32, 0xd499_u16, 0x4986_u16, StaticArray[0x97_u8, 0x2b_u8, 0xe1_u8, 0xd9_u8, 0x9_u8, 0xf_u8, 0xa9_u8, 0x41_u8])
  struct IAMDecoderCaps
    lpVtbl : IAMDecoderCapsVTbl*
  end

  struct IAMCertifiedOutputProtectionVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    key_exchange : UInt64
    session_sequence_start : UInt64
    protection_command : UInt64
    protection_status : UInt64
  end

  IAMCertifiedOutputProtection_GUID = "6feded3e-0ff1-4901-a2f1-43f7012c8515"
  IID_IAMCertifiedOutputProtection = LibC::GUID.new(0x6feded3e_u32, 0xff1_u16, 0x4901_u16, StaticArray[0xa2_u8, 0xf1_u8, 0x43_u8, 0xf7_u8, 0x1_u8, 0x2c_u8, 0x85_u8, 0x15_u8])
  struct IAMCertifiedOutputProtection
    lpVtbl : IAMCertifiedOutputProtectionVTbl*
  end

  struct IAMAsyncReaderTimestampScalingVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_timestamp_mode : UInt64
    set_timestamp_mode : UInt64
  end

  IAMAsyncReaderTimestampScaling_GUID = "cf7b26fc-9a00-485b-8147-3e789d5e8f67"
  IID_IAMAsyncReaderTimestampScaling = LibC::GUID.new(0xcf7b26fc_u32, 0x9a00_u16, 0x485b_u16, StaticArray[0x81_u8, 0x47_u8, 0x3e_u8, 0x78_u8, 0x9d_u8, 0x5e_u8, 0x8f_u8, 0x67_u8])
  struct IAMAsyncReaderTimestampScaling
    lpVtbl : IAMAsyncReaderTimestampScalingVTbl*
  end

  struct IAMPluginControlVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_preferred_clsid : UInt64
    get_preferred_clsid_by_index : UInt64
    set_preferred_clsid : UInt64
    is_disabled : UInt64
    get_disabled_by_index : UInt64
    set_disabled : UInt64
    is_legacy_disabled : UInt64
  end

  IAMPluginControl_GUID = "0e26a181-f40c-4635-8786-976284b52981"
  IID_IAMPluginControl = LibC::GUID.new(0xe26a181_u32, 0xf40c_u16, 0x4635_u16, StaticArray[0x87_u8, 0x86_u8, 0x97_u8, 0x62_u8, 0x84_u8, 0xb5_u8, 0x29_u8, 0x81_u8])
  struct IAMPluginControl
    lpVtbl : IAMPluginControlVTbl*
  end

  struct IPinConnectionVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    dynamic_query_accept : UInt64
    notify_end_of_stream : UInt64
    is_end_pin : UInt64
    dynamic_disconnect : UInt64
  end

  IPinConnection_GUID = "4a9a62d3-27d4-403d-91e9-89f540e55534"
  IID_IPinConnection = LibC::GUID.new(0x4a9a62d3_u32, 0x27d4_u16, 0x403d_u16, StaticArray[0x91_u8, 0xe9_u8, 0x89_u8, 0xf5_u8, 0x40_u8, 0xe5_u8, 0x55_u8, 0x34_u8])
  struct IPinConnection
    lpVtbl : IPinConnectionVTbl*
  end

  struct IPinFlowControlVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    block : UInt64
  end

  IPinFlowControl_GUID = "c56e9858-dbf3-4f6b-8119-384af2060deb"
  IID_IPinFlowControl = LibC::GUID.new(0xc56e9858_u32, 0xdbf3_u16, 0x4f6b_u16, StaticArray[0x81_u8, 0x19_u8, 0x38_u8, 0x4a_u8, 0xf2_u8, 0x6_u8, 0xd_u8, 0xeb_u8])
  struct IPinFlowControl
    lpVtbl : IPinFlowControlVTbl*
  end

  struct IGraphConfigVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    reconnect : UInt64
    reconfigure : UInt64
    add_filter_to_cache : UInt64
    enum_cache_filter : UInt64
    remove_filter_from_cache : UInt64
    get_start_time : UInt64
    push_through_data : UInt64
    set_filter_flags : UInt64
    get_filter_flags : UInt64
    remove_filter_ex : UInt64
  end

  IGraphConfig_GUID = "03a1eb8e-32bf-4245-8502-114d08a9cb88"
  IID_IGraphConfig = LibC::GUID.new(0x3a1eb8e_u32, 0x32bf_u16, 0x4245_u16, StaticArray[0x85_u8, 0x2_u8, 0x11_u8, 0x4d_u8, 0x8_u8, 0xa9_u8, 0xcb_u8, 0x88_u8])
  struct IGraphConfig
    lpVtbl : IGraphConfigVTbl*
  end

  struct IGraphConfigCallbackVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    reconfigure : UInt64
  end

  IGraphConfigCallback_GUID = "ade0fd60-d19d-11d2-abf6-00a0c905f375"
  IID_IGraphConfigCallback = LibC::GUID.new(0xade0fd60_u32, 0xd19d_u16, 0x11d2_u16, StaticArray[0xab_u8, 0xf6_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x5_u8, 0xf3_u8, 0x75_u8])
  struct IGraphConfigCallback
    lpVtbl : IGraphConfigCallbackVTbl*
  end

  struct IFilterChainVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    start_chain : UInt64
    pause_chain : UInt64
    stop_chain : UInt64
    remove_chain : UInt64
  end

  IFilterChain_GUID = "dcfbdcf6-0dc2-45f5-9ab2-7c330ea09c29"
  IID_IFilterChain = LibC::GUID.new(0xdcfbdcf6_u32, 0xdc2_u16, 0x45f5_u16, StaticArray[0x9a_u8, 0xb2_u8, 0x7c_u8, 0x33_u8, 0xe_u8, 0xa0_u8, 0x9c_u8, 0x29_u8])
  struct IFilterChain
    lpVtbl : IFilterChainVTbl*
  end

  struct IVMRImagePresenterVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    start_presenting : UInt64
    stop_presenting : UInt64
    present_image : UInt64
  end

  IVMRImagePresenter_GUID = "ce704fe7-e71e-41fb-baa2-c4403e1182f5"
  IID_IVMRImagePresenter = LibC::GUID.new(0xce704fe7_u32, 0xe71e_u16, 0x41fb_u16, StaticArray[0xba_u8, 0xa2_u8, 0xc4_u8, 0x40_u8, 0x3e_u8, 0x11_u8, 0x82_u8, 0xf5_u8])
  struct IVMRImagePresenter
    lpVtbl : IVMRImagePresenterVTbl*
  end

  struct IVMRSurfaceAllocatorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    allocate_surface : UInt64
    free_surface : UInt64
    prepare_surface : UInt64
    advise_notify : UInt64
  end

  IVMRSurfaceAllocator_GUID = "31ce832e-4484-458b-8cca-f4d7e3db0b52"
  IID_IVMRSurfaceAllocator = LibC::GUID.new(0x31ce832e_u32, 0x4484_u16, 0x458b_u16, StaticArray[0x8c_u8, 0xca_u8, 0xf4_u8, 0xd7_u8, 0xe3_u8, 0xdb_u8, 0xb_u8, 0x52_u8])
  struct IVMRSurfaceAllocator
    lpVtbl : IVMRSurfaceAllocatorVTbl*
  end

  struct IVMRSurfaceAllocatorNotifyVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    advise_surface_allocator : UInt64
    set_d_draw_device : UInt64
    change_d_draw_device : UInt64
    restore_d_draw_surfaces : UInt64
    notify_event : UInt64
    set_border_color : UInt64
  end

  IVMRSurfaceAllocatorNotify_GUID = "aada05a8-5a4e-4729-af0b-cea27aed51e2"
  IID_IVMRSurfaceAllocatorNotify = LibC::GUID.new(0xaada05a8_u32, 0x5a4e_u16, 0x4729_u16, StaticArray[0xaf_u8, 0xb_u8, 0xce_u8, 0xa2_u8, 0x7a_u8, 0xed_u8, 0x51_u8, 0xe2_u8])
  struct IVMRSurfaceAllocatorNotify
    lpVtbl : IVMRSurfaceAllocatorNotifyVTbl*
  end

  struct IVMRWindowlessControlVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_native_video_size : UInt64
    get_min_ideal_video_size : UInt64
    get_max_ideal_video_size : UInt64
    set_video_position : UInt64
    get_video_position : UInt64
    get_aspect_ratio_mode : UInt64
    set_aspect_ratio_mode : UInt64
    set_video_clipping_window : UInt64
    repaint_video : UInt64
    display_mode_changed : UInt64
    get_current_image : UInt64
    set_border_color : UInt64
    get_border_color : UInt64
    set_color_key : UInt64
    get_color_key : UInt64
  end

  IVMRWindowlessControl_GUID = "0eb1088c-4dcd-46f0-878f-39dae86a51b7"
  IID_IVMRWindowlessControl = LibC::GUID.new(0xeb1088c_u32, 0x4dcd_u16, 0x46f0_u16, StaticArray[0x87_u8, 0x8f_u8, 0x39_u8, 0xda_u8, 0xe8_u8, 0x6a_u8, 0x51_u8, 0xb7_u8])
  struct IVMRWindowlessControl
    lpVtbl : IVMRWindowlessControlVTbl*
  end

  struct IVMRMixerControlVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_alpha : UInt64
    get_alpha : UInt64
    set_z_order : UInt64
    get_z_order : UInt64
    set_output_rect : UInt64
    get_output_rect : UInt64
    set_background_clr : UInt64
    get_background_clr : UInt64
    set_mixing_prefs : UInt64
    get_mixing_prefs : UInt64
  end

  IVMRMixerControl_GUID = "1c1a17b0-bed0-415d-974b-dc6696131599"
  IID_IVMRMixerControl = LibC::GUID.new(0x1c1a17b0_u32, 0xbed0_u16, 0x415d_u16, StaticArray[0x97_u8, 0x4b_u8, 0xdc_u8, 0x66_u8, 0x96_u8, 0x13_u8, 0x15_u8, 0x99_u8])
  struct IVMRMixerControl
    lpVtbl : IVMRMixerControlVTbl*
  end

  struct IVMRMonitorConfigVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_monitor : UInt64
    get_monitor : UInt64
    set_default_monitor : UInt64
    get_default_monitor : UInt64
    get_available_monitors : UInt64
  end

  IVMRMonitorConfig_GUID = "9cf0b1b6-fbaa-4b7f-88cf-cf1f130a0dce"
  IID_IVMRMonitorConfig = LibC::GUID.new(0x9cf0b1b6_u32, 0xfbaa_u16, 0x4b7f_u16, StaticArray[0x88_u8, 0xcf_u8, 0xcf_u8, 0x1f_u8, 0x13_u8, 0xa_u8, 0xd_u8, 0xce_u8])
  struct IVMRMonitorConfig
    lpVtbl : IVMRMonitorConfigVTbl*
  end

  struct IVMRFilterConfigVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_image_compositor : UInt64
    set_number_of_streams : UInt64
    get_number_of_streams : UInt64
    set_rendering_prefs : UInt64
    get_rendering_prefs : UInt64
    set_rendering_mode : UInt64
    get_rendering_mode : UInt64
  end

  IVMRFilterConfig_GUID = "9e5530c5-7034-48b4-bb46-0b8a6efc8e36"
  IID_IVMRFilterConfig = LibC::GUID.new(0x9e5530c5_u32, 0x7034_u16, 0x48b4_u16, StaticArray[0xbb_u8, 0x46_u8, 0xb_u8, 0x8a_u8, 0x6e_u8, 0xfc_u8, 0x8e_u8, 0x36_u8])
  struct IVMRFilterConfig
    lpVtbl : IVMRFilterConfigVTbl*
  end

  struct IVMRAspectRatioControlVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_aspect_ratio_mode : UInt64
    set_aspect_ratio_mode : UInt64
  end

  IVMRAspectRatioControl_GUID = "ede80b5c-bad6-4623-b537-65586c9f8dfd"
  IID_IVMRAspectRatioControl = LibC::GUID.new(0xede80b5c_u32, 0xbad6_u16, 0x4623_u16, StaticArray[0xb5_u8, 0x37_u8, 0x65_u8, 0x58_u8, 0x6c_u8, 0x9f_u8, 0x8d_u8, 0xfd_u8])
  struct IVMRAspectRatioControl
    lpVtbl : IVMRAspectRatioControlVTbl*
  end

  struct IVMRDeinterlaceControlVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_number_of_deinterlace_modes : UInt64
    get_deinterlace_mode_caps : UInt64
    get_deinterlace_mode : UInt64
    set_deinterlace_mode : UInt64
    get_deinterlace_prefs : UInt64
    set_deinterlace_prefs : UInt64
    get_actual_deinterlace_mode : UInt64
  end

  IVMRDeinterlaceControl_GUID = "bb057577-0db8-4e6a-87a7-1a8c9a505a0f"
  IID_IVMRDeinterlaceControl = LibC::GUID.new(0xbb057577_u32, 0xdb8_u16, 0x4e6a_u16, StaticArray[0x87_u8, 0xa7_u8, 0x1a_u8, 0x8c_u8, 0x9a_u8, 0x50_u8, 0x5a_u8, 0xf_u8])
  struct IVMRDeinterlaceControl
    lpVtbl : IVMRDeinterlaceControlVTbl*
  end

  struct IVMRMixerBitmapVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_alpha_bitmap : UInt64
    update_alpha_bitmap_parameters : UInt64
    get_alpha_bitmap_parameters : UInt64
  end

  IVMRMixerBitmap_GUID = "1e673275-0257-40aa-af20-7c608d4a0428"
  IID_IVMRMixerBitmap = LibC::GUID.new(0x1e673275_u32, 0x257_u16, 0x40aa_u16, StaticArray[0xaf_u8, 0x20_u8, 0x7c_u8, 0x60_u8, 0x8d_u8, 0x4a_u8, 0x4_u8, 0x28_u8])
  struct IVMRMixerBitmap
    lpVtbl : IVMRMixerBitmapVTbl*
  end

  struct IVMRImageCompositorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    init_composition_target : UInt64
    term_composition_target : UInt64
    set_stream_media_type : UInt64
    composite_image : UInt64
  end

  IVMRImageCompositor_GUID = "7a4fb5af-479f-4074-bb40-ce6722e43c82"
  IID_IVMRImageCompositor = LibC::GUID.new(0x7a4fb5af_u32, 0x479f_u16, 0x4074_u16, StaticArray[0xbb_u8, 0x40_u8, 0xce_u8, 0x67_u8, 0x22_u8, 0xe4_u8, 0x3c_u8, 0x82_u8])
  struct IVMRImageCompositor
    lpVtbl : IVMRImageCompositorVTbl*
  end

  struct IVMRVideoStreamControlVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_color_key : UInt64
    get_color_key : UInt64
    set_stream_active_state : UInt64
    get_stream_active_state : UInt64
  end

  IVMRVideoStreamControl_GUID = "058d1f11-2a54-4bef-bd54-df706626b727"
  IID_IVMRVideoStreamControl = LibC::GUID.new(0x58d1f11_u32, 0x2a54_u16, 0x4bef_u16, StaticArray[0xbd_u8, 0x54_u8, 0xdf_u8, 0x70_u8, 0x66_u8, 0x26_u8, 0xb7_u8, 0x27_u8])
  struct IVMRVideoStreamControl
    lpVtbl : IVMRVideoStreamControlVTbl*
  end

  struct IVMRSurfaceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    is_surface_locked : UInt64
    lock_surface : UInt64
    unlock_surface : UInt64
    get_surface : UInt64
  end

  IVMRSurface_GUID = "a9849bbe-9ec8-4263-b764-62730f0d15d0"
  IID_IVMRSurface = LibC::GUID.new(0xa9849bbe_u32, 0x9ec8_u16, 0x4263_u16, StaticArray[0xb7_u8, 0x64_u8, 0x62_u8, 0x73_u8, 0xf_u8, 0xd_u8, 0x15_u8, 0xd0_u8])
  struct IVMRSurface
    lpVtbl : IVMRSurfaceVTbl*
  end

  struct IVMRImagePresenterConfigVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_rendering_prefs : UInt64
    get_rendering_prefs : UInt64
  end

  IVMRImagePresenterConfig_GUID = "9f3a1c85-8555-49ba-935f-be5b5b29d178"
  IID_IVMRImagePresenterConfig = LibC::GUID.new(0x9f3a1c85_u32, 0x8555_u16, 0x49ba_u16, StaticArray[0x93_u8, 0x5f_u8, 0xbe_u8, 0x5b_u8, 0x5b_u8, 0x29_u8, 0xd1_u8, 0x78_u8])
  struct IVMRImagePresenterConfig
    lpVtbl : IVMRImagePresenterConfigVTbl*
  end

  struct IVMRImagePresenterExclModeConfigVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_rendering_prefs : UInt64
    get_rendering_prefs : UInt64
    set_xlc_mode_dd_obj_and_primary_surface : UInt64
    get_xlc_mode_dd_obj_and_primary_surface : UInt64
  end

  IVMRImagePresenterExclModeConfig_GUID = "e6f7ce40-4673-44f1-8f77-5499d68cb4ea"
  IID_IVMRImagePresenterExclModeConfig = LibC::GUID.new(0xe6f7ce40_u32, 0x4673_u16, 0x44f1_u16, StaticArray[0x8f_u8, 0x77_u8, 0x54_u8, 0x99_u8, 0xd6_u8, 0x8c_u8, 0xb4_u8, 0xea_u8])
  struct IVMRImagePresenterExclModeConfig
    lpVtbl : IVMRImagePresenterExclModeConfigVTbl*
  end

  struct IVPManagerVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_video_port_index : UInt64
    get_video_port_index : UInt64
  end

  IVPManager_GUID = "aac18c18-e186-46d2-825d-a1f8dc8e395a"
  IID_IVPManager = LibC::GUID.new(0xaac18c18_u32, 0xe186_u16, 0x46d2_u16, StaticArray[0x82_u8, 0x5d_u8, 0xa1_u8, 0xf8_u8, 0xdc_u8, 0x8e_u8, 0x39_u8, 0x5a_u8])
  struct IVPManager
    lpVtbl : IVPManagerVTbl*
  end

  struct IDvdControlVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    title_play : UInt64
    chapter_play : UInt64
    time_play : UInt64
    stop_for_resume : UInt64
    go_up : UInt64
    time_search : UInt64
    chapter_search : UInt64
    prev_pg_search : UInt64
    top_pg_search : UInt64
    next_pg_search : UInt64
    forward_scan : UInt64
    backward_scan : UInt64
    menu_call : UInt64
    resume : UInt64
    upper_button_select : UInt64
    lower_button_select : UInt64
    left_button_select : UInt64
    right_button_select : UInt64
    button_activate : UInt64
    button_select_and_activate : UInt64
    still_off : UInt64
    pause_on : UInt64
    pause_off : UInt64
    menu_language_select : UInt64
    audio_stream_change : UInt64
    subpicture_stream_change : UInt64
    angle_change : UInt64
    parental_level_select : UInt64
    parental_country_select : UInt64
    karaoke_audio_presentation_mode_change : UInt64
    video_mode_preferrence : UInt64
    set_root : UInt64
    mouse_activate : UInt64
    mouse_select : UInt64
    chapter_play_auto_stop : UInt64
  end

  IDvdControl_GUID = "a70efe61-e2a3-11d0-a9be-00aa0061be93"
  IID_IDvdControl = LibC::GUID.new(0xa70efe61_u32, 0xe2a3_u16, 0x11d0_u16, StaticArray[0xa9_u8, 0xbe_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x61_u8, 0xbe_u8, 0x93_u8])
  struct IDvdControl
    lpVtbl : IDvdControlVTbl*
  end

  struct IDvdInfoVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_current_domain : UInt64
    get_current_location : UInt64
    get_total_title_time : UInt64
    get_current_button : UInt64
    get_current_angle : UInt64
    get_current_audio : UInt64
    get_current_subpicture : UInt64
    get_current_uops : UInt64
    get_all_spr_ms : UInt64
    get_all_gpr_ms : UInt64
    get_audio_language : UInt64
    get_subpicture_language : UInt64
    get_title_attributes : UInt64
    get_vmg_attributes : UInt64
    get_current_video_attributes : UInt64
    get_current_audio_attributes : UInt64
    get_current_subpicture_attributes : UInt64
    get_current_volume_info : UInt64
    get_dvd_text_info : UInt64
    get_player_parental_level : UInt64
    get_number_of_chapters : UInt64
    get_title_parental_levels : UInt64
    get_root : UInt64
  end

  IDvdInfo_GUID = "a70efe60-e2a3-11d0-a9be-00aa0061be93"
  IID_IDvdInfo = LibC::GUID.new(0xa70efe60_u32, 0xe2a3_u16, 0x11d0_u16, StaticArray[0xa9_u8, 0xbe_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x61_u8, 0xbe_u8, 0x93_u8])
  struct IDvdInfo
    lpVtbl : IDvdInfoVTbl*
  end

  struct IDvdCmdVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    wait_for_start : UInt64
    wait_for_end : UInt64
  end

  IDvdCmd_GUID = "5a4a97e4-94ee-4a55-9751-74b5643aa27d"
  IID_IDvdCmd = LibC::GUID.new(0x5a4a97e4_u32, 0x94ee_u16, 0x4a55_u16, StaticArray[0x97_u8, 0x51_u8, 0x74_u8, 0xb5_u8, 0x64_u8, 0x3a_u8, 0xa2_u8, 0x7d_u8])
  struct IDvdCmd
    lpVtbl : IDvdCmdVTbl*
  end

  struct IDvdStateVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_disc_id : UInt64
    get_parental_level : UInt64
  end

  IDvdState_GUID = "86303d6d-1c4a-4087-ab42-f711167048ef"
  IID_IDvdState = LibC::GUID.new(0x86303d6d_u32, 0x1c4a_u16, 0x4087_u16, StaticArray[0xab_u8, 0x42_u8, 0xf7_u8, 0x11_u8, 0x16_u8, 0x70_u8, 0x48_u8, 0xef_u8])
  struct IDvdState
    lpVtbl : IDvdStateVTbl*
  end

  struct IDvdControl2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    play_title : UInt64
    play_chapter_in_title : UInt64
    play_at_time_in_title : UInt64
    stop : UInt64
    return_from_submenu : UInt64
    play_at_time : UInt64
    play_chapter : UInt64
    play_prev_chapter : UInt64
    replay_chapter : UInt64
    play_next_chapter : UInt64
    play_forwards : UInt64
    play_backwards : UInt64
    show_menu : UInt64
    resume : UInt64
    select_relative_button : UInt64
    activate_button : UInt64
    select_button : UInt64
    select_and_activate_button : UInt64
    still_off : UInt64
    pause : UInt64
    select_audio_stream : UInt64
    select_subpicture_stream : UInt64
    set_subpicture_state : UInt64
    select_angle : UInt64
    select_parental_level : UInt64
    select_parental_country : UInt64
    select_karaoke_audio_presentation_mode : UInt64
    select_video_mode_preference : UInt64
    set_dvd_directory : UInt64
    activate_at_position : UInt64
    select_at_position : UInt64
    play_chapters_auto_stop : UInt64
    accept_parental_level_change : UInt64
    set_option : UInt64
    set_state : UInt64
    play_period_in_title_auto_stop : UInt64
    set_gprm : UInt64
    select_default_menu_language : UInt64
    select_default_audio_language : UInt64
    select_default_subpicture_language : UInt64
  end

  IDvdControl2_GUID = "33bc7430-eec0-11d2-8201-00a0c9d74842"
  IID_IDvdControl2 = LibC::GUID.new(0x33bc7430_u32, 0xeec0_u16, 0x11d2_u16, StaticArray[0x82_u8, 0x1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd7_u8, 0x48_u8, 0x42_u8])
  struct IDvdControl2
    lpVtbl : IDvdControl2VTbl*
  end

  struct IDvdInfo2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_current_domain : UInt64
    get_current_location : UInt64
    get_total_title_time : UInt64
    get_current_button : UInt64
    get_current_angle : UInt64
    get_current_audio : UInt64
    get_current_subpicture : UInt64
    get_current_uops : UInt64
    get_all_spr_ms : UInt64
    get_all_gpr_ms : UInt64
    get_audio_language : UInt64
    get_subpicture_language : UInt64
    get_title_attributes : UInt64
    get_vmg_attributes : UInt64
    get_current_video_attributes : UInt64
    get_audio_attributes : UInt64
    get_karaoke_attributes : UInt64
    get_subpicture_attributes : UInt64
    get_dvd_volume_info : UInt64
    get_dvd_text_number_of_languages : UInt64
    get_dvd_text_language_info : UInt64
    get_dvd_text_string_as_native : UInt64
    get_dvd_text_string_as_unicode : UInt64
    get_player_parental_level : UInt64
    get_number_of_chapters : UInt64
    get_title_parental_levels : UInt64
    get_dvd_directory : UInt64
    is_audio_stream_enabled : UInt64
    get_disc_id : UInt64
    get_state : UInt64
    get_menu_languages : UInt64
    get_button_at_position : UInt64
    get_cmd_from_event : UInt64
    get_default_menu_language : UInt64
    get_default_audio_language : UInt64
    get_default_subpicture_language : UInt64
    get_decoder_caps : UInt64
    get_button_rect : UInt64
    is_subpicture_stream_enabled : UInt64
  end

  IDvdInfo2_GUID = "34151510-eec0-11d2-8201-00a0c9d74842"
  IID_IDvdInfo2 = LibC::GUID.new(0x34151510_u32, 0xeec0_u16, 0x11d2_u16, StaticArray[0x82_u8, 0x1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd7_u8, 0x48_u8, 0x42_u8])
  struct IDvdInfo2
    lpVtbl : IDvdInfo2VTbl*
  end

  struct IDvdGraphBuilderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_filtergraph : UInt64
    get_dvd_interface : UInt64
    render_dvd_video_volume : UInt64
  end

  IDvdGraphBuilder_GUID = "fcc152b6-f372-11d0-8e00-00c04fd7c08b"
  IID_IDvdGraphBuilder = LibC::GUID.new(0xfcc152b6_u32, 0xf372_u16, 0x11d0_u16, StaticArray[0x8e_u8, 0x0_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd7_u8, 0xc0_u8, 0x8b_u8])
  struct IDvdGraphBuilder
    lpVtbl : IDvdGraphBuilderVTbl*
  end

  struct IDDrawExclModeVideoVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_d_draw_object : UInt64
    get_d_draw_object : UInt64
    set_d_draw_surface : UInt64
    get_d_draw_surface : UInt64
    set_draw_parameters : UInt64
    get_native_video_props : UInt64
    set_callback_interface : UInt64
  end

  IDDrawExclModeVideo_GUID = "153acc21-d83b-11d1-82bf-00a0c9696c8f"
  IID_IDDrawExclModeVideo = LibC::GUID.new(0x153acc21_u32, 0xd83b_u16, 0x11d1_u16, StaticArray[0x82_u8, 0xbf_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x69_u8, 0x6c_u8, 0x8f_u8])
  struct IDDrawExclModeVideo
    lpVtbl : IDDrawExclModeVideoVTbl*
  end

  struct IDDrawExclModeVideoCallbackVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    on_update_overlay : UInt64
    on_update_color_key : UInt64
    on_update_size : UInt64
  end

  IDDrawExclModeVideoCallback_GUID = "913c24a0-20ab-11d2-9038-00a0c9697298"
  IID_IDDrawExclModeVideoCallback = LibC::GUID.new(0x913c24a0_u32, 0x20ab_u16, 0x11d2_u16, StaticArray[0x90_u8, 0x38_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x69_u8, 0x72_u8, 0x98_u8])
  struct IDDrawExclModeVideoCallback
    lpVtbl : IDDrawExclModeVideoCallbackVTbl*
  end

  struct IBDA_NetworkProviderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    put_signal_source : UInt64
    get_signal_source : UInt64
    get_network_type : UInt64
    put_tuning_space : UInt64
    get_tuning_space : UInt64
    register_device_filter : UInt64
    un_register_device_filter : UInt64
  end

  IBDA_NetworkProvider_GUID = "fd501041-8ebe-11ce-8183-00aa00577da2"
  IID_IBDA_NetworkProvider = LibC::GUID.new(0xfd501041_u32, 0x8ebe_u16, 0x11ce_u16, StaticArray[0x81_u8, 0x83_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x57_u8, 0x7d_u8, 0xa2_u8])
  struct IBDA_NetworkProvider
    lpVtbl : IBDA_NetworkProviderVTbl*
  end

  struct IBDA_EthernetFilterVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_multicast_list_size : UInt64
    put_multicast_list : UInt64
    get_multicast_list : UInt64
    put_multicast_mode : UInt64
    get_multicast_mode : UInt64
  end

  IBDA_EthernetFilter_GUID = "71985f43-1ca1-11d3-9cc8-00c04f7971e0"
  IID_IBDA_EthernetFilter = LibC::GUID.new(0x71985f43_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  struct IBDA_EthernetFilter
    lpVtbl : IBDA_EthernetFilterVTbl*
  end

  struct IBDA_IPV4FilterVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_multicast_list_size : UInt64
    put_multicast_list : UInt64
    get_multicast_list : UInt64
    put_multicast_mode : UInt64
    get_multicast_mode : UInt64
  end

  IBDA_IPV4Filter_GUID = "71985f44-1ca1-11d3-9cc8-00c04f7971e0"
  IID_IBDA_IPV4Filter = LibC::GUID.new(0x71985f44_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  struct IBDA_IPV4Filter
    lpVtbl : IBDA_IPV4FilterVTbl*
  end

  struct IBDA_IPV6FilterVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_multicast_list_size : UInt64
    put_multicast_list : UInt64
    get_multicast_list : UInt64
    put_multicast_mode : UInt64
    get_multicast_mode : UInt64
  end

  IBDA_IPV6Filter_GUID = "e1785a74-2a23-4fb3-9245-a8f88017ef33"
  IID_IBDA_IPV6Filter = LibC::GUID.new(0xe1785a74_u32, 0x2a23_u16, 0x4fb3_u16, StaticArray[0x92_u8, 0x45_u8, 0xa8_u8, 0xf8_u8, 0x80_u8, 0x17_u8, 0xef_u8, 0x33_u8])
  struct IBDA_IPV6Filter
    lpVtbl : IBDA_IPV6FilterVTbl*
  end

  struct IBDA_DeviceControlVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    start_changes : UInt64
    check_changes : UInt64
    commit_changes : UInt64
    get_change_state : UInt64
  end

  IBDA_DeviceControl_GUID = "fd0a5af3-b41d-11d2-9c95-00c04f7971e0"
  IID_IBDA_DeviceControl = LibC::GUID.new(0xfd0a5af3_u32, 0xb41d_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0x95_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  struct IBDA_DeviceControl
    lpVtbl : IBDA_DeviceControlVTbl*
  end

  struct IBDA_PinControlVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_pin_id : UInt64
    get_pin_type : UInt64
    registration_context : UInt64
  end

  IBDA_PinControl_GUID = "0ded49d5-a8b7-4d5d-97a1-12b0c195874d"
  IID_IBDA_PinControl = LibC::GUID.new(0xded49d5_u32, 0xa8b7_u16, 0x4d5d_u16, StaticArray[0x97_u8, 0xa1_u8, 0x12_u8, 0xb0_u8, 0xc1_u8, 0x95_u8, 0x87_u8, 0x4d_u8])
  struct IBDA_PinControl
    lpVtbl : IBDA_PinControlVTbl*
  end

  struct IBDA_SignalPropertiesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    put_network_type : UInt64
    get_network_type : UInt64
    put_signal_source : UInt64
    get_signal_source : UInt64
    put_tuning_space : UInt64
    get_tuning_space : UInt64
  end

  IBDA_SignalProperties_GUID = "d2f1644b-b409-11d2-bc69-00a0c9ee9e16"
  IID_IBDA_SignalProperties = LibC::GUID.new(0xd2f1644b_u32, 0xb409_u16, 0x11d2_u16, StaticArray[0xbc_u8, 0x69_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xee_u8, 0x9e_u8, 0x16_u8])
  struct IBDA_SignalProperties
    lpVtbl : IBDA_SignalPropertiesVTbl*
  end

  struct IBDA_SignalStatisticsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    put_signal_strength : UInt64
    get_signal_strength : UInt64
    put_signal_quality : UInt64
    get_signal_quality : UInt64
    put_signal_present : UInt64
    get_signal_present : UInt64
    put_signal_locked : UInt64
    get_signal_locked : UInt64
    put_sample_time : UInt64
    get_sample_time : UInt64
  end

  IBDA_SignalStatistics_GUID = "1347d106-cf3a-428a-a5cb-ac0d9a2a4338"
  IID_IBDA_SignalStatistics = LibC::GUID.new(0x1347d106_u32, 0xcf3a_u16, 0x428a_u16, StaticArray[0xa5_u8, 0xcb_u8, 0xac_u8, 0xd_u8, 0x9a_u8, 0x2a_u8, 0x43_u8, 0x38_u8])
  struct IBDA_SignalStatistics
    lpVtbl : IBDA_SignalStatisticsVTbl*
  end

  struct IBDA_TopologyVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_node_types : UInt64
    get_node_descriptors : UInt64
    get_node_interfaces : UInt64
    get_pin_types : UInt64
    get_template_connections : UInt64
    create_pin : UInt64
    delete_pin : UInt64
    set_media_type : UInt64
    set_medium : UInt64
    create_topology : UInt64
    get_control_node : UInt64
  end

  IBDA_Topology_GUID = "79b56888-7fea-4690-b45d-38fd3c7849be"
  IID_IBDA_Topology = LibC::GUID.new(0x79b56888_u32, 0x7fea_u16, 0x4690_u16, StaticArray[0xb4_u8, 0x5d_u8, 0x38_u8, 0xfd_u8, 0x3c_u8, 0x78_u8, 0x49_u8, 0xbe_u8])
  struct IBDA_Topology
    lpVtbl : IBDA_TopologyVTbl*
  end

  struct IBDA_VoidTransformVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    start : UInt64
    stop : UInt64
  end

  IBDA_VoidTransform_GUID = "71985f46-1ca1-11d3-9cc8-00c04f7971e0"
  IID_IBDA_VoidTransform = LibC::GUID.new(0x71985f46_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  struct IBDA_VoidTransform
    lpVtbl : IBDA_VoidTransformVTbl*
  end

  struct IBDA_NullTransformVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    start : UInt64
    stop : UInt64
  end

  IBDA_NullTransform_GUID = "ddf15b0d-bd25-11d2-9ca0-00c04f7971e0"
  IID_IBDA_NullTransform = LibC::GUID.new(0xddf15b0d_u32, 0xbd25_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0xa0_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  struct IBDA_NullTransform
    lpVtbl : IBDA_NullTransformVTbl*
  end

  struct IBDA_FrequencyFilterVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    put_autotune : UInt64
    get_autotune : UInt64
    put_frequency : UInt64
    get_frequency : UInt64
    put_polarity : UInt64
    get_polarity : UInt64
    put_range : UInt64
    get_range : UInt64
    put_bandwidth : UInt64
    get_bandwidth : UInt64
    put_frequency_multiplier : UInt64
    get_frequency_multiplier : UInt64
  end

  IBDA_FrequencyFilter_GUID = "71985f47-1ca1-11d3-9cc8-00c04f7971e0"
  IID_IBDA_FrequencyFilter = LibC::GUID.new(0x71985f47_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  struct IBDA_FrequencyFilter
    lpVtbl : IBDA_FrequencyFilterVTbl*
  end

  struct IBDA_LNBInfoVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    put_local_oscilator_frequency_low_band : UInt64
    get_local_oscilator_frequency_low_band : UInt64
    put_local_oscilator_frequency_high_band : UInt64
    get_local_oscilator_frequency_high_band : UInt64
    put_high_low_switch_frequency : UInt64
    get_high_low_switch_frequency : UInt64
  end

  IBDA_LNBInfo_GUID = "992cf102-49f9-4719-a664-c4f23e2408f4"
  IID_IBDA_LNBInfo = LibC::GUID.new(0x992cf102_u32, 0x49f9_u16, 0x4719_u16, StaticArray[0xa6_u8, 0x64_u8, 0xc4_u8, 0xf2_u8, 0x3e_u8, 0x24_u8, 0x8_u8, 0xf4_u8])
  struct IBDA_LNBInfo
    lpVtbl : IBDA_LNBInfoVTbl*
  end

  struct IBDA_DiseqCommandVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    put_enable_diseq_commands : UInt64
    put_diseq_lnb_source : UInt64
    put_diseq_use_tone_burst : UInt64
    put_diseq_repeats : UInt64
    put_diseq_send_command : UInt64
    get_diseq_response : UInt64
  end

  IBDA_DiseqCommand_GUID = "f84e2ab0-3c6b-45e3-a0fc-8669d4b81f11"
  IID_IBDA_DiseqCommand = LibC::GUID.new(0xf84e2ab0_u32, 0x3c6b_u16, 0x45e3_u16, StaticArray[0xa0_u8, 0xfc_u8, 0x86_u8, 0x69_u8, 0xd4_u8, 0xb8_u8, 0x1f_u8, 0x11_u8])
  struct IBDA_DiseqCommand
    lpVtbl : IBDA_DiseqCommandVTbl*
  end

  struct IBDA_AutoDemodulateVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    put_auto_demodulate : UInt64
  end

  IBDA_AutoDemodulate_GUID = "ddf15b12-bd25-11d2-9ca0-00c04f7971e0"
  IID_IBDA_AutoDemodulate = LibC::GUID.new(0xddf15b12_u32, 0xbd25_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0xa0_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  struct IBDA_AutoDemodulate
    lpVtbl : IBDA_AutoDemodulateVTbl*
  end

  struct IBDA_AutoDemodulateExVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    put_auto_demodulate : UInt64
    get_supported_device_node_types : UInt64
    get_supported_video_formats : UInt64
    get_aux_input_count : UInt64
  end

  IBDA_AutoDemodulateEx_GUID = "34518d13-1182-48e6-b28f-b24987787326"
  IID_IBDA_AutoDemodulateEx = LibC::GUID.new(0x34518d13_u32, 0x1182_u16, 0x48e6_u16, StaticArray[0xb2_u8, 0x8f_u8, 0xb2_u8, 0x49_u8, 0x87_u8, 0x78_u8, 0x73_u8, 0x26_u8])
  struct IBDA_AutoDemodulateEx
    lpVtbl : IBDA_AutoDemodulateExVTbl*
  end

  struct IBDA_DigitalDemodulatorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    put_modulation_type : UInt64
    get_modulation_type : UInt64
    put_inner_fec_method : UInt64
    get_inner_fec_method : UInt64
    put_inner_fec_rate : UInt64
    get_inner_fec_rate : UInt64
    put_outer_fec_method : UInt64
    get_outer_fec_method : UInt64
    put_outer_fec_rate : UInt64
    get_outer_fec_rate : UInt64
    put_symbol_rate : UInt64
    get_symbol_rate : UInt64
    put_spectral_inversion : UInt64
    get_spectral_inversion : UInt64
  end

  IBDA_DigitalDemodulator_GUID = "ef30f379-985b-4d10-b640-a79d5e04e1e0"
  IID_IBDA_DigitalDemodulator = LibC::GUID.new(0xef30f379_u32, 0x985b_u16, 0x4d10_u16, StaticArray[0xb6_u8, 0x40_u8, 0xa7_u8, 0x9d_u8, 0x5e_u8, 0x4_u8, 0xe1_u8, 0xe0_u8])
  struct IBDA_DigitalDemodulator
    lpVtbl : IBDA_DigitalDemodulatorVTbl*
  end

  struct IBDA_DigitalDemodulator2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    put_modulation_type : UInt64
    get_modulation_type : UInt64
    put_inner_fec_method : UInt64
    get_inner_fec_method : UInt64
    put_inner_fec_rate : UInt64
    get_inner_fec_rate : UInt64
    put_outer_fec_method : UInt64
    get_outer_fec_method : UInt64
    put_outer_fec_rate : UInt64
    get_outer_fec_rate : UInt64
    put_symbol_rate : UInt64
    get_symbol_rate : UInt64
    put_spectral_inversion : UInt64
    get_spectral_inversion : UInt64
    put_guard_interval : UInt64
    get_guard_interval : UInt64
    put_transmission_mode : UInt64
    get_transmission_mode : UInt64
    put_roll_off : UInt64
    get_roll_off : UInt64
    put_pilot : UInt64
    get_pilot : UInt64
  end

  IBDA_DigitalDemodulator2_GUID = "525ed3ee-5cf3-4e1e-9a06-5368a84f9a6e"
  IID_IBDA_DigitalDemodulator2 = LibC::GUID.new(0x525ed3ee_u32, 0x5cf3_u16, 0x4e1e_u16, StaticArray[0x9a_u8, 0x6_u8, 0x53_u8, 0x68_u8, 0xa8_u8, 0x4f_u8, 0x9a_u8, 0x6e_u8])
  struct IBDA_DigitalDemodulator2
    lpVtbl : IBDA_DigitalDemodulator2VTbl*
  end

  struct IBDA_DigitalDemodulator3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    put_modulation_type : UInt64
    get_modulation_type : UInt64
    put_inner_fec_method : UInt64
    get_inner_fec_method : UInt64
    put_inner_fec_rate : UInt64
    get_inner_fec_rate : UInt64
    put_outer_fec_method : UInt64
    get_outer_fec_method : UInt64
    put_outer_fec_rate : UInt64
    get_outer_fec_rate : UInt64
    put_symbol_rate : UInt64
    get_symbol_rate : UInt64
    put_spectral_inversion : UInt64
    get_spectral_inversion : UInt64
    put_guard_interval : UInt64
    get_guard_interval : UInt64
    put_transmission_mode : UInt64
    get_transmission_mode : UInt64
    put_roll_off : UInt64
    get_roll_off : UInt64
    put_pilot : UInt64
    get_pilot : UInt64
    put_signal_timeouts : UInt64
    get_signal_timeouts : UInt64
    put_plp_number : UInt64
    get_plp_number : UInt64
  end

  IBDA_DigitalDemodulator3_GUID = "13f19604-7d32-4359-93a2-a05205d90ac9"
  IID_IBDA_DigitalDemodulator3 = LibC::GUID.new(0x13f19604_u32, 0x7d32_u16, 0x4359_u16, StaticArray[0x93_u8, 0xa2_u8, 0xa0_u8, 0x52_u8, 0x5_u8, 0xd9_u8, 0xa_u8, 0xc9_u8])
  struct IBDA_DigitalDemodulator3
    lpVtbl : IBDA_DigitalDemodulator3VTbl*
  end

  struct ICCSubStreamFilteringVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_substream_types : UInt64
    put_substream_types : UInt64
  end

  ICCSubStreamFiltering_GUID = "4b2bd7ea-8347-467b-8dbf-62f784929cc3"
  IID_ICCSubStreamFiltering = LibC::GUID.new(0x4b2bd7ea_u32, 0x8347_u16, 0x467b_u16, StaticArray[0x8d_u8, 0xbf_u8, 0x62_u8, 0xf7_u8, 0x84_u8, 0x92_u8, 0x9c_u8, 0xc3_u8])
  struct ICCSubStreamFiltering
    lpVtbl : ICCSubStreamFilteringVTbl*
  end

  struct IBDA_IPSinkControlVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_multicast_list : UInt64
    get_adapter_ip_address : UInt64
  end

  IBDA_IPSinkControl_GUID = "3f4dc8e2-4050-11d3-8f4b-00c04f7971e2"
  IID_IBDA_IPSinkControl = LibC::GUID.new(0x3f4dc8e2_u32, 0x4050_u16, 0x11d3_u16, StaticArray[0x8f_u8, 0x4b_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe2_u8])
  struct IBDA_IPSinkControl
    lpVtbl : IBDA_IPSinkControlVTbl*
  end

  struct IBDA_IPSinkInfoVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_multicast_list : UInt64
    get_adapter_ip_address : UInt64
    get_adapter_description : UInt64
  end

  IBDA_IPSinkInfo_GUID = "a750108f-492e-4d51-95f7-649b23ff7ad7"
  IID_IBDA_IPSinkInfo = LibC::GUID.new(0xa750108f_u32, 0x492e_u16, 0x4d51_u16, StaticArray[0x95_u8, 0xf7_u8, 0x64_u8, 0x9b_u8, 0x23_u8, 0xff_u8, 0x7a_u8, 0xd7_u8])
  struct IBDA_IPSinkInfo
    lpVtbl : IBDA_IPSinkInfoVTbl*
  end

  struct IEnumPIDMapVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    next : UInt64
    skip : UInt64
    reset : UInt64
    clone : UInt64
  end

  IEnumPIDMap_GUID = "afb6c2a2-2c41-11d3-8a60-0000f81e0e4a"
  IID_IEnumPIDMap = LibC::GUID.new(0xafb6c2a2_u32, 0x2c41_u16, 0x11d3_u16, StaticArray[0x8a_u8, 0x60_u8, 0x0_u8, 0x0_u8, 0xf8_u8, 0x1e_u8, 0xe_u8, 0x4a_u8])
  struct IEnumPIDMap
    lpVtbl : IEnumPIDMapVTbl*
  end

  struct IMPEG2PIDMapVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    map_pid : UInt64
    unmap_pid : UInt64
    enum_pid_map : UInt64
  end

  IMPEG2PIDMap_GUID = "afb6c2a1-2c41-11d3-8a60-0000f81e0e4a"
  IID_IMPEG2PIDMap = LibC::GUID.new(0xafb6c2a1_u32, 0x2c41_u16, 0x11d3_u16, StaticArray[0x8a_u8, 0x60_u8, 0x0_u8, 0x0_u8, 0xf8_u8, 0x1e_u8, 0xe_u8, 0x4a_u8])
  struct IMPEG2PIDMap
    lpVtbl : IMPEG2PIDMapVTbl*
  end

  struct IFrequencyMapVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_frequency_mapping : UInt64
    put_frequency_mapping : UInt64
    get_country_code : UInt64
    put_country_code : UInt64
    get_default_frequency_mapping : UInt64
    get_country_code_list : UInt64
  end

  IFrequencyMap_GUID = "06fb45c1-693c-4ea7-b79f-7a6a54d8def2"
  IID_IFrequencyMap = LibC::GUID.new(0x6fb45c1_u32, 0x693c_u16, 0x4ea7_u16, StaticArray[0xb7_u8, 0x9f_u8, 0x7a_u8, 0x6a_u8, 0x54_u8, 0xd8_u8, 0xde_u8, 0xf2_u8])
  struct IFrequencyMap
    lpVtbl : IFrequencyMapVTbl*
  end

  struct IBDA_EasMessageVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_eas_message : UInt64
  end

  IBDA_EasMessage_GUID = "d806973d-3ebe-46de-8fbb-6358fe784208"
  IID_IBDA_EasMessage = LibC::GUID.new(0xd806973d_u32, 0x3ebe_u16, 0x46de_u16, StaticArray[0x8f_u8, 0xbb_u8, 0x63_u8, 0x58_u8, 0xfe_u8, 0x78_u8, 0x42_u8, 0x8_u8])
  struct IBDA_EasMessage
    lpVtbl : IBDA_EasMessageVTbl*
  end

  struct IBDA_TransportStreamInfoVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_pat_table_tick_count : UInt64
  end

  IBDA_TransportStreamInfo_GUID = "8e882535-5f86-47ab-86cf-c281a72a0549"
  IID_IBDA_TransportStreamInfo = LibC::GUID.new(0x8e882535_u32, 0x5f86_u16, 0x47ab_u16, StaticArray[0x86_u8, 0xcf_u8, 0xc2_u8, 0x81_u8, 0xa7_u8, 0x2a_u8, 0x5_u8, 0x49_u8])
  struct IBDA_TransportStreamInfo
    lpVtbl : IBDA_TransportStreamInfoVTbl*
  end

  struct IBDA_ConditionalAccessVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_smart_card_status : UInt64
    get_smart_card_info : UInt64
    get_smart_card_applications : UInt64
    get_entitlement : UInt64
    tune_by_channel : UInt64
    set_program : UInt64
    add_program : UInt64
    remove_program : UInt64
    get_module_ui : UInt64
    inform_ui_closed : UInt64
  end

  IBDA_ConditionalAccess_GUID = "cd51f1e0-7be9-4123-8482-a2a796c0a6b0"
  IID_IBDA_ConditionalAccess = LibC::GUID.new(0xcd51f1e0_u32, 0x7be9_u16, 0x4123_u16, StaticArray[0x84_u8, 0x82_u8, 0xa2_u8, 0xa7_u8, 0x96_u8, 0xc0_u8, 0xa6_u8, 0xb0_u8])
  struct IBDA_ConditionalAccess
    lpVtbl : IBDA_ConditionalAccessVTbl*
  end

  struct IBDA_DiagnosticPropertiesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    read : UInt64
    write : UInt64
  end

  IBDA_DiagnosticProperties_GUID = "20e80cb5-c543-4c1b-8eb3-49e719eee7d4"
  IID_IBDA_DiagnosticProperties = LibC::GUID.new(0x20e80cb5_u32, 0xc543_u16, 0x4c1b_u16, StaticArray[0x8e_u8, 0xb3_u8, 0x49_u8, 0xe7_u8, 0x19_u8, 0xee_u8, 0xe7_u8, 0xd4_u8])
  struct IBDA_DiagnosticProperties
    lpVtbl : IBDA_DiagnosticPropertiesVTbl*
  end

  struct IBDA_DRMVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_drm_pairing_status : UInt64
    perform_drm_pairing : UInt64
  end

  IBDA_DRM_GUID = "f98d88b0-1992-4cd6-a6d9-b9afab99330d"
  IID_IBDA_DRM = LibC::GUID.new(0xf98d88b0_u32, 0x1992_u16, 0x4cd6_u16, StaticArray[0xa6_u8, 0xd9_u8, 0xb9_u8, 0xaf_u8, 0xab_u8, 0x99_u8, 0x33_u8, 0xd_u8])
  struct IBDA_DRM
    lpVtbl : IBDA_DRMVTbl*
  end

  struct IBDA_NameValueServiceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_value_name_by_index : UInt64
    get_value : UInt64
    set_value : UInt64
  end

  IBDA_NameValueService_GUID = "7f0b3150-7b81-4ad4-98e3-7e9097094301"
  IID_IBDA_NameValueService = LibC::GUID.new(0x7f0b3150_u32, 0x7b81_u16, 0x4ad4_u16, StaticArray[0x98_u8, 0xe3_u8, 0x7e_u8, 0x90_u8, 0x97_u8, 0x9_u8, 0x43_u8, 0x1_u8])
  struct IBDA_NameValueService
    lpVtbl : IBDA_NameValueServiceVTbl*
  end

  struct IBDA_ConditionalAccessExVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    check_entitlement_token : UInt64
    set_capture_token : UInt64
    open_broadcast_mmi : UInt64
    close_mmi_dialog : UInt64
    create_dialog_request_number : UInt64
  end

  IBDA_ConditionalAccessEx_GUID = "497c3418-23cb-44ba-bb62-769f506fcea7"
  IID_IBDA_ConditionalAccessEx = LibC::GUID.new(0x497c3418_u32, 0x23cb_u16, 0x44ba_u16, StaticArray[0xbb_u8, 0x62_u8, 0x76_u8, 0x9f_u8, 0x50_u8, 0x6f_u8, 0xce_u8, 0xa7_u8])
  struct IBDA_ConditionalAccessEx
    lpVtbl : IBDA_ConditionalAccessExVTbl*
  end

  struct IBDA_ISDBConditionalAccessVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_isdb_cas_request : UInt64
  end

  IBDA_ISDBConditionalAccess_GUID = "5e68c627-16c2-4e6c-b1e2-d00170cdaa0f"
  IID_IBDA_ISDBConditionalAccess = LibC::GUID.new(0x5e68c627_u32, 0x16c2_u16, 0x4e6c_u16, StaticArray[0xb1_u8, 0xe2_u8, 0xd0_u8, 0x1_u8, 0x70_u8, 0xcd_u8, 0xaa_u8, 0xf_u8])
  struct IBDA_ISDBConditionalAccess
    lpVtbl : IBDA_ISDBConditionalAccessVTbl*
  end

  struct IBDA_EventingServiceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    complete_event : UInt64
  end

  IBDA_EventingService_GUID = "207c413f-00dc-4c61-bad6-6fee1ff07064"
  IID_IBDA_EventingService = LibC::GUID.new(0x207c413f_u32, 0xdc_u16, 0x4c61_u16, StaticArray[0xba_u8, 0xd6_u8, 0x6f_u8, 0xee_u8, 0x1f_u8, 0xf0_u8, 0x70_u8, 0x64_u8])
  struct IBDA_EventingService
    lpVtbl : IBDA_EventingServiceVTbl*
  end

  struct IBDA_AUXVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    query_capabilities : UInt64
    enum_capability : UInt64
  end

  IBDA_AUX_GUID = "7def4c09-6e66-4567-a819-f0e17f4a81ab"
  IID_IBDA_AUX = LibC::GUID.new(0x7def4c09_u32, 0x6e66_u16, 0x4567_u16, StaticArray[0xa8_u8, 0x19_u8, 0xf0_u8, 0xe1_u8, 0x7f_u8, 0x4a_u8, 0x81_u8, 0xab_u8])
  struct IBDA_AUX
    lpVtbl : IBDA_AUXVTbl*
  end

  struct IBDA_EncoderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    query_capabilities : UInt64
    enum_audio_capability : UInt64
    enum_video_capability : UInt64
    set_parameters : UInt64
    get_state : UInt64
  end

  IBDA_Encoder_GUID = "3a8bad59-59fe-4559-a0ba-396cfaa98ae3"
  IID_IBDA_Encoder = LibC::GUID.new(0x3a8bad59_u32, 0x59fe_u16, 0x4559_u16, StaticArray[0xa0_u8, 0xba_u8, 0x39_u8, 0x6c_u8, 0xfa_u8, 0xa9_u8, 0x8a_u8, 0xe3_u8])
  struct IBDA_Encoder
    lpVtbl : IBDA_EncoderVTbl*
  end

  struct IBDA_FDCVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_status : UInt64
    request_tables : UInt64
    add_pid : UInt64
    remove_pid : UInt64
    add_tid : UInt64
    remove_tid : UInt64
    get_table_section : UInt64
  end

  IBDA_FDC_GUID = "138adc7e-58ae-437f-b0b4-c9fe19d5b4ac"
  IID_IBDA_FDC = LibC::GUID.new(0x138adc7e_u32, 0x58ae_u16, 0x437f_u16, StaticArray[0xb0_u8, 0xb4_u8, 0xc9_u8, 0xfe_u8, 0x19_u8, 0xd5_u8, 0xb4_u8, 0xac_u8])
  struct IBDA_FDC
    lpVtbl : IBDA_FDCVTbl*
  end

  struct IBDA_GuideDataDeliveryServiceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_guide_data_type : UInt64
    get_guide_data : UInt64
    request_guide_data_update : UInt64
    get_tune_xml_from_service_idx : UInt64
    get_services : UInt64
    get_service_info_from_tune_xml : UInt64
  end

  IBDA_GuideDataDeliveryService_GUID = "c0afcb73-23e7-4bc6-bafa-fdc167b4719f"
  IID_IBDA_GuideDataDeliveryService = LibC::GUID.new(0xc0afcb73_u32, 0x23e7_u16, 0x4bc6_u16, StaticArray[0xba_u8, 0xfa_u8, 0xfd_u8, 0xc1_u8, 0x67_u8, 0xb4_u8, 0x71_u8, 0x9f_u8])
  struct IBDA_GuideDataDeliveryService
    lpVtbl : IBDA_GuideDataDeliveryServiceVTbl*
  end

  struct IBDA_DRMServiceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_drm : UInt64
    get_drm_status : UInt64
  end

  IBDA_DRMService_GUID = "bff6b5bb-b0ae-484c-9dca-73528fb0b46e"
  IID_IBDA_DRMService = LibC::GUID.new(0xbff6b5bb_u32, 0xb0ae_u16, 0x484c_u16, StaticArray[0x9d_u8, 0xca_u8, 0x73_u8, 0x52_u8, 0x8f_u8, 0xb0_u8, 0xb4_u8, 0x6e_u8])
  struct IBDA_DRMService
    lpVtbl : IBDA_DRMServiceVTbl*
  end

  struct IBDA_WMDRMSessionVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_status : UInt64
    set_rev_info : UInt64
    set_crl : UInt64
    transact_message : UInt64
    get_license : UInt64
    reissue_license : UInt64
    renew_license : UInt64
    get_key_info : UInt64
  end

  IBDA_WMDRMSession_GUID = "4be6fa3d-07cd-4139-8b80-8c18ba3aec88"
  IID_IBDA_WMDRMSession = LibC::GUID.new(0x4be6fa3d_u32, 0x7cd_u16, 0x4139_u16, StaticArray[0x8b_u8, 0x80_u8, 0x8c_u8, 0x18_u8, 0xba_u8, 0x3a_u8, 0xec_u8, 0x88_u8])
  struct IBDA_WMDRMSession
    lpVtbl : IBDA_WMDRMSessionVTbl*
  end

  struct IBDA_WMDRMTunerVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    purchase_entitlement : UInt64
    cancel_capture_token : UInt64
    set_pid_protection : UInt64
    get_pid_protection : UInt64
    set_sync_value : UInt64
    get_start_code_profile : UInt64
  end

  IBDA_WMDRMTuner_GUID = "86d979cf-a8a7-4f94-b5fb-14c0aca68fe6"
  IID_IBDA_WMDRMTuner = LibC::GUID.new(0x86d979cf_u32, 0xa8a7_u16, 0x4f94_u16, StaticArray[0xb5_u8, 0xfb_u8, 0x14_u8, 0xc0_u8, 0xac_u8, 0xa6_u8, 0x8f_u8, 0xe6_u8])
  struct IBDA_WMDRMTuner
    lpVtbl : IBDA_WMDRMTunerVTbl*
  end

  struct IBDA_DRIDRMServiceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_drm : UInt64
    get_drm_status : UInt64
    get_pairing_status : UInt64
  end

  IBDA_DRIDRMService_GUID = "1f9bc2a5-44a3-4c52-aab1-0bbce5a1381d"
  IID_IBDA_DRIDRMService = LibC::GUID.new(0x1f9bc2a5_u32, 0x44a3_u16, 0x4c52_u16, StaticArray[0xaa_u8, 0xb1_u8, 0xb_u8, 0xbc_u8, 0xe5_u8, 0xa1_u8, 0x38_u8, 0x1d_u8])
  struct IBDA_DRIDRMService
    lpVtbl : IBDA_DRIDRMServiceVTbl*
  end

  struct IBDA_DRIWMDRMSessionVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    acknowledge_license : UInt64
    process_license_challenge : UInt64
    process_registration_challenge : UInt64
    set_rev_info : UInt64
    set_crl : UInt64
    get_hms_association_data : UInt64
    get_last_cardea_error : UInt64
  end

  IBDA_DRIWMDRMSession_GUID = "05c690f8-56db-4bb2-b053-79c12098bb26"
  IID_IBDA_DRIWMDRMSession = LibC::GUID.new(0x5c690f8_u32, 0x56db_u16, 0x4bb2_u16, StaticArray[0xb0_u8, 0x53_u8, 0x79_u8, 0xc1_u8, 0x20_u8, 0x98_u8, 0xbb_u8, 0x26_u8])
  struct IBDA_DRIWMDRMSession
    lpVtbl : IBDA_DRIWMDRMSessionVTbl*
  end

  struct IBDA_MUXVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_pid_list : UInt64
    get_pid_list : UInt64
  end

  IBDA_MUX_GUID = "942aafec-4c05-4c74-b8eb-8706c2a4943f"
  IID_IBDA_MUX = LibC::GUID.new(0x942aafec_u32, 0x4c05_u16, 0x4c74_u16, StaticArray[0xb8_u8, 0xeb_u8, 0x87_u8, 0x6_u8, 0xc2_u8, 0xa4_u8, 0x94_u8, 0x3f_u8])
  struct IBDA_MUX
    lpVtbl : IBDA_MUXVTbl*
  end

  struct IBDA_TransportStreamSelectorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_tsid : UInt64
    get_ts_information : UInt64
  end

  IBDA_TransportStreamSelector_GUID = "1dcfafe9-b45e-41b3-bb2a-561eb129ae98"
  IID_IBDA_TransportStreamSelector = LibC::GUID.new(0x1dcfafe9_u32, 0xb45e_u16, 0x41b3_u16, StaticArray[0xbb_u8, 0x2a_u8, 0x56_u8, 0x1e_u8, 0xb1_u8, 0x29_u8, 0xae_u8, 0x98_u8])
  struct IBDA_TransportStreamSelector
    lpVtbl : IBDA_TransportStreamSelectorVTbl*
  end

  struct IBDA_UserActivityServiceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_current_tuner_use_reason : UInt64
    get_user_activity_interval : UInt64
    user_activity_detected : UInt64
  end

  IBDA_UserActivityService_GUID = "53b14189-e478-4b7a-a1ff-506db4b99dfe"
  IID_IBDA_UserActivityService = LibC::GUID.new(0x53b14189_u32, 0xe478_u16, 0x4b7a_u16, StaticArray[0xa1_u8, 0xff_u8, 0x50_u8, 0x6d_u8, 0xb4_u8, 0xb9_u8, 0x9d_u8, 0xfe_u8])
  struct IBDA_UserActivityService
    lpVtbl : IBDA_UserActivityServiceVTbl*
  end

  struct IESEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_event_id : UInt64
    get_event_type : UInt64
    set_completion_status : UInt64
    get_data : UInt64
    get_string_data : UInt64
  end

  IESEvent_GUID = "1f0e5357-af43-44e6-8547-654c645145d2"
  IID_IESEvent = LibC::GUID.new(0x1f0e5357_u32, 0xaf43_u16, 0x44e6_u16, StaticArray[0x85_u8, 0x47_u8, 0x65_u8, 0x4c_u8, 0x64_u8, 0x51_u8, 0x45_u8, 0xd2_u8])
  struct IESEvent
    lpVtbl : IESEventVTbl*
  end

  struct IESEventsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    on_es_event_received : UInt64
  end

  IESEvents_GUID = "abd414bf-cfe5-4e5e-af5b-4b4e49c5bfeb"
  IID_IESEvents = LibC::GUID.new(0xabd414bf_u32, 0xcfe5_u16, 0x4e5e_u16, StaticArray[0xaf_u8, 0x5b_u8, 0x4b_u8, 0x4e_u8, 0x49_u8, 0xc5_u8, 0xbf_u8, 0xeb_u8])
  struct IESEvents
    lpVtbl : IESEventsVTbl*
  end

  struct IBroadcastEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    fire : UInt64
  end

  IBroadcastEvent_GUID = "3b21263f-26e8-489d-aac4-924f7efd9511"
  IID_IBroadcastEvent = LibC::GUID.new(0x3b21263f_u32, 0x26e8_u16, 0x489d_u16, StaticArray[0xaa_u8, 0xc4_u8, 0x92_u8, 0x4f_u8, 0x7e_u8, 0xfd_u8, 0x95_u8, 0x11_u8])
  struct IBroadcastEvent
    lpVtbl : IBroadcastEventVTbl*
  end

  struct IBroadcastEventExVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    fire : UInt64
    fire_ex : UInt64
  end

  IBroadcastEventEx_GUID = "3d9e3887-1929-423f-8021-43682de95448"
  IID_IBroadcastEventEx = LibC::GUID.new(0x3d9e3887_u32, 0x1929_u16, 0x423f_u16, StaticArray[0x80_u8, 0x21_u8, 0x43_u8, 0x68_u8, 0x2d_u8, 0xe9_u8, 0x54_u8, 0x48_u8])
  struct IBroadcastEventEx
    lpVtbl : IBroadcastEventExVTbl*
  end

  struct IAMNetShowConfigVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_buffering_time : UInt64
    put_buffering_time : UInt64
    get_use_fixed_udp_port : UInt64
    put_use_fixed_udp_port : UInt64
    get_fixed_udp_port : UInt64
    put_fixed_udp_port : UInt64
    get_use_http_proxy : UInt64
    put_use_http_proxy : UInt64
    get_enable_auto_proxy : UInt64
    put_enable_auto_proxy : UInt64
    get_http_proxy_host : UInt64
    put_http_proxy_host : UInt64
    get_http_proxy_port : UInt64
    put_http_proxy_port : UInt64
    get_enable_multicast : UInt64
    put_enable_multicast : UInt64
    get_enable_udp : UInt64
    put_enable_udp : UInt64
    get_enable_tcp : UInt64
    put_enable_tcp : UInt64
    get_enable_http : UInt64
    put_enable_http : UInt64
  end

  IAMNetShowConfig_GUID = "fa2aa8f1-8b62-11d0-a520-000000000000"
  IID_IAMNetShowConfig = LibC::GUID.new(0xfa2aa8f1_u32, 0x8b62_u16, 0x11d0_u16, StaticArray[0xa5_u8, 0x20_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])
  struct IAMNetShowConfig
    lpVtbl : IAMNetShowConfigVTbl*
  end

  struct IAMChannelInfoVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_channel_name : UInt64
    get_channel_description : UInt64
    get_channel_url : UInt64
    get_contact_address : UInt64
    get_contact_phone : UInt64
    get_contact_email : UInt64
  end

  IAMChannelInfo_GUID = "fa2aa8f2-8b62-11d0-a520-000000000000"
  IID_IAMChannelInfo = LibC::GUID.new(0xfa2aa8f2_u32, 0x8b62_u16, 0x11d0_u16, StaticArray[0xa5_u8, 0x20_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])
  struct IAMChannelInfo
    lpVtbl : IAMChannelInfoVTbl*
  end

  struct IAMNetworkStatusVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_received_packets : UInt64
    get_recovered_packets : UInt64
    get_lost_packets : UInt64
    get_reception_quality : UInt64
    get_buffering_count : UInt64
    get_is_broadcast : UInt64
    get_buffering_progress : UInt64
  end

  IAMNetworkStatus_GUID = "fa2aa8f3-8b62-11d0-a520-000000000000"
  IID_IAMNetworkStatus = LibC::GUID.new(0xfa2aa8f3_u32, 0x8b62_u16, 0x11d0_u16, StaticArray[0xa5_u8, 0x20_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])
  struct IAMNetworkStatus
    lpVtbl : IAMNetworkStatusVTbl*
  end

  struct IAMExtendedSeekingVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_ex_seek_capabilities : UInt64
    get_marker_count : UInt64
    get_current_marker : UInt64
    get_marker_time : UInt64
    get_marker_name : UInt64
    put_playback_speed : UInt64
    get_playback_speed : UInt64
  end

  IAMExtendedSeeking_GUID = "fa2aa8f9-8b62-11d0-a520-000000000000"
  IID_IAMExtendedSeeking = LibC::GUID.new(0xfa2aa8f9_u32, 0x8b62_u16, 0x11d0_u16, StaticArray[0xa5_u8, 0x20_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])
  struct IAMExtendedSeeking
    lpVtbl : IAMExtendedSeekingVTbl*
  end

  struct IAMNetShowExPropsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_source_protocol : UInt64
    get_bandwidth : UInt64
    get_error_correction : UInt64
    get_codec_count : UInt64
    get_codec_installed : UInt64
    get_codec_description : UInt64
    get_codec_url : UInt64
    get_creation_date : UInt64
    get_source_link : UInt64
  end

  IAMNetShowExProps_GUID = "fa2aa8f5-8b62-11d0-a520-000000000000"
  IID_IAMNetShowExProps = LibC::GUID.new(0xfa2aa8f5_u32, 0x8b62_u16, 0x11d0_u16, StaticArray[0xa5_u8, 0x20_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])
  struct IAMNetShowExProps
    lpVtbl : IAMNetShowExPropsVTbl*
  end

  struct IAMExtendedErrorInfoVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_has_error : UInt64
    get_error_description : UInt64
    get_error_code : UInt64
  end

  IAMExtendedErrorInfo_GUID = "fa2aa8f6-8b62-11d0-a520-000000000000"
  IID_IAMExtendedErrorInfo = LibC::GUID.new(0xfa2aa8f6_u32, 0x8b62_u16, 0x11d0_u16, StaticArray[0xa5_u8, 0x20_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])
  struct IAMExtendedErrorInfo
    lpVtbl : IAMExtendedErrorInfoVTbl*
  end

  struct IAMMediaContentVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_author_name : UInt64
    get_title : UInt64
    get_rating : UInt64
    get_description : UInt64
    get_copyright : UInt64
    get_base_url : UInt64
    get_logo_url : UInt64
    get_logo_icon_url : UInt64
    get_watermark_url : UInt64
    get_more_info_url : UInt64
    get_more_info_banner_image : UInt64
    get_more_info_banner_url : UInt64
    get_more_info_text : UInt64
  end

  IAMMediaContent_GUID = "fa2aa8f4-8b62-11d0-a520-000000000000"
  IID_IAMMediaContent = LibC::GUID.new(0xfa2aa8f4_u32, 0x8b62_u16, 0x11d0_u16, StaticArray[0xa5_u8, 0x20_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])
  struct IAMMediaContent
    lpVtbl : IAMMediaContentVTbl*
  end

  struct IAMMediaContent2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_media_parameter : UInt64
    get_media_parameter_name : UInt64
    get_playlist_count : UInt64
  end

  IAMMediaContent2_GUID = "ce8f78c1-74d9-11d2-b09d-00a0c9a81117"
  IID_IAMMediaContent2 = LibC::GUID.new(0xce8f78c1_u32, 0x74d9_u16, 0x11d2_u16, StaticArray[0xb0_u8, 0x9d_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xa8_u8, 0x11_u8, 0x17_u8])
  struct IAMMediaContent2
    lpVtbl : IAMMediaContent2VTbl*
  end

  struct IAMNetShowPrerollVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    put_preroll : UInt64
    get_preroll : UInt64
  end

  IAMNetShowPreroll_GUID = "aae7e4e2-6388-11d1-8d93-006097c9a2b2"
  IID_IAMNetShowPreroll = LibC::GUID.new(0xaae7e4e2_u32, 0x6388_u16, 0x11d1_u16, StaticArray[0x8d_u8, 0x93_u8, 0x0_u8, 0x60_u8, 0x97_u8, 0xc9_u8, 0xa2_u8, 0xb2_u8])
  struct IAMNetShowPreroll
    lpVtbl : IAMNetShowPrerollVTbl*
  end

  struct IDShowPluginVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_url : UInt64
    get_user_agent : UInt64
  end

  IDShowPlugin_GUID = "4746b7c8-700e-11d1-becc-00c04fb6e937"
  IID_IDShowPlugin = LibC::GUID.new(0x4746b7c8_u32, 0x700e_u16, 0x11d1_u16, StaticArray[0xbe_u8, 0xcc_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xe9_u8, 0x37_u8])
  struct IDShowPlugin
    lpVtbl : IDShowPluginVTbl*
  end

  struct IAMDirectSoundVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_direct_sound_interface : UInt64
    get_primary_buffer_interface : UInt64
    get_secondary_buffer_interface : UInt64
    release_direct_sound_interface : UInt64
    release_primary_buffer_interface : UInt64
    release_secondary_buffer_interface : UInt64
    set_focus_window : UInt64
    get_focus_window : UInt64
  end

  struct IAMDirectSound
    lpVtbl : IAMDirectSoundVTbl*
  end

  struct IAMLine21DecoderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_decoder_level : UInt64
    get_current_service : UInt64
    set_current_service : UInt64
    get_service_state : UInt64
    set_service_state : UInt64
    get_output_format : UInt64
    set_output_format : UInt64
    get_background_color : UInt64
    set_background_color : UInt64
    get_redraw_always : UInt64
    set_redraw_always : UInt64
    get_draw_background_mode : UInt64
    set_draw_background_mode : UInt64
  end

  struct IAMLine21Decoder
    lpVtbl : IAMLine21DecoderVTbl*
  end

  struct IAMParseVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_parse_time : UInt64
    set_parse_time : UInt64
    flush : UInt64
  end

  IAMParse_GUID = "c47a3420-005c-11d2-9038-00a0c9697298"
  IID_IAMParse = LibC::GUID.new(0xc47a3420_u32, 0x5c_u16, 0x11d2_u16, StaticArray[0x90_u8, 0x38_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x69_u8, 0x72_u8, 0x98_u8])
  struct IAMParse
    lpVtbl : IAMParseVTbl*
  end

  struct IAMCollectionVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_count : UInt64
    item : UInt64
    get__new_enum : UInt64
  end

  IAMCollection_GUID = "56a868b9-0ad4-11ce-b03a-0020af0ba770"
  IID_IAMCollection = LibC::GUID.new(0x56a868b9_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IAMCollection
    lpVtbl : IAMCollectionVTbl*
  end

  struct IMediaControlVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    run : UInt64
    pause : UInt64
    stop : UInt64
    get_state : UInt64
    render_file : UInt64
    add_source_filter : UInt64
    get_filter_collection : UInt64
    get_reg_filter_collection : UInt64
    stop_when_ready : UInt64
  end

  IMediaControl_GUID = "56a868b1-0ad4-11ce-b03a-0020af0ba770"
  IID_IMediaControl = LibC::GUID.new(0x56a868b1_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IMediaControl
    lpVtbl : IMediaControlVTbl*
  end

  struct IMediaEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_event_handle : UInt64
    get_event : UInt64
    wait_for_completion : UInt64
    cancel_default_handling : UInt64
    restore_default_handling : UInt64
    free_event_params : UInt64
  end

  IMediaEvent_GUID = "56a868b6-0ad4-11ce-b03a-0020af0ba770"
  IID_IMediaEvent = LibC::GUID.new(0x56a868b6_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IMediaEvent
    lpVtbl : IMediaEventVTbl*
  end

  struct IMediaEventExVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_event_handle : UInt64
    get_event : UInt64
    wait_for_completion : UInt64
    cancel_default_handling : UInt64
    restore_default_handling : UInt64
    free_event_params : UInt64
    set_notify_window : UInt64
    set_notify_flags : UInt64
    get_notify_flags : UInt64
  end

  IMediaEventEx_GUID = "56a868c0-0ad4-11ce-b03a-0020af0ba770"
  IID_IMediaEventEx = LibC::GUID.new(0x56a868c0_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IMediaEventEx
    lpVtbl : IMediaEventExVTbl*
  end

  struct IMediaPositionVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_duration : UInt64
    put_current_position : UInt64
    get_current_position : UInt64
    get_stop_time : UInt64
    put_stop_time : UInt64
    get_preroll_time : UInt64
    put_preroll_time : UInt64
    put_rate : UInt64
    get_rate : UInt64
    can_seek_forward : UInt64
    can_seek_backward : UInt64
  end

  IMediaPosition_GUID = "56a868b2-0ad4-11ce-b03a-0020af0ba770"
  IID_IMediaPosition = LibC::GUID.new(0x56a868b2_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IMediaPosition
    lpVtbl : IMediaPositionVTbl*
  end

  struct IBasicAudioVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    put_volume : UInt64
    get_volume : UInt64
    put_balance : UInt64
    get_balance : UInt64
  end

  IBasicAudio_GUID = "56a868b3-0ad4-11ce-b03a-0020af0ba770"
  IID_IBasicAudio = LibC::GUID.new(0x56a868b3_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IBasicAudio
    lpVtbl : IBasicAudioVTbl*
  end

  struct IVideoWindowVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    put_caption : UInt64
    get_caption : UInt64
    put_window_style : UInt64
    get_window_style : UInt64
    put_window_style_ex : UInt64
    get_window_style_ex : UInt64
    put_auto_show : UInt64
    get_auto_show : UInt64
    put_window_state : UInt64
    get_window_state : UInt64
    put_background_palette : UInt64
    get_background_palette : UInt64
    put_visible : UInt64
    get_visible : UInt64
    put_left : UInt64
    get_left : UInt64
    put_width : UInt64
    get_width : UInt64
    put_top : UInt64
    get_top : UInt64
    put_height : UInt64
    get_height : UInt64
    put_owner : UInt64
    get_owner : UInt64
    put_message_drain : UInt64
    get_message_drain : UInt64
    get_border_color : UInt64
    put_border_color : UInt64
    get_full_screen_mode : UInt64
    put_full_screen_mode : UInt64
    set_window_foreground : UInt64
    notify_owner_message : UInt64
    set_window_position : UInt64
    get_window_position : UInt64
    get_min_ideal_image_size : UInt64
    get_max_ideal_image_size : UInt64
    get_restore_position : UInt64
    hide_cursor : UInt64
    is_cursor_hidden : UInt64
  end

  IVideoWindow_GUID = "56a868b4-0ad4-11ce-b03a-0020af0ba770"
  IID_IVideoWindow = LibC::GUID.new(0x56a868b4_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IVideoWindow
    lpVtbl : IVideoWindowVTbl*
  end

  struct IBasicVideoVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_avg_time_per_frame : UInt64
    get_bit_rate : UInt64
    get_bit_error_rate : UInt64
    get_video_width : UInt64
    get_video_height : UInt64
    put_source_left : UInt64
    get_source_left : UInt64
    put_source_width : UInt64
    get_source_width : UInt64
    put_source_top : UInt64
    get_source_top : UInt64
    put_source_height : UInt64
    get_source_height : UInt64
    put_destination_left : UInt64
    get_destination_left : UInt64
    put_destination_width : UInt64
    get_destination_width : UInt64
    put_destination_top : UInt64
    get_destination_top : UInt64
    put_destination_height : UInt64
    get_destination_height : UInt64
    set_source_position : UInt64
    get_source_position : UInt64
    set_default_source_position : UInt64
    set_destination_position : UInt64
    get_destination_position : UInt64
    set_default_destination_position : UInt64
    get_video_size : UInt64
    get_video_palette_entries : UInt64
    get_current_image : UInt64
    is_using_default_source : UInt64
    is_using_default_destination : UInt64
  end

  IBasicVideo_GUID = "56a868b5-0ad4-11ce-b03a-0020af0ba770"
  IID_IBasicVideo = LibC::GUID.new(0x56a868b5_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IBasicVideo
    lpVtbl : IBasicVideoVTbl*
  end

  struct IBasicVideo2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_avg_time_per_frame : UInt64
    get_bit_rate : UInt64
    get_bit_error_rate : UInt64
    get_video_width : UInt64
    get_video_height : UInt64
    put_source_left : UInt64
    get_source_left : UInt64
    put_source_width : UInt64
    get_source_width : UInt64
    put_source_top : UInt64
    get_source_top : UInt64
    put_source_height : UInt64
    get_source_height : UInt64
    put_destination_left : UInt64
    get_destination_left : UInt64
    put_destination_width : UInt64
    get_destination_width : UInt64
    put_destination_top : UInt64
    get_destination_top : UInt64
    put_destination_height : UInt64
    get_destination_height : UInt64
    set_source_position : UInt64
    get_source_position : UInt64
    set_default_source_position : UInt64
    set_destination_position : UInt64
    get_destination_position : UInt64
    set_default_destination_position : UInt64
    get_video_size : UInt64
    get_video_palette_entries : UInt64
    get_current_image : UInt64
    is_using_default_source : UInt64
    is_using_default_destination : UInt64
    get_preferred_aspect_ratio : UInt64
  end

  IBasicVideo2_GUID = "329bb360-f6ea-11d1-9038-00a0c9697298"
  IID_IBasicVideo2 = LibC::GUID.new(0x329bb360_u32, 0xf6ea_u16, 0x11d1_u16, StaticArray[0x90_u8, 0x38_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x69_u8, 0x72_u8, 0x98_u8])
  struct IBasicVideo2
    lpVtbl : IBasicVideo2VTbl*
  end

  struct IDeferredCommandVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    cancel : UInt64
    confidence : UInt64
    postpone : UInt64
    get_h_result : UInt64
  end

  IDeferredCommand_GUID = "56a868b8-0ad4-11ce-b03a-0020af0ba770"
  IID_IDeferredCommand = LibC::GUID.new(0x56a868b8_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IDeferredCommand
    lpVtbl : IDeferredCommandVTbl*
  end

  struct IQueueCommandVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    invoke_at_stream_time : UInt64
    invoke_at_presentation_time : UInt64
  end

  IQueueCommand_GUID = "56a868b7-0ad4-11ce-b03a-0020af0ba770"
  IID_IQueueCommand = LibC::GUID.new(0x56a868b7_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IQueueCommand
    lpVtbl : IQueueCommandVTbl*
  end

  struct IFilterInfoVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    find_pin : UInt64
    get_name : UInt64
    get_vendor_info : UInt64
    get_filter : UInt64
    get_pins : UInt64
    get_is_file_source : UInt64
    get_filename : UInt64
    put_filename : UInt64
  end

  IFilterInfo_GUID = "56a868ba-0ad4-11ce-b03a-0020af0ba770"
  IID_IFilterInfo = LibC::GUID.new(0x56a868ba_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IFilterInfo
    lpVtbl : IFilterInfoVTbl*
  end

  struct IRegFilterInfoVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    filter : UInt64
  end

  IRegFilterInfo_GUID = "56a868bb-0ad4-11ce-b03a-0020af0ba770"
  IID_IRegFilterInfo = LibC::GUID.new(0x56a868bb_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IRegFilterInfo
    lpVtbl : IRegFilterInfoVTbl*
  end

  struct IMediaTypeInfoVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_type : UInt64
    get_subtype : UInt64
  end

  IMediaTypeInfo_GUID = "56a868bc-0ad4-11ce-b03a-0020af0ba770"
  IID_IMediaTypeInfo = LibC::GUID.new(0x56a868bc_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IMediaTypeInfo
    lpVtbl : IMediaTypeInfoVTbl*
  end

  struct IPinInfoVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_pin : UInt64
    get_connected_to : UInt64
    get_connection_media_type : UInt64
    get_filter_info : UInt64
    get_name : UInt64
    get_direction : UInt64
    get_pin_id : UInt64
    get_media_types : UInt64
    connect : UInt64
    connect_direct : UInt64
    connect_with_type : UInt64
    disconnect : UInt64
    render : UInt64
  end

  IPinInfo_GUID = "56a868bd-0ad4-11ce-b03a-0020af0ba770"
  IID_IPinInfo = LibC::GUID.new(0x56a868bd_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IPinInfo
    lpVtbl : IPinInfoVTbl*
  end

  struct IAMStatsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    reset : UInt64
    get_count : UInt64
    get_value_by_index : UInt64
    get_value_by_name : UInt64
    get_index : UInt64
    add_value : UInt64
  end

  IAMStats_GUID = "bc9bcf80-dcd2-11d2-abf6-00a0c905f375"
  IID_IAMStats = LibC::GUID.new(0xbc9bcf80_u32, 0xdcd2_u16, 0x11d2_u16, StaticArray[0xab_u8, 0xf6_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x5_u8, 0xf3_u8, 0x75_u8])
  struct IAMStats
    lpVtbl : IAMStatsVTbl*
  end

  struct IAMVideoAcceleratorNotifyVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_uncomp_surfaces_info : UInt64
    set_uncomp_surfaces_info : UInt64
    get_create_video_accelerator_data : UInt64
  end

  IAMVideoAcceleratorNotify_GUID = "256a6a21-fbad-11d1-82bf-00a0c9696c8f"
  IID_IAMVideoAcceleratorNotify = LibC::GUID.new(0x256a6a21_u32, 0xfbad_u16, 0x11d1_u16, StaticArray[0x82_u8, 0xbf_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x69_u8, 0x6c_u8, 0x8f_u8])
  struct IAMVideoAcceleratorNotify
    lpVtbl : IAMVideoAcceleratorNotifyVTbl*
  end

  struct IAMVideoAcceleratorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_video_accelerator_gui_ds : UInt64
    get_uncomp_formats_supported : UInt64
    get_internal_mem_info : UInt64
    get_comp_buffer_info : UInt64
    get_internal_comp_buffer_info : UInt64
    begin_frame : UInt64
    end_frame : UInt64
    get_buffer : UInt64
    release_buffer : UInt64
    execute : UInt64
    query_render_status : UInt64
    display_frame : UInt64
  end

  IAMVideoAccelerator_GUID = "256a6a22-fbad-11d1-82bf-00a0c9696c8f"
  IID_IAMVideoAccelerator = LibC::GUID.new(0x256a6a22_u32, 0xfbad_u16, 0x11d1_u16, StaticArray[0x82_u8, 0xbf_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x69_u8, 0x6c_u8, 0x8f_u8])
  struct IAMVideoAccelerator
    lpVtbl : IAMVideoAcceleratorVTbl*
  end

  struct IAMWstDecoderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_decoder_level : UInt64
    get_current_service : UInt64
    get_service_state : UInt64
    set_service_state : UInt64
    get_output_format : UInt64
    set_output_format : UInt64
    get_background_color : UInt64
    set_background_color : UInt64
    get_redraw_always : UInt64
    set_redraw_always : UInt64
    get_draw_background_mode : UInt64
    set_draw_background_mode : UInt64
    set_answer_mode : UInt64
    get_answer_mode : UInt64
    set_hold_page : UInt64
    get_hold_page : UInt64
    get_current_page : UInt64
    set_current_page : UInt64
  end

  struct IAMWstDecoder
    lpVtbl : IAMWstDecoderVTbl*
  end

  struct IKsTopologyInfoVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_num_categories : UInt64
    get_category : UInt64
    get_num_connections : UInt64
    get_connection_info : UInt64
    get_node_name : UInt64
    get_num_nodes : UInt64
    get_node_type : UInt64
    create_node_instance : UInt64
  end

  IKsTopologyInfo_GUID = "720d4ac0-7533-11d0-a5d6-28db04c10000"
  IID_IKsTopologyInfo = LibC::GUID.new(0x720d4ac0_u32, 0x7533_u16, 0x11d0_u16, StaticArray[0xa5_u8, 0xd6_u8, 0x28_u8, 0xdb_u8, 0x4_u8, 0xc1_u8, 0x0_u8, 0x0_u8])
  struct IKsTopologyInfo
    lpVtbl : IKsTopologyInfoVTbl*
  end

  struct ISelectorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_num_sources : UInt64
    get_source_node_id : UInt64
    put_source_node_id : UInt64
  end

  ISelector_GUID = "1abdaeca-68b6-4f83-9371-b413907c7b9f"
  IID_ISelector = LibC::GUID.new(0x1abdaeca_u32, 0x68b6_u16, 0x4f83_u16, StaticArray[0x93_u8, 0x71_u8, 0xb4_u8, 0x13_u8, 0x90_u8, 0x7c_u8, 0x7b_u8, 0x9f_u8])
  struct ISelector
    lpVtbl : ISelectorVTbl*
  end

  struct ICameraControlVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_exposure : UInt64
    put_exposure : UInt64
    get_range_exposure : UInt64
    get_focus : UInt64
    put_focus : UInt64
    get_range_focus : UInt64
    get_iris : UInt64
    put_iris : UInt64
    get_range_iris : UInt64
    get_zoom : UInt64
    put_zoom : UInt64
    get_range_zoom : UInt64
    get_focal_lengths : UInt64
    get_pan : UInt64
    put_pan : UInt64
    get_range_pan : UInt64
    get_tilt : UInt64
    put_tilt : UInt64
    get_range_tilt : UInt64
    get_pan_tilt : UInt64
    put_pan_tilt : UInt64
    get_roll : UInt64
    put_roll : UInt64
    get_range_roll : UInt64
    get_exposure_relative : UInt64
    put_exposure_relative : UInt64
    get_range_exposure_relative : UInt64
    get_focus_relative : UInt64
    put_focus_relative : UInt64
    get_range_focus_relative : UInt64
    get_iris_relative : UInt64
    put_iris_relative : UInt64
    get_range_iris_relative : UInt64
    get_zoom_relative : UInt64
    put_zoom_relative : UInt64
    get_range_zoom_relative : UInt64
    get_pan_relative : UInt64
    put_pan_relative : UInt64
    get_tilt_relative : UInt64
    put_tilt_relative : UInt64
    get_range_tilt_relative : UInt64
    get_pan_tilt_relative : UInt64
    put_pan_tilt_relative : UInt64
    get_range_pan_relative : UInt64
    get_roll_relative : UInt64
    put_roll_relative : UInt64
    get_range_roll_relative : UInt64
    get_scan_mode : UInt64
    put_scan_mode : UInt64
    get_privacy_mode : UInt64
    put_privacy_mode : UInt64
  end

  ICameraControl_GUID = "2ba1785d-4d1b-44ef-85e8-c7f1d3f20184"
  IID_ICameraControl = LibC::GUID.new(0x2ba1785d_u32, 0x4d1b_u16, 0x44ef_u16, StaticArray[0x85_u8, 0xe8_u8, 0xc7_u8, 0xf1_u8, 0xd3_u8, 0xf2_u8, 0x1_u8, 0x84_u8])
  struct ICameraControl
    lpVtbl : ICameraControlVTbl*
  end

  struct IVideoProcAmpVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_backlight_compensation : UInt64
    put_backlight_compensation : UInt64
    get_range_backlight_compensation : UInt64
    get_brightness : UInt64
    put_brightness : UInt64
    get_range_brightness : UInt64
    get_color_enable : UInt64
    put_color_enable : UInt64
    get_range_color_enable : UInt64
    get_contrast : UInt64
    put_contrast : UInt64
    get_range_contrast : UInt64
    get_gamma : UInt64
    put_gamma : UInt64
    get_range_gamma : UInt64
    get_saturation : UInt64
    put_saturation : UInt64
    get_range_saturation : UInt64
    get_sharpness : UInt64
    put_sharpness : UInt64
    get_range_sharpness : UInt64
    get_white_balance : UInt64
    put_white_balance : UInt64
    get_range_white_balance : UInt64
    get_gain : UInt64
    put_gain : UInt64
    get_range_gain : UInt64
    get_hue : UInt64
    put_hue : UInt64
    get_range_hue : UInt64
    get_digital_multiplier : UInt64
    put_digital_multiplier : UInt64
    get_range_digital_multiplier : UInt64
    get_powerline_frequency : UInt64
    put_powerline_frequency : UInt64
    get_range_powerline_frequency : UInt64
    get_white_balance_component : UInt64
    put_white_balance_component : UInt64
    get_range_white_balance_component : UInt64
  end

  IVideoProcAmp_GUID = "4050560e-42a7-413a-85c2-09269a2d0f44"
  IID_IVideoProcAmp = LibC::GUID.new(0x4050560e_u32, 0x42a7_u16, 0x413a_u16, StaticArray[0x85_u8, 0xc2_u8, 0x9_u8, 0x26_u8, 0x9a_u8, 0x2d_u8, 0xf_u8, 0x44_u8])
  struct IVideoProcAmp
    lpVtbl : IVideoProcAmpVTbl*
  end

  struct IKsNodeControlVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    put_node_id : UInt64
    put_ks_control : UInt64
  end

  IKsNodeControl_GUID = "11737c14-24a7-4bb5-81a0-0d003813b0c4"
  IID_IKsNodeControl = LibC::GUID.new(0x11737c14_u32, 0x24a7_u16, 0x4bb5_u16, StaticArray[0x81_u8, 0xa0_u8, 0xd_u8, 0x0_u8, 0x38_u8, 0x13_u8, 0xb0_u8, 0xc4_u8])
  struct IKsNodeControl
    lpVtbl : IKsNodeControlVTbl*
  end

  struct IConfigAsfWriterVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    configure_filter_using_profile_id : UInt64
    get_current_profile_id : UInt64
    configure_filter_using_profile_guid : UInt64
    get_current_profile_guid : UInt64
    configure_filter_using_profile : UInt64
    get_current_profile : UInt64
    set_index_mode : UInt64
    get_index_mode : UInt64
  end

  IConfigAsfWriter_GUID = "45086030-f7e4-486a-b504-826bb5792a3b"
  IID_IConfigAsfWriter = LibC::GUID.new(0x45086030_u32, 0xf7e4_u16, 0x486a_u16, StaticArray[0xb5_u8, 0x4_u8, 0x82_u8, 0x6b_u8, 0xb5_u8, 0x79_u8, 0x2a_u8, 0x3b_u8])
  struct IConfigAsfWriter
    lpVtbl : IConfigAsfWriterVTbl*
  end

  struct IConfigAsfWriter2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    configure_filter_using_profile_id : UInt64
    get_current_profile_id : UInt64
    configure_filter_using_profile_guid : UInt64
    get_current_profile_guid : UInt64
    configure_filter_using_profile : UInt64
    get_current_profile : UInt64
    set_index_mode : UInt64
    get_index_mode : UInt64
    stream_num_from_pin : UInt64
    set_param : UInt64
    get_param : UInt64
    reset_multi_pass_state : UInt64
  end

  IConfigAsfWriter2_GUID = "7989ccaa-53f0-44f0-884a-f3b03f6ae066"
  IID_IConfigAsfWriter2 = LibC::GUID.new(0x7989ccaa_u32, 0x53f0_u16, 0x44f0_u16, StaticArray[0x88_u8, 0x4a_u8, 0xf3_u8, 0xb0_u8, 0x3f_u8, 0x6a_u8, 0xe0_u8, 0x66_u8])
  struct IConfigAsfWriter2
    lpVtbl : IConfigAsfWriter2VTbl*
  end

  struct IMultiMediaStreamVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_information : UInt64
    get_media_stream : UInt64
    enum_media_streams : UInt64
    get_state : UInt64
    set_state : UInt64
    get_time : UInt64
    get_duration : UInt64
    seek : UInt64
    get_end_of_stream_event_handle : UInt64
  end

  IMultiMediaStream_GUID = "b502d1bc-9a57-11d0-8fde-00c04fd9189d"
  IID_IMultiMediaStream = LibC::GUID.new(0xb502d1bc_u32, 0x9a57_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0xde_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x18_u8, 0x9d_u8])
  struct IMultiMediaStream
    lpVtbl : IMultiMediaStreamVTbl*
  end

  struct IMediaStreamVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_multi_media_stream : UInt64
    get_information : UInt64
    set_same_format : UInt64
    allocate_sample : UInt64
    create_shared_sample : UInt64
    send_end_of_stream : UInt64
  end

  IMediaStream_GUID = "b502d1bd-9a57-11d0-8fde-00c04fd9189d"
  IID_IMediaStream = LibC::GUID.new(0xb502d1bd_u32, 0x9a57_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0xde_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x18_u8, 0x9d_u8])
  struct IMediaStream
    lpVtbl : IMediaStreamVTbl*
  end

  struct IStreamSampleVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_media_stream : UInt64
    get_sample_times : UInt64
    set_sample_times : UInt64
    update : UInt64
    completion_status : UInt64
  end

  IStreamSample_GUID = "b502d1be-9a57-11d0-8fde-00c04fd9189d"
  IID_IStreamSample = LibC::GUID.new(0xb502d1be_u32, 0x9a57_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0xde_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x18_u8, 0x9d_u8])
  struct IStreamSample
    lpVtbl : IStreamSampleVTbl*
  end

  struct IDirectDrawMediaStreamVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_multi_media_stream : UInt64
    get_information : UInt64
    set_same_format : UInt64
    allocate_sample : UInt64
    create_shared_sample : UInt64
    send_end_of_stream : UInt64
    get_format : UInt64
    set_format : UInt64
    get_direct_draw : UInt64
    set_direct_draw : UInt64
    create_sample : UInt64
    get_time_per_frame : UInt64
  end

  IDirectDrawMediaStream_GUID = "f4104fce-9a70-11d0-8fde-00c04fd9189d"
  IID_IDirectDrawMediaStream = LibC::GUID.new(0xf4104fce_u32, 0x9a70_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0xde_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x18_u8, 0x9d_u8])
  struct IDirectDrawMediaStream
    lpVtbl : IDirectDrawMediaStreamVTbl*
  end

  struct IDirectDrawStreamSampleVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_media_stream : UInt64
    get_sample_times : UInt64
    set_sample_times : UInt64
    update : UInt64
    completion_status : UInt64
    get_surface : UInt64
    set_rect : UInt64
  end

  IDirectDrawStreamSample_GUID = "f4104fcf-9a70-11d0-8fde-00c04fd9189d"
  IID_IDirectDrawStreamSample = LibC::GUID.new(0xf4104fcf_u32, 0x9a70_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0xde_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x18_u8, 0x9d_u8])
  struct IDirectDrawStreamSample
    lpVtbl : IDirectDrawStreamSampleVTbl*
  end

  struct IAudioMediaStreamVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_multi_media_stream : UInt64
    get_information : UInt64
    set_same_format : UInt64
    allocate_sample : UInt64
    create_shared_sample : UInt64
    send_end_of_stream : UInt64
    get_format : UInt64
    set_format : UInt64
    create_sample : UInt64
  end

  IAudioMediaStream_GUID = "f7537560-a3be-11d0-8212-00c04fc32c45"
  IID_IAudioMediaStream = LibC::GUID.new(0xf7537560_u32, 0xa3be_u16, 0x11d0_u16, StaticArray[0x82_u8, 0x12_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc3_u8, 0x2c_u8, 0x45_u8])
  struct IAudioMediaStream
    lpVtbl : IAudioMediaStreamVTbl*
  end

  struct IAudioStreamSampleVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_media_stream : UInt64
    get_sample_times : UInt64
    set_sample_times : UInt64
    update : UInt64
    completion_status : UInt64
    get_audio_data : UInt64
  end

  IAudioStreamSample_GUID = "345fee00-aba5-11d0-8212-00c04fc32c45"
  IID_IAudioStreamSample = LibC::GUID.new(0x345fee00_u32, 0xaba5_u16, 0x11d0_u16, StaticArray[0x82_u8, 0x12_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc3_u8, 0x2c_u8, 0x45_u8])
  struct IAudioStreamSample
    lpVtbl : IAudioStreamSampleVTbl*
  end

  struct IMemoryDataVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_buffer : UInt64
    get_info : UInt64
    set_actual : UInt64
  end

  IMemoryData_GUID = "327fc560-af60-11d0-8212-00c04fc32c45"
  IID_IMemoryData = LibC::GUID.new(0x327fc560_u32, 0xaf60_u16, 0x11d0_u16, StaticArray[0x82_u8, 0x12_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc3_u8, 0x2c_u8, 0x45_u8])
  struct IMemoryData
    lpVtbl : IMemoryDataVTbl*
  end

  struct IAudioDataVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_buffer : UInt64
    get_info : UInt64
    set_actual : UInt64
    get_format : UInt64
    set_format : UInt64
  end

  IAudioData_GUID = "54c719c0-af60-11d0-8212-00c04fc32c45"
  IID_IAudioData = LibC::GUID.new(0x54c719c0_u32, 0xaf60_u16, 0x11d0_u16, StaticArray[0x82_u8, 0x12_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc3_u8, 0x2c_u8, 0x45_u8])
  struct IAudioData
    lpVtbl : IAudioDataVTbl*
  end

  struct IAMMultiMediaStreamVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_information : UInt64
    get_media_stream : UInt64
    enum_media_streams : UInt64
    get_state : UInt64
    set_state : UInt64
    get_time : UInt64
    get_duration : UInt64
    seek : UInt64
    get_end_of_stream_event_handle : UInt64
    initialize : UInt64
    get_filter_graph : UInt64
    get_filter : UInt64
    add_media_stream : UInt64
    open_file : UInt64
    open_moniker : UInt64
    render : UInt64
  end

  IAMMultiMediaStream_GUID = "bebe595c-9a6f-11d0-8fde-00c04fd9189d"
  IID_IAMMultiMediaStream = LibC::GUID.new(0xbebe595c_u32, 0x9a6f_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0xde_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x18_u8, 0x9d_u8])
  struct IAMMultiMediaStream
    lpVtbl : IAMMultiMediaStreamVTbl*
  end

  struct IAMMediaStreamVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_multi_media_stream : UInt64
    get_information : UInt64
    set_same_format : UInt64
    allocate_sample : UInt64
    create_shared_sample : UInt64
    send_end_of_stream : UInt64
    initialize : UInt64
    set_state : UInt64
    join_am_multi_media_stream : UInt64
    join_filter : UInt64
    join_filter_graph : UInt64
  end

  IAMMediaStream_GUID = "bebe595d-9a6f-11d0-8fde-00c04fd9189d"
  IID_IAMMediaStream = LibC::GUID.new(0xbebe595d_u32, 0x9a6f_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0xde_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x18_u8, 0x9d_u8])
  struct IAMMediaStream
    lpVtbl : IAMMediaStreamVTbl*
  end

  struct IMediaStreamFilterVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_class_id : UInt64
    stop : UInt64
    pause : UInt64
    run : UInt64
    get_state : UInt64
    set_sync_source : UInt64
    get_sync_source : UInt64
    enum_pins : UInt64
    find_pin : UInt64
    query_filter_info : UInt64
    join_filter_graph : UInt64
    query_vendor_info : UInt64
    add_media_stream : UInt64
    get_media_stream : UInt64
    enum_media_streams : UInt64
    support_seeking : UInt64
    reference_time_to_stream_time : UInt64
    get_current_stream_time : UInt64
    wait_until : UInt64
    flush : UInt64
    end_of_stream : UInt64
  end

  IMediaStreamFilter_GUID = "bebe595e-9a6f-11d0-8fde-00c04fd9189d"
  IID_IMediaStreamFilter = LibC::GUID.new(0xbebe595e_u32, 0x9a6f_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0xde_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x18_u8, 0x9d_u8])
  struct IMediaStreamFilter
    lpVtbl : IMediaStreamFilterVTbl*
  end

  struct IDirectDrawMediaSampleAllocatorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_direct_draw : UInt64
  end

  IDirectDrawMediaSampleAllocator_GUID = "ab6b4afc-f6e4-11d0-900d-00c04fd9189d"
  IID_IDirectDrawMediaSampleAllocator = LibC::GUID.new(0xab6b4afc_u32, 0xf6e4_u16, 0x11d0_u16, StaticArray[0x90_u8, 0xd_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x18_u8, 0x9d_u8])
  struct IDirectDrawMediaSampleAllocator
    lpVtbl : IDirectDrawMediaSampleAllocatorVTbl*
  end

  struct IDirectDrawMediaSampleVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_surface_and_release_lock : UInt64
    lock_media_sample_pointer : UInt64
  end

  IDirectDrawMediaSample_GUID = "ab6b4afe-f6e4-11d0-900d-00c04fd9189d"
  IID_IDirectDrawMediaSample = LibC::GUID.new(0xab6b4afe_u32, 0xf6e4_u16, 0x11d0_u16, StaticArray[0x90_u8, 0xd_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x18_u8, 0x9d_u8])
  struct IDirectDrawMediaSample
    lpVtbl : IDirectDrawMediaSampleVTbl*
  end

  struct IAMMediaTypeStreamVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_multi_media_stream : UInt64
    get_information : UInt64
    set_same_format : UInt64
    allocate_sample : UInt64
    create_shared_sample : UInt64
    send_end_of_stream : UInt64
    get_format : UInt64
    set_format : UInt64
    create_sample : UInt64
    get_stream_allocator_requirements : UInt64
    set_stream_allocator_requirements : UInt64
  end

  IAMMediaTypeStream_GUID = "ab6b4afa-f6e4-11d0-900d-00c04fd9189d"
  IID_IAMMediaTypeStream = LibC::GUID.new(0xab6b4afa_u32, 0xf6e4_u16, 0x11d0_u16, StaticArray[0x90_u8, 0xd_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x18_u8, 0x9d_u8])
  struct IAMMediaTypeStream
    lpVtbl : IAMMediaTypeStreamVTbl*
  end

  struct IAMMediaTypeSampleVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_media_stream : UInt64
    get_sample_times : UInt64
    set_sample_times : UInt64
    update : UInt64
    completion_status : UInt64
    set_pointer : UInt64
    get_pointer : UInt64
    get_size : UInt64
    get_time : UInt64
    set_time : UInt64
    is_sync_point : UInt64
    set_sync_point : UInt64
    is_preroll : UInt64
    set_preroll : UInt64
    get_actual_data_length : UInt64
    set_actual_data_length : UInt64
    get_media_type : UInt64
    set_media_type : UInt64
    is_discontinuity : UInt64
    set_discontinuity : UInt64
    get_media_time : UInt64
    set_media_time : UInt64
  end

  IAMMediaTypeSample_GUID = "ab6b4afb-f6e4-11d0-900d-00c04fd9189d"
  IID_IAMMediaTypeSample = LibC::GUID.new(0xab6b4afb_u32, 0xf6e4_u16, 0x11d0_u16, StaticArray[0x90_u8, 0xd_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x18_u8, 0x9d_u8])
  struct IAMMediaTypeSample
    lpVtbl : IAMMediaTypeSampleVTbl*
  end

  struct IDirectDrawVideoVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_switches : UInt64
    set_switches : UInt64
    get_caps : UInt64
    get_emulated_caps : UInt64
    get_surface_desc : UInt64
    get_four_cc_codes : UInt64
    set_direct_draw : UInt64
    get_direct_draw : UInt64
    get_surface_type : UInt64
    set_default : UInt64
    use_scan_line : UInt64
    can_use_scan_line : UInt64
    use_overlay_stretch : UInt64
    can_use_overlay_stretch : UInt64
    use_when_full_screen : UInt64
    will_use_full_screen : UInt64
  end

  struct IDirectDrawVideo
    lpVtbl : IDirectDrawVideoVTbl*
  end

  struct IQualPropVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_frames_dropped_in_renderer : UInt64
    get_frames_drawn : UInt64
    get_avg_frame_rate : UInt64
    get_jitter : UInt64
    get_avg_sync_offset : UInt64
    get_dev_sync_offset : UInt64
  end

  struct IQualProp
    lpVtbl : IQualPropVTbl*
  end

  struct IFullScreenVideoVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    count_modes : UInt64
    get_mode_info : UInt64
    get_current_mode : UInt64
    is_mode_available : UInt64
    is_mode_enabled : UInt64
    set_enabled : UInt64
    get_clip_factor : UInt64
    set_clip_factor : UInt64
    set_message_drain : UInt64
    get_message_drain : UInt64
    set_monitor : UInt64
    get_monitor : UInt64
    hide_on_deactivate : UInt64
    is_hide_on_deactivate : UInt64
    set_caption : UInt64
    get_caption : UInt64
    set_default : UInt64
  end

  struct IFullScreenVideo
    lpVtbl : IFullScreenVideoVTbl*
  end

  struct IFullScreenVideoExVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    count_modes : UInt64
    get_mode_info : UInt64
    get_current_mode : UInt64
    is_mode_available : UInt64
    is_mode_enabled : UInt64
    set_enabled : UInt64
    get_clip_factor : UInt64
    set_clip_factor : UInt64
    set_message_drain : UInt64
    get_message_drain : UInt64
    set_monitor : UInt64
    get_monitor : UInt64
    hide_on_deactivate : UInt64
    is_hide_on_deactivate : UInt64
    set_caption : UInt64
    get_caption : UInt64
    set_default : UInt64
    set_accelerator_table : UInt64
    get_accelerator_table : UInt64
    keep_pixel_aspect_ratio : UInt64
    is_keep_pixel_aspect_ratio : UInt64
  end

  struct IFullScreenVideoEx
    lpVtbl : IFullScreenVideoExVTbl*
  end

  struct IBaseVideoMixerVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_lead_pin : UInt64
    get_lead_pin : UInt64
    get_input_pin_count : UInt64
    is_using_clock : UInt64
    set_using_clock : UInt64
    get_clock_period : UInt64
    set_clock_period : UInt64
  end

  struct IBaseVideoMixer
    lpVtbl : IBaseVideoMixerVTbl*
  end

  struct IDMOWrapperFilterVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    init : UInt64
  end

  IDMOWrapperFilter_GUID = "52d6f586-9f0f-4824-8fc8-e32ca04930c2"
  IID_IDMOWrapperFilter = LibC::GUID.new(0x52d6f586_u32, 0x9f0f_u16, 0x4824_u16, StaticArray[0x8f_u8, 0xc8_u8, 0xe3_u8, 0x2c_u8, 0xa0_u8, 0x49_u8, 0x30_u8, 0xc2_u8])
  struct IDMOWrapperFilter
    lpVtbl : IDMOWrapperFilterVTbl*
  end

  struct IMixerOCXNotifyVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    on_invalidate_rect : UInt64
    on_status_change : UInt64
    on_data_change : UInt64
  end

  IMixerOCXNotify_GUID = "81a3bd31-dee1-11d1-8508-00a0c91f9ca0"
  IID_IMixerOCXNotify = LibC::GUID.new(0x81a3bd31_u32, 0xdee1_u16, 0x11d1_u16, StaticArray[0x85_u8, 0x8_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x1f_u8, 0x9c_u8, 0xa0_u8])
  struct IMixerOCXNotify
    lpVtbl : IMixerOCXNotifyVTbl*
  end

  struct IMixerOCXVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    on_display_change : UInt64
    get_aspect_ratio : UInt64
    get_video_size : UInt64
    get_status : UInt64
    on_draw : UInt64
    set_draw_region : UInt64
    advise : UInt64
    un_advise : UInt64
  end

  IMixerOCX_GUID = "81a3bd32-dee1-11d1-8508-00a0c91f9ca0"
  IID_IMixerOCX = LibC::GUID.new(0x81a3bd32_u32, 0xdee1_u16, 0x11d1_u16, StaticArray[0x85_u8, 0x8_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x1f_u8, 0x9c_u8, 0xa0_u8])
  struct IMixerOCX
    lpVtbl : IMixerOCXVTbl*
  end

  struct IMixerPinConfigVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_relative_position : UInt64
    get_relative_position : UInt64
    set_z_order : UInt64
    get_z_order : UInt64
    set_color_key : UInt64
    get_color_key : UInt64
    set_blending_parameter : UInt64
    get_blending_parameter : UInt64
    set_aspect_ratio_mode : UInt64
    get_aspect_ratio_mode : UInt64
    set_stream_transparent : UInt64
    get_stream_transparent : UInt64
  end

  struct IMixerPinConfig
    lpVtbl : IMixerPinConfigVTbl*
  end

  struct IMixerPinConfig2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_relative_position : UInt64
    get_relative_position : UInt64
    set_z_order : UInt64
    get_z_order : UInt64
    set_color_key : UInt64
    get_color_key : UInt64
    set_blending_parameter : UInt64
    get_blending_parameter : UInt64
    set_aspect_ratio_mode : UInt64
    get_aspect_ratio_mode : UInt64
    set_stream_transparent : UInt64
    get_stream_transparent : UInt64
    set_overlay_surface_color_controls : UInt64
    get_overlay_surface_color_controls : UInt64
  end

  struct IMixerPinConfig2
    lpVtbl : IMixerPinConfig2VTbl*
  end

  struct IMpegAudioDecoderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_frequency_divider : UInt64
    put_frequency_divider : UInt64
    get_decoder_accuracy : UInt64
    put_decoder_accuracy : UInt64
    get_stereo : UInt64
    put_stereo : UInt64
    get_decoder_word_size : UInt64
    put_decoder_word_size : UInt64
    get_integer_decode : UInt64
    put_integer_decode : UInt64
    get_dual_mode : UInt64
    put_dual_mode : UInt64
    get_audio_format : UInt64
  end

  struct IMpegAudioDecoder
    lpVtbl : IMpegAudioDecoderVTbl*
  end

  struct IVMRImagePresenter9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    start_presenting : UInt64
    stop_presenting : UInt64
    present_image : UInt64
  end

  IVMRImagePresenter9_GUID = "69188c61-12a3-40f0-8ffc-342e7b433fd7"
  IID_IVMRImagePresenter9 = LibC::GUID.new(0x69188c61_u32, 0x12a3_u16, 0x40f0_u16, StaticArray[0x8f_u8, 0xfc_u8, 0x34_u8, 0x2e_u8, 0x7b_u8, 0x43_u8, 0x3f_u8, 0xd7_u8])
  struct IVMRImagePresenter9
    lpVtbl : IVMRImagePresenter9VTbl*
  end

  struct IVMRSurfaceAllocator9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize_device : UInt64
    terminate_device : UInt64
    get_surface : UInt64
    advise_notify : UInt64
  end

  IVMRSurfaceAllocator9_GUID = "8d5148ea-3f5d-46cf-9df1-d1b896eedb1f"
  IID_IVMRSurfaceAllocator9 = LibC::GUID.new(0x8d5148ea_u32, 0x3f5d_u16, 0x46cf_u16, StaticArray[0x9d_u8, 0xf1_u8, 0xd1_u8, 0xb8_u8, 0x96_u8, 0xee_u8, 0xdb_u8, 0x1f_u8])
  struct IVMRSurfaceAllocator9
    lpVtbl : IVMRSurfaceAllocator9VTbl*
  end

  struct IVMRSurfaceAllocatorEx9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize_device : UInt64
    terminate_device : UInt64
    get_surface : UInt64
    advise_notify : UInt64
    get_surface_ex : UInt64
  end

  IVMRSurfaceAllocatorEx9_GUID = "6de9a68a-a928-4522-bf57-655ae3866456"
  IID_IVMRSurfaceAllocatorEx9 = LibC::GUID.new(0x6de9a68a_u32, 0xa928_u16, 0x4522_u16, StaticArray[0xbf_u8, 0x57_u8, 0x65_u8, 0x5a_u8, 0xe3_u8, 0x86_u8, 0x64_u8, 0x56_u8])
  struct IVMRSurfaceAllocatorEx9
    lpVtbl : IVMRSurfaceAllocatorEx9VTbl*
  end

  struct IVMRSurfaceAllocatorNotify9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    advise_surface_allocator : UInt64
    set_d3_d_device : UInt64
    change_d3_d_device : UInt64
    allocate_surface_helper : UInt64
    notify_event : UInt64
  end

  IVMRSurfaceAllocatorNotify9_GUID = "dca3f5df-bb3a-4d03-bd81-84614bfbfa0c"
  IID_IVMRSurfaceAllocatorNotify9 = LibC::GUID.new(0xdca3f5df_u32, 0xbb3a_u16, 0x4d03_u16, StaticArray[0xbd_u8, 0x81_u8, 0x84_u8, 0x61_u8, 0x4b_u8, 0xfb_u8, 0xfa_u8, 0xc_u8])
  struct IVMRSurfaceAllocatorNotify9
    lpVtbl : IVMRSurfaceAllocatorNotify9VTbl*
  end

  struct IVMRWindowlessControl9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_native_video_size : UInt64
    get_min_ideal_video_size : UInt64
    get_max_ideal_video_size : UInt64
    set_video_position : UInt64
    get_video_position : UInt64
    get_aspect_ratio_mode : UInt64
    set_aspect_ratio_mode : UInt64
    set_video_clipping_window : UInt64
    repaint_video : UInt64
    display_mode_changed : UInt64
    get_current_image : UInt64
    set_border_color : UInt64
    get_border_color : UInt64
  end

  IVMRWindowlessControl9_GUID = "8f537d09-f85e-4414-b23b-502e54c79927"
  IID_IVMRWindowlessControl9 = LibC::GUID.new(0x8f537d09_u32, 0xf85e_u16, 0x4414_u16, StaticArray[0xb2_u8, 0x3b_u8, 0x50_u8, 0x2e_u8, 0x54_u8, 0xc7_u8, 0x99_u8, 0x27_u8])
  struct IVMRWindowlessControl9
    lpVtbl : IVMRWindowlessControl9VTbl*
  end

  struct IVMRMixerControl9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_alpha : UInt64
    get_alpha : UInt64
    set_z_order : UInt64
    get_z_order : UInt64
    set_output_rect : UInt64
    get_output_rect : UInt64
    set_background_clr : UInt64
    get_background_clr : UInt64
    set_mixing_prefs : UInt64
    get_mixing_prefs : UInt64
    set_proc_amp_control : UInt64
    get_proc_amp_control : UInt64
    get_proc_amp_control_range : UInt64
  end

  IVMRMixerControl9_GUID = "1a777eaa-47c8-4930-b2c9-8fee1c1b0f3b"
  IID_IVMRMixerControl9 = LibC::GUID.new(0x1a777eaa_u32, 0x47c8_u16, 0x4930_u16, StaticArray[0xb2_u8, 0xc9_u8, 0x8f_u8, 0xee_u8, 0x1c_u8, 0x1b_u8, 0xf_u8, 0x3b_u8])
  struct IVMRMixerControl9
    lpVtbl : IVMRMixerControl9VTbl*
  end

  struct IVMRMixerBitmap9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_alpha_bitmap : UInt64
    update_alpha_bitmap_parameters : UInt64
    get_alpha_bitmap_parameters : UInt64
  end

  IVMRMixerBitmap9_GUID = "ced175e5-1935-4820-81bd-ff6ad00c9108"
  IID_IVMRMixerBitmap9 = LibC::GUID.new(0xced175e5_u32, 0x1935_u16, 0x4820_u16, StaticArray[0x81_u8, 0xbd_u8, 0xff_u8, 0x6a_u8, 0xd0_u8, 0xc_u8, 0x91_u8, 0x8_u8])
  struct IVMRMixerBitmap9
    lpVtbl : IVMRMixerBitmap9VTbl*
  end

  struct IVMRSurface9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    is_surface_locked : UInt64
    lock_surface : UInt64
    unlock_surface : UInt64
    get_surface : UInt64
  end

  IVMRSurface9_GUID = "dfc581a1-6e1f-4c3a-8d0a-5e9792ea2afc"
  IID_IVMRSurface9 = LibC::GUID.new(0xdfc581a1_u32, 0x6e1f_u16, 0x4c3a_u16, StaticArray[0x8d_u8, 0xa_u8, 0x5e_u8, 0x97_u8, 0x92_u8, 0xea_u8, 0x2a_u8, 0xfc_u8])
  struct IVMRSurface9
    lpVtbl : IVMRSurface9VTbl*
  end

  struct IVMRImagePresenterConfig9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_rendering_prefs : UInt64
    get_rendering_prefs : UInt64
  end

  IVMRImagePresenterConfig9_GUID = "45c15cab-6e22-420a-8043-ae1f0ac02c7d"
  IID_IVMRImagePresenterConfig9 = LibC::GUID.new(0x45c15cab_u32, 0x6e22_u16, 0x420a_u16, StaticArray[0x80_u8, 0x43_u8, 0xae_u8, 0x1f_u8, 0xa_u8, 0xc0_u8, 0x2c_u8, 0x7d_u8])
  struct IVMRImagePresenterConfig9
    lpVtbl : IVMRImagePresenterConfig9VTbl*
  end

  struct IVMRVideoStreamControl9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_stream_active_state : UInt64
    get_stream_active_state : UInt64
  end

  IVMRVideoStreamControl9_GUID = "d0cfe38b-93e7-4772-8957-0400c49a4485"
  IID_IVMRVideoStreamControl9 = LibC::GUID.new(0xd0cfe38b_u32, 0x93e7_u16, 0x4772_u16, StaticArray[0x89_u8, 0x57_u8, 0x4_u8, 0x0_u8, 0xc4_u8, 0x9a_u8, 0x44_u8, 0x85_u8])
  struct IVMRVideoStreamControl9
    lpVtbl : IVMRVideoStreamControl9VTbl*
  end

  struct IVMRFilterConfig9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_image_compositor : UInt64
    set_number_of_streams : UInt64
    get_number_of_streams : UInt64
    set_rendering_prefs : UInt64
    get_rendering_prefs : UInt64
    set_rendering_mode : UInt64
    get_rendering_mode : UInt64
  end

  IVMRFilterConfig9_GUID = "5a804648-4f66-4867-9c43-4f5c822cf1b8"
  IID_IVMRFilterConfig9 = LibC::GUID.new(0x5a804648_u32, 0x4f66_u16, 0x4867_u16, StaticArray[0x9c_u8, 0x43_u8, 0x4f_u8, 0x5c_u8, 0x82_u8, 0x2c_u8, 0xf1_u8, 0xb8_u8])
  struct IVMRFilterConfig9
    lpVtbl : IVMRFilterConfig9VTbl*
  end

  struct IVMRAspectRatioControl9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_aspect_ratio_mode : UInt64
    set_aspect_ratio_mode : UInt64
  end

  IVMRAspectRatioControl9_GUID = "00d96c29-bbde-4efc-9901-bb5036392146"
  IID_IVMRAspectRatioControl9 = LibC::GUID.new(0xd96c29_u32, 0xbbde_u16, 0x4efc_u16, StaticArray[0x99_u8, 0x1_u8, 0xbb_u8, 0x50_u8, 0x36_u8, 0x39_u8, 0x21_u8, 0x46_u8])
  struct IVMRAspectRatioControl9
    lpVtbl : IVMRAspectRatioControl9VTbl*
  end

  struct IVMRMonitorConfig9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_monitor : UInt64
    get_monitor : UInt64
    set_default_monitor : UInt64
    get_default_monitor : UInt64
    get_available_monitors : UInt64
  end

  IVMRMonitorConfig9_GUID = "46c2e457-8ba0-4eef-b80b-0680f0978749"
  IID_IVMRMonitorConfig9 = LibC::GUID.new(0x46c2e457_u32, 0x8ba0_u16, 0x4eef_u16, StaticArray[0xb8_u8, 0xb_u8, 0x6_u8, 0x80_u8, 0xf0_u8, 0x97_u8, 0x87_u8, 0x49_u8])
  struct IVMRMonitorConfig9
    lpVtbl : IVMRMonitorConfig9VTbl*
  end

  struct IVMRDeinterlaceControl9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_number_of_deinterlace_modes : UInt64
    get_deinterlace_mode_caps : UInt64
    get_deinterlace_mode : UInt64
    set_deinterlace_mode : UInt64
    get_deinterlace_prefs : UInt64
    set_deinterlace_prefs : UInt64
    get_actual_deinterlace_mode : UInt64
  end

  IVMRDeinterlaceControl9_GUID = "a215fb8d-13c2-4f7f-993c-003d6271a459"
  IID_IVMRDeinterlaceControl9 = LibC::GUID.new(0xa215fb8d_u32, 0x13c2_u16, 0x4f7f_u16, StaticArray[0x99_u8, 0x3c_u8, 0x0_u8, 0x3d_u8, 0x62_u8, 0x71_u8, 0xa4_u8, 0x59_u8])
  struct IVMRDeinterlaceControl9
    lpVtbl : IVMRDeinterlaceControl9VTbl*
  end

  struct IVMRImageCompositor9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    init_composition_device : UInt64
    term_composition_device : UInt64
    set_stream_media_type : UInt64
    composite_image : UInt64
  end

  IVMRImageCompositor9_GUID = "4a5c89eb-df51-4654-ac2a-e48e02bbabf6"
  IID_IVMRImageCompositor9 = LibC::GUID.new(0x4a5c89eb_u32, 0xdf51_u16, 0x4654_u16, StaticArray[0xac_u8, 0x2a_u8, 0xe4_u8, 0x8e_u8, 0x2_u8, 0xbb_u8, 0xab_u8, 0xf6_u8])
  struct IVMRImageCompositor9
    lpVtbl : IVMRImageCompositor9VTbl*
  end

  struct IVPBaseConfigVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_connect_info : UInt64
    set_connect_info : UInt64
    get_vp_data_info : UInt64
    get_max_pixel_rate : UInt64
    inform_vp_input_formats : UInt64
    get_video_formats : UInt64
    set_video_format : UInt64
    set_invert_polarity : UInt64
    get_overlay_surface : UInt64
    set_direct_draw_kernel_handle : UInt64
    set_video_port_id : UInt64
    set_dd_surface_kernel_handles : UInt64
    set_surface_parameters : UInt64
  end

  struct IVPBaseConfig
    lpVtbl : IVPBaseConfigVTbl*
  end

  struct IVPConfigVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_connect_info : UInt64
    set_connect_info : UInt64
    get_vp_data_info : UInt64
    get_max_pixel_rate : UInt64
    inform_vp_input_formats : UInt64
    get_video_formats : UInt64
    set_video_format : UInt64
    set_invert_polarity : UInt64
    get_overlay_surface : UInt64
    set_direct_draw_kernel_handle : UInt64
    set_video_port_id : UInt64
    set_dd_surface_kernel_handles : UInt64
    set_surface_parameters : UInt64
    is_vp_decimation_allowed : UInt64
    set_scaling_factors : UInt64
  end

  struct IVPConfig
    lpVtbl : IVPConfigVTbl*
  end

  struct IVPVBIConfigVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_connect_info : UInt64
    set_connect_info : UInt64
    get_vp_data_info : UInt64
    get_max_pixel_rate : UInt64
    inform_vp_input_formats : UInt64
    get_video_formats : UInt64
    set_video_format : UInt64
    set_invert_polarity : UInt64
    get_overlay_surface : UInt64
    set_direct_draw_kernel_handle : UInt64
    set_video_port_id : UInt64
    set_dd_surface_kernel_handles : UInt64
    set_surface_parameters : UInt64
  end

  struct IVPVBIConfig
    lpVtbl : IVPVBIConfigVTbl*
  end

  struct IVPBaseNotifyVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    renegotiate_vp_parameters : UInt64
  end

  struct IVPBaseNotify
    lpVtbl : IVPBaseNotifyVTbl*
  end

  struct IVPNotifyVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    renegotiate_vp_parameters : UInt64
    set_deinterlace_mode : UInt64
    get_deinterlace_mode : UInt64
  end

  struct IVPNotify
    lpVtbl : IVPNotifyVTbl*
  end

  struct IVPNotify2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    renegotiate_vp_parameters : UInt64
    set_deinterlace_mode : UInt64
    get_deinterlace_mode : UInt64
    set_vp_sync_master : UInt64
    get_vp_sync_master : UInt64
  end

  struct IVPNotify2
    lpVtbl : IVPNotify2VTbl*
  end

  struct IVPVBINotifyVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    renegotiate_vp_parameters : UInt64
  end

  struct IVPVBINotify
    lpVtbl : IVPVBINotifyVTbl*
  end

  struct IMediaParamInfoVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_param_count : UInt64
    get_param_info : UInt64
    get_param_text : UInt64
    get_num_time_formats : UInt64
    get_supported_time_format : UInt64
    get_current_time_format : UInt64
  end

  IMediaParamInfo_GUID = "6d6cbb60-a223-44aa-842f-a2f06750be6d"
  IID_IMediaParamInfo = LibC::GUID.new(0x6d6cbb60_u32, 0xa223_u16, 0x44aa_u16, StaticArray[0x84_u8, 0x2f_u8, 0xa2_u8, 0xf0_u8, 0x67_u8, 0x50_u8, 0xbe_u8, 0x6d_u8])
  struct IMediaParamInfo
    lpVtbl : IMediaParamInfoVTbl*
  end

  struct IMediaParamsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_param : UInt64
    set_param : UInt64
    add_envelope : UInt64
    flush_envelope : UInt64
    set_time_format : UInt64
  end

  IMediaParams_GUID = "6d6cbb61-a223-44aa-842f-a2f06750be6e"
  IID_IMediaParams = LibC::GUID.new(0x6d6cbb61_u32, 0xa223_u16, 0x44aa_u16, StaticArray[0x84_u8, 0x2f_u8, 0xa2_u8, 0xf0_u8, 0x67_u8, 0x50_u8, 0xbe_u8, 0x6e_u8])
  struct IMediaParams
    lpVtbl : IMediaParamsVTbl*
  end

  struct IAMPlayListItemVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_flags : UInt64
    get_source_count : UInt64
    get_source_url : UInt64
    get_source_start : UInt64
    get_source_duration : UInt64
    get_source_start_marker : UInt64
    get_source_end_marker : UInt64
    get_source_start_marker_name : UInt64
    get_source_end_marker_name : UInt64
    get_link_url : UInt64
    get_scan_duration : UInt64
  end

  IAMPlayListItem_GUID = "56a868ff-0ad4-11ce-b03a-0020af0ba770"
  IID_IAMPlayListItem = LibC::GUID.new(0x56a868ff_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IAMPlayListItem
    lpVtbl : IAMPlayListItemVTbl*
  end

  struct IAMPlayListVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_flags : UInt64
    get_item_count : UInt64
    get_item : UInt64
    get_named_event : UInt64
    get_repeat_info : UInt64
  end

  IAMPlayList_GUID = "56a868fe-0ad4-11ce-b03a-0020af0ba770"
  IID_IAMPlayList = LibC::GUID.new(0x56a868fe_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  struct IAMPlayList
    lpVtbl : IAMPlayListVTbl*
  end

  struct ISpecifyParticularPagesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_pages : UInt64
  end

  ISpecifyParticularPages_GUID = "4c437b91-6e9e-11d1-a704-006097c4e476"
  IID_ISpecifyParticularPages = LibC::GUID.new(0x4c437b91_u32, 0x6e9e_u16, 0x11d1_u16, StaticArray[0xa7_u8, 0x4_u8, 0x0_u8, 0x60_u8, 0x97_u8, 0xc4_u8, 0xe4_u8, 0x76_u8])
  struct ISpecifyParticularPages
    lpVtbl : ISpecifyParticularPagesVTbl*
  end

  struct IAMRebuildVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    rebuild_now : UInt64
  end

  IAMRebuild_GUID = "02ef04dd-7580-11d1-bece-00c04fb6e937"
  IID_IAMRebuild = LibC::GUID.new(0x2ef04dd_u32, 0x7580_u16, 0x11d1_u16, StaticArray[0xbe_u8, 0xce_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xe9_u8, 0x37_u8])
  struct IAMRebuild
    lpVtbl : IAMRebuildVTbl*
  end

  struct IBufferingTimeVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_buffering_time : UInt64
    set_buffering_time : UInt64
  end

  IBufferingTime_GUID = "1e00486a-78dd-11d2-8dd3-006097c9a2b2"
  IID_IBufferingTime = LibC::GUID.new(0x1e00486a_u32, 0x78dd_u16, 0x11d2_u16, StaticArray[0x8d_u8, 0xd3_u8, 0x0_u8, 0x60_u8, 0x97_u8, 0xc9_u8, 0xa2_u8, 0xb2_u8])
  struct IBufferingTime
    lpVtbl : IBufferingTimeVTbl*
  end

  struct ICreatePropBagOnRegKeyVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    create : UInt64
  end

  ICreatePropBagOnRegKey_GUID = "8a674b48-1f63-11d3-b64c-00c04f79498e"
  IID_ICreatePropBagOnRegKey = LibC::GUID.new(0x8a674b48_u32, 0x1f63_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x4c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct ICreatePropBagOnRegKey
    lpVtbl : ICreatePropBagOnRegKeyVTbl*
  end

  struct ITuningSpacesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    get_item : UInt64
    get_enum_tuning_spaces : UInt64
  end

  ITuningSpaces_GUID = "901284e4-33fe-4b69-8d63-634a596f3756"
  IID_ITuningSpaces = LibC::GUID.new(0x901284e4_u32, 0x33fe_u16, 0x4b69_u16, StaticArray[0x8d_u8, 0x63_u8, 0x63_u8, 0x4a_u8, 0x59_u8, 0x6f_u8, 0x37_u8, 0x56_u8])
  struct ITuningSpaces
    lpVtbl : ITuningSpacesVTbl*
  end

  struct ITuningSpaceContainerVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    get_item : UInt64
    put_item : UInt64
    tuning_spaces_for_clsid : UInt64
    _tuning_spaces_for_clsid2 : UInt64
    tuning_spaces_for_name : UInt64
    find_id : UInt64
    add : UInt64
    get_enum_tuning_spaces : UInt64
    remove : UInt64
    get_max_count : UInt64
    put_max_count : UInt64
  end

  ITuningSpaceContainer_GUID = "5b692e84-e2f1-11d2-9493-00c04f72d980"
  IID_ITuningSpaceContainer = LibC::GUID.new(0x5b692e84_u32, 0xe2f1_u16, 0x11d2_u16, StaticArray[0x94_u8, 0x93_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
  struct ITuningSpaceContainer
    lpVtbl : ITuningSpaceContainerVTbl*
  end

  struct ITuningSpaceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_unique_name : UInt64
    put_unique_name : UInt64
    get_friendly_name : UInt64
    put_friendly_name : UInt64
    get_clsid : UInt64
    get_network_type : UInt64
    put_network_type : UInt64
    get__network_type : UInt64
    put__network_type : UInt64
    create_tune_request : UInt64
    enum_category_gui_ds : UInt64
    enum_device_monikers : UInt64
    get_default_preferred_component_types : UInt64
    put_default_preferred_component_types : UInt64
    get_frequency_mapping : UInt64
    put_frequency_mapping : UInt64
    get_default_locator : UInt64
    put_default_locator : UInt64
    clone : UInt64
  end

  ITuningSpace_GUID = "061c6e30-e622-11d2-9493-00c04f72d980"
  IID_ITuningSpace = LibC::GUID.new(0x61c6e30_u32, 0xe622_u16, 0x11d2_u16, StaticArray[0x94_u8, 0x93_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
  struct ITuningSpace
    lpVtbl : ITuningSpaceVTbl*
  end

  struct IEnumTuningSpacesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    next : UInt64
    skip : UInt64
    reset : UInt64
    clone : UInt64
  end

  IEnumTuningSpaces_GUID = "8b8eb248-fc2b-11d2-9d8c-00c04f72d980"
  IID_IEnumTuningSpaces = LibC::GUID.new(0x8b8eb248_u32, 0xfc2b_u16, 0x11d2_u16, StaticArray[0x9d_u8, 0x8c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
  struct IEnumTuningSpaces
    lpVtbl : IEnumTuningSpacesVTbl*
  end

  struct IDVBTuningSpaceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_unique_name : UInt64
    put_unique_name : UInt64
    get_friendly_name : UInt64
    put_friendly_name : UInt64
    get_clsid : UInt64
    get_network_type : UInt64
    put_network_type : UInt64
    get__network_type : UInt64
    put__network_type : UInt64
    create_tune_request : UInt64
    enum_category_gui_ds : UInt64
    enum_device_monikers : UInt64
    get_default_preferred_component_types : UInt64
    put_default_preferred_component_types : UInt64
    get_frequency_mapping : UInt64
    put_frequency_mapping : UInt64
    get_default_locator : UInt64
    put_default_locator : UInt64
    clone : UInt64
    get_system_type : UInt64
    put_system_type : UInt64
  end

  IDVBTuningSpace_GUID = "ada0b268-3b19-4e5b-acc4-49f852be13ba"
  IID_IDVBTuningSpace = LibC::GUID.new(0xada0b268_u32, 0x3b19_u16, 0x4e5b_u16, StaticArray[0xac_u8, 0xc4_u8, 0x49_u8, 0xf8_u8, 0x52_u8, 0xbe_u8, 0x13_u8, 0xba_u8])
  struct IDVBTuningSpace
    lpVtbl : IDVBTuningSpaceVTbl*
  end

  struct IDVBTuningSpace2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_unique_name : UInt64
    put_unique_name : UInt64
    get_friendly_name : UInt64
    put_friendly_name : UInt64
    get_clsid : UInt64
    get_network_type : UInt64
    put_network_type : UInt64
    get__network_type : UInt64
    put__network_type : UInt64
    create_tune_request : UInt64
    enum_category_gui_ds : UInt64
    enum_device_monikers : UInt64
    get_default_preferred_component_types : UInt64
    put_default_preferred_component_types : UInt64
    get_frequency_mapping : UInt64
    put_frequency_mapping : UInt64
    get_default_locator : UInt64
    put_default_locator : UInt64
    clone : UInt64
    get_system_type : UInt64
    put_system_type : UInt64
    get_network_id : UInt64
    put_network_id : UInt64
  end

  IDVBTuningSpace2_GUID = "843188b4-ce62-43db-966b-8145a094e040"
  IID_IDVBTuningSpace2 = LibC::GUID.new(0x843188b4_u32, 0xce62_u16, 0x43db_u16, StaticArray[0x96_u8, 0x6b_u8, 0x81_u8, 0x45_u8, 0xa0_u8, 0x94_u8, 0xe0_u8, 0x40_u8])
  struct IDVBTuningSpace2
    lpVtbl : IDVBTuningSpace2VTbl*
  end

  struct IDVBSTuningSpaceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_unique_name : UInt64
    put_unique_name : UInt64
    get_friendly_name : UInt64
    put_friendly_name : UInt64
    get_clsid : UInt64
    get_network_type : UInt64
    put_network_type : UInt64
    get__network_type : UInt64
    put__network_type : UInt64
    create_tune_request : UInt64
    enum_category_gui_ds : UInt64
    enum_device_monikers : UInt64
    get_default_preferred_component_types : UInt64
    put_default_preferred_component_types : UInt64
    get_frequency_mapping : UInt64
    put_frequency_mapping : UInt64
    get_default_locator : UInt64
    put_default_locator : UInt64
    clone : UInt64
    get_system_type : UInt64
    put_system_type : UInt64
    get_network_id : UInt64
    put_network_id : UInt64
    get_low_oscillator : UInt64
    put_low_oscillator : UInt64
    get_high_oscillator : UInt64
    put_high_oscillator : UInt64
    get_lnb_switch : UInt64
    put_lnb_switch : UInt64
    get_input_range : UInt64
    put_input_range : UInt64
    get_spectral_inversion : UInt64
    put_spectral_inversion : UInt64
  end

  IDVBSTuningSpace_GUID = "cdf7be60-d954-42fd-a972-78971958e470"
  IID_IDVBSTuningSpace = LibC::GUID.new(0xcdf7be60_u32, 0xd954_u16, 0x42fd_u16, StaticArray[0xa9_u8, 0x72_u8, 0x78_u8, 0x97_u8, 0x19_u8, 0x58_u8, 0xe4_u8, 0x70_u8])
  struct IDVBSTuningSpace
    lpVtbl : IDVBSTuningSpaceVTbl*
  end

  struct IAuxInTuningSpaceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_unique_name : UInt64
    put_unique_name : UInt64
    get_friendly_name : UInt64
    put_friendly_name : UInt64
    get_clsid : UInt64
    get_network_type : UInt64
    put_network_type : UInt64
    get__network_type : UInt64
    put__network_type : UInt64
    create_tune_request : UInt64
    enum_category_gui_ds : UInt64
    enum_device_monikers : UInt64
    get_default_preferred_component_types : UInt64
    put_default_preferred_component_types : UInt64
    get_frequency_mapping : UInt64
    put_frequency_mapping : UInt64
    get_default_locator : UInt64
    put_default_locator : UInt64
    clone : UInt64
  end

  IAuxInTuningSpace_GUID = "e48244b8-7e17-4f76-a763-5090ff1e2f30"
  IID_IAuxInTuningSpace = LibC::GUID.new(0xe48244b8_u32, 0x7e17_u16, 0x4f76_u16, StaticArray[0xa7_u8, 0x63_u8, 0x50_u8, 0x90_u8, 0xff_u8, 0x1e_u8, 0x2f_u8, 0x30_u8])
  struct IAuxInTuningSpace
    lpVtbl : IAuxInTuningSpaceVTbl*
  end

  struct IAuxInTuningSpace2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_unique_name : UInt64
    put_unique_name : UInt64
    get_friendly_name : UInt64
    put_friendly_name : UInt64
    get_clsid : UInt64
    get_network_type : UInt64
    put_network_type : UInt64
    get__network_type : UInt64
    put__network_type : UInt64
    create_tune_request : UInt64
    enum_category_gui_ds : UInt64
    enum_device_monikers : UInt64
    get_default_preferred_component_types : UInt64
    put_default_preferred_component_types : UInt64
    get_frequency_mapping : UInt64
    put_frequency_mapping : UInt64
    get_default_locator : UInt64
    put_default_locator : UInt64
    clone : UInt64
    get_country_code : UInt64
    put_country_code : UInt64
  end

  IAuxInTuningSpace2_GUID = "b10931ed-8bfe-4ab0-9dce-e469c29a9729"
  IID_IAuxInTuningSpace2 = LibC::GUID.new(0xb10931ed_u32, 0x8bfe_u16, 0x4ab0_u16, StaticArray[0x9d_u8, 0xce_u8, 0xe4_u8, 0x69_u8, 0xc2_u8, 0x9a_u8, 0x97_u8, 0x29_u8])
  struct IAuxInTuningSpace2
    lpVtbl : IAuxInTuningSpace2VTbl*
  end

  struct IAnalogTVTuningSpaceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_unique_name : UInt64
    put_unique_name : UInt64
    get_friendly_name : UInt64
    put_friendly_name : UInt64
    get_clsid : UInt64
    get_network_type : UInt64
    put_network_type : UInt64
    get__network_type : UInt64
    put__network_type : UInt64
    create_tune_request : UInt64
    enum_category_gui_ds : UInt64
    enum_device_monikers : UInt64
    get_default_preferred_component_types : UInt64
    put_default_preferred_component_types : UInt64
    get_frequency_mapping : UInt64
    put_frequency_mapping : UInt64
    get_default_locator : UInt64
    put_default_locator : UInt64
    clone : UInt64
    get_min_channel : UInt64
    put_min_channel : UInt64
    get_max_channel : UInt64
    put_max_channel : UInt64
    get_input_type : UInt64
    put_input_type : UInt64
    get_country_code : UInt64
    put_country_code : UInt64
  end

  IAnalogTVTuningSpace_GUID = "2a6e293c-2595-11d3-b64c-00c04f79498e"
  IID_IAnalogTVTuningSpace = LibC::GUID.new(0x2a6e293c_u32, 0x2595_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x4c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IAnalogTVTuningSpace
    lpVtbl : IAnalogTVTuningSpaceVTbl*
  end

  struct IATSCTuningSpaceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_unique_name : UInt64
    put_unique_name : UInt64
    get_friendly_name : UInt64
    put_friendly_name : UInt64
    get_clsid : UInt64
    get_network_type : UInt64
    put_network_type : UInt64
    get__network_type : UInt64
    put__network_type : UInt64
    create_tune_request : UInt64
    enum_category_gui_ds : UInt64
    enum_device_monikers : UInt64
    get_default_preferred_component_types : UInt64
    put_default_preferred_component_types : UInt64
    get_frequency_mapping : UInt64
    put_frequency_mapping : UInt64
    get_default_locator : UInt64
    put_default_locator : UInt64
    clone : UInt64
    get_min_channel : UInt64
    put_min_channel : UInt64
    get_max_channel : UInt64
    put_max_channel : UInt64
    get_input_type : UInt64
    put_input_type : UInt64
    get_country_code : UInt64
    put_country_code : UInt64
    get_min_minor_channel : UInt64
    put_min_minor_channel : UInt64
    get_max_minor_channel : UInt64
    put_max_minor_channel : UInt64
    get_min_physical_channel : UInt64
    put_min_physical_channel : UInt64
    get_max_physical_channel : UInt64
    put_max_physical_channel : UInt64
  end

  IATSCTuningSpace_GUID = "0369b4e2-45b6-11d3-b650-00c04f79498e"
  IID_IATSCTuningSpace = LibC::GUID.new(0x369b4e2_u32, 0x45b6_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x50_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IATSCTuningSpace
    lpVtbl : IATSCTuningSpaceVTbl*
  end

  struct IDigitalCableTuningSpaceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_unique_name : UInt64
    put_unique_name : UInt64
    get_friendly_name : UInt64
    put_friendly_name : UInt64
    get_clsid : UInt64
    get_network_type : UInt64
    put_network_type : UInt64
    get__network_type : UInt64
    put__network_type : UInt64
    create_tune_request : UInt64
    enum_category_gui_ds : UInt64
    enum_device_monikers : UInt64
    get_default_preferred_component_types : UInt64
    put_default_preferred_component_types : UInt64
    get_frequency_mapping : UInt64
    put_frequency_mapping : UInt64
    get_default_locator : UInt64
    put_default_locator : UInt64
    clone : UInt64
    get_min_channel : UInt64
    put_min_channel : UInt64
    get_max_channel : UInt64
    put_max_channel : UInt64
    get_input_type : UInt64
    put_input_type : UInt64
    get_country_code : UInt64
    put_country_code : UInt64
    get_min_minor_channel : UInt64
    put_min_minor_channel : UInt64
    get_max_minor_channel : UInt64
    put_max_minor_channel : UInt64
    get_min_physical_channel : UInt64
    put_min_physical_channel : UInt64
    get_max_physical_channel : UInt64
    put_max_physical_channel : UInt64
    get_min_major_channel : UInt64
    put_min_major_channel : UInt64
    get_max_major_channel : UInt64
    put_max_major_channel : UInt64
    get_min_source_id : UInt64
    put_min_source_id : UInt64
    get_max_source_id : UInt64
    put_max_source_id : UInt64
  end

  IDigitalCableTuningSpace_GUID = "013f9f9c-b449-4ec7-a6d2-9d4f2fc70ae5"
  IID_IDigitalCableTuningSpace = LibC::GUID.new(0x13f9f9c_u32, 0xb449_u16, 0x4ec7_u16, StaticArray[0xa6_u8, 0xd2_u8, 0x9d_u8, 0x4f_u8, 0x2f_u8, 0xc7_u8, 0xa_u8, 0xe5_u8])
  struct IDigitalCableTuningSpace
    lpVtbl : IDigitalCableTuningSpaceVTbl*
  end

  struct IAnalogRadioTuningSpaceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_unique_name : UInt64
    put_unique_name : UInt64
    get_friendly_name : UInt64
    put_friendly_name : UInt64
    get_clsid : UInt64
    get_network_type : UInt64
    put_network_type : UInt64
    get__network_type : UInt64
    put__network_type : UInt64
    create_tune_request : UInt64
    enum_category_gui_ds : UInt64
    enum_device_monikers : UInt64
    get_default_preferred_component_types : UInt64
    put_default_preferred_component_types : UInt64
    get_frequency_mapping : UInt64
    put_frequency_mapping : UInt64
    get_default_locator : UInt64
    put_default_locator : UInt64
    clone : UInt64
    get_min_frequency : UInt64
    put_min_frequency : UInt64
    get_max_frequency : UInt64
    put_max_frequency : UInt64
    get_step : UInt64
    put_step : UInt64
  end

  IAnalogRadioTuningSpace_GUID = "2a6e293b-2595-11d3-b64c-00c04f79498e"
  IID_IAnalogRadioTuningSpace = LibC::GUID.new(0x2a6e293b_u32, 0x2595_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x4c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IAnalogRadioTuningSpace
    lpVtbl : IAnalogRadioTuningSpaceVTbl*
  end

  struct IAnalogRadioTuningSpace2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_unique_name : UInt64
    put_unique_name : UInt64
    get_friendly_name : UInt64
    put_friendly_name : UInt64
    get_clsid : UInt64
    get_network_type : UInt64
    put_network_type : UInt64
    get__network_type : UInt64
    put__network_type : UInt64
    create_tune_request : UInt64
    enum_category_gui_ds : UInt64
    enum_device_monikers : UInt64
    get_default_preferred_component_types : UInt64
    put_default_preferred_component_types : UInt64
    get_frequency_mapping : UInt64
    put_frequency_mapping : UInt64
    get_default_locator : UInt64
    put_default_locator : UInt64
    clone : UInt64
    get_min_frequency : UInt64
    put_min_frequency : UInt64
    get_max_frequency : UInt64
    put_max_frequency : UInt64
    get_step : UInt64
    put_step : UInt64
    get_country_code : UInt64
    put_country_code : UInt64
  end

  IAnalogRadioTuningSpace2_GUID = "39dd45da-2da8-46ba-8a8a-87e2b73d983a"
  IID_IAnalogRadioTuningSpace2 = LibC::GUID.new(0x39dd45da_u32, 0x2da8_u16, 0x46ba_u16, StaticArray[0x8a_u8, 0x8a_u8, 0x87_u8, 0xe2_u8, 0xb7_u8, 0x3d_u8, 0x98_u8, 0x3a_u8])
  struct IAnalogRadioTuningSpace2
    lpVtbl : IAnalogRadioTuningSpace2VTbl*
  end

  struct ITuneRequestVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_tuning_space : UInt64
    get_components : UInt64
    clone : UInt64
    get_locator : UInt64
    put_locator : UInt64
  end

  ITuneRequest_GUID = "07ddc146-fc3d-11d2-9d8c-00c04f72d980"
  IID_ITuneRequest = LibC::GUID.new(0x7ddc146_u32, 0xfc3d_u16, 0x11d2_u16, StaticArray[0x9d_u8, 0x8c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
  struct ITuneRequest
    lpVtbl : ITuneRequestVTbl*
  end

  struct IChannelIDTuneRequestVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_tuning_space : UInt64
    get_components : UInt64
    clone : UInt64
    get_locator : UInt64
    put_locator : UInt64
    get_channel_id : UInt64
    put_channel_id : UInt64
  end

  IChannelIDTuneRequest_GUID = "156eff60-86f4-4e28-89fc-109799fd57ee"
  IID_IChannelIDTuneRequest = LibC::GUID.new(0x156eff60_u32, 0x86f4_u16, 0x4e28_u16, StaticArray[0x89_u8, 0xfc_u8, 0x10_u8, 0x97_u8, 0x99_u8, 0xfd_u8, 0x57_u8, 0xee_u8])
  struct IChannelIDTuneRequest
    lpVtbl : IChannelIDTuneRequestVTbl*
  end

  struct IChannelTuneRequestVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_tuning_space : UInt64
    get_components : UInt64
    clone : UInt64
    get_locator : UInt64
    put_locator : UInt64
    get_channel : UInt64
    put_channel : UInt64
  end

  IChannelTuneRequest_GUID = "0369b4e0-45b6-11d3-b650-00c04f79498e"
  IID_IChannelTuneRequest = LibC::GUID.new(0x369b4e0_u32, 0x45b6_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x50_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IChannelTuneRequest
    lpVtbl : IChannelTuneRequestVTbl*
  end

  struct IATSCChannelTuneRequestVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_tuning_space : UInt64
    get_components : UInt64
    clone : UInt64
    get_locator : UInt64
    put_locator : UInt64
    get_channel : UInt64
    put_channel : UInt64
    get_minor_channel : UInt64
    put_minor_channel : UInt64
  end

  IATSCChannelTuneRequest_GUID = "0369b4e1-45b6-11d3-b650-00c04f79498e"
  IID_IATSCChannelTuneRequest = LibC::GUID.new(0x369b4e1_u32, 0x45b6_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x50_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IATSCChannelTuneRequest
    lpVtbl : IATSCChannelTuneRequestVTbl*
  end

  struct IDigitalCableTuneRequestVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_tuning_space : UInt64
    get_components : UInt64
    clone : UInt64
    get_locator : UInt64
    put_locator : UInt64
    get_channel : UInt64
    put_channel : UInt64
    get_minor_channel : UInt64
    put_minor_channel : UInt64
    get_major_channel : UInt64
    put_major_channel : UInt64
    get_source_id : UInt64
    put_source_id : UInt64
  end

  IDigitalCableTuneRequest_GUID = "bad7753b-6b37-4810-ae57-3ce0c4a9e6cb"
  IID_IDigitalCableTuneRequest = LibC::GUID.new(0xbad7753b_u32, 0x6b37_u16, 0x4810_u16, StaticArray[0xae_u8, 0x57_u8, 0x3c_u8, 0xe0_u8, 0xc4_u8, 0xa9_u8, 0xe6_u8, 0xcb_u8])
  struct IDigitalCableTuneRequest
    lpVtbl : IDigitalCableTuneRequestVTbl*
  end

  struct IDVBTuneRequestVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_tuning_space : UInt64
    get_components : UInt64
    clone : UInt64
    get_locator : UInt64
    put_locator : UInt64
    get_onid : UInt64
    put_onid : UInt64
    get_tsid : UInt64
    put_tsid : UInt64
    get_sid : UInt64
    put_sid : UInt64
  end

  IDVBTuneRequest_GUID = "0d6f567e-a636-42bb-83ba-ce4c1704afa2"
  IID_IDVBTuneRequest = LibC::GUID.new(0xd6f567e_u32, 0xa636_u16, 0x42bb_u16, StaticArray[0x83_u8, 0xba_u8, 0xce_u8, 0x4c_u8, 0x17_u8, 0x4_u8, 0xaf_u8, 0xa2_u8])
  struct IDVBTuneRequest
    lpVtbl : IDVBTuneRequestVTbl*
  end

  struct IMPEG2TuneRequestVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_tuning_space : UInt64
    get_components : UInt64
    clone : UInt64
    get_locator : UInt64
    put_locator : UInt64
    get_tsid : UInt64
    put_tsid : UInt64
    get_prog_no : UInt64
    put_prog_no : UInt64
  end

  IMPEG2TuneRequest_GUID = "eb7d987f-8a01-42ad-b8ae-574deee44d1a"
  IID_IMPEG2TuneRequest = LibC::GUID.new(0xeb7d987f_u32, 0x8a01_u16, 0x42ad_u16, StaticArray[0xb8_u8, 0xae_u8, 0x57_u8, 0x4d_u8, 0xee_u8, 0xe4_u8, 0x4d_u8, 0x1a_u8])
  struct IMPEG2TuneRequest
    lpVtbl : IMPEG2TuneRequestVTbl*
  end

  struct IMPEG2TuneRequestFactoryVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    create_tune_request : UInt64
  end

  IMPEG2TuneRequestFactory_GUID = "14e11abd-ee37-4893-9ea1-6964de933e39"
  IID_IMPEG2TuneRequestFactory = LibC::GUID.new(0x14e11abd_u32, 0xee37_u16, 0x4893_u16, StaticArray[0x9e_u8, 0xa1_u8, 0x69_u8, 0x64_u8, 0xde_u8, 0x93_u8, 0x3e_u8, 0x39_u8])
  struct IMPEG2TuneRequestFactory
    lpVtbl : IMPEG2TuneRequestFactoryVTbl*
  end

  struct IMPEG2TuneRequestSupportVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
  end

  IMPEG2TuneRequestSupport_GUID = "1b9d5fc3-5bbc-4b6c-bb18-b9d10e3eeebf"
  IID_IMPEG2TuneRequestSupport = LibC::GUID.new(0x1b9d5fc3_u32, 0x5bbc_u16, 0x4b6c_u16, StaticArray[0xbb_u8, 0x18_u8, 0xb9_u8, 0xd1_u8, 0xe_u8, 0x3e_u8, 0xee_u8, 0xbf_u8])
  struct IMPEG2TuneRequestSupport
    lpVtbl : IMPEG2TuneRequestSupportVTbl*
  end

  struct ITunerCapVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_supported_network_types : UInt64
    get_supported_video_formats : UInt64
    get_aux_input_count : UInt64
  end

  ITunerCap_GUID = "e60dfa45-8d56-4e65-a8ab-d6be9412c249"
  IID_ITunerCap = LibC::GUID.new(0xe60dfa45_u32, 0x8d56_u16, 0x4e65_u16, StaticArray[0xa8_u8, 0xab_u8, 0xd6_u8, 0xbe_u8, 0x94_u8, 0x12_u8, 0xc2_u8, 0x49_u8])
  struct ITunerCap
    lpVtbl : ITunerCapVTbl*
  end

  struct ITunerCapExVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_has608_708_caption : UInt64
  end

  ITunerCapEx_GUID = "ed3e0c66-18c8-4ea6-9300-f6841fdd35dc"
  IID_ITunerCapEx = LibC::GUID.new(0xed3e0c66_u32, 0x18c8_u16, 0x4ea6_u16, StaticArray[0x93_u8, 0x0_u8, 0xf6_u8, 0x84_u8, 0x1f_u8, 0xdd_u8, 0x35_u8, 0xdc_u8])
  struct ITunerCapEx
    lpVtbl : ITunerCapExVTbl*
  end

  struct ITunerVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tuning_space : UInt64
    put_tuning_space : UInt64
    enum_tuning_spaces : UInt64
    get_tune_request : UInt64
    put_tune_request : UInt64
    validate : UInt64
    get_preferred_component_types : UInt64
    put_preferred_component_types : UInt64
    get_signal_strength : UInt64
    trigger_signal_events : UInt64
  end

  ITuner_GUID = "28c52640-018a-11d3-9d8e-00c04f72d980"
  IID_ITuner = LibC::GUID.new(0x28c52640_u32, 0x18a_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
  struct ITuner
    lpVtbl : ITunerVTbl*
  end

  struct IScanningTunerVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tuning_space : UInt64
    put_tuning_space : UInt64
    enum_tuning_spaces : UInt64
    get_tune_request : UInt64
    put_tune_request : UInt64
    validate : UInt64
    get_preferred_component_types : UInt64
    put_preferred_component_types : UInt64
    get_signal_strength : UInt64
    trigger_signal_events : UInt64
    seek_up : UInt64
    seek_down : UInt64
    scan_up : UInt64
    scan_down : UInt64
    auto_program : UInt64
  end

  IScanningTuner_GUID = "1dfd0a5c-0284-11d3-9d8e-00c04f72d980"
  IID_IScanningTuner = LibC::GUID.new(0x1dfd0a5c_u32, 0x284_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
  struct IScanningTuner
    lpVtbl : IScanningTunerVTbl*
  end

  struct IScanningTunerExVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tuning_space : UInt64
    put_tuning_space : UInt64
    enum_tuning_spaces : UInt64
    get_tune_request : UInt64
    put_tune_request : UInt64
    validate : UInt64
    get_preferred_component_types : UInt64
    put_preferred_component_types : UInt64
    get_signal_strength : UInt64
    trigger_signal_events : UInt64
    seek_up : UInt64
    seek_down : UInt64
    scan_up : UInt64
    scan_down : UInt64
    auto_program : UInt64
    get_current_locator : UInt64
    perform_exhaustive_scan : UInt64
    terminate_current_scan : UInt64
    resume_current_scan : UInt64
    get_tuner_scanning_capability : UInt64
    get_tuner_status : UInt64
    get_current_tuner_standard_capability : UInt64
    set_scan_signal_type_filter : UInt64
  end

  IScanningTunerEx_GUID = "04bbd195-0e2d-4593-9bd5-4f908bc33cf5"
  IID_IScanningTunerEx = LibC::GUID.new(0x4bbd195_u32, 0xe2d_u16, 0x4593_u16, StaticArray[0x9b_u8, 0xd5_u8, 0x4f_u8, 0x90_u8, 0x8b_u8, 0xc3_u8, 0x3c_u8, 0xf5_u8])
  struct IScanningTunerEx
    lpVtbl : IScanningTunerExVTbl*
  end

  struct IComponentTypeVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_category : UInt64
    put_category : UInt64
    get_media_major_type : UInt64
    put_media_major_type : UInt64
    get__media_major_type : UInt64
    put__media_major_type : UInt64
    get_media_sub_type : UInt64
    put_media_sub_type : UInt64
    get__media_sub_type : UInt64
    put__media_sub_type : UInt64
    get_media_format_type : UInt64
    put_media_format_type : UInt64
    get__media_format_type : UInt64
    put__media_format_type : UInt64
    get_media_type : UInt64
    put_media_type : UInt64
    clone : UInt64
  end

  IComponentType_GUID = "6a340dc0-0311-11d3-9d8e-00c04f72d980"
  IID_IComponentType = LibC::GUID.new(0x6a340dc0_u32, 0x311_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
  struct IComponentType
    lpVtbl : IComponentTypeVTbl*
  end

  struct ILanguageComponentTypeVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_category : UInt64
    put_category : UInt64
    get_media_major_type : UInt64
    put_media_major_type : UInt64
    get__media_major_type : UInt64
    put__media_major_type : UInt64
    get_media_sub_type : UInt64
    put_media_sub_type : UInt64
    get__media_sub_type : UInt64
    put__media_sub_type : UInt64
    get_media_format_type : UInt64
    put_media_format_type : UInt64
    get__media_format_type : UInt64
    put__media_format_type : UInt64
    get_media_type : UInt64
    put_media_type : UInt64
    clone : UInt64
    get_lang_id : UInt64
    put_lang_id : UInt64
  end

  ILanguageComponentType_GUID = "b874c8ba-0fa2-11d3-9d8e-00c04f72d980"
  IID_ILanguageComponentType = LibC::GUID.new(0xb874c8ba_u32, 0xfa2_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
  struct ILanguageComponentType
    lpVtbl : ILanguageComponentTypeVTbl*
  end

  struct IMPEG2ComponentTypeVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_category : UInt64
    put_category : UInt64
    get_media_major_type : UInt64
    put_media_major_type : UInt64
    get__media_major_type : UInt64
    put__media_major_type : UInt64
    get_media_sub_type : UInt64
    put_media_sub_type : UInt64
    get__media_sub_type : UInt64
    put__media_sub_type : UInt64
    get_media_format_type : UInt64
    put_media_format_type : UInt64
    get__media_format_type : UInt64
    put__media_format_type : UInt64
    get_media_type : UInt64
    put_media_type : UInt64
    clone : UInt64
    get_lang_id : UInt64
    put_lang_id : UInt64
    get_stream_type : UInt64
    put_stream_type : UInt64
  end

  IMPEG2ComponentType_GUID = "2c073d84-b51c-48c9-aa9f-68971e1f6e38"
  IID_IMPEG2ComponentType = LibC::GUID.new(0x2c073d84_u32, 0xb51c_u16, 0x48c9_u16, StaticArray[0xaa_u8, 0x9f_u8, 0x68_u8, 0x97_u8, 0x1e_u8, 0x1f_u8, 0x6e_u8, 0x38_u8])
  struct IMPEG2ComponentType
    lpVtbl : IMPEG2ComponentTypeVTbl*
  end

  struct IATSCComponentTypeVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_category : UInt64
    put_category : UInt64
    get_media_major_type : UInt64
    put_media_major_type : UInt64
    get__media_major_type : UInt64
    put__media_major_type : UInt64
    get_media_sub_type : UInt64
    put_media_sub_type : UInt64
    get__media_sub_type : UInt64
    put__media_sub_type : UInt64
    get_media_format_type : UInt64
    put_media_format_type : UInt64
    get__media_format_type : UInt64
    put__media_format_type : UInt64
    get_media_type : UInt64
    put_media_type : UInt64
    clone : UInt64
    get_lang_id : UInt64
    put_lang_id : UInt64
    get_stream_type : UInt64
    put_stream_type : UInt64
    get_flags : UInt64
    put_flags : UInt64
  end

  IATSCComponentType_GUID = "fc189e4d-7bd4-4125-b3b3-3a76a332cc96"
  IID_IATSCComponentType = LibC::GUID.new(0xfc189e4d_u32, 0x7bd4_u16, 0x4125_u16, StaticArray[0xb3_u8, 0xb3_u8, 0x3a_u8, 0x76_u8, 0xa3_u8, 0x32_u8, 0xcc_u8, 0x96_u8])
  struct IATSCComponentType
    lpVtbl : IATSCComponentTypeVTbl*
  end

  struct IEnumComponentTypesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    next : UInt64
    skip : UInt64
    reset : UInt64
    clone : UInt64
  end

  IEnumComponentTypes_GUID = "8a674b4a-1f63-11d3-b64c-00c04f79498e"
  IID_IEnumComponentTypes = LibC::GUID.new(0x8a674b4a_u32, 0x1f63_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x4c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IEnumComponentTypes
    lpVtbl : IEnumComponentTypesVTbl*
  end

  struct IComponentTypesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    enum_component_types : UInt64
    get_item : UInt64
    put_item : UInt64
    add : UInt64
    remove : UInt64
    clone : UInt64
  end

  IComponentTypes_GUID = "0dc13d4a-0313-11d3-9d8e-00c04f72d980"
  IID_IComponentTypes = LibC::GUID.new(0xdc13d4a_u32, 0x313_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
  struct IComponentTypes
    lpVtbl : IComponentTypesVTbl*
  end

  struct IComponentVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_type : UInt64
    put_type : UInt64
    get_desc_lang_id : UInt64
    put_desc_lang_id : UInt64
    get_status : UInt64
    put_status : UInt64
    get_description : UInt64
    put_description : UInt64
    clone : UInt64
  end

  IComponent_GUID = "1a5576fc-0e19-11d3-9d8e-00c04f72d980"
  IID_IComponent = LibC::GUID.new(0x1a5576fc_u32, 0xe19_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
  struct IComponent
    lpVtbl : IComponentVTbl*
  end

  struct IAnalogAudioComponentTypeVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_category : UInt64
    put_category : UInt64
    get_media_major_type : UInt64
    put_media_major_type : UInt64
    get__media_major_type : UInt64
    put__media_major_type : UInt64
    get_media_sub_type : UInt64
    put_media_sub_type : UInt64
    get__media_sub_type : UInt64
    put__media_sub_type : UInt64
    get_media_format_type : UInt64
    put_media_format_type : UInt64
    get__media_format_type : UInt64
    put__media_format_type : UInt64
    get_media_type : UInt64
    put_media_type : UInt64
    clone : UInt64
    get_analog_audio_mode : UInt64
    put_analog_audio_mode : UInt64
  end

  IAnalogAudioComponentType_GUID = "2cfeb2a8-1787-4a24-a941-c6eaec39c842"
  IID_IAnalogAudioComponentType = LibC::GUID.new(0x2cfeb2a8_u32, 0x1787_u16, 0x4a24_u16, StaticArray[0xa9_u8, 0x41_u8, 0xc6_u8, 0xea_u8, 0xec_u8, 0x39_u8, 0xc8_u8, 0x42_u8])
  struct IAnalogAudioComponentType
    lpVtbl : IAnalogAudioComponentTypeVTbl*
  end

  struct IMPEG2ComponentVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    notify : UInt64
    destroy : UInt64
    query_data_object : UInt64
    get_result_view_type : UInt64
    get_display_info : UInt64
    compare_objects : UInt64
    get_pid : UInt64
    put_pid : UInt64
    get_pcrpid : UInt64
    put_pcrpid : UInt64
    get_program_number : UInt64
    put_program_number : UInt64
  end

  IMPEG2Component_GUID = "1493e353-1eb6-473c-802d-8e6b8ec9d2a9"
  IID_IMPEG2Component = LibC::GUID.new(0x1493e353_u32, 0x1eb6_u16, 0x473c_u16, StaticArray[0x80_u8, 0x2d_u8, 0x8e_u8, 0x6b_u8, 0x8e_u8, 0xc9_u8, 0xd2_u8, 0xa9_u8])
  struct IMPEG2Component
    lpVtbl : IMPEG2ComponentVTbl*
  end

  struct IEnumComponentsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    next : UInt64
    skip : UInt64
    reset : UInt64
    clone : UInt64
  end

  IEnumComponents_GUID = "2a6e2939-2595-11d3-b64c-00c04f79498e"
  IID_IEnumComponents = LibC::GUID.new(0x2a6e2939_u32, 0x2595_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x4c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IEnumComponents
    lpVtbl : IEnumComponentsVTbl*
  end

  struct IComponentsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    enum_components : UInt64
    get_item : UInt64
    add : UInt64
    remove : UInt64
    clone : UInt64
    put_item : UInt64
  end

  IComponents_GUID = "39a48091-fffe-4182-a161-3ff802640e26"
  IID_IComponents = LibC::GUID.new(0x39a48091_u32, 0xfffe_u16, 0x4182_u16, StaticArray[0xa1_u8, 0x61_u8, 0x3f_u8, 0xf8_u8, 0x2_u8, 0x64_u8, 0xe_u8, 0x26_u8])
  struct IComponents
    lpVtbl : IComponentsVTbl*
  end

  struct IComponentsOldVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    enum_components : UInt64
    get_item : UInt64
    add : UInt64
    remove : UInt64
    clone : UInt64
  end

  IComponentsOld_GUID = "fcd01846-0e19-11d3-9d8e-00c04f72d980"
  IID_IComponentsOld = LibC::GUID.new(0xfcd01846_u32, 0xe19_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
  struct IComponentsOld
    lpVtbl : IComponentsOldVTbl*
  end

  struct ILocatorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_carrier_frequency : UInt64
    put_carrier_frequency : UInt64
    get_inner_fec : UInt64
    put_inner_fec : UInt64
    get_inner_fec_rate : UInt64
    put_inner_fec_rate : UInt64
    get_outer_fec : UInt64
    put_outer_fec : UInt64
    get_outer_fec_rate : UInt64
    put_outer_fec_rate : UInt64
    get_modulation : UInt64
    put_modulation : UInt64
    get_symbol_rate : UInt64
    put_symbol_rate : UInt64
    clone : UInt64
  end

  ILocator_GUID = "286d7f89-760c-4f89-80c4-66841d2507aa"
  IID_ILocator = LibC::GUID.new(0x286d7f89_u32, 0x760c_u16, 0x4f89_u16, StaticArray[0x80_u8, 0xc4_u8, 0x66_u8, 0x84_u8, 0x1d_u8, 0x25_u8, 0x7_u8, 0xaa_u8])
  struct ILocator
    lpVtbl : ILocatorVTbl*
  end

  struct IAnalogLocatorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_carrier_frequency : UInt64
    put_carrier_frequency : UInt64
    get_inner_fec : UInt64
    put_inner_fec : UInt64
    get_inner_fec_rate : UInt64
    put_inner_fec_rate : UInt64
    get_outer_fec : UInt64
    put_outer_fec : UInt64
    get_outer_fec_rate : UInt64
    put_outer_fec_rate : UInt64
    get_modulation : UInt64
    put_modulation : UInt64
    get_symbol_rate : UInt64
    put_symbol_rate : UInt64
    clone : UInt64
    get_video_standard : UInt64
    put_video_standard : UInt64
  end

  IAnalogLocator_GUID = "34d1f26b-e339-430d-abce-738cb48984dc"
  IID_IAnalogLocator = LibC::GUID.new(0x34d1f26b_u32, 0xe339_u16, 0x430d_u16, StaticArray[0xab_u8, 0xce_u8, 0x73_u8, 0x8c_u8, 0xb4_u8, 0x89_u8, 0x84_u8, 0xdc_u8])
  struct IAnalogLocator
    lpVtbl : IAnalogLocatorVTbl*
  end

  struct IDigitalLocatorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_carrier_frequency : UInt64
    put_carrier_frequency : UInt64
    get_inner_fec : UInt64
    put_inner_fec : UInt64
    get_inner_fec_rate : UInt64
    put_inner_fec_rate : UInt64
    get_outer_fec : UInt64
    put_outer_fec : UInt64
    get_outer_fec_rate : UInt64
    put_outer_fec_rate : UInt64
    get_modulation : UInt64
    put_modulation : UInt64
    get_symbol_rate : UInt64
    put_symbol_rate : UInt64
    clone : UInt64
  end

  IDigitalLocator_GUID = "19b595d8-839a-47f0-96df-4f194f3c768c"
  IID_IDigitalLocator = LibC::GUID.new(0x19b595d8_u32, 0x839a_u16, 0x47f0_u16, StaticArray[0x96_u8, 0xdf_u8, 0x4f_u8, 0x19_u8, 0x4f_u8, 0x3c_u8, 0x76_u8, 0x8c_u8])
  struct IDigitalLocator
    lpVtbl : IDigitalLocatorVTbl*
  end

  struct IATSCLocatorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_carrier_frequency : UInt64
    put_carrier_frequency : UInt64
    get_inner_fec : UInt64
    put_inner_fec : UInt64
    get_inner_fec_rate : UInt64
    put_inner_fec_rate : UInt64
    get_outer_fec : UInt64
    put_outer_fec : UInt64
    get_outer_fec_rate : UInt64
    put_outer_fec_rate : UInt64
    get_modulation : UInt64
    put_modulation : UInt64
    get_symbol_rate : UInt64
    put_symbol_rate : UInt64
    clone : UInt64
    get_physical_channel : UInt64
    put_physical_channel : UInt64
    get_tsid : UInt64
    put_tsid : UInt64
  end

  IATSCLocator_GUID = "bf8d986f-8c2b-4131-94d7-4d3d9fcc21ef"
  IID_IATSCLocator = LibC::GUID.new(0xbf8d986f_u32, 0x8c2b_u16, 0x4131_u16, StaticArray[0x94_u8, 0xd7_u8, 0x4d_u8, 0x3d_u8, 0x9f_u8, 0xcc_u8, 0x21_u8, 0xef_u8])
  struct IATSCLocator
    lpVtbl : IATSCLocatorVTbl*
  end

  struct IATSCLocator2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_carrier_frequency : UInt64
    put_carrier_frequency : UInt64
    get_inner_fec : UInt64
    put_inner_fec : UInt64
    get_inner_fec_rate : UInt64
    put_inner_fec_rate : UInt64
    get_outer_fec : UInt64
    put_outer_fec : UInt64
    get_outer_fec_rate : UInt64
    put_outer_fec_rate : UInt64
    get_modulation : UInt64
    put_modulation : UInt64
    get_symbol_rate : UInt64
    put_symbol_rate : UInt64
    clone : UInt64
    get_physical_channel : UInt64
    put_physical_channel : UInt64
    get_tsid : UInt64
    put_tsid : UInt64
    get_program_number : UInt64
    put_program_number : UInt64
  end

  IATSCLocator2_GUID = "612aa885-66cf-4090-ba0a-566f5312e4ca"
  IID_IATSCLocator2 = LibC::GUID.new(0x612aa885_u32, 0x66cf_u16, 0x4090_u16, StaticArray[0xba_u8, 0xa_u8, 0x56_u8, 0x6f_u8, 0x53_u8, 0x12_u8, 0xe4_u8, 0xca_u8])
  struct IATSCLocator2
    lpVtbl : IATSCLocator2VTbl*
  end

  struct IDigitalCableLocatorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_carrier_frequency : UInt64
    put_carrier_frequency : UInt64
    get_inner_fec : UInt64
    put_inner_fec : UInt64
    get_inner_fec_rate : UInt64
    put_inner_fec_rate : UInt64
    get_outer_fec : UInt64
    put_outer_fec : UInt64
    get_outer_fec_rate : UInt64
    put_outer_fec_rate : UInt64
    get_modulation : UInt64
    put_modulation : UInt64
    get_symbol_rate : UInt64
    put_symbol_rate : UInt64
    clone : UInt64
    get_physical_channel : UInt64
    put_physical_channel : UInt64
    get_tsid : UInt64
    put_tsid : UInt64
    get_program_number : UInt64
    put_program_number : UInt64
  end

  IDigitalCableLocator_GUID = "48f66a11-171a-419a-9525-beeecd51584c"
  IID_IDigitalCableLocator = LibC::GUID.new(0x48f66a11_u32, 0x171a_u16, 0x419a_u16, StaticArray[0x95_u8, 0x25_u8, 0xbe_u8, 0xee_u8, 0xcd_u8, 0x51_u8, 0x58_u8, 0x4c_u8])
  struct IDigitalCableLocator
    lpVtbl : IDigitalCableLocatorVTbl*
  end

  struct IDVBTLocatorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_carrier_frequency : UInt64
    put_carrier_frequency : UInt64
    get_inner_fec : UInt64
    put_inner_fec : UInt64
    get_inner_fec_rate : UInt64
    put_inner_fec_rate : UInt64
    get_outer_fec : UInt64
    put_outer_fec : UInt64
    get_outer_fec_rate : UInt64
    put_outer_fec_rate : UInt64
    get_modulation : UInt64
    put_modulation : UInt64
    get_symbol_rate : UInt64
    put_symbol_rate : UInt64
    clone : UInt64
    get_bandwidth : UInt64
    put_bandwidth : UInt64
    get_lp_inner_fec : UInt64
    put_lp_inner_fec : UInt64
    get_lp_inner_fec_rate : UInt64
    put_lp_inner_fec_rate : UInt64
    get_h_alpha : UInt64
    put_h_alpha : UInt64
    get_guard : UInt64
    put_guard : UInt64
    get_mode : UInt64
    put_mode : UInt64
    get_other_frequency_in_use : UInt64
    put_other_frequency_in_use : UInt64
  end

  IDVBTLocator_GUID = "8664da16-dda2-42ac-926a-c18f9127c302"
  IID_IDVBTLocator = LibC::GUID.new(0x8664da16_u32, 0xdda2_u16, 0x42ac_u16, StaticArray[0x92_u8, 0x6a_u8, 0xc1_u8, 0x8f_u8, 0x91_u8, 0x27_u8, 0xc3_u8, 0x2_u8])
  struct IDVBTLocator
    lpVtbl : IDVBTLocatorVTbl*
  end

  struct IDVBTLocator2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_carrier_frequency : UInt64
    put_carrier_frequency : UInt64
    get_inner_fec : UInt64
    put_inner_fec : UInt64
    get_inner_fec_rate : UInt64
    put_inner_fec_rate : UInt64
    get_outer_fec : UInt64
    put_outer_fec : UInt64
    get_outer_fec_rate : UInt64
    put_outer_fec_rate : UInt64
    get_modulation : UInt64
    put_modulation : UInt64
    get_symbol_rate : UInt64
    put_symbol_rate : UInt64
    clone : UInt64
    get_bandwidth : UInt64
    put_bandwidth : UInt64
    get_lp_inner_fec : UInt64
    put_lp_inner_fec : UInt64
    get_lp_inner_fec_rate : UInt64
    put_lp_inner_fec_rate : UInt64
    get_h_alpha : UInt64
    put_h_alpha : UInt64
    get_guard : UInt64
    put_guard : UInt64
    get_mode : UInt64
    put_mode : UInt64
    get_other_frequency_in_use : UInt64
    put_other_frequency_in_use : UInt64
    get_physical_layer_pipe_id : UInt64
    put_physical_layer_pipe_id : UInt64
  end

  IDVBTLocator2_GUID = "448a2edf-ae95-4b43-a3cc-747843c453d4"
  IID_IDVBTLocator2 = LibC::GUID.new(0x448a2edf_u32, 0xae95_u16, 0x4b43_u16, StaticArray[0xa3_u8, 0xcc_u8, 0x74_u8, 0x78_u8, 0x43_u8, 0xc4_u8, 0x53_u8, 0xd4_u8])
  struct IDVBTLocator2
    lpVtbl : IDVBTLocator2VTbl*
  end

  struct IDVBSLocatorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_carrier_frequency : UInt64
    put_carrier_frequency : UInt64
    get_inner_fec : UInt64
    put_inner_fec : UInt64
    get_inner_fec_rate : UInt64
    put_inner_fec_rate : UInt64
    get_outer_fec : UInt64
    put_outer_fec : UInt64
    get_outer_fec_rate : UInt64
    put_outer_fec_rate : UInt64
    get_modulation : UInt64
    put_modulation : UInt64
    get_symbol_rate : UInt64
    put_symbol_rate : UInt64
    clone : UInt64
    get_signal_polarisation : UInt64
    put_signal_polarisation : UInt64
    get_west_position : UInt64
    put_west_position : UInt64
    get_orbital_position : UInt64
    put_orbital_position : UInt64
    get_azimuth : UInt64
    put_azimuth : UInt64
    get_elevation : UInt64
    put_elevation : UInt64
  end

  IDVBSLocator_GUID = "3d7c353c-0d04-45f1-a742-f97cc1188dc8"
  IID_IDVBSLocator = LibC::GUID.new(0x3d7c353c_u32, 0xd04_u16, 0x45f1_u16, StaticArray[0xa7_u8, 0x42_u8, 0xf9_u8, 0x7c_u8, 0xc1_u8, 0x18_u8, 0x8d_u8, 0xc8_u8])
  struct IDVBSLocator
    lpVtbl : IDVBSLocatorVTbl*
  end

  struct IDVBSLocator2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_carrier_frequency : UInt64
    put_carrier_frequency : UInt64
    get_inner_fec : UInt64
    put_inner_fec : UInt64
    get_inner_fec_rate : UInt64
    put_inner_fec_rate : UInt64
    get_outer_fec : UInt64
    put_outer_fec : UInt64
    get_outer_fec_rate : UInt64
    put_outer_fec_rate : UInt64
    get_modulation : UInt64
    put_modulation : UInt64
    get_symbol_rate : UInt64
    put_symbol_rate : UInt64
    clone : UInt64
    get_signal_polarisation : UInt64
    put_signal_polarisation : UInt64
    get_west_position : UInt64
    put_west_position : UInt64
    get_orbital_position : UInt64
    put_orbital_position : UInt64
    get_azimuth : UInt64
    put_azimuth : UInt64
    get_elevation : UInt64
    put_elevation : UInt64
    get_diseq_lnb_source : UInt64
    put_diseq_lnb_source : UInt64
    get_local_oscillator_override_low : UInt64
    put_local_oscillator_override_low : UInt64
    get_local_oscillator_override_high : UInt64
    put_local_oscillator_override_high : UInt64
    get_local_lnb_switch_override : UInt64
    put_local_lnb_switch_override : UInt64
    get_local_spectral_inversion_override : UInt64
    put_local_spectral_inversion_override : UInt64
    get_signal_roll_off : UInt64
    put_signal_roll_off : UInt64
    get_signal_pilot : UInt64
    put_signal_pilot : UInt64
  end

  IDVBSLocator2_GUID = "6044634a-1733-4f99-b982-5fb12afce4f0"
  IID_IDVBSLocator2 = LibC::GUID.new(0x6044634a_u32, 0x1733_u16, 0x4f99_u16, StaticArray[0xb9_u8, 0x82_u8, 0x5f_u8, 0xb1_u8, 0x2a_u8, 0xfc_u8, 0xe4_u8, 0xf0_u8])
  struct IDVBSLocator2
    lpVtbl : IDVBSLocator2VTbl*
  end

  struct IDVBCLocatorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_carrier_frequency : UInt64
    put_carrier_frequency : UInt64
    get_inner_fec : UInt64
    put_inner_fec : UInt64
    get_inner_fec_rate : UInt64
    put_inner_fec_rate : UInt64
    get_outer_fec : UInt64
    put_outer_fec : UInt64
    get_outer_fec_rate : UInt64
    put_outer_fec_rate : UInt64
    get_modulation : UInt64
    put_modulation : UInt64
    get_symbol_rate : UInt64
    put_symbol_rate : UInt64
    clone : UInt64
  end

  IDVBCLocator_GUID = "6e42f36e-1dd2-43c4-9f78-69d25ae39034"
  IID_IDVBCLocator = LibC::GUID.new(0x6e42f36e_u32, 0x1dd2_u16, 0x43c4_u16, StaticArray[0x9f_u8, 0x78_u8, 0x69_u8, 0xd2_u8, 0x5a_u8, 0xe3_u8, 0x90_u8, 0x34_u8])
  struct IDVBCLocator
    lpVtbl : IDVBCLocatorVTbl*
  end

  struct IISDBSLocatorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_carrier_frequency : UInt64
    put_carrier_frequency : UInt64
    get_inner_fec : UInt64
    put_inner_fec : UInt64
    get_inner_fec_rate : UInt64
    put_inner_fec_rate : UInt64
    get_outer_fec : UInt64
    put_outer_fec : UInt64
    get_outer_fec_rate : UInt64
    put_outer_fec_rate : UInt64
    get_modulation : UInt64
    put_modulation : UInt64
    get_symbol_rate : UInt64
    put_symbol_rate : UInt64
    clone : UInt64
    get_signal_polarisation : UInt64
    put_signal_polarisation : UInt64
    get_west_position : UInt64
    put_west_position : UInt64
    get_orbital_position : UInt64
    put_orbital_position : UInt64
    get_azimuth : UInt64
    put_azimuth : UInt64
    get_elevation : UInt64
    put_elevation : UInt64
  end

  IISDBSLocator_GUID = "c9897087-e29c-473f-9e4b-7072123dea14"
  IID_IISDBSLocator = LibC::GUID.new(0xc9897087_u32, 0xe29c_u16, 0x473f_u16, StaticArray[0x9e_u8, 0x4b_u8, 0x70_u8, 0x72_u8, 0x12_u8, 0x3d_u8, 0xea_u8, 0x14_u8])
  struct IISDBSLocator
    lpVtbl : IISDBSLocatorVTbl*
  end

  struct IESOpenMmiEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_event_id : UInt64
    get_event_type : UInt64
    set_completion_status : UInt64
    get_data : UInt64
    get_string_data : UInt64
    get_dialog_number : UInt64
    get_dialog_type : UInt64
    get_dialog_data : UInt64
    get_dialog_string_data : UInt64
  end

  IESOpenMmiEvent_GUID = "ba4b6526-1a35-4635-8b56-3ec612746a8c"
  IID_IESOpenMmiEvent = LibC::GUID.new(0xba4b6526_u32, 0x1a35_u16, 0x4635_u16, StaticArray[0x8b_u8, 0x56_u8, 0x3e_u8, 0xc6_u8, 0x12_u8, 0x74_u8, 0x6a_u8, 0x8c_u8])
  struct IESOpenMmiEvent
    lpVtbl : IESOpenMmiEventVTbl*
  end

  struct IESCloseMmiEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_event_id : UInt64
    get_event_type : UInt64
    set_completion_status : UInt64
    get_data : UInt64
    get_string_data : UInt64
    get_dialog_number : UInt64
  end

  IESCloseMmiEvent_GUID = "6b80e96f-55e2-45aa-b754-0c23c8e7d5c1"
  IID_IESCloseMmiEvent = LibC::GUID.new(0x6b80e96f_u32, 0x55e2_u16, 0x45aa_u16, StaticArray[0xb7_u8, 0x54_u8, 0xc_u8, 0x23_u8, 0xc8_u8, 0xe7_u8, 0xd5_u8, 0xc1_u8])
  struct IESCloseMmiEvent
    lpVtbl : IESCloseMmiEventVTbl*
  end

  struct IESValueUpdatedEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_event_id : UInt64
    get_event_type : UInt64
    set_completion_status : UInt64
    get_data : UInt64
    get_string_data : UInt64
    get_value_names : UInt64
  end

  IESValueUpdatedEvent_GUID = "8a24c46e-bb63-4664-8602-5d9c718c146d"
  IID_IESValueUpdatedEvent = LibC::GUID.new(0x8a24c46e_u32, 0xbb63_u16, 0x4664_u16, StaticArray[0x86_u8, 0x2_u8, 0x5d_u8, 0x9c_u8, 0x71_u8, 0x8c_u8, 0x14_u8, 0x6d_u8])
  struct IESValueUpdatedEvent
    lpVtbl : IESValueUpdatedEventVTbl*
  end

  struct IESRequestTunerEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_event_id : UInt64
    get_event_type : UInt64
    set_completion_status : UInt64
    get_data : UInt64
    get_string_data : UInt64
    get_priority : UInt64
    get_reason : UInt64
    get_consequences : UInt64
    get_estimated_time : UInt64
  end

  IESRequestTunerEvent_GUID = "54c7a5e8-c3bb-4f51-af14-e0e2c0e34c6d"
  IID_IESRequestTunerEvent = LibC::GUID.new(0x54c7a5e8_u32, 0xc3bb_u16, 0x4f51_u16, StaticArray[0xaf_u8, 0x14_u8, 0xe0_u8, 0xe2_u8, 0xc0_u8, 0xe3_u8, 0x4c_u8, 0x6d_u8])
  struct IESRequestTunerEvent
    lpVtbl : IESRequestTunerEventVTbl*
  end

  struct IESIsdbCasResponseEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_event_id : UInt64
    get_event_type : UInt64
    set_completion_status : UInt64
    get_data : UInt64
    get_string_data : UInt64
    get_request_id : UInt64
    get_status : UInt64
    get_data_length : UInt64
    get_response_data : UInt64
  end

  IESIsdbCasResponseEvent_GUID = "2017cb03-dc0f-4c24-83ca-36307b2cd19f"
  IID_IESIsdbCasResponseEvent = LibC::GUID.new(0x2017cb03_u32, 0xdc0f_u16, 0x4c24_u16, StaticArray[0x83_u8, 0xca_u8, 0x36_u8, 0x30_u8, 0x7b_u8, 0x2c_u8, 0xd1_u8, 0x9f_u8])
  struct IESIsdbCasResponseEvent
    lpVtbl : IESIsdbCasResponseEventVTbl*
  end

  struct IGpnvsCommonBaseVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_value_update_name : UInt64
  end

  IGpnvsCommonBase_GUID = "907e0b5c-e42d-4f04-91f0-26f401f36907"
  IID_IGpnvsCommonBase = LibC::GUID.new(0x907e0b5c_u32, 0xe42d_u16, 0x4f04_u16, StaticArray[0x91_u8, 0xf0_u8, 0x26_u8, 0xf4_u8, 0x1_u8, 0xf3_u8, 0x69_u8, 0x7_u8])
  struct IGpnvsCommonBase
    lpVtbl : IGpnvsCommonBaseVTbl*
  end

  struct IESEventFactoryVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    create_es_event : UInt64
  end

  IESEventFactory_GUID = "506a09b8-7f86-4e04-ac05-3303bfe8fc49"
  IID_IESEventFactory = LibC::GUID.new(0x506a09b8_u32, 0x7f86_u16, 0x4e04_u16, StaticArray[0xac_u8, 0x5_u8, 0x33_u8, 0x3_u8, 0xbf_u8, 0xe8_u8, 0xfc_u8, 0x49_u8])
  struct IESEventFactory
    lpVtbl : IESEventFactoryVTbl*
  end

  struct IESLicenseRenewalResultEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_event_id : UInt64
    get_event_type : UInt64
    set_completion_status : UInt64
    get_data : UInt64
    get_string_data : UInt64
    get_callers_id : UInt64
    get_file_name : UInt64
    is_renewal_successful : UInt64
    is_check_entitlement_call_required : UInt64
    get_descrambled_status : UInt64
    get_renewal_result_code : UInt64
    get_cas_failure_code : UInt64
    get_renewal_h_result : UInt64
    get_entitlement_token_length : UInt64
    get_entitlement_token : UInt64
    get_expiry_date : UInt64
  end

  IESLicenseRenewalResultEvent_GUID = "d5a48ef5-a81b-4df0-acaa-5e35e7ea45d4"
  IID_IESLicenseRenewalResultEvent = LibC::GUID.new(0xd5a48ef5_u32, 0xa81b_u16, 0x4df0_u16, StaticArray[0xac_u8, 0xaa_u8, 0x5e_u8, 0x35_u8, 0xe7_u8, 0xea_u8, 0x45_u8, 0xd4_u8])
  struct IESLicenseRenewalResultEvent
    lpVtbl : IESLicenseRenewalResultEventVTbl*
  end

  struct IESFileExpiryDateEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_event_id : UInt64
    get_event_type : UInt64
    set_completion_status : UInt64
    get_data : UInt64
    get_string_data : UInt64
    get_tuner_id : UInt64
    get_expiry_date : UInt64
    get_final_expiry_date : UInt64
    get_max_renewal_count : UInt64
    is_entitlement_token_present : UInt64
    does_expire_after_first_use : UInt64
  end

  IESFileExpiryDateEvent_GUID = "ba9edcb6-4d36-4cfe-8c56-87a6b0ca48e1"
  IID_IESFileExpiryDateEvent = LibC::GUID.new(0xba9edcb6_u32, 0x4d36_u16, 0x4cfe_u16, StaticArray[0x8c_u8, 0x56_u8, 0x87_u8, 0xa6_u8, 0xb0_u8, 0xca_u8, 0x48_u8, 0xe1_u8])
  struct IESFileExpiryDateEvent
    lpVtbl : IESFileExpiryDateEventVTbl*
  end

  struct IESEventServiceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    fire_es_event : UInt64
  end

  IESEventService_GUID = "ed89a619-4c06-4b2f-99eb-c7669b13047c"
  IID_IESEventService = LibC::GUID.new(0xed89a619_u32, 0x4c06_u16, 0x4b2f_u16, StaticArray[0x99_u8, 0xeb_u8, 0xc7_u8, 0x66_u8, 0x9b_u8, 0x13_u8, 0x4_u8, 0x7c_u8])
  struct IESEventService
    lpVtbl : IESEventServiceVTbl*
  end

  struct IESEventServiceConfigurationVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_parent : UInt64
    remove_parent : UInt64
    set_owner : UInt64
    remove_owner : UInt64
    set_graph : UInt64
    remove_graph : UInt64
  end

  IESEventServiceConfiguration_GUID = "33b9daae-9309-491d-a051-bcad2a70cd66"
  IID_IESEventServiceConfiguration = LibC::GUID.new(0x33b9daae_u32, 0x9309_u16, 0x491d_u16, StaticArray[0xa0_u8, 0x51_u8, 0xbc_u8, 0xad_u8, 0x2a_u8, 0x70_u8, 0xcd_u8, 0x66_u8])
  struct IESEventServiceConfiguration
    lpVtbl : IESEventServiceConfigurationVTbl*
  end

  struct IRegisterTunerVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    register : UInt64
    unregister : UInt64
  end

  IRegisterTuner_GUID = "359b3901-572c-4854-bb49-cdef66606a25"
  IID_IRegisterTuner = LibC::GUID.new(0x359b3901_u32, 0x572c_u16, 0x4854_u16, StaticArray[0xbb_u8, 0x49_u8, 0xcd_u8, 0xef_u8, 0x66_u8, 0x60_u8, 0x6a_u8, 0x25_u8])
  struct IRegisterTuner
    lpVtbl : IRegisterTunerVTbl*
  end

  struct IBDAComparableVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    compare_exact : UInt64
    compare_equivalent : UInt64
    hash_exact : UInt64
    hash_exact_incremental : UInt64
    hash_equivalent : UInt64
    hash_equivalent_incremental : UInt64
  end

  IBDAComparable_GUID = "b34505e0-2f0e-497b-80bc-d43f3b24ed7f"
  IID_IBDAComparable = LibC::GUID.new(0xb34505e0_u32, 0x2f0e_u16, 0x497b_u16, StaticArray[0x80_u8, 0xbc_u8, 0xd4_u8, 0x3f_u8, 0x3b_u8, 0x24_u8, 0xed_u8, 0x7f_u8])
  struct IBDAComparable
    lpVtbl : IBDAComparableVTbl*
  end

  struct IPersistTuneXmlVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_class_id : UInt64
    init_new : UInt64
    load : UInt64
    save : UInt64
  end

  IPersistTuneXml_GUID = "0754cd31-8d15-47a9-8215-d20064157244"
  IID_IPersistTuneXml = LibC::GUID.new(0x754cd31_u32, 0x8d15_u16, 0x47a9_u16, StaticArray[0x82_u8, 0x15_u8, 0xd2_u8, 0x0_u8, 0x64_u8, 0x15_u8, 0x72_u8, 0x44_u8])
  struct IPersistTuneXml
    lpVtbl : IPersistTuneXmlVTbl*
  end

  struct IPersistTuneXmlUtilityVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    deserialize : UInt64
  end

  IPersistTuneXmlUtility_GUID = "990237ae-ac11-4614-be8f-dd217a4cb4cb"
  IID_IPersistTuneXmlUtility = LibC::GUID.new(0x990237ae_u32, 0xac11_u16, 0x4614_u16, StaticArray[0xbe_u8, 0x8f_u8, 0xdd_u8, 0x21_u8, 0x7a_u8, 0x4c_u8, 0xb4_u8, 0xcb_u8])
  struct IPersistTuneXmlUtility
    lpVtbl : IPersistTuneXmlUtilityVTbl*
  end

  struct IPersistTuneXmlUtility2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    deserialize : UInt64
    serialize : UInt64
  end

  IPersistTuneXmlUtility2_GUID = "992e165f-ea24-4b2f-9a1d-009d92120451"
  IID_IPersistTuneXmlUtility2 = LibC::GUID.new(0x992e165f_u32, 0xea24_u16, 0x4b2f_u16, StaticArray[0x9a_u8, 0x1d_u8, 0x0_u8, 0x9d_u8, 0x92_u8, 0x12_u8, 0x4_u8, 0x51_u8])
  struct IPersistTuneXmlUtility2
    lpVtbl : IPersistTuneXmlUtility2VTbl*
  end

  struct IBDACreateTuneRequestExVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    create_tune_request_ex : UInt64
  end

  IBDACreateTuneRequestEx_GUID = "c0a4a1d4-2b3c-491a-ba22-499fbadd4d12"
  IID_IBDACreateTuneRequestEx = LibC::GUID.new(0xc0a4a1d4_u32, 0x2b3c_u16, 0x491a_u16, StaticArray[0xba_u8, 0x22_u8, 0x49_u8, 0x9f_u8, 0xba_u8, 0xdd_u8, 0x4d_u8, 0x12_u8])
  struct IBDACreateTuneRequestEx
    lpVtbl : IBDACreateTuneRequestExVTbl*
  end

  struct IETFilterConfigVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    init_license : UInt64
    get_secure_channel_object : UInt64
  end

  IETFilterConfig_GUID = "c4c4c4d1-0049-4e2b-98fb-9537f6ce516d"
  IID_IETFilterConfig = LibC::GUID.new(0xc4c4c4d1_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
  struct IETFilterConfig
    lpVtbl : IETFilterConfigVTbl*
  end

  struct IDTFilterConfigVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_secure_channel_object : UInt64
  end

  IDTFilterConfig_GUID = "c4c4c4d2-0049-4e2b-98fb-9537f6ce516d"
  IID_IDTFilterConfig = LibC::GUID.new(0xc4c4c4d2_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
  struct IDTFilterConfig
    lpVtbl : IDTFilterConfigVTbl*
  end

  struct IXDSCodecConfigVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_secure_channel_object : UInt64
    set_pause_buffer_time : UInt64
  end

  IXDSCodecConfig_GUID = "c4c4c4d3-0049-4e2b-98fb-9537f6ce516d"
  IID_IXDSCodecConfig = LibC::GUID.new(0xc4c4c4d3_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
  struct IXDSCodecConfig
    lpVtbl : IXDSCodecConfigVTbl*
  end

  struct IDTFilterLicenseRenewalVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_license_renewal_data : UInt64
  end

  IDTFilterLicenseRenewal_GUID = "8a78b317-e405-4a43-994a-620d8f5ce25e"
  IID_IDTFilterLicenseRenewal = LibC::GUID.new(0x8a78b317_u32, 0xe405_u16, 0x4a43_u16, StaticArray[0x99_u8, 0x4a_u8, 0x62_u8, 0xd_u8, 0x8f_u8, 0x5c_u8, 0xe2_u8, 0x5e_u8])
  struct IDTFilterLicenseRenewal
    lpVtbl : IDTFilterLicenseRenewalVTbl*
  end

  struct IPTFilterLicenseRenewalVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    renew_licenses : UInt64
    cancel_license_renewal : UInt64
  end

  IPTFilterLicenseRenewal_GUID = "26d836a5-0c15-44c7-ac59-b0da8728f240"
  IID_IPTFilterLicenseRenewal = LibC::GUID.new(0x26d836a5_u32, 0xc15_u16, 0x44c7_u16, StaticArray[0xac_u8, 0x59_u8, 0xb0_u8, 0xda_u8, 0x87_u8, 0x28_u8, 0xf2_u8, 0x40_u8])
  struct IPTFilterLicenseRenewal
    lpVtbl : IPTFilterLicenseRenewalVTbl*
  end

  struct IMceBurnerControlVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_burner_no_decryption : UInt64
  end

  IMceBurnerControl_GUID = "5a86b91a-e71e-46c1-88a9-9bb338710552"
  IID_IMceBurnerControl = LibC::GUID.new(0x5a86b91a_u32, 0xe71e_u16, 0x46c1_u16, StaticArray[0x88_u8, 0xa9_u8, 0x9b_u8, 0xb3_u8, 0x38_u8, 0x71_u8, 0x5_u8, 0x52_u8])
  struct IMceBurnerControl
    lpVtbl : IMceBurnerControlVTbl*
  end

  struct IETFilterVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_eval_rat_obj_ok : UInt64
    get_curr_rating : UInt64
    get_curr_license_exp_date : UInt64
    get_last_error_code : UInt64
    set_recording_on : UInt64
  end

  IETFilter_GUID = "c4c4c4b1-0049-4e2b-98fb-9537f6ce516d"
  IID_IETFilter = LibC::GUID.new(0xc4c4c4b1_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
  struct IETFilter
    lpVtbl : IETFilterVTbl*
  end

  struct IETFilterEventsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
  end

  IETFilterEvents_GUID = "c4c4c4c1-0049-4e2b-98fb-9537f6ce516d"
  IID_IETFilterEvents = LibC::GUID.new(0xc4c4c4c1_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
  struct IETFilterEvents
    lpVtbl : IETFilterEventsVTbl*
  end

  struct IDTFilterVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_eval_rat_obj_ok : UInt64
    get_curr_rating : UInt64
    get_blocked_rating_attributes : UInt64
    put_blocked_rating_attributes : UInt64
    get_block_un_rated : UInt64
    put_block_un_rated : UInt64
    get_block_un_rated_delay : UInt64
    put_block_un_rated_delay : UInt64
  end

  IDTFilter_GUID = "c4c4c4b2-0049-4e2b-98fb-9537f6ce516d"
  IID_IDTFilter = LibC::GUID.new(0xc4c4c4b2_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
  struct IDTFilter
    lpVtbl : IDTFilterVTbl*
  end

  struct IDTFilter2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_eval_rat_obj_ok : UInt64
    get_curr_rating : UInt64
    get_blocked_rating_attributes : UInt64
    put_blocked_rating_attributes : UInt64
    get_block_un_rated : UInt64
    put_block_un_rated : UInt64
    get_block_un_rated_delay : UInt64
    put_block_un_rated_delay : UInt64
    get_challenge_url : UInt64
    get_curr_license_exp_date : UInt64
    get_last_error_code : UInt64
  end

  IDTFilter2_GUID = "c4c4c4b4-0049-4e2b-98fb-9537f6ce516d"
  IID_IDTFilter2 = LibC::GUID.new(0xc4c4c4b4_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
  struct IDTFilter2
    lpVtbl : IDTFilter2VTbl*
  end

  struct IDTFilter3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_eval_rat_obj_ok : UInt64
    get_curr_rating : UInt64
    get_blocked_rating_attributes : UInt64
    put_blocked_rating_attributes : UInt64
    get_block_un_rated : UInt64
    put_block_un_rated : UInt64
    get_block_un_rated_delay : UInt64
    put_block_un_rated_delay : UInt64
    get_challenge_url : UInt64
    get_curr_license_exp_date : UInt64
    get_last_error_code : UInt64
    get_protection_type : UInt64
    license_has_expiration_date : UInt64
    set_rights : UInt64
  end

  IDTFilter3_GUID = "513998cc-e929-4cdf-9fbd-bad1e0314866"
  IID_IDTFilter3 = LibC::GUID.new(0x513998cc_u32, 0xe929_u16, 0x4cdf_u16, StaticArray[0x9f_u8, 0xbd_u8, 0xba_u8, 0xd1_u8, 0xe0_u8, 0x31_u8, 0x48_u8, 0x66_u8])
  struct IDTFilter3
    lpVtbl : IDTFilter3VTbl*
  end

  struct IDTFilterEventsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
  end

  IDTFilterEvents_GUID = "c4c4c4c2-0049-4e2b-98fb-9537f6ce516d"
  IID_IDTFilterEvents = LibC::GUID.new(0xc4c4c4c2_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
  struct IDTFilterEvents
    lpVtbl : IDTFilterEventsVTbl*
  end

  struct IXDSCodecVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_xds_to_rat_obj_ok : UInt64
    put_cc_substream_service : UInt64
    get_cc_substream_service : UInt64
    get_content_advisory_rating : UInt64
    get_xds_packet : UInt64
    get_curr_license_exp_date : UInt64
    get_last_error_code : UInt64
  end

  IXDSCodec_GUID = "c4c4c4b3-0049-4e2b-98fb-9537f6ce516d"
  IID_IXDSCodec = LibC::GUID.new(0xc4c4c4b3_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
  struct IXDSCodec
    lpVtbl : IXDSCodecVTbl*
  end

  struct IXDSCodecEventsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
  end

  IXDSCodecEvents_GUID = "c4c4c4c3-0049-4e2b-98fb-9537f6ce516d"
  IID_IXDSCodecEvents = LibC::GUID.new(0xc4c4c4c3_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
  struct IXDSCodecEvents
    lpVtbl : IXDSCodecEventsVTbl*
  end

  struct IXDSToRatVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    init : UInt64
    parse_xds_byte_pair : UInt64
  end

  IXDSToRat_GUID = "c5c5c5b0-3abc-11d6-b25b-00c04fa0c026"
  IID_IXDSToRat = LibC::GUID.new(0xc5c5c5b0_u32, 0x3abc_u16, 0x11d6_u16, StaticArray[0xb2_u8, 0x5b_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xa0_u8, 0xc0_u8, 0x26_u8])
  struct IXDSToRat
    lpVtbl : IXDSToRatVTbl*
  end

  struct IEvalRatVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_blocked_rating_attributes : UInt64
    put_blocked_rating_attributes : UInt64
    get_block_un_rated : UInt64
    put_block_un_rated : UInt64
    most_restrictive_rating : UInt64
    test_rating : UInt64
  end

  IEvalRat_GUID = "c5c5c5b1-3abc-11d6-b25b-00c04fa0c026"
  IID_IEvalRat = LibC::GUID.new(0xc5c5c5b1_u32, 0x3abc_u16, 0x11d6_u16, StaticArray[0xb2_u8, 0x5b_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xa0_u8, 0xc0_u8, 0x26_u8])
  struct IEvalRat
    lpVtbl : IEvalRatVTbl*
  end

  struct IMSVidRectVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_top : UInt64
    put_top : UInt64
    get_left : UInt64
    put_left : UInt64
    get_width : UInt64
    put_width : UInt64
    get_height : UInt64
    put_height : UInt64
    get_h_wnd : UInt64
    put_h_wnd : UInt64
    put_rect : UInt64
  end

  IMSVidRect_GUID = "7f5000a6-a440-47ca-8acc-c0e75531a2c2"
  IID_IMSVidRect = LibC::GUID.new(0x7f5000a6_u32, 0xa440_u16, 0x47ca_u16, StaticArray[0x8a_u8, 0xcc_u8, 0xc0_u8, 0xe7_u8, 0x55_u8, 0x31_u8, 0xa2_u8, 0xc2_u8])
  struct IMSVidRect
    lpVtbl : IMSVidRectVTbl*
  end

  struct IMSVidGraphSegmentContainerVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_graph : UInt64
    get_input : UInt64
    get_outputs : UInt64
    get_video_renderer : UInt64
    get_audio_renderer : UInt64
    get_features : UInt64
    get_composites : UInt64
    get_parent_container : UInt64
    decompose : UInt64
    is_windowless : UInt64
    get_focus : UInt64
  end

  IMSVidGraphSegmentContainer_GUID = "3dd2903d-e0aa-11d2-b63a-00c04f79498e"
  IID_IMSVidGraphSegmentContainer = LibC::GUID.new(0x3dd2903d_u32, 0xe0aa_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x3a_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidGraphSegmentContainer
    lpVtbl : IMSVidGraphSegmentContainerVTbl*
  end

  struct IMSVidGraphSegmentVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_class_id : UInt64
    get_init : UInt64
    put_init : UInt64
    enum_filters : UInt64
    get_container : UInt64
    put_container : UInt64
    get_type : UInt64
    get_category : UInt64
    build : UInt64
    post_build : UInt64
    pre_run : UInt64
    post_run : UInt64
    pre_stop : UInt64
    post_stop : UInt64
    on_event_notify : UInt64
    decompose : UInt64
  end

  IMSVidGraphSegment_GUID = "238dec54-adeb-4005-a349-f772b9afebc4"
  IID_IMSVidGraphSegment = LibC::GUID.new(0x238dec54_u32, 0xadeb_u16, 0x4005_u16, StaticArray[0xa3_u8, 0x49_u8, 0xf7_u8, 0x72_u8, 0xb9_u8, 0xaf_u8, 0xeb_u8, 0xc4_u8])
  struct IMSVidGraphSegment
    lpVtbl : IMSVidGraphSegmentVTbl*
  end

  struct IMSVidGraphSegmentUserInputVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    click : UInt64
    dbl_click : UInt64
    key_down : UInt64
    key_press : UInt64
    key_up : UInt64
    mouse_down : UInt64
    mouse_move : UInt64
    mouse_up : UInt64
  end

  IMSVidGraphSegmentUserInput_GUID = "301c060e-20d9-4587-9b03-f82ed9a9943c"
  IID_IMSVidGraphSegmentUserInput = LibC::GUID.new(0x301c060e_u32, 0x20d9_u16, 0x4587_u16, StaticArray[0x9b_u8, 0x3_u8, 0xf8_u8, 0x2e_u8, 0xd9_u8, 0xa9_u8, 0x94_u8, 0x3c_u8])
  struct IMSVidGraphSegmentUserInput
    lpVtbl : IMSVidGraphSegmentUserInputVTbl*
  end

  struct IMSVidCompositionSegmentVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_class_id : UInt64
    get_init : UInt64
    put_init : UInt64
    enum_filters : UInt64
    get_container : UInt64
    put_container : UInt64
    get_type : UInt64
    get_category : UInt64
    build : UInt64
    post_build : UInt64
    pre_run : UInt64
    post_run : UInt64
    pre_stop : UInt64
    post_stop : UInt64
    on_event_notify : UInt64
    decompose : UInt64
    compose : UInt64
    get_up : UInt64
    get_down : UInt64
  end

  IMSVidCompositionSegment_GUID = "1c15d483-911d-11d2-b632-00c04f79498e"
  IID_IMSVidCompositionSegment = LibC::GUID.new(0x1c15d483_u32, 0x911d_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidCompositionSegment
    lpVtbl : IMSVidCompositionSegmentVTbl*
  end

  struct IEnumMSVidGraphSegmentVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    next : UInt64
    skip : UInt64
    reset : UInt64
    clone : UInt64
  end

  IEnumMSVidGraphSegment_GUID = "3dd2903e-e0aa-11d2-b63a-00c04f79498e"
  IID_IEnumMSVidGraphSegment = LibC::GUID.new(0x3dd2903e_u32, 0xe0aa_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x3a_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IEnumMSVidGraphSegment
    lpVtbl : IEnumMSVidGraphSegmentVTbl*
  end

  struct IMSVidVRGraphSegmentVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_class_id : UInt64
    get_init : UInt64
    put_init : UInt64
    enum_filters : UInt64
    get_container : UInt64
    put_container : UInt64
    get_type : UInt64
    get_category : UInt64
    build : UInt64
    post_build : UInt64
    pre_run : UInt64
    post_run : UInt64
    pre_stop : UInt64
    post_stop : UInt64
    on_event_notify : UInt64
    decompose : UInt64
    put__vm_renderer_mode : UInt64
    put_owner : UInt64
    get_owner : UInt64
    get_use_overlay : UInt64
    put_use_overlay : UInt64
    get_visible : UInt64
    put_visible : UInt64
    get_color_key : UInt64
    put_color_key : UInt64
    get_source : UInt64
    put_source : UInt64
    get_destination : UInt64
    put_destination : UInt64
    get_native_size : UInt64
    get_border_color : UInt64
    put_border_color : UInt64
    get_maintain_aspect_ratio : UInt64
    put_maintain_aspect_ratio : UInt64
    refresh : UInt64
    display_change : UInt64
    re_paint : UInt64
  end

  IMSVidVRGraphSegment_GUID = "dd47de3f-9874-4f7b-8b22-7cb2688461e7"
  IID_IMSVidVRGraphSegment = LibC::GUID.new(0xdd47de3f_u32, 0x9874_u16, 0x4f7b_u16, StaticArray[0x8b_u8, 0x22_u8, 0x7c_u8, 0xb2_u8, 0x68_u8, 0x84_u8, 0x61_u8, 0xe7_u8])
  struct IMSVidVRGraphSegment
    lpVtbl : IMSVidVRGraphSegmentVTbl*
  end

  struct IMSVidDeviceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
  end

  IMSVidDevice_GUID = "1c15d47c-911d-11d2-b632-00c04f79498e"
  IID_IMSVidDevice = LibC::GUID.new(0x1c15d47c_u32, 0x911d_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidDevice
    lpVtbl : IMSVidDeviceVTbl*
  end

  struct IMSVidDevice2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device_path : UInt64
  end

  IMSVidDevice2_GUID = "87bd2783-ebc0-478c-b4a0-e8e7f43ab78e"
  IID_IMSVidDevice2 = LibC::GUID.new(0x87bd2783_u32, 0xebc0_u16, 0x478c_u16, StaticArray[0xb4_u8, 0xa0_u8, 0xe8_u8, 0xe7_u8, 0xf4_u8, 0x3a_u8, 0xb7_u8, 0x8e_u8])
  struct IMSVidDevice2
    lpVtbl : IMSVidDevice2VTbl*
  end

  struct IMSVidInputDeviceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
    is_viewable : UInt64
    view : UInt64
  end

  IMSVidInputDevice_GUID = "37b0353d-a4c8-11d2-b634-00c04f79498e"
  IID_IMSVidInputDevice = LibC::GUID.new(0x37b0353d_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidInputDevice
    lpVtbl : IMSVidInputDeviceVTbl*
  end

  struct IMSVidDeviceEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    state_change : UInt64
  end

  IMSVidDeviceEvent_GUID = "1c15d480-911d-11d2-b632-00c04f79498e"
  IID_IMSVidDeviceEvent = LibC::GUID.new(0x1c15d480_u32, 0x911d_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidDeviceEvent
    lpVtbl : IMSVidDeviceEventVTbl*
  end

  struct IMSVidInputDeviceEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
  end

  IMSVidInputDeviceEvent_GUID = "37b0353e-a4c8-11d2-b634-00c04f79498e"
  IID_IMSVidInputDeviceEvent = LibC::GUID.new(0x37b0353e_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidInputDeviceEvent
    lpVtbl : IMSVidInputDeviceEventVTbl*
  end

  struct IMSVidVideoInputDeviceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
    is_viewable : UInt64
    view : UInt64
  end

  IMSVidVideoInputDevice_GUID = "1c15d47f-911d-11d2-b632-00c04f79498e"
  IID_IMSVidVideoInputDevice = LibC::GUID.new(0x1c15d47f_u32, 0x911d_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidVideoInputDevice
    lpVtbl : IMSVidVideoInputDeviceVTbl*
  end

  struct IMSVidPlaybackVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
    is_viewable : UInt64
    view : UInt64
    get_enable_reset_on_stop : UInt64
    put_enable_reset_on_stop : UInt64
    run : UInt64
    pause : UInt64
    stop : UInt64
    get_can_step : UInt64
    step : UInt64
    put_rate : UInt64
    get_rate : UInt64
    put_current_position : UInt64
    get_current_position : UInt64
    put_position_mode : UInt64
    get_position_mode : UInt64
    get_length : UInt64
  end

  IMSVidPlayback_GUID = "37b03538-a4c8-11d2-b634-00c04f79498e"
  IID_IMSVidPlayback = LibC::GUID.new(0x37b03538_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidPlayback
    lpVtbl : IMSVidPlaybackVTbl*
  end

  struct IMSVidPlaybackEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    end_of_media : UInt64
  end

  IMSVidPlaybackEvent_GUID = "37b0353b-a4c8-11d2-b634-00c04f79498e"
  IID_IMSVidPlaybackEvent = LibC::GUID.new(0x37b0353b_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidPlaybackEvent
    lpVtbl : IMSVidPlaybackEventVTbl*
  end

  struct IMSVidTunerVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
    is_viewable : UInt64
    view : UInt64
    get_tune : UInt64
    put_tune : UInt64
    get_tuning_space : UInt64
    put_tuning_space : UInt64
  end

  IMSVidTuner_GUID = "1c15d47d-911d-11d2-b632-00c04f79498e"
  IID_IMSVidTuner = LibC::GUID.new(0x1c15d47d_u32, 0x911d_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidTuner
    lpVtbl : IMSVidTunerVTbl*
  end

  struct IMSVidTunerEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    tune_changed : UInt64
  end

  IMSVidTunerEvent_GUID = "1c15d485-911d-11d2-b632-00c04f79498e"
  IID_IMSVidTunerEvent = LibC::GUID.new(0x1c15d485_u32, 0x911d_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidTunerEvent
    lpVtbl : IMSVidTunerEventVTbl*
  end

  struct IMSVidAnalogTunerVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
    is_viewable : UInt64
    view : UInt64
    get_tune : UInt64
    put_tune : UInt64
    get_tuning_space : UInt64
    put_tuning_space : UInt64
    get_channel : UInt64
    put_channel : UInt64
    get_video_frequency : UInt64
    get_audio_frequency : UInt64
    get_country_code : UInt64
    put_country_code : UInt64
    get_sap : UInt64
    put_sap : UInt64
    channel_available : UInt64
  end

  IMSVidAnalogTuner_GUID = "1c15d47e-911d-11d2-b632-00c04f79498e"
  IID_IMSVidAnalogTuner = LibC::GUID.new(0x1c15d47e_u32, 0x911d_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidAnalogTuner
    lpVtbl : IMSVidAnalogTunerVTbl*
  end

  struct IMSVidAnalogTuner2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
    is_viewable : UInt64
    view : UInt64
    get_tune : UInt64
    put_tune : UInt64
    get_tuning_space : UInt64
    put_tuning_space : UInt64
    get_channel : UInt64
    put_channel : UInt64
    get_video_frequency : UInt64
    get_audio_frequency : UInt64
    get_country_code : UInt64
    put_country_code : UInt64
    get_sap : UInt64
    put_sap : UInt64
    channel_available : UInt64
    get_tv_formats : UInt64
    get_tuner_modes : UInt64
    get_num_aux_inputs : UInt64
  end

  IMSVidAnalogTuner2_GUID = "37647bf7-3dde-4cc8-a4dc-0d534d3d0037"
  IID_IMSVidAnalogTuner2 = LibC::GUID.new(0x37647bf7_u32, 0x3dde_u16, 0x4cc8_u16, StaticArray[0xa4_u8, 0xdc_u8, 0xd_u8, 0x53_u8, 0x4d_u8, 0x3d_u8, 0x0_u8, 0x37_u8])
  struct IMSVidAnalogTuner2
    lpVtbl : IMSVidAnalogTuner2VTbl*
  end

  struct IMSVidAnalogTunerEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    tune_changed : UInt64
  end

  IMSVidAnalogTunerEvent_GUID = "1c15d486-911d-11d2-b632-00c04f79498e"
  IID_IMSVidAnalogTunerEvent = LibC::GUID.new(0x1c15d486_u32, 0x911d_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidAnalogTunerEvent
    lpVtbl : IMSVidAnalogTunerEventVTbl*
  end

  struct IMSVidFilePlaybackVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
    is_viewable : UInt64
    view : UInt64
    get_enable_reset_on_stop : UInt64
    put_enable_reset_on_stop : UInt64
    run : UInt64
    pause : UInt64
    stop : UInt64
    get_can_step : UInt64
    step : UInt64
    put_rate : UInt64
    get_rate : UInt64
    put_current_position : UInt64
    get_current_position : UInt64
    put_position_mode : UInt64
    get_position_mode : UInt64
    get_length : UInt64
    get_file_name : UInt64
    put_file_name : UInt64
  end

  IMSVidFilePlayback_GUID = "37b03539-a4c8-11d2-b634-00c04f79498e"
  IID_IMSVidFilePlayback = LibC::GUID.new(0x37b03539_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidFilePlayback
    lpVtbl : IMSVidFilePlaybackVTbl*
  end

  struct IMSVidFilePlayback2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
    is_viewable : UInt64
    view : UInt64
    get_enable_reset_on_stop : UInt64
    put_enable_reset_on_stop : UInt64
    run : UInt64
    pause : UInt64
    stop : UInt64
    get_can_step : UInt64
    step : UInt64
    put_rate : UInt64
    get_rate : UInt64
    put_current_position : UInt64
    get_current_position : UInt64
    put_position_mode : UInt64
    get_position_mode : UInt64
    get_length : UInt64
    get_file_name : UInt64
    put_file_name : UInt64
    put__source_filter : UInt64
    put___source_filter : UInt64
  end

  IMSVidFilePlayback2_GUID = "2f7e44af-6e52-4660-bc08-d8d542587d72"
  IID_IMSVidFilePlayback2 = LibC::GUID.new(0x2f7e44af_u32, 0x6e52_u16, 0x4660_u16, StaticArray[0xbc_u8, 0x8_u8, 0xd8_u8, 0xd5_u8, 0x42_u8, 0x58_u8, 0x7d_u8, 0x72_u8])
  struct IMSVidFilePlayback2
    lpVtbl : IMSVidFilePlayback2VTbl*
  end

  struct IMSVidFilePlaybackEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    end_of_media : UInt64
  end

  IMSVidFilePlaybackEvent_GUID = "37b0353a-a4c8-11d2-b634-00c04f79498e"
  IID_IMSVidFilePlaybackEvent = LibC::GUID.new(0x37b0353a_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidFilePlaybackEvent
    lpVtbl : IMSVidFilePlaybackEventVTbl*
  end

  struct IMSVidWebDVDVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
    is_viewable : UInt64
    view : UInt64
    get_enable_reset_on_stop : UInt64
    put_enable_reset_on_stop : UInt64
    run : UInt64
    pause : UInt64
    stop : UInt64
    get_can_step : UInt64
    step : UInt64
    put_rate : UInt64
    get_rate : UInt64
    put_current_position : UInt64
    get_current_position : UInt64
    put_position_mode : UInt64
    get_position_mode : UInt64
    get_length : UInt64
    on_dvd_event : UInt64
    play_title : UInt64
    play_chapter_in_title : UInt64
    play_chapter : UInt64
    play_chapters_auto_stop : UInt64
    play_at_time : UInt64
    play_at_time_in_title : UInt64
    play_period_in_title_auto_stop : UInt64
    replay_chapter : UInt64
    play_prev_chapter : UInt64
    play_next_chapter : UInt64
    still_off : UInt64
    get_audio_language : UInt64
    show_menu : UInt64
    resume : UInt64
    return_from_submenu : UInt64
    get_buttons_available : UInt64
    get_current_button : UInt64
    select_and_activate_button : UInt64
    activate_button : UInt64
    select_right_button : UInt64
    select_left_button : UInt64
    select_lower_button : UInt64
    select_upper_button : UInt64
    activate_at_position : UInt64
    select_at_position : UInt64
    get_button_at_position : UInt64
    get_number_of_chapters : UInt64
    get_total_title_time : UInt64
    get_titles_available : UInt64
    get_volumes_available : UInt64
    get_current_volume : UInt64
    get_current_disc_side : UInt64
    get_current_domain : UInt64
    get_current_chapter : UInt64
    get_current_title : UInt64
    get_current_time : UInt64
    dvd_time_code2bstr : UInt64
    get_dvd_directory : UInt64
    put_dvd_directory : UInt64
    is_subpicture_stream_enabled : UInt64
    is_audio_stream_enabled : UInt64
    get_current_subpicture_stream : UInt64
    put_current_subpicture_stream : UInt64
    get_subpicture_language : UInt64
    get_current_audio_stream : UInt64
    put_current_audio_stream : UInt64
    get_audio_streams_available : UInt64
    get_angles_available : UInt64
    get_current_angle : UInt64
    put_current_angle : UInt64
    get_subpicture_streams_available : UInt64
    get_subpicture_on : UInt64
    put_subpicture_on : UInt64
    get_dvd_unique_id : UInt64
    accept_parental_level_change : UInt64
    notify_parental_level_change : UInt64
    select_parental_country : UInt64
    select_parental_level : UInt64
    get_title_parental_levels : UInt64
    get_player_parental_country : UInt64
    get_player_parental_level : UInt64
    eject : UInt64
    uop_valid : UInt64
    get_sprm : UInt64
    get_gprm : UInt64
    put_gprm : UInt64
    get_dvd_text_string_type : UInt64
    get_dvd_text_string : UInt64
    get_dvd_text_number_of_strings : UInt64
    get_dvd_text_number_of_languages : UInt64
    get_dvd_text_language_lcid : UInt64
    region_change : UInt64
    get_dvd_adm : UInt64
    delete_bookmark : UInt64
    restore_bookmark : UInt64
    save_bookmark : UInt64
    select_default_audio_language : UInt64
    select_default_subpicture_language : UInt64
    get_preferred_subpicture_stream : UInt64
    get_default_menu_language : UInt64
    put_default_menu_language : UInt64
    get_default_subpicture_language : UInt64
    get_default_audio_language : UInt64
    get_default_subpicture_language_ext : UInt64
    get_default_audio_language_ext : UInt64
    get_language_from_lcid : UInt64
    get_karaoke_audio_presentation_mode : UInt64
    put_karaoke_audio_presentation_mode : UInt64
    get_karaoke_channel_content : UInt64
    get_karaoke_channel_assignment : UInt64
    restore_preferred_settings : UInt64
    get_button_rect : UInt64
    get_dvd_screen_in_mouse_coordinates : UInt64
    put_dvd_screen_in_mouse_coordinates : UInt64
  end

  IMSVidWebDVD_GUID = "cf45f88b-ac56-4ee2-a73a-ed04e2885d3c"
  IID_IMSVidWebDVD = LibC::GUID.new(0xcf45f88b_u32, 0xac56_u16, 0x4ee2_u16, StaticArray[0xa7_u8, 0x3a_u8, 0xed_u8, 0x4_u8, 0xe2_u8, 0x88_u8, 0x5d_u8, 0x3c_u8])
  struct IMSVidWebDVD
    lpVtbl : IMSVidWebDVDVTbl*
  end

  struct IMSVidWebDVD2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
    is_viewable : UInt64
    view : UInt64
    get_enable_reset_on_stop : UInt64
    put_enable_reset_on_stop : UInt64
    run : UInt64
    pause : UInt64
    stop : UInt64
    get_can_step : UInt64
    step : UInt64
    put_rate : UInt64
    get_rate : UInt64
    put_current_position : UInt64
    get_current_position : UInt64
    put_position_mode : UInt64
    get_position_mode : UInt64
    get_length : UInt64
    on_dvd_event : UInt64
    play_title : UInt64
    play_chapter_in_title : UInt64
    play_chapter : UInt64
    play_chapters_auto_stop : UInt64
    play_at_time : UInt64
    play_at_time_in_title : UInt64
    play_period_in_title_auto_stop : UInt64
    replay_chapter : UInt64
    play_prev_chapter : UInt64
    play_next_chapter : UInt64
    still_off : UInt64
    get_audio_language : UInt64
    show_menu : UInt64
    resume : UInt64
    return_from_submenu : UInt64
    get_buttons_available : UInt64
    get_current_button : UInt64
    select_and_activate_button : UInt64
    activate_button : UInt64
    select_right_button : UInt64
    select_left_button : UInt64
    select_lower_button : UInt64
    select_upper_button : UInt64
    activate_at_position : UInt64
    select_at_position : UInt64
    get_button_at_position : UInt64
    get_number_of_chapters : UInt64
    get_total_title_time : UInt64
    get_titles_available : UInt64
    get_volumes_available : UInt64
    get_current_volume : UInt64
    get_current_disc_side : UInt64
    get_current_domain : UInt64
    get_current_chapter : UInt64
    get_current_title : UInt64
    get_current_time : UInt64
    dvd_time_code2bstr : UInt64
    get_dvd_directory : UInt64
    put_dvd_directory : UInt64
    is_subpicture_stream_enabled : UInt64
    is_audio_stream_enabled : UInt64
    get_current_subpicture_stream : UInt64
    put_current_subpicture_stream : UInt64
    get_subpicture_language : UInt64
    get_current_audio_stream : UInt64
    put_current_audio_stream : UInt64
    get_audio_streams_available : UInt64
    get_angles_available : UInt64
    get_current_angle : UInt64
    put_current_angle : UInt64
    get_subpicture_streams_available : UInt64
    get_subpicture_on : UInt64
    put_subpicture_on : UInt64
    get_dvd_unique_id : UInt64
    accept_parental_level_change : UInt64
    notify_parental_level_change : UInt64
    select_parental_country : UInt64
    select_parental_level : UInt64
    get_title_parental_levels : UInt64
    get_player_parental_country : UInt64
    get_player_parental_level : UInt64
    eject : UInt64
    uop_valid : UInt64
    get_sprm : UInt64
    get_gprm : UInt64
    put_gprm : UInt64
    get_dvd_text_string_type : UInt64
    get_dvd_text_string : UInt64
    get_dvd_text_number_of_strings : UInt64
    get_dvd_text_number_of_languages : UInt64
    get_dvd_text_language_lcid : UInt64
    region_change : UInt64
    get_dvd_adm : UInt64
    delete_bookmark : UInt64
    restore_bookmark : UInt64
    save_bookmark : UInt64
    select_default_audio_language : UInt64
    select_default_subpicture_language : UInt64
    get_preferred_subpicture_stream : UInt64
    get_default_menu_language : UInt64
    put_default_menu_language : UInt64
    get_default_subpicture_language : UInt64
    get_default_audio_language : UInt64
    get_default_subpicture_language_ext : UInt64
    get_default_audio_language_ext : UInt64
    get_language_from_lcid : UInt64
    get_karaoke_audio_presentation_mode : UInt64
    put_karaoke_audio_presentation_mode : UInt64
    get_karaoke_channel_content : UInt64
    get_karaoke_channel_assignment : UInt64
    restore_preferred_settings : UInt64
    get_button_rect : UInt64
    get_dvd_screen_in_mouse_coordinates : UInt64
    put_dvd_screen_in_mouse_coordinates : UInt64
    get_bookmark : UInt64
    put_bookmark : UInt64
  end

  IMSVidWebDVD2_GUID = "7027212f-ee9a-4a7c-8b67-f023714cdaff"
  IID_IMSVidWebDVD2 = LibC::GUID.new(0x7027212f_u32, 0xee9a_u16, 0x4a7c_u16, StaticArray[0x8b_u8, 0x67_u8, 0xf0_u8, 0x23_u8, 0x71_u8, 0x4c_u8, 0xda_u8, 0xff_u8])
  struct IMSVidWebDVD2
    lpVtbl : IMSVidWebDVD2VTbl*
  end

  struct IMSVidWebDVDEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    end_of_media : UInt64
    dvd_notify : UInt64
    play_forwards : UInt64
    play_backwards : UInt64
    show_menu : UInt64
    resume : UInt64
    select_or_activate_button : UInt64
    still_off : UInt64
    pause_on : UInt64
    change_current_audio_stream : UInt64
    change_current_subpicture_stream : UInt64
    change_current_angle : UInt64
    play_at_time_in_title : UInt64
    play_at_time : UInt64
    play_chapter_in_title : UInt64
    play_chapter : UInt64
    replay_chapter : UInt64
    play_next_chapter : UInt64
    stop : UInt64
    return_from_submenu : UInt64
    play_title : UInt64
    play_prev_chapter : UInt64
    change_karaoke_pres_mode : UInt64
    change_video_pres_mode : UInt64
  end

  IMSVidWebDVDEvent_GUID = "b4f7a674-9b83-49cb-a357-c63b871be958"
  IID_IMSVidWebDVDEvent = LibC::GUID.new(0xb4f7a674_u32, 0x9b83_u16, 0x49cb_u16, StaticArray[0xa3_u8, 0x57_u8, 0xc6_u8, 0x3b_u8, 0x87_u8, 0x1b_u8, 0xe9_u8, 0x58_u8])
  struct IMSVidWebDVDEvent
    lpVtbl : IMSVidWebDVDEventVTbl*
  end

  struct IMSVidWebDVDAdmVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    change_password : UInt64
    save_parental_level : UInt64
    save_parental_country : UInt64
    confirm_password : UInt64
    get_parental_level : UInt64
    get_parental_country : UInt64
    get_default_audio_lcid : UInt64
    put_default_audio_lcid : UInt64
    get_default_subpicture_lcid : UInt64
    put_default_subpicture_lcid : UInt64
    get_default_menu_lcid : UInt64
    put_default_menu_lcid : UInt64
    get_bookmark_on_stop : UInt64
    put_bookmark_on_stop : UInt64
  end

  IMSVidWebDVDAdm_GUID = "b8be681a-eb2c-47f0-b415-94d5452f0e05"
  IID_IMSVidWebDVDAdm = LibC::GUID.new(0xb8be681a_u32, 0xeb2c_u16, 0x47f0_u16, StaticArray[0xb4_u8, 0x15_u8, 0x94_u8, 0xd5_u8, 0x45_u8, 0x2f_u8, 0xe_u8, 0x5_u8])
  struct IMSVidWebDVDAdm
    lpVtbl : IMSVidWebDVDAdmVTbl*
  end

  struct IMSVidOutputDeviceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
  end

  IMSVidOutputDevice_GUID = "37b03546-a4c8-11d2-b634-00c04f79498e"
  IID_IMSVidOutputDevice = LibC::GUID.new(0x37b03546_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidOutputDevice
    lpVtbl : IMSVidOutputDeviceVTbl*
  end

  struct IMSVidOutputDeviceEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    state_change : UInt64
  end

  IMSVidOutputDeviceEvent_GUID = "2e6a14e2-571c-11d3-b652-00c04f79498e"
  IID_IMSVidOutputDeviceEvent = LibC::GUID.new(0x2e6a14e2_u32, 0x571c_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x52_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidOutputDeviceEvent
    lpVtbl : IMSVidOutputDeviceEventVTbl*
  end

  struct IMSVidFeatureVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
  end

  IMSVidFeature_GUID = "37b03547-a4c8-11d2-b634-00c04f79498e"
  IID_IMSVidFeature = LibC::GUID.new(0x37b03547_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidFeature
    lpVtbl : IMSVidFeatureVTbl*
  end

  struct IMSVidFeatureEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    state_change : UInt64
  end

  IMSVidFeatureEvent_GUID = "3dd2903c-e0aa-11d2-b63a-00c04f79498e"
  IID_IMSVidFeatureEvent = LibC::GUID.new(0x3dd2903c_u32, 0xe0aa_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x3a_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidFeatureEvent
    lpVtbl : IMSVidFeatureEventVTbl*
  end

  struct IMSVidEncoderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
    get_video_encoder_interface : UInt64
    get_audio_encoder_interface : UInt64
  end

  IMSVidEncoder_GUID = "c0020fd4-bee7-43d9-a495-9f213117103d"
  IID_IMSVidEncoder = LibC::GUID.new(0xc0020fd4_u32, 0xbee7_u16, 0x43d9_u16, StaticArray[0xa4_u8, 0x95_u8, 0x9f_u8, 0x21_u8, 0x31_u8, 0x17_u8, 0x10_u8, 0x3d_u8])
  struct IMSVidEncoder
    lpVtbl : IMSVidEncoderVTbl*
  end

  struct IMSVidClosedCaptioningVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
    get_enable : UInt64
    put_enable : UInt64
  end

  IMSVidClosedCaptioning_GUID = "99652ea1-c1f7-414f-bb7b-1c967de75983"
  IID_IMSVidClosedCaptioning = LibC::GUID.new(0x99652ea1_u32, 0xc1f7_u16, 0x414f_u16, StaticArray[0xbb_u8, 0x7b_u8, 0x1c_u8, 0x96_u8, 0x7d_u8, 0xe7_u8, 0x59_u8, 0x83_u8])
  struct IMSVidClosedCaptioning
    lpVtbl : IMSVidClosedCaptioningVTbl*
  end

  struct IMSVidClosedCaptioning2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
    get_enable : UInt64
    put_enable : UInt64
    get_service : UInt64
    put_service : UInt64
  end

  IMSVidClosedCaptioning2_GUID = "e00cb864-a029-4310-9987-a873f5887d97"
  IID_IMSVidClosedCaptioning2 = LibC::GUID.new(0xe00cb864_u32, 0xa029_u16, 0x4310_u16, StaticArray[0x99_u8, 0x87_u8, 0xa8_u8, 0x73_u8, 0xf5_u8, 0x88_u8, 0x7d_u8, 0x97_u8])
  struct IMSVidClosedCaptioning2
    lpVtbl : IMSVidClosedCaptioning2VTbl*
  end

  struct IMSVidClosedCaptioning3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
    get_enable : UInt64
    put_enable : UInt64
    get_service : UInt64
    put_service : UInt64
    get_tele_text_filter : UInt64
  end

  IMSVidClosedCaptioning3_GUID = "c8638e8a-7625-4c51-9366-2f40a9831fc0"
  IID_IMSVidClosedCaptioning3 = LibC::GUID.new(0xc8638e8a_u32, 0x7625_u16, 0x4c51_u16, StaticArray[0x93_u8, 0x66_u8, 0x2f_u8, 0x40_u8, 0xa9_u8, 0x83_u8, 0x1f_u8, 0xc0_u8])
  struct IMSVidClosedCaptioning3
    lpVtbl : IMSVidClosedCaptioning3VTbl*
  end

  struct IMSVidXDSVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
    get_channel_change_interface : UInt64
  end

  IMSVidXDS_GUID = "11ebc158-e712-4d1f-8bb3-01ed5274c4ce"
  IID_IMSVidXDS = LibC::GUID.new(0x11ebc158_u32, 0xe712_u16, 0x4d1f_u16, StaticArray[0x8b_u8, 0xb3_u8, 0x1_u8, 0xed_u8, 0x52_u8, 0x74_u8, 0xc4_u8, 0xce_u8])
  struct IMSVidXDS
    lpVtbl : IMSVidXDSVTbl*
  end

  struct IMSVidXDSEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    state_change : UInt64
    rating_change : UInt64
  end

  IMSVidXDSEvent_GUID = "6db2317d-3b23-41ec-ba4b-701f407eaf3a"
  IID_IMSVidXDSEvent = LibC::GUID.new(0x6db2317d_u32, 0x3b23_u16, 0x41ec_u16, StaticArray[0xba_u8, 0x4b_u8, 0x70_u8, 0x1f_u8, 0x40_u8, 0x7e_u8, 0xaf_u8, 0x3a_u8])
  struct IMSVidXDSEvent
    lpVtbl : IMSVidXDSEventVTbl*
  end

  struct IMSVidDataServicesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
  end

  IMSVidDataServices_GUID = "334125c1-77e5-11d3-b653-00c04f79498e"
  IID_IMSVidDataServices = LibC::GUID.new(0x334125c1_u32, 0x77e5_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x53_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidDataServices
    lpVtbl : IMSVidDataServicesVTbl*
  end

  struct IMSVidDataServicesEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    state_change : UInt64
  end

  IMSVidDataServicesEvent_GUID = "334125c2-77e5-11d3-b653-00c04f79498e"
  IID_IMSVidDataServicesEvent = LibC::GUID.new(0x334125c2_u32, 0x77e5_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x53_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidDataServicesEvent
    lpVtbl : IMSVidDataServicesEventVTbl*
  end

  struct IMSVidVideoRendererVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
    get_custom_compositor_class : UInt64
    put_custom_compositor_class : UInt64
    get__custom_compositor_class : UInt64
    put__custom_compositor_class : UInt64
    get__custom_compositor : UInt64
    put__custom_compositor : UInt64
    get_mixer_bitmap : UInt64
    get__mixer_bitmap : UInt64
    put_mixer_bitmap : UInt64
    put__mixer_bitmap : UInt64
    get_mixer_bitmap_position_rect : UInt64
    put_mixer_bitmap_position_rect : UInt64
    get_mixer_bitmap_opacity : UInt64
    put_mixer_bitmap_opacity : UInt64
    setup_mixer_bitmap : UInt64
    get_source_size : UInt64
    put_source_size : UInt64
    get_over_scan : UInt64
    put_over_scan : UInt64
    get_available_source_rect : UInt64
    get_max_vid_rect : UInt64
    get_min_vid_rect : UInt64
    get_clipped_source_rect : UInt64
    put_clipped_source_rect : UInt64
    get_using_overlay : UInt64
    put_using_overlay : UInt64
    capture : UInt64
    get_frames_per_second : UInt64
    get_decimate_input : UInt64
    put_decimate_input : UInt64
  end

  IMSVidVideoRenderer_GUID = "37b03540-a4c8-11d2-b634-00c04f79498e"
  IID_IMSVidVideoRenderer = LibC::GUID.new(0x37b03540_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidVideoRenderer
    lpVtbl : IMSVidVideoRendererVTbl*
  end

  struct IMSVidVideoRendererEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    state_change : UInt64
    overlay_unavailable : UInt64
  end

  IMSVidVideoRendererEvent_GUID = "37b03545-a4c8-11d2-b634-00c04f79498e"
  IID_IMSVidVideoRendererEvent = LibC::GUID.new(0x37b03545_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidVideoRendererEvent
    lpVtbl : IMSVidVideoRendererEventVTbl*
  end

  struct IMSVidGenericSinkVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
    set_sink_filter : UInt64
    get_sink_streams : UInt64
    put_sink_streams : UInt64
  end

  IMSVidGenericSink_GUID = "6c29b41d-455b-4c33-963a-0d28e5e555ea"
  IID_IMSVidGenericSink = LibC::GUID.new(0x6c29b41d_u32, 0x455b_u16, 0x4c33_u16, StaticArray[0x96_u8, 0x3a_u8, 0xd_u8, 0x28_u8, 0xe5_u8, 0xe5_u8, 0x55_u8, 0xea_u8])
  struct IMSVidGenericSink
    lpVtbl : IMSVidGenericSinkVTbl*
  end

  struct IMSVidGenericSink2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
    set_sink_filter : UInt64
    get_sink_streams : UInt64
    put_sink_streams : UInt64
    add_filter : UInt64
    reset_filter_list : UInt64
  end

  IMSVidGenericSink2_GUID = "6b5a28f3-47f1-4092-b168-60cabec08f1c"
  IID_IMSVidGenericSink2 = LibC::GUID.new(0x6b5a28f3_u32, 0x47f1_u16, 0x4092_u16, StaticArray[0xb1_u8, 0x68_u8, 0x60_u8, 0xca_u8, 0xbe_u8, 0xc0_u8, 0x8f_u8, 0x1c_u8])
  struct IMSVidGenericSink2
    lpVtbl : IMSVidGenericSink2VTbl*
  end

  struct IMSVidStreamBufferRecordingControlVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_start_time : UInt64
    put_start_time : UInt64
    get_stop_time : UInt64
    put_stop_time : UInt64
    get_recording_stopped : UInt64
    get_recording_started : UInt64
    get_recording_type : UInt64
    get_recording_attribute : UInt64
  end

  IMSVidStreamBufferRecordingControl_GUID = "160621aa-bbbc-4326-a824-c395aebc6e74"
  IID_IMSVidStreamBufferRecordingControl = LibC::GUID.new(0x160621aa_u32, 0xbbbc_u16, 0x4326_u16, StaticArray[0xa8_u8, 0x24_u8, 0xc3_u8, 0x95_u8, 0xae_u8, 0xbc_u8, 0x6e_u8, 0x74_u8])
  struct IMSVidStreamBufferRecordingControl
    lpVtbl : IMSVidStreamBufferRecordingControlVTbl*
  end

  struct IMSVidStreamBufferSinkVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
    get_content_recorder : UInt64
    get_reference_recorder : UInt64
    get_sink_name : UInt64
    put_sink_name : UInt64
    name_set_lock : UInt64
    get_sbe_sink : UInt64
  end

  IMSVidStreamBufferSink_GUID = "159dbb45-cd1b-4dab-83ea-5cb1f4f21d07"
  IID_IMSVidStreamBufferSink = LibC::GUID.new(0x159dbb45_u32, 0xcd1b_u16, 0x4dab_u16, StaticArray[0x83_u8, 0xea_u8, 0x5c_u8, 0xb1_u8, 0xf4_u8, 0xf2_u8, 0x1d_u8, 0x7_u8])
  struct IMSVidStreamBufferSink
    lpVtbl : IMSVidStreamBufferSinkVTbl*
  end

  struct IMSVidStreamBufferSink2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
    get_content_recorder : UInt64
    get_reference_recorder : UInt64
    get_sink_name : UInt64
    put_sink_name : UInt64
    name_set_lock : UInt64
    get_sbe_sink : UInt64
    unlock_profile : UInt64
  end

  IMSVidStreamBufferSink2_GUID = "2ca9fc63-c131-4e5a-955a-544a47c67146"
  IID_IMSVidStreamBufferSink2 = LibC::GUID.new(0x2ca9fc63_u32, 0xc131_u16, 0x4e5a_u16, StaticArray[0x95_u8, 0x5a_u8, 0x54_u8, 0x4a_u8, 0x47_u8, 0xc6_u8, 0x71_u8, 0x46_u8])
  struct IMSVidStreamBufferSink2
    lpVtbl : IMSVidStreamBufferSink2VTbl*
  end

  struct IMSVidStreamBufferSink3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
    get_content_recorder : UInt64
    get_reference_recorder : UInt64
    get_sink_name : UInt64
    put_sink_name : UInt64
    name_set_lock : UInt64
    get_sbe_sink : UInt64
    unlock_profile : UInt64
    set_min_seek : UInt64
    get_audio_counter : UInt64
    get_video_counter : UInt64
    get_cc_counter : UInt64
    get_wst_counter : UInt64
    put_audio_analysis_filter : UInt64
    get_audio_analysis_filter : UInt64
    put__audio_analysis_filter : UInt64
    get__audio_analysis_filter : UInt64
    put_video_analysis_filter : UInt64
    get_video_analysis_filter : UInt64
    put__video_analysis_filter : UInt64
    get__video_analysis_filter : UInt64
    put_data_analysis_filter : UInt64
    get_data_analysis_filter : UInt64
    put__data_analysis_filter : UInt64
    get__data_analysis_filter : UInt64
    get_license_error_code : UInt64
  end

  IMSVidStreamBufferSink3_GUID = "4f8721d7-7d59-4d8b-99f5-a77775586bd5"
  IID_IMSVidStreamBufferSink3 = LibC::GUID.new(0x4f8721d7_u32, 0x7d59_u16, 0x4d8b_u16, StaticArray[0x99_u8, 0xf5_u8, 0xa7_u8, 0x77_u8, 0x75_u8, 0x58_u8, 0x6b_u8, 0xd5_u8])
  struct IMSVidStreamBufferSink3
    lpVtbl : IMSVidStreamBufferSink3VTbl*
  end

  struct IMSVidStreamBufferSinkEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    state_change : UInt64
    certificate_failure : UInt64
    certificate_success : UInt64
    write_failure : UInt64
  end

  IMSVidStreamBufferSinkEvent_GUID = "f798a36b-b05b-4bbe-9703-eaea7d61cd51"
  IID_IMSVidStreamBufferSinkEvent = LibC::GUID.new(0xf798a36b_u32, 0xb05b_u16, 0x4bbe_u16, StaticArray[0x97_u8, 0x3_u8, 0xea_u8, 0xea_u8, 0x7d_u8, 0x61_u8, 0xcd_u8, 0x51_u8])
  struct IMSVidStreamBufferSinkEvent
    lpVtbl : IMSVidStreamBufferSinkEventVTbl*
  end

  struct IMSVidStreamBufferSinkEvent2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    state_change : UInt64
    certificate_failure : UInt64
    certificate_success : UInt64
    write_failure : UInt64
    encryption_on : UInt64
    encryption_off : UInt64
  end

  IMSVidStreamBufferSinkEvent2_GUID = "3d7a5166-72d7-484b-a06f-286187b80ca1"
  IID_IMSVidStreamBufferSinkEvent2 = LibC::GUID.new(0x3d7a5166_u32, 0x72d7_u16, 0x484b_u16, StaticArray[0xa0_u8, 0x6f_u8, 0x28_u8, 0x61_u8, 0x87_u8, 0xb8_u8, 0xc_u8, 0xa1_u8])
  struct IMSVidStreamBufferSinkEvent2
    lpVtbl : IMSVidStreamBufferSinkEvent2VTbl*
  end

  struct IMSVidStreamBufferSinkEvent3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    state_change : UInt64
    certificate_failure : UInt64
    certificate_success : UInt64
    write_failure : UInt64
    encryption_on : UInt64
    encryption_off : UInt64
    license_change : UInt64
  end

  IMSVidStreamBufferSinkEvent3_GUID = "735ad8d5-c259-48e9-81e7-d27953665b23"
  IID_IMSVidStreamBufferSinkEvent3 = LibC::GUID.new(0x735ad8d5_u32, 0xc259_u16, 0x48e9_u16, StaticArray[0x81_u8, 0xe7_u8, 0xd2_u8, 0x79_u8, 0x53_u8, 0x66_u8, 0x5b_u8, 0x23_u8])
  struct IMSVidStreamBufferSinkEvent3
    lpVtbl : IMSVidStreamBufferSinkEvent3VTbl*
  end

  struct IMSVidStreamBufferSinkEvent4VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    state_change : UInt64
    certificate_failure : UInt64
    certificate_success : UInt64
    write_failure : UInt64
    encryption_on : UInt64
    encryption_off : UInt64
    license_change : UInt64
    write_failure_clear : UInt64
  end

  IMSVidStreamBufferSinkEvent4_GUID = "1b01dcb0-daf0-412c-a5d1-590c7f62e2b8"
  IID_IMSVidStreamBufferSinkEvent4 = LibC::GUID.new(0x1b01dcb0_u32, 0xdaf0_u16, 0x412c_u16, StaticArray[0xa5_u8, 0xd1_u8, 0x59_u8, 0xc_u8, 0x7f_u8, 0x62_u8, 0xe2_u8, 0xb8_u8])
  struct IMSVidStreamBufferSinkEvent4
    lpVtbl : IMSVidStreamBufferSinkEvent4VTbl*
  end

  struct IMSVidStreamBufferSourceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
    is_viewable : UInt64
    view : UInt64
    get_enable_reset_on_stop : UInt64
    put_enable_reset_on_stop : UInt64
    run : UInt64
    pause : UInt64
    stop : UInt64
    get_can_step : UInt64
    step : UInt64
    put_rate : UInt64
    get_rate : UInt64
    put_current_position : UInt64
    get_current_position : UInt64
    put_position_mode : UInt64
    get_position_mode : UInt64
    get_length : UInt64
    get_file_name : UInt64
    put_file_name : UInt64
    get_start : UInt64
    get_recording_attribute : UInt64
    current_ratings : UInt64
    max_ratings_level : UInt64
    put_block_unrated : UInt64
    put_unrated_delay : UInt64
    get_sbe_source : UInt64
  end

  IMSVidStreamBufferSource_GUID = "eb0c8cf9-6950-4772-87b1-47d11cf3a02f"
  IID_IMSVidStreamBufferSource = LibC::GUID.new(0xeb0c8cf9_u32, 0x6950_u16, 0x4772_u16, StaticArray[0x87_u8, 0xb1_u8, 0x47_u8, 0xd1_u8, 0x1c_u8, 0xf3_u8, 0xa0_u8, 0x2f_u8])
  struct IMSVidStreamBufferSource
    lpVtbl : IMSVidStreamBufferSourceVTbl*
  end

  struct IMSVidStreamBufferSource2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
    is_viewable : UInt64
    view : UInt64
    get_enable_reset_on_stop : UInt64
    put_enable_reset_on_stop : UInt64
    run : UInt64
    pause : UInt64
    stop : UInt64
    get_can_step : UInt64
    step : UInt64
    put_rate : UInt64
    get_rate : UInt64
    put_current_position : UInt64
    get_current_position : UInt64
    put_position_mode : UInt64
    get_position_mode : UInt64
    get_length : UInt64
    get_file_name : UInt64
    put_file_name : UInt64
    get_start : UInt64
    get_recording_attribute : UInt64
    current_ratings : UInt64
    max_ratings_level : UInt64
    put_block_unrated : UInt64
    put_unrated_delay : UInt64
    get_sbe_source : UInt64
    put_rate_ex : UInt64
    get_audio_counter : UInt64
    get_video_counter : UInt64
    get_cc_counter : UInt64
    get_wst_counter : UInt64
  end

  IMSVidStreamBufferSource2_GUID = "e4ba9059-b1ce-40d8-b9a0-d4ea4a9989d3"
  IID_IMSVidStreamBufferSource2 = LibC::GUID.new(0xe4ba9059_u32, 0xb1ce_u16, 0x40d8_u16, StaticArray[0xb9_u8, 0xa0_u8, 0xd4_u8, 0xea_u8, 0x4a_u8, 0x99_u8, 0x89_u8, 0xd3_u8])
  struct IMSVidStreamBufferSource2
    lpVtbl : IMSVidStreamBufferSource2VTbl*
  end

  struct IMSVidStreamBufferSourceEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    end_of_media : UInt64
    certificate_failure : UInt64
    certificate_success : UInt64
    ratings_blocked : UInt64
    ratings_unblocked : UInt64
    ratings_changed : UInt64
    time_hole : UInt64
    stale_data_read : UInt64
    content_becoming_stale : UInt64
    stale_file_deleted : UInt64
  end

  IMSVidStreamBufferSourceEvent_GUID = "50ce8a7d-9c28-4da8-9042-cdfa7116f979"
  IID_IMSVidStreamBufferSourceEvent = LibC::GUID.new(0x50ce8a7d_u32, 0x9c28_u16, 0x4da8_u16, StaticArray[0x90_u8, 0x42_u8, 0xcd_u8, 0xfa_u8, 0x71_u8, 0x16_u8, 0xf9_u8, 0x79_u8])
  struct IMSVidStreamBufferSourceEvent
    lpVtbl : IMSVidStreamBufferSourceEventVTbl*
  end

  struct IMSVidStreamBufferSourceEvent2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    end_of_media : UInt64
    certificate_failure : UInt64
    certificate_success : UInt64
    ratings_blocked : UInt64
    ratings_unblocked : UInt64
    ratings_changed : UInt64
    time_hole : UInt64
    stale_data_read : UInt64
    content_becoming_stale : UInt64
    stale_file_deleted : UInt64
    rate_change : UInt64
  end

  IMSVidStreamBufferSourceEvent2_GUID = "7aef50ce-8e22-4ba8-bc06-a92a458b4ef2"
  IID_IMSVidStreamBufferSourceEvent2 = LibC::GUID.new(0x7aef50ce_u32, 0x8e22_u16, 0x4ba8_u16, StaticArray[0xbc_u8, 0x6_u8, 0xa9_u8, 0x2a_u8, 0x45_u8, 0x8b_u8, 0x4e_u8, 0xf2_u8])
  struct IMSVidStreamBufferSourceEvent2
    lpVtbl : IMSVidStreamBufferSourceEvent2VTbl*
  end

  struct IMSVidStreamBufferSourceEvent3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    end_of_media : UInt64
    certificate_failure : UInt64
    certificate_success : UInt64
    ratings_blocked : UInt64
    ratings_unblocked : UInt64
    ratings_changed : UInt64
    time_hole : UInt64
    stale_data_read : UInt64
    content_becoming_stale : UInt64
    stale_file_deleted : UInt64
    rate_change : UInt64
    broadcast_event : UInt64
    broadcast_event_ex : UInt64
    copp_blocked : UInt64
    copp_unblocked : UInt64
    content_primarily_audio : UInt64
  end

  IMSVidStreamBufferSourceEvent3_GUID = "ceabd6ab-9b90-4570-adf1-3ce76e00a763"
  IID_IMSVidStreamBufferSourceEvent3 = LibC::GUID.new(0xceabd6ab_u32, 0x9b90_u16, 0x4570_u16, StaticArray[0xad_u8, 0xf1_u8, 0x3c_u8, 0xe7_u8, 0x6e_u8, 0x0_u8, 0xa7_u8, 0x63_u8])
  struct IMSVidStreamBufferSourceEvent3
    lpVtbl : IMSVidStreamBufferSourceEvent3VTbl*
  end

  struct IMSVidStreamBufferV2SourceEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    end_of_media : UInt64
    ratings_changed : UInt64
    time_hole : UInt64
    stale_data_read : UInt64
    content_becoming_stale : UInt64
    stale_file_deleted : UInt64
    rate_change : UInt64
    broadcast_event : UInt64
    broadcast_event_ex : UInt64
    content_primarily_audio : UInt64
  end

  IMSVidStreamBufferV2SourceEvent_GUID = "49c771f9-41b2-4cf7-9f9a-a313a8f6027e"
  IID_IMSVidStreamBufferV2SourceEvent = LibC::GUID.new(0x49c771f9_u32, 0x41b2_u16, 0x4cf7_u16, StaticArray[0x9f_u8, 0x9a_u8, 0xa3_u8, 0x13_u8, 0xa8_u8, 0xf6_u8, 0x2_u8, 0x7e_u8])
  struct IMSVidStreamBufferV2SourceEvent
    lpVtbl : IMSVidStreamBufferV2SourceEventVTbl*
  end

  struct IMSVidVideoRenderer2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
    get_custom_compositor_class : UInt64
    put_custom_compositor_class : UInt64
    get__custom_compositor_class : UInt64
    put__custom_compositor_class : UInt64
    get__custom_compositor : UInt64
    put__custom_compositor : UInt64
    get_mixer_bitmap : UInt64
    get__mixer_bitmap : UInt64
    put_mixer_bitmap : UInt64
    put__mixer_bitmap : UInt64
    get_mixer_bitmap_position_rect : UInt64
    put_mixer_bitmap_position_rect : UInt64
    get_mixer_bitmap_opacity : UInt64
    put_mixer_bitmap_opacity : UInt64
    setup_mixer_bitmap : UInt64
    get_source_size : UInt64
    put_source_size : UInt64
    get_over_scan : UInt64
    put_over_scan : UInt64
    get_available_source_rect : UInt64
    get_max_vid_rect : UInt64
    get_min_vid_rect : UInt64
    get_clipped_source_rect : UInt64
    put_clipped_source_rect : UInt64
    get_using_overlay : UInt64
    put_using_overlay : UInt64
    capture : UInt64
    get_frames_per_second : UInt64
    get_decimate_input : UInt64
    put_decimate_input : UInt64
    get_allocator : UInt64
    get__allocator : UInt64
    get_allocator_id : UInt64
    set_allocator : UInt64
    _set_allocator2 : UInt64
    put_suppress_effects : UInt64
    get_suppress_effects : UInt64
  end

  IMSVidVideoRenderer2_GUID = "6bdd5c1e-2810-4159-94bc-05511ae8549b"
  IID_IMSVidVideoRenderer2 = LibC::GUID.new(0x6bdd5c1e_u32, 0x2810_u16, 0x4159_u16, StaticArray[0x94_u8, 0xbc_u8, 0x5_u8, 0x51_u8, 0x1a_u8, 0xe8_u8, 0x54_u8, 0x9b_u8])
  struct IMSVidVideoRenderer2
    lpVtbl : IMSVidVideoRenderer2VTbl*
  end

  struct IMSVidVideoRendererEvent2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    state_change : UInt64
    overlay_unavailable : UInt64
  end

  IMSVidVideoRendererEvent2_GUID = "7145ed66-4730-4fdb-8a53-fde7508d3e5e"
  IID_IMSVidVideoRendererEvent2 = LibC::GUID.new(0x7145ed66_u32, 0x4730_u16, 0x4fdb_u16, StaticArray[0x8a_u8, 0x53_u8, 0xfd_u8, 0xe7_u8, 0x50_u8, 0x8d_u8, 0x3e_u8, 0x5e_u8])
  struct IMSVidVideoRendererEvent2
    lpVtbl : IMSVidVideoRendererEvent2VTbl*
  end

  struct IMSVidVMR9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
    get_custom_compositor_class : UInt64
    put_custom_compositor_class : UInt64
    get__custom_compositor_class : UInt64
    put__custom_compositor_class : UInt64
    get__custom_compositor : UInt64
    put__custom_compositor : UInt64
    get_mixer_bitmap : UInt64
    get__mixer_bitmap : UInt64
    put_mixer_bitmap : UInt64
    put__mixer_bitmap : UInt64
    get_mixer_bitmap_position_rect : UInt64
    put_mixer_bitmap_position_rect : UInt64
    get_mixer_bitmap_opacity : UInt64
    put_mixer_bitmap_opacity : UInt64
    setup_mixer_bitmap : UInt64
    get_source_size : UInt64
    put_source_size : UInt64
    get_over_scan : UInt64
    put_over_scan : UInt64
    get_available_source_rect : UInt64
    get_max_vid_rect : UInt64
    get_min_vid_rect : UInt64
    get_clipped_source_rect : UInt64
    put_clipped_source_rect : UInt64
    get_using_overlay : UInt64
    put_using_overlay : UInt64
    capture : UInt64
    get_frames_per_second : UInt64
    get_decimate_input : UInt64
    put_decimate_input : UInt64
    get_allocator_id : UInt64
    set_allocator : UInt64
    put_suppress_effects : UInt64
    get_suppress_effects : UInt64
    get_allocator : UInt64
  end

  IMSVidVMR9_GUID = "d58b0015-ebef-44bb-bbdd-3f3699d76ea1"
  IID_IMSVidVMR9 = LibC::GUID.new(0xd58b0015_u32, 0xebef_u16, 0x44bb_u16, StaticArray[0xbb_u8, 0xdd_u8, 0x3f_u8, 0x36_u8, 0x99_u8, 0xd7_u8, 0x6e_u8, 0xa1_u8])
  struct IMSVidVMR9
    lpVtbl : IMSVidVMR9VTbl*
  end

  struct IMSVidEVRVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
    get_custom_compositor_class : UInt64
    put_custom_compositor_class : UInt64
    get__custom_compositor_class : UInt64
    put__custom_compositor_class : UInt64
    get__custom_compositor : UInt64
    put__custom_compositor : UInt64
    get_mixer_bitmap : UInt64
    get__mixer_bitmap : UInt64
    put_mixer_bitmap : UInt64
    put__mixer_bitmap : UInt64
    get_mixer_bitmap_position_rect : UInt64
    put_mixer_bitmap_position_rect : UInt64
    get_mixer_bitmap_opacity : UInt64
    put_mixer_bitmap_opacity : UInt64
    setup_mixer_bitmap : UInt64
    get_source_size : UInt64
    put_source_size : UInt64
    get_over_scan : UInt64
    put_over_scan : UInt64
    get_available_source_rect : UInt64
    get_max_vid_rect : UInt64
    get_min_vid_rect : UInt64
    get_clipped_source_rect : UInt64
    put_clipped_source_rect : UInt64
    get_using_overlay : UInt64
    put_using_overlay : UInt64
    capture : UInt64
    get_frames_per_second : UInt64
    get_decimate_input : UInt64
    put_decimate_input : UInt64
    get_presenter : UInt64
    put_presenter : UInt64
    put_suppress_effects : UInt64
    get_suppress_effects : UInt64
  end

  IMSVidEVR_GUID = "15e496ae-82a8-4cf9-a6b6-c561dc60398f"
  IID_IMSVidEVR = LibC::GUID.new(0x15e496ae_u32, 0x82a8_u16, 0x4cf9_u16, StaticArray[0xa6_u8, 0xb6_u8, 0xc5_u8, 0x61_u8, 0xdc_u8, 0x60_u8, 0x39_u8, 0x8f_u8])
  struct IMSVidEVR
    lpVtbl : IMSVidEVRVTbl*
  end

  struct IMSVidEVREventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    state_change : UInt64
    on_user_event : UInt64
  end

  IMSVidEVREvent_GUID = "349abb10-883c-4f22-8714-cecaeee45d62"
  IID_IMSVidEVREvent = LibC::GUID.new(0x349abb10_u32, 0x883c_u16, 0x4f22_u16, StaticArray[0x87_u8, 0x14_u8, 0xce_u8, 0xca_u8, 0xee_u8, 0xe4_u8, 0x5d_u8, 0x62_u8])
  struct IMSVidEVREvent
    lpVtbl : IMSVidEVREventVTbl*
  end

  struct IMSVidAudioRendererVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_status : UInt64
    put_power : UInt64
    get_power : UInt64
    get_category : UInt64
    get_class_id : UInt64
    get__category : UInt64
    get__class_id : UInt64
    is_equal_device : UInt64
    put_volume : UInt64
    get_volume : UInt64
    put_balance : UInt64
    get_balance : UInt64
  end

  IMSVidAudioRenderer_GUID = "37b0353f-a4c8-11d2-b634-00c04f79498e"
  IID_IMSVidAudioRenderer = LibC::GUID.new(0x37b0353f_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidAudioRenderer
    lpVtbl : IMSVidAudioRendererVTbl*
  end

  struct IMSVidAudioRendererEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    state_change : UInt64
  end

  IMSVidAudioRendererEvent_GUID = "37b03541-a4c8-11d2-b634-00c04f79498e"
  IID_IMSVidAudioRendererEvent = LibC::GUID.new(0x37b03541_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidAudioRendererEvent
    lpVtbl : IMSVidAudioRendererEventVTbl*
  end

  struct IMSVidAudioRendererEvent2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    state_change : UInt64
    av_dec_audio_dual_mono : UInt64
    av_audio_sample_rate : UInt64
    av_audio_channel_config : UInt64
    av_audio_channel_count : UInt64
    av_dec_common_mean_bit_rate : UInt64
    avdd_surround_mode : UInt64
    av_dec_common_input_format : UInt64
    av_dec_common_output_format : UInt64
  end

  IMSVidAudioRendererEvent2_GUID = "e3f55729-353b-4c43-a028-50f79aa9a907"
  IID_IMSVidAudioRendererEvent2 = LibC::GUID.new(0xe3f55729_u32, 0x353b_u16, 0x4c43_u16, StaticArray[0xa0_u8, 0x28_u8, 0x50_u8, 0xf7_u8, 0x9a_u8, 0xa9_u8, 0xa9_u8, 0x7_u8])
  struct IMSVidAudioRendererEvent2
    lpVtbl : IMSVidAudioRendererEvent2VTbl*
  end

  struct IMSVidInputDevicesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    get_item : UInt64
    add : UInt64
    remove : UInt64
  end

  IMSVidInputDevices_GUID = "c5702cd1-9b79-11d3-b654-00c04f79498e"
  IID_IMSVidInputDevices = LibC::GUID.new(0xc5702cd1_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidInputDevices
    lpVtbl : IMSVidInputDevicesVTbl*
  end

  struct IMSVidOutputDevicesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    get_item : UInt64
    add : UInt64
    remove : UInt64
  end

  IMSVidOutputDevices_GUID = "c5702cd2-9b79-11d3-b654-00c04f79498e"
  IID_IMSVidOutputDevices = LibC::GUID.new(0xc5702cd2_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidOutputDevices
    lpVtbl : IMSVidOutputDevicesVTbl*
  end

  struct IMSVidVideoRendererDevicesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    get_item : UInt64
    add : UInt64
    remove : UInt64
  end

  IMSVidVideoRendererDevices_GUID = "c5702cd3-9b79-11d3-b654-00c04f79498e"
  IID_IMSVidVideoRendererDevices = LibC::GUID.new(0xc5702cd3_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidVideoRendererDevices
    lpVtbl : IMSVidVideoRendererDevicesVTbl*
  end

  struct IMSVidAudioRendererDevicesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    get_item : UInt64
    add : UInt64
    remove : UInt64
  end

  IMSVidAudioRendererDevices_GUID = "c5702cd4-9b79-11d3-b654-00c04f79498e"
  IID_IMSVidAudioRendererDevices = LibC::GUID.new(0xc5702cd4_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidAudioRendererDevices
    lpVtbl : IMSVidAudioRendererDevicesVTbl*
  end

  struct IMSVidFeaturesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    get_item : UInt64
    add : UInt64
    remove : UInt64
  end

  IMSVidFeatures_GUID = "c5702cd5-9b79-11d3-b654-00c04f79498e"
  IID_IMSVidFeatures = LibC::GUID.new(0xc5702cd5_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidFeatures
    lpVtbl : IMSVidFeaturesVTbl*
  end

  struct IMSVidCtlVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_auto_size : UInt64
    put_auto_size : UInt64
    get_back_color : UInt64
    put_back_color : UInt64
    get_enabled : UInt64
    put_enabled : UInt64
    get_tab_stop : UInt64
    put_tab_stop : UInt64
    get_window : UInt64
    refresh : UInt64
    get_display_size : UInt64
    put_display_size : UInt64
    get_maintain_aspect_ratio : UInt64
    put_maintain_aspect_ratio : UInt64
    get_color_key : UInt64
    put_color_key : UInt64
    get_inputs_available : UInt64
    get_outputs_available : UInt64
    get__inputs_available : UInt64
    get__outputs_available : UInt64
    get_video_renderers_available : UInt64
    get_audio_renderers_available : UInt64
    get_features_available : UInt64
    get_input_active : UInt64
    put_input_active : UInt64
    get_outputs_active : UInt64
    put_outputs_active : UInt64
    get_video_renderer_active : UInt64
    put_video_renderer_active : UInt64
    get_audio_renderer_active : UInt64
    put_audio_renderer_active : UInt64
    get_features_active : UInt64
    put_features_active : UInt64
    get_state : UInt64
    view : UInt64
    build : UInt64
    pause : UInt64
    run : UInt64
    stop : UInt64
    decompose : UInt64
    disable_video : UInt64
    disable_audio : UInt64
    view_next : UInt64
  end

  IMSVidCtl_GUID = "b0edf162-910a-11d2-b632-00c04f79498e"
  IID_IMSVidCtl = LibC::GUID.new(0xb0edf162_u32, 0x910a_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IMSVidCtl
    lpVtbl : IMSVidCtlVTbl*
  end

  struct IMSEventBinderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    bind : UInt64
    unbind : UInt64
  end

  IMSEventBinder_GUID = "c3a9f406-2222-436d-86d5-ba3229279efb"
  IID_IMSEventBinder = LibC::GUID.new(0xc3a9f406_u32, 0x2222_u16, 0x436d_u16, StaticArray[0x86_u8, 0xd5_u8, 0xba_u8, 0x32_u8, 0x29_u8, 0x27_u8, 0x9e_u8, 0xfb_u8])
  struct IMSEventBinder
    lpVtbl : IMSEventBinderVTbl*
  end

  struct IIMSVidCtlEventsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
  end

  IIMSVidCtlEvents_GUID = "b0edf164-910a-11d2-b632-00c04f79498e"
  IID_IIMSVidCtlEvents = LibC::GUID.new(0xb0edf164_u32, 0x910a_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  struct IIMSVidCtlEvents
    lpVtbl : IIMSVidCtlEventsVTbl*
  end

  struct IStreamBufferInitializeVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_hkey : UInt64
    set_si_ds : UInt64
  end

  IStreamBufferInitialize_GUID = "9ce50f2d-6ba7-40fb-a034-50b1a674ec78"
  IID_IStreamBufferInitialize = LibC::GUID.new(0x9ce50f2d_u32, 0x6ba7_u16, 0x40fb_u16, StaticArray[0xa0_u8, 0x34_u8, 0x50_u8, 0xb1_u8, 0xa6_u8, 0x74_u8, 0xec_u8, 0x78_u8])
  struct IStreamBufferInitialize
    lpVtbl : IStreamBufferInitializeVTbl*
  end

  struct IStreamBufferSinkVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    lock_profile : UInt64
    create_recorder : UInt64
    is_profile_locked : UInt64
  end

  IStreamBufferSink_GUID = "afd1f242-7efd-45ee-ba4e-407a25c9a77a"
  IID_IStreamBufferSink = LibC::GUID.new(0xafd1f242_u32, 0x7efd_u16, 0x45ee_u16, StaticArray[0xba_u8, 0x4e_u8, 0x40_u8, 0x7a_u8, 0x25_u8, 0xc9_u8, 0xa7_u8, 0x7a_u8])
  struct IStreamBufferSink
    lpVtbl : IStreamBufferSinkVTbl*
  end

  struct IStreamBufferSink2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    lock_profile : UInt64
    create_recorder : UInt64
    is_profile_locked : UInt64
    unlock_profile : UInt64
  end

  IStreamBufferSink2_GUID = "db94a660-f4fb-4bfa-bcc6-fe159a4eea93"
  IID_IStreamBufferSink2 = LibC::GUID.new(0xdb94a660_u32, 0xf4fb_u16, 0x4bfa_u16, StaticArray[0xbc_u8, 0xc6_u8, 0xfe_u8, 0x15_u8, 0x9a_u8, 0x4e_u8, 0xea_u8, 0x93_u8])
  struct IStreamBufferSink2
    lpVtbl : IStreamBufferSink2VTbl*
  end

  struct IStreamBufferSink3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    lock_profile : UInt64
    create_recorder : UInt64
    is_profile_locked : UInt64
    unlock_profile : UInt64
    set_available_filter : UInt64
  end

  IStreamBufferSink3_GUID = "974723f2-887a-4452-9366-2cff3057bc8f"
  IID_IStreamBufferSink3 = LibC::GUID.new(0x974723f2_u32, 0x887a_u16, 0x4452_u16, StaticArray[0x93_u8, 0x66_u8, 0x2c_u8, 0xff_u8, 0x30_u8, 0x57_u8, 0xbc_u8, 0x8f_u8])
  struct IStreamBufferSink3
    lpVtbl : IStreamBufferSink3VTbl*
  end

  struct IStreamBufferSourceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_stream_sink : UInt64
  end

  IStreamBufferSource_GUID = "1c5bd776-6ced-4f44-8164-5eab0e98db12"
  IID_IStreamBufferSource = LibC::GUID.new(0x1c5bd776_u32, 0x6ced_u16, 0x4f44_u16, StaticArray[0x81_u8, 0x64_u8, 0x5e_u8, 0xab_u8, 0xe_u8, 0x98_u8, 0xdb_u8, 0x12_u8])
  struct IStreamBufferSource
    lpVtbl : IStreamBufferSourceVTbl*
  end

  struct IStreamBufferRecordControlVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    start : UInt64
    stop : UInt64
    get_recording_status : UInt64
  end

  IStreamBufferRecordControl_GUID = "ba9b6c99-f3c7-4ff2-92db-cfdd4851bf31"
  IID_IStreamBufferRecordControl = LibC::GUID.new(0xba9b6c99_u32, 0xf3c7_u16, 0x4ff2_u16, StaticArray[0x92_u8, 0xdb_u8, 0xcf_u8, 0xdd_u8, 0x48_u8, 0x51_u8, 0xbf_u8, 0x31_u8])
  struct IStreamBufferRecordControl
    lpVtbl : IStreamBufferRecordControlVTbl*
  end

  struct IStreamBufferRecCompVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    append : UInt64
    append_ex : UInt64
    get_current_length : UInt64
    close : UInt64
    cancel : UInt64
  end

  IStreamBufferRecComp_GUID = "9e259a9b-8815-42ae-b09f-221970b154fd"
  IID_IStreamBufferRecComp = LibC::GUID.new(0x9e259a9b_u32, 0x8815_u16, 0x42ae_u16, StaticArray[0xb0_u8, 0x9f_u8, 0x22_u8, 0x19_u8, 0x70_u8, 0xb1_u8, 0x54_u8, 0xfd_u8])
  struct IStreamBufferRecComp
    lpVtbl : IStreamBufferRecCompVTbl*
  end

  struct IStreamBufferRecordingAttributeVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_attribute : UInt64
    get_attribute_count : UInt64
    get_attribute_by_name : UInt64
    get_attribute_by_index : UInt64
    enum_attributes : UInt64
  end

  IStreamBufferRecordingAttribute_GUID = "16ca4e03-fe69-4705-bd41-5b7dfc0c95f3"
  IID_IStreamBufferRecordingAttribute = LibC::GUID.new(0x16ca4e03_u32, 0xfe69_u16, 0x4705_u16, StaticArray[0xbd_u8, 0x41_u8, 0x5b_u8, 0x7d_u8, 0xfc_u8, 0xc_u8, 0x95_u8, 0xf3_u8])
  struct IStreamBufferRecordingAttribute
    lpVtbl : IStreamBufferRecordingAttributeVTbl*
  end

  struct IEnumStreamBufferRecordingAttribVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    next : UInt64
    skip : UInt64
    reset : UInt64
    clone : UInt64
  end

  IEnumStreamBufferRecordingAttrib_GUID = "c18a9162-1e82-4142-8c73-5690fa62fe33"
  IID_IEnumStreamBufferRecordingAttrib = LibC::GUID.new(0xc18a9162_u32, 0x1e82_u16, 0x4142_u16, StaticArray[0x8c_u8, 0x73_u8, 0x56_u8, 0x90_u8, 0xfa_u8, 0x62_u8, 0xfe_u8, 0x33_u8])
  struct IEnumStreamBufferRecordingAttrib
    lpVtbl : IEnumStreamBufferRecordingAttribVTbl*
  end

  struct IStreamBufferConfigureVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_directory : UInt64
    get_directory : UInt64
    set_backing_file_count : UInt64
    get_backing_file_count : UInt64
    set_backing_file_duration : UInt64
    get_backing_file_duration : UInt64
  end

  IStreamBufferConfigure_GUID = "ce14dfae-4098-4af7-bbf7-d6511f835414"
  IID_IStreamBufferConfigure = LibC::GUID.new(0xce14dfae_u32, 0x4098_u16, 0x4af7_u16, StaticArray[0xbb_u8, 0xf7_u8, 0xd6_u8, 0x51_u8, 0x1f_u8, 0x83_u8, 0x54_u8, 0x14_u8])
  struct IStreamBufferConfigure
    lpVtbl : IStreamBufferConfigureVTbl*
  end

  struct IStreamBufferConfigure2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_directory : UInt64
    get_directory : UInt64
    set_backing_file_count : UInt64
    get_backing_file_count : UInt64
    set_backing_file_duration : UInt64
    get_backing_file_duration : UInt64
    set_multiplexed_packet_size : UInt64
    get_multiplexed_packet_size : UInt64
    set_ff_transition_rates : UInt64
    get_ff_transition_rates : UInt64
  end

  IStreamBufferConfigure2_GUID = "53e037bf-3992-4282-ae34-2487b4dae06b"
  IID_IStreamBufferConfigure2 = LibC::GUID.new(0x53e037bf_u32, 0x3992_u16, 0x4282_u16, StaticArray[0xae_u8, 0x34_u8, 0x24_u8, 0x87_u8, 0xb4_u8, 0xda_u8, 0xe0_u8, 0x6b_u8])
  struct IStreamBufferConfigure2
    lpVtbl : IStreamBufferConfigure2VTbl*
  end

  struct IStreamBufferConfigure3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_directory : UInt64
    get_directory : UInt64
    set_backing_file_count : UInt64
    get_backing_file_count : UInt64
    set_backing_file_duration : UInt64
    get_backing_file_duration : UInt64
    set_multiplexed_packet_size : UInt64
    get_multiplexed_packet_size : UInt64
    set_ff_transition_rates : UInt64
    get_ff_transition_rates : UInt64
    set_start_rec_config : UInt64
    get_start_rec_config : UInt64
    set_namespace : UInt64
    get_namespace : UInt64
  end

  IStreamBufferConfigure3_GUID = "7e2d2a1e-7192-4bd7-80c1-061fd1d10402"
  IID_IStreamBufferConfigure3 = LibC::GUID.new(0x7e2d2a1e_u32, 0x7192_u16, 0x4bd7_u16, StaticArray[0x80_u8, 0xc1_u8, 0x6_u8, 0x1f_u8, 0xd1_u8, 0xd1_u8, 0x4_u8, 0x2_u8])
  struct IStreamBufferConfigure3
    lpVtbl : IStreamBufferConfigure3VTbl*
  end

  struct IStreamBufferMediaSeekingVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_capabilities : UInt64
    check_capabilities : UInt64
    is_format_supported : UInt64
    query_preferred_format : UInt64
    get_time_format : UInt64
    is_using_time_format : UInt64
    set_time_format : UInt64
    get_duration : UInt64
    get_stop_position : UInt64
    get_current_position : UInt64
    convert_time_format : UInt64
    set_positions : UInt64
    get_positions : UInt64
    get_available : UInt64
    set_rate : UInt64
    get_rate : UInt64
    get_preroll : UInt64
  end

  IStreamBufferMediaSeeking_GUID = "f61f5c26-863d-4afa-b0ba-2f81dc978596"
  IID_IStreamBufferMediaSeeking = LibC::GUID.new(0xf61f5c26_u32, 0x863d_u16, 0x4afa_u16, StaticArray[0xb0_u8, 0xba_u8, 0x2f_u8, 0x81_u8, 0xdc_u8, 0x97_u8, 0x85_u8, 0x96_u8])
  struct IStreamBufferMediaSeeking
    lpVtbl : IStreamBufferMediaSeekingVTbl*
  end

  struct IStreamBufferMediaSeeking2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_capabilities : UInt64
    check_capabilities : UInt64
    is_format_supported : UInt64
    query_preferred_format : UInt64
    get_time_format : UInt64
    is_using_time_format : UInt64
    set_time_format : UInt64
    get_duration : UInt64
    get_stop_position : UInt64
    get_current_position : UInt64
    convert_time_format : UInt64
    set_positions : UInt64
    get_positions : UInt64
    get_available : UInt64
    set_rate : UInt64
    get_rate : UInt64
    get_preroll : UInt64
    set_rate_ex : UInt64
  end

  IStreamBufferMediaSeeking2_GUID = "3a439ab0-155f-470a-86a6-9ea54afd6eaf"
  IID_IStreamBufferMediaSeeking2 = LibC::GUID.new(0x3a439ab0_u32, 0x155f_u16, 0x470a_u16, StaticArray[0x86_u8, 0xa6_u8, 0x9e_u8, 0xa5_u8, 0x4a_u8, 0xfd_u8, 0x6e_u8, 0xaf_u8])
  struct IStreamBufferMediaSeeking2
    lpVtbl : IStreamBufferMediaSeeking2VTbl*
  end

  struct IStreamBufferDataCountersVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_data : UInt64
    reset_data : UInt64
  end

  IStreamBufferDataCounters_GUID = "9d2a2563-31ab-402e-9a6b-adb903489440"
  IID_IStreamBufferDataCounters = LibC::GUID.new(0x9d2a2563_u32, 0x31ab_u16, 0x402e_u16, StaticArray[0x9a_u8, 0x6b_u8, 0xad_u8, 0xb9_u8, 0x3_u8, 0x48_u8, 0x94_u8, 0x40_u8])
  struct IStreamBufferDataCounters
    lpVtbl : IStreamBufferDataCountersVTbl*
  end

  struct ISBE2GlobalEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_event : UInt64
  end

  ISBE2GlobalEvent_GUID = "caede759-b6b1-11db-a578-0018f3fa24c6"
  IID_ISBE2GlobalEvent = LibC::GUID.new(0xcaede759_u32, 0xb6b1_u16, 0x11db_u16, StaticArray[0xa5_u8, 0x78_u8, 0x0_u8, 0x18_u8, 0xf3_u8, 0xfa_u8, 0x24_u8, 0xc6_u8])
  struct ISBE2GlobalEvent
    lpVtbl : ISBE2GlobalEventVTbl*
  end

  struct ISBE2GlobalEvent2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_event : UInt64
    get_event_ex : UInt64
  end

  ISBE2GlobalEvent2_GUID = "6d8309bf-00fe-4506-8b03-f8c65b5c9b39"
  IID_ISBE2GlobalEvent2 = LibC::GUID.new(0x6d8309bf_u32, 0xfe_u16, 0x4506_u16, StaticArray[0x8b_u8, 0x3_u8, 0xf8_u8, 0xc6_u8, 0x5b_u8, 0x5c_u8, 0x9b_u8, 0x39_u8])
  struct ISBE2GlobalEvent2
    lpVtbl : ISBE2GlobalEvent2VTbl*
  end

  struct ISBE2SpanningEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_event : UInt64
  end

  ISBE2SpanningEvent_GUID = "caede760-b6b1-11db-a578-0018f3fa24c6"
  IID_ISBE2SpanningEvent = LibC::GUID.new(0xcaede760_u32, 0xb6b1_u16, 0x11db_u16, StaticArray[0xa5_u8, 0x78_u8, 0x0_u8, 0x18_u8, 0xf3_u8, 0xfa_u8, 0x24_u8, 0xc6_u8])
  struct ISBE2SpanningEvent
    lpVtbl : ISBE2SpanningEventVTbl*
  end

  struct ISBE2CrossbarVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    enable_default_mode : UInt64
    get_initial_profile : UInt64
    set_output_profile : UInt64
    enum_streams : UInt64
  end

  ISBE2Crossbar_GUID = "547b6d26-3226-487e-8253-8aa168749434"
  IID_ISBE2Crossbar = LibC::GUID.new(0x547b6d26_u32, 0x3226_u16, 0x487e_u16, StaticArray[0x82_u8, 0x53_u8, 0x8a_u8, 0xa1_u8, 0x68_u8, 0x74_u8, 0x94_u8, 0x34_u8])
  struct ISBE2Crossbar
    lpVtbl : ISBE2CrossbarVTbl*
  end

  struct ISBE2StreamMapVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    map_stream : UInt64
    unmap_stream : UInt64
    enum_mapped_streams : UInt64
  end

  ISBE2StreamMap_GUID = "667c7745-85b1-4c55-ae55-4e25056159fc"
  IID_ISBE2StreamMap = LibC::GUID.new(0x667c7745_u32, 0x85b1_u16, 0x4c55_u16, StaticArray[0xae_u8, 0x55_u8, 0x4e_u8, 0x25_u8, 0x5_u8, 0x61_u8, 0x59_u8, 0xfc_u8])
  struct ISBE2StreamMap
    lpVtbl : ISBE2StreamMapVTbl*
  end

  struct ISBE2EnumStreamVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    next : UInt64
    skip : UInt64
    reset : UInt64
    clone : UInt64
  end

  ISBE2EnumStream_GUID = "f7611092-9fbc-46ec-a7c7-548ea78b71a4"
  IID_ISBE2EnumStream = LibC::GUID.new(0xf7611092_u32, 0x9fbc_u16, 0x46ec_u16, StaticArray[0xa7_u8, 0xc7_u8, 0x54_u8, 0x8e_u8, 0xa7_u8, 0x8b_u8, 0x71_u8, 0xa4_u8])
  struct ISBE2EnumStream
    lpVtbl : ISBE2EnumStreamVTbl*
  end

  struct ISBE2MediaTypeProfileVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_stream_count : UInt64
    get_stream : UInt64
    add_stream : UInt64
    delete_stream : UInt64
  end

  ISBE2MediaTypeProfile_GUID = "f238267d-4671-40d7-997e-25dc32cfed2a"
  IID_ISBE2MediaTypeProfile = LibC::GUID.new(0xf238267d_u32, 0x4671_u16, 0x40d7_u16, StaticArray[0x99_u8, 0x7e_u8, 0x25_u8, 0xdc_u8, 0x32_u8, 0xcf_u8, 0xed_u8, 0x2a_u8])
  struct ISBE2MediaTypeProfile
    lpVtbl : ISBE2MediaTypeProfileVTbl*
  end

  struct ISBE2FileScanVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    repair_file : UInt64
  end

  ISBE2FileScan_GUID = "3e2bf5a5-4f96-4899-a1a3-75e8be9a5ac0"
  IID_ISBE2FileScan = LibC::GUID.new(0x3e2bf5a5_u32, 0x4f96_u16, 0x4899_u16, StaticArray[0xa1_u8, 0xa3_u8, 0x75_u8, 0xe8_u8, 0xbe_u8, 0x9a_u8, 0x5a_u8, 0xc0_u8])
  struct ISBE2FileScan
    lpVtbl : ISBE2FileScanVTbl*
  end

  struct IMpeg2TableFilterVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    add_pid : UInt64
    add_table : UInt64
    add_extension : UInt64
    remove_pid : UInt64
    remove_table : UInt64
    remove_extension : UInt64
  end

  IMpeg2TableFilter_GUID = "bdcdd913-9ecd-4fb2-81ae-adf747ea75a5"
  IID_IMpeg2TableFilter = LibC::GUID.new(0xbdcdd913_u32, 0x9ecd_u16, 0x4fb2_u16, StaticArray[0x81_u8, 0xae_u8, 0xad_u8, 0xf7_u8, 0x47_u8, 0xea_u8, 0x75_u8, 0xa5_u8])
  struct IMpeg2TableFilter
    lpVtbl : IMpeg2TableFilterVTbl*
  end

  struct IMpeg2DataVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_section : UInt64
    get_table : UInt64
    get_stream_of_sections : UInt64
  end

  IMpeg2Data_GUID = "9b396d40-f380-4e3c-a514-1a82bf6ebfe6"
  IID_IMpeg2Data = LibC::GUID.new(0x9b396d40_u32, 0xf380_u16, 0x4e3c_u16, StaticArray[0xa5_u8, 0x14_u8, 0x1a_u8, 0x82_u8, 0xbf_u8, 0x6e_u8, 0xbf_u8, 0xe6_u8])
  struct IMpeg2Data
    lpVtbl : IMpeg2DataVTbl*
  end

  struct ISectionListVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    initialize_with_raw_sections : UInt64
    cancel_pending_request : UInt64
    get_number_of_sections : UInt64
    get_section_data : UInt64
    get_program_identifier : UInt64
    get_table_identifier : UInt64
  end

  ISectionList_GUID = "afec1eb5-2a64-46c6-bf4b-ae3ccb6afdb0"
  IID_ISectionList = LibC::GUID.new(0xafec1eb5_u32, 0x2a64_u16, 0x46c6_u16, StaticArray[0xbf_u8, 0x4b_u8, 0xae_u8, 0x3c_u8, 0xcb_u8, 0x6a_u8, 0xfd_u8, 0xb0_u8])
  struct ISectionList
    lpVtbl : ISectionListVTbl*
  end

  struct IMpeg2StreamVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    supply_data_buffer : UInt64
  end

  IMpeg2Stream_GUID = "400cc286-32a0-4ce4-9041-39571125a635"
  IID_IMpeg2Stream = LibC::GUID.new(0x400cc286_u32, 0x32a0_u16, 0x4ce4_u16, StaticArray[0x90_u8, 0x41_u8, 0x39_u8, 0x57_u8, 0x11_u8, 0x25_u8, 0xa6_u8, 0x35_u8])
  struct IMpeg2Stream
    lpVtbl : IMpeg2StreamVTbl*
  end

  struct IGenericDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_body : UInt64
  end

  IGenericDescriptor_GUID = "6a5918f8-a77a-4f61-aed0-5702bdcda3e6"
  IID_IGenericDescriptor = LibC::GUID.new(0x6a5918f8_u32, 0xa77a_u16, 0x4f61_u16, StaticArray[0xae_u8, 0xd0_u8, 0x57_u8, 0x2_u8, 0xbd_u8, 0xcd_u8, 0xa3_u8, 0xe6_u8])
  struct IGenericDescriptor
    lpVtbl : IGenericDescriptorVTbl*
  end

  struct IGenericDescriptor2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_body : UInt64
    initialize2 : UInt64
    get_length2 : UInt64
  end

  IGenericDescriptor2_GUID = "bf02fb7e-9792-4e10-a68d-033a2cc246a5"
  IID_IGenericDescriptor2 = LibC::GUID.new(0xbf02fb7e_u32, 0x9792_u16, 0x4e10_u16, StaticArray[0xa6_u8, 0x8d_u8, 0x3_u8, 0x3a_u8, 0x2c_u8, 0xc2_u8, 0x46_u8, 0xa5_u8])
  struct IGenericDescriptor2
    lpVtbl : IGenericDescriptor2VTbl*
  end

  struct IPATVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_transport_stream_id : UInt64
    get_version_number : UInt64
    get_count_of_records : UInt64
    get_record_program_number : UInt64
    get_record_program_map_pid : UInt64
    find_record_program_map_pid : UInt64
    register_for_next_table : UInt64
    get_next_table : UInt64
    register_for_when_current : UInt64
    convert_next_to_current : UInt64
  end

  IPAT_GUID = "6623b511-4b5f-43c3-9a01-e8ff84188060"
  IID_IPAT = LibC::GUID.new(0x6623b511_u32, 0x4b5f_u16, 0x43c3_u16, StaticArray[0x9a_u8, 0x1_u8, 0xe8_u8, 0xff_u8, 0x84_u8, 0x18_u8, 0x80_u8, 0x60_u8])
  struct IPAT
    lpVtbl : IPATVTbl*
  end

  struct ICATVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_version_number : UInt64
    get_count_of_table_descriptors : UInt64
    get_table_descriptor_by_index : UInt64
    get_table_descriptor_by_tag : UInt64
    register_for_next_table : UInt64
    get_next_table : UInt64
    register_for_when_current : UInt64
    convert_next_to_current : UInt64
  end

  ICAT_GUID = "7c6995fb-2a31-4bd7-953e-b1ad7fb7d31c"
  IID_ICAT = LibC::GUID.new(0x7c6995fb_u32, 0x2a31_u16, 0x4bd7_u16, StaticArray[0x95_u8, 0x3e_u8, 0xb1_u8, 0xad_u8, 0x7f_u8, 0xb7_u8, 0xd3_u8, 0x1c_u8])
  struct ICAT
    lpVtbl : ICATVTbl*
  end

  struct IPMTVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_program_number : UInt64
    get_version_number : UInt64
    get_pcr_pid : UInt64
    get_count_of_table_descriptors : UInt64
    get_table_descriptor_by_index : UInt64
    get_table_descriptor_by_tag : UInt64
    get_count_of_records : UInt64
    get_record_stream_type : UInt64
    get_record_elementary_pid : UInt64
    get_record_count_of_descriptors : UInt64
    get_record_descriptor_by_index : UInt64
    get_record_descriptor_by_tag : UInt64
    query_service_gateway_info : UInt64
    query_mpe_info : UInt64
    register_for_next_table : UInt64
    get_next_table : UInt64
    register_for_when_current : UInt64
    convert_next_to_current : UInt64
  end

  IPMT_GUID = "01f3b398-9527-4736-94db-5195878e97a8"
  IID_IPMT = LibC::GUID.new(0x1f3b398_u32, 0x9527_u16, 0x4736_u16, StaticArray[0x94_u8, 0xdb_u8, 0x51_u8, 0x95_u8, 0x87_u8, 0x8e_u8, 0x97_u8, 0xa8_u8])
  struct IPMT
    lpVtbl : IPMTVTbl*
  end

  struct ITSDTVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_version_number : UInt64
    get_count_of_table_descriptors : UInt64
    get_table_descriptor_by_index : UInt64
    get_table_descriptor_by_tag : UInt64
    register_for_next_table : UInt64
    get_next_table : UInt64
    register_for_when_current : UInt64
    convert_next_to_current : UInt64
  end

  ITSDT_GUID = "d19bdb43-405b-4a7c-a791-c89110c33165"
  IID_ITSDT = LibC::GUID.new(0xd19bdb43_u32, 0x405b_u16, 0x4a7c_u16, StaticArray[0xa7_u8, 0x91_u8, 0xc8_u8, 0x91_u8, 0x10_u8, 0xc3_u8, 0x31_u8, 0x65_u8])
  struct ITSDT
    lpVtbl : ITSDTVTbl*
  end

  struct IPSITablesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_table : UInt64
  end

  IPSITables_GUID = "919f24c5-7b14-42ac-a4b0-2ae08daf00ac"
  IID_IPSITables = LibC::GUID.new(0x919f24c5_u32, 0x7b14_u16, 0x42ac_u16, StaticArray[0xa4_u8, 0xb0_u8, 0x2a_u8, 0xe0_u8, 0x8d_u8, 0xaf_u8, 0x0_u8, 0xac_u8])
  struct IPSITables
    lpVtbl : IPSITablesVTbl*
  end

  struct IAtscPsipParserVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_pat : UInt64
    get_cat : UInt64
    get_pmt : UInt64
    get_tsdt : UInt64
    get_mgt : UInt64
    get_vct : UInt64
    get_eit : UInt64
    get_ett : UInt64
    get_stt : UInt64
    get_eas : UInt64
  end

  IAtscPsipParser_GUID = "b2c98995-5eb2-4fb1-b406-f3e8e2026a9a"
  IID_IAtscPsipParser = LibC::GUID.new(0xb2c98995_u32, 0x5eb2_u16, 0x4fb1_u16, StaticArray[0xb4_u8, 0x6_u8, 0xf3_u8, 0xe8_u8, 0xe2_u8, 0x2_u8, 0x6a_u8, 0x9a_u8])
  struct IAtscPsipParser
    lpVtbl : IAtscPsipParserVTbl*
  end

  struct IATSC_MGTVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_version_number : UInt64
    get_protocol_version : UInt64
    get_count_of_records : UInt64
    get_record_type : UInt64
    get_record_type_pid : UInt64
    get_record_version_number : UInt64
    get_record_count_of_descriptors : UInt64
    get_record_descriptor_by_index : UInt64
    get_record_descriptor_by_tag : UInt64
    get_count_of_table_descriptors : UInt64
    get_table_descriptor_by_index : UInt64
    get_table_descriptor_by_tag : UInt64
  end

  IATSC_MGT_GUID = "8877dabd-c137-4073-97e3-779407a5d87a"
  IID_IATSC_MGT = LibC::GUID.new(0x8877dabd_u32, 0xc137_u16, 0x4073_u16, StaticArray[0x97_u8, 0xe3_u8, 0x77_u8, 0x94_u8, 0x7_u8, 0xa5_u8, 0xd8_u8, 0x7a_u8])
  struct IATSC_MGT
    lpVtbl : IATSC_MGTVTbl*
  end

  struct IATSC_VCTVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_version_number : UInt64
    get_transport_stream_id : UInt64
    get_protocol_version : UInt64
    get_count_of_records : UInt64
    get_record_name : UInt64
    get_record_major_channel_number : UInt64
    get_record_minor_channel_number : UInt64
    get_record_modulation_mode : UInt64
    get_record_carrier_frequency : UInt64
    get_record_transport_stream_id : UInt64
    get_record_program_number : UInt64
    get_record_etm_location : UInt64
    get_record_is_access_controlled_bit_set : UInt64
    get_record_is_hidden_bit_set : UInt64
    get_record_is_path_select_bit_set : UInt64
    get_record_is_out_of_band_bit_set : UInt64
    get_record_is_hide_guide_bit_set : UInt64
    get_record_service_type : UInt64
    get_record_source_id : UInt64
    get_record_count_of_descriptors : UInt64
    get_record_descriptor_by_index : UInt64
    get_record_descriptor_by_tag : UInt64
    get_count_of_table_descriptors : UInt64
    get_table_descriptor_by_index : UInt64
    get_table_descriptor_by_tag : UInt64
  end

  IATSC_VCT_GUID = "26879a18-32f9-46c6-91f0-fb6479270e8c"
  IID_IATSC_VCT = LibC::GUID.new(0x26879a18_u32, 0x32f9_u16, 0x46c6_u16, StaticArray[0x91_u8, 0xf0_u8, 0xfb_u8, 0x64_u8, 0x79_u8, 0x27_u8, 0xe_u8, 0x8c_u8])
  struct IATSC_VCT
    lpVtbl : IATSC_VCTVTbl*
  end

  struct IATSC_EITVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_version_number : UInt64
    get_source_id : UInt64
    get_protocol_version : UInt64
    get_count_of_records : UInt64
    get_record_event_id : UInt64
    get_record_start_time : UInt64
    get_record_etm_location : UInt64
    get_record_duration : UInt64
    get_record_title_text : UInt64
    get_record_count_of_descriptors : UInt64
    get_record_descriptor_by_index : UInt64
    get_record_descriptor_by_tag : UInt64
  end

  IATSC_EIT_GUID = "d7c212d7-76a2-4b4b-aa56-846879a80096"
  IID_IATSC_EIT = LibC::GUID.new(0xd7c212d7_u32, 0x76a2_u16, 0x4b4b_u16, StaticArray[0xaa_u8, 0x56_u8, 0x84_u8, 0x68_u8, 0x79_u8, 0xa8_u8, 0x0_u8, 0x96_u8])
  struct IATSC_EIT
    lpVtbl : IATSC_EITVTbl*
  end

  struct IATSC_ETTVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_version_number : UInt64
    get_protocol_version : UInt64
    get_etm_id : UInt64
    get_extended_message_text : UInt64
  end

  IATSC_ETT_GUID = "5a142cc9-b8cf-4a86-a040-e9cadf3ef3e7"
  IID_IATSC_ETT = LibC::GUID.new(0x5a142cc9_u32, 0xb8cf_u16, 0x4a86_u16, StaticArray[0xa0_u8, 0x40_u8, 0xe9_u8, 0xca_u8, 0xdf_u8, 0x3e_u8, 0xf3_u8, 0xe7_u8])
  struct IATSC_ETT
    lpVtbl : IATSC_ETTVTbl*
  end

  struct IATSC_STTVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_protocol_version : UInt64
    get_system_time : UInt64
    get_gps_utc_offset : UInt64
    get_daylight_savings : UInt64
    get_count_of_table_descriptors : UInt64
    get_table_descriptor_by_index : UInt64
    get_table_descriptor_by_tag : UInt64
  end

  IATSC_STT_GUID = "6bf42423-217d-4d6f-81e1-3a7b360ec896"
  IID_IATSC_STT = LibC::GUID.new(0x6bf42423_u32, 0x217d_u16, 0x4d6f_u16, StaticArray[0x81_u8, 0xe1_u8, 0x3a_u8, 0x7b_u8, 0x36_u8, 0xe_u8, 0xc8_u8, 0x96_u8])
  struct IATSC_STT
    lpVtbl : IATSC_STTVTbl*
  end

  struct ISCTE_EASVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_version_number : UInt64
    get_sequency_number : UInt64
    get_protocol_version : UInt64
    get_eas_event_id : UInt64
    get_originator_code : UInt64
    get_eas_event_code_len : UInt64
    get_eas_event_code : UInt64
    get_raw_nature_of_activation_text_len : UInt64
    get_raw_nature_of_activation_text : UInt64
    get_nature_of_activation_text : UInt64
    get_time_remaining : UInt64
    get_start_time : UInt64
    get_duration : UInt64
    get_alert_priority : UInt64
    get_details_oob_source_id : UInt64
    get_details_major : UInt64
    get_details_minor : UInt64
    get_details_audio_oob_source_id : UInt64
    get_alert_text : UInt64
    get_raw_alert_text_len : UInt64
    get_raw_alert_text : UInt64
    get_location_count : UInt64
    get_location_codes : UInt64
    get_exception_count : UInt64
    get_exception_service : UInt64
    get_count_of_table_descriptors : UInt64
    get_table_descriptor_by_index : UInt64
    get_table_descriptor_by_tag : UInt64
  end

  ISCTE_EAS_GUID = "1ff544d6-161d-4fae-9faa-4f9f492ae999"
  IID_ISCTE_EAS = LibC::GUID.new(0x1ff544d6_u32, 0x161d_u16, 0x4fae_u16, StaticArray[0x9f_u8, 0xaa_u8, 0x4f_u8, 0x9f_u8, 0x49_u8, 0x2a_u8, 0xe9_u8, 0x99_u8])
  struct ISCTE_EAS
    lpVtbl : ISCTE_EASVTbl*
  end

  struct IAtscContentAdvisoryDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_rating_region_count : UInt64
    get_record_rating_region : UInt64
    get_record_rated_dimensions : UInt64
    get_record_rating_dimension : UInt64
    get_record_rating_value : UInt64
    get_record_rating_description_text : UInt64
  end

  IAtscContentAdvisoryDescriptor_GUID = "ff76e60c-0283-43ea-ba32-b422238547ee"
  IID_IAtscContentAdvisoryDescriptor = LibC::GUID.new(0xff76e60c_u32, 0x283_u16, 0x43ea_u16, StaticArray[0xba_u8, 0x32_u8, 0xb4_u8, 0x22_u8, 0x23_u8, 0x85_u8, 0x47_u8, 0xee_u8])
  struct IAtscContentAdvisoryDescriptor
    lpVtbl : IAtscContentAdvisoryDescriptorVTbl*
  end

  struct ICaptionServiceDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_number_of_services : UInt64
    get_language_code : UInt64
    get_caption_service_number : UInt64
    get_cc_type : UInt64
    get_easy_reader : UInt64
    get_wide_aspect_ratio : UInt64
  end

  ICaptionServiceDescriptor_GUID = "40834007-6834-46f0-bd45-d5f6a6be258c"
  IID_ICaptionServiceDescriptor = LibC::GUID.new(0x40834007_u32, 0x6834_u16, 0x46f0_u16, StaticArray[0xbd_u8, 0x45_u8, 0xd5_u8, 0xf6_u8, 0xa6_u8, 0xbe_u8, 0x25_u8, 0x8c_u8])
  struct ICaptionServiceDescriptor
    lpVtbl : ICaptionServiceDescriptorVTbl*
  end

  struct IServiceLocationDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_pcr_pid : UInt64
    get_number_of_elements : UInt64
    get_element_stream_type : UInt64
    get_element_pid : UInt64
    get_element_language_code : UInt64
  end

  IServiceLocationDescriptor_GUID = "58c3c827-9d91-4215-bff3-820a49f0904c"
  IID_IServiceLocationDescriptor = LibC::GUID.new(0x58c3c827_u32, 0x9d91_u16, 0x4215_u16, StaticArray[0xbf_u8, 0xf3_u8, 0x82_u8, 0xa_u8, 0x49_u8, 0xf0_u8, 0x90_u8, 0x4c_u8])
  struct IServiceLocationDescriptor
    lpVtbl : IServiceLocationDescriptorVTbl*
  end

  struct IAttributeSetVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_attrib : UInt64
  end

  IAttributeSet_GUID = "583ec3cc-4960-4857-982b-41a33ea0a006"
  IID_IAttributeSet = LibC::GUID.new(0x583ec3cc_u32, 0x4960_u16, 0x4857_u16, StaticArray[0x98_u8, 0x2b_u8, 0x41_u8, 0xa3_u8, 0x3e_u8, 0xa0_u8, 0xa0_u8, 0x6_u8])
  struct IAttributeSet
    lpVtbl : IAttributeSetVTbl*
  end

  struct IAttributeGetVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_count : UInt64
    get_attrib_indexed : UInt64
    get_attrib : UInt64
  end

  IAttributeGet_GUID = "52dbd1ec-e48f-4528-9232-f442a68f0ae1"
  IID_IAttributeGet = LibC::GUID.new(0x52dbd1ec_u32, 0xe48f_u16, 0x4528_u16, StaticArray[0x92_u8, 0x32_u8, 0xf4_u8, 0x42_u8, 0xa6_u8, 0x8f_u8, 0xa_u8, 0xe1_u8])
  struct IAttributeGet
    lpVtbl : IAttributeGetVTbl*
  end

  struct IDvbSiParserVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_pat : UInt64
    get_cat : UInt64
    get_pmt : UInt64
    get_tsdt : UInt64
    get_nit : UInt64
    get_sdt : UInt64
    get_eit : UInt64
    get_bat : UInt64
    get_rst : UInt64
    get_st : UInt64
    get_tdt : UInt64
    get_tot : UInt64
    get_dit : UInt64
    get_sit : UInt64
  end

  IDvbSiParser_GUID = "b758a7bd-14dc-449d-b828-35909acb3b1e"
  IID_IDvbSiParser = LibC::GUID.new(0xb758a7bd_u32, 0x14dc_u16, 0x449d_u16, StaticArray[0xb8_u8, 0x28_u8, 0x35_u8, 0x90_u8, 0x9a_u8, 0xcb_u8, 0x3b_u8, 0x1e_u8])
  struct IDvbSiParser
    lpVtbl : IDvbSiParserVTbl*
  end

  struct IDvbSiParser2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_pat : UInt64
    get_cat : UInt64
    get_pmt : UInt64
    get_tsdt : UInt64
    get_nit : UInt64
    get_sdt : UInt64
    get_eit : UInt64
    get_bat : UInt64
    get_rst : UInt64
    get_st : UInt64
    get_tdt : UInt64
    get_tot : UInt64
    get_dit : UInt64
    get_sit : UInt64
    get_eit2 : UInt64
  end

  IDvbSiParser2_GUID = "0ac5525f-f816-42f4-93ba-4c0f32f46e54"
  IID_IDvbSiParser2 = LibC::GUID.new(0xac5525f_u32, 0xf816_u16, 0x42f4_u16, StaticArray[0x93_u8, 0xba_u8, 0x4c_u8, 0xf_u8, 0x32_u8, 0xf4_u8, 0x6e_u8, 0x54_u8])
  struct IDvbSiParser2
    lpVtbl : IDvbSiParser2VTbl*
  end

  struct IIsdbSiParser2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_pat : UInt64
    get_cat : UInt64
    get_pmt : UInt64
    get_tsdt : UInt64
    get_nit : UInt64
    get_sdt : UInt64
    get_eit : UInt64
    get_bat : UInt64
    get_rst : UInt64
    get_st : UInt64
    get_tdt : UInt64
    get_tot : UInt64
    get_dit : UInt64
    get_sit : UInt64
    get_eit2 : UInt64
    get_sdt2 : UInt64
    get_bit : UInt64
    get_nbit : UInt64
    get_ldt : UInt64
    get_sdtt : UInt64
    get_cdt : UInt64
    get_emm : UInt64
  end

  IIsdbSiParser2_GUID = "900e4bb7-18cd-453f-98be-3be6aa211772"
  IID_IIsdbSiParser2 = LibC::GUID.new(0x900e4bb7_u32, 0x18cd_u16, 0x453f_u16, StaticArray[0x98_u8, 0xbe_u8, 0x3b_u8, 0xe6_u8, 0xaa_u8, 0x21_u8, 0x17_u8, 0x72_u8])
  struct IIsdbSiParser2
    lpVtbl : IIsdbSiParser2VTbl*
  end

  struct IDVB_NITVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_version_number : UInt64
    get_network_id : UInt64
    get_count_of_table_descriptors : UInt64
    get_table_descriptor_by_index : UInt64
    get_table_descriptor_by_tag : UInt64
    get_count_of_records : UInt64
    get_record_transport_stream_id : UInt64
    get_record_original_network_id : UInt64
    get_record_count_of_descriptors : UInt64
    get_record_descriptor_by_index : UInt64
    get_record_descriptor_by_tag : UInt64
    register_for_next_table : UInt64
    get_next_table : UInt64
    register_for_when_current : UInt64
    convert_next_to_current : UInt64
    get_version_hash : UInt64
  end

  IDVB_NIT_GUID = "c64935f4-29e4-4e22-911a-63f7f55cb097"
  IID_IDVB_NIT = LibC::GUID.new(0xc64935f4_u32, 0x29e4_u16, 0x4e22_u16, StaticArray[0x91_u8, 0x1a_u8, 0x63_u8, 0xf7_u8, 0xf5_u8, 0x5c_u8, 0xb0_u8, 0x97_u8])
  struct IDVB_NIT
    lpVtbl : IDVB_NITVTbl*
  end

  struct IDVB_SDTVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_version_number : UInt64
    get_transport_stream_id : UInt64
    get_original_network_id : UInt64
    get_count_of_records : UInt64
    get_record_service_id : UInt64
    get_record_eit_schedule_flag : UInt64
    get_record_eit_present_following_flag : UInt64
    get_record_running_status : UInt64
    get_record_free_ca_mode : UInt64
    get_record_count_of_descriptors : UInt64
    get_record_descriptor_by_index : UInt64
    get_record_descriptor_by_tag : UInt64
    register_for_next_table : UInt64
    get_next_table : UInt64
    register_for_when_current : UInt64
    convert_next_to_current : UInt64
    get_version_hash : UInt64
  end

  IDVB_SDT_GUID = "02cad8d3-fe43-48e2-90bd-450ed9a8a5fd"
  IID_IDVB_SDT = LibC::GUID.new(0x2cad8d3_u32, 0xfe43_u16, 0x48e2_u16, StaticArray[0x90_u8, 0xbd_u8, 0x45_u8, 0xe_u8, 0xd9_u8, 0xa8_u8, 0xa5_u8, 0xfd_u8])
  struct IDVB_SDT
    lpVtbl : IDVB_SDTVTbl*
  end

  struct IISDB_SDTVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_version_number : UInt64
    get_transport_stream_id : UInt64
    get_original_network_id : UInt64
    get_count_of_records : UInt64
    get_record_service_id : UInt64
    get_record_eit_schedule_flag : UInt64
    get_record_eit_present_following_flag : UInt64
    get_record_running_status : UInt64
    get_record_free_ca_mode : UInt64
    get_record_count_of_descriptors : UInt64
    get_record_descriptor_by_index : UInt64
    get_record_descriptor_by_tag : UInt64
    register_for_next_table : UInt64
    get_next_table : UInt64
    register_for_when_current : UInt64
    convert_next_to_current : UInt64
    get_version_hash : UInt64
    get_record_eit_user_defined_flags : UInt64
  end

  IISDB_SDT_GUID = "3f3dc9a2-bb32-4fb9-ae9e-d856848927a3"
  IID_IISDB_SDT = LibC::GUID.new(0x3f3dc9a2_u32, 0xbb32_u16, 0x4fb9_u16, StaticArray[0xae_u8, 0x9e_u8, 0xd8_u8, 0x56_u8, 0x84_u8, 0x89_u8, 0x27_u8, 0xa3_u8])
  struct IISDB_SDT
    lpVtbl : IISDB_SDTVTbl*
  end

  struct IDVB_EITVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_version_number : UInt64
    get_service_id : UInt64
    get_transport_stream_id : UInt64
    get_original_network_id : UInt64
    get_segment_last_section_number : UInt64
    get_last_table_id : UInt64
    get_count_of_records : UInt64
    get_record_event_id : UInt64
    get_record_start_time : UInt64
    get_record_duration : UInt64
    get_record_running_status : UInt64
    get_record_free_ca_mode : UInt64
    get_record_count_of_descriptors : UInt64
    get_record_descriptor_by_index : UInt64
    get_record_descriptor_by_tag : UInt64
    register_for_next_table : UInt64
    get_next_table : UInt64
    register_for_when_current : UInt64
    convert_next_to_current : UInt64
    get_version_hash : UInt64
  end

  IDVB_EIT_GUID = "442db029-02cb-4495-8b92-1c13375bce99"
  IID_IDVB_EIT = LibC::GUID.new(0x442db029_u32, 0x2cb_u16, 0x4495_u16, StaticArray[0x8b_u8, 0x92_u8, 0x1c_u8, 0x13_u8, 0x37_u8, 0x5b_u8, 0xce_u8, 0x99_u8])
  struct IDVB_EIT
    lpVtbl : IDVB_EITVTbl*
  end

  struct IDVB_EIT2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_version_number : UInt64
    get_service_id : UInt64
    get_transport_stream_id : UInt64
    get_original_network_id : UInt64
    get_segment_last_section_number : UInt64
    get_last_table_id : UInt64
    get_count_of_records : UInt64
    get_record_event_id : UInt64
    get_record_start_time : UInt64
    get_record_duration : UInt64
    get_record_running_status : UInt64
    get_record_free_ca_mode : UInt64
    get_record_count_of_descriptors : UInt64
    get_record_descriptor_by_index : UInt64
    get_record_descriptor_by_tag : UInt64
    register_for_next_table : UInt64
    get_next_table : UInt64
    register_for_when_current : UInt64
    convert_next_to_current : UInt64
    get_version_hash : UInt64
    get_segment_info : UInt64
    get_record_section : UInt64
  end

  IDVB_EIT2_GUID = "61a389e0-9b9e-4ba0-aeea-5ddd159820ea"
  IID_IDVB_EIT2 = LibC::GUID.new(0x61a389e0_u32, 0x9b9e_u16, 0x4ba0_u16, StaticArray[0xae_u8, 0xea_u8, 0x5d_u8, 0xdd_u8, 0x15_u8, 0x98_u8, 0x20_u8, 0xea_u8])
  struct IDVB_EIT2
    lpVtbl : IDVB_EIT2VTbl*
  end

  struct IDVB_BATVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_version_number : UInt64
    get_bouquet_id : UInt64
    get_count_of_table_descriptors : UInt64
    get_table_descriptor_by_index : UInt64
    get_table_descriptor_by_tag : UInt64
    get_count_of_records : UInt64
    get_record_transport_stream_id : UInt64
    get_record_original_network_id : UInt64
    get_record_count_of_descriptors : UInt64
    get_record_descriptor_by_index : UInt64
    get_record_descriptor_by_tag : UInt64
    register_for_next_table : UInt64
    get_next_table : UInt64
    register_for_when_current : UInt64
    convert_next_to_current : UInt64
  end

  IDVB_BAT_GUID = "ece9bb0c-43b6-4558-a0ec-1812c34cd6ca"
  IID_IDVB_BAT = LibC::GUID.new(0xece9bb0c_u32, 0x43b6_u16, 0x4558_u16, StaticArray[0xa0_u8, 0xec_u8, 0x18_u8, 0x12_u8, 0xc3_u8, 0x4c_u8, 0xd6_u8, 0xca_u8])
  struct IDVB_BAT
    lpVtbl : IDVB_BATVTbl*
  end

  struct IDVB_RSTVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_count_of_records : UInt64
    get_record_transport_stream_id : UInt64
    get_record_original_network_id : UInt64
    get_record_service_id : UInt64
    get_record_event_id : UInt64
    get_record_running_status : UInt64
  end

  IDVB_RST_GUID = "f47dcd04-1e23-4fb7-9f96-b40eead10b2b"
  IID_IDVB_RST = LibC::GUID.new(0xf47dcd04_u32, 0x1e23_u16, 0x4fb7_u16, StaticArray[0x9f_u8, 0x96_u8, 0xb4_u8, 0xe_u8, 0xea_u8, 0xd1_u8, 0xb_u8, 0x2b_u8])
  struct IDVB_RST
    lpVtbl : IDVB_RSTVTbl*
  end

  struct IDVB_STVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_data_length : UInt64
    get_data : UInt64
  end

  IDVB_ST_GUID = "4d5b9f23-2a02-45de-bcda-5d5dbfbfbe62"
  IID_IDVB_ST = LibC::GUID.new(0x4d5b9f23_u32, 0x2a02_u16, 0x45de_u16, StaticArray[0xbc_u8, 0xda_u8, 0x5d_u8, 0x5d_u8, 0xbf_u8, 0xbf_u8, 0xbe_u8, 0x62_u8])
  struct IDVB_ST
    lpVtbl : IDVB_STVTbl*
  end

  struct IDVB_TDTVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_utc_time : UInt64
  end

  IDVB_TDT_GUID = "0780dc7d-d55c-4aef-97e6-6b75906e2796"
  IID_IDVB_TDT = LibC::GUID.new(0x780dc7d_u32, 0xd55c_u16, 0x4aef_u16, StaticArray[0x97_u8, 0xe6_u8, 0x6b_u8, 0x75_u8, 0x90_u8, 0x6e_u8, 0x27_u8, 0x96_u8])
  struct IDVB_TDT
    lpVtbl : IDVB_TDTVTbl*
  end

  struct IDVB_TOTVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_utc_time : UInt64
    get_count_of_table_descriptors : UInt64
    get_table_descriptor_by_index : UInt64
    get_table_descriptor_by_tag : UInt64
  end

  IDVB_TOT_GUID = "83295d6a-faba-4ee1-9b15-8067696910ae"
  IID_IDVB_TOT = LibC::GUID.new(0x83295d6a_u32, 0xfaba_u16, 0x4ee1_u16, StaticArray[0x9b_u8, 0x15_u8, 0x80_u8, 0x67_u8, 0x69_u8, 0x69_u8, 0x10_u8, 0xae_u8])
  struct IDVB_TOT
    lpVtbl : IDVB_TOTVTbl*
  end

  struct IDVB_DITVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_transition_flag : UInt64
  end

  IDVB_DIT_GUID = "91bffdf9-9432-410f-86ef-1c228ed0ad70"
  IID_IDVB_DIT = LibC::GUID.new(0x91bffdf9_u32, 0x9432_u16, 0x410f_u16, StaticArray[0x86_u8, 0xef_u8, 0x1c_u8, 0x22_u8, 0x8e_u8, 0xd0_u8, 0xad_u8, 0x70_u8])
  struct IDVB_DIT
    lpVtbl : IDVB_DITVTbl*
  end

  struct IDVB_SITVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_version_number : UInt64
    get_count_of_table_descriptors : UInt64
    get_table_descriptor_by_index : UInt64
    get_table_descriptor_by_tag : UInt64
    get_count_of_records : UInt64
    get_record_service_id : UInt64
    get_record_running_status : UInt64
    get_record_count_of_descriptors : UInt64
    get_record_descriptor_by_index : UInt64
    get_record_descriptor_by_tag : UInt64
    register_for_next_table : UInt64
    get_next_table : UInt64
    register_for_when_current : UInt64
    convert_next_to_current : UInt64
  end

  IDVB_SIT_GUID = "68cdce53-8bea-45c2-9d9d-acf575a089b5"
  IID_IDVB_SIT = LibC::GUID.new(0x68cdce53_u32, 0x8bea_u16, 0x45c2_u16, StaticArray[0x9d_u8, 0x9d_u8, 0xac_u8, 0xf5_u8, 0x75_u8, 0xa0_u8, 0x89_u8, 0xb5_u8])
  struct IDVB_SIT
    lpVtbl : IDVB_SITVTbl*
  end

  struct IISDB_BITVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_version_number : UInt64
    get_original_network_id : UInt64
    get_broadcast_view_propriety : UInt64
    get_count_of_table_descriptors : UInt64
    get_table_descriptor_by_index : UInt64
    get_table_descriptor_by_tag : UInt64
    get_count_of_records : UInt64
    get_record_broadcaster_id : UInt64
    get_record_count_of_descriptors : UInt64
    get_record_descriptor_by_index : UInt64
    get_record_descriptor_by_tag : UInt64
    get_version_hash : UInt64
  end

  IISDB_BIT_GUID = "537cd71e-0e46-4173-9001-ba043f3e49e2"
  IID_IISDB_BIT = LibC::GUID.new(0x537cd71e_u32, 0xe46_u16, 0x4173_u16, StaticArray[0x90_u8, 0x1_u8, 0xba_u8, 0x4_u8, 0x3f_u8, 0x3e_u8, 0x49_u8, 0xe2_u8])
  struct IISDB_BIT
    lpVtbl : IISDB_BITVTbl*
  end

  struct IISDB_NBITVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_version_number : UInt64
    get_original_network_id : UInt64
    get_count_of_records : UInt64
    get_record_information_id : UInt64
    get_record_information_type : UInt64
    get_record_description_body_location : UInt64
    get_record_message_section_number : UInt64
    get_record_user_defined : UInt64
    get_record_number_of_keys : UInt64
    get_record_keys : UInt64
    get_record_count_of_descriptors : UInt64
    get_record_descriptor_by_index : UInt64
    get_record_descriptor_by_tag : UInt64
    get_version_hash : UInt64
  end

  IISDB_NBIT_GUID = "1b1863ef-08f1-40b7-a559-3b1eff8cafa6"
  IID_IISDB_NBIT = LibC::GUID.new(0x1b1863ef_u32, 0x8f1_u16, 0x40b7_u16, StaticArray[0xa5_u8, 0x59_u8, 0x3b_u8, 0x1e_u8, 0xff_u8, 0x8c_u8, 0xaf_u8, 0xa6_u8])
  struct IISDB_NBIT
    lpVtbl : IISDB_NBITVTbl*
  end

  struct IISDB_LDTVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_version_number : UInt64
    get_original_service_id : UInt64
    get_transport_stream_id : UInt64
    get_original_network_id : UInt64
    get_count_of_records : UInt64
    get_record_description_id : UInt64
    get_record_count_of_descriptors : UInt64
    get_record_descriptor_by_index : UInt64
    get_record_descriptor_by_tag : UInt64
    get_version_hash : UInt64
  end

  IISDB_LDT_GUID = "141a546b-02ff-4fb9-a3a3-2f074b74a9a9"
  IID_IISDB_LDT = LibC::GUID.new(0x141a546b_u32, 0x2ff_u16, 0x4fb9_u16, StaticArray[0xa3_u8, 0xa3_u8, 0x2f_u8, 0x7_u8, 0x4b_u8, 0x74_u8, 0xa9_u8, 0xa9_u8])
  struct IISDB_LDT
    lpVtbl : IISDB_LDTVTbl*
  end

  struct IISDB_SDTTVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_version_number : UInt64
    get_table_id_ext : UInt64
    get_transport_stream_id : UInt64
    get_original_network_id : UInt64
    get_service_id : UInt64
    get_count_of_records : UInt64
    get_record_group : UInt64
    get_record_target_version : UInt64
    get_record_new_version : UInt64
    get_record_download_level : UInt64
    get_record_version_indicator : UInt64
    get_record_schedule_time_shift_information : UInt64
    get_record_count_of_schedules : UInt64
    get_record_start_time_by_index : UInt64
    get_record_duration_by_index : UInt64
    get_record_count_of_descriptors : UInt64
    get_record_descriptor_by_index : UInt64
    get_record_descriptor_by_tag : UInt64
    get_version_hash : UInt64
  end

  IISDB_SDTT_GUID = "ee60ef2d-813a-4dc7-bf92-ea13dac85313"
  IID_IISDB_SDTT = LibC::GUID.new(0xee60ef2d_u32, 0x813a_u16, 0x4dc7_u16, StaticArray[0xbf_u8, 0x92_u8, 0xea_u8, 0x13_u8, 0xda_u8, 0xc8_u8, 0x53_u8, 0x13_u8])
  struct IISDB_SDTT
    lpVtbl : IISDB_SDTTVTbl*
  end

  struct IISDB_CDTVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_version_number : UInt64
    get_download_data_id : UInt64
    get_section_number : UInt64
    get_original_network_id : UInt64
    get_data_type : UInt64
    get_count_of_table_descriptors : UInt64
    get_table_descriptor_by_index : UInt64
    get_table_descriptor_by_tag : UInt64
    get_size_of_data_module : UInt64
    get_data_module : UInt64
    get_version_hash : UInt64
  end

  IISDB_CDT_GUID = "25fa92c2-8b80-4787-a841-3a0e8f17984b"
  IID_IISDB_CDT = LibC::GUID.new(0x25fa92c2_u32, 0x8b80_u16, 0x4787_u16, StaticArray[0xa8_u8, 0x41_u8, 0x3a_u8, 0xe_u8, 0x8f_u8, 0x17_u8, 0x98_u8, 0x4b_u8])
  struct IISDB_CDT
    lpVtbl : IISDB_CDTVTbl*
  end

  struct IISDB_EMMVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_version_number : UInt64
    get_table_id_extension : UInt64
    get_data_bytes : UInt64
    get_shared_emm_message : UInt64
    get_individual_emm_message : UInt64
    get_version_hash : UInt64
  end

  IISDB_EMM_GUID = "0edb556d-43ad-4938-9668-321b2ffecfd3"
  IID_IISDB_EMM = LibC::GUID.new(0xedb556d_u32, 0x43ad_u16, 0x4938_u16, StaticArray[0x96_u8, 0x68_u8, 0x32_u8, 0x1b_u8, 0x2f_u8, 0xfe_u8, 0xcf_u8, 0xd3_u8])
  struct IISDB_EMM
    lpVtbl : IISDB_EMMVTbl*
  end

  struct IDvbServiceAttributeDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_count_of_records : UInt64
    get_record_service_id : UInt64
    get_record_numeric_selection_flag : UInt64
    get_record_visible_service_flag : UInt64
  end

  IDvbServiceAttributeDescriptor_GUID = "0f37bd92-d6a1-4854-b950-3a969d27f30e"
  IID_IDvbServiceAttributeDescriptor = LibC::GUID.new(0xf37bd92_u32, 0xd6a1_u16, 0x4854_u16, StaticArray[0xb9_u8, 0x50_u8, 0x3a_u8, 0x96_u8, 0x9d_u8, 0x27_u8, 0xf3_u8, 0xe_u8])
  struct IDvbServiceAttributeDescriptor
    lpVtbl : IDvbServiceAttributeDescriptorVTbl*
  end

  struct IDvbContentIdentifierDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_count_of_records : UInt64
    get_record_crid : UInt64
  end

  IDvbContentIdentifierDescriptor_GUID = "05e0c1ea-f661-4053-9fbf-d93b28359838"
  IID_IDvbContentIdentifierDescriptor = LibC::GUID.new(0x5e0c1ea_u32, 0xf661_u16, 0x4053_u16, StaticArray[0x9f_u8, 0xbf_u8, 0xd9_u8, 0x3b_u8, 0x28_u8, 0x35_u8, 0x98_u8, 0x38_u8])
  struct IDvbContentIdentifierDescriptor
    lpVtbl : IDvbContentIdentifierDescriptorVTbl*
  end

  struct IDvbDefaultAuthorityDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_default_authority : UInt64
  end

  IDvbDefaultAuthorityDescriptor_GUID = "05ec24d1-3a31-44e7-b408-67c60a352276"
  IID_IDvbDefaultAuthorityDescriptor = LibC::GUID.new(0x5ec24d1_u32, 0x3a31_u16, 0x44e7_u16, StaticArray[0xb4_u8, 0x8_u8, 0x67_u8, 0xc6_u8, 0xa_u8, 0x35_u8, 0x22_u8, 0x76_u8])
  struct IDvbDefaultAuthorityDescriptor
    lpVtbl : IDvbDefaultAuthorityDescriptorVTbl*
  end

  struct IDvbSatelliteDeliverySystemDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_frequency : UInt64
    get_orbital_position : UInt64
    get_west_east_flag : UInt64
    get_polarization : UInt64
    get_modulation : UInt64
    get_symbol_rate : UInt64
    get_fec_inner : UInt64
  end

  IDvbSatelliteDeliverySystemDescriptor_GUID = "02f2225a-805b-4ec5-a9a6-f9b5913cd470"
  IID_IDvbSatelliteDeliverySystemDescriptor = LibC::GUID.new(0x2f2225a_u32, 0x805b_u16, 0x4ec5_u16, StaticArray[0xa9_u8, 0xa6_u8, 0xf9_u8, 0xb5_u8, 0x91_u8, 0x3c_u8, 0xd4_u8, 0x70_u8])
  struct IDvbSatelliteDeliverySystemDescriptor
    lpVtbl : IDvbSatelliteDeliverySystemDescriptorVTbl*
  end

  struct IDvbCableDeliverySystemDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_frequency : UInt64
    get_fec_outer : UInt64
    get_modulation : UInt64
    get_symbol_rate : UInt64
    get_fec_inner : UInt64
  end

  IDvbCableDeliverySystemDescriptor_GUID = "dfb98e36-9e1a-4862-9946-993a4e59017b"
  IID_IDvbCableDeliverySystemDescriptor = LibC::GUID.new(0xdfb98e36_u32, 0x9e1a_u16, 0x4862_u16, StaticArray[0x99_u8, 0x46_u8, 0x99_u8, 0x3a_u8, 0x4e_u8, 0x59_u8, 0x1_u8, 0x7b_u8])
  struct IDvbCableDeliverySystemDescriptor
    lpVtbl : IDvbCableDeliverySystemDescriptorVTbl*
  end

  struct IDvbTerrestrialDeliverySystemDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_centre_frequency : UInt64
    get_bandwidth : UInt64
    get_constellation : UInt64
    get_hierarchy_information : UInt64
    get_code_rate_hp_stream : UInt64
    get_code_rate_lp_stream : UInt64
    get_guard_interval : UInt64
    get_transmission_mode : UInt64
    get_other_frequency_flag : UInt64
  end

  IDvbTerrestrialDeliverySystemDescriptor_GUID = "ed7e1b91-d12e-420c-b41d-a49d84fe1823"
  IID_IDvbTerrestrialDeliverySystemDescriptor = LibC::GUID.new(0xed7e1b91_u32, 0xd12e_u16, 0x420c_u16, StaticArray[0xb4_u8, 0x1d_u8, 0xa4_u8, 0x9d_u8, 0x84_u8, 0xfe_u8, 0x18_u8, 0x23_u8])
  struct IDvbTerrestrialDeliverySystemDescriptor
    lpVtbl : IDvbTerrestrialDeliverySystemDescriptorVTbl*
  end

  struct IDvbTerrestrial2DeliverySystemDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_tag_extension : UInt64
    get_centre_frequency : UInt64
    get_plp_id : UInt64
    get_t2_system_id : UInt64
    get_multiple_input_mode : UInt64
    get_bandwidth : UInt64
    get_guard_interval : UInt64
    get_transmission_mode : UInt64
    get_cell_id : UInt64
    get_other_frequency_flag : UInt64
    get_tfs_flag : UInt64
  end

  IDvbTerrestrial2DeliverySystemDescriptor_GUID = "20ee9be9-cd57-49ab-8f6e-1d07aeb8e482"
  IID_IDvbTerrestrial2DeliverySystemDescriptor = LibC::GUID.new(0x20ee9be9_u32, 0xcd57_u16, 0x49ab_u16, StaticArray[0x8f_u8, 0x6e_u8, 0x1d_u8, 0x7_u8, 0xae_u8, 0xb8_u8, 0xe4_u8, 0x82_u8])
  struct IDvbTerrestrial2DeliverySystemDescriptor
    lpVtbl : IDvbTerrestrial2DeliverySystemDescriptorVTbl*
  end

  struct IDvbFrequencyListDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_coding_type : UInt64
    get_count_of_records : UInt64
    get_record_centre_frequency : UInt64
  end

  IDvbFrequencyListDescriptor_GUID = "1cadb613-e1dd-4512-afa8-bb7a007ef8b1"
  IID_IDvbFrequencyListDescriptor = LibC::GUID.new(0x1cadb613_u32, 0xe1dd_u16, 0x4512_u16, StaticArray[0xaf_u8, 0xa8_u8, 0xbb_u8, 0x7a_u8, 0x0_u8, 0x7e_u8, 0xf8_u8, 0xb1_u8])
  struct IDvbFrequencyListDescriptor
    lpVtbl : IDvbFrequencyListDescriptorVTbl*
  end

  struct IDvbPrivateDataSpecifierDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_private_data_specifier : UInt64
  end

  IDvbPrivateDataSpecifierDescriptor_GUID = "5660a019-e75a-4b82-9b4c-ed2256d165a2"
  IID_IDvbPrivateDataSpecifierDescriptor = LibC::GUID.new(0x5660a019_u32, 0xe75a_u16, 0x4b82_u16, StaticArray[0x9b_u8, 0x4c_u8, 0xed_u8, 0x22_u8, 0x56_u8, 0xd1_u8, 0x65_u8, 0xa2_u8])
  struct IDvbPrivateDataSpecifierDescriptor
    lpVtbl : IDvbPrivateDataSpecifierDescriptorVTbl*
  end

  struct IDvbLogicalChannelDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_count_of_records : UInt64
    get_record_service_id : UInt64
    get_record_logical_channel_number : UInt64
  end

  IDvbLogicalChannelDescriptor_GUID = "cf1edaff-3ffd-4cf7-8201-35756acbf85f"
  IID_IDvbLogicalChannelDescriptor = LibC::GUID.new(0xcf1edaff_u32, 0x3ffd_u16, 0x4cf7_u16, StaticArray[0x82_u8, 0x1_u8, 0x35_u8, 0x75_u8, 0x6a_u8, 0xcb_u8, 0xf8_u8, 0x5f_u8])
  struct IDvbLogicalChannelDescriptor
    lpVtbl : IDvbLogicalChannelDescriptorVTbl*
  end

  struct IDvbLogicalChannelDescriptor2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_count_of_records : UInt64
    get_record_service_id : UInt64
    get_record_logical_channel_number : UInt64
    get_record_logical_channel_and_visibility : UInt64
  end

  IDvbLogicalChannelDescriptor2_GUID = "43aca974-4be8-4b98-bc17-9eafd788b1d7"
  IID_IDvbLogicalChannelDescriptor2 = LibC::GUID.new(0x43aca974_u32, 0x4be8_u16, 0x4b98_u16, StaticArray[0xbc_u8, 0x17_u8, 0x9e_u8, 0xaf_u8, 0xd7_u8, 0x88_u8, 0xb1_u8, 0xd7_u8])
  struct IDvbLogicalChannelDescriptor2
    lpVtbl : IDvbLogicalChannelDescriptor2VTbl*
  end

  struct IDvbLogicalChannel2DescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_count_of_records : UInt64
    get_record_service_id : UInt64
    get_record_logical_channel_number : UInt64
    get_record_logical_channel_and_visibility : UInt64
    get_count_of_lists : UInt64
    get_list_id : UInt64
    get_list_name_w : UInt64
    get_list_country_code : UInt64
    get_list_count_of_records : UInt64
    get_list_record_service_id : UInt64
    get_list_record_logical_channel_number : UInt64
    get_list_record_logical_channel_and_visibility : UInt64
  end

  IDvbLogicalChannel2Descriptor_GUID = "f69c3747-8a30-4980-998c-01fe7f0ba35a"
  IID_IDvbLogicalChannel2Descriptor = LibC::GUID.new(0xf69c3747_u32, 0x8a30_u16, 0x4980_u16, StaticArray[0x99_u8, 0x8c_u8, 0x1_u8, 0xfe_u8, 0x7f_u8, 0xb_u8, 0xa3_u8, 0x5a_u8])
  struct IDvbLogicalChannel2Descriptor
    lpVtbl : IDvbLogicalChannel2DescriptorVTbl*
  end

  struct IDvbHDSimulcastLogicalChannelDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_count_of_records : UInt64
    get_record_service_id : UInt64
    get_record_logical_channel_number : UInt64
    get_record_logical_channel_and_visibility : UInt64
  end

  IDvbHDSimulcastLogicalChannelDescriptor_GUID = "1ea8b738-a307-4680-9e26-d0a908c824f4"
  IID_IDvbHDSimulcastLogicalChannelDescriptor = LibC::GUID.new(0x1ea8b738_u32, 0xa307_u16, 0x4680_u16, StaticArray[0x9e_u8, 0x26_u8, 0xd0_u8, 0xa9_u8, 0x8_u8, 0xc8_u8, 0x24_u8, 0xf4_u8])
  struct IDvbHDSimulcastLogicalChannelDescriptor
    lpVtbl : IDvbHDSimulcastLogicalChannelDescriptorVTbl*
  end

  struct IDvbDataBroadcastIDDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_data_broadcast_id : UInt64
    get_id_selector_bytes : UInt64
  end

  IDvbDataBroadcastIDDescriptor_GUID = "5f26f518-65c8-4048-91f2-9290f59f7b90"
  IID_IDvbDataBroadcastIDDescriptor = LibC::GUID.new(0x5f26f518_u32, 0x65c8_u16, 0x4048_u16, StaticArray[0x91_u8, 0xf2_u8, 0x92_u8, 0x90_u8, 0xf5_u8, 0x9f_u8, 0x7b_u8, 0x90_u8])
  struct IDvbDataBroadcastIDDescriptor
    lpVtbl : IDvbDataBroadcastIDDescriptorVTbl*
  end

  struct IDvbDataBroadcastDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_data_broadcast_id : UInt64
    get_component_tag : UInt64
    get_selector_length : UInt64
    get_selector_bytes : UInt64
    get_lang_id : UInt64
    get_text_length : UInt64
    get_text : UInt64
  end

  IDvbDataBroadcastDescriptor_GUID = "d1ebc1d6-8b60-4c20-9caf-e59382e7c400"
  IID_IDvbDataBroadcastDescriptor = LibC::GUID.new(0xd1ebc1d6_u32, 0x8b60_u16, 0x4c20_u16, StaticArray[0x9c_u8, 0xaf_u8, 0xe5_u8, 0x93_u8, 0x82_u8, 0xe7_u8, 0xc4_u8, 0x0_u8])
  struct IDvbDataBroadcastDescriptor
    lpVtbl : IDvbDataBroadcastDescriptorVTbl*
  end

  struct IDvbLinkageDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_ts_id : UInt64
    get_on_id : UInt64
    get_service_id : UInt64
    get_linkage_type : UInt64
    get_private_data_length : UInt64
    get_private_data : UInt64
  end

  IDvbLinkageDescriptor_GUID = "1cdf8b31-994a-46fc-acfd-6a6be8934dd5"
  IID_IDvbLinkageDescriptor = LibC::GUID.new(0x1cdf8b31_u32, 0x994a_u16, 0x46fc_u16, StaticArray[0xac_u8, 0xfd_u8, 0x6a_u8, 0x6b_u8, 0xe8_u8, 0x93_u8, 0x4d_u8, 0xd5_u8])
  struct IDvbLinkageDescriptor
    lpVtbl : IDvbLinkageDescriptorVTbl*
  end

  struct IDvbTeletextDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_count_of_records : UInt64
    get_record_lang_id : UInt64
    get_record_teletext_type : UInt64
    get_record_magazine_number : UInt64
    get_record_page_number : UInt64
  end

  IDvbTeletextDescriptor_GUID = "9cd29d47-69c6-4f92-98a9-210af1b7303a"
  IID_IDvbTeletextDescriptor = LibC::GUID.new(0x9cd29d47_u32, 0x69c6_u16, 0x4f92_u16, StaticArray[0x98_u8, 0xa9_u8, 0x21_u8, 0xa_u8, 0xf1_u8, 0xb7_u8, 0x30_u8, 0x3a_u8])
  struct IDvbTeletextDescriptor
    lpVtbl : IDvbTeletextDescriptorVTbl*
  end

  struct IDvbSubtitlingDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_count_of_records : UInt64
    get_record_lang_id : UInt64
    get_record_subtitling_type : UInt64
    get_record_composition_page_id : UInt64
    get_record_ancillary_page_id : UInt64
  end

  IDvbSubtitlingDescriptor_GUID = "9b25fe1d-fa23-4e50-9784-6df8b26f8a49"
  IID_IDvbSubtitlingDescriptor = LibC::GUID.new(0x9b25fe1d_u32, 0xfa23_u16, 0x4e50_u16, StaticArray[0x97_u8, 0x84_u8, 0x6d_u8, 0xf8_u8, 0xb2_u8, 0x6f_u8, 0x8a_u8, 0x49_u8])
  struct IDvbSubtitlingDescriptor
    lpVtbl : IDvbSubtitlingDescriptorVTbl*
  end

  struct IDvbServiceDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_service_type : UInt64
    get_service_provider_name : UInt64
    get_service_provider_name_w : UInt64
    get_service_name : UInt64
    get_processed_service_name : UInt64
    get_service_name_emphasized : UInt64
  end

  IDvbServiceDescriptor_GUID = "f9c7fbcf-e2d6-464d-b32d-2ef526e49290"
  IID_IDvbServiceDescriptor = LibC::GUID.new(0xf9c7fbcf_u32, 0xe2d6_u16, 0x464d_u16, StaticArray[0xb3_u8, 0x2d_u8, 0x2e_u8, 0xf5_u8, 0x26_u8, 0xe4_u8, 0x92_u8, 0x90_u8])
  struct IDvbServiceDescriptor
    lpVtbl : IDvbServiceDescriptorVTbl*
  end

  struct IDvbServiceDescriptor2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_service_type : UInt64
    get_service_provider_name : UInt64
    get_service_provider_name_w : UInt64
    get_service_name : UInt64
    get_processed_service_name : UInt64
    get_service_name_emphasized : UInt64
    get_service_provider_name_w2 : UInt64
    get_service_name_w : UInt64
  end

  IDvbServiceDescriptor2_GUID = "d6c76506-85ab-487c-9b2b-36416511e4a2"
  IID_IDvbServiceDescriptor2 = LibC::GUID.new(0xd6c76506_u32, 0x85ab_u16, 0x487c_u16, StaticArray[0x9b_u8, 0x2b_u8, 0x36_u8, 0x41_u8, 0x65_u8, 0x11_u8, 0xe4_u8, 0xa2_u8])
  struct IDvbServiceDescriptor2
    lpVtbl : IDvbServiceDescriptor2VTbl*
  end

  struct IDvbServiceListDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_count_of_records : UInt64
    get_record_service_id : UInt64
    get_record_service_type : UInt64
  end

  IDvbServiceListDescriptor_GUID = "05db0d8f-6008-491a-acd3-7090952707d0"
  IID_IDvbServiceListDescriptor = LibC::GUID.new(0x5db0d8f_u32, 0x6008_u16, 0x491a_u16, StaticArray[0xac_u8, 0xd3_u8, 0x70_u8, 0x90_u8, 0x95_u8, 0x27_u8, 0x7_u8, 0xd0_u8])
  struct IDvbServiceListDescriptor
    lpVtbl : IDvbServiceListDescriptorVTbl*
  end

  struct IDvbMultilingualServiceNameDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_count_of_records : UInt64
    get_record_lang_id : UInt64
    get_record_service_provider_name_w : UInt64
    get_record_service_name_w : UInt64
  end

  IDvbMultilingualServiceNameDescriptor_GUID = "2d80433b-b32c-47ef-987f-e78ebb773e34"
  IID_IDvbMultilingualServiceNameDescriptor = LibC::GUID.new(0x2d80433b_u32, 0xb32c_u16, 0x47ef_u16, StaticArray[0x98_u8, 0x7f_u8, 0xe7_u8, 0x8e_u8, 0xbb_u8, 0x77_u8, 0x3e_u8, 0x34_u8])
  struct IDvbMultilingualServiceNameDescriptor
    lpVtbl : IDvbMultilingualServiceNameDescriptorVTbl*
  end

  struct IDvbNetworkNameDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_network_name : UInt64
    get_network_name_w : UInt64
  end

  IDvbNetworkNameDescriptor_GUID = "5b2a80cf-35b9-446c-b3e4-048b761dbc51"
  IID_IDvbNetworkNameDescriptor = LibC::GUID.new(0x5b2a80cf_u32, 0x35b9_u16, 0x446c_u16, StaticArray[0xb3_u8, 0xe4_u8, 0x4_u8, 0x8b_u8, 0x76_u8, 0x1d_u8, 0xbc_u8, 0x51_u8])
  struct IDvbNetworkNameDescriptor
    lpVtbl : IDvbNetworkNameDescriptorVTbl*
  end

  struct IDvbShortEventDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_language_code : UInt64
    get_event_name_w : UInt64
    get_text_w : UInt64
  end

  IDvbShortEventDescriptor_GUID = "b170be92-5b75-458e-9c6e-b0008231491a"
  IID_IDvbShortEventDescriptor = LibC::GUID.new(0xb170be92_u32, 0x5b75_u16, 0x458e_u16, StaticArray[0x9c_u8, 0x6e_u8, 0xb0_u8, 0x0_u8, 0x82_u8, 0x31_u8, 0x49_u8, 0x1a_u8])
  struct IDvbShortEventDescriptor
    lpVtbl : IDvbShortEventDescriptorVTbl*
  end

  struct IDvbExtendedEventDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_descriptor_number : UInt64
    get_last_descriptor_number : UInt64
    get_language_code : UInt64
    get_count_of_records : UInt64
    get_record_item_w : UInt64
    get_concatenated_item_w : UInt64
    get_text_w : UInt64
    get_concatenated_text_w : UInt64
    get_record_item_raw_bytes : UInt64
  end

  IDvbExtendedEventDescriptor_GUID = "c9b22eca-85f4-499f-b1db-efa93a91ee57"
  IID_IDvbExtendedEventDescriptor = LibC::GUID.new(0xc9b22eca_u32, 0x85f4_u16, 0x499f_u16, StaticArray[0xb1_u8, 0xdb_u8, 0xef_u8, 0xa9_u8, 0x3a_u8, 0x91_u8, 0xee_u8, 0x57_u8])
  struct IDvbExtendedEventDescriptor
    lpVtbl : IDvbExtendedEventDescriptorVTbl*
  end

  struct IDvbComponentDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_stream_content : UInt64
    get_component_type : UInt64
    get_component_tag : UInt64
    get_language_code : UInt64
    get_text_w : UInt64
  end

  IDvbComponentDescriptor_GUID = "91e405cf-80e7-457f-9096-1b9d1ce32141"
  IID_IDvbComponentDescriptor = LibC::GUID.new(0x91e405cf_u32, 0x80e7_u16, 0x457f_u16, StaticArray[0x90_u8, 0x96_u8, 0x1b_u8, 0x9d_u8, 0x1c_u8, 0xe3_u8, 0x21_u8, 0x41_u8])
  struct IDvbComponentDescriptor
    lpVtbl : IDvbComponentDescriptorVTbl*
  end

  struct IDvbContentDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_count_of_records : UInt64
    get_record_content_nibbles : UInt64
    get_record_user_nibbles : UInt64
  end

  IDvbContentDescriptor_GUID = "2e883881-a467-412a-9d63-6f2b6da05bf0"
  IID_IDvbContentDescriptor = LibC::GUID.new(0x2e883881_u32, 0xa467_u16, 0x412a_u16, StaticArray[0x9d_u8, 0x63_u8, 0x6f_u8, 0x2b_u8, 0x6d_u8, 0xa0_u8, 0x5b_u8, 0xf0_u8])
  struct IDvbContentDescriptor
    lpVtbl : IDvbContentDescriptorVTbl*
  end

  struct IDvbParentalRatingDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_count_of_records : UInt64
    get_record_rating : UInt64
  end

  IDvbParentalRatingDescriptor_GUID = "3ad9dde1-fb1b-4186-937f-22e6b5a72a10"
  IID_IDvbParentalRatingDescriptor = LibC::GUID.new(0x3ad9dde1_u32, 0xfb1b_u16, 0x4186_u16, StaticArray[0x93_u8, 0x7f_u8, 0x22_u8, 0xe6_u8, 0xb5_u8, 0xa7_u8, 0x2a_u8, 0x10_u8])
  struct IDvbParentalRatingDescriptor
    lpVtbl : IDvbParentalRatingDescriptorVTbl*
  end

  struct IIsdbTerrestrialDeliverySystemDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_area_code : UInt64
    get_guard_interval : UInt64
    get_transmission_mode : UInt64
    get_count_of_records : UInt64
    get_record_frequency : UInt64
  end

  IIsdbTerrestrialDeliverySystemDescriptor_GUID = "39fae0a6-d151-44dd-a28a-765de5991670"
  IID_IIsdbTerrestrialDeliverySystemDescriptor = LibC::GUID.new(0x39fae0a6_u32, 0xd151_u16, 0x44dd_u16, StaticArray[0xa2_u8, 0x8a_u8, 0x76_u8, 0x5d_u8, 0xe5_u8, 0x99_u8, 0x16_u8, 0x70_u8])
  struct IIsdbTerrestrialDeliverySystemDescriptor
    lpVtbl : IIsdbTerrestrialDeliverySystemDescriptorVTbl*
  end

  struct IIsdbTSInformationDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_remote_control_key_id : UInt64
    get_ts_name_w : UInt64
    get_count_of_records : UInt64
    get_record_transmission_type_info : UInt64
    get_record_number_of_services : UInt64
    get_record_service_id_by_index : UInt64
  end

  IIsdbTSInformationDescriptor_GUID = "d7ad183e-38f5-4210-b55f-ec8d601bbd47"
  IID_IIsdbTSInformationDescriptor = LibC::GUID.new(0xd7ad183e_u32, 0x38f5_u16, 0x4210_u16, StaticArray[0xb5_u8, 0x5f_u8, 0xec_u8, 0x8d_u8, 0x60_u8, 0x1b_u8, 0xbd_u8, 0x47_u8])
  struct IIsdbTSInformationDescriptor
    lpVtbl : IIsdbTSInformationDescriptorVTbl*
  end

  struct IIsdbDigitalCopyControlDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_copy_control : UInt64
    get_count_of_records : UInt64
    get_record_copy_control : UInt64
  end

  IIsdbDigitalCopyControlDescriptor_GUID = "1a28417e-266a-4bb8-a4bd-d782bcfb8161"
  IID_IIsdbDigitalCopyControlDescriptor = LibC::GUID.new(0x1a28417e_u32, 0x266a_u16, 0x4bb8_u16, StaticArray[0xa4_u8, 0xbd_u8, 0xd7_u8, 0x82_u8, 0xbc_u8, 0xfb_u8, 0x81_u8, 0x61_u8])
  struct IIsdbDigitalCopyControlDescriptor
    lpVtbl : IIsdbDigitalCopyControlDescriptorVTbl*
  end

  struct IIsdbAudioComponentDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_stream_content : UInt64
    get_component_type : UInt64
    get_component_tag : UInt64
    get_stream_type : UInt64
    get_simulcast_group_tag : UInt64
    get_es_multi_lingual_flag : UInt64
    get_main_component_flag : UInt64
    get_quality_indicator : UInt64
    get_sampling_rate : UInt64
    get_language_code : UInt64
    get_language_code2 : UInt64
    get_text_w : UInt64
  end

  IIsdbAudioComponentDescriptor_GUID = "679d2002-2425-4be4-a4c7-d6632a574f4d"
  IID_IIsdbAudioComponentDescriptor = LibC::GUID.new(0x679d2002_u32, 0x2425_u16, 0x4be4_u16, StaticArray[0xa4_u8, 0xc7_u8, 0xd6_u8, 0x63_u8, 0x2a_u8, 0x57_u8, 0x4f_u8, 0x4d_u8])
  struct IIsdbAudioComponentDescriptor
    lpVtbl : IIsdbAudioComponentDescriptorVTbl*
  end

  struct IIsdbDataContentDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_data_component_id : UInt64
    get_entry_component : UInt64
    get_selector_length : UInt64
    get_selector_bytes : UInt64
    get_count_of_records : UInt64
    get_record_component_ref : UInt64
    get_language_code : UInt64
    get_text_w : UInt64
  end

  IIsdbDataContentDescriptor_GUID = "a428100a-e646-4bd6-aa14-6087bdc08cd5"
  IID_IIsdbDataContentDescriptor = LibC::GUID.new(0xa428100a_u32, 0xe646_u16, 0x4bd6_u16, StaticArray[0xaa_u8, 0x14_u8, 0x60_u8, 0x87_u8, 0xbd_u8, 0xc0_u8, 0x8c_u8, 0xd5_u8])
  struct IIsdbDataContentDescriptor
    lpVtbl : IIsdbDataContentDescriptorVTbl*
  end

  struct IIsdbCAContractInformationDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_ca_system_id : UInt64
    get_ca_unit_id : UInt64
    get_count_of_records : UInt64
    get_record_component_tag : UInt64
    get_contract_verification_info_length : UInt64
    get_contract_verification_info : UInt64
    get_fee_name_w : UInt64
  end

  IIsdbCAContractInformationDescriptor_GUID = "08e18b25-a28f-4e92-821e-4fced5cc2291"
  IID_IIsdbCAContractInformationDescriptor = LibC::GUID.new(0x8e18b25_u32, 0xa28f_u16, 0x4e92_u16, StaticArray[0x82_u8, 0x1e_u8, 0x4f_u8, 0xce_u8, 0xd5_u8, 0xcc_u8, 0x22_u8, 0x91_u8])
  struct IIsdbCAContractInformationDescriptor
    lpVtbl : IIsdbCAContractInformationDescriptorVTbl*
  end

  struct IIsdbEventGroupDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_group_type : UInt64
    get_count_of_records : UInt64
    get_record_event : UInt64
    get_count_of_ref_records : UInt64
    get_ref_record_event : UInt64
  end

  IIsdbEventGroupDescriptor_GUID = "94b06780-2e2a-44dc-a966-cc56fdabc6c2"
  IID_IIsdbEventGroupDescriptor = LibC::GUID.new(0x94b06780_u32, 0x2e2a_u16, 0x44dc_u16, StaticArray[0xa9_u8, 0x66_u8, 0xcc_u8, 0x56_u8, 0xfd_u8, 0xab_u8, 0xc6_u8, 0xc2_u8])
  struct IIsdbEventGroupDescriptor
    lpVtbl : IIsdbEventGroupDescriptorVTbl*
  end

  struct IIsdbComponentGroupDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_component_group_type : UInt64
    get_count_of_records : UInt64
    get_record_group_id : UInt64
    get_record_number_of_ca_unit : UInt64
    get_record_ca_unit_ca_unit_id : UInt64
    get_record_ca_unit_number_of_components : UInt64
    get_record_ca_unit_component_tag : UInt64
    get_record_total_bit_rate : UInt64
    get_record_text_w : UInt64
  end

  IIsdbComponentGroupDescriptor_GUID = "a494f17f-c592-47d8-8943-64c9a34be7b9"
  IID_IIsdbComponentGroupDescriptor = LibC::GUID.new(0xa494f17f_u32, 0xc592_u16, 0x47d8_u16, StaticArray[0x89_u8, 0x43_u8, 0x64_u8, 0xc9_u8, 0xa3_u8, 0x4b_u8, 0xe7_u8, 0xb9_u8])
  struct IIsdbComponentGroupDescriptor
    lpVtbl : IIsdbComponentGroupDescriptorVTbl*
  end

  struct IIsdbSeriesDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_series_id : UInt64
    get_repeat_label : UInt64
    get_program_pattern : UInt64
    get_expire_date : UInt64
    get_episode_number : UInt64
    get_last_episode_number : UInt64
    get_series_name_w : UInt64
  end

  IIsdbSeriesDescriptor_GUID = "07ef6370-1660-4f26-87fc-614adab24b11"
  IID_IIsdbSeriesDescriptor = LibC::GUID.new(0x7ef6370_u32, 0x1660_u16, 0x4f26_u16, StaticArray[0x87_u8, 0xfc_u8, 0x61_u8, 0x4a_u8, 0xda_u8, 0xb2_u8, 0x4b_u8, 0x11_u8])
  struct IIsdbSeriesDescriptor
    lpVtbl : IIsdbSeriesDescriptorVTbl*
  end

  struct IIsdbDownloadContentDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_flags : UInt64
    get_component_size : UInt64
    get_download_id : UInt64
    get_time_out_value_dii : UInt64
    get_leak_rate : UInt64
    get_component_tag : UInt64
    get_compatiblity_descriptor_length : UInt64
    get_compatiblity_descriptor : UInt64
    get_count_of_records : UInt64
    get_record_module_id : UInt64
    get_record_module_size : UInt64
    get_record_module_info_length : UInt64
    get_record_module_info : UInt64
    get_text_language_code : UInt64
    get_text_w : UInt64
  end

  IIsdbDownloadContentDescriptor_GUID = "5298661e-cb88-4f5f-a1de-5f440c185b92"
  IID_IIsdbDownloadContentDescriptor = LibC::GUID.new(0x5298661e_u32, 0xcb88_u16, 0x4f5f_u16, StaticArray[0xa1_u8, 0xde_u8, 0x5f_u8, 0x44_u8, 0xc_u8, 0x18_u8, 0x5b_u8, 0x92_u8])
  struct IIsdbDownloadContentDescriptor
    lpVtbl : IIsdbDownloadContentDescriptorVTbl*
  end

  struct IIsdbLogoTransmissionDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_logo_transmission_type : UInt64
    get_logo_id : UInt64
    get_logo_version : UInt64
    get_download_data_id : UInt64
    get_logo_char_w : UInt64
  end

  IIsdbLogoTransmissionDescriptor_GUID = "e0103f49-4ae1-4f07-9098-756db1fa88cd"
  IID_IIsdbLogoTransmissionDescriptor = LibC::GUID.new(0xe0103f49_u32, 0x4ae1_u16, 0x4f07_u16, StaticArray[0x90_u8, 0x98_u8, 0x75_u8, 0x6d_u8, 0xb1_u8, 0xfa_u8, 0x88_u8, 0xcd_u8])
  struct IIsdbLogoTransmissionDescriptor
    lpVtbl : IIsdbLogoTransmissionDescriptorVTbl*
  end

  struct IIsdbSIParameterDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_parameter_version : UInt64
    get_update_time : UInt64
    get_record_number_of_table : UInt64
    get_table_id : UInt64
    get_table_description_length : UInt64
    get_table_description_bytes : UInt64
  end

  IIsdbSIParameterDescriptor_GUID = "f837dc36-867c-426a-9111-f62093951a45"
  IID_IIsdbSIParameterDescriptor = LibC::GUID.new(0xf837dc36_u32, 0x867c_u16, 0x426a_u16, StaticArray[0x91_u8, 0x11_u8, 0xf6_u8, 0x20_u8, 0x93_u8, 0x95_u8, 0x1a_u8, 0x45_u8])
  struct IIsdbSIParameterDescriptor
    lpVtbl : IIsdbSIParameterDescriptorVTbl*
  end

  struct IIsdbEmergencyInformationDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_count_of_records : UInt64
    get_service_id : UInt64
    get_start_end_flag : UInt64
    get_signal_level : UInt64
    get_area_code : UInt64
  end

  IIsdbEmergencyInformationDescriptor_GUID = "ba6fa681-b973-4da1-9207-ac3e7f0341eb"
  IID_IIsdbEmergencyInformationDescriptor = LibC::GUID.new(0xba6fa681_u32, 0xb973_u16, 0x4da1_u16, StaticArray[0x92_u8, 0x7_u8, 0xac_u8, 0x3e_u8, 0x7f_u8, 0x3_u8, 0x41_u8, 0xeb_u8])
  struct IIsdbEmergencyInformationDescriptor
    lpVtbl : IIsdbEmergencyInformationDescriptorVTbl*
  end

  struct IIsdbCADescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_ca_system_id : UInt64
    get_reserved_bits : UInt64
    get_capid : UInt64
    get_private_data_bytes : UInt64
  end

  IIsdbCADescriptor_GUID = "0570aa47-52bc-42ae-8ca5-969f41e81aea"
  IID_IIsdbCADescriptor = LibC::GUID.new(0x570aa47_u32, 0x52bc_u16, 0x42ae_u16, StaticArray[0x8c_u8, 0xa5_u8, 0x96_u8, 0x9f_u8, 0x41_u8, 0xe8_u8, 0x1a_u8, 0xea_u8])
  struct IIsdbCADescriptor
    lpVtbl : IIsdbCADescriptorVTbl*
  end

  struct IIsdbCAServiceDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_ca_system_id : UInt64
    get_ca_broadcaster_group_id : UInt64
    get_message_control : UInt64
    get_service_ids : UInt64
  end

  IIsdbCAServiceDescriptor_GUID = "39cbeb97-ff0b-42a7-9ab9-7b9cfe70a77a"
  IID_IIsdbCAServiceDescriptor = LibC::GUID.new(0x39cbeb97_u32, 0xff0b_u16, 0x42a7_u16, StaticArray[0x9a_u8, 0xb9_u8, 0x7b_u8, 0x9c_u8, 0xfe_u8, 0x70_u8, 0xa7_u8, 0x7a_u8])
  struct IIsdbCAServiceDescriptor
    lpVtbl : IIsdbCAServiceDescriptorVTbl*
  end

  struct IIsdbHierarchicalTransmissionDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_future_use1 : UInt64
    get_quality_level : UInt64
    get_future_use2 : UInt64
    get_reference_pid : UInt64
  end

  IIsdbHierarchicalTransmissionDescriptor_GUID = "b7b3ae90-ee0b-446d-8769-f7e2aa266aa6"
  IID_IIsdbHierarchicalTransmissionDescriptor = LibC::GUID.new(0xb7b3ae90_u32, 0xee0b_u16, 0x446d_u16, StaticArray[0x87_u8, 0x69_u8, 0xf7_u8, 0xe2_u8, 0xaa_u8, 0x26_u8, 0x6a_u8, 0xa6_u8])
  struct IIsdbHierarchicalTransmissionDescriptor
    lpVtbl : IIsdbHierarchicalTransmissionDescriptorVTbl*
  end

  struct IPBDASiParserVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_eit : UInt64
    get_services : UInt64
  end

  IPBDASiParser_GUID = "9de49a74-aba2-4a18-93e1-21f17f95c3c3"
  IID_IPBDASiParser = LibC::GUID.new(0x9de49a74_u32, 0xaba2_u16, 0x4a18_u16, StaticArray[0x93_u8, 0xe1_u8, 0x21_u8, 0xf1_u8, 0x7f_u8, 0x95_u8, 0xc3_u8, 0xc3_u8])
  struct IPBDASiParser
    lpVtbl : IPBDASiParserVTbl*
  end

  struct IPBDA_EITVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_table_id : UInt64
    get_version_number : UInt64
    get_service_idx : UInt64
    get_count_of_records : UInt64
    get_record_event_id : UInt64
    get_record_start_time : UInt64
    get_record_duration : UInt64
    get_record_count_of_descriptors : UInt64
    get_record_descriptor_by_index : UInt64
    get_record_descriptor_by_tag : UInt64
  end

  IPBDA_EIT_GUID = "a35f2dea-098f-4ebd-984c-2bd4c3c8ce0a"
  IID_IPBDA_EIT = LibC::GUID.new(0xa35f2dea_u32, 0x98f_u16, 0x4ebd_u16, StaticArray[0x98_u8, 0x4c_u8, 0x2b_u8, 0xd4_u8, 0xc3_u8, 0xc8_u8, 0xce_u8, 0xa_u8])
  struct IPBDA_EIT
    lpVtbl : IPBDA_EITVTbl*
  end

  struct IPBDA_ServicesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    get_count_of_records : UInt64
    get_record_by_index : UInt64
  end

  IPBDA_Services_GUID = "944eab37-eed4-4850-afd2-77e7efeb4427"
  IID_IPBDA_Services = LibC::GUID.new(0x944eab37_u32, 0xeed4_u16, 0x4850_u16, StaticArray[0xaf_u8, 0xd2_u8, 0x77_u8, 0xe7_u8, 0xef_u8, 0xeb_u8, 0x44_u8, 0x27_u8])
  struct IPBDA_Services
    lpVtbl : IPBDA_ServicesVTbl*
  end

  struct IPBDAEntitlementDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_token : UInt64
  end

  IPBDAEntitlementDescriptor_GUID = "22632497-0de3-4587-aadc-d8d99017e760"
  IID_IPBDAEntitlementDescriptor = LibC::GUID.new(0x22632497_u32, 0xde3_u16, 0x4587_u16, StaticArray[0xaa_u8, 0xdc_u8, 0xd8_u8, 0xd9_u8, 0x90_u8, 0x17_u8, 0xe7_u8, 0x60_u8])
  struct IPBDAEntitlementDescriptor
    lpVtbl : IPBDAEntitlementDescriptorVTbl*
  end

  struct IPBDAAttributesDescriptorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_tag : UInt64
    get_length : UInt64
    get_attribute_payload : UInt64
  end

  IPBDAAttributesDescriptor_GUID = "313b3620-3263-45a6-9533-968befbeac03"
  IID_IPBDAAttributesDescriptor = LibC::GUID.new(0x313b3620_u32, 0x3263_u16, 0x45a6_u16, StaticArray[0x95_u8, 0x33_u8, 0x96_u8, 0x8b_u8, 0xef_u8, 0xbe_u8, 0xac_u8, 0x3_u8])
  struct IPBDAAttributesDescriptor
    lpVtbl : IPBDAAttributesDescriptorVTbl*
  end

  struct IBDA_TIF_REGISTRATIONVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    register_tif_ex : UInt64
    unregister_tif : UInt64
  end

  IBDA_TIF_REGISTRATION_GUID = "dfef4a68-ee61-415f-9ccb-cd95f2f98a3a"
  IID_IBDA_TIF_REGISTRATION = LibC::GUID.new(0xdfef4a68_u32, 0xee61_u16, 0x415f_u16, StaticArray[0x9c_u8, 0xcb_u8, 0xcd_u8, 0x95_u8, 0xf2_u8, 0xf9_u8, 0x8a_u8, 0x3a_u8])
  struct IBDA_TIF_REGISTRATION
    lpVtbl : IBDA_TIF_REGISTRATIONVTbl*
  end

  struct IMPEG2_TIF_CONTROLVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    register_tif : UInt64
    unregister_tif : UInt64
    add_pi_ds : UInt64
    delete_pi_ds : UInt64
    get_pid_count : UInt64
    get_pi_ds : UInt64
  end

  IMPEG2_TIF_CONTROL_GUID = "f9bac2f9-4149-4916-b2ef-faa202326862"
  IID_IMPEG2_TIF_CONTROL = LibC::GUID.new(0xf9bac2f9_u32, 0x4149_u16, 0x4916_u16, StaticArray[0xb2_u8, 0xef_u8, 0xfa_u8, 0xa2_u8, 0x2_u8, 0x32_u8, 0x68_u8, 0x62_u8])
  struct IMPEG2_TIF_CONTROL
    lpVtbl : IMPEG2_TIF_CONTROLVTbl*
  end

  struct ITuneRequestInfoVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_locator_data : UInt64
    get_component_data : UInt64
    create_component_list : UInt64
    get_next_program : UInt64
    get_previous_program : UInt64
    get_next_locator : UInt64
    get_previous_locator : UInt64
  end

  ITuneRequestInfo_GUID = "a3b152df-7a90-4218-ac54-9830bee8c0b6"
  IID_ITuneRequestInfo = LibC::GUID.new(0xa3b152df_u32, 0x7a90_u16, 0x4218_u16, StaticArray[0xac_u8, 0x54_u8, 0x98_u8, 0x30_u8, 0xbe_u8, 0xe8_u8, 0xc0_u8, 0xb6_u8])
  struct ITuneRequestInfo
    lpVtbl : ITuneRequestInfoVTbl*
  end

  struct ITuneRequestInfoExVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_locator_data : UInt64
    get_component_data : UInt64
    create_component_list : UInt64
    get_next_program : UInt64
    get_previous_program : UInt64
    get_next_locator : UInt64
    get_previous_locator : UInt64
    create_component_list_ex : UInt64
  end

  ITuneRequestInfoEx_GUID = "ee957c52-b0d0-4e78-8dd1-b87a08bfd893"
  IID_ITuneRequestInfoEx = LibC::GUID.new(0xee957c52_u32, 0xb0d0_u16, 0x4e78_u16, StaticArray[0x8d_u8, 0xd1_u8, 0xb8_u8, 0x7a_u8, 0x8_u8, 0xbf_u8, 0xd8_u8, 0x93_u8])
  struct ITuneRequestInfoEx
    lpVtbl : ITuneRequestInfoExVTbl*
  end

  struct ISIInbandEPGEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    si_object_event : UInt64
  end

  ISIInbandEPGEvent_GUID = "7e47913a-5a89-423d-9a2b-e15168858934"
  IID_ISIInbandEPGEvent = LibC::GUID.new(0x7e47913a_u32, 0x5a89_u16, 0x423d_u16, StaticArray[0x9a_u8, 0x2b_u8, 0xe1_u8, 0x51_u8, 0x68_u8, 0x85_u8, 0x89_u8, 0x34_u8])
  struct ISIInbandEPGEvent
    lpVtbl : ISIInbandEPGEventVTbl*
  end

  struct ISIInbandEPGVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    start_siepg_scan : UInt64
    stop_siepg_scan : UInt64
    is_siepg_scan_running : UInt64
  end

  ISIInbandEPG_GUID = "f90ad9d0-b854-4b68-9cc1-b2cc96119d85"
  IID_ISIInbandEPG = LibC::GUID.new(0xf90ad9d0_u32, 0xb854_u16, 0x4b68_u16, StaticArray[0x9c_u8, 0xc1_u8, 0xb2_u8, 0xcc_u8, 0x96_u8, 0x11_u8, 0x9d_u8, 0x85_u8])
  struct ISIInbandEPG
    lpVtbl : ISIInbandEPGVTbl*
  end

  struct IGuideDataEventVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    guide_data_acquired : UInt64
    program_changed : UInt64
    service_changed : UInt64
    schedule_entry_changed : UInt64
    program_deleted : UInt64
    service_deleted : UInt64
    schedule_deleted : UInt64
  end

  IGuideDataEvent_GUID = "efda0c80-f395-42c3-9b3c-56b37dec7bb7"
  IID_IGuideDataEvent = LibC::GUID.new(0xefda0c80_u32, 0xf395_u16, 0x42c3_u16, StaticArray[0x9b_u8, 0x3c_u8, 0x56_u8, 0xb3_u8, 0x7d_u8, 0xec_u8, 0x7b_u8, 0xb7_u8])
  struct IGuideDataEvent
    lpVtbl : IGuideDataEventVTbl*
  end

  struct IGuideDataPropertyVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_name : UInt64
    get_language : UInt64
    get_value : UInt64
  end

  IGuideDataProperty_GUID = "88ec5e58-bb73-41d6-99ce-66c524b8b591"
  IID_IGuideDataProperty = LibC::GUID.new(0x88ec5e58_u32, 0xbb73_u16, 0x41d6_u16, StaticArray[0x99_u8, 0xce_u8, 0x66_u8, 0xc5_u8, 0x24_u8, 0xb8_u8, 0xb5_u8, 0x91_u8])
  struct IGuideDataProperty
    lpVtbl : IGuideDataPropertyVTbl*
  end

  struct IEnumGuideDataPropertiesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    next : UInt64
    skip : UInt64
    reset : UInt64
    clone : UInt64
  end

  IEnumGuideDataProperties_GUID = "ae44423b-4571-475c-ad2c-f40a771d80ef"
  IID_IEnumGuideDataProperties = LibC::GUID.new(0xae44423b_u32, 0x4571_u16, 0x475c_u16, StaticArray[0xad_u8, 0x2c_u8, 0xf4_u8, 0xa_u8, 0x77_u8, 0x1d_u8, 0x80_u8, 0xef_u8])
  struct IEnumGuideDataProperties
    lpVtbl : IEnumGuideDataPropertiesVTbl*
  end

  struct IEnumTuneRequestsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    next : UInt64
    skip : UInt64
    reset : UInt64
    clone : UInt64
  end

  IEnumTuneRequests_GUID = "1993299c-ced6-4788-87a3-420067dce0c7"
  IID_IEnumTuneRequests = LibC::GUID.new(0x1993299c_u32, 0xced6_u16, 0x4788_u16, StaticArray[0x87_u8, 0xa3_u8, 0x42_u8, 0x0_u8, 0x67_u8, 0xdc_u8, 0xe0_u8, 0xc7_u8])
  struct IEnumTuneRequests
    lpVtbl : IEnumTuneRequestsVTbl*
  end

  struct IGuideDataVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_services : UInt64
    get_service_properties : UInt64
    get_guide_program_i_ds : UInt64
    get_program_properties : UInt64
    get_schedule_entry_i_ds : UInt64
    get_schedule_entry_properties : UInt64
  end

  IGuideData_GUID = "61571138-5b01-43cd-aeaf-60b784a0bf93"
  IID_IGuideData = LibC::GUID.new(0x61571138_u32, 0x5b01_u16, 0x43cd_u16, StaticArray[0xae_u8, 0xaf_u8, 0x60_u8, 0xb7_u8, 0x84_u8, 0xa0_u8, 0xbf_u8, 0x93_u8])
  struct IGuideData
    lpVtbl : IGuideDataVTbl*
  end

  struct IGuideDataLoaderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    init : UInt64
    terminate : UInt64
  end

  IGuideDataLoader_GUID = "4764ff7c-fa95-4525-af4d-d32236db9e38"
  IID_IGuideDataLoader = LibC::GUID.new(0x4764ff7c_u32, 0xfa95_u16, 0x4525_u16, StaticArray[0xaf_u8, 0x4d_u8, 0xd3_u8, 0x22_u8, 0x36_u8, 0xdb_u8, 0x9e_u8, 0x38_u8])
  struct IGuideDataLoader
    lpVtbl : IGuideDataLoaderVTbl*
  end


  # Params # hr : HRESULT [In],pbuffer : UInt8* [In],maxlen : UInt32 [In]
  fun AMGetErrorTextA(hr : HRESULT, pbuffer : UInt8*, maxlen : UInt32) : UInt32

  # Params # hr : HRESULT [In],pbuffer : Char* [In],maxlen : UInt32 [In]
  fun AMGetErrorTextW(hr : HRESULT, pbuffer : Char*, maxlen : UInt32) : UInt32
end
struct LibWin32::ICreateDevEnum
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def create_class_enumerator(clsiddeviceclass : Guid*, ppenummoniker : IEnumMoniker*, dwflags : UInt32) : HRESULT
    @lpVtbl.value.create_class_enumerator.unsafe_as(Proc(Guid*, IEnumMoniker*, UInt32, HRESULT)).call(clsiddeviceclass, ppenummoniker, dwflags)
  end
end
struct LibWin32::IPin
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def connect(preceivepin : IPin, pmt : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.connect.unsafe_as(Proc(IPin, AM_MEDIA_TYPE*, HRESULT)).call(preceivepin, pmt)
  end
  def receive_connection(pconnector : IPin, pmt : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.receive_connection.unsafe_as(Proc(IPin, AM_MEDIA_TYPE*, HRESULT)).call(pconnector, pmt)
  end
  def disconnect : HRESULT
    @lpVtbl.value.disconnect.unsafe_as(Proc(HRESULT)).call
  end
  def connected_to(ppin : IPin*) : HRESULT
    @lpVtbl.value.connected_to.unsafe_as(Proc(IPin*, HRESULT)).call(ppin)
  end
  def connection_media_type(pmt : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.connection_media_type.unsafe_as(Proc(AM_MEDIA_TYPE*, HRESULT)).call(pmt)
  end
  def query_pin_info(pinfo : PIN_INFO*) : HRESULT
    @lpVtbl.value.query_pin_info.unsafe_as(Proc(PIN_INFO*, HRESULT)).call(pinfo)
  end
  def query_direction(ppindir : PIN_DIRECTION*) : HRESULT
    @lpVtbl.value.query_direction.unsafe_as(Proc(PIN_DIRECTION*, HRESULT)).call(ppindir)
  end
  def query_id(id : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.query_id.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(id)
  end
  def query_accept(pmt : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.query_accept.unsafe_as(Proc(AM_MEDIA_TYPE*, HRESULT)).call(pmt)
  end
  def enum_media_types(ppenum : IEnumMediaTypes*) : HRESULT
    @lpVtbl.value.enum_media_types.unsafe_as(Proc(IEnumMediaTypes*, HRESULT)).call(ppenum)
  end
  def query_internal_connections(appin : IPin*, npin : UInt32*) : HRESULT
    @lpVtbl.value.query_internal_connections.unsafe_as(Proc(IPin*, UInt32*, HRESULT)).call(appin, npin)
  end
  def end_of_stream : HRESULT
    @lpVtbl.value.end_of_stream.unsafe_as(Proc(HRESULT)).call
  end
  def begin_flush : HRESULT
    @lpVtbl.value.begin_flush.unsafe_as(Proc(HRESULT)).call
  end
  def end_flush : HRESULT
    @lpVtbl.value.end_flush.unsafe_as(Proc(HRESULT)).call
  end
  def new_segment(tstart : Int64, tstop : Int64, drate : Float64) : HRESULT
    @lpVtbl.value.new_segment.unsafe_as(Proc(Int64, Int64, Float64, HRESULT)).call(tstart, tstop, drate)
  end
end
struct LibWin32::IEnumPins
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def next(cpins : UInt32, pppins : IPin*, pcfetched : UInt32*) : HRESULT
    @lpVtbl.value.next.unsafe_as(Proc(UInt32, IPin*, UInt32*, HRESULT)).call(cpins, pppins, pcfetched)
  end
  def skip(cpins : UInt32) : HRESULT
    @lpVtbl.value.skip.unsafe_as(Proc(UInt32, HRESULT)).call(cpins)
  end
  def reset : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(HRESULT)).call
  end
  def clone(ppenum : IEnumPins*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(IEnumPins*, HRESULT)).call(ppenum)
  end
end
struct LibWin32::IEnumMediaTypes
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def next(cmediatypes : UInt32, ppmediatypes : AM_MEDIA_TYPE**, pcfetched : UInt32*) : HRESULT
    @lpVtbl.value.next.unsafe_as(Proc(UInt32, AM_MEDIA_TYPE**, UInt32*, HRESULT)).call(cmediatypes, ppmediatypes, pcfetched)
  end
  def skip(cmediatypes : UInt32) : HRESULT
    @lpVtbl.value.skip.unsafe_as(Proc(UInt32, HRESULT)).call(cmediatypes)
  end
  def reset : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(HRESULT)).call
  end
  def clone(ppenum : IEnumMediaTypes*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(IEnumMediaTypes*, HRESULT)).call(ppenum)
  end
end
struct LibWin32::IFilterGraph
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def add_filter(pfilter : IBaseFilter, pname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.add_filter.unsafe_as(Proc(IBaseFilter, LibC::LPWSTR, HRESULT)).call(pfilter, pname)
  end
  def remove_filter(pfilter : IBaseFilter) : HRESULT
    @lpVtbl.value.remove_filter.unsafe_as(Proc(IBaseFilter, HRESULT)).call(pfilter)
  end
  def enum_filters(ppenum : IEnumFilters*) : HRESULT
    @lpVtbl.value.enum_filters.unsafe_as(Proc(IEnumFilters*, HRESULT)).call(ppenum)
  end
  def find_filter_by_name(pname : LibC::LPWSTR, ppfilter : IBaseFilter*) : HRESULT
    @lpVtbl.value.find_filter_by_name.unsafe_as(Proc(LibC::LPWSTR, IBaseFilter*, HRESULT)).call(pname, ppfilter)
  end
  def connect_direct(ppinout : IPin, ppinin : IPin, pmt : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.connect_direct.unsafe_as(Proc(IPin, IPin, AM_MEDIA_TYPE*, HRESULT)).call(ppinout, ppinin, pmt)
  end
  def reconnect(ppin : IPin) : HRESULT
    @lpVtbl.value.reconnect.unsafe_as(Proc(IPin, HRESULT)).call(ppin)
  end
  def disconnect(ppin : IPin) : HRESULT
    @lpVtbl.value.disconnect.unsafe_as(Proc(IPin, HRESULT)).call(ppin)
  end
  def set_default_sync_source : HRESULT
    @lpVtbl.value.set_default_sync_source.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IEnumFilters
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def next(cfilters : UInt32, ppfilter : IBaseFilter*, pcfetched : UInt32*) : HRESULT
    @lpVtbl.value.next.unsafe_as(Proc(UInt32, IBaseFilter*, UInt32*, HRESULT)).call(cfilters, ppfilter, pcfetched)
  end
  def skip(cfilters : UInt32) : HRESULT
    @lpVtbl.value.skip.unsafe_as(Proc(UInt32, HRESULT)).call(cfilters)
  end
  def reset : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(HRESULT)).call
  end
  def clone(ppenum : IEnumFilters*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(IEnumFilters*, HRESULT)).call(ppenum)
  end
end
struct LibWin32::IMediaFilter
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_class_id(pclassid : Guid*) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(Guid*, HRESULT)).call(pclassid)
  end
  def stop : HRESULT
    @lpVtbl.value.stop.unsafe_as(Proc(HRESULT)).call
  end
  def pause : HRESULT
    @lpVtbl.value.pause.unsafe_as(Proc(HRESULT)).call
  end
  def run(tstart : Int64) : HRESULT
    @lpVtbl.value.run.unsafe_as(Proc(Int64, HRESULT)).call(tstart)
  end
  def get_state(dwmillisecstimeout : UInt32, state : FILTER_STATE*) : HRESULT
    @lpVtbl.value.get_state.unsafe_as(Proc(UInt32, FILTER_STATE*, HRESULT)).call(dwmillisecstimeout, state)
  end
  def set_sync_source(pclock : IReferenceClock) : HRESULT
    @lpVtbl.value.set_sync_source.unsafe_as(Proc(IReferenceClock, HRESULT)).call(pclock)
  end
  def get_sync_source(pclock : IReferenceClock*) : HRESULT
    @lpVtbl.value.get_sync_source.unsafe_as(Proc(IReferenceClock*, HRESULT)).call(pclock)
  end
end
struct LibWin32::IBaseFilter
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_class_id(pclassid : Guid*) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(Guid*, HRESULT)).call(pclassid)
  end
  def stop : HRESULT
    @lpVtbl.value.stop.unsafe_as(Proc(HRESULT)).call
  end
  def pause : HRESULT
    @lpVtbl.value.pause.unsafe_as(Proc(HRESULT)).call
  end
  def run(tstart : Int64) : HRESULT
    @lpVtbl.value.run.unsafe_as(Proc(Int64, HRESULT)).call(tstart)
  end
  def get_state(dwmillisecstimeout : UInt32, state : FILTER_STATE*) : HRESULT
    @lpVtbl.value.get_state.unsafe_as(Proc(UInt32, FILTER_STATE*, HRESULT)).call(dwmillisecstimeout, state)
  end
  def set_sync_source(pclock : IReferenceClock) : HRESULT
    @lpVtbl.value.set_sync_source.unsafe_as(Proc(IReferenceClock, HRESULT)).call(pclock)
  end
  def get_sync_source(pclock : IReferenceClock*) : HRESULT
    @lpVtbl.value.get_sync_source.unsafe_as(Proc(IReferenceClock*, HRESULT)).call(pclock)
  end
  def enum_pins(ppenum : IEnumPins*) : HRESULT
    @lpVtbl.value.enum_pins.unsafe_as(Proc(IEnumPins*, HRESULT)).call(ppenum)
  end
  def find_pin(id : LibC::LPWSTR, pppin : IPin*) : HRESULT
    @lpVtbl.value.find_pin.unsafe_as(Proc(LibC::LPWSTR, IPin*, HRESULT)).call(id, pppin)
  end
  def query_filter_info(pinfo : FILTER_INFO*) : HRESULT
    @lpVtbl.value.query_filter_info.unsafe_as(Proc(FILTER_INFO*, HRESULT)).call(pinfo)
  end
  def join_filter_graph(pgraph : IFilterGraph, pname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.join_filter_graph.unsafe_as(Proc(IFilterGraph, LibC::LPWSTR, HRESULT)).call(pgraph, pname)
  end
  def query_vendor_info(pvendorinfo : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.query_vendor_info.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(pvendorinfo)
  end
end
struct LibWin32::IMediaSample
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_pointer(ppbuffer : UInt8**) : HRESULT
    @lpVtbl.value.get_pointer.unsafe_as(Proc(UInt8**, HRESULT)).call(ppbuffer)
  end
  def get_size : Int32
    @lpVtbl.value.get_size.unsafe_as(Proc(Int32)).call
  end
  def get_time(ptimestart : Int64*, ptimeend : Int64*) : HRESULT
    @lpVtbl.value.get_time.unsafe_as(Proc(Int64*, Int64*, HRESULT)).call(ptimestart, ptimeend)
  end
  def set_time(ptimestart : Int64*, ptimeend : Int64*) : HRESULT
    @lpVtbl.value.set_time.unsafe_as(Proc(Int64*, Int64*, HRESULT)).call(ptimestart, ptimeend)
  end
  def is_sync_point : HRESULT
    @lpVtbl.value.is_sync_point.unsafe_as(Proc(HRESULT)).call
  end
  def set_sync_point(bissyncpoint : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_sync_point.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(bissyncpoint)
  end
  def is_preroll : HRESULT
    @lpVtbl.value.is_preroll.unsafe_as(Proc(HRESULT)).call
  end
  def set_preroll(bispreroll : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_preroll.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(bispreroll)
  end
  def get_actual_data_length : Int32
    @lpVtbl.value.get_actual_data_length.unsafe_as(Proc(Int32)).call
  end
  def set_actual_data_length(midl__imediasample0000 : Int32) : HRESULT
    @lpVtbl.value.set_actual_data_length.unsafe_as(Proc(Int32, HRESULT)).call(midl__imediasample0000)
  end
  def get_media_type(ppmediatype : AM_MEDIA_TYPE**) : HRESULT
    @lpVtbl.value.get_media_type.unsafe_as(Proc(AM_MEDIA_TYPE**, HRESULT)).call(ppmediatype)
  end
  def set_media_type(pmediatype : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.set_media_type.unsafe_as(Proc(AM_MEDIA_TYPE*, HRESULT)).call(pmediatype)
  end
  def is_discontinuity : HRESULT
    @lpVtbl.value.is_discontinuity.unsafe_as(Proc(HRESULT)).call
  end
  def set_discontinuity(bdiscontinuity : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_discontinuity.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(bdiscontinuity)
  end
  def get_media_time(ptimestart : Int64*, ptimeend : Int64*) : HRESULT
    @lpVtbl.value.get_media_time.unsafe_as(Proc(Int64*, Int64*, HRESULT)).call(ptimestart, ptimeend)
  end
  def set_media_time(ptimestart : Int64*, ptimeend : Int64*) : HRESULT
    @lpVtbl.value.set_media_time.unsafe_as(Proc(Int64*, Int64*, HRESULT)).call(ptimestart, ptimeend)
  end
end
struct LibWin32::IMediaSample2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_pointer(ppbuffer : UInt8**) : HRESULT
    @lpVtbl.value.get_pointer.unsafe_as(Proc(UInt8**, HRESULT)).call(ppbuffer)
  end
  def get_size : Int32
    @lpVtbl.value.get_size.unsafe_as(Proc(Int32)).call
  end
  def get_time(ptimestart : Int64*, ptimeend : Int64*) : HRESULT
    @lpVtbl.value.get_time.unsafe_as(Proc(Int64*, Int64*, HRESULT)).call(ptimestart, ptimeend)
  end
  def set_time(ptimestart : Int64*, ptimeend : Int64*) : HRESULT
    @lpVtbl.value.set_time.unsafe_as(Proc(Int64*, Int64*, HRESULT)).call(ptimestart, ptimeend)
  end
  def is_sync_point : HRESULT
    @lpVtbl.value.is_sync_point.unsafe_as(Proc(HRESULT)).call
  end
  def set_sync_point(bissyncpoint : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_sync_point.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(bissyncpoint)
  end
  def is_preroll : HRESULT
    @lpVtbl.value.is_preroll.unsafe_as(Proc(HRESULT)).call
  end
  def set_preroll(bispreroll : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_preroll.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(bispreroll)
  end
  def get_actual_data_length : Int32
    @lpVtbl.value.get_actual_data_length.unsafe_as(Proc(Int32)).call
  end
  def set_actual_data_length(midl__imediasample0000 : Int32) : HRESULT
    @lpVtbl.value.set_actual_data_length.unsafe_as(Proc(Int32, HRESULT)).call(midl__imediasample0000)
  end
  def get_media_type(ppmediatype : AM_MEDIA_TYPE**) : HRESULT
    @lpVtbl.value.get_media_type.unsafe_as(Proc(AM_MEDIA_TYPE**, HRESULT)).call(ppmediatype)
  end
  def set_media_type(pmediatype : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.set_media_type.unsafe_as(Proc(AM_MEDIA_TYPE*, HRESULT)).call(pmediatype)
  end
  def is_discontinuity : HRESULT
    @lpVtbl.value.is_discontinuity.unsafe_as(Proc(HRESULT)).call
  end
  def set_discontinuity(bdiscontinuity : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_discontinuity.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(bdiscontinuity)
  end
  def get_media_time(ptimestart : Int64*, ptimeend : Int64*) : HRESULT
    @lpVtbl.value.get_media_time.unsafe_as(Proc(Int64*, Int64*, HRESULT)).call(ptimestart, ptimeend)
  end
  def set_media_time(ptimestart : Int64*, ptimeend : Int64*) : HRESULT
    @lpVtbl.value.set_media_time.unsafe_as(Proc(Int64*, Int64*, HRESULT)).call(ptimestart, ptimeend)
  end
  def get_properties(cbproperties : UInt32, pbproperties : UInt8*) : HRESULT
    @lpVtbl.value.get_properties.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(cbproperties, pbproperties)
  end
  def set_properties(cbproperties : UInt32, pbproperties : UInt8*) : HRESULT
    @lpVtbl.value.set_properties.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(cbproperties, pbproperties)
  end
end
struct LibWin32::IMediaSample2Config
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_surface(ppdirect3dsurface9 : IUnknown*) : HRESULT
    @lpVtbl.value.get_surface.unsafe_as(Proc(IUnknown*, HRESULT)).call(ppdirect3dsurface9)
  end
end
struct LibWin32::IMemAllocator
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_properties(prequest : ALLOCATOR_PROPERTIES*, pactual : ALLOCATOR_PROPERTIES*) : HRESULT
    @lpVtbl.value.set_properties.unsafe_as(Proc(ALLOCATOR_PROPERTIES*, ALLOCATOR_PROPERTIES*, HRESULT)).call(prequest, pactual)
  end
  def get_properties(pprops : ALLOCATOR_PROPERTIES*) : HRESULT
    @lpVtbl.value.get_properties.unsafe_as(Proc(ALLOCATOR_PROPERTIES*, HRESULT)).call(pprops)
  end
  def commit : HRESULT
    @lpVtbl.value.commit.unsafe_as(Proc(HRESULT)).call
  end
  def decommit : HRESULT
    @lpVtbl.value.decommit.unsafe_as(Proc(HRESULT)).call
  end
  def get_buffer(ppbuffer : IMediaSample*, pstarttime : Int64*, pendtime : Int64*, dwflags : UInt32) : HRESULT
    @lpVtbl.value.get_buffer.unsafe_as(Proc(IMediaSample*, Int64*, Int64*, UInt32, HRESULT)).call(ppbuffer, pstarttime, pendtime, dwflags)
  end
  def release_buffer(pbuffer : IMediaSample) : HRESULT
    @lpVtbl.value.release_buffer.unsafe_as(Proc(IMediaSample, HRESULT)).call(pbuffer)
  end
end
struct LibWin32::IMemAllocatorCallbackTemp
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_properties(prequest : ALLOCATOR_PROPERTIES*, pactual : ALLOCATOR_PROPERTIES*) : HRESULT
    @lpVtbl.value.set_properties.unsafe_as(Proc(ALLOCATOR_PROPERTIES*, ALLOCATOR_PROPERTIES*, HRESULT)).call(prequest, pactual)
  end
  def get_properties(pprops : ALLOCATOR_PROPERTIES*) : HRESULT
    @lpVtbl.value.get_properties.unsafe_as(Proc(ALLOCATOR_PROPERTIES*, HRESULT)).call(pprops)
  end
  def commit : HRESULT
    @lpVtbl.value.commit.unsafe_as(Proc(HRESULT)).call
  end
  def decommit : HRESULT
    @lpVtbl.value.decommit.unsafe_as(Proc(HRESULT)).call
  end
  def get_buffer(ppbuffer : IMediaSample*, pstarttime : Int64*, pendtime : Int64*, dwflags : UInt32) : HRESULT
    @lpVtbl.value.get_buffer.unsafe_as(Proc(IMediaSample*, Int64*, Int64*, UInt32, HRESULT)).call(ppbuffer, pstarttime, pendtime, dwflags)
  end
  def release_buffer(pbuffer : IMediaSample) : HRESULT
    @lpVtbl.value.release_buffer.unsafe_as(Proc(IMediaSample, HRESULT)).call(pbuffer)
  end
  def set_notify(pnotify : IMemAllocatorNotifyCallbackTemp) : HRESULT
    @lpVtbl.value.set_notify.unsafe_as(Proc(IMemAllocatorNotifyCallbackTemp, HRESULT)).call(pnotify)
  end
  def get_free_count(plbuffersfree : Int32*) : HRESULT
    @lpVtbl.value.get_free_count.unsafe_as(Proc(Int32*, HRESULT)).call(plbuffersfree)
  end
end
struct LibWin32::IMemAllocatorNotifyCallbackTemp
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def notify_release : HRESULT
    @lpVtbl.value.notify_release.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IMemInputPin
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_allocator(ppallocator : IMemAllocator*) : HRESULT
    @lpVtbl.value.get_allocator.unsafe_as(Proc(IMemAllocator*, HRESULT)).call(ppallocator)
  end
  def notify_allocator(pallocator : IMemAllocator, breadonly : LibC::BOOL) : HRESULT
    @lpVtbl.value.notify_allocator.unsafe_as(Proc(IMemAllocator, LibC::BOOL, HRESULT)).call(pallocator, breadonly)
  end
  def get_allocator_requirements(pprops : ALLOCATOR_PROPERTIES*) : HRESULT
    @lpVtbl.value.get_allocator_requirements.unsafe_as(Proc(ALLOCATOR_PROPERTIES*, HRESULT)).call(pprops)
  end
  def receive(psample : IMediaSample) : HRESULT
    @lpVtbl.value.receive.unsafe_as(Proc(IMediaSample, HRESULT)).call(psample)
  end
  def receive_multiple(psamples : IMediaSample*, nsamples : Int32, nsamplesprocessed : Int32*) : HRESULT
    @lpVtbl.value.receive_multiple.unsafe_as(Proc(IMediaSample*, Int32, Int32*, HRESULT)).call(psamples, nsamples, nsamplesprocessed)
  end
  def receive_can_block : HRESULT
    @lpVtbl.value.receive_can_block.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IAMovieSetup
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def register : HRESULT
    @lpVtbl.value.register.unsafe_as(Proc(HRESULT)).call
  end
  def unregister : HRESULT
    @lpVtbl.value.unregister.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IMediaSeeking
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_capabilities(pcapabilities : UInt32*) : HRESULT
    @lpVtbl.value.get_capabilities.unsafe_as(Proc(UInt32*, HRESULT)).call(pcapabilities)
  end
  def check_capabilities(pcapabilities : UInt32*) : HRESULT
    @lpVtbl.value.check_capabilities.unsafe_as(Proc(UInt32*, HRESULT)).call(pcapabilities)
  end
  def is_format_supported(pformat : Guid*) : HRESULT
    @lpVtbl.value.is_format_supported.unsafe_as(Proc(Guid*, HRESULT)).call(pformat)
  end
  def query_preferred_format(pformat : Guid*) : HRESULT
    @lpVtbl.value.query_preferred_format.unsafe_as(Proc(Guid*, HRESULT)).call(pformat)
  end
  def get_time_format(pformat : Guid*) : HRESULT
    @lpVtbl.value.get_time_format.unsafe_as(Proc(Guid*, HRESULT)).call(pformat)
  end
  def is_using_time_format(pformat : Guid*) : HRESULT
    @lpVtbl.value.is_using_time_format.unsafe_as(Proc(Guid*, HRESULT)).call(pformat)
  end
  def set_time_format(pformat : Guid*) : HRESULT
    @lpVtbl.value.set_time_format.unsafe_as(Proc(Guid*, HRESULT)).call(pformat)
  end
  def get_duration(pduration : Int64*) : HRESULT
    @lpVtbl.value.get_duration.unsafe_as(Proc(Int64*, HRESULT)).call(pduration)
  end
  def get_stop_position(pstop : Int64*) : HRESULT
    @lpVtbl.value.get_stop_position.unsafe_as(Proc(Int64*, HRESULT)).call(pstop)
  end
  def get_current_position(pcurrent : Int64*) : HRESULT
    @lpVtbl.value.get_current_position.unsafe_as(Proc(Int64*, HRESULT)).call(pcurrent)
  end
  def convert_time_format(ptarget : Int64*, ptargetformat : Guid*, source : Int64, psourceformat : Guid*) : HRESULT
    @lpVtbl.value.convert_time_format.unsafe_as(Proc(Int64*, Guid*, Int64, Guid*, HRESULT)).call(ptarget, ptargetformat, source, psourceformat)
  end
  def set_positions(pcurrent : Int64*, dwcurrentflags : UInt32, pstop : Int64*, dwstopflags : UInt32) : HRESULT
    @lpVtbl.value.set_positions.unsafe_as(Proc(Int64*, UInt32, Int64*, UInt32, HRESULT)).call(pcurrent, dwcurrentflags, pstop, dwstopflags)
  end
  def get_positions(pcurrent : Int64*, pstop : Int64*) : HRESULT
    @lpVtbl.value.get_positions.unsafe_as(Proc(Int64*, Int64*, HRESULT)).call(pcurrent, pstop)
  end
  def get_available(pearliest : Int64*, platest : Int64*) : HRESULT
    @lpVtbl.value.get_available.unsafe_as(Proc(Int64*, Int64*, HRESULT)).call(pearliest, platest)
  end
  def set_rate(drate : Float64) : HRESULT
    @lpVtbl.value.set_rate.unsafe_as(Proc(Float64, HRESULT)).call(drate)
  end
  def get_rate(pdrate : Float64*) : HRESULT
    @lpVtbl.value.get_rate.unsafe_as(Proc(Float64*, HRESULT)).call(pdrate)
  end
  def get_preroll(pllpreroll : Int64*) : HRESULT
    @lpVtbl.value.get_preroll.unsafe_as(Proc(Int64*, HRESULT)).call(pllpreroll)
  end
end
struct LibWin32::IEnumRegFilters
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def next(cfilters : UInt32, apregfilter : REGFILTER**, pcfetched : UInt32*) : HRESULT
    @lpVtbl.value.next.unsafe_as(Proc(UInt32, REGFILTER**, UInt32*, HRESULT)).call(cfilters, apregfilter, pcfetched)
  end
  def skip(cfilters : UInt32) : HRESULT
    @lpVtbl.value.skip.unsafe_as(Proc(UInt32, HRESULT)).call(cfilters)
  end
  def reset : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(HRESULT)).call
  end
  def clone(ppenum : IEnumRegFilters*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(IEnumRegFilters*, HRESULT)).call(ppenum)
  end
end
struct LibWin32::IFilterMapper
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def register_filter(clsid : Guid, name : LibC::LPWSTR, dwmerit : UInt32) : HRESULT
    @lpVtbl.value.register_filter.unsafe_as(Proc(Guid, LibC::LPWSTR, UInt32, HRESULT)).call(clsid, name, dwmerit)
  end
  def register_filter_instance(clsid : Guid, name : LibC::LPWSTR, mrid : Guid*) : HRESULT
    @lpVtbl.value.register_filter_instance.unsafe_as(Proc(Guid, LibC::LPWSTR, Guid*, HRESULT)).call(clsid, name, mrid)
  end
  def register_pin(filter : Guid, name : LibC::LPWSTR, brendered : LibC::BOOL, boutput : LibC::BOOL, bzero : LibC::BOOL, bmany : LibC::BOOL, connectstofilter : Guid, connectstopin : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.register_pin.unsafe_as(Proc(Guid, LibC::LPWSTR, LibC::BOOL, LibC::BOOL, LibC::BOOL, LibC::BOOL, Guid, LibC::LPWSTR, HRESULT)).call(filter, name, brendered, boutput, bzero, bmany, connectstofilter, connectstopin)
  end
  def register_pin_type(clsfilter : Guid, strname : LibC::LPWSTR, clsmajortype : Guid, clssubtype : Guid) : HRESULT
    @lpVtbl.value.register_pin_type.unsafe_as(Proc(Guid, LibC::LPWSTR, Guid, Guid, HRESULT)).call(clsfilter, strname, clsmajortype, clssubtype)
  end
  def unregister_filter(filter : Guid) : HRESULT
    @lpVtbl.value.unregister_filter.unsafe_as(Proc(Guid, HRESULT)).call(filter)
  end
  def unregister_filter_instance(mrid : Guid) : HRESULT
    @lpVtbl.value.unregister_filter_instance.unsafe_as(Proc(Guid, HRESULT)).call(mrid)
  end
  def unregister_pin(filter : Guid, name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.unregister_pin.unsafe_as(Proc(Guid, LibC::LPWSTR, HRESULT)).call(filter, name)
  end
  def enum_matching_filters(ppenum : IEnumRegFilters*, dwmerit : UInt32, binputneeded : LibC::BOOL, clsinmaj : Guid, clsinsub : Guid, brender : LibC::BOOL, boututneeded : LibC::BOOL, clsoutmaj : Guid, clsoutsub : Guid) : HRESULT
    @lpVtbl.value.enum_matching_filters.unsafe_as(Proc(IEnumRegFilters*, UInt32, LibC::BOOL, Guid, Guid, LibC::BOOL, LibC::BOOL, Guid, Guid, HRESULT)).call(ppenum, dwmerit, binputneeded, clsinmaj, clsinsub, brender, boututneeded, clsoutmaj, clsoutsub)
  end
end
struct LibWin32::IFilterMapper2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def create_category(clsidcategory : Guid*, dwcategorymerit : UInt32, description : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.create_category.unsafe_as(Proc(Guid*, UInt32, LibC::LPWSTR, HRESULT)).call(clsidcategory, dwcategorymerit, description)
  end
  def unregister_filter(pclsidcategory : Guid*, szinstance : LibC::LPWSTR, filter : Guid*) : HRESULT
    @lpVtbl.value.unregister_filter.unsafe_as(Proc(Guid*, LibC::LPWSTR, Guid*, HRESULT)).call(pclsidcategory, szinstance, filter)
  end
  def register_filter(clsidfilter : Guid*, name : LibC::LPWSTR, ppmoniker : IMoniker*, pclsidcategory : Guid*, szinstance : LibC::LPWSTR, prf2 : REGFILTER2*) : HRESULT
    @lpVtbl.value.register_filter.unsafe_as(Proc(Guid*, LibC::LPWSTR, IMoniker*, Guid*, LibC::LPWSTR, REGFILTER2*, HRESULT)).call(clsidfilter, name, ppmoniker, pclsidcategory, szinstance, prf2)
  end
  def enum_matching_filters(ppenum : IEnumMoniker*, dwflags : UInt32, bexactmatch : LibC::BOOL, dwmerit : UInt32, binputneeded : LibC::BOOL, cinputtypes : UInt32, pinputtypes : Guid*, pmedin : REGPINMEDIUM*, ppincategoryin : Guid*, brender : LibC::BOOL, boutputneeded : LibC::BOOL, coutputtypes : UInt32, poutputtypes : Guid*, pmedout : REGPINMEDIUM*, ppincategoryout : Guid*) : HRESULT
    @lpVtbl.value.enum_matching_filters.unsafe_as(Proc(IEnumMoniker*, UInt32, LibC::BOOL, UInt32, LibC::BOOL, UInt32, Guid*, REGPINMEDIUM*, Guid*, LibC::BOOL, LibC::BOOL, UInt32, Guid*, REGPINMEDIUM*, Guid*, HRESULT)).call(ppenum, dwflags, bexactmatch, dwmerit, binputneeded, cinputtypes, pinputtypes, pmedin, ppincategoryin, brender, boutputneeded, coutputtypes, poutputtypes, pmedout, ppincategoryout)
  end
end
struct LibWin32::IFilterMapper3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def create_category(clsidcategory : Guid*, dwcategorymerit : UInt32, description : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.create_category.unsafe_as(Proc(Guid*, UInt32, LibC::LPWSTR, HRESULT)).call(clsidcategory, dwcategorymerit, description)
  end
  def unregister_filter(pclsidcategory : Guid*, szinstance : LibC::LPWSTR, filter : Guid*) : HRESULT
    @lpVtbl.value.unregister_filter.unsafe_as(Proc(Guid*, LibC::LPWSTR, Guid*, HRESULT)).call(pclsidcategory, szinstance, filter)
  end
  def register_filter(clsidfilter : Guid*, name : LibC::LPWSTR, ppmoniker : IMoniker*, pclsidcategory : Guid*, szinstance : LibC::LPWSTR, prf2 : REGFILTER2*) : HRESULT
    @lpVtbl.value.register_filter.unsafe_as(Proc(Guid*, LibC::LPWSTR, IMoniker*, Guid*, LibC::LPWSTR, REGFILTER2*, HRESULT)).call(clsidfilter, name, ppmoniker, pclsidcategory, szinstance, prf2)
  end
  def enum_matching_filters(ppenum : IEnumMoniker*, dwflags : UInt32, bexactmatch : LibC::BOOL, dwmerit : UInt32, binputneeded : LibC::BOOL, cinputtypes : UInt32, pinputtypes : Guid*, pmedin : REGPINMEDIUM*, ppincategoryin : Guid*, brender : LibC::BOOL, boutputneeded : LibC::BOOL, coutputtypes : UInt32, poutputtypes : Guid*, pmedout : REGPINMEDIUM*, ppincategoryout : Guid*) : HRESULT
    @lpVtbl.value.enum_matching_filters.unsafe_as(Proc(IEnumMoniker*, UInt32, LibC::BOOL, UInt32, LibC::BOOL, UInt32, Guid*, REGPINMEDIUM*, Guid*, LibC::BOOL, LibC::BOOL, UInt32, Guid*, REGPINMEDIUM*, Guid*, HRESULT)).call(ppenum, dwflags, bexactmatch, dwmerit, binputneeded, cinputtypes, pinputtypes, pmedin, ppincategoryin, brender, boutputneeded, coutputtypes, poutputtypes, pmedout, ppincategoryout)
  end
  def get_i_create_dev_enum(ppenum : ICreateDevEnum*) : HRESULT
    @lpVtbl.value.get_i_create_dev_enum.unsafe_as(Proc(ICreateDevEnum*, HRESULT)).call(ppenum)
  end
end
struct LibWin32::IQualityControl
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def notify(pself : IBaseFilter, q : Quality) : HRESULT
    @lpVtbl.value.notify.unsafe_as(Proc(IBaseFilter, Quality, HRESULT)).call(pself, q)
  end
  def set_sink(piqc : IQualityControl) : HRESULT
    @lpVtbl.value.set_sink.unsafe_as(Proc(IQualityControl, HRESULT)).call(piqc)
  end
end
struct LibWin32::IOverlayNotify
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def on_palette_change(dwcolors : UInt32, ppalette : PALETTEENTRY*) : HRESULT
    @lpVtbl.value.on_palette_change.unsafe_as(Proc(UInt32, PALETTEENTRY*, HRESULT)).call(dwcolors, ppalette)
  end
  def on_clip_change(psourcerect : RECT*, pdestinationrect : RECT*, prgndata : RGNDATA*) : HRESULT
    @lpVtbl.value.on_clip_change.unsafe_as(Proc(RECT*, RECT*, RGNDATA*, HRESULT)).call(psourcerect, pdestinationrect, prgndata)
  end
  def on_color_key_change(pcolorkey : COLORKEY*) : HRESULT
    @lpVtbl.value.on_color_key_change.unsafe_as(Proc(COLORKEY*, HRESULT)).call(pcolorkey)
  end
  def on_position_change(psourcerect : RECT*, pdestinationrect : RECT*) : HRESULT
    @lpVtbl.value.on_position_change.unsafe_as(Proc(RECT*, RECT*, HRESULT)).call(psourcerect, pdestinationrect)
  end
end
struct LibWin32::IOverlayNotify2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def on_palette_change(dwcolors : UInt32, ppalette : PALETTEENTRY*) : HRESULT
    @lpVtbl.value.on_palette_change.unsafe_as(Proc(UInt32, PALETTEENTRY*, HRESULT)).call(dwcolors, ppalette)
  end
  def on_clip_change(psourcerect : RECT*, pdestinationrect : RECT*, prgndata : RGNDATA*) : HRESULT
    @lpVtbl.value.on_clip_change.unsafe_as(Proc(RECT*, RECT*, RGNDATA*, HRESULT)).call(psourcerect, pdestinationrect, prgndata)
  end
  def on_color_key_change(pcolorkey : COLORKEY*) : HRESULT
    @lpVtbl.value.on_color_key_change.unsafe_as(Proc(COLORKEY*, HRESULT)).call(pcolorkey)
  end
  def on_position_change(psourcerect : RECT*, pdestinationrect : RECT*) : HRESULT
    @lpVtbl.value.on_position_change.unsafe_as(Proc(RECT*, RECT*, HRESULT)).call(psourcerect, pdestinationrect)
  end
  def on_display_change(hmonitor : HMONITOR) : HRESULT
    @lpVtbl.value.on_display_change.unsafe_as(Proc(HMONITOR, HRESULT)).call(hmonitor)
  end
end
struct LibWin32::IOverlay
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_palette(pdwcolors : UInt32*, pppalette : PALETTEENTRY**) : HRESULT
    @lpVtbl.value.get_palette.unsafe_as(Proc(UInt32*, PALETTEENTRY**, HRESULT)).call(pdwcolors, pppalette)
  end
  def set_palette(dwcolors : UInt32, ppalette : PALETTEENTRY*) : HRESULT
    @lpVtbl.value.set_palette.unsafe_as(Proc(UInt32, PALETTEENTRY*, HRESULT)).call(dwcolors, ppalette)
  end
  def get_default_color_key(pcolorkey : COLORKEY*) : HRESULT
    @lpVtbl.value.get_default_color_key.unsafe_as(Proc(COLORKEY*, HRESULT)).call(pcolorkey)
  end
  def get_color_key(pcolorkey : COLORKEY*) : HRESULT
    @lpVtbl.value.get_color_key.unsafe_as(Proc(COLORKEY*, HRESULT)).call(pcolorkey)
  end
  def set_color_key(pcolorkey : COLORKEY*) : HRESULT
    @lpVtbl.value.set_color_key.unsafe_as(Proc(COLORKEY*, HRESULT)).call(pcolorkey)
  end
  def get_window_handle(phwnd : HANDLE*) : HRESULT
    @lpVtbl.value.get_window_handle.unsafe_as(Proc(HANDLE*, HRESULT)).call(phwnd)
  end
  def get_clip_list(psourcerect : RECT*, pdestinationrect : RECT*, pprgndata : RGNDATA**) : HRESULT
    @lpVtbl.value.get_clip_list.unsafe_as(Proc(RECT*, RECT*, RGNDATA**, HRESULT)).call(psourcerect, pdestinationrect, pprgndata)
  end
  def get_video_position(psourcerect : RECT*, pdestinationrect : RECT*) : HRESULT
    @lpVtbl.value.get_video_position.unsafe_as(Proc(RECT*, RECT*, HRESULT)).call(psourcerect, pdestinationrect)
  end
  def advise(poverlaynotify : IOverlayNotify, dwinterests : UInt32) : HRESULT
    @lpVtbl.value.advise.unsafe_as(Proc(IOverlayNotify, UInt32, HRESULT)).call(poverlaynotify, dwinterests)
  end
  def unadvise : HRESULT
    @lpVtbl.value.unadvise.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IMediaEventSink
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def notify(eventcode : Int32, eventparam1 : LibC::IntPtrT, eventparam2 : LibC::IntPtrT) : HRESULT
    @lpVtbl.value.notify.unsafe_as(Proc(Int32, LibC::IntPtrT, LibC::IntPtrT, HRESULT)).call(eventcode, eventparam1, eventparam2)
  end
end
struct LibWin32::IFileSourceFilter
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def load(pszfilename : LibC::LPWSTR, pmt : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.load.unsafe_as(Proc(LibC::LPWSTR, AM_MEDIA_TYPE*, HRESULT)).call(pszfilename, pmt)
  end
  def get_cur_file(ppszfilename : LibC::LPWSTR*, pmt : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.get_cur_file.unsafe_as(Proc(LibC::LPWSTR*, AM_MEDIA_TYPE*, HRESULT)).call(ppszfilename, pmt)
  end
end
struct LibWin32::IFileSinkFilter
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_file_name(pszfilename : LibC::LPWSTR, pmt : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.set_file_name.unsafe_as(Proc(LibC::LPWSTR, AM_MEDIA_TYPE*, HRESULT)).call(pszfilename, pmt)
  end
  def get_cur_file(ppszfilename : LibC::LPWSTR*, pmt : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.get_cur_file.unsafe_as(Proc(LibC::LPWSTR*, AM_MEDIA_TYPE*, HRESULT)).call(ppszfilename, pmt)
  end
end
struct LibWin32::IFileSinkFilter2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_file_name(pszfilename : LibC::LPWSTR, pmt : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.set_file_name.unsafe_as(Proc(LibC::LPWSTR, AM_MEDIA_TYPE*, HRESULT)).call(pszfilename, pmt)
  end
  def get_cur_file(ppszfilename : LibC::LPWSTR*, pmt : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.get_cur_file.unsafe_as(Proc(LibC::LPWSTR*, AM_MEDIA_TYPE*, HRESULT)).call(ppszfilename, pmt)
  end
  def set_mode(dwflags : UInt32) : HRESULT
    @lpVtbl.value.set_mode.unsafe_as(Proc(UInt32, HRESULT)).call(dwflags)
  end
  def get_mode(pdwflags : UInt32*) : HRESULT
    @lpVtbl.value.get_mode.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwflags)
  end
end
struct LibWin32::IGraphBuilder
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def add_filter(pfilter : IBaseFilter, pname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.add_filter.unsafe_as(Proc(IBaseFilter, LibC::LPWSTR, HRESULT)).call(pfilter, pname)
  end
  def remove_filter(pfilter : IBaseFilter) : HRESULT
    @lpVtbl.value.remove_filter.unsafe_as(Proc(IBaseFilter, HRESULT)).call(pfilter)
  end
  def enum_filters(ppenum : IEnumFilters*) : HRESULT
    @lpVtbl.value.enum_filters.unsafe_as(Proc(IEnumFilters*, HRESULT)).call(ppenum)
  end
  def find_filter_by_name(pname : LibC::LPWSTR, ppfilter : IBaseFilter*) : HRESULT
    @lpVtbl.value.find_filter_by_name.unsafe_as(Proc(LibC::LPWSTR, IBaseFilter*, HRESULT)).call(pname, ppfilter)
  end
  def connect_direct(ppinout : IPin, ppinin : IPin, pmt : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.connect_direct.unsafe_as(Proc(IPin, IPin, AM_MEDIA_TYPE*, HRESULT)).call(ppinout, ppinin, pmt)
  end
  def reconnect(ppin : IPin) : HRESULT
    @lpVtbl.value.reconnect.unsafe_as(Proc(IPin, HRESULT)).call(ppin)
  end
  def disconnect(ppin : IPin) : HRESULT
    @lpVtbl.value.disconnect.unsafe_as(Proc(IPin, HRESULT)).call(ppin)
  end
  def set_default_sync_source : HRESULT
    @lpVtbl.value.set_default_sync_source.unsafe_as(Proc(HRESULT)).call
  end
  def connect(ppinout : IPin, ppinin : IPin) : HRESULT
    @lpVtbl.value.connect.unsafe_as(Proc(IPin, IPin, HRESULT)).call(ppinout, ppinin)
  end
  def render(ppinout : IPin) : HRESULT
    @lpVtbl.value.render.unsafe_as(Proc(IPin, HRESULT)).call(ppinout)
  end
  def render_file(lpcwstrfile : LibC::LPWSTR, lpcwstrplaylist : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.render_file.unsafe_as(Proc(LibC::LPWSTR, LibC::LPWSTR, HRESULT)).call(lpcwstrfile, lpcwstrplaylist)
  end
  def add_source_filter(lpcwstrfilename : LibC::LPWSTR, lpcwstrfiltername : LibC::LPWSTR, ppfilter : IBaseFilter*) : HRESULT
    @lpVtbl.value.add_source_filter.unsafe_as(Proc(LibC::LPWSTR, LibC::LPWSTR, IBaseFilter*, HRESULT)).call(lpcwstrfilename, lpcwstrfiltername, ppfilter)
  end
  def set_log_file(hfile : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.set_log_file.unsafe_as(Proc(LibC::UINT_PTR, HRESULT)).call(hfile)
  end
  def abort : HRESULT
    @lpVtbl.value.abort.unsafe_as(Proc(HRESULT)).call
  end
  def should_operation_continue : HRESULT
    @lpVtbl.value.should_operation_continue.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::ICaptureGraphBuilder
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_filtergraph(pfg : IGraphBuilder) : HRESULT
    @lpVtbl.value.set_filtergraph.unsafe_as(Proc(IGraphBuilder, HRESULT)).call(pfg)
  end
  def get_filtergraph(ppfg : IGraphBuilder*) : HRESULT
    @lpVtbl.value.get_filtergraph.unsafe_as(Proc(IGraphBuilder*, HRESULT)).call(ppfg)
  end
  def set_output_file_name(ptype : Guid*, lpstrfile : LibC::LPWSTR, ppf : IBaseFilter*, ppsink : IFileSinkFilter*) : HRESULT
    @lpVtbl.value.set_output_file_name.unsafe_as(Proc(Guid*, LibC::LPWSTR, IBaseFilter*, IFileSinkFilter*, HRESULT)).call(ptype, lpstrfile, ppf, ppsink)
  end
  def find_interface(pcategory : Guid*, pf : IBaseFilter, riid : Guid*, ppint : Void**) : HRESULT
    @lpVtbl.value.find_interface.unsafe_as(Proc(Guid*, IBaseFilter, Guid*, Void**, HRESULT)).call(pcategory, pf, riid, ppint)
  end
  def render_stream(pcategory : Guid*, psource : IUnknown, pfcompressor : IBaseFilter, pfrenderer : IBaseFilter) : HRESULT
    @lpVtbl.value.render_stream.unsafe_as(Proc(Guid*, IUnknown, IBaseFilter, IBaseFilter, HRESULT)).call(pcategory, psource, pfcompressor, pfrenderer)
  end
  def control_stream(pcategory : Guid*, pfilter : IBaseFilter, pstart : Int64*, pstop : Int64*, wstartcookie : UInt16, wstopcookie : UInt16) : HRESULT
    @lpVtbl.value.control_stream.unsafe_as(Proc(Guid*, IBaseFilter, Int64*, Int64*, UInt16, UInt16, HRESULT)).call(pcategory, pfilter, pstart, pstop, wstartcookie, wstopcookie)
  end
  def alloc_cap_file(lpstr : LibC::LPWSTR, dwlsize : UInt64) : HRESULT
    @lpVtbl.value.alloc_cap_file.unsafe_as(Proc(LibC::LPWSTR, UInt64, HRESULT)).call(lpstr, dwlsize)
  end
  def copy_capture_file(lpwstrold : LibC::LPWSTR, lpwstrnew : LibC::LPWSTR, fallowescabort : Int32, pcallback : IAMCopyCaptureFileProgress) : HRESULT
    @lpVtbl.value.copy_capture_file.unsafe_as(Proc(LibC::LPWSTR, LibC::LPWSTR, Int32, IAMCopyCaptureFileProgress, HRESULT)).call(lpwstrold, lpwstrnew, fallowescabort, pcallback)
  end
end
struct LibWin32::IAMCopyCaptureFileProgress
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def progress(iprogress : Int32) : HRESULT
    @lpVtbl.value.progress.unsafe_as(Proc(Int32, HRESULT)).call(iprogress)
  end
end
struct LibWin32::ICaptureGraphBuilder2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_filtergraph(pfg : IGraphBuilder) : HRESULT
    @lpVtbl.value.set_filtergraph.unsafe_as(Proc(IGraphBuilder, HRESULT)).call(pfg)
  end
  def get_filtergraph(ppfg : IGraphBuilder*) : HRESULT
    @lpVtbl.value.get_filtergraph.unsafe_as(Proc(IGraphBuilder*, HRESULT)).call(ppfg)
  end
  def set_output_file_name(ptype : Guid*, lpstrfile : LibC::LPWSTR, ppf : IBaseFilter*, ppsink : IFileSinkFilter*) : HRESULT
    @lpVtbl.value.set_output_file_name.unsafe_as(Proc(Guid*, LibC::LPWSTR, IBaseFilter*, IFileSinkFilter*, HRESULT)).call(ptype, lpstrfile, ppf, ppsink)
  end
  def find_interface(pcategory : Guid*, ptype : Guid*, pf : IBaseFilter, riid : Guid*, ppint : Void**) : HRESULT
    @lpVtbl.value.find_interface.unsafe_as(Proc(Guid*, Guid*, IBaseFilter, Guid*, Void**, HRESULT)).call(pcategory, ptype, pf, riid, ppint)
  end
  def render_stream(pcategory : Guid*, ptype : Guid*, psource : IUnknown, pfcompressor : IBaseFilter, pfrenderer : IBaseFilter) : HRESULT
    @lpVtbl.value.render_stream.unsafe_as(Proc(Guid*, Guid*, IUnknown, IBaseFilter, IBaseFilter, HRESULT)).call(pcategory, ptype, psource, pfcompressor, pfrenderer)
  end
  def control_stream(pcategory : Guid*, ptype : Guid*, pfilter : IBaseFilter, pstart : Int64*, pstop : Int64*, wstartcookie : UInt16, wstopcookie : UInt16) : HRESULT
    @lpVtbl.value.control_stream.unsafe_as(Proc(Guid*, Guid*, IBaseFilter, Int64*, Int64*, UInt16, UInt16, HRESULT)).call(pcategory, ptype, pfilter, pstart, pstop, wstartcookie, wstopcookie)
  end
  def alloc_cap_file(lpstr : LibC::LPWSTR, dwlsize : UInt64) : HRESULT
    @lpVtbl.value.alloc_cap_file.unsafe_as(Proc(LibC::LPWSTR, UInt64, HRESULT)).call(lpstr, dwlsize)
  end
  def copy_capture_file(lpwstrold : LibC::LPWSTR, lpwstrnew : LibC::LPWSTR, fallowescabort : Int32, pcallback : IAMCopyCaptureFileProgress) : HRESULT
    @lpVtbl.value.copy_capture_file.unsafe_as(Proc(LibC::LPWSTR, LibC::LPWSTR, Int32, IAMCopyCaptureFileProgress, HRESULT)).call(lpwstrold, lpwstrnew, fallowescabort, pcallback)
  end
  def find_pin(psource : IUnknown, pindir : PIN_DIRECTION, pcategory : Guid*, ptype : Guid*, funconnected : LibC::BOOL, num : Int32, pppin : IPin*) : HRESULT
    @lpVtbl.value.find_pin.unsafe_as(Proc(IUnknown, PIN_DIRECTION, Guid*, Guid*, LibC::BOOL, Int32, IPin*, HRESULT)).call(psource, pindir, pcategory, ptype, funconnected, num, pppin)
  end
end
struct LibWin32::IFilterGraph2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def add_filter(pfilter : IBaseFilter, pname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.add_filter.unsafe_as(Proc(IBaseFilter, LibC::LPWSTR, HRESULT)).call(pfilter, pname)
  end
  def remove_filter(pfilter : IBaseFilter) : HRESULT
    @lpVtbl.value.remove_filter.unsafe_as(Proc(IBaseFilter, HRESULT)).call(pfilter)
  end
  def enum_filters(ppenum : IEnumFilters*) : HRESULT
    @lpVtbl.value.enum_filters.unsafe_as(Proc(IEnumFilters*, HRESULT)).call(ppenum)
  end
  def find_filter_by_name(pname : LibC::LPWSTR, ppfilter : IBaseFilter*) : HRESULT
    @lpVtbl.value.find_filter_by_name.unsafe_as(Proc(LibC::LPWSTR, IBaseFilter*, HRESULT)).call(pname, ppfilter)
  end
  def connect_direct(ppinout : IPin, ppinin : IPin, pmt : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.connect_direct.unsafe_as(Proc(IPin, IPin, AM_MEDIA_TYPE*, HRESULT)).call(ppinout, ppinin, pmt)
  end
  def reconnect(ppin : IPin) : HRESULT
    @lpVtbl.value.reconnect.unsafe_as(Proc(IPin, HRESULT)).call(ppin)
  end
  def disconnect(ppin : IPin) : HRESULT
    @lpVtbl.value.disconnect.unsafe_as(Proc(IPin, HRESULT)).call(ppin)
  end
  def set_default_sync_source : HRESULT
    @lpVtbl.value.set_default_sync_source.unsafe_as(Proc(HRESULT)).call
  end
  def connect(ppinout : IPin, ppinin : IPin) : HRESULT
    @lpVtbl.value.connect.unsafe_as(Proc(IPin, IPin, HRESULT)).call(ppinout, ppinin)
  end
  def render(ppinout : IPin) : HRESULT
    @lpVtbl.value.render.unsafe_as(Proc(IPin, HRESULT)).call(ppinout)
  end
  def render_file(lpcwstrfile : LibC::LPWSTR, lpcwstrplaylist : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.render_file.unsafe_as(Proc(LibC::LPWSTR, LibC::LPWSTR, HRESULT)).call(lpcwstrfile, lpcwstrplaylist)
  end
  def add_source_filter(lpcwstrfilename : LibC::LPWSTR, lpcwstrfiltername : LibC::LPWSTR, ppfilter : IBaseFilter*) : HRESULT
    @lpVtbl.value.add_source_filter.unsafe_as(Proc(LibC::LPWSTR, LibC::LPWSTR, IBaseFilter*, HRESULT)).call(lpcwstrfilename, lpcwstrfiltername, ppfilter)
  end
  def set_log_file(hfile : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.set_log_file.unsafe_as(Proc(LibC::UINT_PTR, HRESULT)).call(hfile)
  end
  def abort : HRESULT
    @lpVtbl.value.abort.unsafe_as(Proc(HRESULT)).call
  end
  def should_operation_continue : HRESULT
    @lpVtbl.value.should_operation_continue.unsafe_as(Proc(HRESULT)).call
  end
  def add_source_filter_for_moniker(pmoniker : IMoniker, pctx : IBindCtx, lpcwstrfiltername : LibC::LPWSTR, ppfilter : IBaseFilter*) : HRESULT
    @lpVtbl.value.add_source_filter_for_moniker.unsafe_as(Proc(IMoniker, IBindCtx, LibC::LPWSTR, IBaseFilter*, HRESULT)).call(pmoniker, pctx, lpcwstrfiltername, ppfilter)
  end
  def reconnect_ex(ppin : IPin, pmt : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.reconnect_ex.unsafe_as(Proc(IPin, AM_MEDIA_TYPE*, HRESULT)).call(ppin, pmt)
  end
  def render_ex(ppinout : IPin, dwflags : UInt32, pvcontext : UInt32*) : HRESULT
    @lpVtbl.value.render_ex.unsafe_as(Proc(IPin, UInt32, UInt32*, HRESULT)).call(ppinout, dwflags, pvcontext)
  end
end
struct LibWin32::IFilterGraph3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def add_filter(pfilter : IBaseFilter, pname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.add_filter.unsafe_as(Proc(IBaseFilter, LibC::LPWSTR, HRESULT)).call(pfilter, pname)
  end
  def remove_filter(pfilter : IBaseFilter) : HRESULT
    @lpVtbl.value.remove_filter.unsafe_as(Proc(IBaseFilter, HRESULT)).call(pfilter)
  end
  def enum_filters(ppenum : IEnumFilters*) : HRESULT
    @lpVtbl.value.enum_filters.unsafe_as(Proc(IEnumFilters*, HRESULT)).call(ppenum)
  end
  def find_filter_by_name(pname : LibC::LPWSTR, ppfilter : IBaseFilter*) : HRESULT
    @lpVtbl.value.find_filter_by_name.unsafe_as(Proc(LibC::LPWSTR, IBaseFilter*, HRESULT)).call(pname, ppfilter)
  end
  def connect_direct(ppinout : IPin, ppinin : IPin, pmt : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.connect_direct.unsafe_as(Proc(IPin, IPin, AM_MEDIA_TYPE*, HRESULT)).call(ppinout, ppinin, pmt)
  end
  def reconnect(ppin : IPin) : HRESULT
    @lpVtbl.value.reconnect.unsafe_as(Proc(IPin, HRESULT)).call(ppin)
  end
  def disconnect(ppin : IPin) : HRESULT
    @lpVtbl.value.disconnect.unsafe_as(Proc(IPin, HRESULT)).call(ppin)
  end
  def set_default_sync_source : HRESULT
    @lpVtbl.value.set_default_sync_source.unsafe_as(Proc(HRESULT)).call
  end
  def connect(ppinout : IPin, ppinin : IPin) : HRESULT
    @lpVtbl.value.connect.unsafe_as(Proc(IPin, IPin, HRESULT)).call(ppinout, ppinin)
  end
  def render(ppinout : IPin) : HRESULT
    @lpVtbl.value.render.unsafe_as(Proc(IPin, HRESULT)).call(ppinout)
  end
  def render_file(lpcwstrfile : LibC::LPWSTR, lpcwstrplaylist : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.render_file.unsafe_as(Proc(LibC::LPWSTR, LibC::LPWSTR, HRESULT)).call(lpcwstrfile, lpcwstrplaylist)
  end
  def add_source_filter(lpcwstrfilename : LibC::LPWSTR, lpcwstrfiltername : LibC::LPWSTR, ppfilter : IBaseFilter*) : HRESULT
    @lpVtbl.value.add_source_filter.unsafe_as(Proc(LibC::LPWSTR, LibC::LPWSTR, IBaseFilter*, HRESULT)).call(lpcwstrfilename, lpcwstrfiltername, ppfilter)
  end
  def set_log_file(hfile : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.set_log_file.unsafe_as(Proc(LibC::UINT_PTR, HRESULT)).call(hfile)
  end
  def abort : HRESULT
    @lpVtbl.value.abort.unsafe_as(Proc(HRESULT)).call
  end
  def should_operation_continue : HRESULT
    @lpVtbl.value.should_operation_continue.unsafe_as(Proc(HRESULT)).call
  end
  def add_source_filter_for_moniker(pmoniker : IMoniker, pctx : IBindCtx, lpcwstrfiltername : LibC::LPWSTR, ppfilter : IBaseFilter*) : HRESULT
    @lpVtbl.value.add_source_filter_for_moniker.unsafe_as(Proc(IMoniker, IBindCtx, LibC::LPWSTR, IBaseFilter*, HRESULT)).call(pmoniker, pctx, lpcwstrfiltername, ppfilter)
  end
  def reconnect_ex(ppin : IPin, pmt : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.reconnect_ex.unsafe_as(Proc(IPin, AM_MEDIA_TYPE*, HRESULT)).call(ppin, pmt)
  end
  def render_ex(ppinout : IPin, dwflags : UInt32, pvcontext : UInt32*) : HRESULT
    @lpVtbl.value.render_ex.unsafe_as(Proc(IPin, UInt32, UInt32*, HRESULT)).call(ppinout, dwflags, pvcontext)
  end
  def set_sync_source_ex(pclockformostoffiltergraph : IReferenceClock, pclockforfilter : IReferenceClock, pfilter : IBaseFilter) : HRESULT
    @lpVtbl.value.set_sync_source_ex.unsafe_as(Proc(IReferenceClock, IReferenceClock, IBaseFilter, HRESULT)).call(pclockformostoffiltergraph, pclockforfilter, pfilter)
  end
end
struct LibWin32::IStreamBuilder
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def render(ppinout : IPin, pgraph : IGraphBuilder) : HRESULT
    @lpVtbl.value.render.unsafe_as(Proc(IPin, IGraphBuilder, HRESULT)).call(ppinout, pgraph)
  end
  def backout(ppinout : IPin, pgraph : IGraphBuilder) : HRESULT
    @lpVtbl.value.backout.unsafe_as(Proc(IPin, IGraphBuilder, HRESULT)).call(ppinout, pgraph)
  end
end
struct LibWin32::IAsyncReader
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def request_allocator(ppreferred : IMemAllocator, pprops : ALLOCATOR_PROPERTIES*, ppactual : IMemAllocator*) : HRESULT
    @lpVtbl.value.request_allocator.unsafe_as(Proc(IMemAllocator, ALLOCATOR_PROPERTIES*, IMemAllocator*, HRESULT)).call(ppreferred, pprops, ppactual)
  end
  def request(psample : IMediaSample, dwuser : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.request.unsafe_as(Proc(IMediaSample, LibC::UINT_PTR, HRESULT)).call(psample, dwuser)
  end
  def wait_for_next(dwtimeout : UInt32, ppsample : IMediaSample*, pdwuser : LibC::UINT_PTR*) : HRESULT
    @lpVtbl.value.wait_for_next.unsafe_as(Proc(UInt32, IMediaSample*, LibC::UINT_PTR*, HRESULT)).call(dwtimeout, ppsample, pdwuser)
  end
  def sync_read_aligned(psample : IMediaSample) : HRESULT
    @lpVtbl.value.sync_read_aligned.unsafe_as(Proc(IMediaSample, HRESULT)).call(psample)
  end
  def sync_read(llposition : Int64, llength : Int32, pbuffer : UInt8*) : HRESULT
    @lpVtbl.value.sync_read.unsafe_as(Proc(Int64, Int32, UInt8*, HRESULT)).call(llposition, llength, pbuffer)
  end
  def length(ptotal : Int64*, pavailable : Int64*) : HRESULT
    @lpVtbl.value.length.unsafe_as(Proc(Int64*, Int64*, HRESULT)).call(ptotal, pavailable)
  end
  def begin_flush : HRESULT
    @lpVtbl.value.begin_flush.unsafe_as(Proc(HRESULT)).call
  end
  def end_flush : HRESULT
    @lpVtbl.value.end_flush.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IGraphVersion
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def query_version(pversion : Int32*) : HRESULT
    @lpVtbl.value.query_version.unsafe_as(Proc(Int32*, HRESULT)).call(pversion)
  end
end
struct LibWin32::IResourceConsumer
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def acquire_resource(idresource : Int32) : HRESULT
    @lpVtbl.value.acquire_resource.unsafe_as(Proc(Int32, HRESULT)).call(idresource)
  end
  def release_resource(idresource : Int32) : HRESULT
    @lpVtbl.value.release_resource.unsafe_as(Proc(Int32, HRESULT)).call(idresource)
  end
end
struct LibWin32::IResourceManager
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def register(pname : LibC::LPWSTR, cresource : Int32, pltoken : Int32*) : HRESULT
    @lpVtbl.value.register.unsafe_as(Proc(LibC::LPWSTR, Int32, Int32*, HRESULT)).call(pname, cresource, pltoken)
  end
  def register_group(pname : LibC::LPWSTR, cresource : Int32, paltokens : Int32*, pltoken : Int32*) : HRESULT
    @lpVtbl.value.register_group.unsafe_as(Proc(LibC::LPWSTR, Int32, Int32*, Int32*, HRESULT)).call(pname, cresource, paltokens, pltoken)
  end
  def request_resource(idresource : Int32, pfocusobject : IUnknown, pconsumer : IResourceConsumer) : HRESULT
    @lpVtbl.value.request_resource.unsafe_as(Proc(Int32, IUnknown, IResourceConsumer, HRESULT)).call(idresource, pfocusobject, pconsumer)
  end
  def notify_acquire(idresource : Int32, pconsumer : IResourceConsumer, hr : HRESULT) : HRESULT
    @lpVtbl.value.notify_acquire.unsafe_as(Proc(Int32, IResourceConsumer, HRESULT, HRESULT)).call(idresource, pconsumer, hr)
  end
  def notify_release(idresource : Int32, pconsumer : IResourceConsumer, bstillwant : LibC::BOOL) : HRESULT
    @lpVtbl.value.notify_release.unsafe_as(Proc(Int32, IResourceConsumer, LibC::BOOL, HRESULT)).call(idresource, pconsumer, bstillwant)
  end
  def cancel_request(idresource : Int32, pconsumer : IResourceConsumer) : HRESULT
    @lpVtbl.value.cancel_request.unsafe_as(Proc(Int32, IResourceConsumer, HRESULT)).call(idresource, pconsumer)
  end
  def set_focus(pfocusobject : IUnknown) : HRESULT
    @lpVtbl.value.set_focus.unsafe_as(Proc(IUnknown, HRESULT)).call(pfocusobject)
  end
  def release_focus(pfocusobject : IUnknown) : HRESULT
    @lpVtbl.value.release_focus.unsafe_as(Proc(IUnknown, HRESULT)).call(pfocusobject)
  end
end
struct LibWin32::IDistributorNotify
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def stop : HRESULT
    @lpVtbl.value.stop.unsafe_as(Proc(HRESULT)).call
  end
  def pause : HRESULT
    @lpVtbl.value.pause.unsafe_as(Proc(HRESULT)).call
  end
  def run(tstart : Int64) : HRESULT
    @lpVtbl.value.run.unsafe_as(Proc(Int64, HRESULT)).call(tstart)
  end
  def set_sync_source(pclock : IReferenceClock) : HRESULT
    @lpVtbl.value.set_sync_source.unsafe_as(Proc(IReferenceClock, HRESULT)).call(pclock)
  end
  def notify_graph_change : HRESULT
    @lpVtbl.value.notify_graph_change.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IAMStreamControl
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def start_at(ptstart : Int64*, dwcookie : UInt32) : HRESULT
    @lpVtbl.value.start_at.unsafe_as(Proc(Int64*, UInt32, HRESULT)).call(ptstart, dwcookie)
  end
  def stop_at(ptstop : Int64*, bsendextra : LibC::BOOL, dwcookie : UInt32) : HRESULT
    @lpVtbl.value.stop_at.unsafe_as(Proc(Int64*, LibC::BOOL, UInt32, HRESULT)).call(ptstop, bsendextra, dwcookie)
  end
  def get_info(pinfo : AM_STREAM_INFO*) : HRESULT
    @lpVtbl.value.get_info.unsafe_as(Proc(AM_STREAM_INFO*, HRESULT)).call(pinfo)
  end
end
struct LibWin32::ISeekingPassThru
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def init(bsupportrendering : LibC::BOOL, ppin : IPin) : HRESULT
    @lpVtbl.value.init.unsafe_as(Proc(LibC::BOOL, IPin, HRESULT)).call(bsupportrendering, ppin)
  end
end
struct LibWin32::IAMStreamConfig
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_format(pmt : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.set_format.unsafe_as(Proc(AM_MEDIA_TYPE*, HRESULT)).call(pmt)
  end
  def get_format(ppmt : AM_MEDIA_TYPE**) : HRESULT
    @lpVtbl.value.get_format.unsafe_as(Proc(AM_MEDIA_TYPE**, HRESULT)).call(ppmt)
  end
  def get_number_of_capabilities(picount : Int32*, pisize : Int32*) : HRESULT
    @lpVtbl.value.get_number_of_capabilities.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(picount, pisize)
  end
  def get_stream_caps(iindex : Int32, ppmt : AM_MEDIA_TYPE**, pscc : UInt8*) : HRESULT
    @lpVtbl.value.get_stream_caps.unsafe_as(Proc(Int32, AM_MEDIA_TYPE**, UInt8*, HRESULT)).call(iindex, ppmt, pscc)
  end
end
struct LibWin32::IConfigInterleaving
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def put_mode(mode : InterleavingMode) : HRESULT
    @lpVtbl.value.put_mode.unsafe_as(Proc(InterleavingMode, HRESULT)).call(mode)
  end
  def get_mode(pmode : InterleavingMode*) : HRESULT
    @lpVtbl.value.get_mode.unsafe_as(Proc(InterleavingMode*, HRESULT)).call(pmode)
  end
  def put_interleaving(prtinterleave : Int64*, prtpreroll : Int64*) : HRESULT
    @lpVtbl.value.put_interleaving.unsafe_as(Proc(Int64*, Int64*, HRESULT)).call(prtinterleave, prtpreroll)
  end
  def get_interleaving(prtinterleave : Int64*, prtpreroll : Int64*) : HRESULT
    @lpVtbl.value.get_interleaving.unsafe_as(Proc(Int64*, Int64*, HRESULT)).call(prtinterleave, prtpreroll)
  end
end
struct LibWin32::IConfigAviMux
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_master_stream(istream : Int32) : HRESULT
    @lpVtbl.value.set_master_stream.unsafe_as(Proc(Int32, HRESULT)).call(istream)
  end
  def get_master_stream(pstream : Int32*) : HRESULT
    @lpVtbl.value.get_master_stream.unsafe_as(Proc(Int32*, HRESULT)).call(pstream)
  end
  def set_output_compatibility_index(foldindex : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_output_compatibility_index.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(foldindex)
  end
  def get_output_compatibility_index(pfoldindex : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_output_compatibility_index.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pfoldindex)
  end
end
struct LibWin32::IAMVideoCompression
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def put_key_frame_rate(keyframerate : Int32) : HRESULT
    @lpVtbl.value.put_key_frame_rate.unsafe_as(Proc(Int32, HRESULT)).call(keyframerate)
  end
  def get_key_frame_rate(pkeyframerate : Int32*) : HRESULT
    @lpVtbl.value.get_key_frame_rate.unsafe_as(Proc(Int32*, HRESULT)).call(pkeyframerate)
  end
  def put_p_frames_per_key_frame(pframesperkeyframe : Int32) : HRESULT
    @lpVtbl.value.put_p_frames_per_key_frame.unsafe_as(Proc(Int32, HRESULT)).call(pframesperkeyframe)
  end
  def get_p_frames_per_key_frame(ppframesperkeyframe : Int32*) : HRESULT
    @lpVtbl.value.get_p_frames_per_key_frame.unsafe_as(Proc(Int32*, HRESULT)).call(ppframesperkeyframe)
  end
  def put_quality(quality : Float64) : HRESULT
    @lpVtbl.value.put_quality.unsafe_as(Proc(Float64, HRESULT)).call(quality)
  end
  def get_quality(pquality : Float64*) : HRESULT
    @lpVtbl.value.get_quality.unsafe_as(Proc(Float64*, HRESULT)).call(pquality)
  end
  def put_window_size(windowsize : UInt64) : HRESULT
    @lpVtbl.value.put_window_size.unsafe_as(Proc(UInt64, HRESULT)).call(windowsize)
  end
  def get_window_size(pwindowsize : UInt64*) : HRESULT
    @lpVtbl.value.get_window_size.unsafe_as(Proc(UInt64*, HRESULT)).call(pwindowsize)
  end
  def get_info(pszversion : LibC::LPWSTR, pcbversion : Int32*, pszdescription : LibC::LPWSTR, pcbdescription : Int32*, pdefaultkeyframerate : Int32*, pdefaultpframesperkey : Int32*, pdefaultquality : Float64*, pcapabilities : Int32*) : HRESULT
    @lpVtbl.value.get_info.unsafe_as(Proc(LibC::LPWSTR, Int32*, LibC::LPWSTR, Int32*, Int32*, Int32*, Float64*, Int32*, HRESULT)).call(pszversion, pcbversion, pszdescription, pcbdescription, pdefaultkeyframerate, pdefaultpframesperkey, pdefaultquality, pcapabilities)
  end
  def override_key_frame(framenumber : Int32) : HRESULT
    @lpVtbl.value.override_key_frame.unsafe_as(Proc(Int32, HRESULT)).call(framenumber)
  end
  def override_frame_size(framenumber : Int32, size : Int32) : HRESULT
    @lpVtbl.value.override_frame_size.unsafe_as(Proc(Int32, Int32, HRESULT)).call(framenumber, size)
  end
end
struct LibWin32::IAMVfwCaptureDialogs
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def has_dialog(idialog : Int32) : HRESULT
    @lpVtbl.value.has_dialog.unsafe_as(Proc(Int32, HRESULT)).call(idialog)
  end
  def show_dialog(idialog : Int32, hwnd : LibC::HANDLE) : HRESULT
    @lpVtbl.value.show_dialog.unsafe_as(Proc(Int32, LibC::HANDLE, HRESULT)).call(idialog, hwnd)
  end
  def send_driver_message(idialog : Int32, umsg : Int32, dw1 : Int32, dw2 : Int32) : HRESULT
    @lpVtbl.value.send_driver_message.unsafe_as(Proc(Int32, Int32, Int32, Int32, HRESULT)).call(idialog, umsg, dw1, dw2)
  end
end
struct LibWin32::IAMVfwCompressDialogs
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def show_dialog(idialog : Int32, hwnd : LibC::HANDLE) : HRESULT
    @lpVtbl.value.show_dialog.unsafe_as(Proc(Int32, LibC::HANDLE, HRESULT)).call(idialog, hwnd)
  end
  def get_state(pstate : Void*, pcbstate : Int32*) : HRESULT
    @lpVtbl.value.get_state.unsafe_as(Proc(Void*, Int32*, HRESULT)).call(pstate, pcbstate)
  end
  def set_state(pstate : Void*, cbstate : Int32) : HRESULT
    @lpVtbl.value.set_state.unsafe_as(Proc(Void*, Int32, HRESULT)).call(pstate, cbstate)
  end
  def send_driver_message(umsg : Int32, dw1 : Int32, dw2 : Int32) : HRESULT
    @lpVtbl.value.send_driver_message.unsafe_as(Proc(Int32, Int32, Int32, HRESULT)).call(umsg, dw1, dw2)
  end
end
struct LibWin32::IAMDroppedFrames
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_num_dropped(pldropped : Int32*) : HRESULT
    @lpVtbl.value.get_num_dropped.unsafe_as(Proc(Int32*, HRESULT)).call(pldropped)
  end
  def get_num_not_dropped(plnotdropped : Int32*) : HRESULT
    @lpVtbl.value.get_num_not_dropped.unsafe_as(Proc(Int32*, HRESULT)).call(plnotdropped)
  end
  def get_dropped_info(lsize : Int32, plarray : Int32*, plnumcopied : Int32*) : HRESULT
    @lpVtbl.value.get_dropped_info.unsafe_as(Proc(Int32, Int32*, Int32*, HRESULT)).call(lsize, plarray, plnumcopied)
  end
  def get_average_frame_size(plaveragesize : Int32*) : HRESULT
    @lpVtbl.value.get_average_frame_size.unsafe_as(Proc(Int32*, HRESULT)).call(plaveragesize)
  end
end
struct LibWin32::IAMAudioInputMixer
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def put_enable(fenable : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_enable.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fenable)
  end
  def get_enable(pfenable : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_enable.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pfenable)
  end
  def put_mono(fmono : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_mono.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fmono)
  end
  def get_mono(pfmono : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_mono.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pfmono)
  end
  def put_mix_level(level : Float64) : HRESULT
    @lpVtbl.value.put_mix_level.unsafe_as(Proc(Float64, HRESULT)).call(level)
  end
  def get_mix_level(plevel : Float64*) : HRESULT
    @lpVtbl.value.get_mix_level.unsafe_as(Proc(Float64*, HRESULT)).call(plevel)
  end
  def put_pan(pan : Float64) : HRESULT
    @lpVtbl.value.put_pan.unsafe_as(Proc(Float64, HRESULT)).call(pan)
  end
  def get_pan(ppan : Float64*) : HRESULT
    @lpVtbl.value.get_pan.unsafe_as(Proc(Float64*, HRESULT)).call(ppan)
  end
  def put_loudness(floudness : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_loudness.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(floudness)
  end
  def get_loudness(pfloudness : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_loudness.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pfloudness)
  end
  def put_treble(treble : Float64) : HRESULT
    @lpVtbl.value.put_treble.unsafe_as(Proc(Float64, HRESULT)).call(treble)
  end
  def get_treble(ptreble : Float64*) : HRESULT
    @lpVtbl.value.get_treble.unsafe_as(Proc(Float64*, HRESULT)).call(ptreble)
  end
  def get_treble_range(prange : Float64*) : HRESULT
    @lpVtbl.value.get_treble_range.unsafe_as(Proc(Float64*, HRESULT)).call(prange)
  end
  def put_bass(bass : Float64) : HRESULT
    @lpVtbl.value.put_bass.unsafe_as(Proc(Float64, HRESULT)).call(bass)
  end
  def get_bass(pbass : Float64*) : HRESULT
    @lpVtbl.value.get_bass.unsafe_as(Proc(Float64*, HRESULT)).call(pbass)
  end
  def get_bass_range(prange : Float64*) : HRESULT
    @lpVtbl.value.get_bass_range.unsafe_as(Proc(Float64*, HRESULT)).call(prange)
  end
end
struct LibWin32::IAMBufferNegotiation
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def suggest_allocator_properties(pprop : ALLOCATOR_PROPERTIES*) : HRESULT
    @lpVtbl.value.suggest_allocator_properties.unsafe_as(Proc(ALLOCATOR_PROPERTIES*, HRESULT)).call(pprop)
  end
  def get_allocator_properties(pprop : ALLOCATOR_PROPERTIES*) : HRESULT
    @lpVtbl.value.get_allocator_properties.unsafe_as(Proc(ALLOCATOR_PROPERTIES*, HRESULT)).call(pprop)
  end
end
struct LibWin32::IAMAnalogVideoDecoder
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_available_tv_formats(lanalogvideostandard : Int32*) : HRESULT
    @lpVtbl.value.get_available_tv_formats.unsafe_as(Proc(Int32*, HRESULT)).call(lanalogvideostandard)
  end
  def put_tv_format(lanalogvideostandard : Int32) : HRESULT
    @lpVtbl.value.put_tv_format.unsafe_as(Proc(Int32, HRESULT)).call(lanalogvideostandard)
  end
  def get_tv_format(planalogvideostandard : Int32*) : HRESULT
    @lpVtbl.value.get_tv_format.unsafe_as(Proc(Int32*, HRESULT)).call(planalogvideostandard)
  end
  def get_horizontal_locked(pllocked : Int32*) : HRESULT
    @lpVtbl.value.get_horizontal_locked.unsafe_as(Proc(Int32*, HRESULT)).call(pllocked)
  end
  def put_vcr_horizontal_locking(lvcrhorizontallocking : Int32) : HRESULT
    @lpVtbl.value.put_vcr_horizontal_locking.unsafe_as(Proc(Int32, HRESULT)).call(lvcrhorizontallocking)
  end
  def get_vcr_horizontal_locking(plvcrhorizontallocking : Int32*) : HRESULT
    @lpVtbl.value.get_vcr_horizontal_locking.unsafe_as(Proc(Int32*, HRESULT)).call(plvcrhorizontallocking)
  end
  def get_number_of_lines(plnumberoflines : Int32*) : HRESULT
    @lpVtbl.value.get_number_of_lines.unsafe_as(Proc(Int32*, HRESULT)).call(plnumberoflines)
  end
  def put_output_enable(loutputenable : Int32) : HRESULT
    @lpVtbl.value.put_output_enable.unsafe_as(Proc(Int32, HRESULT)).call(loutputenable)
  end
  def get_output_enable(ploutputenable : Int32*) : HRESULT
    @lpVtbl.value.get_output_enable.unsafe_as(Proc(Int32*, HRESULT)).call(ploutputenable)
  end
end
struct LibWin32::IAMVideoProcAmp
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_range(property : Int32, pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflags : Int32*) : HRESULT
    @lpVtbl.value.get_range.unsafe_as(Proc(Int32, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(property, pmin, pmax, psteppingdelta, pdefault, pcapsflags)
  end
  def set(property : Int32, lvalue : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.set.unsafe_as(Proc(Int32, Int32, Int32, HRESULT)).call(property, lvalue, flags)
  end
  def get(property : Int32, lvalue : Int32*, flags : Int32*) : HRESULT
    @lpVtbl.value.get.unsafe_as(Proc(Int32, Int32*, Int32*, HRESULT)).call(property, lvalue, flags)
  end
end
struct LibWin32::IAMCameraControl
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_range(property : Int32, pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflags : Int32*) : HRESULT
    @lpVtbl.value.get_range.unsafe_as(Proc(Int32, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(property, pmin, pmax, psteppingdelta, pdefault, pcapsflags)
  end
  def set(property : Int32, lvalue : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.set.unsafe_as(Proc(Int32, Int32, Int32, HRESULT)).call(property, lvalue, flags)
  end
  def get(property : Int32, lvalue : Int32*, flags : Int32*) : HRESULT
    @lpVtbl.value.get.unsafe_as(Proc(Int32, Int32*, Int32*, HRESULT)).call(property, lvalue, flags)
  end
end
struct LibWin32::IAMVideoControl
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_caps(ppin : IPin, pcapsflags : Int32*) : HRESULT
    @lpVtbl.value.get_caps.unsafe_as(Proc(IPin, Int32*, HRESULT)).call(ppin, pcapsflags)
  end
  def set_mode(ppin : IPin, mode : Int32) : HRESULT
    @lpVtbl.value.set_mode.unsafe_as(Proc(IPin, Int32, HRESULT)).call(ppin, mode)
  end
  def get_mode(ppin : IPin, mode : Int32*) : HRESULT
    @lpVtbl.value.get_mode.unsafe_as(Proc(IPin, Int32*, HRESULT)).call(ppin, mode)
  end
  def get_current_actual_frame_rate(ppin : IPin, actualframerate : Int64*) : HRESULT
    @lpVtbl.value.get_current_actual_frame_rate.unsafe_as(Proc(IPin, Int64*, HRESULT)).call(ppin, actualframerate)
  end
  def get_max_available_frame_rate(ppin : IPin, iindex : Int32, dimensions : SIZE, maxavailableframerate : Int64*) : HRESULT
    @lpVtbl.value.get_max_available_frame_rate.unsafe_as(Proc(IPin, Int32, SIZE, Int64*, HRESULT)).call(ppin, iindex, dimensions, maxavailableframerate)
  end
  def get_frame_rate_list(ppin : IPin, iindex : Int32, dimensions : SIZE, listsize : Int32*, framerates : Int64**) : HRESULT
    @lpVtbl.value.get_frame_rate_list.unsafe_as(Proc(IPin, Int32, SIZE, Int32*, Int64**, HRESULT)).call(ppin, iindex, dimensions, listsize, framerates)
  end
end
struct LibWin32::IAMCrossbar
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_pin_counts(outputpincount : Int32*, inputpincount : Int32*) : HRESULT
    @lpVtbl.value.get_pin_counts.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(outputpincount, inputpincount)
  end
  def can_route(outputpinindex : Int32, inputpinindex : Int32) : HRESULT
    @lpVtbl.value.can_route.unsafe_as(Proc(Int32, Int32, HRESULT)).call(outputpinindex, inputpinindex)
  end
  def route(outputpinindex : Int32, inputpinindex : Int32) : HRESULT
    @lpVtbl.value.route.unsafe_as(Proc(Int32, Int32, HRESULT)).call(outputpinindex, inputpinindex)
  end
  def get_is_routed_to(outputpinindex : Int32, inputpinindex : Int32*) : HRESULT
    @lpVtbl.value.get_is_routed_to.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(outputpinindex, inputpinindex)
  end
  def get_crossbar_pin_info(isinputpin : LibC::BOOL, pinindex : Int32, pinindexrelated : Int32*, physicaltype : Int32*) : HRESULT
    @lpVtbl.value.get_crossbar_pin_info.unsafe_as(Proc(LibC::BOOL, Int32, Int32*, Int32*, HRESULT)).call(isinputpin, pinindex, pinindexrelated, physicaltype)
  end
end
struct LibWin32::IAMTuner
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def put_channel(lchannel : Int32, lvideosubchannel : Int32, laudiosubchannel : Int32) : HRESULT
    @lpVtbl.value.put_channel.unsafe_as(Proc(Int32, Int32, Int32, HRESULT)).call(lchannel, lvideosubchannel, laudiosubchannel)
  end
  def get_channel(plchannel : Int32*, plvideosubchannel : Int32*, plaudiosubchannel : Int32*) : HRESULT
    @lpVtbl.value.get_channel.unsafe_as(Proc(Int32*, Int32*, Int32*, HRESULT)).call(plchannel, plvideosubchannel, plaudiosubchannel)
  end
  def channel_min_max(lchannelmin : Int32*, lchannelmax : Int32*) : HRESULT
    @lpVtbl.value.channel_min_max.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(lchannelmin, lchannelmax)
  end
  def put_country_code(lcountrycode : Int32) : HRESULT
    @lpVtbl.value.put_country_code.unsafe_as(Proc(Int32, HRESULT)).call(lcountrycode)
  end
  def get_country_code(plcountrycode : Int32*) : HRESULT
    @lpVtbl.value.get_country_code.unsafe_as(Proc(Int32*, HRESULT)).call(plcountrycode)
  end
  def put_tuning_space(ltuningspace : Int32) : HRESULT
    @lpVtbl.value.put_tuning_space.unsafe_as(Proc(Int32, HRESULT)).call(ltuningspace)
  end
  def get_tuning_space(pltuningspace : Int32*) : HRESULT
    @lpVtbl.value.get_tuning_space.unsafe_as(Proc(Int32*, HRESULT)).call(pltuningspace)
  end
  def logon(hcurrentuser : LibC::HANDLE) : HRESULT
    @lpVtbl.value.logon.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hcurrentuser)
  end
  def logout : HRESULT
    @lpVtbl.value.logout.unsafe_as(Proc(HRESULT)).call
  end
  def signal_present(plsignalstrength : Int32*) : HRESULT
    @lpVtbl.value.signal_present.unsafe_as(Proc(Int32*, HRESULT)).call(plsignalstrength)
  end
  def put_mode(lmode : AMTunerModeType) : HRESULT
    @lpVtbl.value.put_mode.unsafe_as(Proc(AMTunerModeType, HRESULT)).call(lmode)
  end
  def get_mode(plmode : AMTunerModeType*) : HRESULT
    @lpVtbl.value.get_mode.unsafe_as(Proc(AMTunerModeType*, HRESULT)).call(plmode)
  end
  def get_available_modes(plmodes : Int32*) : HRESULT
    @lpVtbl.value.get_available_modes.unsafe_as(Proc(Int32*, HRESULT)).call(plmodes)
  end
  def register_notification_call_back(pnotify : IAMTunerNotification, levents : Int32) : HRESULT
    @lpVtbl.value.register_notification_call_back.unsafe_as(Proc(IAMTunerNotification, Int32, HRESULT)).call(pnotify, levents)
  end
  def un_register_notification_call_back(pnotify : IAMTunerNotification) : HRESULT
    @lpVtbl.value.un_register_notification_call_back.unsafe_as(Proc(IAMTunerNotification, HRESULT)).call(pnotify)
  end
end
struct LibWin32::IAMTunerNotification
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def on_event(event : AMTunerEventType) : HRESULT
    @lpVtbl.value.on_event.unsafe_as(Proc(AMTunerEventType, HRESULT)).call(event)
  end
end
struct LibWin32::IAMTVTuner
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def put_channel(lchannel : Int32, lvideosubchannel : Int32, laudiosubchannel : Int32) : HRESULT
    @lpVtbl.value.put_channel.unsafe_as(Proc(Int32, Int32, Int32, HRESULT)).call(lchannel, lvideosubchannel, laudiosubchannel)
  end
  def get_channel(plchannel : Int32*, plvideosubchannel : Int32*, plaudiosubchannel : Int32*) : HRESULT
    @lpVtbl.value.get_channel.unsafe_as(Proc(Int32*, Int32*, Int32*, HRESULT)).call(plchannel, plvideosubchannel, plaudiosubchannel)
  end
  def channel_min_max(lchannelmin : Int32*, lchannelmax : Int32*) : HRESULT
    @lpVtbl.value.channel_min_max.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(lchannelmin, lchannelmax)
  end
  def put_country_code(lcountrycode : Int32) : HRESULT
    @lpVtbl.value.put_country_code.unsafe_as(Proc(Int32, HRESULT)).call(lcountrycode)
  end
  def get_country_code(plcountrycode : Int32*) : HRESULT
    @lpVtbl.value.get_country_code.unsafe_as(Proc(Int32*, HRESULT)).call(plcountrycode)
  end
  def put_tuning_space(ltuningspace : Int32) : HRESULT
    @lpVtbl.value.put_tuning_space.unsafe_as(Proc(Int32, HRESULT)).call(ltuningspace)
  end
  def get_tuning_space(pltuningspace : Int32*) : HRESULT
    @lpVtbl.value.get_tuning_space.unsafe_as(Proc(Int32*, HRESULT)).call(pltuningspace)
  end
  def logon(hcurrentuser : LibC::HANDLE) : HRESULT
    @lpVtbl.value.logon.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hcurrentuser)
  end
  def logout : HRESULT
    @lpVtbl.value.logout.unsafe_as(Proc(HRESULT)).call
  end
  def signal_present(plsignalstrength : Int32*) : HRESULT
    @lpVtbl.value.signal_present.unsafe_as(Proc(Int32*, HRESULT)).call(plsignalstrength)
  end
  def put_mode(lmode : AMTunerModeType) : HRESULT
    @lpVtbl.value.put_mode.unsafe_as(Proc(AMTunerModeType, HRESULT)).call(lmode)
  end
  def get_mode(plmode : AMTunerModeType*) : HRESULT
    @lpVtbl.value.get_mode.unsafe_as(Proc(AMTunerModeType*, HRESULT)).call(plmode)
  end
  def get_available_modes(plmodes : Int32*) : HRESULT
    @lpVtbl.value.get_available_modes.unsafe_as(Proc(Int32*, HRESULT)).call(plmodes)
  end
  def register_notification_call_back(pnotify : IAMTunerNotification, levents : Int32) : HRESULT
    @lpVtbl.value.register_notification_call_back.unsafe_as(Proc(IAMTunerNotification, Int32, HRESULT)).call(pnotify, levents)
  end
  def un_register_notification_call_back(pnotify : IAMTunerNotification) : HRESULT
    @lpVtbl.value.un_register_notification_call_back.unsafe_as(Proc(IAMTunerNotification, HRESULT)).call(pnotify)
  end
  def get_available_tv_formats(lanalogvideostandard : Int32*) : HRESULT
    @lpVtbl.value.get_available_tv_formats.unsafe_as(Proc(Int32*, HRESULT)).call(lanalogvideostandard)
  end
  def get_tv_format(planalogvideostandard : Int32*) : HRESULT
    @lpVtbl.value.get_tv_format.unsafe_as(Proc(Int32*, HRESULT)).call(planalogvideostandard)
  end
  def auto_tune(lchannel : Int32, plfoundsignal : Int32*) : HRESULT
    @lpVtbl.value.auto_tune.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(lchannel, plfoundsignal)
  end
  def store_auto_tune : HRESULT
    @lpVtbl.value.store_auto_tune.unsafe_as(Proc(HRESULT)).call
  end
  def get_num_input_connections(plnuminputconnections : Int32*) : HRESULT
    @lpVtbl.value.get_num_input_connections.unsafe_as(Proc(Int32*, HRESULT)).call(plnuminputconnections)
  end
  def put_input_type(lindex : Int32, inputtype : TunerInputType) : HRESULT
    @lpVtbl.value.put_input_type.unsafe_as(Proc(Int32, TunerInputType, HRESULT)).call(lindex, inputtype)
  end
  def get_input_type(lindex : Int32, pinputtype : TunerInputType*) : HRESULT
    @lpVtbl.value.get_input_type.unsafe_as(Proc(Int32, TunerInputType*, HRESULT)).call(lindex, pinputtype)
  end
  def put_connect_input(lindex : Int32) : HRESULT
    @lpVtbl.value.put_connect_input.unsafe_as(Proc(Int32, HRESULT)).call(lindex)
  end
  def get_connect_input(plindex : Int32*) : HRESULT
    @lpVtbl.value.get_connect_input.unsafe_as(Proc(Int32*, HRESULT)).call(plindex)
  end
  def get_video_frequency(lfreq : Int32*) : HRESULT
    @lpVtbl.value.get_video_frequency.unsafe_as(Proc(Int32*, HRESULT)).call(lfreq)
  end
  def get_audio_frequency(lfreq : Int32*) : HRESULT
    @lpVtbl.value.get_audio_frequency.unsafe_as(Proc(Int32*, HRESULT)).call(lfreq)
  end
end
struct LibWin32::IBPCSatelliteTuner
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def put_channel(lchannel : Int32, lvideosubchannel : Int32, laudiosubchannel : Int32) : HRESULT
    @lpVtbl.value.put_channel.unsafe_as(Proc(Int32, Int32, Int32, HRESULT)).call(lchannel, lvideosubchannel, laudiosubchannel)
  end
  def get_channel(plchannel : Int32*, plvideosubchannel : Int32*, plaudiosubchannel : Int32*) : HRESULT
    @lpVtbl.value.get_channel.unsafe_as(Proc(Int32*, Int32*, Int32*, HRESULT)).call(plchannel, plvideosubchannel, plaudiosubchannel)
  end
  def channel_min_max(lchannelmin : Int32*, lchannelmax : Int32*) : HRESULT
    @lpVtbl.value.channel_min_max.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(lchannelmin, lchannelmax)
  end
  def put_country_code(lcountrycode : Int32) : HRESULT
    @lpVtbl.value.put_country_code.unsafe_as(Proc(Int32, HRESULT)).call(lcountrycode)
  end
  def get_country_code(plcountrycode : Int32*) : HRESULT
    @lpVtbl.value.get_country_code.unsafe_as(Proc(Int32*, HRESULT)).call(plcountrycode)
  end
  def put_tuning_space(ltuningspace : Int32) : HRESULT
    @lpVtbl.value.put_tuning_space.unsafe_as(Proc(Int32, HRESULT)).call(ltuningspace)
  end
  def get_tuning_space(pltuningspace : Int32*) : HRESULT
    @lpVtbl.value.get_tuning_space.unsafe_as(Proc(Int32*, HRESULT)).call(pltuningspace)
  end
  def logon(hcurrentuser : LibC::HANDLE) : HRESULT
    @lpVtbl.value.logon.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hcurrentuser)
  end
  def logout : HRESULT
    @lpVtbl.value.logout.unsafe_as(Proc(HRESULT)).call
  end
  def signal_present(plsignalstrength : Int32*) : HRESULT
    @lpVtbl.value.signal_present.unsafe_as(Proc(Int32*, HRESULT)).call(plsignalstrength)
  end
  def put_mode(lmode : AMTunerModeType) : HRESULT
    @lpVtbl.value.put_mode.unsafe_as(Proc(AMTunerModeType, HRESULT)).call(lmode)
  end
  def get_mode(plmode : AMTunerModeType*) : HRESULT
    @lpVtbl.value.get_mode.unsafe_as(Proc(AMTunerModeType*, HRESULT)).call(plmode)
  end
  def get_available_modes(plmodes : Int32*) : HRESULT
    @lpVtbl.value.get_available_modes.unsafe_as(Proc(Int32*, HRESULT)).call(plmodes)
  end
  def register_notification_call_back(pnotify : IAMTunerNotification, levents : Int32) : HRESULT
    @lpVtbl.value.register_notification_call_back.unsafe_as(Proc(IAMTunerNotification, Int32, HRESULT)).call(pnotify, levents)
  end
  def un_register_notification_call_back(pnotify : IAMTunerNotification) : HRESULT
    @lpVtbl.value.un_register_notification_call_back.unsafe_as(Proc(IAMTunerNotification, HRESULT)).call(pnotify)
  end
  def get_default_sub_channel_types(pldefaultvideotype : Int32*, pldefaultaudiotype : Int32*) : HRESULT
    @lpVtbl.value.get_default_sub_channel_types.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pldefaultvideotype, pldefaultaudiotype)
  end
  def put_default_sub_channel_types(ldefaultvideotype : Int32, ldefaultaudiotype : Int32) : HRESULT
    @lpVtbl.value.put_default_sub_channel_types.unsafe_as(Proc(Int32, Int32, HRESULT)).call(ldefaultvideotype, ldefaultaudiotype)
  end
  def is_taping_permitted : HRESULT
    @lpVtbl.value.is_taping_permitted.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IAMTVAudio
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_hardware_supported_tv_audio_modes(plmodes : Int32*) : HRESULT
    @lpVtbl.value.get_hardware_supported_tv_audio_modes.unsafe_as(Proc(Int32*, HRESULT)).call(plmodes)
  end
  def get_available_tv_audio_modes(plmodes : Int32*) : HRESULT
    @lpVtbl.value.get_available_tv_audio_modes.unsafe_as(Proc(Int32*, HRESULT)).call(plmodes)
  end
  def get_tv_audio_mode(plmode : Int32*) : HRESULT
    @lpVtbl.value.get_tv_audio_mode.unsafe_as(Proc(Int32*, HRESULT)).call(plmode)
  end
  def put_tv_audio_mode(lmode : Int32) : HRESULT
    @lpVtbl.value.put_tv_audio_mode.unsafe_as(Proc(Int32, HRESULT)).call(lmode)
  end
  def register_notification_call_back(pnotify : IAMTunerNotification, levents : Int32) : HRESULT
    @lpVtbl.value.register_notification_call_back.unsafe_as(Proc(IAMTunerNotification, Int32, HRESULT)).call(pnotify, levents)
  end
  def un_register_notification_call_back(pnotify : IAMTunerNotification) : HRESULT
    @lpVtbl.value.un_register_notification_call_back.unsafe_as(Proc(IAMTunerNotification, HRESULT)).call(pnotify)
  end
end
struct LibWin32::IAMTVAudioNotification
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def on_event(event : AMTVAudioEventType) : HRESULT
    @lpVtbl.value.on_event.unsafe_as(Proc(AMTVAudioEventType, HRESULT)).call(event)
  end
end
struct LibWin32::IAMAnalogVideoEncoder
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_available_tv_formats(lanalogvideostandard : Int32*) : HRESULT
    @lpVtbl.value.get_available_tv_formats.unsafe_as(Proc(Int32*, HRESULT)).call(lanalogvideostandard)
  end
  def put_tv_format(lanalogvideostandard : Int32) : HRESULT
    @lpVtbl.value.put_tv_format.unsafe_as(Proc(Int32, HRESULT)).call(lanalogvideostandard)
  end
  def get_tv_format(planalogvideostandard : Int32*) : HRESULT
    @lpVtbl.value.get_tv_format.unsafe_as(Proc(Int32*, HRESULT)).call(planalogvideostandard)
  end
  def put_copy_protection(lvideocopyprotection : Int32) : HRESULT
    @lpVtbl.value.put_copy_protection.unsafe_as(Proc(Int32, HRESULT)).call(lvideocopyprotection)
  end
  def get_copy_protection(lvideocopyprotection : Int32*) : HRESULT
    @lpVtbl.value.get_copy_protection.unsafe_as(Proc(Int32*, HRESULT)).call(lvideocopyprotection)
  end
  def put_cc_enable(lccenable : Int32) : HRESULT
    @lpVtbl.value.put_cc_enable.unsafe_as(Proc(Int32, HRESULT)).call(lccenable)
  end
  def get_cc_enable(lccenable : Int32*) : HRESULT
    @lpVtbl.value.get_cc_enable.unsafe_as(Proc(Int32*, HRESULT)).call(lccenable)
  end
end
struct LibWin32::IMediaPropertyBag
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def read(pszpropname : LibC::LPWSTR, pvar : VARIANT*, perrorlog : IErrorLog) : HRESULT
    @lpVtbl.value.read.unsafe_as(Proc(LibC::LPWSTR, VARIANT*, IErrorLog, HRESULT)).call(pszpropname, pvar, perrorlog)
  end
  def write(pszpropname : LibC::LPWSTR, pvar : VARIANT*) : HRESULT
    @lpVtbl.value.write.unsafe_as(Proc(LibC::LPWSTR, VARIANT*, HRESULT)).call(pszpropname, pvar)
  end
  def enum_property(iproperty : UInt32, pvarpropertyname : VARIANT*, pvarpropertyvalue : VARIANT*) : HRESULT
    @lpVtbl.value.enum_property.unsafe_as(Proc(UInt32, VARIANT*, VARIANT*, HRESULT)).call(iproperty, pvarpropertyname, pvarpropertyvalue)
  end
end
struct LibWin32::IPersistMediaPropertyBag
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_class_id(pclassid : Guid*) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(Guid*, HRESULT)).call(pclassid)
  end
  def init_new : HRESULT
    @lpVtbl.value.init_new.unsafe_as(Proc(HRESULT)).call
  end
  def load(ppropbag : IMediaPropertyBag, perrorlog : IErrorLog) : HRESULT
    @lpVtbl.value.load.unsafe_as(Proc(IMediaPropertyBag, IErrorLog, HRESULT)).call(ppropbag, perrorlog)
  end
  def save(ppropbag : IMediaPropertyBag, fcleardirty : LibC::BOOL, fsaveallproperties : LibC::BOOL) : HRESULT
    @lpVtbl.value.save.unsafe_as(Proc(IMediaPropertyBag, LibC::BOOL, LibC::BOOL, HRESULT)).call(ppropbag, fcleardirty, fsaveallproperties)
  end
end
struct LibWin32::IAMPhysicalPinInfo
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_physical_type(ptype : Int32*, ppsztype : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_physical_type.unsafe_as(Proc(Int32*, LibC::LPWSTR*, HRESULT)).call(ptype, ppsztype)
  end
end
struct LibWin32::IAMExtDevice
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_capability(capability : Int32, pvalue : Int32*, pdblvalue : Float64*) : HRESULT
    @lpVtbl.value.get_capability.unsafe_as(Proc(Int32, Int32*, Float64*, HRESULT)).call(capability, pvalue, pdblvalue)
  end
  def get_external_device_id(ppszdata : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_external_device_id.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(ppszdata)
  end
  def get_external_device_version(ppszdata : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_external_device_version.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(ppszdata)
  end
  def put_device_power(powermode : Int32) : HRESULT
    @lpVtbl.value.put_device_power.unsafe_as(Proc(Int32, HRESULT)).call(powermode)
  end
  def get_device_power(ppowermode : Int32*) : HRESULT
    @lpVtbl.value.get_device_power.unsafe_as(Proc(Int32*, HRESULT)).call(ppowermode)
  end
  def calibrate(hevent : LibC::UINT_PTR, mode : Int32, pstatus : Int32*) : HRESULT
    @lpVtbl.value.calibrate.unsafe_as(Proc(LibC::UINT_PTR, Int32, Int32*, HRESULT)).call(hevent, mode, pstatus)
  end
  def put_device_port(deviceport : Int32) : HRESULT
    @lpVtbl.value.put_device_port.unsafe_as(Proc(Int32, HRESULT)).call(deviceport)
  end
  def get_device_port(pdeviceport : Int32*) : HRESULT
    @lpVtbl.value.get_device_port.unsafe_as(Proc(Int32*, HRESULT)).call(pdeviceport)
  end
end
struct LibWin32::IAMExtTransport
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_capability(capability : Int32, pvalue : Int32*, pdblvalue : Float64*) : HRESULT
    @lpVtbl.value.get_capability.unsafe_as(Proc(Int32, Int32*, Float64*, HRESULT)).call(capability, pvalue, pdblvalue)
  end
  def put_media_state(state : Int32) : HRESULT
    @lpVtbl.value.put_media_state.unsafe_as(Proc(Int32, HRESULT)).call(state)
  end
  def get_media_state(pstate : Int32*) : HRESULT
    @lpVtbl.value.get_media_state.unsafe_as(Proc(Int32*, HRESULT)).call(pstate)
  end
  def put_local_control(state : Int32) : HRESULT
    @lpVtbl.value.put_local_control.unsafe_as(Proc(Int32, HRESULT)).call(state)
  end
  def get_local_control(pstate : Int32*) : HRESULT
    @lpVtbl.value.get_local_control.unsafe_as(Proc(Int32*, HRESULT)).call(pstate)
  end
  def get_status(statusitem : Int32, pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(statusitem, pvalue)
  end
  def get_transport_basic_parameters(param : Int32, pvalue : Int32*, ppszdata : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_transport_basic_parameters.unsafe_as(Proc(Int32, Int32*, LibC::LPWSTR*, HRESULT)).call(param, pvalue, ppszdata)
  end
  def set_transport_basic_parameters(param : Int32, value : Int32, pszdata : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_transport_basic_parameters.unsafe_as(Proc(Int32, Int32, LibC::LPWSTR, HRESULT)).call(param, value, pszdata)
  end
  def get_transport_video_parameters(param : Int32, pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_transport_video_parameters.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(param, pvalue)
  end
  def set_transport_video_parameters(param : Int32, value : Int32) : HRESULT
    @lpVtbl.value.set_transport_video_parameters.unsafe_as(Proc(Int32, Int32, HRESULT)).call(param, value)
  end
  def get_transport_audio_parameters(param : Int32, pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_transport_audio_parameters.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(param, pvalue)
  end
  def set_transport_audio_parameters(param : Int32, value : Int32) : HRESULT
    @lpVtbl.value.set_transport_audio_parameters.unsafe_as(Proc(Int32, Int32, HRESULT)).call(param, value)
  end
  def put_mode(mode : Int32) : HRESULT
    @lpVtbl.value.put_mode.unsafe_as(Proc(Int32, HRESULT)).call(mode)
  end
  def get_mode(pmode : Int32*) : HRESULT
    @lpVtbl.value.get_mode.unsafe_as(Proc(Int32*, HRESULT)).call(pmode)
  end
  def put_rate(dblrate : Float64) : HRESULT
    @lpVtbl.value.put_rate.unsafe_as(Proc(Float64, HRESULT)).call(dblrate)
  end
  def get_rate(pdblrate : Float64*) : HRESULT
    @lpVtbl.value.get_rate.unsafe_as(Proc(Float64*, HRESULT)).call(pdblrate)
  end
  def get_chase(penabled : Int32*, poffset : Int32*, phevent : LibC::UINT_PTR*) : HRESULT
    @lpVtbl.value.get_chase.unsafe_as(Proc(Int32*, Int32*, LibC::UINT_PTR*, HRESULT)).call(penabled, poffset, phevent)
  end
  def set_chase(enable : Int32, offset : Int32, hevent : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.set_chase.unsafe_as(Proc(Int32, Int32, LibC::UINT_PTR, HRESULT)).call(enable, offset, hevent)
  end
  def get_bump(pspeed : Int32*, pduration : Int32*) : HRESULT
    @lpVtbl.value.get_bump.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pspeed, pduration)
  end
  def set_bump(speed : Int32, duration : Int32) : HRESULT
    @lpVtbl.value.set_bump.unsafe_as(Proc(Int32, Int32, HRESULT)).call(speed, duration)
  end
  def get_anti_clog_control(penabled : Int32*) : HRESULT
    @lpVtbl.value.get_anti_clog_control.unsafe_as(Proc(Int32*, HRESULT)).call(penabled)
  end
  def put_anti_clog_control(enable : Int32) : HRESULT
    @lpVtbl.value.put_anti_clog_control.unsafe_as(Proc(Int32, HRESULT)).call(enable)
  end
  def get_edit_property_set(editid : Int32, pstate : Int32*) : HRESULT
    @lpVtbl.value.get_edit_property_set.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(editid, pstate)
  end
  def set_edit_property_set(peditid : Int32*, state : Int32) : HRESULT
    @lpVtbl.value.set_edit_property_set.unsafe_as(Proc(Int32*, Int32, HRESULT)).call(peditid, state)
  end
  def get_edit_property(editid : Int32, param : Int32, pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_edit_property.unsafe_as(Proc(Int32, Int32, Int32*, HRESULT)).call(editid, param, pvalue)
  end
  def set_edit_property(editid : Int32, param : Int32, value : Int32) : HRESULT
    @lpVtbl.value.set_edit_property.unsafe_as(Proc(Int32, Int32, Int32, HRESULT)).call(editid, param, value)
  end
  def get_edit_start(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_edit_start.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def put_edit_start(value : Int32) : HRESULT
    @lpVtbl.value.put_edit_start.unsafe_as(Proc(Int32, HRESULT)).call(value)
  end
end
struct LibWin32::IAMTimecodeReader
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tcr_mode(param : Int32, pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_tcr_mode.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(param, pvalue)
  end
  def set_tcr_mode(param : Int32, value : Int32) : HRESULT
    @lpVtbl.value.set_tcr_mode.unsafe_as(Proc(Int32, Int32, HRESULT)).call(param, value)
  end
  def put_vitc_line(line : Int32) : HRESULT
    @lpVtbl.value.put_vitc_line.unsafe_as(Proc(Int32, HRESULT)).call(line)
  end
  def get_vitc_line(pline : Int32*) : HRESULT
    @lpVtbl.value.get_vitc_line.unsafe_as(Proc(Int32*, HRESULT)).call(pline)
  end
  def get_timecode(ptimecodesample : TIMECODE_SAMPLE*) : HRESULT
    @lpVtbl.value.get_timecode.unsafe_as(Proc(TIMECODE_SAMPLE*, HRESULT)).call(ptimecodesample)
  end
end
struct LibWin32::IAMTimecodeGenerator
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tcg_mode(param : Int32, pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_tcg_mode.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(param, pvalue)
  end
  def set_tcg_mode(param : Int32, value : Int32) : HRESULT
    @lpVtbl.value.set_tcg_mode.unsafe_as(Proc(Int32, Int32, HRESULT)).call(param, value)
  end
  def put_vitc_line(line : Int32) : HRESULT
    @lpVtbl.value.put_vitc_line.unsafe_as(Proc(Int32, HRESULT)).call(line)
  end
  def get_vitc_line(pline : Int32*) : HRESULT
    @lpVtbl.value.get_vitc_line.unsafe_as(Proc(Int32*, HRESULT)).call(pline)
  end
  def set_timecode(ptimecodesample : TIMECODE_SAMPLE*) : HRESULT
    @lpVtbl.value.set_timecode.unsafe_as(Proc(TIMECODE_SAMPLE*, HRESULT)).call(ptimecodesample)
  end
  def get_timecode(ptimecodesample : TIMECODE_SAMPLE*) : HRESULT
    @lpVtbl.value.get_timecode.unsafe_as(Proc(TIMECODE_SAMPLE*, HRESULT)).call(ptimecodesample)
  end
end
struct LibWin32::IAMTimecodeDisplay
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tc_display_enable(pstate : Int32*) : HRESULT
    @lpVtbl.value.get_tc_display_enable.unsafe_as(Proc(Int32*, HRESULT)).call(pstate)
  end
  def set_tc_display_enable(state : Int32) : HRESULT
    @lpVtbl.value.set_tc_display_enable.unsafe_as(Proc(Int32, HRESULT)).call(state)
  end
  def get_tc_display(param : Int32, pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_tc_display.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(param, pvalue)
  end
  def set_tc_display(param : Int32, value : Int32) : HRESULT
    @lpVtbl.value.set_tc_display.unsafe_as(Proc(Int32, Int32, HRESULT)).call(param, value)
  end
end
struct LibWin32::IAMDevMemoryAllocator
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_info(pdwcbtotalfree : UInt32*, pdwcblargestfree : UInt32*, pdwcbtotalmemory : UInt32*, pdwcbminimumchunk : UInt32*) : HRESULT
    @lpVtbl.value.get_info.unsafe_as(Proc(UInt32*, UInt32*, UInt32*, UInt32*, HRESULT)).call(pdwcbtotalfree, pdwcblargestfree, pdwcbtotalmemory, pdwcbminimumchunk)
  end
  def check_memory(pbuffer : UInt8*) : HRESULT
    @lpVtbl.value.check_memory.unsafe_as(Proc(UInt8*, HRESULT)).call(pbuffer)
  end
  def alloc(ppbuffer : UInt8**, pdwcbbuffer : UInt32*) : HRESULT
    @lpVtbl.value.alloc.unsafe_as(Proc(UInt8**, UInt32*, HRESULT)).call(ppbuffer, pdwcbbuffer)
  end
  def free(pbuffer : UInt8*) : HRESULT
    @lpVtbl.value.free.unsafe_as(Proc(UInt8*, HRESULT)).call(pbuffer)
  end
  def get_dev_memory_object(ppunkinnner : IUnknown*, punkouter : IUnknown) : HRESULT
    @lpVtbl.value.get_dev_memory_object.unsafe_as(Proc(IUnknown*, IUnknown, HRESULT)).call(ppunkinnner, punkouter)
  end
end
struct LibWin32::IAMDevMemoryControl
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def query_write_sync : HRESULT
    @lpVtbl.value.query_write_sync.unsafe_as(Proc(HRESULT)).call
  end
  def write_sync : HRESULT
    @lpVtbl.value.write_sync.unsafe_as(Proc(HRESULT)).call
  end
  def get_dev_id(pdwdevid : UInt32*) : HRESULT
    @lpVtbl.value.get_dev_id.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwdevid)
  end
end
struct LibWin32::IAMStreamSelect
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def count(pcstreams : UInt32*) : HRESULT
    @lpVtbl.value.count.unsafe_as(Proc(UInt32*, HRESULT)).call(pcstreams)
  end
  def info(lindex : Int32, ppmt : AM_MEDIA_TYPE**, pdwflags : UInt32*, plcid : UInt32*, pdwgroup : UInt32*, ppszname : LibC::LPWSTR*, ppobject : IUnknown*, ppunk : IUnknown*) : HRESULT
    @lpVtbl.value.info.unsafe_as(Proc(Int32, AM_MEDIA_TYPE**, UInt32*, UInt32*, UInt32*, LibC::LPWSTR*, IUnknown*, IUnknown*, HRESULT)).call(lindex, ppmt, pdwflags, plcid, pdwgroup, ppszname, ppobject, ppunk)
  end
  def enable(lindex : Int32, dwflags : UInt32) : HRESULT
    @lpVtbl.value.enable.unsafe_as(Proc(Int32, UInt32, HRESULT)).call(lindex, dwflags)
  end
end
struct LibWin32::IAMResourceControl
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def reserve(dwflags : UInt32, pvreserved : Void*) : HRESULT
    @lpVtbl.value.reserve.unsafe_as(Proc(UInt32, Void*, HRESULT)).call(dwflags, pvreserved)
  end
end
struct LibWin32::IAMClockAdjust
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_clock_delta(rtdelta : Int64) : HRESULT
    @lpVtbl.value.set_clock_delta.unsafe_as(Proc(Int64, HRESULT)).call(rtdelta)
  end
end
struct LibWin32::IAMFilterMiscFlags
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_misc_flags : UInt32
    @lpVtbl.value.get_misc_flags.unsafe_as(Proc(UInt32)).call
  end
end
struct LibWin32::IDrawVideoImage
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def draw_video_image_begin : HRESULT
    @lpVtbl.value.draw_video_image_begin.unsafe_as(Proc(HRESULT)).call
  end
  def draw_video_image_end : HRESULT
    @lpVtbl.value.draw_video_image_end.unsafe_as(Proc(HRESULT)).call
  end
  def draw_video_image_draw(hdc : HDC, lprcsrc : RECT*, lprcdst : RECT*) : HRESULT
    @lpVtbl.value.draw_video_image_draw.unsafe_as(Proc(HDC, RECT*, RECT*, HRESULT)).call(hdc, lprcsrc, lprcdst)
  end
end
struct LibWin32::IDecimateVideoImage
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_decimation_image_size(lwidth : Int32, lheight : Int32) : HRESULT
    @lpVtbl.value.set_decimation_image_size.unsafe_as(Proc(Int32, Int32, HRESULT)).call(lwidth, lheight)
  end
  def reset_decimation_image_size : HRESULT
    @lpVtbl.value.reset_decimation_image_size.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IAMVideoDecimationProperties
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def query_decimation_usage(lpusage : DECIMATION_USAGE*) : HRESULT
    @lpVtbl.value.query_decimation_usage.unsafe_as(Proc(DECIMATION_USAGE*, HRESULT)).call(lpusage)
  end
  def set_decimation_usage(usage : DECIMATION_USAGE) : HRESULT
    @lpVtbl.value.set_decimation_usage.unsafe_as(Proc(DECIMATION_USAGE, HRESULT)).call(usage)
  end
end
struct LibWin32::IVideoFrameStep
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def step(dwframes : UInt32, pstepobject : IUnknown) : HRESULT
    @lpVtbl.value.step.unsafe_as(Proc(UInt32, IUnknown, HRESULT)).call(dwframes, pstepobject)
  end
  def can_step(bmultiple : Int32, pstepobject : IUnknown) : HRESULT
    @lpVtbl.value.can_step.unsafe_as(Proc(Int32, IUnknown, HRESULT)).call(bmultiple, pstepobject)
  end
  def cancel_step : HRESULT
    @lpVtbl.value.cancel_step.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IAMLatency
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_latency(prtlatency : Int64*) : HRESULT
    @lpVtbl.value.get_latency.unsafe_as(Proc(Int64*, HRESULT)).call(prtlatency)
  end
end
struct LibWin32::IAMPushSource
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_latency(prtlatency : Int64*) : HRESULT
    @lpVtbl.value.get_latency.unsafe_as(Proc(Int64*, HRESULT)).call(prtlatency)
  end
  def get_push_source_flags(pflags : UInt32*) : HRESULT
    @lpVtbl.value.get_push_source_flags.unsafe_as(Proc(UInt32*, HRESULT)).call(pflags)
  end
  def set_push_source_flags(flags : UInt32) : HRESULT
    @lpVtbl.value.set_push_source_flags.unsafe_as(Proc(UInt32, HRESULT)).call(flags)
  end
  def set_stream_offset(rtoffset : Int64) : HRESULT
    @lpVtbl.value.set_stream_offset.unsafe_as(Proc(Int64, HRESULT)).call(rtoffset)
  end
  def get_stream_offset(prtoffset : Int64*) : HRESULT
    @lpVtbl.value.get_stream_offset.unsafe_as(Proc(Int64*, HRESULT)).call(prtoffset)
  end
  def get_max_stream_offset(prtmaxoffset : Int64*) : HRESULT
    @lpVtbl.value.get_max_stream_offset.unsafe_as(Proc(Int64*, HRESULT)).call(prtmaxoffset)
  end
  def set_max_stream_offset(rtmaxoffset : Int64) : HRESULT
    @lpVtbl.value.set_max_stream_offset.unsafe_as(Proc(Int64, HRESULT)).call(rtmaxoffset)
  end
end
struct LibWin32::IAMDeviceRemoval
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def device_info(pclsidinterfaceclass : Guid*, pwszsymboliclink : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.device_info.unsafe_as(Proc(Guid*, LibC::LPWSTR*, HRESULT)).call(pclsidinterfaceclass, pwszsymboliclink)
  end
  def reassociate : HRESULT
    @lpVtbl.value.reassociate.unsafe_as(Proc(HRESULT)).call
  end
  def disassociate : HRESULT
    @lpVtbl.value.disassociate.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IDVEnc
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_i_format_resolution(videoformat : Int32*, dvformat : Int32*, resolution : Int32*, fdvinfo : UInt8, sdvinfo : DVINFO*) : HRESULT
    @lpVtbl.value.get_i_format_resolution.unsafe_as(Proc(Int32*, Int32*, Int32*, UInt8, DVINFO*, HRESULT)).call(videoformat, dvformat, resolution, fdvinfo, sdvinfo)
  end
  def put_i_format_resolution(videoformat : Int32, dvformat : Int32, resolution : Int32, fdvinfo : UInt8, sdvinfo : DVINFO*) : HRESULT
    @lpVtbl.value.put_i_format_resolution.unsafe_as(Proc(Int32, Int32, Int32, UInt8, DVINFO*, HRESULT)).call(videoformat, dvformat, resolution, fdvinfo, sdvinfo)
  end
end
struct LibWin32::IIPDVDec
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_ip_display(displaypix : Int32*) : HRESULT
    @lpVtbl.value.get_ip_display.unsafe_as(Proc(Int32*, HRESULT)).call(displaypix)
  end
  def put_ip_display(displaypix : Int32) : HRESULT
    @lpVtbl.value.put_ip_display.unsafe_as(Proc(Int32, HRESULT)).call(displaypix)
  end
end
struct LibWin32::IDVRGB219
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_rgb219(bstate : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_rgb219.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(bstate)
  end
end
struct LibWin32::IDVSplitter
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def discard_alternate_video_frames(ndiscard : Int32) : HRESULT
    @lpVtbl.value.discard_alternate_video_frames.unsafe_as(Proc(Int32, HRESULT)).call(ndiscard)
  end
end
struct LibWin32::IAMAudioRendererStats
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_stat_param(dwparam : UInt32, pdwparam1 : UInt32*, pdwparam2 : UInt32*) : HRESULT
    @lpVtbl.value.get_stat_param.unsafe_as(Proc(UInt32, UInt32*, UInt32*, HRESULT)).call(dwparam, pdwparam1, pdwparam2)
  end
end
struct LibWin32::IAMGraphStreams
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def find_upstream_interface(ppin : IPin, riid : Guid*, ppvinterface : Void**, dwflags : UInt32) : HRESULT
    @lpVtbl.value.find_upstream_interface.unsafe_as(Proc(IPin, Guid*, Void**, UInt32, HRESULT)).call(ppin, riid, ppvinterface, dwflags)
  end
  def sync_using_stream_offset(busestreamoffset : LibC::BOOL) : HRESULT
    @lpVtbl.value.sync_using_stream_offset.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(busestreamoffset)
  end
  def set_max_graph_latency(rtmaxgraphlatency : Int64) : HRESULT
    @lpVtbl.value.set_max_graph_latency.unsafe_as(Proc(Int64, HRESULT)).call(rtmaxgraphlatency)
  end
end
struct LibWin32::IAMOverlayFX
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def query_overlay_fx_caps(lpdwoverlayfxcaps : UInt32*) : HRESULT
    @lpVtbl.value.query_overlay_fx_caps.unsafe_as(Proc(UInt32*, HRESULT)).call(lpdwoverlayfxcaps)
  end
  def set_overlay_fx(dwoverlayfx : UInt32) : HRESULT
    @lpVtbl.value.set_overlay_fx.unsafe_as(Proc(UInt32, HRESULT)).call(dwoverlayfx)
  end
  def get_overlay_fx(lpdwoverlayfx : UInt32*) : HRESULT
    @lpVtbl.value.get_overlay_fx.unsafe_as(Proc(UInt32*, HRESULT)).call(lpdwoverlayfx)
  end
end
struct LibWin32::IAMOpenProgress
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def query_progress(plltotal : Int64*, pllcurrent : Int64*) : HRESULT
    @lpVtbl.value.query_progress.unsafe_as(Proc(Int64*, Int64*, HRESULT)).call(plltotal, pllcurrent)
  end
  def abort_operation : HRESULT
    @lpVtbl.value.abort_operation.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IMpeg2Demultiplexer
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def create_output_pin(pmediatype : AM_MEDIA_TYPE*, pszpinname : LibC::LPWSTR, ppipin : IPin*) : HRESULT
    @lpVtbl.value.create_output_pin.unsafe_as(Proc(AM_MEDIA_TYPE*, LibC::LPWSTR, IPin*, HRESULT)).call(pmediatype, pszpinname, ppipin)
  end
  def set_output_pin_media_type(pszpinname : LibC::LPWSTR, pmediatype : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.set_output_pin_media_type.unsafe_as(Proc(LibC::LPWSTR, AM_MEDIA_TYPE*, HRESULT)).call(pszpinname, pmediatype)
  end
  def delete_output_pin(pszpinname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.delete_output_pin.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(pszpinname)
  end
end
struct LibWin32::IEnumStreamIdMap
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def next(crequest : UInt32, pstreamidmap : STREAM_ID_MAP*, pcreceived : UInt32*) : HRESULT
    @lpVtbl.value.next.unsafe_as(Proc(UInt32, STREAM_ID_MAP*, UInt32*, HRESULT)).call(crequest, pstreamidmap, pcreceived)
  end
  def skip(crecords : UInt32) : HRESULT
    @lpVtbl.value.skip.unsafe_as(Proc(UInt32, HRESULT)).call(crecords)
  end
  def reset : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(HRESULT)).call
  end
  def clone(ppienumstreamidmap : IEnumStreamIdMap*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(IEnumStreamIdMap*, HRESULT)).call(ppienumstreamidmap)
  end
end
struct LibWin32::IMPEG2StreamIdMap
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def map_stream_id(ulstreamid : UInt32, mediasamplecontent : UInt32, ulsubstreamfiltervalue : UInt32, idataoffset : Int32) : HRESULT
    @lpVtbl.value.map_stream_id.unsafe_as(Proc(UInt32, UInt32, UInt32, Int32, HRESULT)).call(ulstreamid, mediasamplecontent, ulsubstreamfiltervalue, idataoffset)
  end
  def unmap_stream_id(culstreamid : UInt32, pulstreamid : UInt32*) : HRESULT
    @lpVtbl.value.unmap_stream_id.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(culstreamid, pulstreamid)
  end
  def enum_stream_id_map(ppienumstreamidmap : IEnumStreamIdMap*) : HRESULT
    @lpVtbl.value.enum_stream_id_map.unsafe_as(Proc(IEnumStreamIdMap*, HRESULT)).call(ppienumstreamidmap)
  end
end
struct LibWin32::IRegisterServiceProvider
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def register_service(guidservice : Guid*, punkobject : IUnknown) : HRESULT
    @lpVtbl.value.register_service.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guidservice, punkobject)
  end
end
struct LibWin32::IAMClockSlave
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_error_tolerance(dwtolerance : UInt32) : HRESULT
    @lpVtbl.value.set_error_tolerance.unsafe_as(Proc(UInt32, HRESULT)).call(dwtolerance)
  end
  def get_error_tolerance(pdwtolerance : UInt32*) : HRESULT
    @lpVtbl.value.get_error_tolerance.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwtolerance)
  end
end
struct LibWin32::IAMGraphBuilderCallback
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def selected_filter(pmon : IMoniker) : HRESULT
    @lpVtbl.value.selected_filter.unsafe_as(Proc(IMoniker, HRESULT)).call(pmon)
  end
  def created_filter(pfil : IBaseFilter) : HRESULT
    @lpVtbl.value.created_filter.unsafe_as(Proc(IBaseFilter, HRESULT)).call(pfil)
  end
end
struct LibWin32::IAMFilterGraphCallback
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def unable_to_render(ppin : IPin) : HRESULT
    @lpVtbl.value.unable_to_render.unsafe_as(Proc(IPin, HRESULT)).call(ppin)
  end
end
struct LibWin32::IGetCapabilitiesKey
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_capabilities_key(phkey : HKEY*) : HRESULT
    @lpVtbl.value.get_capabilities_key.unsafe_as(Proc(HKEY*, HRESULT)).call(phkey)
  end
end
struct LibWin32::IEncoderAPI
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def is_supported(api : Guid*) : HRESULT
    @lpVtbl.value.is_supported.unsafe_as(Proc(Guid*, HRESULT)).call(api)
  end
  def is_available(api : Guid*) : HRESULT
    @lpVtbl.value.is_available.unsafe_as(Proc(Guid*, HRESULT)).call(api)
  end
  def get_parameter_range(api : Guid*, valuemin : VARIANT*, valuemax : VARIANT*, steppingdelta : VARIANT*) : HRESULT
    @lpVtbl.value.get_parameter_range.unsafe_as(Proc(Guid*, VARIANT*, VARIANT*, VARIANT*, HRESULT)).call(api, valuemin, valuemax, steppingdelta)
  end
  def get_parameter_values(api : Guid*, values : VARIANT**, valuescount : UInt32*) : HRESULT
    @lpVtbl.value.get_parameter_values.unsafe_as(Proc(Guid*, VARIANT**, UInt32*, HRESULT)).call(api, values, valuescount)
  end
  def get_default_value(api : Guid*, value : VARIANT*) : HRESULT
    @lpVtbl.value.get_default_value.unsafe_as(Proc(Guid*, VARIANT*, HRESULT)).call(api, value)
  end
  def get_value(api : Guid*, value : VARIANT*) : HRESULT
    @lpVtbl.value.get_value.unsafe_as(Proc(Guid*, VARIANT*, HRESULT)).call(api, value)
  end
  def set_value(api : Guid*, value : VARIANT*) : HRESULT
    @lpVtbl.value.set_value.unsafe_as(Proc(Guid*, VARIANT*, HRESULT)).call(api, value)
  end
end
struct LibWin32::IVideoEncoder
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def is_supported(api : Guid*) : HRESULT
    @lpVtbl.value.is_supported.unsafe_as(Proc(Guid*, HRESULT)).call(api)
  end
  def is_available(api : Guid*) : HRESULT
    @lpVtbl.value.is_available.unsafe_as(Proc(Guid*, HRESULT)).call(api)
  end
  def get_parameter_range(api : Guid*, valuemin : VARIANT*, valuemax : VARIANT*, steppingdelta : VARIANT*) : HRESULT
    @lpVtbl.value.get_parameter_range.unsafe_as(Proc(Guid*, VARIANT*, VARIANT*, VARIANT*, HRESULT)).call(api, valuemin, valuemax, steppingdelta)
  end
  def get_parameter_values(api : Guid*, values : VARIANT**, valuescount : UInt32*) : HRESULT
    @lpVtbl.value.get_parameter_values.unsafe_as(Proc(Guid*, VARIANT**, UInt32*, HRESULT)).call(api, values, valuescount)
  end
  def get_default_value(api : Guid*, value : VARIANT*) : HRESULT
    @lpVtbl.value.get_default_value.unsafe_as(Proc(Guid*, VARIANT*, HRESULT)).call(api, value)
  end
  def get_value(api : Guid*, value : VARIANT*) : HRESULT
    @lpVtbl.value.get_value.unsafe_as(Proc(Guid*, VARIANT*, HRESULT)).call(api, value)
  end
  def set_value(api : Guid*, value : VARIANT*) : HRESULT
    @lpVtbl.value.set_value.unsafe_as(Proc(Guid*, VARIANT*, HRESULT)).call(api, value)
  end
end
struct LibWin32::IAMDecoderCaps
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_decoder_caps(dwcapindex : UInt32, lpdwcap : UInt32*) : HRESULT
    @lpVtbl.value.get_decoder_caps.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(dwcapindex, lpdwcap)
  end
end
struct LibWin32::IAMCertifiedOutputProtection
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def key_exchange(prandom : Guid*, varlencertgh : UInt8**, pdwlengthcertgh : UInt32*) : HRESULT
    @lpVtbl.value.key_exchange.unsafe_as(Proc(Guid*, UInt8**, UInt32*, HRESULT)).call(prandom, varlencertgh, pdwlengthcertgh)
  end
  def session_sequence_start(psig : AMCOPPSignature*) : HRESULT
    @lpVtbl.value.session_sequence_start.unsafe_as(Proc(AMCOPPSignature*, HRESULT)).call(psig)
  end
  def protection_command(cmd : AMCOPPCommand*) : HRESULT
    @lpVtbl.value.protection_command.unsafe_as(Proc(AMCOPPCommand*, HRESULT)).call(cmd)
  end
  def protection_status(pstatusinput : AMCOPPStatusInput*, pstatusoutput : AMCOPPStatusOutput*) : HRESULT
    @lpVtbl.value.protection_status.unsafe_as(Proc(AMCOPPStatusInput*, AMCOPPStatusOutput*, HRESULT)).call(pstatusinput, pstatusoutput)
  end
end
struct LibWin32::IAMAsyncReaderTimestampScaling
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_timestamp_mode(pfraw : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_timestamp_mode.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pfraw)
  end
  def set_timestamp_mode(fraw : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_timestamp_mode.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fraw)
  end
end
struct LibWin32::IAMPluginControl
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_preferred_clsid(subtype : Guid*, clsid : Guid*) : HRESULT
    @lpVtbl.value.get_preferred_clsid.unsafe_as(Proc(Guid*, Guid*, HRESULT)).call(subtype, clsid)
  end
  def get_preferred_clsid_by_index(index : UInt32, subtype : Guid*, clsid : Guid*) : HRESULT
    @lpVtbl.value.get_preferred_clsid_by_index.unsafe_as(Proc(UInt32, Guid*, Guid*, HRESULT)).call(index, subtype, clsid)
  end
  def set_preferred_clsid(subtype : Guid*, clsid : Guid*) : HRESULT
    @lpVtbl.value.set_preferred_clsid.unsafe_as(Proc(Guid*, Guid*, HRESULT)).call(subtype, clsid)
  end
  def is_disabled(clsid : Guid*) : HRESULT
    @lpVtbl.value.is_disabled.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def get_disabled_by_index(index : UInt32, clsid : Guid*) : HRESULT
    @lpVtbl.value.get_disabled_by_index.unsafe_as(Proc(UInt32, Guid*, HRESULT)).call(index, clsid)
  end
  def set_disabled(clsid : Guid*, disabled : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_disabled.unsafe_as(Proc(Guid*, LibC::BOOL, HRESULT)).call(clsid, disabled)
  end
  def is_legacy_disabled(dllname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.is_legacy_disabled.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(dllname)
  end
end
struct LibWin32::IPinConnection
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def dynamic_query_accept(pmt : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.dynamic_query_accept.unsafe_as(Proc(AM_MEDIA_TYPE*, HRESULT)).call(pmt)
  end
  def notify_end_of_stream(hnotifyevent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.notify_end_of_stream.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hnotifyevent)
  end
  def is_end_pin : HRESULT
    @lpVtbl.value.is_end_pin.unsafe_as(Proc(HRESULT)).call
  end
  def dynamic_disconnect : HRESULT
    @lpVtbl.value.dynamic_disconnect.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IPinFlowControl
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def block(dwblockflags : UInt32, hevent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.block.unsafe_as(Proc(UInt32, LibC::HANDLE, HRESULT)).call(dwblockflags, hevent)
  end
end
struct LibWin32::IGraphConfig
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def reconnect(poutputpin : IPin, pinputpin : IPin, pmtfirstconnection : AM_MEDIA_TYPE*, pusingfilter : IBaseFilter, habortevent : LibC::HANDLE, dwflags : UInt32) : HRESULT
    @lpVtbl.value.reconnect.unsafe_as(Proc(IPin, IPin, AM_MEDIA_TYPE*, IBaseFilter, LibC::HANDLE, UInt32, HRESULT)).call(poutputpin, pinputpin, pmtfirstconnection, pusingfilter, habortevent, dwflags)
  end
  def reconfigure(pcallback : IGraphConfigCallback, pvcontext : Void*, dwflags : UInt32, habortevent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.reconfigure.unsafe_as(Proc(IGraphConfigCallback, Void*, UInt32, LibC::HANDLE, HRESULT)).call(pcallback, pvcontext, dwflags, habortevent)
  end
  def add_filter_to_cache(pfilter : IBaseFilter) : HRESULT
    @lpVtbl.value.add_filter_to_cache.unsafe_as(Proc(IBaseFilter, HRESULT)).call(pfilter)
  end
  def enum_cache_filter(penum : IEnumFilters*) : HRESULT
    @lpVtbl.value.enum_cache_filter.unsafe_as(Proc(IEnumFilters*, HRESULT)).call(penum)
  end
  def remove_filter_from_cache(pfilter : IBaseFilter) : HRESULT
    @lpVtbl.value.remove_filter_from_cache.unsafe_as(Proc(IBaseFilter, HRESULT)).call(pfilter)
  end
  def get_start_time(prtstart : Int64*) : HRESULT
    @lpVtbl.value.get_start_time.unsafe_as(Proc(Int64*, HRESULT)).call(prtstart)
  end
  def push_through_data(poutputpin : IPin, pconnection : IPinConnection, heventabort : LibC::HANDLE) : HRESULT
    @lpVtbl.value.push_through_data.unsafe_as(Proc(IPin, IPinConnection, LibC::HANDLE, HRESULT)).call(poutputpin, pconnection, heventabort)
  end
  def set_filter_flags(pfilter : IBaseFilter, dwflags : UInt32) : HRESULT
    @lpVtbl.value.set_filter_flags.unsafe_as(Proc(IBaseFilter, UInt32, HRESULT)).call(pfilter, dwflags)
  end
  def get_filter_flags(pfilter : IBaseFilter, pdwflags : UInt32*) : HRESULT
    @lpVtbl.value.get_filter_flags.unsafe_as(Proc(IBaseFilter, UInt32*, HRESULT)).call(pfilter, pdwflags)
  end
  def remove_filter_ex(pfilter : IBaseFilter, flags : UInt32) : HRESULT
    @lpVtbl.value.remove_filter_ex.unsafe_as(Proc(IBaseFilter, UInt32, HRESULT)).call(pfilter, flags)
  end
end
struct LibWin32::IGraphConfigCallback
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def reconfigure(pvcontext : Void*, dwflags : UInt32) : HRESULT
    @lpVtbl.value.reconfigure.unsafe_as(Proc(Void*, UInt32, HRESULT)).call(pvcontext, dwflags)
  end
end
struct LibWin32::IFilterChain
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def start_chain(pstartfilter : IBaseFilter, pendfilter : IBaseFilter) : HRESULT
    @lpVtbl.value.start_chain.unsafe_as(Proc(IBaseFilter, IBaseFilter, HRESULT)).call(pstartfilter, pendfilter)
  end
  def pause_chain(pstartfilter : IBaseFilter, pendfilter : IBaseFilter) : HRESULT
    @lpVtbl.value.pause_chain.unsafe_as(Proc(IBaseFilter, IBaseFilter, HRESULT)).call(pstartfilter, pendfilter)
  end
  def stop_chain(pstartfilter : IBaseFilter, pendfilter : IBaseFilter) : HRESULT
    @lpVtbl.value.stop_chain.unsafe_as(Proc(IBaseFilter, IBaseFilter, HRESULT)).call(pstartfilter, pendfilter)
  end
  def remove_chain(pstartfilter : IBaseFilter, pendfilter : IBaseFilter) : HRESULT
    @lpVtbl.value.remove_chain.unsafe_as(Proc(IBaseFilter, IBaseFilter, HRESULT)).call(pstartfilter, pendfilter)
  end
end
struct LibWin32::IVMRImagePresenter
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def start_presenting(dwuserid : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.start_presenting.unsafe_as(Proc(LibC::UINT_PTR, HRESULT)).call(dwuserid)
  end
  def stop_presenting(dwuserid : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.stop_presenting.unsafe_as(Proc(LibC::UINT_PTR, HRESULT)).call(dwuserid)
  end
  def present_image(dwuserid : LibC::UINT_PTR, lppresinfo : VMRPRESENTATIONINFO*) : HRESULT
    @lpVtbl.value.present_image.unsafe_as(Proc(LibC::UINT_PTR, VMRPRESENTATIONINFO*, HRESULT)).call(dwuserid, lppresinfo)
  end
end
struct LibWin32::IVMRSurfaceAllocator
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def allocate_surface(dwuserid : LibC::UINT_PTR, lpallocinfo : VMRALLOCATIONINFO*, lpdwactualbuffers : UInt32*, lplpsurface : IDirectDrawSurface7*) : HRESULT
    @lpVtbl.value.allocate_surface.unsafe_as(Proc(LibC::UINT_PTR, VMRALLOCATIONINFO*, UInt32*, IDirectDrawSurface7*, HRESULT)).call(dwuserid, lpallocinfo, lpdwactualbuffers, lplpsurface)
  end
  def free_surface(dwid : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.free_surface.unsafe_as(Proc(LibC::UINT_PTR, HRESULT)).call(dwid)
  end
  def prepare_surface(dwuserid : LibC::UINT_PTR, lpsurface : IDirectDrawSurface7, dwsurfaceflags : UInt32) : HRESULT
    @lpVtbl.value.prepare_surface.unsafe_as(Proc(LibC::UINT_PTR, IDirectDrawSurface7, UInt32, HRESULT)).call(dwuserid, lpsurface, dwsurfaceflags)
  end
  def advise_notify(lpivmrsurfallocnotify : IVMRSurfaceAllocatorNotify) : HRESULT
    @lpVtbl.value.advise_notify.unsafe_as(Proc(IVMRSurfaceAllocatorNotify, HRESULT)).call(lpivmrsurfallocnotify)
  end
end
struct LibWin32::IVMRSurfaceAllocatorNotify
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def advise_surface_allocator(dwuserid : LibC::UINT_PTR, lpivrmsurfaceallocator : IVMRSurfaceAllocator) : HRESULT
    @lpVtbl.value.advise_surface_allocator.unsafe_as(Proc(LibC::UINT_PTR, IVMRSurfaceAllocator, HRESULT)).call(dwuserid, lpivrmsurfaceallocator)
  end
  def set_d_draw_device(lpddrawdevice : IDirectDraw7, hmonitor : HMONITOR) : HRESULT
    @lpVtbl.value.set_d_draw_device.unsafe_as(Proc(IDirectDraw7, HMONITOR, HRESULT)).call(lpddrawdevice, hmonitor)
  end
  def change_d_draw_device(lpddrawdevice : IDirectDraw7, hmonitor : HMONITOR) : HRESULT
    @lpVtbl.value.change_d_draw_device.unsafe_as(Proc(IDirectDraw7, HMONITOR, HRESULT)).call(lpddrawdevice, hmonitor)
  end
  def restore_d_draw_surfaces : HRESULT
    @lpVtbl.value.restore_d_draw_surfaces.unsafe_as(Proc(HRESULT)).call
  end
  def notify_event(eventcode : Int32, param1 : LibC::IntPtrT, param2 : LibC::IntPtrT) : HRESULT
    @lpVtbl.value.notify_event.unsafe_as(Proc(Int32, LibC::IntPtrT, LibC::IntPtrT, HRESULT)).call(eventcode, param1, param2)
  end
  def set_border_color(clrborder : UInt32) : HRESULT
    @lpVtbl.value.set_border_color.unsafe_as(Proc(UInt32, HRESULT)).call(clrborder)
  end
end
struct LibWin32::IVMRWindowlessControl
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_native_video_size(lpwidth : Int32*, lpheight : Int32*, lparwidth : Int32*, lparheight : Int32*) : HRESULT
    @lpVtbl.value.get_native_video_size.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, HRESULT)).call(lpwidth, lpheight, lparwidth, lparheight)
  end
  def get_min_ideal_video_size(lpwidth : Int32*, lpheight : Int32*) : HRESULT
    @lpVtbl.value.get_min_ideal_video_size.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(lpwidth, lpheight)
  end
  def get_max_ideal_video_size(lpwidth : Int32*, lpheight : Int32*) : HRESULT
    @lpVtbl.value.get_max_ideal_video_size.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(lpwidth, lpheight)
  end
  def set_video_position(lpsrcrect : RECT*, lpdstrect : RECT*) : HRESULT
    @lpVtbl.value.set_video_position.unsafe_as(Proc(RECT*, RECT*, HRESULT)).call(lpsrcrect, lpdstrect)
  end
  def get_video_position(lpsrcrect : RECT*, lpdstrect : RECT*) : HRESULT
    @lpVtbl.value.get_video_position.unsafe_as(Proc(RECT*, RECT*, HRESULT)).call(lpsrcrect, lpdstrect)
  end
  def get_aspect_ratio_mode(lpaspectratiomode : UInt32*) : HRESULT
    @lpVtbl.value.get_aspect_ratio_mode.unsafe_as(Proc(UInt32*, HRESULT)).call(lpaspectratiomode)
  end
  def set_aspect_ratio_mode(aspectratiomode : UInt32) : HRESULT
    @lpVtbl.value.set_aspect_ratio_mode.unsafe_as(Proc(UInt32, HRESULT)).call(aspectratiomode)
  end
  def set_video_clipping_window(hwnd : LibC::HANDLE) : HRESULT
    @lpVtbl.value.set_video_clipping_window.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hwnd)
  end
  def repaint_video(hwnd : LibC::HANDLE, hdc : HDC) : HRESULT
    @lpVtbl.value.repaint_video.unsafe_as(Proc(LibC::HANDLE, HDC, HRESULT)).call(hwnd, hdc)
  end
  def display_mode_changed : HRESULT
    @lpVtbl.value.display_mode_changed.unsafe_as(Proc(HRESULT)).call
  end
  def get_current_image(lpdib : UInt8**) : HRESULT
    @lpVtbl.value.get_current_image.unsafe_as(Proc(UInt8**, HRESULT)).call(lpdib)
  end
  def set_border_color(clr : UInt32) : HRESULT
    @lpVtbl.value.set_border_color.unsafe_as(Proc(UInt32, HRESULT)).call(clr)
  end
  def get_border_color(lpclr : UInt32*) : HRESULT
    @lpVtbl.value.get_border_color.unsafe_as(Proc(UInt32*, HRESULT)).call(lpclr)
  end
  def set_color_key(clr : UInt32) : HRESULT
    @lpVtbl.value.set_color_key.unsafe_as(Proc(UInt32, HRESULT)).call(clr)
  end
  def get_color_key(lpclr : UInt32*) : HRESULT
    @lpVtbl.value.get_color_key.unsafe_as(Proc(UInt32*, HRESULT)).call(lpclr)
  end
end
struct LibWin32::IVMRMixerControl
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_alpha(dwstreamid : UInt32, alpha : Float32) : HRESULT
    @lpVtbl.value.set_alpha.unsafe_as(Proc(UInt32, Float32, HRESULT)).call(dwstreamid, alpha)
  end
  def get_alpha(dwstreamid : UInt32, palpha : Float32*) : HRESULT
    @lpVtbl.value.get_alpha.unsafe_as(Proc(UInt32, Float32*, HRESULT)).call(dwstreamid, palpha)
  end
  def set_z_order(dwstreamid : UInt32, dwz : UInt32) : HRESULT
    @lpVtbl.value.set_z_order.unsafe_as(Proc(UInt32, UInt32, HRESULT)).call(dwstreamid, dwz)
  end
  def get_z_order(dwstreamid : UInt32, pz : UInt32*) : HRESULT
    @lpVtbl.value.get_z_order.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(dwstreamid, pz)
  end
  def set_output_rect(dwstreamid : UInt32, prect : NORMALIZEDRECT*) : HRESULT
    @lpVtbl.value.set_output_rect.unsafe_as(Proc(UInt32, NORMALIZEDRECT*, HRESULT)).call(dwstreamid, prect)
  end
  def get_output_rect(dwstreamid : UInt32, prect : NORMALIZEDRECT*) : HRESULT
    @lpVtbl.value.get_output_rect.unsafe_as(Proc(UInt32, NORMALIZEDRECT*, HRESULT)).call(dwstreamid, prect)
  end
  def set_background_clr(clrbkg : UInt32) : HRESULT
    @lpVtbl.value.set_background_clr.unsafe_as(Proc(UInt32, HRESULT)).call(clrbkg)
  end
  def get_background_clr(lpclrbkg : UInt32*) : HRESULT
    @lpVtbl.value.get_background_clr.unsafe_as(Proc(UInt32*, HRESULT)).call(lpclrbkg)
  end
  def set_mixing_prefs(dwmixerprefs : UInt32) : HRESULT
    @lpVtbl.value.set_mixing_prefs.unsafe_as(Proc(UInt32, HRESULT)).call(dwmixerprefs)
  end
  def get_mixing_prefs(pdwmixerprefs : UInt32*) : HRESULT
    @lpVtbl.value.get_mixing_prefs.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwmixerprefs)
  end
end
struct LibWin32::IVMRMonitorConfig
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_monitor(pguid : VMRGUID*) : HRESULT
    @lpVtbl.value.set_monitor.unsafe_as(Proc(VMRGUID*, HRESULT)).call(pguid)
  end
  def get_monitor(pguid : VMRGUID*) : HRESULT
    @lpVtbl.value.get_monitor.unsafe_as(Proc(VMRGUID*, HRESULT)).call(pguid)
  end
  def set_default_monitor(pguid : VMRGUID*) : HRESULT
    @lpVtbl.value.set_default_monitor.unsafe_as(Proc(VMRGUID*, HRESULT)).call(pguid)
  end
  def get_default_monitor(pguid : VMRGUID*) : HRESULT
    @lpVtbl.value.get_default_monitor.unsafe_as(Proc(VMRGUID*, HRESULT)).call(pguid)
  end
  def get_available_monitors(pinfo : VMRMONITORINFO*, dwmaxinfoarraysize : UInt32, pdwnumdevices : UInt32*) : HRESULT
    @lpVtbl.value.get_available_monitors.unsafe_as(Proc(VMRMONITORINFO*, UInt32, UInt32*, HRESULT)).call(pinfo, dwmaxinfoarraysize, pdwnumdevices)
  end
end
struct LibWin32::IVMRFilterConfig
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_image_compositor(lpvmrimgcompositor : IVMRImageCompositor) : HRESULT
    @lpVtbl.value.set_image_compositor.unsafe_as(Proc(IVMRImageCompositor, HRESULT)).call(lpvmrimgcompositor)
  end
  def set_number_of_streams(dwmaxstreams : UInt32) : HRESULT
    @lpVtbl.value.set_number_of_streams.unsafe_as(Proc(UInt32, HRESULT)).call(dwmaxstreams)
  end
  def get_number_of_streams(pdwmaxstreams : UInt32*) : HRESULT
    @lpVtbl.value.get_number_of_streams.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwmaxstreams)
  end
  def set_rendering_prefs(dwrenderflags : UInt32) : HRESULT
    @lpVtbl.value.set_rendering_prefs.unsafe_as(Proc(UInt32, HRESULT)).call(dwrenderflags)
  end
  def get_rendering_prefs(pdwrenderflags : UInt32*) : HRESULT
    @lpVtbl.value.get_rendering_prefs.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwrenderflags)
  end
  def set_rendering_mode(mode : UInt32) : HRESULT
    @lpVtbl.value.set_rendering_mode.unsafe_as(Proc(UInt32, HRESULT)).call(mode)
  end
  def get_rendering_mode(pmode : UInt32*) : HRESULT
    @lpVtbl.value.get_rendering_mode.unsafe_as(Proc(UInt32*, HRESULT)).call(pmode)
  end
end
struct LibWin32::IVMRAspectRatioControl
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_aspect_ratio_mode(lpdwarmode : UInt32*) : HRESULT
    @lpVtbl.value.get_aspect_ratio_mode.unsafe_as(Proc(UInt32*, HRESULT)).call(lpdwarmode)
  end
  def set_aspect_ratio_mode(dwarmode : UInt32) : HRESULT
    @lpVtbl.value.set_aspect_ratio_mode.unsafe_as(Proc(UInt32, HRESULT)).call(dwarmode)
  end
end
struct LibWin32::IVMRDeinterlaceControl
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_number_of_deinterlace_modes(lpvideodescription : VMRVideoDesc*, lpdwnumdeinterlacemodes : UInt32*, lpdeinterlacemodes : Guid*) : HRESULT
    @lpVtbl.value.get_number_of_deinterlace_modes.unsafe_as(Proc(VMRVideoDesc*, UInt32*, Guid*, HRESULT)).call(lpvideodescription, lpdwnumdeinterlacemodes, lpdeinterlacemodes)
  end
  def get_deinterlace_mode_caps(lpdeinterlacemode : Guid*, lpvideodescription : VMRVideoDesc*, lpdeinterlacecaps : VMRDeinterlaceCaps*) : HRESULT
    @lpVtbl.value.get_deinterlace_mode_caps.unsafe_as(Proc(Guid*, VMRVideoDesc*, VMRDeinterlaceCaps*, HRESULT)).call(lpdeinterlacemode, lpvideodescription, lpdeinterlacecaps)
  end
  def get_deinterlace_mode(dwstreamid : UInt32, lpdeinterlacemode : Guid*) : HRESULT
    @lpVtbl.value.get_deinterlace_mode.unsafe_as(Proc(UInt32, Guid*, HRESULT)).call(dwstreamid, lpdeinterlacemode)
  end
  def set_deinterlace_mode(dwstreamid : UInt32, lpdeinterlacemode : Guid*) : HRESULT
    @lpVtbl.value.set_deinterlace_mode.unsafe_as(Proc(UInt32, Guid*, HRESULT)).call(dwstreamid, lpdeinterlacemode)
  end
  def get_deinterlace_prefs(lpdwdeinterlaceprefs : UInt32*) : HRESULT
    @lpVtbl.value.get_deinterlace_prefs.unsafe_as(Proc(UInt32*, HRESULT)).call(lpdwdeinterlaceprefs)
  end
  def set_deinterlace_prefs(dwdeinterlaceprefs : UInt32) : HRESULT
    @lpVtbl.value.set_deinterlace_prefs.unsafe_as(Proc(UInt32, HRESULT)).call(dwdeinterlaceprefs)
  end
  def get_actual_deinterlace_mode(dwstreamid : UInt32, lpdeinterlacemode : Guid*) : HRESULT
    @lpVtbl.value.get_actual_deinterlace_mode.unsafe_as(Proc(UInt32, Guid*, HRESULT)).call(dwstreamid, lpdeinterlacemode)
  end
end
struct LibWin32::IVMRMixerBitmap
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_alpha_bitmap(pbmpparms : VMRALPHABITMAP*) : HRESULT
    @lpVtbl.value.set_alpha_bitmap.unsafe_as(Proc(VMRALPHABITMAP*, HRESULT)).call(pbmpparms)
  end
  def update_alpha_bitmap_parameters(pbmpparms : VMRALPHABITMAP*) : HRESULT
    @lpVtbl.value.update_alpha_bitmap_parameters.unsafe_as(Proc(VMRALPHABITMAP*, HRESULT)).call(pbmpparms)
  end
  def get_alpha_bitmap_parameters(pbmpparms : VMRALPHABITMAP*) : HRESULT
    @lpVtbl.value.get_alpha_bitmap_parameters.unsafe_as(Proc(VMRALPHABITMAP*, HRESULT)).call(pbmpparms)
  end
end
struct LibWin32::IVMRImageCompositor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def init_composition_target(pd3ddevice : IUnknown, pddsrendertarget : IDirectDrawSurface7) : HRESULT
    @lpVtbl.value.init_composition_target.unsafe_as(Proc(IUnknown, IDirectDrawSurface7, HRESULT)).call(pd3ddevice, pddsrendertarget)
  end
  def term_composition_target(pd3ddevice : IUnknown, pddsrendertarget : IDirectDrawSurface7) : HRESULT
    @lpVtbl.value.term_composition_target.unsafe_as(Proc(IUnknown, IDirectDrawSurface7, HRESULT)).call(pd3ddevice, pddsrendertarget)
  end
  def set_stream_media_type(dwstrmid : UInt32, pmt : AM_MEDIA_TYPE*, ftexture : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_stream_media_type.unsafe_as(Proc(UInt32, AM_MEDIA_TYPE*, LibC::BOOL, HRESULT)).call(dwstrmid, pmt, ftexture)
  end
  def composite_image(pd3ddevice : IUnknown, pddsrendertarget : IDirectDrawSurface7, pmtrendertarget : AM_MEDIA_TYPE*, rtstart : Int64, rtend : Int64, dwclrbkgnd : UInt32, pvideostreaminfo : VMRVIDEOSTREAMINFO*, cstreams : UInt32) : HRESULT
    @lpVtbl.value.composite_image.unsafe_as(Proc(IUnknown, IDirectDrawSurface7, AM_MEDIA_TYPE*, Int64, Int64, UInt32, VMRVIDEOSTREAMINFO*, UInt32, HRESULT)).call(pd3ddevice, pddsrendertarget, pmtrendertarget, rtstart, rtend, dwclrbkgnd, pvideostreaminfo, cstreams)
  end
end
struct LibWin32::IVMRVideoStreamControl
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_color_key(lpclrkey : DDCOLORKEY*) : HRESULT
    @lpVtbl.value.set_color_key.unsafe_as(Proc(DDCOLORKEY*, HRESULT)).call(lpclrkey)
  end
  def get_color_key(lpclrkey : DDCOLORKEY*) : HRESULT
    @lpVtbl.value.get_color_key.unsafe_as(Proc(DDCOLORKEY*, HRESULT)).call(lpclrkey)
  end
  def set_stream_active_state(factive : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_stream_active_state.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(factive)
  end
  def get_stream_active_state(lpfactive : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_stream_active_state.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(lpfactive)
  end
end
struct LibWin32::IVMRSurface
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def is_surface_locked : HRESULT
    @lpVtbl.value.is_surface_locked.unsafe_as(Proc(HRESULT)).call
  end
  def lock_surface(lpsurface : UInt8**) : HRESULT
    @lpVtbl.value.lock_surface.unsafe_as(Proc(UInt8**, HRESULT)).call(lpsurface)
  end
  def unlock_surface : HRESULT
    @lpVtbl.value.unlock_surface.unsafe_as(Proc(HRESULT)).call
  end
  def get_surface(lplpsurface : IDirectDrawSurface7*) : HRESULT
    @lpVtbl.value.get_surface.unsafe_as(Proc(IDirectDrawSurface7*, HRESULT)).call(lplpsurface)
  end
end
struct LibWin32::IVMRImagePresenterConfig
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_rendering_prefs(dwrenderflags : UInt32) : HRESULT
    @lpVtbl.value.set_rendering_prefs.unsafe_as(Proc(UInt32, HRESULT)).call(dwrenderflags)
  end
  def get_rendering_prefs(dwrenderflags : UInt32*) : HRESULT
    @lpVtbl.value.get_rendering_prefs.unsafe_as(Proc(UInt32*, HRESULT)).call(dwrenderflags)
  end
end
struct LibWin32::IVMRImagePresenterExclModeConfig
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_rendering_prefs(dwrenderflags : UInt32) : HRESULT
    @lpVtbl.value.set_rendering_prefs.unsafe_as(Proc(UInt32, HRESULT)).call(dwrenderflags)
  end
  def get_rendering_prefs(dwrenderflags : UInt32*) : HRESULT
    @lpVtbl.value.get_rendering_prefs.unsafe_as(Proc(UInt32*, HRESULT)).call(dwrenderflags)
  end
  def set_xlc_mode_dd_obj_and_primary_surface(lpddobj : IDirectDraw7, lpprimarysurf : IDirectDrawSurface7) : HRESULT
    @lpVtbl.value.set_xlc_mode_dd_obj_and_primary_surface.unsafe_as(Proc(IDirectDraw7, IDirectDrawSurface7, HRESULT)).call(lpddobj, lpprimarysurf)
  end
  def get_xlc_mode_dd_obj_and_primary_surface(lpddobj : IDirectDraw7*, lpprimarysurf : IDirectDrawSurface7*) : HRESULT
    @lpVtbl.value.get_xlc_mode_dd_obj_and_primary_surface.unsafe_as(Proc(IDirectDraw7*, IDirectDrawSurface7*, HRESULT)).call(lpddobj, lpprimarysurf)
  end
end
struct LibWin32::IVPManager
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_video_port_index(dwvideoportindex : UInt32) : HRESULT
    @lpVtbl.value.set_video_port_index.unsafe_as(Proc(UInt32, HRESULT)).call(dwvideoportindex)
  end
  def get_video_port_index(pdwvideoportindex : UInt32*) : HRESULT
    @lpVtbl.value.get_video_port_index.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwvideoportindex)
  end
end
struct LibWin32::IDvdControl
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def title_play(ultitle : UInt32) : HRESULT
    @lpVtbl.value.title_play.unsafe_as(Proc(UInt32, HRESULT)).call(ultitle)
  end
  def chapter_play(ultitle : UInt32, ulchapter : UInt32) : HRESULT
    @lpVtbl.value.chapter_play.unsafe_as(Proc(UInt32, UInt32, HRESULT)).call(ultitle, ulchapter)
  end
  def time_play(ultitle : UInt32, bcdtime : UInt32) : HRESULT
    @lpVtbl.value.time_play.unsafe_as(Proc(UInt32, UInt32, HRESULT)).call(ultitle, bcdtime)
  end
  def stop_for_resume : HRESULT
    @lpVtbl.value.stop_for_resume.unsafe_as(Proc(HRESULT)).call
  end
  def go_up : HRESULT
    @lpVtbl.value.go_up.unsafe_as(Proc(HRESULT)).call
  end
  def time_search(bcdtime : UInt32) : HRESULT
    @lpVtbl.value.time_search.unsafe_as(Proc(UInt32, HRESULT)).call(bcdtime)
  end
  def chapter_search(ulchapter : UInt32) : HRESULT
    @lpVtbl.value.chapter_search.unsafe_as(Proc(UInt32, HRESULT)).call(ulchapter)
  end
  def prev_pg_search : HRESULT
    @lpVtbl.value.prev_pg_search.unsafe_as(Proc(HRESULT)).call
  end
  def top_pg_search : HRESULT
    @lpVtbl.value.top_pg_search.unsafe_as(Proc(HRESULT)).call
  end
  def next_pg_search : HRESULT
    @lpVtbl.value.next_pg_search.unsafe_as(Proc(HRESULT)).call
  end
  def forward_scan(dwspeed : Float64) : HRESULT
    @lpVtbl.value.forward_scan.unsafe_as(Proc(Float64, HRESULT)).call(dwspeed)
  end
  def backward_scan(dwspeed : Float64) : HRESULT
    @lpVtbl.value.backward_scan.unsafe_as(Proc(Float64, HRESULT)).call(dwspeed)
  end
  def menu_call(menuid : DVD_MENU_ID) : HRESULT
    @lpVtbl.value.menu_call.unsafe_as(Proc(DVD_MENU_ID, HRESULT)).call(menuid)
  end
  def resume : HRESULT
    @lpVtbl.value.resume.unsafe_as(Proc(HRESULT)).call
  end
  def upper_button_select : HRESULT
    @lpVtbl.value.upper_button_select.unsafe_as(Proc(HRESULT)).call
  end
  def lower_button_select : HRESULT
    @lpVtbl.value.lower_button_select.unsafe_as(Proc(HRESULT)).call
  end
  def left_button_select : HRESULT
    @lpVtbl.value.left_button_select.unsafe_as(Proc(HRESULT)).call
  end
  def right_button_select : HRESULT
    @lpVtbl.value.right_button_select.unsafe_as(Proc(HRESULT)).call
  end
  def button_activate : HRESULT
    @lpVtbl.value.button_activate.unsafe_as(Proc(HRESULT)).call
  end
  def button_select_and_activate(ulbutton : UInt32) : HRESULT
    @lpVtbl.value.button_select_and_activate.unsafe_as(Proc(UInt32, HRESULT)).call(ulbutton)
  end
  def still_off : HRESULT
    @lpVtbl.value.still_off.unsafe_as(Proc(HRESULT)).call
  end
  def pause_on : HRESULT
    @lpVtbl.value.pause_on.unsafe_as(Proc(HRESULT)).call
  end
  def pause_off : HRESULT
    @lpVtbl.value.pause_off.unsafe_as(Proc(HRESULT)).call
  end
  def menu_language_select(language : UInt32) : HRESULT
    @lpVtbl.value.menu_language_select.unsafe_as(Proc(UInt32, HRESULT)).call(language)
  end
  def audio_stream_change(ulaudio : UInt32) : HRESULT
    @lpVtbl.value.audio_stream_change.unsafe_as(Proc(UInt32, HRESULT)).call(ulaudio)
  end
  def subpicture_stream_change(ulsubpicture : UInt32, bdisplay : LibC::BOOL) : HRESULT
    @lpVtbl.value.subpicture_stream_change.unsafe_as(Proc(UInt32, LibC::BOOL, HRESULT)).call(ulsubpicture, bdisplay)
  end
  def angle_change(ulangle : UInt32) : HRESULT
    @lpVtbl.value.angle_change.unsafe_as(Proc(UInt32, HRESULT)).call(ulangle)
  end
  def parental_level_select(ulparentallevel : UInt32) : HRESULT
    @lpVtbl.value.parental_level_select.unsafe_as(Proc(UInt32, HRESULT)).call(ulparentallevel)
  end
  def parental_country_select(wcountry : UInt16) : HRESULT
    @lpVtbl.value.parental_country_select.unsafe_as(Proc(UInt16, HRESULT)).call(wcountry)
  end
  def karaoke_audio_presentation_mode_change(ulmode : UInt32) : HRESULT
    @lpVtbl.value.karaoke_audio_presentation_mode_change.unsafe_as(Proc(UInt32, HRESULT)).call(ulmode)
  end
  def video_mode_preferrence(ulpreferreddisplaymode : UInt32) : HRESULT
    @lpVtbl.value.video_mode_preferrence.unsafe_as(Proc(UInt32, HRESULT)).call(ulpreferreddisplaymode)
  end
  def set_root(pszpath : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_root.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(pszpath)
  end
  def mouse_activate(point : POINT) : HRESULT
    @lpVtbl.value.mouse_activate.unsafe_as(Proc(POINT, HRESULT)).call(point)
  end
  def mouse_select(point : POINT) : HRESULT
    @lpVtbl.value.mouse_select.unsafe_as(Proc(POINT, HRESULT)).call(point)
  end
  def chapter_play_auto_stop(ultitle : UInt32, ulchapter : UInt32, ulchapterstoplay : UInt32) : HRESULT
    @lpVtbl.value.chapter_play_auto_stop.unsafe_as(Proc(UInt32, UInt32, UInt32, HRESULT)).call(ultitle, ulchapter, ulchapterstoplay)
  end
end
struct LibWin32::IDvdInfo
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_current_domain(pdomain : DVD_DOMAIN*) : HRESULT
    @lpVtbl.value.get_current_domain.unsafe_as(Proc(DVD_DOMAIN*, HRESULT)).call(pdomain)
  end
  def get_current_location(plocation : DVD_PLAYBACK_LOCATION*) : HRESULT
    @lpVtbl.value.get_current_location.unsafe_as(Proc(DVD_PLAYBACK_LOCATION*, HRESULT)).call(plocation)
  end
  def get_total_title_time(pultotaltime : UInt32*) : HRESULT
    @lpVtbl.value.get_total_title_time.unsafe_as(Proc(UInt32*, HRESULT)).call(pultotaltime)
  end
  def get_current_button(pulbuttonsavailable : UInt32*, pulcurrentbutton : UInt32*) : HRESULT
    @lpVtbl.value.get_current_button.unsafe_as(Proc(UInt32*, UInt32*, HRESULT)).call(pulbuttonsavailable, pulcurrentbutton)
  end
  def get_current_angle(pulanglesavailable : UInt32*, pulcurrentangle : UInt32*) : HRESULT
    @lpVtbl.value.get_current_angle.unsafe_as(Proc(UInt32*, UInt32*, HRESULT)).call(pulanglesavailable, pulcurrentangle)
  end
  def get_current_audio(pulstreamsavailable : UInt32*, pulcurrentstream : UInt32*) : HRESULT
    @lpVtbl.value.get_current_audio.unsafe_as(Proc(UInt32*, UInt32*, HRESULT)).call(pulstreamsavailable, pulcurrentstream)
  end
  def get_current_subpicture(pulstreamsavailable : UInt32*, pulcurrentstream : UInt32*, pisdisabled : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_current_subpicture.unsafe_as(Proc(UInt32*, UInt32*, LibC::BOOL*, HRESULT)).call(pulstreamsavailable, pulcurrentstream, pisdisabled)
  end
  def get_current_uops(puop : UInt32*) : HRESULT
    @lpVtbl.value.get_current_uops.unsafe_as(Proc(UInt32*, HRESULT)).call(puop)
  end
  def get_all_spr_ms(pregisterarray : UInt16**) : HRESULT
    @lpVtbl.value.get_all_spr_ms.unsafe_as(Proc(UInt16**, HRESULT)).call(pregisterarray)
  end
  def get_all_gpr_ms(pregisterarray : UInt16**) : HRESULT
    @lpVtbl.value.get_all_gpr_ms.unsafe_as(Proc(UInt16**, HRESULT)).call(pregisterarray)
  end
  def get_audio_language(ulstream : UInt32, planguage : UInt32*) : HRESULT
    @lpVtbl.value.get_audio_language.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(ulstream, planguage)
  end
  def get_subpicture_language(ulstream : UInt32, planguage : UInt32*) : HRESULT
    @lpVtbl.value.get_subpicture_language.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(ulstream, planguage)
  end
  def get_title_attributes(ultitle : UInt32, patr : DVD_ATR*) : HRESULT
    @lpVtbl.value.get_title_attributes.unsafe_as(Proc(UInt32, DVD_ATR*, HRESULT)).call(ultitle, patr)
  end
  def get_vmg_attributes(patr : DVD_ATR*) : HRESULT
    @lpVtbl.value.get_vmg_attributes.unsafe_as(Proc(DVD_ATR*, HRESULT)).call(patr)
  end
  def get_current_video_attributes(patr : UInt8**) : HRESULT
    @lpVtbl.value.get_current_video_attributes.unsafe_as(Proc(UInt8**, HRESULT)).call(patr)
  end
  def get_current_audio_attributes(patr : UInt8**) : HRESULT
    @lpVtbl.value.get_current_audio_attributes.unsafe_as(Proc(UInt8**, HRESULT)).call(patr)
  end
  def get_current_subpicture_attributes(patr : UInt8**) : HRESULT
    @lpVtbl.value.get_current_subpicture_attributes.unsafe_as(Proc(UInt8**, HRESULT)).call(patr)
  end
  def get_current_volume_info(pulnumofvol : UInt32*, pulthisvolnum : UInt32*, pside : DVD_DISC_SIDE*, pulnumoftitles : UInt32*) : HRESULT
    @lpVtbl.value.get_current_volume_info.unsafe_as(Proc(UInt32*, UInt32*, DVD_DISC_SIDE*, UInt32*, HRESULT)).call(pulnumofvol, pulthisvolnum, pside, pulnumoftitles)
  end
  def get_dvd_text_info(ptextmanager : UInt8*, ulbufsize : UInt32, pulactualsize : UInt32*) : HRESULT
    @lpVtbl.value.get_dvd_text_info.unsafe_as(Proc(UInt8*, UInt32, UInt32*, HRESULT)).call(ptextmanager, ulbufsize, pulactualsize)
  end
  def get_player_parental_level(pulparentallevel : UInt32*, pulcountrycode : UInt32*) : HRESULT
    @lpVtbl.value.get_player_parental_level.unsafe_as(Proc(UInt32*, UInt32*, HRESULT)).call(pulparentallevel, pulcountrycode)
  end
  def get_number_of_chapters(ultitle : UInt32, pulnumberofchapters : UInt32*) : HRESULT
    @lpVtbl.value.get_number_of_chapters.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(ultitle, pulnumberofchapters)
  end
  def get_title_parental_levels(ultitle : UInt32, pulparentallevels : UInt32*) : HRESULT
    @lpVtbl.value.get_title_parental_levels.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(ultitle, pulparentallevels)
  end
  def get_root(proot : UInt8*, ulbufsize : UInt32, pulactualsize : UInt32*) : HRESULT
    @lpVtbl.value.get_root.unsafe_as(Proc(UInt8*, UInt32, UInt32*, HRESULT)).call(proot, ulbufsize, pulactualsize)
  end
end
struct LibWin32::IDvdCmd
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def wait_for_start : HRESULT
    @lpVtbl.value.wait_for_start.unsafe_as(Proc(HRESULT)).call
  end
  def wait_for_end : HRESULT
    @lpVtbl.value.wait_for_end.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IDvdState
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_disc_id(pulluniqueid : UInt64*) : HRESULT
    @lpVtbl.value.get_disc_id.unsafe_as(Proc(UInt64*, HRESULT)).call(pulluniqueid)
  end
  def get_parental_level(pulparentallevel : UInt32*) : HRESULT
    @lpVtbl.value.get_parental_level.unsafe_as(Proc(UInt32*, HRESULT)).call(pulparentallevel)
  end
end
struct LibWin32::IDvdControl2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def play_title(ultitle : UInt32, dwflags : UInt32, ppcmd : IDvdCmd*) : HRESULT
    @lpVtbl.value.play_title.unsafe_as(Proc(UInt32, UInt32, IDvdCmd*, HRESULT)).call(ultitle, dwflags, ppcmd)
  end
  def play_chapter_in_title(ultitle : UInt32, ulchapter : UInt32, dwflags : UInt32, ppcmd : IDvdCmd*) : HRESULT
    @lpVtbl.value.play_chapter_in_title.unsafe_as(Proc(UInt32, UInt32, UInt32, IDvdCmd*, HRESULT)).call(ultitle, ulchapter, dwflags, ppcmd)
  end
  def play_at_time_in_title(ultitle : UInt32, pstarttime : DVD_HMSF_TIMECODE*, dwflags : UInt32, ppcmd : IDvdCmd*) : HRESULT
    @lpVtbl.value.play_at_time_in_title.unsafe_as(Proc(UInt32, DVD_HMSF_TIMECODE*, UInt32, IDvdCmd*, HRESULT)).call(ultitle, pstarttime, dwflags, ppcmd)
  end
  def stop : HRESULT
    @lpVtbl.value.stop.unsafe_as(Proc(HRESULT)).call
  end
  def return_from_submenu(dwflags : UInt32, ppcmd : IDvdCmd*) : HRESULT
    @lpVtbl.value.return_from_submenu.unsafe_as(Proc(UInt32, IDvdCmd*, HRESULT)).call(dwflags, ppcmd)
  end
  def play_at_time(ptime : DVD_HMSF_TIMECODE*, dwflags : UInt32, ppcmd : IDvdCmd*) : HRESULT
    @lpVtbl.value.play_at_time.unsafe_as(Proc(DVD_HMSF_TIMECODE*, UInt32, IDvdCmd*, HRESULT)).call(ptime, dwflags, ppcmd)
  end
  def play_chapter(ulchapter : UInt32, dwflags : UInt32, ppcmd : IDvdCmd*) : HRESULT
    @lpVtbl.value.play_chapter.unsafe_as(Proc(UInt32, UInt32, IDvdCmd*, HRESULT)).call(ulchapter, dwflags, ppcmd)
  end
  def play_prev_chapter(dwflags : UInt32, ppcmd : IDvdCmd*) : HRESULT
    @lpVtbl.value.play_prev_chapter.unsafe_as(Proc(UInt32, IDvdCmd*, HRESULT)).call(dwflags, ppcmd)
  end
  def replay_chapter(dwflags : UInt32, ppcmd : IDvdCmd*) : HRESULT
    @lpVtbl.value.replay_chapter.unsafe_as(Proc(UInt32, IDvdCmd*, HRESULT)).call(dwflags, ppcmd)
  end
  def play_next_chapter(dwflags : UInt32, ppcmd : IDvdCmd*) : HRESULT
    @lpVtbl.value.play_next_chapter.unsafe_as(Proc(UInt32, IDvdCmd*, HRESULT)).call(dwflags, ppcmd)
  end
  def play_forwards(dspeed : Float64, dwflags : UInt32, ppcmd : IDvdCmd*) : HRESULT
    @lpVtbl.value.play_forwards.unsafe_as(Proc(Float64, UInt32, IDvdCmd*, HRESULT)).call(dspeed, dwflags, ppcmd)
  end
  def play_backwards(dspeed : Float64, dwflags : UInt32, ppcmd : IDvdCmd*) : HRESULT
    @lpVtbl.value.play_backwards.unsafe_as(Proc(Float64, UInt32, IDvdCmd*, HRESULT)).call(dspeed, dwflags, ppcmd)
  end
  def show_menu(menuid : DVD_MENU_ID, dwflags : UInt32, ppcmd : IDvdCmd*) : HRESULT
    @lpVtbl.value.show_menu.unsafe_as(Proc(DVD_MENU_ID, UInt32, IDvdCmd*, HRESULT)).call(menuid, dwflags, ppcmd)
  end
  def resume(dwflags : UInt32, ppcmd : IDvdCmd*) : HRESULT
    @lpVtbl.value.resume.unsafe_as(Proc(UInt32, IDvdCmd*, HRESULT)).call(dwflags, ppcmd)
  end
  def select_relative_button(buttondir : DVD_RELATIVE_BUTTON) : HRESULT
    @lpVtbl.value.select_relative_button.unsafe_as(Proc(DVD_RELATIVE_BUTTON, HRESULT)).call(buttondir)
  end
  def activate_button : HRESULT
    @lpVtbl.value.activate_button.unsafe_as(Proc(HRESULT)).call
  end
  def select_button(ulbutton : UInt32) : HRESULT
    @lpVtbl.value.select_button.unsafe_as(Proc(UInt32, HRESULT)).call(ulbutton)
  end
  def select_and_activate_button(ulbutton : UInt32) : HRESULT
    @lpVtbl.value.select_and_activate_button.unsafe_as(Proc(UInt32, HRESULT)).call(ulbutton)
  end
  def still_off : HRESULT
    @lpVtbl.value.still_off.unsafe_as(Proc(HRESULT)).call
  end
  def pause(bstate : LibC::BOOL) : HRESULT
    @lpVtbl.value.pause.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(bstate)
  end
  def select_audio_stream(ulaudio : UInt32, dwflags : UInt32, ppcmd : IDvdCmd*) : HRESULT
    @lpVtbl.value.select_audio_stream.unsafe_as(Proc(UInt32, UInt32, IDvdCmd*, HRESULT)).call(ulaudio, dwflags, ppcmd)
  end
  def select_subpicture_stream(ulsubpicture : UInt32, dwflags : UInt32, ppcmd : IDvdCmd*) : HRESULT
    @lpVtbl.value.select_subpicture_stream.unsafe_as(Proc(UInt32, UInt32, IDvdCmd*, HRESULT)).call(ulsubpicture, dwflags, ppcmd)
  end
  def set_subpicture_state(bstate : LibC::BOOL, dwflags : UInt32, ppcmd : IDvdCmd*) : HRESULT
    @lpVtbl.value.set_subpicture_state.unsafe_as(Proc(LibC::BOOL, UInt32, IDvdCmd*, HRESULT)).call(bstate, dwflags, ppcmd)
  end
  def select_angle(ulangle : UInt32, dwflags : UInt32, ppcmd : IDvdCmd*) : HRESULT
    @lpVtbl.value.select_angle.unsafe_as(Proc(UInt32, UInt32, IDvdCmd*, HRESULT)).call(ulangle, dwflags, ppcmd)
  end
  def select_parental_level(ulparentallevel : UInt32) : HRESULT
    @lpVtbl.value.select_parental_level.unsafe_as(Proc(UInt32, HRESULT)).call(ulparentallevel)
  end
  def select_parental_country(bcountry : UInt8*) : HRESULT
    @lpVtbl.value.select_parental_country.unsafe_as(Proc(UInt8*, HRESULT)).call(bcountry)
  end
  def select_karaoke_audio_presentation_mode(ulmode : UInt32) : HRESULT
    @lpVtbl.value.select_karaoke_audio_presentation_mode.unsafe_as(Proc(UInt32, HRESULT)).call(ulmode)
  end
  def select_video_mode_preference(ulpreferreddisplaymode : UInt32) : HRESULT
    @lpVtbl.value.select_video_mode_preference.unsafe_as(Proc(UInt32, HRESULT)).call(ulpreferreddisplaymode)
  end
  def set_dvd_directory(pszwpath : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_dvd_directory.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(pszwpath)
  end
  def activate_at_position(point : POINT) : HRESULT
    @lpVtbl.value.activate_at_position.unsafe_as(Proc(POINT, HRESULT)).call(point)
  end
  def select_at_position(point : POINT) : HRESULT
    @lpVtbl.value.select_at_position.unsafe_as(Proc(POINT, HRESULT)).call(point)
  end
  def play_chapters_auto_stop(ultitle : UInt32, ulchapter : UInt32, ulchapterstoplay : UInt32, dwflags : UInt32, ppcmd : IDvdCmd*) : HRESULT
    @lpVtbl.value.play_chapters_auto_stop.unsafe_as(Proc(UInt32, UInt32, UInt32, UInt32, IDvdCmd*, HRESULT)).call(ultitle, ulchapter, ulchapterstoplay, dwflags, ppcmd)
  end
  def accept_parental_level_change(baccept : LibC::BOOL) : HRESULT
    @lpVtbl.value.accept_parental_level_change.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(baccept)
  end
  def set_option(flag : DVD_OPTION_FLAG, fstate : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_option.unsafe_as(Proc(DVD_OPTION_FLAG, LibC::BOOL, HRESULT)).call(flag, fstate)
  end
  def set_state(pstate : IDvdState, dwflags : UInt32, ppcmd : IDvdCmd*) : HRESULT
    @lpVtbl.value.set_state.unsafe_as(Proc(IDvdState, UInt32, IDvdCmd*, HRESULT)).call(pstate, dwflags, ppcmd)
  end
  def play_period_in_title_auto_stop(ultitle : UInt32, pstarttime : DVD_HMSF_TIMECODE*, pendtime : DVD_HMSF_TIMECODE*, dwflags : UInt32, ppcmd : IDvdCmd*) : HRESULT
    @lpVtbl.value.play_period_in_title_auto_stop.unsafe_as(Proc(UInt32, DVD_HMSF_TIMECODE*, DVD_HMSF_TIMECODE*, UInt32, IDvdCmd*, HRESULT)).call(ultitle, pstarttime, pendtime, dwflags, ppcmd)
  end
  def set_gprm(ulindex : UInt32, wvalue : UInt16, dwflags : UInt32, ppcmd : IDvdCmd*) : HRESULT
    @lpVtbl.value.set_gprm.unsafe_as(Proc(UInt32, UInt16, UInt32, IDvdCmd*, HRESULT)).call(ulindex, wvalue, dwflags, ppcmd)
  end
  def select_default_menu_language(language : UInt32) : HRESULT
    @lpVtbl.value.select_default_menu_language.unsafe_as(Proc(UInt32, HRESULT)).call(language)
  end
  def select_default_audio_language(language : UInt32, audioextension : DVD_AUDIO_LANG_EXT) : HRESULT
    @lpVtbl.value.select_default_audio_language.unsafe_as(Proc(UInt32, DVD_AUDIO_LANG_EXT, HRESULT)).call(language, audioextension)
  end
  def select_default_subpicture_language(language : UInt32, subpictureextension : DVD_SUBPICTURE_LANG_EXT) : HRESULT
    @lpVtbl.value.select_default_subpicture_language.unsafe_as(Proc(UInt32, DVD_SUBPICTURE_LANG_EXT, HRESULT)).call(language, subpictureextension)
  end
end
struct LibWin32::IDvdInfo2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_current_domain(pdomain : DVD_DOMAIN*) : HRESULT
    @lpVtbl.value.get_current_domain.unsafe_as(Proc(DVD_DOMAIN*, HRESULT)).call(pdomain)
  end
  def get_current_location(plocation : DVD_PLAYBACK_LOCATION2*) : HRESULT
    @lpVtbl.value.get_current_location.unsafe_as(Proc(DVD_PLAYBACK_LOCATION2*, HRESULT)).call(plocation)
  end
  def get_total_title_time(ptotaltime : DVD_HMSF_TIMECODE*, ultimecodeflags : UInt32*) : HRESULT
    @lpVtbl.value.get_total_title_time.unsafe_as(Proc(DVD_HMSF_TIMECODE*, UInt32*, HRESULT)).call(ptotaltime, ultimecodeflags)
  end
  def get_current_button(pulbuttonsavailable : UInt32*, pulcurrentbutton : UInt32*) : HRESULT
    @lpVtbl.value.get_current_button.unsafe_as(Proc(UInt32*, UInt32*, HRESULT)).call(pulbuttonsavailable, pulcurrentbutton)
  end
  def get_current_angle(pulanglesavailable : UInt32*, pulcurrentangle : UInt32*) : HRESULT
    @lpVtbl.value.get_current_angle.unsafe_as(Proc(UInt32*, UInt32*, HRESULT)).call(pulanglesavailable, pulcurrentangle)
  end
  def get_current_audio(pulstreamsavailable : UInt32*, pulcurrentstream : UInt32*) : HRESULT
    @lpVtbl.value.get_current_audio.unsafe_as(Proc(UInt32*, UInt32*, HRESULT)).call(pulstreamsavailable, pulcurrentstream)
  end
  def get_current_subpicture(pulstreamsavailable : UInt32*, pulcurrentstream : UInt32*, pbisdisabled : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_current_subpicture.unsafe_as(Proc(UInt32*, UInt32*, LibC::BOOL*, HRESULT)).call(pulstreamsavailable, pulcurrentstream, pbisdisabled)
  end
  def get_current_uops(puluops : UInt32*) : HRESULT
    @lpVtbl.value.get_current_uops.unsafe_as(Proc(UInt32*, HRESULT)).call(puluops)
  end
  def get_all_spr_ms(pregisterarray : UInt16**) : HRESULT
    @lpVtbl.value.get_all_spr_ms.unsafe_as(Proc(UInt16**, HRESULT)).call(pregisterarray)
  end
  def get_all_gpr_ms(pregisterarray : UInt16**) : HRESULT
    @lpVtbl.value.get_all_gpr_ms.unsafe_as(Proc(UInt16**, HRESULT)).call(pregisterarray)
  end
  def get_audio_language(ulstream : UInt32, planguage : UInt32*) : HRESULT
    @lpVtbl.value.get_audio_language.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(ulstream, planguage)
  end
  def get_subpicture_language(ulstream : UInt32, planguage : UInt32*) : HRESULT
    @lpVtbl.value.get_subpicture_language.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(ulstream, planguage)
  end
  def get_title_attributes(ultitle : UInt32, pmenu : DVD_MenuAttributes*, ptitle : DVD_TitleAttributes*) : HRESULT
    @lpVtbl.value.get_title_attributes.unsafe_as(Proc(UInt32, DVD_MenuAttributes*, DVD_TitleAttributes*, HRESULT)).call(ultitle, pmenu, ptitle)
  end
  def get_vmg_attributes(patr : DVD_MenuAttributes*) : HRESULT
    @lpVtbl.value.get_vmg_attributes.unsafe_as(Proc(DVD_MenuAttributes*, HRESULT)).call(patr)
  end
  def get_current_video_attributes(patr : DVD_VideoAttributes*) : HRESULT
    @lpVtbl.value.get_current_video_attributes.unsafe_as(Proc(DVD_VideoAttributes*, HRESULT)).call(patr)
  end
  def get_audio_attributes(ulstream : UInt32, patr : DVD_AudioAttributes*) : HRESULT
    @lpVtbl.value.get_audio_attributes.unsafe_as(Proc(UInt32, DVD_AudioAttributes*, HRESULT)).call(ulstream, patr)
  end
  def get_karaoke_attributes(ulstream : UInt32, pattributes : DVD_KaraokeAttributes*) : HRESULT
    @lpVtbl.value.get_karaoke_attributes.unsafe_as(Proc(UInt32, DVD_KaraokeAttributes*, HRESULT)).call(ulstream, pattributes)
  end
  def get_subpicture_attributes(ulstream : UInt32, patr : DVD_SubpictureAttributes*) : HRESULT
    @lpVtbl.value.get_subpicture_attributes.unsafe_as(Proc(UInt32, DVD_SubpictureAttributes*, HRESULT)).call(ulstream, patr)
  end
  def get_dvd_volume_info(pulnumofvolumes : UInt32*, pulvolume : UInt32*, pside : DVD_DISC_SIDE*, pulnumoftitles : UInt32*) : HRESULT
    @lpVtbl.value.get_dvd_volume_info.unsafe_as(Proc(UInt32*, UInt32*, DVD_DISC_SIDE*, UInt32*, HRESULT)).call(pulnumofvolumes, pulvolume, pside, pulnumoftitles)
  end
  def get_dvd_text_number_of_languages(pulnumoflangs : UInt32*) : HRESULT
    @lpVtbl.value.get_dvd_text_number_of_languages.unsafe_as(Proc(UInt32*, HRESULT)).call(pulnumoflangs)
  end
  def get_dvd_text_language_info(ullangindex : UInt32, pulnumofstrings : UInt32*, plangcode : UInt32*, pbcharacterset : DVD_TextCharSet*) : HRESULT
    @lpVtbl.value.get_dvd_text_language_info.unsafe_as(Proc(UInt32, UInt32*, UInt32*, DVD_TextCharSet*, HRESULT)).call(ullangindex, pulnumofstrings, plangcode, pbcharacterset)
  end
  def get_dvd_text_string_as_native(ullangindex : UInt32, ulstringindex : UInt32, pbbuffer : UInt8*, ulmaxbuffersize : UInt32, pulactualsize : UInt32*, ptype : DVD_TextStringType*) : HRESULT
    @lpVtbl.value.get_dvd_text_string_as_native.unsafe_as(Proc(UInt32, UInt32, UInt8*, UInt32, UInt32*, DVD_TextStringType*, HRESULT)).call(ullangindex, ulstringindex, pbbuffer, ulmaxbuffersize, pulactualsize, ptype)
  end
  def get_dvd_text_string_as_unicode(ullangindex : UInt32, ulstringindex : UInt32, pchwbuffer : LibC::LPWSTR, ulmaxbuffersize : UInt32, pulactualsize : UInt32*, ptype : DVD_TextStringType*) : HRESULT
    @lpVtbl.value.get_dvd_text_string_as_unicode.unsafe_as(Proc(UInt32, UInt32, LibC::LPWSTR, UInt32, UInt32*, DVD_TextStringType*, HRESULT)).call(ullangindex, ulstringindex, pchwbuffer, ulmaxbuffersize, pulactualsize, ptype)
  end
  def get_player_parental_level(pulparentallevel : UInt32*, pbcountrycode : UInt8*) : HRESULT
    @lpVtbl.value.get_player_parental_level.unsafe_as(Proc(UInt32*, UInt8*, HRESULT)).call(pulparentallevel, pbcountrycode)
  end
  def get_number_of_chapters(ultitle : UInt32, pulnumofchapters : UInt32*) : HRESULT
    @lpVtbl.value.get_number_of_chapters.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(ultitle, pulnumofchapters)
  end
  def get_title_parental_levels(ultitle : UInt32, pulparentallevels : UInt32*) : HRESULT
    @lpVtbl.value.get_title_parental_levels.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(ultitle, pulparentallevels)
  end
  def get_dvd_directory(pszwpath : Char*, ulmaxsize : UInt32, pulactualsize : UInt32*) : HRESULT
    @lpVtbl.value.get_dvd_directory.unsafe_as(Proc(Char*, UInt32, UInt32*, HRESULT)).call(pszwpath, ulmaxsize, pulactualsize)
  end
  def is_audio_stream_enabled(ulstreamnum : UInt32, pbenabled : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_audio_stream_enabled.unsafe_as(Proc(UInt32, LibC::BOOL*, HRESULT)).call(ulstreamnum, pbenabled)
  end
  def get_disc_id(pszwpath : LibC::LPWSTR, pulldiscid : UInt64*) : HRESULT
    @lpVtbl.value.get_disc_id.unsafe_as(Proc(LibC::LPWSTR, UInt64*, HRESULT)).call(pszwpath, pulldiscid)
  end
  def get_state(pstatedata : IDvdState*) : HRESULT
    @lpVtbl.value.get_state.unsafe_as(Proc(IDvdState*, HRESULT)).call(pstatedata)
  end
  def get_menu_languages(planguages : UInt32*, ulmaxlanguages : UInt32, pulactuallanguages : UInt32*) : HRESULT
    @lpVtbl.value.get_menu_languages.unsafe_as(Proc(UInt32*, UInt32, UInt32*, HRESULT)).call(planguages, ulmaxlanguages, pulactuallanguages)
  end
  def get_button_at_position(point : POINT, pulbuttonindex : UInt32*) : HRESULT
    @lpVtbl.value.get_button_at_position.unsafe_as(Proc(POINT, UInt32*, HRESULT)).call(point, pulbuttonindex)
  end
  def get_cmd_from_event(lparam1 : LibC::IntPtrT, pcmdobj : IDvdCmd*) : HRESULT
    @lpVtbl.value.get_cmd_from_event.unsafe_as(Proc(LibC::IntPtrT, IDvdCmd*, HRESULT)).call(lparam1, pcmdobj)
  end
  def get_default_menu_language(planguage : UInt32*) : HRESULT
    @lpVtbl.value.get_default_menu_language.unsafe_as(Proc(UInt32*, HRESULT)).call(planguage)
  end
  def get_default_audio_language(planguage : UInt32*, paudioextension : DVD_AUDIO_LANG_EXT*) : HRESULT
    @lpVtbl.value.get_default_audio_language.unsafe_as(Proc(UInt32*, DVD_AUDIO_LANG_EXT*, HRESULT)).call(planguage, paudioextension)
  end
  def get_default_subpicture_language(planguage : UInt32*, psubpictureextension : DVD_SUBPICTURE_LANG_EXT*) : HRESULT
    @lpVtbl.value.get_default_subpicture_language.unsafe_as(Proc(UInt32*, DVD_SUBPICTURE_LANG_EXT*, HRESULT)).call(planguage, psubpictureextension)
  end
  def get_decoder_caps(pcaps : DVD_DECODER_CAPS*) : HRESULT
    @lpVtbl.value.get_decoder_caps.unsafe_as(Proc(DVD_DECODER_CAPS*, HRESULT)).call(pcaps)
  end
  def get_button_rect(ulbutton : UInt32, prect : RECT*) : HRESULT
    @lpVtbl.value.get_button_rect.unsafe_as(Proc(UInt32, RECT*, HRESULT)).call(ulbutton, prect)
  end
  def is_subpicture_stream_enabled(ulstreamnum : UInt32, pbenabled : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_subpicture_stream_enabled.unsafe_as(Proc(UInt32, LibC::BOOL*, HRESULT)).call(ulstreamnum, pbenabled)
  end
end
struct LibWin32::IDvdGraphBuilder
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_filtergraph(ppgb : IGraphBuilder*) : HRESULT
    @lpVtbl.value.get_filtergraph.unsafe_as(Proc(IGraphBuilder*, HRESULT)).call(ppgb)
  end
  def get_dvd_interface(riid : Guid*, ppvif : Void**) : HRESULT
    @lpVtbl.value.get_dvd_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvif)
  end
  def render_dvd_video_volume(lpcwszpathname : LibC::LPWSTR, dwflags : UInt32, pstatus : AM_DVD_RENDERSTATUS*) : HRESULT
    @lpVtbl.value.render_dvd_video_volume.unsafe_as(Proc(LibC::LPWSTR, UInt32, AM_DVD_RENDERSTATUS*, HRESULT)).call(lpcwszpathname, dwflags, pstatus)
  end
end
struct LibWin32::IDDrawExclModeVideo
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_d_draw_object(pddrawobject : IDirectDraw) : HRESULT
    @lpVtbl.value.set_d_draw_object.unsafe_as(Proc(IDirectDraw, HRESULT)).call(pddrawobject)
  end
  def get_d_draw_object(ppddrawobject : IDirectDraw*, pbusingexternal : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_d_draw_object.unsafe_as(Proc(IDirectDraw*, LibC::BOOL*, HRESULT)).call(ppddrawobject, pbusingexternal)
  end
  def set_d_draw_surface(pddrawsurface : IDirectDrawSurface) : HRESULT
    @lpVtbl.value.set_d_draw_surface.unsafe_as(Proc(IDirectDrawSurface, HRESULT)).call(pddrawsurface)
  end
  def get_d_draw_surface(ppddrawsurface : IDirectDrawSurface*, pbusingexternal : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_d_draw_surface.unsafe_as(Proc(IDirectDrawSurface*, LibC::BOOL*, HRESULT)).call(ppddrawsurface, pbusingexternal)
  end
  def set_draw_parameters(prcsource : RECT*, prctarget : RECT*) : HRESULT
    @lpVtbl.value.set_draw_parameters.unsafe_as(Proc(RECT*, RECT*, HRESULT)).call(prcsource, prctarget)
  end
  def get_native_video_props(pdwvideowidth : UInt32*, pdwvideoheight : UInt32*, pdwpictaspectratiox : UInt32*, pdwpictaspectratioy : UInt32*) : HRESULT
    @lpVtbl.value.get_native_video_props.unsafe_as(Proc(UInt32*, UInt32*, UInt32*, UInt32*, HRESULT)).call(pdwvideowidth, pdwvideoheight, pdwpictaspectratiox, pdwpictaspectratioy)
  end
  def set_callback_interface(pcallback : IDDrawExclModeVideoCallback, dwflags : UInt32) : HRESULT
    @lpVtbl.value.set_callback_interface.unsafe_as(Proc(IDDrawExclModeVideoCallback, UInt32, HRESULT)).call(pcallback, dwflags)
  end
end
struct LibWin32::IDDrawExclModeVideoCallback
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def on_update_overlay(bbefore : LibC::BOOL, dwflags : UInt32, boldvisible : LibC::BOOL, prcoldsrc : RECT*, prcolddest : RECT*, bnewvisible : LibC::BOOL, prcnewsrc : RECT*, prcnewdest : RECT*) : HRESULT
    @lpVtbl.value.on_update_overlay.unsafe_as(Proc(LibC::BOOL, UInt32, LibC::BOOL, RECT*, RECT*, LibC::BOOL, RECT*, RECT*, HRESULT)).call(bbefore, dwflags, boldvisible, prcoldsrc, prcolddest, bnewvisible, prcnewsrc, prcnewdest)
  end
  def on_update_color_key(pkey : COLORKEY*, dwcolor : UInt32) : HRESULT
    @lpVtbl.value.on_update_color_key.unsafe_as(Proc(COLORKEY*, UInt32, HRESULT)).call(pkey, dwcolor)
  end
  def on_update_size(dwwidth : UInt32, dwheight : UInt32, dwarwidth : UInt32, dwarheight : UInt32) : HRESULT
    @lpVtbl.value.on_update_size.unsafe_as(Proc(UInt32, UInt32, UInt32, UInt32, HRESULT)).call(dwwidth, dwheight, dwarwidth, dwarheight)
  end
end
struct LibWin32::IBDA_NetworkProvider
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def put_signal_source(ulsignalsource : UInt32) : HRESULT
    @lpVtbl.value.put_signal_source.unsafe_as(Proc(UInt32, HRESULT)).call(ulsignalsource)
  end
  def get_signal_source(pulsignalsource : UInt32*) : HRESULT
    @lpVtbl.value.get_signal_source.unsafe_as(Proc(UInt32*, HRESULT)).call(pulsignalsource)
  end
  def get_network_type(pguidnetworktype : Guid*) : HRESULT
    @lpVtbl.value.get_network_type.unsafe_as(Proc(Guid*, HRESULT)).call(pguidnetworktype)
  end
  def put_tuning_space(guidtuningspace : Guid*) : HRESULT
    @lpVtbl.value.put_tuning_space.unsafe_as(Proc(Guid*, HRESULT)).call(guidtuningspace)
  end
  def get_tuning_space(pguidtuingspace : Guid*) : HRESULT
    @lpVtbl.value.get_tuning_space.unsafe_as(Proc(Guid*, HRESULT)).call(pguidtuingspace)
  end
  def register_device_filter(punkfiltercontrol : IUnknown, ppvregisitrationcontext : UInt32*) : HRESULT
    @lpVtbl.value.register_device_filter.unsafe_as(Proc(IUnknown, UInt32*, HRESULT)).call(punkfiltercontrol, ppvregisitrationcontext)
  end
  def un_register_device_filter(pvregistrationcontext : UInt32) : HRESULT
    @lpVtbl.value.un_register_device_filter.unsafe_as(Proc(UInt32, HRESULT)).call(pvregistrationcontext)
  end
end
struct LibWin32::IBDA_EthernetFilter
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_multicast_list_size(pulcbaddresses : UInt32*) : HRESULT
    @lpVtbl.value.get_multicast_list_size.unsafe_as(Proc(UInt32*, HRESULT)).call(pulcbaddresses)
  end
  def put_multicast_list(ulcbaddresses : UInt32, paddresslist : UInt8*) : HRESULT
    @lpVtbl.value.put_multicast_list.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(ulcbaddresses, paddresslist)
  end
  def get_multicast_list(pulcbaddresses : UInt32*, paddresslist : UInt8*) : HRESULT
    @lpVtbl.value.get_multicast_list.unsafe_as(Proc(UInt32*, UInt8*, HRESULT)).call(pulcbaddresses, paddresslist)
  end
  def put_multicast_mode(ulmodemask : UInt32) : HRESULT
    @lpVtbl.value.put_multicast_mode.unsafe_as(Proc(UInt32, HRESULT)).call(ulmodemask)
  end
  def get_multicast_mode(pulmodemask : UInt32*) : HRESULT
    @lpVtbl.value.get_multicast_mode.unsafe_as(Proc(UInt32*, HRESULT)).call(pulmodemask)
  end
end
struct LibWin32::IBDA_IPV4Filter
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_multicast_list_size(pulcbaddresses : UInt32*) : HRESULT
    @lpVtbl.value.get_multicast_list_size.unsafe_as(Proc(UInt32*, HRESULT)).call(pulcbaddresses)
  end
  def put_multicast_list(ulcbaddresses : UInt32, paddresslist : UInt8*) : HRESULT
    @lpVtbl.value.put_multicast_list.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(ulcbaddresses, paddresslist)
  end
  def get_multicast_list(pulcbaddresses : UInt32*, paddresslist : UInt8*) : HRESULT
    @lpVtbl.value.get_multicast_list.unsafe_as(Proc(UInt32*, UInt8*, HRESULT)).call(pulcbaddresses, paddresslist)
  end
  def put_multicast_mode(ulmodemask : UInt32) : HRESULT
    @lpVtbl.value.put_multicast_mode.unsafe_as(Proc(UInt32, HRESULT)).call(ulmodemask)
  end
  def get_multicast_mode(pulmodemask : UInt32*) : HRESULT
    @lpVtbl.value.get_multicast_mode.unsafe_as(Proc(UInt32*, HRESULT)).call(pulmodemask)
  end
end
struct LibWin32::IBDA_IPV6Filter
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_multicast_list_size(pulcbaddresses : UInt32*) : HRESULT
    @lpVtbl.value.get_multicast_list_size.unsafe_as(Proc(UInt32*, HRESULT)).call(pulcbaddresses)
  end
  def put_multicast_list(ulcbaddresses : UInt32, paddresslist : UInt8*) : HRESULT
    @lpVtbl.value.put_multicast_list.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(ulcbaddresses, paddresslist)
  end
  def get_multicast_list(pulcbaddresses : UInt32*, paddresslist : UInt8*) : HRESULT
    @lpVtbl.value.get_multicast_list.unsafe_as(Proc(UInt32*, UInt8*, HRESULT)).call(pulcbaddresses, paddresslist)
  end
  def put_multicast_mode(ulmodemask : UInt32) : HRESULT
    @lpVtbl.value.put_multicast_mode.unsafe_as(Proc(UInt32, HRESULT)).call(ulmodemask)
  end
  def get_multicast_mode(pulmodemask : UInt32*) : HRESULT
    @lpVtbl.value.get_multicast_mode.unsafe_as(Proc(UInt32*, HRESULT)).call(pulmodemask)
  end
end
struct LibWin32::IBDA_DeviceControl
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def start_changes : HRESULT
    @lpVtbl.value.start_changes.unsafe_as(Proc(HRESULT)).call
  end
  def check_changes : HRESULT
    @lpVtbl.value.check_changes.unsafe_as(Proc(HRESULT)).call
  end
  def commit_changes : HRESULT
    @lpVtbl.value.commit_changes.unsafe_as(Proc(HRESULT)).call
  end
  def get_change_state(pstate : UInt32*) : HRESULT
    @lpVtbl.value.get_change_state.unsafe_as(Proc(UInt32*, HRESULT)).call(pstate)
  end
end
struct LibWin32::IBDA_PinControl
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_pin_id(pulpinid : UInt32*) : HRESULT
    @lpVtbl.value.get_pin_id.unsafe_as(Proc(UInt32*, HRESULT)).call(pulpinid)
  end
  def get_pin_type(pulpintype : UInt32*) : HRESULT
    @lpVtbl.value.get_pin_type.unsafe_as(Proc(UInt32*, HRESULT)).call(pulpintype)
  end
  def registration_context(pulregistrationctx : UInt32*) : HRESULT
    @lpVtbl.value.registration_context.unsafe_as(Proc(UInt32*, HRESULT)).call(pulregistrationctx)
  end
end
struct LibWin32::IBDA_SignalProperties
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def put_network_type(guidnetworktype : Guid*) : HRESULT
    @lpVtbl.value.put_network_type.unsafe_as(Proc(Guid*, HRESULT)).call(guidnetworktype)
  end
  def get_network_type(pguidnetworktype : Guid*) : HRESULT
    @lpVtbl.value.get_network_type.unsafe_as(Proc(Guid*, HRESULT)).call(pguidnetworktype)
  end
  def put_signal_source(ulsignalsource : UInt32) : HRESULT
    @lpVtbl.value.put_signal_source.unsafe_as(Proc(UInt32, HRESULT)).call(ulsignalsource)
  end
  def get_signal_source(pulsignalsource : UInt32*) : HRESULT
    @lpVtbl.value.get_signal_source.unsafe_as(Proc(UInt32*, HRESULT)).call(pulsignalsource)
  end
  def put_tuning_space(guidtuningspace : Guid*) : HRESULT
    @lpVtbl.value.put_tuning_space.unsafe_as(Proc(Guid*, HRESULT)).call(guidtuningspace)
  end
  def get_tuning_space(pguidtuingspace : Guid*) : HRESULT
    @lpVtbl.value.get_tuning_space.unsafe_as(Proc(Guid*, HRESULT)).call(pguidtuingspace)
  end
end
struct LibWin32::IBDA_SignalStatistics
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def put_signal_strength(ldbstrength : Int32) : HRESULT
    @lpVtbl.value.put_signal_strength.unsafe_as(Proc(Int32, HRESULT)).call(ldbstrength)
  end
  def get_signal_strength(pldbstrength : Int32*) : HRESULT
    @lpVtbl.value.get_signal_strength.unsafe_as(Proc(Int32*, HRESULT)).call(pldbstrength)
  end
  def put_signal_quality(lpercentquality : Int32) : HRESULT
    @lpVtbl.value.put_signal_quality.unsafe_as(Proc(Int32, HRESULT)).call(lpercentquality)
  end
  def get_signal_quality(plpercentquality : Int32*) : HRESULT
    @lpVtbl.value.get_signal_quality.unsafe_as(Proc(Int32*, HRESULT)).call(plpercentquality)
  end
  def put_signal_present(fpresent : BOOLEAN) : HRESULT
    @lpVtbl.value.put_signal_present.unsafe_as(Proc(BOOLEAN, HRESULT)).call(fpresent)
  end
  def get_signal_present(pfpresent : UInt8*) : HRESULT
    @lpVtbl.value.get_signal_present.unsafe_as(Proc(UInt8*, HRESULT)).call(pfpresent)
  end
  def put_signal_locked(flocked : BOOLEAN) : HRESULT
    @lpVtbl.value.put_signal_locked.unsafe_as(Proc(BOOLEAN, HRESULT)).call(flocked)
  end
  def get_signal_locked(pflocked : UInt8*) : HRESULT
    @lpVtbl.value.get_signal_locked.unsafe_as(Proc(UInt8*, HRESULT)).call(pflocked)
  end
  def put_sample_time(lmssampletime : Int32) : HRESULT
    @lpVtbl.value.put_sample_time.unsafe_as(Proc(Int32, HRESULT)).call(lmssampletime)
  end
  def get_sample_time(plmssampletime : Int32*) : HRESULT
    @lpVtbl.value.get_sample_time.unsafe_as(Proc(Int32*, HRESULT)).call(plmssampletime)
  end
end
struct LibWin32::IBDA_Topology
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_node_types(pulcnodetypes : UInt32*, ulcnodetypesmax : UInt32, rgulnodetypes : UInt32*) : HRESULT
    @lpVtbl.value.get_node_types.unsafe_as(Proc(UInt32*, UInt32, UInt32*, HRESULT)).call(pulcnodetypes, ulcnodetypesmax, rgulnodetypes)
  end
  def get_node_descriptors(ulcnodedescriptors : UInt32*, ulcnodedescriptorsmax : UInt32, rgnodedescriptors : BDANODE_DESCRIPTOR*) : HRESULT
    @lpVtbl.value.get_node_descriptors.unsafe_as(Proc(UInt32*, UInt32, BDANODE_DESCRIPTOR*, HRESULT)).call(ulcnodedescriptors, ulcnodedescriptorsmax, rgnodedescriptors)
  end
  def get_node_interfaces(ulnodetype : UInt32, pulcinterfaces : UInt32*, ulcinterfacesmax : UInt32, rgguidinterfaces : Guid*) : HRESULT
    @lpVtbl.value.get_node_interfaces.unsafe_as(Proc(UInt32, UInt32*, UInt32, Guid*, HRESULT)).call(ulnodetype, pulcinterfaces, ulcinterfacesmax, rgguidinterfaces)
  end
  def get_pin_types(pulcpintypes : UInt32*, ulcpintypesmax : UInt32, rgulpintypes : UInt32*) : HRESULT
    @lpVtbl.value.get_pin_types.unsafe_as(Proc(UInt32*, UInt32, UInt32*, HRESULT)).call(pulcpintypes, ulcpintypesmax, rgulpintypes)
  end
  def get_template_connections(pulcconnections : UInt32*, ulcconnectionsmax : UInt32, rgconnections : BDA_TEMPLATE_CONNECTION*) : HRESULT
    @lpVtbl.value.get_template_connections.unsafe_as(Proc(UInt32*, UInt32, BDA_TEMPLATE_CONNECTION*, HRESULT)).call(pulcconnections, ulcconnectionsmax, rgconnections)
  end
  def create_pin(ulpintype : UInt32, pulpinid : UInt32*) : HRESULT
    @lpVtbl.value.create_pin.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(ulpintype, pulpinid)
  end
  def delete_pin(ulpinid : UInt32) : HRESULT
    @lpVtbl.value.delete_pin.unsafe_as(Proc(UInt32, HRESULT)).call(ulpinid)
  end
  def set_media_type(ulpinid : UInt32, pmediatype : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.set_media_type.unsafe_as(Proc(UInt32, AM_MEDIA_TYPE*, HRESULT)).call(ulpinid, pmediatype)
  end
  def set_medium(ulpinid : UInt32, pmedium : REGPINMEDIUM*) : HRESULT
    @lpVtbl.value.set_medium.unsafe_as(Proc(UInt32, REGPINMEDIUM*, HRESULT)).call(ulpinid, pmedium)
  end
  def create_topology(ulinputpinid : UInt32, uloutputpinid : UInt32) : HRESULT
    @lpVtbl.value.create_topology.unsafe_as(Proc(UInt32, UInt32, HRESULT)).call(ulinputpinid, uloutputpinid)
  end
  def get_control_node(ulinputpinid : UInt32, uloutputpinid : UInt32, ulnodetype : UInt32, ppcontrolnode : IUnknown*) : HRESULT
    @lpVtbl.value.get_control_node.unsafe_as(Proc(UInt32, UInt32, UInt32, IUnknown*, HRESULT)).call(ulinputpinid, uloutputpinid, ulnodetype, ppcontrolnode)
  end
end
struct LibWin32::IBDA_VoidTransform
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def start : HRESULT
    @lpVtbl.value.start.unsafe_as(Proc(HRESULT)).call
  end
  def stop : HRESULT
    @lpVtbl.value.stop.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IBDA_NullTransform
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def start : HRESULT
    @lpVtbl.value.start.unsafe_as(Proc(HRESULT)).call
  end
  def stop : HRESULT
    @lpVtbl.value.stop.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IBDA_FrequencyFilter
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def put_autotune(ultransponder : UInt32) : HRESULT
    @lpVtbl.value.put_autotune.unsafe_as(Proc(UInt32, HRESULT)).call(ultransponder)
  end
  def get_autotune(pultransponder : UInt32*) : HRESULT
    @lpVtbl.value.get_autotune.unsafe_as(Proc(UInt32*, HRESULT)).call(pultransponder)
  end
  def put_frequency(ulfrequency : UInt32) : HRESULT
    @lpVtbl.value.put_frequency.unsafe_as(Proc(UInt32, HRESULT)).call(ulfrequency)
  end
  def get_frequency(pulfrequency : UInt32*) : HRESULT
    @lpVtbl.value.get_frequency.unsafe_as(Proc(UInt32*, HRESULT)).call(pulfrequency)
  end
  def put_polarity(polarity : Polarisation) : HRESULT
    @lpVtbl.value.put_polarity.unsafe_as(Proc(Polarisation, HRESULT)).call(polarity)
  end
  def get_polarity(ppolarity : Polarisation*) : HRESULT
    @lpVtbl.value.get_polarity.unsafe_as(Proc(Polarisation*, HRESULT)).call(ppolarity)
  end
  def put_range(ulrange : UInt32) : HRESULT
    @lpVtbl.value.put_range.unsafe_as(Proc(UInt32, HRESULT)).call(ulrange)
  end
  def get_range(pulrange : UInt32*) : HRESULT
    @lpVtbl.value.get_range.unsafe_as(Proc(UInt32*, HRESULT)).call(pulrange)
  end
  def put_bandwidth(ulbandwidth : UInt32) : HRESULT
    @lpVtbl.value.put_bandwidth.unsafe_as(Proc(UInt32, HRESULT)).call(ulbandwidth)
  end
  def get_bandwidth(pulbandwidth : UInt32*) : HRESULT
    @lpVtbl.value.get_bandwidth.unsafe_as(Proc(UInt32*, HRESULT)).call(pulbandwidth)
  end
  def put_frequency_multiplier(ulmultiplier : UInt32) : HRESULT
    @lpVtbl.value.put_frequency_multiplier.unsafe_as(Proc(UInt32, HRESULT)).call(ulmultiplier)
  end
  def get_frequency_multiplier(pulmultiplier : UInt32*) : HRESULT
    @lpVtbl.value.get_frequency_multiplier.unsafe_as(Proc(UInt32*, HRESULT)).call(pulmultiplier)
  end
end
struct LibWin32::IBDA_LNBInfo
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def put_local_oscilator_frequency_low_band(ulloflow : UInt32) : HRESULT
    @lpVtbl.value.put_local_oscilator_frequency_low_band.unsafe_as(Proc(UInt32, HRESULT)).call(ulloflow)
  end
  def get_local_oscilator_frequency_low_band(pulloflow : UInt32*) : HRESULT
    @lpVtbl.value.get_local_oscilator_frequency_low_band.unsafe_as(Proc(UInt32*, HRESULT)).call(pulloflow)
  end
  def put_local_oscilator_frequency_high_band(ullofhigh : UInt32) : HRESULT
    @lpVtbl.value.put_local_oscilator_frequency_high_band.unsafe_as(Proc(UInt32, HRESULT)).call(ullofhigh)
  end
  def get_local_oscilator_frequency_high_band(pullofhigh : UInt32*) : HRESULT
    @lpVtbl.value.get_local_oscilator_frequency_high_band.unsafe_as(Proc(UInt32*, HRESULT)).call(pullofhigh)
  end
  def put_high_low_switch_frequency(ulswitchfrequency : UInt32) : HRESULT
    @lpVtbl.value.put_high_low_switch_frequency.unsafe_as(Proc(UInt32, HRESULT)).call(ulswitchfrequency)
  end
  def get_high_low_switch_frequency(pulswitchfrequency : UInt32*) : HRESULT
    @lpVtbl.value.get_high_low_switch_frequency.unsafe_as(Proc(UInt32*, HRESULT)).call(pulswitchfrequency)
  end
end
struct LibWin32::IBDA_DiseqCommand
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def put_enable_diseq_commands(benable : BOOLEAN) : HRESULT
    @lpVtbl.value.put_enable_diseq_commands.unsafe_as(Proc(BOOLEAN, HRESULT)).call(benable)
  end
  def put_diseq_lnb_source(ullnbsource : UInt32) : HRESULT
    @lpVtbl.value.put_diseq_lnb_source.unsafe_as(Proc(UInt32, HRESULT)).call(ullnbsource)
  end
  def put_diseq_use_tone_burst(busetoneburst : BOOLEAN) : HRESULT
    @lpVtbl.value.put_diseq_use_tone_burst.unsafe_as(Proc(BOOLEAN, HRESULT)).call(busetoneburst)
  end
  def put_diseq_repeats(ulrepeats : UInt32) : HRESULT
    @lpVtbl.value.put_diseq_repeats.unsafe_as(Proc(UInt32, HRESULT)).call(ulrepeats)
  end
  def put_diseq_send_command(ulrequestid : UInt32, ulcbcommandlen : UInt32, pbcommand : UInt8*) : HRESULT
    @lpVtbl.value.put_diseq_send_command.unsafe_as(Proc(UInt32, UInt32, UInt8*, HRESULT)).call(ulrequestid, ulcbcommandlen, pbcommand)
  end
  def get_diseq_response(ulrequestid : UInt32, pulcbresponselen : UInt32*, pbresponse : UInt8*) : HRESULT
    @lpVtbl.value.get_diseq_response.unsafe_as(Proc(UInt32, UInt32*, UInt8*, HRESULT)).call(ulrequestid, pulcbresponselen, pbresponse)
  end
end
struct LibWin32::IBDA_AutoDemodulate
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def put_auto_demodulate : HRESULT
    @lpVtbl.value.put_auto_demodulate.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IBDA_AutoDemodulateEx
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def put_auto_demodulate : HRESULT
    @lpVtbl.value.put_auto_demodulate.unsafe_as(Proc(HRESULT)).call
  end
  def get_supported_device_node_types(ulcdevicenodetypesmax : UInt32, pulcdevicenodetypes : UInt32*, pguiddevicenodetypes : Guid*) : HRESULT
    @lpVtbl.value.get_supported_device_node_types.unsafe_as(Proc(UInt32, UInt32*, Guid*, HRESULT)).call(ulcdevicenodetypesmax, pulcdevicenodetypes, pguiddevicenodetypes)
  end
  def get_supported_video_formats(pulamtunermodetype : UInt32*, pulanalogvideostandard : UInt32*) : HRESULT
    @lpVtbl.value.get_supported_video_formats.unsafe_as(Proc(UInt32*, UInt32*, HRESULT)).call(pulamtunermodetype, pulanalogvideostandard)
  end
  def get_aux_input_count(pulcompositecount : UInt32*, pulsvideocount : UInt32*) : HRESULT
    @lpVtbl.value.get_aux_input_count.unsafe_as(Proc(UInt32*, UInt32*, HRESULT)).call(pulcompositecount, pulsvideocount)
  end
end
struct LibWin32::IBDA_DigitalDemodulator
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def put_modulation_type(pmodulationtype : ModulationType*) : HRESULT
    @lpVtbl.value.put_modulation_type.unsafe_as(Proc(ModulationType*, HRESULT)).call(pmodulationtype)
  end
  def get_modulation_type(pmodulationtype : ModulationType*) : HRESULT
    @lpVtbl.value.get_modulation_type.unsafe_as(Proc(ModulationType*, HRESULT)).call(pmodulationtype)
  end
  def put_inner_fec_method(pfecmethod : FECMethod*) : HRESULT
    @lpVtbl.value.put_inner_fec_method.unsafe_as(Proc(FECMethod*, HRESULT)).call(pfecmethod)
  end
  def get_inner_fec_method(pfecmethod : FECMethod*) : HRESULT
    @lpVtbl.value.get_inner_fec_method.unsafe_as(Proc(FECMethod*, HRESULT)).call(pfecmethod)
  end
  def put_inner_fec_rate(pfecrate : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.put_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(pfecrate)
  end
  def get_inner_fec_rate(pfecrate : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(pfecrate)
  end
  def put_outer_fec_method(pfecmethod : FECMethod*) : HRESULT
    @lpVtbl.value.put_outer_fec_method.unsafe_as(Proc(FECMethod*, HRESULT)).call(pfecmethod)
  end
  def get_outer_fec_method(pfecmethod : FECMethod*) : HRESULT
    @lpVtbl.value.get_outer_fec_method.unsafe_as(Proc(FECMethod*, HRESULT)).call(pfecmethod)
  end
  def put_outer_fec_rate(pfecrate : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.put_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(pfecrate)
  end
  def get_outer_fec_rate(pfecrate : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(pfecrate)
  end
  def put_symbol_rate(psymbolrate : UInt32*) : HRESULT
    @lpVtbl.value.put_symbol_rate.unsafe_as(Proc(UInt32*, HRESULT)).call(psymbolrate)
  end
  def get_symbol_rate(psymbolrate : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_rate.unsafe_as(Proc(UInt32*, HRESULT)).call(psymbolrate)
  end
  def put_spectral_inversion(pspectralinversion : SpectralInversion*) : HRESULT
    @lpVtbl.value.put_spectral_inversion.unsafe_as(Proc(SpectralInversion*, HRESULT)).call(pspectralinversion)
  end
  def get_spectral_inversion(pspectralinversion : SpectralInversion*) : HRESULT
    @lpVtbl.value.get_spectral_inversion.unsafe_as(Proc(SpectralInversion*, HRESULT)).call(pspectralinversion)
  end
end
struct LibWin32::IBDA_DigitalDemodulator2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def put_modulation_type(pmodulationtype : ModulationType*) : HRESULT
    @lpVtbl.value.put_modulation_type.unsafe_as(Proc(ModulationType*, HRESULT)).call(pmodulationtype)
  end
  def get_modulation_type(pmodulationtype : ModulationType*) : HRESULT
    @lpVtbl.value.get_modulation_type.unsafe_as(Proc(ModulationType*, HRESULT)).call(pmodulationtype)
  end
  def put_inner_fec_method(pfecmethod : FECMethod*) : HRESULT
    @lpVtbl.value.put_inner_fec_method.unsafe_as(Proc(FECMethod*, HRESULT)).call(pfecmethod)
  end
  def get_inner_fec_method(pfecmethod : FECMethod*) : HRESULT
    @lpVtbl.value.get_inner_fec_method.unsafe_as(Proc(FECMethod*, HRESULT)).call(pfecmethod)
  end
  def put_inner_fec_rate(pfecrate : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.put_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(pfecrate)
  end
  def get_inner_fec_rate(pfecrate : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(pfecrate)
  end
  def put_outer_fec_method(pfecmethod : FECMethod*) : HRESULT
    @lpVtbl.value.put_outer_fec_method.unsafe_as(Proc(FECMethod*, HRESULT)).call(pfecmethod)
  end
  def get_outer_fec_method(pfecmethod : FECMethod*) : HRESULT
    @lpVtbl.value.get_outer_fec_method.unsafe_as(Proc(FECMethod*, HRESULT)).call(pfecmethod)
  end
  def put_outer_fec_rate(pfecrate : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.put_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(pfecrate)
  end
  def get_outer_fec_rate(pfecrate : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(pfecrate)
  end
  def put_symbol_rate(psymbolrate : UInt32*) : HRESULT
    @lpVtbl.value.put_symbol_rate.unsafe_as(Proc(UInt32*, HRESULT)).call(psymbolrate)
  end
  def get_symbol_rate(psymbolrate : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_rate.unsafe_as(Proc(UInt32*, HRESULT)).call(psymbolrate)
  end
  def put_spectral_inversion(pspectralinversion : SpectralInversion*) : HRESULT
    @lpVtbl.value.put_spectral_inversion.unsafe_as(Proc(SpectralInversion*, HRESULT)).call(pspectralinversion)
  end
  def get_spectral_inversion(pspectralinversion : SpectralInversion*) : HRESULT
    @lpVtbl.value.get_spectral_inversion.unsafe_as(Proc(SpectralInversion*, HRESULT)).call(pspectralinversion)
  end
  def put_guard_interval(pguardinterval : GuardInterval*) : HRESULT
    @lpVtbl.value.put_guard_interval.unsafe_as(Proc(GuardInterval*, HRESULT)).call(pguardinterval)
  end
  def get_guard_interval(pguardinterval : GuardInterval*) : HRESULT
    @lpVtbl.value.get_guard_interval.unsafe_as(Proc(GuardInterval*, HRESULT)).call(pguardinterval)
  end
  def put_transmission_mode(ptransmissionmode : TransmissionMode*) : HRESULT
    @lpVtbl.value.put_transmission_mode.unsafe_as(Proc(TransmissionMode*, HRESULT)).call(ptransmissionmode)
  end
  def get_transmission_mode(ptransmissionmode : TransmissionMode*) : HRESULT
    @lpVtbl.value.get_transmission_mode.unsafe_as(Proc(TransmissionMode*, HRESULT)).call(ptransmissionmode)
  end
  def put_roll_off(prolloff : RollOff*) : HRESULT
    @lpVtbl.value.put_roll_off.unsafe_as(Proc(RollOff*, HRESULT)).call(prolloff)
  end
  def get_roll_off(prolloff : RollOff*) : HRESULT
    @lpVtbl.value.get_roll_off.unsafe_as(Proc(RollOff*, HRESULT)).call(prolloff)
  end
  def put_pilot(ppilot : Pilot*) : HRESULT
    @lpVtbl.value.put_pilot.unsafe_as(Proc(Pilot*, HRESULT)).call(ppilot)
  end
  def get_pilot(ppilot : Pilot*) : HRESULT
    @lpVtbl.value.get_pilot.unsafe_as(Proc(Pilot*, HRESULT)).call(ppilot)
  end
end
struct LibWin32::IBDA_DigitalDemodulator3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def put_modulation_type(pmodulationtype : ModulationType*) : HRESULT
    @lpVtbl.value.put_modulation_type.unsafe_as(Proc(ModulationType*, HRESULT)).call(pmodulationtype)
  end
  def get_modulation_type(pmodulationtype : ModulationType*) : HRESULT
    @lpVtbl.value.get_modulation_type.unsafe_as(Proc(ModulationType*, HRESULT)).call(pmodulationtype)
  end
  def put_inner_fec_method(pfecmethod : FECMethod*) : HRESULT
    @lpVtbl.value.put_inner_fec_method.unsafe_as(Proc(FECMethod*, HRESULT)).call(pfecmethod)
  end
  def get_inner_fec_method(pfecmethod : FECMethod*) : HRESULT
    @lpVtbl.value.get_inner_fec_method.unsafe_as(Proc(FECMethod*, HRESULT)).call(pfecmethod)
  end
  def put_inner_fec_rate(pfecrate : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.put_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(pfecrate)
  end
  def get_inner_fec_rate(pfecrate : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(pfecrate)
  end
  def put_outer_fec_method(pfecmethod : FECMethod*) : HRESULT
    @lpVtbl.value.put_outer_fec_method.unsafe_as(Proc(FECMethod*, HRESULT)).call(pfecmethod)
  end
  def get_outer_fec_method(pfecmethod : FECMethod*) : HRESULT
    @lpVtbl.value.get_outer_fec_method.unsafe_as(Proc(FECMethod*, HRESULT)).call(pfecmethod)
  end
  def put_outer_fec_rate(pfecrate : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.put_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(pfecrate)
  end
  def get_outer_fec_rate(pfecrate : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(pfecrate)
  end
  def put_symbol_rate(psymbolrate : UInt32*) : HRESULT
    @lpVtbl.value.put_symbol_rate.unsafe_as(Proc(UInt32*, HRESULT)).call(psymbolrate)
  end
  def get_symbol_rate(psymbolrate : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_rate.unsafe_as(Proc(UInt32*, HRESULT)).call(psymbolrate)
  end
  def put_spectral_inversion(pspectralinversion : SpectralInversion*) : HRESULT
    @lpVtbl.value.put_spectral_inversion.unsafe_as(Proc(SpectralInversion*, HRESULT)).call(pspectralinversion)
  end
  def get_spectral_inversion(pspectralinversion : SpectralInversion*) : HRESULT
    @lpVtbl.value.get_spectral_inversion.unsafe_as(Proc(SpectralInversion*, HRESULT)).call(pspectralinversion)
  end
  def put_guard_interval(pguardinterval : GuardInterval*) : HRESULT
    @lpVtbl.value.put_guard_interval.unsafe_as(Proc(GuardInterval*, HRESULT)).call(pguardinterval)
  end
  def get_guard_interval(pguardinterval : GuardInterval*) : HRESULT
    @lpVtbl.value.get_guard_interval.unsafe_as(Proc(GuardInterval*, HRESULT)).call(pguardinterval)
  end
  def put_transmission_mode(ptransmissionmode : TransmissionMode*) : HRESULT
    @lpVtbl.value.put_transmission_mode.unsafe_as(Proc(TransmissionMode*, HRESULT)).call(ptransmissionmode)
  end
  def get_transmission_mode(ptransmissionmode : TransmissionMode*) : HRESULT
    @lpVtbl.value.get_transmission_mode.unsafe_as(Proc(TransmissionMode*, HRESULT)).call(ptransmissionmode)
  end
  def put_roll_off(prolloff : RollOff*) : HRESULT
    @lpVtbl.value.put_roll_off.unsafe_as(Proc(RollOff*, HRESULT)).call(prolloff)
  end
  def get_roll_off(prolloff : RollOff*) : HRESULT
    @lpVtbl.value.get_roll_off.unsafe_as(Proc(RollOff*, HRESULT)).call(prolloff)
  end
  def put_pilot(ppilot : Pilot*) : HRESULT
    @lpVtbl.value.put_pilot.unsafe_as(Proc(Pilot*, HRESULT)).call(ppilot)
  end
  def get_pilot(ppilot : Pilot*) : HRESULT
    @lpVtbl.value.get_pilot.unsafe_as(Proc(Pilot*, HRESULT)).call(ppilot)
  end
  def put_signal_timeouts(psignaltimeouts : BDA_SIGNAL_TIMEOUTS*) : HRESULT
    @lpVtbl.value.put_signal_timeouts.unsafe_as(Proc(BDA_SIGNAL_TIMEOUTS*, HRESULT)).call(psignaltimeouts)
  end
  def get_signal_timeouts(psignaltimeouts : BDA_SIGNAL_TIMEOUTS*) : HRESULT
    @lpVtbl.value.get_signal_timeouts.unsafe_as(Proc(BDA_SIGNAL_TIMEOUTS*, HRESULT)).call(psignaltimeouts)
  end
  def put_plp_number(pplpnumber : UInt32*) : HRESULT
    @lpVtbl.value.put_plp_number.unsafe_as(Proc(UInt32*, HRESULT)).call(pplpnumber)
  end
  def get_plp_number(pplpnumber : UInt32*) : HRESULT
    @lpVtbl.value.get_plp_number.unsafe_as(Proc(UInt32*, HRESULT)).call(pplpnumber)
  end
end
struct LibWin32::ICCSubStreamFiltering
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_substream_types(ptypes : Int32*) : HRESULT
    @lpVtbl.value.get_substream_types.unsafe_as(Proc(Int32*, HRESULT)).call(ptypes)
  end
  def put_substream_types(types : Int32) : HRESULT
    @lpVtbl.value.put_substream_types.unsafe_as(Proc(Int32, HRESULT)).call(types)
  end
end
struct LibWin32::IBDA_IPSinkControl
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_multicast_list(pulcbsize : UInt32*, pbbuffer : UInt8**) : HRESULT
    @lpVtbl.value.get_multicast_list.unsafe_as(Proc(UInt32*, UInt8**, HRESULT)).call(pulcbsize, pbbuffer)
  end
  def get_adapter_ip_address(pulcbsize : UInt32*, pbbuffer : UInt8**) : HRESULT
    @lpVtbl.value.get_adapter_ip_address.unsafe_as(Proc(UInt32*, UInt8**, HRESULT)).call(pulcbsize, pbbuffer)
  end
end
struct LibWin32::IBDA_IPSinkInfo
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_multicast_list(pulcbaddresses : UInt32*, ppbaddresslist : UInt8**) : HRESULT
    @lpVtbl.value.get_multicast_list.unsafe_as(Proc(UInt32*, UInt8**, HRESULT)).call(pulcbaddresses, ppbaddresslist)
  end
  def get_adapter_ip_address(pbstrbuffer : UInt8**) : HRESULT
    @lpVtbl.value.get_adapter_ip_address.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrbuffer)
  end
  def get_adapter_description(pbstrbuffer : UInt8**) : HRESULT
    @lpVtbl.value.get_adapter_description.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrbuffer)
  end
end
struct LibWin32::IEnumPIDMap
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def next(crequest : UInt32, ppidmap : PID_MAP*, pcreceived : UInt32*) : HRESULT
    @lpVtbl.value.next.unsafe_as(Proc(UInt32, PID_MAP*, UInt32*, HRESULT)).call(crequest, ppidmap, pcreceived)
  end
  def skip(crecords : UInt32) : HRESULT
    @lpVtbl.value.skip.unsafe_as(Proc(UInt32, HRESULT)).call(crecords)
  end
  def reset : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(HRESULT)).call
  end
  def clone(ppienumpidmap : IEnumPIDMap*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(IEnumPIDMap*, HRESULT)).call(ppienumpidmap)
  end
end
struct LibWin32::IMPEG2PIDMap
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def map_pid(culpid : UInt32, pulpid : UInt32*, mediasamplecontent : MEDIA_SAMPLE_CONTENT) : HRESULT
    @lpVtbl.value.map_pid.unsafe_as(Proc(UInt32, UInt32*, MEDIA_SAMPLE_CONTENT, HRESULT)).call(culpid, pulpid, mediasamplecontent)
  end
  def unmap_pid(culpid : UInt32, pulpid : UInt32*) : HRESULT
    @lpVtbl.value.unmap_pid.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(culpid, pulpid)
  end
  def enum_pid_map(pienumpidmap : IEnumPIDMap*) : HRESULT
    @lpVtbl.value.enum_pid_map.unsafe_as(Proc(IEnumPIDMap*, HRESULT)).call(pienumpidmap)
  end
end
struct LibWin32::IFrequencyMap
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_frequency_mapping(ulcount : UInt32*, ppullist : UInt32**) : HRESULT
    @lpVtbl.value.get_frequency_mapping.unsafe_as(Proc(UInt32*, UInt32**, HRESULT)).call(ulcount, ppullist)
  end
  def put_frequency_mapping(ulcount : UInt32, plist : UInt32*) : HRESULT
    @lpVtbl.value.put_frequency_mapping.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(ulcount, plist)
  end
  def get_country_code(pulcountrycode : UInt32*) : HRESULT
    @lpVtbl.value.get_country_code.unsafe_as(Proc(UInt32*, HRESULT)).call(pulcountrycode)
  end
  def put_country_code(ulcountrycode : UInt32) : HRESULT
    @lpVtbl.value.put_country_code.unsafe_as(Proc(UInt32, HRESULT)).call(ulcountrycode)
  end
  def get_default_frequency_mapping(ulcountrycode : UInt32, pulcount : UInt32*, ppullist : UInt32**) : HRESULT
    @lpVtbl.value.get_default_frequency_mapping.unsafe_as(Proc(UInt32, UInt32*, UInt32**, HRESULT)).call(ulcountrycode, pulcount, ppullist)
  end
  def get_country_code_list(pulcount : UInt32*, ppullist : UInt32**) : HRESULT
    @lpVtbl.value.get_country_code_list.unsafe_as(Proc(UInt32*, UInt32**, HRESULT)).call(pulcount, ppullist)
  end
end
struct LibWin32::IBDA_EasMessage
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_eas_message(uleventid : UInt32, ppeasobject : IUnknown*) : HRESULT
    @lpVtbl.value.get_eas_message.unsafe_as(Proc(UInt32, IUnknown*, HRESULT)).call(uleventid, ppeasobject)
  end
end
struct LibWin32::IBDA_TransportStreamInfo
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_pat_table_tick_count(ppattickcount : UInt32*) : HRESULT
    @lpVtbl.value.get_pat_table_tick_count.unsafe_as(Proc(UInt32*, HRESULT)).call(ppattickcount)
  end
end
struct LibWin32::IBDA_ConditionalAccess
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_smart_card_status(pcardstatus : SmartCardStatusType*, pcardassociation : SmartCardAssociationType*, pbstrcarderror : UInt8**, pfooblocked : Int16*) : HRESULT
    @lpVtbl.value.get_smart_card_status.unsafe_as(Proc(SmartCardStatusType*, SmartCardAssociationType*, UInt8**, Int16*, HRESULT)).call(pcardstatus, pcardassociation, pbstrcarderror, pfooblocked)
  end
  def get_smart_card_info(pbstrcardname : UInt8**, pbstrcardmanufacturer : UInt8**, pfdaylightsavings : Int16*, pbyratingregion : UInt8*, pltimezoneoffsetminutes : Int32*, pbstrlanguage : UInt8**, pealocationcode : EALocationCodeType*) : HRESULT
    @lpVtbl.value.get_smart_card_info.unsafe_as(Proc(UInt8**, UInt8**, Int16*, UInt8*, Int32*, UInt8**, EALocationCodeType*, HRESULT)).call(pbstrcardname, pbstrcardmanufacturer, pfdaylightsavings, pbyratingregion, pltimezoneoffsetminutes, pbstrlanguage, pealocationcode)
  end
  def get_smart_card_applications(pulcapplications : UInt32*, ulcapplicationsmax : UInt32, rgapplications : SmartCardApplication*) : HRESULT
    @lpVtbl.value.get_smart_card_applications.unsafe_as(Proc(UInt32*, UInt32, SmartCardApplication*, HRESULT)).call(pulcapplications, ulcapplicationsmax, rgapplications)
  end
  def get_entitlement(usvirtualchannel : UInt16, pentitlement : EntitlementType*) : HRESULT
    @lpVtbl.value.get_entitlement.unsafe_as(Proc(UInt16, EntitlementType*, HRESULT)).call(usvirtualchannel, pentitlement)
  end
  def tune_by_channel(usvirtualchannel : UInt16) : HRESULT
    @lpVtbl.value.tune_by_channel.unsafe_as(Proc(UInt16, HRESULT)).call(usvirtualchannel)
  end
  def set_program(usprogramnumber : UInt16) : HRESULT
    @lpVtbl.value.set_program.unsafe_as(Proc(UInt16, HRESULT)).call(usprogramnumber)
  end
  def add_program(usprogramnumber : UInt16) : HRESULT
    @lpVtbl.value.add_program.unsafe_as(Proc(UInt16, HRESULT)).call(usprogramnumber)
  end
  def remove_program(usprogramnumber : UInt16) : HRESULT
    @lpVtbl.value.remove_program.unsafe_as(Proc(UInt16, HRESULT)).call(usprogramnumber)
  end
  def get_module_ui(bydialognumber : UInt8, pbstrurl : UInt8**) : HRESULT
    @lpVtbl.value.get_module_ui.unsafe_as(Proc(UInt8, UInt8**, HRESULT)).call(bydialognumber, pbstrurl)
  end
  def inform_ui_closed(bydialognumber : UInt8, closereason : UICloseReasonType) : HRESULT
    @lpVtbl.value.inform_ui_closed.unsafe_as(Proc(UInt8, UICloseReasonType, HRESULT)).call(bydialognumber, closereason)
  end
end
struct LibWin32::IBDA_DiagnosticProperties
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def read(pszpropname : LibC::LPWSTR, pvar : VARIANT*, perrorlog : IErrorLog) : HRESULT
    @lpVtbl.value.read.unsafe_as(Proc(LibC::LPWSTR, VARIANT*, IErrorLog, HRESULT)).call(pszpropname, pvar, perrorlog)
  end
  def write(pszpropname : LibC::LPWSTR, pvar : VARIANT*) : HRESULT
    @lpVtbl.value.write.unsafe_as(Proc(LibC::LPWSTR, VARIANT*, HRESULT)).call(pszpropname, pvar)
  end
end
struct LibWin32::IBDA_DRM
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_drm_pairing_status(pdwstatus : UInt32*, pherror : HRESULT*) : HRESULT
    @lpVtbl.value.get_drm_pairing_status.unsafe_as(Proc(UInt32*, HRESULT*, HRESULT)).call(pdwstatus, pherror)
  end
  def perform_drm_pairing(fsync : LibC::BOOL) : HRESULT
    @lpVtbl.value.perform_drm_pairing.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fsync)
  end
end
struct LibWin32::IBDA_NameValueService
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_value_name_by_index(ulindex : UInt32, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_value_name_by_index.unsafe_as(Proc(UInt32, UInt8**, HRESULT)).call(ulindex, pbstrname)
  end
  def get_value(bstrname : UInt8*, bstrlanguage : UInt8*, pbstrvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_value.unsafe_as(Proc(UInt8*, UInt8*, UInt8**, HRESULT)).call(bstrname, bstrlanguage, pbstrvalue)
  end
  def set_value(uldialogrequest : UInt32, bstrlanguage : UInt8*, bstrname : UInt8*, bstrvalue : UInt8*, ulreserved : UInt32) : HRESULT
    @lpVtbl.value.set_value.unsafe_as(Proc(UInt32, UInt8*, UInt8*, UInt8*, UInt32, HRESULT)).call(uldialogrequest, bstrlanguage, bstrname, bstrvalue, ulreserved)
  end
end
struct LibWin32::IBDA_ConditionalAccessEx
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def check_entitlement_token(uldialogrequest : UInt32, bstrlanguage : UInt8*, requesttype : BDA_CONDITIONALACCESS_REQUESTTYPE, ulcbentitlementtokenlen : UInt32, pbentitlementtoken : UInt8*, puldescramblestatus : UInt32*) : HRESULT
    @lpVtbl.value.check_entitlement_token.unsafe_as(Proc(UInt32, UInt8*, BDA_CONDITIONALACCESS_REQUESTTYPE, UInt32, UInt8*, UInt32*, HRESULT)).call(uldialogrequest, bstrlanguage, requesttype, ulcbentitlementtokenlen, pbentitlementtoken, puldescramblestatus)
  end
  def set_capture_token(ulcbcapturetokenlen : UInt32, pbcapturetoken : UInt8*) : HRESULT
    @lpVtbl.value.set_capture_token.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(ulcbcapturetokenlen, pbcapturetoken)
  end
  def open_broadcast_mmi(uldialogrequest : UInt32, bstrlanguage : UInt8*, eventid : UInt32) : HRESULT
    @lpVtbl.value.open_broadcast_mmi.unsafe_as(Proc(UInt32, UInt8*, UInt32, HRESULT)).call(uldialogrequest, bstrlanguage, eventid)
  end
  def close_mmi_dialog(uldialogrequest : UInt32, bstrlanguage : UInt8*, uldialognumber : UInt32, reasoncode : BDA_CONDITIONALACCESS_MMICLOSEREASON, pulsessionresult : UInt32*) : HRESULT
    @lpVtbl.value.close_mmi_dialog.unsafe_as(Proc(UInt32, UInt8*, UInt32, BDA_CONDITIONALACCESS_MMICLOSEREASON, UInt32*, HRESULT)).call(uldialogrequest, bstrlanguage, uldialognumber, reasoncode, pulsessionresult)
  end
  def create_dialog_request_number(puldialogrequestnumber : UInt32*) : HRESULT
    @lpVtbl.value.create_dialog_request_number.unsafe_as(Proc(UInt32*, HRESULT)).call(puldialogrequestnumber)
  end
end
struct LibWin32::IBDA_ISDBConditionalAccess
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_isdb_cas_request(ulrequestid : UInt32, ulcbrequestbufferlen : UInt32, pbrequestbuffer : UInt8*) : HRESULT
    @lpVtbl.value.set_isdb_cas_request.unsafe_as(Proc(UInt32, UInt32, UInt8*, HRESULT)).call(ulrequestid, ulcbrequestbufferlen, pbrequestbuffer)
  end
end
struct LibWin32::IBDA_EventingService
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def complete_event(uleventid : UInt32, uleventresult : UInt32) : HRESULT
    @lpVtbl.value.complete_event.unsafe_as(Proc(UInt32, UInt32, HRESULT)).call(uleventid, uleventresult)
  end
end
struct LibWin32::IBDA_AUX
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def query_capabilities(pdwnumauxinputsbstr : UInt32*) : HRESULT
    @lpVtbl.value.query_capabilities.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwnumauxinputsbstr)
  end
  def enum_capability(dwindex : UInt32, dwinputid : UInt32*, pconnectortype : Guid*, conntypenum : UInt32*, numvideostds : UInt32*, analogstds : UInt64*) : HRESULT
    @lpVtbl.value.enum_capability.unsafe_as(Proc(UInt32, UInt32*, Guid*, UInt32*, UInt32*, UInt64*, HRESULT)).call(dwindex, dwinputid, pconnectortype, conntypenum, numvideostds, analogstds)
  end
end
struct LibWin32::IBDA_Encoder
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def query_capabilities(numaudiofmts : UInt32*, numvideofmts : UInt32*) : HRESULT
    @lpVtbl.value.query_capabilities.unsafe_as(Proc(UInt32*, UInt32*, HRESULT)).call(numaudiofmts, numvideofmts)
  end
  def enum_audio_capability(fmtindex : UInt32, methodid : UInt32*, algorithmtype : UInt32*, samplingrate : UInt32*, bitdepth : UInt32*, numchannels : UInt32*) : HRESULT
    @lpVtbl.value.enum_audio_capability.unsafe_as(Proc(UInt32, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, HRESULT)).call(fmtindex, methodid, algorithmtype, samplingrate, bitdepth, numchannels)
  end
  def enum_video_capability(fmtindex : UInt32, methodid : UInt32*, algorithmtype : UInt32*, verticalsize : UInt32*, horizontalsize : UInt32*, aspectratio : UInt32*, frameratecode : UInt32*, progressivesequence : UInt32*) : HRESULT
    @lpVtbl.value.enum_video_capability.unsafe_as(Proc(UInt32, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, HRESULT)).call(fmtindex, methodid, algorithmtype, verticalsize, horizontalsize, aspectratio, frameratecode, progressivesequence)
  end
  def set_parameters(audiobitratemode : UInt32, audiobitrate : UInt32, audiomethodid : UInt32, audioprogram : UInt32, videobitratemode : UInt32, videobitrate : UInt32, videomethodid : UInt32) : HRESULT
    @lpVtbl.value.set_parameters.unsafe_as(Proc(UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, HRESULT)).call(audiobitratemode, audiobitrate, audiomethodid, audioprogram, videobitratemode, videobitrate, videomethodid)
  end
  def get_state(audiobitratemax : UInt32*, audiobitratemin : UInt32*, audiobitratemode : UInt32*, audiobitratestepping : UInt32*, audiobitrate : UInt32*, audiomethodid : UInt32*, availableaudioprograms : UInt32*, audioprogram : UInt32*, videobitratemax : UInt32*, videobitratemin : UInt32*, videobitratemode : UInt32*, videobitrate : UInt32*, videobitratestepping : UInt32*, videomethodid : UInt32*, signalsourceid : UInt32*, signalformat : UInt64*, signallock : LibC::BOOL*, signallevel : Int32*, signaltonoiseratio : UInt32*) : HRESULT
    @lpVtbl.value.get_state.unsafe_as(Proc(UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt64*, LibC::BOOL*, Int32*, UInt32*, HRESULT)).call(audiobitratemax, audiobitratemin, audiobitratemode, audiobitratestepping, audiobitrate, audiomethodid, availableaudioprograms, audioprogram, videobitratemax, videobitratemin, videobitratemode, videobitrate, videobitratestepping, videomethodid, signalsourceid, signalformat, signallock, signallevel, signaltonoiseratio)
  end
end
struct LibWin32::IBDA_FDC
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_status(currentbitrate : UInt32*, carrierlock : LibC::BOOL*, currentfrequency : UInt32*, currentspectruminversion : LibC::BOOL*, currentpidlist : UInt8**, currenttidlist : UInt8**, overflow : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(UInt32*, LibC::BOOL*, UInt32*, LibC::BOOL*, UInt8**, UInt8**, LibC::BOOL*, HRESULT)).call(currentbitrate, carrierlock, currentfrequency, currentspectruminversion, currentpidlist, currenttidlist, overflow)
  end
  def request_tables(tableids : UInt8*) : HRESULT
    @lpVtbl.value.request_tables.unsafe_as(Proc(UInt8*, HRESULT)).call(tableids)
  end
  def add_pid(pidstoadd : UInt8*, remainingfilterentries : UInt32*) : HRESULT
    @lpVtbl.value.add_pid.unsafe_as(Proc(UInt8*, UInt32*, HRESULT)).call(pidstoadd, remainingfilterentries)
  end
  def remove_pid(pidstoremove : UInt8*) : HRESULT
    @lpVtbl.value.remove_pid.unsafe_as(Proc(UInt8*, HRESULT)).call(pidstoremove)
  end
  def add_tid(tidstoadd : UInt8*, currenttidlist : UInt8**) : HRESULT
    @lpVtbl.value.add_tid.unsafe_as(Proc(UInt8*, UInt8**, HRESULT)).call(tidstoadd, currenttidlist)
  end
  def remove_tid(tidstoremove : UInt8*) : HRESULT
    @lpVtbl.value.remove_tid.unsafe_as(Proc(UInt8*, HRESULT)).call(tidstoremove)
  end
  def get_table_section(pid : UInt32*, maxbuffersize : UInt32, actualsize : UInt32*, secbuffer : UInt8*) : HRESULT
    @lpVtbl.value.get_table_section.unsafe_as(Proc(UInt32*, UInt32, UInt32*, UInt8*, HRESULT)).call(pid, maxbuffersize, actualsize, secbuffer)
  end
end
struct LibWin32::IBDA_GuideDataDeliveryService
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_guide_data_type(pguiddatatype : Guid*) : HRESULT
    @lpVtbl.value.get_guide_data_type.unsafe_as(Proc(Guid*, HRESULT)).call(pguiddatatype)
  end
  def get_guide_data(pulcbbufferlen : UInt32*, pbbuffer : UInt8*, pulguidedatapercentageprogress : UInt32*) : HRESULT
    @lpVtbl.value.get_guide_data.unsafe_as(Proc(UInt32*, UInt8*, UInt32*, HRESULT)).call(pulcbbufferlen, pbbuffer, pulguidedatapercentageprogress)
  end
  def request_guide_data_update : HRESULT
    @lpVtbl.value.request_guide_data_update.unsafe_as(Proc(HRESULT)).call
  end
  def get_tune_xml_from_service_idx(ul64serviceidx : UInt64, pbstrtunexml : UInt8**) : HRESULT
    @lpVtbl.value.get_tune_xml_from_service_idx.unsafe_as(Proc(UInt64, UInt8**, HRESULT)).call(ul64serviceidx, pbstrtunexml)
  end
  def get_services(pulcbbufferlen : UInt32*, pbbuffer : UInt8*) : HRESULT
    @lpVtbl.value.get_services.unsafe_as(Proc(UInt32*, UInt8*, HRESULT)).call(pulcbbufferlen, pbbuffer)
  end
  def get_service_info_from_tune_xml(bstrtunexml : UInt8*, pbstrservicedescription : UInt8**) : HRESULT
    @lpVtbl.value.get_service_info_from_tune_xml.unsafe_as(Proc(UInt8*, UInt8**, HRESULT)).call(bstrtunexml, pbstrservicedescription)
  end
end
struct LibWin32::IBDA_DRMService
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_drm(puuidnewdrm : Guid*) : HRESULT
    @lpVtbl.value.set_drm.unsafe_as(Proc(Guid*, HRESULT)).call(puuidnewdrm)
  end
  def get_drm_status(pbstrdrmuuidlist : UInt8**, drmuuid : Guid*) : HRESULT
    @lpVtbl.value.get_drm_status.unsafe_as(Proc(UInt8**, Guid*, HRESULT)).call(pbstrdrmuuidlist, drmuuid)
  end
end
struct LibWin32::IBDA_WMDRMSession
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_status(maxcapturetoken : UInt32*, maxstreamingpid : UInt32*, maxlicense : UInt32*, minsecuritylevel : UInt32*, revinfosequencenumber : UInt32*, revinfoissuedtime : UInt64*, revinfottl : UInt32*, revlistversion : UInt32*, ulstate : UInt32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt64*, UInt32*, UInt32*, UInt32*, HRESULT)).call(maxcapturetoken, maxstreamingpid, maxlicense, minsecuritylevel, revinfosequencenumber, revinfoissuedtime, revinfottl, revlistversion, ulstate)
  end
  def set_rev_info(ulrevinfolen : UInt32, pbrevinfo : UInt8*) : HRESULT
    @lpVtbl.value.set_rev_info.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(ulrevinfolen, pbrevinfo)
  end
  def set_crl(ulcrllen : UInt32, pbcrllen : UInt8*) : HRESULT
    @lpVtbl.value.set_crl.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(ulcrllen, pbcrllen)
  end
  def transact_message(ulcbrequest : UInt32, pbrequest : UInt8*, pulcbresponse : UInt32*, pbresponse : UInt8*) : HRESULT
    @lpVtbl.value.transact_message.unsafe_as(Proc(UInt32, UInt8*, UInt32*, UInt8*, HRESULT)).call(ulcbrequest, pbrequest, pulcbresponse, pbresponse)
  end
  def get_license(uuidkey : Guid*, pulpackagelen : UInt32*, pbpackage : UInt8*) : HRESULT
    @lpVtbl.value.get_license.unsafe_as(Proc(Guid*, UInt32*, UInt8*, HRESULT)).call(uuidkey, pulpackagelen, pbpackage)
  end
  def reissue_license(uuidkey : Guid*) : HRESULT
    @lpVtbl.value.reissue_license.unsafe_as(Proc(Guid*, HRESULT)).call(uuidkey)
  end
  def renew_license(ulinxmrlicenselen : UInt32, pbinxmrlicense : UInt8*, ulentitlementtokenlen : UInt32, pbentitlementtoken : UInt8*, puldescramblestatus : UInt32*, puloutxmrlicenselen : UInt32*, pboutxmrlicense : UInt8*) : HRESULT
    @lpVtbl.value.renew_license.unsafe_as(Proc(UInt32, UInt8*, UInt32, UInt8*, UInt32*, UInt32*, UInt8*, HRESULT)).call(ulinxmrlicenselen, pbinxmrlicense, ulentitlementtokenlen, pbentitlementtoken, puldescramblestatus, puloutxmrlicenselen, pboutxmrlicense)
  end
  def get_key_info(pulkeyinfolen : UInt32*, pbkeyinfo : UInt8*) : HRESULT
    @lpVtbl.value.get_key_info.unsafe_as(Proc(UInt32*, UInt8*, HRESULT)).call(pulkeyinfolen, pbkeyinfo)
  end
end
struct LibWin32::IBDA_WMDRMTuner
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def purchase_entitlement(uldialogrequest : UInt32, bstrlanguage : UInt8*, ulpurchasetokenlen : UInt32, pbpurchasetoken : UInt8*, puldescramblestatus : UInt32*, pulcapturetokenlen : UInt32*, pbcapturetoken : UInt8*) : HRESULT
    @lpVtbl.value.purchase_entitlement.unsafe_as(Proc(UInt32, UInt8*, UInt32, UInt8*, UInt32*, UInt32*, UInt8*, HRESULT)).call(uldialogrequest, bstrlanguage, ulpurchasetokenlen, pbpurchasetoken, puldescramblestatus, pulcapturetokenlen, pbcapturetoken)
  end
  def cancel_capture_token(ulcapturetokenlen : UInt32, pbcapturetoken : UInt8*) : HRESULT
    @lpVtbl.value.cancel_capture_token.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(ulcapturetokenlen, pbcapturetoken)
  end
  def set_pid_protection(ulpid : UInt32, uuidkey : Guid*) : HRESULT
    @lpVtbl.value.set_pid_protection.unsafe_as(Proc(UInt32, Guid*, HRESULT)).call(ulpid, uuidkey)
  end
  def get_pid_protection(pulpid : UInt32, uuidkey : Guid*) : HRESULT
    @lpVtbl.value.get_pid_protection.unsafe_as(Proc(UInt32, Guid*, HRESULT)).call(pulpid, uuidkey)
  end
  def set_sync_value(ulsyncvalue : UInt32) : HRESULT
    @lpVtbl.value.set_sync_value.unsafe_as(Proc(UInt32, HRESULT)).call(ulsyncvalue)
  end
  def get_start_code_profile(pulstartcodeprofilelen : UInt32*, pbstartcodeprofile : UInt8*) : HRESULT
    @lpVtbl.value.get_start_code_profile.unsafe_as(Proc(UInt32*, UInt8*, HRESULT)).call(pulstartcodeprofilelen, pbstartcodeprofile)
  end
end
struct LibWin32::IBDA_DRIDRMService
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_drm(bstrnewdrm : UInt8*) : HRESULT
    @lpVtbl.value.set_drm.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrnewdrm)
  end
  def get_drm_status(pbstrdrmuuidlist : UInt8**, drmuuid : Guid*) : HRESULT
    @lpVtbl.value.get_drm_status.unsafe_as(Proc(UInt8**, Guid*, HRESULT)).call(pbstrdrmuuidlist, drmuuid)
  end
  def get_pairing_status(penumpairingstatus : BDA_DrmPairingError*) : HRESULT
    @lpVtbl.value.get_pairing_status.unsafe_as(Proc(BDA_DrmPairingError*, HRESULT)).call(penumpairingstatus)
  end
end
struct LibWin32::IBDA_DRIWMDRMSession
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def acknowledge_license(hrlicenseack : HRESULT) : HRESULT
    @lpVtbl.value.acknowledge_license.unsafe_as(Proc(HRESULT, HRESULT)).call(hrlicenseack)
  end
  def process_license_challenge(dwcblicensemessage : UInt32, pblicensemessage : UInt8*, pdwcblicenseresponse : UInt32*, ppblicenseresponse : UInt8**) : HRESULT
    @lpVtbl.value.process_license_challenge.unsafe_as(Proc(UInt32, UInt8*, UInt32*, UInt8**, HRESULT)).call(dwcblicensemessage, pblicensemessage, pdwcblicenseresponse, ppblicenseresponse)
  end
  def process_registration_challenge(dwcbregistrationmessage : UInt32, pbregistrationmessage : UInt8*, pdwcbregistrationresponse : UInt32*, ppbregistrationresponse : UInt8**) : HRESULT
    @lpVtbl.value.process_registration_challenge.unsafe_as(Proc(UInt32, UInt8*, UInt32*, UInt8**, HRESULT)).call(dwcbregistrationmessage, pbregistrationmessage, pdwcbregistrationresponse, ppbregistrationresponse)
  end
  def set_rev_info(dwrevinfolen : UInt32, pbrevinfo : UInt8*, pdwresponse : UInt32*) : HRESULT
    @lpVtbl.value.set_rev_info.unsafe_as(Proc(UInt32, UInt8*, UInt32*, HRESULT)).call(dwrevinfolen, pbrevinfo, pdwresponse)
  end
  def set_crl(dwcrllen : UInt32, pbcrllen : UInt8*, pdwresponse : UInt32*) : HRESULT
    @lpVtbl.value.set_crl.unsafe_as(Proc(UInt32, UInt8*, UInt32*, HRESULT)).call(dwcrllen, pbcrllen, pdwresponse)
  end
  def get_hms_association_data : HRESULT
    @lpVtbl.value.get_hms_association_data.unsafe_as(Proc(HRESULT)).call
  end
  def get_last_cardea_error(pdwerror : UInt32*) : HRESULT
    @lpVtbl.value.get_last_cardea_error.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwerror)
  end
end
struct LibWin32::IBDA_MUX
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_pid_list(ulpidlistcount : UInt32, pbpidlistbuffer : BDA_MUX_PIDLISTITEM*) : HRESULT
    @lpVtbl.value.set_pid_list.unsafe_as(Proc(UInt32, BDA_MUX_PIDLISTITEM*, HRESULT)).call(ulpidlistcount, pbpidlistbuffer)
  end
  def get_pid_list(pulpidlistcount : UInt32*, pbpidlistbuffer : BDA_MUX_PIDLISTITEM*) : HRESULT
    @lpVtbl.value.get_pid_list.unsafe_as(Proc(UInt32*, BDA_MUX_PIDLISTITEM*, HRESULT)).call(pulpidlistcount, pbpidlistbuffer)
  end
end
struct LibWin32::IBDA_TransportStreamSelector
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_tsid(ustsid : UInt16) : HRESULT
    @lpVtbl.value.set_tsid.unsafe_as(Proc(UInt16, HRESULT)).call(ustsid)
  end
  def get_ts_information(pultsinformationbufferlen : UInt32*, pbtsinformationbuffer : UInt8*) : HRESULT
    @lpVtbl.value.get_ts_information.unsafe_as(Proc(UInt32*, UInt8*, HRESULT)).call(pultsinformationbufferlen, pbtsinformationbuffer)
  end
end
struct LibWin32::IBDA_UserActivityService
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_current_tuner_use_reason(dwusereason : UInt32) : HRESULT
    @lpVtbl.value.set_current_tuner_use_reason.unsafe_as(Proc(UInt32, HRESULT)).call(dwusereason)
  end
  def get_user_activity_interval(pdwactivityinterval : UInt32*) : HRESULT
    @lpVtbl.value.get_user_activity_interval.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwactivityinterval)
  end
  def user_activity_detected : HRESULT
    @lpVtbl.value.user_activity_detected.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IESEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_event_id(pdweventid : UInt32*) : HRESULT
    @lpVtbl.value.get_event_id.unsafe_as(Proc(UInt32*, HRESULT)).call(pdweventid)
  end
  def get_event_type(pguideventtype : Guid*) : HRESULT
    @lpVtbl.value.get_event_type.unsafe_as(Proc(Guid*, HRESULT)).call(pguideventtype)
  end
  def set_completion_status(dwresult : UInt32) : HRESULT
    @lpVtbl.value.set_completion_status.unsafe_as(Proc(UInt32, HRESULT)).call(dwresult)
  end
  def get_data(pbdata : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_data.unsafe_as(Proc(SAFEARRAY**, HRESULT)).call(pbdata)
  end
  def get_string_data(pbstrdata : UInt8**) : HRESULT
    @lpVtbl.value.get_string_data.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrdata)
  end
end
struct LibWin32::IESEvents
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def on_es_event_received(guideventtype : Guid, pesevent : IESEvent) : HRESULT
    @lpVtbl.value.on_es_event_received.unsafe_as(Proc(Guid, IESEvent, HRESULT)).call(guideventtype, pesevent)
  end
end
struct LibWin32::IBroadcastEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def fire(eventid : Guid) : HRESULT
    @lpVtbl.value.fire.unsafe_as(Proc(Guid, HRESULT)).call(eventid)
  end
end
struct LibWin32::IBroadcastEventEx
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def fire(eventid : Guid) : HRESULT
    @lpVtbl.value.fire.unsafe_as(Proc(Guid, HRESULT)).call(eventid)
  end
  def fire_ex(eventid : Guid, param1 : UInt32, param2 : UInt32, param3 : UInt32, param4 : UInt32) : HRESULT
    @lpVtbl.value.fire_ex.unsafe_as(Proc(Guid, UInt32, UInt32, UInt32, UInt32, HRESULT)).call(eventid, param1, param2, param3, param4)
  end
end
struct LibWin32::IAMNetShowConfig
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_buffering_time(pbufferingtime : Float64*) : HRESULT
    @lpVtbl.value.get_buffering_time.unsafe_as(Proc(Float64*, HRESULT)).call(pbufferingtime)
  end
  def put_buffering_time(bufferingtime : Float64) : HRESULT
    @lpVtbl.value.put_buffering_time.unsafe_as(Proc(Float64, HRESULT)).call(bufferingtime)
  end
  def get_use_fixed_udp_port(pusefixedudpport : Int16*) : HRESULT
    @lpVtbl.value.get_use_fixed_udp_port.unsafe_as(Proc(Int16*, HRESULT)).call(pusefixedudpport)
  end
  def put_use_fixed_udp_port(usefixedudpport : Int16) : HRESULT
    @lpVtbl.value.put_use_fixed_udp_port.unsafe_as(Proc(Int16, HRESULT)).call(usefixedudpport)
  end
  def get_fixed_udp_port(pfixedudpport : Int32*) : HRESULT
    @lpVtbl.value.get_fixed_udp_port.unsafe_as(Proc(Int32*, HRESULT)).call(pfixedudpport)
  end
  def put_fixed_udp_port(fixedudpport : Int32) : HRESULT
    @lpVtbl.value.put_fixed_udp_port.unsafe_as(Proc(Int32, HRESULT)).call(fixedudpport)
  end
  def get_use_http_proxy(pusehttpproxy : Int16*) : HRESULT
    @lpVtbl.value.get_use_http_proxy.unsafe_as(Proc(Int16*, HRESULT)).call(pusehttpproxy)
  end
  def put_use_http_proxy(usehttpproxy : Int16) : HRESULT
    @lpVtbl.value.put_use_http_proxy.unsafe_as(Proc(Int16, HRESULT)).call(usehttpproxy)
  end
  def get_enable_auto_proxy(penableautoproxy : Int16*) : HRESULT
    @lpVtbl.value.get_enable_auto_proxy.unsafe_as(Proc(Int16*, HRESULT)).call(penableautoproxy)
  end
  def put_enable_auto_proxy(enableautoproxy : Int16) : HRESULT
    @lpVtbl.value.put_enable_auto_proxy.unsafe_as(Proc(Int16, HRESULT)).call(enableautoproxy)
  end
  def get_http_proxy_host(pbstrhttpproxyhost : UInt8**) : HRESULT
    @lpVtbl.value.get_http_proxy_host.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrhttpproxyhost)
  end
  def put_http_proxy_host(bstrhttpproxyhost : UInt8*) : HRESULT
    @lpVtbl.value.put_http_proxy_host.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrhttpproxyhost)
  end
  def get_http_proxy_port(phttpproxyport : Int32*) : HRESULT
    @lpVtbl.value.get_http_proxy_port.unsafe_as(Proc(Int32*, HRESULT)).call(phttpproxyport)
  end
  def put_http_proxy_port(httpproxyport : Int32) : HRESULT
    @lpVtbl.value.put_http_proxy_port.unsafe_as(Proc(Int32, HRESULT)).call(httpproxyport)
  end
  def get_enable_multicast(penablemulticast : Int16*) : HRESULT
    @lpVtbl.value.get_enable_multicast.unsafe_as(Proc(Int16*, HRESULT)).call(penablemulticast)
  end
  def put_enable_multicast(enablemulticast : Int16) : HRESULT
    @lpVtbl.value.put_enable_multicast.unsafe_as(Proc(Int16, HRESULT)).call(enablemulticast)
  end
  def get_enable_udp(penableudp : Int16*) : HRESULT
    @lpVtbl.value.get_enable_udp.unsafe_as(Proc(Int16*, HRESULT)).call(penableudp)
  end
  def put_enable_udp(enableudp : Int16) : HRESULT
    @lpVtbl.value.put_enable_udp.unsafe_as(Proc(Int16, HRESULT)).call(enableudp)
  end
  def get_enable_tcp(penabletcp : Int16*) : HRESULT
    @lpVtbl.value.get_enable_tcp.unsafe_as(Proc(Int16*, HRESULT)).call(penabletcp)
  end
  def put_enable_tcp(enabletcp : Int16) : HRESULT
    @lpVtbl.value.put_enable_tcp.unsafe_as(Proc(Int16, HRESULT)).call(enabletcp)
  end
  def get_enable_http(penablehttp : Int16*) : HRESULT
    @lpVtbl.value.get_enable_http.unsafe_as(Proc(Int16*, HRESULT)).call(penablehttp)
  end
  def put_enable_http(enablehttp : Int16) : HRESULT
    @lpVtbl.value.put_enable_http.unsafe_as(Proc(Int16, HRESULT)).call(enablehttp)
  end
end
struct LibWin32::IAMChannelInfo
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_channel_name(pbstrchannelname : UInt8**) : HRESULT
    @lpVtbl.value.get_channel_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrchannelname)
  end
  def get_channel_description(pbstrchanneldescription : UInt8**) : HRESULT
    @lpVtbl.value.get_channel_description.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrchanneldescription)
  end
  def get_channel_url(pbstrchannelurl : UInt8**) : HRESULT
    @lpVtbl.value.get_channel_url.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrchannelurl)
  end
  def get_contact_address(pbstrcontactaddress : UInt8**) : HRESULT
    @lpVtbl.value.get_contact_address.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrcontactaddress)
  end
  def get_contact_phone(pbstrcontactphone : UInt8**) : HRESULT
    @lpVtbl.value.get_contact_phone.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrcontactphone)
  end
  def get_contact_email(pbstrcontactemail : UInt8**) : HRESULT
    @lpVtbl.value.get_contact_email.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrcontactemail)
  end
end
struct LibWin32::IAMNetworkStatus
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_received_packets(preceivedpackets : Int32*) : HRESULT
    @lpVtbl.value.get_received_packets.unsafe_as(Proc(Int32*, HRESULT)).call(preceivedpackets)
  end
  def get_recovered_packets(precoveredpackets : Int32*) : HRESULT
    @lpVtbl.value.get_recovered_packets.unsafe_as(Proc(Int32*, HRESULT)).call(precoveredpackets)
  end
  def get_lost_packets(plostpackets : Int32*) : HRESULT
    @lpVtbl.value.get_lost_packets.unsafe_as(Proc(Int32*, HRESULT)).call(plostpackets)
  end
  def get_reception_quality(preceptionquality : Int32*) : HRESULT
    @lpVtbl.value.get_reception_quality.unsafe_as(Proc(Int32*, HRESULT)).call(preceptionquality)
  end
  def get_buffering_count(pbufferingcount : Int32*) : HRESULT
    @lpVtbl.value.get_buffering_count.unsafe_as(Proc(Int32*, HRESULT)).call(pbufferingcount)
  end
  def get_is_broadcast(pisbroadcast : Int16*) : HRESULT
    @lpVtbl.value.get_is_broadcast.unsafe_as(Proc(Int16*, HRESULT)).call(pisbroadcast)
  end
  def get_buffering_progress(pbufferingprogress : Int32*) : HRESULT
    @lpVtbl.value.get_buffering_progress.unsafe_as(Proc(Int32*, HRESULT)).call(pbufferingprogress)
  end
end
struct LibWin32::IAMExtendedSeeking
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_ex_seek_capabilities(pexcapabilities : Int32*) : HRESULT
    @lpVtbl.value.get_ex_seek_capabilities.unsafe_as(Proc(Int32*, HRESULT)).call(pexcapabilities)
  end
  def get_marker_count(pmarkercount : Int32*) : HRESULT
    @lpVtbl.value.get_marker_count.unsafe_as(Proc(Int32*, HRESULT)).call(pmarkercount)
  end
  def get_current_marker(pcurrentmarker : Int32*) : HRESULT
    @lpVtbl.value.get_current_marker.unsafe_as(Proc(Int32*, HRESULT)).call(pcurrentmarker)
  end
  def get_marker_time(markernum : Int32, pmarkertime : Float64*) : HRESULT
    @lpVtbl.value.get_marker_time.unsafe_as(Proc(Int32, Float64*, HRESULT)).call(markernum, pmarkertime)
  end
  def get_marker_name(markernum : Int32, pbstrmarkername : UInt8**) : HRESULT
    @lpVtbl.value.get_marker_name.unsafe_as(Proc(Int32, UInt8**, HRESULT)).call(markernum, pbstrmarkername)
  end
  def put_playback_speed(speed : Float64) : HRESULT
    @lpVtbl.value.put_playback_speed.unsafe_as(Proc(Float64, HRESULT)).call(speed)
  end
  def get_playback_speed(pspeed : Float64*) : HRESULT
    @lpVtbl.value.get_playback_speed.unsafe_as(Proc(Float64*, HRESULT)).call(pspeed)
  end
end
struct LibWin32::IAMNetShowExProps
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_source_protocol(psourceprotocol : Int32*) : HRESULT
    @lpVtbl.value.get_source_protocol.unsafe_as(Proc(Int32*, HRESULT)).call(psourceprotocol)
  end
  def get_bandwidth(pbandwidth : Int32*) : HRESULT
    @lpVtbl.value.get_bandwidth.unsafe_as(Proc(Int32*, HRESULT)).call(pbandwidth)
  end
  def get_error_correction(pbstrerrorcorrection : UInt8**) : HRESULT
    @lpVtbl.value.get_error_correction.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrerrorcorrection)
  end
  def get_codec_count(pcodeccount : Int32*) : HRESULT
    @lpVtbl.value.get_codec_count.unsafe_as(Proc(Int32*, HRESULT)).call(pcodeccount)
  end
  def get_codec_installed(codecnum : Int32, pcodecinstalled : Int16*) : HRESULT
    @lpVtbl.value.get_codec_installed.unsafe_as(Proc(Int32, Int16*, HRESULT)).call(codecnum, pcodecinstalled)
  end
  def get_codec_description(codecnum : Int32, pbstrcodecdescription : UInt8**) : HRESULT
    @lpVtbl.value.get_codec_description.unsafe_as(Proc(Int32, UInt8**, HRESULT)).call(codecnum, pbstrcodecdescription)
  end
  def get_codec_url(codecnum : Int32, pbstrcodecurl : UInt8**) : HRESULT
    @lpVtbl.value.get_codec_url.unsafe_as(Proc(Int32, UInt8**, HRESULT)).call(codecnum, pbstrcodecurl)
  end
  def get_creation_date(pcreationdate : Float64*) : HRESULT
    @lpVtbl.value.get_creation_date.unsafe_as(Proc(Float64*, HRESULT)).call(pcreationdate)
  end
  def get_source_link(pbstrsourcelink : UInt8**) : HRESULT
    @lpVtbl.value.get_source_link.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrsourcelink)
  end
end
struct LibWin32::IAMExtendedErrorInfo
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_has_error(phaserror : Int16*) : HRESULT
    @lpVtbl.value.get_has_error.unsafe_as(Proc(Int16*, HRESULT)).call(phaserror)
  end
  def get_error_description(pbstrerrordescription : UInt8**) : HRESULT
    @lpVtbl.value.get_error_description.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrerrordescription)
  end
  def get_error_code(perrorcode : Int32*) : HRESULT
    @lpVtbl.value.get_error_code.unsafe_as(Proc(Int32*, HRESULT)).call(perrorcode)
  end
end
struct LibWin32::IAMMediaContent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_author_name(pbstrauthorname : UInt8**) : HRESULT
    @lpVtbl.value.get_author_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrauthorname)
  end
  def get_title(pbstrtitle : UInt8**) : HRESULT
    @lpVtbl.value.get_title.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrtitle)
  end
  def get_rating(pbstrrating : UInt8**) : HRESULT
    @lpVtbl.value.get_rating.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrrating)
  end
  def get_description(pbstrdescription : UInt8**) : HRESULT
    @lpVtbl.value.get_description.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrdescription)
  end
  def get_copyright(pbstrcopyright : UInt8**) : HRESULT
    @lpVtbl.value.get_copyright.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrcopyright)
  end
  def get_base_url(pbstrbaseurl : UInt8**) : HRESULT
    @lpVtbl.value.get_base_url.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrbaseurl)
  end
  def get_logo_url(pbstrlogourl : UInt8**) : HRESULT
    @lpVtbl.value.get_logo_url.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrlogourl)
  end
  def get_logo_icon_url(pbstrlogourl : UInt8**) : HRESULT
    @lpVtbl.value.get_logo_icon_url.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrlogourl)
  end
  def get_watermark_url(pbstrwatermarkurl : UInt8**) : HRESULT
    @lpVtbl.value.get_watermark_url.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrwatermarkurl)
  end
  def get_more_info_url(pbstrmoreinfourl : UInt8**) : HRESULT
    @lpVtbl.value.get_more_info_url.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrmoreinfourl)
  end
  def get_more_info_banner_image(pbstrmoreinfobannerimage : UInt8**) : HRESULT
    @lpVtbl.value.get_more_info_banner_image.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrmoreinfobannerimage)
  end
  def get_more_info_banner_url(pbstrmoreinfobannerurl : UInt8**) : HRESULT
    @lpVtbl.value.get_more_info_banner_url.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrmoreinfobannerurl)
  end
  def get_more_info_text(pbstrmoreinfotext : UInt8**) : HRESULT
    @lpVtbl.value.get_more_info_text.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrmoreinfotext)
  end
end
struct LibWin32::IAMMediaContent2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_media_parameter(entrynum : Int32, bstrname : UInt8*, pbstrvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_media_parameter.unsafe_as(Proc(Int32, UInt8*, UInt8**, HRESULT)).call(entrynum, bstrname, pbstrvalue)
  end
  def get_media_parameter_name(entrynum : Int32, index : Int32, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_media_parameter_name.unsafe_as(Proc(Int32, Int32, UInt8**, HRESULT)).call(entrynum, index, pbstrname)
  end
  def get_playlist_count(pnumberentries : Int32*) : HRESULT
    @lpVtbl.value.get_playlist_count.unsafe_as(Proc(Int32*, HRESULT)).call(pnumberentries)
  end
end
struct LibWin32::IAMNetShowPreroll
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_preroll(fpreroll : Int16) : HRESULT
    @lpVtbl.value.put_preroll.unsafe_as(Proc(Int16, HRESULT)).call(fpreroll)
  end
  def get_preroll(pfpreroll : Int16*) : HRESULT
    @lpVtbl.value.get_preroll.unsafe_as(Proc(Int16*, HRESULT)).call(pfpreroll)
  end
end
struct LibWin32::IDShowPlugin
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_url(purl : UInt8**) : HRESULT
    @lpVtbl.value.get_url.unsafe_as(Proc(UInt8**, HRESULT)).call(purl)
  end
  def get_user_agent(puseragent : UInt8**) : HRESULT
    @lpVtbl.value.get_user_agent.unsafe_as(Proc(UInt8**, HRESULT)).call(puseragent)
  end
end
struct LibWin32::IAMDirectSound
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_direct_sound_interface(lplpds : IDirectSound*) : HRESULT
    @lpVtbl.value.get_direct_sound_interface.unsafe_as(Proc(IDirectSound*, HRESULT)).call(lplpds)
  end
  def get_primary_buffer_interface(lplpdsb : IDirectSoundBuffer*) : HRESULT
    @lpVtbl.value.get_primary_buffer_interface.unsafe_as(Proc(IDirectSoundBuffer*, HRESULT)).call(lplpdsb)
  end
  def get_secondary_buffer_interface(lplpdsb : IDirectSoundBuffer*) : HRESULT
    @lpVtbl.value.get_secondary_buffer_interface.unsafe_as(Proc(IDirectSoundBuffer*, HRESULT)).call(lplpdsb)
  end
  def release_direct_sound_interface(lpds : IDirectSound) : HRESULT
    @lpVtbl.value.release_direct_sound_interface.unsafe_as(Proc(IDirectSound, HRESULT)).call(lpds)
  end
  def release_primary_buffer_interface(lpdsb : IDirectSoundBuffer) : HRESULT
    @lpVtbl.value.release_primary_buffer_interface.unsafe_as(Proc(IDirectSoundBuffer, HRESULT)).call(lpdsb)
  end
  def release_secondary_buffer_interface(lpdsb : IDirectSoundBuffer) : HRESULT
    @lpVtbl.value.release_secondary_buffer_interface.unsafe_as(Proc(IDirectSoundBuffer, HRESULT)).call(lpdsb)
  end
  def set_focus_window(param0 : LibC::HANDLE, param1 : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_focus_window.unsafe_as(Proc(LibC::HANDLE, LibC::BOOL, HRESULT)).call(param0, param1)
  end
  def get_focus_window(param0 : HANDLE*, param1 : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_focus_window.unsafe_as(Proc(HANDLE*, LibC::BOOL*, HRESULT)).call(param0, param1)
  end
end
struct LibWin32::IAMLine21Decoder
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_decoder_level(lplevel : AM_LINE21_CCLEVEL*) : HRESULT
    @lpVtbl.value.get_decoder_level.unsafe_as(Proc(AM_LINE21_CCLEVEL*, HRESULT)).call(lplevel)
  end
  def get_current_service(lpservice : AM_LINE21_CCSERVICE*) : HRESULT
    @lpVtbl.value.get_current_service.unsafe_as(Proc(AM_LINE21_CCSERVICE*, HRESULT)).call(lpservice)
  end
  def set_current_service(service : AM_LINE21_CCSERVICE) : HRESULT
    @lpVtbl.value.set_current_service.unsafe_as(Proc(AM_LINE21_CCSERVICE, HRESULT)).call(service)
  end
  def get_service_state(lpstate : AM_LINE21_CCSTATE*) : HRESULT
    @lpVtbl.value.get_service_state.unsafe_as(Proc(AM_LINE21_CCSTATE*, HRESULT)).call(lpstate)
  end
  def set_service_state(state : AM_LINE21_CCSTATE) : HRESULT
    @lpVtbl.value.set_service_state.unsafe_as(Proc(AM_LINE21_CCSTATE, HRESULT)).call(state)
  end
  def get_output_format(lpbmih : BITMAPINFOHEADER*) : HRESULT
    @lpVtbl.value.get_output_format.unsafe_as(Proc(BITMAPINFOHEADER*, HRESULT)).call(lpbmih)
  end
  def set_output_format(lpbmi : BITMAPINFO*) : HRESULT
    @lpVtbl.value.set_output_format.unsafe_as(Proc(BITMAPINFO*, HRESULT)).call(lpbmi)
  end
  def get_background_color(pdwphyscolor : UInt32*) : HRESULT
    @lpVtbl.value.get_background_color.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwphyscolor)
  end
  def set_background_color(dwphyscolor : UInt32) : HRESULT
    @lpVtbl.value.set_background_color.unsafe_as(Proc(UInt32, HRESULT)).call(dwphyscolor)
  end
  def get_redraw_always(lpboption : Int32*) : HRESULT
    @lpVtbl.value.get_redraw_always.unsafe_as(Proc(Int32*, HRESULT)).call(lpboption)
  end
  def set_redraw_always(boption : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_redraw_always.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(boption)
  end
  def get_draw_background_mode(lpmode : AM_LINE21_DRAWBGMODE*) : HRESULT
    @lpVtbl.value.get_draw_background_mode.unsafe_as(Proc(AM_LINE21_DRAWBGMODE*, HRESULT)).call(lpmode)
  end
  def set_draw_background_mode(mode : AM_LINE21_DRAWBGMODE) : HRESULT
    @lpVtbl.value.set_draw_background_mode.unsafe_as(Proc(AM_LINE21_DRAWBGMODE, HRESULT)).call(mode)
  end
end
struct LibWin32::IAMParse
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_parse_time(prtcurrent : Int64*) : HRESULT
    @lpVtbl.value.get_parse_time.unsafe_as(Proc(Int64*, HRESULT)).call(prtcurrent)
  end
  def set_parse_time(rtcurrent : Int64) : HRESULT
    @lpVtbl.value.set_parse_time.unsafe_as(Proc(Int64, HRESULT)).call(rtcurrent)
  end
  def flush : HRESULT
    @lpVtbl.value.flush.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IAMCollection
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_count(plcount : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(plcount)
  end
  def item(litem : Int32, ppunk : IUnknown*) : HRESULT
    @lpVtbl.value.item.unsafe_as(Proc(Int32, IUnknown*, HRESULT)).call(litem, ppunk)
  end
  def get__new_enum(ppunk : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IUnknown*, HRESULT)).call(ppunk)
  end
end
struct LibWin32::IMediaControl
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def run : HRESULT
    @lpVtbl.value.run.unsafe_as(Proc(HRESULT)).call
  end
  def pause : HRESULT
    @lpVtbl.value.pause.unsafe_as(Proc(HRESULT)).call
  end
  def stop : HRESULT
    @lpVtbl.value.stop.unsafe_as(Proc(HRESULT)).call
  end
  def get_state(mstimeout : Int32, pfs : Int32*) : HRESULT
    @lpVtbl.value.get_state.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(mstimeout, pfs)
  end
  def render_file(strfilename : UInt8*) : HRESULT
    @lpVtbl.value.render_file.unsafe_as(Proc(UInt8*, HRESULT)).call(strfilename)
  end
  def add_source_filter(strfilename : UInt8*, ppunk : IDispatch*) : HRESULT
    @lpVtbl.value.add_source_filter.unsafe_as(Proc(UInt8*, IDispatch*, HRESULT)).call(strfilename, ppunk)
  end
  def get_filter_collection(ppunk : IDispatch*) : HRESULT
    @lpVtbl.value.get_filter_collection.unsafe_as(Proc(IDispatch*, HRESULT)).call(ppunk)
  end
  def get_reg_filter_collection(ppunk : IDispatch*) : HRESULT
    @lpVtbl.value.get_reg_filter_collection.unsafe_as(Proc(IDispatch*, HRESULT)).call(ppunk)
  end
  def stop_when_ready : HRESULT
    @lpVtbl.value.stop_when_ready.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IMediaEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_event_handle(hevent : LibC::IntPtrT*) : HRESULT
    @lpVtbl.value.get_event_handle.unsafe_as(Proc(LibC::IntPtrT*, HRESULT)).call(hevent)
  end
  def get_event(leventcode : Int32*, lparam1 : LibC::IntPtrT*, lparam2 : LibC::IntPtrT*, mstimeout : Int32) : HRESULT
    @lpVtbl.value.get_event.unsafe_as(Proc(Int32*, LibC::IntPtrT*, LibC::IntPtrT*, Int32, HRESULT)).call(leventcode, lparam1, lparam2, mstimeout)
  end
  def wait_for_completion(mstimeout : Int32, pevcode : Int32*) : HRESULT
    @lpVtbl.value.wait_for_completion.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(mstimeout, pevcode)
  end
  def cancel_default_handling(levcode : Int32) : HRESULT
    @lpVtbl.value.cancel_default_handling.unsafe_as(Proc(Int32, HRESULT)).call(levcode)
  end
  def restore_default_handling(levcode : Int32) : HRESULT
    @lpVtbl.value.restore_default_handling.unsafe_as(Proc(Int32, HRESULT)).call(levcode)
  end
  def free_event_params(levcode : Int32, lparam1 : LibC::IntPtrT, lparam2 : LibC::IntPtrT) : HRESULT
    @lpVtbl.value.free_event_params.unsafe_as(Proc(Int32, LibC::IntPtrT, LibC::IntPtrT, HRESULT)).call(levcode, lparam1, lparam2)
  end
end
struct LibWin32::IMediaEventEx
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_event_handle(hevent : LibC::IntPtrT*) : HRESULT
    @lpVtbl.value.get_event_handle.unsafe_as(Proc(LibC::IntPtrT*, HRESULT)).call(hevent)
  end
  def get_event(leventcode : Int32*, lparam1 : LibC::IntPtrT*, lparam2 : LibC::IntPtrT*, mstimeout : Int32) : HRESULT
    @lpVtbl.value.get_event.unsafe_as(Proc(Int32*, LibC::IntPtrT*, LibC::IntPtrT*, Int32, HRESULT)).call(leventcode, lparam1, lparam2, mstimeout)
  end
  def wait_for_completion(mstimeout : Int32, pevcode : Int32*) : HRESULT
    @lpVtbl.value.wait_for_completion.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(mstimeout, pevcode)
  end
  def cancel_default_handling(levcode : Int32) : HRESULT
    @lpVtbl.value.cancel_default_handling.unsafe_as(Proc(Int32, HRESULT)).call(levcode)
  end
  def restore_default_handling(levcode : Int32) : HRESULT
    @lpVtbl.value.restore_default_handling.unsafe_as(Proc(Int32, HRESULT)).call(levcode)
  end
  def free_event_params(levcode : Int32, lparam1 : LibC::IntPtrT, lparam2 : LibC::IntPtrT) : HRESULT
    @lpVtbl.value.free_event_params.unsafe_as(Proc(Int32, LibC::IntPtrT, LibC::IntPtrT, HRESULT)).call(levcode, lparam1, lparam2)
  end
  def set_notify_window(hwnd : LibC::IntPtrT, lmsg : Int32, linstancedata : LibC::IntPtrT) : HRESULT
    @lpVtbl.value.set_notify_window.unsafe_as(Proc(LibC::IntPtrT, Int32, LibC::IntPtrT, HRESULT)).call(hwnd, lmsg, linstancedata)
  end
  def set_notify_flags(lnonotifyflags : Int32) : HRESULT
    @lpVtbl.value.set_notify_flags.unsafe_as(Proc(Int32, HRESULT)).call(lnonotifyflags)
  end
  def get_notify_flags(lplnonotifyflags : Int32*) : HRESULT
    @lpVtbl.value.get_notify_flags.unsafe_as(Proc(Int32*, HRESULT)).call(lplnonotifyflags)
  end
end
struct LibWin32::IMediaPosition
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_duration(plength : Float64*) : HRESULT
    @lpVtbl.value.get_duration.unsafe_as(Proc(Float64*, HRESULT)).call(plength)
  end
  def put_current_position(lltime : Float64) : HRESULT
    @lpVtbl.value.put_current_position.unsafe_as(Proc(Float64, HRESULT)).call(lltime)
  end
  def get_current_position(plltime : Float64*) : HRESULT
    @lpVtbl.value.get_current_position.unsafe_as(Proc(Float64*, HRESULT)).call(plltime)
  end
  def get_stop_time(plltime : Float64*) : HRESULT
    @lpVtbl.value.get_stop_time.unsafe_as(Proc(Float64*, HRESULT)).call(plltime)
  end
  def put_stop_time(lltime : Float64) : HRESULT
    @lpVtbl.value.put_stop_time.unsafe_as(Proc(Float64, HRESULT)).call(lltime)
  end
  def get_preroll_time(plltime : Float64*) : HRESULT
    @lpVtbl.value.get_preroll_time.unsafe_as(Proc(Float64*, HRESULT)).call(plltime)
  end
  def put_preroll_time(lltime : Float64) : HRESULT
    @lpVtbl.value.put_preroll_time.unsafe_as(Proc(Float64, HRESULT)).call(lltime)
  end
  def put_rate(drate : Float64) : HRESULT
    @lpVtbl.value.put_rate.unsafe_as(Proc(Float64, HRESULT)).call(drate)
  end
  def get_rate(pdrate : Float64*) : HRESULT
    @lpVtbl.value.get_rate.unsafe_as(Proc(Float64*, HRESULT)).call(pdrate)
  end
  def can_seek_forward(pcanseekforward : Int32*) : HRESULT
    @lpVtbl.value.can_seek_forward.unsafe_as(Proc(Int32*, HRESULT)).call(pcanseekforward)
  end
  def can_seek_backward(pcanseekbackward : Int32*) : HRESULT
    @lpVtbl.value.can_seek_backward.unsafe_as(Proc(Int32*, HRESULT)).call(pcanseekbackward)
  end
end
struct LibWin32::IBasicAudio
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_volume(lvolume : Int32) : HRESULT
    @lpVtbl.value.put_volume.unsafe_as(Proc(Int32, HRESULT)).call(lvolume)
  end
  def get_volume(plvolume : Int32*) : HRESULT
    @lpVtbl.value.get_volume.unsafe_as(Proc(Int32*, HRESULT)).call(plvolume)
  end
  def put_balance(lbalance : Int32) : HRESULT
    @lpVtbl.value.put_balance.unsafe_as(Proc(Int32, HRESULT)).call(lbalance)
  end
  def get_balance(plbalance : Int32*) : HRESULT
    @lpVtbl.value.get_balance.unsafe_as(Proc(Int32*, HRESULT)).call(plbalance)
  end
end
struct LibWin32::IVideoWindow
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_caption(strcaption : UInt8*) : HRESULT
    @lpVtbl.value.put_caption.unsafe_as(Proc(UInt8*, HRESULT)).call(strcaption)
  end
  def get_caption(strcaption : UInt8**) : HRESULT
    @lpVtbl.value.get_caption.unsafe_as(Proc(UInt8**, HRESULT)).call(strcaption)
  end
  def put_window_style(windowstyle : Int32) : HRESULT
    @lpVtbl.value.put_window_style.unsafe_as(Proc(Int32, HRESULT)).call(windowstyle)
  end
  def get_window_style(windowstyle : Int32*) : HRESULT
    @lpVtbl.value.get_window_style.unsafe_as(Proc(Int32*, HRESULT)).call(windowstyle)
  end
  def put_window_style_ex(windowstyleex : Int32) : HRESULT
    @lpVtbl.value.put_window_style_ex.unsafe_as(Proc(Int32, HRESULT)).call(windowstyleex)
  end
  def get_window_style_ex(windowstyleex : Int32*) : HRESULT
    @lpVtbl.value.get_window_style_ex.unsafe_as(Proc(Int32*, HRESULT)).call(windowstyleex)
  end
  def put_auto_show(autoshow : Int32) : HRESULT
    @lpVtbl.value.put_auto_show.unsafe_as(Proc(Int32, HRESULT)).call(autoshow)
  end
  def get_auto_show(autoshow : Int32*) : HRESULT
    @lpVtbl.value.get_auto_show.unsafe_as(Proc(Int32*, HRESULT)).call(autoshow)
  end
  def put_window_state(windowstate : Int32) : HRESULT
    @lpVtbl.value.put_window_state.unsafe_as(Proc(Int32, HRESULT)).call(windowstate)
  end
  def get_window_state(windowstate : Int32*) : HRESULT
    @lpVtbl.value.get_window_state.unsafe_as(Proc(Int32*, HRESULT)).call(windowstate)
  end
  def put_background_palette(backgroundpalette : Int32) : HRESULT
    @lpVtbl.value.put_background_palette.unsafe_as(Proc(Int32, HRESULT)).call(backgroundpalette)
  end
  def get_background_palette(pbackgroundpalette : Int32*) : HRESULT
    @lpVtbl.value.get_background_palette.unsafe_as(Proc(Int32*, HRESULT)).call(pbackgroundpalette)
  end
  def put_visible(visible : Int32) : HRESULT
    @lpVtbl.value.put_visible.unsafe_as(Proc(Int32, HRESULT)).call(visible)
  end
  def get_visible(pvisible : Int32*) : HRESULT
    @lpVtbl.value.get_visible.unsafe_as(Proc(Int32*, HRESULT)).call(pvisible)
  end
  def put_left(left : Int32) : HRESULT
    @lpVtbl.value.put_left.unsafe_as(Proc(Int32, HRESULT)).call(left)
  end
  def get_left(pleft : Int32*) : HRESULT
    @lpVtbl.value.get_left.unsafe_as(Proc(Int32*, HRESULT)).call(pleft)
  end
  def put_width(width : Int32) : HRESULT
    @lpVtbl.value.put_width.unsafe_as(Proc(Int32, HRESULT)).call(width)
  end
  def get_width(pwidth : Int32*) : HRESULT
    @lpVtbl.value.get_width.unsafe_as(Proc(Int32*, HRESULT)).call(pwidth)
  end
  def put_top(top : Int32) : HRESULT
    @lpVtbl.value.put_top.unsafe_as(Proc(Int32, HRESULT)).call(top)
  end
  def get_top(ptop : Int32*) : HRESULT
    @lpVtbl.value.get_top.unsafe_as(Proc(Int32*, HRESULT)).call(ptop)
  end
  def put_height(height : Int32) : HRESULT
    @lpVtbl.value.put_height.unsafe_as(Proc(Int32, HRESULT)).call(height)
  end
  def get_height(pheight : Int32*) : HRESULT
    @lpVtbl.value.get_height.unsafe_as(Proc(Int32*, HRESULT)).call(pheight)
  end
  def put_owner(owner : LibC::IntPtrT) : HRESULT
    @lpVtbl.value.put_owner.unsafe_as(Proc(LibC::IntPtrT, HRESULT)).call(owner)
  end
  def get_owner(owner : LibC::IntPtrT*) : HRESULT
    @lpVtbl.value.get_owner.unsafe_as(Proc(LibC::IntPtrT*, HRESULT)).call(owner)
  end
  def put_message_drain(drain : LibC::IntPtrT) : HRESULT
    @lpVtbl.value.put_message_drain.unsafe_as(Proc(LibC::IntPtrT, HRESULT)).call(drain)
  end
  def get_message_drain(drain : LibC::IntPtrT*) : HRESULT
    @lpVtbl.value.get_message_drain.unsafe_as(Proc(LibC::IntPtrT*, HRESULT)).call(drain)
  end
  def get_border_color(color : Int32*) : HRESULT
    @lpVtbl.value.get_border_color.unsafe_as(Proc(Int32*, HRESULT)).call(color)
  end
  def put_border_color(color : Int32) : HRESULT
    @lpVtbl.value.put_border_color.unsafe_as(Proc(Int32, HRESULT)).call(color)
  end
  def get_full_screen_mode(fullscreenmode : Int32*) : HRESULT
    @lpVtbl.value.get_full_screen_mode.unsafe_as(Proc(Int32*, HRESULT)).call(fullscreenmode)
  end
  def put_full_screen_mode(fullscreenmode : Int32) : HRESULT
    @lpVtbl.value.put_full_screen_mode.unsafe_as(Proc(Int32, HRESULT)).call(fullscreenmode)
  end
  def set_window_foreground(focus : Int32) : HRESULT
    @lpVtbl.value.set_window_foreground.unsafe_as(Proc(Int32, HRESULT)).call(focus)
  end
  def notify_owner_message(hwnd : LibC::IntPtrT, umsg : Int32, wparam : LibC::IntPtrT, lparam : LibC::IntPtrT) : HRESULT
    @lpVtbl.value.notify_owner_message.unsafe_as(Proc(LibC::IntPtrT, Int32, LibC::IntPtrT, LibC::IntPtrT, HRESULT)).call(hwnd, umsg, wparam, lparam)
  end
  def set_window_position(left : Int32, top : Int32, width : Int32, height : Int32) : HRESULT
    @lpVtbl.value.set_window_position.unsafe_as(Proc(Int32, Int32, Int32, Int32, HRESULT)).call(left, top, width, height)
  end
  def get_window_position(pleft : Int32*, ptop : Int32*, pwidth : Int32*, pheight : Int32*) : HRESULT
    @lpVtbl.value.get_window_position.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pleft, ptop, pwidth, pheight)
  end
  def get_min_ideal_image_size(pwidth : Int32*, pheight : Int32*) : HRESULT
    @lpVtbl.value.get_min_ideal_image_size.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pwidth, pheight)
  end
  def get_max_ideal_image_size(pwidth : Int32*, pheight : Int32*) : HRESULT
    @lpVtbl.value.get_max_ideal_image_size.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pwidth, pheight)
  end
  def get_restore_position(pleft : Int32*, ptop : Int32*, pwidth : Int32*, pheight : Int32*) : HRESULT
    @lpVtbl.value.get_restore_position.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pleft, ptop, pwidth, pheight)
  end
  def hide_cursor(hidecursor : OA_BOOL) : HRESULT
    @lpVtbl.value.hide_cursor.unsafe_as(Proc(OA_BOOL, HRESULT)).call(hidecursor)
  end
  def is_cursor_hidden(cursorhidden : Int32*) : HRESULT
    @lpVtbl.value.is_cursor_hidden.unsafe_as(Proc(Int32*, HRESULT)).call(cursorhidden)
  end
end
struct LibWin32::IBasicVideo
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_avg_time_per_frame(pavgtimeperframe : Float64*) : HRESULT
    @lpVtbl.value.get_avg_time_per_frame.unsafe_as(Proc(Float64*, HRESULT)).call(pavgtimeperframe)
  end
  def get_bit_rate(pbitrate : Int32*) : HRESULT
    @lpVtbl.value.get_bit_rate.unsafe_as(Proc(Int32*, HRESULT)).call(pbitrate)
  end
  def get_bit_error_rate(pbiterrorrate : Int32*) : HRESULT
    @lpVtbl.value.get_bit_error_rate.unsafe_as(Proc(Int32*, HRESULT)).call(pbiterrorrate)
  end
  def get_video_width(pvideowidth : Int32*) : HRESULT
    @lpVtbl.value.get_video_width.unsafe_as(Proc(Int32*, HRESULT)).call(pvideowidth)
  end
  def get_video_height(pvideoheight : Int32*) : HRESULT
    @lpVtbl.value.get_video_height.unsafe_as(Proc(Int32*, HRESULT)).call(pvideoheight)
  end
  def put_source_left(sourceleft : Int32) : HRESULT
    @lpVtbl.value.put_source_left.unsafe_as(Proc(Int32, HRESULT)).call(sourceleft)
  end
  def get_source_left(psourceleft : Int32*) : HRESULT
    @lpVtbl.value.get_source_left.unsafe_as(Proc(Int32*, HRESULT)).call(psourceleft)
  end
  def put_source_width(sourcewidth : Int32) : HRESULT
    @lpVtbl.value.put_source_width.unsafe_as(Proc(Int32, HRESULT)).call(sourcewidth)
  end
  def get_source_width(psourcewidth : Int32*) : HRESULT
    @lpVtbl.value.get_source_width.unsafe_as(Proc(Int32*, HRESULT)).call(psourcewidth)
  end
  def put_source_top(sourcetop : Int32) : HRESULT
    @lpVtbl.value.put_source_top.unsafe_as(Proc(Int32, HRESULT)).call(sourcetop)
  end
  def get_source_top(psourcetop : Int32*) : HRESULT
    @lpVtbl.value.get_source_top.unsafe_as(Proc(Int32*, HRESULT)).call(psourcetop)
  end
  def put_source_height(sourceheight : Int32) : HRESULT
    @lpVtbl.value.put_source_height.unsafe_as(Proc(Int32, HRESULT)).call(sourceheight)
  end
  def get_source_height(psourceheight : Int32*) : HRESULT
    @lpVtbl.value.get_source_height.unsafe_as(Proc(Int32*, HRESULT)).call(psourceheight)
  end
  def put_destination_left(destinationleft : Int32) : HRESULT
    @lpVtbl.value.put_destination_left.unsafe_as(Proc(Int32, HRESULT)).call(destinationleft)
  end
  def get_destination_left(pdestinationleft : Int32*) : HRESULT
    @lpVtbl.value.get_destination_left.unsafe_as(Proc(Int32*, HRESULT)).call(pdestinationleft)
  end
  def put_destination_width(destinationwidth : Int32) : HRESULT
    @lpVtbl.value.put_destination_width.unsafe_as(Proc(Int32, HRESULT)).call(destinationwidth)
  end
  def get_destination_width(pdestinationwidth : Int32*) : HRESULT
    @lpVtbl.value.get_destination_width.unsafe_as(Proc(Int32*, HRESULT)).call(pdestinationwidth)
  end
  def put_destination_top(destinationtop : Int32) : HRESULT
    @lpVtbl.value.put_destination_top.unsafe_as(Proc(Int32, HRESULT)).call(destinationtop)
  end
  def get_destination_top(pdestinationtop : Int32*) : HRESULT
    @lpVtbl.value.get_destination_top.unsafe_as(Proc(Int32*, HRESULT)).call(pdestinationtop)
  end
  def put_destination_height(destinationheight : Int32) : HRESULT
    @lpVtbl.value.put_destination_height.unsafe_as(Proc(Int32, HRESULT)).call(destinationheight)
  end
  def get_destination_height(pdestinationheight : Int32*) : HRESULT
    @lpVtbl.value.get_destination_height.unsafe_as(Proc(Int32*, HRESULT)).call(pdestinationheight)
  end
  def set_source_position(left : Int32, top : Int32, width : Int32, height : Int32) : HRESULT
    @lpVtbl.value.set_source_position.unsafe_as(Proc(Int32, Int32, Int32, Int32, HRESULT)).call(left, top, width, height)
  end
  def get_source_position(pleft : Int32*, ptop : Int32*, pwidth : Int32*, pheight : Int32*) : HRESULT
    @lpVtbl.value.get_source_position.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pleft, ptop, pwidth, pheight)
  end
  def set_default_source_position : HRESULT
    @lpVtbl.value.set_default_source_position.unsafe_as(Proc(HRESULT)).call
  end
  def set_destination_position(left : Int32, top : Int32, width : Int32, height : Int32) : HRESULT
    @lpVtbl.value.set_destination_position.unsafe_as(Proc(Int32, Int32, Int32, Int32, HRESULT)).call(left, top, width, height)
  end
  def get_destination_position(pleft : Int32*, ptop : Int32*, pwidth : Int32*, pheight : Int32*) : HRESULT
    @lpVtbl.value.get_destination_position.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pleft, ptop, pwidth, pheight)
  end
  def set_default_destination_position : HRESULT
    @lpVtbl.value.set_default_destination_position.unsafe_as(Proc(HRESULT)).call
  end
  def get_video_size(pwidth : Int32*, pheight : Int32*) : HRESULT
    @lpVtbl.value.get_video_size.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pwidth, pheight)
  end
  def get_video_palette_entries(startindex : Int32, entries : Int32, pretrieved : Int32*, ppalette : Int32*) : HRESULT
    @lpVtbl.value.get_video_palette_entries.unsafe_as(Proc(Int32, Int32, Int32*, Int32*, HRESULT)).call(startindex, entries, pretrieved, ppalette)
  end
  def get_current_image(pbuffersize : Int32*, pdibimage : Int32*) : HRESULT
    @lpVtbl.value.get_current_image.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pbuffersize, pdibimage)
  end
  def is_using_default_source : HRESULT
    @lpVtbl.value.is_using_default_source.unsafe_as(Proc(HRESULT)).call
  end
  def is_using_default_destination : HRESULT
    @lpVtbl.value.is_using_default_destination.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IBasicVideo2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_avg_time_per_frame(pavgtimeperframe : Float64*) : HRESULT
    @lpVtbl.value.get_avg_time_per_frame.unsafe_as(Proc(Float64*, HRESULT)).call(pavgtimeperframe)
  end
  def get_bit_rate(pbitrate : Int32*) : HRESULT
    @lpVtbl.value.get_bit_rate.unsafe_as(Proc(Int32*, HRESULT)).call(pbitrate)
  end
  def get_bit_error_rate(pbiterrorrate : Int32*) : HRESULT
    @lpVtbl.value.get_bit_error_rate.unsafe_as(Proc(Int32*, HRESULT)).call(pbiterrorrate)
  end
  def get_video_width(pvideowidth : Int32*) : HRESULT
    @lpVtbl.value.get_video_width.unsafe_as(Proc(Int32*, HRESULT)).call(pvideowidth)
  end
  def get_video_height(pvideoheight : Int32*) : HRESULT
    @lpVtbl.value.get_video_height.unsafe_as(Proc(Int32*, HRESULT)).call(pvideoheight)
  end
  def put_source_left(sourceleft : Int32) : HRESULT
    @lpVtbl.value.put_source_left.unsafe_as(Proc(Int32, HRESULT)).call(sourceleft)
  end
  def get_source_left(psourceleft : Int32*) : HRESULT
    @lpVtbl.value.get_source_left.unsafe_as(Proc(Int32*, HRESULT)).call(psourceleft)
  end
  def put_source_width(sourcewidth : Int32) : HRESULT
    @lpVtbl.value.put_source_width.unsafe_as(Proc(Int32, HRESULT)).call(sourcewidth)
  end
  def get_source_width(psourcewidth : Int32*) : HRESULT
    @lpVtbl.value.get_source_width.unsafe_as(Proc(Int32*, HRESULT)).call(psourcewidth)
  end
  def put_source_top(sourcetop : Int32) : HRESULT
    @lpVtbl.value.put_source_top.unsafe_as(Proc(Int32, HRESULT)).call(sourcetop)
  end
  def get_source_top(psourcetop : Int32*) : HRESULT
    @lpVtbl.value.get_source_top.unsafe_as(Proc(Int32*, HRESULT)).call(psourcetop)
  end
  def put_source_height(sourceheight : Int32) : HRESULT
    @lpVtbl.value.put_source_height.unsafe_as(Proc(Int32, HRESULT)).call(sourceheight)
  end
  def get_source_height(psourceheight : Int32*) : HRESULT
    @lpVtbl.value.get_source_height.unsafe_as(Proc(Int32*, HRESULT)).call(psourceheight)
  end
  def put_destination_left(destinationleft : Int32) : HRESULT
    @lpVtbl.value.put_destination_left.unsafe_as(Proc(Int32, HRESULT)).call(destinationleft)
  end
  def get_destination_left(pdestinationleft : Int32*) : HRESULT
    @lpVtbl.value.get_destination_left.unsafe_as(Proc(Int32*, HRESULT)).call(pdestinationleft)
  end
  def put_destination_width(destinationwidth : Int32) : HRESULT
    @lpVtbl.value.put_destination_width.unsafe_as(Proc(Int32, HRESULT)).call(destinationwidth)
  end
  def get_destination_width(pdestinationwidth : Int32*) : HRESULT
    @lpVtbl.value.get_destination_width.unsafe_as(Proc(Int32*, HRESULT)).call(pdestinationwidth)
  end
  def put_destination_top(destinationtop : Int32) : HRESULT
    @lpVtbl.value.put_destination_top.unsafe_as(Proc(Int32, HRESULT)).call(destinationtop)
  end
  def get_destination_top(pdestinationtop : Int32*) : HRESULT
    @lpVtbl.value.get_destination_top.unsafe_as(Proc(Int32*, HRESULT)).call(pdestinationtop)
  end
  def put_destination_height(destinationheight : Int32) : HRESULT
    @lpVtbl.value.put_destination_height.unsafe_as(Proc(Int32, HRESULT)).call(destinationheight)
  end
  def get_destination_height(pdestinationheight : Int32*) : HRESULT
    @lpVtbl.value.get_destination_height.unsafe_as(Proc(Int32*, HRESULT)).call(pdestinationheight)
  end
  def set_source_position(left : Int32, top : Int32, width : Int32, height : Int32) : HRESULT
    @lpVtbl.value.set_source_position.unsafe_as(Proc(Int32, Int32, Int32, Int32, HRESULT)).call(left, top, width, height)
  end
  def get_source_position(pleft : Int32*, ptop : Int32*, pwidth : Int32*, pheight : Int32*) : HRESULT
    @lpVtbl.value.get_source_position.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pleft, ptop, pwidth, pheight)
  end
  def set_default_source_position : HRESULT
    @lpVtbl.value.set_default_source_position.unsafe_as(Proc(HRESULT)).call
  end
  def set_destination_position(left : Int32, top : Int32, width : Int32, height : Int32) : HRESULT
    @lpVtbl.value.set_destination_position.unsafe_as(Proc(Int32, Int32, Int32, Int32, HRESULT)).call(left, top, width, height)
  end
  def get_destination_position(pleft : Int32*, ptop : Int32*, pwidth : Int32*, pheight : Int32*) : HRESULT
    @lpVtbl.value.get_destination_position.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pleft, ptop, pwidth, pheight)
  end
  def set_default_destination_position : HRESULT
    @lpVtbl.value.set_default_destination_position.unsafe_as(Proc(HRESULT)).call
  end
  def get_video_size(pwidth : Int32*, pheight : Int32*) : HRESULT
    @lpVtbl.value.get_video_size.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pwidth, pheight)
  end
  def get_video_palette_entries(startindex : Int32, entries : Int32, pretrieved : Int32*, ppalette : Int32*) : HRESULT
    @lpVtbl.value.get_video_palette_entries.unsafe_as(Proc(Int32, Int32, Int32*, Int32*, HRESULT)).call(startindex, entries, pretrieved, ppalette)
  end
  def get_current_image(pbuffersize : Int32*, pdibimage : Int32*) : HRESULT
    @lpVtbl.value.get_current_image.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pbuffersize, pdibimage)
  end
  def is_using_default_source : HRESULT
    @lpVtbl.value.is_using_default_source.unsafe_as(Proc(HRESULT)).call
  end
  def is_using_default_destination : HRESULT
    @lpVtbl.value.is_using_default_destination.unsafe_as(Proc(HRESULT)).call
  end
  def get_preferred_aspect_ratio(plaspectx : Int32*, plaspecty : Int32*) : HRESULT
    @lpVtbl.value.get_preferred_aspect_ratio.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(plaspectx, plaspecty)
  end
end
struct LibWin32::IDeferredCommand
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def cancel : HRESULT
    @lpVtbl.value.cancel.unsafe_as(Proc(HRESULT)).call
  end
  def confidence(pconfidence : Int32*) : HRESULT
    @lpVtbl.value.confidence.unsafe_as(Proc(Int32*, HRESULT)).call(pconfidence)
  end
  def postpone(newtime : Float64) : HRESULT
    @lpVtbl.value.postpone.unsafe_as(Proc(Float64, HRESULT)).call(newtime)
  end
  def get_h_result(phrresult : HRESULT*) : HRESULT
    @lpVtbl.value.get_h_result.unsafe_as(Proc(HRESULT*, HRESULT)).call(phrresult)
  end
end
struct LibWin32::IQueueCommand
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def invoke_at_stream_time(pcmd : IDeferredCommand*, time : Float64, iid : Guid*, dispidmethod : Int32, wflags : Int16, cargs : Int32, pdispparams : VARIANT*, pvarresult : VARIANT*, puargerr : Int16*) : HRESULT
    @lpVtbl.value.invoke_at_stream_time.unsafe_as(Proc(IDeferredCommand*, Float64, Guid*, Int32, Int16, Int32, VARIANT*, VARIANT*, Int16*, HRESULT)).call(pcmd, time, iid, dispidmethod, wflags, cargs, pdispparams, pvarresult, puargerr)
  end
  def invoke_at_presentation_time(pcmd : IDeferredCommand*, time : Float64, iid : Guid*, dispidmethod : Int32, wflags : Int16, cargs : Int32, pdispparams : VARIANT*, pvarresult : VARIANT*, puargerr : Int16*) : HRESULT
    @lpVtbl.value.invoke_at_presentation_time.unsafe_as(Proc(IDeferredCommand*, Float64, Guid*, Int32, Int16, Int32, VARIANT*, VARIANT*, Int16*, HRESULT)).call(pcmd, time, iid, dispidmethod, wflags, cargs, pdispparams, pvarresult, puargerr)
  end
end
struct LibWin32::IFilterInfo
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def find_pin(strpinid : UInt8*, ppunk : IDispatch*) : HRESULT
    @lpVtbl.value.find_pin.unsafe_as(Proc(UInt8*, IDispatch*, HRESULT)).call(strpinid, ppunk)
  end
  def get_name(strname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(strname)
  end
  def get_vendor_info(strvendorinfo : UInt8**) : HRESULT
    @lpVtbl.value.get_vendor_info.unsafe_as(Proc(UInt8**, HRESULT)).call(strvendorinfo)
  end
  def get_filter(ppunk : IUnknown*) : HRESULT
    @lpVtbl.value.get_filter.unsafe_as(Proc(IUnknown*, HRESULT)).call(ppunk)
  end
  def get_pins(ppunk : IDispatch*) : HRESULT
    @lpVtbl.value.get_pins.unsafe_as(Proc(IDispatch*, HRESULT)).call(ppunk)
  end
  def get_is_file_source(pbissource : Int32*) : HRESULT
    @lpVtbl.value.get_is_file_source.unsafe_as(Proc(Int32*, HRESULT)).call(pbissource)
  end
  def get_filename(pstrfilename : UInt8**) : HRESULT
    @lpVtbl.value.get_filename.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrfilename)
  end
  def put_filename(strfilename : UInt8*) : HRESULT
    @lpVtbl.value.put_filename.unsafe_as(Proc(UInt8*, HRESULT)).call(strfilename)
  end
end
struct LibWin32::IRegFilterInfo
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(strname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(strname)
  end
  def filter(ppunk : IDispatch*) : HRESULT
    @lpVtbl.value.filter.unsafe_as(Proc(IDispatch*, HRESULT)).call(ppunk)
  end
end
struct LibWin32::IMediaTypeInfo
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_type(strtype : UInt8**) : HRESULT
    @lpVtbl.value.get_type.unsafe_as(Proc(UInt8**, HRESULT)).call(strtype)
  end
  def get_subtype(strtype : UInt8**) : HRESULT
    @lpVtbl.value.get_subtype.unsafe_as(Proc(UInt8**, HRESULT)).call(strtype)
  end
end
struct LibWin32::IPinInfo
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_pin(ppunk : IUnknown*) : HRESULT
    @lpVtbl.value.get_pin.unsafe_as(Proc(IUnknown*, HRESULT)).call(ppunk)
  end
  def get_connected_to(ppunk : IDispatch*) : HRESULT
    @lpVtbl.value.get_connected_to.unsafe_as(Proc(IDispatch*, HRESULT)).call(ppunk)
  end
  def get_connection_media_type(ppunk : IDispatch*) : HRESULT
    @lpVtbl.value.get_connection_media_type.unsafe_as(Proc(IDispatch*, HRESULT)).call(ppunk)
  end
  def get_filter_info(ppunk : IDispatch*) : HRESULT
    @lpVtbl.value.get_filter_info.unsafe_as(Proc(IDispatch*, HRESULT)).call(ppunk)
  end
  def get_name(ppunk : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(ppunk)
  end
  def get_direction(ppdirection : Int32*) : HRESULT
    @lpVtbl.value.get_direction.unsafe_as(Proc(Int32*, HRESULT)).call(ppdirection)
  end
  def get_pin_id(strpinid : UInt8**) : HRESULT
    @lpVtbl.value.get_pin_id.unsafe_as(Proc(UInt8**, HRESULT)).call(strpinid)
  end
  def get_media_types(ppunk : IDispatch*) : HRESULT
    @lpVtbl.value.get_media_types.unsafe_as(Proc(IDispatch*, HRESULT)).call(ppunk)
  end
  def connect(ppin : IUnknown) : HRESULT
    @lpVtbl.value.connect.unsafe_as(Proc(IUnknown, HRESULT)).call(ppin)
  end
  def connect_direct(ppin : IUnknown) : HRESULT
    @lpVtbl.value.connect_direct.unsafe_as(Proc(IUnknown, HRESULT)).call(ppin)
  end
  def connect_with_type(ppin : IUnknown, pmediatype : IDispatch) : HRESULT
    @lpVtbl.value.connect_with_type.unsafe_as(Proc(IUnknown, IDispatch, HRESULT)).call(ppin, pmediatype)
  end
  def disconnect : HRESULT
    @lpVtbl.value.disconnect.unsafe_as(Proc(HRESULT)).call
  end
  def render : HRESULT
    @lpVtbl.value.render.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IAMStats
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def reset : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(HRESULT)).call
  end
  def get_count(plcount : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(plcount)
  end
  def get_value_by_index(lindex : Int32, szname : UInt8**, lcount : Int32*, dlast : Float64*, daverage : Float64*, dstddev : Float64*, dmin : Float64*, dmax : Float64*) : HRESULT
    @lpVtbl.value.get_value_by_index.unsafe_as(Proc(Int32, UInt8**, Int32*, Float64*, Float64*, Float64*, Float64*, Float64*, HRESULT)).call(lindex, szname, lcount, dlast, daverage, dstddev, dmin, dmax)
  end
  def get_value_by_name(szname : UInt8*, lindex : Int32*, lcount : Int32*, dlast : Float64*, daverage : Float64*, dstddev : Float64*, dmin : Float64*, dmax : Float64*) : HRESULT
    @lpVtbl.value.get_value_by_name.unsafe_as(Proc(UInt8*, Int32*, Int32*, Float64*, Float64*, Float64*, Float64*, Float64*, HRESULT)).call(szname, lindex, lcount, dlast, daverage, dstddev, dmin, dmax)
  end
  def get_index(szname : UInt8*, lcreate : Int32, plindex : Int32*) : HRESULT
    @lpVtbl.value.get_index.unsafe_as(Proc(UInt8*, Int32, Int32*, HRESULT)).call(szname, lcreate, plindex)
  end
  def add_value(lindex : Int32, dvalue : Float64) : HRESULT
    @lpVtbl.value.add_value.unsafe_as(Proc(Int32, Float64, HRESULT)).call(lindex, dvalue)
  end
end
struct LibWin32::IAMVideoAcceleratorNotify
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_uncomp_surfaces_info(pguid : Guid*, puncompbufferinfo : AMVAUncompBufferInfo*) : HRESULT
    @lpVtbl.value.get_uncomp_surfaces_info.unsafe_as(Proc(Guid*, AMVAUncompBufferInfo*, HRESULT)).call(pguid, puncompbufferinfo)
  end
  def set_uncomp_surfaces_info(dwactualuncompsurfacesallocated : UInt32) : HRESULT
    @lpVtbl.value.set_uncomp_surfaces_info.unsafe_as(Proc(UInt32, HRESULT)).call(dwactualuncompsurfacesallocated)
  end
  def get_create_video_accelerator_data(pguid : Guid*, pdwsizemiscdata : UInt32*, ppmiscdata : Void**) : HRESULT
    @lpVtbl.value.get_create_video_accelerator_data.unsafe_as(Proc(Guid*, UInt32*, Void**, HRESULT)).call(pguid, pdwsizemiscdata, ppmiscdata)
  end
end
struct LibWin32::IAMVideoAccelerator
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_video_accelerator_gui_ds(pdwnumguidssupported : UInt32*, pguidssupported : Guid*) : HRESULT
    @lpVtbl.value.get_video_accelerator_gui_ds.unsafe_as(Proc(UInt32*, Guid*, HRESULT)).call(pdwnumguidssupported, pguidssupported)
  end
  def get_uncomp_formats_supported(pguid : Guid*, pdwnumformatssupported : UInt32*, pformatssupported : DDPIXELFORMAT*) : HRESULT
    @lpVtbl.value.get_uncomp_formats_supported.unsafe_as(Proc(Guid*, UInt32*, DDPIXELFORMAT*, HRESULT)).call(pguid, pdwnumformatssupported, pformatssupported)
  end
  def get_internal_mem_info(pguid : Guid*, pamvauncompdatainfo : AMVAUncompDataInfo*, pamvainternalmeminfo : AMVAInternalMemInfo*) : HRESULT
    @lpVtbl.value.get_internal_mem_info.unsafe_as(Proc(Guid*, AMVAUncompDataInfo*, AMVAInternalMemInfo*, HRESULT)).call(pguid, pamvauncompdatainfo, pamvainternalmeminfo)
  end
  def get_comp_buffer_info(pguid : Guid*, pamvauncompdatainfo : AMVAUncompDataInfo*, pdwnumtypescompbuffers : UInt32*, pamvacompbufferinfo : AMVACompBufferInfo*) : HRESULT
    @lpVtbl.value.get_comp_buffer_info.unsafe_as(Proc(Guid*, AMVAUncompDataInfo*, UInt32*, AMVACompBufferInfo*, HRESULT)).call(pguid, pamvauncompdatainfo, pdwnumtypescompbuffers, pamvacompbufferinfo)
  end
  def get_internal_comp_buffer_info(pdwnumtypescompbuffers : UInt32*, pamvacompbufferinfo : AMVACompBufferInfo*) : HRESULT
    @lpVtbl.value.get_internal_comp_buffer_info.unsafe_as(Proc(UInt32*, AMVACompBufferInfo*, HRESULT)).call(pdwnumtypescompbuffers, pamvacompbufferinfo)
  end
  def begin_frame(amvabeginframeinfo : AMVABeginFrameInfo*) : HRESULT
    @lpVtbl.value.begin_frame.unsafe_as(Proc(AMVABeginFrameInfo*, HRESULT)).call(amvabeginframeinfo)
  end
  def end_frame(pendframeinfo : AMVAEndFrameInfo*) : HRESULT
    @lpVtbl.value.end_frame.unsafe_as(Proc(AMVAEndFrameInfo*, HRESULT)).call(pendframeinfo)
  end
  def get_buffer(dwtypeindex : UInt32, dwbufferindex : UInt32, breadonly : LibC::BOOL, ppbuffer : Void**, lpstride : Int32*) : HRESULT
    @lpVtbl.value.get_buffer.unsafe_as(Proc(UInt32, UInt32, LibC::BOOL, Void**, Int32*, HRESULT)).call(dwtypeindex, dwbufferindex, breadonly, ppbuffer, lpstride)
  end
  def release_buffer(dwtypeindex : UInt32, dwbufferindex : UInt32) : HRESULT
    @lpVtbl.value.release_buffer.unsafe_as(Proc(UInt32, UInt32, HRESULT)).call(dwtypeindex, dwbufferindex)
  end
  def execute(dwfunction : UInt32, lpprivateinputdata : Void*, cbprivateinputdata : UInt32, lpprivateoutputdat : Void*, cbprivateoutputdata : UInt32, dwnumbuffers : UInt32, pamvabufferinfo : AMVABUFFERINFO*) : HRESULT
    @lpVtbl.value.execute.unsafe_as(Proc(UInt32, Void*, UInt32, Void*, UInt32, UInt32, AMVABUFFERINFO*, HRESULT)).call(dwfunction, lpprivateinputdata, cbprivateinputdata, lpprivateoutputdat, cbprivateoutputdata, dwnumbuffers, pamvabufferinfo)
  end
  def query_render_status(dwtypeindex : UInt32, dwbufferindex : UInt32, dwflags : UInt32) : HRESULT
    @lpVtbl.value.query_render_status.unsafe_as(Proc(UInt32, UInt32, UInt32, HRESULT)).call(dwtypeindex, dwbufferindex, dwflags)
  end
  def display_frame(dwfliptoindex : UInt32, pmediasample : IMediaSample) : HRESULT
    @lpVtbl.value.display_frame.unsafe_as(Proc(UInt32, IMediaSample, HRESULT)).call(dwfliptoindex, pmediasample)
  end
end
struct LibWin32::IAMWstDecoder
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_decoder_level(lplevel : AM_WST_LEVEL*) : HRESULT
    @lpVtbl.value.get_decoder_level.unsafe_as(Proc(AM_WST_LEVEL*, HRESULT)).call(lplevel)
  end
  def get_current_service(lpservice : AM_WST_SERVICE*) : HRESULT
    @lpVtbl.value.get_current_service.unsafe_as(Proc(AM_WST_SERVICE*, HRESULT)).call(lpservice)
  end
  def get_service_state(lpstate : AM_WST_STATE*) : HRESULT
    @lpVtbl.value.get_service_state.unsafe_as(Proc(AM_WST_STATE*, HRESULT)).call(lpstate)
  end
  def set_service_state(state : AM_WST_STATE) : HRESULT
    @lpVtbl.value.set_service_state.unsafe_as(Proc(AM_WST_STATE, HRESULT)).call(state)
  end
  def get_output_format(lpbmih : BITMAPINFOHEADER*) : HRESULT
    @lpVtbl.value.get_output_format.unsafe_as(Proc(BITMAPINFOHEADER*, HRESULT)).call(lpbmih)
  end
  def set_output_format(lpbmi : BITMAPINFO*) : HRESULT
    @lpVtbl.value.set_output_format.unsafe_as(Proc(BITMAPINFO*, HRESULT)).call(lpbmi)
  end
  def get_background_color(pdwphyscolor : UInt32*) : HRESULT
    @lpVtbl.value.get_background_color.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwphyscolor)
  end
  def set_background_color(dwphyscolor : UInt32) : HRESULT
    @lpVtbl.value.set_background_color.unsafe_as(Proc(UInt32, HRESULT)).call(dwphyscolor)
  end
  def get_redraw_always(lpboption : Int32*) : HRESULT
    @lpVtbl.value.get_redraw_always.unsafe_as(Proc(Int32*, HRESULT)).call(lpboption)
  end
  def set_redraw_always(boption : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_redraw_always.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(boption)
  end
  def get_draw_background_mode(lpmode : AM_WST_DRAWBGMODE*) : HRESULT
    @lpVtbl.value.get_draw_background_mode.unsafe_as(Proc(AM_WST_DRAWBGMODE*, HRESULT)).call(lpmode)
  end
  def set_draw_background_mode(mode : AM_WST_DRAWBGMODE) : HRESULT
    @lpVtbl.value.set_draw_background_mode.unsafe_as(Proc(AM_WST_DRAWBGMODE, HRESULT)).call(mode)
  end
  def set_answer_mode(banswer : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_answer_mode.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(banswer)
  end
  def get_answer_mode(pbanswer : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_answer_mode.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pbanswer)
  end
  def set_hold_page(bholdpage : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_hold_page.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(bholdpage)
  end
  def get_hold_page(pbholdpage : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_hold_page.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pbholdpage)
  end
  def get_current_page(pwstpage : AM_WST_PAGE*) : HRESULT
    @lpVtbl.value.get_current_page.unsafe_as(Proc(AM_WST_PAGE*, HRESULT)).call(pwstpage)
  end
  def set_current_page(wstpage : AM_WST_PAGE) : HRESULT
    @lpVtbl.value.set_current_page.unsafe_as(Proc(AM_WST_PAGE, HRESULT)).call(wstpage)
  end
end
struct LibWin32::IKsTopologyInfo
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_num_categories(pdwnumcategories : UInt32*) : HRESULT
    @lpVtbl.value.get_num_categories.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwnumcategories)
  end
  def get_category(dwindex : UInt32, pcategory : Guid*) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt32, Guid*, HRESULT)).call(dwindex, pcategory)
  end
  def get_num_connections(pdwnumconnections : UInt32*) : HRESULT
    @lpVtbl.value.get_num_connections.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwnumconnections)
  end
  def get_connection_info(dwindex : UInt32, pconnectioninfo : KSTOPOLOGY_CONNECTION*) : HRESULT
    @lpVtbl.value.get_connection_info.unsafe_as(Proc(UInt32, KSTOPOLOGY_CONNECTION*, HRESULT)).call(dwindex, pconnectioninfo)
  end
  def get_node_name(dwnodeid : UInt32, pwchnodename : LibC::LPWSTR, dwbufsize : UInt32, pdwnamelen : UInt32*) : HRESULT
    @lpVtbl.value.get_node_name.unsafe_as(Proc(UInt32, LibC::LPWSTR, UInt32, UInt32*, HRESULT)).call(dwnodeid, pwchnodename, dwbufsize, pdwnamelen)
  end
  def get_num_nodes(pdwnumnodes : UInt32*) : HRESULT
    @lpVtbl.value.get_num_nodes.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwnumnodes)
  end
  def get_node_type(dwnodeid : UInt32, pnodetype : Guid*) : HRESULT
    @lpVtbl.value.get_node_type.unsafe_as(Proc(UInt32, Guid*, HRESULT)).call(dwnodeid, pnodetype)
  end
  def create_node_instance(dwnodeid : UInt32, iid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.create_node_instance.unsafe_as(Proc(UInt32, Guid*, Void**, HRESULT)).call(dwnodeid, iid, ppvobject)
  end
end
struct LibWin32::ISelector
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_num_sources(pdwnumsources : UInt32*) : HRESULT
    @lpVtbl.value.get_num_sources.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwnumsources)
  end
  def get_source_node_id(pdwpinid : UInt32*) : HRESULT
    @lpVtbl.value.get_source_node_id.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwpinid)
  end
  def put_source_node_id(dwpinid : UInt32) : HRESULT
    @lpVtbl.value.put_source_node_id.unsafe_as(Proc(UInt32, HRESULT)).call(dwpinid)
  end
end
struct LibWin32::ICameraControl
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_exposure(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_exposure.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_exposure(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_exposure.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
  def get_range_exposure(pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflag : Int32*) : HRESULT
    @lpVtbl.value.get_range_exposure.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pmin, pmax, psteppingdelta, pdefault, pcapsflag)
  end
  def get_focus(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_focus.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_focus(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_focus.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
  def get_range_focus(pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflag : Int32*) : HRESULT
    @lpVtbl.value.get_range_focus.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pmin, pmax, psteppingdelta, pdefault, pcapsflag)
  end
  def get_iris(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_iris.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_iris(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_iris.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
  def get_range_iris(pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflag : Int32*) : HRESULT
    @lpVtbl.value.get_range_iris.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pmin, pmax, psteppingdelta, pdefault, pcapsflag)
  end
  def get_zoom(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_zoom.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_zoom(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_zoom.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
  def get_range_zoom(pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflag : Int32*) : HRESULT
    @lpVtbl.value.get_range_zoom.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pmin, pmax, psteppingdelta, pdefault, pcapsflag)
  end
  def get_focal_lengths(plocularfocallength : Int32*, plobjectivefocallengthmin : Int32*, plobjectivefocallengthmax : Int32*) : HRESULT
    @lpVtbl.value.get_focal_lengths.unsafe_as(Proc(Int32*, Int32*, Int32*, HRESULT)).call(plocularfocallength, plobjectivefocallengthmin, plobjectivefocallengthmax)
  end
  def get_pan(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_pan.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_pan(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_pan.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
  def get_range_pan(pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflag : Int32*) : HRESULT
    @lpVtbl.value.get_range_pan.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pmin, pmax, psteppingdelta, pdefault, pcapsflag)
  end
  def get_tilt(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_tilt.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_tilt(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_tilt.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
  def get_range_tilt(pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflag : Int32*) : HRESULT
    @lpVtbl.value.get_range_tilt.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pmin, pmax, psteppingdelta, pdefault, pcapsflag)
  end
  def get_pan_tilt(ppanvalue : Int32*, ptiltvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_pan_tilt.unsafe_as(Proc(Int32*, Int32*, Int32*, HRESULT)).call(ppanvalue, ptiltvalue, pflags)
  end
  def put_pan_tilt(panvalue : Int32, tiltvalue : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_pan_tilt.unsafe_as(Proc(Int32, Int32, Int32, HRESULT)).call(panvalue, tiltvalue, flags)
  end
  def get_roll(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_roll.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_roll(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_roll.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
  def get_range_roll(pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflag : Int32*) : HRESULT
    @lpVtbl.value.get_range_roll.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pmin, pmax, psteppingdelta, pdefault, pcapsflag)
  end
  def get_exposure_relative(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_exposure_relative.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_exposure_relative(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_exposure_relative.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
  def get_range_exposure_relative(pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflag : Int32*) : HRESULT
    @lpVtbl.value.get_range_exposure_relative.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pmin, pmax, psteppingdelta, pdefault, pcapsflag)
  end
  def get_focus_relative(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_focus_relative.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_focus_relative(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_focus_relative.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
  def get_range_focus_relative(pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflag : Int32*) : HRESULT
    @lpVtbl.value.get_range_focus_relative.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pmin, pmax, psteppingdelta, pdefault, pcapsflag)
  end
  def get_iris_relative(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_iris_relative.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_iris_relative(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_iris_relative.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
  def get_range_iris_relative(pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflag : Int32*) : HRESULT
    @lpVtbl.value.get_range_iris_relative.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pmin, pmax, psteppingdelta, pdefault, pcapsflag)
  end
  def get_zoom_relative(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_zoom_relative.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_zoom_relative(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_zoom_relative.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
  def get_range_zoom_relative(pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflag : Int32*) : HRESULT
    @lpVtbl.value.get_range_zoom_relative.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pmin, pmax, psteppingdelta, pdefault, pcapsflag)
  end
  def get_pan_relative(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_pan_relative.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_pan_relative(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_pan_relative.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
  def get_tilt_relative(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_tilt_relative.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_tilt_relative(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_tilt_relative.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
  def get_range_tilt_relative(pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflag : Int32*) : HRESULT
    @lpVtbl.value.get_range_tilt_relative.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pmin, pmax, psteppingdelta, pdefault, pcapsflag)
  end
  def get_pan_tilt_relative(ppanvalue : Int32*, ptiltvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_pan_tilt_relative.unsafe_as(Proc(Int32*, Int32*, Int32*, HRESULT)).call(ppanvalue, ptiltvalue, pflags)
  end
  def put_pan_tilt_relative(panvalue : Int32, tiltvalue : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_pan_tilt_relative.unsafe_as(Proc(Int32, Int32, Int32, HRESULT)).call(panvalue, tiltvalue, flags)
  end
  def get_range_pan_relative(pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflag : Int32*) : HRESULT
    @lpVtbl.value.get_range_pan_relative.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pmin, pmax, psteppingdelta, pdefault, pcapsflag)
  end
  def get_roll_relative(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_roll_relative.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_roll_relative(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_roll_relative.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
  def get_range_roll_relative(pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflag : Int32*) : HRESULT
    @lpVtbl.value.get_range_roll_relative.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pmin, pmax, psteppingdelta, pdefault, pcapsflag)
  end
  def get_scan_mode(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_scan_mode.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_scan_mode(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_scan_mode.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
  def get_privacy_mode(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_privacy_mode.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_privacy_mode(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_privacy_mode.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
end
struct LibWin32::IVideoProcAmp
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_backlight_compensation(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_backlight_compensation.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_backlight_compensation(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_backlight_compensation.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
  def get_range_backlight_compensation(pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflag : Int32*) : HRESULT
    @lpVtbl.value.get_range_backlight_compensation.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pmin, pmax, psteppingdelta, pdefault, pcapsflag)
  end
  def get_brightness(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_brightness.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_brightness(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_brightness.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
  def get_range_brightness(pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflag : Int32*) : HRESULT
    @lpVtbl.value.get_range_brightness.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pmin, pmax, psteppingdelta, pdefault, pcapsflag)
  end
  def get_color_enable(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_color_enable.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_color_enable(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_color_enable.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
  def get_range_color_enable(pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflag : Int32*) : HRESULT
    @lpVtbl.value.get_range_color_enable.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pmin, pmax, psteppingdelta, pdefault, pcapsflag)
  end
  def get_contrast(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_contrast.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_contrast(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_contrast.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
  def get_range_contrast(pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflag : Int32*) : HRESULT
    @lpVtbl.value.get_range_contrast.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pmin, pmax, psteppingdelta, pdefault, pcapsflag)
  end
  def get_gamma(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_gamma.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_gamma(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_gamma.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
  def get_range_gamma(pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflag : Int32*) : HRESULT
    @lpVtbl.value.get_range_gamma.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pmin, pmax, psteppingdelta, pdefault, pcapsflag)
  end
  def get_saturation(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_saturation.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_saturation(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_saturation.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
  def get_range_saturation(pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflag : Int32*) : HRESULT
    @lpVtbl.value.get_range_saturation.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pmin, pmax, psteppingdelta, pdefault, pcapsflag)
  end
  def get_sharpness(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_sharpness.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_sharpness(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_sharpness.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
  def get_range_sharpness(pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflag : Int32*) : HRESULT
    @lpVtbl.value.get_range_sharpness.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pmin, pmax, psteppingdelta, pdefault, pcapsflag)
  end
  def get_white_balance(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_white_balance.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_white_balance(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_white_balance.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
  def get_range_white_balance(pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflag : Int32*) : HRESULT
    @lpVtbl.value.get_range_white_balance.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pmin, pmax, psteppingdelta, pdefault, pcapsflag)
  end
  def get_gain(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_gain.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_gain(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_gain.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
  def get_range_gain(pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflag : Int32*) : HRESULT
    @lpVtbl.value.get_range_gain.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pmin, pmax, psteppingdelta, pdefault, pcapsflag)
  end
  def get_hue(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_hue.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_hue(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_hue.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
  def get_range_hue(pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflag : Int32*) : HRESULT
    @lpVtbl.value.get_range_hue.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pmin, pmax, psteppingdelta, pdefault, pcapsflag)
  end
  def get_digital_multiplier(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_digital_multiplier.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_digital_multiplier(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_digital_multiplier.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
  def get_range_digital_multiplier(pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflag : Int32*) : HRESULT
    @lpVtbl.value.get_range_digital_multiplier.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pmin, pmax, psteppingdelta, pdefault, pcapsflag)
  end
  def get_powerline_frequency(pvalue : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_powerline_frequency.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(pvalue, pflags)
  end
  def put_powerline_frequency(value : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_powerline_frequency.unsafe_as(Proc(Int32, Int32, HRESULT)).call(value, flags)
  end
  def get_range_powerline_frequency(pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflag : Int32*) : HRESULT
    @lpVtbl.value.get_range_powerline_frequency.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pmin, pmax, psteppingdelta, pdefault, pcapsflag)
  end
  def get_white_balance_component(pvalue1 : Int32*, pvalue2 : Int32*, pflags : Int32*) : HRESULT
    @lpVtbl.value.get_white_balance_component.unsafe_as(Proc(Int32*, Int32*, Int32*, HRESULT)).call(pvalue1, pvalue2, pflags)
  end
  def put_white_balance_component(value1 : Int32, value2 : Int32, flags : Int32) : HRESULT
    @lpVtbl.value.put_white_balance_component.unsafe_as(Proc(Int32, Int32, Int32, HRESULT)).call(value1, value2, flags)
  end
  def get_range_white_balance_component(pmin : Int32*, pmax : Int32*, psteppingdelta : Int32*, pdefault : Int32*, pcapsflag : Int32*) : HRESULT
    @lpVtbl.value.get_range_white_balance_component.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)).call(pmin, pmax, psteppingdelta, pdefault, pcapsflag)
  end
end
struct LibWin32::IKsNodeControl
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def put_node_id(dwnodeid : UInt32) : HRESULT
    @lpVtbl.value.put_node_id.unsafe_as(Proc(UInt32, HRESULT)).call(dwnodeid)
  end
  def put_ks_control(pkscontrol : Void*) : HRESULT
    @lpVtbl.value.put_ks_control.unsafe_as(Proc(Void*, HRESULT)).call(pkscontrol)
  end
end
struct LibWin32::IConfigAsfWriter
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def configure_filter_using_profile_id(dwprofileid : UInt32) : HRESULT
    @lpVtbl.value.configure_filter_using_profile_id.unsafe_as(Proc(UInt32, HRESULT)).call(dwprofileid)
  end
  def get_current_profile_id(pdwprofileid : UInt32*) : HRESULT
    @lpVtbl.value.get_current_profile_id.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwprofileid)
  end
  def configure_filter_using_profile_guid(guidprofile : Guid*) : HRESULT
    @lpVtbl.value.configure_filter_using_profile_guid.unsafe_as(Proc(Guid*, HRESULT)).call(guidprofile)
  end
  def get_current_profile_guid(pprofileguid : Guid*) : HRESULT
    @lpVtbl.value.get_current_profile_guid.unsafe_as(Proc(Guid*, HRESULT)).call(pprofileguid)
  end
  def configure_filter_using_profile(pprofile : IWMProfile) : HRESULT
    @lpVtbl.value.configure_filter_using_profile.unsafe_as(Proc(IWMProfile, HRESULT)).call(pprofile)
  end
  def get_current_profile(ppprofile : IWMProfile*) : HRESULT
    @lpVtbl.value.get_current_profile.unsafe_as(Proc(IWMProfile*, HRESULT)).call(ppprofile)
  end
  def set_index_mode(bindexfile : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_index_mode.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(bindexfile)
  end
  def get_index_mode(pbindexfile : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_index_mode.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pbindexfile)
  end
end
struct LibWin32::IConfigAsfWriter2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def configure_filter_using_profile_id(dwprofileid : UInt32) : HRESULT
    @lpVtbl.value.configure_filter_using_profile_id.unsafe_as(Proc(UInt32, HRESULT)).call(dwprofileid)
  end
  def get_current_profile_id(pdwprofileid : UInt32*) : HRESULT
    @lpVtbl.value.get_current_profile_id.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwprofileid)
  end
  def configure_filter_using_profile_guid(guidprofile : Guid*) : HRESULT
    @lpVtbl.value.configure_filter_using_profile_guid.unsafe_as(Proc(Guid*, HRESULT)).call(guidprofile)
  end
  def get_current_profile_guid(pprofileguid : Guid*) : HRESULT
    @lpVtbl.value.get_current_profile_guid.unsafe_as(Proc(Guid*, HRESULT)).call(pprofileguid)
  end
  def configure_filter_using_profile(pprofile : IWMProfile) : HRESULT
    @lpVtbl.value.configure_filter_using_profile.unsafe_as(Proc(IWMProfile, HRESULT)).call(pprofile)
  end
  def get_current_profile(ppprofile : IWMProfile*) : HRESULT
    @lpVtbl.value.get_current_profile.unsafe_as(Proc(IWMProfile*, HRESULT)).call(ppprofile)
  end
  def set_index_mode(bindexfile : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_index_mode.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(bindexfile)
  end
  def get_index_mode(pbindexfile : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_index_mode.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pbindexfile)
  end
  def stream_num_from_pin(ppin : IPin, pwstreamnum : UInt16*) : HRESULT
    @lpVtbl.value.stream_num_from_pin.unsafe_as(Proc(IPin, UInt16*, HRESULT)).call(ppin, pwstreamnum)
  end
  def set_param(dwparam : UInt32, dwparam1 : UInt32, dwparam2 : UInt32) : HRESULT
    @lpVtbl.value.set_param.unsafe_as(Proc(UInt32, UInt32, UInt32, HRESULT)).call(dwparam, dwparam1, dwparam2)
  end
  def get_param(dwparam : UInt32, pdwparam1 : UInt32*, pdwparam2 : UInt32*) : HRESULT
    @lpVtbl.value.get_param.unsafe_as(Proc(UInt32, UInt32*, UInt32*, HRESULT)).call(dwparam, pdwparam1, pdwparam2)
  end
  def reset_multi_pass_state : HRESULT
    @lpVtbl.value.reset_multi_pass_state.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IMultiMediaStream
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_information(pdwflags : MMSSF_GET_INFORMATION_FLAGS*, pstreamtype : STREAM_TYPE*) : HRESULT
    @lpVtbl.value.get_information.unsafe_as(Proc(MMSSF_GET_INFORMATION_FLAGS*, STREAM_TYPE*, HRESULT)).call(pdwflags, pstreamtype)
  end
  def get_media_stream(idpurpose : Guid*, ppmediastream : IMediaStream*) : HRESULT
    @lpVtbl.value.get_media_stream.unsafe_as(Proc(Guid*, IMediaStream*, HRESULT)).call(idpurpose, ppmediastream)
  end
  def enum_media_streams(index : Int32, ppmediastream : IMediaStream*) : HRESULT
    @lpVtbl.value.enum_media_streams.unsafe_as(Proc(Int32, IMediaStream*, HRESULT)).call(index, ppmediastream)
  end
  def get_state(pcurrentstate : STREAM_STATE*) : HRESULT
    @lpVtbl.value.get_state.unsafe_as(Proc(STREAM_STATE*, HRESULT)).call(pcurrentstate)
  end
  def set_state(newstate : STREAM_STATE) : HRESULT
    @lpVtbl.value.set_state.unsafe_as(Proc(STREAM_STATE, HRESULT)).call(newstate)
  end
  def get_time(pcurrenttime : Int64*) : HRESULT
    @lpVtbl.value.get_time.unsafe_as(Proc(Int64*, HRESULT)).call(pcurrenttime)
  end
  def get_duration(pduration : Int64*) : HRESULT
    @lpVtbl.value.get_duration.unsafe_as(Proc(Int64*, HRESULT)).call(pduration)
  end
  def seek(seektime : Int64) : HRESULT
    @lpVtbl.value.seek.unsafe_as(Proc(Int64, HRESULT)).call(seektime)
  end
  def get_end_of_stream_event_handle(pheos : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.get_end_of_stream_event_handle.unsafe_as(Proc(LibC::HANDLE*, HRESULT)).call(pheos)
  end
end
struct LibWin32::IMediaStream
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_multi_media_stream(ppmultimediastream : IMultiMediaStream*) : HRESULT
    @lpVtbl.value.get_multi_media_stream.unsafe_as(Proc(IMultiMediaStream*, HRESULT)).call(ppmultimediastream)
  end
  def get_information(ppurposeid : Guid*, ptype : STREAM_TYPE*) : HRESULT
    @lpVtbl.value.get_information.unsafe_as(Proc(Guid*, STREAM_TYPE*, HRESULT)).call(ppurposeid, ptype)
  end
  def set_same_format(pstreamthathasdesiredformat : IMediaStream, dwflags : UInt32) : HRESULT
    @lpVtbl.value.set_same_format.unsafe_as(Proc(IMediaStream, UInt32, HRESULT)).call(pstreamthathasdesiredformat, dwflags)
  end
  def allocate_sample(dwflags : UInt32, ppsample : IStreamSample*) : HRESULT
    @lpVtbl.value.allocate_sample.unsafe_as(Proc(UInt32, IStreamSample*, HRESULT)).call(dwflags, ppsample)
  end
  def create_shared_sample(pexistingsample : IStreamSample, dwflags : UInt32, ppnewsample : IStreamSample*) : HRESULT
    @lpVtbl.value.create_shared_sample.unsafe_as(Proc(IStreamSample, UInt32, IStreamSample*, HRESULT)).call(pexistingsample, dwflags, ppnewsample)
  end
  def send_end_of_stream(dwflags : UInt32) : HRESULT
    @lpVtbl.value.send_end_of_stream.unsafe_as(Proc(UInt32, HRESULT)).call(dwflags)
  end
end
struct LibWin32::IStreamSample
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_media_stream(ppmediastream : IMediaStream*) : HRESULT
    @lpVtbl.value.get_media_stream.unsafe_as(Proc(IMediaStream*, HRESULT)).call(ppmediastream)
  end
  def get_sample_times(pstarttime : Int64*, pendtime : Int64*, pcurrenttime : Int64*) : HRESULT
    @lpVtbl.value.get_sample_times.unsafe_as(Proc(Int64*, Int64*, Int64*, HRESULT)).call(pstarttime, pendtime, pcurrenttime)
  end
  def set_sample_times(pstarttime : Int64*, pendtime : Int64*) : HRESULT
    @lpVtbl.value.set_sample_times.unsafe_as(Proc(Int64*, Int64*, HRESULT)).call(pstarttime, pendtime)
  end
  def update(dwflags : UInt32, hevent : LibC::HANDLE, pfnapc : PAPCFUNC, dwapcdata : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.update.unsafe_as(Proc(UInt32, LibC::HANDLE, PAPCFUNC, LibC::UINT_PTR, HRESULT)).call(dwflags, hevent, pfnapc, dwapcdata)
  end
  def completion_status(dwflags : UInt32, dwmilliseconds : UInt32) : HRESULT
    @lpVtbl.value.completion_status.unsafe_as(Proc(UInt32, UInt32, HRESULT)).call(dwflags, dwmilliseconds)
  end
end
struct LibWin32::IDirectDrawMediaStream
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_multi_media_stream(ppmultimediastream : IMultiMediaStream*) : HRESULT
    @lpVtbl.value.get_multi_media_stream.unsafe_as(Proc(IMultiMediaStream*, HRESULT)).call(ppmultimediastream)
  end
  def get_information(ppurposeid : Guid*, ptype : STREAM_TYPE*) : HRESULT
    @lpVtbl.value.get_information.unsafe_as(Proc(Guid*, STREAM_TYPE*, HRESULT)).call(ppurposeid, ptype)
  end
  def set_same_format(pstreamthathasdesiredformat : IMediaStream, dwflags : UInt32) : HRESULT
    @lpVtbl.value.set_same_format.unsafe_as(Proc(IMediaStream, UInt32, HRESULT)).call(pstreamthathasdesiredformat, dwflags)
  end
  def allocate_sample(dwflags : UInt32, ppsample : IStreamSample*) : HRESULT
    @lpVtbl.value.allocate_sample.unsafe_as(Proc(UInt32, IStreamSample*, HRESULT)).call(dwflags, ppsample)
  end
  def create_shared_sample(pexistingsample : IStreamSample, dwflags : UInt32, ppnewsample : IStreamSample*) : HRESULT
    @lpVtbl.value.create_shared_sample.unsafe_as(Proc(IStreamSample, UInt32, IStreamSample*, HRESULT)).call(pexistingsample, dwflags, ppnewsample)
  end
  def send_end_of_stream(dwflags : UInt32) : HRESULT
    @lpVtbl.value.send_end_of_stream.unsafe_as(Proc(UInt32, HRESULT)).call(dwflags)
  end
  def get_format(pddsdcurrent : DDSURFACEDESC*, ppdirectdrawpalette : IDirectDrawPalette*, pddsddesired : DDSURFACEDESC*, pdwflags : UInt32*) : HRESULT
    @lpVtbl.value.get_format.unsafe_as(Proc(DDSURFACEDESC*, IDirectDrawPalette*, DDSURFACEDESC*, UInt32*, HRESULT)).call(pddsdcurrent, ppdirectdrawpalette, pddsddesired, pdwflags)
  end
  def set_format(pddsurfacedesc : DDSURFACEDESC*, pdirectdrawpalette : IDirectDrawPalette) : HRESULT
    @lpVtbl.value.set_format.unsafe_as(Proc(DDSURFACEDESC*, IDirectDrawPalette, HRESULT)).call(pddsurfacedesc, pdirectdrawpalette)
  end
  def get_direct_draw(ppdirectdraw : IDirectDraw*) : HRESULT
    @lpVtbl.value.get_direct_draw.unsafe_as(Proc(IDirectDraw*, HRESULT)).call(ppdirectdraw)
  end
  def set_direct_draw(pdirectdraw : IDirectDraw) : HRESULT
    @lpVtbl.value.set_direct_draw.unsafe_as(Proc(IDirectDraw, HRESULT)).call(pdirectdraw)
  end
  def create_sample(psurface : IDirectDrawSurface, prect : RECT*, dwflags : UInt32, ppsample : IDirectDrawStreamSample*) : HRESULT
    @lpVtbl.value.create_sample.unsafe_as(Proc(IDirectDrawSurface, RECT*, UInt32, IDirectDrawStreamSample*, HRESULT)).call(psurface, prect, dwflags, ppsample)
  end
  def get_time_per_frame(pframetime : Int64*) : HRESULT
    @lpVtbl.value.get_time_per_frame.unsafe_as(Proc(Int64*, HRESULT)).call(pframetime)
  end
end
struct LibWin32::IDirectDrawStreamSample
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_media_stream(ppmediastream : IMediaStream*) : HRESULT
    @lpVtbl.value.get_media_stream.unsafe_as(Proc(IMediaStream*, HRESULT)).call(ppmediastream)
  end
  def get_sample_times(pstarttime : Int64*, pendtime : Int64*, pcurrenttime : Int64*) : HRESULT
    @lpVtbl.value.get_sample_times.unsafe_as(Proc(Int64*, Int64*, Int64*, HRESULT)).call(pstarttime, pendtime, pcurrenttime)
  end
  def set_sample_times(pstarttime : Int64*, pendtime : Int64*) : HRESULT
    @lpVtbl.value.set_sample_times.unsafe_as(Proc(Int64*, Int64*, HRESULT)).call(pstarttime, pendtime)
  end
  def update(dwflags : UInt32, hevent : LibC::HANDLE, pfnapc : PAPCFUNC, dwapcdata : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.update.unsafe_as(Proc(UInt32, LibC::HANDLE, PAPCFUNC, LibC::UINT_PTR, HRESULT)).call(dwflags, hevent, pfnapc, dwapcdata)
  end
  def completion_status(dwflags : UInt32, dwmilliseconds : UInt32) : HRESULT
    @lpVtbl.value.completion_status.unsafe_as(Proc(UInt32, UInt32, HRESULT)).call(dwflags, dwmilliseconds)
  end
  def get_surface(ppdirectdrawsurface : IDirectDrawSurface*, prect : RECT*) : HRESULT
    @lpVtbl.value.get_surface.unsafe_as(Proc(IDirectDrawSurface*, RECT*, HRESULT)).call(ppdirectdrawsurface, prect)
  end
  def set_rect(prect : RECT*) : HRESULT
    @lpVtbl.value.set_rect.unsafe_as(Proc(RECT*, HRESULT)).call(prect)
  end
end
struct LibWin32::IAudioMediaStream
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_multi_media_stream(ppmultimediastream : IMultiMediaStream*) : HRESULT
    @lpVtbl.value.get_multi_media_stream.unsafe_as(Proc(IMultiMediaStream*, HRESULT)).call(ppmultimediastream)
  end
  def get_information(ppurposeid : Guid*, ptype : STREAM_TYPE*) : HRESULT
    @lpVtbl.value.get_information.unsafe_as(Proc(Guid*, STREAM_TYPE*, HRESULT)).call(ppurposeid, ptype)
  end
  def set_same_format(pstreamthathasdesiredformat : IMediaStream, dwflags : UInt32) : HRESULT
    @lpVtbl.value.set_same_format.unsafe_as(Proc(IMediaStream, UInt32, HRESULT)).call(pstreamthathasdesiredformat, dwflags)
  end
  def allocate_sample(dwflags : UInt32, ppsample : IStreamSample*) : HRESULT
    @lpVtbl.value.allocate_sample.unsafe_as(Proc(UInt32, IStreamSample*, HRESULT)).call(dwflags, ppsample)
  end
  def create_shared_sample(pexistingsample : IStreamSample, dwflags : UInt32, ppnewsample : IStreamSample*) : HRESULT
    @lpVtbl.value.create_shared_sample.unsafe_as(Proc(IStreamSample, UInt32, IStreamSample*, HRESULT)).call(pexistingsample, dwflags, ppnewsample)
  end
  def send_end_of_stream(dwflags : UInt32) : HRESULT
    @lpVtbl.value.send_end_of_stream.unsafe_as(Proc(UInt32, HRESULT)).call(dwflags)
  end
  def get_format(pwaveformatcurrent : WAVEFORMATEX*) : HRESULT
    @lpVtbl.value.get_format.unsafe_as(Proc(WAVEFORMATEX*, HRESULT)).call(pwaveformatcurrent)
  end
  def set_format(lpwaveformat : WAVEFORMATEX*) : HRESULT
    @lpVtbl.value.set_format.unsafe_as(Proc(WAVEFORMATEX*, HRESULT)).call(lpwaveformat)
  end
  def create_sample(paudiodata : IAudioData, dwflags : UInt32, ppsample : IAudioStreamSample*) : HRESULT
    @lpVtbl.value.create_sample.unsafe_as(Proc(IAudioData, UInt32, IAudioStreamSample*, HRESULT)).call(paudiodata, dwflags, ppsample)
  end
end
struct LibWin32::IAudioStreamSample
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_media_stream(ppmediastream : IMediaStream*) : HRESULT
    @lpVtbl.value.get_media_stream.unsafe_as(Proc(IMediaStream*, HRESULT)).call(ppmediastream)
  end
  def get_sample_times(pstarttime : Int64*, pendtime : Int64*, pcurrenttime : Int64*) : HRESULT
    @lpVtbl.value.get_sample_times.unsafe_as(Proc(Int64*, Int64*, Int64*, HRESULT)).call(pstarttime, pendtime, pcurrenttime)
  end
  def set_sample_times(pstarttime : Int64*, pendtime : Int64*) : HRESULT
    @lpVtbl.value.set_sample_times.unsafe_as(Proc(Int64*, Int64*, HRESULT)).call(pstarttime, pendtime)
  end
  def update(dwflags : UInt32, hevent : LibC::HANDLE, pfnapc : PAPCFUNC, dwapcdata : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.update.unsafe_as(Proc(UInt32, LibC::HANDLE, PAPCFUNC, LibC::UINT_PTR, HRESULT)).call(dwflags, hevent, pfnapc, dwapcdata)
  end
  def completion_status(dwflags : UInt32, dwmilliseconds : UInt32) : HRESULT
    @lpVtbl.value.completion_status.unsafe_as(Proc(UInt32, UInt32, HRESULT)).call(dwflags, dwmilliseconds)
  end
  def get_audio_data(ppaudio : IAudioData*) : HRESULT
    @lpVtbl.value.get_audio_data.unsafe_as(Proc(IAudioData*, HRESULT)).call(ppaudio)
  end
end
struct LibWin32::IMemoryData
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_buffer(cbsize : UInt32, pbdata : UInt8*, dwflags : UInt32) : HRESULT
    @lpVtbl.value.set_buffer.unsafe_as(Proc(UInt32, UInt8*, UInt32, HRESULT)).call(cbsize, pbdata, dwflags)
  end
  def get_info(pdwlength : UInt32*, ppbdata : UInt8**, pcbactualdata : UInt32*) : HRESULT
    @lpVtbl.value.get_info.unsafe_as(Proc(UInt32*, UInt8**, UInt32*, HRESULT)).call(pdwlength, ppbdata, pcbactualdata)
  end
  def set_actual(cbdatavalid : UInt32) : HRESULT
    @lpVtbl.value.set_actual.unsafe_as(Proc(UInt32, HRESULT)).call(cbdatavalid)
  end
end
struct LibWin32::IAudioData
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_buffer(cbsize : UInt32, pbdata : UInt8*, dwflags : UInt32) : HRESULT
    @lpVtbl.value.set_buffer.unsafe_as(Proc(UInt32, UInt8*, UInt32, HRESULT)).call(cbsize, pbdata, dwflags)
  end
  def get_info(pdwlength : UInt32*, ppbdata : UInt8**, pcbactualdata : UInt32*) : HRESULT
    @lpVtbl.value.get_info.unsafe_as(Proc(UInt32*, UInt8**, UInt32*, HRESULT)).call(pdwlength, ppbdata, pcbactualdata)
  end
  def set_actual(cbdatavalid : UInt32) : HRESULT
    @lpVtbl.value.set_actual.unsafe_as(Proc(UInt32, HRESULT)).call(cbdatavalid)
  end
  def get_format(pwaveformatcurrent : WAVEFORMATEX*) : HRESULT
    @lpVtbl.value.get_format.unsafe_as(Proc(WAVEFORMATEX*, HRESULT)).call(pwaveformatcurrent)
  end
  def set_format(lpwaveformat : WAVEFORMATEX*) : HRESULT
    @lpVtbl.value.set_format.unsafe_as(Proc(WAVEFORMATEX*, HRESULT)).call(lpwaveformat)
  end
end
struct LibWin32::IAMMultiMediaStream
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_information(pdwflags : MMSSF_GET_INFORMATION_FLAGS*, pstreamtype : STREAM_TYPE*) : HRESULT
    @lpVtbl.value.get_information.unsafe_as(Proc(MMSSF_GET_INFORMATION_FLAGS*, STREAM_TYPE*, HRESULT)).call(pdwflags, pstreamtype)
  end
  def get_media_stream(idpurpose : Guid*, ppmediastream : IMediaStream*) : HRESULT
    @lpVtbl.value.get_media_stream.unsafe_as(Proc(Guid*, IMediaStream*, HRESULT)).call(idpurpose, ppmediastream)
  end
  def enum_media_streams(index : Int32, ppmediastream : IMediaStream*) : HRESULT
    @lpVtbl.value.enum_media_streams.unsafe_as(Proc(Int32, IMediaStream*, HRESULT)).call(index, ppmediastream)
  end
  def get_state(pcurrentstate : STREAM_STATE*) : HRESULT
    @lpVtbl.value.get_state.unsafe_as(Proc(STREAM_STATE*, HRESULT)).call(pcurrentstate)
  end
  def set_state(newstate : STREAM_STATE) : HRESULT
    @lpVtbl.value.set_state.unsafe_as(Proc(STREAM_STATE, HRESULT)).call(newstate)
  end
  def get_time(pcurrenttime : Int64*) : HRESULT
    @lpVtbl.value.get_time.unsafe_as(Proc(Int64*, HRESULT)).call(pcurrenttime)
  end
  def get_duration(pduration : Int64*) : HRESULT
    @lpVtbl.value.get_duration.unsafe_as(Proc(Int64*, HRESULT)).call(pduration)
  end
  def seek(seektime : Int64) : HRESULT
    @lpVtbl.value.seek.unsafe_as(Proc(Int64, HRESULT)).call(seektime)
  end
  def get_end_of_stream_event_handle(pheos : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.get_end_of_stream_event_handle.unsafe_as(Proc(LibC::HANDLE*, HRESULT)).call(pheos)
  end
  def initialize(streamtype : STREAM_TYPE, dwflags : AMMSF_MMS_INIT_FLAGS, pfiltergraph : IGraphBuilder) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(STREAM_TYPE, AMMSF_MMS_INIT_FLAGS, IGraphBuilder, HRESULT)).call(streamtype, dwflags, pfiltergraph)
  end
  def get_filter_graph(ppgraphbuilder : IGraphBuilder*) : HRESULT
    @lpVtbl.value.get_filter_graph.unsafe_as(Proc(IGraphBuilder*, HRESULT)).call(ppgraphbuilder)
  end
  def get_filter(ppfilter : IMediaStreamFilter*) : HRESULT
    @lpVtbl.value.get_filter.unsafe_as(Proc(IMediaStreamFilter*, HRESULT)).call(ppfilter)
  end
  def add_media_stream(pstreamobject : IUnknown, purposeid : Guid*, dwflags : AMMSF_MS_FLAGS, ppnewstream : IMediaStream*) : HRESULT
    @lpVtbl.value.add_media_stream.unsafe_as(Proc(IUnknown, Guid*, AMMSF_MS_FLAGS, IMediaStream*, HRESULT)).call(pstreamobject, purposeid, dwflags, ppnewstream)
  end
  def open_file(pszfilename : LibC::LPWSTR, dwflags : UInt32) : HRESULT
    @lpVtbl.value.open_file.unsafe_as(Proc(LibC::LPWSTR, UInt32, HRESULT)).call(pszfilename, dwflags)
  end
  def open_moniker(pctx : IBindCtx, pmoniker : IMoniker, dwflags : UInt32) : HRESULT
    @lpVtbl.value.open_moniker.unsafe_as(Proc(IBindCtx, IMoniker, UInt32, HRESULT)).call(pctx, pmoniker, dwflags)
  end
  def render(dwflags : UInt32) : HRESULT
    @lpVtbl.value.render.unsafe_as(Proc(UInt32, HRESULT)).call(dwflags)
  end
end
struct LibWin32::IAMMediaStream
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_multi_media_stream(ppmultimediastream : IMultiMediaStream*) : HRESULT
    @lpVtbl.value.get_multi_media_stream.unsafe_as(Proc(IMultiMediaStream*, HRESULT)).call(ppmultimediastream)
  end
  def get_information(ppurposeid : Guid*, ptype : STREAM_TYPE*) : HRESULT
    @lpVtbl.value.get_information.unsafe_as(Proc(Guid*, STREAM_TYPE*, HRESULT)).call(ppurposeid, ptype)
  end
  def set_same_format(pstreamthathasdesiredformat : IMediaStream, dwflags : UInt32) : HRESULT
    @lpVtbl.value.set_same_format.unsafe_as(Proc(IMediaStream, UInt32, HRESULT)).call(pstreamthathasdesiredformat, dwflags)
  end
  def allocate_sample(dwflags : UInt32, ppsample : IStreamSample*) : HRESULT
    @lpVtbl.value.allocate_sample.unsafe_as(Proc(UInt32, IStreamSample*, HRESULT)).call(dwflags, ppsample)
  end
  def create_shared_sample(pexistingsample : IStreamSample, dwflags : UInt32, ppnewsample : IStreamSample*) : HRESULT
    @lpVtbl.value.create_shared_sample.unsafe_as(Proc(IStreamSample, UInt32, IStreamSample*, HRESULT)).call(pexistingsample, dwflags, ppnewsample)
  end
  def send_end_of_stream(dwflags : UInt32) : HRESULT
    @lpVtbl.value.send_end_of_stream.unsafe_as(Proc(UInt32, HRESULT)).call(dwflags)
  end
  def initialize(psourceobject : IUnknown, dwflags : UInt32, purposeid : Guid*, streamtype : STREAM_TYPE) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IUnknown, UInt32, Guid*, STREAM_TYPE, HRESULT)).call(psourceobject, dwflags, purposeid, streamtype)
  end
  def set_state(state : FILTER_STATE) : HRESULT
    @lpVtbl.value.set_state.unsafe_as(Proc(FILTER_STATE, HRESULT)).call(state)
  end
  def join_am_multi_media_stream(pammultimediastream : IAMMultiMediaStream) : HRESULT
    @lpVtbl.value.join_am_multi_media_stream.unsafe_as(Proc(IAMMultiMediaStream, HRESULT)).call(pammultimediastream)
  end
  def join_filter(pmediastreamfilter : IMediaStreamFilter) : HRESULT
    @lpVtbl.value.join_filter.unsafe_as(Proc(IMediaStreamFilter, HRESULT)).call(pmediastreamfilter)
  end
  def join_filter_graph(pfiltergraph : IFilterGraph) : HRESULT
    @lpVtbl.value.join_filter_graph.unsafe_as(Proc(IFilterGraph, HRESULT)).call(pfiltergraph)
  end
end
struct LibWin32::IMediaStreamFilter
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_class_id(pclassid : Guid*) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(Guid*, HRESULT)).call(pclassid)
  end
  def stop : HRESULT
    @lpVtbl.value.stop.unsafe_as(Proc(HRESULT)).call
  end
  def pause : HRESULT
    @lpVtbl.value.pause.unsafe_as(Proc(HRESULT)).call
  end
  def run(tstart : Int64) : HRESULT
    @lpVtbl.value.run.unsafe_as(Proc(Int64, HRESULT)).call(tstart)
  end
  def get_state(dwmillisecstimeout : UInt32, state : FILTER_STATE*) : HRESULT
    @lpVtbl.value.get_state.unsafe_as(Proc(UInt32, FILTER_STATE*, HRESULT)).call(dwmillisecstimeout, state)
  end
  def set_sync_source(pclock : IReferenceClock) : HRESULT
    @lpVtbl.value.set_sync_source.unsafe_as(Proc(IReferenceClock, HRESULT)).call(pclock)
  end
  def get_sync_source(pclock : IReferenceClock*) : HRESULT
    @lpVtbl.value.get_sync_source.unsafe_as(Proc(IReferenceClock*, HRESULT)).call(pclock)
  end
  def enum_pins(ppenum : IEnumPins*) : HRESULT
    @lpVtbl.value.enum_pins.unsafe_as(Proc(IEnumPins*, HRESULT)).call(ppenum)
  end
  def find_pin(id : LibC::LPWSTR, pppin : IPin*) : HRESULT
    @lpVtbl.value.find_pin.unsafe_as(Proc(LibC::LPWSTR, IPin*, HRESULT)).call(id, pppin)
  end
  def query_filter_info(pinfo : FILTER_INFO*) : HRESULT
    @lpVtbl.value.query_filter_info.unsafe_as(Proc(FILTER_INFO*, HRESULT)).call(pinfo)
  end
  def join_filter_graph(pgraph : IFilterGraph, pname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.join_filter_graph.unsafe_as(Proc(IFilterGraph, LibC::LPWSTR, HRESULT)).call(pgraph, pname)
  end
  def query_vendor_info(pvendorinfo : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.query_vendor_info.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(pvendorinfo)
  end
  def add_media_stream(pammediastream : IAMMediaStream) : HRESULT
    @lpVtbl.value.add_media_stream.unsafe_as(Proc(IAMMediaStream, HRESULT)).call(pammediastream)
  end
  def get_media_stream(idpurpose : Guid*, ppmediastream : IMediaStream*) : HRESULT
    @lpVtbl.value.get_media_stream.unsafe_as(Proc(Guid*, IMediaStream*, HRESULT)).call(idpurpose, ppmediastream)
  end
  def enum_media_streams(index : Int32, ppmediastream : IMediaStream*) : HRESULT
    @lpVtbl.value.enum_media_streams.unsafe_as(Proc(Int32, IMediaStream*, HRESULT)).call(index, ppmediastream)
  end
  def support_seeking(brenderer : LibC::BOOL) : HRESULT
    @lpVtbl.value.support_seeking.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(brenderer)
  end
  def reference_time_to_stream_time(ptime : Int64*) : HRESULT
    @lpVtbl.value.reference_time_to_stream_time.unsafe_as(Proc(Int64*, HRESULT)).call(ptime)
  end
  def get_current_stream_time(pcurrentstreamtime : Int64*) : HRESULT
    @lpVtbl.value.get_current_stream_time.unsafe_as(Proc(Int64*, HRESULT)).call(pcurrentstreamtime)
  end
  def wait_until(waitstreamtime : Int64) : HRESULT
    @lpVtbl.value.wait_until.unsafe_as(Proc(Int64, HRESULT)).call(waitstreamtime)
  end
  def flush(bcanceleos : LibC::BOOL) : HRESULT
    @lpVtbl.value.flush.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(bcanceleos)
  end
  def end_of_stream : HRESULT
    @lpVtbl.value.end_of_stream.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IDirectDrawMediaSampleAllocator
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_direct_draw(ppdirectdraw : IDirectDraw*) : HRESULT
    @lpVtbl.value.get_direct_draw.unsafe_as(Proc(IDirectDraw*, HRESULT)).call(ppdirectdraw)
  end
end
struct LibWin32::IDirectDrawMediaSample
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_surface_and_release_lock(ppdirectdrawsurface : IDirectDrawSurface*, prect : RECT*) : HRESULT
    @lpVtbl.value.get_surface_and_release_lock.unsafe_as(Proc(IDirectDrawSurface*, RECT*, HRESULT)).call(ppdirectdrawsurface, prect)
  end
  def lock_media_sample_pointer : HRESULT
    @lpVtbl.value.lock_media_sample_pointer.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IAMMediaTypeStream
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_multi_media_stream(ppmultimediastream : IMultiMediaStream*) : HRESULT
    @lpVtbl.value.get_multi_media_stream.unsafe_as(Proc(IMultiMediaStream*, HRESULT)).call(ppmultimediastream)
  end
  def get_information(ppurposeid : Guid*, ptype : STREAM_TYPE*) : HRESULT
    @lpVtbl.value.get_information.unsafe_as(Proc(Guid*, STREAM_TYPE*, HRESULT)).call(ppurposeid, ptype)
  end
  def set_same_format(pstreamthathasdesiredformat : IMediaStream, dwflags : UInt32) : HRESULT
    @lpVtbl.value.set_same_format.unsafe_as(Proc(IMediaStream, UInt32, HRESULT)).call(pstreamthathasdesiredformat, dwflags)
  end
  def allocate_sample(dwflags : UInt32, ppsample : IStreamSample*) : HRESULT
    @lpVtbl.value.allocate_sample.unsafe_as(Proc(UInt32, IStreamSample*, HRESULT)).call(dwflags, ppsample)
  end
  def create_shared_sample(pexistingsample : IStreamSample, dwflags : UInt32, ppnewsample : IStreamSample*) : HRESULT
    @lpVtbl.value.create_shared_sample.unsafe_as(Proc(IStreamSample, UInt32, IStreamSample*, HRESULT)).call(pexistingsample, dwflags, ppnewsample)
  end
  def send_end_of_stream(dwflags : UInt32) : HRESULT
    @lpVtbl.value.send_end_of_stream.unsafe_as(Proc(UInt32, HRESULT)).call(dwflags)
  end
  def get_format(pmediatype : AM_MEDIA_TYPE*, dwflags : UInt32) : HRESULT
    @lpVtbl.value.get_format.unsafe_as(Proc(AM_MEDIA_TYPE*, UInt32, HRESULT)).call(pmediatype, dwflags)
  end
  def set_format(pmediatype : AM_MEDIA_TYPE*, dwflags : UInt32) : HRESULT
    @lpVtbl.value.set_format.unsafe_as(Proc(AM_MEDIA_TYPE*, UInt32, HRESULT)).call(pmediatype, dwflags)
  end
  def create_sample(lsamplesize : Int32, pbbuffer : UInt8*, dwflags : UInt32, punkouter : IUnknown, ppammediatypesample : IAMMediaTypeSample*) : HRESULT
    @lpVtbl.value.create_sample.unsafe_as(Proc(Int32, UInt8*, UInt32, IUnknown, IAMMediaTypeSample*, HRESULT)).call(lsamplesize, pbbuffer, dwflags, punkouter, ppammediatypesample)
  end
  def get_stream_allocator_requirements(pprops : ALLOCATOR_PROPERTIES*) : HRESULT
    @lpVtbl.value.get_stream_allocator_requirements.unsafe_as(Proc(ALLOCATOR_PROPERTIES*, HRESULT)).call(pprops)
  end
  def set_stream_allocator_requirements(pprops : ALLOCATOR_PROPERTIES*) : HRESULT
    @lpVtbl.value.set_stream_allocator_requirements.unsafe_as(Proc(ALLOCATOR_PROPERTIES*, HRESULT)).call(pprops)
  end
end
struct LibWin32::IAMMediaTypeSample
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_media_stream(ppmediastream : IMediaStream*) : HRESULT
    @lpVtbl.value.get_media_stream.unsafe_as(Proc(IMediaStream*, HRESULT)).call(ppmediastream)
  end
  def get_sample_times(pstarttime : Int64*, pendtime : Int64*, pcurrenttime : Int64*) : HRESULT
    @lpVtbl.value.get_sample_times.unsafe_as(Proc(Int64*, Int64*, Int64*, HRESULT)).call(pstarttime, pendtime, pcurrenttime)
  end
  def set_sample_times(pstarttime : Int64*, pendtime : Int64*) : HRESULT
    @lpVtbl.value.set_sample_times.unsafe_as(Proc(Int64*, Int64*, HRESULT)).call(pstarttime, pendtime)
  end
  def update(dwflags : UInt32, hevent : LibC::HANDLE, pfnapc : PAPCFUNC, dwapcdata : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.update.unsafe_as(Proc(UInt32, LibC::HANDLE, PAPCFUNC, LibC::UINT_PTR, HRESULT)).call(dwflags, hevent, pfnapc, dwapcdata)
  end
  def completion_status(dwflags : UInt32, dwmilliseconds : UInt32) : HRESULT
    @lpVtbl.value.completion_status.unsafe_as(Proc(UInt32, UInt32, HRESULT)).call(dwflags, dwmilliseconds)
  end
  def set_pointer(pbuffer : UInt8*, lsize : Int32) : HRESULT
    @lpVtbl.value.set_pointer.unsafe_as(Proc(UInt8*, Int32, HRESULT)).call(pbuffer, lsize)
  end
  def get_pointer(ppbuffer : UInt8**) : HRESULT
    @lpVtbl.value.get_pointer.unsafe_as(Proc(UInt8**, HRESULT)).call(ppbuffer)
  end
  def get_size : Int32
    @lpVtbl.value.get_size.unsafe_as(Proc(Int32)).call
  end
  def get_time(ptimestart : Int64*, ptimeend : Int64*) : HRESULT
    @lpVtbl.value.get_time.unsafe_as(Proc(Int64*, Int64*, HRESULT)).call(ptimestart, ptimeend)
  end
  def set_time(ptimestart : Int64*, ptimeend : Int64*) : HRESULT
    @lpVtbl.value.set_time.unsafe_as(Proc(Int64*, Int64*, HRESULT)).call(ptimestart, ptimeend)
  end
  def is_sync_point : HRESULT
    @lpVtbl.value.is_sync_point.unsafe_as(Proc(HRESULT)).call
  end
  def set_sync_point(bissyncpoint : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_sync_point.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(bissyncpoint)
  end
  def is_preroll : HRESULT
    @lpVtbl.value.is_preroll.unsafe_as(Proc(HRESULT)).call
  end
  def set_preroll(bispreroll : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_preroll.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(bispreroll)
  end
  def get_actual_data_length : Int32
    @lpVtbl.value.get_actual_data_length.unsafe_as(Proc(Int32)).call
  end
  def set_actual_data_length(midl__iammediatypesample0000 : Int32) : HRESULT
    @lpVtbl.value.set_actual_data_length.unsafe_as(Proc(Int32, HRESULT)).call(midl__iammediatypesample0000)
  end
  def get_media_type(ppmediatype : AM_MEDIA_TYPE**) : HRESULT
    @lpVtbl.value.get_media_type.unsafe_as(Proc(AM_MEDIA_TYPE**, HRESULT)).call(ppmediatype)
  end
  def set_media_type(pmediatype : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.set_media_type.unsafe_as(Proc(AM_MEDIA_TYPE*, HRESULT)).call(pmediatype)
  end
  def is_discontinuity : HRESULT
    @lpVtbl.value.is_discontinuity.unsafe_as(Proc(HRESULT)).call
  end
  def set_discontinuity(bdiscontinuity : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_discontinuity.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(bdiscontinuity)
  end
  def get_media_time(ptimestart : Int64*, ptimeend : Int64*) : HRESULT
    @lpVtbl.value.get_media_time.unsafe_as(Proc(Int64*, Int64*, HRESULT)).call(ptimestart, ptimeend)
  end
  def set_media_time(ptimestart : Int64*, ptimeend : Int64*) : HRESULT
    @lpVtbl.value.set_media_time.unsafe_as(Proc(Int64*, Int64*, HRESULT)).call(ptimestart, ptimeend)
  end
end
struct LibWin32::IDirectDrawVideo
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_switches(pswitches : UInt32*) : HRESULT
    @lpVtbl.value.get_switches.unsafe_as(Proc(UInt32*, HRESULT)).call(pswitches)
  end
  def set_switches(switches : UInt32) : HRESULT
    @lpVtbl.value.set_switches.unsafe_as(Proc(UInt32, HRESULT)).call(switches)
  end
  def get_caps(pcaps : DDCAPS_DX7*) : HRESULT
    @lpVtbl.value.get_caps.unsafe_as(Proc(DDCAPS_DX7*, HRESULT)).call(pcaps)
  end
  def get_emulated_caps(pcaps : DDCAPS_DX7*) : HRESULT
    @lpVtbl.value.get_emulated_caps.unsafe_as(Proc(DDCAPS_DX7*, HRESULT)).call(pcaps)
  end
  def get_surface_desc(psurfacedesc : DDSURFACEDESC*) : HRESULT
    @lpVtbl.value.get_surface_desc.unsafe_as(Proc(DDSURFACEDESC*, HRESULT)).call(psurfacedesc)
  end
  def get_four_cc_codes(pcount : UInt32*, pcodes : UInt32*) : HRESULT
    @lpVtbl.value.get_four_cc_codes.unsafe_as(Proc(UInt32*, UInt32*, HRESULT)).call(pcount, pcodes)
  end
  def set_direct_draw(pdirectdraw : IDirectDraw) : HRESULT
    @lpVtbl.value.set_direct_draw.unsafe_as(Proc(IDirectDraw, HRESULT)).call(pdirectdraw)
  end
  def get_direct_draw(ppdirectdraw : IDirectDraw*) : HRESULT
    @lpVtbl.value.get_direct_draw.unsafe_as(Proc(IDirectDraw*, HRESULT)).call(ppdirectdraw)
  end
  def get_surface_type(psurfacetype : UInt32*) : HRESULT
    @lpVtbl.value.get_surface_type.unsafe_as(Proc(UInt32*, HRESULT)).call(psurfacetype)
  end
  def set_default : HRESULT
    @lpVtbl.value.set_default.unsafe_as(Proc(HRESULT)).call
  end
  def use_scan_line(usescanline : Int32) : HRESULT
    @lpVtbl.value.use_scan_line.unsafe_as(Proc(Int32, HRESULT)).call(usescanline)
  end
  def can_use_scan_line(usescanline : Int32*) : HRESULT
    @lpVtbl.value.can_use_scan_line.unsafe_as(Proc(Int32*, HRESULT)).call(usescanline)
  end
  def use_overlay_stretch(useoverlaystretch : Int32) : HRESULT
    @lpVtbl.value.use_overlay_stretch.unsafe_as(Proc(Int32, HRESULT)).call(useoverlaystretch)
  end
  def can_use_overlay_stretch(useoverlaystretch : Int32*) : HRESULT
    @lpVtbl.value.can_use_overlay_stretch.unsafe_as(Proc(Int32*, HRESULT)).call(useoverlaystretch)
  end
  def use_when_full_screen(usewhenfullscreen : Int32) : HRESULT
    @lpVtbl.value.use_when_full_screen.unsafe_as(Proc(Int32, HRESULT)).call(usewhenfullscreen)
  end
  def will_use_full_screen(usewhenfullscreen : Int32*) : HRESULT
    @lpVtbl.value.will_use_full_screen.unsafe_as(Proc(Int32*, HRESULT)).call(usewhenfullscreen)
  end
end
struct LibWin32::IQualProp
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_frames_dropped_in_renderer(pcframes : Int32*) : HRESULT
    @lpVtbl.value.get_frames_dropped_in_renderer.unsafe_as(Proc(Int32*, HRESULT)).call(pcframes)
  end
  def get_frames_drawn(pcframesdrawn : Int32*) : HRESULT
    @lpVtbl.value.get_frames_drawn.unsafe_as(Proc(Int32*, HRESULT)).call(pcframesdrawn)
  end
  def get_avg_frame_rate(piavgframerate : Int32*) : HRESULT
    @lpVtbl.value.get_avg_frame_rate.unsafe_as(Proc(Int32*, HRESULT)).call(piavgframerate)
  end
  def get_jitter(ijitter : Int32*) : HRESULT
    @lpVtbl.value.get_jitter.unsafe_as(Proc(Int32*, HRESULT)).call(ijitter)
  end
  def get_avg_sync_offset(piavg : Int32*) : HRESULT
    @lpVtbl.value.get_avg_sync_offset.unsafe_as(Proc(Int32*, HRESULT)).call(piavg)
  end
  def get_dev_sync_offset(pidev : Int32*) : HRESULT
    @lpVtbl.value.get_dev_sync_offset.unsafe_as(Proc(Int32*, HRESULT)).call(pidev)
  end
end
struct LibWin32::IFullScreenVideo
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def count_modes(pmodes : Int32*) : HRESULT
    @lpVtbl.value.count_modes.unsafe_as(Proc(Int32*, HRESULT)).call(pmodes)
  end
  def get_mode_info(mode : Int32, pwidth : Int32*, pheight : Int32*, pdepth : Int32*) : HRESULT
    @lpVtbl.value.get_mode_info.unsafe_as(Proc(Int32, Int32*, Int32*, Int32*, HRESULT)).call(mode, pwidth, pheight, pdepth)
  end
  def get_current_mode(pmode : Int32*) : HRESULT
    @lpVtbl.value.get_current_mode.unsafe_as(Proc(Int32*, HRESULT)).call(pmode)
  end
  def is_mode_available(mode : Int32) : HRESULT
    @lpVtbl.value.is_mode_available.unsafe_as(Proc(Int32, HRESULT)).call(mode)
  end
  def is_mode_enabled(mode : Int32) : HRESULT
    @lpVtbl.value.is_mode_enabled.unsafe_as(Proc(Int32, HRESULT)).call(mode)
  end
  def set_enabled(mode : Int32, benabled : Int32) : HRESULT
    @lpVtbl.value.set_enabled.unsafe_as(Proc(Int32, Int32, HRESULT)).call(mode, benabled)
  end
  def get_clip_factor(pclipfactor : Int32*) : HRESULT
    @lpVtbl.value.get_clip_factor.unsafe_as(Proc(Int32*, HRESULT)).call(pclipfactor)
  end
  def set_clip_factor(clipfactor : Int32) : HRESULT
    @lpVtbl.value.set_clip_factor.unsafe_as(Proc(Int32, HRESULT)).call(clipfactor)
  end
  def set_message_drain(hwnd : LibC::HANDLE) : HRESULT
    @lpVtbl.value.set_message_drain.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hwnd)
  end
  def get_message_drain(hwnd : HANDLE*) : HRESULT
    @lpVtbl.value.get_message_drain.unsafe_as(Proc(HANDLE*, HRESULT)).call(hwnd)
  end
  def set_monitor(monitor : Int32) : HRESULT
    @lpVtbl.value.set_monitor.unsafe_as(Proc(Int32, HRESULT)).call(monitor)
  end
  def get_monitor(monitor : Int32*) : HRESULT
    @lpVtbl.value.get_monitor.unsafe_as(Proc(Int32*, HRESULT)).call(monitor)
  end
  def hide_on_deactivate(hide : Int32) : HRESULT
    @lpVtbl.value.hide_on_deactivate.unsafe_as(Proc(Int32, HRESULT)).call(hide)
  end
  def is_hide_on_deactivate : HRESULT
    @lpVtbl.value.is_hide_on_deactivate.unsafe_as(Proc(HRESULT)).call
  end
  def set_caption(strcaption : UInt8*) : HRESULT
    @lpVtbl.value.set_caption.unsafe_as(Proc(UInt8*, HRESULT)).call(strcaption)
  end
  def get_caption(pstrcaption : UInt8**) : HRESULT
    @lpVtbl.value.get_caption.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrcaption)
  end
  def set_default : HRESULT
    @lpVtbl.value.set_default.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IFullScreenVideoEx
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def count_modes(pmodes : Int32*) : HRESULT
    @lpVtbl.value.count_modes.unsafe_as(Proc(Int32*, HRESULT)).call(pmodes)
  end
  def get_mode_info(mode : Int32, pwidth : Int32*, pheight : Int32*, pdepth : Int32*) : HRESULT
    @lpVtbl.value.get_mode_info.unsafe_as(Proc(Int32, Int32*, Int32*, Int32*, HRESULT)).call(mode, pwidth, pheight, pdepth)
  end
  def get_current_mode(pmode : Int32*) : HRESULT
    @lpVtbl.value.get_current_mode.unsafe_as(Proc(Int32*, HRESULT)).call(pmode)
  end
  def is_mode_available(mode : Int32) : HRESULT
    @lpVtbl.value.is_mode_available.unsafe_as(Proc(Int32, HRESULT)).call(mode)
  end
  def is_mode_enabled(mode : Int32) : HRESULT
    @lpVtbl.value.is_mode_enabled.unsafe_as(Proc(Int32, HRESULT)).call(mode)
  end
  def set_enabled(mode : Int32, benabled : Int32) : HRESULT
    @lpVtbl.value.set_enabled.unsafe_as(Proc(Int32, Int32, HRESULT)).call(mode, benabled)
  end
  def get_clip_factor(pclipfactor : Int32*) : HRESULT
    @lpVtbl.value.get_clip_factor.unsafe_as(Proc(Int32*, HRESULT)).call(pclipfactor)
  end
  def set_clip_factor(clipfactor : Int32) : HRESULT
    @lpVtbl.value.set_clip_factor.unsafe_as(Proc(Int32, HRESULT)).call(clipfactor)
  end
  def set_message_drain(hwnd : LibC::HANDLE) : HRESULT
    @lpVtbl.value.set_message_drain.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hwnd)
  end
  def get_message_drain(hwnd : HANDLE*) : HRESULT
    @lpVtbl.value.get_message_drain.unsafe_as(Proc(HANDLE*, HRESULT)).call(hwnd)
  end
  def set_monitor(monitor : Int32) : HRESULT
    @lpVtbl.value.set_monitor.unsafe_as(Proc(Int32, HRESULT)).call(monitor)
  end
  def get_monitor(monitor : Int32*) : HRESULT
    @lpVtbl.value.get_monitor.unsafe_as(Proc(Int32*, HRESULT)).call(monitor)
  end
  def hide_on_deactivate(hide : Int32) : HRESULT
    @lpVtbl.value.hide_on_deactivate.unsafe_as(Proc(Int32, HRESULT)).call(hide)
  end
  def is_hide_on_deactivate : HRESULT
    @lpVtbl.value.is_hide_on_deactivate.unsafe_as(Proc(HRESULT)).call
  end
  def set_caption(strcaption : UInt8*) : HRESULT
    @lpVtbl.value.set_caption.unsafe_as(Proc(UInt8*, HRESULT)).call(strcaption)
  end
  def get_caption(pstrcaption : UInt8**) : HRESULT
    @lpVtbl.value.get_caption.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrcaption)
  end
  def set_default : HRESULT
    @lpVtbl.value.set_default.unsafe_as(Proc(HRESULT)).call
  end
  def set_accelerator_table(hwnd : LibC::HANDLE, haccel : LibC::HANDLE) : HRESULT
    @lpVtbl.value.set_accelerator_table.unsafe_as(Proc(LibC::HANDLE, LibC::HANDLE, HRESULT)).call(hwnd, haccel)
  end
  def get_accelerator_table(phwnd : HANDLE*, phaccel : HANDLE*) : HRESULT
    @lpVtbl.value.get_accelerator_table.unsafe_as(Proc(HANDLE*, HANDLE*, HRESULT)).call(phwnd, phaccel)
  end
  def keep_pixel_aspect_ratio(keepaspect : Int32) : HRESULT
    @lpVtbl.value.keep_pixel_aspect_ratio.unsafe_as(Proc(Int32, HRESULT)).call(keepaspect)
  end
  def is_keep_pixel_aspect_ratio(pkeepaspect : Int32*) : HRESULT
    @lpVtbl.value.is_keep_pixel_aspect_ratio.unsafe_as(Proc(Int32*, HRESULT)).call(pkeepaspect)
  end
end
struct LibWin32::IBaseVideoMixer
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_lead_pin(ipin : Int32) : HRESULT
    @lpVtbl.value.set_lead_pin.unsafe_as(Proc(Int32, HRESULT)).call(ipin)
  end
  def get_lead_pin(pipin : Int32*) : HRESULT
    @lpVtbl.value.get_lead_pin.unsafe_as(Proc(Int32*, HRESULT)).call(pipin)
  end
  def get_input_pin_count(pipincount : Int32*) : HRESULT
    @lpVtbl.value.get_input_pin_count.unsafe_as(Proc(Int32*, HRESULT)).call(pipincount)
  end
  def is_using_clock(pbvalue : Int32*) : HRESULT
    @lpVtbl.value.is_using_clock.unsafe_as(Proc(Int32*, HRESULT)).call(pbvalue)
  end
  def set_using_clock(bvalue : Int32) : HRESULT
    @lpVtbl.value.set_using_clock.unsafe_as(Proc(Int32, HRESULT)).call(bvalue)
  end
  def get_clock_period(pbvalue : Int32*) : HRESULT
    @lpVtbl.value.get_clock_period.unsafe_as(Proc(Int32*, HRESULT)).call(pbvalue)
  end
  def set_clock_period(bvalue : Int32) : HRESULT
    @lpVtbl.value.set_clock_period.unsafe_as(Proc(Int32, HRESULT)).call(bvalue)
  end
end
struct LibWin32::IDMOWrapperFilter
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def init(clsiddmo : Guid*, catdmo : Guid*) : HRESULT
    @lpVtbl.value.init.unsafe_as(Proc(Guid*, Guid*, HRESULT)).call(clsiddmo, catdmo)
  end
end
struct LibWin32::IMixerOCXNotify
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def on_invalidate_rect(lpcrect : RECT*) : HRESULT
    @lpVtbl.value.on_invalidate_rect.unsafe_as(Proc(RECT*, HRESULT)).call(lpcrect)
  end
  def on_status_change(ulstatusflags : UInt32) : HRESULT
    @lpVtbl.value.on_status_change.unsafe_as(Proc(UInt32, HRESULT)).call(ulstatusflags)
  end
  def on_data_change(uldataflags : UInt32) : HRESULT
    @lpVtbl.value.on_data_change.unsafe_as(Proc(UInt32, HRESULT)).call(uldataflags)
  end
end
struct LibWin32::IMixerOCX
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def on_display_change(ulbitsperpixel : UInt32, ulscreenwidth : UInt32, ulscreenheight : UInt32) : HRESULT
    @lpVtbl.value.on_display_change.unsafe_as(Proc(UInt32, UInt32, UInt32, HRESULT)).call(ulbitsperpixel, ulscreenwidth, ulscreenheight)
  end
  def get_aspect_ratio(pdwpictaspectratiox : UInt32*, pdwpictaspectratioy : UInt32*) : HRESULT
    @lpVtbl.value.get_aspect_ratio.unsafe_as(Proc(UInt32*, UInt32*, HRESULT)).call(pdwpictaspectratiox, pdwpictaspectratioy)
  end
  def get_video_size(pdwvideowidth : UInt32*, pdwvideoheight : UInt32*) : HRESULT
    @lpVtbl.value.get_video_size.unsafe_as(Proc(UInt32*, UInt32*, HRESULT)).call(pdwvideowidth, pdwvideoheight)
  end
  def get_status(pdwstatus : UInt32**) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(UInt32**, HRESULT)).call(pdwstatus)
  end
  def on_draw(hdcdraw : HDC, prcdraw : RECT*) : HRESULT
    @lpVtbl.value.on_draw.unsafe_as(Proc(HDC, RECT*, HRESULT)).call(hdcdraw, prcdraw)
  end
  def set_draw_region(lppttopleftsc : POINT*, prcdrawcc : RECT*, lprcclip : RECT*) : HRESULT
    @lpVtbl.value.set_draw_region.unsafe_as(Proc(POINT*, RECT*, RECT*, HRESULT)).call(lppttopleftsc, prcdrawcc, lprcclip)
  end
  def advise(pmdns : IMixerOCXNotify) : HRESULT
    @lpVtbl.value.advise.unsafe_as(Proc(IMixerOCXNotify, HRESULT)).call(pmdns)
  end
  def un_advise : HRESULT
    @lpVtbl.value.un_advise.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IMixerPinConfig
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_relative_position(dwleft : UInt32, dwtop : UInt32, dwright : UInt32, dwbottom : UInt32) : HRESULT
    @lpVtbl.value.set_relative_position.unsafe_as(Proc(UInt32, UInt32, UInt32, UInt32, HRESULT)).call(dwleft, dwtop, dwright, dwbottom)
  end
  def get_relative_position(pdwleft : UInt32*, pdwtop : UInt32*, pdwright : UInt32*, pdwbottom : UInt32*) : HRESULT
    @lpVtbl.value.get_relative_position.unsafe_as(Proc(UInt32*, UInt32*, UInt32*, UInt32*, HRESULT)).call(pdwleft, pdwtop, pdwright, pdwbottom)
  end
  def set_z_order(dwzorder : UInt32) : HRESULT
    @lpVtbl.value.set_z_order.unsafe_as(Proc(UInt32, HRESULT)).call(dwzorder)
  end
  def get_z_order(pdwzorder : UInt32*) : HRESULT
    @lpVtbl.value.get_z_order.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwzorder)
  end
  def set_color_key(pcolorkey : COLORKEY*) : HRESULT
    @lpVtbl.value.set_color_key.unsafe_as(Proc(COLORKEY*, HRESULT)).call(pcolorkey)
  end
  def get_color_key(pcolorkey : COLORKEY*, pcolor : UInt32*) : HRESULT
    @lpVtbl.value.get_color_key.unsafe_as(Proc(COLORKEY*, UInt32*, HRESULT)).call(pcolorkey, pcolor)
  end
  def set_blending_parameter(dwblendingparameter : UInt32) : HRESULT
    @lpVtbl.value.set_blending_parameter.unsafe_as(Proc(UInt32, HRESULT)).call(dwblendingparameter)
  end
  def get_blending_parameter(pdwblendingparameter : UInt32*) : HRESULT
    @lpVtbl.value.get_blending_parameter.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwblendingparameter)
  end
  def set_aspect_ratio_mode(amaspectratiomode : AM_ASPECT_RATIO_MODE) : HRESULT
    @lpVtbl.value.set_aspect_ratio_mode.unsafe_as(Proc(AM_ASPECT_RATIO_MODE, HRESULT)).call(amaspectratiomode)
  end
  def get_aspect_ratio_mode(pamaspectratiomode : AM_ASPECT_RATIO_MODE*) : HRESULT
    @lpVtbl.value.get_aspect_ratio_mode.unsafe_as(Proc(AM_ASPECT_RATIO_MODE*, HRESULT)).call(pamaspectratiomode)
  end
  def set_stream_transparent(bstreamtransparent : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_stream_transparent.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(bstreamtransparent)
  end
  def get_stream_transparent(pbstreamtransparent : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_stream_transparent.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pbstreamtransparent)
  end
end
struct LibWin32::IMixerPinConfig2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_relative_position(dwleft : UInt32, dwtop : UInt32, dwright : UInt32, dwbottom : UInt32) : HRESULT
    @lpVtbl.value.set_relative_position.unsafe_as(Proc(UInt32, UInt32, UInt32, UInt32, HRESULT)).call(dwleft, dwtop, dwright, dwbottom)
  end
  def get_relative_position(pdwleft : UInt32*, pdwtop : UInt32*, pdwright : UInt32*, pdwbottom : UInt32*) : HRESULT
    @lpVtbl.value.get_relative_position.unsafe_as(Proc(UInt32*, UInt32*, UInt32*, UInt32*, HRESULT)).call(pdwleft, pdwtop, pdwright, pdwbottom)
  end
  def set_z_order(dwzorder : UInt32) : HRESULT
    @lpVtbl.value.set_z_order.unsafe_as(Proc(UInt32, HRESULT)).call(dwzorder)
  end
  def get_z_order(pdwzorder : UInt32*) : HRESULT
    @lpVtbl.value.get_z_order.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwzorder)
  end
  def set_color_key(pcolorkey : COLORKEY*) : HRESULT
    @lpVtbl.value.set_color_key.unsafe_as(Proc(COLORKEY*, HRESULT)).call(pcolorkey)
  end
  def get_color_key(pcolorkey : COLORKEY*, pcolor : UInt32*) : HRESULT
    @lpVtbl.value.get_color_key.unsafe_as(Proc(COLORKEY*, UInt32*, HRESULT)).call(pcolorkey, pcolor)
  end
  def set_blending_parameter(dwblendingparameter : UInt32) : HRESULT
    @lpVtbl.value.set_blending_parameter.unsafe_as(Proc(UInt32, HRESULT)).call(dwblendingparameter)
  end
  def get_blending_parameter(pdwblendingparameter : UInt32*) : HRESULT
    @lpVtbl.value.get_blending_parameter.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwblendingparameter)
  end
  def set_aspect_ratio_mode(amaspectratiomode : AM_ASPECT_RATIO_MODE) : HRESULT
    @lpVtbl.value.set_aspect_ratio_mode.unsafe_as(Proc(AM_ASPECT_RATIO_MODE, HRESULT)).call(amaspectratiomode)
  end
  def get_aspect_ratio_mode(pamaspectratiomode : AM_ASPECT_RATIO_MODE*) : HRESULT
    @lpVtbl.value.get_aspect_ratio_mode.unsafe_as(Proc(AM_ASPECT_RATIO_MODE*, HRESULT)).call(pamaspectratiomode)
  end
  def set_stream_transparent(bstreamtransparent : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_stream_transparent.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(bstreamtransparent)
  end
  def get_stream_transparent(pbstreamtransparent : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_stream_transparent.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pbstreamtransparent)
  end
  def set_overlay_surface_color_controls(pcolorcontrol : DDCOLORCONTROL*) : HRESULT
    @lpVtbl.value.set_overlay_surface_color_controls.unsafe_as(Proc(DDCOLORCONTROL*, HRESULT)).call(pcolorcontrol)
  end
  def get_overlay_surface_color_controls(pcolorcontrol : DDCOLORCONTROL*) : HRESULT
    @lpVtbl.value.get_overlay_surface_color_controls.unsafe_as(Proc(DDCOLORCONTROL*, HRESULT)).call(pcolorcontrol)
  end
end
struct LibWin32::IMpegAudioDecoder
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_frequency_divider(pdivider : UInt32*) : HRESULT
    @lpVtbl.value.get_frequency_divider.unsafe_as(Proc(UInt32*, HRESULT)).call(pdivider)
  end
  def put_frequency_divider(divider : UInt32) : HRESULT
    @lpVtbl.value.put_frequency_divider.unsafe_as(Proc(UInt32, HRESULT)).call(divider)
  end
  def get_decoder_accuracy(paccuracy : UInt32*) : HRESULT
    @lpVtbl.value.get_decoder_accuracy.unsafe_as(Proc(UInt32*, HRESULT)).call(paccuracy)
  end
  def put_decoder_accuracy(accuracy : UInt32) : HRESULT
    @lpVtbl.value.put_decoder_accuracy.unsafe_as(Proc(UInt32, HRESULT)).call(accuracy)
  end
  def get_stereo(pstereo : UInt32*) : HRESULT
    @lpVtbl.value.get_stereo.unsafe_as(Proc(UInt32*, HRESULT)).call(pstereo)
  end
  def put_stereo(stereo : UInt32) : HRESULT
    @lpVtbl.value.put_stereo.unsafe_as(Proc(UInt32, HRESULT)).call(stereo)
  end
  def get_decoder_word_size(pwordsize : UInt32*) : HRESULT
    @lpVtbl.value.get_decoder_word_size.unsafe_as(Proc(UInt32*, HRESULT)).call(pwordsize)
  end
  def put_decoder_word_size(wordsize : UInt32) : HRESULT
    @lpVtbl.value.put_decoder_word_size.unsafe_as(Proc(UInt32, HRESULT)).call(wordsize)
  end
  def get_integer_decode(pintdecode : UInt32*) : HRESULT
    @lpVtbl.value.get_integer_decode.unsafe_as(Proc(UInt32*, HRESULT)).call(pintdecode)
  end
  def put_integer_decode(intdecode : UInt32) : HRESULT
    @lpVtbl.value.put_integer_decode.unsafe_as(Proc(UInt32, HRESULT)).call(intdecode)
  end
  def get_dual_mode(pintdecode : UInt32*) : HRESULT
    @lpVtbl.value.get_dual_mode.unsafe_as(Proc(UInt32*, HRESULT)).call(pintdecode)
  end
  def put_dual_mode(intdecode : UInt32) : HRESULT
    @lpVtbl.value.put_dual_mode.unsafe_as(Proc(UInt32, HRESULT)).call(intdecode)
  end
  def get_audio_format(lpfmt : MPEG1WAVEFORMAT*) : HRESULT
    @lpVtbl.value.get_audio_format.unsafe_as(Proc(MPEG1WAVEFORMAT*, HRESULT)).call(lpfmt)
  end
end
struct LibWin32::IVMRImagePresenter9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def start_presenting(dwuserid : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.start_presenting.unsafe_as(Proc(LibC::UINT_PTR, HRESULT)).call(dwuserid)
  end
  def stop_presenting(dwuserid : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.stop_presenting.unsafe_as(Proc(LibC::UINT_PTR, HRESULT)).call(dwuserid)
  end
  def present_image(dwuserid : LibC::UINT_PTR, lppresinfo : VMR9PresentationInfo*) : HRESULT
    @lpVtbl.value.present_image.unsafe_as(Proc(LibC::UINT_PTR, VMR9PresentationInfo*, HRESULT)).call(dwuserid, lppresinfo)
  end
end
struct LibWin32::IVMRSurfaceAllocator9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize_device(dwuserid : LibC::UINT_PTR, lpallocinfo : VMR9AllocationInfo*, lpnumbuffers : UInt32*) : HRESULT
    @lpVtbl.value.initialize_device.unsafe_as(Proc(LibC::UINT_PTR, VMR9AllocationInfo*, UInt32*, HRESULT)).call(dwuserid, lpallocinfo, lpnumbuffers)
  end
  def terminate_device(dwid : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.terminate_device.unsafe_as(Proc(LibC::UINT_PTR, HRESULT)).call(dwid)
  end
  def get_surface(dwuserid : LibC::UINT_PTR, surfaceindex : UInt32, surfaceflags : UInt32, lplpsurface : IDirect3DSurface9*) : HRESULT
    @lpVtbl.value.get_surface.unsafe_as(Proc(LibC::UINT_PTR, UInt32, UInt32, IDirect3DSurface9*, HRESULT)).call(dwuserid, surfaceindex, surfaceflags, lplpsurface)
  end
  def advise_notify(lpivmrsurfallocnotify : IVMRSurfaceAllocatorNotify9) : HRESULT
    @lpVtbl.value.advise_notify.unsafe_as(Proc(IVMRSurfaceAllocatorNotify9, HRESULT)).call(lpivmrsurfallocnotify)
  end
end
struct LibWin32::IVMRSurfaceAllocatorEx9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize_device(dwuserid : LibC::UINT_PTR, lpallocinfo : VMR9AllocationInfo*, lpnumbuffers : UInt32*) : HRESULT
    @lpVtbl.value.initialize_device.unsafe_as(Proc(LibC::UINT_PTR, VMR9AllocationInfo*, UInt32*, HRESULT)).call(dwuserid, lpallocinfo, lpnumbuffers)
  end
  def terminate_device(dwid : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.terminate_device.unsafe_as(Proc(LibC::UINT_PTR, HRESULT)).call(dwid)
  end
  def get_surface(dwuserid : LibC::UINT_PTR, surfaceindex : UInt32, surfaceflags : UInt32, lplpsurface : IDirect3DSurface9*) : HRESULT
    @lpVtbl.value.get_surface.unsafe_as(Proc(LibC::UINT_PTR, UInt32, UInt32, IDirect3DSurface9*, HRESULT)).call(dwuserid, surfaceindex, surfaceflags, lplpsurface)
  end
  def advise_notify(lpivmrsurfallocnotify : IVMRSurfaceAllocatorNotify9) : HRESULT
    @lpVtbl.value.advise_notify.unsafe_as(Proc(IVMRSurfaceAllocatorNotify9, HRESULT)).call(lpivmrsurfallocnotify)
  end
  def get_surface_ex(dwuserid : LibC::UINT_PTR, surfaceindex : UInt32, surfaceflags : UInt32, lplpsurface : IDirect3DSurface9*, lprcdst : RECT*) : HRESULT
    @lpVtbl.value.get_surface_ex.unsafe_as(Proc(LibC::UINT_PTR, UInt32, UInt32, IDirect3DSurface9*, RECT*, HRESULT)).call(dwuserid, surfaceindex, surfaceflags, lplpsurface, lprcdst)
  end
end
struct LibWin32::IVMRSurfaceAllocatorNotify9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def advise_surface_allocator(dwuserid : LibC::UINT_PTR, lpivrmsurfaceallocator : IVMRSurfaceAllocator9) : HRESULT
    @lpVtbl.value.advise_surface_allocator.unsafe_as(Proc(LibC::UINT_PTR, IVMRSurfaceAllocator9, HRESULT)).call(dwuserid, lpivrmsurfaceallocator)
  end
  def set_d3_d_device(lpd3ddevice : IDirect3DDevice9, hmonitor : HMONITOR) : HRESULT
    @lpVtbl.value.set_d3_d_device.unsafe_as(Proc(IDirect3DDevice9, HMONITOR, HRESULT)).call(lpd3ddevice, hmonitor)
  end
  def change_d3_d_device(lpd3ddevice : IDirect3DDevice9, hmonitor : HMONITOR) : HRESULT
    @lpVtbl.value.change_d3_d_device.unsafe_as(Proc(IDirect3DDevice9, HMONITOR, HRESULT)).call(lpd3ddevice, hmonitor)
  end
  def allocate_surface_helper(lpallocinfo : VMR9AllocationInfo*, lpnumbuffers : UInt32*, lplpsurface : IDirect3DSurface9*) : HRESULT
    @lpVtbl.value.allocate_surface_helper.unsafe_as(Proc(VMR9AllocationInfo*, UInt32*, IDirect3DSurface9*, HRESULT)).call(lpallocinfo, lpnumbuffers, lplpsurface)
  end
  def notify_event(eventcode : Int32, param1 : LibC::IntPtrT, param2 : LibC::IntPtrT) : HRESULT
    @lpVtbl.value.notify_event.unsafe_as(Proc(Int32, LibC::IntPtrT, LibC::IntPtrT, HRESULT)).call(eventcode, param1, param2)
  end
end
struct LibWin32::IVMRWindowlessControl9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_native_video_size(lpwidth : Int32*, lpheight : Int32*, lparwidth : Int32*, lparheight : Int32*) : HRESULT
    @lpVtbl.value.get_native_video_size.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, HRESULT)).call(lpwidth, lpheight, lparwidth, lparheight)
  end
  def get_min_ideal_video_size(lpwidth : Int32*, lpheight : Int32*) : HRESULT
    @lpVtbl.value.get_min_ideal_video_size.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(lpwidth, lpheight)
  end
  def get_max_ideal_video_size(lpwidth : Int32*, lpheight : Int32*) : HRESULT
    @lpVtbl.value.get_max_ideal_video_size.unsafe_as(Proc(Int32*, Int32*, HRESULT)).call(lpwidth, lpheight)
  end
  def set_video_position(lpsrcrect : RECT*, lpdstrect : RECT*) : HRESULT
    @lpVtbl.value.set_video_position.unsafe_as(Proc(RECT*, RECT*, HRESULT)).call(lpsrcrect, lpdstrect)
  end
  def get_video_position(lpsrcrect : RECT*, lpdstrect : RECT*) : HRESULT
    @lpVtbl.value.get_video_position.unsafe_as(Proc(RECT*, RECT*, HRESULT)).call(lpsrcrect, lpdstrect)
  end
  def get_aspect_ratio_mode(lpaspectratiomode : UInt32*) : HRESULT
    @lpVtbl.value.get_aspect_ratio_mode.unsafe_as(Proc(UInt32*, HRESULT)).call(lpaspectratiomode)
  end
  def set_aspect_ratio_mode(aspectratiomode : UInt32) : HRESULT
    @lpVtbl.value.set_aspect_ratio_mode.unsafe_as(Proc(UInt32, HRESULT)).call(aspectratiomode)
  end
  def set_video_clipping_window(hwnd : LibC::HANDLE) : HRESULT
    @lpVtbl.value.set_video_clipping_window.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hwnd)
  end
  def repaint_video(hwnd : LibC::HANDLE, hdc : HDC) : HRESULT
    @lpVtbl.value.repaint_video.unsafe_as(Proc(LibC::HANDLE, HDC, HRESULT)).call(hwnd, hdc)
  end
  def display_mode_changed : HRESULT
    @lpVtbl.value.display_mode_changed.unsafe_as(Proc(HRESULT)).call
  end
  def get_current_image(lpdib : UInt8**) : HRESULT
    @lpVtbl.value.get_current_image.unsafe_as(Proc(UInt8**, HRESULT)).call(lpdib)
  end
  def set_border_color(clr : UInt32) : HRESULT
    @lpVtbl.value.set_border_color.unsafe_as(Proc(UInt32, HRESULT)).call(clr)
  end
  def get_border_color(lpclr : UInt32*) : HRESULT
    @lpVtbl.value.get_border_color.unsafe_as(Proc(UInt32*, HRESULT)).call(lpclr)
  end
end
struct LibWin32::IVMRMixerControl9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_alpha(dwstreamid : UInt32, alpha : Float32) : HRESULT
    @lpVtbl.value.set_alpha.unsafe_as(Proc(UInt32, Float32, HRESULT)).call(dwstreamid, alpha)
  end
  def get_alpha(dwstreamid : UInt32, palpha : Float32*) : HRESULT
    @lpVtbl.value.get_alpha.unsafe_as(Proc(UInt32, Float32*, HRESULT)).call(dwstreamid, palpha)
  end
  def set_z_order(dwstreamid : UInt32, dwz : UInt32) : HRESULT
    @lpVtbl.value.set_z_order.unsafe_as(Proc(UInt32, UInt32, HRESULT)).call(dwstreamid, dwz)
  end
  def get_z_order(dwstreamid : UInt32, pz : UInt32*) : HRESULT
    @lpVtbl.value.get_z_order.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(dwstreamid, pz)
  end
  def set_output_rect(dwstreamid : UInt32, prect : VMR9NormalizedRect*) : HRESULT
    @lpVtbl.value.set_output_rect.unsafe_as(Proc(UInt32, VMR9NormalizedRect*, HRESULT)).call(dwstreamid, prect)
  end
  def get_output_rect(dwstreamid : UInt32, prect : VMR9NormalizedRect*) : HRESULT
    @lpVtbl.value.get_output_rect.unsafe_as(Proc(UInt32, VMR9NormalizedRect*, HRESULT)).call(dwstreamid, prect)
  end
  def set_background_clr(clrbkg : UInt32) : HRESULT
    @lpVtbl.value.set_background_clr.unsafe_as(Proc(UInt32, HRESULT)).call(clrbkg)
  end
  def get_background_clr(lpclrbkg : UInt32*) : HRESULT
    @lpVtbl.value.get_background_clr.unsafe_as(Proc(UInt32*, HRESULT)).call(lpclrbkg)
  end
  def set_mixing_prefs(dwmixerprefs : UInt32) : HRESULT
    @lpVtbl.value.set_mixing_prefs.unsafe_as(Proc(UInt32, HRESULT)).call(dwmixerprefs)
  end
  def get_mixing_prefs(pdwmixerprefs : UInt32*) : HRESULT
    @lpVtbl.value.get_mixing_prefs.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwmixerprefs)
  end
  def set_proc_amp_control(dwstreamid : UInt32, lpclrcontrol : VMR9ProcAmpControl*) : HRESULT
    @lpVtbl.value.set_proc_amp_control.unsafe_as(Proc(UInt32, VMR9ProcAmpControl*, HRESULT)).call(dwstreamid, lpclrcontrol)
  end
  def get_proc_amp_control(dwstreamid : UInt32, lpclrcontrol : VMR9ProcAmpControl*) : HRESULT
    @lpVtbl.value.get_proc_amp_control.unsafe_as(Proc(UInt32, VMR9ProcAmpControl*, HRESULT)).call(dwstreamid, lpclrcontrol)
  end
  def get_proc_amp_control_range(dwstreamid : UInt32, lpclrcontrol : VMR9ProcAmpControlRange*) : HRESULT
    @lpVtbl.value.get_proc_amp_control_range.unsafe_as(Proc(UInt32, VMR9ProcAmpControlRange*, HRESULT)).call(dwstreamid, lpclrcontrol)
  end
end
struct LibWin32::IVMRMixerBitmap9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_alpha_bitmap(pbmpparms : VMR9AlphaBitmap*) : HRESULT
    @lpVtbl.value.set_alpha_bitmap.unsafe_as(Proc(VMR9AlphaBitmap*, HRESULT)).call(pbmpparms)
  end
  def update_alpha_bitmap_parameters(pbmpparms : VMR9AlphaBitmap*) : HRESULT
    @lpVtbl.value.update_alpha_bitmap_parameters.unsafe_as(Proc(VMR9AlphaBitmap*, HRESULT)).call(pbmpparms)
  end
  def get_alpha_bitmap_parameters(pbmpparms : VMR9AlphaBitmap*) : HRESULT
    @lpVtbl.value.get_alpha_bitmap_parameters.unsafe_as(Proc(VMR9AlphaBitmap*, HRESULT)).call(pbmpparms)
  end
end
struct LibWin32::IVMRSurface9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def is_surface_locked : HRESULT
    @lpVtbl.value.is_surface_locked.unsafe_as(Proc(HRESULT)).call
  end
  def lock_surface(lpsurface : UInt8**) : HRESULT
    @lpVtbl.value.lock_surface.unsafe_as(Proc(UInt8**, HRESULT)).call(lpsurface)
  end
  def unlock_surface : HRESULT
    @lpVtbl.value.unlock_surface.unsafe_as(Proc(HRESULT)).call
  end
  def get_surface(lplpsurface : IDirect3DSurface9*) : HRESULT
    @lpVtbl.value.get_surface.unsafe_as(Proc(IDirect3DSurface9*, HRESULT)).call(lplpsurface)
  end
end
struct LibWin32::IVMRImagePresenterConfig9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_rendering_prefs(dwrenderflags : UInt32) : HRESULT
    @lpVtbl.value.set_rendering_prefs.unsafe_as(Proc(UInt32, HRESULT)).call(dwrenderflags)
  end
  def get_rendering_prefs(dwrenderflags : UInt32*) : HRESULT
    @lpVtbl.value.get_rendering_prefs.unsafe_as(Proc(UInt32*, HRESULT)).call(dwrenderflags)
  end
end
struct LibWin32::IVMRVideoStreamControl9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_stream_active_state(factive : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_stream_active_state.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(factive)
  end
  def get_stream_active_state(lpfactive : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_stream_active_state.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(lpfactive)
  end
end
struct LibWin32::IVMRFilterConfig9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_image_compositor(lpvmrimgcompositor : IVMRImageCompositor9) : HRESULT
    @lpVtbl.value.set_image_compositor.unsafe_as(Proc(IVMRImageCompositor9, HRESULT)).call(lpvmrimgcompositor)
  end
  def set_number_of_streams(dwmaxstreams : UInt32) : HRESULT
    @lpVtbl.value.set_number_of_streams.unsafe_as(Proc(UInt32, HRESULT)).call(dwmaxstreams)
  end
  def get_number_of_streams(pdwmaxstreams : UInt32*) : HRESULT
    @lpVtbl.value.get_number_of_streams.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwmaxstreams)
  end
  def set_rendering_prefs(dwrenderflags : UInt32) : HRESULT
    @lpVtbl.value.set_rendering_prefs.unsafe_as(Proc(UInt32, HRESULT)).call(dwrenderflags)
  end
  def get_rendering_prefs(pdwrenderflags : UInt32*) : HRESULT
    @lpVtbl.value.get_rendering_prefs.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwrenderflags)
  end
  def set_rendering_mode(mode : UInt32) : HRESULT
    @lpVtbl.value.set_rendering_mode.unsafe_as(Proc(UInt32, HRESULT)).call(mode)
  end
  def get_rendering_mode(pmode : UInt32*) : HRESULT
    @lpVtbl.value.get_rendering_mode.unsafe_as(Proc(UInt32*, HRESULT)).call(pmode)
  end
end
struct LibWin32::IVMRAspectRatioControl9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_aspect_ratio_mode(lpdwarmode : UInt32*) : HRESULT
    @lpVtbl.value.get_aspect_ratio_mode.unsafe_as(Proc(UInt32*, HRESULT)).call(lpdwarmode)
  end
  def set_aspect_ratio_mode(dwarmode : UInt32) : HRESULT
    @lpVtbl.value.set_aspect_ratio_mode.unsafe_as(Proc(UInt32, HRESULT)).call(dwarmode)
  end
end
struct LibWin32::IVMRMonitorConfig9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_monitor(udev : UInt32) : HRESULT
    @lpVtbl.value.set_monitor.unsafe_as(Proc(UInt32, HRESULT)).call(udev)
  end
  def get_monitor(pudev : UInt32*) : HRESULT
    @lpVtbl.value.get_monitor.unsafe_as(Proc(UInt32*, HRESULT)).call(pudev)
  end
  def set_default_monitor(udev : UInt32) : HRESULT
    @lpVtbl.value.set_default_monitor.unsafe_as(Proc(UInt32, HRESULT)).call(udev)
  end
  def get_default_monitor(pudev : UInt32*) : HRESULT
    @lpVtbl.value.get_default_monitor.unsafe_as(Proc(UInt32*, HRESULT)).call(pudev)
  end
  def get_available_monitors(pinfo : VMR9MonitorInfo*, dwmaxinfoarraysize : UInt32, pdwnumdevices : UInt32*) : HRESULT
    @lpVtbl.value.get_available_monitors.unsafe_as(Proc(VMR9MonitorInfo*, UInt32, UInt32*, HRESULT)).call(pinfo, dwmaxinfoarraysize, pdwnumdevices)
  end
end
struct LibWin32::IVMRDeinterlaceControl9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_number_of_deinterlace_modes(lpvideodescription : VMR9VideoDesc*, lpdwnumdeinterlacemodes : UInt32*, lpdeinterlacemodes : Guid*) : HRESULT
    @lpVtbl.value.get_number_of_deinterlace_modes.unsafe_as(Proc(VMR9VideoDesc*, UInt32*, Guid*, HRESULT)).call(lpvideodescription, lpdwnumdeinterlacemodes, lpdeinterlacemodes)
  end
  def get_deinterlace_mode_caps(lpdeinterlacemode : Guid*, lpvideodescription : VMR9VideoDesc*, lpdeinterlacecaps : VMR9DeinterlaceCaps*) : HRESULT
    @lpVtbl.value.get_deinterlace_mode_caps.unsafe_as(Proc(Guid*, VMR9VideoDesc*, VMR9DeinterlaceCaps*, HRESULT)).call(lpdeinterlacemode, lpvideodescription, lpdeinterlacecaps)
  end
  def get_deinterlace_mode(dwstreamid : UInt32, lpdeinterlacemode : Guid*) : HRESULT
    @lpVtbl.value.get_deinterlace_mode.unsafe_as(Proc(UInt32, Guid*, HRESULT)).call(dwstreamid, lpdeinterlacemode)
  end
  def set_deinterlace_mode(dwstreamid : UInt32, lpdeinterlacemode : Guid*) : HRESULT
    @lpVtbl.value.set_deinterlace_mode.unsafe_as(Proc(UInt32, Guid*, HRESULT)).call(dwstreamid, lpdeinterlacemode)
  end
  def get_deinterlace_prefs(lpdwdeinterlaceprefs : UInt32*) : HRESULT
    @lpVtbl.value.get_deinterlace_prefs.unsafe_as(Proc(UInt32*, HRESULT)).call(lpdwdeinterlaceprefs)
  end
  def set_deinterlace_prefs(dwdeinterlaceprefs : UInt32) : HRESULT
    @lpVtbl.value.set_deinterlace_prefs.unsafe_as(Proc(UInt32, HRESULT)).call(dwdeinterlaceprefs)
  end
  def get_actual_deinterlace_mode(dwstreamid : UInt32, lpdeinterlacemode : Guid*) : HRESULT
    @lpVtbl.value.get_actual_deinterlace_mode.unsafe_as(Proc(UInt32, Guid*, HRESULT)).call(dwstreamid, lpdeinterlacemode)
  end
end
struct LibWin32::IVMRImageCompositor9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def init_composition_device(pd3ddevice : IUnknown) : HRESULT
    @lpVtbl.value.init_composition_device.unsafe_as(Proc(IUnknown, HRESULT)).call(pd3ddevice)
  end
  def term_composition_device(pd3ddevice : IUnknown) : HRESULT
    @lpVtbl.value.term_composition_device.unsafe_as(Proc(IUnknown, HRESULT)).call(pd3ddevice)
  end
  def set_stream_media_type(dwstrmid : UInt32, pmt : AM_MEDIA_TYPE*, ftexture : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_stream_media_type.unsafe_as(Proc(UInt32, AM_MEDIA_TYPE*, LibC::BOOL, HRESULT)).call(dwstrmid, pmt, ftexture)
  end
  def composite_image(pd3ddevice : IUnknown, pddsrendertarget : IDirect3DSurface9, pmtrendertarget : AM_MEDIA_TYPE*, rtstart : Int64, rtend : Int64, dwclrbkgnd : UInt32, pvideostreaminfo : VMR9VideoStreamInfo*, cstreams : UInt32) : HRESULT
    @lpVtbl.value.composite_image.unsafe_as(Proc(IUnknown, IDirect3DSurface9, AM_MEDIA_TYPE*, Int64, Int64, UInt32, VMR9VideoStreamInfo*, UInt32, HRESULT)).call(pd3ddevice, pddsrendertarget, pmtrendertarget, rtstart, rtend, dwclrbkgnd, pvideostreaminfo, cstreams)
  end
end
struct LibWin32::IVPBaseConfig
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_connect_info(pdwnumconnectinfo : UInt32*, pddvpconnectinfo : DDVIDEOPORTCONNECT*) : HRESULT
    @lpVtbl.value.get_connect_info.unsafe_as(Proc(UInt32*, DDVIDEOPORTCONNECT*, HRESULT)).call(pdwnumconnectinfo, pddvpconnectinfo)
  end
  def set_connect_info(dwchosenentry : UInt32) : HRESULT
    @lpVtbl.value.set_connect_info.unsafe_as(Proc(UInt32, HRESULT)).call(dwchosenentry)
  end
  def get_vp_data_info(pamvpdatainfo : AMVPDATAINFO*) : HRESULT
    @lpVtbl.value.get_vp_data_info.unsafe_as(Proc(AMVPDATAINFO*, HRESULT)).call(pamvpdatainfo)
  end
  def get_max_pixel_rate(pamvpsize : AMVPSIZE*, pdwmaxpixelspersecond : UInt32*) : HRESULT
    @lpVtbl.value.get_max_pixel_rate.unsafe_as(Proc(AMVPSIZE*, UInt32*, HRESULT)).call(pamvpsize, pdwmaxpixelspersecond)
  end
  def inform_vp_input_formats(dwnumformats : UInt32, pddpixelformats : DDPIXELFORMAT*) : HRESULT
    @lpVtbl.value.inform_vp_input_formats.unsafe_as(Proc(UInt32, DDPIXELFORMAT*, HRESULT)).call(dwnumformats, pddpixelformats)
  end
  def get_video_formats(pdwnumformats : UInt32*, pddpixelformats : DDPIXELFORMAT*) : HRESULT
    @lpVtbl.value.get_video_formats.unsafe_as(Proc(UInt32*, DDPIXELFORMAT*, HRESULT)).call(pdwnumformats, pddpixelformats)
  end
  def set_video_format(dwchosenentry : UInt32) : HRESULT
    @lpVtbl.value.set_video_format.unsafe_as(Proc(UInt32, HRESULT)).call(dwchosenentry)
  end
  def set_invert_polarity : HRESULT
    @lpVtbl.value.set_invert_polarity.unsafe_as(Proc(HRESULT)).call
  end
  def get_overlay_surface(ppddoverlaysurface : IDirectDrawSurface*) : HRESULT
    @lpVtbl.value.get_overlay_surface.unsafe_as(Proc(IDirectDrawSurface*, HRESULT)).call(ppddoverlaysurface)
  end
  def set_direct_draw_kernel_handle(dwddkernelhandle : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.set_direct_draw_kernel_handle.unsafe_as(Proc(LibC::UINT_PTR, HRESULT)).call(dwddkernelhandle)
  end
  def set_video_port_id(dwvideoportid : UInt32) : HRESULT
    @lpVtbl.value.set_video_port_id.unsafe_as(Proc(UInt32, HRESULT)).call(dwvideoportid)
  end
  def set_dd_surface_kernel_handles(chandles : UInt32, rgddkernelhandles : LibC::UINT_PTR*) : HRESULT
    @lpVtbl.value.set_dd_surface_kernel_handles.unsafe_as(Proc(UInt32, LibC::UINT_PTR*, HRESULT)).call(chandles, rgddkernelhandles)
  end
  def set_surface_parameters(dwpitch : UInt32, dwxorigin : UInt32, dwyorigin : UInt32) : HRESULT
    @lpVtbl.value.set_surface_parameters.unsafe_as(Proc(UInt32, UInt32, UInt32, HRESULT)).call(dwpitch, dwxorigin, dwyorigin)
  end
end
struct LibWin32::IVPConfig
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_connect_info(pdwnumconnectinfo : UInt32*, pddvpconnectinfo : DDVIDEOPORTCONNECT*) : HRESULT
    @lpVtbl.value.get_connect_info.unsafe_as(Proc(UInt32*, DDVIDEOPORTCONNECT*, HRESULT)).call(pdwnumconnectinfo, pddvpconnectinfo)
  end
  def set_connect_info(dwchosenentry : UInt32) : HRESULT
    @lpVtbl.value.set_connect_info.unsafe_as(Proc(UInt32, HRESULT)).call(dwchosenentry)
  end
  def get_vp_data_info(pamvpdatainfo : AMVPDATAINFO*) : HRESULT
    @lpVtbl.value.get_vp_data_info.unsafe_as(Proc(AMVPDATAINFO*, HRESULT)).call(pamvpdatainfo)
  end
  def get_max_pixel_rate(pamvpsize : AMVPSIZE*, pdwmaxpixelspersecond : UInt32*) : HRESULT
    @lpVtbl.value.get_max_pixel_rate.unsafe_as(Proc(AMVPSIZE*, UInt32*, HRESULT)).call(pamvpsize, pdwmaxpixelspersecond)
  end
  def inform_vp_input_formats(dwnumformats : UInt32, pddpixelformats : DDPIXELFORMAT*) : HRESULT
    @lpVtbl.value.inform_vp_input_formats.unsafe_as(Proc(UInt32, DDPIXELFORMAT*, HRESULT)).call(dwnumformats, pddpixelformats)
  end
  def get_video_formats(pdwnumformats : UInt32*, pddpixelformats : DDPIXELFORMAT*) : HRESULT
    @lpVtbl.value.get_video_formats.unsafe_as(Proc(UInt32*, DDPIXELFORMAT*, HRESULT)).call(pdwnumformats, pddpixelformats)
  end
  def set_video_format(dwchosenentry : UInt32) : HRESULT
    @lpVtbl.value.set_video_format.unsafe_as(Proc(UInt32, HRESULT)).call(dwchosenentry)
  end
  def set_invert_polarity : HRESULT
    @lpVtbl.value.set_invert_polarity.unsafe_as(Proc(HRESULT)).call
  end
  def get_overlay_surface(ppddoverlaysurface : IDirectDrawSurface*) : HRESULT
    @lpVtbl.value.get_overlay_surface.unsafe_as(Proc(IDirectDrawSurface*, HRESULT)).call(ppddoverlaysurface)
  end
  def set_direct_draw_kernel_handle(dwddkernelhandle : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.set_direct_draw_kernel_handle.unsafe_as(Proc(LibC::UINT_PTR, HRESULT)).call(dwddkernelhandle)
  end
  def set_video_port_id(dwvideoportid : UInt32) : HRESULT
    @lpVtbl.value.set_video_port_id.unsafe_as(Proc(UInt32, HRESULT)).call(dwvideoportid)
  end
  def set_dd_surface_kernel_handles(chandles : UInt32, rgddkernelhandles : LibC::UINT_PTR*) : HRESULT
    @lpVtbl.value.set_dd_surface_kernel_handles.unsafe_as(Proc(UInt32, LibC::UINT_PTR*, HRESULT)).call(chandles, rgddkernelhandles)
  end
  def set_surface_parameters(dwpitch : UInt32, dwxorigin : UInt32, dwyorigin : UInt32) : HRESULT
    @lpVtbl.value.set_surface_parameters.unsafe_as(Proc(UInt32, UInt32, UInt32, HRESULT)).call(dwpitch, dwxorigin, dwyorigin)
  end
  def is_vp_decimation_allowed(pbisdecimationallowed : Int32*) : HRESULT
    @lpVtbl.value.is_vp_decimation_allowed.unsafe_as(Proc(Int32*, HRESULT)).call(pbisdecimationallowed)
  end
  def set_scaling_factors(pamvpsize : AMVPSIZE*) : HRESULT
    @lpVtbl.value.set_scaling_factors.unsafe_as(Proc(AMVPSIZE*, HRESULT)).call(pamvpsize)
  end
end
struct LibWin32::IVPVBIConfig
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_connect_info(pdwnumconnectinfo : UInt32*, pddvpconnectinfo : DDVIDEOPORTCONNECT*) : HRESULT
    @lpVtbl.value.get_connect_info.unsafe_as(Proc(UInt32*, DDVIDEOPORTCONNECT*, HRESULT)).call(pdwnumconnectinfo, pddvpconnectinfo)
  end
  def set_connect_info(dwchosenentry : UInt32) : HRESULT
    @lpVtbl.value.set_connect_info.unsafe_as(Proc(UInt32, HRESULT)).call(dwchosenentry)
  end
  def get_vp_data_info(pamvpdatainfo : AMVPDATAINFO*) : HRESULT
    @lpVtbl.value.get_vp_data_info.unsafe_as(Proc(AMVPDATAINFO*, HRESULT)).call(pamvpdatainfo)
  end
  def get_max_pixel_rate(pamvpsize : AMVPSIZE*, pdwmaxpixelspersecond : UInt32*) : HRESULT
    @lpVtbl.value.get_max_pixel_rate.unsafe_as(Proc(AMVPSIZE*, UInt32*, HRESULT)).call(pamvpsize, pdwmaxpixelspersecond)
  end
  def inform_vp_input_formats(dwnumformats : UInt32, pddpixelformats : DDPIXELFORMAT*) : HRESULT
    @lpVtbl.value.inform_vp_input_formats.unsafe_as(Proc(UInt32, DDPIXELFORMAT*, HRESULT)).call(dwnumformats, pddpixelformats)
  end
  def get_video_formats(pdwnumformats : UInt32*, pddpixelformats : DDPIXELFORMAT*) : HRESULT
    @lpVtbl.value.get_video_formats.unsafe_as(Proc(UInt32*, DDPIXELFORMAT*, HRESULT)).call(pdwnumformats, pddpixelformats)
  end
  def set_video_format(dwchosenentry : UInt32) : HRESULT
    @lpVtbl.value.set_video_format.unsafe_as(Proc(UInt32, HRESULT)).call(dwchosenentry)
  end
  def set_invert_polarity : HRESULT
    @lpVtbl.value.set_invert_polarity.unsafe_as(Proc(HRESULT)).call
  end
  def get_overlay_surface(ppddoverlaysurface : IDirectDrawSurface*) : HRESULT
    @lpVtbl.value.get_overlay_surface.unsafe_as(Proc(IDirectDrawSurface*, HRESULT)).call(ppddoverlaysurface)
  end
  def set_direct_draw_kernel_handle(dwddkernelhandle : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.set_direct_draw_kernel_handle.unsafe_as(Proc(LibC::UINT_PTR, HRESULT)).call(dwddkernelhandle)
  end
  def set_video_port_id(dwvideoportid : UInt32) : HRESULT
    @lpVtbl.value.set_video_port_id.unsafe_as(Proc(UInt32, HRESULT)).call(dwvideoportid)
  end
  def set_dd_surface_kernel_handles(chandles : UInt32, rgddkernelhandles : LibC::UINT_PTR*) : HRESULT
    @lpVtbl.value.set_dd_surface_kernel_handles.unsafe_as(Proc(UInt32, LibC::UINT_PTR*, HRESULT)).call(chandles, rgddkernelhandles)
  end
  def set_surface_parameters(dwpitch : UInt32, dwxorigin : UInt32, dwyorigin : UInt32) : HRESULT
    @lpVtbl.value.set_surface_parameters.unsafe_as(Proc(UInt32, UInt32, UInt32, HRESULT)).call(dwpitch, dwxorigin, dwyorigin)
  end
end
struct LibWin32::IVPBaseNotify
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def renegotiate_vp_parameters : HRESULT
    @lpVtbl.value.renegotiate_vp_parameters.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IVPNotify
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def renegotiate_vp_parameters : HRESULT
    @lpVtbl.value.renegotiate_vp_parameters.unsafe_as(Proc(HRESULT)).call
  end
  def set_deinterlace_mode(mode : AMVP_MODE) : HRESULT
    @lpVtbl.value.set_deinterlace_mode.unsafe_as(Proc(AMVP_MODE, HRESULT)).call(mode)
  end
  def get_deinterlace_mode(pmode : AMVP_MODE*) : HRESULT
    @lpVtbl.value.get_deinterlace_mode.unsafe_as(Proc(AMVP_MODE*, HRESULT)).call(pmode)
  end
end
struct LibWin32::IVPNotify2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def renegotiate_vp_parameters : HRESULT
    @lpVtbl.value.renegotiate_vp_parameters.unsafe_as(Proc(HRESULT)).call
  end
  def set_deinterlace_mode(mode : AMVP_MODE) : HRESULT
    @lpVtbl.value.set_deinterlace_mode.unsafe_as(Proc(AMVP_MODE, HRESULT)).call(mode)
  end
  def get_deinterlace_mode(pmode : AMVP_MODE*) : HRESULT
    @lpVtbl.value.get_deinterlace_mode.unsafe_as(Proc(AMVP_MODE*, HRESULT)).call(pmode)
  end
  def set_vp_sync_master(bvpsyncmaster : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_vp_sync_master.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(bvpsyncmaster)
  end
  def get_vp_sync_master(pbvpsyncmaster : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_vp_sync_master.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pbvpsyncmaster)
  end
end
struct LibWin32::IVPVBINotify
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def renegotiate_vp_parameters : HRESULT
    @lpVtbl.value.renegotiate_vp_parameters.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IMediaParamInfo
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_param_count(pdwparams : UInt32*) : HRESULT
    @lpVtbl.value.get_param_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwparams)
  end
  def get_param_info(dwparamindex : UInt32, pinfo : MP_PARAMINFO*) : HRESULT
    @lpVtbl.value.get_param_info.unsafe_as(Proc(UInt32, MP_PARAMINFO*, HRESULT)).call(dwparamindex, pinfo)
  end
  def get_param_text(dwparamindex : UInt32, ppwchtext : UInt16**) : HRESULT
    @lpVtbl.value.get_param_text.unsafe_as(Proc(UInt32, UInt16**, HRESULT)).call(dwparamindex, ppwchtext)
  end
  def get_num_time_formats(pdwnumtimeformats : UInt32*) : HRESULT
    @lpVtbl.value.get_num_time_formats.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwnumtimeformats)
  end
  def get_supported_time_format(dwformatindex : UInt32, pguidtimeformat : Guid*) : HRESULT
    @lpVtbl.value.get_supported_time_format.unsafe_as(Proc(UInt32, Guid*, HRESULT)).call(dwformatindex, pguidtimeformat)
  end
  def get_current_time_format(pguidtimeformat : Guid*, ptimedata : UInt32*) : HRESULT
    @lpVtbl.value.get_current_time_format.unsafe_as(Proc(Guid*, UInt32*, HRESULT)).call(pguidtimeformat, ptimedata)
  end
end
struct LibWin32::IMediaParams
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_param(dwparamindex : UInt32, pvalue : Float32*) : HRESULT
    @lpVtbl.value.get_param.unsafe_as(Proc(UInt32, Float32*, HRESULT)).call(dwparamindex, pvalue)
  end
  def set_param(dwparamindex : UInt32, value : Float32) : HRESULT
    @lpVtbl.value.set_param.unsafe_as(Proc(UInt32, Float32, HRESULT)).call(dwparamindex, value)
  end
  def add_envelope(dwparamindex : UInt32, csegments : UInt32, penvelopesegments : MP_ENVELOPE_SEGMENT*) : HRESULT
    @lpVtbl.value.add_envelope.unsafe_as(Proc(UInt32, UInt32, MP_ENVELOPE_SEGMENT*, HRESULT)).call(dwparamindex, csegments, penvelopesegments)
  end
  def flush_envelope(dwparamindex : UInt32, reftimestart : Int64, reftimeend : Int64) : HRESULT
    @lpVtbl.value.flush_envelope.unsafe_as(Proc(UInt32, Int64, Int64, HRESULT)).call(dwparamindex, reftimestart, reftimeend)
  end
  def set_time_format(guidtimeformat : Guid, mptimedata : UInt32) : HRESULT
    @lpVtbl.value.set_time_format.unsafe_as(Proc(Guid, UInt32, HRESULT)).call(guidtimeformat, mptimedata)
  end
end
struct LibWin32::IAMPlayListItem
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_flags(pdwflags : UInt32*) : HRESULT
    @lpVtbl.value.get_flags.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwflags)
  end
  def get_source_count(pdwsources : UInt32*) : HRESULT
    @lpVtbl.value.get_source_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwsources)
  end
  def get_source_url(dwsourceindex : UInt32, pbstrurl : UInt8**) : HRESULT
    @lpVtbl.value.get_source_url.unsafe_as(Proc(UInt32, UInt8**, HRESULT)).call(dwsourceindex, pbstrurl)
  end
  def get_source_start(dwsourceindex : UInt32, prtstart : Int64*) : HRESULT
    @lpVtbl.value.get_source_start.unsafe_as(Proc(UInt32, Int64*, HRESULT)).call(dwsourceindex, prtstart)
  end
  def get_source_duration(dwsourceindex : UInt32, prtduration : Int64*) : HRESULT
    @lpVtbl.value.get_source_duration.unsafe_as(Proc(UInt32, Int64*, HRESULT)).call(dwsourceindex, prtduration)
  end
  def get_source_start_marker(dwsourceindex : UInt32, pdwmarker : UInt32*) : HRESULT
    @lpVtbl.value.get_source_start_marker.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(dwsourceindex, pdwmarker)
  end
  def get_source_end_marker(dwsourceindex : UInt32, pdwmarker : UInt32*) : HRESULT
    @lpVtbl.value.get_source_end_marker.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(dwsourceindex, pdwmarker)
  end
  def get_source_start_marker_name(dwsourceindex : UInt32, pbstrstartmarker : UInt8**) : HRESULT
    @lpVtbl.value.get_source_start_marker_name.unsafe_as(Proc(UInt32, UInt8**, HRESULT)).call(dwsourceindex, pbstrstartmarker)
  end
  def get_source_end_marker_name(dwsourceindex : UInt32, pbstrendmarker : UInt8**) : HRESULT
    @lpVtbl.value.get_source_end_marker_name.unsafe_as(Proc(UInt32, UInt8**, HRESULT)).call(dwsourceindex, pbstrendmarker)
  end
  def get_link_url(pbstrurl : UInt8**) : HRESULT
    @lpVtbl.value.get_link_url.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrurl)
  end
  def get_scan_duration(dwsourceindex : UInt32, prtscanduration : Int64*) : HRESULT
    @lpVtbl.value.get_scan_duration.unsafe_as(Proc(UInt32, Int64*, HRESULT)).call(dwsourceindex, prtscanduration)
  end
end
struct LibWin32::IAMPlayList
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_flags(pdwflags : UInt32*) : HRESULT
    @lpVtbl.value.get_flags.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwflags)
  end
  def get_item_count(pdwitems : UInt32*) : HRESULT
    @lpVtbl.value.get_item_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwitems)
  end
  def get_item(dwitemindex : UInt32, ppitem : IAMPlayListItem*) : HRESULT
    @lpVtbl.value.get_item.unsafe_as(Proc(UInt32, IAMPlayListItem*, HRESULT)).call(dwitemindex, ppitem)
  end
  def get_named_event(pwszeventname : LibC::LPWSTR, dwitemindex : UInt32, ppitem : IAMPlayListItem*, pdwflags : UInt32*) : HRESULT
    @lpVtbl.value.get_named_event.unsafe_as(Proc(LibC::LPWSTR, UInt32, IAMPlayListItem*, UInt32*, HRESULT)).call(pwszeventname, dwitemindex, ppitem, pdwflags)
  end
  def get_repeat_info(pdwrepeatcount : UInt32*, pdwrepeatstart : UInt32*, pdwrepeatend : UInt32*) : HRESULT
    @lpVtbl.value.get_repeat_info.unsafe_as(Proc(UInt32*, UInt32*, UInt32*, HRESULT)).call(pdwrepeatcount, pdwrepeatstart, pdwrepeatend)
  end
end
struct LibWin32::ISpecifyParticularPages
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_pages(guidwhatpages : Guid*, ppages : CAUUID*) : HRESULT
    @lpVtbl.value.get_pages.unsafe_as(Proc(Guid*, CAUUID*, HRESULT)).call(guidwhatpages, ppages)
  end
end
struct LibWin32::IAMRebuild
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def rebuild_now : HRESULT
    @lpVtbl.value.rebuild_now.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IBufferingTime
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_buffering_time(pdwmilliseconds : UInt32*) : HRESULT
    @lpVtbl.value.get_buffering_time.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwmilliseconds)
  end
  def set_buffering_time(dwmilliseconds : UInt32) : HRESULT
    @lpVtbl.value.set_buffering_time.unsafe_as(Proc(UInt32, HRESULT)).call(dwmilliseconds)
  end
end
struct LibWin32::ICreatePropBagOnRegKey
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def create(hkey : HKEY, subkey : LibC::LPWSTR, uloptions : UInt32, samdesired : UInt32, iid : Guid*, ppbag : Void**) : HRESULT
    @lpVtbl.value.create.unsafe_as(Proc(HKEY, LibC::LPWSTR, UInt32, UInt32, Guid*, Void**, HRESULT)).call(hkey, subkey, uloptions, samdesired, iid, ppbag)
  end
end
struct LibWin32::ITuningSpaces
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_count(count : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(count)
  end
  def get__new_enum(newenum : IEnumVARIANT*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IEnumVARIANT*, HRESULT)).call(newenum)
  end
  def get_item(varindex : VARIANT, tuningspace : ITuningSpace*) : HRESULT
    @lpVtbl.value.get_item.unsafe_as(Proc(VARIANT, ITuningSpace*, HRESULT)).call(varindex, tuningspace)
  end
  def get_enum_tuning_spaces(newenum : IEnumTuningSpaces*) : HRESULT
    @lpVtbl.value.get_enum_tuning_spaces.unsafe_as(Proc(IEnumTuningSpaces*, HRESULT)).call(newenum)
  end
end
struct LibWin32::ITuningSpaceContainer
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_count(count : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(count)
  end
  def get__new_enum(newenum : IEnumVARIANT*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IEnumVARIANT*, HRESULT)).call(newenum)
  end
  def get_item(varindex : VARIANT, tuningspace : ITuningSpace*) : HRESULT
    @lpVtbl.value.get_item.unsafe_as(Proc(VARIANT, ITuningSpace*, HRESULT)).call(varindex, tuningspace)
  end
  def put_item(varindex : VARIANT, tuningspace : ITuningSpace) : HRESULT
    @lpVtbl.value.put_item.unsafe_as(Proc(VARIANT, ITuningSpace, HRESULT)).call(varindex, tuningspace)
  end
  def tuning_spaces_for_clsid(spaceclsid : UInt8*, newcoll : ITuningSpaces*) : HRESULT
    @lpVtbl.value.tuning_spaces_for_clsid.unsafe_as(Proc(UInt8*, ITuningSpaces*, HRESULT)).call(spaceclsid, newcoll)
  end
  def _tuning_spaces_for_clsid2(spaceclsid : Guid*, newcoll : ITuningSpaces*) : HRESULT
    @lpVtbl.value._tuning_spaces_for_clsid2.unsafe_as(Proc(Guid*, ITuningSpaces*, HRESULT)).call(spaceclsid, newcoll)
  end
  def tuning_spaces_for_name(name : UInt8*, newcoll : ITuningSpaces*) : HRESULT
    @lpVtbl.value.tuning_spaces_for_name.unsafe_as(Proc(UInt8*, ITuningSpaces*, HRESULT)).call(name, newcoll)
  end
  def find_id(tuningspace : ITuningSpace, id : Int32*) : HRESULT
    @lpVtbl.value.find_id.unsafe_as(Proc(ITuningSpace, Int32*, HRESULT)).call(tuningspace, id)
  end
  def add(tuningspace : ITuningSpace, newindex : VARIANT*) : HRESULT
    @lpVtbl.value.add.unsafe_as(Proc(ITuningSpace, VARIANT*, HRESULT)).call(tuningspace, newindex)
  end
  def get_enum_tuning_spaces(ppenum : IEnumTuningSpaces*) : HRESULT
    @lpVtbl.value.get_enum_tuning_spaces.unsafe_as(Proc(IEnumTuningSpaces*, HRESULT)).call(ppenum)
  end
  def remove(index : VARIANT) : HRESULT
    @lpVtbl.value.remove.unsafe_as(Proc(VARIANT, HRESULT)).call(index)
  end
  def get_max_count(maxcount : Int32*) : HRESULT
    @lpVtbl.value.get_max_count.unsafe_as(Proc(Int32*, HRESULT)).call(maxcount)
  end
  def put_max_count(maxcount : Int32) : HRESULT
    @lpVtbl.value.put_max_count.unsafe_as(Proc(Int32, HRESULT)).call(maxcount)
  end
end
struct LibWin32::ITuningSpace
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_unique_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_unique_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def put_unique_name(name : UInt8*) : HRESULT
    @lpVtbl.value.put_unique_name.unsafe_as(Proc(UInt8*, HRESULT)).call(name)
  end
  def get_friendly_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_friendly_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def put_friendly_name(name : UInt8*) : HRESULT
    @lpVtbl.value.put_friendly_name.unsafe_as(Proc(UInt8*, HRESULT)).call(name)
  end
  def get_clsid(spaceclsid : UInt8**) : HRESULT
    @lpVtbl.value.get_clsid.unsafe_as(Proc(UInt8**, HRESULT)).call(spaceclsid)
  end
  def get_network_type(networktypeguid : UInt8**) : HRESULT
    @lpVtbl.value.get_network_type.unsafe_as(Proc(UInt8**, HRESULT)).call(networktypeguid)
  end
  def put_network_type(networktypeguid : UInt8*) : HRESULT
    @lpVtbl.value.put_network_type.unsafe_as(Proc(UInt8*, HRESULT)).call(networktypeguid)
  end
  def get__network_type(networktypeguid : Guid*) : HRESULT
    @lpVtbl.value.get__network_type.unsafe_as(Proc(Guid*, HRESULT)).call(networktypeguid)
  end
  def put__network_type(networktypeguid : Guid*) : HRESULT
    @lpVtbl.value.put__network_type.unsafe_as(Proc(Guid*, HRESULT)).call(networktypeguid)
  end
  def create_tune_request(tunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.create_tune_request.unsafe_as(Proc(ITuneRequest*, HRESULT)).call(tunerequest)
  end
  def enum_category_gui_ds(ppenum : IEnumGUID*) : HRESULT
    @lpVtbl.value.enum_category_gui_ds.unsafe_as(Proc(IEnumGUID*, HRESULT)).call(ppenum)
  end
  def enum_device_monikers(ppenum : IEnumMoniker*) : HRESULT
    @lpVtbl.value.enum_device_monikers.unsafe_as(Proc(IEnumMoniker*, HRESULT)).call(ppenum)
  end
  def get_default_preferred_component_types(componenttypes : IComponentTypes*) : HRESULT
    @lpVtbl.value.get_default_preferred_component_types.unsafe_as(Proc(IComponentTypes*, HRESULT)).call(componenttypes)
  end
  def put_default_preferred_component_types(newcomponenttypes : IComponentTypes) : HRESULT
    @lpVtbl.value.put_default_preferred_component_types.unsafe_as(Proc(IComponentTypes, HRESULT)).call(newcomponenttypes)
  end
  def get_frequency_mapping(pmapping : UInt8**) : HRESULT
    @lpVtbl.value.get_frequency_mapping.unsafe_as(Proc(UInt8**, HRESULT)).call(pmapping)
  end
  def put_frequency_mapping(mapping : UInt8*) : HRESULT
    @lpVtbl.value.put_frequency_mapping.unsafe_as(Proc(UInt8*, HRESULT)).call(mapping)
  end
  def get_default_locator(locatorval : ILocator*) : HRESULT
    @lpVtbl.value.get_default_locator.unsafe_as(Proc(ILocator*, HRESULT)).call(locatorval)
  end
  def put_default_locator(locatorval : ILocator) : HRESULT
    @lpVtbl.value.put_default_locator.unsafe_as(Proc(ILocator, HRESULT)).call(locatorval)
  end
  def clone(newts : ITuningSpace*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ITuningSpace*, HRESULT)).call(newts)
  end
end
struct LibWin32::IEnumTuningSpaces
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def next(celt : UInt32, rgelt : ITuningSpace*, pceltfetched : UInt32*) : HRESULT
    @lpVtbl.value.next.unsafe_as(Proc(UInt32, ITuningSpace*, UInt32*, HRESULT)).call(celt, rgelt, pceltfetched)
  end
  def skip(celt : UInt32) : HRESULT
    @lpVtbl.value.skip.unsafe_as(Proc(UInt32, HRESULT)).call(celt)
  end
  def reset : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(HRESULT)).call
  end
  def clone(ppenum : IEnumTuningSpaces*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(IEnumTuningSpaces*, HRESULT)).call(ppenum)
  end
end
struct LibWin32::IDVBTuningSpace
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_unique_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_unique_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def put_unique_name(name : UInt8*) : HRESULT
    @lpVtbl.value.put_unique_name.unsafe_as(Proc(UInt8*, HRESULT)).call(name)
  end
  def get_friendly_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_friendly_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def put_friendly_name(name : UInt8*) : HRESULT
    @lpVtbl.value.put_friendly_name.unsafe_as(Proc(UInt8*, HRESULT)).call(name)
  end
  def get_clsid(spaceclsid : UInt8**) : HRESULT
    @lpVtbl.value.get_clsid.unsafe_as(Proc(UInt8**, HRESULT)).call(spaceclsid)
  end
  def get_network_type(networktypeguid : UInt8**) : HRESULT
    @lpVtbl.value.get_network_type.unsafe_as(Proc(UInt8**, HRESULT)).call(networktypeguid)
  end
  def put_network_type(networktypeguid : UInt8*) : HRESULT
    @lpVtbl.value.put_network_type.unsafe_as(Proc(UInt8*, HRESULT)).call(networktypeguid)
  end
  def get__network_type(networktypeguid : Guid*) : HRESULT
    @lpVtbl.value.get__network_type.unsafe_as(Proc(Guid*, HRESULT)).call(networktypeguid)
  end
  def put__network_type(networktypeguid : Guid*) : HRESULT
    @lpVtbl.value.put__network_type.unsafe_as(Proc(Guid*, HRESULT)).call(networktypeguid)
  end
  def create_tune_request(tunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.create_tune_request.unsafe_as(Proc(ITuneRequest*, HRESULT)).call(tunerequest)
  end
  def enum_category_gui_ds(ppenum : IEnumGUID*) : HRESULT
    @lpVtbl.value.enum_category_gui_ds.unsafe_as(Proc(IEnumGUID*, HRESULT)).call(ppenum)
  end
  def enum_device_monikers(ppenum : IEnumMoniker*) : HRESULT
    @lpVtbl.value.enum_device_monikers.unsafe_as(Proc(IEnumMoniker*, HRESULT)).call(ppenum)
  end
  def get_default_preferred_component_types(componenttypes : IComponentTypes*) : HRESULT
    @lpVtbl.value.get_default_preferred_component_types.unsafe_as(Proc(IComponentTypes*, HRESULT)).call(componenttypes)
  end
  def put_default_preferred_component_types(newcomponenttypes : IComponentTypes) : HRESULT
    @lpVtbl.value.put_default_preferred_component_types.unsafe_as(Proc(IComponentTypes, HRESULT)).call(newcomponenttypes)
  end
  def get_frequency_mapping(pmapping : UInt8**) : HRESULT
    @lpVtbl.value.get_frequency_mapping.unsafe_as(Proc(UInt8**, HRESULT)).call(pmapping)
  end
  def put_frequency_mapping(mapping : UInt8*) : HRESULT
    @lpVtbl.value.put_frequency_mapping.unsafe_as(Proc(UInt8*, HRESULT)).call(mapping)
  end
  def get_default_locator(locatorval : ILocator*) : HRESULT
    @lpVtbl.value.get_default_locator.unsafe_as(Proc(ILocator*, HRESULT)).call(locatorval)
  end
  def put_default_locator(locatorval : ILocator) : HRESULT
    @lpVtbl.value.put_default_locator.unsafe_as(Proc(ILocator, HRESULT)).call(locatorval)
  end
  def clone(newts : ITuningSpace*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ITuningSpace*, HRESULT)).call(newts)
  end
  def get_system_type(systype : DVBSystemType*) : HRESULT
    @lpVtbl.value.get_system_type.unsafe_as(Proc(DVBSystemType*, HRESULT)).call(systype)
  end
  def put_system_type(systype : DVBSystemType) : HRESULT
    @lpVtbl.value.put_system_type.unsafe_as(Proc(DVBSystemType, HRESULT)).call(systype)
  end
end
struct LibWin32::IDVBTuningSpace2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_unique_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_unique_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def put_unique_name(name : UInt8*) : HRESULT
    @lpVtbl.value.put_unique_name.unsafe_as(Proc(UInt8*, HRESULT)).call(name)
  end
  def get_friendly_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_friendly_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def put_friendly_name(name : UInt8*) : HRESULT
    @lpVtbl.value.put_friendly_name.unsafe_as(Proc(UInt8*, HRESULT)).call(name)
  end
  def get_clsid(spaceclsid : UInt8**) : HRESULT
    @lpVtbl.value.get_clsid.unsafe_as(Proc(UInt8**, HRESULT)).call(spaceclsid)
  end
  def get_network_type(networktypeguid : UInt8**) : HRESULT
    @lpVtbl.value.get_network_type.unsafe_as(Proc(UInt8**, HRESULT)).call(networktypeguid)
  end
  def put_network_type(networktypeguid : UInt8*) : HRESULT
    @lpVtbl.value.put_network_type.unsafe_as(Proc(UInt8*, HRESULT)).call(networktypeguid)
  end
  def get__network_type(networktypeguid : Guid*) : HRESULT
    @lpVtbl.value.get__network_type.unsafe_as(Proc(Guid*, HRESULT)).call(networktypeguid)
  end
  def put__network_type(networktypeguid : Guid*) : HRESULT
    @lpVtbl.value.put__network_type.unsafe_as(Proc(Guid*, HRESULT)).call(networktypeguid)
  end
  def create_tune_request(tunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.create_tune_request.unsafe_as(Proc(ITuneRequest*, HRESULT)).call(tunerequest)
  end
  def enum_category_gui_ds(ppenum : IEnumGUID*) : HRESULT
    @lpVtbl.value.enum_category_gui_ds.unsafe_as(Proc(IEnumGUID*, HRESULT)).call(ppenum)
  end
  def enum_device_monikers(ppenum : IEnumMoniker*) : HRESULT
    @lpVtbl.value.enum_device_monikers.unsafe_as(Proc(IEnumMoniker*, HRESULT)).call(ppenum)
  end
  def get_default_preferred_component_types(componenttypes : IComponentTypes*) : HRESULT
    @lpVtbl.value.get_default_preferred_component_types.unsafe_as(Proc(IComponentTypes*, HRESULT)).call(componenttypes)
  end
  def put_default_preferred_component_types(newcomponenttypes : IComponentTypes) : HRESULT
    @lpVtbl.value.put_default_preferred_component_types.unsafe_as(Proc(IComponentTypes, HRESULT)).call(newcomponenttypes)
  end
  def get_frequency_mapping(pmapping : UInt8**) : HRESULT
    @lpVtbl.value.get_frequency_mapping.unsafe_as(Proc(UInt8**, HRESULT)).call(pmapping)
  end
  def put_frequency_mapping(mapping : UInt8*) : HRESULT
    @lpVtbl.value.put_frequency_mapping.unsafe_as(Proc(UInt8*, HRESULT)).call(mapping)
  end
  def get_default_locator(locatorval : ILocator*) : HRESULT
    @lpVtbl.value.get_default_locator.unsafe_as(Proc(ILocator*, HRESULT)).call(locatorval)
  end
  def put_default_locator(locatorval : ILocator) : HRESULT
    @lpVtbl.value.put_default_locator.unsafe_as(Proc(ILocator, HRESULT)).call(locatorval)
  end
  def clone(newts : ITuningSpace*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ITuningSpace*, HRESULT)).call(newts)
  end
  def get_system_type(systype : DVBSystemType*) : HRESULT
    @lpVtbl.value.get_system_type.unsafe_as(Proc(DVBSystemType*, HRESULT)).call(systype)
  end
  def put_system_type(systype : DVBSystemType) : HRESULT
    @lpVtbl.value.put_system_type.unsafe_as(Proc(DVBSystemType, HRESULT)).call(systype)
  end
  def get_network_id(networkid : Int32*) : HRESULT
    @lpVtbl.value.get_network_id.unsafe_as(Proc(Int32*, HRESULT)).call(networkid)
  end
  def put_network_id(networkid : Int32) : HRESULT
    @lpVtbl.value.put_network_id.unsafe_as(Proc(Int32, HRESULT)).call(networkid)
  end
end
struct LibWin32::IDVBSTuningSpace
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_unique_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_unique_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def put_unique_name(name : UInt8*) : HRESULT
    @lpVtbl.value.put_unique_name.unsafe_as(Proc(UInt8*, HRESULT)).call(name)
  end
  def get_friendly_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_friendly_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def put_friendly_name(name : UInt8*) : HRESULT
    @lpVtbl.value.put_friendly_name.unsafe_as(Proc(UInt8*, HRESULT)).call(name)
  end
  def get_clsid(spaceclsid : UInt8**) : HRESULT
    @lpVtbl.value.get_clsid.unsafe_as(Proc(UInt8**, HRESULT)).call(spaceclsid)
  end
  def get_network_type(networktypeguid : UInt8**) : HRESULT
    @lpVtbl.value.get_network_type.unsafe_as(Proc(UInt8**, HRESULT)).call(networktypeguid)
  end
  def put_network_type(networktypeguid : UInt8*) : HRESULT
    @lpVtbl.value.put_network_type.unsafe_as(Proc(UInt8*, HRESULT)).call(networktypeguid)
  end
  def get__network_type(networktypeguid : Guid*) : HRESULT
    @lpVtbl.value.get__network_type.unsafe_as(Proc(Guid*, HRESULT)).call(networktypeguid)
  end
  def put__network_type(networktypeguid : Guid*) : HRESULT
    @lpVtbl.value.put__network_type.unsafe_as(Proc(Guid*, HRESULT)).call(networktypeguid)
  end
  def create_tune_request(tunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.create_tune_request.unsafe_as(Proc(ITuneRequest*, HRESULT)).call(tunerequest)
  end
  def enum_category_gui_ds(ppenum : IEnumGUID*) : HRESULT
    @lpVtbl.value.enum_category_gui_ds.unsafe_as(Proc(IEnumGUID*, HRESULT)).call(ppenum)
  end
  def enum_device_monikers(ppenum : IEnumMoniker*) : HRESULT
    @lpVtbl.value.enum_device_monikers.unsafe_as(Proc(IEnumMoniker*, HRESULT)).call(ppenum)
  end
  def get_default_preferred_component_types(componenttypes : IComponentTypes*) : HRESULT
    @lpVtbl.value.get_default_preferred_component_types.unsafe_as(Proc(IComponentTypes*, HRESULT)).call(componenttypes)
  end
  def put_default_preferred_component_types(newcomponenttypes : IComponentTypes) : HRESULT
    @lpVtbl.value.put_default_preferred_component_types.unsafe_as(Proc(IComponentTypes, HRESULT)).call(newcomponenttypes)
  end
  def get_frequency_mapping(pmapping : UInt8**) : HRESULT
    @lpVtbl.value.get_frequency_mapping.unsafe_as(Proc(UInt8**, HRESULT)).call(pmapping)
  end
  def put_frequency_mapping(mapping : UInt8*) : HRESULT
    @lpVtbl.value.put_frequency_mapping.unsafe_as(Proc(UInt8*, HRESULT)).call(mapping)
  end
  def get_default_locator(locatorval : ILocator*) : HRESULT
    @lpVtbl.value.get_default_locator.unsafe_as(Proc(ILocator*, HRESULT)).call(locatorval)
  end
  def put_default_locator(locatorval : ILocator) : HRESULT
    @lpVtbl.value.put_default_locator.unsafe_as(Proc(ILocator, HRESULT)).call(locatorval)
  end
  def clone(newts : ITuningSpace*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ITuningSpace*, HRESULT)).call(newts)
  end
  def get_system_type(systype : DVBSystemType*) : HRESULT
    @lpVtbl.value.get_system_type.unsafe_as(Proc(DVBSystemType*, HRESULT)).call(systype)
  end
  def put_system_type(systype : DVBSystemType) : HRESULT
    @lpVtbl.value.put_system_type.unsafe_as(Proc(DVBSystemType, HRESULT)).call(systype)
  end
  def get_network_id(networkid : Int32*) : HRESULT
    @lpVtbl.value.get_network_id.unsafe_as(Proc(Int32*, HRESULT)).call(networkid)
  end
  def put_network_id(networkid : Int32) : HRESULT
    @lpVtbl.value.put_network_id.unsafe_as(Proc(Int32, HRESULT)).call(networkid)
  end
  def get_low_oscillator(lowoscillator : Int32*) : HRESULT
    @lpVtbl.value.get_low_oscillator.unsafe_as(Proc(Int32*, HRESULT)).call(lowoscillator)
  end
  def put_low_oscillator(lowoscillator : Int32) : HRESULT
    @lpVtbl.value.put_low_oscillator.unsafe_as(Proc(Int32, HRESULT)).call(lowoscillator)
  end
  def get_high_oscillator(highoscillator : Int32*) : HRESULT
    @lpVtbl.value.get_high_oscillator.unsafe_as(Proc(Int32*, HRESULT)).call(highoscillator)
  end
  def put_high_oscillator(highoscillator : Int32) : HRESULT
    @lpVtbl.value.put_high_oscillator.unsafe_as(Proc(Int32, HRESULT)).call(highoscillator)
  end
  def get_lnb_switch(lnbswitch : Int32*) : HRESULT
    @lpVtbl.value.get_lnb_switch.unsafe_as(Proc(Int32*, HRESULT)).call(lnbswitch)
  end
  def put_lnb_switch(lnbswitch : Int32) : HRESULT
    @lpVtbl.value.put_lnb_switch.unsafe_as(Proc(Int32, HRESULT)).call(lnbswitch)
  end
  def get_input_range(inputrange : UInt8**) : HRESULT
    @lpVtbl.value.get_input_range.unsafe_as(Proc(UInt8**, HRESULT)).call(inputrange)
  end
  def put_input_range(inputrange : UInt8*) : HRESULT
    @lpVtbl.value.put_input_range.unsafe_as(Proc(UInt8*, HRESULT)).call(inputrange)
  end
  def get_spectral_inversion(spectralinversionval : SpectralInversion*) : HRESULT
    @lpVtbl.value.get_spectral_inversion.unsafe_as(Proc(SpectralInversion*, HRESULT)).call(spectralinversionval)
  end
  def put_spectral_inversion(spectralinversionval : SpectralInversion) : HRESULT
    @lpVtbl.value.put_spectral_inversion.unsafe_as(Proc(SpectralInversion, HRESULT)).call(spectralinversionval)
  end
end
struct LibWin32::IAuxInTuningSpace
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_unique_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_unique_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def put_unique_name(name : UInt8*) : HRESULT
    @lpVtbl.value.put_unique_name.unsafe_as(Proc(UInt8*, HRESULT)).call(name)
  end
  def get_friendly_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_friendly_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def put_friendly_name(name : UInt8*) : HRESULT
    @lpVtbl.value.put_friendly_name.unsafe_as(Proc(UInt8*, HRESULT)).call(name)
  end
  def get_clsid(spaceclsid : UInt8**) : HRESULT
    @lpVtbl.value.get_clsid.unsafe_as(Proc(UInt8**, HRESULT)).call(spaceclsid)
  end
  def get_network_type(networktypeguid : UInt8**) : HRESULT
    @lpVtbl.value.get_network_type.unsafe_as(Proc(UInt8**, HRESULT)).call(networktypeguid)
  end
  def put_network_type(networktypeguid : UInt8*) : HRESULT
    @lpVtbl.value.put_network_type.unsafe_as(Proc(UInt8*, HRESULT)).call(networktypeguid)
  end
  def get__network_type(networktypeguid : Guid*) : HRESULT
    @lpVtbl.value.get__network_type.unsafe_as(Proc(Guid*, HRESULT)).call(networktypeguid)
  end
  def put__network_type(networktypeguid : Guid*) : HRESULT
    @lpVtbl.value.put__network_type.unsafe_as(Proc(Guid*, HRESULT)).call(networktypeguid)
  end
  def create_tune_request(tunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.create_tune_request.unsafe_as(Proc(ITuneRequest*, HRESULT)).call(tunerequest)
  end
  def enum_category_gui_ds(ppenum : IEnumGUID*) : HRESULT
    @lpVtbl.value.enum_category_gui_ds.unsafe_as(Proc(IEnumGUID*, HRESULT)).call(ppenum)
  end
  def enum_device_monikers(ppenum : IEnumMoniker*) : HRESULT
    @lpVtbl.value.enum_device_monikers.unsafe_as(Proc(IEnumMoniker*, HRESULT)).call(ppenum)
  end
  def get_default_preferred_component_types(componenttypes : IComponentTypes*) : HRESULT
    @lpVtbl.value.get_default_preferred_component_types.unsafe_as(Proc(IComponentTypes*, HRESULT)).call(componenttypes)
  end
  def put_default_preferred_component_types(newcomponenttypes : IComponentTypes) : HRESULT
    @lpVtbl.value.put_default_preferred_component_types.unsafe_as(Proc(IComponentTypes, HRESULT)).call(newcomponenttypes)
  end
  def get_frequency_mapping(pmapping : UInt8**) : HRESULT
    @lpVtbl.value.get_frequency_mapping.unsafe_as(Proc(UInt8**, HRESULT)).call(pmapping)
  end
  def put_frequency_mapping(mapping : UInt8*) : HRESULT
    @lpVtbl.value.put_frequency_mapping.unsafe_as(Proc(UInt8*, HRESULT)).call(mapping)
  end
  def get_default_locator(locatorval : ILocator*) : HRESULT
    @lpVtbl.value.get_default_locator.unsafe_as(Proc(ILocator*, HRESULT)).call(locatorval)
  end
  def put_default_locator(locatorval : ILocator) : HRESULT
    @lpVtbl.value.put_default_locator.unsafe_as(Proc(ILocator, HRESULT)).call(locatorval)
  end
  def clone(newts : ITuningSpace*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ITuningSpace*, HRESULT)).call(newts)
  end
end
struct LibWin32::IAuxInTuningSpace2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_unique_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_unique_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def put_unique_name(name : UInt8*) : HRESULT
    @lpVtbl.value.put_unique_name.unsafe_as(Proc(UInt8*, HRESULT)).call(name)
  end
  def get_friendly_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_friendly_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def put_friendly_name(name : UInt8*) : HRESULT
    @lpVtbl.value.put_friendly_name.unsafe_as(Proc(UInt8*, HRESULT)).call(name)
  end
  def get_clsid(spaceclsid : UInt8**) : HRESULT
    @lpVtbl.value.get_clsid.unsafe_as(Proc(UInt8**, HRESULT)).call(spaceclsid)
  end
  def get_network_type(networktypeguid : UInt8**) : HRESULT
    @lpVtbl.value.get_network_type.unsafe_as(Proc(UInt8**, HRESULT)).call(networktypeguid)
  end
  def put_network_type(networktypeguid : UInt8*) : HRESULT
    @lpVtbl.value.put_network_type.unsafe_as(Proc(UInt8*, HRESULT)).call(networktypeguid)
  end
  def get__network_type(networktypeguid : Guid*) : HRESULT
    @lpVtbl.value.get__network_type.unsafe_as(Proc(Guid*, HRESULT)).call(networktypeguid)
  end
  def put__network_type(networktypeguid : Guid*) : HRESULT
    @lpVtbl.value.put__network_type.unsafe_as(Proc(Guid*, HRESULT)).call(networktypeguid)
  end
  def create_tune_request(tunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.create_tune_request.unsafe_as(Proc(ITuneRequest*, HRESULT)).call(tunerequest)
  end
  def enum_category_gui_ds(ppenum : IEnumGUID*) : HRESULT
    @lpVtbl.value.enum_category_gui_ds.unsafe_as(Proc(IEnumGUID*, HRESULT)).call(ppenum)
  end
  def enum_device_monikers(ppenum : IEnumMoniker*) : HRESULT
    @lpVtbl.value.enum_device_monikers.unsafe_as(Proc(IEnumMoniker*, HRESULT)).call(ppenum)
  end
  def get_default_preferred_component_types(componenttypes : IComponentTypes*) : HRESULT
    @lpVtbl.value.get_default_preferred_component_types.unsafe_as(Proc(IComponentTypes*, HRESULT)).call(componenttypes)
  end
  def put_default_preferred_component_types(newcomponenttypes : IComponentTypes) : HRESULT
    @lpVtbl.value.put_default_preferred_component_types.unsafe_as(Proc(IComponentTypes, HRESULT)).call(newcomponenttypes)
  end
  def get_frequency_mapping(pmapping : UInt8**) : HRESULT
    @lpVtbl.value.get_frequency_mapping.unsafe_as(Proc(UInt8**, HRESULT)).call(pmapping)
  end
  def put_frequency_mapping(mapping : UInt8*) : HRESULT
    @lpVtbl.value.put_frequency_mapping.unsafe_as(Proc(UInt8*, HRESULT)).call(mapping)
  end
  def get_default_locator(locatorval : ILocator*) : HRESULT
    @lpVtbl.value.get_default_locator.unsafe_as(Proc(ILocator*, HRESULT)).call(locatorval)
  end
  def put_default_locator(locatorval : ILocator) : HRESULT
    @lpVtbl.value.put_default_locator.unsafe_as(Proc(ILocator, HRESULT)).call(locatorval)
  end
  def clone(newts : ITuningSpace*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ITuningSpace*, HRESULT)).call(newts)
  end
  def get_country_code(countrycodeval : Int32*) : HRESULT
    @lpVtbl.value.get_country_code.unsafe_as(Proc(Int32*, HRESULT)).call(countrycodeval)
  end
  def put_country_code(newcountrycodeval : Int32) : HRESULT
    @lpVtbl.value.put_country_code.unsafe_as(Proc(Int32, HRESULT)).call(newcountrycodeval)
  end
end
struct LibWin32::IAnalogTVTuningSpace
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_unique_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_unique_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def put_unique_name(name : UInt8*) : HRESULT
    @lpVtbl.value.put_unique_name.unsafe_as(Proc(UInt8*, HRESULT)).call(name)
  end
  def get_friendly_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_friendly_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def put_friendly_name(name : UInt8*) : HRESULT
    @lpVtbl.value.put_friendly_name.unsafe_as(Proc(UInt8*, HRESULT)).call(name)
  end
  def get_clsid(spaceclsid : UInt8**) : HRESULT
    @lpVtbl.value.get_clsid.unsafe_as(Proc(UInt8**, HRESULT)).call(spaceclsid)
  end
  def get_network_type(networktypeguid : UInt8**) : HRESULT
    @lpVtbl.value.get_network_type.unsafe_as(Proc(UInt8**, HRESULT)).call(networktypeguid)
  end
  def put_network_type(networktypeguid : UInt8*) : HRESULT
    @lpVtbl.value.put_network_type.unsafe_as(Proc(UInt8*, HRESULT)).call(networktypeguid)
  end
  def get__network_type(networktypeguid : Guid*) : HRESULT
    @lpVtbl.value.get__network_type.unsafe_as(Proc(Guid*, HRESULT)).call(networktypeguid)
  end
  def put__network_type(networktypeguid : Guid*) : HRESULT
    @lpVtbl.value.put__network_type.unsafe_as(Proc(Guid*, HRESULT)).call(networktypeguid)
  end
  def create_tune_request(tunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.create_tune_request.unsafe_as(Proc(ITuneRequest*, HRESULT)).call(tunerequest)
  end
  def enum_category_gui_ds(ppenum : IEnumGUID*) : HRESULT
    @lpVtbl.value.enum_category_gui_ds.unsafe_as(Proc(IEnumGUID*, HRESULT)).call(ppenum)
  end
  def enum_device_monikers(ppenum : IEnumMoniker*) : HRESULT
    @lpVtbl.value.enum_device_monikers.unsafe_as(Proc(IEnumMoniker*, HRESULT)).call(ppenum)
  end
  def get_default_preferred_component_types(componenttypes : IComponentTypes*) : HRESULT
    @lpVtbl.value.get_default_preferred_component_types.unsafe_as(Proc(IComponentTypes*, HRESULT)).call(componenttypes)
  end
  def put_default_preferred_component_types(newcomponenttypes : IComponentTypes) : HRESULT
    @lpVtbl.value.put_default_preferred_component_types.unsafe_as(Proc(IComponentTypes, HRESULT)).call(newcomponenttypes)
  end
  def get_frequency_mapping(pmapping : UInt8**) : HRESULT
    @lpVtbl.value.get_frequency_mapping.unsafe_as(Proc(UInt8**, HRESULT)).call(pmapping)
  end
  def put_frequency_mapping(mapping : UInt8*) : HRESULT
    @lpVtbl.value.put_frequency_mapping.unsafe_as(Proc(UInt8*, HRESULT)).call(mapping)
  end
  def get_default_locator(locatorval : ILocator*) : HRESULT
    @lpVtbl.value.get_default_locator.unsafe_as(Proc(ILocator*, HRESULT)).call(locatorval)
  end
  def put_default_locator(locatorval : ILocator) : HRESULT
    @lpVtbl.value.put_default_locator.unsafe_as(Proc(ILocator, HRESULT)).call(locatorval)
  end
  def clone(newts : ITuningSpace*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ITuningSpace*, HRESULT)).call(newts)
  end
  def get_min_channel(minchannelval : Int32*) : HRESULT
    @lpVtbl.value.get_min_channel.unsafe_as(Proc(Int32*, HRESULT)).call(minchannelval)
  end
  def put_min_channel(newminchannelval : Int32) : HRESULT
    @lpVtbl.value.put_min_channel.unsafe_as(Proc(Int32, HRESULT)).call(newminchannelval)
  end
  def get_max_channel(maxchannelval : Int32*) : HRESULT
    @lpVtbl.value.get_max_channel.unsafe_as(Proc(Int32*, HRESULT)).call(maxchannelval)
  end
  def put_max_channel(newmaxchannelval : Int32) : HRESULT
    @lpVtbl.value.put_max_channel.unsafe_as(Proc(Int32, HRESULT)).call(newmaxchannelval)
  end
  def get_input_type(inputtypeval : TunerInputType*) : HRESULT
    @lpVtbl.value.get_input_type.unsafe_as(Proc(TunerInputType*, HRESULT)).call(inputtypeval)
  end
  def put_input_type(newinputtypeval : TunerInputType) : HRESULT
    @lpVtbl.value.put_input_type.unsafe_as(Proc(TunerInputType, HRESULT)).call(newinputtypeval)
  end
  def get_country_code(countrycodeval : Int32*) : HRESULT
    @lpVtbl.value.get_country_code.unsafe_as(Proc(Int32*, HRESULT)).call(countrycodeval)
  end
  def put_country_code(newcountrycodeval : Int32) : HRESULT
    @lpVtbl.value.put_country_code.unsafe_as(Proc(Int32, HRESULT)).call(newcountrycodeval)
  end
end
struct LibWin32::IATSCTuningSpace
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_unique_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_unique_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def put_unique_name(name : UInt8*) : HRESULT
    @lpVtbl.value.put_unique_name.unsafe_as(Proc(UInt8*, HRESULT)).call(name)
  end
  def get_friendly_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_friendly_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def put_friendly_name(name : UInt8*) : HRESULT
    @lpVtbl.value.put_friendly_name.unsafe_as(Proc(UInt8*, HRESULT)).call(name)
  end
  def get_clsid(spaceclsid : UInt8**) : HRESULT
    @lpVtbl.value.get_clsid.unsafe_as(Proc(UInt8**, HRESULT)).call(spaceclsid)
  end
  def get_network_type(networktypeguid : UInt8**) : HRESULT
    @lpVtbl.value.get_network_type.unsafe_as(Proc(UInt8**, HRESULT)).call(networktypeguid)
  end
  def put_network_type(networktypeguid : UInt8*) : HRESULT
    @lpVtbl.value.put_network_type.unsafe_as(Proc(UInt8*, HRESULT)).call(networktypeguid)
  end
  def get__network_type(networktypeguid : Guid*) : HRESULT
    @lpVtbl.value.get__network_type.unsafe_as(Proc(Guid*, HRESULT)).call(networktypeguid)
  end
  def put__network_type(networktypeguid : Guid*) : HRESULT
    @lpVtbl.value.put__network_type.unsafe_as(Proc(Guid*, HRESULT)).call(networktypeguid)
  end
  def create_tune_request(tunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.create_tune_request.unsafe_as(Proc(ITuneRequest*, HRESULT)).call(tunerequest)
  end
  def enum_category_gui_ds(ppenum : IEnumGUID*) : HRESULT
    @lpVtbl.value.enum_category_gui_ds.unsafe_as(Proc(IEnumGUID*, HRESULT)).call(ppenum)
  end
  def enum_device_monikers(ppenum : IEnumMoniker*) : HRESULT
    @lpVtbl.value.enum_device_monikers.unsafe_as(Proc(IEnumMoniker*, HRESULT)).call(ppenum)
  end
  def get_default_preferred_component_types(componenttypes : IComponentTypes*) : HRESULT
    @lpVtbl.value.get_default_preferred_component_types.unsafe_as(Proc(IComponentTypes*, HRESULT)).call(componenttypes)
  end
  def put_default_preferred_component_types(newcomponenttypes : IComponentTypes) : HRESULT
    @lpVtbl.value.put_default_preferred_component_types.unsafe_as(Proc(IComponentTypes, HRESULT)).call(newcomponenttypes)
  end
  def get_frequency_mapping(pmapping : UInt8**) : HRESULT
    @lpVtbl.value.get_frequency_mapping.unsafe_as(Proc(UInt8**, HRESULT)).call(pmapping)
  end
  def put_frequency_mapping(mapping : UInt8*) : HRESULT
    @lpVtbl.value.put_frequency_mapping.unsafe_as(Proc(UInt8*, HRESULT)).call(mapping)
  end
  def get_default_locator(locatorval : ILocator*) : HRESULT
    @lpVtbl.value.get_default_locator.unsafe_as(Proc(ILocator*, HRESULT)).call(locatorval)
  end
  def put_default_locator(locatorval : ILocator) : HRESULT
    @lpVtbl.value.put_default_locator.unsafe_as(Proc(ILocator, HRESULT)).call(locatorval)
  end
  def clone(newts : ITuningSpace*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ITuningSpace*, HRESULT)).call(newts)
  end
  def get_min_channel(minchannelval : Int32*) : HRESULT
    @lpVtbl.value.get_min_channel.unsafe_as(Proc(Int32*, HRESULT)).call(minchannelval)
  end
  def put_min_channel(newminchannelval : Int32) : HRESULT
    @lpVtbl.value.put_min_channel.unsafe_as(Proc(Int32, HRESULT)).call(newminchannelval)
  end
  def get_max_channel(maxchannelval : Int32*) : HRESULT
    @lpVtbl.value.get_max_channel.unsafe_as(Proc(Int32*, HRESULT)).call(maxchannelval)
  end
  def put_max_channel(newmaxchannelval : Int32) : HRESULT
    @lpVtbl.value.put_max_channel.unsafe_as(Proc(Int32, HRESULT)).call(newmaxchannelval)
  end
  def get_input_type(inputtypeval : TunerInputType*) : HRESULT
    @lpVtbl.value.get_input_type.unsafe_as(Proc(TunerInputType*, HRESULT)).call(inputtypeval)
  end
  def put_input_type(newinputtypeval : TunerInputType) : HRESULT
    @lpVtbl.value.put_input_type.unsafe_as(Proc(TunerInputType, HRESULT)).call(newinputtypeval)
  end
  def get_country_code(countrycodeval : Int32*) : HRESULT
    @lpVtbl.value.get_country_code.unsafe_as(Proc(Int32*, HRESULT)).call(countrycodeval)
  end
  def put_country_code(newcountrycodeval : Int32) : HRESULT
    @lpVtbl.value.put_country_code.unsafe_as(Proc(Int32, HRESULT)).call(newcountrycodeval)
  end
  def get_min_minor_channel(minminorchannelval : Int32*) : HRESULT
    @lpVtbl.value.get_min_minor_channel.unsafe_as(Proc(Int32*, HRESULT)).call(minminorchannelval)
  end
  def put_min_minor_channel(newminminorchannelval : Int32) : HRESULT
    @lpVtbl.value.put_min_minor_channel.unsafe_as(Proc(Int32, HRESULT)).call(newminminorchannelval)
  end
  def get_max_minor_channel(maxminorchannelval : Int32*) : HRESULT
    @lpVtbl.value.get_max_minor_channel.unsafe_as(Proc(Int32*, HRESULT)).call(maxminorchannelval)
  end
  def put_max_minor_channel(newmaxminorchannelval : Int32) : HRESULT
    @lpVtbl.value.put_max_minor_channel.unsafe_as(Proc(Int32, HRESULT)).call(newmaxminorchannelval)
  end
  def get_min_physical_channel(minphysicalchannelval : Int32*) : HRESULT
    @lpVtbl.value.get_min_physical_channel.unsafe_as(Proc(Int32*, HRESULT)).call(minphysicalchannelval)
  end
  def put_min_physical_channel(newminphysicalchannelval : Int32) : HRESULT
    @lpVtbl.value.put_min_physical_channel.unsafe_as(Proc(Int32, HRESULT)).call(newminphysicalchannelval)
  end
  def get_max_physical_channel(maxphysicalchannelval : Int32*) : HRESULT
    @lpVtbl.value.get_max_physical_channel.unsafe_as(Proc(Int32*, HRESULT)).call(maxphysicalchannelval)
  end
  def put_max_physical_channel(newmaxphysicalchannelval : Int32) : HRESULT
    @lpVtbl.value.put_max_physical_channel.unsafe_as(Proc(Int32, HRESULT)).call(newmaxphysicalchannelval)
  end
end
struct LibWin32::IDigitalCableTuningSpace
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_unique_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_unique_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def put_unique_name(name : UInt8*) : HRESULT
    @lpVtbl.value.put_unique_name.unsafe_as(Proc(UInt8*, HRESULT)).call(name)
  end
  def get_friendly_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_friendly_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def put_friendly_name(name : UInt8*) : HRESULT
    @lpVtbl.value.put_friendly_name.unsafe_as(Proc(UInt8*, HRESULT)).call(name)
  end
  def get_clsid(spaceclsid : UInt8**) : HRESULT
    @lpVtbl.value.get_clsid.unsafe_as(Proc(UInt8**, HRESULT)).call(spaceclsid)
  end
  def get_network_type(networktypeguid : UInt8**) : HRESULT
    @lpVtbl.value.get_network_type.unsafe_as(Proc(UInt8**, HRESULT)).call(networktypeguid)
  end
  def put_network_type(networktypeguid : UInt8*) : HRESULT
    @lpVtbl.value.put_network_type.unsafe_as(Proc(UInt8*, HRESULT)).call(networktypeguid)
  end
  def get__network_type(networktypeguid : Guid*) : HRESULT
    @lpVtbl.value.get__network_type.unsafe_as(Proc(Guid*, HRESULT)).call(networktypeguid)
  end
  def put__network_type(networktypeguid : Guid*) : HRESULT
    @lpVtbl.value.put__network_type.unsafe_as(Proc(Guid*, HRESULT)).call(networktypeguid)
  end
  def create_tune_request(tunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.create_tune_request.unsafe_as(Proc(ITuneRequest*, HRESULT)).call(tunerequest)
  end
  def enum_category_gui_ds(ppenum : IEnumGUID*) : HRESULT
    @lpVtbl.value.enum_category_gui_ds.unsafe_as(Proc(IEnumGUID*, HRESULT)).call(ppenum)
  end
  def enum_device_monikers(ppenum : IEnumMoniker*) : HRESULT
    @lpVtbl.value.enum_device_monikers.unsafe_as(Proc(IEnumMoniker*, HRESULT)).call(ppenum)
  end
  def get_default_preferred_component_types(componenttypes : IComponentTypes*) : HRESULT
    @lpVtbl.value.get_default_preferred_component_types.unsafe_as(Proc(IComponentTypes*, HRESULT)).call(componenttypes)
  end
  def put_default_preferred_component_types(newcomponenttypes : IComponentTypes) : HRESULT
    @lpVtbl.value.put_default_preferred_component_types.unsafe_as(Proc(IComponentTypes, HRESULT)).call(newcomponenttypes)
  end
  def get_frequency_mapping(pmapping : UInt8**) : HRESULT
    @lpVtbl.value.get_frequency_mapping.unsafe_as(Proc(UInt8**, HRESULT)).call(pmapping)
  end
  def put_frequency_mapping(mapping : UInt8*) : HRESULT
    @lpVtbl.value.put_frequency_mapping.unsafe_as(Proc(UInt8*, HRESULT)).call(mapping)
  end
  def get_default_locator(locatorval : ILocator*) : HRESULT
    @lpVtbl.value.get_default_locator.unsafe_as(Proc(ILocator*, HRESULT)).call(locatorval)
  end
  def put_default_locator(locatorval : ILocator) : HRESULT
    @lpVtbl.value.put_default_locator.unsafe_as(Proc(ILocator, HRESULT)).call(locatorval)
  end
  def clone(newts : ITuningSpace*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ITuningSpace*, HRESULT)).call(newts)
  end
  def get_min_channel(minchannelval : Int32*) : HRESULT
    @lpVtbl.value.get_min_channel.unsafe_as(Proc(Int32*, HRESULT)).call(minchannelval)
  end
  def put_min_channel(newminchannelval : Int32) : HRESULT
    @lpVtbl.value.put_min_channel.unsafe_as(Proc(Int32, HRESULT)).call(newminchannelval)
  end
  def get_max_channel(maxchannelval : Int32*) : HRESULT
    @lpVtbl.value.get_max_channel.unsafe_as(Proc(Int32*, HRESULT)).call(maxchannelval)
  end
  def put_max_channel(newmaxchannelval : Int32) : HRESULT
    @lpVtbl.value.put_max_channel.unsafe_as(Proc(Int32, HRESULT)).call(newmaxchannelval)
  end
  def get_input_type(inputtypeval : TunerInputType*) : HRESULT
    @lpVtbl.value.get_input_type.unsafe_as(Proc(TunerInputType*, HRESULT)).call(inputtypeval)
  end
  def put_input_type(newinputtypeval : TunerInputType) : HRESULT
    @lpVtbl.value.put_input_type.unsafe_as(Proc(TunerInputType, HRESULT)).call(newinputtypeval)
  end
  def get_country_code(countrycodeval : Int32*) : HRESULT
    @lpVtbl.value.get_country_code.unsafe_as(Proc(Int32*, HRESULT)).call(countrycodeval)
  end
  def put_country_code(newcountrycodeval : Int32) : HRESULT
    @lpVtbl.value.put_country_code.unsafe_as(Proc(Int32, HRESULT)).call(newcountrycodeval)
  end
  def get_min_minor_channel(minminorchannelval : Int32*) : HRESULT
    @lpVtbl.value.get_min_minor_channel.unsafe_as(Proc(Int32*, HRESULT)).call(minminorchannelval)
  end
  def put_min_minor_channel(newminminorchannelval : Int32) : HRESULT
    @lpVtbl.value.put_min_minor_channel.unsafe_as(Proc(Int32, HRESULT)).call(newminminorchannelval)
  end
  def get_max_minor_channel(maxminorchannelval : Int32*) : HRESULT
    @lpVtbl.value.get_max_minor_channel.unsafe_as(Proc(Int32*, HRESULT)).call(maxminorchannelval)
  end
  def put_max_minor_channel(newmaxminorchannelval : Int32) : HRESULT
    @lpVtbl.value.put_max_minor_channel.unsafe_as(Proc(Int32, HRESULT)).call(newmaxminorchannelval)
  end
  def get_min_physical_channel(minphysicalchannelval : Int32*) : HRESULT
    @lpVtbl.value.get_min_physical_channel.unsafe_as(Proc(Int32*, HRESULT)).call(minphysicalchannelval)
  end
  def put_min_physical_channel(newminphysicalchannelval : Int32) : HRESULT
    @lpVtbl.value.put_min_physical_channel.unsafe_as(Proc(Int32, HRESULT)).call(newminphysicalchannelval)
  end
  def get_max_physical_channel(maxphysicalchannelval : Int32*) : HRESULT
    @lpVtbl.value.get_max_physical_channel.unsafe_as(Proc(Int32*, HRESULT)).call(maxphysicalchannelval)
  end
  def put_max_physical_channel(newmaxphysicalchannelval : Int32) : HRESULT
    @lpVtbl.value.put_max_physical_channel.unsafe_as(Proc(Int32, HRESULT)).call(newmaxphysicalchannelval)
  end
  def get_min_major_channel(minmajorchannelval : Int32*) : HRESULT
    @lpVtbl.value.get_min_major_channel.unsafe_as(Proc(Int32*, HRESULT)).call(minmajorchannelval)
  end
  def put_min_major_channel(newminmajorchannelval : Int32) : HRESULT
    @lpVtbl.value.put_min_major_channel.unsafe_as(Proc(Int32, HRESULT)).call(newminmajorchannelval)
  end
  def get_max_major_channel(maxmajorchannelval : Int32*) : HRESULT
    @lpVtbl.value.get_max_major_channel.unsafe_as(Proc(Int32*, HRESULT)).call(maxmajorchannelval)
  end
  def put_max_major_channel(newmaxmajorchannelval : Int32) : HRESULT
    @lpVtbl.value.put_max_major_channel.unsafe_as(Proc(Int32, HRESULT)).call(newmaxmajorchannelval)
  end
  def get_min_source_id(minsourceidval : Int32*) : HRESULT
    @lpVtbl.value.get_min_source_id.unsafe_as(Proc(Int32*, HRESULT)).call(minsourceidval)
  end
  def put_min_source_id(newminsourceidval : Int32) : HRESULT
    @lpVtbl.value.put_min_source_id.unsafe_as(Proc(Int32, HRESULT)).call(newminsourceidval)
  end
  def get_max_source_id(maxsourceidval : Int32*) : HRESULT
    @lpVtbl.value.get_max_source_id.unsafe_as(Proc(Int32*, HRESULT)).call(maxsourceidval)
  end
  def put_max_source_id(newmaxsourceidval : Int32) : HRESULT
    @lpVtbl.value.put_max_source_id.unsafe_as(Proc(Int32, HRESULT)).call(newmaxsourceidval)
  end
end
struct LibWin32::IAnalogRadioTuningSpace
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_unique_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_unique_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def put_unique_name(name : UInt8*) : HRESULT
    @lpVtbl.value.put_unique_name.unsafe_as(Proc(UInt8*, HRESULT)).call(name)
  end
  def get_friendly_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_friendly_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def put_friendly_name(name : UInt8*) : HRESULT
    @lpVtbl.value.put_friendly_name.unsafe_as(Proc(UInt8*, HRESULT)).call(name)
  end
  def get_clsid(spaceclsid : UInt8**) : HRESULT
    @lpVtbl.value.get_clsid.unsafe_as(Proc(UInt8**, HRESULT)).call(spaceclsid)
  end
  def get_network_type(networktypeguid : UInt8**) : HRESULT
    @lpVtbl.value.get_network_type.unsafe_as(Proc(UInt8**, HRESULT)).call(networktypeguid)
  end
  def put_network_type(networktypeguid : UInt8*) : HRESULT
    @lpVtbl.value.put_network_type.unsafe_as(Proc(UInt8*, HRESULT)).call(networktypeguid)
  end
  def get__network_type(networktypeguid : Guid*) : HRESULT
    @lpVtbl.value.get__network_type.unsafe_as(Proc(Guid*, HRESULT)).call(networktypeguid)
  end
  def put__network_type(networktypeguid : Guid*) : HRESULT
    @lpVtbl.value.put__network_type.unsafe_as(Proc(Guid*, HRESULT)).call(networktypeguid)
  end
  def create_tune_request(tunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.create_tune_request.unsafe_as(Proc(ITuneRequest*, HRESULT)).call(tunerequest)
  end
  def enum_category_gui_ds(ppenum : IEnumGUID*) : HRESULT
    @lpVtbl.value.enum_category_gui_ds.unsafe_as(Proc(IEnumGUID*, HRESULT)).call(ppenum)
  end
  def enum_device_monikers(ppenum : IEnumMoniker*) : HRESULT
    @lpVtbl.value.enum_device_monikers.unsafe_as(Proc(IEnumMoniker*, HRESULT)).call(ppenum)
  end
  def get_default_preferred_component_types(componenttypes : IComponentTypes*) : HRESULT
    @lpVtbl.value.get_default_preferred_component_types.unsafe_as(Proc(IComponentTypes*, HRESULT)).call(componenttypes)
  end
  def put_default_preferred_component_types(newcomponenttypes : IComponentTypes) : HRESULT
    @lpVtbl.value.put_default_preferred_component_types.unsafe_as(Proc(IComponentTypes, HRESULT)).call(newcomponenttypes)
  end
  def get_frequency_mapping(pmapping : UInt8**) : HRESULT
    @lpVtbl.value.get_frequency_mapping.unsafe_as(Proc(UInt8**, HRESULT)).call(pmapping)
  end
  def put_frequency_mapping(mapping : UInt8*) : HRESULT
    @lpVtbl.value.put_frequency_mapping.unsafe_as(Proc(UInt8*, HRESULT)).call(mapping)
  end
  def get_default_locator(locatorval : ILocator*) : HRESULT
    @lpVtbl.value.get_default_locator.unsafe_as(Proc(ILocator*, HRESULT)).call(locatorval)
  end
  def put_default_locator(locatorval : ILocator) : HRESULT
    @lpVtbl.value.put_default_locator.unsafe_as(Proc(ILocator, HRESULT)).call(locatorval)
  end
  def clone(newts : ITuningSpace*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ITuningSpace*, HRESULT)).call(newts)
  end
  def get_min_frequency(minfrequencyval : Int32*) : HRESULT
    @lpVtbl.value.get_min_frequency.unsafe_as(Proc(Int32*, HRESULT)).call(minfrequencyval)
  end
  def put_min_frequency(newminfrequencyval : Int32) : HRESULT
    @lpVtbl.value.put_min_frequency.unsafe_as(Proc(Int32, HRESULT)).call(newminfrequencyval)
  end
  def get_max_frequency(maxfrequencyval : Int32*) : HRESULT
    @lpVtbl.value.get_max_frequency.unsafe_as(Proc(Int32*, HRESULT)).call(maxfrequencyval)
  end
  def put_max_frequency(newmaxfrequencyval : Int32) : HRESULT
    @lpVtbl.value.put_max_frequency.unsafe_as(Proc(Int32, HRESULT)).call(newmaxfrequencyval)
  end
  def get_step(stepval : Int32*) : HRESULT
    @lpVtbl.value.get_step.unsafe_as(Proc(Int32*, HRESULT)).call(stepval)
  end
  def put_step(newstepval : Int32) : HRESULT
    @lpVtbl.value.put_step.unsafe_as(Proc(Int32, HRESULT)).call(newstepval)
  end
end
struct LibWin32::IAnalogRadioTuningSpace2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_unique_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_unique_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def put_unique_name(name : UInt8*) : HRESULT
    @lpVtbl.value.put_unique_name.unsafe_as(Proc(UInt8*, HRESULT)).call(name)
  end
  def get_friendly_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_friendly_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def put_friendly_name(name : UInt8*) : HRESULT
    @lpVtbl.value.put_friendly_name.unsafe_as(Proc(UInt8*, HRESULT)).call(name)
  end
  def get_clsid(spaceclsid : UInt8**) : HRESULT
    @lpVtbl.value.get_clsid.unsafe_as(Proc(UInt8**, HRESULT)).call(spaceclsid)
  end
  def get_network_type(networktypeguid : UInt8**) : HRESULT
    @lpVtbl.value.get_network_type.unsafe_as(Proc(UInt8**, HRESULT)).call(networktypeguid)
  end
  def put_network_type(networktypeguid : UInt8*) : HRESULT
    @lpVtbl.value.put_network_type.unsafe_as(Proc(UInt8*, HRESULT)).call(networktypeguid)
  end
  def get__network_type(networktypeguid : Guid*) : HRESULT
    @lpVtbl.value.get__network_type.unsafe_as(Proc(Guid*, HRESULT)).call(networktypeguid)
  end
  def put__network_type(networktypeguid : Guid*) : HRESULT
    @lpVtbl.value.put__network_type.unsafe_as(Proc(Guid*, HRESULT)).call(networktypeguid)
  end
  def create_tune_request(tunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.create_tune_request.unsafe_as(Proc(ITuneRequest*, HRESULT)).call(tunerequest)
  end
  def enum_category_gui_ds(ppenum : IEnumGUID*) : HRESULT
    @lpVtbl.value.enum_category_gui_ds.unsafe_as(Proc(IEnumGUID*, HRESULT)).call(ppenum)
  end
  def enum_device_monikers(ppenum : IEnumMoniker*) : HRESULT
    @lpVtbl.value.enum_device_monikers.unsafe_as(Proc(IEnumMoniker*, HRESULT)).call(ppenum)
  end
  def get_default_preferred_component_types(componenttypes : IComponentTypes*) : HRESULT
    @lpVtbl.value.get_default_preferred_component_types.unsafe_as(Proc(IComponentTypes*, HRESULT)).call(componenttypes)
  end
  def put_default_preferred_component_types(newcomponenttypes : IComponentTypes) : HRESULT
    @lpVtbl.value.put_default_preferred_component_types.unsafe_as(Proc(IComponentTypes, HRESULT)).call(newcomponenttypes)
  end
  def get_frequency_mapping(pmapping : UInt8**) : HRESULT
    @lpVtbl.value.get_frequency_mapping.unsafe_as(Proc(UInt8**, HRESULT)).call(pmapping)
  end
  def put_frequency_mapping(mapping : UInt8*) : HRESULT
    @lpVtbl.value.put_frequency_mapping.unsafe_as(Proc(UInt8*, HRESULT)).call(mapping)
  end
  def get_default_locator(locatorval : ILocator*) : HRESULT
    @lpVtbl.value.get_default_locator.unsafe_as(Proc(ILocator*, HRESULT)).call(locatorval)
  end
  def put_default_locator(locatorval : ILocator) : HRESULT
    @lpVtbl.value.put_default_locator.unsafe_as(Proc(ILocator, HRESULT)).call(locatorval)
  end
  def clone(newts : ITuningSpace*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ITuningSpace*, HRESULT)).call(newts)
  end
  def get_min_frequency(minfrequencyval : Int32*) : HRESULT
    @lpVtbl.value.get_min_frequency.unsafe_as(Proc(Int32*, HRESULT)).call(minfrequencyval)
  end
  def put_min_frequency(newminfrequencyval : Int32) : HRESULT
    @lpVtbl.value.put_min_frequency.unsafe_as(Proc(Int32, HRESULT)).call(newminfrequencyval)
  end
  def get_max_frequency(maxfrequencyval : Int32*) : HRESULT
    @lpVtbl.value.get_max_frequency.unsafe_as(Proc(Int32*, HRESULT)).call(maxfrequencyval)
  end
  def put_max_frequency(newmaxfrequencyval : Int32) : HRESULT
    @lpVtbl.value.put_max_frequency.unsafe_as(Proc(Int32, HRESULT)).call(newmaxfrequencyval)
  end
  def get_step(stepval : Int32*) : HRESULT
    @lpVtbl.value.get_step.unsafe_as(Proc(Int32*, HRESULT)).call(stepval)
  end
  def put_step(newstepval : Int32) : HRESULT
    @lpVtbl.value.put_step.unsafe_as(Proc(Int32, HRESULT)).call(newstepval)
  end
  def get_country_code(countrycodeval : Int32*) : HRESULT
    @lpVtbl.value.get_country_code.unsafe_as(Proc(Int32*, HRESULT)).call(countrycodeval)
  end
  def put_country_code(newcountrycodeval : Int32) : HRESULT
    @lpVtbl.value.put_country_code.unsafe_as(Proc(Int32, HRESULT)).call(newcountrycodeval)
  end
end
struct LibWin32::ITuneRequest
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_tuning_space(tuningspace : ITuningSpace*) : HRESULT
    @lpVtbl.value.get_tuning_space.unsafe_as(Proc(ITuningSpace*, HRESULT)).call(tuningspace)
  end
  def get_components(components : IComponents*) : HRESULT
    @lpVtbl.value.get_components.unsafe_as(Proc(IComponents*, HRESULT)).call(components)
  end
  def clone(newtunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ITuneRequest*, HRESULT)).call(newtunerequest)
  end
  def get_locator(locator : ILocator*) : HRESULT
    @lpVtbl.value.get_locator.unsafe_as(Proc(ILocator*, HRESULT)).call(locator)
  end
  def put_locator(locator : ILocator) : HRESULT
    @lpVtbl.value.put_locator.unsafe_as(Proc(ILocator, HRESULT)).call(locator)
  end
end
struct LibWin32::IChannelIDTuneRequest
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_tuning_space(tuningspace : ITuningSpace*) : HRESULT
    @lpVtbl.value.get_tuning_space.unsafe_as(Proc(ITuningSpace*, HRESULT)).call(tuningspace)
  end
  def get_components(components : IComponents*) : HRESULT
    @lpVtbl.value.get_components.unsafe_as(Proc(IComponents*, HRESULT)).call(components)
  end
  def clone(newtunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ITuneRequest*, HRESULT)).call(newtunerequest)
  end
  def get_locator(locator : ILocator*) : HRESULT
    @lpVtbl.value.get_locator.unsafe_as(Proc(ILocator*, HRESULT)).call(locator)
  end
  def put_locator(locator : ILocator) : HRESULT
    @lpVtbl.value.put_locator.unsafe_as(Proc(ILocator, HRESULT)).call(locator)
  end
  def get_channel_id(channelid : UInt8**) : HRESULT
    @lpVtbl.value.get_channel_id.unsafe_as(Proc(UInt8**, HRESULT)).call(channelid)
  end
  def put_channel_id(channelid : UInt8*) : HRESULT
    @lpVtbl.value.put_channel_id.unsafe_as(Proc(UInt8*, HRESULT)).call(channelid)
  end
end
struct LibWin32::IChannelTuneRequest
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_tuning_space(tuningspace : ITuningSpace*) : HRESULT
    @lpVtbl.value.get_tuning_space.unsafe_as(Proc(ITuningSpace*, HRESULT)).call(tuningspace)
  end
  def get_components(components : IComponents*) : HRESULT
    @lpVtbl.value.get_components.unsafe_as(Proc(IComponents*, HRESULT)).call(components)
  end
  def clone(newtunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ITuneRequest*, HRESULT)).call(newtunerequest)
  end
  def get_locator(locator : ILocator*) : HRESULT
    @lpVtbl.value.get_locator.unsafe_as(Proc(ILocator*, HRESULT)).call(locator)
  end
  def put_locator(locator : ILocator) : HRESULT
    @lpVtbl.value.put_locator.unsafe_as(Proc(ILocator, HRESULT)).call(locator)
  end
  def get_channel(channel : Int32*) : HRESULT
    @lpVtbl.value.get_channel.unsafe_as(Proc(Int32*, HRESULT)).call(channel)
  end
  def put_channel(channel : Int32) : HRESULT
    @lpVtbl.value.put_channel.unsafe_as(Proc(Int32, HRESULT)).call(channel)
  end
end
struct LibWin32::IATSCChannelTuneRequest
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_tuning_space(tuningspace : ITuningSpace*) : HRESULT
    @lpVtbl.value.get_tuning_space.unsafe_as(Proc(ITuningSpace*, HRESULT)).call(tuningspace)
  end
  def get_components(components : IComponents*) : HRESULT
    @lpVtbl.value.get_components.unsafe_as(Proc(IComponents*, HRESULT)).call(components)
  end
  def clone(newtunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ITuneRequest*, HRESULT)).call(newtunerequest)
  end
  def get_locator(locator : ILocator*) : HRESULT
    @lpVtbl.value.get_locator.unsafe_as(Proc(ILocator*, HRESULT)).call(locator)
  end
  def put_locator(locator : ILocator) : HRESULT
    @lpVtbl.value.put_locator.unsafe_as(Proc(ILocator, HRESULT)).call(locator)
  end
  def get_channel(channel : Int32*) : HRESULT
    @lpVtbl.value.get_channel.unsafe_as(Proc(Int32*, HRESULT)).call(channel)
  end
  def put_channel(channel : Int32) : HRESULT
    @lpVtbl.value.put_channel.unsafe_as(Proc(Int32, HRESULT)).call(channel)
  end
  def get_minor_channel(minorchannel : Int32*) : HRESULT
    @lpVtbl.value.get_minor_channel.unsafe_as(Proc(Int32*, HRESULT)).call(minorchannel)
  end
  def put_minor_channel(minorchannel : Int32) : HRESULT
    @lpVtbl.value.put_minor_channel.unsafe_as(Proc(Int32, HRESULT)).call(minorchannel)
  end
end
struct LibWin32::IDigitalCableTuneRequest
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_tuning_space(tuningspace : ITuningSpace*) : HRESULT
    @lpVtbl.value.get_tuning_space.unsafe_as(Proc(ITuningSpace*, HRESULT)).call(tuningspace)
  end
  def get_components(components : IComponents*) : HRESULT
    @lpVtbl.value.get_components.unsafe_as(Proc(IComponents*, HRESULT)).call(components)
  end
  def clone(newtunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ITuneRequest*, HRESULT)).call(newtunerequest)
  end
  def get_locator(locator : ILocator*) : HRESULT
    @lpVtbl.value.get_locator.unsafe_as(Proc(ILocator*, HRESULT)).call(locator)
  end
  def put_locator(locator : ILocator) : HRESULT
    @lpVtbl.value.put_locator.unsafe_as(Proc(ILocator, HRESULT)).call(locator)
  end
  def get_channel(channel : Int32*) : HRESULT
    @lpVtbl.value.get_channel.unsafe_as(Proc(Int32*, HRESULT)).call(channel)
  end
  def put_channel(channel : Int32) : HRESULT
    @lpVtbl.value.put_channel.unsafe_as(Proc(Int32, HRESULT)).call(channel)
  end
  def get_minor_channel(minorchannel : Int32*) : HRESULT
    @lpVtbl.value.get_minor_channel.unsafe_as(Proc(Int32*, HRESULT)).call(minorchannel)
  end
  def put_minor_channel(minorchannel : Int32) : HRESULT
    @lpVtbl.value.put_minor_channel.unsafe_as(Proc(Int32, HRESULT)).call(minorchannel)
  end
  def get_major_channel(pmajorchannel : Int32*) : HRESULT
    @lpVtbl.value.get_major_channel.unsafe_as(Proc(Int32*, HRESULT)).call(pmajorchannel)
  end
  def put_major_channel(majorchannel : Int32) : HRESULT
    @lpVtbl.value.put_major_channel.unsafe_as(Proc(Int32, HRESULT)).call(majorchannel)
  end
  def get_source_id(psourceid : Int32*) : HRESULT
    @lpVtbl.value.get_source_id.unsafe_as(Proc(Int32*, HRESULT)).call(psourceid)
  end
  def put_source_id(sourceid : Int32) : HRESULT
    @lpVtbl.value.put_source_id.unsafe_as(Proc(Int32, HRESULT)).call(sourceid)
  end
end
struct LibWin32::IDVBTuneRequest
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_tuning_space(tuningspace : ITuningSpace*) : HRESULT
    @lpVtbl.value.get_tuning_space.unsafe_as(Proc(ITuningSpace*, HRESULT)).call(tuningspace)
  end
  def get_components(components : IComponents*) : HRESULT
    @lpVtbl.value.get_components.unsafe_as(Proc(IComponents*, HRESULT)).call(components)
  end
  def clone(newtunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ITuneRequest*, HRESULT)).call(newtunerequest)
  end
  def get_locator(locator : ILocator*) : HRESULT
    @lpVtbl.value.get_locator.unsafe_as(Proc(ILocator*, HRESULT)).call(locator)
  end
  def put_locator(locator : ILocator) : HRESULT
    @lpVtbl.value.put_locator.unsafe_as(Proc(ILocator, HRESULT)).call(locator)
  end
  def get_onid(onid : Int32*) : HRESULT
    @lpVtbl.value.get_onid.unsafe_as(Proc(Int32*, HRESULT)).call(onid)
  end
  def put_onid(onid : Int32) : HRESULT
    @lpVtbl.value.put_onid.unsafe_as(Proc(Int32, HRESULT)).call(onid)
  end
  def get_tsid(tsid : Int32*) : HRESULT
    @lpVtbl.value.get_tsid.unsafe_as(Proc(Int32*, HRESULT)).call(tsid)
  end
  def put_tsid(tsid : Int32) : HRESULT
    @lpVtbl.value.put_tsid.unsafe_as(Proc(Int32, HRESULT)).call(tsid)
  end
  def get_sid(sid : Int32*) : HRESULT
    @lpVtbl.value.get_sid.unsafe_as(Proc(Int32*, HRESULT)).call(sid)
  end
  def put_sid(sid : Int32) : HRESULT
    @lpVtbl.value.put_sid.unsafe_as(Proc(Int32, HRESULT)).call(sid)
  end
end
struct LibWin32::IMPEG2TuneRequest
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_tuning_space(tuningspace : ITuningSpace*) : HRESULT
    @lpVtbl.value.get_tuning_space.unsafe_as(Proc(ITuningSpace*, HRESULT)).call(tuningspace)
  end
  def get_components(components : IComponents*) : HRESULT
    @lpVtbl.value.get_components.unsafe_as(Proc(IComponents*, HRESULT)).call(components)
  end
  def clone(newtunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ITuneRequest*, HRESULT)).call(newtunerequest)
  end
  def get_locator(locator : ILocator*) : HRESULT
    @lpVtbl.value.get_locator.unsafe_as(Proc(ILocator*, HRESULT)).call(locator)
  end
  def put_locator(locator : ILocator) : HRESULT
    @lpVtbl.value.put_locator.unsafe_as(Proc(ILocator, HRESULT)).call(locator)
  end
  def get_tsid(tsid : Int32*) : HRESULT
    @lpVtbl.value.get_tsid.unsafe_as(Proc(Int32*, HRESULT)).call(tsid)
  end
  def put_tsid(tsid : Int32) : HRESULT
    @lpVtbl.value.put_tsid.unsafe_as(Proc(Int32, HRESULT)).call(tsid)
  end
  def get_prog_no(progno : Int32*) : HRESULT
    @lpVtbl.value.get_prog_no.unsafe_as(Proc(Int32*, HRESULT)).call(progno)
  end
  def put_prog_no(progno : Int32) : HRESULT
    @lpVtbl.value.put_prog_no.unsafe_as(Proc(Int32, HRESULT)).call(progno)
  end
end
struct LibWin32::IMPEG2TuneRequestFactory
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def create_tune_request(tuningspace : ITuningSpace, tunerequest : IMPEG2TuneRequest*) : HRESULT
    @lpVtbl.value.create_tune_request.unsafe_as(Proc(ITuningSpace, IMPEG2TuneRequest*, HRESULT)).call(tuningspace, tunerequest)
  end
end
struct LibWin32::IMPEG2TuneRequestSupport
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
end
struct LibWin32::ITunerCap
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_supported_network_types(ulcnetworktypesmax : UInt32, pulcnetworktypes : UInt32*, pguidnetworktypes : Guid*) : HRESULT
    @lpVtbl.value.get_supported_network_types.unsafe_as(Proc(UInt32, UInt32*, Guid*, HRESULT)).call(ulcnetworktypesmax, pulcnetworktypes, pguidnetworktypes)
  end
  def get_supported_video_formats(pulamtunermodetype : UInt32*, pulanalogvideostandard : UInt32*) : HRESULT
    @lpVtbl.value.get_supported_video_formats.unsafe_as(Proc(UInt32*, UInt32*, HRESULT)).call(pulamtunermodetype, pulanalogvideostandard)
  end
  def get_aux_input_count(pulcompositecount : UInt32*, pulsvideocount : UInt32*) : HRESULT
    @lpVtbl.value.get_aux_input_count.unsafe_as(Proc(UInt32*, UInt32*, HRESULT)).call(pulcompositecount, pulsvideocount)
  end
end
struct LibWin32::ITunerCapEx
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_has608_708_caption(pbhascaption : Int16*) : HRESULT
    @lpVtbl.value.get_has608_708_caption.unsafe_as(Proc(Int16*, HRESULT)).call(pbhascaption)
  end
end
struct LibWin32::ITuner
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tuning_space(tuningspace : ITuningSpace*) : HRESULT
    @lpVtbl.value.get_tuning_space.unsafe_as(Proc(ITuningSpace*, HRESULT)).call(tuningspace)
  end
  def put_tuning_space(tuningspace : ITuningSpace) : HRESULT
    @lpVtbl.value.put_tuning_space.unsafe_as(Proc(ITuningSpace, HRESULT)).call(tuningspace)
  end
  def enum_tuning_spaces(ppenum : IEnumTuningSpaces*) : HRESULT
    @lpVtbl.value.enum_tuning_spaces.unsafe_as(Proc(IEnumTuningSpaces*, HRESULT)).call(ppenum)
  end
  def get_tune_request(tunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.get_tune_request.unsafe_as(Proc(ITuneRequest*, HRESULT)).call(tunerequest)
  end
  def put_tune_request(tunerequest : ITuneRequest) : HRESULT
    @lpVtbl.value.put_tune_request.unsafe_as(Proc(ITuneRequest, HRESULT)).call(tunerequest)
  end
  def validate(tunerequest : ITuneRequest) : HRESULT
    @lpVtbl.value.validate.unsafe_as(Proc(ITuneRequest, HRESULT)).call(tunerequest)
  end
  def get_preferred_component_types(componenttypes : IComponentTypes*) : HRESULT
    @lpVtbl.value.get_preferred_component_types.unsafe_as(Proc(IComponentTypes*, HRESULT)).call(componenttypes)
  end
  def put_preferred_component_types(componenttypes : IComponentTypes) : HRESULT
    @lpVtbl.value.put_preferred_component_types.unsafe_as(Proc(IComponentTypes, HRESULT)).call(componenttypes)
  end
  def get_signal_strength(strength : Int32*) : HRESULT
    @lpVtbl.value.get_signal_strength.unsafe_as(Proc(Int32*, HRESULT)).call(strength)
  end
  def trigger_signal_events(interval : Int32) : HRESULT
    @lpVtbl.value.trigger_signal_events.unsafe_as(Proc(Int32, HRESULT)).call(interval)
  end
end
struct LibWin32::IScanningTuner
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tuning_space(tuningspace : ITuningSpace*) : HRESULT
    @lpVtbl.value.get_tuning_space.unsafe_as(Proc(ITuningSpace*, HRESULT)).call(tuningspace)
  end
  def put_tuning_space(tuningspace : ITuningSpace) : HRESULT
    @lpVtbl.value.put_tuning_space.unsafe_as(Proc(ITuningSpace, HRESULT)).call(tuningspace)
  end
  def enum_tuning_spaces(ppenum : IEnumTuningSpaces*) : HRESULT
    @lpVtbl.value.enum_tuning_spaces.unsafe_as(Proc(IEnumTuningSpaces*, HRESULT)).call(ppenum)
  end
  def get_tune_request(tunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.get_tune_request.unsafe_as(Proc(ITuneRequest*, HRESULT)).call(tunerequest)
  end
  def put_tune_request(tunerequest : ITuneRequest) : HRESULT
    @lpVtbl.value.put_tune_request.unsafe_as(Proc(ITuneRequest, HRESULT)).call(tunerequest)
  end
  def validate(tunerequest : ITuneRequest) : HRESULT
    @lpVtbl.value.validate.unsafe_as(Proc(ITuneRequest, HRESULT)).call(tunerequest)
  end
  def get_preferred_component_types(componenttypes : IComponentTypes*) : HRESULT
    @lpVtbl.value.get_preferred_component_types.unsafe_as(Proc(IComponentTypes*, HRESULT)).call(componenttypes)
  end
  def put_preferred_component_types(componenttypes : IComponentTypes) : HRESULT
    @lpVtbl.value.put_preferred_component_types.unsafe_as(Proc(IComponentTypes, HRESULT)).call(componenttypes)
  end
  def get_signal_strength(strength : Int32*) : HRESULT
    @lpVtbl.value.get_signal_strength.unsafe_as(Proc(Int32*, HRESULT)).call(strength)
  end
  def trigger_signal_events(interval : Int32) : HRESULT
    @lpVtbl.value.trigger_signal_events.unsafe_as(Proc(Int32, HRESULT)).call(interval)
  end
  def seek_up : HRESULT
    @lpVtbl.value.seek_up.unsafe_as(Proc(HRESULT)).call
  end
  def seek_down : HRESULT
    @lpVtbl.value.seek_down.unsafe_as(Proc(HRESULT)).call
  end
  def scan_up(millisecondspause : Int32) : HRESULT
    @lpVtbl.value.scan_up.unsafe_as(Proc(Int32, HRESULT)).call(millisecondspause)
  end
  def scan_down(millisecondspause : Int32) : HRESULT
    @lpVtbl.value.scan_down.unsafe_as(Proc(Int32, HRESULT)).call(millisecondspause)
  end
  def auto_program : HRESULT
    @lpVtbl.value.auto_program.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IScanningTunerEx
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tuning_space(tuningspace : ITuningSpace*) : HRESULT
    @lpVtbl.value.get_tuning_space.unsafe_as(Proc(ITuningSpace*, HRESULT)).call(tuningspace)
  end
  def put_tuning_space(tuningspace : ITuningSpace) : HRESULT
    @lpVtbl.value.put_tuning_space.unsafe_as(Proc(ITuningSpace, HRESULT)).call(tuningspace)
  end
  def enum_tuning_spaces(ppenum : IEnumTuningSpaces*) : HRESULT
    @lpVtbl.value.enum_tuning_spaces.unsafe_as(Proc(IEnumTuningSpaces*, HRESULT)).call(ppenum)
  end
  def get_tune_request(tunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.get_tune_request.unsafe_as(Proc(ITuneRequest*, HRESULT)).call(tunerequest)
  end
  def put_tune_request(tunerequest : ITuneRequest) : HRESULT
    @lpVtbl.value.put_tune_request.unsafe_as(Proc(ITuneRequest, HRESULT)).call(tunerequest)
  end
  def validate(tunerequest : ITuneRequest) : HRESULT
    @lpVtbl.value.validate.unsafe_as(Proc(ITuneRequest, HRESULT)).call(tunerequest)
  end
  def get_preferred_component_types(componenttypes : IComponentTypes*) : HRESULT
    @lpVtbl.value.get_preferred_component_types.unsafe_as(Proc(IComponentTypes*, HRESULT)).call(componenttypes)
  end
  def put_preferred_component_types(componenttypes : IComponentTypes) : HRESULT
    @lpVtbl.value.put_preferred_component_types.unsafe_as(Proc(IComponentTypes, HRESULT)).call(componenttypes)
  end
  def get_signal_strength(strength : Int32*) : HRESULT
    @lpVtbl.value.get_signal_strength.unsafe_as(Proc(Int32*, HRESULT)).call(strength)
  end
  def trigger_signal_events(interval : Int32) : HRESULT
    @lpVtbl.value.trigger_signal_events.unsafe_as(Proc(Int32, HRESULT)).call(interval)
  end
  def seek_up : HRESULT
    @lpVtbl.value.seek_up.unsafe_as(Proc(HRESULT)).call
  end
  def seek_down : HRESULT
    @lpVtbl.value.seek_down.unsafe_as(Proc(HRESULT)).call
  end
  def scan_up(millisecondspause : Int32) : HRESULT
    @lpVtbl.value.scan_up.unsafe_as(Proc(Int32, HRESULT)).call(millisecondspause)
  end
  def scan_down(millisecondspause : Int32) : HRESULT
    @lpVtbl.value.scan_down.unsafe_as(Proc(Int32, HRESULT)).call(millisecondspause)
  end
  def auto_program : HRESULT
    @lpVtbl.value.auto_program.unsafe_as(Proc(HRESULT)).call
  end
  def get_current_locator(pilocator : ILocator*) : HRESULT
    @lpVtbl.value.get_current_locator.unsafe_as(Proc(ILocator*, HRESULT)).call(pilocator)
  end
  def perform_exhaustive_scan(dwlowerfreq : Int32, dwhigherfreq : Int32, bfinetune : Int16, hevent : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.perform_exhaustive_scan.unsafe_as(Proc(Int32, Int32, Int16, LibC::UINT_PTR, HRESULT)).call(dwlowerfreq, dwhigherfreq, bfinetune, hevent)
  end
  def terminate_current_scan(pcurrentfreq : Int32*) : HRESULT
    @lpVtbl.value.terminate_current_scan.unsafe_as(Proc(Int32*, HRESULT)).call(pcurrentfreq)
  end
  def resume_current_scan(hevent : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.resume_current_scan.unsafe_as(Proc(LibC::UINT_PTR, HRESULT)).call(hevent)
  end
  def get_tuner_scanning_capability(hardwareassistedscanning : Int32*, numstandardssupported : Int32*, broadcaststandards : Guid*) : HRESULT
    @lpVtbl.value.get_tuner_scanning_capability.unsafe_as(Proc(Int32*, Int32*, Guid*, HRESULT)).call(hardwareassistedscanning, numstandardssupported, broadcaststandards)
  end
  def get_tuner_status(secondsleft : Int32*, currentlocktype : Int32*, autodetect : Int32*, currentfreq : Int32*) : HRESULT
    @lpVtbl.value.get_tuner_status.unsafe_as(Proc(Int32*, Int32*, Int32*, Int32*, HRESULT)).call(secondsleft, currentlocktype, autodetect, currentfreq)
  end
  def get_current_tuner_standard_capability(currentbroadcaststandard : Guid, settlingtime : Int32*, tvstandardssupported : Int32*) : HRESULT
    @lpVtbl.value.get_current_tuner_standard_capability.unsafe_as(Proc(Guid, Int32*, Int32*, HRESULT)).call(currentbroadcaststandard, settlingtime, tvstandardssupported)
  end
  def set_scan_signal_type_filter(scanmodulationtypes : Int32, analogvideostandard : Int32) : HRESULT
    @lpVtbl.value.set_scan_signal_type_filter.unsafe_as(Proc(Int32, Int32, HRESULT)).call(scanmodulationtypes, analogvideostandard)
  end
end
struct LibWin32::IComponentType
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_category(category : ComponentCategory*) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(ComponentCategory*, HRESULT)).call(category)
  end
  def put_category(category : ComponentCategory) : HRESULT
    @lpVtbl.value.put_category.unsafe_as(Proc(ComponentCategory, HRESULT)).call(category)
  end
  def get_media_major_type(mediamajortype : UInt8**) : HRESULT
    @lpVtbl.value.get_media_major_type.unsafe_as(Proc(UInt8**, HRESULT)).call(mediamajortype)
  end
  def put_media_major_type(mediamajortype : UInt8*) : HRESULT
    @lpVtbl.value.put_media_major_type.unsafe_as(Proc(UInt8*, HRESULT)).call(mediamajortype)
  end
  def get__media_major_type(mediamajortypeguid : Guid*) : HRESULT
    @lpVtbl.value.get__media_major_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediamajortypeguid)
  end
  def put__media_major_type(mediamajortypeguid : Guid*) : HRESULT
    @lpVtbl.value.put__media_major_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediamajortypeguid)
  end
  def get_media_sub_type(mediasubtype : UInt8**) : HRESULT
    @lpVtbl.value.get_media_sub_type.unsafe_as(Proc(UInt8**, HRESULT)).call(mediasubtype)
  end
  def put_media_sub_type(mediasubtype : UInt8*) : HRESULT
    @lpVtbl.value.put_media_sub_type.unsafe_as(Proc(UInt8*, HRESULT)).call(mediasubtype)
  end
  def get__media_sub_type(mediasubtypeguid : Guid*) : HRESULT
    @lpVtbl.value.get__media_sub_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediasubtypeguid)
  end
  def put__media_sub_type(mediasubtypeguid : Guid*) : HRESULT
    @lpVtbl.value.put__media_sub_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediasubtypeguid)
  end
  def get_media_format_type(mediaformattype : UInt8**) : HRESULT
    @lpVtbl.value.get_media_format_type.unsafe_as(Proc(UInt8**, HRESULT)).call(mediaformattype)
  end
  def put_media_format_type(mediaformattype : UInt8*) : HRESULT
    @lpVtbl.value.put_media_format_type.unsafe_as(Proc(UInt8*, HRESULT)).call(mediaformattype)
  end
  def get__media_format_type(mediaformattypeguid : Guid*) : HRESULT
    @lpVtbl.value.get__media_format_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediaformattypeguid)
  end
  def put__media_format_type(mediaformattypeguid : Guid*) : HRESULT
    @lpVtbl.value.put__media_format_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediaformattypeguid)
  end
  def get_media_type(mediatype : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.get_media_type.unsafe_as(Proc(AM_MEDIA_TYPE*, HRESULT)).call(mediatype)
  end
  def put_media_type(mediatype : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.put_media_type.unsafe_as(Proc(AM_MEDIA_TYPE*, HRESULT)).call(mediatype)
  end
  def clone(newct : IComponentType*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(IComponentType*, HRESULT)).call(newct)
  end
end
struct LibWin32::ILanguageComponentType
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_category(category : ComponentCategory*) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(ComponentCategory*, HRESULT)).call(category)
  end
  def put_category(category : ComponentCategory) : HRESULT
    @lpVtbl.value.put_category.unsafe_as(Proc(ComponentCategory, HRESULT)).call(category)
  end
  def get_media_major_type(mediamajortype : UInt8**) : HRESULT
    @lpVtbl.value.get_media_major_type.unsafe_as(Proc(UInt8**, HRESULT)).call(mediamajortype)
  end
  def put_media_major_type(mediamajortype : UInt8*) : HRESULT
    @lpVtbl.value.put_media_major_type.unsafe_as(Proc(UInt8*, HRESULT)).call(mediamajortype)
  end
  def get__media_major_type(mediamajortypeguid : Guid*) : HRESULT
    @lpVtbl.value.get__media_major_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediamajortypeguid)
  end
  def put__media_major_type(mediamajortypeguid : Guid*) : HRESULT
    @lpVtbl.value.put__media_major_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediamajortypeguid)
  end
  def get_media_sub_type(mediasubtype : UInt8**) : HRESULT
    @lpVtbl.value.get_media_sub_type.unsafe_as(Proc(UInt8**, HRESULT)).call(mediasubtype)
  end
  def put_media_sub_type(mediasubtype : UInt8*) : HRESULT
    @lpVtbl.value.put_media_sub_type.unsafe_as(Proc(UInt8*, HRESULT)).call(mediasubtype)
  end
  def get__media_sub_type(mediasubtypeguid : Guid*) : HRESULT
    @lpVtbl.value.get__media_sub_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediasubtypeguid)
  end
  def put__media_sub_type(mediasubtypeguid : Guid*) : HRESULT
    @lpVtbl.value.put__media_sub_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediasubtypeguid)
  end
  def get_media_format_type(mediaformattype : UInt8**) : HRESULT
    @lpVtbl.value.get_media_format_type.unsafe_as(Proc(UInt8**, HRESULT)).call(mediaformattype)
  end
  def put_media_format_type(mediaformattype : UInt8*) : HRESULT
    @lpVtbl.value.put_media_format_type.unsafe_as(Proc(UInt8*, HRESULT)).call(mediaformattype)
  end
  def get__media_format_type(mediaformattypeguid : Guid*) : HRESULT
    @lpVtbl.value.get__media_format_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediaformattypeguid)
  end
  def put__media_format_type(mediaformattypeguid : Guid*) : HRESULT
    @lpVtbl.value.put__media_format_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediaformattypeguid)
  end
  def get_media_type(mediatype : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.get_media_type.unsafe_as(Proc(AM_MEDIA_TYPE*, HRESULT)).call(mediatype)
  end
  def put_media_type(mediatype : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.put_media_type.unsafe_as(Proc(AM_MEDIA_TYPE*, HRESULT)).call(mediatype)
  end
  def clone(newct : IComponentType*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(IComponentType*, HRESULT)).call(newct)
  end
  def get_lang_id(langid : Int32*) : HRESULT
    @lpVtbl.value.get_lang_id.unsafe_as(Proc(Int32*, HRESULT)).call(langid)
  end
  def put_lang_id(langid : Int32) : HRESULT
    @lpVtbl.value.put_lang_id.unsafe_as(Proc(Int32, HRESULT)).call(langid)
  end
end
struct LibWin32::IMPEG2ComponentType
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_category(category : ComponentCategory*) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(ComponentCategory*, HRESULT)).call(category)
  end
  def put_category(category : ComponentCategory) : HRESULT
    @lpVtbl.value.put_category.unsafe_as(Proc(ComponentCategory, HRESULT)).call(category)
  end
  def get_media_major_type(mediamajortype : UInt8**) : HRESULT
    @lpVtbl.value.get_media_major_type.unsafe_as(Proc(UInt8**, HRESULT)).call(mediamajortype)
  end
  def put_media_major_type(mediamajortype : UInt8*) : HRESULT
    @lpVtbl.value.put_media_major_type.unsafe_as(Proc(UInt8*, HRESULT)).call(mediamajortype)
  end
  def get__media_major_type(mediamajortypeguid : Guid*) : HRESULT
    @lpVtbl.value.get__media_major_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediamajortypeguid)
  end
  def put__media_major_type(mediamajortypeguid : Guid*) : HRESULT
    @lpVtbl.value.put__media_major_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediamajortypeguid)
  end
  def get_media_sub_type(mediasubtype : UInt8**) : HRESULT
    @lpVtbl.value.get_media_sub_type.unsafe_as(Proc(UInt8**, HRESULT)).call(mediasubtype)
  end
  def put_media_sub_type(mediasubtype : UInt8*) : HRESULT
    @lpVtbl.value.put_media_sub_type.unsafe_as(Proc(UInt8*, HRESULT)).call(mediasubtype)
  end
  def get__media_sub_type(mediasubtypeguid : Guid*) : HRESULT
    @lpVtbl.value.get__media_sub_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediasubtypeguid)
  end
  def put__media_sub_type(mediasubtypeguid : Guid*) : HRESULT
    @lpVtbl.value.put__media_sub_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediasubtypeguid)
  end
  def get_media_format_type(mediaformattype : UInt8**) : HRESULT
    @lpVtbl.value.get_media_format_type.unsafe_as(Proc(UInt8**, HRESULT)).call(mediaformattype)
  end
  def put_media_format_type(mediaformattype : UInt8*) : HRESULT
    @lpVtbl.value.put_media_format_type.unsafe_as(Proc(UInt8*, HRESULT)).call(mediaformattype)
  end
  def get__media_format_type(mediaformattypeguid : Guid*) : HRESULT
    @lpVtbl.value.get__media_format_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediaformattypeguid)
  end
  def put__media_format_type(mediaformattypeguid : Guid*) : HRESULT
    @lpVtbl.value.put__media_format_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediaformattypeguid)
  end
  def get_media_type(mediatype : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.get_media_type.unsafe_as(Proc(AM_MEDIA_TYPE*, HRESULT)).call(mediatype)
  end
  def put_media_type(mediatype : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.put_media_type.unsafe_as(Proc(AM_MEDIA_TYPE*, HRESULT)).call(mediatype)
  end
  def clone(newct : IComponentType*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(IComponentType*, HRESULT)).call(newct)
  end
  def get_lang_id(langid : Int32*) : HRESULT
    @lpVtbl.value.get_lang_id.unsafe_as(Proc(Int32*, HRESULT)).call(langid)
  end
  def put_lang_id(langid : Int32) : HRESULT
    @lpVtbl.value.put_lang_id.unsafe_as(Proc(Int32, HRESULT)).call(langid)
  end
  def get_stream_type(mp2streamtype : MPEG2StreamType*) : HRESULT
    @lpVtbl.value.get_stream_type.unsafe_as(Proc(MPEG2StreamType*, HRESULT)).call(mp2streamtype)
  end
  def put_stream_type(mp2streamtype : MPEG2StreamType) : HRESULT
    @lpVtbl.value.put_stream_type.unsafe_as(Proc(MPEG2StreamType, HRESULT)).call(mp2streamtype)
  end
end
struct LibWin32::IATSCComponentType
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_category(category : ComponentCategory*) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(ComponentCategory*, HRESULT)).call(category)
  end
  def put_category(category : ComponentCategory) : HRESULT
    @lpVtbl.value.put_category.unsafe_as(Proc(ComponentCategory, HRESULT)).call(category)
  end
  def get_media_major_type(mediamajortype : UInt8**) : HRESULT
    @lpVtbl.value.get_media_major_type.unsafe_as(Proc(UInt8**, HRESULT)).call(mediamajortype)
  end
  def put_media_major_type(mediamajortype : UInt8*) : HRESULT
    @lpVtbl.value.put_media_major_type.unsafe_as(Proc(UInt8*, HRESULT)).call(mediamajortype)
  end
  def get__media_major_type(mediamajortypeguid : Guid*) : HRESULT
    @lpVtbl.value.get__media_major_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediamajortypeguid)
  end
  def put__media_major_type(mediamajortypeguid : Guid*) : HRESULT
    @lpVtbl.value.put__media_major_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediamajortypeguid)
  end
  def get_media_sub_type(mediasubtype : UInt8**) : HRESULT
    @lpVtbl.value.get_media_sub_type.unsafe_as(Proc(UInt8**, HRESULT)).call(mediasubtype)
  end
  def put_media_sub_type(mediasubtype : UInt8*) : HRESULT
    @lpVtbl.value.put_media_sub_type.unsafe_as(Proc(UInt8*, HRESULT)).call(mediasubtype)
  end
  def get__media_sub_type(mediasubtypeguid : Guid*) : HRESULT
    @lpVtbl.value.get__media_sub_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediasubtypeguid)
  end
  def put__media_sub_type(mediasubtypeguid : Guid*) : HRESULT
    @lpVtbl.value.put__media_sub_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediasubtypeguid)
  end
  def get_media_format_type(mediaformattype : UInt8**) : HRESULT
    @lpVtbl.value.get_media_format_type.unsafe_as(Proc(UInt8**, HRESULT)).call(mediaformattype)
  end
  def put_media_format_type(mediaformattype : UInt8*) : HRESULT
    @lpVtbl.value.put_media_format_type.unsafe_as(Proc(UInt8*, HRESULT)).call(mediaformattype)
  end
  def get__media_format_type(mediaformattypeguid : Guid*) : HRESULT
    @lpVtbl.value.get__media_format_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediaformattypeguid)
  end
  def put__media_format_type(mediaformattypeguid : Guid*) : HRESULT
    @lpVtbl.value.put__media_format_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediaformattypeguid)
  end
  def get_media_type(mediatype : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.get_media_type.unsafe_as(Proc(AM_MEDIA_TYPE*, HRESULT)).call(mediatype)
  end
  def put_media_type(mediatype : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.put_media_type.unsafe_as(Proc(AM_MEDIA_TYPE*, HRESULT)).call(mediatype)
  end
  def clone(newct : IComponentType*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(IComponentType*, HRESULT)).call(newct)
  end
  def get_lang_id(langid : Int32*) : HRESULT
    @lpVtbl.value.get_lang_id.unsafe_as(Proc(Int32*, HRESULT)).call(langid)
  end
  def put_lang_id(langid : Int32) : HRESULT
    @lpVtbl.value.put_lang_id.unsafe_as(Proc(Int32, HRESULT)).call(langid)
  end
  def get_stream_type(mp2streamtype : MPEG2StreamType*) : HRESULT
    @lpVtbl.value.get_stream_type.unsafe_as(Proc(MPEG2StreamType*, HRESULT)).call(mp2streamtype)
  end
  def put_stream_type(mp2streamtype : MPEG2StreamType) : HRESULT
    @lpVtbl.value.put_stream_type.unsafe_as(Proc(MPEG2StreamType, HRESULT)).call(mp2streamtype)
  end
  def get_flags(flags : Int32*) : HRESULT
    @lpVtbl.value.get_flags.unsafe_as(Proc(Int32*, HRESULT)).call(flags)
  end
  def put_flags(flags : Int32) : HRESULT
    @lpVtbl.value.put_flags.unsafe_as(Proc(Int32, HRESULT)).call(flags)
  end
end
struct LibWin32::IEnumComponentTypes
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def next(celt : UInt32, rgelt : IComponentType*, pceltfetched : UInt32*) : HRESULT
    @lpVtbl.value.next.unsafe_as(Proc(UInt32, IComponentType*, UInt32*, HRESULT)).call(celt, rgelt, pceltfetched)
  end
  def skip(celt : UInt32) : HRESULT
    @lpVtbl.value.skip.unsafe_as(Proc(UInt32, HRESULT)).call(celt)
  end
  def reset : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(HRESULT)).call
  end
  def clone(ppenum : IEnumComponentTypes*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(IEnumComponentTypes*, HRESULT)).call(ppenum)
  end
end
struct LibWin32::IComponentTypes
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_count(count : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(count)
  end
  def get__new_enum(ppnewenum : IEnumVARIANT*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IEnumVARIANT*, HRESULT)).call(ppnewenum)
  end
  def enum_component_types(ppnewenum : IEnumComponentTypes*) : HRESULT
    @lpVtbl.value.enum_component_types.unsafe_as(Proc(IEnumComponentTypes*, HRESULT)).call(ppnewenum)
  end
  def get_item(index : VARIANT, componenttype : IComponentType*) : HRESULT
    @lpVtbl.value.get_item.unsafe_as(Proc(VARIANT, IComponentType*, HRESULT)).call(index, componenttype)
  end
  def put_item(index : VARIANT, componenttype : IComponentType) : HRESULT
    @lpVtbl.value.put_item.unsafe_as(Proc(VARIANT, IComponentType, HRESULT)).call(index, componenttype)
  end
  def add(componenttype : IComponentType, newindex : VARIANT*) : HRESULT
    @lpVtbl.value.add.unsafe_as(Proc(IComponentType, VARIANT*, HRESULT)).call(componenttype, newindex)
  end
  def remove(index : VARIANT) : HRESULT
    @lpVtbl.value.remove.unsafe_as(Proc(VARIANT, HRESULT)).call(index)
  end
  def clone(newlist : IComponentTypes*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(IComponentTypes*, HRESULT)).call(newlist)
  end
end
struct LibWin32::IComponent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_type(ct : IComponentType*) : HRESULT
    @lpVtbl.value.get_type.unsafe_as(Proc(IComponentType*, HRESULT)).call(ct)
  end
  def put_type(ct : IComponentType) : HRESULT
    @lpVtbl.value.put_type.unsafe_as(Proc(IComponentType, HRESULT)).call(ct)
  end
  def get_desc_lang_id(langid : Int32*) : HRESULT
    @lpVtbl.value.get_desc_lang_id.unsafe_as(Proc(Int32*, HRESULT)).call(langid)
  end
  def put_desc_lang_id(langid : Int32) : HRESULT
    @lpVtbl.value.put_desc_lang_id.unsafe_as(Proc(Int32, HRESULT)).call(langid)
  end
  def get_status(status : ComponentStatus*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(ComponentStatus*, HRESULT)).call(status)
  end
  def put_status(status : ComponentStatus) : HRESULT
    @lpVtbl.value.put_status.unsafe_as(Proc(ComponentStatus, HRESULT)).call(status)
  end
  def get_description(description : UInt8**) : HRESULT
    @lpVtbl.value.get_description.unsafe_as(Proc(UInt8**, HRESULT)).call(description)
  end
  def put_description(description : UInt8*) : HRESULT
    @lpVtbl.value.put_description.unsafe_as(Proc(UInt8*, HRESULT)).call(description)
  end
  def clone(newcomponent : IComponent*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(IComponent*, HRESULT)).call(newcomponent)
  end
end
struct LibWin32::IAnalogAudioComponentType
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_category(category : ComponentCategory*) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(ComponentCategory*, HRESULT)).call(category)
  end
  def put_category(category : ComponentCategory) : HRESULT
    @lpVtbl.value.put_category.unsafe_as(Proc(ComponentCategory, HRESULT)).call(category)
  end
  def get_media_major_type(mediamajortype : UInt8**) : HRESULT
    @lpVtbl.value.get_media_major_type.unsafe_as(Proc(UInt8**, HRESULT)).call(mediamajortype)
  end
  def put_media_major_type(mediamajortype : UInt8*) : HRESULT
    @lpVtbl.value.put_media_major_type.unsafe_as(Proc(UInt8*, HRESULT)).call(mediamajortype)
  end
  def get__media_major_type(mediamajortypeguid : Guid*) : HRESULT
    @lpVtbl.value.get__media_major_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediamajortypeguid)
  end
  def put__media_major_type(mediamajortypeguid : Guid*) : HRESULT
    @lpVtbl.value.put__media_major_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediamajortypeguid)
  end
  def get_media_sub_type(mediasubtype : UInt8**) : HRESULT
    @lpVtbl.value.get_media_sub_type.unsafe_as(Proc(UInt8**, HRESULT)).call(mediasubtype)
  end
  def put_media_sub_type(mediasubtype : UInt8*) : HRESULT
    @lpVtbl.value.put_media_sub_type.unsafe_as(Proc(UInt8*, HRESULT)).call(mediasubtype)
  end
  def get__media_sub_type(mediasubtypeguid : Guid*) : HRESULT
    @lpVtbl.value.get__media_sub_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediasubtypeguid)
  end
  def put__media_sub_type(mediasubtypeguid : Guid*) : HRESULT
    @lpVtbl.value.put__media_sub_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediasubtypeguid)
  end
  def get_media_format_type(mediaformattype : UInt8**) : HRESULT
    @lpVtbl.value.get_media_format_type.unsafe_as(Proc(UInt8**, HRESULT)).call(mediaformattype)
  end
  def put_media_format_type(mediaformattype : UInt8*) : HRESULT
    @lpVtbl.value.put_media_format_type.unsafe_as(Proc(UInt8*, HRESULT)).call(mediaformattype)
  end
  def get__media_format_type(mediaformattypeguid : Guid*) : HRESULT
    @lpVtbl.value.get__media_format_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediaformattypeguid)
  end
  def put__media_format_type(mediaformattypeguid : Guid*) : HRESULT
    @lpVtbl.value.put__media_format_type.unsafe_as(Proc(Guid*, HRESULT)).call(mediaformattypeguid)
  end
  def get_media_type(mediatype : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.get_media_type.unsafe_as(Proc(AM_MEDIA_TYPE*, HRESULT)).call(mediatype)
  end
  def put_media_type(mediatype : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.put_media_type.unsafe_as(Proc(AM_MEDIA_TYPE*, HRESULT)).call(mediatype)
  end
  def clone(newct : IComponentType*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(IComponentType*, HRESULT)).call(newct)
  end
  def get_analog_audio_mode(mode : TVAudioMode*) : HRESULT
    @lpVtbl.value.get_analog_audio_mode.unsafe_as(Proc(TVAudioMode*, HRESULT)).call(mode)
  end
  def put_analog_audio_mode(mode : TVAudioMode) : HRESULT
    @lpVtbl.value.put_analog_audio_mode.unsafe_as(Proc(TVAudioMode, HRESULT)).call(mode)
  end
end
struct LibWin32::IMPEG2Component
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(lpconsole : IConsole) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IConsole, HRESULT)).call(lpconsole)
  end
  def notify(lpdataobject : IDataObject, event : MMC_NOTIFY_TYPE, arg : LPARAM, param3 : LPARAM) : HRESULT
    @lpVtbl.value.notify.unsafe_as(Proc(IDataObject, MMC_NOTIFY_TYPE, LPARAM, LPARAM, HRESULT)).call(lpdataobject, event, arg, param3)
  end
  def destroy(cookie : LibC::IntPtrT) : HRESULT
    @lpVtbl.value.destroy.unsafe_as(Proc(LibC::IntPtrT, HRESULT)).call(cookie)
  end
  def query_data_object(cookie : LibC::IntPtrT, type : DATA_OBJECT_TYPES, ppdataobject : IDataObject*) : HRESULT
    @lpVtbl.value.query_data_object.unsafe_as(Proc(LibC::IntPtrT, DATA_OBJECT_TYPES, IDataObject*, HRESULT)).call(cookie, type, ppdataobject)
  end
  def get_result_view_type(cookie : LibC::IntPtrT, ppviewtype : LibC::LPWSTR*, pviewoptions : Int32*) : HRESULT
    @lpVtbl.value.get_result_view_type.unsafe_as(Proc(LibC::IntPtrT, LibC::LPWSTR*, Int32*, HRESULT)).call(cookie, ppviewtype, pviewoptions)
  end
  def get_display_info(presultdataitem : RESULTDATAITEM*) : HRESULT
    @lpVtbl.value.get_display_info.unsafe_as(Proc(RESULTDATAITEM*, HRESULT)).call(presultdataitem)
  end
  def compare_objects(lpdataobjecta : IDataObject, lpdataobjectb : IDataObject) : HRESULT
    @lpVtbl.value.compare_objects.unsafe_as(Proc(IDataObject, IDataObject, HRESULT)).call(lpdataobjecta, lpdataobjectb)
  end
  def get_pid(pid : Int32*) : HRESULT
    @lpVtbl.value.get_pid.unsafe_as(Proc(Int32*, HRESULT)).call(pid)
  end
  def put_pid(pid : Int32) : HRESULT
    @lpVtbl.value.put_pid.unsafe_as(Proc(Int32, HRESULT)).call(pid)
  end
  def get_pcrpid(pcrpid : Int32*) : HRESULT
    @lpVtbl.value.get_pcrpid.unsafe_as(Proc(Int32*, HRESULT)).call(pcrpid)
  end
  def put_pcrpid(pcrpid : Int32) : HRESULT
    @lpVtbl.value.put_pcrpid.unsafe_as(Proc(Int32, HRESULT)).call(pcrpid)
  end
  def get_program_number(programnumber : Int32*) : HRESULT
    @lpVtbl.value.get_program_number.unsafe_as(Proc(Int32*, HRESULT)).call(programnumber)
  end
  def put_program_number(programnumber : Int32) : HRESULT
    @lpVtbl.value.put_program_number.unsafe_as(Proc(Int32, HRESULT)).call(programnumber)
  end
end
struct LibWin32::IEnumComponents
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def next(celt : UInt32, rgelt : IComponent*, pceltfetched : UInt32*) : HRESULT
    @lpVtbl.value.next.unsafe_as(Proc(UInt32, IComponent*, UInt32*, HRESULT)).call(celt, rgelt, pceltfetched)
  end
  def skip(celt : UInt32) : HRESULT
    @lpVtbl.value.skip.unsafe_as(Proc(UInt32, HRESULT)).call(celt)
  end
  def reset : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(HRESULT)).call
  end
  def clone(ppenum : IEnumComponents*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(IEnumComponents*, HRESULT)).call(ppenum)
  end
end
struct LibWin32::IComponents
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_count(count : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(count)
  end
  def get__new_enum(ppnewenum : IEnumVARIANT*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IEnumVARIANT*, HRESULT)).call(ppnewenum)
  end
  def enum_components(ppnewenum : IEnumComponents*) : HRESULT
    @lpVtbl.value.enum_components.unsafe_as(Proc(IEnumComponents*, HRESULT)).call(ppnewenum)
  end
  def get_item(index : VARIANT, ppcomponent : IComponent*) : HRESULT
    @lpVtbl.value.get_item.unsafe_as(Proc(VARIANT, IComponent*, HRESULT)).call(index, ppcomponent)
  end
  def add(component : IComponent, newindex : VARIANT*) : HRESULT
    @lpVtbl.value.add.unsafe_as(Proc(IComponent, VARIANT*, HRESULT)).call(component, newindex)
  end
  def remove(index : VARIANT) : HRESULT
    @lpVtbl.value.remove.unsafe_as(Proc(VARIANT, HRESULT)).call(index)
  end
  def clone(newlist : IComponents*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(IComponents*, HRESULT)).call(newlist)
  end
  def put_item(index : VARIANT, ppcomponent : IComponent) : HRESULT
    @lpVtbl.value.put_item.unsafe_as(Proc(VARIANT, IComponent, HRESULT)).call(index, ppcomponent)
  end
end
struct LibWin32::IComponentsOld
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_count(count : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(count)
  end
  def get__new_enum(ppnewenum : IEnumVARIANT*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IEnumVARIANT*, HRESULT)).call(ppnewenum)
  end
  def enum_components(ppnewenum : IEnumComponents*) : HRESULT
    @lpVtbl.value.enum_components.unsafe_as(Proc(IEnumComponents*, HRESULT)).call(ppnewenum)
  end
  def get_item(index : VARIANT, ppcomponent : IComponent*) : HRESULT
    @lpVtbl.value.get_item.unsafe_as(Proc(VARIANT, IComponent*, HRESULT)).call(index, ppcomponent)
  end
  def add(component : IComponent, newindex : VARIANT*) : HRESULT
    @lpVtbl.value.add.unsafe_as(Proc(IComponent, VARIANT*, HRESULT)).call(component, newindex)
  end
  def remove(index : VARIANT) : HRESULT
    @lpVtbl.value.remove.unsafe_as(Proc(VARIANT, HRESULT)).call(index)
  end
  def clone(newlist : IComponents*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(IComponents*, HRESULT)).call(newlist)
  end
end
struct LibWin32::ILocator
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_carrier_frequency(frequency : Int32*) : HRESULT
    @lpVtbl.value.get_carrier_frequency.unsafe_as(Proc(Int32*, HRESULT)).call(frequency)
  end
  def put_carrier_frequency(frequency : Int32) : HRESULT
    @lpVtbl.value.put_carrier_frequency.unsafe_as(Proc(Int32, HRESULT)).call(frequency)
  end
  def get_inner_fec(fec : FECMethod*) : HRESULT
    @lpVtbl.value.get_inner_fec.unsafe_as(Proc(FECMethod*, HRESULT)).call(fec)
  end
  def put_inner_fec(fec : FECMethod) : HRESULT
    @lpVtbl.value.put_inner_fec.unsafe_as(Proc(FECMethod, HRESULT)).call(fec)
  end
  def get_inner_fec_rate(fec : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(fec)
  end
  def put_inner_fec_rate(fec : BinaryConvolutionCodeRate) : HRESULT
    @lpVtbl.value.put_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate, HRESULT)).call(fec)
  end
  def get_outer_fec(fec : FECMethod*) : HRESULT
    @lpVtbl.value.get_outer_fec.unsafe_as(Proc(FECMethod*, HRESULT)).call(fec)
  end
  def put_outer_fec(fec : FECMethod) : HRESULT
    @lpVtbl.value.put_outer_fec.unsafe_as(Proc(FECMethod, HRESULT)).call(fec)
  end
  def get_outer_fec_rate(fec : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(fec)
  end
  def put_outer_fec_rate(fec : BinaryConvolutionCodeRate) : HRESULT
    @lpVtbl.value.put_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate, HRESULT)).call(fec)
  end
  def get_modulation(modulation : ModulationType*) : HRESULT
    @lpVtbl.value.get_modulation.unsafe_as(Proc(ModulationType*, HRESULT)).call(modulation)
  end
  def put_modulation(modulation : ModulationType) : HRESULT
    @lpVtbl.value.put_modulation.unsafe_as(Proc(ModulationType, HRESULT)).call(modulation)
  end
  def get_symbol_rate(rate : Int32*) : HRESULT
    @lpVtbl.value.get_symbol_rate.unsafe_as(Proc(Int32*, HRESULT)).call(rate)
  end
  def put_symbol_rate(rate : Int32) : HRESULT
    @lpVtbl.value.put_symbol_rate.unsafe_as(Proc(Int32, HRESULT)).call(rate)
  end
  def clone(newlocator : ILocator*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ILocator*, HRESULT)).call(newlocator)
  end
end
struct LibWin32::IAnalogLocator
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_carrier_frequency(frequency : Int32*) : HRESULT
    @lpVtbl.value.get_carrier_frequency.unsafe_as(Proc(Int32*, HRESULT)).call(frequency)
  end
  def put_carrier_frequency(frequency : Int32) : HRESULT
    @lpVtbl.value.put_carrier_frequency.unsafe_as(Proc(Int32, HRESULT)).call(frequency)
  end
  def get_inner_fec(fec : FECMethod*) : HRESULT
    @lpVtbl.value.get_inner_fec.unsafe_as(Proc(FECMethod*, HRESULT)).call(fec)
  end
  def put_inner_fec(fec : FECMethod) : HRESULT
    @lpVtbl.value.put_inner_fec.unsafe_as(Proc(FECMethod, HRESULT)).call(fec)
  end
  def get_inner_fec_rate(fec : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(fec)
  end
  def put_inner_fec_rate(fec : BinaryConvolutionCodeRate) : HRESULT
    @lpVtbl.value.put_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate, HRESULT)).call(fec)
  end
  def get_outer_fec(fec : FECMethod*) : HRESULT
    @lpVtbl.value.get_outer_fec.unsafe_as(Proc(FECMethod*, HRESULT)).call(fec)
  end
  def put_outer_fec(fec : FECMethod) : HRESULT
    @lpVtbl.value.put_outer_fec.unsafe_as(Proc(FECMethod, HRESULT)).call(fec)
  end
  def get_outer_fec_rate(fec : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(fec)
  end
  def put_outer_fec_rate(fec : BinaryConvolutionCodeRate) : HRESULT
    @lpVtbl.value.put_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate, HRESULT)).call(fec)
  end
  def get_modulation(modulation : ModulationType*) : HRESULT
    @lpVtbl.value.get_modulation.unsafe_as(Proc(ModulationType*, HRESULT)).call(modulation)
  end
  def put_modulation(modulation : ModulationType) : HRESULT
    @lpVtbl.value.put_modulation.unsafe_as(Proc(ModulationType, HRESULT)).call(modulation)
  end
  def get_symbol_rate(rate : Int32*) : HRESULT
    @lpVtbl.value.get_symbol_rate.unsafe_as(Proc(Int32*, HRESULT)).call(rate)
  end
  def put_symbol_rate(rate : Int32) : HRESULT
    @lpVtbl.value.put_symbol_rate.unsafe_as(Proc(Int32, HRESULT)).call(rate)
  end
  def clone(newlocator : ILocator*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ILocator*, HRESULT)).call(newlocator)
  end
  def get_video_standard(avs : AnalogVideoStandard*) : HRESULT
    @lpVtbl.value.get_video_standard.unsafe_as(Proc(AnalogVideoStandard*, HRESULT)).call(avs)
  end
  def put_video_standard(avs : AnalogVideoStandard) : HRESULT
    @lpVtbl.value.put_video_standard.unsafe_as(Proc(AnalogVideoStandard, HRESULT)).call(avs)
  end
end
struct LibWin32::IDigitalLocator
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_carrier_frequency(frequency : Int32*) : HRESULT
    @lpVtbl.value.get_carrier_frequency.unsafe_as(Proc(Int32*, HRESULT)).call(frequency)
  end
  def put_carrier_frequency(frequency : Int32) : HRESULT
    @lpVtbl.value.put_carrier_frequency.unsafe_as(Proc(Int32, HRESULT)).call(frequency)
  end
  def get_inner_fec(fec : FECMethod*) : HRESULT
    @lpVtbl.value.get_inner_fec.unsafe_as(Proc(FECMethod*, HRESULT)).call(fec)
  end
  def put_inner_fec(fec : FECMethod) : HRESULT
    @lpVtbl.value.put_inner_fec.unsafe_as(Proc(FECMethod, HRESULT)).call(fec)
  end
  def get_inner_fec_rate(fec : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(fec)
  end
  def put_inner_fec_rate(fec : BinaryConvolutionCodeRate) : HRESULT
    @lpVtbl.value.put_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate, HRESULT)).call(fec)
  end
  def get_outer_fec(fec : FECMethod*) : HRESULT
    @lpVtbl.value.get_outer_fec.unsafe_as(Proc(FECMethod*, HRESULT)).call(fec)
  end
  def put_outer_fec(fec : FECMethod) : HRESULT
    @lpVtbl.value.put_outer_fec.unsafe_as(Proc(FECMethod, HRESULT)).call(fec)
  end
  def get_outer_fec_rate(fec : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(fec)
  end
  def put_outer_fec_rate(fec : BinaryConvolutionCodeRate) : HRESULT
    @lpVtbl.value.put_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate, HRESULT)).call(fec)
  end
  def get_modulation(modulation : ModulationType*) : HRESULT
    @lpVtbl.value.get_modulation.unsafe_as(Proc(ModulationType*, HRESULT)).call(modulation)
  end
  def put_modulation(modulation : ModulationType) : HRESULT
    @lpVtbl.value.put_modulation.unsafe_as(Proc(ModulationType, HRESULT)).call(modulation)
  end
  def get_symbol_rate(rate : Int32*) : HRESULT
    @lpVtbl.value.get_symbol_rate.unsafe_as(Proc(Int32*, HRESULT)).call(rate)
  end
  def put_symbol_rate(rate : Int32) : HRESULT
    @lpVtbl.value.put_symbol_rate.unsafe_as(Proc(Int32, HRESULT)).call(rate)
  end
  def clone(newlocator : ILocator*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ILocator*, HRESULT)).call(newlocator)
  end
end
struct LibWin32::IATSCLocator
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_carrier_frequency(frequency : Int32*) : HRESULT
    @lpVtbl.value.get_carrier_frequency.unsafe_as(Proc(Int32*, HRESULT)).call(frequency)
  end
  def put_carrier_frequency(frequency : Int32) : HRESULT
    @lpVtbl.value.put_carrier_frequency.unsafe_as(Proc(Int32, HRESULT)).call(frequency)
  end
  def get_inner_fec(fec : FECMethod*) : HRESULT
    @lpVtbl.value.get_inner_fec.unsafe_as(Proc(FECMethod*, HRESULT)).call(fec)
  end
  def put_inner_fec(fec : FECMethod) : HRESULT
    @lpVtbl.value.put_inner_fec.unsafe_as(Proc(FECMethod, HRESULT)).call(fec)
  end
  def get_inner_fec_rate(fec : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(fec)
  end
  def put_inner_fec_rate(fec : BinaryConvolutionCodeRate) : HRESULT
    @lpVtbl.value.put_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate, HRESULT)).call(fec)
  end
  def get_outer_fec(fec : FECMethod*) : HRESULT
    @lpVtbl.value.get_outer_fec.unsafe_as(Proc(FECMethod*, HRESULT)).call(fec)
  end
  def put_outer_fec(fec : FECMethod) : HRESULT
    @lpVtbl.value.put_outer_fec.unsafe_as(Proc(FECMethod, HRESULT)).call(fec)
  end
  def get_outer_fec_rate(fec : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(fec)
  end
  def put_outer_fec_rate(fec : BinaryConvolutionCodeRate) : HRESULT
    @lpVtbl.value.put_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate, HRESULT)).call(fec)
  end
  def get_modulation(modulation : ModulationType*) : HRESULT
    @lpVtbl.value.get_modulation.unsafe_as(Proc(ModulationType*, HRESULT)).call(modulation)
  end
  def put_modulation(modulation : ModulationType) : HRESULT
    @lpVtbl.value.put_modulation.unsafe_as(Proc(ModulationType, HRESULT)).call(modulation)
  end
  def get_symbol_rate(rate : Int32*) : HRESULT
    @lpVtbl.value.get_symbol_rate.unsafe_as(Proc(Int32*, HRESULT)).call(rate)
  end
  def put_symbol_rate(rate : Int32) : HRESULT
    @lpVtbl.value.put_symbol_rate.unsafe_as(Proc(Int32, HRESULT)).call(rate)
  end
  def clone(newlocator : ILocator*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ILocator*, HRESULT)).call(newlocator)
  end
  def get_physical_channel(physicalchannel : Int32*) : HRESULT
    @lpVtbl.value.get_physical_channel.unsafe_as(Proc(Int32*, HRESULT)).call(physicalchannel)
  end
  def put_physical_channel(physicalchannel : Int32) : HRESULT
    @lpVtbl.value.put_physical_channel.unsafe_as(Proc(Int32, HRESULT)).call(physicalchannel)
  end
  def get_tsid(tsid : Int32*) : HRESULT
    @lpVtbl.value.get_tsid.unsafe_as(Proc(Int32*, HRESULT)).call(tsid)
  end
  def put_tsid(tsid : Int32) : HRESULT
    @lpVtbl.value.put_tsid.unsafe_as(Proc(Int32, HRESULT)).call(tsid)
  end
end
struct LibWin32::IATSCLocator2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_carrier_frequency(frequency : Int32*) : HRESULT
    @lpVtbl.value.get_carrier_frequency.unsafe_as(Proc(Int32*, HRESULT)).call(frequency)
  end
  def put_carrier_frequency(frequency : Int32) : HRESULT
    @lpVtbl.value.put_carrier_frequency.unsafe_as(Proc(Int32, HRESULT)).call(frequency)
  end
  def get_inner_fec(fec : FECMethod*) : HRESULT
    @lpVtbl.value.get_inner_fec.unsafe_as(Proc(FECMethod*, HRESULT)).call(fec)
  end
  def put_inner_fec(fec : FECMethod) : HRESULT
    @lpVtbl.value.put_inner_fec.unsafe_as(Proc(FECMethod, HRESULT)).call(fec)
  end
  def get_inner_fec_rate(fec : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(fec)
  end
  def put_inner_fec_rate(fec : BinaryConvolutionCodeRate) : HRESULT
    @lpVtbl.value.put_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate, HRESULT)).call(fec)
  end
  def get_outer_fec(fec : FECMethod*) : HRESULT
    @lpVtbl.value.get_outer_fec.unsafe_as(Proc(FECMethod*, HRESULT)).call(fec)
  end
  def put_outer_fec(fec : FECMethod) : HRESULT
    @lpVtbl.value.put_outer_fec.unsafe_as(Proc(FECMethod, HRESULT)).call(fec)
  end
  def get_outer_fec_rate(fec : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(fec)
  end
  def put_outer_fec_rate(fec : BinaryConvolutionCodeRate) : HRESULT
    @lpVtbl.value.put_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate, HRESULT)).call(fec)
  end
  def get_modulation(modulation : ModulationType*) : HRESULT
    @lpVtbl.value.get_modulation.unsafe_as(Proc(ModulationType*, HRESULT)).call(modulation)
  end
  def put_modulation(modulation : ModulationType) : HRESULT
    @lpVtbl.value.put_modulation.unsafe_as(Proc(ModulationType, HRESULT)).call(modulation)
  end
  def get_symbol_rate(rate : Int32*) : HRESULT
    @lpVtbl.value.get_symbol_rate.unsafe_as(Proc(Int32*, HRESULT)).call(rate)
  end
  def put_symbol_rate(rate : Int32) : HRESULT
    @lpVtbl.value.put_symbol_rate.unsafe_as(Proc(Int32, HRESULT)).call(rate)
  end
  def clone(newlocator : ILocator*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ILocator*, HRESULT)).call(newlocator)
  end
  def get_physical_channel(physicalchannel : Int32*) : HRESULT
    @lpVtbl.value.get_physical_channel.unsafe_as(Proc(Int32*, HRESULT)).call(physicalchannel)
  end
  def put_physical_channel(physicalchannel : Int32) : HRESULT
    @lpVtbl.value.put_physical_channel.unsafe_as(Proc(Int32, HRESULT)).call(physicalchannel)
  end
  def get_tsid(tsid : Int32*) : HRESULT
    @lpVtbl.value.get_tsid.unsafe_as(Proc(Int32*, HRESULT)).call(tsid)
  end
  def put_tsid(tsid : Int32) : HRESULT
    @lpVtbl.value.put_tsid.unsafe_as(Proc(Int32, HRESULT)).call(tsid)
  end
  def get_program_number(programnumber : Int32*) : HRESULT
    @lpVtbl.value.get_program_number.unsafe_as(Proc(Int32*, HRESULT)).call(programnumber)
  end
  def put_program_number(programnumber : Int32) : HRESULT
    @lpVtbl.value.put_program_number.unsafe_as(Proc(Int32, HRESULT)).call(programnumber)
  end
end
struct LibWin32::IDigitalCableLocator
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_carrier_frequency(frequency : Int32*) : HRESULT
    @lpVtbl.value.get_carrier_frequency.unsafe_as(Proc(Int32*, HRESULT)).call(frequency)
  end
  def put_carrier_frequency(frequency : Int32) : HRESULT
    @lpVtbl.value.put_carrier_frequency.unsafe_as(Proc(Int32, HRESULT)).call(frequency)
  end
  def get_inner_fec(fec : FECMethod*) : HRESULT
    @lpVtbl.value.get_inner_fec.unsafe_as(Proc(FECMethod*, HRESULT)).call(fec)
  end
  def put_inner_fec(fec : FECMethod) : HRESULT
    @lpVtbl.value.put_inner_fec.unsafe_as(Proc(FECMethod, HRESULT)).call(fec)
  end
  def get_inner_fec_rate(fec : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(fec)
  end
  def put_inner_fec_rate(fec : BinaryConvolutionCodeRate) : HRESULT
    @lpVtbl.value.put_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate, HRESULT)).call(fec)
  end
  def get_outer_fec(fec : FECMethod*) : HRESULT
    @lpVtbl.value.get_outer_fec.unsafe_as(Proc(FECMethod*, HRESULT)).call(fec)
  end
  def put_outer_fec(fec : FECMethod) : HRESULT
    @lpVtbl.value.put_outer_fec.unsafe_as(Proc(FECMethod, HRESULT)).call(fec)
  end
  def get_outer_fec_rate(fec : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(fec)
  end
  def put_outer_fec_rate(fec : BinaryConvolutionCodeRate) : HRESULT
    @lpVtbl.value.put_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate, HRESULT)).call(fec)
  end
  def get_modulation(modulation : ModulationType*) : HRESULT
    @lpVtbl.value.get_modulation.unsafe_as(Proc(ModulationType*, HRESULT)).call(modulation)
  end
  def put_modulation(modulation : ModulationType) : HRESULT
    @lpVtbl.value.put_modulation.unsafe_as(Proc(ModulationType, HRESULT)).call(modulation)
  end
  def get_symbol_rate(rate : Int32*) : HRESULT
    @lpVtbl.value.get_symbol_rate.unsafe_as(Proc(Int32*, HRESULT)).call(rate)
  end
  def put_symbol_rate(rate : Int32) : HRESULT
    @lpVtbl.value.put_symbol_rate.unsafe_as(Proc(Int32, HRESULT)).call(rate)
  end
  def clone(newlocator : ILocator*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ILocator*, HRESULT)).call(newlocator)
  end
  def get_physical_channel(physicalchannel : Int32*) : HRESULT
    @lpVtbl.value.get_physical_channel.unsafe_as(Proc(Int32*, HRESULT)).call(physicalchannel)
  end
  def put_physical_channel(physicalchannel : Int32) : HRESULT
    @lpVtbl.value.put_physical_channel.unsafe_as(Proc(Int32, HRESULT)).call(physicalchannel)
  end
  def get_tsid(tsid : Int32*) : HRESULT
    @lpVtbl.value.get_tsid.unsafe_as(Proc(Int32*, HRESULT)).call(tsid)
  end
  def put_tsid(tsid : Int32) : HRESULT
    @lpVtbl.value.put_tsid.unsafe_as(Proc(Int32, HRESULT)).call(tsid)
  end
  def get_program_number(programnumber : Int32*) : HRESULT
    @lpVtbl.value.get_program_number.unsafe_as(Proc(Int32*, HRESULT)).call(programnumber)
  end
  def put_program_number(programnumber : Int32) : HRESULT
    @lpVtbl.value.put_program_number.unsafe_as(Proc(Int32, HRESULT)).call(programnumber)
  end
end
struct LibWin32::IDVBTLocator
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_carrier_frequency(frequency : Int32*) : HRESULT
    @lpVtbl.value.get_carrier_frequency.unsafe_as(Proc(Int32*, HRESULT)).call(frequency)
  end
  def put_carrier_frequency(frequency : Int32) : HRESULT
    @lpVtbl.value.put_carrier_frequency.unsafe_as(Proc(Int32, HRESULT)).call(frequency)
  end
  def get_inner_fec(fec : FECMethod*) : HRESULT
    @lpVtbl.value.get_inner_fec.unsafe_as(Proc(FECMethod*, HRESULT)).call(fec)
  end
  def put_inner_fec(fec : FECMethod) : HRESULT
    @lpVtbl.value.put_inner_fec.unsafe_as(Proc(FECMethod, HRESULT)).call(fec)
  end
  def get_inner_fec_rate(fec : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(fec)
  end
  def put_inner_fec_rate(fec : BinaryConvolutionCodeRate) : HRESULT
    @lpVtbl.value.put_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate, HRESULT)).call(fec)
  end
  def get_outer_fec(fec : FECMethod*) : HRESULT
    @lpVtbl.value.get_outer_fec.unsafe_as(Proc(FECMethod*, HRESULT)).call(fec)
  end
  def put_outer_fec(fec : FECMethod) : HRESULT
    @lpVtbl.value.put_outer_fec.unsafe_as(Proc(FECMethod, HRESULT)).call(fec)
  end
  def get_outer_fec_rate(fec : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(fec)
  end
  def put_outer_fec_rate(fec : BinaryConvolutionCodeRate) : HRESULT
    @lpVtbl.value.put_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate, HRESULT)).call(fec)
  end
  def get_modulation(modulation : ModulationType*) : HRESULT
    @lpVtbl.value.get_modulation.unsafe_as(Proc(ModulationType*, HRESULT)).call(modulation)
  end
  def put_modulation(modulation : ModulationType) : HRESULT
    @lpVtbl.value.put_modulation.unsafe_as(Proc(ModulationType, HRESULT)).call(modulation)
  end
  def get_symbol_rate(rate : Int32*) : HRESULT
    @lpVtbl.value.get_symbol_rate.unsafe_as(Proc(Int32*, HRESULT)).call(rate)
  end
  def put_symbol_rate(rate : Int32) : HRESULT
    @lpVtbl.value.put_symbol_rate.unsafe_as(Proc(Int32, HRESULT)).call(rate)
  end
  def clone(newlocator : ILocator*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ILocator*, HRESULT)).call(newlocator)
  end
  def get_bandwidth(bandwidthval : Int32*) : HRESULT
    @lpVtbl.value.get_bandwidth.unsafe_as(Proc(Int32*, HRESULT)).call(bandwidthval)
  end
  def put_bandwidth(bandwidthval : Int32) : HRESULT
    @lpVtbl.value.put_bandwidth.unsafe_as(Proc(Int32, HRESULT)).call(bandwidthval)
  end
  def get_lp_inner_fec(fec : FECMethod*) : HRESULT
    @lpVtbl.value.get_lp_inner_fec.unsafe_as(Proc(FECMethod*, HRESULT)).call(fec)
  end
  def put_lp_inner_fec(fec : FECMethod) : HRESULT
    @lpVtbl.value.put_lp_inner_fec.unsafe_as(Proc(FECMethod, HRESULT)).call(fec)
  end
  def get_lp_inner_fec_rate(fec : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_lp_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(fec)
  end
  def put_lp_inner_fec_rate(fec : BinaryConvolutionCodeRate) : HRESULT
    @lpVtbl.value.put_lp_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate, HRESULT)).call(fec)
  end
  def get_h_alpha(alpha : HierarchyAlpha*) : HRESULT
    @lpVtbl.value.get_h_alpha.unsafe_as(Proc(HierarchyAlpha*, HRESULT)).call(alpha)
  end
  def put_h_alpha(alpha : HierarchyAlpha) : HRESULT
    @lpVtbl.value.put_h_alpha.unsafe_as(Proc(HierarchyAlpha, HRESULT)).call(alpha)
  end
  def get_guard(gi : GuardInterval*) : HRESULT
    @lpVtbl.value.get_guard.unsafe_as(Proc(GuardInterval*, HRESULT)).call(gi)
  end
  def put_guard(gi : GuardInterval) : HRESULT
    @lpVtbl.value.put_guard.unsafe_as(Proc(GuardInterval, HRESULT)).call(gi)
  end
  def get_mode(mode : TransmissionMode*) : HRESULT
    @lpVtbl.value.get_mode.unsafe_as(Proc(TransmissionMode*, HRESULT)).call(mode)
  end
  def put_mode(mode : TransmissionMode) : HRESULT
    @lpVtbl.value.put_mode.unsafe_as(Proc(TransmissionMode, HRESULT)).call(mode)
  end
  def get_other_frequency_in_use(otherfrequencyinuseval : Int16*) : HRESULT
    @lpVtbl.value.get_other_frequency_in_use.unsafe_as(Proc(Int16*, HRESULT)).call(otherfrequencyinuseval)
  end
  def put_other_frequency_in_use(otherfrequencyinuseval : Int16) : HRESULT
    @lpVtbl.value.put_other_frequency_in_use.unsafe_as(Proc(Int16, HRESULT)).call(otherfrequencyinuseval)
  end
end
struct LibWin32::IDVBTLocator2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_carrier_frequency(frequency : Int32*) : HRESULT
    @lpVtbl.value.get_carrier_frequency.unsafe_as(Proc(Int32*, HRESULT)).call(frequency)
  end
  def put_carrier_frequency(frequency : Int32) : HRESULT
    @lpVtbl.value.put_carrier_frequency.unsafe_as(Proc(Int32, HRESULT)).call(frequency)
  end
  def get_inner_fec(fec : FECMethod*) : HRESULT
    @lpVtbl.value.get_inner_fec.unsafe_as(Proc(FECMethod*, HRESULT)).call(fec)
  end
  def put_inner_fec(fec : FECMethod) : HRESULT
    @lpVtbl.value.put_inner_fec.unsafe_as(Proc(FECMethod, HRESULT)).call(fec)
  end
  def get_inner_fec_rate(fec : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(fec)
  end
  def put_inner_fec_rate(fec : BinaryConvolutionCodeRate) : HRESULT
    @lpVtbl.value.put_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate, HRESULT)).call(fec)
  end
  def get_outer_fec(fec : FECMethod*) : HRESULT
    @lpVtbl.value.get_outer_fec.unsafe_as(Proc(FECMethod*, HRESULT)).call(fec)
  end
  def put_outer_fec(fec : FECMethod) : HRESULT
    @lpVtbl.value.put_outer_fec.unsafe_as(Proc(FECMethod, HRESULT)).call(fec)
  end
  def get_outer_fec_rate(fec : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(fec)
  end
  def put_outer_fec_rate(fec : BinaryConvolutionCodeRate) : HRESULT
    @lpVtbl.value.put_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate, HRESULT)).call(fec)
  end
  def get_modulation(modulation : ModulationType*) : HRESULT
    @lpVtbl.value.get_modulation.unsafe_as(Proc(ModulationType*, HRESULT)).call(modulation)
  end
  def put_modulation(modulation : ModulationType) : HRESULT
    @lpVtbl.value.put_modulation.unsafe_as(Proc(ModulationType, HRESULT)).call(modulation)
  end
  def get_symbol_rate(rate : Int32*) : HRESULT
    @lpVtbl.value.get_symbol_rate.unsafe_as(Proc(Int32*, HRESULT)).call(rate)
  end
  def put_symbol_rate(rate : Int32) : HRESULT
    @lpVtbl.value.put_symbol_rate.unsafe_as(Proc(Int32, HRESULT)).call(rate)
  end
  def clone(newlocator : ILocator*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ILocator*, HRESULT)).call(newlocator)
  end
  def get_bandwidth(bandwidthval : Int32*) : HRESULT
    @lpVtbl.value.get_bandwidth.unsafe_as(Proc(Int32*, HRESULT)).call(bandwidthval)
  end
  def put_bandwidth(bandwidthval : Int32) : HRESULT
    @lpVtbl.value.put_bandwidth.unsafe_as(Proc(Int32, HRESULT)).call(bandwidthval)
  end
  def get_lp_inner_fec(fec : FECMethod*) : HRESULT
    @lpVtbl.value.get_lp_inner_fec.unsafe_as(Proc(FECMethod*, HRESULT)).call(fec)
  end
  def put_lp_inner_fec(fec : FECMethod) : HRESULT
    @lpVtbl.value.put_lp_inner_fec.unsafe_as(Proc(FECMethod, HRESULT)).call(fec)
  end
  def get_lp_inner_fec_rate(fec : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_lp_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(fec)
  end
  def put_lp_inner_fec_rate(fec : BinaryConvolutionCodeRate) : HRESULT
    @lpVtbl.value.put_lp_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate, HRESULT)).call(fec)
  end
  def get_h_alpha(alpha : HierarchyAlpha*) : HRESULT
    @lpVtbl.value.get_h_alpha.unsafe_as(Proc(HierarchyAlpha*, HRESULT)).call(alpha)
  end
  def put_h_alpha(alpha : HierarchyAlpha) : HRESULT
    @lpVtbl.value.put_h_alpha.unsafe_as(Proc(HierarchyAlpha, HRESULT)).call(alpha)
  end
  def get_guard(gi : GuardInterval*) : HRESULT
    @lpVtbl.value.get_guard.unsafe_as(Proc(GuardInterval*, HRESULT)).call(gi)
  end
  def put_guard(gi : GuardInterval) : HRESULT
    @lpVtbl.value.put_guard.unsafe_as(Proc(GuardInterval, HRESULT)).call(gi)
  end
  def get_mode(mode : TransmissionMode*) : HRESULT
    @lpVtbl.value.get_mode.unsafe_as(Proc(TransmissionMode*, HRESULT)).call(mode)
  end
  def put_mode(mode : TransmissionMode) : HRESULT
    @lpVtbl.value.put_mode.unsafe_as(Proc(TransmissionMode, HRESULT)).call(mode)
  end
  def get_other_frequency_in_use(otherfrequencyinuseval : Int16*) : HRESULT
    @lpVtbl.value.get_other_frequency_in_use.unsafe_as(Proc(Int16*, HRESULT)).call(otherfrequencyinuseval)
  end
  def put_other_frequency_in_use(otherfrequencyinuseval : Int16) : HRESULT
    @lpVtbl.value.put_other_frequency_in_use.unsafe_as(Proc(Int16, HRESULT)).call(otherfrequencyinuseval)
  end
  def get_physical_layer_pipe_id(physicallayerpipeidval : Int32*) : HRESULT
    @lpVtbl.value.get_physical_layer_pipe_id.unsafe_as(Proc(Int32*, HRESULT)).call(physicallayerpipeidval)
  end
  def put_physical_layer_pipe_id(physicallayerpipeidval : Int32) : HRESULT
    @lpVtbl.value.put_physical_layer_pipe_id.unsafe_as(Proc(Int32, HRESULT)).call(physicallayerpipeidval)
  end
end
struct LibWin32::IDVBSLocator
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_carrier_frequency(frequency : Int32*) : HRESULT
    @lpVtbl.value.get_carrier_frequency.unsafe_as(Proc(Int32*, HRESULT)).call(frequency)
  end
  def put_carrier_frequency(frequency : Int32) : HRESULT
    @lpVtbl.value.put_carrier_frequency.unsafe_as(Proc(Int32, HRESULT)).call(frequency)
  end
  def get_inner_fec(fec : FECMethod*) : HRESULT
    @lpVtbl.value.get_inner_fec.unsafe_as(Proc(FECMethod*, HRESULT)).call(fec)
  end
  def put_inner_fec(fec : FECMethod) : HRESULT
    @lpVtbl.value.put_inner_fec.unsafe_as(Proc(FECMethod, HRESULT)).call(fec)
  end
  def get_inner_fec_rate(fec : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(fec)
  end
  def put_inner_fec_rate(fec : BinaryConvolutionCodeRate) : HRESULT
    @lpVtbl.value.put_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate, HRESULT)).call(fec)
  end
  def get_outer_fec(fec : FECMethod*) : HRESULT
    @lpVtbl.value.get_outer_fec.unsafe_as(Proc(FECMethod*, HRESULT)).call(fec)
  end
  def put_outer_fec(fec : FECMethod) : HRESULT
    @lpVtbl.value.put_outer_fec.unsafe_as(Proc(FECMethod, HRESULT)).call(fec)
  end
  def get_outer_fec_rate(fec : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(fec)
  end
  def put_outer_fec_rate(fec : BinaryConvolutionCodeRate) : HRESULT
    @lpVtbl.value.put_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate, HRESULT)).call(fec)
  end
  def get_modulation(modulation : ModulationType*) : HRESULT
    @lpVtbl.value.get_modulation.unsafe_as(Proc(ModulationType*, HRESULT)).call(modulation)
  end
  def put_modulation(modulation : ModulationType) : HRESULT
    @lpVtbl.value.put_modulation.unsafe_as(Proc(ModulationType, HRESULT)).call(modulation)
  end
  def get_symbol_rate(rate : Int32*) : HRESULT
    @lpVtbl.value.get_symbol_rate.unsafe_as(Proc(Int32*, HRESULT)).call(rate)
  end
  def put_symbol_rate(rate : Int32) : HRESULT
    @lpVtbl.value.put_symbol_rate.unsafe_as(Proc(Int32, HRESULT)).call(rate)
  end
  def clone(newlocator : ILocator*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ILocator*, HRESULT)).call(newlocator)
  end
  def get_signal_polarisation(polarisationval : Polarisation*) : HRESULT
    @lpVtbl.value.get_signal_polarisation.unsafe_as(Proc(Polarisation*, HRESULT)).call(polarisationval)
  end
  def put_signal_polarisation(polarisationval : Polarisation) : HRESULT
    @lpVtbl.value.put_signal_polarisation.unsafe_as(Proc(Polarisation, HRESULT)).call(polarisationval)
  end
  def get_west_position(westlongitude : Int16*) : HRESULT
    @lpVtbl.value.get_west_position.unsafe_as(Proc(Int16*, HRESULT)).call(westlongitude)
  end
  def put_west_position(westlongitude : Int16) : HRESULT
    @lpVtbl.value.put_west_position.unsafe_as(Proc(Int16, HRESULT)).call(westlongitude)
  end
  def get_orbital_position(longitude : Int32*) : HRESULT
    @lpVtbl.value.get_orbital_position.unsafe_as(Proc(Int32*, HRESULT)).call(longitude)
  end
  def put_orbital_position(longitude : Int32) : HRESULT
    @lpVtbl.value.put_orbital_position.unsafe_as(Proc(Int32, HRESULT)).call(longitude)
  end
  def get_azimuth(azimuth : Int32*) : HRESULT
    @lpVtbl.value.get_azimuth.unsafe_as(Proc(Int32*, HRESULT)).call(azimuth)
  end
  def put_azimuth(azimuth : Int32) : HRESULT
    @lpVtbl.value.put_azimuth.unsafe_as(Proc(Int32, HRESULT)).call(azimuth)
  end
  def get_elevation(elevation : Int32*) : HRESULT
    @lpVtbl.value.get_elevation.unsafe_as(Proc(Int32*, HRESULT)).call(elevation)
  end
  def put_elevation(elevation : Int32) : HRESULT
    @lpVtbl.value.put_elevation.unsafe_as(Proc(Int32, HRESULT)).call(elevation)
  end
end
struct LibWin32::IDVBSLocator2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_carrier_frequency(frequency : Int32*) : HRESULT
    @lpVtbl.value.get_carrier_frequency.unsafe_as(Proc(Int32*, HRESULT)).call(frequency)
  end
  def put_carrier_frequency(frequency : Int32) : HRESULT
    @lpVtbl.value.put_carrier_frequency.unsafe_as(Proc(Int32, HRESULT)).call(frequency)
  end
  def get_inner_fec(fec : FECMethod*) : HRESULT
    @lpVtbl.value.get_inner_fec.unsafe_as(Proc(FECMethod*, HRESULT)).call(fec)
  end
  def put_inner_fec(fec : FECMethod) : HRESULT
    @lpVtbl.value.put_inner_fec.unsafe_as(Proc(FECMethod, HRESULT)).call(fec)
  end
  def get_inner_fec_rate(fec : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(fec)
  end
  def put_inner_fec_rate(fec : BinaryConvolutionCodeRate) : HRESULT
    @lpVtbl.value.put_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate, HRESULT)).call(fec)
  end
  def get_outer_fec(fec : FECMethod*) : HRESULT
    @lpVtbl.value.get_outer_fec.unsafe_as(Proc(FECMethod*, HRESULT)).call(fec)
  end
  def put_outer_fec(fec : FECMethod) : HRESULT
    @lpVtbl.value.put_outer_fec.unsafe_as(Proc(FECMethod, HRESULT)).call(fec)
  end
  def get_outer_fec_rate(fec : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(fec)
  end
  def put_outer_fec_rate(fec : BinaryConvolutionCodeRate) : HRESULT
    @lpVtbl.value.put_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate, HRESULT)).call(fec)
  end
  def get_modulation(modulation : ModulationType*) : HRESULT
    @lpVtbl.value.get_modulation.unsafe_as(Proc(ModulationType*, HRESULT)).call(modulation)
  end
  def put_modulation(modulation : ModulationType) : HRESULT
    @lpVtbl.value.put_modulation.unsafe_as(Proc(ModulationType, HRESULT)).call(modulation)
  end
  def get_symbol_rate(rate : Int32*) : HRESULT
    @lpVtbl.value.get_symbol_rate.unsafe_as(Proc(Int32*, HRESULT)).call(rate)
  end
  def put_symbol_rate(rate : Int32) : HRESULT
    @lpVtbl.value.put_symbol_rate.unsafe_as(Proc(Int32, HRESULT)).call(rate)
  end
  def clone(newlocator : ILocator*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ILocator*, HRESULT)).call(newlocator)
  end
  def get_signal_polarisation(polarisationval : Polarisation*) : HRESULT
    @lpVtbl.value.get_signal_polarisation.unsafe_as(Proc(Polarisation*, HRESULT)).call(polarisationval)
  end
  def put_signal_polarisation(polarisationval : Polarisation) : HRESULT
    @lpVtbl.value.put_signal_polarisation.unsafe_as(Proc(Polarisation, HRESULT)).call(polarisationval)
  end
  def get_west_position(westlongitude : Int16*) : HRESULT
    @lpVtbl.value.get_west_position.unsafe_as(Proc(Int16*, HRESULT)).call(westlongitude)
  end
  def put_west_position(westlongitude : Int16) : HRESULT
    @lpVtbl.value.put_west_position.unsafe_as(Proc(Int16, HRESULT)).call(westlongitude)
  end
  def get_orbital_position(longitude : Int32*) : HRESULT
    @lpVtbl.value.get_orbital_position.unsafe_as(Proc(Int32*, HRESULT)).call(longitude)
  end
  def put_orbital_position(longitude : Int32) : HRESULT
    @lpVtbl.value.put_orbital_position.unsafe_as(Proc(Int32, HRESULT)).call(longitude)
  end
  def get_azimuth(azimuth : Int32*) : HRESULT
    @lpVtbl.value.get_azimuth.unsafe_as(Proc(Int32*, HRESULT)).call(azimuth)
  end
  def put_azimuth(azimuth : Int32) : HRESULT
    @lpVtbl.value.put_azimuth.unsafe_as(Proc(Int32, HRESULT)).call(azimuth)
  end
  def get_elevation(elevation : Int32*) : HRESULT
    @lpVtbl.value.get_elevation.unsafe_as(Proc(Int32*, HRESULT)).call(elevation)
  end
  def put_elevation(elevation : Int32) : HRESULT
    @lpVtbl.value.put_elevation.unsafe_as(Proc(Int32, HRESULT)).call(elevation)
  end
  def get_diseq_lnb_source(diseqlnbsourceval : LNB_Source*) : HRESULT
    @lpVtbl.value.get_diseq_lnb_source.unsafe_as(Proc(LNB_Source*, HRESULT)).call(diseqlnbsourceval)
  end
  def put_diseq_lnb_source(diseqlnbsourceval : LNB_Source) : HRESULT
    @lpVtbl.value.put_diseq_lnb_source.unsafe_as(Proc(LNB_Source, HRESULT)).call(diseqlnbsourceval)
  end
  def get_local_oscillator_override_low(localoscillatoroverridelowval : Int32*) : HRESULT
    @lpVtbl.value.get_local_oscillator_override_low.unsafe_as(Proc(Int32*, HRESULT)).call(localoscillatoroverridelowval)
  end
  def put_local_oscillator_override_low(localoscillatoroverridelowval : Int32) : HRESULT
    @lpVtbl.value.put_local_oscillator_override_low.unsafe_as(Proc(Int32, HRESULT)).call(localoscillatoroverridelowval)
  end
  def get_local_oscillator_override_high(localoscillatoroverridehighval : Int32*) : HRESULT
    @lpVtbl.value.get_local_oscillator_override_high.unsafe_as(Proc(Int32*, HRESULT)).call(localoscillatoroverridehighval)
  end
  def put_local_oscillator_override_high(localoscillatoroverridehighval : Int32) : HRESULT
    @lpVtbl.value.put_local_oscillator_override_high.unsafe_as(Proc(Int32, HRESULT)).call(localoscillatoroverridehighval)
  end
  def get_local_lnb_switch_override(locallnbswitchoverrideval : Int32*) : HRESULT
    @lpVtbl.value.get_local_lnb_switch_override.unsafe_as(Proc(Int32*, HRESULT)).call(locallnbswitchoverrideval)
  end
  def put_local_lnb_switch_override(locallnbswitchoverrideval : Int32) : HRESULT
    @lpVtbl.value.put_local_lnb_switch_override.unsafe_as(Proc(Int32, HRESULT)).call(locallnbswitchoverrideval)
  end
  def get_local_spectral_inversion_override(localspectralinversionoverrideval : SpectralInversion*) : HRESULT
    @lpVtbl.value.get_local_spectral_inversion_override.unsafe_as(Proc(SpectralInversion*, HRESULT)).call(localspectralinversionoverrideval)
  end
  def put_local_spectral_inversion_override(localspectralinversionoverrideval : SpectralInversion) : HRESULT
    @lpVtbl.value.put_local_spectral_inversion_override.unsafe_as(Proc(SpectralInversion, HRESULT)).call(localspectralinversionoverrideval)
  end
  def get_signal_roll_off(rolloffval : RollOff*) : HRESULT
    @lpVtbl.value.get_signal_roll_off.unsafe_as(Proc(RollOff*, HRESULT)).call(rolloffval)
  end
  def put_signal_roll_off(rolloffval : RollOff) : HRESULT
    @lpVtbl.value.put_signal_roll_off.unsafe_as(Proc(RollOff, HRESULT)).call(rolloffval)
  end
  def get_signal_pilot(pilotval : Pilot*) : HRESULT
    @lpVtbl.value.get_signal_pilot.unsafe_as(Proc(Pilot*, HRESULT)).call(pilotval)
  end
  def put_signal_pilot(pilotval : Pilot) : HRESULT
    @lpVtbl.value.put_signal_pilot.unsafe_as(Proc(Pilot, HRESULT)).call(pilotval)
  end
end
struct LibWin32::IDVBCLocator
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_carrier_frequency(frequency : Int32*) : HRESULT
    @lpVtbl.value.get_carrier_frequency.unsafe_as(Proc(Int32*, HRESULT)).call(frequency)
  end
  def put_carrier_frequency(frequency : Int32) : HRESULT
    @lpVtbl.value.put_carrier_frequency.unsafe_as(Proc(Int32, HRESULT)).call(frequency)
  end
  def get_inner_fec(fec : FECMethod*) : HRESULT
    @lpVtbl.value.get_inner_fec.unsafe_as(Proc(FECMethod*, HRESULT)).call(fec)
  end
  def put_inner_fec(fec : FECMethod) : HRESULT
    @lpVtbl.value.put_inner_fec.unsafe_as(Proc(FECMethod, HRESULT)).call(fec)
  end
  def get_inner_fec_rate(fec : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(fec)
  end
  def put_inner_fec_rate(fec : BinaryConvolutionCodeRate) : HRESULT
    @lpVtbl.value.put_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate, HRESULT)).call(fec)
  end
  def get_outer_fec(fec : FECMethod*) : HRESULT
    @lpVtbl.value.get_outer_fec.unsafe_as(Proc(FECMethod*, HRESULT)).call(fec)
  end
  def put_outer_fec(fec : FECMethod) : HRESULT
    @lpVtbl.value.put_outer_fec.unsafe_as(Proc(FECMethod, HRESULT)).call(fec)
  end
  def get_outer_fec_rate(fec : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(fec)
  end
  def put_outer_fec_rate(fec : BinaryConvolutionCodeRate) : HRESULT
    @lpVtbl.value.put_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate, HRESULT)).call(fec)
  end
  def get_modulation(modulation : ModulationType*) : HRESULT
    @lpVtbl.value.get_modulation.unsafe_as(Proc(ModulationType*, HRESULT)).call(modulation)
  end
  def put_modulation(modulation : ModulationType) : HRESULT
    @lpVtbl.value.put_modulation.unsafe_as(Proc(ModulationType, HRESULT)).call(modulation)
  end
  def get_symbol_rate(rate : Int32*) : HRESULT
    @lpVtbl.value.get_symbol_rate.unsafe_as(Proc(Int32*, HRESULT)).call(rate)
  end
  def put_symbol_rate(rate : Int32) : HRESULT
    @lpVtbl.value.put_symbol_rate.unsafe_as(Proc(Int32, HRESULT)).call(rate)
  end
  def clone(newlocator : ILocator*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ILocator*, HRESULT)).call(newlocator)
  end
end
struct LibWin32::IISDBSLocator
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_carrier_frequency(frequency : Int32*) : HRESULT
    @lpVtbl.value.get_carrier_frequency.unsafe_as(Proc(Int32*, HRESULT)).call(frequency)
  end
  def put_carrier_frequency(frequency : Int32) : HRESULT
    @lpVtbl.value.put_carrier_frequency.unsafe_as(Proc(Int32, HRESULT)).call(frequency)
  end
  def get_inner_fec(fec : FECMethod*) : HRESULT
    @lpVtbl.value.get_inner_fec.unsafe_as(Proc(FECMethod*, HRESULT)).call(fec)
  end
  def put_inner_fec(fec : FECMethod) : HRESULT
    @lpVtbl.value.put_inner_fec.unsafe_as(Proc(FECMethod, HRESULT)).call(fec)
  end
  def get_inner_fec_rate(fec : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(fec)
  end
  def put_inner_fec_rate(fec : BinaryConvolutionCodeRate) : HRESULT
    @lpVtbl.value.put_inner_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate, HRESULT)).call(fec)
  end
  def get_outer_fec(fec : FECMethod*) : HRESULT
    @lpVtbl.value.get_outer_fec.unsafe_as(Proc(FECMethod*, HRESULT)).call(fec)
  end
  def put_outer_fec(fec : FECMethod) : HRESULT
    @lpVtbl.value.put_outer_fec.unsafe_as(Proc(FECMethod, HRESULT)).call(fec)
  end
  def get_outer_fec_rate(fec : BinaryConvolutionCodeRate*) : HRESULT
    @lpVtbl.value.get_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate*, HRESULT)).call(fec)
  end
  def put_outer_fec_rate(fec : BinaryConvolutionCodeRate) : HRESULT
    @lpVtbl.value.put_outer_fec_rate.unsafe_as(Proc(BinaryConvolutionCodeRate, HRESULT)).call(fec)
  end
  def get_modulation(modulation : ModulationType*) : HRESULT
    @lpVtbl.value.get_modulation.unsafe_as(Proc(ModulationType*, HRESULT)).call(modulation)
  end
  def put_modulation(modulation : ModulationType) : HRESULT
    @lpVtbl.value.put_modulation.unsafe_as(Proc(ModulationType, HRESULT)).call(modulation)
  end
  def get_symbol_rate(rate : Int32*) : HRESULT
    @lpVtbl.value.get_symbol_rate.unsafe_as(Proc(Int32*, HRESULT)).call(rate)
  end
  def put_symbol_rate(rate : Int32) : HRESULT
    @lpVtbl.value.put_symbol_rate.unsafe_as(Proc(Int32, HRESULT)).call(rate)
  end
  def clone(newlocator : ILocator*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ILocator*, HRESULT)).call(newlocator)
  end
  def get_signal_polarisation(polarisationval : Polarisation*) : HRESULT
    @lpVtbl.value.get_signal_polarisation.unsafe_as(Proc(Polarisation*, HRESULT)).call(polarisationval)
  end
  def put_signal_polarisation(polarisationval : Polarisation) : HRESULT
    @lpVtbl.value.put_signal_polarisation.unsafe_as(Proc(Polarisation, HRESULT)).call(polarisationval)
  end
  def get_west_position(westlongitude : Int16*) : HRESULT
    @lpVtbl.value.get_west_position.unsafe_as(Proc(Int16*, HRESULT)).call(westlongitude)
  end
  def put_west_position(westlongitude : Int16) : HRESULT
    @lpVtbl.value.put_west_position.unsafe_as(Proc(Int16, HRESULT)).call(westlongitude)
  end
  def get_orbital_position(longitude : Int32*) : HRESULT
    @lpVtbl.value.get_orbital_position.unsafe_as(Proc(Int32*, HRESULT)).call(longitude)
  end
  def put_orbital_position(longitude : Int32) : HRESULT
    @lpVtbl.value.put_orbital_position.unsafe_as(Proc(Int32, HRESULT)).call(longitude)
  end
  def get_azimuth(azimuth : Int32*) : HRESULT
    @lpVtbl.value.get_azimuth.unsafe_as(Proc(Int32*, HRESULT)).call(azimuth)
  end
  def put_azimuth(azimuth : Int32) : HRESULT
    @lpVtbl.value.put_azimuth.unsafe_as(Proc(Int32, HRESULT)).call(azimuth)
  end
  def get_elevation(elevation : Int32*) : HRESULT
    @lpVtbl.value.get_elevation.unsafe_as(Proc(Int32*, HRESULT)).call(elevation)
  end
  def put_elevation(elevation : Int32) : HRESULT
    @lpVtbl.value.put_elevation.unsafe_as(Proc(Int32, HRESULT)).call(elevation)
  end
end
struct LibWin32::IESOpenMmiEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_event_id(pdweventid : UInt32*) : HRESULT
    @lpVtbl.value.get_event_id.unsafe_as(Proc(UInt32*, HRESULT)).call(pdweventid)
  end
  def get_event_type(pguideventtype : Guid*) : HRESULT
    @lpVtbl.value.get_event_type.unsafe_as(Proc(Guid*, HRESULT)).call(pguideventtype)
  end
  def set_completion_status(dwresult : UInt32) : HRESULT
    @lpVtbl.value.set_completion_status.unsafe_as(Proc(UInt32, HRESULT)).call(dwresult)
  end
  def get_data(pbdata : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_data.unsafe_as(Proc(SAFEARRAY**, HRESULT)).call(pbdata)
  end
  def get_string_data(pbstrdata : UInt8**) : HRESULT
    @lpVtbl.value.get_string_data.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrdata)
  end
  def get_dialog_number(pdialogrequest : UInt32*, pdialognumber : UInt32*) : HRESULT
    @lpVtbl.value.get_dialog_number.unsafe_as(Proc(UInt32*, UInt32*, HRESULT)).call(pdialogrequest, pdialognumber)
  end
  def get_dialog_type(guiddialogtype : Guid*) : HRESULT
    @lpVtbl.value.get_dialog_type.unsafe_as(Proc(Guid*, HRESULT)).call(guiddialogtype)
  end
  def get_dialog_data(pbdata : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_dialog_data.unsafe_as(Proc(SAFEARRAY**, HRESULT)).call(pbdata)
  end
  def get_dialog_string_data(pbstrbaseurl : UInt8**, pbstrdata : UInt8**) : HRESULT
    @lpVtbl.value.get_dialog_string_data.unsafe_as(Proc(UInt8**, UInt8**, HRESULT)).call(pbstrbaseurl, pbstrdata)
  end
end
struct LibWin32::IESCloseMmiEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_event_id(pdweventid : UInt32*) : HRESULT
    @lpVtbl.value.get_event_id.unsafe_as(Proc(UInt32*, HRESULT)).call(pdweventid)
  end
  def get_event_type(pguideventtype : Guid*) : HRESULT
    @lpVtbl.value.get_event_type.unsafe_as(Proc(Guid*, HRESULT)).call(pguideventtype)
  end
  def set_completion_status(dwresult : UInt32) : HRESULT
    @lpVtbl.value.set_completion_status.unsafe_as(Proc(UInt32, HRESULT)).call(dwresult)
  end
  def get_data(pbdata : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_data.unsafe_as(Proc(SAFEARRAY**, HRESULT)).call(pbdata)
  end
  def get_string_data(pbstrdata : UInt8**) : HRESULT
    @lpVtbl.value.get_string_data.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrdata)
  end
  def get_dialog_number(pdialognumber : UInt32*) : HRESULT
    @lpVtbl.value.get_dialog_number.unsafe_as(Proc(UInt32*, HRESULT)).call(pdialognumber)
  end
end
struct LibWin32::IESValueUpdatedEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_event_id(pdweventid : UInt32*) : HRESULT
    @lpVtbl.value.get_event_id.unsafe_as(Proc(UInt32*, HRESULT)).call(pdweventid)
  end
  def get_event_type(pguideventtype : Guid*) : HRESULT
    @lpVtbl.value.get_event_type.unsafe_as(Proc(Guid*, HRESULT)).call(pguideventtype)
  end
  def set_completion_status(dwresult : UInt32) : HRESULT
    @lpVtbl.value.set_completion_status.unsafe_as(Proc(UInt32, HRESULT)).call(dwresult)
  end
  def get_data(pbdata : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_data.unsafe_as(Proc(SAFEARRAY**, HRESULT)).call(pbdata)
  end
  def get_string_data(pbstrdata : UInt8**) : HRESULT
    @lpVtbl.value.get_string_data.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrdata)
  end
  def get_value_names(pbstrnames : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_value_names.unsafe_as(Proc(SAFEARRAY**, HRESULT)).call(pbstrnames)
  end
end
struct LibWin32::IESRequestTunerEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_event_id(pdweventid : UInt32*) : HRESULT
    @lpVtbl.value.get_event_id.unsafe_as(Proc(UInt32*, HRESULT)).call(pdweventid)
  end
  def get_event_type(pguideventtype : Guid*) : HRESULT
    @lpVtbl.value.get_event_type.unsafe_as(Proc(Guid*, HRESULT)).call(pguideventtype)
  end
  def set_completion_status(dwresult : UInt32) : HRESULT
    @lpVtbl.value.set_completion_status.unsafe_as(Proc(UInt32, HRESULT)).call(dwresult)
  end
  def get_data(pbdata : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_data.unsafe_as(Proc(SAFEARRAY**, HRESULT)).call(pbdata)
  end
  def get_string_data(pbstrdata : UInt8**) : HRESULT
    @lpVtbl.value.get_string_data.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrdata)
  end
  def get_priority(pbypriority : UInt8*) : HRESULT
    @lpVtbl.value.get_priority.unsafe_as(Proc(UInt8*, HRESULT)).call(pbypriority)
  end
  def get_reason(pbyreason : UInt8*) : HRESULT
    @lpVtbl.value.get_reason.unsafe_as(Proc(UInt8*, HRESULT)).call(pbyreason)
  end
  def get_consequences(pbyconsequences : UInt8*) : HRESULT
    @lpVtbl.value.get_consequences.unsafe_as(Proc(UInt8*, HRESULT)).call(pbyconsequences)
  end
  def get_estimated_time(pdwestimatedtime : UInt32*) : HRESULT
    @lpVtbl.value.get_estimated_time.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwestimatedtime)
  end
end
struct LibWin32::IESIsdbCasResponseEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_event_id(pdweventid : UInt32*) : HRESULT
    @lpVtbl.value.get_event_id.unsafe_as(Proc(UInt32*, HRESULT)).call(pdweventid)
  end
  def get_event_type(pguideventtype : Guid*) : HRESULT
    @lpVtbl.value.get_event_type.unsafe_as(Proc(Guid*, HRESULT)).call(pguideventtype)
  end
  def set_completion_status(dwresult : UInt32) : HRESULT
    @lpVtbl.value.set_completion_status.unsafe_as(Proc(UInt32, HRESULT)).call(dwresult)
  end
  def get_data(pbdata : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_data.unsafe_as(Proc(SAFEARRAY**, HRESULT)).call(pbdata)
  end
  def get_string_data(pbstrdata : UInt8**) : HRESULT
    @lpVtbl.value.get_string_data.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrdata)
  end
  def get_request_id(prequestid : UInt32*) : HRESULT
    @lpVtbl.value.get_request_id.unsafe_as(Proc(UInt32*, HRESULT)).call(prequestid)
  end
  def get_status(pstatus : UInt32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(UInt32*, HRESULT)).call(pstatus)
  end
  def get_data_length(prequestlength : UInt32*) : HRESULT
    @lpVtbl.value.get_data_length.unsafe_as(Proc(UInt32*, HRESULT)).call(prequestlength)
  end
  def get_response_data(pbdata : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_response_data.unsafe_as(Proc(SAFEARRAY**, HRESULT)).call(pbdata)
  end
end
struct LibWin32::IGpnvsCommonBase
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_value_update_name(pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_value_update_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrname)
  end
end
struct LibWin32::IESEventFactory
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def create_es_event(pserviceprovider : IUnknown, dweventid : UInt32, guideventtype : Guid, dweventdatalength : UInt32, peventdata : UInt8*, bstrbaseurl : UInt8*, pinitcontext : IUnknown, ppesevent : IESEvent*) : HRESULT
    @lpVtbl.value.create_es_event.unsafe_as(Proc(IUnknown, UInt32, Guid, UInt32, UInt8*, UInt8*, IUnknown, IESEvent*, HRESULT)).call(pserviceprovider, dweventid, guideventtype, dweventdatalength, peventdata, bstrbaseurl, pinitcontext, ppesevent)
  end
end
struct LibWin32::IESLicenseRenewalResultEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_event_id(pdweventid : UInt32*) : HRESULT
    @lpVtbl.value.get_event_id.unsafe_as(Proc(UInt32*, HRESULT)).call(pdweventid)
  end
  def get_event_type(pguideventtype : Guid*) : HRESULT
    @lpVtbl.value.get_event_type.unsafe_as(Proc(Guid*, HRESULT)).call(pguideventtype)
  end
  def set_completion_status(dwresult : UInt32) : HRESULT
    @lpVtbl.value.set_completion_status.unsafe_as(Proc(UInt32, HRESULT)).call(dwresult)
  end
  def get_data(pbdata : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_data.unsafe_as(Proc(SAFEARRAY**, HRESULT)).call(pbdata)
  end
  def get_string_data(pbstrdata : UInt8**) : HRESULT
    @lpVtbl.value.get_string_data.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrdata)
  end
  def get_callers_id(pdwcallersid : UInt32*) : HRESULT
    @lpVtbl.value.get_callers_id.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwcallersid)
  end
  def get_file_name(pbstrfilename : UInt8**) : HRESULT
    @lpVtbl.value.get_file_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrfilename)
  end
  def is_renewal_successful(pfrenewalsuccessful : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_renewal_successful.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pfrenewalsuccessful)
  end
  def is_check_entitlement_call_required(pfcheckenttokencallneeded : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_check_entitlement_call_required.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pfcheckenttokencallneeded)
  end
  def get_descrambled_status(pdescrambledstatus : UInt32*) : HRESULT
    @lpVtbl.value.get_descrambled_status.unsafe_as(Proc(UInt32*, HRESULT)).call(pdescrambledstatus)
  end
  def get_renewal_result_code(pdwrenewalresultcode : UInt32*) : HRESULT
    @lpVtbl.value.get_renewal_result_code.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwrenewalresultcode)
  end
  def get_cas_failure_code(pdwcasfailurecode : UInt32*) : HRESULT
    @lpVtbl.value.get_cas_failure_code.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwcasfailurecode)
  end
  def get_renewal_h_result(phr : HRESULT*) : HRESULT
    @lpVtbl.value.get_renewal_h_result.unsafe_as(Proc(HRESULT*, HRESULT)).call(phr)
  end
  def get_entitlement_token_length(pdwlength : UInt32*) : HRESULT
    @lpVtbl.value.get_entitlement_token_length.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwlength)
  end
  def get_entitlement_token(pbdata : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_entitlement_token.unsafe_as(Proc(SAFEARRAY**, HRESULT)).call(pbdata)
  end
  def get_expiry_date(pqwexpirydate : UInt64*) : HRESULT
    @lpVtbl.value.get_expiry_date.unsafe_as(Proc(UInt64*, HRESULT)).call(pqwexpirydate)
  end
end
struct LibWin32::IESFileExpiryDateEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_event_id(pdweventid : UInt32*) : HRESULT
    @lpVtbl.value.get_event_id.unsafe_as(Proc(UInt32*, HRESULT)).call(pdweventid)
  end
  def get_event_type(pguideventtype : Guid*) : HRESULT
    @lpVtbl.value.get_event_type.unsafe_as(Proc(Guid*, HRESULT)).call(pguideventtype)
  end
  def set_completion_status(dwresult : UInt32) : HRESULT
    @lpVtbl.value.set_completion_status.unsafe_as(Proc(UInt32, HRESULT)).call(dwresult)
  end
  def get_data(pbdata : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_data.unsafe_as(Proc(SAFEARRAY**, HRESULT)).call(pbdata)
  end
  def get_string_data(pbstrdata : UInt8**) : HRESULT
    @lpVtbl.value.get_string_data.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrdata)
  end
  def get_tuner_id(pguidtunerid : Guid*) : HRESULT
    @lpVtbl.value.get_tuner_id.unsafe_as(Proc(Guid*, HRESULT)).call(pguidtunerid)
  end
  def get_expiry_date(pqwexpirydate : UInt64*) : HRESULT
    @lpVtbl.value.get_expiry_date.unsafe_as(Proc(UInt64*, HRESULT)).call(pqwexpirydate)
  end
  def get_final_expiry_date(pqwexpirydate : UInt64*) : HRESULT
    @lpVtbl.value.get_final_expiry_date.unsafe_as(Proc(UInt64*, HRESULT)).call(pqwexpirydate)
  end
  def get_max_renewal_count(dwmaxrenewalcount : UInt32*) : HRESULT
    @lpVtbl.value.get_max_renewal_count.unsafe_as(Proc(UInt32*, HRESULT)).call(dwmaxrenewalcount)
  end
  def is_entitlement_token_present(pfenttokenpresent : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_entitlement_token_present.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pfenttokenpresent)
  end
  def does_expire_after_first_use(pfexpireafterfirstuse : LibC::BOOL*) : HRESULT
    @lpVtbl.value.does_expire_after_first_use.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pfexpireafterfirstuse)
  end
end
struct LibWin32::IESEventService
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def fire_es_event(pesevent : IESEvent) : HRESULT
    @lpVtbl.value.fire_es_event.unsafe_as(Proc(IESEvent, HRESULT)).call(pesevent)
  end
end
struct LibWin32::IESEventServiceConfiguration
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_parent(peventservice : IESEventService) : HRESULT
    @lpVtbl.value.set_parent.unsafe_as(Proc(IESEventService, HRESULT)).call(peventservice)
  end
  def remove_parent : HRESULT
    @lpVtbl.value.remove_parent.unsafe_as(Proc(HRESULT)).call
  end
  def set_owner(pesevents : IESEvents) : HRESULT
    @lpVtbl.value.set_owner.unsafe_as(Proc(IESEvents, HRESULT)).call(pesevents)
  end
  def remove_owner : HRESULT
    @lpVtbl.value.remove_owner.unsafe_as(Proc(HRESULT)).call
  end
  def set_graph(pgraph : IFilterGraph) : HRESULT
    @lpVtbl.value.set_graph.unsafe_as(Proc(IFilterGraph, HRESULT)).call(pgraph)
  end
  def remove_graph(pgraph : IFilterGraph) : HRESULT
    @lpVtbl.value.remove_graph.unsafe_as(Proc(IFilterGraph, HRESULT)).call(pgraph)
  end
end
struct LibWin32::IRegisterTuner
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def register(ptuner : ITuner, pgraph : IGraphBuilder) : HRESULT
    @lpVtbl.value.register.unsafe_as(Proc(ITuner, IGraphBuilder, HRESULT)).call(ptuner, pgraph)
  end
  def unregister : HRESULT
    @lpVtbl.value.unregister.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IBDAComparable
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def compare_exact(compareto : IDispatch, result : Int32*) : HRESULT
    @lpVtbl.value.compare_exact.unsafe_as(Proc(IDispatch, Int32*, HRESULT)).call(compareto, result)
  end
  def compare_equivalent(compareto : IDispatch, dwflags : UInt32, result : Int32*) : HRESULT
    @lpVtbl.value.compare_equivalent.unsafe_as(Proc(IDispatch, UInt32, Int32*, HRESULT)).call(compareto, dwflags, result)
  end
  def hash_exact(result : Int64*) : HRESULT
    @lpVtbl.value.hash_exact.unsafe_as(Proc(Int64*, HRESULT)).call(result)
  end
  def hash_exact_incremental(partialresult : Int64, result : Int64*) : HRESULT
    @lpVtbl.value.hash_exact_incremental.unsafe_as(Proc(Int64, Int64*, HRESULT)).call(partialresult, result)
  end
  def hash_equivalent(dwflags : UInt32, result : Int64*) : HRESULT
    @lpVtbl.value.hash_equivalent.unsafe_as(Proc(UInt32, Int64*, HRESULT)).call(dwflags, result)
  end
  def hash_equivalent_incremental(partialresult : Int64, dwflags : UInt32, result : Int64*) : HRESULT
    @lpVtbl.value.hash_equivalent_incremental.unsafe_as(Proc(Int64, UInt32, Int64*, HRESULT)).call(partialresult, dwflags, result)
  end
end
struct LibWin32::IPersistTuneXml
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_class_id(pclassid : Guid*) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(Guid*, HRESULT)).call(pclassid)
  end
  def init_new : HRESULT
    @lpVtbl.value.init_new.unsafe_as(Proc(HRESULT)).call
  end
  def load(varvalue : VARIANT) : HRESULT
    @lpVtbl.value.load.unsafe_as(Proc(VARIANT, HRESULT)).call(varvalue)
  end
  def save(pvarfragment : VARIANT*) : HRESULT
    @lpVtbl.value.save.unsafe_as(Proc(VARIANT*, HRESULT)).call(pvarfragment)
  end
end
struct LibWin32::IPersistTuneXmlUtility
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def deserialize(varvalue : VARIANT, ppobject : IUnknown*) : HRESULT
    @lpVtbl.value.deserialize.unsafe_as(Proc(VARIANT, IUnknown*, HRESULT)).call(varvalue, ppobject)
  end
end
struct LibWin32::IPersistTuneXmlUtility2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def deserialize(varvalue : VARIANT, ppobject : IUnknown*) : HRESULT
    @lpVtbl.value.deserialize.unsafe_as(Proc(VARIANT, IUnknown*, HRESULT)).call(varvalue, ppobject)
  end
  def serialize(pitunerequest : ITuneRequest, pstring : UInt8**) : HRESULT
    @lpVtbl.value.serialize.unsafe_as(Proc(ITuneRequest, UInt8**, HRESULT)).call(pitunerequest, pstring)
  end
end
struct LibWin32::IBDACreateTuneRequestEx
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def create_tune_request_ex(tunerequestiid : Guid*, tunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.create_tune_request_ex.unsafe_as(Proc(Guid*, ITuneRequest*, HRESULT)).call(tunerequestiid, tunerequest)
  end
end
struct LibWin32::IETFilterConfig
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def init_license(licenseid : Int32) : HRESULT
    @lpVtbl.value.init_license.unsafe_as(Proc(Int32, HRESULT)).call(licenseid)
  end
  def get_secure_channel_object(ppunkdrmsecurechannel : IUnknown*) : HRESULT
    @lpVtbl.value.get_secure_channel_object.unsafe_as(Proc(IUnknown*, HRESULT)).call(ppunkdrmsecurechannel)
  end
end
struct LibWin32::IDTFilterConfig
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_secure_channel_object(ppunkdrmsecurechannel : IUnknown*) : HRESULT
    @lpVtbl.value.get_secure_channel_object.unsafe_as(Proc(IUnknown*, HRESULT)).call(ppunkdrmsecurechannel)
  end
end
struct LibWin32::IXDSCodecConfig
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_secure_channel_object(ppunkdrmsecurechannel : IUnknown*) : HRESULT
    @lpVtbl.value.get_secure_channel_object.unsafe_as(Proc(IUnknown*, HRESULT)).call(ppunkdrmsecurechannel)
  end
  def set_pause_buffer_time(dwpausebuffertime : UInt32) : HRESULT
    @lpVtbl.value.set_pause_buffer_time.unsafe_as(Proc(UInt32, HRESULT)).call(dwpausebuffertime)
  end
end
struct LibWin32::IDTFilterLicenseRenewal
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_license_renewal_data(ppwszfilename : LibC::LPWSTR*, ppwszexpiredkid : LibC::LPWSTR*, ppwsztunerid : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_license_renewal_data.unsafe_as(Proc(LibC::LPWSTR*, LibC::LPWSTR*, LibC::LPWSTR*, HRESULT)).call(ppwszfilename, ppwszexpiredkid, ppwsztunerid)
  end
end
struct LibWin32::IPTFilterLicenseRenewal
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def renew_licenses(wszfilename : LibC::LPWSTR, wszexpiredkid : LibC::LPWSTR, dwcallersid : UInt32, bhighpriority : LibC::BOOL) : HRESULT
    @lpVtbl.value.renew_licenses.unsafe_as(Proc(LibC::LPWSTR, LibC::LPWSTR, UInt32, LibC::BOOL, HRESULT)).call(wszfilename, wszexpiredkid, dwcallersid, bhighpriority)
  end
  def cancel_license_renewal : HRESULT
    @lpVtbl.value.cancel_license_renewal.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IMceBurnerControl
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_burner_no_decryption : HRESULT
    @lpVtbl.value.get_burner_no_decryption.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IETFilter
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_eval_rat_obj_ok(phrcocreateretval : HRESULT*) : HRESULT
    @lpVtbl.value.get_eval_rat_obj_ok.unsafe_as(Proc(HRESULT*, HRESULT)).call(phrcocreateretval)
  end
  def get_curr_rating(pensystem : EnTvRat_System*, penrating : EnTvRat_GenericLevel*, plbfenattr : Int32*) : HRESULT
    @lpVtbl.value.get_curr_rating.unsafe_as(Proc(EnTvRat_System*, EnTvRat_GenericLevel*, Int32*, HRESULT)).call(pensystem, penrating, plbfenattr)
  end
  def get_curr_license_exp_date(prottype : ProtType*, lpdatetime : Int32*) : HRESULT
    @lpVtbl.value.get_curr_license_exp_date.unsafe_as(Proc(ProtType*, Int32*, HRESULT)).call(prottype, lpdatetime)
  end
  def get_last_error_code : HRESULT
    @lpVtbl.value.get_last_error_code.unsafe_as(Proc(HRESULT)).call
  end
  def set_recording_on(frecstate : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_recording_on.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(frecstate)
  end
end
struct LibWin32::IETFilterEvents
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IDTFilter
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_eval_rat_obj_ok(phrcocreateretval : HRESULT*) : HRESULT
    @lpVtbl.value.get_eval_rat_obj_ok.unsafe_as(Proc(HRESULT*, HRESULT)).call(phrcocreateretval)
  end
  def get_curr_rating(pensystem : EnTvRat_System*, penrating : EnTvRat_GenericLevel*, plbfenattr : Int32*) : HRESULT
    @lpVtbl.value.get_curr_rating.unsafe_as(Proc(EnTvRat_System*, EnTvRat_GenericLevel*, Int32*, HRESULT)).call(pensystem, penrating, plbfenattr)
  end
  def get_blocked_rating_attributes(ensystem : EnTvRat_System, enlevel : EnTvRat_GenericLevel, plbfenattr : Int32*) : HRESULT
    @lpVtbl.value.get_blocked_rating_attributes.unsafe_as(Proc(EnTvRat_System, EnTvRat_GenericLevel, Int32*, HRESULT)).call(ensystem, enlevel, plbfenattr)
  end
  def put_blocked_rating_attributes(ensystem : EnTvRat_System, enlevel : EnTvRat_GenericLevel, lbfattrs : Int32) : HRESULT
    @lpVtbl.value.put_blocked_rating_attributes.unsafe_as(Proc(EnTvRat_System, EnTvRat_GenericLevel, Int32, HRESULT)).call(ensystem, enlevel, lbfattrs)
  end
  def get_block_un_rated(pfblockunratedshows : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_block_un_rated.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pfblockunratedshows)
  end
  def put_block_un_rated(fblockunratedshows : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_block_un_rated.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fblockunratedshows)
  end
  def get_block_un_rated_delay(pmsecsdelaybeforeblock : Int32*) : HRESULT
    @lpVtbl.value.get_block_un_rated_delay.unsafe_as(Proc(Int32*, HRESULT)).call(pmsecsdelaybeforeblock)
  end
  def put_block_un_rated_delay(msecsdelaybeforeblock : Int32) : HRESULT
    @lpVtbl.value.put_block_un_rated_delay.unsafe_as(Proc(Int32, HRESULT)).call(msecsdelaybeforeblock)
  end
end
struct LibWin32::IDTFilter2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_eval_rat_obj_ok(phrcocreateretval : HRESULT*) : HRESULT
    @lpVtbl.value.get_eval_rat_obj_ok.unsafe_as(Proc(HRESULT*, HRESULT)).call(phrcocreateretval)
  end
  def get_curr_rating(pensystem : EnTvRat_System*, penrating : EnTvRat_GenericLevel*, plbfenattr : Int32*) : HRESULT
    @lpVtbl.value.get_curr_rating.unsafe_as(Proc(EnTvRat_System*, EnTvRat_GenericLevel*, Int32*, HRESULT)).call(pensystem, penrating, plbfenattr)
  end
  def get_blocked_rating_attributes(ensystem : EnTvRat_System, enlevel : EnTvRat_GenericLevel, plbfenattr : Int32*) : HRESULT
    @lpVtbl.value.get_blocked_rating_attributes.unsafe_as(Proc(EnTvRat_System, EnTvRat_GenericLevel, Int32*, HRESULT)).call(ensystem, enlevel, plbfenattr)
  end
  def put_blocked_rating_attributes(ensystem : EnTvRat_System, enlevel : EnTvRat_GenericLevel, lbfattrs : Int32) : HRESULT
    @lpVtbl.value.put_blocked_rating_attributes.unsafe_as(Proc(EnTvRat_System, EnTvRat_GenericLevel, Int32, HRESULT)).call(ensystem, enlevel, lbfattrs)
  end
  def get_block_un_rated(pfblockunratedshows : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_block_un_rated.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pfblockunratedshows)
  end
  def put_block_un_rated(fblockunratedshows : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_block_un_rated.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fblockunratedshows)
  end
  def get_block_un_rated_delay(pmsecsdelaybeforeblock : Int32*) : HRESULT
    @lpVtbl.value.get_block_un_rated_delay.unsafe_as(Proc(Int32*, HRESULT)).call(pmsecsdelaybeforeblock)
  end
  def put_block_un_rated_delay(msecsdelaybeforeblock : Int32) : HRESULT
    @lpVtbl.value.put_block_un_rated_delay.unsafe_as(Proc(Int32, HRESULT)).call(msecsdelaybeforeblock)
  end
  def get_challenge_url(pbstrchallengeurl : UInt8**) : HRESULT
    @lpVtbl.value.get_challenge_url.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrchallengeurl)
  end
  def get_curr_license_exp_date(prottype : ProtType*, lpdatetime : Int32*) : HRESULT
    @lpVtbl.value.get_curr_license_exp_date.unsafe_as(Proc(ProtType*, Int32*, HRESULT)).call(prottype, lpdatetime)
  end
  def get_last_error_code : HRESULT
    @lpVtbl.value.get_last_error_code.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IDTFilter3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_eval_rat_obj_ok(phrcocreateretval : HRESULT*) : HRESULT
    @lpVtbl.value.get_eval_rat_obj_ok.unsafe_as(Proc(HRESULT*, HRESULT)).call(phrcocreateretval)
  end
  def get_curr_rating(pensystem : EnTvRat_System*, penrating : EnTvRat_GenericLevel*, plbfenattr : Int32*) : HRESULT
    @lpVtbl.value.get_curr_rating.unsafe_as(Proc(EnTvRat_System*, EnTvRat_GenericLevel*, Int32*, HRESULT)).call(pensystem, penrating, plbfenattr)
  end
  def get_blocked_rating_attributes(ensystem : EnTvRat_System, enlevel : EnTvRat_GenericLevel, plbfenattr : Int32*) : HRESULT
    @lpVtbl.value.get_blocked_rating_attributes.unsafe_as(Proc(EnTvRat_System, EnTvRat_GenericLevel, Int32*, HRESULT)).call(ensystem, enlevel, plbfenattr)
  end
  def put_blocked_rating_attributes(ensystem : EnTvRat_System, enlevel : EnTvRat_GenericLevel, lbfattrs : Int32) : HRESULT
    @lpVtbl.value.put_blocked_rating_attributes.unsafe_as(Proc(EnTvRat_System, EnTvRat_GenericLevel, Int32, HRESULT)).call(ensystem, enlevel, lbfattrs)
  end
  def get_block_un_rated(pfblockunratedshows : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_block_un_rated.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pfblockunratedshows)
  end
  def put_block_un_rated(fblockunratedshows : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_block_un_rated.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fblockunratedshows)
  end
  def get_block_un_rated_delay(pmsecsdelaybeforeblock : Int32*) : HRESULT
    @lpVtbl.value.get_block_un_rated_delay.unsafe_as(Proc(Int32*, HRESULT)).call(pmsecsdelaybeforeblock)
  end
  def put_block_un_rated_delay(msecsdelaybeforeblock : Int32) : HRESULT
    @lpVtbl.value.put_block_un_rated_delay.unsafe_as(Proc(Int32, HRESULT)).call(msecsdelaybeforeblock)
  end
  def get_challenge_url(pbstrchallengeurl : UInt8**) : HRESULT
    @lpVtbl.value.get_challenge_url.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrchallengeurl)
  end
  def get_curr_license_exp_date(prottype : ProtType*, lpdatetime : Int32*) : HRESULT
    @lpVtbl.value.get_curr_license_exp_date.unsafe_as(Proc(ProtType*, Int32*, HRESULT)).call(prottype, lpdatetime)
  end
  def get_last_error_code : HRESULT
    @lpVtbl.value.get_last_error_code.unsafe_as(Proc(HRESULT)).call
  end
  def get_protection_type(pprotectiontype : ProtType*) : HRESULT
    @lpVtbl.value.get_protection_type.unsafe_as(Proc(ProtType*, HRESULT)).call(pprotectiontype)
  end
  def license_has_expiration_date(pflicensehasexpirationdate : LibC::BOOL*) : HRESULT
    @lpVtbl.value.license_has_expiration_date.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pflicensehasexpirationdate)
  end
  def set_rights(bstrrights : UInt8*) : HRESULT
    @lpVtbl.value.set_rights.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrrights)
  end
end
struct LibWin32::IDTFilterEvents
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IXDSCodec
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_xds_to_rat_obj_ok(phrcocreateretval : HRESULT*) : HRESULT
    @lpVtbl.value.get_xds_to_rat_obj_ok.unsafe_as(Proc(HRESULT*, HRESULT)).call(phrcocreateretval)
  end
  def put_cc_substream_service(substreammask : Int32) : HRESULT
    @lpVtbl.value.put_cc_substream_service.unsafe_as(Proc(Int32, HRESULT)).call(substreammask)
  end
  def get_cc_substream_service(psubstreammask : Int32*) : HRESULT
    @lpVtbl.value.get_cc_substream_service.unsafe_as(Proc(Int32*, HRESULT)).call(psubstreammask)
  end
  def get_content_advisory_rating(prat : Int32*, ppktseqid : Int32*, pcallseqid : Int32*, ptimestart : Int64*, ptimeend : Int64*) : HRESULT
    @lpVtbl.value.get_content_advisory_rating.unsafe_as(Proc(Int32*, Int32*, Int32*, Int64*, Int64*, HRESULT)).call(prat, ppktseqid, pcallseqid, ptimestart, ptimeend)
  end
  def get_xds_packet(pxdsclasspkt : Int32*, pxdstypepkt : Int32*, pbstrxdspkt : UInt8**, ppktseqid : Int32*, pcallseqid : Int32*, ptimestart : Int64*, ptimeend : Int64*) : HRESULT
    @lpVtbl.value.get_xds_packet.unsafe_as(Proc(Int32*, Int32*, UInt8**, Int32*, Int32*, Int64*, Int64*, HRESULT)).call(pxdsclasspkt, pxdstypepkt, pbstrxdspkt, ppktseqid, pcallseqid, ptimestart, ptimeend)
  end
  def get_curr_license_exp_date(prottype : ProtType*, lpdatetime : Int32*) : HRESULT
    @lpVtbl.value.get_curr_license_exp_date.unsafe_as(Proc(ProtType*, Int32*, HRESULT)).call(prottype, lpdatetime)
  end
  def get_last_error_code : HRESULT
    @lpVtbl.value.get_last_error_code.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IXDSCodecEvents
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IXDSToRat
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def init : HRESULT
    @lpVtbl.value.init.unsafe_as(Proc(HRESULT)).call
  end
  def parse_xds_byte_pair(byte1 : UInt8, byte2 : UInt8, pensystem : EnTvRat_System*, penlevel : EnTvRat_GenericLevel*, plbfenattributes : Int32*) : HRESULT
    @lpVtbl.value.parse_xds_byte_pair.unsafe_as(Proc(UInt8, UInt8, EnTvRat_System*, EnTvRat_GenericLevel*, Int32*, HRESULT)).call(byte1, byte2, pensystem, penlevel, plbfenattributes)
  end
end
struct LibWin32::IEvalRat
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_blocked_rating_attributes(ensystem : EnTvRat_System, enlevel : EnTvRat_GenericLevel, plbfattrs : Int32*) : HRESULT
    @lpVtbl.value.get_blocked_rating_attributes.unsafe_as(Proc(EnTvRat_System, EnTvRat_GenericLevel, Int32*, HRESULT)).call(ensystem, enlevel, plbfattrs)
  end
  def put_blocked_rating_attributes(ensystem : EnTvRat_System, enlevel : EnTvRat_GenericLevel, lbfattrs : Int32) : HRESULT
    @lpVtbl.value.put_blocked_rating_attributes.unsafe_as(Proc(EnTvRat_System, EnTvRat_GenericLevel, Int32, HRESULT)).call(ensystem, enlevel, lbfattrs)
  end
  def get_block_un_rated(pfblockunratedshows : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_block_un_rated.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pfblockunratedshows)
  end
  def put_block_un_rated(fblockunratedshows : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_block_un_rated.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fblockunratedshows)
  end
  def most_restrictive_rating(ensystem1 : EnTvRat_System, enenlevel1 : EnTvRat_GenericLevel, lbfenattr1 : Int32, ensystem2 : EnTvRat_System, enenlevel2 : EnTvRat_GenericLevel, lbfenattr2 : Int32, pensystem : EnTvRat_System*, penenlevel : EnTvRat_GenericLevel*, plbfenattr : Int32*) : HRESULT
    @lpVtbl.value.most_restrictive_rating.unsafe_as(Proc(EnTvRat_System, EnTvRat_GenericLevel, Int32, EnTvRat_System, EnTvRat_GenericLevel, Int32, EnTvRat_System*, EnTvRat_GenericLevel*, Int32*, HRESULT)).call(ensystem1, enenlevel1, lbfenattr1, ensystem2, enenlevel2, lbfenattr2, pensystem, penenlevel, plbfenattr)
  end
  def test_rating(enshowsystem : EnTvRat_System, enshowlevel : EnTvRat_GenericLevel, lbfenshowattributes : Int32) : HRESULT
    @lpVtbl.value.test_rating.unsafe_as(Proc(EnTvRat_System, EnTvRat_GenericLevel, Int32, HRESULT)).call(enshowsystem, enshowlevel, lbfenshowattributes)
  end
end
struct LibWin32::IMSVidRect
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_top(topval : Int32*) : HRESULT
    @lpVtbl.value.get_top.unsafe_as(Proc(Int32*, HRESULT)).call(topval)
  end
  def put_top(topval : Int32) : HRESULT
    @lpVtbl.value.put_top.unsafe_as(Proc(Int32, HRESULT)).call(topval)
  end
  def get_left(leftval : Int32*) : HRESULT
    @lpVtbl.value.get_left.unsafe_as(Proc(Int32*, HRESULT)).call(leftval)
  end
  def put_left(leftval : Int32) : HRESULT
    @lpVtbl.value.put_left.unsafe_as(Proc(Int32, HRESULT)).call(leftval)
  end
  def get_width(widthval : Int32*) : HRESULT
    @lpVtbl.value.get_width.unsafe_as(Proc(Int32*, HRESULT)).call(widthval)
  end
  def put_width(widthval : Int32) : HRESULT
    @lpVtbl.value.put_width.unsafe_as(Proc(Int32, HRESULT)).call(widthval)
  end
  def get_height(heightval : Int32*) : HRESULT
    @lpVtbl.value.get_height.unsafe_as(Proc(Int32*, HRESULT)).call(heightval)
  end
  def put_height(heightval : Int32) : HRESULT
    @lpVtbl.value.put_height.unsafe_as(Proc(Int32, HRESULT)).call(heightval)
  end
  def get_h_wnd(hwndval : HANDLE*) : HRESULT
    @lpVtbl.value.get_h_wnd.unsafe_as(Proc(HANDLE*, HRESULT)).call(hwndval)
  end
  def put_h_wnd(hwndval : LibC::HANDLE) : HRESULT
    @lpVtbl.value.put_h_wnd.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hwndval)
  end
  def put_rect(rectval : IMSVidRect) : HRESULT
    @lpVtbl.value.put_rect.unsafe_as(Proc(IMSVidRect, HRESULT)).call(rectval)
  end
end
struct LibWin32::IMSVidGraphSegmentContainer
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_graph(ppgraph : IGraphBuilder*) : HRESULT
    @lpVtbl.value.get_graph.unsafe_as(Proc(IGraphBuilder*, HRESULT)).call(ppgraph)
  end
  def get_input(ppinput : IMSVidGraphSegment*) : HRESULT
    @lpVtbl.value.get_input.unsafe_as(Proc(IMSVidGraphSegment*, HRESULT)).call(ppinput)
  end
  def get_outputs(ppoutputs : IEnumMSVidGraphSegment*) : HRESULT
    @lpVtbl.value.get_outputs.unsafe_as(Proc(IEnumMSVidGraphSegment*, HRESULT)).call(ppoutputs)
  end
  def get_video_renderer(ppvr : IMSVidGraphSegment*) : HRESULT
    @lpVtbl.value.get_video_renderer.unsafe_as(Proc(IMSVidGraphSegment*, HRESULT)).call(ppvr)
  end
  def get_audio_renderer(ppar : IMSVidGraphSegment*) : HRESULT
    @lpVtbl.value.get_audio_renderer.unsafe_as(Proc(IMSVidGraphSegment*, HRESULT)).call(ppar)
  end
  def get_features(ppfeatures : IEnumMSVidGraphSegment*) : HRESULT
    @lpVtbl.value.get_features.unsafe_as(Proc(IEnumMSVidGraphSegment*, HRESULT)).call(ppfeatures)
  end
  def get_composites(ppcomposites : IEnumMSVidGraphSegment*) : HRESULT
    @lpVtbl.value.get_composites.unsafe_as(Proc(IEnumMSVidGraphSegment*, HRESULT)).call(ppcomposites)
  end
  def get_parent_container(ppcontainer : IUnknown*) : HRESULT
    @lpVtbl.value.get_parent_container.unsafe_as(Proc(IUnknown*, HRESULT)).call(ppcontainer)
  end
  def decompose(psegment : IMSVidGraphSegment) : HRESULT
    @lpVtbl.value.decompose.unsafe_as(Proc(IMSVidGraphSegment, HRESULT)).call(psegment)
  end
  def is_windowless : HRESULT
    @lpVtbl.value.is_windowless.unsafe_as(Proc(HRESULT)).call
  end
  def get_focus : HRESULT
    @lpVtbl.value.get_focus.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IMSVidGraphSegment
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_class_id(pclassid : Guid*) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(Guid*, HRESULT)).call(pclassid)
  end
  def get_init(pinit : IUnknown*) : HRESULT
    @lpVtbl.value.get_init.unsafe_as(Proc(IUnknown*, HRESULT)).call(pinit)
  end
  def put_init(pinit : IUnknown) : HRESULT
    @lpVtbl.value.put_init.unsafe_as(Proc(IUnknown, HRESULT)).call(pinit)
  end
  def enum_filters(pnewenum : IEnumFilters*) : HRESULT
    @lpVtbl.value.enum_filters.unsafe_as(Proc(IEnumFilters*, HRESULT)).call(pnewenum)
  end
  def get_container(ppctl : IMSVidGraphSegmentContainer*) : HRESULT
    @lpVtbl.value.get_container.unsafe_as(Proc(IMSVidGraphSegmentContainer*, HRESULT)).call(ppctl)
  end
  def put_container(pctl : IMSVidGraphSegmentContainer) : HRESULT
    @lpVtbl.value.put_container.unsafe_as(Proc(IMSVidGraphSegmentContainer, HRESULT)).call(pctl)
  end
  def get_type(ptype : MSVidSegmentType*) : HRESULT
    @lpVtbl.value.get_type.unsafe_as(Proc(MSVidSegmentType*, HRESULT)).call(ptype)
  end
  def get_category(pguid : Guid*) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(Guid*, HRESULT)).call(pguid)
  end
  def build : HRESULT
    @lpVtbl.value.build.unsafe_as(Proc(HRESULT)).call
  end
  def post_build : HRESULT
    @lpVtbl.value.post_build.unsafe_as(Proc(HRESULT)).call
  end
  def pre_run : HRESULT
    @lpVtbl.value.pre_run.unsafe_as(Proc(HRESULT)).call
  end
  def post_run : HRESULT
    @lpVtbl.value.post_run.unsafe_as(Proc(HRESULT)).call
  end
  def pre_stop : HRESULT
    @lpVtbl.value.pre_stop.unsafe_as(Proc(HRESULT)).call
  end
  def post_stop : HRESULT
    @lpVtbl.value.post_stop.unsafe_as(Proc(HRESULT)).call
  end
  def on_event_notify(leventcode : Int32, leventparm1 : LibC::IntPtrT, leventparm2 : LibC::IntPtrT) : HRESULT
    @lpVtbl.value.on_event_notify.unsafe_as(Proc(Int32, LibC::IntPtrT, LibC::IntPtrT, HRESULT)).call(leventcode, leventparm1, leventparm2)
  end
  def decompose : HRESULT
    @lpVtbl.value.decompose.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IMSVidGraphSegmentUserInput
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def click : HRESULT
    @lpVtbl.value.click.unsafe_as(Proc(HRESULT)).call
  end
  def dbl_click : HRESULT
    @lpVtbl.value.dbl_click.unsafe_as(Proc(HRESULT)).call
  end
  def key_down(keycode : Int16*, shiftstate : Int16) : HRESULT
    @lpVtbl.value.key_down.unsafe_as(Proc(Int16*, Int16, HRESULT)).call(keycode, shiftstate)
  end
  def key_press(keyascii : Int16*) : HRESULT
    @lpVtbl.value.key_press.unsafe_as(Proc(Int16*, HRESULT)).call(keyascii)
  end
  def key_up(keycode : Int16*, shiftstate : Int16) : HRESULT
    @lpVtbl.value.key_up.unsafe_as(Proc(Int16*, Int16, HRESULT)).call(keycode, shiftstate)
  end
  def mouse_down(buttonstate : Int16, shiftstate : Int16, x : Int32, y : Int32) : HRESULT
    @lpVtbl.value.mouse_down.unsafe_as(Proc(Int16, Int16, Int32, Int32, HRESULT)).call(buttonstate, shiftstate, x, y)
  end
  def mouse_move(buttonstate : Int16, shiftstate : Int16, x : Int32, y : Int32) : HRESULT
    @lpVtbl.value.mouse_move.unsafe_as(Proc(Int16, Int16, Int32, Int32, HRESULT)).call(buttonstate, shiftstate, x, y)
  end
  def mouse_up(buttonstate : Int16, shiftstate : Int16, x : Int32, y : Int32) : HRESULT
    @lpVtbl.value.mouse_up.unsafe_as(Proc(Int16, Int16, Int32, Int32, HRESULT)).call(buttonstate, shiftstate, x, y)
  end
end
struct LibWin32::IMSVidCompositionSegment
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_class_id(pclassid : Guid*) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(Guid*, HRESULT)).call(pclassid)
  end
  def get_init(pinit : IUnknown*) : HRESULT
    @lpVtbl.value.get_init.unsafe_as(Proc(IUnknown*, HRESULT)).call(pinit)
  end
  def put_init(pinit : IUnknown) : HRESULT
    @lpVtbl.value.put_init.unsafe_as(Proc(IUnknown, HRESULT)).call(pinit)
  end
  def enum_filters(pnewenum : IEnumFilters*) : HRESULT
    @lpVtbl.value.enum_filters.unsafe_as(Proc(IEnumFilters*, HRESULT)).call(pnewenum)
  end
  def get_container(ppctl : IMSVidGraphSegmentContainer*) : HRESULT
    @lpVtbl.value.get_container.unsafe_as(Proc(IMSVidGraphSegmentContainer*, HRESULT)).call(ppctl)
  end
  def put_container(pctl : IMSVidGraphSegmentContainer) : HRESULT
    @lpVtbl.value.put_container.unsafe_as(Proc(IMSVidGraphSegmentContainer, HRESULT)).call(pctl)
  end
  def get_type(ptype : MSVidSegmentType*) : HRESULT
    @lpVtbl.value.get_type.unsafe_as(Proc(MSVidSegmentType*, HRESULT)).call(ptype)
  end
  def get_category(pguid : Guid*) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(Guid*, HRESULT)).call(pguid)
  end
  def build : HRESULT
    @lpVtbl.value.build.unsafe_as(Proc(HRESULT)).call
  end
  def post_build : HRESULT
    @lpVtbl.value.post_build.unsafe_as(Proc(HRESULT)).call
  end
  def pre_run : HRESULT
    @lpVtbl.value.pre_run.unsafe_as(Proc(HRESULT)).call
  end
  def post_run : HRESULT
    @lpVtbl.value.post_run.unsafe_as(Proc(HRESULT)).call
  end
  def pre_stop : HRESULT
    @lpVtbl.value.pre_stop.unsafe_as(Proc(HRESULT)).call
  end
  def post_stop : HRESULT
    @lpVtbl.value.post_stop.unsafe_as(Proc(HRESULT)).call
  end
  def on_event_notify(leventcode : Int32, leventparm1 : LibC::IntPtrT, leventparm2 : LibC::IntPtrT) : HRESULT
    @lpVtbl.value.on_event_notify.unsafe_as(Proc(Int32, LibC::IntPtrT, LibC::IntPtrT, HRESULT)).call(leventcode, leventparm1, leventparm2)
  end
  def decompose : HRESULT
    @lpVtbl.value.decompose.unsafe_as(Proc(HRESULT)).call
  end
  def compose(upstream : IMSVidGraphSegment, downstream : IMSVidGraphSegment) : HRESULT
    @lpVtbl.value.compose.unsafe_as(Proc(IMSVidGraphSegment, IMSVidGraphSegment, HRESULT)).call(upstream, downstream)
  end
  def get_up(upstream : IMSVidGraphSegment*) : HRESULT
    @lpVtbl.value.get_up.unsafe_as(Proc(IMSVidGraphSegment*, HRESULT)).call(upstream)
  end
  def get_down(downstream : IMSVidGraphSegment*) : HRESULT
    @lpVtbl.value.get_down.unsafe_as(Proc(IMSVidGraphSegment*, HRESULT)).call(downstream)
  end
end
struct LibWin32::IEnumMSVidGraphSegment
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def next(celt : UInt32, rgelt : IMSVidGraphSegment*, pceltfetched : UInt32*) : HRESULT
    @lpVtbl.value.next.unsafe_as(Proc(UInt32, IMSVidGraphSegment*, UInt32*, HRESULT)).call(celt, rgelt, pceltfetched)
  end
  def skip(celt : UInt32) : HRESULT
    @lpVtbl.value.skip.unsafe_as(Proc(UInt32, HRESULT)).call(celt)
  end
  def reset : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(HRESULT)).call
  end
  def clone(ppenum : IEnumMSVidGraphSegment*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(IEnumMSVidGraphSegment*, HRESULT)).call(ppenum)
  end
end
struct LibWin32::IMSVidVRGraphSegment
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_class_id(pclassid : Guid*) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(Guid*, HRESULT)).call(pclassid)
  end
  def get_init(pinit : IUnknown*) : HRESULT
    @lpVtbl.value.get_init.unsafe_as(Proc(IUnknown*, HRESULT)).call(pinit)
  end
  def put_init(pinit : IUnknown) : HRESULT
    @lpVtbl.value.put_init.unsafe_as(Proc(IUnknown, HRESULT)).call(pinit)
  end
  def enum_filters(pnewenum : IEnumFilters*) : HRESULT
    @lpVtbl.value.enum_filters.unsafe_as(Proc(IEnumFilters*, HRESULT)).call(pnewenum)
  end
  def get_container(ppctl : IMSVidGraphSegmentContainer*) : HRESULT
    @lpVtbl.value.get_container.unsafe_as(Proc(IMSVidGraphSegmentContainer*, HRESULT)).call(ppctl)
  end
  def put_container(pctl : IMSVidGraphSegmentContainer) : HRESULT
    @lpVtbl.value.put_container.unsafe_as(Proc(IMSVidGraphSegmentContainer, HRESULT)).call(pctl)
  end
  def get_type(ptype : MSVidSegmentType*) : HRESULT
    @lpVtbl.value.get_type.unsafe_as(Proc(MSVidSegmentType*, HRESULT)).call(ptype)
  end
  def get_category(pguid : Guid*) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(Guid*, HRESULT)).call(pguid)
  end
  def build : HRESULT
    @lpVtbl.value.build.unsafe_as(Proc(HRESULT)).call
  end
  def post_build : HRESULT
    @lpVtbl.value.post_build.unsafe_as(Proc(HRESULT)).call
  end
  def pre_run : HRESULT
    @lpVtbl.value.pre_run.unsafe_as(Proc(HRESULT)).call
  end
  def post_run : HRESULT
    @lpVtbl.value.post_run.unsafe_as(Proc(HRESULT)).call
  end
  def pre_stop : HRESULT
    @lpVtbl.value.pre_stop.unsafe_as(Proc(HRESULT)).call
  end
  def post_stop : HRESULT
    @lpVtbl.value.post_stop.unsafe_as(Proc(HRESULT)).call
  end
  def on_event_notify(leventcode : Int32, leventparm1 : LibC::IntPtrT, leventparm2 : LibC::IntPtrT) : HRESULT
    @lpVtbl.value.on_event_notify.unsafe_as(Proc(Int32, LibC::IntPtrT, LibC::IntPtrT, HRESULT)).call(leventcode, leventparm1, leventparm2)
  end
  def decompose : HRESULT
    @lpVtbl.value.decompose.unsafe_as(Proc(HRESULT)).call
  end
  def put__vm_renderer_mode(dwmode : Int32) : HRESULT
    @lpVtbl.value.put__vm_renderer_mode.unsafe_as(Proc(Int32, HRESULT)).call(dwmode)
  end
  def put_owner(window : LibC::HANDLE) : HRESULT
    @lpVtbl.value.put_owner.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(window)
  end
  def get_owner(window : HANDLE*) : HRESULT
    @lpVtbl.value.get_owner.unsafe_as(Proc(HANDLE*, HRESULT)).call(window)
  end
  def get_use_overlay(useoverlayval : Int16*) : HRESULT
    @lpVtbl.value.get_use_overlay.unsafe_as(Proc(Int16*, HRESULT)).call(useoverlayval)
  end
  def put_use_overlay(useoverlayval : Int16) : HRESULT
    @lpVtbl.value.put_use_overlay.unsafe_as(Proc(Int16, HRESULT)).call(useoverlayval)
  end
  def get_visible(visible : Int16*) : HRESULT
    @lpVtbl.value.get_visible.unsafe_as(Proc(Int16*, HRESULT)).call(visible)
  end
  def put_visible(visible : Int16) : HRESULT
    @lpVtbl.value.put_visible.unsafe_as(Proc(Int16, HRESULT)).call(visible)
  end
  def get_color_key(colorkey : UInt32*) : HRESULT
    @lpVtbl.value.get_color_key.unsafe_as(Proc(UInt32*, HRESULT)).call(colorkey)
  end
  def put_color_key(colorkey : UInt32) : HRESULT
    @lpVtbl.value.put_color_key.unsafe_as(Proc(UInt32, HRESULT)).call(colorkey)
  end
  def get_source(r : RECT*) : HRESULT
    @lpVtbl.value.get_source.unsafe_as(Proc(RECT*, HRESULT)).call(r)
  end
  def put_source(r : RECT) : HRESULT
    @lpVtbl.value.put_source.unsafe_as(Proc(RECT, HRESULT)).call(r)
  end
  def get_destination(r : RECT*) : HRESULT
    @lpVtbl.value.get_destination.unsafe_as(Proc(RECT*, HRESULT)).call(r)
  end
  def put_destination(r : RECT) : HRESULT
    @lpVtbl.value.put_destination.unsafe_as(Proc(RECT, HRESULT)).call(r)
  end
  def get_native_size(sizeval : SIZE*, aspectratio : SIZE*) : HRESULT
    @lpVtbl.value.get_native_size.unsafe_as(Proc(SIZE*, SIZE*, HRESULT)).call(sizeval, aspectratio)
  end
  def get_border_color(color : UInt32*) : HRESULT
    @lpVtbl.value.get_border_color.unsafe_as(Proc(UInt32*, HRESULT)).call(color)
  end
  def put_border_color(color : UInt32) : HRESULT
    @lpVtbl.value.put_border_color.unsafe_as(Proc(UInt32, HRESULT)).call(color)
  end
  def get_maintain_aspect_ratio(fmaintain : Int16*) : HRESULT
    @lpVtbl.value.get_maintain_aspect_ratio.unsafe_as(Proc(Int16*, HRESULT)).call(fmaintain)
  end
  def put_maintain_aspect_ratio(fmaintain : Int16) : HRESULT
    @lpVtbl.value.put_maintain_aspect_ratio.unsafe_as(Proc(Int16, HRESULT)).call(fmaintain)
  end
  def refresh : HRESULT
    @lpVtbl.value.refresh.unsafe_as(Proc(HRESULT)).call
  end
  def display_change : HRESULT
    @lpVtbl.value.display_change.unsafe_as(Proc(HRESULT)).call
  end
  def re_paint(hdc : HDC) : HRESULT
    @lpVtbl.value.re_paint.unsafe_as(Proc(HDC, HRESULT)).call(hdc)
  end
end
struct LibWin32::IMSVidDevice
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
end
struct LibWin32::IMSVidDevice2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device_path(devpath : UInt8**) : HRESULT
    @lpVtbl.value.get_device_path.unsafe_as(Proc(UInt8**, HRESULT)).call(devpath)
  end
end
struct LibWin32::IMSVidInputDevice
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
  def is_viewable(v : VARIANT*, pfviewable : Int16*) : HRESULT
    @lpVtbl.value.is_viewable.unsafe_as(Proc(VARIANT*, Int16*, HRESULT)).call(v, pfviewable)
  end
  def view(v : VARIANT*) : HRESULT
    @lpVtbl.value.view.unsafe_as(Proc(VARIANT*, HRESULT)).call(v)
  end
end
struct LibWin32::IMSVidDeviceEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def state_change(lpd : IMSVidDevice, oldstate : Int32, newstate : Int32) : HRESULT
    @lpVtbl.value.state_change.unsafe_as(Proc(IMSVidDevice, Int32, Int32, HRESULT)).call(lpd, oldstate, newstate)
  end
end
struct LibWin32::IMSVidInputDeviceEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IMSVidVideoInputDevice
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
  def is_viewable(v : VARIANT*, pfviewable : Int16*) : HRESULT
    @lpVtbl.value.is_viewable.unsafe_as(Proc(VARIANT*, Int16*, HRESULT)).call(v, pfviewable)
  end
  def view(v : VARIANT*) : HRESULT
    @lpVtbl.value.view.unsafe_as(Proc(VARIANT*, HRESULT)).call(v)
  end
end
struct LibWin32::IMSVidPlayback
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
  def is_viewable(v : VARIANT*, pfviewable : Int16*) : HRESULT
    @lpVtbl.value.is_viewable.unsafe_as(Proc(VARIANT*, Int16*, HRESULT)).call(v, pfviewable)
  end
  def view(v : VARIANT*) : HRESULT
    @lpVtbl.value.view.unsafe_as(Proc(VARIANT*, HRESULT)).call(v)
  end
  def get_enable_reset_on_stop(pval : Int16*) : HRESULT
    @lpVtbl.value.get_enable_reset_on_stop.unsafe_as(Proc(Int16*, HRESULT)).call(pval)
  end
  def put_enable_reset_on_stop(newval : Int16) : HRESULT
    @lpVtbl.value.put_enable_reset_on_stop.unsafe_as(Proc(Int16, HRESULT)).call(newval)
  end
  def run : HRESULT
    @lpVtbl.value.run.unsafe_as(Proc(HRESULT)).call
  end
  def pause : HRESULT
    @lpVtbl.value.pause.unsafe_as(Proc(HRESULT)).call
  end
  def stop : HRESULT
    @lpVtbl.value.stop.unsafe_as(Proc(HRESULT)).call
  end
  def get_can_step(fbackwards : Int16, pfcan : Int16*) : HRESULT
    @lpVtbl.value.get_can_step.unsafe_as(Proc(Int16, Int16*, HRESULT)).call(fbackwards, pfcan)
  end
  def step(lstep : Int32) : HRESULT
    @lpVtbl.value.step.unsafe_as(Proc(Int32, HRESULT)).call(lstep)
  end
  def put_rate(plrate : Float64) : HRESULT
    @lpVtbl.value.put_rate.unsafe_as(Proc(Float64, HRESULT)).call(plrate)
  end
  def get_rate(plrate : Float64*) : HRESULT
    @lpVtbl.value.get_rate.unsafe_as(Proc(Float64*, HRESULT)).call(plrate)
  end
  def put_current_position(lposition : Int32) : HRESULT
    @lpVtbl.value.put_current_position.unsafe_as(Proc(Int32, HRESULT)).call(lposition)
  end
  def get_current_position(lposition : Int32*) : HRESULT
    @lpVtbl.value.get_current_position.unsafe_as(Proc(Int32*, HRESULT)).call(lposition)
  end
  def put_position_mode(lpositionmode : PositionModeList) : HRESULT
    @lpVtbl.value.put_position_mode.unsafe_as(Proc(PositionModeList, HRESULT)).call(lpositionmode)
  end
  def get_position_mode(lpositionmode : PositionModeList*) : HRESULT
    @lpVtbl.value.get_position_mode.unsafe_as(Proc(PositionModeList*, HRESULT)).call(lpositionmode)
  end
  def get_length(llength : Int32*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(Int32*, HRESULT)).call(llength)
  end
end
struct LibWin32::IMSVidPlaybackEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def end_of_media(lpd : IMSVidPlayback) : HRESULT
    @lpVtbl.value.end_of_media.unsafe_as(Proc(IMSVidPlayback, HRESULT)).call(lpd)
  end
end
struct LibWin32::IMSVidTuner
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
  def is_viewable(v : VARIANT*, pfviewable : Int16*) : HRESULT
    @lpVtbl.value.is_viewable.unsafe_as(Proc(VARIANT*, Int16*, HRESULT)).call(v, pfviewable)
  end
  def view(v : VARIANT*) : HRESULT
    @lpVtbl.value.view.unsafe_as(Proc(VARIANT*, HRESULT)).call(v)
  end
  def get_tune(pptr : ITuneRequest*) : HRESULT
    @lpVtbl.value.get_tune.unsafe_as(Proc(ITuneRequest*, HRESULT)).call(pptr)
  end
  def put_tune(ptr : ITuneRequest) : HRESULT
    @lpVtbl.value.put_tune.unsafe_as(Proc(ITuneRequest, HRESULT)).call(ptr)
  end
  def get_tuning_space(plts : ITuningSpace*) : HRESULT
    @lpVtbl.value.get_tuning_space.unsafe_as(Proc(ITuningSpace*, HRESULT)).call(plts)
  end
  def put_tuning_space(plts : ITuningSpace) : HRESULT
    @lpVtbl.value.put_tuning_space.unsafe_as(Proc(ITuningSpace, HRESULT)).call(plts)
  end
end
struct LibWin32::IMSVidTunerEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def tune_changed(lpd : IMSVidTuner) : HRESULT
    @lpVtbl.value.tune_changed.unsafe_as(Proc(IMSVidTuner, HRESULT)).call(lpd)
  end
end
struct LibWin32::IMSVidAnalogTuner
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
  def is_viewable(v : VARIANT*, pfviewable : Int16*) : HRESULT
    @lpVtbl.value.is_viewable.unsafe_as(Proc(VARIANT*, Int16*, HRESULT)).call(v, pfviewable)
  end
  def view(v : VARIANT*) : HRESULT
    @lpVtbl.value.view.unsafe_as(Proc(VARIANT*, HRESULT)).call(v)
  end
  def get_tune(pptr : ITuneRequest*) : HRESULT
    @lpVtbl.value.get_tune.unsafe_as(Proc(ITuneRequest*, HRESULT)).call(pptr)
  end
  def put_tune(ptr : ITuneRequest) : HRESULT
    @lpVtbl.value.put_tune.unsafe_as(Proc(ITuneRequest, HRESULT)).call(ptr)
  end
  def get_tuning_space(plts : ITuningSpace*) : HRESULT
    @lpVtbl.value.get_tuning_space.unsafe_as(Proc(ITuningSpace*, HRESULT)).call(plts)
  end
  def put_tuning_space(plts : ITuningSpace) : HRESULT
    @lpVtbl.value.put_tuning_space.unsafe_as(Proc(ITuningSpace, HRESULT)).call(plts)
  end
  def get_channel(channel : Int32*) : HRESULT
    @lpVtbl.value.get_channel.unsafe_as(Proc(Int32*, HRESULT)).call(channel)
  end
  def put_channel(channel : Int32) : HRESULT
    @lpVtbl.value.put_channel.unsafe_as(Proc(Int32, HRESULT)).call(channel)
  end
  def get_video_frequency(lcc : Int32*) : HRESULT
    @lpVtbl.value.get_video_frequency.unsafe_as(Proc(Int32*, HRESULT)).call(lcc)
  end
  def get_audio_frequency(lcc : Int32*) : HRESULT
    @lpVtbl.value.get_audio_frequency.unsafe_as(Proc(Int32*, HRESULT)).call(lcc)
  end
  def get_country_code(lcc : Int32*) : HRESULT
    @lpVtbl.value.get_country_code.unsafe_as(Proc(Int32*, HRESULT)).call(lcc)
  end
  def put_country_code(lcc : Int32) : HRESULT
    @lpVtbl.value.put_country_code.unsafe_as(Proc(Int32, HRESULT)).call(lcc)
  end
  def get_sap(pfsapon : Int16*) : HRESULT
    @lpVtbl.value.get_sap.unsafe_as(Proc(Int16*, HRESULT)).call(pfsapon)
  end
  def put_sap(fsapon : Int16) : HRESULT
    @lpVtbl.value.put_sap.unsafe_as(Proc(Int16, HRESULT)).call(fsapon)
  end
  def channel_available(nchannel : Int32, signalstrength : Int32*, fsignalpresent : Int16*) : HRESULT
    @lpVtbl.value.channel_available.unsafe_as(Proc(Int32, Int32*, Int16*, HRESULT)).call(nchannel, signalstrength, fsignalpresent)
  end
end
struct LibWin32::IMSVidAnalogTuner2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
  def is_viewable(v : VARIANT*, pfviewable : Int16*) : HRESULT
    @lpVtbl.value.is_viewable.unsafe_as(Proc(VARIANT*, Int16*, HRESULT)).call(v, pfviewable)
  end
  def view(v : VARIANT*) : HRESULT
    @lpVtbl.value.view.unsafe_as(Proc(VARIANT*, HRESULT)).call(v)
  end
  def get_tune(pptr : ITuneRequest*) : HRESULT
    @lpVtbl.value.get_tune.unsafe_as(Proc(ITuneRequest*, HRESULT)).call(pptr)
  end
  def put_tune(ptr : ITuneRequest) : HRESULT
    @lpVtbl.value.put_tune.unsafe_as(Proc(ITuneRequest, HRESULT)).call(ptr)
  end
  def get_tuning_space(plts : ITuningSpace*) : HRESULT
    @lpVtbl.value.get_tuning_space.unsafe_as(Proc(ITuningSpace*, HRESULT)).call(plts)
  end
  def put_tuning_space(plts : ITuningSpace) : HRESULT
    @lpVtbl.value.put_tuning_space.unsafe_as(Proc(ITuningSpace, HRESULT)).call(plts)
  end
  def get_channel(channel : Int32*) : HRESULT
    @lpVtbl.value.get_channel.unsafe_as(Proc(Int32*, HRESULT)).call(channel)
  end
  def put_channel(channel : Int32) : HRESULT
    @lpVtbl.value.put_channel.unsafe_as(Proc(Int32, HRESULT)).call(channel)
  end
  def get_video_frequency(lcc : Int32*) : HRESULT
    @lpVtbl.value.get_video_frequency.unsafe_as(Proc(Int32*, HRESULT)).call(lcc)
  end
  def get_audio_frequency(lcc : Int32*) : HRESULT
    @lpVtbl.value.get_audio_frequency.unsafe_as(Proc(Int32*, HRESULT)).call(lcc)
  end
  def get_country_code(lcc : Int32*) : HRESULT
    @lpVtbl.value.get_country_code.unsafe_as(Proc(Int32*, HRESULT)).call(lcc)
  end
  def put_country_code(lcc : Int32) : HRESULT
    @lpVtbl.value.put_country_code.unsafe_as(Proc(Int32, HRESULT)).call(lcc)
  end
  def get_sap(pfsapon : Int16*) : HRESULT
    @lpVtbl.value.get_sap.unsafe_as(Proc(Int16*, HRESULT)).call(pfsapon)
  end
  def put_sap(fsapon : Int16) : HRESULT
    @lpVtbl.value.put_sap.unsafe_as(Proc(Int16, HRESULT)).call(fsapon)
  end
  def channel_available(nchannel : Int32, signalstrength : Int32*, fsignalpresent : Int16*) : HRESULT
    @lpVtbl.value.channel_available.unsafe_as(Proc(Int32, Int32*, Int16*, HRESULT)).call(nchannel, signalstrength, fsignalpresent)
  end
  def get_tv_formats(formats : Int32*) : HRESULT
    @lpVtbl.value.get_tv_formats.unsafe_as(Proc(Int32*, HRESULT)).call(formats)
  end
  def get_tuner_modes(modes : Int32*) : HRESULT
    @lpVtbl.value.get_tuner_modes.unsafe_as(Proc(Int32*, HRESULT)).call(modes)
  end
  def get_num_aux_inputs(inputs : Int32*) : HRESULT
    @lpVtbl.value.get_num_aux_inputs.unsafe_as(Proc(Int32*, HRESULT)).call(inputs)
  end
end
struct LibWin32::IMSVidAnalogTunerEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def tune_changed(lpd : IMSVidTuner) : HRESULT
    @lpVtbl.value.tune_changed.unsafe_as(Proc(IMSVidTuner, HRESULT)).call(lpd)
  end
end
struct LibWin32::IMSVidFilePlayback
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
  def is_viewable(v : VARIANT*, pfviewable : Int16*) : HRESULT
    @lpVtbl.value.is_viewable.unsafe_as(Proc(VARIANT*, Int16*, HRESULT)).call(v, pfviewable)
  end
  def view(v : VARIANT*) : HRESULT
    @lpVtbl.value.view.unsafe_as(Proc(VARIANT*, HRESULT)).call(v)
  end
  def get_enable_reset_on_stop(pval : Int16*) : HRESULT
    @lpVtbl.value.get_enable_reset_on_stop.unsafe_as(Proc(Int16*, HRESULT)).call(pval)
  end
  def put_enable_reset_on_stop(newval : Int16) : HRESULT
    @lpVtbl.value.put_enable_reset_on_stop.unsafe_as(Proc(Int16, HRESULT)).call(newval)
  end
  def run : HRESULT
    @lpVtbl.value.run.unsafe_as(Proc(HRESULT)).call
  end
  def pause : HRESULT
    @lpVtbl.value.pause.unsafe_as(Proc(HRESULT)).call
  end
  def stop : HRESULT
    @lpVtbl.value.stop.unsafe_as(Proc(HRESULT)).call
  end
  def get_can_step(fbackwards : Int16, pfcan : Int16*) : HRESULT
    @lpVtbl.value.get_can_step.unsafe_as(Proc(Int16, Int16*, HRESULT)).call(fbackwards, pfcan)
  end
  def step(lstep : Int32) : HRESULT
    @lpVtbl.value.step.unsafe_as(Proc(Int32, HRESULT)).call(lstep)
  end
  def put_rate(plrate : Float64) : HRESULT
    @lpVtbl.value.put_rate.unsafe_as(Proc(Float64, HRESULT)).call(plrate)
  end
  def get_rate(plrate : Float64*) : HRESULT
    @lpVtbl.value.get_rate.unsafe_as(Proc(Float64*, HRESULT)).call(plrate)
  end
  def put_current_position(lposition : Int32) : HRESULT
    @lpVtbl.value.put_current_position.unsafe_as(Proc(Int32, HRESULT)).call(lposition)
  end
  def get_current_position(lposition : Int32*) : HRESULT
    @lpVtbl.value.get_current_position.unsafe_as(Proc(Int32*, HRESULT)).call(lposition)
  end
  def put_position_mode(lpositionmode : PositionModeList) : HRESULT
    @lpVtbl.value.put_position_mode.unsafe_as(Proc(PositionModeList, HRESULT)).call(lpositionmode)
  end
  def get_position_mode(lpositionmode : PositionModeList*) : HRESULT
    @lpVtbl.value.get_position_mode.unsafe_as(Proc(PositionModeList*, HRESULT)).call(lpositionmode)
  end
  def get_length(llength : Int32*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(Int32*, HRESULT)).call(llength)
  end
  def get_file_name(filename : UInt8**) : HRESULT
    @lpVtbl.value.get_file_name.unsafe_as(Proc(UInt8**, HRESULT)).call(filename)
  end
  def put_file_name(filename : UInt8*) : HRESULT
    @lpVtbl.value.put_file_name.unsafe_as(Proc(UInt8*, HRESULT)).call(filename)
  end
end
struct LibWin32::IMSVidFilePlayback2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
  def is_viewable(v : VARIANT*, pfviewable : Int16*) : HRESULT
    @lpVtbl.value.is_viewable.unsafe_as(Proc(VARIANT*, Int16*, HRESULT)).call(v, pfviewable)
  end
  def view(v : VARIANT*) : HRESULT
    @lpVtbl.value.view.unsafe_as(Proc(VARIANT*, HRESULT)).call(v)
  end
  def get_enable_reset_on_stop(pval : Int16*) : HRESULT
    @lpVtbl.value.get_enable_reset_on_stop.unsafe_as(Proc(Int16*, HRESULT)).call(pval)
  end
  def put_enable_reset_on_stop(newval : Int16) : HRESULT
    @lpVtbl.value.put_enable_reset_on_stop.unsafe_as(Proc(Int16, HRESULT)).call(newval)
  end
  def run : HRESULT
    @lpVtbl.value.run.unsafe_as(Proc(HRESULT)).call
  end
  def pause : HRESULT
    @lpVtbl.value.pause.unsafe_as(Proc(HRESULT)).call
  end
  def stop : HRESULT
    @lpVtbl.value.stop.unsafe_as(Proc(HRESULT)).call
  end
  def get_can_step(fbackwards : Int16, pfcan : Int16*) : HRESULT
    @lpVtbl.value.get_can_step.unsafe_as(Proc(Int16, Int16*, HRESULT)).call(fbackwards, pfcan)
  end
  def step(lstep : Int32) : HRESULT
    @lpVtbl.value.step.unsafe_as(Proc(Int32, HRESULT)).call(lstep)
  end
  def put_rate(plrate : Float64) : HRESULT
    @lpVtbl.value.put_rate.unsafe_as(Proc(Float64, HRESULT)).call(plrate)
  end
  def get_rate(plrate : Float64*) : HRESULT
    @lpVtbl.value.get_rate.unsafe_as(Proc(Float64*, HRESULT)).call(plrate)
  end
  def put_current_position(lposition : Int32) : HRESULT
    @lpVtbl.value.put_current_position.unsafe_as(Proc(Int32, HRESULT)).call(lposition)
  end
  def get_current_position(lposition : Int32*) : HRESULT
    @lpVtbl.value.get_current_position.unsafe_as(Proc(Int32*, HRESULT)).call(lposition)
  end
  def put_position_mode(lpositionmode : PositionModeList) : HRESULT
    @lpVtbl.value.put_position_mode.unsafe_as(Proc(PositionModeList, HRESULT)).call(lpositionmode)
  end
  def get_position_mode(lpositionmode : PositionModeList*) : HRESULT
    @lpVtbl.value.get_position_mode.unsafe_as(Proc(PositionModeList*, HRESULT)).call(lpositionmode)
  end
  def get_length(llength : Int32*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(Int32*, HRESULT)).call(llength)
  end
  def get_file_name(filename : UInt8**) : HRESULT
    @lpVtbl.value.get_file_name.unsafe_as(Proc(UInt8**, HRESULT)).call(filename)
  end
  def put_file_name(filename : UInt8*) : HRESULT
    @lpVtbl.value.put_file_name.unsafe_as(Proc(UInt8*, HRESULT)).call(filename)
  end
  def put__source_filter(filename : UInt8*) : HRESULT
    @lpVtbl.value.put__source_filter.unsafe_as(Proc(UInt8*, HRESULT)).call(filename)
  end
  def put___source_filter(filename : Guid) : HRESULT
    @lpVtbl.value.put___source_filter.unsafe_as(Proc(Guid, HRESULT)).call(filename)
  end
end
struct LibWin32::IMSVidFilePlaybackEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def end_of_media(lpd : IMSVidPlayback) : HRESULT
    @lpVtbl.value.end_of_media.unsafe_as(Proc(IMSVidPlayback, HRESULT)).call(lpd)
  end
end
struct LibWin32::IMSVidWebDVD
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
  def is_viewable(v : VARIANT*, pfviewable : Int16*) : HRESULT
    @lpVtbl.value.is_viewable.unsafe_as(Proc(VARIANT*, Int16*, HRESULT)).call(v, pfviewable)
  end
  def view(v : VARIANT*) : HRESULT
    @lpVtbl.value.view.unsafe_as(Proc(VARIANT*, HRESULT)).call(v)
  end
  def get_enable_reset_on_stop(pval : Int16*) : HRESULT
    @lpVtbl.value.get_enable_reset_on_stop.unsafe_as(Proc(Int16*, HRESULT)).call(pval)
  end
  def put_enable_reset_on_stop(newval : Int16) : HRESULT
    @lpVtbl.value.put_enable_reset_on_stop.unsafe_as(Proc(Int16, HRESULT)).call(newval)
  end
  def run : HRESULT
    @lpVtbl.value.run.unsafe_as(Proc(HRESULT)).call
  end
  def pause : HRESULT
    @lpVtbl.value.pause.unsafe_as(Proc(HRESULT)).call
  end
  def stop : HRESULT
    @lpVtbl.value.stop.unsafe_as(Proc(HRESULT)).call
  end
  def get_can_step(fbackwards : Int16, pfcan : Int16*) : HRESULT
    @lpVtbl.value.get_can_step.unsafe_as(Proc(Int16, Int16*, HRESULT)).call(fbackwards, pfcan)
  end
  def step(lstep : Int32) : HRESULT
    @lpVtbl.value.step.unsafe_as(Proc(Int32, HRESULT)).call(lstep)
  end
  def put_rate(plrate : Float64) : HRESULT
    @lpVtbl.value.put_rate.unsafe_as(Proc(Float64, HRESULT)).call(plrate)
  end
  def get_rate(plrate : Float64*) : HRESULT
    @lpVtbl.value.get_rate.unsafe_as(Proc(Float64*, HRESULT)).call(plrate)
  end
  def put_current_position(lposition : Int32) : HRESULT
    @lpVtbl.value.put_current_position.unsafe_as(Proc(Int32, HRESULT)).call(lposition)
  end
  def get_current_position(lposition : Int32*) : HRESULT
    @lpVtbl.value.get_current_position.unsafe_as(Proc(Int32*, HRESULT)).call(lposition)
  end
  def put_position_mode(lpositionmode : PositionModeList) : HRESULT
    @lpVtbl.value.put_position_mode.unsafe_as(Proc(PositionModeList, HRESULT)).call(lpositionmode)
  end
  def get_position_mode(lpositionmode : PositionModeList*) : HRESULT
    @lpVtbl.value.get_position_mode.unsafe_as(Proc(PositionModeList*, HRESULT)).call(lpositionmode)
  end
  def get_length(llength : Int32*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(Int32*, HRESULT)).call(llength)
  end
  def on_dvd_event(levent : Int32, lparam1 : LibC::IntPtrT, lparam2 : LibC::IntPtrT) : HRESULT
    @lpVtbl.value.on_dvd_event.unsafe_as(Proc(Int32, LibC::IntPtrT, LibC::IntPtrT, HRESULT)).call(levent, lparam1, lparam2)
  end
  def play_title(ltitle : Int32) : HRESULT
    @lpVtbl.value.play_title.unsafe_as(Proc(Int32, HRESULT)).call(ltitle)
  end
  def play_chapter_in_title(ltitle : Int32, lchapter : Int32) : HRESULT
    @lpVtbl.value.play_chapter_in_title.unsafe_as(Proc(Int32, Int32, HRESULT)).call(ltitle, lchapter)
  end
  def play_chapter(lchapter : Int32) : HRESULT
    @lpVtbl.value.play_chapter.unsafe_as(Proc(Int32, HRESULT)).call(lchapter)
  end
  def play_chapters_auto_stop(ltitle : Int32, lstrchapter : Int32, lchaptercount : Int32) : HRESULT
    @lpVtbl.value.play_chapters_auto_stop.unsafe_as(Proc(Int32, Int32, Int32, HRESULT)).call(ltitle, lstrchapter, lchaptercount)
  end
  def play_at_time(strtime : UInt8*) : HRESULT
    @lpVtbl.value.play_at_time.unsafe_as(Proc(UInt8*, HRESULT)).call(strtime)
  end
  def play_at_time_in_title(ltitle : Int32, strtime : UInt8*) : HRESULT
    @lpVtbl.value.play_at_time_in_title.unsafe_as(Proc(Int32, UInt8*, HRESULT)).call(ltitle, strtime)
  end
  def play_period_in_title_auto_stop(ltitle : Int32, strstarttime : UInt8*, strendtime : UInt8*) : HRESULT
    @lpVtbl.value.play_period_in_title_auto_stop.unsafe_as(Proc(Int32, UInt8*, UInt8*, HRESULT)).call(ltitle, strstarttime, strendtime)
  end
  def replay_chapter : HRESULT
    @lpVtbl.value.replay_chapter.unsafe_as(Proc(HRESULT)).call
  end
  def play_prev_chapter : HRESULT
    @lpVtbl.value.play_prev_chapter.unsafe_as(Proc(HRESULT)).call
  end
  def play_next_chapter : HRESULT
    @lpVtbl.value.play_next_chapter.unsafe_as(Proc(HRESULT)).call
  end
  def still_off : HRESULT
    @lpVtbl.value.still_off.unsafe_as(Proc(HRESULT)).call
  end
  def get_audio_language(lstream : Int32, fformat : Int16, straudiolang : UInt8**) : HRESULT
    @lpVtbl.value.get_audio_language.unsafe_as(Proc(Int32, Int16, UInt8**, HRESULT)).call(lstream, fformat, straudiolang)
  end
  def show_menu(menuid : DVDMenuIDConstants) : HRESULT
    @lpVtbl.value.show_menu.unsafe_as(Proc(DVDMenuIDConstants, HRESULT)).call(menuid)
  end
  def resume : HRESULT
    @lpVtbl.value.resume.unsafe_as(Proc(HRESULT)).call
  end
  def return_from_submenu : HRESULT
    @lpVtbl.value.return_from_submenu.unsafe_as(Proc(HRESULT)).call
  end
  def get_buttons_available(pval : Int32*) : HRESULT
    @lpVtbl.value.get_buttons_available.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_current_button(pval : Int32*) : HRESULT
    @lpVtbl.value.get_current_button.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def select_and_activate_button(lbutton : Int32) : HRESULT
    @lpVtbl.value.select_and_activate_button.unsafe_as(Proc(Int32, HRESULT)).call(lbutton)
  end
  def activate_button : HRESULT
    @lpVtbl.value.activate_button.unsafe_as(Proc(HRESULT)).call
  end
  def select_right_button : HRESULT
    @lpVtbl.value.select_right_button.unsafe_as(Proc(HRESULT)).call
  end
  def select_left_button : HRESULT
    @lpVtbl.value.select_left_button.unsafe_as(Proc(HRESULT)).call
  end
  def select_lower_button : HRESULT
    @lpVtbl.value.select_lower_button.unsafe_as(Proc(HRESULT)).call
  end
  def select_upper_button : HRESULT
    @lpVtbl.value.select_upper_button.unsafe_as(Proc(HRESULT)).call
  end
  def activate_at_position(xpos : Int32, ypos : Int32) : HRESULT
    @lpVtbl.value.activate_at_position.unsafe_as(Proc(Int32, Int32, HRESULT)).call(xpos, ypos)
  end
  def select_at_position(xpos : Int32, ypos : Int32) : HRESULT
    @lpVtbl.value.select_at_position.unsafe_as(Proc(Int32, Int32, HRESULT)).call(xpos, ypos)
  end
  def get_button_at_position(xpos : Int32, ypos : Int32, plbutton : Int32*) : HRESULT
    @lpVtbl.value.get_button_at_position.unsafe_as(Proc(Int32, Int32, Int32*, HRESULT)).call(xpos, ypos, plbutton)
  end
  def get_number_of_chapters(ltitle : Int32, pval : Int32*) : HRESULT
    @lpVtbl.value.get_number_of_chapters.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(ltitle, pval)
  end
  def get_total_title_time(pval : UInt8**) : HRESULT
    @lpVtbl.value.get_total_title_time.unsafe_as(Proc(UInt8**, HRESULT)).call(pval)
  end
  def get_titles_available(pval : Int32*) : HRESULT
    @lpVtbl.value.get_titles_available.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_volumes_available(pval : Int32*) : HRESULT
    @lpVtbl.value.get_volumes_available.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_current_volume(pval : Int32*) : HRESULT
    @lpVtbl.value.get_current_volume.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_current_disc_side(pval : Int32*) : HRESULT
    @lpVtbl.value.get_current_disc_side.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_current_domain(pval : Int32*) : HRESULT
    @lpVtbl.value.get_current_domain.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_current_chapter(pval : Int32*) : HRESULT
    @lpVtbl.value.get_current_chapter.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_current_title(pval : Int32*) : HRESULT
    @lpVtbl.value.get_current_title.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_current_time(pval : UInt8**) : HRESULT
    @lpVtbl.value.get_current_time.unsafe_as(Proc(UInt8**, HRESULT)).call(pval)
  end
  def dvd_time_code2bstr(timecode : Int32, ptimestr : UInt8**) : HRESULT
    @lpVtbl.value.dvd_time_code2bstr.unsafe_as(Proc(Int32, UInt8**, HRESULT)).call(timecode, ptimestr)
  end
  def get_dvd_directory(pval : UInt8**) : HRESULT
    @lpVtbl.value.get_dvd_directory.unsafe_as(Proc(UInt8**, HRESULT)).call(pval)
  end
  def put_dvd_directory(newval : UInt8*) : HRESULT
    @lpVtbl.value.put_dvd_directory.unsafe_as(Proc(UInt8*, HRESULT)).call(newval)
  end
  def is_subpicture_stream_enabled(lstream : Int32, fenabled : Int16*) : HRESULT
    @lpVtbl.value.is_subpicture_stream_enabled.unsafe_as(Proc(Int32, Int16*, HRESULT)).call(lstream, fenabled)
  end
  def is_audio_stream_enabled(lstream : Int32, fenabled : Int16*) : HRESULT
    @lpVtbl.value.is_audio_stream_enabled.unsafe_as(Proc(Int32, Int16*, HRESULT)).call(lstream, fenabled)
  end
  def get_current_subpicture_stream(pval : Int32*) : HRESULT
    @lpVtbl.value.get_current_subpicture_stream.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def put_current_subpicture_stream(newval : Int32) : HRESULT
    @lpVtbl.value.put_current_subpicture_stream.unsafe_as(Proc(Int32, HRESULT)).call(newval)
  end
  def get_subpicture_language(lstream : Int32, strlanguage : UInt8**) : HRESULT
    @lpVtbl.value.get_subpicture_language.unsafe_as(Proc(Int32, UInt8**, HRESULT)).call(lstream, strlanguage)
  end
  def get_current_audio_stream(pval : Int32*) : HRESULT
    @lpVtbl.value.get_current_audio_stream.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def put_current_audio_stream(newval : Int32) : HRESULT
    @lpVtbl.value.put_current_audio_stream.unsafe_as(Proc(Int32, HRESULT)).call(newval)
  end
  def get_audio_streams_available(pval : Int32*) : HRESULT
    @lpVtbl.value.get_audio_streams_available.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_angles_available(pval : Int32*) : HRESULT
    @lpVtbl.value.get_angles_available.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_current_angle(pval : Int32*) : HRESULT
    @lpVtbl.value.get_current_angle.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def put_current_angle(newval : Int32) : HRESULT
    @lpVtbl.value.put_current_angle.unsafe_as(Proc(Int32, HRESULT)).call(newval)
  end
  def get_subpicture_streams_available(pval : Int32*) : HRESULT
    @lpVtbl.value.get_subpicture_streams_available.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_subpicture_on(pval : Int16*) : HRESULT
    @lpVtbl.value.get_subpicture_on.unsafe_as(Proc(Int16*, HRESULT)).call(pval)
  end
  def put_subpicture_on(newval : Int16) : HRESULT
    @lpVtbl.value.put_subpicture_on.unsafe_as(Proc(Int16, HRESULT)).call(newval)
  end
  def get_dvd_unique_id(pval : UInt8**) : HRESULT
    @lpVtbl.value.get_dvd_unique_id.unsafe_as(Proc(UInt8**, HRESULT)).call(pval)
  end
  def accept_parental_level_change(faccept : Int16, strusername : UInt8*, strpassword : UInt8*) : HRESULT
    @lpVtbl.value.accept_parental_level_change.unsafe_as(Proc(Int16, UInt8*, UInt8*, HRESULT)).call(faccept, strusername, strpassword)
  end
  def notify_parental_level_change(newval : Int16) : HRESULT
    @lpVtbl.value.notify_parental_level_change.unsafe_as(Proc(Int16, HRESULT)).call(newval)
  end
  def select_parental_country(lcountry : Int32, strusername : UInt8*, strpassword : UInt8*) : HRESULT
    @lpVtbl.value.select_parental_country.unsafe_as(Proc(Int32, UInt8*, UInt8*, HRESULT)).call(lcountry, strusername, strpassword)
  end
  def select_parental_level(lparentallevel : Int32, strusername : UInt8*, strpassword : UInt8*) : HRESULT
    @lpVtbl.value.select_parental_level.unsafe_as(Proc(Int32, UInt8*, UInt8*, HRESULT)).call(lparentallevel, strusername, strpassword)
  end
  def get_title_parental_levels(ltitle : Int32, plparentallevels : Int32*) : HRESULT
    @lpVtbl.value.get_title_parental_levels.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(ltitle, plparentallevels)
  end
  def get_player_parental_country(plcountrycode : Int32*) : HRESULT
    @lpVtbl.value.get_player_parental_country.unsafe_as(Proc(Int32*, HRESULT)).call(plcountrycode)
  end
  def get_player_parental_level(plparentallevel : Int32*) : HRESULT
    @lpVtbl.value.get_player_parental_level.unsafe_as(Proc(Int32*, HRESULT)).call(plparentallevel)
  end
  def eject : HRESULT
    @lpVtbl.value.eject.unsafe_as(Proc(HRESULT)).call
  end
  def uop_valid(luop : Int32, pfvalid : Int16*) : HRESULT
    @lpVtbl.value.uop_valid.unsafe_as(Proc(Int32, Int16*, HRESULT)).call(luop, pfvalid)
  end
  def get_sprm(lindex : Int32, pssprm : Int16*) : HRESULT
    @lpVtbl.value.get_sprm.unsafe_as(Proc(Int32, Int16*, HRESULT)).call(lindex, pssprm)
  end
  def get_gprm(lindex : Int32, pssprm : Int16*) : HRESULT
    @lpVtbl.value.get_gprm.unsafe_as(Proc(Int32, Int16*, HRESULT)).call(lindex, pssprm)
  end
  def put_gprm(lindex : Int32, svalue : Int16) : HRESULT
    @lpVtbl.value.put_gprm.unsafe_as(Proc(Int32, Int16, HRESULT)).call(lindex, svalue)
  end
  def get_dvd_text_string_type(llangindex : Int32, lstringindex : Int32, ptype : DVDTextStringType*) : HRESULT
    @lpVtbl.value.get_dvd_text_string_type.unsafe_as(Proc(Int32, Int32, DVDTextStringType*, HRESULT)).call(llangindex, lstringindex, ptype)
  end
  def get_dvd_text_string(llangindex : Int32, lstringindex : Int32, pstrtext : UInt8**) : HRESULT
    @lpVtbl.value.get_dvd_text_string.unsafe_as(Proc(Int32, Int32, UInt8**, HRESULT)).call(llangindex, lstringindex, pstrtext)
  end
  def get_dvd_text_number_of_strings(llangindex : Int32, plnumofstrings : Int32*) : HRESULT
    @lpVtbl.value.get_dvd_text_number_of_strings.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(llangindex, plnumofstrings)
  end
  def get_dvd_text_number_of_languages(plnumoflangs : Int32*) : HRESULT
    @lpVtbl.value.get_dvd_text_number_of_languages.unsafe_as(Proc(Int32*, HRESULT)).call(plnumoflangs)
  end
  def get_dvd_text_language_lcid(llangindex : Int32, lcid : Int32*) : HRESULT
    @lpVtbl.value.get_dvd_text_language_lcid.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(llangindex, lcid)
  end
  def region_change : HRESULT
    @lpVtbl.value.region_change.unsafe_as(Proc(HRESULT)).call
  end
  def get_dvd_adm(pval : IDispatch*) : HRESULT
    @lpVtbl.value.get_dvd_adm.unsafe_as(Proc(IDispatch*, HRESULT)).call(pval)
  end
  def delete_bookmark : HRESULT
    @lpVtbl.value.delete_bookmark.unsafe_as(Proc(HRESULT)).call
  end
  def restore_bookmark : HRESULT
    @lpVtbl.value.restore_bookmark.unsafe_as(Proc(HRESULT)).call
  end
  def save_bookmark : HRESULT
    @lpVtbl.value.save_bookmark.unsafe_as(Proc(HRESULT)).call
  end
  def select_default_audio_language(lang : Int32, ext : Int32) : HRESULT
    @lpVtbl.value.select_default_audio_language.unsafe_as(Proc(Int32, Int32, HRESULT)).call(lang, ext)
  end
  def select_default_subpicture_language(lang : Int32, ext : DVDSPExt) : HRESULT
    @lpVtbl.value.select_default_subpicture_language.unsafe_as(Proc(Int32, DVDSPExt, HRESULT)).call(lang, ext)
  end
  def get_preferred_subpicture_stream(pval : Int32*) : HRESULT
    @lpVtbl.value.get_preferred_subpicture_stream.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_default_menu_language(lang : Int32*) : HRESULT
    @lpVtbl.value.get_default_menu_language.unsafe_as(Proc(Int32*, HRESULT)).call(lang)
  end
  def put_default_menu_language(lang : Int32) : HRESULT
    @lpVtbl.value.put_default_menu_language.unsafe_as(Proc(Int32, HRESULT)).call(lang)
  end
  def get_default_subpicture_language(lang : Int32*) : HRESULT
    @lpVtbl.value.get_default_subpicture_language.unsafe_as(Proc(Int32*, HRESULT)).call(lang)
  end
  def get_default_audio_language(lang : Int32*) : HRESULT
    @lpVtbl.value.get_default_audio_language.unsafe_as(Proc(Int32*, HRESULT)).call(lang)
  end
  def get_default_subpicture_language_ext(ext : DVDSPExt*) : HRESULT
    @lpVtbl.value.get_default_subpicture_language_ext.unsafe_as(Proc(DVDSPExt*, HRESULT)).call(ext)
  end
  def get_default_audio_language_ext(ext : Int32*) : HRESULT
    @lpVtbl.value.get_default_audio_language_ext.unsafe_as(Proc(Int32*, HRESULT)).call(ext)
  end
  def get_language_from_lcid(lcid : Int32, lang : UInt8**) : HRESULT
    @lpVtbl.value.get_language_from_lcid.unsafe_as(Proc(Int32, UInt8**, HRESULT)).call(lcid, lang)
  end
  def get_karaoke_audio_presentation_mode(pval : Int32*) : HRESULT
    @lpVtbl.value.get_karaoke_audio_presentation_mode.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def put_karaoke_audio_presentation_mode(newval : Int32) : HRESULT
    @lpVtbl.value.put_karaoke_audio_presentation_mode.unsafe_as(Proc(Int32, HRESULT)).call(newval)
  end
  def get_karaoke_channel_content(lstream : Int32, lchan : Int32, lcontent : Int32*) : HRESULT
    @lpVtbl.value.get_karaoke_channel_content.unsafe_as(Proc(Int32, Int32, Int32*, HRESULT)).call(lstream, lchan, lcontent)
  end
  def get_karaoke_channel_assignment(lstream : Int32, lchannelassignment : Int32*) : HRESULT
    @lpVtbl.value.get_karaoke_channel_assignment.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(lstream, lchannelassignment)
  end
  def restore_preferred_settings : HRESULT
    @lpVtbl.value.restore_preferred_settings.unsafe_as(Proc(HRESULT)).call
  end
  def get_button_rect(lbutton : Int32, prect : IMSVidRect*) : HRESULT
    @lpVtbl.value.get_button_rect.unsafe_as(Proc(Int32, IMSVidRect*, HRESULT)).call(lbutton, prect)
  end
  def get_dvd_screen_in_mouse_coordinates(pprect : IMSVidRect*) : HRESULT
    @lpVtbl.value.get_dvd_screen_in_mouse_coordinates.unsafe_as(Proc(IMSVidRect*, HRESULT)).call(pprect)
  end
  def put_dvd_screen_in_mouse_coordinates(prect : IMSVidRect) : HRESULT
    @lpVtbl.value.put_dvd_screen_in_mouse_coordinates.unsafe_as(Proc(IMSVidRect, HRESULT)).call(prect)
  end
end
struct LibWin32::IMSVidWebDVD2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
  def is_viewable(v : VARIANT*, pfviewable : Int16*) : HRESULT
    @lpVtbl.value.is_viewable.unsafe_as(Proc(VARIANT*, Int16*, HRESULT)).call(v, pfviewable)
  end
  def view(v : VARIANT*) : HRESULT
    @lpVtbl.value.view.unsafe_as(Proc(VARIANT*, HRESULT)).call(v)
  end
  def get_enable_reset_on_stop(pval : Int16*) : HRESULT
    @lpVtbl.value.get_enable_reset_on_stop.unsafe_as(Proc(Int16*, HRESULT)).call(pval)
  end
  def put_enable_reset_on_stop(newval : Int16) : HRESULT
    @lpVtbl.value.put_enable_reset_on_stop.unsafe_as(Proc(Int16, HRESULT)).call(newval)
  end
  def run : HRESULT
    @lpVtbl.value.run.unsafe_as(Proc(HRESULT)).call
  end
  def pause : HRESULT
    @lpVtbl.value.pause.unsafe_as(Proc(HRESULT)).call
  end
  def stop : HRESULT
    @lpVtbl.value.stop.unsafe_as(Proc(HRESULT)).call
  end
  def get_can_step(fbackwards : Int16, pfcan : Int16*) : HRESULT
    @lpVtbl.value.get_can_step.unsafe_as(Proc(Int16, Int16*, HRESULT)).call(fbackwards, pfcan)
  end
  def step(lstep : Int32) : HRESULT
    @lpVtbl.value.step.unsafe_as(Proc(Int32, HRESULT)).call(lstep)
  end
  def put_rate(plrate : Float64) : HRESULT
    @lpVtbl.value.put_rate.unsafe_as(Proc(Float64, HRESULT)).call(plrate)
  end
  def get_rate(plrate : Float64*) : HRESULT
    @lpVtbl.value.get_rate.unsafe_as(Proc(Float64*, HRESULT)).call(plrate)
  end
  def put_current_position(lposition : Int32) : HRESULT
    @lpVtbl.value.put_current_position.unsafe_as(Proc(Int32, HRESULT)).call(lposition)
  end
  def get_current_position(lposition : Int32*) : HRESULT
    @lpVtbl.value.get_current_position.unsafe_as(Proc(Int32*, HRESULT)).call(lposition)
  end
  def put_position_mode(lpositionmode : PositionModeList) : HRESULT
    @lpVtbl.value.put_position_mode.unsafe_as(Proc(PositionModeList, HRESULT)).call(lpositionmode)
  end
  def get_position_mode(lpositionmode : PositionModeList*) : HRESULT
    @lpVtbl.value.get_position_mode.unsafe_as(Proc(PositionModeList*, HRESULT)).call(lpositionmode)
  end
  def get_length(llength : Int32*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(Int32*, HRESULT)).call(llength)
  end
  def on_dvd_event(levent : Int32, lparam1 : LibC::IntPtrT, lparam2 : LibC::IntPtrT) : HRESULT
    @lpVtbl.value.on_dvd_event.unsafe_as(Proc(Int32, LibC::IntPtrT, LibC::IntPtrT, HRESULT)).call(levent, lparam1, lparam2)
  end
  def play_title(ltitle : Int32) : HRESULT
    @lpVtbl.value.play_title.unsafe_as(Proc(Int32, HRESULT)).call(ltitle)
  end
  def play_chapter_in_title(ltitle : Int32, lchapter : Int32) : HRESULT
    @lpVtbl.value.play_chapter_in_title.unsafe_as(Proc(Int32, Int32, HRESULT)).call(ltitle, lchapter)
  end
  def play_chapter(lchapter : Int32) : HRESULT
    @lpVtbl.value.play_chapter.unsafe_as(Proc(Int32, HRESULT)).call(lchapter)
  end
  def play_chapters_auto_stop(ltitle : Int32, lstrchapter : Int32, lchaptercount : Int32) : HRESULT
    @lpVtbl.value.play_chapters_auto_stop.unsafe_as(Proc(Int32, Int32, Int32, HRESULT)).call(ltitle, lstrchapter, lchaptercount)
  end
  def play_at_time(strtime : UInt8*) : HRESULT
    @lpVtbl.value.play_at_time.unsafe_as(Proc(UInt8*, HRESULT)).call(strtime)
  end
  def play_at_time_in_title(ltitle : Int32, strtime : UInt8*) : HRESULT
    @lpVtbl.value.play_at_time_in_title.unsafe_as(Proc(Int32, UInt8*, HRESULT)).call(ltitle, strtime)
  end
  def play_period_in_title_auto_stop(ltitle : Int32, strstarttime : UInt8*, strendtime : UInt8*) : HRESULT
    @lpVtbl.value.play_period_in_title_auto_stop.unsafe_as(Proc(Int32, UInt8*, UInt8*, HRESULT)).call(ltitle, strstarttime, strendtime)
  end
  def replay_chapter : HRESULT
    @lpVtbl.value.replay_chapter.unsafe_as(Proc(HRESULT)).call
  end
  def play_prev_chapter : HRESULT
    @lpVtbl.value.play_prev_chapter.unsafe_as(Proc(HRESULT)).call
  end
  def play_next_chapter : HRESULT
    @lpVtbl.value.play_next_chapter.unsafe_as(Proc(HRESULT)).call
  end
  def still_off : HRESULT
    @lpVtbl.value.still_off.unsafe_as(Proc(HRESULT)).call
  end
  def get_audio_language(lstream : Int32, fformat : Int16, straudiolang : UInt8**) : HRESULT
    @lpVtbl.value.get_audio_language.unsafe_as(Proc(Int32, Int16, UInt8**, HRESULT)).call(lstream, fformat, straudiolang)
  end
  def show_menu(menuid : DVDMenuIDConstants) : HRESULT
    @lpVtbl.value.show_menu.unsafe_as(Proc(DVDMenuIDConstants, HRESULT)).call(menuid)
  end
  def resume : HRESULT
    @lpVtbl.value.resume.unsafe_as(Proc(HRESULT)).call
  end
  def return_from_submenu : HRESULT
    @lpVtbl.value.return_from_submenu.unsafe_as(Proc(HRESULT)).call
  end
  def get_buttons_available(pval : Int32*) : HRESULT
    @lpVtbl.value.get_buttons_available.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_current_button(pval : Int32*) : HRESULT
    @lpVtbl.value.get_current_button.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def select_and_activate_button(lbutton : Int32) : HRESULT
    @lpVtbl.value.select_and_activate_button.unsafe_as(Proc(Int32, HRESULT)).call(lbutton)
  end
  def activate_button : HRESULT
    @lpVtbl.value.activate_button.unsafe_as(Proc(HRESULT)).call
  end
  def select_right_button : HRESULT
    @lpVtbl.value.select_right_button.unsafe_as(Proc(HRESULT)).call
  end
  def select_left_button : HRESULT
    @lpVtbl.value.select_left_button.unsafe_as(Proc(HRESULT)).call
  end
  def select_lower_button : HRESULT
    @lpVtbl.value.select_lower_button.unsafe_as(Proc(HRESULT)).call
  end
  def select_upper_button : HRESULT
    @lpVtbl.value.select_upper_button.unsafe_as(Proc(HRESULT)).call
  end
  def activate_at_position(xpos : Int32, ypos : Int32) : HRESULT
    @lpVtbl.value.activate_at_position.unsafe_as(Proc(Int32, Int32, HRESULT)).call(xpos, ypos)
  end
  def select_at_position(xpos : Int32, ypos : Int32) : HRESULT
    @lpVtbl.value.select_at_position.unsafe_as(Proc(Int32, Int32, HRESULT)).call(xpos, ypos)
  end
  def get_button_at_position(xpos : Int32, ypos : Int32, plbutton : Int32*) : HRESULT
    @lpVtbl.value.get_button_at_position.unsafe_as(Proc(Int32, Int32, Int32*, HRESULT)).call(xpos, ypos, plbutton)
  end
  def get_number_of_chapters(ltitle : Int32, pval : Int32*) : HRESULT
    @lpVtbl.value.get_number_of_chapters.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(ltitle, pval)
  end
  def get_total_title_time(pval : UInt8**) : HRESULT
    @lpVtbl.value.get_total_title_time.unsafe_as(Proc(UInt8**, HRESULT)).call(pval)
  end
  def get_titles_available(pval : Int32*) : HRESULT
    @lpVtbl.value.get_titles_available.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_volumes_available(pval : Int32*) : HRESULT
    @lpVtbl.value.get_volumes_available.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_current_volume(pval : Int32*) : HRESULT
    @lpVtbl.value.get_current_volume.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_current_disc_side(pval : Int32*) : HRESULT
    @lpVtbl.value.get_current_disc_side.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_current_domain(pval : Int32*) : HRESULT
    @lpVtbl.value.get_current_domain.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_current_chapter(pval : Int32*) : HRESULT
    @lpVtbl.value.get_current_chapter.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_current_title(pval : Int32*) : HRESULT
    @lpVtbl.value.get_current_title.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_current_time(pval : UInt8**) : HRESULT
    @lpVtbl.value.get_current_time.unsafe_as(Proc(UInt8**, HRESULT)).call(pval)
  end
  def dvd_time_code2bstr(timecode : Int32, ptimestr : UInt8**) : HRESULT
    @lpVtbl.value.dvd_time_code2bstr.unsafe_as(Proc(Int32, UInt8**, HRESULT)).call(timecode, ptimestr)
  end
  def get_dvd_directory(pval : UInt8**) : HRESULT
    @lpVtbl.value.get_dvd_directory.unsafe_as(Proc(UInt8**, HRESULT)).call(pval)
  end
  def put_dvd_directory(newval : UInt8*) : HRESULT
    @lpVtbl.value.put_dvd_directory.unsafe_as(Proc(UInt8*, HRESULT)).call(newval)
  end
  def is_subpicture_stream_enabled(lstream : Int32, fenabled : Int16*) : HRESULT
    @lpVtbl.value.is_subpicture_stream_enabled.unsafe_as(Proc(Int32, Int16*, HRESULT)).call(lstream, fenabled)
  end
  def is_audio_stream_enabled(lstream : Int32, fenabled : Int16*) : HRESULT
    @lpVtbl.value.is_audio_stream_enabled.unsafe_as(Proc(Int32, Int16*, HRESULT)).call(lstream, fenabled)
  end
  def get_current_subpicture_stream(pval : Int32*) : HRESULT
    @lpVtbl.value.get_current_subpicture_stream.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def put_current_subpicture_stream(newval : Int32) : HRESULT
    @lpVtbl.value.put_current_subpicture_stream.unsafe_as(Proc(Int32, HRESULT)).call(newval)
  end
  def get_subpicture_language(lstream : Int32, strlanguage : UInt8**) : HRESULT
    @lpVtbl.value.get_subpicture_language.unsafe_as(Proc(Int32, UInt8**, HRESULT)).call(lstream, strlanguage)
  end
  def get_current_audio_stream(pval : Int32*) : HRESULT
    @lpVtbl.value.get_current_audio_stream.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def put_current_audio_stream(newval : Int32) : HRESULT
    @lpVtbl.value.put_current_audio_stream.unsafe_as(Proc(Int32, HRESULT)).call(newval)
  end
  def get_audio_streams_available(pval : Int32*) : HRESULT
    @lpVtbl.value.get_audio_streams_available.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_angles_available(pval : Int32*) : HRESULT
    @lpVtbl.value.get_angles_available.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_current_angle(pval : Int32*) : HRESULT
    @lpVtbl.value.get_current_angle.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def put_current_angle(newval : Int32) : HRESULT
    @lpVtbl.value.put_current_angle.unsafe_as(Proc(Int32, HRESULT)).call(newval)
  end
  def get_subpicture_streams_available(pval : Int32*) : HRESULT
    @lpVtbl.value.get_subpicture_streams_available.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_subpicture_on(pval : Int16*) : HRESULT
    @lpVtbl.value.get_subpicture_on.unsafe_as(Proc(Int16*, HRESULT)).call(pval)
  end
  def put_subpicture_on(newval : Int16) : HRESULT
    @lpVtbl.value.put_subpicture_on.unsafe_as(Proc(Int16, HRESULT)).call(newval)
  end
  def get_dvd_unique_id(pval : UInt8**) : HRESULT
    @lpVtbl.value.get_dvd_unique_id.unsafe_as(Proc(UInt8**, HRESULT)).call(pval)
  end
  def accept_parental_level_change(faccept : Int16, strusername : UInt8*, strpassword : UInt8*) : HRESULT
    @lpVtbl.value.accept_parental_level_change.unsafe_as(Proc(Int16, UInt8*, UInt8*, HRESULT)).call(faccept, strusername, strpassword)
  end
  def notify_parental_level_change(newval : Int16) : HRESULT
    @lpVtbl.value.notify_parental_level_change.unsafe_as(Proc(Int16, HRESULT)).call(newval)
  end
  def select_parental_country(lcountry : Int32, strusername : UInt8*, strpassword : UInt8*) : HRESULT
    @lpVtbl.value.select_parental_country.unsafe_as(Proc(Int32, UInt8*, UInt8*, HRESULT)).call(lcountry, strusername, strpassword)
  end
  def select_parental_level(lparentallevel : Int32, strusername : UInt8*, strpassword : UInt8*) : HRESULT
    @lpVtbl.value.select_parental_level.unsafe_as(Proc(Int32, UInt8*, UInt8*, HRESULT)).call(lparentallevel, strusername, strpassword)
  end
  def get_title_parental_levels(ltitle : Int32, plparentallevels : Int32*) : HRESULT
    @lpVtbl.value.get_title_parental_levels.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(ltitle, plparentallevels)
  end
  def get_player_parental_country(plcountrycode : Int32*) : HRESULT
    @lpVtbl.value.get_player_parental_country.unsafe_as(Proc(Int32*, HRESULT)).call(plcountrycode)
  end
  def get_player_parental_level(plparentallevel : Int32*) : HRESULT
    @lpVtbl.value.get_player_parental_level.unsafe_as(Proc(Int32*, HRESULT)).call(plparentallevel)
  end
  def eject : HRESULT
    @lpVtbl.value.eject.unsafe_as(Proc(HRESULT)).call
  end
  def uop_valid(luop : Int32, pfvalid : Int16*) : HRESULT
    @lpVtbl.value.uop_valid.unsafe_as(Proc(Int32, Int16*, HRESULT)).call(luop, pfvalid)
  end
  def get_sprm(lindex : Int32, pssprm : Int16*) : HRESULT
    @lpVtbl.value.get_sprm.unsafe_as(Proc(Int32, Int16*, HRESULT)).call(lindex, pssprm)
  end
  def get_gprm(lindex : Int32, pssprm : Int16*) : HRESULT
    @lpVtbl.value.get_gprm.unsafe_as(Proc(Int32, Int16*, HRESULT)).call(lindex, pssprm)
  end
  def put_gprm(lindex : Int32, svalue : Int16) : HRESULT
    @lpVtbl.value.put_gprm.unsafe_as(Proc(Int32, Int16, HRESULT)).call(lindex, svalue)
  end
  def get_dvd_text_string_type(llangindex : Int32, lstringindex : Int32, ptype : DVDTextStringType*) : HRESULT
    @lpVtbl.value.get_dvd_text_string_type.unsafe_as(Proc(Int32, Int32, DVDTextStringType*, HRESULT)).call(llangindex, lstringindex, ptype)
  end
  def get_dvd_text_string(llangindex : Int32, lstringindex : Int32, pstrtext : UInt8**) : HRESULT
    @lpVtbl.value.get_dvd_text_string.unsafe_as(Proc(Int32, Int32, UInt8**, HRESULT)).call(llangindex, lstringindex, pstrtext)
  end
  def get_dvd_text_number_of_strings(llangindex : Int32, plnumofstrings : Int32*) : HRESULT
    @lpVtbl.value.get_dvd_text_number_of_strings.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(llangindex, plnumofstrings)
  end
  def get_dvd_text_number_of_languages(plnumoflangs : Int32*) : HRESULT
    @lpVtbl.value.get_dvd_text_number_of_languages.unsafe_as(Proc(Int32*, HRESULT)).call(plnumoflangs)
  end
  def get_dvd_text_language_lcid(llangindex : Int32, lcid : Int32*) : HRESULT
    @lpVtbl.value.get_dvd_text_language_lcid.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(llangindex, lcid)
  end
  def region_change : HRESULT
    @lpVtbl.value.region_change.unsafe_as(Proc(HRESULT)).call
  end
  def get_dvd_adm(pval : IDispatch*) : HRESULT
    @lpVtbl.value.get_dvd_adm.unsafe_as(Proc(IDispatch*, HRESULT)).call(pval)
  end
  def delete_bookmark : HRESULT
    @lpVtbl.value.delete_bookmark.unsafe_as(Proc(HRESULT)).call
  end
  def restore_bookmark : HRESULT
    @lpVtbl.value.restore_bookmark.unsafe_as(Proc(HRESULT)).call
  end
  def save_bookmark : HRESULT
    @lpVtbl.value.save_bookmark.unsafe_as(Proc(HRESULT)).call
  end
  def select_default_audio_language(lang : Int32, ext : Int32) : HRESULT
    @lpVtbl.value.select_default_audio_language.unsafe_as(Proc(Int32, Int32, HRESULT)).call(lang, ext)
  end
  def select_default_subpicture_language(lang : Int32, ext : DVDSPExt) : HRESULT
    @lpVtbl.value.select_default_subpicture_language.unsafe_as(Proc(Int32, DVDSPExt, HRESULT)).call(lang, ext)
  end
  def get_preferred_subpicture_stream(pval : Int32*) : HRESULT
    @lpVtbl.value.get_preferred_subpicture_stream.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_default_menu_language(lang : Int32*) : HRESULT
    @lpVtbl.value.get_default_menu_language.unsafe_as(Proc(Int32*, HRESULT)).call(lang)
  end
  def put_default_menu_language(lang : Int32) : HRESULT
    @lpVtbl.value.put_default_menu_language.unsafe_as(Proc(Int32, HRESULT)).call(lang)
  end
  def get_default_subpicture_language(lang : Int32*) : HRESULT
    @lpVtbl.value.get_default_subpicture_language.unsafe_as(Proc(Int32*, HRESULT)).call(lang)
  end
  def get_default_audio_language(lang : Int32*) : HRESULT
    @lpVtbl.value.get_default_audio_language.unsafe_as(Proc(Int32*, HRESULT)).call(lang)
  end
  def get_default_subpicture_language_ext(ext : DVDSPExt*) : HRESULT
    @lpVtbl.value.get_default_subpicture_language_ext.unsafe_as(Proc(DVDSPExt*, HRESULT)).call(ext)
  end
  def get_default_audio_language_ext(ext : Int32*) : HRESULT
    @lpVtbl.value.get_default_audio_language_ext.unsafe_as(Proc(Int32*, HRESULT)).call(ext)
  end
  def get_language_from_lcid(lcid : Int32, lang : UInt8**) : HRESULT
    @lpVtbl.value.get_language_from_lcid.unsafe_as(Proc(Int32, UInt8**, HRESULT)).call(lcid, lang)
  end
  def get_karaoke_audio_presentation_mode(pval : Int32*) : HRESULT
    @lpVtbl.value.get_karaoke_audio_presentation_mode.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def put_karaoke_audio_presentation_mode(newval : Int32) : HRESULT
    @lpVtbl.value.put_karaoke_audio_presentation_mode.unsafe_as(Proc(Int32, HRESULT)).call(newval)
  end
  def get_karaoke_channel_content(lstream : Int32, lchan : Int32, lcontent : Int32*) : HRESULT
    @lpVtbl.value.get_karaoke_channel_content.unsafe_as(Proc(Int32, Int32, Int32*, HRESULT)).call(lstream, lchan, lcontent)
  end
  def get_karaoke_channel_assignment(lstream : Int32, lchannelassignment : Int32*) : HRESULT
    @lpVtbl.value.get_karaoke_channel_assignment.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(lstream, lchannelassignment)
  end
  def restore_preferred_settings : HRESULT
    @lpVtbl.value.restore_preferred_settings.unsafe_as(Proc(HRESULT)).call
  end
  def get_button_rect(lbutton : Int32, prect : IMSVidRect*) : HRESULT
    @lpVtbl.value.get_button_rect.unsafe_as(Proc(Int32, IMSVidRect*, HRESULT)).call(lbutton, prect)
  end
  def get_dvd_screen_in_mouse_coordinates(pprect : IMSVidRect*) : HRESULT
    @lpVtbl.value.get_dvd_screen_in_mouse_coordinates.unsafe_as(Proc(IMSVidRect*, HRESULT)).call(pprect)
  end
  def put_dvd_screen_in_mouse_coordinates(prect : IMSVidRect) : HRESULT
    @lpVtbl.value.put_dvd_screen_in_mouse_coordinates.unsafe_as(Proc(IMSVidRect, HRESULT)).call(prect)
  end
  def get_bookmark(ppdata : UInt8**, pdatalength : UInt32*) : HRESULT
    @lpVtbl.value.get_bookmark.unsafe_as(Proc(UInt8**, UInt32*, HRESULT)).call(ppdata, pdatalength)
  end
  def put_bookmark(pdata : UInt8*, dwdatalength : UInt32) : HRESULT
    @lpVtbl.value.put_bookmark.unsafe_as(Proc(UInt8*, UInt32, HRESULT)).call(pdata, dwdatalength)
  end
end
struct LibWin32::IMSVidWebDVDEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def end_of_media(lpd : IMSVidPlayback) : HRESULT
    @lpVtbl.value.end_of_media.unsafe_as(Proc(IMSVidPlayback, HRESULT)).call(lpd)
  end
  def dvd_notify(leventcode : Int32, lparam1 : VARIANT, lparam2 : VARIANT) : HRESULT
    @lpVtbl.value.dvd_notify.unsafe_as(Proc(Int32, VARIANT, VARIANT, HRESULT)).call(leventcode, lparam1, lparam2)
  end
  def play_forwards(benabled : Int16) : HRESULT
    @lpVtbl.value.play_forwards.unsafe_as(Proc(Int16, HRESULT)).call(benabled)
  end
  def play_backwards(benabled : Int16) : HRESULT
    @lpVtbl.value.play_backwards.unsafe_as(Proc(Int16, HRESULT)).call(benabled)
  end
  def show_menu(menuid : DVDMenuIDConstants, benabled : Int16) : HRESULT
    @lpVtbl.value.show_menu.unsafe_as(Proc(DVDMenuIDConstants, Int16, HRESULT)).call(menuid, benabled)
  end
  def resume(benabled : Int16) : HRESULT
    @lpVtbl.value.resume.unsafe_as(Proc(Int16, HRESULT)).call(benabled)
  end
  def select_or_activate_button(benabled : Int16) : HRESULT
    @lpVtbl.value.select_or_activate_button.unsafe_as(Proc(Int16, HRESULT)).call(benabled)
  end
  def still_off(benabled : Int16) : HRESULT
    @lpVtbl.value.still_off.unsafe_as(Proc(Int16, HRESULT)).call(benabled)
  end
  def pause_on(benabled : Int16) : HRESULT
    @lpVtbl.value.pause_on.unsafe_as(Proc(Int16, HRESULT)).call(benabled)
  end
  def change_current_audio_stream(benabled : Int16) : HRESULT
    @lpVtbl.value.change_current_audio_stream.unsafe_as(Proc(Int16, HRESULT)).call(benabled)
  end
  def change_current_subpicture_stream(benabled : Int16) : HRESULT
    @lpVtbl.value.change_current_subpicture_stream.unsafe_as(Proc(Int16, HRESULT)).call(benabled)
  end
  def change_current_angle(benabled : Int16) : HRESULT
    @lpVtbl.value.change_current_angle.unsafe_as(Proc(Int16, HRESULT)).call(benabled)
  end
  def play_at_time_in_title(benabled : Int16) : HRESULT
    @lpVtbl.value.play_at_time_in_title.unsafe_as(Proc(Int16, HRESULT)).call(benabled)
  end
  def play_at_time(benabled : Int16) : HRESULT
    @lpVtbl.value.play_at_time.unsafe_as(Proc(Int16, HRESULT)).call(benabled)
  end
  def play_chapter_in_title(benabled : Int16) : HRESULT
    @lpVtbl.value.play_chapter_in_title.unsafe_as(Proc(Int16, HRESULT)).call(benabled)
  end
  def play_chapter(benabled : Int16) : HRESULT
    @lpVtbl.value.play_chapter.unsafe_as(Proc(Int16, HRESULT)).call(benabled)
  end
  def replay_chapter(benabled : Int16) : HRESULT
    @lpVtbl.value.replay_chapter.unsafe_as(Proc(Int16, HRESULT)).call(benabled)
  end
  def play_next_chapter(benabled : Int16) : HRESULT
    @lpVtbl.value.play_next_chapter.unsafe_as(Proc(Int16, HRESULT)).call(benabled)
  end
  def stop(benabled : Int16) : HRESULT
    @lpVtbl.value.stop.unsafe_as(Proc(Int16, HRESULT)).call(benabled)
  end
  def return_from_submenu(benabled : Int16) : HRESULT
    @lpVtbl.value.return_from_submenu.unsafe_as(Proc(Int16, HRESULT)).call(benabled)
  end
  def play_title(benabled : Int16) : HRESULT
    @lpVtbl.value.play_title.unsafe_as(Proc(Int16, HRESULT)).call(benabled)
  end
  def play_prev_chapter(benabled : Int16) : HRESULT
    @lpVtbl.value.play_prev_chapter.unsafe_as(Proc(Int16, HRESULT)).call(benabled)
  end
  def change_karaoke_pres_mode(benabled : Int16) : HRESULT
    @lpVtbl.value.change_karaoke_pres_mode.unsafe_as(Proc(Int16, HRESULT)).call(benabled)
  end
  def change_video_pres_mode(benabled : Int16) : HRESULT
    @lpVtbl.value.change_video_pres_mode.unsafe_as(Proc(Int16, HRESULT)).call(benabled)
  end
end
struct LibWin32::IMSVidWebDVDAdm
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def change_password(strusername : UInt8*, strold : UInt8*, strnew : UInt8*) : HRESULT
    @lpVtbl.value.change_password.unsafe_as(Proc(UInt8*, UInt8*, UInt8*, HRESULT)).call(strusername, strold, strnew)
  end
  def save_parental_level(level : Int32, strusername : UInt8*, strpassword : UInt8*) : HRESULT
    @lpVtbl.value.save_parental_level.unsafe_as(Proc(Int32, UInt8*, UInt8*, HRESULT)).call(level, strusername, strpassword)
  end
  def save_parental_country(country : Int32, strusername : UInt8*, strpassword : UInt8*) : HRESULT
    @lpVtbl.value.save_parental_country.unsafe_as(Proc(Int32, UInt8*, UInt8*, HRESULT)).call(country, strusername, strpassword)
  end
  def confirm_password(strusername : UInt8*, strpassword : UInt8*, pval : Int16*) : HRESULT
    @lpVtbl.value.confirm_password.unsafe_as(Proc(UInt8*, UInt8*, Int16*, HRESULT)).call(strusername, strpassword, pval)
  end
  def get_parental_level(llevel : Int32*) : HRESULT
    @lpVtbl.value.get_parental_level.unsafe_as(Proc(Int32*, HRESULT)).call(llevel)
  end
  def get_parental_country(lcountry : Int32*) : HRESULT
    @lpVtbl.value.get_parental_country.unsafe_as(Proc(Int32*, HRESULT)).call(lcountry)
  end
  def get_default_audio_lcid(pval : Int32*) : HRESULT
    @lpVtbl.value.get_default_audio_lcid.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def put_default_audio_lcid(newval : Int32) : HRESULT
    @lpVtbl.value.put_default_audio_lcid.unsafe_as(Proc(Int32, HRESULT)).call(newval)
  end
  def get_default_subpicture_lcid(pval : Int32*) : HRESULT
    @lpVtbl.value.get_default_subpicture_lcid.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def put_default_subpicture_lcid(newval : Int32) : HRESULT
    @lpVtbl.value.put_default_subpicture_lcid.unsafe_as(Proc(Int32, HRESULT)).call(newval)
  end
  def get_default_menu_lcid(pval : Int32*) : HRESULT
    @lpVtbl.value.get_default_menu_lcid.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def put_default_menu_lcid(newval : Int32) : HRESULT
    @lpVtbl.value.put_default_menu_lcid.unsafe_as(Proc(Int32, HRESULT)).call(newval)
  end
  def get_bookmark_on_stop(pval : Int16*) : HRESULT
    @lpVtbl.value.get_bookmark_on_stop.unsafe_as(Proc(Int16*, HRESULT)).call(pval)
  end
  def put_bookmark_on_stop(newval : Int16) : HRESULT
    @lpVtbl.value.put_bookmark_on_stop.unsafe_as(Proc(Int16, HRESULT)).call(newval)
  end
end
struct LibWin32::IMSVidOutputDevice
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
end
struct LibWin32::IMSVidOutputDeviceEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def state_change(lpd : IMSVidDevice, oldstate : Int32, newstate : Int32) : HRESULT
    @lpVtbl.value.state_change.unsafe_as(Proc(IMSVidDevice, Int32, Int32, HRESULT)).call(lpd, oldstate, newstate)
  end
end
struct LibWin32::IMSVidFeature
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
end
struct LibWin32::IMSVidFeatureEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def state_change(lpd : IMSVidDevice, oldstate : Int32, newstate : Int32) : HRESULT
    @lpVtbl.value.state_change.unsafe_as(Proc(IMSVidDevice, Int32, Int32, HRESULT)).call(lpd, oldstate, newstate)
  end
end
struct LibWin32::IMSVidEncoder
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
  def get_video_encoder_interface(ppencint : IUnknown*) : HRESULT
    @lpVtbl.value.get_video_encoder_interface.unsafe_as(Proc(IUnknown*, HRESULT)).call(ppencint)
  end
  def get_audio_encoder_interface(ppencint : IUnknown*) : HRESULT
    @lpVtbl.value.get_audio_encoder_interface.unsafe_as(Proc(IUnknown*, HRESULT)).call(ppencint)
  end
end
struct LibWin32::IMSVidClosedCaptioning
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
  def get_enable(on : Int16*) : HRESULT
    @lpVtbl.value.get_enable.unsafe_as(Proc(Int16*, HRESULT)).call(on)
  end
  def put_enable(on : Int16) : HRESULT
    @lpVtbl.value.put_enable.unsafe_as(Proc(Int16, HRESULT)).call(on)
  end
end
struct LibWin32::IMSVidClosedCaptioning2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
  def get_enable(on : Int16*) : HRESULT
    @lpVtbl.value.get_enable.unsafe_as(Proc(Int16*, HRESULT)).call(on)
  end
  def put_enable(on : Int16) : HRESULT
    @lpVtbl.value.put_enable.unsafe_as(Proc(Int16, HRESULT)).call(on)
  end
  def get_service(on : MSVidCCService*) : HRESULT
    @lpVtbl.value.get_service.unsafe_as(Proc(MSVidCCService*, HRESULT)).call(on)
  end
  def put_service(on : MSVidCCService) : HRESULT
    @lpVtbl.value.put_service.unsafe_as(Proc(MSVidCCService, HRESULT)).call(on)
  end
end
struct LibWin32::IMSVidClosedCaptioning3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
  def get_enable(on : Int16*) : HRESULT
    @lpVtbl.value.get_enable.unsafe_as(Proc(Int16*, HRESULT)).call(on)
  end
  def put_enable(on : Int16) : HRESULT
    @lpVtbl.value.put_enable.unsafe_as(Proc(Int16, HRESULT)).call(on)
  end
  def get_service(on : MSVidCCService*) : HRESULT
    @lpVtbl.value.get_service.unsafe_as(Proc(MSVidCCService*, HRESULT)).call(on)
  end
  def put_service(on : MSVidCCService) : HRESULT
    @lpVtbl.value.put_service.unsafe_as(Proc(MSVidCCService, HRESULT)).call(on)
  end
  def get_tele_text_filter(punkttfilter : IUnknown*) : HRESULT
    @lpVtbl.value.get_tele_text_filter.unsafe_as(Proc(IUnknown*, HRESULT)).call(punkttfilter)
  end
end
struct LibWin32::IMSVidXDS
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
  def get_channel_change_interface(punkcc : IUnknown*) : HRESULT
    @lpVtbl.value.get_channel_change_interface.unsafe_as(Proc(IUnknown*, HRESULT)).call(punkcc)
  end
end
struct LibWin32::IMSVidXDSEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def state_change(lpd : IMSVidDevice, oldstate : Int32, newstate : Int32) : HRESULT
    @lpVtbl.value.state_change.unsafe_as(Proc(IMSVidDevice, Int32, Int32, HRESULT)).call(lpd, oldstate, newstate)
  end
  def rating_change(prevratingsystem : EnTvRat_System, prevlevel : EnTvRat_GenericLevel, prevattributes : BfEnTvRat_GenericAttributes, newratingsystem : EnTvRat_System, newlevel : EnTvRat_GenericLevel, newattributes : BfEnTvRat_GenericAttributes) : HRESULT
    @lpVtbl.value.rating_change.unsafe_as(Proc(EnTvRat_System, EnTvRat_GenericLevel, BfEnTvRat_GenericAttributes, EnTvRat_System, EnTvRat_GenericLevel, BfEnTvRat_GenericAttributes, HRESULT)).call(prevratingsystem, prevlevel, prevattributes, newratingsystem, newlevel, newattributes)
  end
end
struct LibWin32::IMSVidDataServices
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
end
struct LibWin32::IMSVidDataServicesEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def state_change(lpd : IMSVidDevice, oldstate : Int32, newstate : Int32) : HRESULT
    @lpVtbl.value.state_change.unsafe_as(Proc(IMSVidDevice, Int32, Int32, HRESULT)).call(lpd, oldstate, newstate)
  end
end
struct LibWin32::IMSVidVideoRenderer
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
  def get_custom_compositor_class(compositorclsid : UInt8**) : HRESULT
    @lpVtbl.value.get_custom_compositor_class.unsafe_as(Proc(UInt8**, HRESULT)).call(compositorclsid)
  end
  def put_custom_compositor_class(compositorclsid : UInt8*) : HRESULT
    @lpVtbl.value.put_custom_compositor_class.unsafe_as(Proc(UInt8*, HRESULT)).call(compositorclsid)
  end
  def get__custom_compositor_class(compositorclsid : Guid*) : HRESULT
    @lpVtbl.value.get__custom_compositor_class.unsafe_as(Proc(Guid*, HRESULT)).call(compositorclsid)
  end
  def put__custom_compositor_class(compositorclsid : Guid*) : HRESULT
    @lpVtbl.value.put__custom_compositor_class.unsafe_as(Proc(Guid*, HRESULT)).call(compositorclsid)
  end
  def get__custom_compositor(compositor : IVMRImageCompositor*) : HRESULT
    @lpVtbl.value.get__custom_compositor.unsafe_as(Proc(IVMRImageCompositor*, HRESULT)).call(compositor)
  end
  def put__custom_compositor(compositor : IVMRImageCompositor) : HRESULT
    @lpVtbl.value.put__custom_compositor.unsafe_as(Proc(IVMRImageCompositor, HRESULT)).call(compositor)
  end
  def get_mixer_bitmap(mixerpicturedisp : IPictureDisp*) : HRESULT
    @lpVtbl.value.get_mixer_bitmap.unsafe_as(Proc(IPictureDisp*, HRESULT)).call(mixerpicturedisp)
  end
  def get__mixer_bitmap(mixerpicture : IVMRMixerBitmap*) : HRESULT
    @lpVtbl.value.get__mixer_bitmap.unsafe_as(Proc(IVMRMixerBitmap*, HRESULT)).call(mixerpicture)
  end
  def put_mixer_bitmap(mixerpicturedisp : IPictureDisp) : HRESULT
    @lpVtbl.value.put_mixer_bitmap.unsafe_as(Proc(IPictureDisp, HRESULT)).call(mixerpicturedisp)
  end
  def put__mixer_bitmap(mixerpicture : VMRALPHABITMAP*) : HRESULT
    @lpVtbl.value.put__mixer_bitmap.unsafe_as(Proc(VMRALPHABITMAP*, HRESULT)).call(mixerpicture)
  end
  def get_mixer_bitmap_position_rect(rdest : IMSVidRect*) : HRESULT
    @lpVtbl.value.get_mixer_bitmap_position_rect.unsafe_as(Proc(IMSVidRect*, HRESULT)).call(rdest)
  end
  def put_mixer_bitmap_position_rect(rdest : IMSVidRect) : HRESULT
    @lpVtbl.value.put_mixer_bitmap_position_rect.unsafe_as(Proc(IMSVidRect, HRESULT)).call(rdest)
  end
  def get_mixer_bitmap_opacity(opacity : Int32*) : HRESULT
    @lpVtbl.value.get_mixer_bitmap_opacity.unsafe_as(Proc(Int32*, HRESULT)).call(opacity)
  end
  def put_mixer_bitmap_opacity(opacity : Int32) : HRESULT
    @lpVtbl.value.put_mixer_bitmap_opacity.unsafe_as(Proc(Int32, HRESULT)).call(opacity)
  end
  def setup_mixer_bitmap(mixerpicturedisp : IPictureDisp, opacity : Int32, rdest : IMSVidRect) : HRESULT
    @lpVtbl.value.setup_mixer_bitmap.unsafe_as(Proc(IPictureDisp, Int32, IMSVidRect, HRESULT)).call(mixerpicturedisp, opacity, rdest)
  end
  def get_source_size(currentsize : SourceSizeList*) : HRESULT
    @lpVtbl.value.get_source_size.unsafe_as(Proc(SourceSizeList*, HRESULT)).call(currentsize)
  end
  def put_source_size(newsize : SourceSizeList) : HRESULT
    @lpVtbl.value.put_source_size.unsafe_as(Proc(SourceSizeList, HRESULT)).call(newsize)
  end
  def get_over_scan(plpercent : Int32*) : HRESULT
    @lpVtbl.value.get_over_scan.unsafe_as(Proc(Int32*, HRESULT)).call(plpercent)
  end
  def put_over_scan(lpercent : Int32) : HRESULT
    @lpVtbl.value.put_over_scan.unsafe_as(Proc(Int32, HRESULT)).call(lpercent)
  end
  def get_available_source_rect(prect : IMSVidRect*) : HRESULT
    @lpVtbl.value.get_available_source_rect.unsafe_as(Proc(IMSVidRect*, HRESULT)).call(prect)
  end
  def get_max_vid_rect(ppvidrect : IMSVidRect*) : HRESULT
    @lpVtbl.value.get_max_vid_rect.unsafe_as(Proc(IMSVidRect*, HRESULT)).call(ppvidrect)
  end
  def get_min_vid_rect(ppvidrect : IMSVidRect*) : HRESULT
    @lpVtbl.value.get_min_vid_rect.unsafe_as(Proc(IMSVidRect*, HRESULT)).call(ppvidrect)
  end
  def get_clipped_source_rect(prect : IMSVidRect*) : HRESULT
    @lpVtbl.value.get_clipped_source_rect.unsafe_as(Proc(IMSVidRect*, HRESULT)).call(prect)
  end
  def put_clipped_source_rect(prect : IMSVidRect) : HRESULT
    @lpVtbl.value.put_clipped_source_rect.unsafe_as(Proc(IMSVidRect, HRESULT)).call(prect)
  end
  def get_using_overlay(useoverlayval : Int16*) : HRESULT
    @lpVtbl.value.get_using_overlay.unsafe_as(Proc(Int16*, HRESULT)).call(useoverlayval)
  end
  def put_using_overlay(useoverlayval : Int16) : HRESULT
    @lpVtbl.value.put_using_overlay.unsafe_as(Proc(Int16, HRESULT)).call(useoverlayval)
  end
  def capture(currentimage : IPictureDisp*) : HRESULT
    @lpVtbl.value.capture.unsafe_as(Proc(IPictureDisp*, HRESULT)).call(currentimage)
  end
  def get_frames_per_second(pval : Int32*) : HRESULT
    @lpVtbl.value.get_frames_per_second.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_decimate_input(pdeci : Int16*) : HRESULT
    @lpVtbl.value.get_decimate_input.unsafe_as(Proc(Int16*, HRESULT)).call(pdeci)
  end
  def put_decimate_input(pdeci : Int16) : HRESULT
    @lpVtbl.value.put_decimate_input.unsafe_as(Proc(Int16, HRESULT)).call(pdeci)
  end
end
struct LibWin32::IMSVidVideoRendererEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def state_change(lpd : IMSVidDevice, oldstate : Int32, newstate : Int32) : HRESULT
    @lpVtbl.value.state_change.unsafe_as(Proc(IMSVidDevice, Int32, Int32, HRESULT)).call(lpd, oldstate, newstate)
  end
  def overlay_unavailable : HRESULT
    @lpVtbl.value.overlay_unavailable.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IMSVidGenericSink
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
  def set_sink_filter(bstrname : UInt8*) : HRESULT
    @lpVtbl.value.set_sink_filter.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrname)
  end
  def get_sink_streams(pstreams : MSVidSinkStreams*) : HRESULT
    @lpVtbl.value.get_sink_streams.unsafe_as(Proc(MSVidSinkStreams*, HRESULT)).call(pstreams)
  end
  def put_sink_streams(streams : MSVidSinkStreams) : HRESULT
    @lpVtbl.value.put_sink_streams.unsafe_as(Proc(MSVidSinkStreams, HRESULT)).call(streams)
  end
end
struct LibWin32::IMSVidGenericSink2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
  def set_sink_filter(bstrname : UInt8*) : HRESULT
    @lpVtbl.value.set_sink_filter.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrname)
  end
  def get_sink_streams(pstreams : MSVidSinkStreams*) : HRESULT
    @lpVtbl.value.get_sink_streams.unsafe_as(Proc(MSVidSinkStreams*, HRESULT)).call(pstreams)
  end
  def put_sink_streams(streams : MSVidSinkStreams) : HRESULT
    @lpVtbl.value.put_sink_streams.unsafe_as(Proc(MSVidSinkStreams, HRESULT)).call(streams)
  end
  def add_filter(bstrname : UInt8*) : HRESULT
    @lpVtbl.value.add_filter.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrname)
  end
  def reset_filter_list : HRESULT
    @lpVtbl.value.reset_filter_list.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IMSVidStreamBufferRecordingControl
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_start_time(rtstart : Int32*) : HRESULT
    @lpVtbl.value.get_start_time.unsafe_as(Proc(Int32*, HRESULT)).call(rtstart)
  end
  def put_start_time(rtstart : Int32) : HRESULT
    @lpVtbl.value.put_start_time.unsafe_as(Proc(Int32, HRESULT)).call(rtstart)
  end
  def get_stop_time(rtstop : Int32*) : HRESULT
    @lpVtbl.value.get_stop_time.unsafe_as(Proc(Int32*, HRESULT)).call(rtstop)
  end
  def put_stop_time(rtstop : Int32) : HRESULT
    @lpVtbl.value.put_stop_time.unsafe_as(Proc(Int32, HRESULT)).call(rtstop)
  end
  def get_recording_stopped(phresult : Int16*) : HRESULT
    @lpVtbl.value.get_recording_stopped.unsafe_as(Proc(Int16*, HRESULT)).call(phresult)
  end
  def get_recording_started(phresult : Int16*) : HRESULT
    @lpVtbl.value.get_recording_started.unsafe_as(Proc(Int16*, HRESULT)).call(phresult)
  end
  def get_recording_type(dwtype : RecordingType*) : HRESULT
    @lpVtbl.value.get_recording_type.unsafe_as(Proc(RecordingType*, HRESULT)).call(dwtype)
  end
  def get_recording_attribute(precordingattribute : IUnknown*) : HRESULT
    @lpVtbl.value.get_recording_attribute.unsafe_as(Proc(IUnknown*, HRESULT)).call(precordingattribute)
  end
end
struct LibWin32::IMSVidStreamBufferSink
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
  def get_content_recorder(pszfilename : UInt8*, precordingiunknown : IMSVidStreamBufferRecordingControl*) : HRESULT
    @lpVtbl.value.get_content_recorder.unsafe_as(Proc(UInt8*, IMSVidStreamBufferRecordingControl*, HRESULT)).call(pszfilename, precordingiunknown)
  end
  def get_reference_recorder(pszfilename : UInt8*, precordingiunknown : IMSVidStreamBufferRecordingControl*) : HRESULT
    @lpVtbl.value.get_reference_recorder.unsafe_as(Proc(UInt8*, IMSVidStreamBufferRecordingControl*, HRESULT)).call(pszfilename, precordingiunknown)
  end
  def get_sink_name(pname : UInt8**) : HRESULT
    @lpVtbl.value.get_sink_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pname)
  end
  def put_sink_name(name : UInt8*) : HRESULT
    @lpVtbl.value.put_sink_name.unsafe_as(Proc(UInt8*, HRESULT)).call(name)
  end
  def name_set_lock : HRESULT
    @lpVtbl.value.name_set_lock.unsafe_as(Proc(HRESULT)).call
  end
  def get_sbe_sink(sbeconfig : IUnknown*) : HRESULT
    @lpVtbl.value.get_sbe_sink.unsafe_as(Proc(IUnknown*, HRESULT)).call(sbeconfig)
  end
end
struct LibWin32::IMSVidStreamBufferSink2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
  def get_content_recorder(pszfilename : UInt8*, precordingiunknown : IMSVidStreamBufferRecordingControl*) : HRESULT
    @lpVtbl.value.get_content_recorder.unsafe_as(Proc(UInt8*, IMSVidStreamBufferRecordingControl*, HRESULT)).call(pszfilename, precordingiunknown)
  end
  def get_reference_recorder(pszfilename : UInt8*, precordingiunknown : IMSVidStreamBufferRecordingControl*) : HRESULT
    @lpVtbl.value.get_reference_recorder.unsafe_as(Proc(UInt8*, IMSVidStreamBufferRecordingControl*, HRESULT)).call(pszfilename, precordingiunknown)
  end
  def get_sink_name(pname : UInt8**) : HRESULT
    @lpVtbl.value.get_sink_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pname)
  end
  def put_sink_name(name : UInt8*) : HRESULT
    @lpVtbl.value.put_sink_name.unsafe_as(Proc(UInt8*, HRESULT)).call(name)
  end
  def name_set_lock : HRESULT
    @lpVtbl.value.name_set_lock.unsafe_as(Proc(HRESULT)).call
  end
  def get_sbe_sink(sbeconfig : IUnknown*) : HRESULT
    @lpVtbl.value.get_sbe_sink.unsafe_as(Proc(IUnknown*, HRESULT)).call(sbeconfig)
  end
  def unlock_profile : HRESULT
    @lpVtbl.value.unlock_profile.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IMSVidStreamBufferSink3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
  def get_content_recorder(pszfilename : UInt8*, precordingiunknown : IMSVidStreamBufferRecordingControl*) : HRESULT
    @lpVtbl.value.get_content_recorder.unsafe_as(Proc(UInt8*, IMSVidStreamBufferRecordingControl*, HRESULT)).call(pszfilename, precordingiunknown)
  end
  def get_reference_recorder(pszfilename : UInt8*, precordingiunknown : IMSVidStreamBufferRecordingControl*) : HRESULT
    @lpVtbl.value.get_reference_recorder.unsafe_as(Proc(UInt8*, IMSVidStreamBufferRecordingControl*, HRESULT)).call(pszfilename, precordingiunknown)
  end
  def get_sink_name(pname : UInt8**) : HRESULT
    @lpVtbl.value.get_sink_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pname)
  end
  def put_sink_name(name : UInt8*) : HRESULT
    @lpVtbl.value.put_sink_name.unsafe_as(Proc(UInt8*, HRESULT)).call(name)
  end
  def name_set_lock : HRESULT
    @lpVtbl.value.name_set_lock.unsafe_as(Proc(HRESULT)).call
  end
  def get_sbe_sink(sbeconfig : IUnknown*) : HRESULT
    @lpVtbl.value.get_sbe_sink.unsafe_as(Proc(IUnknown*, HRESULT)).call(sbeconfig)
  end
  def unlock_profile : HRESULT
    @lpVtbl.value.unlock_profile.unsafe_as(Proc(HRESULT)).call
  end
  def set_min_seek(pdwmin : Int32*) : HRESULT
    @lpVtbl.value.set_min_seek.unsafe_as(Proc(Int32*, HRESULT)).call(pdwmin)
  end
  def get_audio_counter(ppunk : IUnknown*) : HRESULT
    @lpVtbl.value.get_audio_counter.unsafe_as(Proc(IUnknown*, HRESULT)).call(ppunk)
  end
  def get_video_counter(ppunk : IUnknown*) : HRESULT
    @lpVtbl.value.get_video_counter.unsafe_as(Proc(IUnknown*, HRESULT)).call(ppunk)
  end
  def get_cc_counter(ppunk : IUnknown*) : HRESULT
    @lpVtbl.value.get_cc_counter.unsafe_as(Proc(IUnknown*, HRESULT)).call(ppunk)
  end
  def get_wst_counter(ppunk : IUnknown*) : HRESULT
    @lpVtbl.value.get_wst_counter.unsafe_as(Proc(IUnknown*, HRESULT)).call(ppunk)
  end
  def put_audio_analysis_filter(szclsid : UInt8*) : HRESULT
    @lpVtbl.value.put_audio_analysis_filter.unsafe_as(Proc(UInt8*, HRESULT)).call(szclsid)
  end
  def get_audio_analysis_filter(pszclsid : UInt8**) : HRESULT
    @lpVtbl.value.get_audio_analysis_filter.unsafe_as(Proc(UInt8**, HRESULT)).call(pszclsid)
  end
  def put__audio_analysis_filter(guid : Guid) : HRESULT
    @lpVtbl.value.put__audio_analysis_filter.unsafe_as(Proc(Guid, HRESULT)).call(guid)
  end
  def get__audio_analysis_filter(pguid : Guid*) : HRESULT
    @lpVtbl.value.get__audio_analysis_filter.unsafe_as(Proc(Guid*, HRESULT)).call(pguid)
  end
  def put_video_analysis_filter(szclsid : UInt8*) : HRESULT
    @lpVtbl.value.put_video_analysis_filter.unsafe_as(Proc(UInt8*, HRESULT)).call(szclsid)
  end
  def get_video_analysis_filter(pszclsid : UInt8**) : HRESULT
    @lpVtbl.value.get_video_analysis_filter.unsafe_as(Proc(UInt8**, HRESULT)).call(pszclsid)
  end
  def put__video_analysis_filter(guid : Guid) : HRESULT
    @lpVtbl.value.put__video_analysis_filter.unsafe_as(Proc(Guid, HRESULT)).call(guid)
  end
  def get__video_analysis_filter(pguid : Guid*) : HRESULT
    @lpVtbl.value.get__video_analysis_filter.unsafe_as(Proc(Guid*, HRESULT)).call(pguid)
  end
  def put_data_analysis_filter(szclsid : UInt8*) : HRESULT
    @lpVtbl.value.put_data_analysis_filter.unsafe_as(Proc(UInt8*, HRESULT)).call(szclsid)
  end
  def get_data_analysis_filter(pszclsid : UInt8**) : HRESULT
    @lpVtbl.value.get_data_analysis_filter.unsafe_as(Proc(UInt8**, HRESULT)).call(pszclsid)
  end
  def put__data_analysis_filter(guid : Guid) : HRESULT
    @lpVtbl.value.put__data_analysis_filter.unsafe_as(Proc(Guid, HRESULT)).call(guid)
  end
  def get__data_analysis_filter(pguid : Guid*) : HRESULT
    @lpVtbl.value.get__data_analysis_filter.unsafe_as(Proc(Guid*, HRESULT)).call(pguid)
  end
  def get_license_error_code(hres : HRESULT*) : HRESULT
    @lpVtbl.value.get_license_error_code.unsafe_as(Proc(HRESULT*, HRESULT)).call(hres)
  end
end
struct LibWin32::IMSVidStreamBufferSinkEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def state_change(lpd : IMSVidDevice, oldstate : Int32, newstate : Int32) : HRESULT
    @lpVtbl.value.state_change.unsafe_as(Proc(IMSVidDevice, Int32, Int32, HRESULT)).call(lpd, oldstate, newstate)
  end
  def certificate_failure : HRESULT
    @lpVtbl.value.certificate_failure.unsafe_as(Proc(HRESULT)).call
  end
  def certificate_success : HRESULT
    @lpVtbl.value.certificate_success.unsafe_as(Proc(HRESULT)).call
  end
  def write_failure : HRESULT
    @lpVtbl.value.write_failure.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IMSVidStreamBufferSinkEvent2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def state_change(lpd : IMSVidDevice, oldstate : Int32, newstate : Int32) : HRESULT
    @lpVtbl.value.state_change.unsafe_as(Proc(IMSVidDevice, Int32, Int32, HRESULT)).call(lpd, oldstate, newstate)
  end
  def certificate_failure : HRESULT
    @lpVtbl.value.certificate_failure.unsafe_as(Proc(HRESULT)).call
  end
  def certificate_success : HRESULT
    @lpVtbl.value.certificate_success.unsafe_as(Proc(HRESULT)).call
  end
  def write_failure : HRESULT
    @lpVtbl.value.write_failure.unsafe_as(Proc(HRESULT)).call
  end
  def encryption_on : HRESULT
    @lpVtbl.value.encryption_on.unsafe_as(Proc(HRESULT)).call
  end
  def encryption_off : HRESULT
    @lpVtbl.value.encryption_off.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IMSVidStreamBufferSinkEvent3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def state_change(lpd : IMSVidDevice, oldstate : Int32, newstate : Int32) : HRESULT
    @lpVtbl.value.state_change.unsafe_as(Proc(IMSVidDevice, Int32, Int32, HRESULT)).call(lpd, oldstate, newstate)
  end
  def certificate_failure : HRESULT
    @lpVtbl.value.certificate_failure.unsafe_as(Proc(HRESULT)).call
  end
  def certificate_success : HRESULT
    @lpVtbl.value.certificate_success.unsafe_as(Proc(HRESULT)).call
  end
  def write_failure : HRESULT
    @lpVtbl.value.write_failure.unsafe_as(Proc(HRESULT)).call
  end
  def encryption_on : HRESULT
    @lpVtbl.value.encryption_on.unsafe_as(Proc(HRESULT)).call
  end
  def encryption_off : HRESULT
    @lpVtbl.value.encryption_off.unsafe_as(Proc(HRESULT)).call
  end
  def license_change(dwprot : Int32) : HRESULT
    @lpVtbl.value.license_change.unsafe_as(Proc(Int32, HRESULT)).call(dwprot)
  end
end
struct LibWin32::IMSVidStreamBufferSinkEvent4
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def state_change(lpd : IMSVidDevice, oldstate : Int32, newstate : Int32) : HRESULT
    @lpVtbl.value.state_change.unsafe_as(Proc(IMSVidDevice, Int32, Int32, HRESULT)).call(lpd, oldstate, newstate)
  end
  def certificate_failure : HRESULT
    @lpVtbl.value.certificate_failure.unsafe_as(Proc(HRESULT)).call
  end
  def certificate_success : HRESULT
    @lpVtbl.value.certificate_success.unsafe_as(Proc(HRESULT)).call
  end
  def write_failure : HRESULT
    @lpVtbl.value.write_failure.unsafe_as(Proc(HRESULT)).call
  end
  def encryption_on : HRESULT
    @lpVtbl.value.encryption_on.unsafe_as(Proc(HRESULT)).call
  end
  def encryption_off : HRESULT
    @lpVtbl.value.encryption_off.unsafe_as(Proc(HRESULT)).call
  end
  def license_change(dwprot : Int32) : HRESULT
    @lpVtbl.value.license_change.unsafe_as(Proc(Int32, HRESULT)).call(dwprot)
  end
  def write_failure_clear : HRESULT
    @lpVtbl.value.write_failure_clear.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IMSVidStreamBufferSource
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
  def is_viewable(v : VARIANT*, pfviewable : Int16*) : HRESULT
    @lpVtbl.value.is_viewable.unsafe_as(Proc(VARIANT*, Int16*, HRESULT)).call(v, pfviewable)
  end
  def view(v : VARIANT*) : HRESULT
    @lpVtbl.value.view.unsafe_as(Proc(VARIANT*, HRESULT)).call(v)
  end
  def get_enable_reset_on_stop(pval : Int16*) : HRESULT
    @lpVtbl.value.get_enable_reset_on_stop.unsafe_as(Proc(Int16*, HRESULT)).call(pval)
  end
  def put_enable_reset_on_stop(newval : Int16) : HRESULT
    @lpVtbl.value.put_enable_reset_on_stop.unsafe_as(Proc(Int16, HRESULT)).call(newval)
  end
  def run : HRESULT
    @lpVtbl.value.run.unsafe_as(Proc(HRESULT)).call
  end
  def pause : HRESULT
    @lpVtbl.value.pause.unsafe_as(Proc(HRESULT)).call
  end
  def stop : HRESULT
    @lpVtbl.value.stop.unsafe_as(Proc(HRESULT)).call
  end
  def get_can_step(fbackwards : Int16, pfcan : Int16*) : HRESULT
    @lpVtbl.value.get_can_step.unsafe_as(Proc(Int16, Int16*, HRESULT)).call(fbackwards, pfcan)
  end
  def step(lstep : Int32) : HRESULT
    @lpVtbl.value.step.unsafe_as(Proc(Int32, HRESULT)).call(lstep)
  end
  def put_rate(plrate : Float64) : HRESULT
    @lpVtbl.value.put_rate.unsafe_as(Proc(Float64, HRESULT)).call(plrate)
  end
  def get_rate(plrate : Float64*) : HRESULT
    @lpVtbl.value.get_rate.unsafe_as(Proc(Float64*, HRESULT)).call(plrate)
  end
  def put_current_position(lposition : Int32) : HRESULT
    @lpVtbl.value.put_current_position.unsafe_as(Proc(Int32, HRESULT)).call(lposition)
  end
  def get_current_position(lposition : Int32*) : HRESULT
    @lpVtbl.value.get_current_position.unsafe_as(Proc(Int32*, HRESULT)).call(lposition)
  end
  def put_position_mode(lpositionmode : PositionModeList) : HRESULT
    @lpVtbl.value.put_position_mode.unsafe_as(Proc(PositionModeList, HRESULT)).call(lpositionmode)
  end
  def get_position_mode(lpositionmode : PositionModeList*) : HRESULT
    @lpVtbl.value.get_position_mode.unsafe_as(Proc(PositionModeList*, HRESULT)).call(lpositionmode)
  end
  def get_length(llength : Int32*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(Int32*, HRESULT)).call(llength)
  end
  def get_file_name(filename : UInt8**) : HRESULT
    @lpVtbl.value.get_file_name.unsafe_as(Proc(UInt8**, HRESULT)).call(filename)
  end
  def put_file_name(filename : UInt8*) : HRESULT
    @lpVtbl.value.put_file_name.unsafe_as(Proc(UInt8*, HRESULT)).call(filename)
  end
  def get_start(lstart : Int32*) : HRESULT
    @lpVtbl.value.get_start.unsafe_as(Proc(Int32*, HRESULT)).call(lstart)
  end
  def get_recording_attribute(precordingattribute : IUnknown*) : HRESULT
    @lpVtbl.value.get_recording_attribute.unsafe_as(Proc(IUnknown*, HRESULT)).call(precordingattribute)
  end
  def current_ratings(pensystem : EnTvRat_System*, penrating : EnTvRat_GenericLevel*, pbfenattr : Int32*) : HRESULT
    @lpVtbl.value.current_ratings.unsafe_as(Proc(EnTvRat_System*, EnTvRat_GenericLevel*, Int32*, HRESULT)).call(pensystem, penrating, pbfenattr)
  end
  def max_ratings_level(ensystem : EnTvRat_System, enrating : EnTvRat_GenericLevel, lbfenattr : Int32) : HRESULT
    @lpVtbl.value.max_ratings_level.unsafe_as(Proc(EnTvRat_System, EnTvRat_GenericLevel, Int32, HRESULT)).call(ensystem, enrating, lbfenattr)
  end
  def put_block_unrated(bblock : Int16) : HRESULT
    @lpVtbl.value.put_block_unrated.unsafe_as(Proc(Int16, HRESULT)).call(bblock)
  end
  def put_unrated_delay(dwdelay : Int32) : HRESULT
    @lpVtbl.value.put_unrated_delay.unsafe_as(Proc(Int32, HRESULT)).call(dwdelay)
  end
  def get_sbe_source(sbefilter : IUnknown*) : HRESULT
    @lpVtbl.value.get_sbe_source.unsafe_as(Proc(IUnknown*, HRESULT)).call(sbefilter)
  end
end
struct LibWin32::IMSVidStreamBufferSource2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
  def is_viewable(v : VARIANT*, pfviewable : Int16*) : HRESULT
    @lpVtbl.value.is_viewable.unsafe_as(Proc(VARIANT*, Int16*, HRESULT)).call(v, pfviewable)
  end
  def view(v : VARIANT*) : HRESULT
    @lpVtbl.value.view.unsafe_as(Proc(VARIANT*, HRESULT)).call(v)
  end
  def get_enable_reset_on_stop(pval : Int16*) : HRESULT
    @lpVtbl.value.get_enable_reset_on_stop.unsafe_as(Proc(Int16*, HRESULT)).call(pval)
  end
  def put_enable_reset_on_stop(newval : Int16) : HRESULT
    @lpVtbl.value.put_enable_reset_on_stop.unsafe_as(Proc(Int16, HRESULT)).call(newval)
  end
  def run : HRESULT
    @lpVtbl.value.run.unsafe_as(Proc(HRESULT)).call
  end
  def pause : HRESULT
    @lpVtbl.value.pause.unsafe_as(Proc(HRESULT)).call
  end
  def stop : HRESULT
    @lpVtbl.value.stop.unsafe_as(Proc(HRESULT)).call
  end
  def get_can_step(fbackwards : Int16, pfcan : Int16*) : HRESULT
    @lpVtbl.value.get_can_step.unsafe_as(Proc(Int16, Int16*, HRESULT)).call(fbackwards, pfcan)
  end
  def step(lstep : Int32) : HRESULT
    @lpVtbl.value.step.unsafe_as(Proc(Int32, HRESULT)).call(lstep)
  end
  def put_rate(plrate : Float64) : HRESULT
    @lpVtbl.value.put_rate.unsafe_as(Proc(Float64, HRESULT)).call(plrate)
  end
  def get_rate(plrate : Float64*) : HRESULT
    @lpVtbl.value.get_rate.unsafe_as(Proc(Float64*, HRESULT)).call(plrate)
  end
  def put_current_position(lposition : Int32) : HRESULT
    @lpVtbl.value.put_current_position.unsafe_as(Proc(Int32, HRESULT)).call(lposition)
  end
  def get_current_position(lposition : Int32*) : HRESULT
    @lpVtbl.value.get_current_position.unsafe_as(Proc(Int32*, HRESULT)).call(lposition)
  end
  def put_position_mode(lpositionmode : PositionModeList) : HRESULT
    @lpVtbl.value.put_position_mode.unsafe_as(Proc(PositionModeList, HRESULT)).call(lpositionmode)
  end
  def get_position_mode(lpositionmode : PositionModeList*) : HRESULT
    @lpVtbl.value.get_position_mode.unsafe_as(Proc(PositionModeList*, HRESULT)).call(lpositionmode)
  end
  def get_length(llength : Int32*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(Int32*, HRESULT)).call(llength)
  end
  def get_file_name(filename : UInt8**) : HRESULT
    @lpVtbl.value.get_file_name.unsafe_as(Proc(UInt8**, HRESULT)).call(filename)
  end
  def put_file_name(filename : UInt8*) : HRESULT
    @lpVtbl.value.put_file_name.unsafe_as(Proc(UInt8*, HRESULT)).call(filename)
  end
  def get_start(lstart : Int32*) : HRESULT
    @lpVtbl.value.get_start.unsafe_as(Proc(Int32*, HRESULT)).call(lstart)
  end
  def get_recording_attribute(precordingattribute : IUnknown*) : HRESULT
    @lpVtbl.value.get_recording_attribute.unsafe_as(Proc(IUnknown*, HRESULT)).call(precordingattribute)
  end
  def current_ratings(pensystem : EnTvRat_System*, penrating : EnTvRat_GenericLevel*, pbfenattr : Int32*) : HRESULT
    @lpVtbl.value.current_ratings.unsafe_as(Proc(EnTvRat_System*, EnTvRat_GenericLevel*, Int32*, HRESULT)).call(pensystem, penrating, pbfenattr)
  end
  def max_ratings_level(ensystem : EnTvRat_System, enrating : EnTvRat_GenericLevel, lbfenattr : Int32) : HRESULT
    @lpVtbl.value.max_ratings_level.unsafe_as(Proc(EnTvRat_System, EnTvRat_GenericLevel, Int32, HRESULT)).call(ensystem, enrating, lbfenattr)
  end
  def put_block_unrated(bblock : Int16) : HRESULT
    @lpVtbl.value.put_block_unrated.unsafe_as(Proc(Int16, HRESULT)).call(bblock)
  end
  def put_unrated_delay(dwdelay : Int32) : HRESULT
    @lpVtbl.value.put_unrated_delay.unsafe_as(Proc(Int32, HRESULT)).call(dwdelay)
  end
  def get_sbe_source(sbefilter : IUnknown*) : HRESULT
    @lpVtbl.value.get_sbe_source.unsafe_as(Proc(IUnknown*, HRESULT)).call(sbefilter)
  end
  def put_rate_ex(dwrate : Float64, dwframespersecond : UInt32) : HRESULT
    @lpVtbl.value.put_rate_ex.unsafe_as(Proc(Float64, UInt32, HRESULT)).call(dwrate, dwframespersecond)
  end
  def get_audio_counter(ppunk : IUnknown*) : HRESULT
    @lpVtbl.value.get_audio_counter.unsafe_as(Proc(IUnknown*, HRESULT)).call(ppunk)
  end
  def get_video_counter(ppunk : IUnknown*) : HRESULT
    @lpVtbl.value.get_video_counter.unsafe_as(Proc(IUnknown*, HRESULT)).call(ppunk)
  end
  def get_cc_counter(ppunk : IUnknown*) : HRESULT
    @lpVtbl.value.get_cc_counter.unsafe_as(Proc(IUnknown*, HRESULT)).call(ppunk)
  end
  def get_wst_counter(ppunk : IUnknown*) : HRESULT
    @lpVtbl.value.get_wst_counter.unsafe_as(Proc(IUnknown*, HRESULT)).call(ppunk)
  end
end
struct LibWin32::IMSVidStreamBufferSourceEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def end_of_media(lpd : IMSVidPlayback) : HRESULT
    @lpVtbl.value.end_of_media.unsafe_as(Proc(IMSVidPlayback, HRESULT)).call(lpd)
  end
  def certificate_failure : HRESULT
    @lpVtbl.value.certificate_failure.unsafe_as(Proc(HRESULT)).call
  end
  def certificate_success : HRESULT
    @lpVtbl.value.certificate_success.unsafe_as(Proc(HRESULT)).call
  end
  def ratings_blocked : HRESULT
    @lpVtbl.value.ratings_blocked.unsafe_as(Proc(HRESULT)).call
  end
  def ratings_unblocked : HRESULT
    @lpVtbl.value.ratings_unblocked.unsafe_as(Proc(HRESULT)).call
  end
  def ratings_changed : HRESULT
    @lpVtbl.value.ratings_changed.unsafe_as(Proc(HRESULT)).call
  end
  def time_hole(streamoffsetms : Int32, sizems : Int32) : HRESULT
    @lpVtbl.value.time_hole.unsafe_as(Proc(Int32, Int32, HRESULT)).call(streamoffsetms, sizems)
  end
  def stale_data_read : HRESULT
    @lpVtbl.value.stale_data_read.unsafe_as(Proc(HRESULT)).call
  end
  def content_becoming_stale : HRESULT
    @lpVtbl.value.content_becoming_stale.unsafe_as(Proc(HRESULT)).call
  end
  def stale_file_deleted : HRESULT
    @lpVtbl.value.stale_file_deleted.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IMSVidStreamBufferSourceEvent2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def end_of_media(lpd : IMSVidPlayback) : HRESULT
    @lpVtbl.value.end_of_media.unsafe_as(Proc(IMSVidPlayback, HRESULT)).call(lpd)
  end
  def certificate_failure : HRESULT
    @lpVtbl.value.certificate_failure.unsafe_as(Proc(HRESULT)).call
  end
  def certificate_success : HRESULT
    @lpVtbl.value.certificate_success.unsafe_as(Proc(HRESULT)).call
  end
  def ratings_blocked : HRESULT
    @lpVtbl.value.ratings_blocked.unsafe_as(Proc(HRESULT)).call
  end
  def ratings_unblocked : HRESULT
    @lpVtbl.value.ratings_unblocked.unsafe_as(Proc(HRESULT)).call
  end
  def ratings_changed : HRESULT
    @lpVtbl.value.ratings_changed.unsafe_as(Proc(HRESULT)).call
  end
  def time_hole(streamoffsetms : Int32, sizems : Int32) : HRESULT
    @lpVtbl.value.time_hole.unsafe_as(Proc(Int32, Int32, HRESULT)).call(streamoffsetms, sizems)
  end
  def stale_data_read : HRESULT
    @lpVtbl.value.stale_data_read.unsafe_as(Proc(HRESULT)).call
  end
  def content_becoming_stale : HRESULT
    @lpVtbl.value.content_becoming_stale.unsafe_as(Proc(HRESULT)).call
  end
  def stale_file_deleted : HRESULT
    @lpVtbl.value.stale_file_deleted.unsafe_as(Proc(HRESULT)).call
  end
  def rate_change(qwnewrate : Float64, qwoldrate : Float64) : HRESULT
    @lpVtbl.value.rate_change.unsafe_as(Proc(Float64, Float64, HRESULT)).call(qwnewrate, qwoldrate)
  end
end
struct LibWin32::IMSVidStreamBufferSourceEvent3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def end_of_media(lpd : IMSVidPlayback) : HRESULT
    @lpVtbl.value.end_of_media.unsafe_as(Proc(IMSVidPlayback, HRESULT)).call(lpd)
  end
  def certificate_failure : HRESULT
    @lpVtbl.value.certificate_failure.unsafe_as(Proc(HRESULT)).call
  end
  def certificate_success : HRESULT
    @lpVtbl.value.certificate_success.unsafe_as(Proc(HRESULT)).call
  end
  def ratings_blocked : HRESULT
    @lpVtbl.value.ratings_blocked.unsafe_as(Proc(HRESULT)).call
  end
  def ratings_unblocked : HRESULT
    @lpVtbl.value.ratings_unblocked.unsafe_as(Proc(HRESULT)).call
  end
  def ratings_changed : HRESULT
    @lpVtbl.value.ratings_changed.unsafe_as(Proc(HRESULT)).call
  end
  def time_hole(streamoffsetms : Int32, sizems : Int32) : HRESULT
    @lpVtbl.value.time_hole.unsafe_as(Proc(Int32, Int32, HRESULT)).call(streamoffsetms, sizems)
  end
  def stale_data_read : HRESULT
    @lpVtbl.value.stale_data_read.unsafe_as(Proc(HRESULT)).call
  end
  def content_becoming_stale : HRESULT
    @lpVtbl.value.content_becoming_stale.unsafe_as(Proc(HRESULT)).call
  end
  def stale_file_deleted : HRESULT
    @lpVtbl.value.stale_file_deleted.unsafe_as(Proc(HRESULT)).call
  end
  def rate_change(qwnewrate : Float64, qwoldrate : Float64) : HRESULT
    @lpVtbl.value.rate_change.unsafe_as(Proc(Float64, Float64, HRESULT)).call(qwnewrate, qwoldrate)
  end
  def broadcast_event(guid : UInt8*) : HRESULT
    @lpVtbl.value.broadcast_event.unsafe_as(Proc(UInt8*, HRESULT)).call(guid)
  end
  def broadcast_event_ex(guid : UInt8*, param1 : UInt32, param2 : UInt32, param3 : UInt32, param4 : UInt32) : HRESULT
    @lpVtbl.value.broadcast_event_ex.unsafe_as(Proc(UInt8*, UInt32, UInt32, UInt32, UInt32, HRESULT)).call(guid, param1, param2, param3, param4)
  end
  def copp_blocked : HRESULT
    @lpVtbl.value.copp_blocked.unsafe_as(Proc(HRESULT)).call
  end
  def copp_unblocked : HRESULT
    @lpVtbl.value.copp_unblocked.unsafe_as(Proc(HRESULT)).call
  end
  def content_primarily_audio : HRESULT
    @lpVtbl.value.content_primarily_audio.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IMSVidStreamBufferV2SourceEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def end_of_media(lpd : IMSVidPlayback) : HRESULT
    @lpVtbl.value.end_of_media.unsafe_as(Proc(IMSVidPlayback, HRESULT)).call(lpd)
  end
  def ratings_changed : HRESULT
    @lpVtbl.value.ratings_changed.unsafe_as(Proc(HRESULT)).call
  end
  def time_hole(streamoffsetms : Int32, sizems : Int32) : HRESULT
    @lpVtbl.value.time_hole.unsafe_as(Proc(Int32, Int32, HRESULT)).call(streamoffsetms, sizems)
  end
  def stale_data_read : HRESULT
    @lpVtbl.value.stale_data_read.unsafe_as(Proc(HRESULT)).call
  end
  def content_becoming_stale : HRESULT
    @lpVtbl.value.content_becoming_stale.unsafe_as(Proc(HRESULT)).call
  end
  def stale_file_deleted : HRESULT
    @lpVtbl.value.stale_file_deleted.unsafe_as(Proc(HRESULT)).call
  end
  def rate_change(qwnewrate : Float64, qwoldrate : Float64) : HRESULT
    @lpVtbl.value.rate_change.unsafe_as(Proc(Float64, Float64, HRESULT)).call(qwnewrate, qwoldrate)
  end
  def broadcast_event(guid : UInt8*) : HRESULT
    @lpVtbl.value.broadcast_event.unsafe_as(Proc(UInt8*, HRESULT)).call(guid)
  end
  def broadcast_event_ex(guid : UInt8*, param1 : UInt32, param2 : UInt32, param3 : UInt32, param4 : UInt32) : HRESULT
    @lpVtbl.value.broadcast_event_ex.unsafe_as(Proc(UInt8*, UInt32, UInt32, UInt32, UInt32, HRESULT)).call(guid, param1, param2, param3, param4)
  end
  def content_primarily_audio : HRESULT
    @lpVtbl.value.content_primarily_audio.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IMSVidVideoRenderer2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
  def get_custom_compositor_class(compositorclsid : UInt8**) : HRESULT
    @lpVtbl.value.get_custom_compositor_class.unsafe_as(Proc(UInt8**, HRESULT)).call(compositorclsid)
  end
  def put_custom_compositor_class(compositorclsid : UInt8*) : HRESULT
    @lpVtbl.value.put_custom_compositor_class.unsafe_as(Proc(UInt8*, HRESULT)).call(compositorclsid)
  end
  def get__custom_compositor_class(compositorclsid : Guid*) : HRESULT
    @lpVtbl.value.get__custom_compositor_class.unsafe_as(Proc(Guid*, HRESULT)).call(compositorclsid)
  end
  def put__custom_compositor_class(compositorclsid : Guid*) : HRESULT
    @lpVtbl.value.put__custom_compositor_class.unsafe_as(Proc(Guid*, HRESULT)).call(compositorclsid)
  end
  def get__custom_compositor(compositor : IVMRImageCompositor*) : HRESULT
    @lpVtbl.value.get__custom_compositor.unsafe_as(Proc(IVMRImageCompositor*, HRESULT)).call(compositor)
  end
  def put__custom_compositor(compositor : IVMRImageCompositor) : HRESULT
    @lpVtbl.value.put__custom_compositor.unsafe_as(Proc(IVMRImageCompositor, HRESULT)).call(compositor)
  end
  def get_mixer_bitmap(mixerpicturedisp : IPictureDisp*) : HRESULT
    @lpVtbl.value.get_mixer_bitmap.unsafe_as(Proc(IPictureDisp*, HRESULT)).call(mixerpicturedisp)
  end
  def get__mixer_bitmap(mixerpicture : IVMRMixerBitmap*) : HRESULT
    @lpVtbl.value.get__mixer_bitmap.unsafe_as(Proc(IVMRMixerBitmap*, HRESULT)).call(mixerpicture)
  end
  def put_mixer_bitmap(mixerpicturedisp : IPictureDisp) : HRESULT
    @lpVtbl.value.put_mixer_bitmap.unsafe_as(Proc(IPictureDisp, HRESULT)).call(mixerpicturedisp)
  end
  def put__mixer_bitmap(mixerpicture : VMRALPHABITMAP*) : HRESULT
    @lpVtbl.value.put__mixer_bitmap.unsafe_as(Proc(VMRALPHABITMAP*, HRESULT)).call(mixerpicture)
  end
  def get_mixer_bitmap_position_rect(rdest : IMSVidRect*) : HRESULT
    @lpVtbl.value.get_mixer_bitmap_position_rect.unsafe_as(Proc(IMSVidRect*, HRESULT)).call(rdest)
  end
  def put_mixer_bitmap_position_rect(rdest : IMSVidRect) : HRESULT
    @lpVtbl.value.put_mixer_bitmap_position_rect.unsafe_as(Proc(IMSVidRect, HRESULT)).call(rdest)
  end
  def get_mixer_bitmap_opacity(opacity : Int32*) : HRESULT
    @lpVtbl.value.get_mixer_bitmap_opacity.unsafe_as(Proc(Int32*, HRESULT)).call(opacity)
  end
  def put_mixer_bitmap_opacity(opacity : Int32) : HRESULT
    @lpVtbl.value.put_mixer_bitmap_opacity.unsafe_as(Proc(Int32, HRESULT)).call(opacity)
  end
  def setup_mixer_bitmap(mixerpicturedisp : IPictureDisp, opacity : Int32, rdest : IMSVidRect) : HRESULT
    @lpVtbl.value.setup_mixer_bitmap.unsafe_as(Proc(IPictureDisp, Int32, IMSVidRect, HRESULT)).call(mixerpicturedisp, opacity, rdest)
  end
  def get_source_size(currentsize : SourceSizeList*) : HRESULT
    @lpVtbl.value.get_source_size.unsafe_as(Proc(SourceSizeList*, HRESULT)).call(currentsize)
  end
  def put_source_size(newsize : SourceSizeList) : HRESULT
    @lpVtbl.value.put_source_size.unsafe_as(Proc(SourceSizeList, HRESULT)).call(newsize)
  end
  def get_over_scan(plpercent : Int32*) : HRESULT
    @lpVtbl.value.get_over_scan.unsafe_as(Proc(Int32*, HRESULT)).call(plpercent)
  end
  def put_over_scan(lpercent : Int32) : HRESULT
    @lpVtbl.value.put_over_scan.unsafe_as(Proc(Int32, HRESULT)).call(lpercent)
  end
  def get_available_source_rect(prect : IMSVidRect*) : HRESULT
    @lpVtbl.value.get_available_source_rect.unsafe_as(Proc(IMSVidRect*, HRESULT)).call(prect)
  end
  def get_max_vid_rect(ppvidrect : IMSVidRect*) : HRESULT
    @lpVtbl.value.get_max_vid_rect.unsafe_as(Proc(IMSVidRect*, HRESULT)).call(ppvidrect)
  end
  def get_min_vid_rect(ppvidrect : IMSVidRect*) : HRESULT
    @lpVtbl.value.get_min_vid_rect.unsafe_as(Proc(IMSVidRect*, HRESULT)).call(ppvidrect)
  end
  def get_clipped_source_rect(prect : IMSVidRect*) : HRESULT
    @lpVtbl.value.get_clipped_source_rect.unsafe_as(Proc(IMSVidRect*, HRESULT)).call(prect)
  end
  def put_clipped_source_rect(prect : IMSVidRect) : HRESULT
    @lpVtbl.value.put_clipped_source_rect.unsafe_as(Proc(IMSVidRect, HRESULT)).call(prect)
  end
  def get_using_overlay(useoverlayval : Int16*) : HRESULT
    @lpVtbl.value.get_using_overlay.unsafe_as(Proc(Int16*, HRESULT)).call(useoverlayval)
  end
  def put_using_overlay(useoverlayval : Int16) : HRESULT
    @lpVtbl.value.put_using_overlay.unsafe_as(Proc(Int16, HRESULT)).call(useoverlayval)
  end
  def capture(currentimage : IPictureDisp*) : HRESULT
    @lpVtbl.value.capture.unsafe_as(Proc(IPictureDisp*, HRESULT)).call(currentimage)
  end
  def get_frames_per_second(pval : Int32*) : HRESULT
    @lpVtbl.value.get_frames_per_second.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_decimate_input(pdeci : Int16*) : HRESULT
    @lpVtbl.value.get_decimate_input.unsafe_as(Proc(Int16*, HRESULT)).call(pdeci)
  end
  def put_decimate_input(pdeci : Int16) : HRESULT
    @lpVtbl.value.put_decimate_input.unsafe_as(Proc(Int16, HRESULT)).call(pdeci)
  end
  def get_allocator(allocpresent : IUnknown*) : HRESULT
    @lpVtbl.value.get_allocator.unsafe_as(Proc(IUnknown*, HRESULT)).call(allocpresent)
  end
  def get__allocator(allocpresent : IVMRSurfaceAllocator*) : HRESULT
    @lpVtbl.value.get__allocator.unsafe_as(Proc(IVMRSurfaceAllocator*, HRESULT)).call(allocpresent)
  end
  def get_allocator_id(id : Int32*) : HRESULT
    @lpVtbl.value.get_allocator_id.unsafe_as(Proc(Int32*, HRESULT)).call(id)
  end
  def set_allocator(allocpresent : IUnknown, id : Int32) : HRESULT
    @lpVtbl.value.set_allocator.unsafe_as(Proc(IUnknown, Int32, HRESULT)).call(allocpresent, id)
  end
  def _set_allocator2(allocpresent : IVMRSurfaceAllocator, id : Int32) : HRESULT
    @lpVtbl.value._set_allocator2.unsafe_as(Proc(IVMRSurfaceAllocator, Int32, HRESULT)).call(allocpresent, id)
  end
  def put_suppress_effects(bsuppress : Int16) : HRESULT
    @lpVtbl.value.put_suppress_effects.unsafe_as(Proc(Int16, HRESULT)).call(bsuppress)
  end
  def get_suppress_effects(bsuppress : Int16*) : HRESULT
    @lpVtbl.value.get_suppress_effects.unsafe_as(Proc(Int16*, HRESULT)).call(bsuppress)
  end
end
struct LibWin32::IMSVidVideoRendererEvent2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def state_change(lpd : IMSVidDevice, oldstate : Int32, newstate : Int32) : HRESULT
    @lpVtbl.value.state_change.unsafe_as(Proc(IMSVidDevice, Int32, Int32, HRESULT)).call(lpd, oldstate, newstate)
  end
  def overlay_unavailable : HRESULT
    @lpVtbl.value.overlay_unavailable.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IMSVidVMR9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
  def get_custom_compositor_class(compositorclsid : UInt8**) : HRESULT
    @lpVtbl.value.get_custom_compositor_class.unsafe_as(Proc(UInt8**, HRESULT)).call(compositorclsid)
  end
  def put_custom_compositor_class(compositorclsid : UInt8*) : HRESULT
    @lpVtbl.value.put_custom_compositor_class.unsafe_as(Proc(UInt8*, HRESULT)).call(compositorclsid)
  end
  def get__custom_compositor_class(compositorclsid : Guid*) : HRESULT
    @lpVtbl.value.get__custom_compositor_class.unsafe_as(Proc(Guid*, HRESULT)).call(compositorclsid)
  end
  def put__custom_compositor_class(compositorclsid : Guid*) : HRESULT
    @lpVtbl.value.put__custom_compositor_class.unsafe_as(Proc(Guid*, HRESULT)).call(compositorclsid)
  end
  def get__custom_compositor(compositor : IVMRImageCompositor*) : HRESULT
    @lpVtbl.value.get__custom_compositor.unsafe_as(Proc(IVMRImageCompositor*, HRESULT)).call(compositor)
  end
  def put__custom_compositor(compositor : IVMRImageCompositor) : HRESULT
    @lpVtbl.value.put__custom_compositor.unsafe_as(Proc(IVMRImageCompositor, HRESULT)).call(compositor)
  end
  def get_mixer_bitmap(mixerpicturedisp : IPictureDisp*) : HRESULT
    @lpVtbl.value.get_mixer_bitmap.unsafe_as(Proc(IPictureDisp*, HRESULT)).call(mixerpicturedisp)
  end
  def get__mixer_bitmap(mixerpicture : IVMRMixerBitmap*) : HRESULT
    @lpVtbl.value.get__mixer_bitmap.unsafe_as(Proc(IVMRMixerBitmap*, HRESULT)).call(mixerpicture)
  end
  def put_mixer_bitmap(mixerpicturedisp : IPictureDisp) : HRESULT
    @lpVtbl.value.put_mixer_bitmap.unsafe_as(Proc(IPictureDisp, HRESULT)).call(mixerpicturedisp)
  end
  def put__mixer_bitmap(mixerpicture : VMRALPHABITMAP*) : HRESULT
    @lpVtbl.value.put__mixer_bitmap.unsafe_as(Proc(VMRALPHABITMAP*, HRESULT)).call(mixerpicture)
  end
  def get_mixer_bitmap_position_rect(rdest : IMSVidRect*) : HRESULT
    @lpVtbl.value.get_mixer_bitmap_position_rect.unsafe_as(Proc(IMSVidRect*, HRESULT)).call(rdest)
  end
  def put_mixer_bitmap_position_rect(rdest : IMSVidRect) : HRESULT
    @lpVtbl.value.put_mixer_bitmap_position_rect.unsafe_as(Proc(IMSVidRect, HRESULT)).call(rdest)
  end
  def get_mixer_bitmap_opacity(opacity : Int32*) : HRESULT
    @lpVtbl.value.get_mixer_bitmap_opacity.unsafe_as(Proc(Int32*, HRESULT)).call(opacity)
  end
  def put_mixer_bitmap_opacity(opacity : Int32) : HRESULT
    @lpVtbl.value.put_mixer_bitmap_opacity.unsafe_as(Proc(Int32, HRESULT)).call(opacity)
  end
  def setup_mixer_bitmap(mixerpicturedisp : IPictureDisp, opacity : Int32, rdest : IMSVidRect) : HRESULT
    @lpVtbl.value.setup_mixer_bitmap.unsafe_as(Proc(IPictureDisp, Int32, IMSVidRect, HRESULT)).call(mixerpicturedisp, opacity, rdest)
  end
  def get_source_size(currentsize : SourceSizeList*) : HRESULT
    @lpVtbl.value.get_source_size.unsafe_as(Proc(SourceSizeList*, HRESULT)).call(currentsize)
  end
  def put_source_size(newsize : SourceSizeList) : HRESULT
    @lpVtbl.value.put_source_size.unsafe_as(Proc(SourceSizeList, HRESULT)).call(newsize)
  end
  def get_over_scan(plpercent : Int32*) : HRESULT
    @lpVtbl.value.get_over_scan.unsafe_as(Proc(Int32*, HRESULT)).call(plpercent)
  end
  def put_over_scan(lpercent : Int32) : HRESULT
    @lpVtbl.value.put_over_scan.unsafe_as(Proc(Int32, HRESULT)).call(lpercent)
  end
  def get_available_source_rect(prect : IMSVidRect*) : HRESULT
    @lpVtbl.value.get_available_source_rect.unsafe_as(Proc(IMSVidRect*, HRESULT)).call(prect)
  end
  def get_max_vid_rect(ppvidrect : IMSVidRect*) : HRESULT
    @lpVtbl.value.get_max_vid_rect.unsafe_as(Proc(IMSVidRect*, HRESULT)).call(ppvidrect)
  end
  def get_min_vid_rect(ppvidrect : IMSVidRect*) : HRESULT
    @lpVtbl.value.get_min_vid_rect.unsafe_as(Proc(IMSVidRect*, HRESULT)).call(ppvidrect)
  end
  def get_clipped_source_rect(prect : IMSVidRect*) : HRESULT
    @lpVtbl.value.get_clipped_source_rect.unsafe_as(Proc(IMSVidRect*, HRESULT)).call(prect)
  end
  def put_clipped_source_rect(prect : IMSVidRect) : HRESULT
    @lpVtbl.value.put_clipped_source_rect.unsafe_as(Proc(IMSVidRect, HRESULT)).call(prect)
  end
  def get_using_overlay(useoverlayval : Int16*) : HRESULT
    @lpVtbl.value.get_using_overlay.unsafe_as(Proc(Int16*, HRESULT)).call(useoverlayval)
  end
  def put_using_overlay(useoverlayval : Int16) : HRESULT
    @lpVtbl.value.put_using_overlay.unsafe_as(Proc(Int16, HRESULT)).call(useoverlayval)
  end
  def capture(currentimage : IPictureDisp*) : HRESULT
    @lpVtbl.value.capture.unsafe_as(Proc(IPictureDisp*, HRESULT)).call(currentimage)
  end
  def get_frames_per_second(pval : Int32*) : HRESULT
    @lpVtbl.value.get_frames_per_second.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_decimate_input(pdeci : Int16*) : HRESULT
    @lpVtbl.value.get_decimate_input.unsafe_as(Proc(Int16*, HRESULT)).call(pdeci)
  end
  def put_decimate_input(pdeci : Int16) : HRESULT
    @lpVtbl.value.put_decimate_input.unsafe_as(Proc(Int16, HRESULT)).call(pdeci)
  end
  def get_allocator_id(id : Int32*) : HRESULT
    @lpVtbl.value.get_allocator_id.unsafe_as(Proc(Int32*, HRESULT)).call(id)
  end
  def set_allocator(allocpresent : IUnknown, id : Int32) : HRESULT
    @lpVtbl.value.set_allocator.unsafe_as(Proc(IUnknown, Int32, HRESULT)).call(allocpresent, id)
  end
  def put_suppress_effects(bsuppress : Int16) : HRESULT
    @lpVtbl.value.put_suppress_effects.unsafe_as(Proc(Int16, HRESULT)).call(bsuppress)
  end
  def get_suppress_effects(bsuppress : Int16*) : HRESULT
    @lpVtbl.value.get_suppress_effects.unsafe_as(Proc(Int16*, HRESULT)).call(bsuppress)
  end
  def get_allocator(allocpresent : IUnknown*) : HRESULT
    @lpVtbl.value.get_allocator.unsafe_as(Proc(IUnknown*, HRESULT)).call(allocpresent)
  end
end
struct LibWin32::IMSVidEVR
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
  def get_custom_compositor_class(compositorclsid : UInt8**) : HRESULT
    @lpVtbl.value.get_custom_compositor_class.unsafe_as(Proc(UInt8**, HRESULT)).call(compositorclsid)
  end
  def put_custom_compositor_class(compositorclsid : UInt8*) : HRESULT
    @lpVtbl.value.put_custom_compositor_class.unsafe_as(Proc(UInt8*, HRESULT)).call(compositorclsid)
  end
  def get__custom_compositor_class(compositorclsid : Guid*) : HRESULT
    @lpVtbl.value.get__custom_compositor_class.unsafe_as(Proc(Guid*, HRESULT)).call(compositorclsid)
  end
  def put__custom_compositor_class(compositorclsid : Guid*) : HRESULT
    @lpVtbl.value.put__custom_compositor_class.unsafe_as(Proc(Guid*, HRESULT)).call(compositorclsid)
  end
  def get__custom_compositor(compositor : IVMRImageCompositor*) : HRESULT
    @lpVtbl.value.get__custom_compositor.unsafe_as(Proc(IVMRImageCompositor*, HRESULT)).call(compositor)
  end
  def put__custom_compositor(compositor : IVMRImageCompositor) : HRESULT
    @lpVtbl.value.put__custom_compositor.unsafe_as(Proc(IVMRImageCompositor, HRESULT)).call(compositor)
  end
  def get_mixer_bitmap(mixerpicturedisp : IPictureDisp*) : HRESULT
    @lpVtbl.value.get_mixer_bitmap.unsafe_as(Proc(IPictureDisp*, HRESULT)).call(mixerpicturedisp)
  end
  def get__mixer_bitmap(mixerpicture : IVMRMixerBitmap*) : HRESULT
    @lpVtbl.value.get__mixer_bitmap.unsafe_as(Proc(IVMRMixerBitmap*, HRESULT)).call(mixerpicture)
  end
  def put_mixer_bitmap(mixerpicturedisp : IPictureDisp) : HRESULT
    @lpVtbl.value.put_mixer_bitmap.unsafe_as(Proc(IPictureDisp, HRESULT)).call(mixerpicturedisp)
  end
  def put__mixer_bitmap(mixerpicture : VMRALPHABITMAP*) : HRESULT
    @lpVtbl.value.put__mixer_bitmap.unsafe_as(Proc(VMRALPHABITMAP*, HRESULT)).call(mixerpicture)
  end
  def get_mixer_bitmap_position_rect(rdest : IMSVidRect*) : HRESULT
    @lpVtbl.value.get_mixer_bitmap_position_rect.unsafe_as(Proc(IMSVidRect*, HRESULT)).call(rdest)
  end
  def put_mixer_bitmap_position_rect(rdest : IMSVidRect) : HRESULT
    @lpVtbl.value.put_mixer_bitmap_position_rect.unsafe_as(Proc(IMSVidRect, HRESULT)).call(rdest)
  end
  def get_mixer_bitmap_opacity(opacity : Int32*) : HRESULT
    @lpVtbl.value.get_mixer_bitmap_opacity.unsafe_as(Proc(Int32*, HRESULT)).call(opacity)
  end
  def put_mixer_bitmap_opacity(opacity : Int32) : HRESULT
    @lpVtbl.value.put_mixer_bitmap_opacity.unsafe_as(Proc(Int32, HRESULT)).call(opacity)
  end
  def setup_mixer_bitmap(mixerpicturedisp : IPictureDisp, opacity : Int32, rdest : IMSVidRect) : HRESULT
    @lpVtbl.value.setup_mixer_bitmap.unsafe_as(Proc(IPictureDisp, Int32, IMSVidRect, HRESULT)).call(mixerpicturedisp, opacity, rdest)
  end
  def get_source_size(currentsize : SourceSizeList*) : HRESULT
    @lpVtbl.value.get_source_size.unsafe_as(Proc(SourceSizeList*, HRESULT)).call(currentsize)
  end
  def put_source_size(newsize : SourceSizeList) : HRESULT
    @lpVtbl.value.put_source_size.unsafe_as(Proc(SourceSizeList, HRESULT)).call(newsize)
  end
  def get_over_scan(plpercent : Int32*) : HRESULT
    @lpVtbl.value.get_over_scan.unsafe_as(Proc(Int32*, HRESULT)).call(plpercent)
  end
  def put_over_scan(lpercent : Int32) : HRESULT
    @lpVtbl.value.put_over_scan.unsafe_as(Proc(Int32, HRESULT)).call(lpercent)
  end
  def get_available_source_rect(prect : IMSVidRect*) : HRESULT
    @lpVtbl.value.get_available_source_rect.unsafe_as(Proc(IMSVidRect*, HRESULT)).call(prect)
  end
  def get_max_vid_rect(ppvidrect : IMSVidRect*) : HRESULT
    @lpVtbl.value.get_max_vid_rect.unsafe_as(Proc(IMSVidRect*, HRESULT)).call(ppvidrect)
  end
  def get_min_vid_rect(ppvidrect : IMSVidRect*) : HRESULT
    @lpVtbl.value.get_min_vid_rect.unsafe_as(Proc(IMSVidRect*, HRESULT)).call(ppvidrect)
  end
  def get_clipped_source_rect(prect : IMSVidRect*) : HRESULT
    @lpVtbl.value.get_clipped_source_rect.unsafe_as(Proc(IMSVidRect*, HRESULT)).call(prect)
  end
  def put_clipped_source_rect(prect : IMSVidRect) : HRESULT
    @lpVtbl.value.put_clipped_source_rect.unsafe_as(Proc(IMSVidRect, HRESULT)).call(prect)
  end
  def get_using_overlay(useoverlayval : Int16*) : HRESULT
    @lpVtbl.value.get_using_overlay.unsafe_as(Proc(Int16*, HRESULT)).call(useoverlayval)
  end
  def put_using_overlay(useoverlayval : Int16) : HRESULT
    @lpVtbl.value.put_using_overlay.unsafe_as(Proc(Int16, HRESULT)).call(useoverlayval)
  end
  def capture(currentimage : IPictureDisp*) : HRESULT
    @lpVtbl.value.capture.unsafe_as(Proc(IPictureDisp*, HRESULT)).call(currentimage)
  end
  def get_frames_per_second(pval : Int32*) : HRESULT
    @lpVtbl.value.get_frames_per_second.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_decimate_input(pdeci : Int16*) : HRESULT
    @lpVtbl.value.get_decimate_input.unsafe_as(Proc(Int16*, HRESULT)).call(pdeci)
  end
  def put_decimate_input(pdeci : Int16) : HRESULT
    @lpVtbl.value.put_decimate_input.unsafe_as(Proc(Int16, HRESULT)).call(pdeci)
  end
  def get_presenter(ppallocpresent : IMFVideoPresenter*) : HRESULT
    @lpVtbl.value.get_presenter.unsafe_as(Proc(IMFVideoPresenter*, HRESULT)).call(ppallocpresent)
  end
  def put_presenter(pallocpresent : IMFVideoPresenter) : HRESULT
    @lpVtbl.value.put_presenter.unsafe_as(Proc(IMFVideoPresenter, HRESULT)).call(pallocpresent)
  end
  def put_suppress_effects(bsuppress : Int16) : HRESULT
    @lpVtbl.value.put_suppress_effects.unsafe_as(Proc(Int16, HRESULT)).call(bsuppress)
  end
  def get_suppress_effects(bsuppress : Int16*) : HRESULT
    @lpVtbl.value.get_suppress_effects.unsafe_as(Proc(Int16*, HRESULT)).call(bsuppress)
  end
end
struct LibWin32::IMSVidEVREvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def state_change(lpd : IMSVidDevice, oldstate : Int32, newstate : Int32) : HRESULT
    @lpVtbl.value.state_change.unsafe_as(Proc(IMSVidDevice, Int32, Int32, HRESULT)).call(lpd, oldstate, newstate)
  end
  def on_user_event(leventcode : Int32) : HRESULT
    @lpVtbl.value.on_user_event.unsafe_as(Proc(Int32, HRESULT)).call(leventcode)
  end
end
struct LibWin32::IMSVidAudioRenderer
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(name)
  end
  def get_status(status : Int32*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(Int32*, HRESULT)).call(status)
  end
  def put_power(power : Int16) : HRESULT
    @lpVtbl.value.put_power.unsafe_as(Proc(Int16, HRESULT)).call(power)
  end
  def get_power(power : Int16*) : HRESULT
    @lpVtbl.value.get_power.unsafe_as(Proc(Int16*, HRESULT)).call(power)
  end
  def get_category(guid : UInt8**) : HRESULT
    @lpVtbl.value.get_category.unsafe_as(Proc(UInt8**, HRESULT)).call(guid)
  end
  def get_class_id(clsid : UInt8**) : HRESULT
    @lpVtbl.value.get_class_id.unsafe_as(Proc(UInt8**, HRESULT)).call(clsid)
  end
  def get__category(guid : Guid*) : HRESULT
    @lpVtbl.value.get__category.unsafe_as(Proc(Guid*, HRESULT)).call(guid)
  end
  def get__class_id(clsid : Guid*) : HRESULT
    @lpVtbl.value.get__class_id.unsafe_as(Proc(Guid*, HRESULT)).call(clsid)
  end
  def is_equal_device(device : IMSVidDevice, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_device.unsafe_as(Proc(IMSVidDevice, Int16*, HRESULT)).call(device, isequal)
  end
  def put_volume(lvol : Int32) : HRESULT
    @lpVtbl.value.put_volume.unsafe_as(Proc(Int32, HRESULT)).call(lvol)
  end
  def get_volume(lvol : Int32*) : HRESULT
    @lpVtbl.value.get_volume.unsafe_as(Proc(Int32*, HRESULT)).call(lvol)
  end
  def put_balance(lbal : Int32) : HRESULT
    @lpVtbl.value.put_balance.unsafe_as(Proc(Int32, HRESULT)).call(lbal)
  end
  def get_balance(lbal : Int32*) : HRESULT
    @lpVtbl.value.get_balance.unsafe_as(Proc(Int32*, HRESULT)).call(lbal)
  end
end
struct LibWin32::IMSVidAudioRendererEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def state_change(lpd : IMSVidDevice, oldstate : Int32, newstate : Int32) : HRESULT
    @lpVtbl.value.state_change.unsafe_as(Proc(IMSVidDevice, Int32, Int32, HRESULT)).call(lpd, oldstate, newstate)
  end
end
struct LibWin32::IMSVidAudioRendererEvent2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def state_change(lpd : IMSVidDevice, oldstate : Int32, newstate : Int32) : HRESULT
    @lpVtbl.value.state_change.unsafe_as(Proc(IMSVidDevice, Int32, Int32, HRESULT)).call(lpd, oldstate, newstate)
  end
  def av_dec_audio_dual_mono : HRESULT
    @lpVtbl.value.av_dec_audio_dual_mono.unsafe_as(Proc(HRESULT)).call
  end
  def av_audio_sample_rate : HRESULT
    @lpVtbl.value.av_audio_sample_rate.unsafe_as(Proc(HRESULT)).call
  end
  def av_audio_channel_config : HRESULT
    @lpVtbl.value.av_audio_channel_config.unsafe_as(Proc(HRESULT)).call
  end
  def av_audio_channel_count : HRESULT
    @lpVtbl.value.av_audio_channel_count.unsafe_as(Proc(HRESULT)).call
  end
  def av_dec_common_mean_bit_rate : HRESULT
    @lpVtbl.value.av_dec_common_mean_bit_rate.unsafe_as(Proc(HRESULT)).call
  end
  def avdd_surround_mode : HRESULT
    @lpVtbl.value.avdd_surround_mode.unsafe_as(Proc(HRESULT)).call
  end
  def av_dec_common_input_format : HRESULT
    @lpVtbl.value.av_dec_common_input_format.unsafe_as(Proc(HRESULT)).call
  end
  def av_dec_common_output_format : HRESULT
    @lpVtbl.value.av_dec_common_output_format.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IMSVidInputDevices
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_count(lcount : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(lcount)
  end
  def get__new_enum(pd : IEnumVARIANT*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IEnumVARIANT*, HRESULT)).call(pd)
  end
  def get_item(v : VARIANT, pdb : IMSVidInputDevice*) : HRESULT
    @lpVtbl.value.get_item.unsafe_as(Proc(VARIANT, IMSVidInputDevice*, HRESULT)).call(v, pdb)
  end
  def add(pdb : IMSVidInputDevice) : HRESULT
    @lpVtbl.value.add.unsafe_as(Proc(IMSVidInputDevice, HRESULT)).call(pdb)
  end
  def remove(v : VARIANT) : HRESULT
    @lpVtbl.value.remove.unsafe_as(Proc(VARIANT, HRESULT)).call(v)
  end
end
struct LibWin32::IMSVidOutputDevices
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_count(lcount : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(lcount)
  end
  def get__new_enum(pd : IEnumVARIANT*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IEnumVARIANT*, HRESULT)).call(pd)
  end
  def get_item(v : VARIANT, pdb : IMSVidOutputDevice*) : HRESULT
    @lpVtbl.value.get_item.unsafe_as(Proc(VARIANT, IMSVidOutputDevice*, HRESULT)).call(v, pdb)
  end
  def add(pdb : IMSVidOutputDevice) : HRESULT
    @lpVtbl.value.add.unsafe_as(Proc(IMSVidOutputDevice, HRESULT)).call(pdb)
  end
  def remove(v : VARIANT) : HRESULT
    @lpVtbl.value.remove.unsafe_as(Proc(VARIANT, HRESULT)).call(v)
  end
end
struct LibWin32::IMSVidVideoRendererDevices
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_count(lcount : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(lcount)
  end
  def get__new_enum(pd : IEnumVARIANT*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IEnumVARIANT*, HRESULT)).call(pd)
  end
  def get_item(v : VARIANT, pdb : IMSVidVideoRenderer*) : HRESULT
    @lpVtbl.value.get_item.unsafe_as(Proc(VARIANT, IMSVidVideoRenderer*, HRESULT)).call(v, pdb)
  end
  def add(pdb : IMSVidVideoRenderer) : HRESULT
    @lpVtbl.value.add.unsafe_as(Proc(IMSVidVideoRenderer, HRESULT)).call(pdb)
  end
  def remove(v : VARIANT) : HRESULT
    @lpVtbl.value.remove.unsafe_as(Proc(VARIANT, HRESULT)).call(v)
  end
end
struct LibWin32::IMSVidAudioRendererDevices
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_count(lcount : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(lcount)
  end
  def get__new_enum(pd : IEnumVARIANT*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IEnumVARIANT*, HRESULT)).call(pd)
  end
  def get_item(v : VARIANT, pdb : IMSVidAudioRenderer*) : HRESULT
    @lpVtbl.value.get_item.unsafe_as(Proc(VARIANT, IMSVidAudioRenderer*, HRESULT)).call(v, pdb)
  end
  def add(pdb : IMSVidAudioRenderer) : HRESULT
    @lpVtbl.value.add.unsafe_as(Proc(IMSVidAudioRenderer, HRESULT)).call(pdb)
  end
  def remove(v : VARIANT) : HRESULT
    @lpVtbl.value.remove.unsafe_as(Proc(VARIANT, HRESULT)).call(v)
  end
end
struct LibWin32::IMSVidFeatures
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_count(lcount : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(lcount)
  end
  def get__new_enum(pd : IEnumVARIANT*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IEnumVARIANT*, HRESULT)).call(pd)
  end
  def get_item(v : VARIANT, pdb : IMSVidFeature*) : HRESULT
    @lpVtbl.value.get_item.unsafe_as(Proc(VARIANT, IMSVidFeature*, HRESULT)).call(v, pdb)
  end
  def add(pdb : IMSVidFeature) : HRESULT
    @lpVtbl.value.add.unsafe_as(Proc(IMSVidFeature, HRESULT)).call(pdb)
  end
  def remove(v : VARIANT) : HRESULT
    @lpVtbl.value.remove.unsafe_as(Proc(VARIANT, HRESULT)).call(v)
  end
end
struct LibWin32::IMSVidCtl
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_auto_size(pbool : Int16*) : HRESULT
    @lpVtbl.value.get_auto_size.unsafe_as(Proc(Int16*, HRESULT)).call(pbool)
  end
  def put_auto_size(vbool : Int16) : HRESULT
    @lpVtbl.value.put_auto_size.unsafe_as(Proc(Int16, HRESULT)).call(vbool)
  end
  def get_back_color(backcolor : UInt32*) : HRESULT
    @lpVtbl.value.get_back_color.unsafe_as(Proc(UInt32*, HRESULT)).call(backcolor)
  end
  def put_back_color(backcolor : UInt32) : HRESULT
    @lpVtbl.value.put_back_color.unsafe_as(Proc(UInt32, HRESULT)).call(backcolor)
  end
  def get_enabled(pbool : Int16*) : HRESULT
    @lpVtbl.value.get_enabled.unsafe_as(Proc(Int16*, HRESULT)).call(pbool)
  end
  def put_enabled(vbool : Int16) : HRESULT
    @lpVtbl.value.put_enabled.unsafe_as(Proc(Int16, HRESULT)).call(vbool)
  end
  def get_tab_stop(pbool : Int16*) : HRESULT
    @lpVtbl.value.get_tab_stop.unsafe_as(Proc(Int16*, HRESULT)).call(pbool)
  end
  def put_tab_stop(vbool : Int16) : HRESULT
    @lpVtbl.value.put_tab_stop.unsafe_as(Proc(Int16, HRESULT)).call(vbool)
  end
  def get_window(phwnd : HANDLE*) : HRESULT
    @lpVtbl.value.get_window.unsafe_as(Proc(HANDLE*, HRESULT)).call(phwnd)
  end
  def refresh : HRESULT
    @lpVtbl.value.refresh.unsafe_as(Proc(HRESULT)).call
  end
  def get_display_size(currentvalue : DisplaySizeList*) : HRESULT
    @lpVtbl.value.get_display_size.unsafe_as(Proc(DisplaySizeList*, HRESULT)).call(currentvalue)
  end
  def put_display_size(newvalue : DisplaySizeList) : HRESULT
    @lpVtbl.value.put_display_size.unsafe_as(Proc(DisplaySizeList, HRESULT)).call(newvalue)
  end
  def get_maintain_aspect_ratio(currentvalue : Int16*) : HRESULT
    @lpVtbl.value.get_maintain_aspect_ratio.unsafe_as(Proc(Int16*, HRESULT)).call(currentvalue)
  end
  def put_maintain_aspect_ratio(newvalue : Int16) : HRESULT
    @lpVtbl.value.put_maintain_aspect_ratio.unsafe_as(Proc(Int16, HRESULT)).call(newvalue)
  end
  def get_color_key(currentvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_color_key.unsafe_as(Proc(UInt32*, HRESULT)).call(currentvalue)
  end
  def put_color_key(newvalue : UInt32) : HRESULT
    @lpVtbl.value.put_color_key.unsafe_as(Proc(UInt32, HRESULT)).call(newvalue)
  end
  def get_inputs_available(categoryguid : UInt8*, pval : IMSVidInputDevices*) : HRESULT
    @lpVtbl.value.get_inputs_available.unsafe_as(Proc(UInt8*, IMSVidInputDevices*, HRESULT)).call(categoryguid, pval)
  end
  def get_outputs_available(categoryguid : UInt8*, pval : IMSVidOutputDevices*) : HRESULT
    @lpVtbl.value.get_outputs_available.unsafe_as(Proc(UInt8*, IMSVidOutputDevices*, HRESULT)).call(categoryguid, pval)
  end
  def get__inputs_available(categoryguid : Guid*, pval : IMSVidInputDevices*) : HRESULT
    @lpVtbl.value.get__inputs_available.unsafe_as(Proc(Guid*, IMSVidInputDevices*, HRESULT)).call(categoryguid, pval)
  end
  def get__outputs_available(categoryguid : Guid*, pval : IMSVidOutputDevices*) : HRESULT
    @lpVtbl.value.get__outputs_available.unsafe_as(Proc(Guid*, IMSVidOutputDevices*, HRESULT)).call(categoryguid, pval)
  end
  def get_video_renderers_available(pval : IMSVidVideoRendererDevices*) : HRESULT
    @lpVtbl.value.get_video_renderers_available.unsafe_as(Proc(IMSVidVideoRendererDevices*, HRESULT)).call(pval)
  end
  def get_audio_renderers_available(pval : IMSVidAudioRendererDevices*) : HRESULT
    @lpVtbl.value.get_audio_renderers_available.unsafe_as(Proc(IMSVidAudioRendererDevices*, HRESULT)).call(pval)
  end
  def get_features_available(pval : IMSVidFeatures*) : HRESULT
    @lpVtbl.value.get_features_available.unsafe_as(Proc(IMSVidFeatures*, HRESULT)).call(pval)
  end
  def get_input_active(pval : IMSVidInputDevice*) : HRESULT
    @lpVtbl.value.get_input_active.unsafe_as(Proc(IMSVidInputDevice*, HRESULT)).call(pval)
  end
  def put_input_active(pval : IMSVidInputDevice) : HRESULT
    @lpVtbl.value.put_input_active.unsafe_as(Proc(IMSVidInputDevice, HRESULT)).call(pval)
  end
  def get_outputs_active(pval : IMSVidOutputDevices*) : HRESULT
    @lpVtbl.value.get_outputs_active.unsafe_as(Proc(IMSVidOutputDevices*, HRESULT)).call(pval)
  end
  def put_outputs_active(pval : IMSVidOutputDevices) : HRESULT
    @lpVtbl.value.put_outputs_active.unsafe_as(Proc(IMSVidOutputDevices, HRESULT)).call(pval)
  end
  def get_video_renderer_active(pval : IMSVidVideoRenderer*) : HRESULT
    @lpVtbl.value.get_video_renderer_active.unsafe_as(Proc(IMSVidVideoRenderer*, HRESULT)).call(pval)
  end
  def put_video_renderer_active(pval : IMSVidVideoRenderer) : HRESULT
    @lpVtbl.value.put_video_renderer_active.unsafe_as(Proc(IMSVidVideoRenderer, HRESULT)).call(pval)
  end
  def get_audio_renderer_active(pval : IMSVidAudioRenderer*) : HRESULT
    @lpVtbl.value.get_audio_renderer_active.unsafe_as(Proc(IMSVidAudioRenderer*, HRESULT)).call(pval)
  end
  def put_audio_renderer_active(pval : IMSVidAudioRenderer) : HRESULT
    @lpVtbl.value.put_audio_renderer_active.unsafe_as(Proc(IMSVidAudioRenderer, HRESULT)).call(pval)
  end
  def get_features_active(pval : IMSVidFeatures*) : HRESULT
    @lpVtbl.value.get_features_active.unsafe_as(Proc(IMSVidFeatures*, HRESULT)).call(pval)
  end
  def put_features_active(pval : IMSVidFeatures) : HRESULT
    @lpVtbl.value.put_features_active.unsafe_as(Proc(IMSVidFeatures, HRESULT)).call(pval)
  end
  def get_state(lstate : MSVidCtlStateList*) : HRESULT
    @lpVtbl.value.get_state.unsafe_as(Proc(MSVidCtlStateList*, HRESULT)).call(lstate)
  end
  def view(v : VARIANT*) : HRESULT
    @lpVtbl.value.view.unsafe_as(Proc(VARIANT*, HRESULT)).call(v)
  end
  def build : HRESULT
    @lpVtbl.value.build.unsafe_as(Proc(HRESULT)).call
  end
  def pause : HRESULT
    @lpVtbl.value.pause.unsafe_as(Proc(HRESULT)).call
  end
  def run : HRESULT
    @lpVtbl.value.run.unsafe_as(Proc(HRESULT)).call
  end
  def stop : HRESULT
    @lpVtbl.value.stop.unsafe_as(Proc(HRESULT)).call
  end
  def decompose : HRESULT
    @lpVtbl.value.decompose.unsafe_as(Proc(HRESULT)).call
  end
  def disable_video : HRESULT
    @lpVtbl.value.disable_video.unsafe_as(Proc(HRESULT)).call
  end
  def disable_audio : HRESULT
    @lpVtbl.value.disable_audio.unsafe_as(Proc(HRESULT)).call
  end
  def view_next(v : VARIANT*) : HRESULT
    @lpVtbl.value.view_next.unsafe_as(Proc(VARIANT*, HRESULT)).call(v)
  end
end
struct LibWin32::IMSEventBinder
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def bind(peventobject : IDispatch, eventname : UInt8*, eventhandler : UInt8*, cancelid : Int32*) : HRESULT
    @lpVtbl.value.bind.unsafe_as(Proc(IDispatch, UInt8*, UInt8*, Int32*, HRESULT)).call(peventobject, eventname, eventhandler, cancelid)
  end
  def unbind(cancelcookie : UInt32) : HRESULT
    @lpVtbl.value.unbind.unsafe_as(Proc(UInt32, HRESULT)).call(cancelcookie)
  end
end
struct LibWin32::IIMSVidCtlEvents
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IStreamBufferInitialize
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_hkey(hkeyroot : HKEY) : HRESULT
    @lpVtbl.value.set_hkey.unsafe_as(Proc(HKEY, HRESULT)).call(hkeyroot)
  end
  def set_si_ds(csids : UInt32, ppsid : PSID*) : HRESULT
    @lpVtbl.value.set_si_ds.unsafe_as(Proc(UInt32, PSID*, HRESULT)).call(csids, ppsid)
  end
end
struct LibWin32::IStreamBufferSink
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def lock_profile(pszstreambufferfilename : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.lock_profile.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(pszstreambufferfilename)
  end
  def create_recorder(pszfilename : LibC::LPWSTR, dwrecordtype : UInt32, precordingiunknown : IUnknown*) : HRESULT
    @lpVtbl.value.create_recorder.unsafe_as(Proc(LibC::LPWSTR, UInt32, IUnknown*, HRESULT)).call(pszfilename, dwrecordtype, precordingiunknown)
  end
  def is_profile_locked : HRESULT
    @lpVtbl.value.is_profile_locked.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IStreamBufferSink2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def lock_profile(pszstreambufferfilename : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.lock_profile.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(pszstreambufferfilename)
  end
  def create_recorder(pszfilename : LibC::LPWSTR, dwrecordtype : UInt32, precordingiunknown : IUnknown*) : HRESULT
    @lpVtbl.value.create_recorder.unsafe_as(Proc(LibC::LPWSTR, UInt32, IUnknown*, HRESULT)).call(pszfilename, dwrecordtype, precordingiunknown)
  end
  def is_profile_locked : HRESULT
    @lpVtbl.value.is_profile_locked.unsafe_as(Proc(HRESULT)).call
  end
  def unlock_profile : HRESULT
    @lpVtbl.value.unlock_profile.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IStreamBufferSink3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def lock_profile(pszstreambufferfilename : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.lock_profile.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(pszstreambufferfilename)
  end
  def create_recorder(pszfilename : LibC::LPWSTR, dwrecordtype : UInt32, precordingiunknown : IUnknown*) : HRESULT
    @lpVtbl.value.create_recorder.unsafe_as(Proc(LibC::LPWSTR, UInt32, IUnknown*, HRESULT)).call(pszfilename, dwrecordtype, precordingiunknown)
  end
  def is_profile_locked : HRESULT
    @lpVtbl.value.is_profile_locked.unsafe_as(Proc(HRESULT)).call
  end
  def unlock_profile : HRESULT
    @lpVtbl.value.unlock_profile.unsafe_as(Proc(HRESULT)).call
  end
  def set_available_filter(prtmin : Int64*) : HRESULT
    @lpVtbl.value.set_available_filter.unsafe_as(Proc(Int64*, HRESULT)).call(prtmin)
  end
end
struct LibWin32::IStreamBufferSource
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_stream_sink(pistreambuffersink : IStreamBufferSink) : HRESULT
    @lpVtbl.value.set_stream_sink.unsafe_as(Proc(IStreamBufferSink, HRESULT)).call(pistreambuffersink)
  end
end
struct LibWin32::IStreamBufferRecordControl
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def start(prtstart : Int64*) : HRESULT
    @lpVtbl.value.start.unsafe_as(Proc(Int64*, HRESULT)).call(prtstart)
  end
  def stop(rtstop : Int64) : HRESULT
    @lpVtbl.value.stop.unsafe_as(Proc(Int64, HRESULT)).call(rtstop)
  end
  def get_recording_status(phresult : HRESULT*, pbstarted : LibC::BOOL*, pbstopped : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_recording_status.unsafe_as(Proc(HRESULT*, LibC::BOOL*, LibC::BOOL*, HRESULT)).call(phresult, pbstarted, pbstopped)
  end
end
struct LibWin32::IStreamBufferRecComp
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psztargetfilename : LibC::LPWSTR, pszsbrecprofileref : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(LibC::LPWSTR, LibC::LPWSTR, HRESULT)).call(psztargetfilename, pszsbrecprofileref)
  end
  def append(pszsbrecording : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.append.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(pszsbrecording)
  end
  def append_ex(pszsbrecording : LibC::LPWSTR, rtstart : Int64, rtstop : Int64) : HRESULT
    @lpVtbl.value.append_ex.unsafe_as(Proc(LibC::LPWSTR, Int64, Int64, HRESULT)).call(pszsbrecording, rtstart, rtstop)
  end
  def get_current_length(pcseconds : UInt32*) : HRESULT
    @lpVtbl.value.get_current_length.unsafe_as(Proc(UInt32*, HRESULT)).call(pcseconds)
  end
  def close : HRESULT
    @lpVtbl.value.close.unsafe_as(Proc(HRESULT)).call
  end
  def cancel : HRESULT
    @lpVtbl.value.cancel.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IStreamBufferRecordingAttribute
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_attribute(ulreserved : UInt32, pszattributename : LibC::LPWSTR, streambufferattributetype : STREAMBUFFER_ATTR_DATATYPE, pbattribute : UInt8*, cbattributelength : UInt16) : HRESULT
    @lpVtbl.value.set_attribute.unsafe_as(Proc(UInt32, LibC::LPWSTR, STREAMBUFFER_ATTR_DATATYPE, UInt8*, UInt16, HRESULT)).call(ulreserved, pszattributename, streambufferattributetype, pbattribute, cbattributelength)
  end
  def get_attribute_count(ulreserved : UInt32, pcattributes : UInt16*) : HRESULT
    @lpVtbl.value.get_attribute_count.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(ulreserved, pcattributes)
  end
  def get_attribute_by_name(pszattributename : LibC::LPWSTR, pulreserved : UInt32*, pstreambufferattributetype : STREAMBUFFER_ATTR_DATATYPE*, pbattribute : UInt8*, pcblength : UInt16*) : HRESULT
    @lpVtbl.value.get_attribute_by_name.unsafe_as(Proc(LibC::LPWSTR, UInt32*, STREAMBUFFER_ATTR_DATATYPE*, UInt8*, UInt16*, HRESULT)).call(pszattributename, pulreserved, pstreambufferattributetype, pbattribute, pcblength)
  end
  def get_attribute_by_index(windex : UInt16, pulreserved : UInt32*, pszattributename : LibC::LPWSTR, pcchnamelength : UInt16*, pstreambufferattributetype : STREAMBUFFER_ATTR_DATATYPE*, pbattribute : UInt8*, pcblength : UInt16*) : HRESULT
    @lpVtbl.value.get_attribute_by_index.unsafe_as(Proc(UInt16, UInt32*, LibC::LPWSTR, UInt16*, STREAMBUFFER_ATTR_DATATYPE*, UInt8*, UInt16*, HRESULT)).call(windex, pulreserved, pszattributename, pcchnamelength, pstreambufferattributetype, pbattribute, pcblength)
  end
  def enum_attributes(ppienumstreambufferattrib : IEnumStreamBufferRecordingAttrib*) : HRESULT
    @lpVtbl.value.enum_attributes.unsafe_as(Proc(IEnumStreamBufferRecordingAttrib*, HRESULT)).call(ppienumstreambufferattrib)
  end
end
struct LibWin32::IEnumStreamBufferRecordingAttrib
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def next(crequest : UInt32, pstreambufferattribute : STREAMBUFFER_ATTRIBUTE*, pcreceived : UInt32*) : HRESULT
    @lpVtbl.value.next.unsafe_as(Proc(UInt32, STREAMBUFFER_ATTRIBUTE*, UInt32*, HRESULT)).call(crequest, pstreambufferattribute, pcreceived)
  end
  def skip(crecords : UInt32) : HRESULT
    @lpVtbl.value.skip.unsafe_as(Proc(UInt32, HRESULT)).call(crecords)
  end
  def reset : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(HRESULT)).call
  end
  def clone(ppienumstreambufferattrib : IEnumStreamBufferRecordingAttrib*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(IEnumStreamBufferRecordingAttrib*, HRESULT)).call(ppienumstreambufferattrib)
  end
end
struct LibWin32::IStreamBufferConfigure
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_directory(pszdirectoryname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_directory.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(pszdirectoryname)
  end
  def get_directory(ppszdirectoryname : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_directory.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(ppszdirectoryname)
  end
  def set_backing_file_count(dwmin : UInt32, dwmax : UInt32) : HRESULT
    @lpVtbl.value.set_backing_file_count.unsafe_as(Proc(UInt32, UInt32, HRESULT)).call(dwmin, dwmax)
  end
  def get_backing_file_count(pdwmin : UInt32*, pdwmax : UInt32*) : HRESULT
    @lpVtbl.value.get_backing_file_count.unsafe_as(Proc(UInt32*, UInt32*, HRESULT)).call(pdwmin, pdwmax)
  end
  def set_backing_file_duration(dwseconds : UInt32) : HRESULT
    @lpVtbl.value.set_backing_file_duration.unsafe_as(Proc(UInt32, HRESULT)).call(dwseconds)
  end
  def get_backing_file_duration(pdwseconds : UInt32*) : HRESULT
    @lpVtbl.value.get_backing_file_duration.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwseconds)
  end
end
struct LibWin32::IStreamBufferConfigure2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_directory(pszdirectoryname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_directory.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(pszdirectoryname)
  end
  def get_directory(ppszdirectoryname : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_directory.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(ppszdirectoryname)
  end
  def set_backing_file_count(dwmin : UInt32, dwmax : UInt32) : HRESULT
    @lpVtbl.value.set_backing_file_count.unsafe_as(Proc(UInt32, UInt32, HRESULT)).call(dwmin, dwmax)
  end
  def get_backing_file_count(pdwmin : UInt32*, pdwmax : UInt32*) : HRESULT
    @lpVtbl.value.get_backing_file_count.unsafe_as(Proc(UInt32*, UInt32*, HRESULT)).call(pdwmin, pdwmax)
  end
  def set_backing_file_duration(dwseconds : UInt32) : HRESULT
    @lpVtbl.value.set_backing_file_duration.unsafe_as(Proc(UInt32, HRESULT)).call(dwseconds)
  end
  def get_backing_file_duration(pdwseconds : UInt32*) : HRESULT
    @lpVtbl.value.get_backing_file_duration.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwseconds)
  end
  def set_multiplexed_packet_size(cbbytesperpacket : UInt32) : HRESULT
    @lpVtbl.value.set_multiplexed_packet_size.unsafe_as(Proc(UInt32, HRESULT)).call(cbbytesperpacket)
  end
  def get_multiplexed_packet_size(pcbbytesperpacket : UInt32*) : HRESULT
    @lpVtbl.value.get_multiplexed_packet_size.unsafe_as(Proc(UInt32*, HRESULT)).call(pcbbytesperpacket)
  end
  def set_ff_transition_rates(dwmaxfullframerate : UInt32, dwmaxnonskippingrate : UInt32) : HRESULT
    @lpVtbl.value.set_ff_transition_rates.unsafe_as(Proc(UInt32, UInt32, HRESULT)).call(dwmaxfullframerate, dwmaxnonskippingrate)
  end
  def get_ff_transition_rates(pdwmaxfullframerate : UInt32*, pdwmaxnonskippingrate : UInt32*) : HRESULT
    @lpVtbl.value.get_ff_transition_rates.unsafe_as(Proc(UInt32*, UInt32*, HRESULT)).call(pdwmaxfullframerate, pdwmaxnonskippingrate)
  end
end
struct LibWin32::IStreamBufferConfigure3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_directory(pszdirectoryname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_directory.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(pszdirectoryname)
  end
  def get_directory(ppszdirectoryname : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_directory.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(ppszdirectoryname)
  end
  def set_backing_file_count(dwmin : UInt32, dwmax : UInt32) : HRESULT
    @lpVtbl.value.set_backing_file_count.unsafe_as(Proc(UInt32, UInt32, HRESULT)).call(dwmin, dwmax)
  end
  def get_backing_file_count(pdwmin : UInt32*, pdwmax : UInt32*) : HRESULT
    @lpVtbl.value.get_backing_file_count.unsafe_as(Proc(UInt32*, UInt32*, HRESULT)).call(pdwmin, pdwmax)
  end
  def set_backing_file_duration(dwseconds : UInt32) : HRESULT
    @lpVtbl.value.set_backing_file_duration.unsafe_as(Proc(UInt32, HRESULT)).call(dwseconds)
  end
  def get_backing_file_duration(pdwseconds : UInt32*) : HRESULT
    @lpVtbl.value.get_backing_file_duration.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwseconds)
  end
  def set_multiplexed_packet_size(cbbytesperpacket : UInt32) : HRESULT
    @lpVtbl.value.set_multiplexed_packet_size.unsafe_as(Proc(UInt32, HRESULT)).call(cbbytesperpacket)
  end
  def get_multiplexed_packet_size(pcbbytesperpacket : UInt32*) : HRESULT
    @lpVtbl.value.get_multiplexed_packet_size.unsafe_as(Proc(UInt32*, HRESULT)).call(pcbbytesperpacket)
  end
  def set_ff_transition_rates(dwmaxfullframerate : UInt32, dwmaxnonskippingrate : UInt32) : HRESULT
    @lpVtbl.value.set_ff_transition_rates.unsafe_as(Proc(UInt32, UInt32, HRESULT)).call(dwmaxfullframerate, dwmaxnonskippingrate)
  end
  def get_ff_transition_rates(pdwmaxfullframerate : UInt32*, pdwmaxnonskippingrate : UInt32*) : HRESULT
    @lpVtbl.value.get_ff_transition_rates.unsafe_as(Proc(UInt32*, UInt32*, HRESULT)).call(pdwmaxfullframerate, pdwmaxnonskippingrate)
  end
  def set_start_rec_config(fstartstopscur : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_start_rec_config.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fstartstopscur)
  end
  def get_start_rec_config(pfstartstopscur : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_start_rec_config.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pfstartstopscur)
  end
  def set_namespace(psznamespace : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_namespace.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(psznamespace)
  end
  def get_namespace(ppsznamespace : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_namespace.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(ppsznamespace)
  end
end
struct LibWin32::IStreamBufferMediaSeeking
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_capabilities(pcapabilities : UInt32*) : HRESULT
    @lpVtbl.value.get_capabilities.unsafe_as(Proc(UInt32*, HRESULT)).call(pcapabilities)
  end
  def check_capabilities(pcapabilities : UInt32*) : HRESULT
    @lpVtbl.value.check_capabilities.unsafe_as(Proc(UInt32*, HRESULT)).call(pcapabilities)
  end
  def is_format_supported(pformat : Guid*) : HRESULT
    @lpVtbl.value.is_format_supported.unsafe_as(Proc(Guid*, HRESULT)).call(pformat)
  end
  def query_preferred_format(pformat : Guid*) : HRESULT
    @lpVtbl.value.query_preferred_format.unsafe_as(Proc(Guid*, HRESULT)).call(pformat)
  end
  def get_time_format(pformat : Guid*) : HRESULT
    @lpVtbl.value.get_time_format.unsafe_as(Proc(Guid*, HRESULT)).call(pformat)
  end
  def is_using_time_format(pformat : Guid*) : HRESULT
    @lpVtbl.value.is_using_time_format.unsafe_as(Proc(Guid*, HRESULT)).call(pformat)
  end
  def set_time_format(pformat : Guid*) : HRESULT
    @lpVtbl.value.set_time_format.unsafe_as(Proc(Guid*, HRESULT)).call(pformat)
  end
  def get_duration(pduration : Int64*) : HRESULT
    @lpVtbl.value.get_duration.unsafe_as(Proc(Int64*, HRESULT)).call(pduration)
  end
  def get_stop_position(pstop : Int64*) : HRESULT
    @lpVtbl.value.get_stop_position.unsafe_as(Proc(Int64*, HRESULT)).call(pstop)
  end
  def get_current_position(pcurrent : Int64*) : HRESULT
    @lpVtbl.value.get_current_position.unsafe_as(Proc(Int64*, HRESULT)).call(pcurrent)
  end
  def convert_time_format(ptarget : Int64*, ptargetformat : Guid*, source : Int64, psourceformat : Guid*) : HRESULT
    @lpVtbl.value.convert_time_format.unsafe_as(Proc(Int64*, Guid*, Int64, Guid*, HRESULT)).call(ptarget, ptargetformat, source, psourceformat)
  end
  def set_positions(pcurrent : Int64*, dwcurrentflags : UInt32, pstop : Int64*, dwstopflags : UInt32) : HRESULT
    @lpVtbl.value.set_positions.unsafe_as(Proc(Int64*, UInt32, Int64*, UInt32, HRESULT)).call(pcurrent, dwcurrentflags, pstop, dwstopflags)
  end
  def get_positions(pcurrent : Int64*, pstop : Int64*) : HRESULT
    @lpVtbl.value.get_positions.unsafe_as(Proc(Int64*, Int64*, HRESULT)).call(pcurrent, pstop)
  end
  def get_available(pearliest : Int64*, platest : Int64*) : HRESULT
    @lpVtbl.value.get_available.unsafe_as(Proc(Int64*, Int64*, HRESULT)).call(pearliest, platest)
  end
  def set_rate(drate : Float64) : HRESULT
    @lpVtbl.value.set_rate.unsafe_as(Proc(Float64, HRESULT)).call(drate)
  end
  def get_rate(pdrate : Float64*) : HRESULT
    @lpVtbl.value.get_rate.unsafe_as(Proc(Float64*, HRESULT)).call(pdrate)
  end
  def get_preroll(pllpreroll : Int64*) : HRESULT
    @lpVtbl.value.get_preroll.unsafe_as(Proc(Int64*, HRESULT)).call(pllpreroll)
  end
end
struct LibWin32::IStreamBufferMediaSeeking2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_capabilities(pcapabilities : UInt32*) : HRESULT
    @lpVtbl.value.get_capabilities.unsafe_as(Proc(UInt32*, HRESULT)).call(pcapabilities)
  end
  def check_capabilities(pcapabilities : UInt32*) : HRESULT
    @lpVtbl.value.check_capabilities.unsafe_as(Proc(UInt32*, HRESULT)).call(pcapabilities)
  end
  def is_format_supported(pformat : Guid*) : HRESULT
    @lpVtbl.value.is_format_supported.unsafe_as(Proc(Guid*, HRESULT)).call(pformat)
  end
  def query_preferred_format(pformat : Guid*) : HRESULT
    @lpVtbl.value.query_preferred_format.unsafe_as(Proc(Guid*, HRESULT)).call(pformat)
  end
  def get_time_format(pformat : Guid*) : HRESULT
    @lpVtbl.value.get_time_format.unsafe_as(Proc(Guid*, HRESULT)).call(pformat)
  end
  def is_using_time_format(pformat : Guid*) : HRESULT
    @lpVtbl.value.is_using_time_format.unsafe_as(Proc(Guid*, HRESULT)).call(pformat)
  end
  def set_time_format(pformat : Guid*) : HRESULT
    @lpVtbl.value.set_time_format.unsafe_as(Proc(Guid*, HRESULT)).call(pformat)
  end
  def get_duration(pduration : Int64*) : HRESULT
    @lpVtbl.value.get_duration.unsafe_as(Proc(Int64*, HRESULT)).call(pduration)
  end
  def get_stop_position(pstop : Int64*) : HRESULT
    @lpVtbl.value.get_stop_position.unsafe_as(Proc(Int64*, HRESULT)).call(pstop)
  end
  def get_current_position(pcurrent : Int64*) : HRESULT
    @lpVtbl.value.get_current_position.unsafe_as(Proc(Int64*, HRESULT)).call(pcurrent)
  end
  def convert_time_format(ptarget : Int64*, ptargetformat : Guid*, source : Int64, psourceformat : Guid*) : HRESULT
    @lpVtbl.value.convert_time_format.unsafe_as(Proc(Int64*, Guid*, Int64, Guid*, HRESULT)).call(ptarget, ptargetformat, source, psourceformat)
  end
  def set_positions(pcurrent : Int64*, dwcurrentflags : UInt32, pstop : Int64*, dwstopflags : UInt32) : HRESULT
    @lpVtbl.value.set_positions.unsafe_as(Proc(Int64*, UInt32, Int64*, UInt32, HRESULT)).call(pcurrent, dwcurrentflags, pstop, dwstopflags)
  end
  def get_positions(pcurrent : Int64*, pstop : Int64*) : HRESULT
    @lpVtbl.value.get_positions.unsafe_as(Proc(Int64*, Int64*, HRESULT)).call(pcurrent, pstop)
  end
  def get_available(pearliest : Int64*, platest : Int64*) : HRESULT
    @lpVtbl.value.get_available.unsafe_as(Proc(Int64*, Int64*, HRESULT)).call(pearliest, platest)
  end
  def set_rate(drate : Float64) : HRESULT
    @lpVtbl.value.set_rate.unsafe_as(Proc(Float64, HRESULT)).call(drate)
  end
  def get_rate(pdrate : Float64*) : HRESULT
    @lpVtbl.value.get_rate.unsafe_as(Proc(Float64*, HRESULT)).call(pdrate)
  end
  def get_preroll(pllpreroll : Int64*) : HRESULT
    @lpVtbl.value.get_preroll.unsafe_as(Proc(Int64*, HRESULT)).call(pllpreroll)
  end
  def set_rate_ex(drate : Float64, dwframespersec : UInt32) : HRESULT
    @lpVtbl.value.set_rate_ex.unsafe_as(Proc(Float64, UInt32, HRESULT)).call(drate, dwframespersec)
  end
end
struct LibWin32::IStreamBufferDataCounters
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_data(ppindata : SBE_PIN_DATA*) : HRESULT
    @lpVtbl.value.get_data.unsafe_as(Proc(SBE_PIN_DATA*, HRESULT)).call(ppindata)
  end
  def reset_data : HRESULT
    @lpVtbl.value.reset_data.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::ISBE2GlobalEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_event(idevt : Guid*, param1 : UInt32, param2 : UInt32, param3 : UInt32, param4 : UInt32, pspanning : LibC::BOOL*, pcb : UInt32*, pb : UInt8*) : HRESULT
    @lpVtbl.value.get_event.unsafe_as(Proc(Guid*, UInt32, UInt32, UInt32, UInt32, LibC::BOOL*, UInt32*, UInt8*, HRESULT)).call(idevt, param1, param2, param3, param4, pspanning, pcb, pb)
  end
end
struct LibWin32::ISBE2GlobalEvent2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_event(idevt : Guid*, param1 : UInt32, param2 : UInt32, param3 : UInt32, param4 : UInt32, pspanning : LibC::BOOL*, pcb : UInt32*, pb : UInt8*) : HRESULT
    @lpVtbl.value.get_event.unsafe_as(Proc(Guid*, UInt32, UInt32, UInt32, UInt32, LibC::BOOL*, UInt32*, UInt8*, HRESULT)).call(idevt, param1, param2, param3, param4, pspanning, pcb, pb)
  end
  def get_event_ex(idevt : Guid*, param1 : UInt32, param2 : UInt32, param3 : UInt32, param4 : UInt32, pspanning : LibC::BOOL*, pcb : UInt32*, pb : UInt8*, pstreamtime : Int64*) : HRESULT
    @lpVtbl.value.get_event_ex.unsafe_as(Proc(Guid*, UInt32, UInt32, UInt32, UInt32, LibC::BOOL*, UInt32*, UInt8*, Int64*, HRESULT)).call(idevt, param1, param2, param3, param4, pspanning, pcb, pb, pstreamtime)
  end
end
struct LibWin32::ISBE2SpanningEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_event(idevt : Guid*, streamid : UInt32, pcb : UInt32*, pb : UInt8*) : HRESULT
    @lpVtbl.value.get_event.unsafe_as(Proc(Guid*, UInt32, UInt32*, UInt8*, HRESULT)).call(idevt, streamid, pcb, pb)
  end
end
struct LibWin32::ISBE2Crossbar
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def enable_default_mode(defaultflags : UInt32) : HRESULT
    @lpVtbl.value.enable_default_mode.unsafe_as(Proc(UInt32, HRESULT)).call(defaultflags)
  end
  def get_initial_profile(ppprofile : ISBE2MediaTypeProfile*) : HRESULT
    @lpVtbl.value.get_initial_profile.unsafe_as(Proc(ISBE2MediaTypeProfile*, HRESULT)).call(ppprofile)
  end
  def set_output_profile(pprofile : ISBE2MediaTypeProfile, pcoutputpins : UInt32*, ppoutputpins : IPin*) : HRESULT
    @lpVtbl.value.set_output_profile.unsafe_as(Proc(ISBE2MediaTypeProfile, UInt32*, IPin*, HRESULT)).call(pprofile, pcoutputpins, ppoutputpins)
  end
  def enum_streams(ppstreams : ISBE2EnumStream*) : HRESULT
    @lpVtbl.value.enum_streams.unsafe_as(Proc(ISBE2EnumStream*, HRESULT)).call(ppstreams)
  end
end
struct LibWin32::ISBE2StreamMap
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def map_stream(stream : UInt32) : HRESULT
    @lpVtbl.value.map_stream.unsafe_as(Proc(UInt32, HRESULT)).call(stream)
  end
  def unmap_stream(stream : UInt32) : HRESULT
    @lpVtbl.value.unmap_stream.unsafe_as(Proc(UInt32, HRESULT)).call(stream)
  end
  def enum_mapped_streams(ppstreams : ISBE2EnumStream*) : HRESULT
    @lpVtbl.value.enum_mapped_streams.unsafe_as(Proc(ISBE2EnumStream*, HRESULT)).call(ppstreams)
  end
end
struct LibWin32::ISBE2EnumStream
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def next(crequest : UInt32, pstreamdesc : SBE2_STREAM_DESC*, pcreceived : UInt32*) : HRESULT
    @lpVtbl.value.next.unsafe_as(Proc(UInt32, SBE2_STREAM_DESC*, UInt32*, HRESULT)).call(crequest, pstreamdesc, pcreceived)
  end
  def skip(crecords : UInt32) : HRESULT
    @lpVtbl.value.skip.unsafe_as(Proc(UInt32, HRESULT)).call(crecords)
  end
  def reset : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(HRESULT)).call
  end
  def clone(ppienumstream : ISBE2EnumStream*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ISBE2EnumStream*, HRESULT)).call(ppienumstream)
  end
end
struct LibWin32::ISBE2MediaTypeProfile
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_stream_count(pcount : UInt32*) : HRESULT
    @lpVtbl.value.get_stream_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pcount)
  end
  def get_stream(index : UInt32, ppmediatype : AM_MEDIA_TYPE**) : HRESULT
    @lpVtbl.value.get_stream.unsafe_as(Proc(UInt32, AM_MEDIA_TYPE**, HRESULT)).call(index, ppmediatype)
  end
  def add_stream(pmediatype : AM_MEDIA_TYPE*) : HRESULT
    @lpVtbl.value.add_stream.unsafe_as(Proc(AM_MEDIA_TYPE*, HRESULT)).call(pmediatype)
  end
  def delete_stream(index : UInt32) : HRESULT
    @lpVtbl.value.delete_stream.unsafe_as(Proc(UInt32, HRESULT)).call(index)
  end
end
struct LibWin32::ISBE2FileScan
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def repair_file(filename : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.repair_file.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(filename)
  end
end
struct LibWin32::IMpeg2TableFilter
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def add_pid(p : UInt16) : HRESULT
    @lpVtbl.value.add_pid.unsafe_as(Proc(UInt16, HRESULT)).call(p)
  end
  def add_table(p : UInt16, t : UInt8) : HRESULT
    @lpVtbl.value.add_table.unsafe_as(Proc(UInt16, UInt8, HRESULT)).call(p, t)
  end
  def add_extension(p : UInt16, t : UInt8, e : UInt16) : HRESULT
    @lpVtbl.value.add_extension.unsafe_as(Proc(UInt16, UInt8, UInt16, HRESULT)).call(p, t, e)
  end
  def remove_pid(p : UInt16) : HRESULT
    @lpVtbl.value.remove_pid.unsafe_as(Proc(UInt16, HRESULT)).call(p)
  end
  def remove_table(p : UInt16, t : UInt8) : HRESULT
    @lpVtbl.value.remove_table.unsafe_as(Proc(UInt16, UInt8, HRESULT)).call(p, t)
  end
  def remove_extension(p : UInt16, t : UInt8, e : UInt16) : HRESULT
    @lpVtbl.value.remove_extension.unsafe_as(Proc(UInt16, UInt8, UInt16, HRESULT)).call(p, t, e)
  end
end
struct LibWin32::IMpeg2Data
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_section(pid : UInt16, tid : UInt8, pfilter : MPEG2_FILTER*, dwtimeout : UInt32, ppsectionlist : ISectionList*) : HRESULT
    @lpVtbl.value.get_section.unsafe_as(Proc(UInt16, UInt8, MPEG2_FILTER*, UInt32, ISectionList*, HRESULT)).call(pid, tid, pfilter, dwtimeout, ppsectionlist)
  end
  def get_table(pid : UInt16, tid : UInt8, pfilter : MPEG2_FILTER*, dwtimeout : UInt32, ppsectionlist : ISectionList*) : HRESULT
    @lpVtbl.value.get_table.unsafe_as(Proc(UInt16, UInt8, MPEG2_FILTER*, UInt32, ISectionList*, HRESULT)).call(pid, tid, pfilter, dwtimeout, ppsectionlist)
  end
  def get_stream_of_sections(pid : UInt16, tid : UInt8, pfilter : MPEG2_FILTER*, hdatareadyevent : LibC::HANDLE, ppmpegstream : IMpeg2Stream*) : HRESULT
    @lpVtbl.value.get_stream_of_sections.unsafe_as(Proc(UInt16, UInt8, MPEG2_FILTER*, LibC::HANDLE, IMpeg2Stream*, HRESULT)).call(pid, tid, pfilter, hdatareadyevent, ppmpegstream)
  end
end
struct LibWin32::ISectionList
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(requesttype : MPEG_REQUEST_TYPE, pmpeg2data : IMpeg2Data, pcontext : MPEG_CONTEXT*, pid : UInt16, tid : UInt8, pfilter : MPEG2_FILTER*, timeout : UInt32, hdoneevent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(MPEG_REQUEST_TYPE, IMpeg2Data, MPEG_CONTEXT*, UInt16, UInt8, MPEG2_FILTER*, UInt32, LibC::HANDLE, HRESULT)).call(requesttype, pmpeg2data, pcontext, pid, tid, pfilter, timeout, hdoneevent)
  end
  def initialize_with_raw_sections(pmplsections : MPEG_PACKET_LIST*) : HRESULT
    @lpVtbl.value.initialize_with_raw_sections.unsafe_as(Proc(MPEG_PACKET_LIST*, HRESULT)).call(pmplsections)
  end
  def cancel_pending_request : HRESULT
    @lpVtbl.value.cancel_pending_request.unsafe_as(Proc(HRESULT)).call
  end
  def get_number_of_sections(pcount : UInt16*) : HRESULT
    @lpVtbl.value.get_number_of_sections.unsafe_as(Proc(UInt16*, HRESULT)).call(pcount)
  end
  def get_section_data(sectionnumber : UInt16, pdwrawpacketlength : UInt32*, ppsection : SECTION**) : HRESULT
    @lpVtbl.value.get_section_data.unsafe_as(Proc(UInt16, UInt32*, SECTION**, HRESULT)).call(sectionnumber, pdwrawpacketlength, ppsection)
  end
  def get_program_identifier(ppid : UInt16*) : HRESULT
    @lpVtbl.value.get_program_identifier.unsafe_as(Proc(UInt16*, HRESULT)).call(ppid)
  end
  def get_table_identifier(ptableid : UInt8*) : HRESULT
    @lpVtbl.value.get_table_identifier.unsafe_as(Proc(UInt8*, HRESULT)).call(ptableid)
  end
end
struct LibWin32::IMpeg2Stream
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(requesttype : MPEG_REQUEST_TYPE, pmpeg2data : IMpeg2Data, pcontext : MPEG_CONTEXT*, pid : UInt16, tid : UInt8, pfilter : MPEG2_FILTER*, hdatareadyevent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(MPEG_REQUEST_TYPE, IMpeg2Data, MPEG_CONTEXT*, UInt16, UInt8, MPEG2_FILTER*, LibC::HANDLE, HRESULT)).call(requesttype, pmpeg2data, pcontext, pid, tid, pfilter, hdatareadyevent)
  end
  def supply_data_buffer(pstreambuffer : MPEG_STREAM_BUFFER*) : HRESULT
    @lpVtbl.value.supply_data_buffer.unsafe_as(Proc(MPEG_STREAM_BUFFER*, HRESULT)).call(pstreambuffer)
  end
end
struct LibWin32::IGenericDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(pbdesc : UInt8*, bcount : Int32) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(UInt8*, Int32, HRESULT)).call(pbdesc, bcount)
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_body(ppbval : UInt8**) : HRESULT
    @lpVtbl.value.get_body.unsafe_as(Proc(UInt8**, HRESULT)).call(ppbval)
  end
end
struct LibWin32::IGenericDescriptor2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(pbdesc : UInt8*, bcount : Int32) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(UInt8*, Int32, HRESULT)).call(pbdesc, bcount)
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_body(ppbval : UInt8**) : HRESULT
    @lpVtbl.value.get_body.unsafe_as(Proc(UInt8**, HRESULT)).call(ppbval)
  end
  def initialize2(pbdesc : UInt8*, wcount : UInt16) : HRESULT
    @lpVtbl.value.initialize2.unsafe_as(Proc(UInt8*, UInt16, HRESULT)).call(pbdesc, wcount)
  end
  def get_length2(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_length2.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
end
struct LibWin32::IPAT
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList, pmpegdata : IMpeg2Data) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, IMpeg2Data, HRESULT)).call(psectionlist, pmpegdata)
  end
  def get_transport_stream_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_transport_stream_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_version_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_version_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_records(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_record_program_number(dwindex : UInt32, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_program_number.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwindex, pwval)
  end
  def get_record_program_map_pid(dwindex : UInt32, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_program_map_pid.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwindex, pwval)
  end
  def find_record_program_map_pid(wprogramnumber : UInt16, pwval : UInt16*) : HRESULT
    @lpVtbl.value.find_record_program_map_pid.unsafe_as(Proc(UInt16, UInt16*, HRESULT)).call(wprogramnumber, pwval)
  end
  def register_for_next_table(hnexttableavailable : LibC::HANDLE) : HRESULT
    @lpVtbl.value.register_for_next_table.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hnexttableavailable)
  end
  def get_next_table(pppat : IPAT*) : HRESULT
    @lpVtbl.value.get_next_table.unsafe_as(Proc(IPAT*, HRESULT)).call(pppat)
  end
  def register_for_when_current(hnexttableiscurrent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.register_for_when_current.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hnexttableiscurrent)
  end
  def convert_next_to_current : HRESULT
    @lpVtbl.value.convert_next_to_current.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::ICAT
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList, pmpegdata : IMpeg2Data) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, IMpeg2Data, HRESULT)).call(psectionlist, pmpegdata)
  end
  def get_version_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_version_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_table_descriptors(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_table_descriptors.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_table_descriptor_by_index(dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_table_descriptor_by_index.unsafe_as(Proc(UInt32, IGenericDescriptor*, HRESULT)).call(dwindex, ppdescriptor)
  end
  def get_table_descriptor_by_tag(btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_table_descriptor_by_tag.unsafe_as(Proc(UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(btag, pdwcookie, ppdescriptor)
  end
  def register_for_next_table(hnexttableavailable : LibC::HANDLE) : HRESULT
    @lpVtbl.value.register_for_next_table.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hnexttableavailable)
  end
  def get_next_table(dwtimeout : UInt32, ppcat : ICAT*) : HRESULT
    @lpVtbl.value.get_next_table.unsafe_as(Proc(UInt32, ICAT*, HRESULT)).call(dwtimeout, ppcat)
  end
  def register_for_when_current(hnexttableiscurrent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.register_for_when_current.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hnexttableiscurrent)
  end
  def convert_next_to_current : HRESULT
    @lpVtbl.value.convert_next_to_current.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IPMT
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList, pmpegdata : IMpeg2Data) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, IMpeg2Data, HRESULT)).call(psectionlist, pmpegdata)
  end
  def get_program_number(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_program_number.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_version_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_version_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_pcr_pid(ppidval : UInt16*) : HRESULT
    @lpVtbl.value.get_pcr_pid.unsafe_as(Proc(UInt16*, HRESULT)).call(ppidval)
  end
  def get_count_of_table_descriptors(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_table_descriptors.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_table_descriptor_by_index(dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_table_descriptor_by_index.unsafe_as(Proc(UInt32, IGenericDescriptor*, HRESULT)).call(dwindex, ppdescriptor)
  end
  def get_table_descriptor_by_tag(btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_table_descriptor_by_tag.unsafe_as(Proc(UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(btag, pdwcookie, ppdescriptor)
  end
  def get_count_of_records(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_record_stream_type(dwrecordindex : UInt32, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_stream_type.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(dwrecordindex, pbval)
  end
  def get_record_elementary_pid(dwrecordindex : UInt32, ppidval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_elementary_pid.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwrecordindex, ppidval)
  end
  def get_record_count_of_descriptors(dwrecordindex : UInt32, pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_record_count_of_descriptors.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(dwrecordindex, pdwval)
  end
  def get_record_descriptor_by_index(dwrecordindex : UInt32, dwdescindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_index.unsafe_as(Proc(UInt32, UInt32, IGenericDescriptor*, HRESULT)).call(dwrecordindex, dwdescindex, ppdescriptor)
  end
  def get_record_descriptor_by_tag(dwrecordindex : UInt32, btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_tag.unsafe_as(Proc(UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(dwrecordindex, btag, pdwcookie, ppdescriptor)
  end
  def query_service_gateway_info(ppdsmcclist : DSMCC_ELEMENT**, puicount : UInt32*) : HRESULT
    @lpVtbl.value.query_service_gateway_info.unsafe_as(Proc(DSMCC_ELEMENT**, UInt32*, HRESULT)).call(ppdsmcclist, puicount)
  end
  def query_mpe_info(ppmpelist : MPE_ELEMENT**, puicount : UInt32*) : HRESULT
    @lpVtbl.value.query_mpe_info.unsafe_as(Proc(MPE_ELEMENT**, UInt32*, HRESULT)).call(ppmpelist, puicount)
  end
  def register_for_next_table(hnexttableavailable : LibC::HANDLE) : HRESULT
    @lpVtbl.value.register_for_next_table.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hnexttableavailable)
  end
  def get_next_table(pppmt : IPMT*) : HRESULT
    @lpVtbl.value.get_next_table.unsafe_as(Proc(IPMT*, HRESULT)).call(pppmt)
  end
  def register_for_when_current(hnexttableiscurrent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.register_for_when_current.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hnexttableiscurrent)
  end
  def convert_next_to_current : HRESULT
    @lpVtbl.value.convert_next_to_current.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::ITSDT
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList, pmpegdata : IMpeg2Data) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, IMpeg2Data, HRESULT)).call(psectionlist, pmpegdata)
  end
  def get_version_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_version_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_table_descriptors(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_table_descriptors.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_table_descriptor_by_index(dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_table_descriptor_by_index.unsafe_as(Proc(UInt32, IGenericDescriptor*, HRESULT)).call(dwindex, ppdescriptor)
  end
  def get_table_descriptor_by_tag(btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_table_descriptor_by_tag.unsafe_as(Proc(UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(btag, pdwcookie, ppdescriptor)
  end
  def register_for_next_table(hnexttableavailable : LibC::HANDLE) : HRESULT
    @lpVtbl.value.register_for_next_table.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hnexttableavailable)
  end
  def get_next_table(pptsdt : ITSDT*) : HRESULT
    @lpVtbl.value.get_next_table.unsafe_as(Proc(ITSDT*, HRESULT)).call(pptsdt)
  end
  def register_for_when_current(hnexttableiscurrent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.register_for_when_current.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hnexttableiscurrent)
  end
  def convert_next_to_current : HRESULT
    @lpVtbl.value.convert_next_to_current.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IPSITables
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_table(dwtsid : UInt32, dwtid_pid : UInt32, dwhashedver : UInt32, dwpara4 : UInt32, ppiunknown : IUnknown*) : HRESULT
    @lpVtbl.value.get_table.unsafe_as(Proc(UInt32, UInt32, UInt32, UInt32, IUnknown*, HRESULT)).call(dwtsid, dwtid_pid, dwhashedver, dwpara4, ppiunknown)
  end
end
struct LibWin32::IAtscPsipParser
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(punkmpeg2data : IUnknown) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IUnknown, HRESULT)).call(punkmpeg2data)
  end
  def get_pat(pppat : IPAT*) : HRESULT
    @lpVtbl.value.get_pat.unsafe_as(Proc(IPAT*, HRESULT)).call(pppat)
  end
  def get_cat(dwtimeout : UInt32, ppcat : ICAT*) : HRESULT
    @lpVtbl.value.get_cat.unsafe_as(Proc(UInt32, ICAT*, HRESULT)).call(dwtimeout, ppcat)
  end
  def get_pmt(pid : UInt16, pwprogramnumber : UInt16*, pppmt : IPMT*) : HRESULT
    @lpVtbl.value.get_pmt.unsafe_as(Proc(UInt16, UInt16*, IPMT*, HRESULT)).call(pid, pwprogramnumber, pppmt)
  end
  def get_tsdt(pptsdt : ITSDT*) : HRESULT
    @lpVtbl.value.get_tsdt.unsafe_as(Proc(ITSDT*, HRESULT)).call(pptsdt)
  end
  def get_mgt(ppmgt : IATSC_MGT*) : HRESULT
    @lpVtbl.value.get_mgt.unsafe_as(Proc(IATSC_MGT*, HRESULT)).call(ppmgt)
  end
  def get_vct(tableid : UInt8, fgetnexttable : LibC::BOOL, ppvct : IATSC_VCT*) : HRESULT
    @lpVtbl.value.get_vct.unsafe_as(Proc(UInt8, LibC::BOOL, IATSC_VCT*, HRESULT)).call(tableid, fgetnexttable, ppvct)
  end
  def get_eit(pid : UInt16, pwsourceid : UInt16*, dwtimeout : UInt32, ppeit : IATSC_EIT*) : HRESULT
    @lpVtbl.value.get_eit.unsafe_as(Proc(UInt16, UInt16*, UInt32, IATSC_EIT*, HRESULT)).call(pid, pwsourceid, dwtimeout, ppeit)
  end
  def get_ett(pid : UInt16, wsourceid : UInt16*, pweventid : UInt16*, ppett : IATSC_ETT*) : HRESULT
    @lpVtbl.value.get_ett.unsafe_as(Proc(UInt16, UInt16*, UInt16*, IATSC_ETT*, HRESULT)).call(pid, wsourceid, pweventid, ppett)
  end
  def get_stt(ppstt : IATSC_STT*) : HRESULT
    @lpVtbl.value.get_stt.unsafe_as(Proc(IATSC_STT*, HRESULT)).call(ppstt)
  end
  def get_eas(pid : UInt16, ppeas : ISCTE_EAS*) : HRESULT
    @lpVtbl.value.get_eas.unsafe_as(Proc(UInt16, ISCTE_EAS*, HRESULT)).call(pid, ppeas)
  end
end
struct LibWin32::IATSC_MGT
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList, pmpegdata : IMpeg2Data) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, IMpeg2Data, HRESULT)).call(psectionlist, pmpegdata)
  end
  def get_version_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_version_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_protocol_version(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_protocol_version.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_records(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_record_type(dwrecordindex : UInt32, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_type.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwrecordindex, pwval)
  end
  def get_record_type_pid(dwrecordindex : UInt32, ppidval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_type_pid.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwrecordindex, ppidval)
  end
  def get_record_version_number(dwrecordindex : UInt32, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_version_number.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(dwrecordindex, pbval)
  end
  def get_record_count_of_descriptors(dwrecordindex : UInt32, pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_record_count_of_descriptors.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(dwrecordindex, pdwval)
  end
  def get_record_descriptor_by_index(dwrecordindex : UInt32, dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_index.unsafe_as(Proc(UInt32, UInt32, IGenericDescriptor*, HRESULT)).call(dwrecordindex, dwindex, ppdescriptor)
  end
  def get_record_descriptor_by_tag(dwrecordindex : UInt32, btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_tag.unsafe_as(Proc(UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(dwrecordindex, btag, pdwcookie, ppdescriptor)
  end
  def get_count_of_table_descriptors(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_table_descriptors.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_table_descriptor_by_index(dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_table_descriptor_by_index.unsafe_as(Proc(UInt32, IGenericDescriptor*, HRESULT)).call(dwindex, ppdescriptor)
  end
  def get_table_descriptor_by_tag(btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_table_descriptor_by_tag.unsafe_as(Proc(UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(btag, pdwcookie, ppdescriptor)
  end
end
struct LibWin32::IATSC_VCT
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList, pmpegdata : IMpeg2Data) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, IMpeg2Data, HRESULT)).call(psectionlist, pmpegdata)
  end
  def get_version_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_version_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_transport_stream_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_transport_stream_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_protocol_version(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_protocol_version.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_records(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_record_name(dwrecordindex : UInt32, pwsname : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_record_name.unsafe_as(Proc(UInt32, LibC::LPWSTR*, HRESULT)).call(dwrecordindex, pwsname)
  end
  def get_record_major_channel_number(dwrecordindex : UInt32, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_major_channel_number.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwrecordindex, pwval)
  end
  def get_record_minor_channel_number(dwrecordindex : UInt32, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_minor_channel_number.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwrecordindex, pwval)
  end
  def get_record_modulation_mode(dwrecordindex : UInt32, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_modulation_mode.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(dwrecordindex, pbval)
  end
  def get_record_carrier_frequency(dwrecordindex : UInt32, pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_record_carrier_frequency.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(dwrecordindex, pdwval)
  end
  def get_record_transport_stream_id(dwrecordindex : UInt32, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_transport_stream_id.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwrecordindex, pwval)
  end
  def get_record_program_number(dwrecordindex : UInt32, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_program_number.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwrecordindex, pwval)
  end
  def get_record_etm_location(dwrecordindex : UInt32, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_etm_location.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(dwrecordindex, pbval)
  end
  def get_record_is_access_controlled_bit_set(dwrecordindex : UInt32, pfval : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_record_is_access_controlled_bit_set.unsafe_as(Proc(UInt32, LibC::BOOL*, HRESULT)).call(dwrecordindex, pfval)
  end
  def get_record_is_hidden_bit_set(dwrecordindex : UInt32, pfval : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_record_is_hidden_bit_set.unsafe_as(Proc(UInt32, LibC::BOOL*, HRESULT)).call(dwrecordindex, pfval)
  end
  def get_record_is_path_select_bit_set(dwrecordindex : UInt32, pfval : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_record_is_path_select_bit_set.unsafe_as(Proc(UInt32, LibC::BOOL*, HRESULT)).call(dwrecordindex, pfval)
  end
  def get_record_is_out_of_band_bit_set(dwrecordindex : UInt32, pfval : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_record_is_out_of_band_bit_set.unsafe_as(Proc(UInt32, LibC::BOOL*, HRESULT)).call(dwrecordindex, pfval)
  end
  def get_record_is_hide_guide_bit_set(dwrecordindex : UInt32, pfval : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_record_is_hide_guide_bit_set.unsafe_as(Proc(UInt32, LibC::BOOL*, HRESULT)).call(dwrecordindex, pfval)
  end
  def get_record_service_type(dwrecordindex : UInt32, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_service_type.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(dwrecordindex, pbval)
  end
  def get_record_source_id(dwrecordindex : UInt32, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_source_id.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwrecordindex, pwval)
  end
  def get_record_count_of_descriptors(dwrecordindex : UInt32, pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_record_count_of_descriptors.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(dwrecordindex, pdwval)
  end
  def get_record_descriptor_by_index(dwrecordindex : UInt32, dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_index.unsafe_as(Proc(UInt32, UInt32, IGenericDescriptor*, HRESULT)).call(dwrecordindex, dwindex, ppdescriptor)
  end
  def get_record_descriptor_by_tag(dwrecordindex : UInt32, btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_tag.unsafe_as(Proc(UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(dwrecordindex, btag, pdwcookie, ppdescriptor)
  end
  def get_count_of_table_descriptors(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_table_descriptors.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_table_descriptor_by_index(dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_table_descriptor_by_index.unsafe_as(Proc(UInt32, IGenericDescriptor*, HRESULT)).call(dwindex, ppdescriptor)
  end
  def get_table_descriptor_by_tag(btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_table_descriptor_by_tag.unsafe_as(Proc(UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(btag, pdwcookie, ppdescriptor)
  end
end
struct LibWin32::IATSC_EIT
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList, pmpegdata : IMpeg2Data) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, IMpeg2Data, HRESULT)).call(psectionlist, pmpegdata)
  end
  def get_version_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_version_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_source_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_source_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_protocol_version(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_protocol_version.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_records(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_record_event_id(dwrecordindex : UInt32, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_event_id.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwrecordindex, pwval)
  end
  def get_record_start_time(dwrecordindex : UInt32, pmdtval : MPEG_DATE_AND_TIME*) : HRESULT
    @lpVtbl.value.get_record_start_time.unsafe_as(Proc(UInt32, MPEG_DATE_AND_TIME*, HRESULT)).call(dwrecordindex, pmdtval)
  end
  def get_record_etm_location(dwrecordindex : UInt32, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_etm_location.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(dwrecordindex, pbval)
  end
  def get_record_duration(dwrecordindex : UInt32, pmdval : MPEG_TIME*) : HRESULT
    @lpVtbl.value.get_record_duration.unsafe_as(Proc(UInt32, MPEG_TIME*, HRESULT)).call(dwrecordindex, pmdval)
  end
  def get_record_title_text(dwrecordindex : UInt32, pdwlength : UInt32*, pptext : UInt8**) : HRESULT
    @lpVtbl.value.get_record_title_text.unsafe_as(Proc(UInt32, UInt32*, UInt8**, HRESULT)).call(dwrecordindex, pdwlength, pptext)
  end
  def get_record_count_of_descriptors(dwrecordindex : UInt32, pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_record_count_of_descriptors.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(dwrecordindex, pdwval)
  end
  def get_record_descriptor_by_index(dwrecordindex : UInt32, dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_index.unsafe_as(Proc(UInt32, UInt32, IGenericDescriptor*, HRESULT)).call(dwrecordindex, dwindex, ppdescriptor)
  end
  def get_record_descriptor_by_tag(dwrecordindex : UInt32, btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_tag.unsafe_as(Proc(UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(dwrecordindex, btag, pdwcookie, ppdescriptor)
  end
end
struct LibWin32::IATSC_ETT
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList, pmpegdata : IMpeg2Data) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, IMpeg2Data, HRESULT)).call(psectionlist, pmpegdata)
  end
  def get_version_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_version_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_protocol_version(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_protocol_version.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_etm_id(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_etm_id.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_extended_message_text(pdwlength : UInt32*, pptext : UInt8**) : HRESULT
    @lpVtbl.value.get_extended_message_text.unsafe_as(Proc(UInt32*, UInt8**, HRESULT)).call(pdwlength, pptext)
  end
end
struct LibWin32::IATSC_STT
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList, pmpegdata : IMpeg2Data) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, IMpeg2Data, HRESULT)).call(psectionlist, pmpegdata)
  end
  def get_protocol_version(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_protocol_version.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_system_time(pmdtsystemtime : MPEG_DATE_AND_TIME*) : HRESULT
    @lpVtbl.value.get_system_time.unsafe_as(Proc(MPEG_DATE_AND_TIME*, HRESULT)).call(pmdtsystemtime)
  end
  def get_gps_utc_offset(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_gps_utc_offset.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_daylight_savings(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_daylight_savings.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_count_of_table_descriptors(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_table_descriptors.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_table_descriptor_by_index(dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_table_descriptor_by_index.unsafe_as(Proc(UInt32, IGenericDescriptor*, HRESULT)).call(dwindex, ppdescriptor)
  end
  def get_table_descriptor_by_tag(btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_table_descriptor_by_tag.unsafe_as(Proc(UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(btag, pdwcookie, ppdescriptor)
  end
end
struct LibWin32::ISCTE_EAS
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList, pmpegdata : IMpeg2Data) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, IMpeg2Data, HRESULT)).call(psectionlist, pmpegdata)
  end
  def get_version_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_version_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_sequency_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_sequency_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_protocol_version(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_protocol_version.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_eas_event_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_eas_event_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_originator_code(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_originator_code.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_eas_event_code_len(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_eas_event_code_len.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_eas_event_code(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_eas_event_code.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_raw_nature_of_activation_text_len(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_raw_nature_of_activation_text_len.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_raw_nature_of_activation_text(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_raw_nature_of_activation_text.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_nature_of_activation_text(bstris0639code : UInt8*, pbstrstring : UInt8**) : HRESULT
    @lpVtbl.value.get_nature_of_activation_text.unsafe_as(Proc(UInt8*, UInt8**, HRESULT)).call(bstris0639code, pbstrstring)
  end
  def get_time_remaining(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_time_remaining.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_start_time(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_start_time.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_duration(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_duration.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_alert_priority(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_alert_priority.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_details_oob_source_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_details_oob_source_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_details_major(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_details_major.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_details_minor(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_details_minor.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_details_audio_oob_source_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_details_audio_oob_source_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_alert_text(bstris0639code : UInt8*, pbstrstring : UInt8**) : HRESULT
    @lpVtbl.value.get_alert_text.unsafe_as(Proc(UInt8*, UInt8**, HRESULT)).call(bstris0639code, pbstrstring)
  end
  def get_raw_alert_text_len(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_raw_alert_text_len.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_raw_alert_text(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_raw_alert_text.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_location_count(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_location_count.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_location_codes(bindex : UInt8, pbstate : UInt8*, pbcountysubdivision : UInt8*, pwcounty : UInt16*) : HRESULT
    @lpVtbl.value.get_location_codes.unsafe_as(Proc(UInt8, UInt8*, UInt8*, UInt16*, HRESULT)).call(bindex, pbstate, pbcountysubdivision, pwcounty)
  end
  def get_exception_count(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_exception_count.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_exception_service(bindex : UInt8, pbibref : UInt8*, pwfirst : UInt16*, pwsecond : UInt16*) : HRESULT
    @lpVtbl.value.get_exception_service.unsafe_as(Proc(UInt8, UInt8*, UInt16*, UInt16*, HRESULT)).call(bindex, pbibref, pwfirst, pwsecond)
  end
  def get_count_of_table_descriptors(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_table_descriptors.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_table_descriptor_by_index(dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_table_descriptor_by_index.unsafe_as(Proc(UInt32, IGenericDescriptor*, HRESULT)).call(dwindex, ppdescriptor)
  end
  def get_table_descriptor_by_tag(btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_table_descriptor_by_tag.unsafe_as(Proc(UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(btag, pdwcookie, ppdescriptor)
  end
end
struct LibWin32::IAtscContentAdvisoryDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_rating_region_count(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_rating_region_count.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_record_rating_region(bindex : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_rating_region.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(bindex, pbval)
  end
  def get_record_rated_dimensions(bindex : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_rated_dimensions.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(bindex, pbval)
  end
  def get_record_rating_dimension(bindexouter : UInt8, bindexinner : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_rating_dimension.unsafe_as(Proc(UInt8, UInt8, UInt8*, HRESULT)).call(bindexouter, bindexinner, pbval)
  end
  def get_record_rating_value(bindexouter : UInt8, bindexinner : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_rating_value.unsafe_as(Proc(UInt8, UInt8, UInt8*, HRESULT)).call(bindexouter, bindexinner, pbval)
  end
  def get_record_rating_description_text(bindex : UInt8, pblength : UInt8*, pptext : UInt8**) : HRESULT
    @lpVtbl.value.get_record_rating_description_text.unsafe_as(Proc(UInt8, UInt8*, UInt8**, HRESULT)).call(bindex, pblength, pptext)
  end
end
struct LibWin32::ICaptionServiceDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_number_of_services(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_number_of_services.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_language_code(bindex : UInt8, langcode : UInt8*) : HRESULT
    @lpVtbl.value.get_language_code.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(bindex, langcode)
  end
  def get_caption_service_number(bindex : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_caption_service_number.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(bindex, pbval)
  end
  def get_cc_type(bindex : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_cc_type.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(bindex, pbval)
  end
  def get_easy_reader(bindex : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_easy_reader.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(bindex, pbval)
  end
  def get_wide_aspect_ratio(bindex : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_wide_aspect_ratio.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(bindex, pbval)
  end
end
struct LibWin32::IServiceLocationDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_pcr_pid(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_pcr_pid.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_number_of_elements(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_number_of_elements.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_element_stream_type(bindex : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_element_stream_type.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(bindex, pbval)
  end
  def get_element_pid(bindex : UInt8, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_element_pid.unsafe_as(Proc(UInt8, UInt16*, HRESULT)).call(bindex, pwval)
  end
  def get_element_language_code(bindex : UInt8, langcode : UInt8*) : HRESULT
    @lpVtbl.value.get_element_language_code.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(bindex, langcode)
  end
end
struct LibWin32::IAttributeSet
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_attrib(guidattribute : Guid, pbattribute : UInt8*, dwattributelength : UInt32) : HRESULT
    @lpVtbl.value.set_attrib.unsafe_as(Proc(Guid, UInt8*, UInt32, HRESULT)).call(guidattribute, pbattribute, dwattributelength)
  end
end
struct LibWin32::IAttributeGet
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_count(plcount : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(plcount)
  end
  def get_attrib_indexed(lindex : Int32, pguidattribute : Guid*, pbattribute : UInt8*, pdwattributelength : UInt32*) : HRESULT
    @lpVtbl.value.get_attrib_indexed.unsafe_as(Proc(Int32, Guid*, UInt8*, UInt32*, HRESULT)).call(lindex, pguidattribute, pbattribute, pdwattributelength)
  end
  def get_attrib(guidattribute : Guid, pbattribute : UInt8*, pdwattributelength : UInt32*) : HRESULT
    @lpVtbl.value.get_attrib.unsafe_as(Proc(Guid, UInt8*, UInt32*, HRESULT)).call(guidattribute, pbattribute, pdwattributelength)
  end
end
struct LibWin32::IDvbSiParser
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(punkmpeg2data : IUnknown) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IUnknown, HRESULT)).call(punkmpeg2data)
  end
  def get_pat(pppat : IPAT*) : HRESULT
    @lpVtbl.value.get_pat.unsafe_as(Proc(IPAT*, HRESULT)).call(pppat)
  end
  def get_cat(dwtimeout : UInt32, ppcat : ICAT*) : HRESULT
    @lpVtbl.value.get_cat.unsafe_as(Proc(UInt32, ICAT*, HRESULT)).call(dwtimeout, ppcat)
  end
  def get_pmt(pid : UInt16, pwprogramnumber : UInt16*, pppmt : IPMT*) : HRESULT
    @lpVtbl.value.get_pmt.unsafe_as(Proc(UInt16, UInt16*, IPMT*, HRESULT)).call(pid, pwprogramnumber, pppmt)
  end
  def get_tsdt(pptsdt : ITSDT*) : HRESULT
    @lpVtbl.value.get_tsdt.unsafe_as(Proc(ITSDT*, HRESULT)).call(pptsdt)
  end
  def get_nit(tableid : UInt8, pwnetworkid : UInt16*, ppnit : IDVB_NIT*) : HRESULT
    @lpVtbl.value.get_nit.unsafe_as(Proc(UInt8, UInt16*, IDVB_NIT*, HRESULT)).call(tableid, pwnetworkid, ppnit)
  end
  def get_sdt(tableid : UInt8, pwtransportstreamid : UInt16*, ppsdt : IDVB_SDT*) : HRESULT
    @lpVtbl.value.get_sdt.unsafe_as(Proc(UInt8, UInt16*, IDVB_SDT*, HRESULT)).call(tableid, pwtransportstreamid, ppsdt)
  end
  def get_eit(tableid : UInt8, pwserviceid : UInt16*, ppeit : IDVB_EIT*) : HRESULT
    @lpVtbl.value.get_eit.unsafe_as(Proc(UInt8, UInt16*, IDVB_EIT*, HRESULT)).call(tableid, pwserviceid, ppeit)
  end
  def get_bat(pwbouquetid : UInt16*, ppbat : IDVB_BAT*) : HRESULT
    @lpVtbl.value.get_bat.unsafe_as(Proc(UInt16*, IDVB_BAT*, HRESULT)).call(pwbouquetid, ppbat)
  end
  def get_rst(dwtimeout : UInt32, pprst : IDVB_RST*) : HRESULT
    @lpVtbl.value.get_rst.unsafe_as(Proc(UInt32, IDVB_RST*, HRESULT)).call(dwtimeout, pprst)
  end
  def get_st(pid : UInt16, dwtimeout : UInt32, ppst : IDVB_ST*) : HRESULT
    @lpVtbl.value.get_st.unsafe_as(Proc(UInt16, UInt32, IDVB_ST*, HRESULT)).call(pid, dwtimeout, ppst)
  end
  def get_tdt(pptdt : IDVB_TDT*) : HRESULT
    @lpVtbl.value.get_tdt.unsafe_as(Proc(IDVB_TDT*, HRESULT)).call(pptdt)
  end
  def get_tot(pptot : IDVB_TOT*) : HRESULT
    @lpVtbl.value.get_tot.unsafe_as(Proc(IDVB_TOT*, HRESULT)).call(pptot)
  end
  def get_dit(dwtimeout : UInt32, ppdit : IDVB_DIT*) : HRESULT
    @lpVtbl.value.get_dit.unsafe_as(Proc(UInt32, IDVB_DIT*, HRESULT)).call(dwtimeout, ppdit)
  end
  def get_sit(dwtimeout : UInt32, ppsit : IDVB_SIT*) : HRESULT
    @lpVtbl.value.get_sit.unsafe_as(Proc(UInt32, IDVB_SIT*, HRESULT)).call(dwtimeout, ppsit)
  end
end
struct LibWin32::IDvbSiParser2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(punkmpeg2data : IUnknown) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IUnknown, HRESULT)).call(punkmpeg2data)
  end
  def get_pat(pppat : IPAT*) : HRESULT
    @lpVtbl.value.get_pat.unsafe_as(Proc(IPAT*, HRESULT)).call(pppat)
  end
  def get_cat(dwtimeout : UInt32, ppcat : ICAT*) : HRESULT
    @lpVtbl.value.get_cat.unsafe_as(Proc(UInt32, ICAT*, HRESULT)).call(dwtimeout, ppcat)
  end
  def get_pmt(pid : UInt16, pwprogramnumber : UInt16*, pppmt : IPMT*) : HRESULT
    @lpVtbl.value.get_pmt.unsafe_as(Proc(UInt16, UInt16*, IPMT*, HRESULT)).call(pid, pwprogramnumber, pppmt)
  end
  def get_tsdt(pptsdt : ITSDT*) : HRESULT
    @lpVtbl.value.get_tsdt.unsafe_as(Proc(ITSDT*, HRESULT)).call(pptsdt)
  end
  def get_nit(tableid : UInt8, pwnetworkid : UInt16*, ppnit : IDVB_NIT*) : HRESULT
    @lpVtbl.value.get_nit.unsafe_as(Proc(UInt8, UInt16*, IDVB_NIT*, HRESULT)).call(tableid, pwnetworkid, ppnit)
  end
  def get_sdt(tableid : UInt8, pwtransportstreamid : UInt16*, ppsdt : IDVB_SDT*) : HRESULT
    @lpVtbl.value.get_sdt.unsafe_as(Proc(UInt8, UInt16*, IDVB_SDT*, HRESULT)).call(tableid, pwtransportstreamid, ppsdt)
  end
  def get_eit(tableid : UInt8, pwserviceid : UInt16*, ppeit : IDVB_EIT*) : HRESULT
    @lpVtbl.value.get_eit.unsafe_as(Proc(UInt8, UInt16*, IDVB_EIT*, HRESULT)).call(tableid, pwserviceid, ppeit)
  end
  def get_bat(pwbouquetid : UInt16*, ppbat : IDVB_BAT*) : HRESULT
    @lpVtbl.value.get_bat.unsafe_as(Proc(UInt16*, IDVB_BAT*, HRESULT)).call(pwbouquetid, ppbat)
  end
  def get_rst(dwtimeout : UInt32, pprst : IDVB_RST*) : HRESULT
    @lpVtbl.value.get_rst.unsafe_as(Proc(UInt32, IDVB_RST*, HRESULT)).call(dwtimeout, pprst)
  end
  def get_st(pid : UInt16, dwtimeout : UInt32, ppst : IDVB_ST*) : HRESULT
    @lpVtbl.value.get_st.unsafe_as(Proc(UInt16, UInt32, IDVB_ST*, HRESULT)).call(pid, dwtimeout, ppst)
  end
  def get_tdt(pptdt : IDVB_TDT*) : HRESULT
    @lpVtbl.value.get_tdt.unsafe_as(Proc(IDVB_TDT*, HRESULT)).call(pptdt)
  end
  def get_tot(pptot : IDVB_TOT*) : HRESULT
    @lpVtbl.value.get_tot.unsafe_as(Proc(IDVB_TOT*, HRESULT)).call(pptot)
  end
  def get_dit(dwtimeout : UInt32, ppdit : IDVB_DIT*) : HRESULT
    @lpVtbl.value.get_dit.unsafe_as(Proc(UInt32, IDVB_DIT*, HRESULT)).call(dwtimeout, ppdit)
  end
  def get_sit(dwtimeout : UInt32, ppsit : IDVB_SIT*) : HRESULT
    @lpVtbl.value.get_sit.unsafe_as(Proc(UInt32, IDVB_SIT*, HRESULT)).call(dwtimeout, ppsit)
  end
  def get_eit2(tableid : UInt8, pwserviceid : UInt16*, pbsegment : UInt8*, ppeit : IDVB_EIT2*) : HRESULT
    @lpVtbl.value.get_eit2.unsafe_as(Proc(UInt8, UInt16*, UInt8*, IDVB_EIT2*, HRESULT)).call(tableid, pwserviceid, pbsegment, ppeit)
  end
end
struct LibWin32::IIsdbSiParser2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(punkmpeg2data : IUnknown) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IUnknown, HRESULT)).call(punkmpeg2data)
  end
  def get_pat(pppat : IPAT*) : HRESULT
    @lpVtbl.value.get_pat.unsafe_as(Proc(IPAT*, HRESULT)).call(pppat)
  end
  def get_cat(dwtimeout : UInt32, ppcat : ICAT*) : HRESULT
    @lpVtbl.value.get_cat.unsafe_as(Proc(UInt32, ICAT*, HRESULT)).call(dwtimeout, ppcat)
  end
  def get_pmt(pid : UInt16, pwprogramnumber : UInt16*, pppmt : IPMT*) : HRESULT
    @lpVtbl.value.get_pmt.unsafe_as(Proc(UInt16, UInt16*, IPMT*, HRESULT)).call(pid, pwprogramnumber, pppmt)
  end
  def get_tsdt(pptsdt : ITSDT*) : HRESULT
    @lpVtbl.value.get_tsdt.unsafe_as(Proc(ITSDT*, HRESULT)).call(pptsdt)
  end
  def get_nit(tableid : UInt8, pwnetworkid : UInt16*, ppnit : IDVB_NIT*) : HRESULT
    @lpVtbl.value.get_nit.unsafe_as(Proc(UInt8, UInt16*, IDVB_NIT*, HRESULT)).call(tableid, pwnetworkid, ppnit)
  end
  def get_sdt(tableid : UInt8, pwtransportstreamid : UInt16*, ppsdt : IDVB_SDT*) : HRESULT
    @lpVtbl.value.get_sdt.unsafe_as(Proc(UInt8, UInt16*, IDVB_SDT*, HRESULT)).call(tableid, pwtransportstreamid, ppsdt)
  end
  def get_eit(tableid : UInt8, pwserviceid : UInt16*, ppeit : IDVB_EIT*) : HRESULT
    @lpVtbl.value.get_eit.unsafe_as(Proc(UInt8, UInt16*, IDVB_EIT*, HRESULT)).call(tableid, pwserviceid, ppeit)
  end
  def get_bat(pwbouquetid : UInt16*, ppbat : IDVB_BAT*) : HRESULT
    @lpVtbl.value.get_bat.unsafe_as(Proc(UInt16*, IDVB_BAT*, HRESULT)).call(pwbouquetid, ppbat)
  end
  def get_rst(dwtimeout : UInt32, pprst : IDVB_RST*) : HRESULT
    @lpVtbl.value.get_rst.unsafe_as(Proc(UInt32, IDVB_RST*, HRESULT)).call(dwtimeout, pprst)
  end
  def get_st(pid : UInt16, dwtimeout : UInt32, ppst : IDVB_ST*) : HRESULT
    @lpVtbl.value.get_st.unsafe_as(Proc(UInt16, UInt32, IDVB_ST*, HRESULT)).call(pid, dwtimeout, ppst)
  end
  def get_tdt(pptdt : IDVB_TDT*) : HRESULT
    @lpVtbl.value.get_tdt.unsafe_as(Proc(IDVB_TDT*, HRESULT)).call(pptdt)
  end
  def get_tot(pptot : IDVB_TOT*) : HRESULT
    @lpVtbl.value.get_tot.unsafe_as(Proc(IDVB_TOT*, HRESULT)).call(pptot)
  end
  def get_dit(dwtimeout : UInt32, ppdit : IDVB_DIT*) : HRESULT
    @lpVtbl.value.get_dit.unsafe_as(Proc(UInt32, IDVB_DIT*, HRESULT)).call(dwtimeout, ppdit)
  end
  def get_sit(dwtimeout : UInt32, ppsit : IDVB_SIT*) : HRESULT
    @lpVtbl.value.get_sit.unsafe_as(Proc(UInt32, IDVB_SIT*, HRESULT)).call(dwtimeout, ppsit)
  end
  def get_eit2(tableid : UInt8, pwserviceid : UInt16*, pbsegment : UInt8*, ppeit : IDVB_EIT2*) : HRESULT
    @lpVtbl.value.get_eit2.unsafe_as(Proc(UInt8, UInt16*, UInt8*, IDVB_EIT2*, HRESULT)).call(tableid, pwserviceid, pbsegment, ppeit)
  end
  def get_sdt2(tableid : UInt8, pwtransportstreamid : UInt16*, ppsdt : IISDB_SDT*) : HRESULT
    @lpVtbl.value.get_sdt2.unsafe_as(Proc(UInt8, UInt16*, IISDB_SDT*, HRESULT)).call(tableid, pwtransportstreamid, ppsdt)
  end
  def get_bit(tableid : UInt8, pworiginalnetworkid : UInt16*, ppbit : IISDB_BIT*) : HRESULT
    @lpVtbl.value.get_bit.unsafe_as(Proc(UInt8, UInt16*, IISDB_BIT*, HRESULT)).call(tableid, pworiginalnetworkid, ppbit)
  end
  def get_nbit(tableid : UInt8, pworiginalnetworkid : UInt16*, ppnbit : IISDB_NBIT*) : HRESULT
    @lpVtbl.value.get_nbit.unsafe_as(Proc(UInt8, UInt16*, IISDB_NBIT*, HRESULT)).call(tableid, pworiginalnetworkid, ppnbit)
  end
  def get_ldt(tableid : UInt8, pworiginalserviceid : UInt16*, ppldt : IISDB_LDT*) : HRESULT
    @lpVtbl.value.get_ldt.unsafe_as(Proc(UInt8, UInt16*, IISDB_LDT*, HRESULT)).call(tableid, pworiginalserviceid, ppldt)
  end
  def get_sdtt(tableid : UInt8, pwtableidext : UInt16*, ppsdtt : IISDB_SDTT*) : HRESULT
    @lpVtbl.value.get_sdtt.unsafe_as(Proc(UInt8, UInt16*, IISDB_SDTT*, HRESULT)).call(tableid, pwtableidext, ppsdtt)
  end
  def get_cdt(tableid : UInt8, bsectionnumber : UInt8, pwdownloaddataid : UInt16*, ppcdt : IISDB_CDT*) : HRESULT
    @lpVtbl.value.get_cdt.unsafe_as(Proc(UInt8, UInt8, UInt16*, IISDB_CDT*, HRESULT)).call(tableid, bsectionnumber, pwdownloaddataid, ppcdt)
  end
  def get_emm(pid : UInt16, wtableidext : UInt16, ppemm : IISDB_EMM*) : HRESULT
    @lpVtbl.value.get_emm.unsafe_as(Proc(UInt16, UInt16, IISDB_EMM*, HRESULT)).call(pid, wtableidext, ppemm)
  end
end
struct LibWin32::IDVB_NIT
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList, pmpegdata : IMpeg2Data) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, IMpeg2Data, HRESULT)).call(psectionlist, pmpegdata)
  end
  def get_version_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_version_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_network_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_network_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_count_of_table_descriptors(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_table_descriptors.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_table_descriptor_by_index(dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_table_descriptor_by_index.unsafe_as(Proc(UInt32, IGenericDescriptor*, HRESULT)).call(dwindex, ppdescriptor)
  end
  def get_table_descriptor_by_tag(btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_table_descriptor_by_tag.unsafe_as(Proc(UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(btag, pdwcookie, ppdescriptor)
  end
  def get_count_of_records(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_record_transport_stream_id(dwrecordindex : UInt32, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_transport_stream_id.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwrecordindex, pwval)
  end
  def get_record_original_network_id(dwrecordindex : UInt32, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_original_network_id.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwrecordindex, pwval)
  end
  def get_record_count_of_descriptors(dwrecordindex : UInt32, pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_record_count_of_descriptors.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(dwrecordindex, pdwval)
  end
  def get_record_descriptor_by_index(dwrecordindex : UInt32, dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_index.unsafe_as(Proc(UInt32, UInt32, IGenericDescriptor*, HRESULT)).call(dwrecordindex, dwindex, ppdescriptor)
  end
  def get_record_descriptor_by_tag(dwrecordindex : UInt32, btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_tag.unsafe_as(Proc(UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(dwrecordindex, btag, pdwcookie, ppdescriptor)
  end
  def register_for_next_table(hnexttableavailable : LibC::HANDLE) : HRESULT
    @lpVtbl.value.register_for_next_table.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hnexttableavailable)
  end
  def get_next_table(ppnit : IDVB_NIT*) : HRESULT
    @lpVtbl.value.get_next_table.unsafe_as(Proc(IDVB_NIT*, HRESULT)).call(ppnit)
  end
  def register_for_when_current(hnexttableiscurrent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.register_for_when_current.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hnexttableiscurrent)
  end
  def convert_next_to_current : HRESULT
    @lpVtbl.value.convert_next_to_current.unsafe_as(Proc(HRESULT)).call
  end
  def get_version_hash(pdwversionhash : UInt32*) : HRESULT
    @lpVtbl.value.get_version_hash.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwversionhash)
  end
end
struct LibWin32::IDVB_SDT
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList, pmpegdata : IMpeg2Data) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, IMpeg2Data, HRESULT)).call(psectionlist, pmpegdata)
  end
  def get_version_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_version_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_transport_stream_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_transport_stream_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_original_network_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_original_network_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_count_of_records(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_record_service_id(dwrecordindex : UInt32, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_service_id.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwrecordindex, pwval)
  end
  def get_record_eit_schedule_flag(dwrecordindex : UInt32, pfval : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_record_eit_schedule_flag.unsafe_as(Proc(UInt32, LibC::BOOL*, HRESULT)).call(dwrecordindex, pfval)
  end
  def get_record_eit_present_following_flag(dwrecordindex : UInt32, pfval : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_record_eit_present_following_flag.unsafe_as(Proc(UInt32, LibC::BOOL*, HRESULT)).call(dwrecordindex, pfval)
  end
  def get_record_running_status(dwrecordindex : UInt32, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_running_status.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(dwrecordindex, pbval)
  end
  def get_record_free_ca_mode(dwrecordindex : UInt32, pfval : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_record_free_ca_mode.unsafe_as(Proc(UInt32, LibC::BOOL*, HRESULT)).call(dwrecordindex, pfval)
  end
  def get_record_count_of_descriptors(dwrecordindex : UInt32, pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_record_count_of_descriptors.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(dwrecordindex, pdwval)
  end
  def get_record_descriptor_by_index(dwrecordindex : UInt32, dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_index.unsafe_as(Proc(UInt32, UInt32, IGenericDescriptor*, HRESULT)).call(dwrecordindex, dwindex, ppdescriptor)
  end
  def get_record_descriptor_by_tag(dwrecordindex : UInt32, btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_tag.unsafe_as(Proc(UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(dwrecordindex, btag, pdwcookie, ppdescriptor)
  end
  def register_for_next_table(hnexttableavailable : LibC::HANDLE) : HRESULT
    @lpVtbl.value.register_for_next_table.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hnexttableavailable)
  end
  def get_next_table(ppsdt : IDVB_SDT*) : HRESULT
    @lpVtbl.value.get_next_table.unsafe_as(Proc(IDVB_SDT*, HRESULT)).call(ppsdt)
  end
  def register_for_when_current(hnexttableiscurrent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.register_for_when_current.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hnexttableiscurrent)
  end
  def convert_next_to_current : HRESULT
    @lpVtbl.value.convert_next_to_current.unsafe_as(Proc(HRESULT)).call
  end
  def get_version_hash(pdwversionhash : UInt32*) : HRESULT
    @lpVtbl.value.get_version_hash.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwversionhash)
  end
end
struct LibWin32::IISDB_SDT
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList, pmpegdata : IMpeg2Data) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, IMpeg2Data, HRESULT)).call(psectionlist, pmpegdata)
  end
  def get_version_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_version_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_transport_stream_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_transport_stream_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_original_network_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_original_network_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_count_of_records(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_record_service_id(dwrecordindex : UInt32, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_service_id.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwrecordindex, pwval)
  end
  def get_record_eit_schedule_flag(dwrecordindex : UInt32, pfval : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_record_eit_schedule_flag.unsafe_as(Proc(UInt32, LibC::BOOL*, HRESULT)).call(dwrecordindex, pfval)
  end
  def get_record_eit_present_following_flag(dwrecordindex : UInt32, pfval : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_record_eit_present_following_flag.unsafe_as(Proc(UInt32, LibC::BOOL*, HRESULT)).call(dwrecordindex, pfval)
  end
  def get_record_running_status(dwrecordindex : UInt32, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_running_status.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(dwrecordindex, pbval)
  end
  def get_record_free_ca_mode(dwrecordindex : UInt32, pfval : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_record_free_ca_mode.unsafe_as(Proc(UInt32, LibC::BOOL*, HRESULT)).call(dwrecordindex, pfval)
  end
  def get_record_count_of_descriptors(dwrecordindex : UInt32, pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_record_count_of_descriptors.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(dwrecordindex, pdwval)
  end
  def get_record_descriptor_by_index(dwrecordindex : UInt32, dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_index.unsafe_as(Proc(UInt32, UInt32, IGenericDescriptor*, HRESULT)).call(dwrecordindex, dwindex, ppdescriptor)
  end
  def get_record_descriptor_by_tag(dwrecordindex : UInt32, btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_tag.unsafe_as(Proc(UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(dwrecordindex, btag, pdwcookie, ppdescriptor)
  end
  def register_for_next_table(hnexttableavailable : LibC::HANDLE) : HRESULT
    @lpVtbl.value.register_for_next_table.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hnexttableavailable)
  end
  def get_next_table(ppsdt : IDVB_SDT*) : HRESULT
    @lpVtbl.value.get_next_table.unsafe_as(Proc(IDVB_SDT*, HRESULT)).call(ppsdt)
  end
  def register_for_when_current(hnexttableiscurrent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.register_for_when_current.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hnexttableiscurrent)
  end
  def convert_next_to_current : HRESULT
    @lpVtbl.value.convert_next_to_current.unsafe_as(Proc(HRESULT)).call
  end
  def get_version_hash(pdwversionhash : UInt32*) : HRESULT
    @lpVtbl.value.get_version_hash.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwversionhash)
  end
  def get_record_eit_user_defined_flags(dwrecordindex : UInt32, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_eit_user_defined_flags.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(dwrecordindex, pbval)
  end
end
struct LibWin32::IDVB_EIT
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList, pmpegdata : IMpeg2Data) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, IMpeg2Data, HRESULT)).call(psectionlist, pmpegdata)
  end
  def get_version_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_version_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_service_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_service_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_transport_stream_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_transport_stream_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_original_network_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_original_network_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_segment_last_section_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_segment_last_section_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_last_table_id(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_last_table_id.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_records(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_record_event_id(dwrecordindex : UInt32, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_event_id.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwrecordindex, pwval)
  end
  def get_record_start_time(dwrecordindex : UInt32, pmdtval : MPEG_DATE_AND_TIME*) : HRESULT
    @lpVtbl.value.get_record_start_time.unsafe_as(Proc(UInt32, MPEG_DATE_AND_TIME*, HRESULT)).call(dwrecordindex, pmdtval)
  end
  def get_record_duration(dwrecordindex : UInt32, pmdval : MPEG_TIME*) : HRESULT
    @lpVtbl.value.get_record_duration.unsafe_as(Proc(UInt32, MPEG_TIME*, HRESULT)).call(dwrecordindex, pmdval)
  end
  def get_record_running_status(dwrecordindex : UInt32, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_running_status.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(dwrecordindex, pbval)
  end
  def get_record_free_ca_mode(dwrecordindex : UInt32, pfval : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_record_free_ca_mode.unsafe_as(Proc(UInt32, LibC::BOOL*, HRESULT)).call(dwrecordindex, pfval)
  end
  def get_record_count_of_descriptors(dwrecordindex : UInt32, pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_record_count_of_descriptors.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(dwrecordindex, pdwval)
  end
  def get_record_descriptor_by_index(dwrecordindex : UInt32, dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_index.unsafe_as(Proc(UInt32, UInt32, IGenericDescriptor*, HRESULT)).call(dwrecordindex, dwindex, ppdescriptor)
  end
  def get_record_descriptor_by_tag(dwrecordindex : UInt32, btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_tag.unsafe_as(Proc(UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(dwrecordindex, btag, pdwcookie, ppdescriptor)
  end
  def register_for_next_table(hnexttableavailable : LibC::HANDLE) : HRESULT
    @lpVtbl.value.register_for_next_table.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hnexttableavailable)
  end
  def get_next_table(ppeit : IDVB_EIT*) : HRESULT
    @lpVtbl.value.get_next_table.unsafe_as(Proc(IDVB_EIT*, HRESULT)).call(ppeit)
  end
  def register_for_when_current(hnexttableiscurrent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.register_for_when_current.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hnexttableiscurrent)
  end
  def convert_next_to_current : HRESULT
    @lpVtbl.value.convert_next_to_current.unsafe_as(Proc(HRESULT)).call
  end
  def get_version_hash(pdwversionhash : UInt32*) : HRESULT
    @lpVtbl.value.get_version_hash.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwversionhash)
  end
end
struct LibWin32::IDVB_EIT2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList, pmpegdata : IMpeg2Data) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, IMpeg2Data, HRESULT)).call(psectionlist, pmpegdata)
  end
  def get_version_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_version_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_service_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_service_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_transport_stream_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_transport_stream_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_original_network_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_original_network_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_segment_last_section_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_segment_last_section_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_last_table_id(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_last_table_id.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_records(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_record_event_id(dwrecordindex : UInt32, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_event_id.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwrecordindex, pwval)
  end
  def get_record_start_time(dwrecordindex : UInt32, pmdtval : MPEG_DATE_AND_TIME*) : HRESULT
    @lpVtbl.value.get_record_start_time.unsafe_as(Proc(UInt32, MPEG_DATE_AND_TIME*, HRESULT)).call(dwrecordindex, pmdtval)
  end
  def get_record_duration(dwrecordindex : UInt32, pmdval : MPEG_TIME*) : HRESULT
    @lpVtbl.value.get_record_duration.unsafe_as(Proc(UInt32, MPEG_TIME*, HRESULT)).call(dwrecordindex, pmdval)
  end
  def get_record_running_status(dwrecordindex : UInt32, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_running_status.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(dwrecordindex, pbval)
  end
  def get_record_free_ca_mode(dwrecordindex : UInt32, pfval : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_record_free_ca_mode.unsafe_as(Proc(UInt32, LibC::BOOL*, HRESULT)).call(dwrecordindex, pfval)
  end
  def get_record_count_of_descriptors(dwrecordindex : UInt32, pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_record_count_of_descriptors.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(dwrecordindex, pdwval)
  end
  def get_record_descriptor_by_index(dwrecordindex : UInt32, dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_index.unsafe_as(Proc(UInt32, UInt32, IGenericDescriptor*, HRESULT)).call(dwrecordindex, dwindex, ppdescriptor)
  end
  def get_record_descriptor_by_tag(dwrecordindex : UInt32, btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_tag.unsafe_as(Proc(UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(dwrecordindex, btag, pdwcookie, ppdescriptor)
  end
  def register_for_next_table(hnexttableavailable : LibC::HANDLE) : HRESULT
    @lpVtbl.value.register_for_next_table.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hnexttableavailable)
  end
  def get_next_table(ppeit : IDVB_EIT*) : HRESULT
    @lpVtbl.value.get_next_table.unsafe_as(Proc(IDVB_EIT*, HRESULT)).call(ppeit)
  end
  def register_for_when_current(hnexttableiscurrent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.register_for_when_current.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hnexttableiscurrent)
  end
  def convert_next_to_current : HRESULT
    @lpVtbl.value.convert_next_to_current.unsafe_as(Proc(HRESULT)).call
  end
  def get_version_hash(pdwversionhash : UInt32*) : HRESULT
    @lpVtbl.value.get_version_hash.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwversionhash)
  end
  def get_segment_info(pbtid : UInt8*, pbsegment : UInt8*) : HRESULT
    @lpVtbl.value.get_segment_info.unsafe_as(Proc(UInt8*, UInt8*, HRESULT)).call(pbtid, pbsegment)
  end
  def get_record_section(dwrecordindex : UInt32, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_section.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(dwrecordindex, pbval)
  end
end
struct LibWin32::IDVB_BAT
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList, pmpegdata : IMpeg2Data) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, IMpeg2Data, HRESULT)).call(psectionlist, pmpegdata)
  end
  def get_version_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_version_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_bouquet_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_bouquet_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_count_of_table_descriptors(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_table_descriptors.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_table_descriptor_by_index(dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_table_descriptor_by_index.unsafe_as(Proc(UInt32, IGenericDescriptor*, HRESULT)).call(dwindex, ppdescriptor)
  end
  def get_table_descriptor_by_tag(btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_table_descriptor_by_tag.unsafe_as(Proc(UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(btag, pdwcookie, ppdescriptor)
  end
  def get_count_of_records(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_record_transport_stream_id(dwrecordindex : UInt32, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_transport_stream_id.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwrecordindex, pwval)
  end
  def get_record_original_network_id(dwrecordindex : UInt32, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_original_network_id.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwrecordindex, pwval)
  end
  def get_record_count_of_descriptors(dwrecordindex : UInt32, pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_record_count_of_descriptors.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(dwrecordindex, pdwval)
  end
  def get_record_descriptor_by_index(dwrecordindex : UInt32, dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_index.unsafe_as(Proc(UInt32, UInt32, IGenericDescriptor*, HRESULT)).call(dwrecordindex, dwindex, ppdescriptor)
  end
  def get_record_descriptor_by_tag(dwrecordindex : UInt32, btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_tag.unsafe_as(Proc(UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(dwrecordindex, btag, pdwcookie, ppdescriptor)
  end
  def register_for_next_table(hnexttableavailable : LibC::HANDLE) : HRESULT
    @lpVtbl.value.register_for_next_table.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hnexttableavailable)
  end
  def get_next_table(ppbat : IDVB_BAT*) : HRESULT
    @lpVtbl.value.get_next_table.unsafe_as(Proc(IDVB_BAT*, HRESULT)).call(ppbat)
  end
  def register_for_when_current(hnexttableiscurrent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.register_for_when_current.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hnexttableiscurrent)
  end
  def convert_next_to_current : HRESULT
    @lpVtbl.value.convert_next_to_current.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IDVB_RST
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, HRESULT)).call(psectionlist)
  end
  def get_count_of_records(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_record_transport_stream_id(dwrecordindex : UInt32, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_transport_stream_id.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwrecordindex, pwval)
  end
  def get_record_original_network_id(dwrecordindex : UInt32, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_original_network_id.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwrecordindex, pwval)
  end
  def get_record_service_id(dwrecordindex : UInt32, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_service_id.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwrecordindex, pwval)
  end
  def get_record_event_id(dwrecordindex : UInt32, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_event_id.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwrecordindex, pwval)
  end
  def get_record_running_status(dwrecordindex : UInt32, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_running_status.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(dwrecordindex, pbval)
  end
end
struct LibWin32::IDVB_ST
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, HRESULT)).call(psectionlist)
  end
  def get_data_length(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_data_length.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_data(ppdata : UInt8**) : HRESULT
    @lpVtbl.value.get_data.unsafe_as(Proc(UInt8**, HRESULT)).call(ppdata)
  end
end
struct LibWin32::IDVB_TDT
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, HRESULT)).call(psectionlist)
  end
  def get_utc_time(pmdtval : MPEG_DATE_AND_TIME*) : HRESULT
    @lpVtbl.value.get_utc_time.unsafe_as(Proc(MPEG_DATE_AND_TIME*, HRESULT)).call(pmdtval)
  end
end
struct LibWin32::IDVB_TOT
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, HRESULT)).call(psectionlist)
  end
  def get_utc_time(pmdtval : MPEG_DATE_AND_TIME*) : HRESULT
    @lpVtbl.value.get_utc_time.unsafe_as(Proc(MPEG_DATE_AND_TIME*, HRESULT)).call(pmdtval)
  end
  def get_count_of_table_descriptors(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_table_descriptors.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_table_descriptor_by_index(dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_table_descriptor_by_index.unsafe_as(Proc(UInt32, IGenericDescriptor*, HRESULT)).call(dwindex, ppdescriptor)
  end
  def get_table_descriptor_by_tag(btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_table_descriptor_by_tag.unsafe_as(Proc(UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(btag, pdwcookie, ppdescriptor)
  end
end
struct LibWin32::IDVB_DIT
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, HRESULT)).call(psectionlist)
  end
  def get_transition_flag(pfval : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_transition_flag.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pfval)
  end
end
struct LibWin32::IDVB_SIT
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList, pmpegdata : IMpeg2Data) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, IMpeg2Data, HRESULT)).call(psectionlist, pmpegdata)
  end
  def get_version_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_version_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_table_descriptors(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_table_descriptors.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_table_descriptor_by_index(dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_table_descriptor_by_index.unsafe_as(Proc(UInt32, IGenericDescriptor*, HRESULT)).call(dwindex, ppdescriptor)
  end
  def get_table_descriptor_by_tag(btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_table_descriptor_by_tag.unsafe_as(Proc(UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(btag, pdwcookie, ppdescriptor)
  end
  def get_count_of_records(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_record_service_id(dwrecordindex : UInt32, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_service_id.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwrecordindex, pwval)
  end
  def get_record_running_status(dwrecordindex : UInt32, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_running_status.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(dwrecordindex, pbval)
  end
  def get_record_count_of_descriptors(dwrecordindex : UInt32, pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_record_count_of_descriptors.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(dwrecordindex, pdwval)
  end
  def get_record_descriptor_by_index(dwrecordindex : UInt32, dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_index.unsafe_as(Proc(UInt32, UInt32, IGenericDescriptor*, HRESULT)).call(dwrecordindex, dwindex, ppdescriptor)
  end
  def get_record_descriptor_by_tag(dwrecordindex : UInt32, btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_tag.unsafe_as(Proc(UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(dwrecordindex, btag, pdwcookie, ppdescriptor)
  end
  def register_for_next_table(hnexttableavailable : LibC::HANDLE) : HRESULT
    @lpVtbl.value.register_for_next_table.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hnexttableavailable)
  end
  def get_next_table(dwtimeout : UInt32, ppsit : IDVB_SIT*) : HRESULT
    @lpVtbl.value.get_next_table.unsafe_as(Proc(UInt32, IDVB_SIT*, HRESULT)).call(dwtimeout, ppsit)
  end
  def register_for_when_current(hnexttableiscurrent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.register_for_when_current.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hnexttableiscurrent)
  end
  def convert_next_to_current : HRESULT
    @lpVtbl.value.convert_next_to_current.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IISDB_BIT
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList, pmpegdata : IMpeg2Data) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, IMpeg2Data, HRESULT)).call(psectionlist, pmpegdata)
  end
  def get_version_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_version_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_original_network_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_original_network_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_broadcast_view_propriety(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_broadcast_view_propriety.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_table_descriptors(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_table_descriptors.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_table_descriptor_by_index(dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_table_descriptor_by_index.unsafe_as(Proc(UInt32, IGenericDescriptor*, HRESULT)).call(dwindex, ppdescriptor)
  end
  def get_table_descriptor_by_tag(btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_table_descriptor_by_tag.unsafe_as(Proc(UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(btag, pdwcookie, ppdescriptor)
  end
  def get_count_of_records(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_record_broadcaster_id(dwrecordindex : UInt32, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_broadcaster_id.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(dwrecordindex, pbval)
  end
  def get_record_count_of_descriptors(dwrecordindex : UInt32, pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_record_count_of_descriptors.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(dwrecordindex, pdwval)
  end
  def get_record_descriptor_by_index(dwrecordindex : UInt32, dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_index.unsafe_as(Proc(UInt32, UInt32, IGenericDescriptor*, HRESULT)).call(dwrecordindex, dwindex, ppdescriptor)
  end
  def get_record_descriptor_by_tag(dwrecordindex : UInt32, btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_tag.unsafe_as(Proc(UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(dwrecordindex, btag, pdwcookie, ppdescriptor)
  end
  def get_version_hash(pdwversionhash : UInt32*) : HRESULT
    @lpVtbl.value.get_version_hash.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwversionhash)
  end
end
struct LibWin32::IISDB_NBIT
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList, pmpegdata : IMpeg2Data) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, IMpeg2Data, HRESULT)).call(psectionlist, pmpegdata)
  end
  def get_version_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_version_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_original_network_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_original_network_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_count_of_records(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_record_information_id(dwrecordindex : UInt32, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_information_id.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwrecordindex, pwval)
  end
  def get_record_information_type(dwrecordindex : UInt32, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_information_type.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(dwrecordindex, pbval)
  end
  def get_record_description_body_location(dwrecordindex : UInt32, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_description_body_location.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(dwrecordindex, pbval)
  end
  def get_record_message_section_number(dwrecordindex : UInt32, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_message_section_number.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(dwrecordindex, pbval)
  end
  def get_record_user_defined(dwrecordindex : UInt32, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_user_defined.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(dwrecordindex, pbval)
  end
  def get_record_number_of_keys(dwrecordindex : UInt32, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_number_of_keys.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(dwrecordindex, pbval)
  end
  def get_record_keys(dwrecordindex : UInt32, pbkeys : UInt8**) : HRESULT
    @lpVtbl.value.get_record_keys.unsafe_as(Proc(UInt32, UInt8**, HRESULT)).call(dwrecordindex, pbkeys)
  end
  def get_record_count_of_descriptors(dwrecordindex : UInt32, pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_record_count_of_descriptors.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(dwrecordindex, pdwval)
  end
  def get_record_descriptor_by_index(dwrecordindex : UInt32, dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_index.unsafe_as(Proc(UInt32, UInt32, IGenericDescriptor*, HRESULT)).call(dwrecordindex, dwindex, ppdescriptor)
  end
  def get_record_descriptor_by_tag(dwrecordindex : UInt32, btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_tag.unsafe_as(Proc(UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(dwrecordindex, btag, pdwcookie, ppdescriptor)
  end
  def get_version_hash(pdwversionhash : UInt32*) : HRESULT
    @lpVtbl.value.get_version_hash.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwversionhash)
  end
end
struct LibWin32::IISDB_LDT
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList, pmpegdata : IMpeg2Data) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, IMpeg2Data, HRESULT)).call(psectionlist, pmpegdata)
  end
  def get_version_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_version_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_original_service_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_original_service_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_transport_stream_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_transport_stream_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_original_network_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_original_network_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_count_of_records(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_record_description_id(dwrecordindex : UInt32, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_description_id.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwrecordindex, pwval)
  end
  def get_record_count_of_descriptors(dwrecordindex : UInt32, pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_record_count_of_descriptors.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(dwrecordindex, pdwval)
  end
  def get_record_descriptor_by_index(dwrecordindex : UInt32, dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_index.unsafe_as(Proc(UInt32, UInt32, IGenericDescriptor*, HRESULT)).call(dwrecordindex, dwindex, ppdescriptor)
  end
  def get_record_descriptor_by_tag(dwrecordindex : UInt32, btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_tag.unsafe_as(Proc(UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(dwrecordindex, btag, pdwcookie, ppdescriptor)
  end
  def get_version_hash(pdwversionhash : UInt32*) : HRESULT
    @lpVtbl.value.get_version_hash.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwversionhash)
  end
end
struct LibWin32::IISDB_SDTT
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList, pmpegdata : IMpeg2Data) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, IMpeg2Data, HRESULT)).call(psectionlist, pmpegdata)
  end
  def get_version_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_version_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_table_id_ext(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_table_id_ext.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_transport_stream_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_transport_stream_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_original_network_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_original_network_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_service_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_service_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_count_of_records(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_record_group(dwrecordindex : UInt32, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_group.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(dwrecordindex, pbval)
  end
  def get_record_target_version(dwrecordindex : UInt32, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_target_version.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwrecordindex, pwval)
  end
  def get_record_new_version(dwrecordindex : UInt32, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_new_version.unsafe_as(Proc(UInt32, UInt16*, HRESULT)).call(dwrecordindex, pwval)
  end
  def get_record_download_level(dwrecordindex : UInt32, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_download_level.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(dwrecordindex, pbval)
  end
  def get_record_version_indicator(dwrecordindex : UInt32, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_version_indicator.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(dwrecordindex, pbval)
  end
  def get_record_schedule_time_shift_information(dwrecordindex : UInt32, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_schedule_time_shift_information.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(dwrecordindex, pbval)
  end
  def get_record_count_of_schedules(dwrecordindex : UInt32, pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_record_count_of_schedules.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(dwrecordindex, pdwval)
  end
  def get_record_start_time_by_index(dwrecordindex : UInt32, dwindex : UInt32, pmdtval : MPEG_DATE_AND_TIME*) : HRESULT
    @lpVtbl.value.get_record_start_time_by_index.unsafe_as(Proc(UInt32, UInt32, MPEG_DATE_AND_TIME*, HRESULT)).call(dwrecordindex, dwindex, pmdtval)
  end
  def get_record_duration_by_index(dwrecordindex : UInt32, dwindex : UInt32, pmdval : MPEG_TIME*) : HRESULT
    @lpVtbl.value.get_record_duration_by_index.unsafe_as(Proc(UInt32, UInt32, MPEG_TIME*, HRESULT)).call(dwrecordindex, dwindex, pmdval)
  end
  def get_record_count_of_descriptors(dwrecordindex : UInt32, pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_record_count_of_descriptors.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(dwrecordindex, pdwval)
  end
  def get_record_descriptor_by_index(dwrecordindex : UInt32, dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_index.unsafe_as(Proc(UInt32, UInt32, IGenericDescriptor*, HRESULT)).call(dwrecordindex, dwindex, ppdescriptor)
  end
  def get_record_descriptor_by_tag(dwrecordindex : UInt32, btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_tag.unsafe_as(Proc(UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(dwrecordindex, btag, pdwcookie, ppdescriptor)
  end
  def get_version_hash(pdwversionhash : UInt32*) : HRESULT
    @lpVtbl.value.get_version_hash.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwversionhash)
  end
end
struct LibWin32::IISDB_CDT
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList, pmpegdata : IMpeg2Data, bsectionnumber : UInt8) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, IMpeg2Data, UInt8, HRESULT)).call(psectionlist, pmpegdata, bsectionnumber)
  end
  def get_version_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_version_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_download_data_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_download_data_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_section_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_section_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_original_network_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_original_network_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_data_type(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_data_type.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_table_descriptors(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_table_descriptors.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_table_descriptor_by_index(dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_table_descriptor_by_index.unsafe_as(Proc(UInt32, IGenericDescriptor*, HRESULT)).call(dwindex, ppdescriptor)
  end
  def get_table_descriptor_by_tag(btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_table_descriptor_by_tag.unsafe_as(Proc(UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(btag, pdwcookie, ppdescriptor)
  end
  def get_size_of_data_module(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_size_of_data_module.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_data_module(pbdata : UInt8**) : HRESULT
    @lpVtbl.value.get_data_module.unsafe_as(Proc(UInt8**, HRESULT)).call(pbdata)
  end
  def get_version_hash(pdwversionhash : UInt32*) : HRESULT
    @lpVtbl.value.get_version_hash.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwversionhash)
  end
end
struct LibWin32::IISDB_EMM
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(psectionlist : ISectionList, pmpegdata : IMpeg2Data) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ISectionList, IMpeg2Data, HRESULT)).call(psectionlist, pmpegdata)
  end
  def get_version_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_version_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_table_id_extension(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_table_id_extension.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_data_bytes(pwbufferlength : UInt16*, pbbuffer : UInt8*) : HRESULT
    @lpVtbl.value.get_data_bytes.unsafe_as(Proc(UInt16*, UInt8*, HRESULT)).call(pwbufferlength, pbbuffer)
  end
  def get_shared_emm_message(pwlength : UInt16*, ppbmessage : UInt8**) : HRESULT
    @lpVtbl.value.get_shared_emm_message.unsafe_as(Proc(UInt16*, UInt8**, HRESULT)).call(pwlength, ppbmessage)
  end
  def get_individual_emm_message(punknown : IUnknown, pwlength : UInt16*, ppbmessage : UInt8**) : HRESULT
    @lpVtbl.value.get_individual_emm_message.unsafe_as(Proc(IUnknown, UInt16*, UInt8**, HRESULT)).call(punknown, pwlength, ppbmessage)
  end
  def get_version_hash(pdwversionhash : UInt32*) : HRESULT
    @lpVtbl.value.get_version_hash.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwversionhash)
  end
end
struct LibWin32::IDvbServiceAttributeDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_records(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_record_service_id(brecordindex : UInt8, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_service_id.unsafe_as(Proc(UInt8, UInt16*, HRESULT)).call(brecordindex, pwval)
  end
  def get_record_numeric_selection_flag(brecordindex : UInt8, pfval : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_record_numeric_selection_flag.unsafe_as(Proc(UInt8, LibC::BOOL*, HRESULT)).call(brecordindex, pfval)
  end
  def get_record_visible_service_flag(brecordindex : UInt8, pfval : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_record_visible_service_flag.unsafe_as(Proc(UInt8, LibC::BOOL*, HRESULT)).call(brecordindex, pfval)
  end
end
struct LibWin32::IDvbContentIdentifierDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_records(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_record_crid(brecordindex : UInt8, pbtype : UInt8*, pblocation : UInt8*, pblength : UInt8*, ppbbytes : UInt8**) : HRESULT
    @lpVtbl.value.get_record_crid.unsafe_as(Proc(UInt8, UInt8*, UInt8*, UInt8*, UInt8**, HRESULT)).call(brecordindex, pbtype, pblocation, pblength, ppbbytes)
  end
end
struct LibWin32::IDvbDefaultAuthorityDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_default_authority(pblength : UInt8*, ppbbytes : UInt8**) : HRESULT
    @lpVtbl.value.get_default_authority.unsafe_as(Proc(UInt8*, UInt8**, HRESULT)).call(pblength, ppbbytes)
  end
end
struct LibWin32::IDvbSatelliteDeliverySystemDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_frequency(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_frequency.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_orbital_position(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_orbital_position.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_west_east_flag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_west_east_flag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_polarization(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_polarization.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_modulation(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_modulation.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_symbol_rate(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_rate.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_fec_inner(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_fec_inner.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
end
struct LibWin32::IDvbCableDeliverySystemDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_frequency(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_frequency.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_fec_outer(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_fec_outer.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_modulation(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_modulation.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_symbol_rate(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_rate.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_fec_inner(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_fec_inner.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
end
struct LibWin32::IDvbTerrestrialDeliverySystemDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_centre_frequency(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_centre_frequency.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_bandwidth(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_bandwidth.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_constellation(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_constellation.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_hierarchy_information(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_hierarchy_information.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_code_rate_hp_stream(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_code_rate_hp_stream.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_code_rate_lp_stream(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_code_rate_lp_stream.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_guard_interval(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_guard_interval.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_transmission_mode(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_transmission_mode.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_other_frequency_flag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_other_frequency_flag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
end
struct LibWin32::IDvbTerrestrial2DeliverySystemDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_tag_extension(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag_extension.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_centre_frequency(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_centre_frequency.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_plp_id(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_plp_id.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_t2_system_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_t2_system_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_multiple_input_mode(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_multiple_input_mode.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_bandwidth(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_bandwidth.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_guard_interval(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_guard_interval.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_transmission_mode(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_transmission_mode.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_cell_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_cell_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_other_frequency_flag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_other_frequency_flag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_tfs_flag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tfs_flag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
end
struct LibWin32::IDvbFrequencyListDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_coding_type(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_coding_type.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_records(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_record_centre_frequency(brecordindex : UInt8, pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_record_centre_frequency.unsafe_as(Proc(UInt8, UInt32*, HRESULT)).call(brecordindex, pdwval)
  end
end
struct LibWin32::IDvbPrivateDataSpecifierDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_private_data_specifier(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_private_data_specifier.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
end
struct LibWin32::IDvbLogicalChannelDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_records(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_record_service_id(brecordindex : UInt8, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_service_id.unsafe_as(Proc(UInt8, UInt16*, HRESULT)).call(brecordindex, pwval)
  end
  def get_record_logical_channel_number(brecordindex : UInt8, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_logical_channel_number.unsafe_as(Proc(UInt8, UInt16*, HRESULT)).call(brecordindex, pwval)
  end
end
struct LibWin32::IDvbLogicalChannelDescriptor2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_records(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_record_service_id(brecordindex : UInt8, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_service_id.unsafe_as(Proc(UInt8, UInt16*, HRESULT)).call(brecordindex, pwval)
  end
  def get_record_logical_channel_number(brecordindex : UInt8, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_logical_channel_number.unsafe_as(Proc(UInt8, UInt16*, HRESULT)).call(brecordindex, pwval)
  end
  def get_record_logical_channel_and_visibility(brecordindex : UInt8, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_logical_channel_and_visibility.unsafe_as(Proc(UInt8, UInt16*, HRESULT)).call(brecordindex, pwval)
  end
end
struct LibWin32::IDvbLogicalChannel2Descriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_records(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_record_service_id(brecordindex : UInt8, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_service_id.unsafe_as(Proc(UInt8, UInt16*, HRESULT)).call(brecordindex, pwval)
  end
  def get_record_logical_channel_number(brecordindex : UInt8, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_logical_channel_number.unsafe_as(Proc(UInt8, UInt16*, HRESULT)).call(brecordindex, pwval)
  end
  def get_record_logical_channel_and_visibility(brecordindex : UInt8, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_logical_channel_and_visibility.unsafe_as(Proc(UInt8, UInt16*, HRESULT)).call(brecordindex, pwval)
  end
  def get_count_of_lists(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_count_of_lists.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_list_id(blistindex : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_list_id.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(blistindex, pbval)
  end
  def get_list_name_w(blistindex : UInt8, convmode : DVB_STRCONV_MODE, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_list_name_w.unsafe_as(Proc(UInt8, DVB_STRCONV_MODE, UInt8**, HRESULT)).call(blistindex, convmode, pbstrname)
  end
  def get_list_country_code(blistindex : UInt8, pszcode : UInt8*) : HRESULT
    @lpVtbl.value.get_list_country_code.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(blistindex, pszcode)
  end
  def get_list_count_of_records(bchannellistindex : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_list_count_of_records.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(bchannellistindex, pbval)
  end
  def get_list_record_service_id(blistindex : UInt8, brecordindex : UInt8, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_list_record_service_id.unsafe_as(Proc(UInt8, UInt8, UInt16*, HRESULT)).call(blistindex, brecordindex, pwval)
  end
  def get_list_record_logical_channel_number(blistindex : UInt8, brecordindex : UInt8, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_list_record_logical_channel_number.unsafe_as(Proc(UInt8, UInt8, UInt16*, HRESULT)).call(blistindex, brecordindex, pwval)
  end
  def get_list_record_logical_channel_and_visibility(blistindex : UInt8, brecordindex : UInt8, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_list_record_logical_channel_and_visibility.unsafe_as(Proc(UInt8, UInt8, UInt16*, HRESULT)).call(blistindex, brecordindex, pwval)
  end
end
struct LibWin32::IDvbHDSimulcastLogicalChannelDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_records(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_record_service_id(brecordindex : UInt8, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_service_id.unsafe_as(Proc(UInt8, UInt16*, HRESULT)).call(brecordindex, pwval)
  end
  def get_record_logical_channel_number(brecordindex : UInt8, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_logical_channel_number.unsafe_as(Proc(UInt8, UInt16*, HRESULT)).call(brecordindex, pwval)
  end
  def get_record_logical_channel_and_visibility(brecordindex : UInt8, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_logical_channel_and_visibility.unsafe_as(Proc(UInt8, UInt16*, HRESULT)).call(brecordindex, pwval)
  end
end
struct LibWin32::IDvbDataBroadcastIDDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_data_broadcast_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_data_broadcast_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_id_selector_bytes(pblen : UInt8*, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_id_selector_bytes.unsafe_as(Proc(UInt8*, UInt8*, HRESULT)).call(pblen, pbval)
  end
end
struct LibWin32::IDvbDataBroadcastDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_data_broadcast_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_data_broadcast_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_component_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_component_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_selector_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_selector_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_selector_bytes(pblen : UInt8*, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_selector_bytes.unsafe_as(Proc(UInt8*, UInt8*, HRESULT)).call(pblen, pbval)
  end
  def get_lang_id(pulval : UInt32*) : HRESULT
    @lpVtbl.value.get_lang_id.unsafe_as(Proc(UInt32*, HRESULT)).call(pulval)
  end
  def get_text_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_text_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_text(pblen : UInt8*, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_text.unsafe_as(Proc(UInt8*, UInt8*, HRESULT)).call(pblen, pbval)
  end
end
struct LibWin32::IDvbLinkageDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_ts_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_ts_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_on_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_on_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_service_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_service_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_linkage_type(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_linkage_type.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_private_data_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_private_data_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_private_data(pblen : UInt8*, pbdata : UInt8*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(UInt8*, UInt8*, HRESULT)).call(pblen, pbdata)
  end
end
struct LibWin32::IDvbTeletextDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_records(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_record_lang_id(brecordindex : UInt8, pulval : UInt32*) : HRESULT
    @lpVtbl.value.get_record_lang_id.unsafe_as(Proc(UInt8, UInt32*, HRESULT)).call(brecordindex, pulval)
  end
  def get_record_teletext_type(brecordindex : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_teletext_type.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(brecordindex, pbval)
  end
  def get_record_magazine_number(brecordindex : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_magazine_number.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(brecordindex, pbval)
  end
  def get_record_page_number(brecordindex : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_page_number.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(brecordindex, pbval)
  end
end
struct LibWin32::IDvbSubtitlingDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_records(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_record_lang_id(brecordindex : UInt8, pulval : UInt32*) : HRESULT
    @lpVtbl.value.get_record_lang_id.unsafe_as(Proc(UInt8, UInt32*, HRESULT)).call(brecordindex, pulval)
  end
  def get_record_subtitling_type(brecordindex : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_subtitling_type.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(brecordindex, pbval)
  end
  def get_record_composition_page_id(brecordindex : UInt8, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_composition_page_id.unsafe_as(Proc(UInt8, UInt16*, HRESULT)).call(brecordindex, pwval)
  end
  def get_record_ancillary_page_id(brecordindex : UInt8, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_ancillary_page_id.unsafe_as(Proc(UInt8, UInt16*, HRESULT)).call(brecordindex, pwval)
  end
end
struct LibWin32::IDvbServiceDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_service_type(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_service_type.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_service_provider_name(pszname : UInt8**) : HRESULT
    @lpVtbl.value.get_service_provider_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pszname)
  end
  def get_service_provider_name_w(pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_service_provider_name_w.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrname)
  end
  def get_service_name(pszname : UInt8**) : HRESULT
    @lpVtbl.value.get_service_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pszname)
  end
  def get_processed_service_name(pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_processed_service_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrname)
  end
  def get_service_name_emphasized(pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_service_name_emphasized.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrname)
  end
end
struct LibWin32::IDvbServiceDescriptor2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_service_type(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_service_type.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_service_provider_name(pszname : UInt8**) : HRESULT
    @lpVtbl.value.get_service_provider_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pszname)
  end
  def get_service_provider_name_w(pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_service_provider_name_w.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrname)
  end
  def get_service_name(pszname : UInt8**) : HRESULT
    @lpVtbl.value.get_service_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pszname)
  end
  def get_processed_service_name(pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_processed_service_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrname)
  end
  def get_service_name_emphasized(pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_service_name_emphasized.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrname)
  end
  def get_service_provider_name_w2(convmode : DVB_STRCONV_MODE, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_service_provider_name_w2.unsafe_as(Proc(DVB_STRCONV_MODE, UInt8**, HRESULT)).call(convmode, pbstrname)
  end
  def get_service_name_w(convmode : DVB_STRCONV_MODE, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_service_name_w.unsafe_as(Proc(DVB_STRCONV_MODE, UInt8**, HRESULT)).call(convmode, pbstrname)
  end
end
struct LibWin32::IDvbServiceListDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_records(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_record_service_id(brecordindex : UInt8, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_service_id.unsafe_as(Proc(UInt8, UInt16*, HRESULT)).call(brecordindex, pwval)
  end
  def get_record_service_type(brecordindex : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_service_type.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(brecordindex, pbval)
  end
end
struct LibWin32::IDvbMultilingualServiceNameDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_records(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_record_lang_id(brecordindex : UInt8, ulval : UInt32*) : HRESULT
    @lpVtbl.value.get_record_lang_id.unsafe_as(Proc(UInt8, UInt32*, HRESULT)).call(brecordindex, ulval)
  end
  def get_record_service_provider_name_w(brecordindex : UInt8, convmode : DVB_STRCONV_MODE, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_record_service_provider_name_w.unsafe_as(Proc(UInt8, DVB_STRCONV_MODE, UInt8**, HRESULT)).call(brecordindex, convmode, pbstrname)
  end
  def get_record_service_name_w(brecordindex : UInt8, convmode : DVB_STRCONV_MODE, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_record_service_name_w.unsafe_as(Proc(UInt8, DVB_STRCONV_MODE, UInt8**, HRESULT)).call(brecordindex, convmode, pbstrname)
  end
end
struct LibWin32::IDvbNetworkNameDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_network_name(pszname : UInt8**) : HRESULT
    @lpVtbl.value.get_network_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pszname)
  end
  def get_network_name_w(convmode : DVB_STRCONV_MODE, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_network_name_w.unsafe_as(Proc(DVB_STRCONV_MODE, UInt8**, HRESULT)).call(convmode, pbstrname)
  end
end
struct LibWin32::IDvbShortEventDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_language_code(pszcode : UInt8*) : HRESULT
    @lpVtbl.value.get_language_code.unsafe_as(Proc(UInt8*, HRESULT)).call(pszcode)
  end
  def get_event_name_w(convmode : DVB_STRCONV_MODE, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_event_name_w.unsafe_as(Proc(DVB_STRCONV_MODE, UInt8**, HRESULT)).call(convmode, pbstrname)
  end
  def get_text_w(convmode : DVB_STRCONV_MODE, pbstrtext : UInt8**) : HRESULT
    @lpVtbl.value.get_text_w.unsafe_as(Proc(DVB_STRCONV_MODE, UInt8**, HRESULT)).call(convmode, pbstrtext)
  end
end
struct LibWin32::IDvbExtendedEventDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_descriptor_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_descriptor_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_last_descriptor_number(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_last_descriptor_number.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_language_code(pszcode : UInt8*) : HRESULT
    @lpVtbl.value.get_language_code.unsafe_as(Proc(UInt8*, HRESULT)).call(pszcode)
  end
  def get_count_of_records(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_record_item_w(brecordindex : UInt8, convmode : DVB_STRCONV_MODE, pbstrdesc : UInt8**, pbstritem : UInt8**) : HRESULT
    @lpVtbl.value.get_record_item_w.unsafe_as(Proc(UInt8, DVB_STRCONV_MODE, UInt8**, UInt8**, HRESULT)).call(brecordindex, convmode, pbstrdesc, pbstritem)
  end
  def get_concatenated_item_w(pfollowingdescriptor : IDvbExtendedEventDescriptor, convmode : DVB_STRCONV_MODE, pbstrdesc : UInt8**, pbstritem : UInt8**) : HRESULT
    @lpVtbl.value.get_concatenated_item_w.unsafe_as(Proc(IDvbExtendedEventDescriptor, DVB_STRCONV_MODE, UInt8**, UInt8**, HRESULT)).call(pfollowingdescriptor, convmode, pbstrdesc, pbstritem)
  end
  def get_text_w(convmode : DVB_STRCONV_MODE, pbstrtext : UInt8**) : HRESULT
    @lpVtbl.value.get_text_w.unsafe_as(Proc(DVB_STRCONV_MODE, UInt8**, HRESULT)).call(convmode, pbstrtext)
  end
  def get_concatenated_text_w(followingdescriptor : IDvbExtendedEventDescriptor, convmode : DVB_STRCONV_MODE, pbstrtext : UInt8**) : HRESULT
    @lpVtbl.value.get_concatenated_text_w.unsafe_as(Proc(IDvbExtendedEventDescriptor, DVB_STRCONV_MODE, UInt8**, HRESULT)).call(followingdescriptor, convmode, pbstrtext)
  end
  def get_record_item_raw_bytes(brecordindex : UInt8, ppbrawitem : UInt8**, pbitemlength : UInt8*) : HRESULT
    @lpVtbl.value.get_record_item_raw_bytes.unsafe_as(Proc(UInt8, UInt8**, UInt8*, HRESULT)).call(brecordindex, ppbrawitem, pbitemlength)
  end
end
struct LibWin32::IDvbComponentDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_stream_content(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_stream_content.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_component_type(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_component_type.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_component_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_component_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_language_code(pszcode : UInt8*) : HRESULT
    @lpVtbl.value.get_language_code.unsafe_as(Proc(UInt8*, HRESULT)).call(pszcode)
  end
  def get_text_w(convmode : DVB_STRCONV_MODE, pbstrtext : UInt8**) : HRESULT
    @lpVtbl.value.get_text_w.unsafe_as(Proc(DVB_STRCONV_MODE, UInt8**, HRESULT)).call(convmode, pbstrtext)
  end
end
struct LibWin32::IDvbContentDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_records(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_record_content_nibbles(brecordindex : UInt8, pbvallevel1 : UInt8*, pbvallevel2 : UInt8*) : HRESULT
    @lpVtbl.value.get_record_content_nibbles.unsafe_as(Proc(UInt8, UInt8*, UInt8*, HRESULT)).call(brecordindex, pbvallevel1, pbvallevel2)
  end
  def get_record_user_nibbles(brecordindex : UInt8, pbval1 : UInt8*, pbval2 : UInt8*) : HRESULT
    @lpVtbl.value.get_record_user_nibbles.unsafe_as(Proc(UInt8, UInt8*, UInt8*, HRESULT)).call(brecordindex, pbval1, pbval2)
  end
end
struct LibWin32::IDvbParentalRatingDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_records(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_record_rating(brecordindex : UInt8, pszcountrycode : UInt8*, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_rating.unsafe_as(Proc(UInt8, UInt8*, UInt8*, HRESULT)).call(brecordindex, pszcountrycode, pbval)
  end
end
struct LibWin32::IIsdbTerrestrialDeliverySystemDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_area_code(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_area_code.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_guard_interval(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_guard_interval.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_transmission_mode(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_transmission_mode.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_records(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_record_frequency(brecordindex : UInt8, pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_record_frequency.unsafe_as(Proc(UInt8, UInt32*, HRESULT)).call(brecordindex, pdwval)
  end
end
struct LibWin32::IIsdbTSInformationDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_remote_control_key_id(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_remote_control_key_id.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_ts_name_w(convmode : DVB_STRCONV_MODE, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_ts_name_w.unsafe_as(Proc(DVB_STRCONV_MODE, UInt8**, HRESULT)).call(convmode, pbstrname)
  end
  def get_count_of_records(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_record_transmission_type_info(brecordindex : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_transmission_type_info.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(brecordindex, pbval)
  end
  def get_record_number_of_services(brecordindex : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_number_of_services.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(brecordindex, pbval)
  end
  def get_record_service_id_by_index(brecordindex : UInt8, bserviceindex : UInt8, pdwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_service_id_by_index.unsafe_as(Proc(UInt8, UInt8, UInt16*, HRESULT)).call(brecordindex, bserviceindex, pdwval)
  end
end
struct LibWin32::IIsdbDigitalCopyControlDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_copy_control(pbdigitalrecordingcontroldata : UInt8*, pbcopycontroltype : UInt8*, pbapscontroldata : UInt8*, pbmaximumbitrate : UInt8*) : HRESULT
    @lpVtbl.value.get_copy_control.unsafe_as(Proc(UInt8*, UInt8*, UInt8*, UInt8*, HRESULT)).call(pbdigitalrecordingcontroldata, pbcopycontroltype, pbapscontroldata, pbmaximumbitrate)
  end
  def get_count_of_records(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_record_copy_control(brecordindex : UInt8, pbcomponenttag : UInt8*, pbdigitalrecordingcontroldata : UInt8*, pbcopycontroltype : UInt8*, pbapscontroldata : UInt8*, pbmaximumbitrate : UInt8*) : HRESULT
    @lpVtbl.value.get_record_copy_control.unsafe_as(Proc(UInt8, UInt8*, UInt8*, UInt8*, UInt8*, UInt8*, HRESULT)).call(brecordindex, pbcomponenttag, pbdigitalrecordingcontroldata, pbcopycontroltype, pbapscontroldata, pbmaximumbitrate)
  end
end
struct LibWin32::IIsdbAudioComponentDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_stream_content(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_stream_content.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_component_type(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_component_type.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_component_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_component_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_stream_type(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_stream_type.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_simulcast_group_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_simulcast_group_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_es_multi_lingual_flag(pfval : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_es_multi_lingual_flag.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pfval)
  end
  def get_main_component_flag(pfval : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_main_component_flag.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pfval)
  end
  def get_quality_indicator(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_quality_indicator.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_sampling_rate(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_sampling_rate.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_language_code(pszcode : UInt8*) : HRESULT
    @lpVtbl.value.get_language_code.unsafe_as(Proc(UInt8*, HRESULT)).call(pszcode)
  end
  def get_language_code2(pszcode : UInt8*) : HRESULT
    @lpVtbl.value.get_language_code2.unsafe_as(Proc(UInt8*, HRESULT)).call(pszcode)
  end
  def get_text_w(convmode : DVB_STRCONV_MODE, pbstrtext : UInt8**) : HRESULT
    @lpVtbl.value.get_text_w.unsafe_as(Proc(DVB_STRCONV_MODE, UInt8**, HRESULT)).call(convmode, pbstrtext)
  end
end
struct LibWin32::IIsdbDataContentDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_data_component_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_data_component_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_entry_component(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_entry_component.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_selector_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_selector_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_selector_bytes(bbuflength : UInt8, pbbuf : UInt8*) : HRESULT
    @lpVtbl.value.get_selector_bytes.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(bbuflength, pbbuf)
  end
  def get_count_of_records(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_record_component_ref(brecordindex : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_component_ref.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(brecordindex, pbval)
  end
  def get_language_code(pszcode : UInt8*) : HRESULT
    @lpVtbl.value.get_language_code.unsafe_as(Proc(UInt8*, HRESULT)).call(pszcode)
  end
  def get_text_w(convmode : DVB_STRCONV_MODE, pbstrtext : UInt8**) : HRESULT
    @lpVtbl.value.get_text_w.unsafe_as(Proc(DVB_STRCONV_MODE, UInt8**, HRESULT)).call(convmode, pbstrtext)
  end
end
struct LibWin32::IIsdbCAContractInformationDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_ca_system_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_ca_system_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_ca_unit_id(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_ca_unit_id.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_records(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_record_component_tag(brecordindex : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_component_tag.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(brecordindex, pbval)
  end
  def get_contract_verification_info_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_contract_verification_info_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_contract_verification_info(bbuflength : UInt8, pbbuf : UInt8*) : HRESULT
    @lpVtbl.value.get_contract_verification_info.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(bbuflength, pbbuf)
  end
  def get_fee_name_w(convmode : DVB_STRCONV_MODE, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_fee_name_w.unsafe_as(Proc(DVB_STRCONV_MODE, UInt8**, HRESULT)).call(convmode, pbstrname)
  end
end
struct LibWin32::IIsdbEventGroupDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_group_type(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_group_type.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_records(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_record_event(brecordindex : UInt8, pwserviceid : UInt16*, pweventid : UInt16*) : HRESULT
    @lpVtbl.value.get_record_event.unsafe_as(Proc(UInt8, UInt16*, UInt16*, HRESULT)).call(brecordindex, pwserviceid, pweventid)
  end
  def get_count_of_ref_records(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_count_of_ref_records.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_ref_record_event(brecordindex : UInt8, pworiginalnetworkid : UInt16*, pwtransportstreamid : UInt16*, pwserviceid : UInt16*, pweventid : UInt16*) : HRESULT
    @lpVtbl.value.get_ref_record_event.unsafe_as(Proc(UInt8, UInt16*, UInt16*, UInt16*, UInt16*, HRESULT)).call(brecordindex, pworiginalnetworkid, pwtransportstreamid, pwserviceid, pweventid)
  end
end
struct LibWin32::IIsdbComponentGroupDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_component_group_type(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_component_group_type.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_records(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_record_group_id(brecordindex : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_group_id.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(brecordindex, pbval)
  end
  def get_record_number_of_ca_unit(brecordindex : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_number_of_ca_unit.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(brecordindex, pbval)
  end
  def get_record_ca_unit_ca_unit_id(brecordindex : UInt8, bcaunitindex : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_ca_unit_ca_unit_id.unsafe_as(Proc(UInt8, UInt8, UInt8*, HRESULT)).call(brecordindex, bcaunitindex, pbval)
  end
  def get_record_ca_unit_number_of_components(brecordindex : UInt8, bcaunitindex : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_ca_unit_number_of_components.unsafe_as(Proc(UInt8, UInt8, UInt8*, HRESULT)).call(brecordindex, bcaunitindex, pbval)
  end
  def get_record_ca_unit_component_tag(brecordindex : UInt8, bcaunitindex : UInt8, bcomponentindex : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_ca_unit_component_tag.unsafe_as(Proc(UInt8, UInt8, UInt8, UInt8*, HRESULT)).call(brecordindex, bcaunitindex, bcomponentindex, pbval)
  end
  def get_record_total_bit_rate(brecordindex : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_total_bit_rate.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(brecordindex, pbval)
  end
  def get_record_text_w(brecordindex : UInt8, convmode : DVB_STRCONV_MODE, pbstrtext : UInt8**) : HRESULT
    @lpVtbl.value.get_record_text_w.unsafe_as(Proc(UInt8, DVB_STRCONV_MODE, UInt8**, HRESULT)).call(brecordindex, convmode, pbstrtext)
  end
end
struct LibWin32::IIsdbSeriesDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_series_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_series_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_repeat_label(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_repeat_label.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_program_pattern(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_program_pattern.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_expire_date(pfvalid : LibC::BOOL*, pmdtval : MPEG_DATE_AND_TIME*) : HRESULT
    @lpVtbl.value.get_expire_date.unsafe_as(Proc(LibC::BOOL*, MPEG_DATE_AND_TIME*, HRESULT)).call(pfvalid, pmdtval)
  end
  def get_episode_number(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_episode_number.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_last_episode_number(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_last_episode_number.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_series_name_w(convmode : DVB_STRCONV_MODE, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_series_name_w.unsafe_as(Proc(DVB_STRCONV_MODE, UInt8**, HRESULT)).call(convmode, pbstrname)
  end
end
struct LibWin32::IIsdbDownloadContentDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_flags(pfreboot : LibC::BOOL*, pfaddon : LibC::BOOL*, pfcompatibility : LibC::BOOL*, pfmoduleinfo : LibC::BOOL*, pftextinfo : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_flags.unsafe_as(Proc(LibC::BOOL*, LibC::BOOL*, LibC::BOOL*, LibC::BOOL*, LibC::BOOL*, HRESULT)).call(pfreboot, pfaddon, pfcompatibility, pfmoduleinfo, pftextinfo)
  end
  def get_component_size(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_component_size.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_download_id(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_download_id.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_time_out_value_dii(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_time_out_value_dii.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_leak_rate(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_leak_rate.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_component_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_component_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_compatiblity_descriptor_length(pwlength : UInt16*) : HRESULT
    @lpVtbl.value.get_compatiblity_descriptor_length.unsafe_as(Proc(UInt16*, HRESULT)).call(pwlength)
  end
  def get_compatiblity_descriptor(ppbdata : UInt8**) : HRESULT
    @lpVtbl.value.get_compatiblity_descriptor.unsafe_as(Proc(UInt8**, HRESULT)).call(ppbdata)
  end
  def get_count_of_records(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_record_module_id(wrecordindex : UInt16, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_record_module_id.unsafe_as(Proc(UInt16, UInt16*, HRESULT)).call(wrecordindex, pwval)
  end
  def get_record_module_size(wrecordindex : UInt16, pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_record_module_size.unsafe_as(Proc(UInt16, UInt32*, HRESULT)).call(wrecordindex, pdwval)
  end
  def get_record_module_info_length(wrecordindex : UInt16, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_module_info_length.unsafe_as(Proc(UInt16, UInt8*, HRESULT)).call(wrecordindex, pbval)
  end
  def get_record_module_info(wrecordindex : UInt16, ppbdata : UInt8**) : HRESULT
    @lpVtbl.value.get_record_module_info.unsafe_as(Proc(UInt16, UInt8**, HRESULT)).call(wrecordindex, ppbdata)
  end
  def get_text_language_code(szcode : UInt8*) : HRESULT
    @lpVtbl.value.get_text_language_code.unsafe_as(Proc(UInt8*, HRESULT)).call(szcode)
  end
  def get_text_w(convmode : DVB_STRCONV_MODE, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_text_w.unsafe_as(Proc(DVB_STRCONV_MODE, UInt8**, HRESULT)).call(convmode, pbstrname)
  end
end
struct LibWin32::IIsdbLogoTransmissionDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_logo_transmission_type(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_logo_transmission_type.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_logo_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_logo_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_logo_version(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_logo_version.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_download_data_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_download_data_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_logo_char_w(convmode : DVB_STRCONV_MODE, pbstrchar : UInt8**) : HRESULT
    @lpVtbl.value.get_logo_char_w.unsafe_as(Proc(DVB_STRCONV_MODE, UInt8**, HRESULT)).call(convmode, pbstrchar)
  end
end
struct LibWin32::IIsdbSIParameterDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_parameter_version(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_parameter_version.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_update_time(pval : MPEG_DATE*) : HRESULT
    @lpVtbl.value.get_update_time.unsafe_as(Proc(MPEG_DATE*, HRESULT)).call(pval)
  end
  def get_record_number_of_table(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_record_number_of_table.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_table_id(brecordindex : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_table_id.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(brecordindex, pbval)
  end
  def get_table_description_length(brecordindex : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_table_description_length.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(brecordindex, pbval)
  end
  def get_table_description_bytes(brecordindex : UInt8, pbbufferlength : UInt8*, pbbuffer : UInt8*) : HRESULT
    @lpVtbl.value.get_table_description_bytes.unsafe_as(Proc(UInt8, UInt8*, UInt8*, HRESULT)).call(brecordindex, pbbufferlength, pbbuffer)
  end
end
struct LibWin32::IIsdbEmergencyInformationDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_count_of_records(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_service_id(brecordindex : UInt8, pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_service_id.unsafe_as(Proc(UInt8, UInt16*, HRESULT)).call(brecordindex, pwval)
  end
  def get_start_end_flag(brecordindex : UInt8, pval : UInt8*) : HRESULT
    @lpVtbl.value.get_start_end_flag.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(brecordindex, pval)
  end
  def get_signal_level(brecordindex : UInt8, pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_signal_level.unsafe_as(Proc(UInt8, UInt8*, HRESULT)).call(brecordindex, pbval)
  end
  def get_area_code(brecordindex : UInt8, ppwval : UInt16**, pbnumareacodes : UInt8*) : HRESULT
    @lpVtbl.value.get_area_code.unsafe_as(Proc(UInt8, UInt16**, UInt8*, HRESULT)).call(brecordindex, ppwval, pbnumareacodes)
  end
end
struct LibWin32::IIsdbCADescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_ca_system_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_ca_system_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_reserved_bits(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_reserved_bits.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_capid(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_capid.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_private_data_bytes(pbbufferlength : UInt8*, pbbuffer : UInt8*) : HRESULT
    @lpVtbl.value.get_private_data_bytes.unsafe_as(Proc(UInt8*, UInt8*, HRESULT)).call(pbbufferlength, pbbuffer)
  end
end
struct LibWin32::IIsdbCAServiceDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_ca_system_id(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_ca_system_id.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_ca_broadcaster_group_id(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_ca_broadcaster_group_id.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_message_control(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_message_control.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_service_ids(pbnumserviceids : UInt8*, pwserviceids : UInt16*) : HRESULT
    @lpVtbl.value.get_service_ids.unsafe_as(Proc(UInt8*, UInt16*, HRESULT)).call(pbnumserviceids, pwserviceids)
  end
end
struct LibWin32::IIsdbHierarchicalTransmissionDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_future_use1(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_future_use1.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_quality_level(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_quality_level.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_future_use2(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_future_use2.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_reference_pid(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_reference_pid.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
end
struct LibWin32::IPBDASiParser
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(punk : IUnknown) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IUnknown, HRESULT)).call(punk)
  end
  def get_eit(dwsize : UInt32, pbuffer : UInt8*, ppeit : IPBDA_EIT*) : HRESULT
    @lpVtbl.value.get_eit.unsafe_as(Proc(UInt32, UInt8*, IPBDA_EIT*, HRESULT)).call(dwsize, pbuffer, ppeit)
  end
  def get_services(dwsize : UInt32, pbuffer : UInt8*, ppservices : IPBDA_Services*) : HRESULT
    @lpVtbl.value.get_services.unsafe_as(Proc(UInt32, UInt8*, IPBDA_Services*, HRESULT)).call(dwsize, pbuffer, ppservices)
  end
end
struct LibWin32::IPBDA_EIT
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(size : UInt32, pbuffer : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(size, pbuffer)
  end
  def get_table_id(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_table_id.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_version_number(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_version_number.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_service_idx(plwval : UInt64*) : HRESULT
    @lpVtbl.value.get_service_idx.unsafe_as(Proc(UInt64*, HRESULT)).call(plwval)
  end
  def get_count_of_records(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_record_event_id(dwrecordindex : UInt32, plwval : UInt64*) : HRESULT
    @lpVtbl.value.get_record_event_id.unsafe_as(Proc(UInt32, UInt64*, HRESULT)).call(dwrecordindex, plwval)
  end
  def get_record_start_time(dwrecordindex : UInt32, pmdtval : MPEG_DATE_AND_TIME*) : HRESULT
    @lpVtbl.value.get_record_start_time.unsafe_as(Proc(UInt32, MPEG_DATE_AND_TIME*, HRESULT)).call(dwrecordindex, pmdtval)
  end
  def get_record_duration(dwrecordindex : UInt32, pmdval : MPEG_TIME*) : HRESULT
    @lpVtbl.value.get_record_duration.unsafe_as(Proc(UInt32, MPEG_TIME*, HRESULT)).call(dwrecordindex, pmdval)
  end
  def get_record_count_of_descriptors(dwrecordindex : UInt32, pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_record_count_of_descriptors.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(dwrecordindex, pdwval)
  end
  def get_record_descriptor_by_index(dwrecordindex : UInt32, dwindex : UInt32, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_index.unsafe_as(Proc(UInt32, UInt32, IGenericDescriptor*, HRESULT)).call(dwrecordindex, dwindex, ppdescriptor)
  end
  def get_record_descriptor_by_tag(dwrecordindex : UInt32, btag : UInt8, pdwcookie : UInt32*, ppdescriptor : IGenericDescriptor*) : HRESULT
    @lpVtbl.value.get_record_descriptor_by_tag.unsafe_as(Proc(UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)).call(dwrecordindex, btag, pdwcookie, ppdescriptor)
  end
end
struct LibWin32::IPBDA_Services
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(size : UInt32, pbuffer : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(UInt32, UInt8*, HRESULT)).call(size, pbuffer)
  end
  def get_count_of_records(pdwval : UInt32*) : HRESULT
    @lpVtbl.value.get_count_of_records.unsafe_as(Proc(UInt32*, HRESULT)).call(pdwval)
  end
  def get_record_by_index(dwrecordindex : UInt32, pul64serviceidx : UInt64*) : HRESULT
    @lpVtbl.value.get_record_by_index.unsafe_as(Proc(UInt32, UInt64*, HRESULT)).call(dwrecordindex, pul64serviceidx)
  end
end
struct LibWin32::IPBDAEntitlementDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_token(ppbtokenbuffer : UInt8**, pdwtokenlength : UInt32*) : HRESULT
    @lpVtbl.value.get_token.unsafe_as(Proc(UInt8**, UInt32*, HRESULT)).call(ppbtokenbuffer, pdwtokenlength)
  end
end
struct LibWin32::IPBDAAttributesDescriptor
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_tag(pbval : UInt8*) : HRESULT
    @lpVtbl.value.get_tag.unsafe_as(Proc(UInt8*, HRESULT)).call(pbval)
  end
  def get_length(pwval : UInt16*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(UInt16*, HRESULT)).call(pwval)
  end
  def get_attribute_payload(ppbattributebuffer : UInt8**, pdwattributelength : UInt32*) : HRESULT
    @lpVtbl.value.get_attribute_payload.unsafe_as(Proc(UInt8**, UInt32*, HRESULT)).call(ppbattributebuffer, pdwattributelength)
  end
end
struct LibWin32::IBDA_TIF_REGISTRATION
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def register_tif_ex(ptifinputpin : IPin, ppvregistrationcontext : UInt32*, ppmpeg2datacontrol : IUnknown*) : HRESULT
    @lpVtbl.value.register_tif_ex.unsafe_as(Proc(IPin, UInt32*, IUnknown*, HRESULT)).call(ptifinputpin, ppvregistrationcontext, ppmpeg2datacontrol)
  end
  def unregister_tif(pvregistrationcontext : UInt32) : HRESULT
    @lpVtbl.value.unregister_tif.unsafe_as(Proc(UInt32, HRESULT)).call(pvregistrationcontext)
  end
end
struct LibWin32::IMPEG2_TIF_CONTROL
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def register_tif(punktif : IUnknown, ppvregistrationcontext : UInt32*) : HRESULT
    @lpVtbl.value.register_tif.unsafe_as(Proc(IUnknown, UInt32*, HRESULT)).call(punktif, ppvregistrationcontext)
  end
  def unregister_tif(pvregistrationcontext : UInt32) : HRESULT
    @lpVtbl.value.unregister_tif.unsafe_as(Proc(UInt32, HRESULT)).call(pvregistrationcontext)
  end
  def add_pi_ds(ulcpids : UInt32, pulpids : UInt32*) : HRESULT
    @lpVtbl.value.add_pi_ds.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(ulcpids, pulpids)
  end
  def delete_pi_ds(ulcpids : UInt32, pulpids : UInt32*) : HRESULT
    @lpVtbl.value.delete_pi_ds.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(ulcpids, pulpids)
  end
  def get_pid_count(pulcpids : UInt32*) : HRESULT
    @lpVtbl.value.get_pid_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pulcpids)
  end
  def get_pi_ds(pulcpids : UInt32*, pulpids : UInt32*) : HRESULT
    @lpVtbl.value.get_pi_ds.unsafe_as(Proc(UInt32*, UInt32*, HRESULT)).call(pulcpids, pulpids)
  end
end
struct LibWin32::ITuneRequestInfo
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_locator_data(request : ITuneRequest) : HRESULT
    @lpVtbl.value.get_locator_data.unsafe_as(Proc(ITuneRequest, HRESULT)).call(request)
  end
  def get_component_data(currentrequest : ITuneRequest) : HRESULT
    @lpVtbl.value.get_component_data.unsafe_as(Proc(ITuneRequest, HRESULT)).call(currentrequest)
  end
  def create_component_list(currentrequest : ITuneRequest) : HRESULT
    @lpVtbl.value.create_component_list.unsafe_as(Proc(ITuneRequest, HRESULT)).call(currentrequest)
  end
  def get_next_program(currentrequest : ITuneRequest, tunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.get_next_program.unsafe_as(Proc(ITuneRequest, ITuneRequest*, HRESULT)).call(currentrequest, tunerequest)
  end
  def get_previous_program(currentrequest : ITuneRequest, tunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.get_previous_program.unsafe_as(Proc(ITuneRequest, ITuneRequest*, HRESULT)).call(currentrequest, tunerequest)
  end
  def get_next_locator(currentrequest : ITuneRequest, tunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.get_next_locator.unsafe_as(Proc(ITuneRequest, ITuneRequest*, HRESULT)).call(currentrequest, tunerequest)
  end
  def get_previous_locator(currentrequest : ITuneRequest, tunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.get_previous_locator.unsafe_as(Proc(ITuneRequest, ITuneRequest*, HRESULT)).call(currentrequest, tunerequest)
  end
end
struct LibWin32::ITuneRequestInfoEx
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_locator_data(request : ITuneRequest) : HRESULT
    @lpVtbl.value.get_locator_data.unsafe_as(Proc(ITuneRequest, HRESULT)).call(request)
  end
  def get_component_data(currentrequest : ITuneRequest) : HRESULT
    @lpVtbl.value.get_component_data.unsafe_as(Proc(ITuneRequest, HRESULT)).call(currentrequest)
  end
  def create_component_list(currentrequest : ITuneRequest) : HRESULT
    @lpVtbl.value.create_component_list.unsafe_as(Proc(ITuneRequest, HRESULT)).call(currentrequest)
  end
  def get_next_program(currentrequest : ITuneRequest, tunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.get_next_program.unsafe_as(Proc(ITuneRequest, ITuneRequest*, HRESULT)).call(currentrequest, tunerequest)
  end
  def get_previous_program(currentrequest : ITuneRequest, tunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.get_previous_program.unsafe_as(Proc(ITuneRequest, ITuneRequest*, HRESULT)).call(currentrequest, tunerequest)
  end
  def get_next_locator(currentrequest : ITuneRequest, tunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.get_next_locator.unsafe_as(Proc(ITuneRequest, ITuneRequest*, HRESULT)).call(currentrequest, tunerequest)
  end
  def get_previous_locator(currentrequest : ITuneRequest, tunerequest : ITuneRequest*) : HRESULT
    @lpVtbl.value.get_previous_locator.unsafe_as(Proc(ITuneRequest, ITuneRequest*, HRESULT)).call(currentrequest, tunerequest)
  end
  def create_component_list_ex(currentrequest : ITuneRequest, ppcurpmt : IUnknown*) : HRESULT
    @lpVtbl.value.create_component_list_ex.unsafe_as(Proc(ITuneRequest, IUnknown*, HRESULT)).call(currentrequest, ppcurpmt)
  end
end
struct LibWin32::ISIInbandEPGEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def si_object_event(pidvb_eit : IDVB_EIT2, dwtable_id : UInt32, dwservice_id : UInt32) : HRESULT
    @lpVtbl.value.si_object_event.unsafe_as(Proc(IDVB_EIT2, UInt32, UInt32, HRESULT)).call(pidvb_eit, dwtable_id, dwservice_id)
  end
end
struct LibWin32::ISIInbandEPG
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def start_siepg_scan : HRESULT
    @lpVtbl.value.start_siepg_scan.unsafe_as(Proc(HRESULT)).call
  end
  def stop_siepg_scan : HRESULT
    @lpVtbl.value.stop_siepg_scan.unsafe_as(Proc(HRESULT)).call
  end
  def is_siepg_scan_running(brunning : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_siepg_scan_running.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(brunning)
  end
end
struct LibWin32::IGuideDataEvent
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def guide_data_acquired : HRESULT
    @lpVtbl.value.guide_data_acquired.unsafe_as(Proc(HRESULT)).call
  end
  def program_changed(varprogramdescriptionid : VARIANT) : HRESULT
    @lpVtbl.value.program_changed.unsafe_as(Proc(VARIANT, HRESULT)).call(varprogramdescriptionid)
  end
  def service_changed(varservicedescriptionid : VARIANT) : HRESULT
    @lpVtbl.value.service_changed.unsafe_as(Proc(VARIANT, HRESULT)).call(varservicedescriptionid)
  end
  def schedule_entry_changed(varscheduleentrydescriptionid : VARIANT) : HRESULT
    @lpVtbl.value.schedule_entry_changed.unsafe_as(Proc(VARIANT, HRESULT)).call(varscheduleentrydescriptionid)
  end
  def program_deleted(varprogramdescriptionid : VARIANT) : HRESULT
    @lpVtbl.value.program_deleted.unsafe_as(Proc(VARIANT, HRESULT)).call(varprogramdescriptionid)
  end
  def service_deleted(varservicedescriptionid : VARIANT) : HRESULT
    @lpVtbl.value.service_deleted.unsafe_as(Proc(VARIANT, HRESULT)).call(varservicedescriptionid)
  end
  def schedule_deleted(varscheduleentrydescriptionid : VARIANT) : HRESULT
    @lpVtbl.value.schedule_deleted.unsafe_as(Proc(VARIANT, HRESULT)).call(varscheduleentrydescriptionid)
  end
end
struct LibWin32::IGuideDataProperty
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_name(pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrname)
  end
  def get_language(idlang : Int32*) : HRESULT
    @lpVtbl.value.get_language.unsafe_as(Proc(Int32*, HRESULT)).call(idlang)
  end
  def get_value(pvar : VARIANT*) : HRESULT
    @lpVtbl.value.get_value.unsafe_as(Proc(VARIANT*, HRESULT)).call(pvar)
  end
end
struct LibWin32::IEnumGuideDataProperties
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def next(celt : UInt32, ppprop : IGuideDataProperty*, pcelt : UInt32*) : HRESULT
    @lpVtbl.value.next.unsafe_as(Proc(UInt32, IGuideDataProperty*, UInt32*, HRESULT)).call(celt, ppprop, pcelt)
  end
  def skip(celt : UInt32) : HRESULT
    @lpVtbl.value.skip.unsafe_as(Proc(UInt32, HRESULT)).call(celt)
  end
  def reset : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(HRESULT)).call
  end
  def clone(ppenum : IEnumGuideDataProperties*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(IEnumGuideDataProperties*, HRESULT)).call(ppenum)
  end
end
struct LibWin32::IEnumTuneRequests
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def next(celt : UInt32, ppprop : ITuneRequest*, pcelt : UInt32*) : HRESULT
    @lpVtbl.value.next.unsafe_as(Proc(UInt32, ITuneRequest*, UInt32*, HRESULT)).call(celt, ppprop, pcelt)
  end
  def skip(celt : UInt32) : HRESULT
    @lpVtbl.value.skip.unsafe_as(Proc(UInt32, HRESULT)).call(celt)
  end
  def reset : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(HRESULT)).call
  end
  def clone(ppenum : IEnumTuneRequests*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(IEnumTuneRequests*, HRESULT)).call(ppenum)
  end
end
struct LibWin32::IGuideData
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_services(ppenumtunerequests : IEnumTuneRequests*) : HRESULT
    @lpVtbl.value.get_services.unsafe_as(Proc(IEnumTuneRequests*, HRESULT)).call(ppenumtunerequests)
  end
  def get_service_properties(ptunerequest : ITuneRequest, ppenumproperties : IEnumGuideDataProperties*) : HRESULT
    @lpVtbl.value.get_service_properties.unsafe_as(Proc(ITuneRequest, IEnumGuideDataProperties*, HRESULT)).call(ptunerequest, ppenumproperties)
  end
  def get_guide_program_i_ds(penumprograms : IEnumVARIANT*) : HRESULT
    @lpVtbl.value.get_guide_program_i_ds.unsafe_as(Proc(IEnumVARIANT*, HRESULT)).call(penumprograms)
  end
  def get_program_properties(varprogramdescriptionid : VARIANT, ppenumproperties : IEnumGuideDataProperties*) : HRESULT
    @lpVtbl.value.get_program_properties.unsafe_as(Proc(VARIANT, IEnumGuideDataProperties*, HRESULT)).call(varprogramdescriptionid, ppenumproperties)
  end
  def get_schedule_entry_i_ds(penumscheduleentries : IEnumVARIANT*) : HRESULT
    @lpVtbl.value.get_schedule_entry_i_ds.unsafe_as(Proc(IEnumVARIANT*, HRESULT)).call(penumscheduleentries)
  end
  def get_schedule_entry_properties(varscheduleentrydescriptionid : VARIANT, ppenumproperties : IEnumGuideDataProperties*) : HRESULT
    @lpVtbl.value.get_schedule_entry_properties.unsafe_as(Proc(VARIANT, IEnumGuideDataProperties*, HRESULT)).call(varscheduleentrydescriptionid, ppenumproperties)
  end
end
struct LibWin32::IGuideDataLoader
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def init(pguidestore : IGuideData) : HRESULT
    @lpVtbl.value.init.unsafe_as(Proc(IGuideData, HRESULT)).call(pguidestore)
  end
  def terminate : HRESULT
    @lpVtbl.value.terminate.unsafe_as(Proc(HRESULT)).call
  end
end
