require "../foundation.cr"
require "../graphics/dxgi/common.cr"
require "../system/com.cr"
require "../graphics/direct3d.cr"
require "../security.cr"

{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link("delayimp")]
{% end %}
@[Link("user32")]
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/IGNORE:4199")]
{% end %}
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/DELAYLOAD:d3d12.dll")]
{% else %}
@[Link("d3d12")]
{% end %}
lib LibWin32
  D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES = 4096_u32
  D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING = 5768_u32
  D3D12_16BIT_INDEX_STRIP_CUT_VALUE = 65535_u32
  D3D12_32BIT_INDEX_STRIP_CUT_VALUE = 4294967295_u32
  D3D12_8BIT_INDEX_STRIP_CUT_VALUE = 255_u32
  D3D12_APPEND_ALIGNED_ELEMENT = 4294967295_u32
  D3D12_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = 9_u32
  D3D12_CLIP_OR_CULL_DISTANCE_COUNT = 8_u32
  D3D12_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = 2_u32
  D3D12_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = 14_u32
  D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = 4_u32
  D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = 15_u32
  D3D12_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT = 16_u32
  D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4_u32
  D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = 15_u32
  D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1_u32
  D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1_u32
  D3D12_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = 64_u32
  D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4_u32
  D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = 1_u32
  D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1_u32
  D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1_u32
  D3D12_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = 32_u32
  D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = 1_u32
  D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = 128_u32
  D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = 1_u32
  D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = 1_u32
  D3D12_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = 128_u32
  D3D12_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = 1_u32
  D3D12_COMMONSHADER_SAMPLER_REGISTER_COUNT = 16_u32
  D3D12_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = 1_u32
  D3D12_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = 1_u32
  D3D12_COMMONSHADER_SAMPLER_SLOT_COUNT = 16_u32
  D3D12_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = 32_u32
  D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENTS = 4_u32
  D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_COMMONSHADER_TEMP_REGISTER_COUNT = 4096_u32
  D3D12_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = 3_u32
  D3D12_COMMONSHADER_TEMP_REGISTER_READ_PORTS = 3_u32
  D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = 10_u32
  D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = -10_i32
  D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = -8_i32
  D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = 7_u32
  D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT = 256_u32
  D3D12_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 256_u32
  D3D12_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = 64_u32
  D3D12_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 240_u32
  D3D12_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = 68_u32
  D3D12_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 224_u32
  D3D12_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = 72_u32
  D3D12_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 208_u32
  D3D12_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = 76_u32
  D3D12_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 192_u32
  D3D12_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP = 84_u32
  D3D12_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 176_u32
  D3D12_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = 92_u32
  D3D12_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 160_u32
  D3D12_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = 100_u32
  D3D12_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 144_u32
  D3D12_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = 112_u32
  D3D12_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 128_u32
  D3D12_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = 128_u32
  D3D12_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 112_u32
  D3D12_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = 144_u32
  D3D12_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 96_u32
  D3D12_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP = 168_u32
  D3D12_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 80_u32
  D3D12_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP = 204_u32
  D3D12_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 64_u32
  D3D12_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = 256_u32
  D3D12_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 48_u32
  D3D12_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = 340_u32
  D3D12_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 32_u32
  D3D12_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = 512_u32
  D3D12_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 16_u32
  D3D12_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = 768_u32
  D3D12_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = 1_u32
  D3D12_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = 256_u32
  D3D12_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = 768_u32
  D3D12_CS_4_X_THREAD_GROUP_MAX_X = 768_u32
  D3D12_CS_4_X_THREAD_GROUP_MAX_Y = 768_u32
  D3D12_CS_4_X_UAV_REGISTER_COUNT = 1_u32
  D3D12_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = 65535_u32
  D3D12_CS_TGSM_REGISTER_COUNT = 8192_u32
  D3D12_CS_TGSM_REGISTER_READS_PER_INST = 1_u32
  D3D12_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = 1_u32
  D3D12_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = 1_u32
  D3D12_CS_THREADGROUPID_REGISTER_COMPONENTS = 3_u32
  D3D12_CS_THREADGROUPID_REGISTER_COUNT = 1_u32
  D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS = 1_u32
  D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT = 1_u32
  D3D12_CS_THREADIDINGROUP_REGISTER_COMPONENTS = 3_u32
  D3D12_CS_THREADIDINGROUP_REGISTER_COUNT = 1_u32
  D3D12_CS_THREADID_REGISTER_COMPONENTS = 3_u32
  D3D12_CS_THREADID_REGISTER_COUNT = 1_u32
  D3D12_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = 1024_u32
  D3D12_CS_THREAD_GROUP_MAX_X = 1024_u32
  D3D12_CS_THREAD_GROUP_MAX_Y = 1024_u32
  D3D12_CS_THREAD_GROUP_MAX_Z = 64_u32
  D3D12_CS_THREAD_GROUP_MIN_X = 1_u32
  D3D12_CS_THREAD_GROUP_MIN_Y = 1_u32
  D3D12_CS_THREAD_GROUP_MIN_Z = 1_u32
  D3D12_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = 16384_u32
  D3D12_DEFAULT_BLEND_FACTOR_ALPHA = "1.0_f32"
  D3D12_DEFAULT_BLEND_FACTOR_BLUE = "1.0_f32"
  D3D12_DEFAULT_BLEND_FACTOR_GREEN = "1.0_f32"
  D3D12_DEFAULT_BLEND_FACTOR_RED = "1.0_f32"
  D3D12_DEFAULT_BORDER_COLOR_COMPONENT = "0.0_f32"
  D3D12_DEFAULT_DEPTH_BIAS = 0_i32
  D3D12_DEFAULT_DEPTH_BIAS_CLAMP = "0.0_f32"
  D3D12_DEFAULT_MAX_ANISOTROPY = 16_u32
  D3D12_DEFAULT_MIP_LOD_BIAS = "0.0_f32"
  D3D12_DEFAULT_MSAA_RESOURCE_PLACEMENT_ALIGNMENT = 4194304_u32
  D3D12_DEFAULT_RENDER_TARGET_ARRAY_INDEX = 0_u32
  D3D12_DEFAULT_RESOURCE_PLACEMENT_ALIGNMENT = 65536_u32
  D3D12_DEFAULT_SAMPLE_MASK = 4294967295_u32
  D3D12_DEFAULT_SCISSOR_ENDX = 0_u32
  D3D12_DEFAULT_SCISSOR_ENDY = 0_u32
  D3D12_DEFAULT_SCISSOR_STARTX = 0_u32
  D3D12_DEFAULT_SCISSOR_STARTY = 0_u32
  D3D12_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = "0.0_f32"
  D3D12_DEFAULT_STENCIL_READ_MASK = 255_u32
  D3D12_DEFAULT_STENCIL_REFERENCE = 0_u32
  D3D12_DEFAULT_STENCIL_WRITE_MASK = 255_u32
  D3D12_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = 0_u32
  D3D12_DEFAULT_VIEWPORT_HEIGHT = 0_u32
  D3D12_DEFAULT_VIEWPORT_MAX_DEPTH = "0.0_f32"
  D3D12_DEFAULT_VIEWPORT_MIN_DEPTH = "0.0_f32"
  D3D12_DEFAULT_VIEWPORT_TOPLEFTX = 0_u32
  D3D12_DEFAULT_VIEWPORT_TOPLEFTY = 0_u32
  D3D12_DEFAULT_VIEWPORT_WIDTH = 0_u32
  D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND = 4294967295_u32
  D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_END = 4294967287_u32
  D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_START = 4294967280_u32
  D3D12_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968_u32
  D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS = 4_u32
  D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COUNT = 32_u32
  D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST = 2_u32
  D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS = 1_u32
  D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS = 3_u32
  D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT = 1_u32
  D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST = 2_u32
  D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS = 1_u32
  D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4_u32
  D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT = 32_u32
  D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2_u32
  D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1_u32
  D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1_u32
  D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1_u32
  D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2_u32
  D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1_u32
  D3D12_DS_OUTPUT_REGISTER_COMPONENTS = 4_u32
  D3D12_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_DS_OUTPUT_REGISTER_COUNT = 32_u32
  D3D12_FLOAT16_FUSED_TOLERANCE_IN_ULP = "0.6_f64"
  D3D12_FLOAT32_MAX = "3.4028235e+38_f32"
  D3D12_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = "0.6_f32"
  D3D12_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = "2.4_f32"
  D3D12_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = "1.0_f32"
  D3D12_FLOAT_TO_SRGB_OFFSET = "0.055_f32"
  D3D12_FLOAT_TO_SRGB_SCALE_1 = "12.92_f32"
  D3D12_FLOAT_TO_SRGB_SCALE_2 = "1.055_f32"
  D3D12_FLOAT_TO_SRGB_THRESHOLD = "0.0031308_f32"
  D3D12_FTOI_INSTRUCTION_MAX_INPUT = "2147483600.0_f32"
  D3D12_FTOI_INSTRUCTION_MIN_INPUT = "-2147483600.0_f32"
  D3D12_FTOU_INSTRUCTION_MAX_INPUT = "4294967300.0_f32"
  D3D12_FTOU_INSTRUCTION_MIN_INPUT = "0.0_f32"
  D3D12_GS_INPUT_INSTANCE_ID_READS_PER_INST = 2_u32
  D3D12_GS_INPUT_INSTANCE_ID_READ_PORTS = 1_u32
  D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS = 1_u32
  D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COUNT = 1_u32
  D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = 1_u32
  D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_GS_INPUT_PRIM_CONST_REGISTER_COUNT = 1_u32
  D3D12_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = 2_u32
  D3D12_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = 1_u32
  D3D12_GS_INPUT_REGISTER_COMPONENTS = 4_u32
  D3D12_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_GS_INPUT_REGISTER_COUNT = 32_u32
  D3D12_GS_INPUT_REGISTER_READS_PER_INST = 2_u32
  D3D12_GS_INPUT_REGISTER_READ_PORTS = 1_u32
  D3D12_GS_INPUT_REGISTER_VERTICES = 32_u32
  D3D12_GS_MAX_INSTANCE_COUNT = 32_u32
  D3D12_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES = 1024_u32
  D3D12_GS_OUTPUT_ELEMENTS = 32_u32
  D3D12_GS_OUTPUT_REGISTER_COMPONENTS = 4_u32
  D3D12_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_GS_OUTPUT_REGISTER_COUNT = 32_u32
  D3D12_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT = 32_u32
  D3D12_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT = 32_u32
  D3D12_HS_CONTROL_POINT_REGISTER_COMPONENTS = 4_u32
  D3D12_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_HS_CONTROL_POINT_REGISTER_READS_PER_INST = 2_u32
  D3D12_HS_CONTROL_POINT_REGISTER_READ_PORTS = 1_u32
  D3D12_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND = 4294967295_u32
  D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS = 1_u32
  D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT = 1_u32
  D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST = 2_u32
  D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS = 1_u32
  D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS = 1_u32
  D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT = 1_u32
  D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST = 2_u32
  D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS = 1_u32
  D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1_u32
  D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1_u32
  D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2_u32
  D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1_u32
  D3D12_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND = 4294967295_u32
  D3D12_HS_MAXTESSFACTOR_LOWER_BOUND = "1.0_f32"
  D3D12_HS_MAXTESSFACTOR_UPPER_BOUND = "64.0_f32"
  D3D12_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968_u32
  D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS = 1_u32
  D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT = 1_u32
  D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST = 2_u32
  D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS = 1_u32
  D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4_u32
  D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT = 32_u32
  D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2_u32
  D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1_u32
  D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS = 128_u32
  D3D12_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = 0_u32
  D3D12_IA_DEFAULT_PRIMITIVE_TOPOLOGY = 0_u32
  D3D12_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = 0_u32
  D3D12_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = 1_u32
  D3D12_IA_INSTANCE_ID_BIT_COUNT = 32_u32
  D3D12_IA_INTEGER_ARITHMETIC_BIT_COUNT = 32_u32
  D3D12_IA_PATCH_MAX_CONTROL_POINT_COUNT = 32_u32
  D3D12_IA_PRIMITIVE_ID_BIT_COUNT = 32_u32
  D3D12_IA_VERTEX_ID_BIT_COUNT = 32_u32
  D3D12_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 32_u32
  D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 128_u32
  D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 32_u32
  D3D12_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = 4294967295_u32
  D3D12_INTEGER_DIVIDE_BY_ZERO_REMAINDER = 4294967295_u32
  D3D12_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = 4294967295_u32
  D3D12_KEEP_UNORDERED_ACCESS_VIEWS = 4294967295_u32
  D3D12_LINEAR_GAMMA = "1.0_f32"
  D3D12_MAJOR_VERSION = 12_u32
  D3D12_MAX_BORDER_COLOR_COMPONENT = "1.0_f32"
  D3D12_MAX_DEPTH = "1.0_f32"
  D3D12_MAX_LIVE_STATIC_SAMPLERS = 2032_u32
  D3D12_MAX_MAXANISOTROPY = 16_u32
  D3D12_MAX_MULTISAMPLE_SAMPLE_COUNT = 32_u32
  D3D12_MAX_POSITION_VALUE = "3.4028236e+34_f32"
  D3D12_MAX_ROOT_COST = 64_u32
  D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_1 = 1000000_u32
  D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_2 = 1000000_u32
  D3D12_MAX_SHADER_VISIBLE_SAMPLER_HEAP_SIZE = 2048_u32
  D3D12_MAX_TEXTURE_DIMENSION_2_TO_EXP = 17_u32
  D3D12_MAX_VIEW_INSTANCE_COUNT = 4_u32
  D3D12_MINOR_VERSION = 0_u32
  D3D12_MIN_BORDER_COLOR_COMPONENT = "0.0_f32"
  D3D12_MIN_DEPTH = "0.0_f32"
  D3D12_MIN_MAXANISOTROPY = 0_u32
  D3D12_MIP_LOD_BIAS_MAX = "15.99_f32"
  D3D12_MIP_LOD_BIAS_MIN = "-16.0_f32"
  D3D12_MIP_LOD_FRACTIONAL_BIT_COUNT = 8_u32
  D3D12_MIP_LOD_RANGE_BIT_COUNT = 8_u32
  D3D12_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = "1.4_f32"
  D3D12_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = 0_u32
  D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_END = 4294967295_u32
  D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_START = 4294967288_u32
  D3D12_PACKED_TILE = 4294967295_u32
  D3D12_PIXEL_ADDRESS_RANGE_BIT_COUNT = 15_u32
  D3D12_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = 16_u32
  D3D12_PS_CS_UAV_REGISTER_COMPONENTS = 1_u32
  D3D12_PS_CS_UAV_REGISTER_COUNT = 8_u32
  D3D12_PS_CS_UAV_REGISTER_READS_PER_INST = 1_u32
  D3D12_PS_CS_UAV_REGISTER_READ_PORTS = 1_u32
  D3D12_PS_FRONTFACING_DEFAULT_VALUE = 4294967295_u32
  D3D12_PS_FRONTFACING_FALSE_VALUE = 0_u32
  D3D12_PS_FRONTFACING_TRUE_VALUE = 4294967295_u32
  D3D12_PS_INPUT_REGISTER_COMPONENTS = 4_u32
  D3D12_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_PS_INPUT_REGISTER_COUNT = 32_u32
  D3D12_PS_INPUT_REGISTER_READS_PER_INST = 2_u32
  D3D12_PS_INPUT_REGISTER_READ_PORTS = 1_u32
  D3D12_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = "0.0_f32"
  D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = 1_u32
  D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_PS_OUTPUT_DEPTH_REGISTER_COUNT = 1_u32
  D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENTS = 1_u32
  D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_PS_OUTPUT_MASK_REGISTER_COUNT = 1_u32
  D3D12_PS_OUTPUT_REGISTER_COMPONENTS = 4_u32
  D3D12_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_PS_OUTPUT_REGISTER_COUNT = 8_u32
  D3D12_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = "0.5_f32"
  D3D12_RAW_UAV_SRV_BYTE_ALIGNMENT = 16_u32
  D3D12_RAYTRACING_AABB_BYTE_ALIGNMENT = 8_u32
  D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BYTE_ALIGNMENT = 256_u32
  D3D12_RAYTRACING_INSTANCE_DESCS_BYTE_ALIGNMENT = 16_u32
  D3D12_RAYTRACING_MAX_ATTRIBUTE_SIZE_IN_BYTES = 32_u32
  D3D12_RAYTRACING_MAX_DECLARABLE_TRACE_RECURSION_DEPTH = 31_u32
  D3D12_RAYTRACING_MAX_GEOMETRIES_PER_BOTTOM_LEVEL_ACCELERATION_STRUCTURE = 16777216_u32
  D3D12_RAYTRACING_MAX_INSTANCES_PER_TOP_LEVEL_ACCELERATION_STRUCTURE = 16777216_u32
  D3D12_RAYTRACING_MAX_PRIMITIVES_PER_BOTTOM_LEVEL_ACCELERATION_STRUCTURE = 536870912_u32
  D3D12_RAYTRACING_MAX_RAY_GENERATION_SHADER_THREADS = 1073741824_u32
  D3D12_RAYTRACING_MAX_SHADER_RECORD_STRIDE = 4096_u32
  D3D12_RAYTRACING_SHADER_RECORD_BYTE_ALIGNMENT = 32_u32
  D3D12_RAYTRACING_SHADER_TABLE_BYTE_ALIGNMENT = 64_u32
  D3D12_RAYTRACING_TRANSFORM3X4_BYTE_ALIGNMENT = 16_u32
  D3D12_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = 4096_u32
  D3D12_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = 27_u32
  D3D12_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = 4096_u32
  D3D12_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = 4096_u32
  D3D12_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 32_u32
  D3D12_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = 32_u32
  D3D12_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = 16384_u32
  D3D12_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = 1024_u32
  D3D12_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = 4096_u32
  D3D12_REQ_MAXANISOTROPY = 16_u32
  D3D12_REQ_MIP_LEVELS = 15_u32
  D3D12_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = 2048_u32
  D3D12_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = 4096_u32
  D3D12_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = 16384_u32
  D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = 128_u32
  D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM = "0.25_f32"
  D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM = 2048_u32
  D3D12_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = 20_u32
  D3D12_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = 4096_u32
  D3D12_REQ_SUBRESOURCES = 30720_u32
  D3D12_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = 2048_u32
  D3D12_REQ_TEXTURE1D_U_DIMENSION = 16384_u32
  D3D12_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = 2048_u32
  D3D12_REQ_TEXTURE2D_U_OR_V_DIMENSION = 16384_u32
  D3D12_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 2048_u32
  D3D12_REQ_TEXTURECUBE_DIMENSION = 16384_u32
  D3D12_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0_u32
  D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES = 4294967295_u32
  D3D12_RS_SET_SHADING_RATE_COMBINER_COUNT = 2_u32
  D3D12_SDK_VERSION = 5_u32
  D3D12_SHADER_IDENTIFIER_SIZE_IN_BYTES = 32_u32
  D3D12_SHADER_MAJOR_VERSION = 5_u32
  D3D12_SHADER_MAX_INSTANCES = 65535_u32
  D3D12_SHADER_MAX_INTERFACES = 253_u32
  D3D12_SHADER_MAX_INTERFACE_CALL_SITES = 4096_u32
  D3D12_SHADER_MAX_TYPES = 65535_u32
  D3D12_SHADER_MINOR_VERSION = 1_u32
  D3D12_SHIFT_INSTRUCTION_PAD_VALUE = 0_u32
  D3D12_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = 5_u32
  D3D12_SIMULTANEOUS_RENDER_TARGET_COUNT = 8_u32
  D3D12_SMALL_MSAA_RESOURCE_PLACEMENT_ALIGNMENT = 65536_u32
  D3D12_SMALL_RESOURCE_PLACEMENT_ALIGNMENT = 4096_u32
  D3D12_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048_u32
  D3D12_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 512_u32
  D3D12_SO_BUFFER_SLOT_COUNT = 4_u32
  D3D12_SO_DDI_REGISTER_INDEX_DENOTING_GAP = 4294967295_u32
  D3D12_SO_NO_RASTERIZED_STREAM = 4294967295_u32
  D3D12_SO_OUTPUT_COMPONENT_COUNT = 128_u32
  D3D12_SO_STREAM_COUNT = 4_u32
  D3D12_SPEC_DATE_DAY = 14_u32
  D3D12_SPEC_DATE_MONTH = 11_u32
  D3D12_SPEC_DATE_YEAR = 2014_u32
  D3D12_SPEC_VERSION = "1.16_f64"
  D3D12_SRGB_GAMMA = "2.2_f32"
  D3D12_SRGB_TO_FLOAT_DENOMINATOR_1 = "12.92_f32"
  D3D12_SRGB_TO_FLOAT_DENOMINATOR_2 = "1.055_f32"
  D3D12_SRGB_TO_FLOAT_EXPONENT = "2.4_f32"
  D3D12_SRGB_TO_FLOAT_OFFSET = "0.055_f32"
  D3D12_SRGB_TO_FLOAT_THRESHOLD = "0.04045_f32"
  D3D12_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = "0.5_f32"
  D3D12_STANDARD_COMPONENT_BIT_COUNT = 32_u32
  D3D12_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = 64_u32
  D3D12_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4_u32
  D3D12_STANDARD_PIXEL_COMPONENT_COUNT = 128_u32
  D3D12_STANDARD_PIXEL_ELEMENT_COUNT = 32_u32
  D3D12_STANDARD_VECTOR_SIZE = 4_u32
  D3D12_STANDARD_VERTEX_ELEMENT_COUNT = 32_u32
  D3D12_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = 64_u32
  D3D12_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8_u32
  D3D12_SUBTEXEL_FRACTIONAL_BIT_COUNT = 8_u32
  D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_END = 4294967295_u32
  D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_START = 4294967280_u32
  D3D12_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR = 64_u32
  D3D12_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR = 64_u32
  D3D12_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR = 63_u32
  D3D12_TESSELLATOR_MAX_TESSELLATION_FACTOR = 64_u32
  D3D12_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR = 2_u32
  D3D12_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR = 1_u32
  D3D12_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = 1_u32
  D3D12_TEXEL_ADDRESS_RANGE_BIT_COUNT = 16_u32
  D3D12_TEXTURE_DATA_PITCH_ALIGNMENT = 256_u32
  D3D12_TEXTURE_DATA_PLACEMENT_ALIGNMENT = 512_u32
  D3D12_TILED_RESOURCE_TILE_SIZE_IN_BYTES = 65536_u32
  D3D12_TRACKED_WORKLOAD_MAX_INSTANCES = 32_u32
  D3D12_UAV_COUNTER_PLACEMENT_ALIGNMENT = 4096_u32
  D3D12_UAV_SLOT_COUNT = 64_u32
  D3D12_UNBOUND_MEMORY_ACCESS_RESULT = 0_u32
  D3D12_VIDEO_DECODE_MAX_ARGUMENTS = 10_u32
  D3D12_VIDEO_DECODE_MAX_HISTOGRAM_COMPONENTS = 4_u32
  D3D12_VIDEO_DECODE_MIN_BITSTREAM_OFFSET_ALIGNMENT = 256_u32
  D3D12_VIDEO_DECODE_MIN_HISTOGRAM_OFFSET_ALIGNMENT = 256_u32
  D3D12_VIDEO_DECODE_STATUS_MACROBLOCKS_AFFECTED_UNKNOWN = 4294967295_u32
  D3D12_VIDEO_PROCESS_MAX_FILTERS = 32_u32
  D3D12_VIDEO_PROCESS_STEREO_VIEWS = 2_u32
  D3D12_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = 15_u32
  D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16_u32
  D3D12_VIEWPORT_BOUNDS_MAX = 32767_u32
  D3D12_VIEWPORT_BOUNDS_MIN = -32768_i32
  D3D12_VS_INPUT_REGISTER_COMPONENTS = 4_u32
  D3D12_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_VS_INPUT_REGISTER_COUNT = 32_u32
  D3D12_VS_INPUT_REGISTER_READS_PER_INST = 2_u32
  D3D12_VS_INPUT_REGISTER_READ_PORTS = 1_u32
  D3D12_VS_OUTPUT_REGISTER_COMPONENTS = 4_u32
  D3D12_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_VS_OUTPUT_REGISTER_COUNT = 32_u32
  D3D12_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = 10_u32
  D3D12_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 25_u32
  D3D12_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = 25_u32
  D3D12_SHADER_COMPONENT_MAPPING_MASK = 7_u32
  D3D12_SHADER_COMPONENT_MAPPING_SHIFT = 3_u32
  D3D12_FILTER_REDUCTION_TYPE_MASK = 3_u32
  D3D12_FILTER_REDUCTION_TYPE_SHIFT = 7_u32
  D3D12_FILTER_TYPE_MASK = 3_u32
  D3D12_MIN_FILTER_SHIFT = 4_u32
  D3D12_MAG_FILTER_SHIFT = 2_u32
  D3D12_MIP_FILTER_SHIFT = 0_u32
  D3D12_ANISOTROPIC_FILTERING_BIT = 64_u32
  LUID_DEFINED = 1_u32
  D3D12_PROTECTED_RESOURCES_SESSION_HARDWARE_PROTECTED = "62b0084e-c70e-4daa-a109-30ff8d5a0482"
  CLSID_D3D12Debug = "f2352aeb-dd84-49fe-b97b-a9dcfdcc1b4f"
  CLSID_D3D12Tools = "e38216b1-3c8c-4833-aa09-0a06b65d96c8"
  CLSID_D3D12DeviceRemovedExtendedData = "4a75bbc4-9ff4-4ad8-9f18-abae84dc5ff2"
  CLSID_D3D12SDKConfiguration = "7cda6aca-a03e-49c8-9458-0334d20e07ce"
  D3D12_SHADING_RATE_X_AXIS_SHIFT = 2_u32
  D3D12_SHADING_RATE_VALID_MASK = 3_u32
  WKPDID_D3DAutoDebugObjectNameW = "d4902e36-757a-4942-9594-b6769afa43cd"
  DXGI_DEBUG_D3D12 = "cf59a98c-a950-4326-91ef-9bbaa17bfd95"
  D3D12_INFO_QUEUE_DEFAULT_MESSAGE_COUNT_LIMIT = 1024_u32
  D3D_SHADER_REQUIRES_STENCIL_REF = 512_u32
  D3D_SHADER_REQUIRES_INNER_COVERAGE = 1024_u32
  D3D_SHADER_REQUIRES_TYPED_UAV_LOAD_ADDITIONAL_FORMATS = 2048_u32
  D3D_SHADER_REQUIRES_ROVS = 4096_u32
  D3D_SHADER_REQUIRES_VIEWPORT_AND_RT_ARRAY_INDEX_FROM_ANY_SHADER_FEEDING_RASTERIZER = 8192_u32
  D3D_SHADER_REQUIRES_WAVE_OPS = 16384_u32
  D3D_SHADER_REQUIRES_INT64_OPS = 32768_u32
  D3D_SHADER_REQUIRES_VIEW_ID = 65536_u32
  D3D_SHADER_REQUIRES_BARYCENTRICS = 131072_u32
  D3D_SHADER_REQUIRES_NATIVE_16BIT_OPS = 262144_u32
  D3D_SHADER_REQUIRES_SHADING_RATE = 524288_u32
  D3D_SHADER_REQUIRES_RAYTRACING_TIER_1_1 = 1048576_u32
  D3D_SHADER_REQUIRES_SAMPLER_FEEDBACK = 2097152_u32
  D3D_SHADER_REQUIRES_ATOMIC_INT64_ON_TYPED_RESOURCE = 4194304_u32
  D3D_SHADER_REQUIRES_ATOMIC_INT64_ON_GROUP_SHARED = 8388608_u32
  D3D_SHADER_REQUIRES_DERIVATIVES_IN_MESH_AND_AMPLIFICATION_SHADERS = 16777216_u32
  D3D_SHADER_REQUIRES_RESOURCE_DESCRIPTOR_HEAP_INDEXING = 33554432_u32
  D3D_SHADER_REQUIRES_SAMPLER_DESCRIPTOR_HEAP_INDEXING = 67108864_u32
  D3D_SHADER_REQUIRES_WAVE_MMA = 134217728_u32
  D3D_SHADER_REQUIRES_ATOMIC_INT64_ON_DESCRIPTOR_HEAP_RESOURCE = 268435456_u32
  D3D12ExperimentalShaderModels = "76f5573e-f13a-40f5-b297-81ce9e18933f"
  D3D12TiledResourceTier4 = "c9c4725f-a81a-4f56-8c5b-c51039d694fb"
  D3D12MetaCommand = "c734c97e-8077-48c8-9fdc-d9d1dd31dd77"

  alias PFN_D3D12_SERIALIZE_ROOT_SIGNATURE = Proc(D3D12_ROOT_SIGNATURE_DESC*, D3D_ROOT_SIGNATURE_VERSION, ID3DBlob*, ID3DBlob*, HRESULT)
  alias PFN_D3D12_CREATE_ROOT_SIGNATURE_DESERIALIZER = Proc(Void*, LibC::UINT_PTR, Guid*, Void**, HRESULT)
  alias PFN_D3D12_SERIALIZE_VERSIONED_ROOT_SIGNATURE = Proc(D3D12_VERSIONED_ROOT_SIGNATURE_DESC*, ID3DBlob*, ID3DBlob*, HRESULT)
  alias PFN_D3D12_CREATE_VERSIONED_ROOT_SIGNATURE_DESERIALIZER = Proc(Void*, LibC::UINT_PTR, Guid*, Void**, HRESULT)
  alias D3D12MessageFunc = Proc(D3D12_MESSAGE_CATEGORY, D3D12_MESSAGE_SEVERITY, D3D12_MESSAGE_ID, PSTR, Void*, Void)
  alias PFN_D3D12_CREATE_DEVICE = Proc(IUnknown, D3D_FEATURE_LEVEL, Guid*, Void**, HRESULT)
  alias PFN_D3D12_GET_DEBUG_INTERFACE = Proc(Guid*, Void**, HRESULT)
  alias PFN_D3D12_GET_INTERFACE = Proc(Guid*, Guid*, Void**, HRESULT)


  enum D3D12_COMMAND_LIST_TYPE : Int32
    D3D12_COMMAND_LIST_TYPE_DIRECT = 0
    D3D12_COMMAND_LIST_TYPE_BUNDLE = 1
    D3D12_COMMAND_LIST_TYPE_COMPUTE = 2
    D3D12_COMMAND_LIST_TYPE_COPY = 3
    D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE = 4
    D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS = 5
    D3D12_COMMAND_LIST_TYPE_VIDEO_ENCODE = 6
  end

  enum D3D12_COMMAND_QUEUE_FLAGS : UInt32
    D3D12_COMMAND_QUEUE_FLAG_NONE = 0
    D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT = 1
  end

  enum D3D12_COMMAND_QUEUE_PRIORITY : Int32
    D3D12_COMMAND_QUEUE_PRIORITY_NORMAL = 0
    D3D12_COMMAND_QUEUE_PRIORITY_HIGH = 100
    D3D12_COMMAND_QUEUE_PRIORITY_GLOBAL_REALTIME = 10000
  end

  enum D3D12_PRIMITIVE_TOPOLOGY_TYPE : Int32
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED = 0
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT = 1
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE = 2
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE = 3
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH = 4
  end

  enum D3D12_INPUT_CLASSIFICATION : Int32
    D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA = 0
    D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA = 1
  end

  enum D3D12_FILL_MODE : Int32
    D3D12_FILL_MODE_WIREFRAME = 2
    D3D12_FILL_MODE_SOLID = 3
  end

  enum D3D12_CULL_MODE : Int32
    D3D12_CULL_MODE_NONE = 1
    D3D12_CULL_MODE_FRONT = 2
    D3D12_CULL_MODE_BACK = 3
  end

  enum D3D12_COMPARISON_FUNC : Int32
    D3D12_COMPARISON_FUNC_NEVER = 1
    D3D12_COMPARISON_FUNC_LESS = 2
    D3D12_COMPARISON_FUNC_EQUAL = 3
    D3D12_COMPARISON_FUNC_LESS_EQUAL = 4
    D3D12_COMPARISON_FUNC_GREATER = 5
    D3D12_COMPARISON_FUNC_NOT_EQUAL = 6
    D3D12_COMPARISON_FUNC_GREATER_EQUAL = 7
    D3D12_COMPARISON_FUNC_ALWAYS = 8
  end

  enum D3D12_DEPTH_WRITE_MASK : Int32
    D3D12_DEPTH_WRITE_MASK_ZERO = 0
    D3D12_DEPTH_WRITE_MASK_ALL = 1
  end

  enum D3D12_STENCIL_OP : Int32
    D3D12_STENCIL_OP_KEEP = 1
    D3D12_STENCIL_OP_ZERO = 2
    D3D12_STENCIL_OP_REPLACE = 3
    D3D12_STENCIL_OP_INCR_SAT = 4
    D3D12_STENCIL_OP_DECR_SAT = 5
    D3D12_STENCIL_OP_INVERT = 6
    D3D12_STENCIL_OP_INCR = 7
    D3D12_STENCIL_OP_DECR = 8
  end

  enum D3D12_BLEND : Int32
    D3D12_BLEND_ZERO = 1
    D3D12_BLEND_ONE = 2
    D3D12_BLEND_SRC_COLOR = 3
    D3D12_BLEND_INV_SRC_COLOR = 4
    D3D12_BLEND_SRC_ALPHA = 5
    D3D12_BLEND_INV_SRC_ALPHA = 6
    D3D12_BLEND_DEST_ALPHA = 7
    D3D12_BLEND_INV_DEST_ALPHA = 8
    D3D12_BLEND_DEST_COLOR = 9
    D3D12_BLEND_INV_DEST_COLOR = 10
    D3D12_BLEND_SRC_ALPHA_SAT = 11
    D3D12_BLEND_BLEND_FACTOR = 14
    D3D12_BLEND_INV_BLEND_FACTOR = 15
    D3D12_BLEND_SRC1_COLOR = 16
    D3D12_BLEND_INV_SRC1_COLOR = 17
    D3D12_BLEND_SRC1_ALPHA = 18
    D3D12_BLEND_INV_SRC1_ALPHA = 19
  end

  enum D3D12_BLEND_OP : Int32
    D3D12_BLEND_OP_ADD = 1
    D3D12_BLEND_OP_SUBTRACT = 2
    D3D12_BLEND_OP_REV_SUBTRACT = 3
    D3D12_BLEND_OP_MIN = 4
    D3D12_BLEND_OP_MAX = 5
  end

  enum D3D12_COLOR_WRITE_ENABLE : Int32
    D3D12_COLOR_WRITE_ENABLE_RED = 1
    D3D12_COLOR_WRITE_ENABLE_GREEN = 2
    D3D12_COLOR_WRITE_ENABLE_BLUE = 4
    D3D12_COLOR_WRITE_ENABLE_ALPHA = 8
    D3D12_COLOR_WRITE_ENABLE_ALL = 15
  end

  enum D3D12_LOGIC_OP : Int32
    D3D12_LOGIC_OP_CLEAR = 0
    D3D12_LOGIC_OP_SET = 1
    D3D12_LOGIC_OP_COPY = 2
    D3D12_LOGIC_OP_COPY_INVERTED = 3
    D3D12_LOGIC_OP_NOOP = 4
    D3D12_LOGIC_OP_INVERT = 5
    D3D12_LOGIC_OP_AND = 6
    D3D12_LOGIC_OP_NAND = 7
    D3D12_LOGIC_OP_OR = 8
    D3D12_LOGIC_OP_NOR = 9
    D3D12_LOGIC_OP_XOR = 10
    D3D12_LOGIC_OP_EQUIV = 11
    D3D12_LOGIC_OP_AND_REVERSE = 12
    D3D12_LOGIC_OP_AND_INVERTED = 13
    D3D12_LOGIC_OP_OR_REVERSE = 14
    D3D12_LOGIC_OP_OR_INVERTED = 15
  end

  enum D3D12_CONSERVATIVE_RASTERIZATION_MODE : Int32
    D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF = 0
    D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON = 1
  end

  enum D3D12_INDEX_BUFFER_STRIP_CUT_VALUE : Int32
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED = 0
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF = 1
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF = 2
  end

  enum D3D12_PIPELINE_STATE_FLAGS : UInt32
    D3D12_PIPELINE_STATE_FLAG_NONE = 0
    D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG = 1
  end

  enum D3D12_PIPELINE_STATE_SUBOBJECT_TYPE : Int32
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE = 0
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS = 1
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS = 2
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS = 3
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS = 4
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS = 5
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS = 6
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT = 7
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND = 8
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK = 9
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER = 10
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL = 11
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT = 12
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE = 13
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY = 14
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS = 15
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT = 16
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC = 17
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK = 18
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO = 19
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS = 20
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1 = 21
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING = 22
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_AS = 24
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MS = 25
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MAX_VALID = 26
  end

  enum D3D12_FEATURE : Int32
    D3D12_FEATURE_D3D12_OPTIONS = 0
    D3D12_FEATURE_ARCHITECTURE = 1
    D3D12_FEATURE_FEATURE_LEVELS = 2
    D3D12_FEATURE_FORMAT_SUPPORT = 3
    D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS = 4
    D3D12_FEATURE_FORMAT_INFO = 5
    D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT = 6
    D3D12_FEATURE_SHADER_MODEL = 7
    D3D12_FEATURE_D3D12_OPTIONS1 = 8
    D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_SUPPORT = 10
    D3D12_FEATURE_ROOT_SIGNATURE = 12
    D3D12_FEATURE_ARCHITECTURE1 = 16
    D3D12_FEATURE_D3D12_OPTIONS2 = 18
    D3D12_FEATURE_SHADER_CACHE = 19
    D3D12_FEATURE_COMMAND_QUEUE_PRIORITY = 20
    D3D12_FEATURE_D3D12_OPTIONS3 = 21
    D3D12_FEATURE_EXISTING_HEAPS = 22
    D3D12_FEATURE_D3D12_OPTIONS4 = 23
    D3D12_FEATURE_SERIALIZATION = 24
    D3D12_FEATURE_CROSS_NODE = 25
    D3D12_FEATURE_D3D12_OPTIONS5 = 27
    D3D12_FEATURE_DISPLAYABLE = 28
    D3D12_FEATURE_D3D12_OPTIONS6 = 30
    D3D12_FEATURE_QUERY_META_COMMAND = 31
    D3D12_FEATURE_D3D12_OPTIONS7 = 32
    D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPE_COUNT = 33
    D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPES = 34
    D3D12_FEATURE_D3D12_OPTIONS8 = 36
    D3D12_FEATURE_D3D12_OPTIONS9 = 37
    D3D12_FEATURE_D3D12_OPTIONS10 = 39
    D3D12_FEATURE_D3D12_OPTIONS11 = 40
  end

  enum D3D12_SHADER_MIN_PRECISION_SUPPORT : UInt32
    D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE = 0
    D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT = 1
    D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT = 2
  end

  enum D3D12_TILED_RESOURCES_TIER : Int32
    D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED = 0
    D3D12_TILED_RESOURCES_TIER_1 = 1
    D3D12_TILED_RESOURCES_TIER_2 = 2
    D3D12_TILED_RESOURCES_TIER_3 = 3
    D3D12_TILED_RESOURCES_TIER_4 = 4
  end

  enum D3D12_RESOURCE_BINDING_TIER : Int32
    D3D12_RESOURCE_BINDING_TIER_1 = 1
    D3D12_RESOURCE_BINDING_TIER_2 = 2
    D3D12_RESOURCE_BINDING_TIER_3 = 3
  end

  enum D3D12_CONSERVATIVE_RASTERIZATION_TIER : Int32
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED = 0
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_1 = 1
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_2 = 2
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_3 = 3
  end

  enum D3D12_FORMAT_SUPPORT1 : UInt32
    D3D12_FORMAT_SUPPORT1_NONE = 0
    D3D12_FORMAT_SUPPORT1_BUFFER = 1
    D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER = 2
    D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER = 4
    D3D12_FORMAT_SUPPORT1_SO_BUFFER = 8
    D3D12_FORMAT_SUPPORT1_TEXTURE1D = 16
    D3D12_FORMAT_SUPPORT1_TEXTURE2D = 32
    D3D12_FORMAT_SUPPORT1_TEXTURE3D = 64
    D3D12_FORMAT_SUPPORT1_TEXTURECUBE = 128
    D3D12_FORMAT_SUPPORT1_SHADER_LOAD = 256
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE = 512
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON = 1024
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT = 2048
    D3D12_FORMAT_SUPPORT1_MIP = 4096
    D3D12_FORMAT_SUPPORT1_RENDER_TARGET = 16384
    D3D12_FORMAT_SUPPORT1_BLENDABLE = 32768
    D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL = 65536
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE = 262144
    D3D12_FORMAT_SUPPORT1_DISPLAY = 524288
    D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT = 1048576
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET = 2097152
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD = 4194304
    D3D12_FORMAT_SUPPORT1_SHADER_GATHER = 8388608
    D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST = 16777216
    D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW = 33554432
    D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON = 67108864
    D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT = 134217728
    D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT = 268435456
    D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT = 536870912
    D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER = 1073741824
  end

  enum D3D12_FORMAT_SUPPORT2 : UInt32
    D3D12_FORMAT_SUPPORT2_NONE = 0
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD = 1
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS = 2
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 4
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE = 8
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX = 16
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 32
    D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD = 64
    D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE = 128
    D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP = 256
    D3D12_FORMAT_SUPPORT2_TILED = 512
    D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY = 16384
    D3D12_FORMAT_SUPPORT2_SAMPLER_FEEDBACK = 32768
  end

  enum D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS : UInt32
    D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE = 0
    D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE = 1
  end

  enum D3D12_CROSS_NODE_SHARING_TIER : Int32
    D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED = 0
    D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED = 1
    D3D12_CROSS_NODE_SHARING_TIER_1 = 2
    D3D12_CROSS_NODE_SHARING_TIER_2 = 3
    D3D12_CROSS_NODE_SHARING_TIER_3 = 4
  end

  enum D3D12_RESOURCE_HEAP_TIER : Int32
    D3D12_RESOURCE_HEAP_TIER_1 = 1
    D3D12_RESOURCE_HEAP_TIER_2 = 2
  end

  enum D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER : Int32
    D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_NOT_SUPPORTED = 0
    D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_1 = 1
    D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_2 = 2
  end

  enum D3D12_VIEW_INSTANCING_TIER : Int32
    D3D12_VIEW_INSTANCING_TIER_NOT_SUPPORTED = 0
    D3D12_VIEW_INSTANCING_TIER_1 = 1
    D3D12_VIEW_INSTANCING_TIER_2 = 2
    D3D12_VIEW_INSTANCING_TIER_3 = 3
  end

  enum D3D_ROOT_SIGNATURE_VERSION : Int32
    D3D_ROOT_SIGNATURE_VERSION_1 = 1
    D3D_ROOT_SIGNATURE_VERSION_1_0 = 1
    D3D_ROOT_SIGNATURE_VERSION_1_1 = 2
  end

  enum D3D_SHADER_MODEL : Int32
    D3D_SHADER_MODEL_5_1 = 81
    D3D_SHADER_MODEL_6_0 = 96
    D3D_SHADER_MODEL_6_1 = 97
    D3D_SHADER_MODEL_6_2 = 98
    D3D_SHADER_MODEL_6_3 = 99
    D3D_SHADER_MODEL_6_4 = 100
    D3D_SHADER_MODEL_6_5 = 101
    D3D_SHADER_MODEL_6_6 = 102
    D3D_SHADER_MODEL_6_7 = 103
  end

  enum D3D12_SHADER_CACHE_SUPPORT_FLAGS : UInt32
    D3D12_SHADER_CACHE_SUPPORT_NONE = 0
    D3D12_SHADER_CACHE_SUPPORT_SINGLE_PSO = 1
    D3D12_SHADER_CACHE_SUPPORT_LIBRARY = 2
    D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE = 4
    D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE = 8
    D3D12_SHADER_CACHE_SUPPORT_DRIVER_MANAGED_CACHE = 16
    D3D12_SHADER_CACHE_SUPPORT_SHADER_CONTROL_CLEAR = 32
    D3D12_SHADER_CACHE_SUPPORT_SHADER_SESSION_DELETE = 64
  end

  enum D3D12_COMMAND_LIST_SUPPORT_FLAGS : UInt32
    D3D12_COMMAND_LIST_SUPPORT_FLAG_NONE = 0
    D3D12_COMMAND_LIST_SUPPORT_FLAG_DIRECT = 1
    D3D12_COMMAND_LIST_SUPPORT_FLAG_BUNDLE = 2
    D3D12_COMMAND_LIST_SUPPORT_FLAG_COMPUTE = 4
    D3D12_COMMAND_LIST_SUPPORT_FLAG_COPY = 8
    D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_DECODE = 16
    D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_PROCESS = 32
    D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_ENCODE = 64
  end

  enum D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER : Int32
    D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_0 = 0
    D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_1 = 1
    D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_2 = 2
  end

  enum D3D12_HEAP_SERIALIZATION_TIER : Int32
    D3D12_HEAP_SERIALIZATION_TIER_0 = 0
    D3D12_HEAP_SERIALIZATION_TIER_10 = 10
  end

  enum D3D12_RENDER_PASS_TIER : Int32
    D3D12_RENDER_PASS_TIER_0 = 0
    D3D12_RENDER_PASS_TIER_1 = 1
    D3D12_RENDER_PASS_TIER_2 = 2
  end

  enum D3D12_RAYTRACING_TIER : Int32
    D3D12_RAYTRACING_TIER_NOT_SUPPORTED = 0
    D3D12_RAYTRACING_TIER_1_0 = 10
    D3D12_RAYTRACING_TIER_1_1 = 11
  end

  enum D3D12_VARIABLE_SHADING_RATE_TIER : Int32
    D3D12_VARIABLE_SHADING_RATE_TIER_NOT_SUPPORTED = 0
    D3D12_VARIABLE_SHADING_RATE_TIER_1 = 1
    D3D12_VARIABLE_SHADING_RATE_TIER_2 = 2
  end

  enum D3D12_MESH_SHADER_TIER : Int32
    D3D12_MESH_SHADER_TIER_NOT_SUPPORTED = 0
    D3D12_MESH_SHADER_TIER_1 = 10
  end

  enum D3D12_SAMPLER_FEEDBACK_TIER : Int32
    D3D12_SAMPLER_FEEDBACK_TIER_NOT_SUPPORTED = 0
    D3D12_SAMPLER_FEEDBACK_TIER_0_9 = 90
    D3D12_SAMPLER_FEEDBACK_TIER_1_0 = 100
  end

  enum D3D12_WAVE_MMA_TIER : Int32
    D3D12_WAVE_MMA_TIER_NOT_SUPPORTED = 0
    D3D12_WAVE_MMA_TIER_1_0 = 10
  end

  enum D3D12_HEAP_TYPE : Int32
    D3D12_HEAP_TYPE_DEFAULT = 1
    D3D12_HEAP_TYPE_UPLOAD = 2
    D3D12_HEAP_TYPE_READBACK = 3
    D3D12_HEAP_TYPE_CUSTOM = 4
  end

  enum D3D12_CPU_PAGE_PROPERTY : Int32
    D3D12_CPU_PAGE_PROPERTY_UNKNOWN = 0
    D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE = 1
    D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE = 2
    D3D12_CPU_PAGE_PROPERTY_WRITE_BACK = 3
  end

  enum D3D12_MEMORY_POOL : Int32
    D3D12_MEMORY_POOL_UNKNOWN = 0
    D3D12_MEMORY_POOL_L0 = 1
    D3D12_MEMORY_POOL_L1 = 2
  end

  enum D3D12_HEAP_FLAGS : UInt32
    D3D12_HEAP_FLAG_NONE = 0
    D3D12_HEAP_FLAG_SHARED = 1
    D3D12_HEAP_FLAG_DENY_BUFFERS = 4
    D3D12_HEAP_FLAG_ALLOW_DISPLAY = 8
    D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER = 32
    D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES = 64
    D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES = 128
    D3D12_HEAP_FLAG_HARDWARE_PROTECTED = 256
    D3D12_HEAP_FLAG_ALLOW_WRITE_WATCH = 512
    D3D12_HEAP_FLAG_ALLOW_SHADER_ATOMICS = 1024
    D3D12_HEAP_FLAG_CREATE_NOT_RESIDENT = 2048
    D3D12_HEAP_FLAG_CREATE_NOT_ZEROED = 4096
    D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES = 0
    D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS = 192
    D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES = 68
    D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES = 132
  end

  enum D3D12_RESOURCE_DIMENSION : Int32
    D3D12_RESOURCE_DIMENSION_UNKNOWN = 0
    D3D12_RESOURCE_DIMENSION_BUFFER = 1
    D3D12_RESOURCE_DIMENSION_TEXTURE1D = 2
    D3D12_RESOURCE_DIMENSION_TEXTURE2D = 3
    D3D12_RESOURCE_DIMENSION_TEXTURE3D = 4
  end

  enum D3D12_TEXTURE_LAYOUT : Int32
    D3D12_TEXTURE_LAYOUT_UNKNOWN = 0
    D3D12_TEXTURE_LAYOUT_ROW_MAJOR = 1
    D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE = 2
    D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE = 3
  end

  enum D3D12_RESOURCE_FLAGS : UInt32
    D3D12_RESOURCE_FLAG_NONE = 0
    D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET = 1
    D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL = 2
    D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS = 4
    D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE = 8
    D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER = 16
    D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS = 32
    D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY = 64
    D3D12_RESOURCE_FLAG_VIDEO_ENCODE_REFERENCE_ONLY = 128
  end

  enum D3D12_TILE_RANGE_FLAGS : Int32
    D3D12_TILE_RANGE_FLAG_NONE = 0
    D3D12_TILE_RANGE_FLAG_NULL = 1
    D3D12_TILE_RANGE_FLAG_SKIP = 2
    D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE = 4
  end

  enum D3D12_TILE_MAPPING_FLAGS : UInt32
    D3D12_TILE_MAPPING_FLAG_NONE = 0
    D3D12_TILE_MAPPING_FLAG_NO_HAZARD = 1
  end

  enum D3D12_TILE_COPY_FLAGS : UInt32
    D3D12_TILE_COPY_FLAG_NONE = 0
    D3D12_TILE_COPY_FLAG_NO_HAZARD = 1
    D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE = 2
    D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER = 4
  end

  enum D3D12_RESOURCE_STATES : UInt32
    D3D12_RESOURCE_STATE_COMMON = 0
    D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER = 1
    D3D12_RESOURCE_STATE_INDEX_BUFFER = 2
    D3D12_RESOURCE_STATE_RENDER_TARGET = 4
    D3D12_RESOURCE_STATE_UNORDERED_ACCESS = 8
    D3D12_RESOURCE_STATE_DEPTH_WRITE = 16
    D3D12_RESOURCE_STATE_DEPTH_READ = 32
    D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE = 64
    D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE = 128
    D3D12_RESOURCE_STATE_STREAM_OUT = 256
    D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT = 512
    D3D12_RESOURCE_STATE_COPY_DEST = 1024
    D3D12_RESOURCE_STATE_COPY_SOURCE = 2048
    D3D12_RESOURCE_STATE_RESOLVE_DEST = 4096
    D3D12_RESOURCE_STATE_RESOLVE_SOURCE = 8192
    D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE = 4194304
    D3D12_RESOURCE_STATE_SHADING_RATE_SOURCE = 16777216
    D3D12_RESOURCE_STATE_GENERIC_READ = 2755
    D3D12_RESOURCE_STATE_ALL_SHADER_RESOURCE = 192
    D3D12_RESOURCE_STATE_PRESENT = 0
    D3D12_RESOURCE_STATE_PREDICATION = 512
    D3D12_RESOURCE_STATE_VIDEO_DECODE_READ = 65536
    D3D12_RESOURCE_STATE_VIDEO_DECODE_WRITE = 131072
    D3D12_RESOURCE_STATE_VIDEO_PROCESS_READ = 262144
    D3D12_RESOURCE_STATE_VIDEO_PROCESS_WRITE = 524288
    D3D12_RESOURCE_STATE_VIDEO_ENCODE_READ = 2097152
    D3D12_RESOURCE_STATE_VIDEO_ENCODE_WRITE = 8388608
  end

  enum D3D12_RESOURCE_BARRIER_TYPE : Int32
    D3D12_RESOURCE_BARRIER_TYPE_TRANSITION = 0
    D3D12_RESOURCE_BARRIER_TYPE_ALIASING = 1
    D3D12_RESOURCE_BARRIER_TYPE_UAV = 2
  end

  enum D3D12_RESOURCE_BARRIER_FLAGS : UInt32
    D3D12_RESOURCE_BARRIER_FLAG_NONE = 0
    D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY = 1
    D3D12_RESOURCE_BARRIER_FLAG_END_ONLY = 2
  end

  enum D3D12_TEXTURE_COPY_TYPE : Int32
    D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX = 0
    D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT = 1
  end

  enum D3D12_RESOLVE_MODE : Int32
    D3D12_RESOLVE_MODE_DECOMPRESS = 0
    D3D12_RESOLVE_MODE_MIN = 1
    D3D12_RESOLVE_MODE_MAX = 2
    D3D12_RESOLVE_MODE_AVERAGE = 3
    D3D12_RESOLVE_MODE_ENCODE_SAMPLER_FEEDBACK = 4
    D3D12_RESOLVE_MODE_DECODE_SAMPLER_FEEDBACK = 5
  end

  enum D3D12_VIEW_INSTANCING_FLAGS : UInt32
    D3D12_VIEW_INSTANCING_FLAG_NONE = 0
    D3D12_VIEW_INSTANCING_FLAG_ENABLE_VIEW_INSTANCE_MASKING = 1
  end

  enum D3D12_SHADER_COMPONENT_MAPPING : Int32
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0 = 0
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1 = 1
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2 = 2
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3 = 3
    D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0 = 4
    D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1 = 5
  end

  enum D3D12_BUFFER_SRV_FLAGS : UInt32
    D3D12_BUFFER_SRV_FLAG_NONE = 0
    D3D12_BUFFER_SRV_FLAG_RAW = 1
  end

  enum D3D12_SRV_DIMENSION : Int32
    D3D12_SRV_DIMENSION_UNKNOWN = 0
    D3D12_SRV_DIMENSION_BUFFER = 1
    D3D12_SRV_DIMENSION_TEXTURE1D = 2
    D3D12_SRV_DIMENSION_TEXTURE1DARRAY = 3
    D3D12_SRV_DIMENSION_TEXTURE2D = 4
    D3D12_SRV_DIMENSION_TEXTURE2DARRAY = 5
    D3D12_SRV_DIMENSION_TEXTURE2DMS = 6
    D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY = 7
    D3D12_SRV_DIMENSION_TEXTURE3D = 8
    D3D12_SRV_DIMENSION_TEXTURECUBE = 9
    D3D12_SRV_DIMENSION_TEXTURECUBEARRAY = 10
    D3D12_SRV_DIMENSION_RAYTRACING_ACCELERATION_STRUCTURE = 11
  end

  enum D3D12_FILTER : Int32
    D3D12_FILTER_MIN_MAG_MIP_POINT = 0
    D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR = 1
    D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 4
    D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR = 5
    D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT = 16
    D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 17
    D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT = 20
    D3D12_FILTER_MIN_MAG_MIP_LINEAR = 21
    D3D12_FILTER_ANISOTROPIC = 85
    D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 128
    D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 129
    D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 132
    D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 133
    D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 144
    D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 145
    D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 148
    D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 149
    D3D12_FILTER_COMPARISON_ANISOTROPIC = 213
    D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT = 256
    D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 257
    D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 260
    D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 261
    D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 272
    D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 273
    D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 276
    D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 277
    D3D12_FILTER_MINIMUM_ANISOTROPIC = 341
    D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 384
    D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 385
    D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 388
    D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 389
    D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 400
    D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 401
    D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 404
    D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 405
    D3D12_FILTER_MAXIMUM_ANISOTROPIC = 469
  end

  enum D3D12_FILTER_TYPE : Int32
    D3D12_FILTER_TYPE_POINT = 0
    D3D12_FILTER_TYPE_LINEAR = 1
  end

  enum D3D12_FILTER_REDUCTION_TYPE : Int32
    D3D12_FILTER_REDUCTION_TYPE_STANDARD = 0
    D3D12_FILTER_REDUCTION_TYPE_COMPARISON = 1
    D3D12_FILTER_REDUCTION_TYPE_MINIMUM = 2
    D3D12_FILTER_REDUCTION_TYPE_MAXIMUM = 3
  end

  enum D3D12_TEXTURE_ADDRESS_MODE : Int32
    D3D12_TEXTURE_ADDRESS_MODE_WRAP = 1
    D3D12_TEXTURE_ADDRESS_MODE_MIRROR = 2
    D3D12_TEXTURE_ADDRESS_MODE_CLAMP = 3
    D3D12_TEXTURE_ADDRESS_MODE_BORDER = 4
    D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE = 5
  end

  enum D3D12_BUFFER_UAV_FLAGS : UInt32
    D3D12_BUFFER_UAV_FLAG_NONE = 0
    D3D12_BUFFER_UAV_FLAG_RAW = 1
  end

  enum D3D12_UAV_DIMENSION : Int32
    D3D12_UAV_DIMENSION_UNKNOWN = 0
    D3D12_UAV_DIMENSION_BUFFER = 1
    D3D12_UAV_DIMENSION_TEXTURE1D = 2
    D3D12_UAV_DIMENSION_TEXTURE1DARRAY = 3
    D3D12_UAV_DIMENSION_TEXTURE2D = 4
    D3D12_UAV_DIMENSION_TEXTURE2DARRAY = 5
    D3D12_UAV_DIMENSION_TEXTURE3D = 8
  end

  enum D3D12_RTV_DIMENSION : Int32
    D3D12_RTV_DIMENSION_UNKNOWN = 0
    D3D12_RTV_DIMENSION_BUFFER = 1
    D3D12_RTV_DIMENSION_TEXTURE1D = 2
    D3D12_RTV_DIMENSION_TEXTURE1DARRAY = 3
    D3D12_RTV_DIMENSION_TEXTURE2D = 4
    D3D12_RTV_DIMENSION_TEXTURE2DARRAY = 5
    D3D12_RTV_DIMENSION_TEXTURE2DMS = 6
    D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY = 7
    D3D12_RTV_DIMENSION_TEXTURE3D = 8
  end

  enum D3D12_DSV_FLAGS : UInt32
    D3D12_DSV_FLAG_NONE = 0
    D3D12_DSV_FLAG_READ_ONLY_DEPTH = 1
    D3D12_DSV_FLAG_READ_ONLY_STENCIL = 2
  end

  enum D3D12_DSV_DIMENSION : Int32
    D3D12_DSV_DIMENSION_UNKNOWN = 0
    D3D12_DSV_DIMENSION_TEXTURE1D = 1
    D3D12_DSV_DIMENSION_TEXTURE1DARRAY = 2
    D3D12_DSV_DIMENSION_TEXTURE2D = 3
    D3D12_DSV_DIMENSION_TEXTURE2DARRAY = 4
    D3D12_DSV_DIMENSION_TEXTURE2DMS = 5
    D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY = 6
  end

  enum D3D12_CLEAR_FLAGS : UInt32
    D3D12_CLEAR_FLAG_DEPTH = 1
    D3D12_CLEAR_FLAG_STENCIL = 2
  end

  enum D3D12_FENCE_FLAGS : UInt32
    D3D12_FENCE_FLAG_NONE = 0
    D3D12_FENCE_FLAG_SHARED = 1
    D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER = 2
    D3D12_FENCE_FLAG_NON_MONITORED = 4
  end

  enum D3D12_DESCRIPTOR_HEAP_TYPE : Int32
    D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV = 0
    D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER = 1
    D3D12_DESCRIPTOR_HEAP_TYPE_RTV = 2
    D3D12_DESCRIPTOR_HEAP_TYPE_DSV = 3
    D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES = 4
  end

  enum D3D12_DESCRIPTOR_HEAP_FLAGS : UInt32
    D3D12_DESCRIPTOR_HEAP_FLAG_NONE = 0
    D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE = 1
  end

  enum D3D12_DESCRIPTOR_RANGE_TYPE : Int32
    D3D12_DESCRIPTOR_RANGE_TYPE_SRV = 0
    D3D12_DESCRIPTOR_RANGE_TYPE_UAV = 1
    D3D12_DESCRIPTOR_RANGE_TYPE_CBV = 2
    D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER = 3
  end

  enum D3D12_SHADER_VISIBILITY : Int32
    D3D12_SHADER_VISIBILITY_ALL = 0
    D3D12_SHADER_VISIBILITY_VERTEX = 1
    D3D12_SHADER_VISIBILITY_HULL = 2
    D3D12_SHADER_VISIBILITY_DOMAIN = 3
    D3D12_SHADER_VISIBILITY_GEOMETRY = 4
    D3D12_SHADER_VISIBILITY_PIXEL = 5
    D3D12_SHADER_VISIBILITY_AMPLIFICATION = 6
    D3D12_SHADER_VISIBILITY_MESH = 7
  end

  enum D3D12_ROOT_PARAMETER_TYPE : Int32
    D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE = 0
    D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS = 1
    D3D12_ROOT_PARAMETER_TYPE_CBV = 2
    D3D12_ROOT_PARAMETER_TYPE_SRV = 3
    D3D12_ROOT_PARAMETER_TYPE_UAV = 4
  end

  enum D3D12_ROOT_SIGNATURE_FLAGS : UInt32
    D3D12_ROOT_SIGNATURE_FLAG_NONE = 0
    D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT = 1
    D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS = 2
    D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS = 4
    D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS = 8
    D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS = 16
    D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS = 32
    D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT = 64
    D3D12_ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE = 128
    D3D12_ROOT_SIGNATURE_FLAG_DENY_AMPLIFICATION_SHADER_ROOT_ACCESS = 256
    D3D12_ROOT_SIGNATURE_FLAG_DENY_MESH_SHADER_ROOT_ACCESS = 512
    D3D12_ROOT_SIGNATURE_FLAG_CBV_SRV_UAV_HEAP_DIRECTLY_INDEXED = 1024
    D3D12_ROOT_SIGNATURE_FLAG_SAMPLER_HEAP_DIRECTLY_INDEXED = 2048
  end

  enum D3D12_STATIC_BORDER_COLOR : Int32
    D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK = 0
    D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK = 1
    D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE = 2
  end

  enum D3D12_DESCRIPTOR_RANGE_FLAGS : UInt32
    D3D12_DESCRIPTOR_RANGE_FLAG_NONE = 0
    D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE = 1
    D3D12_DESCRIPTOR_RANGE_FLAG_DATA_VOLATILE = 2
    D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE = 4
    D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC = 8
    D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS = 65536
  end

  enum D3D12_ROOT_DESCRIPTOR_FLAGS : UInt32
    D3D12_ROOT_DESCRIPTOR_FLAG_NONE = 0
    D3D12_ROOT_DESCRIPTOR_FLAG_DATA_VOLATILE = 2
    D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE = 4
    D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC = 8
  end

  enum D3D12_QUERY_HEAP_TYPE : Int32
    D3D12_QUERY_HEAP_TYPE_OCCLUSION = 0
    D3D12_QUERY_HEAP_TYPE_TIMESTAMP = 1
    D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS = 2
    D3D12_QUERY_HEAP_TYPE_SO_STATISTICS = 3
    D3D12_QUERY_HEAP_TYPE_VIDEO_DECODE_STATISTICS = 4
    D3D12_QUERY_HEAP_TYPE_COPY_QUEUE_TIMESTAMP = 5
    D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS1 = 7
  end

  enum D3D12_QUERY_TYPE : Int32
    D3D12_QUERY_TYPE_OCCLUSION = 0
    D3D12_QUERY_TYPE_BINARY_OCCLUSION = 1
    D3D12_QUERY_TYPE_TIMESTAMP = 2
    D3D12_QUERY_TYPE_PIPELINE_STATISTICS = 3
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0 = 4
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1 = 5
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2 = 6
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3 = 7
    D3D12_QUERY_TYPE_VIDEO_DECODE_STATISTICS = 8
    D3D12_QUERY_TYPE_PIPELINE_STATISTICS1 = 10
  end

  enum D3D12_PREDICATION_OP : Int32
    D3D12_PREDICATION_OP_EQUAL_ZERO = 0
    D3D12_PREDICATION_OP_NOT_EQUAL_ZERO = 1
  end

  enum D3D12_INDIRECT_ARGUMENT_TYPE : Int32
    D3D12_INDIRECT_ARGUMENT_TYPE_DRAW = 0
    D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED = 1
    D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH = 2
    D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW = 3
    D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW = 4
    D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT = 5
    D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW = 6
    D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW = 7
    D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW = 8
    D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_RAYS = 9
    D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_MESH = 10
  end

  enum D3D12_WRITEBUFFERIMMEDIATE_MODE : Int32
    D3D12_WRITEBUFFERIMMEDIATE_MODE_DEFAULT = 0
    D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_IN = 1
    D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_OUT = 2
  end

  enum D3D12_MULTIPLE_FENCE_WAIT_FLAGS : UInt32
    D3D12_MULTIPLE_FENCE_WAIT_FLAG_NONE = 0
    D3D12_MULTIPLE_FENCE_WAIT_FLAG_ANY = 1
    D3D12_MULTIPLE_FENCE_WAIT_FLAG_ALL = 0
  end

  enum D3D12_RESIDENCY_PRIORITY : Int32
    D3D12_RESIDENCY_PRIORITY_MINIMUM = 671088640
    D3D12_RESIDENCY_PRIORITY_LOW = 1342177280
    D3D12_RESIDENCY_PRIORITY_NORMAL = 2013265920
    D3D12_RESIDENCY_PRIORITY_HIGH = -1610547200
    D3D12_RESIDENCY_PRIORITY_MAXIMUM = -939524096
  end

  enum D3D12_RESIDENCY_FLAGS : UInt32
    D3D12_RESIDENCY_FLAG_NONE = 0
    D3D12_RESIDENCY_FLAG_DENY_OVERBUDGET = 1
  end

  enum D3D12_COMMAND_LIST_FLAGS : UInt32
    D3D12_COMMAND_LIST_FLAG_NONE = 0
  end

  enum D3D12_COMMAND_POOL_FLAGS : UInt32
    D3D12_COMMAND_POOL_FLAG_NONE = 0
  end

  enum D3D12_COMMAND_RECORDER_FLAGS : UInt32
    D3D12_COMMAND_RECORDER_FLAG_NONE = 0
  end

  enum D3D12_PROTECTED_SESSION_STATUS : Int32
    D3D12_PROTECTED_SESSION_STATUS_OK = 0
    D3D12_PROTECTED_SESSION_STATUS_INVALID = 1
  end

  enum D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS : UInt32
    D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_NONE = 0
    D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_SUPPORTED = 1
  end

  enum D3D12_PROTECTED_RESOURCE_SESSION_FLAGS : UInt32
    D3D12_PROTECTED_RESOURCE_SESSION_FLAG_NONE = 0
  end

  enum D3D12_LIFETIME_STATE : Int32
    D3D12_LIFETIME_STATE_IN_USE = 0
    D3D12_LIFETIME_STATE_NOT_IN_USE = 1
  end

  enum D3D12_META_COMMAND_PARAMETER_TYPE : Int32
    D3D12_META_COMMAND_PARAMETER_TYPE_FLOAT = 0
    D3D12_META_COMMAND_PARAMETER_TYPE_UINT64 = 1
    D3D12_META_COMMAND_PARAMETER_TYPE_GPU_VIRTUAL_ADDRESS = 2
    D3D12_META_COMMAND_PARAMETER_TYPE_CPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV = 3
    D3D12_META_COMMAND_PARAMETER_TYPE_GPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV = 4
  end

  enum D3D12_META_COMMAND_PARAMETER_FLAGS : UInt32
    D3D12_META_COMMAND_PARAMETER_FLAG_INPUT = 1
    D3D12_META_COMMAND_PARAMETER_FLAG_OUTPUT = 2
  end

  enum D3D12_META_COMMAND_PARAMETER_STAGE : Int32
    D3D12_META_COMMAND_PARAMETER_STAGE_CREATION = 0
    D3D12_META_COMMAND_PARAMETER_STAGE_INITIALIZATION = 1
    D3D12_META_COMMAND_PARAMETER_STAGE_EXECUTION = 2
  end

  enum D3D12_GRAPHICS_STATES : UInt32
    D3D12_GRAPHICS_STATE_NONE = 0
    D3D12_GRAPHICS_STATE_IA_VERTEX_BUFFERS = 1
    D3D12_GRAPHICS_STATE_IA_INDEX_BUFFER = 2
    D3D12_GRAPHICS_STATE_IA_PRIMITIVE_TOPOLOGY = 4
    D3D12_GRAPHICS_STATE_DESCRIPTOR_HEAP = 8
    D3D12_GRAPHICS_STATE_GRAPHICS_ROOT_SIGNATURE = 16
    D3D12_GRAPHICS_STATE_COMPUTE_ROOT_SIGNATURE = 32
    D3D12_GRAPHICS_STATE_RS_VIEWPORTS = 64
    D3D12_GRAPHICS_STATE_RS_SCISSOR_RECTS = 128
    D3D12_GRAPHICS_STATE_PREDICATION = 256
    D3D12_GRAPHICS_STATE_OM_RENDER_TARGETS = 512
    D3D12_GRAPHICS_STATE_OM_STENCIL_REF = 1024
    D3D12_GRAPHICS_STATE_OM_BLEND_FACTOR = 2048
    D3D12_GRAPHICS_STATE_PIPELINE_STATE = 4096
    D3D12_GRAPHICS_STATE_SO_TARGETS = 8192
    D3D12_GRAPHICS_STATE_OM_DEPTH_BOUNDS = 16384
    D3D12_GRAPHICS_STATE_SAMPLE_POSITIONS = 32768
    D3D12_GRAPHICS_STATE_VIEW_INSTANCE_MASK = 65536
  end

  enum D3D12_STATE_SUBOBJECT_TYPE : Int32
    D3D12_STATE_SUBOBJECT_TYPE_STATE_OBJECT_CONFIG = 0
    D3D12_STATE_SUBOBJECT_TYPE_GLOBAL_ROOT_SIGNATURE = 1
    D3D12_STATE_SUBOBJECT_TYPE_LOCAL_ROOT_SIGNATURE = 2
    D3D12_STATE_SUBOBJECT_TYPE_NODE_MASK = 3
    D3D12_STATE_SUBOBJECT_TYPE_DXIL_LIBRARY = 5
    D3D12_STATE_SUBOBJECT_TYPE_EXISTING_COLLECTION = 6
    D3D12_STATE_SUBOBJECT_TYPE_SUBOBJECT_TO_EXPORTS_ASSOCIATION = 7
    D3D12_STATE_SUBOBJECT_TYPE_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION = 8
    D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_SHADER_CONFIG = 9
    D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG = 10
    D3D12_STATE_SUBOBJECT_TYPE_HIT_GROUP = 11
    D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG1 = 12
    D3D12_STATE_SUBOBJECT_TYPE_MAX_VALID = 13
  end

  enum D3D12_STATE_OBJECT_FLAGS : UInt32
    D3D12_STATE_OBJECT_FLAG_NONE = 0
    D3D12_STATE_OBJECT_FLAG_ALLOW_LOCAL_DEPENDENCIES_ON_EXTERNAL_DEFINITIONS = 1
    D3D12_STATE_OBJECT_FLAG_ALLOW_EXTERNAL_DEPENDENCIES_ON_LOCAL_DEFINITIONS = 2
    D3D12_STATE_OBJECT_FLAG_ALLOW_STATE_OBJECT_ADDITIONS = 4
  end

  enum D3D12_EXPORT_FLAGS : UInt32
    D3D12_EXPORT_FLAG_NONE = 0
  end

  enum D3D12_HIT_GROUP_TYPE : Int32
    D3D12_HIT_GROUP_TYPE_TRIANGLES = 0
    D3D12_HIT_GROUP_TYPE_PROCEDURAL_PRIMITIVE = 1
  end

  enum D3D12_RAYTRACING_PIPELINE_FLAGS : UInt32
    D3D12_RAYTRACING_PIPELINE_FLAG_NONE = 0
    D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_TRIANGLES = 256
    D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_PROCEDURAL_PRIMITIVES = 512
  end

  enum D3D12_STATE_OBJECT_TYPE : Int32
    D3D12_STATE_OBJECT_TYPE_COLLECTION = 0
    D3D12_STATE_OBJECT_TYPE_RAYTRACING_PIPELINE = 3
  end

  enum D3D12_RAYTRACING_GEOMETRY_FLAGS : UInt32
    D3D12_RAYTRACING_GEOMETRY_FLAG_NONE = 0
    D3D12_RAYTRACING_GEOMETRY_FLAG_OPAQUE = 1
    D3D12_RAYTRACING_GEOMETRY_FLAG_NO_DUPLICATE_ANYHIT_INVOCATION = 2
  end

  enum D3D12_RAYTRACING_GEOMETRY_TYPE : Int32
    D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES = 0
    D3D12_RAYTRACING_GEOMETRY_TYPE_PROCEDURAL_PRIMITIVE_AABBS = 1
  end

  enum D3D12_RAYTRACING_INSTANCE_FLAGS : UInt32
    D3D12_RAYTRACING_INSTANCE_FLAG_NONE = 0
    D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE = 1
    D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_FRONT_COUNTERCLOCKWISE = 2
    D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_OPAQUE = 4
    D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_NON_OPAQUE = 8
  end

  enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS : UInt32
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_NONE = 0
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE = 1
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_COMPACTION = 2
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_TRACE = 4
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_BUILD = 8
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_MINIMIZE_MEMORY = 16
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PERFORM_UPDATE = 32
  end

  enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE : Int32
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_CLONE = 0
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_COMPACT = 1
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_VISUALIZATION_DECODE_FOR_TOOLS = 2
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_SERIALIZE = 3
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_DESERIALIZE = 4
  end

  enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE : Int32
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL = 0
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL = 1
  end

  enum D3D12_ELEMENTS_LAYOUT : Int32
    D3D12_ELEMENTS_LAYOUT_ARRAY = 0
    D3D12_ELEMENTS_LAYOUT_ARRAY_OF_POINTERS = 1
  end

  enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE : Int32
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE = 0
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION = 1
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION = 2
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE = 3
  end

  enum D3D12_SERIALIZED_DATA_TYPE : Int32
    D3D12_SERIALIZED_DATA_RAYTRACING_ACCELERATION_STRUCTURE = 0
  end

  enum D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS : Int32
    D3D12_DRIVER_MATCHING_IDENTIFIER_COMPATIBLE_WITH_DEVICE = 0
    D3D12_DRIVER_MATCHING_IDENTIFIER_UNSUPPORTED_TYPE = 1
    D3D12_DRIVER_MATCHING_IDENTIFIER_UNRECOGNIZED = 2
    D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_VERSION = 3
    D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_TYPE = 4
  end

  enum D3D12_RAY_FLAGS : UInt32
    D3D12_RAY_FLAG_NONE = 0
    D3D12_RAY_FLAG_FORCE_OPAQUE = 1
    D3D12_RAY_FLAG_FORCE_NON_OPAQUE = 2
    D3D12_RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH = 4
    D3D12_RAY_FLAG_SKIP_CLOSEST_HIT_SHADER = 8
    D3D12_RAY_FLAG_CULL_BACK_FACING_TRIANGLES = 16
    D3D12_RAY_FLAG_CULL_FRONT_FACING_TRIANGLES = 32
    D3D12_RAY_FLAG_CULL_OPAQUE = 64
    D3D12_RAY_FLAG_CULL_NON_OPAQUE = 128
    D3D12_RAY_FLAG_SKIP_TRIANGLES = 256
    D3D12_RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES = 512
  end

  enum D3D12_HIT_KIND : Int32
    D3D12_HIT_KIND_TRIANGLE_FRONT_FACE = 254
    D3D12_HIT_KIND_TRIANGLE_BACK_FACE = 255
  end

  enum D3D12_AUTO_BREADCRUMB_OP : Int32
    D3D12_AUTO_BREADCRUMB_OP_SETMARKER = 0
    D3D12_AUTO_BREADCRUMB_OP_BEGINEVENT = 1
    D3D12_AUTO_BREADCRUMB_OP_ENDEVENT = 2
    D3D12_AUTO_BREADCRUMB_OP_DRAWINSTANCED = 3
    D3D12_AUTO_BREADCRUMB_OP_DRAWINDEXEDINSTANCED = 4
    D3D12_AUTO_BREADCRUMB_OP_EXECUTEINDIRECT = 5
    D3D12_AUTO_BREADCRUMB_OP_DISPATCH = 6
    D3D12_AUTO_BREADCRUMB_OP_COPYBUFFERREGION = 7
    D3D12_AUTO_BREADCRUMB_OP_COPYTEXTUREREGION = 8
    D3D12_AUTO_BREADCRUMB_OP_COPYRESOURCE = 9
    D3D12_AUTO_BREADCRUMB_OP_COPYTILES = 10
    D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCE = 11
    D3D12_AUTO_BREADCRUMB_OP_CLEARRENDERTARGETVIEW = 12
    D3D12_AUTO_BREADCRUMB_OP_CLEARUNORDEREDACCESSVIEW = 13
    D3D12_AUTO_BREADCRUMB_OP_CLEARDEPTHSTENCILVIEW = 14
    D3D12_AUTO_BREADCRUMB_OP_RESOURCEBARRIER = 15
    D3D12_AUTO_BREADCRUMB_OP_EXECUTEBUNDLE = 16
    D3D12_AUTO_BREADCRUMB_OP_PRESENT = 17
    D3D12_AUTO_BREADCRUMB_OP_RESOLVEQUERYDATA = 18
    D3D12_AUTO_BREADCRUMB_OP_BEGINSUBMISSION = 19
    D3D12_AUTO_BREADCRUMB_OP_ENDSUBMISSION = 20
    D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME = 21
    D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES = 22
    D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT = 23
    D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT64 = 24
    D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCEREGION = 25
    D3D12_AUTO_BREADCRUMB_OP_WRITEBUFFERIMMEDIATE = 26
    D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME1 = 27
    D3D12_AUTO_BREADCRUMB_OP_SETPROTECTEDRESOURCESESSION = 28
    D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME2 = 29
    D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES1 = 30
    D3D12_AUTO_BREADCRUMB_OP_BUILDRAYTRACINGACCELERATIONSTRUCTURE = 31
    D3D12_AUTO_BREADCRUMB_OP_EMITRAYTRACINGACCELERATIONSTRUCTUREPOSTBUILDINFO = 32
    D3D12_AUTO_BREADCRUMB_OP_COPYRAYTRACINGACCELERATIONSTRUCTURE = 33
    D3D12_AUTO_BREADCRUMB_OP_DISPATCHRAYS = 34
    D3D12_AUTO_BREADCRUMB_OP_INITIALIZEMETACOMMAND = 35
    D3D12_AUTO_BREADCRUMB_OP_EXECUTEMETACOMMAND = 36
    D3D12_AUTO_BREADCRUMB_OP_ESTIMATEMOTION = 37
    D3D12_AUTO_BREADCRUMB_OP_RESOLVEMOTIONVECTORHEAP = 38
    D3D12_AUTO_BREADCRUMB_OP_SETPIPELINESTATE1 = 39
    D3D12_AUTO_BREADCRUMB_OP_INITIALIZEEXTENSIONCOMMAND = 40
    D3D12_AUTO_BREADCRUMB_OP_EXECUTEEXTENSIONCOMMAND = 41
    D3D12_AUTO_BREADCRUMB_OP_DISPATCHMESH = 42
    D3D12_AUTO_BREADCRUMB_OP_ENCODEFRAME = 43
    D3D12_AUTO_BREADCRUMB_OP_RESOLVEENCODEROUTPUTMETADATA = 44
  end

  enum D3D12_DRED_VERSION : Int32
    D3D12_DRED_VERSION_1_0 = 1
    D3D12_DRED_VERSION_1_1 = 2
    D3D12_DRED_VERSION_1_2 = 3
    D3D12_DRED_VERSION_1_3 = 4
  end

  enum D3D12_DRED_FLAGS : UInt32
    D3D12_DRED_FLAG_NONE = 0
    D3D12_DRED_FLAG_FORCE_ENABLE = 1
    D3D12_DRED_FLAG_DISABLE_AUTOBREADCRUMBS = 2
  end

  enum D3D12_DRED_ENABLEMENT : Int32
    D3D12_DRED_ENABLEMENT_SYSTEM_CONTROLLED = 0
    D3D12_DRED_ENABLEMENT_FORCED_OFF = 1
    D3D12_DRED_ENABLEMENT_FORCED_ON = 2
  end

  enum D3D12_DRED_ALLOCATION_TYPE : Int32
    D3D12_DRED_ALLOCATION_TYPE_COMMAND_QUEUE = 19
    D3D12_DRED_ALLOCATION_TYPE_COMMAND_ALLOCATOR = 20
    D3D12_DRED_ALLOCATION_TYPE_PIPELINE_STATE = 21
    D3D12_DRED_ALLOCATION_TYPE_COMMAND_LIST = 22
    D3D12_DRED_ALLOCATION_TYPE_FENCE = 23
    D3D12_DRED_ALLOCATION_TYPE_DESCRIPTOR_HEAP = 24
    D3D12_DRED_ALLOCATION_TYPE_HEAP = 25
    D3D12_DRED_ALLOCATION_TYPE_QUERY_HEAP = 27
    D3D12_DRED_ALLOCATION_TYPE_COMMAND_SIGNATURE = 28
    D3D12_DRED_ALLOCATION_TYPE_PIPELINE_LIBRARY = 29
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_DECODER = 30
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_PROCESSOR = 32
    D3D12_DRED_ALLOCATION_TYPE_RESOURCE = 34
    D3D12_DRED_ALLOCATION_TYPE_PASS = 35
    D3D12_DRED_ALLOCATION_TYPE_CRYPTOSESSION = 36
    D3D12_DRED_ALLOCATION_TYPE_CRYPTOSESSIONPOLICY = 37
    D3D12_DRED_ALLOCATION_TYPE_PROTECTEDRESOURCESESSION = 38
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_DECODER_HEAP = 39
    D3D12_DRED_ALLOCATION_TYPE_COMMAND_POOL = 40
    D3D12_DRED_ALLOCATION_TYPE_COMMAND_RECORDER = 41
    D3D12_DRED_ALLOCATION_TYPE_STATE_OBJECT = 42
    D3D12_DRED_ALLOCATION_TYPE_METACOMMAND = 43
    D3D12_DRED_ALLOCATION_TYPE_SCHEDULINGGROUP = 44
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_MOTION_ESTIMATOR = 45
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_MOTION_VECTOR_HEAP = 46
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_EXTENSION_COMMAND = 47
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_ENCODER = 48
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_ENCODER_HEAP = 49
    D3D12_DRED_ALLOCATION_TYPE_INVALID = -1
  end

  enum D3D12_DRED_PAGE_FAULT_FLAGS : UInt32
    D3D12_DRED_PAGE_FAULT_FLAGS_NONE = 0
  end

  enum D3D12_DRED_DEVICE_STATE : Int32
    D3D12_DRED_DEVICE_STATE_UNKNOWN = 0
    D3D12_DRED_DEVICE_STATE_HUNG = 3
    D3D12_DRED_DEVICE_STATE_FAULT = 6
    D3D12_DRED_DEVICE_STATE_PAGEFAULT = 7
  end

  enum D3D12_BACKGROUND_PROCESSING_MODE : Int32
    D3D12_BACKGROUND_PROCESSING_MODE_ALLOWED = 0
    D3D12_BACKGROUND_PROCESSING_MODE_ALLOW_INTRUSIVE_MEASUREMENTS = 1
    D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_BACKGROUND_WORK = 2
    D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_PROFILING_BY_SYSTEM = 3
  end

  enum D3D12_MEASUREMENTS_ACTION : Int32
    D3D12_MEASUREMENTS_ACTION_KEEP_ALL = 0
    D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS = 1
    D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS_HIGH_PRIORITY = 2
    D3D12_MEASUREMENTS_ACTION_DISCARD_PREVIOUS = 3
  end

  enum D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE : Int32
    D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_DISCARD = 0
    D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_PRESERVE = 1
    D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_CLEAR = 2
    D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_NO_ACCESS = 3
  end

  enum D3D12_RENDER_PASS_ENDING_ACCESS_TYPE : Int32
    D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_DISCARD = 0
    D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_PRESERVE = 1
    D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_RESOLVE = 2
    D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_NO_ACCESS = 3
  end

  enum D3D12_RENDER_PASS_FLAGS : UInt32
    D3D12_RENDER_PASS_FLAG_NONE = 0
    D3D12_RENDER_PASS_FLAG_ALLOW_UAV_WRITES = 1
    D3D12_RENDER_PASS_FLAG_SUSPENDING_PASS = 2
    D3D12_RENDER_PASS_FLAG_RESUMING_PASS = 4
  end

  enum D3D12_SHADER_CACHE_MODE : Int32
    D3D12_SHADER_CACHE_MODE_MEMORY = 0
    D3D12_SHADER_CACHE_MODE_DISK = 1
  end

  enum D3D12_SHADER_CACHE_FLAGS : UInt32
    D3D12_SHADER_CACHE_FLAG_NONE = 0
    D3D12_SHADER_CACHE_FLAG_DRIVER_VERSIONED = 1
    D3D12_SHADER_CACHE_FLAG_USE_WORKING_DIR = 2
  end

  enum D3D12_SHADER_CACHE_KIND_FLAGS : UInt32
    D3D12_SHADER_CACHE_KIND_FLAG_IMPLICIT_D3D_CACHE_FOR_DRIVER = 1
    D3D12_SHADER_CACHE_KIND_FLAG_IMPLICIT_D3D_CONVERSIONS = 2
    D3D12_SHADER_CACHE_KIND_FLAG_IMPLICIT_DRIVER_MANAGED = 4
    D3D12_SHADER_CACHE_KIND_FLAG_APPLICATION_MANAGED = 8
  end

  enum D3D12_SHADER_CACHE_CONTROL_FLAGS : UInt32
    D3D12_SHADER_CACHE_CONTROL_FLAG_DISABLE = 1
    D3D12_SHADER_CACHE_CONTROL_FLAG_ENABLE = 2
    D3D12_SHADER_CACHE_CONTROL_FLAG_CLEAR = 4
  end

  enum D3D12_GPU_BASED_VALIDATION_FLAGS : Int32
    D3D12_GPU_BASED_VALIDATION_FLAGS_NONE = 0
    D3D12_GPU_BASED_VALIDATION_FLAGS_DISABLE_STATE_TRACKING = 1
  end

  enum D3D12_RLDO_FLAGS : Int32
    D3D12_RLDO_NONE = 0
    D3D12_RLDO_SUMMARY = 1
    D3D12_RLDO_DETAIL = 2
    D3D12_RLDO_IGNORE_INTERNAL = 4
  end

  enum D3D12_DEBUG_DEVICE_PARAMETER_TYPE : Int32
    D3D12_DEBUG_DEVICE_PARAMETER_FEATURE_FLAGS = 0
    D3D12_DEBUG_DEVICE_PARAMETER_GPU_BASED_VALIDATION_SETTINGS = 1
    D3D12_DEBUG_DEVICE_PARAMETER_GPU_SLOWDOWN_PERFORMANCE_FACTOR = 2
  end

  enum D3D12_DEBUG_FEATURE : Int32
    D3D12_DEBUG_FEATURE_NONE = 0
    D3D12_DEBUG_FEATURE_ALLOW_BEHAVIOR_CHANGING_DEBUG_AIDS = 1
    D3D12_DEBUG_FEATURE_CONSERVATIVE_RESOURCE_STATE_TRACKING = 2
    D3D12_DEBUG_FEATURE_DISABLE_VIRTUALIZED_BUNDLES_VALIDATION = 4
    D3D12_DEBUG_FEATURE_EMULATE_WINDOWS7 = 8
  end

  enum D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE : Int32
    D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_NONE = 0
    D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_STATE_TRACKING_ONLY = 1
    D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_UNGUARDED_VALIDATION = 2
    D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_GUARDED_VALIDATION = 3
    NUM_D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODES = 4
  end

  enum D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS : Int32
    D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_NONE = 0
    D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_TRACKING_ONLY_SHADERS = 1
    D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_UNGUARDED_VALIDATION_SHADERS = 2
    D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_GUARDED_VALIDATION_SHADERS = 4
    D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS_VALID_MASK = 7
  end

  enum D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE : Int32
    D3D12_DEBUG_COMMAND_LIST_PARAMETER_GPU_BASED_VALIDATION_SETTINGS = 0
  end

  enum D3D12_MESSAGE_CATEGORY : Int32
    D3D12_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0
    D3D12_MESSAGE_CATEGORY_MISCELLANEOUS = 1
    D3D12_MESSAGE_CATEGORY_INITIALIZATION = 2
    D3D12_MESSAGE_CATEGORY_CLEANUP = 3
    D3D12_MESSAGE_CATEGORY_COMPILATION = 4
    D3D12_MESSAGE_CATEGORY_STATE_CREATION = 5
    D3D12_MESSAGE_CATEGORY_STATE_SETTING = 6
    D3D12_MESSAGE_CATEGORY_STATE_GETTING = 7
    D3D12_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 8
    D3D12_MESSAGE_CATEGORY_EXECUTION = 9
    D3D12_MESSAGE_CATEGORY_SHADER = 10
  end

  enum D3D12_MESSAGE_SEVERITY : Int32
    D3D12_MESSAGE_SEVERITY_CORRUPTION = 0
    D3D12_MESSAGE_SEVERITY_ERROR = 1
    D3D12_MESSAGE_SEVERITY_WARNING = 2
    D3D12_MESSAGE_SEVERITY_INFO = 3
    D3D12_MESSAGE_SEVERITY_MESSAGE = 4
  end

  enum D3D12_MESSAGE_ID : Int32
    D3D12_MESSAGE_ID_UNKNOWN = 0
    D3D12_MESSAGE_ID_STRING_FROM_APPLICATION = 1
    D3D12_MESSAGE_ID_CORRUPTED_THIS = 2
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER1 = 3
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER2 = 4
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER3 = 5
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER4 = 6
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER5 = 7
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER6 = 8
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER7 = 9
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER8 = 10
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER9 = 11
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER10 = 12
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER11 = 13
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER12 = 14
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER13 = 15
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER14 = 16
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER15 = 17
    D3D12_MESSAGE_ID_CORRUPTED_MULTITHREADING = 18
    D3D12_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 19
    D3D12_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 20
    D3D12_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 21
    D3D12_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 24
    D3D12_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 25
    D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 26
    D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 27
    D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 28
    D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANESLICE = 29
    D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANESLICE = 30
    D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 31
    D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 32
    D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 35
    D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 36
    D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 37
    D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 38
    D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANESLICE = 39
    D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANESLICE = 40
    D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 41
    D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 42
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 45
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 46
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 47
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 48
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 49
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 52
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 53
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 54
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 55
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 56
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 57
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 58
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 59
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 60
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 61
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 62
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 63
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 64
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 65
    D3D12_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 66
    D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 67
    D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 68
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 69
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 70
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 71
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 72
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 73
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 74
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 75
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 76
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 79
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 80
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 81
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 82
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 83
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 84
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 85
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 86
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 87
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 88
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 89
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 90
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 91
    D3D12_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 92
    D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 93
    D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 94
    D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 95
    D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 96
    D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 97
    D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 98
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 100
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 101
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 102
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 103
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 104
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 105
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 106
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 107
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 108
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 109
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 111
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 112
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 113
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 114
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 115
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 116
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 117
    D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 135
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_NOT_SET = 200
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_MISMATCH = 201
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_NOT_SET = 202
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 209
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_TOO_SMALL = 210
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_NOT_SET = 211
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_FORMAT_INVALID = 212
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_TOO_SMALL = 213
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INVALID_PRIMITIVETOPOLOGY = 219
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_STRIDE_UNALIGNED = 221
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_OFFSET_UNALIGNED = 222
    D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 232
    D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 233
    D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 234
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 239
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 240
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 245
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 253
    D3D12_MESSAGE_ID_LIVE_OBJECT_SUMMARY = 255
    D3D12_MESSAGE_ID_LIVE_DEVICE = 274
    D3D12_MESSAGE_ID_LIVE_SWAPCHAIN = 275
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS = 276
    D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE = 277
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE = 278
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER = 280
    D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE = 283
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM = 284
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES = 285
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES = 286
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES = 287
    D3D12_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY = 289
    D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE = 290
    D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE = 291
    D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE = 292
    D3D12_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY = 294
    D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE = 295
    D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE = 296
    D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE = 297
    D3D12_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED = 310
    D3D12_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE = 318
    D3D12_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY = 321
    D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE = 322
    D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE = 323
    D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 331
    D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 332
    D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 333
    D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 334
    D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED = 335
    D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 336
    D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED = 337
    D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE = 340
    D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC = 341
    D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT = 342
    D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANESLICE = 343
    D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANESLICE = 344
    D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS = 345
    D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT = 346
    D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS = 354
    D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT = 401
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS = 403
    D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 410
    D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 412
    D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 414
    D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 416
    D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED = 418
    D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 420
    D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 422
    D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED = 425
    D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED = 426
    D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED = 427
    D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED = 428
    D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED = 429
    D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED = 430
    D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED = 431
    D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT = 447
    D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT = 448
    D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER = 493
    D3D12_MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER = 494
    D3D12_MESSAGE_ID_CREATEDEVICE_INVALIDARGS = 506
    D3D12_MESSAGE_ID_CREATEDEVICE_WARNING = 507
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_TYPE = 519
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_NULL_POINTER = 520
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SUBRESOURCE = 521
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_RESERVED_BITS = 522
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISSING_BIND_FLAGS = 523
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_MISC_FLAGS = 524
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_MATCHING_STATES = 525
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINATION = 526
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_BEFORE_AFTER_MISMATCH = 527
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_RESOURCE = 528
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_SAMPLE_COUNT = 529
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS = 530
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINED_FLAGS = 531
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS_FOR_FORMAT = 532
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SPLIT_BARRIER = 533
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_END = 534
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_BEGIN = 535
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAG = 536
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMMAND_LIST_TYPE = 537
    D3D12_MESSAGE_ID_INVALID_SUBRESOURCE_STATE = 538
    D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CONTENTION = 540
    D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET = 541
    D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET_BUNDLE = 542
    D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CANNOT_RESET = 543
    D3D12_MESSAGE_ID_COMMAND_LIST_OPEN = 544
    D3D12_MESSAGE_ID_INVALID_BUNDLE_API = 546
    D3D12_MESSAGE_ID_COMMAND_LIST_CLOSED = 547
    D3D12_MESSAGE_ID_WRONG_COMMAND_ALLOCATOR_TYPE = 549
    D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_SYNC = 552
    D3D12_MESSAGE_ID_COMMAND_LIST_SYNC = 553
    D3D12_MESSAGE_ID_SET_DESCRIPTOR_HEAP_INVALID = 554
    D3D12_MESSAGE_ID_CREATE_COMMANDQUEUE = 557
    D3D12_MESSAGE_ID_CREATE_COMMANDALLOCATOR = 558
    D3D12_MESSAGE_ID_CREATE_PIPELINESTATE = 559
    D3D12_MESSAGE_ID_CREATE_COMMANDLIST12 = 560
    D3D12_MESSAGE_ID_CREATE_RESOURCE = 562
    D3D12_MESSAGE_ID_CREATE_DESCRIPTORHEAP = 563
    D3D12_MESSAGE_ID_CREATE_ROOTSIGNATURE = 564
    D3D12_MESSAGE_ID_CREATE_LIBRARY = 565
    D3D12_MESSAGE_ID_CREATE_HEAP = 566
    D3D12_MESSAGE_ID_CREATE_MONITOREDFENCE = 567
    D3D12_MESSAGE_ID_CREATE_QUERYHEAP = 568
    D3D12_MESSAGE_ID_CREATE_COMMANDSIGNATURE = 569
    D3D12_MESSAGE_ID_LIVE_COMMANDQUEUE = 570
    D3D12_MESSAGE_ID_LIVE_COMMANDALLOCATOR = 571
    D3D12_MESSAGE_ID_LIVE_PIPELINESTATE = 572
    D3D12_MESSAGE_ID_LIVE_COMMANDLIST12 = 573
    D3D12_MESSAGE_ID_LIVE_RESOURCE = 575
    D3D12_MESSAGE_ID_LIVE_DESCRIPTORHEAP = 576
    D3D12_MESSAGE_ID_LIVE_ROOTSIGNATURE = 577
    D3D12_MESSAGE_ID_LIVE_LIBRARY = 578
    D3D12_MESSAGE_ID_LIVE_HEAP = 579
    D3D12_MESSAGE_ID_LIVE_MONITOREDFENCE = 580
    D3D12_MESSAGE_ID_LIVE_QUERYHEAP = 581
    D3D12_MESSAGE_ID_LIVE_COMMANDSIGNATURE = 582
    D3D12_MESSAGE_ID_DESTROY_COMMANDQUEUE = 583
    D3D12_MESSAGE_ID_DESTROY_COMMANDALLOCATOR = 584
    D3D12_MESSAGE_ID_DESTROY_PIPELINESTATE = 585
    D3D12_MESSAGE_ID_DESTROY_COMMANDLIST12 = 586
    D3D12_MESSAGE_ID_DESTROY_RESOURCE = 588
    D3D12_MESSAGE_ID_DESTROY_DESCRIPTORHEAP = 589
    D3D12_MESSAGE_ID_DESTROY_ROOTSIGNATURE = 590
    D3D12_MESSAGE_ID_DESTROY_LIBRARY = 591
    D3D12_MESSAGE_ID_DESTROY_HEAP = 592
    D3D12_MESSAGE_ID_DESTROY_MONITOREDFENCE = 593
    D3D12_MESSAGE_ID_DESTROY_QUERYHEAP = 594
    D3D12_MESSAGE_ID_DESTROY_COMMANDSIGNATURE = 595
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONS = 597
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMISCFLAGS = 599
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDARG_RETURN = 602
    D3D12_MESSAGE_ID_CREATERESOURCE_OUTOFMEMORY_RETURN = 603
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDESC = 604
    D3D12_MESSAGE_ID_POSSIBLY_INVALID_SUBRESOURCE_STATE = 607
    D3D12_MESSAGE_ID_INVALID_USE_OF_NON_RESIDENT_RESOURCE = 608
    D3D12_MESSAGE_ID_POSSIBLE_INVALID_USE_OF_NON_RESIDENT_RESOURCE = 609
    D3D12_MESSAGE_ID_BUNDLE_PIPELINE_STATE_MISMATCH = 610
    D3D12_MESSAGE_ID_PRIMITIVE_TOPOLOGY_MISMATCH_PIPELINE_STATE = 611
    D3D12_MESSAGE_ID_RENDER_TARGET_FORMAT_MISMATCH_PIPELINE_STATE = 613
    D3D12_MESSAGE_ID_RENDER_TARGET_SAMPLE_DESC_MISMATCH_PIPELINE_STATE = 614
    D3D12_MESSAGE_ID_DEPTH_STENCIL_FORMAT_MISMATCH_PIPELINE_STATE = 615
    D3D12_MESSAGE_ID_DEPTH_STENCIL_SAMPLE_DESC_MISMATCH_PIPELINE_STATE = 616
    D3D12_MESSAGE_ID_CREATESHADER_INVALIDBYTECODE = 622
    D3D12_MESSAGE_ID_CREATEHEAP_NULLDESC = 623
    D3D12_MESSAGE_ID_CREATEHEAP_INVALIDSIZE = 624
    D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDHEAPTYPE = 625
    D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES = 626
    D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMEMORYPOOL = 627
    D3D12_MESSAGE_ID_CREATEHEAP_INVALIDPROPERTIES = 628
    D3D12_MESSAGE_ID_CREATEHEAP_INVALIDALIGNMENT = 629
    D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMISCFLAGS = 630
    D3D12_MESSAGE_ID_CREATEHEAP_INVALIDMISCFLAGS = 631
    D3D12_MESSAGE_ID_CREATEHEAP_INVALIDARG_RETURN = 632
    D3D12_MESSAGE_ID_CREATEHEAP_OUTOFMEMORY_RETURN = 633
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAPPROPERTIES = 634
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPTYPE = 635
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES = 636
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDMEMORYPOOL = 637
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPPROPERTIES = 638
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPMISCFLAGS = 639
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPMISCFLAGS = 640
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDARG_RETURN = 641
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_OUTOFMEMORY_RETURN = 642
    D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_UNRECOGNIZEDHEAPTYPE = 643
    D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_INVALIDHEAPTYPE = 644
    D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_INVALID_DESC = 645
    D3D12_MESSAGE_ID_INVALID_DESCRIPTOR_HANDLE = 646
    D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE = 647
    D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_RESOURCE = 649
    D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_DESC = 650
    D3D12_MESSAGE_ID_CREATE_UNORDEREDACCESS_VIEW_INVALID_COUNTER_USAGE = 652
    D3D12_MESSAGE_ID_COPY_DESCRIPTORS_INVALID_RANGES = 653
    D3D12_MESSAGE_ID_COPY_DESCRIPTORS_WRITE_ONLY_DESCRIPTOR = 654
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RTV_FORMAT_NOT_UNKNOWN = 655
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_RENDER_TARGET_COUNT = 656
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VERTEX_SHADER_NOT_SET = 657
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_NOT_SET = 658
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_HS_DS_SIGNATURE_MISMATCH = 659
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERINDEX = 660
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_COMPONENTTYPE = 661
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERMASK = 662
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SYSTEMVALUE = 663
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 664
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_MINPRECISION = 665
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 666
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_XOR_DS_MISMATCH = 667
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH = 668
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_CONTROL_POINT_COUNT_MISMATCH = 669
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_TESSELLATOR_DOMAIN_MISMATCH = 670
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 671
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_FORCED_SAMPLE_COUNT = 672
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_PRIMITIVETOPOLOGY = 673
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SYSTEMVALUE = 674
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 675
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 676
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_TYPE_MISMATCH = 677
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS = 678
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RENDERTARGETVIEW_NOT_SET = 679
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DEPTHSTENCILVIEW_NOT_SET = 680
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_INPUT_PRIMITIVE_MISMATCH = 681
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_POSITION_NOT_PRESENT = 682
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE_FLAGS = 683
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_INDEX_BUFFER_PROPERTIES = 684
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SAMPLE_DESC = 685
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_ROOT_SIGNATURE_MISMATCH = 686
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DS_ROOT_SIGNATURE_MISMATCH = 687
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VS_ROOT_SIGNATURE_MISMATCH = 688
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_ROOT_SIGNATURE_MISMATCH = 689
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_ROOT_SIGNATURE_MISMATCH = 690
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE = 691
    D3D12_MESSAGE_ID_EXECUTE_BUNDLE_OPEN_BUNDLE = 692
    D3D12_MESSAGE_ID_EXECUTE_BUNDLE_DESCRIPTOR_HEAP_MISMATCH = 693
    D3D12_MESSAGE_ID_EXECUTE_BUNDLE_TYPE = 694
    D3D12_MESSAGE_ID_DRAW_EMPTY_SCISSOR_RECTANGLE = 695
    D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_BLOB_NOT_FOUND = 696
    D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_DESERIALIZE_FAILED = 697
    D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_INVALID_CONFIGURATION = 698
    D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_NOT_SUPPORTED_ON_DEVICE = 699
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLRESOURCEPROPERTIES = 700
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAP = 701
    D3D12_MESSAGE_ID_GETRESOURCEALLOCATIONINFO_INVALIDRDESCS = 702
    D3D12_MESSAGE_ID_MAKERESIDENT_NULLOBJECTARRAY = 703
    D3D12_MESSAGE_ID_EVICT_NULLOBJECTARRAY = 705
    D3D12_MESSAGE_ID_SET_DESCRIPTOR_TABLE_INVALID = 708
    D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_INVALID = 709
    D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_BUFFER_VIEW_INVALID = 710
    D3D12_MESSAGE_ID_SET_ROOT_SHADER_RESOURCE_VIEW_INVALID = 711
    D3D12_MESSAGE_ID_SET_ROOT_UNORDERED_ACCESS_VIEW_INVALID = 712
    D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID_DESC = 713
    D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID_DESC = 715
    D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID_DESC = 717
    D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDDIMENSIONALITY = 718
    D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDLAYOUT = 719
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONALITY = 720
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDALIGNMENT = 721
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMIPLEVELS = 722
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDSAMPLEDESC = 723
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDLAYOUT = 724
    D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID = 725
    D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID = 726
    D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID = 727
    D3D12_MESSAGE_ID_SET_RENDER_TARGETS_INVALID = 728
    D3D12_MESSAGE_ID_CREATEQUERY_HEAP_INVALID_PARAMETERS = 729
    D3D12_MESSAGE_ID_BEGIN_END_QUERY_INVALID_PARAMETERS = 731
    D3D12_MESSAGE_ID_CLOSE_COMMAND_LIST_OPEN_QUERY = 732
    D3D12_MESSAGE_ID_RESOLVE_QUERY_DATA_INVALID_PARAMETERS = 733
    D3D12_MESSAGE_ID_SET_PREDICATION_INVALID_PARAMETERS = 734
    D3D12_MESSAGE_ID_TIMESTAMPS_NOT_SUPPORTED = 735
    D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDFORMAT = 737
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDFORMAT = 738
    D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_INVALIDSUBRESOURCERANGE = 739
    D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_INVALIDBASEOFFSET = 740
    D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDSUBRESOURCERANGE = 739
    D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDBASEOFFSET = 740
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_HEAP = 741
    D3D12_MESSAGE_ID_CREATE_SAMPLER_INVALID = 742
    D3D12_MESSAGE_ID_CREATECOMMANDSIGNATURE_INVALID = 743
    D3D12_MESSAGE_ID_EXECUTE_INDIRECT_INVALID_PARAMETERS = 744
    D3D12_MESSAGE_ID_GETGPUVIRTUALADDRESS_INVALID_RESOURCE_DIMENSION = 745
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUE = 815
    D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDCLEARVALUEFORMAT = 816
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUEFORMAT = 817
    D3D12_MESSAGE_ID_CREATERESOURCE_CLEARVALUEDENORMFLUSH = 818
    D3D12_MESSAGE_ID_CLEARRENDERTARGETVIEW_MISMATCHINGCLEARVALUE = 820
    D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_MISMATCHINGCLEARVALUE = 821
    D3D12_MESSAGE_ID_MAP_INVALIDHEAP = 822
    D3D12_MESSAGE_ID_UNMAP_INVALIDHEAP = 823
    D3D12_MESSAGE_ID_MAP_INVALIDRESOURCE = 824
    D3D12_MESSAGE_ID_UNMAP_INVALIDRESOURCE = 825
    D3D12_MESSAGE_ID_MAP_INVALIDSUBRESOURCE = 826
    D3D12_MESSAGE_ID_UNMAP_INVALIDSUBRESOURCE = 827
    D3D12_MESSAGE_ID_MAP_INVALIDRANGE = 828
    D3D12_MESSAGE_ID_UNMAP_INVALIDRANGE = 829
    D3D12_MESSAGE_ID_MAP_INVALIDDATAPOINTER = 832
    D3D12_MESSAGE_ID_MAP_INVALIDARG_RETURN = 833
    D3D12_MESSAGE_ID_MAP_OUTOFMEMORY_RETURN = 834
    D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_BUNDLENOTSUPPORTED = 835
    D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_COMMANDLISTMISMATCH = 836
    D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_OPENCOMMANDLIST = 837
    D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_FAILEDCOMMANDLIST = 838
    D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLDST = 839
    D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDDSTRESOURCEDIMENSION = 840
    D3D12_MESSAGE_ID_COPYBUFFERREGION_DSTRANGEOUTOFBOUNDS = 841
    D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLSRC = 842
    D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDSRCRESOURCEDIMENSION = 843
    D3D12_MESSAGE_ID_COPYBUFFERREGION_SRCRANGEOUTOFBOUNDS = 844
    D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDCOPYFLAGS = 845
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLDST = 846
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTTYPE = 847
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCEDIMENSION = 848
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCE = 849
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTSUBRESOURCE = 850
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTOFFSET = 851
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTFORMAT = 852
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTFORMAT = 853
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDIMENSIONS = 854
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTROWPITCH = 855
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTPLACEMENT = 856
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDSPLACEDFOOTPRINTFORMAT = 857
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_DSTREGIONOUTOFBOUNDS = 858
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLSRC = 859
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCTYPE = 860
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCEDIMENSION = 861
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCE = 862
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCSUBRESOURCE = 863
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCOFFSET = 864
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCFORMAT = 865
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCFORMAT = 866
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDIMENSIONS = 867
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCROWPITCH = 868
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCPLACEMENT = 869
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDSPLACEDFOOTPRINTFORMAT = 870
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_SRCREGIONOUTOFBOUNDS = 871
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTCOORDINATES = 872
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCBOX = 873
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_FORMATMISMATCH = 874
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_EMPTYBOX = 875
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDCOPYFLAGS = 876
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SUBRESOURCE_INDEX = 877
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_FORMAT = 878
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_MISMATCH = 879
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SAMPLE_COUNT = 880
    D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_INVALID_SHADER = 881
    D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_CS_ROOT_SIGNATURE_MISMATCH = 882
    D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_MISSING_ROOT_SIGNATURE = 883
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALIDCACHEDBLOB = 884
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBADAPTERMISMATCH = 885
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDRIVERVERSIONMISMATCH = 886
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDESCMISMATCH = 887
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBIGNORED = 888
    D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDHEAP = 889
    D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDRESOURCE = 890
    D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDBOX = 891
    D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDSUBRESOURCE = 892
    D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_EMPTYBOX = 893
    D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDHEAP = 894
    D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDRESOURCE = 895
    D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDBOX = 896
    D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDSUBRESOURCE = 897
    D3D12_MESSAGE_ID_READFROMSUBRESOURCE_EMPTYBOX = 898
    D3D12_MESSAGE_ID_TOO_MANY_NODES_SPECIFIED = 899
    D3D12_MESSAGE_ID_INVALID_NODE_INDEX = 900
    D3D12_MESSAGE_ID_GETHEAPPROPERTIES_INVALIDRESOURCE = 901
    D3D12_MESSAGE_ID_NODE_MASK_MISMATCH = 902
    D3D12_MESSAGE_ID_COMMAND_LIST_OUTOFMEMORY = 903
    D3D12_MESSAGE_ID_COMMAND_LIST_MULTIPLE_SWAPCHAIN_BUFFER_REFERENCES = 904
    D3D12_MESSAGE_ID_COMMAND_LIST_TOO_MANY_SWAPCHAIN_REFERENCES = 905
    D3D12_MESSAGE_ID_COMMAND_QUEUE_TOO_MANY_SWAPCHAIN_REFERENCES = 906
    D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_WRONGSWAPCHAINBUFFERREFERENCE = 907
    D3D12_MESSAGE_ID_COMMAND_LIST_SETRENDERTARGETS_INVALIDNUMRENDERTARGETS = 908
    D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_TYPE = 909
    D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_FLAGS = 910
    D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFLAGS = 911
    D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFORMAT = 912
    D3D12_MESSAGE_ID_CREATESHAREDHEAP_INVALIDFLAGS = 913
    D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_UNRECOGNIZEDPROPERTIES = 914
    D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDSIZE = 915
    D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDOBJECT = 916
    D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDOBJECT = 917
    D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDKEY = 918
    D3D12_MESSAGE_ID_KEYEDMUTEX_WRONGSTATE = 919
    D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_PRIORITY = 920
    D3D12_MESSAGE_ID_OBJECT_DELETED_WHILE_STILL_IN_USE = 921
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_FLAGS = 922
    D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_HAS_NO_RESOURCE = 923
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RENDER_TARGET_DELETED = 924
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_ALL_RENDER_TARGETS_HAVE_UNKNOWN_FORMAT = 925
    D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_INTERSECTS_MULTIPLE_BUFFERS = 926
    D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_GPU_WRITTEN_READBACK_RESOURCE_MAPPED = 927
    D3D12_MESSAGE_ID_UNMAP_RANGE_NOT_EMPTY = 929
    D3D12_MESSAGE_ID_MAP_INVALID_NULLRANGE = 930
    D3D12_MESSAGE_ID_UNMAP_INVALID_NULLRANGE = 931
    D3D12_MESSAGE_ID_NO_GRAPHICS_API_SUPPORT = 932
    D3D12_MESSAGE_ID_NO_COMPUTE_API_SUPPORT = 933
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_FLAGS_NOT_SUPPORTED = 934
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_ROOT_ARGUMENT_UNINITIALIZED = 935
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_HEAP_INDEX_OUT_OF_BOUNDS = 936
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_TABLE_REGISTER_INDEX_OUT_OF_BOUNDS = 937
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_UNINITIALIZED = 938
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_TYPE_MISMATCH = 939
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_SRV_RESOURCE_DIMENSION_MISMATCH = 940
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_UAV_RESOURCE_DIMENSION_MISMATCH = 941
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_INCOMPATIBLE_RESOURCE_STATE = 942
    D3D12_MESSAGE_ID_COPYRESOURCE_NULLDST = 943
    D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDDSTRESOURCE = 944
    D3D12_MESSAGE_ID_COPYRESOURCE_NULLSRC = 945
    D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDSRCRESOURCE = 946
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_NULLDST = 947
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALIDDSTRESOURCE = 948
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_NULLSRC = 949
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALIDSRCRESOURCE = 950
    D3D12_MESSAGE_ID_PIPELINE_STATE_TYPE_MISMATCH = 951
    D3D12_MESSAGE_ID_COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_NOT_SET = 952
    D3D12_MESSAGE_ID_COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_MISMATCH = 953
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_ZERO_BARRIERS = 954
    D3D12_MESSAGE_ID_BEGIN_END_EVENT_MISMATCH = 955
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_POSSIBLE_BEFORE_AFTER_MISMATCH = 956
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_BEGIN_END = 957
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_INVALID_RESOURCE = 958
    D3D12_MESSAGE_ID_USE_OF_ZERO_REFCOUNT_OBJECT = 959
    D3D12_MESSAGE_ID_OBJECT_EVICTED_WHILE_STILL_IN_USE = 960
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_ROOT_DESCRIPTOR_ACCESS_OUT_OF_BOUNDS = 961
    D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_INVALIDLIBRARYBLOB = 962
    D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_DRIVERVERSIONMISMATCH = 963
    D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_ADAPTERVERSIONMISMATCH = 964
    D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_UNSUPPORTED = 965
    D3D12_MESSAGE_ID_CREATE_PIPELINELIBRARY = 966
    D3D12_MESSAGE_ID_LIVE_PIPELINELIBRARY = 967
    D3D12_MESSAGE_ID_DESTROY_PIPELINELIBRARY = 968
    D3D12_MESSAGE_ID_STOREPIPELINE_NONAME = 969
    D3D12_MESSAGE_ID_STOREPIPELINE_DUPLICATENAME = 970
    D3D12_MESSAGE_ID_LOADPIPELINE_NAMENOTFOUND = 971
    D3D12_MESSAGE_ID_LOADPIPELINE_INVALIDDESC = 972
    D3D12_MESSAGE_ID_PIPELINELIBRARY_SERIALIZE_NOTENOUGHMEMORY = 973
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_RT_OUTPUT_MISMATCH = 974
    D3D12_MESSAGE_ID_SETEVENTONMULTIPLEFENCECOMPLETION_INVALIDFLAGS = 975
    D3D12_MESSAGE_ID_CREATE_QUEUE_VIDEO_NOT_SUPPORTED = 976
    D3D12_MESSAGE_ID_CREATE_COMMAND_ALLOCATOR_VIDEO_NOT_SUPPORTED = 977
    D3D12_MESSAGE_ID_CREATEQUERY_HEAP_VIDEO_DECODE_STATISTICS_NOT_SUPPORTED = 978
    D3D12_MESSAGE_ID_CREATE_VIDEODECODECOMMANDLIST = 979
    D3D12_MESSAGE_ID_CREATE_VIDEODECODER = 980
    D3D12_MESSAGE_ID_CREATE_VIDEODECODESTREAM = 981
    D3D12_MESSAGE_ID_LIVE_VIDEODECODECOMMANDLIST = 982
    D3D12_MESSAGE_ID_LIVE_VIDEODECODER = 983
    D3D12_MESSAGE_ID_LIVE_VIDEODECODESTREAM = 984
    D3D12_MESSAGE_ID_DESTROY_VIDEODECODECOMMANDLIST = 985
    D3D12_MESSAGE_ID_DESTROY_VIDEODECODER = 986
    D3D12_MESSAGE_ID_DESTROY_VIDEODECODESTREAM = 987
    D3D12_MESSAGE_ID_DECODE_FRAME_INVALID_PARAMETERS = 988
    D3D12_MESSAGE_ID_DEPRECATED_API = 989
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_COMMAND_LIST_TYPE = 990
    D3D12_MESSAGE_ID_COMMAND_LIST_DESCRIPTOR_TABLE_NOT_SET = 991
    D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_CONSTANT_BUFFER_VIEW_NOT_SET = 992
    D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_SHADER_RESOURCE_VIEW_NOT_SET = 993
    D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_UNORDERED_ACCESS_VIEW_NOT_SET = 994
    D3D12_MESSAGE_ID_DISCARD_INVALID_SUBRESOURCE_RANGE = 995
    D3D12_MESSAGE_ID_DISCARD_ONE_SUBRESOURCE_FOR_MIPS_WITH_RECTS = 996
    D3D12_MESSAGE_ID_DISCARD_NO_RECTS_FOR_NON_TEXTURE2D = 997
    D3D12_MESSAGE_ID_COPY_ON_SAME_SUBRESOURCE = 998
    D3D12_MESSAGE_ID_SETRESIDENCYPRIORITY_INVALID_PAGEABLE = 999
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_UNSUPPORTED = 1000
    D3D12_MESSAGE_ID_STATIC_DESCRIPTOR_INVALID_DESCRIPTOR_CHANGE = 1001
    D3D12_MESSAGE_ID_DATA_STATIC_DESCRIPTOR_INVALID_DATA_CHANGE = 1002
    D3D12_MESSAGE_ID_DATA_STATIC_WHILE_SET_AT_EXECUTE_DESCRIPTOR_INVALID_DATA_CHANGE = 1003
    D3D12_MESSAGE_ID_EXECUTE_BUNDLE_STATIC_DESCRIPTOR_DATA_STATIC_NOT_SET = 1004
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_RESOURCE_ACCESS_OUT_OF_BOUNDS = 1005
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_SAMPLER_MODE_MISMATCH = 1006
    D3D12_MESSAGE_ID_CREATE_FENCE_INVALID_FLAGS = 1007
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_DUPLICATE_SUBRESOURCE_TRANSITIONS = 1008
    D3D12_MESSAGE_ID_SETRESIDENCYPRIORITY_INVALID_PRIORITY = 1009
    D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_LARGE_NUM_DESCRIPTORS = 1013
    D3D12_MESSAGE_ID_BEGIN_EVENT = 1014
    D3D12_MESSAGE_ID_END_EVENT = 1015
    D3D12_MESSAGE_ID_CREATEDEVICE_DEBUG_LAYER_STARTUP_OPTIONS = 1016
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_DEPTHBOUNDSTEST_UNSUPPORTED = 1017
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_DUPLICATE_SUBOBJECT = 1018
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_UNKNOWN_SUBOBJECT = 1019
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_ZERO_SIZE_STREAM = 1020
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_STREAM = 1021
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CANNOT_DEDUCE_TYPE = 1022
    D3D12_MESSAGE_ID_COMMAND_LIST_STATIC_DESCRIPTOR_RESOURCE_DIMENSION_MISMATCH = 1023
    D3D12_MESSAGE_ID_CREATE_COMMAND_QUEUE_INSUFFICIENT_PRIVILEGE_FOR_GLOBAL_REALTIME = 1024
    D3D12_MESSAGE_ID_CREATE_COMMAND_QUEUE_INSUFFICIENT_HARDWARE_SUPPORT_FOR_GLOBAL_REALTIME = 1025
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_ARCHITECTURE = 1026
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DST = 1027
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DST_RESOURCE_DIMENSION = 1028
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DST_RANGE_OUT_OF_BOUNDS = 1029
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_SRC = 1030
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE_DIMENSION = 1031
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_SRC_RANGE_OUT_OF_BOUNDS = 1032
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_OFFSET_ALIGNMENT = 1033
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DEPENDENT_RESOURCES = 1034
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DEPENDENT_SUBRESOURCE_RANGES = 1035
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DEPENDENT_RESOURCE = 1036
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DEPENDENT_SUBRESOURCE_RANGE = 1037
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DEPENDENT_SUBRESOURCE_OUT_OF_BOUNDS = 1038
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DEPENDENT_RANGE_OUT_OF_BOUNDS = 1039
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_ZERO_DEPENDENCIES = 1040
    D3D12_MESSAGE_ID_DEVICE_CREATE_SHARED_HANDLE_INVALIDARG = 1041
    D3D12_MESSAGE_ID_DESCRIPTOR_HANDLE_WITH_INVALID_RESOURCE = 1042
    D3D12_MESSAGE_ID_SETDEPTHBOUNDS_INVALIDARGS = 1043
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_RESOURCE_STATE_IMPRECISE = 1044
    D3D12_MESSAGE_ID_COMMAND_LIST_PIPELINE_STATE_NOT_SET = 1045
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_MODEL_MISMATCH = 1046
    D3D12_MESSAGE_ID_OBJECT_ACCESSED_WHILE_STILL_IN_USE = 1047
    D3D12_MESSAGE_ID_PROGRAMMABLE_MSAA_UNSUPPORTED = 1048
    D3D12_MESSAGE_ID_SETSAMPLEPOSITIONS_INVALIDARGS = 1049
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCEREGION_INVALID_RECT = 1050
    D3D12_MESSAGE_ID_CREATE_VIDEODECODECOMMANDQUEUE = 1051
    D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSCOMMANDLIST = 1052
    D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSCOMMANDQUEUE = 1053
    D3D12_MESSAGE_ID_LIVE_VIDEODECODECOMMANDQUEUE = 1054
    D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSCOMMANDLIST = 1055
    D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSCOMMANDQUEUE = 1056
    D3D12_MESSAGE_ID_DESTROY_VIDEODECODECOMMANDQUEUE = 1057
    D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSCOMMANDLIST = 1058
    D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSCOMMANDQUEUE = 1059
    D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSOR = 1060
    D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSSTREAM = 1061
    D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSOR = 1062
    D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSSTREAM = 1063
    D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSOR = 1064
    D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSSTREAM = 1065
    D3D12_MESSAGE_ID_PROCESS_FRAME_INVALID_PARAMETERS = 1066
    D3D12_MESSAGE_ID_COPY_INVALIDLAYOUT = 1067
    D3D12_MESSAGE_ID_CREATE_CRYPTO_SESSION = 1068
    D3D12_MESSAGE_ID_CREATE_CRYPTO_SESSION_POLICY = 1069
    D3D12_MESSAGE_ID_CREATE_PROTECTED_RESOURCE_SESSION = 1070
    D3D12_MESSAGE_ID_LIVE_CRYPTO_SESSION = 1071
    D3D12_MESSAGE_ID_LIVE_CRYPTO_SESSION_POLICY = 1072
    D3D12_MESSAGE_ID_LIVE_PROTECTED_RESOURCE_SESSION = 1073
    D3D12_MESSAGE_ID_DESTROY_CRYPTO_SESSION = 1074
    D3D12_MESSAGE_ID_DESTROY_CRYPTO_SESSION_POLICY = 1075
    D3D12_MESSAGE_ID_DESTROY_PROTECTED_RESOURCE_SESSION = 1076
    D3D12_MESSAGE_ID_PROTECTED_RESOURCE_SESSION_UNSUPPORTED = 1077
    D3D12_MESSAGE_ID_FENCE_INVALIDOPERATION = 1078
    D3D12_MESSAGE_ID_CREATEQUERY_HEAP_COPY_QUEUE_TIMESTAMPS_NOT_SUPPORTED = 1079
    D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_DEFERRED = 1080
    D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMFIRSTUSE = 1081
    D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMCLEAR = 1082
    D3D12_MESSAGE_ID_CREATE_VIDEODECODERHEAP = 1083
    D3D12_MESSAGE_ID_LIVE_VIDEODECODERHEAP = 1084
    D3D12_MESSAGE_ID_DESTROY_VIDEODECODERHEAP = 1085
    D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDARG_RETURN = 1086
    D3D12_MESSAGE_ID_OPENEXISTINGHEAP_OUTOFMEMORY_RETURN = 1087
    D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDADDRESS = 1088
    D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDHANDLE = 1089
    D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_DEST = 1090
    D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_MODE = 1091
    D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_ALIGNMENT = 1092
    D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_NOT_SUPPORTED = 1093
    D3D12_MESSAGE_ID_SETVIEWINSTANCEMASK_INVALIDARGS = 1094
    D3D12_MESSAGE_ID_VIEW_INSTANCING_UNSUPPORTED = 1095
    D3D12_MESSAGE_ID_VIEW_INSTANCING_INVALIDARGS = 1096
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_MISMATCH_DECODE_REFERENCE_ONLY_FLAG = 1097
    D3D12_MESSAGE_ID_COPYRESOURCE_MISMATCH_DECODE_REFERENCE_ONLY_FLAG = 1098
    D3D12_MESSAGE_ID_CREATE_VIDEO_DECODE_HEAP_CAPS_FAILURE = 1099
    D3D12_MESSAGE_ID_CREATE_VIDEO_DECODE_HEAP_CAPS_UNSUPPORTED = 1100
    D3D12_MESSAGE_ID_VIDEO_DECODE_SUPPORT_INVALID_INPUT = 1101
    D3D12_MESSAGE_ID_CREATE_VIDEO_DECODER_UNSUPPORTED = 1102
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_METADATA_ERROR = 1103
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VIEW_INSTANCING_VERTEX_SIZE_EXCEEDED = 1104
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RUNTIME_INTERNAL_ERROR = 1105
    D3D12_MESSAGE_ID_NO_VIDEO_API_SUPPORT = 1106
    D3D12_MESSAGE_ID_VIDEO_PROCESS_SUPPORT_INVALID_INPUT = 1107
    D3D12_MESSAGE_ID_CREATE_VIDEO_PROCESSOR_CAPS_FAILURE = 1108
    D3D12_MESSAGE_ID_VIDEO_PROCESS_SUPPORT_UNSUPPORTED_FORMAT = 1109
    D3D12_MESSAGE_ID_VIDEO_DECODE_FRAME_INVALID_ARGUMENT = 1110
    D3D12_MESSAGE_ID_ENQUEUE_MAKE_RESIDENT_INVALID_FLAGS = 1111
    D3D12_MESSAGE_ID_OPENEXISTINGHEAP_UNSUPPORTED = 1112
    D3D12_MESSAGE_ID_VIDEO_PROCESS_FRAMES_INVALID_ARGUMENT = 1113
    D3D12_MESSAGE_ID_VIDEO_DECODE_SUPPORT_UNSUPPORTED = 1114
    D3D12_MESSAGE_ID_CREATE_COMMANDRECORDER = 1115
    D3D12_MESSAGE_ID_LIVE_COMMANDRECORDER = 1116
    D3D12_MESSAGE_ID_DESTROY_COMMANDRECORDER = 1117
    D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_VIDEO_NOT_SUPPORTED = 1118
    D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_INVALID_SUPPORT_FLAGS = 1119
    D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_INVALID_FLAGS = 1120
    D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_MORE_RECORDERS_THAN_LOGICAL_PROCESSORS = 1121
    D3D12_MESSAGE_ID_CREATE_COMMANDPOOL = 1122
    D3D12_MESSAGE_ID_LIVE_COMMANDPOOL = 1123
    D3D12_MESSAGE_ID_DESTROY_COMMANDPOOL = 1124
    D3D12_MESSAGE_ID_CREATE_COMMAND_POOL_INVALID_FLAGS = 1125
    D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_VIDEO_NOT_SUPPORTED = 1126
    D3D12_MESSAGE_ID_COMMAND_RECORDER_SUPPORT_FLAGS_MISMATCH = 1127
    D3D12_MESSAGE_ID_COMMAND_RECORDER_CONTENTION = 1128
    D3D12_MESSAGE_ID_COMMAND_RECORDER_USAGE_WITH_CREATECOMMANDLIST_COMMAND_LIST = 1129
    D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_USAGE_WITH_CREATECOMMANDLIST1_COMMAND_LIST = 1130
    D3D12_MESSAGE_ID_CANNOT_EXECUTE_EMPTY_COMMAND_LIST = 1131
    D3D12_MESSAGE_ID_CANNOT_RESET_COMMAND_POOL_WITH_OPEN_COMMAND_LISTS = 1132
    D3D12_MESSAGE_ID_CANNOT_USE_COMMAND_RECORDER_WITHOUT_CURRENT_TARGET = 1133
    D3D12_MESSAGE_ID_CANNOT_CHANGE_COMMAND_RECORDER_TARGET_WHILE_RECORDING = 1134
    D3D12_MESSAGE_ID_COMMAND_POOL_SYNC = 1135
    D3D12_MESSAGE_ID_EVICT_UNDERFLOW = 1136
    D3D12_MESSAGE_ID_CREATE_META_COMMAND = 1137
    D3D12_MESSAGE_ID_LIVE_META_COMMAND = 1138
    D3D12_MESSAGE_ID_DESTROY_META_COMMAND = 1139
    D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALID_DST_RESOURCE = 1140
    D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALID_SRC_RESOURCE = 1141
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DST_RESOURCE = 1142
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE = 1143
    D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_NULL_BUFFER = 1144
    D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_NULL_RESOURCE_DESC = 1145
    D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_UNSUPPORTED = 1146
    D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_DIMENSION = 1147
    D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_FLAGS = 1148
    D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_OFFSET = 1149
    D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_DIMENSION = 1150
    D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_FLAGS = 1151
    D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_OUTOFMEMORY_RETURN = 1152
    D3D12_MESSAGE_ID_CANNOT_CREATE_GRAPHICS_AND_VIDEO_COMMAND_RECORDER = 1153
    D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_POSSIBLY_MISMATCHING_PROPERTIES = 1154
    D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_INVALID_COMMAND_LIST_TYPE = 1155
    D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_INCOMPATIBLE_WITH_STRUCTURED_BUFFERS = 1156
    D3D12_MESSAGE_ID_COMPUTE_ONLY_DEVICE_OPERATION_UNSUPPORTED = 1157
    D3D12_MESSAGE_ID_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INVALID = 1158
    D3D12_MESSAGE_ID_EMIT_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_INVALID = 1159
    D3D12_MESSAGE_ID_COPY_RAYTRACING_ACCELERATION_STRUCTURE_INVALID = 1160
    D3D12_MESSAGE_ID_DISPATCH_RAYS_INVALID = 1161
    D3D12_MESSAGE_ID_GET_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO_INVALID = 1162
    D3D12_MESSAGE_ID_CREATE_LIFETIMETRACKER = 1163
    D3D12_MESSAGE_ID_LIVE_LIFETIMETRACKER = 1164
    D3D12_MESSAGE_ID_DESTROY_LIFETIMETRACKER = 1165
    D3D12_MESSAGE_ID_DESTROYOWNEDOBJECT_OBJECTNOTOWNED = 1166
    D3D12_MESSAGE_ID_CREATE_TRACKEDWORKLOAD = 1167
    D3D12_MESSAGE_ID_LIVE_TRACKEDWORKLOAD = 1168
    D3D12_MESSAGE_ID_DESTROY_TRACKEDWORKLOAD = 1169
    D3D12_MESSAGE_ID_RENDER_PASS_ERROR = 1170
    D3D12_MESSAGE_ID_META_COMMAND_ID_INVALID = 1171
    D3D12_MESSAGE_ID_META_COMMAND_UNSUPPORTED_PARAMS = 1172
    D3D12_MESSAGE_ID_META_COMMAND_FAILED_ENUMERATION = 1173
    D3D12_MESSAGE_ID_META_COMMAND_PARAMETER_SIZE_MISMATCH = 1174
    D3D12_MESSAGE_ID_UNINITIALIZED_META_COMMAND = 1175
    D3D12_MESSAGE_ID_META_COMMAND_INVALID_GPU_VIRTUAL_ADDRESS = 1176
    D3D12_MESSAGE_ID_CREATE_VIDEOENCODECOMMANDLIST = 1177
    D3D12_MESSAGE_ID_LIVE_VIDEOENCODECOMMANDLIST = 1178
    D3D12_MESSAGE_ID_DESTROY_VIDEOENCODECOMMANDLIST = 1179
    D3D12_MESSAGE_ID_CREATE_VIDEOENCODECOMMANDQUEUE = 1180
    D3D12_MESSAGE_ID_LIVE_VIDEOENCODECOMMANDQUEUE = 1181
    D3D12_MESSAGE_ID_DESTROY_VIDEOENCODECOMMANDQUEUE = 1182
    D3D12_MESSAGE_ID_CREATE_VIDEOMOTIONESTIMATOR = 1183
    D3D12_MESSAGE_ID_LIVE_VIDEOMOTIONESTIMATOR = 1184
    D3D12_MESSAGE_ID_DESTROY_VIDEOMOTIONESTIMATOR = 1185
    D3D12_MESSAGE_ID_CREATE_VIDEOMOTIONVECTORHEAP = 1186
    D3D12_MESSAGE_ID_LIVE_VIDEOMOTIONVECTORHEAP = 1187
    D3D12_MESSAGE_ID_DESTROY_VIDEOMOTIONVECTORHEAP = 1188
    D3D12_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOADS = 1189
    D3D12_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOAD_PAIRS = 1190
    D3D12_MESSAGE_ID_OUT_OF_ORDER_TRACKED_WORKLOAD_PAIR = 1191
    D3D12_MESSAGE_ID_CANNOT_ADD_TRACKED_WORKLOAD = 1192
    D3D12_MESSAGE_ID_INCOMPLETE_TRACKED_WORKLOAD_PAIR = 1193
    D3D12_MESSAGE_ID_CREATE_STATE_OBJECT_ERROR = 1194
    D3D12_MESSAGE_ID_GET_SHADER_IDENTIFIER_ERROR = 1195
    D3D12_MESSAGE_ID_GET_SHADER_STACK_SIZE_ERROR = 1196
    D3D12_MESSAGE_ID_GET_PIPELINE_STACK_SIZE_ERROR = 1197
    D3D12_MESSAGE_ID_SET_PIPELINE_STACK_SIZE_ERROR = 1198
    D3D12_MESSAGE_ID_GET_SHADER_IDENTIFIER_SIZE_INVALID = 1199
    D3D12_MESSAGE_ID_CHECK_DRIVER_MATCHING_IDENTIFIER_INVALID = 1200
    D3D12_MESSAGE_ID_CHECK_DRIVER_MATCHING_IDENTIFIER_DRIVER_REPORTED_ISSUE = 1201
    D3D12_MESSAGE_ID_RENDER_PASS_INVALID_RESOURCE_BARRIER = 1202
    D3D12_MESSAGE_ID_RENDER_PASS_DISALLOWED_API_CALLED = 1203
    D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_NEST_RENDER_PASSES = 1204
    D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_END_WITHOUT_BEGIN = 1205
    D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_CLOSE_COMMAND_LIST = 1206
    D3D12_MESSAGE_ID_RENDER_PASS_GPU_WORK_WHILE_SUSPENDED = 1207
    D3D12_MESSAGE_ID_RENDER_PASS_MISMATCHING_SUSPEND_RESUME = 1208
    D3D12_MESSAGE_ID_RENDER_PASS_NO_PRIOR_SUSPEND_WITHIN_EXECUTECOMMANDLISTS = 1209
    D3D12_MESSAGE_ID_RENDER_PASS_NO_SUBSEQUENT_RESUME_WITHIN_EXECUTECOMMANDLISTS = 1210
    D3D12_MESSAGE_ID_TRACKED_WORKLOAD_COMMAND_QUEUE_MISMATCH = 1211
    D3D12_MESSAGE_ID_TRACKED_WORKLOAD_NOT_SUPPORTED = 1212
    D3D12_MESSAGE_ID_RENDER_PASS_MISMATCHING_NO_ACCESS = 1213
    D3D12_MESSAGE_ID_RENDER_PASS_UNSUPPORTED_RESOLVE = 1214
    D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_INVALID_RESOURCE_PTR = 1215
    D3D12_MESSAGE_ID_WINDOWS7_FENCE_OUTOFORDER_SIGNAL = 1216
    D3D12_MESSAGE_ID_WINDOWS7_FENCE_OUTOFORDER_WAIT = 1217
    D3D12_MESSAGE_ID_VIDEO_CREATE_MOTION_ESTIMATOR_INVALID_ARGUMENT = 1218
    D3D12_MESSAGE_ID_VIDEO_CREATE_MOTION_VECTOR_HEAP_INVALID_ARGUMENT = 1219
    D3D12_MESSAGE_ID_ESTIMATE_MOTION_INVALID_ARGUMENT = 1220
    D3D12_MESSAGE_ID_RESOLVE_MOTION_VECTOR_HEAP_INVALID_ARGUMENT = 1221
    D3D12_MESSAGE_ID_GETGPUVIRTUALADDRESS_INVALID_HEAP_TYPE = 1222
    D3D12_MESSAGE_ID_SET_BACKGROUND_PROCESSING_MODE_INVALID_ARGUMENT = 1223
    D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_INVALID_COMMAND_LIST_TYPE_FOR_FEATURE_LEVEL = 1224
    D3D12_MESSAGE_ID_CREATE_VIDEOEXTENSIONCOMMAND = 1225
    D3D12_MESSAGE_ID_LIVE_VIDEOEXTENSIONCOMMAND = 1226
    D3D12_MESSAGE_ID_DESTROY_VIDEOEXTENSIONCOMMAND = 1227
    D3D12_MESSAGE_ID_INVALID_VIDEO_EXTENSION_COMMAND_ID = 1228
    D3D12_MESSAGE_ID_VIDEO_EXTENSION_COMMAND_INVALID_ARGUMENT = 1229
    D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_NOT_UNIQUE_IN_DXIL_LIBRARY = 1230
    D3D12_MESSAGE_ID_VARIABLE_SHADING_RATE_NOT_ALLOWED_WITH_TIR = 1231
    D3D12_MESSAGE_ID_GEOMETRY_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE = 1232
    D3D12_MESSAGE_ID_RSSETSHADING_RATE_INVALID_SHADING_RATE = 1233
    D3D12_MESSAGE_ID_RSSETSHADING_RATE_SHADING_RATE_NOT_PERMITTED_BY_CAP = 1234
    D3D12_MESSAGE_ID_RSSETSHADING_RATE_INVALID_COMBINER = 1235
    D3D12_MESSAGE_ID_RSSETSHADINGRATEIMAGE_REQUIRES_TIER_2 = 1236
    D3D12_MESSAGE_ID_RSSETSHADINGRATE_REQUIRES_TIER_1 = 1237
    D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_FORMAT = 1238
    D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_ARRAY_SIZE = 1239
    D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_MIP_LEVEL = 1240
    D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_SAMPLE_COUNT = 1241
    D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_SAMPLE_QUALITY = 1242
    D3D12_MESSAGE_ID_NON_RETAIL_SHADER_MODEL_WONT_VALIDATE = 1243
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_AS_ROOT_SIGNATURE_MISMATCH = 1244
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_ROOT_SIGNATURE_MISMATCH = 1245
    D3D12_MESSAGE_ID_ADD_TO_STATE_OBJECT_ERROR = 1246
    D3D12_MESSAGE_ID_CREATE_PROTECTED_RESOURCE_SESSION_INVALID_ARGUMENT = 1247
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_PSO_DESC_MISMATCH = 1248
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_MS_INCOMPLETE_TYPE = 1249
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_AS_NOT_MS_MISMATCH = 1250
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_NOT_PS_MISMATCH = 1251
    D3D12_MESSAGE_ID_NONZERO_SAMPLER_FEEDBACK_MIP_REGION_WITH_INCOMPATIBLE_FORMAT = 1252
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_SHADER_MISMATCH = 1253
    D3D12_MESSAGE_ID_EMPTY_DISPATCH = 1254
    D3D12_MESSAGE_ID_RESOURCE_FORMAT_REQUIRES_SAMPLER_FEEDBACK_CAPABILITY = 1255
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_MIP_REGION = 1256
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_DIMENSION = 1257
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_SAMPLE_COUNT = 1258
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_SAMPLE_QUALITY = 1259
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_LAYOUT = 1260
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_REQUIRES_UNORDERED_ACCESS_FLAG = 1261
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_NULL_ARGUMENTS = 1262
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_UAV_REQUIRES_SAMPLER_FEEDBACK_CAPABILITY = 1263
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_REQUIRES_FEEDBACK_MAP_FORMAT = 1264
    D3D12_MESSAGE_ID_CREATEMESHSHADER_INVALIDSHADERBYTECODE = 1265
    D3D12_MESSAGE_ID_CREATEMESHSHADER_OUTOFMEMORY = 1266
    D3D12_MESSAGE_ID_CREATEMESHSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 1267
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_TRANSCODE_INVALID_FORMAT = 1268
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_INVALID_MIP_LEVEL_COUNT = 1269
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_TRANSCODE_ARRAY_SIZE_MISMATCH = 1270
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_MISMATCHING_TARGETED_RESOURCE = 1271
    D3D12_MESSAGE_ID_CREATEMESHSHADER_OUTPUTEXCEEDSMAXSIZE = 1272
    D3D12_MESSAGE_ID_CREATEMESHSHADER_GROUPSHAREDEXCEEDSMAXSIZE = 1273
    D3D12_MESSAGE_ID_VERTEX_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE = 1274
    D3D12_MESSAGE_ID_MESH_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE = 1275
    D3D12_MESSAGE_ID_CREATEMESHSHADER_MISMATCHEDASMSPAYLOADSIZE = 1276
    D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_UNBOUNDED_STATIC_DESCRIPTORS = 1277
    D3D12_MESSAGE_ID_CREATEAMPLIFICATIONSHADER_INVALIDSHADERBYTECODE = 1278
    D3D12_MESSAGE_ID_CREATEAMPLIFICATIONSHADER_OUTOFMEMORY = 1279
    D3D12_MESSAGE_ID_CREATE_SHADERCACHESESSION = 1280
    D3D12_MESSAGE_ID_LIVE_SHADERCACHESESSION = 1281
    D3D12_MESSAGE_ID_DESTROY_SHADERCACHESESSION = 1282
    D3D12_MESSAGE_ID_CREATESHADERCACHESESSION_INVALIDARGS = 1283
    D3D12_MESSAGE_ID_CREATESHADERCACHESESSION_DISABLED = 1284
    D3D12_MESSAGE_ID_CREATESHADERCACHESESSION_ALREADYOPEN = 1285
    D3D12_MESSAGE_ID_SHADERCACHECONTROL_DEVELOPERMODE = 1286
    D3D12_MESSAGE_ID_SHADERCACHECONTROL_INVALIDFLAGS = 1287
    D3D12_MESSAGE_ID_SHADERCACHECONTROL_STATEALREADYSET = 1288
    D3D12_MESSAGE_ID_SHADERCACHECONTROL_IGNOREDFLAG = 1289
    D3D12_MESSAGE_ID_SHADERCACHESESSION_STOREVALUE_ALREADYPRESENT = 1290
    D3D12_MESSAGE_ID_SHADERCACHESESSION_STOREVALUE_HASHCOLLISION = 1291
    D3D12_MESSAGE_ID_SHADERCACHESESSION_STOREVALUE_CACHEFULL = 1292
    D3D12_MESSAGE_ID_SHADERCACHESESSION_FINDVALUE_NOTFOUND = 1293
    D3D12_MESSAGE_ID_SHADERCACHESESSION_CORRUPT = 1294
    D3D12_MESSAGE_ID_SHADERCACHESESSION_DISABLED = 1295
    D3D12_MESSAGE_ID_OVERSIZED_DISPATCH = 1296
    D3D12_MESSAGE_ID_CREATE_VIDEOENCODER = 1297
    D3D12_MESSAGE_ID_LIVE_VIDEOENCODER = 1298
    D3D12_MESSAGE_ID_DESTROY_VIDEOENCODER = 1299
    D3D12_MESSAGE_ID_CREATE_VIDEOENCODERHEAP = 1300
    D3D12_MESSAGE_ID_LIVE_VIDEOENCODERHEAP = 1301
    D3D12_MESSAGE_ID_DESTROY_VIDEOENCODERHEAP = 1302
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_MISMATCH_ENCODE_REFERENCE_ONLY_FLAG = 1303
    D3D12_MESSAGE_ID_COPYRESOURCE_MISMATCH_ENCODE_REFERENCE_ONLY_FLAG = 1304
    D3D12_MESSAGE_ID_ENCODE_FRAME_INVALID_PARAMETERS = 1305
    D3D12_MESSAGE_ID_ENCODE_FRAME_UNSUPPORTED_PARAMETERS = 1306
    D3D12_MESSAGE_ID_RESOLVE_ENCODER_OUTPUT_METADATA_INVALID_PARAMETERS = 1307
    D3D12_MESSAGE_ID_RESOLVE_ENCODER_OUTPUT_METADATA_UNSUPPORTED_PARAMETERS = 1308
    D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_INVALID_PARAMETERS = 1309
    D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_UNSUPPORTED_PARAMETERS = 1310
    D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_HEAP_INVALID_PARAMETERS = 1311
    D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_HEAP_UNSUPPORTED_PARAMETERS = 1312
    D3D12_MESSAGE_ID_CREATECOMMANDLIST_NULL_COMMANDALLOCATOR = 1313
    D3D12_MESSAGE_ID_CLEAR_UNORDERED_ACCESS_VIEW_INVALID_DESCRIPTOR_HANDLE = 1314
    D3D12_MESSAGE_ID_DESCRIPTOR_HEAP_NOT_SHADER_VISIBLE = 1315
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_BLENDOP_WARNING = 1316
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_BLENDOPALPHA_WARNING = 1317
    D3D12_MESSAGE_ID_WRITE_COMBINE_PERFORMANCE_WARNING = 1318
    D3D12_MESSAGE_ID_RESOLVE_QUERY_INVALID_QUERY_STATE = 1319
    D3D12_MESSAGE_ID_SETPRIVATEDATA_NO_ACCESS = 1320
    D3D12_MESSAGE_ID_COMMAND_LIST_STATIC_DESCRIPTOR_SAMPLER_MODE_MISMATCH = 1321
    D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_UNSUPPORTED_BUFFER_WIDTH = 1322
    D3D12_MESSAGE_ID_CREATEMESHSHADER_TOPOLOGY_MISMATCH = 1323
    D3D12_MESSAGE_ID_VRS_SUM_COMBINER_REQUIRES_CAPABILITY = 1324
    D3D12_MESSAGE_ID_SETTING_SHADING_RATE_FROM_MS_REQUIRES_CAPABILITY = 1325
    D3D12_MESSAGE_ID_SHADERCACHESESSION_SHADERCACHEDELETE_NOTSUPPORTED = 1326
    D3D12_MESSAGE_ID_SHADERCACHECONTROL_SHADERCACHECLEAR_NOTSUPPORTED = 1327
    D3D12_MESSAGE_ID_D3D12_MESSAGES_END = 1328
  end

  enum D3D12_MESSAGE_CALLBACK_FLAGS : Int32
    D3D12_MESSAGE_CALLBACK_FLAG_NONE = 0
    D3D12_MESSAGE_CALLBACK_IGNORE_FILTERS = 1
  end

  enum D3D12_AXIS_SHADING_RATE : Int32
    D3D12_AXIS_SHADING_RATE_1X = 0
    D3D12_AXIS_SHADING_RATE_2X = 1
    D3D12_AXIS_SHADING_RATE_4X = 2
  end

  enum D3D12_SHADING_RATE : Int32
    D3D12_SHADING_RATE_1X1 = 0
    D3D12_SHADING_RATE_1X2 = 1
    D3D12_SHADING_RATE_2X1 = 4
    D3D12_SHADING_RATE_2X2 = 5
    D3D12_SHADING_RATE_2X4 = 6
    D3D12_SHADING_RATE_4X2 = 9
    D3D12_SHADING_RATE_4X4 = 10
  end

  enum D3D12_SHADING_RATE_COMBINER : Int32
    D3D12_SHADING_RATE_COMBINER_PASSTHROUGH = 0
    D3D12_SHADING_RATE_COMBINER_OVERRIDE = 1
    D3D12_SHADING_RATE_COMBINER_MIN = 2
    D3D12_SHADING_RATE_COMBINER_MAX = 3
    D3D12_SHADING_RATE_COMBINER_SUM = 4
  end

  enum D3D12_SHADER_VERSION_TYPE : Int32
    D3D12_SHVER_PIXEL_SHADER = 0
    D3D12_SHVER_VERTEX_SHADER = 1
    D3D12_SHVER_GEOMETRY_SHADER = 2
    D3D12_SHVER_HULL_SHADER = 3
    D3D12_SHVER_DOMAIN_SHADER = 4
    D3D12_SHVER_COMPUTE_SHADER = 5
    D3D12_SHVER_RESERVED0 = 65520
  end

  union D3D12_CLEAR_VALUE_Anonymous_e__Union
    color : Float32[4]*
    depth_stencil : D3D12_DEPTH_STENCIL_VALUE
  end
  union D3D12_RESOURCE_BARRIER_Anonymous_e__Union
    transition : D3D12_RESOURCE_TRANSITION_BARRIER
    aliasing : D3D12_RESOURCE_ALIASING_BARRIER
    uav : D3D12_RESOURCE_UAV_BARRIER
  end
  union D3D12_TEXTURE_COPY_LOCATION_Anonymous_e__Union
    placed_footprint : D3D12_PLACED_SUBRESOURCE_FOOTPRINT
    subresource_index : UInt32
  end
  union D3D12_SHADER_RESOURCE_VIEW_DESC_Anonymous_e__Union
    buffer : D3D12_BUFFER_SRV
    texture1_d : D3D12_TEX1D_SRV
    texture1_d_array : D3D12_TEX1D_ARRAY_SRV
    texture2_d : D3D12_TEX2D_SRV
    texture2_d_array : D3D12_TEX2D_ARRAY_SRV
    texture2_dms : D3D12_TEX2DMS_SRV
    texture2_dms_array : D3D12_TEX2DMS_ARRAY_SRV
    texture3_d : D3D12_TEX3D_SRV
    texture_cube : D3D12_TEXCUBE_SRV
    texture_cube_array : D3D12_TEXCUBE_ARRAY_SRV
    raytracing_acceleration_structure : D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV
  end
  union D3D12_UNORDERED_ACCESS_VIEW_DESC_Anonymous_e__Union
    buffer : D3D12_BUFFER_UAV
    texture1_d : D3D12_TEX1D_UAV
    texture1_d_array : D3D12_TEX1D_ARRAY_UAV
    texture2_d : D3D12_TEX2D_UAV
    texture2_d_array : D3D12_TEX2D_ARRAY_UAV
    texture3_d : D3D12_TEX3D_UAV
  end
  union D3D12_RENDER_TARGET_VIEW_DESC_Anonymous_e__Union
    buffer : D3D12_BUFFER_RTV
    texture1_d : D3D12_TEX1D_RTV
    texture1_d_array : D3D12_TEX1D_ARRAY_RTV
    texture2_d : D3D12_TEX2D_RTV
    texture2_d_array : D3D12_TEX2D_ARRAY_RTV
    texture2_dms : D3D12_TEX2DMS_RTV
    texture2_dms_array : D3D12_TEX2DMS_ARRAY_RTV
    texture3_d : D3D12_TEX3D_RTV
  end
  union D3D12_DEPTH_STENCIL_VIEW_DESC_Anonymous_e__Union
    texture1_d : D3D12_TEX1D_DSV
    texture1_d_array : D3D12_TEX1D_ARRAY_DSV
    texture2_d : D3D12_TEX2D_DSV
    texture2_d_array : D3D12_TEX2D_ARRAY_DSV
    texture2_dms : D3D12_TEX2DMS_DSV
    texture2_dms_array : D3D12_TEX2DMS_ARRAY_DSV
  end
  union D3D12_ROOT_PARAMETER_Anonymous_e__Union
    descriptor_table : D3D12_ROOT_DESCRIPTOR_TABLE
    constants : D3D12_ROOT_CONSTANTS
    descriptor : D3D12_ROOT_DESCRIPTOR
  end
  union D3D12_ROOT_PARAMETER1_Anonymous_e__Union
    descriptor_table : D3D12_ROOT_DESCRIPTOR_TABLE1
    constants : D3D12_ROOT_CONSTANTS
    descriptor : D3D12_ROOT_DESCRIPTOR1
  end
  union D3D12_VERSIONED_ROOT_SIGNATURE_DESC_Anonymous_e__Union
    desc_1_0 : D3D12_ROOT_SIGNATURE_DESC
    desc_1_1 : D3D12_ROOT_SIGNATURE_DESC1
  end
  union D3D12_INDIRECT_ARGUMENT_DESC_Anonymous_e__Union
    vertex_buffer : D3D12_INDIRECT_ARGUMENT_DESC_Anonymous_e__Union_VertexBuffer_e__Struct
    constant : D3D12_INDIRECT_ARGUMENT_DESC_Anonymous_e__Union_Constant_e__Struct
    constant_buffer_view : D3D12_INDIRECT_ARGUMENT_DESC_Anonymous_e__Union_ConstantBufferView_e__Struct
    shader_resource_view : D3D12_INDIRECT_ARGUMENT_DESC_Anonymous_e__Union_ShaderResourceView_e__Struct
    unordered_access_view : D3D12_INDIRECT_ARGUMENT_DESC_Anonymous_e__Union_UnorderedAccessView_e__Struct
  end
  union D3D12_RAYTRACING_GEOMETRY_DESC_Anonymous_e__Union
    triangles : D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC
    aab_bs : D3D12_RAYTRACING_GEOMETRY_AABBS_DESC
  end
  union D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS_Anonymous_e__Union
    instance_descs : UInt64
    p_geometry_descs : D3D12_RAYTRACING_GEOMETRY_DESC*
    pp_geometry_descs : D3D12_RAYTRACING_GEOMETRY_DESC**
  end
  union D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA_Anonymous_e__Union
    dred_1_0 : D3D12_DEVICE_REMOVED_EXTENDED_DATA
    dred_1_1 : D3D12_DEVICE_REMOVED_EXTENDED_DATA1
    dred_1_2 : D3D12_DEVICE_REMOVED_EXTENDED_DATA2
    dred_1_3 : D3D12_DEVICE_REMOVED_EXTENDED_DATA3
  end
  union D3D12_RENDER_PASS_BEGINNING_ACCESS_Anonymous_e__Union
    clear : D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS
  end
  union D3D12_RENDER_PASS_ENDING_ACCESS_Anonymous_e__Union
    resolve : D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS
  end

  struct D3D12_COMMAND_QUEUE_DESC
    type : D3D12_COMMAND_LIST_TYPE
    priority : Int32
    flags : D3D12_COMMAND_QUEUE_FLAGS
    node_mask : UInt32
  end
  struct D3D12_INPUT_ELEMENT_DESC
    semantic_name : PSTR
    semantic_index : UInt32
    format : DXGI_FORMAT
    input_slot : UInt32
    aligned_byte_offset : UInt32
    input_slot_class : D3D12_INPUT_CLASSIFICATION
    instance_data_step_rate : UInt32
  end
  struct D3D12_SO_DECLARATION_ENTRY
    stream : UInt32
    semantic_name : PSTR
    semantic_index : UInt32
    start_component : UInt8
    component_count : UInt8
    output_slot : UInt8
  end
  struct D3D12_VIEWPORT
    top_left_x : Float32
    top_left_y : Float32
    width : Float32
    height : Float32
    min_depth : Float32
    max_depth : Float32
  end
  struct D3D12_BOX
    left : UInt32
    top : UInt32
    front : UInt32
    right : UInt32
    bottom : UInt32
    back : UInt32
  end
  struct D3D12_DEPTH_STENCILOP_DESC
    stencil_fail_op : D3D12_STENCIL_OP
    stencil_depth_fail_op : D3D12_STENCIL_OP
    stencil_pass_op : D3D12_STENCIL_OP
    stencil_func : D3D12_COMPARISON_FUNC
  end
  struct D3D12_DEPTH_STENCIL_DESC
    depth_enable : LibC::BOOL
    depth_write_mask : D3D12_DEPTH_WRITE_MASK
    depth_func : D3D12_COMPARISON_FUNC
    stencil_enable : LibC::BOOL
    stencil_read_mask : UInt8
    stencil_write_mask : UInt8
    front_face : D3D12_DEPTH_STENCILOP_DESC
    back_face : D3D12_DEPTH_STENCILOP_DESC
  end
  struct D3D12_DEPTH_STENCIL_DESC1
    depth_enable : LibC::BOOL
    depth_write_mask : D3D12_DEPTH_WRITE_MASK
    depth_func : D3D12_COMPARISON_FUNC
    stencil_enable : LibC::BOOL
    stencil_read_mask : UInt8
    stencil_write_mask : UInt8
    front_face : D3D12_DEPTH_STENCILOP_DESC
    back_face : D3D12_DEPTH_STENCILOP_DESC
    depth_bounds_test_enable : LibC::BOOL
  end
  struct D3D12_RENDER_TARGET_BLEND_DESC
    blend_enable : LibC::BOOL
    logic_op_enable : LibC::BOOL
    src_blend : D3D12_BLEND
    dest_blend : D3D12_BLEND
    blend_op : D3D12_BLEND_OP
    src_blend_alpha : D3D12_BLEND
    dest_blend_alpha : D3D12_BLEND
    blend_op_alpha : D3D12_BLEND_OP
    logic_op : D3D12_LOGIC_OP
    render_target_write_mask : UInt8
  end
  struct D3D12_BLEND_DESC
    alpha_to_coverage_enable : LibC::BOOL
    independent_blend_enable : LibC::BOOL
    render_target : D3D12_RENDER_TARGET_BLEND_DESC[8]*
  end
  struct D3D12_RASTERIZER_DESC
    fill_mode : D3D12_FILL_MODE
    cull_mode : D3D12_CULL_MODE
    front_counter_clockwise : LibC::BOOL
    depth_bias : Int32
    depth_bias_clamp : Float32
    slope_scaled_depth_bias : Float32
    depth_clip_enable : LibC::BOOL
    multisample_enable : LibC::BOOL
    antialiased_line_enable : LibC::BOOL
    forced_sample_count : UInt32
    conservative_raster : D3D12_CONSERVATIVE_RASTERIZATION_MODE
  end
  struct D3D12_SHADER_BYTECODE
    p_shader_bytecode : Void*
    bytecode_length : LibC::UINT_PTR
  end
  struct D3D12_STREAM_OUTPUT_DESC
    p_so_declaration : D3D12_SO_DECLARATION_ENTRY*
    num_entries : UInt32
    p_buffer_strides : UInt32*
    num_strides : UInt32
    rasterized_stream : UInt32
  end
  struct D3D12_INPUT_LAYOUT_DESC
    p_input_element_descs : D3D12_INPUT_ELEMENT_DESC*
    num_elements : UInt32
  end
  struct D3D12_CACHED_PIPELINE_STATE
    p_cached_blob : Void*
    cached_blob_size_in_bytes : LibC::UINT_PTR
  end
  struct D3D12_GRAPHICS_PIPELINE_STATE_DESC
    p_root_signature : ID3D12RootSignature
    vs : D3D12_SHADER_BYTECODE
    ps : D3D12_SHADER_BYTECODE
    ds : D3D12_SHADER_BYTECODE
    hs : D3D12_SHADER_BYTECODE
    gs : D3D12_SHADER_BYTECODE
    stream_output : D3D12_STREAM_OUTPUT_DESC
    blend_state : D3D12_BLEND_DESC
    sample_mask : UInt32
    rasterizer_state : D3D12_RASTERIZER_DESC
    depth_stencil_state : D3D12_DEPTH_STENCIL_DESC
    input_layout : D3D12_INPUT_LAYOUT_DESC
    ib_strip_cut_value : D3D12_INDEX_BUFFER_STRIP_CUT_VALUE
    primitive_topology_type : D3D12_PRIMITIVE_TOPOLOGY_TYPE
    num_render_targets : UInt32
    rtv_formats : DXGI_FORMAT[8]*
    dsv_format : DXGI_FORMAT
    sample_desc : DXGI_SAMPLE_DESC
    node_mask : UInt32
    cached_pso : D3D12_CACHED_PIPELINE_STATE
    flags : D3D12_PIPELINE_STATE_FLAGS
  end
  struct D3D12_COMPUTE_PIPELINE_STATE_DESC
    p_root_signature : ID3D12RootSignature
    cs : D3D12_SHADER_BYTECODE
    node_mask : UInt32
    cached_pso : D3D12_CACHED_PIPELINE_STATE
    flags : D3D12_PIPELINE_STATE_FLAGS
  end
  struct D3D12_RT_FORMAT_ARRAY
    rt_formats : DXGI_FORMAT[8]*
    num_render_targets : UInt32
  end
  struct D3D12_PIPELINE_STATE_STREAM_DESC
    size_in_bytes : LibC::UINT_PTR
    p_pipeline_state_subobject_stream : Void*
  end
  struct D3D12_FEATURE_DATA_D3D12_OPTIONS
    double_precision_float_shader_ops : LibC::BOOL
    output_merger_logic_op : LibC::BOOL
    min_precision_support : D3D12_SHADER_MIN_PRECISION_SUPPORT
    tiled_resources_tier : D3D12_TILED_RESOURCES_TIER
    resource_binding_tier : D3D12_RESOURCE_BINDING_TIER
    ps_specified_stencil_ref_supported : LibC::BOOL
    typed_uav_load_additional_formats : LibC::BOOL
    ro_vs_supported : LibC::BOOL
    conservative_rasterization_tier : D3D12_CONSERVATIVE_RASTERIZATION_TIER
    max_gpu_virtual_address_bits_per_resource : UInt32
    standard_swizzle64_kb_supported : LibC::BOOL
    cross_node_sharing_tier : D3D12_CROSS_NODE_SHARING_TIER
    cross_adapter_row_major_texture_supported : LibC::BOOL
    vp_and_rt_array_index_from_any_shader_feeding_rasterizer_supported_without_gs_emulation : LibC::BOOL
    resource_heap_tier : D3D12_RESOURCE_HEAP_TIER
  end
  struct D3D12_FEATURE_DATA_D3D12_OPTIONS1
    wave_ops : LibC::BOOL
    wave_lane_count_min : UInt32
    wave_lane_count_max : UInt32
    total_lane_count : UInt32
    expanded_compute_resource_states : LibC::BOOL
    int64_shader_ops : LibC::BOOL
  end
  struct D3D12_FEATURE_DATA_D3D12_OPTIONS2
    depth_bounds_test_supported : LibC::BOOL
    programmable_sample_positions_tier : D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER
  end
  struct D3D12_FEATURE_DATA_ROOT_SIGNATURE
    highest_version : D3D_ROOT_SIGNATURE_VERSION
  end
  struct D3D12_FEATURE_DATA_ARCHITECTURE
    node_index : UInt32
    tile_based_renderer : LibC::BOOL
    uma : LibC::BOOL
    cache_coherent_uma : LibC::BOOL
  end
  struct D3D12_FEATURE_DATA_ARCHITECTURE1
    node_index : UInt32
    tile_based_renderer : LibC::BOOL
    uma : LibC::BOOL
    cache_coherent_uma : LibC::BOOL
    isolated_mmu : LibC::BOOL
  end
  struct D3D12_FEATURE_DATA_FEATURE_LEVELS
    num_feature_levels : UInt32
    p_feature_levels_requested : D3D_FEATURE_LEVEL*
    max_supported_feature_level : D3D_FEATURE_LEVEL
  end
  struct D3D12_FEATURE_DATA_SHADER_MODEL
    highest_shader_model : D3D_SHADER_MODEL
  end
  struct D3D12_FEATURE_DATA_FORMAT_SUPPORT
    format : DXGI_FORMAT
    support1 : D3D12_FORMAT_SUPPORT1
    support2 : D3D12_FORMAT_SUPPORT2
  end
  struct D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS
    format : DXGI_FORMAT
    sample_count : UInt32
    flags : D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS
    num_quality_levels : UInt32
  end
  struct D3D12_FEATURE_DATA_FORMAT_INFO
    format : DXGI_FORMAT
    plane_count : UInt8
  end
  struct D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT
    max_gpu_virtual_address_bits_per_resource : UInt32
    max_gpu_virtual_address_bits_per_process : UInt32
  end
  struct D3D12_FEATURE_DATA_SHADER_CACHE
    support_flags : D3D12_SHADER_CACHE_SUPPORT_FLAGS
  end
  struct D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY
    command_list_type : D3D12_COMMAND_LIST_TYPE
    priority : UInt32
    priority_for_type_is_supported : LibC::BOOL
  end
  struct D3D12_FEATURE_DATA_D3D12_OPTIONS3
    copy_queue_timestamp_queries_supported : LibC::BOOL
    casting_fully_typed_format_supported : LibC::BOOL
    write_buffer_immediate_support_flags : D3D12_COMMAND_LIST_SUPPORT_FLAGS
    view_instancing_tier : D3D12_VIEW_INSTANCING_TIER
    barycentrics_supported : LibC::BOOL
  end
  struct D3D12_FEATURE_DATA_EXISTING_HEAPS
    supported : LibC::BOOL
  end
  struct D3D12_FEATURE_DATA_DISPLAYABLE
    displayable_texture : LibC::BOOL
    shared_resource_compatibility_tier : D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER
  end
  struct D3D12_FEATURE_DATA_D3D12_OPTIONS4
    msaa64_kb_aligned_texture_supported : LibC::BOOL
    shared_resource_compatibility_tier : D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER
    native16_bit_shader_ops_supported : LibC::BOOL
  end
  struct D3D12_FEATURE_DATA_SERIALIZATION
    node_index : UInt32
    heap_serialization_tier : D3D12_HEAP_SERIALIZATION_TIER
  end
  struct D3D12_FEATURE_DATA_CROSS_NODE
    sharing_tier : D3D12_CROSS_NODE_SHARING_TIER
    atomic_shader_instructions : LibC::BOOL
  end
  struct D3D12_FEATURE_DATA_D3D12_OPTIONS5
    srv_only_tiled_resource_tier3 : LibC::BOOL
    render_passes_tier : D3D12_RENDER_PASS_TIER
    raytracing_tier : D3D12_RAYTRACING_TIER
  end
  struct D3D12_FEATURE_DATA_D3D12_OPTIONS6
    additional_shading_rates_supported : LibC::BOOL
    per_primitive_shading_rate_supported_with_viewport_indexing : LibC::BOOL
    variable_shading_rate_tier : D3D12_VARIABLE_SHADING_RATE_TIER
    shading_rate_image_tile_size : UInt32
    background_processing_supported : LibC::BOOL
  end
  struct D3D12_FEATURE_DATA_D3D12_OPTIONS7
    mesh_shader_tier : D3D12_MESH_SHADER_TIER
    sampler_feedback_tier : D3D12_SAMPLER_FEEDBACK_TIER
  end
  struct D3D12_FEATURE_DATA_QUERY_META_COMMAND
    command_id : Guid
    node_mask : UInt32
    p_query_input_data : Void*
    query_input_data_size_in_bytes : LibC::UINT_PTR
    p_query_output_data : Void*
    query_output_data_size_in_bytes : LibC::UINT_PTR
  end
  struct D3D12_FEATURE_DATA_D3D12_OPTIONS8
    unaligned_block_textures_supported : LibC::BOOL
  end
  struct D3D12_FEATURE_DATA_D3D12_OPTIONS9
    mesh_shader_pipeline_stats_supported : LibC::BOOL
    mesh_shader_supports_full_range_render_target_array_index : LibC::BOOL
    atomic_int64_on_typed_resource_supported : LibC::BOOL
    atomic_int64_on_group_shared_supported : LibC::BOOL
    derivatives_in_mesh_and_amplification_shaders_supported : LibC::BOOL
    wave_mma_tier : D3D12_WAVE_MMA_TIER
  end
  struct D3D12_FEATURE_DATA_D3D12_OPTIONS10
    variable_rate_shading_sum_combiner_supported : LibC::BOOL
    mesh_shader_per_primitive_shading_rate_supported : LibC::BOOL
  end
  struct D3D12_FEATURE_DATA_D3D12_OPTIONS11
    atomic_int64_on_descriptor_heap_resource_supported : LibC::BOOL
  end
  struct D3D12_RESOURCE_ALLOCATION_INFO
    size_in_bytes : UInt64
    alignment : UInt64
  end
  struct D3D12_RESOURCE_ALLOCATION_INFO1
    offset : UInt64
    alignment : UInt64
    size_in_bytes : UInt64
  end
  struct D3D12_HEAP_PROPERTIES
    type : D3D12_HEAP_TYPE
    cpu_page_property : D3D12_CPU_PAGE_PROPERTY
    memory_pool_preference : D3D12_MEMORY_POOL
    creation_node_mask : UInt32
    visible_node_mask : UInt32
  end
  struct D3D12_HEAP_DESC
    size_in_bytes : UInt64
    properties : D3D12_HEAP_PROPERTIES
    alignment : UInt64
    flags : D3D12_HEAP_FLAGS
  end
  struct D3D12_MIP_REGION
    width : UInt32
    height : UInt32
    depth : UInt32
  end
  struct D3D12_RESOURCE_DESC
    dimension : D3D12_RESOURCE_DIMENSION
    alignment : UInt64
    width : UInt64
    height : UInt32
    depth_or_array_size : UInt16
    mip_levels : UInt16
    format : DXGI_FORMAT
    sample_desc : DXGI_SAMPLE_DESC
    layout : D3D12_TEXTURE_LAYOUT
    flags : D3D12_RESOURCE_FLAGS
  end
  struct D3D12_RESOURCE_DESC1
    dimension : D3D12_RESOURCE_DIMENSION
    alignment : UInt64
    width : UInt64
    height : UInt32
    depth_or_array_size : UInt16
    mip_levels : UInt16
    format : DXGI_FORMAT
    sample_desc : DXGI_SAMPLE_DESC
    layout : D3D12_TEXTURE_LAYOUT
    flags : D3D12_RESOURCE_FLAGS
    sampler_feedback_mip_region : D3D12_MIP_REGION
  end
  struct D3D12_DEPTH_STENCIL_VALUE
    depth : Float32
    stencil : UInt8
  end
  struct D3D12_CLEAR_VALUE
    format : DXGI_FORMAT
    anonymous : D3D12_CLEAR_VALUE_Anonymous_e__Union
  end
  struct D3D12_RANGE
    begin_ : LibC::UINT_PTR
    end_ : LibC::UINT_PTR
  end
  struct D3D12_RANGE_UINT64
    begin_ : UInt64
    end_ : UInt64
  end
  struct D3D12_SUBRESOURCE_RANGE_UINT64
    subresource : UInt32
    range : D3D12_RANGE_UINT64
  end
  struct D3D12_SUBRESOURCE_INFO
    offset : UInt64
    row_pitch : UInt32
    depth_pitch : UInt32
  end
  struct D3D12_TILED_RESOURCE_COORDINATE
    x : UInt32
    y : UInt32
    z : UInt32
    subresource : UInt32
  end
  struct D3D12_TILE_REGION_SIZE
    num_tiles : UInt32
    use_box : LibC::BOOL
    width : UInt32
    height : UInt16
    depth : UInt16
  end
  struct D3D12_SUBRESOURCE_TILING
    width_in_tiles : UInt32
    height_in_tiles : UInt16
    depth_in_tiles : UInt16
    start_tile_index_in_overall_resource : UInt32
  end
  struct D3D12_TILE_SHAPE
    width_in_texels : UInt32
    height_in_texels : UInt32
    depth_in_texels : UInt32
  end
  struct D3D12_PACKED_MIP_INFO
    num_standard_mips : UInt8
    num_packed_mips : UInt8
    num_tiles_for_packed_mips : UInt32
    start_tile_index_in_overall_resource : UInt32
  end
  struct D3D12_RESOURCE_TRANSITION_BARRIER
    p_resource : ID3D12Resource
    subresource : UInt32
    state_before : D3D12_RESOURCE_STATES
    state_after : D3D12_RESOURCE_STATES
  end
  struct D3D12_RESOURCE_ALIASING_BARRIER
    p_resource_before : ID3D12Resource
    p_resource_after : ID3D12Resource
  end
  struct D3D12_RESOURCE_UAV_BARRIER
    p_resource : ID3D12Resource
  end
  struct D3D12_RESOURCE_BARRIER
    type : D3D12_RESOURCE_BARRIER_TYPE
    flags : D3D12_RESOURCE_BARRIER_FLAGS
    anonymous : D3D12_RESOURCE_BARRIER_Anonymous_e__Union
  end
  struct D3D12_SUBRESOURCE_FOOTPRINT
    format : DXGI_FORMAT
    width : UInt32
    height : UInt32
    depth : UInt32
    row_pitch : UInt32
  end
  struct D3D12_PLACED_SUBRESOURCE_FOOTPRINT
    offset : UInt64
    footprint : D3D12_SUBRESOURCE_FOOTPRINT
  end
  struct D3D12_TEXTURE_COPY_LOCATION
    p_resource : ID3D12Resource
    type : D3D12_TEXTURE_COPY_TYPE
    anonymous : D3D12_TEXTURE_COPY_LOCATION_Anonymous_e__Union
  end
  struct D3D12_SAMPLE_POSITION
    x : Int8
    y : Int8
  end
  struct D3D12_VIEW_INSTANCE_LOCATION
    viewport_array_index : UInt32
    render_target_array_index : UInt32
  end
  struct D3D12_VIEW_INSTANCING_DESC
    view_instance_count : UInt32
    p_view_instance_locations : D3D12_VIEW_INSTANCE_LOCATION*
    flags : D3D12_VIEW_INSTANCING_FLAGS
  end
  struct D3D12_BUFFER_SRV
    first_element : UInt64
    num_elements : UInt32
    structure_byte_stride : UInt32
    flags : D3D12_BUFFER_SRV_FLAGS
  end
  struct D3D12_TEX1D_SRV
    most_detailed_mip : UInt32
    mip_levels : UInt32
    resource_min_lod_clamp : Float32
  end
  struct D3D12_TEX1D_ARRAY_SRV
    most_detailed_mip : UInt32
    mip_levels : UInt32
    first_array_slice : UInt32
    array_size : UInt32
    resource_min_lod_clamp : Float32
  end
  struct D3D12_TEX2D_SRV
    most_detailed_mip : UInt32
    mip_levels : UInt32
    plane_slice : UInt32
    resource_min_lod_clamp : Float32
  end
  struct D3D12_TEX2D_ARRAY_SRV
    most_detailed_mip : UInt32
    mip_levels : UInt32
    first_array_slice : UInt32
    array_size : UInt32
    plane_slice : UInt32
    resource_min_lod_clamp : Float32
  end
  struct D3D12_TEX3D_SRV
    most_detailed_mip : UInt32
    mip_levels : UInt32
    resource_min_lod_clamp : Float32
  end
  struct D3D12_TEXCUBE_SRV
    most_detailed_mip : UInt32
    mip_levels : UInt32
    resource_min_lod_clamp : Float32
  end
  struct D3D12_TEXCUBE_ARRAY_SRV
    most_detailed_mip : UInt32
    mip_levels : UInt32
    first2_d_array_face : UInt32
    num_cubes : UInt32
    resource_min_lod_clamp : Float32
  end
  struct D3D12_TEX2DMS_SRV
    unused_field_nothing_to_define : UInt32
  end
  struct D3D12_TEX2DMS_ARRAY_SRV
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV
    location : UInt64
  end
  struct D3D12_SHADER_RESOURCE_VIEW_DESC
    format : DXGI_FORMAT
    view_dimension : D3D12_SRV_DIMENSION
    shader4_component_mapping : UInt32
    anonymous : D3D12_SHADER_RESOURCE_VIEW_DESC_Anonymous_e__Union
  end
  struct D3D12_CONSTANT_BUFFER_VIEW_DESC
    buffer_location : UInt64
    size_in_bytes : UInt32
  end
  struct D3D12_SAMPLER_DESC
    filter : D3D12_FILTER
    address_u : D3D12_TEXTURE_ADDRESS_MODE
    address_v : D3D12_TEXTURE_ADDRESS_MODE
    address_w : D3D12_TEXTURE_ADDRESS_MODE
    mip_lod_bias : Float32
    max_anisotropy : UInt32
    comparison_func : D3D12_COMPARISON_FUNC
    border_color : Float32[4]*
    min_lod : Float32
    max_lod : Float32
  end
  struct D3D12_BUFFER_UAV
    first_element : UInt64
    num_elements : UInt32
    structure_byte_stride : UInt32
    counter_offset_in_bytes : UInt64
    flags : D3D12_BUFFER_UAV_FLAGS
  end
  struct D3D12_TEX1D_UAV
    mip_slice : UInt32
  end
  struct D3D12_TEX1D_ARRAY_UAV
    mip_slice : UInt32
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D12_TEX2D_UAV
    mip_slice : UInt32
    plane_slice : UInt32
  end
  struct D3D12_TEX2D_ARRAY_UAV
    mip_slice : UInt32
    first_array_slice : UInt32
    array_size : UInt32
    plane_slice : UInt32
  end
  struct D3D12_TEX3D_UAV
    mip_slice : UInt32
    first_w_slice : UInt32
    w_size : UInt32
  end
  struct D3D12_UNORDERED_ACCESS_VIEW_DESC
    format : DXGI_FORMAT
    view_dimension : D3D12_UAV_DIMENSION
    anonymous : D3D12_UNORDERED_ACCESS_VIEW_DESC_Anonymous_e__Union
  end
  struct D3D12_BUFFER_RTV
    first_element : UInt64
    num_elements : UInt32
  end
  struct D3D12_TEX1D_RTV
    mip_slice : UInt32
  end
  struct D3D12_TEX1D_ARRAY_RTV
    mip_slice : UInt32
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D12_TEX2D_RTV
    mip_slice : UInt32
    plane_slice : UInt32
  end
  struct D3D12_TEX2DMS_RTV
    unused_field_nothing_to_define : UInt32
  end
  struct D3D12_TEX2D_ARRAY_RTV
    mip_slice : UInt32
    first_array_slice : UInt32
    array_size : UInt32
    plane_slice : UInt32
  end
  struct D3D12_TEX2DMS_ARRAY_RTV
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D12_TEX3D_RTV
    mip_slice : UInt32
    first_w_slice : UInt32
    w_size : UInt32
  end
  struct D3D12_RENDER_TARGET_VIEW_DESC
    format : DXGI_FORMAT
    view_dimension : D3D12_RTV_DIMENSION
    anonymous : D3D12_RENDER_TARGET_VIEW_DESC_Anonymous_e__Union
  end
  struct D3D12_TEX1D_DSV
    mip_slice : UInt32
  end
  struct D3D12_TEX1D_ARRAY_DSV
    mip_slice : UInt32
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D12_TEX2D_DSV
    mip_slice : UInt32
  end
  struct D3D12_TEX2D_ARRAY_DSV
    mip_slice : UInt32
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D12_TEX2DMS_DSV
    unused_field_nothing_to_define : UInt32
  end
  struct D3D12_TEX2DMS_ARRAY_DSV
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D12_DEPTH_STENCIL_VIEW_DESC
    format : DXGI_FORMAT
    view_dimension : D3D12_DSV_DIMENSION
    flags : D3D12_DSV_FLAGS
    anonymous : D3D12_DEPTH_STENCIL_VIEW_DESC_Anonymous_e__Union
  end
  struct D3D12_DESCRIPTOR_HEAP_DESC
    type : D3D12_DESCRIPTOR_HEAP_TYPE
    num_descriptors : UInt32
    flags : D3D12_DESCRIPTOR_HEAP_FLAGS
    node_mask : UInt32
  end
  struct D3D12_DESCRIPTOR_RANGE
    range_type : D3D12_DESCRIPTOR_RANGE_TYPE
    num_descriptors : UInt32
    base_shader_register : UInt32
    register_space : UInt32
    offset_in_descriptors_from_table_start : UInt32
  end
  struct D3D12_ROOT_DESCRIPTOR_TABLE
    num_descriptor_ranges : UInt32
    p_descriptor_ranges : D3D12_DESCRIPTOR_RANGE*
  end
  struct D3D12_ROOT_CONSTANTS
    shader_register : UInt32
    register_space : UInt32
    num32_bit_values : UInt32
  end
  struct D3D12_ROOT_DESCRIPTOR
    shader_register : UInt32
    register_space : UInt32
  end
  struct D3D12_ROOT_PARAMETER
    parameter_type : D3D12_ROOT_PARAMETER_TYPE
    anonymous : D3D12_ROOT_PARAMETER_Anonymous_e__Union
    shader_visibility : D3D12_SHADER_VISIBILITY
  end
  struct D3D12_STATIC_SAMPLER_DESC
    filter : D3D12_FILTER
    address_u : D3D12_TEXTURE_ADDRESS_MODE
    address_v : D3D12_TEXTURE_ADDRESS_MODE
    address_w : D3D12_TEXTURE_ADDRESS_MODE
    mip_lod_bias : Float32
    max_anisotropy : UInt32
    comparison_func : D3D12_COMPARISON_FUNC
    border_color : D3D12_STATIC_BORDER_COLOR
    min_lod : Float32
    max_lod : Float32
    shader_register : UInt32
    register_space : UInt32
    shader_visibility : D3D12_SHADER_VISIBILITY
  end
  struct D3D12_ROOT_SIGNATURE_DESC
    num_parameters : UInt32
    p_parameters : D3D12_ROOT_PARAMETER*
    num_static_samplers : UInt32
    p_static_samplers : D3D12_STATIC_SAMPLER_DESC*
    flags : D3D12_ROOT_SIGNATURE_FLAGS
  end
  struct D3D12_DESCRIPTOR_RANGE1
    range_type : D3D12_DESCRIPTOR_RANGE_TYPE
    num_descriptors : UInt32
    base_shader_register : UInt32
    register_space : UInt32
    flags : D3D12_DESCRIPTOR_RANGE_FLAGS
    offset_in_descriptors_from_table_start : UInt32
  end
  struct D3D12_ROOT_DESCRIPTOR_TABLE1
    num_descriptor_ranges : UInt32
    p_descriptor_ranges : D3D12_DESCRIPTOR_RANGE1*
  end
  struct D3D12_ROOT_DESCRIPTOR1
    shader_register : UInt32
    register_space : UInt32
    flags : D3D12_ROOT_DESCRIPTOR_FLAGS
  end
  struct D3D12_ROOT_PARAMETER1
    parameter_type : D3D12_ROOT_PARAMETER_TYPE
    anonymous : D3D12_ROOT_PARAMETER1_Anonymous_e__Union
    shader_visibility : D3D12_SHADER_VISIBILITY
  end
  struct D3D12_ROOT_SIGNATURE_DESC1
    num_parameters : UInt32
    p_parameters : D3D12_ROOT_PARAMETER1*
    num_static_samplers : UInt32
    p_static_samplers : D3D12_STATIC_SAMPLER_DESC*
    flags : D3D12_ROOT_SIGNATURE_FLAGS
  end
  struct D3D12_VERSIONED_ROOT_SIGNATURE_DESC
    version : D3D_ROOT_SIGNATURE_VERSION
    anonymous : D3D12_VERSIONED_ROOT_SIGNATURE_DESC_Anonymous_e__Union
  end
  struct D3D12_CPU_DESCRIPTOR_HANDLE
    ptr : LibC::UINT_PTR
  end
  struct D3D12_GPU_DESCRIPTOR_HANDLE
    ptr : UInt64
  end
  struct D3D12_DISCARD_REGION
    num_rects : UInt32
    p_rects : RECT*
    first_subresource : UInt32
    num_subresources : UInt32
  end
  struct D3D12_QUERY_HEAP_DESC
    type : D3D12_QUERY_HEAP_TYPE
    count : UInt32
    node_mask : UInt32
  end
  struct D3D12_QUERY_DATA_PIPELINE_STATISTICS
    ia_vertices : UInt64
    ia_primitives : UInt64
    vs_invocations : UInt64
    gs_invocations : UInt64
    gs_primitives : UInt64
    c_invocations : UInt64
    c_primitives : UInt64
    ps_invocations : UInt64
    hs_invocations : UInt64
    ds_invocations : UInt64
    cs_invocations : UInt64
  end
  struct D3D12_QUERY_DATA_PIPELINE_STATISTICS1
    ia_vertices : UInt64
    ia_primitives : UInt64
    vs_invocations : UInt64
    gs_invocations : UInt64
    gs_primitives : UInt64
    c_invocations : UInt64
    c_primitives : UInt64
    ps_invocations : UInt64
    hs_invocations : UInt64
    ds_invocations : UInt64
    cs_invocations : UInt64
    as_invocations : UInt64
    ms_invocations : UInt64
    ms_primitives : UInt64
  end
  struct D3D12_QUERY_DATA_SO_STATISTICS
    num_primitives_written : UInt64
    primitives_storage_needed : UInt64
  end
  struct D3D12_STREAM_OUTPUT_BUFFER_VIEW
    buffer_location : UInt64
    size_in_bytes : UInt64
    buffer_filled_size_location : UInt64
  end
  struct D3D12_DRAW_ARGUMENTS
    vertex_count_per_instance : UInt32
    instance_count : UInt32
    start_vertex_location : UInt32
    start_instance_location : UInt32
  end
  struct D3D12_DRAW_INDEXED_ARGUMENTS
    index_count_per_instance : UInt32
    instance_count : UInt32
    start_index_location : UInt32
    base_vertex_location : Int32
    start_instance_location : UInt32
  end
  struct D3D12_DISPATCH_ARGUMENTS
    thread_group_count_x : UInt32
    thread_group_count_y : UInt32
    thread_group_count_z : UInt32
  end
  struct D3D12_VERTEX_BUFFER_VIEW
    buffer_location : UInt64
    size_in_bytes : UInt32
    stride_in_bytes : UInt32
  end
  struct D3D12_INDEX_BUFFER_VIEW
    buffer_location : UInt64
    size_in_bytes : UInt32
    format : DXGI_FORMAT
  end
  struct D3D12_INDIRECT_ARGUMENT_DESC
    type : D3D12_INDIRECT_ARGUMENT_TYPE
    anonymous : D3D12_INDIRECT_ARGUMENT_DESC_Anonymous_e__Union
  end
  struct D3D12_INDIRECT_ARGUMENT_DESC_Anonymous_e__Union_ShaderResourceView_e__Struct
    root_parameter_index : UInt32
  end
  struct D3D12_INDIRECT_ARGUMENT_DESC_Anonymous_e__Union_Constant_e__Struct
    root_parameter_index : UInt32
    dest_offset_in32_bit_values : UInt32
    num32_bit_values_to_set : UInt32
  end
  struct D3D12_INDIRECT_ARGUMENT_DESC_Anonymous_e__Union_UnorderedAccessView_e__Struct
    root_parameter_index : UInt32
  end
  struct D3D12_INDIRECT_ARGUMENT_DESC_Anonymous_e__Union_VertexBuffer_e__Struct
    slot : UInt32
  end
  struct D3D12_INDIRECT_ARGUMENT_DESC_Anonymous_e__Union_ConstantBufferView_e__Struct
    root_parameter_index : UInt32
  end
  struct D3D12_COMMAND_SIGNATURE_DESC
    byte_stride : UInt32
    num_argument_descs : UInt32
    p_argument_descs : D3D12_INDIRECT_ARGUMENT_DESC*
    node_mask : UInt32
  end
  struct D3D12_WRITEBUFFERIMMEDIATE_PARAMETER
    dest : UInt64
    value : UInt32
  end
  struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT
    node_index : UInt32
    support : D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS
  end
  struct D3D12_PROTECTED_RESOURCE_SESSION_DESC
    node_mask : UInt32
    flags : D3D12_PROTECTED_RESOURCE_SESSION_FLAGS
  end
  struct D3D12_META_COMMAND_PARAMETER_DESC
    name : LibC::LPWSTR
    type : D3D12_META_COMMAND_PARAMETER_TYPE
    flags : D3D12_META_COMMAND_PARAMETER_FLAGS
    required_resource_state : D3D12_RESOURCE_STATES
    structure_offset : UInt32
  end
  struct D3D12_META_COMMAND_DESC
    id : Guid
    name : LibC::LPWSTR
    initialization_dirty_state : D3D12_GRAPHICS_STATES
    execution_dirty_state : D3D12_GRAPHICS_STATES
  end
  struct D3D12_STATE_SUBOBJECT
    type : D3D12_STATE_SUBOBJECT_TYPE
    p_desc : Void*
  end
  struct D3D12_STATE_OBJECT_CONFIG
    flags : D3D12_STATE_OBJECT_FLAGS
  end
  struct D3D12_GLOBAL_ROOT_SIGNATURE
    p_global_root_signature : ID3D12RootSignature
  end
  struct D3D12_LOCAL_ROOT_SIGNATURE
    p_local_root_signature : ID3D12RootSignature
  end
  struct D3D12_NODE_MASK
    node_mask : UInt32
  end
  struct D3D12_EXPORT_DESC
    name : LibC::LPWSTR
    export_to_rename : LibC::LPWSTR
    flags : D3D12_EXPORT_FLAGS
  end
  struct D3D12_DXIL_LIBRARY_DESC
    dxil_library : D3D12_SHADER_BYTECODE
    num_exports : UInt32
    p_exports : D3D12_EXPORT_DESC*
  end
  struct D3D12_EXISTING_COLLECTION_DESC
    p_existing_collection : ID3D12StateObject
    num_exports : UInt32
    p_exports : D3D12_EXPORT_DESC*
  end
  struct D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION
    p_subobject_to_associate : D3D12_STATE_SUBOBJECT*
    num_exports : UInt32
    p_exports : LibC::LPWSTR*
  end
  struct D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION
    subobject_to_associate : LibC::LPWSTR
    num_exports : UInt32
    p_exports : LibC::LPWSTR*
  end
  struct D3D12_HIT_GROUP_DESC
    hit_group_export : LibC::LPWSTR
    type : D3D12_HIT_GROUP_TYPE
    any_hit_shader_import : LibC::LPWSTR
    closest_hit_shader_import : LibC::LPWSTR
    intersection_shader_import : LibC::LPWSTR
  end
  struct D3D12_RAYTRACING_SHADER_CONFIG
    max_payload_size_in_bytes : UInt32
    max_attribute_size_in_bytes : UInt32
  end
  struct D3D12_RAYTRACING_PIPELINE_CONFIG
    max_trace_recursion_depth : UInt32
  end
  struct D3D12_RAYTRACING_PIPELINE_CONFIG1
    max_trace_recursion_depth : UInt32
    flags : D3D12_RAYTRACING_PIPELINE_FLAGS
  end
  struct D3D12_STATE_OBJECT_DESC
    type : D3D12_STATE_OBJECT_TYPE
    num_subobjects : UInt32
    p_subobjects : D3D12_STATE_SUBOBJECT*
  end
  struct D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE
    start_address : UInt64
    stride_in_bytes : UInt64
  end
  struct D3D12_GPU_VIRTUAL_ADDRESS_RANGE
    start_address : UInt64
    size_in_bytes : UInt64
  end
  struct D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE
    start_address : UInt64
    size_in_bytes : UInt64
    stride_in_bytes : UInt64
  end
  struct D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC
    transform3x4 : UInt64
    index_format : DXGI_FORMAT
    vertex_format : DXGI_FORMAT
    index_count : UInt32
    vertex_count : UInt32
    index_buffer : UInt64
    vertex_buffer : D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE
  end
  struct D3D12_RAYTRACING_AABB
    min_x : Float32
    min_y : Float32
    min_z : Float32
    max_x : Float32
    max_y : Float32
    max_z : Float32
  end
  struct D3D12_RAYTRACING_GEOMETRY_AABBS_DESC
    aabb_count : UInt64
    aab_bs : D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE
  end
  struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC
    dest_buffer : UInt64
    info_type : D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE
  end
  struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC
    compacted_size_in_bytes : UInt64
  end
  struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC
    decoded_size_in_bytes : UInt64
  end
  struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER
    type : D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE
    num_descs : UInt32
  end
  struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC
    serialized_size_in_bytes : UInt64
    num_bottom_level_acceleration_structure_pointers : UInt64
  end
  struct D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER
    driver_opaque_guid : Guid
    driver_opaque_versioning_data : UInt8[16]*
  end
  struct D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER
    driver_matching_identifier : D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER
    serialized_size_in_bytes_including_header : UInt64
    deserialized_size_in_bytes : UInt64
    num_bottom_level_acceleration_structure_pointers_after_header : UInt64
  end
  struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC
    current_size_in_bytes : UInt64
  end
  struct D3D12_RAYTRACING_INSTANCE_DESC
    transform : Float32[12]*
    _bitfield1 : UInt32
    _bitfield2 : UInt32
    acceleration_structure : UInt64
  end
  struct D3D12_RAYTRACING_GEOMETRY_DESC
    type : D3D12_RAYTRACING_GEOMETRY_TYPE
    flags : D3D12_RAYTRACING_GEOMETRY_FLAGS
    anonymous : D3D12_RAYTRACING_GEOMETRY_DESC_Anonymous_e__Union
  end
  struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS
    type : D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE
    flags : D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS
    num_descs : UInt32
    descs_layout : D3D12_ELEMENTS_LAYOUT
    anonymous : D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS_Anonymous_e__Union
  end
  struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC
    dest_acceleration_structure_data : UInt64
    inputs : D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS
    source_acceleration_structure_data : UInt64
    scratch_acceleration_structure_data : UInt64
  end
  struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO
    result_data_max_size_in_bytes : UInt64
    scratch_data_size_in_bytes : UInt64
    update_scratch_data_size_in_bytes : UInt64
  end
  struct D3D12_AUTO_BREADCRUMB_NODE
    p_command_list_debug_name_a : UInt8*
    p_command_list_debug_name_w : LibC::LPWSTR
    p_command_queue_debug_name_a : UInt8*
    p_command_queue_debug_name_w : LibC::LPWSTR
    p_command_list : ID3D12GraphicsCommandList
    p_command_queue : ID3D12CommandQueue
    breadcrumb_count : UInt32
    p_last_breadcrumb_value : UInt32*
    p_command_history : D3D12_AUTO_BREADCRUMB_OP*
    p_next : D3D12_AUTO_BREADCRUMB_NODE*
  end
  struct D3D12_DRED_BREADCRUMB_CONTEXT
    breadcrumb_index : UInt32
    p_context_string : LibC::LPWSTR
  end
  struct D3D12_AUTO_BREADCRUMB_NODE1
    p_command_list_debug_name_a : UInt8*
    p_command_list_debug_name_w : LibC::LPWSTR
    p_command_queue_debug_name_a : UInt8*
    p_command_queue_debug_name_w : LibC::LPWSTR
    p_command_list : ID3D12GraphicsCommandList
    p_command_queue : ID3D12CommandQueue
    breadcrumb_count : UInt32
    p_last_breadcrumb_value : UInt32*
    p_command_history : D3D12_AUTO_BREADCRUMB_OP*
    p_next : D3D12_AUTO_BREADCRUMB_NODE1*
    breadcrumb_contexts_count : UInt32
    p_breadcrumb_contexts : D3D12_DRED_BREADCRUMB_CONTEXT*
  end
  struct D3D12_DEVICE_REMOVED_EXTENDED_DATA
    flags : D3D12_DRED_FLAGS
    p_head_auto_breadcrumb_node : D3D12_AUTO_BREADCRUMB_NODE*
  end
  struct D3D12_DRED_ALLOCATION_NODE
    object_name_a : UInt8*
    object_name_w : LibC::LPWSTR
    allocation_type : D3D12_DRED_ALLOCATION_TYPE
    p_next : D3D12_DRED_ALLOCATION_NODE*
  end
  struct D3D12_DRED_ALLOCATION_NODE1
    object_name_a : UInt8*
    object_name_w : LibC::LPWSTR
    allocation_type : D3D12_DRED_ALLOCATION_TYPE
    p_next : D3D12_DRED_ALLOCATION_NODE1*
    p_object : IUnknown
  end
  struct D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT
    p_head_auto_breadcrumb_node : D3D12_AUTO_BREADCRUMB_NODE*
  end
  struct D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1
    p_head_auto_breadcrumb_node : D3D12_AUTO_BREADCRUMB_NODE1*
  end
  struct D3D12_DRED_PAGE_FAULT_OUTPUT
    page_fault_va : UInt64
    p_head_existing_allocation_node : D3D12_DRED_ALLOCATION_NODE*
    p_head_recent_freed_allocation_node : D3D12_DRED_ALLOCATION_NODE*
  end
  struct D3D12_DRED_PAGE_FAULT_OUTPUT1
    page_fault_va : UInt64
    p_head_existing_allocation_node : D3D12_DRED_ALLOCATION_NODE1*
    p_head_recent_freed_allocation_node : D3D12_DRED_ALLOCATION_NODE1*
  end
  struct D3D12_DRED_PAGE_FAULT_OUTPUT2
    page_fault_va : UInt64
    p_head_existing_allocation_node : D3D12_DRED_ALLOCATION_NODE1*
    p_head_recent_freed_allocation_node : D3D12_DRED_ALLOCATION_NODE1*
    page_fault_flags : D3D12_DRED_PAGE_FAULT_FLAGS
  end
  struct D3D12_DEVICE_REMOVED_EXTENDED_DATA1
    device_removed_reason : HRESULT
    auto_breadcrumbs_output : D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT
    page_fault_output : D3D12_DRED_PAGE_FAULT_OUTPUT
  end
  struct D3D12_DEVICE_REMOVED_EXTENDED_DATA2
    device_removed_reason : HRESULT
    auto_breadcrumbs_output : D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1
    page_fault_output : D3D12_DRED_PAGE_FAULT_OUTPUT1
  end
  struct D3D12_DEVICE_REMOVED_EXTENDED_DATA3
    device_removed_reason : HRESULT
    auto_breadcrumbs_output : D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1
    page_fault_output : D3D12_DRED_PAGE_FAULT_OUTPUT2
    device_state : D3D12_DRED_DEVICE_STATE
  end
  struct D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA
    version : D3D12_DRED_VERSION
    anonymous : D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA_Anonymous_e__Union
  end
  struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT
    node_index : UInt32
    count : UInt32
  end
  struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES
    node_index : UInt32
    count : UInt32
    p_types : Guid*
  end
  struct D3D12_PROTECTED_RESOURCE_SESSION_DESC1
    node_mask : UInt32
    flags : D3D12_PROTECTED_RESOURCE_SESSION_FLAGS
    protection_type : Guid
  end
  struct D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS
    clear_value : D3D12_CLEAR_VALUE
  end
  struct D3D12_RENDER_PASS_BEGINNING_ACCESS
    type : D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE
    anonymous : D3D12_RENDER_PASS_BEGINNING_ACCESS_Anonymous_e__Union
  end
  struct D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS
    src_subresource : UInt32
    dst_subresource : UInt32
    dst_x : UInt32
    dst_y : UInt32
    src_rect : RECT
  end
  struct D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS
    p_src_resource : ID3D12Resource
    p_dst_resource : ID3D12Resource
    subresource_count : UInt32
    p_subresource_parameters : D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS*
    format : DXGI_FORMAT
    resolve_mode : D3D12_RESOLVE_MODE
    preserve_resolve_source : LibC::BOOL
  end
  struct D3D12_RENDER_PASS_ENDING_ACCESS
    type : D3D12_RENDER_PASS_ENDING_ACCESS_TYPE
    anonymous : D3D12_RENDER_PASS_ENDING_ACCESS_Anonymous_e__Union
  end
  struct D3D12_RENDER_PASS_RENDER_TARGET_DESC
    cpu_descriptor : D3D12_CPU_DESCRIPTOR_HANDLE
    beginning_access : D3D12_RENDER_PASS_BEGINNING_ACCESS
    ending_access : D3D12_RENDER_PASS_ENDING_ACCESS
  end
  struct D3D12_RENDER_PASS_DEPTH_STENCIL_DESC
    cpu_descriptor : D3D12_CPU_DESCRIPTOR_HANDLE
    depth_beginning_access : D3D12_RENDER_PASS_BEGINNING_ACCESS
    stencil_beginning_access : D3D12_RENDER_PASS_BEGINNING_ACCESS
    depth_ending_access : D3D12_RENDER_PASS_ENDING_ACCESS
    stencil_ending_access : D3D12_RENDER_PASS_ENDING_ACCESS
  end
  struct D3D12_DISPATCH_RAYS_DESC
    ray_generation_shader_record : D3D12_GPU_VIRTUAL_ADDRESS_RANGE
    miss_shader_table : D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE
    hit_group_table : D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE
    callable_shader_table : D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE
    width : UInt32
    height : UInt32
    depth : UInt32
  end
  struct D3D12_SHADER_CACHE_SESSION_DESC
    identifier : Guid
    mode : D3D12_SHADER_CACHE_MODE
    flags : D3D12_SHADER_CACHE_FLAGS
    maximum_in_memory_cache_size_bytes : UInt32
    maximum_in_memory_cache_entries : UInt32
    maximum_value_file_size_bytes : UInt32
    version : UInt64
  end
  struct D3D12_SUBRESOURCE_DATA
    p_data : Void*
    row_pitch : LibC::IntPtrT
    slice_pitch : LibC::IntPtrT
  end
  struct D3D12_MEMCPY_DEST
    p_data : Void*
    row_pitch : LibC::UINT_PTR
    slice_pitch : LibC::UINT_PTR
  end
  struct D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS
    max_messages_per_command_list : UInt32
    default_shader_patch_mode : D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE
    pipeline_state_create_flags : D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS
  end
  struct D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR
    slowdown_factor : Float32
  end
  struct D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS
    shader_patch_mode : D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE
  end
  struct D3D12_MESSAGE
    category : D3D12_MESSAGE_CATEGORY
    severity : D3D12_MESSAGE_SEVERITY
    id : D3D12_MESSAGE_ID
    p_description : UInt8*
    description_byte_length : LibC::UINT_PTR
  end
  struct D3D12_INFO_QUEUE_FILTER_DESC
    num_categories : UInt32
    p_category_list : D3D12_MESSAGE_CATEGORY*
    num_severities : UInt32
    p_severity_list : D3D12_MESSAGE_SEVERITY*
    num_i_ds : UInt32
    p_id_list : D3D12_MESSAGE_ID*
  end
  struct D3D12_INFO_QUEUE_FILTER
    allow_list : D3D12_INFO_QUEUE_FILTER_DESC
    deny_list : D3D12_INFO_QUEUE_FILTER_DESC
  end
  struct D3D12_DISPATCH_MESH_ARGUMENTS
    thread_group_count_x : UInt32
    thread_group_count_y : UInt32
    thread_group_count_z : UInt32
  end
  struct D3D12_SIGNATURE_PARAMETER_DESC
    semantic_name : PSTR
    semantic_index : UInt32
    register : UInt32
    system_value_type : D3D_NAME
    component_type : D3D_REGISTER_COMPONENT_TYPE
    mask : UInt8
    read_write_mask : UInt8
    stream : UInt32
    min_precision : D3D_MIN_PRECISION
  end
  struct D3D12_SHADER_BUFFER_DESC
    name : PSTR
    type : D3D_CBUFFER_TYPE
    variables : UInt32
    size : UInt32
    u_flags : UInt32
  end
  struct D3D12_SHADER_VARIABLE_DESC
    name : PSTR
    start_offset : UInt32
    size : UInt32
    u_flags : UInt32
    default_value : Void*
    start_texture : UInt32
    texture_size : UInt32
    start_sampler : UInt32
    sampler_size : UInt32
  end
  struct D3D12_SHADER_TYPE_DESC
    class_ : D3D_SHADER_VARIABLE_CLASS
    type : D3D_SHADER_VARIABLE_TYPE
    rows : UInt32
    columns : UInt32
    elements : UInt32
    members : UInt32
    offset : UInt32
    name : PSTR
  end
  struct D3D12_SHADER_DESC
    version : UInt32
    creator : PSTR
    flags : UInt32
    constant_buffers : UInt32
    bound_resources : UInt32
    input_parameters : UInt32
    output_parameters : UInt32
    instruction_count : UInt32
    temp_register_count : UInt32
    temp_array_count : UInt32
    def_count : UInt32
    dcl_count : UInt32
    texture_normal_instructions : UInt32
    texture_load_instructions : UInt32
    texture_comp_instructions : UInt32
    texture_bias_instructions : UInt32
    texture_gradient_instructions : UInt32
    float_instruction_count : UInt32
    int_instruction_count : UInt32
    uint_instruction_count : UInt32
    static_flow_control_count : UInt32
    dynamic_flow_control_count : UInt32
    macro_instruction_count : UInt32
    array_instruction_count : UInt32
    cut_instruction_count : UInt32
    emit_instruction_count : UInt32
    gs_output_topology : D3D_PRIMITIVE_TOPOLOGY
    gs_max_output_vertex_count : UInt32
    input_primitive : D3D_PRIMITIVE
    patch_constant_parameters : UInt32
    c_gs_instance_count : UInt32
    c_control_points : UInt32
    hs_output_primitive : D3D_TESSELLATOR_OUTPUT_PRIMITIVE
    hs_partitioning : D3D_TESSELLATOR_PARTITIONING
    tessellator_domain : D3D_TESSELLATOR_DOMAIN
    c_barrier_instructions : UInt32
    c_interlocked_instructions : UInt32
    c_texture_store_instructions : UInt32
  end
  struct D3D12_SHADER_INPUT_BIND_DESC
    name : PSTR
    type : D3D_SHADER_INPUT_TYPE
    bind_point : UInt32
    bind_count : UInt32
    u_flags : UInt32
    return_type : D3D_RESOURCE_RETURN_TYPE
    dimension : D3D_SRV_DIMENSION
    num_samples : UInt32
    space : UInt32
    u_id : UInt32
  end
  struct D3D12_LIBRARY_DESC
    creator : PSTR
    flags : UInt32
    function_count : UInt32
  end
  struct D3D12_FUNCTION_DESC
    version : UInt32
    creator : PSTR
    flags : UInt32
    constant_buffers : UInt32
    bound_resources : UInt32
    instruction_count : UInt32
    temp_register_count : UInt32
    temp_array_count : UInt32
    def_count : UInt32
    dcl_count : UInt32
    texture_normal_instructions : UInt32
    texture_load_instructions : UInt32
    texture_comp_instructions : UInt32
    texture_bias_instructions : UInt32
    texture_gradient_instructions : UInt32
    float_instruction_count : UInt32
    int_instruction_count : UInt32
    uint_instruction_count : UInt32
    static_flow_control_count : UInt32
    dynamic_flow_control_count : UInt32
    macro_instruction_count : UInt32
    array_instruction_count : UInt32
    mov_instruction_count : UInt32
    movc_instruction_count : UInt32
    conversion_instruction_count : UInt32
    bitwise_instruction_count : UInt32
    min_feature_level : D3D_FEATURE_LEVEL
    required_feature_flags : UInt64
    name : PSTR
    function_parameter_count : Int32
    has_return : LibC::BOOL
    has10_level9_vertex_shader : LibC::BOOL
    has10_level9_pixel_shader : LibC::BOOL
  end
  struct D3D12_PARAMETER_DESC
    name : PSTR
    semantic_name : PSTR
    type : D3D_SHADER_VARIABLE_TYPE
    class_ : D3D_SHADER_VARIABLE_CLASS
    rows : UInt32
    columns : UInt32
    interpolation_mode : D3D_INTERPOLATION_MODE
    flags : D3D_PARAMETER_FLAGS
    first_in_register : UInt32
    first_in_component : UInt32
    first_out_register : UInt32
    first_out_component : UInt32
  end


  struct ID3D12ObjectVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
  end

  ID3D12Object_GUID = "c4fec28f-7966-4e95-9f94-f431cb56c3b8"
  IID_ID3D12Object = LibC::GUID.new(0xc4fec28f_u32, 0x7966_u16, 0x4e95_u16, StaticArray[0x9f_u8, 0x94_u8, 0xf4_u8, 0x31_u8, 0xcb_u8, 0x56_u8, 0xc3_u8, 0xb8_u8])
  struct ID3D12Object
    lpVtbl : ID3D12ObjectVTbl*
  end

  struct ID3D12DeviceChildVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
  end

  ID3D12DeviceChild_GUID = "905db94b-a00c-4140-9df5-2b64ca9ea357"
  IID_ID3D12DeviceChild = LibC::GUID.new(0x905db94b_u32, 0xa00c_u16, 0x4140_u16, StaticArray[0x9d_u8, 0xf5_u8, 0x2b_u8, 0x64_u8, 0xca_u8, 0x9e_u8, 0xa3_u8, 0x57_u8])
  struct ID3D12DeviceChild
    lpVtbl : ID3D12DeviceChildVTbl*
  end

  struct ID3D12RootSignatureVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
  end

  ID3D12RootSignature_GUID = "c54a6b66-72df-4ee8-8be5-a946a1429214"
  IID_ID3D12RootSignature = LibC::GUID.new(0xc54a6b66_u32, 0x72df_u16, 0x4ee8_u16, StaticArray[0x8b_u8, 0xe5_u8, 0xa9_u8, 0x46_u8, 0xa1_u8, 0x42_u8, 0x92_u8, 0x14_u8])
  struct ID3D12RootSignature
    lpVtbl : ID3D12RootSignatureVTbl*
  end

  struct ID3D12RootSignatureDeserializerVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_root_signature_desc : UInt64
  end

  ID3D12RootSignatureDeserializer_GUID = "34ab647b-3cc8-46ac-841b-c0965645c046"
  IID_ID3D12RootSignatureDeserializer = LibC::GUID.new(0x34ab647b_u32, 0x3cc8_u16, 0x46ac_u16, StaticArray[0x84_u8, 0x1b_u8, 0xc0_u8, 0x96_u8, 0x56_u8, 0x45_u8, 0xc0_u8, 0x46_u8])
  struct ID3D12RootSignatureDeserializer
    lpVtbl : ID3D12RootSignatureDeserializerVTbl*
  end

  struct ID3D12VersionedRootSignatureDeserializerVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_root_signature_desc_at_version : UInt64
    get_unconverted_root_signature_desc : UInt64
  end

  ID3D12VersionedRootSignatureDeserializer_GUID = "7f91ce67-090c-4bb7-b78e-ed8ff2e31da0"
  IID_ID3D12VersionedRootSignatureDeserializer = LibC::GUID.new(0x7f91ce67_u32, 0x90c_u16, 0x4bb7_u16, StaticArray[0xb7_u8, 0x8e_u8, 0xed_u8, 0x8f_u8, 0xf2_u8, 0xe3_u8, 0x1d_u8, 0xa0_u8])
  struct ID3D12VersionedRootSignatureDeserializer
    lpVtbl : ID3D12VersionedRootSignatureDeserializerVTbl*
  end

  struct ID3D12PageableVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
  end

  ID3D12Pageable_GUID = "63ee58fb-1268-4835-86da-f008ce62f0d6"
  IID_ID3D12Pageable = LibC::GUID.new(0x63ee58fb_u32, 0x1268_u16, 0x4835_u16, StaticArray[0x86_u8, 0xda_u8, 0xf0_u8, 0x8_u8, 0xce_u8, 0x62_u8, 0xf0_u8, 0xd6_u8])
  struct ID3D12Pageable
    lpVtbl : ID3D12PageableVTbl*
  end

  struct ID3D12HeapVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
    get_desc : UInt64
  end

  ID3D12Heap_GUID = "6b3b2502-6e51-45b3-90ee-9884265e8df3"
  IID_ID3D12Heap = LibC::GUID.new(0x6b3b2502_u32, 0x6e51_u16, 0x45b3_u16, StaticArray[0x90_u8, 0xee_u8, 0x98_u8, 0x84_u8, 0x26_u8, 0x5e_u8, 0x8d_u8, 0xf3_u8])
  struct ID3D12Heap
    lpVtbl : ID3D12HeapVTbl*
  end

  struct ID3D12ResourceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
    map : UInt64
    unmap : UInt64
    get_desc : UInt64
    get_gpu_virtual_address : UInt64
    write_to_subresource : UInt64
    read_from_subresource : UInt64
    get_heap_properties : UInt64
  end

  ID3D12Resource_GUID = "696442be-a72e-4059-bc79-5b5c98040fad"
  IID_ID3D12Resource = LibC::GUID.new(0x696442be_u32, 0xa72e_u16, 0x4059_u16, StaticArray[0xbc_u8, 0x79_u8, 0x5b_u8, 0x5c_u8, 0x98_u8, 0x4_u8, 0xf_u8, 0xad_u8])
  struct ID3D12Resource
    lpVtbl : ID3D12ResourceVTbl*
  end

  struct ID3D12CommandAllocatorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
    reset : UInt64
  end

  ID3D12CommandAllocator_GUID = "6102dee4-af59-4b09-b999-b44d73f09b24"
  IID_ID3D12CommandAllocator = LibC::GUID.new(0x6102dee4_u32, 0xaf59_u16, 0x4b09_u16, StaticArray[0xb9_u8, 0x99_u8, 0xb4_u8, 0x4d_u8, 0x73_u8, 0xf0_u8, 0x9b_u8, 0x24_u8])
  struct ID3D12CommandAllocator
    lpVtbl : ID3D12CommandAllocatorVTbl*
  end

  struct ID3D12FenceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
    get_completed_value : UInt64
    set_event_on_completion : UInt64
    signal : UInt64
  end

  ID3D12Fence_GUID = "0a753dcf-c4d8-4b91-adf6-be5a60d95a76"
  IID_ID3D12Fence = LibC::GUID.new(0xa753dcf_u32, 0xc4d8_u16, 0x4b91_u16, StaticArray[0xad_u8, 0xf6_u8, 0xbe_u8, 0x5a_u8, 0x60_u8, 0xd9_u8, 0x5a_u8, 0x76_u8])
  struct ID3D12Fence
    lpVtbl : ID3D12FenceVTbl*
  end

  struct ID3D12Fence1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
    get_completed_value : UInt64
    set_event_on_completion : UInt64
    signal : UInt64
    get_creation_flags : UInt64
  end

  ID3D12Fence1_GUID = "433685fe-e22b-4ca0-a8db-b5b4f4dd0e4a"
  IID_ID3D12Fence1 = LibC::GUID.new(0x433685fe_u32, 0xe22b_u16, 0x4ca0_u16, StaticArray[0xa8_u8, 0xdb_u8, 0xb5_u8, 0xb4_u8, 0xf4_u8, 0xdd_u8, 0xe_u8, 0x4a_u8])
  struct ID3D12Fence1
    lpVtbl : ID3D12Fence1VTbl*
  end

  struct ID3D12PipelineStateVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
    get_cached_blob : UInt64
  end

  ID3D12PipelineState_GUID = "765a30f3-f624-4c6f-a828-ace948622445"
  IID_ID3D12PipelineState = LibC::GUID.new(0x765a30f3_u32, 0xf624_u16, 0x4c6f_u16, StaticArray[0xa8_u8, 0x28_u8, 0xac_u8, 0xe9_u8, 0x48_u8, 0x62_u8, 0x24_u8, 0x45_u8])
  struct ID3D12PipelineState
    lpVtbl : ID3D12PipelineStateVTbl*
  end

  struct ID3D12DescriptorHeapVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
    get_desc : UInt64
    get_cpu_descriptor_handle_for_heap_start : UInt64
    get_gpu_descriptor_handle_for_heap_start : UInt64
  end

  ID3D12DescriptorHeap_GUID = "8efb471d-616c-4f49-90f7-127bb763fa51"
  IID_ID3D12DescriptorHeap = LibC::GUID.new(0x8efb471d_u32, 0x616c_u16, 0x4f49_u16, StaticArray[0x90_u8, 0xf7_u8, 0x12_u8, 0x7b_u8, 0xb7_u8, 0x63_u8, 0xfa_u8, 0x51_u8])
  struct ID3D12DescriptorHeap
    lpVtbl : ID3D12DescriptorHeapVTbl*
  end

  struct ID3D12QueryHeapVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
  end

  ID3D12QueryHeap_GUID = "0d9658ae-ed45-469e-a61d-970ec583cab4"
  IID_ID3D12QueryHeap = LibC::GUID.new(0xd9658ae_u32, 0xed45_u16, 0x469e_u16, StaticArray[0xa6_u8, 0x1d_u8, 0x97_u8, 0xe_u8, 0xc5_u8, 0x83_u8, 0xca_u8, 0xb4_u8])
  struct ID3D12QueryHeap
    lpVtbl : ID3D12QueryHeapVTbl*
  end

  struct ID3D12CommandSignatureVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
  end

  ID3D12CommandSignature_GUID = "c36a797c-ec80-4f0a-8985-a7b2475082d1"
  IID_ID3D12CommandSignature = LibC::GUID.new(0xc36a797c_u32, 0xec80_u16, 0x4f0a_u16, StaticArray[0x89_u8, 0x85_u8, 0xa7_u8, 0xb2_u8, 0x47_u8, 0x50_u8, 0x82_u8, 0xd1_u8])
  struct ID3D12CommandSignature
    lpVtbl : ID3D12CommandSignatureVTbl*
  end

  struct ID3D12CommandListVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
    get_type : UInt64
  end

  ID3D12CommandList_GUID = "7116d91c-e7e4-47ce-b8c6-ec8168f437e5"
  IID_ID3D12CommandList = LibC::GUID.new(0x7116d91c_u32, 0xe7e4_u16, 0x47ce_u16, StaticArray[0xb8_u8, 0xc6_u8, 0xec_u8, 0x81_u8, 0x68_u8, 0xf4_u8, 0x37_u8, 0xe5_u8])
  struct ID3D12CommandList
    lpVtbl : ID3D12CommandListVTbl*
  end

  struct ID3D12GraphicsCommandListVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
    get_type : UInt64
    close : UInt64
    reset : UInt64
    clear_state : UInt64
    draw_instanced : UInt64
    draw_indexed_instanced : UInt64
    dispatch : UInt64
    copy_buffer_region : UInt64
    copy_texture_region : UInt64
    copy_resource : UInt64
    copy_tiles : UInt64
    resolve_subresource : UInt64
    ia_set_primitive_topology : UInt64
    rs_set_viewports : UInt64
    rs_set_scissor_rects : UInt64
    om_set_blend_factor : UInt64
    om_set_stencil_ref : UInt64
    set_pipeline_state : UInt64
    resource_barrier : UInt64
    execute_bundle : UInt64
    set_descriptor_heaps : UInt64
    set_compute_root_signature : UInt64
    set_graphics_root_signature : UInt64
    set_compute_root_descriptor_table : UInt64
    set_graphics_root_descriptor_table : UInt64
    set_compute_root32_bit_constant : UInt64
    set_graphics_root32_bit_constant : UInt64
    set_compute_root32_bit_constants : UInt64
    set_graphics_root32_bit_constants : UInt64
    set_compute_root_constant_buffer_view : UInt64
    set_graphics_root_constant_buffer_view : UInt64
    set_compute_root_shader_resource_view : UInt64
    set_graphics_root_shader_resource_view : UInt64
    set_compute_root_unordered_access_view : UInt64
    set_graphics_root_unordered_access_view : UInt64
    ia_set_index_buffer : UInt64
    ia_set_vertex_buffers : UInt64
    so_set_targets : UInt64
    om_set_render_targets : UInt64
    clear_depth_stencil_view : UInt64
    clear_render_target_view : UInt64
    clear_unordered_access_view_uint : UInt64
    clear_unordered_access_view_float : UInt64
    discard_resource : UInt64
    begin_query : UInt64
    end_query : UInt64
    resolve_query_data : UInt64
    set_predication : UInt64
    set_marker : UInt64
    begin_event : UInt64
    end_event : UInt64
    execute_indirect : UInt64
  end

  ID3D12GraphicsCommandList_GUID = "5b160d0f-ac1b-4185-8ba8-b3ae42a5a455"
  IID_ID3D12GraphicsCommandList = LibC::GUID.new(0x5b160d0f_u32, 0xac1b_u16, 0x4185_u16, StaticArray[0x8b_u8, 0xa8_u8, 0xb3_u8, 0xae_u8, 0x42_u8, 0xa5_u8, 0xa4_u8, 0x55_u8])
  struct ID3D12GraphicsCommandList
    lpVtbl : ID3D12GraphicsCommandListVTbl*
  end

  struct ID3D12GraphicsCommandList1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
    get_type : UInt64
    close : UInt64
    reset : UInt64
    clear_state : UInt64
    draw_instanced : UInt64
    draw_indexed_instanced : UInt64
    dispatch : UInt64
    copy_buffer_region : UInt64
    copy_texture_region : UInt64
    copy_resource : UInt64
    copy_tiles : UInt64
    resolve_subresource : UInt64
    ia_set_primitive_topology : UInt64
    rs_set_viewports : UInt64
    rs_set_scissor_rects : UInt64
    om_set_blend_factor : UInt64
    om_set_stencil_ref : UInt64
    set_pipeline_state : UInt64
    resource_barrier : UInt64
    execute_bundle : UInt64
    set_descriptor_heaps : UInt64
    set_compute_root_signature : UInt64
    set_graphics_root_signature : UInt64
    set_compute_root_descriptor_table : UInt64
    set_graphics_root_descriptor_table : UInt64
    set_compute_root32_bit_constant : UInt64
    set_graphics_root32_bit_constant : UInt64
    set_compute_root32_bit_constants : UInt64
    set_graphics_root32_bit_constants : UInt64
    set_compute_root_constant_buffer_view : UInt64
    set_graphics_root_constant_buffer_view : UInt64
    set_compute_root_shader_resource_view : UInt64
    set_graphics_root_shader_resource_view : UInt64
    set_compute_root_unordered_access_view : UInt64
    set_graphics_root_unordered_access_view : UInt64
    ia_set_index_buffer : UInt64
    ia_set_vertex_buffers : UInt64
    so_set_targets : UInt64
    om_set_render_targets : UInt64
    clear_depth_stencil_view : UInt64
    clear_render_target_view : UInt64
    clear_unordered_access_view_uint : UInt64
    clear_unordered_access_view_float : UInt64
    discard_resource : UInt64
    begin_query : UInt64
    end_query : UInt64
    resolve_query_data : UInt64
    set_predication : UInt64
    set_marker : UInt64
    begin_event : UInt64
    end_event : UInt64
    execute_indirect : UInt64
    atomic_copy_buffer_uint : UInt64
    atomic_copy_buffer_uint64 : UInt64
    om_set_depth_bounds : UInt64
    set_sample_positions : UInt64
    resolve_subresource_region : UInt64
    set_view_instance_mask : UInt64
  end

  ID3D12GraphicsCommandList1_GUID = "553103fb-1fe7-4557-bb38-946d7d0e7ca7"
  IID_ID3D12GraphicsCommandList1 = LibC::GUID.new(0x553103fb_u32, 0x1fe7_u16, 0x4557_u16, StaticArray[0xbb_u8, 0x38_u8, 0x94_u8, 0x6d_u8, 0x7d_u8, 0xe_u8, 0x7c_u8, 0xa7_u8])
  struct ID3D12GraphicsCommandList1
    lpVtbl : ID3D12GraphicsCommandList1VTbl*
  end

  struct ID3D12GraphicsCommandList2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
    get_type : UInt64
    close : UInt64
    reset : UInt64
    clear_state : UInt64
    draw_instanced : UInt64
    draw_indexed_instanced : UInt64
    dispatch : UInt64
    copy_buffer_region : UInt64
    copy_texture_region : UInt64
    copy_resource : UInt64
    copy_tiles : UInt64
    resolve_subresource : UInt64
    ia_set_primitive_topology : UInt64
    rs_set_viewports : UInt64
    rs_set_scissor_rects : UInt64
    om_set_blend_factor : UInt64
    om_set_stencil_ref : UInt64
    set_pipeline_state : UInt64
    resource_barrier : UInt64
    execute_bundle : UInt64
    set_descriptor_heaps : UInt64
    set_compute_root_signature : UInt64
    set_graphics_root_signature : UInt64
    set_compute_root_descriptor_table : UInt64
    set_graphics_root_descriptor_table : UInt64
    set_compute_root32_bit_constant : UInt64
    set_graphics_root32_bit_constant : UInt64
    set_compute_root32_bit_constants : UInt64
    set_graphics_root32_bit_constants : UInt64
    set_compute_root_constant_buffer_view : UInt64
    set_graphics_root_constant_buffer_view : UInt64
    set_compute_root_shader_resource_view : UInt64
    set_graphics_root_shader_resource_view : UInt64
    set_compute_root_unordered_access_view : UInt64
    set_graphics_root_unordered_access_view : UInt64
    ia_set_index_buffer : UInt64
    ia_set_vertex_buffers : UInt64
    so_set_targets : UInt64
    om_set_render_targets : UInt64
    clear_depth_stencil_view : UInt64
    clear_render_target_view : UInt64
    clear_unordered_access_view_uint : UInt64
    clear_unordered_access_view_float : UInt64
    discard_resource : UInt64
    begin_query : UInt64
    end_query : UInt64
    resolve_query_data : UInt64
    set_predication : UInt64
    set_marker : UInt64
    begin_event : UInt64
    end_event : UInt64
    execute_indirect : UInt64
    atomic_copy_buffer_uint : UInt64
    atomic_copy_buffer_uint64 : UInt64
    om_set_depth_bounds : UInt64
    set_sample_positions : UInt64
    resolve_subresource_region : UInt64
    set_view_instance_mask : UInt64
    write_buffer_immediate : UInt64
  end

  ID3D12GraphicsCommandList2_GUID = "38c3e585-ff17-412c-9150-4fc6f9d72a28"
  IID_ID3D12GraphicsCommandList2 = LibC::GUID.new(0x38c3e585_u32, 0xff17_u16, 0x412c_u16, StaticArray[0x91_u8, 0x50_u8, 0x4f_u8, 0xc6_u8, 0xf9_u8, 0xd7_u8, 0x2a_u8, 0x28_u8])
  struct ID3D12GraphicsCommandList2
    lpVtbl : ID3D12GraphicsCommandList2VTbl*
  end

  struct ID3D12CommandQueueVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
    update_tile_mappings : UInt64
    copy_tile_mappings : UInt64
    execute_command_lists : UInt64
    set_marker : UInt64
    begin_event : UInt64
    end_event : UInt64
    signal : UInt64
    wait : UInt64
    get_timestamp_frequency : UInt64
    get_clock_calibration : UInt64
    get_desc : UInt64
  end

  ID3D12CommandQueue_GUID = "0ec870a6-5d7e-4c22-8cfc-5baae07616ed"
  IID_ID3D12CommandQueue = LibC::GUID.new(0xec870a6_u32, 0x5d7e_u16, 0x4c22_u16, StaticArray[0x8c_u8, 0xfc_u8, 0x5b_u8, 0xaa_u8, 0xe0_u8, 0x76_u8, 0x16_u8, 0xed_u8])
  struct ID3D12CommandQueue
    lpVtbl : ID3D12CommandQueueVTbl*
  end

  struct ID3D12DeviceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_node_count : UInt64
    create_command_queue : UInt64
    create_command_allocator : UInt64
    create_graphics_pipeline_state : UInt64
    create_compute_pipeline_state : UInt64
    create_command_list : UInt64
    check_feature_support : UInt64
    create_descriptor_heap : UInt64
    get_descriptor_handle_increment_size : UInt64
    create_root_signature : UInt64
    create_constant_buffer_view : UInt64
    create_shader_resource_view : UInt64
    create_unordered_access_view : UInt64
    create_render_target_view : UInt64
    create_depth_stencil_view : UInt64
    create_sampler : UInt64
    copy_descriptors : UInt64
    copy_descriptors_simple : UInt64
    get_resource_allocation_info : UInt64
    get_custom_heap_properties : UInt64
    create_committed_resource : UInt64
    create_heap : UInt64
    create_placed_resource : UInt64
    create_reserved_resource : UInt64
    create_shared_handle : UInt64
    open_shared_handle : UInt64
    open_shared_handle_by_name : UInt64
    make_resident : UInt64
    evict : UInt64
    create_fence : UInt64
    get_device_removed_reason : UInt64
    get_copyable_footprints : UInt64
    create_query_heap : UInt64
    set_stable_power_state : UInt64
    create_command_signature : UInt64
    get_resource_tiling : UInt64
    get_adapter_luid : UInt64
  end

  ID3D12Device_GUID = "189819f1-1db6-4b57-be54-1821339b85f7"
  IID_ID3D12Device = LibC::GUID.new(0x189819f1_u32, 0x1db6_u16, 0x4b57_u16, StaticArray[0xbe_u8, 0x54_u8, 0x18_u8, 0x21_u8, 0x33_u8, 0x9b_u8, 0x85_u8, 0xf7_u8])
  struct ID3D12Device
    lpVtbl : ID3D12DeviceVTbl*
  end

  struct ID3D12PipelineLibraryVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
    store_pipeline : UInt64
    load_graphics_pipeline : UInt64
    load_compute_pipeline : UInt64
    get_serialized_size : UInt64
    serialize : UInt64
  end

  ID3D12PipelineLibrary_GUID = "c64226a8-9201-46af-b4cc-53fb9ff7414f"
  IID_ID3D12PipelineLibrary = LibC::GUID.new(0xc64226a8_u32, 0x9201_u16, 0x46af_u16, StaticArray[0xb4_u8, 0xcc_u8, 0x53_u8, 0xfb_u8, 0x9f_u8, 0xf7_u8, 0x41_u8, 0x4f_u8])
  struct ID3D12PipelineLibrary
    lpVtbl : ID3D12PipelineLibraryVTbl*
  end

  struct ID3D12PipelineLibrary1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
    store_pipeline : UInt64
    load_graphics_pipeline : UInt64
    load_compute_pipeline : UInt64
    get_serialized_size : UInt64
    serialize : UInt64
    load_pipeline : UInt64
  end

  ID3D12PipelineLibrary1_GUID = "80eabf42-2568-4e5e-bd82-c37f86961dc3"
  IID_ID3D12PipelineLibrary1 = LibC::GUID.new(0x80eabf42_u32, 0x2568_u16, 0x4e5e_u16, StaticArray[0xbd_u8, 0x82_u8, 0xc3_u8, 0x7f_u8, 0x86_u8, 0x96_u8, 0x1d_u8, 0xc3_u8])
  struct ID3D12PipelineLibrary1
    lpVtbl : ID3D12PipelineLibrary1VTbl*
  end

  struct ID3D12Device1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_node_count : UInt64
    create_command_queue : UInt64
    create_command_allocator : UInt64
    create_graphics_pipeline_state : UInt64
    create_compute_pipeline_state : UInt64
    create_command_list : UInt64
    check_feature_support : UInt64
    create_descriptor_heap : UInt64
    get_descriptor_handle_increment_size : UInt64
    create_root_signature : UInt64
    create_constant_buffer_view : UInt64
    create_shader_resource_view : UInt64
    create_unordered_access_view : UInt64
    create_render_target_view : UInt64
    create_depth_stencil_view : UInt64
    create_sampler : UInt64
    copy_descriptors : UInt64
    copy_descriptors_simple : UInt64
    get_resource_allocation_info : UInt64
    get_custom_heap_properties : UInt64
    create_committed_resource : UInt64
    create_heap : UInt64
    create_placed_resource : UInt64
    create_reserved_resource : UInt64
    create_shared_handle : UInt64
    open_shared_handle : UInt64
    open_shared_handle_by_name : UInt64
    make_resident : UInt64
    evict : UInt64
    create_fence : UInt64
    get_device_removed_reason : UInt64
    get_copyable_footprints : UInt64
    create_query_heap : UInt64
    set_stable_power_state : UInt64
    create_command_signature : UInt64
    get_resource_tiling : UInt64
    get_adapter_luid : UInt64
    create_pipeline_library : UInt64
    set_event_on_multiple_fence_completion : UInt64
    set_residency_priority : UInt64
  end

  ID3D12Device1_GUID = "77acce80-638e-4e65-8895-c1f23386863e"
  IID_ID3D12Device1 = LibC::GUID.new(0x77acce80_u32, 0x638e_u16, 0x4e65_u16, StaticArray[0x88_u8, 0x95_u8, 0xc1_u8, 0xf2_u8, 0x33_u8, 0x86_u8, 0x86_u8, 0x3e_u8])
  struct ID3D12Device1
    lpVtbl : ID3D12Device1VTbl*
  end

  struct ID3D12Device2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_node_count : UInt64
    create_command_queue : UInt64
    create_command_allocator : UInt64
    create_graphics_pipeline_state : UInt64
    create_compute_pipeline_state : UInt64
    create_command_list : UInt64
    check_feature_support : UInt64
    create_descriptor_heap : UInt64
    get_descriptor_handle_increment_size : UInt64
    create_root_signature : UInt64
    create_constant_buffer_view : UInt64
    create_shader_resource_view : UInt64
    create_unordered_access_view : UInt64
    create_render_target_view : UInt64
    create_depth_stencil_view : UInt64
    create_sampler : UInt64
    copy_descriptors : UInt64
    copy_descriptors_simple : UInt64
    get_resource_allocation_info : UInt64
    get_custom_heap_properties : UInt64
    create_committed_resource : UInt64
    create_heap : UInt64
    create_placed_resource : UInt64
    create_reserved_resource : UInt64
    create_shared_handle : UInt64
    open_shared_handle : UInt64
    open_shared_handle_by_name : UInt64
    make_resident : UInt64
    evict : UInt64
    create_fence : UInt64
    get_device_removed_reason : UInt64
    get_copyable_footprints : UInt64
    create_query_heap : UInt64
    set_stable_power_state : UInt64
    create_command_signature : UInt64
    get_resource_tiling : UInt64
    get_adapter_luid : UInt64
    create_pipeline_library : UInt64
    set_event_on_multiple_fence_completion : UInt64
    set_residency_priority : UInt64
    create_pipeline_state : UInt64
  end

  ID3D12Device2_GUID = "30baa41e-b15b-475c-a0bb-1af5c5b64328"
  IID_ID3D12Device2 = LibC::GUID.new(0x30baa41e_u32, 0xb15b_u16, 0x475c_u16, StaticArray[0xa0_u8, 0xbb_u8, 0x1a_u8, 0xf5_u8, 0xc5_u8, 0xb6_u8, 0x43_u8, 0x28_u8])
  struct ID3D12Device2
    lpVtbl : ID3D12Device2VTbl*
  end

  struct ID3D12Device3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_node_count : UInt64
    create_command_queue : UInt64
    create_command_allocator : UInt64
    create_graphics_pipeline_state : UInt64
    create_compute_pipeline_state : UInt64
    create_command_list : UInt64
    check_feature_support : UInt64
    create_descriptor_heap : UInt64
    get_descriptor_handle_increment_size : UInt64
    create_root_signature : UInt64
    create_constant_buffer_view : UInt64
    create_shader_resource_view : UInt64
    create_unordered_access_view : UInt64
    create_render_target_view : UInt64
    create_depth_stencil_view : UInt64
    create_sampler : UInt64
    copy_descriptors : UInt64
    copy_descriptors_simple : UInt64
    get_resource_allocation_info : UInt64
    get_custom_heap_properties : UInt64
    create_committed_resource : UInt64
    create_heap : UInt64
    create_placed_resource : UInt64
    create_reserved_resource : UInt64
    create_shared_handle : UInt64
    open_shared_handle : UInt64
    open_shared_handle_by_name : UInt64
    make_resident : UInt64
    evict : UInt64
    create_fence : UInt64
    get_device_removed_reason : UInt64
    get_copyable_footprints : UInt64
    create_query_heap : UInt64
    set_stable_power_state : UInt64
    create_command_signature : UInt64
    get_resource_tiling : UInt64
    get_adapter_luid : UInt64
    create_pipeline_library : UInt64
    set_event_on_multiple_fence_completion : UInt64
    set_residency_priority : UInt64
    create_pipeline_state : UInt64
    open_existing_heap_from_address : UInt64
    open_existing_heap_from_file_mapping : UInt64
    enqueue_make_resident : UInt64
  end

  ID3D12Device3_GUID = "81dadc15-2bad-4392-93c5-101345c4aa98"
  IID_ID3D12Device3 = LibC::GUID.new(0x81dadc15_u32, 0x2bad_u16, 0x4392_u16, StaticArray[0x93_u8, 0xc5_u8, 0x10_u8, 0x13_u8, 0x45_u8, 0xc4_u8, 0xaa_u8, 0x98_u8])
  struct ID3D12Device3
    lpVtbl : ID3D12Device3VTbl*
  end

  struct ID3D12ProtectedSessionVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
    get_status_fence : UInt64
    get_session_status : UInt64
  end

  ID3D12ProtectedSession_GUID = "a1533d18-0ac1-4084-85b9-89a96116806b"
  IID_ID3D12ProtectedSession = LibC::GUID.new(0xa1533d18_u32, 0xac1_u16, 0x4084_u16, StaticArray[0x85_u8, 0xb9_u8, 0x89_u8, 0xa9_u8, 0x61_u8, 0x16_u8, 0x80_u8, 0x6b_u8])
  struct ID3D12ProtectedSession
    lpVtbl : ID3D12ProtectedSessionVTbl*
  end

  struct ID3D12ProtectedResourceSessionVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
    get_status_fence : UInt64
    get_session_status : UInt64
    get_desc : UInt64
  end

  ID3D12ProtectedResourceSession_GUID = "6cd696f4-f289-40cc-8091-5a6c0a099c3d"
  IID_ID3D12ProtectedResourceSession = LibC::GUID.new(0x6cd696f4_u32, 0xf289_u16, 0x40cc_u16, StaticArray[0x80_u8, 0x91_u8, 0x5a_u8, 0x6c_u8, 0xa_u8, 0x9_u8, 0x9c_u8, 0x3d_u8])
  struct ID3D12ProtectedResourceSession
    lpVtbl : ID3D12ProtectedResourceSessionVTbl*
  end

  struct ID3D12Device4VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_node_count : UInt64
    create_command_queue : UInt64
    create_command_allocator : UInt64
    create_graphics_pipeline_state : UInt64
    create_compute_pipeline_state : UInt64
    create_command_list : UInt64
    check_feature_support : UInt64
    create_descriptor_heap : UInt64
    get_descriptor_handle_increment_size : UInt64
    create_root_signature : UInt64
    create_constant_buffer_view : UInt64
    create_shader_resource_view : UInt64
    create_unordered_access_view : UInt64
    create_render_target_view : UInt64
    create_depth_stencil_view : UInt64
    create_sampler : UInt64
    copy_descriptors : UInt64
    copy_descriptors_simple : UInt64
    get_resource_allocation_info : UInt64
    get_custom_heap_properties : UInt64
    create_committed_resource : UInt64
    create_heap : UInt64
    create_placed_resource : UInt64
    create_reserved_resource : UInt64
    create_shared_handle : UInt64
    open_shared_handle : UInt64
    open_shared_handle_by_name : UInt64
    make_resident : UInt64
    evict : UInt64
    create_fence : UInt64
    get_device_removed_reason : UInt64
    get_copyable_footprints : UInt64
    create_query_heap : UInt64
    set_stable_power_state : UInt64
    create_command_signature : UInt64
    get_resource_tiling : UInt64
    get_adapter_luid : UInt64
    create_pipeline_library : UInt64
    set_event_on_multiple_fence_completion : UInt64
    set_residency_priority : UInt64
    create_pipeline_state : UInt64
    open_existing_heap_from_address : UInt64
    open_existing_heap_from_file_mapping : UInt64
    enqueue_make_resident : UInt64
    create_command_list1 : UInt64
    create_protected_resource_session : UInt64
    create_committed_resource1 : UInt64
    create_heap1 : UInt64
    create_reserved_resource1 : UInt64
    get_resource_allocation_info1 : UInt64
  end

  ID3D12Device4_GUID = "e865df17-a9ee-46f9-a463-3098315aa2e5"
  IID_ID3D12Device4 = LibC::GUID.new(0xe865df17_u32, 0xa9ee_u16, 0x46f9_u16, StaticArray[0xa4_u8, 0x63_u8, 0x30_u8, 0x98_u8, 0x31_u8, 0x5a_u8, 0xa2_u8, 0xe5_u8])
  struct ID3D12Device4
    lpVtbl : ID3D12Device4VTbl*
  end

  struct ID3D12LifetimeOwnerVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    lifetime_state_updated : UInt64
  end

  ID3D12LifetimeOwner_GUID = "e667af9f-cd56-4f46-83ce-032e595d70a8"
  IID_ID3D12LifetimeOwner = LibC::GUID.new(0xe667af9f_u32, 0xcd56_u16, 0x4f46_u16, StaticArray[0x83_u8, 0xce_u8, 0x3_u8, 0x2e_u8, 0x59_u8, 0x5d_u8, 0x70_u8, 0xa8_u8])
  struct ID3D12LifetimeOwner
    lpVtbl : ID3D12LifetimeOwnerVTbl*
  end

  struct ID3D12SwapChainAssistantVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_luid : UInt64
    get_swap_chain_object : UInt64
    get_current_resource_and_command_queue : UInt64
    insert_implicit_sync : UInt64
  end

  ID3D12SwapChainAssistant_GUID = "f1df64b6-57fd-49cd-8807-c0eb88b45c8f"
  IID_ID3D12SwapChainAssistant = LibC::GUID.new(0xf1df64b6_u32, 0x57fd_u16, 0x49cd_u16, StaticArray[0x88_u8, 0x7_u8, 0xc0_u8, 0xeb_u8, 0x88_u8, 0xb4_u8, 0x5c_u8, 0x8f_u8])
  struct ID3D12SwapChainAssistant
    lpVtbl : ID3D12SwapChainAssistantVTbl*
  end

  struct ID3D12LifetimeTrackerVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
    destroy_owned_object : UInt64
  end

  ID3D12LifetimeTracker_GUID = "3fd03d36-4eb1-424a-a582-494ecb8ba813"
  IID_ID3D12LifetimeTracker = LibC::GUID.new(0x3fd03d36_u32, 0x4eb1_u16, 0x424a_u16, StaticArray[0xa5_u8, 0x82_u8, 0x49_u8, 0x4e_u8, 0xcb_u8, 0x8b_u8, 0xa8_u8, 0x13_u8])
  struct ID3D12LifetimeTracker
    lpVtbl : ID3D12LifetimeTrackerVTbl*
  end

  struct ID3D12StateObjectVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
  end

  ID3D12StateObject_GUID = "47016943-fca8-4594-93ea-af258b55346d"
  IID_ID3D12StateObject = LibC::GUID.new(0x47016943_u32, 0xfca8_u16, 0x4594_u16, StaticArray[0x93_u8, 0xea_u8, 0xaf_u8, 0x25_u8, 0x8b_u8, 0x55_u8, 0x34_u8, 0x6d_u8])
  struct ID3D12StateObject
    lpVtbl : ID3D12StateObjectVTbl*
  end

  struct ID3D12StateObjectPropertiesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_shader_identifier : UInt64
    get_shader_stack_size : UInt64
    get_pipeline_stack_size : UInt64
    set_pipeline_stack_size : UInt64
  end

  ID3D12StateObjectProperties_GUID = "de5fa827-9bf9-4f26-89ff-d7f56fde3860"
  IID_ID3D12StateObjectProperties = LibC::GUID.new(0xde5fa827_u32, 0x9bf9_u16, 0x4f26_u16, StaticArray[0x89_u8, 0xff_u8, 0xd7_u8, 0xf5_u8, 0x6f_u8, 0xde_u8, 0x38_u8, 0x60_u8])
  struct ID3D12StateObjectProperties
    lpVtbl : ID3D12StateObjectPropertiesVTbl*
  end

  struct ID3D12Device5VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_node_count : UInt64
    create_command_queue : UInt64
    create_command_allocator : UInt64
    create_graphics_pipeline_state : UInt64
    create_compute_pipeline_state : UInt64
    create_command_list : UInt64
    check_feature_support : UInt64
    create_descriptor_heap : UInt64
    get_descriptor_handle_increment_size : UInt64
    create_root_signature : UInt64
    create_constant_buffer_view : UInt64
    create_shader_resource_view : UInt64
    create_unordered_access_view : UInt64
    create_render_target_view : UInt64
    create_depth_stencil_view : UInt64
    create_sampler : UInt64
    copy_descriptors : UInt64
    copy_descriptors_simple : UInt64
    get_resource_allocation_info : UInt64
    get_custom_heap_properties : UInt64
    create_committed_resource : UInt64
    create_heap : UInt64
    create_placed_resource : UInt64
    create_reserved_resource : UInt64
    create_shared_handle : UInt64
    open_shared_handle : UInt64
    open_shared_handle_by_name : UInt64
    make_resident : UInt64
    evict : UInt64
    create_fence : UInt64
    get_device_removed_reason : UInt64
    get_copyable_footprints : UInt64
    create_query_heap : UInt64
    set_stable_power_state : UInt64
    create_command_signature : UInt64
    get_resource_tiling : UInt64
    get_adapter_luid : UInt64
    create_pipeline_library : UInt64
    set_event_on_multiple_fence_completion : UInt64
    set_residency_priority : UInt64
    create_pipeline_state : UInt64
    open_existing_heap_from_address : UInt64
    open_existing_heap_from_file_mapping : UInt64
    enqueue_make_resident : UInt64
    create_command_list1 : UInt64
    create_protected_resource_session : UInt64
    create_committed_resource1 : UInt64
    create_heap1 : UInt64
    create_reserved_resource1 : UInt64
    get_resource_allocation_info1 : UInt64
    create_lifetime_tracker : UInt64
    remove_device : UInt64
    enumerate_meta_commands : UInt64
    enumerate_meta_command_parameters : UInt64
    create_meta_command : UInt64
    create_state_object : UInt64
    get_raytracing_acceleration_structure_prebuild_info : UInt64
    check_driver_matching_identifier : UInt64
  end

  ID3D12Device5_GUID = "8b4f173b-2fea-4b80-8f58-4307191ab95d"
  IID_ID3D12Device5 = LibC::GUID.new(0x8b4f173b_u32, 0x2fea_u16, 0x4b80_u16, StaticArray[0x8f_u8, 0x58_u8, 0x43_u8, 0x7_u8, 0x19_u8, 0x1a_u8, 0xb9_u8, 0x5d_u8])
  struct ID3D12Device5
    lpVtbl : ID3D12Device5VTbl*
  end

  struct ID3D12DeviceRemovedExtendedDataSettingsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_auto_breadcrumbs_enablement : UInt64
    set_page_fault_enablement : UInt64
    set_watson_dump_enablement : UInt64
  end

  ID3D12DeviceRemovedExtendedDataSettings_GUID = "82bc481c-6b9b-4030-aedb-7ee3d1df1e63"
  IID_ID3D12DeviceRemovedExtendedDataSettings = LibC::GUID.new(0x82bc481c_u32, 0x6b9b_u16, 0x4030_u16, StaticArray[0xae_u8, 0xdb_u8, 0x7e_u8, 0xe3_u8, 0xd1_u8, 0xdf_u8, 0x1e_u8, 0x63_u8])
  struct ID3D12DeviceRemovedExtendedDataSettings
    lpVtbl : ID3D12DeviceRemovedExtendedDataSettingsVTbl*
  end

  struct ID3D12DeviceRemovedExtendedDataSettings1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_auto_breadcrumbs_enablement : UInt64
    set_page_fault_enablement : UInt64
    set_watson_dump_enablement : UInt64
    set_breadcrumb_context_enablement : UInt64
  end

  ID3D12DeviceRemovedExtendedDataSettings1_GUID = "dbd5ae51-3317-4f0a-adf9-1d7cedcaae0b"
  IID_ID3D12DeviceRemovedExtendedDataSettings1 = LibC::GUID.new(0xdbd5ae51_u32, 0x3317_u16, 0x4f0a_u16, StaticArray[0xad_u8, 0xf9_u8, 0x1d_u8, 0x7c_u8, 0xed_u8, 0xca_u8, 0xae_u8, 0xb_u8])
  struct ID3D12DeviceRemovedExtendedDataSettings1
    lpVtbl : ID3D12DeviceRemovedExtendedDataSettings1VTbl*
  end

  struct ID3D12DeviceRemovedExtendedDataVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_auto_breadcrumbs_output : UInt64
    get_page_fault_allocation_output : UInt64
  end

  ID3D12DeviceRemovedExtendedData_GUID = "98931d33-5ae8-4791-aa3c-1a73a2934e71"
  IID_ID3D12DeviceRemovedExtendedData = LibC::GUID.new(0x98931d33_u32, 0x5ae8_u16, 0x4791_u16, StaticArray[0xaa_u8, 0x3c_u8, 0x1a_u8, 0x73_u8, 0xa2_u8, 0x93_u8, 0x4e_u8, 0x71_u8])
  struct ID3D12DeviceRemovedExtendedData
    lpVtbl : ID3D12DeviceRemovedExtendedDataVTbl*
  end

  struct ID3D12DeviceRemovedExtendedData1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_auto_breadcrumbs_output : UInt64
    get_page_fault_allocation_output : UInt64
    get_auto_breadcrumbs_output1 : UInt64
    get_page_fault_allocation_output1 : UInt64
  end

  ID3D12DeviceRemovedExtendedData1_GUID = "9727a022-cf1d-4dda-9eba-effa653fc506"
  IID_ID3D12DeviceRemovedExtendedData1 = LibC::GUID.new(0x9727a022_u32, 0xcf1d_u16, 0x4dda_u16, StaticArray[0x9e_u8, 0xba_u8, 0xef_u8, 0xfa_u8, 0x65_u8, 0x3f_u8, 0xc5_u8, 0x6_u8])
  struct ID3D12DeviceRemovedExtendedData1
    lpVtbl : ID3D12DeviceRemovedExtendedData1VTbl*
  end

  struct ID3D12DeviceRemovedExtendedData2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_auto_breadcrumbs_output : UInt64
    get_page_fault_allocation_output : UInt64
    get_auto_breadcrumbs_output1 : UInt64
    get_page_fault_allocation_output1 : UInt64
    get_page_fault_allocation_output2 : UInt64
    get_device_state : UInt64
  end

  ID3D12DeviceRemovedExtendedData2_GUID = "67fc5816-e4ca-4915-bf18-42541272da54"
  IID_ID3D12DeviceRemovedExtendedData2 = LibC::GUID.new(0x67fc5816_u32, 0xe4ca_u16, 0x4915_u16, StaticArray[0xbf_u8, 0x18_u8, 0x42_u8, 0x54_u8, 0x12_u8, 0x72_u8, 0xda_u8, 0x54_u8])
  struct ID3D12DeviceRemovedExtendedData2
    lpVtbl : ID3D12DeviceRemovedExtendedData2VTbl*
  end

  struct ID3D12Device6VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_node_count : UInt64
    create_command_queue : UInt64
    create_command_allocator : UInt64
    create_graphics_pipeline_state : UInt64
    create_compute_pipeline_state : UInt64
    create_command_list : UInt64
    check_feature_support : UInt64
    create_descriptor_heap : UInt64
    get_descriptor_handle_increment_size : UInt64
    create_root_signature : UInt64
    create_constant_buffer_view : UInt64
    create_shader_resource_view : UInt64
    create_unordered_access_view : UInt64
    create_render_target_view : UInt64
    create_depth_stencil_view : UInt64
    create_sampler : UInt64
    copy_descriptors : UInt64
    copy_descriptors_simple : UInt64
    get_resource_allocation_info : UInt64
    get_custom_heap_properties : UInt64
    create_committed_resource : UInt64
    create_heap : UInt64
    create_placed_resource : UInt64
    create_reserved_resource : UInt64
    create_shared_handle : UInt64
    open_shared_handle : UInt64
    open_shared_handle_by_name : UInt64
    make_resident : UInt64
    evict : UInt64
    create_fence : UInt64
    get_device_removed_reason : UInt64
    get_copyable_footprints : UInt64
    create_query_heap : UInt64
    set_stable_power_state : UInt64
    create_command_signature : UInt64
    get_resource_tiling : UInt64
    get_adapter_luid : UInt64
    create_pipeline_library : UInt64
    set_event_on_multiple_fence_completion : UInt64
    set_residency_priority : UInt64
    create_pipeline_state : UInt64
    open_existing_heap_from_address : UInt64
    open_existing_heap_from_file_mapping : UInt64
    enqueue_make_resident : UInt64
    create_command_list1 : UInt64
    create_protected_resource_session : UInt64
    create_committed_resource1 : UInt64
    create_heap1 : UInt64
    create_reserved_resource1 : UInt64
    get_resource_allocation_info1 : UInt64
    create_lifetime_tracker : UInt64
    remove_device : UInt64
    enumerate_meta_commands : UInt64
    enumerate_meta_command_parameters : UInt64
    create_meta_command : UInt64
    create_state_object : UInt64
    get_raytracing_acceleration_structure_prebuild_info : UInt64
    check_driver_matching_identifier : UInt64
    set_background_processing_mode : UInt64
  end

  ID3D12Device6_GUID = "c70b221b-40e4-4a17-89af-025a0727a6dc"
  IID_ID3D12Device6 = LibC::GUID.new(0xc70b221b_u32, 0x40e4_u16, 0x4a17_u16, StaticArray[0x89_u8, 0xaf_u8, 0x2_u8, 0x5a_u8, 0x7_u8, 0x27_u8, 0xa6_u8, 0xdc_u8])
  struct ID3D12Device6
    lpVtbl : ID3D12Device6VTbl*
  end

  struct ID3D12ProtectedResourceSession1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
    get_status_fence : UInt64
    get_session_status : UInt64
    get_desc : UInt64
    get_desc1 : UInt64
  end

  ID3D12ProtectedResourceSession1_GUID = "d6f12dd6-76fb-406e-8961-4296eefc0409"
  IID_ID3D12ProtectedResourceSession1 = LibC::GUID.new(0xd6f12dd6_u32, 0x76fb_u16, 0x406e_u16, StaticArray[0x89_u8, 0x61_u8, 0x42_u8, 0x96_u8, 0xee_u8, 0xfc_u8, 0x4_u8, 0x9_u8])
  struct ID3D12ProtectedResourceSession1
    lpVtbl : ID3D12ProtectedResourceSession1VTbl*
  end

  struct ID3D12Device7VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_node_count : UInt64
    create_command_queue : UInt64
    create_command_allocator : UInt64
    create_graphics_pipeline_state : UInt64
    create_compute_pipeline_state : UInt64
    create_command_list : UInt64
    check_feature_support : UInt64
    create_descriptor_heap : UInt64
    get_descriptor_handle_increment_size : UInt64
    create_root_signature : UInt64
    create_constant_buffer_view : UInt64
    create_shader_resource_view : UInt64
    create_unordered_access_view : UInt64
    create_render_target_view : UInt64
    create_depth_stencil_view : UInt64
    create_sampler : UInt64
    copy_descriptors : UInt64
    copy_descriptors_simple : UInt64
    get_resource_allocation_info : UInt64
    get_custom_heap_properties : UInt64
    create_committed_resource : UInt64
    create_heap : UInt64
    create_placed_resource : UInt64
    create_reserved_resource : UInt64
    create_shared_handle : UInt64
    open_shared_handle : UInt64
    open_shared_handle_by_name : UInt64
    make_resident : UInt64
    evict : UInt64
    create_fence : UInt64
    get_device_removed_reason : UInt64
    get_copyable_footprints : UInt64
    create_query_heap : UInt64
    set_stable_power_state : UInt64
    create_command_signature : UInt64
    get_resource_tiling : UInt64
    get_adapter_luid : UInt64
    create_pipeline_library : UInt64
    set_event_on_multiple_fence_completion : UInt64
    set_residency_priority : UInt64
    create_pipeline_state : UInt64
    open_existing_heap_from_address : UInt64
    open_existing_heap_from_file_mapping : UInt64
    enqueue_make_resident : UInt64
    create_command_list1 : UInt64
    create_protected_resource_session : UInt64
    create_committed_resource1 : UInt64
    create_heap1 : UInt64
    create_reserved_resource1 : UInt64
    get_resource_allocation_info1 : UInt64
    create_lifetime_tracker : UInt64
    remove_device : UInt64
    enumerate_meta_commands : UInt64
    enumerate_meta_command_parameters : UInt64
    create_meta_command : UInt64
    create_state_object : UInt64
    get_raytracing_acceleration_structure_prebuild_info : UInt64
    check_driver_matching_identifier : UInt64
    set_background_processing_mode : UInt64
    add_to_state_object : UInt64
    create_protected_resource_session1 : UInt64
  end

  ID3D12Device7_GUID = "5c014b53-68a1-4b9b-8bd1-dd6046b9358b"
  IID_ID3D12Device7 = LibC::GUID.new(0x5c014b53_u32, 0x68a1_u16, 0x4b9b_u16, StaticArray[0x8b_u8, 0xd1_u8, 0xdd_u8, 0x60_u8, 0x46_u8, 0xb9_u8, 0x35_u8, 0x8b_u8])
  struct ID3D12Device7
    lpVtbl : ID3D12Device7VTbl*
  end

  struct ID3D12Device8VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_node_count : UInt64
    create_command_queue : UInt64
    create_command_allocator : UInt64
    create_graphics_pipeline_state : UInt64
    create_compute_pipeline_state : UInt64
    create_command_list : UInt64
    check_feature_support : UInt64
    create_descriptor_heap : UInt64
    get_descriptor_handle_increment_size : UInt64
    create_root_signature : UInt64
    create_constant_buffer_view : UInt64
    create_shader_resource_view : UInt64
    create_unordered_access_view : UInt64
    create_render_target_view : UInt64
    create_depth_stencil_view : UInt64
    create_sampler : UInt64
    copy_descriptors : UInt64
    copy_descriptors_simple : UInt64
    get_resource_allocation_info : UInt64
    get_custom_heap_properties : UInt64
    create_committed_resource : UInt64
    create_heap : UInt64
    create_placed_resource : UInt64
    create_reserved_resource : UInt64
    create_shared_handle : UInt64
    open_shared_handle : UInt64
    open_shared_handle_by_name : UInt64
    make_resident : UInt64
    evict : UInt64
    create_fence : UInt64
    get_device_removed_reason : UInt64
    get_copyable_footprints : UInt64
    create_query_heap : UInt64
    set_stable_power_state : UInt64
    create_command_signature : UInt64
    get_resource_tiling : UInt64
    get_adapter_luid : UInt64
    create_pipeline_library : UInt64
    set_event_on_multiple_fence_completion : UInt64
    set_residency_priority : UInt64
    create_pipeline_state : UInt64
    open_existing_heap_from_address : UInt64
    open_existing_heap_from_file_mapping : UInt64
    enqueue_make_resident : UInt64
    create_command_list1 : UInt64
    create_protected_resource_session : UInt64
    create_committed_resource1 : UInt64
    create_heap1 : UInt64
    create_reserved_resource1 : UInt64
    get_resource_allocation_info1 : UInt64
    create_lifetime_tracker : UInt64
    remove_device : UInt64
    enumerate_meta_commands : UInt64
    enumerate_meta_command_parameters : UInt64
    create_meta_command : UInt64
    create_state_object : UInt64
    get_raytracing_acceleration_structure_prebuild_info : UInt64
    check_driver_matching_identifier : UInt64
    set_background_processing_mode : UInt64
    add_to_state_object : UInt64
    create_protected_resource_session1 : UInt64
    get_resource_allocation_info2 : UInt64
    create_committed_resource2 : UInt64
    create_placed_resource1 : UInt64
    create_sampler_feedback_unordered_access_view : UInt64
    get_copyable_footprints1 : UInt64
  end

  ID3D12Device8_GUID = "9218e6bb-f944-4f7e-a75c-b1b2c7b701f3"
  IID_ID3D12Device8 = LibC::GUID.new(0x9218e6bb_u32, 0xf944_u16, 0x4f7e_u16, StaticArray[0xa7_u8, 0x5c_u8, 0xb1_u8, 0xb2_u8, 0xc7_u8, 0xb7_u8, 0x1_u8, 0xf3_u8])
  struct ID3D12Device8
    lpVtbl : ID3D12Device8VTbl*
  end

  struct ID3D12Resource1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
    map : UInt64
    unmap : UInt64
    get_desc : UInt64
    get_gpu_virtual_address : UInt64
    write_to_subresource : UInt64
    read_from_subresource : UInt64
    get_heap_properties : UInt64
    get_protected_resource_session : UInt64
  end

  ID3D12Resource1_GUID = "9d5e227a-4430-4161-88b3-3eca6bb16e19"
  IID_ID3D12Resource1 = LibC::GUID.new(0x9d5e227a_u32, 0x4430_u16, 0x4161_u16, StaticArray[0x88_u8, 0xb3_u8, 0x3e_u8, 0xca_u8, 0x6b_u8, 0xb1_u8, 0x6e_u8, 0x19_u8])
  struct ID3D12Resource1
    lpVtbl : ID3D12Resource1VTbl*
  end

  struct ID3D12Resource2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
    map : UInt64
    unmap : UInt64
    get_desc : UInt64
    get_gpu_virtual_address : UInt64
    write_to_subresource : UInt64
    read_from_subresource : UInt64
    get_heap_properties : UInt64
    get_protected_resource_session : UInt64
    get_desc1 : UInt64
  end

  ID3D12Resource2_GUID = "be36ec3b-ea85-4aeb-a45a-e9d76404a495"
  IID_ID3D12Resource2 = LibC::GUID.new(0xbe36ec3b_u32, 0xea85_u16, 0x4aeb_u16, StaticArray[0xa4_u8, 0x5a_u8, 0xe9_u8, 0xd7_u8, 0x64_u8, 0x4_u8, 0xa4_u8, 0x95_u8])
  struct ID3D12Resource2
    lpVtbl : ID3D12Resource2VTbl*
  end

  struct ID3D12Heap1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
    get_desc : UInt64
    get_protected_resource_session : UInt64
  end

  ID3D12Heap1_GUID = "572f7389-2168-49e3-9693-d6df5871bf6d"
  IID_ID3D12Heap1 = LibC::GUID.new(0x572f7389_u32, 0x2168_u16, 0x49e3_u16, StaticArray[0x96_u8, 0x93_u8, 0xd6_u8, 0xdf_u8, 0x58_u8, 0x71_u8, 0xbf_u8, 0x6d_u8])
  struct ID3D12Heap1
    lpVtbl : ID3D12Heap1VTbl*
  end

  struct ID3D12GraphicsCommandList3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
    get_type : UInt64
    close : UInt64
    reset : UInt64
    clear_state : UInt64
    draw_instanced : UInt64
    draw_indexed_instanced : UInt64
    dispatch : UInt64
    copy_buffer_region : UInt64
    copy_texture_region : UInt64
    copy_resource : UInt64
    copy_tiles : UInt64
    resolve_subresource : UInt64
    ia_set_primitive_topology : UInt64
    rs_set_viewports : UInt64
    rs_set_scissor_rects : UInt64
    om_set_blend_factor : UInt64
    om_set_stencil_ref : UInt64
    set_pipeline_state : UInt64
    resource_barrier : UInt64
    execute_bundle : UInt64
    set_descriptor_heaps : UInt64
    set_compute_root_signature : UInt64
    set_graphics_root_signature : UInt64
    set_compute_root_descriptor_table : UInt64
    set_graphics_root_descriptor_table : UInt64
    set_compute_root32_bit_constant : UInt64
    set_graphics_root32_bit_constant : UInt64
    set_compute_root32_bit_constants : UInt64
    set_graphics_root32_bit_constants : UInt64
    set_compute_root_constant_buffer_view : UInt64
    set_graphics_root_constant_buffer_view : UInt64
    set_compute_root_shader_resource_view : UInt64
    set_graphics_root_shader_resource_view : UInt64
    set_compute_root_unordered_access_view : UInt64
    set_graphics_root_unordered_access_view : UInt64
    ia_set_index_buffer : UInt64
    ia_set_vertex_buffers : UInt64
    so_set_targets : UInt64
    om_set_render_targets : UInt64
    clear_depth_stencil_view : UInt64
    clear_render_target_view : UInt64
    clear_unordered_access_view_uint : UInt64
    clear_unordered_access_view_float : UInt64
    discard_resource : UInt64
    begin_query : UInt64
    end_query : UInt64
    resolve_query_data : UInt64
    set_predication : UInt64
    set_marker : UInt64
    begin_event : UInt64
    end_event : UInt64
    execute_indirect : UInt64
    atomic_copy_buffer_uint : UInt64
    atomic_copy_buffer_uint64 : UInt64
    om_set_depth_bounds : UInt64
    set_sample_positions : UInt64
    resolve_subresource_region : UInt64
    set_view_instance_mask : UInt64
    write_buffer_immediate : UInt64
    set_protected_resource_session : UInt64
  end

  ID3D12GraphicsCommandList3_GUID = "6fda83a7-b84c-4e38-9ac8-c7bd22016b3d"
  IID_ID3D12GraphicsCommandList3 = LibC::GUID.new(0x6fda83a7_u32, 0xb84c_u16, 0x4e38_u16, StaticArray[0x9a_u8, 0xc8_u8, 0xc7_u8, 0xbd_u8, 0x22_u8, 0x1_u8, 0x6b_u8, 0x3d_u8])
  struct ID3D12GraphicsCommandList3
    lpVtbl : ID3D12GraphicsCommandList3VTbl*
  end

  struct ID3D12MetaCommandVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
    get_required_parameter_resource_size : UInt64
  end

  ID3D12MetaCommand_GUID = "dbb84c27-36ce-4fc9-b801-f048c46ac570"
  IID_ID3D12MetaCommand = LibC::GUID.new(0xdbb84c27_u32, 0x36ce_u16, 0x4fc9_u16, StaticArray[0xb8_u8, 0x1_u8, 0xf0_u8, 0x48_u8, 0xc4_u8, 0x6a_u8, 0xc5_u8, 0x70_u8])
  struct ID3D12MetaCommand
    lpVtbl : ID3D12MetaCommandVTbl*
  end

  struct ID3D12GraphicsCommandList4VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
    get_type : UInt64
    close : UInt64
    reset : UInt64
    clear_state : UInt64
    draw_instanced : UInt64
    draw_indexed_instanced : UInt64
    dispatch : UInt64
    copy_buffer_region : UInt64
    copy_texture_region : UInt64
    copy_resource : UInt64
    copy_tiles : UInt64
    resolve_subresource : UInt64
    ia_set_primitive_topology : UInt64
    rs_set_viewports : UInt64
    rs_set_scissor_rects : UInt64
    om_set_blend_factor : UInt64
    om_set_stencil_ref : UInt64
    set_pipeline_state : UInt64
    resource_barrier : UInt64
    execute_bundle : UInt64
    set_descriptor_heaps : UInt64
    set_compute_root_signature : UInt64
    set_graphics_root_signature : UInt64
    set_compute_root_descriptor_table : UInt64
    set_graphics_root_descriptor_table : UInt64
    set_compute_root32_bit_constant : UInt64
    set_graphics_root32_bit_constant : UInt64
    set_compute_root32_bit_constants : UInt64
    set_graphics_root32_bit_constants : UInt64
    set_compute_root_constant_buffer_view : UInt64
    set_graphics_root_constant_buffer_view : UInt64
    set_compute_root_shader_resource_view : UInt64
    set_graphics_root_shader_resource_view : UInt64
    set_compute_root_unordered_access_view : UInt64
    set_graphics_root_unordered_access_view : UInt64
    ia_set_index_buffer : UInt64
    ia_set_vertex_buffers : UInt64
    so_set_targets : UInt64
    om_set_render_targets : UInt64
    clear_depth_stencil_view : UInt64
    clear_render_target_view : UInt64
    clear_unordered_access_view_uint : UInt64
    clear_unordered_access_view_float : UInt64
    discard_resource : UInt64
    begin_query : UInt64
    end_query : UInt64
    resolve_query_data : UInt64
    set_predication : UInt64
    set_marker : UInt64
    begin_event : UInt64
    end_event : UInt64
    execute_indirect : UInt64
    atomic_copy_buffer_uint : UInt64
    atomic_copy_buffer_uint64 : UInt64
    om_set_depth_bounds : UInt64
    set_sample_positions : UInt64
    resolve_subresource_region : UInt64
    set_view_instance_mask : UInt64
    write_buffer_immediate : UInt64
    set_protected_resource_session : UInt64
    begin_render_pass : UInt64
    end_render_pass : UInt64
    initialize_meta_command : UInt64
    execute_meta_command : UInt64
    build_raytracing_acceleration_structure : UInt64
    emit_raytracing_acceleration_structure_postbuild_info : UInt64
    copy_raytracing_acceleration_structure : UInt64
    set_pipeline_state1 : UInt64
    dispatch_rays : UInt64
  end

  ID3D12GraphicsCommandList4_GUID = "8754318e-d3a9-4541-98cf-645b50dc4874"
  IID_ID3D12GraphicsCommandList4 = LibC::GUID.new(0x8754318e_u32, 0xd3a9_u16, 0x4541_u16, StaticArray[0x98_u8, 0xcf_u8, 0x64_u8, 0x5b_u8, 0x50_u8, 0xdc_u8, 0x48_u8, 0x74_u8])
  struct ID3D12GraphicsCommandList4
    lpVtbl : ID3D12GraphicsCommandList4VTbl*
  end

  struct ID3D12ShaderCacheSessionVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
    find_value : UInt64
    store_value : UInt64
    set_delete_on_destroy : UInt64
    get_desc : UInt64
  end

  ID3D12ShaderCacheSession_GUID = "28e2495d-0f64-4ae4-a6ec-129255dc49a8"
  IID_ID3D12ShaderCacheSession = LibC::GUID.new(0x28e2495d_u32, 0xf64_u16, 0x4ae4_u16, StaticArray[0xa6_u8, 0xec_u8, 0x12_u8, 0x92_u8, 0x55_u8, 0xdc_u8, 0x49_u8, 0xa8_u8])
  struct ID3D12ShaderCacheSession
    lpVtbl : ID3D12ShaderCacheSessionVTbl*
  end

  struct ID3D12Device9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_node_count : UInt64
    create_command_queue : UInt64
    create_command_allocator : UInt64
    create_graphics_pipeline_state : UInt64
    create_compute_pipeline_state : UInt64
    create_command_list : UInt64
    check_feature_support : UInt64
    create_descriptor_heap : UInt64
    get_descriptor_handle_increment_size : UInt64
    create_root_signature : UInt64
    create_constant_buffer_view : UInt64
    create_shader_resource_view : UInt64
    create_unordered_access_view : UInt64
    create_render_target_view : UInt64
    create_depth_stencil_view : UInt64
    create_sampler : UInt64
    copy_descriptors : UInt64
    copy_descriptors_simple : UInt64
    get_resource_allocation_info : UInt64
    get_custom_heap_properties : UInt64
    create_committed_resource : UInt64
    create_heap : UInt64
    create_placed_resource : UInt64
    create_reserved_resource : UInt64
    create_shared_handle : UInt64
    open_shared_handle : UInt64
    open_shared_handle_by_name : UInt64
    make_resident : UInt64
    evict : UInt64
    create_fence : UInt64
    get_device_removed_reason : UInt64
    get_copyable_footprints : UInt64
    create_query_heap : UInt64
    set_stable_power_state : UInt64
    create_command_signature : UInt64
    get_resource_tiling : UInt64
    get_adapter_luid : UInt64
    create_pipeline_library : UInt64
    set_event_on_multiple_fence_completion : UInt64
    set_residency_priority : UInt64
    create_pipeline_state : UInt64
    open_existing_heap_from_address : UInt64
    open_existing_heap_from_file_mapping : UInt64
    enqueue_make_resident : UInt64
    create_command_list1 : UInt64
    create_protected_resource_session : UInt64
    create_committed_resource1 : UInt64
    create_heap1 : UInt64
    create_reserved_resource1 : UInt64
    get_resource_allocation_info1 : UInt64
    create_lifetime_tracker : UInt64
    remove_device : UInt64
    enumerate_meta_commands : UInt64
    enumerate_meta_command_parameters : UInt64
    create_meta_command : UInt64
    create_state_object : UInt64
    get_raytracing_acceleration_structure_prebuild_info : UInt64
    check_driver_matching_identifier : UInt64
    set_background_processing_mode : UInt64
    add_to_state_object : UInt64
    create_protected_resource_session1 : UInt64
    get_resource_allocation_info2 : UInt64
    create_committed_resource2 : UInt64
    create_placed_resource1 : UInt64
    create_sampler_feedback_unordered_access_view : UInt64
    get_copyable_footprints1 : UInt64
    create_shader_cache_session : UInt64
    shader_cache_control : UInt64
    create_command_queue1 : UInt64
  end

  ID3D12Device9_GUID = "4c80e962-f032-4f60-bc9e-ebc2cfa1d83c"
  IID_ID3D12Device9 = LibC::GUID.new(0x4c80e962_u32, 0xf032_u16, 0x4f60_u16, StaticArray[0xbc_u8, 0x9e_u8, 0xeb_u8, 0xc2_u8, 0xcf_u8, 0xa1_u8, 0xd8_u8, 0x3c_u8])
  struct ID3D12Device9
    lpVtbl : ID3D12Device9VTbl*
  end

  struct ID3D12ToolsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    enable_shader_instrumentation : UInt64
    shader_instrumentation_enabled : UInt64
  end

  ID3D12Tools_GUID = "7071e1f0-e84b-4b33-974f-12fa49de65c5"
  IID_ID3D12Tools = LibC::GUID.new(0x7071e1f0_u32, 0xe84b_u16, 0x4b33_u16, StaticArray[0x97_u8, 0x4f_u8, 0x12_u8, 0xfa_u8, 0x49_u8, 0xde_u8, 0x65_u8, 0xc5_u8])
  struct ID3D12Tools
    lpVtbl : ID3D12ToolsVTbl*
  end

  struct ID3D12DebugVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    enable_debug_layer : UInt64
  end

  ID3D12Debug_GUID = "344488b7-6846-474b-b989-f027448245e0"
  IID_ID3D12Debug = LibC::GUID.new(0x344488b7_u32, 0x6846_u16, 0x474b_u16, StaticArray[0xb9_u8, 0x89_u8, 0xf0_u8, 0x27_u8, 0x44_u8, 0x82_u8, 0x45_u8, 0xe0_u8])
  struct ID3D12Debug
    lpVtbl : ID3D12DebugVTbl*
  end

  struct ID3D12Debug1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    enable_debug_layer : UInt64
    set_enable_gpu_based_validation : UInt64
    set_enable_synchronized_command_queue_validation : UInt64
  end

  ID3D12Debug1_GUID = "affaa4ca-63fe-4d8e-b8ad-159000af4304"
  IID_ID3D12Debug1 = LibC::GUID.new(0xaffaa4ca_u32, 0x63fe_u16, 0x4d8e_u16, StaticArray[0xb8_u8, 0xad_u8, 0x15_u8, 0x90_u8, 0x0_u8, 0xaf_u8, 0x43_u8, 0x4_u8])
  struct ID3D12Debug1
    lpVtbl : ID3D12Debug1VTbl*
  end

  struct ID3D12Debug2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_gpu_based_validation_flags : UInt64
  end

  ID3D12Debug2_GUID = "93a665c4-a3b2-4e5d-b692-a26ae14e3374"
  IID_ID3D12Debug2 = LibC::GUID.new(0x93a665c4_u32, 0xa3b2_u16, 0x4e5d_u16, StaticArray[0xb6_u8, 0x92_u8, 0xa2_u8, 0x6a_u8, 0xe1_u8, 0x4e_u8, 0x33_u8, 0x74_u8])
  struct ID3D12Debug2
    lpVtbl : ID3D12Debug2VTbl*
  end

  struct ID3D12Debug3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    enable_debug_layer : UInt64
    set_enable_gpu_based_validation : UInt64
    set_enable_synchronized_command_queue_validation : UInt64
    set_gpu_based_validation_flags : UInt64
  end

  ID3D12Debug3_GUID = "5cf4e58f-f671-4ff1-a542-3686e3d153d1"
  IID_ID3D12Debug3 = LibC::GUID.new(0x5cf4e58f_u32, 0xf671_u16, 0x4ff1_u16, StaticArray[0xa5_u8, 0x42_u8, 0x36_u8, 0x86_u8, 0xe3_u8, 0xd1_u8, 0x53_u8, 0xd1_u8])
  struct ID3D12Debug3
    lpVtbl : ID3D12Debug3VTbl*
  end

  struct ID3D12Debug4VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    enable_debug_layer : UInt64
    set_enable_gpu_based_validation : UInt64
    set_enable_synchronized_command_queue_validation : UInt64
    set_gpu_based_validation_flags : UInt64
    disable_debug_layer : UInt64
  end

  ID3D12Debug4_GUID = "014b816e-9ec5-4a2f-a845-ffbe441ce13a"
  IID_ID3D12Debug4 = LibC::GUID.new(0x14b816e_u32, 0x9ec5_u16, 0x4a2f_u16, StaticArray[0xa8_u8, 0x45_u8, 0xff_u8, 0xbe_u8, 0x44_u8, 0x1c_u8, 0xe1_u8, 0x3a_u8])
  struct ID3D12Debug4
    lpVtbl : ID3D12Debug4VTbl*
  end

  struct ID3D12Debug5VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    enable_debug_layer : UInt64
    set_enable_gpu_based_validation : UInt64
    set_enable_synchronized_command_queue_validation : UInt64
    set_gpu_based_validation_flags : UInt64
    disable_debug_layer : UInt64
    set_enable_auto_name : UInt64
  end

  ID3D12Debug5_GUID = "548d6b12-09fa-40e0-9069-5dcd589a52c9"
  IID_ID3D12Debug5 = LibC::GUID.new(0x548d6b12_u32, 0x9fa_u16, 0x40e0_u16, StaticArray[0x90_u8, 0x69_u8, 0x5d_u8, 0xcd_u8, 0x58_u8, 0x9a_u8, 0x52_u8, 0xc9_u8])
  struct ID3D12Debug5
    lpVtbl : ID3D12Debug5VTbl*
  end

  struct ID3D12DebugDevice1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_debug_parameter : UInt64
    get_debug_parameter : UInt64
    report_live_device_objects : UInt64
  end

  ID3D12DebugDevice1_GUID = "a9b71770-d099-4a65-a698-3dee10020f88"
  IID_ID3D12DebugDevice1 = LibC::GUID.new(0xa9b71770_u32, 0xd099_u16, 0x4a65_u16, StaticArray[0xa6_u8, 0x98_u8, 0x3d_u8, 0xee_u8, 0x10_u8, 0x2_u8, 0xf_u8, 0x88_u8])
  struct ID3D12DebugDevice1
    lpVtbl : ID3D12DebugDevice1VTbl*
  end

  struct ID3D12DebugDeviceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_feature_mask : UInt64
    get_feature_mask : UInt64
    report_live_device_objects : UInt64
  end

  ID3D12DebugDevice_GUID = "3febd6dd-4973-4787-8194-e45f9e28923e"
  IID_ID3D12DebugDevice = LibC::GUID.new(0x3febd6dd_u32, 0x4973_u16, 0x4787_u16, StaticArray[0x81_u8, 0x94_u8, 0xe4_u8, 0x5f_u8, 0x9e_u8, 0x28_u8, 0x92_u8, 0x3e_u8])
  struct ID3D12DebugDevice
    lpVtbl : ID3D12DebugDeviceVTbl*
  end

  struct ID3D12DebugDevice2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_feature_mask : UInt64
    get_feature_mask : UInt64
    report_live_device_objects : UInt64
    set_debug_parameter : UInt64
    get_debug_parameter : UInt64
  end

  ID3D12DebugDevice2_GUID = "60eccbc1-378d-4df1-894c-f8ac5ce4d7dd"
  IID_ID3D12DebugDevice2 = LibC::GUID.new(0x60eccbc1_u32, 0x378d_u16, 0x4df1_u16, StaticArray[0x89_u8, 0x4c_u8, 0xf8_u8, 0xac_u8, 0x5c_u8, 0xe4_u8, 0xd7_u8, 0xdd_u8])
  struct ID3D12DebugDevice2
    lpVtbl : ID3D12DebugDevice2VTbl*
  end

  struct ID3D12DebugCommandQueueVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    assert_resource_state : UInt64
  end

  ID3D12DebugCommandQueue_GUID = "09e0bf36-54ac-484f-8847-4baeeab6053a"
  IID_ID3D12DebugCommandQueue = LibC::GUID.new(0x9e0bf36_u32, 0x54ac_u16, 0x484f_u16, StaticArray[0x88_u8, 0x47_u8, 0x4b_u8, 0xae_u8, 0xea_u8, 0xb6_u8, 0x5_u8, 0x3a_u8])
  struct ID3D12DebugCommandQueue
    lpVtbl : ID3D12DebugCommandQueueVTbl*
  end

  struct ID3D12DebugCommandList1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    assert_resource_state : UInt64
    set_debug_parameter : UInt64
    get_debug_parameter : UInt64
  end

  ID3D12DebugCommandList1_GUID = "102ca951-311b-4b01-b11f-ecb83e061b37"
  IID_ID3D12DebugCommandList1 = LibC::GUID.new(0x102ca951_u32, 0x311b_u16, 0x4b01_u16, StaticArray[0xb1_u8, 0x1f_u8, 0xec_u8, 0xb8_u8, 0x3e_u8, 0x6_u8, 0x1b_u8, 0x37_u8])
  struct ID3D12DebugCommandList1
    lpVtbl : ID3D12DebugCommandList1VTbl*
  end

  struct ID3D12DebugCommandListVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    assert_resource_state : UInt64
    set_feature_mask : UInt64
    get_feature_mask : UInt64
  end

  ID3D12DebugCommandList_GUID = "09e0bf36-54ac-484f-8847-4baeeab6053f"
  IID_ID3D12DebugCommandList = LibC::GUID.new(0x9e0bf36_u32, 0x54ac_u16, 0x484f_u16, StaticArray[0x88_u8, 0x47_u8, 0x4b_u8, 0xae_u8, 0xea_u8, 0xb6_u8, 0x5_u8, 0x3f_u8])
  struct ID3D12DebugCommandList
    lpVtbl : ID3D12DebugCommandListVTbl*
  end

  struct ID3D12DebugCommandList2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    assert_resource_state : UInt64
    set_feature_mask : UInt64
    get_feature_mask : UInt64
    set_debug_parameter : UInt64
    get_debug_parameter : UInt64
  end

  ID3D12DebugCommandList2_GUID = "aeb575cf-4e06-48be-ba3b-c450fc96652e"
  IID_ID3D12DebugCommandList2 = LibC::GUID.new(0xaeb575cf_u32, 0x4e06_u16, 0x48be_u16, StaticArray[0xba_u8, 0x3b_u8, 0xc4_u8, 0x50_u8, 0xfc_u8, 0x96_u8, 0x65_u8, 0x2e_u8])
  struct ID3D12DebugCommandList2
    lpVtbl : ID3D12DebugCommandList2VTbl*
  end

  struct ID3D12SharingContractVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    present : UInt64
    shared_fence_signal : UInt64
    begin_capturable_work : UInt64
    end_capturable_work : UInt64
  end

  ID3D12SharingContract_GUID = "0adf7d52-929c-4e61-addb-ffed30de66ef"
  IID_ID3D12SharingContract = LibC::GUID.new(0xadf7d52_u32, 0x929c_u16, 0x4e61_u16, StaticArray[0xad_u8, 0xdb_u8, 0xff_u8, 0xed_u8, 0x30_u8, 0xde_u8, 0x66_u8, 0xef_u8])
  struct ID3D12SharingContract
    lpVtbl : ID3D12SharingContractVTbl*
  end

  struct ID3D12InfoQueueVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_message_count_limit : UInt64
    clear_stored_messages : UInt64
    get_message : UInt64
    get_num_messages_allowed_by_storage_filter : UInt64
    get_num_messages_denied_by_storage_filter : UInt64
    get_num_stored_messages : UInt64
    get_num_stored_messages_allowed_by_retrieval_filter : UInt64
    get_num_messages_discarded_by_message_count_limit : UInt64
    get_message_count_limit : UInt64
    add_storage_filter_entries : UInt64
    get_storage_filter : UInt64
    clear_storage_filter : UInt64
    push_empty_storage_filter : UInt64
    push_copy_of_storage_filter : UInt64
    push_storage_filter : UInt64
    pop_storage_filter : UInt64
    get_storage_filter_stack_size : UInt64
    add_retrieval_filter_entries : UInt64
    get_retrieval_filter : UInt64
    clear_retrieval_filter : UInt64
    push_empty_retrieval_filter : UInt64
    push_copy_of_retrieval_filter : UInt64
    push_retrieval_filter : UInt64
    pop_retrieval_filter : UInt64
    get_retrieval_filter_stack_size : UInt64
    add_message : UInt64
    add_application_message : UInt64
    set_break_on_category : UInt64
    set_break_on_severity : UInt64
    set_break_on_id : UInt64
    get_break_on_category : UInt64
    get_break_on_severity : UInt64
    get_break_on_id : UInt64
    set_mute_debug_output : UInt64
    get_mute_debug_output : UInt64
  end

  ID3D12InfoQueue_GUID = "0742a90b-c387-483f-b946-30a7e4e61458"
  IID_ID3D12InfoQueue = LibC::GUID.new(0x742a90b_u32, 0xc387_u16, 0x483f_u16, StaticArray[0xb9_u8, 0x46_u8, 0x30_u8, 0xa7_u8, 0xe4_u8, 0xe6_u8, 0x14_u8, 0x58_u8])
  struct ID3D12InfoQueue
    lpVtbl : ID3D12InfoQueueVTbl*
  end

  struct ID3D12InfoQueue1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_message_count_limit : UInt64
    clear_stored_messages : UInt64
    get_message : UInt64
    get_num_messages_allowed_by_storage_filter : UInt64
    get_num_messages_denied_by_storage_filter : UInt64
    get_num_stored_messages : UInt64
    get_num_stored_messages_allowed_by_retrieval_filter : UInt64
    get_num_messages_discarded_by_message_count_limit : UInt64
    get_message_count_limit : UInt64
    add_storage_filter_entries : UInt64
    get_storage_filter : UInt64
    clear_storage_filter : UInt64
    push_empty_storage_filter : UInt64
    push_copy_of_storage_filter : UInt64
    push_storage_filter : UInt64
    pop_storage_filter : UInt64
    get_storage_filter_stack_size : UInt64
    add_retrieval_filter_entries : UInt64
    get_retrieval_filter : UInt64
    clear_retrieval_filter : UInt64
    push_empty_retrieval_filter : UInt64
    push_copy_of_retrieval_filter : UInt64
    push_retrieval_filter : UInt64
    pop_retrieval_filter : UInt64
    get_retrieval_filter_stack_size : UInt64
    add_message : UInt64
    add_application_message : UInt64
    set_break_on_category : UInt64
    set_break_on_severity : UInt64
    set_break_on_id : UInt64
    get_break_on_category : UInt64
    get_break_on_severity : UInt64
    get_break_on_id : UInt64
    set_mute_debug_output : UInt64
    get_mute_debug_output : UInt64
    register_message_callback : UInt64
    unregister_message_callback : UInt64
  end

  ID3D12InfoQueue1_GUID = "2852dd88-b484-4c0c-b6b1-67168500e600"
  IID_ID3D12InfoQueue1 = LibC::GUID.new(0x2852dd88_u32, 0xb484_u16, 0x4c0c_u16, StaticArray[0xb6_u8, 0xb1_u8, 0x67_u8, 0x16_u8, 0x85_u8, 0x0_u8, 0xe6_u8, 0x0_u8])
  struct ID3D12InfoQueue1
    lpVtbl : ID3D12InfoQueue1VTbl*
  end

  struct ID3D12SDKConfigurationVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_sdk_version : UInt64
  end

  ID3D12SDKConfiguration_GUID = "e9eb5314-33aa-42b2-a718-d77f58b1f1c7"
  IID_ID3D12SDKConfiguration = LibC::GUID.new(0xe9eb5314_u32, 0x33aa_u16, 0x42b2_u16, StaticArray[0xa7_u8, 0x18_u8, 0xd7_u8, 0x7f_u8, 0x58_u8, 0xb1_u8, 0xf1_u8, 0xc7_u8])
  struct ID3D12SDKConfiguration
    lpVtbl : ID3D12SDKConfigurationVTbl*
  end

  struct ID3D12GraphicsCommandList5VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
    get_type : UInt64
    close : UInt64
    reset : UInt64
    clear_state : UInt64
    draw_instanced : UInt64
    draw_indexed_instanced : UInt64
    dispatch : UInt64
    copy_buffer_region : UInt64
    copy_texture_region : UInt64
    copy_resource : UInt64
    copy_tiles : UInt64
    resolve_subresource : UInt64
    ia_set_primitive_topology : UInt64
    rs_set_viewports : UInt64
    rs_set_scissor_rects : UInt64
    om_set_blend_factor : UInt64
    om_set_stencil_ref : UInt64
    set_pipeline_state : UInt64
    resource_barrier : UInt64
    execute_bundle : UInt64
    set_descriptor_heaps : UInt64
    set_compute_root_signature : UInt64
    set_graphics_root_signature : UInt64
    set_compute_root_descriptor_table : UInt64
    set_graphics_root_descriptor_table : UInt64
    set_compute_root32_bit_constant : UInt64
    set_graphics_root32_bit_constant : UInt64
    set_compute_root32_bit_constants : UInt64
    set_graphics_root32_bit_constants : UInt64
    set_compute_root_constant_buffer_view : UInt64
    set_graphics_root_constant_buffer_view : UInt64
    set_compute_root_shader_resource_view : UInt64
    set_graphics_root_shader_resource_view : UInt64
    set_compute_root_unordered_access_view : UInt64
    set_graphics_root_unordered_access_view : UInt64
    ia_set_index_buffer : UInt64
    ia_set_vertex_buffers : UInt64
    so_set_targets : UInt64
    om_set_render_targets : UInt64
    clear_depth_stencil_view : UInt64
    clear_render_target_view : UInt64
    clear_unordered_access_view_uint : UInt64
    clear_unordered_access_view_float : UInt64
    discard_resource : UInt64
    begin_query : UInt64
    end_query : UInt64
    resolve_query_data : UInt64
    set_predication : UInt64
    set_marker : UInt64
    begin_event : UInt64
    end_event : UInt64
    execute_indirect : UInt64
    atomic_copy_buffer_uint : UInt64
    atomic_copy_buffer_uint64 : UInt64
    om_set_depth_bounds : UInt64
    set_sample_positions : UInt64
    resolve_subresource_region : UInt64
    set_view_instance_mask : UInt64
    write_buffer_immediate : UInt64
    set_protected_resource_session : UInt64
    begin_render_pass : UInt64
    end_render_pass : UInt64
    initialize_meta_command : UInt64
    execute_meta_command : UInt64
    build_raytracing_acceleration_structure : UInt64
    emit_raytracing_acceleration_structure_postbuild_info : UInt64
    copy_raytracing_acceleration_structure : UInt64
    set_pipeline_state1 : UInt64
    dispatch_rays : UInt64
    rs_set_shading_rate : UInt64
    rs_set_shading_rate_image : UInt64
  end

  ID3D12GraphicsCommandList5_GUID = "55050859-4024-474c-87f5-6472eaee44ea"
  IID_ID3D12GraphicsCommandList5 = LibC::GUID.new(0x55050859_u32, 0x4024_u16, 0x474c_u16, StaticArray[0x87_u8, 0xf5_u8, 0x64_u8, 0x72_u8, 0xea_u8, 0xee_u8, 0x44_u8, 0xea_u8])
  struct ID3D12GraphicsCommandList5
    lpVtbl : ID3D12GraphicsCommandList5VTbl*
  end

  struct ID3D12GraphicsCommandList6VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    set_name : UInt64
    get_device : UInt64
    get_type : UInt64
    close : UInt64
    reset : UInt64
    clear_state : UInt64
    draw_instanced : UInt64
    draw_indexed_instanced : UInt64
    dispatch : UInt64
    copy_buffer_region : UInt64
    copy_texture_region : UInt64
    copy_resource : UInt64
    copy_tiles : UInt64
    resolve_subresource : UInt64
    ia_set_primitive_topology : UInt64
    rs_set_viewports : UInt64
    rs_set_scissor_rects : UInt64
    om_set_blend_factor : UInt64
    om_set_stencil_ref : UInt64
    set_pipeline_state : UInt64
    resource_barrier : UInt64
    execute_bundle : UInt64
    set_descriptor_heaps : UInt64
    set_compute_root_signature : UInt64
    set_graphics_root_signature : UInt64
    set_compute_root_descriptor_table : UInt64
    set_graphics_root_descriptor_table : UInt64
    set_compute_root32_bit_constant : UInt64
    set_graphics_root32_bit_constant : UInt64
    set_compute_root32_bit_constants : UInt64
    set_graphics_root32_bit_constants : UInt64
    set_compute_root_constant_buffer_view : UInt64
    set_graphics_root_constant_buffer_view : UInt64
    set_compute_root_shader_resource_view : UInt64
    set_graphics_root_shader_resource_view : UInt64
    set_compute_root_unordered_access_view : UInt64
    set_graphics_root_unordered_access_view : UInt64
    ia_set_index_buffer : UInt64
    ia_set_vertex_buffers : UInt64
    so_set_targets : UInt64
    om_set_render_targets : UInt64
    clear_depth_stencil_view : UInt64
    clear_render_target_view : UInt64
    clear_unordered_access_view_uint : UInt64
    clear_unordered_access_view_float : UInt64
    discard_resource : UInt64
    begin_query : UInt64
    end_query : UInt64
    resolve_query_data : UInt64
    set_predication : UInt64
    set_marker : UInt64
    begin_event : UInt64
    end_event : UInt64
    execute_indirect : UInt64
    atomic_copy_buffer_uint : UInt64
    atomic_copy_buffer_uint64 : UInt64
    om_set_depth_bounds : UInt64
    set_sample_positions : UInt64
    resolve_subresource_region : UInt64
    set_view_instance_mask : UInt64
    write_buffer_immediate : UInt64
    set_protected_resource_session : UInt64
    begin_render_pass : UInt64
    end_render_pass : UInt64
    initialize_meta_command : UInt64
    execute_meta_command : UInt64
    build_raytracing_acceleration_structure : UInt64
    emit_raytracing_acceleration_structure_postbuild_info : UInt64
    copy_raytracing_acceleration_structure : UInt64
    set_pipeline_state1 : UInt64
    dispatch_rays : UInt64
    rs_set_shading_rate : UInt64
    rs_set_shading_rate_image : UInt64
    dispatch_mesh : UInt64
  end

  ID3D12GraphicsCommandList6_GUID = "c3827890-e548-4cfa-96cf-5689a9370f80"
  IID_ID3D12GraphicsCommandList6 = LibC::GUID.new(0xc3827890_u32, 0xe548_u16, 0x4cfa_u16, StaticArray[0x96_u8, 0xcf_u8, 0x56_u8, 0x89_u8, 0xa9_u8, 0x37_u8, 0xf_u8, 0x80_u8])
  struct ID3D12GraphicsCommandList6
    lpVtbl : ID3D12GraphicsCommandList6VTbl*
  end

  struct ID3D12ShaderReflectionTypeVTbl
    get_desc : UInt64
    get_member_type_by_index : UInt64
    get_member_type_by_name : UInt64
    get_member_type_name : UInt64
    is_equal : UInt64
    get_sub_type : UInt64
    get_base_class : UInt64
    get_num_interfaces : UInt64
    get_interface_by_index : UInt64
    is_of_type : UInt64
    implements_interface : UInt64
  end

  ID3D12ShaderReflectionType_GUID = "e913c351-783d-48ca-a1d1-4f306284ad56"
  IID_ID3D12ShaderReflectionType = LibC::GUID.new(0xe913c351_u32, 0x783d_u16, 0x48ca_u16, StaticArray[0xa1_u8, 0xd1_u8, 0x4f_u8, 0x30_u8, 0x62_u8, 0x84_u8, 0xad_u8, 0x56_u8])
  struct ID3D12ShaderReflectionType
    lpVtbl : ID3D12ShaderReflectionTypeVTbl*
  end

  struct ID3D12ShaderReflectionVariableVTbl
    get_desc : UInt64
    get_type : UInt64
    get_buffer : UInt64
    get_interface_slot : UInt64
  end

  ID3D12ShaderReflectionVariable_GUID = "8337a8a6-a216-444a-b2f4-314733a73aea"
  IID_ID3D12ShaderReflectionVariable = LibC::GUID.new(0x8337a8a6_u32, 0xa216_u16, 0x444a_u16, StaticArray[0xb2_u8, 0xf4_u8, 0x31_u8, 0x47_u8, 0x33_u8, 0xa7_u8, 0x3a_u8, 0xea_u8])
  struct ID3D12ShaderReflectionVariable
    lpVtbl : ID3D12ShaderReflectionVariableVTbl*
  end

  struct ID3D12ShaderReflectionConstantBufferVTbl
    get_desc : UInt64
    get_variable_by_index : UInt64
    get_variable_by_name : UInt64
  end

  ID3D12ShaderReflectionConstantBuffer_GUID = "c59598b4-48b3-4869-b9b1-b1618b14a8b7"
  IID_ID3D12ShaderReflectionConstantBuffer = LibC::GUID.new(0xc59598b4_u32, 0x48b3_u16, 0x4869_u16, StaticArray[0xb9_u8, 0xb1_u8, 0xb1_u8, 0x61_u8, 0x8b_u8, 0x14_u8, 0xa8_u8, 0xb7_u8])
  struct ID3D12ShaderReflectionConstantBuffer
    lpVtbl : ID3D12ShaderReflectionConstantBufferVTbl*
  end

  struct ID3D12ShaderReflectionVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_desc : UInt64
    get_constant_buffer_by_index : UInt64
    get_constant_buffer_by_name : UInt64
    get_resource_binding_desc : UInt64
    get_input_parameter_desc : UInt64
    get_output_parameter_desc : UInt64
    get_patch_constant_parameter_desc : UInt64
    get_variable_by_name : UInt64
    get_resource_binding_desc_by_name : UInt64
    get_mov_instruction_count : UInt64
    get_movc_instruction_count : UInt64
    get_conversion_instruction_count : UInt64
    get_bitwise_instruction_count : UInt64
    get_gs_input_primitive : UInt64
    is_sample_frequency_shader : UInt64
    get_num_interface_slots : UInt64
    get_min_feature_level : UInt64
    get_thread_group_size : UInt64
    get_requires_flags : UInt64
  end

  ID3D12ShaderReflection_GUID = "5a58797d-a72c-478d-8ba2-efc6b0efe88e"
  IID_ID3D12ShaderReflection = LibC::GUID.new(0x5a58797d_u32, 0xa72c_u16, 0x478d_u16, StaticArray[0x8b_u8, 0xa2_u8, 0xef_u8, 0xc6_u8, 0xb0_u8, 0xef_u8, 0xe8_u8, 0x8e_u8])
  struct ID3D12ShaderReflection
    lpVtbl : ID3D12ShaderReflectionVTbl*
  end

  struct ID3D12LibraryReflectionVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_desc : UInt64
    get_function_by_index : UInt64
  end

  ID3D12LibraryReflection_GUID = "8e349d19-54db-4a56-9dc9-119d87bdb804"
  IID_ID3D12LibraryReflection = LibC::GUID.new(0x8e349d19_u32, 0x54db_u16, 0x4a56_u16, StaticArray[0x9d_u8, 0xc9_u8, 0x11_u8, 0x9d_u8, 0x87_u8, 0xbd_u8, 0xb8_u8, 0x4_u8])
  struct ID3D12LibraryReflection
    lpVtbl : ID3D12LibraryReflectionVTbl*
  end

  struct ID3D12FunctionReflectionVTbl
    get_desc : UInt64
    get_constant_buffer_by_index : UInt64
    get_constant_buffer_by_name : UInt64
    get_resource_binding_desc : UInt64
    get_variable_by_name : UInt64
    get_resource_binding_desc_by_name : UInt64
    get_function_parameter : UInt64
  end

  ID3D12FunctionReflection_GUID = "1108795c-2772-4ba9-b2a8-d464dc7e2799"
  IID_ID3D12FunctionReflection = LibC::GUID.new(0x1108795c_u32, 0x2772_u16, 0x4ba9_u16, StaticArray[0xb2_u8, 0xa8_u8, 0xd4_u8, 0x64_u8, 0xdc_u8, 0x7e_u8, 0x27_u8, 0x99_u8])
  struct ID3D12FunctionReflection
    lpVtbl : ID3D12FunctionReflectionVTbl*
  end

  struct ID3D12FunctionParameterReflectionVTbl
    get_desc : UInt64
  end

  ID3D12FunctionParameterReflection_GUID = "ec25f42d-7006-4f2b-b33e-02cc3375733f"
  IID_ID3D12FunctionParameterReflection = LibC::GUID.new(0xec25f42d_u32, 0x7006_u16, 0x4f2b_u16, StaticArray[0xb3_u8, 0x3e_u8, 0x2_u8, 0xcc_u8, 0x33_u8, 0x75_u8, 0x73_u8, 0x3f_u8])
  struct ID3D12FunctionParameterReflection
    lpVtbl : ID3D12FunctionParameterReflectionVTbl*
  end


  # Params # prootsignature : D3D12_ROOT_SIGNATURE_DESC* [In],version : D3D_ROOT_SIGNATURE_VERSION [In],ppblob : ID3DBlob* [In],pperrorblob : ID3DBlob* [In]
  fun D3D12SerializeRootSignature(prootsignature : D3D12_ROOT_SIGNATURE_DESC*, version : D3D_ROOT_SIGNATURE_VERSION, ppblob : ID3DBlob*, pperrorblob : ID3DBlob*) : HRESULT

  # Params # psrcdata : Void* [In],srcdatasizeinbytes : LibC::UINT_PTR [In],prootsignaturedeserializerinterface : Guid* [In],pprootsignaturedeserializer : Void** [In]
  fun D3D12CreateRootSignatureDeserializer(psrcdata : Void*, srcdatasizeinbytes : LibC::UINT_PTR, prootsignaturedeserializerinterface : Guid*, pprootsignaturedeserializer : Void**) : HRESULT

  # Params # prootsignature : D3D12_VERSIONED_ROOT_SIGNATURE_DESC* [In],ppblob : ID3DBlob* [In],pperrorblob : ID3DBlob* [In]
  fun D3D12SerializeVersionedRootSignature(prootsignature : D3D12_VERSIONED_ROOT_SIGNATURE_DESC*, ppblob : ID3DBlob*, pperrorblob : ID3DBlob*) : HRESULT

  # Params # psrcdata : Void* [In],srcdatasizeinbytes : LibC::UINT_PTR [In],prootsignaturedeserializerinterface : Guid* [In],pprootsignaturedeserializer : Void** [In]
  fun D3D12CreateVersionedRootSignatureDeserializer(psrcdata : Void*, srcdatasizeinbytes : LibC::UINT_PTR, prootsignaturedeserializerinterface : Guid*, pprootsignaturedeserializer : Void**) : HRESULT

  # Params # padapter : IUnknown [In],minimumfeaturelevel : D3D_FEATURE_LEVEL [In],riid : Guid* [In],ppdevice : Void** [In]
  fun D3D12CreateDevice(padapter : IUnknown, minimumfeaturelevel : D3D_FEATURE_LEVEL, riid : Guid*, ppdevice : Void**) : HRESULT

  # Params # riid : Guid* [In],ppvdebug : Void** [In]
  fun D3D12GetDebugInterface(riid : Guid*, ppvdebug : Void**) : HRESULT

  # Params # numfeatures : UInt32 [In],piids : Guid* [In],pconfigurationstructs : Void* [In],pconfigurationstructsizes : UInt32* [In]
  fun D3D12EnableExperimentalFeatures(numfeatures : UInt32, piids : Guid*, pconfigurationstructs : Void*, pconfigurationstructsizes : UInt32*) : HRESULT

  # Params # rclsid : Guid* [In],riid : Guid* [In],ppvdebug : Void** [In]
  fun D3D12GetInterface(rclsid : Guid*, riid : Guid*, ppvdebug : Void**) : HRESULT
end
struct LibWin32::ID3D12Object
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
end
struct LibWin32::ID3D12DeviceChild
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
end
struct LibWin32::ID3D12RootSignature
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
end
struct LibWin32::ID3D12RootSignatureDeserializer
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_root_signature_desc : D3D12_ROOT_SIGNATURE_DESC*
    @lpVtbl.value.get_root_signature_desc.unsafe_as(Proc(D3D12_ROOT_SIGNATURE_DESC**)).call
  end
end
struct LibWin32::ID3D12VersionedRootSignatureDeserializer
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_root_signature_desc_at_version(converttoversion : D3D_ROOT_SIGNATURE_VERSION, ppdesc : D3D12_VERSIONED_ROOT_SIGNATURE_DESC**) : HRESULT
    @lpVtbl.value.get_root_signature_desc_at_version.unsafe_as(Proc(D3D_ROOT_SIGNATURE_VERSION, D3D12_VERSIONED_ROOT_SIGNATURE_DESC**, HRESULT)).call(converttoversion, ppdesc)
  end
  def get_unconverted_root_signature_desc : D3D12_VERSIONED_ROOT_SIGNATURE_DESC*
    @lpVtbl.value.get_unconverted_root_signature_desc.unsafe_as(Proc(D3D12_VERSIONED_ROOT_SIGNATURE_DESC**)).call
  end
end
struct LibWin32::ID3D12Pageable
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
end
struct LibWin32::ID3D12Heap
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
  def get_desc : D3D12_HEAP_DESC
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D12_HEAP_DESC)).call
  end
end
struct LibWin32::ID3D12Resource
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
  def map(subresource : UInt32, preadrange : D3D12_RANGE*, ppdata : Void**) : HRESULT
    @lpVtbl.value.map.unsafe_as(Proc(UInt32, D3D12_RANGE*, Void**, HRESULT)).call(subresource, preadrange, ppdata)
  end
  def unmap(subresource : UInt32, pwrittenrange : D3D12_RANGE*) : Void
    @lpVtbl.value.unmap.unsafe_as(Proc(UInt32, D3D12_RANGE*, Void)).call(subresource, pwrittenrange)
  end
  def get_desc : D3D12_RESOURCE_DESC
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D12_RESOURCE_DESC)).call
  end
  def get_gpu_virtual_address : UInt64
    @lpVtbl.value.get_gpu_virtual_address.unsafe_as(Proc(UInt64)).call
  end
  def write_to_subresource(dstsubresource : UInt32, pdstbox : D3D12_BOX*, psrcdata : Void*, srcrowpitch : UInt32, srcdepthpitch : UInt32) : HRESULT
    @lpVtbl.value.write_to_subresource.unsafe_as(Proc(UInt32, D3D12_BOX*, Void*, UInt32, UInt32, HRESULT)).call(dstsubresource, pdstbox, psrcdata, srcrowpitch, srcdepthpitch)
  end
  def read_from_subresource(pdstdata : Void*, dstrowpitch : UInt32, dstdepthpitch : UInt32, srcsubresource : UInt32, psrcbox : D3D12_BOX*) : HRESULT
    @lpVtbl.value.read_from_subresource.unsafe_as(Proc(Void*, UInt32, UInt32, UInt32, D3D12_BOX*, HRESULT)).call(pdstdata, dstrowpitch, dstdepthpitch, srcsubresource, psrcbox)
  end
  def get_heap_properties(pheapproperties : D3D12_HEAP_PROPERTIES*, pheapflags : D3D12_HEAP_FLAGS*) : HRESULT
    @lpVtbl.value.get_heap_properties.unsafe_as(Proc(D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS*, HRESULT)).call(pheapproperties, pheapflags)
  end
end
struct LibWin32::ID3D12CommandAllocator
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
  def reset : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::ID3D12Fence
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
  def get_completed_value : UInt64
    @lpVtbl.value.get_completed_value.unsafe_as(Proc(UInt64)).call
  end
  def set_event_on_completion(value : UInt64, hevent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.set_event_on_completion.unsafe_as(Proc(UInt64, LibC::HANDLE, HRESULT)).call(value, hevent)
  end
  def signal(value : UInt64) : HRESULT
    @lpVtbl.value.signal.unsafe_as(Proc(UInt64, HRESULT)).call(value)
  end
end
struct LibWin32::ID3D12Fence1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
  def get_completed_value : UInt64
    @lpVtbl.value.get_completed_value.unsafe_as(Proc(UInt64)).call
  end
  def set_event_on_completion(value : UInt64, hevent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.set_event_on_completion.unsafe_as(Proc(UInt64, LibC::HANDLE, HRESULT)).call(value, hevent)
  end
  def signal(value : UInt64) : HRESULT
    @lpVtbl.value.signal.unsafe_as(Proc(UInt64, HRESULT)).call(value)
  end
  def get_creation_flags : D3D12_FENCE_FLAGS
    @lpVtbl.value.get_creation_flags.unsafe_as(Proc(D3D12_FENCE_FLAGS)).call
  end
end
struct LibWin32::ID3D12PipelineState
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
  def get_cached_blob(ppblob : ID3DBlob*) : HRESULT
    @lpVtbl.value.get_cached_blob.unsafe_as(Proc(ID3DBlob*, HRESULT)).call(ppblob)
  end
end
struct LibWin32::ID3D12DescriptorHeap
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
  def get_desc : D3D12_DESCRIPTOR_HEAP_DESC
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D12_DESCRIPTOR_HEAP_DESC)).call
  end
  def get_cpu_descriptor_handle_for_heap_start : D3D12_CPU_DESCRIPTOR_HANDLE
    @lpVtbl.value.get_cpu_descriptor_handle_for_heap_start.unsafe_as(Proc(D3D12_CPU_DESCRIPTOR_HANDLE)).call
  end
  def get_gpu_descriptor_handle_for_heap_start : D3D12_GPU_DESCRIPTOR_HANDLE
    @lpVtbl.value.get_gpu_descriptor_handle_for_heap_start.unsafe_as(Proc(D3D12_GPU_DESCRIPTOR_HANDLE)).call
  end
end
struct LibWin32::ID3D12QueryHeap
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
end
struct LibWin32::ID3D12CommandSignature
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
end
struct LibWin32::ID3D12CommandList
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
  def get_type : D3D12_COMMAND_LIST_TYPE
    @lpVtbl.value.get_type.unsafe_as(Proc(D3D12_COMMAND_LIST_TYPE)).call
  end
end
struct LibWin32::ID3D12GraphicsCommandList
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
  def get_type : D3D12_COMMAND_LIST_TYPE
    @lpVtbl.value.get_type.unsafe_as(Proc(D3D12_COMMAND_LIST_TYPE)).call
  end
  def close : HRESULT
    @lpVtbl.value.close.unsafe_as(Proc(HRESULT)).call
  end
  def reset(pallocator : ID3D12CommandAllocator, pinitialstate : ID3D12PipelineState) : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(ID3D12CommandAllocator, ID3D12PipelineState, HRESULT)).call(pallocator, pinitialstate)
  end
  def clear_state(ppipelinestate : ID3D12PipelineState) : Void
    @lpVtbl.value.clear_state.unsafe_as(Proc(ID3D12PipelineState, Void)).call(ppipelinestate)
  end
  def draw_instanced(vertexcountperinstance : UInt32, instancecount : UInt32, startvertexlocation : UInt32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_instanced.unsafe_as(Proc(UInt32, UInt32, UInt32, UInt32, Void)).call(vertexcountperinstance, instancecount, startvertexlocation, startinstancelocation)
  end
  def draw_indexed_instanced(indexcountperinstance : UInt32, instancecount : UInt32, startindexlocation : UInt32, basevertexlocation : Int32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_indexed_instanced.unsafe_as(Proc(UInt32, UInt32, UInt32, Int32, UInt32, Void)).call(indexcountperinstance, instancecount, startindexlocation, basevertexlocation, startinstancelocation)
  end
  def dispatch(threadgroupcountx : UInt32, threadgroupcounty : UInt32, threadgroupcountz : UInt32) : Void
    @lpVtbl.value.dispatch.unsafe_as(Proc(UInt32, UInt32, UInt32, Void)).call(threadgroupcountx, threadgroupcounty, threadgroupcountz)
  end
  def copy_buffer_region(pdstbuffer : ID3D12Resource, dstoffset : UInt64, psrcbuffer : ID3D12Resource, srcoffset : UInt64, numbytes : UInt64) : Void
    @lpVtbl.value.copy_buffer_region.unsafe_as(Proc(ID3D12Resource, UInt64, ID3D12Resource, UInt64, UInt64, Void)).call(pdstbuffer, dstoffset, psrcbuffer, srcoffset, numbytes)
  end
  def copy_texture_region(pdst : D3D12_TEXTURE_COPY_LOCATION*, dstx : UInt32, dsty : UInt32, dstz : UInt32, psrc : D3D12_TEXTURE_COPY_LOCATION*, psrcbox : D3D12_BOX*) : Void
    @lpVtbl.value.copy_texture_region.unsafe_as(Proc(D3D12_TEXTURE_COPY_LOCATION*, UInt32, UInt32, UInt32, D3D12_TEXTURE_COPY_LOCATION*, D3D12_BOX*, Void)).call(pdst, dstx, dsty, dstz, psrc, psrcbox)
  end
  def copy_resource(pdstresource : ID3D12Resource, psrcresource : ID3D12Resource) : Void
    @lpVtbl.value.copy_resource.unsafe_as(Proc(ID3D12Resource, ID3D12Resource, Void)).call(pdstresource, psrcresource)
  end
  def copy_tiles(ptiledresource : ID3D12Resource, ptileregionstartcoordinate : D3D12_TILED_RESOURCE_COORDINATE*, ptileregionsize : D3D12_TILE_REGION_SIZE*, pbuffer : ID3D12Resource, bufferstartoffsetinbytes : UInt64, flags : D3D12_TILE_COPY_FLAGS) : Void
    @lpVtbl.value.copy_tiles.unsafe_as(Proc(ID3D12Resource, D3D12_TILED_RESOURCE_COORDINATE*, D3D12_TILE_REGION_SIZE*, ID3D12Resource, UInt64, D3D12_TILE_COPY_FLAGS, Void)).call(ptiledresource, ptileregionstartcoordinate, ptileregionsize, pbuffer, bufferstartoffsetinbytes, flags)
  end
  def resolve_subresource(pdstresource : ID3D12Resource, dstsubresource : UInt32, psrcresource : ID3D12Resource, srcsubresource : UInt32, format : DXGI_FORMAT) : Void
    @lpVtbl.value.resolve_subresource.unsafe_as(Proc(ID3D12Resource, UInt32, ID3D12Resource, UInt32, DXGI_FORMAT, Void)).call(pdstresource, dstsubresource, psrcresource, srcsubresource, format)
  end
  def ia_set_primitive_topology(primitivetopology : D3D_PRIMITIVE_TOPOLOGY) : Void
    @lpVtbl.value.ia_set_primitive_topology.unsafe_as(Proc(D3D_PRIMITIVE_TOPOLOGY, Void)).call(primitivetopology)
  end
  def rs_set_viewports(numviewports : UInt32, pviewports : D3D12_VIEWPORT*) : Void
    @lpVtbl.value.rs_set_viewports.unsafe_as(Proc(UInt32, D3D12_VIEWPORT*, Void)).call(numviewports, pviewports)
  end
  def rs_set_scissor_rects(numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.rs_set_scissor_rects.unsafe_as(Proc(UInt32, RECT*, Void)).call(numrects, prects)
  end
  def om_set_blend_factor(blendfactor : Float32*) : Void
    @lpVtbl.value.om_set_blend_factor.unsafe_as(Proc(Float32*, Void)).call(blendfactor)
  end
  def om_set_stencil_ref(stencilref : UInt32) : Void
    @lpVtbl.value.om_set_stencil_ref.unsafe_as(Proc(UInt32, Void)).call(stencilref)
  end
  def set_pipeline_state(ppipelinestate : ID3D12PipelineState) : Void
    @lpVtbl.value.set_pipeline_state.unsafe_as(Proc(ID3D12PipelineState, Void)).call(ppipelinestate)
  end
  def resource_barrier(numbarriers : UInt32, pbarriers : D3D12_RESOURCE_BARRIER*) : Void
    @lpVtbl.value.resource_barrier.unsafe_as(Proc(UInt32, D3D12_RESOURCE_BARRIER*, Void)).call(numbarriers, pbarriers)
  end
  def execute_bundle(pcommandlist : ID3D12GraphicsCommandList) : Void
    @lpVtbl.value.execute_bundle.unsafe_as(Proc(ID3D12GraphicsCommandList, Void)).call(pcommandlist)
  end
  def set_descriptor_heaps(numdescriptorheaps : UInt32, ppdescriptorheaps : ID3D12DescriptorHeap*) : Void
    @lpVtbl.value.set_descriptor_heaps.unsafe_as(Proc(UInt32, ID3D12DescriptorHeap*, Void)).call(numdescriptorheaps, ppdescriptorheaps)
  end
  def set_compute_root_signature(prootsignature : ID3D12RootSignature) : Void
    @lpVtbl.value.set_compute_root_signature.unsafe_as(Proc(ID3D12RootSignature, Void)).call(prootsignature)
  end
  def set_graphics_root_signature(prootsignature : ID3D12RootSignature) : Void
    @lpVtbl.value.set_graphics_root_signature.unsafe_as(Proc(ID3D12RootSignature, Void)).call(prootsignature)
  end
  def set_compute_root_descriptor_table(rootparameterindex : UInt32, basedescriptor : D3D12_GPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.set_compute_root_descriptor_table.unsafe_as(Proc(UInt32, D3D12_GPU_DESCRIPTOR_HANDLE, Void)).call(rootparameterindex, basedescriptor)
  end
  def set_graphics_root_descriptor_table(rootparameterindex : UInt32, basedescriptor : D3D12_GPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.set_graphics_root_descriptor_table.unsafe_as(Proc(UInt32, D3D12_GPU_DESCRIPTOR_HANDLE, Void)).call(rootparameterindex, basedescriptor)
  end
  def set_compute_root32_bit_constant(rootparameterindex : UInt32, srcdata : UInt32, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_compute_root32_bit_constant.unsafe_as(Proc(UInt32, UInt32, UInt32, Void)).call(rootparameterindex, srcdata, destoffsetin32bitvalues)
  end
  def set_graphics_root32_bit_constant(rootparameterindex : UInt32, srcdata : UInt32, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_graphics_root32_bit_constant.unsafe_as(Proc(UInt32, UInt32, UInt32, Void)).call(rootparameterindex, srcdata, destoffsetin32bitvalues)
  end
  def set_compute_root32_bit_constants(rootparameterindex : UInt32, num32bitvaluestoset : UInt32, psrcdata : Void*, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_compute_root32_bit_constants.unsafe_as(Proc(UInt32, UInt32, Void*, UInt32, Void)).call(rootparameterindex, num32bitvaluestoset, psrcdata, destoffsetin32bitvalues)
  end
  def set_graphics_root32_bit_constants(rootparameterindex : UInt32, num32bitvaluestoset : UInt32, psrcdata : Void*, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_graphics_root32_bit_constants.unsafe_as(Proc(UInt32, UInt32, Void*, UInt32, Void)).call(rootparameterindex, num32bitvaluestoset, psrcdata, destoffsetin32bitvalues)
  end
  def set_compute_root_constant_buffer_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_compute_root_constant_buffer_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_graphics_root_constant_buffer_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_graphics_root_constant_buffer_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_compute_root_shader_resource_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_compute_root_shader_resource_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_graphics_root_shader_resource_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_graphics_root_shader_resource_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_compute_root_unordered_access_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_compute_root_unordered_access_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_graphics_root_unordered_access_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_graphics_root_unordered_access_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def ia_set_index_buffer(pview : D3D12_INDEX_BUFFER_VIEW*) : Void
    @lpVtbl.value.ia_set_index_buffer.unsafe_as(Proc(D3D12_INDEX_BUFFER_VIEW*, Void)).call(pview)
  end
  def ia_set_vertex_buffers(startslot : UInt32, numviews : UInt32, pviews : D3D12_VERTEX_BUFFER_VIEW*) : Void
    @lpVtbl.value.ia_set_vertex_buffers.unsafe_as(Proc(UInt32, UInt32, D3D12_VERTEX_BUFFER_VIEW*, Void)).call(startslot, numviews, pviews)
  end
  def so_set_targets(startslot : UInt32, numviews : UInt32, pviews : D3D12_STREAM_OUTPUT_BUFFER_VIEW*) : Void
    @lpVtbl.value.so_set_targets.unsafe_as(Proc(UInt32, UInt32, D3D12_STREAM_OUTPUT_BUFFER_VIEW*, Void)).call(startslot, numviews, pviews)
  end
  def om_set_render_targets(numrendertargetdescriptors : UInt32, prendertargetdescriptors : D3D12_CPU_DESCRIPTOR_HANDLE*, rtssinglehandletodescriptorrange : LibC::BOOL, pdepthstencildescriptor : D3D12_CPU_DESCRIPTOR_HANDLE*) : Void
    @lpVtbl.value.om_set_render_targets.unsafe_as(Proc(UInt32, D3D12_CPU_DESCRIPTOR_HANDLE*, LibC::BOOL, D3D12_CPU_DESCRIPTOR_HANDLE*, Void)).call(numrendertargetdescriptors, prendertargetdescriptors, rtssinglehandletodescriptorrange, pdepthstencildescriptor)
  end
  def clear_depth_stencil_view(depthstencilview : D3D12_CPU_DESCRIPTOR_HANDLE, clearflags : D3D12_CLEAR_FLAGS, depth : Float32, stencil : UInt8, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_depth_stencil_view.unsafe_as(Proc(D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_CLEAR_FLAGS, Float32, UInt8, UInt32, RECT*, Void)).call(depthstencilview, clearflags, depth, stencil, numrects, prects)
  end
  def clear_render_target_view(rendertargetview : D3D12_CPU_DESCRIPTOR_HANDLE, colorrgba : Float32*, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_render_target_view.unsafe_as(Proc(D3D12_CPU_DESCRIPTOR_HANDLE, Float32*, UInt32, RECT*, Void)).call(rendertargetview, colorrgba, numrects, prects)
  end
  def clear_unordered_access_view_uint(viewgpuhandleincurrentheap : D3D12_GPU_DESCRIPTOR_HANDLE, viewcpuhandle : D3D12_CPU_DESCRIPTOR_HANDLE, presource : ID3D12Resource, values : UInt32*, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_unordered_access_view_uint.unsafe_as(Proc(D3D12_GPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, ID3D12Resource, UInt32*, UInt32, RECT*, Void)).call(viewgpuhandleincurrentheap, viewcpuhandle, presource, values, numrects, prects)
  end
  def clear_unordered_access_view_float(viewgpuhandleincurrentheap : D3D12_GPU_DESCRIPTOR_HANDLE, viewcpuhandle : D3D12_CPU_DESCRIPTOR_HANDLE, presource : ID3D12Resource, values : Float32*, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_unordered_access_view_float.unsafe_as(Proc(D3D12_GPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, ID3D12Resource, Float32*, UInt32, RECT*, Void)).call(viewgpuhandleincurrentheap, viewcpuhandle, presource, values, numrects, prects)
  end
  def discard_resource(presource : ID3D12Resource, pregion : D3D12_DISCARD_REGION*) : Void
    @lpVtbl.value.discard_resource.unsafe_as(Proc(ID3D12Resource, D3D12_DISCARD_REGION*, Void)).call(presource, pregion)
  end
  def begin_query(pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.begin_query.unsafe_as(Proc(ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)).call(pqueryheap, type, index)
  end
  def end_query(pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.end_query.unsafe_as(Proc(ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)).call(pqueryheap, type, index)
  end
  def resolve_query_data(pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, startindex : UInt32, numqueries : UInt32, pdestinationbuffer : ID3D12Resource, aligneddestinationbufferoffset : UInt64) : Void
    @lpVtbl.value.resolve_query_data.unsafe_as(Proc(ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, UInt32, ID3D12Resource, UInt64, Void)).call(pqueryheap, type, startindex, numqueries, pdestinationbuffer, aligneddestinationbufferoffset)
  end
  def set_predication(pbuffer : ID3D12Resource, alignedbufferoffset : UInt64, operation : D3D12_PREDICATION_OP) : Void
    @lpVtbl.value.set_predication.unsafe_as(Proc(ID3D12Resource, UInt64, D3D12_PREDICATION_OP, Void)).call(pbuffer, alignedbufferoffset, operation)
  end
  def set_marker(metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.set_marker.unsafe_as(Proc(UInt32, Void*, UInt32, Void)).call(metadata, pdata, size)
  end
  def begin_event(metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.begin_event.unsafe_as(Proc(UInt32, Void*, UInt32, Void)).call(metadata, pdata, size)
  end
  def end_event : Void
    @lpVtbl.value.end_event.unsafe_as(Proc(Void)).call
  end
  def execute_indirect(pcommandsignature : ID3D12CommandSignature, maxcommandcount : UInt32, pargumentbuffer : ID3D12Resource, argumentbufferoffset : UInt64, pcountbuffer : ID3D12Resource, countbufferoffset : UInt64) : Void
    @lpVtbl.value.execute_indirect.unsafe_as(Proc(ID3D12CommandSignature, UInt32, ID3D12Resource, UInt64, ID3D12Resource, UInt64, Void)).call(pcommandsignature, maxcommandcount, pargumentbuffer, argumentbufferoffset, pcountbuffer, countbufferoffset)
  end
end
struct LibWin32::ID3D12GraphicsCommandList1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
  def get_type : D3D12_COMMAND_LIST_TYPE
    @lpVtbl.value.get_type.unsafe_as(Proc(D3D12_COMMAND_LIST_TYPE)).call
  end
  def close : HRESULT
    @lpVtbl.value.close.unsafe_as(Proc(HRESULT)).call
  end
  def reset(pallocator : ID3D12CommandAllocator, pinitialstate : ID3D12PipelineState) : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(ID3D12CommandAllocator, ID3D12PipelineState, HRESULT)).call(pallocator, pinitialstate)
  end
  def clear_state(ppipelinestate : ID3D12PipelineState) : Void
    @lpVtbl.value.clear_state.unsafe_as(Proc(ID3D12PipelineState, Void)).call(ppipelinestate)
  end
  def draw_instanced(vertexcountperinstance : UInt32, instancecount : UInt32, startvertexlocation : UInt32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_instanced.unsafe_as(Proc(UInt32, UInt32, UInt32, UInt32, Void)).call(vertexcountperinstance, instancecount, startvertexlocation, startinstancelocation)
  end
  def draw_indexed_instanced(indexcountperinstance : UInt32, instancecount : UInt32, startindexlocation : UInt32, basevertexlocation : Int32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_indexed_instanced.unsafe_as(Proc(UInt32, UInt32, UInt32, Int32, UInt32, Void)).call(indexcountperinstance, instancecount, startindexlocation, basevertexlocation, startinstancelocation)
  end
  def dispatch(threadgroupcountx : UInt32, threadgroupcounty : UInt32, threadgroupcountz : UInt32) : Void
    @lpVtbl.value.dispatch.unsafe_as(Proc(UInt32, UInt32, UInt32, Void)).call(threadgroupcountx, threadgroupcounty, threadgroupcountz)
  end
  def copy_buffer_region(pdstbuffer : ID3D12Resource, dstoffset : UInt64, psrcbuffer : ID3D12Resource, srcoffset : UInt64, numbytes : UInt64) : Void
    @lpVtbl.value.copy_buffer_region.unsafe_as(Proc(ID3D12Resource, UInt64, ID3D12Resource, UInt64, UInt64, Void)).call(pdstbuffer, dstoffset, psrcbuffer, srcoffset, numbytes)
  end
  def copy_texture_region(pdst : D3D12_TEXTURE_COPY_LOCATION*, dstx : UInt32, dsty : UInt32, dstz : UInt32, psrc : D3D12_TEXTURE_COPY_LOCATION*, psrcbox : D3D12_BOX*) : Void
    @lpVtbl.value.copy_texture_region.unsafe_as(Proc(D3D12_TEXTURE_COPY_LOCATION*, UInt32, UInt32, UInt32, D3D12_TEXTURE_COPY_LOCATION*, D3D12_BOX*, Void)).call(pdst, dstx, dsty, dstz, psrc, psrcbox)
  end
  def copy_resource(pdstresource : ID3D12Resource, psrcresource : ID3D12Resource) : Void
    @lpVtbl.value.copy_resource.unsafe_as(Proc(ID3D12Resource, ID3D12Resource, Void)).call(pdstresource, psrcresource)
  end
  def copy_tiles(ptiledresource : ID3D12Resource, ptileregionstartcoordinate : D3D12_TILED_RESOURCE_COORDINATE*, ptileregionsize : D3D12_TILE_REGION_SIZE*, pbuffer : ID3D12Resource, bufferstartoffsetinbytes : UInt64, flags : D3D12_TILE_COPY_FLAGS) : Void
    @lpVtbl.value.copy_tiles.unsafe_as(Proc(ID3D12Resource, D3D12_TILED_RESOURCE_COORDINATE*, D3D12_TILE_REGION_SIZE*, ID3D12Resource, UInt64, D3D12_TILE_COPY_FLAGS, Void)).call(ptiledresource, ptileregionstartcoordinate, ptileregionsize, pbuffer, bufferstartoffsetinbytes, flags)
  end
  def resolve_subresource(pdstresource : ID3D12Resource, dstsubresource : UInt32, psrcresource : ID3D12Resource, srcsubresource : UInt32, format : DXGI_FORMAT) : Void
    @lpVtbl.value.resolve_subresource.unsafe_as(Proc(ID3D12Resource, UInt32, ID3D12Resource, UInt32, DXGI_FORMAT, Void)).call(pdstresource, dstsubresource, psrcresource, srcsubresource, format)
  end
  def ia_set_primitive_topology(primitivetopology : D3D_PRIMITIVE_TOPOLOGY) : Void
    @lpVtbl.value.ia_set_primitive_topology.unsafe_as(Proc(D3D_PRIMITIVE_TOPOLOGY, Void)).call(primitivetopology)
  end
  def rs_set_viewports(numviewports : UInt32, pviewports : D3D12_VIEWPORT*) : Void
    @lpVtbl.value.rs_set_viewports.unsafe_as(Proc(UInt32, D3D12_VIEWPORT*, Void)).call(numviewports, pviewports)
  end
  def rs_set_scissor_rects(numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.rs_set_scissor_rects.unsafe_as(Proc(UInt32, RECT*, Void)).call(numrects, prects)
  end
  def om_set_blend_factor(blendfactor : Float32*) : Void
    @lpVtbl.value.om_set_blend_factor.unsafe_as(Proc(Float32*, Void)).call(blendfactor)
  end
  def om_set_stencil_ref(stencilref : UInt32) : Void
    @lpVtbl.value.om_set_stencil_ref.unsafe_as(Proc(UInt32, Void)).call(stencilref)
  end
  def set_pipeline_state(ppipelinestate : ID3D12PipelineState) : Void
    @lpVtbl.value.set_pipeline_state.unsafe_as(Proc(ID3D12PipelineState, Void)).call(ppipelinestate)
  end
  def resource_barrier(numbarriers : UInt32, pbarriers : D3D12_RESOURCE_BARRIER*) : Void
    @lpVtbl.value.resource_barrier.unsafe_as(Proc(UInt32, D3D12_RESOURCE_BARRIER*, Void)).call(numbarriers, pbarriers)
  end
  def execute_bundle(pcommandlist : ID3D12GraphicsCommandList) : Void
    @lpVtbl.value.execute_bundle.unsafe_as(Proc(ID3D12GraphicsCommandList, Void)).call(pcommandlist)
  end
  def set_descriptor_heaps(numdescriptorheaps : UInt32, ppdescriptorheaps : ID3D12DescriptorHeap*) : Void
    @lpVtbl.value.set_descriptor_heaps.unsafe_as(Proc(UInt32, ID3D12DescriptorHeap*, Void)).call(numdescriptorheaps, ppdescriptorheaps)
  end
  def set_compute_root_signature(prootsignature : ID3D12RootSignature) : Void
    @lpVtbl.value.set_compute_root_signature.unsafe_as(Proc(ID3D12RootSignature, Void)).call(prootsignature)
  end
  def set_graphics_root_signature(prootsignature : ID3D12RootSignature) : Void
    @lpVtbl.value.set_graphics_root_signature.unsafe_as(Proc(ID3D12RootSignature, Void)).call(prootsignature)
  end
  def set_compute_root_descriptor_table(rootparameterindex : UInt32, basedescriptor : D3D12_GPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.set_compute_root_descriptor_table.unsafe_as(Proc(UInt32, D3D12_GPU_DESCRIPTOR_HANDLE, Void)).call(rootparameterindex, basedescriptor)
  end
  def set_graphics_root_descriptor_table(rootparameterindex : UInt32, basedescriptor : D3D12_GPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.set_graphics_root_descriptor_table.unsafe_as(Proc(UInt32, D3D12_GPU_DESCRIPTOR_HANDLE, Void)).call(rootparameterindex, basedescriptor)
  end
  def set_compute_root32_bit_constant(rootparameterindex : UInt32, srcdata : UInt32, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_compute_root32_bit_constant.unsafe_as(Proc(UInt32, UInt32, UInt32, Void)).call(rootparameterindex, srcdata, destoffsetin32bitvalues)
  end
  def set_graphics_root32_bit_constant(rootparameterindex : UInt32, srcdata : UInt32, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_graphics_root32_bit_constant.unsafe_as(Proc(UInt32, UInt32, UInt32, Void)).call(rootparameterindex, srcdata, destoffsetin32bitvalues)
  end
  def set_compute_root32_bit_constants(rootparameterindex : UInt32, num32bitvaluestoset : UInt32, psrcdata : Void*, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_compute_root32_bit_constants.unsafe_as(Proc(UInt32, UInt32, Void*, UInt32, Void)).call(rootparameterindex, num32bitvaluestoset, psrcdata, destoffsetin32bitvalues)
  end
  def set_graphics_root32_bit_constants(rootparameterindex : UInt32, num32bitvaluestoset : UInt32, psrcdata : Void*, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_graphics_root32_bit_constants.unsafe_as(Proc(UInt32, UInt32, Void*, UInt32, Void)).call(rootparameterindex, num32bitvaluestoset, psrcdata, destoffsetin32bitvalues)
  end
  def set_compute_root_constant_buffer_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_compute_root_constant_buffer_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_graphics_root_constant_buffer_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_graphics_root_constant_buffer_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_compute_root_shader_resource_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_compute_root_shader_resource_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_graphics_root_shader_resource_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_graphics_root_shader_resource_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_compute_root_unordered_access_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_compute_root_unordered_access_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_graphics_root_unordered_access_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_graphics_root_unordered_access_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def ia_set_index_buffer(pview : D3D12_INDEX_BUFFER_VIEW*) : Void
    @lpVtbl.value.ia_set_index_buffer.unsafe_as(Proc(D3D12_INDEX_BUFFER_VIEW*, Void)).call(pview)
  end
  def ia_set_vertex_buffers(startslot : UInt32, numviews : UInt32, pviews : D3D12_VERTEX_BUFFER_VIEW*) : Void
    @lpVtbl.value.ia_set_vertex_buffers.unsafe_as(Proc(UInt32, UInt32, D3D12_VERTEX_BUFFER_VIEW*, Void)).call(startslot, numviews, pviews)
  end
  def so_set_targets(startslot : UInt32, numviews : UInt32, pviews : D3D12_STREAM_OUTPUT_BUFFER_VIEW*) : Void
    @lpVtbl.value.so_set_targets.unsafe_as(Proc(UInt32, UInt32, D3D12_STREAM_OUTPUT_BUFFER_VIEW*, Void)).call(startslot, numviews, pviews)
  end
  def om_set_render_targets(numrendertargetdescriptors : UInt32, prendertargetdescriptors : D3D12_CPU_DESCRIPTOR_HANDLE*, rtssinglehandletodescriptorrange : LibC::BOOL, pdepthstencildescriptor : D3D12_CPU_DESCRIPTOR_HANDLE*) : Void
    @lpVtbl.value.om_set_render_targets.unsafe_as(Proc(UInt32, D3D12_CPU_DESCRIPTOR_HANDLE*, LibC::BOOL, D3D12_CPU_DESCRIPTOR_HANDLE*, Void)).call(numrendertargetdescriptors, prendertargetdescriptors, rtssinglehandletodescriptorrange, pdepthstencildescriptor)
  end
  def clear_depth_stencil_view(depthstencilview : D3D12_CPU_DESCRIPTOR_HANDLE, clearflags : D3D12_CLEAR_FLAGS, depth : Float32, stencil : UInt8, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_depth_stencil_view.unsafe_as(Proc(D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_CLEAR_FLAGS, Float32, UInt8, UInt32, RECT*, Void)).call(depthstencilview, clearflags, depth, stencil, numrects, prects)
  end
  def clear_render_target_view(rendertargetview : D3D12_CPU_DESCRIPTOR_HANDLE, colorrgba : Float32*, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_render_target_view.unsafe_as(Proc(D3D12_CPU_DESCRIPTOR_HANDLE, Float32*, UInt32, RECT*, Void)).call(rendertargetview, colorrgba, numrects, prects)
  end
  def clear_unordered_access_view_uint(viewgpuhandleincurrentheap : D3D12_GPU_DESCRIPTOR_HANDLE, viewcpuhandle : D3D12_CPU_DESCRIPTOR_HANDLE, presource : ID3D12Resource, values : UInt32*, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_unordered_access_view_uint.unsafe_as(Proc(D3D12_GPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, ID3D12Resource, UInt32*, UInt32, RECT*, Void)).call(viewgpuhandleincurrentheap, viewcpuhandle, presource, values, numrects, prects)
  end
  def clear_unordered_access_view_float(viewgpuhandleincurrentheap : D3D12_GPU_DESCRIPTOR_HANDLE, viewcpuhandle : D3D12_CPU_DESCRIPTOR_HANDLE, presource : ID3D12Resource, values : Float32*, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_unordered_access_view_float.unsafe_as(Proc(D3D12_GPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, ID3D12Resource, Float32*, UInt32, RECT*, Void)).call(viewgpuhandleincurrentheap, viewcpuhandle, presource, values, numrects, prects)
  end
  def discard_resource(presource : ID3D12Resource, pregion : D3D12_DISCARD_REGION*) : Void
    @lpVtbl.value.discard_resource.unsafe_as(Proc(ID3D12Resource, D3D12_DISCARD_REGION*, Void)).call(presource, pregion)
  end
  def begin_query(pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.begin_query.unsafe_as(Proc(ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)).call(pqueryheap, type, index)
  end
  def end_query(pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.end_query.unsafe_as(Proc(ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)).call(pqueryheap, type, index)
  end
  def resolve_query_data(pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, startindex : UInt32, numqueries : UInt32, pdestinationbuffer : ID3D12Resource, aligneddestinationbufferoffset : UInt64) : Void
    @lpVtbl.value.resolve_query_data.unsafe_as(Proc(ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, UInt32, ID3D12Resource, UInt64, Void)).call(pqueryheap, type, startindex, numqueries, pdestinationbuffer, aligneddestinationbufferoffset)
  end
  def set_predication(pbuffer : ID3D12Resource, alignedbufferoffset : UInt64, operation : D3D12_PREDICATION_OP) : Void
    @lpVtbl.value.set_predication.unsafe_as(Proc(ID3D12Resource, UInt64, D3D12_PREDICATION_OP, Void)).call(pbuffer, alignedbufferoffset, operation)
  end
  def set_marker(metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.set_marker.unsafe_as(Proc(UInt32, Void*, UInt32, Void)).call(metadata, pdata, size)
  end
  def begin_event(metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.begin_event.unsafe_as(Proc(UInt32, Void*, UInt32, Void)).call(metadata, pdata, size)
  end
  def end_event : Void
    @lpVtbl.value.end_event.unsafe_as(Proc(Void)).call
  end
  def execute_indirect(pcommandsignature : ID3D12CommandSignature, maxcommandcount : UInt32, pargumentbuffer : ID3D12Resource, argumentbufferoffset : UInt64, pcountbuffer : ID3D12Resource, countbufferoffset : UInt64) : Void
    @lpVtbl.value.execute_indirect.unsafe_as(Proc(ID3D12CommandSignature, UInt32, ID3D12Resource, UInt64, ID3D12Resource, UInt64, Void)).call(pcommandsignature, maxcommandcount, pargumentbuffer, argumentbufferoffset, pcountbuffer, countbufferoffset)
  end
  def atomic_copy_buffer_uint(pdstbuffer : ID3D12Resource, dstoffset : UInt64, psrcbuffer : ID3D12Resource, srcoffset : UInt64, dependencies : UInt32, ppdependentresources : ID3D12Resource*, pdependentsubresourceranges : D3D12_SUBRESOURCE_RANGE_UINT64*) : Void
    @lpVtbl.value.atomic_copy_buffer_uint.unsafe_as(Proc(ID3D12Resource, UInt64, ID3D12Resource, UInt64, UInt32, ID3D12Resource*, D3D12_SUBRESOURCE_RANGE_UINT64*, Void)).call(pdstbuffer, dstoffset, psrcbuffer, srcoffset, dependencies, ppdependentresources, pdependentsubresourceranges)
  end
  def atomic_copy_buffer_uint64(pdstbuffer : ID3D12Resource, dstoffset : UInt64, psrcbuffer : ID3D12Resource, srcoffset : UInt64, dependencies : UInt32, ppdependentresources : ID3D12Resource*, pdependentsubresourceranges : D3D12_SUBRESOURCE_RANGE_UINT64*) : Void
    @lpVtbl.value.atomic_copy_buffer_uint64.unsafe_as(Proc(ID3D12Resource, UInt64, ID3D12Resource, UInt64, UInt32, ID3D12Resource*, D3D12_SUBRESOURCE_RANGE_UINT64*, Void)).call(pdstbuffer, dstoffset, psrcbuffer, srcoffset, dependencies, ppdependentresources, pdependentsubresourceranges)
  end
  def om_set_depth_bounds(min : Float32, max : Float32) : Void
    @lpVtbl.value.om_set_depth_bounds.unsafe_as(Proc(Float32, Float32, Void)).call(min, max)
  end
  def set_sample_positions(numsamplesperpixel : UInt32, numpixels : UInt32, psamplepositions : D3D12_SAMPLE_POSITION*) : Void
    @lpVtbl.value.set_sample_positions.unsafe_as(Proc(UInt32, UInt32, D3D12_SAMPLE_POSITION*, Void)).call(numsamplesperpixel, numpixels, psamplepositions)
  end
  def resolve_subresource_region(pdstresource : ID3D12Resource, dstsubresource : UInt32, dstx : UInt32, dsty : UInt32, psrcresource : ID3D12Resource, srcsubresource : UInt32, psrcrect : RECT*, format : DXGI_FORMAT, resolvemode : D3D12_RESOLVE_MODE) : Void
    @lpVtbl.value.resolve_subresource_region.unsafe_as(Proc(ID3D12Resource, UInt32, UInt32, UInt32, ID3D12Resource, UInt32, RECT*, DXGI_FORMAT, D3D12_RESOLVE_MODE, Void)).call(pdstresource, dstsubresource, dstx, dsty, psrcresource, srcsubresource, psrcrect, format, resolvemode)
  end
  def set_view_instance_mask(mask : UInt32) : Void
    @lpVtbl.value.set_view_instance_mask.unsafe_as(Proc(UInt32, Void)).call(mask)
  end
end
struct LibWin32::ID3D12GraphicsCommandList2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
  def get_type : D3D12_COMMAND_LIST_TYPE
    @lpVtbl.value.get_type.unsafe_as(Proc(D3D12_COMMAND_LIST_TYPE)).call
  end
  def close : HRESULT
    @lpVtbl.value.close.unsafe_as(Proc(HRESULT)).call
  end
  def reset(pallocator : ID3D12CommandAllocator, pinitialstate : ID3D12PipelineState) : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(ID3D12CommandAllocator, ID3D12PipelineState, HRESULT)).call(pallocator, pinitialstate)
  end
  def clear_state(ppipelinestate : ID3D12PipelineState) : Void
    @lpVtbl.value.clear_state.unsafe_as(Proc(ID3D12PipelineState, Void)).call(ppipelinestate)
  end
  def draw_instanced(vertexcountperinstance : UInt32, instancecount : UInt32, startvertexlocation : UInt32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_instanced.unsafe_as(Proc(UInt32, UInt32, UInt32, UInt32, Void)).call(vertexcountperinstance, instancecount, startvertexlocation, startinstancelocation)
  end
  def draw_indexed_instanced(indexcountperinstance : UInt32, instancecount : UInt32, startindexlocation : UInt32, basevertexlocation : Int32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_indexed_instanced.unsafe_as(Proc(UInt32, UInt32, UInt32, Int32, UInt32, Void)).call(indexcountperinstance, instancecount, startindexlocation, basevertexlocation, startinstancelocation)
  end
  def dispatch(threadgroupcountx : UInt32, threadgroupcounty : UInt32, threadgroupcountz : UInt32) : Void
    @lpVtbl.value.dispatch.unsafe_as(Proc(UInt32, UInt32, UInt32, Void)).call(threadgroupcountx, threadgroupcounty, threadgroupcountz)
  end
  def copy_buffer_region(pdstbuffer : ID3D12Resource, dstoffset : UInt64, psrcbuffer : ID3D12Resource, srcoffset : UInt64, numbytes : UInt64) : Void
    @lpVtbl.value.copy_buffer_region.unsafe_as(Proc(ID3D12Resource, UInt64, ID3D12Resource, UInt64, UInt64, Void)).call(pdstbuffer, dstoffset, psrcbuffer, srcoffset, numbytes)
  end
  def copy_texture_region(pdst : D3D12_TEXTURE_COPY_LOCATION*, dstx : UInt32, dsty : UInt32, dstz : UInt32, psrc : D3D12_TEXTURE_COPY_LOCATION*, psrcbox : D3D12_BOX*) : Void
    @lpVtbl.value.copy_texture_region.unsafe_as(Proc(D3D12_TEXTURE_COPY_LOCATION*, UInt32, UInt32, UInt32, D3D12_TEXTURE_COPY_LOCATION*, D3D12_BOX*, Void)).call(pdst, dstx, dsty, dstz, psrc, psrcbox)
  end
  def copy_resource(pdstresource : ID3D12Resource, psrcresource : ID3D12Resource) : Void
    @lpVtbl.value.copy_resource.unsafe_as(Proc(ID3D12Resource, ID3D12Resource, Void)).call(pdstresource, psrcresource)
  end
  def copy_tiles(ptiledresource : ID3D12Resource, ptileregionstartcoordinate : D3D12_TILED_RESOURCE_COORDINATE*, ptileregionsize : D3D12_TILE_REGION_SIZE*, pbuffer : ID3D12Resource, bufferstartoffsetinbytes : UInt64, flags : D3D12_TILE_COPY_FLAGS) : Void
    @lpVtbl.value.copy_tiles.unsafe_as(Proc(ID3D12Resource, D3D12_TILED_RESOURCE_COORDINATE*, D3D12_TILE_REGION_SIZE*, ID3D12Resource, UInt64, D3D12_TILE_COPY_FLAGS, Void)).call(ptiledresource, ptileregionstartcoordinate, ptileregionsize, pbuffer, bufferstartoffsetinbytes, flags)
  end
  def resolve_subresource(pdstresource : ID3D12Resource, dstsubresource : UInt32, psrcresource : ID3D12Resource, srcsubresource : UInt32, format : DXGI_FORMAT) : Void
    @lpVtbl.value.resolve_subresource.unsafe_as(Proc(ID3D12Resource, UInt32, ID3D12Resource, UInt32, DXGI_FORMAT, Void)).call(pdstresource, dstsubresource, psrcresource, srcsubresource, format)
  end
  def ia_set_primitive_topology(primitivetopology : D3D_PRIMITIVE_TOPOLOGY) : Void
    @lpVtbl.value.ia_set_primitive_topology.unsafe_as(Proc(D3D_PRIMITIVE_TOPOLOGY, Void)).call(primitivetopology)
  end
  def rs_set_viewports(numviewports : UInt32, pviewports : D3D12_VIEWPORT*) : Void
    @lpVtbl.value.rs_set_viewports.unsafe_as(Proc(UInt32, D3D12_VIEWPORT*, Void)).call(numviewports, pviewports)
  end
  def rs_set_scissor_rects(numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.rs_set_scissor_rects.unsafe_as(Proc(UInt32, RECT*, Void)).call(numrects, prects)
  end
  def om_set_blend_factor(blendfactor : Float32*) : Void
    @lpVtbl.value.om_set_blend_factor.unsafe_as(Proc(Float32*, Void)).call(blendfactor)
  end
  def om_set_stencil_ref(stencilref : UInt32) : Void
    @lpVtbl.value.om_set_stencil_ref.unsafe_as(Proc(UInt32, Void)).call(stencilref)
  end
  def set_pipeline_state(ppipelinestate : ID3D12PipelineState) : Void
    @lpVtbl.value.set_pipeline_state.unsafe_as(Proc(ID3D12PipelineState, Void)).call(ppipelinestate)
  end
  def resource_barrier(numbarriers : UInt32, pbarriers : D3D12_RESOURCE_BARRIER*) : Void
    @lpVtbl.value.resource_barrier.unsafe_as(Proc(UInt32, D3D12_RESOURCE_BARRIER*, Void)).call(numbarriers, pbarriers)
  end
  def execute_bundle(pcommandlist : ID3D12GraphicsCommandList) : Void
    @lpVtbl.value.execute_bundle.unsafe_as(Proc(ID3D12GraphicsCommandList, Void)).call(pcommandlist)
  end
  def set_descriptor_heaps(numdescriptorheaps : UInt32, ppdescriptorheaps : ID3D12DescriptorHeap*) : Void
    @lpVtbl.value.set_descriptor_heaps.unsafe_as(Proc(UInt32, ID3D12DescriptorHeap*, Void)).call(numdescriptorheaps, ppdescriptorheaps)
  end
  def set_compute_root_signature(prootsignature : ID3D12RootSignature) : Void
    @lpVtbl.value.set_compute_root_signature.unsafe_as(Proc(ID3D12RootSignature, Void)).call(prootsignature)
  end
  def set_graphics_root_signature(prootsignature : ID3D12RootSignature) : Void
    @lpVtbl.value.set_graphics_root_signature.unsafe_as(Proc(ID3D12RootSignature, Void)).call(prootsignature)
  end
  def set_compute_root_descriptor_table(rootparameterindex : UInt32, basedescriptor : D3D12_GPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.set_compute_root_descriptor_table.unsafe_as(Proc(UInt32, D3D12_GPU_DESCRIPTOR_HANDLE, Void)).call(rootparameterindex, basedescriptor)
  end
  def set_graphics_root_descriptor_table(rootparameterindex : UInt32, basedescriptor : D3D12_GPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.set_graphics_root_descriptor_table.unsafe_as(Proc(UInt32, D3D12_GPU_DESCRIPTOR_HANDLE, Void)).call(rootparameterindex, basedescriptor)
  end
  def set_compute_root32_bit_constant(rootparameterindex : UInt32, srcdata : UInt32, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_compute_root32_bit_constant.unsafe_as(Proc(UInt32, UInt32, UInt32, Void)).call(rootparameterindex, srcdata, destoffsetin32bitvalues)
  end
  def set_graphics_root32_bit_constant(rootparameterindex : UInt32, srcdata : UInt32, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_graphics_root32_bit_constant.unsafe_as(Proc(UInt32, UInt32, UInt32, Void)).call(rootparameterindex, srcdata, destoffsetin32bitvalues)
  end
  def set_compute_root32_bit_constants(rootparameterindex : UInt32, num32bitvaluestoset : UInt32, psrcdata : Void*, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_compute_root32_bit_constants.unsafe_as(Proc(UInt32, UInt32, Void*, UInt32, Void)).call(rootparameterindex, num32bitvaluestoset, psrcdata, destoffsetin32bitvalues)
  end
  def set_graphics_root32_bit_constants(rootparameterindex : UInt32, num32bitvaluestoset : UInt32, psrcdata : Void*, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_graphics_root32_bit_constants.unsafe_as(Proc(UInt32, UInt32, Void*, UInt32, Void)).call(rootparameterindex, num32bitvaluestoset, psrcdata, destoffsetin32bitvalues)
  end
  def set_compute_root_constant_buffer_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_compute_root_constant_buffer_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_graphics_root_constant_buffer_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_graphics_root_constant_buffer_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_compute_root_shader_resource_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_compute_root_shader_resource_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_graphics_root_shader_resource_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_graphics_root_shader_resource_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_compute_root_unordered_access_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_compute_root_unordered_access_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_graphics_root_unordered_access_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_graphics_root_unordered_access_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def ia_set_index_buffer(pview : D3D12_INDEX_BUFFER_VIEW*) : Void
    @lpVtbl.value.ia_set_index_buffer.unsafe_as(Proc(D3D12_INDEX_BUFFER_VIEW*, Void)).call(pview)
  end
  def ia_set_vertex_buffers(startslot : UInt32, numviews : UInt32, pviews : D3D12_VERTEX_BUFFER_VIEW*) : Void
    @lpVtbl.value.ia_set_vertex_buffers.unsafe_as(Proc(UInt32, UInt32, D3D12_VERTEX_BUFFER_VIEW*, Void)).call(startslot, numviews, pviews)
  end
  def so_set_targets(startslot : UInt32, numviews : UInt32, pviews : D3D12_STREAM_OUTPUT_BUFFER_VIEW*) : Void
    @lpVtbl.value.so_set_targets.unsafe_as(Proc(UInt32, UInt32, D3D12_STREAM_OUTPUT_BUFFER_VIEW*, Void)).call(startslot, numviews, pviews)
  end
  def om_set_render_targets(numrendertargetdescriptors : UInt32, prendertargetdescriptors : D3D12_CPU_DESCRIPTOR_HANDLE*, rtssinglehandletodescriptorrange : LibC::BOOL, pdepthstencildescriptor : D3D12_CPU_DESCRIPTOR_HANDLE*) : Void
    @lpVtbl.value.om_set_render_targets.unsafe_as(Proc(UInt32, D3D12_CPU_DESCRIPTOR_HANDLE*, LibC::BOOL, D3D12_CPU_DESCRIPTOR_HANDLE*, Void)).call(numrendertargetdescriptors, prendertargetdescriptors, rtssinglehandletodescriptorrange, pdepthstencildescriptor)
  end
  def clear_depth_stencil_view(depthstencilview : D3D12_CPU_DESCRIPTOR_HANDLE, clearflags : D3D12_CLEAR_FLAGS, depth : Float32, stencil : UInt8, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_depth_stencil_view.unsafe_as(Proc(D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_CLEAR_FLAGS, Float32, UInt8, UInt32, RECT*, Void)).call(depthstencilview, clearflags, depth, stencil, numrects, prects)
  end
  def clear_render_target_view(rendertargetview : D3D12_CPU_DESCRIPTOR_HANDLE, colorrgba : Float32*, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_render_target_view.unsafe_as(Proc(D3D12_CPU_DESCRIPTOR_HANDLE, Float32*, UInt32, RECT*, Void)).call(rendertargetview, colorrgba, numrects, prects)
  end
  def clear_unordered_access_view_uint(viewgpuhandleincurrentheap : D3D12_GPU_DESCRIPTOR_HANDLE, viewcpuhandle : D3D12_CPU_DESCRIPTOR_HANDLE, presource : ID3D12Resource, values : UInt32*, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_unordered_access_view_uint.unsafe_as(Proc(D3D12_GPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, ID3D12Resource, UInt32*, UInt32, RECT*, Void)).call(viewgpuhandleincurrentheap, viewcpuhandle, presource, values, numrects, prects)
  end
  def clear_unordered_access_view_float(viewgpuhandleincurrentheap : D3D12_GPU_DESCRIPTOR_HANDLE, viewcpuhandle : D3D12_CPU_DESCRIPTOR_HANDLE, presource : ID3D12Resource, values : Float32*, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_unordered_access_view_float.unsafe_as(Proc(D3D12_GPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, ID3D12Resource, Float32*, UInt32, RECT*, Void)).call(viewgpuhandleincurrentheap, viewcpuhandle, presource, values, numrects, prects)
  end
  def discard_resource(presource : ID3D12Resource, pregion : D3D12_DISCARD_REGION*) : Void
    @lpVtbl.value.discard_resource.unsafe_as(Proc(ID3D12Resource, D3D12_DISCARD_REGION*, Void)).call(presource, pregion)
  end
  def begin_query(pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.begin_query.unsafe_as(Proc(ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)).call(pqueryheap, type, index)
  end
  def end_query(pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.end_query.unsafe_as(Proc(ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)).call(pqueryheap, type, index)
  end
  def resolve_query_data(pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, startindex : UInt32, numqueries : UInt32, pdestinationbuffer : ID3D12Resource, aligneddestinationbufferoffset : UInt64) : Void
    @lpVtbl.value.resolve_query_data.unsafe_as(Proc(ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, UInt32, ID3D12Resource, UInt64, Void)).call(pqueryheap, type, startindex, numqueries, pdestinationbuffer, aligneddestinationbufferoffset)
  end
  def set_predication(pbuffer : ID3D12Resource, alignedbufferoffset : UInt64, operation : D3D12_PREDICATION_OP) : Void
    @lpVtbl.value.set_predication.unsafe_as(Proc(ID3D12Resource, UInt64, D3D12_PREDICATION_OP, Void)).call(pbuffer, alignedbufferoffset, operation)
  end
  def set_marker(metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.set_marker.unsafe_as(Proc(UInt32, Void*, UInt32, Void)).call(metadata, pdata, size)
  end
  def begin_event(metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.begin_event.unsafe_as(Proc(UInt32, Void*, UInt32, Void)).call(metadata, pdata, size)
  end
  def end_event : Void
    @lpVtbl.value.end_event.unsafe_as(Proc(Void)).call
  end
  def execute_indirect(pcommandsignature : ID3D12CommandSignature, maxcommandcount : UInt32, pargumentbuffer : ID3D12Resource, argumentbufferoffset : UInt64, pcountbuffer : ID3D12Resource, countbufferoffset : UInt64) : Void
    @lpVtbl.value.execute_indirect.unsafe_as(Proc(ID3D12CommandSignature, UInt32, ID3D12Resource, UInt64, ID3D12Resource, UInt64, Void)).call(pcommandsignature, maxcommandcount, pargumentbuffer, argumentbufferoffset, pcountbuffer, countbufferoffset)
  end
  def atomic_copy_buffer_uint(pdstbuffer : ID3D12Resource, dstoffset : UInt64, psrcbuffer : ID3D12Resource, srcoffset : UInt64, dependencies : UInt32, ppdependentresources : ID3D12Resource*, pdependentsubresourceranges : D3D12_SUBRESOURCE_RANGE_UINT64*) : Void
    @lpVtbl.value.atomic_copy_buffer_uint.unsafe_as(Proc(ID3D12Resource, UInt64, ID3D12Resource, UInt64, UInt32, ID3D12Resource*, D3D12_SUBRESOURCE_RANGE_UINT64*, Void)).call(pdstbuffer, dstoffset, psrcbuffer, srcoffset, dependencies, ppdependentresources, pdependentsubresourceranges)
  end
  def atomic_copy_buffer_uint64(pdstbuffer : ID3D12Resource, dstoffset : UInt64, psrcbuffer : ID3D12Resource, srcoffset : UInt64, dependencies : UInt32, ppdependentresources : ID3D12Resource*, pdependentsubresourceranges : D3D12_SUBRESOURCE_RANGE_UINT64*) : Void
    @lpVtbl.value.atomic_copy_buffer_uint64.unsafe_as(Proc(ID3D12Resource, UInt64, ID3D12Resource, UInt64, UInt32, ID3D12Resource*, D3D12_SUBRESOURCE_RANGE_UINT64*, Void)).call(pdstbuffer, dstoffset, psrcbuffer, srcoffset, dependencies, ppdependentresources, pdependentsubresourceranges)
  end
  def om_set_depth_bounds(min : Float32, max : Float32) : Void
    @lpVtbl.value.om_set_depth_bounds.unsafe_as(Proc(Float32, Float32, Void)).call(min, max)
  end
  def set_sample_positions(numsamplesperpixel : UInt32, numpixels : UInt32, psamplepositions : D3D12_SAMPLE_POSITION*) : Void
    @lpVtbl.value.set_sample_positions.unsafe_as(Proc(UInt32, UInt32, D3D12_SAMPLE_POSITION*, Void)).call(numsamplesperpixel, numpixels, psamplepositions)
  end
  def resolve_subresource_region(pdstresource : ID3D12Resource, dstsubresource : UInt32, dstx : UInt32, dsty : UInt32, psrcresource : ID3D12Resource, srcsubresource : UInt32, psrcrect : RECT*, format : DXGI_FORMAT, resolvemode : D3D12_RESOLVE_MODE) : Void
    @lpVtbl.value.resolve_subresource_region.unsafe_as(Proc(ID3D12Resource, UInt32, UInt32, UInt32, ID3D12Resource, UInt32, RECT*, DXGI_FORMAT, D3D12_RESOLVE_MODE, Void)).call(pdstresource, dstsubresource, dstx, dsty, psrcresource, srcsubresource, psrcrect, format, resolvemode)
  end
  def set_view_instance_mask(mask : UInt32) : Void
    @lpVtbl.value.set_view_instance_mask.unsafe_as(Proc(UInt32, Void)).call(mask)
  end
  def write_buffer_immediate(count : UInt32, pparams : D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pmodes : D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
    @lpVtbl.value.write_buffer_immediate.unsafe_as(Proc(UInt32, D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void)).call(count, pparams, pmodes)
  end
end
struct LibWin32::ID3D12CommandQueue
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
  def update_tile_mappings(presource : ID3D12Resource, numresourceregions : UInt32, presourceregionstartcoordinates : D3D12_TILED_RESOURCE_COORDINATE*, presourceregionsizes : D3D12_TILE_REGION_SIZE*, pheap : ID3D12Heap, numranges : UInt32, prangeflags : D3D12_TILE_RANGE_FLAGS*, pheaprangestartoffsets : UInt32*, prangetilecounts : UInt32*, flags : D3D12_TILE_MAPPING_FLAGS) : Void
    @lpVtbl.value.update_tile_mappings.unsafe_as(Proc(ID3D12Resource, UInt32, D3D12_TILED_RESOURCE_COORDINATE*, D3D12_TILE_REGION_SIZE*, ID3D12Heap, UInt32, D3D12_TILE_RANGE_FLAGS*, UInt32*, UInt32*, D3D12_TILE_MAPPING_FLAGS, Void)).call(presource, numresourceregions, presourceregionstartcoordinates, presourceregionsizes, pheap, numranges, prangeflags, pheaprangestartoffsets, prangetilecounts, flags)
  end
  def copy_tile_mappings(pdstresource : ID3D12Resource, pdstregionstartcoordinate : D3D12_TILED_RESOURCE_COORDINATE*, psrcresource : ID3D12Resource, psrcregionstartcoordinate : D3D12_TILED_RESOURCE_COORDINATE*, pregionsize : D3D12_TILE_REGION_SIZE*, flags : D3D12_TILE_MAPPING_FLAGS) : Void
    @lpVtbl.value.copy_tile_mappings.unsafe_as(Proc(ID3D12Resource, D3D12_TILED_RESOURCE_COORDINATE*, ID3D12Resource, D3D12_TILED_RESOURCE_COORDINATE*, D3D12_TILE_REGION_SIZE*, D3D12_TILE_MAPPING_FLAGS, Void)).call(pdstresource, pdstregionstartcoordinate, psrcresource, psrcregionstartcoordinate, pregionsize, flags)
  end
  def execute_command_lists(numcommandlists : UInt32, ppcommandlists : ID3D12CommandList*) : Void
    @lpVtbl.value.execute_command_lists.unsafe_as(Proc(UInt32, ID3D12CommandList*, Void)).call(numcommandlists, ppcommandlists)
  end
  def set_marker(metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.set_marker.unsafe_as(Proc(UInt32, Void*, UInt32, Void)).call(metadata, pdata, size)
  end
  def begin_event(metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.begin_event.unsafe_as(Proc(UInt32, Void*, UInt32, Void)).call(metadata, pdata, size)
  end
  def end_event : Void
    @lpVtbl.value.end_event.unsafe_as(Proc(Void)).call
  end
  def signal(pfence : ID3D12Fence, value : UInt64) : HRESULT
    @lpVtbl.value.signal.unsafe_as(Proc(ID3D12Fence, UInt64, HRESULT)).call(pfence, value)
  end
  def wait(pfence : ID3D12Fence, value : UInt64) : HRESULT
    @lpVtbl.value.wait.unsafe_as(Proc(ID3D12Fence, UInt64, HRESULT)).call(pfence, value)
  end
  def get_timestamp_frequency(pfrequency : UInt64*) : HRESULT
    @lpVtbl.value.get_timestamp_frequency.unsafe_as(Proc(UInt64*, HRESULT)).call(pfrequency)
  end
  def get_clock_calibration(pgputimestamp : UInt64*, pcputimestamp : UInt64*) : HRESULT
    @lpVtbl.value.get_clock_calibration.unsafe_as(Proc(UInt64*, UInt64*, HRESULT)).call(pgputimestamp, pcputimestamp)
  end
  def get_desc : D3D12_COMMAND_QUEUE_DESC
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D12_COMMAND_QUEUE_DESC)).call
  end
end
struct LibWin32::ID3D12Device
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_node_count : UInt32
    @lpVtbl.value.get_node_count.unsafe_as(Proc(UInt32)).call
  end
  def create_command_queue(pdesc : D3D12_COMMAND_QUEUE_DESC*, riid : Guid*, ppcommandqueue : Void**) : HRESULT
    @lpVtbl.value.create_command_queue.unsafe_as(Proc(D3D12_COMMAND_QUEUE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppcommandqueue)
  end
  def create_command_allocator(type : D3D12_COMMAND_LIST_TYPE, riid : Guid*, ppcommandallocator : Void**) : HRESULT
    @lpVtbl.value.create_command_allocator.unsafe_as(Proc(D3D12_COMMAND_LIST_TYPE, Guid*, Void**, HRESULT)).call(type, riid, ppcommandallocator)
  end
  def create_graphics_pipeline_state(pdesc : D3D12_GRAPHICS_PIPELINE_STATE_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_graphics_pipeline_state.unsafe_as(Proc(D3D12_GRAPHICS_PIPELINE_STATE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
  def create_compute_pipeline_state(pdesc : D3D12_COMPUTE_PIPELINE_STATE_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_compute_pipeline_state.unsafe_as(Proc(D3D12_COMPUTE_PIPELINE_STATE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
  def create_command_list(nodemask : UInt32, type : D3D12_COMMAND_LIST_TYPE, pcommandallocator : ID3D12CommandAllocator, pinitialstate : ID3D12PipelineState, riid : Guid*, ppcommandlist : Void**) : HRESULT
    @lpVtbl.value.create_command_list.unsafe_as(Proc(UInt32, D3D12_COMMAND_LIST_TYPE, ID3D12CommandAllocator, ID3D12PipelineState, Guid*, Void**, HRESULT)).call(nodemask, type, pcommandallocator, pinitialstate, riid, ppcommandlist)
  end
  def check_feature_support(feature : D3D12_FEATURE, pfeaturesupportdata : Void*, featuresupportdatasize : UInt32) : HRESULT
    @lpVtbl.value.check_feature_support.unsafe_as(Proc(D3D12_FEATURE, Void*, UInt32, HRESULT)).call(feature, pfeaturesupportdata, featuresupportdatasize)
  end
  def create_descriptor_heap(pdescriptorheapdesc : D3D12_DESCRIPTOR_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_descriptor_heap.unsafe_as(Proc(D3D12_DESCRIPTOR_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdescriptorheapdesc, riid, ppvheap)
  end
  def get_descriptor_handle_increment_size(descriptorheaptype : D3D12_DESCRIPTOR_HEAP_TYPE) : UInt32
    @lpVtbl.value.get_descriptor_handle_increment_size.unsafe_as(Proc(D3D12_DESCRIPTOR_HEAP_TYPE, UInt32)).call(descriptorheaptype)
  end
  def create_root_signature(nodemask : UInt32, pblobwithrootsignature : Void*, bloblengthinbytes : LibC::UINT_PTR, riid : Guid*, ppvrootsignature : Void**) : HRESULT
    @lpVtbl.value.create_root_signature.unsafe_as(Proc(UInt32, Void*, LibC::UINT_PTR, Guid*, Void**, HRESULT)).call(nodemask, pblobwithrootsignature, bloblengthinbytes, riid, ppvrootsignature)
  end
  def create_constant_buffer_view(pdesc : D3D12_CONSTANT_BUFFER_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_constant_buffer_view.unsafe_as(Proc(D3D12_CONSTANT_BUFFER_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(pdesc, destdescriptor)
  end
  def create_shader_resource_view(presource : ID3D12Resource, pdesc : D3D12_SHADER_RESOURCE_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_shader_resource_view.unsafe_as(Proc(ID3D12Resource, D3D12_SHADER_RESOURCE_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_unordered_access_view(presource : ID3D12Resource, pcounterresource : ID3D12Resource, pdesc : D3D12_UNORDERED_ACCESS_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_unordered_access_view.unsafe_as(Proc(ID3D12Resource, ID3D12Resource, D3D12_UNORDERED_ACCESS_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pcounterresource, pdesc, destdescriptor)
  end
  def create_render_target_view(presource : ID3D12Resource, pdesc : D3D12_RENDER_TARGET_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_render_target_view.unsafe_as(Proc(ID3D12Resource, D3D12_RENDER_TARGET_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_depth_stencil_view(presource : ID3D12Resource, pdesc : D3D12_DEPTH_STENCIL_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_depth_stencil_view.unsafe_as(Proc(ID3D12Resource, D3D12_DEPTH_STENCIL_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_sampler(pdesc : D3D12_SAMPLER_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_sampler.unsafe_as(Proc(D3D12_SAMPLER_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(pdesc, destdescriptor)
  end
  def copy_descriptors(numdestdescriptorranges : UInt32, pdestdescriptorrangestarts : D3D12_CPU_DESCRIPTOR_HANDLE*, pdestdescriptorrangesizes : UInt32*, numsrcdescriptorranges : UInt32, psrcdescriptorrangestarts : D3D12_CPU_DESCRIPTOR_HANDLE*, psrcdescriptorrangesizes : UInt32*, descriptorheapstype : D3D12_DESCRIPTOR_HEAP_TYPE) : Void
    @lpVtbl.value.copy_descriptors.unsafe_as(Proc(UInt32, D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, UInt32, D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, D3D12_DESCRIPTOR_HEAP_TYPE, Void)).call(numdestdescriptorranges, pdestdescriptorrangestarts, pdestdescriptorrangesizes, numsrcdescriptorranges, psrcdescriptorrangestarts, psrcdescriptorrangesizes, descriptorheapstype)
  end
  def copy_descriptors_simple(numdescriptors : UInt32, destdescriptorrangestart : D3D12_CPU_DESCRIPTOR_HANDLE, srcdescriptorrangestart : D3D12_CPU_DESCRIPTOR_HANDLE, descriptorheapstype : D3D12_DESCRIPTOR_HEAP_TYPE) : Void
    @lpVtbl.value.copy_descriptors_simple.unsafe_as(Proc(UInt32, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_DESCRIPTOR_HEAP_TYPE, Void)).call(numdescriptors, destdescriptorrangestart, srcdescriptorrangestart, descriptorheapstype)
  end
  def get_resource_allocation_info(visiblemask : UInt32, numresourcedescs : UInt32, presourcedescs : D3D12_RESOURCE_DESC*) : D3D12_RESOURCE_ALLOCATION_INFO
    @lpVtbl.value.get_resource_allocation_info.unsafe_as(Proc(UInt32, UInt32, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_ALLOCATION_INFO)).call(visiblemask, numresourcedescs, presourcedescs)
  end
  def get_custom_heap_properties(nodemask : UInt32, heaptype : D3D12_HEAP_TYPE) : D3D12_HEAP_PROPERTIES
    @lpVtbl.value.get_custom_heap_properties.unsafe_as(Proc(UInt32, D3D12_HEAP_TYPE, D3D12_HEAP_PROPERTIES)).call(nodemask, heaptype)
  end
  def create_committed_resource(pheapproperties : D3D12_HEAP_PROPERTIES*, heapflags : D3D12_HEAP_FLAGS, pdesc : D3D12_RESOURCE_DESC*, initialresourcestate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riidresource : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_committed_resource.unsafe_as(Proc(D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pheapproperties, heapflags, pdesc, initialresourcestate, poptimizedclearvalue, riidresource, ppvresource)
  end
  def create_heap(pdesc : D3D12_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_heap.unsafe_as(Proc(D3D12_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppvheap)
  end
  def create_placed_resource(pheap : ID3D12Heap, heapoffset : UInt64, pdesc : D3D12_RESOURCE_DESC*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_placed_resource.unsafe_as(Proc(ID3D12Heap, UInt64, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pheap, heapoffset, pdesc, initialstate, poptimizedclearvalue, riid, ppvresource)
  end
  def create_reserved_resource(pdesc : D3D12_RESOURCE_DESC*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_reserved_resource.unsafe_as(Proc(D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pdesc, initialstate, poptimizedclearvalue, riid, ppvresource)
  end
  def create_shared_handle(pobject : ID3D12DeviceChild, pattributes : SECURITY_ATTRIBUTES*, access : UInt32, name : LibC::LPWSTR, phandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_shared_handle.unsafe_as(Proc(ID3D12DeviceChild, SECURITY_ATTRIBUTES*, UInt32, LibC::LPWSTR, LibC::HANDLE*, HRESULT)).call(pobject, pattributes, access, name, phandle)
  end
  def open_shared_handle(nthandle : LibC::HANDLE, riid : Guid*, ppvobj : Void**) : HRESULT
    @lpVtbl.value.open_shared_handle.unsafe_as(Proc(LibC::HANDLE, Guid*, Void**, HRESULT)).call(nthandle, riid, ppvobj)
  end
  def open_shared_handle_by_name(name : LibC::LPWSTR, access : UInt32, pnthandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.open_shared_handle_by_name.unsafe_as(Proc(LibC::LPWSTR, UInt32, LibC::HANDLE*, HRESULT)).call(name, access, pnthandle)
  end
  def make_resident(numobjects : UInt32, ppobjects : ID3D12Pageable*) : HRESULT
    @lpVtbl.value.make_resident.unsafe_as(Proc(UInt32, ID3D12Pageable*, HRESULT)).call(numobjects, ppobjects)
  end
  def evict(numobjects : UInt32, ppobjects : ID3D12Pageable*) : HRESULT
    @lpVtbl.value.evict.unsafe_as(Proc(UInt32, ID3D12Pageable*, HRESULT)).call(numobjects, ppobjects)
  end
  def create_fence(initialvalue : UInt64, flags : D3D12_FENCE_FLAGS, riid : Guid*, ppfence : Void**) : HRESULT
    @lpVtbl.value.create_fence.unsafe_as(Proc(UInt64, D3D12_FENCE_FLAGS, Guid*, Void**, HRESULT)).call(initialvalue, flags, riid, ppfence)
  end
  def get_device_removed_reason : HRESULT
    @lpVtbl.value.get_device_removed_reason.unsafe_as(Proc(HRESULT)).call
  end
  def get_copyable_footprints(presourcedesc : D3D12_RESOURCE_DESC*, firstsubresource : UInt32, numsubresources : UInt32, baseoffset : UInt64, playouts : D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, pnumrows : UInt32*, prowsizeinbytes : UInt64*, ptotalbytes : UInt64*) : Void
    @lpVtbl.value.get_copyable_footprints.unsafe_as(Proc(D3D12_RESOURCE_DESC*, UInt32, UInt32, UInt64, D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, UInt32*, UInt64*, UInt64*, Void)).call(presourcedesc, firstsubresource, numsubresources, baseoffset, playouts, pnumrows, prowsizeinbytes, ptotalbytes)
  end
  def create_query_heap(pdesc : D3D12_QUERY_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_query_heap.unsafe_as(Proc(D3D12_QUERY_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppvheap)
  end
  def set_stable_power_state(enable : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_stable_power_state.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(enable)
  end
  def create_command_signature(pdesc : D3D12_COMMAND_SIGNATURE_DESC*, prootsignature : ID3D12RootSignature, riid : Guid*, ppvcommandsignature : Void**) : HRESULT
    @lpVtbl.value.create_command_signature.unsafe_as(Proc(D3D12_COMMAND_SIGNATURE_DESC*, ID3D12RootSignature, Guid*, Void**, HRESULT)).call(pdesc, prootsignature, riid, ppvcommandsignature)
  end
  def get_resource_tiling(ptiledresource : ID3D12Resource, pnumtilesforentireresource : UInt32*, ppackedmipdesc : D3D12_PACKED_MIP_INFO*, pstandardtileshapefornonpackedmips : D3D12_TILE_SHAPE*, pnumsubresourcetilings : UInt32*, firstsubresourcetilingtoget : UInt32, psubresourcetilingsfornonpackedmips : D3D12_SUBRESOURCE_TILING*) : Void
    @lpVtbl.value.get_resource_tiling.unsafe_as(Proc(ID3D12Resource, UInt32*, D3D12_PACKED_MIP_INFO*, D3D12_TILE_SHAPE*, UInt32*, UInt32, D3D12_SUBRESOURCE_TILING*, Void)).call(ptiledresource, pnumtilesforentireresource, ppackedmipdesc, pstandardtileshapefornonpackedmips, pnumsubresourcetilings, firstsubresourcetilingtoget, psubresourcetilingsfornonpackedmips)
  end
  def get_adapter_luid : LUID
    @lpVtbl.value.get_adapter_luid.unsafe_as(Proc(LUID)).call
  end
end
struct LibWin32::ID3D12PipelineLibrary
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
  def store_pipeline(pname : LibC::LPWSTR, ppipeline : ID3D12PipelineState) : HRESULT
    @lpVtbl.value.store_pipeline.unsafe_as(Proc(LibC::LPWSTR, ID3D12PipelineState, HRESULT)).call(pname, ppipeline)
  end
  def load_graphics_pipeline(pname : LibC::LPWSTR, pdesc : D3D12_GRAPHICS_PIPELINE_STATE_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.load_graphics_pipeline.unsafe_as(Proc(LibC::LPWSTR, D3D12_GRAPHICS_PIPELINE_STATE_DESC*, Guid*, Void**, HRESULT)).call(pname, pdesc, riid, pppipelinestate)
  end
  def load_compute_pipeline(pname : LibC::LPWSTR, pdesc : D3D12_COMPUTE_PIPELINE_STATE_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.load_compute_pipeline.unsafe_as(Proc(LibC::LPWSTR, D3D12_COMPUTE_PIPELINE_STATE_DESC*, Guid*, Void**, HRESULT)).call(pname, pdesc, riid, pppipelinestate)
  end
  def get_serialized_size : LibC::UINT_PTR
    @lpVtbl.value.get_serialized_size.unsafe_as(Proc(LibC::UINT_PTR)).call
  end
  def serialize(pdata : Void*, datasizeinbytes : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.serialize.unsafe_as(Proc(Void*, LibC::UINT_PTR, HRESULT)).call(pdata, datasizeinbytes)
  end
end
struct LibWin32::ID3D12PipelineLibrary1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
  def store_pipeline(pname : LibC::LPWSTR, ppipeline : ID3D12PipelineState) : HRESULT
    @lpVtbl.value.store_pipeline.unsafe_as(Proc(LibC::LPWSTR, ID3D12PipelineState, HRESULT)).call(pname, ppipeline)
  end
  def load_graphics_pipeline(pname : LibC::LPWSTR, pdesc : D3D12_GRAPHICS_PIPELINE_STATE_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.load_graphics_pipeline.unsafe_as(Proc(LibC::LPWSTR, D3D12_GRAPHICS_PIPELINE_STATE_DESC*, Guid*, Void**, HRESULT)).call(pname, pdesc, riid, pppipelinestate)
  end
  def load_compute_pipeline(pname : LibC::LPWSTR, pdesc : D3D12_COMPUTE_PIPELINE_STATE_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.load_compute_pipeline.unsafe_as(Proc(LibC::LPWSTR, D3D12_COMPUTE_PIPELINE_STATE_DESC*, Guid*, Void**, HRESULT)).call(pname, pdesc, riid, pppipelinestate)
  end
  def get_serialized_size : LibC::UINT_PTR
    @lpVtbl.value.get_serialized_size.unsafe_as(Proc(LibC::UINT_PTR)).call
  end
  def serialize(pdata : Void*, datasizeinbytes : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.serialize.unsafe_as(Proc(Void*, LibC::UINT_PTR, HRESULT)).call(pdata, datasizeinbytes)
  end
  def load_pipeline(pname : LibC::LPWSTR, pdesc : D3D12_PIPELINE_STATE_STREAM_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.load_pipeline.unsafe_as(Proc(LibC::LPWSTR, D3D12_PIPELINE_STATE_STREAM_DESC*, Guid*, Void**, HRESULT)).call(pname, pdesc, riid, pppipelinestate)
  end
end
struct LibWin32::ID3D12Device1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_node_count : UInt32
    @lpVtbl.value.get_node_count.unsafe_as(Proc(UInt32)).call
  end
  def create_command_queue(pdesc : D3D12_COMMAND_QUEUE_DESC*, riid : Guid*, ppcommandqueue : Void**) : HRESULT
    @lpVtbl.value.create_command_queue.unsafe_as(Proc(D3D12_COMMAND_QUEUE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppcommandqueue)
  end
  def create_command_allocator(type : D3D12_COMMAND_LIST_TYPE, riid : Guid*, ppcommandallocator : Void**) : HRESULT
    @lpVtbl.value.create_command_allocator.unsafe_as(Proc(D3D12_COMMAND_LIST_TYPE, Guid*, Void**, HRESULT)).call(type, riid, ppcommandallocator)
  end
  def create_graphics_pipeline_state(pdesc : D3D12_GRAPHICS_PIPELINE_STATE_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_graphics_pipeline_state.unsafe_as(Proc(D3D12_GRAPHICS_PIPELINE_STATE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
  def create_compute_pipeline_state(pdesc : D3D12_COMPUTE_PIPELINE_STATE_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_compute_pipeline_state.unsafe_as(Proc(D3D12_COMPUTE_PIPELINE_STATE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
  def create_command_list(nodemask : UInt32, type : D3D12_COMMAND_LIST_TYPE, pcommandallocator : ID3D12CommandAllocator, pinitialstate : ID3D12PipelineState, riid : Guid*, ppcommandlist : Void**) : HRESULT
    @lpVtbl.value.create_command_list.unsafe_as(Proc(UInt32, D3D12_COMMAND_LIST_TYPE, ID3D12CommandAllocator, ID3D12PipelineState, Guid*, Void**, HRESULT)).call(nodemask, type, pcommandallocator, pinitialstate, riid, ppcommandlist)
  end
  def check_feature_support(feature : D3D12_FEATURE, pfeaturesupportdata : Void*, featuresupportdatasize : UInt32) : HRESULT
    @lpVtbl.value.check_feature_support.unsafe_as(Proc(D3D12_FEATURE, Void*, UInt32, HRESULT)).call(feature, pfeaturesupportdata, featuresupportdatasize)
  end
  def create_descriptor_heap(pdescriptorheapdesc : D3D12_DESCRIPTOR_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_descriptor_heap.unsafe_as(Proc(D3D12_DESCRIPTOR_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdescriptorheapdesc, riid, ppvheap)
  end
  def get_descriptor_handle_increment_size(descriptorheaptype : D3D12_DESCRIPTOR_HEAP_TYPE) : UInt32
    @lpVtbl.value.get_descriptor_handle_increment_size.unsafe_as(Proc(D3D12_DESCRIPTOR_HEAP_TYPE, UInt32)).call(descriptorheaptype)
  end
  def create_root_signature(nodemask : UInt32, pblobwithrootsignature : Void*, bloblengthinbytes : LibC::UINT_PTR, riid : Guid*, ppvrootsignature : Void**) : HRESULT
    @lpVtbl.value.create_root_signature.unsafe_as(Proc(UInt32, Void*, LibC::UINT_PTR, Guid*, Void**, HRESULT)).call(nodemask, pblobwithrootsignature, bloblengthinbytes, riid, ppvrootsignature)
  end
  def create_constant_buffer_view(pdesc : D3D12_CONSTANT_BUFFER_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_constant_buffer_view.unsafe_as(Proc(D3D12_CONSTANT_BUFFER_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(pdesc, destdescriptor)
  end
  def create_shader_resource_view(presource : ID3D12Resource, pdesc : D3D12_SHADER_RESOURCE_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_shader_resource_view.unsafe_as(Proc(ID3D12Resource, D3D12_SHADER_RESOURCE_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_unordered_access_view(presource : ID3D12Resource, pcounterresource : ID3D12Resource, pdesc : D3D12_UNORDERED_ACCESS_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_unordered_access_view.unsafe_as(Proc(ID3D12Resource, ID3D12Resource, D3D12_UNORDERED_ACCESS_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pcounterresource, pdesc, destdescriptor)
  end
  def create_render_target_view(presource : ID3D12Resource, pdesc : D3D12_RENDER_TARGET_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_render_target_view.unsafe_as(Proc(ID3D12Resource, D3D12_RENDER_TARGET_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_depth_stencil_view(presource : ID3D12Resource, pdesc : D3D12_DEPTH_STENCIL_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_depth_stencil_view.unsafe_as(Proc(ID3D12Resource, D3D12_DEPTH_STENCIL_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_sampler(pdesc : D3D12_SAMPLER_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_sampler.unsafe_as(Proc(D3D12_SAMPLER_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(pdesc, destdescriptor)
  end
  def copy_descriptors(numdestdescriptorranges : UInt32, pdestdescriptorrangestarts : D3D12_CPU_DESCRIPTOR_HANDLE*, pdestdescriptorrangesizes : UInt32*, numsrcdescriptorranges : UInt32, psrcdescriptorrangestarts : D3D12_CPU_DESCRIPTOR_HANDLE*, psrcdescriptorrangesizes : UInt32*, descriptorheapstype : D3D12_DESCRIPTOR_HEAP_TYPE) : Void
    @lpVtbl.value.copy_descriptors.unsafe_as(Proc(UInt32, D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, UInt32, D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, D3D12_DESCRIPTOR_HEAP_TYPE, Void)).call(numdestdescriptorranges, pdestdescriptorrangestarts, pdestdescriptorrangesizes, numsrcdescriptorranges, psrcdescriptorrangestarts, psrcdescriptorrangesizes, descriptorheapstype)
  end
  def copy_descriptors_simple(numdescriptors : UInt32, destdescriptorrangestart : D3D12_CPU_DESCRIPTOR_HANDLE, srcdescriptorrangestart : D3D12_CPU_DESCRIPTOR_HANDLE, descriptorheapstype : D3D12_DESCRIPTOR_HEAP_TYPE) : Void
    @lpVtbl.value.copy_descriptors_simple.unsafe_as(Proc(UInt32, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_DESCRIPTOR_HEAP_TYPE, Void)).call(numdescriptors, destdescriptorrangestart, srcdescriptorrangestart, descriptorheapstype)
  end
  def get_resource_allocation_info(visiblemask : UInt32, numresourcedescs : UInt32, presourcedescs : D3D12_RESOURCE_DESC*) : D3D12_RESOURCE_ALLOCATION_INFO
    @lpVtbl.value.get_resource_allocation_info.unsafe_as(Proc(UInt32, UInt32, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_ALLOCATION_INFO)).call(visiblemask, numresourcedescs, presourcedescs)
  end
  def get_custom_heap_properties(nodemask : UInt32, heaptype : D3D12_HEAP_TYPE) : D3D12_HEAP_PROPERTIES
    @lpVtbl.value.get_custom_heap_properties.unsafe_as(Proc(UInt32, D3D12_HEAP_TYPE, D3D12_HEAP_PROPERTIES)).call(nodemask, heaptype)
  end
  def create_committed_resource(pheapproperties : D3D12_HEAP_PROPERTIES*, heapflags : D3D12_HEAP_FLAGS, pdesc : D3D12_RESOURCE_DESC*, initialresourcestate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riidresource : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_committed_resource.unsafe_as(Proc(D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pheapproperties, heapflags, pdesc, initialresourcestate, poptimizedclearvalue, riidresource, ppvresource)
  end
  def create_heap(pdesc : D3D12_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_heap.unsafe_as(Proc(D3D12_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppvheap)
  end
  def create_placed_resource(pheap : ID3D12Heap, heapoffset : UInt64, pdesc : D3D12_RESOURCE_DESC*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_placed_resource.unsafe_as(Proc(ID3D12Heap, UInt64, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pheap, heapoffset, pdesc, initialstate, poptimizedclearvalue, riid, ppvresource)
  end
  def create_reserved_resource(pdesc : D3D12_RESOURCE_DESC*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_reserved_resource.unsafe_as(Proc(D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pdesc, initialstate, poptimizedclearvalue, riid, ppvresource)
  end
  def create_shared_handle(pobject : ID3D12DeviceChild, pattributes : SECURITY_ATTRIBUTES*, access : UInt32, name : LibC::LPWSTR, phandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_shared_handle.unsafe_as(Proc(ID3D12DeviceChild, SECURITY_ATTRIBUTES*, UInt32, LibC::LPWSTR, LibC::HANDLE*, HRESULT)).call(pobject, pattributes, access, name, phandle)
  end
  def open_shared_handle(nthandle : LibC::HANDLE, riid : Guid*, ppvobj : Void**) : HRESULT
    @lpVtbl.value.open_shared_handle.unsafe_as(Proc(LibC::HANDLE, Guid*, Void**, HRESULT)).call(nthandle, riid, ppvobj)
  end
  def open_shared_handle_by_name(name : LibC::LPWSTR, access : UInt32, pnthandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.open_shared_handle_by_name.unsafe_as(Proc(LibC::LPWSTR, UInt32, LibC::HANDLE*, HRESULT)).call(name, access, pnthandle)
  end
  def make_resident(numobjects : UInt32, ppobjects : ID3D12Pageable*) : HRESULT
    @lpVtbl.value.make_resident.unsafe_as(Proc(UInt32, ID3D12Pageable*, HRESULT)).call(numobjects, ppobjects)
  end
  def evict(numobjects : UInt32, ppobjects : ID3D12Pageable*) : HRESULT
    @lpVtbl.value.evict.unsafe_as(Proc(UInt32, ID3D12Pageable*, HRESULT)).call(numobjects, ppobjects)
  end
  def create_fence(initialvalue : UInt64, flags : D3D12_FENCE_FLAGS, riid : Guid*, ppfence : Void**) : HRESULT
    @lpVtbl.value.create_fence.unsafe_as(Proc(UInt64, D3D12_FENCE_FLAGS, Guid*, Void**, HRESULT)).call(initialvalue, flags, riid, ppfence)
  end
  def get_device_removed_reason : HRESULT
    @lpVtbl.value.get_device_removed_reason.unsafe_as(Proc(HRESULT)).call
  end
  def get_copyable_footprints(presourcedesc : D3D12_RESOURCE_DESC*, firstsubresource : UInt32, numsubresources : UInt32, baseoffset : UInt64, playouts : D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, pnumrows : UInt32*, prowsizeinbytes : UInt64*, ptotalbytes : UInt64*) : Void
    @lpVtbl.value.get_copyable_footprints.unsafe_as(Proc(D3D12_RESOURCE_DESC*, UInt32, UInt32, UInt64, D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, UInt32*, UInt64*, UInt64*, Void)).call(presourcedesc, firstsubresource, numsubresources, baseoffset, playouts, pnumrows, prowsizeinbytes, ptotalbytes)
  end
  def create_query_heap(pdesc : D3D12_QUERY_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_query_heap.unsafe_as(Proc(D3D12_QUERY_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppvheap)
  end
  def set_stable_power_state(enable : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_stable_power_state.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(enable)
  end
  def create_command_signature(pdesc : D3D12_COMMAND_SIGNATURE_DESC*, prootsignature : ID3D12RootSignature, riid : Guid*, ppvcommandsignature : Void**) : HRESULT
    @lpVtbl.value.create_command_signature.unsafe_as(Proc(D3D12_COMMAND_SIGNATURE_DESC*, ID3D12RootSignature, Guid*, Void**, HRESULT)).call(pdesc, prootsignature, riid, ppvcommandsignature)
  end
  def get_resource_tiling(ptiledresource : ID3D12Resource, pnumtilesforentireresource : UInt32*, ppackedmipdesc : D3D12_PACKED_MIP_INFO*, pstandardtileshapefornonpackedmips : D3D12_TILE_SHAPE*, pnumsubresourcetilings : UInt32*, firstsubresourcetilingtoget : UInt32, psubresourcetilingsfornonpackedmips : D3D12_SUBRESOURCE_TILING*) : Void
    @lpVtbl.value.get_resource_tiling.unsafe_as(Proc(ID3D12Resource, UInt32*, D3D12_PACKED_MIP_INFO*, D3D12_TILE_SHAPE*, UInt32*, UInt32, D3D12_SUBRESOURCE_TILING*, Void)).call(ptiledresource, pnumtilesforentireresource, ppackedmipdesc, pstandardtileshapefornonpackedmips, pnumsubresourcetilings, firstsubresourcetilingtoget, psubresourcetilingsfornonpackedmips)
  end
  def get_adapter_luid : LUID
    @lpVtbl.value.get_adapter_luid.unsafe_as(Proc(LUID)).call
  end
  def create_pipeline_library(plibraryblob : Void*, bloblength : LibC::UINT_PTR, riid : Guid*, pppipelinelibrary : Void**) : HRESULT
    @lpVtbl.value.create_pipeline_library.unsafe_as(Proc(Void*, LibC::UINT_PTR, Guid*, Void**, HRESULT)).call(plibraryblob, bloblength, riid, pppipelinelibrary)
  end
  def set_event_on_multiple_fence_completion(ppfences : ID3D12Fence*, pfencevalues : UInt64*, numfences : UInt32, flags : D3D12_MULTIPLE_FENCE_WAIT_FLAGS, hevent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.set_event_on_multiple_fence_completion.unsafe_as(Proc(ID3D12Fence*, UInt64*, UInt32, D3D12_MULTIPLE_FENCE_WAIT_FLAGS, LibC::HANDLE, HRESULT)).call(ppfences, pfencevalues, numfences, flags, hevent)
  end
  def set_residency_priority(numobjects : UInt32, ppobjects : ID3D12Pageable*, ppriorities : D3D12_RESIDENCY_PRIORITY*) : HRESULT
    @lpVtbl.value.set_residency_priority.unsafe_as(Proc(UInt32, ID3D12Pageable*, D3D12_RESIDENCY_PRIORITY*, HRESULT)).call(numobjects, ppobjects, ppriorities)
  end
end
struct LibWin32::ID3D12Device2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_node_count : UInt32
    @lpVtbl.value.get_node_count.unsafe_as(Proc(UInt32)).call
  end
  def create_command_queue(pdesc : D3D12_COMMAND_QUEUE_DESC*, riid : Guid*, ppcommandqueue : Void**) : HRESULT
    @lpVtbl.value.create_command_queue.unsafe_as(Proc(D3D12_COMMAND_QUEUE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppcommandqueue)
  end
  def create_command_allocator(type : D3D12_COMMAND_LIST_TYPE, riid : Guid*, ppcommandallocator : Void**) : HRESULT
    @lpVtbl.value.create_command_allocator.unsafe_as(Proc(D3D12_COMMAND_LIST_TYPE, Guid*, Void**, HRESULT)).call(type, riid, ppcommandallocator)
  end
  def create_graphics_pipeline_state(pdesc : D3D12_GRAPHICS_PIPELINE_STATE_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_graphics_pipeline_state.unsafe_as(Proc(D3D12_GRAPHICS_PIPELINE_STATE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
  def create_compute_pipeline_state(pdesc : D3D12_COMPUTE_PIPELINE_STATE_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_compute_pipeline_state.unsafe_as(Proc(D3D12_COMPUTE_PIPELINE_STATE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
  def create_command_list(nodemask : UInt32, type : D3D12_COMMAND_LIST_TYPE, pcommandallocator : ID3D12CommandAllocator, pinitialstate : ID3D12PipelineState, riid : Guid*, ppcommandlist : Void**) : HRESULT
    @lpVtbl.value.create_command_list.unsafe_as(Proc(UInt32, D3D12_COMMAND_LIST_TYPE, ID3D12CommandAllocator, ID3D12PipelineState, Guid*, Void**, HRESULT)).call(nodemask, type, pcommandallocator, pinitialstate, riid, ppcommandlist)
  end
  def check_feature_support(feature : D3D12_FEATURE, pfeaturesupportdata : Void*, featuresupportdatasize : UInt32) : HRESULT
    @lpVtbl.value.check_feature_support.unsafe_as(Proc(D3D12_FEATURE, Void*, UInt32, HRESULT)).call(feature, pfeaturesupportdata, featuresupportdatasize)
  end
  def create_descriptor_heap(pdescriptorheapdesc : D3D12_DESCRIPTOR_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_descriptor_heap.unsafe_as(Proc(D3D12_DESCRIPTOR_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdescriptorheapdesc, riid, ppvheap)
  end
  def get_descriptor_handle_increment_size(descriptorheaptype : D3D12_DESCRIPTOR_HEAP_TYPE) : UInt32
    @lpVtbl.value.get_descriptor_handle_increment_size.unsafe_as(Proc(D3D12_DESCRIPTOR_HEAP_TYPE, UInt32)).call(descriptorheaptype)
  end
  def create_root_signature(nodemask : UInt32, pblobwithrootsignature : Void*, bloblengthinbytes : LibC::UINT_PTR, riid : Guid*, ppvrootsignature : Void**) : HRESULT
    @lpVtbl.value.create_root_signature.unsafe_as(Proc(UInt32, Void*, LibC::UINT_PTR, Guid*, Void**, HRESULT)).call(nodemask, pblobwithrootsignature, bloblengthinbytes, riid, ppvrootsignature)
  end
  def create_constant_buffer_view(pdesc : D3D12_CONSTANT_BUFFER_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_constant_buffer_view.unsafe_as(Proc(D3D12_CONSTANT_BUFFER_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(pdesc, destdescriptor)
  end
  def create_shader_resource_view(presource : ID3D12Resource, pdesc : D3D12_SHADER_RESOURCE_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_shader_resource_view.unsafe_as(Proc(ID3D12Resource, D3D12_SHADER_RESOURCE_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_unordered_access_view(presource : ID3D12Resource, pcounterresource : ID3D12Resource, pdesc : D3D12_UNORDERED_ACCESS_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_unordered_access_view.unsafe_as(Proc(ID3D12Resource, ID3D12Resource, D3D12_UNORDERED_ACCESS_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pcounterresource, pdesc, destdescriptor)
  end
  def create_render_target_view(presource : ID3D12Resource, pdesc : D3D12_RENDER_TARGET_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_render_target_view.unsafe_as(Proc(ID3D12Resource, D3D12_RENDER_TARGET_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_depth_stencil_view(presource : ID3D12Resource, pdesc : D3D12_DEPTH_STENCIL_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_depth_stencil_view.unsafe_as(Proc(ID3D12Resource, D3D12_DEPTH_STENCIL_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_sampler(pdesc : D3D12_SAMPLER_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_sampler.unsafe_as(Proc(D3D12_SAMPLER_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(pdesc, destdescriptor)
  end
  def copy_descriptors(numdestdescriptorranges : UInt32, pdestdescriptorrangestarts : D3D12_CPU_DESCRIPTOR_HANDLE*, pdestdescriptorrangesizes : UInt32*, numsrcdescriptorranges : UInt32, psrcdescriptorrangestarts : D3D12_CPU_DESCRIPTOR_HANDLE*, psrcdescriptorrangesizes : UInt32*, descriptorheapstype : D3D12_DESCRIPTOR_HEAP_TYPE) : Void
    @lpVtbl.value.copy_descriptors.unsafe_as(Proc(UInt32, D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, UInt32, D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, D3D12_DESCRIPTOR_HEAP_TYPE, Void)).call(numdestdescriptorranges, pdestdescriptorrangestarts, pdestdescriptorrangesizes, numsrcdescriptorranges, psrcdescriptorrangestarts, psrcdescriptorrangesizes, descriptorheapstype)
  end
  def copy_descriptors_simple(numdescriptors : UInt32, destdescriptorrangestart : D3D12_CPU_DESCRIPTOR_HANDLE, srcdescriptorrangestart : D3D12_CPU_DESCRIPTOR_HANDLE, descriptorheapstype : D3D12_DESCRIPTOR_HEAP_TYPE) : Void
    @lpVtbl.value.copy_descriptors_simple.unsafe_as(Proc(UInt32, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_DESCRIPTOR_HEAP_TYPE, Void)).call(numdescriptors, destdescriptorrangestart, srcdescriptorrangestart, descriptorheapstype)
  end
  def get_resource_allocation_info(visiblemask : UInt32, numresourcedescs : UInt32, presourcedescs : D3D12_RESOURCE_DESC*) : D3D12_RESOURCE_ALLOCATION_INFO
    @lpVtbl.value.get_resource_allocation_info.unsafe_as(Proc(UInt32, UInt32, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_ALLOCATION_INFO)).call(visiblemask, numresourcedescs, presourcedescs)
  end
  def get_custom_heap_properties(nodemask : UInt32, heaptype : D3D12_HEAP_TYPE) : D3D12_HEAP_PROPERTIES
    @lpVtbl.value.get_custom_heap_properties.unsafe_as(Proc(UInt32, D3D12_HEAP_TYPE, D3D12_HEAP_PROPERTIES)).call(nodemask, heaptype)
  end
  def create_committed_resource(pheapproperties : D3D12_HEAP_PROPERTIES*, heapflags : D3D12_HEAP_FLAGS, pdesc : D3D12_RESOURCE_DESC*, initialresourcestate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riidresource : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_committed_resource.unsafe_as(Proc(D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pheapproperties, heapflags, pdesc, initialresourcestate, poptimizedclearvalue, riidresource, ppvresource)
  end
  def create_heap(pdesc : D3D12_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_heap.unsafe_as(Proc(D3D12_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppvheap)
  end
  def create_placed_resource(pheap : ID3D12Heap, heapoffset : UInt64, pdesc : D3D12_RESOURCE_DESC*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_placed_resource.unsafe_as(Proc(ID3D12Heap, UInt64, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pheap, heapoffset, pdesc, initialstate, poptimizedclearvalue, riid, ppvresource)
  end
  def create_reserved_resource(pdesc : D3D12_RESOURCE_DESC*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_reserved_resource.unsafe_as(Proc(D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pdesc, initialstate, poptimizedclearvalue, riid, ppvresource)
  end
  def create_shared_handle(pobject : ID3D12DeviceChild, pattributes : SECURITY_ATTRIBUTES*, access : UInt32, name : LibC::LPWSTR, phandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_shared_handle.unsafe_as(Proc(ID3D12DeviceChild, SECURITY_ATTRIBUTES*, UInt32, LibC::LPWSTR, LibC::HANDLE*, HRESULT)).call(pobject, pattributes, access, name, phandle)
  end
  def open_shared_handle(nthandle : LibC::HANDLE, riid : Guid*, ppvobj : Void**) : HRESULT
    @lpVtbl.value.open_shared_handle.unsafe_as(Proc(LibC::HANDLE, Guid*, Void**, HRESULT)).call(nthandle, riid, ppvobj)
  end
  def open_shared_handle_by_name(name : LibC::LPWSTR, access : UInt32, pnthandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.open_shared_handle_by_name.unsafe_as(Proc(LibC::LPWSTR, UInt32, LibC::HANDLE*, HRESULT)).call(name, access, pnthandle)
  end
  def make_resident(numobjects : UInt32, ppobjects : ID3D12Pageable*) : HRESULT
    @lpVtbl.value.make_resident.unsafe_as(Proc(UInt32, ID3D12Pageable*, HRESULT)).call(numobjects, ppobjects)
  end
  def evict(numobjects : UInt32, ppobjects : ID3D12Pageable*) : HRESULT
    @lpVtbl.value.evict.unsafe_as(Proc(UInt32, ID3D12Pageable*, HRESULT)).call(numobjects, ppobjects)
  end
  def create_fence(initialvalue : UInt64, flags : D3D12_FENCE_FLAGS, riid : Guid*, ppfence : Void**) : HRESULT
    @lpVtbl.value.create_fence.unsafe_as(Proc(UInt64, D3D12_FENCE_FLAGS, Guid*, Void**, HRESULT)).call(initialvalue, flags, riid, ppfence)
  end
  def get_device_removed_reason : HRESULT
    @lpVtbl.value.get_device_removed_reason.unsafe_as(Proc(HRESULT)).call
  end
  def get_copyable_footprints(presourcedesc : D3D12_RESOURCE_DESC*, firstsubresource : UInt32, numsubresources : UInt32, baseoffset : UInt64, playouts : D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, pnumrows : UInt32*, prowsizeinbytes : UInt64*, ptotalbytes : UInt64*) : Void
    @lpVtbl.value.get_copyable_footprints.unsafe_as(Proc(D3D12_RESOURCE_DESC*, UInt32, UInt32, UInt64, D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, UInt32*, UInt64*, UInt64*, Void)).call(presourcedesc, firstsubresource, numsubresources, baseoffset, playouts, pnumrows, prowsizeinbytes, ptotalbytes)
  end
  def create_query_heap(pdesc : D3D12_QUERY_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_query_heap.unsafe_as(Proc(D3D12_QUERY_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppvheap)
  end
  def set_stable_power_state(enable : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_stable_power_state.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(enable)
  end
  def create_command_signature(pdesc : D3D12_COMMAND_SIGNATURE_DESC*, prootsignature : ID3D12RootSignature, riid : Guid*, ppvcommandsignature : Void**) : HRESULT
    @lpVtbl.value.create_command_signature.unsafe_as(Proc(D3D12_COMMAND_SIGNATURE_DESC*, ID3D12RootSignature, Guid*, Void**, HRESULT)).call(pdesc, prootsignature, riid, ppvcommandsignature)
  end
  def get_resource_tiling(ptiledresource : ID3D12Resource, pnumtilesforentireresource : UInt32*, ppackedmipdesc : D3D12_PACKED_MIP_INFO*, pstandardtileshapefornonpackedmips : D3D12_TILE_SHAPE*, pnumsubresourcetilings : UInt32*, firstsubresourcetilingtoget : UInt32, psubresourcetilingsfornonpackedmips : D3D12_SUBRESOURCE_TILING*) : Void
    @lpVtbl.value.get_resource_tiling.unsafe_as(Proc(ID3D12Resource, UInt32*, D3D12_PACKED_MIP_INFO*, D3D12_TILE_SHAPE*, UInt32*, UInt32, D3D12_SUBRESOURCE_TILING*, Void)).call(ptiledresource, pnumtilesforentireresource, ppackedmipdesc, pstandardtileshapefornonpackedmips, pnumsubresourcetilings, firstsubresourcetilingtoget, psubresourcetilingsfornonpackedmips)
  end
  def get_adapter_luid : LUID
    @lpVtbl.value.get_adapter_luid.unsafe_as(Proc(LUID)).call
  end
  def create_pipeline_library(plibraryblob : Void*, bloblength : LibC::UINT_PTR, riid : Guid*, pppipelinelibrary : Void**) : HRESULT
    @lpVtbl.value.create_pipeline_library.unsafe_as(Proc(Void*, LibC::UINT_PTR, Guid*, Void**, HRESULT)).call(plibraryblob, bloblength, riid, pppipelinelibrary)
  end
  def set_event_on_multiple_fence_completion(ppfences : ID3D12Fence*, pfencevalues : UInt64*, numfences : UInt32, flags : D3D12_MULTIPLE_FENCE_WAIT_FLAGS, hevent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.set_event_on_multiple_fence_completion.unsafe_as(Proc(ID3D12Fence*, UInt64*, UInt32, D3D12_MULTIPLE_FENCE_WAIT_FLAGS, LibC::HANDLE, HRESULT)).call(ppfences, pfencevalues, numfences, flags, hevent)
  end
  def set_residency_priority(numobjects : UInt32, ppobjects : ID3D12Pageable*, ppriorities : D3D12_RESIDENCY_PRIORITY*) : HRESULT
    @lpVtbl.value.set_residency_priority.unsafe_as(Proc(UInt32, ID3D12Pageable*, D3D12_RESIDENCY_PRIORITY*, HRESULT)).call(numobjects, ppobjects, ppriorities)
  end
  def create_pipeline_state(pdesc : D3D12_PIPELINE_STATE_STREAM_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_pipeline_state.unsafe_as(Proc(D3D12_PIPELINE_STATE_STREAM_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
end
struct LibWin32::ID3D12Device3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_node_count : UInt32
    @lpVtbl.value.get_node_count.unsafe_as(Proc(UInt32)).call
  end
  def create_command_queue(pdesc : D3D12_COMMAND_QUEUE_DESC*, riid : Guid*, ppcommandqueue : Void**) : HRESULT
    @lpVtbl.value.create_command_queue.unsafe_as(Proc(D3D12_COMMAND_QUEUE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppcommandqueue)
  end
  def create_command_allocator(type : D3D12_COMMAND_LIST_TYPE, riid : Guid*, ppcommandallocator : Void**) : HRESULT
    @lpVtbl.value.create_command_allocator.unsafe_as(Proc(D3D12_COMMAND_LIST_TYPE, Guid*, Void**, HRESULT)).call(type, riid, ppcommandallocator)
  end
  def create_graphics_pipeline_state(pdesc : D3D12_GRAPHICS_PIPELINE_STATE_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_graphics_pipeline_state.unsafe_as(Proc(D3D12_GRAPHICS_PIPELINE_STATE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
  def create_compute_pipeline_state(pdesc : D3D12_COMPUTE_PIPELINE_STATE_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_compute_pipeline_state.unsafe_as(Proc(D3D12_COMPUTE_PIPELINE_STATE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
  def create_command_list(nodemask : UInt32, type : D3D12_COMMAND_LIST_TYPE, pcommandallocator : ID3D12CommandAllocator, pinitialstate : ID3D12PipelineState, riid : Guid*, ppcommandlist : Void**) : HRESULT
    @lpVtbl.value.create_command_list.unsafe_as(Proc(UInt32, D3D12_COMMAND_LIST_TYPE, ID3D12CommandAllocator, ID3D12PipelineState, Guid*, Void**, HRESULT)).call(nodemask, type, pcommandallocator, pinitialstate, riid, ppcommandlist)
  end
  def check_feature_support(feature : D3D12_FEATURE, pfeaturesupportdata : Void*, featuresupportdatasize : UInt32) : HRESULT
    @lpVtbl.value.check_feature_support.unsafe_as(Proc(D3D12_FEATURE, Void*, UInt32, HRESULT)).call(feature, pfeaturesupportdata, featuresupportdatasize)
  end
  def create_descriptor_heap(pdescriptorheapdesc : D3D12_DESCRIPTOR_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_descriptor_heap.unsafe_as(Proc(D3D12_DESCRIPTOR_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdescriptorheapdesc, riid, ppvheap)
  end
  def get_descriptor_handle_increment_size(descriptorheaptype : D3D12_DESCRIPTOR_HEAP_TYPE) : UInt32
    @lpVtbl.value.get_descriptor_handle_increment_size.unsafe_as(Proc(D3D12_DESCRIPTOR_HEAP_TYPE, UInt32)).call(descriptorheaptype)
  end
  def create_root_signature(nodemask : UInt32, pblobwithrootsignature : Void*, bloblengthinbytes : LibC::UINT_PTR, riid : Guid*, ppvrootsignature : Void**) : HRESULT
    @lpVtbl.value.create_root_signature.unsafe_as(Proc(UInt32, Void*, LibC::UINT_PTR, Guid*, Void**, HRESULT)).call(nodemask, pblobwithrootsignature, bloblengthinbytes, riid, ppvrootsignature)
  end
  def create_constant_buffer_view(pdesc : D3D12_CONSTANT_BUFFER_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_constant_buffer_view.unsafe_as(Proc(D3D12_CONSTANT_BUFFER_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(pdesc, destdescriptor)
  end
  def create_shader_resource_view(presource : ID3D12Resource, pdesc : D3D12_SHADER_RESOURCE_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_shader_resource_view.unsafe_as(Proc(ID3D12Resource, D3D12_SHADER_RESOURCE_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_unordered_access_view(presource : ID3D12Resource, pcounterresource : ID3D12Resource, pdesc : D3D12_UNORDERED_ACCESS_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_unordered_access_view.unsafe_as(Proc(ID3D12Resource, ID3D12Resource, D3D12_UNORDERED_ACCESS_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pcounterresource, pdesc, destdescriptor)
  end
  def create_render_target_view(presource : ID3D12Resource, pdesc : D3D12_RENDER_TARGET_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_render_target_view.unsafe_as(Proc(ID3D12Resource, D3D12_RENDER_TARGET_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_depth_stencil_view(presource : ID3D12Resource, pdesc : D3D12_DEPTH_STENCIL_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_depth_stencil_view.unsafe_as(Proc(ID3D12Resource, D3D12_DEPTH_STENCIL_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_sampler(pdesc : D3D12_SAMPLER_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_sampler.unsafe_as(Proc(D3D12_SAMPLER_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(pdesc, destdescriptor)
  end
  def copy_descriptors(numdestdescriptorranges : UInt32, pdestdescriptorrangestarts : D3D12_CPU_DESCRIPTOR_HANDLE*, pdestdescriptorrangesizes : UInt32*, numsrcdescriptorranges : UInt32, psrcdescriptorrangestarts : D3D12_CPU_DESCRIPTOR_HANDLE*, psrcdescriptorrangesizes : UInt32*, descriptorheapstype : D3D12_DESCRIPTOR_HEAP_TYPE) : Void
    @lpVtbl.value.copy_descriptors.unsafe_as(Proc(UInt32, D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, UInt32, D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, D3D12_DESCRIPTOR_HEAP_TYPE, Void)).call(numdestdescriptorranges, pdestdescriptorrangestarts, pdestdescriptorrangesizes, numsrcdescriptorranges, psrcdescriptorrangestarts, psrcdescriptorrangesizes, descriptorheapstype)
  end
  def copy_descriptors_simple(numdescriptors : UInt32, destdescriptorrangestart : D3D12_CPU_DESCRIPTOR_HANDLE, srcdescriptorrangestart : D3D12_CPU_DESCRIPTOR_HANDLE, descriptorheapstype : D3D12_DESCRIPTOR_HEAP_TYPE) : Void
    @lpVtbl.value.copy_descriptors_simple.unsafe_as(Proc(UInt32, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_DESCRIPTOR_HEAP_TYPE, Void)).call(numdescriptors, destdescriptorrangestart, srcdescriptorrangestart, descriptorheapstype)
  end
  def get_resource_allocation_info(visiblemask : UInt32, numresourcedescs : UInt32, presourcedescs : D3D12_RESOURCE_DESC*) : D3D12_RESOURCE_ALLOCATION_INFO
    @lpVtbl.value.get_resource_allocation_info.unsafe_as(Proc(UInt32, UInt32, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_ALLOCATION_INFO)).call(visiblemask, numresourcedescs, presourcedescs)
  end
  def get_custom_heap_properties(nodemask : UInt32, heaptype : D3D12_HEAP_TYPE) : D3D12_HEAP_PROPERTIES
    @lpVtbl.value.get_custom_heap_properties.unsafe_as(Proc(UInt32, D3D12_HEAP_TYPE, D3D12_HEAP_PROPERTIES)).call(nodemask, heaptype)
  end
  def create_committed_resource(pheapproperties : D3D12_HEAP_PROPERTIES*, heapflags : D3D12_HEAP_FLAGS, pdesc : D3D12_RESOURCE_DESC*, initialresourcestate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riidresource : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_committed_resource.unsafe_as(Proc(D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pheapproperties, heapflags, pdesc, initialresourcestate, poptimizedclearvalue, riidresource, ppvresource)
  end
  def create_heap(pdesc : D3D12_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_heap.unsafe_as(Proc(D3D12_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppvheap)
  end
  def create_placed_resource(pheap : ID3D12Heap, heapoffset : UInt64, pdesc : D3D12_RESOURCE_DESC*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_placed_resource.unsafe_as(Proc(ID3D12Heap, UInt64, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pheap, heapoffset, pdesc, initialstate, poptimizedclearvalue, riid, ppvresource)
  end
  def create_reserved_resource(pdesc : D3D12_RESOURCE_DESC*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_reserved_resource.unsafe_as(Proc(D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pdesc, initialstate, poptimizedclearvalue, riid, ppvresource)
  end
  def create_shared_handle(pobject : ID3D12DeviceChild, pattributes : SECURITY_ATTRIBUTES*, access : UInt32, name : LibC::LPWSTR, phandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_shared_handle.unsafe_as(Proc(ID3D12DeviceChild, SECURITY_ATTRIBUTES*, UInt32, LibC::LPWSTR, LibC::HANDLE*, HRESULT)).call(pobject, pattributes, access, name, phandle)
  end
  def open_shared_handle(nthandle : LibC::HANDLE, riid : Guid*, ppvobj : Void**) : HRESULT
    @lpVtbl.value.open_shared_handle.unsafe_as(Proc(LibC::HANDLE, Guid*, Void**, HRESULT)).call(nthandle, riid, ppvobj)
  end
  def open_shared_handle_by_name(name : LibC::LPWSTR, access : UInt32, pnthandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.open_shared_handle_by_name.unsafe_as(Proc(LibC::LPWSTR, UInt32, LibC::HANDLE*, HRESULT)).call(name, access, pnthandle)
  end
  def make_resident(numobjects : UInt32, ppobjects : ID3D12Pageable*) : HRESULT
    @lpVtbl.value.make_resident.unsafe_as(Proc(UInt32, ID3D12Pageable*, HRESULT)).call(numobjects, ppobjects)
  end
  def evict(numobjects : UInt32, ppobjects : ID3D12Pageable*) : HRESULT
    @lpVtbl.value.evict.unsafe_as(Proc(UInt32, ID3D12Pageable*, HRESULT)).call(numobjects, ppobjects)
  end
  def create_fence(initialvalue : UInt64, flags : D3D12_FENCE_FLAGS, riid : Guid*, ppfence : Void**) : HRESULT
    @lpVtbl.value.create_fence.unsafe_as(Proc(UInt64, D3D12_FENCE_FLAGS, Guid*, Void**, HRESULT)).call(initialvalue, flags, riid, ppfence)
  end
  def get_device_removed_reason : HRESULT
    @lpVtbl.value.get_device_removed_reason.unsafe_as(Proc(HRESULT)).call
  end
  def get_copyable_footprints(presourcedesc : D3D12_RESOURCE_DESC*, firstsubresource : UInt32, numsubresources : UInt32, baseoffset : UInt64, playouts : D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, pnumrows : UInt32*, prowsizeinbytes : UInt64*, ptotalbytes : UInt64*) : Void
    @lpVtbl.value.get_copyable_footprints.unsafe_as(Proc(D3D12_RESOURCE_DESC*, UInt32, UInt32, UInt64, D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, UInt32*, UInt64*, UInt64*, Void)).call(presourcedesc, firstsubresource, numsubresources, baseoffset, playouts, pnumrows, prowsizeinbytes, ptotalbytes)
  end
  def create_query_heap(pdesc : D3D12_QUERY_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_query_heap.unsafe_as(Proc(D3D12_QUERY_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppvheap)
  end
  def set_stable_power_state(enable : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_stable_power_state.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(enable)
  end
  def create_command_signature(pdesc : D3D12_COMMAND_SIGNATURE_DESC*, prootsignature : ID3D12RootSignature, riid : Guid*, ppvcommandsignature : Void**) : HRESULT
    @lpVtbl.value.create_command_signature.unsafe_as(Proc(D3D12_COMMAND_SIGNATURE_DESC*, ID3D12RootSignature, Guid*, Void**, HRESULT)).call(pdesc, prootsignature, riid, ppvcommandsignature)
  end
  def get_resource_tiling(ptiledresource : ID3D12Resource, pnumtilesforentireresource : UInt32*, ppackedmipdesc : D3D12_PACKED_MIP_INFO*, pstandardtileshapefornonpackedmips : D3D12_TILE_SHAPE*, pnumsubresourcetilings : UInt32*, firstsubresourcetilingtoget : UInt32, psubresourcetilingsfornonpackedmips : D3D12_SUBRESOURCE_TILING*) : Void
    @lpVtbl.value.get_resource_tiling.unsafe_as(Proc(ID3D12Resource, UInt32*, D3D12_PACKED_MIP_INFO*, D3D12_TILE_SHAPE*, UInt32*, UInt32, D3D12_SUBRESOURCE_TILING*, Void)).call(ptiledresource, pnumtilesforentireresource, ppackedmipdesc, pstandardtileshapefornonpackedmips, pnumsubresourcetilings, firstsubresourcetilingtoget, psubresourcetilingsfornonpackedmips)
  end
  def get_adapter_luid : LUID
    @lpVtbl.value.get_adapter_luid.unsafe_as(Proc(LUID)).call
  end
  def create_pipeline_library(plibraryblob : Void*, bloblength : LibC::UINT_PTR, riid : Guid*, pppipelinelibrary : Void**) : HRESULT
    @lpVtbl.value.create_pipeline_library.unsafe_as(Proc(Void*, LibC::UINT_PTR, Guid*, Void**, HRESULT)).call(plibraryblob, bloblength, riid, pppipelinelibrary)
  end
  def set_event_on_multiple_fence_completion(ppfences : ID3D12Fence*, pfencevalues : UInt64*, numfences : UInt32, flags : D3D12_MULTIPLE_FENCE_WAIT_FLAGS, hevent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.set_event_on_multiple_fence_completion.unsafe_as(Proc(ID3D12Fence*, UInt64*, UInt32, D3D12_MULTIPLE_FENCE_WAIT_FLAGS, LibC::HANDLE, HRESULT)).call(ppfences, pfencevalues, numfences, flags, hevent)
  end
  def set_residency_priority(numobjects : UInt32, ppobjects : ID3D12Pageable*, ppriorities : D3D12_RESIDENCY_PRIORITY*) : HRESULT
    @lpVtbl.value.set_residency_priority.unsafe_as(Proc(UInt32, ID3D12Pageable*, D3D12_RESIDENCY_PRIORITY*, HRESULT)).call(numobjects, ppobjects, ppriorities)
  end
  def create_pipeline_state(pdesc : D3D12_PIPELINE_STATE_STREAM_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_pipeline_state.unsafe_as(Proc(D3D12_PIPELINE_STATE_STREAM_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
  def open_existing_heap_from_address(paddress : Void*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.open_existing_heap_from_address.unsafe_as(Proc(Void*, Guid*, Void**, HRESULT)).call(paddress, riid, ppvheap)
  end
  def open_existing_heap_from_file_mapping(hfilemapping : LibC::HANDLE, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.open_existing_heap_from_file_mapping.unsafe_as(Proc(LibC::HANDLE, Guid*, Void**, HRESULT)).call(hfilemapping, riid, ppvheap)
  end
  def enqueue_make_resident(flags : D3D12_RESIDENCY_FLAGS, numobjects : UInt32, ppobjects : ID3D12Pageable*, pfencetosignal : ID3D12Fence, fencevaluetosignal : UInt64) : HRESULT
    @lpVtbl.value.enqueue_make_resident.unsafe_as(Proc(D3D12_RESIDENCY_FLAGS, UInt32, ID3D12Pageable*, ID3D12Fence, UInt64, HRESULT)).call(flags, numobjects, ppobjects, pfencetosignal, fencevaluetosignal)
  end
end
struct LibWin32::ID3D12ProtectedSession
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
  def get_status_fence(riid : Guid*, ppfence : Void**) : HRESULT
    @lpVtbl.value.get_status_fence.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppfence)
  end
  def get_session_status : D3D12_PROTECTED_SESSION_STATUS
    @lpVtbl.value.get_session_status.unsafe_as(Proc(D3D12_PROTECTED_SESSION_STATUS)).call
  end
end
struct LibWin32::ID3D12ProtectedResourceSession
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
  def get_status_fence(riid : Guid*, ppfence : Void**) : HRESULT
    @lpVtbl.value.get_status_fence.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppfence)
  end
  def get_session_status : D3D12_PROTECTED_SESSION_STATUS
    @lpVtbl.value.get_session_status.unsafe_as(Proc(D3D12_PROTECTED_SESSION_STATUS)).call
  end
  def get_desc : D3D12_PROTECTED_RESOURCE_SESSION_DESC
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D12_PROTECTED_RESOURCE_SESSION_DESC)).call
  end
end
struct LibWin32::ID3D12Device4
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_node_count : UInt32
    @lpVtbl.value.get_node_count.unsafe_as(Proc(UInt32)).call
  end
  def create_command_queue(pdesc : D3D12_COMMAND_QUEUE_DESC*, riid : Guid*, ppcommandqueue : Void**) : HRESULT
    @lpVtbl.value.create_command_queue.unsafe_as(Proc(D3D12_COMMAND_QUEUE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppcommandqueue)
  end
  def create_command_allocator(type : D3D12_COMMAND_LIST_TYPE, riid : Guid*, ppcommandallocator : Void**) : HRESULT
    @lpVtbl.value.create_command_allocator.unsafe_as(Proc(D3D12_COMMAND_LIST_TYPE, Guid*, Void**, HRESULT)).call(type, riid, ppcommandallocator)
  end
  def create_graphics_pipeline_state(pdesc : D3D12_GRAPHICS_PIPELINE_STATE_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_graphics_pipeline_state.unsafe_as(Proc(D3D12_GRAPHICS_PIPELINE_STATE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
  def create_compute_pipeline_state(pdesc : D3D12_COMPUTE_PIPELINE_STATE_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_compute_pipeline_state.unsafe_as(Proc(D3D12_COMPUTE_PIPELINE_STATE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
  def create_command_list(nodemask : UInt32, type : D3D12_COMMAND_LIST_TYPE, pcommandallocator : ID3D12CommandAllocator, pinitialstate : ID3D12PipelineState, riid : Guid*, ppcommandlist : Void**) : HRESULT
    @lpVtbl.value.create_command_list.unsafe_as(Proc(UInt32, D3D12_COMMAND_LIST_TYPE, ID3D12CommandAllocator, ID3D12PipelineState, Guid*, Void**, HRESULT)).call(nodemask, type, pcommandallocator, pinitialstate, riid, ppcommandlist)
  end
  def check_feature_support(feature : D3D12_FEATURE, pfeaturesupportdata : Void*, featuresupportdatasize : UInt32) : HRESULT
    @lpVtbl.value.check_feature_support.unsafe_as(Proc(D3D12_FEATURE, Void*, UInt32, HRESULT)).call(feature, pfeaturesupportdata, featuresupportdatasize)
  end
  def create_descriptor_heap(pdescriptorheapdesc : D3D12_DESCRIPTOR_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_descriptor_heap.unsafe_as(Proc(D3D12_DESCRIPTOR_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdescriptorheapdesc, riid, ppvheap)
  end
  def get_descriptor_handle_increment_size(descriptorheaptype : D3D12_DESCRIPTOR_HEAP_TYPE) : UInt32
    @lpVtbl.value.get_descriptor_handle_increment_size.unsafe_as(Proc(D3D12_DESCRIPTOR_HEAP_TYPE, UInt32)).call(descriptorheaptype)
  end
  def create_root_signature(nodemask : UInt32, pblobwithrootsignature : Void*, bloblengthinbytes : LibC::UINT_PTR, riid : Guid*, ppvrootsignature : Void**) : HRESULT
    @lpVtbl.value.create_root_signature.unsafe_as(Proc(UInt32, Void*, LibC::UINT_PTR, Guid*, Void**, HRESULT)).call(nodemask, pblobwithrootsignature, bloblengthinbytes, riid, ppvrootsignature)
  end
  def create_constant_buffer_view(pdesc : D3D12_CONSTANT_BUFFER_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_constant_buffer_view.unsafe_as(Proc(D3D12_CONSTANT_BUFFER_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(pdesc, destdescriptor)
  end
  def create_shader_resource_view(presource : ID3D12Resource, pdesc : D3D12_SHADER_RESOURCE_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_shader_resource_view.unsafe_as(Proc(ID3D12Resource, D3D12_SHADER_RESOURCE_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_unordered_access_view(presource : ID3D12Resource, pcounterresource : ID3D12Resource, pdesc : D3D12_UNORDERED_ACCESS_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_unordered_access_view.unsafe_as(Proc(ID3D12Resource, ID3D12Resource, D3D12_UNORDERED_ACCESS_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pcounterresource, pdesc, destdescriptor)
  end
  def create_render_target_view(presource : ID3D12Resource, pdesc : D3D12_RENDER_TARGET_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_render_target_view.unsafe_as(Proc(ID3D12Resource, D3D12_RENDER_TARGET_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_depth_stencil_view(presource : ID3D12Resource, pdesc : D3D12_DEPTH_STENCIL_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_depth_stencil_view.unsafe_as(Proc(ID3D12Resource, D3D12_DEPTH_STENCIL_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_sampler(pdesc : D3D12_SAMPLER_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_sampler.unsafe_as(Proc(D3D12_SAMPLER_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(pdesc, destdescriptor)
  end
  def copy_descriptors(numdestdescriptorranges : UInt32, pdestdescriptorrangestarts : D3D12_CPU_DESCRIPTOR_HANDLE*, pdestdescriptorrangesizes : UInt32*, numsrcdescriptorranges : UInt32, psrcdescriptorrangestarts : D3D12_CPU_DESCRIPTOR_HANDLE*, psrcdescriptorrangesizes : UInt32*, descriptorheapstype : D3D12_DESCRIPTOR_HEAP_TYPE) : Void
    @lpVtbl.value.copy_descriptors.unsafe_as(Proc(UInt32, D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, UInt32, D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, D3D12_DESCRIPTOR_HEAP_TYPE, Void)).call(numdestdescriptorranges, pdestdescriptorrangestarts, pdestdescriptorrangesizes, numsrcdescriptorranges, psrcdescriptorrangestarts, psrcdescriptorrangesizes, descriptorheapstype)
  end
  def copy_descriptors_simple(numdescriptors : UInt32, destdescriptorrangestart : D3D12_CPU_DESCRIPTOR_HANDLE, srcdescriptorrangestart : D3D12_CPU_DESCRIPTOR_HANDLE, descriptorheapstype : D3D12_DESCRIPTOR_HEAP_TYPE) : Void
    @lpVtbl.value.copy_descriptors_simple.unsafe_as(Proc(UInt32, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_DESCRIPTOR_HEAP_TYPE, Void)).call(numdescriptors, destdescriptorrangestart, srcdescriptorrangestart, descriptorheapstype)
  end
  def get_resource_allocation_info(visiblemask : UInt32, numresourcedescs : UInt32, presourcedescs : D3D12_RESOURCE_DESC*) : D3D12_RESOURCE_ALLOCATION_INFO
    @lpVtbl.value.get_resource_allocation_info.unsafe_as(Proc(UInt32, UInt32, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_ALLOCATION_INFO)).call(visiblemask, numresourcedescs, presourcedescs)
  end
  def get_custom_heap_properties(nodemask : UInt32, heaptype : D3D12_HEAP_TYPE) : D3D12_HEAP_PROPERTIES
    @lpVtbl.value.get_custom_heap_properties.unsafe_as(Proc(UInt32, D3D12_HEAP_TYPE, D3D12_HEAP_PROPERTIES)).call(nodemask, heaptype)
  end
  def create_committed_resource(pheapproperties : D3D12_HEAP_PROPERTIES*, heapflags : D3D12_HEAP_FLAGS, pdesc : D3D12_RESOURCE_DESC*, initialresourcestate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riidresource : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_committed_resource.unsafe_as(Proc(D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pheapproperties, heapflags, pdesc, initialresourcestate, poptimizedclearvalue, riidresource, ppvresource)
  end
  def create_heap(pdesc : D3D12_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_heap.unsafe_as(Proc(D3D12_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppvheap)
  end
  def create_placed_resource(pheap : ID3D12Heap, heapoffset : UInt64, pdesc : D3D12_RESOURCE_DESC*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_placed_resource.unsafe_as(Proc(ID3D12Heap, UInt64, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pheap, heapoffset, pdesc, initialstate, poptimizedclearvalue, riid, ppvresource)
  end
  def create_reserved_resource(pdesc : D3D12_RESOURCE_DESC*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_reserved_resource.unsafe_as(Proc(D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pdesc, initialstate, poptimizedclearvalue, riid, ppvresource)
  end
  def create_shared_handle(pobject : ID3D12DeviceChild, pattributes : SECURITY_ATTRIBUTES*, access : UInt32, name : LibC::LPWSTR, phandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_shared_handle.unsafe_as(Proc(ID3D12DeviceChild, SECURITY_ATTRIBUTES*, UInt32, LibC::LPWSTR, LibC::HANDLE*, HRESULT)).call(pobject, pattributes, access, name, phandle)
  end
  def open_shared_handle(nthandle : LibC::HANDLE, riid : Guid*, ppvobj : Void**) : HRESULT
    @lpVtbl.value.open_shared_handle.unsafe_as(Proc(LibC::HANDLE, Guid*, Void**, HRESULT)).call(nthandle, riid, ppvobj)
  end
  def open_shared_handle_by_name(name : LibC::LPWSTR, access : UInt32, pnthandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.open_shared_handle_by_name.unsafe_as(Proc(LibC::LPWSTR, UInt32, LibC::HANDLE*, HRESULT)).call(name, access, pnthandle)
  end
  def make_resident(numobjects : UInt32, ppobjects : ID3D12Pageable*) : HRESULT
    @lpVtbl.value.make_resident.unsafe_as(Proc(UInt32, ID3D12Pageable*, HRESULT)).call(numobjects, ppobjects)
  end
  def evict(numobjects : UInt32, ppobjects : ID3D12Pageable*) : HRESULT
    @lpVtbl.value.evict.unsafe_as(Proc(UInt32, ID3D12Pageable*, HRESULT)).call(numobjects, ppobjects)
  end
  def create_fence(initialvalue : UInt64, flags : D3D12_FENCE_FLAGS, riid : Guid*, ppfence : Void**) : HRESULT
    @lpVtbl.value.create_fence.unsafe_as(Proc(UInt64, D3D12_FENCE_FLAGS, Guid*, Void**, HRESULT)).call(initialvalue, flags, riid, ppfence)
  end
  def get_device_removed_reason : HRESULT
    @lpVtbl.value.get_device_removed_reason.unsafe_as(Proc(HRESULT)).call
  end
  def get_copyable_footprints(presourcedesc : D3D12_RESOURCE_DESC*, firstsubresource : UInt32, numsubresources : UInt32, baseoffset : UInt64, playouts : D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, pnumrows : UInt32*, prowsizeinbytes : UInt64*, ptotalbytes : UInt64*) : Void
    @lpVtbl.value.get_copyable_footprints.unsafe_as(Proc(D3D12_RESOURCE_DESC*, UInt32, UInt32, UInt64, D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, UInt32*, UInt64*, UInt64*, Void)).call(presourcedesc, firstsubresource, numsubresources, baseoffset, playouts, pnumrows, prowsizeinbytes, ptotalbytes)
  end
  def create_query_heap(pdesc : D3D12_QUERY_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_query_heap.unsafe_as(Proc(D3D12_QUERY_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppvheap)
  end
  def set_stable_power_state(enable : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_stable_power_state.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(enable)
  end
  def create_command_signature(pdesc : D3D12_COMMAND_SIGNATURE_DESC*, prootsignature : ID3D12RootSignature, riid : Guid*, ppvcommandsignature : Void**) : HRESULT
    @lpVtbl.value.create_command_signature.unsafe_as(Proc(D3D12_COMMAND_SIGNATURE_DESC*, ID3D12RootSignature, Guid*, Void**, HRESULT)).call(pdesc, prootsignature, riid, ppvcommandsignature)
  end
  def get_resource_tiling(ptiledresource : ID3D12Resource, pnumtilesforentireresource : UInt32*, ppackedmipdesc : D3D12_PACKED_MIP_INFO*, pstandardtileshapefornonpackedmips : D3D12_TILE_SHAPE*, pnumsubresourcetilings : UInt32*, firstsubresourcetilingtoget : UInt32, psubresourcetilingsfornonpackedmips : D3D12_SUBRESOURCE_TILING*) : Void
    @lpVtbl.value.get_resource_tiling.unsafe_as(Proc(ID3D12Resource, UInt32*, D3D12_PACKED_MIP_INFO*, D3D12_TILE_SHAPE*, UInt32*, UInt32, D3D12_SUBRESOURCE_TILING*, Void)).call(ptiledresource, pnumtilesforentireresource, ppackedmipdesc, pstandardtileshapefornonpackedmips, pnumsubresourcetilings, firstsubresourcetilingtoget, psubresourcetilingsfornonpackedmips)
  end
  def get_adapter_luid : LUID
    @lpVtbl.value.get_adapter_luid.unsafe_as(Proc(LUID)).call
  end
  def create_pipeline_library(plibraryblob : Void*, bloblength : LibC::UINT_PTR, riid : Guid*, pppipelinelibrary : Void**) : HRESULT
    @lpVtbl.value.create_pipeline_library.unsafe_as(Proc(Void*, LibC::UINT_PTR, Guid*, Void**, HRESULT)).call(plibraryblob, bloblength, riid, pppipelinelibrary)
  end
  def set_event_on_multiple_fence_completion(ppfences : ID3D12Fence*, pfencevalues : UInt64*, numfences : UInt32, flags : D3D12_MULTIPLE_FENCE_WAIT_FLAGS, hevent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.set_event_on_multiple_fence_completion.unsafe_as(Proc(ID3D12Fence*, UInt64*, UInt32, D3D12_MULTIPLE_FENCE_WAIT_FLAGS, LibC::HANDLE, HRESULT)).call(ppfences, pfencevalues, numfences, flags, hevent)
  end
  def set_residency_priority(numobjects : UInt32, ppobjects : ID3D12Pageable*, ppriorities : D3D12_RESIDENCY_PRIORITY*) : HRESULT
    @lpVtbl.value.set_residency_priority.unsafe_as(Proc(UInt32, ID3D12Pageable*, D3D12_RESIDENCY_PRIORITY*, HRESULT)).call(numobjects, ppobjects, ppriorities)
  end
  def create_pipeline_state(pdesc : D3D12_PIPELINE_STATE_STREAM_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_pipeline_state.unsafe_as(Proc(D3D12_PIPELINE_STATE_STREAM_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
  def open_existing_heap_from_address(paddress : Void*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.open_existing_heap_from_address.unsafe_as(Proc(Void*, Guid*, Void**, HRESULT)).call(paddress, riid, ppvheap)
  end
  def open_existing_heap_from_file_mapping(hfilemapping : LibC::HANDLE, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.open_existing_heap_from_file_mapping.unsafe_as(Proc(LibC::HANDLE, Guid*, Void**, HRESULT)).call(hfilemapping, riid, ppvheap)
  end
  def enqueue_make_resident(flags : D3D12_RESIDENCY_FLAGS, numobjects : UInt32, ppobjects : ID3D12Pageable*, pfencetosignal : ID3D12Fence, fencevaluetosignal : UInt64) : HRESULT
    @lpVtbl.value.enqueue_make_resident.unsafe_as(Proc(D3D12_RESIDENCY_FLAGS, UInt32, ID3D12Pageable*, ID3D12Fence, UInt64, HRESULT)).call(flags, numobjects, ppobjects, pfencetosignal, fencevaluetosignal)
  end
  def create_command_list1(nodemask : UInt32, type : D3D12_COMMAND_LIST_TYPE, flags : D3D12_COMMAND_LIST_FLAGS, riid : Guid*, ppcommandlist : Void**) : HRESULT
    @lpVtbl.value.create_command_list1.unsafe_as(Proc(UInt32, D3D12_COMMAND_LIST_TYPE, D3D12_COMMAND_LIST_FLAGS, Guid*, Void**, HRESULT)).call(nodemask, type, flags, riid, ppcommandlist)
  end
  def create_protected_resource_session(pdesc : D3D12_PROTECTED_RESOURCE_SESSION_DESC*, riid : Guid*, ppsession : Void**) : HRESULT
    @lpVtbl.value.create_protected_resource_session.unsafe_as(Proc(D3D12_PROTECTED_RESOURCE_SESSION_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppsession)
  end
  def create_committed_resource1(pheapproperties : D3D12_HEAP_PROPERTIES*, heapflags : D3D12_HEAP_FLAGS, pdesc : D3D12_RESOURCE_DESC*, initialresourcestate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, pprotectedsession : ID3D12ProtectedResourceSession, riidresource : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_committed_resource1.unsafe_as(Proc(D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)).call(pheapproperties, heapflags, pdesc, initialresourcestate, poptimizedclearvalue, pprotectedsession, riidresource, ppvresource)
  end
  def create_heap1(pdesc : D3D12_HEAP_DESC*, pprotectedsession : ID3D12ProtectedResourceSession, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_heap1.unsafe_as(Proc(D3D12_HEAP_DESC*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)).call(pdesc, pprotectedsession, riid, ppvheap)
  end
  def create_reserved_resource1(pdesc : D3D12_RESOURCE_DESC*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, pprotectedsession : ID3D12ProtectedResourceSession, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_reserved_resource1.unsafe_as(Proc(D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)).call(pdesc, initialstate, poptimizedclearvalue, pprotectedsession, riid, ppvresource)
  end
  def get_resource_allocation_info1(visiblemask : UInt32, numresourcedescs : UInt32, presourcedescs : D3D12_RESOURCE_DESC*, presourceallocationinfo1 : D3D12_RESOURCE_ALLOCATION_INFO1*) : D3D12_RESOURCE_ALLOCATION_INFO
    @lpVtbl.value.get_resource_allocation_info1.unsafe_as(Proc(UInt32, UInt32, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_ALLOCATION_INFO1*, D3D12_RESOURCE_ALLOCATION_INFO)).call(visiblemask, numresourcedescs, presourcedescs, presourceallocationinfo1)
  end
end
struct LibWin32::ID3D12LifetimeOwner
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def lifetime_state_updated(newstate : D3D12_LIFETIME_STATE) : Void
    @lpVtbl.value.lifetime_state_updated.unsafe_as(Proc(D3D12_LIFETIME_STATE, Void)).call(newstate)
  end
end
struct LibWin32::ID3D12SwapChainAssistant
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_luid : LUID
    @lpVtbl.value.get_luid.unsafe_as(Proc(LUID)).call
  end
  def get_swap_chain_object(riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_swap_chain_object.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppv)
  end
  def get_current_resource_and_command_queue(riidresource : Guid*, ppvresource : Void**, riidqueue : Guid*, ppvqueue : Void**) : HRESULT
    @lpVtbl.value.get_current_resource_and_command_queue.unsafe_as(Proc(Guid*, Void**, Guid*, Void**, HRESULT)).call(riidresource, ppvresource, riidqueue, ppvqueue)
  end
  def insert_implicit_sync : HRESULT
    @lpVtbl.value.insert_implicit_sync.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::ID3D12LifetimeTracker
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
  def destroy_owned_object(pobject : ID3D12DeviceChild) : HRESULT
    @lpVtbl.value.destroy_owned_object.unsafe_as(Proc(ID3D12DeviceChild, HRESULT)).call(pobject)
  end
end
struct LibWin32::ID3D12StateObject
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
end
struct LibWin32::ID3D12StateObjectProperties
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_shader_identifier(pexportname : LibC::LPWSTR) : Void*
    @lpVtbl.value.get_shader_identifier.unsafe_as(Proc(LibC::LPWSTR, Void**)).call(pexportname)
  end
  def get_shader_stack_size(pexportname : LibC::LPWSTR) : UInt64
    @lpVtbl.value.get_shader_stack_size.unsafe_as(Proc(LibC::LPWSTR, UInt64)).call(pexportname)
  end
  def get_pipeline_stack_size : UInt64
    @lpVtbl.value.get_pipeline_stack_size.unsafe_as(Proc(UInt64)).call
  end
  def set_pipeline_stack_size(pipelinestacksizeinbytes : UInt64) : Void
    @lpVtbl.value.set_pipeline_stack_size.unsafe_as(Proc(UInt64, Void)).call(pipelinestacksizeinbytes)
  end
end
struct LibWin32::ID3D12Device5
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_node_count : UInt32
    @lpVtbl.value.get_node_count.unsafe_as(Proc(UInt32)).call
  end
  def create_command_queue(pdesc : D3D12_COMMAND_QUEUE_DESC*, riid : Guid*, ppcommandqueue : Void**) : HRESULT
    @lpVtbl.value.create_command_queue.unsafe_as(Proc(D3D12_COMMAND_QUEUE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppcommandqueue)
  end
  def create_command_allocator(type : D3D12_COMMAND_LIST_TYPE, riid : Guid*, ppcommandallocator : Void**) : HRESULT
    @lpVtbl.value.create_command_allocator.unsafe_as(Proc(D3D12_COMMAND_LIST_TYPE, Guid*, Void**, HRESULT)).call(type, riid, ppcommandallocator)
  end
  def create_graphics_pipeline_state(pdesc : D3D12_GRAPHICS_PIPELINE_STATE_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_graphics_pipeline_state.unsafe_as(Proc(D3D12_GRAPHICS_PIPELINE_STATE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
  def create_compute_pipeline_state(pdesc : D3D12_COMPUTE_PIPELINE_STATE_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_compute_pipeline_state.unsafe_as(Proc(D3D12_COMPUTE_PIPELINE_STATE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
  def create_command_list(nodemask : UInt32, type : D3D12_COMMAND_LIST_TYPE, pcommandallocator : ID3D12CommandAllocator, pinitialstate : ID3D12PipelineState, riid : Guid*, ppcommandlist : Void**) : HRESULT
    @lpVtbl.value.create_command_list.unsafe_as(Proc(UInt32, D3D12_COMMAND_LIST_TYPE, ID3D12CommandAllocator, ID3D12PipelineState, Guid*, Void**, HRESULT)).call(nodemask, type, pcommandallocator, pinitialstate, riid, ppcommandlist)
  end
  def check_feature_support(feature : D3D12_FEATURE, pfeaturesupportdata : Void*, featuresupportdatasize : UInt32) : HRESULT
    @lpVtbl.value.check_feature_support.unsafe_as(Proc(D3D12_FEATURE, Void*, UInt32, HRESULT)).call(feature, pfeaturesupportdata, featuresupportdatasize)
  end
  def create_descriptor_heap(pdescriptorheapdesc : D3D12_DESCRIPTOR_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_descriptor_heap.unsafe_as(Proc(D3D12_DESCRIPTOR_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdescriptorheapdesc, riid, ppvheap)
  end
  def get_descriptor_handle_increment_size(descriptorheaptype : D3D12_DESCRIPTOR_HEAP_TYPE) : UInt32
    @lpVtbl.value.get_descriptor_handle_increment_size.unsafe_as(Proc(D3D12_DESCRIPTOR_HEAP_TYPE, UInt32)).call(descriptorheaptype)
  end
  def create_root_signature(nodemask : UInt32, pblobwithrootsignature : Void*, bloblengthinbytes : LibC::UINT_PTR, riid : Guid*, ppvrootsignature : Void**) : HRESULT
    @lpVtbl.value.create_root_signature.unsafe_as(Proc(UInt32, Void*, LibC::UINT_PTR, Guid*, Void**, HRESULT)).call(nodemask, pblobwithrootsignature, bloblengthinbytes, riid, ppvrootsignature)
  end
  def create_constant_buffer_view(pdesc : D3D12_CONSTANT_BUFFER_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_constant_buffer_view.unsafe_as(Proc(D3D12_CONSTANT_BUFFER_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(pdesc, destdescriptor)
  end
  def create_shader_resource_view(presource : ID3D12Resource, pdesc : D3D12_SHADER_RESOURCE_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_shader_resource_view.unsafe_as(Proc(ID3D12Resource, D3D12_SHADER_RESOURCE_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_unordered_access_view(presource : ID3D12Resource, pcounterresource : ID3D12Resource, pdesc : D3D12_UNORDERED_ACCESS_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_unordered_access_view.unsafe_as(Proc(ID3D12Resource, ID3D12Resource, D3D12_UNORDERED_ACCESS_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pcounterresource, pdesc, destdescriptor)
  end
  def create_render_target_view(presource : ID3D12Resource, pdesc : D3D12_RENDER_TARGET_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_render_target_view.unsafe_as(Proc(ID3D12Resource, D3D12_RENDER_TARGET_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_depth_stencil_view(presource : ID3D12Resource, pdesc : D3D12_DEPTH_STENCIL_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_depth_stencil_view.unsafe_as(Proc(ID3D12Resource, D3D12_DEPTH_STENCIL_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_sampler(pdesc : D3D12_SAMPLER_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_sampler.unsafe_as(Proc(D3D12_SAMPLER_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(pdesc, destdescriptor)
  end
  def copy_descriptors(numdestdescriptorranges : UInt32, pdestdescriptorrangestarts : D3D12_CPU_DESCRIPTOR_HANDLE*, pdestdescriptorrangesizes : UInt32*, numsrcdescriptorranges : UInt32, psrcdescriptorrangestarts : D3D12_CPU_DESCRIPTOR_HANDLE*, psrcdescriptorrangesizes : UInt32*, descriptorheapstype : D3D12_DESCRIPTOR_HEAP_TYPE) : Void
    @lpVtbl.value.copy_descriptors.unsafe_as(Proc(UInt32, D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, UInt32, D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, D3D12_DESCRIPTOR_HEAP_TYPE, Void)).call(numdestdescriptorranges, pdestdescriptorrangestarts, pdestdescriptorrangesizes, numsrcdescriptorranges, psrcdescriptorrangestarts, psrcdescriptorrangesizes, descriptorheapstype)
  end
  def copy_descriptors_simple(numdescriptors : UInt32, destdescriptorrangestart : D3D12_CPU_DESCRIPTOR_HANDLE, srcdescriptorrangestart : D3D12_CPU_DESCRIPTOR_HANDLE, descriptorheapstype : D3D12_DESCRIPTOR_HEAP_TYPE) : Void
    @lpVtbl.value.copy_descriptors_simple.unsafe_as(Proc(UInt32, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_DESCRIPTOR_HEAP_TYPE, Void)).call(numdescriptors, destdescriptorrangestart, srcdescriptorrangestart, descriptorheapstype)
  end
  def get_resource_allocation_info(visiblemask : UInt32, numresourcedescs : UInt32, presourcedescs : D3D12_RESOURCE_DESC*) : D3D12_RESOURCE_ALLOCATION_INFO
    @lpVtbl.value.get_resource_allocation_info.unsafe_as(Proc(UInt32, UInt32, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_ALLOCATION_INFO)).call(visiblemask, numresourcedescs, presourcedescs)
  end
  def get_custom_heap_properties(nodemask : UInt32, heaptype : D3D12_HEAP_TYPE) : D3D12_HEAP_PROPERTIES
    @lpVtbl.value.get_custom_heap_properties.unsafe_as(Proc(UInt32, D3D12_HEAP_TYPE, D3D12_HEAP_PROPERTIES)).call(nodemask, heaptype)
  end
  def create_committed_resource(pheapproperties : D3D12_HEAP_PROPERTIES*, heapflags : D3D12_HEAP_FLAGS, pdesc : D3D12_RESOURCE_DESC*, initialresourcestate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riidresource : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_committed_resource.unsafe_as(Proc(D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pheapproperties, heapflags, pdesc, initialresourcestate, poptimizedclearvalue, riidresource, ppvresource)
  end
  def create_heap(pdesc : D3D12_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_heap.unsafe_as(Proc(D3D12_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppvheap)
  end
  def create_placed_resource(pheap : ID3D12Heap, heapoffset : UInt64, pdesc : D3D12_RESOURCE_DESC*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_placed_resource.unsafe_as(Proc(ID3D12Heap, UInt64, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pheap, heapoffset, pdesc, initialstate, poptimizedclearvalue, riid, ppvresource)
  end
  def create_reserved_resource(pdesc : D3D12_RESOURCE_DESC*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_reserved_resource.unsafe_as(Proc(D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pdesc, initialstate, poptimizedclearvalue, riid, ppvresource)
  end
  def create_shared_handle(pobject : ID3D12DeviceChild, pattributes : SECURITY_ATTRIBUTES*, access : UInt32, name : LibC::LPWSTR, phandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_shared_handle.unsafe_as(Proc(ID3D12DeviceChild, SECURITY_ATTRIBUTES*, UInt32, LibC::LPWSTR, LibC::HANDLE*, HRESULT)).call(pobject, pattributes, access, name, phandle)
  end
  def open_shared_handle(nthandle : LibC::HANDLE, riid : Guid*, ppvobj : Void**) : HRESULT
    @lpVtbl.value.open_shared_handle.unsafe_as(Proc(LibC::HANDLE, Guid*, Void**, HRESULT)).call(nthandle, riid, ppvobj)
  end
  def open_shared_handle_by_name(name : LibC::LPWSTR, access : UInt32, pnthandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.open_shared_handle_by_name.unsafe_as(Proc(LibC::LPWSTR, UInt32, LibC::HANDLE*, HRESULT)).call(name, access, pnthandle)
  end
  def make_resident(numobjects : UInt32, ppobjects : ID3D12Pageable*) : HRESULT
    @lpVtbl.value.make_resident.unsafe_as(Proc(UInt32, ID3D12Pageable*, HRESULT)).call(numobjects, ppobjects)
  end
  def evict(numobjects : UInt32, ppobjects : ID3D12Pageable*) : HRESULT
    @lpVtbl.value.evict.unsafe_as(Proc(UInt32, ID3D12Pageable*, HRESULT)).call(numobjects, ppobjects)
  end
  def create_fence(initialvalue : UInt64, flags : D3D12_FENCE_FLAGS, riid : Guid*, ppfence : Void**) : HRESULT
    @lpVtbl.value.create_fence.unsafe_as(Proc(UInt64, D3D12_FENCE_FLAGS, Guid*, Void**, HRESULT)).call(initialvalue, flags, riid, ppfence)
  end
  def get_device_removed_reason : HRESULT
    @lpVtbl.value.get_device_removed_reason.unsafe_as(Proc(HRESULT)).call
  end
  def get_copyable_footprints(presourcedesc : D3D12_RESOURCE_DESC*, firstsubresource : UInt32, numsubresources : UInt32, baseoffset : UInt64, playouts : D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, pnumrows : UInt32*, prowsizeinbytes : UInt64*, ptotalbytes : UInt64*) : Void
    @lpVtbl.value.get_copyable_footprints.unsafe_as(Proc(D3D12_RESOURCE_DESC*, UInt32, UInt32, UInt64, D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, UInt32*, UInt64*, UInt64*, Void)).call(presourcedesc, firstsubresource, numsubresources, baseoffset, playouts, pnumrows, prowsizeinbytes, ptotalbytes)
  end
  def create_query_heap(pdesc : D3D12_QUERY_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_query_heap.unsafe_as(Proc(D3D12_QUERY_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppvheap)
  end
  def set_stable_power_state(enable : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_stable_power_state.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(enable)
  end
  def create_command_signature(pdesc : D3D12_COMMAND_SIGNATURE_DESC*, prootsignature : ID3D12RootSignature, riid : Guid*, ppvcommandsignature : Void**) : HRESULT
    @lpVtbl.value.create_command_signature.unsafe_as(Proc(D3D12_COMMAND_SIGNATURE_DESC*, ID3D12RootSignature, Guid*, Void**, HRESULT)).call(pdesc, prootsignature, riid, ppvcommandsignature)
  end
  def get_resource_tiling(ptiledresource : ID3D12Resource, pnumtilesforentireresource : UInt32*, ppackedmipdesc : D3D12_PACKED_MIP_INFO*, pstandardtileshapefornonpackedmips : D3D12_TILE_SHAPE*, pnumsubresourcetilings : UInt32*, firstsubresourcetilingtoget : UInt32, psubresourcetilingsfornonpackedmips : D3D12_SUBRESOURCE_TILING*) : Void
    @lpVtbl.value.get_resource_tiling.unsafe_as(Proc(ID3D12Resource, UInt32*, D3D12_PACKED_MIP_INFO*, D3D12_TILE_SHAPE*, UInt32*, UInt32, D3D12_SUBRESOURCE_TILING*, Void)).call(ptiledresource, pnumtilesforentireresource, ppackedmipdesc, pstandardtileshapefornonpackedmips, pnumsubresourcetilings, firstsubresourcetilingtoget, psubresourcetilingsfornonpackedmips)
  end
  def get_adapter_luid : LUID
    @lpVtbl.value.get_adapter_luid.unsafe_as(Proc(LUID)).call
  end
  def create_pipeline_library(plibraryblob : Void*, bloblength : LibC::UINT_PTR, riid : Guid*, pppipelinelibrary : Void**) : HRESULT
    @lpVtbl.value.create_pipeline_library.unsafe_as(Proc(Void*, LibC::UINT_PTR, Guid*, Void**, HRESULT)).call(plibraryblob, bloblength, riid, pppipelinelibrary)
  end
  def set_event_on_multiple_fence_completion(ppfences : ID3D12Fence*, pfencevalues : UInt64*, numfences : UInt32, flags : D3D12_MULTIPLE_FENCE_WAIT_FLAGS, hevent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.set_event_on_multiple_fence_completion.unsafe_as(Proc(ID3D12Fence*, UInt64*, UInt32, D3D12_MULTIPLE_FENCE_WAIT_FLAGS, LibC::HANDLE, HRESULT)).call(ppfences, pfencevalues, numfences, flags, hevent)
  end
  def set_residency_priority(numobjects : UInt32, ppobjects : ID3D12Pageable*, ppriorities : D3D12_RESIDENCY_PRIORITY*) : HRESULT
    @lpVtbl.value.set_residency_priority.unsafe_as(Proc(UInt32, ID3D12Pageable*, D3D12_RESIDENCY_PRIORITY*, HRESULT)).call(numobjects, ppobjects, ppriorities)
  end
  def create_pipeline_state(pdesc : D3D12_PIPELINE_STATE_STREAM_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_pipeline_state.unsafe_as(Proc(D3D12_PIPELINE_STATE_STREAM_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
  def open_existing_heap_from_address(paddress : Void*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.open_existing_heap_from_address.unsafe_as(Proc(Void*, Guid*, Void**, HRESULT)).call(paddress, riid, ppvheap)
  end
  def open_existing_heap_from_file_mapping(hfilemapping : LibC::HANDLE, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.open_existing_heap_from_file_mapping.unsafe_as(Proc(LibC::HANDLE, Guid*, Void**, HRESULT)).call(hfilemapping, riid, ppvheap)
  end
  def enqueue_make_resident(flags : D3D12_RESIDENCY_FLAGS, numobjects : UInt32, ppobjects : ID3D12Pageable*, pfencetosignal : ID3D12Fence, fencevaluetosignal : UInt64) : HRESULT
    @lpVtbl.value.enqueue_make_resident.unsafe_as(Proc(D3D12_RESIDENCY_FLAGS, UInt32, ID3D12Pageable*, ID3D12Fence, UInt64, HRESULT)).call(flags, numobjects, ppobjects, pfencetosignal, fencevaluetosignal)
  end
  def create_command_list1(nodemask : UInt32, type : D3D12_COMMAND_LIST_TYPE, flags : D3D12_COMMAND_LIST_FLAGS, riid : Guid*, ppcommandlist : Void**) : HRESULT
    @lpVtbl.value.create_command_list1.unsafe_as(Proc(UInt32, D3D12_COMMAND_LIST_TYPE, D3D12_COMMAND_LIST_FLAGS, Guid*, Void**, HRESULT)).call(nodemask, type, flags, riid, ppcommandlist)
  end
  def create_protected_resource_session(pdesc : D3D12_PROTECTED_RESOURCE_SESSION_DESC*, riid : Guid*, ppsession : Void**) : HRESULT
    @lpVtbl.value.create_protected_resource_session.unsafe_as(Proc(D3D12_PROTECTED_RESOURCE_SESSION_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppsession)
  end
  def create_committed_resource1(pheapproperties : D3D12_HEAP_PROPERTIES*, heapflags : D3D12_HEAP_FLAGS, pdesc : D3D12_RESOURCE_DESC*, initialresourcestate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, pprotectedsession : ID3D12ProtectedResourceSession, riidresource : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_committed_resource1.unsafe_as(Proc(D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)).call(pheapproperties, heapflags, pdesc, initialresourcestate, poptimizedclearvalue, pprotectedsession, riidresource, ppvresource)
  end
  def create_heap1(pdesc : D3D12_HEAP_DESC*, pprotectedsession : ID3D12ProtectedResourceSession, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_heap1.unsafe_as(Proc(D3D12_HEAP_DESC*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)).call(pdesc, pprotectedsession, riid, ppvheap)
  end
  def create_reserved_resource1(pdesc : D3D12_RESOURCE_DESC*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, pprotectedsession : ID3D12ProtectedResourceSession, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_reserved_resource1.unsafe_as(Proc(D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)).call(pdesc, initialstate, poptimizedclearvalue, pprotectedsession, riid, ppvresource)
  end
  def get_resource_allocation_info1(visiblemask : UInt32, numresourcedescs : UInt32, presourcedescs : D3D12_RESOURCE_DESC*, presourceallocationinfo1 : D3D12_RESOURCE_ALLOCATION_INFO1*) : D3D12_RESOURCE_ALLOCATION_INFO
    @lpVtbl.value.get_resource_allocation_info1.unsafe_as(Proc(UInt32, UInt32, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_ALLOCATION_INFO1*, D3D12_RESOURCE_ALLOCATION_INFO)).call(visiblemask, numresourcedescs, presourcedescs, presourceallocationinfo1)
  end
  def create_lifetime_tracker(powner : ID3D12LifetimeOwner, riid : Guid*, ppvtracker : Void**) : HRESULT
    @lpVtbl.value.create_lifetime_tracker.unsafe_as(Proc(ID3D12LifetimeOwner, Guid*, Void**, HRESULT)).call(powner, riid, ppvtracker)
  end
  def remove_device : Void
    @lpVtbl.value.remove_device.unsafe_as(Proc(Void)).call
  end
  def enumerate_meta_commands(pnummetacommands : UInt32*, pdescs : D3D12_META_COMMAND_DESC*) : HRESULT
    @lpVtbl.value.enumerate_meta_commands.unsafe_as(Proc(UInt32*, D3D12_META_COMMAND_DESC*, HRESULT)).call(pnummetacommands, pdescs)
  end
  def enumerate_meta_command_parameters(commandid : Guid*, stage : D3D12_META_COMMAND_PARAMETER_STAGE, ptotalstructuresizeinbytes : UInt32*, pparametercount : UInt32*, pparameterdescs : D3D12_META_COMMAND_PARAMETER_DESC*) : HRESULT
    @lpVtbl.value.enumerate_meta_command_parameters.unsafe_as(Proc(Guid*, D3D12_META_COMMAND_PARAMETER_STAGE, UInt32*, UInt32*, D3D12_META_COMMAND_PARAMETER_DESC*, HRESULT)).call(commandid, stage, ptotalstructuresizeinbytes, pparametercount, pparameterdescs)
  end
  def create_meta_command(commandid : Guid*, nodemask : UInt32, pcreationparametersdata : Void*, creationparametersdatasizeinbytes : LibC::UINT_PTR, riid : Guid*, ppmetacommand : Void**) : HRESULT
    @lpVtbl.value.create_meta_command.unsafe_as(Proc(Guid*, UInt32, Void*, LibC::UINT_PTR, Guid*, Void**, HRESULT)).call(commandid, nodemask, pcreationparametersdata, creationparametersdatasizeinbytes, riid, ppmetacommand)
  end
  def create_state_object(pdesc : D3D12_STATE_OBJECT_DESC*, riid : Guid*, ppstateobject : Void**) : HRESULT
    @lpVtbl.value.create_state_object.unsafe_as(Proc(D3D12_STATE_OBJECT_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppstateobject)
  end
  def get_raytracing_acceleration_structure_prebuild_info(pdesc : D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS*, pinfo : D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO*) : Void
    @lpVtbl.value.get_raytracing_acceleration_structure_prebuild_info.unsafe_as(Proc(D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS*, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO*, Void)).call(pdesc, pinfo)
  end
  def check_driver_matching_identifier(serializeddatatype : D3D12_SERIALIZED_DATA_TYPE, pidentifiertocheck : D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER*) : D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS
    @lpVtbl.value.check_driver_matching_identifier.unsafe_as(Proc(D3D12_SERIALIZED_DATA_TYPE, D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER*, D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS)).call(serializeddatatype, pidentifiertocheck)
  end
end
struct LibWin32::ID3D12DeviceRemovedExtendedDataSettings
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_auto_breadcrumbs_enablement(enablement : D3D12_DRED_ENABLEMENT) : Void
    @lpVtbl.value.set_auto_breadcrumbs_enablement.unsafe_as(Proc(D3D12_DRED_ENABLEMENT, Void)).call(enablement)
  end
  def set_page_fault_enablement(enablement : D3D12_DRED_ENABLEMENT) : Void
    @lpVtbl.value.set_page_fault_enablement.unsafe_as(Proc(D3D12_DRED_ENABLEMENT, Void)).call(enablement)
  end
  def set_watson_dump_enablement(enablement : D3D12_DRED_ENABLEMENT) : Void
    @lpVtbl.value.set_watson_dump_enablement.unsafe_as(Proc(D3D12_DRED_ENABLEMENT, Void)).call(enablement)
  end
end
struct LibWin32::ID3D12DeviceRemovedExtendedDataSettings1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_auto_breadcrumbs_enablement(enablement : D3D12_DRED_ENABLEMENT) : Void
    @lpVtbl.value.set_auto_breadcrumbs_enablement.unsafe_as(Proc(D3D12_DRED_ENABLEMENT, Void)).call(enablement)
  end
  def set_page_fault_enablement(enablement : D3D12_DRED_ENABLEMENT) : Void
    @lpVtbl.value.set_page_fault_enablement.unsafe_as(Proc(D3D12_DRED_ENABLEMENT, Void)).call(enablement)
  end
  def set_watson_dump_enablement(enablement : D3D12_DRED_ENABLEMENT) : Void
    @lpVtbl.value.set_watson_dump_enablement.unsafe_as(Proc(D3D12_DRED_ENABLEMENT, Void)).call(enablement)
  end
  def set_breadcrumb_context_enablement(enablement : D3D12_DRED_ENABLEMENT) : Void
    @lpVtbl.value.set_breadcrumb_context_enablement.unsafe_as(Proc(D3D12_DRED_ENABLEMENT, Void)).call(enablement)
  end
end
struct LibWin32::ID3D12DeviceRemovedExtendedData
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_auto_breadcrumbs_output(poutput : D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT*) : HRESULT
    @lpVtbl.value.get_auto_breadcrumbs_output.unsafe_as(Proc(D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT*, HRESULT)).call(poutput)
  end
  def get_page_fault_allocation_output(poutput : D3D12_DRED_PAGE_FAULT_OUTPUT*) : HRESULT
    @lpVtbl.value.get_page_fault_allocation_output.unsafe_as(Proc(D3D12_DRED_PAGE_FAULT_OUTPUT*, HRESULT)).call(poutput)
  end
end
struct LibWin32::ID3D12DeviceRemovedExtendedData1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_auto_breadcrumbs_output(poutput : D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT*) : HRESULT
    @lpVtbl.value.get_auto_breadcrumbs_output.unsafe_as(Proc(D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT*, HRESULT)).call(poutput)
  end
  def get_page_fault_allocation_output(poutput : D3D12_DRED_PAGE_FAULT_OUTPUT*) : HRESULT
    @lpVtbl.value.get_page_fault_allocation_output.unsafe_as(Proc(D3D12_DRED_PAGE_FAULT_OUTPUT*, HRESULT)).call(poutput)
  end
  def get_auto_breadcrumbs_output1(poutput : D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1*) : HRESULT
    @lpVtbl.value.get_auto_breadcrumbs_output1.unsafe_as(Proc(D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1*, HRESULT)).call(poutput)
  end
  def get_page_fault_allocation_output1(poutput : D3D12_DRED_PAGE_FAULT_OUTPUT1*) : HRESULT
    @lpVtbl.value.get_page_fault_allocation_output1.unsafe_as(Proc(D3D12_DRED_PAGE_FAULT_OUTPUT1*, HRESULT)).call(poutput)
  end
end
struct LibWin32::ID3D12DeviceRemovedExtendedData2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_auto_breadcrumbs_output(poutput : D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT*) : HRESULT
    @lpVtbl.value.get_auto_breadcrumbs_output.unsafe_as(Proc(D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT*, HRESULT)).call(poutput)
  end
  def get_page_fault_allocation_output(poutput : D3D12_DRED_PAGE_FAULT_OUTPUT*) : HRESULT
    @lpVtbl.value.get_page_fault_allocation_output.unsafe_as(Proc(D3D12_DRED_PAGE_FAULT_OUTPUT*, HRESULT)).call(poutput)
  end
  def get_auto_breadcrumbs_output1(poutput : D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1*) : HRESULT
    @lpVtbl.value.get_auto_breadcrumbs_output1.unsafe_as(Proc(D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1*, HRESULT)).call(poutput)
  end
  def get_page_fault_allocation_output1(poutput : D3D12_DRED_PAGE_FAULT_OUTPUT1*) : HRESULT
    @lpVtbl.value.get_page_fault_allocation_output1.unsafe_as(Proc(D3D12_DRED_PAGE_FAULT_OUTPUT1*, HRESULT)).call(poutput)
  end
  def get_page_fault_allocation_output2(poutput : D3D12_DRED_PAGE_FAULT_OUTPUT2*) : HRESULT
    @lpVtbl.value.get_page_fault_allocation_output2.unsafe_as(Proc(D3D12_DRED_PAGE_FAULT_OUTPUT2*, HRESULT)).call(poutput)
  end
  def get_device_state : D3D12_DRED_DEVICE_STATE
    @lpVtbl.value.get_device_state.unsafe_as(Proc(D3D12_DRED_DEVICE_STATE)).call
  end
end
struct LibWin32::ID3D12Device6
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_node_count : UInt32
    @lpVtbl.value.get_node_count.unsafe_as(Proc(UInt32)).call
  end
  def create_command_queue(pdesc : D3D12_COMMAND_QUEUE_DESC*, riid : Guid*, ppcommandqueue : Void**) : HRESULT
    @lpVtbl.value.create_command_queue.unsafe_as(Proc(D3D12_COMMAND_QUEUE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppcommandqueue)
  end
  def create_command_allocator(type : D3D12_COMMAND_LIST_TYPE, riid : Guid*, ppcommandallocator : Void**) : HRESULT
    @lpVtbl.value.create_command_allocator.unsafe_as(Proc(D3D12_COMMAND_LIST_TYPE, Guid*, Void**, HRESULT)).call(type, riid, ppcommandallocator)
  end
  def create_graphics_pipeline_state(pdesc : D3D12_GRAPHICS_PIPELINE_STATE_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_graphics_pipeline_state.unsafe_as(Proc(D3D12_GRAPHICS_PIPELINE_STATE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
  def create_compute_pipeline_state(pdesc : D3D12_COMPUTE_PIPELINE_STATE_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_compute_pipeline_state.unsafe_as(Proc(D3D12_COMPUTE_PIPELINE_STATE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
  def create_command_list(nodemask : UInt32, type : D3D12_COMMAND_LIST_TYPE, pcommandallocator : ID3D12CommandAllocator, pinitialstate : ID3D12PipelineState, riid : Guid*, ppcommandlist : Void**) : HRESULT
    @lpVtbl.value.create_command_list.unsafe_as(Proc(UInt32, D3D12_COMMAND_LIST_TYPE, ID3D12CommandAllocator, ID3D12PipelineState, Guid*, Void**, HRESULT)).call(nodemask, type, pcommandallocator, pinitialstate, riid, ppcommandlist)
  end
  def check_feature_support(feature : D3D12_FEATURE, pfeaturesupportdata : Void*, featuresupportdatasize : UInt32) : HRESULT
    @lpVtbl.value.check_feature_support.unsafe_as(Proc(D3D12_FEATURE, Void*, UInt32, HRESULT)).call(feature, pfeaturesupportdata, featuresupportdatasize)
  end
  def create_descriptor_heap(pdescriptorheapdesc : D3D12_DESCRIPTOR_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_descriptor_heap.unsafe_as(Proc(D3D12_DESCRIPTOR_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdescriptorheapdesc, riid, ppvheap)
  end
  def get_descriptor_handle_increment_size(descriptorheaptype : D3D12_DESCRIPTOR_HEAP_TYPE) : UInt32
    @lpVtbl.value.get_descriptor_handle_increment_size.unsafe_as(Proc(D3D12_DESCRIPTOR_HEAP_TYPE, UInt32)).call(descriptorheaptype)
  end
  def create_root_signature(nodemask : UInt32, pblobwithrootsignature : Void*, bloblengthinbytes : LibC::UINT_PTR, riid : Guid*, ppvrootsignature : Void**) : HRESULT
    @lpVtbl.value.create_root_signature.unsafe_as(Proc(UInt32, Void*, LibC::UINT_PTR, Guid*, Void**, HRESULT)).call(nodemask, pblobwithrootsignature, bloblengthinbytes, riid, ppvrootsignature)
  end
  def create_constant_buffer_view(pdesc : D3D12_CONSTANT_BUFFER_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_constant_buffer_view.unsafe_as(Proc(D3D12_CONSTANT_BUFFER_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(pdesc, destdescriptor)
  end
  def create_shader_resource_view(presource : ID3D12Resource, pdesc : D3D12_SHADER_RESOURCE_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_shader_resource_view.unsafe_as(Proc(ID3D12Resource, D3D12_SHADER_RESOURCE_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_unordered_access_view(presource : ID3D12Resource, pcounterresource : ID3D12Resource, pdesc : D3D12_UNORDERED_ACCESS_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_unordered_access_view.unsafe_as(Proc(ID3D12Resource, ID3D12Resource, D3D12_UNORDERED_ACCESS_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pcounterresource, pdesc, destdescriptor)
  end
  def create_render_target_view(presource : ID3D12Resource, pdesc : D3D12_RENDER_TARGET_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_render_target_view.unsafe_as(Proc(ID3D12Resource, D3D12_RENDER_TARGET_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_depth_stencil_view(presource : ID3D12Resource, pdesc : D3D12_DEPTH_STENCIL_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_depth_stencil_view.unsafe_as(Proc(ID3D12Resource, D3D12_DEPTH_STENCIL_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_sampler(pdesc : D3D12_SAMPLER_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_sampler.unsafe_as(Proc(D3D12_SAMPLER_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(pdesc, destdescriptor)
  end
  def copy_descriptors(numdestdescriptorranges : UInt32, pdestdescriptorrangestarts : D3D12_CPU_DESCRIPTOR_HANDLE*, pdestdescriptorrangesizes : UInt32*, numsrcdescriptorranges : UInt32, psrcdescriptorrangestarts : D3D12_CPU_DESCRIPTOR_HANDLE*, psrcdescriptorrangesizes : UInt32*, descriptorheapstype : D3D12_DESCRIPTOR_HEAP_TYPE) : Void
    @lpVtbl.value.copy_descriptors.unsafe_as(Proc(UInt32, D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, UInt32, D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, D3D12_DESCRIPTOR_HEAP_TYPE, Void)).call(numdestdescriptorranges, pdestdescriptorrangestarts, pdestdescriptorrangesizes, numsrcdescriptorranges, psrcdescriptorrangestarts, psrcdescriptorrangesizes, descriptorheapstype)
  end
  def copy_descriptors_simple(numdescriptors : UInt32, destdescriptorrangestart : D3D12_CPU_DESCRIPTOR_HANDLE, srcdescriptorrangestart : D3D12_CPU_DESCRIPTOR_HANDLE, descriptorheapstype : D3D12_DESCRIPTOR_HEAP_TYPE) : Void
    @lpVtbl.value.copy_descriptors_simple.unsafe_as(Proc(UInt32, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_DESCRIPTOR_HEAP_TYPE, Void)).call(numdescriptors, destdescriptorrangestart, srcdescriptorrangestart, descriptorheapstype)
  end
  def get_resource_allocation_info(visiblemask : UInt32, numresourcedescs : UInt32, presourcedescs : D3D12_RESOURCE_DESC*) : D3D12_RESOURCE_ALLOCATION_INFO
    @lpVtbl.value.get_resource_allocation_info.unsafe_as(Proc(UInt32, UInt32, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_ALLOCATION_INFO)).call(visiblemask, numresourcedescs, presourcedescs)
  end
  def get_custom_heap_properties(nodemask : UInt32, heaptype : D3D12_HEAP_TYPE) : D3D12_HEAP_PROPERTIES
    @lpVtbl.value.get_custom_heap_properties.unsafe_as(Proc(UInt32, D3D12_HEAP_TYPE, D3D12_HEAP_PROPERTIES)).call(nodemask, heaptype)
  end
  def create_committed_resource(pheapproperties : D3D12_HEAP_PROPERTIES*, heapflags : D3D12_HEAP_FLAGS, pdesc : D3D12_RESOURCE_DESC*, initialresourcestate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riidresource : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_committed_resource.unsafe_as(Proc(D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pheapproperties, heapflags, pdesc, initialresourcestate, poptimizedclearvalue, riidresource, ppvresource)
  end
  def create_heap(pdesc : D3D12_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_heap.unsafe_as(Proc(D3D12_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppvheap)
  end
  def create_placed_resource(pheap : ID3D12Heap, heapoffset : UInt64, pdesc : D3D12_RESOURCE_DESC*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_placed_resource.unsafe_as(Proc(ID3D12Heap, UInt64, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pheap, heapoffset, pdesc, initialstate, poptimizedclearvalue, riid, ppvresource)
  end
  def create_reserved_resource(pdesc : D3D12_RESOURCE_DESC*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_reserved_resource.unsafe_as(Proc(D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pdesc, initialstate, poptimizedclearvalue, riid, ppvresource)
  end
  def create_shared_handle(pobject : ID3D12DeviceChild, pattributes : SECURITY_ATTRIBUTES*, access : UInt32, name : LibC::LPWSTR, phandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_shared_handle.unsafe_as(Proc(ID3D12DeviceChild, SECURITY_ATTRIBUTES*, UInt32, LibC::LPWSTR, LibC::HANDLE*, HRESULT)).call(pobject, pattributes, access, name, phandle)
  end
  def open_shared_handle(nthandle : LibC::HANDLE, riid : Guid*, ppvobj : Void**) : HRESULT
    @lpVtbl.value.open_shared_handle.unsafe_as(Proc(LibC::HANDLE, Guid*, Void**, HRESULT)).call(nthandle, riid, ppvobj)
  end
  def open_shared_handle_by_name(name : LibC::LPWSTR, access : UInt32, pnthandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.open_shared_handle_by_name.unsafe_as(Proc(LibC::LPWSTR, UInt32, LibC::HANDLE*, HRESULT)).call(name, access, pnthandle)
  end
  def make_resident(numobjects : UInt32, ppobjects : ID3D12Pageable*) : HRESULT
    @lpVtbl.value.make_resident.unsafe_as(Proc(UInt32, ID3D12Pageable*, HRESULT)).call(numobjects, ppobjects)
  end
  def evict(numobjects : UInt32, ppobjects : ID3D12Pageable*) : HRESULT
    @lpVtbl.value.evict.unsafe_as(Proc(UInt32, ID3D12Pageable*, HRESULT)).call(numobjects, ppobjects)
  end
  def create_fence(initialvalue : UInt64, flags : D3D12_FENCE_FLAGS, riid : Guid*, ppfence : Void**) : HRESULT
    @lpVtbl.value.create_fence.unsafe_as(Proc(UInt64, D3D12_FENCE_FLAGS, Guid*, Void**, HRESULT)).call(initialvalue, flags, riid, ppfence)
  end
  def get_device_removed_reason : HRESULT
    @lpVtbl.value.get_device_removed_reason.unsafe_as(Proc(HRESULT)).call
  end
  def get_copyable_footprints(presourcedesc : D3D12_RESOURCE_DESC*, firstsubresource : UInt32, numsubresources : UInt32, baseoffset : UInt64, playouts : D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, pnumrows : UInt32*, prowsizeinbytes : UInt64*, ptotalbytes : UInt64*) : Void
    @lpVtbl.value.get_copyable_footprints.unsafe_as(Proc(D3D12_RESOURCE_DESC*, UInt32, UInt32, UInt64, D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, UInt32*, UInt64*, UInt64*, Void)).call(presourcedesc, firstsubresource, numsubresources, baseoffset, playouts, pnumrows, prowsizeinbytes, ptotalbytes)
  end
  def create_query_heap(pdesc : D3D12_QUERY_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_query_heap.unsafe_as(Proc(D3D12_QUERY_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppvheap)
  end
  def set_stable_power_state(enable : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_stable_power_state.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(enable)
  end
  def create_command_signature(pdesc : D3D12_COMMAND_SIGNATURE_DESC*, prootsignature : ID3D12RootSignature, riid : Guid*, ppvcommandsignature : Void**) : HRESULT
    @lpVtbl.value.create_command_signature.unsafe_as(Proc(D3D12_COMMAND_SIGNATURE_DESC*, ID3D12RootSignature, Guid*, Void**, HRESULT)).call(pdesc, prootsignature, riid, ppvcommandsignature)
  end
  def get_resource_tiling(ptiledresource : ID3D12Resource, pnumtilesforentireresource : UInt32*, ppackedmipdesc : D3D12_PACKED_MIP_INFO*, pstandardtileshapefornonpackedmips : D3D12_TILE_SHAPE*, pnumsubresourcetilings : UInt32*, firstsubresourcetilingtoget : UInt32, psubresourcetilingsfornonpackedmips : D3D12_SUBRESOURCE_TILING*) : Void
    @lpVtbl.value.get_resource_tiling.unsafe_as(Proc(ID3D12Resource, UInt32*, D3D12_PACKED_MIP_INFO*, D3D12_TILE_SHAPE*, UInt32*, UInt32, D3D12_SUBRESOURCE_TILING*, Void)).call(ptiledresource, pnumtilesforentireresource, ppackedmipdesc, pstandardtileshapefornonpackedmips, pnumsubresourcetilings, firstsubresourcetilingtoget, psubresourcetilingsfornonpackedmips)
  end
  def get_adapter_luid : LUID
    @lpVtbl.value.get_adapter_luid.unsafe_as(Proc(LUID)).call
  end
  def create_pipeline_library(plibraryblob : Void*, bloblength : LibC::UINT_PTR, riid : Guid*, pppipelinelibrary : Void**) : HRESULT
    @lpVtbl.value.create_pipeline_library.unsafe_as(Proc(Void*, LibC::UINT_PTR, Guid*, Void**, HRESULT)).call(plibraryblob, bloblength, riid, pppipelinelibrary)
  end
  def set_event_on_multiple_fence_completion(ppfences : ID3D12Fence*, pfencevalues : UInt64*, numfences : UInt32, flags : D3D12_MULTIPLE_FENCE_WAIT_FLAGS, hevent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.set_event_on_multiple_fence_completion.unsafe_as(Proc(ID3D12Fence*, UInt64*, UInt32, D3D12_MULTIPLE_FENCE_WAIT_FLAGS, LibC::HANDLE, HRESULT)).call(ppfences, pfencevalues, numfences, flags, hevent)
  end
  def set_residency_priority(numobjects : UInt32, ppobjects : ID3D12Pageable*, ppriorities : D3D12_RESIDENCY_PRIORITY*) : HRESULT
    @lpVtbl.value.set_residency_priority.unsafe_as(Proc(UInt32, ID3D12Pageable*, D3D12_RESIDENCY_PRIORITY*, HRESULT)).call(numobjects, ppobjects, ppriorities)
  end
  def create_pipeline_state(pdesc : D3D12_PIPELINE_STATE_STREAM_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_pipeline_state.unsafe_as(Proc(D3D12_PIPELINE_STATE_STREAM_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
  def open_existing_heap_from_address(paddress : Void*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.open_existing_heap_from_address.unsafe_as(Proc(Void*, Guid*, Void**, HRESULT)).call(paddress, riid, ppvheap)
  end
  def open_existing_heap_from_file_mapping(hfilemapping : LibC::HANDLE, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.open_existing_heap_from_file_mapping.unsafe_as(Proc(LibC::HANDLE, Guid*, Void**, HRESULT)).call(hfilemapping, riid, ppvheap)
  end
  def enqueue_make_resident(flags : D3D12_RESIDENCY_FLAGS, numobjects : UInt32, ppobjects : ID3D12Pageable*, pfencetosignal : ID3D12Fence, fencevaluetosignal : UInt64) : HRESULT
    @lpVtbl.value.enqueue_make_resident.unsafe_as(Proc(D3D12_RESIDENCY_FLAGS, UInt32, ID3D12Pageable*, ID3D12Fence, UInt64, HRESULT)).call(flags, numobjects, ppobjects, pfencetosignal, fencevaluetosignal)
  end
  def create_command_list1(nodemask : UInt32, type : D3D12_COMMAND_LIST_TYPE, flags : D3D12_COMMAND_LIST_FLAGS, riid : Guid*, ppcommandlist : Void**) : HRESULT
    @lpVtbl.value.create_command_list1.unsafe_as(Proc(UInt32, D3D12_COMMAND_LIST_TYPE, D3D12_COMMAND_LIST_FLAGS, Guid*, Void**, HRESULT)).call(nodemask, type, flags, riid, ppcommandlist)
  end
  def create_protected_resource_session(pdesc : D3D12_PROTECTED_RESOURCE_SESSION_DESC*, riid : Guid*, ppsession : Void**) : HRESULT
    @lpVtbl.value.create_protected_resource_session.unsafe_as(Proc(D3D12_PROTECTED_RESOURCE_SESSION_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppsession)
  end
  def create_committed_resource1(pheapproperties : D3D12_HEAP_PROPERTIES*, heapflags : D3D12_HEAP_FLAGS, pdesc : D3D12_RESOURCE_DESC*, initialresourcestate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, pprotectedsession : ID3D12ProtectedResourceSession, riidresource : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_committed_resource1.unsafe_as(Proc(D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)).call(pheapproperties, heapflags, pdesc, initialresourcestate, poptimizedclearvalue, pprotectedsession, riidresource, ppvresource)
  end
  def create_heap1(pdesc : D3D12_HEAP_DESC*, pprotectedsession : ID3D12ProtectedResourceSession, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_heap1.unsafe_as(Proc(D3D12_HEAP_DESC*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)).call(pdesc, pprotectedsession, riid, ppvheap)
  end
  def create_reserved_resource1(pdesc : D3D12_RESOURCE_DESC*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, pprotectedsession : ID3D12ProtectedResourceSession, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_reserved_resource1.unsafe_as(Proc(D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)).call(pdesc, initialstate, poptimizedclearvalue, pprotectedsession, riid, ppvresource)
  end
  def get_resource_allocation_info1(visiblemask : UInt32, numresourcedescs : UInt32, presourcedescs : D3D12_RESOURCE_DESC*, presourceallocationinfo1 : D3D12_RESOURCE_ALLOCATION_INFO1*) : D3D12_RESOURCE_ALLOCATION_INFO
    @lpVtbl.value.get_resource_allocation_info1.unsafe_as(Proc(UInt32, UInt32, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_ALLOCATION_INFO1*, D3D12_RESOURCE_ALLOCATION_INFO)).call(visiblemask, numresourcedescs, presourcedescs, presourceallocationinfo1)
  end
  def create_lifetime_tracker(powner : ID3D12LifetimeOwner, riid : Guid*, ppvtracker : Void**) : HRESULT
    @lpVtbl.value.create_lifetime_tracker.unsafe_as(Proc(ID3D12LifetimeOwner, Guid*, Void**, HRESULT)).call(powner, riid, ppvtracker)
  end
  def remove_device : Void
    @lpVtbl.value.remove_device.unsafe_as(Proc(Void)).call
  end
  def enumerate_meta_commands(pnummetacommands : UInt32*, pdescs : D3D12_META_COMMAND_DESC*) : HRESULT
    @lpVtbl.value.enumerate_meta_commands.unsafe_as(Proc(UInt32*, D3D12_META_COMMAND_DESC*, HRESULT)).call(pnummetacommands, pdescs)
  end
  def enumerate_meta_command_parameters(commandid : Guid*, stage : D3D12_META_COMMAND_PARAMETER_STAGE, ptotalstructuresizeinbytes : UInt32*, pparametercount : UInt32*, pparameterdescs : D3D12_META_COMMAND_PARAMETER_DESC*) : HRESULT
    @lpVtbl.value.enumerate_meta_command_parameters.unsafe_as(Proc(Guid*, D3D12_META_COMMAND_PARAMETER_STAGE, UInt32*, UInt32*, D3D12_META_COMMAND_PARAMETER_DESC*, HRESULT)).call(commandid, stage, ptotalstructuresizeinbytes, pparametercount, pparameterdescs)
  end
  def create_meta_command(commandid : Guid*, nodemask : UInt32, pcreationparametersdata : Void*, creationparametersdatasizeinbytes : LibC::UINT_PTR, riid : Guid*, ppmetacommand : Void**) : HRESULT
    @lpVtbl.value.create_meta_command.unsafe_as(Proc(Guid*, UInt32, Void*, LibC::UINT_PTR, Guid*, Void**, HRESULT)).call(commandid, nodemask, pcreationparametersdata, creationparametersdatasizeinbytes, riid, ppmetacommand)
  end
  def create_state_object(pdesc : D3D12_STATE_OBJECT_DESC*, riid : Guid*, ppstateobject : Void**) : HRESULT
    @lpVtbl.value.create_state_object.unsafe_as(Proc(D3D12_STATE_OBJECT_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppstateobject)
  end
  def get_raytracing_acceleration_structure_prebuild_info(pdesc : D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS*, pinfo : D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO*) : Void
    @lpVtbl.value.get_raytracing_acceleration_structure_prebuild_info.unsafe_as(Proc(D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS*, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO*, Void)).call(pdesc, pinfo)
  end
  def check_driver_matching_identifier(serializeddatatype : D3D12_SERIALIZED_DATA_TYPE, pidentifiertocheck : D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER*) : D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS
    @lpVtbl.value.check_driver_matching_identifier.unsafe_as(Proc(D3D12_SERIALIZED_DATA_TYPE, D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER*, D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS)).call(serializeddatatype, pidentifiertocheck)
  end
  def set_background_processing_mode(mode : D3D12_BACKGROUND_PROCESSING_MODE, measurementsaction : D3D12_MEASUREMENTS_ACTION, heventtosignaluponcompletion : LibC::HANDLE, pbfurthermeasurementsdesired : LibC::BOOL*) : HRESULT
    @lpVtbl.value.set_background_processing_mode.unsafe_as(Proc(D3D12_BACKGROUND_PROCESSING_MODE, D3D12_MEASUREMENTS_ACTION, LibC::HANDLE, LibC::BOOL*, HRESULT)).call(mode, measurementsaction, heventtosignaluponcompletion, pbfurthermeasurementsdesired)
  end
end
struct LibWin32::ID3D12ProtectedResourceSession1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
  def get_status_fence(riid : Guid*, ppfence : Void**) : HRESULT
    @lpVtbl.value.get_status_fence.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppfence)
  end
  def get_session_status : D3D12_PROTECTED_SESSION_STATUS
    @lpVtbl.value.get_session_status.unsafe_as(Proc(D3D12_PROTECTED_SESSION_STATUS)).call
  end
  def get_desc : D3D12_PROTECTED_RESOURCE_SESSION_DESC
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D12_PROTECTED_RESOURCE_SESSION_DESC)).call
  end
  def get_desc1 : D3D12_PROTECTED_RESOURCE_SESSION_DESC1
    @lpVtbl.value.get_desc1.unsafe_as(Proc(D3D12_PROTECTED_RESOURCE_SESSION_DESC1)).call
  end
end
struct LibWin32::ID3D12Device7
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_node_count : UInt32
    @lpVtbl.value.get_node_count.unsafe_as(Proc(UInt32)).call
  end
  def create_command_queue(pdesc : D3D12_COMMAND_QUEUE_DESC*, riid : Guid*, ppcommandqueue : Void**) : HRESULT
    @lpVtbl.value.create_command_queue.unsafe_as(Proc(D3D12_COMMAND_QUEUE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppcommandqueue)
  end
  def create_command_allocator(type : D3D12_COMMAND_LIST_TYPE, riid : Guid*, ppcommandallocator : Void**) : HRESULT
    @lpVtbl.value.create_command_allocator.unsafe_as(Proc(D3D12_COMMAND_LIST_TYPE, Guid*, Void**, HRESULT)).call(type, riid, ppcommandallocator)
  end
  def create_graphics_pipeline_state(pdesc : D3D12_GRAPHICS_PIPELINE_STATE_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_graphics_pipeline_state.unsafe_as(Proc(D3D12_GRAPHICS_PIPELINE_STATE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
  def create_compute_pipeline_state(pdesc : D3D12_COMPUTE_PIPELINE_STATE_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_compute_pipeline_state.unsafe_as(Proc(D3D12_COMPUTE_PIPELINE_STATE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
  def create_command_list(nodemask : UInt32, type : D3D12_COMMAND_LIST_TYPE, pcommandallocator : ID3D12CommandAllocator, pinitialstate : ID3D12PipelineState, riid : Guid*, ppcommandlist : Void**) : HRESULT
    @lpVtbl.value.create_command_list.unsafe_as(Proc(UInt32, D3D12_COMMAND_LIST_TYPE, ID3D12CommandAllocator, ID3D12PipelineState, Guid*, Void**, HRESULT)).call(nodemask, type, pcommandallocator, pinitialstate, riid, ppcommandlist)
  end
  def check_feature_support(feature : D3D12_FEATURE, pfeaturesupportdata : Void*, featuresupportdatasize : UInt32) : HRESULT
    @lpVtbl.value.check_feature_support.unsafe_as(Proc(D3D12_FEATURE, Void*, UInt32, HRESULT)).call(feature, pfeaturesupportdata, featuresupportdatasize)
  end
  def create_descriptor_heap(pdescriptorheapdesc : D3D12_DESCRIPTOR_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_descriptor_heap.unsafe_as(Proc(D3D12_DESCRIPTOR_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdescriptorheapdesc, riid, ppvheap)
  end
  def get_descriptor_handle_increment_size(descriptorheaptype : D3D12_DESCRIPTOR_HEAP_TYPE) : UInt32
    @lpVtbl.value.get_descriptor_handle_increment_size.unsafe_as(Proc(D3D12_DESCRIPTOR_HEAP_TYPE, UInt32)).call(descriptorheaptype)
  end
  def create_root_signature(nodemask : UInt32, pblobwithrootsignature : Void*, bloblengthinbytes : LibC::UINT_PTR, riid : Guid*, ppvrootsignature : Void**) : HRESULT
    @lpVtbl.value.create_root_signature.unsafe_as(Proc(UInt32, Void*, LibC::UINT_PTR, Guid*, Void**, HRESULT)).call(nodemask, pblobwithrootsignature, bloblengthinbytes, riid, ppvrootsignature)
  end
  def create_constant_buffer_view(pdesc : D3D12_CONSTANT_BUFFER_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_constant_buffer_view.unsafe_as(Proc(D3D12_CONSTANT_BUFFER_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(pdesc, destdescriptor)
  end
  def create_shader_resource_view(presource : ID3D12Resource, pdesc : D3D12_SHADER_RESOURCE_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_shader_resource_view.unsafe_as(Proc(ID3D12Resource, D3D12_SHADER_RESOURCE_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_unordered_access_view(presource : ID3D12Resource, pcounterresource : ID3D12Resource, pdesc : D3D12_UNORDERED_ACCESS_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_unordered_access_view.unsafe_as(Proc(ID3D12Resource, ID3D12Resource, D3D12_UNORDERED_ACCESS_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pcounterresource, pdesc, destdescriptor)
  end
  def create_render_target_view(presource : ID3D12Resource, pdesc : D3D12_RENDER_TARGET_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_render_target_view.unsafe_as(Proc(ID3D12Resource, D3D12_RENDER_TARGET_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_depth_stencil_view(presource : ID3D12Resource, pdesc : D3D12_DEPTH_STENCIL_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_depth_stencil_view.unsafe_as(Proc(ID3D12Resource, D3D12_DEPTH_STENCIL_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_sampler(pdesc : D3D12_SAMPLER_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_sampler.unsafe_as(Proc(D3D12_SAMPLER_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(pdesc, destdescriptor)
  end
  def copy_descriptors(numdestdescriptorranges : UInt32, pdestdescriptorrangestarts : D3D12_CPU_DESCRIPTOR_HANDLE*, pdestdescriptorrangesizes : UInt32*, numsrcdescriptorranges : UInt32, psrcdescriptorrangestarts : D3D12_CPU_DESCRIPTOR_HANDLE*, psrcdescriptorrangesizes : UInt32*, descriptorheapstype : D3D12_DESCRIPTOR_HEAP_TYPE) : Void
    @lpVtbl.value.copy_descriptors.unsafe_as(Proc(UInt32, D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, UInt32, D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, D3D12_DESCRIPTOR_HEAP_TYPE, Void)).call(numdestdescriptorranges, pdestdescriptorrangestarts, pdestdescriptorrangesizes, numsrcdescriptorranges, psrcdescriptorrangestarts, psrcdescriptorrangesizes, descriptorheapstype)
  end
  def copy_descriptors_simple(numdescriptors : UInt32, destdescriptorrangestart : D3D12_CPU_DESCRIPTOR_HANDLE, srcdescriptorrangestart : D3D12_CPU_DESCRIPTOR_HANDLE, descriptorheapstype : D3D12_DESCRIPTOR_HEAP_TYPE) : Void
    @lpVtbl.value.copy_descriptors_simple.unsafe_as(Proc(UInt32, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_DESCRIPTOR_HEAP_TYPE, Void)).call(numdescriptors, destdescriptorrangestart, srcdescriptorrangestart, descriptorheapstype)
  end
  def get_resource_allocation_info(visiblemask : UInt32, numresourcedescs : UInt32, presourcedescs : D3D12_RESOURCE_DESC*) : D3D12_RESOURCE_ALLOCATION_INFO
    @lpVtbl.value.get_resource_allocation_info.unsafe_as(Proc(UInt32, UInt32, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_ALLOCATION_INFO)).call(visiblemask, numresourcedescs, presourcedescs)
  end
  def get_custom_heap_properties(nodemask : UInt32, heaptype : D3D12_HEAP_TYPE) : D3D12_HEAP_PROPERTIES
    @lpVtbl.value.get_custom_heap_properties.unsafe_as(Proc(UInt32, D3D12_HEAP_TYPE, D3D12_HEAP_PROPERTIES)).call(nodemask, heaptype)
  end
  def create_committed_resource(pheapproperties : D3D12_HEAP_PROPERTIES*, heapflags : D3D12_HEAP_FLAGS, pdesc : D3D12_RESOURCE_DESC*, initialresourcestate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riidresource : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_committed_resource.unsafe_as(Proc(D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pheapproperties, heapflags, pdesc, initialresourcestate, poptimizedclearvalue, riidresource, ppvresource)
  end
  def create_heap(pdesc : D3D12_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_heap.unsafe_as(Proc(D3D12_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppvheap)
  end
  def create_placed_resource(pheap : ID3D12Heap, heapoffset : UInt64, pdesc : D3D12_RESOURCE_DESC*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_placed_resource.unsafe_as(Proc(ID3D12Heap, UInt64, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pheap, heapoffset, pdesc, initialstate, poptimizedclearvalue, riid, ppvresource)
  end
  def create_reserved_resource(pdesc : D3D12_RESOURCE_DESC*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_reserved_resource.unsafe_as(Proc(D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pdesc, initialstate, poptimizedclearvalue, riid, ppvresource)
  end
  def create_shared_handle(pobject : ID3D12DeviceChild, pattributes : SECURITY_ATTRIBUTES*, access : UInt32, name : LibC::LPWSTR, phandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_shared_handle.unsafe_as(Proc(ID3D12DeviceChild, SECURITY_ATTRIBUTES*, UInt32, LibC::LPWSTR, LibC::HANDLE*, HRESULT)).call(pobject, pattributes, access, name, phandle)
  end
  def open_shared_handle(nthandle : LibC::HANDLE, riid : Guid*, ppvobj : Void**) : HRESULT
    @lpVtbl.value.open_shared_handle.unsafe_as(Proc(LibC::HANDLE, Guid*, Void**, HRESULT)).call(nthandle, riid, ppvobj)
  end
  def open_shared_handle_by_name(name : LibC::LPWSTR, access : UInt32, pnthandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.open_shared_handle_by_name.unsafe_as(Proc(LibC::LPWSTR, UInt32, LibC::HANDLE*, HRESULT)).call(name, access, pnthandle)
  end
  def make_resident(numobjects : UInt32, ppobjects : ID3D12Pageable*) : HRESULT
    @lpVtbl.value.make_resident.unsafe_as(Proc(UInt32, ID3D12Pageable*, HRESULT)).call(numobjects, ppobjects)
  end
  def evict(numobjects : UInt32, ppobjects : ID3D12Pageable*) : HRESULT
    @lpVtbl.value.evict.unsafe_as(Proc(UInt32, ID3D12Pageable*, HRESULT)).call(numobjects, ppobjects)
  end
  def create_fence(initialvalue : UInt64, flags : D3D12_FENCE_FLAGS, riid : Guid*, ppfence : Void**) : HRESULT
    @lpVtbl.value.create_fence.unsafe_as(Proc(UInt64, D3D12_FENCE_FLAGS, Guid*, Void**, HRESULT)).call(initialvalue, flags, riid, ppfence)
  end
  def get_device_removed_reason : HRESULT
    @lpVtbl.value.get_device_removed_reason.unsafe_as(Proc(HRESULT)).call
  end
  def get_copyable_footprints(presourcedesc : D3D12_RESOURCE_DESC*, firstsubresource : UInt32, numsubresources : UInt32, baseoffset : UInt64, playouts : D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, pnumrows : UInt32*, prowsizeinbytes : UInt64*, ptotalbytes : UInt64*) : Void
    @lpVtbl.value.get_copyable_footprints.unsafe_as(Proc(D3D12_RESOURCE_DESC*, UInt32, UInt32, UInt64, D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, UInt32*, UInt64*, UInt64*, Void)).call(presourcedesc, firstsubresource, numsubresources, baseoffset, playouts, pnumrows, prowsizeinbytes, ptotalbytes)
  end
  def create_query_heap(pdesc : D3D12_QUERY_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_query_heap.unsafe_as(Proc(D3D12_QUERY_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppvheap)
  end
  def set_stable_power_state(enable : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_stable_power_state.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(enable)
  end
  def create_command_signature(pdesc : D3D12_COMMAND_SIGNATURE_DESC*, prootsignature : ID3D12RootSignature, riid : Guid*, ppvcommandsignature : Void**) : HRESULT
    @lpVtbl.value.create_command_signature.unsafe_as(Proc(D3D12_COMMAND_SIGNATURE_DESC*, ID3D12RootSignature, Guid*, Void**, HRESULT)).call(pdesc, prootsignature, riid, ppvcommandsignature)
  end
  def get_resource_tiling(ptiledresource : ID3D12Resource, pnumtilesforentireresource : UInt32*, ppackedmipdesc : D3D12_PACKED_MIP_INFO*, pstandardtileshapefornonpackedmips : D3D12_TILE_SHAPE*, pnumsubresourcetilings : UInt32*, firstsubresourcetilingtoget : UInt32, psubresourcetilingsfornonpackedmips : D3D12_SUBRESOURCE_TILING*) : Void
    @lpVtbl.value.get_resource_tiling.unsafe_as(Proc(ID3D12Resource, UInt32*, D3D12_PACKED_MIP_INFO*, D3D12_TILE_SHAPE*, UInt32*, UInt32, D3D12_SUBRESOURCE_TILING*, Void)).call(ptiledresource, pnumtilesforentireresource, ppackedmipdesc, pstandardtileshapefornonpackedmips, pnumsubresourcetilings, firstsubresourcetilingtoget, psubresourcetilingsfornonpackedmips)
  end
  def get_adapter_luid : LUID
    @lpVtbl.value.get_adapter_luid.unsafe_as(Proc(LUID)).call
  end
  def create_pipeline_library(plibraryblob : Void*, bloblength : LibC::UINT_PTR, riid : Guid*, pppipelinelibrary : Void**) : HRESULT
    @lpVtbl.value.create_pipeline_library.unsafe_as(Proc(Void*, LibC::UINT_PTR, Guid*, Void**, HRESULT)).call(plibraryblob, bloblength, riid, pppipelinelibrary)
  end
  def set_event_on_multiple_fence_completion(ppfences : ID3D12Fence*, pfencevalues : UInt64*, numfences : UInt32, flags : D3D12_MULTIPLE_FENCE_WAIT_FLAGS, hevent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.set_event_on_multiple_fence_completion.unsafe_as(Proc(ID3D12Fence*, UInt64*, UInt32, D3D12_MULTIPLE_FENCE_WAIT_FLAGS, LibC::HANDLE, HRESULT)).call(ppfences, pfencevalues, numfences, flags, hevent)
  end
  def set_residency_priority(numobjects : UInt32, ppobjects : ID3D12Pageable*, ppriorities : D3D12_RESIDENCY_PRIORITY*) : HRESULT
    @lpVtbl.value.set_residency_priority.unsafe_as(Proc(UInt32, ID3D12Pageable*, D3D12_RESIDENCY_PRIORITY*, HRESULT)).call(numobjects, ppobjects, ppriorities)
  end
  def create_pipeline_state(pdesc : D3D12_PIPELINE_STATE_STREAM_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_pipeline_state.unsafe_as(Proc(D3D12_PIPELINE_STATE_STREAM_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
  def open_existing_heap_from_address(paddress : Void*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.open_existing_heap_from_address.unsafe_as(Proc(Void*, Guid*, Void**, HRESULT)).call(paddress, riid, ppvheap)
  end
  def open_existing_heap_from_file_mapping(hfilemapping : LibC::HANDLE, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.open_existing_heap_from_file_mapping.unsafe_as(Proc(LibC::HANDLE, Guid*, Void**, HRESULT)).call(hfilemapping, riid, ppvheap)
  end
  def enqueue_make_resident(flags : D3D12_RESIDENCY_FLAGS, numobjects : UInt32, ppobjects : ID3D12Pageable*, pfencetosignal : ID3D12Fence, fencevaluetosignal : UInt64) : HRESULT
    @lpVtbl.value.enqueue_make_resident.unsafe_as(Proc(D3D12_RESIDENCY_FLAGS, UInt32, ID3D12Pageable*, ID3D12Fence, UInt64, HRESULT)).call(flags, numobjects, ppobjects, pfencetosignal, fencevaluetosignal)
  end
  def create_command_list1(nodemask : UInt32, type : D3D12_COMMAND_LIST_TYPE, flags : D3D12_COMMAND_LIST_FLAGS, riid : Guid*, ppcommandlist : Void**) : HRESULT
    @lpVtbl.value.create_command_list1.unsafe_as(Proc(UInt32, D3D12_COMMAND_LIST_TYPE, D3D12_COMMAND_LIST_FLAGS, Guid*, Void**, HRESULT)).call(nodemask, type, flags, riid, ppcommandlist)
  end
  def create_protected_resource_session(pdesc : D3D12_PROTECTED_RESOURCE_SESSION_DESC*, riid : Guid*, ppsession : Void**) : HRESULT
    @lpVtbl.value.create_protected_resource_session.unsafe_as(Proc(D3D12_PROTECTED_RESOURCE_SESSION_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppsession)
  end
  def create_committed_resource1(pheapproperties : D3D12_HEAP_PROPERTIES*, heapflags : D3D12_HEAP_FLAGS, pdesc : D3D12_RESOURCE_DESC*, initialresourcestate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, pprotectedsession : ID3D12ProtectedResourceSession, riidresource : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_committed_resource1.unsafe_as(Proc(D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)).call(pheapproperties, heapflags, pdesc, initialresourcestate, poptimizedclearvalue, pprotectedsession, riidresource, ppvresource)
  end
  def create_heap1(pdesc : D3D12_HEAP_DESC*, pprotectedsession : ID3D12ProtectedResourceSession, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_heap1.unsafe_as(Proc(D3D12_HEAP_DESC*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)).call(pdesc, pprotectedsession, riid, ppvheap)
  end
  def create_reserved_resource1(pdesc : D3D12_RESOURCE_DESC*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, pprotectedsession : ID3D12ProtectedResourceSession, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_reserved_resource1.unsafe_as(Proc(D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)).call(pdesc, initialstate, poptimizedclearvalue, pprotectedsession, riid, ppvresource)
  end
  def get_resource_allocation_info1(visiblemask : UInt32, numresourcedescs : UInt32, presourcedescs : D3D12_RESOURCE_DESC*, presourceallocationinfo1 : D3D12_RESOURCE_ALLOCATION_INFO1*) : D3D12_RESOURCE_ALLOCATION_INFO
    @lpVtbl.value.get_resource_allocation_info1.unsafe_as(Proc(UInt32, UInt32, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_ALLOCATION_INFO1*, D3D12_RESOURCE_ALLOCATION_INFO)).call(visiblemask, numresourcedescs, presourcedescs, presourceallocationinfo1)
  end
  def create_lifetime_tracker(powner : ID3D12LifetimeOwner, riid : Guid*, ppvtracker : Void**) : HRESULT
    @lpVtbl.value.create_lifetime_tracker.unsafe_as(Proc(ID3D12LifetimeOwner, Guid*, Void**, HRESULT)).call(powner, riid, ppvtracker)
  end
  def remove_device : Void
    @lpVtbl.value.remove_device.unsafe_as(Proc(Void)).call
  end
  def enumerate_meta_commands(pnummetacommands : UInt32*, pdescs : D3D12_META_COMMAND_DESC*) : HRESULT
    @lpVtbl.value.enumerate_meta_commands.unsafe_as(Proc(UInt32*, D3D12_META_COMMAND_DESC*, HRESULT)).call(pnummetacommands, pdescs)
  end
  def enumerate_meta_command_parameters(commandid : Guid*, stage : D3D12_META_COMMAND_PARAMETER_STAGE, ptotalstructuresizeinbytes : UInt32*, pparametercount : UInt32*, pparameterdescs : D3D12_META_COMMAND_PARAMETER_DESC*) : HRESULT
    @lpVtbl.value.enumerate_meta_command_parameters.unsafe_as(Proc(Guid*, D3D12_META_COMMAND_PARAMETER_STAGE, UInt32*, UInt32*, D3D12_META_COMMAND_PARAMETER_DESC*, HRESULT)).call(commandid, stage, ptotalstructuresizeinbytes, pparametercount, pparameterdescs)
  end
  def create_meta_command(commandid : Guid*, nodemask : UInt32, pcreationparametersdata : Void*, creationparametersdatasizeinbytes : LibC::UINT_PTR, riid : Guid*, ppmetacommand : Void**) : HRESULT
    @lpVtbl.value.create_meta_command.unsafe_as(Proc(Guid*, UInt32, Void*, LibC::UINT_PTR, Guid*, Void**, HRESULT)).call(commandid, nodemask, pcreationparametersdata, creationparametersdatasizeinbytes, riid, ppmetacommand)
  end
  def create_state_object(pdesc : D3D12_STATE_OBJECT_DESC*, riid : Guid*, ppstateobject : Void**) : HRESULT
    @lpVtbl.value.create_state_object.unsafe_as(Proc(D3D12_STATE_OBJECT_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppstateobject)
  end
  def get_raytracing_acceleration_structure_prebuild_info(pdesc : D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS*, pinfo : D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO*) : Void
    @lpVtbl.value.get_raytracing_acceleration_structure_prebuild_info.unsafe_as(Proc(D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS*, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO*, Void)).call(pdesc, pinfo)
  end
  def check_driver_matching_identifier(serializeddatatype : D3D12_SERIALIZED_DATA_TYPE, pidentifiertocheck : D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER*) : D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS
    @lpVtbl.value.check_driver_matching_identifier.unsafe_as(Proc(D3D12_SERIALIZED_DATA_TYPE, D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER*, D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS)).call(serializeddatatype, pidentifiertocheck)
  end
  def set_background_processing_mode(mode : D3D12_BACKGROUND_PROCESSING_MODE, measurementsaction : D3D12_MEASUREMENTS_ACTION, heventtosignaluponcompletion : LibC::HANDLE, pbfurthermeasurementsdesired : LibC::BOOL*) : HRESULT
    @lpVtbl.value.set_background_processing_mode.unsafe_as(Proc(D3D12_BACKGROUND_PROCESSING_MODE, D3D12_MEASUREMENTS_ACTION, LibC::HANDLE, LibC::BOOL*, HRESULT)).call(mode, measurementsaction, heventtosignaluponcompletion, pbfurthermeasurementsdesired)
  end
  def add_to_state_object(paddition : D3D12_STATE_OBJECT_DESC*, pstateobjecttogrowfrom : ID3D12StateObject, riid : Guid*, ppnewstateobject : Void**) : HRESULT
    @lpVtbl.value.add_to_state_object.unsafe_as(Proc(D3D12_STATE_OBJECT_DESC*, ID3D12StateObject, Guid*, Void**, HRESULT)).call(paddition, pstateobjecttogrowfrom, riid, ppnewstateobject)
  end
  def create_protected_resource_session1(pdesc : D3D12_PROTECTED_RESOURCE_SESSION_DESC1*, riid : Guid*, ppsession : Void**) : HRESULT
    @lpVtbl.value.create_protected_resource_session1.unsafe_as(Proc(D3D12_PROTECTED_RESOURCE_SESSION_DESC1*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppsession)
  end
end
struct LibWin32::ID3D12Device8
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_node_count : UInt32
    @lpVtbl.value.get_node_count.unsafe_as(Proc(UInt32)).call
  end
  def create_command_queue(pdesc : D3D12_COMMAND_QUEUE_DESC*, riid : Guid*, ppcommandqueue : Void**) : HRESULT
    @lpVtbl.value.create_command_queue.unsafe_as(Proc(D3D12_COMMAND_QUEUE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppcommandqueue)
  end
  def create_command_allocator(type : D3D12_COMMAND_LIST_TYPE, riid : Guid*, ppcommandallocator : Void**) : HRESULT
    @lpVtbl.value.create_command_allocator.unsafe_as(Proc(D3D12_COMMAND_LIST_TYPE, Guid*, Void**, HRESULT)).call(type, riid, ppcommandallocator)
  end
  def create_graphics_pipeline_state(pdesc : D3D12_GRAPHICS_PIPELINE_STATE_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_graphics_pipeline_state.unsafe_as(Proc(D3D12_GRAPHICS_PIPELINE_STATE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
  def create_compute_pipeline_state(pdesc : D3D12_COMPUTE_PIPELINE_STATE_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_compute_pipeline_state.unsafe_as(Proc(D3D12_COMPUTE_PIPELINE_STATE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
  def create_command_list(nodemask : UInt32, type : D3D12_COMMAND_LIST_TYPE, pcommandallocator : ID3D12CommandAllocator, pinitialstate : ID3D12PipelineState, riid : Guid*, ppcommandlist : Void**) : HRESULT
    @lpVtbl.value.create_command_list.unsafe_as(Proc(UInt32, D3D12_COMMAND_LIST_TYPE, ID3D12CommandAllocator, ID3D12PipelineState, Guid*, Void**, HRESULT)).call(nodemask, type, pcommandallocator, pinitialstate, riid, ppcommandlist)
  end
  def check_feature_support(feature : D3D12_FEATURE, pfeaturesupportdata : Void*, featuresupportdatasize : UInt32) : HRESULT
    @lpVtbl.value.check_feature_support.unsafe_as(Proc(D3D12_FEATURE, Void*, UInt32, HRESULT)).call(feature, pfeaturesupportdata, featuresupportdatasize)
  end
  def create_descriptor_heap(pdescriptorheapdesc : D3D12_DESCRIPTOR_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_descriptor_heap.unsafe_as(Proc(D3D12_DESCRIPTOR_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdescriptorheapdesc, riid, ppvheap)
  end
  def get_descriptor_handle_increment_size(descriptorheaptype : D3D12_DESCRIPTOR_HEAP_TYPE) : UInt32
    @lpVtbl.value.get_descriptor_handle_increment_size.unsafe_as(Proc(D3D12_DESCRIPTOR_HEAP_TYPE, UInt32)).call(descriptorheaptype)
  end
  def create_root_signature(nodemask : UInt32, pblobwithrootsignature : Void*, bloblengthinbytes : LibC::UINT_PTR, riid : Guid*, ppvrootsignature : Void**) : HRESULT
    @lpVtbl.value.create_root_signature.unsafe_as(Proc(UInt32, Void*, LibC::UINT_PTR, Guid*, Void**, HRESULT)).call(nodemask, pblobwithrootsignature, bloblengthinbytes, riid, ppvrootsignature)
  end
  def create_constant_buffer_view(pdesc : D3D12_CONSTANT_BUFFER_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_constant_buffer_view.unsafe_as(Proc(D3D12_CONSTANT_BUFFER_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(pdesc, destdescriptor)
  end
  def create_shader_resource_view(presource : ID3D12Resource, pdesc : D3D12_SHADER_RESOURCE_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_shader_resource_view.unsafe_as(Proc(ID3D12Resource, D3D12_SHADER_RESOURCE_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_unordered_access_view(presource : ID3D12Resource, pcounterresource : ID3D12Resource, pdesc : D3D12_UNORDERED_ACCESS_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_unordered_access_view.unsafe_as(Proc(ID3D12Resource, ID3D12Resource, D3D12_UNORDERED_ACCESS_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pcounterresource, pdesc, destdescriptor)
  end
  def create_render_target_view(presource : ID3D12Resource, pdesc : D3D12_RENDER_TARGET_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_render_target_view.unsafe_as(Proc(ID3D12Resource, D3D12_RENDER_TARGET_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_depth_stencil_view(presource : ID3D12Resource, pdesc : D3D12_DEPTH_STENCIL_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_depth_stencil_view.unsafe_as(Proc(ID3D12Resource, D3D12_DEPTH_STENCIL_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_sampler(pdesc : D3D12_SAMPLER_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_sampler.unsafe_as(Proc(D3D12_SAMPLER_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(pdesc, destdescriptor)
  end
  def copy_descriptors(numdestdescriptorranges : UInt32, pdestdescriptorrangestarts : D3D12_CPU_DESCRIPTOR_HANDLE*, pdestdescriptorrangesizes : UInt32*, numsrcdescriptorranges : UInt32, psrcdescriptorrangestarts : D3D12_CPU_DESCRIPTOR_HANDLE*, psrcdescriptorrangesizes : UInt32*, descriptorheapstype : D3D12_DESCRIPTOR_HEAP_TYPE) : Void
    @lpVtbl.value.copy_descriptors.unsafe_as(Proc(UInt32, D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, UInt32, D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, D3D12_DESCRIPTOR_HEAP_TYPE, Void)).call(numdestdescriptorranges, pdestdescriptorrangestarts, pdestdescriptorrangesizes, numsrcdescriptorranges, psrcdescriptorrangestarts, psrcdescriptorrangesizes, descriptorheapstype)
  end
  def copy_descriptors_simple(numdescriptors : UInt32, destdescriptorrangestart : D3D12_CPU_DESCRIPTOR_HANDLE, srcdescriptorrangestart : D3D12_CPU_DESCRIPTOR_HANDLE, descriptorheapstype : D3D12_DESCRIPTOR_HEAP_TYPE) : Void
    @lpVtbl.value.copy_descriptors_simple.unsafe_as(Proc(UInt32, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_DESCRIPTOR_HEAP_TYPE, Void)).call(numdescriptors, destdescriptorrangestart, srcdescriptorrangestart, descriptorheapstype)
  end
  def get_resource_allocation_info(visiblemask : UInt32, numresourcedescs : UInt32, presourcedescs : D3D12_RESOURCE_DESC*) : D3D12_RESOURCE_ALLOCATION_INFO
    @lpVtbl.value.get_resource_allocation_info.unsafe_as(Proc(UInt32, UInt32, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_ALLOCATION_INFO)).call(visiblemask, numresourcedescs, presourcedescs)
  end
  def get_custom_heap_properties(nodemask : UInt32, heaptype : D3D12_HEAP_TYPE) : D3D12_HEAP_PROPERTIES
    @lpVtbl.value.get_custom_heap_properties.unsafe_as(Proc(UInt32, D3D12_HEAP_TYPE, D3D12_HEAP_PROPERTIES)).call(nodemask, heaptype)
  end
  def create_committed_resource(pheapproperties : D3D12_HEAP_PROPERTIES*, heapflags : D3D12_HEAP_FLAGS, pdesc : D3D12_RESOURCE_DESC*, initialresourcestate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riidresource : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_committed_resource.unsafe_as(Proc(D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pheapproperties, heapflags, pdesc, initialresourcestate, poptimizedclearvalue, riidresource, ppvresource)
  end
  def create_heap(pdesc : D3D12_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_heap.unsafe_as(Proc(D3D12_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppvheap)
  end
  def create_placed_resource(pheap : ID3D12Heap, heapoffset : UInt64, pdesc : D3D12_RESOURCE_DESC*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_placed_resource.unsafe_as(Proc(ID3D12Heap, UInt64, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pheap, heapoffset, pdesc, initialstate, poptimizedclearvalue, riid, ppvresource)
  end
  def create_reserved_resource(pdesc : D3D12_RESOURCE_DESC*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_reserved_resource.unsafe_as(Proc(D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pdesc, initialstate, poptimizedclearvalue, riid, ppvresource)
  end
  def create_shared_handle(pobject : ID3D12DeviceChild, pattributes : SECURITY_ATTRIBUTES*, access : UInt32, name : LibC::LPWSTR, phandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_shared_handle.unsafe_as(Proc(ID3D12DeviceChild, SECURITY_ATTRIBUTES*, UInt32, LibC::LPWSTR, LibC::HANDLE*, HRESULT)).call(pobject, pattributes, access, name, phandle)
  end
  def open_shared_handle(nthandle : LibC::HANDLE, riid : Guid*, ppvobj : Void**) : HRESULT
    @lpVtbl.value.open_shared_handle.unsafe_as(Proc(LibC::HANDLE, Guid*, Void**, HRESULT)).call(nthandle, riid, ppvobj)
  end
  def open_shared_handle_by_name(name : LibC::LPWSTR, access : UInt32, pnthandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.open_shared_handle_by_name.unsafe_as(Proc(LibC::LPWSTR, UInt32, LibC::HANDLE*, HRESULT)).call(name, access, pnthandle)
  end
  def make_resident(numobjects : UInt32, ppobjects : ID3D12Pageable*) : HRESULT
    @lpVtbl.value.make_resident.unsafe_as(Proc(UInt32, ID3D12Pageable*, HRESULT)).call(numobjects, ppobjects)
  end
  def evict(numobjects : UInt32, ppobjects : ID3D12Pageable*) : HRESULT
    @lpVtbl.value.evict.unsafe_as(Proc(UInt32, ID3D12Pageable*, HRESULT)).call(numobjects, ppobjects)
  end
  def create_fence(initialvalue : UInt64, flags : D3D12_FENCE_FLAGS, riid : Guid*, ppfence : Void**) : HRESULT
    @lpVtbl.value.create_fence.unsafe_as(Proc(UInt64, D3D12_FENCE_FLAGS, Guid*, Void**, HRESULT)).call(initialvalue, flags, riid, ppfence)
  end
  def get_device_removed_reason : HRESULT
    @lpVtbl.value.get_device_removed_reason.unsafe_as(Proc(HRESULT)).call
  end
  def get_copyable_footprints(presourcedesc : D3D12_RESOURCE_DESC*, firstsubresource : UInt32, numsubresources : UInt32, baseoffset : UInt64, playouts : D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, pnumrows : UInt32*, prowsizeinbytes : UInt64*, ptotalbytes : UInt64*) : Void
    @lpVtbl.value.get_copyable_footprints.unsafe_as(Proc(D3D12_RESOURCE_DESC*, UInt32, UInt32, UInt64, D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, UInt32*, UInt64*, UInt64*, Void)).call(presourcedesc, firstsubresource, numsubresources, baseoffset, playouts, pnumrows, prowsizeinbytes, ptotalbytes)
  end
  def create_query_heap(pdesc : D3D12_QUERY_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_query_heap.unsafe_as(Proc(D3D12_QUERY_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppvheap)
  end
  def set_stable_power_state(enable : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_stable_power_state.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(enable)
  end
  def create_command_signature(pdesc : D3D12_COMMAND_SIGNATURE_DESC*, prootsignature : ID3D12RootSignature, riid : Guid*, ppvcommandsignature : Void**) : HRESULT
    @lpVtbl.value.create_command_signature.unsafe_as(Proc(D3D12_COMMAND_SIGNATURE_DESC*, ID3D12RootSignature, Guid*, Void**, HRESULT)).call(pdesc, prootsignature, riid, ppvcommandsignature)
  end
  def get_resource_tiling(ptiledresource : ID3D12Resource, pnumtilesforentireresource : UInt32*, ppackedmipdesc : D3D12_PACKED_MIP_INFO*, pstandardtileshapefornonpackedmips : D3D12_TILE_SHAPE*, pnumsubresourcetilings : UInt32*, firstsubresourcetilingtoget : UInt32, psubresourcetilingsfornonpackedmips : D3D12_SUBRESOURCE_TILING*) : Void
    @lpVtbl.value.get_resource_tiling.unsafe_as(Proc(ID3D12Resource, UInt32*, D3D12_PACKED_MIP_INFO*, D3D12_TILE_SHAPE*, UInt32*, UInt32, D3D12_SUBRESOURCE_TILING*, Void)).call(ptiledresource, pnumtilesforentireresource, ppackedmipdesc, pstandardtileshapefornonpackedmips, pnumsubresourcetilings, firstsubresourcetilingtoget, psubresourcetilingsfornonpackedmips)
  end
  def get_adapter_luid : LUID
    @lpVtbl.value.get_adapter_luid.unsafe_as(Proc(LUID)).call
  end
  def create_pipeline_library(plibraryblob : Void*, bloblength : LibC::UINT_PTR, riid : Guid*, pppipelinelibrary : Void**) : HRESULT
    @lpVtbl.value.create_pipeline_library.unsafe_as(Proc(Void*, LibC::UINT_PTR, Guid*, Void**, HRESULT)).call(plibraryblob, bloblength, riid, pppipelinelibrary)
  end
  def set_event_on_multiple_fence_completion(ppfences : ID3D12Fence*, pfencevalues : UInt64*, numfences : UInt32, flags : D3D12_MULTIPLE_FENCE_WAIT_FLAGS, hevent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.set_event_on_multiple_fence_completion.unsafe_as(Proc(ID3D12Fence*, UInt64*, UInt32, D3D12_MULTIPLE_FENCE_WAIT_FLAGS, LibC::HANDLE, HRESULT)).call(ppfences, pfencevalues, numfences, flags, hevent)
  end
  def set_residency_priority(numobjects : UInt32, ppobjects : ID3D12Pageable*, ppriorities : D3D12_RESIDENCY_PRIORITY*) : HRESULT
    @lpVtbl.value.set_residency_priority.unsafe_as(Proc(UInt32, ID3D12Pageable*, D3D12_RESIDENCY_PRIORITY*, HRESULT)).call(numobjects, ppobjects, ppriorities)
  end
  def create_pipeline_state(pdesc : D3D12_PIPELINE_STATE_STREAM_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_pipeline_state.unsafe_as(Proc(D3D12_PIPELINE_STATE_STREAM_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
  def open_existing_heap_from_address(paddress : Void*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.open_existing_heap_from_address.unsafe_as(Proc(Void*, Guid*, Void**, HRESULT)).call(paddress, riid, ppvheap)
  end
  def open_existing_heap_from_file_mapping(hfilemapping : LibC::HANDLE, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.open_existing_heap_from_file_mapping.unsafe_as(Proc(LibC::HANDLE, Guid*, Void**, HRESULT)).call(hfilemapping, riid, ppvheap)
  end
  def enqueue_make_resident(flags : D3D12_RESIDENCY_FLAGS, numobjects : UInt32, ppobjects : ID3D12Pageable*, pfencetosignal : ID3D12Fence, fencevaluetosignal : UInt64) : HRESULT
    @lpVtbl.value.enqueue_make_resident.unsafe_as(Proc(D3D12_RESIDENCY_FLAGS, UInt32, ID3D12Pageable*, ID3D12Fence, UInt64, HRESULT)).call(flags, numobjects, ppobjects, pfencetosignal, fencevaluetosignal)
  end
  def create_command_list1(nodemask : UInt32, type : D3D12_COMMAND_LIST_TYPE, flags : D3D12_COMMAND_LIST_FLAGS, riid : Guid*, ppcommandlist : Void**) : HRESULT
    @lpVtbl.value.create_command_list1.unsafe_as(Proc(UInt32, D3D12_COMMAND_LIST_TYPE, D3D12_COMMAND_LIST_FLAGS, Guid*, Void**, HRESULT)).call(nodemask, type, flags, riid, ppcommandlist)
  end
  def create_protected_resource_session(pdesc : D3D12_PROTECTED_RESOURCE_SESSION_DESC*, riid : Guid*, ppsession : Void**) : HRESULT
    @lpVtbl.value.create_protected_resource_session.unsafe_as(Proc(D3D12_PROTECTED_RESOURCE_SESSION_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppsession)
  end
  def create_committed_resource1(pheapproperties : D3D12_HEAP_PROPERTIES*, heapflags : D3D12_HEAP_FLAGS, pdesc : D3D12_RESOURCE_DESC*, initialresourcestate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, pprotectedsession : ID3D12ProtectedResourceSession, riidresource : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_committed_resource1.unsafe_as(Proc(D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)).call(pheapproperties, heapflags, pdesc, initialresourcestate, poptimizedclearvalue, pprotectedsession, riidresource, ppvresource)
  end
  def create_heap1(pdesc : D3D12_HEAP_DESC*, pprotectedsession : ID3D12ProtectedResourceSession, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_heap1.unsafe_as(Proc(D3D12_HEAP_DESC*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)).call(pdesc, pprotectedsession, riid, ppvheap)
  end
  def create_reserved_resource1(pdesc : D3D12_RESOURCE_DESC*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, pprotectedsession : ID3D12ProtectedResourceSession, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_reserved_resource1.unsafe_as(Proc(D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)).call(pdesc, initialstate, poptimizedclearvalue, pprotectedsession, riid, ppvresource)
  end
  def get_resource_allocation_info1(visiblemask : UInt32, numresourcedescs : UInt32, presourcedescs : D3D12_RESOURCE_DESC*, presourceallocationinfo1 : D3D12_RESOURCE_ALLOCATION_INFO1*) : D3D12_RESOURCE_ALLOCATION_INFO
    @lpVtbl.value.get_resource_allocation_info1.unsafe_as(Proc(UInt32, UInt32, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_ALLOCATION_INFO1*, D3D12_RESOURCE_ALLOCATION_INFO)).call(visiblemask, numresourcedescs, presourcedescs, presourceallocationinfo1)
  end
  def create_lifetime_tracker(powner : ID3D12LifetimeOwner, riid : Guid*, ppvtracker : Void**) : HRESULT
    @lpVtbl.value.create_lifetime_tracker.unsafe_as(Proc(ID3D12LifetimeOwner, Guid*, Void**, HRESULT)).call(powner, riid, ppvtracker)
  end
  def remove_device : Void
    @lpVtbl.value.remove_device.unsafe_as(Proc(Void)).call
  end
  def enumerate_meta_commands(pnummetacommands : UInt32*, pdescs : D3D12_META_COMMAND_DESC*) : HRESULT
    @lpVtbl.value.enumerate_meta_commands.unsafe_as(Proc(UInt32*, D3D12_META_COMMAND_DESC*, HRESULT)).call(pnummetacommands, pdescs)
  end
  def enumerate_meta_command_parameters(commandid : Guid*, stage : D3D12_META_COMMAND_PARAMETER_STAGE, ptotalstructuresizeinbytes : UInt32*, pparametercount : UInt32*, pparameterdescs : D3D12_META_COMMAND_PARAMETER_DESC*) : HRESULT
    @lpVtbl.value.enumerate_meta_command_parameters.unsafe_as(Proc(Guid*, D3D12_META_COMMAND_PARAMETER_STAGE, UInt32*, UInt32*, D3D12_META_COMMAND_PARAMETER_DESC*, HRESULT)).call(commandid, stage, ptotalstructuresizeinbytes, pparametercount, pparameterdescs)
  end
  def create_meta_command(commandid : Guid*, nodemask : UInt32, pcreationparametersdata : Void*, creationparametersdatasizeinbytes : LibC::UINT_PTR, riid : Guid*, ppmetacommand : Void**) : HRESULT
    @lpVtbl.value.create_meta_command.unsafe_as(Proc(Guid*, UInt32, Void*, LibC::UINT_PTR, Guid*, Void**, HRESULT)).call(commandid, nodemask, pcreationparametersdata, creationparametersdatasizeinbytes, riid, ppmetacommand)
  end
  def create_state_object(pdesc : D3D12_STATE_OBJECT_DESC*, riid : Guid*, ppstateobject : Void**) : HRESULT
    @lpVtbl.value.create_state_object.unsafe_as(Proc(D3D12_STATE_OBJECT_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppstateobject)
  end
  def get_raytracing_acceleration_structure_prebuild_info(pdesc : D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS*, pinfo : D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO*) : Void
    @lpVtbl.value.get_raytracing_acceleration_structure_prebuild_info.unsafe_as(Proc(D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS*, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO*, Void)).call(pdesc, pinfo)
  end
  def check_driver_matching_identifier(serializeddatatype : D3D12_SERIALIZED_DATA_TYPE, pidentifiertocheck : D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER*) : D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS
    @lpVtbl.value.check_driver_matching_identifier.unsafe_as(Proc(D3D12_SERIALIZED_DATA_TYPE, D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER*, D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS)).call(serializeddatatype, pidentifiertocheck)
  end
  def set_background_processing_mode(mode : D3D12_BACKGROUND_PROCESSING_MODE, measurementsaction : D3D12_MEASUREMENTS_ACTION, heventtosignaluponcompletion : LibC::HANDLE, pbfurthermeasurementsdesired : LibC::BOOL*) : HRESULT
    @lpVtbl.value.set_background_processing_mode.unsafe_as(Proc(D3D12_BACKGROUND_PROCESSING_MODE, D3D12_MEASUREMENTS_ACTION, LibC::HANDLE, LibC::BOOL*, HRESULT)).call(mode, measurementsaction, heventtosignaluponcompletion, pbfurthermeasurementsdesired)
  end
  def add_to_state_object(paddition : D3D12_STATE_OBJECT_DESC*, pstateobjecttogrowfrom : ID3D12StateObject, riid : Guid*, ppnewstateobject : Void**) : HRESULT
    @lpVtbl.value.add_to_state_object.unsafe_as(Proc(D3D12_STATE_OBJECT_DESC*, ID3D12StateObject, Guid*, Void**, HRESULT)).call(paddition, pstateobjecttogrowfrom, riid, ppnewstateobject)
  end
  def create_protected_resource_session1(pdesc : D3D12_PROTECTED_RESOURCE_SESSION_DESC1*, riid : Guid*, ppsession : Void**) : HRESULT
    @lpVtbl.value.create_protected_resource_session1.unsafe_as(Proc(D3D12_PROTECTED_RESOURCE_SESSION_DESC1*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppsession)
  end
  def get_resource_allocation_info2(visiblemask : UInt32, numresourcedescs : UInt32, presourcedescs : D3D12_RESOURCE_DESC1*, presourceallocationinfo1 : D3D12_RESOURCE_ALLOCATION_INFO1*) : D3D12_RESOURCE_ALLOCATION_INFO
    @lpVtbl.value.get_resource_allocation_info2.unsafe_as(Proc(UInt32, UInt32, D3D12_RESOURCE_DESC1*, D3D12_RESOURCE_ALLOCATION_INFO1*, D3D12_RESOURCE_ALLOCATION_INFO)).call(visiblemask, numresourcedescs, presourcedescs, presourceallocationinfo1)
  end
  def create_committed_resource2(pheapproperties : D3D12_HEAP_PROPERTIES*, heapflags : D3D12_HEAP_FLAGS, pdesc : D3D12_RESOURCE_DESC1*, initialresourcestate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, pprotectedsession : ID3D12ProtectedResourceSession, riidresource : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_committed_resource2.unsafe_as(Proc(D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS, D3D12_RESOURCE_DESC1*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)).call(pheapproperties, heapflags, pdesc, initialresourcestate, poptimizedclearvalue, pprotectedsession, riidresource, ppvresource)
  end
  def create_placed_resource1(pheap : ID3D12Heap, heapoffset : UInt64, pdesc : D3D12_RESOURCE_DESC1*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_placed_resource1.unsafe_as(Proc(ID3D12Heap, UInt64, D3D12_RESOURCE_DESC1*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pheap, heapoffset, pdesc, initialstate, poptimizedclearvalue, riid, ppvresource)
  end
  def create_sampler_feedback_unordered_access_view(ptargetedresource : ID3D12Resource, pfeedbackresource : ID3D12Resource, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_sampler_feedback_unordered_access_view.unsafe_as(Proc(ID3D12Resource, ID3D12Resource, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(ptargetedresource, pfeedbackresource, destdescriptor)
  end
  def get_copyable_footprints1(presourcedesc : D3D12_RESOURCE_DESC1*, firstsubresource : UInt32, numsubresources : UInt32, baseoffset : UInt64, playouts : D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, pnumrows : UInt32*, prowsizeinbytes : UInt64*, ptotalbytes : UInt64*) : Void
    @lpVtbl.value.get_copyable_footprints1.unsafe_as(Proc(D3D12_RESOURCE_DESC1*, UInt32, UInt32, UInt64, D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, UInt32*, UInt64*, UInt64*, Void)).call(presourcedesc, firstsubresource, numsubresources, baseoffset, playouts, pnumrows, prowsizeinbytes, ptotalbytes)
  end
end
struct LibWin32::ID3D12Resource1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
  def map(subresource : UInt32, preadrange : D3D12_RANGE*, ppdata : Void**) : HRESULT
    @lpVtbl.value.map.unsafe_as(Proc(UInt32, D3D12_RANGE*, Void**, HRESULT)).call(subresource, preadrange, ppdata)
  end
  def unmap(subresource : UInt32, pwrittenrange : D3D12_RANGE*) : Void
    @lpVtbl.value.unmap.unsafe_as(Proc(UInt32, D3D12_RANGE*, Void)).call(subresource, pwrittenrange)
  end
  def get_desc : D3D12_RESOURCE_DESC
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D12_RESOURCE_DESC)).call
  end
  def get_gpu_virtual_address : UInt64
    @lpVtbl.value.get_gpu_virtual_address.unsafe_as(Proc(UInt64)).call
  end
  def write_to_subresource(dstsubresource : UInt32, pdstbox : D3D12_BOX*, psrcdata : Void*, srcrowpitch : UInt32, srcdepthpitch : UInt32) : HRESULT
    @lpVtbl.value.write_to_subresource.unsafe_as(Proc(UInt32, D3D12_BOX*, Void*, UInt32, UInt32, HRESULT)).call(dstsubresource, pdstbox, psrcdata, srcrowpitch, srcdepthpitch)
  end
  def read_from_subresource(pdstdata : Void*, dstrowpitch : UInt32, dstdepthpitch : UInt32, srcsubresource : UInt32, psrcbox : D3D12_BOX*) : HRESULT
    @lpVtbl.value.read_from_subresource.unsafe_as(Proc(Void*, UInt32, UInt32, UInt32, D3D12_BOX*, HRESULT)).call(pdstdata, dstrowpitch, dstdepthpitch, srcsubresource, psrcbox)
  end
  def get_heap_properties(pheapproperties : D3D12_HEAP_PROPERTIES*, pheapflags : D3D12_HEAP_FLAGS*) : HRESULT
    @lpVtbl.value.get_heap_properties.unsafe_as(Proc(D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS*, HRESULT)).call(pheapproperties, pheapflags)
  end
  def get_protected_resource_session(riid : Guid*, ppprotectedsession : Void**) : HRESULT
    @lpVtbl.value.get_protected_resource_session.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppprotectedsession)
  end
end
struct LibWin32::ID3D12Resource2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
  def map(subresource : UInt32, preadrange : D3D12_RANGE*, ppdata : Void**) : HRESULT
    @lpVtbl.value.map.unsafe_as(Proc(UInt32, D3D12_RANGE*, Void**, HRESULT)).call(subresource, preadrange, ppdata)
  end
  def unmap(subresource : UInt32, pwrittenrange : D3D12_RANGE*) : Void
    @lpVtbl.value.unmap.unsafe_as(Proc(UInt32, D3D12_RANGE*, Void)).call(subresource, pwrittenrange)
  end
  def get_desc : D3D12_RESOURCE_DESC
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D12_RESOURCE_DESC)).call
  end
  def get_gpu_virtual_address : UInt64
    @lpVtbl.value.get_gpu_virtual_address.unsafe_as(Proc(UInt64)).call
  end
  def write_to_subresource(dstsubresource : UInt32, pdstbox : D3D12_BOX*, psrcdata : Void*, srcrowpitch : UInt32, srcdepthpitch : UInt32) : HRESULT
    @lpVtbl.value.write_to_subresource.unsafe_as(Proc(UInt32, D3D12_BOX*, Void*, UInt32, UInt32, HRESULT)).call(dstsubresource, pdstbox, psrcdata, srcrowpitch, srcdepthpitch)
  end
  def read_from_subresource(pdstdata : Void*, dstrowpitch : UInt32, dstdepthpitch : UInt32, srcsubresource : UInt32, psrcbox : D3D12_BOX*) : HRESULT
    @lpVtbl.value.read_from_subresource.unsafe_as(Proc(Void*, UInt32, UInt32, UInt32, D3D12_BOX*, HRESULT)).call(pdstdata, dstrowpitch, dstdepthpitch, srcsubresource, psrcbox)
  end
  def get_heap_properties(pheapproperties : D3D12_HEAP_PROPERTIES*, pheapflags : D3D12_HEAP_FLAGS*) : HRESULT
    @lpVtbl.value.get_heap_properties.unsafe_as(Proc(D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS*, HRESULT)).call(pheapproperties, pheapflags)
  end
  def get_protected_resource_session(riid : Guid*, ppprotectedsession : Void**) : HRESULT
    @lpVtbl.value.get_protected_resource_session.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppprotectedsession)
  end
  def get_desc1 : D3D12_RESOURCE_DESC1
    @lpVtbl.value.get_desc1.unsafe_as(Proc(D3D12_RESOURCE_DESC1)).call
  end
end
struct LibWin32::ID3D12Heap1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
  def get_desc : D3D12_HEAP_DESC
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D12_HEAP_DESC)).call
  end
  def get_protected_resource_session(riid : Guid*, ppprotectedsession : Void**) : HRESULT
    @lpVtbl.value.get_protected_resource_session.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppprotectedsession)
  end
end
struct LibWin32::ID3D12GraphicsCommandList3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
  def get_type : D3D12_COMMAND_LIST_TYPE
    @lpVtbl.value.get_type.unsafe_as(Proc(D3D12_COMMAND_LIST_TYPE)).call
  end
  def close : HRESULT
    @lpVtbl.value.close.unsafe_as(Proc(HRESULT)).call
  end
  def reset(pallocator : ID3D12CommandAllocator, pinitialstate : ID3D12PipelineState) : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(ID3D12CommandAllocator, ID3D12PipelineState, HRESULT)).call(pallocator, pinitialstate)
  end
  def clear_state(ppipelinestate : ID3D12PipelineState) : Void
    @lpVtbl.value.clear_state.unsafe_as(Proc(ID3D12PipelineState, Void)).call(ppipelinestate)
  end
  def draw_instanced(vertexcountperinstance : UInt32, instancecount : UInt32, startvertexlocation : UInt32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_instanced.unsafe_as(Proc(UInt32, UInt32, UInt32, UInt32, Void)).call(vertexcountperinstance, instancecount, startvertexlocation, startinstancelocation)
  end
  def draw_indexed_instanced(indexcountperinstance : UInt32, instancecount : UInt32, startindexlocation : UInt32, basevertexlocation : Int32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_indexed_instanced.unsafe_as(Proc(UInt32, UInt32, UInt32, Int32, UInt32, Void)).call(indexcountperinstance, instancecount, startindexlocation, basevertexlocation, startinstancelocation)
  end
  def dispatch(threadgroupcountx : UInt32, threadgroupcounty : UInt32, threadgroupcountz : UInt32) : Void
    @lpVtbl.value.dispatch.unsafe_as(Proc(UInt32, UInt32, UInt32, Void)).call(threadgroupcountx, threadgroupcounty, threadgroupcountz)
  end
  def copy_buffer_region(pdstbuffer : ID3D12Resource, dstoffset : UInt64, psrcbuffer : ID3D12Resource, srcoffset : UInt64, numbytes : UInt64) : Void
    @lpVtbl.value.copy_buffer_region.unsafe_as(Proc(ID3D12Resource, UInt64, ID3D12Resource, UInt64, UInt64, Void)).call(pdstbuffer, dstoffset, psrcbuffer, srcoffset, numbytes)
  end
  def copy_texture_region(pdst : D3D12_TEXTURE_COPY_LOCATION*, dstx : UInt32, dsty : UInt32, dstz : UInt32, psrc : D3D12_TEXTURE_COPY_LOCATION*, psrcbox : D3D12_BOX*) : Void
    @lpVtbl.value.copy_texture_region.unsafe_as(Proc(D3D12_TEXTURE_COPY_LOCATION*, UInt32, UInt32, UInt32, D3D12_TEXTURE_COPY_LOCATION*, D3D12_BOX*, Void)).call(pdst, dstx, dsty, dstz, psrc, psrcbox)
  end
  def copy_resource(pdstresource : ID3D12Resource, psrcresource : ID3D12Resource) : Void
    @lpVtbl.value.copy_resource.unsafe_as(Proc(ID3D12Resource, ID3D12Resource, Void)).call(pdstresource, psrcresource)
  end
  def copy_tiles(ptiledresource : ID3D12Resource, ptileregionstartcoordinate : D3D12_TILED_RESOURCE_COORDINATE*, ptileregionsize : D3D12_TILE_REGION_SIZE*, pbuffer : ID3D12Resource, bufferstartoffsetinbytes : UInt64, flags : D3D12_TILE_COPY_FLAGS) : Void
    @lpVtbl.value.copy_tiles.unsafe_as(Proc(ID3D12Resource, D3D12_TILED_RESOURCE_COORDINATE*, D3D12_TILE_REGION_SIZE*, ID3D12Resource, UInt64, D3D12_TILE_COPY_FLAGS, Void)).call(ptiledresource, ptileregionstartcoordinate, ptileregionsize, pbuffer, bufferstartoffsetinbytes, flags)
  end
  def resolve_subresource(pdstresource : ID3D12Resource, dstsubresource : UInt32, psrcresource : ID3D12Resource, srcsubresource : UInt32, format : DXGI_FORMAT) : Void
    @lpVtbl.value.resolve_subresource.unsafe_as(Proc(ID3D12Resource, UInt32, ID3D12Resource, UInt32, DXGI_FORMAT, Void)).call(pdstresource, dstsubresource, psrcresource, srcsubresource, format)
  end
  def ia_set_primitive_topology(primitivetopology : D3D_PRIMITIVE_TOPOLOGY) : Void
    @lpVtbl.value.ia_set_primitive_topology.unsafe_as(Proc(D3D_PRIMITIVE_TOPOLOGY, Void)).call(primitivetopology)
  end
  def rs_set_viewports(numviewports : UInt32, pviewports : D3D12_VIEWPORT*) : Void
    @lpVtbl.value.rs_set_viewports.unsafe_as(Proc(UInt32, D3D12_VIEWPORT*, Void)).call(numviewports, pviewports)
  end
  def rs_set_scissor_rects(numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.rs_set_scissor_rects.unsafe_as(Proc(UInt32, RECT*, Void)).call(numrects, prects)
  end
  def om_set_blend_factor(blendfactor : Float32*) : Void
    @lpVtbl.value.om_set_blend_factor.unsafe_as(Proc(Float32*, Void)).call(blendfactor)
  end
  def om_set_stencil_ref(stencilref : UInt32) : Void
    @lpVtbl.value.om_set_stencil_ref.unsafe_as(Proc(UInt32, Void)).call(stencilref)
  end
  def set_pipeline_state(ppipelinestate : ID3D12PipelineState) : Void
    @lpVtbl.value.set_pipeline_state.unsafe_as(Proc(ID3D12PipelineState, Void)).call(ppipelinestate)
  end
  def resource_barrier(numbarriers : UInt32, pbarriers : D3D12_RESOURCE_BARRIER*) : Void
    @lpVtbl.value.resource_barrier.unsafe_as(Proc(UInt32, D3D12_RESOURCE_BARRIER*, Void)).call(numbarriers, pbarriers)
  end
  def execute_bundle(pcommandlist : ID3D12GraphicsCommandList) : Void
    @lpVtbl.value.execute_bundle.unsafe_as(Proc(ID3D12GraphicsCommandList, Void)).call(pcommandlist)
  end
  def set_descriptor_heaps(numdescriptorheaps : UInt32, ppdescriptorheaps : ID3D12DescriptorHeap*) : Void
    @lpVtbl.value.set_descriptor_heaps.unsafe_as(Proc(UInt32, ID3D12DescriptorHeap*, Void)).call(numdescriptorheaps, ppdescriptorheaps)
  end
  def set_compute_root_signature(prootsignature : ID3D12RootSignature) : Void
    @lpVtbl.value.set_compute_root_signature.unsafe_as(Proc(ID3D12RootSignature, Void)).call(prootsignature)
  end
  def set_graphics_root_signature(prootsignature : ID3D12RootSignature) : Void
    @lpVtbl.value.set_graphics_root_signature.unsafe_as(Proc(ID3D12RootSignature, Void)).call(prootsignature)
  end
  def set_compute_root_descriptor_table(rootparameterindex : UInt32, basedescriptor : D3D12_GPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.set_compute_root_descriptor_table.unsafe_as(Proc(UInt32, D3D12_GPU_DESCRIPTOR_HANDLE, Void)).call(rootparameterindex, basedescriptor)
  end
  def set_graphics_root_descriptor_table(rootparameterindex : UInt32, basedescriptor : D3D12_GPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.set_graphics_root_descriptor_table.unsafe_as(Proc(UInt32, D3D12_GPU_DESCRIPTOR_HANDLE, Void)).call(rootparameterindex, basedescriptor)
  end
  def set_compute_root32_bit_constant(rootparameterindex : UInt32, srcdata : UInt32, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_compute_root32_bit_constant.unsafe_as(Proc(UInt32, UInt32, UInt32, Void)).call(rootparameterindex, srcdata, destoffsetin32bitvalues)
  end
  def set_graphics_root32_bit_constant(rootparameterindex : UInt32, srcdata : UInt32, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_graphics_root32_bit_constant.unsafe_as(Proc(UInt32, UInt32, UInt32, Void)).call(rootparameterindex, srcdata, destoffsetin32bitvalues)
  end
  def set_compute_root32_bit_constants(rootparameterindex : UInt32, num32bitvaluestoset : UInt32, psrcdata : Void*, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_compute_root32_bit_constants.unsafe_as(Proc(UInt32, UInt32, Void*, UInt32, Void)).call(rootparameterindex, num32bitvaluestoset, psrcdata, destoffsetin32bitvalues)
  end
  def set_graphics_root32_bit_constants(rootparameterindex : UInt32, num32bitvaluestoset : UInt32, psrcdata : Void*, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_graphics_root32_bit_constants.unsafe_as(Proc(UInt32, UInt32, Void*, UInt32, Void)).call(rootparameterindex, num32bitvaluestoset, psrcdata, destoffsetin32bitvalues)
  end
  def set_compute_root_constant_buffer_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_compute_root_constant_buffer_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_graphics_root_constant_buffer_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_graphics_root_constant_buffer_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_compute_root_shader_resource_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_compute_root_shader_resource_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_graphics_root_shader_resource_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_graphics_root_shader_resource_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_compute_root_unordered_access_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_compute_root_unordered_access_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_graphics_root_unordered_access_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_graphics_root_unordered_access_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def ia_set_index_buffer(pview : D3D12_INDEX_BUFFER_VIEW*) : Void
    @lpVtbl.value.ia_set_index_buffer.unsafe_as(Proc(D3D12_INDEX_BUFFER_VIEW*, Void)).call(pview)
  end
  def ia_set_vertex_buffers(startslot : UInt32, numviews : UInt32, pviews : D3D12_VERTEX_BUFFER_VIEW*) : Void
    @lpVtbl.value.ia_set_vertex_buffers.unsafe_as(Proc(UInt32, UInt32, D3D12_VERTEX_BUFFER_VIEW*, Void)).call(startslot, numviews, pviews)
  end
  def so_set_targets(startslot : UInt32, numviews : UInt32, pviews : D3D12_STREAM_OUTPUT_BUFFER_VIEW*) : Void
    @lpVtbl.value.so_set_targets.unsafe_as(Proc(UInt32, UInt32, D3D12_STREAM_OUTPUT_BUFFER_VIEW*, Void)).call(startslot, numviews, pviews)
  end
  def om_set_render_targets(numrendertargetdescriptors : UInt32, prendertargetdescriptors : D3D12_CPU_DESCRIPTOR_HANDLE*, rtssinglehandletodescriptorrange : LibC::BOOL, pdepthstencildescriptor : D3D12_CPU_DESCRIPTOR_HANDLE*) : Void
    @lpVtbl.value.om_set_render_targets.unsafe_as(Proc(UInt32, D3D12_CPU_DESCRIPTOR_HANDLE*, LibC::BOOL, D3D12_CPU_DESCRIPTOR_HANDLE*, Void)).call(numrendertargetdescriptors, prendertargetdescriptors, rtssinglehandletodescriptorrange, pdepthstencildescriptor)
  end
  def clear_depth_stencil_view(depthstencilview : D3D12_CPU_DESCRIPTOR_HANDLE, clearflags : D3D12_CLEAR_FLAGS, depth : Float32, stencil : UInt8, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_depth_stencil_view.unsafe_as(Proc(D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_CLEAR_FLAGS, Float32, UInt8, UInt32, RECT*, Void)).call(depthstencilview, clearflags, depth, stencil, numrects, prects)
  end
  def clear_render_target_view(rendertargetview : D3D12_CPU_DESCRIPTOR_HANDLE, colorrgba : Float32*, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_render_target_view.unsafe_as(Proc(D3D12_CPU_DESCRIPTOR_HANDLE, Float32*, UInt32, RECT*, Void)).call(rendertargetview, colorrgba, numrects, prects)
  end
  def clear_unordered_access_view_uint(viewgpuhandleincurrentheap : D3D12_GPU_DESCRIPTOR_HANDLE, viewcpuhandle : D3D12_CPU_DESCRIPTOR_HANDLE, presource : ID3D12Resource, values : UInt32*, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_unordered_access_view_uint.unsafe_as(Proc(D3D12_GPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, ID3D12Resource, UInt32*, UInt32, RECT*, Void)).call(viewgpuhandleincurrentheap, viewcpuhandle, presource, values, numrects, prects)
  end
  def clear_unordered_access_view_float(viewgpuhandleincurrentheap : D3D12_GPU_DESCRIPTOR_HANDLE, viewcpuhandle : D3D12_CPU_DESCRIPTOR_HANDLE, presource : ID3D12Resource, values : Float32*, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_unordered_access_view_float.unsafe_as(Proc(D3D12_GPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, ID3D12Resource, Float32*, UInt32, RECT*, Void)).call(viewgpuhandleincurrentheap, viewcpuhandle, presource, values, numrects, prects)
  end
  def discard_resource(presource : ID3D12Resource, pregion : D3D12_DISCARD_REGION*) : Void
    @lpVtbl.value.discard_resource.unsafe_as(Proc(ID3D12Resource, D3D12_DISCARD_REGION*, Void)).call(presource, pregion)
  end
  def begin_query(pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.begin_query.unsafe_as(Proc(ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)).call(pqueryheap, type, index)
  end
  def end_query(pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.end_query.unsafe_as(Proc(ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)).call(pqueryheap, type, index)
  end
  def resolve_query_data(pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, startindex : UInt32, numqueries : UInt32, pdestinationbuffer : ID3D12Resource, aligneddestinationbufferoffset : UInt64) : Void
    @lpVtbl.value.resolve_query_data.unsafe_as(Proc(ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, UInt32, ID3D12Resource, UInt64, Void)).call(pqueryheap, type, startindex, numqueries, pdestinationbuffer, aligneddestinationbufferoffset)
  end
  def set_predication(pbuffer : ID3D12Resource, alignedbufferoffset : UInt64, operation : D3D12_PREDICATION_OP) : Void
    @lpVtbl.value.set_predication.unsafe_as(Proc(ID3D12Resource, UInt64, D3D12_PREDICATION_OP, Void)).call(pbuffer, alignedbufferoffset, operation)
  end
  def set_marker(metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.set_marker.unsafe_as(Proc(UInt32, Void*, UInt32, Void)).call(metadata, pdata, size)
  end
  def begin_event(metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.begin_event.unsafe_as(Proc(UInt32, Void*, UInt32, Void)).call(metadata, pdata, size)
  end
  def end_event : Void
    @lpVtbl.value.end_event.unsafe_as(Proc(Void)).call
  end
  def execute_indirect(pcommandsignature : ID3D12CommandSignature, maxcommandcount : UInt32, pargumentbuffer : ID3D12Resource, argumentbufferoffset : UInt64, pcountbuffer : ID3D12Resource, countbufferoffset : UInt64) : Void
    @lpVtbl.value.execute_indirect.unsafe_as(Proc(ID3D12CommandSignature, UInt32, ID3D12Resource, UInt64, ID3D12Resource, UInt64, Void)).call(pcommandsignature, maxcommandcount, pargumentbuffer, argumentbufferoffset, pcountbuffer, countbufferoffset)
  end
  def atomic_copy_buffer_uint(pdstbuffer : ID3D12Resource, dstoffset : UInt64, psrcbuffer : ID3D12Resource, srcoffset : UInt64, dependencies : UInt32, ppdependentresources : ID3D12Resource*, pdependentsubresourceranges : D3D12_SUBRESOURCE_RANGE_UINT64*) : Void
    @lpVtbl.value.atomic_copy_buffer_uint.unsafe_as(Proc(ID3D12Resource, UInt64, ID3D12Resource, UInt64, UInt32, ID3D12Resource*, D3D12_SUBRESOURCE_RANGE_UINT64*, Void)).call(pdstbuffer, dstoffset, psrcbuffer, srcoffset, dependencies, ppdependentresources, pdependentsubresourceranges)
  end
  def atomic_copy_buffer_uint64(pdstbuffer : ID3D12Resource, dstoffset : UInt64, psrcbuffer : ID3D12Resource, srcoffset : UInt64, dependencies : UInt32, ppdependentresources : ID3D12Resource*, pdependentsubresourceranges : D3D12_SUBRESOURCE_RANGE_UINT64*) : Void
    @lpVtbl.value.atomic_copy_buffer_uint64.unsafe_as(Proc(ID3D12Resource, UInt64, ID3D12Resource, UInt64, UInt32, ID3D12Resource*, D3D12_SUBRESOURCE_RANGE_UINT64*, Void)).call(pdstbuffer, dstoffset, psrcbuffer, srcoffset, dependencies, ppdependentresources, pdependentsubresourceranges)
  end
  def om_set_depth_bounds(min : Float32, max : Float32) : Void
    @lpVtbl.value.om_set_depth_bounds.unsafe_as(Proc(Float32, Float32, Void)).call(min, max)
  end
  def set_sample_positions(numsamplesperpixel : UInt32, numpixels : UInt32, psamplepositions : D3D12_SAMPLE_POSITION*) : Void
    @lpVtbl.value.set_sample_positions.unsafe_as(Proc(UInt32, UInt32, D3D12_SAMPLE_POSITION*, Void)).call(numsamplesperpixel, numpixels, psamplepositions)
  end
  def resolve_subresource_region(pdstresource : ID3D12Resource, dstsubresource : UInt32, dstx : UInt32, dsty : UInt32, psrcresource : ID3D12Resource, srcsubresource : UInt32, psrcrect : RECT*, format : DXGI_FORMAT, resolvemode : D3D12_RESOLVE_MODE) : Void
    @lpVtbl.value.resolve_subresource_region.unsafe_as(Proc(ID3D12Resource, UInt32, UInt32, UInt32, ID3D12Resource, UInt32, RECT*, DXGI_FORMAT, D3D12_RESOLVE_MODE, Void)).call(pdstresource, dstsubresource, dstx, dsty, psrcresource, srcsubresource, psrcrect, format, resolvemode)
  end
  def set_view_instance_mask(mask : UInt32) : Void
    @lpVtbl.value.set_view_instance_mask.unsafe_as(Proc(UInt32, Void)).call(mask)
  end
  def write_buffer_immediate(count : UInt32, pparams : D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pmodes : D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
    @lpVtbl.value.write_buffer_immediate.unsafe_as(Proc(UInt32, D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void)).call(count, pparams, pmodes)
  end
  def set_protected_resource_session(pprotectedresourcesession : ID3D12ProtectedResourceSession) : Void
    @lpVtbl.value.set_protected_resource_session.unsafe_as(Proc(ID3D12ProtectedResourceSession, Void)).call(pprotectedresourcesession)
  end
end
struct LibWin32::ID3D12MetaCommand
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
  def get_required_parameter_resource_size(stage : D3D12_META_COMMAND_PARAMETER_STAGE, parameterindex : UInt32) : UInt64
    @lpVtbl.value.get_required_parameter_resource_size.unsafe_as(Proc(D3D12_META_COMMAND_PARAMETER_STAGE, UInt32, UInt64)).call(stage, parameterindex)
  end
end
struct LibWin32::ID3D12GraphicsCommandList4
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
  def get_type : D3D12_COMMAND_LIST_TYPE
    @lpVtbl.value.get_type.unsafe_as(Proc(D3D12_COMMAND_LIST_TYPE)).call
  end
  def close : HRESULT
    @lpVtbl.value.close.unsafe_as(Proc(HRESULT)).call
  end
  def reset(pallocator : ID3D12CommandAllocator, pinitialstate : ID3D12PipelineState) : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(ID3D12CommandAllocator, ID3D12PipelineState, HRESULT)).call(pallocator, pinitialstate)
  end
  def clear_state(ppipelinestate : ID3D12PipelineState) : Void
    @lpVtbl.value.clear_state.unsafe_as(Proc(ID3D12PipelineState, Void)).call(ppipelinestate)
  end
  def draw_instanced(vertexcountperinstance : UInt32, instancecount : UInt32, startvertexlocation : UInt32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_instanced.unsafe_as(Proc(UInt32, UInt32, UInt32, UInt32, Void)).call(vertexcountperinstance, instancecount, startvertexlocation, startinstancelocation)
  end
  def draw_indexed_instanced(indexcountperinstance : UInt32, instancecount : UInt32, startindexlocation : UInt32, basevertexlocation : Int32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_indexed_instanced.unsafe_as(Proc(UInt32, UInt32, UInt32, Int32, UInt32, Void)).call(indexcountperinstance, instancecount, startindexlocation, basevertexlocation, startinstancelocation)
  end
  def dispatch(threadgroupcountx : UInt32, threadgroupcounty : UInt32, threadgroupcountz : UInt32) : Void
    @lpVtbl.value.dispatch.unsafe_as(Proc(UInt32, UInt32, UInt32, Void)).call(threadgroupcountx, threadgroupcounty, threadgroupcountz)
  end
  def copy_buffer_region(pdstbuffer : ID3D12Resource, dstoffset : UInt64, psrcbuffer : ID3D12Resource, srcoffset : UInt64, numbytes : UInt64) : Void
    @lpVtbl.value.copy_buffer_region.unsafe_as(Proc(ID3D12Resource, UInt64, ID3D12Resource, UInt64, UInt64, Void)).call(pdstbuffer, dstoffset, psrcbuffer, srcoffset, numbytes)
  end
  def copy_texture_region(pdst : D3D12_TEXTURE_COPY_LOCATION*, dstx : UInt32, dsty : UInt32, dstz : UInt32, psrc : D3D12_TEXTURE_COPY_LOCATION*, psrcbox : D3D12_BOX*) : Void
    @lpVtbl.value.copy_texture_region.unsafe_as(Proc(D3D12_TEXTURE_COPY_LOCATION*, UInt32, UInt32, UInt32, D3D12_TEXTURE_COPY_LOCATION*, D3D12_BOX*, Void)).call(pdst, dstx, dsty, dstz, psrc, psrcbox)
  end
  def copy_resource(pdstresource : ID3D12Resource, psrcresource : ID3D12Resource) : Void
    @lpVtbl.value.copy_resource.unsafe_as(Proc(ID3D12Resource, ID3D12Resource, Void)).call(pdstresource, psrcresource)
  end
  def copy_tiles(ptiledresource : ID3D12Resource, ptileregionstartcoordinate : D3D12_TILED_RESOURCE_COORDINATE*, ptileregionsize : D3D12_TILE_REGION_SIZE*, pbuffer : ID3D12Resource, bufferstartoffsetinbytes : UInt64, flags : D3D12_TILE_COPY_FLAGS) : Void
    @lpVtbl.value.copy_tiles.unsafe_as(Proc(ID3D12Resource, D3D12_TILED_RESOURCE_COORDINATE*, D3D12_TILE_REGION_SIZE*, ID3D12Resource, UInt64, D3D12_TILE_COPY_FLAGS, Void)).call(ptiledresource, ptileregionstartcoordinate, ptileregionsize, pbuffer, bufferstartoffsetinbytes, flags)
  end
  def resolve_subresource(pdstresource : ID3D12Resource, dstsubresource : UInt32, psrcresource : ID3D12Resource, srcsubresource : UInt32, format : DXGI_FORMAT) : Void
    @lpVtbl.value.resolve_subresource.unsafe_as(Proc(ID3D12Resource, UInt32, ID3D12Resource, UInt32, DXGI_FORMAT, Void)).call(pdstresource, dstsubresource, psrcresource, srcsubresource, format)
  end
  def ia_set_primitive_topology(primitivetopology : D3D_PRIMITIVE_TOPOLOGY) : Void
    @lpVtbl.value.ia_set_primitive_topology.unsafe_as(Proc(D3D_PRIMITIVE_TOPOLOGY, Void)).call(primitivetopology)
  end
  def rs_set_viewports(numviewports : UInt32, pviewports : D3D12_VIEWPORT*) : Void
    @lpVtbl.value.rs_set_viewports.unsafe_as(Proc(UInt32, D3D12_VIEWPORT*, Void)).call(numviewports, pviewports)
  end
  def rs_set_scissor_rects(numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.rs_set_scissor_rects.unsafe_as(Proc(UInt32, RECT*, Void)).call(numrects, prects)
  end
  def om_set_blend_factor(blendfactor : Float32*) : Void
    @lpVtbl.value.om_set_blend_factor.unsafe_as(Proc(Float32*, Void)).call(blendfactor)
  end
  def om_set_stencil_ref(stencilref : UInt32) : Void
    @lpVtbl.value.om_set_stencil_ref.unsafe_as(Proc(UInt32, Void)).call(stencilref)
  end
  def set_pipeline_state(ppipelinestate : ID3D12PipelineState) : Void
    @lpVtbl.value.set_pipeline_state.unsafe_as(Proc(ID3D12PipelineState, Void)).call(ppipelinestate)
  end
  def resource_barrier(numbarriers : UInt32, pbarriers : D3D12_RESOURCE_BARRIER*) : Void
    @lpVtbl.value.resource_barrier.unsafe_as(Proc(UInt32, D3D12_RESOURCE_BARRIER*, Void)).call(numbarriers, pbarriers)
  end
  def execute_bundle(pcommandlist : ID3D12GraphicsCommandList) : Void
    @lpVtbl.value.execute_bundle.unsafe_as(Proc(ID3D12GraphicsCommandList, Void)).call(pcommandlist)
  end
  def set_descriptor_heaps(numdescriptorheaps : UInt32, ppdescriptorheaps : ID3D12DescriptorHeap*) : Void
    @lpVtbl.value.set_descriptor_heaps.unsafe_as(Proc(UInt32, ID3D12DescriptorHeap*, Void)).call(numdescriptorheaps, ppdescriptorheaps)
  end
  def set_compute_root_signature(prootsignature : ID3D12RootSignature) : Void
    @lpVtbl.value.set_compute_root_signature.unsafe_as(Proc(ID3D12RootSignature, Void)).call(prootsignature)
  end
  def set_graphics_root_signature(prootsignature : ID3D12RootSignature) : Void
    @lpVtbl.value.set_graphics_root_signature.unsafe_as(Proc(ID3D12RootSignature, Void)).call(prootsignature)
  end
  def set_compute_root_descriptor_table(rootparameterindex : UInt32, basedescriptor : D3D12_GPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.set_compute_root_descriptor_table.unsafe_as(Proc(UInt32, D3D12_GPU_DESCRIPTOR_HANDLE, Void)).call(rootparameterindex, basedescriptor)
  end
  def set_graphics_root_descriptor_table(rootparameterindex : UInt32, basedescriptor : D3D12_GPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.set_graphics_root_descriptor_table.unsafe_as(Proc(UInt32, D3D12_GPU_DESCRIPTOR_HANDLE, Void)).call(rootparameterindex, basedescriptor)
  end
  def set_compute_root32_bit_constant(rootparameterindex : UInt32, srcdata : UInt32, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_compute_root32_bit_constant.unsafe_as(Proc(UInt32, UInt32, UInt32, Void)).call(rootparameterindex, srcdata, destoffsetin32bitvalues)
  end
  def set_graphics_root32_bit_constant(rootparameterindex : UInt32, srcdata : UInt32, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_graphics_root32_bit_constant.unsafe_as(Proc(UInt32, UInt32, UInt32, Void)).call(rootparameterindex, srcdata, destoffsetin32bitvalues)
  end
  def set_compute_root32_bit_constants(rootparameterindex : UInt32, num32bitvaluestoset : UInt32, psrcdata : Void*, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_compute_root32_bit_constants.unsafe_as(Proc(UInt32, UInt32, Void*, UInt32, Void)).call(rootparameterindex, num32bitvaluestoset, psrcdata, destoffsetin32bitvalues)
  end
  def set_graphics_root32_bit_constants(rootparameterindex : UInt32, num32bitvaluestoset : UInt32, psrcdata : Void*, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_graphics_root32_bit_constants.unsafe_as(Proc(UInt32, UInt32, Void*, UInt32, Void)).call(rootparameterindex, num32bitvaluestoset, psrcdata, destoffsetin32bitvalues)
  end
  def set_compute_root_constant_buffer_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_compute_root_constant_buffer_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_graphics_root_constant_buffer_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_graphics_root_constant_buffer_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_compute_root_shader_resource_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_compute_root_shader_resource_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_graphics_root_shader_resource_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_graphics_root_shader_resource_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_compute_root_unordered_access_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_compute_root_unordered_access_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_graphics_root_unordered_access_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_graphics_root_unordered_access_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def ia_set_index_buffer(pview : D3D12_INDEX_BUFFER_VIEW*) : Void
    @lpVtbl.value.ia_set_index_buffer.unsafe_as(Proc(D3D12_INDEX_BUFFER_VIEW*, Void)).call(pview)
  end
  def ia_set_vertex_buffers(startslot : UInt32, numviews : UInt32, pviews : D3D12_VERTEX_BUFFER_VIEW*) : Void
    @lpVtbl.value.ia_set_vertex_buffers.unsafe_as(Proc(UInt32, UInt32, D3D12_VERTEX_BUFFER_VIEW*, Void)).call(startslot, numviews, pviews)
  end
  def so_set_targets(startslot : UInt32, numviews : UInt32, pviews : D3D12_STREAM_OUTPUT_BUFFER_VIEW*) : Void
    @lpVtbl.value.so_set_targets.unsafe_as(Proc(UInt32, UInt32, D3D12_STREAM_OUTPUT_BUFFER_VIEW*, Void)).call(startslot, numviews, pviews)
  end
  def om_set_render_targets(numrendertargetdescriptors : UInt32, prendertargetdescriptors : D3D12_CPU_DESCRIPTOR_HANDLE*, rtssinglehandletodescriptorrange : LibC::BOOL, pdepthstencildescriptor : D3D12_CPU_DESCRIPTOR_HANDLE*) : Void
    @lpVtbl.value.om_set_render_targets.unsafe_as(Proc(UInt32, D3D12_CPU_DESCRIPTOR_HANDLE*, LibC::BOOL, D3D12_CPU_DESCRIPTOR_HANDLE*, Void)).call(numrendertargetdescriptors, prendertargetdescriptors, rtssinglehandletodescriptorrange, pdepthstencildescriptor)
  end
  def clear_depth_stencil_view(depthstencilview : D3D12_CPU_DESCRIPTOR_HANDLE, clearflags : D3D12_CLEAR_FLAGS, depth : Float32, stencil : UInt8, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_depth_stencil_view.unsafe_as(Proc(D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_CLEAR_FLAGS, Float32, UInt8, UInt32, RECT*, Void)).call(depthstencilview, clearflags, depth, stencil, numrects, prects)
  end
  def clear_render_target_view(rendertargetview : D3D12_CPU_DESCRIPTOR_HANDLE, colorrgba : Float32*, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_render_target_view.unsafe_as(Proc(D3D12_CPU_DESCRIPTOR_HANDLE, Float32*, UInt32, RECT*, Void)).call(rendertargetview, colorrgba, numrects, prects)
  end
  def clear_unordered_access_view_uint(viewgpuhandleincurrentheap : D3D12_GPU_DESCRIPTOR_HANDLE, viewcpuhandle : D3D12_CPU_DESCRIPTOR_HANDLE, presource : ID3D12Resource, values : UInt32*, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_unordered_access_view_uint.unsafe_as(Proc(D3D12_GPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, ID3D12Resource, UInt32*, UInt32, RECT*, Void)).call(viewgpuhandleincurrentheap, viewcpuhandle, presource, values, numrects, prects)
  end
  def clear_unordered_access_view_float(viewgpuhandleincurrentheap : D3D12_GPU_DESCRIPTOR_HANDLE, viewcpuhandle : D3D12_CPU_DESCRIPTOR_HANDLE, presource : ID3D12Resource, values : Float32*, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_unordered_access_view_float.unsafe_as(Proc(D3D12_GPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, ID3D12Resource, Float32*, UInt32, RECT*, Void)).call(viewgpuhandleincurrentheap, viewcpuhandle, presource, values, numrects, prects)
  end
  def discard_resource(presource : ID3D12Resource, pregion : D3D12_DISCARD_REGION*) : Void
    @lpVtbl.value.discard_resource.unsafe_as(Proc(ID3D12Resource, D3D12_DISCARD_REGION*, Void)).call(presource, pregion)
  end
  def begin_query(pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.begin_query.unsafe_as(Proc(ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)).call(pqueryheap, type, index)
  end
  def end_query(pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.end_query.unsafe_as(Proc(ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)).call(pqueryheap, type, index)
  end
  def resolve_query_data(pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, startindex : UInt32, numqueries : UInt32, pdestinationbuffer : ID3D12Resource, aligneddestinationbufferoffset : UInt64) : Void
    @lpVtbl.value.resolve_query_data.unsafe_as(Proc(ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, UInt32, ID3D12Resource, UInt64, Void)).call(pqueryheap, type, startindex, numqueries, pdestinationbuffer, aligneddestinationbufferoffset)
  end
  def set_predication(pbuffer : ID3D12Resource, alignedbufferoffset : UInt64, operation : D3D12_PREDICATION_OP) : Void
    @lpVtbl.value.set_predication.unsafe_as(Proc(ID3D12Resource, UInt64, D3D12_PREDICATION_OP, Void)).call(pbuffer, alignedbufferoffset, operation)
  end
  def set_marker(metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.set_marker.unsafe_as(Proc(UInt32, Void*, UInt32, Void)).call(metadata, pdata, size)
  end
  def begin_event(metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.begin_event.unsafe_as(Proc(UInt32, Void*, UInt32, Void)).call(metadata, pdata, size)
  end
  def end_event : Void
    @lpVtbl.value.end_event.unsafe_as(Proc(Void)).call
  end
  def execute_indirect(pcommandsignature : ID3D12CommandSignature, maxcommandcount : UInt32, pargumentbuffer : ID3D12Resource, argumentbufferoffset : UInt64, pcountbuffer : ID3D12Resource, countbufferoffset : UInt64) : Void
    @lpVtbl.value.execute_indirect.unsafe_as(Proc(ID3D12CommandSignature, UInt32, ID3D12Resource, UInt64, ID3D12Resource, UInt64, Void)).call(pcommandsignature, maxcommandcount, pargumentbuffer, argumentbufferoffset, pcountbuffer, countbufferoffset)
  end
  def atomic_copy_buffer_uint(pdstbuffer : ID3D12Resource, dstoffset : UInt64, psrcbuffer : ID3D12Resource, srcoffset : UInt64, dependencies : UInt32, ppdependentresources : ID3D12Resource*, pdependentsubresourceranges : D3D12_SUBRESOURCE_RANGE_UINT64*) : Void
    @lpVtbl.value.atomic_copy_buffer_uint.unsafe_as(Proc(ID3D12Resource, UInt64, ID3D12Resource, UInt64, UInt32, ID3D12Resource*, D3D12_SUBRESOURCE_RANGE_UINT64*, Void)).call(pdstbuffer, dstoffset, psrcbuffer, srcoffset, dependencies, ppdependentresources, pdependentsubresourceranges)
  end
  def atomic_copy_buffer_uint64(pdstbuffer : ID3D12Resource, dstoffset : UInt64, psrcbuffer : ID3D12Resource, srcoffset : UInt64, dependencies : UInt32, ppdependentresources : ID3D12Resource*, pdependentsubresourceranges : D3D12_SUBRESOURCE_RANGE_UINT64*) : Void
    @lpVtbl.value.atomic_copy_buffer_uint64.unsafe_as(Proc(ID3D12Resource, UInt64, ID3D12Resource, UInt64, UInt32, ID3D12Resource*, D3D12_SUBRESOURCE_RANGE_UINT64*, Void)).call(pdstbuffer, dstoffset, psrcbuffer, srcoffset, dependencies, ppdependentresources, pdependentsubresourceranges)
  end
  def om_set_depth_bounds(min : Float32, max : Float32) : Void
    @lpVtbl.value.om_set_depth_bounds.unsafe_as(Proc(Float32, Float32, Void)).call(min, max)
  end
  def set_sample_positions(numsamplesperpixel : UInt32, numpixels : UInt32, psamplepositions : D3D12_SAMPLE_POSITION*) : Void
    @lpVtbl.value.set_sample_positions.unsafe_as(Proc(UInt32, UInt32, D3D12_SAMPLE_POSITION*, Void)).call(numsamplesperpixel, numpixels, psamplepositions)
  end
  def resolve_subresource_region(pdstresource : ID3D12Resource, dstsubresource : UInt32, dstx : UInt32, dsty : UInt32, psrcresource : ID3D12Resource, srcsubresource : UInt32, psrcrect : RECT*, format : DXGI_FORMAT, resolvemode : D3D12_RESOLVE_MODE) : Void
    @lpVtbl.value.resolve_subresource_region.unsafe_as(Proc(ID3D12Resource, UInt32, UInt32, UInt32, ID3D12Resource, UInt32, RECT*, DXGI_FORMAT, D3D12_RESOLVE_MODE, Void)).call(pdstresource, dstsubresource, dstx, dsty, psrcresource, srcsubresource, psrcrect, format, resolvemode)
  end
  def set_view_instance_mask(mask : UInt32) : Void
    @lpVtbl.value.set_view_instance_mask.unsafe_as(Proc(UInt32, Void)).call(mask)
  end
  def write_buffer_immediate(count : UInt32, pparams : D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pmodes : D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
    @lpVtbl.value.write_buffer_immediate.unsafe_as(Proc(UInt32, D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void)).call(count, pparams, pmodes)
  end
  def set_protected_resource_session(pprotectedresourcesession : ID3D12ProtectedResourceSession) : Void
    @lpVtbl.value.set_protected_resource_session.unsafe_as(Proc(ID3D12ProtectedResourceSession, Void)).call(pprotectedresourcesession)
  end
  def begin_render_pass(numrendertargets : UInt32, prendertargets : D3D12_RENDER_PASS_RENDER_TARGET_DESC*, pdepthstencil : D3D12_RENDER_PASS_DEPTH_STENCIL_DESC*, flags : D3D12_RENDER_PASS_FLAGS) : Void
    @lpVtbl.value.begin_render_pass.unsafe_as(Proc(UInt32, D3D12_RENDER_PASS_RENDER_TARGET_DESC*, D3D12_RENDER_PASS_DEPTH_STENCIL_DESC*, D3D12_RENDER_PASS_FLAGS, Void)).call(numrendertargets, prendertargets, pdepthstencil, flags)
  end
  def end_render_pass : Void
    @lpVtbl.value.end_render_pass.unsafe_as(Proc(Void)).call
  end
  def initialize_meta_command(pmetacommand : ID3D12MetaCommand, pinitializationparametersdata : Void*, initializationparametersdatasizeinbytes : LibC::UINT_PTR) : Void
    @lpVtbl.value.initialize_meta_command.unsafe_as(Proc(ID3D12MetaCommand, Void*, LibC::UINT_PTR, Void)).call(pmetacommand, pinitializationparametersdata, initializationparametersdatasizeinbytes)
  end
  def execute_meta_command(pmetacommand : ID3D12MetaCommand, pexecutionparametersdata : Void*, executionparametersdatasizeinbytes : LibC::UINT_PTR) : Void
    @lpVtbl.value.execute_meta_command.unsafe_as(Proc(ID3D12MetaCommand, Void*, LibC::UINT_PTR, Void)).call(pmetacommand, pexecutionparametersdata, executionparametersdatasizeinbytes)
  end
  def build_raytracing_acceleration_structure(pdesc : D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC*, numpostbuildinfodescs : UInt32, ppostbuildinfodescs : D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*) : Void
    @lpVtbl.value.build_raytracing_acceleration_structure.unsafe_as(Proc(D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC*, UInt32, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*, Void)).call(pdesc, numpostbuildinfodescs, ppostbuildinfodescs)
  end
  def emit_raytracing_acceleration_structure_postbuild_info(pdesc : D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*, numsourceaccelerationstructures : UInt32, psourceaccelerationstructuredata : UInt64*) : Void
    @lpVtbl.value.emit_raytracing_acceleration_structure_postbuild_info.unsafe_as(Proc(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*, UInt32, UInt64*, Void)).call(pdesc, numsourceaccelerationstructures, psourceaccelerationstructuredata)
  end
  def copy_raytracing_acceleration_structure(destaccelerationstructuredata : UInt64, sourceaccelerationstructuredata : UInt64, mode : D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE) : Void
    @lpVtbl.value.copy_raytracing_acceleration_structure.unsafe_as(Proc(UInt64, UInt64, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE, Void)).call(destaccelerationstructuredata, sourceaccelerationstructuredata, mode)
  end
  def set_pipeline_state1(pstateobject : ID3D12StateObject) : Void
    @lpVtbl.value.set_pipeline_state1.unsafe_as(Proc(ID3D12StateObject, Void)).call(pstateobject)
  end
  def dispatch_rays(pdesc : D3D12_DISPATCH_RAYS_DESC*) : Void
    @lpVtbl.value.dispatch_rays.unsafe_as(Proc(D3D12_DISPATCH_RAYS_DESC*, Void)).call(pdesc)
  end
end
struct LibWin32::ID3D12ShaderCacheSession
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
  def find_value(pkey : Void*, keysize : UInt32, pvalue : Void*, pvaluesize : UInt32*) : HRESULT
    @lpVtbl.value.find_value.unsafe_as(Proc(Void*, UInt32, Void*, UInt32*, HRESULT)).call(pkey, keysize, pvalue, pvaluesize)
  end
  def store_value(pkey : Void*, keysize : UInt32, pvalue : Void*, valuesize : UInt32) : HRESULT
    @lpVtbl.value.store_value.unsafe_as(Proc(Void*, UInt32, Void*, UInt32, HRESULT)).call(pkey, keysize, pvalue, valuesize)
  end
  def set_delete_on_destroy : Void
    @lpVtbl.value.set_delete_on_destroy.unsafe_as(Proc(Void)).call
  end
  def get_desc : D3D12_SHADER_CACHE_SESSION_DESC
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D12_SHADER_CACHE_SESSION_DESC)).call
  end
end
struct LibWin32::ID3D12Device9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_node_count : UInt32
    @lpVtbl.value.get_node_count.unsafe_as(Proc(UInt32)).call
  end
  def create_command_queue(pdesc : D3D12_COMMAND_QUEUE_DESC*, riid : Guid*, ppcommandqueue : Void**) : HRESULT
    @lpVtbl.value.create_command_queue.unsafe_as(Proc(D3D12_COMMAND_QUEUE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppcommandqueue)
  end
  def create_command_allocator(type : D3D12_COMMAND_LIST_TYPE, riid : Guid*, ppcommandallocator : Void**) : HRESULT
    @lpVtbl.value.create_command_allocator.unsafe_as(Proc(D3D12_COMMAND_LIST_TYPE, Guid*, Void**, HRESULT)).call(type, riid, ppcommandallocator)
  end
  def create_graphics_pipeline_state(pdesc : D3D12_GRAPHICS_PIPELINE_STATE_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_graphics_pipeline_state.unsafe_as(Proc(D3D12_GRAPHICS_PIPELINE_STATE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
  def create_compute_pipeline_state(pdesc : D3D12_COMPUTE_PIPELINE_STATE_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_compute_pipeline_state.unsafe_as(Proc(D3D12_COMPUTE_PIPELINE_STATE_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
  def create_command_list(nodemask : UInt32, type : D3D12_COMMAND_LIST_TYPE, pcommandallocator : ID3D12CommandAllocator, pinitialstate : ID3D12PipelineState, riid : Guid*, ppcommandlist : Void**) : HRESULT
    @lpVtbl.value.create_command_list.unsafe_as(Proc(UInt32, D3D12_COMMAND_LIST_TYPE, ID3D12CommandAllocator, ID3D12PipelineState, Guid*, Void**, HRESULT)).call(nodemask, type, pcommandallocator, pinitialstate, riid, ppcommandlist)
  end
  def check_feature_support(feature : D3D12_FEATURE, pfeaturesupportdata : Void*, featuresupportdatasize : UInt32) : HRESULT
    @lpVtbl.value.check_feature_support.unsafe_as(Proc(D3D12_FEATURE, Void*, UInt32, HRESULT)).call(feature, pfeaturesupportdata, featuresupportdatasize)
  end
  def create_descriptor_heap(pdescriptorheapdesc : D3D12_DESCRIPTOR_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_descriptor_heap.unsafe_as(Proc(D3D12_DESCRIPTOR_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdescriptorheapdesc, riid, ppvheap)
  end
  def get_descriptor_handle_increment_size(descriptorheaptype : D3D12_DESCRIPTOR_HEAP_TYPE) : UInt32
    @lpVtbl.value.get_descriptor_handle_increment_size.unsafe_as(Proc(D3D12_DESCRIPTOR_HEAP_TYPE, UInt32)).call(descriptorheaptype)
  end
  def create_root_signature(nodemask : UInt32, pblobwithrootsignature : Void*, bloblengthinbytes : LibC::UINT_PTR, riid : Guid*, ppvrootsignature : Void**) : HRESULT
    @lpVtbl.value.create_root_signature.unsafe_as(Proc(UInt32, Void*, LibC::UINT_PTR, Guid*, Void**, HRESULT)).call(nodemask, pblobwithrootsignature, bloblengthinbytes, riid, ppvrootsignature)
  end
  def create_constant_buffer_view(pdesc : D3D12_CONSTANT_BUFFER_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_constant_buffer_view.unsafe_as(Proc(D3D12_CONSTANT_BUFFER_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(pdesc, destdescriptor)
  end
  def create_shader_resource_view(presource : ID3D12Resource, pdesc : D3D12_SHADER_RESOURCE_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_shader_resource_view.unsafe_as(Proc(ID3D12Resource, D3D12_SHADER_RESOURCE_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_unordered_access_view(presource : ID3D12Resource, pcounterresource : ID3D12Resource, pdesc : D3D12_UNORDERED_ACCESS_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_unordered_access_view.unsafe_as(Proc(ID3D12Resource, ID3D12Resource, D3D12_UNORDERED_ACCESS_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pcounterresource, pdesc, destdescriptor)
  end
  def create_render_target_view(presource : ID3D12Resource, pdesc : D3D12_RENDER_TARGET_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_render_target_view.unsafe_as(Proc(ID3D12Resource, D3D12_RENDER_TARGET_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_depth_stencil_view(presource : ID3D12Resource, pdesc : D3D12_DEPTH_STENCIL_VIEW_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_depth_stencil_view.unsafe_as(Proc(ID3D12Resource, D3D12_DEPTH_STENCIL_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(presource, pdesc, destdescriptor)
  end
  def create_sampler(pdesc : D3D12_SAMPLER_DESC*, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_sampler.unsafe_as(Proc(D3D12_SAMPLER_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(pdesc, destdescriptor)
  end
  def copy_descriptors(numdestdescriptorranges : UInt32, pdestdescriptorrangestarts : D3D12_CPU_DESCRIPTOR_HANDLE*, pdestdescriptorrangesizes : UInt32*, numsrcdescriptorranges : UInt32, psrcdescriptorrangestarts : D3D12_CPU_DESCRIPTOR_HANDLE*, psrcdescriptorrangesizes : UInt32*, descriptorheapstype : D3D12_DESCRIPTOR_HEAP_TYPE) : Void
    @lpVtbl.value.copy_descriptors.unsafe_as(Proc(UInt32, D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, UInt32, D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, D3D12_DESCRIPTOR_HEAP_TYPE, Void)).call(numdestdescriptorranges, pdestdescriptorrangestarts, pdestdescriptorrangesizes, numsrcdescriptorranges, psrcdescriptorrangestarts, psrcdescriptorrangesizes, descriptorheapstype)
  end
  def copy_descriptors_simple(numdescriptors : UInt32, destdescriptorrangestart : D3D12_CPU_DESCRIPTOR_HANDLE, srcdescriptorrangestart : D3D12_CPU_DESCRIPTOR_HANDLE, descriptorheapstype : D3D12_DESCRIPTOR_HEAP_TYPE) : Void
    @lpVtbl.value.copy_descriptors_simple.unsafe_as(Proc(UInt32, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_DESCRIPTOR_HEAP_TYPE, Void)).call(numdescriptors, destdescriptorrangestart, srcdescriptorrangestart, descriptorheapstype)
  end
  def get_resource_allocation_info(visiblemask : UInt32, numresourcedescs : UInt32, presourcedescs : D3D12_RESOURCE_DESC*) : D3D12_RESOURCE_ALLOCATION_INFO
    @lpVtbl.value.get_resource_allocation_info.unsafe_as(Proc(UInt32, UInt32, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_ALLOCATION_INFO)).call(visiblemask, numresourcedescs, presourcedescs)
  end
  def get_custom_heap_properties(nodemask : UInt32, heaptype : D3D12_HEAP_TYPE) : D3D12_HEAP_PROPERTIES
    @lpVtbl.value.get_custom_heap_properties.unsafe_as(Proc(UInt32, D3D12_HEAP_TYPE, D3D12_HEAP_PROPERTIES)).call(nodemask, heaptype)
  end
  def create_committed_resource(pheapproperties : D3D12_HEAP_PROPERTIES*, heapflags : D3D12_HEAP_FLAGS, pdesc : D3D12_RESOURCE_DESC*, initialresourcestate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riidresource : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_committed_resource.unsafe_as(Proc(D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pheapproperties, heapflags, pdesc, initialresourcestate, poptimizedclearvalue, riidresource, ppvresource)
  end
  def create_heap(pdesc : D3D12_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_heap.unsafe_as(Proc(D3D12_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppvheap)
  end
  def create_placed_resource(pheap : ID3D12Heap, heapoffset : UInt64, pdesc : D3D12_RESOURCE_DESC*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_placed_resource.unsafe_as(Proc(ID3D12Heap, UInt64, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pheap, heapoffset, pdesc, initialstate, poptimizedclearvalue, riid, ppvresource)
  end
  def create_reserved_resource(pdesc : D3D12_RESOURCE_DESC*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_reserved_resource.unsafe_as(Proc(D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pdesc, initialstate, poptimizedclearvalue, riid, ppvresource)
  end
  def create_shared_handle(pobject : ID3D12DeviceChild, pattributes : SECURITY_ATTRIBUTES*, access : UInt32, name : LibC::LPWSTR, phandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_shared_handle.unsafe_as(Proc(ID3D12DeviceChild, SECURITY_ATTRIBUTES*, UInt32, LibC::LPWSTR, LibC::HANDLE*, HRESULT)).call(pobject, pattributes, access, name, phandle)
  end
  def open_shared_handle(nthandle : LibC::HANDLE, riid : Guid*, ppvobj : Void**) : HRESULT
    @lpVtbl.value.open_shared_handle.unsafe_as(Proc(LibC::HANDLE, Guid*, Void**, HRESULT)).call(nthandle, riid, ppvobj)
  end
  def open_shared_handle_by_name(name : LibC::LPWSTR, access : UInt32, pnthandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.open_shared_handle_by_name.unsafe_as(Proc(LibC::LPWSTR, UInt32, LibC::HANDLE*, HRESULT)).call(name, access, pnthandle)
  end
  def make_resident(numobjects : UInt32, ppobjects : ID3D12Pageable*) : HRESULT
    @lpVtbl.value.make_resident.unsafe_as(Proc(UInt32, ID3D12Pageable*, HRESULT)).call(numobjects, ppobjects)
  end
  def evict(numobjects : UInt32, ppobjects : ID3D12Pageable*) : HRESULT
    @lpVtbl.value.evict.unsafe_as(Proc(UInt32, ID3D12Pageable*, HRESULT)).call(numobjects, ppobjects)
  end
  def create_fence(initialvalue : UInt64, flags : D3D12_FENCE_FLAGS, riid : Guid*, ppfence : Void**) : HRESULT
    @lpVtbl.value.create_fence.unsafe_as(Proc(UInt64, D3D12_FENCE_FLAGS, Guid*, Void**, HRESULT)).call(initialvalue, flags, riid, ppfence)
  end
  def get_device_removed_reason : HRESULT
    @lpVtbl.value.get_device_removed_reason.unsafe_as(Proc(HRESULT)).call
  end
  def get_copyable_footprints(presourcedesc : D3D12_RESOURCE_DESC*, firstsubresource : UInt32, numsubresources : UInt32, baseoffset : UInt64, playouts : D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, pnumrows : UInt32*, prowsizeinbytes : UInt64*, ptotalbytes : UInt64*) : Void
    @lpVtbl.value.get_copyable_footprints.unsafe_as(Proc(D3D12_RESOURCE_DESC*, UInt32, UInt32, UInt64, D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, UInt32*, UInt64*, UInt64*, Void)).call(presourcedesc, firstsubresource, numsubresources, baseoffset, playouts, pnumrows, prowsizeinbytes, ptotalbytes)
  end
  def create_query_heap(pdesc : D3D12_QUERY_HEAP_DESC*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_query_heap.unsafe_as(Proc(D3D12_QUERY_HEAP_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppvheap)
  end
  def set_stable_power_state(enable : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_stable_power_state.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(enable)
  end
  def create_command_signature(pdesc : D3D12_COMMAND_SIGNATURE_DESC*, prootsignature : ID3D12RootSignature, riid : Guid*, ppvcommandsignature : Void**) : HRESULT
    @lpVtbl.value.create_command_signature.unsafe_as(Proc(D3D12_COMMAND_SIGNATURE_DESC*, ID3D12RootSignature, Guid*, Void**, HRESULT)).call(pdesc, prootsignature, riid, ppvcommandsignature)
  end
  def get_resource_tiling(ptiledresource : ID3D12Resource, pnumtilesforentireresource : UInt32*, ppackedmipdesc : D3D12_PACKED_MIP_INFO*, pstandardtileshapefornonpackedmips : D3D12_TILE_SHAPE*, pnumsubresourcetilings : UInt32*, firstsubresourcetilingtoget : UInt32, psubresourcetilingsfornonpackedmips : D3D12_SUBRESOURCE_TILING*) : Void
    @lpVtbl.value.get_resource_tiling.unsafe_as(Proc(ID3D12Resource, UInt32*, D3D12_PACKED_MIP_INFO*, D3D12_TILE_SHAPE*, UInt32*, UInt32, D3D12_SUBRESOURCE_TILING*, Void)).call(ptiledresource, pnumtilesforentireresource, ppackedmipdesc, pstandardtileshapefornonpackedmips, pnumsubresourcetilings, firstsubresourcetilingtoget, psubresourcetilingsfornonpackedmips)
  end
  def get_adapter_luid : LUID
    @lpVtbl.value.get_adapter_luid.unsafe_as(Proc(LUID)).call
  end
  def create_pipeline_library(plibraryblob : Void*, bloblength : LibC::UINT_PTR, riid : Guid*, pppipelinelibrary : Void**) : HRESULT
    @lpVtbl.value.create_pipeline_library.unsafe_as(Proc(Void*, LibC::UINT_PTR, Guid*, Void**, HRESULT)).call(plibraryblob, bloblength, riid, pppipelinelibrary)
  end
  def set_event_on_multiple_fence_completion(ppfences : ID3D12Fence*, pfencevalues : UInt64*, numfences : UInt32, flags : D3D12_MULTIPLE_FENCE_WAIT_FLAGS, hevent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.set_event_on_multiple_fence_completion.unsafe_as(Proc(ID3D12Fence*, UInt64*, UInt32, D3D12_MULTIPLE_FENCE_WAIT_FLAGS, LibC::HANDLE, HRESULT)).call(ppfences, pfencevalues, numfences, flags, hevent)
  end
  def set_residency_priority(numobjects : UInt32, ppobjects : ID3D12Pageable*, ppriorities : D3D12_RESIDENCY_PRIORITY*) : HRESULT
    @lpVtbl.value.set_residency_priority.unsafe_as(Proc(UInt32, ID3D12Pageable*, D3D12_RESIDENCY_PRIORITY*, HRESULT)).call(numobjects, ppobjects, ppriorities)
  end
  def create_pipeline_state(pdesc : D3D12_PIPELINE_STATE_STREAM_DESC*, riid : Guid*, pppipelinestate : Void**) : HRESULT
    @lpVtbl.value.create_pipeline_state.unsafe_as(Proc(D3D12_PIPELINE_STATE_STREAM_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, pppipelinestate)
  end
  def open_existing_heap_from_address(paddress : Void*, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.open_existing_heap_from_address.unsafe_as(Proc(Void*, Guid*, Void**, HRESULT)).call(paddress, riid, ppvheap)
  end
  def open_existing_heap_from_file_mapping(hfilemapping : LibC::HANDLE, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.open_existing_heap_from_file_mapping.unsafe_as(Proc(LibC::HANDLE, Guid*, Void**, HRESULT)).call(hfilemapping, riid, ppvheap)
  end
  def enqueue_make_resident(flags : D3D12_RESIDENCY_FLAGS, numobjects : UInt32, ppobjects : ID3D12Pageable*, pfencetosignal : ID3D12Fence, fencevaluetosignal : UInt64) : HRESULT
    @lpVtbl.value.enqueue_make_resident.unsafe_as(Proc(D3D12_RESIDENCY_FLAGS, UInt32, ID3D12Pageable*, ID3D12Fence, UInt64, HRESULT)).call(flags, numobjects, ppobjects, pfencetosignal, fencevaluetosignal)
  end
  def create_command_list1(nodemask : UInt32, type : D3D12_COMMAND_LIST_TYPE, flags : D3D12_COMMAND_LIST_FLAGS, riid : Guid*, ppcommandlist : Void**) : HRESULT
    @lpVtbl.value.create_command_list1.unsafe_as(Proc(UInt32, D3D12_COMMAND_LIST_TYPE, D3D12_COMMAND_LIST_FLAGS, Guid*, Void**, HRESULT)).call(nodemask, type, flags, riid, ppcommandlist)
  end
  def create_protected_resource_session(pdesc : D3D12_PROTECTED_RESOURCE_SESSION_DESC*, riid : Guid*, ppsession : Void**) : HRESULT
    @lpVtbl.value.create_protected_resource_session.unsafe_as(Proc(D3D12_PROTECTED_RESOURCE_SESSION_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppsession)
  end
  def create_committed_resource1(pheapproperties : D3D12_HEAP_PROPERTIES*, heapflags : D3D12_HEAP_FLAGS, pdesc : D3D12_RESOURCE_DESC*, initialresourcestate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, pprotectedsession : ID3D12ProtectedResourceSession, riidresource : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_committed_resource1.unsafe_as(Proc(D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)).call(pheapproperties, heapflags, pdesc, initialresourcestate, poptimizedclearvalue, pprotectedsession, riidresource, ppvresource)
  end
  def create_heap1(pdesc : D3D12_HEAP_DESC*, pprotectedsession : ID3D12ProtectedResourceSession, riid : Guid*, ppvheap : Void**) : HRESULT
    @lpVtbl.value.create_heap1.unsafe_as(Proc(D3D12_HEAP_DESC*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)).call(pdesc, pprotectedsession, riid, ppvheap)
  end
  def create_reserved_resource1(pdesc : D3D12_RESOURCE_DESC*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, pprotectedsession : ID3D12ProtectedResourceSession, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_reserved_resource1.unsafe_as(Proc(D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)).call(pdesc, initialstate, poptimizedclearvalue, pprotectedsession, riid, ppvresource)
  end
  def get_resource_allocation_info1(visiblemask : UInt32, numresourcedescs : UInt32, presourcedescs : D3D12_RESOURCE_DESC*, presourceallocationinfo1 : D3D12_RESOURCE_ALLOCATION_INFO1*) : D3D12_RESOURCE_ALLOCATION_INFO
    @lpVtbl.value.get_resource_allocation_info1.unsafe_as(Proc(UInt32, UInt32, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_ALLOCATION_INFO1*, D3D12_RESOURCE_ALLOCATION_INFO)).call(visiblemask, numresourcedescs, presourcedescs, presourceallocationinfo1)
  end
  def create_lifetime_tracker(powner : ID3D12LifetimeOwner, riid : Guid*, ppvtracker : Void**) : HRESULT
    @lpVtbl.value.create_lifetime_tracker.unsafe_as(Proc(ID3D12LifetimeOwner, Guid*, Void**, HRESULT)).call(powner, riid, ppvtracker)
  end
  def remove_device : Void
    @lpVtbl.value.remove_device.unsafe_as(Proc(Void)).call
  end
  def enumerate_meta_commands(pnummetacommands : UInt32*, pdescs : D3D12_META_COMMAND_DESC*) : HRESULT
    @lpVtbl.value.enumerate_meta_commands.unsafe_as(Proc(UInt32*, D3D12_META_COMMAND_DESC*, HRESULT)).call(pnummetacommands, pdescs)
  end
  def enumerate_meta_command_parameters(commandid : Guid*, stage : D3D12_META_COMMAND_PARAMETER_STAGE, ptotalstructuresizeinbytes : UInt32*, pparametercount : UInt32*, pparameterdescs : D3D12_META_COMMAND_PARAMETER_DESC*) : HRESULT
    @lpVtbl.value.enumerate_meta_command_parameters.unsafe_as(Proc(Guid*, D3D12_META_COMMAND_PARAMETER_STAGE, UInt32*, UInt32*, D3D12_META_COMMAND_PARAMETER_DESC*, HRESULT)).call(commandid, stage, ptotalstructuresizeinbytes, pparametercount, pparameterdescs)
  end
  def create_meta_command(commandid : Guid*, nodemask : UInt32, pcreationparametersdata : Void*, creationparametersdatasizeinbytes : LibC::UINT_PTR, riid : Guid*, ppmetacommand : Void**) : HRESULT
    @lpVtbl.value.create_meta_command.unsafe_as(Proc(Guid*, UInt32, Void*, LibC::UINT_PTR, Guid*, Void**, HRESULT)).call(commandid, nodemask, pcreationparametersdata, creationparametersdatasizeinbytes, riid, ppmetacommand)
  end
  def create_state_object(pdesc : D3D12_STATE_OBJECT_DESC*, riid : Guid*, ppstateobject : Void**) : HRESULT
    @lpVtbl.value.create_state_object.unsafe_as(Proc(D3D12_STATE_OBJECT_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppstateobject)
  end
  def get_raytracing_acceleration_structure_prebuild_info(pdesc : D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS*, pinfo : D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO*) : Void
    @lpVtbl.value.get_raytracing_acceleration_structure_prebuild_info.unsafe_as(Proc(D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS*, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO*, Void)).call(pdesc, pinfo)
  end
  def check_driver_matching_identifier(serializeddatatype : D3D12_SERIALIZED_DATA_TYPE, pidentifiertocheck : D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER*) : D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS
    @lpVtbl.value.check_driver_matching_identifier.unsafe_as(Proc(D3D12_SERIALIZED_DATA_TYPE, D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER*, D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS)).call(serializeddatatype, pidentifiertocheck)
  end
  def set_background_processing_mode(mode : D3D12_BACKGROUND_PROCESSING_MODE, measurementsaction : D3D12_MEASUREMENTS_ACTION, heventtosignaluponcompletion : LibC::HANDLE, pbfurthermeasurementsdesired : LibC::BOOL*) : HRESULT
    @lpVtbl.value.set_background_processing_mode.unsafe_as(Proc(D3D12_BACKGROUND_PROCESSING_MODE, D3D12_MEASUREMENTS_ACTION, LibC::HANDLE, LibC::BOOL*, HRESULT)).call(mode, measurementsaction, heventtosignaluponcompletion, pbfurthermeasurementsdesired)
  end
  def add_to_state_object(paddition : D3D12_STATE_OBJECT_DESC*, pstateobjecttogrowfrom : ID3D12StateObject, riid : Guid*, ppnewstateobject : Void**) : HRESULT
    @lpVtbl.value.add_to_state_object.unsafe_as(Proc(D3D12_STATE_OBJECT_DESC*, ID3D12StateObject, Guid*, Void**, HRESULT)).call(paddition, pstateobjecttogrowfrom, riid, ppnewstateobject)
  end
  def create_protected_resource_session1(pdesc : D3D12_PROTECTED_RESOURCE_SESSION_DESC1*, riid : Guid*, ppsession : Void**) : HRESULT
    @lpVtbl.value.create_protected_resource_session1.unsafe_as(Proc(D3D12_PROTECTED_RESOURCE_SESSION_DESC1*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppsession)
  end
  def get_resource_allocation_info2(visiblemask : UInt32, numresourcedescs : UInt32, presourcedescs : D3D12_RESOURCE_DESC1*, presourceallocationinfo1 : D3D12_RESOURCE_ALLOCATION_INFO1*) : D3D12_RESOURCE_ALLOCATION_INFO
    @lpVtbl.value.get_resource_allocation_info2.unsafe_as(Proc(UInt32, UInt32, D3D12_RESOURCE_DESC1*, D3D12_RESOURCE_ALLOCATION_INFO1*, D3D12_RESOURCE_ALLOCATION_INFO)).call(visiblemask, numresourcedescs, presourcedescs, presourceallocationinfo1)
  end
  def create_committed_resource2(pheapproperties : D3D12_HEAP_PROPERTIES*, heapflags : D3D12_HEAP_FLAGS, pdesc : D3D12_RESOURCE_DESC1*, initialresourcestate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, pprotectedsession : ID3D12ProtectedResourceSession, riidresource : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_committed_resource2.unsafe_as(Proc(D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS, D3D12_RESOURCE_DESC1*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, ID3D12ProtectedResourceSession, Guid*, Void**, HRESULT)).call(pheapproperties, heapflags, pdesc, initialresourcestate, poptimizedclearvalue, pprotectedsession, riidresource, ppvresource)
  end
  def create_placed_resource1(pheap : ID3D12Heap, heapoffset : UInt64, pdesc : D3D12_RESOURCE_DESC1*, initialstate : D3D12_RESOURCE_STATES, poptimizedclearvalue : D3D12_CLEAR_VALUE*, riid : Guid*, ppvresource : Void**) : HRESULT
    @lpVtbl.value.create_placed_resource1.unsafe_as(Proc(ID3D12Heap, UInt64, D3D12_RESOURCE_DESC1*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, Void**, HRESULT)).call(pheap, heapoffset, pdesc, initialstate, poptimizedclearvalue, riid, ppvresource)
  end
  def create_sampler_feedback_unordered_access_view(ptargetedresource : ID3D12Resource, pfeedbackresource : ID3D12Resource, destdescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.create_sampler_feedback_unordered_access_view.unsafe_as(Proc(ID3D12Resource, ID3D12Resource, D3D12_CPU_DESCRIPTOR_HANDLE, Void)).call(ptargetedresource, pfeedbackresource, destdescriptor)
  end
  def get_copyable_footprints1(presourcedesc : D3D12_RESOURCE_DESC1*, firstsubresource : UInt32, numsubresources : UInt32, baseoffset : UInt64, playouts : D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, pnumrows : UInt32*, prowsizeinbytes : UInt64*, ptotalbytes : UInt64*) : Void
    @lpVtbl.value.get_copyable_footprints1.unsafe_as(Proc(D3D12_RESOURCE_DESC1*, UInt32, UInt32, UInt64, D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, UInt32*, UInt64*, UInt64*, Void)).call(presourcedesc, firstsubresource, numsubresources, baseoffset, playouts, pnumrows, prowsizeinbytes, ptotalbytes)
  end
  def create_shader_cache_session(pdesc : D3D12_SHADER_CACHE_SESSION_DESC*, riid : Guid*, ppvsession : Void**) : HRESULT
    @lpVtbl.value.create_shader_cache_session.unsafe_as(Proc(D3D12_SHADER_CACHE_SESSION_DESC*, Guid*, Void**, HRESULT)).call(pdesc, riid, ppvsession)
  end
  def shader_cache_control(kinds : D3D12_SHADER_CACHE_KIND_FLAGS, control : D3D12_SHADER_CACHE_CONTROL_FLAGS) : HRESULT
    @lpVtbl.value.shader_cache_control.unsafe_as(Proc(D3D12_SHADER_CACHE_KIND_FLAGS, D3D12_SHADER_CACHE_CONTROL_FLAGS, HRESULT)).call(kinds, control)
  end
  def create_command_queue1(pdesc : D3D12_COMMAND_QUEUE_DESC*, creatorid : Guid*, riid : Guid*, ppcommandqueue : Void**) : HRESULT
    @lpVtbl.value.create_command_queue1.unsafe_as(Proc(D3D12_COMMAND_QUEUE_DESC*, Guid*, Guid*, Void**, HRESULT)).call(pdesc, creatorid, riid, ppcommandqueue)
  end
end
struct LibWin32::ID3D12Tools
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def enable_shader_instrumentation(benable : LibC::BOOL) : Void
    @lpVtbl.value.enable_shader_instrumentation.unsafe_as(Proc(LibC::BOOL, Void)).call(benable)
  end
  def shader_instrumentation_enabled : LibC::BOOL
    @lpVtbl.value.shader_instrumentation_enabled.unsafe_as(Proc(LibC::BOOL)).call
  end
end
struct LibWin32::ID3D12Debug
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def enable_debug_layer : Void
    @lpVtbl.value.enable_debug_layer.unsafe_as(Proc(Void)).call
  end
end
struct LibWin32::ID3D12Debug1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def enable_debug_layer : Void
    @lpVtbl.value.enable_debug_layer.unsafe_as(Proc(Void)).call
  end
  def set_enable_gpu_based_validation(enable : LibC::BOOL) : Void
    @lpVtbl.value.set_enable_gpu_based_validation.unsafe_as(Proc(LibC::BOOL, Void)).call(enable)
  end
  def set_enable_synchronized_command_queue_validation(enable : LibC::BOOL) : Void
    @lpVtbl.value.set_enable_synchronized_command_queue_validation.unsafe_as(Proc(LibC::BOOL, Void)).call(enable)
  end
end
struct LibWin32::ID3D12Debug2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_gpu_based_validation_flags(flags : D3D12_GPU_BASED_VALIDATION_FLAGS) : Void
    @lpVtbl.value.set_gpu_based_validation_flags.unsafe_as(Proc(D3D12_GPU_BASED_VALIDATION_FLAGS, Void)).call(flags)
  end
end
struct LibWin32::ID3D12Debug3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def enable_debug_layer : Void
    @lpVtbl.value.enable_debug_layer.unsafe_as(Proc(Void)).call
  end
  def set_enable_gpu_based_validation(enable : LibC::BOOL) : Void
    @lpVtbl.value.set_enable_gpu_based_validation.unsafe_as(Proc(LibC::BOOL, Void)).call(enable)
  end
  def set_enable_synchronized_command_queue_validation(enable : LibC::BOOL) : Void
    @lpVtbl.value.set_enable_synchronized_command_queue_validation.unsafe_as(Proc(LibC::BOOL, Void)).call(enable)
  end
  def set_gpu_based_validation_flags(flags : D3D12_GPU_BASED_VALIDATION_FLAGS) : Void
    @lpVtbl.value.set_gpu_based_validation_flags.unsafe_as(Proc(D3D12_GPU_BASED_VALIDATION_FLAGS, Void)).call(flags)
  end
end
struct LibWin32::ID3D12Debug4
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def enable_debug_layer : Void
    @lpVtbl.value.enable_debug_layer.unsafe_as(Proc(Void)).call
  end
  def set_enable_gpu_based_validation(enable : LibC::BOOL) : Void
    @lpVtbl.value.set_enable_gpu_based_validation.unsafe_as(Proc(LibC::BOOL, Void)).call(enable)
  end
  def set_enable_synchronized_command_queue_validation(enable : LibC::BOOL) : Void
    @lpVtbl.value.set_enable_synchronized_command_queue_validation.unsafe_as(Proc(LibC::BOOL, Void)).call(enable)
  end
  def set_gpu_based_validation_flags(flags : D3D12_GPU_BASED_VALIDATION_FLAGS) : Void
    @lpVtbl.value.set_gpu_based_validation_flags.unsafe_as(Proc(D3D12_GPU_BASED_VALIDATION_FLAGS, Void)).call(flags)
  end
  def disable_debug_layer : Void
    @lpVtbl.value.disable_debug_layer.unsafe_as(Proc(Void)).call
  end
end
struct LibWin32::ID3D12Debug5
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def enable_debug_layer : Void
    @lpVtbl.value.enable_debug_layer.unsafe_as(Proc(Void)).call
  end
  def set_enable_gpu_based_validation(enable : LibC::BOOL) : Void
    @lpVtbl.value.set_enable_gpu_based_validation.unsafe_as(Proc(LibC::BOOL, Void)).call(enable)
  end
  def set_enable_synchronized_command_queue_validation(enable : LibC::BOOL) : Void
    @lpVtbl.value.set_enable_synchronized_command_queue_validation.unsafe_as(Proc(LibC::BOOL, Void)).call(enable)
  end
  def set_gpu_based_validation_flags(flags : D3D12_GPU_BASED_VALIDATION_FLAGS) : Void
    @lpVtbl.value.set_gpu_based_validation_flags.unsafe_as(Proc(D3D12_GPU_BASED_VALIDATION_FLAGS, Void)).call(flags)
  end
  def disable_debug_layer : Void
    @lpVtbl.value.disable_debug_layer.unsafe_as(Proc(Void)).call
  end
  def set_enable_auto_name(enable : LibC::BOOL) : Void
    @lpVtbl.value.set_enable_auto_name.unsafe_as(Proc(LibC::BOOL, Void)).call(enable)
  end
end
struct LibWin32::ID3D12DebugDevice1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_debug_parameter(type : D3D12_DEBUG_DEVICE_PARAMETER_TYPE, pdata : Void*, datasize : UInt32) : HRESULT
    @lpVtbl.value.set_debug_parameter.unsafe_as(Proc(D3D12_DEBUG_DEVICE_PARAMETER_TYPE, Void*, UInt32, HRESULT)).call(type, pdata, datasize)
  end
  def get_debug_parameter(type : D3D12_DEBUG_DEVICE_PARAMETER_TYPE, pdata : Void*, datasize : UInt32) : HRESULT
    @lpVtbl.value.get_debug_parameter.unsafe_as(Proc(D3D12_DEBUG_DEVICE_PARAMETER_TYPE, Void*, UInt32, HRESULT)).call(type, pdata, datasize)
  end
  def report_live_device_objects(flags : D3D12_RLDO_FLAGS) : HRESULT
    @lpVtbl.value.report_live_device_objects.unsafe_as(Proc(D3D12_RLDO_FLAGS, HRESULT)).call(flags)
  end
end
struct LibWin32::ID3D12DebugDevice
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_feature_mask(mask : D3D12_DEBUG_FEATURE) : HRESULT
    @lpVtbl.value.set_feature_mask.unsafe_as(Proc(D3D12_DEBUG_FEATURE, HRESULT)).call(mask)
  end
  def get_feature_mask : D3D12_DEBUG_FEATURE
    @lpVtbl.value.get_feature_mask.unsafe_as(Proc(D3D12_DEBUG_FEATURE)).call
  end
  def report_live_device_objects(flags : D3D12_RLDO_FLAGS) : HRESULT
    @lpVtbl.value.report_live_device_objects.unsafe_as(Proc(D3D12_RLDO_FLAGS, HRESULT)).call(flags)
  end
end
struct LibWin32::ID3D12DebugDevice2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_feature_mask(mask : D3D12_DEBUG_FEATURE) : HRESULT
    @lpVtbl.value.set_feature_mask.unsafe_as(Proc(D3D12_DEBUG_FEATURE, HRESULT)).call(mask)
  end
  def get_feature_mask : D3D12_DEBUG_FEATURE
    @lpVtbl.value.get_feature_mask.unsafe_as(Proc(D3D12_DEBUG_FEATURE)).call
  end
  def report_live_device_objects(flags : D3D12_RLDO_FLAGS) : HRESULT
    @lpVtbl.value.report_live_device_objects.unsafe_as(Proc(D3D12_RLDO_FLAGS, HRESULT)).call(flags)
  end
  def set_debug_parameter(type : D3D12_DEBUG_DEVICE_PARAMETER_TYPE, pdata : Void*, datasize : UInt32) : HRESULT
    @lpVtbl.value.set_debug_parameter.unsafe_as(Proc(D3D12_DEBUG_DEVICE_PARAMETER_TYPE, Void*, UInt32, HRESULT)).call(type, pdata, datasize)
  end
  def get_debug_parameter(type : D3D12_DEBUG_DEVICE_PARAMETER_TYPE, pdata : Void*, datasize : UInt32) : HRESULT
    @lpVtbl.value.get_debug_parameter.unsafe_as(Proc(D3D12_DEBUG_DEVICE_PARAMETER_TYPE, Void*, UInt32, HRESULT)).call(type, pdata, datasize)
  end
end
struct LibWin32::ID3D12DebugCommandQueue
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def assert_resource_state(presource : ID3D12Resource, subresource : UInt32, state : UInt32) : LibC::BOOL
    @lpVtbl.value.assert_resource_state.unsafe_as(Proc(ID3D12Resource, UInt32, UInt32, LibC::BOOL)).call(presource, subresource, state)
  end
end
struct LibWin32::ID3D12DebugCommandList1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def assert_resource_state(presource : ID3D12Resource, subresource : UInt32, state : UInt32) : LibC::BOOL
    @lpVtbl.value.assert_resource_state.unsafe_as(Proc(ID3D12Resource, UInt32, UInt32, LibC::BOOL)).call(presource, subresource, state)
  end
  def set_debug_parameter(type : D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE, pdata : Void*, datasize : UInt32) : HRESULT
    @lpVtbl.value.set_debug_parameter.unsafe_as(Proc(D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE, Void*, UInt32, HRESULT)).call(type, pdata, datasize)
  end
  def get_debug_parameter(type : D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE, pdata : Void*, datasize : UInt32) : HRESULT
    @lpVtbl.value.get_debug_parameter.unsafe_as(Proc(D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE, Void*, UInt32, HRESULT)).call(type, pdata, datasize)
  end
end
struct LibWin32::ID3D12DebugCommandList
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def assert_resource_state(presource : ID3D12Resource, subresource : UInt32, state : UInt32) : LibC::BOOL
    @lpVtbl.value.assert_resource_state.unsafe_as(Proc(ID3D12Resource, UInt32, UInt32, LibC::BOOL)).call(presource, subresource, state)
  end
  def set_feature_mask(mask : D3D12_DEBUG_FEATURE) : HRESULT
    @lpVtbl.value.set_feature_mask.unsafe_as(Proc(D3D12_DEBUG_FEATURE, HRESULT)).call(mask)
  end
  def get_feature_mask : D3D12_DEBUG_FEATURE
    @lpVtbl.value.get_feature_mask.unsafe_as(Proc(D3D12_DEBUG_FEATURE)).call
  end
end
struct LibWin32::ID3D12DebugCommandList2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def assert_resource_state(presource : ID3D12Resource, subresource : UInt32, state : UInt32) : LibC::BOOL
    @lpVtbl.value.assert_resource_state.unsafe_as(Proc(ID3D12Resource, UInt32, UInt32, LibC::BOOL)).call(presource, subresource, state)
  end
  def set_feature_mask(mask : D3D12_DEBUG_FEATURE) : HRESULT
    @lpVtbl.value.set_feature_mask.unsafe_as(Proc(D3D12_DEBUG_FEATURE, HRESULT)).call(mask)
  end
  def get_feature_mask : D3D12_DEBUG_FEATURE
    @lpVtbl.value.get_feature_mask.unsafe_as(Proc(D3D12_DEBUG_FEATURE)).call
  end
  def set_debug_parameter(type : D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE, pdata : Void*, datasize : UInt32) : HRESULT
    @lpVtbl.value.set_debug_parameter.unsafe_as(Proc(D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE, Void*, UInt32, HRESULT)).call(type, pdata, datasize)
  end
  def get_debug_parameter(type : D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE, pdata : Void*, datasize : UInt32) : HRESULT
    @lpVtbl.value.get_debug_parameter.unsafe_as(Proc(D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE, Void*, UInt32, HRESULT)).call(type, pdata, datasize)
  end
end
struct LibWin32::ID3D12SharingContract
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def present(presource : ID3D12Resource, subresource : UInt32, window : LibC::HANDLE) : Void
    @lpVtbl.value.present.unsafe_as(Proc(ID3D12Resource, UInt32, LibC::HANDLE, Void)).call(presource, subresource, window)
  end
  def shared_fence_signal(pfence : ID3D12Fence, fencevalue : UInt64) : Void
    @lpVtbl.value.shared_fence_signal.unsafe_as(Proc(ID3D12Fence, UInt64, Void)).call(pfence, fencevalue)
  end
  def begin_capturable_work(guid : Guid*) : Void
    @lpVtbl.value.begin_capturable_work.unsafe_as(Proc(Guid*, Void)).call(guid)
  end
  def end_capturable_work(guid : Guid*) : Void
    @lpVtbl.value.end_capturable_work.unsafe_as(Proc(Guid*, Void)).call(guid)
  end
end
struct LibWin32::ID3D12InfoQueue
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_message_count_limit(messagecountlimit : UInt64) : HRESULT
    @lpVtbl.value.set_message_count_limit.unsafe_as(Proc(UInt64, HRESULT)).call(messagecountlimit)
  end
  def clear_stored_messages : Void
    @lpVtbl.value.clear_stored_messages.unsafe_as(Proc(Void)).call
  end
  def get_message(messageindex : UInt64, pmessage : D3D12_MESSAGE*, pmessagebytelength : LibC::UINT_PTR*) : HRESULT
    @lpVtbl.value.get_message.unsafe_as(Proc(UInt64, D3D12_MESSAGE*, LibC::UINT_PTR*, HRESULT)).call(messageindex, pmessage, pmessagebytelength)
  end
  def get_num_messages_allowed_by_storage_filter : UInt64
    @lpVtbl.value.get_num_messages_allowed_by_storage_filter.unsafe_as(Proc(UInt64)).call
  end
  def get_num_messages_denied_by_storage_filter : UInt64
    @lpVtbl.value.get_num_messages_denied_by_storage_filter.unsafe_as(Proc(UInt64)).call
  end
  def get_num_stored_messages : UInt64
    @lpVtbl.value.get_num_stored_messages.unsafe_as(Proc(UInt64)).call
  end
  def get_num_stored_messages_allowed_by_retrieval_filter : UInt64
    @lpVtbl.value.get_num_stored_messages_allowed_by_retrieval_filter.unsafe_as(Proc(UInt64)).call
  end
  def get_num_messages_discarded_by_message_count_limit : UInt64
    @lpVtbl.value.get_num_messages_discarded_by_message_count_limit.unsafe_as(Proc(UInt64)).call
  end
  def get_message_count_limit : UInt64
    @lpVtbl.value.get_message_count_limit.unsafe_as(Proc(UInt64)).call
  end
  def add_storage_filter_entries(pfilter : D3D12_INFO_QUEUE_FILTER*) : HRESULT
    @lpVtbl.value.add_storage_filter_entries.unsafe_as(Proc(D3D12_INFO_QUEUE_FILTER*, HRESULT)).call(pfilter)
  end
  def get_storage_filter(pfilter : D3D12_INFO_QUEUE_FILTER*, pfilterbytelength : LibC::UINT_PTR*) : HRESULT
    @lpVtbl.value.get_storage_filter.unsafe_as(Proc(D3D12_INFO_QUEUE_FILTER*, LibC::UINT_PTR*, HRESULT)).call(pfilter, pfilterbytelength)
  end
  def clear_storage_filter : Void
    @lpVtbl.value.clear_storage_filter.unsafe_as(Proc(Void)).call
  end
  def push_empty_storage_filter : HRESULT
    @lpVtbl.value.push_empty_storage_filter.unsafe_as(Proc(HRESULT)).call
  end
  def push_copy_of_storage_filter : HRESULT
    @lpVtbl.value.push_copy_of_storage_filter.unsafe_as(Proc(HRESULT)).call
  end
  def push_storage_filter(pfilter : D3D12_INFO_QUEUE_FILTER*) : HRESULT
    @lpVtbl.value.push_storage_filter.unsafe_as(Proc(D3D12_INFO_QUEUE_FILTER*, HRESULT)).call(pfilter)
  end
  def pop_storage_filter : Void
    @lpVtbl.value.pop_storage_filter.unsafe_as(Proc(Void)).call
  end
  def get_storage_filter_stack_size : UInt32
    @lpVtbl.value.get_storage_filter_stack_size.unsafe_as(Proc(UInt32)).call
  end
  def add_retrieval_filter_entries(pfilter : D3D12_INFO_QUEUE_FILTER*) : HRESULT
    @lpVtbl.value.add_retrieval_filter_entries.unsafe_as(Proc(D3D12_INFO_QUEUE_FILTER*, HRESULT)).call(pfilter)
  end
  def get_retrieval_filter(pfilter : D3D12_INFO_QUEUE_FILTER*, pfilterbytelength : LibC::UINT_PTR*) : HRESULT
    @lpVtbl.value.get_retrieval_filter.unsafe_as(Proc(D3D12_INFO_QUEUE_FILTER*, LibC::UINT_PTR*, HRESULT)).call(pfilter, pfilterbytelength)
  end
  def clear_retrieval_filter : Void
    @lpVtbl.value.clear_retrieval_filter.unsafe_as(Proc(Void)).call
  end
  def push_empty_retrieval_filter : HRESULT
    @lpVtbl.value.push_empty_retrieval_filter.unsafe_as(Proc(HRESULT)).call
  end
  def push_copy_of_retrieval_filter : HRESULT
    @lpVtbl.value.push_copy_of_retrieval_filter.unsafe_as(Proc(HRESULT)).call
  end
  def push_retrieval_filter(pfilter : D3D12_INFO_QUEUE_FILTER*) : HRESULT
    @lpVtbl.value.push_retrieval_filter.unsafe_as(Proc(D3D12_INFO_QUEUE_FILTER*, HRESULT)).call(pfilter)
  end
  def pop_retrieval_filter : Void
    @lpVtbl.value.pop_retrieval_filter.unsafe_as(Proc(Void)).call
  end
  def get_retrieval_filter_stack_size : UInt32
    @lpVtbl.value.get_retrieval_filter_stack_size.unsafe_as(Proc(UInt32)).call
  end
  def add_message(category : D3D12_MESSAGE_CATEGORY, severity : D3D12_MESSAGE_SEVERITY, id : D3D12_MESSAGE_ID, pdescription : PSTR) : HRESULT
    @lpVtbl.value.add_message.unsafe_as(Proc(D3D12_MESSAGE_CATEGORY, D3D12_MESSAGE_SEVERITY, D3D12_MESSAGE_ID, PSTR, HRESULT)).call(category, severity, id, pdescription)
  end
  def add_application_message(severity : D3D12_MESSAGE_SEVERITY, pdescription : PSTR) : HRESULT
    @lpVtbl.value.add_application_message.unsafe_as(Proc(D3D12_MESSAGE_SEVERITY, PSTR, HRESULT)).call(severity, pdescription)
  end
  def set_break_on_category(category : D3D12_MESSAGE_CATEGORY, benable : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_break_on_category.unsafe_as(Proc(D3D12_MESSAGE_CATEGORY, LibC::BOOL, HRESULT)).call(category, benable)
  end
  def set_break_on_severity(severity : D3D12_MESSAGE_SEVERITY, benable : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_break_on_severity.unsafe_as(Proc(D3D12_MESSAGE_SEVERITY, LibC::BOOL, HRESULT)).call(severity, benable)
  end
  def set_break_on_id(id : D3D12_MESSAGE_ID, benable : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_break_on_id.unsafe_as(Proc(D3D12_MESSAGE_ID, LibC::BOOL, HRESULT)).call(id, benable)
  end
  def get_break_on_category(category : D3D12_MESSAGE_CATEGORY) : LibC::BOOL
    @lpVtbl.value.get_break_on_category.unsafe_as(Proc(D3D12_MESSAGE_CATEGORY, LibC::BOOL)).call(category)
  end
  def get_break_on_severity(severity : D3D12_MESSAGE_SEVERITY) : LibC::BOOL
    @lpVtbl.value.get_break_on_severity.unsafe_as(Proc(D3D12_MESSAGE_SEVERITY, LibC::BOOL)).call(severity)
  end
  def get_break_on_id(id : D3D12_MESSAGE_ID) : LibC::BOOL
    @lpVtbl.value.get_break_on_id.unsafe_as(Proc(D3D12_MESSAGE_ID, LibC::BOOL)).call(id)
  end
  def set_mute_debug_output(bmute : LibC::BOOL) : Void
    @lpVtbl.value.set_mute_debug_output.unsafe_as(Proc(LibC::BOOL, Void)).call(bmute)
  end
  def get_mute_debug_output : LibC::BOOL
    @lpVtbl.value.get_mute_debug_output.unsafe_as(Proc(LibC::BOOL)).call
  end
end
struct LibWin32::ID3D12InfoQueue1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_message_count_limit(messagecountlimit : UInt64) : HRESULT
    @lpVtbl.value.set_message_count_limit.unsafe_as(Proc(UInt64, HRESULT)).call(messagecountlimit)
  end
  def clear_stored_messages : Void
    @lpVtbl.value.clear_stored_messages.unsafe_as(Proc(Void)).call
  end
  def get_message(messageindex : UInt64, pmessage : D3D12_MESSAGE*, pmessagebytelength : LibC::UINT_PTR*) : HRESULT
    @lpVtbl.value.get_message.unsafe_as(Proc(UInt64, D3D12_MESSAGE*, LibC::UINT_PTR*, HRESULT)).call(messageindex, pmessage, pmessagebytelength)
  end
  def get_num_messages_allowed_by_storage_filter : UInt64
    @lpVtbl.value.get_num_messages_allowed_by_storage_filter.unsafe_as(Proc(UInt64)).call
  end
  def get_num_messages_denied_by_storage_filter : UInt64
    @lpVtbl.value.get_num_messages_denied_by_storage_filter.unsafe_as(Proc(UInt64)).call
  end
  def get_num_stored_messages : UInt64
    @lpVtbl.value.get_num_stored_messages.unsafe_as(Proc(UInt64)).call
  end
  def get_num_stored_messages_allowed_by_retrieval_filter : UInt64
    @lpVtbl.value.get_num_stored_messages_allowed_by_retrieval_filter.unsafe_as(Proc(UInt64)).call
  end
  def get_num_messages_discarded_by_message_count_limit : UInt64
    @lpVtbl.value.get_num_messages_discarded_by_message_count_limit.unsafe_as(Proc(UInt64)).call
  end
  def get_message_count_limit : UInt64
    @lpVtbl.value.get_message_count_limit.unsafe_as(Proc(UInt64)).call
  end
  def add_storage_filter_entries(pfilter : D3D12_INFO_QUEUE_FILTER*) : HRESULT
    @lpVtbl.value.add_storage_filter_entries.unsafe_as(Proc(D3D12_INFO_QUEUE_FILTER*, HRESULT)).call(pfilter)
  end
  def get_storage_filter(pfilter : D3D12_INFO_QUEUE_FILTER*, pfilterbytelength : LibC::UINT_PTR*) : HRESULT
    @lpVtbl.value.get_storage_filter.unsafe_as(Proc(D3D12_INFO_QUEUE_FILTER*, LibC::UINT_PTR*, HRESULT)).call(pfilter, pfilterbytelength)
  end
  def clear_storage_filter : Void
    @lpVtbl.value.clear_storage_filter.unsafe_as(Proc(Void)).call
  end
  def push_empty_storage_filter : HRESULT
    @lpVtbl.value.push_empty_storage_filter.unsafe_as(Proc(HRESULT)).call
  end
  def push_copy_of_storage_filter : HRESULT
    @lpVtbl.value.push_copy_of_storage_filter.unsafe_as(Proc(HRESULT)).call
  end
  def push_storage_filter(pfilter : D3D12_INFO_QUEUE_FILTER*) : HRESULT
    @lpVtbl.value.push_storage_filter.unsafe_as(Proc(D3D12_INFO_QUEUE_FILTER*, HRESULT)).call(pfilter)
  end
  def pop_storage_filter : Void
    @lpVtbl.value.pop_storage_filter.unsafe_as(Proc(Void)).call
  end
  def get_storage_filter_stack_size : UInt32
    @lpVtbl.value.get_storage_filter_stack_size.unsafe_as(Proc(UInt32)).call
  end
  def add_retrieval_filter_entries(pfilter : D3D12_INFO_QUEUE_FILTER*) : HRESULT
    @lpVtbl.value.add_retrieval_filter_entries.unsafe_as(Proc(D3D12_INFO_QUEUE_FILTER*, HRESULT)).call(pfilter)
  end
  def get_retrieval_filter(pfilter : D3D12_INFO_QUEUE_FILTER*, pfilterbytelength : LibC::UINT_PTR*) : HRESULT
    @lpVtbl.value.get_retrieval_filter.unsafe_as(Proc(D3D12_INFO_QUEUE_FILTER*, LibC::UINT_PTR*, HRESULT)).call(pfilter, pfilterbytelength)
  end
  def clear_retrieval_filter : Void
    @lpVtbl.value.clear_retrieval_filter.unsafe_as(Proc(Void)).call
  end
  def push_empty_retrieval_filter : HRESULT
    @lpVtbl.value.push_empty_retrieval_filter.unsafe_as(Proc(HRESULT)).call
  end
  def push_copy_of_retrieval_filter : HRESULT
    @lpVtbl.value.push_copy_of_retrieval_filter.unsafe_as(Proc(HRESULT)).call
  end
  def push_retrieval_filter(pfilter : D3D12_INFO_QUEUE_FILTER*) : HRESULT
    @lpVtbl.value.push_retrieval_filter.unsafe_as(Proc(D3D12_INFO_QUEUE_FILTER*, HRESULT)).call(pfilter)
  end
  def pop_retrieval_filter : Void
    @lpVtbl.value.pop_retrieval_filter.unsafe_as(Proc(Void)).call
  end
  def get_retrieval_filter_stack_size : UInt32
    @lpVtbl.value.get_retrieval_filter_stack_size.unsafe_as(Proc(UInt32)).call
  end
  def add_message(category : D3D12_MESSAGE_CATEGORY, severity : D3D12_MESSAGE_SEVERITY, id : D3D12_MESSAGE_ID, pdescription : PSTR) : HRESULT
    @lpVtbl.value.add_message.unsafe_as(Proc(D3D12_MESSAGE_CATEGORY, D3D12_MESSAGE_SEVERITY, D3D12_MESSAGE_ID, PSTR, HRESULT)).call(category, severity, id, pdescription)
  end
  def add_application_message(severity : D3D12_MESSAGE_SEVERITY, pdescription : PSTR) : HRESULT
    @lpVtbl.value.add_application_message.unsafe_as(Proc(D3D12_MESSAGE_SEVERITY, PSTR, HRESULT)).call(severity, pdescription)
  end
  def set_break_on_category(category : D3D12_MESSAGE_CATEGORY, benable : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_break_on_category.unsafe_as(Proc(D3D12_MESSAGE_CATEGORY, LibC::BOOL, HRESULT)).call(category, benable)
  end
  def set_break_on_severity(severity : D3D12_MESSAGE_SEVERITY, benable : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_break_on_severity.unsafe_as(Proc(D3D12_MESSAGE_SEVERITY, LibC::BOOL, HRESULT)).call(severity, benable)
  end
  def set_break_on_id(id : D3D12_MESSAGE_ID, benable : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_break_on_id.unsafe_as(Proc(D3D12_MESSAGE_ID, LibC::BOOL, HRESULT)).call(id, benable)
  end
  def get_break_on_category(category : D3D12_MESSAGE_CATEGORY) : LibC::BOOL
    @lpVtbl.value.get_break_on_category.unsafe_as(Proc(D3D12_MESSAGE_CATEGORY, LibC::BOOL)).call(category)
  end
  def get_break_on_severity(severity : D3D12_MESSAGE_SEVERITY) : LibC::BOOL
    @lpVtbl.value.get_break_on_severity.unsafe_as(Proc(D3D12_MESSAGE_SEVERITY, LibC::BOOL)).call(severity)
  end
  def get_break_on_id(id : D3D12_MESSAGE_ID) : LibC::BOOL
    @lpVtbl.value.get_break_on_id.unsafe_as(Proc(D3D12_MESSAGE_ID, LibC::BOOL)).call(id)
  end
  def set_mute_debug_output(bmute : LibC::BOOL) : Void
    @lpVtbl.value.set_mute_debug_output.unsafe_as(Proc(LibC::BOOL, Void)).call(bmute)
  end
  def get_mute_debug_output : LibC::BOOL
    @lpVtbl.value.get_mute_debug_output.unsafe_as(Proc(LibC::BOOL)).call
  end
  def register_message_callback(callbackfunc : D3D12MessageFunc, callbackfilterflags : D3D12_MESSAGE_CALLBACK_FLAGS, pcontext : Void*, pcallbackcookie : UInt32*) : HRESULT
    @lpVtbl.value.register_message_callback.unsafe_as(Proc(D3D12MessageFunc, D3D12_MESSAGE_CALLBACK_FLAGS, Void*, UInt32*, HRESULT)).call(callbackfunc, callbackfilterflags, pcontext, pcallbackcookie)
  end
  def unregister_message_callback(callbackcookie : UInt32) : HRESULT
    @lpVtbl.value.unregister_message_callback.unsafe_as(Proc(UInt32, HRESULT)).call(callbackcookie)
  end
end
struct LibWin32::ID3D12SDKConfiguration
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_sdk_version(sdkversion : UInt32, sdkpath : PSTR) : HRESULT
    @lpVtbl.value.set_sdk_version.unsafe_as(Proc(UInt32, PSTR, HRESULT)).call(sdkversion, sdkpath)
  end
end
struct LibWin32::ID3D12GraphicsCommandList5
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
  def get_type : D3D12_COMMAND_LIST_TYPE
    @lpVtbl.value.get_type.unsafe_as(Proc(D3D12_COMMAND_LIST_TYPE)).call
  end
  def close : HRESULT
    @lpVtbl.value.close.unsafe_as(Proc(HRESULT)).call
  end
  def reset(pallocator : ID3D12CommandAllocator, pinitialstate : ID3D12PipelineState) : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(ID3D12CommandAllocator, ID3D12PipelineState, HRESULT)).call(pallocator, pinitialstate)
  end
  def clear_state(ppipelinestate : ID3D12PipelineState) : Void
    @lpVtbl.value.clear_state.unsafe_as(Proc(ID3D12PipelineState, Void)).call(ppipelinestate)
  end
  def draw_instanced(vertexcountperinstance : UInt32, instancecount : UInt32, startvertexlocation : UInt32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_instanced.unsafe_as(Proc(UInt32, UInt32, UInt32, UInt32, Void)).call(vertexcountperinstance, instancecount, startvertexlocation, startinstancelocation)
  end
  def draw_indexed_instanced(indexcountperinstance : UInt32, instancecount : UInt32, startindexlocation : UInt32, basevertexlocation : Int32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_indexed_instanced.unsafe_as(Proc(UInt32, UInt32, UInt32, Int32, UInt32, Void)).call(indexcountperinstance, instancecount, startindexlocation, basevertexlocation, startinstancelocation)
  end
  def dispatch(threadgroupcountx : UInt32, threadgroupcounty : UInt32, threadgroupcountz : UInt32) : Void
    @lpVtbl.value.dispatch.unsafe_as(Proc(UInt32, UInt32, UInt32, Void)).call(threadgroupcountx, threadgroupcounty, threadgroupcountz)
  end
  def copy_buffer_region(pdstbuffer : ID3D12Resource, dstoffset : UInt64, psrcbuffer : ID3D12Resource, srcoffset : UInt64, numbytes : UInt64) : Void
    @lpVtbl.value.copy_buffer_region.unsafe_as(Proc(ID3D12Resource, UInt64, ID3D12Resource, UInt64, UInt64, Void)).call(pdstbuffer, dstoffset, psrcbuffer, srcoffset, numbytes)
  end
  def copy_texture_region(pdst : D3D12_TEXTURE_COPY_LOCATION*, dstx : UInt32, dsty : UInt32, dstz : UInt32, psrc : D3D12_TEXTURE_COPY_LOCATION*, psrcbox : D3D12_BOX*) : Void
    @lpVtbl.value.copy_texture_region.unsafe_as(Proc(D3D12_TEXTURE_COPY_LOCATION*, UInt32, UInt32, UInt32, D3D12_TEXTURE_COPY_LOCATION*, D3D12_BOX*, Void)).call(pdst, dstx, dsty, dstz, psrc, psrcbox)
  end
  def copy_resource(pdstresource : ID3D12Resource, psrcresource : ID3D12Resource) : Void
    @lpVtbl.value.copy_resource.unsafe_as(Proc(ID3D12Resource, ID3D12Resource, Void)).call(pdstresource, psrcresource)
  end
  def copy_tiles(ptiledresource : ID3D12Resource, ptileregionstartcoordinate : D3D12_TILED_RESOURCE_COORDINATE*, ptileregionsize : D3D12_TILE_REGION_SIZE*, pbuffer : ID3D12Resource, bufferstartoffsetinbytes : UInt64, flags : D3D12_TILE_COPY_FLAGS) : Void
    @lpVtbl.value.copy_tiles.unsafe_as(Proc(ID3D12Resource, D3D12_TILED_RESOURCE_COORDINATE*, D3D12_TILE_REGION_SIZE*, ID3D12Resource, UInt64, D3D12_TILE_COPY_FLAGS, Void)).call(ptiledresource, ptileregionstartcoordinate, ptileregionsize, pbuffer, bufferstartoffsetinbytes, flags)
  end
  def resolve_subresource(pdstresource : ID3D12Resource, dstsubresource : UInt32, psrcresource : ID3D12Resource, srcsubresource : UInt32, format : DXGI_FORMAT) : Void
    @lpVtbl.value.resolve_subresource.unsafe_as(Proc(ID3D12Resource, UInt32, ID3D12Resource, UInt32, DXGI_FORMAT, Void)).call(pdstresource, dstsubresource, psrcresource, srcsubresource, format)
  end
  def ia_set_primitive_topology(primitivetopology : D3D_PRIMITIVE_TOPOLOGY) : Void
    @lpVtbl.value.ia_set_primitive_topology.unsafe_as(Proc(D3D_PRIMITIVE_TOPOLOGY, Void)).call(primitivetopology)
  end
  def rs_set_viewports(numviewports : UInt32, pviewports : D3D12_VIEWPORT*) : Void
    @lpVtbl.value.rs_set_viewports.unsafe_as(Proc(UInt32, D3D12_VIEWPORT*, Void)).call(numviewports, pviewports)
  end
  def rs_set_scissor_rects(numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.rs_set_scissor_rects.unsafe_as(Proc(UInt32, RECT*, Void)).call(numrects, prects)
  end
  def om_set_blend_factor(blendfactor : Float32*) : Void
    @lpVtbl.value.om_set_blend_factor.unsafe_as(Proc(Float32*, Void)).call(blendfactor)
  end
  def om_set_stencil_ref(stencilref : UInt32) : Void
    @lpVtbl.value.om_set_stencil_ref.unsafe_as(Proc(UInt32, Void)).call(stencilref)
  end
  def set_pipeline_state(ppipelinestate : ID3D12PipelineState) : Void
    @lpVtbl.value.set_pipeline_state.unsafe_as(Proc(ID3D12PipelineState, Void)).call(ppipelinestate)
  end
  def resource_barrier(numbarriers : UInt32, pbarriers : D3D12_RESOURCE_BARRIER*) : Void
    @lpVtbl.value.resource_barrier.unsafe_as(Proc(UInt32, D3D12_RESOURCE_BARRIER*, Void)).call(numbarriers, pbarriers)
  end
  def execute_bundle(pcommandlist : ID3D12GraphicsCommandList) : Void
    @lpVtbl.value.execute_bundle.unsafe_as(Proc(ID3D12GraphicsCommandList, Void)).call(pcommandlist)
  end
  def set_descriptor_heaps(numdescriptorheaps : UInt32, ppdescriptorheaps : ID3D12DescriptorHeap*) : Void
    @lpVtbl.value.set_descriptor_heaps.unsafe_as(Proc(UInt32, ID3D12DescriptorHeap*, Void)).call(numdescriptorheaps, ppdescriptorheaps)
  end
  def set_compute_root_signature(prootsignature : ID3D12RootSignature) : Void
    @lpVtbl.value.set_compute_root_signature.unsafe_as(Proc(ID3D12RootSignature, Void)).call(prootsignature)
  end
  def set_graphics_root_signature(prootsignature : ID3D12RootSignature) : Void
    @lpVtbl.value.set_graphics_root_signature.unsafe_as(Proc(ID3D12RootSignature, Void)).call(prootsignature)
  end
  def set_compute_root_descriptor_table(rootparameterindex : UInt32, basedescriptor : D3D12_GPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.set_compute_root_descriptor_table.unsafe_as(Proc(UInt32, D3D12_GPU_DESCRIPTOR_HANDLE, Void)).call(rootparameterindex, basedescriptor)
  end
  def set_graphics_root_descriptor_table(rootparameterindex : UInt32, basedescriptor : D3D12_GPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.set_graphics_root_descriptor_table.unsafe_as(Proc(UInt32, D3D12_GPU_DESCRIPTOR_HANDLE, Void)).call(rootparameterindex, basedescriptor)
  end
  def set_compute_root32_bit_constant(rootparameterindex : UInt32, srcdata : UInt32, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_compute_root32_bit_constant.unsafe_as(Proc(UInt32, UInt32, UInt32, Void)).call(rootparameterindex, srcdata, destoffsetin32bitvalues)
  end
  def set_graphics_root32_bit_constant(rootparameterindex : UInt32, srcdata : UInt32, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_graphics_root32_bit_constant.unsafe_as(Proc(UInt32, UInt32, UInt32, Void)).call(rootparameterindex, srcdata, destoffsetin32bitvalues)
  end
  def set_compute_root32_bit_constants(rootparameterindex : UInt32, num32bitvaluestoset : UInt32, psrcdata : Void*, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_compute_root32_bit_constants.unsafe_as(Proc(UInt32, UInt32, Void*, UInt32, Void)).call(rootparameterindex, num32bitvaluestoset, psrcdata, destoffsetin32bitvalues)
  end
  def set_graphics_root32_bit_constants(rootparameterindex : UInt32, num32bitvaluestoset : UInt32, psrcdata : Void*, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_graphics_root32_bit_constants.unsafe_as(Proc(UInt32, UInt32, Void*, UInt32, Void)).call(rootparameterindex, num32bitvaluestoset, psrcdata, destoffsetin32bitvalues)
  end
  def set_compute_root_constant_buffer_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_compute_root_constant_buffer_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_graphics_root_constant_buffer_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_graphics_root_constant_buffer_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_compute_root_shader_resource_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_compute_root_shader_resource_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_graphics_root_shader_resource_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_graphics_root_shader_resource_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_compute_root_unordered_access_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_compute_root_unordered_access_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_graphics_root_unordered_access_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_graphics_root_unordered_access_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def ia_set_index_buffer(pview : D3D12_INDEX_BUFFER_VIEW*) : Void
    @lpVtbl.value.ia_set_index_buffer.unsafe_as(Proc(D3D12_INDEX_BUFFER_VIEW*, Void)).call(pview)
  end
  def ia_set_vertex_buffers(startslot : UInt32, numviews : UInt32, pviews : D3D12_VERTEX_BUFFER_VIEW*) : Void
    @lpVtbl.value.ia_set_vertex_buffers.unsafe_as(Proc(UInt32, UInt32, D3D12_VERTEX_BUFFER_VIEW*, Void)).call(startslot, numviews, pviews)
  end
  def so_set_targets(startslot : UInt32, numviews : UInt32, pviews : D3D12_STREAM_OUTPUT_BUFFER_VIEW*) : Void
    @lpVtbl.value.so_set_targets.unsafe_as(Proc(UInt32, UInt32, D3D12_STREAM_OUTPUT_BUFFER_VIEW*, Void)).call(startslot, numviews, pviews)
  end
  def om_set_render_targets(numrendertargetdescriptors : UInt32, prendertargetdescriptors : D3D12_CPU_DESCRIPTOR_HANDLE*, rtssinglehandletodescriptorrange : LibC::BOOL, pdepthstencildescriptor : D3D12_CPU_DESCRIPTOR_HANDLE*) : Void
    @lpVtbl.value.om_set_render_targets.unsafe_as(Proc(UInt32, D3D12_CPU_DESCRIPTOR_HANDLE*, LibC::BOOL, D3D12_CPU_DESCRIPTOR_HANDLE*, Void)).call(numrendertargetdescriptors, prendertargetdescriptors, rtssinglehandletodescriptorrange, pdepthstencildescriptor)
  end
  def clear_depth_stencil_view(depthstencilview : D3D12_CPU_DESCRIPTOR_HANDLE, clearflags : D3D12_CLEAR_FLAGS, depth : Float32, stencil : UInt8, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_depth_stencil_view.unsafe_as(Proc(D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_CLEAR_FLAGS, Float32, UInt8, UInt32, RECT*, Void)).call(depthstencilview, clearflags, depth, stencil, numrects, prects)
  end
  def clear_render_target_view(rendertargetview : D3D12_CPU_DESCRIPTOR_HANDLE, colorrgba : Float32*, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_render_target_view.unsafe_as(Proc(D3D12_CPU_DESCRIPTOR_HANDLE, Float32*, UInt32, RECT*, Void)).call(rendertargetview, colorrgba, numrects, prects)
  end
  def clear_unordered_access_view_uint(viewgpuhandleincurrentheap : D3D12_GPU_DESCRIPTOR_HANDLE, viewcpuhandle : D3D12_CPU_DESCRIPTOR_HANDLE, presource : ID3D12Resource, values : UInt32*, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_unordered_access_view_uint.unsafe_as(Proc(D3D12_GPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, ID3D12Resource, UInt32*, UInt32, RECT*, Void)).call(viewgpuhandleincurrentheap, viewcpuhandle, presource, values, numrects, prects)
  end
  def clear_unordered_access_view_float(viewgpuhandleincurrentheap : D3D12_GPU_DESCRIPTOR_HANDLE, viewcpuhandle : D3D12_CPU_DESCRIPTOR_HANDLE, presource : ID3D12Resource, values : Float32*, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_unordered_access_view_float.unsafe_as(Proc(D3D12_GPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, ID3D12Resource, Float32*, UInt32, RECT*, Void)).call(viewgpuhandleincurrentheap, viewcpuhandle, presource, values, numrects, prects)
  end
  def discard_resource(presource : ID3D12Resource, pregion : D3D12_DISCARD_REGION*) : Void
    @lpVtbl.value.discard_resource.unsafe_as(Proc(ID3D12Resource, D3D12_DISCARD_REGION*, Void)).call(presource, pregion)
  end
  def begin_query(pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.begin_query.unsafe_as(Proc(ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)).call(pqueryheap, type, index)
  end
  def end_query(pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.end_query.unsafe_as(Proc(ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)).call(pqueryheap, type, index)
  end
  def resolve_query_data(pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, startindex : UInt32, numqueries : UInt32, pdestinationbuffer : ID3D12Resource, aligneddestinationbufferoffset : UInt64) : Void
    @lpVtbl.value.resolve_query_data.unsafe_as(Proc(ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, UInt32, ID3D12Resource, UInt64, Void)).call(pqueryheap, type, startindex, numqueries, pdestinationbuffer, aligneddestinationbufferoffset)
  end
  def set_predication(pbuffer : ID3D12Resource, alignedbufferoffset : UInt64, operation : D3D12_PREDICATION_OP) : Void
    @lpVtbl.value.set_predication.unsafe_as(Proc(ID3D12Resource, UInt64, D3D12_PREDICATION_OP, Void)).call(pbuffer, alignedbufferoffset, operation)
  end
  def set_marker(metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.set_marker.unsafe_as(Proc(UInt32, Void*, UInt32, Void)).call(metadata, pdata, size)
  end
  def begin_event(metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.begin_event.unsafe_as(Proc(UInt32, Void*, UInt32, Void)).call(metadata, pdata, size)
  end
  def end_event : Void
    @lpVtbl.value.end_event.unsafe_as(Proc(Void)).call
  end
  def execute_indirect(pcommandsignature : ID3D12CommandSignature, maxcommandcount : UInt32, pargumentbuffer : ID3D12Resource, argumentbufferoffset : UInt64, pcountbuffer : ID3D12Resource, countbufferoffset : UInt64) : Void
    @lpVtbl.value.execute_indirect.unsafe_as(Proc(ID3D12CommandSignature, UInt32, ID3D12Resource, UInt64, ID3D12Resource, UInt64, Void)).call(pcommandsignature, maxcommandcount, pargumentbuffer, argumentbufferoffset, pcountbuffer, countbufferoffset)
  end
  def atomic_copy_buffer_uint(pdstbuffer : ID3D12Resource, dstoffset : UInt64, psrcbuffer : ID3D12Resource, srcoffset : UInt64, dependencies : UInt32, ppdependentresources : ID3D12Resource*, pdependentsubresourceranges : D3D12_SUBRESOURCE_RANGE_UINT64*) : Void
    @lpVtbl.value.atomic_copy_buffer_uint.unsafe_as(Proc(ID3D12Resource, UInt64, ID3D12Resource, UInt64, UInt32, ID3D12Resource*, D3D12_SUBRESOURCE_RANGE_UINT64*, Void)).call(pdstbuffer, dstoffset, psrcbuffer, srcoffset, dependencies, ppdependentresources, pdependentsubresourceranges)
  end
  def atomic_copy_buffer_uint64(pdstbuffer : ID3D12Resource, dstoffset : UInt64, psrcbuffer : ID3D12Resource, srcoffset : UInt64, dependencies : UInt32, ppdependentresources : ID3D12Resource*, pdependentsubresourceranges : D3D12_SUBRESOURCE_RANGE_UINT64*) : Void
    @lpVtbl.value.atomic_copy_buffer_uint64.unsafe_as(Proc(ID3D12Resource, UInt64, ID3D12Resource, UInt64, UInt32, ID3D12Resource*, D3D12_SUBRESOURCE_RANGE_UINT64*, Void)).call(pdstbuffer, dstoffset, psrcbuffer, srcoffset, dependencies, ppdependentresources, pdependentsubresourceranges)
  end
  def om_set_depth_bounds(min : Float32, max : Float32) : Void
    @lpVtbl.value.om_set_depth_bounds.unsafe_as(Proc(Float32, Float32, Void)).call(min, max)
  end
  def set_sample_positions(numsamplesperpixel : UInt32, numpixels : UInt32, psamplepositions : D3D12_SAMPLE_POSITION*) : Void
    @lpVtbl.value.set_sample_positions.unsafe_as(Proc(UInt32, UInt32, D3D12_SAMPLE_POSITION*, Void)).call(numsamplesperpixel, numpixels, psamplepositions)
  end
  def resolve_subresource_region(pdstresource : ID3D12Resource, dstsubresource : UInt32, dstx : UInt32, dsty : UInt32, psrcresource : ID3D12Resource, srcsubresource : UInt32, psrcrect : RECT*, format : DXGI_FORMAT, resolvemode : D3D12_RESOLVE_MODE) : Void
    @lpVtbl.value.resolve_subresource_region.unsafe_as(Proc(ID3D12Resource, UInt32, UInt32, UInt32, ID3D12Resource, UInt32, RECT*, DXGI_FORMAT, D3D12_RESOLVE_MODE, Void)).call(pdstresource, dstsubresource, dstx, dsty, psrcresource, srcsubresource, psrcrect, format, resolvemode)
  end
  def set_view_instance_mask(mask : UInt32) : Void
    @lpVtbl.value.set_view_instance_mask.unsafe_as(Proc(UInt32, Void)).call(mask)
  end
  def write_buffer_immediate(count : UInt32, pparams : D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pmodes : D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
    @lpVtbl.value.write_buffer_immediate.unsafe_as(Proc(UInt32, D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void)).call(count, pparams, pmodes)
  end
  def set_protected_resource_session(pprotectedresourcesession : ID3D12ProtectedResourceSession) : Void
    @lpVtbl.value.set_protected_resource_session.unsafe_as(Proc(ID3D12ProtectedResourceSession, Void)).call(pprotectedresourcesession)
  end
  def begin_render_pass(numrendertargets : UInt32, prendertargets : D3D12_RENDER_PASS_RENDER_TARGET_DESC*, pdepthstencil : D3D12_RENDER_PASS_DEPTH_STENCIL_DESC*, flags : D3D12_RENDER_PASS_FLAGS) : Void
    @lpVtbl.value.begin_render_pass.unsafe_as(Proc(UInt32, D3D12_RENDER_PASS_RENDER_TARGET_DESC*, D3D12_RENDER_PASS_DEPTH_STENCIL_DESC*, D3D12_RENDER_PASS_FLAGS, Void)).call(numrendertargets, prendertargets, pdepthstencil, flags)
  end
  def end_render_pass : Void
    @lpVtbl.value.end_render_pass.unsafe_as(Proc(Void)).call
  end
  def initialize_meta_command(pmetacommand : ID3D12MetaCommand, pinitializationparametersdata : Void*, initializationparametersdatasizeinbytes : LibC::UINT_PTR) : Void
    @lpVtbl.value.initialize_meta_command.unsafe_as(Proc(ID3D12MetaCommand, Void*, LibC::UINT_PTR, Void)).call(pmetacommand, pinitializationparametersdata, initializationparametersdatasizeinbytes)
  end
  def execute_meta_command(pmetacommand : ID3D12MetaCommand, pexecutionparametersdata : Void*, executionparametersdatasizeinbytes : LibC::UINT_PTR) : Void
    @lpVtbl.value.execute_meta_command.unsafe_as(Proc(ID3D12MetaCommand, Void*, LibC::UINT_PTR, Void)).call(pmetacommand, pexecutionparametersdata, executionparametersdatasizeinbytes)
  end
  def build_raytracing_acceleration_structure(pdesc : D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC*, numpostbuildinfodescs : UInt32, ppostbuildinfodescs : D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*) : Void
    @lpVtbl.value.build_raytracing_acceleration_structure.unsafe_as(Proc(D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC*, UInt32, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*, Void)).call(pdesc, numpostbuildinfodescs, ppostbuildinfodescs)
  end
  def emit_raytracing_acceleration_structure_postbuild_info(pdesc : D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*, numsourceaccelerationstructures : UInt32, psourceaccelerationstructuredata : UInt64*) : Void
    @lpVtbl.value.emit_raytracing_acceleration_structure_postbuild_info.unsafe_as(Proc(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*, UInt32, UInt64*, Void)).call(pdesc, numsourceaccelerationstructures, psourceaccelerationstructuredata)
  end
  def copy_raytracing_acceleration_structure(destaccelerationstructuredata : UInt64, sourceaccelerationstructuredata : UInt64, mode : D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE) : Void
    @lpVtbl.value.copy_raytracing_acceleration_structure.unsafe_as(Proc(UInt64, UInt64, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE, Void)).call(destaccelerationstructuredata, sourceaccelerationstructuredata, mode)
  end
  def set_pipeline_state1(pstateobject : ID3D12StateObject) : Void
    @lpVtbl.value.set_pipeline_state1.unsafe_as(Proc(ID3D12StateObject, Void)).call(pstateobject)
  end
  def dispatch_rays(pdesc : D3D12_DISPATCH_RAYS_DESC*) : Void
    @lpVtbl.value.dispatch_rays.unsafe_as(Proc(D3D12_DISPATCH_RAYS_DESC*, Void)).call(pdesc)
  end
  def rs_set_shading_rate(baseshadingrate : D3D12_SHADING_RATE, combiners : D3D12_SHADING_RATE_COMBINER*) : Void
    @lpVtbl.value.rs_set_shading_rate.unsafe_as(Proc(D3D12_SHADING_RATE, D3D12_SHADING_RATE_COMBINER*, Void)).call(baseshadingrate, combiners)
  end
  def rs_set_shading_rate_image(shadingrateimage : ID3D12Resource) : Void
    @lpVtbl.value.rs_set_shading_rate_image.unsafe_as(Proc(ID3D12Resource, Void)).call(shadingrateimage)
  end
end
struct LibWin32::ID3D12GraphicsCommandList6
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def set_name(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def get_device(riid : Guid*, ppvdevice : Void**) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvdevice)
  end
  def get_type : D3D12_COMMAND_LIST_TYPE
    @lpVtbl.value.get_type.unsafe_as(Proc(D3D12_COMMAND_LIST_TYPE)).call
  end
  def close : HRESULT
    @lpVtbl.value.close.unsafe_as(Proc(HRESULT)).call
  end
  def reset(pallocator : ID3D12CommandAllocator, pinitialstate : ID3D12PipelineState) : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(ID3D12CommandAllocator, ID3D12PipelineState, HRESULT)).call(pallocator, pinitialstate)
  end
  def clear_state(ppipelinestate : ID3D12PipelineState) : Void
    @lpVtbl.value.clear_state.unsafe_as(Proc(ID3D12PipelineState, Void)).call(ppipelinestate)
  end
  def draw_instanced(vertexcountperinstance : UInt32, instancecount : UInt32, startvertexlocation : UInt32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_instanced.unsafe_as(Proc(UInt32, UInt32, UInt32, UInt32, Void)).call(vertexcountperinstance, instancecount, startvertexlocation, startinstancelocation)
  end
  def draw_indexed_instanced(indexcountperinstance : UInt32, instancecount : UInt32, startindexlocation : UInt32, basevertexlocation : Int32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_indexed_instanced.unsafe_as(Proc(UInt32, UInt32, UInt32, Int32, UInt32, Void)).call(indexcountperinstance, instancecount, startindexlocation, basevertexlocation, startinstancelocation)
  end
  def dispatch(threadgroupcountx : UInt32, threadgroupcounty : UInt32, threadgroupcountz : UInt32) : Void
    @lpVtbl.value.dispatch.unsafe_as(Proc(UInt32, UInt32, UInt32, Void)).call(threadgroupcountx, threadgroupcounty, threadgroupcountz)
  end
  def copy_buffer_region(pdstbuffer : ID3D12Resource, dstoffset : UInt64, psrcbuffer : ID3D12Resource, srcoffset : UInt64, numbytes : UInt64) : Void
    @lpVtbl.value.copy_buffer_region.unsafe_as(Proc(ID3D12Resource, UInt64, ID3D12Resource, UInt64, UInt64, Void)).call(pdstbuffer, dstoffset, psrcbuffer, srcoffset, numbytes)
  end
  def copy_texture_region(pdst : D3D12_TEXTURE_COPY_LOCATION*, dstx : UInt32, dsty : UInt32, dstz : UInt32, psrc : D3D12_TEXTURE_COPY_LOCATION*, psrcbox : D3D12_BOX*) : Void
    @lpVtbl.value.copy_texture_region.unsafe_as(Proc(D3D12_TEXTURE_COPY_LOCATION*, UInt32, UInt32, UInt32, D3D12_TEXTURE_COPY_LOCATION*, D3D12_BOX*, Void)).call(pdst, dstx, dsty, dstz, psrc, psrcbox)
  end
  def copy_resource(pdstresource : ID3D12Resource, psrcresource : ID3D12Resource) : Void
    @lpVtbl.value.copy_resource.unsafe_as(Proc(ID3D12Resource, ID3D12Resource, Void)).call(pdstresource, psrcresource)
  end
  def copy_tiles(ptiledresource : ID3D12Resource, ptileregionstartcoordinate : D3D12_TILED_RESOURCE_COORDINATE*, ptileregionsize : D3D12_TILE_REGION_SIZE*, pbuffer : ID3D12Resource, bufferstartoffsetinbytes : UInt64, flags : D3D12_TILE_COPY_FLAGS) : Void
    @lpVtbl.value.copy_tiles.unsafe_as(Proc(ID3D12Resource, D3D12_TILED_RESOURCE_COORDINATE*, D3D12_TILE_REGION_SIZE*, ID3D12Resource, UInt64, D3D12_TILE_COPY_FLAGS, Void)).call(ptiledresource, ptileregionstartcoordinate, ptileregionsize, pbuffer, bufferstartoffsetinbytes, flags)
  end
  def resolve_subresource(pdstresource : ID3D12Resource, dstsubresource : UInt32, psrcresource : ID3D12Resource, srcsubresource : UInt32, format : DXGI_FORMAT) : Void
    @lpVtbl.value.resolve_subresource.unsafe_as(Proc(ID3D12Resource, UInt32, ID3D12Resource, UInt32, DXGI_FORMAT, Void)).call(pdstresource, dstsubresource, psrcresource, srcsubresource, format)
  end
  def ia_set_primitive_topology(primitivetopology : D3D_PRIMITIVE_TOPOLOGY) : Void
    @lpVtbl.value.ia_set_primitive_topology.unsafe_as(Proc(D3D_PRIMITIVE_TOPOLOGY, Void)).call(primitivetopology)
  end
  def rs_set_viewports(numviewports : UInt32, pviewports : D3D12_VIEWPORT*) : Void
    @lpVtbl.value.rs_set_viewports.unsafe_as(Proc(UInt32, D3D12_VIEWPORT*, Void)).call(numviewports, pviewports)
  end
  def rs_set_scissor_rects(numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.rs_set_scissor_rects.unsafe_as(Proc(UInt32, RECT*, Void)).call(numrects, prects)
  end
  def om_set_blend_factor(blendfactor : Float32*) : Void
    @lpVtbl.value.om_set_blend_factor.unsafe_as(Proc(Float32*, Void)).call(blendfactor)
  end
  def om_set_stencil_ref(stencilref : UInt32) : Void
    @lpVtbl.value.om_set_stencil_ref.unsafe_as(Proc(UInt32, Void)).call(stencilref)
  end
  def set_pipeline_state(ppipelinestate : ID3D12PipelineState) : Void
    @lpVtbl.value.set_pipeline_state.unsafe_as(Proc(ID3D12PipelineState, Void)).call(ppipelinestate)
  end
  def resource_barrier(numbarriers : UInt32, pbarriers : D3D12_RESOURCE_BARRIER*) : Void
    @lpVtbl.value.resource_barrier.unsafe_as(Proc(UInt32, D3D12_RESOURCE_BARRIER*, Void)).call(numbarriers, pbarriers)
  end
  def execute_bundle(pcommandlist : ID3D12GraphicsCommandList) : Void
    @lpVtbl.value.execute_bundle.unsafe_as(Proc(ID3D12GraphicsCommandList, Void)).call(pcommandlist)
  end
  def set_descriptor_heaps(numdescriptorheaps : UInt32, ppdescriptorheaps : ID3D12DescriptorHeap*) : Void
    @lpVtbl.value.set_descriptor_heaps.unsafe_as(Proc(UInt32, ID3D12DescriptorHeap*, Void)).call(numdescriptorheaps, ppdescriptorheaps)
  end
  def set_compute_root_signature(prootsignature : ID3D12RootSignature) : Void
    @lpVtbl.value.set_compute_root_signature.unsafe_as(Proc(ID3D12RootSignature, Void)).call(prootsignature)
  end
  def set_graphics_root_signature(prootsignature : ID3D12RootSignature) : Void
    @lpVtbl.value.set_graphics_root_signature.unsafe_as(Proc(ID3D12RootSignature, Void)).call(prootsignature)
  end
  def set_compute_root_descriptor_table(rootparameterindex : UInt32, basedescriptor : D3D12_GPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.set_compute_root_descriptor_table.unsafe_as(Proc(UInt32, D3D12_GPU_DESCRIPTOR_HANDLE, Void)).call(rootparameterindex, basedescriptor)
  end
  def set_graphics_root_descriptor_table(rootparameterindex : UInt32, basedescriptor : D3D12_GPU_DESCRIPTOR_HANDLE) : Void
    @lpVtbl.value.set_graphics_root_descriptor_table.unsafe_as(Proc(UInt32, D3D12_GPU_DESCRIPTOR_HANDLE, Void)).call(rootparameterindex, basedescriptor)
  end
  def set_compute_root32_bit_constant(rootparameterindex : UInt32, srcdata : UInt32, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_compute_root32_bit_constant.unsafe_as(Proc(UInt32, UInt32, UInt32, Void)).call(rootparameterindex, srcdata, destoffsetin32bitvalues)
  end
  def set_graphics_root32_bit_constant(rootparameterindex : UInt32, srcdata : UInt32, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_graphics_root32_bit_constant.unsafe_as(Proc(UInt32, UInt32, UInt32, Void)).call(rootparameterindex, srcdata, destoffsetin32bitvalues)
  end
  def set_compute_root32_bit_constants(rootparameterindex : UInt32, num32bitvaluestoset : UInt32, psrcdata : Void*, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_compute_root32_bit_constants.unsafe_as(Proc(UInt32, UInt32, Void*, UInt32, Void)).call(rootparameterindex, num32bitvaluestoset, psrcdata, destoffsetin32bitvalues)
  end
  def set_graphics_root32_bit_constants(rootparameterindex : UInt32, num32bitvaluestoset : UInt32, psrcdata : Void*, destoffsetin32bitvalues : UInt32) : Void
    @lpVtbl.value.set_graphics_root32_bit_constants.unsafe_as(Proc(UInt32, UInt32, Void*, UInt32, Void)).call(rootparameterindex, num32bitvaluestoset, psrcdata, destoffsetin32bitvalues)
  end
  def set_compute_root_constant_buffer_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_compute_root_constant_buffer_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_graphics_root_constant_buffer_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_graphics_root_constant_buffer_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_compute_root_shader_resource_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_compute_root_shader_resource_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_graphics_root_shader_resource_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_graphics_root_shader_resource_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_compute_root_unordered_access_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_compute_root_unordered_access_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def set_graphics_root_unordered_access_view(rootparameterindex : UInt32, bufferlocation : UInt64) : Void
    @lpVtbl.value.set_graphics_root_unordered_access_view.unsafe_as(Proc(UInt32, UInt64, Void)).call(rootparameterindex, bufferlocation)
  end
  def ia_set_index_buffer(pview : D3D12_INDEX_BUFFER_VIEW*) : Void
    @lpVtbl.value.ia_set_index_buffer.unsafe_as(Proc(D3D12_INDEX_BUFFER_VIEW*, Void)).call(pview)
  end
  def ia_set_vertex_buffers(startslot : UInt32, numviews : UInt32, pviews : D3D12_VERTEX_BUFFER_VIEW*) : Void
    @lpVtbl.value.ia_set_vertex_buffers.unsafe_as(Proc(UInt32, UInt32, D3D12_VERTEX_BUFFER_VIEW*, Void)).call(startslot, numviews, pviews)
  end
  def so_set_targets(startslot : UInt32, numviews : UInt32, pviews : D3D12_STREAM_OUTPUT_BUFFER_VIEW*) : Void
    @lpVtbl.value.so_set_targets.unsafe_as(Proc(UInt32, UInt32, D3D12_STREAM_OUTPUT_BUFFER_VIEW*, Void)).call(startslot, numviews, pviews)
  end
  def om_set_render_targets(numrendertargetdescriptors : UInt32, prendertargetdescriptors : D3D12_CPU_DESCRIPTOR_HANDLE*, rtssinglehandletodescriptorrange : LibC::BOOL, pdepthstencildescriptor : D3D12_CPU_DESCRIPTOR_HANDLE*) : Void
    @lpVtbl.value.om_set_render_targets.unsafe_as(Proc(UInt32, D3D12_CPU_DESCRIPTOR_HANDLE*, LibC::BOOL, D3D12_CPU_DESCRIPTOR_HANDLE*, Void)).call(numrendertargetdescriptors, prendertargetdescriptors, rtssinglehandletodescriptorrange, pdepthstencildescriptor)
  end
  def clear_depth_stencil_view(depthstencilview : D3D12_CPU_DESCRIPTOR_HANDLE, clearflags : D3D12_CLEAR_FLAGS, depth : Float32, stencil : UInt8, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_depth_stencil_view.unsafe_as(Proc(D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_CLEAR_FLAGS, Float32, UInt8, UInt32, RECT*, Void)).call(depthstencilview, clearflags, depth, stencil, numrects, prects)
  end
  def clear_render_target_view(rendertargetview : D3D12_CPU_DESCRIPTOR_HANDLE, colorrgba : Float32*, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_render_target_view.unsafe_as(Proc(D3D12_CPU_DESCRIPTOR_HANDLE, Float32*, UInt32, RECT*, Void)).call(rendertargetview, colorrgba, numrects, prects)
  end
  def clear_unordered_access_view_uint(viewgpuhandleincurrentheap : D3D12_GPU_DESCRIPTOR_HANDLE, viewcpuhandle : D3D12_CPU_DESCRIPTOR_HANDLE, presource : ID3D12Resource, values : UInt32*, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_unordered_access_view_uint.unsafe_as(Proc(D3D12_GPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, ID3D12Resource, UInt32*, UInt32, RECT*, Void)).call(viewgpuhandleincurrentheap, viewcpuhandle, presource, values, numrects, prects)
  end
  def clear_unordered_access_view_float(viewgpuhandleincurrentheap : D3D12_GPU_DESCRIPTOR_HANDLE, viewcpuhandle : D3D12_CPU_DESCRIPTOR_HANDLE, presource : ID3D12Resource, values : Float32*, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.clear_unordered_access_view_float.unsafe_as(Proc(D3D12_GPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, ID3D12Resource, Float32*, UInt32, RECT*, Void)).call(viewgpuhandleincurrentheap, viewcpuhandle, presource, values, numrects, prects)
  end
  def discard_resource(presource : ID3D12Resource, pregion : D3D12_DISCARD_REGION*) : Void
    @lpVtbl.value.discard_resource.unsafe_as(Proc(ID3D12Resource, D3D12_DISCARD_REGION*, Void)).call(presource, pregion)
  end
  def begin_query(pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.begin_query.unsafe_as(Proc(ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)).call(pqueryheap, type, index)
  end
  def end_query(pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, index : UInt32) : Void
    @lpVtbl.value.end_query.unsafe_as(Proc(ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, Void)).call(pqueryheap, type, index)
  end
  def resolve_query_data(pqueryheap : ID3D12QueryHeap, type : D3D12_QUERY_TYPE, startindex : UInt32, numqueries : UInt32, pdestinationbuffer : ID3D12Resource, aligneddestinationbufferoffset : UInt64) : Void
    @lpVtbl.value.resolve_query_data.unsafe_as(Proc(ID3D12QueryHeap, D3D12_QUERY_TYPE, UInt32, UInt32, ID3D12Resource, UInt64, Void)).call(pqueryheap, type, startindex, numqueries, pdestinationbuffer, aligneddestinationbufferoffset)
  end
  def set_predication(pbuffer : ID3D12Resource, alignedbufferoffset : UInt64, operation : D3D12_PREDICATION_OP) : Void
    @lpVtbl.value.set_predication.unsafe_as(Proc(ID3D12Resource, UInt64, D3D12_PREDICATION_OP, Void)).call(pbuffer, alignedbufferoffset, operation)
  end
  def set_marker(metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.set_marker.unsafe_as(Proc(UInt32, Void*, UInt32, Void)).call(metadata, pdata, size)
  end
  def begin_event(metadata : UInt32, pdata : Void*, size : UInt32) : Void
    @lpVtbl.value.begin_event.unsafe_as(Proc(UInt32, Void*, UInt32, Void)).call(metadata, pdata, size)
  end
  def end_event : Void
    @lpVtbl.value.end_event.unsafe_as(Proc(Void)).call
  end
  def execute_indirect(pcommandsignature : ID3D12CommandSignature, maxcommandcount : UInt32, pargumentbuffer : ID3D12Resource, argumentbufferoffset : UInt64, pcountbuffer : ID3D12Resource, countbufferoffset : UInt64) : Void
    @lpVtbl.value.execute_indirect.unsafe_as(Proc(ID3D12CommandSignature, UInt32, ID3D12Resource, UInt64, ID3D12Resource, UInt64, Void)).call(pcommandsignature, maxcommandcount, pargumentbuffer, argumentbufferoffset, pcountbuffer, countbufferoffset)
  end
  def atomic_copy_buffer_uint(pdstbuffer : ID3D12Resource, dstoffset : UInt64, psrcbuffer : ID3D12Resource, srcoffset : UInt64, dependencies : UInt32, ppdependentresources : ID3D12Resource*, pdependentsubresourceranges : D3D12_SUBRESOURCE_RANGE_UINT64*) : Void
    @lpVtbl.value.atomic_copy_buffer_uint.unsafe_as(Proc(ID3D12Resource, UInt64, ID3D12Resource, UInt64, UInt32, ID3D12Resource*, D3D12_SUBRESOURCE_RANGE_UINT64*, Void)).call(pdstbuffer, dstoffset, psrcbuffer, srcoffset, dependencies, ppdependentresources, pdependentsubresourceranges)
  end
  def atomic_copy_buffer_uint64(pdstbuffer : ID3D12Resource, dstoffset : UInt64, psrcbuffer : ID3D12Resource, srcoffset : UInt64, dependencies : UInt32, ppdependentresources : ID3D12Resource*, pdependentsubresourceranges : D3D12_SUBRESOURCE_RANGE_UINT64*) : Void
    @lpVtbl.value.atomic_copy_buffer_uint64.unsafe_as(Proc(ID3D12Resource, UInt64, ID3D12Resource, UInt64, UInt32, ID3D12Resource*, D3D12_SUBRESOURCE_RANGE_UINT64*, Void)).call(pdstbuffer, dstoffset, psrcbuffer, srcoffset, dependencies, ppdependentresources, pdependentsubresourceranges)
  end
  def om_set_depth_bounds(min : Float32, max : Float32) : Void
    @lpVtbl.value.om_set_depth_bounds.unsafe_as(Proc(Float32, Float32, Void)).call(min, max)
  end
  def set_sample_positions(numsamplesperpixel : UInt32, numpixels : UInt32, psamplepositions : D3D12_SAMPLE_POSITION*) : Void
    @lpVtbl.value.set_sample_positions.unsafe_as(Proc(UInt32, UInt32, D3D12_SAMPLE_POSITION*, Void)).call(numsamplesperpixel, numpixels, psamplepositions)
  end
  def resolve_subresource_region(pdstresource : ID3D12Resource, dstsubresource : UInt32, dstx : UInt32, dsty : UInt32, psrcresource : ID3D12Resource, srcsubresource : UInt32, psrcrect : RECT*, format : DXGI_FORMAT, resolvemode : D3D12_RESOLVE_MODE) : Void
    @lpVtbl.value.resolve_subresource_region.unsafe_as(Proc(ID3D12Resource, UInt32, UInt32, UInt32, ID3D12Resource, UInt32, RECT*, DXGI_FORMAT, D3D12_RESOLVE_MODE, Void)).call(pdstresource, dstsubresource, dstx, dsty, psrcresource, srcsubresource, psrcrect, format, resolvemode)
  end
  def set_view_instance_mask(mask : UInt32) : Void
    @lpVtbl.value.set_view_instance_mask.unsafe_as(Proc(UInt32, Void)).call(mask)
  end
  def write_buffer_immediate(count : UInt32, pparams : D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pmodes : D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
    @lpVtbl.value.write_buffer_immediate.unsafe_as(Proc(UInt32, D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void)).call(count, pparams, pmodes)
  end
  def set_protected_resource_session(pprotectedresourcesession : ID3D12ProtectedResourceSession) : Void
    @lpVtbl.value.set_protected_resource_session.unsafe_as(Proc(ID3D12ProtectedResourceSession, Void)).call(pprotectedresourcesession)
  end
  def begin_render_pass(numrendertargets : UInt32, prendertargets : D3D12_RENDER_PASS_RENDER_TARGET_DESC*, pdepthstencil : D3D12_RENDER_PASS_DEPTH_STENCIL_DESC*, flags : D3D12_RENDER_PASS_FLAGS) : Void
    @lpVtbl.value.begin_render_pass.unsafe_as(Proc(UInt32, D3D12_RENDER_PASS_RENDER_TARGET_DESC*, D3D12_RENDER_PASS_DEPTH_STENCIL_DESC*, D3D12_RENDER_PASS_FLAGS, Void)).call(numrendertargets, prendertargets, pdepthstencil, flags)
  end
  def end_render_pass : Void
    @lpVtbl.value.end_render_pass.unsafe_as(Proc(Void)).call
  end
  def initialize_meta_command(pmetacommand : ID3D12MetaCommand, pinitializationparametersdata : Void*, initializationparametersdatasizeinbytes : LibC::UINT_PTR) : Void
    @lpVtbl.value.initialize_meta_command.unsafe_as(Proc(ID3D12MetaCommand, Void*, LibC::UINT_PTR, Void)).call(pmetacommand, pinitializationparametersdata, initializationparametersdatasizeinbytes)
  end
  def execute_meta_command(pmetacommand : ID3D12MetaCommand, pexecutionparametersdata : Void*, executionparametersdatasizeinbytes : LibC::UINT_PTR) : Void
    @lpVtbl.value.execute_meta_command.unsafe_as(Proc(ID3D12MetaCommand, Void*, LibC::UINT_PTR, Void)).call(pmetacommand, pexecutionparametersdata, executionparametersdatasizeinbytes)
  end
  def build_raytracing_acceleration_structure(pdesc : D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC*, numpostbuildinfodescs : UInt32, ppostbuildinfodescs : D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*) : Void
    @lpVtbl.value.build_raytracing_acceleration_structure.unsafe_as(Proc(D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC*, UInt32, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*, Void)).call(pdesc, numpostbuildinfodescs, ppostbuildinfodescs)
  end
  def emit_raytracing_acceleration_structure_postbuild_info(pdesc : D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*, numsourceaccelerationstructures : UInt32, psourceaccelerationstructuredata : UInt64*) : Void
    @lpVtbl.value.emit_raytracing_acceleration_structure_postbuild_info.unsafe_as(Proc(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*, UInt32, UInt64*, Void)).call(pdesc, numsourceaccelerationstructures, psourceaccelerationstructuredata)
  end
  def copy_raytracing_acceleration_structure(destaccelerationstructuredata : UInt64, sourceaccelerationstructuredata : UInt64, mode : D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE) : Void
    @lpVtbl.value.copy_raytracing_acceleration_structure.unsafe_as(Proc(UInt64, UInt64, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE, Void)).call(destaccelerationstructuredata, sourceaccelerationstructuredata, mode)
  end
  def set_pipeline_state1(pstateobject : ID3D12StateObject) : Void
    @lpVtbl.value.set_pipeline_state1.unsafe_as(Proc(ID3D12StateObject, Void)).call(pstateobject)
  end
  def dispatch_rays(pdesc : D3D12_DISPATCH_RAYS_DESC*) : Void
    @lpVtbl.value.dispatch_rays.unsafe_as(Proc(D3D12_DISPATCH_RAYS_DESC*, Void)).call(pdesc)
  end
  def rs_set_shading_rate(baseshadingrate : D3D12_SHADING_RATE, combiners : D3D12_SHADING_RATE_COMBINER*) : Void
    @lpVtbl.value.rs_set_shading_rate.unsafe_as(Proc(D3D12_SHADING_RATE, D3D12_SHADING_RATE_COMBINER*, Void)).call(baseshadingrate, combiners)
  end
  def rs_set_shading_rate_image(shadingrateimage : ID3D12Resource) : Void
    @lpVtbl.value.rs_set_shading_rate_image.unsafe_as(Proc(ID3D12Resource, Void)).call(shadingrateimage)
  end
  def dispatch_mesh(threadgroupcountx : UInt32, threadgroupcounty : UInt32, threadgroupcountz : UInt32) : Void
    @lpVtbl.value.dispatch_mesh.unsafe_as(Proc(UInt32, UInt32, UInt32, Void)).call(threadgroupcountx, threadgroupcounty, threadgroupcountz)
  end
end
struct LibWin32::ID3D12ShaderReflectionType
  def get_desc(pdesc : D3D12_SHADER_TYPE_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D12_SHADER_TYPE_DESC*, HRESULT)).call(pdesc)
  end
  def get_member_type_by_index(index : UInt32) : ID3D12ShaderReflectionType
    @lpVtbl.value.get_member_type_by_index.unsafe_as(Proc(UInt32, ID3D12ShaderReflectionType)).call(index)
  end
  def get_member_type_by_name(name : PSTR) : ID3D12ShaderReflectionType
    @lpVtbl.value.get_member_type_by_name.unsafe_as(Proc(PSTR, ID3D12ShaderReflectionType)).call(name)
  end
  def get_member_type_name(index : UInt32) : PSTR
    @lpVtbl.value.get_member_type_name.unsafe_as(Proc(UInt32, PSTR)).call(index)
  end
  def is_equal(ptype : ID3D12ShaderReflectionType) : HRESULT
    @lpVtbl.value.is_equal.unsafe_as(Proc(ID3D12ShaderReflectionType, HRESULT)).call(ptype)
  end
  def get_sub_type : ID3D12ShaderReflectionType
    @lpVtbl.value.get_sub_type.unsafe_as(Proc(ID3D12ShaderReflectionType)).call
  end
  def get_base_class : ID3D12ShaderReflectionType
    @lpVtbl.value.get_base_class.unsafe_as(Proc(ID3D12ShaderReflectionType)).call
  end
  def get_num_interfaces : UInt32
    @lpVtbl.value.get_num_interfaces.unsafe_as(Proc(UInt32)).call
  end
  def get_interface_by_index(uindex : UInt32) : ID3D12ShaderReflectionType
    @lpVtbl.value.get_interface_by_index.unsafe_as(Proc(UInt32, ID3D12ShaderReflectionType)).call(uindex)
  end
  def is_of_type(ptype : ID3D12ShaderReflectionType) : HRESULT
    @lpVtbl.value.is_of_type.unsafe_as(Proc(ID3D12ShaderReflectionType, HRESULT)).call(ptype)
  end
  def implements_interface(pbase : ID3D12ShaderReflectionType) : HRESULT
    @lpVtbl.value.implements_interface.unsafe_as(Proc(ID3D12ShaderReflectionType, HRESULT)).call(pbase)
  end
end
struct LibWin32::ID3D12ShaderReflectionVariable
  def get_desc(pdesc : D3D12_SHADER_VARIABLE_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D12_SHADER_VARIABLE_DESC*, HRESULT)).call(pdesc)
  end
  def get_type : ID3D12ShaderReflectionType
    @lpVtbl.value.get_type.unsafe_as(Proc(ID3D12ShaderReflectionType)).call
  end
  def get_buffer : ID3D12ShaderReflectionConstantBuffer
    @lpVtbl.value.get_buffer.unsafe_as(Proc(ID3D12ShaderReflectionConstantBuffer)).call
  end
  def get_interface_slot(uarrayindex : UInt32) : UInt32
    @lpVtbl.value.get_interface_slot.unsafe_as(Proc(UInt32, UInt32)).call(uarrayindex)
  end
end
struct LibWin32::ID3D12ShaderReflectionConstantBuffer
  def get_desc(pdesc : D3D12_SHADER_BUFFER_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D12_SHADER_BUFFER_DESC*, HRESULT)).call(pdesc)
  end
  def get_variable_by_index(index : UInt32) : ID3D12ShaderReflectionVariable
    @lpVtbl.value.get_variable_by_index.unsafe_as(Proc(UInt32, ID3D12ShaderReflectionVariable)).call(index)
  end
  def get_variable_by_name(name : PSTR) : ID3D12ShaderReflectionVariable
    @lpVtbl.value.get_variable_by_name.unsafe_as(Proc(PSTR, ID3D12ShaderReflectionVariable)).call(name)
  end
end
struct LibWin32::ID3D12ShaderReflection
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_desc(pdesc : D3D12_SHADER_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D12_SHADER_DESC*, HRESULT)).call(pdesc)
  end
  def get_constant_buffer_by_index(index : UInt32) : ID3D12ShaderReflectionConstantBuffer
    @lpVtbl.value.get_constant_buffer_by_index.unsafe_as(Proc(UInt32, ID3D12ShaderReflectionConstantBuffer)).call(index)
  end
  def get_constant_buffer_by_name(name : PSTR) : ID3D12ShaderReflectionConstantBuffer
    @lpVtbl.value.get_constant_buffer_by_name.unsafe_as(Proc(PSTR, ID3D12ShaderReflectionConstantBuffer)).call(name)
  end
  def get_resource_binding_desc(resourceindex : UInt32, pdesc : D3D12_SHADER_INPUT_BIND_DESC*) : HRESULT
    @lpVtbl.value.get_resource_binding_desc.unsafe_as(Proc(UInt32, D3D12_SHADER_INPUT_BIND_DESC*, HRESULT)).call(resourceindex, pdesc)
  end
  def get_input_parameter_desc(parameterindex : UInt32, pdesc : D3D12_SIGNATURE_PARAMETER_DESC*) : HRESULT
    @lpVtbl.value.get_input_parameter_desc.unsafe_as(Proc(UInt32, D3D12_SIGNATURE_PARAMETER_DESC*, HRESULT)).call(parameterindex, pdesc)
  end
  def get_output_parameter_desc(parameterindex : UInt32, pdesc : D3D12_SIGNATURE_PARAMETER_DESC*) : HRESULT
    @lpVtbl.value.get_output_parameter_desc.unsafe_as(Proc(UInt32, D3D12_SIGNATURE_PARAMETER_DESC*, HRESULT)).call(parameterindex, pdesc)
  end
  def get_patch_constant_parameter_desc(parameterindex : UInt32, pdesc : D3D12_SIGNATURE_PARAMETER_DESC*) : HRESULT
    @lpVtbl.value.get_patch_constant_parameter_desc.unsafe_as(Proc(UInt32, D3D12_SIGNATURE_PARAMETER_DESC*, HRESULT)).call(parameterindex, pdesc)
  end
  def get_variable_by_name(name : PSTR) : ID3D12ShaderReflectionVariable
    @lpVtbl.value.get_variable_by_name.unsafe_as(Proc(PSTR, ID3D12ShaderReflectionVariable)).call(name)
  end
  def get_resource_binding_desc_by_name(name : PSTR, pdesc : D3D12_SHADER_INPUT_BIND_DESC*) : HRESULT
    @lpVtbl.value.get_resource_binding_desc_by_name.unsafe_as(Proc(PSTR, D3D12_SHADER_INPUT_BIND_DESC*, HRESULT)).call(name, pdesc)
  end
  def get_mov_instruction_count : UInt32
    @lpVtbl.value.get_mov_instruction_count.unsafe_as(Proc(UInt32)).call
  end
  def get_movc_instruction_count : UInt32
    @lpVtbl.value.get_movc_instruction_count.unsafe_as(Proc(UInt32)).call
  end
  def get_conversion_instruction_count : UInt32
    @lpVtbl.value.get_conversion_instruction_count.unsafe_as(Proc(UInt32)).call
  end
  def get_bitwise_instruction_count : UInt32
    @lpVtbl.value.get_bitwise_instruction_count.unsafe_as(Proc(UInt32)).call
  end
  def get_gs_input_primitive : D3D_PRIMITIVE
    @lpVtbl.value.get_gs_input_primitive.unsafe_as(Proc(D3D_PRIMITIVE)).call
  end
  def is_sample_frequency_shader : LibC::BOOL
    @lpVtbl.value.is_sample_frequency_shader.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_num_interface_slots : UInt32
    @lpVtbl.value.get_num_interface_slots.unsafe_as(Proc(UInt32)).call
  end
  def get_min_feature_level(plevel : D3D_FEATURE_LEVEL*) : HRESULT
    @lpVtbl.value.get_min_feature_level.unsafe_as(Proc(D3D_FEATURE_LEVEL*, HRESULT)).call(plevel)
  end
  def get_thread_group_size(psizex : UInt32*, psizey : UInt32*, psizez : UInt32*) : UInt32
    @lpVtbl.value.get_thread_group_size.unsafe_as(Proc(UInt32*, UInt32*, UInt32*, UInt32)).call(psizex, psizey, psizez)
  end
  def get_requires_flags : UInt64
    @lpVtbl.value.get_requires_flags.unsafe_as(Proc(UInt64)).call
  end
end
struct LibWin32::ID3D12LibraryReflection
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_desc(pdesc : D3D12_LIBRARY_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D12_LIBRARY_DESC*, HRESULT)).call(pdesc)
  end
  def get_function_by_index(functionindex : Int32) : ID3D12FunctionReflection
    @lpVtbl.value.get_function_by_index.unsafe_as(Proc(Int32, ID3D12FunctionReflection)).call(functionindex)
  end
end
struct LibWin32::ID3D12FunctionReflection
  def get_desc(pdesc : D3D12_FUNCTION_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D12_FUNCTION_DESC*, HRESULT)).call(pdesc)
  end
  def get_constant_buffer_by_index(bufferindex : UInt32) : ID3D12ShaderReflectionConstantBuffer
    @lpVtbl.value.get_constant_buffer_by_index.unsafe_as(Proc(UInt32, ID3D12ShaderReflectionConstantBuffer)).call(bufferindex)
  end
  def get_constant_buffer_by_name(name : PSTR) : ID3D12ShaderReflectionConstantBuffer
    @lpVtbl.value.get_constant_buffer_by_name.unsafe_as(Proc(PSTR, ID3D12ShaderReflectionConstantBuffer)).call(name)
  end
  def get_resource_binding_desc(resourceindex : UInt32, pdesc : D3D12_SHADER_INPUT_BIND_DESC*) : HRESULT
    @lpVtbl.value.get_resource_binding_desc.unsafe_as(Proc(UInt32, D3D12_SHADER_INPUT_BIND_DESC*, HRESULT)).call(resourceindex, pdesc)
  end
  def get_variable_by_name(name : PSTR) : ID3D12ShaderReflectionVariable
    @lpVtbl.value.get_variable_by_name.unsafe_as(Proc(PSTR, ID3D12ShaderReflectionVariable)).call(name)
  end
  def get_resource_binding_desc_by_name(name : PSTR, pdesc : D3D12_SHADER_INPUT_BIND_DESC*) : HRESULT
    @lpVtbl.value.get_resource_binding_desc_by_name.unsafe_as(Proc(PSTR, D3D12_SHADER_INPUT_BIND_DESC*, HRESULT)).call(name, pdesc)
  end
  def get_function_parameter(parameterindex : Int32) : ID3D12FunctionParameterReflection
    @lpVtbl.value.get_function_parameter.unsafe_as(Proc(Int32, ID3D12FunctionParameterReflection)).call(parameterindex)
  end
end
struct LibWin32::ID3D12FunctionParameterReflection
  def get_desc(pdesc : D3D12_PARAMETER_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D12_PARAMETER_DESC*, HRESULT)).call(pdesc)
  end
end
