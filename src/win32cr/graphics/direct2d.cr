require "../graphics/direct2d/common.cr"
require "../foundation.cr"
require "../system/com.cr"
require "../graphics/directwrite.cr"
require "../graphics/imaging.cr"
require "../graphics/gdi.cr"
require "../graphics/dxgi.cr"
require "../graphics/dxgi/common.cr"
require "../storage/xps/printing.cr"
require "../graphics/direct3d.cr"

{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link("delayimp")]
{% end %}
@[Link("user32")]
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/IGNORE:4199")]
{% end %}
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/DELAYLOAD:d2d1.dll")]
{% else %}
@[Link("d2d1")]
{% end %}
lib LibWin32
  D2D1_DEFAULT_FLATTENING_TOLERANCE = "0.25_f32"
  CLSID_D2D12DAffineTransform = "6aa97485-6354-4cfc-908c-e4a74f62c96c"
  CLSID_D2D13DPerspectiveTransform = "c2844d0b-3d86-46e7-85ba-526c9240f3fb"
  CLSID_D2D13DTransform = "e8467b04-ec61-4b8a-b5de-d4d73debea5a"
  CLSID_D2D1ArithmeticComposite = "fc151437-049a-4784-a24a-f1c4daf20987"
  CLSID_D2D1Atlas = "913e2be4-fdcf-4fe2-a5f0-2454f14ff408"
  CLSID_D2D1BitmapSource = "5fb6c24d-c6dd-4231-9404-50f4d5c3252d"
  CLSID_D2D1Blend = "81c5b77b-13f8-4cdd-ad20-c890547ac65d"
  CLSID_D2D1Border = "2a2d49c0-4acf-43c7-8c6a-7c4a27874d27"
  CLSID_D2D1Brightness = "8cea8d1e-77b0-4986-b3b9-2f0c0eae7887"
  CLSID_D2D1ColorManagement = "1a28524c-fdd6-4aa4-ae8f-837eb8267b37"
  CLSID_D2D1ColorMatrix = "921f03d6-641c-47df-852d-b4bb6153ae11"
  CLSID_D2D1Composite = "48fc9f51-f6ac-48f1-8b58-3b28ac46f76d"
  CLSID_D2D1ConvolveMatrix = "407f8c08-5533-4331-a341-23cc3877843e"
  CLSID_D2D1Crop = "e23f7110-0e9a-4324-af47-6a2c0c46f35b"
  CLSID_D2D1DirectionalBlur = "174319a6-58e9-49b2-bb63-caf2c811a3db"
  CLSID_D2D1DiscreteTransfer = "90866fcd-488e-454b-af06-e5041b66c36c"
  CLSID_D2D1DisplacementMap = "edc48364-0417-4111-9450-43845fa9f890"
  CLSID_D2D1DistantDiffuse = "3e7efd62-a32d-46d4-a83c-5278889ac954"
  CLSID_D2D1DistantSpecular = "428c1ee5-77b8-4450-8ab5-72219c21abda"
  CLSID_D2D1DpiCompensation = "6c26c5c7-34e0-46fc-9cfd-e5823706e228"
  CLSID_D2D1Flood = "61c23c20-ae69-4d8e-94cf-50078df638f2"
  CLSID_D2D1GammaTransfer = "409444c4-c419-41a0-b0c1-8cd0c0a18e42"
  CLSID_D2D1GaussianBlur = "1feb6d69-2fe6-4ac9-8c58-1d7f93e7a6a5"
  CLSID_D2D1Scale = "9daf9369-3846-4d0e-a44e-0c607934a5d7"
  CLSID_D2D1Histogram = "881db7d0-f7ee-4d4d-a6d2-4697acc66ee8"
  CLSID_D2D1HueRotation = "0f4458ec-4b32-491b-9e85-bd73f44d3eb6"
  CLSID_D2D1LinearTransfer = "ad47c8fd-63ef-4acc-9b51-67979c036c06"
  CLSID_D2D1LuminanceToAlpha = "41251ab7-0beb-46f8-9da7-59e93fcce5de"
  CLSID_D2D1Morphology = "eae6c40d-626a-4c2d-bfcb-391001abe202"
  CLSID_D2D1OpacityMetadata = "6c53006a-4450-4199-aa5b-ad1656fece5e"
  CLSID_D2D1PointDiffuse = "b9e303c3-c08c-4f91-8b7b-38656bc48c20"
  CLSID_D2D1PointSpecular = "09c3ca26-3ae2-4f09-9ebc-ed3865d53f22"
  CLSID_D2D1Premultiply = "06eab419-deed-4018-80d2-3e1d471adeb2"
  CLSID_D2D1Saturation = "5cb2d9cf-327d-459f-a0ce-40c0b2086bf7"
  CLSID_D2D1Shadow = "c67ea361-1863-4e69-89db-695d3e9a5b6b"
  CLSID_D2D1SpotDiffuse = "818a1105-7932-44f4-aa86-08ae7b2f2c93"
  CLSID_D2D1SpotSpecular = "edae421e-7654-4a37-9db8-71acc1beb3c1"
  CLSID_D2D1TableTransfer = "5bf818c3-5e43-48cb-b631-868396d6a1d4"
  CLSID_D2D1Tile = "b0784138-3b76-4bc5-b13b-0fa2ad02659f"
  CLSID_D2D1Turbulence = "cf2bb6ae-889a-4ad7-ba29-a2fd732c9fc9"
  CLSID_D2D1UnPremultiply = "fb9ac489-ad8d-41ed-9999-bb6347d110f7"
  CLSID_D2D1YCbCr = "99503cc1-66c7-45c9-a875-8ad8a7914401"
  CLSID_D2D1Contrast = "b648a78a-0ed5-4f80-a94a-8e825aca6b77"
  CLSID_D2D1RgbToHue = "23f3e5ec-91e8-4d3d-ad0a-afadc1004aa1"
  CLSID_D2D1HueToRgb = "7b78a6bd-0141-4def-8a52-6356ee0cbdd5"
  CLSID_D2D1ChromaKey = "74c01f5b-2a0d-408c-88e2-c7a3c7197742"
  CLSID_D2D1Emboss = "b1c5eb2b-0348-43f0-8107-4957cacba2ae"
  CLSID_D2D1Exposure = "b56c8cfa-f634-41ee-bee0-ffa617106004"
  CLSID_D2D1Grayscale = "36dde0eb-3725-42e0-836d-52fb20aee644"
  CLSID_D2D1Invert = "e0c3784d-cb39-4e84-b6fd-6b72f0810263"
  CLSID_D2D1Posterize = "2188945e-33a3-4366-b7bc-086bd02d0884"
  CLSID_D2D1Sepia = "3a1af410-5f1d-4dbe-84df-915da79b7153"
  CLSID_D2D1Sharpen = "c9b887cb-c5ff-4dc5-9779-273dcf417c7d"
  CLSID_D2D1Straighten = "4da47b12-79a3-4fb0-8237-bbc3b2a4de08"
  CLSID_D2D1TemperatureTint = "89176087-8af9-4a08-aeb1-895f38db1766"
  CLSID_D2D1Vignette = "c00c40be-5e67-4ca3-95b4-f4b02c115135"
  CLSID_D2D1EdgeDetection = "eff583ca-cb07-4aa9-ac5d-2cc44c76460f"
  CLSID_D2D1HighlightsShadows = "cadc8384-323f-4c7e-a361-2e2b24df6ee4"
  CLSID_D2D1LookupTable3D = "349e0eda-0088-4a79-9ca3-c7e300202020"
  CLSID_D2D1Opacity = "811d79a4-de28-4454-8094-c64685f8bd4c"
  CLSID_D2D1AlphaMask = "c80ecff0-3fd5-4f05-8328-c5d1724b4f0a"
  CLSID_D2D1CrossFade = "12f575e8-4db1-485f-9a84-03a07dd3829f"
  CLSID_D2D1Tint = "36312b17-f7dd-4014-915d-ffca768cf211"
  D2D1_SCENE_REFERRED_SDR_WHITE_LEVEL = "80.0_f32"
  CLSID_D2D1WhiteLevelAdjustment = "44a1cadb-6cdd-4818-8ff4-26c1cfe95bdb"
  CLSID_D2D1HdrToneMap = "7b0b748d-4610-4486-a90c-999d9a2e2b11"
  D2D1_APPEND_ALIGNED_ELEMENT = 4294967295_u32
  FACILITY_D2D = 2201_u32

  alias PD2D1_EFFECT_FACTORY = Proc(IUnknown*, HRESULT)
  alias PD2D1_PROPERTY_SET_FUNCTION = Proc(IUnknown, UInt8*, UInt32, HRESULT)
  alias PD2D1_PROPERTY_GET_FUNCTION = Proc(IUnknown, UInt8*, UInt32, UInt32*, HRESULT)


  enum D2D1_INTERPOLATION_MODE_DEFINITION : Int32
    D2D1_INTERPOLATION_MODE_DEFINITION_NEAREST_NEIGHBOR = 0
    D2D1_INTERPOLATION_MODE_DEFINITION_LINEAR = 1
    D2D1_INTERPOLATION_MODE_DEFINITION_CUBIC = 2
    D2D1_INTERPOLATION_MODE_DEFINITION_MULTI_SAMPLE_LINEAR = 3
    D2D1_INTERPOLATION_MODE_DEFINITION_ANISOTROPIC = 4
    D2D1_INTERPOLATION_MODE_DEFINITION_HIGH_QUALITY_CUBIC = 5
    D2D1_INTERPOLATION_MODE_DEFINITION_FANT = 6
    D2D1_INTERPOLATION_MODE_DEFINITION_MIPMAP_LINEAR = 7
  end

  enum D2D1_GAMMA : UInt32
    D2D1_GAMMA_2_2 = 0
    D2D1_GAMMA_1_0 = 1
    D2D1_GAMMA_FORCE_DWORD = 4294967295
  end

  enum D2D1_OPACITY_MASK_CONTENT : UInt32
    D2D1_OPACITY_MASK_CONTENT_GRAPHICS = 0
    D2D1_OPACITY_MASK_CONTENT_TEXT_NATURAL = 1
    D2D1_OPACITY_MASK_CONTENT_TEXT_GDI_COMPATIBLE = 2
    D2D1_OPACITY_MASK_CONTENT_FORCE_DWORD = 4294967295
  end

  enum D2D1_EXTEND_MODE : UInt32
    D2D1_EXTEND_MODE_CLAMP = 0
    D2D1_EXTEND_MODE_WRAP = 1
    D2D1_EXTEND_MODE_MIRROR = 2
    D2D1_EXTEND_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_ANTIALIAS_MODE : UInt32
    D2D1_ANTIALIAS_MODE_PER_PRIMITIVE = 0
    D2D1_ANTIALIAS_MODE_ALIASED = 1
    D2D1_ANTIALIAS_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_TEXT_ANTIALIAS_MODE : UInt32
    D2D1_TEXT_ANTIALIAS_MODE_DEFAULT = 0
    D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE = 1
    D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE = 2
    D2D1_TEXT_ANTIALIAS_MODE_ALIASED = 3
    D2D1_TEXT_ANTIALIAS_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_BITMAP_INTERPOLATION_MODE : UInt32
    D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0
    D2D1_BITMAP_INTERPOLATION_MODE_LINEAR = 1
    D2D1_BITMAP_INTERPOLATION_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_DRAW_TEXT_OPTIONS : UInt32
    D2D1_DRAW_TEXT_OPTIONS_NO_SNAP = 1
    D2D1_DRAW_TEXT_OPTIONS_CLIP = 2
    D2D1_DRAW_TEXT_OPTIONS_ENABLE_COLOR_FONT = 4
    D2D1_DRAW_TEXT_OPTIONS_DISABLE_COLOR_BITMAP_SNAPPING = 8
    D2D1_DRAW_TEXT_OPTIONS_NONE = 0
    D2D1_DRAW_TEXT_OPTIONS_FORCE_DWORD = 4294967295
  end

  enum D2D1_ARC_SIZE : UInt32
    D2D1_ARC_SIZE_SMALL = 0
    D2D1_ARC_SIZE_LARGE = 1
    D2D1_ARC_SIZE_FORCE_DWORD = 4294967295
  end

  enum D2D1_CAP_STYLE : UInt32
    D2D1_CAP_STYLE_FLAT = 0
    D2D1_CAP_STYLE_SQUARE = 1
    D2D1_CAP_STYLE_ROUND = 2
    D2D1_CAP_STYLE_TRIANGLE = 3
    D2D1_CAP_STYLE_FORCE_DWORD = 4294967295
  end

  enum D2D1_DASH_STYLE : UInt32
    D2D1_DASH_STYLE_SOLID = 0
    D2D1_DASH_STYLE_DASH = 1
    D2D1_DASH_STYLE_DOT = 2
    D2D1_DASH_STYLE_DASH_DOT = 3
    D2D1_DASH_STYLE_DASH_DOT_DOT = 4
    D2D1_DASH_STYLE_CUSTOM = 5
    D2D1_DASH_STYLE_FORCE_DWORD = 4294967295
  end

  enum D2D1_LINE_JOIN : UInt32
    D2D1_LINE_JOIN_MITER = 0
    D2D1_LINE_JOIN_BEVEL = 1
    D2D1_LINE_JOIN_ROUND = 2
    D2D1_LINE_JOIN_MITER_OR_BEVEL = 3
    D2D1_LINE_JOIN_FORCE_DWORD = 4294967295
  end

  enum D2D1_COMBINE_MODE : UInt32
    D2D1_COMBINE_MODE_UNION = 0
    D2D1_COMBINE_MODE_INTERSECT = 1
    D2D1_COMBINE_MODE_XOR = 2
    D2D1_COMBINE_MODE_EXCLUDE = 3
    D2D1_COMBINE_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_GEOMETRY_RELATION : UInt32
    D2D1_GEOMETRY_RELATION_UNKNOWN = 0
    D2D1_GEOMETRY_RELATION_DISJOINT = 1
    D2D1_GEOMETRY_RELATION_IS_CONTAINED = 2
    D2D1_GEOMETRY_RELATION_CONTAINS = 3
    D2D1_GEOMETRY_RELATION_OVERLAP = 4
    D2D1_GEOMETRY_RELATION_FORCE_DWORD = 4294967295
  end

  enum D2D1_GEOMETRY_SIMPLIFICATION_OPTION : UInt32
    D2D1_GEOMETRY_SIMPLIFICATION_OPTION_CUBICS_AND_LINES = 0
    D2D1_GEOMETRY_SIMPLIFICATION_OPTION_LINES = 1
    D2D1_GEOMETRY_SIMPLIFICATION_OPTION_FORCE_DWORD = 4294967295
  end

  enum D2D1_SWEEP_DIRECTION : UInt32
    D2D1_SWEEP_DIRECTION_COUNTER_CLOCKWISE = 0
    D2D1_SWEEP_DIRECTION_CLOCKWISE = 1
    D2D1_SWEEP_DIRECTION_FORCE_DWORD = 4294967295
  end

  enum D2D1_LAYER_OPTIONS : UInt32
    D2D1_LAYER_OPTIONS_NONE = 0
    D2D1_LAYER_OPTIONS_INITIALIZE_FOR_CLEARTYPE = 1
    D2D1_LAYER_OPTIONS_FORCE_DWORD = 4294967295
  end

  enum D2D1_WINDOW_STATE : UInt32
    D2D1_WINDOW_STATE_NONE = 0
    D2D1_WINDOW_STATE_OCCLUDED = 1
    D2D1_WINDOW_STATE_FORCE_DWORD = 4294967295
  end

  enum D2D1_RENDER_TARGET_TYPE : UInt32
    D2D1_RENDER_TARGET_TYPE_DEFAULT = 0
    D2D1_RENDER_TARGET_TYPE_SOFTWARE = 1
    D2D1_RENDER_TARGET_TYPE_HARDWARE = 2
    D2D1_RENDER_TARGET_TYPE_FORCE_DWORD = 4294967295
  end

  enum D2D1_FEATURE_LEVEL : UInt32
    D2D1_FEATURE_LEVEL_DEFAULT = 0
    D2D1_FEATURE_LEVEL_9 = 37120
    D2D1_FEATURE_LEVEL_10 = 40960
    D2D1_FEATURE_LEVEL_FORCE_DWORD = 4294967295
  end

  enum D2D1_RENDER_TARGET_USAGE : UInt32
    D2D1_RENDER_TARGET_USAGE_NONE = 0
    D2D1_RENDER_TARGET_USAGE_FORCE_BITMAP_REMOTING = 1
    D2D1_RENDER_TARGET_USAGE_GDI_COMPATIBLE = 2
    D2D1_RENDER_TARGET_USAGE_FORCE_DWORD = 4294967295
  end

  enum D2D1_PRESENT_OPTIONS : UInt32
    D2D1_PRESENT_OPTIONS_NONE = 0
    D2D1_PRESENT_OPTIONS_RETAIN_CONTENTS = 1
    D2D1_PRESENT_OPTIONS_IMMEDIATELY = 2
    D2D1_PRESENT_OPTIONS_FORCE_DWORD = 4294967295
  end

  enum D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS : UInt32
    D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_NONE = 0
    D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE = 1
    D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_FORCE_DWORD = 4294967295
  end

  enum D2D1_DC_INITIALIZE_MODE : UInt32
    D2D1_DC_INITIALIZE_MODE_COPY = 0
    D2D1_DC_INITIALIZE_MODE_CLEAR = 1
    D2D1_DC_INITIALIZE_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_DEBUG_LEVEL : UInt32
    D2D1_DEBUG_LEVEL_NONE = 0
    D2D1_DEBUG_LEVEL_ERROR = 1
    D2D1_DEBUG_LEVEL_WARNING = 2
    D2D1_DEBUG_LEVEL_INFORMATION = 3
    D2D1_DEBUG_LEVEL_FORCE_DWORD = 4294967295
  end

  enum D2D1_FACTORY_TYPE : UInt32
    D2D1_FACTORY_TYPE_SINGLE_THREADED = 0
    D2D1_FACTORY_TYPE_MULTI_THREADED = 1
    D2D1_FACTORY_TYPE_FORCE_DWORD = 4294967295
  end

  enum D2D1_CHANNEL_SELECTOR : UInt32
    D2D1_CHANNEL_SELECTOR_R = 0
    D2D1_CHANNEL_SELECTOR_G = 1
    D2D1_CHANNEL_SELECTOR_B = 2
    D2D1_CHANNEL_SELECTOR_A = 3
    D2D1_CHANNEL_SELECTOR_FORCE_DWORD = 4294967295
  end

  enum D2D1_BITMAPSOURCE_ORIENTATION : UInt32
    D2D1_BITMAPSOURCE_ORIENTATION_DEFAULT = 1
    D2D1_BITMAPSOURCE_ORIENTATION_FLIP_HORIZONTAL = 2
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180 = 3
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL = 4
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL = 5
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90 = 6
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL = 7
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270 = 8
    D2D1_BITMAPSOURCE_ORIENTATION_FORCE_DWORD = 4294967295
  end

  enum D2D1_GAUSSIANBLUR_PROP : UInt32
    D2D1_GAUSSIANBLUR_PROP_STANDARD_DEVIATION = 0
    D2D1_GAUSSIANBLUR_PROP_OPTIMIZATION = 1
    D2D1_GAUSSIANBLUR_PROP_BORDER_MODE = 2
    D2D1_GAUSSIANBLUR_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_GAUSSIANBLUR_OPTIMIZATION : UInt32
    D2D1_GAUSSIANBLUR_OPTIMIZATION_SPEED = 0
    D2D1_GAUSSIANBLUR_OPTIMIZATION_BALANCED = 1
    D2D1_GAUSSIANBLUR_OPTIMIZATION_QUALITY = 2
    D2D1_GAUSSIANBLUR_OPTIMIZATION_FORCE_DWORD = 4294967295
  end

  enum D2D1_DIRECTIONALBLUR_PROP : UInt32
    D2D1_DIRECTIONALBLUR_PROP_STANDARD_DEVIATION = 0
    D2D1_DIRECTIONALBLUR_PROP_ANGLE = 1
    D2D1_DIRECTIONALBLUR_PROP_OPTIMIZATION = 2
    D2D1_DIRECTIONALBLUR_PROP_BORDER_MODE = 3
    D2D1_DIRECTIONALBLUR_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_DIRECTIONALBLUR_OPTIMIZATION : UInt32
    D2D1_DIRECTIONALBLUR_OPTIMIZATION_SPEED = 0
    D2D1_DIRECTIONALBLUR_OPTIMIZATION_BALANCED = 1
    D2D1_DIRECTIONALBLUR_OPTIMIZATION_QUALITY = 2
    D2D1_DIRECTIONALBLUR_OPTIMIZATION_FORCE_DWORD = 4294967295
  end

  enum D2D1_SHADOW_PROP : UInt32
    D2D1_SHADOW_PROP_BLUR_STANDARD_DEVIATION = 0
    D2D1_SHADOW_PROP_COLOR = 1
    D2D1_SHADOW_PROP_OPTIMIZATION = 2
    D2D1_SHADOW_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_SHADOW_OPTIMIZATION : UInt32
    D2D1_SHADOW_OPTIMIZATION_SPEED = 0
    D2D1_SHADOW_OPTIMIZATION_BALANCED = 1
    D2D1_SHADOW_OPTIMIZATION_QUALITY = 2
    D2D1_SHADOW_OPTIMIZATION_FORCE_DWORD = 4294967295
  end

  enum D2D1_BLEND_PROP : UInt32
    D2D1_BLEND_PROP_MODE = 0
    D2D1_BLEND_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_SATURATION_PROP : UInt32
    D2D1_SATURATION_PROP_SATURATION = 0
    D2D1_SATURATION_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_HUEROTATION_PROP : UInt32
    D2D1_HUEROTATION_PROP_ANGLE = 0
    D2D1_HUEROTATION_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_COLORMATRIX_PROP : UInt32
    D2D1_COLORMATRIX_PROP_COLOR_MATRIX = 0
    D2D1_COLORMATRIX_PROP_ALPHA_MODE = 1
    D2D1_COLORMATRIX_PROP_CLAMP_OUTPUT = 2
    D2D1_COLORMATRIX_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_BITMAPSOURCE_PROP : UInt32
    D2D1_BITMAPSOURCE_PROP_WIC_BITMAP_SOURCE = 0
    D2D1_BITMAPSOURCE_PROP_SCALE = 1
    D2D1_BITMAPSOURCE_PROP_INTERPOLATION_MODE = 2
    D2D1_BITMAPSOURCE_PROP_ENABLE_DPI_CORRECTION = 3
    D2D1_BITMAPSOURCE_PROP_ALPHA_MODE = 4
    D2D1_BITMAPSOURCE_PROP_ORIENTATION = 5
    D2D1_BITMAPSOURCE_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_BITMAPSOURCE_INTERPOLATION_MODE : UInt32
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_LINEAR = 1
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_CUBIC = 2
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_FANT = 6
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_MIPMAP_LINEAR = 7
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_BITMAPSOURCE_ALPHA_MODE : UInt32
    D2D1_BITMAPSOURCE_ALPHA_MODE_PREMULTIPLIED = 1
    D2D1_BITMAPSOURCE_ALPHA_MODE_STRAIGHT = 2
    D2D1_BITMAPSOURCE_ALPHA_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_COMPOSITE_PROP : UInt32
    D2D1_COMPOSITE_PROP_MODE = 0
    D2D1_COMPOSITE_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_3DTRANSFORM_PROP : UInt32
    D2D1_3DTRANSFORM_PROP_INTERPOLATION_MODE = 0
    D2D1_3DTRANSFORM_PROP_BORDER_MODE = 1
    D2D1_3DTRANSFORM_PROP_TRANSFORM_MATRIX = 2
    D2D1_3DTRANSFORM_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_3DTRANSFORM_INTERPOLATION_MODE : UInt32
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_LINEAR = 1
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_CUBIC = 2
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_ANISOTROPIC = 4
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_3DPERSPECTIVETRANSFORM_PROP : UInt32
    D2D1_3DPERSPECTIVETRANSFORM_PROP_INTERPOLATION_MODE = 0
    D2D1_3DPERSPECTIVETRANSFORM_PROP_BORDER_MODE = 1
    D2D1_3DPERSPECTIVETRANSFORM_PROP_DEPTH = 2
    D2D1_3DPERSPECTIVETRANSFORM_PROP_PERSPECTIVE_ORIGIN = 3
    D2D1_3DPERSPECTIVETRANSFORM_PROP_LOCAL_OFFSET = 4
    D2D1_3DPERSPECTIVETRANSFORM_PROP_GLOBAL_OFFSET = 5
    D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION_ORIGIN = 6
    D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION = 7
    D2D1_3DPERSPECTIVETRANSFORM_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE : UInt32
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_LINEAR = 1
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_CUBIC = 2
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC = 4
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_2DAFFINETRANSFORM_PROP : UInt32
    D2D1_2DAFFINETRANSFORM_PROP_INTERPOLATION_MODE = 0
    D2D1_2DAFFINETRANSFORM_PROP_BORDER_MODE = 1
    D2D1_2DAFFINETRANSFORM_PROP_TRANSFORM_MATRIX = 2
    D2D1_2DAFFINETRANSFORM_PROP_SHARPNESS = 3
    D2D1_2DAFFINETRANSFORM_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_DPICOMPENSATION_PROP : UInt32
    D2D1_DPICOMPENSATION_PROP_INTERPOLATION_MODE = 0
    D2D1_DPICOMPENSATION_PROP_BORDER_MODE = 1
    D2D1_DPICOMPENSATION_PROP_INPUT_DPI = 2
    D2D1_DPICOMPENSATION_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_DPICOMPENSATION_INTERPOLATION_MODE : UInt32
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_LINEAR = 1
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_CUBIC = 2
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_ANISOTROPIC = 4
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC = 5
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_SCALE_PROP : UInt32
    D2D1_SCALE_PROP_SCALE = 0
    D2D1_SCALE_PROP_CENTER_POINT = 1
    D2D1_SCALE_PROP_INTERPOLATION_MODE = 2
    D2D1_SCALE_PROP_BORDER_MODE = 3
    D2D1_SCALE_PROP_SHARPNESS = 4
    D2D1_SCALE_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_SCALE_INTERPOLATION_MODE : UInt32
    D2D1_SCALE_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0
    D2D1_SCALE_INTERPOLATION_MODE_LINEAR = 1
    D2D1_SCALE_INTERPOLATION_MODE_CUBIC = 2
    D2D1_SCALE_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_SCALE_INTERPOLATION_MODE_ANISOTROPIC = 4
    D2D1_SCALE_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC = 5
    D2D1_SCALE_INTERPOLATION_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_TURBULENCE_PROP : UInt32
    D2D1_TURBULENCE_PROP_OFFSET = 0
    D2D1_TURBULENCE_PROP_SIZE = 1
    D2D1_TURBULENCE_PROP_BASE_FREQUENCY = 2
    D2D1_TURBULENCE_PROP_NUM_OCTAVES = 3
    D2D1_TURBULENCE_PROP_SEED = 4
    D2D1_TURBULENCE_PROP_NOISE = 5
    D2D1_TURBULENCE_PROP_STITCHABLE = 6
    D2D1_TURBULENCE_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_DISPLACEMENTMAP_PROP : UInt32
    D2D1_DISPLACEMENTMAP_PROP_SCALE = 0
    D2D1_DISPLACEMENTMAP_PROP_X_CHANNEL_SELECT = 1
    D2D1_DISPLACEMENTMAP_PROP_Y_CHANNEL_SELECT = 2
    D2D1_DISPLACEMENTMAP_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_COLORMANAGEMENT_PROP : UInt32
    D2D1_COLORMANAGEMENT_PROP_SOURCE_COLOR_CONTEXT = 0
    D2D1_COLORMANAGEMENT_PROP_SOURCE_RENDERING_INTENT = 1
    D2D1_COLORMANAGEMENT_PROP_DESTINATION_COLOR_CONTEXT = 2
    D2D1_COLORMANAGEMENT_PROP_DESTINATION_RENDERING_INTENT = 3
    D2D1_COLORMANAGEMENT_PROP_ALPHA_MODE = 4
    D2D1_COLORMANAGEMENT_PROP_QUALITY = 5
    D2D1_COLORMANAGEMENT_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_COLORMANAGEMENT_ALPHA_MODE : UInt32
    D2D1_COLORMANAGEMENT_ALPHA_MODE_PREMULTIPLIED = 1
    D2D1_COLORMANAGEMENT_ALPHA_MODE_STRAIGHT = 2
    D2D1_COLORMANAGEMENT_ALPHA_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_COLORMANAGEMENT_QUALITY : UInt32
    D2D1_COLORMANAGEMENT_QUALITY_PROOF = 0
    D2D1_COLORMANAGEMENT_QUALITY_NORMAL = 1
    D2D1_COLORMANAGEMENT_QUALITY_BEST = 2
    D2D1_COLORMANAGEMENT_QUALITY_FORCE_DWORD = 4294967295
  end

  enum D2D1_COLORMANAGEMENT_RENDERING_INTENT : UInt32
    D2D1_COLORMANAGEMENT_RENDERING_INTENT_PERCEPTUAL = 0
    D2D1_COLORMANAGEMENT_RENDERING_INTENT_RELATIVE_COLORIMETRIC = 1
    D2D1_COLORMANAGEMENT_RENDERING_INTENT_SATURATION = 2
    D2D1_COLORMANAGEMENT_RENDERING_INTENT_ABSOLUTE_COLORIMETRIC = 3
    D2D1_COLORMANAGEMENT_RENDERING_INTENT_FORCE_DWORD = 4294967295
  end

  enum D2D1_HISTOGRAM_PROP : UInt32
    D2D1_HISTOGRAM_PROP_NUM_BINS = 0
    D2D1_HISTOGRAM_PROP_CHANNEL_SELECT = 1
    D2D1_HISTOGRAM_PROP_HISTOGRAM_OUTPUT = 2
    D2D1_HISTOGRAM_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_POINTSPECULAR_PROP : UInt32
    D2D1_POINTSPECULAR_PROP_LIGHT_POSITION = 0
    D2D1_POINTSPECULAR_PROP_SPECULAR_EXPONENT = 1
    D2D1_POINTSPECULAR_PROP_SPECULAR_CONSTANT = 2
    D2D1_POINTSPECULAR_PROP_SURFACE_SCALE = 3
    D2D1_POINTSPECULAR_PROP_COLOR = 4
    D2D1_POINTSPECULAR_PROP_KERNEL_UNIT_LENGTH = 5
    D2D1_POINTSPECULAR_PROP_SCALE_MODE = 6
    D2D1_POINTSPECULAR_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_POINTSPECULAR_SCALE_MODE : UInt32
    D2D1_POINTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR = 0
    D2D1_POINTSPECULAR_SCALE_MODE_LINEAR = 1
    D2D1_POINTSPECULAR_SCALE_MODE_CUBIC = 2
    D2D1_POINTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_POINTSPECULAR_SCALE_MODE_ANISOTROPIC = 4
    D2D1_POINTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC = 5
    D2D1_POINTSPECULAR_SCALE_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_SPOTSPECULAR_PROP : UInt32
    D2D1_SPOTSPECULAR_PROP_LIGHT_POSITION = 0
    D2D1_SPOTSPECULAR_PROP_POINTS_AT = 1
    D2D1_SPOTSPECULAR_PROP_FOCUS = 2
    D2D1_SPOTSPECULAR_PROP_LIMITING_CONE_ANGLE = 3
    D2D1_SPOTSPECULAR_PROP_SPECULAR_EXPONENT = 4
    D2D1_SPOTSPECULAR_PROP_SPECULAR_CONSTANT = 5
    D2D1_SPOTSPECULAR_PROP_SURFACE_SCALE = 6
    D2D1_SPOTSPECULAR_PROP_COLOR = 7
    D2D1_SPOTSPECULAR_PROP_KERNEL_UNIT_LENGTH = 8
    D2D1_SPOTSPECULAR_PROP_SCALE_MODE = 9
    D2D1_SPOTSPECULAR_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_SPOTSPECULAR_SCALE_MODE : UInt32
    D2D1_SPOTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR = 0
    D2D1_SPOTSPECULAR_SCALE_MODE_LINEAR = 1
    D2D1_SPOTSPECULAR_SCALE_MODE_CUBIC = 2
    D2D1_SPOTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_SPOTSPECULAR_SCALE_MODE_ANISOTROPIC = 4
    D2D1_SPOTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC = 5
    D2D1_SPOTSPECULAR_SCALE_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_DISTANTSPECULAR_PROP : UInt32
    D2D1_DISTANTSPECULAR_PROP_AZIMUTH = 0
    D2D1_DISTANTSPECULAR_PROP_ELEVATION = 1
    D2D1_DISTANTSPECULAR_PROP_SPECULAR_EXPONENT = 2
    D2D1_DISTANTSPECULAR_PROP_SPECULAR_CONSTANT = 3
    D2D1_DISTANTSPECULAR_PROP_SURFACE_SCALE = 4
    D2D1_DISTANTSPECULAR_PROP_COLOR = 5
    D2D1_DISTANTSPECULAR_PROP_KERNEL_UNIT_LENGTH = 6
    D2D1_DISTANTSPECULAR_PROP_SCALE_MODE = 7
    D2D1_DISTANTSPECULAR_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_DISTANTSPECULAR_SCALE_MODE : UInt32
    D2D1_DISTANTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR = 0
    D2D1_DISTANTSPECULAR_SCALE_MODE_LINEAR = 1
    D2D1_DISTANTSPECULAR_SCALE_MODE_CUBIC = 2
    D2D1_DISTANTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_DISTANTSPECULAR_SCALE_MODE_ANISOTROPIC = 4
    D2D1_DISTANTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC = 5
    D2D1_DISTANTSPECULAR_SCALE_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_POINTDIFFUSE_PROP : UInt32
    D2D1_POINTDIFFUSE_PROP_LIGHT_POSITION = 0
    D2D1_POINTDIFFUSE_PROP_DIFFUSE_CONSTANT = 1
    D2D1_POINTDIFFUSE_PROP_SURFACE_SCALE = 2
    D2D1_POINTDIFFUSE_PROP_COLOR = 3
    D2D1_POINTDIFFUSE_PROP_KERNEL_UNIT_LENGTH = 4
    D2D1_POINTDIFFUSE_PROP_SCALE_MODE = 5
    D2D1_POINTDIFFUSE_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_POINTDIFFUSE_SCALE_MODE : UInt32
    D2D1_POINTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR = 0
    D2D1_POINTDIFFUSE_SCALE_MODE_LINEAR = 1
    D2D1_POINTDIFFUSE_SCALE_MODE_CUBIC = 2
    D2D1_POINTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_POINTDIFFUSE_SCALE_MODE_ANISOTROPIC = 4
    D2D1_POINTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC = 5
    D2D1_POINTDIFFUSE_SCALE_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_SPOTDIFFUSE_PROP : UInt32
    D2D1_SPOTDIFFUSE_PROP_LIGHT_POSITION = 0
    D2D1_SPOTDIFFUSE_PROP_POINTS_AT = 1
    D2D1_SPOTDIFFUSE_PROP_FOCUS = 2
    D2D1_SPOTDIFFUSE_PROP_LIMITING_CONE_ANGLE = 3
    D2D1_SPOTDIFFUSE_PROP_DIFFUSE_CONSTANT = 4
    D2D1_SPOTDIFFUSE_PROP_SURFACE_SCALE = 5
    D2D1_SPOTDIFFUSE_PROP_COLOR = 6
    D2D1_SPOTDIFFUSE_PROP_KERNEL_UNIT_LENGTH = 7
    D2D1_SPOTDIFFUSE_PROP_SCALE_MODE = 8
    D2D1_SPOTDIFFUSE_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_SPOTDIFFUSE_SCALE_MODE : UInt32
    D2D1_SPOTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR = 0
    D2D1_SPOTDIFFUSE_SCALE_MODE_LINEAR = 1
    D2D1_SPOTDIFFUSE_SCALE_MODE_CUBIC = 2
    D2D1_SPOTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_SPOTDIFFUSE_SCALE_MODE_ANISOTROPIC = 4
    D2D1_SPOTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC = 5
    D2D1_SPOTDIFFUSE_SCALE_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_DISTANTDIFFUSE_PROP : UInt32
    D2D1_DISTANTDIFFUSE_PROP_AZIMUTH = 0
    D2D1_DISTANTDIFFUSE_PROP_ELEVATION = 1
    D2D1_DISTANTDIFFUSE_PROP_DIFFUSE_CONSTANT = 2
    D2D1_DISTANTDIFFUSE_PROP_SURFACE_SCALE = 3
    D2D1_DISTANTDIFFUSE_PROP_COLOR = 4
    D2D1_DISTANTDIFFUSE_PROP_KERNEL_UNIT_LENGTH = 5
    D2D1_DISTANTDIFFUSE_PROP_SCALE_MODE = 6
    D2D1_DISTANTDIFFUSE_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_DISTANTDIFFUSE_SCALE_MODE : UInt32
    D2D1_DISTANTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR = 0
    D2D1_DISTANTDIFFUSE_SCALE_MODE_LINEAR = 1
    D2D1_DISTANTDIFFUSE_SCALE_MODE_CUBIC = 2
    D2D1_DISTANTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_DISTANTDIFFUSE_SCALE_MODE_ANISOTROPIC = 4
    D2D1_DISTANTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC = 5
    D2D1_DISTANTDIFFUSE_SCALE_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_FLOOD_PROP : UInt32
    D2D1_FLOOD_PROP_COLOR = 0
    D2D1_FLOOD_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_LINEARTRANSFER_PROP : UInt32
    D2D1_LINEARTRANSFER_PROP_RED_Y_INTERCEPT = 0
    D2D1_LINEARTRANSFER_PROP_RED_SLOPE = 1
    D2D1_LINEARTRANSFER_PROP_RED_DISABLE = 2
    D2D1_LINEARTRANSFER_PROP_GREEN_Y_INTERCEPT = 3
    D2D1_LINEARTRANSFER_PROP_GREEN_SLOPE = 4
    D2D1_LINEARTRANSFER_PROP_GREEN_DISABLE = 5
    D2D1_LINEARTRANSFER_PROP_BLUE_Y_INTERCEPT = 6
    D2D1_LINEARTRANSFER_PROP_BLUE_SLOPE = 7
    D2D1_LINEARTRANSFER_PROP_BLUE_DISABLE = 8
    D2D1_LINEARTRANSFER_PROP_ALPHA_Y_INTERCEPT = 9
    D2D1_LINEARTRANSFER_PROP_ALPHA_SLOPE = 10
    D2D1_LINEARTRANSFER_PROP_ALPHA_DISABLE = 11
    D2D1_LINEARTRANSFER_PROP_CLAMP_OUTPUT = 12
    D2D1_LINEARTRANSFER_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_GAMMATRANSFER_PROP : UInt32
    D2D1_GAMMATRANSFER_PROP_RED_AMPLITUDE = 0
    D2D1_GAMMATRANSFER_PROP_RED_EXPONENT = 1
    D2D1_GAMMATRANSFER_PROP_RED_OFFSET = 2
    D2D1_GAMMATRANSFER_PROP_RED_DISABLE = 3
    D2D1_GAMMATRANSFER_PROP_GREEN_AMPLITUDE = 4
    D2D1_GAMMATRANSFER_PROP_GREEN_EXPONENT = 5
    D2D1_GAMMATRANSFER_PROP_GREEN_OFFSET = 6
    D2D1_GAMMATRANSFER_PROP_GREEN_DISABLE = 7
    D2D1_GAMMATRANSFER_PROP_BLUE_AMPLITUDE = 8
    D2D1_GAMMATRANSFER_PROP_BLUE_EXPONENT = 9
    D2D1_GAMMATRANSFER_PROP_BLUE_OFFSET = 10
    D2D1_GAMMATRANSFER_PROP_BLUE_DISABLE = 11
    D2D1_GAMMATRANSFER_PROP_ALPHA_AMPLITUDE = 12
    D2D1_GAMMATRANSFER_PROP_ALPHA_EXPONENT = 13
    D2D1_GAMMATRANSFER_PROP_ALPHA_OFFSET = 14
    D2D1_GAMMATRANSFER_PROP_ALPHA_DISABLE = 15
    D2D1_GAMMATRANSFER_PROP_CLAMP_OUTPUT = 16
    D2D1_GAMMATRANSFER_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_TABLETRANSFER_PROP : UInt32
    D2D1_TABLETRANSFER_PROP_RED_TABLE = 0
    D2D1_TABLETRANSFER_PROP_RED_DISABLE = 1
    D2D1_TABLETRANSFER_PROP_GREEN_TABLE = 2
    D2D1_TABLETRANSFER_PROP_GREEN_DISABLE = 3
    D2D1_TABLETRANSFER_PROP_BLUE_TABLE = 4
    D2D1_TABLETRANSFER_PROP_BLUE_DISABLE = 5
    D2D1_TABLETRANSFER_PROP_ALPHA_TABLE = 6
    D2D1_TABLETRANSFER_PROP_ALPHA_DISABLE = 7
    D2D1_TABLETRANSFER_PROP_CLAMP_OUTPUT = 8
    D2D1_TABLETRANSFER_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_DISCRETETRANSFER_PROP : UInt32
    D2D1_DISCRETETRANSFER_PROP_RED_TABLE = 0
    D2D1_DISCRETETRANSFER_PROP_RED_DISABLE = 1
    D2D1_DISCRETETRANSFER_PROP_GREEN_TABLE = 2
    D2D1_DISCRETETRANSFER_PROP_GREEN_DISABLE = 3
    D2D1_DISCRETETRANSFER_PROP_BLUE_TABLE = 4
    D2D1_DISCRETETRANSFER_PROP_BLUE_DISABLE = 5
    D2D1_DISCRETETRANSFER_PROP_ALPHA_TABLE = 6
    D2D1_DISCRETETRANSFER_PROP_ALPHA_DISABLE = 7
    D2D1_DISCRETETRANSFER_PROP_CLAMP_OUTPUT = 8
    D2D1_DISCRETETRANSFER_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_CONVOLVEMATRIX_PROP : UInt32
    D2D1_CONVOLVEMATRIX_PROP_KERNEL_UNIT_LENGTH = 0
    D2D1_CONVOLVEMATRIX_PROP_SCALE_MODE = 1
    D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_X = 2
    D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_Y = 3
    D2D1_CONVOLVEMATRIX_PROP_KERNEL_MATRIX = 4
    D2D1_CONVOLVEMATRIX_PROP_DIVISOR = 5
    D2D1_CONVOLVEMATRIX_PROP_BIAS = 6
    D2D1_CONVOLVEMATRIX_PROP_KERNEL_OFFSET = 7
    D2D1_CONVOLVEMATRIX_PROP_PRESERVE_ALPHA = 8
    D2D1_CONVOLVEMATRIX_PROP_BORDER_MODE = 9
    D2D1_CONVOLVEMATRIX_PROP_CLAMP_OUTPUT = 10
    D2D1_CONVOLVEMATRIX_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_CONVOLVEMATRIX_SCALE_MODE : UInt32
    D2D1_CONVOLVEMATRIX_SCALE_MODE_NEAREST_NEIGHBOR = 0
    D2D1_CONVOLVEMATRIX_SCALE_MODE_LINEAR = 1
    D2D1_CONVOLVEMATRIX_SCALE_MODE_CUBIC = 2
    D2D1_CONVOLVEMATRIX_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_CONVOLVEMATRIX_SCALE_MODE_ANISOTROPIC = 4
    D2D1_CONVOLVEMATRIX_SCALE_MODE_HIGH_QUALITY_CUBIC = 5
    D2D1_CONVOLVEMATRIX_SCALE_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_BRIGHTNESS_PROP : UInt32
    D2D1_BRIGHTNESS_PROP_WHITE_POINT = 0
    D2D1_BRIGHTNESS_PROP_BLACK_POINT = 1
    D2D1_BRIGHTNESS_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_ARITHMETICCOMPOSITE_PROP : UInt32
    D2D1_ARITHMETICCOMPOSITE_PROP_COEFFICIENTS = 0
    D2D1_ARITHMETICCOMPOSITE_PROP_CLAMP_OUTPUT = 1
    D2D1_ARITHMETICCOMPOSITE_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_CROP_PROP : UInt32
    D2D1_CROP_PROP_RECT = 0
    D2D1_CROP_PROP_BORDER_MODE = 1
    D2D1_CROP_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_BORDER_PROP : UInt32
    D2D1_BORDER_PROP_EDGE_MODE_X = 0
    D2D1_BORDER_PROP_EDGE_MODE_Y = 1
    D2D1_BORDER_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_BORDER_EDGE_MODE : UInt32
    D2D1_BORDER_EDGE_MODE_CLAMP = 0
    D2D1_BORDER_EDGE_MODE_WRAP = 1
    D2D1_BORDER_EDGE_MODE_MIRROR = 2
    D2D1_BORDER_EDGE_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_MORPHOLOGY_PROP : UInt32
    D2D1_MORPHOLOGY_PROP_MODE = 0
    D2D1_MORPHOLOGY_PROP_WIDTH = 1
    D2D1_MORPHOLOGY_PROP_HEIGHT = 2
    D2D1_MORPHOLOGY_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_MORPHOLOGY_MODE : UInt32
    D2D1_MORPHOLOGY_MODE_ERODE = 0
    D2D1_MORPHOLOGY_MODE_DILATE = 1
    D2D1_MORPHOLOGY_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_TILE_PROP : UInt32
    D2D1_TILE_PROP_RECT = 0
    D2D1_TILE_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_ATLAS_PROP : UInt32
    D2D1_ATLAS_PROP_INPUT_RECT = 0
    D2D1_ATLAS_PROP_INPUT_PADDING_RECT = 1
    D2D1_ATLAS_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_OPACITYMETADATA_PROP : UInt32
    D2D1_OPACITYMETADATA_PROP_INPUT_OPAQUE_RECT = 0
    D2D1_OPACITYMETADATA_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_PROPERTY_TYPE : UInt32
    D2D1_PROPERTY_TYPE_UNKNOWN = 0
    D2D1_PROPERTY_TYPE_STRING = 1
    D2D1_PROPERTY_TYPE_BOOL = 2
    D2D1_PROPERTY_TYPE_UINT32 = 3
    D2D1_PROPERTY_TYPE_INT32 = 4
    D2D1_PROPERTY_TYPE_FLOAT = 5
    D2D1_PROPERTY_TYPE_VECTOR2 = 6
    D2D1_PROPERTY_TYPE_VECTOR3 = 7
    D2D1_PROPERTY_TYPE_VECTOR4 = 8
    D2D1_PROPERTY_TYPE_BLOB = 9
    D2D1_PROPERTY_TYPE_IUNKNOWN = 10
    D2D1_PROPERTY_TYPE_ENUM = 11
    D2D1_PROPERTY_TYPE_ARRAY = 12
    D2D1_PROPERTY_TYPE_CLSID = 13
    D2D1_PROPERTY_TYPE_MATRIX_3X2 = 14
    D2D1_PROPERTY_TYPE_MATRIX_4X3 = 15
    D2D1_PROPERTY_TYPE_MATRIX_4X4 = 16
    D2D1_PROPERTY_TYPE_MATRIX_5X4 = 17
    D2D1_PROPERTY_TYPE_COLOR_CONTEXT = 18
    D2D1_PROPERTY_TYPE_FORCE_DWORD = 4294967295
  end

  enum D2D1_PROPERTY : UInt32
    D2D1_PROPERTY_CLSID = 2147483648
    D2D1_PROPERTY_DISPLAYNAME = 2147483649
    D2D1_PROPERTY_AUTHOR = 2147483650
    D2D1_PROPERTY_CATEGORY = 2147483651
    D2D1_PROPERTY_DESCRIPTION = 2147483652
    D2D1_PROPERTY_INPUTS = 2147483653
    D2D1_PROPERTY_CACHED = 2147483654
    D2D1_PROPERTY_PRECISION = 2147483655
    D2D1_PROPERTY_MIN_INPUTS = 2147483656
    D2D1_PROPERTY_MAX_INPUTS = 2147483657
    D2D1_PROPERTY_FORCE_DWORD = 4294967295
  end

  enum D2D1_SUBPROPERTY : UInt32
    D2D1_SUBPROPERTY_DISPLAYNAME = 2147483648
    D2D1_SUBPROPERTY_ISREADONLY = 2147483649
    D2D1_SUBPROPERTY_MIN = 2147483650
    D2D1_SUBPROPERTY_MAX = 2147483651
    D2D1_SUBPROPERTY_DEFAULT = 2147483652
    D2D1_SUBPROPERTY_FIELDS = 2147483653
    D2D1_SUBPROPERTY_INDEX = 2147483654
    D2D1_SUBPROPERTY_FORCE_DWORD = 4294967295
  end

  enum D2D1_BITMAP_OPTIONS : UInt32
    D2D1_BITMAP_OPTIONS_NONE = 0
    D2D1_BITMAP_OPTIONS_TARGET = 1
    D2D1_BITMAP_OPTIONS_CANNOT_DRAW = 2
    D2D1_BITMAP_OPTIONS_CPU_READ = 4
    D2D1_BITMAP_OPTIONS_GDI_COMPATIBLE = 8
    D2D1_BITMAP_OPTIONS_FORCE_DWORD = 4294967295
  end

  enum D2D1_BUFFER_PRECISION : UInt32
    D2D1_BUFFER_PRECISION_UNKNOWN = 0
    D2D1_BUFFER_PRECISION_8BPC_UNORM = 1
    D2D1_BUFFER_PRECISION_8BPC_UNORM_SRGB = 2
    D2D1_BUFFER_PRECISION_16BPC_UNORM = 3
    D2D1_BUFFER_PRECISION_16BPC_FLOAT = 4
    D2D1_BUFFER_PRECISION_32BPC_FLOAT = 5
    D2D1_BUFFER_PRECISION_FORCE_DWORD = 4294967295
  end

  enum D2D1_MAP_OPTIONS : UInt32
    D2D1_MAP_OPTIONS_NONE = 0
    D2D1_MAP_OPTIONS_READ = 1
    D2D1_MAP_OPTIONS_WRITE = 2
    D2D1_MAP_OPTIONS_DISCARD = 4
    D2D1_MAP_OPTIONS_FORCE_DWORD = 4294967295
  end

  enum D2D1_INTERPOLATION_MODE : UInt32
    D2D1_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0
    D2D1_INTERPOLATION_MODE_LINEAR = 1
    D2D1_INTERPOLATION_MODE_CUBIC = 2
    D2D1_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_INTERPOLATION_MODE_ANISOTROPIC = 4
    D2D1_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC = 5
    D2D1_INTERPOLATION_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_UNIT_MODE : UInt32
    D2D1_UNIT_MODE_DIPS = 0
    D2D1_UNIT_MODE_PIXELS = 1
    D2D1_UNIT_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_COLOR_SPACE : UInt32
    D2D1_COLOR_SPACE_CUSTOM = 0
    D2D1_COLOR_SPACE_SRGB = 1
    D2D1_COLOR_SPACE_SCRGB = 2
    D2D1_COLOR_SPACE_FORCE_DWORD = 4294967295
  end

  enum D2D1_DEVICE_CONTEXT_OPTIONS : UInt32
    D2D1_DEVICE_CONTEXT_OPTIONS_NONE = 0
    D2D1_DEVICE_CONTEXT_OPTIONS_ENABLE_MULTITHREADED_OPTIMIZATIONS = 1
    D2D1_DEVICE_CONTEXT_OPTIONS_FORCE_DWORD = 4294967295
  end

  enum D2D1_STROKE_TRANSFORM_TYPE : UInt32
    D2D1_STROKE_TRANSFORM_TYPE_NORMAL = 0
    D2D1_STROKE_TRANSFORM_TYPE_FIXED = 1
    D2D1_STROKE_TRANSFORM_TYPE_HAIRLINE = 2
    D2D1_STROKE_TRANSFORM_TYPE_FORCE_DWORD = 4294967295
  end

  enum D2D1_PRIMITIVE_BLEND : UInt32
    D2D1_PRIMITIVE_BLEND_SOURCE_OVER = 0
    D2D1_PRIMITIVE_BLEND_COPY = 1
    D2D1_PRIMITIVE_BLEND_MIN = 2
    D2D1_PRIMITIVE_BLEND_ADD = 3
    D2D1_PRIMITIVE_BLEND_MAX = 4
    D2D1_PRIMITIVE_BLEND_FORCE_DWORD = 4294967295
  end

  enum D2D1_THREADING_MODE : UInt32
    D2D1_THREADING_MODE_SINGLE_THREADED = 0
    D2D1_THREADING_MODE_MULTI_THREADED = 1
    D2D1_THREADING_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_COLOR_INTERPOLATION_MODE : UInt32
    D2D1_COLOR_INTERPOLATION_MODE_STRAIGHT = 0
    D2D1_COLOR_INTERPOLATION_MODE_PREMULTIPLIED = 1
    D2D1_COLOR_INTERPOLATION_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_LAYER_OPTIONS1 : UInt32
    D2D1_LAYER_OPTIONS1_NONE = 0
    D2D1_LAYER_OPTIONS1_INITIALIZE_FROM_BACKGROUND = 1
    D2D1_LAYER_OPTIONS1_IGNORE_ALPHA = 2
    D2D1_LAYER_OPTIONS1_FORCE_DWORD = 4294967295
  end

  enum D2D1_PRINT_FONT_SUBSET_MODE : UInt32
    D2D1_PRINT_FONT_SUBSET_MODE_DEFAULT = 0
    D2D1_PRINT_FONT_SUBSET_MODE_EACHPAGE = 1
    D2D1_PRINT_FONT_SUBSET_MODE_NONE = 2
    D2D1_PRINT_FONT_SUBSET_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_CHANGE_TYPE : UInt32
    D2D1_CHANGE_TYPE_NONE = 0
    D2D1_CHANGE_TYPE_PROPERTIES = 1
    D2D1_CHANGE_TYPE_CONTEXT = 2
    D2D1_CHANGE_TYPE_GRAPH = 3
    D2D1_CHANGE_TYPE_FORCE_DWORD = 4294967295
  end

  enum D2D1_PIXEL_OPTIONS : UInt32
    D2D1_PIXEL_OPTIONS_NONE = 0
    D2D1_PIXEL_OPTIONS_TRIVIAL_SAMPLING = 1
    D2D1_PIXEL_OPTIONS_FORCE_DWORD = 4294967295
  end

  enum D2D1_VERTEX_OPTIONS : UInt32
    D2D1_VERTEX_OPTIONS_NONE = 0
    D2D1_VERTEX_OPTIONS_DO_NOT_CLEAR = 1
    D2D1_VERTEX_OPTIONS_USE_DEPTH_BUFFER = 2
    D2D1_VERTEX_OPTIONS_ASSUME_NO_OVERLAP = 4
    D2D1_VERTEX_OPTIONS_FORCE_DWORD = 4294967295
  end

  enum D2D1_VERTEX_USAGE : UInt32
    D2D1_VERTEX_USAGE_STATIC = 0
    D2D1_VERTEX_USAGE_DYNAMIC = 1
    D2D1_VERTEX_USAGE_FORCE_DWORD = 4294967295
  end

  enum D2D1_BLEND_OPERATION : UInt32
    D2D1_BLEND_OPERATION_ADD = 1
    D2D1_BLEND_OPERATION_SUBTRACT = 2
    D2D1_BLEND_OPERATION_REV_SUBTRACT = 3
    D2D1_BLEND_OPERATION_MIN = 4
    D2D1_BLEND_OPERATION_MAX = 5
    D2D1_BLEND_OPERATION_FORCE_DWORD = 4294967295
  end

  enum D2D1_BLEND : UInt32
    D2D1_BLEND_ZERO = 1
    D2D1_BLEND_ONE = 2
    D2D1_BLEND_SRC_COLOR = 3
    D2D1_BLEND_INV_SRC_COLOR = 4
    D2D1_BLEND_SRC_ALPHA = 5
    D2D1_BLEND_INV_SRC_ALPHA = 6
    D2D1_BLEND_DEST_ALPHA = 7
    D2D1_BLEND_INV_DEST_ALPHA = 8
    D2D1_BLEND_DEST_COLOR = 9
    D2D1_BLEND_INV_DEST_COLOR = 10
    D2D1_BLEND_SRC_ALPHA_SAT = 11
    D2D1_BLEND_BLEND_FACTOR = 14
    D2D1_BLEND_INV_BLEND_FACTOR = 15
    D2D1_BLEND_FORCE_DWORD = 4294967295
  end

  enum D2D1_CHANNEL_DEPTH : UInt32
    D2D1_CHANNEL_DEPTH_DEFAULT = 0
    D2D1_CHANNEL_DEPTH_1 = 1
    D2D1_CHANNEL_DEPTH_4 = 4
    D2D1_CHANNEL_DEPTH_FORCE_DWORD = 4294967295
  end

  enum D2D1_FILTER : UInt32
    D2D1_FILTER_MIN_MAG_MIP_POINT = 0
    D2D1_FILTER_MIN_MAG_POINT_MIP_LINEAR = 1
    D2D1_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 4
    D2D1_FILTER_MIN_POINT_MAG_MIP_LINEAR = 5
    D2D1_FILTER_MIN_LINEAR_MAG_MIP_POINT = 16
    D2D1_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 17
    D2D1_FILTER_MIN_MAG_LINEAR_MIP_POINT = 20
    D2D1_FILTER_MIN_MAG_MIP_LINEAR = 21
    D2D1_FILTER_ANISOTROPIC = 85
    D2D1_FILTER_FORCE_DWORD = 4294967295
  end

  enum D2D1_FEATURE : UInt32
    D2D1_FEATURE_DOUBLES = 0
    D2D1_FEATURE_D3D10_X_HARDWARE_OPTIONS = 1
    D2D1_FEATURE_FORCE_DWORD = 4294967295
  end

  enum D2D1_YCBCR_PROP : UInt32
    D2D1_YCBCR_PROP_CHROMA_SUBSAMPLING = 0
    D2D1_YCBCR_PROP_TRANSFORM_MATRIX = 1
    D2D1_YCBCR_PROP_INTERPOLATION_MODE = 2
    D2D1_YCBCR_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_YCBCR_CHROMA_SUBSAMPLING : UInt32
    D2D1_YCBCR_CHROMA_SUBSAMPLING_AUTO = 0
    D2D1_YCBCR_CHROMA_SUBSAMPLING_420 = 1
    D2D1_YCBCR_CHROMA_SUBSAMPLING_422 = 2
    D2D1_YCBCR_CHROMA_SUBSAMPLING_444 = 3
    D2D1_YCBCR_CHROMA_SUBSAMPLING_440 = 4
    D2D1_YCBCR_CHROMA_SUBSAMPLING_FORCE_DWORD = 4294967295
  end

  enum D2D1_YCBCR_INTERPOLATION_MODE : UInt32
    D2D1_YCBCR_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0
    D2D1_YCBCR_INTERPOLATION_MODE_LINEAR = 1
    D2D1_YCBCR_INTERPOLATION_MODE_CUBIC = 2
    D2D1_YCBCR_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_YCBCR_INTERPOLATION_MODE_ANISOTROPIC = 4
    D2D1_YCBCR_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC = 5
    D2D1_YCBCR_INTERPOLATION_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_CONTRAST_PROP : UInt32
    D2D1_CONTRAST_PROP_CONTRAST = 0
    D2D1_CONTRAST_PROP_CLAMP_INPUT = 1
    D2D1_CONTRAST_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_RGBTOHUE_PROP : UInt32
    D2D1_RGBTOHUE_PROP_OUTPUT_COLOR_SPACE = 0
    D2D1_RGBTOHUE_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE : UInt32
    D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_VALUE = 0
    D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS = 1
    D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_FORCE_DWORD = 4294967295
  end

  enum D2D1_HUETORGB_PROP : UInt32
    D2D1_HUETORGB_PROP_INPUT_COLOR_SPACE = 0
    D2D1_HUETORGB_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_HUETORGB_INPUT_COLOR_SPACE : UInt32
    D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_VALUE = 0
    D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS = 1
    D2D1_HUETORGB_INPUT_COLOR_SPACE_FORCE_DWORD = 4294967295
  end

  enum D2D1_CHROMAKEY_PROP : UInt32
    D2D1_CHROMAKEY_PROP_COLOR = 0
    D2D1_CHROMAKEY_PROP_TOLERANCE = 1
    D2D1_CHROMAKEY_PROP_INVERT_ALPHA = 2
    D2D1_CHROMAKEY_PROP_FEATHER = 3
    D2D1_CHROMAKEY_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_EMBOSS_PROP : UInt32
    D2D1_EMBOSS_PROP_HEIGHT = 0
    D2D1_EMBOSS_PROP_DIRECTION = 1
    D2D1_EMBOSS_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_EXPOSURE_PROP : UInt32
    D2D1_EXPOSURE_PROP_EXPOSURE_VALUE = 0
    D2D1_EXPOSURE_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_POSTERIZE_PROP : UInt32
    D2D1_POSTERIZE_PROP_RED_VALUE_COUNT = 0
    D2D1_POSTERIZE_PROP_GREEN_VALUE_COUNT = 1
    D2D1_POSTERIZE_PROP_BLUE_VALUE_COUNT = 2
    D2D1_POSTERIZE_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_SEPIA_PROP : UInt32
    D2D1_SEPIA_PROP_INTENSITY = 0
    D2D1_SEPIA_PROP_ALPHA_MODE = 1
    D2D1_SEPIA_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_SHARPEN_PROP : UInt32
    D2D1_SHARPEN_PROP_SHARPNESS = 0
    D2D1_SHARPEN_PROP_THRESHOLD = 1
    D2D1_SHARPEN_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_STRAIGHTEN_PROP : UInt32
    D2D1_STRAIGHTEN_PROP_ANGLE = 0
    D2D1_STRAIGHTEN_PROP_MAINTAIN_SIZE = 1
    D2D1_STRAIGHTEN_PROP_SCALE_MODE = 2
    D2D1_STRAIGHTEN_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_STRAIGHTEN_SCALE_MODE : UInt32
    D2D1_STRAIGHTEN_SCALE_MODE_NEAREST_NEIGHBOR = 0
    D2D1_STRAIGHTEN_SCALE_MODE_LINEAR = 1
    D2D1_STRAIGHTEN_SCALE_MODE_CUBIC = 2
    D2D1_STRAIGHTEN_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_STRAIGHTEN_SCALE_MODE_ANISOTROPIC = 4
    D2D1_STRAIGHTEN_SCALE_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_TEMPERATUREANDTINT_PROP : UInt32
    D2D1_TEMPERATUREANDTINT_PROP_TEMPERATURE = 0
    D2D1_TEMPERATUREANDTINT_PROP_TINT = 1
    D2D1_TEMPERATUREANDTINT_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_VIGNETTE_PROP : UInt32
    D2D1_VIGNETTE_PROP_COLOR = 0
    D2D1_VIGNETTE_PROP_TRANSITION_SIZE = 1
    D2D1_VIGNETTE_PROP_STRENGTH = 2
    D2D1_VIGNETTE_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_EDGEDETECTION_PROP : UInt32
    D2D1_EDGEDETECTION_PROP_STRENGTH = 0
    D2D1_EDGEDETECTION_PROP_BLUR_RADIUS = 1
    D2D1_EDGEDETECTION_PROP_MODE = 2
    D2D1_EDGEDETECTION_PROP_OVERLAY_EDGES = 3
    D2D1_EDGEDETECTION_PROP_ALPHA_MODE = 4
    D2D1_EDGEDETECTION_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_EDGEDETECTION_MODE : UInt32
    D2D1_EDGEDETECTION_MODE_SOBEL = 0
    D2D1_EDGEDETECTION_MODE_PREWITT = 1
    D2D1_EDGEDETECTION_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_HIGHLIGHTSANDSHADOWS_PROP : UInt32
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_HIGHLIGHTS = 0
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_SHADOWS = 1
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_CLARITY = 2
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_INPUT_GAMMA = 3
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_MASK_BLUR_RADIUS = 4
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA : UInt32
    D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_LINEAR = 0
    D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_SRGB = 1
    D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_FORCE_DWORD = 4294967295
  end

  enum D2D1_LOOKUPTABLE3D_PROP : UInt32
    D2D1_LOOKUPTABLE3D_PROP_LUT = 0
    D2D1_LOOKUPTABLE3D_PROP_ALPHA_MODE = 1
    D2D1_LOOKUPTABLE3D_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_OPACITY_PROP : UInt32
    D2D1_OPACITY_PROP_OPACITY = 0
    D2D1_OPACITY_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_CROSSFADE_PROP : UInt32
    D2D1_CROSSFADE_PROP_WEIGHT = 0
    D2D1_CROSSFADE_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_TINT_PROP : UInt32
    D2D1_TINT_PROP_COLOR = 0
    D2D1_TINT_PROP_CLAMP_OUTPUT = 1
    D2D1_TINT_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_WHITELEVELADJUSTMENT_PROP : UInt32
    D2D1_WHITELEVELADJUSTMENT_PROP_INPUT_WHITE_LEVEL = 0
    D2D1_WHITELEVELADJUSTMENT_PROP_OUTPUT_WHITE_LEVEL = 1
    D2D1_WHITELEVELADJUSTMENT_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_HDRTONEMAP_PROP : UInt32
    D2D1_HDRTONEMAP_PROP_INPUT_MAX_LUMINANCE = 0
    D2D1_HDRTONEMAP_PROP_OUTPUT_MAX_LUMINANCE = 1
    D2D1_HDRTONEMAP_PROP_DISPLAY_MODE = 2
    D2D1_HDRTONEMAP_PROP_FORCE_DWORD = 4294967295
  end

  enum D2D1_HDRTONEMAP_DISPLAY_MODE : UInt32
    D2D1_HDRTONEMAP_DISPLAY_MODE_SDR = 0
    D2D1_HDRTONEMAP_DISPLAY_MODE_HDR = 1
    D2D1_HDRTONEMAP_DISPLAY_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_RENDERING_PRIORITY : UInt32
    D2D1_RENDERING_PRIORITY_NORMAL = 0
    D2D1_RENDERING_PRIORITY_LOW = 1
    D2D1_RENDERING_PRIORITY_FORCE_DWORD = 4294967295
  end

  enum D2D1_SVG_PAINT_TYPE : UInt32
    D2D1_SVG_PAINT_TYPE_NONE = 0
    D2D1_SVG_PAINT_TYPE_COLOR = 1
    D2D1_SVG_PAINT_TYPE_CURRENT_COLOR = 2
    D2D1_SVG_PAINT_TYPE_URI = 3
    D2D1_SVG_PAINT_TYPE_URI_NONE = 4
    D2D1_SVG_PAINT_TYPE_URI_COLOR = 5
    D2D1_SVG_PAINT_TYPE_URI_CURRENT_COLOR = 6
    D2D1_SVG_PAINT_TYPE_FORCE_DWORD = 4294967295
  end

  enum D2D1_SVG_LENGTH_UNITS : UInt32
    D2D1_SVG_LENGTH_UNITS_NUMBER = 0
    D2D1_SVG_LENGTH_UNITS_PERCENTAGE = 1
    D2D1_SVG_LENGTH_UNITS_FORCE_DWORD = 4294967295
  end

  enum D2D1_SVG_DISPLAY : UInt32
    D2D1_SVG_DISPLAY_INLINE = 0
    D2D1_SVG_DISPLAY_NONE = 1
    D2D1_SVG_DISPLAY_FORCE_DWORD = 4294967295
  end

  enum D2D1_SVG_VISIBILITY : UInt32
    D2D1_SVG_VISIBILITY_VISIBLE = 0
    D2D1_SVG_VISIBILITY_HIDDEN = 1
    D2D1_SVG_VISIBILITY_FORCE_DWORD = 4294967295
  end

  enum D2D1_SVG_OVERFLOW : UInt32
    D2D1_SVG_OVERFLOW_VISIBLE = 0
    D2D1_SVG_OVERFLOW_HIDDEN = 1
    D2D1_SVG_OVERFLOW_FORCE_DWORD = 4294967295
  end

  enum D2D1_SVG_LINE_CAP : UInt32
    D2D1_SVG_LINE_CAP_BUTT = 0
    D2D1_SVG_LINE_CAP_SQUARE = 1
    D2D1_SVG_LINE_CAP_ROUND = 2
    D2D1_SVG_LINE_CAP_FORCE_DWORD = 4294967295
  end

  enum D2D1_SVG_LINE_JOIN : UInt32
    D2D1_SVG_LINE_JOIN_BEVEL = 1
    D2D1_SVG_LINE_JOIN_MITER = 3
    D2D1_SVG_LINE_JOIN_ROUND = 2
    D2D1_SVG_LINE_JOIN_FORCE_DWORD = 4294967295
  end

  enum D2D1_SVG_ASPECT_ALIGN : UInt32
    D2D1_SVG_ASPECT_ALIGN_NONE = 0
    D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MIN = 1
    D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MIN = 2
    D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MIN = 3
    D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MID = 4
    D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MID = 5
    D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MID = 6
    D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MAX = 7
    D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MAX = 8
    D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MAX = 9
    D2D1_SVG_ASPECT_ALIGN_FORCE_DWORD = 4294967295
  end

  enum D2D1_SVG_ASPECT_SCALING : UInt32
    D2D1_SVG_ASPECT_SCALING_MEET = 0
    D2D1_SVG_ASPECT_SCALING_SLICE = 1
    D2D1_SVG_ASPECT_SCALING_FORCE_DWORD = 4294967295
  end

  enum D2D1_SVG_PATH_COMMAND : UInt32
    D2D1_SVG_PATH_COMMAND_CLOSE_PATH = 0
    D2D1_SVG_PATH_COMMAND_MOVE_ABSOLUTE = 1
    D2D1_SVG_PATH_COMMAND_MOVE_RELATIVE = 2
    D2D1_SVG_PATH_COMMAND_LINE_ABSOLUTE = 3
    D2D1_SVG_PATH_COMMAND_LINE_RELATIVE = 4
    D2D1_SVG_PATH_COMMAND_CUBIC_ABSOLUTE = 5
    D2D1_SVG_PATH_COMMAND_CUBIC_RELATIVE = 6
    D2D1_SVG_PATH_COMMAND_QUADRADIC_ABSOLUTE = 7
    D2D1_SVG_PATH_COMMAND_QUADRADIC_RELATIVE = 8
    D2D1_SVG_PATH_COMMAND_ARC_ABSOLUTE = 9
    D2D1_SVG_PATH_COMMAND_ARC_RELATIVE = 10
    D2D1_SVG_PATH_COMMAND_HORIZONTAL_ABSOLUTE = 11
    D2D1_SVG_PATH_COMMAND_HORIZONTAL_RELATIVE = 12
    D2D1_SVG_PATH_COMMAND_VERTICAL_ABSOLUTE = 13
    D2D1_SVG_PATH_COMMAND_VERTICAL_RELATIVE = 14
    D2D1_SVG_PATH_COMMAND_CUBIC_SMOOTH_ABSOLUTE = 15
    D2D1_SVG_PATH_COMMAND_CUBIC_SMOOTH_RELATIVE = 16
    D2D1_SVG_PATH_COMMAND_QUADRADIC_SMOOTH_ABSOLUTE = 17
    D2D1_SVG_PATH_COMMAND_QUADRADIC_SMOOTH_RELATIVE = 18
    D2D1_SVG_PATH_COMMAND_FORCE_DWORD = 4294967295
  end

  enum D2D1_SVG_UNIT_TYPE : UInt32
    D2D1_SVG_UNIT_TYPE_USER_SPACE_ON_USE = 0
    D2D1_SVG_UNIT_TYPE_OBJECT_BOUNDING_BOX = 1
    D2D1_SVG_UNIT_TYPE_FORCE_DWORD = 4294967295
  end

  enum D2D1_SVG_ATTRIBUTE_STRING_TYPE : UInt32
    D2D1_SVG_ATTRIBUTE_STRING_TYPE_SVG = 0
    D2D1_SVG_ATTRIBUTE_STRING_TYPE_ID = 1
    D2D1_SVG_ATTRIBUTE_STRING_TYPE_FORCE_DWORD = 4294967295
  end

  enum D2D1_SVG_ATTRIBUTE_POD_TYPE : UInt32
    D2D1_SVG_ATTRIBUTE_POD_TYPE_FLOAT = 0
    D2D1_SVG_ATTRIBUTE_POD_TYPE_COLOR = 1
    D2D1_SVG_ATTRIBUTE_POD_TYPE_FILL_MODE = 2
    D2D1_SVG_ATTRIBUTE_POD_TYPE_DISPLAY = 3
    D2D1_SVG_ATTRIBUTE_POD_TYPE_OVERFLOW = 4
    D2D1_SVG_ATTRIBUTE_POD_TYPE_LINE_CAP = 5
    D2D1_SVG_ATTRIBUTE_POD_TYPE_LINE_JOIN = 6
    D2D1_SVG_ATTRIBUTE_POD_TYPE_VISIBILITY = 7
    D2D1_SVG_ATTRIBUTE_POD_TYPE_MATRIX = 8
    D2D1_SVG_ATTRIBUTE_POD_TYPE_UNIT_TYPE = 9
    D2D1_SVG_ATTRIBUTE_POD_TYPE_EXTEND_MODE = 10
    D2D1_SVG_ATTRIBUTE_POD_TYPE_PRESERVE_ASPECT_RATIO = 11
    D2D1_SVG_ATTRIBUTE_POD_TYPE_VIEWBOX = 12
    D2D1_SVG_ATTRIBUTE_POD_TYPE_LENGTH = 13
    D2D1_SVG_ATTRIBUTE_POD_TYPE_FORCE_DWORD = 4294967295
  end

  enum D2D1_INK_NIB_SHAPE : UInt32
    D2D1_INK_NIB_SHAPE_ROUND = 0
    D2D1_INK_NIB_SHAPE_SQUARE = 1
    D2D1_INK_NIB_SHAPE_FORCE_DWORD = 4294967295
  end

  enum D2D1_ORIENTATION : UInt32
    D2D1_ORIENTATION_DEFAULT = 1
    D2D1_ORIENTATION_FLIP_HORIZONTAL = 2
    D2D1_ORIENTATION_ROTATE_CLOCKWISE180 = 3
    D2D1_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL = 4
    D2D1_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL = 5
    D2D1_ORIENTATION_ROTATE_CLOCKWISE270 = 6
    D2D1_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL = 7
    D2D1_ORIENTATION_ROTATE_CLOCKWISE90 = 8
    D2D1_ORIENTATION_FORCE_DWORD = 4294967295
  end

  enum D2D1_IMAGE_SOURCE_LOADING_OPTIONS : UInt32
    D2D1_IMAGE_SOURCE_LOADING_OPTIONS_NONE = 0
    D2D1_IMAGE_SOURCE_LOADING_OPTIONS_RELEASE_SOURCE = 1
    D2D1_IMAGE_SOURCE_LOADING_OPTIONS_CACHE_ON_DEMAND = 2
    D2D1_IMAGE_SOURCE_LOADING_OPTIONS_FORCE_DWORD = 4294967295
  end

  enum D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS : UInt32
    D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_NONE = 0
    D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_LOW_QUALITY_PRIMARY_CONVERSION = 1
    D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_FORCE_DWORD = 4294967295
  end

  enum D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS : UInt32
    D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_NONE = 0
    D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_DISABLE_DPI_SCALE = 1
    D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_FORCE_DWORD = 4294967295
  end

  enum D2D1_PATCH_EDGE_MODE : UInt32
    D2D1_PATCH_EDGE_MODE_ALIASED = 0
    D2D1_PATCH_EDGE_MODE_ANTIALIASED = 1
    D2D1_PATCH_EDGE_MODE_ALIASED_INFLATED = 2
    D2D1_PATCH_EDGE_MODE_FORCE_DWORD = 4294967295
  end

  enum D2D1_SPRITE_OPTIONS : UInt32
    D2D1_SPRITE_OPTIONS_NONE = 0
    D2D1_SPRITE_OPTIONS_CLAMP_TO_SOURCE_RECTANGLE = 1
    D2D1_SPRITE_OPTIONS_FORCE_DWORD = 4294967295
  end

  enum D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION : UInt32
    D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_DEFAULT = 0
    D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_DISABLE = 1
    D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_FORCE_DWORD = 4294967295
  end

  enum D2D1_GAMMA1 : UInt32
    D2D1_GAMMA1_G22 = 0
    D2D1_GAMMA1_G10 = 1
    D2D1_GAMMA1_G2084 = 2
    D2D1_GAMMA1_FORCE_DWORD = 4294967295
  end

  enum D2D1_COLOR_CONTEXT_TYPE : UInt32
    D2D1_COLOR_CONTEXT_TYPE_ICC = 0
    D2D1_COLOR_CONTEXT_TYPE_SIMPLE = 1
    D2D1_COLOR_CONTEXT_TYPE_DXGI = 2
    D2D1_COLOR_CONTEXT_TYPE_FORCE_DWORD = 4294967295
  end

  struct D2D1_BITMAP_PROPERTIES
    pixel_format : D2D1_PIXEL_FORMAT
    dpi_x : Float32
    dpi_y : Float32
  end
  struct D2D1_GRADIENT_STOP
    position : Float32
    color : D2D1_COLOR_F
  end
  struct D2D1_BRUSH_PROPERTIES
    opacity : Float32
    transform : D2D_MATRIX_3X2_F
  end
  struct D2D1_BITMAP_BRUSH_PROPERTIES
    extend_mode_x : D2D1_EXTEND_MODE
    extend_mode_y : D2D1_EXTEND_MODE
    interpolation_mode : D2D1_BITMAP_INTERPOLATION_MODE
  end
  struct D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES
    start_point : D2D_POINT_2F
    end_point : D2D_POINT_2F
  end
  struct D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES
    center : D2D_POINT_2F
    gradient_origin_offset : D2D_POINT_2F
    radius_x : Float32
    radius_y : Float32
  end
  struct D2D1_TRIANGLE
    point1 : D2D_POINT_2F
    point2 : D2D_POINT_2F
    point3 : D2D_POINT_2F
  end
  struct D2D1_ARC_SEGMENT
    point : D2D_POINT_2F
    size : D2D_SIZE_F
    rotation_angle : Float32
    sweep_direction : D2D1_SWEEP_DIRECTION
    arc_size : D2D1_ARC_SIZE
  end
  struct D2D1_QUADRATIC_BEZIER_SEGMENT
    point1 : D2D_POINT_2F
    point2 : D2D_POINT_2F
  end
  struct D2D1_ELLIPSE
    point : D2D_POINT_2F
    radius_x : Float32
    radius_y : Float32
  end
  struct D2D1_ROUNDED_RECT
    rect : D2D_RECT_F
    radius_x : Float32
    radius_y : Float32
  end
  struct D2D1_STROKE_STYLE_PROPERTIES
    start_cap : D2D1_CAP_STYLE
    end_cap : D2D1_CAP_STYLE
    dash_cap : D2D1_CAP_STYLE
    line_join : D2D1_LINE_JOIN
    miter_limit : Float32
    dash_style : D2D1_DASH_STYLE
    dash_offset : Float32
  end
  struct D2D1_LAYER_PARAMETERS
    content_bounds : D2D_RECT_F
    geometric_mask : ID2D1Geometry
    mask_antialias_mode : D2D1_ANTIALIAS_MODE
    mask_transform : D2D_MATRIX_3X2_F
    opacity : Float32
    opacity_brush : ID2D1Brush
    layer_options : D2D1_LAYER_OPTIONS
  end
  struct D2D1_RENDER_TARGET_PROPERTIES
    type : D2D1_RENDER_TARGET_TYPE
    pixel_format : D2D1_PIXEL_FORMAT
    dpi_x : Float32
    dpi_y : Float32
    usage : D2D1_RENDER_TARGET_USAGE
    min_level : D2D1_FEATURE_LEVEL
  end
  struct D2D1_HWND_RENDER_TARGET_PROPERTIES
    hwnd : HANDLE
    pixel_size : D2D_SIZE_U
    present_options : D2D1_PRESENT_OPTIONS
  end
  struct D2D1_DRAWING_STATE_DESCRIPTION
    antialias_mode : D2D1_ANTIALIAS_MODE
    text_antialias_mode : D2D1_TEXT_ANTIALIAS_MODE
    tag1 : UInt64
    tag2 : UInt64
    transform : D2D_MATRIX_3X2_F
  end
  struct D2D1_FACTORY_OPTIONS
    debug_level : D2D1_DEBUG_LEVEL
  end
  struct D2D1_BITMAP_PROPERTIES1
    pixel_format : D2D1_PIXEL_FORMAT
    dpi_x : Float32
    dpi_y : Float32
    bitmap_options : D2D1_BITMAP_OPTIONS
    color_context : ID2D1ColorContext
  end
  struct D2D1_MAPPED_RECT
    pitch : UInt32
    bits : UInt8*
  end
  struct D2D1_RENDERING_CONTROLS
    buffer_precision : D2D1_BUFFER_PRECISION
    tile_size : D2D_SIZE_U
  end
  struct D2D1_EFFECT_INPUT_DESCRIPTION
    effect : ID2D1Effect
    input_index : UInt32
    input_rectangle : D2D_RECT_F
  end
  struct D2D1_POINT_DESCRIPTION
    point : D2D_POINT_2F
    unit_tangent_vector : D2D_POINT_2F
    end_segment : UInt32
    end_figure : UInt32
    length_to_end_segment : Float32
  end
  struct D2D1_IMAGE_BRUSH_PROPERTIES
    source_rectangle : D2D_RECT_F
    extend_mode_x : D2D1_EXTEND_MODE
    extend_mode_y : D2D1_EXTEND_MODE
    interpolation_mode : D2D1_INTERPOLATION_MODE
  end
  struct D2D1_BITMAP_BRUSH_PROPERTIES1
    extend_mode_x : D2D1_EXTEND_MODE
    extend_mode_y : D2D1_EXTEND_MODE
    interpolation_mode : D2D1_INTERPOLATION_MODE
  end
  struct D2D1_STROKE_STYLE_PROPERTIES1
    start_cap : D2D1_CAP_STYLE
    end_cap : D2D1_CAP_STYLE
    dash_cap : D2D1_CAP_STYLE
    line_join : D2D1_LINE_JOIN
    miter_limit : Float32
    dash_style : D2D1_DASH_STYLE
    dash_offset : Float32
    transform_type : D2D1_STROKE_TRANSFORM_TYPE
  end
  struct D2D1_LAYER_PARAMETERS1
    content_bounds : D2D_RECT_F
    geometric_mask : ID2D1Geometry
    mask_antialias_mode : D2D1_ANTIALIAS_MODE
    mask_transform : D2D_MATRIX_3X2_F
    opacity : Float32
    opacity_brush : ID2D1Brush
    layer_options : D2D1_LAYER_OPTIONS1
  end
  struct D2D1_DRAWING_STATE_DESCRIPTION1
    antialias_mode : D2D1_ANTIALIAS_MODE
    text_antialias_mode : D2D1_TEXT_ANTIALIAS_MODE
    tag1 : UInt64
    tag2 : UInt64
    transform : D2D_MATRIX_3X2_F
    primitive_blend : D2D1_PRIMITIVE_BLEND
    unit_mode : D2D1_UNIT_MODE
  end
  struct D2D1_PRINT_CONTROL_PROPERTIES
    font_subset : D2D1_PRINT_FONT_SUBSET_MODE
    raster_dpi : Float32
    color_space : D2D1_COLOR_SPACE
  end
  struct D2D1_CREATION_PROPERTIES
    threading_mode : D2D1_THREADING_MODE
    debug_level : D2D1_DEBUG_LEVEL
    options : D2D1_DEVICE_CONTEXT_OPTIONS
  end
  struct Matrix4x3F
    __anonymous_base_d2d1_1helper_l45_c31 : D2D_MATRIX_4X3_F
  end
  struct Matrix4x4F
    __anonymous_base_d2d1_1helper_l97_c31 : D2D_MATRIX_4X4_F
  end
  struct Matrix5x4F
    __anonymous_base_d2d1_1helper_l472_c31 : D2D_MATRIX_5X4_F
  end
  struct D2D1_PROPERTY_BINDING
    property_name : LibC::LPWSTR
    set_function : PD2D1_PROPERTY_SET_FUNCTION
    get_function : PD2D1_PROPERTY_GET_FUNCTION
  end
  struct D2D1_RESOURCE_TEXTURE_PROPERTIES
    extents : UInt32*
    dimensions : UInt32
    buffer_precision : D2D1_BUFFER_PRECISION
    channel_depth : D2D1_CHANNEL_DEPTH
    filter : D2D1_FILTER
    extend_modes : D2D1_EXTEND_MODE*
  end
  struct D2D1_INPUT_ELEMENT_DESC
    semantic_name : PSTR
    semantic_index : UInt32
    format : DXGI_FORMAT
    input_slot : UInt32
    aligned_byte_offset : UInt32
  end
  struct D2D1_VERTEX_BUFFER_PROPERTIES
    input_count : UInt32
    usage : D2D1_VERTEX_USAGE
    data : UInt8*
    byte_width : UInt32
  end
  struct D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES
    shader_buffer_with_input_signature : UInt8*
    shader_buffer_size : UInt32
    input_elements : D2D1_INPUT_ELEMENT_DESC*
    element_count : UInt32
    stride : UInt32
  end
  struct D2D1_VERTEX_RANGE
    start_vertex : UInt32
    vertex_count : UInt32
  end
  struct D2D1_BLEND_DESCRIPTION
    source_blend : D2D1_BLEND
    destination_blend : D2D1_BLEND
    blend_operation : D2D1_BLEND_OPERATION
    source_blend_alpha : D2D1_BLEND
    destination_blend_alpha : D2D1_BLEND
    blend_operation_alpha : D2D1_BLEND_OPERATION
    blend_factor : Float32[4]*
  end
  struct D2D1_INPUT_DESCRIPTION
    filter : D2D1_FILTER
    level_of_detail_count : UInt32
  end
  struct D2D1_FEATURE_DATA_DOUBLES
    double_precision_float_shader_ops : LibC::BOOL
  end
  struct D2D1_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS
    compute_shaders_plus_raw_and_structured_buffers_via_shader_4_x : LibC::BOOL
  end
  struct D2D1_SVG_LENGTH
    value : Float32
    units : D2D1_SVG_LENGTH_UNITS
  end
  struct D2D1_SVG_PRESERVE_ASPECT_RATIO
    defer : LibC::BOOL
    align : D2D1_SVG_ASPECT_ALIGN
    meet_or_slice : D2D1_SVG_ASPECT_SCALING
  end
  struct D2D1_SVG_VIEWBOX
    x : Float32
    y : Float32
    width : Float32
    height : Float32
  end
  struct D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES
    orientation : D2D1_ORIENTATION
    scale_x : Float32
    scale_y : Float32
    interpolation_mode : D2D1_INTERPOLATION_MODE
    options : D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS
  end
  struct D2D1_INK_POINT
    x : Float32
    y : Float32
    radius : Float32
  end
  struct D2D1_INK_BEZIER_SEGMENT
    point1 : D2D1_INK_POINT
    point2 : D2D1_INK_POINT
    point3 : D2D1_INK_POINT
  end
  struct D2D1_INK_STYLE_PROPERTIES
    nib_shape : D2D1_INK_NIB_SHAPE
    nib_transform : D2D_MATRIX_3X2_F
  end
  struct D2D1_GRADIENT_MESH_PATCH
    point00 : D2D_POINT_2F
    point01 : D2D_POINT_2F
    point02 : D2D_POINT_2F
    point03 : D2D_POINT_2F
    point10 : D2D_POINT_2F
    point11 : D2D_POINT_2F
    point12 : D2D_POINT_2F
    point13 : D2D_POINT_2F
    point20 : D2D_POINT_2F
    point21 : D2D_POINT_2F
    point22 : D2D_POINT_2F
    point23 : D2D_POINT_2F
    point30 : D2D_POINT_2F
    point31 : D2D_POINT_2F
    point32 : D2D_POINT_2F
    point33 : D2D_POINT_2F
    color00 : D2D1_COLOR_F
    color03 : D2D1_COLOR_F
    color30 : D2D1_COLOR_F
    color33 : D2D1_COLOR_F
    top_edge_mode : D2D1_PATCH_EDGE_MODE
    left_edge_mode : D2D1_PATCH_EDGE_MODE
    bottom_edge_mode : D2D1_PATCH_EDGE_MODE
    right_edge_mode : D2D1_PATCH_EDGE_MODE
  end
  struct D2D1_SIMPLE_COLOR_PROFILE
    red_primary : D2D_POINT_2F
    green_primary : D2D_POINT_2F
    blue_primary : D2D_POINT_2F
    white_point_xz : D2D_POINT_2F
    gamma : D2D1_GAMMA1
  end


  struct ID2D1ResourceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
  end

  ID2D1Resource_GUID = "2cd90691-12e2-11dc-9fed-001143a055f9"
  IID_ID2D1Resource = LibC::GUID.new(0x2cd90691_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
  struct ID2D1Resource
    lpVtbl : ID2D1ResourceVTbl*
  end

  struct ID2D1ImageVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
  end

  ID2D1Image_GUID = "65019f75-8da2-497c-b32c-dfa34e48ede6"
  IID_ID2D1Image = LibC::GUID.new(0x65019f75_u32, 0x8da2_u16, 0x497c_u16, StaticArray[0xb3_u8, 0x2c_u8, 0xdf_u8, 0xa3_u8, 0x4e_u8, 0x48_u8, 0xed_u8, 0xe6_u8])
  struct ID2D1Image
    lpVtbl : ID2D1ImageVTbl*
  end

  struct ID2D1BitmapVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    get_size : UInt64
    get_pixel_size : UInt64
    get_pixel_format : UInt64
    get_dpi : UInt64
    copy_from_bitmap : UInt64
    copy_from_render_target : UInt64
    copy_from_memory : UInt64
  end

  ID2D1Bitmap_GUID = "a2296057-ea42-4099-983b-539fb6505426"
  IID_ID2D1Bitmap = LibC::GUID.new(0xa2296057_u32, 0xea42_u16, 0x4099_u16, StaticArray[0x98_u8, 0x3b_u8, 0x53_u8, 0x9f_u8, 0xb6_u8, 0x50_u8, 0x54_u8, 0x26_u8])
  struct ID2D1Bitmap
    lpVtbl : ID2D1BitmapVTbl*
  end

  struct ID2D1GradientStopCollectionVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    get_gradient_stop_count : UInt64
    get_gradient_stops : UInt64
    get_color_interpolation_gamma : UInt64
    get_extend_mode : UInt64
  end

  ID2D1GradientStopCollection_GUID = "2cd906a7-12e2-11dc-9fed-001143a055f9"
  IID_ID2D1GradientStopCollection = LibC::GUID.new(0x2cd906a7_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
  struct ID2D1GradientStopCollection
    lpVtbl : ID2D1GradientStopCollectionVTbl*
  end

  struct ID2D1BrushVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    set_opacity : UInt64
    set_transform : UInt64
    get_opacity : UInt64
    get_transform : UInt64
  end

  ID2D1Brush_GUID = "2cd906a8-12e2-11dc-9fed-001143a055f9"
  IID_ID2D1Brush = LibC::GUID.new(0x2cd906a8_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
  struct ID2D1Brush
    lpVtbl : ID2D1BrushVTbl*
  end

  struct ID2D1BitmapBrushVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    set_opacity : UInt64
    set_transform : UInt64
    get_opacity : UInt64
    get_transform : UInt64
    set_extend_mode_x : UInt64
    set_extend_mode_y : UInt64
    set_interpolation_mode : UInt64
    set_bitmap : UInt64
    get_extend_mode_x : UInt64
    get_extend_mode_y : UInt64
    get_interpolation_mode : UInt64
    get_bitmap : UInt64
  end

  ID2D1BitmapBrush_GUID = "2cd906aa-12e2-11dc-9fed-001143a055f9"
  IID_ID2D1BitmapBrush = LibC::GUID.new(0x2cd906aa_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
  struct ID2D1BitmapBrush
    lpVtbl : ID2D1BitmapBrushVTbl*
  end

  struct ID2D1SolidColorBrushVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    set_opacity : UInt64
    set_transform : UInt64
    get_opacity : UInt64
    get_transform : UInt64
    set_color : UInt64
    get_color : UInt64
  end

  ID2D1SolidColorBrush_GUID = "2cd906a9-12e2-11dc-9fed-001143a055f9"
  IID_ID2D1SolidColorBrush = LibC::GUID.new(0x2cd906a9_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
  struct ID2D1SolidColorBrush
    lpVtbl : ID2D1SolidColorBrushVTbl*
  end

  struct ID2D1LinearGradientBrushVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    set_opacity : UInt64
    set_transform : UInt64
    get_opacity : UInt64
    get_transform : UInt64
    set_start_point : UInt64
    set_end_point : UInt64
    get_start_point : UInt64
    get_end_point : UInt64
    get_gradient_stop_collection : UInt64
  end

  ID2D1LinearGradientBrush_GUID = "2cd906ab-12e2-11dc-9fed-001143a055f9"
  IID_ID2D1LinearGradientBrush = LibC::GUID.new(0x2cd906ab_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
  struct ID2D1LinearGradientBrush
    lpVtbl : ID2D1LinearGradientBrushVTbl*
  end

  struct ID2D1RadialGradientBrushVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    set_opacity : UInt64
    set_transform : UInt64
    get_opacity : UInt64
    get_transform : UInt64
    set_center : UInt64
    set_gradient_origin_offset : UInt64
    set_radius_x : UInt64
    set_radius_y : UInt64
    get_center : UInt64
    get_gradient_origin_offset : UInt64
    get_radius_x : UInt64
    get_radius_y : UInt64
    get_gradient_stop_collection : UInt64
  end

  ID2D1RadialGradientBrush_GUID = "2cd906ac-12e2-11dc-9fed-001143a055f9"
  IID_ID2D1RadialGradientBrush = LibC::GUID.new(0x2cd906ac_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
  struct ID2D1RadialGradientBrush
    lpVtbl : ID2D1RadialGradientBrushVTbl*
  end

  struct ID2D1StrokeStyleVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    get_start_cap : UInt64
    get_end_cap : UInt64
    get_dash_cap : UInt64
    get_miter_limit : UInt64
    get_line_join : UInt64
    get_dash_offset : UInt64
    get_dash_style : UInt64
    get_dashes_count : UInt64
    get_dashes : UInt64
  end

  ID2D1StrokeStyle_GUID = "2cd9069d-12e2-11dc-9fed-001143a055f9"
  IID_ID2D1StrokeStyle = LibC::GUID.new(0x2cd9069d_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
  struct ID2D1StrokeStyle
    lpVtbl : ID2D1StrokeStyleVTbl*
  end

  struct ID2D1GeometryVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    get_bounds : UInt64
    get_widened_bounds : UInt64
    stroke_contains_point : UInt64
    fill_contains_point : UInt64
    compare_with_geometry : UInt64
    simplify : UInt64
    tessellate : UInt64
    combine_with_geometry : UInt64
    outline : UInt64
    compute_area : UInt64
    compute_length : UInt64
    compute_point_at_length : UInt64
    widen : UInt64
  end

  ID2D1Geometry_GUID = "2cd906a1-12e2-11dc-9fed-001143a055f9"
  IID_ID2D1Geometry = LibC::GUID.new(0x2cd906a1_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
  struct ID2D1Geometry
    lpVtbl : ID2D1GeometryVTbl*
  end

  struct ID2D1RectangleGeometryVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    get_bounds : UInt64
    get_widened_bounds : UInt64
    stroke_contains_point : UInt64
    fill_contains_point : UInt64
    compare_with_geometry : UInt64
    simplify : UInt64
    tessellate : UInt64
    combine_with_geometry : UInt64
    outline : UInt64
    compute_area : UInt64
    compute_length : UInt64
    compute_point_at_length : UInt64
    widen : UInt64
    get_rect : UInt64
  end

  ID2D1RectangleGeometry_GUID = "2cd906a2-12e2-11dc-9fed-001143a055f9"
  IID_ID2D1RectangleGeometry = LibC::GUID.new(0x2cd906a2_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
  struct ID2D1RectangleGeometry
    lpVtbl : ID2D1RectangleGeometryVTbl*
  end

  struct ID2D1RoundedRectangleGeometryVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    get_bounds : UInt64
    get_widened_bounds : UInt64
    stroke_contains_point : UInt64
    fill_contains_point : UInt64
    compare_with_geometry : UInt64
    simplify : UInt64
    tessellate : UInt64
    combine_with_geometry : UInt64
    outline : UInt64
    compute_area : UInt64
    compute_length : UInt64
    compute_point_at_length : UInt64
    widen : UInt64
    get_rounded_rect : UInt64
  end

  ID2D1RoundedRectangleGeometry_GUID = "2cd906a3-12e2-11dc-9fed-001143a055f9"
  IID_ID2D1RoundedRectangleGeometry = LibC::GUID.new(0x2cd906a3_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
  struct ID2D1RoundedRectangleGeometry
    lpVtbl : ID2D1RoundedRectangleGeometryVTbl*
  end

  struct ID2D1EllipseGeometryVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    get_bounds : UInt64
    get_widened_bounds : UInt64
    stroke_contains_point : UInt64
    fill_contains_point : UInt64
    compare_with_geometry : UInt64
    simplify : UInt64
    tessellate : UInt64
    combine_with_geometry : UInt64
    outline : UInt64
    compute_area : UInt64
    compute_length : UInt64
    compute_point_at_length : UInt64
    widen : UInt64
    get_ellipse : UInt64
  end

  ID2D1EllipseGeometry_GUID = "2cd906a4-12e2-11dc-9fed-001143a055f9"
  IID_ID2D1EllipseGeometry = LibC::GUID.new(0x2cd906a4_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
  struct ID2D1EllipseGeometry
    lpVtbl : ID2D1EllipseGeometryVTbl*
  end

  struct ID2D1GeometryGroupVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    get_bounds : UInt64
    get_widened_bounds : UInt64
    stroke_contains_point : UInt64
    fill_contains_point : UInt64
    compare_with_geometry : UInt64
    simplify : UInt64
    tessellate : UInt64
    combine_with_geometry : UInt64
    outline : UInt64
    compute_area : UInt64
    compute_length : UInt64
    compute_point_at_length : UInt64
    widen : UInt64
    get_fill_mode : UInt64
    get_source_geometry_count : UInt64
    get_source_geometries : UInt64
  end

  ID2D1GeometryGroup_GUID = "2cd906a6-12e2-11dc-9fed-001143a055f9"
  IID_ID2D1GeometryGroup = LibC::GUID.new(0x2cd906a6_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
  struct ID2D1GeometryGroup
    lpVtbl : ID2D1GeometryGroupVTbl*
  end

  struct ID2D1TransformedGeometryVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    get_bounds : UInt64
    get_widened_bounds : UInt64
    stroke_contains_point : UInt64
    fill_contains_point : UInt64
    compare_with_geometry : UInt64
    simplify : UInt64
    tessellate : UInt64
    combine_with_geometry : UInt64
    outline : UInt64
    compute_area : UInt64
    compute_length : UInt64
    compute_point_at_length : UInt64
    widen : UInt64
    get_source_geometry : UInt64
    get_transform : UInt64
  end

  ID2D1TransformedGeometry_GUID = "2cd906bb-12e2-11dc-9fed-001143a055f9"
  IID_ID2D1TransformedGeometry = LibC::GUID.new(0x2cd906bb_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
  struct ID2D1TransformedGeometry
    lpVtbl : ID2D1TransformedGeometryVTbl*
  end

  struct ID2D1GeometrySinkVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_fill_mode : UInt64
    set_segment_flags : UInt64
    begin_figure : UInt64
    add_lines : UInt64
    add_beziers : UInt64
    end_figure : UInt64
    close : UInt64
    add_line : UInt64
    add_bezier : UInt64
    add_quadratic_bezier : UInt64
    add_quadratic_beziers : UInt64
    add_arc : UInt64
  end

  ID2D1GeometrySink_GUID = "2cd9069f-12e2-11dc-9fed-001143a055f9"
  IID_ID2D1GeometrySink = LibC::GUID.new(0x2cd9069f_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
  struct ID2D1GeometrySink
    lpVtbl : ID2D1GeometrySinkVTbl*
  end

  struct ID2D1TessellationSinkVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    add_triangles : UInt64
    close : UInt64
  end

  ID2D1TessellationSink_GUID = "2cd906c1-12e2-11dc-9fed-001143a055f9"
  IID_ID2D1TessellationSink = LibC::GUID.new(0x2cd906c1_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
  struct ID2D1TessellationSink
    lpVtbl : ID2D1TessellationSinkVTbl*
  end

  struct ID2D1PathGeometryVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    get_bounds : UInt64
    get_widened_bounds : UInt64
    stroke_contains_point : UInt64
    fill_contains_point : UInt64
    compare_with_geometry : UInt64
    simplify : UInt64
    tessellate : UInt64
    combine_with_geometry : UInt64
    outline : UInt64
    compute_area : UInt64
    compute_length : UInt64
    compute_point_at_length : UInt64
    widen : UInt64
    open : UInt64
    stream : UInt64
    get_segment_count : UInt64
    get_figure_count : UInt64
  end

  ID2D1PathGeometry_GUID = "2cd906a5-12e2-11dc-9fed-001143a055f9"
  IID_ID2D1PathGeometry = LibC::GUID.new(0x2cd906a5_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
  struct ID2D1PathGeometry
    lpVtbl : ID2D1PathGeometryVTbl*
  end

  struct ID2D1MeshVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    open : UInt64
  end

  ID2D1Mesh_GUID = "2cd906c2-12e2-11dc-9fed-001143a055f9"
  IID_ID2D1Mesh = LibC::GUID.new(0x2cd906c2_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
  struct ID2D1Mesh
    lpVtbl : ID2D1MeshVTbl*
  end

  struct ID2D1LayerVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    get_size : UInt64
  end

  ID2D1Layer_GUID = "2cd9069b-12e2-11dc-9fed-001143a055f9"
  IID_ID2D1Layer = LibC::GUID.new(0x2cd9069b_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
  struct ID2D1Layer
    lpVtbl : ID2D1LayerVTbl*
  end

  struct ID2D1DrawingStateBlockVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    get_description : UInt64
    set_description : UInt64
    set_text_rendering_params : UInt64
    get_text_rendering_params : UInt64
  end

  ID2D1DrawingStateBlock_GUID = "28506e39-ebf6-46a1-bb47-fd85565ab957"
  IID_ID2D1DrawingStateBlock = LibC::GUID.new(0x28506e39_u32, 0xebf6_u16, 0x46a1_u16, StaticArray[0xbb_u8, 0x47_u8, 0xfd_u8, 0x85_u8, 0x56_u8, 0x5a_u8, 0xb9_u8, 0x57_u8])
  struct ID2D1DrawingStateBlock
    lpVtbl : ID2D1DrawingStateBlockVTbl*
  end

  struct ID2D1RenderTargetVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    create_bitmap : UInt64
    create_bitmap_from_wic_bitmap : UInt64
    create_shared_bitmap : UInt64
    create_bitmap_brush : UInt64
    create_solid_color_brush : UInt64
    create_gradient_stop_collection : UInt64
    create_linear_gradient_brush : UInt64
    create_radial_gradient_brush : UInt64
    create_compatible_render_target : UInt64
    create_layer : UInt64
    create_mesh : UInt64
    draw_line : UInt64
    draw_rectangle : UInt64
    fill_rectangle : UInt64
    draw_rounded_rectangle : UInt64
    fill_rounded_rectangle : UInt64
    draw_ellipse : UInt64
    fill_ellipse : UInt64
    draw_geometry : UInt64
    fill_geometry : UInt64
    fill_mesh : UInt64
    fill_opacity_mask : UInt64
    draw_bitmap : UInt64
    draw_text : UInt64
    draw_text_layout : UInt64
    draw_glyph_run : UInt64
    set_transform : UInt64
    get_transform : UInt64
    set_antialias_mode : UInt64
    get_antialias_mode : UInt64
    set_text_antialias_mode : UInt64
    get_text_antialias_mode : UInt64
    set_text_rendering_params : UInt64
    get_text_rendering_params : UInt64
    set_tags : UInt64
    get_tags : UInt64
    push_layer : UInt64
    pop_layer : UInt64
    flush : UInt64
    save_drawing_state : UInt64
    restore_drawing_state : UInt64
    push_axis_aligned_clip : UInt64
    pop_axis_aligned_clip : UInt64
    clear : UInt64
    begin_draw : UInt64
    end_draw : UInt64
    get_pixel_format : UInt64
    set_dpi : UInt64
    get_dpi : UInt64
    get_size : UInt64
    get_pixel_size : UInt64
    get_maximum_bitmap_size : UInt64
    is_supported : UInt64
  end

  ID2D1RenderTarget_GUID = "2cd90694-12e2-11dc-9fed-001143a055f9"
  IID_ID2D1RenderTarget = LibC::GUID.new(0x2cd90694_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
  struct ID2D1RenderTarget
    lpVtbl : ID2D1RenderTargetVTbl*
  end

  struct ID2D1BitmapRenderTargetVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    create_bitmap : UInt64
    create_bitmap_from_wic_bitmap : UInt64
    create_shared_bitmap : UInt64
    create_bitmap_brush : UInt64
    create_solid_color_brush : UInt64
    create_gradient_stop_collection : UInt64
    create_linear_gradient_brush : UInt64
    create_radial_gradient_brush : UInt64
    create_compatible_render_target : UInt64
    create_layer : UInt64
    create_mesh : UInt64
    draw_line : UInt64
    draw_rectangle : UInt64
    fill_rectangle : UInt64
    draw_rounded_rectangle : UInt64
    fill_rounded_rectangle : UInt64
    draw_ellipse : UInt64
    fill_ellipse : UInt64
    draw_geometry : UInt64
    fill_geometry : UInt64
    fill_mesh : UInt64
    fill_opacity_mask : UInt64
    draw_bitmap : UInt64
    draw_text : UInt64
    draw_text_layout : UInt64
    draw_glyph_run : UInt64
    set_transform : UInt64
    get_transform : UInt64
    set_antialias_mode : UInt64
    get_antialias_mode : UInt64
    set_text_antialias_mode : UInt64
    get_text_antialias_mode : UInt64
    set_text_rendering_params : UInt64
    get_text_rendering_params : UInt64
    set_tags : UInt64
    get_tags : UInt64
    push_layer : UInt64
    pop_layer : UInt64
    flush : UInt64
    save_drawing_state : UInt64
    restore_drawing_state : UInt64
    push_axis_aligned_clip : UInt64
    pop_axis_aligned_clip : UInt64
    clear : UInt64
    begin_draw : UInt64
    end_draw : UInt64
    get_pixel_format : UInt64
    set_dpi : UInt64
    get_dpi : UInt64
    get_size : UInt64
    get_pixel_size : UInt64
    get_maximum_bitmap_size : UInt64
    is_supported : UInt64
    get_bitmap : UInt64
  end

  ID2D1BitmapRenderTarget_GUID = "2cd90695-12e2-11dc-9fed-001143a055f9"
  IID_ID2D1BitmapRenderTarget = LibC::GUID.new(0x2cd90695_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
  struct ID2D1BitmapRenderTarget
    lpVtbl : ID2D1BitmapRenderTargetVTbl*
  end

  struct ID2D1HwndRenderTargetVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    create_bitmap : UInt64
    create_bitmap_from_wic_bitmap : UInt64
    create_shared_bitmap : UInt64
    create_bitmap_brush : UInt64
    create_solid_color_brush : UInt64
    create_gradient_stop_collection : UInt64
    create_linear_gradient_brush : UInt64
    create_radial_gradient_brush : UInt64
    create_compatible_render_target : UInt64
    create_layer : UInt64
    create_mesh : UInt64
    draw_line : UInt64
    draw_rectangle : UInt64
    fill_rectangle : UInt64
    draw_rounded_rectangle : UInt64
    fill_rounded_rectangle : UInt64
    draw_ellipse : UInt64
    fill_ellipse : UInt64
    draw_geometry : UInt64
    fill_geometry : UInt64
    fill_mesh : UInt64
    fill_opacity_mask : UInt64
    draw_bitmap : UInt64
    draw_text : UInt64
    draw_text_layout : UInt64
    draw_glyph_run : UInt64
    set_transform : UInt64
    get_transform : UInt64
    set_antialias_mode : UInt64
    get_antialias_mode : UInt64
    set_text_antialias_mode : UInt64
    get_text_antialias_mode : UInt64
    set_text_rendering_params : UInt64
    get_text_rendering_params : UInt64
    set_tags : UInt64
    get_tags : UInt64
    push_layer : UInt64
    pop_layer : UInt64
    flush : UInt64
    save_drawing_state : UInt64
    restore_drawing_state : UInt64
    push_axis_aligned_clip : UInt64
    pop_axis_aligned_clip : UInt64
    clear : UInt64
    begin_draw : UInt64
    end_draw : UInt64
    get_pixel_format : UInt64
    set_dpi : UInt64
    get_dpi : UInt64
    get_size : UInt64
    get_pixel_size : UInt64
    get_maximum_bitmap_size : UInt64
    is_supported : UInt64
    check_window_state : UInt64
    resize : UInt64
    get_hwnd : UInt64
  end

  ID2D1HwndRenderTarget_GUID = "2cd90698-12e2-11dc-9fed-001143a055f9"
  IID_ID2D1HwndRenderTarget = LibC::GUID.new(0x2cd90698_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
  struct ID2D1HwndRenderTarget
    lpVtbl : ID2D1HwndRenderTargetVTbl*
  end

  struct ID2D1GdiInteropRenderTargetVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_dc : UInt64
    release_dc : UInt64
  end

  ID2D1GdiInteropRenderTarget_GUID = "e0db51c3-6f77-4bae-b3d5-e47509b35838"
  IID_ID2D1GdiInteropRenderTarget = LibC::GUID.new(0xe0db51c3_u32, 0x6f77_u16, 0x4bae_u16, StaticArray[0xb3_u8, 0xd5_u8, 0xe4_u8, 0x75_u8, 0x9_u8, 0xb3_u8, 0x58_u8, 0x38_u8])
  struct ID2D1GdiInteropRenderTarget
    lpVtbl : ID2D1GdiInteropRenderTargetVTbl*
  end

  struct ID2D1DCRenderTargetVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    create_bitmap : UInt64
    create_bitmap_from_wic_bitmap : UInt64
    create_shared_bitmap : UInt64
    create_bitmap_brush : UInt64
    create_solid_color_brush : UInt64
    create_gradient_stop_collection : UInt64
    create_linear_gradient_brush : UInt64
    create_radial_gradient_brush : UInt64
    create_compatible_render_target : UInt64
    create_layer : UInt64
    create_mesh : UInt64
    draw_line : UInt64
    draw_rectangle : UInt64
    fill_rectangle : UInt64
    draw_rounded_rectangle : UInt64
    fill_rounded_rectangle : UInt64
    draw_ellipse : UInt64
    fill_ellipse : UInt64
    draw_geometry : UInt64
    fill_geometry : UInt64
    fill_mesh : UInt64
    fill_opacity_mask : UInt64
    draw_bitmap : UInt64
    draw_text : UInt64
    draw_text_layout : UInt64
    draw_glyph_run : UInt64
    set_transform : UInt64
    get_transform : UInt64
    set_antialias_mode : UInt64
    get_antialias_mode : UInt64
    set_text_antialias_mode : UInt64
    get_text_antialias_mode : UInt64
    set_text_rendering_params : UInt64
    get_text_rendering_params : UInt64
    set_tags : UInt64
    get_tags : UInt64
    push_layer : UInt64
    pop_layer : UInt64
    flush : UInt64
    save_drawing_state : UInt64
    restore_drawing_state : UInt64
    push_axis_aligned_clip : UInt64
    pop_axis_aligned_clip : UInt64
    clear : UInt64
    begin_draw : UInt64
    end_draw : UInt64
    get_pixel_format : UInt64
    set_dpi : UInt64
    get_dpi : UInt64
    get_size : UInt64
    get_pixel_size : UInt64
    get_maximum_bitmap_size : UInt64
    is_supported : UInt64
    bind_dc : UInt64
  end

  ID2D1DCRenderTarget_GUID = "1c51bc64-de61-46fd-9899-63a5d8f03950"
  IID_ID2D1DCRenderTarget = LibC::GUID.new(0x1c51bc64_u32, 0xde61_u16, 0x46fd_u16, StaticArray[0x98_u8, 0x99_u8, 0x63_u8, 0xa5_u8, 0xd8_u8, 0xf0_u8, 0x39_u8, 0x50_u8])
  struct ID2D1DCRenderTarget
    lpVtbl : ID2D1DCRenderTargetVTbl*
  end

  struct ID2D1FactoryVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    reload_system_metrics : UInt64
    get_desktop_dpi : UInt64
    create_rectangle_geometry : UInt64
    create_rounded_rectangle_geometry : UInt64
    create_ellipse_geometry : UInt64
    create_geometry_group : UInt64
    create_transformed_geometry : UInt64
    create_path_geometry : UInt64
    create_stroke_style : UInt64
    create_drawing_state_block : UInt64
    create_wic_bitmap_render_target : UInt64
    create_hwnd_render_target : UInt64
    create_dxgi_surface_render_target : UInt64
    create_dc_render_target : UInt64
  end

  ID2D1Factory_GUID = "06152247-6f50-465a-9245-118bfd3b6007"
  IID_ID2D1Factory = LibC::GUID.new(0x6152247_u32, 0x6f50_u16, 0x465a_u16, StaticArray[0x92_u8, 0x45_u8, 0x11_u8, 0x8b_u8, 0xfd_u8, 0x3b_u8, 0x60_u8, 0x7_u8])
  struct ID2D1Factory
    lpVtbl : ID2D1FactoryVTbl*
  end

  struct ID2D1GdiMetafileSinkVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    process_record : UInt64
  end

  ID2D1GdiMetafileSink_GUID = "82237326-8111-4f7c-bcf4-b5c1175564fe"
  IID_ID2D1GdiMetafileSink = LibC::GUID.new(0x82237326_u32, 0x8111_u16, 0x4f7c_u16, StaticArray[0xbc_u8, 0xf4_u8, 0xb5_u8, 0xc1_u8, 0x17_u8, 0x55_u8, 0x64_u8, 0xfe_u8])
  struct ID2D1GdiMetafileSink
    lpVtbl : ID2D1GdiMetafileSinkVTbl*
  end

  struct ID2D1GdiMetafileVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    stream : UInt64
    get_bounds : UInt64
  end

  ID2D1GdiMetafile_GUID = "2f543dc3-cfc1-4211-864f-cfd91c6f3395"
  IID_ID2D1GdiMetafile = LibC::GUID.new(0x2f543dc3_u32, 0xcfc1_u16, 0x4211_u16, StaticArray[0x86_u8, 0x4f_u8, 0xcf_u8, 0xd9_u8, 0x1c_u8, 0x6f_u8, 0x33_u8, 0x95_u8])
  struct ID2D1GdiMetafile
    lpVtbl : ID2D1GdiMetafileVTbl*
  end

  struct ID2D1CommandSinkVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    begin_draw : UInt64
    end_draw : UInt64
    set_antialias_mode : UInt64
    set_tags : UInt64
    set_text_antialias_mode : UInt64
    set_text_rendering_params : UInt64
    set_transform : UInt64
    set_primitive_blend : UInt64
    set_unit_mode : UInt64
    clear : UInt64
    draw_glyph_run : UInt64
    draw_line : UInt64
    draw_geometry : UInt64
    draw_rectangle : UInt64
    draw_bitmap : UInt64
    draw_image : UInt64
    draw_gdi_metafile : UInt64
    fill_mesh : UInt64
    fill_opacity_mask : UInt64
    fill_geometry : UInt64
    fill_rectangle : UInt64
    push_axis_aligned_clip : UInt64
    push_layer : UInt64
    pop_axis_aligned_clip : UInt64
    pop_layer : UInt64
  end

  ID2D1CommandSink_GUID = "54d7898a-a061-40a7-bec7-e465bcba2c4f"
  IID_ID2D1CommandSink = LibC::GUID.new(0x54d7898a_u32, 0xa061_u16, 0x40a7_u16, StaticArray[0xbe_u8, 0xc7_u8, 0xe4_u8, 0x65_u8, 0xbc_u8, 0xba_u8, 0x2c_u8, 0x4f_u8])
  struct ID2D1CommandSink
    lpVtbl : ID2D1CommandSinkVTbl*
  end

  struct ID2D1CommandListVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    stream : UInt64
    close : UInt64
  end

  ID2D1CommandList_GUID = "b4f34a19-2383-4d76-94f6-ec343657c3dc"
  IID_ID2D1CommandList = LibC::GUID.new(0xb4f34a19_u32, 0x2383_u16, 0x4d76_u16, StaticArray[0x94_u8, 0xf6_u8, 0xec_u8, 0x34_u8, 0x36_u8, 0x57_u8, 0xc3_u8, 0xdc_u8])
  struct ID2D1CommandList
    lpVtbl : ID2D1CommandListVTbl*
  end

  struct ID2D1PrintControlVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    add_page : UInt64
    close : UInt64
  end

  ID2D1PrintControl_GUID = "2c1d867d-c290-41c8-ae7e-34a98702e9a5"
  IID_ID2D1PrintControl = LibC::GUID.new(0x2c1d867d_u32, 0xc290_u16, 0x41c8_u16, StaticArray[0xae_u8, 0x7e_u8, 0x34_u8, 0xa9_u8, 0x87_u8, 0x2_u8, 0xe9_u8, 0xa5_u8])
  struct ID2D1PrintControl
    lpVtbl : ID2D1PrintControlVTbl*
  end

  struct ID2D1ImageBrushVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    set_opacity : UInt64
    set_transform : UInt64
    get_opacity : UInt64
    get_transform : UInt64
    set_image : UInt64
    set_extend_mode_x : UInt64
    set_extend_mode_y : UInt64
    set_interpolation_mode : UInt64
    set_source_rectangle : UInt64
    get_image : UInt64
    get_extend_mode_x : UInt64
    get_extend_mode_y : UInt64
    get_interpolation_mode : UInt64
    get_source_rectangle : UInt64
  end

  ID2D1ImageBrush_GUID = "fe9e984d-3f95-407c-b5db-cb94d4e8f87c"
  IID_ID2D1ImageBrush = LibC::GUID.new(0xfe9e984d_u32, 0x3f95_u16, 0x407c_u16, StaticArray[0xb5_u8, 0xdb_u8, 0xcb_u8, 0x94_u8, 0xd4_u8, 0xe8_u8, 0xf8_u8, 0x7c_u8])
  struct ID2D1ImageBrush
    lpVtbl : ID2D1ImageBrushVTbl*
  end

  struct ID2D1BitmapBrush1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    set_opacity : UInt64
    set_transform : UInt64
    get_opacity : UInt64
    get_transform : UInt64
    set_extend_mode_x : UInt64
    set_extend_mode_y : UInt64
    set_interpolation_mode : UInt64
    set_bitmap : UInt64
    get_extend_mode_x : UInt64
    get_extend_mode_y : UInt64
    get_interpolation_mode : UInt64
    get_bitmap : UInt64
    set_interpolation_mode1 : UInt64
    get_interpolation_mode1 : UInt64
  end

  ID2D1BitmapBrush1_GUID = "41343a53-e41a-49a2-91cd-21793bbb62e5"
  IID_ID2D1BitmapBrush1 = LibC::GUID.new(0x41343a53_u32, 0xe41a_u16, 0x49a2_u16, StaticArray[0x91_u8, 0xcd_u8, 0x21_u8, 0x79_u8, 0x3b_u8, 0xbb_u8, 0x62_u8, 0xe5_u8])
  struct ID2D1BitmapBrush1
    lpVtbl : ID2D1BitmapBrush1VTbl*
  end

  struct ID2D1StrokeStyle1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    get_start_cap : UInt64
    get_end_cap : UInt64
    get_dash_cap : UInt64
    get_miter_limit : UInt64
    get_line_join : UInt64
    get_dash_offset : UInt64
    get_dash_style : UInt64
    get_dashes_count : UInt64
    get_dashes : UInt64
    get_stroke_transform_type : UInt64
  end

  ID2D1StrokeStyle1_GUID = "10a72a66-e91c-43f4-993f-ddf4b82b0b4a"
  IID_ID2D1StrokeStyle1 = LibC::GUID.new(0x10a72a66_u32, 0xe91c_u16, 0x43f4_u16, StaticArray[0x99_u8, 0x3f_u8, 0xdd_u8, 0xf4_u8, 0xb8_u8, 0x2b_u8, 0xb_u8, 0x4a_u8])
  struct ID2D1StrokeStyle1
    lpVtbl : ID2D1StrokeStyle1VTbl*
  end

  struct ID2D1PathGeometry1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    get_bounds : UInt64
    get_widened_bounds : UInt64
    stroke_contains_point : UInt64
    fill_contains_point : UInt64
    compare_with_geometry : UInt64
    simplify : UInt64
    tessellate : UInt64
    combine_with_geometry : UInt64
    outline : UInt64
    compute_area : UInt64
    compute_length : UInt64
    compute_point_at_length : UInt64
    widen : UInt64
    open : UInt64
    stream : UInt64
    get_segment_count : UInt64
    get_figure_count : UInt64
    compute_point_and_segment_at_length : UInt64
  end

  ID2D1PathGeometry1_GUID = "62baa2d2-ab54-41b7-b872-787e0106a421"
  IID_ID2D1PathGeometry1 = LibC::GUID.new(0x62baa2d2_u32, 0xab54_u16, 0x41b7_u16, StaticArray[0xb8_u8, 0x72_u8, 0x78_u8, 0x7e_u8, 0x1_u8, 0x6_u8, 0xa4_u8, 0x21_u8])
  struct ID2D1PathGeometry1
    lpVtbl : ID2D1PathGeometry1VTbl*
  end

  struct ID2D1PropertiesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_property_count : UInt64
    get_property_name : UInt64
    get_property_name_length : UInt64
    get_type : UInt64
    get_property_index : UInt64
    set_value_by_name : UInt64
    set_value : UInt64
    get_value_by_name : UInt64
    get_value : UInt64
    get_value_size : UInt64
    get_sub_properties : UInt64
  end

  ID2D1Properties_GUID = "483473d7-cd46-4f9d-9d3a-3112aa80159d"
  IID_ID2D1Properties = LibC::GUID.new(0x483473d7_u32, 0xcd46_u16, 0x4f9d_u16, StaticArray[0x9d_u8, 0x3a_u8, 0x31_u8, 0x12_u8, 0xaa_u8, 0x80_u8, 0x15_u8, 0x9d_u8])
  struct ID2D1Properties
    lpVtbl : ID2D1PropertiesVTbl*
  end

  struct ID2D1EffectVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_property_count : UInt64
    get_property_name : UInt64
    get_property_name_length : UInt64
    get_type : UInt64
    get_property_index : UInt64
    set_value_by_name : UInt64
    set_value : UInt64
    get_value_by_name : UInt64
    get_value : UInt64
    get_value_size : UInt64
    get_sub_properties : UInt64
    set_input : UInt64
    set_input_count : UInt64
    get_input : UInt64
    get_input_count : UInt64
    get_output : UInt64
  end

  ID2D1Effect_GUID = "28211a43-7d89-476f-8181-2d6159b220ad"
  IID_ID2D1Effect = LibC::GUID.new(0x28211a43_u32, 0x7d89_u16, 0x476f_u16, StaticArray[0x81_u8, 0x81_u8, 0x2d_u8, 0x61_u8, 0x59_u8, 0xb2_u8, 0x20_u8, 0xad_u8])
  struct ID2D1Effect
    lpVtbl : ID2D1EffectVTbl*
  end

  struct ID2D1Bitmap1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    get_size : UInt64
    get_pixel_size : UInt64
    get_pixel_format : UInt64
    get_dpi : UInt64
    copy_from_bitmap : UInt64
    copy_from_render_target : UInt64
    copy_from_memory : UInt64
    get_color_context : UInt64
    get_options : UInt64
    get_surface : UInt64
    map : UInt64
    unmap : UInt64
  end

  ID2D1Bitmap1_GUID = "a898a84c-3873-4588-b08b-ebbf978df041"
  IID_ID2D1Bitmap1 = LibC::GUID.new(0xa898a84c_u32, 0x3873_u16, 0x4588_u16, StaticArray[0xb0_u8, 0x8b_u8, 0xeb_u8, 0xbf_u8, 0x97_u8, 0x8d_u8, 0xf0_u8, 0x41_u8])
  struct ID2D1Bitmap1
    lpVtbl : ID2D1Bitmap1VTbl*
  end

  struct ID2D1ColorContextVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    get_color_space : UInt64
    get_profile_size : UInt64
    get_profile : UInt64
  end

  ID2D1ColorContext_GUID = "1c4820bb-5771-4518-a581-2fe4dd0ec657"
  IID_ID2D1ColorContext = LibC::GUID.new(0x1c4820bb_u32, 0x5771_u16, 0x4518_u16, StaticArray[0xa5_u8, 0x81_u8, 0x2f_u8, 0xe4_u8, 0xdd_u8, 0xe_u8, 0xc6_u8, 0x57_u8])
  struct ID2D1ColorContext
    lpVtbl : ID2D1ColorContextVTbl*
  end

  struct ID2D1GradientStopCollection1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    get_gradient_stop_count : UInt64
    get_gradient_stops : UInt64
    get_color_interpolation_gamma : UInt64
    get_extend_mode : UInt64
    get_gradient_stops1 : UInt64
    get_pre_interpolation_space : UInt64
    get_post_interpolation_space : UInt64
    get_buffer_precision : UInt64
    get_color_interpolation_mode : UInt64
  end

  ID2D1GradientStopCollection1_GUID = "ae1572f4-5dd0-4777-998b-9279472ae63b"
  IID_ID2D1GradientStopCollection1 = LibC::GUID.new(0xae1572f4_u32, 0x5dd0_u16, 0x4777_u16, StaticArray[0x99_u8, 0x8b_u8, 0x92_u8, 0x79_u8, 0x47_u8, 0x2a_u8, 0xe6_u8, 0x3b_u8])
  struct ID2D1GradientStopCollection1
    lpVtbl : ID2D1GradientStopCollection1VTbl*
  end

  struct ID2D1DrawingStateBlock1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    get_description : UInt64
    set_description : UInt64
    set_text_rendering_params : UInt64
    get_text_rendering_params : UInt64
    get_description2 : UInt64
    set_description2 : UInt64
  end

  ID2D1DrawingStateBlock1_GUID = "689f1f85-c72e-4e33-8f19-85754efd5ace"
  IID_ID2D1DrawingStateBlock1 = LibC::GUID.new(0x689f1f85_u32, 0xc72e_u16, 0x4e33_u16, StaticArray[0x8f_u8, 0x19_u8, 0x85_u8, 0x75_u8, 0x4e_u8, 0xfd_u8, 0x5a_u8, 0xce_u8])
  struct ID2D1DrawingStateBlock1
    lpVtbl : ID2D1DrawingStateBlock1VTbl*
  end

  struct ID2D1DeviceContextVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    create_bitmap : UInt64
    create_bitmap_from_wic_bitmap : UInt64
    create_shared_bitmap : UInt64
    create_bitmap_brush : UInt64
    create_solid_color_brush : UInt64
    create_gradient_stop_collection : UInt64
    create_linear_gradient_brush : UInt64
    create_radial_gradient_brush : UInt64
    create_compatible_render_target : UInt64
    create_layer : UInt64
    create_mesh : UInt64
    draw_line : UInt64
    draw_rectangle : UInt64
    fill_rectangle : UInt64
    draw_rounded_rectangle : UInt64
    fill_rounded_rectangle : UInt64
    draw_ellipse : UInt64
    fill_ellipse : UInt64
    draw_geometry : UInt64
    fill_geometry : UInt64
    fill_mesh : UInt64
    fill_opacity_mask : UInt64
    draw_bitmap : UInt64
    draw_text : UInt64
    draw_text_layout : UInt64
    draw_glyph_run : UInt64
    set_transform : UInt64
    get_transform : UInt64
    set_antialias_mode : UInt64
    get_antialias_mode : UInt64
    set_text_antialias_mode : UInt64
    get_text_antialias_mode : UInt64
    set_text_rendering_params : UInt64
    get_text_rendering_params : UInt64
    set_tags : UInt64
    get_tags : UInt64
    push_layer : UInt64
    pop_layer : UInt64
    flush : UInt64
    save_drawing_state : UInt64
    restore_drawing_state : UInt64
    push_axis_aligned_clip : UInt64
    pop_axis_aligned_clip : UInt64
    clear : UInt64
    begin_draw : UInt64
    end_draw : UInt64
    get_pixel_format : UInt64
    set_dpi : UInt64
    get_dpi : UInt64
    get_size : UInt64
    get_pixel_size : UInt64
    get_maximum_bitmap_size : UInt64
    is_supported : UInt64
    create_bitmap2 : UInt64
    create_bitmap_from_wic_bitmap2 : UInt64
    create_color_context : UInt64
    create_color_context_from_filename : UInt64
    create_color_context_from_wic_color_context : UInt64
    create_bitmap_from_dxgi_surface : UInt64
    create_effect : UInt64
    create_gradient_stop_collection2 : UInt64
    create_image_brush : UInt64
    create_bitmap_brush2 : UInt64
    create_command_list : UInt64
    is_dxgi_format_supported : UInt64
    is_buffer_precision_supported : UInt64
    get_image_local_bounds : UInt64
    get_image_world_bounds : UInt64
    get_glyph_run_world_bounds : UInt64
    get_device : UInt64
    set_target : UInt64
    get_target : UInt64
    set_rendering_controls : UInt64
    get_rendering_controls : UInt64
    set_primitive_blend : UInt64
    get_primitive_blend : UInt64
    set_unit_mode : UInt64
    get_unit_mode : UInt64
    draw_glyph_run2 : UInt64
    draw_image : UInt64
    draw_gdi_metafile : UInt64
    draw_bitmap2 : UInt64
    push_layer2 : UInt64
    invalidate_effect_input_rectangle : UInt64
    get_effect_invalid_rectangle_count : UInt64
    get_effect_invalid_rectangles : UInt64
    get_effect_required_input_rectangles : UInt64
    fill_opacity_mask2 : UInt64
  end

  ID2D1DeviceContext_GUID = "e8f7fe7a-191c-466d-ad95-975678bda998"
  IID_ID2D1DeviceContext = LibC::GUID.new(0xe8f7fe7a_u32, 0x191c_u16, 0x466d_u16, StaticArray[0xad_u8, 0x95_u8, 0x97_u8, 0x56_u8, 0x78_u8, 0xbd_u8, 0xa9_u8, 0x98_u8])
  struct ID2D1DeviceContext
    lpVtbl : ID2D1DeviceContextVTbl*
  end

  struct ID2D1DeviceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    create_device_context : UInt64
    create_print_control : UInt64
    set_maximum_texture_memory : UInt64
    get_maximum_texture_memory : UInt64
    clear_resources : UInt64
  end

  ID2D1Device_GUID = "47dd575d-ac05-4cdd-8049-9b02cd16f44c"
  IID_ID2D1Device = LibC::GUID.new(0x47dd575d_u32, 0xac05_u16, 0x4cdd_u16, StaticArray[0x80_u8, 0x49_u8, 0x9b_u8, 0x2_u8, 0xcd_u8, 0x16_u8, 0xf4_u8, 0x4c_u8])
  struct ID2D1Device
    lpVtbl : ID2D1DeviceVTbl*
  end

  struct ID2D1Factory1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    reload_system_metrics : UInt64
    get_desktop_dpi : UInt64
    create_rectangle_geometry : UInt64
    create_rounded_rectangle_geometry : UInt64
    create_ellipse_geometry : UInt64
    create_geometry_group : UInt64
    create_transformed_geometry : UInt64
    create_path_geometry : UInt64
    create_stroke_style : UInt64
    create_drawing_state_block : UInt64
    create_wic_bitmap_render_target : UInt64
    create_hwnd_render_target : UInt64
    create_dxgi_surface_render_target : UInt64
    create_dc_render_target : UInt64
    create_device : UInt64
    create_stroke_style2 : UInt64
    create_path_geometry2 : UInt64
    create_drawing_state_block2 : UInt64
    create_gdi_metafile : UInt64
    register_effect_from_stream : UInt64
    register_effect_from_string : UInt64
    unregister_effect : UInt64
    get_registered_effects : UInt64
    get_effect_properties : UInt64
  end

  ID2D1Factory1_GUID = "bb12d362-daee-4b9a-aa1d-14ba401cfa1f"
  IID_ID2D1Factory1 = LibC::GUID.new(0xbb12d362_u32, 0xdaee_u16, 0x4b9a_u16, StaticArray[0xaa_u8, 0x1d_u8, 0x14_u8, 0xba_u8, 0x40_u8, 0x1c_u8, 0xfa_u8, 0x1f_u8])
  struct ID2D1Factory1
    lpVtbl : ID2D1Factory1VTbl*
  end

  struct ID2D1MultithreadVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_multithread_protected : UInt64
    enter : UInt64
    leave : UInt64
  end

  ID2D1Multithread_GUID = "31e6e7bc-e0ff-4d46-8c64-a0a8c41c15d3"
  IID_ID2D1Multithread = LibC::GUID.new(0x31e6e7bc_u32, 0xe0ff_u16, 0x4d46_u16, StaticArray[0x8c_u8, 0x64_u8, 0xa0_u8, 0xa8_u8, 0xc4_u8, 0x1c_u8, 0x15_u8, 0xd3_u8])
  struct ID2D1Multithread
    lpVtbl : ID2D1MultithreadVTbl*
  end

  struct ID2D1VertexBufferVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    map : UInt64
    unmap : UInt64
  end

  ID2D1VertexBuffer_GUID = "9b8b1336-00a5-4668-92b7-ced5d8bf9b7b"
  IID_ID2D1VertexBuffer = LibC::GUID.new(0x9b8b1336_u32, 0xa5_u16, 0x4668_u16, StaticArray[0x92_u8, 0xb7_u8, 0xce_u8, 0xd5_u8, 0xd8_u8, 0xbf_u8, 0x9b_u8, 0x7b_u8])
  struct ID2D1VertexBuffer
    lpVtbl : ID2D1VertexBufferVTbl*
  end

  struct ID2D1ResourceTextureVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    update : UInt64
  end

  ID2D1ResourceTexture_GUID = "688d15c3-02b0-438d-b13a-d1b44c32c39a"
  IID_ID2D1ResourceTexture = LibC::GUID.new(0x688d15c3_u32, 0x2b0_u16, 0x438d_u16, StaticArray[0xb1_u8, 0x3a_u8, 0xd1_u8, 0xb4_u8, 0x4c_u8, 0x32_u8, 0xc3_u8, 0x9a_u8])
  struct ID2D1ResourceTexture
    lpVtbl : ID2D1ResourceTextureVTbl*
  end

  struct ID2D1RenderInfoVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_input_description : UInt64
    set_output_buffer : UInt64
    set_cached : UInt64
    set_instruction_count_hint : UInt64
  end

  ID2D1RenderInfo_GUID = "519ae1bd-d19a-420d-b849-364f594776b7"
  IID_ID2D1RenderInfo = LibC::GUID.new(0x519ae1bd_u32, 0xd19a_u16, 0x420d_u16, StaticArray[0xb8_u8, 0x49_u8, 0x36_u8, 0x4f_u8, 0x59_u8, 0x47_u8, 0x76_u8, 0xb7_u8])
  struct ID2D1RenderInfo
    lpVtbl : ID2D1RenderInfoVTbl*
  end

  struct ID2D1DrawInfoVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_input_description : UInt64
    set_output_buffer : UInt64
    set_cached : UInt64
    set_instruction_count_hint : UInt64
    set_pixel_shader_constant_buffer : UInt64
    set_resource_texture : UInt64
    set_vertex_shader_constant_buffer : UInt64
    set_pixel_shader : UInt64
    set_vertex_processing : UInt64
  end

  ID2D1DrawInfo_GUID = "693ce632-7f2f-45de-93fe-18d88b37aa21"
  IID_ID2D1DrawInfo = LibC::GUID.new(0x693ce632_u32, 0x7f2f_u16, 0x45de_u16, StaticArray[0x93_u8, 0xfe_u8, 0x18_u8, 0xd8_u8, 0x8b_u8, 0x37_u8, 0xaa_u8, 0x21_u8])
  struct ID2D1DrawInfo
    lpVtbl : ID2D1DrawInfoVTbl*
  end

  struct ID2D1ComputeInfoVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_input_description : UInt64
    set_output_buffer : UInt64
    set_cached : UInt64
    set_instruction_count_hint : UInt64
    set_compute_shader_constant_buffer : UInt64
    set_compute_shader : UInt64
    set_resource_texture : UInt64
  end

  ID2D1ComputeInfo_GUID = "5598b14b-9fd7-48b7-9bdb-8f0964eb38bc"
  IID_ID2D1ComputeInfo = LibC::GUID.new(0x5598b14b_u32, 0x9fd7_u16, 0x48b7_u16, StaticArray[0x9b_u8, 0xdb_u8, 0x8f_u8, 0x9_u8, 0x64_u8, 0xeb_u8, 0x38_u8, 0xbc_u8])
  struct ID2D1ComputeInfo
    lpVtbl : ID2D1ComputeInfoVTbl*
  end

  struct ID2D1TransformNodeVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_input_count : UInt64
  end

  ID2D1TransformNode_GUID = "b2efe1e7-729f-4102-949f-505fa21bf666"
  IID_ID2D1TransformNode = LibC::GUID.new(0xb2efe1e7_u32, 0x729f_u16, 0x4102_u16, StaticArray[0x94_u8, 0x9f_u8, 0x50_u8, 0x5f_u8, 0xa2_u8, 0x1b_u8, 0xf6_u8, 0x66_u8])
  struct ID2D1TransformNode
    lpVtbl : ID2D1TransformNodeVTbl*
  end

  struct ID2D1TransformGraphVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_input_count : UInt64
    set_single_transform_node : UInt64
    add_node : UInt64
    remove_node : UInt64
    set_output_node : UInt64
    connect_node : UInt64
    connect_to_effect_input : UInt64
    clear : UInt64
    set_passthrough_graph : UInt64
  end

  ID2D1TransformGraph_GUID = "13d29038-c3e6-4034-9081-13b53a417992"
  IID_ID2D1TransformGraph = LibC::GUID.new(0x13d29038_u32, 0xc3e6_u16, 0x4034_u16, StaticArray[0x90_u8, 0x81_u8, 0x13_u8, 0xb5_u8, 0x3a_u8, 0x41_u8, 0x79_u8, 0x92_u8])
  struct ID2D1TransformGraph
    lpVtbl : ID2D1TransformGraphVTbl*
  end

  struct ID2D1TransformVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_input_count : UInt64
    map_output_rect_to_input_rects : UInt64
    map_input_rects_to_output_rect : UInt64
    map_invalid_rect : UInt64
  end

  ID2D1Transform_GUID = "ef1a287d-342a-4f76-8fdb-da0d6ea9f92b"
  IID_ID2D1Transform = LibC::GUID.new(0xef1a287d_u32, 0x342a_u16, 0x4f76_u16, StaticArray[0x8f_u8, 0xdb_u8, 0xda_u8, 0xd_u8, 0x6e_u8, 0xa9_u8, 0xf9_u8, 0x2b_u8])
  struct ID2D1Transform
    lpVtbl : ID2D1TransformVTbl*
  end

  struct ID2D1DrawTransformVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_input_count : UInt64
    map_output_rect_to_input_rects : UInt64
    map_input_rects_to_output_rect : UInt64
    map_invalid_rect : UInt64
    set_draw_info : UInt64
  end

  ID2D1DrawTransform_GUID = "36bfdcb6-9739-435d-a30d-a653beff6a6f"
  IID_ID2D1DrawTransform = LibC::GUID.new(0x36bfdcb6_u32, 0x9739_u16, 0x435d_u16, StaticArray[0xa3_u8, 0xd_u8, 0xa6_u8, 0x53_u8, 0xbe_u8, 0xff_u8, 0x6a_u8, 0x6f_u8])
  struct ID2D1DrawTransform
    lpVtbl : ID2D1DrawTransformVTbl*
  end

  struct ID2D1ComputeTransformVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_input_count : UInt64
    map_output_rect_to_input_rects : UInt64
    map_input_rects_to_output_rect : UInt64
    map_invalid_rect : UInt64
    set_compute_info : UInt64
    calculate_threadgroups : UInt64
  end

  ID2D1ComputeTransform_GUID = "0d85573c-01e3-4f7d-bfd9-0d60608bf3c3"
  IID_ID2D1ComputeTransform = LibC::GUID.new(0xd85573c_u32, 0x1e3_u16, 0x4f7d_u16, StaticArray[0xbf_u8, 0xd9_u8, 0xd_u8, 0x60_u8, 0x60_u8, 0x8b_u8, 0xf3_u8, 0xc3_u8])
  struct ID2D1ComputeTransform
    lpVtbl : ID2D1ComputeTransformVTbl*
  end

  struct ID2D1AnalysisTransformVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    process_analysis_results : UInt64
  end

  ID2D1AnalysisTransform_GUID = "0359dc30-95e6-4568-9055-27720d130e93"
  IID_ID2D1AnalysisTransform = LibC::GUID.new(0x359dc30_u32, 0x95e6_u16, 0x4568_u16, StaticArray[0x90_u8, 0x55_u8, 0x27_u8, 0x72_u8, 0xd_u8, 0x13_u8, 0xe_u8, 0x93_u8])
  struct ID2D1AnalysisTransform
    lpVtbl : ID2D1AnalysisTransformVTbl*
  end

  struct ID2D1SourceTransformVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_input_count : UInt64
    map_output_rect_to_input_rects : UInt64
    map_input_rects_to_output_rect : UInt64
    map_invalid_rect : UInt64
    set_render_info : UInt64
    draw : UInt64
  end

  ID2D1SourceTransform_GUID = "db1800dd-0c34-4cf9-be90-31cc0a5653e1"
  IID_ID2D1SourceTransform = LibC::GUID.new(0xdb1800dd_u32, 0xc34_u16, 0x4cf9_u16, StaticArray[0xbe_u8, 0x90_u8, 0x31_u8, 0xcc_u8, 0xa_u8, 0x56_u8, 0x53_u8, 0xe1_u8])
  struct ID2D1SourceTransform
    lpVtbl : ID2D1SourceTransformVTbl*
  end

  struct ID2D1ConcreteTransformVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_input_count : UInt64
    set_output_buffer : UInt64
    set_cached : UInt64
  end

  ID2D1ConcreteTransform_GUID = "1a799d8a-69f7-4e4c-9fed-437ccc6684cc"
  IID_ID2D1ConcreteTransform = LibC::GUID.new(0x1a799d8a_u32, 0x69f7_u16, 0x4e4c_u16, StaticArray[0x9f_u8, 0xed_u8, 0x43_u8, 0x7c_u8, 0xcc_u8, 0x66_u8, 0x84_u8, 0xcc_u8])
  struct ID2D1ConcreteTransform
    lpVtbl : ID2D1ConcreteTransformVTbl*
  end

  struct ID2D1BlendTransformVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_input_count : UInt64
    set_output_buffer : UInt64
    set_cached : UInt64
    set_description : UInt64
    get_description : UInt64
  end

  ID2D1BlendTransform_GUID = "63ac0b32-ba44-450f-8806-7f4ca1ff2f1b"
  IID_ID2D1BlendTransform = LibC::GUID.new(0x63ac0b32_u32, 0xba44_u16, 0x450f_u16, StaticArray[0x88_u8, 0x6_u8, 0x7f_u8, 0x4c_u8, 0xa1_u8, 0xff_u8, 0x2f_u8, 0x1b_u8])
  struct ID2D1BlendTransform
    lpVtbl : ID2D1BlendTransformVTbl*
  end

  struct ID2D1BorderTransformVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_input_count : UInt64
    set_output_buffer : UInt64
    set_cached : UInt64
    set_extend_mode_x : UInt64
    set_extend_mode_y : UInt64
    get_extend_mode_x : UInt64
    get_extend_mode_y : UInt64
  end

  ID2D1BorderTransform_GUID = "4998735c-3a19-473c-9781-656847e3a347"
  IID_ID2D1BorderTransform = LibC::GUID.new(0x4998735c_u32, 0x3a19_u16, 0x473c_u16, StaticArray[0x97_u8, 0x81_u8, 0x65_u8, 0x68_u8, 0x47_u8, 0xe3_u8, 0xa3_u8, 0x47_u8])
  struct ID2D1BorderTransform
    lpVtbl : ID2D1BorderTransformVTbl*
  end

  struct ID2D1OffsetTransformVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_input_count : UInt64
    set_offset : UInt64
    get_offset : UInt64
  end

  ID2D1OffsetTransform_GUID = "3fe6adea-7643-4f53-bd14-a0ce63f24042"
  IID_ID2D1OffsetTransform = LibC::GUID.new(0x3fe6adea_u32, 0x7643_u16, 0x4f53_u16, StaticArray[0xbd_u8, 0x14_u8, 0xa0_u8, 0xce_u8, 0x63_u8, 0xf2_u8, 0x40_u8, 0x42_u8])
  struct ID2D1OffsetTransform
    lpVtbl : ID2D1OffsetTransformVTbl*
  end

  struct ID2D1BoundsAdjustmentTransformVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_input_count : UInt64
    set_output_bounds : UInt64
    get_output_bounds : UInt64
  end

  ID2D1BoundsAdjustmentTransform_GUID = "90f732e2-5092-4606-a819-8651970baccd"
  IID_ID2D1BoundsAdjustmentTransform = LibC::GUID.new(0x90f732e2_u32, 0x5092_u16, 0x4606_u16, StaticArray[0xa8_u8, 0x19_u8, 0x86_u8, 0x51_u8, 0x97_u8, 0xb_u8, 0xac_u8, 0xcd_u8])
  struct ID2D1BoundsAdjustmentTransform
    lpVtbl : ID2D1BoundsAdjustmentTransformVTbl*
  end

  struct ID2D1EffectImplVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    prepare_for_render : UInt64
    set_graph : UInt64
  end

  ID2D1EffectImpl_GUID = "a248fd3f-3e6c-4e63-9f03-7f68ecc91db9"
  IID_ID2D1EffectImpl = LibC::GUID.new(0xa248fd3f_u32, 0x3e6c_u16, 0x4e63_u16, StaticArray[0x9f_u8, 0x3_u8, 0x7f_u8, 0x68_u8, 0xec_u8, 0xc9_u8, 0x1d_u8, 0xb9_u8])
  struct ID2D1EffectImpl
    lpVtbl : ID2D1EffectImplVTbl*
  end

  struct ID2D1EffectContextVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_dpi : UInt64
    create_effect : UInt64
    get_maximum_supported_feature_level : UInt64
    create_transform_node_from_effect : UInt64
    create_blend_transform : UInt64
    create_border_transform : UInt64
    create_offset_transform : UInt64
    create_bounds_adjustment_transform : UInt64
    load_pixel_shader : UInt64
    load_vertex_shader : UInt64
    load_compute_shader : UInt64
    is_shader_loaded : UInt64
    create_resource_texture : UInt64
    find_resource_texture : UInt64
    create_vertex_buffer : UInt64
    find_vertex_buffer : UInt64
    create_color_context : UInt64
    create_color_context_from_filename : UInt64
    create_color_context_from_wic_color_context : UInt64
    check_feature_support : UInt64
    is_buffer_precision_supported : UInt64
  end

  ID2D1EffectContext_GUID = "3d9f916b-27dc-4ad7-b4f1-64945340f563"
  IID_ID2D1EffectContext = LibC::GUID.new(0x3d9f916b_u32, 0x27dc_u16, 0x4ad7_u16, StaticArray[0xb4_u8, 0xf1_u8, 0x64_u8, 0x94_u8, 0x53_u8, 0x40_u8, 0xf5_u8, 0x63_u8])
  struct ID2D1EffectContext
    lpVtbl : ID2D1EffectContextVTbl*
  end

  struct ID2D1GeometryRealizationVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
  end

  ID2D1GeometryRealization_GUID = "a16907d7-bc02-4801-99e8-8cf7f485f774"
  IID_ID2D1GeometryRealization = LibC::GUID.new(0xa16907d7_u32, 0xbc02_u16, 0x4801_u16, StaticArray[0x99_u8, 0xe8_u8, 0x8c_u8, 0xf7_u8, 0xf4_u8, 0x85_u8, 0xf7_u8, 0x74_u8])
  struct ID2D1GeometryRealization
    lpVtbl : ID2D1GeometryRealizationVTbl*
  end

  struct ID2D1DeviceContext1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    create_bitmap : UInt64
    create_bitmap_from_wic_bitmap : UInt64
    create_shared_bitmap : UInt64
    create_bitmap_brush : UInt64
    create_solid_color_brush : UInt64
    create_gradient_stop_collection : UInt64
    create_linear_gradient_brush : UInt64
    create_radial_gradient_brush : UInt64
    create_compatible_render_target : UInt64
    create_layer : UInt64
    create_mesh : UInt64
    draw_line : UInt64
    draw_rectangle : UInt64
    fill_rectangle : UInt64
    draw_rounded_rectangle : UInt64
    fill_rounded_rectangle : UInt64
    draw_ellipse : UInt64
    fill_ellipse : UInt64
    draw_geometry : UInt64
    fill_geometry : UInt64
    fill_mesh : UInt64
    fill_opacity_mask : UInt64
    draw_bitmap : UInt64
    draw_text : UInt64
    draw_text_layout : UInt64
    draw_glyph_run : UInt64
    set_transform : UInt64
    get_transform : UInt64
    set_antialias_mode : UInt64
    get_antialias_mode : UInt64
    set_text_antialias_mode : UInt64
    get_text_antialias_mode : UInt64
    set_text_rendering_params : UInt64
    get_text_rendering_params : UInt64
    set_tags : UInt64
    get_tags : UInt64
    push_layer : UInt64
    pop_layer : UInt64
    flush : UInt64
    save_drawing_state : UInt64
    restore_drawing_state : UInt64
    push_axis_aligned_clip : UInt64
    pop_axis_aligned_clip : UInt64
    clear : UInt64
    begin_draw : UInt64
    end_draw : UInt64
    get_pixel_format : UInt64
    set_dpi : UInt64
    get_dpi : UInt64
    get_size : UInt64
    get_pixel_size : UInt64
    get_maximum_bitmap_size : UInt64
    is_supported : UInt64
    create_bitmap2 : UInt64
    create_bitmap_from_wic_bitmap2 : UInt64
    create_color_context : UInt64
    create_color_context_from_filename : UInt64
    create_color_context_from_wic_color_context : UInt64
    create_bitmap_from_dxgi_surface : UInt64
    create_effect : UInt64
    create_gradient_stop_collection2 : UInt64
    create_image_brush : UInt64
    create_bitmap_brush2 : UInt64
    create_command_list : UInt64
    is_dxgi_format_supported : UInt64
    is_buffer_precision_supported : UInt64
    get_image_local_bounds : UInt64
    get_image_world_bounds : UInt64
    get_glyph_run_world_bounds : UInt64
    get_device : UInt64
    set_target : UInt64
    get_target : UInt64
    set_rendering_controls : UInt64
    get_rendering_controls : UInt64
    set_primitive_blend : UInt64
    get_primitive_blend : UInt64
    set_unit_mode : UInt64
    get_unit_mode : UInt64
    draw_glyph_run2 : UInt64
    draw_image : UInt64
    draw_gdi_metafile : UInt64
    draw_bitmap2 : UInt64
    push_layer2 : UInt64
    invalidate_effect_input_rectangle : UInt64
    get_effect_invalid_rectangle_count : UInt64
    get_effect_invalid_rectangles : UInt64
    get_effect_required_input_rectangles : UInt64
    fill_opacity_mask2 : UInt64
    create_filled_geometry_realization : UInt64
    create_stroked_geometry_realization : UInt64
    draw_geometry_realization : UInt64
  end

  ID2D1DeviceContext1_GUID = "d37f57e4-6908-459f-a199-e72f24f79987"
  IID_ID2D1DeviceContext1 = LibC::GUID.new(0xd37f57e4_u32, 0x6908_u16, 0x459f_u16, StaticArray[0xa1_u8, 0x99_u8, 0xe7_u8, 0x2f_u8, 0x24_u8, 0xf7_u8, 0x99_u8, 0x87_u8])
  struct ID2D1DeviceContext1
    lpVtbl : ID2D1DeviceContext1VTbl*
  end

  struct ID2D1Device1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    create_device_context : UInt64
    create_print_control : UInt64
    set_maximum_texture_memory : UInt64
    get_maximum_texture_memory : UInt64
    clear_resources : UInt64
    get_rendering_priority : UInt64
    set_rendering_priority : UInt64
    create_device_context2 : UInt64
  end

  ID2D1Device1_GUID = "d21768e1-23a4-4823-a14b-7c3eba85d658"
  IID_ID2D1Device1 = LibC::GUID.new(0xd21768e1_u32, 0x23a4_u16, 0x4823_u16, StaticArray[0xa1_u8, 0x4b_u8, 0x7c_u8, 0x3e_u8, 0xba_u8, 0x85_u8, 0xd6_u8, 0x58_u8])
  struct ID2D1Device1
    lpVtbl : ID2D1Device1VTbl*
  end

  struct ID2D1Factory2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    reload_system_metrics : UInt64
    get_desktop_dpi : UInt64
    create_rectangle_geometry : UInt64
    create_rounded_rectangle_geometry : UInt64
    create_ellipse_geometry : UInt64
    create_geometry_group : UInt64
    create_transformed_geometry : UInt64
    create_path_geometry : UInt64
    create_stroke_style : UInt64
    create_drawing_state_block : UInt64
    create_wic_bitmap_render_target : UInt64
    create_hwnd_render_target : UInt64
    create_dxgi_surface_render_target : UInt64
    create_dc_render_target : UInt64
    create_device : UInt64
    create_stroke_style2 : UInt64
    create_path_geometry2 : UInt64
    create_drawing_state_block2 : UInt64
    create_gdi_metafile : UInt64
    register_effect_from_stream : UInt64
    register_effect_from_string : UInt64
    unregister_effect : UInt64
    get_registered_effects : UInt64
    get_effect_properties : UInt64
    create_device2 : UInt64
  end

  ID2D1Factory2_GUID = "94f81a73-9212-4376-9c58-b16a3a0d3992"
  IID_ID2D1Factory2 = LibC::GUID.new(0x94f81a73_u32, 0x9212_u16, 0x4376_u16, StaticArray[0x9c_u8, 0x58_u8, 0xb1_u8, 0x6a_u8, 0x3a_u8, 0xd_u8, 0x39_u8, 0x92_u8])
  struct ID2D1Factory2
    lpVtbl : ID2D1Factory2VTbl*
  end

  struct ID2D1CommandSink1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    begin_draw : UInt64
    end_draw : UInt64
    set_antialias_mode : UInt64
    set_tags : UInt64
    set_text_antialias_mode : UInt64
    set_text_rendering_params : UInt64
    set_transform : UInt64
    set_primitive_blend : UInt64
    set_unit_mode : UInt64
    clear : UInt64
    draw_glyph_run : UInt64
    draw_line : UInt64
    draw_geometry : UInt64
    draw_rectangle : UInt64
    draw_bitmap : UInt64
    draw_image : UInt64
    draw_gdi_metafile : UInt64
    fill_mesh : UInt64
    fill_opacity_mask : UInt64
    fill_geometry : UInt64
    fill_rectangle : UInt64
    push_axis_aligned_clip : UInt64
    push_layer : UInt64
    pop_axis_aligned_clip : UInt64
    pop_layer : UInt64
    set_primitive_blend1 : UInt64
  end

  ID2D1CommandSink1_GUID = "9eb767fd-4269-4467-b8c2-eb30cb305743"
  IID_ID2D1CommandSink1 = LibC::GUID.new(0x9eb767fd_u32, 0x4269_u16, 0x4467_u16, StaticArray[0xb8_u8, 0xc2_u8, 0xeb_u8, 0x30_u8, 0xcb_u8, 0x30_u8, 0x57_u8, 0x43_u8])
  struct ID2D1CommandSink1
    lpVtbl : ID2D1CommandSink1VTbl*
  end

  struct ID2D1SvgAttributeVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    get_element : UInt64
    clone : UInt64
  end

  ID2D1SvgAttribute_GUID = "c9cdb0dd-f8c9-4e70-b7c2-301c80292c5e"
  IID_ID2D1SvgAttribute = LibC::GUID.new(0xc9cdb0dd_u32, 0xf8c9_u16, 0x4e70_u16, StaticArray[0xb7_u8, 0xc2_u8, 0x30_u8, 0x1c_u8, 0x80_u8, 0x29_u8, 0x2c_u8, 0x5e_u8])
  struct ID2D1SvgAttribute
    lpVtbl : ID2D1SvgAttributeVTbl*
  end

  struct ID2D1SvgPaintVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    get_element : UInt64
    clone : UInt64
    set_paint_type : UInt64
    get_paint_type : UInt64
    set_color : UInt64
    get_color : UInt64
    set_id : UInt64
    get_id : UInt64
    get_id_length : UInt64
  end

  ID2D1SvgPaint_GUID = "d59bab0a-68a2-455b-a5dc-9eb2854e2490"
  IID_ID2D1SvgPaint = LibC::GUID.new(0xd59bab0a_u32, 0x68a2_u16, 0x455b_u16, StaticArray[0xa5_u8, 0xdc_u8, 0x9e_u8, 0xb2_u8, 0x85_u8, 0x4e_u8, 0x24_u8, 0x90_u8])
  struct ID2D1SvgPaint
    lpVtbl : ID2D1SvgPaintVTbl*
  end

  struct ID2D1SvgStrokeDashArrayVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    get_element : UInt64
    clone : UInt64
    remove_dashes_at_end : UInt64
    update_dashes : UInt64
    update_dashes2 : UInt64
    get_dashes : UInt64
    get_dashes2 : UInt64
    get_dashes_count : UInt64
  end

  ID2D1SvgStrokeDashArray_GUID = "f1c0ca52-92a3-4f00-b4ce-f35691efd9d9"
  IID_ID2D1SvgStrokeDashArray = LibC::GUID.new(0xf1c0ca52_u32, 0x92a3_u16, 0x4f00_u16, StaticArray[0xb4_u8, 0xce_u8, 0xf3_u8, 0x56_u8, 0x91_u8, 0xef_u8, 0xd9_u8, 0xd9_u8])
  struct ID2D1SvgStrokeDashArray
    lpVtbl : ID2D1SvgStrokeDashArrayVTbl*
  end

  struct ID2D1SvgPointCollectionVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    get_element : UInt64
    clone : UInt64
    remove_points_at_end : UInt64
    update_points : UInt64
    get_points : UInt64
    get_points_count : UInt64
  end

  ID2D1SvgPointCollection_GUID = "9dbe4c0d-3572-4dd9-9825-5530813bb712"
  IID_ID2D1SvgPointCollection = LibC::GUID.new(0x9dbe4c0d_u32, 0x3572_u16, 0x4dd9_u16, StaticArray[0x98_u8, 0x25_u8, 0x55_u8, 0x30_u8, 0x81_u8, 0x3b_u8, 0xb7_u8, 0x12_u8])
  struct ID2D1SvgPointCollection
    lpVtbl : ID2D1SvgPointCollectionVTbl*
  end

  struct ID2D1SvgPathDataVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    get_element : UInt64
    clone : UInt64
    remove_segment_data_at_end : UInt64
    update_segment_data : UInt64
    get_segment_data : UInt64
    get_segment_data_count : UInt64
    remove_commands_at_end : UInt64
    update_commands : UInt64
    get_commands : UInt64
    get_commands_count : UInt64
    create_path_geometry : UInt64
  end

  ID2D1SvgPathData_GUID = "c095e4f4-bb98-43d6-9745-4d1b84ec9888"
  IID_ID2D1SvgPathData = LibC::GUID.new(0xc095e4f4_u32, 0xbb98_u16, 0x43d6_u16, StaticArray[0x97_u8, 0x45_u8, 0x4d_u8, 0x1b_u8, 0x84_u8, 0xec_u8, 0x98_u8, 0x88_u8])
  struct ID2D1SvgPathData
    lpVtbl : ID2D1SvgPathDataVTbl*
  end

  struct ID2D1SvgElementVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    get_document : UInt64
    get_tag_name : UInt64
    get_tag_name_length : UInt64
    is_text_content : UInt64
    get_parent : UInt64
    has_children : UInt64
    get_first_child : UInt64
    get_last_child : UInt64
    get_previous_child : UInt64
    get_next_child : UInt64
    insert_child_before : UInt64
    append_child : UInt64
    replace_child : UInt64
    remove_child : UInt64
    create_child : UInt64
    is_attribute_specified : UInt64
    get_specified_attribute_count : UInt64
    get_specified_attribute_name : UInt64
    get_specified_attribute_name_length : UInt64
    remove_attribute : UInt64
    set_text_value : UInt64
    get_text_value : UInt64
    get_text_value_length : UInt64
    set_attribute_value : UInt64
    set_attribute_value2 : UInt64
    set_attribute_value3 : UInt64
    get_attribute_value : UInt64
    get_attribute_value2 : UInt64
    get_attribute_value3 : UInt64
    get_attribute_value_length : UInt64
  end

  ID2D1SvgElement_GUID = "ac7b67a6-183e-49c1-a823-0ebe40b0db29"
  IID_ID2D1SvgElement = LibC::GUID.new(0xac7b67a6_u32, 0x183e_u16, 0x49c1_u16, StaticArray[0xa8_u8, 0x23_u8, 0xe_u8, 0xbe_u8, 0x40_u8, 0xb0_u8, 0xdb_u8, 0x29_u8])
  struct ID2D1SvgElement
    lpVtbl : ID2D1SvgElementVTbl*
  end

  struct ID2D1SvgDocumentVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    set_viewport_size : UInt64
    get_viewport_size : UInt64
    set_root : UInt64
    get_root : UInt64
    find_element_by_id : UInt64
    serialize : UInt64
    deserialize : UInt64
    create_paint : UInt64
    create_stroke_dash_array : UInt64
    create_point_collection : UInt64
    create_path_data : UInt64
  end

  ID2D1SvgDocument_GUID = "86b88e4d-afa4-4d7b-88e4-68a51c4a0aec"
  IID_ID2D1SvgDocument = LibC::GUID.new(0x86b88e4d_u32, 0xafa4_u16, 0x4d7b_u16, StaticArray[0x88_u8, 0xe4_u8, 0x68_u8, 0xa5_u8, 0x1c_u8, 0x4a_u8, 0xa_u8, 0xec_u8])
  struct ID2D1SvgDocument
    lpVtbl : ID2D1SvgDocumentVTbl*
  end

  struct ID2D1InkStyleVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    set_nib_transform : UInt64
    get_nib_transform : UInt64
    set_nib_shape : UInt64
    get_nib_shape : UInt64
  end

  ID2D1InkStyle_GUID = "bae8b344-23fc-4071-8cb5-d05d6f073848"
  IID_ID2D1InkStyle = LibC::GUID.new(0xbae8b344_u32, 0x23fc_u16, 0x4071_u16, StaticArray[0x8c_u8, 0xb5_u8, 0xd0_u8, 0x5d_u8, 0x6f_u8, 0x7_u8, 0x38_u8, 0x48_u8])
  struct ID2D1InkStyle
    lpVtbl : ID2D1InkStyleVTbl*
  end

  struct ID2D1InkVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    set_start_point : UInt64
    get_start_point : UInt64
    add_segments : UInt64
    remove_segments_at_end : UInt64
    set_segments : UInt64
    set_segment_at_end : UInt64
    get_segment_count : UInt64
    get_segments : UInt64
    stream_as_geometry : UInt64
    get_bounds : UInt64
  end

  ID2D1Ink_GUID = "b499923b-7029-478f-a8b3-432c7c5f5312"
  IID_ID2D1Ink = LibC::GUID.new(0xb499923b_u32, 0x7029_u16, 0x478f_u16, StaticArray[0xa8_u8, 0xb3_u8, 0x43_u8, 0x2c_u8, 0x7c_u8, 0x5f_u8, 0x53_u8, 0x12_u8])
  struct ID2D1Ink
    lpVtbl : ID2D1InkVTbl*
  end

  struct ID2D1GradientMeshVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    get_patch_count : UInt64
    get_patches : UInt64
  end

  ID2D1GradientMesh_GUID = "f292e401-c050-4cde-83d7-04962d3b23c2"
  IID_ID2D1GradientMesh = LibC::GUID.new(0xf292e401_u32, 0xc050_u16, 0x4cde_u16, StaticArray[0x83_u8, 0xd7_u8, 0x4_u8, 0x96_u8, 0x2d_u8, 0x3b_u8, 0x23_u8, 0xc2_u8])
  struct ID2D1GradientMesh
    lpVtbl : ID2D1GradientMeshVTbl*
  end

  struct ID2D1ImageSourceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    offer_resources : UInt64
    try_reclaim_resources : UInt64
  end

  ID2D1ImageSource_GUID = "c9b664e5-74a1-4378-9ac2-eefc37a3f4d8"
  IID_ID2D1ImageSource = LibC::GUID.new(0xc9b664e5_u32, 0x74a1_u16, 0x4378_u16, StaticArray[0x9a_u8, 0xc2_u8, 0xee_u8, 0xfc_u8, 0x37_u8, 0xa3_u8, 0xf4_u8, 0xd8_u8])
  struct ID2D1ImageSource
    lpVtbl : ID2D1ImageSourceVTbl*
  end

  struct ID2D1ImageSourceFromWicVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    offer_resources : UInt64
    try_reclaim_resources : UInt64
    ensure_cached : UInt64
    trim_cache : UInt64
    get_source : UInt64
  end

  ID2D1ImageSourceFromWic_GUID = "77395441-1c8f-4555-8683-f50dab0fe792"
  IID_ID2D1ImageSourceFromWic = LibC::GUID.new(0x77395441_u32, 0x1c8f_u16, 0x4555_u16, StaticArray[0x86_u8, 0x83_u8, 0xf5_u8, 0xd_u8, 0xab_u8, 0xf_u8, 0xe7_u8, 0x92_u8])
  struct ID2D1ImageSourceFromWic
    lpVtbl : ID2D1ImageSourceFromWicVTbl*
  end

  struct ID2D1TransformedImageSourceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    get_source : UInt64
    get_properties : UInt64
  end

  ID2D1TransformedImageSource_GUID = "7f1f79e5-2796-416c-8f55-700f911445e5"
  IID_ID2D1TransformedImageSource = LibC::GUID.new(0x7f1f79e5_u32, 0x2796_u16, 0x416c_u16, StaticArray[0x8f_u8, 0x55_u8, 0x70_u8, 0xf_u8, 0x91_u8, 0x14_u8, 0x45_u8, 0xe5_u8])
  struct ID2D1TransformedImageSource
    lpVtbl : ID2D1TransformedImageSourceVTbl*
  end

  struct ID2D1LookupTable3DVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
  end

  ID2D1LookupTable3D_GUID = "53dd9855-a3b0-4d5b-82e1-26e25c5e5797"
  IID_ID2D1LookupTable3D = LibC::GUID.new(0x53dd9855_u32, 0xa3b0_u16, 0x4d5b_u16, StaticArray[0x82_u8, 0xe1_u8, 0x26_u8, 0xe2_u8, 0x5c_u8, 0x5e_u8, 0x57_u8, 0x97_u8])
  struct ID2D1LookupTable3D
    lpVtbl : ID2D1LookupTable3DVTbl*
  end

  struct ID2D1DeviceContext2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    create_bitmap : UInt64
    create_bitmap_from_wic_bitmap : UInt64
    create_shared_bitmap : UInt64
    create_bitmap_brush : UInt64
    create_solid_color_brush : UInt64
    create_gradient_stop_collection : UInt64
    create_linear_gradient_brush : UInt64
    create_radial_gradient_brush : UInt64
    create_compatible_render_target : UInt64
    create_layer : UInt64
    create_mesh : UInt64
    draw_line : UInt64
    draw_rectangle : UInt64
    fill_rectangle : UInt64
    draw_rounded_rectangle : UInt64
    fill_rounded_rectangle : UInt64
    draw_ellipse : UInt64
    fill_ellipse : UInt64
    draw_geometry : UInt64
    fill_geometry : UInt64
    fill_mesh : UInt64
    fill_opacity_mask : UInt64
    draw_bitmap : UInt64
    draw_text : UInt64
    draw_text_layout : UInt64
    draw_glyph_run : UInt64
    set_transform : UInt64
    get_transform : UInt64
    set_antialias_mode : UInt64
    get_antialias_mode : UInt64
    set_text_antialias_mode : UInt64
    get_text_antialias_mode : UInt64
    set_text_rendering_params : UInt64
    get_text_rendering_params : UInt64
    set_tags : UInt64
    get_tags : UInt64
    push_layer : UInt64
    pop_layer : UInt64
    flush : UInt64
    save_drawing_state : UInt64
    restore_drawing_state : UInt64
    push_axis_aligned_clip : UInt64
    pop_axis_aligned_clip : UInt64
    clear : UInt64
    begin_draw : UInt64
    end_draw : UInt64
    get_pixel_format : UInt64
    set_dpi : UInt64
    get_dpi : UInt64
    get_size : UInt64
    get_pixel_size : UInt64
    get_maximum_bitmap_size : UInt64
    is_supported : UInt64
    create_bitmap2 : UInt64
    create_bitmap_from_wic_bitmap2 : UInt64
    create_color_context : UInt64
    create_color_context_from_filename : UInt64
    create_color_context_from_wic_color_context : UInt64
    create_bitmap_from_dxgi_surface : UInt64
    create_effect : UInt64
    create_gradient_stop_collection2 : UInt64
    create_image_brush : UInt64
    create_bitmap_brush2 : UInt64
    create_command_list : UInt64
    is_dxgi_format_supported : UInt64
    is_buffer_precision_supported : UInt64
    get_image_local_bounds : UInt64
    get_image_world_bounds : UInt64
    get_glyph_run_world_bounds : UInt64
    get_device : UInt64
    set_target : UInt64
    get_target : UInt64
    set_rendering_controls : UInt64
    get_rendering_controls : UInt64
    set_primitive_blend : UInt64
    get_primitive_blend : UInt64
    set_unit_mode : UInt64
    get_unit_mode : UInt64
    draw_glyph_run2 : UInt64
    draw_image : UInt64
    draw_gdi_metafile : UInt64
    draw_bitmap2 : UInt64
    push_layer2 : UInt64
    invalidate_effect_input_rectangle : UInt64
    get_effect_invalid_rectangle_count : UInt64
    get_effect_invalid_rectangles : UInt64
    get_effect_required_input_rectangles : UInt64
    fill_opacity_mask2 : UInt64
    create_filled_geometry_realization : UInt64
    create_stroked_geometry_realization : UInt64
    draw_geometry_realization : UInt64
    create_ink : UInt64
    create_ink_style : UInt64
    create_gradient_mesh : UInt64
    create_image_source_from_wic : UInt64
    create_lookup_table3_d : UInt64
    create_image_source_from_dxgi : UInt64
    get_gradient_mesh_world_bounds : UInt64
    draw_ink : UInt64
    draw_gradient_mesh : UInt64
    draw_gdi_metafile2 : UInt64
    create_transformed_image_source : UInt64
  end

  ID2D1DeviceContext2_GUID = "394ea6a3-0c34-4321-950b-6ca20f0be6c7"
  IID_ID2D1DeviceContext2 = LibC::GUID.new(0x394ea6a3_u32, 0xc34_u16, 0x4321_u16, StaticArray[0x95_u8, 0xb_u8, 0x6c_u8, 0xa2_u8, 0xf_u8, 0xb_u8, 0xe6_u8, 0xc7_u8])
  struct ID2D1DeviceContext2
    lpVtbl : ID2D1DeviceContext2VTbl*
  end

  struct ID2D1Device2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    create_device_context : UInt64
    create_print_control : UInt64
    set_maximum_texture_memory : UInt64
    get_maximum_texture_memory : UInt64
    clear_resources : UInt64
    get_rendering_priority : UInt64
    set_rendering_priority : UInt64
    create_device_context2 : UInt64
    create_device_context3 : UInt64
    flush_device_contexts : UInt64
    get_dxgi_device : UInt64
  end

  ID2D1Device2_GUID = "a44472e1-8dfb-4e60-8492-6e2861c9ca8b"
  IID_ID2D1Device2 = LibC::GUID.new(0xa44472e1_u32, 0x8dfb_u16, 0x4e60_u16, StaticArray[0x84_u8, 0x92_u8, 0x6e_u8, 0x28_u8, 0x61_u8, 0xc9_u8, 0xca_u8, 0x8b_u8])
  struct ID2D1Device2
    lpVtbl : ID2D1Device2VTbl*
  end

  struct ID2D1Factory3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    reload_system_metrics : UInt64
    get_desktop_dpi : UInt64
    create_rectangle_geometry : UInt64
    create_rounded_rectangle_geometry : UInt64
    create_ellipse_geometry : UInt64
    create_geometry_group : UInt64
    create_transformed_geometry : UInt64
    create_path_geometry : UInt64
    create_stroke_style : UInt64
    create_drawing_state_block : UInt64
    create_wic_bitmap_render_target : UInt64
    create_hwnd_render_target : UInt64
    create_dxgi_surface_render_target : UInt64
    create_dc_render_target : UInt64
    create_device : UInt64
    create_stroke_style2 : UInt64
    create_path_geometry2 : UInt64
    create_drawing_state_block2 : UInt64
    create_gdi_metafile : UInt64
    register_effect_from_stream : UInt64
    register_effect_from_string : UInt64
    unregister_effect : UInt64
    get_registered_effects : UInt64
    get_effect_properties : UInt64
    create_device2 : UInt64
    create_device3 : UInt64
  end

  ID2D1Factory3_GUID = "0869759f-4f00-413f-b03e-2bda45404d0f"
  IID_ID2D1Factory3 = LibC::GUID.new(0x869759f_u32, 0x4f00_u16, 0x413f_u16, StaticArray[0xb0_u8, 0x3e_u8, 0x2b_u8, 0xda_u8, 0x45_u8, 0x40_u8, 0x4d_u8, 0xf_u8])
  struct ID2D1Factory3
    lpVtbl : ID2D1Factory3VTbl*
  end

  struct ID2D1CommandSink2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    begin_draw : UInt64
    end_draw : UInt64
    set_antialias_mode : UInt64
    set_tags : UInt64
    set_text_antialias_mode : UInt64
    set_text_rendering_params : UInt64
    set_transform : UInt64
    set_primitive_blend : UInt64
    set_unit_mode : UInt64
    clear : UInt64
    draw_glyph_run : UInt64
    draw_line : UInt64
    draw_geometry : UInt64
    draw_rectangle : UInt64
    draw_bitmap : UInt64
    draw_image : UInt64
    draw_gdi_metafile : UInt64
    fill_mesh : UInt64
    fill_opacity_mask : UInt64
    fill_geometry : UInt64
    fill_rectangle : UInt64
    push_axis_aligned_clip : UInt64
    push_layer : UInt64
    pop_axis_aligned_clip : UInt64
    pop_layer : UInt64
    set_primitive_blend1 : UInt64
    draw_ink : UInt64
    draw_gradient_mesh : UInt64
    draw_gdi_metafile2 : UInt64
  end

  ID2D1CommandSink2_GUID = "3bab440e-417e-47df-a2e2-bc0be6a00916"
  IID_ID2D1CommandSink2 = LibC::GUID.new(0x3bab440e_u32, 0x417e_u16, 0x47df_u16, StaticArray[0xa2_u8, 0xe2_u8, 0xbc_u8, 0xb_u8, 0xe6_u8, 0xa0_u8, 0x9_u8, 0x16_u8])
  struct ID2D1CommandSink2
    lpVtbl : ID2D1CommandSink2VTbl*
  end

  struct ID2D1GdiMetafile1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    stream : UInt64
    get_bounds : UInt64
    get_dpi : UInt64
    get_source_bounds : UInt64
  end

  ID2D1GdiMetafile1_GUID = "2e69f9e8-dd3f-4bf9-95ba-c04f49d788df"
  IID_ID2D1GdiMetafile1 = LibC::GUID.new(0x2e69f9e8_u32, 0xdd3f_u16, 0x4bf9_u16, StaticArray[0x95_u8, 0xba_u8, 0xc0_u8, 0x4f_u8, 0x49_u8, 0xd7_u8, 0x88_u8, 0xdf_u8])
  struct ID2D1GdiMetafile1
    lpVtbl : ID2D1GdiMetafile1VTbl*
  end

  struct ID2D1GdiMetafileSink1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    process_record : UInt64
    process_record2 : UInt64
  end

  ID2D1GdiMetafileSink1_GUID = "fd0ecb6b-91e6-411e-8655-395e760f91b4"
  IID_ID2D1GdiMetafileSink1 = LibC::GUID.new(0xfd0ecb6b_u32, 0x91e6_u16, 0x411e_u16, StaticArray[0x86_u8, 0x55_u8, 0x39_u8, 0x5e_u8, 0x76_u8, 0xf_u8, 0x91_u8, 0xb4_u8])
  struct ID2D1GdiMetafileSink1
    lpVtbl : ID2D1GdiMetafileSink1VTbl*
  end

  struct ID2D1SpriteBatchVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    add_sprites : UInt64
    set_sprites : UInt64
    get_sprites : UInt64
    get_sprite_count : UInt64
    clear : UInt64
  end

  ID2D1SpriteBatch_GUID = "4dc583bf-3a10-438a-8722-e9765224f1f1"
  IID_ID2D1SpriteBatch = LibC::GUID.new(0x4dc583bf_u32, 0x3a10_u16, 0x438a_u16, StaticArray[0x87_u8, 0x22_u8, 0xe9_u8, 0x76_u8, 0x52_u8, 0x24_u8, 0xf1_u8, 0xf1_u8])
  struct ID2D1SpriteBatch
    lpVtbl : ID2D1SpriteBatchVTbl*
  end

  struct ID2D1DeviceContext3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    create_bitmap : UInt64
    create_bitmap_from_wic_bitmap : UInt64
    create_shared_bitmap : UInt64
    create_bitmap_brush : UInt64
    create_solid_color_brush : UInt64
    create_gradient_stop_collection : UInt64
    create_linear_gradient_brush : UInt64
    create_radial_gradient_brush : UInt64
    create_compatible_render_target : UInt64
    create_layer : UInt64
    create_mesh : UInt64
    draw_line : UInt64
    draw_rectangle : UInt64
    fill_rectangle : UInt64
    draw_rounded_rectangle : UInt64
    fill_rounded_rectangle : UInt64
    draw_ellipse : UInt64
    fill_ellipse : UInt64
    draw_geometry : UInt64
    fill_geometry : UInt64
    fill_mesh : UInt64
    fill_opacity_mask : UInt64
    draw_bitmap : UInt64
    draw_text : UInt64
    draw_text_layout : UInt64
    draw_glyph_run : UInt64
    set_transform : UInt64
    get_transform : UInt64
    set_antialias_mode : UInt64
    get_antialias_mode : UInt64
    set_text_antialias_mode : UInt64
    get_text_antialias_mode : UInt64
    set_text_rendering_params : UInt64
    get_text_rendering_params : UInt64
    set_tags : UInt64
    get_tags : UInt64
    push_layer : UInt64
    pop_layer : UInt64
    flush : UInt64
    save_drawing_state : UInt64
    restore_drawing_state : UInt64
    push_axis_aligned_clip : UInt64
    pop_axis_aligned_clip : UInt64
    clear : UInt64
    begin_draw : UInt64
    end_draw : UInt64
    get_pixel_format : UInt64
    set_dpi : UInt64
    get_dpi : UInt64
    get_size : UInt64
    get_pixel_size : UInt64
    get_maximum_bitmap_size : UInt64
    is_supported : UInt64
    create_bitmap2 : UInt64
    create_bitmap_from_wic_bitmap2 : UInt64
    create_color_context : UInt64
    create_color_context_from_filename : UInt64
    create_color_context_from_wic_color_context : UInt64
    create_bitmap_from_dxgi_surface : UInt64
    create_effect : UInt64
    create_gradient_stop_collection2 : UInt64
    create_image_brush : UInt64
    create_bitmap_brush2 : UInt64
    create_command_list : UInt64
    is_dxgi_format_supported : UInt64
    is_buffer_precision_supported : UInt64
    get_image_local_bounds : UInt64
    get_image_world_bounds : UInt64
    get_glyph_run_world_bounds : UInt64
    get_device : UInt64
    set_target : UInt64
    get_target : UInt64
    set_rendering_controls : UInt64
    get_rendering_controls : UInt64
    set_primitive_blend : UInt64
    get_primitive_blend : UInt64
    set_unit_mode : UInt64
    get_unit_mode : UInt64
    draw_glyph_run2 : UInt64
    draw_image : UInt64
    draw_gdi_metafile : UInt64
    draw_bitmap2 : UInt64
    push_layer2 : UInt64
    invalidate_effect_input_rectangle : UInt64
    get_effect_invalid_rectangle_count : UInt64
    get_effect_invalid_rectangles : UInt64
    get_effect_required_input_rectangles : UInt64
    fill_opacity_mask2 : UInt64
    create_filled_geometry_realization : UInt64
    create_stroked_geometry_realization : UInt64
    draw_geometry_realization : UInt64
    create_ink : UInt64
    create_ink_style : UInt64
    create_gradient_mesh : UInt64
    create_image_source_from_wic : UInt64
    create_lookup_table3_d : UInt64
    create_image_source_from_dxgi : UInt64
    get_gradient_mesh_world_bounds : UInt64
    draw_ink : UInt64
    draw_gradient_mesh : UInt64
    draw_gdi_metafile2 : UInt64
    create_transformed_image_source : UInt64
    create_sprite_batch : UInt64
    draw_sprite_batch : UInt64
  end

  ID2D1DeviceContext3_GUID = "235a7496-8351-414c-bcd4-6672ab2d8e00"
  IID_ID2D1DeviceContext3 = LibC::GUID.new(0x235a7496_u32, 0x8351_u16, 0x414c_u16, StaticArray[0xbc_u8, 0xd4_u8, 0x66_u8, 0x72_u8, 0xab_u8, 0x2d_u8, 0x8e_u8, 0x0_u8])
  struct ID2D1DeviceContext3
    lpVtbl : ID2D1DeviceContext3VTbl*
  end

  struct ID2D1Device3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    create_device_context : UInt64
    create_print_control : UInt64
    set_maximum_texture_memory : UInt64
    get_maximum_texture_memory : UInt64
    clear_resources : UInt64
    get_rendering_priority : UInt64
    set_rendering_priority : UInt64
    create_device_context2 : UInt64
    create_device_context3 : UInt64
    flush_device_contexts : UInt64
    get_dxgi_device : UInt64
    create_device_context4 : UInt64
  end

  ID2D1Device3_GUID = "852f2087-802c-4037-ab60-ff2e7ee6fc01"
  IID_ID2D1Device3 = LibC::GUID.new(0x852f2087_u32, 0x802c_u16, 0x4037_u16, StaticArray[0xab_u8, 0x60_u8, 0xff_u8, 0x2e_u8, 0x7e_u8, 0xe6_u8, 0xfc_u8, 0x1_u8])
  struct ID2D1Device3
    lpVtbl : ID2D1Device3VTbl*
  end

  struct ID2D1Factory4VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    reload_system_metrics : UInt64
    get_desktop_dpi : UInt64
    create_rectangle_geometry : UInt64
    create_rounded_rectangle_geometry : UInt64
    create_ellipse_geometry : UInt64
    create_geometry_group : UInt64
    create_transformed_geometry : UInt64
    create_path_geometry : UInt64
    create_stroke_style : UInt64
    create_drawing_state_block : UInt64
    create_wic_bitmap_render_target : UInt64
    create_hwnd_render_target : UInt64
    create_dxgi_surface_render_target : UInt64
    create_dc_render_target : UInt64
    create_device : UInt64
    create_stroke_style2 : UInt64
    create_path_geometry2 : UInt64
    create_drawing_state_block2 : UInt64
    create_gdi_metafile : UInt64
    register_effect_from_stream : UInt64
    register_effect_from_string : UInt64
    unregister_effect : UInt64
    get_registered_effects : UInt64
    get_effect_properties : UInt64
    create_device2 : UInt64
    create_device3 : UInt64
    create_device4 : UInt64
  end

  ID2D1Factory4_GUID = "bd4ec2d2-0662-4bee-ba8e-6f29f032e096"
  IID_ID2D1Factory4 = LibC::GUID.new(0xbd4ec2d2_u32, 0x662_u16, 0x4bee_u16, StaticArray[0xba_u8, 0x8e_u8, 0x6f_u8, 0x29_u8, 0xf0_u8, 0x32_u8, 0xe0_u8, 0x96_u8])
  struct ID2D1Factory4
    lpVtbl : ID2D1Factory4VTbl*
  end

  struct ID2D1CommandSink3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    begin_draw : UInt64
    end_draw : UInt64
    set_antialias_mode : UInt64
    set_tags : UInt64
    set_text_antialias_mode : UInt64
    set_text_rendering_params : UInt64
    set_transform : UInt64
    set_primitive_blend : UInt64
    set_unit_mode : UInt64
    clear : UInt64
    draw_glyph_run : UInt64
    draw_line : UInt64
    draw_geometry : UInt64
    draw_rectangle : UInt64
    draw_bitmap : UInt64
    draw_image : UInt64
    draw_gdi_metafile : UInt64
    fill_mesh : UInt64
    fill_opacity_mask : UInt64
    fill_geometry : UInt64
    fill_rectangle : UInt64
    push_axis_aligned_clip : UInt64
    push_layer : UInt64
    pop_axis_aligned_clip : UInt64
    pop_layer : UInt64
    set_primitive_blend1 : UInt64
    draw_ink : UInt64
    draw_gradient_mesh : UInt64
    draw_gdi_metafile2 : UInt64
    draw_sprite_batch : UInt64
  end

  ID2D1CommandSink3_GUID = "18079135-4cf3-4868-bc8e-06067e6d242d"
  IID_ID2D1CommandSink3 = LibC::GUID.new(0x18079135_u32, 0x4cf3_u16, 0x4868_u16, StaticArray[0xbc_u8, 0x8e_u8, 0x6_u8, 0x6_u8, 0x7e_u8, 0x6d_u8, 0x24_u8, 0x2d_u8])
  struct ID2D1CommandSink3
    lpVtbl : ID2D1CommandSink3VTbl*
  end

  struct ID2D1SvgGlyphStyleVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    set_fill : UInt64
    get_fill : UInt64
    set_stroke : UInt64
    get_stroke_dashes_count : UInt64
    get_stroke : UInt64
  end

  ID2D1SvgGlyphStyle_GUID = "af671749-d241-4db8-8e41-dcc2e5c1a438"
  IID_ID2D1SvgGlyphStyle = LibC::GUID.new(0xaf671749_u32, 0xd241_u16, 0x4db8_u16, StaticArray[0x8e_u8, 0x41_u8, 0xdc_u8, 0xc2_u8, 0xe5_u8, 0xc1_u8, 0xa4_u8, 0x38_u8])
  struct ID2D1SvgGlyphStyle
    lpVtbl : ID2D1SvgGlyphStyleVTbl*
  end

  struct ID2D1DeviceContext4VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    create_bitmap : UInt64
    create_bitmap_from_wic_bitmap : UInt64
    create_shared_bitmap : UInt64
    create_bitmap_brush : UInt64
    create_solid_color_brush : UInt64
    create_gradient_stop_collection : UInt64
    create_linear_gradient_brush : UInt64
    create_radial_gradient_brush : UInt64
    create_compatible_render_target : UInt64
    create_layer : UInt64
    create_mesh : UInt64
    draw_line : UInt64
    draw_rectangle : UInt64
    fill_rectangle : UInt64
    draw_rounded_rectangle : UInt64
    fill_rounded_rectangle : UInt64
    draw_ellipse : UInt64
    fill_ellipse : UInt64
    draw_geometry : UInt64
    fill_geometry : UInt64
    fill_mesh : UInt64
    fill_opacity_mask : UInt64
    draw_bitmap : UInt64
    draw_text : UInt64
    draw_text_layout : UInt64
    draw_glyph_run : UInt64
    set_transform : UInt64
    get_transform : UInt64
    set_antialias_mode : UInt64
    get_antialias_mode : UInt64
    set_text_antialias_mode : UInt64
    get_text_antialias_mode : UInt64
    set_text_rendering_params : UInt64
    get_text_rendering_params : UInt64
    set_tags : UInt64
    get_tags : UInt64
    push_layer : UInt64
    pop_layer : UInt64
    flush : UInt64
    save_drawing_state : UInt64
    restore_drawing_state : UInt64
    push_axis_aligned_clip : UInt64
    pop_axis_aligned_clip : UInt64
    clear : UInt64
    begin_draw : UInt64
    end_draw : UInt64
    get_pixel_format : UInt64
    set_dpi : UInt64
    get_dpi : UInt64
    get_size : UInt64
    get_pixel_size : UInt64
    get_maximum_bitmap_size : UInt64
    is_supported : UInt64
    create_bitmap2 : UInt64
    create_bitmap_from_wic_bitmap2 : UInt64
    create_color_context : UInt64
    create_color_context_from_filename : UInt64
    create_color_context_from_wic_color_context : UInt64
    create_bitmap_from_dxgi_surface : UInt64
    create_effect : UInt64
    create_gradient_stop_collection2 : UInt64
    create_image_brush : UInt64
    create_bitmap_brush2 : UInt64
    create_command_list : UInt64
    is_dxgi_format_supported : UInt64
    is_buffer_precision_supported : UInt64
    get_image_local_bounds : UInt64
    get_image_world_bounds : UInt64
    get_glyph_run_world_bounds : UInt64
    get_device : UInt64
    set_target : UInt64
    get_target : UInt64
    set_rendering_controls : UInt64
    get_rendering_controls : UInt64
    set_primitive_blend : UInt64
    get_primitive_blend : UInt64
    set_unit_mode : UInt64
    get_unit_mode : UInt64
    draw_glyph_run2 : UInt64
    draw_image : UInt64
    draw_gdi_metafile : UInt64
    draw_bitmap2 : UInt64
    push_layer2 : UInt64
    invalidate_effect_input_rectangle : UInt64
    get_effect_invalid_rectangle_count : UInt64
    get_effect_invalid_rectangles : UInt64
    get_effect_required_input_rectangles : UInt64
    fill_opacity_mask2 : UInt64
    create_filled_geometry_realization : UInt64
    create_stroked_geometry_realization : UInt64
    draw_geometry_realization : UInt64
    create_ink : UInt64
    create_ink_style : UInt64
    create_gradient_mesh : UInt64
    create_image_source_from_wic : UInt64
    create_lookup_table3_d : UInt64
    create_image_source_from_dxgi : UInt64
    get_gradient_mesh_world_bounds : UInt64
    draw_ink : UInt64
    draw_gradient_mesh : UInt64
    draw_gdi_metafile2 : UInt64
    create_transformed_image_source : UInt64
    create_sprite_batch : UInt64
    draw_sprite_batch : UInt64
    create_svg_glyph_style : UInt64
    draw_text2 : UInt64
    draw_text_layout2 : UInt64
    draw_color_bitmap_glyph_run : UInt64
    draw_svg_glyph_run : UInt64
    get_color_bitmap_glyph_image : UInt64
    get_svg_glyph_image : UInt64
  end

  ID2D1DeviceContext4_GUID = "8c427831-3d90-4476-b647-c4fae349e4db"
  IID_ID2D1DeviceContext4 = LibC::GUID.new(0x8c427831_u32, 0x3d90_u16, 0x4476_u16, StaticArray[0xb6_u8, 0x47_u8, 0xc4_u8, 0xfa_u8, 0xe3_u8, 0x49_u8, 0xe4_u8, 0xdb_u8])
  struct ID2D1DeviceContext4
    lpVtbl : ID2D1DeviceContext4VTbl*
  end

  struct ID2D1Device4VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    create_device_context : UInt64
    create_print_control : UInt64
    set_maximum_texture_memory : UInt64
    get_maximum_texture_memory : UInt64
    clear_resources : UInt64
    get_rendering_priority : UInt64
    set_rendering_priority : UInt64
    create_device_context2 : UInt64
    create_device_context3 : UInt64
    flush_device_contexts : UInt64
    get_dxgi_device : UInt64
    create_device_context4 : UInt64
    create_device_context5 : UInt64
    set_maximum_color_glyph_cache_memory : UInt64
    get_maximum_color_glyph_cache_memory : UInt64
  end

  ID2D1Device4_GUID = "d7bdb159-5683-4a46-bc9c-72dc720b858b"
  IID_ID2D1Device4 = LibC::GUID.new(0xd7bdb159_u32, 0x5683_u16, 0x4a46_u16, StaticArray[0xbc_u8, 0x9c_u8, 0x72_u8, 0xdc_u8, 0x72_u8, 0xb_u8, 0x85_u8, 0x8b_u8])
  struct ID2D1Device4
    lpVtbl : ID2D1Device4VTbl*
  end

  struct ID2D1Factory5VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    reload_system_metrics : UInt64
    get_desktop_dpi : UInt64
    create_rectangle_geometry : UInt64
    create_rounded_rectangle_geometry : UInt64
    create_ellipse_geometry : UInt64
    create_geometry_group : UInt64
    create_transformed_geometry : UInt64
    create_path_geometry : UInt64
    create_stroke_style : UInt64
    create_drawing_state_block : UInt64
    create_wic_bitmap_render_target : UInt64
    create_hwnd_render_target : UInt64
    create_dxgi_surface_render_target : UInt64
    create_dc_render_target : UInt64
    create_device : UInt64
    create_stroke_style2 : UInt64
    create_path_geometry2 : UInt64
    create_drawing_state_block2 : UInt64
    create_gdi_metafile : UInt64
    register_effect_from_stream : UInt64
    register_effect_from_string : UInt64
    unregister_effect : UInt64
    get_registered_effects : UInt64
    get_effect_properties : UInt64
    create_device2 : UInt64
    create_device3 : UInt64
    create_device4 : UInt64
    create_device5 : UInt64
  end

  ID2D1Factory5_GUID = "c4349994-838e-4b0f-8cab-44997d9eeacc"
  IID_ID2D1Factory5 = LibC::GUID.new(0xc4349994_u32, 0x838e_u16, 0x4b0f_u16, StaticArray[0x8c_u8, 0xab_u8, 0x44_u8, 0x99_u8, 0x7d_u8, 0x9e_u8, 0xea_u8, 0xcc_u8])
  struct ID2D1Factory5
    lpVtbl : ID2D1Factory5VTbl*
  end

  struct ID2D1CommandSink4VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    begin_draw : UInt64
    end_draw : UInt64
    set_antialias_mode : UInt64
    set_tags : UInt64
    set_text_antialias_mode : UInt64
    set_text_rendering_params : UInt64
    set_transform : UInt64
    set_primitive_blend : UInt64
    set_unit_mode : UInt64
    clear : UInt64
    draw_glyph_run : UInt64
    draw_line : UInt64
    draw_geometry : UInt64
    draw_rectangle : UInt64
    draw_bitmap : UInt64
    draw_image : UInt64
    draw_gdi_metafile : UInt64
    fill_mesh : UInt64
    fill_opacity_mask : UInt64
    fill_geometry : UInt64
    fill_rectangle : UInt64
    push_axis_aligned_clip : UInt64
    push_layer : UInt64
    pop_axis_aligned_clip : UInt64
    pop_layer : UInt64
    set_primitive_blend1 : UInt64
    draw_ink : UInt64
    draw_gradient_mesh : UInt64
    draw_gdi_metafile2 : UInt64
    draw_sprite_batch : UInt64
    set_primitive_blend2 : UInt64
  end

  ID2D1CommandSink4_GUID = "c78a6519-40d6-4218-b2de-beeeb744bb3e"
  IID_ID2D1CommandSink4 = LibC::GUID.new(0xc78a6519_u32, 0x40d6_u16, 0x4218_u16, StaticArray[0xb2_u8, 0xde_u8, 0xbe_u8, 0xee_u8, 0xb7_u8, 0x44_u8, 0xbb_u8, 0x3e_u8])
  struct ID2D1CommandSink4
    lpVtbl : ID2D1CommandSink4VTbl*
  end

  struct ID2D1ColorContext1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    get_color_space : UInt64
    get_profile_size : UInt64
    get_profile : UInt64
    get_color_context_type : UInt64
    get_dxgi_color_space : UInt64
    get_simple_color_profile : UInt64
  end

  ID2D1ColorContext1_GUID = "1ab42875-c57f-4be9-bd85-9cd78d6f55ee"
  IID_ID2D1ColorContext1 = LibC::GUID.new(0x1ab42875_u32, 0xc57f_u16, 0x4be9_u16, StaticArray[0xbd_u8, 0x85_u8, 0x9c_u8, 0xd7_u8, 0x8d_u8, 0x6f_u8, 0x55_u8, 0xee_u8])
  struct ID2D1ColorContext1
    lpVtbl : ID2D1ColorContext1VTbl*
  end

  struct ID2D1DeviceContext5VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    create_bitmap : UInt64
    create_bitmap_from_wic_bitmap : UInt64
    create_shared_bitmap : UInt64
    create_bitmap_brush : UInt64
    create_solid_color_brush : UInt64
    create_gradient_stop_collection : UInt64
    create_linear_gradient_brush : UInt64
    create_radial_gradient_brush : UInt64
    create_compatible_render_target : UInt64
    create_layer : UInt64
    create_mesh : UInt64
    draw_line : UInt64
    draw_rectangle : UInt64
    fill_rectangle : UInt64
    draw_rounded_rectangle : UInt64
    fill_rounded_rectangle : UInt64
    draw_ellipse : UInt64
    fill_ellipse : UInt64
    draw_geometry : UInt64
    fill_geometry : UInt64
    fill_mesh : UInt64
    fill_opacity_mask : UInt64
    draw_bitmap : UInt64
    draw_text : UInt64
    draw_text_layout : UInt64
    draw_glyph_run : UInt64
    set_transform : UInt64
    get_transform : UInt64
    set_antialias_mode : UInt64
    get_antialias_mode : UInt64
    set_text_antialias_mode : UInt64
    get_text_antialias_mode : UInt64
    set_text_rendering_params : UInt64
    get_text_rendering_params : UInt64
    set_tags : UInt64
    get_tags : UInt64
    push_layer : UInt64
    pop_layer : UInt64
    flush : UInt64
    save_drawing_state : UInt64
    restore_drawing_state : UInt64
    push_axis_aligned_clip : UInt64
    pop_axis_aligned_clip : UInt64
    clear : UInt64
    begin_draw : UInt64
    end_draw : UInt64
    get_pixel_format : UInt64
    set_dpi : UInt64
    get_dpi : UInt64
    get_size : UInt64
    get_pixel_size : UInt64
    get_maximum_bitmap_size : UInt64
    is_supported : UInt64
    create_bitmap2 : UInt64
    create_bitmap_from_wic_bitmap2 : UInt64
    create_color_context : UInt64
    create_color_context_from_filename : UInt64
    create_color_context_from_wic_color_context : UInt64
    create_bitmap_from_dxgi_surface : UInt64
    create_effect : UInt64
    create_gradient_stop_collection2 : UInt64
    create_image_brush : UInt64
    create_bitmap_brush2 : UInt64
    create_command_list : UInt64
    is_dxgi_format_supported : UInt64
    is_buffer_precision_supported : UInt64
    get_image_local_bounds : UInt64
    get_image_world_bounds : UInt64
    get_glyph_run_world_bounds : UInt64
    get_device : UInt64
    set_target : UInt64
    get_target : UInt64
    set_rendering_controls : UInt64
    get_rendering_controls : UInt64
    set_primitive_blend : UInt64
    get_primitive_blend : UInt64
    set_unit_mode : UInt64
    get_unit_mode : UInt64
    draw_glyph_run2 : UInt64
    draw_image : UInt64
    draw_gdi_metafile : UInt64
    draw_bitmap2 : UInt64
    push_layer2 : UInt64
    invalidate_effect_input_rectangle : UInt64
    get_effect_invalid_rectangle_count : UInt64
    get_effect_invalid_rectangles : UInt64
    get_effect_required_input_rectangles : UInt64
    fill_opacity_mask2 : UInt64
    create_filled_geometry_realization : UInt64
    create_stroked_geometry_realization : UInt64
    draw_geometry_realization : UInt64
    create_ink : UInt64
    create_ink_style : UInt64
    create_gradient_mesh : UInt64
    create_image_source_from_wic : UInt64
    create_lookup_table3_d : UInt64
    create_image_source_from_dxgi : UInt64
    get_gradient_mesh_world_bounds : UInt64
    draw_ink : UInt64
    draw_gradient_mesh : UInt64
    draw_gdi_metafile2 : UInt64
    create_transformed_image_source : UInt64
    create_sprite_batch : UInt64
    draw_sprite_batch : UInt64
    create_svg_glyph_style : UInt64
    draw_text2 : UInt64
    draw_text_layout2 : UInt64
    draw_color_bitmap_glyph_run : UInt64
    draw_svg_glyph_run : UInt64
    get_color_bitmap_glyph_image : UInt64
    get_svg_glyph_image : UInt64
    create_svg_document : UInt64
    draw_svg_document : UInt64
    create_color_context_from_dxgi_color_space : UInt64
    create_color_context_from_simple_color_profile : UInt64
  end

  ID2D1DeviceContext5_GUID = "7836d248-68cc-4df6-b9e8-de991bf62eb7"
  IID_ID2D1DeviceContext5 = LibC::GUID.new(0x7836d248_u32, 0x68cc_u16, 0x4df6_u16, StaticArray[0xb9_u8, 0xe8_u8, 0xde_u8, 0x99_u8, 0x1b_u8, 0xf6_u8, 0x2e_u8, 0xb7_u8])
  struct ID2D1DeviceContext5
    lpVtbl : ID2D1DeviceContext5VTbl*
  end

  struct ID2D1Device5VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    create_device_context : UInt64
    create_print_control : UInt64
    set_maximum_texture_memory : UInt64
    get_maximum_texture_memory : UInt64
    clear_resources : UInt64
    get_rendering_priority : UInt64
    set_rendering_priority : UInt64
    create_device_context2 : UInt64
    create_device_context3 : UInt64
    flush_device_contexts : UInt64
    get_dxgi_device : UInt64
    create_device_context4 : UInt64
    create_device_context5 : UInt64
    set_maximum_color_glyph_cache_memory : UInt64
    get_maximum_color_glyph_cache_memory : UInt64
    create_device_context6 : UInt64
  end

  ID2D1Device5_GUID = "d55ba0a4-6405-4694-aef5-08ee1a4358b4"
  IID_ID2D1Device5 = LibC::GUID.new(0xd55ba0a4_u32, 0x6405_u16, 0x4694_u16, StaticArray[0xae_u8, 0xf5_u8, 0x8_u8, 0xee_u8, 0x1a_u8, 0x43_u8, 0x58_u8, 0xb4_u8])
  struct ID2D1Device5
    lpVtbl : ID2D1Device5VTbl*
  end

  struct ID2D1Factory6VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    reload_system_metrics : UInt64
    get_desktop_dpi : UInt64
    create_rectangle_geometry : UInt64
    create_rounded_rectangle_geometry : UInt64
    create_ellipse_geometry : UInt64
    create_geometry_group : UInt64
    create_transformed_geometry : UInt64
    create_path_geometry : UInt64
    create_stroke_style : UInt64
    create_drawing_state_block : UInt64
    create_wic_bitmap_render_target : UInt64
    create_hwnd_render_target : UInt64
    create_dxgi_surface_render_target : UInt64
    create_dc_render_target : UInt64
    create_device : UInt64
    create_stroke_style2 : UInt64
    create_path_geometry2 : UInt64
    create_drawing_state_block2 : UInt64
    create_gdi_metafile : UInt64
    register_effect_from_stream : UInt64
    register_effect_from_string : UInt64
    unregister_effect : UInt64
    get_registered_effects : UInt64
    get_effect_properties : UInt64
    create_device2 : UInt64
    create_device3 : UInt64
    create_device4 : UInt64
    create_device5 : UInt64
    create_device6 : UInt64
  end

  ID2D1Factory6_GUID = "f9976f46-f642-44c1-97ca-da32ea2a2635"
  IID_ID2D1Factory6 = LibC::GUID.new(0xf9976f46_u32, 0xf642_u16, 0x44c1_u16, StaticArray[0x97_u8, 0xca_u8, 0xda_u8, 0x32_u8, 0xea_u8, 0x2a_u8, 0x26_u8, 0x35_u8])
  struct ID2D1Factory6
    lpVtbl : ID2D1Factory6VTbl*
  end

  struct ID2D1CommandSink5VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    begin_draw : UInt64
    end_draw : UInt64
    set_antialias_mode : UInt64
    set_tags : UInt64
    set_text_antialias_mode : UInt64
    set_text_rendering_params : UInt64
    set_transform : UInt64
    set_primitive_blend : UInt64
    set_unit_mode : UInt64
    clear : UInt64
    draw_glyph_run : UInt64
    draw_line : UInt64
    draw_geometry : UInt64
    draw_rectangle : UInt64
    draw_bitmap : UInt64
    draw_image : UInt64
    draw_gdi_metafile : UInt64
    fill_mesh : UInt64
    fill_opacity_mask : UInt64
    fill_geometry : UInt64
    fill_rectangle : UInt64
    push_axis_aligned_clip : UInt64
    push_layer : UInt64
    pop_axis_aligned_clip : UInt64
    pop_layer : UInt64
    set_primitive_blend1 : UInt64
    draw_ink : UInt64
    draw_gradient_mesh : UInt64
    draw_gdi_metafile2 : UInt64
    draw_sprite_batch : UInt64
    set_primitive_blend2 : UInt64
    blend_image : UInt64
  end

  ID2D1CommandSink5_GUID = "7047dd26-b1e7-44a7-959a-8349e2144fa8"
  IID_ID2D1CommandSink5 = LibC::GUID.new(0x7047dd26_u32, 0xb1e7_u16, 0x44a7_u16, StaticArray[0x95_u8, 0x9a_u8, 0x83_u8, 0x49_u8, 0xe2_u8, 0x14_u8, 0x4f_u8, 0xa8_u8])
  struct ID2D1CommandSink5
    lpVtbl : ID2D1CommandSink5VTbl*
  end

  struct ID2D1DeviceContext6VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    create_bitmap : UInt64
    create_bitmap_from_wic_bitmap : UInt64
    create_shared_bitmap : UInt64
    create_bitmap_brush : UInt64
    create_solid_color_brush : UInt64
    create_gradient_stop_collection : UInt64
    create_linear_gradient_brush : UInt64
    create_radial_gradient_brush : UInt64
    create_compatible_render_target : UInt64
    create_layer : UInt64
    create_mesh : UInt64
    draw_line : UInt64
    draw_rectangle : UInt64
    fill_rectangle : UInt64
    draw_rounded_rectangle : UInt64
    fill_rounded_rectangle : UInt64
    draw_ellipse : UInt64
    fill_ellipse : UInt64
    draw_geometry : UInt64
    fill_geometry : UInt64
    fill_mesh : UInt64
    fill_opacity_mask : UInt64
    draw_bitmap : UInt64
    draw_text : UInt64
    draw_text_layout : UInt64
    draw_glyph_run : UInt64
    set_transform : UInt64
    get_transform : UInt64
    set_antialias_mode : UInt64
    get_antialias_mode : UInt64
    set_text_antialias_mode : UInt64
    get_text_antialias_mode : UInt64
    set_text_rendering_params : UInt64
    get_text_rendering_params : UInt64
    set_tags : UInt64
    get_tags : UInt64
    push_layer : UInt64
    pop_layer : UInt64
    flush : UInt64
    save_drawing_state : UInt64
    restore_drawing_state : UInt64
    push_axis_aligned_clip : UInt64
    pop_axis_aligned_clip : UInt64
    clear : UInt64
    begin_draw : UInt64
    end_draw : UInt64
    get_pixel_format : UInt64
    set_dpi : UInt64
    get_dpi : UInt64
    get_size : UInt64
    get_pixel_size : UInt64
    get_maximum_bitmap_size : UInt64
    is_supported : UInt64
    create_bitmap2 : UInt64
    create_bitmap_from_wic_bitmap2 : UInt64
    create_color_context : UInt64
    create_color_context_from_filename : UInt64
    create_color_context_from_wic_color_context : UInt64
    create_bitmap_from_dxgi_surface : UInt64
    create_effect : UInt64
    create_gradient_stop_collection2 : UInt64
    create_image_brush : UInt64
    create_bitmap_brush2 : UInt64
    create_command_list : UInt64
    is_dxgi_format_supported : UInt64
    is_buffer_precision_supported : UInt64
    get_image_local_bounds : UInt64
    get_image_world_bounds : UInt64
    get_glyph_run_world_bounds : UInt64
    get_device : UInt64
    set_target : UInt64
    get_target : UInt64
    set_rendering_controls : UInt64
    get_rendering_controls : UInt64
    set_primitive_blend : UInt64
    get_primitive_blend : UInt64
    set_unit_mode : UInt64
    get_unit_mode : UInt64
    draw_glyph_run2 : UInt64
    draw_image : UInt64
    draw_gdi_metafile : UInt64
    draw_bitmap2 : UInt64
    push_layer2 : UInt64
    invalidate_effect_input_rectangle : UInt64
    get_effect_invalid_rectangle_count : UInt64
    get_effect_invalid_rectangles : UInt64
    get_effect_required_input_rectangles : UInt64
    fill_opacity_mask2 : UInt64
    create_filled_geometry_realization : UInt64
    create_stroked_geometry_realization : UInt64
    draw_geometry_realization : UInt64
    create_ink : UInt64
    create_ink_style : UInt64
    create_gradient_mesh : UInt64
    create_image_source_from_wic : UInt64
    create_lookup_table3_d : UInt64
    create_image_source_from_dxgi : UInt64
    get_gradient_mesh_world_bounds : UInt64
    draw_ink : UInt64
    draw_gradient_mesh : UInt64
    draw_gdi_metafile2 : UInt64
    create_transformed_image_source : UInt64
    create_sprite_batch : UInt64
    draw_sprite_batch : UInt64
    create_svg_glyph_style : UInt64
    draw_text2 : UInt64
    draw_text_layout2 : UInt64
    draw_color_bitmap_glyph_run : UInt64
    draw_svg_glyph_run : UInt64
    get_color_bitmap_glyph_image : UInt64
    get_svg_glyph_image : UInt64
    create_svg_document : UInt64
    draw_svg_document : UInt64
    create_color_context_from_dxgi_color_space : UInt64
    create_color_context_from_simple_color_profile : UInt64
    blend_image : UInt64
  end

  ID2D1DeviceContext6_GUID = "985f7e37-4ed0-4a19-98a3-15b0edfde306"
  IID_ID2D1DeviceContext6 = LibC::GUID.new(0x985f7e37_u32, 0x4ed0_u16, 0x4a19_u16, StaticArray[0x98_u8, 0xa3_u8, 0x15_u8, 0xb0_u8, 0xed_u8, 0xfd_u8, 0xe3_u8, 0x6_u8])
  struct ID2D1DeviceContext6
    lpVtbl : ID2D1DeviceContext6VTbl*
  end

  struct ID2D1Device6VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_factory : UInt64
    create_device_context : UInt64
    create_print_control : UInt64
    set_maximum_texture_memory : UInt64
    get_maximum_texture_memory : UInt64
    clear_resources : UInt64
    get_rendering_priority : UInt64
    set_rendering_priority : UInt64
    create_device_context2 : UInt64
    create_device_context3 : UInt64
    flush_device_contexts : UInt64
    get_dxgi_device : UInt64
    create_device_context4 : UInt64
    create_device_context5 : UInt64
    set_maximum_color_glyph_cache_memory : UInt64
    get_maximum_color_glyph_cache_memory : UInt64
    create_device_context6 : UInt64
    create_device_context7 : UInt64
  end

  ID2D1Device6_GUID = "7bfef914-2d75-4bad-be87-e18ddb077b6d"
  IID_ID2D1Device6 = LibC::GUID.new(0x7bfef914_u32, 0x2d75_u16, 0x4bad_u16, StaticArray[0xbe_u8, 0x87_u8, 0xe1_u8, 0x8d_u8, 0xdb_u8, 0x7_u8, 0x7b_u8, 0x6d_u8])
  struct ID2D1Device6
    lpVtbl : ID2D1Device6VTbl*
  end

  struct ID2D1Factory7VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    reload_system_metrics : UInt64
    get_desktop_dpi : UInt64
    create_rectangle_geometry : UInt64
    create_rounded_rectangle_geometry : UInt64
    create_ellipse_geometry : UInt64
    create_geometry_group : UInt64
    create_transformed_geometry : UInt64
    create_path_geometry : UInt64
    create_stroke_style : UInt64
    create_drawing_state_block : UInt64
    create_wic_bitmap_render_target : UInt64
    create_hwnd_render_target : UInt64
    create_dxgi_surface_render_target : UInt64
    create_dc_render_target : UInt64
    create_device : UInt64
    create_stroke_style2 : UInt64
    create_path_geometry2 : UInt64
    create_drawing_state_block2 : UInt64
    create_gdi_metafile : UInt64
    register_effect_from_stream : UInt64
    register_effect_from_string : UInt64
    unregister_effect : UInt64
    get_registered_effects : UInt64
    get_effect_properties : UInt64
    create_device2 : UInt64
    create_device3 : UInt64
    create_device4 : UInt64
    create_device5 : UInt64
    create_device6 : UInt64
    create_device7 : UInt64
  end

  ID2D1Factory7_GUID = "bdc2bdd3-b96c-4de6-bdf7-99d4745454de"
  IID_ID2D1Factory7 = LibC::GUID.new(0xbdc2bdd3_u32, 0xb96c_u16, 0x4de6_u16, StaticArray[0xbd_u8, 0xf7_u8, 0x99_u8, 0xd4_u8, 0x74_u8, 0x54_u8, 0x54_u8, 0xde_u8])
  struct ID2D1Factory7
    lpVtbl : ID2D1Factory7VTbl*
  end

  struct ID2D1EffectContext1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_dpi : UInt64
    create_effect : UInt64
    get_maximum_supported_feature_level : UInt64
    create_transform_node_from_effect : UInt64
    create_blend_transform : UInt64
    create_border_transform : UInt64
    create_offset_transform : UInt64
    create_bounds_adjustment_transform : UInt64
    load_pixel_shader : UInt64
    load_vertex_shader : UInt64
    load_compute_shader : UInt64
    is_shader_loaded : UInt64
    create_resource_texture : UInt64
    find_resource_texture : UInt64
    create_vertex_buffer : UInt64
    find_vertex_buffer : UInt64
    create_color_context : UInt64
    create_color_context_from_filename : UInt64
    create_color_context_from_wic_color_context : UInt64
    check_feature_support : UInt64
    is_buffer_precision_supported : UInt64
    create_lookup_table3_d : UInt64
  end

  ID2D1EffectContext1_GUID = "84ab595a-fc81-4546-bacd-e8ef4d8abe7a"
  IID_ID2D1EffectContext1 = LibC::GUID.new(0x84ab595a_u32, 0xfc81_u16, 0x4546_u16, StaticArray[0xba_u8, 0xcd_u8, 0xe8_u8, 0xef_u8, 0x4d_u8, 0x8a_u8, 0xbe_u8, 0x7a_u8])
  struct ID2D1EffectContext1
    lpVtbl : ID2D1EffectContext1VTbl*
  end

  struct ID2D1EffectContext2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_dpi : UInt64
    create_effect : UInt64
    get_maximum_supported_feature_level : UInt64
    create_transform_node_from_effect : UInt64
    create_blend_transform : UInt64
    create_border_transform : UInt64
    create_offset_transform : UInt64
    create_bounds_adjustment_transform : UInt64
    load_pixel_shader : UInt64
    load_vertex_shader : UInt64
    load_compute_shader : UInt64
    is_shader_loaded : UInt64
    create_resource_texture : UInt64
    find_resource_texture : UInt64
    create_vertex_buffer : UInt64
    find_vertex_buffer : UInt64
    create_color_context : UInt64
    create_color_context_from_filename : UInt64
    create_color_context_from_wic_color_context : UInt64
    check_feature_support : UInt64
    is_buffer_precision_supported : UInt64
    create_lookup_table3_d : UInt64
    create_color_context_from_dxgi_color_space : UInt64
    create_color_context_from_simple_color_profile : UInt64
  end

  ID2D1EffectContext2_GUID = "577ad2a0-9fc7-4dda-8b18-dab810140052"
  IID_ID2D1EffectContext2 = LibC::GUID.new(0x577ad2a0_u32, 0x9fc7_u16, 0x4dda_u16, StaticArray[0x8b_u8, 0x18_u8, 0xda_u8, 0xb8_u8, 0x10_u8, 0x14_u8, 0x0_u8, 0x52_u8])
  struct ID2D1EffectContext2
    lpVtbl : ID2D1EffectContext2VTbl*
  end


  # Params # factorytype : D2D1_FACTORY_TYPE [In],riid : Guid* [In],pfactoryoptions : D2D1_FACTORY_OPTIONS* [In],ppifactory : Void** [In]
  fun D2D1CreateFactory(factorytype : D2D1_FACTORY_TYPE, riid : Guid*, pfactoryoptions : D2D1_FACTORY_OPTIONS*, ppifactory : Void**) : HRESULT

  # Params # angle : Float32 [In],center : D2D_POINT_2F [In],matrix : D2D_MATRIX_3X2_F* [In]
  fun D2D1MakeRotateMatrix(angle : Float32, center : D2D_POINT_2F, matrix : D2D_MATRIX_3X2_F*) : Void

  # Params # anglex : Float32 [In],angley : Float32 [In],center : D2D_POINT_2F [In],matrix : D2D_MATRIX_3X2_F* [In]
  fun D2D1MakeSkewMatrix(anglex : Float32, angley : Float32, center : D2D_POINT_2F, matrix : D2D_MATRIX_3X2_F*) : Void

  # Params # matrix : D2D_MATRIX_3X2_F* [In]
  fun D2D1IsMatrixInvertible(matrix : D2D_MATRIX_3X2_F*) : LibC::BOOL

  # Params # matrix : D2D_MATRIX_3X2_F* [In]
  fun D2D1InvertMatrix(matrix : D2D_MATRIX_3X2_F*) : LibC::BOOL

  # Params # dxgidevice : IDXGIDevice [In],creationproperties : D2D1_CREATION_PROPERTIES* [In],d2ddevice : ID2D1Device* [In]
  fun D2D1CreateDevice(dxgidevice : IDXGIDevice, creationproperties : D2D1_CREATION_PROPERTIES*, d2ddevice : ID2D1Device*) : HRESULT

  # Params # dxgisurface : IDXGISurface [In],creationproperties : D2D1_CREATION_PROPERTIES* [In],d2ddevicecontext : ID2D1DeviceContext* [In]
  fun D2D1CreateDeviceContext(dxgisurface : IDXGISurface, creationproperties : D2D1_CREATION_PROPERTIES*, d2ddevicecontext : ID2D1DeviceContext*) : HRESULT

  # Params # sourcecolorspace : D2D1_COLOR_SPACE [In],destinationcolorspace : D2D1_COLOR_SPACE [In],color : D2D1_COLOR_F* [In]
  fun D2D1ConvertColorSpace(sourcecolorspace : D2D1_COLOR_SPACE, destinationcolorspace : D2D1_COLOR_SPACE, color : D2D1_COLOR_F*) : D2D1_COLOR_F

  # Params # angle : Float32 [In],s : Float32* [In],c : Float32* [In]
  fun D2D1SinCos(angle : Float32, s : Float32*, c : Float32*) : Void

  # Params # angle : Float32 [In]
  fun D2D1Tan(angle : Float32) : Float32

  # Params # x : Float32 [In],y : Float32 [In],z : Float32 [In]
  fun D2D1Vec3Length(x : Float32, y : Float32, z : Float32) : Float32

  # Params # matrix : D2D_MATRIX_3X2_F* [In]
  fun D2D1ComputeMaximumScaleFactor(matrix : D2D_MATRIX_3X2_F*) : Float32

  # Params # ppoint0 : D2D_POINT_2F* [In],ppoint1 : D2D_POINT_2F* [In],ppoint2 : D2D_POINT_2F* [In],ppoint3 : D2D_POINT_2F* [In],ppoint4 : D2D_POINT_2F* [In],ppoint5 : D2D_POINT_2F* [In],ppoint6 : D2D_POINT_2F* [In],ppoint7 : D2D_POINT_2F* [In],ppoint8 : D2D_POINT_2F* [In],ppoint9 : D2D_POINT_2F* [In],ppoint10 : D2D_POINT_2F* [In],ppoint11 : D2D_POINT_2F* [In],ptensorpoint11 : D2D_POINT_2F* [In],ptensorpoint12 : D2D_POINT_2F* [In],ptensorpoint21 : D2D_POINT_2F* [In],ptensorpoint22 : D2D_POINT_2F* [In]
  fun D2D1GetGradientMeshInteriorPointsFromCoonsPatch(ppoint0 : D2D_POINT_2F*, ppoint1 : D2D_POINT_2F*, ppoint2 : D2D_POINT_2F*, ppoint3 : D2D_POINT_2F*, ppoint4 : D2D_POINT_2F*, ppoint5 : D2D_POINT_2F*, ppoint6 : D2D_POINT_2F*, ppoint7 : D2D_POINT_2F*, ppoint8 : D2D_POINT_2F*, ppoint9 : D2D_POINT_2F*, ppoint10 : D2D_POINT_2F*, ppoint11 : D2D_POINT_2F*, ptensorpoint11 : D2D_POINT_2F*, ptensorpoint12 : D2D_POINT_2F*, ptensorpoint21 : D2D_POINT_2F*, ptensorpoint22 : D2D_POINT_2F*) : Void
end
struct LibWin32::ID2D1Resource
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
end
struct LibWin32::ID2D1Image
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
end
struct LibWin32::ID2D1Bitmap
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def get_size : D2D_SIZE_F
    @lpVtbl.value.get_size.unsafe_as(Proc(D2D_SIZE_F)).call
  end
  def get_pixel_size : D2D_SIZE_U
    @lpVtbl.value.get_pixel_size.unsafe_as(Proc(D2D_SIZE_U)).call
  end
  def get_pixel_format : D2D1_PIXEL_FORMAT
    @lpVtbl.value.get_pixel_format.unsafe_as(Proc(D2D1_PIXEL_FORMAT)).call
  end
  def get_dpi(dpix : Float32*, dpiy : Float32*) : Void
    @lpVtbl.value.get_dpi.unsafe_as(Proc(Float32*, Float32*, Void)).call(dpix, dpiy)
  end
  def copy_from_bitmap(destpoint : D2D_POINT_2U*, bitmap : ID2D1Bitmap, srcrect : D2D_RECT_U*) : HRESULT
    @lpVtbl.value.copy_from_bitmap.unsafe_as(Proc(D2D_POINT_2U*, ID2D1Bitmap, D2D_RECT_U*, HRESULT)).call(destpoint, bitmap, srcrect)
  end
  def copy_from_render_target(destpoint : D2D_POINT_2U*, rendertarget : ID2D1RenderTarget, srcrect : D2D_RECT_U*) : HRESULT
    @lpVtbl.value.copy_from_render_target.unsafe_as(Proc(D2D_POINT_2U*, ID2D1RenderTarget, D2D_RECT_U*, HRESULT)).call(destpoint, rendertarget, srcrect)
  end
  def copy_from_memory(dstrect : D2D_RECT_U*, srcdata : Void*, pitch : UInt32) : HRESULT
    @lpVtbl.value.copy_from_memory.unsafe_as(Proc(D2D_RECT_U*, Void*, UInt32, HRESULT)).call(dstrect, srcdata, pitch)
  end
end
struct LibWin32::ID2D1GradientStopCollection
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def get_gradient_stop_count : UInt32
    @lpVtbl.value.get_gradient_stop_count.unsafe_as(Proc(UInt32)).call
  end
  def get_gradient_stops(gradientstops : D2D1_GRADIENT_STOP*, gradientstopscount : UInt32) : Void
    @lpVtbl.value.get_gradient_stops.unsafe_as(Proc(D2D1_GRADIENT_STOP*, UInt32, Void)).call(gradientstops, gradientstopscount)
  end
  def get_color_interpolation_gamma : D2D1_GAMMA
    @lpVtbl.value.get_color_interpolation_gamma.unsafe_as(Proc(D2D1_GAMMA)).call
  end
  def get_extend_mode : D2D1_EXTEND_MODE
    @lpVtbl.value.get_extend_mode.unsafe_as(Proc(D2D1_EXTEND_MODE)).call
  end
end
struct LibWin32::ID2D1Brush
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def set_opacity(opacity : Float32) : Void
    @lpVtbl.value.set_opacity.unsafe_as(Proc(Float32, Void)).call(opacity)
  end
  def set_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.set_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def get_opacity : Float32
    @lpVtbl.value.get_opacity.unsafe_as(Proc(Float32)).call
  end
  def get_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.get_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
end
struct LibWin32::ID2D1BitmapBrush
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def set_opacity(opacity : Float32) : Void
    @lpVtbl.value.set_opacity.unsafe_as(Proc(Float32, Void)).call(opacity)
  end
  def set_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.set_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def get_opacity : Float32
    @lpVtbl.value.get_opacity.unsafe_as(Proc(Float32)).call
  end
  def get_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.get_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def set_extend_mode_x(extendmodex : D2D1_EXTEND_MODE) : Void
    @lpVtbl.value.set_extend_mode_x.unsafe_as(Proc(D2D1_EXTEND_MODE, Void)).call(extendmodex)
  end
  def set_extend_mode_y(extendmodey : D2D1_EXTEND_MODE) : Void
    @lpVtbl.value.set_extend_mode_y.unsafe_as(Proc(D2D1_EXTEND_MODE, Void)).call(extendmodey)
  end
  def set_interpolation_mode(interpolationmode : D2D1_BITMAP_INTERPOLATION_MODE) : Void
    @lpVtbl.value.set_interpolation_mode.unsafe_as(Proc(D2D1_BITMAP_INTERPOLATION_MODE, Void)).call(interpolationmode)
  end
  def set_bitmap(bitmap : ID2D1Bitmap) : Void
    @lpVtbl.value.set_bitmap.unsafe_as(Proc(ID2D1Bitmap, Void)).call(bitmap)
  end
  def get_extend_mode_x : D2D1_EXTEND_MODE
    @lpVtbl.value.get_extend_mode_x.unsafe_as(Proc(D2D1_EXTEND_MODE)).call
  end
  def get_extend_mode_y : D2D1_EXTEND_MODE
    @lpVtbl.value.get_extend_mode_y.unsafe_as(Proc(D2D1_EXTEND_MODE)).call
  end
  def get_interpolation_mode : D2D1_BITMAP_INTERPOLATION_MODE
    @lpVtbl.value.get_interpolation_mode.unsafe_as(Proc(D2D1_BITMAP_INTERPOLATION_MODE)).call
  end
  def get_bitmap(bitmap : ID2D1Bitmap*) : Void
    @lpVtbl.value.get_bitmap.unsafe_as(Proc(ID2D1Bitmap*, Void)).call(bitmap)
  end
end
struct LibWin32::ID2D1SolidColorBrush
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def set_opacity(opacity : Float32) : Void
    @lpVtbl.value.set_opacity.unsafe_as(Proc(Float32, Void)).call(opacity)
  end
  def set_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.set_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def get_opacity : Float32
    @lpVtbl.value.get_opacity.unsafe_as(Proc(Float32)).call
  end
  def get_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.get_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def set_color(color : D2D1_COLOR_F*) : Void
    @lpVtbl.value.set_color.unsafe_as(Proc(D2D1_COLOR_F*, Void)).call(color)
  end
  def get_color : D2D1_COLOR_F
    @lpVtbl.value.get_color.unsafe_as(Proc(D2D1_COLOR_F)).call
  end
end
struct LibWin32::ID2D1LinearGradientBrush
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def set_opacity(opacity : Float32) : Void
    @lpVtbl.value.set_opacity.unsafe_as(Proc(Float32, Void)).call(opacity)
  end
  def set_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.set_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def get_opacity : Float32
    @lpVtbl.value.get_opacity.unsafe_as(Proc(Float32)).call
  end
  def get_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.get_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def set_start_point(startpoint : D2D_POINT_2F) : Void
    @lpVtbl.value.set_start_point.unsafe_as(Proc(D2D_POINT_2F, Void)).call(startpoint)
  end
  def set_end_point(endpoint : D2D_POINT_2F) : Void
    @lpVtbl.value.set_end_point.unsafe_as(Proc(D2D_POINT_2F, Void)).call(endpoint)
  end
  def get_start_point : D2D_POINT_2F
    @lpVtbl.value.get_start_point.unsafe_as(Proc(D2D_POINT_2F)).call
  end
  def get_end_point : D2D_POINT_2F
    @lpVtbl.value.get_end_point.unsafe_as(Proc(D2D_POINT_2F)).call
  end
  def get_gradient_stop_collection(gradientstopcollection : ID2D1GradientStopCollection*) : Void
    @lpVtbl.value.get_gradient_stop_collection.unsafe_as(Proc(ID2D1GradientStopCollection*, Void)).call(gradientstopcollection)
  end
end
struct LibWin32::ID2D1RadialGradientBrush
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def set_opacity(opacity : Float32) : Void
    @lpVtbl.value.set_opacity.unsafe_as(Proc(Float32, Void)).call(opacity)
  end
  def set_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.set_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def get_opacity : Float32
    @lpVtbl.value.get_opacity.unsafe_as(Proc(Float32)).call
  end
  def get_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.get_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def set_center(center : D2D_POINT_2F) : Void
    @lpVtbl.value.set_center.unsafe_as(Proc(D2D_POINT_2F, Void)).call(center)
  end
  def set_gradient_origin_offset(gradientoriginoffset : D2D_POINT_2F) : Void
    @lpVtbl.value.set_gradient_origin_offset.unsafe_as(Proc(D2D_POINT_2F, Void)).call(gradientoriginoffset)
  end
  def set_radius_x(radiusx : Float32) : Void
    @lpVtbl.value.set_radius_x.unsafe_as(Proc(Float32, Void)).call(radiusx)
  end
  def set_radius_y(radiusy : Float32) : Void
    @lpVtbl.value.set_radius_y.unsafe_as(Proc(Float32, Void)).call(radiusy)
  end
  def get_center : D2D_POINT_2F
    @lpVtbl.value.get_center.unsafe_as(Proc(D2D_POINT_2F)).call
  end
  def get_gradient_origin_offset : D2D_POINT_2F
    @lpVtbl.value.get_gradient_origin_offset.unsafe_as(Proc(D2D_POINT_2F)).call
  end
  def get_radius_x : Float32
    @lpVtbl.value.get_radius_x.unsafe_as(Proc(Float32)).call
  end
  def get_radius_y : Float32
    @lpVtbl.value.get_radius_y.unsafe_as(Proc(Float32)).call
  end
  def get_gradient_stop_collection(gradientstopcollection : ID2D1GradientStopCollection*) : Void
    @lpVtbl.value.get_gradient_stop_collection.unsafe_as(Proc(ID2D1GradientStopCollection*, Void)).call(gradientstopcollection)
  end
end
struct LibWin32::ID2D1StrokeStyle
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def get_start_cap : D2D1_CAP_STYLE
    @lpVtbl.value.get_start_cap.unsafe_as(Proc(D2D1_CAP_STYLE)).call
  end
  def get_end_cap : D2D1_CAP_STYLE
    @lpVtbl.value.get_end_cap.unsafe_as(Proc(D2D1_CAP_STYLE)).call
  end
  def get_dash_cap : D2D1_CAP_STYLE
    @lpVtbl.value.get_dash_cap.unsafe_as(Proc(D2D1_CAP_STYLE)).call
  end
  def get_miter_limit : Float32
    @lpVtbl.value.get_miter_limit.unsafe_as(Proc(Float32)).call
  end
  def get_line_join : D2D1_LINE_JOIN
    @lpVtbl.value.get_line_join.unsafe_as(Proc(D2D1_LINE_JOIN)).call
  end
  def get_dash_offset : Float32
    @lpVtbl.value.get_dash_offset.unsafe_as(Proc(Float32)).call
  end
  def get_dash_style : D2D1_DASH_STYLE
    @lpVtbl.value.get_dash_style.unsafe_as(Proc(D2D1_DASH_STYLE)).call
  end
  def get_dashes_count : UInt32
    @lpVtbl.value.get_dashes_count.unsafe_as(Proc(UInt32)).call
  end
  def get_dashes(dashes : Float32*, dashescount : UInt32) : Void
    @lpVtbl.value.get_dashes.unsafe_as(Proc(Float32*, UInt32, Void)).call(dashes, dashescount)
  end
end
struct LibWin32::ID2D1Geometry
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def get_bounds(worldtransform : D2D_MATRIX_3X2_F*, bounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_bounds.unsafe_as(Proc(D2D_MATRIX_3X2_F*, D2D_RECT_F*, HRESULT)).call(worldtransform, bounds)
  end
  def get_widened_bounds(strokewidth : Float32, strokestyle : ID2D1StrokeStyle, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, bounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_widened_bounds.unsafe_as(Proc(Float32, ID2D1StrokeStyle, D2D_MATRIX_3X2_F*, Float32, D2D_RECT_F*, HRESULT)).call(strokewidth, strokestyle, worldtransform, flatteningtolerance, bounds)
  end
  def stroke_contains_point(point : D2D_POINT_2F, strokewidth : Float32, strokestyle : ID2D1StrokeStyle, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, contains : LibC::BOOL*) : HRESULT
    @lpVtbl.value.stroke_contains_point.unsafe_as(Proc(D2D_POINT_2F, Float32, ID2D1StrokeStyle, D2D_MATRIX_3X2_F*, Float32, LibC::BOOL*, HRESULT)).call(point, strokewidth, strokestyle, worldtransform, flatteningtolerance, contains)
  end
  def fill_contains_point(point : D2D_POINT_2F, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, contains : LibC::BOOL*) : HRESULT
    @lpVtbl.value.fill_contains_point.unsafe_as(Proc(D2D_POINT_2F, D2D_MATRIX_3X2_F*, Float32, LibC::BOOL*, HRESULT)).call(point, worldtransform, flatteningtolerance, contains)
  end
  def compare_with_geometry(inputgeometry : ID2D1Geometry, inputgeometrytransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, relation : D2D1_GEOMETRY_RELATION*) : HRESULT
    @lpVtbl.value.compare_with_geometry.unsafe_as(Proc(ID2D1Geometry, D2D_MATRIX_3X2_F*, Float32, D2D1_GEOMETRY_RELATION*, HRESULT)).call(inputgeometry, inputgeometrytransform, flatteningtolerance, relation)
  end
  def simplify(simplificationoption : D2D1_GEOMETRY_SIMPLIFICATION_OPTION, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.simplify.unsafe_as(Proc(D2D1_GEOMETRY_SIMPLIFICATION_OPTION, D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(simplificationoption, worldtransform, flatteningtolerance, geometrysink)
  end
  def tessellate(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, tessellationsink : ID2D1TessellationSink) : HRESULT
    @lpVtbl.value.tessellate.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, ID2D1TessellationSink, HRESULT)).call(worldtransform, flatteningtolerance, tessellationsink)
  end
  def combine_with_geometry(inputgeometry : ID2D1Geometry, combinemode : D2D1_COMBINE_MODE, inputgeometrytransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.combine_with_geometry.unsafe_as(Proc(ID2D1Geometry, D2D1_COMBINE_MODE, D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(inputgeometry, combinemode, inputgeometrytransform, flatteningtolerance, geometrysink)
  end
  def outline(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.outline.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(worldtransform, flatteningtolerance, geometrysink)
  end
  def compute_area(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, area : Float32*) : HRESULT
    @lpVtbl.value.compute_area.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, Float32*, HRESULT)).call(worldtransform, flatteningtolerance, area)
  end
  def compute_length(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, length : Float32*) : HRESULT
    @lpVtbl.value.compute_length.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, Float32*, HRESULT)).call(worldtransform, flatteningtolerance, length)
  end
  def compute_point_at_length(length : Float32, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, point : D2D_POINT_2F*, unittangentvector : D2D_POINT_2F*) : HRESULT
    @lpVtbl.value.compute_point_at_length.unsafe_as(Proc(Float32, D2D_MATRIX_3X2_F*, Float32, D2D_POINT_2F*, D2D_POINT_2F*, HRESULT)).call(length, worldtransform, flatteningtolerance, point, unittangentvector)
  end
  def widen(strokewidth : Float32, strokestyle : ID2D1StrokeStyle, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.widen.unsafe_as(Proc(Float32, ID2D1StrokeStyle, D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(strokewidth, strokestyle, worldtransform, flatteningtolerance, geometrysink)
  end
end
struct LibWin32::ID2D1RectangleGeometry
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def get_bounds(worldtransform : D2D_MATRIX_3X2_F*, bounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_bounds.unsafe_as(Proc(D2D_MATRIX_3X2_F*, D2D_RECT_F*, HRESULT)).call(worldtransform, bounds)
  end
  def get_widened_bounds(strokewidth : Float32, strokestyle : ID2D1StrokeStyle, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, bounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_widened_bounds.unsafe_as(Proc(Float32, ID2D1StrokeStyle, D2D_MATRIX_3X2_F*, Float32, D2D_RECT_F*, HRESULT)).call(strokewidth, strokestyle, worldtransform, flatteningtolerance, bounds)
  end
  def stroke_contains_point(point : D2D_POINT_2F, strokewidth : Float32, strokestyle : ID2D1StrokeStyle, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, contains : LibC::BOOL*) : HRESULT
    @lpVtbl.value.stroke_contains_point.unsafe_as(Proc(D2D_POINT_2F, Float32, ID2D1StrokeStyle, D2D_MATRIX_3X2_F*, Float32, LibC::BOOL*, HRESULT)).call(point, strokewidth, strokestyle, worldtransform, flatteningtolerance, contains)
  end
  def fill_contains_point(point : D2D_POINT_2F, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, contains : LibC::BOOL*) : HRESULT
    @lpVtbl.value.fill_contains_point.unsafe_as(Proc(D2D_POINT_2F, D2D_MATRIX_3X2_F*, Float32, LibC::BOOL*, HRESULT)).call(point, worldtransform, flatteningtolerance, contains)
  end
  def compare_with_geometry(inputgeometry : ID2D1Geometry, inputgeometrytransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, relation : D2D1_GEOMETRY_RELATION*) : HRESULT
    @lpVtbl.value.compare_with_geometry.unsafe_as(Proc(ID2D1Geometry, D2D_MATRIX_3X2_F*, Float32, D2D1_GEOMETRY_RELATION*, HRESULT)).call(inputgeometry, inputgeometrytransform, flatteningtolerance, relation)
  end
  def simplify(simplificationoption : D2D1_GEOMETRY_SIMPLIFICATION_OPTION, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.simplify.unsafe_as(Proc(D2D1_GEOMETRY_SIMPLIFICATION_OPTION, D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(simplificationoption, worldtransform, flatteningtolerance, geometrysink)
  end
  def tessellate(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, tessellationsink : ID2D1TessellationSink) : HRESULT
    @lpVtbl.value.tessellate.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, ID2D1TessellationSink, HRESULT)).call(worldtransform, flatteningtolerance, tessellationsink)
  end
  def combine_with_geometry(inputgeometry : ID2D1Geometry, combinemode : D2D1_COMBINE_MODE, inputgeometrytransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.combine_with_geometry.unsafe_as(Proc(ID2D1Geometry, D2D1_COMBINE_MODE, D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(inputgeometry, combinemode, inputgeometrytransform, flatteningtolerance, geometrysink)
  end
  def outline(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.outline.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(worldtransform, flatteningtolerance, geometrysink)
  end
  def compute_area(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, area : Float32*) : HRESULT
    @lpVtbl.value.compute_area.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, Float32*, HRESULT)).call(worldtransform, flatteningtolerance, area)
  end
  def compute_length(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, length : Float32*) : HRESULT
    @lpVtbl.value.compute_length.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, Float32*, HRESULT)).call(worldtransform, flatteningtolerance, length)
  end
  def compute_point_at_length(length : Float32, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, point : D2D_POINT_2F*, unittangentvector : D2D_POINT_2F*) : HRESULT
    @lpVtbl.value.compute_point_at_length.unsafe_as(Proc(Float32, D2D_MATRIX_3X2_F*, Float32, D2D_POINT_2F*, D2D_POINT_2F*, HRESULT)).call(length, worldtransform, flatteningtolerance, point, unittangentvector)
  end
  def widen(strokewidth : Float32, strokestyle : ID2D1StrokeStyle, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.widen.unsafe_as(Proc(Float32, ID2D1StrokeStyle, D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(strokewidth, strokestyle, worldtransform, flatteningtolerance, geometrysink)
  end
  def get_rect(rect : D2D_RECT_F*) : Void
    @lpVtbl.value.get_rect.unsafe_as(Proc(D2D_RECT_F*, Void)).call(rect)
  end
end
struct LibWin32::ID2D1RoundedRectangleGeometry
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def get_bounds(worldtransform : D2D_MATRIX_3X2_F*, bounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_bounds.unsafe_as(Proc(D2D_MATRIX_3X2_F*, D2D_RECT_F*, HRESULT)).call(worldtransform, bounds)
  end
  def get_widened_bounds(strokewidth : Float32, strokestyle : ID2D1StrokeStyle, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, bounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_widened_bounds.unsafe_as(Proc(Float32, ID2D1StrokeStyle, D2D_MATRIX_3X2_F*, Float32, D2D_RECT_F*, HRESULT)).call(strokewidth, strokestyle, worldtransform, flatteningtolerance, bounds)
  end
  def stroke_contains_point(point : D2D_POINT_2F, strokewidth : Float32, strokestyle : ID2D1StrokeStyle, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, contains : LibC::BOOL*) : HRESULT
    @lpVtbl.value.stroke_contains_point.unsafe_as(Proc(D2D_POINT_2F, Float32, ID2D1StrokeStyle, D2D_MATRIX_3X2_F*, Float32, LibC::BOOL*, HRESULT)).call(point, strokewidth, strokestyle, worldtransform, flatteningtolerance, contains)
  end
  def fill_contains_point(point : D2D_POINT_2F, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, contains : LibC::BOOL*) : HRESULT
    @lpVtbl.value.fill_contains_point.unsafe_as(Proc(D2D_POINT_2F, D2D_MATRIX_3X2_F*, Float32, LibC::BOOL*, HRESULT)).call(point, worldtransform, flatteningtolerance, contains)
  end
  def compare_with_geometry(inputgeometry : ID2D1Geometry, inputgeometrytransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, relation : D2D1_GEOMETRY_RELATION*) : HRESULT
    @lpVtbl.value.compare_with_geometry.unsafe_as(Proc(ID2D1Geometry, D2D_MATRIX_3X2_F*, Float32, D2D1_GEOMETRY_RELATION*, HRESULT)).call(inputgeometry, inputgeometrytransform, flatteningtolerance, relation)
  end
  def simplify(simplificationoption : D2D1_GEOMETRY_SIMPLIFICATION_OPTION, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.simplify.unsafe_as(Proc(D2D1_GEOMETRY_SIMPLIFICATION_OPTION, D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(simplificationoption, worldtransform, flatteningtolerance, geometrysink)
  end
  def tessellate(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, tessellationsink : ID2D1TessellationSink) : HRESULT
    @lpVtbl.value.tessellate.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, ID2D1TessellationSink, HRESULT)).call(worldtransform, flatteningtolerance, tessellationsink)
  end
  def combine_with_geometry(inputgeometry : ID2D1Geometry, combinemode : D2D1_COMBINE_MODE, inputgeometrytransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.combine_with_geometry.unsafe_as(Proc(ID2D1Geometry, D2D1_COMBINE_MODE, D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(inputgeometry, combinemode, inputgeometrytransform, flatteningtolerance, geometrysink)
  end
  def outline(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.outline.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(worldtransform, flatteningtolerance, geometrysink)
  end
  def compute_area(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, area : Float32*) : HRESULT
    @lpVtbl.value.compute_area.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, Float32*, HRESULT)).call(worldtransform, flatteningtolerance, area)
  end
  def compute_length(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, length : Float32*) : HRESULT
    @lpVtbl.value.compute_length.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, Float32*, HRESULT)).call(worldtransform, flatteningtolerance, length)
  end
  def compute_point_at_length(length : Float32, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, point : D2D_POINT_2F*, unittangentvector : D2D_POINT_2F*) : HRESULT
    @lpVtbl.value.compute_point_at_length.unsafe_as(Proc(Float32, D2D_MATRIX_3X2_F*, Float32, D2D_POINT_2F*, D2D_POINT_2F*, HRESULT)).call(length, worldtransform, flatteningtolerance, point, unittangentvector)
  end
  def widen(strokewidth : Float32, strokestyle : ID2D1StrokeStyle, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.widen.unsafe_as(Proc(Float32, ID2D1StrokeStyle, D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(strokewidth, strokestyle, worldtransform, flatteningtolerance, geometrysink)
  end
  def get_rounded_rect(roundedrect : D2D1_ROUNDED_RECT*) : Void
    @lpVtbl.value.get_rounded_rect.unsafe_as(Proc(D2D1_ROUNDED_RECT*, Void)).call(roundedrect)
  end
end
struct LibWin32::ID2D1EllipseGeometry
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def get_bounds(worldtransform : D2D_MATRIX_3X2_F*, bounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_bounds.unsafe_as(Proc(D2D_MATRIX_3X2_F*, D2D_RECT_F*, HRESULT)).call(worldtransform, bounds)
  end
  def get_widened_bounds(strokewidth : Float32, strokestyle : ID2D1StrokeStyle, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, bounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_widened_bounds.unsafe_as(Proc(Float32, ID2D1StrokeStyle, D2D_MATRIX_3X2_F*, Float32, D2D_RECT_F*, HRESULT)).call(strokewidth, strokestyle, worldtransform, flatteningtolerance, bounds)
  end
  def stroke_contains_point(point : D2D_POINT_2F, strokewidth : Float32, strokestyle : ID2D1StrokeStyle, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, contains : LibC::BOOL*) : HRESULT
    @lpVtbl.value.stroke_contains_point.unsafe_as(Proc(D2D_POINT_2F, Float32, ID2D1StrokeStyle, D2D_MATRIX_3X2_F*, Float32, LibC::BOOL*, HRESULT)).call(point, strokewidth, strokestyle, worldtransform, flatteningtolerance, contains)
  end
  def fill_contains_point(point : D2D_POINT_2F, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, contains : LibC::BOOL*) : HRESULT
    @lpVtbl.value.fill_contains_point.unsafe_as(Proc(D2D_POINT_2F, D2D_MATRIX_3X2_F*, Float32, LibC::BOOL*, HRESULT)).call(point, worldtransform, flatteningtolerance, contains)
  end
  def compare_with_geometry(inputgeometry : ID2D1Geometry, inputgeometrytransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, relation : D2D1_GEOMETRY_RELATION*) : HRESULT
    @lpVtbl.value.compare_with_geometry.unsafe_as(Proc(ID2D1Geometry, D2D_MATRIX_3X2_F*, Float32, D2D1_GEOMETRY_RELATION*, HRESULT)).call(inputgeometry, inputgeometrytransform, flatteningtolerance, relation)
  end
  def simplify(simplificationoption : D2D1_GEOMETRY_SIMPLIFICATION_OPTION, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.simplify.unsafe_as(Proc(D2D1_GEOMETRY_SIMPLIFICATION_OPTION, D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(simplificationoption, worldtransform, flatteningtolerance, geometrysink)
  end
  def tessellate(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, tessellationsink : ID2D1TessellationSink) : HRESULT
    @lpVtbl.value.tessellate.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, ID2D1TessellationSink, HRESULT)).call(worldtransform, flatteningtolerance, tessellationsink)
  end
  def combine_with_geometry(inputgeometry : ID2D1Geometry, combinemode : D2D1_COMBINE_MODE, inputgeometrytransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.combine_with_geometry.unsafe_as(Proc(ID2D1Geometry, D2D1_COMBINE_MODE, D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(inputgeometry, combinemode, inputgeometrytransform, flatteningtolerance, geometrysink)
  end
  def outline(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.outline.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(worldtransform, flatteningtolerance, geometrysink)
  end
  def compute_area(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, area : Float32*) : HRESULT
    @lpVtbl.value.compute_area.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, Float32*, HRESULT)).call(worldtransform, flatteningtolerance, area)
  end
  def compute_length(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, length : Float32*) : HRESULT
    @lpVtbl.value.compute_length.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, Float32*, HRESULT)).call(worldtransform, flatteningtolerance, length)
  end
  def compute_point_at_length(length : Float32, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, point : D2D_POINT_2F*, unittangentvector : D2D_POINT_2F*) : HRESULT
    @lpVtbl.value.compute_point_at_length.unsafe_as(Proc(Float32, D2D_MATRIX_3X2_F*, Float32, D2D_POINT_2F*, D2D_POINT_2F*, HRESULT)).call(length, worldtransform, flatteningtolerance, point, unittangentvector)
  end
  def widen(strokewidth : Float32, strokestyle : ID2D1StrokeStyle, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.widen.unsafe_as(Proc(Float32, ID2D1StrokeStyle, D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(strokewidth, strokestyle, worldtransform, flatteningtolerance, geometrysink)
  end
  def get_ellipse(ellipse : D2D1_ELLIPSE*) : Void
    @lpVtbl.value.get_ellipse.unsafe_as(Proc(D2D1_ELLIPSE*, Void)).call(ellipse)
  end
end
struct LibWin32::ID2D1GeometryGroup
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def get_bounds(worldtransform : D2D_MATRIX_3X2_F*, bounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_bounds.unsafe_as(Proc(D2D_MATRIX_3X2_F*, D2D_RECT_F*, HRESULT)).call(worldtransform, bounds)
  end
  def get_widened_bounds(strokewidth : Float32, strokestyle : ID2D1StrokeStyle, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, bounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_widened_bounds.unsafe_as(Proc(Float32, ID2D1StrokeStyle, D2D_MATRIX_3X2_F*, Float32, D2D_RECT_F*, HRESULT)).call(strokewidth, strokestyle, worldtransform, flatteningtolerance, bounds)
  end
  def stroke_contains_point(point : D2D_POINT_2F, strokewidth : Float32, strokestyle : ID2D1StrokeStyle, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, contains : LibC::BOOL*) : HRESULT
    @lpVtbl.value.stroke_contains_point.unsafe_as(Proc(D2D_POINT_2F, Float32, ID2D1StrokeStyle, D2D_MATRIX_3X2_F*, Float32, LibC::BOOL*, HRESULT)).call(point, strokewidth, strokestyle, worldtransform, flatteningtolerance, contains)
  end
  def fill_contains_point(point : D2D_POINT_2F, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, contains : LibC::BOOL*) : HRESULT
    @lpVtbl.value.fill_contains_point.unsafe_as(Proc(D2D_POINT_2F, D2D_MATRIX_3X2_F*, Float32, LibC::BOOL*, HRESULT)).call(point, worldtransform, flatteningtolerance, contains)
  end
  def compare_with_geometry(inputgeometry : ID2D1Geometry, inputgeometrytransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, relation : D2D1_GEOMETRY_RELATION*) : HRESULT
    @lpVtbl.value.compare_with_geometry.unsafe_as(Proc(ID2D1Geometry, D2D_MATRIX_3X2_F*, Float32, D2D1_GEOMETRY_RELATION*, HRESULT)).call(inputgeometry, inputgeometrytransform, flatteningtolerance, relation)
  end
  def simplify(simplificationoption : D2D1_GEOMETRY_SIMPLIFICATION_OPTION, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.simplify.unsafe_as(Proc(D2D1_GEOMETRY_SIMPLIFICATION_OPTION, D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(simplificationoption, worldtransform, flatteningtolerance, geometrysink)
  end
  def tessellate(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, tessellationsink : ID2D1TessellationSink) : HRESULT
    @lpVtbl.value.tessellate.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, ID2D1TessellationSink, HRESULT)).call(worldtransform, flatteningtolerance, tessellationsink)
  end
  def combine_with_geometry(inputgeometry : ID2D1Geometry, combinemode : D2D1_COMBINE_MODE, inputgeometrytransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.combine_with_geometry.unsafe_as(Proc(ID2D1Geometry, D2D1_COMBINE_MODE, D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(inputgeometry, combinemode, inputgeometrytransform, flatteningtolerance, geometrysink)
  end
  def outline(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.outline.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(worldtransform, flatteningtolerance, geometrysink)
  end
  def compute_area(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, area : Float32*) : HRESULT
    @lpVtbl.value.compute_area.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, Float32*, HRESULT)).call(worldtransform, flatteningtolerance, area)
  end
  def compute_length(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, length : Float32*) : HRESULT
    @lpVtbl.value.compute_length.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, Float32*, HRESULT)).call(worldtransform, flatteningtolerance, length)
  end
  def compute_point_at_length(length : Float32, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, point : D2D_POINT_2F*, unittangentvector : D2D_POINT_2F*) : HRESULT
    @lpVtbl.value.compute_point_at_length.unsafe_as(Proc(Float32, D2D_MATRIX_3X2_F*, Float32, D2D_POINT_2F*, D2D_POINT_2F*, HRESULT)).call(length, worldtransform, flatteningtolerance, point, unittangentvector)
  end
  def widen(strokewidth : Float32, strokestyle : ID2D1StrokeStyle, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.widen.unsafe_as(Proc(Float32, ID2D1StrokeStyle, D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(strokewidth, strokestyle, worldtransform, flatteningtolerance, geometrysink)
  end
  def get_fill_mode : D2D1_FILL_MODE
    @lpVtbl.value.get_fill_mode.unsafe_as(Proc(D2D1_FILL_MODE)).call
  end
  def get_source_geometry_count : UInt32
    @lpVtbl.value.get_source_geometry_count.unsafe_as(Proc(UInt32)).call
  end
  def get_source_geometries(geometries : ID2D1Geometry*, geometriescount : UInt32) : Void
    @lpVtbl.value.get_source_geometries.unsafe_as(Proc(ID2D1Geometry*, UInt32, Void)).call(geometries, geometriescount)
  end
end
struct LibWin32::ID2D1TransformedGeometry
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def get_bounds(worldtransform : D2D_MATRIX_3X2_F*, bounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_bounds.unsafe_as(Proc(D2D_MATRIX_3X2_F*, D2D_RECT_F*, HRESULT)).call(worldtransform, bounds)
  end
  def get_widened_bounds(strokewidth : Float32, strokestyle : ID2D1StrokeStyle, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, bounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_widened_bounds.unsafe_as(Proc(Float32, ID2D1StrokeStyle, D2D_MATRIX_3X2_F*, Float32, D2D_RECT_F*, HRESULT)).call(strokewidth, strokestyle, worldtransform, flatteningtolerance, bounds)
  end
  def stroke_contains_point(point : D2D_POINT_2F, strokewidth : Float32, strokestyle : ID2D1StrokeStyle, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, contains : LibC::BOOL*) : HRESULT
    @lpVtbl.value.stroke_contains_point.unsafe_as(Proc(D2D_POINT_2F, Float32, ID2D1StrokeStyle, D2D_MATRIX_3X2_F*, Float32, LibC::BOOL*, HRESULT)).call(point, strokewidth, strokestyle, worldtransform, flatteningtolerance, contains)
  end
  def fill_contains_point(point : D2D_POINT_2F, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, contains : LibC::BOOL*) : HRESULT
    @lpVtbl.value.fill_contains_point.unsafe_as(Proc(D2D_POINT_2F, D2D_MATRIX_3X2_F*, Float32, LibC::BOOL*, HRESULT)).call(point, worldtransform, flatteningtolerance, contains)
  end
  def compare_with_geometry(inputgeometry : ID2D1Geometry, inputgeometrytransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, relation : D2D1_GEOMETRY_RELATION*) : HRESULT
    @lpVtbl.value.compare_with_geometry.unsafe_as(Proc(ID2D1Geometry, D2D_MATRIX_3X2_F*, Float32, D2D1_GEOMETRY_RELATION*, HRESULT)).call(inputgeometry, inputgeometrytransform, flatteningtolerance, relation)
  end
  def simplify(simplificationoption : D2D1_GEOMETRY_SIMPLIFICATION_OPTION, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.simplify.unsafe_as(Proc(D2D1_GEOMETRY_SIMPLIFICATION_OPTION, D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(simplificationoption, worldtransform, flatteningtolerance, geometrysink)
  end
  def tessellate(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, tessellationsink : ID2D1TessellationSink) : HRESULT
    @lpVtbl.value.tessellate.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, ID2D1TessellationSink, HRESULT)).call(worldtransform, flatteningtolerance, tessellationsink)
  end
  def combine_with_geometry(inputgeometry : ID2D1Geometry, combinemode : D2D1_COMBINE_MODE, inputgeometrytransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.combine_with_geometry.unsafe_as(Proc(ID2D1Geometry, D2D1_COMBINE_MODE, D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(inputgeometry, combinemode, inputgeometrytransform, flatteningtolerance, geometrysink)
  end
  def outline(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.outline.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(worldtransform, flatteningtolerance, geometrysink)
  end
  def compute_area(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, area : Float32*) : HRESULT
    @lpVtbl.value.compute_area.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, Float32*, HRESULT)).call(worldtransform, flatteningtolerance, area)
  end
  def compute_length(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, length : Float32*) : HRESULT
    @lpVtbl.value.compute_length.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, Float32*, HRESULT)).call(worldtransform, flatteningtolerance, length)
  end
  def compute_point_at_length(length : Float32, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, point : D2D_POINT_2F*, unittangentvector : D2D_POINT_2F*) : HRESULT
    @lpVtbl.value.compute_point_at_length.unsafe_as(Proc(Float32, D2D_MATRIX_3X2_F*, Float32, D2D_POINT_2F*, D2D_POINT_2F*, HRESULT)).call(length, worldtransform, flatteningtolerance, point, unittangentvector)
  end
  def widen(strokewidth : Float32, strokestyle : ID2D1StrokeStyle, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.widen.unsafe_as(Proc(Float32, ID2D1StrokeStyle, D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(strokewidth, strokestyle, worldtransform, flatteningtolerance, geometrysink)
  end
  def get_source_geometry(sourcegeometry : ID2D1Geometry*) : Void
    @lpVtbl.value.get_source_geometry.unsafe_as(Proc(ID2D1Geometry*, Void)).call(sourcegeometry)
  end
  def get_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.get_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
end
struct LibWin32::ID2D1GeometrySink
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_fill_mode(fillmode : D2D1_FILL_MODE) : Void
    @lpVtbl.value.set_fill_mode.unsafe_as(Proc(D2D1_FILL_MODE, Void)).call(fillmode)
  end
  def set_segment_flags(vertexflags : D2D1_PATH_SEGMENT) : Void
    @lpVtbl.value.set_segment_flags.unsafe_as(Proc(D2D1_PATH_SEGMENT, Void)).call(vertexflags)
  end
  def begin_figure(startpoint : D2D_POINT_2F, figurebegin : D2D1_FIGURE_BEGIN) : Void
    @lpVtbl.value.begin_figure.unsafe_as(Proc(D2D_POINT_2F, D2D1_FIGURE_BEGIN, Void)).call(startpoint, figurebegin)
  end
  def add_lines(points : D2D_POINT_2F*, pointscount : UInt32) : Void
    @lpVtbl.value.add_lines.unsafe_as(Proc(D2D_POINT_2F*, UInt32, Void)).call(points, pointscount)
  end
  def add_beziers(beziers : D2D1_BEZIER_SEGMENT*, bezierscount : UInt32) : Void
    @lpVtbl.value.add_beziers.unsafe_as(Proc(D2D1_BEZIER_SEGMENT*, UInt32, Void)).call(beziers, bezierscount)
  end
  def end_figure(figureend : D2D1_FIGURE_END) : Void
    @lpVtbl.value.end_figure.unsafe_as(Proc(D2D1_FIGURE_END, Void)).call(figureend)
  end
  def close : HRESULT
    @lpVtbl.value.close.unsafe_as(Proc(HRESULT)).call
  end
  def add_line(point : D2D_POINT_2F) : Void
    @lpVtbl.value.add_line.unsafe_as(Proc(D2D_POINT_2F, Void)).call(point)
  end
  def add_bezier(bezier : D2D1_BEZIER_SEGMENT*) : Void
    @lpVtbl.value.add_bezier.unsafe_as(Proc(D2D1_BEZIER_SEGMENT*, Void)).call(bezier)
  end
  def add_quadratic_bezier(bezier : D2D1_QUADRATIC_BEZIER_SEGMENT*) : Void
    @lpVtbl.value.add_quadratic_bezier.unsafe_as(Proc(D2D1_QUADRATIC_BEZIER_SEGMENT*, Void)).call(bezier)
  end
  def add_quadratic_beziers(beziers : D2D1_QUADRATIC_BEZIER_SEGMENT*, bezierscount : UInt32) : Void
    @lpVtbl.value.add_quadratic_beziers.unsafe_as(Proc(D2D1_QUADRATIC_BEZIER_SEGMENT*, UInt32, Void)).call(beziers, bezierscount)
  end
  def add_arc(arc : D2D1_ARC_SEGMENT*) : Void
    @lpVtbl.value.add_arc.unsafe_as(Proc(D2D1_ARC_SEGMENT*, Void)).call(arc)
  end
end
struct LibWin32::ID2D1TessellationSink
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def add_triangles(triangles : D2D1_TRIANGLE*, trianglescount : UInt32) : Void
    @lpVtbl.value.add_triangles.unsafe_as(Proc(D2D1_TRIANGLE*, UInt32, Void)).call(triangles, trianglescount)
  end
  def close : HRESULT
    @lpVtbl.value.close.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::ID2D1PathGeometry
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def get_bounds(worldtransform : D2D_MATRIX_3X2_F*, bounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_bounds.unsafe_as(Proc(D2D_MATRIX_3X2_F*, D2D_RECT_F*, HRESULT)).call(worldtransform, bounds)
  end
  def get_widened_bounds(strokewidth : Float32, strokestyle : ID2D1StrokeStyle, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, bounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_widened_bounds.unsafe_as(Proc(Float32, ID2D1StrokeStyle, D2D_MATRIX_3X2_F*, Float32, D2D_RECT_F*, HRESULT)).call(strokewidth, strokestyle, worldtransform, flatteningtolerance, bounds)
  end
  def stroke_contains_point(point : D2D_POINT_2F, strokewidth : Float32, strokestyle : ID2D1StrokeStyle, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, contains : LibC::BOOL*) : HRESULT
    @lpVtbl.value.stroke_contains_point.unsafe_as(Proc(D2D_POINT_2F, Float32, ID2D1StrokeStyle, D2D_MATRIX_3X2_F*, Float32, LibC::BOOL*, HRESULT)).call(point, strokewidth, strokestyle, worldtransform, flatteningtolerance, contains)
  end
  def fill_contains_point(point : D2D_POINT_2F, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, contains : LibC::BOOL*) : HRESULT
    @lpVtbl.value.fill_contains_point.unsafe_as(Proc(D2D_POINT_2F, D2D_MATRIX_3X2_F*, Float32, LibC::BOOL*, HRESULT)).call(point, worldtransform, flatteningtolerance, contains)
  end
  def compare_with_geometry(inputgeometry : ID2D1Geometry, inputgeometrytransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, relation : D2D1_GEOMETRY_RELATION*) : HRESULT
    @lpVtbl.value.compare_with_geometry.unsafe_as(Proc(ID2D1Geometry, D2D_MATRIX_3X2_F*, Float32, D2D1_GEOMETRY_RELATION*, HRESULT)).call(inputgeometry, inputgeometrytransform, flatteningtolerance, relation)
  end
  def simplify(simplificationoption : D2D1_GEOMETRY_SIMPLIFICATION_OPTION, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.simplify.unsafe_as(Proc(D2D1_GEOMETRY_SIMPLIFICATION_OPTION, D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(simplificationoption, worldtransform, flatteningtolerance, geometrysink)
  end
  def tessellate(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, tessellationsink : ID2D1TessellationSink) : HRESULT
    @lpVtbl.value.tessellate.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, ID2D1TessellationSink, HRESULT)).call(worldtransform, flatteningtolerance, tessellationsink)
  end
  def combine_with_geometry(inputgeometry : ID2D1Geometry, combinemode : D2D1_COMBINE_MODE, inputgeometrytransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.combine_with_geometry.unsafe_as(Proc(ID2D1Geometry, D2D1_COMBINE_MODE, D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(inputgeometry, combinemode, inputgeometrytransform, flatteningtolerance, geometrysink)
  end
  def outline(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.outline.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(worldtransform, flatteningtolerance, geometrysink)
  end
  def compute_area(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, area : Float32*) : HRESULT
    @lpVtbl.value.compute_area.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, Float32*, HRESULT)).call(worldtransform, flatteningtolerance, area)
  end
  def compute_length(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, length : Float32*) : HRESULT
    @lpVtbl.value.compute_length.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, Float32*, HRESULT)).call(worldtransform, flatteningtolerance, length)
  end
  def compute_point_at_length(length : Float32, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, point : D2D_POINT_2F*, unittangentvector : D2D_POINT_2F*) : HRESULT
    @lpVtbl.value.compute_point_at_length.unsafe_as(Proc(Float32, D2D_MATRIX_3X2_F*, Float32, D2D_POINT_2F*, D2D_POINT_2F*, HRESULT)).call(length, worldtransform, flatteningtolerance, point, unittangentvector)
  end
  def widen(strokewidth : Float32, strokestyle : ID2D1StrokeStyle, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.widen.unsafe_as(Proc(Float32, ID2D1StrokeStyle, D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(strokewidth, strokestyle, worldtransform, flatteningtolerance, geometrysink)
  end
  def open(geometrysink : ID2D1GeometrySink*) : HRESULT
    @lpVtbl.value.open.unsafe_as(Proc(ID2D1GeometrySink*, HRESULT)).call(geometrysink)
  end
  def stream(geometrysink : ID2D1GeometrySink) : HRESULT
    @lpVtbl.value.stream.unsafe_as(Proc(ID2D1GeometrySink, HRESULT)).call(geometrysink)
  end
  def get_segment_count(count : UInt32*) : HRESULT
    @lpVtbl.value.get_segment_count.unsafe_as(Proc(UInt32*, HRESULT)).call(count)
  end
  def get_figure_count(count : UInt32*) : HRESULT
    @lpVtbl.value.get_figure_count.unsafe_as(Proc(UInt32*, HRESULT)).call(count)
  end
end
struct LibWin32::ID2D1Mesh
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def open(tessellationsink : ID2D1TessellationSink*) : HRESULT
    @lpVtbl.value.open.unsafe_as(Proc(ID2D1TessellationSink*, HRESULT)).call(tessellationsink)
  end
end
struct LibWin32::ID2D1Layer
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def get_size : D2D_SIZE_F
    @lpVtbl.value.get_size.unsafe_as(Proc(D2D_SIZE_F)).call
  end
end
struct LibWin32::ID2D1DrawingStateBlock
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def get_description(statedescription : D2D1_DRAWING_STATE_DESCRIPTION*) : Void
    @lpVtbl.value.get_description.unsafe_as(Proc(D2D1_DRAWING_STATE_DESCRIPTION*, Void)).call(statedescription)
  end
  def set_description(statedescription : D2D1_DRAWING_STATE_DESCRIPTION*) : Void
    @lpVtbl.value.set_description.unsafe_as(Proc(D2D1_DRAWING_STATE_DESCRIPTION*, Void)).call(statedescription)
  end
  def set_text_rendering_params(textrenderingparams : IDWriteRenderingParams) : Void
    @lpVtbl.value.set_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams, Void)).call(textrenderingparams)
  end
  def get_text_rendering_params(textrenderingparams : IDWriteRenderingParams*) : Void
    @lpVtbl.value.get_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams*, Void)).call(textrenderingparams)
  end
end
struct LibWin32::ID2D1RenderTarget
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def create_bitmap(size : D2D_SIZE_U, srcdata : Void*, pitch : UInt32, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_bitmap.unsafe_as(Proc(D2D_SIZE_U, Void*, UInt32, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(size, srcdata, pitch, bitmapproperties, bitmap)
  end
  def create_bitmap_from_wic_bitmap(wicbitmapsource : IWICBitmapSource, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_bitmap_from_wic_bitmap.unsafe_as(Proc(IWICBitmapSource, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(wicbitmapsource, bitmapproperties, bitmap)
  end
  def create_shared_bitmap(riid : Guid*, data : Void*, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_shared_bitmap.unsafe_as(Proc(Guid*, Void*, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(riid, data, bitmapproperties, bitmap)
  end
  def create_bitmap_brush(bitmap : ID2D1Bitmap, bitmapbrushproperties : D2D1_BITMAP_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, bitmapbrush : ID2D1BitmapBrush*) : HRESULT
    @lpVtbl.value.create_bitmap_brush.unsafe_as(Proc(ID2D1Bitmap, D2D1_BITMAP_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush*, HRESULT)).call(bitmap, bitmapbrushproperties, brushproperties, bitmapbrush)
  end
  def create_solid_color_brush(color : D2D1_COLOR_F*, brushproperties : D2D1_BRUSH_PROPERTIES*, solidcolorbrush : ID2D1SolidColorBrush*) : HRESULT
    @lpVtbl.value.create_solid_color_brush.unsafe_as(Proc(D2D1_COLOR_F*, D2D1_BRUSH_PROPERTIES*, ID2D1SolidColorBrush*, HRESULT)).call(color, brushproperties, solidcolorbrush)
  end
  def create_gradient_stop_collection(gradientstops : D2D1_GRADIENT_STOP*, gradientstopscount : UInt32, colorinterpolationgamma : D2D1_GAMMA, extendmode : D2D1_EXTEND_MODE, gradientstopcollection : ID2D1GradientStopCollection*) : HRESULT
    @lpVtbl.value.create_gradient_stop_collection.unsafe_as(Proc(D2D1_GRADIENT_STOP*, UInt32, D2D1_GAMMA, D2D1_EXTEND_MODE, ID2D1GradientStopCollection*, HRESULT)).call(gradientstops, gradientstopscount, colorinterpolationgamma, extendmode, gradientstopcollection)
  end
  def create_linear_gradient_brush(lineargradientbrushproperties : D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, gradientstopcollection : ID2D1GradientStopCollection, lineargradientbrush : ID2D1LinearGradientBrush*) : HRESULT
    @lpVtbl.value.create_linear_gradient_brush.unsafe_as(Proc(D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection, ID2D1LinearGradientBrush*, HRESULT)).call(lineargradientbrushproperties, brushproperties, gradientstopcollection, lineargradientbrush)
  end
  def create_radial_gradient_brush(radialgradientbrushproperties : D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, gradientstopcollection : ID2D1GradientStopCollection, radialgradientbrush : ID2D1RadialGradientBrush*) : HRESULT
    @lpVtbl.value.create_radial_gradient_brush.unsafe_as(Proc(D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection, ID2D1RadialGradientBrush*, HRESULT)).call(radialgradientbrushproperties, brushproperties, gradientstopcollection, radialgradientbrush)
  end
  def create_compatible_render_target(desiredsize : D2D_SIZE_F*, desiredpixelsize : D2D_SIZE_U*, desiredformat : D2D1_PIXEL_FORMAT*, options : D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, bitmaprendertarget : ID2D1BitmapRenderTarget*) : HRESULT
    @lpVtbl.value.create_compatible_render_target.unsafe_as(Proc(D2D_SIZE_F*, D2D_SIZE_U*, D2D1_PIXEL_FORMAT*, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, ID2D1BitmapRenderTarget*, HRESULT)).call(desiredsize, desiredpixelsize, desiredformat, options, bitmaprendertarget)
  end
  def create_layer(size : D2D_SIZE_F*, layer : ID2D1Layer*) : HRESULT
    @lpVtbl.value.create_layer.unsafe_as(Proc(D2D_SIZE_F*, ID2D1Layer*, HRESULT)).call(size, layer)
  end
  def create_mesh(mesh : ID2D1Mesh*) : HRESULT
    @lpVtbl.value.create_mesh.unsafe_as(Proc(ID2D1Mesh*, HRESULT)).call(mesh)
  end
  def draw_line(point0 : D2D_POINT_2F, point1 : D2D_POINT_2F, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_line.unsafe_as(Proc(D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(point0, point1, brush, strokewidth, strokestyle)
  end
  def draw_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(rect, brush, strokewidth, strokestyle)
  end
  def fill_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Void)).call(rect, brush)
  end
  def draw_rounded_rectangle(roundedrect : D2D1_ROUNDED_RECT*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_rounded_rectangle.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(roundedrect, brush, strokewidth, strokestyle)
  end
  def fill_rounded_rectangle(roundedrect : D2D1_ROUNDED_RECT*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_rounded_rectangle.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1Brush, Void)).call(roundedrect, brush)
  end
  def draw_ellipse(ellipse : D2D1_ELLIPSE*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_ellipse.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(ellipse, brush, strokewidth, strokestyle)
  end
  def fill_ellipse(ellipse : D2D1_ELLIPSE*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_ellipse.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1Brush, Void)).call(ellipse, brush)
  end
  def draw_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(geometry, brush, strokewidth, strokestyle)
  end
  def fill_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, opacitybrush : ID2D1Brush) : Void
    @lpVtbl.value.fill_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, ID2D1Brush, Void)).call(geometry, brush, opacitybrush)
  end
  def fill_mesh(mesh : ID2D1Mesh, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_mesh.unsafe_as(Proc(ID2D1Mesh, ID2D1Brush, Void)).call(mesh, brush)
  end
  def fill_opacity_mask(opacitymask : ID2D1Bitmap, brush : ID2D1Brush, content : D2D1_OPACITY_MASK_CONTENT, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.fill_opacity_mask.unsafe_as(Proc(ID2D1Bitmap, ID2D1Brush, D2D1_OPACITY_MASK_CONTENT, D2D_RECT_F*, D2D_RECT_F*, Void)).call(opacitymask, brush, content, destinationrectangle, sourcerectangle)
  end
  def draw_bitmap(bitmap : ID2D1Bitmap, destinationrectangle : D2D_RECT_F*, opacity : Float32, interpolationmode : D2D1_BITMAP_INTERPOLATION_MODE, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.draw_bitmap.unsafe_as(Proc(ID2D1Bitmap, D2D_RECT_F*, Float32, D2D1_BITMAP_INTERPOLATION_MODE, D2D_RECT_F*, Void)).call(bitmap, destinationrectangle, opacity, interpolationmode, sourcerectangle)
  end
  def draw_text(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, layoutrect : D2D_RECT_F*, defaultfillbrush : ID2D1Brush, options : D2D1_DRAW_TEXT_OPTIONS, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_text.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, D2D_RECT_F*, ID2D1Brush, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE, Void)).call(string, stringlength, textformat, layoutrect, defaultfillbrush, options, measuringmode)
  end
  def draw_text_layout(origin : D2D_POINT_2F, textlayout : IDWriteTextLayout, defaultfillbrush : ID2D1Brush, options : D2D1_DRAW_TEXT_OPTIONS) : Void
    @lpVtbl.value.draw_text_layout.unsafe_as(Proc(D2D_POINT_2F, IDWriteTextLayout, ID2D1Brush, D2D1_DRAW_TEXT_OPTIONS, Void)).call(origin, textlayout, defaultfillbrush, options)
  end
  def draw_glyph_run(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, foregroundbrush : ID2D1Brush, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_glyph_run.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, ID2D1Brush, DWRITE_MEASURING_MODE, Void)).call(baselineorigin, glyphrun, foregroundbrush, measuringmode)
  end
  def set_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.set_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def get_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.get_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def set_antialias_mode(antialiasmode : D2D1_ANTIALIAS_MODE) : Void
    @lpVtbl.value.set_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE, Void)).call(antialiasmode)
  end
  def get_antialias_mode : D2D1_ANTIALIAS_MODE
    @lpVtbl.value.get_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE)).call
  end
  def set_text_antialias_mode(textantialiasmode : D2D1_TEXT_ANTIALIAS_MODE) : Void
    @lpVtbl.value.set_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE, Void)).call(textantialiasmode)
  end
  def get_text_antialias_mode : D2D1_TEXT_ANTIALIAS_MODE
    @lpVtbl.value.get_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE)).call
  end
  def set_text_rendering_params(textrenderingparams : IDWriteRenderingParams) : Void
    @lpVtbl.value.set_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams, Void)).call(textrenderingparams)
  end
  def get_text_rendering_params(textrenderingparams : IDWriteRenderingParams*) : Void
    @lpVtbl.value.get_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams*, Void)).call(textrenderingparams)
  end
  def set_tags(tag1 : UInt64, tag2 : UInt64) : Void
    @lpVtbl.value.set_tags.unsafe_as(Proc(UInt64, UInt64, Void)).call(tag1, tag2)
  end
  def get_tags(tag1 : UInt64*, tag2 : UInt64*) : Void
    @lpVtbl.value.get_tags.unsafe_as(Proc(UInt64*, UInt64*, Void)).call(tag1, tag2)
  end
  def push_layer(layerparameters : D2D1_LAYER_PARAMETERS*, layer : ID2D1Layer) : Void
    @lpVtbl.value.push_layer.unsafe_as(Proc(D2D1_LAYER_PARAMETERS*, ID2D1Layer, Void)).call(layerparameters, layer)
  end
  def pop_layer : Void
    @lpVtbl.value.pop_layer.unsafe_as(Proc(Void)).call
  end
  def flush(tag1 : UInt64*, tag2 : UInt64*) : HRESULT
    @lpVtbl.value.flush.unsafe_as(Proc(UInt64*, UInt64*, HRESULT)).call(tag1, tag2)
  end
  def save_drawing_state(drawingstateblock : ID2D1DrawingStateBlock) : Void
    @lpVtbl.value.save_drawing_state.unsafe_as(Proc(ID2D1DrawingStateBlock, Void)).call(drawingstateblock)
  end
  def restore_drawing_state(drawingstateblock : ID2D1DrawingStateBlock) : Void
    @lpVtbl.value.restore_drawing_state.unsafe_as(Proc(ID2D1DrawingStateBlock, Void)).call(drawingstateblock)
  end
  def push_axis_aligned_clip(cliprect : D2D_RECT_F*, antialiasmode : D2D1_ANTIALIAS_MODE) : Void
    @lpVtbl.value.push_axis_aligned_clip.unsafe_as(Proc(D2D_RECT_F*, D2D1_ANTIALIAS_MODE, Void)).call(cliprect, antialiasmode)
  end
  def pop_axis_aligned_clip : Void
    @lpVtbl.value.pop_axis_aligned_clip.unsafe_as(Proc(Void)).call
  end
  def clear(clearcolor : D2D1_COLOR_F*) : Void
    @lpVtbl.value.clear.unsafe_as(Proc(D2D1_COLOR_F*, Void)).call(clearcolor)
  end
  def begin_draw : Void
    @lpVtbl.value.begin_draw.unsafe_as(Proc(Void)).call
  end
  def end_draw(tag1 : UInt64*, tag2 : UInt64*) : HRESULT
    @lpVtbl.value.end_draw.unsafe_as(Proc(UInt64*, UInt64*, HRESULT)).call(tag1, tag2)
  end
  def get_pixel_format : D2D1_PIXEL_FORMAT
    @lpVtbl.value.get_pixel_format.unsafe_as(Proc(D2D1_PIXEL_FORMAT)).call
  end
  def set_dpi(dpix : Float32, dpiy : Float32) : Void
    @lpVtbl.value.set_dpi.unsafe_as(Proc(Float32, Float32, Void)).call(dpix, dpiy)
  end
  def get_dpi(dpix : Float32*, dpiy : Float32*) : Void
    @lpVtbl.value.get_dpi.unsafe_as(Proc(Float32*, Float32*, Void)).call(dpix, dpiy)
  end
  def get_size : D2D_SIZE_F
    @lpVtbl.value.get_size.unsafe_as(Proc(D2D_SIZE_F)).call
  end
  def get_pixel_size : D2D_SIZE_U
    @lpVtbl.value.get_pixel_size.unsafe_as(Proc(D2D_SIZE_U)).call
  end
  def get_maximum_bitmap_size : UInt32
    @lpVtbl.value.get_maximum_bitmap_size.unsafe_as(Proc(UInt32)).call
  end
  def is_supported(rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*) : LibC::BOOL
    @lpVtbl.value.is_supported.unsafe_as(Proc(D2D1_RENDER_TARGET_PROPERTIES*, LibC::BOOL)).call(rendertargetproperties)
  end
end
struct LibWin32::ID2D1BitmapRenderTarget
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def create_bitmap(size : D2D_SIZE_U, srcdata : Void*, pitch : UInt32, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_bitmap.unsafe_as(Proc(D2D_SIZE_U, Void*, UInt32, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(size, srcdata, pitch, bitmapproperties, bitmap)
  end
  def create_bitmap_from_wic_bitmap(wicbitmapsource : IWICBitmapSource, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_bitmap_from_wic_bitmap.unsafe_as(Proc(IWICBitmapSource, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(wicbitmapsource, bitmapproperties, bitmap)
  end
  def create_shared_bitmap(riid : Guid*, data : Void*, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_shared_bitmap.unsafe_as(Proc(Guid*, Void*, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(riid, data, bitmapproperties, bitmap)
  end
  def create_bitmap_brush(bitmap : ID2D1Bitmap, bitmapbrushproperties : D2D1_BITMAP_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, bitmapbrush : ID2D1BitmapBrush*) : HRESULT
    @lpVtbl.value.create_bitmap_brush.unsafe_as(Proc(ID2D1Bitmap, D2D1_BITMAP_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush*, HRESULT)).call(bitmap, bitmapbrushproperties, brushproperties, bitmapbrush)
  end
  def create_solid_color_brush(color : D2D1_COLOR_F*, brushproperties : D2D1_BRUSH_PROPERTIES*, solidcolorbrush : ID2D1SolidColorBrush*) : HRESULT
    @lpVtbl.value.create_solid_color_brush.unsafe_as(Proc(D2D1_COLOR_F*, D2D1_BRUSH_PROPERTIES*, ID2D1SolidColorBrush*, HRESULT)).call(color, brushproperties, solidcolorbrush)
  end
  def create_gradient_stop_collection(gradientstops : D2D1_GRADIENT_STOP*, gradientstopscount : UInt32, colorinterpolationgamma : D2D1_GAMMA, extendmode : D2D1_EXTEND_MODE, gradientstopcollection : ID2D1GradientStopCollection*) : HRESULT
    @lpVtbl.value.create_gradient_stop_collection.unsafe_as(Proc(D2D1_GRADIENT_STOP*, UInt32, D2D1_GAMMA, D2D1_EXTEND_MODE, ID2D1GradientStopCollection*, HRESULT)).call(gradientstops, gradientstopscount, colorinterpolationgamma, extendmode, gradientstopcollection)
  end
  def create_linear_gradient_brush(lineargradientbrushproperties : D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, gradientstopcollection : ID2D1GradientStopCollection, lineargradientbrush : ID2D1LinearGradientBrush*) : HRESULT
    @lpVtbl.value.create_linear_gradient_brush.unsafe_as(Proc(D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection, ID2D1LinearGradientBrush*, HRESULT)).call(lineargradientbrushproperties, brushproperties, gradientstopcollection, lineargradientbrush)
  end
  def create_radial_gradient_brush(radialgradientbrushproperties : D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, gradientstopcollection : ID2D1GradientStopCollection, radialgradientbrush : ID2D1RadialGradientBrush*) : HRESULT
    @lpVtbl.value.create_radial_gradient_brush.unsafe_as(Proc(D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection, ID2D1RadialGradientBrush*, HRESULT)).call(radialgradientbrushproperties, brushproperties, gradientstopcollection, radialgradientbrush)
  end
  def create_compatible_render_target(desiredsize : D2D_SIZE_F*, desiredpixelsize : D2D_SIZE_U*, desiredformat : D2D1_PIXEL_FORMAT*, options : D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, bitmaprendertarget : ID2D1BitmapRenderTarget*) : HRESULT
    @lpVtbl.value.create_compatible_render_target.unsafe_as(Proc(D2D_SIZE_F*, D2D_SIZE_U*, D2D1_PIXEL_FORMAT*, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, ID2D1BitmapRenderTarget*, HRESULT)).call(desiredsize, desiredpixelsize, desiredformat, options, bitmaprendertarget)
  end
  def create_layer(size : D2D_SIZE_F*, layer : ID2D1Layer*) : HRESULT
    @lpVtbl.value.create_layer.unsafe_as(Proc(D2D_SIZE_F*, ID2D1Layer*, HRESULT)).call(size, layer)
  end
  def create_mesh(mesh : ID2D1Mesh*) : HRESULT
    @lpVtbl.value.create_mesh.unsafe_as(Proc(ID2D1Mesh*, HRESULT)).call(mesh)
  end
  def draw_line(point0 : D2D_POINT_2F, point1 : D2D_POINT_2F, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_line.unsafe_as(Proc(D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(point0, point1, brush, strokewidth, strokestyle)
  end
  def draw_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(rect, brush, strokewidth, strokestyle)
  end
  def fill_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Void)).call(rect, brush)
  end
  def draw_rounded_rectangle(roundedrect : D2D1_ROUNDED_RECT*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_rounded_rectangle.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(roundedrect, brush, strokewidth, strokestyle)
  end
  def fill_rounded_rectangle(roundedrect : D2D1_ROUNDED_RECT*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_rounded_rectangle.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1Brush, Void)).call(roundedrect, brush)
  end
  def draw_ellipse(ellipse : D2D1_ELLIPSE*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_ellipse.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(ellipse, brush, strokewidth, strokestyle)
  end
  def fill_ellipse(ellipse : D2D1_ELLIPSE*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_ellipse.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1Brush, Void)).call(ellipse, brush)
  end
  def draw_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(geometry, brush, strokewidth, strokestyle)
  end
  def fill_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, opacitybrush : ID2D1Brush) : Void
    @lpVtbl.value.fill_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, ID2D1Brush, Void)).call(geometry, brush, opacitybrush)
  end
  def fill_mesh(mesh : ID2D1Mesh, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_mesh.unsafe_as(Proc(ID2D1Mesh, ID2D1Brush, Void)).call(mesh, brush)
  end
  def fill_opacity_mask(opacitymask : ID2D1Bitmap, brush : ID2D1Brush, content : D2D1_OPACITY_MASK_CONTENT, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.fill_opacity_mask.unsafe_as(Proc(ID2D1Bitmap, ID2D1Brush, D2D1_OPACITY_MASK_CONTENT, D2D_RECT_F*, D2D_RECT_F*, Void)).call(opacitymask, brush, content, destinationrectangle, sourcerectangle)
  end
  def draw_bitmap(bitmap : ID2D1Bitmap, destinationrectangle : D2D_RECT_F*, opacity : Float32, interpolationmode : D2D1_BITMAP_INTERPOLATION_MODE, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.draw_bitmap.unsafe_as(Proc(ID2D1Bitmap, D2D_RECT_F*, Float32, D2D1_BITMAP_INTERPOLATION_MODE, D2D_RECT_F*, Void)).call(bitmap, destinationrectangle, opacity, interpolationmode, sourcerectangle)
  end
  def draw_text(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, layoutrect : D2D_RECT_F*, defaultfillbrush : ID2D1Brush, options : D2D1_DRAW_TEXT_OPTIONS, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_text.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, D2D_RECT_F*, ID2D1Brush, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE, Void)).call(string, stringlength, textformat, layoutrect, defaultfillbrush, options, measuringmode)
  end
  def draw_text_layout(origin : D2D_POINT_2F, textlayout : IDWriteTextLayout, defaultfillbrush : ID2D1Brush, options : D2D1_DRAW_TEXT_OPTIONS) : Void
    @lpVtbl.value.draw_text_layout.unsafe_as(Proc(D2D_POINT_2F, IDWriteTextLayout, ID2D1Brush, D2D1_DRAW_TEXT_OPTIONS, Void)).call(origin, textlayout, defaultfillbrush, options)
  end
  def draw_glyph_run(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, foregroundbrush : ID2D1Brush, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_glyph_run.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, ID2D1Brush, DWRITE_MEASURING_MODE, Void)).call(baselineorigin, glyphrun, foregroundbrush, measuringmode)
  end
  def set_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.set_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def get_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.get_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def set_antialias_mode(antialiasmode : D2D1_ANTIALIAS_MODE) : Void
    @lpVtbl.value.set_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE, Void)).call(antialiasmode)
  end
  def get_antialias_mode : D2D1_ANTIALIAS_MODE
    @lpVtbl.value.get_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE)).call
  end
  def set_text_antialias_mode(textantialiasmode : D2D1_TEXT_ANTIALIAS_MODE) : Void
    @lpVtbl.value.set_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE, Void)).call(textantialiasmode)
  end
  def get_text_antialias_mode : D2D1_TEXT_ANTIALIAS_MODE
    @lpVtbl.value.get_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE)).call
  end
  def set_text_rendering_params(textrenderingparams : IDWriteRenderingParams) : Void
    @lpVtbl.value.set_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams, Void)).call(textrenderingparams)
  end
  def get_text_rendering_params(textrenderingparams : IDWriteRenderingParams*) : Void
    @lpVtbl.value.get_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams*, Void)).call(textrenderingparams)
  end
  def set_tags(tag1 : UInt64, tag2 : UInt64) : Void
    @lpVtbl.value.set_tags.unsafe_as(Proc(UInt64, UInt64, Void)).call(tag1, tag2)
  end
  def get_tags(tag1 : UInt64*, tag2 : UInt64*) : Void
    @lpVtbl.value.get_tags.unsafe_as(Proc(UInt64*, UInt64*, Void)).call(tag1, tag2)
  end
  def push_layer(layerparameters : D2D1_LAYER_PARAMETERS*, layer : ID2D1Layer) : Void
    @lpVtbl.value.push_layer.unsafe_as(Proc(D2D1_LAYER_PARAMETERS*, ID2D1Layer, Void)).call(layerparameters, layer)
  end
  def pop_layer : Void
    @lpVtbl.value.pop_layer.unsafe_as(Proc(Void)).call
  end
  def flush(tag1 : UInt64*, tag2 : UInt64*) : HRESULT
    @lpVtbl.value.flush.unsafe_as(Proc(UInt64*, UInt64*, HRESULT)).call(tag1, tag2)
  end
  def save_drawing_state(drawingstateblock : ID2D1DrawingStateBlock) : Void
    @lpVtbl.value.save_drawing_state.unsafe_as(Proc(ID2D1DrawingStateBlock, Void)).call(drawingstateblock)
  end
  def restore_drawing_state(drawingstateblock : ID2D1DrawingStateBlock) : Void
    @lpVtbl.value.restore_drawing_state.unsafe_as(Proc(ID2D1DrawingStateBlock, Void)).call(drawingstateblock)
  end
  def push_axis_aligned_clip(cliprect : D2D_RECT_F*, antialiasmode : D2D1_ANTIALIAS_MODE) : Void
    @lpVtbl.value.push_axis_aligned_clip.unsafe_as(Proc(D2D_RECT_F*, D2D1_ANTIALIAS_MODE, Void)).call(cliprect, antialiasmode)
  end
  def pop_axis_aligned_clip : Void
    @lpVtbl.value.pop_axis_aligned_clip.unsafe_as(Proc(Void)).call
  end
  def clear(clearcolor : D2D1_COLOR_F*) : Void
    @lpVtbl.value.clear.unsafe_as(Proc(D2D1_COLOR_F*, Void)).call(clearcolor)
  end
  def begin_draw : Void
    @lpVtbl.value.begin_draw.unsafe_as(Proc(Void)).call
  end
  def end_draw(tag1 : UInt64*, tag2 : UInt64*) : HRESULT
    @lpVtbl.value.end_draw.unsafe_as(Proc(UInt64*, UInt64*, HRESULT)).call(tag1, tag2)
  end
  def get_pixel_format : D2D1_PIXEL_FORMAT
    @lpVtbl.value.get_pixel_format.unsafe_as(Proc(D2D1_PIXEL_FORMAT)).call
  end
  def set_dpi(dpix : Float32, dpiy : Float32) : Void
    @lpVtbl.value.set_dpi.unsafe_as(Proc(Float32, Float32, Void)).call(dpix, dpiy)
  end
  def get_dpi(dpix : Float32*, dpiy : Float32*) : Void
    @lpVtbl.value.get_dpi.unsafe_as(Proc(Float32*, Float32*, Void)).call(dpix, dpiy)
  end
  def get_size : D2D_SIZE_F
    @lpVtbl.value.get_size.unsafe_as(Proc(D2D_SIZE_F)).call
  end
  def get_pixel_size : D2D_SIZE_U
    @lpVtbl.value.get_pixel_size.unsafe_as(Proc(D2D_SIZE_U)).call
  end
  def get_maximum_bitmap_size : UInt32
    @lpVtbl.value.get_maximum_bitmap_size.unsafe_as(Proc(UInt32)).call
  end
  def is_supported(rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*) : LibC::BOOL
    @lpVtbl.value.is_supported.unsafe_as(Proc(D2D1_RENDER_TARGET_PROPERTIES*, LibC::BOOL)).call(rendertargetproperties)
  end
  def get_bitmap(bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.get_bitmap.unsafe_as(Proc(ID2D1Bitmap*, HRESULT)).call(bitmap)
  end
end
struct LibWin32::ID2D1HwndRenderTarget
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def create_bitmap(size : D2D_SIZE_U, srcdata : Void*, pitch : UInt32, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_bitmap.unsafe_as(Proc(D2D_SIZE_U, Void*, UInt32, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(size, srcdata, pitch, bitmapproperties, bitmap)
  end
  def create_bitmap_from_wic_bitmap(wicbitmapsource : IWICBitmapSource, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_bitmap_from_wic_bitmap.unsafe_as(Proc(IWICBitmapSource, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(wicbitmapsource, bitmapproperties, bitmap)
  end
  def create_shared_bitmap(riid : Guid*, data : Void*, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_shared_bitmap.unsafe_as(Proc(Guid*, Void*, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(riid, data, bitmapproperties, bitmap)
  end
  def create_bitmap_brush(bitmap : ID2D1Bitmap, bitmapbrushproperties : D2D1_BITMAP_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, bitmapbrush : ID2D1BitmapBrush*) : HRESULT
    @lpVtbl.value.create_bitmap_brush.unsafe_as(Proc(ID2D1Bitmap, D2D1_BITMAP_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush*, HRESULT)).call(bitmap, bitmapbrushproperties, brushproperties, bitmapbrush)
  end
  def create_solid_color_brush(color : D2D1_COLOR_F*, brushproperties : D2D1_BRUSH_PROPERTIES*, solidcolorbrush : ID2D1SolidColorBrush*) : HRESULT
    @lpVtbl.value.create_solid_color_brush.unsafe_as(Proc(D2D1_COLOR_F*, D2D1_BRUSH_PROPERTIES*, ID2D1SolidColorBrush*, HRESULT)).call(color, brushproperties, solidcolorbrush)
  end
  def create_gradient_stop_collection(gradientstops : D2D1_GRADIENT_STOP*, gradientstopscount : UInt32, colorinterpolationgamma : D2D1_GAMMA, extendmode : D2D1_EXTEND_MODE, gradientstopcollection : ID2D1GradientStopCollection*) : HRESULT
    @lpVtbl.value.create_gradient_stop_collection.unsafe_as(Proc(D2D1_GRADIENT_STOP*, UInt32, D2D1_GAMMA, D2D1_EXTEND_MODE, ID2D1GradientStopCollection*, HRESULT)).call(gradientstops, gradientstopscount, colorinterpolationgamma, extendmode, gradientstopcollection)
  end
  def create_linear_gradient_brush(lineargradientbrushproperties : D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, gradientstopcollection : ID2D1GradientStopCollection, lineargradientbrush : ID2D1LinearGradientBrush*) : HRESULT
    @lpVtbl.value.create_linear_gradient_brush.unsafe_as(Proc(D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection, ID2D1LinearGradientBrush*, HRESULT)).call(lineargradientbrushproperties, brushproperties, gradientstopcollection, lineargradientbrush)
  end
  def create_radial_gradient_brush(radialgradientbrushproperties : D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, gradientstopcollection : ID2D1GradientStopCollection, radialgradientbrush : ID2D1RadialGradientBrush*) : HRESULT
    @lpVtbl.value.create_radial_gradient_brush.unsafe_as(Proc(D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection, ID2D1RadialGradientBrush*, HRESULT)).call(radialgradientbrushproperties, brushproperties, gradientstopcollection, radialgradientbrush)
  end
  def create_compatible_render_target(desiredsize : D2D_SIZE_F*, desiredpixelsize : D2D_SIZE_U*, desiredformat : D2D1_PIXEL_FORMAT*, options : D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, bitmaprendertarget : ID2D1BitmapRenderTarget*) : HRESULT
    @lpVtbl.value.create_compatible_render_target.unsafe_as(Proc(D2D_SIZE_F*, D2D_SIZE_U*, D2D1_PIXEL_FORMAT*, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, ID2D1BitmapRenderTarget*, HRESULT)).call(desiredsize, desiredpixelsize, desiredformat, options, bitmaprendertarget)
  end
  def create_layer(size : D2D_SIZE_F*, layer : ID2D1Layer*) : HRESULT
    @lpVtbl.value.create_layer.unsafe_as(Proc(D2D_SIZE_F*, ID2D1Layer*, HRESULT)).call(size, layer)
  end
  def create_mesh(mesh : ID2D1Mesh*) : HRESULT
    @lpVtbl.value.create_mesh.unsafe_as(Proc(ID2D1Mesh*, HRESULT)).call(mesh)
  end
  def draw_line(point0 : D2D_POINT_2F, point1 : D2D_POINT_2F, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_line.unsafe_as(Proc(D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(point0, point1, brush, strokewidth, strokestyle)
  end
  def draw_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(rect, brush, strokewidth, strokestyle)
  end
  def fill_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Void)).call(rect, brush)
  end
  def draw_rounded_rectangle(roundedrect : D2D1_ROUNDED_RECT*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_rounded_rectangle.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(roundedrect, brush, strokewidth, strokestyle)
  end
  def fill_rounded_rectangle(roundedrect : D2D1_ROUNDED_RECT*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_rounded_rectangle.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1Brush, Void)).call(roundedrect, brush)
  end
  def draw_ellipse(ellipse : D2D1_ELLIPSE*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_ellipse.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(ellipse, brush, strokewidth, strokestyle)
  end
  def fill_ellipse(ellipse : D2D1_ELLIPSE*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_ellipse.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1Brush, Void)).call(ellipse, brush)
  end
  def draw_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(geometry, brush, strokewidth, strokestyle)
  end
  def fill_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, opacitybrush : ID2D1Brush) : Void
    @lpVtbl.value.fill_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, ID2D1Brush, Void)).call(geometry, brush, opacitybrush)
  end
  def fill_mesh(mesh : ID2D1Mesh, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_mesh.unsafe_as(Proc(ID2D1Mesh, ID2D1Brush, Void)).call(mesh, brush)
  end
  def fill_opacity_mask(opacitymask : ID2D1Bitmap, brush : ID2D1Brush, content : D2D1_OPACITY_MASK_CONTENT, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.fill_opacity_mask.unsafe_as(Proc(ID2D1Bitmap, ID2D1Brush, D2D1_OPACITY_MASK_CONTENT, D2D_RECT_F*, D2D_RECT_F*, Void)).call(opacitymask, brush, content, destinationrectangle, sourcerectangle)
  end
  def draw_bitmap(bitmap : ID2D1Bitmap, destinationrectangle : D2D_RECT_F*, opacity : Float32, interpolationmode : D2D1_BITMAP_INTERPOLATION_MODE, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.draw_bitmap.unsafe_as(Proc(ID2D1Bitmap, D2D_RECT_F*, Float32, D2D1_BITMAP_INTERPOLATION_MODE, D2D_RECT_F*, Void)).call(bitmap, destinationrectangle, opacity, interpolationmode, sourcerectangle)
  end
  def draw_text(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, layoutrect : D2D_RECT_F*, defaultfillbrush : ID2D1Brush, options : D2D1_DRAW_TEXT_OPTIONS, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_text.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, D2D_RECT_F*, ID2D1Brush, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE, Void)).call(string, stringlength, textformat, layoutrect, defaultfillbrush, options, measuringmode)
  end
  def draw_text_layout(origin : D2D_POINT_2F, textlayout : IDWriteTextLayout, defaultfillbrush : ID2D1Brush, options : D2D1_DRAW_TEXT_OPTIONS) : Void
    @lpVtbl.value.draw_text_layout.unsafe_as(Proc(D2D_POINT_2F, IDWriteTextLayout, ID2D1Brush, D2D1_DRAW_TEXT_OPTIONS, Void)).call(origin, textlayout, defaultfillbrush, options)
  end
  def draw_glyph_run(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, foregroundbrush : ID2D1Brush, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_glyph_run.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, ID2D1Brush, DWRITE_MEASURING_MODE, Void)).call(baselineorigin, glyphrun, foregroundbrush, measuringmode)
  end
  def set_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.set_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def get_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.get_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def set_antialias_mode(antialiasmode : D2D1_ANTIALIAS_MODE) : Void
    @lpVtbl.value.set_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE, Void)).call(antialiasmode)
  end
  def get_antialias_mode : D2D1_ANTIALIAS_MODE
    @lpVtbl.value.get_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE)).call
  end
  def set_text_antialias_mode(textantialiasmode : D2D1_TEXT_ANTIALIAS_MODE) : Void
    @lpVtbl.value.set_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE, Void)).call(textantialiasmode)
  end
  def get_text_antialias_mode : D2D1_TEXT_ANTIALIAS_MODE
    @lpVtbl.value.get_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE)).call
  end
  def set_text_rendering_params(textrenderingparams : IDWriteRenderingParams) : Void
    @lpVtbl.value.set_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams, Void)).call(textrenderingparams)
  end
  def get_text_rendering_params(textrenderingparams : IDWriteRenderingParams*) : Void
    @lpVtbl.value.get_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams*, Void)).call(textrenderingparams)
  end
  def set_tags(tag1 : UInt64, tag2 : UInt64) : Void
    @lpVtbl.value.set_tags.unsafe_as(Proc(UInt64, UInt64, Void)).call(tag1, tag2)
  end
  def get_tags(tag1 : UInt64*, tag2 : UInt64*) : Void
    @lpVtbl.value.get_tags.unsafe_as(Proc(UInt64*, UInt64*, Void)).call(tag1, tag2)
  end
  def push_layer(layerparameters : D2D1_LAYER_PARAMETERS*, layer : ID2D1Layer) : Void
    @lpVtbl.value.push_layer.unsafe_as(Proc(D2D1_LAYER_PARAMETERS*, ID2D1Layer, Void)).call(layerparameters, layer)
  end
  def pop_layer : Void
    @lpVtbl.value.pop_layer.unsafe_as(Proc(Void)).call
  end
  def flush(tag1 : UInt64*, tag2 : UInt64*) : HRESULT
    @lpVtbl.value.flush.unsafe_as(Proc(UInt64*, UInt64*, HRESULT)).call(tag1, tag2)
  end
  def save_drawing_state(drawingstateblock : ID2D1DrawingStateBlock) : Void
    @lpVtbl.value.save_drawing_state.unsafe_as(Proc(ID2D1DrawingStateBlock, Void)).call(drawingstateblock)
  end
  def restore_drawing_state(drawingstateblock : ID2D1DrawingStateBlock) : Void
    @lpVtbl.value.restore_drawing_state.unsafe_as(Proc(ID2D1DrawingStateBlock, Void)).call(drawingstateblock)
  end
  def push_axis_aligned_clip(cliprect : D2D_RECT_F*, antialiasmode : D2D1_ANTIALIAS_MODE) : Void
    @lpVtbl.value.push_axis_aligned_clip.unsafe_as(Proc(D2D_RECT_F*, D2D1_ANTIALIAS_MODE, Void)).call(cliprect, antialiasmode)
  end
  def pop_axis_aligned_clip : Void
    @lpVtbl.value.pop_axis_aligned_clip.unsafe_as(Proc(Void)).call
  end
  def clear(clearcolor : D2D1_COLOR_F*) : Void
    @lpVtbl.value.clear.unsafe_as(Proc(D2D1_COLOR_F*, Void)).call(clearcolor)
  end
  def begin_draw : Void
    @lpVtbl.value.begin_draw.unsafe_as(Proc(Void)).call
  end
  def end_draw(tag1 : UInt64*, tag2 : UInt64*) : HRESULT
    @lpVtbl.value.end_draw.unsafe_as(Proc(UInt64*, UInt64*, HRESULT)).call(tag1, tag2)
  end
  def get_pixel_format : D2D1_PIXEL_FORMAT
    @lpVtbl.value.get_pixel_format.unsafe_as(Proc(D2D1_PIXEL_FORMAT)).call
  end
  def set_dpi(dpix : Float32, dpiy : Float32) : Void
    @lpVtbl.value.set_dpi.unsafe_as(Proc(Float32, Float32, Void)).call(dpix, dpiy)
  end
  def get_dpi(dpix : Float32*, dpiy : Float32*) : Void
    @lpVtbl.value.get_dpi.unsafe_as(Proc(Float32*, Float32*, Void)).call(dpix, dpiy)
  end
  def get_size : D2D_SIZE_F
    @lpVtbl.value.get_size.unsafe_as(Proc(D2D_SIZE_F)).call
  end
  def get_pixel_size : D2D_SIZE_U
    @lpVtbl.value.get_pixel_size.unsafe_as(Proc(D2D_SIZE_U)).call
  end
  def get_maximum_bitmap_size : UInt32
    @lpVtbl.value.get_maximum_bitmap_size.unsafe_as(Proc(UInt32)).call
  end
  def is_supported(rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*) : LibC::BOOL
    @lpVtbl.value.is_supported.unsafe_as(Proc(D2D1_RENDER_TARGET_PROPERTIES*, LibC::BOOL)).call(rendertargetproperties)
  end
  def check_window_state : D2D1_WINDOW_STATE
    @lpVtbl.value.check_window_state.unsafe_as(Proc(D2D1_WINDOW_STATE)).call
  end
  def resize(pixelsize : D2D_SIZE_U*) : HRESULT
    @lpVtbl.value.resize.unsafe_as(Proc(D2D_SIZE_U*, HRESULT)).call(pixelsize)
  end
  def get_hwnd : HANDLE
    @lpVtbl.value.get_hwnd.unsafe_as(Proc(HANDLE)).call
  end
end
struct LibWin32::ID2D1GdiInteropRenderTarget
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_dc(mode : D2D1_DC_INITIALIZE_MODE, hdc : HDC*) : HRESULT
    @lpVtbl.value.get_dc.unsafe_as(Proc(D2D1_DC_INITIALIZE_MODE, HDC*, HRESULT)).call(mode, hdc)
  end
  def release_dc(update : RECT*) : HRESULT
    @lpVtbl.value.release_dc.unsafe_as(Proc(RECT*, HRESULT)).call(update)
  end
end
struct LibWin32::ID2D1DCRenderTarget
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def create_bitmap(size : D2D_SIZE_U, srcdata : Void*, pitch : UInt32, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_bitmap.unsafe_as(Proc(D2D_SIZE_U, Void*, UInt32, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(size, srcdata, pitch, bitmapproperties, bitmap)
  end
  def create_bitmap_from_wic_bitmap(wicbitmapsource : IWICBitmapSource, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_bitmap_from_wic_bitmap.unsafe_as(Proc(IWICBitmapSource, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(wicbitmapsource, bitmapproperties, bitmap)
  end
  def create_shared_bitmap(riid : Guid*, data : Void*, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_shared_bitmap.unsafe_as(Proc(Guid*, Void*, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(riid, data, bitmapproperties, bitmap)
  end
  def create_bitmap_brush(bitmap : ID2D1Bitmap, bitmapbrushproperties : D2D1_BITMAP_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, bitmapbrush : ID2D1BitmapBrush*) : HRESULT
    @lpVtbl.value.create_bitmap_brush.unsafe_as(Proc(ID2D1Bitmap, D2D1_BITMAP_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush*, HRESULT)).call(bitmap, bitmapbrushproperties, brushproperties, bitmapbrush)
  end
  def create_solid_color_brush(color : D2D1_COLOR_F*, brushproperties : D2D1_BRUSH_PROPERTIES*, solidcolorbrush : ID2D1SolidColorBrush*) : HRESULT
    @lpVtbl.value.create_solid_color_brush.unsafe_as(Proc(D2D1_COLOR_F*, D2D1_BRUSH_PROPERTIES*, ID2D1SolidColorBrush*, HRESULT)).call(color, brushproperties, solidcolorbrush)
  end
  def create_gradient_stop_collection(gradientstops : D2D1_GRADIENT_STOP*, gradientstopscount : UInt32, colorinterpolationgamma : D2D1_GAMMA, extendmode : D2D1_EXTEND_MODE, gradientstopcollection : ID2D1GradientStopCollection*) : HRESULT
    @lpVtbl.value.create_gradient_stop_collection.unsafe_as(Proc(D2D1_GRADIENT_STOP*, UInt32, D2D1_GAMMA, D2D1_EXTEND_MODE, ID2D1GradientStopCollection*, HRESULT)).call(gradientstops, gradientstopscount, colorinterpolationgamma, extendmode, gradientstopcollection)
  end
  def create_linear_gradient_brush(lineargradientbrushproperties : D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, gradientstopcollection : ID2D1GradientStopCollection, lineargradientbrush : ID2D1LinearGradientBrush*) : HRESULT
    @lpVtbl.value.create_linear_gradient_brush.unsafe_as(Proc(D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection, ID2D1LinearGradientBrush*, HRESULT)).call(lineargradientbrushproperties, brushproperties, gradientstopcollection, lineargradientbrush)
  end
  def create_radial_gradient_brush(radialgradientbrushproperties : D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, gradientstopcollection : ID2D1GradientStopCollection, radialgradientbrush : ID2D1RadialGradientBrush*) : HRESULT
    @lpVtbl.value.create_radial_gradient_brush.unsafe_as(Proc(D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection, ID2D1RadialGradientBrush*, HRESULT)).call(radialgradientbrushproperties, brushproperties, gradientstopcollection, radialgradientbrush)
  end
  def create_compatible_render_target(desiredsize : D2D_SIZE_F*, desiredpixelsize : D2D_SIZE_U*, desiredformat : D2D1_PIXEL_FORMAT*, options : D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, bitmaprendertarget : ID2D1BitmapRenderTarget*) : HRESULT
    @lpVtbl.value.create_compatible_render_target.unsafe_as(Proc(D2D_SIZE_F*, D2D_SIZE_U*, D2D1_PIXEL_FORMAT*, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, ID2D1BitmapRenderTarget*, HRESULT)).call(desiredsize, desiredpixelsize, desiredformat, options, bitmaprendertarget)
  end
  def create_layer(size : D2D_SIZE_F*, layer : ID2D1Layer*) : HRESULT
    @lpVtbl.value.create_layer.unsafe_as(Proc(D2D_SIZE_F*, ID2D1Layer*, HRESULT)).call(size, layer)
  end
  def create_mesh(mesh : ID2D1Mesh*) : HRESULT
    @lpVtbl.value.create_mesh.unsafe_as(Proc(ID2D1Mesh*, HRESULT)).call(mesh)
  end
  def draw_line(point0 : D2D_POINT_2F, point1 : D2D_POINT_2F, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_line.unsafe_as(Proc(D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(point0, point1, brush, strokewidth, strokestyle)
  end
  def draw_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(rect, brush, strokewidth, strokestyle)
  end
  def fill_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Void)).call(rect, brush)
  end
  def draw_rounded_rectangle(roundedrect : D2D1_ROUNDED_RECT*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_rounded_rectangle.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(roundedrect, brush, strokewidth, strokestyle)
  end
  def fill_rounded_rectangle(roundedrect : D2D1_ROUNDED_RECT*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_rounded_rectangle.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1Brush, Void)).call(roundedrect, brush)
  end
  def draw_ellipse(ellipse : D2D1_ELLIPSE*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_ellipse.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(ellipse, brush, strokewidth, strokestyle)
  end
  def fill_ellipse(ellipse : D2D1_ELLIPSE*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_ellipse.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1Brush, Void)).call(ellipse, brush)
  end
  def draw_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(geometry, brush, strokewidth, strokestyle)
  end
  def fill_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, opacitybrush : ID2D1Brush) : Void
    @lpVtbl.value.fill_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, ID2D1Brush, Void)).call(geometry, brush, opacitybrush)
  end
  def fill_mesh(mesh : ID2D1Mesh, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_mesh.unsafe_as(Proc(ID2D1Mesh, ID2D1Brush, Void)).call(mesh, brush)
  end
  def fill_opacity_mask(opacitymask : ID2D1Bitmap, brush : ID2D1Brush, content : D2D1_OPACITY_MASK_CONTENT, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.fill_opacity_mask.unsafe_as(Proc(ID2D1Bitmap, ID2D1Brush, D2D1_OPACITY_MASK_CONTENT, D2D_RECT_F*, D2D_RECT_F*, Void)).call(opacitymask, brush, content, destinationrectangle, sourcerectangle)
  end
  def draw_bitmap(bitmap : ID2D1Bitmap, destinationrectangle : D2D_RECT_F*, opacity : Float32, interpolationmode : D2D1_BITMAP_INTERPOLATION_MODE, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.draw_bitmap.unsafe_as(Proc(ID2D1Bitmap, D2D_RECT_F*, Float32, D2D1_BITMAP_INTERPOLATION_MODE, D2D_RECT_F*, Void)).call(bitmap, destinationrectangle, opacity, interpolationmode, sourcerectangle)
  end
  def draw_text(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, layoutrect : D2D_RECT_F*, defaultfillbrush : ID2D1Brush, options : D2D1_DRAW_TEXT_OPTIONS, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_text.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, D2D_RECT_F*, ID2D1Brush, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE, Void)).call(string, stringlength, textformat, layoutrect, defaultfillbrush, options, measuringmode)
  end
  def draw_text_layout(origin : D2D_POINT_2F, textlayout : IDWriteTextLayout, defaultfillbrush : ID2D1Brush, options : D2D1_DRAW_TEXT_OPTIONS) : Void
    @lpVtbl.value.draw_text_layout.unsafe_as(Proc(D2D_POINT_2F, IDWriteTextLayout, ID2D1Brush, D2D1_DRAW_TEXT_OPTIONS, Void)).call(origin, textlayout, defaultfillbrush, options)
  end
  def draw_glyph_run(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, foregroundbrush : ID2D1Brush, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_glyph_run.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, ID2D1Brush, DWRITE_MEASURING_MODE, Void)).call(baselineorigin, glyphrun, foregroundbrush, measuringmode)
  end
  def set_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.set_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def get_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.get_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def set_antialias_mode(antialiasmode : D2D1_ANTIALIAS_MODE) : Void
    @lpVtbl.value.set_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE, Void)).call(antialiasmode)
  end
  def get_antialias_mode : D2D1_ANTIALIAS_MODE
    @lpVtbl.value.get_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE)).call
  end
  def set_text_antialias_mode(textantialiasmode : D2D1_TEXT_ANTIALIAS_MODE) : Void
    @lpVtbl.value.set_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE, Void)).call(textantialiasmode)
  end
  def get_text_antialias_mode : D2D1_TEXT_ANTIALIAS_MODE
    @lpVtbl.value.get_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE)).call
  end
  def set_text_rendering_params(textrenderingparams : IDWriteRenderingParams) : Void
    @lpVtbl.value.set_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams, Void)).call(textrenderingparams)
  end
  def get_text_rendering_params(textrenderingparams : IDWriteRenderingParams*) : Void
    @lpVtbl.value.get_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams*, Void)).call(textrenderingparams)
  end
  def set_tags(tag1 : UInt64, tag2 : UInt64) : Void
    @lpVtbl.value.set_tags.unsafe_as(Proc(UInt64, UInt64, Void)).call(tag1, tag2)
  end
  def get_tags(tag1 : UInt64*, tag2 : UInt64*) : Void
    @lpVtbl.value.get_tags.unsafe_as(Proc(UInt64*, UInt64*, Void)).call(tag1, tag2)
  end
  def push_layer(layerparameters : D2D1_LAYER_PARAMETERS*, layer : ID2D1Layer) : Void
    @lpVtbl.value.push_layer.unsafe_as(Proc(D2D1_LAYER_PARAMETERS*, ID2D1Layer, Void)).call(layerparameters, layer)
  end
  def pop_layer : Void
    @lpVtbl.value.pop_layer.unsafe_as(Proc(Void)).call
  end
  def flush(tag1 : UInt64*, tag2 : UInt64*) : HRESULT
    @lpVtbl.value.flush.unsafe_as(Proc(UInt64*, UInt64*, HRESULT)).call(tag1, tag2)
  end
  def save_drawing_state(drawingstateblock : ID2D1DrawingStateBlock) : Void
    @lpVtbl.value.save_drawing_state.unsafe_as(Proc(ID2D1DrawingStateBlock, Void)).call(drawingstateblock)
  end
  def restore_drawing_state(drawingstateblock : ID2D1DrawingStateBlock) : Void
    @lpVtbl.value.restore_drawing_state.unsafe_as(Proc(ID2D1DrawingStateBlock, Void)).call(drawingstateblock)
  end
  def push_axis_aligned_clip(cliprect : D2D_RECT_F*, antialiasmode : D2D1_ANTIALIAS_MODE) : Void
    @lpVtbl.value.push_axis_aligned_clip.unsafe_as(Proc(D2D_RECT_F*, D2D1_ANTIALIAS_MODE, Void)).call(cliprect, antialiasmode)
  end
  def pop_axis_aligned_clip : Void
    @lpVtbl.value.pop_axis_aligned_clip.unsafe_as(Proc(Void)).call
  end
  def clear(clearcolor : D2D1_COLOR_F*) : Void
    @lpVtbl.value.clear.unsafe_as(Proc(D2D1_COLOR_F*, Void)).call(clearcolor)
  end
  def begin_draw : Void
    @lpVtbl.value.begin_draw.unsafe_as(Proc(Void)).call
  end
  def end_draw(tag1 : UInt64*, tag2 : UInt64*) : HRESULT
    @lpVtbl.value.end_draw.unsafe_as(Proc(UInt64*, UInt64*, HRESULT)).call(tag1, tag2)
  end
  def get_pixel_format : D2D1_PIXEL_FORMAT
    @lpVtbl.value.get_pixel_format.unsafe_as(Proc(D2D1_PIXEL_FORMAT)).call
  end
  def set_dpi(dpix : Float32, dpiy : Float32) : Void
    @lpVtbl.value.set_dpi.unsafe_as(Proc(Float32, Float32, Void)).call(dpix, dpiy)
  end
  def get_dpi(dpix : Float32*, dpiy : Float32*) : Void
    @lpVtbl.value.get_dpi.unsafe_as(Proc(Float32*, Float32*, Void)).call(dpix, dpiy)
  end
  def get_size : D2D_SIZE_F
    @lpVtbl.value.get_size.unsafe_as(Proc(D2D_SIZE_F)).call
  end
  def get_pixel_size : D2D_SIZE_U
    @lpVtbl.value.get_pixel_size.unsafe_as(Proc(D2D_SIZE_U)).call
  end
  def get_maximum_bitmap_size : UInt32
    @lpVtbl.value.get_maximum_bitmap_size.unsafe_as(Proc(UInt32)).call
  end
  def is_supported(rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*) : LibC::BOOL
    @lpVtbl.value.is_supported.unsafe_as(Proc(D2D1_RENDER_TARGET_PROPERTIES*, LibC::BOOL)).call(rendertargetproperties)
  end
  def bind_dc(hdc : HDC, psubrect : RECT*) : HRESULT
    @lpVtbl.value.bind_dc.unsafe_as(Proc(HDC, RECT*, HRESULT)).call(hdc, psubrect)
  end
end
struct LibWin32::ID2D1Factory
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def reload_system_metrics : HRESULT
    @lpVtbl.value.reload_system_metrics.unsafe_as(Proc(HRESULT)).call
  end
  def get_desktop_dpi(dpix : Float32*, dpiy : Float32*) : Void
    @lpVtbl.value.get_desktop_dpi.unsafe_as(Proc(Float32*, Float32*, Void)).call(dpix, dpiy)
  end
  def create_rectangle_geometry(rectangle : D2D_RECT_F*, rectanglegeometry : ID2D1RectangleGeometry*) : HRESULT
    @lpVtbl.value.create_rectangle_geometry.unsafe_as(Proc(D2D_RECT_F*, ID2D1RectangleGeometry*, HRESULT)).call(rectangle, rectanglegeometry)
  end
  def create_rounded_rectangle_geometry(roundedrectangle : D2D1_ROUNDED_RECT*, roundedrectanglegeometry : ID2D1RoundedRectangleGeometry*) : HRESULT
    @lpVtbl.value.create_rounded_rectangle_geometry.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1RoundedRectangleGeometry*, HRESULT)).call(roundedrectangle, roundedrectanglegeometry)
  end
  def create_ellipse_geometry(ellipse : D2D1_ELLIPSE*, ellipsegeometry : ID2D1EllipseGeometry*) : HRESULT
    @lpVtbl.value.create_ellipse_geometry.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1EllipseGeometry*, HRESULT)).call(ellipse, ellipsegeometry)
  end
  def create_geometry_group(fillmode : D2D1_FILL_MODE, geometries : ID2D1Geometry*, geometriescount : UInt32, geometrygroup : ID2D1GeometryGroup*) : HRESULT
    @lpVtbl.value.create_geometry_group.unsafe_as(Proc(D2D1_FILL_MODE, ID2D1Geometry*, UInt32, ID2D1GeometryGroup*, HRESULT)).call(fillmode, geometries, geometriescount, geometrygroup)
  end
  def create_transformed_geometry(sourcegeometry : ID2D1Geometry, transform : D2D_MATRIX_3X2_F*, transformedgeometry : ID2D1TransformedGeometry*) : HRESULT
    @lpVtbl.value.create_transformed_geometry.unsafe_as(Proc(ID2D1Geometry, D2D_MATRIX_3X2_F*, ID2D1TransformedGeometry*, HRESULT)).call(sourcegeometry, transform, transformedgeometry)
  end
  def create_path_geometry(pathgeometry : ID2D1PathGeometry*) : HRESULT
    @lpVtbl.value.create_path_geometry.unsafe_as(Proc(ID2D1PathGeometry*, HRESULT)).call(pathgeometry)
  end
  def create_stroke_style(strokestyleproperties : D2D1_STROKE_STYLE_PROPERTIES*, dashes : Float32*, dashescount : UInt32, strokestyle : ID2D1StrokeStyle*) : HRESULT
    @lpVtbl.value.create_stroke_style.unsafe_as(Proc(D2D1_STROKE_STYLE_PROPERTIES*, Float32*, UInt32, ID2D1StrokeStyle*, HRESULT)).call(strokestyleproperties, dashes, dashescount, strokestyle)
  end
  def create_drawing_state_block(drawingstatedescription : D2D1_DRAWING_STATE_DESCRIPTION*, textrenderingparams : IDWriteRenderingParams, drawingstateblock : ID2D1DrawingStateBlock*) : HRESULT
    @lpVtbl.value.create_drawing_state_block.unsafe_as(Proc(D2D1_DRAWING_STATE_DESCRIPTION*, IDWriteRenderingParams, ID2D1DrawingStateBlock*, HRESULT)).call(drawingstatedescription, textrenderingparams, drawingstateblock)
  end
  def create_wic_bitmap_render_target(target : IWICBitmap, rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, rendertarget : ID2D1RenderTarget*) : HRESULT
    @lpVtbl.value.create_wic_bitmap_render_target.unsafe_as(Proc(IWICBitmap, D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget*, HRESULT)).call(target, rendertargetproperties, rendertarget)
  end
  def create_hwnd_render_target(rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, hwndrendertargetproperties : D2D1_HWND_RENDER_TARGET_PROPERTIES*, hwndrendertarget : ID2D1HwndRenderTarget*) : HRESULT
    @lpVtbl.value.create_hwnd_render_target.unsafe_as(Proc(D2D1_RENDER_TARGET_PROPERTIES*, D2D1_HWND_RENDER_TARGET_PROPERTIES*, ID2D1HwndRenderTarget*, HRESULT)).call(rendertargetproperties, hwndrendertargetproperties, hwndrendertarget)
  end
  def create_dxgi_surface_render_target(dxgisurface : IDXGISurface, rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, rendertarget : ID2D1RenderTarget*) : HRESULT
    @lpVtbl.value.create_dxgi_surface_render_target.unsafe_as(Proc(IDXGISurface, D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget*, HRESULT)).call(dxgisurface, rendertargetproperties, rendertarget)
  end
  def create_dc_render_target(rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, dcrendertarget : ID2D1DCRenderTarget*) : HRESULT
    @lpVtbl.value.create_dc_render_target.unsafe_as(Proc(D2D1_RENDER_TARGET_PROPERTIES*, ID2D1DCRenderTarget*, HRESULT)).call(rendertargetproperties, dcrendertarget)
  end
end
struct LibWin32::ID2D1GdiMetafileSink
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def process_record(recordtype : UInt32, recorddata : Void*, recorddatasize : UInt32) : HRESULT
    @lpVtbl.value.process_record.unsafe_as(Proc(UInt32, Void*, UInt32, HRESULT)).call(recordtype, recorddata, recorddatasize)
  end
end
struct LibWin32::ID2D1GdiMetafile
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def stream(sink : ID2D1GdiMetafileSink) : HRESULT
    @lpVtbl.value.stream.unsafe_as(Proc(ID2D1GdiMetafileSink, HRESULT)).call(sink)
  end
  def get_bounds(bounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_bounds.unsafe_as(Proc(D2D_RECT_F*, HRESULT)).call(bounds)
  end
end
struct LibWin32::ID2D1CommandSink
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def begin_draw : HRESULT
    @lpVtbl.value.begin_draw.unsafe_as(Proc(HRESULT)).call
  end
  def end_draw : HRESULT
    @lpVtbl.value.end_draw.unsafe_as(Proc(HRESULT)).call
  end
  def set_antialias_mode(antialiasmode : D2D1_ANTIALIAS_MODE) : HRESULT
    @lpVtbl.value.set_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE, HRESULT)).call(antialiasmode)
  end
  def set_tags(tag1 : UInt64, tag2 : UInt64) : HRESULT
    @lpVtbl.value.set_tags.unsafe_as(Proc(UInt64, UInt64, HRESULT)).call(tag1, tag2)
  end
  def set_text_antialias_mode(textantialiasmode : D2D1_TEXT_ANTIALIAS_MODE) : HRESULT
    @lpVtbl.value.set_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE, HRESULT)).call(textantialiasmode)
  end
  def set_text_rendering_params(textrenderingparams : IDWriteRenderingParams) : HRESULT
    @lpVtbl.value.set_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams, HRESULT)).call(textrenderingparams)
  end
  def set_transform(transform : D2D_MATRIX_3X2_F*) : HRESULT
    @lpVtbl.value.set_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, HRESULT)).call(transform)
  end
  def set_primitive_blend(primitiveblend : D2D1_PRIMITIVE_BLEND) : HRESULT
    @lpVtbl.value.set_primitive_blend.unsafe_as(Proc(D2D1_PRIMITIVE_BLEND, HRESULT)).call(primitiveblend)
  end
  def set_unit_mode(unitmode : D2D1_UNIT_MODE) : HRESULT
    @lpVtbl.value.set_unit_mode.unsafe_as(Proc(D2D1_UNIT_MODE, HRESULT)).call(unitmode)
  end
  def clear(color : D2D1_COLOR_F*) : HRESULT
    @lpVtbl.value.clear.unsafe_as(Proc(D2D1_COLOR_F*, HRESULT)).call(color)
  end
  def draw_glyph_run(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, glyphrundescription : DWRITE_GLYPH_RUN_DESCRIPTION*, foregroundbrush : ID2D1Brush, measuringmode : DWRITE_MEASURING_MODE) : HRESULT
    @lpVtbl.value.draw_glyph_run.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush, DWRITE_MEASURING_MODE, HRESULT)).call(baselineorigin, glyphrun, glyphrundescription, foregroundbrush, measuringmode)
  end
  def draw_line(point0 : D2D_POINT_2F, point1 : D2D_POINT_2F, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : HRESULT
    @lpVtbl.value.draw_line.unsafe_as(Proc(D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush, Float32, ID2D1StrokeStyle, HRESULT)).call(point0, point1, brush, strokewidth, strokestyle)
  end
  def draw_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : HRESULT
    @lpVtbl.value.draw_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, Float32, ID2D1StrokeStyle, HRESULT)).call(geometry, brush, strokewidth, strokestyle)
  end
  def draw_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : HRESULT
    @lpVtbl.value.draw_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Float32, ID2D1StrokeStyle, HRESULT)).call(rect, brush, strokewidth, strokestyle)
  end
  def draw_bitmap(bitmap : ID2D1Bitmap, destinationrectangle : D2D_RECT_F*, opacity : Float32, interpolationmode : D2D1_INTERPOLATION_MODE, sourcerectangle : D2D_RECT_F*, perspectivetransform : D2D_MATRIX_4X4_F*) : HRESULT
    @lpVtbl.value.draw_bitmap.unsafe_as(Proc(ID2D1Bitmap, D2D_RECT_F*, Float32, D2D1_INTERPOLATION_MODE, D2D_RECT_F*, D2D_MATRIX_4X4_F*, HRESULT)).call(bitmap, destinationrectangle, opacity, interpolationmode, sourcerectangle, perspectivetransform)
  end
  def draw_image(image : ID2D1Image, targetoffset : D2D_POINT_2F*, imagerectangle : D2D_RECT_F*, interpolationmode : D2D1_INTERPOLATION_MODE, compositemode : D2D1_COMPOSITE_MODE) : HRESULT
    @lpVtbl.value.draw_image.unsafe_as(Proc(ID2D1Image, D2D_POINT_2F*, D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE, HRESULT)).call(image, targetoffset, imagerectangle, interpolationmode, compositemode)
  end
  def draw_gdi_metafile(gdimetafile : ID2D1GdiMetafile, targetoffset : D2D_POINT_2F*) : HRESULT
    @lpVtbl.value.draw_gdi_metafile.unsafe_as(Proc(ID2D1GdiMetafile, D2D_POINT_2F*, HRESULT)).call(gdimetafile, targetoffset)
  end
  def fill_mesh(mesh : ID2D1Mesh, brush : ID2D1Brush) : HRESULT
    @lpVtbl.value.fill_mesh.unsafe_as(Proc(ID2D1Mesh, ID2D1Brush, HRESULT)).call(mesh, brush)
  end
  def fill_opacity_mask(opacitymask : ID2D1Bitmap, brush : ID2D1Brush, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.fill_opacity_mask.unsafe_as(Proc(ID2D1Bitmap, ID2D1Brush, D2D_RECT_F*, D2D_RECT_F*, HRESULT)).call(opacitymask, brush, destinationrectangle, sourcerectangle)
  end
  def fill_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, opacitybrush : ID2D1Brush) : HRESULT
    @lpVtbl.value.fill_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, ID2D1Brush, HRESULT)).call(geometry, brush, opacitybrush)
  end
  def fill_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush) : HRESULT
    @lpVtbl.value.fill_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, HRESULT)).call(rect, brush)
  end
  def push_axis_aligned_clip(cliprect : D2D_RECT_F*, antialiasmode : D2D1_ANTIALIAS_MODE) : HRESULT
    @lpVtbl.value.push_axis_aligned_clip.unsafe_as(Proc(D2D_RECT_F*, D2D1_ANTIALIAS_MODE, HRESULT)).call(cliprect, antialiasmode)
  end
  def push_layer(layerparameters1 : D2D1_LAYER_PARAMETERS1*, layer : ID2D1Layer) : HRESULT
    @lpVtbl.value.push_layer.unsafe_as(Proc(D2D1_LAYER_PARAMETERS1*, ID2D1Layer, HRESULT)).call(layerparameters1, layer)
  end
  def pop_axis_aligned_clip : HRESULT
    @lpVtbl.value.pop_axis_aligned_clip.unsafe_as(Proc(HRESULT)).call
  end
  def pop_layer : HRESULT
    @lpVtbl.value.pop_layer.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::ID2D1CommandList
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def stream(sink : ID2D1CommandSink) : HRESULT
    @lpVtbl.value.stream.unsafe_as(Proc(ID2D1CommandSink, HRESULT)).call(sink)
  end
  def close : HRESULT
    @lpVtbl.value.close.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::ID2D1PrintControl
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def add_page(commandlist : ID2D1CommandList, pagesize : D2D_SIZE_F, pageprintticketstream : IStream, tag1 : UInt64*, tag2 : UInt64*) : HRESULT
    @lpVtbl.value.add_page.unsafe_as(Proc(ID2D1CommandList, D2D_SIZE_F, IStream, UInt64*, UInt64*, HRESULT)).call(commandlist, pagesize, pageprintticketstream, tag1, tag2)
  end
  def close : HRESULT
    @lpVtbl.value.close.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::ID2D1ImageBrush
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def set_opacity(opacity : Float32) : Void
    @lpVtbl.value.set_opacity.unsafe_as(Proc(Float32, Void)).call(opacity)
  end
  def set_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.set_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def get_opacity : Float32
    @lpVtbl.value.get_opacity.unsafe_as(Proc(Float32)).call
  end
  def get_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.get_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def set_image(image : ID2D1Image) : Void
    @lpVtbl.value.set_image.unsafe_as(Proc(ID2D1Image, Void)).call(image)
  end
  def set_extend_mode_x(extendmodex : D2D1_EXTEND_MODE) : Void
    @lpVtbl.value.set_extend_mode_x.unsafe_as(Proc(D2D1_EXTEND_MODE, Void)).call(extendmodex)
  end
  def set_extend_mode_y(extendmodey : D2D1_EXTEND_MODE) : Void
    @lpVtbl.value.set_extend_mode_y.unsafe_as(Proc(D2D1_EXTEND_MODE, Void)).call(extendmodey)
  end
  def set_interpolation_mode(interpolationmode : D2D1_INTERPOLATION_MODE) : Void
    @lpVtbl.value.set_interpolation_mode.unsafe_as(Proc(D2D1_INTERPOLATION_MODE, Void)).call(interpolationmode)
  end
  def set_source_rectangle(sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.set_source_rectangle.unsafe_as(Proc(D2D_RECT_F*, Void)).call(sourcerectangle)
  end
  def get_image(image : ID2D1Image*) : Void
    @lpVtbl.value.get_image.unsafe_as(Proc(ID2D1Image*, Void)).call(image)
  end
  def get_extend_mode_x : D2D1_EXTEND_MODE
    @lpVtbl.value.get_extend_mode_x.unsafe_as(Proc(D2D1_EXTEND_MODE)).call
  end
  def get_extend_mode_y : D2D1_EXTEND_MODE
    @lpVtbl.value.get_extend_mode_y.unsafe_as(Proc(D2D1_EXTEND_MODE)).call
  end
  def get_interpolation_mode : D2D1_INTERPOLATION_MODE
    @lpVtbl.value.get_interpolation_mode.unsafe_as(Proc(D2D1_INTERPOLATION_MODE)).call
  end
  def get_source_rectangle(sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.get_source_rectangle.unsafe_as(Proc(D2D_RECT_F*, Void)).call(sourcerectangle)
  end
end
struct LibWin32::ID2D1BitmapBrush1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def set_opacity(opacity : Float32) : Void
    @lpVtbl.value.set_opacity.unsafe_as(Proc(Float32, Void)).call(opacity)
  end
  def set_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.set_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def get_opacity : Float32
    @lpVtbl.value.get_opacity.unsafe_as(Proc(Float32)).call
  end
  def get_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.get_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def set_extend_mode_x(extendmodex : D2D1_EXTEND_MODE) : Void
    @lpVtbl.value.set_extend_mode_x.unsafe_as(Proc(D2D1_EXTEND_MODE, Void)).call(extendmodex)
  end
  def set_extend_mode_y(extendmodey : D2D1_EXTEND_MODE) : Void
    @lpVtbl.value.set_extend_mode_y.unsafe_as(Proc(D2D1_EXTEND_MODE, Void)).call(extendmodey)
  end
  def set_interpolation_mode(interpolationmode : D2D1_BITMAP_INTERPOLATION_MODE) : Void
    @lpVtbl.value.set_interpolation_mode.unsafe_as(Proc(D2D1_BITMAP_INTERPOLATION_MODE, Void)).call(interpolationmode)
  end
  def set_bitmap(bitmap : ID2D1Bitmap) : Void
    @lpVtbl.value.set_bitmap.unsafe_as(Proc(ID2D1Bitmap, Void)).call(bitmap)
  end
  def get_extend_mode_x : D2D1_EXTEND_MODE
    @lpVtbl.value.get_extend_mode_x.unsafe_as(Proc(D2D1_EXTEND_MODE)).call
  end
  def get_extend_mode_y : D2D1_EXTEND_MODE
    @lpVtbl.value.get_extend_mode_y.unsafe_as(Proc(D2D1_EXTEND_MODE)).call
  end
  def get_interpolation_mode : D2D1_BITMAP_INTERPOLATION_MODE
    @lpVtbl.value.get_interpolation_mode.unsafe_as(Proc(D2D1_BITMAP_INTERPOLATION_MODE)).call
  end
  def get_bitmap(bitmap : ID2D1Bitmap*) : Void
    @lpVtbl.value.get_bitmap.unsafe_as(Proc(ID2D1Bitmap*, Void)).call(bitmap)
  end
  def set_interpolation_mode1(interpolationmode : D2D1_INTERPOLATION_MODE) : Void
    @lpVtbl.value.set_interpolation_mode1.unsafe_as(Proc(D2D1_INTERPOLATION_MODE, Void)).call(interpolationmode)
  end
  def get_interpolation_mode1 : D2D1_INTERPOLATION_MODE
    @lpVtbl.value.get_interpolation_mode1.unsafe_as(Proc(D2D1_INTERPOLATION_MODE)).call
  end
end
struct LibWin32::ID2D1StrokeStyle1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def get_start_cap : D2D1_CAP_STYLE
    @lpVtbl.value.get_start_cap.unsafe_as(Proc(D2D1_CAP_STYLE)).call
  end
  def get_end_cap : D2D1_CAP_STYLE
    @lpVtbl.value.get_end_cap.unsafe_as(Proc(D2D1_CAP_STYLE)).call
  end
  def get_dash_cap : D2D1_CAP_STYLE
    @lpVtbl.value.get_dash_cap.unsafe_as(Proc(D2D1_CAP_STYLE)).call
  end
  def get_miter_limit : Float32
    @lpVtbl.value.get_miter_limit.unsafe_as(Proc(Float32)).call
  end
  def get_line_join : D2D1_LINE_JOIN
    @lpVtbl.value.get_line_join.unsafe_as(Proc(D2D1_LINE_JOIN)).call
  end
  def get_dash_offset : Float32
    @lpVtbl.value.get_dash_offset.unsafe_as(Proc(Float32)).call
  end
  def get_dash_style : D2D1_DASH_STYLE
    @lpVtbl.value.get_dash_style.unsafe_as(Proc(D2D1_DASH_STYLE)).call
  end
  def get_dashes_count : UInt32
    @lpVtbl.value.get_dashes_count.unsafe_as(Proc(UInt32)).call
  end
  def get_dashes(dashes : Float32*, dashescount : UInt32) : Void
    @lpVtbl.value.get_dashes.unsafe_as(Proc(Float32*, UInt32, Void)).call(dashes, dashescount)
  end
  def get_stroke_transform_type : D2D1_STROKE_TRANSFORM_TYPE
    @lpVtbl.value.get_stroke_transform_type.unsafe_as(Proc(D2D1_STROKE_TRANSFORM_TYPE)).call
  end
end
struct LibWin32::ID2D1PathGeometry1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def get_bounds(worldtransform : D2D_MATRIX_3X2_F*, bounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_bounds.unsafe_as(Proc(D2D_MATRIX_3X2_F*, D2D_RECT_F*, HRESULT)).call(worldtransform, bounds)
  end
  def get_widened_bounds(strokewidth : Float32, strokestyle : ID2D1StrokeStyle, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, bounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_widened_bounds.unsafe_as(Proc(Float32, ID2D1StrokeStyle, D2D_MATRIX_3X2_F*, Float32, D2D_RECT_F*, HRESULT)).call(strokewidth, strokestyle, worldtransform, flatteningtolerance, bounds)
  end
  def stroke_contains_point(point : D2D_POINT_2F, strokewidth : Float32, strokestyle : ID2D1StrokeStyle, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, contains : LibC::BOOL*) : HRESULT
    @lpVtbl.value.stroke_contains_point.unsafe_as(Proc(D2D_POINT_2F, Float32, ID2D1StrokeStyle, D2D_MATRIX_3X2_F*, Float32, LibC::BOOL*, HRESULT)).call(point, strokewidth, strokestyle, worldtransform, flatteningtolerance, contains)
  end
  def fill_contains_point(point : D2D_POINT_2F, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, contains : LibC::BOOL*) : HRESULT
    @lpVtbl.value.fill_contains_point.unsafe_as(Proc(D2D_POINT_2F, D2D_MATRIX_3X2_F*, Float32, LibC::BOOL*, HRESULT)).call(point, worldtransform, flatteningtolerance, contains)
  end
  def compare_with_geometry(inputgeometry : ID2D1Geometry, inputgeometrytransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, relation : D2D1_GEOMETRY_RELATION*) : HRESULT
    @lpVtbl.value.compare_with_geometry.unsafe_as(Proc(ID2D1Geometry, D2D_MATRIX_3X2_F*, Float32, D2D1_GEOMETRY_RELATION*, HRESULT)).call(inputgeometry, inputgeometrytransform, flatteningtolerance, relation)
  end
  def simplify(simplificationoption : D2D1_GEOMETRY_SIMPLIFICATION_OPTION, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.simplify.unsafe_as(Proc(D2D1_GEOMETRY_SIMPLIFICATION_OPTION, D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(simplificationoption, worldtransform, flatteningtolerance, geometrysink)
  end
  def tessellate(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, tessellationsink : ID2D1TessellationSink) : HRESULT
    @lpVtbl.value.tessellate.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, ID2D1TessellationSink, HRESULT)).call(worldtransform, flatteningtolerance, tessellationsink)
  end
  def combine_with_geometry(inputgeometry : ID2D1Geometry, combinemode : D2D1_COMBINE_MODE, inputgeometrytransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.combine_with_geometry.unsafe_as(Proc(ID2D1Geometry, D2D1_COMBINE_MODE, D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(inputgeometry, combinemode, inputgeometrytransform, flatteningtolerance, geometrysink)
  end
  def outline(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.outline.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(worldtransform, flatteningtolerance, geometrysink)
  end
  def compute_area(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, area : Float32*) : HRESULT
    @lpVtbl.value.compute_area.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, Float32*, HRESULT)).call(worldtransform, flatteningtolerance, area)
  end
  def compute_length(worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, length : Float32*) : HRESULT
    @lpVtbl.value.compute_length.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Float32, Float32*, HRESULT)).call(worldtransform, flatteningtolerance, length)
  end
  def compute_point_at_length(length : Float32, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, point : D2D_POINT_2F*, unittangentvector : D2D_POINT_2F*) : HRESULT
    @lpVtbl.value.compute_point_at_length.unsafe_as(Proc(Float32, D2D_MATRIX_3X2_F*, Float32, D2D_POINT_2F*, D2D_POINT_2F*, HRESULT)).call(length, worldtransform, flatteningtolerance, point, unittangentvector)
  end
  def widen(strokewidth : Float32, strokestyle : ID2D1StrokeStyle, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.widen.unsafe_as(Proc(Float32, ID2D1StrokeStyle, D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(strokewidth, strokestyle, worldtransform, flatteningtolerance, geometrysink)
  end
  def open(geometrysink : ID2D1GeometrySink*) : HRESULT
    @lpVtbl.value.open.unsafe_as(Proc(ID2D1GeometrySink*, HRESULT)).call(geometrysink)
  end
  def stream(geometrysink : ID2D1GeometrySink) : HRESULT
    @lpVtbl.value.stream.unsafe_as(Proc(ID2D1GeometrySink, HRESULT)).call(geometrysink)
  end
  def get_segment_count(count : UInt32*) : HRESULT
    @lpVtbl.value.get_segment_count.unsafe_as(Proc(UInt32*, HRESULT)).call(count)
  end
  def get_figure_count(count : UInt32*) : HRESULT
    @lpVtbl.value.get_figure_count.unsafe_as(Proc(UInt32*, HRESULT)).call(count)
  end
  def compute_point_and_segment_at_length(length : Float32, startsegment : UInt32, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, pointdescription : D2D1_POINT_DESCRIPTION*) : HRESULT
    @lpVtbl.value.compute_point_and_segment_at_length.unsafe_as(Proc(Float32, UInt32, D2D_MATRIX_3X2_F*, Float32, D2D1_POINT_DESCRIPTION*, HRESULT)).call(length, startsegment, worldtransform, flatteningtolerance, pointdescription)
  end
end
struct LibWin32::ID2D1Properties
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_property_count : UInt32
    @lpVtbl.value.get_property_count.unsafe_as(Proc(UInt32)).call
  end
  def get_property_name(index : UInt32, name : Char*, namecount : UInt32) : HRESULT
    @lpVtbl.value.get_property_name.unsafe_as(Proc(UInt32, Char*, UInt32, HRESULT)).call(index, name, namecount)
  end
  def get_property_name_length(index : UInt32) : UInt32
    @lpVtbl.value.get_property_name_length.unsafe_as(Proc(UInt32, UInt32)).call(index)
  end
  def get_type(index : UInt32) : D2D1_PROPERTY_TYPE
    @lpVtbl.value.get_type.unsafe_as(Proc(UInt32, D2D1_PROPERTY_TYPE)).call(index)
  end
  def get_property_index(name : LibC::LPWSTR) : UInt32
    @lpVtbl.value.get_property_index.unsafe_as(Proc(LibC::LPWSTR, UInt32)).call(name)
  end
  def set_value_by_name(name : LibC::LPWSTR, type : D2D1_PROPERTY_TYPE, data : UInt8*, datasize : UInt32) : HRESULT
    @lpVtbl.value.set_value_by_name.unsafe_as(Proc(LibC::LPWSTR, D2D1_PROPERTY_TYPE, UInt8*, UInt32, HRESULT)).call(name, type, data, datasize)
  end
  def set_value(index : UInt32, type : D2D1_PROPERTY_TYPE, data : UInt8*, datasize : UInt32) : HRESULT
    @lpVtbl.value.set_value.unsafe_as(Proc(UInt32, D2D1_PROPERTY_TYPE, UInt8*, UInt32, HRESULT)).call(index, type, data, datasize)
  end
  def get_value_by_name(name : LibC::LPWSTR, type : D2D1_PROPERTY_TYPE, data : UInt8*, datasize : UInt32) : HRESULT
    @lpVtbl.value.get_value_by_name.unsafe_as(Proc(LibC::LPWSTR, D2D1_PROPERTY_TYPE, UInt8*, UInt32, HRESULT)).call(name, type, data, datasize)
  end
  def get_value(index : UInt32, type : D2D1_PROPERTY_TYPE, data : UInt8*, datasize : UInt32) : HRESULT
    @lpVtbl.value.get_value.unsafe_as(Proc(UInt32, D2D1_PROPERTY_TYPE, UInt8*, UInt32, HRESULT)).call(index, type, data, datasize)
  end
  def get_value_size(index : UInt32) : UInt32
    @lpVtbl.value.get_value_size.unsafe_as(Proc(UInt32, UInt32)).call(index)
  end
  def get_sub_properties(index : UInt32, subproperties : ID2D1Properties*) : HRESULT
    @lpVtbl.value.get_sub_properties.unsafe_as(Proc(UInt32, ID2D1Properties*, HRESULT)).call(index, subproperties)
  end
end
struct LibWin32::ID2D1Effect
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_property_count : UInt32
    @lpVtbl.value.get_property_count.unsafe_as(Proc(UInt32)).call
  end
  def get_property_name(index : UInt32, name : Char*, namecount : UInt32) : HRESULT
    @lpVtbl.value.get_property_name.unsafe_as(Proc(UInt32, Char*, UInt32, HRESULT)).call(index, name, namecount)
  end
  def get_property_name_length(index : UInt32) : UInt32
    @lpVtbl.value.get_property_name_length.unsafe_as(Proc(UInt32, UInt32)).call(index)
  end
  def get_type(index : UInt32) : D2D1_PROPERTY_TYPE
    @lpVtbl.value.get_type.unsafe_as(Proc(UInt32, D2D1_PROPERTY_TYPE)).call(index)
  end
  def get_property_index(name : LibC::LPWSTR) : UInt32
    @lpVtbl.value.get_property_index.unsafe_as(Proc(LibC::LPWSTR, UInt32)).call(name)
  end
  def set_value_by_name(name : LibC::LPWSTR, type : D2D1_PROPERTY_TYPE, data : UInt8*, datasize : UInt32) : HRESULT
    @lpVtbl.value.set_value_by_name.unsafe_as(Proc(LibC::LPWSTR, D2D1_PROPERTY_TYPE, UInt8*, UInt32, HRESULT)).call(name, type, data, datasize)
  end
  def set_value(index : UInt32, type : D2D1_PROPERTY_TYPE, data : UInt8*, datasize : UInt32) : HRESULT
    @lpVtbl.value.set_value.unsafe_as(Proc(UInt32, D2D1_PROPERTY_TYPE, UInt8*, UInt32, HRESULT)).call(index, type, data, datasize)
  end
  def get_value_by_name(name : LibC::LPWSTR, type : D2D1_PROPERTY_TYPE, data : UInt8*, datasize : UInt32) : HRESULT
    @lpVtbl.value.get_value_by_name.unsafe_as(Proc(LibC::LPWSTR, D2D1_PROPERTY_TYPE, UInt8*, UInt32, HRESULT)).call(name, type, data, datasize)
  end
  def get_value(index : UInt32, type : D2D1_PROPERTY_TYPE, data : UInt8*, datasize : UInt32) : HRESULT
    @lpVtbl.value.get_value.unsafe_as(Proc(UInt32, D2D1_PROPERTY_TYPE, UInt8*, UInt32, HRESULT)).call(index, type, data, datasize)
  end
  def get_value_size(index : UInt32) : UInt32
    @lpVtbl.value.get_value_size.unsafe_as(Proc(UInt32, UInt32)).call(index)
  end
  def get_sub_properties(index : UInt32, subproperties : ID2D1Properties*) : HRESULT
    @lpVtbl.value.get_sub_properties.unsafe_as(Proc(UInt32, ID2D1Properties*, HRESULT)).call(index, subproperties)
  end
  def set_input(index : UInt32, input : ID2D1Image, invalidate : LibC::BOOL) : Void
    @lpVtbl.value.set_input.unsafe_as(Proc(UInt32, ID2D1Image, LibC::BOOL, Void)).call(index, input, invalidate)
  end
  def set_input_count(inputcount : UInt32) : HRESULT
    @lpVtbl.value.set_input_count.unsafe_as(Proc(UInt32, HRESULT)).call(inputcount)
  end
  def get_input(index : UInt32, input : ID2D1Image*) : Void
    @lpVtbl.value.get_input.unsafe_as(Proc(UInt32, ID2D1Image*, Void)).call(index, input)
  end
  def get_input_count : UInt32
    @lpVtbl.value.get_input_count.unsafe_as(Proc(UInt32)).call
  end
  def get_output(outputimage : ID2D1Image*) : Void
    @lpVtbl.value.get_output.unsafe_as(Proc(ID2D1Image*, Void)).call(outputimage)
  end
end
struct LibWin32::ID2D1Bitmap1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def get_size : D2D_SIZE_F
    @lpVtbl.value.get_size.unsafe_as(Proc(D2D_SIZE_F)).call
  end
  def get_pixel_size : D2D_SIZE_U
    @lpVtbl.value.get_pixel_size.unsafe_as(Proc(D2D_SIZE_U)).call
  end
  def get_pixel_format : D2D1_PIXEL_FORMAT
    @lpVtbl.value.get_pixel_format.unsafe_as(Proc(D2D1_PIXEL_FORMAT)).call
  end
  def get_dpi(dpix : Float32*, dpiy : Float32*) : Void
    @lpVtbl.value.get_dpi.unsafe_as(Proc(Float32*, Float32*, Void)).call(dpix, dpiy)
  end
  def copy_from_bitmap(destpoint : D2D_POINT_2U*, bitmap : ID2D1Bitmap, srcrect : D2D_RECT_U*) : HRESULT
    @lpVtbl.value.copy_from_bitmap.unsafe_as(Proc(D2D_POINT_2U*, ID2D1Bitmap, D2D_RECT_U*, HRESULT)).call(destpoint, bitmap, srcrect)
  end
  def copy_from_render_target(destpoint : D2D_POINT_2U*, rendertarget : ID2D1RenderTarget, srcrect : D2D_RECT_U*) : HRESULT
    @lpVtbl.value.copy_from_render_target.unsafe_as(Proc(D2D_POINT_2U*, ID2D1RenderTarget, D2D_RECT_U*, HRESULT)).call(destpoint, rendertarget, srcrect)
  end
  def copy_from_memory(dstrect : D2D_RECT_U*, srcdata : Void*, pitch : UInt32) : HRESULT
    @lpVtbl.value.copy_from_memory.unsafe_as(Proc(D2D_RECT_U*, Void*, UInt32, HRESULT)).call(dstrect, srcdata, pitch)
  end
  def get_color_context(colorcontext : ID2D1ColorContext*) : Void
    @lpVtbl.value.get_color_context.unsafe_as(Proc(ID2D1ColorContext*, Void)).call(colorcontext)
  end
  def get_options : D2D1_BITMAP_OPTIONS
    @lpVtbl.value.get_options.unsafe_as(Proc(D2D1_BITMAP_OPTIONS)).call
  end
  def get_surface(dxgisurface : IDXGISurface*) : HRESULT
    @lpVtbl.value.get_surface.unsafe_as(Proc(IDXGISurface*, HRESULT)).call(dxgisurface)
  end
  def map(options : D2D1_MAP_OPTIONS, mappedrect : D2D1_MAPPED_RECT*) : HRESULT
    @lpVtbl.value.map.unsafe_as(Proc(D2D1_MAP_OPTIONS, D2D1_MAPPED_RECT*, HRESULT)).call(options, mappedrect)
  end
  def unmap : HRESULT
    @lpVtbl.value.unmap.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::ID2D1ColorContext
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def get_color_space : D2D1_COLOR_SPACE
    @lpVtbl.value.get_color_space.unsafe_as(Proc(D2D1_COLOR_SPACE)).call
  end
  def get_profile_size : UInt32
    @lpVtbl.value.get_profile_size.unsafe_as(Proc(UInt32)).call
  end
  def get_profile(profile : UInt8*, profilesize : UInt32) : HRESULT
    @lpVtbl.value.get_profile.unsafe_as(Proc(UInt8*, UInt32, HRESULT)).call(profile, profilesize)
  end
end
struct LibWin32::ID2D1GradientStopCollection1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def get_gradient_stop_count : UInt32
    @lpVtbl.value.get_gradient_stop_count.unsafe_as(Proc(UInt32)).call
  end
  def get_gradient_stops(gradientstops : D2D1_GRADIENT_STOP*, gradientstopscount : UInt32) : Void
    @lpVtbl.value.get_gradient_stops.unsafe_as(Proc(D2D1_GRADIENT_STOP*, UInt32, Void)).call(gradientstops, gradientstopscount)
  end
  def get_color_interpolation_gamma : D2D1_GAMMA
    @lpVtbl.value.get_color_interpolation_gamma.unsafe_as(Proc(D2D1_GAMMA)).call
  end
  def get_extend_mode : D2D1_EXTEND_MODE
    @lpVtbl.value.get_extend_mode.unsafe_as(Proc(D2D1_EXTEND_MODE)).call
  end
  def get_gradient_stops1(gradientstops : D2D1_GRADIENT_STOP*, gradientstopscount : UInt32) : Void
    @lpVtbl.value.get_gradient_stops1.unsafe_as(Proc(D2D1_GRADIENT_STOP*, UInt32, Void)).call(gradientstops, gradientstopscount)
  end
  def get_pre_interpolation_space : D2D1_COLOR_SPACE
    @lpVtbl.value.get_pre_interpolation_space.unsafe_as(Proc(D2D1_COLOR_SPACE)).call
  end
  def get_post_interpolation_space : D2D1_COLOR_SPACE
    @lpVtbl.value.get_post_interpolation_space.unsafe_as(Proc(D2D1_COLOR_SPACE)).call
  end
  def get_buffer_precision : D2D1_BUFFER_PRECISION
    @lpVtbl.value.get_buffer_precision.unsafe_as(Proc(D2D1_BUFFER_PRECISION)).call
  end
  def get_color_interpolation_mode : D2D1_COLOR_INTERPOLATION_MODE
    @lpVtbl.value.get_color_interpolation_mode.unsafe_as(Proc(D2D1_COLOR_INTERPOLATION_MODE)).call
  end
end
struct LibWin32::ID2D1DrawingStateBlock1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def get_description(statedescription : D2D1_DRAWING_STATE_DESCRIPTION*) : Void
    @lpVtbl.value.get_description.unsafe_as(Proc(D2D1_DRAWING_STATE_DESCRIPTION*, Void)).call(statedescription)
  end
  def set_description(statedescription : D2D1_DRAWING_STATE_DESCRIPTION*) : Void
    @lpVtbl.value.set_description.unsafe_as(Proc(D2D1_DRAWING_STATE_DESCRIPTION*, Void)).call(statedescription)
  end
  def set_text_rendering_params(textrenderingparams : IDWriteRenderingParams) : Void
    @lpVtbl.value.set_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams, Void)).call(textrenderingparams)
  end
  def get_text_rendering_params(textrenderingparams : IDWriteRenderingParams*) : Void
    @lpVtbl.value.get_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams*, Void)).call(textrenderingparams)
  end
  def get_description2(statedescription : D2D1_DRAWING_STATE_DESCRIPTION1*) : Void
    @lpVtbl.value.get_description2.unsafe_as(Proc(D2D1_DRAWING_STATE_DESCRIPTION1*, Void)).call(statedescription)
  end
  def set_description2(statedescription : D2D1_DRAWING_STATE_DESCRIPTION1*) : Void
    @lpVtbl.value.set_description2.unsafe_as(Proc(D2D1_DRAWING_STATE_DESCRIPTION1*, Void)).call(statedescription)
  end
end
struct LibWin32::ID2D1DeviceContext
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def create_bitmap(size : D2D_SIZE_U, srcdata : Void*, pitch : UInt32, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_bitmap.unsafe_as(Proc(D2D_SIZE_U, Void*, UInt32, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(size, srcdata, pitch, bitmapproperties, bitmap)
  end
  def create_bitmap_from_wic_bitmap(wicbitmapsource : IWICBitmapSource, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_bitmap_from_wic_bitmap.unsafe_as(Proc(IWICBitmapSource, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(wicbitmapsource, bitmapproperties, bitmap)
  end
  def create_shared_bitmap(riid : Guid*, data : Void*, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_shared_bitmap.unsafe_as(Proc(Guid*, Void*, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(riid, data, bitmapproperties, bitmap)
  end
  def create_bitmap_brush(bitmap : ID2D1Bitmap, bitmapbrushproperties : D2D1_BITMAP_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, bitmapbrush : ID2D1BitmapBrush*) : HRESULT
    @lpVtbl.value.create_bitmap_brush.unsafe_as(Proc(ID2D1Bitmap, D2D1_BITMAP_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush*, HRESULT)).call(bitmap, bitmapbrushproperties, brushproperties, bitmapbrush)
  end
  def create_solid_color_brush(color : D2D1_COLOR_F*, brushproperties : D2D1_BRUSH_PROPERTIES*, solidcolorbrush : ID2D1SolidColorBrush*) : HRESULT
    @lpVtbl.value.create_solid_color_brush.unsafe_as(Proc(D2D1_COLOR_F*, D2D1_BRUSH_PROPERTIES*, ID2D1SolidColorBrush*, HRESULT)).call(color, brushproperties, solidcolorbrush)
  end
  def create_gradient_stop_collection(gradientstops : D2D1_GRADIENT_STOP*, gradientstopscount : UInt32, colorinterpolationgamma : D2D1_GAMMA, extendmode : D2D1_EXTEND_MODE, gradientstopcollection : ID2D1GradientStopCollection*) : HRESULT
    @lpVtbl.value.create_gradient_stop_collection.unsafe_as(Proc(D2D1_GRADIENT_STOP*, UInt32, D2D1_GAMMA, D2D1_EXTEND_MODE, ID2D1GradientStopCollection*, HRESULT)).call(gradientstops, gradientstopscount, colorinterpolationgamma, extendmode, gradientstopcollection)
  end
  def create_linear_gradient_brush(lineargradientbrushproperties : D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, gradientstopcollection : ID2D1GradientStopCollection, lineargradientbrush : ID2D1LinearGradientBrush*) : HRESULT
    @lpVtbl.value.create_linear_gradient_brush.unsafe_as(Proc(D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection, ID2D1LinearGradientBrush*, HRESULT)).call(lineargradientbrushproperties, brushproperties, gradientstopcollection, lineargradientbrush)
  end
  def create_radial_gradient_brush(radialgradientbrushproperties : D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, gradientstopcollection : ID2D1GradientStopCollection, radialgradientbrush : ID2D1RadialGradientBrush*) : HRESULT
    @lpVtbl.value.create_radial_gradient_brush.unsafe_as(Proc(D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection, ID2D1RadialGradientBrush*, HRESULT)).call(radialgradientbrushproperties, brushproperties, gradientstopcollection, radialgradientbrush)
  end
  def create_compatible_render_target(desiredsize : D2D_SIZE_F*, desiredpixelsize : D2D_SIZE_U*, desiredformat : D2D1_PIXEL_FORMAT*, options : D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, bitmaprendertarget : ID2D1BitmapRenderTarget*) : HRESULT
    @lpVtbl.value.create_compatible_render_target.unsafe_as(Proc(D2D_SIZE_F*, D2D_SIZE_U*, D2D1_PIXEL_FORMAT*, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, ID2D1BitmapRenderTarget*, HRESULT)).call(desiredsize, desiredpixelsize, desiredformat, options, bitmaprendertarget)
  end
  def create_layer(size : D2D_SIZE_F*, layer : ID2D1Layer*) : HRESULT
    @lpVtbl.value.create_layer.unsafe_as(Proc(D2D_SIZE_F*, ID2D1Layer*, HRESULT)).call(size, layer)
  end
  def create_mesh(mesh : ID2D1Mesh*) : HRESULT
    @lpVtbl.value.create_mesh.unsafe_as(Proc(ID2D1Mesh*, HRESULT)).call(mesh)
  end
  def draw_line(point0 : D2D_POINT_2F, point1 : D2D_POINT_2F, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_line.unsafe_as(Proc(D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(point0, point1, brush, strokewidth, strokestyle)
  end
  def draw_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(rect, brush, strokewidth, strokestyle)
  end
  def fill_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Void)).call(rect, brush)
  end
  def draw_rounded_rectangle(roundedrect : D2D1_ROUNDED_RECT*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_rounded_rectangle.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(roundedrect, brush, strokewidth, strokestyle)
  end
  def fill_rounded_rectangle(roundedrect : D2D1_ROUNDED_RECT*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_rounded_rectangle.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1Brush, Void)).call(roundedrect, brush)
  end
  def draw_ellipse(ellipse : D2D1_ELLIPSE*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_ellipse.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(ellipse, brush, strokewidth, strokestyle)
  end
  def fill_ellipse(ellipse : D2D1_ELLIPSE*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_ellipse.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1Brush, Void)).call(ellipse, brush)
  end
  def draw_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(geometry, brush, strokewidth, strokestyle)
  end
  def fill_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, opacitybrush : ID2D1Brush) : Void
    @lpVtbl.value.fill_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, ID2D1Brush, Void)).call(geometry, brush, opacitybrush)
  end
  def fill_mesh(mesh : ID2D1Mesh, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_mesh.unsafe_as(Proc(ID2D1Mesh, ID2D1Brush, Void)).call(mesh, brush)
  end
  def fill_opacity_mask(opacitymask : ID2D1Bitmap, brush : ID2D1Brush, content : D2D1_OPACITY_MASK_CONTENT, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.fill_opacity_mask.unsafe_as(Proc(ID2D1Bitmap, ID2D1Brush, D2D1_OPACITY_MASK_CONTENT, D2D_RECT_F*, D2D_RECT_F*, Void)).call(opacitymask, brush, content, destinationrectangle, sourcerectangle)
  end
  def draw_bitmap(bitmap : ID2D1Bitmap, destinationrectangle : D2D_RECT_F*, opacity : Float32, interpolationmode : D2D1_BITMAP_INTERPOLATION_MODE, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.draw_bitmap.unsafe_as(Proc(ID2D1Bitmap, D2D_RECT_F*, Float32, D2D1_BITMAP_INTERPOLATION_MODE, D2D_RECT_F*, Void)).call(bitmap, destinationrectangle, opacity, interpolationmode, sourcerectangle)
  end
  def draw_text(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, layoutrect : D2D_RECT_F*, defaultfillbrush : ID2D1Brush, options : D2D1_DRAW_TEXT_OPTIONS, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_text.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, D2D_RECT_F*, ID2D1Brush, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE, Void)).call(string, stringlength, textformat, layoutrect, defaultfillbrush, options, measuringmode)
  end
  def draw_text_layout(origin : D2D_POINT_2F, textlayout : IDWriteTextLayout, defaultfillbrush : ID2D1Brush, options : D2D1_DRAW_TEXT_OPTIONS) : Void
    @lpVtbl.value.draw_text_layout.unsafe_as(Proc(D2D_POINT_2F, IDWriteTextLayout, ID2D1Brush, D2D1_DRAW_TEXT_OPTIONS, Void)).call(origin, textlayout, defaultfillbrush, options)
  end
  def draw_glyph_run(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, foregroundbrush : ID2D1Brush, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_glyph_run.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, ID2D1Brush, DWRITE_MEASURING_MODE, Void)).call(baselineorigin, glyphrun, foregroundbrush, measuringmode)
  end
  def set_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.set_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def get_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.get_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def set_antialias_mode(antialiasmode : D2D1_ANTIALIAS_MODE) : Void
    @lpVtbl.value.set_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE, Void)).call(antialiasmode)
  end
  def get_antialias_mode : D2D1_ANTIALIAS_MODE
    @lpVtbl.value.get_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE)).call
  end
  def set_text_antialias_mode(textantialiasmode : D2D1_TEXT_ANTIALIAS_MODE) : Void
    @lpVtbl.value.set_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE, Void)).call(textantialiasmode)
  end
  def get_text_antialias_mode : D2D1_TEXT_ANTIALIAS_MODE
    @lpVtbl.value.get_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE)).call
  end
  def set_text_rendering_params(textrenderingparams : IDWriteRenderingParams) : Void
    @lpVtbl.value.set_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams, Void)).call(textrenderingparams)
  end
  def get_text_rendering_params(textrenderingparams : IDWriteRenderingParams*) : Void
    @lpVtbl.value.get_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams*, Void)).call(textrenderingparams)
  end
  def set_tags(tag1 : UInt64, tag2 : UInt64) : Void
    @lpVtbl.value.set_tags.unsafe_as(Proc(UInt64, UInt64, Void)).call(tag1, tag2)
  end
  def get_tags(tag1 : UInt64*, tag2 : UInt64*) : Void
    @lpVtbl.value.get_tags.unsafe_as(Proc(UInt64*, UInt64*, Void)).call(tag1, tag2)
  end
  def push_layer(layerparameters : D2D1_LAYER_PARAMETERS*, layer : ID2D1Layer) : Void
    @lpVtbl.value.push_layer.unsafe_as(Proc(D2D1_LAYER_PARAMETERS*, ID2D1Layer, Void)).call(layerparameters, layer)
  end
  def pop_layer : Void
    @lpVtbl.value.pop_layer.unsafe_as(Proc(Void)).call
  end
  def flush(tag1 : UInt64*, tag2 : UInt64*) : HRESULT
    @lpVtbl.value.flush.unsafe_as(Proc(UInt64*, UInt64*, HRESULT)).call(tag1, tag2)
  end
  def save_drawing_state(drawingstateblock : ID2D1DrawingStateBlock) : Void
    @lpVtbl.value.save_drawing_state.unsafe_as(Proc(ID2D1DrawingStateBlock, Void)).call(drawingstateblock)
  end
  def restore_drawing_state(drawingstateblock : ID2D1DrawingStateBlock) : Void
    @lpVtbl.value.restore_drawing_state.unsafe_as(Proc(ID2D1DrawingStateBlock, Void)).call(drawingstateblock)
  end
  def push_axis_aligned_clip(cliprect : D2D_RECT_F*, antialiasmode : D2D1_ANTIALIAS_MODE) : Void
    @lpVtbl.value.push_axis_aligned_clip.unsafe_as(Proc(D2D_RECT_F*, D2D1_ANTIALIAS_MODE, Void)).call(cliprect, antialiasmode)
  end
  def pop_axis_aligned_clip : Void
    @lpVtbl.value.pop_axis_aligned_clip.unsafe_as(Proc(Void)).call
  end
  def clear(clearcolor : D2D1_COLOR_F*) : Void
    @lpVtbl.value.clear.unsafe_as(Proc(D2D1_COLOR_F*, Void)).call(clearcolor)
  end
  def begin_draw : Void
    @lpVtbl.value.begin_draw.unsafe_as(Proc(Void)).call
  end
  def end_draw(tag1 : UInt64*, tag2 : UInt64*) : HRESULT
    @lpVtbl.value.end_draw.unsafe_as(Proc(UInt64*, UInt64*, HRESULT)).call(tag1, tag2)
  end
  def get_pixel_format : D2D1_PIXEL_FORMAT
    @lpVtbl.value.get_pixel_format.unsafe_as(Proc(D2D1_PIXEL_FORMAT)).call
  end
  def set_dpi(dpix : Float32, dpiy : Float32) : Void
    @lpVtbl.value.set_dpi.unsafe_as(Proc(Float32, Float32, Void)).call(dpix, dpiy)
  end
  def get_dpi(dpix : Float32*, dpiy : Float32*) : Void
    @lpVtbl.value.get_dpi.unsafe_as(Proc(Float32*, Float32*, Void)).call(dpix, dpiy)
  end
  def get_size : D2D_SIZE_F
    @lpVtbl.value.get_size.unsafe_as(Proc(D2D_SIZE_F)).call
  end
  def get_pixel_size : D2D_SIZE_U
    @lpVtbl.value.get_pixel_size.unsafe_as(Proc(D2D_SIZE_U)).call
  end
  def get_maximum_bitmap_size : UInt32
    @lpVtbl.value.get_maximum_bitmap_size.unsafe_as(Proc(UInt32)).call
  end
  def is_supported(rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*) : LibC::BOOL
    @lpVtbl.value.is_supported.unsafe_as(Proc(D2D1_RENDER_TARGET_PROPERTIES*, LibC::BOOL)).call(rendertargetproperties)
  end
  def create_bitmap2(size : D2D_SIZE_U, sourcedata : Void*, pitch : UInt32, bitmapproperties : D2D1_BITMAP_PROPERTIES1*, bitmap : ID2D1Bitmap1*) : HRESULT
    @lpVtbl.value.create_bitmap2.unsafe_as(Proc(D2D_SIZE_U, Void*, UInt32, D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1*, HRESULT)).call(size, sourcedata, pitch, bitmapproperties, bitmap)
  end
  def create_bitmap_from_wic_bitmap2(wicbitmapsource : IWICBitmapSource, bitmapproperties : D2D1_BITMAP_PROPERTIES1*, bitmap : ID2D1Bitmap1*) : HRESULT
    @lpVtbl.value.create_bitmap_from_wic_bitmap2.unsafe_as(Proc(IWICBitmapSource, D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1*, HRESULT)).call(wicbitmapsource, bitmapproperties, bitmap)
  end
  def create_color_context(space : D2D1_COLOR_SPACE, profile : UInt8*, profilesize : UInt32, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context.unsafe_as(Proc(D2D1_COLOR_SPACE, UInt8*, UInt32, ID2D1ColorContext*, HRESULT)).call(space, profile, profilesize, colorcontext)
  end
  def create_color_context_from_filename(filename : LibC::LPWSTR, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context_from_filename.unsafe_as(Proc(LibC::LPWSTR, ID2D1ColorContext*, HRESULT)).call(filename, colorcontext)
  end
  def create_color_context_from_wic_color_context(wiccolorcontext : IWICColorContext, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context_from_wic_color_context.unsafe_as(Proc(IWICColorContext, ID2D1ColorContext*, HRESULT)).call(wiccolorcontext, colorcontext)
  end
  def create_bitmap_from_dxgi_surface(surface : IDXGISurface, bitmapproperties : D2D1_BITMAP_PROPERTIES1*, bitmap : ID2D1Bitmap1*) : HRESULT
    @lpVtbl.value.create_bitmap_from_dxgi_surface.unsafe_as(Proc(IDXGISurface, D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1*, HRESULT)).call(surface, bitmapproperties, bitmap)
  end
  def create_effect(effectid : Guid*, effect : ID2D1Effect*) : HRESULT
    @lpVtbl.value.create_effect.unsafe_as(Proc(Guid*, ID2D1Effect*, HRESULT)).call(effectid, effect)
  end
  def create_gradient_stop_collection2(straightalphagradientstops : D2D1_GRADIENT_STOP*, straightalphagradientstopscount : UInt32, preinterpolationspace : D2D1_COLOR_SPACE, postinterpolationspace : D2D1_COLOR_SPACE, bufferprecision : D2D1_BUFFER_PRECISION, extendmode : D2D1_EXTEND_MODE, colorinterpolationmode : D2D1_COLOR_INTERPOLATION_MODE, gradientstopcollection1 : ID2D1GradientStopCollection1*) : HRESULT
    @lpVtbl.value.create_gradient_stop_collection2.unsafe_as(Proc(D2D1_GRADIENT_STOP*, UInt32, D2D1_COLOR_SPACE, D2D1_COLOR_SPACE, D2D1_BUFFER_PRECISION, D2D1_EXTEND_MODE, D2D1_COLOR_INTERPOLATION_MODE, ID2D1GradientStopCollection1*, HRESULT)).call(straightalphagradientstops, straightalphagradientstopscount, preinterpolationspace, postinterpolationspace, bufferprecision, extendmode, colorinterpolationmode, gradientstopcollection1)
  end
  def create_image_brush(image : ID2D1Image, imagebrushproperties : D2D1_IMAGE_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, imagebrush : ID2D1ImageBrush*) : HRESULT
    @lpVtbl.value.create_image_brush.unsafe_as(Proc(ID2D1Image, D2D1_IMAGE_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1ImageBrush*, HRESULT)).call(image, imagebrushproperties, brushproperties, imagebrush)
  end
  def create_bitmap_brush2(bitmap : ID2D1Bitmap, bitmapbrushproperties : D2D1_BITMAP_BRUSH_PROPERTIES1*, brushproperties : D2D1_BRUSH_PROPERTIES*, bitmapbrush : ID2D1BitmapBrush1*) : HRESULT
    @lpVtbl.value.create_bitmap_brush2.unsafe_as(Proc(ID2D1Bitmap, D2D1_BITMAP_BRUSH_PROPERTIES1*, D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush1*, HRESULT)).call(bitmap, bitmapbrushproperties, brushproperties, bitmapbrush)
  end
  def create_command_list(commandlist : ID2D1CommandList*) : HRESULT
    @lpVtbl.value.create_command_list.unsafe_as(Proc(ID2D1CommandList*, HRESULT)).call(commandlist)
  end
  def is_dxgi_format_supported(format : DXGI_FORMAT) : LibC::BOOL
    @lpVtbl.value.is_dxgi_format_supported.unsafe_as(Proc(DXGI_FORMAT, LibC::BOOL)).call(format)
  end
  def is_buffer_precision_supported(bufferprecision : D2D1_BUFFER_PRECISION) : LibC::BOOL
    @lpVtbl.value.is_buffer_precision_supported.unsafe_as(Proc(D2D1_BUFFER_PRECISION, LibC::BOOL)).call(bufferprecision)
  end
  def get_image_local_bounds(image : ID2D1Image, localbounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_image_local_bounds.unsafe_as(Proc(ID2D1Image, D2D_RECT_F*, HRESULT)).call(image, localbounds)
  end
  def get_image_world_bounds(image : ID2D1Image, worldbounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_image_world_bounds.unsafe_as(Proc(ID2D1Image, D2D_RECT_F*, HRESULT)).call(image, worldbounds)
  end
  def get_glyph_run_world_bounds(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, measuringmode : DWRITE_MEASURING_MODE, bounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_glyph_run_world_bounds.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D_RECT_F*, HRESULT)).call(baselineorigin, glyphrun, measuringmode, bounds)
  end
  def get_device(device : ID2D1Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID2D1Device*, Void)).call(device)
  end
  def set_target(image : ID2D1Image) : Void
    @lpVtbl.value.set_target.unsafe_as(Proc(ID2D1Image, Void)).call(image)
  end
  def get_target(image : ID2D1Image*) : Void
    @lpVtbl.value.get_target.unsafe_as(Proc(ID2D1Image*, Void)).call(image)
  end
  def set_rendering_controls(renderingcontrols : D2D1_RENDERING_CONTROLS*) : Void
    @lpVtbl.value.set_rendering_controls.unsafe_as(Proc(D2D1_RENDERING_CONTROLS*, Void)).call(renderingcontrols)
  end
  def get_rendering_controls(renderingcontrols : D2D1_RENDERING_CONTROLS*) : Void
    @lpVtbl.value.get_rendering_controls.unsafe_as(Proc(D2D1_RENDERING_CONTROLS*, Void)).call(renderingcontrols)
  end
  def set_primitive_blend(primitiveblend : D2D1_PRIMITIVE_BLEND) : Void
    @lpVtbl.value.set_primitive_blend.unsafe_as(Proc(D2D1_PRIMITIVE_BLEND, Void)).call(primitiveblend)
  end
  def get_primitive_blend : D2D1_PRIMITIVE_BLEND
    @lpVtbl.value.get_primitive_blend.unsafe_as(Proc(D2D1_PRIMITIVE_BLEND)).call
  end
  def set_unit_mode(unitmode : D2D1_UNIT_MODE) : Void
    @lpVtbl.value.set_unit_mode.unsafe_as(Proc(D2D1_UNIT_MODE, Void)).call(unitmode)
  end
  def get_unit_mode : D2D1_UNIT_MODE
    @lpVtbl.value.get_unit_mode.unsafe_as(Proc(D2D1_UNIT_MODE)).call
  end
  def draw_glyph_run2(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, glyphrundescription : DWRITE_GLYPH_RUN_DESCRIPTION*, foregroundbrush : ID2D1Brush, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_glyph_run2.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush, DWRITE_MEASURING_MODE, Void)).call(baselineorigin, glyphrun, glyphrundescription, foregroundbrush, measuringmode)
  end
  def draw_image(image : ID2D1Image, targetoffset : D2D_POINT_2F*, imagerectangle : D2D_RECT_F*, interpolationmode : D2D1_INTERPOLATION_MODE, compositemode : D2D1_COMPOSITE_MODE) : Void
    @lpVtbl.value.draw_image.unsafe_as(Proc(ID2D1Image, D2D_POINT_2F*, D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE, Void)).call(image, targetoffset, imagerectangle, interpolationmode, compositemode)
  end
  def draw_gdi_metafile(gdimetafile : ID2D1GdiMetafile, targetoffset : D2D_POINT_2F*) : Void
    @lpVtbl.value.draw_gdi_metafile.unsafe_as(Proc(ID2D1GdiMetafile, D2D_POINT_2F*, Void)).call(gdimetafile, targetoffset)
  end
  def draw_bitmap2(bitmap : ID2D1Bitmap, destinationrectangle : D2D_RECT_F*, opacity : Float32, interpolationmode : D2D1_INTERPOLATION_MODE, sourcerectangle : D2D_RECT_F*, perspectivetransform : D2D_MATRIX_4X4_F*) : Void
    @lpVtbl.value.draw_bitmap2.unsafe_as(Proc(ID2D1Bitmap, D2D_RECT_F*, Float32, D2D1_INTERPOLATION_MODE, D2D_RECT_F*, D2D_MATRIX_4X4_F*, Void)).call(bitmap, destinationrectangle, opacity, interpolationmode, sourcerectangle, perspectivetransform)
  end
  def push_layer2(layerparameters : D2D1_LAYER_PARAMETERS1*, layer : ID2D1Layer) : Void
    @lpVtbl.value.push_layer2.unsafe_as(Proc(D2D1_LAYER_PARAMETERS1*, ID2D1Layer, Void)).call(layerparameters, layer)
  end
  def invalidate_effect_input_rectangle(effect : ID2D1Effect, input : UInt32, inputrectangle : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.invalidate_effect_input_rectangle.unsafe_as(Proc(ID2D1Effect, UInt32, D2D_RECT_F*, HRESULT)).call(effect, input, inputrectangle)
  end
  def get_effect_invalid_rectangle_count(effect : ID2D1Effect, rectanglecount : UInt32*) : HRESULT
    @lpVtbl.value.get_effect_invalid_rectangle_count.unsafe_as(Proc(ID2D1Effect, UInt32*, HRESULT)).call(effect, rectanglecount)
  end
  def get_effect_invalid_rectangles(effect : ID2D1Effect, rectangles : D2D_RECT_F*, rectanglescount : UInt32) : HRESULT
    @lpVtbl.value.get_effect_invalid_rectangles.unsafe_as(Proc(ID2D1Effect, D2D_RECT_F*, UInt32, HRESULT)).call(effect, rectangles, rectanglescount)
  end
  def get_effect_required_input_rectangles(rendereffect : ID2D1Effect, renderimagerectangle : D2D_RECT_F*, inputdescriptions : D2D1_EFFECT_INPUT_DESCRIPTION*, requiredinputrects : D2D_RECT_F*, inputcount : UInt32) : HRESULT
    @lpVtbl.value.get_effect_required_input_rectangles.unsafe_as(Proc(ID2D1Effect, D2D_RECT_F*, D2D1_EFFECT_INPUT_DESCRIPTION*, D2D_RECT_F*, UInt32, HRESULT)).call(rendereffect, renderimagerectangle, inputdescriptions, requiredinputrects, inputcount)
  end
  def fill_opacity_mask2(opacitymask : ID2D1Bitmap, brush : ID2D1Brush, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.fill_opacity_mask2.unsafe_as(Proc(ID2D1Bitmap, ID2D1Brush, D2D_RECT_F*, D2D_RECT_F*, Void)).call(opacitymask, brush, destinationrectangle, sourcerectangle)
  end
end
struct LibWin32::ID2D1Device
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def create_device_context(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext : ID2D1DeviceContext*) : HRESULT
    @lpVtbl.value.create_device_context.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext*, HRESULT)).call(options, devicecontext)
  end
  def create_print_control(wicfactory : IWICImagingFactory, documenttarget : IPrintDocumentPackageTarget, printcontrolproperties : D2D1_PRINT_CONTROL_PROPERTIES*, printcontrol : ID2D1PrintControl*) : HRESULT
    @lpVtbl.value.create_print_control.unsafe_as(Proc(IWICImagingFactory, IPrintDocumentPackageTarget, D2D1_PRINT_CONTROL_PROPERTIES*, ID2D1PrintControl*, HRESULT)).call(wicfactory, documenttarget, printcontrolproperties, printcontrol)
  end
  def set_maximum_texture_memory(maximuminbytes : UInt64) : Void
    @lpVtbl.value.set_maximum_texture_memory.unsafe_as(Proc(UInt64, Void)).call(maximuminbytes)
  end
  def get_maximum_texture_memory : UInt64
    @lpVtbl.value.get_maximum_texture_memory.unsafe_as(Proc(UInt64)).call
  end
  def clear_resources(millisecondssinceuse : UInt32) : Void
    @lpVtbl.value.clear_resources.unsafe_as(Proc(UInt32, Void)).call(millisecondssinceuse)
  end
end
struct LibWin32::ID2D1Factory1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def reload_system_metrics : HRESULT
    @lpVtbl.value.reload_system_metrics.unsafe_as(Proc(HRESULT)).call
  end
  def get_desktop_dpi(dpix : Float32*, dpiy : Float32*) : Void
    @lpVtbl.value.get_desktop_dpi.unsafe_as(Proc(Float32*, Float32*, Void)).call(dpix, dpiy)
  end
  def create_rectangle_geometry(rectangle : D2D_RECT_F*, rectanglegeometry : ID2D1RectangleGeometry*) : HRESULT
    @lpVtbl.value.create_rectangle_geometry.unsafe_as(Proc(D2D_RECT_F*, ID2D1RectangleGeometry*, HRESULT)).call(rectangle, rectanglegeometry)
  end
  def create_rounded_rectangle_geometry(roundedrectangle : D2D1_ROUNDED_RECT*, roundedrectanglegeometry : ID2D1RoundedRectangleGeometry*) : HRESULT
    @lpVtbl.value.create_rounded_rectangle_geometry.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1RoundedRectangleGeometry*, HRESULT)).call(roundedrectangle, roundedrectanglegeometry)
  end
  def create_ellipse_geometry(ellipse : D2D1_ELLIPSE*, ellipsegeometry : ID2D1EllipseGeometry*) : HRESULT
    @lpVtbl.value.create_ellipse_geometry.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1EllipseGeometry*, HRESULT)).call(ellipse, ellipsegeometry)
  end
  def create_geometry_group(fillmode : D2D1_FILL_MODE, geometries : ID2D1Geometry*, geometriescount : UInt32, geometrygroup : ID2D1GeometryGroup*) : HRESULT
    @lpVtbl.value.create_geometry_group.unsafe_as(Proc(D2D1_FILL_MODE, ID2D1Geometry*, UInt32, ID2D1GeometryGroup*, HRESULT)).call(fillmode, geometries, geometriescount, geometrygroup)
  end
  def create_transformed_geometry(sourcegeometry : ID2D1Geometry, transform : D2D_MATRIX_3X2_F*, transformedgeometry : ID2D1TransformedGeometry*) : HRESULT
    @lpVtbl.value.create_transformed_geometry.unsafe_as(Proc(ID2D1Geometry, D2D_MATRIX_3X2_F*, ID2D1TransformedGeometry*, HRESULT)).call(sourcegeometry, transform, transformedgeometry)
  end
  def create_path_geometry(pathgeometry : ID2D1PathGeometry*) : HRESULT
    @lpVtbl.value.create_path_geometry.unsafe_as(Proc(ID2D1PathGeometry*, HRESULT)).call(pathgeometry)
  end
  def create_stroke_style(strokestyleproperties : D2D1_STROKE_STYLE_PROPERTIES*, dashes : Float32*, dashescount : UInt32, strokestyle : ID2D1StrokeStyle*) : HRESULT
    @lpVtbl.value.create_stroke_style.unsafe_as(Proc(D2D1_STROKE_STYLE_PROPERTIES*, Float32*, UInt32, ID2D1StrokeStyle*, HRESULT)).call(strokestyleproperties, dashes, dashescount, strokestyle)
  end
  def create_drawing_state_block(drawingstatedescription : D2D1_DRAWING_STATE_DESCRIPTION*, textrenderingparams : IDWriteRenderingParams, drawingstateblock : ID2D1DrawingStateBlock*) : HRESULT
    @lpVtbl.value.create_drawing_state_block.unsafe_as(Proc(D2D1_DRAWING_STATE_DESCRIPTION*, IDWriteRenderingParams, ID2D1DrawingStateBlock*, HRESULT)).call(drawingstatedescription, textrenderingparams, drawingstateblock)
  end
  def create_wic_bitmap_render_target(target : IWICBitmap, rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, rendertarget : ID2D1RenderTarget*) : HRESULT
    @lpVtbl.value.create_wic_bitmap_render_target.unsafe_as(Proc(IWICBitmap, D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget*, HRESULT)).call(target, rendertargetproperties, rendertarget)
  end
  def create_hwnd_render_target(rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, hwndrendertargetproperties : D2D1_HWND_RENDER_TARGET_PROPERTIES*, hwndrendertarget : ID2D1HwndRenderTarget*) : HRESULT
    @lpVtbl.value.create_hwnd_render_target.unsafe_as(Proc(D2D1_RENDER_TARGET_PROPERTIES*, D2D1_HWND_RENDER_TARGET_PROPERTIES*, ID2D1HwndRenderTarget*, HRESULT)).call(rendertargetproperties, hwndrendertargetproperties, hwndrendertarget)
  end
  def create_dxgi_surface_render_target(dxgisurface : IDXGISurface, rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, rendertarget : ID2D1RenderTarget*) : HRESULT
    @lpVtbl.value.create_dxgi_surface_render_target.unsafe_as(Proc(IDXGISurface, D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget*, HRESULT)).call(dxgisurface, rendertargetproperties, rendertarget)
  end
  def create_dc_render_target(rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, dcrendertarget : ID2D1DCRenderTarget*) : HRESULT
    @lpVtbl.value.create_dc_render_target.unsafe_as(Proc(D2D1_RENDER_TARGET_PROPERTIES*, ID2D1DCRenderTarget*, HRESULT)).call(rendertargetproperties, dcrendertarget)
  end
  def create_device(dxgidevice : IDXGIDevice, d2ddevice : ID2D1Device*) : HRESULT
    @lpVtbl.value.create_device.unsafe_as(Proc(IDXGIDevice, ID2D1Device*, HRESULT)).call(dxgidevice, d2ddevice)
  end
  def create_stroke_style2(strokestyleproperties : D2D1_STROKE_STYLE_PROPERTIES1*, dashes : Float32*, dashescount : UInt32, strokestyle : ID2D1StrokeStyle1*) : HRESULT
    @lpVtbl.value.create_stroke_style2.unsafe_as(Proc(D2D1_STROKE_STYLE_PROPERTIES1*, Float32*, UInt32, ID2D1StrokeStyle1*, HRESULT)).call(strokestyleproperties, dashes, dashescount, strokestyle)
  end
  def create_path_geometry2(pathgeometry : ID2D1PathGeometry1*) : HRESULT
    @lpVtbl.value.create_path_geometry2.unsafe_as(Proc(ID2D1PathGeometry1*, HRESULT)).call(pathgeometry)
  end
  def create_drawing_state_block2(drawingstatedescription : D2D1_DRAWING_STATE_DESCRIPTION1*, textrenderingparams : IDWriteRenderingParams, drawingstateblock : ID2D1DrawingStateBlock1*) : HRESULT
    @lpVtbl.value.create_drawing_state_block2.unsafe_as(Proc(D2D1_DRAWING_STATE_DESCRIPTION1*, IDWriteRenderingParams, ID2D1DrawingStateBlock1*, HRESULT)).call(drawingstatedescription, textrenderingparams, drawingstateblock)
  end
  def create_gdi_metafile(metafilestream : IStream, metafile : ID2D1GdiMetafile*) : HRESULT
    @lpVtbl.value.create_gdi_metafile.unsafe_as(Proc(IStream, ID2D1GdiMetafile*, HRESULT)).call(metafilestream, metafile)
  end
  def register_effect_from_stream(classid : Guid*, propertyxml : IStream, bindings : D2D1_PROPERTY_BINDING*, bindingscount : UInt32, effectfactory : PD2D1_EFFECT_FACTORY) : HRESULT
    @lpVtbl.value.register_effect_from_stream.unsafe_as(Proc(Guid*, IStream, D2D1_PROPERTY_BINDING*, UInt32, PD2D1_EFFECT_FACTORY, HRESULT)).call(classid, propertyxml, bindings, bindingscount, effectfactory)
  end
  def register_effect_from_string(classid : Guid*, propertyxml : LibC::LPWSTR, bindings : D2D1_PROPERTY_BINDING*, bindingscount : UInt32, effectfactory : PD2D1_EFFECT_FACTORY) : HRESULT
    @lpVtbl.value.register_effect_from_string.unsafe_as(Proc(Guid*, LibC::LPWSTR, D2D1_PROPERTY_BINDING*, UInt32, PD2D1_EFFECT_FACTORY, HRESULT)).call(classid, propertyxml, bindings, bindingscount, effectfactory)
  end
  def unregister_effect(classid : Guid*) : HRESULT
    @lpVtbl.value.unregister_effect.unsafe_as(Proc(Guid*, HRESULT)).call(classid)
  end
  def get_registered_effects(effects : Guid*, effectscount : UInt32, effectsreturned : UInt32*, effectsregistered : UInt32*) : HRESULT
    @lpVtbl.value.get_registered_effects.unsafe_as(Proc(Guid*, UInt32, UInt32*, UInt32*, HRESULT)).call(effects, effectscount, effectsreturned, effectsregistered)
  end
  def get_effect_properties(effectid : Guid*, properties : ID2D1Properties*) : HRESULT
    @lpVtbl.value.get_effect_properties.unsafe_as(Proc(Guid*, ID2D1Properties*, HRESULT)).call(effectid, properties)
  end
end
struct LibWin32::ID2D1Multithread
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_multithread_protected : LibC::BOOL
    @lpVtbl.value.get_multithread_protected.unsafe_as(Proc(LibC::BOOL)).call
  end
  def enter : Void
    @lpVtbl.value.enter.unsafe_as(Proc(Void)).call
  end
  def leave : Void
    @lpVtbl.value.leave.unsafe_as(Proc(Void)).call
  end
end
struct LibWin32::ID2D1VertexBuffer
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def map(data : UInt8**, buffersize : UInt32) : HRESULT
    @lpVtbl.value.map.unsafe_as(Proc(UInt8**, UInt32, HRESULT)).call(data, buffersize)
  end
  def unmap : HRESULT
    @lpVtbl.value.unmap.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::ID2D1ResourceTexture
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def update(minimumextents : UInt32*, maximimumextents : UInt32*, strides : UInt32*, dimensions : UInt32, data : UInt8*, datacount : UInt32) : HRESULT
    @lpVtbl.value.update.unsafe_as(Proc(UInt32*, UInt32*, UInt32*, UInt32, UInt8*, UInt32, HRESULT)).call(minimumextents, maximimumextents, strides, dimensions, data, datacount)
  end
end
struct LibWin32::ID2D1RenderInfo
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_input_description(inputindex : UInt32, inputdescription : D2D1_INPUT_DESCRIPTION) : HRESULT
    @lpVtbl.value.set_input_description.unsafe_as(Proc(UInt32, D2D1_INPUT_DESCRIPTION, HRESULT)).call(inputindex, inputdescription)
  end
  def set_output_buffer(bufferprecision : D2D1_BUFFER_PRECISION, channeldepth : D2D1_CHANNEL_DEPTH) : HRESULT
    @lpVtbl.value.set_output_buffer.unsafe_as(Proc(D2D1_BUFFER_PRECISION, D2D1_CHANNEL_DEPTH, HRESULT)).call(bufferprecision, channeldepth)
  end
  def set_cached(iscached : LibC::BOOL) : Void
    @lpVtbl.value.set_cached.unsafe_as(Proc(LibC::BOOL, Void)).call(iscached)
  end
  def set_instruction_count_hint(instructioncount : UInt32) : Void
    @lpVtbl.value.set_instruction_count_hint.unsafe_as(Proc(UInt32, Void)).call(instructioncount)
  end
end
struct LibWin32::ID2D1DrawInfo
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_input_description(inputindex : UInt32, inputdescription : D2D1_INPUT_DESCRIPTION) : HRESULT
    @lpVtbl.value.set_input_description.unsafe_as(Proc(UInt32, D2D1_INPUT_DESCRIPTION, HRESULT)).call(inputindex, inputdescription)
  end
  def set_output_buffer(bufferprecision : D2D1_BUFFER_PRECISION, channeldepth : D2D1_CHANNEL_DEPTH) : HRESULT
    @lpVtbl.value.set_output_buffer.unsafe_as(Proc(D2D1_BUFFER_PRECISION, D2D1_CHANNEL_DEPTH, HRESULT)).call(bufferprecision, channeldepth)
  end
  def set_cached(iscached : LibC::BOOL) : Void
    @lpVtbl.value.set_cached.unsafe_as(Proc(LibC::BOOL, Void)).call(iscached)
  end
  def set_instruction_count_hint(instructioncount : UInt32) : Void
    @lpVtbl.value.set_instruction_count_hint.unsafe_as(Proc(UInt32, Void)).call(instructioncount)
  end
  def set_pixel_shader_constant_buffer(buffer : UInt8*, buffercount : UInt32) : HRESULT
    @lpVtbl.value.set_pixel_shader_constant_buffer.unsafe_as(Proc(UInt8*, UInt32, HRESULT)).call(buffer, buffercount)
  end
  def set_resource_texture(textureindex : UInt32, resourcetexture : ID2D1ResourceTexture) : HRESULT
    @lpVtbl.value.set_resource_texture.unsafe_as(Proc(UInt32, ID2D1ResourceTexture, HRESULT)).call(textureindex, resourcetexture)
  end
  def set_vertex_shader_constant_buffer(buffer : UInt8*, buffercount : UInt32) : HRESULT
    @lpVtbl.value.set_vertex_shader_constant_buffer.unsafe_as(Proc(UInt8*, UInt32, HRESULT)).call(buffer, buffercount)
  end
  def set_pixel_shader(shaderid : Guid*, pixeloptions : D2D1_PIXEL_OPTIONS) : HRESULT
    @lpVtbl.value.set_pixel_shader.unsafe_as(Proc(Guid*, D2D1_PIXEL_OPTIONS, HRESULT)).call(shaderid, pixeloptions)
  end
  def set_vertex_processing(vertexbuffer : ID2D1VertexBuffer, vertexoptions : D2D1_VERTEX_OPTIONS, blenddescription : D2D1_BLEND_DESCRIPTION*, vertexrange : D2D1_VERTEX_RANGE*, vertexshader : Guid*) : HRESULT
    @lpVtbl.value.set_vertex_processing.unsafe_as(Proc(ID2D1VertexBuffer, D2D1_VERTEX_OPTIONS, D2D1_BLEND_DESCRIPTION*, D2D1_VERTEX_RANGE*, Guid*, HRESULT)).call(vertexbuffer, vertexoptions, blenddescription, vertexrange, vertexshader)
  end
end
struct LibWin32::ID2D1ComputeInfo
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_input_description(inputindex : UInt32, inputdescription : D2D1_INPUT_DESCRIPTION) : HRESULT
    @lpVtbl.value.set_input_description.unsafe_as(Proc(UInt32, D2D1_INPUT_DESCRIPTION, HRESULT)).call(inputindex, inputdescription)
  end
  def set_output_buffer(bufferprecision : D2D1_BUFFER_PRECISION, channeldepth : D2D1_CHANNEL_DEPTH) : HRESULT
    @lpVtbl.value.set_output_buffer.unsafe_as(Proc(D2D1_BUFFER_PRECISION, D2D1_CHANNEL_DEPTH, HRESULT)).call(bufferprecision, channeldepth)
  end
  def set_cached(iscached : LibC::BOOL) : Void
    @lpVtbl.value.set_cached.unsafe_as(Proc(LibC::BOOL, Void)).call(iscached)
  end
  def set_instruction_count_hint(instructioncount : UInt32) : Void
    @lpVtbl.value.set_instruction_count_hint.unsafe_as(Proc(UInt32, Void)).call(instructioncount)
  end
  def set_compute_shader_constant_buffer(buffer : UInt8*, buffercount : UInt32) : HRESULT
    @lpVtbl.value.set_compute_shader_constant_buffer.unsafe_as(Proc(UInt8*, UInt32, HRESULT)).call(buffer, buffercount)
  end
  def set_compute_shader(shaderid : Guid*) : HRESULT
    @lpVtbl.value.set_compute_shader.unsafe_as(Proc(Guid*, HRESULT)).call(shaderid)
  end
  def set_resource_texture(textureindex : UInt32, resourcetexture : ID2D1ResourceTexture) : HRESULT
    @lpVtbl.value.set_resource_texture.unsafe_as(Proc(UInt32, ID2D1ResourceTexture, HRESULT)).call(textureindex, resourcetexture)
  end
end
struct LibWin32::ID2D1TransformNode
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_input_count : UInt32
    @lpVtbl.value.get_input_count.unsafe_as(Proc(UInt32)).call
  end
end
struct LibWin32::ID2D1TransformGraph
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_input_count : UInt32
    @lpVtbl.value.get_input_count.unsafe_as(Proc(UInt32)).call
  end
  def set_single_transform_node(node : ID2D1TransformNode) : HRESULT
    @lpVtbl.value.set_single_transform_node.unsafe_as(Proc(ID2D1TransformNode, HRESULT)).call(node)
  end
  def add_node(node : ID2D1TransformNode) : HRESULT
    @lpVtbl.value.add_node.unsafe_as(Proc(ID2D1TransformNode, HRESULT)).call(node)
  end
  def remove_node(node : ID2D1TransformNode) : HRESULT
    @lpVtbl.value.remove_node.unsafe_as(Proc(ID2D1TransformNode, HRESULT)).call(node)
  end
  def set_output_node(node : ID2D1TransformNode) : HRESULT
    @lpVtbl.value.set_output_node.unsafe_as(Proc(ID2D1TransformNode, HRESULT)).call(node)
  end
  def connect_node(fromnode : ID2D1TransformNode, tonode : ID2D1TransformNode, tonodeinputindex : UInt32) : HRESULT
    @lpVtbl.value.connect_node.unsafe_as(Proc(ID2D1TransformNode, ID2D1TransformNode, UInt32, HRESULT)).call(fromnode, tonode, tonodeinputindex)
  end
  def connect_to_effect_input(toeffectinputindex : UInt32, node : ID2D1TransformNode, tonodeinputindex : UInt32) : HRESULT
    @lpVtbl.value.connect_to_effect_input.unsafe_as(Proc(UInt32, ID2D1TransformNode, UInt32, HRESULT)).call(toeffectinputindex, node, tonodeinputindex)
  end
  def clear : Void
    @lpVtbl.value.clear.unsafe_as(Proc(Void)).call
  end
  def set_passthrough_graph(effectinputindex : UInt32) : HRESULT
    @lpVtbl.value.set_passthrough_graph.unsafe_as(Proc(UInt32, HRESULT)).call(effectinputindex)
  end
end
struct LibWin32::ID2D1Transform
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_input_count : UInt32
    @lpVtbl.value.get_input_count.unsafe_as(Proc(UInt32)).call
  end
  def map_output_rect_to_input_rects(outputrect : RECT*, inputrects : RECT*, inputrectscount : UInt32) : HRESULT
    @lpVtbl.value.map_output_rect_to_input_rects.unsafe_as(Proc(RECT*, RECT*, UInt32, HRESULT)).call(outputrect, inputrects, inputrectscount)
  end
  def map_input_rects_to_output_rect(inputrects : RECT*, inputopaquesubrects : RECT*, inputrectcount : UInt32, outputrect : RECT*, outputopaquesubrect : RECT*) : HRESULT
    @lpVtbl.value.map_input_rects_to_output_rect.unsafe_as(Proc(RECT*, RECT*, UInt32, RECT*, RECT*, HRESULT)).call(inputrects, inputopaquesubrects, inputrectcount, outputrect, outputopaquesubrect)
  end
  def map_invalid_rect(inputindex : UInt32, invalidinputrect : RECT, invalidoutputrect : RECT*) : HRESULT
    @lpVtbl.value.map_invalid_rect.unsafe_as(Proc(UInt32, RECT, RECT*, HRESULT)).call(inputindex, invalidinputrect, invalidoutputrect)
  end
end
struct LibWin32::ID2D1DrawTransform
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_input_count : UInt32
    @lpVtbl.value.get_input_count.unsafe_as(Proc(UInt32)).call
  end
  def map_output_rect_to_input_rects(outputrect : RECT*, inputrects : RECT*, inputrectscount : UInt32) : HRESULT
    @lpVtbl.value.map_output_rect_to_input_rects.unsafe_as(Proc(RECT*, RECT*, UInt32, HRESULT)).call(outputrect, inputrects, inputrectscount)
  end
  def map_input_rects_to_output_rect(inputrects : RECT*, inputopaquesubrects : RECT*, inputrectcount : UInt32, outputrect : RECT*, outputopaquesubrect : RECT*) : HRESULT
    @lpVtbl.value.map_input_rects_to_output_rect.unsafe_as(Proc(RECT*, RECT*, UInt32, RECT*, RECT*, HRESULT)).call(inputrects, inputopaquesubrects, inputrectcount, outputrect, outputopaquesubrect)
  end
  def map_invalid_rect(inputindex : UInt32, invalidinputrect : RECT, invalidoutputrect : RECT*) : HRESULT
    @lpVtbl.value.map_invalid_rect.unsafe_as(Proc(UInt32, RECT, RECT*, HRESULT)).call(inputindex, invalidinputrect, invalidoutputrect)
  end
  def set_draw_info(drawinfo : ID2D1DrawInfo) : HRESULT
    @lpVtbl.value.set_draw_info.unsafe_as(Proc(ID2D1DrawInfo, HRESULT)).call(drawinfo)
  end
end
struct LibWin32::ID2D1ComputeTransform
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_input_count : UInt32
    @lpVtbl.value.get_input_count.unsafe_as(Proc(UInt32)).call
  end
  def map_output_rect_to_input_rects(outputrect : RECT*, inputrects : RECT*, inputrectscount : UInt32) : HRESULT
    @lpVtbl.value.map_output_rect_to_input_rects.unsafe_as(Proc(RECT*, RECT*, UInt32, HRESULT)).call(outputrect, inputrects, inputrectscount)
  end
  def map_input_rects_to_output_rect(inputrects : RECT*, inputopaquesubrects : RECT*, inputrectcount : UInt32, outputrect : RECT*, outputopaquesubrect : RECT*) : HRESULT
    @lpVtbl.value.map_input_rects_to_output_rect.unsafe_as(Proc(RECT*, RECT*, UInt32, RECT*, RECT*, HRESULT)).call(inputrects, inputopaquesubrects, inputrectcount, outputrect, outputopaquesubrect)
  end
  def map_invalid_rect(inputindex : UInt32, invalidinputrect : RECT, invalidoutputrect : RECT*) : HRESULT
    @lpVtbl.value.map_invalid_rect.unsafe_as(Proc(UInt32, RECT, RECT*, HRESULT)).call(inputindex, invalidinputrect, invalidoutputrect)
  end
  def set_compute_info(computeinfo : ID2D1ComputeInfo) : HRESULT
    @lpVtbl.value.set_compute_info.unsafe_as(Proc(ID2D1ComputeInfo, HRESULT)).call(computeinfo)
  end
  def calculate_threadgroups(outputrect : RECT*, dimensionx : UInt32*, dimensiony : UInt32*, dimensionz : UInt32*) : HRESULT
    @lpVtbl.value.calculate_threadgroups.unsafe_as(Proc(RECT*, UInt32*, UInt32*, UInt32*, HRESULT)).call(outputrect, dimensionx, dimensiony, dimensionz)
  end
end
struct LibWin32::ID2D1AnalysisTransform
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def process_analysis_results(analysisdata : UInt8*, analysisdatacount : UInt32) : HRESULT
    @lpVtbl.value.process_analysis_results.unsafe_as(Proc(UInt8*, UInt32, HRESULT)).call(analysisdata, analysisdatacount)
  end
end
struct LibWin32::ID2D1SourceTransform
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_input_count : UInt32
    @lpVtbl.value.get_input_count.unsafe_as(Proc(UInt32)).call
  end
  def map_output_rect_to_input_rects(outputrect : RECT*, inputrects : RECT*, inputrectscount : UInt32) : HRESULT
    @lpVtbl.value.map_output_rect_to_input_rects.unsafe_as(Proc(RECT*, RECT*, UInt32, HRESULT)).call(outputrect, inputrects, inputrectscount)
  end
  def map_input_rects_to_output_rect(inputrects : RECT*, inputopaquesubrects : RECT*, inputrectcount : UInt32, outputrect : RECT*, outputopaquesubrect : RECT*) : HRESULT
    @lpVtbl.value.map_input_rects_to_output_rect.unsafe_as(Proc(RECT*, RECT*, UInt32, RECT*, RECT*, HRESULT)).call(inputrects, inputopaquesubrects, inputrectcount, outputrect, outputopaquesubrect)
  end
  def map_invalid_rect(inputindex : UInt32, invalidinputrect : RECT, invalidoutputrect : RECT*) : HRESULT
    @lpVtbl.value.map_invalid_rect.unsafe_as(Proc(UInt32, RECT, RECT*, HRESULT)).call(inputindex, invalidinputrect, invalidoutputrect)
  end
  def set_render_info(renderinfo : ID2D1RenderInfo) : HRESULT
    @lpVtbl.value.set_render_info.unsafe_as(Proc(ID2D1RenderInfo, HRESULT)).call(renderinfo)
  end
  def draw(target : ID2D1Bitmap1, drawrect : RECT*, targetorigin : D2D_POINT_2U) : HRESULT
    @lpVtbl.value.draw.unsafe_as(Proc(ID2D1Bitmap1, RECT*, D2D_POINT_2U, HRESULT)).call(target, drawrect, targetorigin)
  end
end
struct LibWin32::ID2D1ConcreteTransform
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_input_count : UInt32
    @lpVtbl.value.get_input_count.unsafe_as(Proc(UInt32)).call
  end
  def set_output_buffer(bufferprecision : D2D1_BUFFER_PRECISION, channeldepth : D2D1_CHANNEL_DEPTH) : HRESULT
    @lpVtbl.value.set_output_buffer.unsafe_as(Proc(D2D1_BUFFER_PRECISION, D2D1_CHANNEL_DEPTH, HRESULT)).call(bufferprecision, channeldepth)
  end
  def set_cached(iscached : LibC::BOOL) : Void
    @lpVtbl.value.set_cached.unsafe_as(Proc(LibC::BOOL, Void)).call(iscached)
  end
end
struct LibWin32::ID2D1BlendTransform
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_input_count : UInt32
    @lpVtbl.value.get_input_count.unsafe_as(Proc(UInt32)).call
  end
  def set_output_buffer(bufferprecision : D2D1_BUFFER_PRECISION, channeldepth : D2D1_CHANNEL_DEPTH) : HRESULT
    @lpVtbl.value.set_output_buffer.unsafe_as(Proc(D2D1_BUFFER_PRECISION, D2D1_CHANNEL_DEPTH, HRESULT)).call(bufferprecision, channeldepth)
  end
  def set_cached(iscached : LibC::BOOL) : Void
    @lpVtbl.value.set_cached.unsafe_as(Proc(LibC::BOOL, Void)).call(iscached)
  end
  def set_description(description : D2D1_BLEND_DESCRIPTION*) : Void
    @lpVtbl.value.set_description.unsafe_as(Proc(D2D1_BLEND_DESCRIPTION*, Void)).call(description)
  end
  def get_description(description : D2D1_BLEND_DESCRIPTION*) : Void
    @lpVtbl.value.get_description.unsafe_as(Proc(D2D1_BLEND_DESCRIPTION*, Void)).call(description)
  end
end
struct LibWin32::ID2D1BorderTransform
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_input_count : UInt32
    @lpVtbl.value.get_input_count.unsafe_as(Proc(UInt32)).call
  end
  def set_output_buffer(bufferprecision : D2D1_BUFFER_PRECISION, channeldepth : D2D1_CHANNEL_DEPTH) : HRESULT
    @lpVtbl.value.set_output_buffer.unsafe_as(Proc(D2D1_BUFFER_PRECISION, D2D1_CHANNEL_DEPTH, HRESULT)).call(bufferprecision, channeldepth)
  end
  def set_cached(iscached : LibC::BOOL) : Void
    @lpVtbl.value.set_cached.unsafe_as(Proc(LibC::BOOL, Void)).call(iscached)
  end
  def set_extend_mode_x(extendmode : D2D1_EXTEND_MODE) : Void
    @lpVtbl.value.set_extend_mode_x.unsafe_as(Proc(D2D1_EXTEND_MODE, Void)).call(extendmode)
  end
  def set_extend_mode_y(extendmode : D2D1_EXTEND_MODE) : Void
    @lpVtbl.value.set_extend_mode_y.unsafe_as(Proc(D2D1_EXTEND_MODE, Void)).call(extendmode)
  end
  def get_extend_mode_x : D2D1_EXTEND_MODE
    @lpVtbl.value.get_extend_mode_x.unsafe_as(Proc(D2D1_EXTEND_MODE)).call
  end
  def get_extend_mode_y : D2D1_EXTEND_MODE
    @lpVtbl.value.get_extend_mode_y.unsafe_as(Proc(D2D1_EXTEND_MODE)).call
  end
end
struct LibWin32::ID2D1OffsetTransform
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_input_count : UInt32
    @lpVtbl.value.get_input_count.unsafe_as(Proc(UInt32)).call
  end
  def set_offset(offset : POINT) : Void
    @lpVtbl.value.set_offset.unsafe_as(Proc(POINT, Void)).call(offset)
  end
  def get_offset : POINT
    @lpVtbl.value.get_offset.unsafe_as(Proc(POINT)).call
  end
end
struct LibWin32::ID2D1BoundsAdjustmentTransform
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_input_count : UInt32
    @lpVtbl.value.get_input_count.unsafe_as(Proc(UInt32)).call
  end
  def set_output_bounds(outputbounds : RECT*) : Void
    @lpVtbl.value.set_output_bounds.unsafe_as(Proc(RECT*, Void)).call(outputbounds)
  end
  def get_output_bounds(outputbounds : RECT*) : Void
    @lpVtbl.value.get_output_bounds.unsafe_as(Proc(RECT*, Void)).call(outputbounds)
  end
end
struct LibWin32::ID2D1EffectImpl
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize(effectcontext : ID2D1EffectContext, transformgraph : ID2D1TransformGraph) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ID2D1EffectContext, ID2D1TransformGraph, HRESULT)).call(effectcontext, transformgraph)
  end
  def prepare_for_render(changetype : D2D1_CHANGE_TYPE) : HRESULT
    @lpVtbl.value.prepare_for_render.unsafe_as(Proc(D2D1_CHANGE_TYPE, HRESULT)).call(changetype)
  end
  def set_graph(transformgraph : ID2D1TransformGraph) : HRESULT
    @lpVtbl.value.set_graph.unsafe_as(Proc(ID2D1TransformGraph, HRESULT)).call(transformgraph)
  end
end
struct LibWin32::ID2D1EffectContext
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_dpi(dpix : Float32*, dpiy : Float32*) : Void
    @lpVtbl.value.get_dpi.unsafe_as(Proc(Float32*, Float32*, Void)).call(dpix, dpiy)
  end
  def create_effect(effectid : Guid*, effect : ID2D1Effect*) : HRESULT
    @lpVtbl.value.create_effect.unsafe_as(Proc(Guid*, ID2D1Effect*, HRESULT)).call(effectid, effect)
  end
  def get_maximum_supported_feature_level(featurelevels : D3D_FEATURE_LEVEL*, featurelevelscount : UInt32, maximumsupportedfeaturelevel : D3D_FEATURE_LEVEL*) : HRESULT
    @lpVtbl.value.get_maximum_supported_feature_level.unsafe_as(Proc(D3D_FEATURE_LEVEL*, UInt32, D3D_FEATURE_LEVEL*, HRESULT)).call(featurelevels, featurelevelscount, maximumsupportedfeaturelevel)
  end
  def create_transform_node_from_effect(effect : ID2D1Effect, transformnode : ID2D1TransformNode*) : HRESULT
    @lpVtbl.value.create_transform_node_from_effect.unsafe_as(Proc(ID2D1Effect, ID2D1TransformNode*, HRESULT)).call(effect, transformnode)
  end
  def create_blend_transform(numinputs : UInt32, blenddescription : D2D1_BLEND_DESCRIPTION*, transform : ID2D1BlendTransform*) : HRESULT
    @lpVtbl.value.create_blend_transform.unsafe_as(Proc(UInt32, D2D1_BLEND_DESCRIPTION*, ID2D1BlendTransform*, HRESULT)).call(numinputs, blenddescription, transform)
  end
  def create_border_transform(extendmodex : D2D1_EXTEND_MODE, extendmodey : D2D1_EXTEND_MODE, transform : ID2D1BorderTransform*) : HRESULT
    @lpVtbl.value.create_border_transform.unsafe_as(Proc(D2D1_EXTEND_MODE, D2D1_EXTEND_MODE, ID2D1BorderTransform*, HRESULT)).call(extendmodex, extendmodey, transform)
  end
  def create_offset_transform(offset : POINT, transform : ID2D1OffsetTransform*) : HRESULT
    @lpVtbl.value.create_offset_transform.unsafe_as(Proc(POINT, ID2D1OffsetTransform*, HRESULT)).call(offset, transform)
  end
  def create_bounds_adjustment_transform(outputrectangle : RECT*, transform : ID2D1BoundsAdjustmentTransform*) : HRESULT
    @lpVtbl.value.create_bounds_adjustment_transform.unsafe_as(Proc(RECT*, ID2D1BoundsAdjustmentTransform*, HRESULT)).call(outputrectangle, transform)
  end
  def load_pixel_shader(shaderid : Guid*, shaderbuffer : UInt8*, shaderbuffercount : UInt32) : HRESULT
    @lpVtbl.value.load_pixel_shader.unsafe_as(Proc(Guid*, UInt8*, UInt32, HRESULT)).call(shaderid, shaderbuffer, shaderbuffercount)
  end
  def load_vertex_shader(resourceid : Guid*, shaderbuffer : UInt8*, shaderbuffercount : UInt32) : HRESULT
    @lpVtbl.value.load_vertex_shader.unsafe_as(Proc(Guid*, UInt8*, UInt32, HRESULT)).call(resourceid, shaderbuffer, shaderbuffercount)
  end
  def load_compute_shader(resourceid : Guid*, shaderbuffer : UInt8*, shaderbuffercount : UInt32) : HRESULT
    @lpVtbl.value.load_compute_shader.unsafe_as(Proc(Guid*, UInt8*, UInt32, HRESULT)).call(resourceid, shaderbuffer, shaderbuffercount)
  end
  def is_shader_loaded(shaderid : Guid*) : LibC::BOOL
    @lpVtbl.value.is_shader_loaded.unsafe_as(Proc(Guid*, LibC::BOOL)).call(shaderid)
  end
  def create_resource_texture(resourceid : Guid*, resourcetextureproperties : D2D1_RESOURCE_TEXTURE_PROPERTIES*, data : UInt8*, strides : UInt32*, datasize : UInt32, resourcetexture : ID2D1ResourceTexture*) : HRESULT
    @lpVtbl.value.create_resource_texture.unsafe_as(Proc(Guid*, D2D1_RESOURCE_TEXTURE_PROPERTIES*, UInt8*, UInt32*, UInt32, ID2D1ResourceTexture*, HRESULT)).call(resourceid, resourcetextureproperties, data, strides, datasize, resourcetexture)
  end
  def find_resource_texture(resourceid : Guid*, resourcetexture : ID2D1ResourceTexture*) : HRESULT
    @lpVtbl.value.find_resource_texture.unsafe_as(Proc(Guid*, ID2D1ResourceTexture*, HRESULT)).call(resourceid, resourcetexture)
  end
  def create_vertex_buffer(vertexbufferproperties : D2D1_VERTEX_BUFFER_PROPERTIES*, resourceid : Guid*, customvertexbufferproperties : D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES*, buffer : ID2D1VertexBuffer*) : HRESULT
    @lpVtbl.value.create_vertex_buffer.unsafe_as(Proc(D2D1_VERTEX_BUFFER_PROPERTIES*, Guid*, D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES*, ID2D1VertexBuffer*, HRESULT)).call(vertexbufferproperties, resourceid, customvertexbufferproperties, buffer)
  end
  def find_vertex_buffer(resourceid : Guid*, buffer : ID2D1VertexBuffer*) : HRESULT
    @lpVtbl.value.find_vertex_buffer.unsafe_as(Proc(Guid*, ID2D1VertexBuffer*, HRESULT)).call(resourceid, buffer)
  end
  def create_color_context(space : D2D1_COLOR_SPACE, profile : UInt8*, profilesize : UInt32, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context.unsafe_as(Proc(D2D1_COLOR_SPACE, UInt8*, UInt32, ID2D1ColorContext*, HRESULT)).call(space, profile, profilesize, colorcontext)
  end
  def create_color_context_from_filename(filename : LibC::LPWSTR, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context_from_filename.unsafe_as(Proc(LibC::LPWSTR, ID2D1ColorContext*, HRESULT)).call(filename, colorcontext)
  end
  def create_color_context_from_wic_color_context(wiccolorcontext : IWICColorContext, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context_from_wic_color_context.unsafe_as(Proc(IWICColorContext, ID2D1ColorContext*, HRESULT)).call(wiccolorcontext, colorcontext)
  end
  def check_feature_support(feature : D2D1_FEATURE, featuresupportdata : Void*, featuresupportdatasize : UInt32) : HRESULT
    @lpVtbl.value.check_feature_support.unsafe_as(Proc(D2D1_FEATURE, Void*, UInt32, HRESULT)).call(feature, featuresupportdata, featuresupportdatasize)
  end
  def is_buffer_precision_supported(bufferprecision : D2D1_BUFFER_PRECISION) : LibC::BOOL
    @lpVtbl.value.is_buffer_precision_supported.unsafe_as(Proc(D2D1_BUFFER_PRECISION, LibC::BOOL)).call(bufferprecision)
  end
end
struct LibWin32::ID2D1GeometryRealization
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
end
struct LibWin32::ID2D1DeviceContext1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def create_bitmap(size : D2D_SIZE_U, srcdata : Void*, pitch : UInt32, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_bitmap.unsafe_as(Proc(D2D_SIZE_U, Void*, UInt32, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(size, srcdata, pitch, bitmapproperties, bitmap)
  end
  def create_bitmap_from_wic_bitmap(wicbitmapsource : IWICBitmapSource, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_bitmap_from_wic_bitmap.unsafe_as(Proc(IWICBitmapSource, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(wicbitmapsource, bitmapproperties, bitmap)
  end
  def create_shared_bitmap(riid : Guid*, data : Void*, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_shared_bitmap.unsafe_as(Proc(Guid*, Void*, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(riid, data, bitmapproperties, bitmap)
  end
  def create_bitmap_brush(bitmap : ID2D1Bitmap, bitmapbrushproperties : D2D1_BITMAP_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, bitmapbrush : ID2D1BitmapBrush*) : HRESULT
    @lpVtbl.value.create_bitmap_brush.unsafe_as(Proc(ID2D1Bitmap, D2D1_BITMAP_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush*, HRESULT)).call(bitmap, bitmapbrushproperties, brushproperties, bitmapbrush)
  end
  def create_solid_color_brush(color : D2D1_COLOR_F*, brushproperties : D2D1_BRUSH_PROPERTIES*, solidcolorbrush : ID2D1SolidColorBrush*) : HRESULT
    @lpVtbl.value.create_solid_color_brush.unsafe_as(Proc(D2D1_COLOR_F*, D2D1_BRUSH_PROPERTIES*, ID2D1SolidColorBrush*, HRESULT)).call(color, brushproperties, solidcolorbrush)
  end
  def create_gradient_stop_collection(gradientstops : D2D1_GRADIENT_STOP*, gradientstopscount : UInt32, colorinterpolationgamma : D2D1_GAMMA, extendmode : D2D1_EXTEND_MODE, gradientstopcollection : ID2D1GradientStopCollection*) : HRESULT
    @lpVtbl.value.create_gradient_stop_collection.unsafe_as(Proc(D2D1_GRADIENT_STOP*, UInt32, D2D1_GAMMA, D2D1_EXTEND_MODE, ID2D1GradientStopCollection*, HRESULT)).call(gradientstops, gradientstopscount, colorinterpolationgamma, extendmode, gradientstopcollection)
  end
  def create_linear_gradient_brush(lineargradientbrushproperties : D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, gradientstopcollection : ID2D1GradientStopCollection, lineargradientbrush : ID2D1LinearGradientBrush*) : HRESULT
    @lpVtbl.value.create_linear_gradient_brush.unsafe_as(Proc(D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection, ID2D1LinearGradientBrush*, HRESULT)).call(lineargradientbrushproperties, brushproperties, gradientstopcollection, lineargradientbrush)
  end
  def create_radial_gradient_brush(radialgradientbrushproperties : D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, gradientstopcollection : ID2D1GradientStopCollection, radialgradientbrush : ID2D1RadialGradientBrush*) : HRESULT
    @lpVtbl.value.create_radial_gradient_brush.unsafe_as(Proc(D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection, ID2D1RadialGradientBrush*, HRESULT)).call(radialgradientbrushproperties, brushproperties, gradientstopcollection, radialgradientbrush)
  end
  def create_compatible_render_target(desiredsize : D2D_SIZE_F*, desiredpixelsize : D2D_SIZE_U*, desiredformat : D2D1_PIXEL_FORMAT*, options : D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, bitmaprendertarget : ID2D1BitmapRenderTarget*) : HRESULT
    @lpVtbl.value.create_compatible_render_target.unsafe_as(Proc(D2D_SIZE_F*, D2D_SIZE_U*, D2D1_PIXEL_FORMAT*, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, ID2D1BitmapRenderTarget*, HRESULT)).call(desiredsize, desiredpixelsize, desiredformat, options, bitmaprendertarget)
  end
  def create_layer(size : D2D_SIZE_F*, layer : ID2D1Layer*) : HRESULT
    @lpVtbl.value.create_layer.unsafe_as(Proc(D2D_SIZE_F*, ID2D1Layer*, HRESULT)).call(size, layer)
  end
  def create_mesh(mesh : ID2D1Mesh*) : HRESULT
    @lpVtbl.value.create_mesh.unsafe_as(Proc(ID2D1Mesh*, HRESULT)).call(mesh)
  end
  def draw_line(point0 : D2D_POINT_2F, point1 : D2D_POINT_2F, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_line.unsafe_as(Proc(D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(point0, point1, brush, strokewidth, strokestyle)
  end
  def draw_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(rect, brush, strokewidth, strokestyle)
  end
  def fill_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Void)).call(rect, brush)
  end
  def draw_rounded_rectangle(roundedrect : D2D1_ROUNDED_RECT*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_rounded_rectangle.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(roundedrect, brush, strokewidth, strokestyle)
  end
  def fill_rounded_rectangle(roundedrect : D2D1_ROUNDED_RECT*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_rounded_rectangle.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1Brush, Void)).call(roundedrect, brush)
  end
  def draw_ellipse(ellipse : D2D1_ELLIPSE*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_ellipse.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(ellipse, brush, strokewidth, strokestyle)
  end
  def fill_ellipse(ellipse : D2D1_ELLIPSE*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_ellipse.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1Brush, Void)).call(ellipse, brush)
  end
  def draw_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(geometry, brush, strokewidth, strokestyle)
  end
  def fill_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, opacitybrush : ID2D1Brush) : Void
    @lpVtbl.value.fill_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, ID2D1Brush, Void)).call(geometry, brush, opacitybrush)
  end
  def fill_mesh(mesh : ID2D1Mesh, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_mesh.unsafe_as(Proc(ID2D1Mesh, ID2D1Brush, Void)).call(mesh, brush)
  end
  def fill_opacity_mask(opacitymask : ID2D1Bitmap, brush : ID2D1Brush, content : D2D1_OPACITY_MASK_CONTENT, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.fill_opacity_mask.unsafe_as(Proc(ID2D1Bitmap, ID2D1Brush, D2D1_OPACITY_MASK_CONTENT, D2D_RECT_F*, D2D_RECT_F*, Void)).call(opacitymask, brush, content, destinationrectangle, sourcerectangle)
  end
  def draw_bitmap(bitmap : ID2D1Bitmap, destinationrectangle : D2D_RECT_F*, opacity : Float32, interpolationmode : D2D1_BITMAP_INTERPOLATION_MODE, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.draw_bitmap.unsafe_as(Proc(ID2D1Bitmap, D2D_RECT_F*, Float32, D2D1_BITMAP_INTERPOLATION_MODE, D2D_RECT_F*, Void)).call(bitmap, destinationrectangle, opacity, interpolationmode, sourcerectangle)
  end
  def draw_text(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, layoutrect : D2D_RECT_F*, defaultfillbrush : ID2D1Brush, options : D2D1_DRAW_TEXT_OPTIONS, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_text.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, D2D_RECT_F*, ID2D1Brush, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE, Void)).call(string, stringlength, textformat, layoutrect, defaultfillbrush, options, measuringmode)
  end
  def draw_text_layout(origin : D2D_POINT_2F, textlayout : IDWriteTextLayout, defaultfillbrush : ID2D1Brush, options : D2D1_DRAW_TEXT_OPTIONS) : Void
    @lpVtbl.value.draw_text_layout.unsafe_as(Proc(D2D_POINT_2F, IDWriteTextLayout, ID2D1Brush, D2D1_DRAW_TEXT_OPTIONS, Void)).call(origin, textlayout, defaultfillbrush, options)
  end
  def draw_glyph_run(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, foregroundbrush : ID2D1Brush, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_glyph_run.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, ID2D1Brush, DWRITE_MEASURING_MODE, Void)).call(baselineorigin, glyphrun, foregroundbrush, measuringmode)
  end
  def set_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.set_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def get_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.get_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def set_antialias_mode(antialiasmode : D2D1_ANTIALIAS_MODE) : Void
    @lpVtbl.value.set_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE, Void)).call(antialiasmode)
  end
  def get_antialias_mode : D2D1_ANTIALIAS_MODE
    @lpVtbl.value.get_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE)).call
  end
  def set_text_antialias_mode(textantialiasmode : D2D1_TEXT_ANTIALIAS_MODE) : Void
    @lpVtbl.value.set_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE, Void)).call(textantialiasmode)
  end
  def get_text_antialias_mode : D2D1_TEXT_ANTIALIAS_MODE
    @lpVtbl.value.get_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE)).call
  end
  def set_text_rendering_params(textrenderingparams : IDWriteRenderingParams) : Void
    @lpVtbl.value.set_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams, Void)).call(textrenderingparams)
  end
  def get_text_rendering_params(textrenderingparams : IDWriteRenderingParams*) : Void
    @lpVtbl.value.get_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams*, Void)).call(textrenderingparams)
  end
  def set_tags(tag1 : UInt64, tag2 : UInt64) : Void
    @lpVtbl.value.set_tags.unsafe_as(Proc(UInt64, UInt64, Void)).call(tag1, tag2)
  end
  def get_tags(tag1 : UInt64*, tag2 : UInt64*) : Void
    @lpVtbl.value.get_tags.unsafe_as(Proc(UInt64*, UInt64*, Void)).call(tag1, tag2)
  end
  def push_layer(layerparameters : D2D1_LAYER_PARAMETERS*, layer : ID2D1Layer) : Void
    @lpVtbl.value.push_layer.unsafe_as(Proc(D2D1_LAYER_PARAMETERS*, ID2D1Layer, Void)).call(layerparameters, layer)
  end
  def pop_layer : Void
    @lpVtbl.value.pop_layer.unsafe_as(Proc(Void)).call
  end
  def flush(tag1 : UInt64*, tag2 : UInt64*) : HRESULT
    @lpVtbl.value.flush.unsafe_as(Proc(UInt64*, UInt64*, HRESULT)).call(tag1, tag2)
  end
  def save_drawing_state(drawingstateblock : ID2D1DrawingStateBlock) : Void
    @lpVtbl.value.save_drawing_state.unsafe_as(Proc(ID2D1DrawingStateBlock, Void)).call(drawingstateblock)
  end
  def restore_drawing_state(drawingstateblock : ID2D1DrawingStateBlock) : Void
    @lpVtbl.value.restore_drawing_state.unsafe_as(Proc(ID2D1DrawingStateBlock, Void)).call(drawingstateblock)
  end
  def push_axis_aligned_clip(cliprect : D2D_RECT_F*, antialiasmode : D2D1_ANTIALIAS_MODE) : Void
    @lpVtbl.value.push_axis_aligned_clip.unsafe_as(Proc(D2D_RECT_F*, D2D1_ANTIALIAS_MODE, Void)).call(cliprect, antialiasmode)
  end
  def pop_axis_aligned_clip : Void
    @lpVtbl.value.pop_axis_aligned_clip.unsafe_as(Proc(Void)).call
  end
  def clear(clearcolor : D2D1_COLOR_F*) : Void
    @lpVtbl.value.clear.unsafe_as(Proc(D2D1_COLOR_F*, Void)).call(clearcolor)
  end
  def begin_draw : Void
    @lpVtbl.value.begin_draw.unsafe_as(Proc(Void)).call
  end
  def end_draw(tag1 : UInt64*, tag2 : UInt64*) : HRESULT
    @lpVtbl.value.end_draw.unsafe_as(Proc(UInt64*, UInt64*, HRESULT)).call(tag1, tag2)
  end
  def get_pixel_format : D2D1_PIXEL_FORMAT
    @lpVtbl.value.get_pixel_format.unsafe_as(Proc(D2D1_PIXEL_FORMAT)).call
  end
  def set_dpi(dpix : Float32, dpiy : Float32) : Void
    @lpVtbl.value.set_dpi.unsafe_as(Proc(Float32, Float32, Void)).call(dpix, dpiy)
  end
  def get_dpi(dpix : Float32*, dpiy : Float32*) : Void
    @lpVtbl.value.get_dpi.unsafe_as(Proc(Float32*, Float32*, Void)).call(dpix, dpiy)
  end
  def get_size : D2D_SIZE_F
    @lpVtbl.value.get_size.unsafe_as(Proc(D2D_SIZE_F)).call
  end
  def get_pixel_size : D2D_SIZE_U
    @lpVtbl.value.get_pixel_size.unsafe_as(Proc(D2D_SIZE_U)).call
  end
  def get_maximum_bitmap_size : UInt32
    @lpVtbl.value.get_maximum_bitmap_size.unsafe_as(Proc(UInt32)).call
  end
  def is_supported(rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*) : LibC::BOOL
    @lpVtbl.value.is_supported.unsafe_as(Proc(D2D1_RENDER_TARGET_PROPERTIES*, LibC::BOOL)).call(rendertargetproperties)
  end
  def create_bitmap2(size : D2D_SIZE_U, sourcedata : Void*, pitch : UInt32, bitmapproperties : D2D1_BITMAP_PROPERTIES1*, bitmap : ID2D1Bitmap1*) : HRESULT
    @lpVtbl.value.create_bitmap2.unsafe_as(Proc(D2D_SIZE_U, Void*, UInt32, D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1*, HRESULT)).call(size, sourcedata, pitch, bitmapproperties, bitmap)
  end
  def create_bitmap_from_wic_bitmap2(wicbitmapsource : IWICBitmapSource, bitmapproperties : D2D1_BITMAP_PROPERTIES1*, bitmap : ID2D1Bitmap1*) : HRESULT
    @lpVtbl.value.create_bitmap_from_wic_bitmap2.unsafe_as(Proc(IWICBitmapSource, D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1*, HRESULT)).call(wicbitmapsource, bitmapproperties, bitmap)
  end
  def create_color_context(space : D2D1_COLOR_SPACE, profile : UInt8*, profilesize : UInt32, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context.unsafe_as(Proc(D2D1_COLOR_SPACE, UInt8*, UInt32, ID2D1ColorContext*, HRESULT)).call(space, profile, profilesize, colorcontext)
  end
  def create_color_context_from_filename(filename : LibC::LPWSTR, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context_from_filename.unsafe_as(Proc(LibC::LPWSTR, ID2D1ColorContext*, HRESULT)).call(filename, colorcontext)
  end
  def create_color_context_from_wic_color_context(wiccolorcontext : IWICColorContext, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context_from_wic_color_context.unsafe_as(Proc(IWICColorContext, ID2D1ColorContext*, HRESULT)).call(wiccolorcontext, colorcontext)
  end
  def create_bitmap_from_dxgi_surface(surface : IDXGISurface, bitmapproperties : D2D1_BITMAP_PROPERTIES1*, bitmap : ID2D1Bitmap1*) : HRESULT
    @lpVtbl.value.create_bitmap_from_dxgi_surface.unsafe_as(Proc(IDXGISurface, D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1*, HRESULT)).call(surface, bitmapproperties, bitmap)
  end
  def create_effect(effectid : Guid*, effect : ID2D1Effect*) : HRESULT
    @lpVtbl.value.create_effect.unsafe_as(Proc(Guid*, ID2D1Effect*, HRESULT)).call(effectid, effect)
  end
  def create_gradient_stop_collection2(straightalphagradientstops : D2D1_GRADIENT_STOP*, straightalphagradientstopscount : UInt32, preinterpolationspace : D2D1_COLOR_SPACE, postinterpolationspace : D2D1_COLOR_SPACE, bufferprecision : D2D1_BUFFER_PRECISION, extendmode : D2D1_EXTEND_MODE, colorinterpolationmode : D2D1_COLOR_INTERPOLATION_MODE, gradientstopcollection1 : ID2D1GradientStopCollection1*) : HRESULT
    @lpVtbl.value.create_gradient_stop_collection2.unsafe_as(Proc(D2D1_GRADIENT_STOP*, UInt32, D2D1_COLOR_SPACE, D2D1_COLOR_SPACE, D2D1_BUFFER_PRECISION, D2D1_EXTEND_MODE, D2D1_COLOR_INTERPOLATION_MODE, ID2D1GradientStopCollection1*, HRESULT)).call(straightalphagradientstops, straightalphagradientstopscount, preinterpolationspace, postinterpolationspace, bufferprecision, extendmode, colorinterpolationmode, gradientstopcollection1)
  end
  def create_image_brush(image : ID2D1Image, imagebrushproperties : D2D1_IMAGE_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, imagebrush : ID2D1ImageBrush*) : HRESULT
    @lpVtbl.value.create_image_brush.unsafe_as(Proc(ID2D1Image, D2D1_IMAGE_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1ImageBrush*, HRESULT)).call(image, imagebrushproperties, brushproperties, imagebrush)
  end
  def create_bitmap_brush2(bitmap : ID2D1Bitmap, bitmapbrushproperties : D2D1_BITMAP_BRUSH_PROPERTIES1*, brushproperties : D2D1_BRUSH_PROPERTIES*, bitmapbrush : ID2D1BitmapBrush1*) : HRESULT
    @lpVtbl.value.create_bitmap_brush2.unsafe_as(Proc(ID2D1Bitmap, D2D1_BITMAP_BRUSH_PROPERTIES1*, D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush1*, HRESULT)).call(bitmap, bitmapbrushproperties, brushproperties, bitmapbrush)
  end
  def create_command_list(commandlist : ID2D1CommandList*) : HRESULT
    @lpVtbl.value.create_command_list.unsafe_as(Proc(ID2D1CommandList*, HRESULT)).call(commandlist)
  end
  def is_dxgi_format_supported(format : DXGI_FORMAT) : LibC::BOOL
    @lpVtbl.value.is_dxgi_format_supported.unsafe_as(Proc(DXGI_FORMAT, LibC::BOOL)).call(format)
  end
  def is_buffer_precision_supported(bufferprecision : D2D1_BUFFER_PRECISION) : LibC::BOOL
    @lpVtbl.value.is_buffer_precision_supported.unsafe_as(Proc(D2D1_BUFFER_PRECISION, LibC::BOOL)).call(bufferprecision)
  end
  def get_image_local_bounds(image : ID2D1Image, localbounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_image_local_bounds.unsafe_as(Proc(ID2D1Image, D2D_RECT_F*, HRESULT)).call(image, localbounds)
  end
  def get_image_world_bounds(image : ID2D1Image, worldbounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_image_world_bounds.unsafe_as(Proc(ID2D1Image, D2D_RECT_F*, HRESULT)).call(image, worldbounds)
  end
  def get_glyph_run_world_bounds(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, measuringmode : DWRITE_MEASURING_MODE, bounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_glyph_run_world_bounds.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D_RECT_F*, HRESULT)).call(baselineorigin, glyphrun, measuringmode, bounds)
  end
  def get_device(device : ID2D1Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID2D1Device*, Void)).call(device)
  end
  def set_target(image : ID2D1Image) : Void
    @lpVtbl.value.set_target.unsafe_as(Proc(ID2D1Image, Void)).call(image)
  end
  def get_target(image : ID2D1Image*) : Void
    @lpVtbl.value.get_target.unsafe_as(Proc(ID2D1Image*, Void)).call(image)
  end
  def set_rendering_controls(renderingcontrols : D2D1_RENDERING_CONTROLS*) : Void
    @lpVtbl.value.set_rendering_controls.unsafe_as(Proc(D2D1_RENDERING_CONTROLS*, Void)).call(renderingcontrols)
  end
  def get_rendering_controls(renderingcontrols : D2D1_RENDERING_CONTROLS*) : Void
    @lpVtbl.value.get_rendering_controls.unsafe_as(Proc(D2D1_RENDERING_CONTROLS*, Void)).call(renderingcontrols)
  end
  def set_primitive_blend(primitiveblend : D2D1_PRIMITIVE_BLEND) : Void
    @lpVtbl.value.set_primitive_blend.unsafe_as(Proc(D2D1_PRIMITIVE_BLEND, Void)).call(primitiveblend)
  end
  def get_primitive_blend : D2D1_PRIMITIVE_BLEND
    @lpVtbl.value.get_primitive_blend.unsafe_as(Proc(D2D1_PRIMITIVE_BLEND)).call
  end
  def set_unit_mode(unitmode : D2D1_UNIT_MODE) : Void
    @lpVtbl.value.set_unit_mode.unsafe_as(Proc(D2D1_UNIT_MODE, Void)).call(unitmode)
  end
  def get_unit_mode : D2D1_UNIT_MODE
    @lpVtbl.value.get_unit_mode.unsafe_as(Proc(D2D1_UNIT_MODE)).call
  end
  def draw_glyph_run2(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, glyphrundescription : DWRITE_GLYPH_RUN_DESCRIPTION*, foregroundbrush : ID2D1Brush, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_glyph_run2.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush, DWRITE_MEASURING_MODE, Void)).call(baselineorigin, glyphrun, glyphrundescription, foregroundbrush, measuringmode)
  end
  def draw_image(image : ID2D1Image, targetoffset : D2D_POINT_2F*, imagerectangle : D2D_RECT_F*, interpolationmode : D2D1_INTERPOLATION_MODE, compositemode : D2D1_COMPOSITE_MODE) : Void
    @lpVtbl.value.draw_image.unsafe_as(Proc(ID2D1Image, D2D_POINT_2F*, D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE, Void)).call(image, targetoffset, imagerectangle, interpolationmode, compositemode)
  end
  def draw_gdi_metafile(gdimetafile : ID2D1GdiMetafile, targetoffset : D2D_POINT_2F*) : Void
    @lpVtbl.value.draw_gdi_metafile.unsafe_as(Proc(ID2D1GdiMetafile, D2D_POINT_2F*, Void)).call(gdimetafile, targetoffset)
  end
  def draw_bitmap2(bitmap : ID2D1Bitmap, destinationrectangle : D2D_RECT_F*, opacity : Float32, interpolationmode : D2D1_INTERPOLATION_MODE, sourcerectangle : D2D_RECT_F*, perspectivetransform : D2D_MATRIX_4X4_F*) : Void
    @lpVtbl.value.draw_bitmap2.unsafe_as(Proc(ID2D1Bitmap, D2D_RECT_F*, Float32, D2D1_INTERPOLATION_MODE, D2D_RECT_F*, D2D_MATRIX_4X4_F*, Void)).call(bitmap, destinationrectangle, opacity, interpolationmode, sourcerectangle, perspectivetransform)
  end
  def push_layer2(layerparameters : D2D1_LAYER_PARAMETERS1*, layer : ID2D1Layer) : Void
    @lpVtbl.value.push_layer2.unsafe_as(Proc(D2D1_LAYER_PARAMETERS1*, ID2D1Layer, Void)).call(layerparameters, layer)
  end
  def invalidate_effect_input_rectangle(effect : ID2D1Effect, input : UInt32, inputrectangle : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.invalidate_effect_input_rectangle.unsafe_as(Proc(ID2D1Effect, UInt32, D2D_RECT_F*, HRESULT)).call(effect, input, inputrectangle)
  end
  def get_effect_invalid_rectangle_count(effect : ID2D1Effect, rectanglecount : UInt32*) : HRESULT
    @lpVtbl.value.get_effect_invalid_rectangle_count.unsafe_as(Proc(ID2D1Effect, UInt32*, HRESULT)).call(effect, rectanglecount)
  end
  def get_effect_invalid_rectangles(effect : ID2D1Effect, rectangles : D2D_RECT_F*, rectanglescount : UInt32) : HRESULT
    @lpVtbl.value.get_effect_invalid_rectangles.unsafe_as(Proc(ID2D1Effect, D2D_RECT_F*, UInt32, HRESULT)).call(effect, rectangles, rectanglescount)
  end
  def get_effect_required_input_rectangles(rendereffect : ID2D1Effect, renderimagerectangle : D2D_RECT_F*, inputdescriptions : D2D1_EFFECT_INPUT_DESCRIPTION*, requiredinputrects : D2D_RECT_F*, inputcount : UInt32) : HRESULT
    @lpVtbl.value.get_effect_required_input_rectangles.unsafe_as(Proc(ID2D1Effect, D2D_RECT_F*, D2D1_EFFECT_INPUT_DESCRIPTION*, D2D_RECT_F*, UInt32, HRESULT)).call(rendereffect, renderimagerectangle, inputdescriptions, requiredinputrects, inputcount)
  end
  def fill_opacity_mask2(opacitymask : ID2D1Bitmap, brush : ID2D1Brush, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.fill_opacity_mask2.unsafe_as(Proc(ID2D1Bitmap, ID2D1Brush, D2D_RECT_F*, D2D_RECT_F*, Void)).call(opacitymask, brush, destinationrectangle, sourcerectangle)
  end
  def create_filled_geometry_realization(geometry : ID2D1Geometry, flatteningtolerance : Float32, geometryrealization : ID2D1GeometryRealization*) : HRESULT
    @lpVtbl.value.create_filled_geometry_realization.unsafe_as(Proc(ID2D1Geometry, Float32, ID2D1GeometryRealization*, HRESULT)).call(geometry, flatteningtolerance, geometryrealization)
  end
  def create_stroked_geometry_realization(geometry : ID2D1Geometry, flatteningtolerance : Float32, strokewidth : Float32, strokestyle : ID2D1StrokeStyle, geometryrealization : ID2D1GeometryRealization*) : HRESULT
    @lpVtbl.value.create_stroked_geometry_realization.unsafe_as(Proc(ID2D1Geometry, Float32, Float32, ID2D1StrokeStyle, ID2D1GeometryRealization*, HRESULT)).call(geometry, flatteningtolerance, strokewidth, strokestyle, geometryrealization)
  end
  def draw_geometry_realization(geometryrealization : ID2D1GeometryRealization, brush : ID2D1Brush) : Void
    @lpVtbl.value.draw_geometry_realization.unsafe_as(Proc(ID2D1GeometryRealization, ID2D1Brush, Void)).call(geometryrealization, brush)
  end
end
struct LibWin32::ID2D1Device1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def create_device_context(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext : ID2D1DeviceContext*) : HRESULT
    @lpVtbl.value.create_device_context.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext*, HRESULT)).call(options, devicecontext)
  end
  def create_print_control(wicfactory : IWICImagingFactory, documenttarget : IPrintDocumentPackageTarget, printcontrolproperties : D2D1_PRINT_CONTROL_PROPERTIES*, printcontrol : ID2D1PrintControl*) : HRESULT
    @lpVtbl.value.create_print_control.unsafe_as(Proc(IWICImagingFactory, IPrintDocumentPackageTarget, D2D1_PRINT_CONTROL_PROPERTIES*, ID2D1PrintControl*, HRESULT)).call(wicfactory, documenttarget, printcontrolproperties, printcontrol)
  end
  def set_maximum_texture_memory(maximuminbytes : UInt64) : Void
    @lpVtbl.value.set_maximum_texture_memory.unsafe_as(Proc(UInt64, Void)).call(maximuminbytes)
  end
  def get_maximum_texture_memory : UInt64
    @lpVtbl.value.get_maximum_texture_memory.unsafe_as(Proc(UInt64)).call
  end
  def clear_resources(millisecondssinceuse : UInt32) : Void
    @lpVtbl.value.clear_resources.unsafe_as(Proc(UInt32, Void)).call(millisecondssinceuse)
  end
  def get_rendering_priority : D2D1_RENDERING_PRIORITY
    @lpVtbl.value.get_rendering_priority.unsafe_as(Proc(D2D1_RENDERING_PRIORITY)).call
  end
  def set_rendering_priority(renderingpriority : D2D1_RENDERING_PRIORITY) : Void
    @lpVtbl.value.set_rendering_priority.unsafe_as(Proc(D2D1_RENDERING_PRIORITY, Void)).call(renderingpriority)
  end
  def create_device_context2(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext1 : ID2D1DeviceContext1*) : HRESULT
    @lpVtbl.value.create_device_context2.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext1*, HRESULT)).call(options, devicecontext1)
  end
end
struct LibWin32::ID2D1Factory2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def reload_system_metrics : HRESULT
    @lpVtbl.value.reload_system_metrics.unsafe_as(Proc(HRESULT)).call
  end
  def get_desktop_dpi(dpix : Float32*, dpiy : Float32*) : Void
    @lpVtbl.value.get_desktop_dpi.unsafe_as(Proc(Float32*, Float32*, Void)).call(dpix, dpiy)
  end
  def create_rectangle_geometry(rectangle : D2D_RECT_F*, rectanglegeometry : ID2D1RectangleGeometry*) : HRESULT
    @lpVtbl.value.create_rectangle_geometry.unsafe_as(Proc(D2D_RECT_F*, ID2D1RectangleGeometry*, HRESULT)).call(rectangle, rectanglegeometry)
  end
  def create_rounded_rectangle_geometry(roundedrectangle : D2D1_ROUNDED_RECT*, roundedrectanglegeometry : ID2D1RoundedRectangleGeometry*) : HRESULT
    @lpVtbl.value.create_rounded_rectangle_geometry.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1RoundedRectangleGeometry*, HRESULT)).call(roundedrectangle, roundedrectanglegeometry)
  end
  def create_ellipse_geometry(ellipse : D2D1_ELLIPSE*, ellipsegeometry : ID2D1EllipseGeometry*) : HRESULT
    @lpVtbl.value.create_ellipse_geometry.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1EllipseGeometry*, HRESULT)).call(ellipse, ellipsegeometry)
  end
  def create_geometry_group(fillmode : D2D1_FILL_MODE, geometries : ID2D1Geometry*, geometriescount : UInt32, geometrygroup : ID2D1GeometryGroup*) : HRESULT
    @lpVtbl.value.create_geometry_group.unsafe_as(Proc(D2D1_FILL_MODE, ID2D1Geometry*, UInt32, ID2D1GeometryGroup*, HRESULT)).call(fillmode, geometries, geometriescount, geometrygroup)
  end
  def create_transformed_geometry(sourcegeometry : ID2D1Geometry, transform : D2D_MATRIX_3X2_F*, transformedgeometry : ID2D1TransformedGeometry*) : HRESULT
    @lpVtbl.value.create_transformed_geometry.unsafe_as(Proc(ID2D1Geometry, D2D_MATRIX_3X2_F*, ID2D1TransformedGeometry*, HRESULT)).call(sourcegeometry, transform, transformedgeometry)
  end
  def create_path_geometry(pathgeometry : ID2D1PathGeometry*) : HRESULT
    @lpVtbl.value.create_path_geometry.unsafe_as(Proc(ID2D1PathGeometry*, HRESULT)).call(pathgeometry)
  end
  def create_stroke_style(strokestyleproperties : D2D1_STROKE_STYLE_PROPERTIES*, dashes : Float32*, dashescount : UInt32, strokestyle : ID2D1StrokeStyle*) : HRESULT
    @lpVtbl.value.create_stroke_style.unsafe_as(Proc(D2D1_STROKE_STYLE_PROPERTIES*, Float32*, UInt32, ID2D1StrokeStyle*, HRESULT)).call(strokestyleproperties, dashes, dashescount, strokestyle)
  end
  def create_drawing_state_block(drawingstatedescription : D2D1_DRAWING_STATE_DESCRIPTION*, textrenderingparams : IDWriteRenderingParams, drawingstateblock : ID2D1DrawingStateBlock*) : HRESULT
    @lpVtbl.value.create_drawing_state_block.unsafe_as(Proc(D2D1_DRAWING_STATE_DESCRIPTION*, IDWriteRenderingParams, ID2D1DrawingStateBlock*, HRESULT)).call(drawingstatedescription, textrenderingparams, drawingstateblock)
  end
  def create_wic_bitmap_render_target(target : IWICBitmap, rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, rendertarget : ID2D1RenderTarget*) : HRESULT
    @lpVtbl.value.create_wic_bitmap_render_target.unsafe_as(Proc(IWICBitmap, D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget*, HRESULT)).call(target, rendertargetproperties, rendertarget)
  end
  def create_hwnd_render_target(rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, hwndrendertargetproperties : D2D1_HWND_RENDER_TARGET_PROPERTIES*, hwndrendertarget : ID2D1HwndRenderTarget*) : HRESULT
    @lpVtbl.value.create_hwnd_render_target.unsafe_as(Proc(D2D1_RENDER_TARGET_PROPERTIES*, D2D1_HWND_RENDER_TARGET_PROPERTIES*, ID2D1HwndRenderTarget*, HRESULT)).call(rendertargetproperties, hwndrendertargetproperties, hwndrendertarget)
  end
  def create_dxgi_surface_render_target(dxgisurface : IDXGISurface, rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, rendertarget : ID2D1RenderTarget*) : HRESULT
    @lpVtbl.value.create_dxgi_surface_render_target.unsafe_as(Proc(IDXGISurface, D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget*, HRESULT)).call(dxgisurface, rendertargetproperties, rendertarget)
  end
  def create_dc_render_target(rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, dcrendertarget : ID2D1DCRenderTarget*) : HRESULT
    @lpVtbl.value.create_dc_render_target.unsafe_as(Proc(D2D1_RENDER_TARGET_PROPERTIES*, ID2D1DCRenderTarget*, HRESULT)).call(rendertargetproperties, dcrendertarget)
  end
  def create_device(dxgidevice : IDXGIDevice, d2ddevice : ID2D1Device*) : HRESULT
    @lpVtbl.value.create_device.unsafe_as(Proc(IDXGIDevice, ID2D1Device*, HRESULT)).call(dxgidevice, d2ddevice)
  end
  def create_stroke_style2(strokestyleproperties : D2D1_STROKE_STYLE_PROPERTIES1*, dashes : Float32*, dashescount : UInt32, strokestyle : ID2D1StrokeStyle1*) : HRESULT
    @lpVtbl.value.create_stroke_style2.unsafe_as(Proc(D2D1_STROKE_STYLE_PROPERTIES1*, Float32*, UInt32, ID2D1StrokeStyle1*, HRESULT)).call(strokestyleproperties, dashes, dashescount, strokestyle)
  end
  def create_path_geometry2(pathgeometry : ID2D1PathGeometry1*) : HRESULT
    @lpVtbl.value.create_path_geometry2.unsafe_as(Proc(ID2D1PathGeometry1*, HRESULT)).call(pathgeometry)
  end
  def create_drawing_state_block2(drawingstatedescription : D2D1_DRAWING_STATE_DESCRIPTION1*, textrenderingparams : IDWriteRenderingParams, drawingstateblock : ID2D1DrawingStateBlock1*) : HRESULT
    @lpVtbl.value.create_drawing_state_block2.unsafe_as(Proc(D2D1_DRAWING_STATE_DESCRIPTION1*, IDWriteRenderingParams, ID2D1DrawingStateBlock1*, HRESULT)).call(drawingstatedescription, textrenderingparams, drawingstateblock)
  end
  def create_gdi_metafile(metafilestream : IStream, metafile : ID2D1GdiMetafile*) : HRESULT
    @lpVtbl.value.create_gdi_metafile.unsafe_as(Proc(IStream, ID2D1GdiMetafile*, HRESULT)).call(metafilestream, metafile)
  end
  def register_effect_from_stream(classid : Guid*, propertyxml : IStream, bindings : D2D1_PROPERTY_BINDING*, bindingscount : UInt32, effectfactory : PD2D1_EFFECT_FACTORY) : HRESULT
    @lpVtbl.value.register_effect_from_stream.unsafe_as(Proc(Guid*, IStream, D2D1_PROPERTY_BINDING*, UInt32, PD2D1_EFFECT_FACTORY, HRESULT)).call(classid, propertyxml, bindings, bindingscount, effectfactory)
  end
  def register_effect_from_string(classid : Guid*, propertyxml : LibC::LPWSTR, bindings : D2D1_PROPERTY_BINDING*, bindingscount : UInt32, effectfactory : PD2D1_EFFECT_FACTORY) : HRESULT
    @lpVtbl.value.register_effect_from_string.unsafe_as(Proc(Guid*, LibC::LPWSTR, D2D1_PROPERTY_BINDING*, UInt32, PD2D1_EFFECT_FACTORY, HRESULT)).call(classid, propertyxml, bindings, bindingscount, effectfactory)
  end
  def unregister_effect(classid : Guid*) : HRESULT
    @lpVtbl.value.unregister_effect.unsafe_as(Proc(Guid*, HRESULT)).call(classid)
  end
  def get_registered_effects(effects : Guid*, effectscount : UInt32, effectsreturned : UInt32*, effectsregistered : UInt32*) : HRESULT
    @lpVtbl.value.get_registered_effects.unsafe_as(Proc(Guid*, UInt32, UInt32*, UInt32*, HRESULT)).call(effects, effectscount, effectsreturned, effectsregistered)
  end
  def get_effect_properties(effectid : Guid*, properties : ID2D1Properties*) : HRESULT
    @lpVtbl.value.get_effect_properties.unsafe_as(Proc(Guid*, ID2D1Properties*, HRESULT)).call(effectid, properties)
  end
  def create_device2(dxgidevice : IDXGIDevice, d2ddevice1 : ID2D1Device1*) : HRESULT
    @lpVtbl.value.create_device2.unsafe_as(Proc(IDXGIDevice, ID2D1Device1*, HRESULT)).call(dxgidevice, d2ddevice1)
  end
end
struct LibWin32::ID2D1CommandSink1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def begin_draw : HRESULT
    @lpVtbl.value.begin_draw.unsafe_as(Proc(HRESULT)).call
  end
  def end_draw : HRESULT
    @lpVtbl.value.end_draw.unsafe_as(Proc(HRESULT)).call
  end
  def set_antialias_mode(antialiasmode : D2D1_ANTIALIAS_MODE) : HRESULT
    @lpVtbl.value.set_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE, HRESULT)).call(antialiasmode)
  end
  def set_tags(tag1 : UInt64, tag2 : UInt64) : HRESULT
    @lpVtbl.value.set_tags.unsafe_as(Proc(UInt64, UInt64, HRESULT)).call(tag1, tag2)
  end
  def set_text_antialias_mode(textantialiasmode : D2D1_TEXT_ANTIALIAS_MODE) : HRESULT
    @lpVtbl.value.set_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE, HRESULT)).call(textantialiasmode)
  end
  def set_text_rendering_params(textrenderingparams : IDWriteRenderingParams) : HRESULT
    @lpVtbl.value.set_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams, HRESULT)).call(textrenderingparams)
  end
  def set_transform(transform : D2D_MATRIX_3X2_F*) : HRESULT
    @lpVtbl.value.set_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, HRESULT)).call(transform)
  end
  def set_primitive_blend(primitiveblend : D2D1_PRIMITIVE_BLEND) : HRESULT
    @lpVtbl.value.set_primitive_blend.unsafe_as(Proc(D2D1_PRIMITIVE_BLEND, HRESULT)).call(primitiveblend)
  end
  def set_unit_mode(unitmode : D2D1_UNIT_MODE) : HRESULT
    @lpVtbl.value.set_unit_mode.unsafe_as(Proc(D2D1_UNIT_MODE, HRESULT)).call(unitmode)
  end
  def clear(color : D2D1_COLOR_F*) : HRESULT
    @lpVtbl.value.clear.unsafe_as(Proc(D2D1_COLOR_F*, HRESULT)).call(color)
  end
  def draw_glyph_run(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, glyphrundescription : DWRITE_GLYPH_RUN_DESCRIPTION*, foregroundbrush : ID2D1Brush, measuringmode : DWRITE_MEASURING_MODE) : HRESULT
    @lpVtbl.value.draw_glyph_run.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush, DWRITE_MEASURING_MODE, HRESULT)).call(baselineorigin, glyphrun, glyphrundescription, foregroundbrush, measuringmode)
  end
  def draw_line(point0 : D2D_POINT_2F, point1 : D2D_POINT_2F, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : HRESULT
    @lpVtbl.value.draw_line.unsafe_as(Proc(D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush, Float32, ID2D1StrokeStyle, HRESULT)).call(point0, point1, brush, strokewidth, strokestyle)
  end
  def draw_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : HRESULT
    @lpVtbl.value.draw_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, Float32, ID2D1StrokeStyle, HRESULT)).call(geometry, brush, strokewidth, strokestyle)
  end
  def draw_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : HRESULT
    @lpVtbl.value.draw_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Float32, ID2D1StrokeStyle, HRESULT)).call(rect, brush, strokewidth, strokestyle)
  end
  def draw_bitmap(bitmap : ID2D1Bitmap, destinationrectangle : D2D_RECT_F*, opacity : Float32, interpolationmode : D2D1_INTERPOLATION_MODE, sourcerectangle : D2D_RECT_F*, perspectivetransform : D2D_MATRIX_4X4_F*) : HRESULT
    @lpVtbl.value.draw_bitmap.unsafe_as(Proc(ID2D1Bitmap, D2D_RECT_F*, Float32, D2D1_INTERPOLATION_MODE, D2D_RECT_F*, D2D_MATRIX_4X4_F*, HRESULT)).call(bitmap, destinationrectangle, opacity, interpolationmode, sourcerectangle, perspectivetransform)
  end
  def draw_image(image : ID2D1Image, targetoffset : D2D_POINT_2F*, imagerectangle : D2D_RECT_F*, interpolationmode : D2D1_INTERPOLATION_MODE, compositemode : D2D1_COMPOSITE_MODE) : HRESULT
    @lpVtbl.value.draw_image.unsafe_as(Proc(ID2D1Image, D2D_POINT_2F*, D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE, HRESULT)).call(image, targetoffset, imagerectangle, interpolationmode, compositemode)
  end
  def draw_gdi_metafile(gdimetafile : ID2D1GdiMetafile, targetoffset : D2D_POINT_2F*) : HRESULT
    @lpVtbl.value.draw_gdi_metafile.unsafe_as(Proc(ID2D1GdiMetafile, D2D_POINT_2F*, HRESULT)).call(gdimetafile, targetoffset)
  end
  def fill_mesh(mesh : ID2D1Mesh, brush : ID2D1Brush) : HRESULT
    @lpVtbl.value.fill_mesh.unsafe_as(Proc(ID2D1Mesh, ID2D1Brush, HRESULT)).call(mesh, brush)
  end
  def fill_opacity_mask(opacitymask : ID2D1Bitmap, brush : ID2D1Brush, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.fill_opacity_mask.unsafe_as(Proc(ID2D1Bitmap, ID2D1Brush, D2D_RECT_F*, D2D_RECT_F*, HRESULT)).call(opacitymask, brush, destinationrectangle, sourcerectangle)
  end
  def fill_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, opacitybrush : ID2D1Brush) : HRESULT
    @lpVtbl.value.fill_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, ID2D1Brush, HRESULT)).call(geometry, brush, opacitybrush)
  end
  def fill_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush) : HRESULT
    @lpVtbl.value.fill_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, HRESULT)).call(rect, brush)
  end
  def push_axis_aligned_clip(cliprect : D2D_RECT_F*, antialiasmode : D2D1_ANTIALIAS_MODE) : HRESULT
    @lpVtbl.value.push_axis_aligned_clip.unsafe_as(Proc(D2D_RECT_F*, D2D1_ANTIALIAS_MODE, HRESULT)).call(cliprect, antialiasmode)
  end
  def push_layer(layerparameters1 : D2D1_LAYER_PARAMETERS1*, layer : ID2D1Layer) : HRESULT
    @lpVtbl.value.push_layer.unsafe_as(Proc(D2D1_LAYER_PARAMETERS1*, ID2D1Layer, HRESULT)).call(layerparameters1, layer)
  end
  def pop_axis_aligned_clip : HRESULT
    @lpVtbl.value.pop_axis_aligned_clip.unsafe_as(Proc(HRESULT)).call
  end
  def pop_layer : HRESULT
    @lpVtbl.value.pop_layer.unsafe_as(Proc(HRESULT)).call
  end
  def set_primitive_blend1(primitiveblend : D2D1_PRIMITIVE_BLEND) : HRESULT
    @lpVtbl.value.set_primitive_blend1.unsafe_as(Proc(D2D1_PRIMITIVE_BLEND, HRESULT)).call(primitiveblend)
  end
end
struct LibWin32::ID2D1SvgAttribute
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def get_element(element : ID2D1SvgElement*) : Void
    @lpVtbl.value.get_element.unsafe_as(Proc(ID2D1SvgElement*, Void)).call(element)
  end
  def clone(attribute : ID2D1SvgAttribute*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ID2D1SvgAttribute*, HRESULT)).call(attribute)
  end
end
struct LibWin32::ID2D1SvgPaint
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def get_element(element : ID2D1SvgElement*) : Void
    @lpVtbl.value.get_element.unsafe_as(Proc(ID2D1SvgElement*, Void)).call(element)
  end
  def clone(attribute : ID2D1SvgAttribute*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ID2D1SvgAttribute*, HRESULT)).call(attribute)
  end
  def set_paint_type(painttype : D2D1_SVG_PAINT_TYPE) : HRESULT
    @lpVtbl.value.set_paint_type.unsafe_as(Proc(D2D1_SVG_PAINT_TYPE, HRESULT)).call(painttype)
  end
  def get_paint_type : D2D1_SVG_PAINT_TYPE
    @lpVtbl.value.get_paint_type.unsafe_as(Proc(D2D1_SVG_PAINT_TYPE)).call
  end
  def set_color(color : D2D1_COLOR_F*) : HRESULT
    @lpVtbl.value.set_color.unsafe_as(Proc(D2D1_COLOR_F*, HRESULT)).call(color)
  end
  def get_color(color : D2D1_COLOR_F*) : Void
    @lpVtbl.value.get_color.unsafe_as(Proc(D2D1_COLOR_F*, Void)).call(color)
  end
  def set_id(id : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_id.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(id)
  end
  def get_id(id : Char*, idcount : UInt32) : HRESULT
    @lpVtbl.value.get_id.unsafe_as(Proc(Char*, UInt32, HRESULT)).call(id, idcount)
  end
  def get_id_length : UInt32
    @lpVtbl.value.get_id_length.unsafe_as(Proc(UInt32)).call
  end
end
struct LibWin32::ID2D1SvgStrokeDashArray
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def get_element(element : ID2D1SvgElement*) : Void
    @lpVtbl.value.get_element.unsafe_as(Proc(ID2D1SvgElement*, Void)).call(element)
  end
  def clone(attribute : ID2D1SvgAttribute*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ID2D1SvgAttribute*, HRESULT)).call(attribute)
  end
  def remove_dashes_at_end(dashescount : UInt32) : HRESULT
    @lpVtbl.value.remove_dashes_at_end.unsafe_as(Proc(UInt32, HRESULT)).call(dashescount)
  end
  def update_dashes(dashes : D2D1_SVG_LENGTH*, dashescount : UInt32, startindex : UInt32) : HRESULT
    @lpVtbl.value.update_dashes.unsafe_as(Proc(D2D1_SVG_LENGTH*, UInt32, UInt32, HRESULT)).call(dashes, dashescount, startindex)
  end
  def update_dashes2(dashes : Float32*, dashescount : UInt32, startindex : UInt32) : HRESULT
    @lpVtbl.value.update_dashes2.unsafe_as(Proc(Float32*, UInt32, UInt32, HRESULT)).call(dashes, dashescount, startindex)
  end
  def get_dashes(dashes : D2D1_SVG_LENGTH*, dashescount : UInt32, startindex : UInt32) : HRESULT
    @lpVtbl.value.get_dashes.unsafe_as(Proc(D2D1_SVG_LENGTH*, UInt32, UInt32, HRESULT)).call(dashes, dashescount, startindex)
  end
  def get_dashes2(dashes : Float32*, dashescount : UInt32, startindex : UInt32) : HRESULT
    @lpVtbl.value.get_dashes2.unsafe_as(Proc(Float32*, UInt32, UInt32, HRESULT)).call(dashes, dashescount, startindex)
  end
  def get_dashes_count : UInt32
    @lpVtbl.value.get_dashes_count.unsafe_as(Proc(UInt32)).call
  end
end
struct LibWin32::ID2D1SvgPointCollection
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def get_element(element : ID2D1SvgElement*) : Void
    @lpVtbl.value.get_element.unsafe_as(Proc(ID2D1SvgElement*, Void)).call(element)
  end
  def clone(attribute : ID2D1SvgAttribute*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ID2D1SvgAttribute*, HRESULT)).call(attribute)
  end
  def remove_points_at_end(pointscount : UInt32) : HRESULT
    @lpVtbl.value.remove_points_at_end.unsafe_as(Proc(UInt32, HRESULT)).call(pointscount)
  end
  def update_points(points : D2D_POINT_2F*, pointscount : UInt32, startindex : UInt32) : HRESULT
    @lpVtbl.value.update_points.unsafe_as(Proc(D2D_POINT_2F*, UInt32, UInt32, HRESULT)).call(points, pointscount, startindex)
  end
  def get_points(points : D2D_POINT_2F*, pointscount : UInt32, startindex : UInt32) : HRESULT
    @lpVtbl.value.get_points.unsafe_as(Proc(D2D_POINT_2F*, UInt32, UInt32, HRESULT)).call(points, pointscount, startindex)
  end
  def get_points_count : UInt32
    @lpVtbl.value.get_points_count.unsafe_as(Proc(UInt32)).call
  end
end
struct LibWin32::ID2D1SvgPathData
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def get_element(element : ID2D1SvgElement*) : Void
    @lpVtbl.value.get_element.unsafe_as(Proc(ID2D1SvgElement*, Void)).call(element)
  end
  def clone(attribute : ID2D1SvgAttribute*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(ID2D1SvgAttribute*, HRESULT)).call(attribute)
  end
  def remove_segment_data_at_end(datacount : UInt32) : HRESULT
    @lpVtbl.value.remove_segment_data_at_end.unsafe_as(Proc(UInt32, HRESULT)).call(datacount)
  end
  def update_segment_data(data : Float32*, datacount : UInt32, startindex : UInt32) : HRESULT
    @lpVtbl.value.update_segment_data.unsafe_as(Proc(Float32*, UInt32, UInt32, HRESULT)).call(data, datacount, startindex)
  end
  def get_segment_data(data : Float32*, datacount : UInt32, startindex : UInt32) : HRESULT
    @lpVtbl.value.get_segment_data.unsafe_as(Proc(Float32*, UInt32, UInt32, HRESULT)).call(data, datacount, startindex)
  end
  def get_segment_data_count : UInt32
    @lpVtbl.value.get_segment_data_count.unsafe_as(Proc(UInt32)).call
  end
  def remove_commands_at_end(commandscount : UInt32) : HRESULT
    @lpVtbl.value.remove_commands_at_end.unsafe_as(Proc(UInt32, HRESULT)).call(commandscount)
  end
  def update_commands(commands : D2D1_SVG_PATH_COMMAND*, commandscount : UInt32, startindex : UInt32) : HRESULT
    @lpVtbl.value.update_commands.unsafe_as(Proc(D2D1_SVG_PATH_COMMAND*, UInt32, UInt32, HRESULT)).call(commands, commandscount, startindex)
  end
  def get_commands(commands : D2D1_SVG_PATH_COMMAND*, commandscount : UInt32, startindex : UInt32) : HRESULT
    @lpVtbl.value.get_commands.unsafe_as(Proc(D2D1_SVG_PATH_COMMAND*, UInt32, UInt32, HRESULT)).call(commands, commandscount, startindex)
  end
  def get_commands_count : UInt32
    @lpVtbl.value.get_commands_count.unsafe_as(Proc(UInt32)).call
  end
  def create_path_geometry(fillmode : D2D1_FILL_MODE, pathgeometry : ID2D1PathGeometry1*) : HRESULT
    @lpVtbl.value.create_path_geometry.unsafe_as(Proc(D2D1_FILL_MODE, ID2D1PathGeometry1*, HRESULT)).call(fillmode, pathgeometry)
  end
end
struct LibWin32::ID2D1SvgElement
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def get_document(document : ID2D1SvgDocument*) : Void
    @lpVtbl.value.get_document.unsafe_as(Proc(ID2D1SvgDocument*, Void)).call(document)
  end
  def get_tag_name(name : Char*, namecount : UInt32) : HRESULT
    @lpVtbl.value.get_tag_name.unsafe_as(Proc(Char*, UInt32, HRESULT)).call(name, namecount)
  end
  def get_tag_name_length : UInt32
    @lpVtbl.value.get_tag_name_length.unsafe_as(Proc(UInt32)).call
  end
  def is_text_content : LibC::BOOL
    @lpVtbl.value.is_text_content.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_parent(parent : ID2D1SvgElement*) : Void
    @lpVtbl.value.get_parent.unsafe_as(Proc(ID2D1SvgElement*, Void)).call(parent)
  end
  def has_children : LibC::BOOL
    @lpVtbl.value.has_children.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_first_child(child : ID2D1SvgElement*) : Void
    @lpVtbl.value.get_first_child.unsafe_as(Proc(ID2D1SvgElement*, Void)).call(child)
  end
  def get_last_child(child : ID2D1SvgElement*) : Void
    @lpVtbl.value.get_last_child.unsafe_as(Proc(ID2D1SvgElement*, Void)).call(child)
  end
  def get_previous_child(referencechild : ID2D1SvgElement, previouschild : ID2D1SvgElement*) : HRESULT
    @lpVtbl.value.get_previous_child.unsafe_as(Proc(ID2D1SvgElement, ID2D1SvgElement*, HRESULT)).call(referencechild, previouschild)
  end
  def get_next_child(referencechild : ID2D1SvgElement, nextchild : ID2D1SvgElement*) : HRESULT
    @lpVtbl.value.get_next_child.unsafe_as(Proc(ID2D1SvgElement, ID2D1SvgElement*, HRESULT)).call(referencechild, nextchild)
  end
  def insert_child_before(newchild : ID2D1SvgElement, referencechild : ID2D1SvgElement) : HRESULT
    @lpVtbl.value.insert_child_before.unsafe_as(Proc(ID2D1SvgElement, ID2D1SvgElement, HRESULT)).call(newchild, referencechild)
  end
  def append_child(newchild : ID2D1SvgElement) : HRESULT
    @lpVtbl.value.append_child.unsafe_as(Proc(ID2D1SvgElement, HRESULT)).call(newchild)
  end
  def replace_child(newchild : ID2D1SvgElement, oldchild : ID2D1SvgElement) : HRESULT
    @lpVtbl.value.replace_child.unsafe_as(Proc(ID2D1SvgElement, ID2D1SvgElement, HRESULT)).call(newchild, oldchild)
  end
  def remove_child(oldchild : ID2D1SvgElement) : HRESULT
    @lpVtbl.value.remove_child.unsafe_as(Proc(ID2D1SvgElement, HRESULT)).call(oldchild)
  end
  def create_child(tagname : LibC::LPWSTR, newchild : ID2D1SvgElement*) : HRESULT
    @lpVtbl.value.create_child.unsafe_as(Proc(LibC::LPWSTR, ID2D1SvgElement*, HRESULT)).call(tagname, newchild)
  end
  def is_attribute_specified(name : LibC::LPWSTR, inherited : LibC::BOOL*) : LibC::BOOL
    @lpVtbl.value.is_attribute_specified.unsafe_as(Proc(LibC::LPWSTR, LibC::BOOL*, LibC::BOOL)).call(name, inherited)
  end
  def get_specified_attribute_count : UInt32
    @lpVtbl.value.get_specified_attribute_count.unsafe_as(Proc(UInt32)).call
  end
  def get_specified_attribute_name(index : UInt32, name : Char*, namecount : UInt32, inherited : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_specified_attribute_name.unsafe_as(Proc(UInt32, Char*, UInt32, LibC::BOOL*, HRESULT)).call(index, name, namecount, inherited)
  end
  def get_specified_attribute_name_length(index : UInt32, namelength : UInt32*, inherited : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_specified_attribute_name_length.unsafe_as(Proc(UInt32, UInt32*, LibC::BOOL*, HRESULT)).call(index, namelength, inherited)
  end
  def remove_attribute(name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.remove_attribute.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(name)
  end
  def set_text_value(name : Char*, namecount : UInt32) : HRESULT
    @lpVtbl.value.set_text_value.unsafe_as(Proc(Char*, UInt32, HRESULT)).call(name, namecount)
  end
  def get_text_value(name : Char*, namecount : UInt32) : HRESULT
    @lpVtbl.value.get_text_value.unsafe_as(Proc(Char*, UInt32, HRESULT)).call(name, namecount)
  end
  def get_text_value_length : UInt32
    @lpVtbl.value.get_text_value_length.unsafe_as(Proc(UInt32)).call
  end
  def set_attribute_value(name : LibC::LPWSTR, value : ID2D1SvgAttribute) : HRESULT
    @lpVtbl.value.set_attribute_value.unsafe_as(Proc(LibC::LPWSTR, ID2D1SvgAttribute, HRESULT)).call(name, value)
  end
  def set_attribute_value2(name : LibC::LPWSTR, type : D2D1_SVG_ATTRIBUTE_POD_TYPE, value : Void*, valuesizeinbytes : UInt32) : HRESULT
    @lpVtbl.value.set_attribute_value2.unsafe_as(Proc(LibC::LPWSTR, D2D1_SVG_ATTRIBUTE_POD_TYPE, Void*, UInt32, HRESULT)).call(name, type, value, valuesizeinbytes)
  end
  def set_attribute_value3(name : LibC::LPWSTR, type : D2D1_SVG_ATTRIBUTE_STRING_TYPE, value : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_attribute_value3.unsafe_as(Proc(LibC::LPWSTR, D2D1_SVG_ATTRIBUTE_STRING_TYPE, LibC::LPWSTR, HRESULT)).call(name, type, value)
  end
  def get_attribute_value(name : LibC::LPWSTR, riid : Guid*, value : Void**) : HRESULT
    @lpVtbl.value.get_attribute_value.unsafe_as(Proc(LibC::LPWSTR, Guid*, Void**, HRESULT)).call(name, riid, value)
  end
  def get_attribute_value2(name : LibC::LPWSTR, type : D2D1_SVG_ATTRIBUTE_POD_TYPE, value : Void*, valuesizeinbytes : UInt32) : HRESULT
    @lpVtbl.value.get_attribute_value2.unsafe_as(Proc(LibC::LPWSTR, D2D1_SVG_ATTRIBUTE_POD_TYPE, Void*, UInt32, HRESULT)).call(name, type, value, valuesizeinbytes)
  end
  def get_attribute_value3(name : LibC::LPWSTR, type : D2D1_SVG_ATTRIBUTE_STRING_TYPE, value : Char*, valuecount : UInt32) : HRESULT
    @lpVtbl.value.get_attribute_value3.unsafe_as(Proc(LibC::LPWSTR, D2D1_SVG_ATTRIBUTE_STRING_TYPE, Char*, UInt32, HRESULT)).call(name, type, value, valuecount)
  end
  def get_attribute_value_length(name : LibC::LPWSTR, type : D2D1_SVG_ATTRIBUTE_STRING_TYPE, valuelength : UInt32*) : HRESULT
    @lpVtbl.value.get_attribute_value_length.unsafe_as(Proc(LibC::LPWSTR, D2D1_SVG_ATTRIBUTE_STRING_TYPE, UInt32*, HRESULT)).call(name, type, valuelength)
  end
end
struct LibWin32::ID2D1SvgDocument
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def set_viewport_size(viewportsize : D2D_SIZE_F) : HRESULT
    @lpVtbl.value.set_viewport_size.unsafe_as(Proc(D2D_SIZE_F, HRESULT)).call(viewportsize)
  end
  def get_viewport_size : D2D_SIZE_F
    @lpVtbl.value.get_viewport_size.unsafe_as(Proc(D2D_SIZE_F)).call
  end
  def set_root(root : ID2D1SvgElement) : HRESULT
    @lpVtbl.value.set_root.unsafe_as(Proc(ID2D1SvgElement, HRESULT)).call(root)
  end
  def get_root(root : ID2D1SvgElement*) : Void
    @lpVtbl.value.get_root.unsafe_as(Proc(ID2D1SvgElement*, Void)).call(root)
  end
  def find_element_by_id(id : LibC::LPWSTR, svgelement : ID2D1SvgElement*) : HRESULT
    @lpVtbl.value.find_element_by_id.unsafe_as(Proc(LibC::LPWSTR, ID2D1SvgElement*, HRESULT)).call(id, svgelement)
  end
  def serialize(outputxmlstream : IStream, subtree : ID2D1SvgElement) : HRESULT
    @lpVtbl.value.serialize.unsafe_as(Proc(IStream, ID2D1SvgElement, HRESULT)).call(outputxmlstream, subtree)
  end
  def deserialize(inputxmlstream : IStream, subtree : ID2D1SvgElement*) : HRESULT
    @lpVtbl.value.deserialize.unsafe_as(Proc(IStream, ID2D1SvgElement*, HRESULT)).call(inputxmlstream, subtree)
  end
  def create_paint(painttype : D2D1_SVG_PAINT_TYPE, color : D2D1_COLOR_F*, id : LibC::LPWSTR, paint : ID2D1SvgPaint*) : HRESULT
    @lpVtbl.value.create_paint.unsafe_as(Proc(D2D1_SVG_PAINT_TYPE, D2D1_COLOR_F*, LibC::LPWSTR, ID2D1SvgPaint*, HRESULT)).call(painttype, color, id, paint)
  end
  def create_stroke_dash_array(dashes : D2D1_SVG_LENGTH*, dashescount : UInt32, strokedasharray : ID2D1SvgStrokeDashArray*) : HRESULT
    @lpVtbl.value.create_stroke_dash_array.unsafe_as(Proc(D2D1_SVG_LENGTH*, UInt32, ID2D1SvgStrokeDashArray*, HRESULT)).call(dashes, dashescount, strokedasharray)
  end
  def create_point_collection(points : D2D_POINT_2F*, pointscount : UInt32, pointcollection : ID2D1SvgPointCollection*) : HRESULT
    @lpVtbl.value.create_point_collection.unsafe_as(Proc(D2D_POINT_2F*, UInt32, ID2D1SvgPointCollection*, HRESULT)).call(points, pointscount, pointcollection)
  end
  def create_path_data(segmentdata : Float32*, segmentdatacount : UInt32, commands : D2D1_SVG_PATH_COMMAND*, commandscount : UInt32, pathdata : ID2D1SvgPathData*) : HRESULT
    @lpVtbl.value.create_path_data.unsafe_as(Proc(Float32*, UInt32, D2D1_SVG_PATH_COMMAND*, UInt32, ID2D1SvgPathData*, HRESULT)).call(segmentdata, segmentdatacount, commands, commandscount, pathdata)
  end
end
struct LibWin32::ID2D1InkStyle
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def set_nib_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.set_nib_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def get_nib_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.get_nib_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def set_nib_shape(nibshape : D2D1_INK_NIB_SHAPE) : Void
    @lpVtbl.value.set_nib_shape.unsafe_as(Proc(D2D1_INK_NIB_SHAPE, Void)).call(nibshape)
  end
  def get_nib_shape : D2D1_INK_NIB_SHAPE
    @lpVtbl.value.get_nib_shape.unsafe_as(Proc(D2D1_INK_NIB_SHAPE)).call
  end
end
struct LibWin32::ID2D1Ink
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def set_start_point(startpoint : D2D1_INK_POINT*) : Void
    @lpVtbl.value.set_start_point.unsafe_as(Proc(D2D1_INK_POINT*, Void)).call(startpoint)
  end
  def get_start_point : D2D1_INK_POINT
    @lpVtbl.value.get_start_point.unsafe_as(Proc(D2D1_INK_POINT)).call
  end
  def add_segments(segments : D2D1_INK_BEZIER_SEGMENT*, segmentscount : UInt32) : HRESULT
    @lpVtbl.value.add_segments.unsafe_as(Proc(D2D1_INK_BEZIER_SEGMENT*, UInt32, HRESULT)).call(segments, segmentscount)
  end
  def remove_segments_at_end(segmentscount : UInt32) : HRESULT
    @lpVtbl.value.remove_segments_at_end.unsafe_as(Proc(UInt32, HRESULT)).call(segmentscount)
  end
  def set_segments(startsegment : UInt32, segments : D2D1_INK_BEZIER_SEGMENT*, segmentscount : UInt32) : HRESULT
    @lpVtbl.value.set_segments.unsafe_as(Proc(UInt32, D2D1_INK_BEZIER_SEGMENT*, UInt32, HRESULT)).call(startsegment, segments, segmentscount)
  end
  def set_segment_at_end(segment : D2D1_INK_BEZIER_SEGMENT*) : HRESULT
    @lpVtbl.value.set_segment_at_end.unsafe_as(Proc(D2D1_INK_BEZIER_SEGMENT*, HRESULT)).call(segment)
  end
  def get_segment_count : UInt32
    @lpVtbl.value.get_segment_count.unsafe_as(Proc(UInt32)).call
  end
  def get_segments(startsegment : UInt32, segments : D2D1_INK_BEZIER_SEGMENT*, segmentscount : UInt32) : HRESULT
    @lpVtbl.value.get_segments.unsafe_as(Proc(UInt32, D2D1_INK_BEZIER_SEGMENT*, UInt32, HRESULT)).call(startsegment, segments, segmentscount)
  end
  def stream_as_geometry(inkstyle : ID2D1InkStyle, worldtransform : D2D_MATRIX_3X2_F*, flatteningtolerance : Float32, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.stream_as_geometry.unsafe_as(Proc(ID2D1InkStyle, D2D_MATRIX_3X2_F*, Float32, ID2D1SimplifiedGeometrySink, HRESULT)).call(inkstyle, worldtransform, flatteningtolerance, geometrysink)
  end
  def get_bounds(inkstyle : ID2D1InkStyle, worldtransform : D2D_MATRIX_3X2_F*, bounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_bounds.unsafe_as(Proc(ID2D1InkStyle, D2D_MATRIX_3X2_F*, D2D_RECT_F*, HRESULT)).call(inkstyle, worldtransform, bounds)
  end
end
struct LibWin32::ID2D1GradientMesh
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def get_patch_count : UInt32
    @lpVtbl.value.get_patch_count.unsafe_as(Proc(UInt32)).call
  end
  def get_patches(startindex : UInt32, patches : D2D1_GRADIENT_MESH_PATCH*, patchescount : UInt32) : HRESULT
    @lpVtbl.value.get_patches.unsafe_as(Proc(UInt32, D2D1_GRADIENT_MESH_PATCH*, UInt32, HRESULT)).call(startindex, patches, patchescount)
  end
end
struct LibWin32::ID2D1ImageSource
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def offer_resources : HRESULT
    @lpVtbl.value.offer_resources.unsafe_as(Proc(HRESULT)).call
  end
  def try_reclaim_resources(resourcesdiscarded : LibC::BOOL*) : HRESULT
    @lpVtbl.value.try_reclaim_resources.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(resourcesdiscarded)
  end
end
struct LibWin32::ID2D1ImageSourceFromWic
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def offer_resources : HRESULT
    @lpVtbl.value.offer_resources.unsafe_as(Proc(HRESULT)).call
  end
  def try_reclaim_resources(resourcesdiscarded : LibC::BOOL*) : HRESULT
    @lpVtbl.value.try_reclaim_resources.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(resourcesdiscarded)
  end
  def ensure_cached(rectangletofill : D2D_RECT_U*) : HRESULT
    @lpVtbl.value.ensure_cached.unsafe_as(Proc(D2D_RECT_U*, HRESULT)).call(rectangletofill)
  end
  def trim_cache(rectangletopreserve : D2D_RECT_U*) : HRESULT
    @lpVtbl.value.trim_cache.unsafe_as(Proc(D2D_RECT_U*, HRESULT)).call(rectangletopreserve)
  end
  def get_source(wicbitmapsource : IWICBitmapSource*) : Void
    @lpVtbl.value.get_source.unsafe_as(Proc(IWICBitmapSource*, Void)).call(wicbitmapsource)
  end
end
struct LibWin32::ID2D1TransformedImageSource
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def get_source(imagesource : ID2D1ImageSource*) : Void
    @lpVtbl.value.get_source.unsafe_as(Proc(ID2D1ImageSource*, Void)).call(imagesource)
  end
  def get_properties(properties : D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*) : Void
    @lpVtbl.value.get_properties.unsafe_as(Proc(D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, Void)).call(properties)
  end
end
struct LibWin32::ID2D1LookupTable3D
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
end
struct LibWin32::ID2D1DeviceContext2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def create_bitmap(size : D2D_SIZE_U, srcdata : Void*, pitch : UInt32, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_bitmap.unsafe_as(Proc(D2D_SIZE_U, Void*, UInt32, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(size, srcdata, pitch, bitmapproperties, bitmap)
  end
  def create_bitmap_from_wic_bitmap(wicbitmapsource : IWICBitmapSource, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_bitmap_from_wic_bitmap.unsafe_as(Proc(IWICBitmapSource, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(wicbitmapsource, bitmapproperties, bitmap)
  end
  def create_shared_bitmap(riid : Guid*, data : Void*, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_shared_bitmap.unsafe_as(Proc(Guid*, Void*, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(riid, data, bitmapproperties, bitmap)
  end
  def create_bitmap_brush(bitmap : ID2D1Bitmap, bitmapbrushproperties : D2D1_BITMAP_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, bitmapbrush : ID2D1BitmapBrush*) : HRESULT
    @lpVtbl.value.create_bitmap_brush.unsafe_as(Proc(ID2D1Bitmap, D2D1_BITMAP_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush*, HRESULT)).call(bitmap, bitmapbrushproperties, brushproperties, bitmapbrush)
  end
  def create_solid_color_brush(color : D2D1_COLOR_F*, brushproperties : D2D1_BRUSH_PROPERTIES*, solidcolorbrush : ID2D1SolidColorBrush*) : HRESULT
    @lpVtbl.value.create_solid_color_brush.unsafe_as(Proc(D2D1_COLOR_F*, D2D1_BRUSH_PROPERTIES*, ID2D1SolidColorBrush*, HRESULT)).call(color, brushproperties, solidcolorbrush)
  end
  def create_gradient_stop_collection(gradientstops : D2D1_GRADIENT_STOP*, gradientstopscount : UInt32, colorinterpolationgamma : D2D1_GAMMA, extendmode : D2D1_EXTEND_MODE, gradientstopcollection : ID2D1GradientStopCollection*) : HRESULT
    @lpVtbl.value.create_gradient_stop_collection.unsafe_as(Proc(D2D1_GRADIENT_STOP*, UInt32, D2D1_GAMMA, D2D1_EXTEND_MODE, ID2D1GradientStopCollection*, HRESULT)).call(gradientstops, gradientstopscount, colorinterpolationgamma, extendmode, gradientstopcollection)
  end
  def create_linear_gradient_brush(lineargradientbrushproperties : D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, gradientstopcollection : ID2D1GradientStopCollection, lineargradientbrush : ID2D1LinearGradientBrush*) : HRESULT
    @lpVtbl.value.create_linear_gradient_brush.unsafe_as(Proc(D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection, ID2D1LinearGradientBrush*, HRESULT)).call(lineargradientbrushproperties, brushproperties, gradientstopcollection, lineargradientbrush)
  end
  def create_radial_gradient_brush(radialgradientbrushproperties : D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, gradientstopcollection : ID2D1GradientStopCollection, radialgradientbrush : ID2D1RadialGradientBrush*) : HRESULT
    @lpVtbl.value.create_radial_gradient_brush.unsafe_as(Proc(D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection, ID2D1RadialGradientBrush*, HRESULT)).call(radialgradientbrushproperties, brushproperties, gradientstopcollection, radialgradientbrush)
  end
  def create_compatible_render_target(desiredsize : D2D_SIZE_F*, desiredpixelsize : D2D_SIZE_U*, desiredformat : D2D1_PIXEL_FORMAT*, options : D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, bitmaprendertarget : ID2D1BitmapRenderTarget*) : HRESULT
    @lpVtbl.value.create_compatible_render_target.unsafe_as(Proc(D2D_SIZE_F*, D2D_SIZE_U*, D2D1_PIXEL_FORMAT*, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, ID2D1BitmapRenderTarget*, HRESULT)).call(desiredsize, desiredpixelsize, desiredformat, options, bitmaprendertarget)
  end
  def create_layer(size : D2D_SIZE_F*, layer : ID2D1Layer*) : HRESULT
    @lpVtbl.value.create_layer.unsafe_as(Proc(D2D_SIZE_F*, ID2D1Layer*, HRESULT)).call(size, layer)
  end
  def create_mesh(mesh : ID2D1Mesh*) : HRESULT
    @lpVtbl.value.create_mesh.unsafe_as(Proc(ID2D1Mesh*, HRESULT)).call(mesh)
  end
  def draw_line(point0 : D2D_POINT_2F, point1 : D2D_POINT_2F, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_line.unsafe_as(Proc(D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(point0, point1, brush, strokewidth, strokestyle)
  end
  def draw_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(rect, brush, strokewidth, strokestyle)
  end
  def fill_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Void)).call(rect, brush)
  end
  def draw_rounded_rectangle(roundedrect : D2D1_ROUNDED_RECT*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_rounded_rectangle.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(roundedrect, brush, strokewidth, strokestyle)
  end
  def fill_rounded_rectangle(roundedrect : D2D1_ROUNDED_RECT*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_rounded_rectangle.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1Brush, Void)).call(roundedrect, brush)
  end
  def draw_ellipse(ellipse : D2D1_ELLIPSE*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_ellipse.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(ellipse, brush, strokewidth, strokestyle)
  end
  def fill_ellipse(ellipse : D2D1_ELLIPSE*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_ellipse.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1Brush, Void)).call(ellipse, brush)
  end
  def draw_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(geometry, brush, strokewidth, strokestyle)
  end
  def fill_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, opacitybrush : ID2D1Brush) : Void
    @lpVtbl.value.fill_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, ID2D1Brush, Void)).call(geometry, brush, opacitybrush)
  end
  def fill_mesh(mesh : ID2D1Mesh, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_mesh.unsafe_as(Proc(ID2D1Mesh, ID2D1Brush, Void)).call(mesh, brush)
  end
  def fill_opacity_mask(opacitymask : ID2D1Bitmap, brush : ID2D1Brush, content : D2D1_OPACITY_MASK_CONTENT, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.fill_opacity_mask.unsafe_as(Proc(ID2D1Bitmap, ID2D1Brush, D2D1_OPACITY_MASK_CONTENT, D2D_RECT_F*, D2D_RECT_F*, Void)).call(opacitymask, brush, content, destinationrectangle, sourcerectangle)
  end
  def draw_bitmap(bitmap : ID2D1Bitmap, destinationrectangle : D2D_RECT_F*, opacity : Float32, interpolationmode : D2D1_BITMAP_INTERPOLATION_MODE, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.draw_bitmap.unsafe_as(Proc(ID2D1Bitmap, D2D_RECT_F*, Float32, D2D1_BITMAP_INTERPOLATION_MODE, D2D_RECT_F*, Void)).call(bitmap, destinationrectangle, opacity, interpolationmode, sourcerectangle)
  end
  def draw_text(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, layoutrect : D2D_RECT_F*, defaultfillbrush : ID2D1Brush, options : D2D1_DRAW_TEXT_OPTIONS, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_text.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, D2D_RECT_F*, ID2D1Brush, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE, Void)).call(string, stringlength, textformat, layoutrect, defaultfillbrush, options, measuringmode)
  end
  def draw_text_layout(origin : D2D_POINT_2F, textlayout : IDWriteTextLayout, defaultfillbrush : ID2D1Brush, options : D2D1_DRAW_TEXT_OPTIONS) : Void
    @lpVtbl.value.draw_text_layout.unsafe_as(Proc(D2D_POINT_2F, IDWriteTextLayout, ID2D1Brush, D2D1_DRAW_TEXT_OPTIONS, Void)).call(origin, textlayout, defaultfillbrush, options)
  end
  def draw_glyph_run(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, foregroundbrush : ID2D1Brush, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_glyph_run.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, ID2D1Brush, DWRITE_MEASURING_MODE, Void)).call(baselineorigin, glyphrun, foregroundbrush, measuringmode)
  end
  def set_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.set_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def get_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.get_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def set_antialias_mode(antialiasmode : D2D1_ANTIALIAS_MODE) : Void
    @lpVtbl.value.set_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE, Void)).call(antialiasmode)
  end
  def get_antialias_mode : D2D1_ANTIALIAS_MODE
    @lpVtbl.value.get_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE)).call
  end
  def set_text_antialias_mode(textantialiasmode : D2D1_TEXT_ANTIALIAS_MODE) : Void
    @lpVtbl.value.set_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE, Void)).call(textantialiasmode)
  end
  def get_text_antialias_mode : D2D1_TEXT_ANTIALIAS_MODE
    @lpVtbl.value.get_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE)).call
  end
  def set_text_rendering_params(textrenderingparams : IDWriteRenderingParams) : Void
    @lpVtbl.value.set_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams, Void)).call(textrenderingparams)
  end
  def get_text_rendering_params(textrenderingparams : IDWriteRenderingParams*) : Void
    @lpVtbl.value.get_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams*, Void)).call(textrenderingparams)
  end
  def set_tags(tag1 : UInt64, tag2 : UInt64) : Void
    @lpVtbl.value.set_tags.unsafe_as(Proc(UInt64, UInt64, Void)).call(tag1, tag2)
  end
  def get_tags(tag1 : UInt64*, tag2 : UInt64*) : Void
    @lpVtbl.value.get_tags.unsafe_as(Proc(UInt64*, UInt64*, Void)).call(tag1, tag2)
  end
  def push_layer(layerparameters : D2D1_LAYER_PARAMETERS*, layer : ID2D1Layer) : Void
    @lpVtbl.value.push_layer.unsafe_as(Proc(D2D1_LAYER_PARAMETERS*, ID2D1Layer, Void)).call(layerparameters, layer)
  end
  def pop_layer : Void
    @lpVtbl.value.pop_layer.unsafe_as(Proc(Void)).call
  end
  def flush(tag1 : UInt64*, tag2 : UInt64*) : HRESULT
    @lpVtbl.value.flush.unsafe_as(Proc(UInt64*, UInt64*, HRESULT)).call(tag1, tag2)
  end
  def save_drawing_state(drawingstateblock : ID2D1DrawingStateBlock) : Void
    @lpVtbl.value.save_drawing_state.unsafe_as(Proc(ID2D1DrawingStateBlock, Void)).call(drawingstateblock)
  end
  def restore_drawing_state(drawingstateblock : ID2D1DrawingStateBlock) : Void
    @lpVtbl.value.restore_drawing_state.unsafe_as(Proc(ID2D1DrawingStateBlock, Void)).call(drawingstateblock)
  end
  def push_axis_aligned_clip(cliprect : D2D_RECT_F*, antialiasmode : D2D1_ANTIALIAS_MODE) : Void
    @lpVtbl.value.push_axis_aligned_clip.unsafe_as(Proc(D2D_RECT_F*, D2D1_ANTIALIAS_MODE, Void)).call(cliprect, antialiasmode)
  end
  def pop_axis_aligned_clip : Void
    @lpVtbl.value.pop_axis_aligned_clip.unsafe_as(Proc(Void)).call
  end
  def clear(clearcolor : D2D1_COLOR_F*) : Void
    @lpVtbl.value.clear.unsafe_as(Proc(D2D1_COLOR_F*, Void)).call(clearcolor)
  end
  def begin_draw : Void
    @lpVtbl.value.begin_draw.unsafe_as(Proc(Void)).call
  end
  def end_draw(tag1 : UInt64*, tag2 : UInt64*) : HRESULT
    @lpVtbl.value.end_draw.unsafe_as(Proc(UInt64*, UInt64*, HRESULT)).call(tag1, tag2)
  end
  def get_pixel_format : D2D1_PIXEL_FORMAT
    @lpVtbl.value.get_pixel_format.unsafe_as(Proc(D2D1_PIXEL_FORMAT)).call
  end
  def set_dpi(dpix : Float32, dpiy : Float32) : Void
    @lpVtbl.value.set_dpi.unsafe_as(Proc(Float32, Float32, Void)).call(dpix, dpiy)
  end
  def get_dpi(dpix : Float32*, dpiy : Float32*) : Void
    @lpVtbl.value.get_dpi.unsafe_as(Proc(Float32*, Float32*, Void)).call(dpix, dpiy)
  end
  def get_size : D2D_SIZE_F
    @lpVtbl.value.get_size.unsafe_as(Proc(D2D_SIZE_F)).call
  end
  def get_pixel_size : D2D_SIZE_U
    @lpVtbl.value.get_pixel_size.unsafe_as(Proc(D2D_SIZE_U)).call
  end
  def get_maximum_bitmap_size : UInt32
    @lpVtbl.value.get_maximum_bitmap_size.unsafe_as(Proc(UInt32)).call
  end
  def is_supported(rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*) : LibC::BOOL
    @lpVtbl.value.is_supported.unsafe_as(Proc(D2D1_RENDER_TARGET_PROPERTIES*, LibC::BOOL)).call(rendertargetproperties)
  end
  def create_bitmap2(size : D2D_SIZE_U, sourcedata : Void*, pitch : UInt32, bitmapproperties : D2D1_BITMAP_PROPERTIES1*, bitmap : ID2D1Bitmap1*) : HRESULT
    @lpVtbl.value.create_bitmap2.unsafe_as(Proc(D2D_SIZE_U, Void*, UInt32, D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1*, HRESULT)).call(size, sourcedata, pitch, bitmapproperties, bitmap)
  end
  def create_bitmap_from_wic_bitmap2(wicbitmapsource : IWICBitmapSource, bitmapproperties : D2D1_BITMAP_PROPERTIES1*, bitmap : ID2D1Bitmap1*) : HRESULT
    @lpVtbl.value.create_bitmap_from_wic_bitmap2.unsafe_as(Proc(IWICBitmapSource, D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1*, HRESULT)).call(wicbitmapsource, bitmapproperties, bitmap)
  end
  def create_color_context(space : D2D1_COLOR_SPACE, profile : UInt8*, profilesize : UInt32, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context.unsafe_as(Proc(D2D1_COLOR_SPACE, UInt8*, UInt32, ID2D1ColorContext*, HRESULT)).call(space, profile, profilesize, colorcontext)
  end
  def create_color_context_from_filename(filename : LibC::LPWSTR, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context_from_filename.unsafe_as(Proc(LibC::LPWSTR, ID2D1ColorContext*, HRESULT)).call(filename, colorcontext)
  end
  def create_color_context_from_wic_color_context(wiccolorcontext : IWICColorContext, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context_from_wic_color_context.unsafe_as(Proc(IWICColorContext, ID2D1ColorContext*, HRESULT)).call(wiccolorcontext, colorcontext)
  end
  def create_bitmap_from_dxgi_surface(surface : IDXGISurface, bitmapproperties : D2D1_BITMAP_PROPERTIES1*, bitmap : ID2D1Bitmap1*) : HRESULT
    @lpVtbl.value.create_bitmap_from_dxgi_surface.unsafe_as(Proc(IDXGISurface, D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1*, HRESULT)).call(surface, bitmapproperties, bitmap)
  end
  def create_effect(effectid : Guid*, effect : ID2D1Effect*) : HRESULT
    @lpVtbl.value.create_effect.unsafe_as(Proc(Guid*, ID2D1Effect*, HRESULT)).call(effectid, effect)
  end
  def create_gradient_stop_collection2(straightalphagradientstops : D2D1_GRADIENT_STOP*, straightalphagradientstopscount : UInt32, preinterpolationspace : D2D1_COLOR_SPACE, postinterpolationspace : D2D1_COLOR_SPACE, bufferprecision : D2D1_BUFFER_PRECISION, extendmode : D2D1_EXTEND_MODE, colorinterpolationmode : D2D1_COLOR_INTERPOLATION_MODE, gradientstopcollection1 : ID2D1GradientStopCollection1*) : HRESULT
    @lpVtbl.value.create_gradient_stop_collection2.unsafe_as(Proc(D2D1_GRADIENT_STOP*, UInt32, D2D1_COLOR_SPACE, D2D1_COLOR_SPACE, D2D1_BUFFER_PRECISION, D2D1_EXTEND_MODE, D2D1_COLOR_INTERPOLATION_MODE, ID2D1GradientStopCollection1*, HRESULT)).call(straightalphagradientstops, straightalphagradientstopscount, preinterpolationspace, postinterpolationspace, bufferprecision, extendmode, colorinterpolationmode, gradientstopcollection1)
  end
  def create_image_brush(image : ID2D1Image, imagebrushproperties : D2D1_IMAGE_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, imagebrush : ID2D1ImageBrush*) : HRESULT
    @lpVtbl.value.create_image_brush.unsafe_as(Proc(ID2D1Image, D2D1_IMAGE_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1ImageBrush*, HRESULT)).call(image, imagebrushproperties, brushproperties, imagebrush)
  end
  def create_bitmap_brush2(bitmap : ID2D1Bitmap, bitmapbrushproperties : D2D1_BITMAP_BRUSH_PROPERTIES1*, brushproperties : D2D1_BRUSH_PROPERTIES*, bitmapbrush : ID2D1BitmapBrush1*) : HRESULT
    @lpVtbl.value.create_bitmap_brush2.unsafe_as(Proc(ID2D1Bitmap, D2D1_BITMAP_BRUSH_PROPERTIES1*, D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush1*, HRESULT)).call(bitmap, bitmapbrushproperties, brushproperties, bitmapbrush)
  end
  def create_command_list(commandlist : ID2D1CommandList*) : HRESULT
    @lpVtbl.value.create_command_list.unsafe_as(Proc(ID2D1CommandList*, HRESULT)).call(commandlist)
  end
  def is_dxgi_format_supported(format : DXGI_FORMAT) : LibC::BOOL
    @lpVtbl.value.is_dxgi_format_supported.unsafe_as(Proc(DXGI_FORMAT, LibC::BOOL)).call(format)
  end
  def is_buffer_precision_supported(bufferprecision : D2D1_BUFFER_PRECISION) : LibC::BOOL
    @lpVtbl.value.is_buffer_precision_supported.unsafe_as(Proc(D2D1_BUFFER_PRECISION, LibC::BOOL)).call(bufferprecision)
  end
  def get_image_local_bounds(image : ID2D1Image, localbounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_image_local_bounds.unsafe_as(Proc(ID2D1Image, D2D_RECT_F*, HRESULT)).call(image, localbounds)
  end
  def get_image_world_bounds(image : ID2D1Image, worldbounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_image_world_bounds.unsafe_as(Proc(ID2D1Image, D2D_RECT_F*, HRESULT)).call(image, worldbounds)
  end
  def get_glyph_run_world_bounds(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, measuringmode : DWRITE_MEASURING_MODE, bounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_glyph_run_world_bounds.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D_RECT_F*, HRESULT)).call(baselineorigin, glyphrun, measuringmode, bounds)
  end
  def get_device(device : ID2D1Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID2D1Device*, Void)).call(device)
  end
  def set_target(image : ID2D1Image) : Void
    @lpVtbl.value.set_target.unsafe_as(Proc(ID2D1Image, Void)).call(image)
  end
  def get_target(image : ID2D1Image*) : Void
    @lpVtbl.value.get_target.unsafe_as(Proc(ID2D1Image*, Void)).call(image)
  end
  def set_rendering_controls(renderingcontrols : D2D1_RENDERING_CONTROLS*) : Void
    @lpVtbl.value.set_rendering_controls.unsafe_as(Proc(D2D1_RENDERING_CONTROLS*, Void)).call(renderingcontrols)
  end
  def get_rendering_controls(renderingcontrols : D2D1_RENDERING_CONTROLS*) : Void
    @lpVtbl.value.get_rendering_controls.unsafe_as(Proc(D2D1_RENDERING_CONTROLS*, Void)).call(renderingcontrols)
  end
  def set_primitive_blend(primitiveblend : D2D1_PRIMITIVE_BLEND) : Void
    @lpVtbl.value.set_primitive_blend.unsafe_as(Proc(D2D1_PRIMITIVE_BLEND, Void)).call(primitiveblend)
  end
  def get_primitive_blend : D2D1_PRIMITIVE_BLEND
    @lpVtbl.value.get_primitive_blend.unsafe_as(Proc(D2D1_PRIMITIVE_BLEND)).call
  end
  def set_unit_mode(unitmode : D2D1_UNIT_MODE) : Void
    @lpVtbl.value.set_unit_mode.unsafe_as(Proc(D2D1_UNIT_MODE, Void)).call(unitmode)
  end
  def get_unit_mode : D2D1_UNIT_MODE
    @lpVtbl.value.get_unit_mode.unsafe_as(Proc(D2D1_UNIT_MODE)).call
  end
  def draw_glyph_run2(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, glyphrundescription : DWRITE_GLYPH_RUN_DESCRIPTION*, foregroundbrush : ID2D1Brush, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_glyph_run2.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush, DWRITE_MEASURING_MODE, Void)).call(baselineorigin, glyphrun, glyphrundescription, foregroundbrush, measuringmode)
  end
  def draw_image(image : ID2D1Image, targetoffset : D2D_POINT_2F*, imagerectangle : D2D_RECT_F*, interpolationmode : D2D1_INTERPOLATION_MODE, compositemode : D2D1_COMPOSITE_MODE) : Void
    @lpVtbl.value.draw_image.unsafe_as(Proc(ID2D1Image, D2D_POINT_2F*, D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE, Void)).call(image, targetoffset, imagerectangle, interpolationmode, compositemode)
  end
  def draw_gdi_metafile(gdimetafile : ID2D1GdiMetafile, targetoffset : D2D_POINT_2F*) : Void
    @lpVtbl.value.draw_gdi_metafile.unsafe_as(Proc(ID2D1GdiMetafile, D2D_POINT_2F*, Void)).call(gdimetafile, targetoffset)
  end
  def draw_bitmap2(bitmap : ID2D1Bitmap, destinationrectangle : D2D_RECT_F*, opacity : Float32, interpolationmode : D2D1_INTERPOLATION_MODE, sourcerectangle : D2D_RECT_F*, perspectivetransform : D2D_MATRIX_4X4_F*) : Void
    @lpVtbl.value.draw_bitmap2.unsafe_as(Proc(ID2D1Bitmap, D2D_RECT_F*, Float32, D2D1_INTERPOLATION_MODE, D2D_RECT_F*, D2D_MATRIX_4X4_F*, Void)).call(bitmap, destinationrectangle, opacity, interpolationmode, sourcerectangle, perspectivetransform)
  end
  def push_layer2(layerparameters : D2D1_LAYER_PARAMETERS1*, layer : ID2D1Layer) : Void
    @lpVtbl.value.push_layer2.unsafe_as(Proc(D2D1_LAYER_PARAMETERS1*, ID2D1Layer, Void)).call(layerparameters, layer)
  end
  def invalidate_effect_input_rectangle(effect : ID2D1Effect, input : UInt32, inputrectangle : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.invalidate_effect_input_rectangle.unsafe_as(Proc(ID2D1Effect, UInt32, D2D_RECT_F*, HRESULT)).call(effect, input, inputrectangle)
  end
  def get_effect_invalid_rectangle_count(effect : ID2D1Effect, rectanglecount : UInt32*) : HRESULT
    @lpVtbl.value.get_effect_invalid_rectangle_count.unsafe_as(Proc(ID2D1Effect, UInt32*, HRESULT)).call(effect, rectanglecount)
  end
  def get_effect_invalid_rectangles(effect : ID2D1Effect, rectangles : D2D_RECT_F*, rectanglescount : UInt32) : HRESULT
    @lpVtbl.value.get_effect_invalid_rectangles.unsafe_as(Proc(ID2D1Effect, D2D_RECT_F*, UInt32, HRESULT)).call(effect, rectangles, rectanglescount)
  end
  def get_effect_required_input_rectangles(rendereffect : ID2D1Effect, renderimagerectangle : D2D_RECT_F*, inputdescriptions : D2D1_EFFECT_INPUT_DESCRIPTION*, requiredinputrects : D2D_RECT_F*, inputcount : UInt32) : HRESULT
    @lpVtbl.value.get_effect_required_input_rectangles.unsafe_as(Proc(ID2D1Effect, D2D_RECT_F*, D2D1_EFFECT_INPUT_DESCRIPTION*, D2D_RECT_F*, UInt32, HRESULT)).call(rendereffect, renderimagerectangle, inputdescriptions, requiredinputrects, inputcount)
  end
  def fill_opacity_mask2(opacitymask : ID2D1Bitmap, brush : ID2D1Brush, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.fill_opacity_mask2.unsafe_as(Proc(ID2D1Bitmap, ID2D1Brush, D2D_RECT_F*, D2D_RECT_F*, Void)).call(opacitymask, brush, destinationrectangle, sourcerectangle)
  end
  def create_filled_geometry_realization(geometry : ID2D1Geometry, flatteningtolerance : Float32, geometryrealization : ID2D1GeometryRealization*) : HRESULT
    @lpVtbl.value.create_filled_geometry_realization.unsafe_as(Proc(ID2D1Geometry, Float32, ID2D1GeometryRealization*, HRESULT)).call(geometry, flatteningtolerance, geometryrealization)
  end
  def create_stroked_geometry_realization(geometry : ID2D1Geometry, flatteningtolerance : Float32, strokewidth : Float32, strokestyle : ID2D1StrokeStyle, geometryrealization : ID2D1GeometryRealization*) : HRESULT
    @lpVtbl.value.create_stroked_geometry_realization.unsafe_as(Proc(ID2D1Geometry, Float32, Float32, ID2D1StrokeStyle, ID2D1GeometryRealization*, HRESULT)).call(geometry, flatteningtolerance, strokewidth, strokestyle, geometryrealization)
  end
  def draw_geometry_realization(geometryrealization : ID2D1GeometryRealization, brush : ID2D1Brush) : Void
    @lpVtbl.value.draw_geometry_realization.unsafe_as(Proc(ID2D1GeometryRealization, ID2D1Brush, Void)).call(geometryrealization, brush)
  end
  def create_ink(startpoint : D2D1_INK_POINT*, ink : ID2D1Ink*) : HRESULT
    @lpVtbl.value.create_ink.unsafe_as(Proc(D2D1_INK_POINT*, ID2D1Ink*, HRESULT)).call(startpoint, ink)
  end
  def create_ink_style(inkstyleproperties : D2D1_INK_STYLE_PROPERTIES*, inkstyle : ID2D1InkStyle*) : HRESULT
    @lpVtbl.value.create_ink_style.unsafe_as(Proc(D2D1_INK_STYLE_PROPERTIES*, ID2D1InkStyle*, HRESULT)).call(inkstyleproperties, inkstyle)
  end
  def create_gradient_mesh(patches : D2D1_GRADIENT_MESH_PATCH*, patchescount : UInt32, gradientmesh : ID2D1GradientMesh*) : HRESULT
    @lpVtbl.value.create_gradient_mesh.unsafe_as(Proc(D2D1_GRADIENT_MESH_PATCH*, UInt32, ID2D1GradientMesh*, HRESULT)).call(patches, patchescount, gradientmesh)
  end
  def create_image_source_from_wic(wicbitmapsource : IWICBitmapSource, loadingoptions : D2D1_IMAGE_SOURCE_LOADING_OPTIONS, alphamode : D2D1_ALPHA_MODE, imagesource : ID2D1ImageSourceFromWic*) : HRESULT
    @lpVtbl.value.create_image_source_from_wic.unsafe_as(Proc(IWICBitmapSource, D2D1_IMAGE_SOURCE_LOADING_OPTIONS, D2D1_ALPHA_MODE, ID2D1ImageSourceFromWic*, HRESULT)).call(wicbitmapsource, loadingoptions, alphamode, imagesource)
  end
  def create_lookup_table3_d(precision : D2D1_BUFFER_PRECISION, extents : UInt32*, data : UInt8*, datacount : UInt32, strides : UInt32*, lookuptable : ID2D1LookupTable3D*) : HRESULT
    @lpVtbl.value.create_lookup_table3_d.unsafe_as(Proc(D2D1_BUFFER_PRECISION, UInt32*, UInt8*, UInt32, UInt32*, ID2D1LookupTable3D*, HRESULT)).call(precision, extents, data, datacount, strides, lookuptable)
  end
  def create_image_source_from_dxgi(surfaces : IDXGISurface*, surfacecount : UInt32, colorspace : DXGI_COLOR_SPACE_TYPE, options : D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, imagesource : ID2D1ImageSource*) : HRESULT
    @lpVtbl.value.create_image_source_from_dxgi.unsafe_as(Proc(IDXGISurface*, UInt32, DXGI_COLOR_SPACE_TYPE, D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, ID2D1ImageSource*, HRESULT)).call(surfaces, surfacecount, colorspace, options, imagesource)
  end
  def get_gradient_mesh_world_bounds(gradientmesh : ID2D1GradientMesh, pbounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_gradient_mesh_world_bounds.unsafe_as(Proc(ID2D1GradientMesh, D2D_RECT_F*, HRESULT)).call(gradientmesh, pbounds)
  end
  def draw_ink(ink : ID2D1Ink, brush : ID2D1Brush, inkstyle : ID2D1InkStyle) : Void
    @lpVtbl.value.draw_ink.unsafe_as(Proc(ID2D1Ink, ID2D1Brush, ID2D1InkStyle, Void)).call(ink, brush, inkstyle)
  end
  def draw_gradient_mesh(gradientmesh : ID2D1GradientMesh) : Void
    @lpVtbl.value.draw_gradient_mesh.unsafe_as(Proc(ID2D1GradientMesh, Void)).call(gradientmesh)
  end
  def draw_gdi_metafile2(gdimetafile : ID2D1GdiMetafile, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.draw_gdi_metafile2.unsafe_as(Proc(ID2D1GdiMetafile, D2D_RECT_F*, D2D_RECT_F*, Void)).call(gdimetafile, destinationrectangle, sourcerectangle)
  end
  def create_transformed_image_source(imagesource : ID2D1ImageSource, properties : D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, transformedimagesource : ID2D1TransformedImageSource*) : HRESULT
    @lpVtbl.value.create_transformed_image_source.unsafe_as(Proc(ID2D1ImageSource, D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, ID2D1TransformedImageSource*, HRESULT)).call(imagesource, properties, transformedimagesource)
  end
end
struct LibWin32::ID2D1Device2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def create_device_context(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext : ID2D1DeviceContext*) : HRESULT
    @lpVtbl.value.create_device_context.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext*, HRESULT)).call(options, devicecontext)
  end
  def create_print_control(wicfactory : IWICImagingFactory, documenttarget : IPrintDocumentPackageTarget, printcontrolproperties : D2D1_PRINT_CONTROL_PROPERTIES*, printcontrol : ID2D1PrintControl*) : HRESULT
    @lpVtbl.value.create_print_control.unsafe_as(Proc(IWICImagingFactory, IPrintDocumentPackageTarget, D2D1_PRINT_CONTROL_PROPERTIES*, ID2D1PrintControl*, HRESULT)).call(wicfactory, documenttarget, printcontrolproperties, printcontrol)
  end
  def set_maximum_texture_memory(maximuminbytes : UInt64) : Void
    @lpVtbl.value.set_maximum_texture_memory.unsafe_as(Proc(UInt64, Void)).call(maximuminbytes)
  end
  def get_maximum_texture_memory : UInt64
    @lpVtbl.value.get_maximum_texture_memory.unsafe_as(Proc(UInt64)).call
  end
  def clear_resources(millisecondssinceuse : UInt32) : Void
    @lpVtbl.value.clear_resources.unsafe_as(Proc(UInt32, Void)).call(millisecondssinceuse)
  end
  def get_rendering_priority : D2D1_RENDERING_PRIORITY
    @lpVtbl.value.get_rendering_priority.unsafe_as(Proc(D2D1_RENDERING_PRIORITY)).call
  end
  def set_rendering_priority(renderingpriority : D2D1_RENDERING_PRIORITY) : Void
    @lpVtbl.value.set_rendering_priority.unsafe_as(Proc(D2D1_RENDERING_PRIORITY, Void)).call(renderingpriority)
  end
  def create_device_context2(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext1 : ID2D1DeviceContext1*) : HRESULT
    @lpVtbl.value.create_device_context2.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext1*, HRESULT)).call(options, devicecontext1)
  end
  def create_device_context3(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext2 : ID2D1DeviceContext2*) : HRESULT
    @lpVtbl.value.create_device_context3.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext2*, HRESULT)).call(options, devicecontext2)
  end
  def flush_device_contexts(bitmap : ID2D1Bitmap) : Void
    @lpVtbl.value.flush_device_contexts.unsafe_as(Proc(ID2D1Bitmap, Void)).call(bitmap)
  end
  def get_dxgi_device(dxgidevice : IDXGIDevice*) : HRESULT
    @lpVtbl.value.get_dxgi_device.unsafe_as(Proc(IDXGIDevice*, HRESULT)).call(dxgidevice)
  end
end
struct LibWin32::ID2D1Factory3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def reload_system_metrics : HRESULT
    @lpVtbl.value.reload_system_metrics.unsafe_as(Proc(HRESULT)).call
  end
  def get_desktop_dpi(dpix : Float32*, dpiy : Float32*) : Void
    @lpVtbl.value.get_desktop_dpi.unsafe_as(Proc(Float32*, Float32*, Void)).call(dpix, dpiy)
  end
  def create_rectangle_geometry(rectangle : D2D_RECT_F*, rectanglegeometry : ID2D1RectangleGeometry*) : HRESULT
    @lpVtbl.value.create_rectangle_geometry.unsafe_as(Proc(D2D_RECT_F*, ID2D1RectangleGeometry*, HRESULT)).call(rectangle, rectanglegeometry)
  end
  def create_rounded_rectangle_geometry(roundedrectangle : D2D1_ROUNDED_RECT*, roundedrectanglegeometry : ID2D1RoundedRectangleGeometry*) : HRESULT
    @lpVtbl.value.create_rounded_rectangle_geometry.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1RoundedRectangleGeometry*, HRESULT)).call(roundedrectangle, roundedrectanglegeometry)
  end
  def create_ellipse_geometry(ellipse : D2D1_ELLIPSE*, ellipsegeometry : ID2D1EllipseGeometry*) : HRESULT
    @lpVtbl.value.create_ellipse_geometry.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1EllipseGeometry*, HRESULT)).call(ellipse, ellipsegeometry)
  end
  def create_geometry_group(fillmode : D2D1_FILL_MODE, geometries : ID2D1Geometry*, geometriescount : UInt32, geometrygroup : ID2D1GeometryGroup*) : HRESULT
    @lpVtbl.value.create_geometry_group.unsafe_as(Proc(D2D1_FILL_MODE, ID2D1Geometry*, UInt32, ID2D1GeometryGroup*, HRESULT)).call(fillmode, geometries, geometriescount, geometrygroup)
  end
  def create_transformed_geometry(sourcegeometry : ID2D1Geometry, transform : D2D_MATRIX_3X2_F*, transformedgeometry : ID2D1TransformedGeometry*) : HRESULT
    @lpVtbl.value.create_transformed_geometry.unsafe_as(Proc(ID2D1Geometry, D2D_MATRIX_3X2_F*, ID2D1TransformedGeometry*, HRESULT)).call(sourcegeometry, transform, transformedgeometry)
  end
  def create_path_geometry(pathgeometry : ID2D1PathGeometry*) : HRESULT
    @lpVtbl.value.create_path_geometry.unsafe_as(Proc(ID2D1PathGeometry*, HRESULT)).call(pathgeometry)
  end
  def create_stroke_style(strokestyleproperties : D2D1_STROKE_STYLE_PROPERTIES*, dashes : Float32*, dashescount : UInt32, strokestyle : ID2D1StrokeStyle*) : HRESULT
    @lpVtbl.value.create_stroke_style.unsafe_as(Proc(D2D1_STROKE_STYLE_PROPERTIES*, Float32*, UInt32, ID2D1StrokeStyle*, HRESULT)).call(strokestyleproperties, dashes, dashescount, strokestyle)
  end
  def create_drawing_state_block(drawingstatedescription : D2D1_DRAWING_STATE_DESCRIPTION*, textrenderingparams : IDWriteRenderingParams, drawingstateblock : ID2D1DrawingStateBlock*) : HRESULT
    @lpVtbl.value.create_drawing_state_block.unsafe_as(Proc(D2D1_DRAWING_STATE_DESCRIPTION*, IDWriteRenderingParams, ID2D1DrawingStateBlock*, HRESULT)).call(drawingstatedescription, textrenderingparams, drawingstateblock)
  end
  def create_wic_bitmap_render_target(target : IWICBitmap, rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, rendertarget : ID2D1RenderTarget*) : HRESULT
    @lpVtbl.value.create_wic_bitmap_render_target.unsafe_as(Proc(IWICBitmap, D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget*, HRESULT)).call(target, rendertargetproperties, rendertarget)
  end
  def create_hwnd_render_target(rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, hwndrendertargetproperties : D2D1_HWND_RENDER_TARGET_PROPERTIES*, hwndrendertarget : ID2D1HwndRenderTarget*) : HRESULT
    @lpVtbl.value.create_hwnd_render_target.unsafe_as(Proc(D2D1_RENDER_TARGET_PROPERTIES*, D2D1_HWND_RENDER_TARGET_PROPERTIES*, ID2D1HwndRenderTarget*, HRESULT)).call(rendertargetproperties, hwndrendertargetproperties, hwndrendertarget)
  end
  def create_dxgi_surface_render_target(dxgisurface : IDXGISurface, rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, rendertarget : ID2D1RenderTarget*) : HRESULT
    @lpVtbl.value.create_dxgi_surface_render_target.unsafe_as(Proc(IDXGISurface, D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget*, HRESULT)).call(dxgisurface, rendertargetproperties, rendertarget)
  end
  def create_dc_render_target(rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, dcrendertarget : ID2D1DCRenderTarget*) : HRESULT
    @lpVtbl.value.create_dc_render_target.unsafe_as(Proc(D2D1_RENDER_TARGET_PROPERTIES*, ID2D1DCRenderTarget*, HRESULT)).call(rendertargetproperties, dcrendertarget)
  end
  def create_device(dxgidevice : IDXGIDevice, d2ddevice : ID2D1Device*) : HRESULT
    @lpVtbl.value.create_device.unsafe_as(Proc(IDXGIDevice, ID2D1Device*, HRESULT)).call(dxgidevice, d2ddevice)
  end
  def create_stroke_style2(strokestyleproperties : D2D1_STROKE_STYLE_PROPERTIES1*, dashes : Float32*, dashescount : UInt32, strokestyle : ID2D1StrokeStyle1*) : HRESULT
    @lpVtbl.value.create_stroke_style2.unsafe_as(Proc(D2D1_STROKE_STYLE_PROPERTIES1*, Float32*, UInt32, ID2D1StrokeStyle1*, HRESULT)).call(strokestyleproperties, dashes, dashescount, strokestyle)
  end
  def create_path_geometry2(pathgeometry : ID2D1PathGeometry1*) : HRESULT
    @lpVtbl.value.create_path_geometry2.unsafe_as(Proc(ID2D1PathGeometry1*, HRESULT)).call(pathgeometry)
  end
  def create_drawing_state_block2(drawingstatedescription : D2D1_DRAWING_STATE_DESCRIPTION1*, textrenderingparams : IDWriteRenderingParams, drawingstateblock : ID2D1DrawingStateBlock1*) : HRESULT
    @lpVtbl.value.create_drawing_state_block2.unsafe_as(Proc(D2D1_DRAWING_STATE_DESCRIPTION1*, IDWriteRenderingParams, ID2D1DrawingStateBlock1*, HRESULT)).call(drawingstatedescription, textrenderingparams, drawingstateblock)
  end
  def create_gdi_metafile(metafilestream : IStream, metafile : ID2D1GdiMetafile*) : HRESULT
    @lpVtbl.value.create_gdi_metafile.unsafe_as(Proc(IStream, ID2D1GdiMetafile*, HRESULT)).call(metafilestream, metafile)
  end
  def register_effect_from_stream(classid : Guid*, propertyxml : IStream, bindings : D2D1_PROPERTY_BINDING*, bindingscount : UInt32, effectfactory : PD2D1_EFFECT_FACTORY) : HRESULT
    @lpVtbl.value.register_effect_from_stream.unsafe_as(Proc(Guid*, IStream, D2D1_PROPERTY_BINDING*, UInt32, PD2D1_EFFECT_FACTORY, HRESULT)).call(classid, propertyxml, bindings, bindingscount, effectfactory)
  end
  def register_effect_from_string(classid : Guid*, propertyxml : LibC::LPWSTR, bindings : D2D1_PROPERTY_BINDING*, bindingscount : UInt32, effectfactory : PD2D1_EFFECT_FACTORY) : HRESULT
    @lpVtbl.value.register_effect_from_string.unsafe_as(Proc(Guid*, LibC::LPWSTR, D2D1_PROPERTY_BINDING*, UInt32, PD2D1_EFFECT_FACTORY, HRESULT)).call(classid, propertyxml, bindings, bindingscount, effectfactory)
  end
  def unregister_effect(classid : Guid*) : HRESULT
    @lpVtbl.value.unregister_effect.unsafe_as(Proc(Guid*, HRESULT)).call(classid)
  end
  def get_registered_effects(effects : Guid*, effectscount : UInt32, effectsreturned : UInt32*, effectsregistered : UInt32*) : HRESULT
    @lpVtbl.value.get_registered_effects.unsafe_as(Proc(Guid*, UInt32, UInt32*, UInt32*, HRESULT)).call(effects, effectscount, effectsreturned, effectsregistered)
  end
  def get_effect_properties(effectid : Guid*, properties : ID2D1Properties*) : HRESULT
    @lpVtbl.value.get_effect_properties.unsafe_as(Proc(Guid*, ID2D1Properties*, HRESULT)).call(effectid, properties)
  end
  def create_device2(dxgidevice : IDXGIDevice, d2ddevice1 : ID2D1Device1*) : HRESULT
    @lpVtbl.value.create_device2.unsafe_as(Proc(IDXGIDevice, ID2D1Device1*, HRESULT)).call(dxgidevice, d2ddevice1)
  end
  def create_device3(dxgidevice : IDXGIDevice, d2ddevice2 : ID2D1Device2*) : HRESULT
    @lpVtbl.value.create_device3.unsafe_as(Proc(IDXGIDevice, ID2D1Device2*, HRESULT)).call(dxgidevice, d2ddevice2)
  end
end
struct LibWin32::ID2D1CommandSink2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def begin_draw : HRESULT
    @lpVtbl.value.begin_draw.unsafe_as(Proc(HRESULT)).call
  end
  def end_draw : HRESULT
    @lpVtbl.value.end_draw.unsafe_as(Proc(HRESULT)).call
  end
  def set_antialias_mode(antialiasmode : D2D1_ANTIALIAS_MODE) : HRESULT
    @lpVtbl.value.set_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE, HRESULT)).call(antialiasmode)
  end
  def set_tags(tag1 : UInt64, tag2 : UInt64) : HRESULT
    @lpVtbl.value.set_tags.unsafe_as(Proc(UInt64, UInt64, HRESULT)).call(tag1, tag2)
  end
  def set_text_antialias_mode(textantialiasmode : D2D1_TEXT_ANTIALIAS_MODE) : HRESULT
    @lpVtbl.value.set_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE, HRESULT)).call(textantialiasmode)
  end
  def set_text_rendering_params(textrenderingparams : IDWriteRenderingParams) : HRESULT
    @lpVtbl.value.set_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams, HRESULT)).call(textrenderingparams)
  end
  def set_transform(transform : D2D_MATRIX_3X2_F*) : HRESULT
    @lpVtbl.value.set_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, HRESULT)).call(transform)
  end
  def set_primitive_blend(primitiveblend : D2D1_PRIMITIVE_BLEND) : HRESULT
    @lpVtbl.value.set_primitive_blend.unsafe_as(Proc(D2D1_PRIMITIVE_BLEND, HRESULT)).call(primitiveblend)
  end
  def set_unit_mode(unitmode : D2D1_UNIT_MODE) : HRESULT
    @lpVtbl.value.set_unit_mode.unsafe_as(Proc(D2D1_UNIT_MODE, HRESULT)).call(unitmode)
  end
  def clear(color : D2D1_COLOR_F*) : HRESULT
    @lpVtbl.value.clear.unsafe_as(Proc(D2D1_COLOR_F*, HRESULT)).call(color)
  end
  def draw_glyph_run(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, glyphrundescription : DWRITE_GLYPH_RUN_DESCRIPTION*, foregroundbrush : ID2D1Brush, measuringmode : DWRITE_MEASURING_MODE) : HRESULT
    @lpVtbl.value.draw_glyph_run.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush, DWRITE_MEASURING_MODE, HRESULT)).call(baselineorigin, glyphrun, glyphrundescription, foregroundbrush, measuringmode)
  end
  def draw_line(point0 : D2D_POINT_2F, point1 : D2D_POINT_2F, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : HRESULT
    @lpVtbl.value.draw_line.unsafe_as(Proc(D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush, Float32, ID2D1StrokeStyle, HRESULT)).call(point0, point1, brush, strokewidth, strokestyle)
  end
  def draw_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : HRESULT
    @lpVtbl.value.draw_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, Float32, ID2D1StrokeStyle, HRESULT)).call(geometry, brush, strokewidth, strokestyle)
  end
  def draw_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : HRESULT
    @lpVtbl.value.draw_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Float32, ID2D1StrokeStyle, HRESULT)).call(rect, brush, strokewidth, strokestyle)
  end
  def draw_bitmap(bitmap : ID2D1Bitmap, destinationrectangle : D2D_RECT_F*, opacity : Float32, interpolationmode : D2D1_INTERPOLATION_MODE, sourcerectangle : D2D_RECT_F*, perspectivetransform : D2D_MATRIX_4X4_F*) : HRESULT
    @lpVtbl.value.draw_bitmap.unsafe_as(Proc(ID2D1Bitmap, D2D_RECT_F*, Float32, D2D1_INTERPOLATION_MODE, D2D_RECT_F*, D2D_MATRIX_4X4_F*, HRESULT)).call(bitmap, destinationrectangle, opacity, interpolationmode, sourcerectangle, perspectivetransform)
  end
  def draw_image(image : ID2D1Image, targetoffset : D2D_POINT_2F*, imagerectangle : D2D_RECT_F*, interpolationmode : D2D1_INTERPOLATION_MODE, compositemode : D2D1_COMPOSITE_MODE) : HRESULT
    @lpVtbl.value.draw_image.unsafe_as(Proc(ID2D1Image, D2D_POINT_2F*, D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE, HRESULT)).call(image, targetoffset, imagerectangle, interpolationmode, compositemode)
  end
  def draw_gdi_metafile(gdimetafile : ID2D1GdiMetafile, targetoffset : D2D_POINT_2F*) : HRESULT
    @lpVtbl.value.draw_gdi_metafile.unsafe_as(Proc(ID2D1GdiMetafile, D2D_POINT_2F*, HRESULT)).call(gdimetafile, targetoffset)
  end
  def fill_mesh(mesh : ID2D1Mesh, brush : ID2D1Brush) : HRESULT
    @lpVtbl.value.fill_mesh.unsafe_as(Proc(ID2D1Mesh, ID2D1Brush, HRESULT)).call(mesh, brush)
  end
  def fill_opacity_mask(opacitymask : ID2D1Bitmap, brush : ID2D1Brush, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.fill_opacity_mask.unsafe_as(Proc(ID2D1Bitmap, ID2D1Brush, D2D_RECT_F*, D2D_RECT_F*, HRESULT)).call(opacitymask, brush, destinationrectangle, sourcerectangle)
  end
  def fill_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, opacitybrush : ID2D1Brush) : HRESULT
    @lpVtbl.value.fill_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, ID2D1Brush, HRESULT)).call(geometry, brush, opacitybrush)
  end
  def fill_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush) : HRESULT
    @lpVtbl.value.fill_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, HRESULT)).call(rect, brush)
  end
  def push_axis_aligned_clip(cliprect : D2D_RECT_F*, antialiasmode : D2D1_ANTIALIAS_MODE) : HRESULT
    @lpVtbl.value.push_axis_aligned_clip.unsafe_as(Proc(D2D_RECT_F*, D2D1_ANTIALIAS_MODE, HRESULT)).call(cliprect, antialiasmode)
  end
  def push_layer(layerparameters1 : D2D1_LAYER_PARAMETERS1*, layer : ID2D1Layer) : HRESULT
    @lpVtbl.value.push_layer.unsafe_as(Proc(D2D1_LAYER_PARAMETERS1*, ID2D1Layer, HRESULT)).call(layerparameters1, layer)
  end
  def pop_axis_aligned_clip : HRESULT
    @lpVtbl.value.pop_axis_aligned_clip.unsafe_as(Proc(HRESULT)).call
  end
  def pop_layer : HRESULT
    @lpVtbl.value.pop_layer.unsafe_as(Proc(HRESULT)).call
  end
  def set_primitive_blend1(primitiveblend : D2D1_PRIMITIVE_BLEND) : HRESULT
    @lpVtbl.value.set_primitive_blend1.unsafe_as(Proc(D2D1_PRIMITIVE_BLEND, HRESULT)).call(primitiveblend)
  end
  def draw_ink(ink : ID2D1Ink, brush : ID2D1Brush, inkstyle : ID2D1InkStyle) : HRESULT
    @lpVtbl.value.draw_ink.unsafe_as(Proc(ID2D1Ink, ID2D1Brush, ID2D1InkStyle, HRESULT)).call(ink, brush, inkstyle)
  end
  def draw_gradient_mesh(gradientmesh : ID2D1GradientMesh) : HRESULT
    @lpVtbl.value.draw_gradient_mesh.unsafe_as(Proc(ID2D1GradientMesh, HRESULT)).call(gradientmesh)
  end
  def draw_gdi_metafile2(gdimetafile : ID2D1GdiMetafile, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.draw_gdi_metafile2.unsafe_as(Proc(ID2D1GdiMetafile, D2D_RECT_F*, D2D_RECT_F*, HRESULT)).call(gdimetafile, destinationrectangle, sourcerectangle)
  end
end
struct LibWin32::ID2D1GdiMetafile1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def stream(sink : ID2D1GdiMetafileSink) : HRESULT
    @lpVtbl.value.stream.unsafe_as(Proc(ID2D1GdiMetafileSink, HRESULT)).call(sink)
  end
  def get_bounds(bounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_bounds.unsafe_as(Proc(D2D_RECT_F*, HRESULT)).call(bounds)
  end
  def get_dpi(dpix : Float32*, dpiy : Float32*) : HRESULT
    @lpVtbl.value.get_dpi.unsafe_as(Proc(Float32*, Float32*, HRESULT)).call(dpix, dpiy)
  end
  def get_source_bounds(bounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_source_bounds.unsafe_as(Proc(D2D_RECT_F*, HRESULT)).call(bounds)
  end
end
struct LibWin32::ID2D1GdiMetafileSink1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def process_record(recordtype : UInt32, recorddata : Void*, recorddatasize : UInt32) : HRESULT
    @lpVtbl.value.process_record.unsafe_as(Proc(UInt32, Void*, UInt32, HRESULT)).call(recordtype, recorddata, recorddatasize)
  end
  def process_record2(recordtype : UInt32, recorddata : Void*, recorddatasize : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.process_record2.unsafe_as(Proc(UInt32, Void*, UInt32, UInt32, HRESULT)).call(recordtype, recorddata, recorddatasize, flags)
  end
end
struct LibWin32::ID2D1SpriteBatch
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def add_sprites(spritecount : UInt32, destinationrectangles : D2D_RECT_F*, sourcerectangles : D2D_RECT_U*, colors : D2D1_COLOR_F*, transforms : D2D_MATRIX_3X2_F*, destinationrectanglesstride : UInt32, sourcerectanglesstride : UInt32, colorsstride : UInt32, transformsstride : UInt32) : HRESULT
    @lpVtbl.value.add_sprites.unsafe_as(Proc(UInt32, D2D_RECT_F*, D2D_RECT_U*, D2D1_COLOR_F*, D2D_MATRIX_3X2_F*, UInt32, UInt32, UInt32, UInt32, HRESULT)).call(spritecount, destinationrectangles, sourcerectangles, colors, transforms, destinationrectanglesstride, sourcerectanglesstride, colorsstride, transformsstride)
  end
  def set_sprites(startindex : UInt32, spritecount : UInt32, destinationrectangles : D2D_RECT_F*, sourcerectangles : D2D_RECT_U*, colors : D2D1_COLOR_F*, transforms : D2D_MATRIX_3X2_F*, destinationrectanglesstride : UInt32, sourcerectanglesstride : UInt32, colorsstride : UInt32, transformsstride : UInt32) : HRESULT
    @lpVtbl.value.set_sprites.unsafe_as(Proc(UInt32, UInt32, D2D_RECT_F*, D2D_RECT_U*, D2D1_COLOR_F*, D2D_MATRIX_3X2_F*, UInt32, UInt32, UInt32, UInt32, HRESULT)).call(startindex, spritecount, destinationrectangles, sourcerectangles, colors, transforms, destinationrectanglesstride, sourcerectanglesstride, colorsstride, transformsstride)
  end
  def get_sprites(startindex : UInt32, spritecount : UInt32, destinationrectangles : D2D_RECT_F*, sourcerectangles : D2D_RECT_U*, colors : D2D1_COLOR_F*, transforms : D2D_MATRIX_3X2_F*) : HRESULT
    @lpVtbl.value.get_sprites.unsafe_as(Proc(UInt32, UInt32, D2D_RECT_F*, D2D_RECT_U*, D2D1_COLOR_F*, D2D_MATRIX_3X2_F*, HRESULT)).call(startindex, spritecount, destinationrectangles, sourcerectangles, colors, transforms)
  end
  def get_sprite_count : UInt32
    @lpVtbl.value.get_sprite_count.unsafe_as(Proc(UInt32)).call
  end
  def clear : Void
    @lpVtbl.value.clear.unsafe_as(Proc(Void)).call
  end
end
struct LibWin32::ID2D1DeviceContext3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def create_bitmap(size : D2D_SIZE_U, srcdata : Void*, pitch : UInt32, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_bitmap.unsafe_as(Proc(D2D_SIZE_U, Void*, UInt32, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(size, srcdata, pitch, bitmapproperties, bitmap)
  end
  def create_bitmap_from_wic_bitmap(wicbitmapsource : IWICBitmapSource, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_bitmap_from_wic_bitmap.unsafe_as(Proc(IWICBitmapSource, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(wicbitmapsource, bitmapproperties, bitmap)
  end
  def create_shared_bitmap(riid : Guid*, data : Void*, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_shared_bitmap.unsafe_as(Proc(Guid*, Void*, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(riid, data, bitmapproperties, bitmap)
  end
  def create_bitmap_brush(bitmap : ID2D1Bitmap, bitmapbrushproperties : D2D1_BITMAP_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, bitmapbrush : ID2D1BitmapBrush*) : HRESULT
    @lpVtbl.value.create_bitmap_brush.unsafe_as(Proc(ID2D1Bitmap, D2D1_BITMAP_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush*, HRESULT)).call(bitmap, bitmapbrushproperties, brushproperties, bitmapbrush)
  end
  def create_solid_color_brush(color : D2D1_COLOR_F*, brushproperties : D2D1_BRUSH_PROPERTIES*, solidcolorbrush : ID2D1SolidColorBrush*) : HRESULT
    @lpVtbl.value.create_solid_color_brush.unsafe_as(Proc(D2D1_COLOR_F*, D2D1_BRUSH_PROPERTIES*, ID2D1SolidColorBrush*, HRESULT)).call(color, brushproperties, solidcolorbrush)
  end
  def create_gradient_stop_collection(gradientstops : D2D1_GRADIENT_STOP*, gradientstopscount : UInt32, colorinterpolationgamma : D2D1_GAMMA, extendmode : D2D1_EXTEND_MODE, gradientstopcollection : ID2D1GradientStopCollection*) : HRESULT
    @lpVtbl.value.create_gradient_stop_collection.unsafe_as(Proc(D2D1_GRADIENT_STOP*, UInt32, D2D1_GAMMA, D2D1_EXTEND_MODE, ID2D1GradientStopCollection*, HRESULT)).call(gradientstops, gradientstopscount, colorinterpolationgamma, extendmode, gradientstopcollection)
  end
  def create_linear_gradient_brush(lineargradientbrushproperties : D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, gradientstopcollection : ID2D1GradientStopCollection, lineargradientbrush : ID2D1LinearGradientBrush*) : HRESULT
    @lpVtbl.value.create_linear_gradient_brush.unsafe_as(Proc(D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection, ID2D1LinearGradientBrush*, HRESULT)).call(lineargradientbrushproperties, brushproperties, gradientstopcollection, lineargradientbrush)
  end
  def create_radial_gradient_brush(radialgradientbrushproperties : D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, gradientstopcollection : ID2D1GradientStopCollection, radialgradientbrush : ID2D1RadialGradientBrush*) : HRESULT
    @lpVtbl.value.create_radial_gradient_brush.unsafe_as(Proc(D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection, ID2D1RadialGradientBrush*, HRESULT)).call(radialgradientbrushproperties, brushproperties, gradientstopcollection, radialgradientbrush)
  end
  def create_compatible_render_target(desiredsize : D2D_SIZE_F*, desiredpixelsize : D2D_SIZE_U*, desiredformat : D2D1_PIXEL_FORMAT*, options : D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, bitmaprendertarget : ID2D1BitmapRenderTarget*) : HRESULT
    @lpVtbl.value.create_compatible_render_target.unsafe_as(Proc(D2D_SIZE_F*, D2D_SIZE_U*, D2D1_PIXEL_FORMAT*, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, ID2D1BitmapRenderTarget*, HRESULT)).call(desiredsize, desiredpixelsize, desiredformat, options, bitmaprendertarget)
  end
  def create_layer(size : D2D_SIZE_F*, layer : ID2D1Layer*) : HRESULT
    @lpVtbl.value.create_layer.unsafe_as(Proc(D2D_SIZE_F*, ID2D1Layer*, HRESULT)).call(size, layer)
  end
  def create_mesh(mesh : ID2D1Mesh*) : HRESULT
    @lpVtbl.value.create_mesh.unsafe_as(Proc(ID2D1Mesh*, HRESULT)).call(mesh)
  end
  def draw_line(point0 : D2D_POINT_2F, point1 : D2D_POINT_2F, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_line.unsafe_as(Proc(D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(point0, point1, brush, strokewidth, strokestyle)
  end
  def draw_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(rect, brush, strokewidth, strokestyle)
  end
  def fill_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Void)).call(rect, brush)
  end
  def draw_rounded_rectangle(roundedrect : D2D1_ROUNDED_RECT*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_rounded_rectangle.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(roundedrect, brush, strokewidth, strokestyle)
  end
  def fill_rounded_rectangle(roundedrect : D2D1_ROUNDED_RECT*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_rounded_rectangle.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1Brush, Void)).call(roundedrect, brush)
  end
  def draw_ellipse(ellipse : D2D1_ELLIPSE*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_ellipse.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(ellipse, brush, strokewidth, strokestyle)
  end
  def fill_ellipse(ellipse : D2D1_ELLIPSE*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_ellipse.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1Brush, Void)).call(ellipse, brush)
  end
  def draw_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(geometry, brush, strokewidth, strokestyle)
  end
  def fill_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, opacitybrush : ID2D1Brush) : Void
    @lpVtbl.value.fill_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, ID2D1Brush, Void)).call(geometry, brush, opacitybrush)
  end
  def fill_mesh(mesh : ID2D1Mesh, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_mesh.unsafe_as(Proc(ID2D1Mesh, ID2D1Brush, Void)).call(mesh, brush)
  end
  def fill_opacity_mask(opacitymask : ID2D1Bitmap, brush : ID2D1Brush, content : D2D1_OPACITY_MASK_CONTENT, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.fill_opacity_mask.unsafe_as(Proc(ID2D1Bitmap, ID2D1Brush, D2D1_OPACITY_MASK_CONTENT, D2D_RECT_F*, D2D_RECT_F*, Void)).call(opacitymask, brush, content, destinationrectangle, sourcerectangle)
  end
  def draw_bitmap(bitmap : ID2D1Bitmap, destinationrectangle : D2D_RECT_F*, opacity : Float32, interpolationmode : D2D1_BITMAP_INTERPOLATION_MODE, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.draw_bitmap.unsafe_as(Proc(ID2D1Bitmap, D2D_RECT_F*, Float32, D2D1_BITMAP_INTERPOLATION_MODE, D2D_RECT_F*, Void)).call(bitmap, destinationrectangle, opacity, interpolationmode, sourcerectangle)
  end
  def draw_text(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, layoutrect : D2D_RECT_F*, defaultfillbrush : ID2D1Brush, options : D2D1_DRAW_TEXT_OPTIONS, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_text.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, D2D_RECT_F*, ID2D1Brush, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE, Void)).call(string, stringlength, textformat, layoutrect, defaultfillbrush, options, measuringmode)
  end
  def draw_text_layout(origin : D2D_POINT_2F, textlayout : IDWriteTextLayout, defaultfillbrush : ID2D1Brush, options : D2D1_DRAW_TEXT_OPTIONS) : Void
    @lpVtbl.value.draw_text_layout.unsafe_as(Proc(D2D_POINT_2F, IDWriteTextLayout, ID2D1Brush, D2D1_DRAW_TEXT_OPTIONS, Void)).call(origin, textlayout, defaultfillbrush, options)
  end
  def draw_glyph_run(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, foregroundbrush : ID2D1Brush, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_glyph_run.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, ID2D1Brush, DWRITE_MEASURING_MODE, Void)).call(baselineorigin, glyphrun, foregroundbrush, measuringmode)
  end
  def set_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.set_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def get_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.get_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def set_antialias_mode(antialiasmode : D2D1_ANTIALIAS_MODE) : Void
    @lpVtbl.value.set_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE, Void)).call(antialiasmode)
  end
  def get_antialias_mode : D2D1_ANTIALIAS_MODE
    @lpVtbl.value.get_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE)).call
  end
  def set_text_antialias_mode(textantialiasmode : D2D1_TEXT_ANTIALIAS_MODE) : Void
    @lpVtbl.value.set_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE, Void)).call(textantialiasmode)
  end
  def get_text_antialias_mode : D2D1_TEXT_ANTIALIAS_MODE
    @lpVtbl.value.get_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE)).call
  end
  def set_text_rendering_params(textrenderingparams : IDWriteRenderingParams) : Void
    @lpVtbl.value.set_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams, Void)).call(textrenderingparams)
  end
  def get_text_rendering_params(textrenderingparams : IDWriteRenderingParams*) : Void
    @lpVtbl.value.get_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams*, Void)).call(textrenderingparams)
  end
  def set_tags(tag1 : UInt64, tag2 : UInt64) : Void
    @lpVtbl.value.set_tags.unsafe_as(Proc(UInt64, UInt64, Void)).call(tag1, tag2)
  end
  def get_tags(tag1 : UInt64*, tag2 : UInt64*) : Void
    @lpVtbl.value.get_tags.unsafe_as(Proc(UInt64*, UInt64*, Void)).call(tag1, tag2)
  end
  def push_layer(layerparameters : D2D1_LAYER_PARAMETERS*, layer : ID2D1Layer) : Void
    @lpVtbl.value.push_layer.unsafe_as(Proc(D2D1_LAYER_PARAMETERS*, ID2D1Layer, Void)).call(layerparameters, layer)
  end
  def pop_layer : Void
    @lpVtbl.value.pop_layer.unsafe_as(Proc(Void)).call
  end
  def flush(tag1 : UInt64*, tag2 : UInt64*) : HRESULT
    @lpVtbl.value.flush.unsafe_as(Proc(UInt64*, UInt64*, HRESULT)).call(tag1, tag2)
  end
  def save_drawing_state(drawingstateblock : ID2D1DrawingStateBlock) : Void
    @lpVtbl.value.save_drawing_state.unsafe_as(Proc(ID2D1DrawingStateBlock, Void)).call(drawingstateblock)
  end
  def restore_drawing_state(drawingstateblock : ID2D1DrawingStateBlock) : Void
    @lpVtbl.value.restore_drawing_state.unsafe_as(Proc(ID2D1DrawingStateBlock, Void)).call(drawingstateblock)
  end
  def push_axis_aligned_clip(cliprect : D2D_RECT_F*, antialiasmode : D2D1_ANTIALIAS_MODE) : Void
    @lpVtbl.value.push_axis_aligned_clip.unsafe_as(Proc(D2D_RECT_F*, D2D1_ANTIALIAS_MODE, Void)).call(cliprect, antialiasmode)
  end
  def pop_axis_aligned_clip : Void
    @lpVtbl.value.pop_axis_aligned_clip.unsafe_as(Proc(Void)).call
  end
  def clear(clearcolor : D2D1_COLOR_F*) : Void
    @lpVtbl.value.clear.unsafe_as(Proc(D2D1_COLOR_F*, Void)).call(clearcolor)
  end
  def begin_draw : Void
    @lpVtbl.value.begin_draw.unsafe_as(Proc(Void)).call
  end
  def end_draw(tag1 : UInt64*, tag2 : UInt64*) : HRESULT
    @lpVtbl.value.end_draw.unsafe_as(Proc(UInt64*, UInt64*, HRESULT)).call(tag1, tag2)
  end
  def get_pixel_format : D2D1_PIXEL_FORMAT
    @lpVtbl.value.get_pixel_format.unsafe_as(Proc(D2D1_PIXEL_FORMAT)).call
  end
  def set_dpi(dpix : Float32, dpiy : Float32) : Void
    @lpVtbl.value.set_dpi.unsafe_as(Proc(Float32, Float32, Void)).call(dpix, dpiy)
  end
  def get_dpi(dpix : Float32*, dpiy : Float32*) : Void
    @lpVtbl.value.get_dpi.unsafe_as(Proc(Float32*, Float32*, Void)).call(dpix, dpiy)
  end
  def get_size : D2D_SIZE_F
    @lpVtbl.value.get_size.unsafe_as(Proc(D2D_SIZE_F)).call
  end
  def get_pixel_size : D2D_SIZE_U
    @lpVtbl.value.get_pixel_size.unsafe_as(Proc(D2D_SIZE_U)).call
  end
  def get_maximum_bitmap_size : UInt32
    @lpVtbl.value.get_maximum_bitmap_size.unsafe_as(Proc(UInt32)).call
  end
  def is_supported(rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*) : LibC::BOOL
    @lpVtbl.value.is_supported.unsafe_as(Proc(D2D1_RENDER_TARGET_PROPERTIES*, LibC::BOOL)).call(rendertargetproperties)
  end
  def create_bitmap2(size : D2D_SIZE_U, sourcedata : Void*, pitch : UInt32, bitmapproperties : D2D1_BITMAP_PROPERTIES1*, bitmap : ID2D1Bitmap1*) : HRESULT
    @lpVtbl.value.create_bitmap2.unsafe_as(Proc(D2D_SIZE_U, Void*, UInt32, D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1*, HRESULT)).call(size, sourcedata, pitch, bitmapproperties, bitmap)
  end
  def create_bitmap_from_wic_bitmap2(wicbitmapsource : IWICBitmapSource, bitmapproperties : D2D1_BITMAP_PROPERTIES1*, bitmap : ID2D1Bitmap1*) : HRESULT
    @lpVtbl.value.create_bitmap_from_wic_bitmap2.unsafe_as(Proc(IWICBitmapSource, D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1*, HRESULT)).call(wicbitmapsource, bitmapproperties, bitmap)
  end
  def create_color_context(space : D2D1_COLOR_SPACE, profile : UInt8*, profilesize : UInt32, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context.unsafe_as(Proc(D2D1_COLOR_SPACE, UInt8*, UInt32, ID2D1ColorContext*, HRESULT)).call(space, profile, profilesize, colorcontext)
  end
  def create_color_context_from_filename(filename : LibC::LPWSTR, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context_from_filename.unsafe_as(Proc(LibC::LPWSTR, ID2D1ColorContext*, HRESULT)).call(filename, colorcontext)
  end
  def create_color_context_from_wic_color_context(wiccolorcontext : IWICColorContext, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context_from_wic_color_context.unsafe_as(Proc(IWICColorContext, ID2D1ColorContext*, HRESULT)).call(wiccolorcontext, colorcontext)
  end
  def create_bitmap_from_dxgi_surface(surface : IDXGISurface, bitmapproperties : D2D1_BITMAP_PROPERTIES1*, bitmap : ID2D1Bitmap1*) : HRESULT
    @lpVtbl.value.create_bitmap_from_dxgi_surface.unsafe_as(Proc(IDXGISurface, D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1*, HRESULT)).call(surface, bitmapproperties, bitmap)
  end
  def create_effect(effectid : Guid*, effect : ID2D1Effect*) : HRESULT
    @lpVtbl.value.create_effect.unsafe_as(Proc(Guid*, ID2D1Effect*, HRESULT)).call(effectid, effect)
  end
  def create_gradient_stop_collection2(straightalphagradientstops : D2D1_GRADIENT_STOP*, straightalphagradientstopscount : UInt32, preinterpolationspace : D2D1_COLOR_SPACE, postinterpolationspace : D2D1_COLOR_SPACE, bufferprecision : D2D1_BUFFER_PRECISION, extendmode : D2D1_EXTEND_MODE, colorinterpolationmode : D2D1_COLOR_INTERPOLATION_MODE, gradientstopcollection1 : ID2D1GradientStopCollection1*) : HRESULT
    @lpVtbl.value.create_gradient_stop_collection2.unsafe_as(Proc(D2D1_GRADIENT_STOP*, UInt32, D2D1_COLOR_SPACE, D2D1_COLOR_SPACE, D2D1_BUFFER_PRECISION, D2D1_EXTEND_MODE, D2D1_COLOR_INTERPOLATION_MODE, ID2D1GradientStopCollection1*, HRESULT)).call(straightalphagradientstops, straightalphagradientstopscount, preinterpolationspace, postinterpolationspace, bufferprecision, extendmode, colorinterpolationmode, gradientstopcollection1)
  end
  def create_image_brush(image : ID2D1Image, imagebrushproperties : D2D1_IMAGE_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, imagebrush : ID2D1ImageBrush*) : HRESULT
    @lpVtbl.value.create_image_brush.unsafe_as(Proc(ID2D1Image, D2D1_IMAGE_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1ImageBrush*, HRESULT)).call(image, imagebrushproperties, brushproperties, imagebrush)
  end
  def create_bitmap_brush2(bitmap : ID2D1Bitmap, bitmapbrushproperties : D2D1_BITMAP_BRUSH_PROPERTIES1*, brushproperties : D2D1_BRUSH_PROPERTIES*, bitmapbrush : ID2D1BitmapBrush1*) : HRESULT
    @lpVtbl.value.create_bitmap_brush2.unsafe_as(Proc(ID2D1Bitmap, D2D1_BITMAP_BRUSH_PROPERTIES1*, D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush1*, HRESULT)).call(bitmap, bitmapbrushproperties, brushproperties, bitmapbrush)
  end
  def create_command_list(commandlist : ID2D1CommandList*) : HRESULT
    @lpVtbl.value.create_command_list.unsafe_as(Proc(ID2D1CommandList*, HRESULT)).call(commandlist)
  end
  def is_dxgi_format_supported(format : DXGI_FORMAT) : LibC::BOOL
    @lpVtbl.value.is_dxgi_format_supported.unsafe_as(Proc(DXGI_FORMAT, LibC::BOOL)).call(format)
  end
  def is_buffer_precision_supported(bufferprecision : D2D1_BUFFER_PRECISION) : LibC::BOOL
    @lpVtbl.value.is_buffer_precision_supported.unsafe_as(Proc(D2D1_BUFFER_PRECISION, LibC::BOOL)).call(bufferprecision)
  end
  def get_image_local_bounds(image : ID2D1Image, localbounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_image_local_bounds.unsafe_as(Proc(ID2D1Image, D2D_RECT_F*, HRESULT)).call(image, localbounds)
  end
  def get_image_world_bounds(image : ID2D1Image, worldbounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_image_world_bounds.unsafe_as(Proc(ID2D1Image, D2D_RECT_F*, HRESULT)).call(image, worldbounds)
  end
  def get_glyph_run_world_bounds(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, measuringmode : DWRITE_MEASURING_MODE, bounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_glyph_run_world_bounds.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D_RECT_F*, HRESULT)).call(baselineorigin, glyphrun, measuringmode, bounds)
  end
  def get_device(device : ID2D1Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID2D1Device*, Void)).call(device)
  end
  def set_target(image : ID2D1Image) : Void
    @lpVtbl.value.set_target.unsafe_as(Proc(ID2D1Image, Void)).call(image)
  end
  def get_target(image : ID2D1Image*) : Void
    @lpVtbl.value.get_target.unsafe_as(Proc(ID2D1Image*, Void)).call(image)
  end
  def set_rendering_controls(renderingcontrols : D2D1_RENDERING_CONTROLS*) : Void
    @lpVtbl.value.set_rendering_controls.unsafe_as(Proc(D2D1_RENDERING_CONTROLS*, Void)).call(renderingcontrols)
  end
  def get_rendering_controls(renderingcontrols : D2D1_RENDERING_CONTROLS*) : Void
    @lpVtbl.value.get_rendering_controls.unsafe_as(Proc(D2D1_RENDERING_CONTROLS*, Void)).call(renderingcontrols)
  end
  def set_primitive_blend(primitiveblend : D2D1_PRIMITIVE_BLEND) : Void
    @lpVtbl.value.set_primitive_blend.unsafe_as(Proc(D2D1_PRIMITIVE_BLEND, Void)).call(primitiveblend)
  end
  def get_primitive_blend : D2D1_PRIMITIVE_BLEND
    @lpVtbl.value.get_primitive_blend.unsafe_as(Proc(D2D1_PRIMITIVE_BLEND)).call
  end
  def set_unit_mode(unitmode : D2D1_UNIT_MODE) : Void
    @lpVtbl.value.set_unit_mode.unsafe_as(Proc(D2D1_UNIT_MODE, Void)).call(unitmode)
  end
  def get_unit_mode : D2D1_UNIT_MODE
    @lpVtbl.value.get_unit_mode.unsafe_as(Proc(D2D1_UNIT_MODE)).call
  end
  def draw_glyph_run2(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, glyphrundescription : DWRITE_GLYPH_RUN_DESCRIPTION*, foregroundbrush : ID2D1Brush, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_glyph_run2.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush, DWRITE_MEASURING_MODE, Void)).call(baselineorigin, glyphrun, glyphrundescription, foregroundbrush, measuringmode)
  end
  def draw_image(image : ID2D1Image, targetoffset : D2D_POINT_2F*, imagerectangle : D2D_RECT_F*, interpolationmode : D2D1_INTERPOLATION_MODE, compositemode : D2D1_COMPOSITE_MODE) : Void
    @lpVtbl.value.draw_image.unsafe_as(Proc(ID2D1Image, D2D_POINT_2F*, D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE, Void)).call(image, targetoffset, imagerectangle, interpolationmode, compositemode)
  end
  def draw_gdi_metafile(gdimetafile : ID2D1GdiMetafile, targetoffset : D2D_POINT_2F*) : Void
    @lpVtbl.value.draw_gdi_metafile.unsafe_as(Proc(ID2D1GdiMetafile, D2D_POINT_2F*, Void)).call(gdimetafile, targetoffset)
  end
  def draw_bitmap2(bitmap : ID2D1Bitmap, destinationrectangle : D2D_RECT_F*, opacity : Float32, interpolationmode : D2D1_INTERPOLATION_MODE, sourcerectangle : D2D_RECT_F*, perspectivetransform : D2D_MATRIX_4X4_F*) : Void
    @lpVtbl.value.draw_bitmap2.unsafe_as(Proc(ID2D1Bitmap, D2D_RECT_F*, Float32, D2D1_INTERPOLATION_MODE, D2D_RECT_F*, D2D_MATRIX_4X4_F*, Void)).call(bitmap, destinationrectangle, opacity, interpolationmode, sourcerectangle, perspectivetransform)
  end
  def push_layer2(layerparameters : D2D1_LAYER_PARAMETERS1*, layer : ID2D1Layer) : Void
    @lpVtbl.value.push_layer2.unsafe_as(Proc(D2D1_LAYER_PARAMETERS1*, ID2D1Layer, Void)).call(layerparameters, layer)
  end
  def invalidate_effect_input_rectangle(effect : ID2D1Effect, input : UInt32, inputrectangle : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.invalidate_effect_input_rectangle.unsafe_as(Proc(ID2D1Effect, UInt32, D2D_RECT_F*, HRESULT)).call(effect, input, inputrectangle)
  end
  def get_effect_invalid_rectangle_count(effect : ID2D1Effect, rectanglecount : UInt32*) : HRESULT
    @lpVtbl.value.get_effect_invalid_rectangle_count.unsafe_as(Proc(ID2D1Effect, UInt32*, HRESULT)).call(effect, rectanglecount)
  end
  def get_effect_invalid_rectangles(effect : ID2D1Effect, rectangles : D2D_RECT_F*, rectanglescount : UInt32) : HRESULT
    @lpVtbl.value.get_effect_invalid_rectangles.unsafe_as(Proc(ID2D1Effect, D2D_RECT_F*, UInt32, HRESULT)).call(effect, rectangles, rectanglescount)
  end
  def get_effect_required_input_rectangles(rendereffect : ID2D1Effect, renderimagerectangle : D2D_RECT_F*, inputdescriptions : D2D1_EFFECT_INPUT_DESCRIPTION*, requiredinputrects : D2D_RECT_F*, inputcount : UInt32) : HRESULT
    @lpVtbl.value.get_effect_required_input_rectangles.unsafe_as(Proc(ID2D1Effect, D2D_RECT_F*, D2D1_EFFECT_INPUT_DESCRIPTION*, D2D_RECT_F*, UInt32, HRESULT)).call(rendereffect, renderimagerectangle, inputdescriptions, requiredinputrects, inputcount)
  end
  def fill_opacity_mask2(opacitymask : ID2D1Bitmap, brush : ID2D1Brush, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.fill_opacity_mask2.unsafe_as(Proc(ID2D1Bitmap, ID2D1Brush, D2D_RECT_F*, D2D_RECT_F*, Void)).call(opacitymask, brush, destinationrectangle, sourcerectangle)
  end
  def create_filled_geometry_realization(geometry : ID2D1Geometry, flatteningtolerance : Float32, geometryrealization : ID2D1GeometryRealization*) : HRESULT
    @lpVtbl.value.create_filled_geometry_realization.unsafe_as(Proc(ID2D1Geometry, Float32, ID2D1GeometryRealization*, HRESULT)).call(geometry, flatteningtolerance, geometryrealization)
  end
  def create_stroked_geometry_realization(geometry : ID2D1Geometry, flatteningtolerance : Float32, strokewidth : Float32, strokestyle : ID2D1StrokeStyle, geometryrealization : ID2D1GeometryRealization*) : HRESULT
    @lpVtbl.value.create_stroked_geometry_realization.unsafe_as(Proc(ID2D1Geometry, Float32, Float32, ID2D1StrokeStyle, ID2D1GeometryRealization*, HRESULT)).call(geometry, flatteningtolerance, strokewidth, strokestyle, geometryrealization)
  end
  def draw_geometry_realization(geometryrealization : ID2D1GeometryRealization, brush : ID2D1Brush) : Void
    @lpVtbl.value.draw_geometry_realization.unsafe_as(Proc(ID2D1GeometryRealization, ID2D1Brush, Void)).call(geometryrealization, brush)
  end
  def create_ink(startpoint : D2D1_INK_POINT*, ink : ID2D1Ink*) : HRESULT
    @lpVtbl.value.create_ink.unsafe_as(Proc(D2D1_INK_POINT*, ID2D1Ink*, HRESULT)).call(startpoint, ink)
  end
  def create_ink_style(inkstyleproperties : D2D1_INK_STYLE_PROPERTIES*, inkstyle : ID2D1InkStyle*) : HRESULT
    @lpVtbl.value.create_ink_style.unsafe_as(Proc(D2D1_INK_STYLE_PROPERTIES*, ID2D1InkStyle*, HRESULT)).call(inkstyleproperties, inkstyle)
  end
  def create_gradient_mesh(patches : D2D1_GRADIENT_MESH_PATCH*, patchescount : UInt32, gradientmesh : ID2D1GradientMesh*) : HRESULT
    @lpVtbl.value.create_gradient_mesh.unsafe_as(Proc(D2D1_GRADIENT_MESH_PATCH*, UInt32, ID2D1GradientMesh*, HRESULT)).call(patches, patchescount, gradientmesh)
  end
  def create_image_source_from_wic(wicbitmapsource : IWICBitmapSource, loadingoptions : D2D1_IMAGE_SOURCE_LOADING_OPTIONS, alphamode : D2D1_ALPHA_MODE, imagesource : ID2D1ImageSourceFromWic*) : HRESULT
    @lpVtbl.value.create_image_source_from_wic.unsafe_as(Proc(IWICBitmapSource, D2D1_IMAGE_SOURCE_LOADING_OPTIONS, D2D1_ALPHA_MODE, ID2D1ImageSourceFromWic*, HRESULT)).call(wicbitmapsource, loadingoptions, alphamode, imagesource)
  end
  def create_lookup_table3_d(precision : D2D1_BUFFER_PRECISION, extents : UInt32*, data : UInt8*, datacount : UInt32, strides : UInt32*, lookuptable : ID2D1LookupTable3D*) : HRESULT
    @lpVtbl.value.create_lookup_table3_d.unsafe_as(Proc(D2D1_BUFFER_PRECISION, UInt32*, UInt8*, UInt32, UInt32*, ID2D1LookupTable3D*, HRESULT)).call(precision, extents, data, datacount, strides, lookuptable)
  end
  def create_image_source_from_dxgi(surfaces : IDXGISurface*, surfacecount : UInt32, colorspace : DXGI_COLOR_SPACE_TYPE, options : D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, imagesource : ID2D1ImageSource*) : HRESULT
    @lpVtbl.value.create_image_source_from_dxgi.unsafe_as(Proc(IDXGISurface*, UInt32, DXGI_COLOR_SPACE_TYPE, D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, ID2D1ImageSource*, HRESULT)).call(surfaces, surfacecount, colorspace, options, imagesource)
  end
  def get_gradient_mesh_world_bounds(gradientmesh : ID2D1GradientMesh, pbounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_gradient_mesh_world_bounds.unsafe_as(Proc(ID2D1GradientMesh, D2D_RECT_F*, HRESULT)).call(gradientmesh, pbounds)
  end
  def draw_ink(ink : ID2D1Ink, brush : ID2D1Brush, inkstyle : ID2D1InkStyle) : Void
    @lpVtbl.value.draw_ink.unsafe_as(Proc(ID2D1Ink, ID2D1Brush, ID2D1InkStyle, Void)).call(ink, brush, inkstyle)
  end
  def draw_gradient_mesh(gradientmesh : ID2D1GradientMesh) : Void
    @lpVtbl.value.draw_gradient_mesh.unsafe_as(Proc(ID2D1GradientMesh, Void)).call(gradientmesh)
  end
  def draw_gdi_metafile2(gdimetafile : ID2D1GdiMetafile, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.draw_gdi_metafile2.unsafe_as(Proc(ID2D1GdiMetafile, D2D_RECT_F*, D2D_RECT_F*, Void)).call(gdimetafile, destinationrectangle, sourcerectangle)
  end
  def create_transformed_image_source(imagesource : ID2D1ImageSource, properties : D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, transformedimagesource : ID2D1TransformedImageSource*) : HRESULT
    @lpVtbl.value.create_transformed_image_source.unsafe_as(Proc(ID2D1ImageSource, D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, ID2D1TransformedImageSource*, HRESULT)).call(imagesource, properties, transformedimagesource)
  end
  def create_sprite_batch(spritebatch : ID2D1SpriteBatch*) : HRESULT
    @lpVtbl.value.create_sprite_batch.unsafe_as(Proc(ID2D1SpriteBatch*, HRESULT)).call(spritebatch)
  end
  def draw_sprite_batch(spritebatch : ID2D1SpriteBatch, startindex : UInt32, spritecount : UInt32, bitmap : ID2D1Bitmap, interpolationmode : D2D1_BITMAP_INTERPOLATION_MODE, spriteoptions : D2D1_SPRITE_OPTIONS) : Void
    @lpVtbl.value.draw_sprite_batch.unsafe_as(Proc(ID2D1SpriteBatch, UInt32, UInt32, ID2D1Bitmap, D2D1_BITMAP_INTERPOLATION_MODE, D2D1_SPRITE_OPTIONS, Void)).call(spritebatch, startindex, spritecount, bitmap, interpolationmode, spriteoptions)
  end
end
struct LibWin32::ID2D1Device3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def create_device_context(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext : ID2D1DeviceContext*) : HRESULT
    @lpVtbl.value.create_device_context.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext*, HRESULT)).call(options, devicecontext)
  end
  def create_print_control(wicfactory : IWICImagingFactory, documenttarget : IPrintDocumentPackageTarget, printcontrolproperties : D2D1_PRINT_CONTROL_PROPERTIES*, printcontrol : ID2D1PrintControl*) : HRESULT
    @lpVtbl.value.create_print_control.unsafe_as(Proc(IWICImagingFactory, IPrintDocumentPackageTarget, D2D1_PRINT_CONTROL_PROPERTIES*, ID2D1PrintControl*, HRESULT)).call(wicfactory, documenttarget, printcontrolproperties, printcontrol)
  end
  def set_maximum_texture_memory(maximuminbytes : UInt64) : Void
    @lpVtbl.value.set_maximum_texture_memory.unsafe_as(Proc(UInt64, Void)).call(maximuminbytes)
  end
  def get_maximum_texture_memory : UInt64
    @lpVtbl.value.get_maximum_texture_memory.unsafe_as(Proc(UInt64)).call
  end
  def clear_resources(millisecondssinceuse : UInt32) : Void
    @lpVtbl.value.clear_resources.unsafe_as(Proc(UInt32, Void)).call(millisecondssinceuse)
  end
  def get_rendering_priority : D2D1_RENDERING_PRIORITY
    @lpVtbl.value.get_rendering_priority.unsafe_as(Proc(D2D1_RENDERING_PRIORITY)).call
  end
  def set_rendering_priority(renderingpriority : D2D1_RENDERING_PRIORITY) : Void
    @lpVtbl.value.set_rendering_priority.unsafe_as(Proc(D2D1_RENDERING_PRIORITY, Void)).call(renderingpriority)
  end
  def create_device_context2(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext1 : ID2D1DeviceContext1*) : HRESULT
    @lpVtbl.value.create_device_context2.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext1*, HRESULT)).call(options, devicecontext1)
  end
  def create_device_context3(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext2 : ID2D1DeviceContext2*) : HRESULT
    @lpVtbl.value.create_device_context3.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext2*, HRESULT)).call(options, devicecontext2)
  end
  def flush_device_contexts(bitmap : ID2D1Bitmap) : Void
    @lpVtbl.value.flush_device_contexts.unsafe_as(Proc(ID2D1Bitmap, Void)).call(bitmap)
  end
  def get_dxgi_device(dxgidevice : IDXGIDevice*) : HRESULT
    @lpVtbl.value.get_dxgi_device.unsafe_as(Proc(IDXGIDevice*, HRESULT)).call(dxgidevice)
  end
  def create_device_context4(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext3 : ID2D1DeviceContext3*) : HRESULT
    @lpVtbl.value.create_device_context4.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext3*, HRESULT)).call(options, devicecontext3)
  end
end
struct LibWin32::ID2D1Factory4
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def reload_system_metrics : HRESULT
    @lpVtbl.value.reload_system_metrics.unsafe_as(Proc(HRESULT)).call
  end
  def get_desktop_dpi(dpix : Float32*, dpiy : Float32*) : Void
    @lpVtbl.value.get_desktop_dpi.unsafe_as(Proc(Float32*, Float32*, Void)).call(dpix, dpiy)
  end
  def create_rectangle_geometry(rectangle : D2D_RECT_F*, rectanglegeometry : ID2D1RectangleGeometry*) : HRESULT
    @lpVtbl.value.create_rectangle_geometry.unsafe_as(Proc(D2D_RECT_F*, ID2D1RectangleGeometry*, HRESULT)).call(rectangle, rectanglegeometry)
  end
  def create_rounded_rectangle_geometry(roundedrectangle : D2D1_ROUNDED_RECT*, roundedrectanglegeometry : ID2D1RoundedRectangleGeometry*) : HRESULT
    @lpVtbl.value.create_rounded_rectangle_geometry.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1RoundedRectangleGeometry*, HRESULT)).call(roundedrectangle, roundedrectanglegeometry)
  end
  def create_ellipse_geometry(ellipse : D2D1_ELLIPSE*, ellipsegeometry : ID2D1EllipseGeometry*) : HRESULT
    @lpVtbl.value.create_ellipse_geometry.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1EllipseGeometry*, HRESULT)).call(ellipse, ellipsegeometry)
  end
  def create_geometry_group(fillmode : D2D1_FILL_MODE, geometries : ID2D1Geometry*, geometriescount : UInt32, geometrygroup : ID2D1GeometryGroup*) : HRESULT
    @lpVtbl.value.create_geometry_group.unsafe_as(Proc(D2D1_FILL_MODE, ID2D1Geometry*, UInt32, ID2D1GeometryGroup*, HRESULT)).call(fillmode, geometries, geometriescount, geometrygroup)
  end
  def create_transformed_geometry(sourcegeometry : ID2D1Geometry, transform : D2D_MATRIX_3X2_F*, transformedgeometry : ID2D1TransformedGeometry*) : HRESULT
    @lpVtbl.value.create_transformed_geometry.unsafe_as(Proc(ID2D1Geometry, D2D_MATRIX_3X2_F*, ID2D1TransformedGeometry*, HRESULT)).call(sourcegeometry, transform, transformedgeometry)
  end
  def create_path_geometry(pathgeometry : ID2D1PathGeometry*) : HRESULT
    @lpVtbl.value.create_path_geometry.unsafe_as(Proc(ID2D1PathGeometry*, HRESULT)).call(pathgeometry)
  end
  def create_stroke_style(strokestyleproperties : D2D1_STROKE_STYLE_PROPERTIES*, dashes : Float32*, dashescount : UInt32, strokestyle : ID2D1StrokeStyle*) : HRESULT
    @lpVtbl.value.create_stroke_style.unsafe_as(Proc(D2D1_STROKE_STYLE_PROPERTIES*, Float32*, UInt32, ID2D1StrokeStyle*, HRESULT)).call(strokestyleproperties, dashes, dashescount, strokestyle)
  end
  def create_drawing_state_block(drawingstatedescription : D2D1_DRAWING_STATE_DESCRIPTION*, textrenderingparams : IDWriteRenderingParams, drawingstateblock : ID2D1DrawingStateBlock*) : HRESULT
    @lpVtbl.value.create_drawing_state_block.unsafe_as(Proc(D2D1_DRAWING_STATE_DESCRIPTION*, IDWriteRenderingParams, ID2D1DrawingStateBlock*, HRESULT)).call(drawingstatedescription, textrenderingparams, drawingstateblock)
  end
  def create_wic_bitmap_render_target(target : IWICBitmap, rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, rendertarget : ID2D1RenderTarget*) : HRESULT
    @lpVtbl.value.create_wic_bitmap_render_target.unsafe_as(Proc(IWICBitmap, D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget*, HRESULT)).call(target, rendertargetproperties, rendertarget)
  end
  def create_hwnd_render_target(rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, hwndrendertargetproperties : D2D1_HWND_RENDER_TARGET_PROPERTIES*, hwndrendertarget : ID2D1HwndRenderTarget*) : HRESULT
    @lpVtbl.value.create_hwnd_render_target.unsafe_as(Proc(D2D1_RENDER_TARGET_PROPERTIES*, D2D1_HWND_RENDER_TARGET_PROPERTIES*, ID2D1HwndRenderTarget*, HRESULT)).call(rendertargetproperties, hwndrendertargetproperties, hwndrendertarget)
  end
  def create_dxgi_surface_render_target(dxgisurface : IDXGISurface, rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, rendertarget : ID2D1RenderTarget*) : HRESULT
    @lpVtbl.value.create_dxgi_surface_render_target.unsafe_as(Proc(IDXGISurface, D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget*, HRESULT)).call(dxgisurface, rendertargetproperties, rendertarget)
  end
  def create_dc_render_target(rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, dcrendertarget : ID2D1DCRenderTarget*) : HRESULT
    @lpVtbl.value.create_dc_render_target.unsafe_as(Proc(D2D1_RENDER_TARGET_PROPERTIES*, ID2D1DCRenderTarget*, HRESULT)).call(rendertargetproperties, dcrendertarget)
  end
  def create_device(dxgidevice : IDXGIDevice, d2ddevice : ID2D1Device*) : HRESULT
    @lpVtbl.value.create_device.unsafe_as(Proc(IDXGIDevice, ID2D1Device*, HRESULT)).call(dxgidevice, d2ddevice)
  end
  def create_stroke_style2(strokestyleproperties : D2D1_STROKE_STYLE_PROPERTIES1*, dashes : Float32*, dashescount : UInt32, strokestyle : ID2D1StrokeStyle1*) : HRESULT
    @lpVtbl.value.create_stroke_style2.unsafe_as(Proc(D2D1_STROKE_STYLE_PROPERTIES1*, Float32*, UInt32, ID2D1StrokeStyle1*, HRESULT)).call(strokestyleproperties, dashes, dashescount, strokestyle)
  end
  def create_path_geometry2(pathgeometry : ID2D1PathGeometry1*) : HRESULT
    @lpVtbl.value.create_path_geometry2.unsafe_as(Proc(ID2D1PathGeometry1*, HRESULT)).call(pathgeometry)
  end
  def create_drawing_state_block2(drawingstatedescription : D2D1_DRAWING_STATE_DESCRIPTION1*, textrenderingparams : IDWriteRenderingParams, drawingstateblock : ID2D1DrawingStateBlock1*) : HRESULT
    @lpVtbl.value.create_drawing_state_block2.unsafe_as(Proc(D2D1_DRAWING_STATE_DESCRIPTION1*, IDWriteRenderingParams, ID2D1DrawingStateBlock1*, HRESULT)).call(drawingstatedescription, textrenderingparams, drawingstateblock)
  end
  def create_gdi_metafile(metafilestream : IStream, metafile : ID2D1GdiMetafile*) : HRESULT
    @lpVtbl.value.create_gdi_metafile.unsafe_as(Proc(IStream, ID2D1GdiMetafile*, HRESULT)).call(metafilestream, metafile)
  end
  def register_effect_from_stream(classid : Guid*, propertyxml : IStream, bindings : D2D1_PROPERTY_BINDING*, bindingscount : UInt32, effectfactory : PD2D1_EFFECT_FACTORY) : HRESULT
    @lpVtbl.value.register_effect_from_stream.unsafe_as(Proc(Guid*, IStream, D2D1_PROPERTY_BINDING*, UInt32, PD2D1_EFFECT_FACTORY, HRESULT)).call(classid, propertyxml, bindings, bindingscount, effectfactory)
  end
  def register_effect_from_string(classid : Guid*, propertyxml : LibC::LPWSTR, bindings : D2D1_PROPERTY_BINDING*, bindingscount : UInt32, effectfactory : PD2D1_EFFECT_FACTORY) : HRESULT
    @lpVtbl.value.register_effect_from_string.unsafe_as(Proc(Guid*, LibC::LPWSTR, D2D1_PROPERTY_BINDING*, UInt32, PD2D1_EFFECT_FACTORY, HRESULT)).call(classid, propertyxml, bindings, bindingscount, effectfactory)
  end
  def unregister_effect(classid : Guid*) : HRESULT
    @lpVtbl.value.unregister_effect.unsafe_as(Proc(Guid*, HRESULT)).call(classid)
  end
  def get_registered_effects(effects : Guid*, effectscount : UInt32, effectsreturned : UInt32*, effectsregistered : UInt32*) : HRESULT
    @lpVtbl.value.get_registered_effects.unsafe_as(Proc(Guid*, UInt32, UInt32*, UInt32*, HRESULT)).call(effects, effectscount, effectsreturned, effectsregistered)
  end
  def get_effect_properties(effectid : Guid*, properties : ID2D1Properties*) : HRESULT
    @lpVtbl.value.get_effect_properties.unsafe_as(Proc(Guid*, ID2D1Properties*, HRESULT)).call(effectid, properties)
  end
  def create_device2(dxgidevice : IDXGIDevice, d2ddevice1 : ID2D1Device1*) : HRESULT
    @lpVtbl.value.create_device2.unsafe_as(Proc(IDXGIDevice, ID2D1Device1*, HRESULT)).call(dxgidevice, d2ddevice1)
  end
  def create_device3(dxgidevice : IDXGIDevice, d2ddevice2 : ID2D1Device2*) : HRESULT
    @lpVtbl.value.create_device3.unsafe_as(Proc(IDXGIDevice, ID2D1Device2*, HRESULT)).call(dxgidevice, d2ddevice2)
  end
  def create_device4(dxgidevice : IDXGIDevice, d2ddevice3 : ID2D1Device3*) : HRESULT
    @lpVtbl.value.create_device4.unsafe_as(Proc(IDXGIDevice, ID2D1Device3*, HRESULT)).call(dxgidevice, d2ddevice3)
  end
end
struct LibWin32::ID2D1CommandSink3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def begin_draw : HRESULT
    @lpVtbl.value.begin_draw.unsafe_as(Proc(HRESULT)).call
  end
  def end_draw : HRESULT
    @lpVtbl.value.end_draw.unsafe_as(Proc(HRESULT)).call
  end
  def set_antialias_mode(antialiasmode : D2D1_ANTIALIAS_MODE) : HRESULT
    @lpVtbl.value.set_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE, HRESULT)).call(antialiasmode)
  end
  def set_tags(tag1 : UInt64, tag2 : UInt64) : HRESULT
    @lpVtbl.value.set_tags.unsafe_as(Proc(UInt64, UInt64, HRESULT)).call(tag1, tag2)
  end
  def set_text_antialias_mode(textantialiasmode : D2D1_TEXT_ANTIALIAS_MODE) : HRESULT
    @lpVtbl.value.set_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE, HRESULT)).call(textantialiasmode)
  end
  def set_text_rendering_params(textrenderingparams : IDWriteRenderingParams) : HRESULT
    @lpVtbl.value.set_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams, HRESULT)).call(textrenderingparams)
  end
  def set_transform(transform : D2D_MATRIX_3X2_F*) : HRESULT
    @lpVtbl.value.set_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, HRESULT)).call(transform)
  end
  def set_primitive_blend(primitiveblend : D2D1_PRIMITIVE_BLEND) : HRESULT
    @lpVtbl.value.set_primitive_blend.unsafe_as(Proc(D2D1_PRIMITIVE_BLEND, HRESULT)).call(primitiveblend)
  end
  def set_unit_mode(unitmode : D2D1_UNIT_MODE) : HRESULT
    @lpVtbl.value.set_unit_mode.unsafe_as(Proc(D2D1_UNIT_MODE, HRESULT)).call(unitmode)
  end
  def clear(color : D2D1_COLOR_F*) : HRESULT
    @lpVtbl.value.clear.unsafe_as(Proc(D2D1_COLOR_F*, HRESULT)).call(color)
  end
  def draw_glyph_run(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, glyphrundescription : DWRITE_GLYPH_RUN_DESCRIPTION*, foregroundbrush : ID2D1Brush, measuringmode : DWRITE_MEASURING_MODE) : HRESULT
    @lpVtbl.value.draw_glyph_run.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush, DWRITE_MEASURING_MODE, HRESULT)).call(baselineorigin, glyphrun, glyphrundescription, foregroundbrush, measuringmode)
  end
  def draw_line(point0 : D2D_POINT_2F, point1 : D2D_POINT_2F, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : HRESULT
    @lpVtbl.value.draw_line.unsafe_as(Proc(D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush, Float32, ID2D1StrokeStyle, HRESULT)).call(point0, point1, brush, strokewidth, strokestyle)
  end
  def draw_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : HRESULT
    @lpVtbl.value.draw_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, Float32, ID2D1StrokeStyle, HRESULT)).call(geometry, brush, strokewidth, strokestyle)
  end
  def draw_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : HRESULT
    @lpVtbl.value.draw_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Float32, ID2D1StrokeStyle, HRESULT)).call(rect, brush, strokewidth, strokestyle)
  end
  def draw_bitmap(bitmap : ID2D1Bitmap, destinationrectangle : D2D_RECT_F*, opacity : Float32, interpolationmode : D2D1_INTERPOLATION_MODE, sourcerectangle : D2D_RECT_F*, perspectivetransform : D2D_MATRIX_4X4_F*) : HRESULT
    @lpVtbl.value.draw_bitmap.unsafe_as(Proc(ID2D1Bitmap, D2D_RECT_F*, Float32, D2D1_INTERPOLATION_MODE, D2D_RECT_F*, D2D_MATRIX_4X4_F*, HRESULT)).call(bitmap, destinationrectangle, opacity, interpolationmode, sourcerectangle, perspectivetransform)
  end
  def draw_image(image : ID2D1Image, targetoffset : D2D_POINT_2F*, imagerectangle : D2D_RECT_F*, interpolationmode : D2D1_INTERPOLATION_MODE, compositemode : D2D1_COMPOSITE_MODE) : HRESULT
    @lpVtbl.value.draw_image.unsafe_as(Proc(ID2D1Image, D2D_POINT_2F*, D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE, HRESULT)).call(image, targetoffset, imagerectangle, interpolationmode, compositemode)
  end
  def draw_gdi_metafile(gdimetafile : ID2D1GdiMetafile, targetoffset : D2D_POINT_2F*) : HRESULT
    @lpVtbl.value.draw_gdi_metafile.unsafe_as(Proc(ID2D1GdiMetafile, D2D_POINT_2F*, HRESULT)).call(gdimetafile, targetoffset)
  end
  def fill_mesh(mesh : ID2D1Mesh, brush : ID2D1Brush) : HRESULT
    @lpVtbl.value.fill_mesh.unsafe_as(Proc(ID2D1Mesh, ID2D1Brush, HRESULT)).call(mesh, brush)
  end
  def fill_opacity_mask(opacitymask : ID2D1Bitmap, brush : ID2D1Brush, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.fill_opacity_mask.unsafe_as(Proc(ID2D1Bitmap, ID2D1Brush, D2D_RECT_F*, D2D_RECT_F*, HRESULT)).call(opacitymask, brush, destinationrectangle, sourcerectangle)
  end
  def fill_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, opacitybrush : ID2D1Brush) : HRESULT
    @lpVtbl.value.fill_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, ID2D1Brush, HRESULT)).call(geometry, brush, opacitybrush)
  end
  def fill_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush) : HRESULT
    @lpVtbl.value.fill_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, HRESULT)).call(rect, brush)
  end
  def push_axis_aligned_clip(cliprect : D2D_RECT_F*, antialiasmode : D2D1_ANTIALIAS_MODE) : HRESULT
    @lpVtbl.value.push_axis_aligned_clip.unsafe_as(Proc(D2D_RECT_F*, D2D1_ANTIALIAS_MODE, HRESULT)).call(cliprect, antialiasmode)
  end
  def push_layer(layerparameters1 : D2D1_LAYER_PARAMETERS1*, layer : ID2D1Layer) : HRESULT
    @lpVtbl.value.push_layer.unsafe_as(Proc(D2D1_LAYER_PARAMETERS1*, ID2D1Layer, HRESULT)).call(layerparameters1, layer)
  end
  def pop_axis_aligned_clip : HRESULT
    @lpVtbl.value.pop_axis_aligned_clip.unsafe_as(Proc(HRESULT)).call
  end
  def pop_layer : HRESULT
    @lpVtbl.value.pop_layer.unsafe_as(Proc(HRESULT)).call
  end
  def set_primitive_blend1(primitiveblend : D2D1_PRIMITIVE_BLEND) : HRESULT
    @lpVtbl.value.set_primitive_blend1.unsafe_as(Proc(D2D1_PRIMITIVE_BLEND, HRESULT)).call(primitiveblend)
  end
  def draw_ink(ink : ID2D1Ink, brush : ID2D1Brush, inkstyle : ID2D1InkStyle) : HRESULT
    @lpVtbl.value.draw_ink.unsafe_as(Proc(ID2D1Ink, ID2D1Brush, ID2D1InkStyle, HRESULT)).call(ink, brush, inkstyle)
  end
  def draw_gradient_mesh(gradientmesh : ID2D1GradientMesh) : HRESULT
    @lpVtbl.value.draw_gradient_mesh.unsafe_as(Proc(ID2D1GradientMesh, HRESULT)).call(gradientmesh)
  end
  def draw_gdi_metafile2(gdimetafile : ID2D1GdiMetafile, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.draw_gdi_metafile2.unsafe_as(Proc(ID2D1GdiMetafile, D2D_RECT_F*, D2D_RECT_F*, HRESULT)).call(gdimetafile, destinationrectangle, sourcerectangle)
  end
  def draw_sprite_batch(spritebatch : ID2D1SpriteBatch, startindex : UInt32, spritecount : UInt32, bitmap : ID2D1Bitmap, interpolationmode : D2D1_BITMAP_INTERPOLATION_MODE, spriteoptions : D2D1_SPRITE_OPTIONS) : HRESULT
    @lpVtbl.value.draw_sprite_batch.unsafe_as(Proc(ID2D1SpriteBatch, UInt32, UInt32, ID2D1Bitmap, D2D1_BITMAP_INTERPOLATION_MODE, D2D1_SPRITE_OPTIONS, HRESULT)).call(spritebatch, startindex, spritecount, bitmap, interpolationmode, spriteoptions)
  end
end
struct LibWin32::ID2D1SvgGlyphStyle
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def set_fill(brush : ID2D1Brush) : HRESULT
    @lpVtbl.value.set_fill.unsafe_as(Proc(ID2D1Brush, HRESULT)).call(brush)
  end
  def get_fill(brush : ID2D1Brush*) : Void
    @lpVtbl.value.get_fill.unsafe_as(Proc(ID2D1Brush*, Void)).call(brush)
  end
  def set_stroke(brush : ID2D1Brush, strokewidth : Float32, dashes : Float32*, dashescount : UInt32, dashoffset : Float32) : HRESULT
    @lpVtbl.value.set_stroke.unsafe_as(Proc(ID2D1Brush, Float32, Float32*, UInt32, Float32, HRESULT)).call(brush, strokewidth, dashes, dashescount, dashoffset)
  end
  def get_stroke_dashes_count : UInt32
    @lpVtbl.value.get_stroke_dashes_count.unsafe_as(Proc(UInt32)).call
  end
  def get_stroke(brush : ID2D1Brush*, strokewidth : Float32*, dashes : Float32*, dashescount : UInt32, dashoffset : Float32*) : Void
    @lpVtbl.value.get_stroke.unsafe_as(Proc(ID2D1Brush*, Float32*, Float32*, UInt32, Float32*, Void)).call(brush, strokewidth, dashes, dashescount, dashoffset)
  end
end
struct LibWin32::ID2D1DeviceContext4
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def create_bitmap(size : D2D_SIZE_U, srcdata : Void*, pitch : UInt32, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_bitmap.unsafe_as(Proc(D2D_SIZE_U, Void*, UInt32, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(size, srcdata, pitch, bitmapproperties, bitmap)
  end
  def create_bitmap_from_wic_bitmap(wicbitmapsource : IWICBitmapSource, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_bitmap_from_wic_bitmap.unsafe_as(Proc(IWICBitmapSource, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(wicbitmapsource, bitmapproperties, bitmap)
  end
  def create_shared_bitmap(riid : Guid*, data : Void*, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_shared_bitmap.unsafe_as(Proc(Guid*, Void*, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(riid, data, bitmapproperties, bitmap)
  end
  def create_bitmap_brush(bitmap : ID2D1Bitmap, bitmapbrushproperties : D2D1_BITMAP_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, bitmapbrush : ID2D1BitmapBrush*) : HRESULT
    @lpVtbl.value.create_bitmap_brush.unsafe_as(Proc(ID2D1Bitmap, D2D1_BITMAP_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush*, HRESULT)).call(bitmap, bitmapbrushproperties, brushproperties, bitmapbrush)
  end
  def create_solid_color_brush(color : D2D1_COLOR_F*, brushproperties : D2D1_BRUSH_PROPERTIES*, solidcolorbrush : ID2D1SolidColorBrush*) : HRESULT
    @lpVtbl.value.create_solid_color_brush.unsafe_as(Proc(D2D1_COLOR_F*, D2D1_BRUSH_PROPERTIES*, ID2D1SolidColorBrush*, HRESULT)).call(color, brushproperties, solidcolorbrush)
  end
  def create_gradient_stop_collection(gradientstops : D2D1_GRADIENT_STOP*, gradientstopscount : UInt32, colorinterpolationgamma : D2D1_GAMMA, extendmode : D2D1_EXTEND_MODE, gradientstopcollection : ID2D1GradientStopCollection*) : HRESULT
    @lpVtbl.value.create_gradient_stop_collection.unsafe_as(Proc(D2D1_GRADIENT_STOP*, UInt32, D2D1_GAMMA, D2D1_EXTEND_MODE, ID2D1GradientStopCollection*, HRESULT)).call(gradientstops, gradientstopscount, colorinterpolationgamma, extendmode, gradientstopcollection)
  end
  def create_linear_gradient_brush(lineargradientbrushproperties : D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, gradientstopcollection : ID2D1GradientStopCollection, lineargradientbrush : ID2D1LinearGradientBrush*) : HRESULT
    @lpVtbl.value.create_linear_gradient_brush.unsafe_as(Proc(D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection, ID2D1LinearGradientBrush*, HRESULT)).call(lineargradientbrushproperties, brushproperties, gradientstopcollection, lineargradientbrush)
  end
  def create_radial_gradient_brush(radialgradientbrushproperties : D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, gradientstopcollection : ID2D1GradientStopCollection, radialgradientbrush : ID2D1RadialGradientBrush*) : HRESULT
    @lpVtbl.value.create_radial_gradient_brush.unsafe_as(Proc(D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection, ID2D1RadialGradientBrush*, HRESULT)).call(radialgradientbrushproperties, brushproperties, gradientstopcollection, radialgradientbrush)
  end
  def create_compatible_render_target(desiredsize : D2D_SIZE_F*, desiredpixelsize : D2D_SIZE_U*, desiredformat : D2D1_PIXEL_FORMAT*, options : D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, bitmaprendertarget : ID2D1BitmapRenderTarget*) : HRESULT
    @lpVtbl.value.create_compatible_render_target.unsafe_as(Proc(D2D_SIZE_F*, D2D_SIZE_U*, D2D1_PIXEL_FORMAT*, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, ID2D1BitmapRenderTarget*, HRESULT)).call(desiredsize, desiredpixelsize, desiredformat, options, bitmaprendertarget)
  end
  def create_layer(size : D2D_SIZE_F*, layer : ID2D1Layer*) : HRESULT
    @lpVtbl.value.create_layer.unsafe_as(Proc(D2D_SIZE_F*, ID2D1Layer*, HRESULT)).call(size, layer)
  end
  def create_mesh(mesh : ID2D1Mesh*) : HRESULT
    @lpVtbl.value.create_mesh.unsafe_as(Proc(ID2D1Mesh*, HRESULT)).call(mesh)
  end
  def draw_line(point0 : D2D_POINT_2F, point1 : D2D_POINT_2F, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_line.unsafe_as(Proc(D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(point0, point1, brush, strokewidth, strokestyle)
  end
  def draw_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(rect, brush, strokewidth, strokestyle)
  end
  def fill_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Void)).call(rect, brush)
  end
  def draw_rounded_rectangle(roundedrect : D2D1_ROUNDED_RECT*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_rounded_rectangle.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(roundedrect, brush, strokewidth, strokestyle)
  end
  def fill_rounded_rectangle(roundedrect : D2D1_ROUNDED_RECT*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_rounded_rectangle.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1Brush, Void)).call(roundedrect, brush)
  end
  def draw_ellipse(ellipse : D2D1_ELLIPSE*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_ellipse.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(ellipse, brush, strokewidth, strokestyle)
  end
  def fill_ellipse(ellipse : D2D1_ELLIPSE*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_ellipse.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1Brush, Void)).call(ellipse, brush)
  end
  def draw_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(geometry, brush, strokewidth, strokestyle)
  end
  def fill_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, opacitybrush : ID2D1Brush) : Void
    @lpVtbl.value.fill_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, ID2D1Brush, Void)).call(geometry, brush, opacitybrush)
  end
  def fill_mesh(mesh : ID2D1Mesh, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_mesh.unsafe_as(Proc(ID2D1Mesh, ID2D1Brush, Void)).call(mesh, brush)
  end
  def fill_opacity_mask(opacitymask : ID2D1Bitmap, brush : ID2D1Brush, content : D2D1_OPACITY_MASK_CONTENT, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.fill_opacity_mask.unsafe_as(Proc(ID2D1Bitmap, ID2D1Brush, D2D1_OPACITY_MASK_CONTENT, D2D_RECT_F*, D2D_RECT_F*, Void)).call(opacitymask, brush, content, destinationrectangle, sourcerectangle)
  end
  def draw_bitmap(bitmap : ID2D1Bitmap, destinationrectangle : D2D_RECT_F*, opacity : Float32, interpolationmode : D2D1_BITMAP_INTERPOLATION_MODE, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.draw_bitmap.unsafe_as(Proc(ID2D1Bitmap, D2D_RECT_F*, Float32, D2D1_BITMAP_INTERPOLATION_MODE, D2D_RECT_F*, Void)).call(bitmap, destinationrectangle, opacity, interpolationmode, sourcerectangle)
  end
  def draw_text(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, layoutrect : D2D_RECT_F*, defaultfillbrush : ID2D1Brush, options : D2D1_DRAW_TEXT_OPTIONS, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_text.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, D2D_RECT_F*, ID2D1Brush, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE, Void)).call(string, stringlength, textformat, layoutrect, defaultfillbrush, options, measuringmode)
  end
  def draw_text_layout(origin : D2D_POINT_2F, textlayout : IDWriteTextLayout, defaultfillbrush : ID2D1Brush, options : D2D1_DRAW_TEXT_OPTIONS) : Void
    @lpVtbl.value.draw_text_layout.unsafe_as(Proc(D2D_POINT_2F, IDWriteTextLayout, ID2D1Brush, D2D1_DRAW_TEXT_OPTIONS, Void)).call(origin, textlayout, defaultfillbrush, options)
  end
  def draw_glyph_run(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, foregroundbrush : ID2D1Brush, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_glyph_run.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, ID2D1Brush, DWRITE_MEASURING_MODE, Void)).call(baselineorigin, glyphrun, foregroundbrush, measuringmode)
  end
  def set_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.set_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def get_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.get_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def set_antialias_mode(antialiasmode : D2D1_ANTIALIAS_MODE) : Void
    @lpVtbl.value.set_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE, Void)).call(antialiasmode)
  end
  def get_antialias_mode : D2D1_ANTIALIAS_MODE
    @lpVtbl.value.get_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE)).call
  end
  def set_text_antialias_mode(textantialiasmode : D2D1_TEXT_ANTIALIAS_MODE) : Void
    @lpVtbl.value.set_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE, Void)).call(textantialiasmode)
  end
  def get_text_antialias_mode : D2D1_TEXT_ANTIALIAS_MODE
    @lpVtbl.value.get_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE)).call
  end
  def set_text_rendering_params(textrenderingparams : IDWriteRenderingParams) : Void
    @lpVtbl.value.set_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams, Void)).call(textrenderingparams)
  end
  def get_text_rendering_params(textrenderingparams : IDWriteRenderingParams*) : Void
    @lpVtbl.value.get_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams*, Void)).call(textrenderingparams)
  end
  def set_tags(tag1 : UInt64, tag2 : UInt64) : Void
    @lpVtbl.value.set_tags.unsafe_as(Proc(UInt64, UInt64, Void)).call(tag1, tag2)
  end
  def get_tags(tag1 : UInt64*, tag2 : UInt64*) : Void
    @lpVtbl.value.get_tags.unsafe_as(Proc(UInt64*, UInt64*, Void)).call(tag1, tag2)
  end
  def push_layer(layerparameters : D2D1_LAYER_PARAMETERS*, layer : ID2D1Layer) : Void
    @lpVtbl.value.push_layer.unsafe_as(Proc(D2D1_LAYER_PARAMETERS*, ID2D1Layer, Void)).call(layerparameters, layer)
  end
  def pop_layer : Void
    @lpVtbl.value.pop_layer.unsafe_as(Proc(Void)).call
  end
  def flush(tag1 : UInt64*, tag2 : UInt64*) : HRESULT
    @lpVtbl.value.flush.unsafe_as(Proc(UInt64*, UInt64*, HRESULT)).call(tag1, tag2)
  end
  def save_drawing_state(drawingstateblock : ID2D1DrawingStateBlock) : Void
    @lpVtbl.value.save_drawing_state.unsafe_as(Proc(ID2D1DrawingStateBlock, Void)).call(drawingstateblock)
  end
  def restore_drawing_state(drawingstateblock : ID2D1DrawingStateBlock) : Void
    @lpVtbl.value.restore_drawing_state.unsafe_as(Proc(ID2D1DrawingStateBlock, Void)).call(drawingstateblock)
  end
  def push_axis_aligned_clip(cliprect : D2D_RECT_F*, antialiasmode : D2D1_ANTIALIAS_MODE) : Void
    @lpVtbl.value.push_axis_aligned_clip.unsafe_as(Proc(D2D_RECT_F*, D2D1_ANTIALIAS_MODE, Void)).call(cliprect, antialiasmode)
  end
  def pop_axis_aligned_clip : Void
    @lpVtbl.value.pop_axis_aligned_clip.unsafe_as(Proc(Void)).call
  end
  def clear(clearcolor : D2D1_COLOR_F*) : Void
    @lpVtbl.value.clear.unsafe_as(Proc(D2D1_COLOR_F*, Void)).call(clearcolor)
  end
  def begin_draw : Void
    @lpVtbl.value.begin_draw.unsafe_as(Proc(Void)).call
  end
  def end_draw(tag1 : UInt64*, tag2 : UInt64*) : HRESULT
    @lpVtbl.value.end_draw.unsafe_as(Proc(UInt64*, UInt64*, HRESULT)).call(tag1, tag2)
  end
  def get_pixel_format : D2D1_PIXEL_FORMAT
    @lpVtbl.value.get_pixel_format.unsafe_as(Proc(D2D1_PIXEL_FORMAT)).call
  end
  def set_dpi(dpix : Float32, dpiy : Float32) : Void
    @lpVtbl.value.set_dpi.unsafe_as(Proc(Float32, Float32, Void)).call(dpix, dpiy)
  end
  def get_dpi(dpix : Float32*, dpiy : Float32*) : Void
    @lpVtbl.value.get_dpi.unsafe_as(Proc(Float32*, Float32*, Void)).call(dpix, dpiy)
  end
  def get_size : D2D_SIZE_F
    @lpVtbl.value.get_size.unsafe_as(Proc(D2D_SIZE_F)).call
  end
  def get_pixel_size : D2D_SIZE_U
    @lpVtbl.value.get_pixel_size.unsafe_as(Proc(D2D_SIZE_U)).call
  end
  def get_maximum_bitmap_size : UInt32
    @lpVtbl.value.get_maximum_bitmap_size.unsafe_as(Proc(UInt32)).call
  end
  def is_supported(rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*) : LibC::BOOL
    @lpVtbl.value.is_supported.unsafe_as(Proc(D2D1_RENDER_TARGET_PROPERTIES*, LibC::BOOL)).call(rendertargetproperties)
  end
  def create_bitmap2(size : D2D_SIZE_U, sourcedata : Void*, pitch : UInt32, bitmapproperties : D2D1_BITMAP_PROPERTIES1*, bitmap : ID2D1Bitmap1*) : HRESULT
    @lpVtbl.value.create_bitmap2.unsafe_as(Proc(D2D_SIZE_U, Void*, UInt32, D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1*, HRESULT)).call(size, sourcedata, pitch, bitmapproperties, bitmap)
  end
  def create_bitmap_from_wic_bitmap2(wicbitmapsource : IWICBitmapSource, bitmapproperties : D2D1_BITMAP_PROPERTIES1*, bitmap : ID2D1Bitmap1*) : HRESULT
    @lpVtbl.value.create_bitmap_from_wic_bitmap2.unsafe_as(Proc(IWICBitmapSource, D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1*, HRESULT)).call(wicbitmapsource, bitmapproperties, bitmap)
  end
  def create_color_context(space : D2D1_COLOR_SPACE, profile : UInt8*, profilesize : UInt32, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context.unsafe_as(Proc(D2D1_COLOR_SPACE, UInt8*, UInt32, ID2D1ColorContext*, HRESULT)).call(space, profile, profilesize, colorcontext)
  end
  def create_color_context_from_filename(filename : LibC::LPWSTR, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context_from_filename.unsafe_as(Proc(LibC::LPWSTR, ID2D1ColorContext*, HRESULT)).call(filename, colorcontext)
  end
  def create_color_context_from_wic_color_context(wiccolorcontext : IWICColorContext, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context_from_wic_color_context.unsafe_as(Proc(IWICColorContext, ID2D1ColorContext*, HRESULT)).call(wiccolorcontext, colorcontext)
  end
  def create_bitmap_from_dxgi_surface(surface : IDXGISurface, bitmapproperties : D2D1_BITMAP_PROPERTIES1*, bitmap : ID2D1Bitmap1*) : HRESULT
    @lpVtbl.value.create_bitmap_from_dxgi_surface.unsafe_as(Proc(IDXGISurface, D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1*, HRESULT)).call(surface, bitmapproperties, bitmap)
  end
  def create_effect(effectid : Guid*, effect : ID2D1Effect*) : HRESULT
    @lpVtbl.value.create_effect.unsafe_as(Proc(Guid*, ID2D1Effect*, HRESULT)).call(effectid, effect)
  end
  def create_gradient_stop_collection2(straightalphagradientstops : D2D1_GRADIENT_STOP*, straightalphagradientstopscount : UInt32, preinterpolationspace : D2D1_COLOR_SPACE, postinterpolationspace : D2D1_COLOR_SPACE, bufferprecision : D2D1_BUFFER_PRECISION, extendmode : D2D1_EXTEND_MODE, colorinterpolationmode : D2D1_COLOR_INTERPOLATION_MODE, gradientstopcollection1 : ID2D1GradientStopCollection1*) : HRESULT
    @lpVtbl.value.create_gradient_stop_collection2.unsafe_as(Proc(D2D1_GRADIENT_STOP*, UInt32, D2D1_COLOR_SPACE, D2D1_COLOR_SPACE, D2D1_BUFFER_PRECISION, D2D1_EXTEND_MODE, D2D1_COLOR_INTERPOLATION_MODE, ID2D1GradientStopCollection1*, HRESULT)).call(straightalphagradientstops, straightalphagradientstopscount, preinterpolationspace, postinterpolationspace, bufferprecision, extendmode, colorinterpolationmode, gradientstopcollection1)
  end
  def create_image_brush(image : ID2D1Image, imagebrushproperties : D2D1_IMAGE_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, imagebrush : ID2D1ImageBrush*) : HRESULT
    @lpVtbl.value.create_image_brush.unsafe_as(Proc(ID2D1Image, D2D1_IMAGE_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1ImageBrush*, HRESULT)).call(image, imagebrushproperties, brushproperties, imagebrush)
  end
  def create_bitmap_brush2(bitmap : ID2D1Bitmap, bitmapbrushproperties : D2D1_BITMAP_BRUSH_PROPERTIES1*, brushproperties : D2D1_BRUSH_PROPERTIES*, bitmapbrush : ID2D1BitmapBrush1*) : HRESULT
    @lpVtbl.value.create_bitmap_brush2.unsafe_as(Proc(ID2D1Bitmap, D2D1_BITMAP_BRUSH_PROPERTIES1*, D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush1*, HRESULT)).call(bitmap, bitmapbrushproperties, brushproperties, bitmapbrush)
  end
  def create_command_list(commandlist : ID2D1CommandList*) : HRESULT
    @lpVtbl.value.create_command_list.unsafe_as(Proc(ID2D1CommandList*, HRESULT)).call(commandlist)
  end
  def is_dxgi_format_supported(format : DXGI_FORMAT) : LibC::BOOL
    @lpVtbl.value.is_dxgi_format_supported.unsafe_as(Proc(DXGI_FORMAT, LibC::BOOL)).call(format)
  end
  def is_buffer_precision_supported(bufferprecision : D2D1_BUFFER_PRECISION) : LibC::BOOL
    @lpVtbl.value.is_buffer_precision_supported.unsafe_as(Proc(D2D1_BUFFER_PRECISION, LibC::BOOL)).call(bufferprecision)
  end
  def get_image_local_bounds(image : ID2D1Image, localbounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_image_local_bounds.unsafe_as(Proc(ID2D1Image, D2D_RECT_F*, HRESULT)).call(image, localbounds)
  end
  def get_image_world_bounds(image : ID2D1Image, worldbounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_image_world_bounds.unsafe_as(Proc(ID2D1Image, D2D_RECT_F*, HRESULT)).call(image, worldbounds)
  end
  def get_glyph_run_world_bounds(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, measuringmode : DWRITE_MEASURING_MODE, bounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_glyph_run_world_bounds.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D_RECT_F*, HRESULT)).call(baselineorigin, glyphrun, measuringmode, bounds)
  end
  def get_device(device : ID2D1Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID2D1Device*, Void)).call(device)
  end
  def set_target(image : ID2D1Image) : Void
    @lpVtbl.value.set_target.unsafe_as(Proc(ID2D1Image, Void)).call(image)
  end
  def get_target(image : ID2D1Image*) : Void
    @lpVtbl.value.get_target.unsafe_as(Proc(ID2D1Image*, Void)).call(image)
  end
  def set_rendering_controls(renderingcontrols : D2D1_RENDERING_CONTROLS*) : Void
    @lpVtbl.value.set_rendering_controls.unsafe_as(Proc(D2D1_RENDERING_CONTROLS*, Void)).call(renderingcontrols)
  end
  def get_rendering_controls(renderingcontrols : D2D1_RENDERING_CONTROLS*) : Void
    @lpVtbl.value.get_rendering_controls.unsafe_as(Proc(D2D1_RENDERING_CONTROLS*, Void)).call(renderingcontrols)
  end
  def set_primitive_blend(primitiveblend : D2D1_PRIMITIVE_BLEND) : Void
    @lpVtbl.value.set_primitive_blend.unsafe_as(Proc(D2D1_PRIMITIVE_BLEND, Void)).call(primitiveblend)
  end
  def get_primitive_blend : D2D1_PRIMITIVE_BLEND
    @lpVtbl.value.get_primitive_blend.unsafe_as(Proc(D2D1_PRIMITIVE_BLEND)).call
  end
  def set_unit_mode(unitmode : D2D1_UNIT_MODE) : Void
    @lpVtbl.value.set_unit_mode.unsafe_as(Proc(D2D1_UNIT_MODE, Void)).call(unitmode)
  end
  def get_unit_mode : D2D1_UNIT_MODE
    @lpVtbl.value.get_unit_mode.unsafe_as(Proc(D2D1_UNIT_MODE)).call
  end
  def draw_glyph_run2(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, glyphrundescription : DWRITE_GLYPH_RUN_DESCRIPTION*, foregroundbrush : ID2D1Brush, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_glyph_run2.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush, DWRITE_MEASURING_MODE, Void)).call(baselineorigin, glyphrun, glyphrundescription, foregroundbrush, measuringmode)
  end
  def draw_image(image : ID2D1Image, targetoffset : D2D_POINT_2F*, imagerectangle : D2D_RECT_F*, interpolationmode : D2D1_INTERPOLATION_MODE, compositemode : D2D1_COMPOSITE_MODE) : Void
    @lpVtbl.value.draw_image.unsafe_as(Proc(ID2D1Image, D2D_POINT_2F*, D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE, Void)).call(image, targetoffset, imagerectangle, interpolationmode, compositemode)
  end
  def draw_gdi_metafile(gdimetafile : ID2D1GdiMetafile, targetoffset : D2D_POINT_2F*) : Void
    @lpVtbl.value.draw_gdi_metafile.unsafe_as(Proc(ID2D1GdiMetafile, D2D_POINT_2F*, Void)).call(gdimetafile, targetoffset)
  end
  def draw_bitmap2(bitmap : ID2D1Bitmap, destinationrectangle : D2D_RECT_F*, opacity : Float32, interpolationmode : D2D1_INTERPOLATION_MODE, sourcerectangle : D2D_RECT_F*, perspectivetransform : D2D_MATRIX_4X4_F*) : Void
    @lpVtbl.value.draw_bitmap2.unsafe_as(Proc(ID2D1Bitmap, D2D_RECT_F*, Float32, D2D1_INTERPOLATION_MODE, D2D_RECT_F*, D2D_MATRIX_4X4_F*, Void)).call(bitmap, destinationrectangle, opacity, interpolationmode, sourcerectangle, perspectivetransform)
  end
  def push_layer2(layerparameters : D2D1_LAYER_PARAMETERS1*, layer : ID2D1Layer) : Void
    @lpVtbl.value.push_layer2.unsafe_as(Proc(D2D1_LAYER_PARAMETERS1*, ID2D1Layer, Void)).call(layerparameters, layer)
  end
  def invalidate_effect_input_rectangle(effect : ID2D1Effect, input : UInt32, inputrectangle : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.invalidate_effect_input_rectangle.unsafe_as(Proc(ID2D1Effect, UInt32, D2D_RECT_F*, HRESULT)).call(effect, input, inputrectangle)
  end
  def get_effect_invalid_rectangle_count(effect : ID2D1Effect, rectanglecount : UInt32*) : HRESULT
    @lpVtbl.value.get_effect_invalid_rectangle_count.unsafe_as(Proc(ID2D1Effect, UInt32*, HRESULT)).call(effect, rectanglecount)
  end
  def get_effect_invalid_rectangles(effect : ID2D1Effect, rectangles : D2D_RECT_F*, rectanglescount : UInt32) : HRESULT
    @lpVtbl.value.get_effect_invalid_rectangles.unsafe_as(Proc(ID2D1Effect, D2D_RECT_F*, UInt32, HRESULT)).call(effect, rectangles, rectanglescount)
  end
  def get_effect_required_input_rectangles(rendereffect : ID2D1Effect, renderimagerectangle : D2D_RECT_F*, inputdescriptions : D2D1_EFFECT_INPUT_DESCRIPTION*, requiredinputrects : D2D_RECT_F*, inputcount : UInt32) : HRESULT
    @lpVtbl.value.get_effect_required_input_rectangles.unsafe_as(Proc(ID2D1Effect, D2D_RECT_F*, D2D1_EFFECT_INPUT_DESCRIPTION*, D2D_RECT_F*, UInt32, HRESULT)).call(rendereffect, renderimagerectangle, inputdescriptions, requiredinputrects, inputcount)
  end
  def fill_opacity_mask2(opacitymask : ID2D1Bitmap, brush : ID2D1Brush, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.fill_opacity_mask2.unsafe_as(Proc(ID2D1Bitmap, ID2D1Brush, D2D_RECT_F*, D2D_RECT_F*, Void)).call(opacitymask, brush, destinationrectangle, sourcerectangle)
  end
  def create_filled_geometry_realization(geometry : ID2D1Geometry, flatteningtolerance : Float32, geometryrealization : ID2D1GeometryRealization*) : HRESULT
    @lpVtbl.value.create_filled_geometry_realization.unsafe_as(Proc(ID2D1Geometry, Float32, ID2D1GeometryRealization*, HRESULT)).call(geometry, flatteningtolerance, geometryrealization)
  end
  def create_stroked_geometry_realization(geometry : ID2D1Geometry, flatteningtolerance : Float32, strokewidth : Float32, strokestyle : ID2D1StrokeStyle, geometryrealization : ID2D1GeometryRealization*) : HRESULT
    @lpVtbl.value.create_stroked_geometry_realization.unsafe_as(Proc(ID2D1Geometry, Float32, Float32, ID2D1StrokeStyle, ID2D1GeometryRealization*, HRESULT)).call(geometry, flatteningtolerance, strokewidth, strokestyle, geometryrealization)
  end
  def draw_geometry_realization(geometryrealization : ID2D1GeometryRealization, brush : ID2D1Brush) : Void
    @lpVtbl.value.draw_geometry_realization.unsafe_as(Proc(ID2D1GeometryRealization, ID2D1Brush, Void)).call(geometryrealization, brush)
  end
  def create_ink(startpoint : D2D1_INK_POINT*, ink : ID2D1Ink*) : HRESULT
    @lpVtbl.value.create_ink.unsafe_as(Proc(D2D1_INK_POINT*, ID2D1Ink*, HRESULT)).call(startpoint, ink)
  end
  def create_ink_style(inkstyleproperties : D2D1_INK_STYLE_PROPERTIES*, inkstyle : ID2D1InkStyle*) : HRESULT
    @lpVtbl.value.create_ink_style.unsafe_as(Proc(D2D1_INK_STYLE_PROPERTIES*, ID2D1InkStyle*, HRESULT)).call(inkstyleproperties, inkstyle)
  end
  def create_gradient_mesh(patches : D2D1_GRADIENT_MESH_PATCH*, patchescount : UInt32, gradientmesh : ID2D1GradientMesh*) : HRESULT
    @lpVtbl.value.create_gradient_mesh.unsafe_as(Proc(D2D1_GRADIENT_MESH_PATCH*, UInt32, ID2D1GradientMesh*, HRESULT)).call(patches, patchescount, gradientmesh)
  end
  def create_image_source_from_wic(wicbitmapsource : IWICBitmapSource, loadingoptions : D2D1_IMAGE_SOURCE_LOADING_OPTIONS, alphamode : D2D1_ALPHA_MODE, imagesource : ID2D1ImageSourceFromWic*) : HRESULT
    @lpVtbl.value.create_image_source_from_wic.unsafe_as(Proc(IWICBitmapSource, D2D1_IMAGE_SOURCE_LOADING_OPTIONS, D2D1_ALPHA_MODE, ID2D1ImageSourceFromWic*, HRESULT)).call(wicbitmapsource, loadingoptions, alphamode, imagesource)
  end
  def create_lookup_table3_d(precision : D2D1_BUFFER_PRECISION, extents : UInt32*, data : UInt8*, datacount : UInt32, strides : UInt32*, lookuptable : ID2D1LookupTable3D*) : HRESULT
    @lpVtbl.value.create_lookup_table3_d.unsafe_as(Proc(D2D1_BUFFER_PRECISION, UInt32*, UInt8*, UInt32, UInt32*, ID2D1LookupTable3D*, HRESULT)).call(precision, extents, data, datacount, strides, lookuptable)
  end
  def create_image_source_from_dxgi(surfaces : IDXGISurface*, surfacecount : UInt32, colorspace : DXGI_COLOR_SPACE_TYPE, options : D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, imagesource : ID2D1ImageSource*) : HRESULT
    @lpVtbl.value.create_image_source_from_dxgi.unsafe_as(Proc(IDXGISurface*, UInt32, DXGI_COLOR_SPACE_TYPE, D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, ID2D1ImageSource*, HRESULT)).call(surfaces, surfacecount, colorspace, options, imagesource)
  end
  def get_gradient_mesh_world_bounds(gradientmesh : ID2D1GradientMesh, pbounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_gradient_mesh_world_bounds.unsafe_as(Proc(ID2D1GradientMesh, D2D_RECT_F*, HRESULT)).call(gradientmesh, pbounds)
  end
  def draw_ink(ink : ID2D1Ink, brush : ID2D1Brush, inkstyle : ID2D1InkStyle) : Void
    @lpVtbl.value.draw_ink.unsafe_as(Proc(ID2D1Ink, ID2D1Brush, ID2D1InkStyle, Void)).call(ink, brush, inkstyle)
  end
  def draw_gradient_mesh(gradientmesh : ID2D1GradientMesh) : Void
    @lpVtbl.value.draw_gradient_mesh.unsafe_as(Proc(ID2D1GradientMesh, Void)).call(gradientmesh)
  end
  def draw_gdi_metafile2(gdimetafile : ID2D1GdiMetafile, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.draw_gdi_metafile2.unsafe_as(Proc(ID2D1GdiMetafile, D2D_RECT_F*, D2D_RECT_F*, Void)).call(gdimetafile, destinationrectangle, sourcerectangle)
  end
  def create_transformed_image_source(imagesource : ID2D1ImageSource, properties : D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, transformedimagesource : ID2D1TransformedImageSource*) : HRESULT
    @lpVtbl.value.create_transformed_image_source.unsafe_as(Proc(ID2D1ImageSource, D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, ID2D1TransformedImageSource*, HRESULT)).call(imagesource, properties, transformedimagesource)
  end
  def create_sprite_batch(spritebatch : ID2D1SpriteBatch*) : HRESULT
    @lpVtbl.value.create_sprite_batch.unsafe_as(Proc(ID2D1SpriteBatch*, HRESULT)).call(spritebatch)
  end
  def draw_sprite_batch(spritebatch : ID2D1SpriteBatch, startindex : UInt32, spritecount : UInt32, bitmap : ID2D1Bitmap, interpolationmode : D2D1_BITMAP_INTERPOLATION_MODE, spriteoptions : D2D1_SPRITE_OPTIONS) : Void
    @lpVtbl.value.draw_sprite_batch.unsafe_as(Proc(ID2D1SpriteBatch, UInt32, UInt32, ID2D1Bitmap, D2D1_BITMAP_INTERPOLATION_MODE, D2D1_SPRITE_OPTIONS, Void)).call(spritebatch, startindex, spritecount, bitmap, interpolationmode, spriteoptions)
  end
  def create_svg_glyph_style(svgglyphstyle : ID2D1SvgGlyphStyle*) : HRESULT
    @lpVtbl.value.create_svg_glyph_style.unsafe_as(Proc(ID2D1SvgGlyphStyle*, HRESULT)).call(svgglyphstyle)
  end
  def draw_text2(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, layoutrect : D2D_RECT_F*, defaultfillbrush : ID2D1Brush, svgglyphstyle : ID2D1SvgGlyphStyle, colorpaletteindex : UInt32, options : D2D1_DRAW_TEXT_OPTIONS, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_text2.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, D2D_RECT_F*, ID2D1Brush, ID2D1SvgGlyphStyle, UInt32, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE, Void)).call(string, stringlength, textformat, layoutrect, defaultfillbrush, svgglyphstyle, colorpaletteindex, options, measuringmode)
  end
  def draw_text_layout2(origin : D2D_POINT_2F, textlayout : IDWriteTextLayout, defaultfillbrush : ID2D1Brush, svgglyphstyle : ID2D1SvgGlyphStyle, colorpaletteindex : UInt32, options : D2D1_DRAW_TEXT_OPTIONS) : Void
    @lpVtbl.value.draw_text_layout2.unsafe_as(Proc(D2D_POINT_2F, IDWriteTextLayout, ID2D1Brush, ID2D1SvgGlyphStyle, UInt32, D2D1_DRAW_TEXT_OPTIONS, Void)).call(origin, textlayout, defaultfillbrush, svgglyphstyle, colorpaletteindex, options)
  end
  def draw_color_bitmap_glyph_run(glyphimageformat : DWRITE_GLYPH_IMAGE_FORMATS, baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, measuringmode : DWRITE_MEASURING_MODE, bitmapsnapoption : D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION) : Void
    @lpVtbl.value.draw_color_bitmap_glyph_run.unsafe_as(Proc(DWRITE_GLYPH_IMAGE_FORMATS, D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION, Void)).call(glyphimageformat, baselineorigin, glyphrun, measuringmode, bitmapsnapoption)
  end
  def draw_svg_glyph_run(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, defaultfillbrush : ID2D1Brush, svgglyphstyle : ID2D1SvgGlyphStyle, colorpaletteindex : UInt32, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_svg_glyph_run.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, ID2D1Brush, ID2D1SvgGlyphStyle, UInt32, DWRITE_MEASURING_MODE, Void)).call(baselineorigin, glyphrun, defaultfillbrush, svgglyphstyle, colorpaletteindex, measuringmode)
  end
  def get_color_bitmap_glyph_image(glyphimageformat : DWRITE_GLYPH_IMAGE_FORMATS, glyphorigin : D2D_POINT_2F, fontface : IDWriteFontFace, fontemsize : Float32, glyphindex : UInt16, issideways : LibC::BOOL, worldtransform : D2D_MATRIX_3X2_F*, dpix : Float32, dpiy : Float32, glyphtransform : D2D_MATRIX_3X2_F*, glyphimage : ID2D1Image*) : HRESULT
    @lpVtbl.value.get_color_bitmap_glyph_image.unsafe_as(Proc(DWRITE_GLYPH_IMAGE_FORMATS, D2D_POINT_2F, IDWriteFontFace, Float32, UInt16, LibC::BOOL, D2D_MATRIX_3X2_F*, Float32, Float32, D2D_MATRIX_3X2_F*, ID2D1Image*, HRESULT)).call(glyphimageformat, glyphorigin, fontface, fontemsize, glyphindex, issideways, worldtransform, dpix, dpiy, glyphtransform, glyphimage)
  end
  def get_svg_glyph_image(glyphorigin : D2D_POINT_2F, fontface : IDWriteFontFace, fontemsize : Float32, glyphindex : UInt16, issideways : LibC::BOOL, worldtransform : D2D_MATRIX_3X2_F*, defaultfillbrush : ID2D1Brush, svgglyphstyle : ID2D1SvgGlyphStyle, colorpaletteindex : UInt32, glyphtransform : D2D_MATRIX_3X2_F*, glyphimage : ID2D1CommandList*) : HRESULT
    @lpVtbl.value.get_svg_glyph_image.unsafe_as(Proc(D2D_POINT_2F, IDWriteFontFace, Float32, UInt16, LibC::BOOL, D2D_MATRIX_3X2_F*, ID2D1Brush, ID2D1SvgGlyphStyle, UInt32, D2D_MATRIX_3X2_F*, ID2D1CommandList*, HRESULT)).call(glyphorigin, fontface, fontemsize, glyphindex, issideways, worldtransform, defaultfillbrush, svgglyphstyle, colorpaletteindex, glyphtransform, glyphimage)
  end
end
struct LibWin32::ID2D1Device4
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def create_device_context(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext : ID2D1DeviceContext*) : HRESULT
    @lpVtbl.value.create_device_context.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext*, HRESULT)).call(options, devicecontext)
  end
  def create_print_control(wicfactory : IWICImagingFactory, documenttarget : IPrintDocumentPackageTarget, printcontrolproperties : D2D1_PRINT_CONTROL_PROPERTIES*, printcontrol : ID2D1PrintControl*) : HRESULT
    @lpVtbl.value.create_print_control.unsafe_as(Proc(IWICImagingFactory, IPrintDocumentPackageTarget, D2D1_PRINT_CONTROL_PROPERTIES*, ID2D1PrintControl*, HRESULT)).call(wicfactory, documenttarget, printcontrolproperties, printcontrol)
  end
  def set_maximum_texture_memory(maximuminbytes : UInt64) : Void
    @lpVtbl.value.set_maximum_texture_memory.unsafe_as(Proc(UInt64, Void)).call(maximuminbytes)
  end
  def get_maximum_texture_memory : UInt64
    @lpVtbl.value.get_maximum_texture_memory.unsafe_as(Proc(UInt64)).call
  end
  def clear_resources(millisecondssinceuse : UInt32) : Void
    @lpVtbl.value.clear_resources.unsafe_as(Proc(UInt32, Void)).call(millisecondssinceuse)
  end
  def get_rendering_priority : D2D1_RENDERING_PRIORITY
    @lpVtbl.value.get_rendering_priority.unsafe_as(Proc(D2D1_RENDERING_PRIORITY)).call
  end
  def set_rendering_priority(renderingpriority : D2D1_RENDERING_PRIORITY) : Void
    @lpVtbl.value.set_rendering_priority.unsafe_as(Proc(D2D1_RENDERING_PRIORITY, Void)).call(renderingpriority)
  end
  def create_device_context2(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext1 : ID2D1DeviceContext1*) : HRESULT
    @lpVtbl.value.create_device_context2.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext1*, HRESULT)).call(options, devicecontext1)
  end
  def create_device_context3(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext2 : ID2D1DeviceContext2*) : HRESULT
    @lpVtbl.value.create_device_context3.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext2*, HRESULT)).call(options, devicecontext2)
  end
  def flush_device_contexts(bitmap : ID2D1Bitmap) : Void
    @lpVtbl.value.flush_device_contexts.unsafe_as(Proc(ID2D1Bitmap, Void)).call(bitmap)
  end
  def get_dxgi_device(dxgidevice : IDXGIDevice*) : HRESULT
    @lpVtbl.value.get_dxgi_device.unsafe_as(Proc(IDXGIDevice*, HRESULT)).call(dxgidevice)
  end
  def create_device_context4(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext3 : ID2D1DeviceContext3*) : HRESULT
    @lpVtbl.value.create_device_context4.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext3*, HRESULT)).call(options, devicecontext3)
  end
  def create_device_context5(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext4 : ID2D1DeviceContext4*) : HRESULT
    @lpVtbl.value.create_device_context5.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext4*, HRESULT)).call(options, devicecontext4)
  end
  def set_maximum_color_glyph_cache_memory(maximuminbytes : UInt64) : Void
    @lpVtbl.value.set_maximum_color_glyph_cache_memory.unsafe_as(Proc(UInt64, Void)).call(maximuminbytes)
  end
  def get_maximum_color_glyph_cache_memory : UInt64
    @lpVtbl.value.get_maximum_color_glyph_cache_memory.unsafe_as(Proc(UInt64)).call
  end
end
struct LibWin32::ID2D1Factory5
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def reload_system_metrics : HRESULT
    @lpVtbl.value.reload_system_metrics.unsafe_as(Proc(HRESULT)).call
  end
  def get_desktop_dpi(dpix : Float32*, dpiy : Float32*) : Void
    @lpVtbl.value.get_desktop_dpi.unsafe_as(Proc(Float32*, Float32*, Void)).call(dpix, dpiy)
  end
  def create_rectangle_geometry(rectangle : D2D_RECT_F*, rectanglegeometry : ID2D1RectangleGeometry*) : HRESULT
    @lpVtbl.value.create_rectangle_geometry.unsafe_as(Proc(D2D_RECT_F*, ID2D1RectangleGeometry*, HRESULT)).call(rectangle, rectanglegeometry)
  end
  def create_rounded_rectangle_geometry(roundedrectangle : D2D1_ROUNDED_RECT*, roundedrectanglegeometry : ID2D1RoundedRectangleGeometry*) : HRESULT
    @lpVtbl.value.create_rounded_rectangle_geometry.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1RoundedRectangleGeometry*, HRESULT)).call(roundedrectangle, roundedrectanglegeometry)
  end
  def create_ellipse_geometry(ellipse : D2D1_ELLIPSE*, ellipsegeometry : ID2D1EllipseGeometry*) : HRESULT
    @lpVtbl.value.create_ellipse_geometry.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1EllipseGeometry*, HRESULT)).call(ellipse, ellipsegeometry)
  end
  def create_geometry_group(fillmode : D2D1_FILL_MODE, geometries : ID2D1Geometry*, geometriescount : UInt32, geometrygroup : ID2D1GeometryGroup*) : HRESULT
    @lpVtbl.value.create_geometry_group.unsafe_as(Proc(D2D1_FILL_MODE, ID2D1Geometry*, UInt32, ID2D1GeometryGroup*, HRESULT)).call(fillmode, geometries, geometriescount, geometrygroup)
  end
  def create_transformed_geometry(sourcegeometry : ID2D1Geometry, transform : D2D_MATRIX_3X2_F*, transformedgeometry : ID2D1TransformedGeometry*) : HRESULT
    @lpVtbl.value.create_transformed_geometry.unsafe_as(Proc(ID2D1Geometry, D2D_MATRIX_3X2_F*, ID2D1TransformedGeometry*, HRESULT)).call(sourcegeometry, transform, transformedgeometry)
  end
  def create_path_geometry(pathgeometry : ID2D1PathGeometry*) : HRESULT
    @lpVtbl.value.create_path_geometry.unsafe_as(Proc(ID2D1PathGeometry*, HRESULT)).call(pathgeometry)
  end
  def create_stroke_style(strokestyleproperties : D2D1_STROKE_STYLE_PROPERTIES*, dashes : Float32*, dashescount : UInt32, strokestyle : ID2D1StrokeStyle*) : HRESULT
    @lpVtbl.value.create_stroke_style.unsafe_as(Proc(D2D1_STROKE_STYLE_PROPERTIES*, Float32*, UInt32, ID2D1StrokeStyle*, HRESULT)).call(strokestyleproperties, dashes, dashescount, strokestyle)
  end
  def create_drawing_state_block(drawingstatedescription : D2D1_DRAWING_STATE_DESCRIPTION*, textrenderingparams : IDWriteRenderingParams, drawingstateblock : ID2D1DrawingStateBlock*) : HRESULT
    @lpVtbl.value.create_drawing_state_block.unsafe_as(Proc(D2D1_DRAWING_STATE_DESCRIPTION*, IDWriteRenderingParams, ID2D1DrawingStateBlock*, HRESULT)).call(drawingstatedescription, textrenderingparams, drawingstateblock)
  end
  def create_wic_bitmap_render_target(target : IWICBitmap, rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, rendertarget : ID2D1RenderTarget*) : HRESULT
    @lpVtbl.value.create_wic_bitmap_render_target.unsafe_as(Proc(IWICBitmap, D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget*, HRESULT)).call(target, rendertargetproperties, rendertarget)
  end
  def create_hwnd_render_target(rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, hwndrendertargetproperties : D2D1_HWND_RENDER_TARGET_PROPERTIES*, hwndrendertarget : ID2D1HwndRenderTarget*) : HRESULT
    @lpVtbl.value.create_hwnd_render_target.unsafe_as(Proc(D2D1_RENDER_TARGET_PROPERTIES*, D2D1_HWND_RENDER_TARGET_PROPERTIES*, ID2D1HwndRenderTarget*, HRESULT)).call(rendertargetproperties, hwndrendertargetproperties, hwndrendertarget)
  end
  def create_dxgi_surface_render_target(dxgisurface : IDXGISurface, rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, rendertarget : ID2D1RenderTarget*) : HRESULT
    @lpVtbl.value.create_dxgi_surface_render_target.unsafe_as(Proc(IDXGISurface, D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget*, HRESULT)).call(dxgisurface, rendertargetproperties, rendertarget)
  end
  def create_dc_render_target(rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, dcrendertarget : ID2D1DCRenderTarget*) : HRESULT
    @lpVtbl.value.create_dc_render_target.unsafe_as(Proc(D2D1_RENDER_TARGET_PROPERTIES*, ID2D1DCRenderTarget*, HRESULT)).call(rendertargetproperties, dcrendertarget)
  end
  def create_device(dxgidevice : IDXGIDevice, d2ddevice : ID2D1Device*) : HRESULT
    @lpVtbl.value.create_device.unsafe_as(Proc(IDXGIDevice, ID2D1Device*, HRESULT)).call(dxgidevice, d2ddevice)
  end
  def create_stroke_style2(strokestyleproperties : D2D1_STROKE_STYLE_PROPERTIES1*, dashes : Float32*, dashescount : UInt32, strokestyle : ID2D1StrokeStyle1*) : HRESULT
    @lpVtbl.value.create_stroke_style2.unsafe_as(Proc(D2D1_STROKE_STYLE_PROPERTIES1*, Float32*, UInt32, ID2D1StrokeStyle1*, HRESULT)).call(strokestyleproperties, dashes, dashescount, strokestyle)
  end
  def create_path_geometry2(pathgeometry : ID2D1PathGeometry1*) : HRESULT
    @lpVtbl.value.create_path_geometry2.unsafe_as(Proc(ID2D1PathGeometry1*, HRESULT)).call(pathgeometry)
  end
  def create_drawing_state_block2(drawingstatedescription : D2D1_DRAWING_STATE_DESCRIPTION1*, textrenderingparams : IDWriteRenderingParams, drawingstateblock : ID2D1DrawingStateBlock1*) : HRESULT
    @lpVtbl.value.create_drawing_state_block2.unsafe_as(Proc(D2D1_DRAWING_STATE_DESCRIPTION1*, IDWriteRenderingParams, ID2D1DrawingStateBlock1*, HRESULT)).call(drawingstatedescription, textrenderingparams, drawingstateblock)
  end
  def create_gdi_metafile(metafilestream : IStream, metafile : ID2D1GdiMetafile*) : HRESULT
    @lpVtbl.value.create_gdi_metafile.unsafe_as(Proc(IStream, ID2D1GdiMetafile*, HRESULT)).call(metafilestream, metafile)
  end
  def register_effect_from_stream(classid : Guid*, propertyxml : IStream, bindings : D2D1_PROPERTY_BINDING*, bindingscount : UInt32, effectfactory : PD2D1_EFFECT_FACTORY) : HRESULT
    @lpVtbl.value.register_effect_from_stream.unsafe_as(Proc(Guid*, IStream, D2D1_PROPERTY_BINDING*, UInt32, PD2D1_EFFECT_FACTORY, HRESULT)).call(classid, propertyxml, bindings, bindingscount, effectfactory)
  end
  def register_effect_from_string(classid : Guid*, propertyxml : LibC::LPWSTR, bindings : D2D1_PROPERTY_BINDING*, bindingscount : UInt32, effectfactory : PD2D1_EFFECT_FACTORY) : HRESULT
    @lpVtbl.value.register_effect_from_string.unsafe_as(Proc(Guid*, LibC::LPWSTR, D2D1_PROPERTY_BINDING*, UInt32, PD2D1_EFFECT_FACTORY, HRESULT)).call(classid, propertyxml, bindings, bindingscount, effectfactory)
  end
  def unregister_effect(classid : Guid*) : HRESULT
    @lpVtbl.value.unregister_effect.unsafe_as(Proc(Guid*, HRESULT)).call(classid)
  end
  def get_registered_effects(effects : Guid*, effectscount : UInt32, effectsreturned : UInt32*, effectsregistered : UInt32*) : HRESULT
    @lpVtbl.value.get_registered_effects.unsafe_as(Proc(Guid*, UInt32, UInt32*, UInt32*, HRESULT)).call(effects, effectscount, effectsreturned, effectsregistered)
  end
  def get_effect_properties(effectid : Guid*, properties : ID2D1Properties*) : HRESULT
    @lpVtbl.value.get_effect_properties.unsafe_as(Proc(Guid*, ID2D1Properties*, HRESULT)).call(effectid, properties)
  end
  def create_device2(dxgidevice : IDXGIDevice, d2ddevice1 : ID2D1Device1*) : HRESULT
    @lpVtbl.value.create_device2.unsafe_as(Proc(IDXGIDevice, ID2D1Device1*, HRESULT)).call(dxgidevice, d2ddevice1)
  end
  def create_device3(dxgidevice : IDXGIDevice, d2ddevice2 : ID2D1Device2*) : HRESULT
    @lpVtbl.value.create_device3.unsafe_as(Proc(IDXGIDevice, ID2D1Device2*, HRESULT)).call(dxgidevice, d2ddevice2)
  end
  def create_device4(dxgidevice : IDXGIDevice, d2ddevice3 : ID2D1Device3*) : HRESULT
    @lpVtbl.value.create_device4.unsafe_as(Proc(IDXGIDevice, ID2D1Device3*, HRESULT)).call(dxgidevice, d2ddevice3)
  end
  def create_device5(dxgidevice : IDXGIDevice, d2ddevice4 : ID2D1Device4*) : HRESULT
    @lpVtbl.value.create_device5.unsafe_as(Proc(IDXGIDevice, ID2D1Device4*, HRESULT)).call(dxgidevice, d2ddevice4)
  end
end
struct LibWin32::ID2D1CommandSink4
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def begin_draw : HRESULT
    @lpVtbl.value.begin_draw.unsafe_as(Proc(HRESULT)).call
  end
  def end_draw : HRESULT
    @lpVtbl.value.end_draw.unsafe_as(Proc(HRESULT)).call
  end
  def set_antialias_mode(antialiasmode : D2D1_ANTIALIAS_MODE) : HRESULT
    @lpVtbl.value.set_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE, HRESULT)).call(antialiasmode)
  end
  def set_tags(tag1 : UInt64, tag2 : UInt64) : HRESULT
    @lpVtbl.value.set_tags.unsafe_as(Proc(UInt64, UInt64, HRESULT)).call(tag1, tag2)
  end
  def set_text_antialias_mode(textantialiasmode : D2D1_TEXT_ANTIALIAS_MODE) : HRESULT
    @lpVtbl.value.set_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE, HRESULT)).call(textantialiasmode)
  end
  def set_text_rendering_params(textrenderingparams : IDWriteRenderingParams) : HRESULT
    @lpVtbl.value.set_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams, HRESULT)).call(textrenderingparams)
  end
  def set_transform(transform : D2D_MATRIX_3X2_F*) : HRESULT
    @lpVtbl.value.set_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, HRESULT)).call(transform)
  end
  def set_primitive_blend(primitiveblend : D2D1_PRIMITIVE_BLEND) : HRESULT
    @lpVtbl.value.set_primitive_blend.unsafe_as(Proc(D2D1_PRIMITIVE_BLEND, HRESULT)).call(primitiveblend)
  end
  def set_unit_mode(unitmode : D2D1_UNIT_MODE) : HRESULT
    @lpVtbl.value.set_unit_mode.unsafe_as(Proc(D2D1_UNIT_MODE, HRESULT)).call(unitmode)
  end
  def clear(color : D2D1_COLOR_F*) : HRESULT
    @lpVtbl.value.clear.unsafe_as(Proc(D2D1_COLOR_F*, HRESULT)).call(color)
  end
  def draw_glyph_run(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, glyphrundescription : DWRITE_GLYPH_RUN_DESCRIPTION*, foregroundbrush : ID2D1Brush, measuringmode : DWRITE_MEASURING_MODE) : HRESULT
    @lpVtbl.value.draw_glyph_run.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush, DWRITE_MEASURING_MODE, HRESULT)).call(baselineorigin, glyphrun, glyphrundescription, foregroundbrush, measuringmode)
  end
  def draw_line(point0 : D2D_POINT_2F, point1 : D2D_POINT_2F, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : HRESULT
    @lpVtbl.value.draw_line.unsafe_as(Proc(D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush, Float32, ID2D1StrokeStyle, HRESULT)).call(point0, point1, brush, strokewidth, strokestyle)
  end
  def draw_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : HRESULT
    @lpVtbl.value.draw_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, Float32, ID2D1StrokeStyle, HRESULT)).call(geometry, brush, strokewidth, strokestyle)
  end
  def draw_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : HRESULT
    @lpVtbl.value.draw_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Float32, ID2D1StrokeStyle, HRESULT)).call(rect, brush, strokewidth, strokestyle)
  end
  def draw_bitmap(bitmap : ID2D1Bitmap, destinationrectangle : D2D_RECT_F*, opacity : Float32, interpolationmode : D2D1_INTERPOLATION_MODE, sourcerectangle : D2D_RECT_F*, perspectivetransform : D2D_MATRIX_4X4_F*) : HRESULT
    @lpVtbl.value.draw_bitmap.unsafe_as(Proc(ID2D1Bitmap, D2D_RECT_F*, Float32, D2D1_INTERPOLATION_MODE, D2D_RECT_F*, D2D_MATRIX_4X4_F*, HRESULT)).call(bitmap, destinationrectangle, opacity, interpolationmode, sourcerectangle, perspectivetransform)
  end
  def draw_image(image : ID2D1Image, targetoffset : D2D_POINT_2F*, imagerectangle : D2D_RECT_F*, interpolationmode : D2D1_INTERPOLATION_MODE, compositemode : D2D1_COMPOSITE_MODE) : HRESULT
    @lpVtbl.value.draw_image.unsafe_as(Proc(ID2D1Image, D2D_POINT_2F*, D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE, HRESULT)).call(image, targetoffset, imagerectangle, interpolationmode, compositemode)
  end
  def draw_gdi_metafile(gdimetafile : ID2D1GdiMetafile, targetoffset : D2D_POINT_2F*) : HRESULT
    @lpVtbl.value.draw_gdi_metafile.unsafe_as(Proc(ID2D1GdiMetafile, D2D_POINT_2F*, HRESULT)).call(gdimetafile, targetoffset)
  end
  def fill_mesh(mesh : ID2D1Mesh, brush : ID2D1Brush) : HRESULT
    @lpVtbl.value.fill_mesh.unsafe_as(Proc(ID2D1Mesh, ID2D1Brush, HRESULT)).call(mesh, brush)
  end
  def fill_opacity_mask(opacitymask : ID2D1Bitmap, brush : ID2D1Brush, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.fill_opacity_mask.unsafe_as(Proc(ID2D1Bitmap, ID2D1Brush, D2D_RECT_F*, D2D_RECT_F*, HRESULT)).call(opacitymask, brush, destinationrectangle, sourcerectangle)
  end
  def fill_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, opacitybrush : ID2D1Brush) : HRESULT
    @lpVtbl.value.fill_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, ID2D1Brush, HRESULT)).call(geometry, brush, opacitybrush)
  end
  def fill_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush) : HRESULT
    @lpVtbl.value.fill_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, HRESULT)).call(rect, brush)
  end
  def push_axis_aligned_clip(cliprect : D2D_RECT_F*, antialiasmode : D2D1_ANTIALIAS_MODE) : HRESULT
    @lpVtbl.value.push_axis_aligned_clip.unsafe_as(Proc(D2D_RECT_F*, D2D1_ANTIALIAS_MODE, HRESULT)).call(cliprect, antialiasmode)
  end
  def push_layer(layerparameters1 : D2D1_LAYER_PARAMETERS1*, layer : ID2D1Layer) : HRESULT
    @lpVtbl.value.push_layer.unsafe_as(Proc(D2D1_LAYER_PARAMETERS1*, ID2D1Layer, HRESULT)).call(layerparameters1, layer)
  end
  def pop_axis_aligned_clip : HRESULT
    @lpVtbl.value.pop_axis_aligned_clip.unsafe_as(Proc(HRESULT)).call
  end
  def pop_layer : HRESULT
    @lpVtbl.value.pop_layer.unsafe_as(Proc(HRESULT)).call
  end
  def set_primitive_blend1(primitiveblend : D2D1_PRIMITIVE_BLEND) : HRESULT
    @lpVtbl.value.set_primitive_blend1.unsafe_as(Proc(D2D1_PRIMITIVE_BLEND, HRESULT)).call(primitiveblend)
  end
  def draw_ink(ink : ID2D1Ink, brush : ID2D1Brush, inkstyle : ID2D1InkStyle) : HRESULT
    @lpVtbl.value.draw_ink.unsafe_as(Proc(ID2D1Ink, ID2D1Brush, ID2D1InkStyle, HRESULT)).call(ink, brush, inkstyle)
  end
  def draw_gradient_mesh(gradientmesh : ID2D1GradientMesh) : HRESULT
    @lpVtbl.value.draw_gradient_mesh.unsafe_as(Proc(ID2D1GradientMesh, HRESULT)).call(gradientmesh)
  end
  def draw_gdi_metafile2(gdimetafile : ID2D1GdiMetafile, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.draw_gdi_metafile2.unsafe_as(Proc(ID2D1GdiMetafile, D2D_RECT_F*, D2D_RECT_F*, HRESULT)).call(gdimetafile, destinationrectangle, sourcerectangle)
  end
  def draw_sprite_batch(spritebatch : ID2D1SpriteBatch, startindex : UInt32, spritecount : UInt32, bitmap : ID2D1Bitmap, interpolationmode : D2D1_BITMAP_INTERPOLATION_MODE, spriteoptions : D2D1_SPRITE_OPTIONS) : HRESULT
    @lpVtbl.value.draw_sprite_batch.unsafe_as(Proc(ID2D1SpriteBatch, UInt32, UInt32, ID2D1Bitmap, D2D1_BITMAP_INTERPOLATION_MODE, D2D1_SPRITE_OPTIONS, HRESULT)).call(spritebatch, startindex, spritecount, bitmap, interpolationmode, spriteoptions)
  end
  def set_primitive_blend2(primitiveblend : D2D1_PRIMITIVE_BLEND) : HRESULT
    @lpVtbl.value.set_primitive_blend2.unsafe_as(Proc(D2D1_PRIMITIVE_BLEND, HRESULT)).call(primitiveblend)
  end
end
struct LibWin32::ID2D1ColorContext1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def get_color_space : D2D1_COLOR_SPACE
    @lpVtbl.value.get_color_space.unsafe_as(Proc(D2D1_COLOR_SPACE)).call
  end
  def get_profile_size : UInt32
    @lpVtbl.value.get_profile_size.unsafe_as(Proc(UInt32)).call
  end
  def get_profile(profile : UInt8*, profilesize : UInt32) : HRESULT
    @lpVtbl.value.get_profile.unsafe_as(Proc(UInt8*, UInt32, HRESULT)).call(profile, profilesize)
  end
  def get_color_context_type : D2D1_COLOR_CONTEXT_TYPE
    @lpVtbl.value.get_color_context_type.unsafe_as(Proc(D2D1_COLOR_CONTEXT_TYPE)).call
  end
  def get_dxgi_color_space : DXGI_COLOR_SPACE_TYPE
    @lpVtbl.value.get_dxgi_color_space.unsafe_as(Proc(DXGI_COLOR_SPACE_TYPE)).call
  end
  def get_simple_color_profile(simpleprofile : D2D1_SIMPLE_COLOR_PROFILE*) : HRESULT
    @lpVtbl.value.get_simple_color_profile.unsafe_as(Proc(D2D1_SIMPLE_COLOR_PROFILE*, HRESULT)).call(simpleprofile)
  end
end
struct LibWin32::ID2D1DeviceContext5
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def create_bitmap(size : D2D_SIZE_U, srcdata : Void*, pitch : UInt32, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_bitmap.unsafe_as(Proc(D2D_SIZE_U, Void*, UInt32, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(size, srcdata, pitch, bitmapproperties, bitmap)
  end
  def create_bitmap_from_wic_bitmap(wicbitmapsource : IWICBitmapSource, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_bitmap_from_wic_bitmap.unsafe_as(Proc(IWICBitmapSource, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(wicbitmapsource, bitmapproperties, bitmap)
  end
  def create_shared_bitmap(riid : Guid*, data : Void*, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_shared_bitmap.unsafe_as(Proc(Guid*, Void*, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(riid, data, bitmapproperties, bitmap)
  end
  def create_bitmap_brush(bitmap : ID2D1Bitmap, bitmapbrushproperties : D2D1_BITMAP_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, bitmapbrush : ID2D1BitmapBrush*) : HRESULT
    @lpVtbl.value.create_bitmap_brush.unsafe_as(Proc(ID2D1Bitmap, D2D1_BITMAP_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush*, HRESULT)).call(bitmap, bitmapbrushproperties, brushproperties, bitmapbrush)
  end
  def create_solid_color_brush(color : D2D1_COLOR_F*, brushproperties : D2D1_BRUSH_PROPERTIES*, solidcolorbrush : ID2D1SolidColorBrush*) : HRESULT
    @lpVtbl.value.create_solid_color_brush.unsafe_as(Proc(D2D1_COLOR_F*, D2D1_BRUSH_PROPERTIES*, ID2D1SolidColorBrush*, HRESULT)).call(color, brushproperties, solidcolorbrush)
  end
  def create_gradient_stop_collection(gradientstops : D2D1_GRADIENT_STOP*, gradientstopscount : UInt32, colorinterpolationgamma : D2D1_GAMMA, extendmode : D2D1_EXTEND_MODE, gradientstopcollection : ID2D1GradientStopCollection*) : HRESULT
    @lpVtbl.value.create_gradient_stop_collection.unsafe_as(Proc(D2D1_GRADIENT_STOP*, UInt32, D2D1_GAMMA, D2D1_EXTEND_MODE, ID2D1GradientStopCollection*, HRESULT)).call(gradientstops, gradientstopscount, colorinterpolationgamma, extendmode, gradientstopcollection)
  end
  def create_linear_gradient_brush(lineargradientbrushproperties : D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, gradientstopcollection : ID2D1GradientStopCollection, lineargradientbrush : ID2D1LinearGradientBrush*) : HRESULT
    @lpVtbl.value.create_linear_gradient_brush.unsafe_as(Proc(D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection, ID2D1LinearGradientBrush*, HRESULT)).call(lineargradientbrushproperties, brushproperties, gradientstopcollection, lineargradientbrush)
  end
  def create_radial_gradient_brush(radialgradientbrushproperties : D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, gradientstopcollection : ID2D1GradientStopCollection, radialgradientbrush : ID2D1RadialGradientBrush*) : HRESULT
    @lpVtbl.value.create_radial_gradient_brush.unsafe_as(Proc(D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection, ID2D1RadialGradientBrush*, HRESULT)).call(radialgradientbrushproperties, brushproperties, gradientstopcollection, radialgradientbrush)
  end
  def create_compatible_render_target(desiredsize : D2D_SIZE_F*, desiredpixelsize : D2D_SIZE_U*, desiredformat : D2D1_PIXEL_FORMAT*, options : D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, bitmaprendertarget : ID2D1BitmapRenderTarget*) : HRESULT
    @lpVtbl.value.create_compatible_render_target.unsafe_as(Proc(D2D_SIZE_F*, D2D_SIZE_U*, D2D1_PIXEL_FORMAT*, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, ID2D1BitmapRenderTarget*, HRESULT)).call(desiredsize, desiredpixelsize, desiredformat, options, bitmaprendertarget)
  end
  def create_layer(size : D2D_SIZE_F*, layer : ID2D1Layer*) : HRESULT
    @lpVtbl.value.create_layer.unsafe_as(Proc(D2D_SIZE_F*, ID2D1Layer*, HRESULT)).call(size, layer)
  end
  def create_mesh(mesh : ID2D1Mesh*) : HRESULT
    @lpVtbl.value.create_mesh.unsafe_as(Proc(ID2D1Mesh*, HRESULT)).call(mesh)
  end
  def draw_line(point0 : D2D_POINT_2F, point1 : D2D_POINT_2F, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_line.unsafe_as(Proc(D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(point0, point1, brush, strokewidth, strokestyle)
  end
  def draw_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(rect, brush, strokewidth, strokestyle)
  end
  def fill_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Void)).call(rect, brush)
  end
  def draw_rounded_rectangle(roundedrect : D2D1_ROUNDED_RECT*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_rounded_rectangle.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(roundedrect, brush, strokewidth, strokestyle)
  end
  def fill_rounded_rectangle(roundedrect : D2D1_ROUNDED_RECT*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_rounded_rectangle.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1Brush, Void)).call(roundedrect, brush)
  end
  def draw_ellipse(ellipse : D2D1_ELLIPSE*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_ellipse.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(ellipse, brush, strokewidth, strokestyle)
  end
  def fill_ellipse(ellipse : D2D1_ELLIPSE*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_ellipse.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1Brush, Void)).call(ellipse, brush)
  end
  def draw_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(geometry, brush, strokewidth, strokestyle)
  end
  def fill_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, opacitybrush : ID2D1Brush) : Void
    @lpVtbl.value.fill_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, ID2D1Brush, Void)).call(geometry, brush, opacitybrush)
  end
  def fill_mesh(mesh : ID2D1Mesh, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_mesh.unsafe_as(Proc(ID2D1Mesh, ID2D1Brush, Void)).call(mesh, brush)
  end
  def fill_opacity_mask(opacitymask : ID2D1Bitmap, brush : ID2D1Brush, content : D2D1_OPACITY_MASK_CONTENT, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.fill_opacity_mask.unsafe_as(Proc(ID2D1Bitmap, ID2D1Brush, D2D1_OPACITY_MASK_CONTENT, D2D_RECT_F*, D2D_RECT_F*, Void)).call(opacitymask, brush, content, destinationrectangle, sourcerectangle)
  end
  def draw_bitmap(bitmap : ID2D1Bitmap, destinationrectangle : D2D_RECT_F*, opacity : Float32, interpolationmode : D2D1_BITMAP_INTERPOLATION_MODE, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.draw_bitmap.unsafe_as(Proc(ID2D1Bitmap, D2D_RECT_F*, Float32, D2D1_BITMAP_INTERPOLATION_MODE, D2D_RECT_F*, Void)).call(bitmap, destinationrectangle, opacity, interpolationmode, sourcerectangle)
  end
  def draw_text(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, layoutrect : D2D_RECT_F*, defaultfillbrush : ID2D1Brush, options : D2D1_DRAW_TEXT_OPTIONS, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_text.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, D2D_RECT_F*, ID2D1Brush, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE, Void)).call(string, stringlength, textformat, layoutrect, defaultfillbrush, options, measuringmode)
  end
  def draw_text_layout(origin : D2D_POINT_2F, textlayout : IDWriteTextLayout, defaultfillbrush : ID2D1Brush, options : D2D1_DRAW_TEXT_OPTIONS) : Void
    @lpVtbl.value.draw_text_layout.unsafe_as(Proc(D2D_POINT_2F, IDWriteTextLayout, ID2D1Brush, D2D1_DRAW_TEXT_OPTIONS, Void)).call(origin, textlayout, defaultfillbrush, options)
  end
  def draw_glyph_run(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, foregroundbrush : ID2D1Brush, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_glyph_run.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, ID2D1Brush, DWRITE_MEASURING_MODE, Void)).call(baselineorigin, glyphrun, foregroundbrush, measuringmode)
  end
  def set_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.set_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def get_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.get_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def set_antialias_mode(antialiasmode : D2D1_ANTIALIAS_MODE) : Void
    @lpVtbl.value.set_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE, Void)).call(antialiasmode)
  end
  def get_antialias_mode : D2D1_ANTIALIAS_MODE
    @lpVtbl.value.get_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE)).call
  end
  def set_text_antialias_mode(textantialiasmode : D2D1_TEXT_ANTIALIAS_MODE) : Void
    @lpVtbl.value.set_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE, Void)).call(textantialiasmode)
  end
  def get_text_antialias_mode : D2D1_TEXT_ANTIALIAS_MODE
    @lpVtbl.value.get_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE)).call
  end
  def set_text_rendering_params(textrenderingparams : IDWriteRenderingParams) : Void
    @lpVtbl.value.set_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams, Void)).call(textrenderingparams)
  end
  def get_text_rendering_params(textrenderingparams : IDWriteRenderingParams*) : Void
    @lpVtbl.value.get_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams*, Void)).call(textrenderingparams)
  end
  def set_tags(tag1 : UInt64, tag2 : UInt64) : Void
    @lpVtbl.value.set_tags.unsafe_as(Proc(UInt64, UInt64, Void)).call(tag1, tag2)
  end
  def get_tags(tag1 : UInt64*, tag2 : UInt64*) : Void
    @lpVtbl.value.get_tags.unsafe_as(Proc(UInt64*, UInt64*, Void)).call(tag1, tag2)
  end
  def push_layer(layerparameters : D2D1_LAYER_PARAMETERS*, layer : ID2D1Layer) : Void
    @lpVtbl.value.push_layer.unsafe_as(Proc(D2D1_LAYER_PARAMETERS*, ID2D1Layer, Void)).call(layerparameters, layer)
  end
  def pop_layer : Void
    @lpVtbl.value.pop_layer.unsafe_as(Proc(Void)).call
  end
  def flush(tag1 : UInt64*, tag2 : UInt64*) : HRESULT
    @lpVtbl.value.flush.unsafe_as(Proc(UInt64*, UInt64*, HRESULT)).call(tag1, tag2)
  end
  def save_drawing_state(drawingstateblock : ID2D1DrawingStateBlock) : Void
    @lpVtbl.value.save_drawing_state.unsafe_as(Proc(ID2D1DrawingStateBlock, Void)).call(drawingstateblock)
  end
  def restore_drawing_state(drawingstateblock : ID2D1DrawingStateBlock) : Void
    @lpVtbl.value.restore_drawing_state.unsafe_as(Proc(ID2D1DrawingStateBlock, Void)).call(drawingstateblock)
  end
  def push_axis_aligned_clip(cliprect : D2D_RECT_F*, antialiasmode : D2D1_ANTIALIAS_MODE) : Void
    @lpVtbl.value.push_axis_aligned_clip.unsafe_as(Proc(D2D_RECT_F*, D2D1_ANTIALIAS_MODE, Void)).call(cliprect, antialiasmode)
  end
  def pop_axis_aligned_clip : Void
    @lpVtbl.value.pop_axis_aligned_clip.unsafe_as(Proc(Void)).call
  end
  def clear(clearcolor : D2D1_COLOR_F*) : Void
    @lpVtbl.value.clear.unsafe_as(Proc(D2D1_COLOR_F*, Void)).call(clearcolor)
  end
  def begin_draw : Void
    @lpVtbl.value.begin_draw.unsafe_as(Proc(Void)).call
  end
  def end_draw(tag1 : UInt64*, tag2 : UInt64*) : HRESULT
    @lpVtbl.value.end_draw.unsafe_as(Proc(UInt64*, UInt64*, HRESULT)).call(tag1, tag2)
  end
  def get_pixel_format : D2D1_PIXEL_FORMAT
    @lpVtbl.value.get_pixel_format.unsafe_as(Proc(D2D1_PIXEL_FORMAT)).call
  end
  def set_dpi(dpix : Float32, dpiy : Float32) : Void
    @lpVtbl.value.set_dpi.unsafe_as(Proc(Float32, Float32, Void)).call(dpix, dpiy)
  end
  def get_dpi(dpix : Float32*, dpiy : Float32*) : Void
    @lpVtbl.value.get_dpi.unsafe_as(Proc(Float32*, Float32*, Void)).call(dpix, dpiy)
  end
  def get_size : D2D_SIZE_F
    @lpVtbl.value.get_size.unsafe_as(Proc(D2D_SIZE_F)).call
  end
  def get_pixel_size : D2D_SIZE_U
    @lpVtbl.value.get_pixel_size.unsafe_as(Proc(D2D_SIZE_U)).call
  end
  def get_maximum_bitmap_size : UInt32
    @lpVtbl.value.get_maximum_bitmap_size.unsafe_as(Proc(UInt32)).call
  end
  def is_supported(rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*) : LibC::BOOL
    @lpVtbl.value.is_supported.unsafe_as(Proc(D2D1_RENDER_TARGET_PROPERTIES*, LibC::BOOL)).call(rendertargetproperties)
  end
  def create_bitmap2(size : D2D_SIZE_U, sourcedata : Void*, pitch : UInt32, bitmapproperties : D2D1_BITMAP_PROPERTIES1*, bitmap : ID2D1Bitmap1*) : HRESULT
    @lpVtbl.value.create_bitmap2.unsafe_as(Proc(D2D_SIZE_U, Void*, UInt32, D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1*, HRESULT)).call(size, sourcedata, pitch, bitmapproperties, bitmap)
  end
  def create_bitmap_from_wic_bitmap2(wicbitmapsource : IWICBitmapSource, bitmapproperties : D2D1_BITMAP_PROPERTIES1*, bitmap : ID2D1Bitmap1*) : HRESULT
    @lpVtbl.value.create_bitmap_from_wic_bitmap2.unsafe_as(Proc(IWICBitmapSource, D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1*, HRESULT)).call(wicbitmapsource, bitmapproperties, bitmap)
  end
  def create_color_context(space : D2D1_COLOR_SPACE, profile : UInt8*, profilesize : UInt32, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context.unsafe_as(Proc(D2D1_COLOR_SPACE, UInt8*, UInt32, ID2D1ColorContext*, HRESULT)).call(space, profile, profilesize, colorcontext)
  end
  def create_color_context_from_filename(filename : LibC::LPWSTR, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context_from_filename.unsafe_as(Proc(LibC::LPWSTR, ID2D1ColorContext*, HRESULT)).call(filename, colorcontext)
  end
  def create_color_context_from_wic_color_context(wiccolorcontext : IWICColorContext, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context_from_wic_color_context.unsafe_as(Proc(IWICColorContext, ID2D1ColorContext*, HRESULT)).call(wiccolorcontext, colorcontext)
  end
  def create_bitmap_from_dxgi_surface(surface : IDXGISurface, bitmapproperties : D2D1_BITMAP_PROPERTIES1*, bitmap : ID2D1Bitmap1*) : HRESULT
    @lpVtbl.value.create_bitmap_from_dxgi_surface.unsafe_as(Proc(IDXGISurface, D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1*, HRESULT)).call(surface, bitmapproperties, bitmap)
  end
  def create_effect(effectid : Guid*, effect : ID2D1Effect*) : HRESULT
    @lpVtbl.value.create_effect.unsafe_as(Proc(Guid*, ID2D1Effect*, HRESULT)).call(effectid, effect)
  end
  def create_gradient_stop_collection2(straightalphagradientstops : D2D1_GRADIENT_STOP*, straightalphagradientstopscount : UInt32, preinterpolationspace : D2D1_COLOR_SPACE, postinterpolationspace : D2D1_COLOR_SPACE, bufferprecision : D2D1_BUFFER_PRECISION, extendmode : D2D1_EXTEND_MODE, colorinterpolationmode : D2D1_COLOR_INTERPOLATION_MODE, gradientstopcollection1 : ID2D1GradientStopCollection1*) : HRESULT
    @lpVtbl.value.create_gradient_stop_collection2.unsafe_as(Proc(D2D1_GRADIENT_STOP*, UInt32, D2D1_COLOR_SPACE, D2D1_COLOR_SPACE, D2D1_BUFFER_PRECISION, D2D1_EXTEND_MODE, D2D1_COLOR_INTERPOLATION_MODE, ID2D1GradientStopCollection1*, HRESULT)).call(straightalphagradientstops, straightalphagradientstopscount, preinterpolationspace, postinterpolationspace, bufferprecision, extendmode, colorinterpolationmode, gradientstopcollection1)
  end
  def create_image_brush(image : ID2D1Image, imagebrushproperties : D2D1_IMAGE_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, imagebrush : ID2D1ImageBrush*) : HRESULT
    @lpVtbl.value.create_image_brush.unsafe_as(Proc(ID2D1Image, D2D1_IMAGE_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1ImageBrush*, HRESULT)).call(image, imagebrushproperties, brushproperties, imagebrush)
  end
  def create_bitmap_brush2(bitmap : ID2D1Bitmap, bitmapbrushproperties : D2D1_BITMAP_BRUSH_PROPERTIES1*, brushproperties : D2D1_BRUSH_PROPERTIES*, bitmapbrush : ID2D1BitmapBrush1*) : HRESULT
    @lpVtbl.value.create_bitmap_brush2.unsafe_as(Proc(ID2D1Bitmap, D2D1_BITMAP_BRUSH_PROPERTIES1*, D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush1*, HRESULT)).call(bitmap, bitmapbrushproperties, brushproperties, bitmapbrush)
  end
  def create_command_list(commandlist : ID2D1CommandList*) : HRESULT
    @lpVtbl.value.create_command_list.unsafe_as(Proc(ID2D1CommandList*, HRESULT)).call(commandlist)
  end
  def is_dxgi_format_supported(format : DXGI_FORMAT) : LibC::BOOL
    @lpVtbl.value.is_dxgi_format_supported.unsafe_as(Proc(DXGI_FORMAT, LibC::BOOL)).call(format)
  end
  def is_buffer_precision_supported(bufferprecision : D2D1_BUFFER_PRECISION) : LibC::BOOL
    @lpVtbl.value.is_buffer_precision_supported.unsafe_as(Proc(D2D1_BUFFER_PRECISION, LibC::BOOL)).call(bufferprecision)
  end
  def get_image_local_bounds(image : ID2D1Image, localbounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_image_local_bounds.unsafe_as(Proc(ID2D1Image, D2D_RECT_F*, HRESULT)).call(image, localbounds)
  end
  def get_image_world_bounds(image : ID2D1Image, worldbounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_image_world_bounds.unsafe_as(Proc(ID2D1Image, D2D_RECT_F*, HRESULT)).call(image, worldbounds)
  end
  def get_glyph_run_world_bounds(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, measuringmode : DWRITE_MEASURING_MODE, bounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_glyph_run_world_bounds.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D_RECT_F*, HRESULT)).call(baselineorigin, glyphrun, measuringmode, bounds)
  end
  def get_device(device : ID2D1Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID2D1Device*, Void)).call(device)
  end
  def set_target(image : ID2D1Image) : Void
    @lpVtbl.value.set_target.unsafe_as(Proc(ID2D1Image, Void)).call(image)
  end
  def get_target(image : ID2D1Image*) : Void
    @lpVtbl.value.get_target.unsafe_as(Proc(ID2D1Image*, Void)).call(image)
  end
  def set_rendering_controls(renderingcontrols : D2D1_RENDERING_CONTROLS*) : Void
    @lpVtbl.value.set_rendering_controls.unsafe_as(Proc(D2D1_RENDERING_CONTROLS*, Void)).call(renderingcontrols)
  end
  def get_rendering_controls(renderingcontrols : D2D1_RENDERING_CONTROLS*) : Void
    @lpVtbl.value.get_rendering_controls.unsafe_as(Proc(D2D1_RENDERING_CONTROLS*, Void)).call(renderingcontrols)
  end
  def set_primitive_blend(primitiveblend : D2D1_PRIMITIVE_BLEND) : Void
    @lpVtbl.value.set_primitive_blend.unsafe_as(Proc(D2D1_PRIMITIVE_BLEND, Void)).call(primitiveblend)
  end
  def get_primitive_blend : D2D1_PRIMITIVE_BLEND
    @lpVtbl.value.get_primitive_blend.unsafe_as(Proc(D2D1_PRIMITIVE_BLEND)).call
  end
  def set_unit_mode(unitmode : D2D1_UNIT_MODE) : Void
    @lpVtbl.value.set_unit_mode.unsafe_as(Proc(D2D1_UNIT_MODE, Void)).call(unitmode)
  end
  def get_unit_mode : D2D1_UNIT_MODE
    @lpVtbl.value.get_unit_mode.unsafe_as(Proc(D2D1_UNIT_MODE)).call
  end
  def draw_glyph_run2(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, glyphrundescription : DWRITE_GLYPH_RUN_DESCRIPTION*, foregroundbrush : ID2D1Brush, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_glyph_run2.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush, DWRITE_MEASURING_MODE, Void)).call(baselineorigin, glyphrun, glyphrundescription, foregroundbrush, measuringmode)
  end
  def draw_image(image : ID2D1Image, targetoffset : D2D_POINT_2F*, imagerectangle : D2D_RECT_F*, interpolationmode : D2D1_INTERPOLATION_MODE, compositemode : D2D1_COMPOSITE_MODE) : Void
    @lpVtbl.value.draw_image.unsafe_as(Proc(ID2D1Image, D2D_POINT_2F*, D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE, Void)).call(image, targetoffset, imagerectangle, interpolationmode, compositemode)
  end
  def draw_gdi_metafile(gdimetafile : ID2D1GdiMetafile, targetoffset : D2D_POINT_2F*) : Void
    @lpVtbl.value.draw_gdi_metafile.unsafe_as(Proc(ID2D1GdiMetafile, D2D_POINT_2F*, Void)).call(gdimetafile, targetoffset)
  end
  def draw_bitmap2(bitmap : ID2D1Bitmap, destinationrectangle : D2D_RECT_F*, opacity : Float32, interpolationmode : D2D1_INTERPOLATION_MODE, sourcerectangle : D2D_RECT_F*, perspectivetransform : D2D_MATRIX_4X4_F*) : Void
    @lpVtbl.value.draw_bitmap2.unsafe_as(Proc(ID2D1Bitmap, D2D_RECT_F*, Float32, D2D1_INTERPOLATION_MODE, D2D_RECT_F*, D2D_MATRIX_4X4_F*, Void)).call(bitmap, destinationrectangle, opacity, interpolationmode, sourcerectangle, perspectivetransform)
  end
  def push_layer2(layerparameters : D2D1_LAYER_PARAMETERS1*, layer : ID2D1Layer) : Void
    @lpVtbl.value.push_layer2.unsafe_as(Proc(D2D1_LAYER_PARAMETERS1*, ID2D1Layer, Void)).call(layerparameters, layer)
  end
  def invalidate_effect_input_rectangle(effect : ID2D1Effect, input : UInt32, inputrectangle : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.invalidate_effect_input_rectangle.unsafe_as(Proc(ID2D1Effect, UInt32, D2D_RECT_F*, HRESULT)).call(effect, input, inputrectangle)
  end
  def get_effect_invalid_rectangle_count(effect : ID2D1Effect, rectanglecount : UInt32*) : HRESULT
    @lpVtbl.value.get_effect_invalid_rectangle_count.unsafe_as(Proc(ID2D1Effect, UInt32*, HRESULT)).call(effect, rectanglecount)
  end
  def get_effect_invalid_rectangles(effect : ID2D1Effect, rectangles : D2D_RECT_F*, rectanglescount : UInt32) : HRESULT
    @lpVtbl.value.get_effect_invalid_rectangles.unsafe_as(Proc(ID2D1Effect, D2D_RECT_F*, UInt32, HRESULT)).call(effect, rectangles, rectanglescount)
  end
  def get_effect_required_input_rectangles(rendereffect : ID2D1Effect, renderimagerectangle : D2D_RECT_F*, inputdescriptions : D2D1_EFFECT_INPUT_DESCRIPTION*, requiredinputrects : D2D_RECT_F*, inputcount : UInt32) : HRESULT
    @lpVtbl.value.get_effect_required_input_rectangles.unsafe_as(Proc(ID2D1Effect, D2D_RECT_F*, D2D1_EFFECT_INPUT_DESCRIPTION*, D2D_RECT_F*, UInt32, HRESULT)).call(rendereffect, renderimagerectangle, inputdescriptions, requiredinputrects, inputcount)
  end
  def fill_opacity_mask2(opacitymask : ID2D1Bitmap, brush : ID2D1Brush, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.fill_opacity_mask2.unsafe_as(Proc(ID2D1Bitmap, ID2D1Brush, D2D_RECT_F*, D2D_RECT_F*, Void)).call(opacitymask, brush, destinationrectangle, sourcerectangle)
  end
  def create_filled_geometry_realization(geometry : ID2D1Geometry, flatteningtolerance : Float32, geometryrealization : ID2D1GeometryRealization*) : HRESULT
    @lpVtbl.value.create_filled_geometry_realization.unsafe_as(Proc(ID2D1Geometry, Float32, ID2D1GeometryRealization*, HRESULT)).call(geometry, flatteningtolerance, geometryrealization)
  end
  def create_stroked_geometry_realization(geometry : ID2D1Geometry, flatteningtolerance : Float32, strokewidth : Float32, strokestyle : ID2D1StrokeStyle, geometryrealization : ID2D1GeometryRealization*) : HRESULT
    @lpVtbl.value.create_stroked_geometry_realization.unsafe_as(Proc(ID2D1Geometry, Float32, Float32, ID2D1StrokeStyle, ID2D1GeometryRealization*, HRESULT)).call(geometry, flatteningtolerance, strokewidth, strokestyle, geometryrealization)
  end
  def draw_geometry_realization(geometryrealization : ID2D1GeometryRealization, brush : ID2D1Brush) : Void
    @lpVtbl.value.draw_geometry_realization.unsafe_as(Proc(ID2D1GeometryRealization, ID2D1Brush, Void)).call(geometryrealization, brush)
  end
  def create_ink(startpoint : D2D1_INK_POINT*, ink : ID2D1Ink*) : HRESULT
    @lpVtbl.value.create_ink.unsafe_as(Proc(D2D1_INK_POINT*, ID2D1Ink*, HRESULT)).call(startpoint, ink)
  end
  def create_ink_style(inkstyleproperties : D2D1_INK_STYLE_PROPERTIES*, inkstyle : ID2D1InkStyle*) : HRESULT
    @lpVtbl.value.create_ink_style.unsafe_as(Proc(D2D1_INK_STYLE_PROPERTIES*, ID2D1InkStyle*, HRESULT)).call(inkstyleproperties, inkstyle)
  end
  def create_gradient_mesh(patches : D2D1_GRADIENT_MESH_PATCH*, patchescount : UInt32, gradientmesh : ID2D1GradientMesh*) : HRESULT
    @lpVtbl.value.create_gradient_mesh.unsafe_as(Proc(D2D1_GRADIENT_MESH_PATCH*, UInt32, ID2D1GradientMesh*, HRESULT)).call(patches, patchescount, gradientmesh)
  end
  def create_image_source_from_wic(wicbitmapsource : IWICBitmapSource, loadingoptions : D2D1_IMAGE_SOURCE_LOADING_OPTIONS, alphamode : D2D1_ALPHA_MODE, imagesource : ID2D1ImageSourceFromWic*) : HRESULT
    @lpVtbl.value.create_image_source_from_wic.unsafe_as(Proc(IWICBitmapSource, D2D1_IMAGE_SOURCE_LOADING_OPTIONS, D2D1_ALPHA_MODE, ID2D1ImageSourceFromWic*, HRESULT)).call(wicbitmapsource, loadingoptions, alphamode, imagesource)
  end
  def create_lookup_table3_d(precision : D2D1_BUFFER_PRECISION, extents : UInt32*, data : UInt8*, datacount : UInt32, strides : UInt32*, lookuptable : ID2D1LookupTable3D*) : HRESULT
    @lpVtbl.value.create_lookup_table3_d.unsafe_as(Proc(D2D1_BUFFER_PRECISION, UInt32*, UInt8*, UInt32, UInt32*, ID2D1LookupTable3D*, HRESULT)).call(precision, extents, data, datacount, strides, lookuptable)
  end
  def create_image_source_from_dxgi(surfaces : IDXGISurface*, surfacecount : UInt32, colorspace : DXGI_COLOR_SPACE_TYPE, options : D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, imagesource : ID2D1ImageSource*) : HRESULT
    @lpVtbl.value.create_image_source_from_dxgi.unsafe_as(Proc(IDXGISurface*, UInt32, DXGI_COLOR_SPACE_TYPE, D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, ID2D1ImageSource*, HRESULT)).call(surfaces, surfacecount, colorspace, options, imagesource)
  end
  def get_gradient_mesh_world_bounds(gradientmesh : ID2D1GradientMesh, pbounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_gradient_mesh_world_bounds.unsafe_as(Proc(ID2D1GradientMesh, D2D_RECT_F*, HRESULT)).call(gradientmesh, pbounds)
  end
  def draw_ink(ink : ID2D1Ink, brush : ID2D1Brush, inkstyle : ID2D1InkStyle) : Void
    @lpVtbl.value.draw_ink.unsafe_as(Proc(ID2D1Ink, ID2D1Brush, ID2D1InkStyle, Void)).call(ink, brush, inkstyle)
  end
  def draw_gradient_mesh(gradientmesh : ID2D1GradientMesh) : Void
    @lpVtbl.value.draw_gradient_mesh.unsafe_as(Proc(ID2D1GradientMesh, Void)).call(gradientmesh)
  end
  def draw_gdi_metafile2(gdimetafile : ID2D1GdiMetafile, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.draw_gdi_metafile2.unsafe_as(Proc(ID2D1GdiMetafile, D2D_RECT_F*, D2D_RECT_F*, Void)).call(gdimetafile, destinationrectangle, sourcerectangle)
  end
  def create_transformed_image_source(imagesource : ID2D1ImageSource, properties : D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, transformedimagesource : ID2D1TransformedImageSource*) : HRESULT
    @lpVtbl.value.create_transformed_image_source.unsafe_as(Proc(ID2D1ImageSource, D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, ID2D1TransformedImageSource*, HRESULT)).call(imagesource, properties, transformedimagesource)
  end
  def create_sprite_batch(spritebatch : ID2D1SpriteBatch*) : HRESULT
    @lpVtbl.value.create_sprite_batch.unsafe_as(Proc(ID2D1SpriteBatch*, HRESULT)).call(spritebatch)
  end
  def draw_sprite_batch(spritebatch : ID2D1SpriteBatch, startindex : UInt32, spritecount : UInt32, bitmap : ID2D1Bitmap, interpolationmode : D2D1_BITMAP_INTERPOLATION_MODE, spriteoptions : D2D1_SPRITE_OPTIONS) : Void
    @lpVtbl.value.draw_sprite_batch.unsafe_as(Proc(ID2D1SpriteBatch, UInt32, UInt32, ID2D1Bitmap, D2D1_BITMAP_INTERPOLATION_MODE, D2D1_SPRITE_OPTIONS, Void)).call(spritebatch, startindex, spritecount, bitmap, interpolationmode, spriteoptions)
  end
  def create_svg_glyph_style(svgglyphstyle : ID2D1SvgGlyphStyle*) : HRESULT
    @lpVtbl.value.create_svg_glyph_style.unsafe_as(Proc(ID2D1SvgGlyphStyle*, HRESULT)).call(svgglyphstyle)
  end
  def draw_text2(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, layoutrect : D2D_RECT_F*, defaultfillbrush : ID2D1Brush, svgglyphstyle : ID2D1SvgGlyphStyle, colorpaletteindex : UInt32, options : D2D1_DRAW_TEXT_OPTIONS, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_text2.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, D2D_RECT_F*, ID2D1Brush, ID2D1SvgGlyphStyle, UInt32, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE, Void)).call(string, stringlength, textformat, layoutrect, defaultfillbrush, svgglyphstyle, colorpaletteindex, options, measuringmode)
  end
  def draw_text_layout2(origin : D2D_POINT_2F, textlayout : IDWriteTextLayout, defaultfillbrush : ID2D1Brush, svgglyphstyle : ID2D1SvgGlyphStyle, colorpaletteindex : UInt32, options : D2D1_DRAW_TEXT_OPTIONS) : Void
    @lpVtbl.value.draw_text_layout2.unsafe_as(Proc(D2D_POINT_2F, IDWriteTextLayout, ID2D1Brush, ID2D1SvgGlyphStyle, UInt32, D2D1_DRAW_TEXT_OPTIONS, Void)).call(origin, textlayout, defaultfillbrush, svgglyphstyle, colorpaletteindex, options)
  end
  def draw_color_bitmap_glyph_run(glyphimageformat : DWRITE_GLYPH_IMAGE_FORMATS, baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, measuringmode : DWRITE_MEASURING_MODE, bitmapsnapoption : D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION) : Void
    @lpVtbl.value.draw_color_bitmap_glyph_run.unsafe_as(Proc(DWRITE_GLYPH_IMAGE_FORMATS, D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION, Void)).call(glyphimageformat, baselineorigin, glyphrun, measuringmode, bitmapsnapoption)
  end
  def draw_svg_glyph_run(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, defaultfillbrush : ID2D1Brush, svgglyphstyle : ID2D1SvgGlyphStyle, colorpaletteindex : UInt32, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_svg_glyph_run.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, ID2D1Brush, ID2D1SvgGlyphStyle, UInt32, DWRITE_MEASURING_MODE, Void)).call(baselineorigin, glyphrun, defaultfillbrush, svgglyphstyle, colorpaletteindex, measuringmode)
  end
  def get_color_bitmap_glyph_image(glyphimageformat : DWRITE_GLYPH_IMAGE_FORMATS, glyphorigin : D2D_POINT_2F, fontface : IDWriteFontFace, fontemsize : Float32, glyphindex : UInt16, issideways : LibC::BOOL, worldtransform : D2D_MATRIX_3X2_F*, dpix : Float32, dpiy : Float32, glyphtransform : D2D_MATRIX_3X2_F*, glyphimage : ID2D1Image*) : HRESULT
    @lpVtbl.value.get_color_bitmap_glyph_image.unsafe_as(Proc(DWRITE_GLYPH_IMAGE_FORMATS, D2D_POINT_2F, IDWriteFontFace, Float32, UInt16, LibC::BOOL, D2D_MATRIX_3X2_F*, Float32, Float32, D2D_MATRIX_3X2_F*, ID2D1Image*, HRESULT)).call(glyphimageformat, glyphorigin, fontface, fontemsize, glyphindex, issideways, worldtransform, dpix, dpiy, glyphtransform, glyphimage)
  end
  def get_svg_glyph_image(glyphorigin : D2D_POINT_2F, fontface : IDWriteFontFace, fontemsize : Float32, glyphindex : UInt16, issideways : LibC::BOOL, worldtransform : D2D_MATRIX_3X2_F*, defaultfillbrush : ID2D1Brush, svgglyphstyle : ID2D1SvgGlyphStyle, colorpaletteindex : UInt32, glyphtransform : D2D_MATRIX_3X2_F*, glyphimage : ID2D1CommandList*) : HRESULT
    @lpVtbl.value.get_svg_glyph_image.unsafe_as(Proc(D2D_POINT_2F, IDWriteFontFace, Float32, UInt16, LibC::BOOL, D2D_MATRIX_3X2_F*, ID2D1Brush, ID2D1SvgGlyphStyle, UInt32, D2D_MATRIX_3X2_F*, ID2D1CommandList*, HRESULT)).call(glyphorigin, fontface, fontemsize, glyphindex, issideways, worldtransform, defaultfillbrush, svgglyphstyle, colorpaletteindex, glyphtransform, glyphimage)
  end
  def create_svg_document(inputxmlstream : IStream, viewportsize : D2D_SIZE_F, svgdocument : ID2D1SvgDocument*) : HRESULT
    @lpVtbl.value.create_svg_document.unsafe_as(Proc(IStream, D2D_SIZE_F, ID2D1SvgDocument*, HRESULT)).call(inputxmlstream, viewportsize, svgdocument)
  end
  def draw_svg_document(svgdocument : ID2D1SvgDocument) : Void
    @lpVtbl.value.draw_svg_document.unsafe_as(Proc(ID2D1SvgDocument, Void)).call(svgdocument)
  end
  def create_color_context_from_dxgi_color_space(colorspace : DXGI_COLOR_SPACE_TYPE, colorcontext : ID2D1ColorContext1*) : HRESULT
    @lpVtbl.value.create_color_context_from_dxgi_color_space.unsafe_as(Proc(DXGI_COLOR_SPACE_TYPE, ID2D1ColorContext1*, HRESULT)).call(colorspace, colorcontext)
  end
  def create_color_context_from_simple_color_profile(simpleprofile : D2D1_SIMPLE_COLOR_PROFILE*, colorcontext : ID2D1ColorContext1*) : HRESULT
    @lpVtbl.value.create_color_context_from_simple_color_profile.unsafe_as(Proc(D2D1_SIMPLE_COLOR_PROFILE*, ID2D1ColorContext1*, HRESULT)).call(simpleprofile, colorcontext)
  end
end
struct LibWin32::ID2D1Device5
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def create_device_context(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext : ID2D1DeviceContext*) : HRESULT
    @lpVtbl.value.create_device_context.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext*, HRESULT)).call(options, devicecontext)
  end
  def create_print_control(wicfactory : IWICImagingFactory, documenttarget : IPrintDocumentPackageTarget, printcontrolproperties : D2D1_PRINT_CONTROL_PROPERTIES*, printcontrol : ID2D1PrintControl*) : HRESULT
    @lpVtbl.value.create_print_control.unsafe_as(Proc(IWICImagingFactory, IPrintDocumentPackageTarget, D2D1_PRINT_CONTROL_PROPERTIES*, ID2D1PrintControl*, HRESULT)).call(wicfactory, documenttarget, printcontrolproperties, printcontrol)
  end
  def set_maximum_texture_memory(maximuminbytes : UInt64) : Void
    @lpVtbl.value.set_maximum_texture_memory.unsafe_as(Proc(UInt64, Void)).call(maximuminbytes)
  end
  def get_maximum_texture_memory : UInt64
    @lpVtbl.value.get_maximum_texture_memory.unsafe_as(Proc(UInt64)).call
  end
  def clear_resources(millisecondssinceuse : UInt32) : Void
    @lpVtbl.value.clear_resources.unsafe_as(Proc(UInt32, Void)).call(millisecondssinceuse)
  end
  def get_rendering_priority : D2D1_RENDERING_PRIORITY
    @lpVtbl.value.get_rendering_priority.unsafe_as(Proc(D2D1_RENDERING_PRIORITY)).call
  end
  def set_rendering_priority(renderingpriority : D2D1_RENDERING_PRIORITY) : Void
    @lpVtbl.value.set_rendering_priority.unsafe_as(Proc(D2D1_RENDERING_PRIORITY, Void)).call(renderingpriority)
  end
  def create_device_context2(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext1 : ID2D1DeviceContext1*) : HRESULT
    @lpVtbl.value.create_device_context2.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext1*, HRESULT)).call(options, devicecontext1)
  end
  def create_device_context3(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext2 : ID2D1DeviceContext2*) : HRESULT
    @lpVtbl.value.create_device_context3.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext2*, HRESULT)).call(options, devicecontext2)
  end
  def flush_device_contexts(bitmap : ID2D1Bitmap) : Void
    @lpVtbl.value.flush_device_contexts.unsafe_as(Proc(ID2D1Bitmap, Void)).call(bitmap)
  end
  def get_dxgi_device(dxgidevice : IDXGIDevice*) : HRESULT
    @lpVtbl.value.get_dxgi_device.unsafe_as(Proc(IDXGIDevice*, HRESULT)).call(dxgidevice)
  end
  def create_device_context4(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext3 : ID2D1DeviceContext3*) : HRESULT
    @lpVtbl.value.create_device_context4.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext3*, HRESULT)).call(options, devicecontext3)
  end
  def create_device_context5(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext4 : ID2D1DeviceContext4*) : HRESULT
    @lpVtbl.value.create_device_context5.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext4*, HRESULT)).call(options, devicecontext4)
  end
  def set_maximum_color_glyph_cache_memory(maximuminbytes : UInt64) : Void
    @lpVtbl.value.set_maximum_color_glyph_cache_memory.unsafe_as(Proc(UInt64, Void)).call(maximuminbytes)
  end
  def get_maximum_color_glyph_cache_memory : UInt64
    @lpVtbl.value.get_maximum_color_glyph_cache_memory.unsafe_as(Proc(UInt64)).call
  end
  def create_device_context6(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext5 : ID2D1DeviceContext5*) : HRESULT
    @lpVtbl.value.create_device_context6.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext5*, HRESULT)).call(options, devicecontext5)
  end
end
struct LibWin32::ID2D1Factory6
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def reload_system_metrics : HRESULT
    @lpVtbl.value.reload_system_metrics.unsafe_as(Proc(HRESULT)).call
  end
  def get_desktop_dpi(dpix : Float32*, dpiy : Float32*) : Void
    @lpVtbl.value.get_desktop_dpi.unsafe_as(Proc(Float32*, Float32*, Void)).call(dpix, dpiy)
  end
  def create_rectangle_geometry(rectangle : D2D_RECT_F*, rectanglegeometry : ID2D1RectangleGeometry*) : HRESULT
    @lpVtbl.value.create_rectangle_geometry.unsafe_as(Proc(D2D_RECT_F*, ID2D1RectangleGeometry*, HRESULT)).call(rectangle, rectanglegeometry)
  end
  def create_rounded_rectangle_geometry(roundedrectangle : D2D1_ROUNDED_RECT*, roundedrectanglegeometry : ID2D1RoundedRectangleGeometry*) : HRESULT
    @lpVtbl.value.create_rounded_rectangle_geometry.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1RoundedRectangleGeometry*, HRESULT)).call(roundedrectangle, roundedrectanglegeometry)
  end
  def create_ellipse_geometry(ellipse : D2D1_ELLIPSE*, ellipsegeometry : ID2D1EllipseGeometry*) : HRESULT
    @lpVtbl.value.create_ellipse_geometry.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1EllipseGeometry*, HRESULT)).call(ellipse, ellipsegeometry)
  end
  def create_geometry_group(fillmode : D2D1_FILL_MODE, geometries : ID2D1Geometry*, geometriescount : UInt32, geometrygroup : ID2D1GeometryGroup*) : HRESULT
    @lpVtbl.value.create_geometry_group.unsafe_as(Proc(D2D1_FILL_MODE, ID2D1Geometry*, UInt32, ID2D1GeometryGroup*, HRESULT)).call(fillmode, geometries, geometriescount, geometrygroup)
  end
  def create_transformed_geometry(sourcegeometry : ID2D1Geometry, transform : D2D_MATRIX_3X2_F*, transformedgeometry : ID2D1TransformedGeometry*) : HRESULT
    @lpVtbl.value.create_transformed_geometry.unsafe_as(Proc(ID2D1Geometry, D2D_MATRIX_3X2_F*, ID2D1TransformedGeometry*, HRESULT)).call(sourcegeometry, transform, transformedgeometry)
  end
  def create_path_geometry(pathgeometry : ID2D1PathGeometry*) : HRESULT
    @lpVtbl.value.create_path_geometry.unsafe_as(Proc(ID2D1PathGeometry*, HRESULT)).call(pathgeometry)
  end
  def create_stroke_style(strokestyleproperties : D2D1_STROKE_STYLE_PROPERTIES*, dashes : Float32*, dashescount : UInt32, strokestyle : ID2D1StrokeStyle*) : HRESULT
    @lpVtbl.value.create_stroke_style.unsafe_as(Proc(D2D1_STROKE_STYLE_PROPERTIES*, Float32*, UInt32, ID2D1StrokeStyle*, HRESULT)).call(strokestyleproperties, dashes, dashescount, strokestyle)
  end
  def create_drawing_state_block(drawingstatedescription : D2D1_DRAWING_STATE_DESCRIPTION*, textrenderingparams : IDWriteRenderingParams, drawingstateblock : ID2D1DrawingStateBlock*) : HRESULT
    @lpVtbl.value.create_drawing_state_block.unsafe_as(Proc(D2D1_DRAWING_STATE_DESCRIPTION*, IDWriteRenderingParams, ID2D1DrawingStateBlock*, HRESULT)).call(drawingstatedescription, textrenderingparams, drawingstateblock)
  end
  def create_wic_bitmap_render_target(target : IWICBitmap, rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, rendertarget : ID2D1RenderTarget*) : HRESULT
    @lpVtbl.value.create_wic_bitmap_render_target.unsafe_as(Proc(IWICBitmap, D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget*, HRESULT)).call(target, rendertargetproperties, rendertarget)
  end
  def create_hwnd_render_target(rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, hwndrendertargetproperties : D2D1_HWND_RENDER_TARGET_PROPERTIES*, hwndrendertarget : ID2D1HwndRenderTarget*) : HRESULT
    @lpVtbl.value.create_hwnd_render_target.unsafe_as(Proc(D2D1_RENDER_TARGET_PROPERTIES*, D2D1_HWND_RENDER_TARGET_PROPERTIES*, ID2D1HwndRenderTarget*, HRESULT)).call(rendertargetproperties, hwndrendertargetproperties, hwndrendertarget)
  end
  def create_dxgi_surface_render_target(dxgisurface : IDXGISurface, rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, rendertarget : ID2D1RenderTarget*) : HRESULT
    @lpVtbl.value.create_dxgi_surface_render_target.unsafe_as(Proc(IDXGISurface, D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget*, HRESULT)).call(dxgisurface, rendertargetproperties, rendertarget)
  end
  def create_dc_render_target(rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, dcrendertarget : ID2D1DCRenderTarget*) : HRESULT
    @lpVtbl.value.create_dc_render_target.unsafe_as(Proc(D2D1_RENDER_TARGET_PROPERTIES*, ID2D1DCRenderTarget*, HRESULT)).call(rendertargetproperties, dcrendertarget)
  end
  def create_device(dxgidevice : IDXGIDevice, d2ddevice : ID2D1Device*) : HRESULT
    @lpVtbl.value.create_device.unsafe_as(Proc(IDXGIDevice, ID2D1Device*, HRESULT)).call(dxgidevice, d2ddevice)
  end
  def create_stroke_style2(strokestyleproperties : D2D1_STROKE_STYLE_PROPERTIES1*, dashes : Float32*, dashescount : UInt32, strokestyle : ID2D1StrokeStyle1*) : HRESULT
    @lpVtbl.value.create_stroke_style2.unsafe_as(Proc(D2D1_STROKE_STYLE_PROPERTIES1*, Float32*, UInt32, ID2D1StrokeStyle1*, HRESULT)).call(strokestyleproperties, dashes, dashescount, strokestyle)
  end
  def create_path_geometry2(pathgeometry : ID2D1PathGeometry1*) : HRESULT
    @lpVtbl.value.create_path_geometry2.unsafe_as(Proc(ID2D1PathGeometry1*, HRESULT)).call(pathgeometry)
  end
  def create_drawing_state_block2(drawingstatedescription : D2D1_DRAWING_STATE_DESCRIPTION1*, textrenderingparams : IDWriteRenderingParams, drawingstateblock : ID2D1DrawingStateBlock1*) : HRESULT
    @lpVtbl.value.create_drawing_state_block2.unsafe_as(Proc(D2D1_DRAWING_STATE_DESCRIPTION1*, IDWriteRenderingParams, ID2D1DrawingStateBlock1*, HRESULT)).call(drawingstatedescription, textrenderingparams, drawingstateblock)
  end
  def create_gdi_metafile(metafilestream : IStream, metafile : ID2D1GdiMetafile*) : HRESULT
    @lpVtbl.value.create_gdi_metafile.unsafe_as(Proc(IStream, ID2D1GdiMetafile*, HRESULT)).call(metafilestream, metafile)
  end
  def register_effect_from_stream(classid : Guid*, propertyxml : IStream, bindings : D2D1_PROPERTY_BINDING*, bindingscount : UInt32, effectfactory : PD2D1_EFFECT_FACTORY) : HRESULT
    @lpVtbl.value.register_effect_from_stream.unsafe_as(Proc(Guid*, IStream, D2D1_PROPERTY_BINDING*, UInt32, PD2D1_EFFECT_FACTORY, HRESULT)).call(classid, propertyxml, bindings, bindingscount, effectfactory)
  end
  def register_effect_from_string(classid : Guid*, propertyxml : LibC::LPWSTR, bindings : D2D1_PROPERTY_BINDING*, bindingscount : UInt32, effectfactory : PD2D1_EFFECT_FACTORY) : HRESULT
    @lpVtbl.value.register_effect_from_string.unsafe_as(Proc(Guid*, LibC::LPWSTR, D2D1_PROPERTY_BINDING*, UInt32, PD2D1_EFFECT_FACTORY, HRESULT)).call(classid, propertyxml, bindings, bindingscount, effectfactory)
  end
  def unregister_effect(classid : Guid*) : HRESULT
    @lpVtbl.value.unregister_effect.unsafe_as(Proc(Guid*, HRESULT)).call(classid)
  end
  def get_registered_effects(effects : Guid*, effectscount : UInt32, effectsreturned : UInt32*, effectsregistered : UInt32*) : HRESULT
    @lpVtbl.value.get_registered_effects.unsafe_as(Proc(Guid*, UInt32, UInt32*, UInt32*, HRESULT)).call(effects, effectscount, effectsreturned, effectsregistered)
  end
  def get_effect_properties(effectid : Guid*, properties : ID2D1Properties*) : HRESULT
    @lpVtbl.value.get_effect_properties.unsafe_as(Proc(Guid*, ID2D1Properties*, HRESULT)).call(effectid, properties)
  end
  def create_device2(dxgidevice : IDXGIDevice, d2ddevice1 : ID2D1Device1*) : HRESULT
    @lpVtbl.value.create_device2.unsafe_as(Proc(IDXGIDevice, ID2D1Device1*, HRESULT)).call(dxgidevice, d2ddevice1)
  end
  def create_device3(dxgidevice : IDXGIDevice, d2ddevice2 : ID2D1Device2*) : HRESULT
    @lpVtbl.value.create_device3.unsafe_as(Proc(IDXGIDevice, ID2D1Device2*, HRESULT)).call(dxgidevice, d2ddevice2)
  end
  def create_device4(dxgidevice : IDXGIDevice, d2ddevice3 : ID2D1Device3*) : HRESULT
    @lpVtbl.value.create_device4.unsafe_as(Proc(IDXGIDevice, ID2D1Device3*, HRESULT)).call(dxgidevice, d2ddevice3)
  end
  def create_device5(dxgidevice : IDXGIDevice, d2ddevice4 : ID2D1Device4*) : HRESULT
    @lpVtbl.value.create_device5.unsafe_as(Proc(IDXGIDevice, ID2D1Device4*, HRESULT)).call(dxgidevice, d2ddevice4)
  end
  def create_device6(dxgidevice : IDXGIDevice, d2ddevice5 : ID2D1Device5*) : HRESULT
    @lpVtbl.value.create_device6.unsafe_as(Proc(IDXGIDevice, ID2D1Device5*, HRESULT)).call(dxgidevice, d2ddevice5)
  end
end
struct LibWin32::ID2D1CommandSink5
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def begin_draw : HRESULT
    @lpVtbl.value.begin_draw.unsafe_as(Proc(HRESULT)).call
  end
  def end_draw : HRESULT
    @lpVtbl.value.end_draw.unsafe_as(Proc(HRESULT)).call
  end
  def set_antialias_mode(antialiasmode : D2D1_ANTIALIAS_MODE) : HRESULT
    @lpVtbl.value.set_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE, HRESULT)).call(antialiasmode)
  end
  def set_tags(tag1 : UInt64, tag2 : UInt64) : HRESULT
    @lpVtbl.value.set_tags.unsafe_as(Proc(UInt64, UInt64, HRESULT)).call(tag1, tag2)
  end
  def set_text_antialias_mode(textantialiasmode : D2D1_TEXT_ANTIALIAS_MODE) : HRESULT
    @lpVtbl.value.set_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE, HRESULT)).call(textantialiasmode)
  end
  def set_text_rendering_params(textrenderingparams : IDWriteRenderingParams) : HRESULT
    @lpVtbl.value.set_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams, HRESULT)).call(textrenderingparams)
  end
  def set_transform(transform : D2D_MATRIX_3X2_F*) : HRESULT
    @lpVtbl.value.set_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, HRESULT)).call(transform)
  end
  def set_primitive_blend(primitiveblend : D2D1_PRIMITIVE_BLEND) : HRESULT
    @lpVtbl.value.set_primitive_blend.unsafe_as(Proc(D2D1_PRIMITIVE_BLEND, HRESULT)).call(primitiveblend)
  end
  def set_unit_mode(unitmode : D2D1_UNIT_MODE) : HRESULT
    @lpVtbl.value.set_unit_mode.unsafe_as(Proc(D2D1_UNIT_MODE, HRESULT)).call(unitmode)
  end
  def clear(color : D2D1_COLOR_F*) : HRESULT
    @lpVtbl.value.clear.unsafe_as(Proc(D2D1_COLOR_F*, HRESULT)).call(color)
  end
  def draw_glyph_run(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, glyphrundescription : DWRITE_GLYPH_RUN_DESCRIPTION*, foregroundbrush : ID2D1Brush, measuringmode : DWRITE_MEASURING_MODE) : HRESULT
    @lpVtbl.value.draw_glyph_run.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush, DWRITE_MEASURING_MODE, HRESULT)).call(baselineorigin, glyphrun, glyphrundescription, foregroundbrush, measuringmode)
  end
  def draw_line(point0 : D2D_POINT_2F, point1 : D2D_POINT_2F, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : HRESULT
    @lpVtbl.value.draw_line.unsafe_as(Proc(D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush, Float32, ID2D1StrokeStyle, HRESULT)).call(point0, point1, brush, strokewidth, strokestyle)
  end
  def draw_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : HRESULT
    @lpVtbl.value.draw_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, Float32, ID2D1StrokeStyle, HRESULT)).call(geometry, brush, strokewidth, strokestyle)
  end
  def draw_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : HRESULT
    @lpVtbl.value.draw_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Float32, ID2D1StrokeStyle, HRESULT)).call(rect, brush, strokewidth, strokestyle)
  end
  def draw_bitmap(bitmap : ID2D1Bitmap, destinationrectangle : D2D_RECT_F*, opacity : Float32, interpolationmode : D2D1_INTERPOLATION_MODE, sourcerectangle : D2D_RECT_F*, perspectivetransform : D2D_MATRIX_4X4_F*) : HRESULT
    @lpVtbl.value.draw_bitmap.unsafe_as(Proc(ID2D1Bitmap, D2D_RECT_F*, Float32, D2D1_INTERPOLATION_MODE, D2D_RECT_F*, D2D_MATRIX_4X4_F*, HRESULT)).call(bitmap, destinationrectangle, opacity, interpolationmode, sourcerectangle, perspectivetransform)
  end
  def draw_image(image : ID2D1Image, targetoffset : D2D_POINT_2F*, imagerectangle : D2D_RECT_F*, interpolationmode : D2D1_INTERPOLATION_MODE, compositemode : D2D1_COMPOSITE_MODE) : HRESULT
    @lpVtbl.value.draw_image.unsafe_as(Proc(ID2D1Image, D2D_POINT_2F*, D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE, HRESULT)).call(image, targetoffset, imagerectangle, interpolationmode, compositemode)
  end
  def draw_gdi_metafile(gdimetafile : ID2D1GdiMetafile, targetoffset : D2D_POINT_2F*) : HRESULT
    @lpVtbl.value.draw_gdi_metafile.unsafe_as(Proc(ID2D1GdiMetafile, D2D_POINT_2F*, HRESULT)).call(gdimetafile, targetoffset)
  end
  def fill_mesh(mesh : ID2D1Mesh, brush : ID2D1Brush) : HRESULT
    @lpVtbl.value.fill_mesh.unsafe_as(Proc(ID2D1Mesh, ID2D1Brush, HRESULT)).call(mesh, brush)
  end
  def fill_opacity_mask(opacitymask : ID2D1Bitmap, brush : ID2D1Brush, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.fill_opacity_mask.unsafe_as(Proc(ID2D1Bitmap, ID2D1Brush, D2D_RECT_F*, D2D_RECT_F*, HRESULT)).call(opacitymask, brush, destinationrectangle, sourcerectangle)
  end
  def fill_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, opacitybrush : ID2D1Brush) : HRESULT
    @lpVtbl.value.fill_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, ID2D1Brush, HRESULT)).call(geometry, brush, opacitybrush)
  end
  def fill_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush) : HRESULT
    @lpVtbl.value.fill_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, HRESULT)).call(rect, brush)
  end
  def push_axis_aligned_clip(cliprect : D2D_RECT_F*, antialiasmode : D2D1_ANTIALIAS_MODE) : HRESULT
    @lpVtbl.value.push_axis_aligned_clip.unsafe_as(Proc(D2D_RECT_F*, D2D1_ANTIALIAS_MODE, HRESULT)).call(cliprect, antialiasmode)
  end
  def push_layer(layerparameters1 : D2D1_LAYER_PARAMETERS1*, layer : ID2D1Layer) : HRESULT
    @lpVtbl.value.push_layer.unsafe_as(Proc(D2D1_LAYER_PARAMETERS1*, ID2D1Layer, HRESULT)).call(layerparameters1, layer)
  end
  def pop_axis_aligned_clip : HRESULT
    @lpVtbl.value.pop_axis_aligned_clip.unsafe_as(Proc(HRESULT)).call
  end
  def pop_layer : HRESULT
    @lpVtbl.value.pop_layer.unsafe_as(Proc(HRESULT)).call
  end
  def set_primitive_blend1(primitiveblend : D2D1_PRIMITIVE_BLEND) : HRESULT
    @lpVtbl.value.set_primitive_blend1.unsafe_as(Proc(D2D1_PRIMITIVE_BLEND, HRESULT)).call(primitiveblend)
  end
  def draw_ink(ink : ID2D1Ink, brush : ID2D1Brush, inkstyle : ID2D1InkStyle) : HRESULT
    @lpVtbl.value.draw_ink.unsafe_as(Proc(ID2D1Ink, ID2D1Brush, ID2D1InkStyle, HRESULT)).call(ink, brush, inkstyle)
  end
  def draw_gradient_mesh(gradientmesh : ID2D1GradientMesh) : HRESULT
    @lpVtbl.value.draw_gradient_mesh.unsafe_as(Proc(ID2D1GradientMesh, HRESULT)).call(gradientmesh)
  end
  def draw_gdi_metafile2(gdimetafile : ID2D1GdiMetafile, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.draw_gdi_metafile2.unsafe_as(Proc(ID2D1GdiMetafile, D2D_RECT_F*, D2D_RECT_F*, HRESULT)).call(gdimetafile, destinationrectangle, sourcerectangle)
  end
  def draw_sprite_batch(spritebatch : ID2D1SpriteBatch, startindex : UInt32, spritecount : UInt32, bitmap : ID2D1Bitmap, interpolationmode : D2D1_BITMAP_INTERPOLATION_MODE, spriteoptions : D2D1_SPRITE_OPTIONS) : HRESULT
    @lpVtbl.value.draw_sprite_batch.unsafe_as(Proc(ID2D1SpriteBatch, UInt32, UInt32, ID2D1Bitmap, D2D1_BITMAP_INTERPOLATION_MODE, D2D1_SPRITE_OPTIONS, HRESULT)).call(spritebatch, startindex, spritecount, bitmap, interpolationmode, spriteoptions)
  end
  def set_primitive_blend2(primitiveblend : D2D1_PRIMITIVE_BLEND) : HRESULT
    @lpVtbl.value.set_primitive_blend2.unsafe_as(Proc(D2D1_PRIMITIVE_BLEND, HRESULT)).call(primitiveblend)
  end
  def blend_image(image : ID2D1Image, blendmode : D2D1_BLEND_MODE, targetoffset : D2D_POINT_2F*, imagerectangle : D2D_RECT_F*, interpolationmode : D2D1_INTERPOLATION_MODE) : HRESULT
    @lpVtbl.value.blend_image.unsafe_as(Proc(ID2D1Image, D2D1_BLEND_MODE, D2D_POINT_2F*, D2D_RECT_F*, D2D1_INTERPOLATION_MODE, HRESULT)).call(image, blendmode, targetoffset, imagerectangle, interpolationmode)
  end
end
struct LibWin32::ID2D1DeviceContext6
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def create_bitmap(size : D2D_SIZE_U, srcdata : Void*, pitch : UInt32, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_bitmap.unsafe_as(Proc(D2D_SIZE_U, Void*, UInt32, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(size, srcdata, pitch, bitmapproperties, bitmap)
  end
  def create_bitmap_from_wic_bitmap(wicbitmapsource : IWICBitmapSource, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_bitmap_from_wic_bitmap.unsafe_as(Proc(IWICBitmapSource, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(wicbitmapsource, bitmapproperties, bitmap)
  end
  def create_shared_bitmap(riid : Guid*, data : Void*, bitmapproperties : D2D1_BITMAP_PROPERTIES*, bitmap : ID2D1Bitmap*) : HRESULT
    @lpVtbl.value.create_shared_bitmap.unsafe_as(Proc(Guid*, Void*, D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap*, HRESULT)).call(riid, data, bitmapproperties, bitmap)
  end
  def create_bitmap_brush(bitmap : ID2D1Bitmap, bitmapbrushproperties : D2D1_BITMAP_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, bitmapbrush : ID2D1BitmapBrush*) : HRESULT
    @lpVtbl.value.create_bitmap_brush.unsafe_as(Proc(ID2D1Bitmap, D2D1_BITMAP_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush*, HRESULT)).call(bitmap, bitmapbrushproperties, brushproperties, bitmapbrush)
  end
  def create_solid_color_brush(color : D2D1_COLOR_F*, brushproperties : D2D1_BRUSH_PROPERTIES*, solidcolorbrush : ID2D1SolidColorBrush*) : HRESULT
    @lpVtbl.value.create_solid_color_brush.unsafe_as(Proc(D2D1_COLOR_F*, D2D1_BRUSH_PROPERTIES*, ID2D1SolidColorBrush*, HRESULT)).call(color, brushproperties, solidcolorbrush)
  end
  def create_gradient_stop_collection(gradientstops : D2D1_GRADIENT_STOP*, gradientstopscount : UInt32, colorinterpolationgamma : D2D1_GAMMA, extendmode : D2D1_EXTEND_MODE, gradientstopcollection : ID2D1GradientStopCollection*) : HRESULT
    @lpVtbl.value.create_gradient_stop_collection.unsafe_as(Proc(D2D1_GRADIENT_STOP*, UInt32, D2D1_GAMMA, D2D1_EXTEND_MODE, ID2D1GradientStopCollection*, HRESULT)).call(gradientstops, gradientstopscount, colorinterpolationgamma, extendmode, gradientstopcollection)
  end
  def create_linear_gradient_brush(lineargradientbrushproperties : D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, gradientstopcollection : ID2D1GradientStopCollection, lineargradientbrush : ID2D1LinearGradientBrush*) : HRESULT
    @lpVtbl.value.create_linear_gradient_brush.unsafe_as(Proc(D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection, ID2D1LinearGradientBrush*, HRESULT)).call(lineargradientbrushproperties, brushproperties, gradientstopcollection, lineargradientbrush)
  end
  def create_radial_gradient_brush(radialgradientbrushproperties : D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, gradientstopcollection : ID2D1GradientStopCollection, radialgradientbrush : ID2D1RadialGradientBrush*) : HRESULT
    @lpVtbl.value.create_radial_gradient_brush.unsafe_as(Proc(D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection, ID2D1RadialGradientBrush*, HRESULT)).call(radialgradientbrushproperties, brushproperties, gradientstopcollection, radialgradientbrush)
  end
  def create_compatible_render_target(desiredsize : D2D_SIZE_F*, desiredpixelsize : D2D_SIZE_U*, desiredformat : D2D1_PIXEL_FORMAT*, options : D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, bitmaprendertarget : ID2D1BitmapRenderTarget*) : HRESULT
    @lpVtbl.value.create_compatible_render_target.unsafe_as(Proc(D2D_SIZE_F*, D2D_SIZE_U*, D2D1_PIXEL_FORMAT*, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, ID2D1BitmapRenderTarget*, HRESULT)).call(desiredsize, desiredpixelsize, desiredformat, options, bitmaprendertarget)
  end
  def create_layer(size : D2D_SIZE_F*, layer : ID2D1Layer*) : HRESULT
    @lpVtbl.value.create_layer.unsafe_as(Proc(D2D_SIZE_F*, ID2D1Layer*, HRESULT)).call(size, layer)
  end
  def create_mesh(mesh : ID2D1Mesh*) : HRESULT
    @lpVtbl.value.create_mesh.unsafe_as(Proc(ID2D1Mesh*, HRESULT)).call(mesh)
  end
  def draw_line(point0 : D2D_POINT_2F, point1 : D2D_POINT_2F, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_line.unsafe_as(Proc(D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(point0, point1, brush, strokewidth, strokestyle)
  end
  def draw_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(rect, brush, strokewidth, strokestyle)
  end
  def fill_rectangle(rect : D2D_RECT_F*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_rectangle.unsafe_as(Proc(D2D_RECT_F*, ID2D1Brush, Void)).call(rect, brush)
  end
  def draw_rounded_rectangle(roundedrect : D2D1_ROUNDED_RECT*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_rounded_rectangle.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(roundedrect, brush, strokewidth, strokestyle)
  end
  def fill_rounded_rectangle(roundedrect : D2D1_ROUNDED_RECT*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_rounded_rectangle.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1Brush, Void)).call(roundedrect, brush)
  end
  def draw_ellipse(ellipse : D2D1_ELLIPSE*, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_ellipse.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(ellipse, brush, strokewidth, strokestyle)
  end
  def fill_ellipse(ellipse : D2D1_ELLIPSE*, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_ellipse.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1Brush, Void)).call(ellipse, brush)
  end
  def draw_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, strokewidth : Float32, strokestyle : ID2D1StrokeStyle) : Void
    @lpVtbl.value.draw_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, Float32, ID2D1StrokeStyle, Void)).call(geometry, brush, strokewidth, strokestyle)
  end
  def fill_geometry(geometry : ID2D1Geometry, brush : ID2D1Brush, opacitybrush : ID2D1Brush) : Void
    @lpVtbl.value.fill_geometry.unsafe_as(Proc(ID2D1Geometry, ID2D1Brush, ID2D1Brush, Void)).call(geometry, brush, opacitybrush)
  end
  def fill_mesh(mesh : ID2D1Mesh, brush : ID2D1Brush) : Void
    @lpVtbl.value.fill_mesh.unsafe_as(Proc(ID2D1Mesh, ID2D1Brush, Void)).call(mesh, brush)
  end
  def fill_opacity_mask(opacitymask : ID2D1Bitmap, brush : ID2D1Brush, content : D2D1_OPACITY_MASK_CONTENT, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.fill_opacity_mask.unsafe_as(Proc(ID2D1Bitmap, ID2D1Brush, D2D1_OPACITY_MASK_CONTENT, D2D_RECT_F*, D2D_RECT_F*, Void)).call(opacitymask, brush, content, destinationrectangle, sourcerectangle)
  end
  def draw_bitmap(bitmap : ID2D1Bitmap, destinationrectangle : D2D_RECT_F*, opacity : Float32, interpolationmode : D2D1_BITMAP_INTERPOLATION_MODE, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.draw_bitmap.unsafe_as(Proc(ID2D1Bitmap, D2D_RECT_F*, Float32, D2D1_BITMAP_INTERPOLATION_MODE, D2D_RECT_F*, Void)).call(bitmap, destinationrectangle, opacity, interpolationmode, sourcerectangle)
  end
  def draw_text(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, layoutrect : D2D_RECT_F*, defaultfillbrush : ID2D1Brush, options : D2D1_DRAW_TEXT_OPTIONS, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_text.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, D2D_RECT_F*, ID2D1Brush, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE, Void)).call(string, stringlength, textformat, layoutrect, defaultfillbrush, options, measuringmode)
  end
  def draw_text_layout(origin : D2D_POINT_2F, textlayout : IDWriteTextLayout, defaultfillbrush : ID2D1Brush, options : D2D1_DRAW_TEXT_OPTIONS) : Void
    @lpVtbl.value.draw_text_layout.unsafe_as(Proc(D2D_POINT_2F, IDWriteTextLayout, ID2D1Brush, D2D1_DRAW_TEXT_OPTIONS, Void)).call(origin, textlayout, defaultfillbrush, options)
  end
  def draw_glyph_run(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, foregroundbrush : ID2D1Brush, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_glyph_run.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, ID2D1Brush, DWRITE_MEASURING_MODE, Void)).call(baselineorigin, glyphrun, foregroundbrush, measuringmode)
  end
  def set_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.set_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def get_transform(transform : D2D_MATRIX_3X2_F*) : Void
    @lpVtbl.value.get_transform.unsafe_as(Proc(D2D_MATRIX_3X2_F*, Void)).call(transform)
  end
  def set_antialias_mode(antialiasmode : D2D1_ANTIALIAS_MODE) : Void
    @lpVtbl.value.set_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE, Void)).call(antialiasmode)
  end
  def get_antialias_mode : D2D1_ANTIALIAS_MODE
    @lpVtbl.value.get_antialias_mode.unsafe_as(Proc(D2D1_ANTIALIAS_MODE)).call
  end
  def set_text_antialias_mode(textantialiasmode : D2D1_TEXT_ANTIALIAS_MODE) : Void
    @lpVtbl.value.set_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE, Void)).call(textantialiasmode)
  end
  def get_text_antialias_mode : D2D1_TEXT_ANTIALIAS_MODE
    @lpVtbl.value.get_text_antialias_mode.unsafe_as(Proc(D2D1_TEXT_ANTIALIAS_MODE)).call
  end
  def set_text_rendering_params(textrenderingparams : IDWriteRenderingParams) : Void
    @lpVtbl.value.set_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams, Void)).call(textrenderingparams)
  end
  def get_text_rendering_params(textrenderingparams : IDWriteRenderingParams*) : Void
    @lpVtbl.value.get_text_rendering_params.unsafe_as(Proc(IDWriteRenderingParams*, Void)).call(textrenderingparams)
  end
  def set_tags(tag1 : UInt64, tag2 : UInt64) : Void
    @lpVtbl.value.set_tags.unsafe_as(Proc(UInt64, UInt64, Void)).call(tag1, tag2)
  end
  def get_tags(tag1 : UInt64*, tag2 : UInt64*) : Void
    @lpVtbl.value.get_tags.unsafe_as(Proc(UInt64*, UInt64*, Void)).call(tag1, tag2)
  end
  def push_layer(layerparameters : D2D1_LAYER_PARAMETERS*, layer : ID2D1Layer) : Void
    @lpVtbl.value.push_layer.unsafe_as(Proc(D2D1_LAYER_PARAMETERS*, ID2D1Layer, Void)).call(layerparameters, layer)
  end
  def pop_layer : Void
    @lpVtbl.value.pop_layer.unsafe_as(Proc(Void)).call
  end
  def flush(tag1 : UInt64*, tag2 : UInt64*) : HRESULT
    @lpVtbl.value.flush.unsafe_as(Proc(UInt64*, UInt64*, HRESULT)).call(tag1, tag2)
  end
  def save_drawing_state(drawingstateblock : ID2D1DrawingStateBlock) : Void
    @lpVtbl.value.save_drawing_state.unsafe_as(Proc(ID2D1DrawingStateBlock, Void)).call(drawingstateblock)
  end
  def restore_drawing_state(drawingstateblock : ID2D1DrawingStateBlock) : Void
    @lpVtbl.value.restore_drawing_state.unsafe_as(Proc(ID2D1DrawingStateBlock, Void)).call(drawingstateblock)
  end
  def push_axis_aligned_clip(cliprect : D2D_RECT_F*, antialiasmode : D2D1_ANTIALIAS_MODE) : Void
    @lpVtbl.value.push_axis_aligned_clip.unsafe_as(Proc(D2D_RECT_F*, D2D1_ANTIALIAS_MODE, Void)).call(cliprect, antialiasmode)
  end
  def pop_axis_aligned_clip : Void
    @lpVtbl.value.pop_axis_aligned_clip.unsafe_as(Proc(Void)).call
  end
  def clear(clearcolor : D2D1_COLOR_F*) : Void
    @lpVtbl.value.clear.unsafe_as(Proc(D2D1_COLOR_F*, Void)).call(clearcolor)
  end
  def begin_draw : Void
    @lpVtbl.value.begin_draw.unsafe_as(Proc(Void)).call
  end
  def end_draw(tag1 : UInt64*, tag2 : UInt64*) : HRESULT
    @lpVtbl.value.end_draw.unsafe_as(Proc(UInt64*, UInt64*, HRESULT)).call(tag1, tag2)
  end
  def get_pixel_format : D2D1_PIXEL_FORMAT
    @lpVtbl.value.get_pixel_format.unsafe_as(Proc(D2D1_PIXEL_FORMAT)).call
  end
  def set_dpi(dpix : Float32, dpiy : Float32) : Void
    @lpVtbl.value.set_dpi.unsafe_as(Proc(Float32, Float32, Void)).call(dpix, dpiy)
  end
  def get_dpi(dpix : Float32*, dpiy : Float32*) : Void
    @lpVtbl.value.get_dpi.unsafe_as(Proc(Float32*, Float32*, Void)).call(dpix, dpiy)
  end
  def get_size : D2D_SIZE_F
    @lpVtbl.value.get_size.unsafe_as(Proc(D2D_SIZE_F)).call
  end
  def get_pixel_size : D2D_SIZE_U
    @lpVtbl.value.get_pixel_size.unsafe_as(Proc(D2D_SIZE_U)).call
  end
  def get_maximum_bitmap_size : UInt32
    @lpVtbl.value.get_maximum_bitmap_size.unsafe_as(Proc(UInt32)).call
  end
  def is_supported(rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*) : LibC::BOOL
    @lpVtbl.value.is_supported.unsafe_as(Proc(D2D1_RENDER_TARGET_PROPERTIES*, LibC::BOOL)).call(rendertargetproperties)
  end
  def create_bitmap2(size : D2D_SIZE_U, sourcedata : Void*, pitch : UInt32, bitmapproperties : D2D1_BITMAP_PROPERTIES1*, bitmap : ID2D1Bitmap1*) : HRESULT
    @lpVtbl.value.create_bitmap2.unsafe_as(Proc(D2D_SIZE_U, Void*, UInt32, D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1*, HRESULT)).call(size, sourcedata, pitch, bitmapproperties, bitmap)
  end
  def create_bitmap_from_wic_bitmap2(wicbitmapsource : IWICBitmapSource, bitmapproperties : D2D1_BITMAP_PROPERTIES1*, bitmap : ID2D1Bitmap1*) : HRESULT
    @lpVtbl.value.create_bitmap_from_wic_bitmap2.unsafe_as(Proc(IWICBitmapSource, D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1*, HRESULT)).call(wicbitmapsource, bitmapproperties, bitmap)
  end
  def create_color_context(space : D2D1_COLOR_SPACE, profile : UInt8*, profilesize : UInt32, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context.unsafe_as(Proc(D2D1_COLOR_SPACE, UInt8*, UInt32, ID2D1ColorContext*, HRESULT)).call(space, profile, profilesize, colorcontext)
  end
  def create_color_context_from_filename(filename : LibC::LPWSTR, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context_from_filename.unsafe_as(Proc(LibC::LPWSTR, ID2D1ColorContext*, HRESULT)).call(filename, colorcontext)
  end
  def create_color_context_from_wic_color_context(wiccolorcontext : IWICColorContext, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context_from_wic_color_context.unsafe_as(Proc(IWICColorContext, ID2D1ColorContext*, HRESULT)).call(wiccolorcontext, colorcontext)
  end
  def create_bitmap_from_dxgi_surface(surface : IDXGISurface, bitmapproperties : D2D1_BITMAP_PROPERTIES1*, bitmap : ID2D1Bitmap1*) : HRESULT
    @lpVtbl.value.create_bitmap_from_dxgi_surface.unsafe_as(Proc(IDXGISurface, D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1*, HRESULT)).call(surface, bitmapproperties, bitmap)
  end
  def create_effect(effectid : Guid*, effect : ID2D1Effect*) : HRESULT
    @lpVtbl.value.create_effect.unsafe_as(Proc(Guid*, ID2D1Effect*, HRESULT)).call(effectid, effect)
  end
  def create_gradient_stop_collection2(straightalphagradientstops : D2D1_GRADIENT_STOP*, straightalphagradientstopscount : UInt32, preinterpolationspace : D2D1_COLOR_SPACE, postinterpolationspace : D2D1_COLOR_SPACE, bufferprecision : D2D1_BUFFER_PRECISION, extendmode : D2D1_EXTEND_MODE, colorinterpolationmode : D2D1_COLOR_INTERPOLATION_MODE, gradientstopcollection1 : ID2D1GradientStopCollection1*) : HRESULT
    @lpVtbl.value.create_gradient_stop_collection2.unsafe_as(Proc(D2D1_GRADIENT_STOP*, UInt32, D2D1_COLOR_SPACE, D2D1_COLOR_SPACE, D2D1_BUFFER_PRECISION, D2D1_EXTEND_MODE, D2D1_COLOR_INTERPOLATION_MODE, ID2D1GradientStopCollection1*, HRESULT)).call(straightalphagradientstops, straightalphagradientstopscount, preinterpolationspace, postinterpolationspace, bufferprecision, extendmode, colorinterpolationmode, gradientstopcollection1)
  end
  def create_image_brush(image : ID2D1Image, imagebrushproperties : D2D1_IMAGE_BRUSH_PROPERTIES*, brushproperties : D2D1_BRUSH_PROPERTIES*, imagebrush : ID2D1ImageBrush*) : HRESULT
    @lpVtbl.value.create_image_brush.unsafe_as(Proc(ID2D1Image, D2D1_IMAGE_BRUSH_PROPERTIES*, D2D1_BRUSH_PROPERTIES*, ID2D1ImageBrush*, HRESULT)).call(image, imagebrushproperties, brushproperties, imagebrush)
  end
  def create_bitmap_brush2(bitmap : ID2D1Bitmap, bitmapbrushproperties : D2D1_BITMAP_BRUSH_PROPERTIES1*, brushproperties : D2D1_BRUSH_PROPERTIES*, bitmapbrush : ID2D1BitmapBrush1*) : HRESULT
    @lpVtbl.value.create_bitmap_brush2.unsafe_as(Proc(ID2D1Bitmap, D2D1_BITMAP_BRUSH_PROPERTIES1*, D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush1*, HRESULT)).call(bitmap, bitmapbrushproperties, brushproperties, bitmapbrush)
  end
  def create_command_list(commandlist : ID2D1CommandList*) : HRESULT
    @lpVtbl.value.create_command_list.unsafe_as(Proc(ID2D1CommandList*, HRESULT)).call(commandlist)
  end
  def is_dxgi_format_supported(format : DXGI_FORMAT) : LibC::BOOL
    @lpVtbl.value.is_dxgi_format_supported.unsafe_as(Proc(DXGI_FORMAT, LibC::BOOL)).call(format)
  end
  def is_buffer_precision_supported(bufferprecision : D2D1_BUFFER_PRECISION) : LibC::BOOL
    @lpVtbl.value.is_buffer_precision_supported.unsafe_as(Proc(D2D1_BUFFER_PRECISION, LibC::BOOL)).call(bufferprecision)
  end
  def get_image_local_bounds(image : ID2D1Image, localbounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_image_local_bounds.unsafe_as(Proc(ID2D1Image, D2D_RECT_F*, HRESULT)).call(image, localbounds)
  end
  def get_image_world_bounds(image : ID2D1Image, worldbounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_image_world_bounds.unsafe_as(Proc(ID2D1Image, D2D_RECT_F*, HRESULT)).call(image, worldbounds)
  end
  def get_glyph_run_world_bounds(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, measuringmode : DWRITE_MEASURING_MODE, bounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_glyph_run_world_bounds.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D_RECT_F*, HRESULT)).call(baselineorigin, glyphrun, measuringmode, bounds)
  end
  def get_device(device : ID2D1Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID2D1Device*, Void)).call(device)
  end
  def set_target(image : ID2D1Image) : Void
    @lpVtbl.value.set_target.unsafe_as(Proc(ID2D1Image, Void)).call(image)
  end
  def get_target(image : ID2D1Image*) : Void
    @lpVtbl.value.get_target.unsafe_as(Proc(ID2D1Image*, Void)).call(image)
  end
  def set_rendering_controls(renderingcontrols : D2D1_RENDERING_CONTROLS*) : Void
    @lpVtbl.value.set_rendering_controls.unsafe_as(Proc(D2D1_RENDERING_CONTROLS*, Void)).call(renderingcontrols)
  end
  def get_rendering_controls(renderingcontrols : D2D1_RENDERING_CONTROLS*) : Void
    @lpVtbl.value.get_rendering_controls.unsafe_as(Proc(D2D1_RENDERING_CONTROLS*, Void)).call(renderingcontrols)
  end
  def set_primitive_blend(primitiveblend : D2D1_PRIMITIVE_BLEND) : Void
    @lpVtbl.value.set_primitive_blend.unsafe_as(Proc(D2D1_PRIMITIVE_BLEND, Void)).call(primitiveblend)
  end
  def get_primitive_blend : D2D1_PRIMITIVE_BLEND
    @lpVtbl.value.get_primitive_blend.unsafe_as(Proc(D2D1_PRIMITIVE_BLEND)).call
  end
  def set_unit_mode(unitmode : D2D1_UNIT_MODE) : Void
    @lpVtbl.value.set_unit_mode.unsafe_as(Proc(D2D1_UNIT_MODE, Void)).call(unitmode)
  end
  def get_unit_mode : D2D1_UNIT_MODE
    @lpVtbl.value.get_unit_mode.unsafe_as(Proc(D2D1_UNIT_MODE)).call
  end
  def draw_glyph_run2(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, glyphrundescription : DWRITE_GLYPH_RUN_DESCRIPTION*, foregroundbrush : ID2D1Brush, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_glyph_run2.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush, DWRITE_MEASURING_MODE, Void)).call(baselineorigin, glyphrun, glyphrundescription, foregroundbrush, measuringmode)
  end
  def draw_image(image : ID2D1Image, targetoffset : D2D_POINT_2F*, imagerectangle : D2D_RECT_F*, interpolationmode : D2D1_INTERPOLATION_MODE, compositemode : D2D1_COMPOSITE_MODE) : Void
    @lpVtbl.value.draw_image.unsafe_as(Proc(ID2D1Image, D2D_POINT_2F*, D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE, Void)).call(image, targetoffset, imagerectangle, interpolationmode, compositemode)
  end
  def draw_gdi_metafile(gdimetafile : ID2D1GdiMetafile, targetoffset : D2D_POINT_2F*) : Void
    @lpVtbl.value.draw_gdi_metafile.unsafe_as(Proc(ID2D1GdiMetafile, D2D_POINT_2F*, Void)).call(gdimetafile, targetoffset)
  end
  def draw_bitmap2(bitmap : ID2D1Bitmap, destinationrectangle : D2D_RECT_F*, opacity : Float32, interpolationmode : D2D1_INTERPOLATION_MODE, sourcerectangle : D2D_RECT_F*, perspectivetransform : D2D_MATRIX_4X4_F*) : Void
    @lpVtbl.value.draw_bitmap2.unsafe_as(Proc(ID2D1Bitmap, D2D_RECT_F*, Float32, D2D1_INTERPOLATION_MODE, D2D_RECT_F*, D2D_MATRIX_4X4_F*, Void)).call(bitmap, destinationrectangle, opacity, interpolationmode, sourcerectangle, perspectivetransform)
  end
  def push_layer2(layerparameters : D2D1_LAYER_PARAMETERS1*, layer : ID2D1Layer) : Void
    @lpVtbl.value.push_layer2.unsafe_as(Proc(D2D1_LAYER_PARAMETERS1*, ID2D1Layer, Void)).call(layerparameters, layer)
  end
  def invalidate_effect_input_rectangle(effect : ID2D1Effect, input : UInt32, inputrectangle : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.invalidate_effect_input_rectangle.unsafe_as(Proc(ID2D1Effect, UInt32, D2D_RECT_F*, HRESULT)).call(effect, input, inputrectangle)
  end
  def get_effect_invalid_rectangle_count(effect : ID2D1Effect, rectanglecount : UInt32*) : HRESULT
    @lpVtbl.value.get_effect_invalid_rectangle_count.unsafe_as(Proc(ID2D1Effect, UInt32*, HRESULT)).call(effect, rectanglecount)
  end
  def get_effect_invalid_rectangles(effect : ID2D1Effect, rectangles : D2D_RECT_F*, rectanglescount : UInt32) : HRESULT
    @lpVtbl.value.get_effect_invalid_rectangles.unsafe_as(Proc(ID2D1Effect, D2D_RECT_F*, UInt32, HRESULT)).call(effect, rectangles, rectanglescount)
  end
  def get_effect_required_input_rectangles(rendereffect : ID2D1Effect, renderimagerectangle : D2D_RECT_F*, inputdescriptions : D2D1_EFFECT_INPUT_DESCRIPTION*, requiredinputrects : D2D_RECT_F*, inputcount : UInt32) : HRESULT
    @lpVtbl.value.get_effect_required_input_rectangles.unsafe_as(Proc(ID2D1Effect, D2D_RECT_F*, D2D1_EFFECT_INPUT_DESCRIPTION*, D2D_RECT_F*, UInt32, HRESULT)).call(rendereffect, renderimagerectangle, inputdescriptions, requiredinputrects, inputcount)
  end
  def fill_opacity_mask2(opacitymask : ID2D1Bitmap, brush : ID2D1Brush, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.fill_opacity_mask2.unsafe_as(Proc(ID2D1Bitmap, ID2D1Brush, D2D_RECT_F*, D2D_RECT_F*, Void)).call(opacitymask, brush, destinationrectangle, sourcerectangle)
  end
  def create_filled_geometry_realization(geometry : ID2D1Geometry, flatteningtolerance : Float32, geometryrealization : ID2D1GeometryRealization*) : HRESULT
    @lpVtbl.value.create_filled_geometry_realization.unsafe_as(Proc(ID2D1Geometry, Float32, ID2D1GeometryRealization*, HRESULT)).call(geometry, flatteningtolerance, geometryrealization)
  end
  def create_stroked_geometry_realization(geometry : ID2D1Geometry, flatteningtolerance : Float32, strokewidth : Float32, strokestyle : ID2D1StrokeStyle, geometryrealization : ID2D1GeometryRealization*) : HRESULT
    @lpVtbl.value.create_stroked_geometry_realization.unsafe_as(Proc(ID2D1Geometry, Float32, Float32, ID2D1StrokeStyle, ID2D1GeometryRealization*, HRESULT)).call(geometry, flatteningtolerance, strokewidth, strokestyle, geometryrealization)
  end
  def draw_geometry_realization(geometryrealization : ID2D1GeometryRealization, brush : ID2D1Brush) : Void
    @lpVtbl.value.draw_geometry_realization.unsafe_as(Proc(ID2D1GeometryRealization, ID2D1Brush, Void)).call(geometryrealization, brush)
  end
  def create_ink(startpoint : D2D1_INK_POINT*, ink : ID2D1Ink*) : HRESULT
    @lpVtbl.value.create_ink.unsafe_as(Proc(D2D1_INK_POINT*, ID2D1Ink*, HRESULT)).call(startpoint, ink)
  end
  def create_ink_style(inkstyleproperties : D2D1_INK_STYLE_PROPERTIES*, inkstyle : ID2D1InkStyle*) : HRESULT
    @lpVtbl.value.create_ink_style.unsafe_as(Proc(D2D1_INK_STYLE_PROPERTIES*, ID2D1InkStyle*, HRESULT)).call(inkstyleproperties, inkstyle)
  end
  def create_gradient_mesh(patches : D2D1_GRADIENT_MESH_PATCH*, patchescount : UInt32, gradientmesh : ID2D1GradientMesh*) : HRESULT
    @lpVtbl.value.create_gradient_mesh.unsafe_as(Proc(D2D1_GRADIENT_MESH_PATCH*, UInt32, ID2D1GradientMesh*, HRESULT)).call(patches, patchescount, gradientmesh)
  end
  def create_image_source_from_wic(wicbitmapsource : IWICBitmapSource, loadingoptions : D2D1_IMAGE_SOURCE_LOADING_OPTIONS, alphamode : D2D1_ALPHA_MODE, imagesource : ID2D1ImageSourceFromWic*) : HRESULT
    @lpVtbl.value.create_image_source_from_wic.unsafe_as(Proc(IWICBitmapSource, D2D1_IMAGE_SOURCE_LOADING_OPTIONS, D2D1_ALPHA_MODE, ID2D1ImageSourceFromWic*, HRESULT)).call(wicbitmapsource, loadingoptions, alphamode, imagesource)
  end
  def create_lookup_table3_d(precision : D2D1_BUFFER_PRECISION, extents : UInt32*, data : UInt8*, datacount : UInt32, strides : UInt32*, lookuptable : ID2D1LookupTable3D*) : HRESULT
    @lpVtbl.value.create_lookup_table3_d.unsafe_as(Proc(D2D1_BUFFER_PRECISION, UInt32*, UInt8*, UInt32, UInt32*, ID2D1LookupTable3D*, HRESULT)).call(precision, extents, data, datacount, strides, lookuptable)
  end
  def create_image_source_from_dxgi(surfaces : IDXGISurface*, surfacecount : UInt32, colorspace : DXGI_COLOR_SPACE_TYPE, options : D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, imagesource : ID2D1ImageSource*) : HRESULT
    @lpVtbl.value.create_image_source_from_dxgi.unsafe_as(Proc(IDXGISurface*, UInt32, DXGI_COLOR_SPACE_TYPE, D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, ID2D1ImageSource*, HRESULT)).call(surfaces, surfacecount, colorspace, options, imagesource)
  end
  def get_gradient_mesh_world_bounds(gradientmesh : ID2D1GradientMesh, pbounds : D2D_RECT_F*) : HRESULT
    @lpVtbl.value.get_gradient_mesh_world_bounds.unsafe_as(Proc(ID2D1GradientMesh, D2D_RECT_F*, HRESULT)).call(gradientmesh, pbounds)
  end
  def draw_ink(ink : ID2D1Ink, brush : ID2D1Brush, inkstyle : ID2D1InkStyle) : Void
    @lpVtbl.value.draw_ink.unsafe_as(Proc(ID2D1Ink, ID2D1Brush, ID2D1InkStyle, Void)).call(ink, brush, inkstyle)
  end
  def draw_gradient_mesh(gradientmesh : ID2D1GradientMesh) : Void
    @lpVtbl.value.draw_gradient_mesh.unsafe_as(Proc(ID2D1GradientMesh, Void)).call(gradientmesh)
  end
  def draw_gdi_metafile2(gdimetafile : ID2D1GdiMetafile, destinationrectangle : D2D_RECT_F*, sourcerectangle : D2D_RECT_F*) : Void
    @lpVtbl.value.draw_gdi_metafile2.unsafe_as(Proc(ID2D1GdiMetafile, D2D_RECT_F*, D2D_RECT_F*, Void)).call(gdimetafile, destinationrectangle, sourcerectangle)
  end
  def create_transformed_image_source(imagesource : ID2D1ImageSource, properties : D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, transformedimagesource : ID2D1TransformedImageSource*) : HRESULT
    @lpVtbl.value.create_transformed_image_source.unsafe_as(Proc(ID2D1ImageSource, D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, ID2D1TransformedImageSource*, HRESULT)).call(imagesource, properties, transformedimagesource)
  end
  def create_sprite_batch(spritebatch : ID2D1SpriteBatch*) : HRESULT
    @lpVtbl.value.create_sprite_batch.unsafe_as(Proc(ID2D1SpriteBatch*, HRESULT)).call(spritebatch)
  end
  def draw_sprite_batch(spritebatch : ID2D1SpriteBatch, startindex : UInt32, spritecount : UInt32, bitmap : ID2D1Bitmap, interpolationmode : D2D1_BITMAP_INTERPOLATION_MODE, spriteoptions : D2D1_SPRITE_OPTIONS) : Void
    @lpVtbl.value.draw_sprite_batch.unsafe_as(Proc(ID2D1SpriteBatch, UInt32, UInt32, ID2D1Bitmap, D2D1_BITMAP_INTERPOLATION_MODE, D2D1_SPRITE_OPTIONS, Void)).call(spritebatch, startindex, spritecount, bitmap, interpolationmode, spriteoptions)
  end
  def create_svg_glyph_style(svgglyphstyle : ID2D1SvgGlyphStyle*) : HRESULT
    @lpVtbl.value.create_svg_glyph_style.unsafe_as(Proc(ID2D1SvgGlyphStyle*, HRESULT)).call(svgglyphstyle)
  end
  def draw_text2(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, layoutrect : D2D_RECT_F*, defaultfillbrush : ID2D1Brush, svgglyphstyle : ID2D1SvgGlyphStyle, colorpaletteindex : UInt32, options : D2D1_DRAW_TEXT_OPTIONS, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_text2.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, D2D_RECT_F*, ID2D1Brush, ID2D1SvgGlyphStyle, UInt32, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE, Void)).call(string, stringlength, textformat, layoutrect, defaultfillbrush, svgglyphstyle, colorpaletteindex, options, measuringmode)
  end
  def draw_text_layout2(origin : D2D_POINT_2F, textlayout : IDWriteTextLayout, defaultfillbrush : ID2D1Brush, svgglyphstyle : ID2D1SvgGlyphStyle, colorpaletteindex : UInt32, options : D2D1_DRAW_TEXT_OPTIONS) : Void
    @lpVtbl.value.draw_text_layout2.unsafe_as(Proc(D2D_POINT_2F, IDWriteTextLayout, ID2D1Brush, ID2D1SvgGlyphStyle, UInt32, D2D1_DRAW_TEXT_OPTIONS, Void)).call(origin, textlayout, defaultfillbrush, svgglyphstyle, colorpaletteindex, options)
  end
  def draw_color_bitmap_glyph_run(glyphimageformat : DWRITE_GLYPH_IMAGE_FORMATS, baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, measuringmode : DWRITE_MEASURING_MODE, bitmapsnapoption : D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION) : Void
    @lpVtbl.value.draw_color_bitmap_glyph_run.unsafe_as(Proc(DWRITE_GLYPH_IMAGE_FORMATS, D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION, Void)).call(glyphimageformat, baselineorigin, glyphrun, measuringmode, bitmapsnapoption)
  end
  def draw_svg_glyph_run(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, defaultfillbrush : ID2D1Brush, svgglyphstyle : ID2D1SvgGlyphStyle, colorpaletteindex : UInt32, measuringmode : DWRITE_MEASURING_MODE) : Void
    @lpVtbl.value.draw_svg_glyph_run.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, ID2D1Brush, ID2D1SvgGlyphStyle, UInt32, DWRITE_MEASURING_MODE, Void)).call(baselineorigin, glyphrun, defaultfillbrush, svgglyphstyle, colorpaletteindex, measuringmode)
  end
  def get_color_bitmap_glyph_image(glyphimageformat : DWRITE_GLYPH_IMAGE_FORMATS, glyphorigin : D2D_POINT_2F, fontface : IDWriteFontFace, fontemsize : Float32, glyphindex : UInt16, issideways : LibC::BOOL, worldtransform : D2D_MATRIX_3X2_F*, dpix : Float32, dpiy : Float32, glyphtransform : D2D_MATRIX_3X2_F*, glyphimage : ID2D1Image*) : HRESULT
    @lpVtbl.value.get_color_bitmap_glyph_image.unsafe_as(Proc(DWRITE_GLYPH_IMAGE_FORMATS, D2D_POINT_2F, IDWriteFontFace, Float32, UInt16, LibC::BOOL, D2D_MATRIX_3X2_F*, Float32, Float32, D2D_MATRIX_3X2_F*, ID2D1Image*, HRESULT)).call(glyphimageformat, glyphorigin, fontface, fontemsize, glyphindex, issideways, worldtransform, dpix, dpiy, glyphtransform, glyphimage)
  end
  def get_svg_glyph_image(glyphorigin : D2D_POINT_2F, fontface : IDWriteFontFace, fontemsize : Float32, glyphindex : UInt16, issideways : LibC::BOOL, worldtransform : D2D_MATRIX_3X2_F*, defaultfillbrush : ID2D1Brush, svgglyphstyle : ID2D1SvgGlyphStyle, colorpaletteindex : UInt32, glyphtransform : D2D_MATRIX_3X2_F*, glyphimage : ID2D1CommandList*) : HRESULT
    @lpVtbl.value.get_svg_glyph_image.unsafe_as(Proc(D2D_POINT_2F, IDWriteFontFace, Float32, UInt16, LibC::BOOL, D2D_MATRIX_3X2_F*, ID2D1Brush, ID2D1SvgGlyphStyle, UInt32, D2D_MATRIX_3X2_F*, ID2D1CommandList*, HRESULT)).call(glyphorigin, fontface, fontemsize, glyphindex, issideways, worldtransform, defaultfillbrush, svgglyphstyle, colorpaletteindex, glyphtransform, glyphimage)
  end
  def create_svg_document(inputxmlstream : IStream, viewportsize : D2D_SIZE_F, svgdocument : ID2D1SvgDocument*) : HRESULT
    @lpVtbl.value.create_svg_document.unsafe_as(Proc(IStream, D2D_SIZE_F, ID2D1SvgDocument*, HRESULT)).call(inputxmlstream, viewportsize, svgdocument)
  end
  def draw_svg_document(svgdocument : ID2D1SvgDocument) : Void
    @lpVtbl.value.draw_svg_document.unsafe_as(Proc(ID2D1SvgDocument, Void)).call(svgdocument)
  end
  def create_color_context_from_dxgi_color_space(colorspace : DXGI_COLOR_SPACE_TYPE, colorcontext : ID2D1ColorContext1*) : HRESULT
    @lpVtbl.value.create_color_context_from_dxgi_color_space.unsafe_as(Proc(DXGI_COLOR_SPACE_TYPE, ID2D1ColorContext1*, HRESULT)).call(colorspace, colorcontext)
  end
  def create_color_context_from_simple_color_profile(simpleprofile : D2D1_SIMPLE_COLOR_PROFILE*, colorcontext : ID2D1ColorContext1*) : HRESULT
    @lpVtbl.value.create_color_context_from_simple_color_profile.unsafe_as(Proc(D2D1_SIMPLE_COLOR_PROFILE*, ID2D1ColorContext1*, HRESULT)).call(simpleprofile, colorcontext)
  end
  def blend_image(image : ID2D1Image, blendmode : D2D1_BLEND_MODE, targetoffset : D2D_POINT_2F*, imagerectangle : D2D_RECT_F*, interpolationmode : D2D1_INTERPOLATION_MODE) : Void
    @lpVtbl.value.blend_image.unsafe_as(Proc(ID2D1Image, D2D1_BLEND_MODE, D2D_POINT_2F*, D2D_RECT_F*, D2D1_INTERPOLATION_MODE, Void)).call(image, blendmode, targetoffset, imagerectangle, interpolationmode)
  end
end
struct LibWin32::ID2D1Device6
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_factory(factory : ID2D1Factory*) : Void
    @lpVtbl.value.get_factory.unsafe_as(Proc(ID2D1Factory*, Void)).call(factory)
  end
  def create_device_context(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext : ID2D1DeviceContext*) : HRESULT
    @lpVtbl.value.create_device_context.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext*, HRESULT)).call(options, devicecontext)
  end
  def create_print_control(wicfactory : IWICImagingFactory, documenttarget : IPrintDocumentPackageTarget, printcontrolproperties : D2D1_PRINT_CONTROL_PROPERTIES*, printcontrol : ID2D1PrintControl*) : HRESULT
    @lpVtbl.value.create_print_control.unsafe_as(Proc(IWICImagingFactory, IPrintDocumentPackageTarget, D2D1_PRINT_CONTROL_PROPERTIES*, ID2D1PrintControl*, HRESULT)).call(wicfactory, documenttarget, printcontrolproperties, printcontrol)
  end
  def set_maximum_texture_memory(maximuminbytes : UInt64) : Void
    @lpVtbl.value.set_maximum_texture_memory.unsafe_as(Proc(UInt64, Void)).call(maximuminbytes)
  end
  def get_maximum_texture_memory : UInt64
    @lpVtbl.value.get_maximum_texture_memory.unsafe_as(Proc(UInt64)).call
  end
  def clear_resources(millisecondssinceuse : UInt32) : Void
    @lpVtbl.value.clear_resources.unsafe_as(Proc(UInt32, Void)).call(millisecondssinceuse)
  end
  def get_rendering_priority : D2D1_RENDERING_PRIORITY
    @lpVtbl.value.get_rendering_priority.unsafe_as(Proc(D2D1_RENDERING_PRIORITY)).call
  end
  def set_rendering_priority(renderingpriority : D2D1_RENDERING_PRIORITY) : Void
    @lpVtbl.value.set_rendering_priority.unsafe_as(Proc(D2D1_RENDERING_PRIORITY, Void)).call(renderingpriority)
  end
  def create_device_context2(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext1 : ID2D1DeviceContext1*) : HRESULT
    @lpVtbl.value.create_device_context2.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext1*, HRESULT)).call(options, devicecontext1)
  end
  def create_device_context3(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext2 : ID2D1DeviceContext2*) : HRESULT
    @lpVtbl.value.create_device_context3.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext2*, HRESULT)).call(options, devicecontext2)
  end
  def flush_device_contexts(bitmap : ID2D1Bitmap) : Void
    @lpVtbl.value.flush_device_contexts.unsafe_as(Proc(ID2D1Bitmap, Void)).call(bitmap)
  end
  def get_dxgi_device(dxgidevice : IDXGIDevice*) : HRESULT
    @lpVtbl.value.get_dxgi_device.unsafe_as(Proc(IDXGIDevice*, HRESULT)).call(dxgidevice)
  end
  def create_device_context4(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext3 : ID2D1DeviceContext3*) : HRESULT
    @lpVtbl.value.create_device_context4.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext3*, HRESULT)).call(options, devicecontext3)
  end
  def create_device_context5(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext4 : ID2D1DeviceContext4*) : HRESULT
    @lpVtbl.value.create_device_context5.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext4*, HRESULT)).call(options, devicecontext4)
  end
  def set_maximum_color_glyph_cache_memory(maximuminbytes : UInt64) : Void
    @lpVtbl.value.set_maximum_color_glyph_cache_memory.unsafe_as(Proc(UInt64, Void)).call(maximuminbytes)
  end
  def get_maximum_color_glyph_cache_memory : UInt64
    @lpVtbl.value.get_maximum_color_glyph_cache_memory.unsafe_as(Proc(UInt64)).call
  end
  def create_device_context6(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext5 : ID2D1DeviceContext5*) : HRESULT
    @lpVtbl.value.create_device_context6.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext5*, HRESULT)).call(options, devicecontext5)
  end
  def create_device_context7(options : D2D1_DEVICE_CONTEXT_OPTIONS, devicecontext6 : ID2D1DeviceContext6*) : HRESULT
    @lpVtbl.value.create_device_context7.unsafe_as(Proc(D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext6*, HRESULT)).call(options, devicecontext6)
  end
end
struct LibWin32::ID2D1Factory7
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def reload_system_metrics : HRESULT
    @lpVtbl.value.reload_system_metrics.unsafe_as(Proc(HRESULT)).call
  end
  def get_desktop_dpi(dpix : Float32*, dpiy : Float32*) : Void
    @lpVtbl.value.get_desktop_dpi.unsafe_as(Proc(Float32*, Float32*, Void)).call(dpix, dpiy)
  end
  def create_rectangle_geometry(rectangle : D2D_RECT_F*, rectanglegeometry : ID2D1RectangleGeometry*) : HRESULT
    @lpVtbl.value.create_rectangle_geometry.unsafe_as(Proc(D2D_RECT_F*, ID2D1RectangleGeometry*, HRESULT)).call(rectangle, rectanglegeometry)
  end
  def create_rounded_rectangle_geometry(roundedrectangle : D2D1_ROUNDED_RECT*, roundedrectanglegeometry : ID2D1RoundedRectangleGeometry*) : HRESULT
    @lpVtbl.value.create_rounded_rectangle_geometry.unsafe_as(Proc(D2D1_ROUNDED_RECT*, ID2D1RoundedRectangleGeometry*, HRESULT)).call(roundedrectangle, roundedrectanglegeometry)
  end
  def create_ellipse_geometry(ellipse : D2D1_ELLIPSE*, ellipsegeometry : ID2D1EllipseGeometry*) : HRESULT
    @lpVtbl.value.create_ellipse_geometry.unsafe_as(Proc(D2D1_ELLIPSE*, ID2D1EllipseGeometry*, HRESULT)).call(ellipse, ellipsegeometry)
  end
  def create_geometry_group(fillmode : D2D1_FILL_MODE, geometries : ID2D1Geometry*, geometriescount : UInt32, geometrygroup : ID2D1GeometryGroup*) : HRESULT
    @lpVtbl.value.create_geometry_group.unsafe_as(Proc(D2D1_FILL_MODE, ID2D1Geometry*, UInt32, ID2D1GeometryGroup*, HRESULT)).call(fillmode, geometries, geometriescount, geometrygroup)
  end
  def create_transformed_geometry(sourcegeometry : ID2D1Geometry, transform : D2D_MATRIX_3X2_F*, transformedgeometry : ID2D1TransformedGeometry*) : HRESULT
    @lpVtbl.value.create_transformed_geometry.unsafe_as(Proc(ID2D1Geometry, D2D_MATRIX_3X2_F*, ID2D1TransformedGeometry*, HRESULT)).call(sourcegeometry, transform, transformedgeometry)
  end
  def create_path_geometry(pathgeometry : ID2D1PathGeometry*) : HRESULT
    @lpVtbl.value.create_path_geometry.unsafe_as(Proc(ID2D1PathGeometry*, HRESULT)).call(pathgeometry)
  end
  def create_stroke_style(strokestyleproperties : D2D1_STROKE_STYLE_PROPERTIES*, dashes : Float32*, dashescount : UInt32, strokestyle : ID2D1StrokeStyle*) : HRESULT
    @lpVtbl.value.create_stroke_style.unsafe_as(Proc(D2D1_STROKE_STYLE_PROPERTIES*, Float32*, UInt32, ID2D1StrokeStyle*, HRESULT)).call(strokestyleproperties, dashes, dashescount, strokestyle)
  end
  def create_drawing_state_block(drawingstatedescription : D2D1_DRAWING_STATE_DESCRIPTION*, textrenderingparams : IDWriteRenderingParams, drawingstateblock : ID2D1DrawingStateBlock*) : HRESULT
    @lpVtbl.value.create_drawing_state_block.unsafe_as(Proc(D2D1_DRAWING_STATE_DESCRIPTION*, IDWriteRenderingParams, ID2D1DrawingStateBlock*, HRESULT)).call(drawingstatedescription, textrenderingparams, drawingstateblock)
  end
  def create_wic_bitmap_render_target(target : IWICBitmap, rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, rendertarget : ID2D1RenderTarget*) : HRESULT
    @lpVtbl.value.create_wic_bitmap_render_target.unsafe_as(Proc(IWICBitmap, D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget*, HRESULT)).call(target, rendertargetproperties, rendertarget)
  end
  def create_hwnd_render_target(rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, hwndrendertargetproperties : D2D1_HWND_RENDER_TARGET_PROPERTIES*, hwndrendertarget : ID2D1HwndRenderTarget*) : HRESULT
    @lpVtbl.value.create_hwnd_render_target.unsafe_as(Proc(D2D1_RENDER_TARGET_PROPERTIES*, D2D1_HWND_RENDER_TARGET_PROPERTIES*, ID2D1HwndRenderTarget*, HRESULT)).call(rendertargetproperties, hwndrendertargetproperties, hwndrendertarget)
  end
  def create_dxgi_surface_render_target(dxgisurface : IDXGISurface, rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, rendertarget : ID2D1RenderTarget*) : HRESULT
    @lpVtbl.value.create_dxgi_surface_render_target.unsafe_as(Proc(IDXGISurface, D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget*, HRESULT)).call(dxgisurface, rendertargetproperties, rendertarget)
  end
  def create_dc_render_target(rendertargetproperties : D2D1_RENDER_TARGET_PROPERTIES*, dcrendertarget : ID2D1DCRenderTarget*) : HRESULT
    @lpVtbl.value.create_dc_render_target.unsafe_as(Proc(D2D1_RENDER_TARGET_PROPERTIES*, ID2D1DCRenderTarget*, HRESULT)).call(rendertargetproperties, dcrendertarget)
  end
  def create_device(dxgidevice : IDXGIDevice, d2ddevice : ID2D1Device*) : HRESULT
    @lpVtbl.value.create_device.unsafe_as(Proc(IDXGIDevice, ID2D1Device*, HRESULT)).call(dxgidevice, d2ddevice)
  end
  def create_stroke_style2(strokestyleproperties : D2D1_STROKE_STYLE_PROPERTIES1*, dashes : Float32*, dashescount : UInt32, strokestyle : ID2D1StrokeStyle1*) : HRESULT
    @lpVtbl.value.create_stroke_style2.unsafe_as(Proc(D2D1_STROKE_STYLE_PROPERTIES1*, Float32*, UInt32, ID2D1StrokeStyle1*, HRESULT)).call(strokestyleproperties, dashes, dashescount, strokestyle)
  end
  def create_path_geometry2(pathgeometry : ID2D1PathGeometry1*) : HRESULT
    @lpVtbl.value.create_path_geometry2.unsafe_as(Proc(ID2D1PathGeometry1*, HRESULT)).call(pathgeometry)
  end
  def create_drawing_state_block2(drawingstatedescription : D2D1_DRAWING_STATE_DESCRIPTION1*, textrenderingparams : IDWriteRenderingParams, drawingstateblock : ID2D1DrawingStateBlock1*) : HRESULT
    @lpVtbl.value.create_drawing_state_block2.unsafe_as(Proc(D2D1_DRAWING_STATE_DESCRIPTION1*, IDWriteRenderingParams, ID2D1DrawingStateBlock1*, HRESULT)).call(drawingstatedescription, textrenderingparams, drawingstateblock)
  end
  def create_gdi_metafile(metafilestream : IStream, metafile : ID2D1GdiMetafile*) : HRESULT
    @lpVtbl.value.create_gdi_metafile.unsafe_as(Proc(IStream, ID2D1GdiMetafile*, HRESULT)).call(metafilestream, metafile)
  end
  def register_effect_from_stream(classid : Guid*, propertyxml : IStream, bindings : D2D1_PROPERTY_BINDING*, bindingscount : UInt32, effectfactory : PD2D1_EFFECT_FACTORY) : HRESULT
    @lpVtbl.value.register_effect_from_stream.unsafe_as(Proc(Guid*, IStream, D2D1_PROPERTY_BINDING*, UInt32, PD2D1_EFFECT_FACTORY, HRESULT)).call(classid, propertyxml, bindings, bindingscount, effectfactory)
  end
  def register_effect_from_string(classid : Guid*, propertyxml : LibC::LPWSTR, bindings : D2D1_PROPERTY_BINDING*, bindingscount : UInt32, effectfactory : PD2D1_EFFECT_FACTORY) : HRESULT
    @lpVtbl.value.register_effect_from_string.unsafe_as(Proc(Guid*, LibC::LPWSTR, D2D1_PROPERTY_BINDING*, UInt32, PD2D1_EFFECT_FACTORY, HRESULT)).call(classid, propertyxml, bindings, bindingscount, effectfactory)
  end
  def unregister_effect(classid : Guid*) : HRESULT
    @lpVtbl.value.unregister_effect.unsafe_as(Proc(Guid*, HRESULT)).call(classid)
  end
  def get_registered_effects(effects : Guid*, effectscount : UInt32, effectsreturned : UInt32*, effectsregistered : UInt32*) : HRESULT
    @lpVtbl.value.get_registered_effects.unsafe_as(Proc(Guid*, UInt32, UInt32*, UInt32*, HRESULT)).call(effects, effectscount, effectsreturned, effectsregistered)
  end
  def get_effect_properties(effectid : Guid*, properties : ID2D1Properties*) : HRESULT
    @lpVtbl.value.get_effect_properties.unsafe_as(Proc(Guid*, ID2D1Properties*, HRESULT)).call(effectid, properties)
  end
  def create_device2(dxgidevice : IDXGIDevice, d2ddevice1 : ID2D1Device1*) : HRESULT
    @lpVtbl.value.create_device2.unsafe_as(Proc(IDXGIDevice, ID2D1Device1*, HRESULT)).call(dxgidevice, d2ddevice1)
  end
  def create_device3(dxgidevice : IDXGIDevice, d2ddevice2 : ID2D1Device2*) : HRESULT
    @lpVtbl.value.create_device3.unsafe_as(Proc(IDXGIDevice, ID2D1Device2*, HRESULT)).call(dxgidevice, d2ddevice2)
  end
  def create_device4(dxgidevice : IDXGIDevice, d2ddevice3 : ID2D1Device3*) : HRESULT
    @lpVtbl.value.create_device4.unsafe_as(Proc(IDXGIDevice, ID2D1Device3*, HRESULT)).call(dxgidevice, d2ddevice3)
  end
  def create_device5(dxgidevice : IDXGIDevice, d2ddevice4 : ID2D1Device4*) : HRESULT
    @lpVtbl.value.create_device5.unsafe_as(Proc(IDXGIDevice, ID2D1Device4*, HRESULT)).call(dxgidevice, d2ddevice4)
  end
  def create_device6(dxgidevice : IDXGIDevice, d2ddevice5 : ID2D1Device5*) : HRESULT
    @lpVtbl.value.create_device6.unsafe_as(Proc(IDXGIDevice, ID2D1Device5*, HRESULT)).call(dxgidevice, d2ddevice5)
  end
  def create_device7(dxgidevice : IDXGIDevice, d2ddevice6 : ID2D1Device6*) : HRESULT
    @lpVtbl.value.create_device7.unsafe_as(Proc(IDXGIDevice, ID2D1Device6*, HRESULT)).call(dxgidevice, d2ddevice6)
  end
end
struct LibWin32::ID2D1EffectContext1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_dpi(dpix : Float32*, dpiy : Float32*) : Void
    @lpVtbl.value.get_dpi.unsafe_as(Proc(Float32*, Float32*, Void)).call(dpix, dpiy)
  end
  def create_effect(effectid : Guid*, effect : ID2D1Effect*) : HRESULT
    @lpVtbl.value.create_effect.unsafe_as(Proc(Guid*, ID2D1Effect*, HRESULT)).call(effectid, effect)
  end
  def get_maximum_supported_feature_level(featurelevels : D3D_FEATURE_LEVEL*, featurelevelscount : UInt32, maximumsupportedfeaturelevel : D3D_FEATURE_LEVEL*) : HRESULT
    @lpVtbl.value.get_maximum_supported_feature_level.unsafe_as(Proc(D3D_FEATURE_LEVEL*, UInt32, D3D_FEATURE_LEVEL*, HRESULT)).call(featurelevels, featurelevelscount, maximumsupportedfeaturelevel)
  end
  def create_transform_node_from_effect(effect : ID2D1Effect, transformnode : ID2D1TransformNode*) : HRESULT
    @lpVtbl.value.create_transform_node_from_effect.unsafe_as(Proc(ID2D1Effect, ID2D1TransformNode*, HRESULT)).call(effect, transformnode)
  end
  def create_blend_transform(numinputs : UInt32, blenddescription : D2D1_BLEND_DESCRIPTION*, transform : ID2D1BlendTransform*) : HRESULT
    @lpVtbl.value.create_blend_transform.unsafe_as(Proc(UInt32, D2D1_BLEND_DESCRIPTION*, ID2D1BlendTransform*, HRESULT)).call(numinputs, blenddescription, transform)
  end
  def create_border_transform(extendmodex : D2D1_EXTEND_MODE, extendmodey : D2D1_EXTEND_MODE, transform : ID2D1BorderTransform*) : HRESULT
    @lpVtbl.value.create_border_transform.unsafe_as(Proc(D2D1_EXTEND_MODE, D2D1_EXTEND_MODE, ID2D1BorderTransform*, HRESULT)).call(extendmodex, extendmodey, transform)
  end
  def create_offset_transform(offset : POINT, transform : ID2D1OffsetTransform*) : HRESULT
    @lpVtbl.value.create_offset_transform.unsafe_as(Proc(POINT, ID2D1OffsetTransform*, HRESULT)).call(offset, transform)
  end
  def create_bounds_adjustment_transform(outputrectangle : RECT*, transform : ID2D1BoundsAdjustmentTransform*) : HRESULT
    @lpVtbl.value.create_bounds_adjustment_transform.unsafe_as(Proc(RECT*, ID2D1BoundsAdjustmentTransform*, HRESULT)).call(outputrectangle, transform)
  end
  def load_pixel_shader(shaderid : Guid*, shaderbuffer : UInt8*, shaderbuffercount : UInt32) : HRESULT
    @lpVtbl.value.load_pixel_shader.unsafe_as(Proc(Guid*, UInt8*, UInt32, HRESULT)).call(shaderid, shaderbuffer, shaderbuffercount)
  end
  def load_vertex_shader(resourceid : Guid*, shaderbuffer : UInt8*, shaderbuffercount : UInt32) : HRESULT
    @lpVtbl.value.load_vertex_shader.unsafe_as(Proc(Guid*, UInt8*, UInt32, HRESULT)).call(resourceid, shaderbuffer, shaderbuffercount)
  end
  def load_compute_shader(resourceid : Guid*, shaderbuffer : UInt8*, shaderbuffercount : UInt32) : HRESULT
    @lpVtbl.value.load_compute_shader.unsafe_as(Proc(Guid*, UInt8*, UInt32, HRESULT)).call(resourceid, shaderbuffer, shaderbuffercount)
  end
  def is_shader_loaded(shaderid : Guid*) : LibC::BOOL
    @lpVtbl.value.is_shader_loaded.unsafe_as(Proc(Guid*, LibC::BOOL)).call(shaderid)
  end
  def create_resource_texture(resourceid : Guid*, resourcetextureproperties : D2D1_RESOURCE_TEXTURE_PROPERTIES*, data : UInt8*, strides : UInt32*, datasize : UInt32, resourcetexture : ID2D1ResourceTexture*) : HRESULT
    @lpVtbl.value.create_resource_texture.unsafe_as(Proc(Guid*, D2D1_RESOURCE_TEXTURE_PROPERTIES*, UInt8*, UInt32*, UInt32, ID2D1ResourceTexture*, HRESULT)).call(resourceid, resourcetextureproperties, data, strides, datasize, resourcetexture)
  end
  def find_resource_texture(resourceid : Guid*, resourcetexture : ID2D1ResourceTexture*) : HRESULT
    @lpVtbl.value.find_resource_texture.unsafe_as(Proc(Guid*, ID2D1ResourceTexture*, HRESULT)).call(resourceid, resourcetexture)
  end
  def create_vertex_buffer(vertexbufferproperties : D2D1_VERTEX_BUFFER_PROPERTIES*, resourceid : Guid*, customvertexbufferproperties : D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES*, buffer : ID2D1VertexBuffer*) : HRESULT
    @lpVtbl.value.create_vertex_buffer.unsafe_as(Proc(D2D1_VERTEX_BUFFER_PROPERTIES*, Guid*, D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES*, ID2D1VertexBuffer*, HRESULT)).call(vertexbufferproperties, resourceid, customvertexbufferproperties, buffer)
  end
  def find_vertex_buffer(resourceid : Guid*, buffer : ID2D1VertexBuffer*) : HRESULT
    @lpVtbl.value.find_vertex_buffer.unsafe_as(Proc(Guid*, ID2D1VertexBuffer*, HRESULT)).call(resourceid, buffer)
  end
  def create_color_context(space : D2D1_COLOR_SPACE, profile : UInt8*, profilesize : UInt32, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context.unsafe_as(Proc(D2D1_COLOR_SPACE, UInt8*, UInt32, ID2D1ColorContext*, HRESULT)).call(space, profile, profilesize, colorcontext)
  end
  def create_color_context_from_filename(filename : LibC::LPWSTR, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context_from_filename.unsafe_as(Proc(LibC::LPWSTR, ID2D1ColorContext*, HRESULT)).call(filename, colorcontext)
  end
  def create_color_context_from_wic_color_context(wiccolorcontext : IWICColorContext, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context_from_wic_color_context.unsafe_as(Proc(IWICColorContext, ID2D1ColorContext*, HRESULT)).call(wiccolorcontext, colorcontext)
  end
  def check_feature_support(feature : D2D1_FEATURE, featuresupportdata : Void*, featuresupportdatasize : UInt32) : HRESULT
    @lpVtbl.value.check_feature_support.unsafe_as(Proc(D2D1_FEATURE, Void*, UInt32, HRESULT)).call(feature, featuresupportdata, featuresupportdatasize)
  end
  def is_buffer_precision_supported(bufferprecision : D2D1_BUFFER_PRECISION) : LibC::BOOL
    @lpVtbl.value.is_buffer_precision_supported.unsafe_as(Proc(D2D1_BUFFER_PRECISION, LibC::BOOL)).call(bufferprecision)
  end
  def create_lookup_table3_d(precision : D2D1_BUFFER_PRECISION, extents : UInt32*, data : UInt8*, datacount : UInt32, strides : UInt32*, lookuptable : ID2D1LookupTable3D*) : HRESULT
    @lpVtbl.value.create_lookup_table3_d.unsafe_as(Proc(D2D1_BUFFER_PRECISION, UInt32*, UInt8*, UInt32, UInt32*, ID2D1LookupTable3D*, HRESULT)).call(precision, extents, data, datacount, strides, lookuptable)
  end
end
struct LibWin32::ID2D1EffectContext2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_dpi(dpix : Float32*, dpiy : Float32*) : Void
    @lpVtbl.value.get_dpi.unsafe_as(Proc(Float32*, Float32*, Void)).call(dpix, dpiy)
  end
  def create_effect(effectid : Guid*, effect : ID2D1Effect*) : HRESULT
    @lpVtbl.value.create_effect.unsafe_as(Proc(Guid*, ID2D1Effect*, HRESULT)).call(effectid, effect)
  end
  def get_maximum_supported_feature_level(featurelevels : D3D_FEATURE_LEVEL*, featurelevelscount : UInt32, maximumsupportedfeaturelevel : D3D_FEATURE_LEVEL*) : HRESULT
    @lpVtbl.value.get_maximum_supported_feature_level.unsafe_as(Proc(D3D_FEATURE_LEVEL*, UInt32, D3D_FEATURE_LEVEL*, HRESULT)).call(featurelevels, featurelevelscount, maximumsupportedfeaturelevel)
  end
  def create_transform_node_from_effect(effect : ID2D1Effect, transformnode : ID2D1TransformNode*) : HRESULT
    @lpVtbl.value.create_transform_node_from_effect.unsafe_as(Proc(ID2D1Effect, ID2D1TransformNode*, HRESULT)).call(effect, transformnode)
  end
  def create_blend_transform(numinputs : UInt32, blenddescription : D2D1_BLEND_DESCRIPTION*, transform : ID2D1BlendTransform*) : HRESULT
    @lpVtbl.value.create_blend_transform.unsafe_as(Proc(UInt32, D2D1_BLEND_DESCRIPTION*, ID2D1BlendTransform*, HRESULT)).call(numinputs, blenddescription, transform)
  end
  def create_border_transform(extendmodex : D2D1_EXTEND_MODE, extendmodey : D2D1_EXTEND_MODE, transform : ID2D1BorderTransform*) : HRESULT
    @lpVtbl.value.create_border_transform.unsafe_as(Proc(D2D1_EXTEND_MODE, D2D1_EXTEND_MODE, ID2D1BorderTransform*, HRESULT)).call(extendmodex, extendmodey, transform)
  end
  def create_offset_transform(offset : POINT, transform : ID2D1OffsetTransform*) : HRESULT
    @lpVtbl.value.create_offset_transform.unsafe_as(Proc(POINT, ID2D1OffsetTransform*, HRESULT)).call(offset, transform)
  end
  def create_bounds_adjustment_transform(outputrectangle : RECT*, transform : ID2D1BoundsAdjustmentTransform*) : HRESULT
    @lpVtbl.value.create_bounds_adjustment_transform.unsafe_as(Proc(RECT*, ID2D1BoundsAdjustmentTransform*, HRESULT)).call(outputrectangle, transform)
  end
  def load_pixel_shader(shaderid : Guid*, shaderbuffer : UInt8*, shaderbuffercount : UInt32) : HRESULT
    @lpVtbl.value.load_pixel_shader.unsafe_as(Proc(Guid*, UInt8*, UInt32, HRESULT)).call(shaderid, shaderbuffer, shaderbuffercount)
  end
  def load_vertex_shader(resourceid : Guid*, shaderbuffer : UInt8*, shaderbuffercount : UInt32) : HRESULT
    @lpVtbl.value.load_vertex_shader.unsafe_as(Proc(Guid*, UInt8*, UInt32, HRESULT)).call(resourceid, shaderbuffer, shaderbuffercount)
  end
  def load_compute_shader(resourceid : Guid*, shaderbuffer : UInt8*, shaderbuffercount : UInt32) : HRESULT
    @lpVtbl.value.load_compute_shader.unsafe_as(Proc(Guid*, UInt8*, UInt32, HRESULT)).call(resourceid, shaderbuffer, shaderbuffercount)
  end
  def is_shader_loaded(shaderid : Guid*) : LibC::BOOL
    @lpVtbl.value.is_shader_loaded.unsafe_as(Proc(Guid*, LibC::BOOL)).call(shaderid)
  end
  def create_resource_texture(resourceid : Guid*, resourcetextureproperties : D2D1_RESOURCE_TEXTURE_PROPERTIES*, data : UInt8*, strides : UInt32*, datasize : UInt32, resourcetexture : ID2D1ResourceTexture*) : HRESULT
    @lpVtbl.value.create_resource_texture.unsafe_as(Proc(Guid*, D2D1_RESOURCE_TEXTURE_PROPERTIES*, UInt8*, UInt32*, UInt32, ID2D1ResourceTexture*, HRESULT)).call(resourceid, resourcetextureproperties, data, strides, datasize, resourcetexture)
  end
  def find_resource_texture(resourceid : Guid*, resourcetexture : ID2D1ResourceTexture*) : HRESULT
    @lpVtbl.value.find_resource_texture.unsafe_as(Proc(Guid*, ID2D1ResourceTexture*, HRESULT)).call(resourceid, resourcetexture)
  end
  def create_vertex_buffer(vertexbufferproperties : D2D1_VERTEX_BUFFER_PROPERTIES*, resourceid : Guid*, customvertexbufferproperties : D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES*, buffer : ID2D1VertexBuffer*) : HRESULT
    @lpVtbl.value.create_vertex_buffer.unsafe_as(Proc(D2D1_VERTEX_BUFFER_PROPERTIES*, Guid*, D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES*, ID2D1VertexBuffer*, HRESULT)).call(vertexbufferproperties, resourceid, customvertexbufferproperties, buffer)
  end
  def find_vertex_buffer(resourceid : Guid*, buffer : ID2D1VertexBuffer*) : HRESULT
    @lpVtbl.value.find_vertex_buffer.unsafe_as(Proc(Guid*, ID2D1VertexBuffer*, HRESULT)).call(resourceid, buffer)
  end
  def create_color_context(space : D2D1_COLOR_SPACE, profile : UInt8*, profilesize : UInt32, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context.unsafe_as(Proc(D2D1_COLOR_SPACE, UInt8*, UInt32, ID2D1ColorContext*, HRESULT)).call(space, profile, profilesize, colorcontext)
  end
  def create_color_context_from_filename(filename : LibC::LPWSTR, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context_from_filename.unsafe_as(Proc(LibC::LPWSTR, ID2D1ColorContext*, HRESULT)).call(filename, colorcontext)
  end
  def create_color_context_from_wic_color_context(wiccolorcontext : IWICColorContext, colorcontext : ID2D1ColorContext*) : HRESULT
    @lpVtbl.value.create_color_context_from_wic_color_context.unsafe_as(Proc(IWICColorContext, ID2D1ColorContext*, HRESULT)).call(wiccolorcontext, colorcontext)
  end
  def check_feature_support(feature : D2D1_FEATURE, featuresupportdata : Void*, featuresupportdatasize : UInt32) : HRESULT
    @lpVtbl.value.check_feature_support.unsafe_as(Proc(D2D1_FEATURE, Void*, UInt32, HRESULT)).call(feature, featuresupportdata, featuresupportdatasize)
  end
  def is_buffer_precision_supported(bufferprecision : D2D1_BUFFER_PRECISION) : LibC::BOOL
    @lpVtbl.value.is_buffer_precision_supported.unsafe_as(Proc(D2D1_BUFFER_PRECISION, LibC::BOOL)).call(bufferprecision)
  end
  def create_lookup_table3_d(precision : D2D1_BUFFER_PRECISION, extents : UInt32*, data : UInt8*, datacount : UInt32, strides : UInt32*, lookuptable : ID2D1LookupTable3D*) : HRESULT
    @lpVtbl.value.create_lookup_table3_d.unsafe_as(Proc(D2D1_BUFFER_PRECISION, UInt32*, UInt8*, UInt32, UInt32*, ID2D1LookupTable3D*, HRESULT)).call(precision, extents, data, datacount, strides, lookuptable)
  end
  def create_color_context_from_dxgi_color_space(colorspace : DXGI_COLOR_SPACE_TYPE, colorcontext : ID2D1ColorContext1*) : HRESULT
    @lpVtbl.value.create_color_context_from_dxgi_color_space.unsafe_as(Proc(DXGI_COLOR_SPACE_TYPE, ID2D1ColorContext1*, HRESULT)).call(colorspace, colorcontext)
  end
  def create_color_context_from_simple_color_profile(simpleprofile : D2D1_SIMPLE_COLOR_PROFILE*, colorcontext : ID2D1ColorContext1*) : HRESULT
    @lpVtbl.value.create_color_context_from_simple_color_profile.unsafe_as(Proc(D2D1_SIMPLE_COLOR_PROFILE*, ID2D1ColorContext1*, HRESULT)).call(simpleprofile, colorcontext)
  end
end
