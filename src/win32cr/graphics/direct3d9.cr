require "../graphics/direct3d.cr"
require "../foundation.cr"
require "../system/com.cr"
require "../graphics/gdi.cr"

{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link("delayimp")]
{% end %}
@[Link("user32")]
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/IGNORE:4199")]
{% end %}
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/DELAYLOAD:d3d9.dll")]
{% else %}
@[Link("d3d9")]
{% end %}
lib LibWin32
  D3DRTYPECOUNT = 8_u32
  D3DCS_LEFT = 1_i32
  D3DCS_RIGHT = 2_i32
  D3DCS_TOP = 4_i32
  D3DCS_BOTTOM = 8_i32
  D3DCS_FRONT = 16_i32
  D3DCS_BACK = 32_i32
  D3DCS_PLANE0 = 64_i32
  D3DCS_PLANE1 = 128_i32
  D3DCS_PLANE2 = 256_i32
  D3DCS_PLANE3 = 512_i32
  D3DCS_PLANE4 = 1024_i32
  D3DCS_PLANE5 = 2048_i32
  D3D_MAX_SIMULTANEOUS_RENDERTARGETS = 4_u32
  D3DWRAP_W = 4_i32
  D3DDMAPSAMPLER = 256_u32
  D3DVERTEXTEXTURESAMPLER0 = 257_u32
  D3DVERTEXTEXTURESAMPLER1 = 258_u32
  D3DVERTEXTEXTURESAMPLER2 = 259_u32
  D3DVERTEXTEXTURESAMPLER3 = 260_u32
  D3DTSS_TCI_SPHEREMAP = 262144_u32
  D3DTA_TEMP = 5_u32
  D3DTA_CONSTANT = 6_u32
  D3DFVF_XYZW = 16386_u32
  D3DFVF_PSIZE = 32_u32
  D3DFVF_LASTBETA_UBYTE4 = 4096_u32
  D3DFVF_LASTBETA_D3DCOLOR = 32768_u32
  MAXD3DDECLUSAGEINDEX = 15_u32
  MAXD3DDECLLENGTH = 64_u32
  D3DSTREAMSOURCE_INDEXEDDATA = 1073741824_u32
  D3DSTREAMSOURCE_INSTANCEDATA = 2147483648_u32
  D3DSI_OPCODE_MASK = 65535_u32
  D3DSI_INSTLENGTH_MASK = 251658240_u32
  D3DSI_INSTLENGTH_SHIFT = 24_u32
  D3DSI_COISSUE = 1073741824_u32
  D3DSP_OPCODESPECIFICCONTROL_MASK = 16711680_u32
  D3DSP_OPCODESPECIFICCONTROL_SHIFT = 16_u32
  D3DSHADER_COMPARISON_SHIFT = 16_u32
  D3DSP_DCL_USAGE_SHIFT = 0_u32
  D3DSP_DCL_USAGE_MASK = 15_u32
  D3DSP_DCL_USAGEINDEX_SHIFT = 16_u32
  D3DSP_DCL_USAGEINDEX_MASK = 983040_u32
  D3DSP_TEXTURETYPE_SHIFT = 27_u32
  D3DSP_TEXTURETYPE_MASK = 2013265920_u32
  D3DSP_REGNUM_MASK = 2047_u32
  D3DSP_WRITEMASK_0 = 65536_u32
  D3DSP_WRITEMASK_1 = 131072_u32
  D3DSP_WRITEMASK_2 = 262144_u32
  D3DSP_WRITEMASK_3 = 524288_u32
  D3DSP_WRITEMASK_ALL = 983040_u32
  D3DSP_DSTMOD_SHIFT = 20_u32
  D3DSP_DSTMOD_MASK = 15728640_u32
  D3DSP_DSTSHIFT_SHIFT = 24_u32
  D3DSP_DSTSHIFT_MASK = 251658240_u32
  D3DSP_REGTYPE_SHIFT = 28_u32
  D3DSP_REGTYPE_SHIFT2 = 8_u32
  D3DSP_REGTYPE_MASK = 1879048192_u32
  D3DSP_REGTYPE_MASK2 = 6144_u32
  D3DVS_ADDRESSMODE_SHIFT = 13_u32
  D3DSHADER_ADDRESSMODE_SHIFT = 13_u32
  D3DVS_SWIZZLE_SHIFT = 16_u32
  D3DVS_SWIZZLE_MASK = 16711680_u32
  D3DSP_SWIZZLE_SHIFT = 16_u32
  D3DSP_SWIZZLE_MASK = 16711680_u32
  D3DSP_SRCMOD_SHIFT = 24_u32
  D3DSP_SRCMOD_MASK = 251658240_u32
  D3DSP_MIN_PRECISION_SHIFT = 14_u32
  D3DSP_MIN_PRECISION_MASK = 49152_u32
  D3DSI_COMMENTSIZE_SHIFT = 16_u32
  D3DSI_COMMENTSIZE_MASK = 2147418112_u32
  D3DPRESENT_RATE_DEFAULT = 0_u32
  D3DPRESENTFLAG_LOCKABLE_BACKBUFFER = 1_u32
  D3DPRESENTFLAG_DISCARD_DEPTHSTENCIL = 2_u32
  D3DPRESENTFLAG_DEVICECLIP = 4_u32
  D3DPRESENTFLAG_VIDEO = 16_u32
  D3DPRESENTFLAG_NOAUTOROTATE = 32_u32
  D3DPRESENTFLAG_UNPRUNEDMODE = 64_u32
  D3DPRESENTFLAG_OVERLAY_LIMITEDRGB = 128_u32
  D3DPRESENTFLAG_OVERLAY_YCbCr_BT709 = 256_u32
  D3DPRESENTFLAG_OVERLAY_YCbCr_xvYCC = 512_u32
  D3DPRESENTFLAG_RESTRICTED_CONTENT = 1024_u32
  D3DPRESENTFLAG_RESTRICT_SHARED_RESOURCE_DRIVER = 2048_u32
  D3DUSAGE_RENDERTARGET = 1_i32
  D3DUSAGE_DEPTHSTENCIL = 2_i32
  D3DUSAGE_DYNAMIC = 512_i32
  D3DUSAGE_NONSECURE = 8388608_i32
  D3DUSAGE_AUTOGENMIPMAP = 1024_i32
  D3DUSAGE_DMAP = 16384_i32
  D3DUSAGE_QUERY_LEGACYBUMPMAP = 32768_i32
  D3DUSAGE_QUERY_SRGBREAD = 65536_i32
  D3DUSAGE_QUERY_FILTER = 131072_i32
  D3DUSAGE_QUERY_SRGBWRITE = 262144_i32
  D3DUSAGE_QUERY_POSTPIXELSHADER_BLENDING = 524288_i32
  D3DUSAGE_QUERY_VERTEXTEXTURE = 1048576_i32
  D3DUSAGE_QUERY_WRAPANDMIP = 2097152_i32
  D3DUSAGE_WRITEONLY = 8_i32
  D3DUSAGE_SOFTWAREPROCESSING = 16_i32
  D3DUSAGE_DONOTCLIP = 32_i32
  D3DUSAGE_POINTS = 64_i32
  D3DUSAGE_RTPATCHES = 128_i32
  D3DUSAGE_NPATCHES = 256_i32
  D3DUSAGE_TEXTAPI = 268435456_i32
  D3DUSAGE_RESTRICTED_CONTENT = 2048_i32
  D3DUSAGE_RESTRICT_SHARED_RESOURCE = 8192_i32
  D3DUSAGE_RESTRICT_SHARED_RESOURCE_DRIVER = 4096_i32
  D3DLOCK_READONLY = 16_i32
  D3DLOCK_DISCARD = 8192_i32
  D3DLOCK_NOOVERWRITE = 4096_i32
  D3DLOCK_NOSYSLOCK = 2048_i32
  D3DLOCK_DONOTWAIT = 16384_i32
  D3DLOCK_NO_DIRTY_UPDATE = 32768_i32
  MAX_DEVICE_IDENTIFIER_STRING = 512_u32
  D3DISSUE_END = 1_u32
  D3DISSUE_BEGIN = 2_u32
  D3DGETDATA_FLUSH = 1_u32
  D3DCOMPOSERECTS_MAXNUMRECTS = 65535_u32
  D3DCONVOLUTIONMONO_MAXWIDTH = 7_u32
  D3DCONVOLUTIONMONO_MAXHEIGHT = 7_u32
  D3DFMT_A1_SURFACE_MAXWIDTH = 8192_u32
  D3DFMT_A1_SURFACE_MAXHEIGHT = 2048_u32
  D3D9_RESOURCE_PRIORITY_MINIMUM = 671088640_u32
  D3D9_RESOURCE_PRIORITY_LOW = 1342177280_u32
  D3D9_RESOURCE_PRIORITY_NORMAL = 2013265920_u32
  D3D9_RESOURCE_PRIORITY_HIGH = 2684354560_u32
  D3D9_RESOURCE_PRIORITY_MAXIMUM = 3355443200_u32
  D3D_OMAC_SIZE = 16_u32
  D3DAUTHENTICATEDQUERY_PROTECTION = "a84eb584-c495-48aa-b94d-8bd2d6fbce05"
  D3DAUTHENTICATEDQUERY_CHANNELTYPE = "bc1b18a5-b1fb-42ab-bd94-b5828b4bf7be"
  D3DAUTHENTICATEDQUERY_DEVICEHANDLE = "ec1c539d-8cff-4e2a-bcc4-f5692f99f480"
  D3DAUTHENTICATEDQUERY_CRYPTOSESSION = "2634499e-d018-4d74-ac17-7f724059528d"
  D3DAUTHENTICATEDQUERY_RESTRICTEDSHAREDRESOURCEPROCESSCOUNT = "0db207b3-9450-46a6-82de-1b96d44f9cf2"
  D3DAUTHENTICATEDQUERY_RESTRICTEDSHAREDRESOURCEPROCESS = "649bbadb-f0f4-4639-a15b-24393fc3abac"
  D3DAUTHENTICATEDQUERY_UNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT = "012f0bd6-e662-4474-befd-aa53e5143c6d"
  D3DAUTHENTICATEDQUERY_OUTPUTIDCOUNT = "2c042b5e-8c07-46d5-aabe-8f75cbad4c31"
  D3DAUTHENTICATEDQUERY_OUTPUTID = "839ddca3-9b4e-41e4-b053-892bd2a11ee7"
  D3DAUTHENTICATEDQUERY_ACCESSIBILITYATTRIBUTES = "6214d9d2-432c-4abb-9fce-216eea269e3b"
  D3DAUTHENTICATEDQUERY_ENCRYPTIONWHENACCESSIBLEGUIDCOUNT = "b30f7066-203c-4b07-93fc-ceaafd61241e"
  D3DAUTHENTICATEDQUERY_ENCRYPTIONWHENACCESSIBLEGUID = "f83a5958-e986-4bda-beb0-411f6a7a01b7"
  D3DAUTHENTICATEDQUERY_CURRENTENCRYPTIONWHENACCESSIBLE = "ec1791c7-dad3-4f15-9ec3-faa93d60d4f0"
  D3DAUTHENTICATEDCONFIGURE_INITIALIZE = "06114bdb-3523-470a-8dca-fbc2845154f0"
  D3DAUTHENTICATEDCONFIGURE_PROTECTION = "50455658-3f47-4362-bf99-bfdfcde9ed29"
  D3DAUTHENTICATEDCONFIGURE_CRYPTOSESSION = "6346cc54-2cfc-4ad4-8224-d15837de7700"
  D3DAUTHENTICATEDCONFIGURE_SHAREDRESOURCE = "0772d047-1b40-48e8-9ca6-b5f510de9f01"
  D3DAUTHENTICATEDCONFIGURE_ENCRYPTIONWHENACCESSIBLE = "41fff286-6ae0-4d43-9d55-a46e9efd158a"
  D3DVS20CAPS_PREDICATION = 1_u32
  D3DVS20_MAX_DYNAMICFLOWCONTROLDEPTH = 24_u32
  D3DVS20_MIN_DYNAMICFLOWCONTROLDEPTH = 0_u32
  D3DVS20_MAX_NUMTEMPS = 32_u32
  D3DVS20_MIN_NUMTEMPS = 12_u32
  D3DVS20_MAX_STATICFLOWCONTROLDEPTH = 4_u32
  D3DVS20_MIN_STATICFLOWCONTROLDEPTH = 1_u32
  D3DPS20CAPS_ARBITRARYSWIZZLE = 1_u32
  D3DPS20CAPS_GRADIENTINSTRUCTIONS = 2_u32
  D3DPS20CAPS_PREDICATION = 4_u32
  D3DPS20CAPS_NODEPENDENTREADLIMIT = 8_u32
  D3DPS20CAPS_NOTEXINSTRUCTIONLIMIT = 16_u32
  D3DPS20_MAX_DYNAMICFLOWCONTROLDEPTH = 24_u32
  D3DPS20_MIN_DYNAMICFLOWCONTROLDEPTH = 0_u32
  D3DPS20_MAX_NUMTEMPS = 32_u32
  D3DPS20_MIN_NUMTEMPS = 12_u32
  D3DPS20_MAX_STATICFLOWCONTROLDEPTH = 4_u32
  D3DPS20_MIN_STATICFLOWCONTROLDEPTH = 0_u32
  D3DPS20_MAX_NUMINSTRUCTIONSLOTS = 512_u32
  D3DPS20_MIN_NUMINSTRUCTIONSLOTS = 96_u32
  D3DMIN30SHADERINSTRUCTIONS = 512_u32
  D3DMAX30SHADERINSTRUCTIONS = 32768_u32
  D3DOVERLAYCAPS_FULLRANGERGB = 1_u32
  D3DOVERLAYCAPS_LIMITEDRANGERGB = 2_u32
  D3DOVERLAYCAPS_YCbCr_BT601 = 4_u32
  D3DOVERLAYCAPS_YCbCr_BT709 = 8_u32
  D3DOVERLAYCAPS_YCbCr_BT601_xvYCC = 16_u32
  D3DOVERLAYCAPS_YCbCr_BT709_xvYCC = 32_u32
  D3DOVERLAYCAPS_STRETCHX = 64_u32
  D3DOVERLAYCAPS_STRETCHY = 128_u32
  D3DCPCAPS_SOFTWARE = 1_u32
  D3DCPCAPS_HARDWARE = 2_u32
  D3DCPCAPS_PROTECTIONALWAYSON = 4_u32
  D3DCPCAPS_PARTIALDECRYPTION = 8_u32
  D3DCPCAPS_CONTENTKEY = 16_u32
  D3DCPCAPS_FRESHENSESSIONKEY = 32_u32
  D3DCPCAPS_ENCRYPTEDREADBACK = 64_u32
  D3DCPCAPS_ENCRYPTEDREADBACKKEY = 128_u32
  D3DCPCAPS_SEQUENTIAL_CTR_IV = 256_u32
  D3DCPCAPS_ENCRYPTSLICEDATAONLY = 512_u32
  D3DCRYPTOTYPE_AES128_CTR = "9b6bd711-4f74-41c9-9e7b-0be2d7d93b4f"
  D3DCRYPTOTYPE_PROPRIETARY = "ab4e9afd-1d1c-46e6-a72f-0869917b0de8"
  D3DKEYEXCHANGE_RSAES_OAEP = "c1949895-d72a-4a1d-8e5d-ed857d171520"
  D3DKEYEXCHANGE_DXVA = "43d3775c-38e5-4924-8d86-d3fccf153e9b"
  D3DCAPS_OVERLAY = 2048_i32
  D3DCAPS_READ_SCANLINE = 131072_i32
  D3DCAPS2_FULLSCREENGAMMA = 131072_i32
  D3DCAPS2_CANCALIBRATEGAMMA = 1048576_i32
  D3DCAPS2_RESERVED = 33554432_i32
  D3DCAPS2_CANMANAGERESOURCE = 268435456_i32
  D3DCAPS2_DYNAMICTEXTURES = 536870912_i32
  D3DCAPS2_CANAUTOGENMIPMAP = 1073741824_i32
  D3DCAPS2_CANSHARERESOURCE = -2147483648_i32
  D3DCAPS3_RESERVED = -2147483617_i32
  D3DCAPS3_ALPHA_FULLSCREEN_FLIP_OR_DISCARD = 32_i32
  D3DCAPS3_LINEAR_TO_SRGB_PRESENTATION = 128_i32
  D3DCAPS3_COPY_TO_VIDMEM = 256_i32
  D3DCAPS3_COPY_TO_SYSTEMMEM = 512_i32
  D3DCAPS3_DXVAHD = 1024_i32
  D3DCAPS3_DXVAHD_LIMITED = 2048_i32
  D3DPRESENT_INTERVAL_DEFAULT = 0_i32
  D3DPRESENT_INTERVAL_ONE = 1_i32
  D3DPRESENT_INTERVAL_TWO = 2_i32
  D3DPRESENT_INTERVAL_THREE = 4_i32
  D3DPRESENT_INTERVAL_FOUR = 8_i32
  D3DPRESENT_INTERVAL_IMMEDIATE = -2147483648_i32
  D3DCURSORCAPS_COLOR = 1_i32
  D3DCURSORCAPS_LOWRES = 2_i32
  D3DDEVCAPS_PUREDEVICE = 1048576_i32
  D3DDEVCAPS_QUINTICRTPATCHES = 2097152_i32
  D3DDEVCAPS_RTPATCHES = 4194304_i32
  D3DDEVCAPS_RTPATCHHANDLEZERO = 8388608_i32
  D3DDEVCAPS_NPATCHES = 16777216_i32
  D3DPMISCCAPS_COLORWRITEENABLE = 128_i32
  D3DPMISCCAPS_CLIPPLANESCALEDPOINTS = 256_i32
  D3DPMISCCAPS_CLIPTLVERTS = 512_i32
  D3DPMISCCAPS_TSSARGTEMP = 1024_i32
  D3DPMISCCAPS_BLENDOP = 2048_i32
  D3DPMISCCAPS_NULLREFERENCE = 4096_i32
  D3DPMISCCAPS_INDEPENDENTWRITEMASKS = 16384_i32
  D3DPMISCCAPS_PERSTAGECONSTANT = 32768_i32
  D3DPMISCCAPS_FOGANDSPECULARALPHA = 65536_i32
  D3DPMISCCAPS_SEPARATEALPHABLEND = 131072_i32
  D3DPMISCCAPS_MRTINDEPENDENTBITDEPTHS = 262144_i32
  D3DPMISCCAPS_MRTPOSTPIXELSHADERBLENDING = 524288_i32
  D3DPMISCCAPS_FOGVERTEXCLAMPED = 1048576_i32
  D3DPMISCCAPS_POSTBLENDSRGBCONVERT = 2097152_i32
  D3DLINECAPS_TEXTURE = 1_i32
  D3DLINECAPS_ZTEST = 2_i32
  D3DLINECAPS_BLEND = 4_i32
  D3DLINECAPS_ALPHACMP = 8_i32
  D3DLINECAPS_FOG = 16_i32
  D3DLINECAPS_ANTIALIAS = 32_i32
  D3DPRASTERCAPS_COLORPERSPECTIVE = 4194304_i32
  D3DPRASTERCAPS_SCISSORTEST = 16777216_i32
  D3DPRASTERCAPS_SLOPESCALEDEPTHBIAS = 33554432_i32
  D3DPRASTERCAPS_DEPTHBIAS = 67108864_i32
  D3DPRASTERCAPS_MULTISAMPLE_TOGGLE = 134217728_i32
  D3DPBLENDCAPS_BLENDFACTOR = 8192_i32
  D3DPBLENDCAPS_SRCCOLOR2 = 16384_i32
  D3DPBLENDCAPS_INVSRCCOLOR2 = 32768_i32
  D3DPTEXTURECAPS_VOLUMEMAP = 8192_i32
  D3DPTEXTURECAPS_MIPMAP = 16384_i32
  D3DPTEXTURECAPS_MIPVOLUMEMAP = 32768_i32
  D3DPTEXTURECAPS_MIPCUBEMAP = 65536_i32
  D3DPTEXTURECAPS_CUBEMAP_POW2 = 131072_i32
  D3DPTEXTURECAPS_VOLUMEMAP_POW2 = 262144_i32
  D3DPTEXTURECAPS_NOPROJECTEDBUMPENV = 2097152_i32
  D3DPTFILTERCAPS_MINFPYRAMIDALQUAD = 2048_i32
  D3DPTFILTERCAPS_MINFGAUSSIANQUAD = 4096_i32
  D3DPTFILTERCAPS_CONVOLUTIONMONO = 262144_i32
  D3DPTFILTERCAPS_MAGFPYRAMIDALQUAD = 134217728_i32
  D3DPTFILTERCAPS_MAGFGAUSSIANQUAD = 268435456_i32
  D3DPTADDRESSCAPS_MIRRORONCE = 32_i32
  D3DSTENCILCAPS_TWOSIDED = 256_i32
  D3DTEXOPCAPS_MULTIPLYADD = 16777216_i32
  D3DTEXOPCAPS_LERP = 33554432_i32
  D3DFVFCAPS_PSIZE = 1048576_i32
  D3DVTXPCAPS_TWEENING = 64_i32
  D3DVTXPCAPS_TEXGEN_SPHEREMAP = 256_i32
  D3DVTXPCAPS_NO_TEXGEN_NONLOCALVIEWER = 512_i32
  D3DDEVCAPS2_STREAMOFFSET = 1_i32
  D3DDEVCAPS2_DMAPNPATCH = 2_i32
  D3DDEVCAPS2_ADAPTIVETESSRTPATCH = 4_i32
  D3DDEVCAPS2_ADAPTIVETESSNPATCH = 8_i32
  D3DDEVCAPS2_CAN_STRETCHRECT_FROM_TEXTURES = 16_i32
  D3DDEVCAPS2_PRESAMPLEDDMAPNPATCH = 32_i32
  D3DDEVCAPS2_VERTEXELEMENTSCANSHARESTREAMOFFSET = 64_i32
  D3DDTCAPS_UBYTE4 = 1_i32
  D3DDTCAPS_UBYTE4N = 2_i32
  D3DDTCAPS_SHORT2N = 4_i32
  D3DDTCAPS_SHORT4N = 8_i32
  D3DDTCAPS_USHORT2N = 16_i32
  D3DDTCAPS_USHORT4N = 32_i32
  D3DDTCAPS_UDEC3 = 64_i32
  D3DDTCAPS_DEC3N = 128_i32
  D3DDTCAPS_FLOAT16_2 = 256_i32
  D3DDTCAPS_FLOAT16_4 = 512_i32
  D3DSPD_IUNKNOWN = 1_i32
  D3DCREATE_FPU_PRESERVE = 2_i32
  D3DCREATE_MULTITHREADED = 4_i32
  D3DCREATE_PUREDEVICE = 16_i32
  D3DCREATE_SOFTWARE_VERTEXPROCESSING = 32_i32
  D3DCREATE_HARDWARE_VERTEXPROCESSING = 64_i32
  D3DCREATE_MIXED_VERTEXPROCESSING = 128_i32
  D3DCREATE_DISABLE_DRIVER_MANAGEMENT = 256_i32
  D3DCREATE_ADAPTERGROUP_DEVICE = 512_i32
  D3DADAPTER_DEFAULT = 0_u32
  D3DENUM_NO_DRIVERVERSION = 4_i32
  D3DPRESENT_BACK_BUFFERS_MAX = 3_i32
  D3DSGR_NO_CALIBRATION = 0_i32
  D3DSGR_CALIBRATE = 1_i32
  D3DCURSOR_IMMEDIATE_UPDATE = 1_i32
  D3DPRESENT_DONOTWAIT = 1_i32
  D3DPRESENT_LINEAR_CONTENT = 2_i32
  FACD3D = 2166_u32
  D3D_SDK_VERSION = 32_u32
  D3D9b_SDK_VERSION = 31_u32
  D3DCREATE_DISABLE_DRIVER_MANAGEMENT_EX = 1024_i32
  D3DCREATE_NOWINDOWCHANGES = 2048_i32
  D3DCREATE_DISABLE_PSGP_THREADING = 8192_i32
  D3DCREATE_ENABLE_PRESENTSTATS = 16384_i32
  D3DCREATE_DISABLE_PRINTSCREEN = 32768_i32
  D3DCREATE_SCREENSAVER = 268435456_i32
  D3DENUM_WHQL_LEVEL = 2_i32
  D3DPRESENT_BACK_BUFFERS_MAX_EX = 30_i32
  D3DPRESENT_DONOTFLIP = 4_i32
  D3DPRESENT_FLIPRESTART = 8_i32
  D3DPRESENT_VIDEO_RESTRICT_TO_MONITOR = 16_i32
  D3DPRESENT_UPDATEOVERLAYONLY = 32_i32
  D3DPRESENT_HIDEOVERLAY = 64_i32
  D3DPRESENT_UPDATECOLORKEY = 128_i32
  D3DPRESENT_FORCEIMMEDIATE = 256_i32


  enum D3DLIGHTTYPE : Int32
    D3DLIGHT_POINT = 1
    D3DLIGHT_SPOT = 2
    D3DLIGHT_DIRECTIONAL = 3
    D3DLIGHT_FORCE_DWORD = 2147483647
  end

  enum D3DSHADEMODE : Int32
    D3DSHADE_FLAT = 1
    D3DSHADE_GOURAUD = 2
    D3DSHADE_PHONG = 3
    D3DSHADE_FORCE_DWORD = 2147483647
  end

  enum D3DFILLMODE : Int32
    D3DFILL_POINT = 1
    D3DFILL_WIREFRAME = 2
    D3DFILL_SOLID = 3
    D3DFILL_FORCE_DWORD = 2147483647
  end

  enum D3DBLEND : UInt32
    D3DBLEND_ZERO = 1
    D3DBLEND_ONE = 2
    D3DBLEND_SRCCOLOR = 3
    D3DBLEND_INVSRCCOLOR = 4
    D3DBLEND_SRCALPHA = 5
    D3DBLEND_INVSRCALPHA = 6
    D3DBLEND_DESTALPHA = 7
    D3DBLEND_INVDESTALPHA = 8
    D3DBLEND_DESTCOLOR = 9
    D3DBLEND_INVDESTCOLOR = 10
    D3DBLEND_SRCALPHASAT = 11
    D3DBLEND_BOTHSRCALPHA = 12
    D3DBLEND_BOTHINVSRCALPHA = 13
    D3DBLEND_BLENDFACTOR = 14
    D3DBLEND_INVBLENDFACTOR = 15
    D3DBLEND_SRCCOLOR2 = 16
    D3DBLEND_INVSRCCOLOR2 = 17
    D3DBLEND_FORCE_DWORD = 2147483647
  end

  enum D3DBLENDOP : UInt32
    D3DBLENDOP_ADD = 1
    D3DBLENDOP_SUBTRACT = 2
    D3DBLENDOP_REVSUBTRACT = 3
    D3DBLENDOP_MIN = 4
    D3DBLENDOP_MAX = 5
    D3DBLENDOP_FORCE_DWORD = 2147483647
  end

  enum D3DTEXTUREADDRESS : Int32
    D3DTADDRESS_WRAP = 1
    D3DTADDRESS_MIRROR = 2
    D3DTADDRESS_CLAMP = 3
    D3DTADDRESS_BORDER = 4
    D3DTADDRESS_MIRRORONCE = 5
    D3DTADDRESS_FORCE_DWORD = 2147483647
  end

  enum D3DCULL : UInt32
    D3DCULL_NONE = 1
    D3DCULL_CW = 2
    D3DCULL_CCW = 3
    D3DCULL_FORCE_DWORD = 2147483647
  end

  enum D3DCMPFUNC : Int32
    D3DCMP_NEVER = 1
    D3DCMP_LESS = 2
    D3DCMP_EQUAL = 3
    D3DCMP_LESSEQUAL = 4
    D3DCMP_GREATER = 5
    D3DCMP_NOTEQUAL = 6
    D3DCMP_GREATEREQUAL = 7
    D3DCMP_ALWAYS = 8
    D3DCMP_FORCE_DWORD = 2147483647
  end

  enum D3DSTENCILOP : UInt32
    D3DSTENCILOP_KEEP = 1
    D3DSTENCILOP_ZERO = 2
    D3DSTENCILOP_REPLACE = 3
    D3DSTENCILOP_INCRSAT = 4
    D3DSTENCILOP_DECRSAT = 5
    D3DSTENCILOP_INVERT = 6
    D3DSTENCILOP_INCR = 7
    D3DSTENCILOP_DECR = 8
    D3DSTENCILOP_FORCE_DWORD = 2147483647
  end

  enum D3DFOGMODE : Int32
    D3DFOG_NONE = 0
    D3DFOG_EXP = 1
    D3DFOG_EXP2 = 2
    D3DFOG_LINEAR = 3
    D3DFOG_FORCE_DWORD = 2147483647
  end

  enum D3DZBUFFERTYPE : Int32
    D3DZB_FALSE = 0
    D3DZB_TRUE = 1
    D3DZB_USEW = 2
    D3DZB_FORCE_DWORD = 2147483647
  end

  enum D3DPRIMITIVETYPE : Int32
    D3DPT_POINTLIST = 1
    D3DPT_LINELIST = 2
    D3DPT_LINESTRIP = 3
    D3DPT_TRIANGLELIST = 4
    D3DPT_TRIANGLESTRIP = 5
    D3DPT_TRIANGLEFAN = 6
    D3DPT_FORCE_DWORD = 2147483647
  end

  enum D3DTRANSFORMSTATETYPE : Int32
    D3DTS_VIEW = 2
    D3DTS_PROJECTION = 3
    D3DTS_TEXTURE0 = 16
    D3DTS_TEXTURE1 = 17
    D3DTS_TEXTURE2 = 18
    D3DTS_TEXTURE3 = 19
    D3DTS_TEXTURE4 = 20
    D3DTS_TEXTURE5 = 21
    D3DTS_TEXTURE6 = 22
    D3DTS_TEXTURE7 = 23
    D3DTS_FORCE_DWORD = 2147483647
  end

  enum D3DRENDERSTATETYPE : Int32
    D3DRS_ZENABLE = 7
    D3DRS_FILLMODE = 8
    D3DRS_SHADEMODE = 9
    D3DRS_ZWRITEENABLE = 14
    D3DRS_ALPHATESTENABLE = 15
    D3DRS_LASTPIXEL = 16
    D3DRS_SRCBLEND = 19
    D3DRS_DESTBLEND = 20
    D3DRS_CULLMODE = 22
    D3DRS_ZFUNC = 23
    D3DRS_ALPHAREF = 24
    D3DRS_ALPHAFUNC = 25
    D3DRS_DITHERENABLE = 26
    D3DRS_ALPHABLENDENABLE = 27
    D3DRS_FOGENABLE = 28
    D3DRS_SPECULARENABLE = 29
    D3DRS_FOGCOLOR = 34
    D3DRS_FOGTABLEMODE = 35
    D3DRS_FOGSTART = 36
    D3DRS_FOGEND = 37
    D3DRS_FOGDENSITY = 38
    D3DRS_RANGEFOGENABLE = 48
    D3DRS_STENCILENABLE = 52
    D3DRS_STENCILFAIL = 53
    D3DRS_STENCILZFAIL = 54
    D3DRS_STENCILPASS = 55
    D3DRS_STENCILFUNC = 56
    D3DRS_STENCILREF = 57
    D3DRS_STENCILMASK = 58
    D3DRS_STENCILWRITEMASK = 59
    D3DRS_TEXTUREFACTOR = 60
    D3DRS_WRAP0 = 128
    D3DRS_WRAP1 = 129
    D3DRS_WRAP2 = 130
    D3DRS_WRAP3 = 131
    D3DRS_WRAP4 = 132
    D3DRS_WRAP5 = 133
    D3DRS_WRAP6 = 134
    D3DRS_WRAP7 = 135
    D3DRS_CLIPPING = 136
    D3DRS_LIGHTING = 137
    D3DRS_AMBIENT = 139
    D3DRS_FOGVERTEXMODE = 140
    D3DRS_COLORVERTEX = 141
    D3DRS_LOCALVIEWER = 142
    D3DRS_NORMALIZENORMALS = 143
    D3DRS_DIFFUSEMATERIALSOURCE = 145
    D3DRS_SPECULARMATERIALSOURCE = 146
    D3DRS_AMBIENTMATERIALSOURCE = 147
    D3DRS_EMISSIVEMATERIALSOURCE = 148
    D3DRS_VERTEXBLEND = 151
    D3DRS_CLIPPLANEENABLE = 152
    D3DRS_POINTSIZE = 154
    D3DRS_POINTSIZE_MIN = 155
    D3DRS_POINTSPRITEENABLE = 156
    D3DRS_POINTSCALEENABLE = 157
    D3DRS_POINTSCALE_A = 158
    D3DRS_POINTSCALE_B = 159
    D3DRS_POINTSCALE_C = 160
    D3DRS_MULTISAMPLEANTIALIAS = 161
    D3DRS_MULTISAMPLEMASK = 162
    D3DRS_PATCHEDGESTYLE = 163
    D3DRS_DEBUGMONITORTOKEN = 165
    D3DRS_POINTSIZE_MAX = 166
    D3DRS_INDEXEDVERTEXBLENDENABLE = 167
    D3DRS_COLORWRITEENABLE = 168
    D3DRS_TWEENFACTOR = 170
    D3DRS_BLENDOP = 171
    D3DRS_POSITIONDEGREE = 172
    D3DRS_NORMALDEGREE = 173
    D3DRS_SCISSORTESTENABLE = 174
    D3DRS_SLOPESCALEDEPTHBIAS = 175
    D3DRS_ANTIALIASEDLINEENABLE = 176
    D3DRS_MINTESSELLATIONLEVEL = 178
    D3DRS_MAXTESSELLATIONLEVEL = 179
    D3DRS_ADAPTIVETESS_X = 180
    D3DRS_ADAPTIVETESS_Y = 181
    D3DRS_ADAPTIVETESS_Z = 182
    D3DRS_ADAPTIVETESS_W = 183
    D3DRS_ENABLEADAPTIVETESSELLATION = 184
    D3DRS_TWOSIDEDSTENCILMODE = 185
    D3DRS_CCW_STENCILFAIL = 186
    D3DRS_CCW_STENCILZFAIL = 187
    D3DRS_CCW_STENCILPASS = 188
    D3DRS_CCW_STENCILFUNC = 189
    D3DRS_COLORWRITEENABLE1 = 190
    D3DRS_COLORWRITEENABLE2 = 191
    D3DRS_COLORWRITEENABLE3 = 192
    D3DRS_BLENDFACTOR = 193
    D3DRS_SRGBWRITEENABLE = 194
    D3DRS_DEPTHBIAS = 195
    D3DRS_WRAP8 = 198
    D3DRS_WRAP9 = 199
    D3DRS_WRAP10 = 200
    D3DRS_WRAP11 = 201
    D3DRS_WRAP12 = 202
    D3DRS_WRAP13 = 203
    D3DRS_WRAP14 = 204
    D3DRS_WRAP15 = 205
    D3DRS_SEPARATEALPHABLENDENABLE = 206
    D3DRS_SRCBLENDALPHA = 207
    D3DRS_DESTBLENDALPHA = 208
    D3DRS_BLENDOPALPHA = 209
    D3DRS_FORCE_DWORD = 2147483647
  end

  enum D3DMATERIALCOLORSOURCE : Int32
    D3DMCS_MATERIAL = 0
    D3DMCS_COLOR1 = 1
    D3DMCS_COLOR2 = 2
    D3DMCS_FORCE_DWORD = 2147483647
  end

  enum D3DTEXTURESTAGESTATETYPE : Int32
    D3DTSS_COLOROP = 1
    D3DTSS_COLORARG1 = 2
    D3DTSS_COLORARG2 = 3
    D3DTSS_ALPHAOP = 4
    D3DTSS_ALPHAARG1 = 5
    D3DTSS_ALPHAARG2 = 6
    D3DTSS_BUMPENVMAT00 = 7
    D3DTSS_BUMPENVMAT01 = 8
    D3DTSS_BUMPENVMAT10 = 9
    D3DTSS_BUMPENVMAT11 = 10
    D3DTSS_TEXCOORDINDEX = 11
    D3DTSS_BUMPENVLSCALE = 22
    D3DTSS_BUMPENVLOFFSET = 23
    D3DTSS_TEXTURETRANSFORMFLAGS = 24
    D3DTSS_COLORARG0 = 26
    D3DTSS_ALPHAARG0 = 27
    D3DTSS_RESULTARG = 28
    D3DTSS_CONSTANT = 32
    D3DTSS_FORCE_DWORD = 2147483647
  end

  enum D3DSAMPLERSTATETYPE : Int32
    D3DSAMP_ADDRESSU = 1
    D3DSAMP_ADDRESSV = 2
    D3DSAMP_ADDRESSW = 3
    D3DSAMP_BORDERCOLOR = 4
    D3DSAMP_MAGFILTER = 5
    D3DSAMP_MINFILTER = 6
    D3DSAMP_MIPFILTER = 7
    D3DSAMP_MIPMAPLODBIAS = 8
    D3DSAMP_MAXMIPLEVEL = 9
    D3DSAMP_MAXANISOTROPY = 10
    D3DSAMP_SRGBTEXTURE = 11
    D3DSAMP_ELEMENTINDEX = 12
    D3DSAMP_DMAPOFFSET = 13
    D3DSAMP_FORCE_DWORD = 2147483647
  end

  enum D3DTEXTUREOP : Int32
    D3DTOP_DISABLE = 1
    D3DTOP_SELECTARG1 = 2
    D3DTOP_SELECTARG2 = 3
    D3DTOP_MODULATE = 4
    D3DTOP_MODULATE2X = 5
    D3DTOP_MODULATE4X = 6
    D3DTOP_ADD = 7
    D3DTOP_ADDSIGNED = 8
    D3DTOP_ADDSIGNED2X = 9
    D3DTOP_SUBTRACT = 10
    D3DTOP_ADDSMOOTH = 11
    D3DTOP_BLENDDIFFUSEALPHA = 12
    D3DTOP_BLENDTEXTUREALPHA = 13
    D3DTOP_BLENDFACTORALPHA = 14
    D3DTOP_BLENDTEXTUREALPHAPM = 15
    D3DTOP_BLENDCURRENTALPHA = 16
    D3DTOP_PREMODULATE = 17
    D3DTOP_MODULATEALPHA_ADDCOLOR = 18
    D3DTOP_MODULATECOLOR_ADDALPHA = 19
    D3DTOP_MODULATEINVALPHA_ADDCOLOR = 20
    D3DTOP_MODULATEINVCOLOR_ADDALPHA = 21
    D3DTOP_BUMPENVMAP = 22
    D3DTOP_BUMPENVMAPLUMINANCE = 23
    D3DTOP_DOTPRODUCT3 = 24
    D3DTOP_MULTIPLYADD = 25
    D3DTOP_LERP = 26
    D3DTOP_FORCE_DWORD = 2147483647
  end

  enum D3DTEXTUREFILTERTYPE : Int32
    D3DTEXF_NONE = 0
    D3DTEXF_POINT = 1
    D3DTEXF_LINEAR = 2
    D3DTEXF_ANISOTROPIC = 3
    D3DTEXF_PYRAMIDALQUAD = 6
    D3DTEXF_GAUSSIANQUAD = 7
    D3DTEXF_CONVOLUTIONMONO = 8
    D3DTEXF_FORCE_DWORD = 2147483647
  end

  enum D3DDECLUSAGE : Int32
    D3DDECLUSAGE_POSITION = 0
    D3DDECLUSAGE_BLENDWEIGHT = 1
    D3DDECLUSAGE_BLENDINDICES = 2
    D3DDECLUSAGE_NORMAL = 3
    D3DDECLUSAGE_PSIZE = 4
    D3DDECLUSAGE_TEXCOORD = 5
    D3DDECLUSAGE_TANGENT = 6
    D3DDECLUSAGE_BINORMAL = 7
    D3DDECLUSAGE_TESSFACTOR = 8
    D3DDECLUSAGE_POSITIONT = 9
    D3DDECLUSAGE_COLOR = 10
    D3DDECLUSAGE_FOG = 11
    D3DDECLUSAGE_DEPTH = 12
    D3DDECLUSAGE_SAMPLE = 13
  end

  enum D3DDECLMETHOD : Int32
    D3DDECLMETHOD_DEFAULT = 0
    D3DDECLMETHOD_PARTIALU = 1
    D3DDECLMETHOD_PARTIALV = 2
    D3DDECLMETHOD_CROSSUV = 3
    D3DDECLMETHOD_UV = 4
    D3DDECLMETHOD_LOOKUP = 5
    D3DDECLMETHOD_LOOKUPPRESAMPLED = 6
  end

  enum D3DDECLTYPE : Int32
    D3DDECLTYPE_FLOAT1 = 0
    D3DDECLTYPE_FLOAT2 = 1
    D3DDECLTYPE_FLOAT3 = 2
    D3DDECLTYPE_FLOAT4 = 3
    D3DDECLTYPE_D3DCOLOR = 4
    D3DDECLTYPE_UBYTE4 = 5
    D3DDECLTYPE_SHORT2 = 6
    D3DDECLTYPE_SHORT4 = 7
    D3DDECLTYPE_UBYTE4N = 8
    D3DDECLTYPE_SHORT2N = 9
    D3DDECLTYPE_SHORT4N = 10
    D3DDECLTYPE_USHORT2N = 11
    D3DDECLTYPE_USHORT4N = 12
    D3DDECLTYPE_UDEC3 = 13
    D3DDECLTYPE_DEC3N = 14
    D3DDECLTYPE_FLOAT16_2 = 15
    D3DDECLTYPE_FLOAT16_4 = 16
    D3DDECLTYPE_UNUSED = 17
  end

  enum D3DSHADER_INSTRUCTION_OPCODE_TYPE : Int32
    D3DSIO_NOP = 0
    D3DSIO_MOV = 1
    D3DSIO_ADD = 2
    D3DSIO_SUB = 3
    D3DSIO_MAD = 4
    D3DSIO_MUL = 5
    D3DSIO_RCP = 6
    D3DSIO_RSQ = 7
    D3DSIO_DP3 = 8
    D3DSIO_DP4 = 9
    D3DSIO_MIN = 10
    D3DSIO_MAX = 11
    D3DSIO_SLT = 12
    D3DSIO_SGE = 13
    D3DSIO_EXP = 14
    D3DSIO_LOG = 15
    D3DSIO_LIT = 16
    D3DSIO_DST = 17
    D3DSIO_LRP = 18
    D3DSIO_FRC = 19
    D3DSIO_M4x4 = 20
    D3DSIO_M4x3 = 21
    D3DSIO_M3x4 = 22
    D3DSIO_M3x3 = 23
    D3DSIO_M3x2 = 24
    D3DSIO_CALL = 25
    D3DSIO_CALLNZ = 26
    D3DSIO_LOOP = 27
    D3DSIO_RET = 28
    D3DSIO_ENDLOOP = 29
    D3DSIO_LABEL = 30
    D3DSIO_DCL = 31
    D3DSIO_POW = 32
    D3DSIO_CRS = 33
    D3DSIO_SGN = 34
    D3DSIO_ABS = 35
    D3DSIO_NRM = 36
    D3DSIO_SINCOS = 37
    D3DSIO_REP = 38
    D3DSIO_ENDREP = 39
    D3DSIO_IF = 40
    D3DSIO_IFC = 41
    D3DSIO_ELSE = 42
    D3DSIO_ENDIF = 43
    D3DSIO_BREAK = 44
    D3DSIO_BREAKC = 45
    D3DSIO_MOVA = 46
    D3DSIO_DEFB = 47
    D3DSIO_DEFI = 48
    D3DSIO_TEXCOORD = 64
    D3DSIO_TEXKILL = 65
    D3DSIO_TEX = 66
    D3DSIO_TEXBEM = 67
    D3DSIO_TEXBEML = 68
    D3DSIO_TEXREG2AR = 69
    D3DSIO_TEXREG2GB = 70
    D3DSIO_TEXM3x2PAD = 71
    D3DSIO_TEXM3x2TEX = 72
    D3DSIO_TEXM3x3PAD = 73
    D3DSIO_TEXM3x3TEX = 74
    D3DSIO_RESERVED0 = 75
    D3DSIO_TEXM3x3SPEC = 76
    D3DSIO_TEXM3x3VSPEC = 77
    D3DSIO_EXPP = 78
    D3DSIO_LOGP = 79
    D3DSIO_CND = 80
    D3DSIO_DEF = 81
    D3DSIO_TEXREG2RGB = 82
    D3DSIO_TEXDP3TEX = 83
    D3DSIO_TEXM3x2DEPTH = 84
    D3DSIO_TEXDP3 = 85
    D3DSIO_TEXM3x3 = 86
    D3DSIO_TEXDEPTH = 87
    D3DSIO_CMP = 88
    D3DSIO_BEM = 89
    D3DSIO_DP2ADD = 90
    D3DSIO_DSX = 91
    D3DSIO_DSY = 92
    D3DSIO_TEXLDD = 93
    D3DSIO_SETP = 94
    D3DSIO_TEXLDL = 95
    D3DSIO_BREAKP = 96
    D3DSIO_PHASE = 65533
    D3DSIO_COMMENT = 65534
    D3DSIO_END = 65535
    D3DSIO_FORCE_DWORD = 2147483647
  end

  enum D3DSHADER_COMPARISON : Int32
    D3DSPC_RESERVED0 = 0
    D3DSPC_GT = 1
    D3DSPC_EQ = 2
    D3DSPC_GE = 3
    D3DSPC_LT = 4
    D3DSPC_NE = 5
    D3DSPC_LE = 6
    D3DSPC_RESERVED1 = 7
  end

  enum D3DSAMPLER_TEXTURE_TYPE : Int32
    D3DSTT_UNKNOWN = 0
    D3DSTT_2D = 268435456
    D3DSTT_CUBE = 402653184
    D3DSTT_VOLUME = 536870912
    D3DSTT_FORCE_DWORD = 2147483647
  end

  enum D3DSHADER_PARAM_REGISTER_TYPE : Int32
    D3DSPR_TEMP = 0
    D3DSPR_INPUT = 1
    D3DSPR_CONST = 2
    D3DSPR_ADDR = 3
    D3DSPR_TEXTURE = 3
    D3DSPR_RASTOUT = 4
    D3DSPR_ATTROUT = 5
    D3DSPR_TEXCRDOUT = 6
    D3DSPR_OUTPUT = 6
    D3DSPR_CONSTINT = 7
    D3DSPR_COLOROUT = 8
    D3DSPR_DEPTHOUT = 9
    D3DSPR_SAMPLER = 10
    D3DSPR_CONST2 = 11
    D3DSPR_CONST3 = 12
    D3DSPR_CONST4 = 13
    D3DSPR_CONSTBOOL = 14
    D3DSPR_LOOP = 15
    D3DSPR_TEMPFLOAT16 = 16
    D3DSPR_MISCTYPE = 17
    D3DSPR_LABEL = 18
    D3DSPR_PREDICATE = 19
    D3DSPR_FORCE_DWORD = 2147483647
  end

  enum D3DSHADER_MISCTYPE_OFFSETS : Int32
    D3DSMO_POSITION = 0
    D3DSMO_FACE = 1
  end

  enum D3DVS_RASTOUT_OFFSETS : Int32
    D3DSRO_POSITION = 0
    D3DSRO_FOG = 1
    D3DSRO_POINT_SIZE = 2
    D3DSRO_FORCE_DWORD = 2147483647
  end

  enum D3DVS_ADDRESSMODE_TYPE : Int32
    D3DVS_ADDRMODE_ABSOLUTE = 0
    D3DVS_ADDRMODE_RELATIVE = 8192
    D3DVS_ADDRMODE_FORCE_DWORD = 2147483647
  end

  enum D3DSHADER_ADDRESSMODE_TYPE : Int32
    D3DSHADER_ADDRMODE_ABSOLUTE = 0
    D3DSHADER_ADDRMODE_RELATIVE = 8192
    D3DSHADER_ADDRMODE_FORCE_DWORD = 2147483647
  end

  enum D3DSHADER_PARAM_SRCMOD_TYPE : Int32
    D3DSPSM_NONE = 0
    D3DSPSM_NEG = 16777216
    D3DSPSM_BIAS = 33554432
    D3DSPSM_BIASNEG = 50331648
    D3DSPSM_SIGN = 67108864
    D3DSPSM_SIGNNEG = 83886080
    D3DSPSM_COMP = 100663296
    D3DSPSM_X2 = 117440512
    D3DSPSM_X2NEG = 134217728
    D3DSPSM_DZ = 150994944
    D3DSPSM_DW = 167772160
    D3DSPSM_ABS = 184549376
    D3DSPSM_ABSNEG = 201326592
    D3DSPSM_NOT = 218103808
    D3DSPSM_FORCE_DWORD = 2147483647
  end

  enum D3DSHADER_MIN_PRECISION : Int32
    D3DMP_DEFAULT = 0
    D3DMP_16 = 1
    D3DMP_2_8 = 2
  end

  enum D3DBASISTYPE : Int32
    D3DBASIS_BEZIER = 0
    D3DBASIS_BSPLINE = 1
    D3DBASIS_CATMULL_ROM = 2
    D3DBASIS_FORCE_DWORD = 2147483647
  end

  enum D3DDEGREETYPE : Int32
    D3DDEGREE_LINEAR = 1
    D3DDEGREE_QUADRATIC = 2
    D3DDEGREE_CUBIC = 3
    D3DDEGREE_QUINTIC = 5
    D3DDEGREE_FORCE_DWORD = 2147483647
  end

  enum D3DPATCHEDGESTYLE : Int32
    D3DPATCHEDGE_DISCRETE = 0
    D3DPATCHEDGE_CONTINUOUS = 1
    D3DPATCHEDGE_FORCE_DWORD = 2147483647
  end

  enum D3DSTATEBLOCKTYPE : Int32
    D3DSBT_ALL = 1
    D3DSBT_PIXELSTATE = 2
    D3DSBT_VERTEXSTATE = 3
    D3DSBT_FORCE_DWORD = 2147483647
  end

  enum D3DVERTEXBLENDFLAGS : Int32
    D3DVBF_DISABLE = 0
    D3DVBF_1WEIGHTS = 1
    D3DVBF_2WEIGHTS = 2
    D3DVBF_3WEIGHTS = 3
    D3DVBF_TWEENING = 255
    D3DVBF_0WEIGHTS = 256
    D3DVBF_FORCE_DWORD = 2147483647
  end

  enum D3DTEXTURETRANSFORMFLAGS : Int32
    D3DTTFF_DISABLE = 0
    D3DTTFF_COUNT1 = 1
    D3DTTFF_COUNT2 = 2
    D3DTTFF_COUNT3 = 3
    D3DTTFF_COUNT4 = 4
    D3DTTFF_PROJECTED = 256
    D3DTTFF_FORCE_DWORD = 2147483647
  end

  enum D3DDEVTYPE : UInt32
    D3DDEVTYPE_HAL = 1
    D3DDEVTYPE_REF = 2
    D3DDEVTYPE_SW = 3
    D3DDEVTYPE_NULLREF = 4
    D3DDEVTYPE_FORCE_DWORD = 2147483647
  end

  enum D3DMULTISAMPLE_TYPE : Int32
    D3DMULTISAMPLE_NONE = 0
    D3DMULTISAMPLE_NONMASKABLE = 1
    D3DMULTISAMPLE_2_SAMPLES = 2
    D3DMULTISAMPLE_3_SAMPLES = 3
    D3DMULTISAMPLE_4_SAMPLES = 4
    D3DMULTISAMPLE_5_SAMPLES = 5
    D3DMULTISAMPLE_6_SAMPLES = 6
    D3DMULTISAMPLE_7_SAMPLES = 7
    D3DMULTISAMPLE_8_SAMPLES = 8
    D3DMULTISAMPLE_9_SAMPLES = 9
    D3DMULTISAMPLE_10_SAMPLES = 10
    D3DMULTISAMPLE_11_SAMPLES = 11
    D3DMULTISAMPLE_12_SAMPLES = 12
    D3DMULTISAMPLE_13_SAMPLES = 13
    D3DMULTISAMPLE_14_SAMPLES = 14
    D3DMULTISAMPLE_15_SAMPLES = 15
    D3DMULTISAMPLE_16_SAMPLES = 16
    D3DMULTISAMPLE_FORCE_DWORD = 2147483647
  end

  enum D3DFORMAT : UInt32
    D3DFMT_UNKNOWN = 0
    D3DFMT_R8G8B8 = 20
    D3DFMT_A8R8G8B8 = 21
    D3DFMT_X8R8G8B8 = 22
    D3DFMT_R5G6B5 = 23
    D3DFMT_X1R5G5B5 = 24
    D3DFMT_A1R5G5B5 = 25
    D3DFMT_A4R4G4B4 = 26
    D3DFMT_R3G3B2 = 27
    D3DFMT_A8 = 28
    D3DFMT_A8R3G3B2 = 29
    D3DFMT_X4R4G4B4 = 30
    D3DFMT_A2B10G10R10 = 31
    D3DFMT_A8B8G8R8 = 32
    D3DFMT_X8B8G8R8 = 33
    D3DFMT_G16R16 = 34
    D3DFMT_A2R10G10B10 = 35
    D3DFMT_A16B16G16R16 = 36
    D3DFMT_A8P8 = 40
    D3DFMT_P8 = 41
    D3DFMT_L8 = 50
    D3DFMT_A8L8 = 51
    D3DFMT_A4L4 = 52
    D3DFMT_V8U8 = 60
    D3DFMT_L6V5U5 = 61
    D3DFMT_X8L8V8U8 = 62
    D3DFMT_Q8W8V8U8 = 63
    D3DFMT_V16U16 = 64
    D3DFMT_A2W10V10U10 = 67
    D3DFMT_UYVY = 1498831189
    D3DFMT_R8G8_B8G8 = 1195525970
    D3DFMT_YUY2 = 844715353
    D3DFMT_G8R8_G8B8 = 1111970375
    D3DFMT_DXT1 = 827611204
    D3DFMT_DXT2 = 844388420
    D3DFMT_DXT3 = 861165636
    D3DFMT_DXT4 = 877942852
    D3DFMT_DXT5 = 894720068
    D3DFMT_D16_LOCKABLE = 70
    D3DFMT_D32 = 71
    D3DFMT_D15S1 = 73
    D3DFMT_D24S8 = 75
    D3DFMT_D24X8 = 77
    D3DFMT_D24X4S4 = 79
    D3DFMT_D16 = 80
    D3DFMT_D32F_LOCKABLE = 82
    D3DFMT_D24FS8 = 83
    D3DFMT_D32_LOCKABLE = 84
    D3DFMT_S8_LOCKABLE = 85
    D3DFMT_L16 = 81
    D3DFMT_VERTEXDATA = 100
    D3DFMT_INDEX16 = 101
    D3DFMT_INDEX32 = 102
    D3DFMT_Q16W16V16U16 = 110
    D3DFMT_MULTI2_ARGB8 = 827606349
    D3DFMT_R16F = 111
    D3DFMT_G16R16F = 112
    D3DFMT_A16B16G16R16F = 113
    D3DFMT_R32F = 114
    D3DFMT_G32R32F = 115
    D3DFMT_A32B32G32R32F = 116
    D3DFMT_CxV8U8 = 117
    D3DFMT_A1 = 118
    D3DFMT_A2B10G10R10_XR_BIAS = 119
    D3DFMT_BINARYBUFFER = 199
    D3DFMT_FORCE_DWORD = 2147483647
  end

  enum D3DSWAPEFFECT : UInt32
    D3DSWAPEFFECT_DISCARD = 1
    D3DSWAPEFFECT_FLIP = 2
    D3DSWAPEFFECT_COPY = 3
    D3DSWAPEFFECT_OVERLAY = 4
    D3DSWAPEFFECT_FLIPEX = 5
    D3DSWAPEFFECT_FORCE_DWORD = 2147483647
  end

  enum D3DPOOL : UInt32
    D3DPOOL_DEFAULT = 0
    D3DPOOL_MANAGED = 1
    D3DPOOL_SYSTEMMEM = 2
    D3DPOOL_SCRATCH = 3
    D3DPOOL_FORCE_DWORD = 2147483647
  end

  enum D3DBACKBUFFER_TYPE : UInt32
    D3DBACKBUFFER_TYPE_MONO = 0
    D3DBACKBUFFER_TYPE_LEFT = 1
    D3DBACKBUFFER_TYPE_RIGHT = 2
    D3DBACKBUFFER_TYPE_FORCE_DWORD = 2147483647
  end

  enum D3DRESOURCETYPE : Int32
    D3DRTYPE_SURFACE = 1
    D3DRTYPE_VOLUME = 2
    D3DRTYPE_TEXTURE = 3
    D3DRTYPE_VOLUMETEXTURE = 4
    D3DRTYPE_CUBETEXTURE = 5
    D3DRTYPE_VERTEXBUFFER = 6
    D3DRTYPE_INDEXBUFFER = 7
    D3DRTYPE_FORCE_DWORD = 2147483647
  end

  enum D3DCUBEMAP_FACES : Int32
    D3DCUBEMAP_FACE_POSITIVE_X = 0
    D3DCUBEMAP_FACE_NEGATIVE_X = 1
    D3DCUBEMAP_FACE_POSITIVE_Y = 2
    D3DCUBEMAP_FACE_NEGATIVE_Y = 3
    D3DCUBEMAP_FACE_POSITIVE_Z = 4
    D3DCUBEMAP_FACE_NEGATIVE_Z = 5
    D3DCUBEMAP_FACE_FORCE_DWORD = 2147483647
  end

  enum D3DDEBUGMONITORTOKENS : Int32
    D3DDMT_ENABLE = 0
    D3DDMT_DISABLE = 1
    D3DDMT_FORCE_DWORD = 2147483647
  end

  enum D3DQUERYTYPE : Int32
    D3DQUERYTYPE_VCACHE = 4
    D3DQUERYTYPE_RESOURCEMANAGER = 5
    D3DQUERYTYPE_VERTEXSTATS = 6
    D3DQUERYTYPE_EVENT = 8
    D3DQUERYTYPE_OCCLUSION = 9
    D3DQUERYTYPE_TIMESTAMP = 10
    D3DQUERYTYPE_TIMESTAMPDISJOINT = 11
    D3DQUERYTYPE_TIMESTAMPFREQ = 12
    D3DQUERYTYPE_PIPELINETIMINGS = 13
    D3DQUERYTYPE_INTERFACETIMINGS = 14
    D3DQUERYTYPE_VERTEXTIMINGS = 15
    D3DQUERYTYPE_PIXELTIMINGS = 16
    D3DQUERYTYPE_BANDWIDTHTIMINGS = 17
    D3DQUERYTYPE_CACHEUTILIZATION = 18
    D3DQUERYTYPE_MEMORYPRESSURE = 19
  end

  enum D3DCOMPOSERECTSOP : Int32
    D3DCOMPOSERECTS_COPY = 1
    D3DCOMPOSERECTS_OR = 2
    D3DCOMPOSERECTS_AND = 3
    D3DCOMPOSERECTS_NEG = 4
    D3DCOMPOSERECTS_FORCE_DWORD = 2147483647
  end

  enum D3DSCANLINEORDERING : Int32
    D3DSCANLINEORDERING_UNKNOWN = 0
    D3DSCANLINEORDERING_PROGRESSIVE = 1
    D3DSCANLINEORDERING_INTERLACED = 2
  end

  enum D3DDISPLAYROTATION : Int32
    D3DDISPLAYROTATION_IDENTITY = 1
    D3DDISPLAYROTATION_90 = 2
    D3DDISPLAYROTATION_180 = 3
    D3DDISPLAYROTATION_270 = 4
  end

  enum D3DAUTHENTICATEDCHANNELTYPE : Int32
    D3DAUTHENTICATEDCHANNEL_D3D9 = 1
    D3DAUTHENTICATEDCHANNEL_DRIVER_SOFTWARE = 2
    D3DAUTHENTICATEDCHANNEL_DRIVER_HARDWARE = 3
  end

  enum D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE : Int32
    PROCESSIDTYPE_UNKNOWN = 0
    PROCESSIDTYPE_DWM = 1
    PROCESSIDTYPE_HANDLE = 2
  end

  enum D3DBUSTYPE : Int32
    D3DBUSTYPE_OTHER = 0
    D3DBUSTYPE_PCI = 1
    D3DBUSTYPE_PCIX = 2
    D3DBUSTYPE_PCIEXPRESS = 3
    D3DBUSTYPE_AGP = 4
    D3DBUSIMPL_MODIFIER_INSIDE_OF_CHIPSET = 65536
    D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = 131072
    D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = 196608
    D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR = 262144
    D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 327680
    D3DBUSIMPL_MODIFIER_NON_STANDARD = -2147483648
  end

  union D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS_Anonymous_e__Union
    anonymous : D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS_Anonymous_e__Union_Anonymous_e__Struct
    value : UInt32
  end

  struct D3DCOLORVALUE
    r : Float32
    g : Float32
    b : Float32
    a : Float32
  end
  struct D3DRECT
    x1 : Int32
    y1 : Int32
    x2 : Int32
    y2 : Int32
  end
  struct D3DVIEWPORT9
    x : UInt32
    y : UInt32
    width : UInt32
    height : UInt32
    min_z : Float32
    max_z : Float32
  end
  struct D3DCLIPSTATUS9
    clip_union : UInt32
    clip_intersection : UInt32
  end
  struct D3DMATERIAL9
    diffuse : D3DCOLORVALUE
    ambient : D3DCOLORVALUE
    specular : D3DCOLORVALUE
    emissive : D3DCOLORVALUE
    power : Float32
  end
  struct D3DLIGHT9
    type : D3DLIGHTTYPE
    diffuse : D3DCOLORVALUE
    specular : D3DCOLORVALUE
    ambient : D3DCOLORVALUE
    position : D3DVECTOR
    direction : D3DVECTOR
    range : Float32
    falloff : Float32
    attenuation0 : Float32
    attenuation1 : Float32
    attenuation2 : Float32
    theta : Float32
    phi : Float32
  end
  struct D3DVERTEXELEMENT9
    stream : UInt16
    offset : UInt16
    type : UInt8
    method : UInt8
    usage : UInt8
    usage_index : UInt8
  end
  struct D3DDISPLAYMODE
    width : UInt32
    height : UInt32
    refresh_rate : UInt32
    format : D3DFORMAT
  end
  struct D3DDEVICE_CREATION_PARAMETERS
    adapter_ordinal : UInt32
    device_type : D3DDEVTYPE
    h_focus_window : HANDLE
    behavior_flags : UInt32
  end
  struct D3DPRESENT_PARAMETERS
    back_buffer_width : UInt32
    back_buffer_height : UInt32
    back_buffer_format : D3DFORMAT
    back_buffer_count : UInt32
    multi_sample_type : D3DMULTISAMPLE_TYPE
    multi_sample_quality : UInt32
    swap_effect : D3DSWAPEFFECT
    h_device_window : HANDLE
    windowed : LibC::BOOL
    enable_auto_depth_stencil : LibC::BOOL
    auto_depth_stencil_format : D3DFORMAT
    flags : UInt32
    full_screen_refresh_rate_in_hz : UInt32
    presentation_interval : UInt32
  end
  struct D3DGAMMARAMP
    red : UInt16[256]*
    green : UInt16[256]*
    blue : UInt16[256]*
  end
  struct D3DVERTEXBUFFER_DESC
    format : D3DFORMAT
    type : D3DRESOURCETYPE
    usage : UInt32
    pool : D3DPOOL
    size : UInt32
    fvf : UInt32
  end
  struct D3DINDEXBUFFER_DESC
    format : D3DFORMAT
    type : D3DRESOURCETYPE
    usage : UInt32
    pool : D3DPOOL
    size : UInt32
  end
  struct D3DSURFACE_DESC
    format : D3DFORMAT
    type : D3DRESOURCETYPE
    usage : UInt32
    pool : D3DPOOL
    multi_sample_type : D3DMULTISAMPLE_TYPE
    multi_sample_quality : UInt32
    width : UInt32
    height : UInt32
  end
  struct D3DVOLUME_DESC
    format : D3DFORMAT
    type : D3DRESOURCETYPE
    usage : UInt32
    pool : D3DPOOL
    width : UInt32
    height : UInt32
    depth : UInt32
  end
  struct D3DLOCKED_RECT
    pitch : Int32
    p_bits : Void*
  end
  struct D3DBOX
    left : UInt32
    top : UInt32
    right : UInt32
    bottom : UInt32
    front : UInt32
    back : UInt32
  end
  struct D3DLOCKED_BOX
    row_pitch : Int32
    slice_pitch : Int32
    p_bits : Void*
  end
  struct D3DRANGE
    offset : UInt32
    size : UInt32
  end
  struct D3DRECTPATCH_INFO
    start_vertex_offset_width : UInt32
    start_vertex_offset_height : UInt32
    width : UInt32
    height : UInt32
    stride : UInt32
    basis : D3DBASISTYPE
    degree : D3DDEGREETYPE
  end
  struct D3DTRIPATCH_INFO
    start_vertex_offset : UInt32
    num_vertices : UInt32
    basis : D3DBASISTYPE
    degree : D3DDEGREETYPE
  end
  struct D3DADAPTER_IDENTIFIER9
    driver : CHAR[512]*
    description : CHAR[512]*
    device_name : CHAR[32]*
    driver_version : LARGE_INTEGER
    vendor_id : UInt32
    device_id : UInt32
    sub_sys_id : UInt32
    revision : UInt32
    device_identifier : Guid
    whql_level : UInt32
  end
  struct D3DRASTER_STATUS
    in_v_blank : LibC::BOOL
    scan_line : UInt32
  end
  struct D3DRESOURCESTATS
    b_thrashing : LibC::BOOL
    approx_bytes_downloaded : UInt32
    num_evicts : UInt32
    num_vid_creates : UInt32
    last_pri : UInt32
    num_used : UInt32
    num_used_in_vid_mem : UInt32
    working_set : UInt32
    working_set_bytes : UInt32
    total_managed : UInt32
    total_bytes : UInt32
  end
  struct D3DDEVINFO_RESOURCEMANAGER
    stats : D3DRESOURCESTATS[8]*
  end
  struct D3DDEVINFO_D3DVERTEXSTATS
    num_rendered_triangles : UInt32
    num_extra_clipping_triangles : UInt32
  end
  struct D3DDEVINFO_VCACHE
    pattern : UInt32
    opt_method : UInt32
    cache_size : UInt32
    magic_number : UInt32
  end
  struct D3DDEVINFO_D3D9PIPELINETIMINGS
    vertex_processing_time_percent : Float32
    pixel_processing_time_percent : Float32
    other_gpu_processing_time_percent : Float32
    gpu_idle_time_percent : Float32
  end
  struct D3DDEVINFO_D3D9INTERFACETIMINGS
    waiting_for_gpu_to_use_application_resource_time_percent : Float32
    waiting_for_gpu_to_accept_more_commands_time_percent : Float32
    waiting_for_gpu_to_stay_within_latency_time_percent : Float32
    waiting_for_gpu_exclusive_resource_time_percent : Float32
    waiting_for_gpu_other_time_percent : Float32
  end
  struct D3DDEVINFO_D3D9STAGETIMINGS
    memory_processing_percent : Float32
    computation_processing_percent : Float32
  end
  struct D3DDEVINFO_D3D9BANDWIDTHTIMINGS
    max_bandwidth_utilized : Float32
    front_end_upload_memory_utilized_percent : Float32
    vertex_rate_utilized_percent : Float32
    triangle_setup_rate_utilized_percent : Float32
    fill_rate_utilized_percent : Float32
  end
  struct D3DDEVINFO_D3D9CACHEUTILIZATION
    texture_cache_hit_rate : Float32
    post_transform_vertex_cache_hit_rate : Float32
  end
  struct D3DMEMORYPRESSURE
    bytes_evicted_from_process : UInt64
    size_of_inefficient_allocation : UInt64
    level_of_efficiency : UInt32
  end
  struct D3DCOMPOSERECTDESC
    x : UInt16
    y : UInt16
    width : UInt16
    height : UInt16
  end
  struct D3DCOMPOSERECTDESTINATION
    src_rect_index : UInt16
    reserved : UInt16
    x : Int16
    y : Int16
  end
  struct D3DPRESENTSTATS
    present_count : UInt32
    present_refresh_count : UInt32
    sync_refresh_count : UInt32
    sync_qpc_time : LARGE_INTEGER
    sync_gpu_time : LARGE_INTEGER
  end
  struct D3DDISPLAYMODEEX
    size : UInt32
    width : UInt32
    height : UInt32
    refresh_rate : UInt32
    format : D3DFORMAT
    scan_line_ordering : D3DSCANLINEORDERING
  end
  struct D3DDISPLAYMODEFILTER
    size : UInt32
    format : D3DFORMAT
    scan_line_ordering : D3DSCANLINEORDERING
  end
  struct D3D_OMAC
    omac : UInt8[16]*
  end
  struct D3DAUTHENTICATEDCHANNEL_QUERY_INPUT
    query_type : Guid
    h_channel : LibC::HANDLE
    sequence_number : UInt32
  end
  struct D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    omac : D3D_OMAC
    query_type : Guid
    h_channel : LibC::HANDLE
    sequence_number : UInt32
    return_code : HRESULT
  end
  struct D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS
    anonymous : D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS_Anonymous_e__Union
  end
  struct D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS_Anonymous_e__Union_Anonymous_e__Struct
    _bitfield : UInt32
  end
  struct D3DAUTHENTICATEDCHANNEL_QUERYPROTECTION_OUTPUT
    output : D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    protection_flags : D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS
  end
  struct D3DAUTHENTICATEDCHANNEL_QUERYCHANNELTYPE_OUTPUT
    output : D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    channel_type : D3DAUTHENTICATEDCHANNELTYPE
  end
  struct D3DAUTHENTICATEDCHANNEL_QUERYDEVICEHANDLE_OUTPUT
    output : D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    device_handle : LibC::HANDLE
  end
  struct D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_INPUT
    input : D3DAUTHENTICATEDCHANNEL_QUERY_INPUT
    dxva2_decode_handle : LibC::HANDLE
  end
  struct D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_OUTPUT
    output : D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    dxva2_decode_handle : LibC::HANDLE
    crypto_session_handle : LibC::HANDLE
    device_handle : LibC::HANDLE
  end
  struct D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESSCOUNT_OUTPUT
    output : D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    num_restricted_shared_resource_processes : UInt32
  end
  struct D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_INPUT
    input : D3DAUTHENTICATEDCHANNEL_QUERY_INPUT
    process_index : UInt32
  end
  struct D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_OUTPUT
    output : D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    process_index : UInt32
    process_identifer : D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE
    process_handle : LibC::HANDLE
  end
  struct D3DAUTHENTICATEDCHANNEL_QUERYUNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT_OUTPUT
    output : D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    num_unrestricted_protected_shared_resources : UInt32
  end
  struct D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_INPUT
    input : D3DAUTHENTICATEDCHANNEL_QUERY_INPUT
    device_handle : LibC::HANDLE
    crypto_session_handle : LibC::HANDLE
  end
  struct D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_OUTPUT
    output : D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    device_handle : LibC::HANDLE
    crypto_session_handle : LibC::HANDLE
    num_output_i_ds : UInt32
  end
  struct D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_INPUT
    input : D3DAUTHENTICATEDCHANNEL_QUERY_INPUT
    device_handle : LibC::HANDLE
    crypto_session_handle : LibC::HANDLE
    output_id_index : UInt32
  end
  struct D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_OUTPUT
    output : D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    device_handle : LibC::HANDLE
    crypto_session_handle : LibC::HANDLE
    output_id_index : UInt32
    output_id : UInt64
  end
  struct D3DAUTHENTICATEDCHANNEL_QUERYINFOBUSTYPE_OUTPUT
    output : D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    bus_type : D3DBUSTYPE
    b_accessible_in_contiguous_blocks : LibC::BOOL
    b_accessible_in_non_contiguous_blocks : LibC::BOOL
  end
  struct D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUIDCOUNT_OUTPUT
    output : D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    num_encryption_guids : UInt32
  end
  struct D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_INPUT
    input : D3DAUTHENTICATEDCHANNEL_QUERY_INPUT
    encryption_guid_index : UInt32
  end
  struct D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_OUTPUT
    output : D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    encryption_guid_index : UInt32
    encryption_guid : Guid
  end
  struct D3DAUTHENTICATEDCHANNEL_QUERYUNCOMPRESSEDENCRYPTIONLEVEL_OUTPUT
    output : D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    encryption_guid : Guid
  end
  struct D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT
    omac : D3D_OMAC
    configure_type : Guid
    h_channel : LibC::HANDLE
    sequence_number : UInt32
  end
  struct D3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT
    omac : D3D_OMAC
    configure_type : Guid
    h_channel : LibC::HANDLE
    sequence_number : UInt32
    return_code : HRESULT
  end
  struct D3DAUTHENTICATEDCHANNEL_CONFIGUREINITIALIZE
    parameters : D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT
    start_sequence_query : UInt32
    start_sequence_configure : UInt32
  end
  struct D3DAUTHENTICATEDCHANNEL_CONFIGUREPROTECTION
    parameters : D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT
    protections : D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS
  end
  struct D3DAUTHENTICATEDCHANNEL_CONFIGURECRYPTOSESSION
    parameters : D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT
    dxva2_decode_handle : LibC::HANDLE
    crypto_session_handle : LibC::HANDLE
    device_handle : LibC::HANDLE
  end
  struct D3DAUTHENTICATEDCHANNEL_CONFIGURESHAREDRESOURCE
    parameters : D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT
    process_identifer_type : D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE
    process_handle : LibC::HANDLE
    allow_access : LibC::BOOL
  end
  struct D3DAUTHENTICATEDCHANNEL_CONFIGUREUNCOMPRESSEDENCRYPTION
    parameters : D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT
    encryption_guid : Guid
  end
  struct D3DENCRYPTED_BLOCK_INFO
    num_encrypted_bytes_at_beginning : UInt32
    num_bytes_in_skip_pattern : UInt32
    num_bytes_in_encrypt_pattern : UInt32
  end
  struct D3DAES_CTR_IV
    iv : UInt64
    count : UInt64
  end
  struct D3DVSHADERCAPS2_0
    caps : UInt32
    dynamic_flow_control_depth : Int32
    num_temps : Int32
    static_flow_control_depth : Int32
  end
  struct D3DPSHADERCAPS2_0
    caps : UInt32
    dynamic_flow_control_depth : Int32
    num_temps : Int32
    static_flow_control_depth : Int32
    num_instruction_slots : Int32
  end
  struct D3DCAPS9
    device_type : D3DDEVTYPE
    adapter_ordinal : UInt32
    caps : UInt32
    caps2 : UInt32
    caps3 : UInt32
    presentation_intervals : UInt32
    cursor_caps : UInt32
    dev_caps : UInt32
    primitive_misc_caps : UInt32
    raster_caps : UInt32
    z_cmp_caps : UInt32
    src_blend_caps : UInt32
    dest_blend_caps : UInt32
    alpha_cmp_caps : UInt32
    shade_caps : UInt32
    texture_caps : UInt32
    texture_filter_caps : UInt32
    cube_texture_filter_caps : UInt32
    volume_texture_filter_caps : UInt32
    texture_address_caps : UInt32
    volume_texture_address_caps : UInt32
    line_caps : UInt32
    max_texture_width : UInt32
    max_texture_height : UInt32
    max_volume_extent : UInt32
    max_texture_repeat : UInt32
    max_texture_aspect_ratio : UInt32
    max_anisotropy : UInt32
    max_vertex_w : Float32
    guard_band_left : Float32
    guard_band_top : Float32
    guard_band_right : Float32
    guard_band_bottom : Float32
    extents_adjust : Float32
    stencil_caps : UInt32
    fvf_caps : UInt32
    texture_op_caps : UInt32
    max_texture_blend_stages : UInt32
    max_simultaneous_textures : UInt32
    vertex_processing_caps : UInt32
    max_active_lights : UInt32
    max_user_clip_planes : UInt32
    max_vertex_blend_matrices : UInt32
    max_vertex_blend_matrix_index : UInt32
    max_point_size : Float32
    max_primitive_count : UInt32
    max_vertex_index : UInt32
    max_streams : UInt32
    max_stream_stride : UInt32
    vertex_shader_version : UInt32
    max_vertex_shader_const : UInt32
    pixel_shader_version : UInt32
    pixel_shader1x_max_value : Float32
    dev_caps2 : UInt32
    max_npatch_tessellation_level : Float32
    reserved5 : UInt32
    master_adapter_ordinal : UInt32
    adapter_ordinal_in_group : UInt32
    number_of_adapters_in_group : UInt32
    decl_types : UInt32
    num_simultaneous_r_ts : UInt32
    stretch_rect_filter_caps : UInt32
    vs20_caps : D3DVSHADERCAPS2_0
    ps20_caps : D3DPSHADERCAPS2_0
    vertex_texture_filter_caps : UInt32
    max_v_shader_instructions_executed : UInt32
    max_p_shader_instructions_executed : UInt32
    max_vertex_shader30_instruction_slots : UInt32
    max_pixel_shader30_instruction_slots : UInt32
  end


  struct IDirect3D9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    register_software_device : UInt64
    get_adapter_count : UInt64
    get_adapter_identifier : UInt64
    get_adapter_mode_count : UInt64
    enum_adapter_modes : UInt64
    get_adapter_display_mode : UInt64
    check_device_type : UInt64
    check_device_format : UInt64
    check_device_multi_sample_type : UInt64
    check_depth_stencil_match : UInt64
    check_device_format_conversion : UInt64
    get_device_caps : UInt64
    get_adapter_monitor : UInt64
    create_device : UInt64
  end

  IDirect3D9_GUID = "81bdcbca-64d4-426d-ae8d-ad0147f4275c"
  IID_IDirect3D9 = LibC::GUID.new(0x81bdcbca_u32, 0x64d4_u16, 0x426d_u16, StaticArray[0xae_u8, 0x8d_u8, 0xad_u8, 0x1_u8, 0x47_u8, 0xf4_u8, 0x27_u8, 0x5c_u8])
  struct IDirect3D9
    lpVtbl : IDirect3D9VTbl*
  end

  struct IDirect3DDevice9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    test_cooperative_level : UInt64
    get_available_texture_mem : UInt64
    evict_managed_resources : UInt64
    get_direct3_d : UInt64
    get_device_caps : UInt64
    get_display_mode : UInt64
    get_creation_parameters : UInt64
    set_cursor_properties : UInt64
    set_cursor_position : UInt64
    show_cursor : UInt64
    create_additional_swap_chain : UInt64
    get_swap_chain : UInt64
    get_number_of_swap_chains : UInt64
    reset : UInt64
    present : UInt64
    get_back_buffer : UInt64
    get_raster_status : UInt64
    set_dialog_box_mode : UInt64
    set_gamma_ramp : UInt64
    get_gamma_ramp : UInt64
    create_texture : UInt64
    create_volume_texture : UInt64
    create_cube_texture : UInt64
    create_vertex_buffer : UInt64
    create_index_buffer : UInt64
    create_render_target : UInt64
    create_depth_stencil_surface : UInt64
    update_surface : UInt64
    update_texture : UInt64
    get_render_target_data : UInt64
    get_front_buffer_data : UInt64
    stretch_rect : UInt64
    color_fill : UInt64
    create_offscreen_plain_surface : UInt64
    set_render_target : UInt64
    get_render_target : UInt64
    set_depth_stencil_surface : UInt64
    get_depth_stencil_surface : UInt64
    begin_scene : UInt64
    end_scene : UInt64
    clear : UInt64
    set_transform : UInt64
    get_transform : UInt64
    multiply_transform : UInt64
    set_viewport : UInt64
    get_viewport : UInt64
    set_material : UInt64
    get_material : UInt64
    set_light : UInt64
    get_light : UInt64
    light_enable : UInt64
    get_light_enable : UInt64
    set_clip_plane : UInt64
    get_clip_plane : UInt64
    set_render_state : UInt64
    get_render_state : UInt64
    create_state_block : UInt64
    begin_state_block : UInt64
    end_state_block : UInt64
    set_clip_status : UInt64
    get_clip_status : UInt64
    get_texture : UInt64
    set_texture : UInt64
    get_texture_stage_state : UInt64
    set_texture_stage_state : UInt64
    get_sampler_state : UInt64
    set_sampler_state : UInt64
    validate_device : UInt64
    set_palette_entries : UInt64
    get_palette_entries : UInt64
    set_current_texture_palette : UInt64
    get_current_texture_palette : UInt64
    set_scissor_rect : UInt64
    get_scissor_rect : UInt64
    set_software_vertex_processing : UInt64
    get_software_vertex_processing : UInt64
    set_n_patch_mode : UInt64
    get_n_patch_mode : UInt64
    draw_primitive : UInt64
    draw_indexed_primitive : UInt64
    draw_primitive_up : UInt64
    draw_indexed_primitive_up : UInt64
    process_vertices : UInt64
    create_vertex_declaration : UInt64
    set_vertex_declaration : UInt64
    get_vertex_declaration : UInt64
    set_fvf : UInt64
    get_fvf : UInt64
    create_vertex_shader : UInt64
    set_vertex_shader : UInt64
    get_vertex_shader : UInt64
    set_vertex_shader_constant_f : UInt64
    get_vertex_shader_constant_f : UInt64
    set_vertex_shader_constant_i : UInt64
    get_vertex_shader_constant_i : UInt64
    set_vertex_shader_constant_b : UInt64
    get_vertex_shader_constant_b : UInt64
    set_stream_source : UInt64
    get_stream_source : UInt64
    set_stream_source_freq : UInt64
    get_stream_source_freq : UInt64
    set_indices : UInt64
    get_indices : UInt64
    create_pixel_shader : UInt64
    set_pixel_shader : UInt64
    get_pixel_shader : UInt64
    set_pixel_shader_constant_f : UInt64
    get_pixel_shader_constant_f : UInt64
    set_pixel_shader_constant_i : UInt64
    get_pixel_shader_constant_i : UInt64
    set_pixel_shader_constant_b : UInt64
    get_pixel_shader_constant_b : UInt64
    draw_rect_patch : UInt64
    draw_tri_patch : UInt64
    delete_patch : UInt64
    create_query : UInt64
  end

  IDirect3DDevice9_GUID = "d0223b96-bf7a-43fd-92bd-a43b0d82b9eb"
  IID_IDirect3DDevice9 = LibC::GUID.new(0xd0223b96_u32, 0xbf7a_u16, 0x43fd_u16, StaticArray[0x92_u8, 0xbd_u8, 0xa4_u8, 0x3b_u8, 0xd_u8, 0x82_u8, 0xb9_u8, 0xeb_u8])
  struct IDirect3DDevice9
    lpVtbl : IDirect3DDevice9VTbl*
  end

  struct IDirect3DStateBlock9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    capture : UInt64
    apply : UInt64
  end

  IDirect3DStateBlock9_GUID = "b07c4fe5-310d-4ba8-a23c-4f0f206f218b"
  IID_IDirect3DStateBlock9 = LibC::GUID.new(0xb07c4fe5_u32, 0x310d_u16, 0x4ba8_u16, StaticArray[0xa2_u8, 0x3c_u8, 0x4f_u8, 0xf_u8, 0x20_u8, 0x6f_u8, 0x21_u8, 0x8b_u8])
  struct IDirect3DStateBlock9
    lpVtbl : IDirect3DStateBlock9VTbl*
  end

  struct IDirect3DSwapChain9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    present : UInt64
    get_front_buffer_data : UInt64
    get_back_buffer : UInt64
    get_raster_status : UInt64
    get_display_mode : UInt64
    get_device : UInt64
    get_present_parameters : UInt64
  end

  IDirect3DSwapChain9_GUID = "794950f2-adfc-458a-905e-10a10b0b503b"
  IID_IDirect3DSwapChain9 = LibC::GUID.new(0x794950f2_u32, 0xadfc_u16, 0x458a_u16, StaticArray[0x90_u8, 0x5e_u8, 0x10_u8, 0xa1_u8, 0xb_u8, 0xb_u8, 0x50_u8, 0x3b_u8])
  struct IDirect3DSwapChain9
    lpVtbl : IDirect3DSwapChain9VTbl*
  end

  struct IDirect3DResource9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    set_private_data : UInt64
    get_private_data : UInt64
    free_private_data : UInt64
    set_priority : UInt64
    get_priority : UInt64
    pre_load : UInt64
    get_type : UInt64
  end

  IDirect3DResource9_GUID = "05eec05d-8f7d-4362-b999-d1baf357c704"
  IID_IDirect3DResource9 = LibC::GUID.new(0x5eec05d_u32, 0x8f7d_u16, 0x4362_u16, StaticArray[0xb9_u8, 0x99_u8, 0xd1_u8, 0xba_u8, 0xf3_u8, 0x57_u8, 0xc7_u8, 0x4_u8])
  struct IDirect3DResource9
    lpVtbl : IDirect3DResource9VTbl*
  end

  struct IDirect3DVertexDeclaration9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_declaration : UInt64
  end

  IDirect3DVertexDeclaration9_GUID = "dd13c59c-36fa-4098-a8fb-c7ed39dc8546"
  IID_IDirect3DVertexDeclaration9 = LibC::GUID.new(0xdd13c59c_u32, 0x36fa_u16, 0x4098_u16, StaticArray[0xa8_u8, 0xfb_u8, 0xc7_u8, 0xed_u8, 0x39_u8, 0xdc_u8, 0x85_u8, 0x46_u8])
  struct IDirect3DVertexDeclaration9
    lpVtbl : IDirect3DVertexDeclaration9VTbl*
  end

  struct IDirect3DVertexShader9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_function : UInt64
  end

  IDirect3DVertexShader9_GUID = "efc5557e-6265-4613-8a94-43857889eb36"
  IID_IDirect3DVertexShader9 = LibC::GUID.new(0xefc5557e_u32, 0x6265_u16, 0x4613_u16, StaticArray[0x8a_u8, 0x94_u8, 0x43_u8, 0x85_u8, 0x78_u8, 0x89_u8, 0xeb_u8, 0x36_u8])
  struct IDirect3DVertexShader9
    lpVtbl : IDirect3DVertexShader9VTbl*
  end

  struct IDirect3DPixelShader9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_function : UInt64
  end

  IDirect3DPixelShader9_GUID = "6d3bdbdc-5b02-4415-b852-ce5e8bccb289"
  IID_IDirect3DPixelShader9 = LibC::GUID.new(0x6d3bdbdc_u32, 0x5b02_u16, 0x4415_u16, StaticArray[0xb8_u8, 0x52_u8, 0xce_u8, 0x5e_u8, 0x8b_u8, 0xcc_u8, 0xb2_u8, 0x89_u8])
  struct IDirect3DPixelShader9
    lpVtbl : IDirect3DPixelShader9VTbl*
  end

  struct IDirect3DBaseTexture9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    set_private_data : UInt64
    get_private_data : UInt64
    free_private_data : UInt64
    set_priority : UInt64
    get_priority : UInt64
    pre_load : UInt64
    get_type : UInt64
    set_lod : UInt64
    get_lod : UInt64
    get_level_count : UInt64
    set_auto_gen_filter_type : UInt64
    get_auto_gen_filter_type : UInt64
    generate_mip_sub_levels : UInt64
  end

  IDirect3DBaseTexture9_GUID = "580ca87e-1d3c-4d54-991d-b7d3e3c298ce"
  IID_IDirect3DBaseTexture9 = LibC::GUID.new(0x580ca87e_u32, 0x1d3c_u16, 0x4d54_u16, StaticArray[0x99_u8, 0x1d_u8, 0xb7_u8, 0xd3_u8, 0xe3_u8, 0xc2_u8, 0x98_u8, 0xce_u8])
  struct IDirect3DBaseTexture9
    lpVtbl : IDirect3DBaseTexture9VTbl*
  end

  struct IDirect3DTexture9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    set_private_data : UInt64
    get_private_data : UInt64
    free_private_data : UInt64
    set_priority : UInt64
    get_priority : UInt64
    pre_load : UInt64
    get_type : UInt64
    set_lod : UInt64
    get_lod : UInt64
    get_level_count : UInt64
    set_auto_gen_filter_type : UInt64
    get_auto_gen_filter_type : UInt64
    generate_mip_sub_levels : UInt64
    get_level_desc : UInt64
    get_surface_level : UInt64
    lock_rect : UInt64
    unlock_rect : UInt64
    add_dirty_rect : UInt64
  end

  IDirect3DTexture9_GUID = "85c31227-3de5-4f00-9b3a-f11ac38c18b5"
  IID_IDirect3DTexture9 = LibC::GUID.new(0x85c31227_u32, 0x3de5_u16, 0x4f00_u16, StaticArray[0x9b_u8, 0x3a_u8, 0xf1_u8, 0x1a_u8, 0xc3_u8, 0x8c_u8, 0x18_u8, 0xb5_u8])
  struct IDirect3DTexture9
    lpVtbl : IDirect3DTexture9VTbl*
  end

  struct IDirect3DVolumeTexture9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    set_private_data : UInt64
    get_private_data : UInt64
    free_private_data : UInt64
    set_priority : UInt64
    get_priority : UInt64
    pre_load : UInt64
    get_type : UInt64
    set_lod : UInt64
    get_lod : UInt64
    get_level_count : UInt64
    set_auto_gen_filter_type : UInt64
    get_auto_gen_filter_type : UInt64
    generate_mip_sub_levels : UInt64
    get_level_desc : UInt64
    get_volume_level : UInt64
    lock_box : UInt64
    unlock_box : UInt64
    add_dirty_box : UInt64
  end

  IDirect3DVolumeTexture9_GUID = "2518526c-e789-4111-a7b9-47ef328d13e6"
  IID_IDirect3DVolumeTexture9 = LibC::GUID.new(0x2518526c_u32, 0xe789_u16, 0x4111_u16, StaticArray[0xa7_u8, 0xb9_u8, 0x47_u8, 0xef_u8, 0x32_u8, 0x8d_u8, 0x13_u8, 0xe6_u8])
  struct IDirect3DVolumeTexture9
    lpVtbl : IDirect3DVolumeTexture9VTbl*
  end

  struct IDirect3DCubeTexture9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    set_private_data : UInt64
    get_private_data : UInt64
    free_private_data : UInt64
    set_priority : UInt64
    get_priority : UInt64
    pre_load : UInt64
    get_type : UInt64
    set_lod : UInt64
    get_lod : UInt64
    get_level_count : UInt64
    set_auto_gen_filter_type : UInt64
    get_auto_gen_filter_type : UInt64
    generate_mip_sub_levels : UInt64
    get_level_desc : UInt64
    get_cube_map_surface : UInt64
    lock_rect : UInt64
    unlock_rect : UInt64
    add_dirty_rect : UInt64
  end

  IDirect3DCubeTexture9_GUID = "fff32f81-d953-473a-9223-93d652aba93f"
  IID_IDirect3DCubeTexture9 = LibC::GUID.new(0xfff32f81_u32, 0xd953_u16, 0x473a_u16, StaticArray[0x92_u8, 0x23_u8, 0x93_u8, 0xd6_u8, 0x52_u8, 0xab_u8, 0xa9_u8, 0x3f_u8])
  struct IDirect3DCubeTexture9
    lpVtbl : IDirect3DCubeTexture9VTbl*
  end

  struct IDirect3DVertexBuffer9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    set_private_data : UInt64
    get_private_data : UInt64
    free_private_data : UInt64
    set_priority : UInt64
    get_priority : UInt64
    pre_load : UInt64
    get_type : UInt64
    lock : UInt64
    unlock : UInt64
    get_desc : UInt64
  end

  IDirect3DVertexBuffer9_GUID = "b64bb1b5-fd70-4df6-bf91-19d0a12455e3"
  IID_IDirect3DVertexBuffer9 = LibC::GUID.new(0xb64bb1b5_u32, 0xfd70_u16, 0x4df6_u16, StaticArray[0xbf_u8, 0x91_u8, 0x19_u8, 0xd0_u8, 0xa1_u8, 0x24_u8, 0x55_u8, 0xe3_u8])
  struct IDirect3DVertexBuffer9
    lpVtbl : IDirect3DVertexBuffer9VTbl*
  end

  struct IDirect3DIndexBuffer9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    set_private_data : UInt64
    get_private_data : UInt64
    free_private_data : UInt64
    set_priority : UInt64
    get_priority : UInt64
    pre_load : UInt64
    get_type : UInt64
    lock : UInt64
    unlock : UInt64
    get_desc : UInt64
  end

  IDirect3DIndexBuffer9_GUID = "7c9dd65e-d3f7-4529-acee-785830acde35"
  IID_IDirect3DIndexBuffer9 = LibC::GUID.new(0x7c9dd65e_u32, 0xd3f7_u16, 0x4529_u16, StaticArray[0xac_u8, 0xee_u8, 0x78_u8, 0x58_u8, 0x30_u8, 0xac_u8, 0xde_u8, 0x35_u8])
  struct IDirect3DIndexBuffer9
    lpVtbl : IDirect3DIndexBuffer9VTbl*
  end

  struct IDirect3DSurface9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    set_private_data : UInt64
    get_private_data : UInt64
    free_private_data : UInt64
    set_priority : UInt64
    get_priority : UInt64
    pre_load : UInt64
    get_type : UInt64
    get_container : UInt64
    get_desc : UInt64
    lock_rect : UInt64
    unlock_rect : UInt64
    get_dc : UInt64
    release_dc : UInt64
  end

  IDirect3DSurface9_GUID = "0cfbaf3a-9ff6-429a-99b3-a2796af8b89b"
  IID_IDirect3DSurface9 = LibC::GUID.new(0xcfbaf3a_u32, 0x9ff6_u16, 0x429a_u16, StaticArray[0x99_u8, 0xb3_u8, 0xa2_u8, 0x79_u8, 0x6a_u8, 0xf8_u8, 0xb8_u8, 0x9b_u8])
  struct IDirect3DSurface9
    lpVtbl : IDirect3DSurface9VTbl*
  end

  struct IDirect3DVolume9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    set_private_data : UInt64
    get_private_data : UInt64
    free_private_data : UInt64
    get_container : UInt64
    get_desc : UInt64
    lock_box : UInt64
    unlock_box : UInt64
  end

  IDirect3DVolume9_GUID = "24f416e6-1f67-4aa7-b88e-d33f6f3128a1"
  IID_IDirect3DVolume9 = LibC::GUID.new(0x24f416e6_u32, 0x1f67_u16, 0x4aa7_u16, StaticArray[0xb8_u8, 0x8e_u8, 0xd3_u8, 0x3f_u8, 0x6f_u8, 0x31_u8, 0x28_u8, 0xa1_u8])
  struct IDirect3DVolume9
    lpVtbl : IDirect3DVolume9VTbl*
  end

  struct IDirect3DQuery9VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_type : UInt64
    get_data_size : UInt64
    issue : UInt64
    get_data : UInt64
  end

  IDirect3DQuery9_GUID = "d9771460-a695-4f26-bbd3-27b840b541cc"
  IID_IDirect3DQuery9 = LibC::GUID.new(0xd9771460_u32, 0xa695_u16, 0x4f26_u16, StaticArray[0xbb_u8, 0xd3_u8, 0x27_u8, 0xb8_u8, 0x40_u8, 0xb5_u8, 0x41_u8, 0xcc_u8])
  struct IDirect3DQuery9
    lpVtbl : IDirect3DQuery9VTbl*
  end

  struct IDirect3D9ExVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    register_software_device : UInt64
    get_adapter_count : UInt64
    get_adapter_identifier : UInt64
    get_adapter_mode_count : UInt64
    enum_adapter_modes : UInt64
    get_adapter_display_mode : UInt64
    check_device_type : UInt64
    check_device_format : UInt64
    check_device_multi_sample_type : UInt64
    check_depth_stencil_match : UInt64
    check_device_format_conversion : UInt64
    get_device_caps : UInt64
    get_adapter_monitor : UInt64
    create_device : UInt64
    get_adapter_mode_count_ex : UInt64
    enum_adapter_modes_ex : UInt64
    get_adapter_display_mode_ex : UInt64
    create_device_ex : UInt64
    get_adapter_luid : UInt64
  end

  IDirect3D9Ex_GUID = "02177241-69fc-400c-8ff1-93a44df6861d"
  IID_IDirect3D9Ex = LibC::GUID.new(0x2177241_u32, 0x69fc_u16, 0x400c_u16, StaticArray[0x8f_u8, 0xf1_u8, 0x93_u8, 0xa4_u8, 0x4d_u8, 0xf6_u8, 0x86_u8, 0x1d_u8])
  struct IDirect3D9Ex
    lpVtbl : IDirect3D9ExVTbl*
  end

  struct IDirect3DDevice9ExVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    test_cooperative_level : UInt64
    get_available_texture_mem : UInt64
    evict_managed_resources : UInt64
    get_direct3_d : UInt64
    get_device_caps : UInt64
    get_display_mode : UInt64
    get_creation_parameters : UInt64
    set_cursor_properties : UInt64
    set_cursor_position : UInt64
    show_cursor : UInt64
    create_additional_swap_chain : UInt64
    get_swap_chain : UInt64
    get_number_of_swap_chains : UInt64
    reset : UInt64
    present : UInt64
    get_back_buffer : UInt64
    get_raster_status : UInt64
    set_dialog_box_mode : UInt64
    set_gamma_ramp : UInt64
    get_gamma_ramp : UInt64
    create_texture : UInt64
    create_volume_texture : UInt64
    create_cube_texture : UInt64
    create_vertex_buffer : UInt64
    create_index_buffer : UInt64
    create_render_target : UInt64
    create_depth_stencil_surface : UInt64
    update_surface : UInt64
    update_texture : UInt64
    get_render_target_data : UInt64
    get_front_buffer_data : UInt64
    stretch_rect : UInt64
    color_fill : UInt64
    create_offscreen_plain_surface : UInt64
    set_render_target : UInt64
    get_render_target : UInt64
    set_depth_stencil_surface : UInt64
    get_depth_stencil_surface : UInt64
    begin_scene : UInt64
    end_scene : UInt64
    clear : UInt64
    set_transform : UInt64
    get_transform : UInt64
    multiply_transform : UInt64
    set_viewport : UInt64
    get_viewport : UInt64
    set_material : UInt64
    get_material : UInt64
    set_light : UInt64
    get_light : UInt64
    light_enable : UInt64
    get_light_enable : UInt64
    set_clip_plane : UInt64
    get_clip_plane : UInt64
    set_render_state : UInt64
    get_render_state : UInt64
    create_state_block : UInt64
    begin_state_block : UInt64
    end_state_block : UInt64
    set_clip_status : UInt64
    get_clip_status : UInt64
    get_texture : UInt64
    set_texture : UInt64
    get_texture_stage_state : UInt64
    set_texture_stage_state : UInt64
    get_sampler_state : UInt64
    set_sampler_state : UInt64
    validate_device : UInt64
    set_palette_entries : UInt64
    get_palette_entries : UInt64
    set_current_texture_palette : UInt64
    get_current_texture_palette : UInt64
    set_scissor_rect : UInt64
    get_scissor_rect : UInt64
    set_software_vertex_processing : UInt64
    get_software_vertex_processing : UInt64
    set_n_patch_mode : UInt64
    get_n_patch_mode : UInt64
    draw_primitive : UInt64
    draw_indexed_primitive : UInt64
    draw_primitive_up : UInt64
    draw_indexed_primitive_up : UInt64
    process_vertices : UInt64
    create_vertex_declaration : UInt64
    set_vertex_declaration : UInt64
    get_vertex_declaration : UInt64
    set_fvf : UInt64
    get_fvf : UInt64
    create_vertex_shader : UInt64
    set_vertex_shader : UInt64
    get_vertex_shader : UInt64
    set_vertex_shader_constant_f : UInt64
    get_vertex_shader_constant_f : UInt64
    set_vertex_shader_constant_i : UInt64
    get_vertex_shader_constant_i : UInt64
    set_vertex_shader_constant_b : UInt64
    get_vertex_shader_constant_b : UInt64
    set_stream_source : UInt64
    get_stream_source : UInt64
    set_stream_source_freq : UInt64
    get_stream_source_freq : UInt64
    set_indices : UInt64
    get_indices : UInt64
    create_pixel_shader : UInt64
    set_pixel_shader : UInt64
    get_pixel_shader : UInt64
    set_pixel_shader_constant_f : UInt64
    get_pixel_shader_constant_f : UInt64
    set_pixel_shader_constant_i : UInt64
    get_pixel_shader_constant_i : UInt64
    set_pixel_shader_constant_b : UInt64
    get_pixel_shader_constant_b : UInt64
    draw_rect_patch : UInt64
    draw_tri_patch : UInt64
    delete_patch : UInt64
    create_query : UInt64
    set_convolution_mono_kernel : UInt64
    compose_rects : UInt64
    present_ex : UInt64
    get_gpu_thread_priority : UInt64
    set_gpu_thread_priority : UInt64
    wait_for_v_blank : UInt64
    check_resource_residency : UInt64
    set_maximum_frame_latency : UInt64
    get_maximum_frame_latency : UInt64
    check_device_state : UInt64
    create_render_target_ex : UInt64
    create_offscreen_plain_surface_ex : UInt64
    create_depth_stencil_surface_ex : UInt64
    reset_ex : UInt64
    get_display_mode_ex : UInt64
  end

  IDirect3DDevice9Ex_GUID = "b18b10ce-2649-405a-870f-95f777d4313a"
  IID_IDirect3DDevice9Ex = LibC::GUID.new(0xb18b10ce_u32, 0x2649_u16, 0x405a_u16, StaticArray[0x87_u8, 0xf_u8, 0x95_u8, 0xf7_u8, 0x77_u8, 0xd4_u8, 0x31_u8, 0x3a_u8])
  struct IDirect3DDevice9Ex
    lpVtbl : IDirect3DDevice9ExVTbl*
  end

  struct IDirect3DSwapChain9ExVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    present : UInt64
    get_front_buffer_data : UInt64
    get_back_buffer : UInt64
    get_raster_status : UInt64
    get_display_mode : UInt64
    get_device : UInt64
    get_present_parameters : UInt64
    get_last_present_count : UInt64
    get_present_stats : UInt64
    get_display_mode_ex : UInt64
  end

  IDirect3DSwapChain9Ex_GUID = "91886caf-1c3d-4d2e-a0ab-3e4c7d8d3303"
  IID_IDirect3DSwapChain9Ex = LibC::GUID.new(0x91886caf_u32, 0x1c3d_u16, 0x4d2e_u16, StaticArray[0xa0_u8, 0xab_u8, 0x3e_u8, 0x4c_u8, 0x7d_u8, 0x8d_u8, 0x33_u8, 0x3_u8])
  struct IDirect3DSwapChain9Ex
    lpVtbl : IDirect3DSwapChain9ExVTbl*
  end


  # Params # sdkversion : UInt32 [In]
  fun Direct3DCreate9(sdkversion : UInt32) : IDirect3D9

  # Params # col : UInt32 [In],wszname : LibC::LPWSTR [In]
  fun D3DPERF_BeginEvent(col : UInt32, wszname : LibC::LPWSTR) : Int32

  # Params # 
  fun D3DPERF_EndEvent : Int32

  # Params # col : UInt32 [In],wszname : LibC::LPWSTR [In]
  fun D3DPERF_SetMarker(col : UInt32, wszname : LibC::LPWSTR) : Void

  # Params # col : UInt32 [In],wszname : LibC::LPWSTR [In]
  fun D3DPERF_SetRegion(col : UInt32, wszname : LibC::LPWSTR) : Void

  # Params # 
  fun D3DPERF_QueryRepeatFrame : LibC::BOOL

  # Params # dwoptions : UInt32 [In]
  fun D3DPERF_SetOptions(dwoptions : UInt32) : Void

  # Params # 
  fun D3DPERF_GetStatus : UInt32

  # Params # sdkversion : UInt32 [In],param1 : IDirect3D9Ex* [In]
  fun Direct3DCreate9Ex(sdkversion : UInt32, param1 : IDirect3D9Ex*) : HRESULT
end
struct LibWin32::IDirect3D9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def register_software_device(pinitializefunction : Void*) : HRESULT
    @lpVtbl.value.register_software_device.unsafe_as(Proc(Void*, HRESULT)).call(pinitializefunction)
  end
  def get_adapter_count : UInt32
    @lpVtbl.value.get_adapter_count.unsafe_as(Proc(UInt32)).call
  end
  def get_adapter_identifier(adapter : UInt32, flags : UInt32, pidentifier : D3DADAPTER_IDENTIFIER9*) : HRESULT
    @lpVtbl.value.get_adapter_identifier.unsafe_as(Proc(UInt32, UInt32, D3DADAPTER_IDENTIFIER9*, HRESULT)).call(adapter, flags, pidentifier)
  end
  def get_adapter_mode_count(adapter : UInt32, format : D3DFORMAT) : UInt32
    @lpVtbl.value.get_adapter_mode_count.unsafe_as(Proc(UInt32, D3DFORMAT, UInt32)).call(adapter, format)
  end
  def enum_adapter_modes(adapter : UInt32, format : D3DFORMAT, mode : UInt32, pmode : D3DDISPLAYMODE*) : HRESULT
    @lpVtbl.value.enum_adapter_modes.unsafe_as(Proc(UInt32, D3DFORMAT, UInt32, D3DDISPLAYMODE*, HRESULT)).call(adapter, format, mode, pmode)
  end
  def get_adapter_display_mode(adapter : UInt32, pmode : D3DDISPLAYMODE*) : HRESULT
    @lpVtbl.value.get_adapter_display_mode.unsafe_as(Proc(UInt32, D3DDISPLAYMODE*, HRESULT)).call(adapter, pmode)
  end
  def check_device_type(adapter : UInt32, devtype : D3DDEVTYPE, adapterformat : D3DFORMAT, backbufferformat : D3DFORMAT, bwindowed : LibC::BOOL) : HRESULT
    @lpVtbl.value.check_device_type.unsafe_as(Proc(UInt32, D3DDEVTYPE, D3DFORMAT, D3DFORMAT, LibC::BOOL, HRESULT)).call(adapter, devtype, adapterformat, backbufferformat, bwindowed)
  end
  def check_device_format(adapter : UInt32, devicetype : D3DDEVTYPE, adapterformat : D3DFORMAT, usage : UInt32, rtype : D3DRESOURCETYPE, checkformat : D3DFORMAT) : HRESULT
    @lpVtbl.value.check_device_format.unsafe_as(Proc(UInt32, D3DDEVTYPE, D3DFORMAT, UInt32, D3DRESOURCETYPE, D3DFORMAT, HRESULT)).call(adapter, devicetype, adapterformat, usage, rtype, checkformat)
  end
  def check_device_multi_sample_type(adapter : UInt32, devicetype : D3DDEVTYPE, surfaceformat : D3DFORMAT, windowed : LibC::BOOL, multisampletype : D3DMULTISAMPLE_TYPE, pqualitylevels : UInt32*) : HRESULT
    @lpVtbl.value.check_device_multi_sample_type.unsafe_as(Proc(UInt32, D3DDEVTYPE, D3DFORMAT, LibC::BOOL, D3DMULTISAMPLE_TYPE, UInt32*, HRESULT)).call(adapter, devicetype, surfaceformat, windowed, multisampletype, pqualitylevels)
  end
  def check_depth_stencil_match(adapter : UInt32, devicetype : D3DDEVTYPE, adapterformat : D3DFORMAT, rendertargetformat : D3DFORMAT, depthstencilformat : D3DFORMAT) : HRESULT
    @lpVtbl.value.check_depth_stencil_match.unsafe_as(Proc(UInt32, D3DDEVTYPE, D3DFORMAT, D3DFORMAT, D3DFORMAT, HRESULT)).call(adapter, devicetype, adapterformat, rendertargetformat, depthstencilformat)
  end
  def check_device_format_conversion(adapter : UInt32, devicetype : D3DDEVTYPE, sourceformat : D3DFORMAT, targetformat : D3DFORMAT) : HRESULT
    @lpVtbl.value.check_device_format_conversion.unsafe_as(Proc(UInt32, D3DDEVTYPE, D3DFORMAT, D3DFORMAT, HRESULT)).call(adapter, devicetype, sourceformat, targetformat)
  end
  def get_device_caps(adapter : UInt32, devicetype : D3DDEVTYPE, pcaps : D3DCAPS9*) : HRESULT
    @lpVtbl.value.get_device_caps.unsafe_as(Proc(UInt32, D3DDEVTYPE, D3DCAPS9*, HRESULT)).call(adapter, devicetype, pcaps)
  end
  def get_adapter_monitor(adapter : UInt32) : HMONITOR
    @lpVtbl.value.get_adapter_monitor.unsafe_as(Proc(UInt32, HMONITOR)).call(adapter)
  end
  def create_device(adapter : UInt32, devicetype : D3DDEVTYPE, hfocuswindow : LibC::HANDLE, behaviorflags : UInt32, ppresentationparameters : D3DPRESENT_PARAMETERS*, ppreturneddeviceinterface : IDirect3DDevice9*) : HRESULT
    @lpVtbl.value.create_device.unsafe_as(Proc(UInt32, D3DDEVTYPE, LibC::HANDLE, UInt32, D3DPRESENT_PARAMETERS*, IDirect3DDevice9*, HRESULT)).call(adapter, devicetype, hfocuswindow, behaviorflags, ppresentationparameters, ppreturneddeviceinterface)
  end
end
struct LibWin32::IDirect3DDevice9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def test_cooperative_level : HRESULT
    @lpVtbl.value.test_cooperative_level.unsafe_as(Proc(HRESULT)).call
  end
  def get_available_texture_mem : UInt32
    @lpVtbl.value.get_available_texture_mem.unsafe_as(Proc(UInt32)).call
  end
  def evict_managed_resources : HRESULT
    @lpVtbl.value.evict_managed_resources.unsafe_as(Proc(HRESULT)).call
  end
  def get_direct3_d(ppd3d9 : IDirect3D9*) : HRESULT
    @lpVtbl.value.get_direct3_d.unsafe_as(Proc(IDirect3D9*, HRESULT)).call(ppd3d9)
  end
  def get_device_caps(pcaps : D3DCAPS9*) : HRESULT
    @lpVtbl.value.get_device_caps.unsafe_as(Proc(D3DCAPS9*, HRESULT)).call(pcaps)
  end
  def get_display_mode(iswapchain : UInt32, pmode : D3DDISPLAYMODE*) : HRESULT
    @lpVtbl.value.get_display_mode.unsafe_as(Proc(UInt32, D3DDISPLAYMODE*, HRESULT)).call(iswapchain, pmode)
  end
  def get_creation_parameters(pparameters : D3DDEVICE_CREATION_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_creation_parameters.unsafe_as(Proc(D3DDEVICE_CREATION_PARAMETERS*, HRESULT)).call(pparameters)
  end
  def set_cursor_properties(xhotspot : UInt32, yhotspot : UInt32, pcursorbitmap : IDirect3DSurface9) : HRESULT
    @lpVtbl.value.set_cursor_properties.unsafe_as(Proc(UInt32, UInt32, IDirect3DSurface9, HRESULT)).call(xhotspot, yhotspot, pcursorbitmap)
  end
  def set_cursor_position(x : Int32, y : Int32, flags : UInt32) : Void
    @lpVtbl.value.set_cursor_position.unsafe_as(Proc(Int32, Int32, UInt32, Void)).call(x, y, flags)
  end
  def show_cursor(bshow : LibC::BOOL) : LibC::BOOL
    @lpVtbl.value.show_cursor.unsafe_as(Proc(LibC::BOOL, LibC::BOOL)).call(bshow)
  end
  def create_additional_swap_chain(ppresentationparameters : D3DPRESENT_PARAMETERS*, pswapchain : IDirect3DSwapChain9*) : HRESULT
    @lpVtbl.value.create_additional_swap_chain.unsafe_as(Proc(D3DPRESENT_PARAMETERS*, IDirect3DSwapChain9*, HRESULT)).call(ppresentationparameters, pswapchain)
  end
  def get_swap_chain(iswapchain : UInt32, pswapchain : IDirect3DSwapChain9*) : HRESULT
    @lpVtbl.value.get_swap_chain.unsafe_as(Proc(UInt32, IDirect3DSwapChain9*, HRESULT)).call(iswapchain, pswapchain)
  end
  def get_number_of_swap_chains : UInt32
    @lpVtbl.value.get_number_of_swap_chains.unsafe_as(Proc(UInt32)).call
  end
  def reset(ppresentationparameters : D3DPRESENT_PARAMETERS*) : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(D3DPRESENT_PARAMETERS*, HRESULT)).call(ppresentationparameters)
  end
  def present(psourcerect : RECT*, pdestrect : RECT*, hdestwindowoverride : LibC::HANDLE, pdirtyregion : RGNDATA*) : HRESULT
    @lpVtbl.value.present.unsafe_as(Proc(RECT*, RECT*, LibC::HANDLE, RGNDATA*, HRESULT)).call(psourcerect, pdestrect, hdestwindowoverride, pdirtyregion)
  end
  def get_back_buffer(iswapchain : UInt32, ibackbuffer : UInt32, type : D3DBACKBUFFER_TYPE, ppbackbuffer : IDirect3DSurface9*) : HRESULT
    @lpVtbl.value.get_back_buffer.unsafe_as(Proc(UInt32, UInt32, D3DBACKBUFFER_TYPE, IDirect3DSurface9*, HRESULT)).call(iswapchain, ibackbuffer, type, ppbackbuffer)
  end
  def get_raster_status(iswapchain : UInt32, prasterstatus : D3DRASTER_STATUS*) : HRESULT
    @lpVtbl.value.get_raster_status.unsafe_as(Proc(UInt32, D3DRASTER_STATUS*, HRESULT)).call(iswapchain, prasterstatus)
  end
  def set_dialog_box_mode(benabledialogs : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_dialog_box_mode.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(benabledialogs)
  end
  def set_gamma_ramp(iswapchain : UInt32, flags : UInt32, pramp : D3DGAMMARAMP*) : Void
    @lpVtbl.value.set_gamma_ramp.unsafe_as(Proc(UInt32, UInt32, D3DGAMMARAMP*, Void)).call(iswapchain, flags, pramp)
  end
  def get_gamma_ramp(iswapchain : UInt32, pramp : D3DGAMMARAMP*) : Void
    @lpVtbl.value.get_gamma_ramp.unsafe_as(Proc(UInt32, D3DGAMMARAMP*, Void)).call(iswapchain, pramp)
  end
  def create_texture(width : UInt32, height : UInt32, levels : UInt32, usage : UInt32, format : D3DFORMAT, pool : D3DPOOL, pptexture : IDirect3DTexture9*, psharedhandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_texture.unsafe_as(Proc(UInt32, UInt32, UInt32, UInt32, D3DFORMAT, D3DPOOL, IDirect3DTexture9*, LibC::HANDLE*, HRESULT)).call(width, height, levels, usage, format, pool, pptexture, psharedhandle)
  end
  def create_volume_texture(width : UInt32, height : UInt32, depth : UInt32, levels : UInt32, usage : UInt32, format : D3DFORMAT, pool : D3DPOOL, ppvolumetexture : IDirect3DVolumeTexture9*, psharedhandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_volume_texture.unsafe_as(Proc(UInt32, UInt32, UInt32, UInt32, UInt32, D3DFORMAT, D3DPOOL, IDirect3DVolumeTexture9*, LibC::HANDLE*, HRESULT)).call(width, height, depth, levels, usage, format, pool, ppvolumetexture, psharedhandle)
  end
  def create_cube_texture(edgelength : UInt32, levels : UInt32, usage : UInt32, format : D3DFORMAT, pool : D3DPOOL, ppcubetexture : IDirect3DCubeTexture9*, psharedhandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_cube_texture.unsafe_as(Proc(UInt32, UInt32, UInt32, D3DFORMAT, D3DPOOL, IDirect3DCubeTexture9*, LibC::HANDLE*, HRESULT)).call(edgelength, levels, usage, format, pool, ppcubetexture, psharedhandle)
  end
  def create_vertex_buffer(length : UInt32, usage : UInt32, fvf : UInt32, pool : D3DPOOL, ppvertexbuffer : IDirect3DVertexBuffer9*, psharedhandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_vertex_buffer.unsafe_as(Proc(UInt32, UInt32, UInt32, D3DPOOL, IDirect3DVertexBuffer9*, LibC::HANDLE*, HRESULT)).call(length, usage, fvf, pool, ppvertexbuffer, psharedhandle)
  end
  def create_index_buffer(length : UInt32, usage : UInt32, format : D3DFORMAT, pool : D3DPOOL, ppindexbuffer : IDirect3DIndexBuffer9*, psharedhandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_index_buffer.unsafe_as(Proc(UInt32, UInt32, D3DFORMAT, D3DPOOL, IDirect3DIndexBuffer9*, LibC::HANDLE*, HRESULT)).call(length, usage, format, pool, ppindexbuffer, psharedhandle)
  end
  def create_render_target(width : UInt32, height : UInt32, format : D3DFORMAT, multisample : D3DMULTISAMPLE_TYPE, multisamplequality : UInt32, lockable : LibC::BOOL, ppsurface : IDirect3DSurface9*, psharedhandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_render_target.unsafe_as(Proc(UInt32, UInt32, D3DFORMAT, D3DMULTISAMPLE_TYPE, UInt32, LibC::BOOL, IDirect3DSurface9*, LibC::HANDLE*, HRESULT)).call(width, height, format, multisample, multisamplequality, lockable, ppsurface, psharedhandle)
  end
  def create_depth_stencil_surface(width : UInt32, height : UInt32, format : D3DFORMAT, multisample : D3DMULTISAMPLE_TYPE, multisamplequality : UInt32, discard : LibC::BOOL, ppsurface : IDirect3DSurface9*, psharedhandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_depth_stencil_surface.unsafe_as(Proc(UInt32, UInt32, D3DFORMAT, D3DMULTISAMPLE_TYPE, UInt32, LibC::BOOL, IDirect3DSurface9*, LibC::HANDLE*, HRESULT)).call(width, height, format, multisample, multisamplequality, discard, ppsurface, psharedhandle)
  end
  def update_surface(psourcesurface : IDirect3DSurface9, psourcerect : RECT*, pdestinationsurface : IDirect3DSurface9, pdestpoint : POINT*) : HRESULT
    @lpVtbl.value.update_surface.unsafe_as(Proc(IDirect3DSurface9, RECT*, IDirect3DSurface9, POINT*, HRESULT)).call(psourcesurface, psourcerect, pdestinationsurface, pdestpoint)
  end
  def update_texture(psourcetexture : IDirect3DBaseTexture9, pdestinationtexture : IDirect3DBaseTexture9) : HRESULT
    @lpVtbl.value.update_texture.unsafe_as(Proc(IDirect3DBaseTexture9, IDirect3DBaseTexture9, HRESULT)).call(psourcetexture, pdestinationtexture)
  end
  def get_render_target_data(prendertarget : IDirect3DSurface9, pdestsurface : IDirect3DSurface9) : HRESULT
    @lpVtbl.value.get_render_target_data.unsafe_as(Proc(IDirect3DSurface9, IDirect3DSurface9, HRESULT)).call(prendertarget, pdestsurface)
  end
  def get_front_buffer_data(iswapchain : UInt32, pdestsurface : IDirect3DSurface9) : HRESULT
    @lpVtbl.value.get_front_buffer_data.unsafe_as(Proc(UInt32, IDirect3DSurface9, HRESULT)).call(iswapchain, pdestsurface)
  end
  def stretch_rect(psourcesurface : IDirect3DSurface9, psourcerect : RECT*, pdestsurface : IDirect3DSurface9, pdestrect : RECT*, filter : D3DTEXTUREFILTERTYPE) : HRESULT
    @lpVtbl.value.stretch_rect.unsafe_as(Proc(IDirect3DSurface9, RECT*, IDirect3DSurface9, RECT*, D3DTEXTUREFILTERTYPE, HRESULT)).call(psourcesurface, psourcerect, pdestsurface, pdestrect, filter)
  end
  def color_fill(psurface : IDirect3DSurface9, prect : RECT*, color : UInt32) : HRESULT
    @lpVtbl.value.color_fill.unsafe_as(Proc(IDirect3DSurface9, RECT*, UInt32, HRESULT)).call(psurface, prect, color)
  end
  def create_offscreen_plain_surface(width : UInt32, height : UInt32, format : D3DFORMAT, pool : D3DPOOL, ppsurface : IDirect3DSurface9*, psharedhandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_offscreen_plain_surface.unsafe_as(Proc(UInt32, UInt32, D3DFORMAT, D3DPOOL, IDirect3DSurface9*, LibC::HANDLE*, HRESULT)).call(width, height, format, pool, ppsurface, psharedhandle)
  end
  def set_render_target(rendertargetindex : UInt32, prendertarget : IDirect3DSurface9) : HRESULT
    @lpVtbl.value.set_render_target.unsafe_as(Proc(UInt32, IDirect3DSurface9, HRESULT)).call(rendertargetindex, prendertarget)
  end
  def get_render_target(rendertargetindex : UInt32, pprendertarget : IDirect3DSurface9*) : HRESULT
    @lpVtbl.value.get_render_target.unsafe_as(Proc(UInt32, IDirect3DSurface9*, HRESULT)).call(rendertargetindex, pprendertarget)
  end
  def set_depth_stencil_surface(pnewzstencil : IDirect3DSurface9) : HRESULT
    @lpVtbl.value.set_depth_stencil_surface.unsafe_as(Proc(IDirect3DSurface9, HRESULT)).call(pnewzstencil)
  end
  def get_depth_stencil_surface(ppzstencilsurface : IDirect3DSurface9*) : HRESULT
    @lpVtbl.value.get_depth_stencil_surface.unsafe_as(Proc(IDirect3DSurface9*, HRESULT)).call(ppzstencilsurface)
  end
  def begin_scene : HRESULT
    @lpVtbl.value.begin_scene.unsafe_as(Proc(HRESULT)).call
  end
  def end_scene : HRESULT
    @lpVtbl.value.end_scene.unsafe_as(Proc(HRESULT)).call
  end
  def clear(count : UInt32, prects : D3DRECT*, flags : UInt32, color : UInt32, z : Float32, stencil : UInt32) : HRESULT
    @lpVtbl.value.clear.unsafe_as(Proc(UInt32, D3DRECT*, UInt32, UInt32, Float32, UInt32, HRESULT)).call(count, prects, flags, color, z, stencil)
  end
  def set_transform(state : D3DTRANSFORMSTATETYPE, pmatrix : D3DMATRIX*) : HRESULT
    @lpVtbl.value.set_transform.unsafe_as(Proc(D3DTRANSFORMSTATETYPE, D3DMATRIX*, HRESULT)).call(state, pmatrix)
  end
  def get_transform(state : D3DTRANSFORMSTATETYPE, pmatrix : D3DMATRIX*) : HRESULT
    @lpVtbl.value.get_transform.unsafe_as(Proc(D3DTRANSFORMSTATETYPE, D3DMATRIX*, HRESULT)).call(state, pmatrix)
  end
  def multiply_transform(param0 : D3DTRANSFORMSTATETYPE, param1 : D3DMATRIX*) : HRESULT
    @lpVtbl.value.multiply_transform.unsafe_as(Proc(D3DTRANSFORMSTATETYPE, D3DMATRIX*, HRESULT)).call(param0, param1)
  end
  def set_viewport(pviewport : D3DVIEWPORT9*) : HRESULT
    @lpVtbl.value.set_viewport.unsafe_as(Proc(D3DVIEWPORT9*, HRESULT)).call(pviewport)
  end
  def get_viewport(pviewport : D3DVIEWPORT9*) : HRESULT
    @lpVtbl.value.get_viewport.unsafe_as(Proc(D3DVIEWPORT9*, HRESULT)).call(pviewport)
  end
  def set_material(pmaterial : D3DMATERIAL9*) : HRESULT
    @lpVtbl.value.set_material.unsafe_as(Proc(D3DMATERIAL9*, HRESULT)).call(pmaterial)
  end
  def get_material(pmaterial : D3DMATERIAL9*) : HRESULT
    @lpVtbl.value.get_material.unsafe_as(Proc(D3DMATERIAL9*, HRESULT)).call(pmaterial)
  end
  def set_light(index : UInt32, param1 : D3DLIGHT9*) : HRESULT
    @lpVtbl.value.set_light.unsafe_as(Proc(UInt32, D3DLIGHT9*, HRESULT)).call(index, param1)
  end
  def get_light(index : UInt32, param1 : D3DLIGHT9*) : HRESULT
    @lpVtbl.value.get_light.unsafe_as(Proc(UInt32, D3DLIGHT9*, HRESULT)).call(index, param1)
  end
  def light_enable(index : UInt32, enable : LibC::BOOL) : HRESULT
    @lpVtbl.value.light_enable.unsafe_as(Proc(UInt32, LibC::BOOL, HRESULT)).call(index, enable)
  end
  def get_light_enable(index : UInt32, penable : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_light_enable.unsafe_as(Proc(UInt32, LibC::BOOL*, HRESULT)).call(index, penable)
  end
  def set_clip_plane(index : UInt32, pplane : Float32*) : HRESULT
    @lpVtbl.value.set_clip_plane.unsafe_as(Proc(UInt32, Float32*, HRESULT)).call(index, pplane)
  end
  def get_clip_plane(index : UInt32, pplane : Float32*) : HRESULT
    @lpVtbl.value.get_clip_plane.unsafe_as(Proc(UInt32, Float32*, HRESULT)).call(index, pplane)
  end
  def set_render_state(state : D3DRENDERSTATETYPE, value : UInt32) : HRESULT
    @lpVtbl.value.set_render_state.unsafe_as(Proc(D3DRENDERSTATETYPE, UInt32, HRESULT)).call(state, value)
  end
  def get_render_state(state : D3DRENDERSTATETYPE, pvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_render_state.unsafe_as(Proc(D3DRENDERSTATETYPE, UInt32*, HRESULT)).call(state, pvalue)
  end
  def create_state_block(type : D3DSTATEBLOCKTYPE, ppsb : IDirect3DStateBlock9*) : HRESULT
    @lpVtbl.value.create_state_block.unsafe_as(Proc(D3DSTATEBLOCKTYPE, IDirect3DStateBlock9*, HRESULT)).call(type, ppsb)
  end
  def begin_state_block : HRESULT
    @lpVtbl.value.begin_state_block.unsafe_as(Proc(HRESULT)).call
  end
  def end_state_block(ppsb : IDirect3DStateBlock9*) : HRESULT
    @lpVtbl.value.end_state_block.unsafe_as(Proc(IDirect3DStateBlock9*, HRESULT)).call(ppsb)
  end
  def set_clip_status(pclipstatus : D3DCLIPSTATUS9*) : HRESULT
    @lpVtbl.value.set_clip_status.unsafe_as(Proc(D3DCLIPSTATUS9*, HRESULT)).call(pclipstatus)
  end
  def get_clip_status(pclipstatus : D3DCLIPSTATUS9*) : HRESULT
    @lpVtbl.value.get_clip_status.unsafe_as(Proc(D3DCLIPSTATUS9*, HRESULT)).call(pclipstatus)
  end
  def get_texture(stage : UInt32, pptexture : IDirect3DBaseTexture9*) : HRESULT
    @lpVtbl.value.get_texture.unsafe_as(Proc(UInt32, IDirect3DBaseTexture9*, HRESULT)).call(stage, pptexture)
  end
  def set_texture(stage : UInt32, ptexture : IDirect3DBaseTexture9) : HRESULT
    @lpVtbl.value.set_texture.unsafe_as(Proc(UInt32, IDirect3DBaseTexture9, HRESULT)).call(stage, ptexture)
  end
  def get_texture_stage_state(stage : UInt32, type : D3DTEXTURESTAGESTATETYPE, pvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_texture_stage_state.unsafe_as(Proc(UInt32, D3DTEXTURESTAGESTATETYPE, UInt32*, HRESULT)).call(stage, type, pvalue)
  end
  def set_texture_stage_state(stage : UInt32, type : D3DTEXTURESTAGESTATETYPE, value : UInt32) : HRESULT
    @lpVtbl.value.set_texture_stage_state.unsafe_as(Proc(UInt32, D3DTEXTURESTAGESTATETYPE, UInt32, HRESULT)).call(stage, type, value)
  end
  def get_sampler_state(sampler : UInt32, type : D3DSAMPLERSTATETYPE, pvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_sampler_state.unsafe_as(Proc(UInt32, D3DSAMPLERSTATETYPE, UInt32*, HRESULT)).call(sampler, type, pvalue)
  end
  def set_sampler_state(sampler : UInt32, type : D3DSAMPLERSTATETYPE, value : UInt32) : HRESULT
    @lpVtbl.value.set_sampler_state.unsafe_as(Proc(UInt32, D3DSAMPLERSTATETYPE, UInt32, HRESULT)).call(sampler, type, value)
  end
  def validate_device(pnumpasses : UInt32*) : HRESULT
    @lpVtbl.value.validate_device.unsafe_as(Proc(UInt32*, HRESULT)).call(pnumpasses)
  end
  def set_palette_entries(palettenumber : UInt32, pentries : PALETTEENTRY*) : HRESULT
    @lpVtbl.value.set_palette_entries.unsafe_as(Proc(UInt32, PALETTEENTRY*, HRESULT)).call(palettenumber, pentries)
  end
  def get_palette_entries(palettenumber : UInt32, pentries : PALETTEENTRY*) : HRESULT
    @lpVtbl.value.get_palette_entries.unsafe_as(Proc(UInt32, PALETTEENTRY*, HRESULT)).call(palettenumber, pentries)
  end
  def set_current_texture_palette(palettenumber : UInt32) : HRESULT
    @lpVtbl.value.set_current_texture_palette.unsafe_as(Proc(UInt32, HRESULT)).call(palettenumber)
  end
  def get_current_texture_palette(palettenumber : UInt32*) : HRESULT
    @lpVtbl.value.get_current_texture_palette.unsafe_as(Proc(UInt32*, HRESULT)).call(palettenumber)
  end
  def set_scissor_rect(prect : RECT*) : HRESULT
    @lpVtbl.value.set_scissor_rect.unsafe_as(Proc(RECT*, HRESULT)).call(prect)
  end
  def get_scissor_rect(prect : RECT*) : HRESULT
    @lpVtbl.value.get_scissor_rect.unsafe_as(Proc(RECT*, HRESULT)).call(prect)
  end
  def set_software_vertex_processing(bsoftware : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_software_vertex_processing.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(bsoftware)
  end
  def get_software_vertex_processing : LibC::BOOL
    @lpVtbl.value.get_software_vertex_processing.unsafe_as(Proc(LibC::BOOL)).call
  end
  def set_n_patch_mode(nsegments : Float32) : HRESULT
    @lpVtbl.value.set_n_patch_mode.unsafe_as(Proc(Float32, HRESULT)).call(nsegments)
  end
  def get_n_patch_mode : Float32
    @lpVtbl.value.get_n_patch_mode.unsafe_as(Proc(Float32)).call
  end
  def draw_primitive(primitivetype : D3DPRIMITIVETYPE, startvertex : UInt32, primitivecount : UInt32) : HRESULT
    @lpVtbl.value.draw_primitive.unsafe_as(Proc(D3DPRIMITIVETYPE, UInt32, UInt32, HRESULT)).call(primitivetype, startvertex, primitivecount)
  end
  def draw_indexed_primitive(param0 : D3DPRIMITIVETYPE, basevertexindex : Int32, minvertexindex : UInt32, numvertices : UInt32, startindex : UInt32, primcount : UInt32) : HRESULT
    @lpVtbl.value.draw_indexed_primitive.unsafe_as(Proc(D3DPRIMITIVETYPE, Int32, UInt32, UInt32, UInt32, UInt32, HRESULT)).call(param0, basevertexindex, minvertexindex, numvertices, startindex, primcount)
  end
  def draw_primitive_up(primitivetype : D3DPRIMITIVETYPE, primitivecount : UInt32, pvertexstreamzerodata : Void*, vertexstreamzerostride : UInt32) : HRESULT
    @lpVtbl.value.draw_primitive_up.unsafe_as(Proc(D3DPRIMITIVETYPE, UInt32, Void*, UInt32, HRESULT)).call(primitivetype, primitivecount, pvertexstreamzerodata, vertexstreamzerostride)
  end
  def draw_indexed_primitive_up(primitivetype : D3DPRIMITIVETYPE, minvertexindex : UInt32, numvertices : UInt32, primitivecount : UInt32, pindexdata : Void*, indexdataformat : D3DFORMAT, pvertexstreamzerodata : Void*, vertexstreamzerostride : UInt32) : HRESULT
    @lpVtbl.value.draw_indexed_primitive_up.unsafe_as(Proc(D3DPRIMITIVETYPE, UInt32, UInt32, UInt32, Void*, D3DFORMAT, Void*, UInt32, HRESULT)).call(primitivetype, minvertexindex, numvertices, primitivecount, pindexdata, indexdataformat, pvertexstreamzerodata, vertexstreamzerostride)
  end
  def process_vertices(srcstartindex : UInt32, destindex : UInt32, vertexcount : UInt32, pdestbuffer : IDirect3DVertexBuffer9, pvertexdecl : IDirect3DVertexDeclaration9, flags : UInt32) : HRESULT
    @lpVtbl.value.process_vertices.unsafe_as(Proc(UInt32, UInt32, UInt32, IDirect3DVertexBuffer9, IDirect3DVertexDeclaration9, UInt32, HRESULT)).call(srcstartindex, destindex, vertexcount, pdestbuffer, pvertexdecl, flags)
  end
  def create_vertex_declaration(pvertexelements : D3DVERTEXELEMENT9*, ppdecl : IDirect3DVertexDeclaration9*) : HRESULT
    @lpVtbl.value.create_vertex_declaration.unsafe_as(Proc(D3DVERTEXELEMENT9*, IDirect3DVertexDeclaration9*, HRESULT)).call(pvertexelements, ppdecl)
  end
  def set_vertex_declaration(pdecl : IDirect3DVertexDeclaration9) : HRESULT
    @lpVtbl.value.set_vertex_declaration.unsafe_as(Proc(IDirect3DVertexDeclaration9, HRESULT)).call(pdecl)
  end
  def get_vertex_declaration(ppdecl : IDirect3DVertexDeclaration9*) : HRESULT
    @lpVtbl.value.get_vertex_declaration.unsafe_as(Proc(IDirect3DVertexDeclaration9*, HRESULT)).call(ppdecl)
  end
  def set_fvf(fvf : UInt32) : HRESULT
    @lpVtbl.value.set_fvf.unsafe_as(Proc(UInt32, HRESULT)).call(fvf)
  end
  def get_fvf(pfvf : UInt32*) : HRESULT
    @lpVtbl.value.get_fvf.unsafe_as(Proc(UInt32*, HRESULT)).call(pfvf)
  end
  def create_vertex_shader(pfunction : UInt32*, ppshader : IDirect3DVertexShader9*) : HRESULT
    @lpVtbl.value.create_vertex_shader.unsafe_as(Proc(UInt32*, IDirect3DVertexShader9*, HRESULT)).call(pfunction, ppshader)
  end
  def set_vertex_shader(pshader : IDirect3DVertexShader9) : HRESULT
    @lpVtbl.value.set_vertex_shader.unsafe_as(Proc(IDirect3DVertexShader9, HRESULT)).call(pshader)
  end
  def get_vertex_shader(ppshader : IDirect3DVertexShader9*) : HRESULT
    @lpVtbl.value.get_vertex_shader.unsafe_as(Proc(IDirect3DVertexShader9*, HRESULT)).call(ppshader)
  end
  def set_vertex_shader_constant_f(startregister : UInt32, pconstantdata : Float32*, vector4fcount : UInt32) : HRESULT
    @lpVtbl.value.set_vertex_shader_constant_f.unsafe_as(Proc(UInt32, Float32*, UInt32, HRESULT)).call(startregister, pconstantdata, vector4fcount)
  end
  def get_vertex_shader_constant_f(startregister : UInt32, pconstantdata : Float32*, vector4fcount : UInt32) : HRESULT
    @lpVtbl.value.get_vertex_shader_constant_f.unsafe_as(Proc(UInt32, Float32*, UInt32, HRESULT)).call(startregister, pconstantdata, vector4fcount)
  end
  def set_vertex_shader_constant_i(startregister : UInt32, pconstantdata : Int32*, vector4icount : UInt32) : HRESULT
    @lpVtbl.value.set_vertex_shader_constant_i.unsafe_as(Proc(UInt32, Int32*, UInt32, HRESULT)).call(startregister, pconstantdata, vector4icount)
  end
  def get_vertex_shader_constant_i(startregister : UInt32, pconstantdata : Int32*, vector4icount : UInt32) : HRESULT
    @lpVtbl.value.get_vertex_shader_constant_i.unsafe_as(Proc(UInt32, Int32*, UInt32, HRESULT)).call(startregister, pconstantdata, vector4icount)
  end
  def set_vertex_shader_constant_b(startregister : UInt32, pconstantdata : LibC::BOOL*, boolcount : UInt32) : HRESULT
    @lpVtbl.value.set_vertex_shader_constant_b.unsafe_as(Proc(UInt32, LibC::BOOL*, UInt32, HRESULT)).call(startregister, pconstantdata, boolcount)
  end
  def get_vertex_shader_constant_b(startregister : UInt32, pconstantdata : LibC::BOOL*, boolcount : UInt32) : HRESULT
    @lpVtbl.value.get_vertex_shader_constant_b.unsafe_as(Proc(UInt32, LibC::BOOL*, UInt32, HRESULT)).call(startregister, pconstantdata, boolcount)
  end
  def set_stream_source(streamnumber : UInt32, pstreamdata : IDirect3DVertexBuffer9, offsetinbytes : UInt32, stride : UInt32) : HRESULT
    @lpVtbl.value.set_stream_source.unsafe_as(Proc(UInt32, IDirect3DVertexBuffer9, UInt32, UInt32, HRESULT)).call(streamnumber, pstreamdata, offsetinbytes, stride)
  end
  def get_stream_source(streamnumber : UInt32, ppstreamdata : IDirect3DVertexBuffer9*, poffsetinbytes : UInt32*, pstride : UInt32*) : HRESULT
    @lpVtbl.value.get_stream_source.unsafe_as(Proc(UInt32, IDirect3DVertexBuffer9*, UInt32*, UInt32*, HRESULT)).call(streamnumber, ppstreamdata, poffsetinbytes, pstride)
  end
  def set_stream_source_freq(streamnumber : UInt32, setting : UInt32) : HRESULT
    @lpVtbl.value.set_stream_source_freq.unsafe_as(Proc(UInt32, UInt32, HRESULT)).call(streamnumber, setting)
  end
  def get_stream_source_freq(streamnumber : UInt32, psetting : UInt32*) : HRESULT
    @lpVtbl.value.get_stream_source_freq.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(streamnumber, psetting)
  end
  def set_indices(pindexdata : IDirect3DIndexBuffer9) : HRESULT
    @lpVtbl.value.set_indices.unsafe_as(Proc(IDirect3DIndexBuffer9, HRESULT)).call(pindexdata)
  end
  def get_indices(ppindexdata : IDirect3DIndexBuffer9*) : HRESULT
    @lpVtbl.value.get_indices.unsafe_as(Proc(IDirect3DIndexBuffer9*, HRESULT)).call(ppindexdata)
  end
  def create_pixel_shader(pfunction : UInt32*, ppshader : IDirect3DPixelShader9*) : HRESULT
    @lpVtbl.value.create_pixel_shader.unsafe_as(Proc(UInt32*, IDirect3DPixelShader9*, HRESULT)).call(pfunction, ppshader)
  end
  def set_pixel_shader(pshader : IDirect3DPixelShader9) : HRESULT
    @lpVtbl.value.set_pixel_shader.unsafe_as(Proc(IDirect3DPixelShader9, HRESULT)).call(pshader)
  end
  def get_pixel_shader(ppshader : IDirect3DPixelShader9*) : HRESULT
    @lpVtbl.value.get_pixel_shader.unsafe_as(Proc(IDirect3DPixelShader9*, HRESULT)).call(ppshader)
  end
  def set_pixel_shader_constant_f(startregister : UInt32, pconstantdata : Float32*, vector4fcount : UInt32) : HRESULT
    @lpVtbl.value.set_pixel_shader_constant_f.unsafe_as(Proc(UInt32, Float32*, UInt32, HRESULT)).call(startregister, pconstantdata, vector4fcount)
  end
  def get_pixel_shader_constant_f(startregister : UInt32, pconstantdata : Float32*, vector4fcount : UInt32) : HRESULT
    @lpVtbl.value.get_pixel_shader_constant_f.unsafe_as(Proc(UInt32, Float32*, UInt32, HRESULT)).call(startregister, pconstantdata, vector4fcount)
  end
  def set_pixel_shader_constant_i(startregister : UInt32, pconstantdata : Int32*, vector4icount : UInt32) : HRESULT
    @lpVtbl.value.set_pixel_shader_constant_i.unsafe_as(Proc(UInt32, Int32*, UInt32, HRESULT)).call(startregister, pconstantdata, vector4icount)
  end
  def get_pixel_shader_constant_i(startregister : UInt32, pconstantdata : Int32*, vector4icount : UInt32) : HRESULT
    @lpVtbl.value.get_pixel_shader_constant_i.unsafe_as(Proc(UInt32, Int32*, UInt32, HRESULT)).call(startregister, pconstantdata, vector4icount)
  end
  def set_pixel_shader_constant_b(startregister : UInt32, pconstantdata : LibC::BOOL*, boolcount : UInt32) : HRESULT
    @lpVtbl.value.set_pixel_shader_constant_b.unsafe_as(Proc(UInt32, LibC::BOOL*, UInt32, HRESULT)).call(startregister, pconstantdata, boolcount)
  end
  def get_pixel_shader_constant_b(startregister : UInt32, pconstantdata : LibC::BOOL*, boolcount : UInt32) : HRESULT
    @lpVtbl.value.get_pixel_shader_constant_b.unsafe_as(Proc(UInt32, LibC::BOOL*, UInt32, HRESULT)).call(startregister, pconstantdata, boolcount)
  end
  def draw_rect_patch(handle : UInt32, pnumsegs : Float32*, prectpatchinfo : D3DRECTPATCH_INFO*) : HRESULT
    @lpVtbl.value.draw_rect_patch.unsafe_as(Proc(UInt32, Float32*, D3DRECTPATCH_INFO*, HRESULT)).call(handle, pnumsegs, prectpatchinfo)
  end
  def draw_tri_patch(handle : UInt32, pnumsegs : Float32*, ptripatchinfo : D3DTRIPATCH_INFO*) : HRESULT
    @lpVtbl.value.draw_tri_patch.unsafe_as(Proc(UInt32, Float32*, D3DTRIPATCH_INFO*, HRESULT)).call(handle, pnumsegs, ptripatchinfo)
  end
  def delete_patch(handle : UInt32) : HRESULT
    @lpVtbl.value.delete_patch.unsafe_as(Proc(UInt32, HRESULT)).call(handle)
  end
  def create_query(type : D3DQUERYTYPE, ppquery : IDirect3DQuery9*) : HRESULT
    @lpVtbl.value.create_query.unsafe_as(Proc(D3DQUERYTYPE, IDirect3DQuery9*, HRESULT)).call(type, ppquery)
  end
end
struct LibWin32::IDirect3DStateBlock9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : IDirect3DDevice9*) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(IDirect3DDevice9*, HRESULT)).call(ppdevice)
  end
  def capture : HRESULT
    @lpVtbl.value.capture.unsafe_as(Proc(HRESULT)).call
  end
  def apply : HRESULT
    @lpVtbl.value.apply.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IDirect3DSwapChain9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def present(psourcerect : RECT*, pdestrect : RECT*, hdestwindowoverride : LibC::HANDLE, pdirtyregion : RGNDATA*, dwflags : UInt32) : HRESULT
    @lpVtbl.value.present.unsafe_as(Proc(RECT*, RECT*, LibC::HANDLE, RGNDATA*, UInt32, HRESULT)).call(psourcerect, pdestrect, hdestwindowoverride, pdirtyregion, dwflags)
  end
  def get_front_buffer_data(pdestsurface : IDirect3DSurface9) : HRESULT
    @lpVtbl.value.get_front_buffer_data.unsafe_as(Proc(IDirect3DSurface9, HRESULT)).call(pdestsurface)
  end
  def get_back_buffer(ibackbuffer : UInt32, type : D3DBACKBUFFER_TYPE, ppbackbuffer : IDirect3DSurface9*) : HRESULT
    @lpVtbl.value.get_back_buffer.unsafe_as(Proc(UInt32, D3DBACKBUFFER_TYPE, IDirect3DSurface9*, HRESULT)).call(ibackbuffer, type, ppbackbuffer)
  end
  def get_raster_status(prasterstatus : D3DRASTER_STATUS*) : HRESULT
    @lpVtbl.value.get_raster_status.unsafe_as(Proc(D3DRASTER_STATUS*, HRESULT)).call(prasterstatus)
  end
  def get_display_mode(pmode : D3DDISPLAYMODE*) : HRESULT
    @lpVtbl.value.get_display_mode.unsafe_as(Proc(D3DDISPLAYMODE*, HRESULT)).call(pmode)
  end
  def get_device(ppdevice : IDirect3DDevice9*) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(IDirect3DDevice9*, HRESULT)).call(ppdevice)
  end
  def get_present_parameters(ppresentationparameters : D3DPRESENT_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_present_parameters.unsafe_as(Proc(D3DPRESENT_PARAMETERS*, HRESULT)).call(ppresentationparameters)
  end
end
struct LibWin32::IDirect3DResource9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : IDirect3DDevice9*) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(IDirect3DDevice9*, HRESULT)).call(ppdevice)
  end
  def set_private_data(refguid : Guid*, pdata : Void*, sizeofdata : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, Void*, UInt32, UInt32, HRESULT)).call(refguid, pdata, sizeofdata, flags)
  end
  def get_private_data(refguid : Guid*, pdata : Void*, psizeofdata : UInt32*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, Void*, UInt32*, HRESULT)).call(refguid, pdata, psizeofdata)
  end
  def free_private_data(refguid : Guid*) : HRESULT
    @lpVtbl.value.free_private_data.unsafe_as(Proc(Guid*, HRESULT)).call(refguid)
  end
  def set_priority(prioritynew : UInt32) : UInt32
    @lpVtbl.value.set_priority.unsafe_as(Proc(UInt32, UInt32)).call(prioritynew)
  end
  def get_priority : UInt32
    @lpVtbl.value.get_priority.unsafe_as(Proc(UInt32)).call
  end
  def pre_load : Void
    @lpVtbl.value.pre_load.unsafe_as(Proc(Void)).call
  end
  def get_type : D3DRESOURCETYPE
    @lpVtbl.value.get_type.unsafe_as(Proc(D3DRESOURCETYPE)).call
  end
end
struct LibWin32::IDirect3DVertexDeclaration9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : IDirect3DDevice9*) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(IDirect3DDevice9*, HRESULT)).call(ppdevice)
  end
  def get_declaration(pelement : D3DVERTEXELEMENT9*, pnumelements : UInt32*) : HRESULT
    @lpVtbl.value.get_declaration.unsafe_as(Proc(D3DVERTEXELEMENT9*, UInt32*, HRESULT)).call(pelement, pnumelements)
  end
end
struct LibWin32::IDirect3DVertexShader9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : IDirect3DDevice9*) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(IDirect3DDevice9*, HRESULT)).call(ppdevice)
  end
  def get_function(param0 : Void*, psizeofdata : UInt32*) : HRESULT
    @lpVtbl.value.get_function.unsafe_as(Proc(Void*, UInt32*, HRESULT)).call(param0, psizeofdata)
  end
end
struct LibWin32::IDirect3DPixelShader9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : IDirect3DDevice9*) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(IDirect3DDevice9*, HRESULT)).call(ppdevice)
  end
  def get_function(param0 : Void*, psizeofdata : UInt32*) : HRESULT
    @lpVtbl.value.get_function.unsafe_as(Proc(Void*, UInt32*, HRESULT)).call(param0, psizeofdata)
  end
end
struct LibWin32::IDirect3DBaseTexture9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : IDirect3DDevice9*) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(IDirect3DDevice9*, HRESULT)).call(ppdevice)
  end
  def set_private_data(refguid : Guid*, pdata : Void*, sizeofdata : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, Void*, UInt32, UInt32, HRESULT)).call(refguid, pdata, sizeofdata, flags)
  end
  def get_private_data(refguid : Guid*, pdata : Void*, psizeofdata : UInt32*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, Void*, UInt32*, HRESULT)).call(refguid, pdata, psizeofdata)
  end
  def free_private_data(refguid : Guid*) : HRESULT
    @lpVtbl.value.free_private_data.unsafe_as(Proc(Guid*, HRESULT)).call(refguid)
  end
  def set_priority(prioritynew : UInt32) : UInt32
    @lpVtbl.value.set_priority.unsafe_as(Proc(UInt32, UInt32)).call(prioritynew)
  end
  def get_priority : UInt32
    @lpVtbl.value.get_priority.unsafe_as(Proc(UInt32)).call
  end
  def pre_load : Void
    @lpVtbl.value.pre_load.unsafe_as(Proc(Void)).call
  end
  def get_type : D3DRESOURCETYPE
    @lpVtbl.value.get_type.unsafe_as(Proc(D3DRESOURCETYPE)).call
  end
  def set_lod(lodnew : UInt32) : UInt32
    @lpVtbl.value.set_lod.unsafe_as(Proc(UInt32, UInt32)).call(lodnew)
  end
  def get_lod : UInt32
    @lpVtbl.value.get_lod.unsafe_as(Proc(UInt32)).call
  end
  def get_level_count : UInt32
    @lpVtbl.value.get_level_count.unsafe_as(Proc(UInt32)).call
  end
  def set_auto_gen_filter_type(filtertype : D3DTEXTUREFILTERTYPE) : HRESULT
    @lpVtbl.value.set_auto_gen_filter_type.unsafe_as(Proc(D3DTEXTUREFILTERTYPE, HRESULT)).call(filtertype)
  end
  def get_auto_gen_filter_type : D3DTEXTUREFILTERTYPE
    @lpVtbl.value.get_auto_gen_filter_type.unsafe_as(Proc(D3DTEXTUREFILTERTYPE)).call
  end
  def generate_mip_sub_levels : Void
    @lpVtbl.value.generate_mip_sub_levels.unsafe_as(Proc(Void)).call
  end
end
struct LibWin32::IDirect3DTexture9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : IDirect3DDevice9*) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(IDirect3DDevice9*, HRESULT)).call(ppdevice)
  end
  def set_private_data(refguid : Guid*, pdata : Void*, sizeofdata : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, Void*, UInt32, UInt32, HRESULT)).call(refguid, pdata, sizeofdata, flags)
  end
  def get_private_data(refguid : Guid*, pdata : Void*, psizeofdata : UInt32*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, Void*, UInt32*, HRESULT)).call(refguid, pdata, psizeofdata)
  end
  def free_private_data(refguid : Guid*) : HRESULT
    @lpVtbl.value.free_private_data.unsafe_as(Proc(Guid*, HRESULT)).call(refguid)
  end
  def set_priority(prioritynew : UInt32) : UInt32
    @lpVtbl.value.set_priority.unsafe_as(Proc(UInt32, UInt32)).call(prioritynew)
  end
  def get_priority : UInt32
    @lpVtbl.value.get_priority.unsafe_as(Proc(UInt32)).call
  end
  def pre_load : Void
    @lpVtbl.value.pre_load.unsafe_as(Proc(Void)).call
  end
  def get_type : D3DRESOURCETYPE
    @lpVtbl.value.get_type.unsafe_as(Proc(D3DRESOURCETYPE)).call
  end
  def set_lod(lodnew : UInt32) : UInt32
    @lpVtbl.value.set_lod.unsafe_as(Proc(UInt32, UInt32)).call(lodnew)
  end
  def get_lod : UInt32
    @lpVtbl.value.get_lod.unsafe_as(Proc(UInt32)).call
  end
  def get_level_count : UInt32
    @lpVtbl.value.get_level_count.unsafe_as(Proc(UInt32)).call
  end
  def set_auto_gen_filter_type(filtertype : D3DTEXTUREFILTERTYPE) : HRESULT
    @lpVtbl.value.set_auto_gen_filter_type.unsafe_as(Proc(D3DTEXTUREFILTERTYPE, HRESULT)).call(filtertype)
  end
  def get_auto_gen_filter_type : D3DTEXTUREFILTERTYPE
    @lpVtbl.value.get_auto_gen_filter_type.unsafe_as(Proc(D3DTEXTUREFILTERTYPE)).call
  end
  def generate_mip_sub_levels : Void
    @lpVtbl.value.generate_mip_sub_levels.unsafe_as(Proc(Void)).call
  end
  def get_level_desc(level : UInt32, pdesc : D3DSURFACE_DESC*) : HRESULT
    @lpVtbl.value.get_level_desc.unsafe_as(Proc(UInt32, D3DSURFACE_DESC*, HRESULT)).call(level, pdesc)
  end
  def get_surface_level(level : UInt32, ppsurfacelevel : IDirect3DSurface9*) : HRESULT
    @lpVtbl.value.get_surface_level.unsafe_as(Proc(UInt32, IDirect3DSurface9*, HRESULT)).call(level, ppsurfacelevel)
  end
  def lock_rect(level : UInt32, plockedrect : D3DLOCKED_RECT*, prect : RECT*, flags : UInt32) : HRESULT
    @lpVtbl.value.lock_rect.unsafe_as(Proc(UInt32, D3DLOCKED_RECT*, RECT*, UInt32, HRESULT)).call(level, plockedrect, prect, flags)
  end
  def unlock_rect(level : UInt32) : HRESULT
    @lpVtbl.value.unlock_rect.unsafe_as(Proc(UInt32, HRESULT)).call(level)
  end
  def add_dirty_rect(pdirtyrect : RECT*) : HRESULT
    @lpVtbl.value.add_dirty_rect.unsafe_as(Proc(RECT*, HRESULT)).call(pdirtyrect)
  end
end
struct LibWin32::IDirect3DVolumeTexture9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : IDirect3DDevice9*) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(IDirect3DDevice9*, HRESULT)).call(ppdevice)
  end
  def set_private_data(refguid : Guid*, pdata : Void*, sizeofdata : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, Void*, UInt32, UInt32, HRESULT)).call(refguid, pdata, sizeofdata, flags)
  end
  def get_private_data(refguid : Guid*, pdata : Void*, psizeofdata : UInt32*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, Void*, UInt32*, HRESULT)).call(refguid, pdata, psizeofdata)
  end
  def free_private_data(refguid : Guid*) : HRESULT
    @lpVtbl.value.free_private_data.unsafe_as(Proc(Guid*, HRESULT)).call(refguid)
  end
  def set_priority(prioritynew : UInt32) : UInt32
    @lpVtbl.value.set_priority.unsafe_as(Proc(UInt32, UInt32)).call(prioritynew)
  end
  def get_priority : UInt32
    @lpVtbl.value.get_priority.unsafe_as(Proc(UInt32)).call
  end
  def pre_load : Void
    @lpVtbl.value.pre_load.unsafe_as(Proc(Void)).call
  end
  def get_type : D3DRESOURCETYPE
    @lpVtbl.value.get_type.unsafe_as(Proc(D3DRESOURCETYPE)).call
  end
  def set_lod(lodnew : UInt32) : UInt32
    @lpVtbl.value.set_lod.unsafe_as(Proc(UInt32, UInt32)).call(lodnew)
  end
  def get_lod : UInt32
    @lpVtbl.value.get_lod.unsafe_as(Proc(UInt32)).call
  end
  def get_level_count : UInt32
    @lpVtbl.value.get_level_count.unsafe_as(Proc(UInt32)).call
  end
  def set_auto_gen_filter_type(filtertype : D3DTEXTUREFILTERTYPE) : HRESULT
    @lpVtbl.value.set_auto_gen_filter_type.unsafe_as(Proc(D3DTEXTUREFILTERTYPE, HRESULT)).call(filtertype)
  end
  def get_auto_gen_filter_type : D3DTEXTUREFILTERTYPE
    @lpVtbl.value.get_auto_gen_filter_type.unsafe_as(Proc(D3DTEXTUREFILTERTYPE)).call
  end
  def generate_mip_sub_levels : Void
    @lpVtbl.value.generate_mip_sub_levels.unsafe_as(Proc(Void)).call
  end
  def get_level_desc(level : UInt32, pdesc : D3DVOLUME_DESC*) : HRESULT
    @lpVtbl.value.get_level_desc.unsafe_as(Proc(UInt32, D3DVOLUME_DESC*, HRESULT)).call(level, pdesc)
  end
  def get_volume_level(level : UInt32, ppvolumelevel : IDirect3DVolume9*) : HRESULT
    @lpVtbl.value.get_volume_level.unsafe_as(Proc(UInt32, IDirect3DVolume9*, HRESULT)).call(level, ppvolumelevel)
  end
  def lock_box(level : UInt32, plockedvolume : D3DLOCKED_BOX*, pbox : D3DBOX*, flags : UInt32) : HRESULT
    @lpVtbl.value.lock_box.unsafe_as(Proc(UInt32, D3DLOCKED_BOX*, D3DBOX*, UInt32, HRESULT)).call(level, plockedvolume, pbox, flags)
  end
  def unlock_box(level : UInt32) : HRESULT
    @lpVtbl.value.unlock_box.unsafe_as(Proc(UInt32, HRESULT)).call(level)
  end
  def add_dirty_box(pdirtybox : D3DBOX*) : HRESULT
    @lpVtbl.value.add_dirty_box.unsafe_as(Proc(D3DBOX*, HRESULT)).call(pdirtybox)
  end
end
struct LibWin32::IDirect3DCubeTexture9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : IDirect3DDevice9*) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(IDirect3DDevice9*, HRESULT)).call(ppdevice)
  end
  def set_private_data(refguid : Guid*, pdata : Void*, sizeofdata : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, Void*, UInt32, UInt32, HRESULT)).call(refguid, pdata, sizeofdata, flags)
  end
  def get_private_data(refguid : Guid*, pdata : Void*, psizeofdata : UInt32*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, Void*, UInt32*, HRESULT)).call(refguid, pdata, psizeofdata)
  end
  def free_private_data(refguid : Guid*) : HRESULT
    @lpVtbl.value.free_private_data.unsafe_as(Proc(Guid*, HRESULT)).call(refguid)
  end
  def set_priority(prioritynew : UInt32) : UInt32
    @lpVtbl.value.set_priority.unsafe_as(Proc(UInt32, UInt32)).call(prioritynew)
  end
  def get_priority : UInt32
    @lpVtbl.value.get_priority.unsafe_as(Proc(UInt32)).call
  end
  def pre_load : Void
    @lpVtbl.value.pre_load.unsafe_as(Proc(Void)).call
  end
  def get_type : D3DRESOURCETYPE
    @lpVtbl.value.get_type.unsafe_as(Proc(D3DRESOURCETYPE)).call
  end
  def set_lod(lodnew : UInt32) : UInt32
    @lpVtbl.value.set_lod.unsafe_as(Proc(UInt32, UInt32)).call(lodnew)
  end
  def get_lod : UInt32
    @lpVtbl.value.get_lod.unsafe_as(Proc(UInt32)).call
  end
  def get_level_count : UInt32
    @lpVtbl.value.get_level_count.unsafe_as(Proc(UInt32)).call
  end
  def set_auto_gen_filter_type(filtertype : D3DTEXTUREFILTERTYPE) : HRESULT
    @lpVtbl.value.set_auto_gen_filter_type.unsafe_as(Proc(D3DTEXTUREFILTERTYPE, HRESULT)).call(filtertype)
  end
  def get_auto_gen_filter_type : D3DTEXTUREFILTERTYPE
    @lpVtbl.value.get_auto_gen_filter_type.unsafe_as(Proc(D3DTEXTUREFILTERTYPE)).call
  end
  def generate_mip_sub_levels : Void
    @lpVtbl.value.generate_mip_sub_levels.unsafe_as(Proc(Void)).call
  end
  def get_level_desc(level : UInt32, pdesc : D3DSURFACE_DESC*) : HRESULT
    @lpVtbl.value.get_level_desc.unsafe_as(Proc(UInt32, D3DSURFACE_DESC*, HRESULT)).call(level, pdesc)
  end
  def get_cube_map_surface(facetype : D3DCUBEMAP_FACES, level : UInt32, ppcubemapsurface : IDirect3DSurface9*) : HRESULT
    @lpVtbl.value.get_cube_map_surface.unsafe_as(Proc(D3DCUBEMAP_FACES, UInt32, IDirect3DSurface9*, HRESULT)).call(facetype, level, ppcubemapsurface)
  end
  def lock_rect(facetype : D3DCUBEMAP_FACES, level : UInt32, plockedrect : D3DLOCKED_RECT*, prect : RECT*, flags : UInt32) : HRESULT
    @lpVtbl.value.lock_rect.unsafe_as(Proc(D3DCUBEMAP_FACES, UInt32, D3DLOCKED_RECT*, RECT*, UInt32, HRESULT)).call(facetype, level, plockedrect, prect, flags)
  end
  def unlock_rect(facetype : D3DCUBEMAP_FACES, level : UInt32) : HRESULT
    @lpVtbl.value.unlock_rect.unsafe_as(Proc(D3DCUBEMAP_FACES, UInt32, HRESULT)).call(facetype, level)
  end
  def add_dirty_rect(facetype : D3DCUBEMAP_FACES, pdirtyrect : RECT*) : HRESULT
    @lpVtbl.value.add_dirty_rect.unsafe_as(Proc(D3DCUBEMAP_FACES, RECT*, HRESULT)).call(facetype, pdirtyrect)
  end
end
struct LibWin32::IDirect3DVertexBuffer9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : IDirect3DDevice9*) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(IDirect3DDevice9*, HRESULT)).call(ppdevice)
  end
  def set_private_data(refguid : Guid*, pdata : Void*, sizeofdata : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, Void*, UInt32, UInt32, HRESULT)).call(refguid, pdata, sizeofdata, flags)
  end
  def get_private_data(refguid : Guid*, pdata : Void*, psizeofdata : UInt32*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, Void*, UInt32*, HRESULT)).call(refguid, pdata, psizeofdata)
  end
  def free_private_data(refguid : Guid*) : HRESULT
    @lpVtbl.value.free_private_data.unsafe_as(Proc(Guid*, HRESULT)).call(refguid)
  end
  def set_priority(prioritynew : UInt32) : UInt32
    @lpVtbl.value.set_priority.unsafe_as(Proc(UInt32, UInt32)).call(prioritynew)
  end
  def get_priority : UInt32
    @lpVtbl.value.get_priority.unsafe_as(Proc(UInt32)).call
  end
  def pre_load : Void
    @lpVtbl.value.pre_load.unsafe_as(Proc(Void)).call
  end
  def get_type : D3DRESOURCETYPE
    @lpVtbl.value.get_type.unsafe_as(Proc(D3DRESOURCETYPE)).call
  end
  def lock(offsettolock : UInt32, sizetolock : UInt32, ppbdata : Void**, flags : UInt32) : HRESULT
    @lpVtbl.value.lock.unsafe_as(Proc(UInt32, UInt32, Void**, UInt32, HRESULT)).call(offsettolock, sizetolock, ppbdata, flags)
  end
  def unlock : HRESULT
    @lpVtbl.value.unlock.unsafe_as(Proc(HRESULT)).call
  end
  def get_desc(pdesc : D3DVERTEXBUFFER_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3DVERTEXBUFFER_DESC*, HRESULT)).call(pdesc)
  end
end
struct LibWin32::IDirect3DIndexBuffer9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : IDirect3DDevice9*) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(IDirect3DDevice9*, HRESULT)).call(ppdevice)
  end
  def set_private_data(refguid : Guid*, pdata : Void*, sizeofdata : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, Void*, UInt32, UInt32, HRESULT)).call(refguid, pdata, sizeofdata, flags)
  end
  def get_private_data(refguid : Guid*, pdata : Void*, psizeofdata : UInt32*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, Void*, UInt32*, HRESULT)).call(refguid, pdata, psizeofdata)
  end
  def free_private_data(refguid : Guid*) : HRESULT
    @lpVtbl.value.free_private_data.unsafe_as(Proc(Guid*, HRESULT)).call(refguid)
  end
  def set_priority(prioritynew : UInt32) : UInt32
    @lpVtbl.value.set_priority.unsafe_as(Proc(UInt32, UInt32)).call(prioritynew)
  end
  def get_priority : UInt32
    @lpVtbl.value.get_priority.unsafe_as(Proc(UInt32)).call
  end
  def pre_load : Void
    @lpVtbl.value.pre_load.unsafe_as(Proc(Void)).call
  end
  def get_type : D3DRESOURCETYPE
    @lpVtbl.value.get_type.unsafe_as(Proc(D3DRESOURCETYPE)).call
  end
  def lock(offsettolock : UInt32, sizetolock : UInt32, ppbdata : Void**, flags : UInt32) : HRESULT
    @lpVtbl.value.lock.unsafe_as(Proc(UInt32, UInt32, Void**, UInt32, HRESULT)).call(offsettolock, sizetolock, ppbdata, flags)
  end
  def unlock : HRESULT
    @lpVtbl.value.unlock.unsafe_as(Proc(HRESULT)).call
  end
  def get_desc(pdesc : D3DINDEXBUFFER_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3DINDEXBUFFER_DESC*, HRESULT)).call(pdesc)
  end
end
struct LibWin32::IDirect3DSurface9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : IDirect3DDevice9*) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(IDirect3DDevice9*, HRESULT)).call(ppdevice)
  end
  def set_private_data(refguid : Guid*, pdata : Void*, sizeofdata : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, Void*, UInt32, UInt32, HRESULT)).call(refguid, pdata, sizeofdata, flags)
  end
  def get_private_data(refguid : Guid*, pdata : Void*, psizeofdata : UInt32*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, Void*, UInt32*, HRESULT)).call(refguid, pdata, psizeofdata)
  end
  def free_private_data(refguid : Guid*) : HRESULT
    @lpVtbl.value.free_private_data.unsafe_as(Proc(Guid*, HRESULT)).call(refguid)
  end
  def set_priority(prioritynew : UInt32) : UInt32
    @lpVtbl.value.set_priority.unsafe_as(Proc(UInt32, UInt32)).call(prioritynew)
  end
  def get_priority : UInt32
    @lpVtbl.value.get_priority.unsafe_as(Proc(UInt32)).call
  end
  def pre_load : Void
    @lpVtbl.value.pre_load.unsafe_as(Proc(Void)).call
  end
  def get_type : D3DRESOURCETYPE
    @lpVtbl.value.get_type.unsafe_as(Proc(D3DRESOURCETYPE)).call
  end
  def get_container(riid : Guid*, ppcontainer : Void**) : HRESULT
    @lpVtbl.value.get_container.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppcontainer)
  end
  def get_desc(pdesc : D3DSURFACE_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3DSURFACE_DESC*, HRESULT)).call(pdesc)
  end
  def lock_rect(plockedrect : D3DLOCKED_RECT*, prect : RECT*, flags : UInt32) : HRESULT
    @lpVtbl.value.lock_rect.unsafe_as(Proc(D3DLOCKED_RECT*, RECT*, UInt32, HRESULT)).call(plockedrect, prect, flags)
  end
  def unlock_rect : HRESULT
    @lpVtbl.value.unlock_rect.unsafe_as(Proc(HRESULT)).call
  end
  def get_dc(phdc : HDC*) : HRESULT
    @lpVtbl.value.get_dc.unsafe_as(Proc(HDC*, HRESULT)).call(phdc)
  end
  def release_dc(hdc : HDC) : HRESULT
    @lpVtbl.value.release_dc.unsafe_as(Proc(HDC, HRESULT)).call(hdc)
  end
end
struct LibWin32::IDirect3DVolume9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : IDirect3DDevice9*) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(IDirect3DDevice9*, HRESULT)).call(ppdevice)
  end
  def set_private_data(refguid : Guid*, pdata : Void*, sizeofdata : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, Void*, UInt32, UInt32, HRESULT)).call(refguid, pdata, sizeofdata, flags)
  end
  def get_private_data(refguid : Guid*, pdata : Void*, psizeofdata : UInt32*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, Void*, UInt32*, HRESULT)).call(refguid, pdata, psizeofdata)
  end
  def free_private_data(refguid : Guid*) : HRESULT
    @lpVtbl.value.free_private_data.unsafe_as(Proc(Guid*, HRESULT)).call(refguid)
  end
  def get_container(riid : Guid*, ppcontainer : Void**) : HRESULT
    @lpVtbl.value.get_container.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppcontainer)
  end
  def get_desc(pdesc : D3DVOLUME_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3DVOLUME_DESC*, HRESULT)).call(pdesc)
  end
  def lock_box(plockedvolume : D3DLOCKED_BOX*, pbox : D3DBOX*, flags : UInt32) : HRESULT
    @lpVtbl.value.lock_box.unsafe_as(Proc(D3DLOCKED_BOX*, D3DBOX*, UInt32, HRESULT)).call(plockedvolume, pbox, flags)
  end
  def unlock_box : HRESULT
    @lpVtbl.value.unlock_box.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IDirect3DQuery9
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : IDirect3DDevice9*) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(IDirect3DDevice9*, HRESULT)).call(ppdevice)
  end
  def get_type : D3DQUERYTYPE
    @lpVtbl.value.get_type.unsafe_as(Proc(D3DQUERYTYPE)).call
  end
  def get_data_size : UInt32
    @lpVtbl.value.get_data_size.unsafe_as(Proc(UInt32)).call
  end
  def issue(dwissueflags : UInt32) : HRESULT
    @lpVtbl.value.issue.unsafe_as(Proc(UInt32, HRESULT)).call(dwissueflags)
  end
  def get_data(pdata : Void*, dwsize : UInt32, dwgetdataflags : UInt32) : HRESULT
    @lpVtbl.value.get_data.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, dwsize, dwgetdataflags)
  end
end
struct LibWin32::IDirect3D9Ex
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def register_software_device(pinitializefunction : Void*) : HRESULT
    @lpVtbl.value.register_software_device.unsafe_as(Proc(Void*, HRESULT)).call(pinitializefunction)
  end
  def get_adapter_count : UInt32
    @lpVtbl.value.get_adapter_count.unsafe_as(Proc(UInt32)).call
  end
  def get_adapter_identifier(adapter : UInt32, flags : UInt32, pidentifier : D3DADAPTER_IDENTIFIER9*) : HRESULT
    @lpVtbl.value.get_adapter_identifier.unsafe_as(Proc(UInt32, UInt32, D3DADAPTER_IDENTIFIER9*, HRESULT)).call(adapter, flags, pidentifier)
  end
  def get_adapter_mode_count(adapter : UInt32, format : D3DFORMAT) : UInt32
    @lpVtbl.value.get_adapter_mode_count.unsafe_as(Proc(UInt32, D3DFORMAT, UInt32)).call(adapter, format)
  end
  def enum_adapter_modes(adapter : UInt32, format : D3DFORMAT, mode : UInt32, pmode : D3DDISPLAYMODE*) : HRESULT
    @lpVtbl.value.enum_adapter_modes.unsafe_as(Proc(UInt32, D3DFORMAT, UInt32, D3DDISPLAYMODE*, HRESULT)).call(adapter, format, mode, pmode)
  end
  def get_adapter_display_mode(adapter : UInt32, pmode : D3DDISPLAYMODE*) : HRESULT
    @lpVtbl.value.get_adapter_display_mode.unsafe_as(Proc(UInt32, D3DDISPLAYMODE*, HRESULT)).call(adapter, pmode)
  end
  def check_device_type(adapter : UInt32, devtype : D3DDEVTYPE, adapterformat : D3DFORMAT, backbufferformat : D3DFORMAT, bwindowed : LibC::BOOL) : HRESULT
    @lpVtbl.value.check_device_type.unsafe_as(Proc(UInt32, D3DDEVTYPE, D3DFORMAT, D3DFORMAT, LibC::BOOL, HRESULT)).call(adapter, devtype, adapterformat, backbufferformat, bwindowed)
  end
  def check_device_format(adapter : UInt32, devicetype : D3DDEVTYPE, adapterformat : D3DFORMAT, usage : UInt32, rtype : D3DRESOURCETYPE, checkformat : D3DFORMAT) : HRESULT
    @lpVtbl.value.check_device_format.unsafe_as(Proc(UInt32, D3DDEVTYPE, D3DFORMAT, UInt32, D3DRESOURCETYPE, D3DFORMAT, HRESULT)).call(adapter, devicetype, adapterformat, usage, rtype, checkformat)
  end
  def check_device_multi_sample_type(adapter : UInt32, devicetype : D3DDEVTYPE, surfaceformat : D3DFORMAT, windowed : LibC::BOOL, multisampletype : D3DMULTISAMPLE_TYPE, pqualitylevels : UInt32*) : HRESULT
    @lpVtbl.value.check_device_multi_sample_type.unsafe_as(Proc(UInt32, D3DDEVTYPE, D3DFORMAT, LibC::BOOL, D3DMULTISAMPLE_TYPE, UInt32*, HRESULT)).call(adapter, devicetype, surfaceformat, windowed, multisampletype, pqualitylevels)
  end
  def check_depth_stencil_match(adapter : UInt32, devicetype : D3DDEVTYPE, adapterformat : D3DFORMAT, rendertargetformat : D3DFORMAT, depthstencilformat : D3DFORMAT) : HRESULT
    @lpVtbl.value.check_depth_stencil_match.unsafe_as(Proc(UInt32, D3DDEVTYPE, D3DFORMAT, D3DFORMAT, D3DFORMAT, HRESULT)).call(adapter, devicetype, adapterformat, rendertargetformat, depthstencilformat)
  end
  def check_device_format_conversion(adapter : UInt32, devicetype : D3DDEVTYPE, sourceformat : D3DFORMAT, targetformat : D3DFORMAT) : HRESULT
    @lpVtbl.value.check_device_format_conversion.unsafe_as(Proc(UInt32, D3DDEVTYPE, D3DFORMAT, D3DFORMAT, HRESULT)).call(adapter, devicetype, sourceformat, targetformat)
  end
  def get_device_caps(adapter : UInt32, devicetype : D3DDEVTYPE, pcaps : D3DCAPS9*) : HRESULT
    @lpVtbl.value.get_device_caps.unsafe_as(Proc(UInt32, D3DDEVTYPE, D3DCAPS9*, HRESULT)).call(adapter, devicetype, pcaps)
  end
  def get_adapter_monitor(adapter : UInt32) : HMONITOR
    @lpVtbl.value.get_adapter_monitor.unsafe_as(Proc(UInt32, HMONITOR)).call(adapter)
  end
  def create_device(adapter : UInt32, devicetype : D3DDEVTYPE, hfocuswindow : LibC::HANDLE, behaviorflags : UInt32, ppresentationparameters : D3DPRESENT_PARAMETERS*, ppreturneddeviceinterface : IDirect3DDevice9*) : HRESULT
    @lpVtbl.value.create_device.unsafe_as(Proc(UInt32, D3DDEVTYPE, LibC::HANDLE, UInt32, D3DPRESENT_PARAMETERS*, IDirect3DDevice9*, HRESULT)).call(adapter, devicetype, hfocuswindow, behaviorflags, ppresentationparameters, ppreturneddeviceinterface)
  end
  def get_adapter_mode_count_ex(adapter : UInt32, pfilter : D3DDISPLAYMODEFILTER*) : UInt32
    @lpVtbl.value.get_adapter_mode_count_ex.unsafe_as(Proc(UInt32, D3DDISPLAYMODEFILTER*, UInt32)).call(adapter, pfilter)
  end
  def enum_adapter_modes_ex(adapter : UInt32, pfilter : D3DDISPLAYMODEFILTER*, mode : UInt32, pmode : D3DDISPLAYMODEEX*) : HRESULT
    @lpVtbl.value.enum_adapter_modes_ex.unsafe_as(Proc(UInt32, D3DDISPLAYMODEFILTER*, UInt32, D3DDISPLAYMODEEX*, HRESULT)).call(adapter, pfilter, mode, pmode)
  end
  def get_adapter_display_mode_ex(adapter : UInt32, pmode : D3DDISPLAYMODEEX*, protation : D3DDISPLAYROTATION*) : HRESULT
    @lpVtbl.value.get_adapter_display_mode_ex.unsafe_as(Proc(UInt32, D3DDISPLAYMODEEX*, D3DDISPLAYROTATION*, HRESULT)).call(adapter, pmode, protation)
  end
  def create_device_ex(adapter : UInt32, devicetype : D3DDEVTYPE, hfocuswindow : LibC::HANDLE, behaviorflags : UInt32, ppresentationparameters : D3DPRESENT_PARAMETERS*, pfullscreendisplaymode : D3DDISPLAYMODEEX*, ppreturneddeviceinterface : IDirect3DDevice9Ex*) : HRESULT
    @lpVtbl.value.create_device_ex.unsafe_as(Proc(UInt32, D3DDEVTYPE, LibC::HANDLE, UInt32, D3DPRESENT_PARAMETERS*, D3DDISPLAYMODEEX*, IDirect3DDevice9Ex*, HRESULT)).call(adapter, devicetype, hfocuswindow, behaviorflags, ppresentationparameters, pfullscreendisplaymode, ppreturneddeviceinterface)
  end
  def get_adapter_luid(adapter : UInt32, pluid : LUID*) : HRESULT
    @lpVtbl.value.get_adapter_luid.unsafe_as(Proc(UInt32, LUID*, HRESULT)).call(adapter, pluid)
  end
end
struct LibWin32::IDirect3DDevice9Ex
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def test_cooperative_level : HRESULT
    @lpVtbl.value.test_cooperative_level.unsafe_as(Proc(HRESULT)).call
  end
  def get_available_texture_mem : UInt32
    @lpVtbl.value.get_available_texture_mem.unsafe_as(Proc(UInt32)).call
  end
  def evict_managed_resources : HRESULT
    @lpVtbl.value.evict_managed_resources.unsafe_as(Proc(HRESULT)).call
  end
  def get_direct3_d(ppd3d9 : IDirect3D9*) : HRESULT
    @lpVtbl.value.get_direct3_d.unsafe_as(Proc(IDirect3D9*, HRESULT)).call(ppd3d9)
  end
  def get_device_caps(pcaps : D3DCAPS9*) : HRESULT
    @lpVtbl.value.get_device_caps.unsafe_as(Proc(D3DCAPS9*, HRESULT)).call(pcaps)
  end
  def get_display_mode(iswapchain : UInt32, pmode : D3DDISPLAYMODE*) : HRESULT
    @lpVtbl.value.get_display_mode.unsafe_as(Proc(UInt32, D3DDISPLAYMODE*, HRESULT)).call(iswapchain, pmode)
  end
  def get_creation_parameters(pparameters : D3DDEVICE_CREATION_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_creation_parameters.unsafe_as(Proc(D3DDEVICE_CREATION_PARAMETERS*, HRESULT)).call(pparameters)
  end
  def set_cursor_properties(xhotspot : UInt32, yhotspot : UInt32, pcursorbitmap : IDirect3DSurface9) : HRESULT
    @lpVtbl.value.set_cursor_properties.unsafe_as(Proc(UInt32, UInt32, IDirect3DSurface9, HRESULT)).call(xhotspot, yhotspot, pcursorbitmap)
  end
  def set_cursor_position(x : Int32, y : Int32, flags : UInt32) : Void
    @lpVtbl.value.set_cursor_position.unsafe_as(Proc(Int32, Int32, UInt32, Void)).call(x, y, flags)
  end
  def show_cursor(bshow : LibC::BOOL) : LibC::BOOL
    @lpVtbl.value.show_cursor.unsafe_as(Proc(LibC::BOOL, LibC::BOOL)).call(bshow)
  end
  def create_additional_swap_chain(ppresentationparameters : D3DPRESENT_PARAMETERS*, pswapchain : IDirect3DSwapChain9*) : HRESULT
    @lpVtbl.value.create_additional_swap_chain.unsafe_as(Proc(D3DPRESENT_PARAMETERS*, IDirect3DSwapChain9*, HRESULT)).call(ppresentationparameters, pswapchain)
  end
  def get_swap_chain(iswapchain : UInt32, pswapchain : IDirect3DSwapChain9*) : HRESULT
    @lpVtbl.value.get_swap_chain.unsafe_as(Proc(UInt32, IDirect3DSwapChain9*, HRESULT)).call(iswapchain, pswapchain)
  end
  def get_number_of_swap_chains : UInt32
    @lpVtbl.value.get_number_of_swap_chains.unsafe_as(Proc(UInt32)).call
  end
  def reset(ppresentationparameters : D3DPRESENT_PARAMETERS*) : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(D3DPRESENT_PARAMETERS*, HRESULT)).call(ppresentationparameters)
  end
  def present(psourcerect : RECT*, pdestrect : RECT*, hdestwindowoverride : LibC::HANDLE, pdirtyregion : RGNDATA*) : HRESULT
    @lpVtbl.value.present.unsafe_as(Proc(RECT*, RECT*, LibC::HANDLE, RGNDATA*, HRESULT)).call(psourcerect, pdestrect, hdestwindowoverride, pdirtyregion)
  end
  def get_back_buffer(iswapchain : UInt32, ibackbuffer : UInt32, type : D3DBACKBUFFER_TYPE, ppbackbuffer : IDirect3DSurface9*) : HRESULT
    @lpVtbl.value.get_back_buffer.unsafe_as(Proc(UInt32, UInt32, D3DBACKBUFFER_TYPE, IDirect3DSurface9*, HRESULT)).call(iswapchain, ibackbuffer, type, ppbackbuffer)
  end
  def get_raster_status(iswapchain : UInt32, prasterstatus : D3DRASTER_STATUS*) : HRESULT
    @lpVtbl.value.get_raster_status.unsafe_as(Proc(UInt32, D3DRASTER_STATUS*, HRESULT)).call(iswapchain, prasterstatus)
  end
  def set_dialog_box_mode(benabledialogs : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_dialog_box_mode.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(benabledialogs)
  end
  def set_gamma_ramp(iswapchain : UInt32, flags : UInt32, pramp : D3DGAMMARAMP*) : Void
    @lpVtbl.value.set_gamma_ramp.unsafe_as(Proc(UInt32, UInt32, D3DGAMMARAMP*, Void)).call(iswapchain, flags, pramp)
  end
  def get_gamma_ramp(iswapchain : UInt32, pramp : D3DGAMMARAMP*) : Void
    @lpVtbl.value.get_gamma_ramp.unsafe_as(Proc(UInt32, D3DGAMMARAMP*, Void)).call(iswapchain, pramp)
  end
  def create_texture(width : UInt32, height : UInt32, levels : UInt32, usage : UInt32, format : D3DFORMAT, pool : D3DPOOL, pptexture : IDirect3DTexture9*, psharedhandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_texture.unsafe_as(Proc(UInt32, UInt32, UInt32, UInt32, D3DFORMAT, D3DPOOL, IDirect3DTexture9*, LibC::HANDLE*, HRESULT)).call(width, height, levels, usage, format, pool, pptexture, psharedhandle)
  end
  def create_volume_texture(width : UInt32, height : UInt32, depth : UInt32, levels : UInt32, usage : UInt32, format : D3DFORMAT, pool : D3DPOOL, ppvolumetexture : IDirect3DVolumeTexture9*, psharedhandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_volume_texture.unsafe_as(Proc(UInt32, UInt32, UInt32, UInt32, UInt32, D3DFORMAT, D3DPOOL, IDirect3DVolumeTexture9*, LibC::HANDLE*, HRESULT)).call(width, height, depth, levels, usage, format, pool, ppvolumetexture, psharedhandle)
  end
  def create_cube_texture(edgelength : UInt32, levels : UInt32, usage : UInt32, format : D3DFORMAT, pool : D3DPOOL, ppcubetexture : IDirect3DCubeTexture9*, psharedhandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_cube_texture.unsafe_as(Proc(UInt32, UInt32, UInt32, D3DFORMAT, D3DPOOL, IDirect3DCubeTexture9*, LibC::HANDLE*, HRESULT)).call(edgelength, levels, usage, format, pool, ppcubetexture, psharedhandle)
  end
  def create_vertex_buffer(length : UInt32, usage : UInt32, fvf : UInt32, pool : D3DPOOL, ppvertexbuffer : IDirect3DVertexBuffer9*, psharedhandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_vertex_buffer.unsafe_as(Proc(UInt32, UInt32, UInt32, D3DPOOL, IDirect3DVertexBuffer9*, LibC::HANDLE*, HRESULT)).call(length, usage, fvf, pool, ppvertexbuffer, psharedhandle)
  end
  def create_index_buffer(length : UInt32, usage : UInt32, format : D3DFORMAT, pool : D3DPOOL, ppindexbuffer : IDirect3DIndexBuffer9*, psharedhandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_index_buffer.unsafe_as(Proc(UInt32, UInt32, D3DFORMAT, D3DPOOL, IDirect3DIndexBuffer9*, LibC::HANDLE*, HRESULT)).call(length, usage, format, pool, ppindexbuffer, psharedhandle)
  end
  def create_render_target(width : UInt32, height : UInt32, format : D3DFORMAT, multisample : D3DMULTISAMPLE_TYPE, multisamplequality : UInt32, lockable : LibC::BOOL, ppsurface : IDirect3DSurface9*, psharedhandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_render_target.unsafe_as(Proc(UInt32, UInt32, D3DFORMAT, D3DMULTISAMPLE_TYPE, UInt32, LibC::BOOL, IDirect3DSurface9*, LibC::HANDLE*, HRESULT)).call(width, height, format, multisample, multisamplequality, lockable, ppsurface, psharedhandle)
  end
  def create_depth_stencil_surface(width : UInt32, height : UInt32, format : D3DFORMAT, multisample : D3DMULTISAMPLE_TYPE, multisamplequality : UInt32, discard : LibC::BOOL, ppsurface : IDirect3DSurface9*, psharedhandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_depth_stencil_surface.unsafe_as(Proc(UInt32, UInt32, D3DFORMAT, D3DMULTISAMPLE_TYPE, UInt32, LibC::BOOL, IDirect3DSurface9*, LibC::HANDLE*, HRESULT)).call(width, height, format, multisample, multisamplequality, discard, ppsurface, psharedhandle)
  end
  def update_surface(psourcesurface : IDirect3DSurface9, psourcerect : RECT*, pdestinationsurface : IDirect3DSurface9, pdestpoint : POINT*) : HRESULT
    @lpVtbl.value.update_surface.unsafe_as(Proc(IDirect3DSurface9, RECT*, IDirect3DSurface9, POINT*, HRESULT)).call(psourcesurface, psourcerect, pdestinationsurface, pdestpoint)
  end
  def update_texture(psourcetexture : IDirect3DBaseTexture9, pdestinationtexture : IDirect3DBaseTexture9) : HRESULT
    @lpVtbl.value.update_texture.unsafe_as(Proc(IDirect3DBaseTexture9, IDirect3DBaseTexture9, HRESULT)).call(psourcetexture, pdestinationtexture)
  end
  def get_render_target_data(prendertarget : IDirect3DSurface9, pdestsurface : IDirect3DSurface9) : HRESULT
    @lpVtbl.value.get_render_target_data.unsafe_as(Proc(IDirect3DSurface9, IDirect3DSurface9, HRESULT)).call(prendertarget, pdestsurface)
  end
  def get_front_buffer_data(iswapchain : UInt32, pdestsurface : IDirect3DSurface9) : HRESULT
    @lpVtbl.value.get_front_buffer_data.unsafe_as(Proc(UInt32, IDirect3DSurface9, HRESULT)).call(iswapchain, pdestsurface)
  end
  def stretch_rect(psourcesurface : IDirect3DSurface9, psourcerect : RECT*, pdestsurface : IDirect3DSurface9, pdestrect : RECT*, filter : D3DTEXTUREFILTERTYPE) : HRESULT
    @lpVtbl.value.stretch_rect.unsafe_as(Proc(IDirect3DSurface9, RECT*, IDirect3DSurface9, RECT*, D3DTEXTUREFILTERTYPE, HRESULT)).call(psourcesurface, psourcerect, pdestsurface, pdestrect, filter)
  end
  def color_fill(psurface : IDirect3DSurface9, prect : RECT*, color : UInt32) : HRESULT
    @lpVtbl.value.color_fill.unsafe_as(Proc(IDirect3DSurface9, RECT*, UInt32, HRESULT)).call(psurface, prect, color)
  end
  def create_offscreen_plain_surface(width : UInt32, height : UInt32, format : D3DFORMAT, pool : D3DPOOL, ppsurface : IDirect3DSurface9*, psharedhandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_offscreen_plain_surface.unsafe_as(Proc(UInt32, UInt32, D3DFORMAT, D3DPOOL, IDirect3DSurface9*, LibC::HANDLE*, HRESULT)).call(width, height, format, pool, ppsurface, psharedhandle)
  end
  def set_render_target(rendertargetindex : UInt32, prendertarget : IDirect3DSurface9) : HRESULT
    @lpVtbl.value.set_render_target.unsafe_as(Proc(UInt32, IDirect3DSurface9, HRESULT)).call(rendertargetindex, prendertarget)
  end
  def get_render_target(rendertargetindex : UInt32, pprendertarget : IDirect3DSurface9*) : HRESULT
    @lpVtbl.value.get_render_target.unsafe_as(Proc(UInt32, IDirect3DSurface9*, HRESULT)).call(rendertargetindex, pprendertarget)
  end
  def set_depth_stencil_surface(pnewzstencil : IDirect3DSurface9) : HRESULT
    @lpVtbl.value.set_depth_stencil_surface.unsafe_as(Proc(IDirect3DSurface9, HRESULT)).call(pnewzstencil)
  end
  def get_depth_stencil_surface(ppzstencilsurface : IDirect3DSurface9*) : HRESULT
    @lpVtbl.value.get_depth_stencil_surface.unsafe_as(Proc(IDirect3DSurface9*, HRESULT)).call(ppzstencilsurface)
  end
  def begin_scene : HRESULT
    @lpVtbl.value.begin_scene.unsafe_as(Proc(HRESULT)).call
  end
  def end_scene : HRESULT
    @lpVtbl.value.end_scene.unsafe_as(Proc(HRESULT)).call
  end
  def clear(count : UInt32, prects : D3DRECT*, flags : UInt32, color : UInt32, z : Float32, stencil : UInt32) : HRESULT
    @lpVtbl.value.clear.unsafe_as(Proc(UInt32, D3DRECT*, UInt32, UInt32, Float32, UInt32, HRESULT)).call(count, prects, flags, color, z, stencil)
  end
  def set_transform(state : D3DTRANSFORMSTATETYPE, pmatrix : D3DMATRIX*) : HRESULT
    @lpVtbl.value.set_transform.unsafe_as(Proc(D3DTRANSFORMSTATETYPE, D3DMATRIX*, HRESULT)).call(state, pmatrix)
  end
  def get_transform(state : D3DTRANSFORMSTATETYPE, pmatrix : D3DMATRIX*) : HRESULT
    @lpVtbl.value.get_transform.unsafe_as(Proc(D3DTRANSFORMSTATETYPE, D3DMATRIX*, HRESULT)).call(state, pmatrix)
  end
  def multiply_transform(param0 : D3DTRANSFORMSTATETYPE, param1 : D3DMATRIX*) : HRESULT
    @lpVtbl.value.multiply_transform.unsafe_as(Proc(D3DTRANSFORMSTATETYPE, D3DMATRIX*, HRESULT)).call(param0, param1)
  end
  def set_viewport(pviewport : D3DVIEWPORT9*) : HRESULT
    @lpVtbl.value.set_viewport.unsafe_as(Proc(D3DVIEWPORT9*, HRESULT)).call(pviewport)
  end
  def get_viewport(pviewport : D3DVIEWPORT9*) : HRESULT
    @lpVtbl.value.get_viewport.unsafe_as(Proc(D3DVIEWPORT9*, HRESULT)).call(pviewport)
  end
  def set_material(pmaterial : D3DMATERIAL9*) : HRESULT
    @lpVtbl.value.set_material.unsafe_as(Proc(D3DMATERIAL9*, HRESULT)).call(pmaterial)
  end
  def get_material(pmaterial : D3DMATERIAL9*) : HRESULT
    @lpVtbl.value.get_material.unsafe_as(Proc(D3DMATERIAL9*, HRESULT)).call(pmaterial)
  end
  def set_light(index : UInt32, param1 : D3DLIGHT9*) : HRESULT
    @lpVtbl.value.set_light.unsafe_as(Proc(UInt32, D3DLIGHT9*, HRESULT)).call(index, param1)
  end
  def get_light(index : UInt32, param1 : D3DLIGHT9*) : HRESULT
    @lpVtbl.value.get_light.unsafe_as(Proc(UInt32, D3DLIGHT9*, HRESULT)).call(index, param1)
  end
  def light_enable(index : UInt32, enable : LibC::BOOL) : HRESULT
    @lpVtbl.value.light_enable.unsafe_as(Proc(UInt32, LibC::BOOL, HRESULT)).call(index, enable)
  end
  def get_light_enable(index : UInt32, penable : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_light_enable.unsafe_as(Proc(UInt32, LibC::BOOL*, HRESULT)).call(index, penable)
  end
  def set_clip_plane(index : UInt32, pplane : Float32*) : HRESULT
    @lpVtbl.value.set_clip_plane.unsafe_as(Proc(UInt32, Float32*, HRESULT)).call(index, pplane)
  end
  def get_clip_plane(index : UInt32, pplane : Float32*) : HRESULT
    @lpVtbl.value.get_clip_plane.unsafe_as(Proc(UInt32, Float32*, HRESULT)).call(index, pplane)
  end
  def set_render_state(state : D3DRENDERSTATETYPE, value : UInt32) : HRESULT
    @lpVtbl.value.set_render_state.unsafe_as(Proc(D3DRENDERSTATETYPE, UInt32, HRESULT)).call(state, value)
  end
  def get_render_state(state : D3DRENDERSTATETYPE, pvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_render_state.unsafe_as(Proc(D3DRENDERSTATETYPE, UInt32*, HRESULT)).call(state, pvalue)
  end
  def create_state_block(type : D3DSTATEBLOCKTYPE, ppsb : IDirect3DStateBlock9*) : HRESULT
    @lpVtbl.value.create_state_block.unsafe_as(Proc(D3DSTATEBLOCKTYPE, IDirect3DStateBlock9*, HRESULT)).call(type, ppsb)
  end
  def begin_state_block : HRESULT
    @lpVtbl.value.begin_state_block.unsafe_as(Proc(HRESULT)).call
  end
  def end_state_block(ppsb : IDirect3DStateBlock9*) : HRESULT
    @lpVtbl.value.end_state_block.unsafe_as(Proc(IDirect3DStateBlock9*, HRESULT)).call(ppsb)
  end
  def set_clip_status(pclipstatus : D3DCLIPSTATUS9*) : HRESULT
    @lpVtbl.value.set_clip_status.unsafe_as(Proc(D3DCLIPSTATUS9*, HRESULT)).call(pclipstatus)
  end
  def get_clip_status(pclipstatus : D3DCLIPSTATUS9*) : HRESULT
    @lpVtbl.value.get_clip_status.unsafe_as(Proc(D3DCLIPSTATUS9*, HRESULT)).call(pclipstatus)
  end
  def get_texture(stage : UInt32, pptexture : IDirect3DBaseTexture9*) : HRESULT
    @lpVtbl.value.get_texture.unsafe_as(Proc(UInt32, IDirect3DBaseTexture9*, HRESULT)).call(stage, pptexture)
  end
  def set_texture(stage : UInt32, ptexture : IDirect3DBaseTexture9) : HRESULT
    @lpVtbl.value.set_texture.unsafe_as(Proc(UInt32, IDirect3DBaseTexture9, HRESULT)).call(stage, ptexture)
  end
  def get_texture_stage_state(stage : UInt32, type : D3DTEXTURESTAGESTATETYPE, pvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_texture_stage_state.unsafe_as(Proc(UInt32, D3DTEXTURESTAGESTATETYPE, UInt32*, HRESULT)).call(stage, type, pvalue)
  end
  def set_texture_stage_state(stage : UInt32, type : D3DTEXTURESTAGESTATETYPE, value : UInt32) : HRESULT
    @lpVtbl.value.set_texture_stage_state.unsafe_as(Proc(UInt32, D3DTEXTURESTAGESTATETYPE, UInt32, HRESULT)).call(stage, type, value)
  end
  def get_sampler_state(sampler : UInt32, type : D3DSAMPLERSTATETYPE, pvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_sampler_state.unsafe_as(Proc(UInt32, D3DSAMPLERSTATETYPE, UInt32*, HRESULT)).call(sampler, type, pvalue)
  end
  def set_sampler_state(sampler : UInt32, type : D3DSAMPLERSTATETYPE, value : UInt32) : HRESULT
    @lpVtbl.value.set_sampler_state.unsafe_as(Proc(UInt32, D3DSAMPLERSTATETYPE, UInt32, HRESULT)).call(sampler, type, value)
  end
  def validate_device(pnumpasses : UInt32*) : HRESULT
    @lpVtbl.value.validate_device.unsafe_as(Proc(UInt32*, HRESULT)).call(pnumpasses)
  end
  def set_palette_entries(palettenumber : UInt32, pentries : PALETTEENTRY*) : HRESULT
    @lpVtbl.value.set_palette_entries.unsafe_as(Proc(UInt32, PALETTEENTRY*, HRESULT)).call(palettenumber, pentries)
  end
  def get_palette_entries(palettenumber : UInt32, pentries : PALETTEENTRY*) : HRESULT
    @lpVtbl.value.get_palette_entries.unsafe_as(Proc(UInt32, PALETTEENTRY*, HRESULT)).call(palettenumber, pentries)
  end
  def set_current_texture_palette(palettenumber : UInt32) : HRESULT
    @lpVtbl.value.set_current_texture_palette.unsafe_as(Proc(UInt32, HRESULT)).call(palettenumber)
  end
  def get_current_texture_palette(palettenumber : UInt32*) : HRESULT
    @lpVtbl.value.get_current_texture_palette.unsafe_as(Proc(UInt32*, HRESULT)).call(palettenumber)
  end
  def set_scissor_rect(prect : RECT*) : HRESULT
    @lpVtbl.value.set_scissor_rect.unsafe_as(Proc(RECT*, HRESULT)).call(prect)
  end
  def get_scissor_rect(prect : RECT*) : HRESULT
    @lpVtbl.value.get_scissor_rect.unsafe_as(Proc(RECT*, HRESULT)).call(prect)
  end
  def set_software_vertex_processing(bsoftware : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_software_vertex_processing.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(bsoftware)
  end
  def get_software_vertex_processing : LibC::BOOL
    @lpVtbl.value.get_software_vertex_processing.unsafe_as(Proc(LibC::BOOL)).call
  end
  def set_n_patch_mode(nsegments : Float32) : HRESULT
    @lpVtbl.value.set_n_patch_mode.unsafe_as(Proc(Float32, HRESULT)).call(nsegments)
  end
  def get_n_patch_mode : Float32
    @lpVtbl.value.get_n_patch_mode.unsafe_as(Proc(Float32)).call
  end
  def draw_primitive(primitivetype : D3DPRIMITIVETYPE, startvertex : UInt32, primitivecount : UInt32) : HRESULT
    @lpVtbl.value.draw_primitive.unsafe_as(Proc(D3DPRIMITIVETYPE, UInt32, UInt32, HRESULT)).call(primitivetype, startvertex, primitivecount)
  end
  def draw_indexed_primitive(param0 : D3DPRIMITIVETYPE, basevertexindex : Int32, minvertexindex : UInt32, numvertices : UInt32, startindex : UInt32, primcount : UInt32) : HRESULT
    @lpVtbl.value.draw_indexed_primitive.unsafe_as(Proc(D3DPRIMITIVETYPE, Int32, UInt32, UInt32, UInt32, UInt32, HRESULT)).call(param0, basevertexindex, minvertexindex, numvertices, startindex, primcount)
  end
  def draw_primitive_up(primitivetype : D3DPRIMITIVETYPE, primitivecount : UInt32, pvertexstreamzerodata : Void*, vertexstreamzerostride : UInt32) : HRESULT
    @lpVtbl.value.draw_primitive_up.unsafe_as(Proc(D3DPRIMITIVETYPE, UInt32, Void*, UInt32, HRESULT)).call(primitivetype, primitivecount, pvertexstreamzerodata, vertexstreamzerostride)
  end
  def draw_indexed_primitive_up(primitivetype : D3DPRIMITIVETYPE, minvertexindex : UInt32, numvertices : UInt32, primitivecount : UInt32, pindexdata : Void*, indexdataformat : D3DFORMAT, pvertexstreamzerodata : Void*, vertexstreamzerostride : UInt32) : HRESULT
    @lpVtbl.value.draw_indexed_primitive_up.unsafe_as(Proc(D3DPRIMITIVETYPE, UInt32, UInt32, UInt32, Void*, D3DFORMAT, Void*, UInt32, HRESULT)).call(primitivetype, minvertexindex, numvertices, primitivecount, pindexdata, indexdataformat, pvertexstreamzerodata, vertexstreamzerostride)
  end
  def process_vertices(srcstartindex : UInt32, destindex : UInt32, vertexcount : UInt32, pdestbuffer : IDirect3DVertexBuffer9, pvertexdecl : IDirect3DVertexDeclaration9, flags : UInt32) : HRESULT
    @lpVtbl.value.process_vertices.unsafe_as(Proc(UInt32, UInt32, UInt32, IDirect3DVertexBuffer9, IDirect3DVertexDeclaration9, UInt32, HRESULT)).call(srcstartindex, destindex, vertexcount, pdestbuffer, pvertexdecl, flags)
  end
  def create_vertex_declaration(pvertexelements : D3DVERTEXELEMENT9*, ppdecl : IDirect3DVertexDeclaration9*) : HRESULT
    @lpVtbl.value.create_vertex_declaration.unsafe_as(Proc(D3DVERTEXELEMENT9*, IDirect3DVertexDeclaration9*, HRESULT)).call(pvertexelements, ppdecl)
  end
  def set_vertex_declaration(pdecl : IDirect3DVertexDeclaration9) : HRESULT
    @lpVtbl.value.set_vertex_declaration.unsafe_as(Proc(IDirect3DVertexDeclaration9, HRESULT)).call(pdecl)
  end
  def get_vertex_declaration(ppdecl : IDirect3DVertexDeclaration9*) : HRESULT
    @lpVtbl.value.get_vertex_declaration.unsafe_as(Proc(IDirect3DVertexDeclaration9*, HRESULT)).call(ppdecl)
  end
  def set_fvf(fvf : UInt32) : HRESULT
    @lpVtbl.value.set_fvf.unsafe_as(Proc(UInt32, HRESULT)).call(fvf)
  end
  def get_fvf(pfvf : UInt32*) : HRESULT
    @lpVtbl.value.get_fvf.unsafe_as(Proc(UInt32*, HRESULT)).call(pfvf)
  end
  def create_vertex_shader(pfunction : UInt32*, ppshader : IDirect3DVertexShader9*) : HRESULT
    @lpVtbl.value.create_vertex_shader.unsafe_as(Proc(UInt32*, IDirect3DVertexShader9*, HRESULT)).call(pfunction, ppshader)
  end
  def set_vertex_shader(pshader : IDirect3DVertexShader9) : HRESULT
    @lpVtbl.value.set_vertex_shader.unsafe_as(Proc(IDirect3DVertexShader9, HRESULT)).call(pshader)
  end
  def get_vertex_shader(ppshader : IDirect3DVertexShader9*) : HRESULT
    @lpVtbl.value.get_vertex_shader.unsafe_as(Proc(IDirect3DVertexShader9*, HRESULT)).call(ppshader)
  end
  def set_vertex_shader_constant_f(startregister : UInt32, pconstantdata : Float32*, vector4fcount : UInt32) : HRESULT
    @lpVtbl.value.set_vertex_shader_constant_f.unsafe_as(Proc(UInt32, Float32*, UInt32, HRESULT)).call(startregister, pconstantdata, vector4fcount)
  end
  def get_vertex_shader_constant_f(startregister : UInt32, pconstantdata : Float32*, vector4fcount : UInt32) : HRESULT
    @lpVtbl.value.get_vertex_shader_constant_f.unsafe_as(Proc(UInt32, Float32*, UInt32, HRESULT)).call(startregister, pconstantdata, vector4fcount)
  end
  def set_vertex_shader_constant_i(startregister : UInt32, pconstantdata : Int32*, vector4icount : UInt32) : HRESULT
    @lpVtbl.value.set_vertex_shader_constant_i.unsafe_as(Proc(UInt32, Int32*, UInt32, HRESULT)).call(startregister, pconstantdata, vector4icount)
  end
  def get_vertex_shader_constant_i(startregister : UInt32, pconstantdata : Int32*, vector4icount : UInt32) : HRESULT
    @lpVtbl.value.get_vertex_shader_constant_i.unsafe_as(Proc(UInt32, Int32*, UInt32, HRESULT)).call(startregister, pconstantdata, vector4icount)
  end
  def set_vertex_shader_constant_b(startregister : UInt32, pconstantdata : LibC::BOOL*, boolcount : UInt32) : HRESULT
    @lpVtbl.value.set_vertex_shader_constant_b.unsafe_as(Proc(UInt32, LibC::BOOL*, UInt32, HRESULT)).call(startregister, pconstantdata, boolcount)
  end
  def get_vertex_shader_constant_b(startregister : UInt32, pconstantdata : LibC::BOOL*, boolcount : UInt32) : HRESULT
    @lpVtbl.value.get_vertex_shader_constant_b.unsafe_as(Proc(UInt32, LibC::BOOL*, UInt32, HRESULT)).call(startregister, pconstantdata, boolcount)
  end
  def set_stream_source(streamnumber : UInt32, pstreamdata : IDirect3DVertexBuffer9, offsetinbytes : UInt32, stride : UInt32) : HRESULT
    @lpVtbl.value.set_stream_source.unsafe_as(Proc(UInt32, IDirect3DVertexBuffer9, UInt32, UInt32, HRESULT)).call(streamnumber, pstreamdata, offsetinbytes, stride)
  end
  def get_stream_source(streamnumber : UInt32, ppstreamdata : IDirect3DVertexBuffer9*, poffsetinbytes : UInt32*, pstride : UInt32*) : HRESULT
    @lpVtbl.value.get_stream_source.unsafe_as(Proc(UInt32, IDirect3DVertexBuffer9*, UInt32*, UInt32*, HRESULT)).call(streamnumber, ppstreamdata, poffsetinbytes, pstride)
  end
  def set_stream_source_freq(streamnumber : UInt32, setting : UInt32) : HRESULT
    @lpVtbl.value.set_stream_source_freq.unsafe_as(Proc(UInt32, UInt32, HRESULT)).call(streamnumber, setting)
  end
  def get_stream_source_freq(streamnumber : UInt32, psetting : UInt32*) : HRESULT
    @lpVtbl.value.get_stream_source_freq.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(streamnumber, psetting)
  end
  def set_indices(pindexdata : IDirect3DIndexBuffer9) : HRESULT
    @lpVtbl.value.set_indices.unsafe_as(Proc(IDirect3DIndexBuffer9, HRESULT)).call(pindexdata)
  end
  def get_indices(ppindexdata : IDirect3DIndexBuffer9*) : HRESULT
    @lpVtbl.value.get_indices.unsafe_as(Proc(IDirect3DIndexBuffer9*, HRESULT)).call(ppindexdata)
  end
  def create_pixel_shader(pfunction : UInt32*, ppshader : IDirect3DPixelShader9*) : HRESULT
    @lpVtbl.value.create_pixel_shader.unsafe_as(Proc(UInt32*, IDirect3DPixelShader9*, HRESULT)).call(pfunction, ppshader)
  end
  def set_pixel_shader(pshader : IDirect3DPixelShader9) : HRESULT
    @lpVtbl.value.set_pixel_shader.unsafe_as(Proc(IDirect3DPixelShader9, HRESULT)).call(pshader)
  end
  def get_pixel_shader(ppshader : IDirect3DPixelShader9*) : HRESULT
    @lpVtbl.value.get_pixel_shader.unsafe_as(Proc(IDirect3DPixelShader9*, HRESULT)).call(ppshader)
  end
  def set_pixel_shader_constant_f(startregister : UInt32, pconstantdata : Float32*, vector4fcount : UInt32) : HRESULT
    @lpVtbl.value.set_pixel_shader_constant_f.unsafe_as(Proc(UInt32, Float32*, UInt32, HRESULT)).call(startregister, pconstantdata, vector4fcount)
  end
  def get_pixel_shader_constant_f(startregister : UInt32, pconstantdata : Float32*, vector4fcount : UInt32) : HRESULT
    @lpVtbl.value.get_pixel_shader_constant_f.unsafe_as(Proc(UInt32, Float32*, UInt32, HRESULT)).call(startregister, pconstantdata, vector4fcount)
  end
  def set_pixel_shader_constant_i(startregister : UInt32, pconstantdata : Int32*, vector4icount : UInt32) : HRESULT
    @lpVtbl.value.set_pixel_shader_constant_i.unsafe_as(Proc(UInt32, Int32*, UInt32, HRESULT)).call(startregister, pconstantdata, vector4icount)
  end
  def get_pixel_shader_constant_i(startregister : UInt32, pconstantdata : Int32*, vector4icount : UInt32) : HRESULT
    @lpVtbl.value.get_pixel_shader_constant_i.unsafe_as(Proc(UInt32, Int32*, UInt32, HRESULT)).call(startregister, pconstantdata, vector4icount)
  end
  def set_pixel_shader_constant_b(startregister : UInt32, pconstantdata : LibC::BOOL*, boolcount : UInt32) : HRESULT
    @lpVtbl.value.set_pixel_shader_constant_b.unsafe_as(Proc(UInt32, LibC::BOOL*, UInt32, HRESULT)).call(startregister, pconstantdata, boolcount)
  end
  def get_pixel_shader_constant_b(startregister : UInt32, pconstantdata : LibC::BOOL*, boolcount : UInt32) : HRESULT
    @lpVtbl.value.get_pixel_shader_constant_b.unsafe_as(Proc(UInt32, LibC::BOOL*, UInt32, HRESULT)).call(startregister, pconstantdata, boolcount)
  end
  def draw_rect_patch(handle : UInt32, pnumsegs : Float32*, prectpatchinfo : D3DRECTPATCH_INFO*) : HRESULT
    @lpVtbl.value.draw_rect_patch.unsafe_as(Proc(UInt32, Float32*, D3DRECTPATCH_INFO*, HRESULT)).call(handle, pnumsegs, prectpatchinfo)
  end
  def draw_tri_patch(handle : UInt32, pnumsegs : Float32*, ptripatchinfo : D3DTRIPATCH_INFO*) : HRESULT
    @lpVtbl.value.draw_tri_patch.unsafe_as(Proc(UInt32, Float32*, D3DTRIPATCH_INFO*, HRESULT)).call(handle, pnumsegs, ptripatchinfo)
  end
  def delete_patch(handle : UInt32) : HRESULT
    @lpVtbl.value.delete_patch.unsafe_as(Proc(UInt32, HRESULT)).call(handle)
  end
  def create_query(type : D3DQUERYTYPE, ppquery : IDirect3DQuery9*) : HRESULT
    @lpVtbl.value.create_query.unsafe_as(Proc(D3DQUERYTYPE, IDirect3DQuery9*, HRESULT)).call(type, ppquery)
  end
  def set_convolution_mono_kernel(width : UInt32, height : UInt32, rows : Float32*, columns : Float32*) : HRESULT
    @lpVtbl.value.set_convolution_mono_kernel.unsafe_as(Proc(UInt32, UInt32, Float32*, Float32*, HRESULT)).call(width, height, rows, columns)
  end
  def compose_rects(psrc : IDirect3DSurface9, pdst : IDirect3DSurface9, psrcrectdescs : IDirect3DVertexBuffer9, numrects : UInt32, pdstrectdescs : IDirect3DVertexBuffer9, operation : D3DCOMPOSERECTSOP, xoffset : Int32, yoffset : Int32) : HRESULT
    @lpVtbl.value.compose_rects.unsafe_as(Proc(IDirect3DSurface9, IDirect3DSurface9, IDirect3DVertexBuffer9, UInt32, IDirect3DVertexBuffer9, D3DCOMPOSERECTSOP, Int32, Int32, HRESULT)).call(psrc, pdst, psrcrectdescs, numrects, pdstrectdescs, operation, xoffset, yoffset)
  end
  def present_ex(psourcerect : RECT*, pdestrect : RECT*, hdestwindowoverride : LibC::HANDLE, pdirtyregion : RGNDATA*, dwflags : UInt32) : HRESULT
    @lpVtbl.value.present_ex.unsafe_as(Proc(RECT*, RECT*, LibC::HANDLE, RGNDATA*, UInt32, HRESULT)).call(psourcerect, pdestrect, hdestwindowoverride, pdirtyregion, dwflags)
  end
  def get_gpu_thread_priority(ppriority : Int32*) : HRESULT
    @lpVtbl.value.get_gpu_thread_priority.unsafe_as(Proc(Int32*, HRESULT)).call(ppriority)
  end
  def set_gpu_thread_priority(priority : Int32) : HRESULT
    @lpVtbl.value.set_gpu_thread_priority.unsafe_as(Proc(Int32, HRESULT)).call(priority)
  end
  def wait_for_v_blank(iswapchain : UInt32) : HRESULT
    @lpVtbl.value.wait_for_v_blank.unsafe_as(Proc(UInt32, HRESULT)).call(iswapchain)
  end
  def check_resource_residency(presourcearray : IDirect3DResource9*, numresources : UInt32) : HRESULT
    @lpVtbl.value.check_resource_residency.unsafe_as(Proc(IDirect3DResource9*, UInt32, HRESULT)).call(presourcearray, numresources)
  end
  def set_maximum_frame_latency(maxlatency : UInt32) : HRESULT
    @lpVtbl.value.set_maximum_frame_latency.unsafe_as(Proc(UInt32, HRESULT)).call(maxlatency)
  end
  def get_maximum_frame_latency(pmaxlatency : UInt32*) : HRESULT
    @lpVtbl.value.get_maximum_frame_latency.unsafe_as(Proc(UInt32*, HRESULT)).call(pmaxlatency)
  end
  def check_device_state(hdestinationwindow : LibC::HANDLE) : HRESULT
    @lpVtbl.value.check_device_state.unsafe_as(Proc(LibC::HANDLE, HRESULT)).call(hdestinationwindow)
  end
  def create_render_target_ex(width : UInt32, height : UInt32, format : D3DFORMAT, multisample : D3DMULTISAMPLE_TYPE, multisamplequality : UInt32, lockable : LibC::BOOL, ppsurface : IDirect3DSurface9*, psharedhandle : LibC::HANDLE*, usage : UInt32) : HRESULT
    @lpVtbl.value.create_render_target_ex.unsafe_as(Proc(UInt32, UInt32, D3DFORMAT, D3DMULTISAMPLE_TYPE, UInt32, LibC::BOOL, IDirect3DSurface9*, LibC::HANDLE*, UInt32, HRESULT)).call(width, height, format, multisample, multisamplequality, lockable, ppsurface, psharedhandle, usage)
  end
  def create_offscreen_plain_surface_ex(width : UInt32, height : UInt32, format : D3DFORMAT, pool : D3DPOOL, ppsurface : IDirect3DSurface9*, psharedhandle : LibC::HANDLE*, usage : UInt32) : HRESULT
    @lpVtbl.value.create_offscreen_plain_surface_ex.unsafe_as(Proc(UInt32, UInt32, D3DFORMAT, D3DPOOL, IDirect3DSurface9*, LibC::HANDLE*, UInt32, HRESULT)).call(width, height, format, pool, ppsurface, psharedhandle, usage)
  end
  def create_depth_stencil_surface_ex(width : UInt32, height : UInt32, format : D3DFORMAT, multisample : D3DMULTISAMPLE_TYPE, multisamplequality : UInt32, discard : LibC::BOOL, ppsurface : IDirect3DSurface9*, psharedhandle : LibC::HANDLE*, usage : UInt32) : HRESULT
    @lpVtbl.value.create_depth_stencil_surface_ex.unsafe_as(Proc(UInt32, UInt32, D3DFORMAT, D3DMULTISAMPLE_TYPE, UInt32, LibC::BOOL, IDirect3DSurface9*, LibC::HANDLE*, UInt32, HRESULT)).call(width, height, format, multisample, multisamplequality, discard, ppsurface, psharedhandle, usage)
  end
  def reset_ex(ppresentationparameters : D3DPRESENT_PARAMETERS*, pfullscreendisplaymode : D3DDISPLAYMODEEX*) : HRESULT
    @lpVtbl.value.reset_ex.unsafe_as(Proc(D3DPRESENT_PARAMETERS*, D3DDISPLAYMODEEX*, HRESULT)).call(ppresentationparameters, pfullscreendisplaymode)
  end
  def get_display_mode_ex(iswapchain : UInt32, pmode : D3DDISPLAYMODEEX*, protation : D3DDISPLAYROTATION*) : HRESULT
    @lpVtbl.value.get_display_mode_ex.unsafe_as(Proc(UInt32, D3DDISPLAYMODEEX*, D3DDISPLAYROTATION*, HRESULT)).call(iswapchain, pmode, protation)
  end
end
struct LibWin32::IDirect3DSwapChain9Ex
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def present(psourcerect : RECT*, pdestrect : RECT*, hdestwindowoverride : LibC::HANDLE, pdirtyregion : RGNDATA*, dwflags : UInt32) : HRESULT
    @lpVtbl.value.present.unsafe_as(Proc(RECT*, RECT*, LibC::HANDLE, RGNDATA*, UInt32, HRESULT)).call(psourcerect, pdestrect, hdestwindowoverride, pdirtyregion, dwflags)
  end
  def get_front_buffer_data(pdestsurface : IDirect3DSurface9) : HRESULT
    @lpVtbl.value.get_front_buffer_data.unsafe_as(Proc(IDirect3DSurface9, HRESULT)).call(pdestsurface)
  end
  def get_back_buffer(ibackbuffer : UInt32, type : D3DBACKBUFFER_TYPE, ppbackbuffer : IDirect3DSurface9*) : HRESULT
    @lpVtbl.value.get_back_buffer.unsafe_as(Proc(UInt32, D3DBACKBUFFER_TYPE, IDirect3DSurface9*, HRESULT)).call(ibackbuffer, type, ppbackbuffer)
  end
  def get_raster_status(prasterstatus : D3DRASTER_STATUS*) : HRESULT
    @lpVtbl.value.get_raster_status.unsafe_as(Proc(D3DRASTER_STATUS*, HRESULT)).call(prasterstatus)
  end
  def get_display_mode(pmode : D3DDISPLAYMODE*) : HRESULT
    @lpVtbl.value.get_display_mode.unsafe_as(Proc(D3DDISPLAYMODE*, HRESULT)).call(pmode)
  end
  def get_device(ppdevice : IDirect3DDevice9*) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(IDirect3DDevice9*, HRESULT)).call(ppdevice)
  end
  def get_present_parameters(ppresentationparameters : D3DPRESENT_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_present_parameters.unsafe_as(Proc(D3DPRESENT_PARAMETERS*, HRESULT)).call(ppresentationparameters)
  end
  def get_last_present_count(plastpresentcount : UInt32*) : HRESULT
    @lpVtbl.value.get_last_present_count.unsafe_as(Proc(UInt32*, HRESULT)).call(plastpresentcount)
  end
  def get_present_stats(ppresentationstatistics : D3DPRESENTSTATS*) : HRESULT
    @lpVtbl.value.get_present_stats.unsafe_as(Proc(D3DPRESENTSTATS*, HRESULT)).call(ppresentationstatistics)
  end
  def get_display_mode_ex(pmode : D3DDISPLAYMODEEX*, protation : D3DDISPLAYROTATION*) : HRESULT
    @lpVtbl.value.get_display_mode_ex.unsafe_as(Proc(D3DDISPLAYMODEEX*, D3DDISPLAYROTATION*, HRESULT)).call(pmode, protation)
  end
end
