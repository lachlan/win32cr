require "../system/com.cr"
require "../foundation.cr"
require "../graphics/direct2d/common.cr"
require "../graphics/gdi.cr"
require "../globalization.cr"

{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link("delayimp")]
{% end %}
@[Link("user32")]
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/IGNORE:4199")]
{% end %}
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/DELAYLOAD:dwrite.dll")]
{% else %}
@[Link("dwrite")]
{% end %}
lib LibWin32
  DWRITE_ALPHA_MAX = 255_u32
  FACILITY_DWRITE = 2200_u32
  DWRITE_ERR_BASE = 20480_u32
  DWRITE_E_REMOTEFONT = -2003283955_i32
  DWRITE_E_DOWNLOADCANCELLED = -2003283954_i32
  DWRITE_E_DOWNLOADFAILED = -2003283953_i32
  DWRITE_E_TOOMANYDOWNLOADS = -2003283952_i32


  enum DWRITE_FONT_AXIS_TAG : UInt32
    DWRITE_FONT_AXIS_TAG_WEIGHT = 1952999287
    DWRITE_FONT_AXIS_TAG_WIDTH = 1752458359
    DWRITE_FONT_AXIS_TAG_SLANT = 1953393779
    DWRITE_FONT_AXIS_TAG_OPTICAL_SIZE = 2054385775
    DWRITE_FONT_AXIS_TAG_ITALIC = 1818326121
  end

  enum DWRITE_MEASURING_MODE : Int32
    DWRITE_MEASURING_MODE_NATURAL = 0
    DWRITE_MEASURING_MODE_GDI_CLASSIC = 1
    DWRITE_MEASURING_MODE_GDI_NATURAL = 2
  end

  enum DWRITE_GLYPH_IMAGE_FORMATS : UInt32
    DWRITE_GLYPH_IMAGE_FORMATS_NONE = 0
    DWRITE_GLYPH_IMAGE_FORMATS_TRUETYPE = 1
    DWRITE_GLYPH_IMAGE_FORMATS_CFF = 2
    DWRITE_GLYPH_IMAGE_FORMATS_COLR = 4
    DWRITE_GLYPH_IMAGE_FORMATS_SVG = 8
    DWRITE_GLYPH_IMAGE_FORMATS_PNG = 16
    DWRITE_GLYPH_IMAGE_FORMATS_JPEG = 32
    DWRITE_GLYPH_IMAGE_FORMATS_TIFF = 64
    DWRITE_GLYPH_IMAGE_FORMATS_PREMULTIPLIED_B8G8R8A8 = 128
  end

  enum DWRITE_FONT_FILE_TYPE : Int32
    DWRITE_FONT_FILE_TYPE_UNKNOWN = 0
    DWRITE_FONT_FILE_TYPE_CFF = 1
    DWRITE_FONT_FILE_TYPE_TRUETYPE = 2
    DWRITE_FONT_FILE_TYPE_OPENTYPE_COLLECTION = 3
    DWRITE_FONT_FILE_TYPE_TYPE1_PFM = 4
    DWRITE_FONT_FILE_TYPE_TYPE1_PFB = 5
    DWRITE_FONT_FILE_TYPE_VECTOR = 6
    DWRITE_FONT_FILE_TYPE_BITMAP = 7
    DWRITE_FONT_FILE_TYPE_TRUETYPE_COLLECTION = 3
  end

  enum DWRITE_FONT_FACE_TYPE : Int32
    DWRITE_FONT_FACE_TYPE_CFF = 0
    DWRITE_FONT_FACE_TYPE_TRUETYPE = 1
    DWRITE_FONT_FACE_TYPE_OPENTYPE_COLLECTION = 2
    DWRITE_FONT_FACE_TYPE_TYPE1 = 3
    DWRITE_FONT_FACE_TYPE_VECTOR = 4
    DWRITE_FONT_FACE_TYPE_BITMAP = 5
    DWRITE_FONT_FACE_TYPE_UNKNOWN = 6
    DWRITE_FONT_FACE_TYPE_RAW_CFF = 7
    DWRITE_FONT_FACE_TYPE_TRUETYPE_COLLECTION = 2
  end

  enum DWRITE_FONT_SIMULATIONS : UInt32
    DWRITE_FONT_SIMULATIONS_NONE = 0
    DWRITE_FONT_SIMULATIONS_BOLD = 1
    DWRITE_FONT_SIMULATIONS_OBLIQUE = 2
  end

  enum DWRITE_FONT_WEIGHT : Int32
    DWRITE_FONT_WEIGHT_THIN = 100
    DWRITE_FONT_WEIGHT_EXTRA_LIGHT = 200
    DWRITE_FONT_WEIGHT_ULTRA_LIGHT = 200
    DWRITE_FONT_WEIGHT_LIGHT = 300
    DWRITE_FONT_WEIGHT_SEMI_LIGHT = 350
    DWRITE_FONT_WEIGHT_NORMAL = 400
    DWRITE_FONT_WEIGHT_REGULAR = 400
    DWRITE_FONT_WEIGHT_MEDIUM = 500
    DWRITE_FONT_WEIGHT_DEMI_BOLD = 600
    DWRITE_FONT_WEIGHT_SEMI_BOLD = 600
    DWRITE_FONT_WEIGHT_BOLD = 700
    DWRITE_FONT_WEIGHT_EXTRA_BOLD = 800
    DWRITE_FONT_WEIGHT_ULTRA_BOLD = 800
    DWRITE_FONT_WEIGHT_BLACK = 900
    DWRITE_FONT_WEIGHT_HEAVY = 900
    DWRITE_FONT_WEIGHT_EXTRA_BLACK = 950
    DWRITE_FONT_WEIGHT_ULTRA_BLACK = 950
  end

  enum DWRITE_FONT_STRETCH : Int32
    DWRITE_FONT_STRETCH_UNDEFINED = 0
    DWRITE_FONT_STRETCH_ULTRA_CONDENSED = 1
    DWRITE_FONT_STRETCH_EXTRA_CONDENSED = 2
    DWRITE_FONT_STRETCH_CONDENSED = 3
    DWRITE_FONT_STRETCH_SEMI_CONDENSED = 4
    DWRITE_FONT_STRETCH_NORMAL = 5
    DWRITE_FONT_STRETCH_MEDIUM = 5
    DWRITE_FONT_STRETCH_SEMI_EXPANDED = 6
    DWRITE_FONT_STRETCH_EXPANDED = 7
    DWRITE_FONT_STRETCH_EXTRA_EXPANDED = 8
    DWRITE_FONT_STRETCH_ULTRA_EXPANDED = 9
  end

  enum DWRITE_FONT_STYLE : Int32
    DWRITE_FONT_STYLE_NORMAL = 0
    DWRITE_FONT_STYLE_OBLIQUE = 1
    DWRITE_FONT_STYLE_ITALIC = 2
  end

  enum DWRITE_INFORMATIONAL_STRING_ID : Int32
    DWRITE_INFORMATIONAL_STRING_NONE = 0
    DWRITE_INFORMATIONAL_STRING_COPYRIGHT_NOTICE = 1
    DWRITE_INFORMATIONAL_STRING_VERSION_STRINGS = 2
    DWRITE_INFORMATIONAL_STRING_TRADEMARK = 3
    DWRITE_INFORMATIONAL_STRING_MANUFACTURER = 4
    DWRITE_INFORMATIONAL_STRING_DESIGNER = 5
    DWRITE_INFORMATIONAL_STRING_DESIGNER_URL = 6
    DWRITE_INFORMATIONAL_STRING_DESCRIPTION = 7
    DWRITE_INFORMATIONAL_STRING_FONT_VENDOR_URL = 8
    DWRITE_INFORMATIONAL_STRING_LICENSE_DESCRIPTION = 9
    DWRITE_INFORMATIONAL_STRING_LICENSE_INFO_URL = 10
    DWRITE_INFORMATIONAL_STRING_WIN32_FAMILY_NAMES = 11
    DWRITE_INFORMATIONAL_STRING_WIN32_SUBFAMILY_NAMES = 12
    DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_FAMILY_NAMES = 13
    DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_SUBFAMILY_NAMES = 14
    DWRITE_INFORMATIONAL_STRING_SAMPLE_TEXT = 15
    DWRITE_INFORMATIONAL_STRING_FULL_NAME = 16
    DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_NAME = 17
    DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_CID_NAME = 18
    DWRITE_INFORMATIONAL_STRING_WEIGHT_STRETCH_STYLE_FAMILY_NAME = 19
    DWRITE_INFORMATIONAL_STRING_DESIGN_SCRIPT_LANGUAGE_TAG = 20
    DWRITE_INFORMATIONAL_STRING_SUPPORTED_SCRIPT_LANGUAGE_TAG = 21
    DWRITE_INFORMATIONAL_STRING_PREFERRED_FAMILY_NAMES = 13
    DWRITE_INFORMATIONAL_STRING_PREFERRED_SUBFAMILY_NAMES = 14
    DWRITE_INFORMATIONAL_STRING_WWS_FAMILY_NAME = 19
  end

  enum DWRITE_FACTORY_TYPE : Int32
    DWRITE_FACTORY_TYPE_SHARED = 0
    DWRITE_FACTORY_TYPE_ISOLATED = 1
  end

  enum DWRITE_PIXEL_GEOMETRY : Int32
    DWRITE_PIXEL_GEOMETRY_FLAT = 0
    DWRITE_PIXEL_GEOMETRY_RGB = 1
    DWRITE_PIXEL_GEOMETRY_BGR = 2
  end

  enum DWRITE_RENDERING_MODE : Int32
    DWRITE_RENDERING_MODE_DEFAULT = 0
    DWRITE_RENDERING_MODE_ALIASED = 1
    DWRITE_RENDERING_MODE_GDI_CLASSIC = 2
    DWRITE_RENDERING_MODE_GDI_NATURAL = 3
    DWRITE_RENDERING_MODE_NATURAL = 4
    DWRITE_RENDERING_MODE_NATURAL_SYMMETRIC = 5
    DWRITE_RENDERING_MODE_OUTLINE = 6
    DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC = 2
    DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL = 3
    DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL = 4
    DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC = 5
  end

  enum DWRITE_READING_DIRECTION : Int32
    DWRITE_READING_DIRECTION_LEFT_TO_RIGHT = 0
    DWRITE_READING_DIRECTION_RIGHT_TO_LEFT = 1
    DWRITE_READING_DIRECTION_TOP_TO_BOTTOM = 2
    DWRITE_READING_DIRECTION_BOTTOM_TO_TOP = 3
  end

  enum DWRITE_FLOW_DIRECTION : Int32
    DWRITE_FLOW_DIRECTION_TOP_TO_BOTTOM = 0
    DWRITE_FLOW_DIRECTION_BOTTOM_TO_TOP = 1
    DWRITE_FLOW_DIRECTION_LEFT_TO_RIGHT = 2
    DWRITE_FLOW_DIRECTION_RIGHT_TO_LEFT = 3
  end

  enum DWRITE_TEXT_ALIGNMENT : Int32
    DWRITE_TEXT_ALIGNMENT_LEADING = 0
    DWRITE_TEXT_ALIGNMENT_TRAILING = 1
    DWRITE_TEXT_ALIGNMENT_CENTER = 2
    DWRITE_TEXT_ALIGNMENT_JUSTIFIED = 3
  end

  enum DWRITE_PARAGRAPH_ALIGNMENT : Int32
    DWRITE_PARAGRAPH_ALIGNMENT_NEAR = 0
    DWRITE_PARAGRAPH_ALIGNMENT_FAR = 1
    DWRITE_PARAGRAPH_ALIGNMENT_CENTER = 2
  end

  enum DWRITE_WORD_WRAPPING : Int32
    DWRITE_WORD_WRAPPING_WRAP = 0
    DWRITE_WORD_WRAPPING_NO_WRAP = 1
    DWRITE_WORD_WRAPPING_EMERGENCY_BREAK = 2
    DWRITE_WORD_WRAPPING_WHOLE_WORD = 3
    DWRITE_WORD_WRAPPING_CHARACTER = 4
  end

  enum DWRITE_LINE_SPACING_METHOD : Int32
    DWRITE_LINE_SPACING_METHOD_DEFAULT = 0
    DWRITE_LINE_SPACING_METHOD_UNIFORM = 1
    DWRITE_LINE_SPACING_METHOD_PROPORTIONAL = 2
  end

  enum DWRITE_TRIMMING_GRANULARITY : Int32
    DWRITE_TRIMMING_GRANULARITY_NONE = 0
    DWRITE_TRIMMING_GRANULARITY_CHARACTER = 1
    DWRITE_TRIMMING_GRANULARITY_WORD = 2
  end

  enum DWRITE_FONT_FEATURE_TAG : UInt32
    DWRITE_FONT_FEATURE_TAG_ALTERNATIVE_FRACTIONS = 1668441697
    DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS_FROM_CAPITALS = 1668297315
    DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS_FROM_CAPITALS = 1668493923
    DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_ALTERNATES = 1953259875
    DWRITE_FONT_FEATURE_TAG_CASE_SENSITIVE_FORMS = 1702060387
    DWRITE_FONT_FEATURE_TAG_GLYPH_COMPOSITION_DECOMPOSITION = 1886217059
    DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_LIGATURES = 1734962275
    DWRITE_FONT_FEATURE_TAG_CAPITAL_SPACING = 1886613603
    DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_SWASH = 1752658787
    DWRITE_FONT_FEATURE_TAG_CURSIVE_POSITIONING = 1936880995
    DWRITE_FONT_FEATURE_TAG_DEFAULT = 1953261156
    DWRITE_FONT_FEATURE_TAG_DISCRETIONARY_LIGATURES = 1734962276
    DWRITE_FONT_FEATURE_TAG_EXPERT_FORMS = 1953527909
    DWRITE_FONT_FEATURE_TAG_FRACTIONS = 1667330662
    DWRITE_FONT_FEATURE_TAG_FULL_WIDTH = 1684633446
    DWRITE_FONT_FEATURE_TAG_HALF_FORMS = 1718378856
    DWRITE_FONT_FEATURE_TAG_HALANT_FORMS = 1852596584
    DWRITE_FONT_FEATURE_TAG_ALTERNATE_HALF_WIDTH = 1953259880
    DWRITE_FONT_FEATURE_TAG_HISTORICAL_FORMS = 1953720680
    DWRITE_FONT_FEATURE_TAG_HORIZONTAL_KANA_ALTERNATES = 1634626408
    DWRITE_FONT_FEATURE_TAG_HISTORICAL_LIGATURES = 1734962280
    DWRITE_FONT_FEATURE_TAG_HALF_WIDTH = 1684633448
    DWRITE_FONT_FEATURE_TAG_HOJO_KANJI_FORMS = 1869246312
    DWRITE_FONT_FEATURE_TAG_JIS04_FORMS = 875589738
    DWRITE_FONT_FEATURE_TAG_JIS78_FORMS = 943157354
    DWRITE_FONT_FEATURE_TAG_JIS83_FORMS = 859336810
    DWRITE_FONT_FEATURE_TAG_JIS90_FORMS = 809070698
    DWRITE_FONT_FEATURE_TAG_KERNING = 1852990827
    DWRITE_FONT_FEATURE_TAG_STANDARD_LIGATURES = 1634167148
    DWRITE_FONT_FEATURE_TAG_LINING_FIGURES = 1836412524
    DWRITE_FONT_FEATURE_TAG_LOCALIZED_FORMS = 1818455916
    DWRITE_FONT_FEATURE_TAG_MARK_POSITIONING = 1802658157
    DWRITE_FONT_FEATURE_TAG_MATHEMATICAL_GREEK = 1802659693
    DWRITE_FONT_FEATURE_TAG_MARK_TO_MARK_POSITIONING = 1802333037
    DWRITE_FONT_FEATURE_TAG_ALTERNATE_ANNOTATION_FORMS = 1953259886
    DWRITE_FONT_FEATURE_TAG_NLC_KANJI_FORMS = 1801677934
    DWRITE_FONT_FEATURE_TAG_OLD_STYLE_FIGURES = 1836412527
    DWRITE_FONT_FEATURE_TAG_ORDINALS = 1852076655
    DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_ALTERNATE_WIDTH = 1953259888
    DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS = 1885430640
    DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_FIGURES = 1836412528
    DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_WIDTHS = 1684633456
    DWRITE_FONT_FEATURE_TAG_QUARTER_WIDTHS = 1684633457
    DWRITE_FONT_FEATURE_TAG_REQUIRED_LIGATURES = 1734962290
    DWRITE_FONT_FEATURE_TAG_RUBY_NOTATION_FORMS = 2036495730
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_ALTERNATES = 1953259891
    DWRITE_FONT_FEATURE_TAG_SCIENTIFIC_INFERIORS = 1718511987
    DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS = 1885564275
    DWRITE_FONT_FEATURE_TAG_SIMPLIFIED_FORMS = 1819307379
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1 = 825258867
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_2 = 842036083
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_3 = 858813299
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_4 = 875590515
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_5 = 892367731
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_6 = 909144947
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_7 = 925922163
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_8 = 942699379
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_9 = 959476595
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_10 = 808547187
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_11 = 825324403
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_12 = 842101619
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_13 = 858878835
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_14 = 875656051
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_15 = 892433267
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_16 = 909210483
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_17 = 925987699
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_18 = 942764915
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_19 = 959542131
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_20 = 808612723
    DWRITE_FONT_FEATURE_TAG_SUBSCRIPT = 1935832435
    DWRITE_FONT_FEATURE_TAG_SUPERSCRIPT = 1936749939
    DWRITE_FONT_FEATURE_TAG_SWASH = 1752397683
    DWRITE_FONT_FEATURE_TAG_TITLING = 1819568500
    DWRITE_FONT_FEATURE_TAG_TRADITIONAL_NAME_FORMS = 1835101812
    DWRITE_FONT_FEATURE_TAG_TABULAR_FIGURES = 1836412532
    DWRITE_FONT_FEATURE_TAG_TRADITIONAL_FORMS = 1684107892
    DWRITE_FONT_FEATURE_TAG_THIRD_WIDTHS = 1684633460
    DWRITE_FONT_FEATURE_TAG_UNICASE = 1667853941
    DWRITE_FONT_FEATURE_TAG_VERTICAL_WRITING = 1953654134
    DWRITE_FONT_FEATURE_TAG_VERTICAL_ALTERNATES_AND_ROTATION = 846492278
    DWRITE_FONT_FEATURE_TAG_SLASHED_ZERO = 1869768058
  end

  enum DWRITE_SCRIPT_SHAPES : UInt32
    DWRITE_SCRIPT_SHAPES_DEFAULT = 0
    DWRITE_SCRIPT_SHAPES_NO_VISUAL = 1
  end

  enum DWRITE_BREAK_CONDITION : Int32
    DWRITE_BREAK_CONDITION_NEUTRAL = 0
    DWRITE_BREAK_CONDITION_CAN_BREAK = 1
    DWRITE_BREAK_CONDITION_MAY_NOT_BREAK = 2
    DWRITE_BREAK_CONDITION_MUST_BREAK = 3
  end

  enum DWRITE_NUMBER_SUBSTITUTION_METHOD : Int32
    DWRITE_NUMBER_SUBSTITUTION_METHOD_FROM_CULTURE = 0
    DWRITE_NUMBER_SUBSTITUTION_METHOD_CONTEXTUAL = 1
    DWRITE_NUMBER_SUBSTITUTION_METHOD_NONE = 2
    DWRITE_NUMBER_SUBSTITUTION_METHOD_NATIONAL = 3
    DWRITE_NUMBER_SUBSTITUTION_METHOD_TRADITIONAL = 4
  end

  enum DWRITE_TEXTURE_TYPE : Int32
    DWRITE_TEXTURE_ALIASED_1x1 = 0
    DWRITE_TEXTURE_CLEARTYPE_3x1 = 1
  end

  enum DWRITE_PANOSE_FAMILY : Int32
    DWRITE_PANOSE_FAMILY_ANY = 0
    DWRITE_PANOSE_FAMILY_NO_FIT = 1
    DWRITE_PANOSE_FAMILY_TEXT_DISPLAY = 2
    DWRITE_PANOSE_FAMILY_SCRIPT = 3
    DWRITE_PANOSE_FAMILY_DECORATIVE = 4
    DWRITE_PANOSE_FAMILY_SYMBOL = 5
    DWRITE_PANOSE_FAMILY_PICTORIAL = 5
  end

  enum DWRITE_PANOSE_SERIF_STYLE : Int32
    DWRITE_PANOSE_SERIF_STYLE_ANY = 0
    DWRITE_PANOSE_SERIF_STYLE_NO_FIT = 1
    DWRITE_PANOSE_SERIF_STYLE_COVE = 2
    DWRITE_PANOSE_SERIF_STYLE_OBTUSE_COVE = 3
    DWRITE_PANOSE_SERIF_STYLE_SQUARE_COVE = 4
    DWRITE_PANOSE_SERIF_STYLE_OBTUSE_SQUARE_COVE = 5
    DWRITE_PANOSE_SERIF_STYLE_SQUARE = 6
    DWRITE_PANOSE_SERIF_STYLE_THIN = 7
    DWRITE_PANOSE_SERIF_STYLE_OVAL = 8
    DWRITE_PANOSE_SERIF_STYLE_EXAGGERATED = 9
    DWRITE_PANOSE_SERIF_STYLE_TRIANGLE = 10
    DWRITE_PANOSE_SERIF_STYLE_NORMAL_SANS = 11
    DWRITE_PANOSE_SERIF_STYLE_OBTUSE_SANS = 12
    DWRITE_PANOSE_SERIF_STYLE_PERPENDICULAR_SANS = 13
    DWRITE_PANOSE_SERIF_STYLE_FLARED = 14
    DWRITE_PANOSE_SERIF_STYLE_ROUNDED = 15
    DWRITE_PANOSE_SERIF_STYLE_SCRIPT = 16
    DWRITE_PANOSE_SERIF_STYLE_PERP_SANS = 13
    DWRITE_PANOSE_SERIF_STYLE_BONE = 8
  end

  enum DWRITE_PANOSE_WEIGHT : Int32
    DWRITE_PANOSE_WEIGHT_ANY = 0
    DWRITE_PANOSE_WEIGHT_NO_FIT = 1
    DWRITE_PANOSE_WEIGHT_VERY_LIGHT = 2
    DWRITE_PANOSE_WEIGHT_LIGHT = 3
    DWRITE_PANOSE_WEIGHT_THIN = 4
    DWRITE_PANOSE_WEIGHT_BOOK = 5
    DWRITE_PANOSE_WEIGHT_MEDIUM = 6
    DWRITE_PANOSE_WEIGHT_DEMI = 7
    DWRITE_PANOSE_WEIGHT_BOLD = 8
    DWRITE_PANOSE_WEIGHT_HEAVY = 9
    DWRITE_PANOSE_WEIGHT_BLACK = 10
    DWRITE_PANOSE_WEIGHT_EXTRA_BLACK = 11
    DWRITE_PANOSE_WEIGHT_NORD = 11
  end

  enum DWRITE_PANOSE_PROPORTION : Int32
    DWRITE_PANOSE_PROPORTION_ANY = 0
    DWRITE_PANOSE_PROPORTION_NO_FIT = 1
    DWRITE_PANOSE_PROPORTION_OLD_STYLE = 2
    DWRITE_PANOSE_PROPORTION_MODERN = 3
    DWRITE_PANOSE_PROPORTION_EVEN_WIDTH = 4
    DWRITE_PANOSE_PROPORTION_EXPANDED = 5
    DWRITE_PANOSE_PROPORTION_CONDENSED = 6
    DWRITE_PANOSE_PROPORTION_VERY_EXPANDED = 7
    DWRITE_PANOSE_PROPORTION_VERY_CONDENSED = 8
    DWRITE_PANOSE_PROPORTION_MONOSPACED = 9
  end

  enum DWRITE_PANOSE_CONTRAST : Int32
    DWRITE_PANOSE_CONTRAST_ANY = 0
    DWRITE_PANOSE_CONTRAST_NO_FIT = 1
    DWRITE_PANOSE_CONTRAST_NONE = 2
    DWRITE_PANOSE_CONTRAST_VERY_LOW = 3
    DWRITE_PANOSE_CONTRAST_LOW = 4
    DWRITE_PANOSE_CONTRAST_MEDIUM_LOW = 5
    DWRITE_PANOSE_CONTRAST_MEDIUM = 6
    DWRITE_PANOSE_CONTRAST_MEDIUM_HIGH = 7
    DWRITE_PANOSE_CONTRAST_HIGH = 8
    DWRITE_PANOSE_CONTRAST_VERY_HIGH = 9
    DWRITE_PANOSE_CONTRAST_HORIZONTAL_LOW = 10
    DWRITE_PANOSE_CONTRAST_HORIZONTAL_MEDIUM = 11
    DWRITE_PANOSE_CONTRAST_HORIZONTAL_HIGH = 12
    DWRITE_PANOSE_CONTRAST_BROKEN = 13
  end

  enum DWRITE_PANOSE_STROKE_VARIATION : Int32
    DWRITE_PANOSE_STROKE_VARIATION_ANY = 0
    DWRITE_PANOSE_STROKE_VARIATION_NO_FIT = 1
    DWRITE_PANOSE_STROKE_VARIATION_NO_VARIATION = 2
    DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_DIAGONAL = 3
    DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_TRANSITIONAL = 4
    DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_VERTICAL = 5
    DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_HORIZONTAL = 6
    DWRITE_PANOSE_STROKE_VARIATION_RAPID_VERTICAL = 7
    DWRITE_PANOSE_STROKE_VARIATION_RAPID_HORIZONTAL = 8
    DWRITE_PANOSE_STROKE_VARIATION_INSTANT_VERTICAL = 9
    DWRITE_PANOSE_STROKE_VARIATION_INSTANT_HORIZONTAL = 10
  end

  enum DWRITE_PANOSE_ARM_STYLE : Int32
    DWRITE_PANOSE_ARM_STYLE_ANY = 0
    DWRITE_PANOSE_ARM_STYLE_NO_FIT = 1
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_HORIZONTAL = 2
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_WEDGE = 3
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_VERTICAL = 4
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_SINGLE_SERIF = 5
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_DOUBLE_SERIF = 6
    DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_HORIZONTAL = 7
    DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_WEDGE = 8
    DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_VERTICAL = 9
    DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_SINGLE_SERIF = 10
    DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_DOUBLE_SERIF = 11
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_HORZ = 2
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_VERT = 4
    DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_HORZ = 7
    DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_WEDGE = 8
    DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_VERT = 9
    DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_SINGLE_SERIF = 10
    DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_DOUBLE_SERIF = 11
  end

  enum DWRITE_PANOSE_LETTERFORM : Int32
    DWRITE_PANOSE_LETTERFORM_ANY = 0
    DWRITE_PANOSE_LETTERFORM_NO_FIT = 1
    DWRITE_PANOSE_LETTERFORM_NORMAL_CONTACT = 2
    DWRITE_PANOSE_LETTERFORM_NORMAL_WEIGHTED = 3
    DWRITE_PANOSE_LETTERFORM_NORMAL_BOXED = 4
    DWRITE_PANOSE_LETTERFORM_NORMAL_FLATTENED = 5
    DWRITE_PANOSE_LETTERFORM_NORMAL_ROUNDED = 6
    DWRITE_PANOSE_LETTERFORM_NORMAL_OFF_CENTER = 7
    DWRITE_PANOSE_LETTERFORM_NORMAL_SQUARE = 8
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_CONTACT = 9
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_WEIGHTED = 10
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_BOXED = 11
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_FLATTENED = 12
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_ROUNDED = 13
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_OFF_CENTER = 14
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_SQUARE = 15
  end

  enum DWRITE_PANOSE_MIDLINE : Int32
    DWRITE_PANOSE_MIDLINE_ANY = 0
    DWRITE_PANOSE_MIDLINE_NO_FIT = 1
    DWRITE_PANOSE_MIDLINE_STANDARD_TRIMMED = 2
    DWRITE_PANOSE_MIDLINE_STANDARD_POINTED = 3
    DWRITE_PANOSE_MIDLINE_STANDARD_SERIFED = 4
    DWRITE_PANOSE_MIDLINE_HIGH_TRIMMED = 5
    DWRITE_PANOSE_MIDLINE_HIGH_POINTED = 6
    DWRITE_PANOSE_MIDLINE_HIGH_SERIFED = 7
    DWRITE_PANOSE_MIDLINE_CONSTANT_TRIMMED = 8
    DWRITE_PANOSE_MIDLINE_CONSTANT_POINTED = 9
    DWRITE_PANOSE_MIDLINE_CONSTANT_SERIFED = 10
    DWRITE_PANOSE_MIDLINE_LOW_TRIMMED = 11
    DWRITE_PANOSE_MIDLINE_LOW_POINTED = 12
    DWRITE_PANOSE_MIDLINE_LOW_SERIFED = 13
  end

  enum DWRITE_PANOSE_XHEIGHT : Int32
    DWRITE_PANOSE_XHEIGHT_ANY = 0
    DWRITE_PANOSE_XHEIGHT_NO_FIT = 1
    DWRITE_PANOSE_XHEIGHT_CONSTANT_SMALL = 2
    DWRITE_PANOSE_XHEIGHT_CONSTANT_STANDARD = 3
    DWRITE_PANOSE_XHEIGHT_CONSTANT_LARGE = 4
    DWRITE_PANOSE_XHEIGHT_DUCKING_SMALL = 5
    DWRITE_PANOSE_XHEIGHT_DUCKING_STANDARD = 6
    DWRITE_PANOSE_XHEIGHT_DUCKING_LARGE = 7
    DWRITE_PANOSE_XHEIGHT_CONSTANT_STD = 3
    DWRITE_PANOSE_XHEIGHT_DUCKING_STD = 6
  end

  enum DWRITE_PANOSE_TOOL_KIND : Int32
    DWRITE_PANOSE_TOOL_KIND_ANY = 0
    DWRITE_PANOSE_TOOL_KIND_NO_FIT = 1
    DWRITE_PANOSE_TOOL_KIND_FLAT_NIB = 2
    DWRITE_PANOSE_TOOL_KIND_PRESSURE_POINT = 3
    DWRITE_PANOSE_TOOL_KIND_ENGRAVED = 4
    DWRITE_PANOSE_TOOL_KIND_BALL = 5
    DWRITE_PANOSE_TOOL_KIND_BRUSH = 6
    DWRITE_PANOSE_TOOL_KIND_ROUGH = 7
    DWRITE_PANOSE_TOOL_KIND_FELT_PEN_BRUSH_TIP = 8
    DWRITE_PANOSE_TOOL_KIND_WILD_BRUSH = 9
  end

  enum DWRITE_PANOSE_SPACING : Int32
    DWRITE_PANOSE_SPACING_ANY = 0
    DWRITE_PANOSE_SPACING_NO_FIT = 1
    DWRITE_PANOSE_SPACING_PROPORTIONAL_SPACED = 2
    DWRITE_PANOSE_SPACING_MONOSPACED = 3
  end

  enum DWRITE_PANOSE_ASPECT_RATIO : Int32
    DWRITE_PANOSE_ASPECT_RATIO_ANY = 0
    DWRITE_PANOSE_ASPECT_RATIO_NO_FIT = 1
    DWRITE_PANOSE_ASPECT_RATIO_VERY_CONDENSED = 2
    DWRITE_PANOSE_ASPECT_RATIO_CONDENSED = 3
    DWRITE_PANOSE_ASPECT_RATIO_NORMAL = 4
    DWRITE_PANOSE_ASPECT_RATIO_EXPANDED = 5
    DWRITE_PANOSE_ASPECT_RATIO_VERY_EXPANDED = 6
  end

  enum DWRITE_PANOSE_SCRIPT_TOPOLOGY : Int32
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_ANY = 0
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_NO_FIT = 1
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_DISCONNECTED = 2
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_TRAILING = 3
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_CONNECTED = 4
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_DISCONNECTED = 5
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_TRAILING = 6
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_CONNECTED = 7
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_DISCONNECTED = 8
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_TRAILING = 9
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_CONNECTED = 10
  end

  enum DWRITE_PANOSE_SCRIPT_FORM : Int32
    DWRITE_PANOSE_SCRIPT_FORM_ANY = 0
    DWRITE_PANOSE_SCRIPT_FORM_NO_FIT = 1
    DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_NO_WRAPPING = 2
    DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_SOME_WRAPPING = 3
    DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_MORE_WRAPPING = 4
    DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_EXTREME_WRAPPING = 5
    DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_NO_WRAPPING = 6
    DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_SOME_WRAPPING = 7
    DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_MORE_WRAPPING = 8
    DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_EXTREME_WRAPPING = 9
    DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_NO_WRAPPING = 10
    DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_SOME_WRAPPING = 11
    DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_MORE_WRAPPING = 12
    DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_EXTREME_WRAPPING = 13
  end

  enum DWRITE_PANOSE_FINIALS : Int32
    DWRITE_PANOSE_FINIALS_ANY = 0
    DWRITE_PANOSE_FINIALS_NO_FIT = 1
    DWRITE_PANOSE_FINIALS_NONE_NO_LOOPS = 2
    DWRITE_PANOSE_FINIALS_NONE_CLOSED_LOOPS = 3
    DWRITE_PANOSE_FINIALS_NONE_OPEN_LOOPS = 4
    DWRITE_PANOSE_FINIALS_SHARP_NO_LOOPS = 5
    DWRITE_PANOSE_FINIALS_SHARP_CLOSED_LOOPS = 6
    DWRITE_PANOSE_FINIALS_SHARP_OPEN_LOOPS = 7
    DWRITE_PANOSE_FINIALS_TAPERED_NO_LOOPS = 8
    DWRITE_PANOSE_FINIALS_TAPERED_CLOSED_LOOPS = 9
    DWRITE_PANOSE_FINIALS_TAPERED_OPEN_LOOPS = 10
    DWRITE_PANOSE_FINIALS_ROUND_NO_LOOPS = 11
    DWRITE_PANOSE_FINIALS_ROUND_CLOSED_LOOPS = 12
    DWRITE_PANOSE_FINIALS_ROUND_OPEN_LOOPS = 13
  end

  enum DWRITE_PANOSE_XASCENT : Int32
    DWRITE_PANOSE_XASCENT_ANY = 0
    DWRITE_PANOSE_XASCENT_NO_FIT = 1
    DWRITE_PANOSE_XASCENT_VERY_LOW = 2
    DWRITE_PANOSE_XASCENT_LOW = 3
    DWRITE_PANOSE_XASCENT_MEDIUM = 4
    DWRITE_PANOSE_XASCENT_HIGH = 5
    DWRITE_PANOSE_XASCENT_VERY_HIGH = 6
  end

  enum DWRITE_PANOSE_DECORATIVE_CLASS : Int32
    DWRITE_PANOSE_DECORATIVE_CLASS_ANY = 0
    DWRITE_PANOSE_DECORATIVE_CLASS_NO_FIT = 1
    DWRITE_PANOSE_DECORATIVE_CLASS_DERIVATIVE = 2
    DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_TOPOLOGY = 3
    DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_ELEMENTS = 4
    DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_ASPECT = 5
    DWRITE_PANOSE_DECORATIVE_CLASS_INITIALS = 6
    DWRITE_PANOSE_DECORATIVE_CLASS_CARTOON = 7
    DWRITE_PANOSE_DECORATIVE_CLASS_PICTURE_STEMS = 8
    DWRITE_PANOSE_DECORATIVE_CLASS_ORNAMENTED = 9
    DWRITE_PANOSE_DECORATIVE_CLASS_TEXT_AND_BACKGROUND = 10
    DWRITE_PANOSE_DECORATIVE_CLASS_COLLAGE = 11
    DWRITE_PANOSE_DECORATIVE_CLASS_MONTAGE = 12
  end

  enum DWRITE_PANOSE_ASPECT : Int32
    DWRITE_PANOSE_ASPECT_ANY = 0
    DWRITE_PANOSE_ASPECT_NO_FIT = 1
    DWRITE_PANOSE_ASPECT_SUPER_CONDENSED = 2
    DWRITE_PANOSE_ASPECT_VERY_CONDENSED = 3
    DWRITE_PANOSE_ASPECT_CONDENSED = 4
    DWRITE_PANOSE_ASPECT_NORMAL = 5
    DWRITE_PANOSE_ASPECT_EXTENDED = 6
    DWRITE_PANOSE_ASPECT_VERY_EXTENDED = 7
    DWRITE_PANOSE_ASPECT_SUPER_EXTENDED = 8
    DWRITE_PANOSE_ASPECT_MONOSPACED = 9
  end

  enum DWRITE_PANOSE_FILL : Int32
    DWRITE_PANOSE_FILL_ANY = 0
    DWRITE_PANOSE_FILL_NO_FIT = 1
    DWRITE_PANOSE_FILL_STANDARD_SOLID_FILL = 2
    DWRITE_PANOSE_FILL_NO_FILL = 3
    DWRITE_PANOSE_FILL_PATTERNED_FILL = 4
    DWRITE_PANOSE_FILL_COMPLEX_FILL = 5
    DWRITE_PANOSE_FILL_SHAPED_FILL = 6
    DWRITE_PANOSE_FILL_DRAWN_DISTRESSED = 7
  end

  enum DWRITE_PANOSE_LINING : Int32
    DWRITE_PANOSE_LINING_ANY = 0
    DWRITE_PANOSE_LINING_NO_FIT = 1
    DWRITE_PANOSE_LINING_NONE = 2
    DWRITE_PANOSE_LINING_INLINE = 3
    DWRITE_PANOSE_LINING_OUTLINE = 4
    DWRITE_PANOSE_LINING_ENGRAVED = 5
    DWRITE_PANOSE_LINING_SHADOW = 6
    DWRITE_PANOSE_LINING_RELIEF = 7
    DWRITE_PANOSE_LINING_BACKDROP = 8
  end

  enum DWRITE_PANOSE_DECORATIVE_TOPOLOGY : Int32
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_ANY = 0
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_NO_FIT = 1
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_STANDARD = 2
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_SQUARE = 3
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_MULTIPLE_SEGMENT = 4
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_ART_DECO = 5
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_UNEVEN_WEIGHTING = 6
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_DIVERSE_ARMS = 7
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_DIVERSE_FORMS = 8
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_LOMBARDIC_FORMS = 9
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_UPPER_CASE_IN_LOWER_CASE = 10
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_IMPLIED_TOPOLOGY = 11
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_HORSESHOE_E_AND_A = 12
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_CURSIVE = 13
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_BLACKLETTER = 14
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_SWASH_VARIANCE = 15
  end

  enum DWRITE_PANOSE_CHARACTER_RANGES : Int32
    DWRITE_PANOSE_CHARACTER_RANGES_ANY = 0
    DWRITE_PANOSE_CHARACTER_RANGES_NO_FIT = 1
    DWRITE_PANOSE_CHARACTER_RANGES_EXTENDED_COLLECTION = 2
    DWRITE_PANOSE_CHARACTER_RANGES_LITERALS = 3
    DWRITE_PANOSE_CHARACTER_RANGES_NO_LOWER_CASE = 4
    DWRITE_PANOSE_CHARACTER_RANGES_SMALL_CAPS = 5
  end

  enum DWRITE_PANOSE_SYMBOL_KIND : Int32
    DWRITE_PANOSE_SYMBOL_KIND_ANY = 0
    DWRITE_PANOSE_SYMBOL_KIND_NO_FIT = 1
    DWRITE_PANOSE_SYMBOL_KIND_MONTAGES = 2
    DWRITE_PANOSE_SYMBOL_KIND_PICTURES = 3
    DWRITE_PANOSE_SYMBOL_KIND_SHAPES = 4
    DWRITE_PANOSE_SYMBOL_KIND_SCIENTIFIC = 5
    DWRITE_PANOSE_SYMBOL_KIND_MUSIC = 6
    DWRITE_PANOSE_SYMBOL_KIND_EXPERT = 7
    DWRITE_PANOSE_SYMBOL_KIND_PATTERNS = 8
    DWRITE_PANOSE_SYMBOL_KIND_BOARDERS = 9
    DWRITE_PANOSE_SYMBOL_KIND_ICONS = 10
    DWRITE_PANOSE_SYMBOL_KIND_LOGOS = 11
    DWRITE_PANOSE_SYMBOL_KIND_INDUSTRY_SPECIFIC = 12
  end

  enum DWRITE_PANOSE_SYMBOL_ASPECT_RATIO : Int32
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_ANY = 0
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NO_FIT = 1
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NO_WIDTH = 2
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_EXCEPTIONALLY_WIDE = 3
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_SUPER_WIDE = 4
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_VERY_WIDE = 5
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_WIDE = 6
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NORMAL = 7
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NARROW = 8
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_VERY_NARROW = 9
  end

  enum DWRITE_OUTLINE_THRESHOLD : Int32
    DWRITE_OUTLINE_THRESHOLD_ANTIALIASED = 0
    DWRITE_OUTLINE_THRESHOLD_ALIASED = 1
  end

  enum DWRITE_BASELINE : Int32
    DWRITE_BASELINE_DEFAULT = 0
    DWRITE_BASELINE_ROMAN = 1
    DWRITE_BASELINE_CENTRAL = 2
    DWRITE_BASELINE_MATH = 3
    DWRITE_BASELINE_HANGING = 4
    DWRITE_BASELINE_IDEOGRAPHIC_BOTTOM = 5
    DWRITE_BASELINE_IDEOGRAPHIC_TOP = 6
    DWRITE_BASELINE_MINIMUM = 7
    DWRITE_BASELINE_MAXIMUM = 8
  end

  enum DWRITE_VERTICAL_GLYPH_ORIENTATION : Int32
    DWRITE_VERTICAL_GLYPH_ORIENTATION_DEFAULT = 0
    DWRITE_VERTICAL_GLYPH_ORIENTATION_STACKED = 1
  end

  enum DWRITE_GLYPH_ORIENTATION_ANGLE : Int32
    DWRITE_GLYPH_ORIENTATION_ANGLE_0_DEGREES = 0
    DWRITE_GLYPH_ORIENTATION_ANGLE_90_DEGREES = 1
    DWRITE_GLYPH_ORIENTATION_ANGLE_180_DEGREES = 2
    DWRITE_GLYPH_ORIENTATION_ANGLE_270_DEGREES = 3
  end

  enum DWRITE_TEXT_ANTIALIAS_MODE : Int32
    DWRITE_TEXT_ANTIALIAS_MODE_CLEARTYPE = 0
    DWRITE_TEXT_ANTIALIAS_MODE_GRAYSCALE = 1
  end

  enum DWRITE_OPTICAL_ALIGNMENT : Int32
    DWRITE_OPTICAL_ALIGNMENT_NONE = 0
    DWRITE_OPTICAL_ALIGNMENT_NO_SIDE_BEARINGS = 1
  end

  enum DWRITE_GRID_FIT_MODE : Int32
    DWRITE_GRID_FIT_MODE_DEFAULT = 0
    DWRITE_GRID_FIT_MODE_DISABLED = 1
    DWRITE_GRID_FIT_MODE_ENABLED = 2
  end

  enum DWRITE_FONT_PROPERTY_ID : Int32
    DWRITE_FONT_PROPERTY_ID_NONE = 0
    DWRITE_FONT_PROPERTY_ID_WEIGHT_STRETCH_STYLE_FAMILY_NAME = 1
    DWRITE_FONT_PROPERTY_ID_TYPOGRAPHIC_FAMILY_NAME = 2
    DWRITE_FONT_PROPERTY_ID_WEIGHT_STRETCH_STYLE_FACE_NAME = 3
    DWRITE_FONT_PROPERTY_ID_FULL_NAME = 4
    DWRITE_FONT_PROPERTY_ID_WIN32_FAMILY_NAME = 5
    DWRITE_FONT_PROPERTY_ID_POSTSCRIPT_NAME = 6
    DWRITE_FONT_PROPERTY_ID_DESIGN_SCRIPT_LANGUAGE_TAG = 7
    DWRITE_FONT_PROPERTY_ID_SUPPORTED_SCRIPT_LANGUAGE_TAG = 8
    DWRITE_FONT_PROPERTY_ID_SEMANTIC_TAG = 9
    DWRITE_FONT_PROPERTY_ID_WEIGHT = 10
    DWRITE_FONT_PROPERTY_ID_STRETCH = 11
    DWRITE_FONT_PROPERTY_ID_STYLE = 12
    DWRITE_FONT_PROPERTY_ID_TYPOGRAPHIC_FACE_NAME = 13
    DWRITE_FONT_PROPERTY_ID_TOTAL = 13
    DWRITE_FONT_PROPERTY_ID_TOTAL_RS3 = 14
    DWRITE_FONT_PROPERTY_ID_PREFERRED_FAMILY_NAME = 2
    DWRITE_FONT_PROPERTY_ID_FAMILY_NAME = 1
    DWRITE_FONT_PROPERTY_ID_FACE_NAME = 3
  end

  enum DWRITE_LOCALITY : Int32
    DWRITE_LOCALITY_REMOTE = 0
    DWRITE_LOCALITY_PARTIAL = 1
    DWRITE_LOCALITY_LOCAL = 2
  end

  enum DWRITE_RENDERING_MODE1 : Int32
    DWRITE_RENDERING_MODE1_DEFAULT = 0
    DWRITE_RENDERING_MODE1_ALIASED = 1
    DWRITE_RENDERING_MODE1_GDI_CLASSIC = 2
    DWRITE_RENDERING_MODE1_GDI_NATURAL = 3
    DWRITE_RENDERING_MODE1_NATURAL = 4
    DWRITE_RENDERING_MODE1_NATURAL_SYMMETRIC = 5
    DWRITE_RENDERING_MODE1_OUTLINE = 6
    DWRITE_RENDERING_MODE1_NATURAL_SYMMETRIC_DOWNSAMPLED = 7
  end

  enum DWRITE_FONT_LINE_GAP_USAGE : Int32
    DWRITE_FONT_LINE_GAP_USAGE_DEFAULT = 0
    DWRITE_FONT_LINE_GAP_USAGE_DISABLED = 1
    DWRITE_FONT_LINE_GAP_USAGE_ENABLED = 2
  end

  enum DWRITE_CONTAINER_TYPE : Int32
    DWRITE_CONTAINER_TYPE_UNKNOWN = 0
    DWRITE_CONTAINER_TYPE_WOFF = 1
    DWRITE_CONTAINER_TYPE_WOFF2 = 2
  end

  enum DWRITE_FONT_FAMILY_MODEL : Int32
    DWRITE_FONT_FAMILY_MODEL_TYPOGRAPHIC = 0
    DWRITE_FONT_FAMILY_MODEL_WEIGHT_STRETCH_STYLE = 1
  end

  enum DWRITE_AUTOMATIC_FONT_AXES : UInt32
    DWRITE_AUTOMATIC_FONT_AXES_NONE = 0
    DWRITE_AUTOMATIC_FONT_AXES_OPTICAL_SIZE = 1
  end

  enum DWRITE_FONT_AXIS_ATTRIBUTES : UInt32
    DWRITE_FONT_AXIS_ATTRIBUTES_NONE = 0
    DWRITE_FONT_AXIS_ATTRIBUTES_VARIABLE = 1
    DWRITE_FONT_AXIS_ATTRIBUTES_HIDDEN = 2
  end

  enum DWRITE_FONT_SOURCE_TYPE : Int32
    DWRITE_FONT_SOURCE_TYPE_UNKNOWN = 0
    DWRITE_FONT_SOURCE_TYPE_PER_MACHINE = 1
    DWRITE_FONT_SOURCE_TYPE_PER_USER = 2
    DWRITE_FONT_SOURCE_TYPE_APPX_PACKAGE = 3
    DWRITE_FONT_SOURCE_TYPE_REMOTE_FONT_PROVIDER = 4
  end

  union DWRITE_PANOSE
    values : UInt8[10]*
    family_kind : UInt8
    text : DWRITE_PANOSE_text_e__Struct
    script : DWRITE_PANOSE_script_e__Struct
    decorative : DWRITE_PANOSE_decorative_e__Struct
    symbol : DWRITE_PANOSE_symbol_e__Struct
  end

  struct DWRITE_COLOR_F
    r : Float32
    g : Float32
    b : Float32
    a : Float32
  end
  struct DWRITE_FONT_METRICS
    design_units_per_em : UInt16
    ascent : UInt16
    descent : UInt16
    line_gap : Int16
    cap_height : UInt16
    x_height : UInt16
    underline_position : Int16
    underline_thickness : UInt16
    strikethrough_position : Int16
    strikethrough_thickness : UInt16
  end
  struct DWRITE_GLYPH_METRICS
    left_side_bearing : Int32
    advance_width : UInt32
    right_side_bearing : Int32
    top_side_bearing : Int32
    advance_height : UInt32
    bottom_side_bearing : Int32
    vertical_origin_y : Int32
  end
  struct DWRITE_GLYPH_OFFSET
    advance_offset : Float32
    ascender_offset : Float32
  end
  struct DWRITE_MATRIX
    m11 : Float32
    m12 : Float32
    m21 : Float32
    m22 : Float32
    dx : Float32
    dy : Float32
  end
  struct DWRITE_TEXT_RANGE
    start_position : UInt32
    length : UInt32
  end
  struct DWRITE_FONT_FEATURE
    name_tag : DWRITE_FONT_FEATURE_TAG
    parameter : UInt32
  end
  struct DWRITE_TYPOGRAPHIC_FEATURES
    features : DWRITE_FONT_FEATURE*
    feature_count : UInt32
  end
  struct DWRITE_TRIMMING
    granularity : DWRITE_TRIMMING_GRANULARITY
    delimiter : UInt32
    delimiter_count : UInt32
  end
  struct DWRITE_SCRIPT_ANALYSIS
    script : UInt16
    shapes : DWRITE_SCRIPT_SHAPES
  end
  struct DWRITE_LINE_BREAKPOINT
    _bitfield : UInt8
  end
  struct DWRITE_SHAPING_TEXT_PROPERTIES
    _bitfield : UInt16
  end
  struct DWRITE_SHAPING_GLYPH_PROPERTIES
    _bitfield : UInt16
  end
  struct DWRITE_GLYPH_RUN
    font_face : IDWriteFontFace
    font_em_size : Float32
    glyph_count : UInt32
    glyph_indices : UInt16*
    glyph_advances : Float32*
    glyph_offsets : DWRITE_GLYPH_OFFSET*
    is_sideways : LibC::BOOL
    bidi_level : UInt32
  end
  struct DWRITE_GLYPH_RUN_DESCRIPTION
    locale_name : LibC::LPWSTR
    string : LibC::LPWSTR
    string_length : UInt32
    cluster_map : UInt16*
    text_position : UInt32
  end
  struct DWRITE_UNDERLINE
    width : Float32
    thickness : Float32
    offset : Float32
    run_height : Float32
    reading_direction : DWRITE_READING_DIRECTION
    flow_direction : DWRITE_FLOW_DIRECTION
    locale_name : LibC::LPWSTR
    measuring_mode : DWRITE_MEASURING_MODE
  end
  struct DWRITE_STRIKETHROUGH
    width : Float32
    thickness : Float32
    offset : Float32
    reading_direction : DWRITE_READING_DIRECTION
    flow_direction : DWRITE_FLOW_DIRECTION
    locale_name : LibC::LPWSTR
    measuring_mode : DWRITE_MEASURING_MODE
  end
  struct DWRITE_LINE_METRICS
    length : UInt32
    trailing_whitespace_length : UInt32
    newline_length : UInt32
    height : Float32
    baseline : Float32
    is_trimmed : LibC::BOOL
  end
  struct DWRITE_CLUSTER_METRICS
    width : Float32
    length : UInt16
    _bitfield : UInt16
  end
  struct DWRITE_TEXT_METRICS
    left : Float32
    top : Float32
    width : Float32
    width_including_trailing_whitespace : Float32
    height : Float32
    layout_width : Float32
    layout_height : Float32
    max_bidi_reordering_depth : UInt32
    line_count : UInt32
  end
  struct DWRITE_INLINE_OBJECT_METRICS
    width : Float32
    height : Float32
    baseline : Float32
    supports_sideways : LibC::BOOL
  end
  struct DWRITE_OVERHANG_METRICS
    left : Float32
    top : Float32
    right : Float32
    bottom : Float32
  end
  struct DWRITE_HIT_TEST_METRICS
    text_position : UInt32
    length : UInt32
    left : Float32
    top : Float32
    width : Float32
    height : Float32
    bidi_level : UInt32
    is_text : LibC::BOOL
    is_trimmed : LibC::BOOL
  end
  struct DWRITE_FONT_METRICS1
    __anonymous_base_d_write_1_l627_c38 : DWRITE_FONT_METRICS
    glyph_box_left : Int16
    glyph_box_top : Int16
    glyph_box_right : Int16
    glyph_box_bottom : Int16
    subscript_position_x : Int16
    subscript_position_y : Int16
    subscript_size_x : Int16
    subscript_size_y : Int16
    superscript_position_x : Int16
    superscript_position_y : Int16
    superscript_size_x : Int16
    superscript_size_y : Int16
    has_typographic_metrics : LibC::BOOL
  end
  struct DWRITE_CARET_METRICS
    slope_rise : Int16
    slope_run : Int16
    offset : Int16
  end
  struct DWRITE_PANOSE_decorative_e__Struct
    family_kind : UInt8
    decorative_class : UInt8
    weight : UInt8
    aspect : UInt8
    contrast : UInt8
    serif_variant : UInt8
    fill : UInt8
    lining : UInt8
    decorative_topology : UInt8
    character_range : UInt8
  end
  struct DWRITE_PANOSE_text_e__Struct
    family_kind : UInt8
    serif_style : UInt8
    weight : UInt8
    proportion : UInt8
    contrast : UInt8
    stroke_variation : UInt8
    arm_style : UInt8
    letterform : UInt8
    midline : UInt8
    x_height : UInt8
  end
  struct DWRITE_PANOSE_symbol_e__Struct
    family_kind : UInt8
    symbol_kind : UInt8
    weight : UInt8
    spacing : UInt8
    aspect_ratio_and_contrast : UInt8
    aspect_ratio94 : UInt8
    aspect_ratio119 : UInt8
    aspect_ratio157 : UInt8
    aspect_ratio163 : UInt8
    aspect_ratio211 : UInt8
  end
  struct DWRITE_PANOSE_script_e__Struct
    family_kind : UInt8
    tool_kind : UInt8
    weight : UInt8
    spacing : UInt8
    aspect_ratio : UInt8
    contrast : UInt8
    script_topology : UInt8
    script_form : UInt8
    finials : UInt8
    x_ascent : UInt8
  end
  struct DWRITE_UNICODE_RANGE
    first : UInt32
    last : UInt32
  end
  struct DWRITE_SCRIPT_PROPERTIES
    iso_script_code : UInt32
    iso_script_number : UInt32
    cluster_lookahead : UInt32
    justification_character : UInt32
    _bitfield : UInt32
  end
  struct DWRITE_JUSTIFICATION_OPPORTUNITY
    expansion_minimum : Float32
    expansion_maximum : Float32
    compression_maximum : Float32
    _bitfield : UInt32
  end
  struct DWRITE_TEXT_METRICS1
    base : DWRITE_TEXT_METRICS
    height_including_trailing_whitespace : Float32
  end
  struct DWRITE_COLOR_GLYPH_RUN
    glyph_run : DWRITE_GLYPH_RUN
    glyph_run_description : DWRITE_GLYPH_RUN_DESCRIPTION*
    baseline_origin_x : Float32
    baseline_origin_y : Float32
    run_color : DWRITE_COLOR_F
    palette_index : UInt16
  end
  struct DWRITE_FONT_PROPERTY
    property_id : DWRITE_FONT_PROPERTY_ID
    property_value : LibC::LPWSTR
    locale_name : LibC::LPWSTR
  end
  struct DWRITE_LINE_METRICS1
    base : DWRITE_LINE_METRICS
    leading_before : Float32
    leading_after : Float32
  end
  struct DWRITE_LINE_SPACING
    method : DWRITE_LINE_SPACING_METHOD
    height : Float32
    baseline : Float32
    leading_before : Float32
    font_line_gap_usage : DWRITE_FONT_LINE_GAP_USAGE
  end
  struct DWRITE_COLOR_GLYPH_RUN1
    base : DWRITE_COLOR_GLYPH_RUN
    glyph_image_format : DWRITE_GLYPH_IMAGE_FORMATS
    measuring_mode : DWRITE_MEASURING_MODE
  end
  struct DWRITE_GLYPH_IMAGE_DATA
    image_data : Void*
    image_data_size : UInt32
    unique_data_id : UInt32
    pixels_per_em : UInt32
    pixel_size : D2D_SIZE_U
    horizontal_left_origin : POINT
    horizontal_right_origin : POINT
    vertical_top_origin : POINT
    vertical_bottom_origin : POINT
  end
  struct DWRITE_FILE_FRAGMENT
    file_offset : UInt64
    fragment_size : UInt64
  end
  struct DWRITE_FONT_AXIS_VALUE
    axis_tag : DWRITE_FONT_AXIS_TAG
    value : Float32
  end
  struct DWRITE_FONT_AXIS_RANGE
    axis_tag : DWRITE_FONT_AXIS_TAG
    min_value : Float32
    max_value : Float32
  end


  struct IDWriteFontFileLoaderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    create_stream_from_key : UInt64
  end

  IDWriteFontFileLoader_GUID = "727cad4e-d6af-4c9e-8a08-d695b11caa49"
  IID_IDWriteFontFileLoader = LibC::GUID.new(0x727cad4e_u32, 0xd6af_u16, 0x4c9e_u16, StaticArray[0x8a_u8, 0x8_u8, 0xd6_u8, 0x95_u8, 0xb1_u8, 0x1c_u8, 0xaa_u8, 0x49_u8])
  struct IDWriteFontFileLoader
    lpVtbl : IDWriteFontFileLoaderVTbl*
  end

  struct IDWriteLocalFontFileLoaderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    create_stream_from_key : UInt64
    get_file_path_length_from_key : UInt64
    get_file_path_from_key : UInt64
    get_last_write_time_from_key : UInt64
  end

  IDWriteLocalFontFileLoader_GUID = "b2d9f3ec-c9fe-4a11-a2ec-d86208f7c0a2"
  IID_IDWriteLocalFontFileLoader = LibC::GUID.new(0xb2d9f3ec_u32, 0xc9fe_u16, 0x4a11_u16, StaticArray[0xa2_u8, 0xec_u8, 0xd8_u8, 0x62_u8, 0x8_u8, 0xf7_u8, 0xc0_u8, 0xa2_u8])
  struct IDWriteLocalFontFileLoader
    lpVtbl : IDWriteLocalFontFileLoaderVTbl*
  end

  struct IDWriteFontFileStreamVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    read_file_fragment : UInt64
    release_file_fragment : UInt64
    get_file_size : UInt64
    get_last_write_time : UInt64
  end

  IDWriteFontFileStream_GUID = "6d4865fe-0ab8-4d91-8f62-5dd6be34a3e0"
  IID_IDWriteFontFileStream = LibC::GUID.new(0x6d4865fe_u32, 0xab8_u16, 0x4d91_u16, StaticArray[0x8f_u8, 0x62_u8, 0x5d_u8, 0xd6_u8, 0xbe_u8, 0x34_u8, 0xa3_u8, 0xe0_u8])
  struct IDWriteFontFileStream
    lpVtbl : IDWriteFontFileStreamVTbl*
  end

  struct IDWriteFontFileVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_reference_key : UInt64
    get_loader : UInt64
    analyze : UInt64
  end

  IDWriteFontFile_GUID = "739d886a-cef5-47dc-8769-1a8b41bebbb0"
  IID_IDWriteFontFile = LibC::GUID.new(0x739d886a_u32, 0xcef5_u16, 0x47dc_u16, StaticArray[0x87_u8, 0x69_u8, 0x1a_u8, 0x8b_u8, 0x41_u8, 0xbe_u8, 0xbb_u8, 0xb0_u8])
  struct IDWriteFontFile
    lpVtbl : IDWriteFontFileVTbl*
  end

  struct IDWriteRenderingParamsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_gamma : UInt64
    get_enhanced_contrast : UInt64
    get_clear_type_level : UInt64
    get_pixel_geometry : UInt64
    get_rendering_mode : UInt64
  end

  IDWriteRenderingParams_GUID = "2f0da53a-2add-47cd-82ee-d9ec34688e75"
  IID_IDWriteRenderingParams = LibC::GUID.new(0x2f0da53a_u32, 0x2add_u16, 0x47cd_u16, StaticArray[0x82_u8, 0xee_u8, 0xd9_u8, 0xec_u8, 0x34_u8, 0x68_u8, 0x8e_u8, 0x75_u8])
  struct IDWriteRenderingParams
    lpVtbl : IDWriteRenderingParamsVTbl*
  end

  struct IDWriteFontFaceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type : UInt64
    get_files : UInt64
    get_index : UInt64
    get_simulations : UInt64
    is_symbol_font : UInt64
    get_metrics : UInt64
    get_glyph_count : UInt64
    get_design_glyph_metrics : UInt64
    get_glyph_indices : UInt64
    try_get_font_table : UInt64
    release_font_table : UInt64
    get_glyph_run_outline : UInt64
    get_recommended_rendering_mode : UInt64
    get_gdi_compatible_metrics : UInt64
    get_gdi_compatible_glyph_metrics : UInt64
  end

  IDWriteFontFace_GUID = "5f49804d-7024-4d43-bfa9-d25984f53849"
  IID_IDWriteFontFace = LibC::GUID.new(0x5f49804d_u32, 0x7024_u16, 0x4d43_u16, StaticArray[0xbf_u8, 0xa9_u8, 0xd2_u8, 0x59_u8, 0x84_u8, 0xf5_u8, 0x38_u8, 0x49_u8])
  struct IDWriteFontFace
    lpVtbl : IDWriteFontFaceVTbl*
  end

  struct IDWriteFontCollectionLoaderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    create_enumerator_from_key : UInt64
  end

  IDWriteFontCollectionLoader_GUID = "cca920e4-52f0-492b-bfa8-29c72ee0a468"
  IID_IDWriteFontCollectionLoader = LibC::GUID.new(0xcca920e4_u32, 0x52f0_u16, 0x492b_u16, StaticArray[0xbf_u8, 0xa8_u8, 0x29_u8, 0xc7_u8, 0x2e_u8, 0xe0_u8, 0xa4_u8, 0x68_u8])
  struct IDWriteFontCollectionLoader
    lpVtbl : IDWriteFontCollectionLoaderVTbl*
  end

  struct IDWriteFontFileEnumeratorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    move_next : UInt64
    get_current_font_file : UInt64
  end

  IDWriteFontFileEnumerator_GUID = "72755049-5ff7-435d-8348-4be97cfa6c7c"
  IID_IDWriteFontFileEnumerator = LibC::GUID.new(0x72755049_u32, 0x5ff7_u16, 0x435d_u16, StaticArray[0x83_u8, 0x48_u8, 0x4b_u8, 0xe9_u8, 0x7c_u8, 0xfa_u8, 0x6c_u8, 0x7c_u8])
  struct IDWriteFontFileEnumerator
    lpVtbl : IDWriteFontFileEnumeratorVTbl*
  end

  struct IDWriteLocalizedStringsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_count : UInt64
    find_locale_name : UInt64
    get_locale_name_length : UInt64
    get_locale_name : UInt64
    get_string_length : UInt64
    get_string : UInt64
  end

  IDWriteLocalizedStrings_GUID = "08256209-099a-4b34-b86d-c22b110e7771"
  IID_IDWriteLocalizedStrings = LibC::GUID.new(0x8256209_u32, 0x99a_u16, 0x4b34_u16, StaticArray[0xb8_u8, 0x6d_u8, 0xc2_u8, 0x2b_u8, 0x11_u8, 0xe_u8, 0x77_u8, 0x71_u8])
  struct IDWriteLocalizedStrings
    lpVtbl : IDWriteLocalizedStringsVTbl*
  end

  struct IDWriteFontCollectionVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_font_family_count : UInt64
    get_font_family : UInt64
    find_family_name : UInt64
    get_font_from_font_face : UInt64
  end

  IDWriteFontCollection_GUID = "a84cee02-3eea-4eee-a827-87c1a02a0fcc"
  IID_IDWriteFontCollection = LibC::GUID.new(0xa84cee02_u32, 0x3eea_u16, 0x4eee_u16, StaticArray[0xa8_u8, 0x27_u8, 0x87_u8, 0xc1_u8, 0xa0_u8, 0x2a_u8, 0xf_u8, 0xcc_u8])
  struct IDWriteFontCollection
    lpVtbl : IDWriteFontCollectionVTbl*
  end

  struct IDWriteFontListVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_font_collection : UInt64
    get_font_count : UInt64
    get_font : UInt64
  end

  IDWriteFontList_GUID = "1a0d8438-1d97-4ec1-aef9-a2fb86ed6acb"
  IID_IDWriteFontList = LibC::GUID.new(0x1a0d8438_u32, 0x1d97_u16, 0x4ec1_u16, StaticArray[0xae_u8, 0xf9_u8, 0xa2_u8, 0xfb_u8, 0x86_u8, 0xed_u8, 0x6a_u8, 0xcb_u8])
  struct IDWriteFontList
    lpVtbl : IDWriteFontListVTbl*
  end

  struct IDWriteFontFamilyVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_font_collection : UInt64
    get_font_count : UInt64
    get_font : UInt64
    get_family_names : UInt64
    get_first_matching_font : UInt64
    get_matching_fonts : UInt64
  end

  IDWriteFontFamily_GUID = "da20d8ef-812a-4c43-9802-62ec4abd7add"
  IID_IDWriteFontFamily = LibC::GUID.new(0xda20d8ef_u32, 0x812a_u16, 0x4c43_u16, StaticArray[0x98_u8, 0x2_u8, 0x62_u8, 0xec_u8, 0x4a_u8, 0xbd_u8, 0x7a_u8, 0xdd_u8])
  struct IDWriteFontFamily
    lpVtbl : IDWriteFontFamilyVTbl*
  end

  struct IDWriteFontVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_font_family : UInt64
    get_weight : UInt64
    get_stretch : UInt64
    get_style : UInt64
    is_symbol_font : UInt64
    get_face_names : UInt64
    get_informational_strings : UInt64
    get_simulations : UInt64
    get_metrics : UInt64
    has_character : UInt64
    create_font_face : UInt64
  end

  IDWriteFont_GUID = "acd16696-8c14-4f5d-877e-fe3fc1d32737"
  IID_IDWriteFont = LibC::GUID.new(0xacd16696_u32, 0x8c14_u16, 0x4f5d_u16, StaticArray[0x87_u8, 0x7e_u8, 0xfe_u8, 0x3f_u8, 0xc1_u8, 0xd3_u8, 0x27_u8, 0x37_u8])
  struct IDWriteFont
    lpVtbl : IDWriteFontVTbl*
  end

  struct IDWriteTextFormatVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_text_alignment : UInt64
    set_paragraph_alignment : UInt64
    set_word_wrapping : UInt64
    set_reading_direction : UInt64
    set_flow_direction : UInt64
    set_incremental_tab_stop : UInt64
    set_trimming : UInt64
    set_line_spacing : UInt64
    get_text_alignment : UInt64
    get_paragraph_alignment : UInt64
    get_word_wrapping : UInt64
    get_reading_direction : UInt64
    get_flow_direction : UInt64
    get_incremental_tab_stop : UInt64
    get_trimming : UInt64
    get_line_spacing : UInt64
    get_font_collection : UInt64
    get_font_family_name_length : UInt64
    get_font_family_name : UInt64
    get_font_weight : UInt64
    get_font_style : UInt64
    get_font_stretch : UInt64
    get_font_size : UInt64
    get_locale_name_length : UInt64
    get_locale_name : UInt64
  end

  IDWriteTextFormat_GUID = "9c906818-31d7-4fd3-a151-7c5e225db55a"
  IID_IDWriteTextFormat = LibC::GUID.new(0x9c906818_u32, 0x31d7_u16, 0x4fd3_u16, StaticArray[0xa1_u8, 0x51_u8, 0x7c_u8, 0x5e_u8, 0x22_u8, 0x5d_u8, 0xb5_u8, 0x5a_u8])
  struct IDWriteTextFormat
    lpVtbl : IDWriteTextFormatVTbl*
  end

  struct IDWriteTypographyVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    add_font_feature : UInt64
    get_font_feature_count : UInt64
    get_font_feature : UInt64
  end

  IDWriteTypography_GUID = "55f1112b-1dc2-4b3c-9541-f46894ed85b6"
  IID_IDWriteTypography = LibC::GUID.new(0x55f1112b_u32, 0x1dc2_u16, 0x4b3c_u16, StaticArray[0x95_u8, 0x41_u8, 0xf4_u8, 0x68_u8, 0x94_u8, 0xed_u8, 0x85_u8, 0xb6_u8])
  struct IDWriteTypography
    lpVtbl : IDWriteTypographyVTbl*
  end

  struct IDWriteNumberSubstitutionVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
  end

  IDWriteNumberSubstitution_GUID = "14885cc9-bab0-4f90-b6ed-5c366a2cd03d"
  IID_IDWriteNumberSubstitution = LibC::GUID.new(0x14885cc9_u32, 0xbab0_u16, 0x4f90_u16, StaticArray[0xb6_u8, 0xed_u8, 0x5c_u8, 0x36_u8, 0x6a_u8, 0x2c_u8, 0xd0_u8, 0x3d_u8])
  struct IDWriteNumberSubstitution
    lpVtbl : IDWriteNumberSubstitutionVTbl*
  end

  struct IDWriteTextAnalysisSourceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_text_at_position : UInt64
    get_text_before_position : UInt64
    get_paragraph_reading_direction : UInt64
    get_locale_name : UInt64
    get_number_substitution : UInt64
  end

  IDWriteTextAnalysisSource_GUID = "688e1a58-5094-47c8-adc8-fbcea60ae92b"
  IID_IDWriteTextAnalysisSource = LibC::GUID.new(0x688e1a58_u32, 0x5094_u16, 0x47c8_u16, StaticArray[0xad_u8, 0xc8_u8, 0xfb_u8, 0xce_u8, 0xa6_u8, 0xa_u8, 0xe9_u8, 0x2b_u8])
  struct IDWriteTextAnalysisSource
    lpVtbl : IDWriteTextAnalysisSourceVTbl*
  end

  struct IDWriteTextAnalysisSinkVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_script_analysis : UInt64
    set_line_breakpoints : UInt64
    set_bidi_level : UInt64
    set_number_substitution : UInt64
  end

  IDWriteTextAnalysisSink_GUID = "5810cd44-0ca0-4701-b3fa-bec5182ae4f6"
  IID_IDWriteTextAnalysisSink = LibC::GUID.new(0x5810cd44_u32, 0xca0_u16, 0x4701_u16, StaticArray[0xb3_u8, 0xfa_u8, 0xbe_u8, 0xc5_u8, 0x18_u8, 0x2a_u8, 0xe4_u8, 0xf6_u8])
  struct IDWriteTextAnalysisSink
    lpVtbl : IDWriteTextAnalysisSinkVTbl*
  end

  struct IDWriteTextAnalyzerVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    analyze_script : UInt64
    analyze_bidi : UInt64
    analyze_number_substitution : UInt64
    analyze_line_breakpoints : UInt64
    get_glyphs : UInt64
    get_glyph_placements : UInt64
    get_gdi_compatible_glyph_placements : UInt64
  end

  IDWriteTextAnalyzer_GUID = "b7e6163e-7f46-43b4-84b3-e4e6249c365d"
  IID_IDWriteTextAnalyzer = LibC::GUID.new(0xb7e6163e_u32, 0x7f46_u16, 0x43b4_u16, StaticArray[0x84_u8, 0xb3_u8, 0xe4_u8, 0xe6_u8, 0x24_u8, 0x9c_u8, 0x36_u8, 0x5d_u8])
  struct IDWriteTextAnalyzer
    lpVtbl : IDWriteTextAnalyzerVTbl*
  end

  struct IDWriteInlineObjectVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    draw : UInt64
    get_metrics : UInt64
    get_overhang_metrics : UInt64
    get_break_conditions : UInt64
  end

  IDWriteInlineObject_GUID = "8339fde3-106f-47ab-8373-1c6295eb10b3"
  IID_IDWriteInlineObject = LibC::GUID.new(0x8339fde3_u32, 0x106f_u16, 0x47ab_u16, StaticArray[0x83_u8, 0x73_u8, 0x1c_u8, 0x62_u8, 0x95_u8, 0xeb_u8, 0x10_u8, 0xb3_u8])
  struct IDWriteInlineObject
    lpVtbl : IDWriteInlineObjectVTbl*
  end

  struct IDWritePixelSnappingVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    is_pixel_snapping_disabled : UInt64
    get_current_transform : UInt64
    get_pixels_per_dip : UInt64
  end

  IDWritePixelSnapping_GUID = "eaf3a2da-ecf4-4d24-b644-b34f6842024b"
  IID_IDWritePixelSnapping = LibC::GUID.new(0xeaf3a2da_u32, 0xecf4_u16, 0x4d24_u16, StaticArray[0xb6_u8, 0x44_u8, 0xb3_u8, 0x4f_u8, 0x68_u8, 0x42_u8, 0x2_u8, 0x4b_u8])
  struct IDWritePixelSnapping
    lpVtbl : IDWritePixelSnappingVTbl*
  end

  struct IDWriteTextRendererVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    is_pixel_snapping_disabled : UInt64
    get_current_transform : UInt64
    get_pixels_per_dip : UInt64
    draw_glyph_run : UInt64
    draw_underline : UInt64
    draw_strikethrough : UInt64
    draw_inline_object : UInt64
  end

  IDWriteTextRenderer_GUID = "ef8a8135-5cc6-45fe-8825-c5a0724eb819"
  IID_IDWriteTextRenderer = LibC::GUID.new(0xef8a8135_u32, 0x5cc6_u16, 0x45fe_u16, StaticArray[0x88_u8, 0x25_u8, 0xc5_u8, 0xa0_u8, 0x72_u8, 0x4e_u8, 0xb8_u8, 0x19_u8])
  struct IDWriteTextRenderer
    lpVtbl : IDWriteTextRendererVTbl*
  end

  struct IDWriteTextLayoutVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_text_alignment : UInt64
    set_paragraph_alignment : UInt64
    set_word_wrapping : UInt64
    set_reading_direction : UInt64
    set_flow_direction : UInt64
    set_incremental_tab_stop : UInt64
    set_trimming : UInt64
    set_line_spacing : UInt64
    get_text_alignment : UInt64
    get_paragraph_alignment : UInt64
    get_word_wrapping : UInt64
    get_reading_direction : UInt64
    get_flow_direction : UInt64
    get_incremental_tab_stop : UInt64
    get_trimming : UInt64
    get_line_spacing : UInt64
    get_font_collection : UInt64
    get_font_family_name_length : UInt64
    get_font_family_name : UInt64
    get_font_weight : UInt64
    get_font_style : UInt64
    get_font_stretch : UInt64
    get_font_size : UInt64
    get_locale_name_length : UInt64
    get_locale_name : UInt64
    set_max_width : UInt64
    set_max_height : UInt64
    set_font_collection : UInt64
    set_font_family_name : UInt64
    set_font_weight : UInt64
    set_font_style : UInt64
    set_font_stretch : UInt64
    set_font_size : UInt64
    set_underline : UInt64
    set_strikethrough : UInt64
    set_drawing_effect : UInt64
    set_inline_object : UInt64
    set_typography : UInt64
    set_locale_name : UInt64
    get_max_width : UInt64
    get_max_height : UInt64
    get_font_collection2 : UInt64
    get_font_family_name_length2 : UInt64
    get_font_family_name2 : UInt64
    get_font_weight2 : UInt64
    get_font_style2 : UInt64
    get_font_stretch2 : UInt64
    get_font_size2 : UInt64
    get_underline : UInt64
    get_strikethrough : UInt64
    get_drawing_effect : UInt64
    get_inline_object : UInt64
    get_typography : UInt64
    get_locale_name_length2 : UInt64
    get_locale_name2 : UInt64
    draw : UInt64
    get_line_metrics : UInt64
    get_metrics : UInt64
    get_overhang_metrics : UInt64
    get_cluster_metrics : UInt64
    determine_min_width : UInt64
    hit_test_point : UInt64
    hit_test_text_position : UInt64
    hit_test_text_range : UInt64
  end

  IDWriteTextLayout_GUID = "53737037-6d14-410b-9bfe-0b182bb70961"
  IID_IDWriteTextLayout = LibC::GUID.new(0x53737037_u32, 0x6d14_u16, 0x410b_u16, StaticArray[0x9b_u8, 0xfe_u8, 0xb_u8, 0x18_u8, 0x2b_u8, 0xb7_u8, 0x9_u8, 0x61_u8])
  struct IDWriteTextLayout
    lpVtbl : IDWriteTextLayoutVTbl*
  end

  struct IDWriteBitmapRenderTargetVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    draw_glyph_run : UInt64
    get_memory_dc : UInt64
    get_pixels_per_dip : UInt64
    set_pixels_per_dip : UInt64
    get_current_transform : UInt64
    set_current_transform : UInt64
    get_size : UInt64
    resize : UInt64
  end

  IDWriteBitmapRenderTarget_GUID = "5e5a32a3-8dff-4773-9ff6-0696eab77267"
  IID_IDWriteBitmapRenderTarget = LibC::GUID.new(0x5e5a32a3_u32, 0x8dff_u16, 0x4773_u16, StaticArray[0x9f_u8, 0xf6_u8, 0x6_u8, 0x96_u8, 0xea_u8, 0xb7_u8, 0x72_u8, 0x67_u8])
  struct IDWriteBitmapRenderTarget
    lpVtbl : IDWriteBitmapRenderTargetVTbl*
  end

  struct IDWriteGdiInteropVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    create_font_from_logfont : UInt64
    convert_font_to_logfont : UInt64
    convert_font_face_to_logfont : UInt64
    create_font_face_from_hdc : UInt64
    create_bitmap_render_target : UInt64
  end

  IDWriteGdiInterop_GUID = "1edd9491-9853-4299-898f-6432983b6f3a"
  IID_IDWriteGdiInterop = LibC::GUID.new(0x1edd9491_u32, 0x9853_u16, 0x4299_u16, StaticArray[0x89_u8, 0x8f_u8, 0x64_u8, 0x32_u8, 0x98_u8, 0x3b_u8, 0x6f_u8, 0x3a_u8])
  struct IDWriteGdiInterop
    lpVtbl : IDWriteGdiInteropVTbl*
  end

  struct IDWriteGlyphRunAnalysisVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_alpha_texture_bounds : UInt64
    create_alpha_texture : UInt64
    get_alpha_blend_params : UInt64
  end

  IDWriteGlyphRunAnalysis_GUID = "7d97dbf7-e085-42d4-81e3-6a883bded118"
  IID_IDWriteGlyphRunAnalysis = LibC::GUID.new(0x7d97dbf7_u32, 0xe085_u16, 0x42d4_u16, StaticArray[0x81_u8, 0xe3_u8, 0x6a_u8, 0x88_u8, 0x3b_u8, 0xde_u8, 0xd1_u8, 0x18_u8])
  struct IDWriteGlyphRunAnalysis
    lpVtbl : IDWriteGlyphRunAnalysisVTbl*
  end

  struct IDWriteFactoryVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_system_font_collection : UInt64
    create_custom_font_collection : UInt64
    register_font_collection_loader : UInt64
    unregister_font_collection_loader : UInt64
    create_font_file_reference : UInt64
    create_custom_font_file_reference : UInt64
    create_font_face : UInt64
    create_rendering_params : UInt64
    create_monitor_rendering_params : UInt64
    create_custom_rendering_params : UInt64
    register_font_file_loader : UInt64
    unregister_font_file_loader : UInt64
    create_text_format : UInt64
    create_typography : UInt64
    get_gdi_interop : UInt64
    create_text_layout : UInt64
    create_gdi_compatible_text_layout : UInt64
    create_ellipsis_trimming_sign : UInt64
    create_text_analyzer : UInt64
    create_number_substitution : UInt64
    create_glyph_run_analysis : UInt64
  end

  IDWriteFactory_GUID = "b859ee5a-d838-4b5b-a2e8-1adc7d93db48"
  IID_IDWriteFactory = LibC::GUID.new(0xb859ee5a_u32, 0xd838_u16, 0x4b5b_u16, StaticArray[0xa2_u8, 0xe8_u8, 0x1a_u8, 0xdc_u8, 0x7d_u8, 0x93_u8, 0xdb_u8, 0x48_u8])
  struct IDWriteFactory
    lpVtbl : IDWriteFactoryVTbl*
  end

  struct IDWriteFactory1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_system_font_collection : UInt64
    create_custom_font_collection : UInt64
    register_font_collection_loader : UInt64
    unregister_font_collection_loader : UInt64
    create_font_file_reference : UInt64
    create_custom_font_file_reference : UInt64
    create_font_face : UInt64
    create_rendering_params : UInt64
    create_monitor_rendering_params : UInt64
    create_custom_rendering_params : UInt64
    register_font_file_loader : UInt64
    unregister_font_file_loader : UInt64
    create_text_format : UInt64
    create_typography : UInt64
    get_gdi_interop : UInt64
    create_text_layout : UInt64
    create_gdi_compatible_text_layout : UInt64
    create_ellipsis_trimming_sign : UInt64
    create_text_analyzer : UInt64
    create_number_substitution : UInt64
    create_glyph_run_analysis : UInt64
    get_eudc_font_collection : UInt64
    create_custom_rendering_params2 : UInt64
  end

  IDWriteFactory1_GUID = "30572f99-dac6-41db-a16e-0486307e606a"
  IID_IDWriteFactory1 = LibC::GUID.new(0x30572f99_u32, 0xdac6_u16, 0x41db_u16, StaticArray[0xa1_u8, 0x6e_u8, 0x4_u8, 0x86_u8, 0x30_u8, 0x7e_u8, 0x60_u8, 0x6a_u8])
  struct IDWriteFactory1
    lpVtbl : IDWriteFactory1VTbl*
  end

  struct IDWriteFontFace1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type : UInt64
    get_files : UInt64
    get_index : UInt64
    get_simulations : UInt64
    is_symbol_font : UInt64
    get_metrics : UInt64
    get_glyph_count : UInt64
    get_design_glyph_metrics : UInt64
    get_glyph_indices : UInt64
    try_get_font_table : UInt64
    release_font_table : UInt64
    get_glyph_run_outline : UInt64
    get_recommended_rendering_mode : UInt64
    get_gdi_compatible_metrics : UInt64
    get_gdi_compatible_glyph_metrics : UInt64
    get_metrics2 : UInt64
    get_gdi_compatible_metrics2 : UInt64
    get_caret_metrics : UInt64
    get_unicode_ranges : UInt64
    is_monospaced_font : UInt64
    get_design_glyph_advances : UInt64
    get_gdi_compatible_glyph_advances : UInt64
    get_kerning_pair_adjustments : UInt64
    has_kerning_pairs : UInt64
    get_recommended_rendering_mode2 : UInt64
    get_vertical_glyph_variants : UInt64
    has_vertical_glyph_variants : UInt64
  end

  IDWriteFontFace1_GUID = "a71efdb4-9fdb-4838-ad90-cfc3be8c3daf"
  IID_IDWriteFontFace1 = LibC::GUID.new(0xa71efdb4_u32, 0x9fdb_u16, 0x4838_u16, StaticArray[0xad_u8, 0x90_u8, 0xcf_u8, 0xc3_u8, 0xbe_u8, 0x8c_u8, 0x3d_u8, 0xaf_u8])
  struct IDWriteFontFace1
    lpVtbl : IDWriteFontFace1VTbl*
  end

  struct IDWriteFont1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_font_family : UInt64
    get_weight : UInt64
    get_stretch : UInt64
    get_style : UInt64
    is_symbol_font : UInt64
    get_face_names : UInt64
    get_informational_strings : UInt64
    get_simulations : UInt64
    get_metrics : UInt64
    has_character : UInt64
    create_font_face : UInt64
    get_metrics2 : UInt64
    get_panose : UInt64
    get_unicode_ranges : UInt64
    is_monospaced_font : UInt64
  end

  IDWriteFont1_GUID = "acd16696-8c14-4f5d-877e-fe3fc1d32738"
  IID_IDWriteFont1 = LibC::GUID.new(0xacd16696_u32, 0x8c14_u16, 0x4f5d_u16, StaticArray[0x87_u8, 0x7e_u8, 0xfe_u8, 0x3f_u8, 0xc1_u8, 0xd3_u8, 0x27_u8, 0x38_u8])
  struct IDWriteFont1
    lpVtbl : IDWriteFont1VTbl*
  end

  struct IDWriteRenderingParams1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_gamma : UInt64
    get_enhanced_contrast : UInt64
    get_clear_type_level : UInt64
    get_pixel_geometry : UInt64
    get_rendering_mode : UInt64
    get_grayscale_enhanced_contrast : UInt64
  end

  IDWriteRenderingParams1_GUID = "94413cf4-a6fc-4248-8b50-6674348fcad3"
  IID_IDWriteRenderingParams1 = LibC::GUID.new(0x94413cf4_u32, 0xa6fc_u16, 0x4248_u16, StaticArray[0x8b_u8, 0x50_u8, 0x66_u8, 0x74_u8, 0x34_u8, 0x8f_u8, 0xca_u8, 0xd3_u8])
  struct IDWriteRenderingParams1
    lpVtbl : IDWriteRenderingParams1VTbl*
  end

  struct IDWriteTextAnalyzer1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    analyze_script : UInt64
    analyze_bidi : UInt64
    analyze_number_substitution : UInt64
    analyze_line_breakpoints : UInt64
    get_glyphs : UInt64
    get_glyph_placements : UInt64
    get_gdi_compatible_glyph_placements : UInt64
    apply_character_spacing : UInt64
    get_baseline : UInt64
    analyze_vertical_glyph_orientation : UInt64
    get_glyph_orientation_transform : UInt64
    get_script_properties : UInt64
    get_text_complexity : UInt64
    get_justification_opportunities : UInt64
    justify_glyph_advances : UInt64
    get_justified_glyphs : UInt64
  end

  IDWriteTextAnalyzer1_GUID = "80dad800-e21f-4e83-96ce-bfcce500db7c"
  IID_IDWriteTextAnalyzer1 = LibC::GUID.new(0x80dad800_u32, 0xe21f_u16, 0x4e83_u16, StaticArray[0x96_u8, 0xce_u8, 0xbf_u8, 0xcc_u8, 0xe5_u8, 0x0_u8, 0xdb_u8, 0x7c_u8])
  struct IDWriteTextAnalyzer1
    lpVtbl : IDWriteTextAnalyzer1VTbl*
  end

  struct IDWriteTextAnalysisSource1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_text_at_position : UInt64
    get_text_before_position : UInt64
    get_paragraph_reading_direction : UInt64
    get_locale_name : UInt64
    get_number_substitution : UInt64
    get_vertical_glyph_orientation : UInt64
  end

  IDWriteTextAnalysisSource1_GUID = "639cfad8-0fb4-4b21-a58a-067920120009"
  IID_IDWriteTextAnalysisSource1 = LibC::GUID.new(0x639cfad8_u32, 0xfb4_u16, 0x4b21_u16, StaticArray[0xa5_u8, 0x8a_u8, 0x6_u8, 0x79_u8, 0x20_u8, 0x12_u8, 0x0_u8, 0x9_u8])
  struct IDWriteTextAnalysisSource1
    lpVtbl : IDWriteTextAnalysisSource1VTbl*
  end

  struct IDWriteTextAnalysisSink1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_script_analysis : UInt64
    set_line_breakpoints : UInt64
    set_bidi_level : UInt64
    set_number_substitution : UInt64
    set_glyph_orientation : UInt64
  end

  IDWriteTextAnalysisSink1_GUID = "b0d941a0-85e7-4d8b-9fd3-5ced9934482a"
  IID_IDWriteTextAnalysisSink1 = LibC::GUID.new(0xb0d941a0_u32, 0x85e7_u16, 0x4d8b_u16, StaticArray[0x9f_u8, 0xd3_u8, 0x5c_u8, 0xed_u8, 0x99_u8, 0x34_u8, 0x48_u8, 0x2a_u8])
  struct IDWriteTextAnalysisSink1
    lpVtbl : IDWriteTextAnalysisSink1VTbl*
  end

  struct IDWriteTextLayout1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_text_alignment : UInt64
    set_paragraph_alignment : UInt64
    set_word_wrapping : UInt64
    set_reading_direction : UInt64
    set_flow_direction : UInt64
    set_incremental_tab_stop : UInt64
    set_trimming : UInt64
    set_line_spacing : UInt64
    get_text_alignment : UInt64
    get_paragraph_alignment : UInt64
    get_word_wrapping : UInt64
    get_reading_direction : UInt64
    get_flow_direction : UInt64
    get_incremental_tab_stop : UInt64
    get_trimming : UInt64
    get_line_spacing : UInt64
    get_font_collection : UInt64
    get_font_family_name_length : UInt64
    get_font_family_name : UInt64
    get_font_weight : UInt64
    get_font_style : UInt64
    get_font_stretch : UInt64
    get_font_size : UInt64
    get_locale_name_length : UInt64
    get_locale_name : UInt64
    set_max_width : UInt64
    set_max_height : UInt64
    set_font_collection : UInt64
    set_font_family_name : UInt64
    set_font_weight : UInt64
    set_font_style : UInt64
    set_font_stretch : UInt64
    set_font_size : UInt64
    set_underline : UInt64
    set_strikethrough : UInt64
    set_drawing_effect : UInt64
    set_inline_object : UInt64
    set_typography : UInt64
    set_locale_name : UInt64
    get_max_width : UInt64
    get_max_height : UInt64
    get_font_collection2 : UInt64
    get_font_family_name_length2 : UInt64
    get_font_family_name2 : UInt64
    get_font_weight2 : UInt64
    get_font_style2 : UInt64
    get_font_stretch2 : UInt64
    get_font_size2 : UInt64
    get_underline : UInt64
    get_strikethrough : UInt64
    get_drawing_effect : UInt64
    get_inline_object : UInt64
    get_typography : UInt64
    get_locale_name_length2 : UInt64
    get_locale_name2 : UInt64
    draw : UInt64
    get_line_metrics : UInt64
    get_metrics : UInt64
    get_overhang_metrics : UInt64
    get_cluster_metrics : UInt64
    determine_min_width : UInt64
    hit_test_point : UInt64
    hit_test_text_position : UInt64
    hit_test_text_range : UInt64
    set_pair_kerning : UInt64
    get_pair_kerning : UInt64
    set_character_spacing : UInt64
    get_character_spacing : UInt64
  end

  IDWriteTextLayout1_GUID = "9064d822-80a7-465c-a986-df65f78b8feb"
  IID_IDWriteTextLayout1 = LibC::GUID.new(0x9064d822_u32, 0x80a7_u16, 0x465c_u16, StaticArray[0xa9_u8, 0x86_u8, 0xdf_u8, 0x65_u8, 0xf7_u8, 0x8b_u8, 0x8f_u8, 0xeb_u8])
  struct IDWriteTextLayout1
    lpVtbl : IDWriteTextLayout1VTbl*
  end

  struct IDWriteBitmapRenderTarget1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    draw_glyph_run : UInt64
    get_memory_dc : UInt64
    get_pixels_per_dip : UInt64
    set_pixels_per_dip : UInt64
    get_current_transform : UInt64
    set_current_transform : UInt64
    get_size : UInt64
    resize : UInt64
    get_text_antialias_mode : UInt64
    set_text_antialias_mode : UInt64
  end

  IDWriteBitmapRenderTarget1_GUID = "791e8298-3ef3-4230-9880-c9bdecc42064"
  IID_IDWriteBitmapRenderTarget1 = LibC::GUID.new(0x791e8298_u32, 0x3ef3_u16, 0x4230_u16, StaticArray[0x98_u8, 0x80_u8, 0xc9_u8, 0xbd_u8, 0xec_u8, 0xc4_u8, 0x20_u8, 0x64_u8])
  struct IDWriteBitmapRenderTarget1
    lpVtbl : IDWriteBitmapRenderTarget1VTbl*
  end

  struct IDWriteTextRenderer1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    is_pixel_snapping_disabled : UInt64
    get_current_transform : UInt64
    get_pixels_per_dip : UInt64
    draw_glyph_run : UInt64
    draw_underline : UInt64
    draw_strikethrough : UInt64
    draw_inline_object : UInt64
    draw_glyph_run2 : UInt64
    draw_underline2 : UInt64
    draw_strikethrough2 : UInt64
    draw_inline_object2 : UInt64
  end

  IDWriteTextRenderer1_GUID = "d3e0e934-22a0-427e-aae4-7d9574b59db1"
  IID_IDWriteTextRenderer1 = LibC::GUID.new(0xd3e0e934_u32, 0x22a0_u16, 0x427e_u16, StaticArray[0xaa_u8, 0xe4_u8, 0x7d_u8, 0x95_u8, 0x74_u8, 0xb5_u8, 0x9d_u8, 0xb1_u8])
  struct IDWriteTextRenderer1
    lpVtbl : IDWriteTextRenderer1VTbl*
  end

  struct IDWriteTextFormat1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_text_alignment : UInt64
    set_paragraph_alignment : UInt64
    set_word_wrapping : UInt64
    set_reading_direction : UInt64
    set_flow_direction : UInt64
    set_incremental_tab_stop : UInt64
    set_trimming : UInt64
    set_line_spacing : UInt64
    get_text_alignment : UInt64
    get_paragraph_alignment : UInt64
    get_word_wrapping : UInt64
    get_reading_direction : UInt64
    get_flow_direction : UInt64
    get_incremental_tab_stop : UInt64
    get_trimming : UInt64
    get_line_spacing : UInt64
    get_font_collection : UInt64
    get_font_family_name_length : UInt64
    get_font_family_name : UInt64
    get_font_weight : UInt64
    get_font_style : UInt64
    get_font_stretch : UInt64
    get_font_size : UInt64
    get_locale_name_length : UInt64
    get_locale_name : UInt64
    set_vertical_glyph_orientation : UInt64
    get_vertical_glyph_orientation : UInt64
    set_last_line_wrapping : UInt64
    get_last_line_wrapping : UInt64
    set_optical_alignment : UInt64
    get_optical_alignment : UInt64
    set_font_fallback : UInt64
    get_font_fallback : UInt64
  end

  IDWriteTextFormat1_GUID = "5f174b49-0d8b-4cfb-8bca-f1cce9d06c67"
  IID_IDWriteTextFormat1 = LibC::GUID.new(0x5f174b49_u32, 0xd8b_u16, 0x4cfb_u16, StaticArray[0x8b_u8, 0xca_u8, 0xf1_u8, 0xcc_u8, 0xe9_u8, 0xd0_u8, 0x6c_u8, 0x67_u8])
  struct IDWriteTextFormat1
    lpVtbl : IDWriteTextFormat1VTbl*
  end

  struct IDWriteTextLayout2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_text_alignment : UInt64
    set_paragraph_alignment : UInt64
    set_word_wrapping : UInt64
    set_reading_direction : UInt64
    set_flow_direction : UInt64
    set_incremental_tab_stop : UInt64
    set_trimming : UInt64
    set_line_spacing : UInt64
    get_text_alignment : UInt64
    get_paragraph_alignment : UInt64
    get_word_wrapping : UInt64
    get_reading_direction : UInt64
    get_flow_direction : UInt64
    get_incremental_tab_stop : UInt64
    get_trimming : UInt64
    get_line_spacing : UInt64
    get_font_collection : UInt64
    get_font_family_name_length : UInt64
    get_font_family_name : UInt64
    get_font_weight : UInt64
    get_font_style : UInt64
    get_font_stretch : UInt64
    get_font_size : UInt64
    get_locale_name_length : UInt64
    get_locale_name : UInt64
    set_max_width : UInt64
    set_max_height : UInt64
    set_font_collection : UInt64
    set_font_family_name : UInt64
    set_font_weight : UInt64
    set_font_style : UInt64
    set_font_stretch : UInt64
    set_font_size : UInt64
    set_underline : UInt64
    set_strikethrough : UInt64
    set_drawing_effect : UInt64
    set_inline_object : UInt64
    set_typography : UInt64
    set_locale_name : UInt64
    get_max_width : UInt64
    get_max_height : UInt64
    get_font_collection2 : UInt64
    get_font_family_name_length2 : UInt64
    get_font_family_name2 : UInt64
    get_font_weight2 : UInt64
    get_font_style2 : UInt64
    get_font_stretch2 : UInt64
    get_font_size2 : UInt64
    get_underline : UInt64
    get_strikethrough : UInt64
    get_drawing_effect : UInt64
    get_inline_object : UInt64
    get_typography : UInt64
    get_locale_name_length2 : UInt64
    get_locale_name2 : UInt64
    draw : UInt64
    get_line_metrics : UInt64
    get_metrics : UInt64
    get_overhang_metrics : UInt64
    get_cluster_metrics : UInt64
    determine_min_width : UInt64
    hit_test_point : UInt64
    hit_test_text_position : UInt64
    hit_test_text_range : UInt64
    set_pair_kerning : UInt64
    get_pair_kerning : UInt64
    set_character_spacing : UInt64
    get_character_spacing : UInt64
    get_metrics2 : UInt64
    set_vertical_glyph_orientation : UInt64
    get_vertical_glyph_orientation : UInt64
    set_last_line_wrapping : UInt64
    get_last_line_wrapping : UInt64
    set_optical_alignment : UInt64
    get_optical_alignment : UInt64
    set_font_fallback : UInt64
    get_font_fallback : UInt64
  end

  IDWriteTextLayout2_GUID = "1093c18f-8d5e-43f0-b064-0917311b525e"
  IID_IDWriteTextLayout2 = LibC::GUID.new(0x1093c18f_u32, 0x8d5e_u16, 0x43f0_u16, StaticArray[0xb0_u8, 0x64_u8, 0x9_u8, 0x17_u8, 0x31_u8, 0x1b_u8, 0x52_u8, 0x5e_u8])
  struct IDWriteTextLayout2
    lpVtbl : IDWriteTextLayout2VTbl*
  end

  struct IDWriteTextAnalyzer2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    analyze_script : UInt64
    analyze_bidi : UInt64
    analyze_number_substitution : UInt64
    analyze_line_breakpoints : UInt64
    get_glyphs : UInt64
    get_glyph_placements : UInt64
    get_gdi_compatible_glyph_placements : UInt64
    apply_character_spacing : UInt64
    get_baseline : UInt64
    analyze_vertical_glyph_orientation : UInt64
    get_glyph_orientation_transform : UInt64
    get_script_properties : UInt64
    get_text_complexity : UInt64
    get_justification_opportunities : UInt64
    justify_glyph_advances : UInt64
    get_justified_glyphs : UInt64
    get_glyph_orientation_transform2 : UInt64
    get_typographic_features : UInt64
    check_typographic_feature : UInt64
  end

  IDWriteTextAnalyzer2_GUID = "553a9ff3-5693-4df7-b52b-74806f7f2eb9"
  IID_IDWriteTextAnalyzer2 = LibC::GUID.new(0x553a9ff3_u32, 0x5693_u16, 0x4df7_u16, StaticArray[0xb5_u8, 0x2b_u8, 0x74_u8, 0x80_u8, 0x6f_u8, 0x7f_u8, 0x2e_u8, 0xb9_u8])
  struct IDWriteTextAnalyzer2
    lpVtbl : IDWriteTextAnalyzer2VTbl*
  end

  struct IDWriteFontFallbackVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    map_characters : UInt64
  end

  IDWriteFontFallback_GUID = "efa008f9-f7a1-48bf-b05c-f224713cc0ff"
  IID_IDWriteFontFallback = LibC::GUID.new(0xefa008f9_u32, 0xf7a1_u16, 0x48bf_u16, StaticArray[0xb0_u8, 0x5c_u8, 0xf2_u8, 0x24_u8, 0x71_u8, 0x3c_u8, 0xc0_u8, 0xff_u8])
  struct IDWriteFontFallback
    lpVtbl : IDWriteFontFallbackVTbl*
  end

  struct IDWriteFontFallbackBuilderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    add_mapping : UInt64
    add_mappings : UInt64
    create_font_fallback : UInt64
  end

  IDWriteFontFallbackBuilder_GUID = "fd882d06-8aba-4fb8-b849-8be8b73e14de"
  IID_IDWriteFontFallbackBuilder = LibC::GUID.new(0xfd882d06_u32, 0x8aba_u16, 0x4fb8_u16, StaticArray[0xb8_u8, 0x49_u8, 0x8b_u8, 0xe8_u8, 0xb7_u8, 0x3e_u8, 0x14_u8, 0xde_u8])
  struct IDWriteFontFallbackBuilder
    lpVtbl : IDWriteFontFallbackBuilderVTbl*
  end

  struct IDWriteFont2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_font_family : UInt64
    get_weight : UInt64
    get_stretch : UInt64
    get_style : UInt64
    is_symbol_font : UInt64
    get_face_names : UInt64
    get_informational_strings : UInt64
    get_simulations : UInt64
    get_metrics : UInt64
    has_character : UInt64
    create_font_face : UInt64
    get_metrics2 : UInt64
    get_panose : UInt64
    get_unicode_ranges : UInt64
    is_monospaced_font : UInt64
    is_color_font : UInt64
  end

  IDWriteFont2_GUID = "29748ed6-8c9c-4a6a-be0b-d912e8538944"
  IID_IDWriteFont2 = LibC::GUID.new(0x29748ed6_u32, 0x8c9c_u16, 0x4a6a_u16, StaticArray[0xbe_u8, 0xb_u8, 0xd9_u8, 0x12_u8, 0xe8_u8, 0x53_u8, 0x89_u8, 0x44_u8])
  struct IDWriteFont2
    lpVtbl : IDWriteFont2VTbl*
  end

  struct IDWriteFontFace2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type : UInt64
    get_files : UInt64
    get_index : UInt64
    get_simulations : UInt64
    is_symbol_font : UInt64
    get_metrics : UInt64
    get_glyph_count : UInt64
    get_design_glyph_metrics : UInt64
    get_glyph_indices : UInt64
    try_get_font_table : UInt64
    release_font_table : UInt64
    get_glyph_run_outline : UInt64
    get_recommended_rendering_mode : UInt64
    get_gdi_compatible_metrics : UInt64
    get_gdi_compatible_glyph_metrics : UInt64
    get_metrics2 : UInt64
    get_gdi_compatible_metrics2 : UInt64
    get_caret_metrics : UInt64
    get_unicode_ranges : UInt64
    is_monospaced_font : UInt64
    get_design_glyph_advances : UInt64
    get_gdi_compatible_glyph_advances : UInt64
    get_kerning_pair_adjustments : UInt64
    has_kerning_pairs : UInt64
    get_recommended_rendering_mode2 : UInt64
    get_vertical_glyph_variants : UInt64
    has_vertical_glyph_variants : UInt64
    is_color_font : UInt64
    get_color_palette_count : UInt64
    get_palette_entry_count : UInt64
    get_palette_entries : UInt64
    get_recommended_rendering_mode3 : UInt64
  end

  IDWriteFontFace2_GUID = "d8b768ff-64bc-4e66-982b-ec8e87f693f7"
  IID_IDWriteFontFace2 = LibC::GUID.new(0xd8b768ff_u32, 0x64bc_u16, 0x4e66_u16, StaticArray[0x98_u8, 0x2b_u8, 0xec_u8, 0x8e_u8, 0x87_u8, 0xf6_u8, 0x93_u8, 0xf7_u8])
  struct IDWriteFontFace2
    lpVtbl : IDWriteFontFace2VTbl*
  end

  struct IDWriteColorGlyphRunEnumeratorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    move_next : UInt64
    get_current_run : UInt64
  end

  IDWriteColorGlyphRunEnumerator_GUID = "d31fbe17-f157-41a2-8d24-cb779e0560e8"
  IID_IDWriteColorGlyphRunEnumerator = LibC::GUID.new(0xd31fbe17_u32, 0xf157_u16, 0x41a2_u16, StaticArray[0x8d_u8, 0x24_u8, 0xcb_u8, 0x77_u8, 0x9e_u8, 0x5_u8, 0x60_u8, 0xe8_u8])
  struct IDWriteColorGlyphRunEnumerator
    lpVtbl : IDWriteColorGlyphRunEnumeratorVTbl*
  end

  struct IDWriteRenderingParams2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_gamma : UInt64
    get_enhanced_contrast : UInt64
    get_clear_type_level : UInt64
    get_pixel_geometry : UInt64
    get_rendering_mode : UInt64
    get_grayscale_enhanced_contrast : UInt64
    get_grid_fit_mode : UInt64
  end

  IDWriteRenderingParams2_GUID = "f9d711c3-9777-40ae-87e8-3e5af9bf0948"
  IID_IDWriteRenderingParams2 = LibC::GUID.new(0xf9d711c3_u32, 0x9777_u16, 0x40ae_u16, StaticArray[0x87_u8, 0xe8_u8, 0x3e_u8, 0x5a_u8, 0xf9_u8, 0xbf_u8, 0x9_u8, 0x48_u8])
  struct IDWriteRenderingParams2
    lpVtbl : IDWriteRenderingParams2VTbl*
  end

  struct IDWriteFactory2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_system_font_collection : UInt64
    create_custom_font_collection : UInt64
    register_font_collection_loader : UInt64
    unregister_font_collection_loader : UInt64
    create_font_file_reference : UInt64
    create_custom_font_file_reference : UInt64
    create_font_face : UInt64
    create_rendering_params : UInt64
    create_monitor_rendering_params : UInt64
    create_custom_rendering_params : UInt64
    register_font_file_loader : UInt64
    unregister_font_file_loader : UInt64
    create_text_format : UInt64
    create_typography : UInt64
    get_gdi_interop : UInt64
    create_text_layout : UInt64
    create_gdi_compatible_text_layout : UInt64
    create_ellipsis_trimming_sign : UInt64
    create_text_analyzer : UInt64
    create_number_substitution : UInt64
    create_glyph_run_analysis : UInt64
    get_eudc_font_collection : UInt64
    create_custom_rendering_params2 : UInt64
    get_system_font_fallback : UInt64
    create_font_fallback_builder : UInt64
    translate_color_glyph_run : UInt64
    create_custom_rendering_params3 : UInt64
    create_glyph_run_analysis2 : UInt64
  end

  IDWriteFactory2_GUID = "0439fc60-ca44-4994-8dee-3a9af7b732ec"
  IID_IDWriteFactory2 = LibC::GUID.new(0x439fc60_u32, 0xca44_u16, 0x4994_u16, StaticArray[0x8d_u8, 0xee_u8, 0x3a_u8, 0x9a_u8, 0xf7_u8, 0xb7_u8, 0x32_u8, 0xec_u8])
  struct IDWriteFactory2
    lpVtbl : IDWriteFactory2VTbl*
  end

  struct IDWriteRenderingParams3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_gamma : UInt64
    get_enhanced_contrast : UInt64
    get_clear_type_level : UInt64
    get_pixel_geometry : UInt64
    get_rendering_mode : UInt64
    get_grayscale_enhanced_contrast : UInt64
    get_grid_fit_mode : UInt64
    get_rendering_mode1 : UInt64
  end

  IDWriteRenderingParams3_GUID = "b7924baa-391b-412a-8c5c-e44cc2d867dc"
  IID_IDWriteRenderingParams3 = LibC::GUID.new(0xb7924baa_u32, 0x391b_u16, 0x412a_u16, StaticArray[0x8c_u8, 0x5c_u8, 0xe4_u8, 0x4c_u8, 0xc2_u8, 0xd8_u8, 0x67_u8, 0xdc_u8])
  struct IDWriteRenderingParams3
    lpVtbl : IDWriteRenderingParams3VTbl*
  end

  struct IDWriteFactory3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_system_font_collection : UInt64
    create_custom_font_collection : UInt64
    register_font_collection_loader : UInt64
    unregister_font_collection_loader : UInt64
    create_font_file_reference : UInt64
    create_custom_font_file_reference : UInt64
    create_font_face : UInt64
    create_rendering_params : UInt64
    create_monitor_rendering_params : UInt64
    create_custom_rendering_params : UInt64
    register_font_file_loader : UInt64
    unregister_font_file_loader : UInt64
    create_text_format : UInt64
    create_typography : UInt64
    get_gdi_interop : UInt64
    create_text_layout : UInt64
    create_gdi_compatible_text_layout : UInt64
    create_ellipsis_trimming_sign : UInt64
    create_text_analyzer : UInt64
    create_number_substitution : UInt64
    create_glyph_run_analysis : UInt64
    get_eudc_font_collection : UInt64
    create_custom_rendering_params2 : UInt64
    get_system_font_fallback : UInt64
    create_font_fallback_builder : UInt64
    translate_color_glyph_run : UInt64
    create_custom_rendering_params3 : UInt64
    create_glyph_run_analysis2 : UInt64
    create_glyph_run_analysis3 : UInt64
    create_custom_rendering_params4 : UInt64
    create_font_face_reference : UInt64
    create_font_face_reference2 : UInt64
    get_system_font_set : UInt64
    create_font_set_builder : UInt64
    create_font_collection_from_font_set : UInt64
    get_system_font_collection2 : UInt64
    get_font_download_queue : UInt64
  end

  IDWriteFactory3_GUID = "9a1b41c3-d3bb-466a-87fc-fe67556a3b65"
  IID_IDWriteFactory3 = LibC::GUID.new(0x9a1b41c3_u32, 0xd3bb_u16, 0x466a_u16, StaticArray[0x87_u8, 0xfc_u8, 0xfe_u8, 0x67_u8, 0x55_u8, 0x6a_u8, 0x3b_u8, 0x65_u8])
  struct IDWriteFactory3
    lpVtbl : IDWriteFactory3VTbl*
  end

  struct IDWriteFontSetVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_font_count : UInt64
    get_font_face_reference : UInt64
    find_font_face_reference : UInt64
    find_font_face : UInt64
    get_property_values : UInt64
    get_property_values2 : UInt64
    get_property_values3 : UInt64
    get_property_occurrence_count : UInt64
    get_matching_fonts : UInt64
    get_matching_fonts2 : UInt64
  end

  IDWriteFontSet_GUID = "53585141-d9f8-4095-8321-d73cf6bd116b"
  IID_IDWriteFontSet = LibC::GUID.new(0x53585141_u32, 0xd9f8_u16, 0x4095_u16, StaticArray[0x83_u8, 0x21_u8, 0xd7_u8, 0x3c_u8, 0xf6_u8, 0xbd_u8, 0x11_u8, 0x6b_u8])
  struct IDWriteFontSet
    lpVtbl : IDWriteFontSetVTbl*
  end

  struct IDWriteFontSetBuilderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    add_font_face_reference : UInt64
    add_font_face_reference2 : UInt64
    add_font_set : UInt64
    create_font_set : UInt64
  end

  IDWriteFontSetBuilder_GUID = "2f642afe-9c68-4f40-b8be-457401afcb3d"
  IID_IDWriteFontSetBuilder = LibC::GUID.new(0x2f642afe_u32, 0x9c68_u16, 0x4f40_u16, StaticArray[0xb8_u8, 0xbe_u8, 0x45_u8, 0x74_u8, 0x1_u8, 0xaf_u8, 0xcb_u8, 0x3d_u8])
  struct IDWriteFontSetBuilder
    lpVtbl : IDWriteFontSetBuilderVTbl*
  end

  struct IDWriteFontCollection1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_font_family_count : UInt64
    get_font_family : UInt64
    find_family_name : UInt64
    get_font_from_font_face : UInt64
    get_font_set : UInt64
    get_font_family2 : UInt64
  end

  IDWriteFontCollection1_GUID = "53585141-d9f8-4095-8321-d73cf6bd116c"
  IID_IDWriteFontCollection1 = LibC::GUID.new(0x53585141_u32, 0xd9f8_u16, 0x4095_u16, StaticArray[0x83_u8, 0x21_u8, 0xd7_u8, 0x3c_u8, 0xf6_u8, 0xbd_u8, 0x11_u8, 0x6c_u8])
  struct IDWriteFontCollection1
    lpVtbl : IDWriteFontCollection1VTbl*
  end

  struct IDWriteFontFamily1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_font_collection : UInt64
    get_font_count : UInt64
    get_font : UInt64
    get_family_names : UInt64
    get_first_matching_font : UInt64
    get_matching_fonts : UInt64
    get_font_locality : UInt64
    get_font2 : UInt64
    get_font_face_reference : UInt64
  end

  IDWriteFontFamily1_GUID = "da20d8ef-812a-4c43-9802-62ec4abd7adf"
  IID_IDWriteFontFamily1 = LibC::GUID.new(0xda20d8ef_u32, 0x812a_u16, 0x4c43_u16, StaticArray[0x98_u8, 0x2_u8, 0x62_u8, 0xec_u8, 0x4a_u8, 0xbd_u8, 0x7a_u8, 0xdf_u8])
  struct IDWriteFontFamily1
    lpVtbl : IDWriteFontFamily1VTbl*
  end

  struct IDWriteFontList1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_font_collection : UInt64
    get_font_count : UInt64
    get_font : UInt64
    get_font_locality : UInt64
    get_font2 : UInt64
    get_font_face_reference : UInt64
  end

  IDWriteFontList1_GUID = "da20d8ef-812a-4c43-9802-62ec4abd7ade"
  IID_IDWriteFontList1 = LibC::GUID.new(0xda20d8ef_u32, 0x812a_u16, 0x4c43_u16, StaticArray[0x98_u8, 0x2_u8, 0x62_u8, 0xec_u8, 0x4a_u8, 0xbd_u8, 0x7a_u8, 0xde_u8])
  struct IDWriteFontList1
    lpVtbl : IDWriteFontList1VTbl*
  end

  struct IDWriteFontFaceReferenceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    create_font_face : UInt64
    create_font_face_with_simulations : UInt64
    equals : UInt64
    get_font_face_index : UInt64
    get_simulations : UInt64
    get_font_file : UInt64
    get_local_file_size : UInt64
    get_file_size : UInt64
    get_file_time : UInt64
    get_locality : UInt64
    enqueue_font_download_request : UInt64
    enqueue_character_download_request : UInt64
    enqueue_glyph_download_request : UInt64
    enqueue_file_fragment_download_request : UInt64
  end

  IDWriteFontFaceReference_GUID = "5e7fa7ca-dde3-424c-89f0-9fcd6fed58cd"
  IID_IDWriteFontFaceReference = LibC::GUID.new(0x5e7fa7ca_u32, 0xdde3_u16, 0x424c_u16, StaticArray[0x89_u8, 0xf0_u8, 0x9f_u8, 0xcd_u8, 0x6f_u8, 0xed_u8, 0x58_u8, 0xcd_u8])
  struct IDWriteFontFaceReference
    lpVtbl : IDWriteFontFaceReferenceVTbl*
  end

  struct IDWriteFont3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_font_family : UInt64
    get_weight : UInt64
    get_stretch : UInt64
    get_style : UInt64
    is_symbol_font : UInt64
    get_face_names : UInt64
    get_informational_strings : UInt64
    get_simulations : UInt64
    get_metrics : UInt64
    has_character : UInt64
    create_font_face : UInt64
    get_metrics2 : UInt64
    get_panose : UInt64
    get_unicode_ranges : UInt64
    is_monospaced_font : UInt64
    is_color_font : UInt64
    create_font_face2 : UInt64
    equals : UInt64
    get_font_face_reference : UInt64
    has_character2 : UInt64
    get_locality : UInt64
  end

  IDWriteFont3_GUID = "29748ed6-8c9c-4a6a-be0b-d912e8538944"
  IID_IDWriteFont3 = LibC::GUID.new(0x29748ed6_u32, 0x8c9c_u16, 0x4a6a_u16, StaticArray[0xbe_u8, 0xb_u8, 0xd9_u8, 0x12_u8, 0xe8_u8, 0x53_u8, 0x89_u8, 0x44_u8])
  struct IDWriteFont3
    lpVtbl : IDWriteFont3VTbl*
  end

  struct IDWriteFontFace3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type : UInt64
    get_files : UInt64
    get_index : UInt64
    get_simulations : UInt64
    is_symbol_font : UInt64
    get_metrics : UInt64
    get_glyph_count : UInt64
    get_design_glyph_metrics : UInt64
    get_glyph_indices : UInt64
    try_get_font_table : UInt64
    release_font_table : UInt64
    get_glyph_run_outline : UInt64
    get_recommended_rendering_mode : UInt64
    get_gdi_compatible_metrics : UInt64
    get_gdi_compatible_glyph_metrics : UInt64
    get_metrics2 : UInt64
    get_gdi_compatible_metrics2 : UInt64
    get_caret_metrics : UInt64
    get_unicode_ranges : UInt64
    is_monospaced_font : UInt64
    get_design_glyph_advances : UInt64
    get_gdi_compatible_glyph_advances : UInt64
    get_kerning_pair_adjustments : UInt64
    has_kerning_pairs : UInt64
    get_recommended_rendering_mode2 : UInt64
    get_vertical_glyph_variants : UInt64
    has_vertical_glyph_variants : UInt64
    is_color_font : UInt64
    get_color_palette_count : UInt64
    get_palette_entry_count : UInt64
    get_palette_entries : UInt64
    get_recommended_rendering_mode3 : UInt64
    get_font_face_reference : UInt64
    get_panose : UInt64
    get_weight : UInt64
    get_stretch : UInt64
    get_style : UInt64
    get_family_names : UInt64
    get_face_names : UInt64
    get_informational_strings : UInt64
    has_character : UInt64
    get_recommended_rendering_mode4 : UInt64
    is_character_local : UInt64
    is_glyph_local : UInt64
    are_characters_local : UInt64
    are_glyphs_local : UInt64
  end

  IDWriteFontFace3_GUID = "d37d7598-09be-4222-a236-2081341cc1f2"
  IID_IDWriteFontFace3 = LibC::GUID.new(0xd37d7598_u32, 0x9be_u16, 0x4222_u16, StaticArray[0xa2_u8, 0x36_u8, 0x20_u8, 0x81_u8, 0x34_u8, 0x1c_u8, 0xc1_u8, 0xf2_u8])
  struct IDWriteFontFace3
    lpVtbl : IDWriteFontFace3VTbl*
  end

  struct IDWriteStringListVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_count : UInt64
    get_locale_name_length : UInt64
    get_locale_name : UInt64
    get_string_length : UInt64
    get_string : UInt64
  end

  IDWriteStringList_GUID = "cfee3140-1157-47ca-8b85-31bfcf3f2d0e"
  IID_IDWriteStringList = LibC::GUID.new(0xcfee3140_u32, 0x1157_u16, 0x47ca_u16, StaticArray[0x8b_u8, 0x85_u8, 0x31_u8, 0xbf_u8, 0xcf_u8, 0x3f_u8, 0x2d_u8, 0xe_u8])
  struct IDWriteStringList
    lpVtbl : IDWriteStringListVTbl*
  end

  struct IDWriteFontDownloadListenerVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    download_completed : UInt64
  end

  IDWriteFontDownloadListener_GUID = "b06fe5b9-43ec-4393-881b-dbe4dc72fda7"
  IID_IDWriteFontDownloadListener = LibC::GUID.new(0xb06fe5b9_u32, 0x43ec_u16, 0x4393_u16, StaticArray[0x88_u8, 0x1b_u8, 0xdb_u8, 0xe4_u8, 0xdc_u8, 0x72_u8, 0xfd_u8, 0xa7_u8])
  struct IDWriteFontDownloadListener
    lpVtbl : IDWriteFontDownloadListenerVTbl*
  end

  struct IDWriteFontDownloadQueueVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    add_listener : UInt64
    remove_listener : UInt64
    is_empty : UInt64
    begin_download : UInt64
    cancel_download : UInt64
    get_generation_count : UInt64
  end

  IDWriteFontDownloadQueue_GUID = "b71e6052-5aea-4fa3-832e-f60d431f7e91"
  IID_IDWriteFontDownloadQueue = LibC::GUID.new(0xb71e6052_u32, 0x5aea_u16, 0x4fa3_u16, StaticArray[0x83_u8, 0x2e_u8, 0xf6_u8, 0xd_u8, 0x43_u8, 0x1f_u8, 0x7e_u8, 0x91_u8])
  struct IDWriteFontDownloadQueue
    lpVtbl : IDWriteFontDownloadQueueVTbl*
  end

  struct IDWriteGdiInterop1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    create_font_from_logfont : UInt64
    convert_font_to_logfont : UInt64
    convert_font_face_to_logfont : UInt64
    create_font_face_from_hdc : UInt64
    create_bitmap_render_target : UInt64
    create_font_from_logfont2 : UInt64
    get_font_signature : UInt64
    get_font_signature2 : UInt64
    get_matching_fonts_by_logfont : UInt64
  end

  IDWriteGdiInterop1_GUID = "4556be70-3abd-4f70-90be-421780a6f515"
  IID_IDWriteGdiInterop1 = LibC::GUID.new(0x4556be70_u32, 0x3abd_u16, 0x4f70_u16, StaticArray[0x90_u8, 0xbe_u8, 0x42_u8, 0x17_u8, 0x80_u8, 0xa6_u8, 0xf5_u8, 0x15_u8])
  struct IDWriteGdiInterop1
    lpVtbl : IDWriteGdiInterop1VTbl*
  end

  struct IDWriteTextFormat2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_text_alignment : UInt64
    set_paragraph_alignment : UInt64
    set_word_wrapping : UInt64
    set_reading_direction : UInt64
    set_flow_direction : UInt64
    set_incremental_tab_stop : UInt64
    set_trimming : UInt64
    set_line_spacing : UInt64
    get_text_alignment : UInt64
    get_paragraph_alignment : UInt64
    get_word_wrapping : UInt64
    get_reading_direction : UInt64
    get_flow_direction : UInt64
    get_incremental_tab_stop : UInt64
    get_trimming : UInt64
    get_line_spacing : UInt64
    get_font_collection : UInt64
    get_font_family_name_length : UInt64
    get_font_family_name : UInt64
    get_font_weight : UInt64
    get_font_style : UInt64
    get_font_stretch : UInt64
    get_font_size : UInt64
    get_locale_name_length : UInt64
    get_locale_name : UInt64
    set_vertical_glyph_orientation : UInt64
    get_vertical_glyph_orientation : UInt64
    set_last_line_wrapping : UInt64
    get_last_line_wrapping : UInt64
    set_optical_alignment : UInt64
    get_optical_alignment : UInt64
    set_font_fallback : UInt64
    get_font_fallback : UInt64
    set_line_spacing2 : UInt64
    get_line_spacing2 : UInt64
  end

  IDWriteTextFormat2_GUID = "f67e0edd-9e3d-4ecc-8c32-4183253dfe70"
  IID_IDWriteTextFormat2 = LibC::GUID.new(0xf67e0edd_u32, 0x9e3d_u16, 0x4ecc_u16, StaticArray[0x8c_u8, 0x32_u8, 0x41_u8, 0x83_u8, 0x25_u8, 0x3d_u8, 0xfe_u8, 0x70_u8])
  struct IDWriteTextFormat2
    lpVtbl : IDWriteTextFormat2VTbl*
  end

  struct IDWriteTextLayout3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_text_alignment : UInt64
    set_paragraph_alignment : UInt64
    set_word_wrapping : UInt64
    set_reading_direction : UInt64
    set_flow_direction : UInt64
    set_incremental_tab_stop : UInt64
    set_trimming : UInt64
    set_line_spacing : UInt64
    get_text_alignment : UInt64
    get_paragraph_alignment : UInt64
    get_word_wrapping : UInt64
    get_reading_direction : UInt64
    get_flow_direction : UInt64
    get_incremental_tab_stop : UInt64
    get_trimming : UInt64
    get_line_spacing : UInt64
    get_font_collection : UInt64
    get_font_family_name_length : UInt64
    get_font_family_name : UInt64
    get_font_weight : UInt64
    get_font_style : UInt64
    get_font_stretch : UInt64
    get_font_size : UInt64
    get_locale_name_length : UInt64
    get_locale_name : UInt64
    set_max_width : UInt64
    set_max_height : UInt64
    set_font_collection : UInt64
    set_font_family_name : UInt64
    set_font_weight : UInt64
    set_font_style : UInt64
    set_font_stretch : UInt64
    set_font_size : UInt64
    set_underline : UInt64
    set_strikethrough : UInt64
    set_drawing_effect : UInt64
    set_inline_object : UInt64
    set_typography : UInt64
    set_locale_name : UInt64
    get_max_width : UInt64
    get_max_height : UInt64
    get_font_collection2 : UInt64
    get_font_family_name_length2 : UInt64
    get_font_family_name2 : UInt64
    get_font_weight2 : UInt64
    get_font_style2 : UInt64
    get_font_stretch2 : UInt64
    get_font_size2 : UInt64
    get_underline : UInt64
    get_strikethrough : UInt64
    get_drawing_effect : UInt64
    get_inline_object : UInt64
    get_typography : UInt64
    get_locale_name_length2 : UInt64
    get_locale_name2 : UInt64
    draw : UInt64
    get_line_metrics : UInt64
    get_metrics : UInt64
    get_overhang_metrics : UInt64
    get_cluster_metrics : UInt64
    determine_min_width : UInt64
    hit_test_point : UInt64
    hit_test_text_position : UInt64
    hit_test_text_range : UInt64
    set_pair_kerning : UInt64
    get_pair_kerning : UInt64
    set_character_spacing : UInt64
    get_character_spacing : UInt64
    get_metrics2 : UInt64
    set_vertical_glyph_orientation : UInt64
    get_vertical_glyph_orientation : UInt64
    set_last_line_wrapping : UInt64
    get_last_line_wrapping : UInt64
    set_optical_alignment : UInt64
    get_optical_alignment : UInt64
    set_font_fallback : UInt64
    get_font_fallback : UInt64
    invalidate_layout : UInt64
    set_line_spacing2 : UInt64
    get_line_spacing2 : UInt64
    get_line_metrics2 : UInt64
  end

  IDWriteTextLayout3_GUID = "07ddcd52-020e-4de8-ac33-6c953d83f92d"
  IID_IDWriteTextLayout3 = LibC::GUID.new(0x7ddcd52_u32, 0x20e_u16, 0x4de8_u16, StaticArray[0xac_u8, 0x33_u8, 0x6c_u8, 0x95_u8, 0x3d_u8, 0x83_u8, 0xf9_u8, 0x2d_u8])
  struct IDWriteTextLayout3
    lpVtbl : IDWriteTextLayout3VTbl*
  end

  struct IDWriteColorGlyphRunEnumerator1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    move_next : UInt64
    get_current_run : UInt64
    get_current_run2 : UInt64
  end

  IDWriteColorGlyphRunEnumerator1_GUID = "7c5f86da-c7a1-4f05-b8e1-55a179fe5a35"
  IID_IDWriteColorGlyphRunEnumerator1 = LibC::GUID.new(0x7c5f86da_u32, 0xc7a1_u16, 0x4f05_u16, StaticArray[0xb8_u8, 0xe1_u8, 0x55_u8, 0xa1_u8, 0x79_u8, 0xfe_u8, 0x5a_u8, 0x35_u8])
  struct IDWriteColorGlyphRunEnumerator1
    lpVtbl : IDWriteColorGlyphRunEnumerator1VTbl*
  end

  struct IDWriteFontFace4VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type : UInt64
    get_files : UInt64
    get_index : UInt64
    get_simulations : UInt64
    is_symbol_font : UInt64
    get_metrics : UInt64
    get_glyph_count : UInt64
    get_design_glyph_metrics : UInt64
    get_glyph_indices : UInt64
    try_get_font_table : UInt64
    release_font_table : UInt64
    get_glyph_run_outline : UInt64
    get_recommended_rendering_mode : UInt64
    get_gdi_compatible_metrics : UInt64
    get_gdi_compatible_glyph_metrics : UInt64
    get_metrics2 : UInt64
    get_gdi_compatible_metrics2 : UInt64
    get_caret_metrics : UInt64
    get_unicode_ranges : UInt64
    is_monospaced_font : UInt64
    get_design_glyph_advances : UInt64
    get_gdi_compatible_glyph_advances : UInt64
    get_kerning_pair_adjustments : UInt64
    has_kerning_pairs : UInt64
    get_recommended_rendering_mode2 : UInt64
    get_vertical_glyph_variants : UInt64
    has_vertical_glyph_variants : UInt64
    is_color_font : UInt64
    get_color_palette_count : UInt64
    get_palette_entry_count : UInt64
    get_palette_entries : UInt64
    get_recommended_rendering_mode3 : UInt64
    get_font_face_reference : UInt64
    get_panose : UInt64
    get_weight : UInt64
    get_stretch : UInt64
    get_style : UInt64
    get_family_names : UInt64
    get_face_names : UInt64
    get_informational_strings : UInt64
    has_character : UInt64
    get_recommended_rendering_mode4 : UInt64
    is_character_local : UInt64
    is_glyph_local : UInt64
    are_characters_local : UInt64
    are_glyphs_local : UInt64
    get_glyph_image_formats : UInt64
    get_glyph_image_formats2 : UInt64
    get_glyph_image_data : UInt64
    release_glyph_image_data : UInt64
  end

  IDWriteFontFace4_GUID = "27f2a904-4eb8-441d-9678-0563f53e3e2f"
  IID_IDWriteFontFace4 = LibC::GUID.new(0x27f2a904_u32, 0x4eb8_u16, 0x441d_u16, StaticArray[0x96_u8, 0x78_u8, 0x5_u8, 0x63_u8, 0xf5_u8, 0x3e_u8, 0x3e_u8, 0x2f_u8])
  struct IDWriteFontFace4
    lpVtbl : IDWriteFontFace4VTbl*
  end

  struct IDWriteFactory4VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_system_font_collection : UInt64
    create_custom_font_collection : UInt64
    register_font_collection_loader : UInt64
    unregister_font_collection_loader : UInt64
    create_font_file_reference : UInt64
    create_custom_font_file_reference : UInt64
    create_font_face : UInt64
    create_rendering_params : UInt64
    create_monitor_rendering_params : UInt64
    create_custom_rendering_params : UInt64
    register_font_file_loader : UInt64
    unregister_font_file_loader : UInt64
    create_text_format : UInt64
    create_typography : UInt64
    get_gdi_interop : UInt64
    create_text_layout : UInt64
    create_gdi_compatible_text_layout : UInt64
    create_ellipsis_trimming_sign : UInt64
    create_text_analyzer : UInt64
    create_number_substitution : UInt64
    create_glyph_run_analysis : UInt64
    get_eudc_font_collection : UInt64
    create_custom_rendering_params2 : UInt64
    get_system_font_fallback : UInt64
    create_font_fallback_builder : UInt64
    translate_color_glyph_run : UInt64
    create_custom_rendering_params3 : UInt64
    create_glyph_run_analysis2 : UInt64
    create_glyph_run_analysis3 : UInt64
    create_custom_rendering_params4 : UInt64
    create_font_face_reference : UInt64
    create_font_face_reference2 : UInt64
    get_system_font_set : UInt64
    create_font_set_builder : UInt64
    create_font_collection_from_font_set : UInt64
    get_system_font_collection2 : UInt64
    get_font_download_queue : UInt64
    translate_color_glyph_run2 : UInt64
    compute_glyph_origins : UInt64
    compute_glyph_origins2 : UInt64
  end

  IDWriteFactory4_GUID = "4b0b5bd3-0797-4549-8ac5-fe915cc53856"
  IID_IDWriteFactory4 = LibC::GUID.new(0x4b0b5bd3_u32, 0x797_u16, 0x4549_u16, StaticArray[0x8a_u8, 0xc5_u8, 0xfe_u8, 0x91_u8, 0x5c_u8, 0xc5_u8, 0x38_u8, 0x56_u8])
  struct IDWriteFactory4
    lpVtbl : IDWriteFactory4VTbl*
  end

  struct IDWriteFontSetBuilder1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    add_font_face_reference : UInt64
    add_font_face_reference2 : UInt64
    add_font_set : UInt64
    create_font_set : UInt64
    add_font_file : UInt64
  end

  IDWriteFontSetBuilder1_GUID = "3ff7715f-3cdc-4dc6-9b72-ec5621dccafd"
  IID_IDWriteFontSetBuilder1 = LibC::GUID.new(0x3ff7715f_u32, 0x3cdc_u16, 0x4dc6_u16, StaticArray[0x9b_u8, 0x72_u8, 0xec_u8, 0x56_u8, 0x21_u8, 0xdc_u8, 0xca_u8, 0xfd_u8])
  struct IDWriteFontSetBuilder1
    lpVtbl : IDWriteFontSetBuilder1VTbl*
  end

  struct IDWriteAsyncResultVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_wait_handle : UInt64
    get_result : UInt64
  end

  IDWriteAsyncResult_GUID = "ce25f8fd-863b-4d13-9651-c1f88dc73fe2"
  IID_IDWriteAsyncResult = LibC::GUID.new(0xce25f8fd_u32, 0x863b_u16, 0x4d13_u16, StaticArray[0x96_u8, 0x51_u8, 0xc1_u8, 0xf8_u8, 0x8d_u8, 0xc7_u8, 0x3f_u8, 0xe2_u8])
  struct IDWriteAsyncResult
    lpVtbl : IDWriteAsyncResultVTbl*
  end

  struct IDWriteRemoteFontFileStreamVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    read_file_fragment : UInt64
    release_file_fragment : UInt64
    get_file_size : UInt64
    get_last_write_time : UInt64
    get_local_file_size : UInt64
    get_file_fragment_locality : UInt64
    get_locality : UInt64
    begin_download : UInt64
  end

  IDWriteRemoteFontFileStream_GUID = "4db3757a-2c72-4ed9-b2b6-1ababe1aff9c"
  IID_IDWriteRemoteFontFileStream = LibC::GUID.new(0x4db3757a_u32, 0x2c72_u16, 0x4ed9_u16, StaticArray[0xb2_u8, 0xb6_u8, 0x1a_u8, 0xba_u8, 0xbe_u8, 0x1a_u8, 0xff_u8, 0x9c_u8])
  struct IDWriteRemoteFontFileStream
    lpVtbl : IDWriteRemoteFontFileStreamVTbl*
  end

  struct IDWriteRemoteFontFileLoaderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    create_stream_from_key : UInt64
    create_remote_stream_from_key : UInt64
    get_locality_from_key : UInt64
    create_font_file_reference_from_url : UInt64
  end

  IDWriteRemoteFontFileLoader_GUID = "68648c83-6ede-46c0-ab46-20083a887fde"
  IID_IDWriteRemoteFontFileLoader = LibC::GUID.new(0x68648c83_u32, 0x6ede_u16, 0x46c0_u16, StaticArray[0xab_u8, 0x46_u8, 0x20_u8, 0x8_u8, 0x3a_u8, 0x88_u8, 0x7f_u8, 0xde_u8])
  struct IDWriteRemoteFontFileLoader
    lpVtbl : IDWriteRemoteFontFileLoaderVTbl*
  end

  struct IDWriteInMemoryFontFileLoaderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    create_stream_from_key : UInt64
    create_in_memory_font_file_reference : UInt64
    get_file_count : UInt64
  end

  IDWriteInMemoryFontFileLoader_GUID = "dc102f47-a12d-4b1c-822d-9e117e33043f"
  IID_IDWriteInMemoryFontFileLoader = LibC::GUID.new(0xdc102f47_u32, 0xa12d_u16, 0x4b1c_u16, StaticArray[0x82_u8, 0x2d_u8, 0x9e_u8, 0x11_u8, 0x7e_u8, 0x33_u8, 0x4_u8, 0x3f_u8])
  struct IDWriteInMemoryFontFileLoader
    lpVtbl : IDWriteInMemoryFontFileLoaderVTbl*
  end

  struct IDWriteFactory5VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_system_font_collection : UInt64
    create_custom_font_collection : UInt64
    register_font_collection_loader : UInt64
    unregister_font_collection_loader : UInt64
    create_font_file_reference : UInt64
    create_custom_font_file_reference : UInt64
    create_font_face : UInt64
    create_rendering_params : UInt64
    create_monitor_rendering_params : UInt64
    create_custom_rendering_params : UInt64
    register_font_file_loader : UInt64
    unregister_font_file_loader : UInt64
    create_text_format : UInt64
    create_typography : UInt64
    get_gdi_interop : UInt64
    create_text_layout : UInt64
    create_gdi_compatible_text_layout : UInt64
    create_ellipsis_trimming_sign : UInt64
    create_text_analyzer : UInt64
    create_number_substitution : UInt64
    create_glyph_run_analysis : UInt64
    get_eudc_font_collection : UInt64
    create_custom_rendering_params2 : UInt64
    get_system_font_fallback : UInt64
    create_font_fallback_builder : UInt64
    translate_color_glyph_run : UInt64
    create_custom_rendering_params3 : UInt64
    create_glyph_run_analysis2 : UInt64
    create_glyph_run_analysis3 : UInt64
    create_custom_rendering_params4 : UInt64
    create_font_face_reference : UInt64
    create_font_face_reference2 : UInt64
    get_system_font_set : UInt64
    create_font_set_builder : UInt64
    create_font_collection_from_font_set : UInt64
    get_system_font_collection2 : UInt64
    get_font_download_queue : UInt64
    translate_color_glyph_run2 : UInt64
    compute_glyph_origins : UInt64
    compute_glyph_origins2 : UInt64
    create_font_set_builder2 : UInt64
    create_in_memory_font_file_loader : UInt64
    create_http_font_file_loader : UInt64
    analyze_container_type : UInt64
    unpack_font_file : UInt64
  end

  IDWriteFactory5_GUID = "958db99a-be2a-4f09-af7d-65189803d1d3"
  IID_IDWriteFactory5 = LibC::GUID.new(0x958db99a_u32, 0xbe2a_u16, 0x4f09_u16, StaticArray[0xaf_u8, 0x7d_u8, 0x65_u8, 0x18_u8, 0x98_u8, 0x3_u8, 0xd1_u8, 0xd3_u8])
  struct IDWriteFactory5
    lpVtbl : IDWriteFactory5VTbl*
  end

  struct IDWriteFactory6VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_system_font_collection : UInt64
    create_custom_font_collection : UInt64
    register_font_collection_loader : UInt64
    unregister_font_collection_loader : UInt64
    create_font_file_reference : UInt64
    create_custom_font_file_reference : UInt64
    create_font_face : UInt64
    create_rendering_params : UInt64
    create_monitor_rendering_params : UInt64
    create_custom_rendering_params : UInt64
    register_font_file_loader : UInt64
    unregister_font_file_loader : UInt64
    create_text_format : UInt64
    create_typography : UInt64
    get_gdi_interop : UInt64
    create_text_layout : UInt64
    create_gdi_compatible_text_layout : UInt64
    create_ellipsis_trimming_sign : UInt64
    create_text_analyzer : UInt64
    create_number_substitution : UInt64
    create_glyph_run_analysis : UInt64
    get_eudc_font_collection : UInt64
    create_custom_rendering_params2 : UInt64
    get_system_font_fallback : UInt64
    create_font_fallback_builder : UInt64
    translate_color_glyph_run : UInt64
    create_custom_rendering_params3 : UInt64
    create_glyph_run_analysis2 : UInt64
    create_glyph_run_analysis3 : UInt64
    create_custom_rendering_params4 : UInt64
    create_font_face_reference : UInt64
    create_font_face_reference2 : UInt64
    get_system_font_set : UInt64
    create_font_set_builder : UInt64
    create_font_collection_from_font_set : UInt64
    get_system_font_collection2 : UInt64
    get_font_download_queue : UInt64
    translate_color_glyph_run2 : UInt64
    compute_glyph_origins : UInt64
    compute_glyph_origins2 : UInt64
    create_font_set_builder2 : UInt64
    create_in_memory_font_file_loader : UInt64
    create_http_font_file_loader : UInt64
    analyze_container_type : UInt64
    unpack_font_file : UInt64
    create_font_face_reference3 : UInt64
    create_font_resource : UInt64
    get_system_font_set2 : UInt64
    get_system_font_collection3 : UInt64
    create_font_collection_from_font_set2 : UInt64
    create_font_set_builder3 : UInt64
    create_text_format2 : UInt64
  end

  IDWriteFactory6_GUID = "f3744d80-21f7-42eb-b35d-995bc72fc223"
  IID_IDWriteFactory6 = LibC::GUID.new(0xf3744d80_u32, 0x21f7_u16, 0x42eb_u16, StaticArray[0xb3_u8, 0x5d_u8, 0x99_u8, 0x5b_u8, 0xc7_u8, 0x2f_u8, 0xc2_u8, 0x23_u8])
  struct IDWriteFactory6
    lpVtbl : IDWriteFactory6VTbl*
  end

  struct IDWriteFontFace5VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type : UInt64
    get_files : UInt64
    get_index : UInt64
    get_simulations : UInt64
    is_symbol_font : UInt64
    get_metrics : UInt64
    get_glyph_count : UInt64
    get_design_glyph_metrics : UInt64
    get_glyph_indices : UInt64
    try_get_font_table : UInt64
    release_font_table : UInt64
    get_glyph_run_outline : UInt64
    get_recommended_rendering_mode : UInt64
    get_gdi_compatible_metrics : UInt64
    get_gdi_compatible_glyph_metrics : UInt64
    get_metrics2 : UInt64
    get_gdi_compatible_metrics2 : UInt64
    get_caret_metrics : UInt64
    get_unicode_ranges : UInt64
    is_monospaced_font : UInt64
    get_design_glyph_advances : UInt64
    get_gdi_compatible_glyph_advances : UInt64
    get_kerning_pair_adjustments : UInt64
    has_kerning_pairs : UInt64
    get_recommended_rendering_mode2 : UInt64
    get_vertical_glyph_variants : UInt64
    has_vertical_glyph_variants : UInt64
    is_color_font : UInt64
    get_color_palette_count : UInt64
    get_palette_entry_count : UInt64
    get_palette_entries : UInt64
    get_recommended_rendering_mode3 : UInt64
    get_font_face_reference : UInt64
    get_panose : UInt64
    get_weight : UInt64
    get_stretch : UInt64
    get_style : UInt64
    get_family_names : UInt64
    get_face_names : UInt64
    get_informational_strings : UInt64
    has_character : UInt64
    get_recommended_rendering_mode4 : UInt64
    is_character_local : UInt64
    is_glyph_local : UInt64
    are_characters_local : UInt64
    are_glyphs_local : UInt64
    get_glyph_image_formats : UInt64
    get_glyph_image_formats2 : UInt64
    get_glyph_image_data : UInt64
    release_glyph_image_data : UInt64
    get_font_axis_value_count : UInt64
    get_font_axis_values : UInt64
    has_variations : UInt64
    get_font_resource : UInt64
    equals : UInt64
  end

  IDWriteFontFace5_GUID = "98eff3a5-b667-479a-b145-e2fa5b9fdc29"
  IID_IDWriteFontFace5 = LibC::GUID.new(0x98eff3a5_u32, 0xb667_u16, 0x479a_u16, StaticArray[0xb1_u8, 0x45_u8, 0xe2_u8, 0xfa_u8, 0x5b_u8, 0x9f_u8, 0xdc_u8, 0x29_u8])
  struct IDWriteFontFace5
    lpVtbl : IDWriteFontFace5VTbl*
  end

  struct IDWriteFontResourceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_font_file : UInt64
    get_font_face_index : UInt64
    get_font_axis_count : UInt64
    get_default_font_axis_values : UInt64
    get_font_axis_ranges : UInt64
    get_font_axis_attributes : UInt64
    get_axis_names : UInt64
    get_axis_value_name_count : UInt64
    get_axis_value_names : UInt64
    has_variations : UInt64
    create_font_face : UInt64
    create_font_face_reference : UInt64
  end

  IDWriteFontResource_GUID = "1f803a76-6871-48e8-987f-b975551c50f2"
  IID_IDWriteFontResource = LibC::GUID.new(0x1f803a76_u32, 0x6871_u16, 0x48e8_u16, StaticArray[0x98_u8, 0x7f_u8, 0xb9_u8, 0x75_u8, 0x55_u8, 0x1c_u8, 0x50_u8, 0xf2_u8])
  struct IDWriteFontResource
    lpVtbl : IDWriteFontResourceVTbl*
  end

  struct IDWriteFontFaceReference1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    create_font_face : UInt64
    create_font_face_with_simulations : UInt64
    equals : UInt64
    get_font_face_index : UInt64
    get_simulations : UInt64
    get_font_file : UInt64
    get_local_file_size : UInt64
    get_file_size : UInt64
    get_file_time : UInt64
    get_locality : UInt64
    enqueue_font_download_request : UInt64
    enqueue_character_download_request : UInt64
    enqueue_glyph_download_request : UInt64
    enqueue_file_fragment_download_request : UInt64
    create_font_face2 : UInt64
    get_font_axis_value_count : UInt64
    get_font_axis_values : UInt64
  end

  IDWriteFontFaceReference1_GUID = "c081fe77-2fd1-41ac-a5a3-34983c4ba61a"
  IID_IDWriteFontFaceReference1 = LibC::GUID.new(0xc081fe77_u32, 0x2fd1_u16, 0x41ac_u16, StaticArray[0xa5_u8, 0xa3_u8, 0x34_u8, 0x98_u8, 0x3c_u8, 0x4b_u8, 0xa6_u8, 0x1a_u8])
  struct IDWriteFontFaceReference1
    lpVtbl : IDWriteFontFaceReference1VTbl*
  end

  struct IDWriteFontSetBuilder2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    add_font_face_reference : UInt64
    add_font_face_reference2 : UInt64
    add_font_set : UInt64
    create_font_set : UInt64
    add_font_file : UInt64
    add_font : UInt64
    add_font_file2 : UInt64
  end

  IDWriteFontSetBuilder2_GUID = "ee5ba612-b131-463c-8f4f-3189b9401e45"
  IID_IDWriteFontSetBuilder2 = LibC::GUID.new(0xee5ba612_u32, 0xb131_u16, 0x463c_u16, StaticArray[0x8f_u8, 0x4f_u8, 0x31_u8, 0x89_u8, 0xb9_u8, 0x40_u8, 0x1e_u8, 0x45_u8])
  struct IDWriteFontSetBuilder2
    lpVtbl : IDWriteFontSetBuilder2VTbl*
  end

  struct IDWriteFontSet1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_font_count : UInt64
    get_font_face_reference : UInt64
    find_font_face_reference : UInt64
    find_font_face : UInt64
    get_property_values : UInt64
    get_property_values2 : UInt64
    get_property_values3 : UInt64
    get_property_occurrence_count : UInt64
    get_matching_fonts : UInt64
    get_matching_fonts2 : UInt64
    get_matching_fonts3 : UInt64
    get_first_font_resources : UInt64
    get_filtered_fonts : UInt64
    get_filtered_fonts2 : UInt64
    get_filtered_fonts3 : UInt64
    get_filtered_font_indices : UInt64
    get_filtered_font_indices2 : UInt64
    get_font_axis_ranges : UInt64
    get_font_axis_ranges2 : UInt64
    get_font_face_reference2 : UInt64
    create_font_resource : UInt64
    create_font_face : UInt64
    get_font_locality : UInt64
  end

  IDWriteFontSet1_GUID = "7e9fda85-6c92-4053-bc47-7ae3530db4d3"
  IID_IDWriteFontSet1 = LibC::GUID.new(0x7e9fda85_u32, 0x6c92_u16, 0x4053_u16, StaticArray[0xbc_u8, 0x47_u8, 0x7a_u8, 0xe3_u8, 0x53_u8, 0xd_u8, 0xb4_u8, 0xd3_u8])
  struct IDWriteFontSet1
    lpVtbl : IDWriteFontSet1VTbl*
  end

  struct IDWriteFontList2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_font_collection : UInt64
    get_font_count : UInt64
    get_font : UInt64
    get_font_locality : UInt64
    get_font2 : UInt64
    get_font_face_reference : UInt64
    get_font_set : UInt64
  end

  IDWriteFontList2_GUID = "c0763a34-77af-445a-b735-08c37b0a5bf5"
  IID_IDWriteFontList2 = LibC::GUID.new(0xc0763a34_u32, 0x77af_u16, 0x445a_u16, StaticArray[0xb7_u8, 0x35_u8, 0x8_u8, 0xc3_u8, 0x7b_u8, 0xa_u8, 0x5b_u8, 0xf5_u8])
  struct IDWriteFontList2
    lpVtbl : IDWriteFontList2VTbl*
  end

  struct IDWriteFontFamily2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_font_collection : UInt64
    get_font_count : UInt64
    get_font : UInt64
    get_family_names : UInt64
    get_first_matching_font : UInt64
    get_matching_fonts : UInt64
    get_font_locality : UInt64
    get_font2 : UInt64
    get_font_face_reference : UInt64
    get_matching_fonts2 : UInt64
    get_font_set : UInt64
  end

  IDWriteFontFamily2_GUID = "3ed49e77-a398-4261-b9cf-c126c2131ef3"
  IID_IDWriteFontFamily2 = LibC::GUID.new(0x3ed49e77_u32, 0xa398_u16, 0x4261_u16, StaticArray[0xb9_u8, 0xcf_u8, 0xc1_u8, 0x26_u8, 0xc2_u8, 0x13_u8, 0x1e_u8, 0xf3_u8])
  struct IDWriteFontFamily2
    lpVtbl : IDWriteFontFamily2VTbl*
  end

  struct IDWriteFontCollection2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_font_family_count : UInt64
    get_font_family : UInt64
    find_family_name : UInt64
    get_font_from_font_face : UInt64
    get_font_set : UInt64
    get_font_family2 : UInt64
    get_font_family3 : UInt64
    get_matching_fonts : UInt64
    get_font_family_model : UInt64
    get_font_set2 : UInt64
  end

  IDWriteFontCollection2_GUID = "514039c6-4617-4064-bf8b-92ea83e506e0"
  IID_IDWriteFontCollection2 = LibC::GUID.new(0x514039c6_u32, 0x4617_u16, 0x4064_u16, StaticArray[0xbf_u8, 0x8b_u8, 0x92_u8, 0xea_u8, 0x83_u8, 0xe5_u8, 0x6_u8, 0xe0_u8])
  struct IDWriteFontCollection2
    lpVtbl : IDWriteFontCollection2VTbl*
  end

  struct IDWriteTextLayout4VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_text_alignment : UInt64
    set_paragraph_alignment : UInt64
    set_word_wrapping : UInt64
    set_reading_direction : UInt64
    set_flow_direction : UInt64
    set_incremental_tab_stop : UInt64
    set_trimming : UInt64
    set_line_spacing : UInt64
    get_text_alignment : UInt64
    get_paragraph_alignment : UInt64
    get_word_wrapping : UInt64
    get_reading_direction : UInt64
    get_flow_direction : UInt64
    get_incremental_tab_stop : UInt64
    get_trimming : UInt64
    get_line_spacing : UInt64
    get_font_collection : UInt64
    get_font_family_name_length : UInt64
    get_font_family_name : UInt64
    get_font_weight : UInt64
    get_font_style : UInt64
    get_font_stretch : UInt64
    get_font_size : UInt64
    get_locale_name_length : UInt64
    get_locale_name : UInt64
    set_max_width : UInt64
    set_max_height : UInt64
    set_font_collection : UInt64
    set_font_family_name : UInt64
    set_font_weight : UInt64
    set_font_style : UInt64
    set_font_stretch : UInt64
    set_font_size : UInt64
    set_underline : UInt64
    set_strikethrough : UInt64
    set_drawing_effect : UInt64
    set_inline_object : UInt64
    set_typography : UInt64
    set_locale_name : UInt64
    get_max_width : UInt64
    get_max_height : UInt64
    get_font_collection2 : UInt64
    get_font_family_name_length2 : UInt64
    get_font_family_name2 : UInt64
    get_font_weight2 : UInt64
    get_font_style2 : UInt64
    get_font_stretch2 : UInt64
    get_font_size2 : UInt64
    get_underline : UInt64
    get_strikethrough : UInt64
    get_drawing_effect : UInt64
    get_inline_object : UInt64
    get_typography : UInt64
    get_locale_name_length2 : UInt64
    get_locale_name2 : UInt64
    draw : UInt64
    get_line_metrics : UInt64
    get_metrics : UInt64
    get_overhang_metrics : UInt64
    get_cluster_metrics : UInt64
    determine_min_width : UInt64
    hit_test_point : UInt64
    hit_test_text_position : UInt64
    hit_test_text_range : UInt64
    set_pair_kerning : UInt64
    get_pair_kerning : UInt64
    set_character_spacing : UInt64
    get_character_spacing : UInt64
    get_metrics2 : UInt64
    set_vertical_glyph_orientation : UInt64
    get_vertical_glyph_orientation : UInt64
    set_last_line_wrapping : UInt64
    get_last_line_wrapping : UInt64
    set_optical_alignment : UInt64
    get_optical_alignment : UInt64
    set_font_fallback : UInt64
    get_font_fallback : UInt64
    invalidate_layout : UInt64
    set_line_spacing2 : UInt64
    get_line_spacing2 : UInt64
    get_line_metrics2 : UInt64
    set_font_axis_values : UInt64
    get_font_axis_value_count : UInt64
    get_font_axis_values : UInt64
    get_automatic_font_axes : UInt64
    set_automatic_font_axes : UInt64
  end

  IDWriteTextLayout4_GUID = "05a9bf42-223f-4441-b5fb-8263685f55e9"
  IID_IDWriteTextLayout4 = LibC::GUID.new(0x5a9bf42_u32, 0x223f_u16, 0x4441_u16, StaticArray[0xb5_u8, 0xfb_u8, 0x82_u8, 0x63_u8, 0x68_u8, 0x5f_u8, 0x55_u8, 0xe9_u8])
  struct IDWriteTextLayout4
    lpVtbl : IDWriteTextLayout4VTbl*
  end

  struct IDWriteTextFormat3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_text_alignment : UInt64
    set_paragraph_alignment : UInt64
    set_word_wrapping : UInt64
    set_reading_direction : UInt64
    set_flow_direction : UInt64
    set_incremental_tab_stop : UInt64
    set_trimming : UInt64
    set_line_spacing : UInt64
    get_text_alignment : UInt64
    get_paragraph_alignment : UInt64
    get_word_wrapping : UInt64
    get_reading_direction : UInt64
    get_flow_direction : UInt64
    get_incremental_tab_stop : UInt64
    get_trimming : UInt64
    get_line_spacing : UInt64
    get_font_collection : UInt64
    get_font_family_name_length : UInt64
    get_font_family_name : UInt64
    get_font_weight : UInt64
    get_font_style : UInt64
    get_font_stretch : UInt64
    get_font_size : UInt64
    get_locale_name_length : UInt64
    get_locale_name : UInt64
    set_vertical_glyph_orientation : UInt64
    get_vertical_glyph_orientation : UInt64
    set_last_line_wrapping : UInt64
    get_last_line_wrapping : UInt64
    set_optical_alignment : UInt64
    get_optical_alignment : UInt64
    set_font_fallback : UInt64
    get_font_fallback : UInt64
    set_line_spacing2 : UInt64
    get_line_spacing2 : UInt64
    set_font_axis_values : UInt64
    get_font_axis_value_count : UInt64
    get_font_axis_values : UInt64
    get_automatic_font_axes : UInt64
    set_automatic_font_axes : UInt64
  end

  IDWriteTextFormat3_GUID = "6d3b5641-e550-430d-a85b-b7bf48a93427"
  IID_IDWriteTextFormat3 = LibC::GUID.new(0x6d3b5641_u32, 0xe550_u16, 0x430d_u16, StaticArray[0xa8_u8, 0x5b_u8, 0xb7_u8, 0xbf_u8, 0x48_u8, 0xa9_u8, 0x34_u8, 0x27_u8])
  struct IDWriteTextFormat3
    lpVtbl : IDWriteTextFormat3VTbl*
  end

  struct IDWriteFontFallback1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    map_characters : UInt64
    map_characters2 : UInt64
  end

  IDWriteFontFallback1_GUID = "2397599d-dd0d-4681-bd6a-f4f31eaade77"
  IID_IDWriteFontFallback1 = LibC::GUID.new(0x2397599d_u32, 0xdd0d_u16, 0x4681_u16, StaticArray[0xbd_u8, 0x6a_u8, 0xf4_u8, 0xf3_u8, 0x1e_u8, 0xaa_u8, 0xde_u8, 0x77_u8])
  struct IDWriteFontFallback1
    lpVtbl : IDWriteFontFallback1VTbl*
  end

  struct IDWriteFontSet2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_font_count : UInt64
    get_font_face_reference : UInt64
    find_font_face_reference : UInt64
    find_font_face : UInt64
    get_property_values : UInt64
    get_property_values2 : UInt64
    get_property_values3 : UInt64
    get_property_occurrence_count : UInt64
    get_matching_fonts : UInt64
    get_matching_fonts2 : UInt64
    get_matching_fonts3 : UInt64
    get_first_font_resources : UInt64
    get_filtered_fonts : UInt64
    get_filtered_fonts2 : UInt64
    get_filtered_fonts3 : UInt64
    get_filtered_font_indices : UInt64
    get_filtered_font_indices2 : UInt64
    get_font_axis_ranges : UInt64
    get_font_axis_ranges2 : UInt64
    get_font_face_reference2 : UInt64
    create_font_resource : UInt64
    create_font_face : UInt64
    get_font_locality : UInt64
    get_expiration_event : UInt64
  end

  IDWriteFontSet2_GUID = "dc7ead19-e54c-43af-b2da-4e2b79ba3f7f"
  IID_IDWriteFontSet2 = LibC::GUID.new(0xdc7ead19_u32, 0xe54c_u16, 0x43af_u16, StaticArray[0xb2_u8, 0xda_u8, 0x4e_u8, 0x2b_u8, 0x79_u8, 0xba_u8, 0x3f_u8, 0x7f_u8])
  struct IDWriteFontSet2
    lpVtbl : IDWriteFontSet2VTbl*
  end

  struct IDWriteFontCollection3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_font_family_count : UInt64
    get_font_family : UInt64
    find_family_name : UInt64
    get_font_from_font_face : UInt64
    get_font_set : UInt64
    get_font_family2 : UInt64
    get_font_family3 : UInt64
    get_matching_fonts : UInt64
    get_font_family_model : UInt64
    get_font_set2 : UInt64
    get_expiration_event : UInt64
  end

  IDWriteFontCollection3_GUID = "a4d055a6-f9e3-4e25-93b7-9e309f3af8e9"
  IID_IDWriteFontCollection3 = LibC::GUID.new(0xa4d055a6_u32, 0xf9e3_u16, 0x4e25_u16, StaticArray[0x93_u8, 0xb7_u8, 0x9e_u8, 0x30_u8, 0x9f_u8, 0x3a_u8, 0xf8_u8, 0xe9_u8])
  struct IDWriteFontCollection3
    lpVtbl : IDWriteFontCollection3VTbl*
  end

  struct IDWriteFactory7VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_system_font_collection : UInt64
    create_custom_font_collection : UInt64
    register_font_collection_loader : UInt64
    unregister_font_collection_loader : UInt64
    create_font_file_reference : UInt64
    create_custom_font_file_reference : UInt64
    create_font_face : UInt64
    create_rendering_params : UInt64
    create_monitor_rendering_params : UInt64
    create_custom_rendering_params : UInt64
    register_font_file_loader : UInt64
    unregister_font_file_loader : UInt64
    create_text_format : UInt64
    create_typography : UInt64
    get_gdi_interop : UInt64
    create_text_layout : UInt64
    create_gdi_compatible_text_layout : UInt64
    create_ellipsis_trimming_sign : UInt64
    create_text_analyzer : UInt64
    create_number_substitution : UInt64
    create_glyph_run_analysis : UInt64
    get_eudc_font_collection : UInt64
    create_custom_rendering_params2 : UInt64
    get_system_font_fallback : UInt64
    create_font_fallback_builder : UInt64
    translate_color_glyph_run : UInt64
    create_custom_rendering_params3 : UInt64
    create_glyph_run_analysis2 : UInt64
    create_glyph_run_analysis3 : UInt64
    create_custom_rendering_params4 : UInt64
    create_font_face_reference : UInt64
    create_font_face_reference2 : UInt64
    get_system_font_set : UInt64
    create_font_set_builder : UInt64
    create_font_collection_from_font_set : UInt64
    get_system_font_collection2 : UInt64
    get_font_download_queue : UInt64
    translate_color_glyph_run2 : UInt64
    compute_glyph_origins : UInt64
    compute_glyph_origins2 : UInt64
    create_font_set_builder2 : UInt64
    create_in_memory_font_file_loader : UInt64
    create_http_font_file_loader : UInt64
    analyze_container_type : UInt64
    unpack_font_file : UInt64
    create_font_face_reference3 : UInt64
    create_font_resource : UInt64
    get_system_font_set2 : UInt64
    get_system_font_collection3 : UInt64
    create_font_collection_from_font_set2 : UInt64
    create_font_set_builder3 : UInt64
    create_text_format2 : UInt64
    get_system_font_set3 : UInt64
    get_system_font_collection4 : UInt64
  end

  IDWriteFactory7_GUID = "35d0e0b3-9076-4d2e-a016-a91b568a06b4"
  IID_IDWriteFactory7 = LibC::GUID.new(0x35d0e0b3_u32, 0x9076_u16, 0x4d2e_u16, StaticArray[0xa0_u8, 0x16_u8, 0xa9_u8, 0x1b_u8, 0x56_u8, 0x8a_u8, 0x6_u8, 0xb4_u8])
  struct IDWriteFactory7
    lpVtbl : IDWriteFactory7VTbl*
  end

  struct IDWriteFontSet3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_font_count : UInt64
    get_font_face_reference : UInt64
    find_font_face_reference : UInt64
    find_font_face : UInt64
    get_property_values : UInt64
    get_property_values2 : UInt64
    get_property_values3 : UInt64
    get_property_occurrence_count : UInt64
    get_matching_fonts : UInt64
    get_matching_fonts2 : UInt64
    get_matching_fonts3 : UInt64
    get_first_font_resources : UInt64
    get_filtered_fonts : UInt64
    get_filtered_fonts2 : UInt64
    get_filtered_fonts3 : UInt64
    get_filtered_font_indices : UInt64
    get_filtered_font_indices2 : UInt64
    get_font_axis_ranges : UInt64
    get_font_axis_ranges2 : UInt64
    get_font_face_reference2 : UInt64
    create_font_resource : UInt64
    create_font_face : UInt64
    get_font_locality : UInt64
    get_expiration_event : UInt64
    get_font_source_type : UInt64
    get_font_source_name_length : UInt64
    get_font_source_name : UInt64
  end

  IDWriteFontSet3_GUID = "7c073ef2-a7f4-4045-8c32-8ab8ae640f90"
  IID_IDWriteFontSet3 = LibC::GUID.new(0x7c073ef2_u32, 0xa7f4_u16, 0x4045_u16, StaticArray[0x8c_u8, 0x32_u8, 0x8a_u8, 0xb8_u8, 0xae_u8, 0x64_u8, 0xf_u8, 0x90_u8])
  struct IDWriteFontSet3
    lpVtbl : IDWriteFontSet3VTbl*
  end

  struct IDWriteFontFace6VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type : UInt64
    get_files : UInt64
    get_index : UInt64
    get_simulations : UInt64
    is_symbol_font : UInt64
    get_metrics : UInt64
    get_glyph_count : UInt64
    get_design_glyph_metrics : UInt64
    get_glyph_indices : UInt64
    try_get_font_table : UInt64
    release_font_table : UInt64
    get_glyph_run_outline : UInt64
    get_recommended_rendering_mode : UInt64
    get_gdi_compatible_metrics : UInt64
    get_gdi_compatible_glyph_metrics : UInt64
    get_metrics2 : UInt64
    get_gdi_compatible_metrics2 : UInt64
    get_caret_metrics : UInt64
    get_unicode_ranges : UInt64
    is_monospaced_font : UInt64
    get_design_glyph_advances : UInt64
    get_gdi_compatible_glyph_advances : UInt64
    get_kerning_pair_adjustments : UInt64
    has_kerning_pairs : UInt64
    get_recommended_rendering_mode2 : UInt64
    get_vertical_glyph_variants : UInt64
    has_vertical_glyph_variants : UInt64
    is_color_font : UInt64
    get_color_palette_count : UInt64
    get_palette_entry_count : UInt64
    get_palette_entries : UInt64
    get_recommended_rendering_mode3 : UInt64
    get_font_face_reference : UInt64
    get_panose : UInt64
    get_weight : UInt64
    get_stretch : UInt64
    get_style : UInt64
    get_family_names : UInt64
    get_face_names : UInt64
    get_informational_strings : UInt64
    has_character : UInt64
    get_recommended_rendering_mode4 : UInt64
    is_character_local : UInt64
    is_glyph_local : UInt64
    are_characters_local : UInt64
    are_glyphs_local : UInt64
    get_glyph_image_formats : UInt64
    get_glyph_image_formats2 : UInt64
    get_glyph_image_data : UInt64
    release_glyph_image_data : UInt64
    get_font_axis_value_count : UInt64
    get_font_axis_values : UInt64
    has_variations : UInt64
    get_font_resource : UInt64
    equals : UInt64
    get_family_names2 : UInt64
    get_face_names2 : UInt64
  end

  IDWriteFontFace6_GUID = "c4b1fe1b-6e84-47d5-b54c-a597981b06ad"
  IID_IDWriteFontFace6 = LibC::GUID.new(0xc4b1fe1b_u32, 0x6e84_u16, 0x47d5_u16, StaticArray[0xb5_u8, 0x4c_u8, 0xa5_u8, 0x97_u8, 0x98_u8, 0x1b_u8, 0x6_u8, 0xad_u8])
  struct IDWriteFontFace6
    lpVtbl : IDWriteFontFace6VTbl*
  end


  # Params # factorytype : DWRITE_FACTORY_TYPE [In],iid : Guid* [In],factory : IUnknown* [In]
  fun DWriteCreateFactory(factorytype : DWRITE_FACTORY_TYPE, iid : Guid*, factory : IUnknown*) : HRESULT
end
struct LibWin32::IDWriteFontFileLoader
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def create_stream_from_key(fontfilereferencekey : Void*, fontfilereferencekeysize : UInt32, fontfilestream : IDWriteFontFileStream*) : HRESULT
    @lpVtbl.value.create_stream_from_key.unsafe_as(Proc(Void*, UInt32, IDWriteFontFileStream*, HRESULT)).call(fontfilereferencekey, fontfilereferencekeysize, fontfilestream)
  end
end
struct LibWin32::IDWriteLocalFontFileLoader
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def create_stream_from_key(fontfilereferencekey : Void*, fontfilereferencekeysize : UInt32, fontfilestream : IDWriteFontFileStream*) : HRESULT
    @lpVtbl.value.create_stream_from_key.unsafe_as(Proc(Void*, UInt32, IDWriteFontFileStream*, HRESULT)).call(fontfilereferencekey, fontfilereferencekeysize, fontfilestream)
  end
  def get_file_path_length_from_key(fontfilereferencekey : Void*, fontfilereferencekeysize : UInt32, filepathlength : UInt32*) : HRESULT
    @lpVtbl.value.get_file_path_length_from_key.unsafe_as(Proc(Void*, UInt32, UInt32*, HRESULT)).call(fontfilereferencekey, fontfilereferencekeysize, filepathlength)
  end
  def get_file_path_from_key(fontfilereferencekey : Void*, fontfilereferencekeysize : UInt32, filepath : Char*, filepathsize : UInt32) : HRESULT
    @lpVtbl.value.get_file_path_from_key.unsafe_as(Proc(Void*, UInt32, Char*, UInt32, HRESULT)).call(fontfilereferencekey, fontfilereferencekeysize, filepath, filepathsize)
  end
  def get_last_write_time_from_key(fontfilereferencekey : Void*, fontfilereferencekeysize : UInt32, lastwritetime : FILETIME*) : HRESULT
    @lpVtbl.value.get_last_write_time_from_key.unsafe_as(Proc(Void*, UInt32, FILETIME*, HRESULT)).call(fontfilereferencekey, fontfilereferencekeysize, lastwritetime)
  end
end
struct LibWin32::IDWriteFontFileStream
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def read_file_fragment(fragmentstart : Void**, fileoffset : UInt64, fragmentsize : UInt64, fragmentcontext : Void**) : HRESULT
    @lpVtbl.value.read_file_fragment.unsafe_as(Proc(Void**, UInt64, UInt64, Void**, HRESULT)).call(fragmentstart, fileoffset, fragmentsize, fragmentcontext)
  end
  def release_file_fragment(fragmentcontext : Void*) : Void
    @lpVtbl.value.release_file_fragment.unsafe_as(Proc(Void*, Void)).call(fragmentcontext)
  end
  def get_file_size(filesize : UInt64*) : HRESULT
    @lpVtbl.value.get_file_size.unsafe_as(Proc(UInt64*, HRESULT)).call(filesize)
  end
  def get_last_write_time(lastwritetime : UInt64*) : HRESULT
    @lpVtbl.value.get_last_write_time.unsafe_as(Proc(UInt64*, HRESULT)).call(lastwritetime)
  end
end
struct LibWin32::IDWriteFontFile
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_reference_key(fontfilereferencekey : Void**, fontfilereferencekeysize : UInt32*) : HRESULT
    @lpVtbl.value.get_reference_key.unsafe_as(Proc(Void**, UInt32*, HRESULT)).call(fontfilereferencekey, fontfilereferencekeysize)
  end
  def get_loader(fontfileloader : IDWriteFontFileLoader*) : HRESULT
    @lpVtbl.value.get_loader.unsafe_as(Proc(IDWriteFontFileLoader*, HRESULT)).call(fontfileloader)
  end
  def analyze(issupportedfonttype : LibC::BOOL*, fontfiletype : DWRITE_FONT_FILE_TYPE*, fontfacetype : DWRITE_FONT_FACE_TYPE*, numberoffaces : UInt32*) : HRESULT
    @lpVtbl.value.analyze.unsafe_as(Proc(LibC::BOOL*, DWRITE_FONT_FILE_TYPE*, DWRITE_FONT_FACE_TYPE*, UInt32*, HRESULT)).call(issupportedfonttype, fontfiletype, fontfacetype, numberoffaces)
  end
end
struct LibWin32::IDWriteRenderingParams
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_gamma : Float32
    @lpVtbl.value.get_gamma.unsafe_as(Proc(Float32)).call
  end
  def get_enhanced_contrast : Float32
    @lpVtbl.value.get_enhanced_contrast.unsafe_as(Proc(Float32)).call
  end
  def get_clear_type_level : Float32
    @lpVtbl.value.get_clear_type_level.unsafe_as(Proc(Float32)).call
  end
  def get_pixel_geometry : DWRITE_PIXEL_GEOMETRY
    @lpVtbl.value.get_pixel_geometry.unsafe_as(Proc(DWRITE_PIXEL_GEOMETRY)).call
  end
  def get_rendering_mode : DWRITE_RENDERING_MODE
    @lpVtbl.value.get_rendering_mode.unsafe_as(Proc(DWRITE_RENDERING_MODE)).call
  end
end
struct LibWin32::IDWriteFontFace
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type : DWRITE_FONT_FACE_TYPE
    @lpVtbl.value.get_type.unsafe_as(Proc(DWRITE_FONT_FACE_TYPE)).call
  end
  def get_files(numberoffiles : UInt32*, fontfiles : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.get_files.unsafe_as(Proc(UInt32*, IDWriteFontFile*, HRESULT)).call(numberoffiles, fontfiles)
  end
  def get_index : UInt32
    @lpVtbl.value.get_index.unsafe_as(Proc(UInt32)).call
  end
  def get_simulations : DWRITE_FONT_SIMULATIONS
    @lpVtbl.value.get_simulations.unsafe_as(Proc(DWRITE_FONT_SIMULATIONS)).call
  end
  def is_symbol_font : LibC::BOOL
    @lpVtbl.value.is_symbol_font.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_metrics(fontfacemetrics : DWRITE_FONT_METRICS*) : Void
    @lpVtbl.value.get_metrics.unsafe_as(Proc(DWRITE_FONT_METRICS*, Void)).call(fontfacemetrics)
  end
  def get_glyph_count : UInt16
    @lpVtbl.value.get_glyph_count.unsafe_as(Proc(UInt16)).call
  end
  def get_design_glyph_metrics(glyphindices : UInt16*, glyphcount : UInt32, glyphmetrics : DWRITE_GLYPH_METRICS*, issideways : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_design_glyph_metrics.unsafe_as(Proc(UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)).call(glyphindices, glyphcount, glyphmetrics, issideways)
  end
  def get_glyph_indices(codepoints : UInt32*, codepointcount : UInt32, glyphindices : UInt16*) : HRESULT
    @lpVtbl.value.get_glyph_indices.unsafe_as(Proc(UInt32*, UInt32, UInt16*, HRESULT)).call(codepoints, codepointcount, glyphindices)
  end
  def try_get_font_table(opentypetabletag : UInt32, tabledata : Void**, tablesize : UInt32*, tablecontext : Void**, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.try_get_font_table.unsafe_as(Proc(UInt32, Void**, UInt32*, Void**, LibC::BOOL*, HRESULT)).call(opentypetabletag, tabledata, tablesize, tablecontext, exists)
  end
  def release_font_table(tablecontext : Void*) : Void
    @lpVtbl.value.release_font_table.unsafe_as(Proc(Void*, Void)).call(tablecontext)
  end
  def get_glyph_run_outline(emsize : Float32, glyphindices : UInt16*, glyphadvances : Float32*, glyphoffsets : DWRITE_GLYPH_OFFSET*, glyphcount : UInt32, issideways : LibC::BOOL, isrighttoleft : LibC::BOOL, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.get_glyph_run_outline.unsafe_as(Proc(Float32, UInt16*, Float32*, DWRITE_GLYPH_OFFSET*, UInt32, LibC::BOOL, LibC::BOOL, ID2D1SimplifiedGeometrySink, HRESULT)).call(emsize, glyphindices, glyphadvances, glyphoffsets, glyphcount, issideways, isrighttoleft, geometrysink)
  end
  def get_recommended_rendering_mode(emsize : Float32, pixelsperdip : Float32, measuringmode : DWRITE_MEASURING_MODE, renderingparams : IDWriteRenderingParams, renderingmode : DWRITE_RENDERING_MODE*) : HRESULT
    @lpVtbl.value.get_recommended_rendering_mode.unsafe_as(Proc(Float32, Float32, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE*, HRESULT)).call(emsize, pixelsperdip, measuringmode, renderingparams, renderingmode)
  end
  def get_gdi_compatible_metrics(emsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, fontfacemetrics : DWRITE_FONT_METRICS*) : HRESULT
    @lpVtbl.value.get_gdi_compatible_metrics.unsafe_as(Proc(Float32, Float32, DWRITE_MATRIX*, DWRITE_FONT_METRICS*, HRESULT)).call(emsize, pixelsperdip, transform, fontfacemetrics)
  end
  def get_gdi_compatible_glyph_metrics(emsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, usegdinatural : LibC::BOOL, glyphindices : UInt16*, glyphcount : UInt32, glyphmetrics : DWRITE_GLYPH_METRICS*, issideways : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_gdi_compatible_glyph_metrics.unsafe_as(Proc(Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)).call(emsize, pixelsperdip, transform, usegdinatural, glyphindices, glyphcount, glyphmetrics, issideways)
  end
end
struct LibWin32::IDWriteFontCollectionLoader
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def create_enumerator_from_key(factory : IDWriteFactory, collectionkey : Void*, collectionkeysize : UInt32, fontfileenumerator : IDWriteFontFileEnumerator*) : HRESULT
    @lpVtbl.value.create_enumerator_from_key.unsafe_as(Proc(IDWriteFactory, Void*, UInt32, IDWriteFontFileEnumerator*, HRESULT)).call(factory, collectionkey, collectionkeysize, fontfileenumerator)
  end
end
struct LibWin32::IDWriteFontFileEnumerator
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def move_next(hascurrentfile : LibC::BOOL*) : HRESULT
    @lpVtbl.value.move_next.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(hascurrentfile)
  end
  def get_current_font_file(fontfile : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.get_current_font_file.unsafe_as(Proc(IDWriteFontFile*, HRESULT)).call(fontfile)
  end
end
struct LibWin32::IDWriteLocalizedStrings
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_count : UInt32
    @lpVtbl.value.get_count.unsafe_as(Proc(UInt32)).call
  end
  def find_locale_name(localename : LibC::LPWSTR, index : UInt32*, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.find_locale_name.unsafe_as(Proc(LibC::LPWSTR, UInt32*, LibC::BOOL*, HRESULT)).call(localename, index, exists)
  end
  def get_locale_name_length(index : UInt32, length : UInt32*) : HRESULT
    @lpVtbl.value.get_locale_name_length.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(index, length)
  end
  def get_locale_name(index : UInt32, localename : Char*, size : UInt32) : HRESULT
    @lpVtbl.value.get_locale_name.unsafe_as(Proc(UInt32, Char*, UInt32, HRESULT)).call(index, localename, size)
  end
  def get_string_length(index : UInt32, length : UInt32*) : HRESULT
    @lpVtbl.value.get_string_length.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(index, length)
  end
  def get_string(index : UInt32, stringbuffer : Char*, size : UInt32) : HRESULT
    @lpVtbl.value.get_string.unsafe_as(Proc(UInt32, Char*, UInt32, HRESULT)).call(index, stringbuffer, size)
  end
end
struct LibWin32::IDWriteFontCollection
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_font_family_count : UInt32
    @lpVtbl.value.get_font_family_count.unsafe_as(Proc(UInt32)).call
  end
  def get_font_family(index : UInt32, fontfamily : IDWriteFontFamily*) : HRESULT
    @lpVtbl.value.get_font_family.unsafe_as(Proc(UInt32, IDWriteFontFamily*, HRESULT)).call(index, fontfamily)
  end
  def find_family_name(familyname : LibC::LPWSTR, index : UInt32*, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.find_family_name.unsafe_as(Proc(LibC::LPWSTR, UInt32*, LibC::BOOL*, HRESULT)).call(familyname, index, exists)
  end
  def get_font_from_font_face(fontface : IDWriteFontFace, font : IDWriteFont*) : HRESULT
    @lpVtbl.value.get_font_from_font_face.unsafe_as(Proc(IDWriteFontFace, IDWriteFont*, HRESULT)).call(fontface, font)
  end
end
struct LibWin32::IDWriteFontList
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_font_collection(fontcollection : IDWriteFontCollection*) : HRESULT
    @lpVtbl.value.get_font_collection.unsafe_as(Proc(IDWriteFontCollection*, HRESULT)).call(fontcollection)
  end
  def get_font_count : UInt32
    @lpVtbl.value.get_font_count.unsafe_as(Proc(UInt32)).call
  end
  def get_font(index : UInt32, font : IDWriteFont*) : HRESULT
    @lpVtbl.value.get_font.unsafe_as(Proc(UInt32, IDWriteFont*, HRESULT)).call(index, font)
  end
end
struct LibWin32::IDWriteFontFamily
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_font_collection(fontcollection : IDWriteFontCollection*) : HRESULT
    @lpVtbl.value.get_font_collection.unsafe_as(Proc(IDWriteFontCollection*, HRESULT)).call(fontcollection)
  end
  def get_font_count : UInt32
    @lpVtbl.value.get_font_count.unsafe_as(Proc(UInt32)).call
  end
  def get_font(index : UInt32, font : IDWriteFont*) : HRESULT
    @lpVtbl.value.get_font.unsafe_as(Proc(UInt32, IDWriteFont*, HRESULT)).call(index, font)
  end
  def get_family_names(names : IDWriteLocalizedStrings*) : HRESULT
    @lpVtbl.value.get_family_names.unsafe_as(Proc(IDWriteLocalizedStrings*, HRESULT)).call(names)
  end
  def get_first_matching_font(weight : DWRITE_FONT_WEIGHT, stretch : DWRITE_FONT_STRETCH, style : DWRITE_FONT_STYLE, matchingfont : IDWriteFont*) : HRESULT
    @lpVtbl.value.get_first_matching_font.unsafe_as(Proc(DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFont*, HRESULT)).call(weight, stretch, style, matchingfont)
  end
  def get_matching_fonts(weight : DWRITE_FONT_WEIGHT, stretch : DWRITE_FONT_STRETCH, style : DWRITE_FONT_STYLE, matchingfonts : IDWriteFontList*) : HRESULT
    @lpVtbl.value.get_matching_fonts.unsafe_as(Proc(DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFontList*, HRESULT)).call(weight, stretch, style, matchingfonts)
  end
end
struct LibWin32::IDWriteFont
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_font_family(fontfamily : IDWriteFontFamily*) : HRESULT
    @lpVtbl.value.get_font_family.unsafe_as(Proc(IDWriteFontFamily*, HRESULT)).call(fontfamily)
  end
  def get_weight : DWRITE_FONT_WEIGHT
    @lpVtbl.value.get_weight.unsafe_as(Proc(DWRITE_FONT_WEIGHT)).call
  end
  def get_stretch : DWRITE_FONT_STRETCH
    @lpVtbl.value.get_stretch.unsafe_as(Proc(DWRITE_FONT_STRETCH)).call
  end
  def get_style : DWRITE_FONT_STYLE
    @lpVtbl.value.get_style.unsafe_as(Proc(DWRITE_FONT_STYLE)).call
  end
  def is_symbol_font : LibC::BOOL
    @lpVtbl.value.is_symbol_font.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_face_names(names : IDWriteLocalizedStrings*) : HRESULT
    @lpVtbl.value.get_face_names.unsafe_as(Proc(IDWriteLocalizedStrings*, HRESULT)).call(names)
  end
  def get_informational_strings(informationalstringid : DWRITE_INFORMATIONAL_STRING_ID, informationalstrings : IDWriteLocalizedStrings*, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_informational_strings.unsafe_as(Proc(DWRITE_INFORMATIONAL_STRING_ID, IDWriteLocalizedStrings*, LibC::BOOL*, HRESULT)).call(informationalstringid, informationalstrings, exists)
  end
  def get_simulations : DWRITE_FONT_SIMULATIONS
    @lpVtbl.value.get_simulations.unsafe_as(Proc(DWRITE_FONT_SIMULATIONS)).call
  end
  def get_metrics(fontmetrics : DWRITE_FONT_METRICS*) : Void
    @lpVtbl.value.get_metrics.unsafe_as(Proc(DWRITE_FONT_METRICS*, Void)).call(fontmetrics)
  end
  def has_character(unicodevalue : UInt32, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.has_character.unsafe_as(Proc(UInt32, LibC::BOOL*, HRESULT)).call(unicodevalue, exists)
  end
  def create_font_face(fontface : IDWriteFontFace*) : HRESULT
    @lpVtbl.value.create_font_face.unsafe_as(Proc(IDWriteFontFace*, HRESULT)).call(fontface)
  end
end
struct LibWin32::IDWriteTextFormat
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_text_alignment(textalignment : DWRITE_TEXT_ALIGNMENT) : HRESULT
    @lpVtbl.value.set_text_alignment.unsafe_as(Proc(DWRITE_TEXT_ALIGNMENT, HRESULT)).call(textalignment)
  end
  def set_paragraph_alignment(paragraphalignment : DWRITE_PARAGRAPH_ALIGNMENT) : HRESULT
    @lpVtbl.value.set_paragraph_alignment.unsafe_as(Proc(DWRITE_PARAGRAPH_ALIGNMENT, HRESULT)).call(paragraphalignment)
  end
  def set_word_wrapping(wordwrapping : DWRITE_WORD_WRAPPING) : HRESULT
    @lpVtbl.value.set_word_wrapping.unsafe_as(Proc(DWRITE_WORD_WRAPPING, HRESULT)).call(wordwrapping)
  end
  def set_reading_direction(readingdirection : DWRITE_READING_DIRECTION) : HRESULT
    @lpVtbl.value.set_reading_direction.unsafe_as(Proc(DWRITE_READING_DIRECTION, HRESULT)).call(readingdirection)
  end
  def set_flow_direction(flowdirection : DWRITE_FLOW_DIRECTION) : HRESULT
    @lpVtbl.value.set_flow_direction.unsafe_as(Proc(DWRITE_FLOW_DIRECTION, HRESULT)).call(flowdirection)
  end
  def set_incremental_tab_stop(incrementaltabstop : Float32) : HRESULT
    @lpVtbl.value.set_incremental_tab_stop.unsafe_as(Proc(Float32, HRESULT)).call(incrementaltabstop)
  end
  def set_trimming(trimmingoptions : DWRITE_TRIMMING*, trimmingsign : IDWriteInlineObject) : HRESULT
    @lpVtbl.value.set_trimming.unsafe_as(Proc(DWRITE_TRIMMING*, IDWriteInlineObject, HRESULT)).call(trimmingoptions, trimmingsign)
  end
  def set_line_spacing(linespacingmethod : DWRITE_LINE_SPACING_METHOD, linespacing : Float32, baseline : Float32) : HRESULT
    @lpVtbl.value.set_line_spacing.unsafe_as(Proc(DWRITE_LINE_SPACING_METHOD, Float32, Float32, HRESULT)).call(linespacingmethod, linespacing, baseline)
  end
  def get_text_alignment : DWRITE_TEXT_ALIGNMENT
    @lpVtbl.value.get_text_alignment.unsafe_as(Proc(DWRITE_TEXT_ALIGNMENT)).call
  end
  def get_paragraph_alignment : DWRITE_PARAGRAPH_ALIGNMENT
    @lpVtbl.value.get_paragraph_alignment.unsafe_as(Proc(DWRITE_PARAGRAPH_ALIGNMENT)).call
  end
  def get_word_wrapping : DWRITE_WORD_WRAPPING
    @lpVtbl.value.get_word_wrapping.unsafe_as(Proc(DWRITE_WORD_WRAPPING)).call
  end
  def get_reading_direction : DWRITE_READING_DIRECTION
    @lpVtbl.value.get_reading_direction.unsafe_as(Proc(DWRITE_READING_DIRECTION)).call
  end
  def get_flow_direction : DWRITE_FLOW_DIRECTION
    @lpVtbl.value.get_flow_direction.unsafe_as(Proc(DWRITE_FLOW_DIRECTION)).call
  end
  def get_incremental_tab_stop : Float32
    @lpVtbl.value.get_incremental_tab_stop.unsafe_as(Proc(Float32)).call
  end
  def get_trimming(trimmingoptions : DWRITE_TRIMMING*, trimmingsign : IDWriteInlineObject*) : HRESULT
    @lpVtbl.value.get_trimming.unsafe_as(Proc(DWRITE_TRIMMING*, IDWriteInlineObject*, HRESULT)).call(trimmingoptions, trimmingsign)
  end
  def get_line_spacing(linespacingmethod : DWRITE_LINE_SPACING_METHOD*, linespacing : Float32*, baseline : Float32*) : HRESULT
    @lpVtbl.value.get_line_spacing.unsafe_as(Proc(DWRITE_LINE_SPACING_METHOD*, Float32*, Float32*, HRESULT)).call(linespacingmethod, linespacing, baseline)
  end
  def get_font_collection(fontcollection : IDWriteFontCollection*) : HRESULT
    @lpVtbl.value.get_font_collection.unsafe_as(Proc(IDWriteFontCollection*, HRESULT)).call(fontcollection)
  end
  def get_font_family_name_length : UInt32
    @lpVtbl.value.get_font_family_name_length.unsafe_as(Proc(UInt32)).call
  end
  def get_font_family_name(fontfamilyname : Char*, namesize : UInt32) : HRESULT
    @lpVtbl.value.get_font_family_name.unsafe_as(Proc(Char*, UInt32, HRESULT)).call(fontfamilyname, namesize)
  end
  def get_font_weight : DWRITE_FONT_WEIGHT
    @lpVtbl.value.get_font_weight.unsafe_as(Proc(DWRITE_FONT_WEIGHT)).call
  end
  def get_font_style : DWRITE_FONT_STYLE
    @lpVtbl.value.get_font_style.unsafe_as(Proc(DWRITE_FONT_STYLE)).call
  end
  def get_font_stretch : DWRITE_FONT_STRETCH
    @lpVtbl.value.get_font_stretch.unsafe_as(Proc(DWRITE_FONT_STRETCH)).call
  end
  def get_font_size : Float32
    @lpVtbl.value.get_font_size.unsafe_as(Proc(Float32)).call
  end
  def get_locale_name_length : UInt32
    @lpVtbl.value.get_locale_name_length.unsafe_as(Proc(UInt32)).call
  end
  def get_locale_name(localename : Char*, namesize : UInt32) : HRESULT
    @lpVtbl.value.get_locale_name.unsafe_as(Proc(Char*, UInt32, HRESULT)).call(localename, namesize)
  end
end
struct LibWin32::IDWriteTypography
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def add_font_feature(fontfeature : DWRITE_FONT_FEATURE) : HRESULT
    @lpVtbl.value.add_font_feature.unsafe_as(Proc(DWRITE_FONT_FEATURE, HRESULT)).call(fontfeature)
  end
  def get_font_feature_count : UInt32
    @lpVtbl.value.get_font_feature_count.unsafe_as(Proc(UInt32)).call
  end
  def get_font_feature(fontfeatureindex : UInt32, fontfeature : DWRITE_FONT_FEATURE*) : HRESULT
    @lpVtbl.value.get_font_feature.unsafe_as(Proc(UInt32, DWRITE_FONT_FEATURE*, HRESULT)).call(fontfeatureindex, fontfeature)
  end
end
struct LibWin32::IDWriteNumberSubstitution
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
end
struct LibWin32::IDWriteTextAnalysisSource
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_text_at_position(textposition : UInt32, textstring : UInt16**, textlength : UInt32*) : HRESULT
    @lpVtbl.value.get_text_at_position.unsafe_as(Proc(UInt32, UInt16**, UInt32*, HRESULT)).call(textposition, textstring, textlength)
  end
  def get_text_before_position(textposition : UInt32, textstring : UInt16**, textlength : UInt32*) : HRESULT
    @lpVtbl.value.get_text_before_position.unsafe_as(Proc(UInt32, UInt16**, UInt32*, HRESULT)).call(textposition, textstring, textlength)
  end
  def get_paragraph_reading_direction : DWRITE_READING_DIRECTION
    @lpVtbl.value.get_paragraph_reading_direction.unsafe_as(Proc(DWRITE_READING_DIRECTION)).call
  end
  def get_locale_name(textposition : UInt32, textlength : UInt32*, localename : UInt16**) : HRESULT
    @lpVtbl.value.get_locale_name.unsafe_as(Proc(UInt32, UInt32*, UInt16**, HRESULT)).call(textposition, textlength, localename)
  end
  def get_number_substitution(textposition : UInt32, textlength : UInt32*, numbersubstitution : IDWriteNumberSubstitution*) : HRESULT
    @lpVtbl.value.get_number_substitution.unsafe_as(Proc(UInt32, UInt32*, IDWriteNumberSubstitution*, HRESULT)).call(textposition, textlength, numbersubstitution)
  end
end
struct LibWin32::IDWriteTextAnalysisSink
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_script_analysis(textposition : UInt32, textlength : UInt32, scriptanalysis : DWRITE_SCRIPT_ANALYSIS*) : HRESULT
    @lpVtbl.value.set_script_analysis.unsafe_as(Proc(UInt32, UInt32, DWRITE_SCRIPT_ANALYSIS*, HRESULT)).call(textposition, textlength, scriptanalysis)
  end
  def set_line_breakpoints(textposition : UInt32, textlength : UInt32, linebreakpoints : DWRITE_LINE_BREAKPOINT*) : HRESULT
    @lpVtbl.value.set_line_breakpoints.unsafe_as(Proc(UInt32, UInt32, DWRITE_LINE_BREAKPOINT*, HRESULT)).call(textposition, textlength, linebreakpoints)
  end
  def set_bidi_level(textposition : UInt32, textlength : UInt32, explicitlevel : UInt8, resolvedlevel : UInt8) : HRESULT
    @lpVtbl.value.set_bidi_level.unsafe_as(Proc(UInt32, UInt32, UInt8, UInt8, HRESULT)).call(textposition, textlength, explicitlevel, resolvedlevel)
  end
  def set_number_substitution(textposition : UInt32, textlength : UInt32, numbersubstitution : IDWriteNumberSubstitution) : HRESULT
    @lpVtbl.value.set_number_substitution.unsafe_as(Proc(UInt32, UInt32, IDWriteNumberSubstitution, HRESULT)).call(textposition, textlength, numbersubstitution)
  end
end
struct LibWin32::IDWriteTextAnalyzer
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def analyze_script(analysissource : IDWriteTextAnalysisSource, textposition : UInt32, textlength : UInt32, analysissink : IDWriteTextAnalysisSink) : HRESULT
    @lpVtbl.value.analyze_script.unsafe_as(Proc(IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteTextAnalysisSink, HRESULT)).call(analysissource, textposition, textlength, analysissink)
  end
  def analyze_bidi(analysissource : IDWriteTextAnalysisSource, textposition : UInt32, textlength : UInt32, analysissink : IDWriteTextAnalysisSink) : HRESULT
    @lpVtbl.value.analyze_bidi.unsafe_as(Proc(IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteTextAnalysisSink, HRESULT)).call(analysissource, textposition, textlength, analysissink)
  end
  def analyze_number_substitution(analysissource : IDWriteTextAnalysisSource, textposition : UInt32, textlength : UInt32, analysissink : IDWriteTextAnalysisSink) : HRESULT
    @lpVtbl.value.analyze_number_substitution.unsafe_as(Proc(IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteTextAnalysisSink, HRESULT)).call(analysissource, textposition, textlength, analysissink)
  end
  def analyze_line_breakpoints(analysissource : IDWriteTextAnalysisSource, textposition : UInt32, textlength : UInt32, analysissink : IDWriteTextAnalysisSink) : HRESULT
    @lpVtbl.value.analyze_line_breakpoints.unsafe_as(Proc(IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteTextAnalysisSink, HRESULT)).call(analysissource, textposition, textlength, analysissink)
  end
  def get_glyphs(textstring : Char*, textlength : UInt32, fontface : IDWriteFontFace, issideways : LibC::BOOL, isrighttoleft : LibC::BOOL, scriptanalysis : DWRITE_SCRIPT_ANALYSIS*, localename : LibC::LPWSTR, numbersubstitution : IDWriteNumberSubstitution, features : DWRITE_TYPOGRAPHIC_FEATURES**, featurerangelengths : UInt32*, featureranges : UInt32, maxglyphcount : UInt32, clustermap : UInt16*, textprops : DWRITE_SHAPING_TEXT_PROPERTIES*, glyphindices : UInt16*, glyphprops : DWRITE_SHAPING_GLYPH_PROPERTIES*, actualglyphcount : UInt32*) : HRESULT
    @lpVtbl.value.get_glyphs.unsafe_as(Proc(Char*, UInt32, IDWriteFontFace, LibC::BOOL, LibC::BOOL, DWRITE_SCRIPT_ANALYSIS*, LibC::LPWSTR, IDWriteNumberSubstitution, DWRITE_TYPOGRAPHIC_FEATURES**, UInt32*, UInt32, UInt32, UInt16*, DWRITE_SHAPING_TEXT_PROPERTIES*, UInt16*, DWRITE_SHAPING_GLYPH_PROPERTIES*, UInt32*, HRESULT)).call(textstring, textlength, fontface, issideways, isrighttoleft, scriptanalysis, localename, numbersubstitution, features, featurerangelengths, featureranges, maxglyphcount, clustermap, textprops, glyphindices, glyphprops, actualglyphcount)
  end
  def get_glyph_placements(textstring : Char*, clustermap : UInt16*, textprops : DWRITE_SHAPING_TEXT_PROPERTIES*, textlength : UInt32, glyphindices : UInt16*, glyphprops : DWRITE_SHAPING_GLYPH_PROPERTIES*, glyphcount : UInt32, fontface : IDWriteFontFace, fontemsize : Float32, issideways : LibC::BOOL, isrighttoleft : LibC::BOOL, scriptanalysis : DWRITE_SCRIPT_ANALYSIS*, localename : LibC::LPWSTR, features : DWRITE_TYPOGRAPHIC_FEATURES**, featurerangelengths : UInt32*, featureranges : UInt32, glyphadvances : Float32*, glyphoffsets : DWRITE_GLYPH_OFFSET*) : HRESULT
    @lpVtbl.value.get_glyph_placements.unsafe_as(Proc(Char*, UInt16*, DWRITE_SHAPING_TEXT_PROPERTIES*, UInt32, UInt16*, DWRITE_SHAPING_GLYPH_PROPERTIES*, UInt32, IDWriteFontFace, Float32, LibC::BOOL, LibC::BOOL, DWRITE_SCRIPT_ANALYSIS*, LibC::LPWSTR, DWRITE_TYPOGRAPHIC_FEATURES**, UInt32*, UInt32, Float32*, DWRITE_GLYPH_OFFSET*, HRESULT)).call(textstring, clustermap, textprops, textlength, glyphindices, glyphprops, glyphcount, fontface, fontemsize, issideways, isrighttoleft, scriptanalysis, localename, features, featurerangelengths, featureranges, glyphadvances, glyphoffsets)
  end
  def get_gdi_compatible_glyph_placements(textstring : Char*, clustermap : UInt16*, textprops : DWRITE_SHAPING_TEXT_PROPERTIES*, textlength : UInt32, glyphindices : UInt16*, glyphprops : DWRITE_SHAPING_GLYPH_PROPERTIES*, glyphcount : UInt32, fontface : IDWriteFontFace, fontemsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, usegdinatural : LibC::BOOL, issideways : LibC::BOOL, isrighttoleft : LibC::BOOL, scriptanalysis : DWRITE_SCRIPT_ANALYSIS*, localename : LibC::LPWSTR, features : DWRITE_TYPOGRAPHIC_FEATURES**, featurerangelengths : UInt32*, featureranges : UInt32, glyphadvances : Float32*, glyphoffsets : DWRITE_GLYPH_OFFSET*) : HRESULT
    @lpVtbl.value.get_gdi_compatible_glyph_placements.unsafe_as(Proc(Char*, UInt16*, DWRITE_SHAPING_TEXT_PROPERTIES*, UInt32, UInt16*, DWRITE_SHAPING_GLYPH_PROPERTIES*, UInt32, IDWriteFontFace, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, LibC::BOOL, LibC::BOOL, DWRITE_SCRIPT_ANALYSIS*, LibC::LPWSTR, DWRITE_TYPOGRAPHIC_FEATURES**, UInt32*, UInt32, Float32*, DWRITE_GLYPH_OFFSET*, HRESULT)).call(textstring, clustermap, textprops, textlength, glyphindices, glyphprops, glyphcount, fontface, fontemsize, pixelsperdip, transform, usegdinatural, issideways, isrighttoleft, scriptanalysis, localename, features, featurerangelengths, featureranges, glyphadvances, glyphoffsets)
  end
end
struct LibWin32::IDWriteInlineObject
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def draw(clientdrawingcontext : Void*, renderer : IDWriteTextRenderer, originx : Float32, originy : Float32, issideways : LibC::BOOL, isrighttoleft : LibC::BOOL, clientdrawingeffect : IUnknown) : HRESULT
    @lpVtbl.value.draw.unsafe_as(Proc(Void*, IDWriteTextRenderer, Float32, Float32, LibC::BOOL, LibC::BOOL, IUnknown, HRESULT)).call(clientdrawingcontext, renderer, originx, originy, issideways, isrighttoleft, clientdrawingeffect)
  end
  def get_metrics(metrics : DWRITE_INLINE_OBJECT_METRICS*) : HRESULT
    @lpVtbl.value.get_metrics.unsafe_as(Proc(DWRITE_INLINE_OBJECT_METRICS*, HRESULT)).call(metrics)
  end
  def get_overhang_metrics(overhangs : DWRITE_OVERHANG_METRICS*) : HRESULT
    @lpVtbl.value.get_overhang_metrics.unsafe_as(Proc(DWRITE_OVERHANG_METRICS*, HRESULT)).call(overhangs)
  end
  def get_break_conditions(breakconditionbefore : DWRITE_BREAK_CONDITION*, breakconditionafter : DWRITE_BREAK_CONDITION*) : HRESULT
    @lpVtbl.value.get_break_conditions.unsafe_as(Proc(DWRITE_BREAK_CONDITION*, DWRITE_BREAK_CONDITION*, HRESULT)).call(breakconditionbefore, breakconditionafter)
  end
end
struct LibWin32::IDWritePixelSnapping
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def is_pixel_snapping_disabled(clientdrawingcontext : Void*, isdisabled : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_pixel_snapping_disabled.unsafe_as(Proc(Void*, LibC::BOOL*, HRESULT)).call(clientdrawingcontext, isdisabled)
  end
  def get_current_transform(clientdrawingcontext : Void*, transform : DWRITE_MATRIX*) : HRESULT
    @lpVtbl.value.get_current_transform.unsafe_as(Proc(Void*, DWRITE_MATRIX*, HRESULT)).call(clientdrawingcontext, transform)
  end
  def get_pixels_per_dip(clientdrawingcontext : Void*, pixelsperdip : Float32*) : HRESULT
    @lpVtbl.value.get_pixels_per_dip.unsafe_as(Proc(Void*, Float32*, HRESULT)).call(clientdrawingcontext, pixelsperdip)
  end
end
struct LibWin32::IDWriteTextRenderer
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def is_pixel_snapping_disabled(clientdrawingcontext : Void*, isdisabled : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_pixel_snapping_disabled.unsafe_as(Proc(Void*, LibC::BOOL*, HRESULT)).call(clientdrawingcontext, isdisabled)
  end
  def get_current_transform(clientdrawingcontext : Void*, transform : DWRITE_MATRIX*) : HRESULT
    @lpVtbl.value.get_current_transform.unsafe_as(Proc(Void*, DWRITE_MATRIX*, HRESULT)).call(clientdrawingcontext, transform)
  end
  def get_pixels_per_dip(clientdrawingcontext : Void*, pixelsperdip : Float32*) : HRESULT
    @lpVtbl.value.get_pixels_per_dip.unsafe_as(Proc(Void*, Float32*, HRESULT)).call(clientdrawingcontext, pixelsperdip)
  end
  def draw_glyph_run(clientdrawingcontext : Void*, baselineoriginx : Float32, baselineoriginy : Float32, measuringmode : DWRITE_MEASURING_MODE, glyphrun : DWRITE_GLYPH_RUN*, glyphrundescription : DWRITE_GLYPH_RUN_DESCRIPTION*, clientdrawingeffect : IUnknown) : HRESULT
    @lpVtbl.value.draw_glyph_run.unsafe_as(Proc(Void*, Float32, Float32, DWRITE_MEASURING_MODE, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, IUnknown, HRESULT)).call(clientdrawingcontext, baselineoriginx, baselineoriginy, measuringmode, glyphrun, glyphrundescription, clientdrawingeffect)
  end
  def draw_underline(clientdrawingcontext : Void*, baselineoriginx : Float32, baselineoriginy : Float32, underline : DWRITE_UNDERLINE*, clientdrawingeffect : IUnknown) : HRESULT
    @lpVtbl.value.draw_underline.unsafe_as(Proc(Void*, Float32, Float32, DWRITE_UNDERLINE*, IUnknown, HRESULT)).call(clientdrawingcontext, baselineoriginx, baselineoriginy, underline, clientdrawingeffect)
  end
  def draw_strikethrough(clientdrawingcontext : Void*, baselineoriginx : Float32, baselineoriginy : Float32, strikethrough : DWRITE_STRIKETHROUGH*, clientdrawingeffect : IUnknown) : HRESULT
    @lpVtbl.value.draw_strikethrough.unsafe_as(Proc(Void*, Float32, Float32, DWRITE_STRIKETHROUGH*, IUnknown, HRESULT)).call(clientdrawingcontext, baselineoriginx, baselineoriginy, strikethrough, clientdrawingeffect)
  end
  def draw_inline_object(clientdrawingcontext : Void*, originx : Float32, originy : Float32, inlineobject : IDWriteInlineObject, issideways : LibC::BOOL, isrighttoleft : LibC::BOOL, clientdrawingeffect : IUnknown) : HRESULT
    @lpVtbl.value.draw_inline_object.unsafe_as(Proc(Void*, Float32, Float32, IDWriteInlineObject, LibC::BOOL, LibC::BOOL, IUnknown, HRESULT)).call(clientdrawingcontext, originx, originy, inlineobject, issideways, isrighttoleft, clientdrawingeffect)
  end
end
struct LibWin32::IDWriteTextLayout
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_text_alignment(textalignment : DWRITE_TEXT_ALIGNMENT) : HRESULT
    @lpVtbl.value.set_text_alignment.unsafe_as(Proc(DWRITE_TEXT_ALIGNMENT, HRESULT)).call(textalignment)
  end
  def set_paragraph_alignment(paragraphalignment : DWRITE_PARAGRAPH_ALIGNMENT) : HRESULT
    @lpVtbl.value.set_paragraph_alignment.unsafe_as(Proc(DWRITE_PARAGRAPH_ALIGNMENT, HRESULT)).call(paragraphalignment)
  end
  def set_word_wrapping(wordwrapping : DWRITE_WORD_WRAPPING) : HRESULT
    @lpVtbl.value.set_word_wrapping.unsafe_as(Proc(DWRITE_WORD_WRAPPING, HRESULT)).call(wordwrapping)
  end
  def set_reading_direction(readingdirection : DWRITE_READING_DIRECTION) : HRESULT
    @lpVtbl.value.set_reading_direction.unsafe_as(Proc(DWRITE_READING_DIRECTION, HRESULT)).call(readingdirection)
  end
  def set_flow_direction(flowdirection : DWRITE_FLOW_DIRECTION) : HRESULT
    @lpVtbl.value.set_flow_direction.unsafe_as(Proc(DWRITE_FLOW_DIRECTION, HRESULT)).call(flowdirection)
  end
  def set_incremental_tab_stop(incrementaltabstop : Float32) : HRESULT
    @lpVtbl.value.set_incremental_tab_stop.unsafe_as(Proc(Float32, HRESULT)).call(incrementaltabstop)
  end
  def set_trimming(trimmingoptions : DWRITE_TRIMMING*, trimmingsign : IDWriteInlineObject) : HRESULT
    @lpVtbl.value.set_trimming.unsafe_as(Proc(DWRITE_TRIMMING*, IDWriteInlineObject, HRESULT)).call(trimmingoptions, trimmingsign)
  end
  def set_line_spacing(linespacingmethod : DWRITE_LINE_SPACING_METHOD, linespacing : Float32, baseline : Float32) : HRESULT
    @lpVtbl.value.set_line_spacing.unsafe_as(Proc(DWRITE_LINE_SPACING_METHOD, Float32, Float32, HRESULT)).call(linespacingmethod, linespacing, baseline)
  end
  def get_text_alignment : DWRITE_TEXT_ALIGNMENT
    @lpVtbl.value.get_text_alignment.unsafe_as(Proc(DWRITE_TEXT_ALIGNMENT)).call
  end
  def get_paragraph_alignment : DWRITE_PARAGRAPH_ALIGNMENT
    @lpVtbl.value.get_paragraph_alignment.unsafe_as(Proc(DWRITE_PARAGRAPH_ALIGNMENT)).call
  end
  def get_word_wrapping : DWRITE_WORD_WRAPPING
    @lpVtbl.value.get_word_wrapping.unsafe_as(Proc(DWRITE_WORD_WRAPPING)).call
  end
  def get_reading_direction : DWRITE_READING_DIRECTION
    @lpVtbl.value.get_reading_direction.unsafe_as(Proc(DWRITE_READING_DIRECTION)).call
  end
  def get_flow_direction : DWRITE_FLOW_DIRECTION
    @lpVtbl.value.get_flow_direction.unsafe_as(Proc(DWRITE_FLOW_DIRECTION)).call
  end
  def get_incremental_tab_stop : Float32
    @lpVtbl.value.get_incremental_tab_stop.unsafe_as(Proc(Float32)).call
  end
  def get_trimming(trimmingoptions : DWRITE_TRIMMING*, trimmingsign : IDWriteInlineObject*) : HRESULT
    @lpVtbl.value.get_trimming.unsafe_as(Proc(DWRITE_TRIMMING*, IDWriteInlineObject*, HRESULT)).call(trimmingoptions, trimmingsign)
  end
  def get_line_spacing(linespacingmethod : DWRITE_LINE_SPACING_METHOD*, linespacing : Float32*, baseline : Float32*) : HRESULT
    @lpVtbl.value.get_line_spacing.unsafe_as(Proc(DWRITE_LINE_SPACING_METHOD*, Float32*, Float32*, HRESULT)).call(linespacingmethod, linespacing, baseline)
  end
  def get_font_collection(fontcollection : IDWriteFontCollection*) : HRESULT
    @lpVtbl.value.get_font_collection.unsafe_as(Proc(IDWriteFontCollection*, HRESULT)).call(fontcollection)
  end
  def get_font_family_name_length : UInt32
    @lpVtbl.value.get_font_family_name_length.unsafe_as(Proc(UInt32)).call
  end
  def get_font_family_name(fontfamilyname : Char*, namesize : UInt32) : HRESULT
    @lpVtbl.value.get_font_family_name.unsafe_as(Proc(Char*, UInt32, HRESULT)).call(fontfamilyname, namesize)
  end
  def get_font_weight : DWRITE_FONT_WEIGHT
    @lpVtbl.value.get_font_weight.unsafe_as(Proc(DWRITE_FONT_WEIGHT)).call
  end
  def get_font_style : DWRITE_FONT_STYLE
    @lpVtbl.value.get_font_style.unsafe_as(Proc(DWRITE_FONT_STYLE)).call
  end
  def get_font_stretch : DWRITE_FONT_STRETCH
    @lpVtbl.value.get_font_stretch.unsafe_as(Proc(DWRITE_FONT_STRETCH)).call
  end
  def get_font_size : Float32
    @lpVtbl.value.get_font_size.unsafe_as(Proc(Float32)).call
  end
  def get_locale_name_length : UInt32
    @lpVtbl.value.get_locale_name_length.unsafe_as(Proc(UInt32)).call
  end
  def get_locale_name(localename : Char*, namesize : UInt32) : HRESULT
    @lpVtbl.value.get_locale_name.unsafe_as(Proc(Char*, UInt32, HRESULT)).call(localename, namesize)
  end
  def set_max_width(maxwidth : Float32) : HRESULT
    @lpVtbl.value.set_max_width.unsafe_as(Proc(Float32, HRESULT)).call(maxwidth)
  end
  def set_max_height(maxheight : Float32) : HRESULT
    @lpVtbl.value.set_max_height.unsafe_as(Proc(Float32, HRESULT)).call(maxheight)
  end
  def set_font_collection(fontcollection : IDWriteFontCollection, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_collection.unsafe_as(Proc(IDWriteFontCollection, DWRITE_TEXT_RANGE, HRESULT)).call(fontcollection, textrange)
  end
  def set_font_family_name(fontfamilyname : LibC::LPWSTR, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_family_name.unsafe_as(Proc(LibC::LPWSTR, DWRITE_TEXT_RANGE, HRESULT)).call(fontfamilyname, textrange)
  end
  def set_font_weight(fontweight : DWRITE_FONT_WEIGHT, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_weight.unsafe_as(Proc(DWRITE_FONT_WEIGHT, DWRITE_TEXT_RANGE, HRESULT)).call(fontweight, textrange)
  end
  def set_font_style(fontstyle : DWRITE_FONT_STYLE, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_style.unsafe_as(Proc(DWRITE_FONT_STYLE, DWRITE_TEXT_RANGE, HRESULT)).call(fontstyle, textrange)
  end
  def set_font_stretch(fontstretch : DWRITE_FONT_STRETCH, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_stretch.unsafe_as(Proc(DWRITE_FONT_STRETCH, DWRITE_TEXT_RANGE, HRESULT)).call(fontstretch, textrange)
  end
  def set_font_size(fontsize : Float32, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_size.unsafe_as(Proc(Float32, DWRITE_TEXT_RANGE, HRESULT)).call(fontsize, textrange)
  end
  def set_underline(hasunderline : LibC::BOOL, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_underline.unsafe_as(Proc(LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)).call(hasunderline, textrange)
  end
  def set_strikethrough(hasstrikethrough : LibC::BOOL, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_strikethrough.unsafe_as(Proc(LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)).call(hasstrikethrough, textrange)
  end
  def set_drawing_effect(drawingeffect : IUnknown, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_drawing_effect.unsafe_as(Proc(IUnknown, DWRITE_TEXT_RANGE, HRESULT)).call(drawingeffect, textrange)
  end
  def set_inline_object(inlineobject : IDWriteInlineObject, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_inline_object.unsafe_as(Proc(IDWriteInlineObject, DWRITE_TEXT_RANGE, HRESULT)).call(inlineobject, textrange)
  end
  def set_typography(typography : IDWriteTypography, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_typography.unsafe_as(Proc(IDWriteTypography, DWRITE_TEXT_RANGE, HRESULT)).call(typography, textrange)
  end
  def set_locale_name(localename : LibC::LPWSTR, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_locale_name.unsafe_as(Proc(LibC::LPWSTR, DWRITE_TEXT_RANGE, HRESULT)).call(localename, textrange)
  end
  def get_max_width : Float32
    @lpVtbl.value.get_max_width.unsafe_as(Proc(Float32)).call
  end
  def get_max_height : Float32
    @lpVtbl.value.get_max_height.unsafe_as(Proc(Float32)).call
  end
  def get_font_collection2(currentposition : UInt32, fontcollection : IDWriteFontCollection*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_collection2.unsafe_as(Proc(UInt32, IDWriteFontCollection*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontcollection, textrange)
  end
  def get_font_family_name_length2(currentposition : UInt32, namelength : UInt32*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_family_name_length2.unsafe_as(Proc(UInt32, UInt32*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, namelength, textrange)
  end
  def get_font_family_name2(currentposition : UInt32, fontfamilyname : Char*, namesize : UInt32, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_family_name2.unsafe_as(Proc(UInt32, Char*, UInt32, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontfamilyname, namesize, textrange)
  end
  def get_font_weight2(currentposition : UInt32, fontweight : DWRITE_FONT_WEIGHT*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_weight2.unsafe_as(Proc(UInt32, DWRITE_FONT_WEIGHT*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontweight, textrange)
  end
  def get_font_style2(currentposition : UInt32, fontstyle : DWRITE_FONT_STYLE*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_style2.unsafe_as(Proc(UInt32, DWRITE_FONT_STYLE*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontstyle, textrange)
  end
  def get_font_stretch2(currentposition : UInt32, fontstretch : DWRITE_FONT_STRETCH*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_stretch2.unsafe_as(Proc(UInt32, DWRITE_FONT_STRETCH*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontstretch, textrange)
  end
  def get_font_size2(currentposition : UInt32, fontsize : Float32*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_size2.unsafe_as(Proc(UInt32, Float32*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontsize, textrange)
  end
  def get_underline(currentposition : UInt32, hasunderline : LibC::BOOL*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_underline.unsafe_as(Proc(UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, hasunderline, textrange)
  end
  def get_strikethrough(currentposition : UInt32, hasstrikethrough : LibC::BOOL*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_strikethrough.unsafe_as(Proc(UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, hasstrikethrough, textrange)
  end
  def get_drawing_effect(currentposition : UInt32, drawingeffect : IUnknown*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_drawing_effect.unsafe_as(Proc(UInt32, IUnknown*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, drawingeffect, textrange)
  end
  def get_inline_object(currentposition : UInt32, inlineobject : IDWriteInlineObject*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_inline_object.unsafe_as(Proc(UInt32, IDWriteInlineObject*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, inlineobject, textrange)
  end
  def get_typography(currentposition : UInt32, typography : IDWriteTypography*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_typography.unsafe_as(Proc(UInt32, IDWriteTypography*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, typography, textrange)
  end
  def get_locale_name_length2(currentposition : UInt32, namelength : UInt32*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_locale_name_length2.unsafe_as(Proc(UInt32, UInt32*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, namelength, textrange)
  end
  def get_locale_name2(currentposition : UInt32, localename : Char*, namesize : UInt32, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_locale_name2.unsafe_as(Proc(UInt32, Char*, UInt32, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, localename, namesize, textrange)
  end
  def draw(clientdrawingcontext : Void*, renderer : IDWriteTextRenderer, originx : Float32, originy : Float32) : HRESULT
    @lpVtbl.value.draw.unsafe_as(Proc(Void*, IDWriteTextRenderer, Float32, Float32, HRESULT)).call(clientdrawingcontext, renderer, originx, originy)
  end
  def get_line_metrics(linemetrics : DWRITE_LINE_METRICS*, maxlinecount : UInt32, actuallinecount : UInt32*) : HRESULT
    @lpVtbl.value.get_line_metrics.unsafe_as(Proc(DWRITE_LINE_METRICS*, UInt32, UInt32*, HRESULT)).call(linemetrics, maxlinecount, actuallinecount)
  end
  def get_metrics(textmetrics : DWRITE_TEXT_METRICS*) : HRESULT
    @lpVtbl.value.get_metrics.unsafe_as(Proc(DWRITE_TEXT_METRICS*, HRESULT)).call(textmetrics)
  end
  def get_overhang_metrics(overhangs : DWRITE_OVERHANG_METRICS*) : HRESULT
    @lpVtbl.value.get_overhang_metrics.unsafe_as(Proc(DWRITE_OVERHANG_METRICS*, HRESULT)).call(overhangs)
  end
  def get_cluster_metrics(clustermetrics : DWRITE_CLUSTER_METRICS*, maxclustercount : UInt32, actualclustercount : UInt32*) : HRESULT
    @lpVtbl.value.get_cluster_metrics.unsafe_as(Proc(DWRITE_CLUSTER_METRICS*, UInt32, UInt32*, HRESULT)).call(clustermetrics, maxclustercount, actualclustercount)
  end
  def determine_min_width(minwidth : Float32*) : HRESULT
    @lpVtbl.value.determine_min_width.unsafe_as(Proc(Float32*, HRESULT)).call(minwidth)
  end
  def hit_test_point(pointx : Float32, pointy : Float32, istrailinghit : LibC::BOOL*, isinside : LibC::BOOL*, hittestmetrics : DWRITE_HIT_TEST_METRICS*) : HRESULT
    @lpVtbl.value.hit_test_point.unsafe_as(Proc(Float32, Float32, LibC::BOOL*, LibC::BOOL*, DWRITE_HIT_TEST_METRICS*, HRESULT)).call(pointx, pointy, istrailinghit, isinside, hittestmetrics)
  end
  def hit_test_text_position(textposition : UInt32, istrailinghit : LibC::BOOL, pointx : Float32*, pointy : Float32*, hittestmetrics : DWRITE_HIT_TEST_METRICS*) : HRESULT
    @lpVtbl.value.hit_test_text_position.unsafe_as(Proc(UInt32, LibC::BOOL, Float32*, Float32*, DWRITE_HIT_TEST_METRICS*, HRESULT)).call(textposition, istrailinghit, pointx, pointy, hittestmetrics)
  end
  def hit_test_text_range(textposition : UInt32, textlength : UInt32, originx : Float32, originy : Float32, hittestmetrics : DWRITE_HIT_TEST_METRICS*, maxhittestmetricscount : UInt32, actualhittestmetricscount : UInt32*) : HRESULT
    @lpVtbl.value.hit_test_text_range.unsafe_as(Proc(UInt32, UInt32, Float32, Float32, DWRITE_HIT_TEST_METRICS*, UInt32, UInt32*, HRESULT)).call(textposition, textlength, originx, originy, hittestmetrics, maxhittestmetricscount, actualhittestmetricscount)
  end
end
struct LibWin32::IDWriteBitmapRenderTarget
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def draw_glyph_run(baselineoriginx : Float32, baselineoriginy : Float32, measuringmode : DWRITE_MEASURING_MODE, glyphrun : DWRITE_GLYPH_RUN*, renderingparams : IDWriteRenderingParams, textcolor : UInt32, blackboxrect : RECT*) : HRESULT
    @lpVtbl.value.draw_glyph_run.unsafe_as(Proc(Float32, Float32, DWRITE_MEASURING_MODE, DWRITE_GLYPH_RUN*, IDWriteRenderingParams, UInt32, RECT*, HRESULT)).call(baselineoriginx, baselineoriginy, measuringmode, glyphrun, renderingparams, textcolor, blackboxrect)
  end
  def get_memory_dc : HDC
    @lpVtbl.value.get_memory_dc.unsafe_as(Proc(HDC)).call
  end
  def get_pixels_per_dip : Float32
    @lpVtbl.value.get_pixels_per_dip.unsafe_as(Proc(Float32)).call
  end
  def set_pixels_per_dip(pixelsperdip : Float32) : HRESULT
    @lpVtbl.value.set_pixels_per_dip.unsafe_as(Proc(Float32, HRESULT)).call(pixelsperdip)
  end
  def get_current_transform(transform : DWRITE_MATRIX*) : HRESULT
    @lpVtbl.value.get_current_transform.unsafe_as(Proc(DWRITE_MATRIX*, HRESULT)).call(transform)
  end
  def set_current_transform(transform : DWRITE_MATRIX*) : HRESULT
    @lpVtbl.value.set_current_transform.unsafe_as(Proc(DWRITE_MATRIX*, HRESULT)).call(transform)
  end
  def get_size(size : SIZE*) : HRESULT
    @lpVtbl.value.get_size.unsafe_as(Proc(SIZE*, HRESULT)).call(size)
  end
  def resize(width : UInt32, height : UInt32) : HRESULT
    @lpVtbl.value.resize.unsafe_as(Proc(UInt32, UInt32, HRESULT)).call(width, height)
  end
end
struct LibWin32::IDWriteGdiInterop
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def create_font_from_logfont(logfont : LOGFONTW*, font : IDWriteFont*) : HRESULT
    @lpVtbl.value.create_font_from_logfont.unsafe_as(Proc(LOGFONTW*, IDWriteFont*, HRESULT)).call(logfont, font)
  end
  def convert_font_to_logfont(font : IDWriteFont, logfont : LOGFONTW*, issystemfont : LibC::BOOL*) : HRESULT
    @lpVtbl.value.convert_font_to_logfont.unsafe_as(Proc(IDWriteFont, LOGFONTW*, LibC::BOOL*, HRESULT)).call(font, logfont, issystemfont)
  end
  def convert_font_face_to_logfont(font : IDWriteFontFace, logfont : LOGFONTW*) : HRESULT
    @lpVtbl.value.convert_font_face_to_logfont.unsafe_as(Proc(IDWriteFontFace, LOGFONTW*, HRESULT)).call(font, logfont)
  end
  def create_font_face_from_hdc(hdc : HDC, fontface : IDWriteFontFace*) : HRESULT
    @lpVtbl.value.create_font_face_from_hdc.unsafe_as(Proc(HDC, IDWriteFontFace*, HRESULT)).call(hdc, fontface)
  end
  def create_bitmap_render_target(hdc : HDC, width : UInt32, height : UInt32, rendertarget : IDWriteBitmapRenderTarget*) : HRESULT
    @lpVtbl.value.create_bitmap_render_target.unsafe_as(Proc(HDC, UInt32, UInt32, IDWriteBitmapRenderTarget*, HRESULT)).call(hdc, width, height, rendertarget)
  end
end
struct LibWin32::IDWriteGlyphRunAnalysis
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_alpha_texture_bounds(texturetype : DWRITE_TEXTURE_TYPE, texturebounds : RECT*) : HRESULT
    @lpVtbl.value.get_alpha_texture_bounds.unsafe_as(Proc(DWRITE_TEXTURE_TYPE, RECT*, HRESULT)).call(texturetype, texturebounds)
  end
  def create_alpha_texture(texturetype : DWRITE_TEXTURE_TYPE, texturebounds : RECT*, alphavalues : UInt8*, buffersize : UInt32) : HRESULT
    @lpVtbl.value.create_alpha_texture.unsafe_as(Proc(DWRITE_TEXTURE_TYPE, RECT*, UInt8*, UInt32, HRESULT)).call(texturetype, texturebounds, alphavalues, buffersize)
  end
  def get_alpha_blend_params(renderingparams : IDWriteRenderingParams, blendgamma : Float32*, blendenhancedcontrast : Float32*, blendcleartypelevel : Float32*) : HRESULT
    @lpVtbl.value.get_alpha_blend_params.unsafe_as(Proc(IDWriteRenderingParams, Float32*, Float32*, Float32*, HRESULT)).call(renderingparams, blendgamma, blendenhancedcontrast, blendcleartypelevel)
  end
end
struct LibWin32::IDWriteFactory
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_system_font_collection(fontcollection : IDWriteFontCollection*, checkforupdates : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_system_font_collection.unsafe_as(Proc(IDWriteFontCollection*, LibC::BOOL, HRESULT)).call(fontcollection, checkforupdates)
  end
  def create_custom_font_collection(collectionloader : IDWriteFontCollectionLoader, collectionkey : Void*, collectionkeysize : UInt32, fontcollection : IDWriteFontCollection*) : HRESULT
    @lpVtbl.value.create_custom_font_collection.unsafe_as(Proc(IDWriteFontCollectionLoader, Void*, UInt32, IDWriteFontCollection*, HRESULT)).call(collectionloader, collectionkey, collectionkeysize, fontcollection)
  end
  def register_font_collection_loader(fontcollectionloader : IDWriteFontCollectionLoader) : HRESULT
    @lpVtbl.value.register_font_collection_loader.unsafe_as(Proc(IDWriteFontCollectionLoader, HRESULT)).call(fontcollectionloader)
  end
  def unregister_font_collection_loader(fontcollectionloader : IDWriteFontCollectionLoader) : HRESULT
    @lpVtbl.value.unregister_font_collection_loader.unsafe_as(Proc(IDWriteFontCollectionLoader, HRESULT)).call(fontcollectionloader)
  end
  def create_font_file_reference(filepath : LibC::LPWSTR, lastwritetime : FILETIME*, fontfile : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.create_font_file_reference.unsafe_as(Proc(LibC::LPWSTR, FILETIME*, IDWriteFontFile*, HRESULT)).call(filepath, lastwritetime, fontfile)
  end
  def create_custom_font_file_reference(fontfilereferencekey : Void*, fontfilereferencekeysize : UInt32, fontfileloader : IDWriteFontFileLoader, fontfile : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.create_custom_font_file_reference.unsafe_as(Proc(Void*, UInt32, IDWriteFontFileLoader, IDWriteFontFile*, HRESULT)).call(fontfilereferencekey, fontfilereferencekeysize, fontfileloader, fontfile)
  end
  def create_font_face(fontfacetype : DWRITE_FONT_FACE_TYPE, numberoffiles : UInt32, fontfiles : IDWriteFontFile*, faceindex : UInt32, fontfacesimulationflags : DWRITE_FONT_SIMULATIONS, fontface : IDWriteFontFace*) : HRESULT
    @lpVtbl.value.create_font_face.unsafe_as(Proc(DWRITE_FONT_FACE_TYPE, UInt32, IDWriteFontFile*, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFace*, HRESULT)).call(fontfacetype, numberoffiles, fontfiles, faceindex, fontfacesimulationflags, fontface)
  end
  def create_rendering_params(renderingparams : IDWriteRenderingParams*) : HRESULT
    @lpVtbl.value.create_rendering_params.unsafe_as(Proc(IDWriteRenderingParams*, HRESULT)).call(renderingparams)
  end
  def create_monitor_rendering_params(monitor : HMONITOR, renderingparams : IDWriteRenderingParams*) : HRESULT
    @lpVtbl.value.create_monitor_rendering_params.unsafe_as(Proc(HMONITOR, IDWriteRenderingParams*, HRESULT)).call(monitor, renderingparams)
  end
  def create_custom_rendering_params(gamma : Float32, enhancedcontrast : Float32, cleartypelevel : Float32, pixelgeometry : DWRITE_PIXEL_GEOMETRY, renderingmode : DWRITE_RENDERING_MODE, renderingparams : IDWriteRenderingParams*) : HRESULT
    @lpVtbl.value.create_custom_rendering_params.unsafe_as(Proc(Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams*, HRESULT)).call(gamma, enhancedcontrast, cleartypelevel, pixelgeometry, renderingmode, renderingparams)
  end
  def register_font_file_loader(fontfileloader : IDWriteFontFileLoader) : HRESULT
    @lpVtbl.value.register_font_file_loader.unsafe_as(Proc(IDWriteFontFileLoader, HRESULT)).call(fontfileloader)
  end
  def unregister_font_file_loader(fontfileloader : IDWriteFontFileLoader) : HRESULT
    @lpVtbl.value.unregister_font_file_loader.unsafe_as(Proc(IDWriteFontFileLoader, HRESULT)).call(fontfileloader)
  end
  def create_text_format(fontfamilyname : LibC::LPWSTR, fontcollection : IDWriteFontCollection, fontweight : DWRITE_FONT_WEIGHT, fontstyle : DWRITE_FONT_STYLE, fontstretch : DWRITE_FONT_STRETCH, fontsize : Float32, localename : LibC::LPWSTR, textformat : IDWriteTextFormat*) : HRESULT
    @lpVtbl.value.create_text_format.unsafe_as(Proc(LibC::LPWSTR, IDWriteFontCollection, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, Float32, LibC::LPWSTR, IDWriteTextFormat*, HRESULT)).call(fontfamilyname, fontcollection, fontweight, fontstyle, fontstretch, fontsize, localename, textformat)
  end
  def create_typography(typography : IDWriteTypography*) : HRESULT
    @lpVtbl.value.create_typography.unsafe_as(Proc(IDWriteTypography*, HRESULT)).call(typography)
  end
  def get_gdi_interop(gdiinterop : IDWriteGdiInterop*) : HRESULT
    @lpVtbl.value.get_gdi_interop.unsafe_as(Proc(IDWriteGdiInterop*, HRESULT)).call(gdiinterop)
  end
  def create_text_layout(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, maxwidth : Float32, maxheight : Float32, textlayout : IDWriteTextLayout*) : HRESULT
    @lpVtbl.value.create_text_layout.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, Float32, Float32, IDWriteTextLayout*, HRESULT)).call(string, stringlength, textformat, maxwidth, maxheight, textlayout)
  end
  def create_gdi_compatible_text_layout(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, layoutwidth : Float32, layoutheight : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, usegdinatural : LibC::BOOL, textlayout : IDWriteTextLayout*) : HRESULT
    @lpVtbl.value.create_gdi_compatible_text_layout.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, IDWriteTextLayout*, HRESULT)).call(string, stringlength, textformat, layoutwidth, layoutheight, pixelsperdip, transform, usegdinatural, textlayout)
  end
  def create_ellipsis_trimming_sign(textformat : IDWriteTextFormat, trimmingsign : IDWriteInlineObject*) : HRESULT
    @lpVtbl.value.create_ellipsis_trimming_sign.unsafe_as(Proc(IDWriteTextFormat, IDWriteInlineObject*, HRESULT)).call(textformat, trimmingsign)
  end
  def create_text_analyzer(textanalyzer : IDWriteTextAnalyzer*) : HRESULT
    @lpVtbl.value.create_text_analyzer.unsafe_as(Proc(IDWriteTextAnalyzer*, HRESULT)).call(textanalyzer)
  end
  def create_number_substitution(substitutionmethod : DWRITE_NUMBER_SUBSTITUTION_METHOD, localename : LibC::LPWSTR, ignoreuseroverride : LibC::BOOL, numbersubstitution : IDWriteNumberSubstitution*) : HRESULT
    @lpVtbl.value.create_number_substitution.unsafe_as(Proc(DWRITE_NUMBER_SUBSTITUTION_METHOD, LibC::LPWSTR, LibC::BOOL, IDWriteNumberSubstitution*, HRESULT)).call(substitutionmethod, localename, ignoreuseroverride, numbersubstitution)
  end
  def create_glyph_run_analysis(glyphrun : DWRITE_GLYPH_RUN*, pixelsperdip : Float32, transform : DWRITE_MATRIX*, renderingmode : DWRITE_RENDERING_MODE, measuringmode : DWRITE_MEASURING_MODE, baselineoriginx : Float32, baselineoriginy : Float32, glyphrunanalysis : IDWriteGlyphRunAnalysis*) : HRESULT
    @lpVtbl.value.create_glyph_run_analysis.unsafe_as(Proc(DWRITE_GLYPH_RUN*, Float32, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)).call(glyphrun, pixelsperdip, transform, renderingmode, measuringmode, baselineoriginx, baselineoriginy, glyphrunanalysis)
  end
end
struct LibWin32::IDWriteFactory1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_system_font_collection(fontcollection : IDWriteFontCollection*, checkforupdates : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_system_font_collection.unsafe_as(Proc(IDWriteFontCollection*, LibC::BOOL, HRESULT)).call(fontcollection, checkforupdates)
  end
  def create_custom_font_collection(collectionloader : IDWriteFontCollectionLoader, collectionkey : Void*, collectionkeysize : UInt32, fontcollection : IDWriteFontCollection*) : HRESULT
    @lpVtbl.value.create_custom_font_collection.unsafe_as(Proc(IDWriteFontCollectionLoader, Void*, UInt32, IDWriteFontCollection*, HRESULT)).call(collectionloader, collectionkey, collectionkeysize, fontcollection)
  end
  def register_font_collection_loader(fontcollectionloader : IDWriteFontCollectionLoader) : HRESULT
    @lpVtbl.value.register_font_collection_loader.unsafe_as(Proc(IDWriteFontCollectionLoader, HRESULT)).call(fontcollectionloader)
  end
  def unregister_font_collection_loader(fontcollectionloader : IDWriteFontCollectionLoader) : HRESULT
    @lpVtbl.value.unregister_font_collection_loader.unsafe_as(Proc(IDWriteFontCollectionLoader, HRESULT)).call(fontcollectionloader)
  end
  def create_font_file_reference(filepath : LibC::LPWSTR, lastwritetime : FILETIME*, fontfile : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.create_font_file_reference.unsafe_as(Proc(LibC::LPWSTR, FILETIME*, IDWriteFontFile*, HRESULT)).call(filepath, lastwritetime, fontfile)
  end
  def create_custom_font_file_reference(fontfilereferencekey : Void*, fontfilereferencekeysize : UInt32, fontfileloader : IDWriteFontFileLoader, fontfile : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.create_custom_font_file_reference.unsafe_as(Proc(Void*, UInt32, IDWriteFontFileLoader, IDWriteFontFile*, HRESULT)).call(fontfilereferencekey, fontfilereferencekeysize, fontfileloader, fontfile)
  end
  def create_font_face(fontfacetype : DWRITE_FONT_FACE_TYPE, numberoffiles : UInt32, fontfiles : IDWriteFontFile*, faceindex : UInt32, fontfacesimulationflags : DWRITE_FONT_SIMULATIONS, fontface : IDWriteFontFace*) : HRESULT
    @lpVtbl.value.create_font_face.unsafe_as(Proc(DWRITE_FONT_FACE_TYPE, UInt32, IDWriteFontFile*, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFace*, HRESULT)).call(fontfacetype, numberoffiles, fontfiles, faceindex, fontfacesimulationflags, fontface)
  end
  def create_rendering_params(renderingparams : IDWriteRenderingParams*) : HRESULT
    @lpVtbl.value.create_rendering_params.unsafe_as(Proc(IDWriteRenderingParams*, HRESULT)).call(renderingparams)
  end
  def create_monitor_rendering_params(monitor : HMONITOR, renderingparams : IDWriteRenderingParams*) : HRESULT
    @lpVtbl.value.create_monitor_rendering_params.unsafe_as(Proc(HMONITOR, IDWriteRenderingParams*, HRESULT)).call(monitor, renderingparams)
  end
  def create_custom_rendering_params(gamma : Float32, enhancedcontrast : Float32, cleartypelevel : Float32, pixelgeometry : DWRITE_PIXEL_GEOMETRY, renderingmode : DWRITE_RENDERING_MODE, renderingparams : IDWriteRenderingParams*) : HRESULT
    @lpVtbl.value.create_custom_rendering_params.unsafe_as(Proc(Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams*, HRESULT)).call(gamma, enhancedcontrast, cleartypelevel, pixelgeometry, renderingmode, renderingparams)
  end
  def register_font_file_loader(fontfileloader : IDWriteFontFileLoader) : HRESULT
    @lpVtbl.value.register_font_file_loader.unsafe_as(Proc(IDWriteFontFileLoader, HRESULT)).call(fontfileloader)
  end
  def unregister_font_file_loader(fontfileloader : IDWriteFontFileLoader) : HRESULT
    @lpVtbl.value.unregister_font_file_loader.unsafe_as(Proc(IDWriteFontFileLoader, HRESULT)).call(fontfileloader)
  end
  def create_text_format(fontfamilyname : LibC::LPWSTR, fontcollection : IDWriteFontCollection, fontweight : DWRITE_FONT_WEIGHT, fontstyle : DWRITE_FONT_STYLE, fontstretch : DWRITE_FONT_STRETCH, fontsize : Float32, localename : LibC::LPWSTR, textformat : IDWriteTextFormat*) : HRESULT
    @lpVtbl.value.create_text_format.unsafe_as(Proc(LibC::LPWSTR, IDWriteFontCollection, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, Float32, LibC::LPWSTR, IDWriteTextFormat*, HRESULT)).call(fontfamilyname, fontcollection, fontweight, fontstyle, fontstretch, fontsize, localename, textformat)
  end
  def create_typography(typography : IDWriteTypography*) : HRESULT
    @lpVtbl.value.create_typography.unsafe_as(Proc(IDWriteTypography*, HRESULT)).call(typography)
  end
  def get_gdi_interop(gdiinterop : IDWriteGdiInterop*) : HRESULT
    @lpVtbl.value.get_gdi_interop.unsafe_as(Proc(IDWriteGdiInterop*, HRESULT)).call(gdiinterop)
  end
  def create_text_layout(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, maxwidth : Float32, maxheight : Float32, textlayout : IDWriteTextLayout*) : HRESULT
    @lpVtbl.value.create_text_layout.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, Float32, Float32, IDWriteTextLayout*, HRESULT)).call(string, stringlength, textformat, maxwidth, maxheight, textlayout)
  end
  def create_gdi_compatible_text_layout(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, layoutwidth : Float32, layoutheight : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, usegdinatural : LibC::BOOL, textlayout : IDWriteTextLayout*) : HRESULT
    @lpVtbl.value.create_gdi_compatible_text_layout.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, IDWriteTextLayout*, HRESULT)).call(string, stringlength, textformat, layoutwidth, layoutheight, pixelsperdip, transform, usegdinatural, textlayout)
  end
  def create_ellipsis_trimming_sign(textformat : IDWriteTextFormat, trimmingsign : IDWriteInlineObject*) : HRESULT
    @lpVtbl.value.create_ellipsis_trimming_sign.unsafe_as(Proc(IDWriteTextFormat, IDWriteInlineObject*, HRESULT)).call(textformat, trimmingsign)
  end
  def create_text_analyzer(textanalyzer : IDWriteTextAnalyzer*) : HRESULT
    @lpVtbl.value.create_text_analyzer.unsafe_as(Proc(IDWriteTextAnalyzer*, HRESULT)).call(textanalyzer)
  end
  def create_number_substitution(substitutionmethod : DWRITE_NUMBER_SUBSTITUTION_METHOD, localename : LibC::LPWSTR, ignoreuseroverride : LibC::BOOL, numbersubstitution : IDWriteNumberSubstitution*) : HRESULT
    @lpVtbl.value.create_number_substitution.unsafe_as(Proc(DWRITE_NUMBER_SUBSTITUTION_METHOD, LibC::LPWSTR, LibC::BOOL, IDWriteNumberSubstitution*, HRESULT)).call(substitutionmethod, localename, ignoreuseroverride, numbersubstitution)
  end
  def create_glyph_run_analysis(glyphrun : DWRITE_GLYPH_RUN*, pixelsperdip : Float32, transform : DWRITE_MATRIX*, renderingmode : DWRITE_RENDERING_MODE, measuringmode : DWRITE_MEASURING_MODE, baselineoriginx : Float32, baselineoriginy : Float32, glyphrunanalysis : IDWriteGlyphRunAnalysis*) : HRESULT
    @lpVtbl.value.create_glyph_run_analysis.unsafe_as(Proc(DWRITE_GLYPH_RUN*, Float32, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)).call(glyphrun, pixelsperdip, transform, renderingmode, measuringmode, baselineoriginx, baselineoriginy, glyphrunanalysis)
  end
  def get_eudc_font_collection(fontcollection : IDWriteFontCollection*, checkforupdates : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_eudc_font_collection.unsafe_as(Proc(IDWriteFontCollection*, LibC::BOOL, HRESULT)).call(fontcollection, checkforupdates)
  end
  def create_custom_rendering_params2(gamma : Float32, enhancedcontrast : Float32, enhancedcontrastgrayscale : Float32, cleartypelevel : Float32, pixelgeometry : DWRITE_PIXEL_GEOMETRY, renderingmode : DWRITE_RENDERING_MODE, renderingparams : IDWriteRenderingParams1*) : HRESULT
    @lpVtbl.value.create_custom_rendering_params2.unsafe_as(Proc(Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams1*, HRESULT)).call(gamma, enhancedcontrast, enhancedcontrastgrayscale, cleartypelevel, pixelgeometry, renderingmode, renderingparams)
  end
end
struct LibWin32::IDWriteFontFace1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type : DWRITE_FONT_FACE_TYPE
    @lpVtbl.value.get_type.unsafe_as(Proc(DWRITE_FONT_FACE_TYPE)).call
  end
  def get_files(numberoffiles : UInt32*, fontfiles : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.get_files.unsafe_as(Proc(UInt32*, IDWriteFontFile*, HRESULT)).call(numberoffiles, fontfiles)
  end
  def get_index : UInt32
    @lpVtbl.value.get_index.unsafe_as(Proc(UInt32)).call
  end
  def get_simulations : DWRITE_FONT_SIMULATIONS
    @lpVtbl.value.get_simulations.unsafe_as(Proc(DWRITE_FONT_SIMULATIONS)).call
  end
  def is_symbol_font : LibC::BOOL
    @lpVtbl.value.is_symbol_font.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_metrics(fontfacemetrics : DWRITE_FONT_METRICS*) : Void
    @lpVtbl.value.get_metrics.unsafe_as(Proc(DWRITE_FONT_METRICS*, Void)).call(fontfacemetrics)
  end
  def get_glyph_count : UInt16
    @lpVtbl.value.get_glyph_count.unsafe_as(Proc(UInt16)).call
  end
  def get_design_glyph_metrics(glyphindices : UInt16*, glyphcount : UInt32, glyphmetrics : DWRITE_GLYPH_METRICS*, issideways : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_design_glyph_metrics.unsafe_as(Proc(UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)).call(glyphindices, glyphcount, glyphmetrics, issideways)
  end
  def get_glyph_indices(codepoints : UInt32*, codepointcount : UInt32, glyphindices : UInt16*) : HRESULT
    @lpVtbl.value.get_glyph_indices.unsafe_as(Proc(UInt32*, UInt32, UInt16*, HRESULT)).call(codepoints, codepointcount, glyphindices)
  end
  def try_get_font_table(opentypetabletag : UInt32, tabledata : Void**, tablesize : UInt32*, tablecontext : Void**, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.try_get_font_table.unsafe_as(Proc(UInt32, Void**, UInt32*, Void**, LibC::BOOL*, HRESULT)).call(opentypetabletag, tabledata, tablesize, tablecontext, exists)
  end
  def release_font_table(tablecontext : Void*) : Void
    @lpVtbl.value.release_font_table.unsafe_as(Proc(Void*, Void)).call(tablecontext)
  end
  def get_glyph_run_outline(emsize : Float32, glyphindices : UInt16*, glyphadvances : Float32*, glyphoffsets : DWRITE_GLYPH_OFFSET*, glyphcount : UInt32, issideways : LibC::BOOL, isrighttoleft : LibC::BOOL, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.get_glyph_run_outline.unsafe_as(Proc(Float32, UInt16*, Float32*, DWRITE_GLYPH_OFFSET*, UInt32, LibC::BOOL, LibC::BOOL, ID2D1SimplifiedGeometrySink, HRESULT)).call(emsize, glyphindices, glyphadvances, glyphoffsets, glyphcount, issideways, isrighttoleft, geometrysink)
  end
  def get_recommended_rendering_mode(emsize : Float32, pixelsperdip : Float32, measuringmode : DWRITE_MEASURING_MODE, renderingparams : IDWriteRenderingParams, renderingmode : DWRITE_RENDERING_MODE*) : HRESULT
    @lpVtbl.value.get_recommended_rendering_mode.unsafe_as(Proc(Float32, Float32, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE*, HRESULT)).call(emsize, pixelsperdip, measuringmode, renderingparams, renderingmode)
  end
  def get_gdi_compatible_metrics(emsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, fontfacemetrics : DWRITE_FONT_METRICS*) : HRESULT
    @lpVtbl.value.get_gdi_compatible_metrics.unsafe_as(Proc(Float32, Float32, DWRITE_MATRIX*, DWRITE_FONT_METRICS*, HRESULT)).call(emsize, pixelsperdip, transform, fontfacemetrics)
  end
  def get_gdi_compatible_glyph_metrics(emsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, usegdinatural : LibC::BOOL, glyphindices : UInt16*, glyphcount : UInt32, glyphmetrics : DWRITE_GLYPH_METRICS*, issideways : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_gdi_compatible_glyph_metrics.unsafe_as(Proc(Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)).call(emsize, pixelsperdip, transform, usegdinatural, glyphindices, glyphcount, glyphmetrics, issideways)
  end
  def get_metrics2(fontmetrics : DWRITE_FONT_METRICS1*) : Void
    @lpVtbl.value.get_metrics2.unsafe_as(Proc(DWRITE_FONT_METRICS1*, Void)).call(fontmetrics)
  end
  def get_gdi_compatible_metrics2(emsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, fontmetrics : DWRITE_FONT_METRICS1*) : HRESULT
    @lpVtbl.value.get_gdi_compatible_metrics2.unsafe_as(Proc(Float32, Float32, DWRITE_MATRIX*, DWRITE_FONT_METRICS1*, HRESULT)).call(emsize, pixelsperdip, transform, fontmetrics)
  end
  def get_caret_metrics(caretmetrics : DWRITE_CARET_METRICS*) : Void
    @lpVtbl.value.get_caret_metrics.unsafe_as(Proc(DWRITE_CARET_METRICS*, Void)).call(caretmetrics)
  end
  def get_unicode_ranges(maxrangecount : UInt32, unicoderanges : DWRITE_UNICODE_RANGE*, actualrangecount : UInt32*) : HRESULT
    @lpVtbl.value.get_unicode_ranges.unsafe_as(Proc(UInt32, DWRITE_UNICODE_RANGE*, UInt32*, HRESULT)).call(maxrangecount, unicoderanges, actualrangecount)
  end
  def is_monospaced_font : LibC::BOOL
    @lpVtbl.value.is_monospaced_font.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_design_glyph_advances(glyphcount : UInt32, glyphindices : UInt16*, glyphadvances : Int32*, issideways : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_design_glyph_advances.unsafe_as(Proc(UInt32, UInt16*, Int32*, LibC::BOOL, HRESULT)).call(glyphcount, glyphindices, glyphadvances, issideways)
  end
  def get_gdi_compatible_glyph_advances(emsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, usegdinatural : LibC::BOOL, issideways : LibC::BOOL, glyphcount : UInt32, glyphindices : UInt16*, glyphadvances : Int32*) : HRESULT
    @lpVtbl.value.get_gdi_compatible_glyph_advances.unsafe_as(Proc(Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, LibC::BOOL, UInt32, UInt16*, Int32*, HRESULT)).call(emsize, pixelsperdip, transform, usegdinatural, issideways, glyphcount, glyphindices, glyphadvances)
  end
  def get_kerning_pair_adjustments(glyphcount : UInt32, glyphindices : UInt16*, glyphadvanceadjustments : Int32*) : HRESULT
    @lpVtbl.value.get_kerning_pair_adjustments.unsafe_as(Proc(UInt32, UInt16*, Int32*, HRESULT)).call(glyphcount, glyphindices, glyphadvanceadjustments)
  end
  def has_kerning_pairs : LibC::BOOL
    @lpVtbl.value.has_kerning_pairs.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_recommended_rendering_mode2(fontemsize : Float32, dpix : Float32, dpiy : Float32, transform : DWRITE_MATRIX*, issideways : LibC::BOOL, outlinethreshold : DWRITE_OUTLINE_THRESHOLD, measuringmode : DWRITE_MEASURING_MODE, renderingmode : DWRITE_RENDERING_MODE*) : HRESULT
    @lpVtbl.value.get_recommended_rendering_mode2.unsafe_as(Proc(Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, DWRITE_RENDERING_MODE*, HRESULT)).call(fontemsize, dpix, dpiy, transform, issideways, outlinethreshold, measuringmode, renderingmode)
  end
  def get_vertical_glyph_variants(glyphcount : UInt32, nominalglyphindices : UInt16*, verticalglyphindices : UInt16*) : HRESULT
    @lpVtbl.value.get_vertical_glyph_variants.unsafe_as(Proc(UInt32, UInt16*, UInt16*, HRESULT)).call(glyphcount, nominalglyphindices, verticalglyphindices)
  end
  def has_vertical_glyph_variants : LibC::BOOL
    @lpVtbl.value.has_vertical_glyph_variants.unsafe_as(Proc(LibC::BOOL)).call
  end
end
struct LibWin32::IDWriteFont1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_font_family(fontfamily : IDWriteFontFamily*) : HRESULT
    @lpVtbl.value.get_font_family.unsafe_as(Proc(IDWriteFontFamily*, HRESULT)).call(fontfamily)
  end
  def get_weight : DWRITE_FONT_WEIGHT
    @lpVtbl.value.get_weight.unsafe_as(Proc(DWRITE_FONT_WEIGHT)).call
  end
  def get_stretch : DWRITE_FONT_STRETCH
    @lpVtbl.value.get_stretch.unsafe_as(Proc(DWRITE_FONT_STRETCH)).call
  end
  def get_style : DWRITE_FONT_STYLE
    @lpVtbl.value.get_style.unsafe_as(Proc(DWRITE_FONT_STYLE)).call
  end
  def is_symbol_font : LibC::BOOL
    @lpVtbl.value.is_symbol_font.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_face_names(names : IDWriteLocalizedStrings*) : HRESULT
    @lpVtbl.value.get_face_names.unsafe_as(Proc(IDWriteLocalizedStrings*, HRESULT)).call(names)
  end
  def get_informational_strings(informationalstringid : DWRITE_INFORMATIONAL_STRING_ID, informationalstrings : IDWriteLocalizedStrings*, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_informational_strings.unsafe_as(Proc(DWRITE_INFORMATIONAL_STRING_ID, IDWriteLocalizedStrings*, LibC::BOOL*, HRESULT)).call(informationalstringid, informationalstrings, exists)
  end
  def get_simulations : DWRITE_FONT_SIMULATIONS
    @lpVtbl.value.get_simulations.unsafe_as(Proc(DWRITE_FONT_SIMULATIONS)).call
  end
  def get_metrics(fontmetrics : DWRITE_FONT_METRICS*) : Void
    @lpVtbl.value.get_metrics.unsafe_as(Proc(DWRITE_FONT_METRICS*, Void)).call(fontmetrics)
  end
  def has_character(unicodevalue : UInt32, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.has_character.unsafe_as(Proc(UInt32, LibC::BOOL*, HRESULT)).call(unicodevalue, exists)
  end
  def create_font_face(fontface : IDWriteFontFace*) : HRESULT
    @lpVtbl.value.create_font_face.unsafe_as(Proc(IDWriteFontFace*, HRESULT)).call(fontface)
  end
  def get_metrics2(fontmetrics : DWRITE_FONT_METRICS1*) : Void
    @lpVtbl.value.get_metrics2.unsafe_as(Proc(DWRITE_FONT_METRICS1*, Void)).call(fontmetrics)
  end
  def get_panose(panose : DWRITE_PANOSE*) : Void
    @lpVtbl.value.get_panose.unsafe_as(Proc(DWRITE_PANOSE*, Void)).call(panose)
  end
  def get_unicode_ranges(maxrangecount : UInt32, unicoderanges : DWRITE_UNICODE_RANGE*, actualrangecount : UInt32*) : HRESULT
    @lpVtbl.value.get_unicode_ranges.unsafe_as(Proc(UInt32, DWRITE_UNICODE_RANGE*, UInt32*, HRESULT)).call(maxrangecount, unicoderanges, actualrangecount)
  end
  def is_monospaced_font : LibC::BOOL
    @lpVtbl.value.is_monospaced_font.unsafe_as(Proc(LibC::BOOL)).call
  end
end
struct LibWin32::IDWriteRenderingParams1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_gamma : Float32
    @lpVtbl.value.get_gamma.unsafe_as(Proc(Float32)).call
  end
  def get_enhanced_contrast : Float32
    @lpVtbl.value.get_enhanced_contrast.unsafe_as(Proc(Float32)).call
  end
  def get_clear_type_level : Float32
    @lpVtbl.value.get_clear_type_level.unsafe_as(Proc(Float32)).call
  end
  def get_pixel_geometry : DWRITE_PIXEL_GEOMETRY
    @lpVtbl.value.get_pixel_geometry.unsafe_as(Proc(DWRITE_PIXEL_GEOMETRY)).call
  end
  def get_rendering_mode : DWRITE_RENDERING_MODE
    @lpVtbl.value.get_rendering_mode.unsafe_as(Proc(DWRITE_RENDERING_MODE)).call
  end
  def get_grayscale_enhanced_contrast : Float32
    @lpVtbl.value.get_grayscale_enhanced_contrast.unsafe_as(Proc(Float32)).call
  end
end
struct LibWin32::IDWriteTextAnalyzer1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def analyze_script(analysissource : IDWriteTextAnalysisSource, textposition : UInt32, textlength : UInt32, analysissink : IDWriteTextAnalysisSink) : HRESULT
    @lpVtbl.value.analyze_script.unsafe_as(Proc(IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteTextAnalysisSink, HRESULT)).call(analysissource, textposition, textlength, analysissink)
  end
  def analyze_bidi(analysissource : IDWriteTextAnalysisSource, textposition : UInt32, textlength : UInt32, analysissink : IDWriteTextAnalysisSink) : HRESULT
    @lpVtbl.value.analyze_bidi.unsafe_as(Proc(IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteTextAnalysisSink, HRESULT)).call(analysissource, textposition, textlength, analysissink)
  end
  def analyze_number_substitution(analysissource : IDWriteTextAnalysisSource, textposition : UInt32, textlength : UInt32, analysissink : IDWriteTextAnalysisSink) : HRESULT
    @lpVtbl.value.analyze_number_substitution.unsafe_as(Proc(IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteTextAnalysisSink, HRESULT)).call(analysissource, textposition, textlength, analysissink)
  end
  def analyze_line_breakpoints(analysissource : IDWriteTextAnalysisSource, textposition : UInt32, textlength : UInt32, analysissink : IDWriteTextAnalysisSink) : HRESULT
    @lpVtbl.value.analyze_line_breakpoints.unsafe_as(Proc(IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteTextAnalysisSink, HRESULT)).call(analysissource, textposition, textlength, analysissink)
  end
  def get_glyphs(textstring : Char*, textlength : UInt32, fontface : IDWriteFontFace, issideways : LibC::BOOL, isrighttoleft : LibC::BOOL, scriptanalysis : DWRITE_SCRIPT_ANALYSIS*, localename : LibC::LPWSTR, numbersubstitution : IDWriteNumberSubstitution, features : DWRITE_TYPOGRAPHIC_FEATURES**, featurerangelengths : UInt32*, featureranges : UInt32, maxglyphcount : UInt32, clustermap : UInt16*, textprops : DWRITE_SHAPING_TEXT_PROPERTIES*, glyphindices : UInt16*, glyphprops : DWRITE_SHAPING_GLYPH_PROPERTIES*, actualglyphcount : UInt32*) : HRESULT
    @lpVtbl.value.get_glyphs.unsafe_as(Proc(Char*, UInt32, IDWriteFontFace, LibC::BOOL, LibC::BOOL, DWRITE_SCRIPT_ANALYSIS*, LibC::LPWSTR, IDWriteNumberSubstitution, DWRITE_TYPOGRAPHIC_FEATURES**, UInt32*, UInt32, UInt32, UInt16*, DWRITE_SHAPING_TEXT_PROPERTIES*, UInt16*, DWRITE_SHAPING_GLYPH_PROPERTIES*, UInt32*, HRESULT)).call(textstring, textlength, fontface, issideways, isrighttoleft, scriptanalysis, localename, numbersubstitution, features, featurerangelengths, featureranges, maxglyphcount, clustermap, textprops, glyphindices, glyphprops, actualglyphcount)
  end
  def get_glyph_placements(textstring : Char*, clustermap : UInt16*, textprops : DWRITE_SHAPING_TEXT_PROPERTIES*, textlength : UInt32, glyphindices : UInt16*, glyphprops : DWRITE_SHAPING_GLYPH_PROPERTIES*, glyphcount : UInt32, fontface : IDWriteFontFace, fontemsize : Float32, issideways : LibC::BOOL, isrighttoleft : LibC::BOOL, scriptanalysis : DWRITE_SCRIPT_ANALYSIS*, localename : LibC::LPWSTR, features : DWRITE_TYPOGRAPHIC_FEATURES**, featurerangelengths : UInt32*, featureranges : UInt32, glyphadvances : Float32*, glyphoffsets : DWRITE_GLYPH_OFFSET*) : HRESULT
    @lpVtbl.value.get_glyph_placements.unsafe_as(Proc(Char*, UInt16*, DWRITE_SHAPING_TEXT_PROPERTIES*, UInt32, UInt16*, DWRITE_SHAPING_GLYPH_PROPERTIES*, UInt32, IDWriteFontFace, Float32, LibC::BOOL, LibC::BOOL, DWRITE_SCRIPT_ANALYSIS*, LibC::LPWSTR, DWRITE_TYPOGRAPHIC_FEATURES**, UInt32*, UInt32, Float32*, DWRITE_GLYPH_OFFSET*, HRESULT)).call(textstring, clustermap, textprops, textlength, glyphindices, glyphprops, glyphcount, fontface, fontemsize, issideways, isrighttoleft, scriptanalysis, localename, features, featurerangelengths, featureranges, glyphadvances, glyphoffsets)
  end
  def get_gdi_compatible_glyph_placements(textstring : Char*, clustermap : UInt16*, textprops : DWRITE_SHAPING_TEXT_PROPERTIES*, textlength : UInt32, glyphindices : UInt16*, glyphprops : DWRITE_SHAPING_GLYPH_PROPERTIES*, glyphcount : UInt32, fontface : IDWriteFontFace, fontemsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, usegdinatural : LibC::BOOL, issideways : LibC::BOOL, isrighttoleft : LibC::BOOL, scriptanalysis : DWRITE_SCRIPT_ANALYSIS*, localename : LibC::LPWSTR, features : DWRITE_TYPOGRAPHIC_FEATURES**, featurerangelengths : UInt32*, featureranges : UInt32, glyphadvances : Float32*, glyphoffsets : DWRITE_GLYPH_OFFSET*) : HRESULT
    @lpVtbl.value.get_gdi_compatible_glyph_placements.unsafe_as(Proc(Char*, UInt16*, DWRITE_SHAPING_TEXT_PROPERTIES*, UInt32, UInt16*, DWRITE_SHAPING_GLYPH_PROPERTIES*, UInt32, IDWriteFontFace, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, LibC::BOOL, LibC::BOOL, DWRITE_SCRIPT_ANALYSIS*, LibC::LPWSTR, DWRITE_TYPOGRAPHIC_FEATURES**, UInt32*, UInt32, Float32*, DWRITE_GLYPH_OFFSET*, HRESULT)).call(textstring, clustermap, textprops, textlength, glyphindices, glyphprops, glyphcount, fontface, fontemsize, pixelsperdip, transform, usegdinatural, issideways, isrighttoleft, scriptanalysis, localename, features, featurerangelengths, featureranges, glyphadvances, glyphoffsets)
  end
  def apply_character_spacing(leadingspacing : Float32, trailingspacing : Float32, minimumadvancewidth : Float32, textlength : UInt32, glyphcount : UInt32, clustermap : UInt16*, glyphadvances : Float32*, glyphoffsets : DWRITE_GLYPH_OFFSET*, glyphproperties : DWRITE_SHAPING_GLYPH_PROPERTIES*, modifiedglyphadvances : Float32*, modifiedglyphoffsets : DWRITE_GLYPH_OFFSET*) : HRESULT
    @lpVtbl.value.apply_character_spacing.unsafe_as(Proc(Float32, Float32, Float32, UInt32, UInt32, UInt16*, Float32*, DWRITE_GLYPH_OFFSET*, DWRITE_SHAPING_GLYPH_PROPERTIES*, Float32*, DWRITE_GLYPH_OFFSET*, HRESULT)).call(leadingspacing, trailingspacing, minimumadvancewidth, textlength, glyphcount, clustermap, glyphadvances, glyphoffsets, glyphproperties, modifiedglyphadvances, modifiedglyphoffsets)
  end
  def get_baseline(fontface : IDWriteFontFace, baseline : DWRITE_BASELINE, isvertical : LibC::BOOL, issimulationallowed : LibC::BOOL, scriptanalysis : DWRITE_SCRIPT_ANALYSIS, localename : LibC::LPWSTR, baselinecoordinate : Int32*, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_baseline.unsafe_as(Proc(IDWriteFontFace, DWRITE_BASELINE, LibC::BOOL, LibC::BOOL, DWRITE_SCRIPT_ANALYSIS, LibC::LPWSTR, Int32*, LibC::BOOL*, HRESULT)).call(fontface, baseline, isvertical, issimulationallowed, scriptanalysis, localename, baselinecoordinate, exists)
  end
  def analyze_vertical_glyph_orientation(analysissource : IDWriteTextAnalysisSource1, textposition : UInt32, textlength : UInt32, analysissink : IDWriteTextAnalysisSink1) : HRESULT
    @lpVtbl.value.analyze_vertical_glyph_orientation.unsafe_as(Proc(IDWriteTextAnalysisSource1, UInt32, UInt32, IDWriteTextAnalysisSink1, HRESULT)).call(analysissource, textposition, textlength, analysissink)
  end
  def get_glyph_orientation_transform(glyphorientationangle : DWRITE_GLYPH_ORIENTATION_ANGLE, issideways : LibC::BOOL, transform : DWRITE_MATRIX*) : HRESULT
    @lpVtbl.value.get_glyph_orientation_transform.unsafe_as(Proc(DWRITE_GLYPH_ORIENTATION_ANGLE, LibC::BOOL, DWRITE_MATRIX*, HRESULT)).call(glyphorientationangle, issideways, transform)
  end
  def get_script_properties(scriptanalysis : DWRITE_SCRIPT_ANALYSIS, scriptproperties : DWRITE_SCRIPT_PROPERTIES*) : HRESULT
    @lpVtbl.value.get_script_properties.unsafe_as(Proc(DWRITE_SCRIPT_ANALYSIS, DWRITE_SCRIPT_PROPERTIES*, HRESULT)).call(scriptanalysis, scriptproperties)
  end
  def get_text_complexity(textstring : Char*, textlength : UInt32, fontface : IDWriteFontFace, istextsimple : LibC::BOOL*, textlengthread : UInt32*, glyphindices : UInt16*) : HRESULT
    @lpVtbl.value.get_text_complexity.unsafe_as(Proc(Char*, UInt32, IDWriteFontFace, LibC::BOOL*, UInt32*, UInt16*, HRESULT)).call(textstring, textlength, fontface, istextsimple, textlengthread, glyphindices)
  end
  def get_justification_opportunities(fontface : IDWriteFontFace, fontemsize : Float32, scriptanalysis : DWRITE_SCRIPT_ANALYSIS, textlength : UInt32, glyphcount : UInt32, textstring : Char*, clustermap : UInt16*, glyphproperties : DWRITE_SHAPING_GLYPH_PROPERTIES*, justificationopportunities : DWRITE_JUSTIFICATION_OPPORTUNITY*) : HRESULT
    @lpVtbl.value.get_justification_opportunities.unsafe_as(Proc(IDWriteFontFace, Float32, DWRITE_SCRIPT_ANALYSIS, UInt32, UInt32, Char*, UInt16*, DWRITE_SHAPING_GLYPH_PROPERTIES*, DWRITE_JUSTIFICATION_OPPORTUNITY*, HRESULT)).call(fontface, fontemsize, scriptanalysis, textlength, glyphcount, textstring, clustermap, glyphproperties, justificationopportunities)
  end
  def justify_glyph_advances(linewidth : Float32, glyphcount : UInt32, justificationopportunities : DWRITE_JUSTIFICATION_OPPORTUNITY*, glyphadvances : Float32*, glyphoffsets : DWRITE_GLYPH_OFFSET*, justifiedglyphadvances : Float32*, justifiedglyphoffsets : DWRITE_GLYPH_OFFSET*) : HRESULT
    @lpVtbl.value.justify_glyph_advances.unsafe_as(Proc(Float32, UInt32, DWRITE_JUSTIFICATION_OPPORTUNITY*, Float32*, DWRITE_GLYPH_OFFSET*, Float32*, DWRITE_GLYPH_OFFSET*, HRESULT)).call(linewidth, glyphcount, justificationopportunities, glyphadvances, glyphoffsets, justifiedglyphadvances, justifiedglyphoffsets)
  end
  def get_justified_glyphs(fontface : IDWriteFontFace, fontemsize : Float32, scriptanalysis : DWRITE_SCRIPT_ANALYSIS, textlength : UInt32, glyphcount : UInt32, maxglyphcount : UInt32, clustermap : UInt16*, glyphindices : UInt16*, glyphadvances : Float32*, justifiedglyphadvances : Float32*, justifiedglyphoffsets : DWRITE_GLYPH_OFFSET*, glyphproperties : DWRITE_SHAPING_GLYPH_PROPERTIES*, actualglyphcount : UInt32*, modifiedclustermap : UInt16*, modifiedglyphindices : UInt16*, modifiedglyphadvances : Float32*, modifiedglyphoffsets : DWRITE_GLYPH_OFFSET*) : HRESULT
    @lpVtbl.value.get_justified_glyphs.unsafe_as(Proc(IDWriteFontFace, Float32, DWRITE_SCRIPT_ANALYSIS, UInt32, UInt32, UInt32, UInt16*, UInt16*, Float32*, Float32*, DWRITE_GLYPH_OFFSET*, DWRITE_SHAPING_GLYPH_PROPERTIES*, UInt32*, UInt16*, UInt16*, Float32*, DWRITE_GLYPH_OFFSET*, HRESULT)).call(fontface, fontemsize, scriptanalysis, textlength, glyphcount, maxglyphcount, clustermap, glyphindices, glyphadvances, justifiedglyphadvances, justifiedglyphoffsets, glyphproperties, actualglyphcount, modifiedclustermap, modifiedglyphindices, modifiedglyphadvances, modifiedglyphoffsets)
  end
end
struct LibWin32::IDWriteTextAnalysisSource1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_text_at_position(textposition : UInt32, textstring : UInt16**, textlength : UInt32*) : HRESULT
    @lpVtbl.value.get_text_at_position.unsafe_as(Proc(UInt32, UInt16**, UInt32*, HRESULT)).call(textposition, textstring, textlength)
  end
  def get_text_before_position(textposition : UInt32, textstring : UInt16**, textlength : UInt32*) : HRESULT
    @lpVtbl.value.get_text_before_position.unsafe_as(Proc(UInt32, UInt16**, UInt32*, HRESULT)).call(textposition, textstring, textlength)
  end
  def get_paragraph_reading_direction : DWRITE_READING_DIRECTION
    @lpVtbl.value.get_paragraph_reading_direction.unsafe_as(Proc(DWRITE_READING_DIRECTION)).call
  end
  def get_locale_name(textposition : UInt32, textlength : UInt32*, localename : UInt16**) : HRESULT
    @lpVtbl.value.get_locale_name.unsafe_as(Proc(UInt32, UInt32*, UInt16**, HRESULT)).call(textposition, textlength, localename)
  end
  def get_number_substitution(textposition : UInt32, textlength : UInt32*, numbersubstitution : IDWriteNumberSubstitution*) : HRESULT
    @lpVtbl.value.get_number_substitution.unsafe_as(Proc(UInt32, UInt32*, IDWriteNumberSubstitution*, HRESULT)).call(textposition, textlength, numbersubstitution)
  end
  def get_vertical_glyph_orientation(textposition : UInt32, textlength : UInt32*, glyphorientation : DWRITE_VERTICAL_GLYPH_ORIENTATION*, bidilevel : UInt8*) : HRESULT
    @lpVtbl.value.get_vertical_glyph_orientation.unsafe_as(Proc(UInt32, UInt32*, DWRITE_VERTICAL_GLYPH_ORIENTATION*, UInt8*, HRESULT)).call(textposition, textlength, glyphorientation, bidilevel)
  end
end
struct LibWin32::IDWriteTextAnalysisSink1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_script_analysis(textposition : UInt32, textlength : UInt32, scriptanalysis : DWRITE_SCRIPT_ANALYSIS*) : HRESULT
    @lpVtbl.value.set_script_analysis.unsafe_as(Proc(UInt32, UInt32, DWRITE_SCRIPT_ANALYSIS*, HRESULT)).call(textposition, textlength, scriptanalysis)
  end
  def set_line_breakpoints(textposition : UInt32, textlength : UInt32, linebreakpoints : DWRITE_LINE_BREAKPOINT*) : HRESULT
    @lpVtbl.value.set_line_breakpoints.unsafe_as(Proc(UInt32, UInt32, DWRITE_LINE_BREAKPOINT*, HRESULT)).call(textposition, textlength, linebreakpoints)
  end
  def set_bidi_level(textposition : UInt32, textlength : UInt32, explicitlevel : UInt8, resolvedlevel : UInt8) : HRESULT
    @lpVtbl.value.set_bidi_level.unsafe_as(Proc(UInt32, UInt32, UInt8, UInt8, HRESULT)).call(textposition, textlength, explicitlevel, resolvedlevel)
  end
  def set_number_substitution(textposition : UInt32, textlength : UInt32, numbersubstitution : IDWriteNumberSubstitution) : HRESULT
    @lpVtbl.value.set_number_substitution.unsafe_as(Proc(UInt32, UInt32, IDWriteNumberSubstitution, HRESULT)).call(textposition, textlength, numbersubstitution)
  end
  def set_glyph_orientation(textposition : UInt32, textlength : UInt32, glyphorientationangle : DWRITE_GLYPH_ORIENTATION_ANGLE, adjustedbidilevel : UInt8, issideways : LibC::BOOL, isrighttoleft : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_glyph_orientation.unsafe_as(Proc(UInt32, UInt32, DWRITE_GLYPH_ORIENTATION_ANGLE, UInt8, LibC::BOOL, LibC::BOOL, HRESULT)).call(textposition, textlength, glyphorientationangle, adjustedbidilevel, issideways, isrighttoleft)
  end
end
struct LibWin32::IDWriteTextLayout1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_text_alignment(textalignment : DWRITE_TEXT_ALIGNMENT) : HRESULT
    @lpVtbl.value.set_text_alignment.unsafe_as(Proc(DWRITE_TEXT_ALIGNMENT, HRESULT)).call(textalignment)
  end
  def set_paragraph_alignment(paragraphalignment : DWRITE_PARAGRAPH_ALIGNMENT) : HRESULT
    @lpVtbl.value.set_paragraph_alignment.unsafe_as(Proc(DWRITE_PARAGRAPH_ALIGNMENT, HRESULT)).call(paragraphalignment)
  end
  def set_word_wrapping(wordwrapping : DWRITE_WORD_WRAPPING) : HRESULT
    @lpVtbl.value.set_word_wrapping.unsafe_as(Proc(DWRITE_WORD_WRAPPING, HRESULT)).call(wordwrapping)
  end
  def set_reading_direction(readingdirection : DWRITE_READING_DIRECTION) : HRESULT
    @lpVtbl.value.set_reading_direction.unsafe_as(Proc(DWRITE_READING_DIRECTION, HRESULT)).call(readingdirection)
  end
  def set_flow_direction(flowdirection : DWRITE_FLOW_DIRECTION) : HRESULT
    @lpVtbl.value.set_flow_direction.unsafe_as(Proc(DWRITE_FLOW_DIRECTION, HRESULT)).call(flowdirection)
  end
  def set_incremental_tab_stop(incrementaltabstop : Float32) : HRESULT
    @lpVtbl.value.set_incremental_tab_stop.unsafe_as(Proc(Float32, HRESULT)).call(incrementaltabstop)
  end
  def set_trimming(trimmingoptions : DWRITE_TRIMMING*, trimmingsign : IDWriteInlineObject) : HRESULT
    @lpVtbl.value.set_trimming.unsafe_as(Proc(DWRITE_TRIMMING*, IDWriteInlineObject, HRESULT)).call(trimmingoptions, trimmingsign)
  end
  def set_line_spacing(linespacingmethod : DWRITE_LINE_SPACING_METHOD, linespacing : Float32, baseline : Float32) : HRESULT
    @lpVtbl.value.set_line_spacing.unsafe_as(Proc(DWRITE_LINE_SPACING_METHOD, Float32, Float32, HRESULT)).call(linespacingmethod, linespacing, baseline)
  end
  def get_text_alignment : DWRITE_TEXT_ALIGNMENT
    @lpVtbl.value.get_text_alignment.unsafe_as(Proc(DWRITE_TEXT_ALIGNMENT)).call
  end
  def get_paragraph_alignment : DWRITE_PARAGRAPH_ALIGNMENT
    @lpVtbl.value.get_paragraph_alignment.unsafe_as(Proc(DWRITE_PARAGRAPH_ALIGNMENT)).call
  end
  def get_word_wrapping : DWRITE_WORD_WRAPPING
    @lpVtbl.value.get_word_wrapping.unsafe_as(Proc(DWRITE_WORD_WRAPPING)).call
  end
  def get_reading_direction : DWRITE_READING_DIRECTION
    @lpVtbl.value.get_reading_direction.unsafe_as(Proc(DWRITE_READING_DIRECTION)).call
  end
  def get_flow_direction : DWRITE_FLOW_DIRECTION
    @lpVtbl.value.get_flow_direction.unsafe_as(Proc(DWRITE_FLOW_DIRECTION)).call
  end
  def get_incremental_tab_stop : Float32
    @lpVtbl.value.get_incremental_tab_stop.unsafe_as(Proc(Float32)).call
  end
  def get_trimming(trimmingoptions : DWRITE_TRIMMING*, trimmingsign : IDWriteInlineObject*) : HRESULT
    @lpVtbl.value.get_trimming.unsafe_as(Proc(DWRITE_TRIMMING*, IDWriteInlineObject*, HRESULT)).call(trimmingoptions, trimmingsign)
  end
  def get_line_spacing(linespacingmethod : DWRITE_LINE_SPACING_METHOD*, linespacing : Float32*, baseline : Float32*) : HRESULT
    @lpVtbl.value.get_line_spacing.unsafe_as(Proc(DWRITE_LINE_SPACING_METHOD*, Float32*, Float32*, HRESULT)).call(linespacingmethod, linespacing, baseline)
  end
  def get_font_collection(fontcollection : IDWriteFontCollection*) : HRESULT
    @lpVtbl.value.get_font_collection.unsafe_as(Proc(IDWriteFontCollection*, HRESULT)).call(fontcollection)
  end
  def get_font_family_name_length : UInt32
    @lpVtbl.value.get_font_family_name_length.unsafe_as(Proc(UInt32)).call
  end
  def get_font_family_name(fontfamilyname : Char*, namesize : UInt32) : HRESULT
    @lpVtbl.value.get_font_family_name.unsafe_as(Proc(Char*, UInt32, HRESULT)).call(fontfamilyname, namesize)
  end
  def get_font_weight : DWRITE_FONT_WEIGHT
    @lpVtbl.value.get_font_weight.unsafe_as(Proc(DWRITE_FONT_WEIGHT)).call
  end
  def get_font_style : DWRITE_FONT_STYLE
    @lpVtbl.value.get_font_style.unsafe_as(Proc(DWRITE_FONT_STYLE)).call
  end
  def get_font_stretch : DWRITE_FONT_STRETCH
    @lpVtbl.value.get_font_stretch.unsafe_as(Proc(DWRITE_FONT_STRETCH)).call
  end
  def get_font_size : Float32
    @lpVtbl.value.get_font_size.unsafe_as(Proc(Float32)).call
  end
  def get_locale_name_length : UInt32
    @lpVtbl.value.get_locale_name_length.unsafe_as(Proc(UInt32)).call
  end
  def get_locale_name(localename : Char*, namesize : UInt32) : HRESULT
    @lpVtbl.value.get_locale_name.unsafe_as(Proc(Char*, UInt32, HRESULT)).call(localename, namesize)
  end
  def set_max_width(maxwidth : Float32) : HRESULT
    @lpVtbl.value.set_max_width.unsafe_as(Proc(Float32, HRESULT)).call(maxwidth)
  end
  def set_max_height(maxheight : Float32) : HRESULT
    @lpVtbl.value.set_max_height.unsafe_as(Proc(Float32, HRESULT)).call(maxheight)
  end
  def set_font_collection(fontcollection : IDWriteFontCollection, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_collection.unsafe_as(Proc(IDWriteFontCollection, DWRITE_TEXT_RANGE, HRESULT)).call(fontcollection, textrange)
  end
  def set_font_family_name(fontfamilyname : LibC::LPWSTR, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_family_name.unsafe_as(Proc(LibC::LPWSTR, DWRITE_TEXT_RANGE, HRESULT)).call(fontfamilyname, textrange)
  end
  def set_font_weight(fontweight : DWRITE_FONT_WEIGHT, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_weight.unsafe_as(Proc(DWRITE_FONT_WEIGHT, DWRITE_TEXT_RANGE, HRESULT)).call(fontweight, textrange)
  end
  def set_font_style(fontstyle : DWRITE_FONT_STYLE, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_style.unsafe_as(Proc(DWRITE_FONT_STYLE, DWRITE_TEXT_RANGE, HRESULT)).call(fontstyle, textrange)
  end
  def set_font_stretch(fontstretch : DWRITE_FONT_STRETCH, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_stretch.unsafe_as(Proc(DWRITE_FONT_STRETCH, DWRITE_TEXT_RANGE, HRESULT)).call(fontstretch, textrange)
  end
  def set_font_size(fontsize : Float32, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_size.unsafe_as(Proc(Float32, DWRITE_TEXT_RANGE, HRESULT)).call(fontsize, textrange)
  end
  def set_underline(hasunderline : LibC::BOOL, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_underline.unsafe_as(Proc(LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)).call(hasunderline, textrange)
  end
  def set_strikethrough(hasstrikethrough : LibC::BOOL, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_strikethrough.unsafe_as(Proc(LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)).call(hasstrikethrough, textrange)
  end
  def set_drawing_effect(drawingeffect : IUnknown, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_drawing_effect.unsafe_as(Proc(IUnknown, DWRITE_TEXT_RANGE, HRESULT)).call(drawingeffect, textrange)
  end
  def set_inline_object(inlineobject : IDWriteInlineObject, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_inline_object.unsafe_as(Proc(IDWriteInlineObject, DWRITE_TEXT_RANGE, HRESULT)).call(inlineobject, textrange)
  end
  def set_typography(typography : IDWriteTypography, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_typography.unsafe_as(Proc(IDWriteTypography, DWRITE_TEXT_RANGE, HRESULT)).call(typography, textrange)
  end
  def set_locale_name(localename : LibC::LPWSTR, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_locale_name.unsafe_as(Proc(LibC::LPWSTR, DWRITE_TEXT_RANGE, HRESULT)).call(localename, textrange)
  end
  def get_max_width : Float32
    @lpVtbl.value.get_max_width.unsafe_as(Proc(Float32)).call
  end
  def get_max_height : Float32
    @lpVtbl.value.get_max_height.unsafe_as(Proc(Float32)).call
  end
  def get_font_collection2(currentposition : UInt32, fontcollection : IDWriteFontCollection*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_collection2.unsafe_as(Proc(UInt32, IDWriteFontCollection*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontcollection, textrange)
  end
  def get_font_family_name_length2(currentposition : UInt32, namelength : UInt32*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_family_name_length2.unsafe_as(Proc(UInt32, UInt32*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, namelength, textrange)
  end
  def get_font_family_name2(currentposition : UInt32, fontfamilyname : Char*, namesize : UInt32, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_family_name2.unsafe_as(Proc(UInt32, Char*, UInt32, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontfamilyname, namesize, textrange)
  end
  def get_font_weight2(currentposition : UInt32, fontweight : DWRITE_FONT_WEIGHT*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_weight2.unsafe_as(Proc(UInt32, DWRITE_FONT_WEIGHT*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontweight, textrange)
  end
  def get_font_style2(currentposition : UInt32, fontstyle : DWRITE_FONT_STYLE*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_style2.unsafe_as(Proc(UInt32, DWRITE_FONT_STYLE*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontstyle, textrange)
  end
  def get_font_stretch2(currentposition : UInt32, fontstretch : DWRITE_FONT_STRETCH*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_stretch2.unsafe_as(Proc(UInt32, DWRITE_FONT_STRETCH*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontstretch, textrange)
  end
  def get_font_size2(currentposition : UInt32, fontsize : Float32*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_size2.unsafe_as(Proc(UInt32, Float32*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontsize, textrange)
  end
  def get_underline(currentposition : UInt32, hasunderline : LibC::BOOL*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_underline.unsafe_as(Proc(UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, hasunderline, textrange)
  end
  def get_strikethrough(currentposition : UInt32, hasstrikethrough : LibC::BOOL*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_strikethrough.unsafe_as(Proc(UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, hasstrikethrough, textrange)
  end
  def get_drawing_effect(currentposition : UInt32, drawingeffect : IUnknown*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_drawing_effect.unsafe_as(Proc(UInt32, IUnknown*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, drawingeffect, textrange)
  end
  def get_inline_object(currentposition : UInt32, inlineobject : IDWriteInlineObject*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_inline_object.unsafe_as(Proc(UInt32, IDWriteInlineObject*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, inlineobject, textrange)
  end
  def get_typography(currentposition : UInt32, typography : IDWriteTypography*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_typography.unsafe_as(Proc(UInt32, IDWriteTypography*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, typography, textrange)
  end
  def get_locale_name_length2(currentposition : UInt32, namelength : UInt32*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_locale_name_length2.unsafe_as(Proc(UInt32, UInt32*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, namelength, textrange)
  end
  def get_locale_name2(currentposition : UInt32, localename : Char*, namesize : UInt32, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_locale_name2.unsafe_as(Proc(UInt32, Char*, UInt32, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, localename, namesize, textrange)
  end
  def draw(clientdrawingcontext : Void*, renderer : IDWriteTextRenderer, originx : Float32, originy : Float32) : HRESULT
    @lpVtbl.value.draw.unsafe_as(Proc(Void*, IDWriteTextRenderer, Float32, Float32, HRESULT)).call(clientdrawingcontext, renderer, originx, originy)
  end
  def get_line_metrics(linemetrics : DWRITE_LINE_METRICS*, maxlinecount : UInt32, actuallinecount : UInt32*) : HRESULT
    @lpVtbl.value.get_line_metrics.unsafe_as(Proc(DWRITE_LINE_METRICS*, UInt32, UInt32*, HRESULT)).call(linemetrics, maxlinecount, actuallinecount)
  end
  def get_metrics(textmetrics : DWRITE_TEXT_METRICS*) : HRESULT
    @lpVtbl.value.get_metrics.unsafe_as(Proc(DWRITE_TEXT_METRICS*, HRESULT)).call(textmetrics)
  end
  def get_overhang_metrics(overhangs : DWRITE_OVERHANG_METRICS*) : HRESULT
    @lpVtbl.value.get_overhang_metrics.unsafe_as(Proc(DWRITE_OVERHANG_METRICS*, HRESULT)).call(overhangs)
  end
  def get_cluster_metrics(clustermetrics : DWRITE_CLUSTER_METRICS*, maxclustercount : UInt32, actualclustercount : UInt32*) : HRESULT
    @lpVtbl.value.get_cluster_metrics.unsafe_as(Proc(DWRITE_CLUSTER_METRICS*, UInt32, UInt32*, HRESULT)).call(clustermetrics, maxclustercount, actualclustercount)
  end
  def determine_min_width(minwidth : Float32*) : HRESULT
    @lpVtbl.value.determine_min_width.unsafe_as(Proc(Float32*, HRESULT)).call(minwidth)
  end
  def hit_test_point(pointx : Float32, pointy : Float32, istrailinghit : LibC::BOOL*, isinside : LibC::BOOL*, hittestmetrics : DWRITE_HIT_TEST_METRICS*) : HRESULT
    @lpVtbl.value.hit_test_point.unsafe_as(Proc(Float32, Float32, LibC::BOOL*, LibC::BOOL*, DWRITE_HIT_TEST_METRICS*, HRESULT)).call(pointx, pointy, istrailinghit, isinside, hittestmetrics)
  end
  def hit_test_text_position(textposition : UInt32, istrailinghit : LibC::BOOL, pointx : Float32*, pointy : Float32*, hittestmetrics : DWRITE_HIT_TEST_METRICS*) : HRESULT
    @lpVtbl.value.hit_test_text_position.unsafe_as(Proc(UInt32, LibC::BOOL, Float32*, Float32*, DWRITE_HIT_TEST_METRICS*, HRESULT)).call(textposition, istrailinghit, pointx, pointy, hittestmetrics)
  end
  def hit_test_text_range(textposition : UInt32, textlength : UInt32, originx : Float32, originy : Float32, hittestmetrics : DWRITE_HIT_TEST_METRICS*, maxhittestmetricscount : UInt32, actualhittestmetricscount : UInt32*) : HRESULT
    @lpVtbl.value.hit_test_text_range.unsafe_as(Proc(UInt32, UInt32, Float32, Float32, DWRITE_HIT_TEST_METRICS*, UInt32, UInt32*, HRESULT)).call(textposition, textlength, originx, originy, hittestmetrics, maxhittestmetricscount, actualhittestmetricscount)
  end
  def set_pair_kerning(ispairkerningenabled : LibC::BOOL, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_pair_kerning.unsafe_as(Proc(LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)).call(ispairkerningenabled, textrange)
  end
  def get_pair_kerning(currentposition : UInt32, ispairkerningenabled : LibC::BOOL*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_pair_kerning.unsafe_as(Proc(UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, ispairkerningenabled, textrange)
  end
  def set_character_spacing(leadingspacing : Float32, trailingspacing : Float32, minimumadvancewidth : Float32, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_character_spacing.unsafe_as(Proc(Float32, Float32, Float32, DWRITE_TEXT_RANGE, HRESULT)).call(leadingspacing, trailingspacing, minimumadvancewidth, textrange)
  end
  def get_character_spacing(currentposition : UInt32, leadingspacing : Float32*, trailingspacing : Float32*, minimumadvancewidth : Float32*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_character_spacing.unsafe_as(Proc(UInt32, Float32*, Float32*, Float32*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, leadingspacing, trailingspacing, minimumadvancewidth, textrange)
  end
end
struct LibWin32::IDWriteBitmapRenderTarget1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def draw_glyph_run(baselineoriginx : Float32, baselineoriginy : Float32, measuringmode : DWRITE_MEASURING_MODE, glyphrun : DWRITE_GLYPH_RUN*, renderingparams : IDWriteRenderingParams, textcolor : UInt32, blackboxrect : RECT*) : HRESULT
    @lpVtbl.value.draw_glyph_run.unsafe_as(Proc(Float32, Float32, DWRITE_MEASURING_MODE, DWRITE_GLYPH_RUN*, IDWriteRenderingParams, UInt32, RECT*, HRESULT)).call(baselineoriginx, baselineoriginy, measuringmode, glyphrun, renderingparams, textcolor, blackboxrect)
  end
  def get_memory_dc : HDC
    @lpVtbl.value.get_memory_dc.unsafe_as(Proc(HDC)).call
  end
  def get_pixels_per_dip : Float32
    @lpVtbl.value.get_pixels_per_dip.unsafe_as(Proc(Float32)).call
  end
  def set_pixels_per_dip(pixelsperdip : Float32) : HRESULT
    @lpVtbl.value.set_pixels_per_dip.unsafe_as(Proc(Float32, HRESULT)).call(pixelsperdip)
  end
  def get_current_transform(transform : DWRITE_MATRIX*) : HRESULT
    @lpVtbl.value.get_current_transform.unsafe_as(Proc(DWRITE_MATRIX*, HRESULT)).call(transform)
  end
  def set_current_transform(transform : DWRITE_MATRIX*) : HRESULT
    @lpVtbl.value.set_current_transform.unsafe_as(Proc(DWRITE_MATRIX*, HRESULT)).call(transform)
  end
  def get_size(size : SIZE*) : HRESULT
    @lpVtbl.value.get_size.unsafe_as(Proc(SIZE*, HRESULT)).call(size)
  end
  def resize(width : UInt32, height : UInt32) : HRESULT
    @lpVtbl.value.resize.unsafe_as(Proc(UInt32, UInt32, HRESULT)).call(width, height)
  end
  def get_text_antialias_mode : DWRITE_TEXT_ANTIALIAS_MODE
    @lpVtbl.value.get_text_antialias_mode.unsafe_as(Proc(DWRITE_TEXT_ANTIALIAS_MODE)).call
  end
  def set_text_antialias_mode(antialiasmode : DWRITE_TEXT_ANTIALIAS_MODE) : HRESULT
    @lpVtbl.value.set_text_antialias_mode.unsafe_as(Proc(DWRITE_TEXT_ANTIALIAS_MODE, HRESULT)).call(antialiasmode)
  end
end
struct LibWin32::IDWriteTextRenderer1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def is_pixel_snapping_disabled(clientdrawingcontext : Void*, isdisabled : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_pixel_snapping_disabled.unsafe_as(Proc(Void*, LibC::BOOL*, HRESULT)).call(clientdrawingcontext, isdisabled)
  end
  def get_current_transform(clientdrawingcontext : Void*, transform : DWRITE_MATRIX*) : HRESULT
    @lpVtbl.value.get_current_transform.unsafe_as(Proc(Void*, DWRITE_MATRIX*, HRESULT)).call(clientdrawingcontext, transform)
  end
  def get_pixels_per_dip(clientdrawingcontext : Void*, pixelsperdip : Float32*) : HRESULT
    @lpVtbl.value.get_pixels_per_dip.unsafe_as(Proc(Void*, Float32*, HRESULT)).call(clientdrawingcontext, pixelsperdip)
  end
  def draw_glyph_run(clientdrawingcontext : Void*, baselineoriginx : Float32, baselineoriginy : Float32, measuringmode : DWRITE_MEASURING_MODE, glyphrun : DWRITE_GLYPH_RUN*, glyphrundescription : DWRITE_GLYPH_RUN_DESCRIPTION*, clientdrawingeffect : IUnknown) : HRESULT
    @lpVtbl.value.draw_glyph_run.unsafe_as(Proc(Void*, Float32, Float32, DWRITE_MEASURING_MODE, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, IUnknown, HRESULT)).call(clientdrawingcontext, baselineoriginx, baselineoriginy, measuringmode, glyphrun, glyphrundescription, clientdrawingeffect)
  end
  def draw_underline(clientdrawingcontext : Void*, baselineoriginx : Float32, baselineoriginy : Float32, underline : DWRITE_UNDERLINE*, clientdrawingeffect : IUnknown) : HRESULT
    @lpVtbl.value.draw_underline.unsafe_as(Proc(Void*, Float32, Float32, DWRITE_UNDERLINE*, IUnknown, HRESULT)).call(clientdrawingcontext, baselineoriginx, baselineoriginy, underline, clientdrawingeffect)
  end
  def draw_strikethrough(clientdrawingcontext : Void*, baselineoriginx : Float32, baselineoriginy : Float32, strikethrough : DWRITE_STRIKETHROUGH*, clientdrawingeffect : IUnknown) : HRESULT
    @lpVtbl.value.draw_strikethrough.unsafe_as(Proc(Void*, Float32, Float32, DWRITE_STRIKETHROUGH*, IUnknown, HRESULT)).call(clientdrawingcontext, baselineoriginx, baselineoriginy, strikethrough, clientdrawingeffect)
  end
  def draw_inline_object(clientdrawingcontext : Void*, originx : Float32, originy : Float32, inlineobject : IDWriteInlineObject, issideways : LibC::BOOL, isrighttoleft : LibC::BOOL, clientdrawingeffect : IUnknown) : HRESULT
    @lpVtbl.value.draw_inline_object.unsafe_as(Proc(Void*, Float32, Float32, IDWriteInlineObject, LibC::BOOL, LibC::BOOL, IUnknown, HRESULT)).call(clientdrawingcontext, originx, originy, inlineobject, issideways, isrighttoleft, clientdrawingeffect)
  end
  def draw_glyph_run2(clientdrawingcontext : Void*, baselineoriginx : Float32, baselineoriginy : Float32, orientationangle : DWRITE_GLYPH_ORIENTATION_ANGLE, measuringmode : DWRITE_MEASURING_MODE, glyphrun : DWRITE_GLYPH_RUN*, glyphrundescription : DWRITE_GLYPH_RUN_DESCRIPTION*, clientdrawingeffect : IUnknown) : HRESULT
    @lpVtbl.value.draw_glyph_run2.unsafe_as(Proc(Void*, Float32, Float32, DWRITE_GLYPH_ORIENTATION_ANGLE, DWRITE_MEASURING_MODE, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, IUnknown, HRESULT)).call(clientdrawingcontext, baselineoriginx, baselineoriginy, orientationangle, measuringmode, glyphrun, glyphrundescription, clientdrawingeffect)
  end
  def draw_underline2(clientdrawingcontext : Void*, baselineoriginx : Float32, baselineoriginy : Float32, orientationangle : DWRITE_GLYPH_ORIENTATION_ANGLE, underline : DWRITE_UNDERLINE*, clientdrawingeffect : IUnknown) : HRESULT
    @lpVtbl.value.draw_underline2.unsafe_as(Proc(Void*, Float32, Float32, DWRITE_GLYPH_ORIENTATION_ANGLE, DWRITE_UNDERLINE*, IUnknown, HRESULT)).call(clientdrawingcontext, baselineoriginx, baselineoriginy, orientationangle, underline, clientdrawingeffect)
  end
  def draw_strikethrough2(clientdrawingcontext : Void*, baselineoriginx : Float32, baselineoriginy : Float32, orientationangle : DWRITE_GLYPH_ORIENTATION_ANGLE, strikethrough : DWRITE_STRIKETHROUGH*, clientdrawingeffect : IUnknown) : HRESULT
    @lpVtbl.value.draw_strikethrough2.unsafe_as(Proc(Void*, Float32, Float32, DWRITE_GLYPH_ORIENTATION_ANGLE, DWRITE_STRIKETHROUGH*, IUnknown, HRESULT)).call(clientdrawingcontext, baselineoriginx, baselineoriginy, orientationangle, strikethrough, clientdrawingeffect)
  end
  def draw_inline_object2(clientdrawingcontext : Void*, originx : Float32, originy : Float32, orientationangle : DWRITE_GLYPH_ORIENTATION_ANGLE, inlineobject : IDWriteInlineObject, issideways : LibC::BOOL, isrighttoleft : LibC::BOOL, clientdrawingeffect : IUnknown) : HRESULT
    @lpVtbl.value.draw_inline_object2.unsafe_as(Proc(Void*, Float32, Float32, DWRITE_GLYPH_ORIENTATION_ANGLE, IDWriteInlineObject, LibC::BOOL, LibC::BOOL, IUnknown, HRESULT)).call(clientdrawingcontext, originx, originy, orientationangle, inlineobject, issideways, isrighttoleft, clientdrawingeffect)
  end
end
struct LibWin32::IDWriteTextFormat1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_text_alignment(textalignment : DWRITE_TEXT_ALIGNMENT) : HRESULT
    @lpVtbl.value.set_text_alignment.unsafe_as(Proc(DWRITE_TEXT_ALIGNMENT, HRESULT)).call(textalignment)
  end
  def set_paragraph_alignment(paragraphalignment : DWRITE_PARAGRAPH_ALIGNMENT) : HRESULT
    @lpVtbl.value.set_paragraph_alignment.unsafe_as(Proc(DWRITE_PARAGRAPH_ALIGNMENT, HRESULT)).call(paragraphalignment)
  end
  def set_word_wrapping(wordwrapping : DWRITE_WORD_WRAPPING) : HRESULT
    @lpVtbl.value.set_word_wrapping.unsafe_as(Proc(DWRITE_WORD_WRAPPING, HRESULT)).call(wordwrapping)
  end
  def set_reading_direction(readingdirection : DWRITE_READING_DIRECTION) : HRESULT
    @lpVtbl.value.set_reading_direction.unsafe_as(Proc(DWRITE_READING_DIRECTION, HRESULT)).call(readingdirection)
  end
  def set_flow_direction(flowdirection : DWRITE_FLOW_DIRECTION) : HRESULT
    @lpVtbl.value.set_flow_direction.unsafe_as(Proc(DWRITE_FLOW_DIRECTION, HRESULT)).call(flowdirection)
  end
  def set_incremental_tab_stop(incrementaltabstop : Float32) : HRESULT
    @lpVtbl.value.set_incremental_tab_stop.unsafe_as(Proc(Float32, HRESULT)).call(incrementaltabstop)
  end
  def set_trimming(trimmingoptions : DWRITE_TRIMMING*, trimmingsign : IDWriteInlineObject) : HRESULT
    @lpVtbl.value.set_trimming.unsafe_as(Proc(DWRITE_TRIMMING*, IDWriteInlineObject, HRESULT)).call(trimmingoptions, trimmingsign)
  end
  def set_line_spacing(linespacingmethod : DWRITE_LINE_SPACING_METHOD, linespacing : Float32, baseline : Float32) : HRESULT
    @lpVtbl.value.set_line_spacing.unsafe_as(Proc(DWRITE_LINE_SPACING_METHOD, Float32, Float32, HRESULT)).call(linespacingmethod, linespacing, baseline)
  end
  def get_text_alignment : DWRITE_TEXT_ALIGNMENT
    @lpVtbl.value.get_text_alignment.unsafe_as(Proc(DWRITE_TEXT_ALIGNMENT)).call
  end
  def get_paragraph_alignment : DWRITE_PARAGRAPH_ALIGNMENT
    @lpVtbl.value.get_paragraph_alignment.unsafe_as(Proc(DWRITE_PARAGRAPH_ALIGNMENT)).call
  end
  def get_word_wrapping : DWRITE_WORD_WRAPPING
    @lpVtbl.value.get_word_wrapping.unsafe_as(Proc(DWRITE_WORD_WRAPPING)).call
  end
  def get_reading_direction : DWRITE_READING_DIRECTION
    @lpVtbl.value.get_reading_direction.unsafe_as(Proc(DWRITE_READING_DIRECTION)).call
  end
  def get_flow_direction : DWRITE_FLOW_DIRECTION
    @lpVtbl.value.get_flow_direction.unsafe_as(Proc(DWRITE_FLOW_DIRECTION)).call
  end
  def get_incremental_tab_stop : Float32
    @lpVtbl.value.get_incremental_tab_stop.unsafe_as(Proc(Float32)).call
  end
  def get_trimming(trimmingoptions : DWRITE_TRIMMING*, trimmingsign : IDWriteInlineObject*) : HRESULT
    @lpVtbl.value.get_trimming.unsafe_as(Proc(DWRITE_TRIMMING*, IDWriteInlineObject*, HRESULT)).call(trimmingoptions, trimmingsign)
  end
  def get_line_spacing(linespacingmethod : DWRITE_LINE_SPACING_METHOD*, linespacing : Float32*, baseline : Float32*) : HRESULT
    @lpVtbl.value.get_line_spacing.unsafe_as(Proc(DWRITE_LINE_SPACING_METHOD*, Float32*, Float32*, HRESULT)).call(linespacingmethod, linespacing, baseline)
  end
  def get_font_collection(fontcollection : IDWriteFontCollection*) : HRESULT
    @lpVtbl.value.get_font_collection.unsafe_as(Proc(IDWriteFontCollection*, HRESULT)).call(fontcollection)
  end
  def get_font_family_name_length : UInt32
    @lpVtbl.value.get_font_family_name_length.unsafe_as(Proc(UInt32)).call
  end
  def get_font_family_name(fontfamilyname : Char*, namesize : UInt32) : HRESULT
    @lpVtbl.value.get_font_family_name.unsafe_as(Proc(Char*, UInt32, HRESULT)).call(fontfamilyname, namesize)
  end
  def get_font_weight : DWRITE_FONT_WEIGHT
    @lpVtbl.value.get_font_weight.unsafe_as(Proc(DWRITE_FONT_WEIGHT)).call
  end
  def get_font_style : DWRITE_FONT_STYLE
    @lpVtbl.value.get_font_style.unsafe_as(Proc(DWRITE_FONT_STYLE)).call
  end
  def get_font_stretch : DWRITE_FONT_STRETCH
    @lpVtbl.value.get_font_stretch.unsafe_as(Proc(DWRITE_FONT_STRETCH)).call
  end
  def get_font_size : Float32
    @lpVtbl.value.get_font_size.unsafe_as(Proc(Float32)).call
  end
  def get_locale_name_length : UInt32
    @lpVtbl.value.get_locale_name_length.unsafe_as(Proc(UInt32)).call
  end
  def get_locale_name(localename : Char*, namesize : UInt32) : HRESULT
    @lpVtbl.value.get_locale_name.unsafe_as(Proc(Char*, UInt32, HRESULT)).call(localename, namesize)
  end
  def set_vertical_glyph_orientation(glyphorientation : DWRITE_VERTICAL_GLYPH_ORIENTATION) : HRESULT
    @lpVtbl.value.set_vertical_glyph_orientation.unsafe_as(Proc(DWRITE_VERTICAL_GLYPH_ORIENTATION, HRESULT)).call(glyphorientation)
  end
  def get_vertical_glyph_orientation : DWRITE_VERTICAL_GLYPH_ORIENTATION
    @lpVtbl.value.get_vertical_glyph_orientation.unsafe_as(Proc(DWRITE_VERTICAL_GLYPH_ORIENTATION)).call
  end
  def set_last_line_wrapping(islastlinewrappingenabled : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_last_line_wrapping.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(islastlinewrappingenabled)
  end
  def get_last_line_wrapping : LibC::BOOL
    @lpVtbl.value.get_last_line_wrapping.unsafe_as(Proc(LibC::BOOL)).call
  end
  def set_optical_alignment(opticalalignment : DWRITE_OPTICAL_ALIGNMENT) : HRESULT
    @lpVtbl.value.set_optical_alignment.unsafe_as(Proc(DWRITE_OPTICAL_ALIGNMENT, HRESULT)).call(opticalalignment)
  end
  def get_optical_alignment : DWRITE_OPTICAL_ALIGNMENT
    @lpVtbl.value.get_optical_alignment.unsafe_as(Proc(DWRITE_OPTICAL_ALIGNMENT)).call
  end
  def set_font_fallback(fontfallback : IDWriteFontFallback) : HRESULT
    @lpVtbl.value.set_font_fallback.unsafe_as(Proc(IDWriteFontFallback, HRESULT)).call(fontfallback)
  end
  def get_font_fallback(fontfallback : IDWriteFontFallback*) : HRESULT
    @lpVtbl.value.get_font_fallback.unsafe_as(Proc(IDWriteFontFallback*, HRESULT)).call(fontfallback)
  end
end
struct LibWin32::IDWriteTextLayout2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_text_alignment(textalignment : DWRITE_TEXT_ALIGNMENT) : HRESULT
    @lpVtbl.value.set_text_alignment.unsafe_as(Proc(DWRITE_TEXT_ALIGNMENT, HRESULT)).call(textalignment)
  end
  def set_paragraph_alignment(paragraphalignment : DWRITE_PARAGRAPH_ALIGNMENT) : HRESULT
    @lpVtbl.value.set_paragraph_alignment.unsafe_as(Proc(DWRITE_PARAGRAPH_ALIGNMENT, HRESULT)).call(paragraphalignment)
  end
  def set_word_wrapping(wordwrapping : DWRITE_WORD_WRAPPING) : HRESULT
    @lpVtbl.value.set_word_wrapping.unsafe_as(Proc(DWRITE_WORD_WRAPPING, HRESULT)).call(wordwrapping)
  end
  def set_reading_direction(readingdirection : DWRITE_READING_DIRECTION) : HRESULT
    @lpVtbl.value.set_reading_direction.unsafe_as(Proc(DWRITE_READING_DIRECTION, HRESULT)).call(readingdirection)
  end
  def set_flow_direction(flowdirection : DWRITE_FLOW_DIRECTION) : HRESULT
    @lpVtbl.value.set_flow_direction.unsafe_as(Proc(DWRITE_FLOW_DIRECTION, HRESULT)).call(flowdirection)
  end
  def set_incremental_tab_stop(incrementaltabstop : Float32) : HRESULT
    @lpVtbl.value.set_incremental_tab_stop.unsafe_as(Proc(Float32, HRESULT)).call(incrementaltabstop)
  end
  def set_trimming(trimmingoptions : DWRITE_TRIMMING*, trimmingsign : IDWriteInlineObject) : HRESULT
    @lpVtbl.value.set_trimming.unsafe_as(Proc(DWRITE_TRIMMING*, IDWriteInlineObject, HRESULT)).call(trimmingoptions, trimmingsign)
  end
  def set_line_spacing(linespacingmethod : DWRITE_LINE_SPACING_METHOD, linespacing : Float32, baseline : Float32) : HRESULT
    @lpVtbl.value.set_line_spacing.unsafe_as(Proc(DWRITE_LINE_SPACING_METHOD, Float32, Float32, HRESULT)).call(linespacingmethod, linespacing, baseline)
  end
  def get_text_alignment : DWRITE_TEXT_ALIGNMENT
    @lpVtbl.value.get_text_alignment.unsafe_as(Proc(DWRITE_TEXT_ALIGNMENT)).call
  end
  def get_paragraph_alignment : DWRITE_PARAGRAPH_ALIGNMENT
    @lpVtbl.value.get_paragraph_alignment.unsafe_as(Proc(DWRITE_PARAGRAPH_ALIGNMENT)).call
  end
  def get_word_wrapping : DWRITE_WORD_WRAPPING
    @lpVtbl.value.get_word_wrapping.unsafe_as(Proc(DWRITE_WORD_WRAPPING)).call
  end
  def get_reading_direction : DWRITE_READING_DIRECTION
    @lpVtbl.value.get_reading_direction.unsafe_as(Proc(DWRITE_READING_DIRECTION)).call
  end
  def get_flow_direction : DWRITE_FLOW_DIRECTION
    @lpVtbl.value.get_flow_direction.unsafe_as(Proc(DWRITE_FLOW_DIRECTION)).call
  end
  def get_incremental_tab_stop : Float32
    @lpVtbl.value.get_incremental_tab_stop.unsafe_as(Proc(Float32)).call
  end
  def get_trimming(trimmingoptions : DWRITE_TRIMMING*, trimmingsign : IDWriteInlineObject*) : HRESULT
    @lpVtbl.value.get_trimming.unsafe_as(Proc(DWRITE_TRIMMING*, IDWriteInlineObject*, HRESULT)).call(trimmingoptions, trimmingsign)
  end
  def get_line_spacing(linespacingmethod : DWRITE_LINE_SPACING_METHOD*, linespacing : Float32*, baseline : Float32*) : HRESULT
    @lpVtbl.value.get_line_spacing.unsafe_as(Proc(DWRITE_LINE_SPACING_METHOD*, Float32*, Float32*, HRESULT)).call(linespacingmethod, linespacing, baseline)
  end
  def get_font_collection(fontcollection : IDWriteFontCollection*) : HRESULT
    @lpVtbl.value.get_font_collection.unsafe_as(Proc(IDWriteFontCollection*, HRESULT)).call(fontcollection)
  end
  def get_font_family_name_length : UInt32
    @lpVtbl.value.get_font_family_name_length.unsafe_as(Proc(UInt32)).call
  end
  def get_font_family_name(fontfamilyname : Char*, namesize : UInt32) : HRESULT
    @lpVtbl.value.get_font_family_name.unsafe_as(Proc(Char*, UInt32, HRESULT)).call(fontfamilyname, namesize)
  end
  def get_font_weight : DWRITE_FONT_WEIGHT
    @lpVtbl.value.get_font_weight.unsafe_as(Proc(DWRITE_FONT_WEIGHT)).call
  end
  def get_font_style : DWRITE_FONT_STYLE
    @lpVtbl.value.get_font_style.unsafe_as(Proc(DWRITE_FONT_STYLE)).call
  end
  def get_font_stretch : DWRITE_FONT_STRETCH
    @lpVtbl.value.get_font_stretch.unsafe_as(Proc(DWRITE_FONT_STRETCH)).call
  end
  def get_font_size : Float32
    @lpVtbl.value.get_font_size.unsafe_as(Proc(Float32)).call
  end
  def get_locale_name_length : UInt32
    @lpVtbl.value.get_locale_name_length.unsafe_as(Proc(UInt32)).call
  end
  def get_locale_name(localename : Char*, namesize : UInt32) : HRESULT
    @lpVtbl.value.get_locale_name.unsafe_as(Proc(Char*, UInt32, HRESULT)).call(localename, namesize)
  end
  def set_max_width(maxwidth : Float32) : HRESULT
    @lpVtbl.value.set_max_width.unsafe_as(Proc(Float32, HRESULT)).call(maxwidth)
  end
  def set_max_height(maxheight : Float32) : HRESULT
    @lpVtbl.value.set_max_height.unsafe_as(Proc(Float32, HRESULT)).call(maxheight)
  end
  def set_font_collection(fontcollection : IDWriteFontCollection, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_collection.unsafe_as(Proc(IDWriteFontCollection, DWRITE_TEXT_RANGE, HRESULT)).call(fontcollection, textrange)
  end
  def set_font_family_name(fontfamilyname : LibC::LPWSTR, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_family_name.unsafe_as(Proc(LibC::LPWSTR, DWRITE_TEXT_RANGE, HRESULT)).call(fontfamilyname, textrange)
  end
  def set_font_weight(fontweight : DWRITE_FONT_WEIGHT, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_weight.unsafe_as(Proc(DWRITE_FONT_WEIGHT, DWRITE_TEXT_RANGE, HRESULT)).call(fontweight, textrange)
  end
  def set_font_style(fontstyle : DWRITE_FONT_STYLE, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_style.unsafe_as(Proc(DWRITE_FONT_STYLE, DWRITE_TEXT_RANGE, HRESULT)).call(fontstyle, textrange)
  end
  def set_font_stretch(fontstretch : DWRITE_FONT_STRETCH, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_stretch.unsafe_as(Proc(DWRITE_FONT_STRETCH, DWRITE_TEXT_RANGE, HRESULT)).call(fontstretch, textrange)
  end
  def set_font_size(fontsize : Float32, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_size.unsafe_as(Proc(Float32, DWRITE_TEXT_RANGE, HRESULT)).call(fontsize, textrange)
  end
  def set_underline(hasunderline : LibC::BOOL, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_underline.unsafe_as(Proc(LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)).call(hasunderline, textrange)
  end
  def set_strikethrough(hasstrikethrough : LibC::BOOL, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_strikethrough.unsafe_as(Proc(LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)).call(hasstrikethrough, textrange)
  end
  def set_drawing_effect(drawingeffect : IUnknown, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_drawing_effect.unsafe_as(Proc(IUnknown, DWRITE_TEXT_RANGE, HRESULT)).call(drawingeffect, textrange)
  end
  def set_inline_object(inlineobject : IDWriteInlineObject, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_inline_object.unsafe_as(Proc(IDWriteInlineObject, DWRITE_TEXT_RANGE, HRESULT)).call(inlineobject, textrange)
  end
  def set_typography(typography : IDWriteTypography, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_typography.unsafe_as(Proc(IDWriteTypography, DWRITE_TEXT_RANGE, HRESULT)).call(typography, textrange)
  end
  def set_locale_name(localename : LibC::LPWSTR, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_locale_name.unsafe_as(Proc(LibC::LPWSTR, DWRITE_TEXT_RANGE, HRESULT)).call(localename, textrange)
  end
  def get_max_width : Float32
    @lpVtbl.value.get_max_width.unsafe_as(Proc(Float32)).call
  end
  def get_max_height : Float32
    @lpVtbl.value.get_max_height.unsafe_as(Proc(Float32)).call
  end
  def get_font_collection2(currentposition : UInt32, fontcollection : IDWriteFontCollection*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_collection2.unsafe_as(Proc(UInt32, IDWriteFontCollection*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontcollection, textrange)
  end
  def get_font_family_name_length2(currentposition : UInt32, namelength : UInt32*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_family_name_length2.unsafe_as(Proc(UInt32, UInt32*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, namelength, textrange)
  end
  def get_font_family_name2(currentposition : UInt32, fontfamilyname : Char*, namesize : UInt32, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_family_name2.unsafe_as(Proc(UInt32, Char*, UInt32, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontfamilyname, namesize, textrange)
  end
  def get_font_weight2(currentposition : UInt32, fontweight : DWRITE_FONT_WEIGHT*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_weight2.unsafe_as(Proc(UInt32, DWRITE_FONT_WEIGHT*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontweight, textrange)
  end
  def get_font_style2(currentposition : UInt32, fontstyle : DWRITE_FONT_STYLE*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_style2.unsafe_as(Proc(UInt32, DWRITE_FONT_STYLE*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontstyle, textrange)
  end
  def get_font_stretch2(currentposition : UInt32, fontstretch : DWRITE_FONT_STRETCH*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_stretch2.unsafe_as(Proc(UInt32, DWRITE_FONT_STRETCH*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontstretch, textrange)
  end
  def get_font_size2(currentposition : UInt32, fontsize : Float32*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_size2.unsafe_as(Proc(UInt32, Float32*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontsize, textrange)
  end
  def get_underline(currentposition : UInt32, hasunderline : LibC::BOOL*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_underline.unsafe_as(Proc(UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, hasunderline, textrange)
  end
  def get_strikethrough(currentposition : UInt32, hasstrikethrough : LibC::BOOL*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_strikethrough.unsafe_as(Proc(UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, hasstrikethrough, textrange)
  end
  def get_drawing_effect(currentposition : UInt32, drawingeffect : IUnknown*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_drawing_effect.unsafe_as(Proc(UInt32, IUnknown*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, drawingeffect, textrange)
  end
  def get_inline_object(currentposition : UInt32, inlineobject : IDWriteInlineObject*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_inline_object.unsafe_as(Proc(UInt32, IDWriteInlineObject*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, inlineobject, textrange)
  end
  def get_typography(currentposition : UInt32, typography : IDWriteTypography*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_typography.unsafe_as(Proc(UInt32, IDWriteTypography*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, typography, textrange)
  end
  def get_locale_name_length2(currentposition : UInt32, namelength : UInt32*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_locale_name_length2.unsafe_as(Proc(UInt32, UInt32*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, namelength, textrange)
  end
  def get_locale_name2(currentposition : UInt32, localename : Char*, namesize : UInt32, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_locale_name2.unsafe_as(Proc(UInt32, Char*, UInt32, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, localename, namesize, textrange)
  end
  def draw(clientdrawingcontext : Void*, renderer : IDWriteTextRenderer, originx : Float32, originy : Float32) : HRESULT
    @lpVtbl.value.draw.unsafe_as(Proc(Void*, IDWriteTextRenderer, Float32, Float32, HRESULT)).call(clientdrawingcontext, renderer, originx, originy)
  end
  def get_line_metrics(linemetrics : DWRITE_LINE_METRICS*, maxlinecount : UInt32, actuallinecount : UInt32*) : HRESULT
    @lpVtbl.value.get_line_metrics.unsafe_as(Proc(DWRITE_LINE_METRICS*, UInt32, UInt32*, HRESULT)).call(linemetrics, maxlinecount, actuallinecount)
  end
  def get_metrics(textmetrics : DWRITE_TEXT_METRICS*) : HRESULT
    @lpVtbl.value.get_metrics.unsafe_as(Proc(DWRITE_TEXT_METRICS*, HRESULT)).call(textmetrics)
  end
  def get_overhang_metrics(overhangs : DWRITE_OVERHANG_METRICS*) : HRESULT
    @lpVtbl.value.get_overhang_metrics.unsafe_as(Proc(DWRITE_OVERHANG_METRICS*, HRESULT)).call(overhangs)
  end
  def get_cluster_metrics(clustermetrics : DWRITE_CLUSTER_METRICS*, maxclustercount : UInt32, actualclustercount : UInt32*) : HRESULT
    @lpVtbl.value.get_cluster_metrics.unsafe_as(Proc(DWRITE_CLUSTER_METRICS*, UInt32, UInt32*, HRESULT)).call(clustermetrics, maxclustercount, actualclustercount)
  end
  def determine_min_width(minwidth : Float32*) : HRESULT
    @lpVtbl.value.determine_min_width.unsafe_as(Proc(Float32*, HRESULT)).call(minwidth)
  end
  def hit_test_point(pointx : Float32, pointy : Float32, istrailinghit : LibC::BOOL*, isinside : LibC::BOOL*, hittestmetrics : DWRITE_HIT_TEST_METRICS*) : HRESULT
    @lpVtbl.value.hit_test_point.unsafe_as(Proc(Float32, Float32, LibC::BOOL*, LibC::BOOL*, DWRITE_HIT_TEST_METRICS*, HRESULT)).call(pointx, pointy, istrailinghit, isinside, hittestmetrics)
  end
  def hit_test_text_position(textposition : UInt32, istrailinghit : LibC::BOOL, pointx : Float32*, pointy : Float32*, hittestmetrics : DWRITE_HIT_TEST_METRICS*) : HRESULT
    @lpVtbl.value.hit_test_text_position.unsafe_as(Proc(UInt32, LibC::BOOL, Float32*, Float32*, DWRITE_HIT_TEST_METRICS*, HRESULT)).call(textposition, istrailinghit, pointx, pointy, hittestmetrics)
  end
  def hit_test_text_range(textposition : UInt32, textlength : UInt32, originx : Float32, originy : Float32, hittestmetrics : DWRITE_HIT_TEST_METRICS*, maxhittestmetricscount : UInt32, actualhittestmetricscount : UInt32*) : HRESULT
    @lpVtbl.value.hit_test_text_range.unsafe_as(Proc(UInt32, UInt32, Float32, Float32, DWRITE_HIT_TEST_METRICS*, UInt32, UInt32*, HRESULT)).call(textposition, textlength, originx, originy, hittestmetrics, maxhittestmetricscount, actualhittestmetricscount)
  end
  def set_pair_kerning(ispairkerningenabled : LibC::BOOL, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_pair_kerning.unsafe_as(Proc(LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)).call(ispairkerningenabled, textrange)
  end
  def get_pair_kerning(currentposition : UInt32, ispairkerningenabled : LibC::BOOL*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_pair_kerning.unsafe_as(Proc(UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, ispairkerningenabled, textrange)
  end
  def set_character_spacing(leadingspacing : Float32, trailingspacing : Float32, minimumadvancewidth : Float32, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_character_spacing.unsafe_as(Proc(Float32, Float32, Float32, DWRITE_TEXT_RANGE, HRESULT)).call(leadingspacing, trailingspacing, minimumadvancewidth, textrange)
  end
  def get_character_spacing(currentposition : UInt32, leadingspacing : Float32*, trailingspacing : Float32*, minimumadvancewidth : Float32*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_character_spacing.unsafe_as(Proc(UInt32, Float32*, Float32*, Float32*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, leadingspacing, trailingspacing, minimumadvancewidth, textrange)
  end
  def get_metrics2(textmetrics : DWRITE_TEXT_METRICS1*) : HRESULT
    @lpVtbl.value.get_metrics2.unsafe_as(Proc(DWRITE_TEXT_METRICS1*, HRESULT)).call(textmetrics)
  end
  def set_vertical_glyph_orientation(glyphorientation : DWRITE_VERTICAL_GLYPH_ORIENTATION) : HRESULT
    @lpVtbl.value.set_vertical_glyph_orientation.unsafe_as(Proc(DWRITE_VERTICAL_GLYPH_ORIENTATION, HRESULT)).call(glyphorientation)
  end
  def get_vertical_glyph_orientation : DWRITE_VERTICAL_GLYPH_ORIENTATION
    @lpVtbl.value.get_vertical_glyph_orientation.unsafe_as(Proc(DWRITE_VERTICAL_GLYPH_ORIENTATION)).call
  end
  def set_last_line_wrapping(islastlinewrappingenabled : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_last_line_wrapping.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(islastlinewrappingenabled)
  end
  def get_last_line_wrapping : LibC::BOOL
    @lpVtbl.value.get_last_line_wrapping.unsafe_as(Proc(LibC::BOOL)).call
  end
  def set_optical_alignment(opticalalignment : DWRITE_OPTICAL_ALIGNMENT) : HRESULT
    @lpVtbl.value.set_optical_alignment.unsafe_as(Proc(DWRITE_OPTICAL_ALIGNMENT, HRESULT)).call(opticalalignment)
  end
  def get_optical_alignment : DWRITE_OPTICAL_ALIGNMENT
    @lpVtbl.value.get_optical_alignment.unsafe_as(Proc(DWRITE_OPTICAL_ALIGNMENT)).call
  end
  def set_font_fallback(fontfallback : IDWriteFontFallback) : HRESULT
    @lpVtbl.value.set_font_fallback.unsafe_as(Proc(IDWriteFontFallback, HRESULT)).call(fontfallback)
  end
  def get_font_fallback(fontfallback : IDWriteFontFallback*) : HRESULT
    @lpVtbl.value.get_font_fallback.unsafe_as(Proc(IDWriteFontFallback*, HRESULT)).call(fontfallback)
  end
end
struct LibWin32::IDWriteTextAnalyzer2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def analyze_script(analysissource : IDWriteTextAnalysisSource, textposition : UInt32, textlength : UInt32, analysissink : IDWriteTextAnalysisSink) : HRESULT
    @lpVtbl.value.analyze_script.unsafe_as(Proc(IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteTextAnalysisSink, HRESULT)).call(analysissource, textposition, textlength, analysissink)
  end
  def analyze_bidi(analysissource : IDWriteTextAnalysisSource, textposition : UInt32, textlength : UInt32, analysissink : IDWriteTextAnalysisSink) : HRESULT
    @lpVtbl.value.analyze_bidi.unsafe_as(Proc(IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteTextAnalysisSink, HRESULT)).call(analysissource, textposition, textlength, analysissink)
  end
  def analyze_number_substitution(analysissource : IDWriteTextAnalysisSource, textposition : UInt32, textlength : UInt32, analysissink : IDWriteTextAnalysisSink) : HRESULT
    @lpVtbl.value.analyze_number_substitution.unsafe_as(Proc(IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteTextAnalysisSink, HRESULT)).call(analysissource, textposition, textlength, analysissink)
  end
  def analyze_line_breakpoints(analysissource : IDWriteTextAnalysisSource, textposition : UInt32, textlength : UInt32, analysissink : IDWriteTextAnalysisSink) : HRESULT
    @lpVtbl.value.analyze_line_breakpoints.unsafe_as(Proc(IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteTextAnalysisSink, HRESULT)).call(analysissource, textposition, textlength, analysissink)
  end
  def get_glyphs(textstring : Char*, textlength : UInt32, fontface : IDWriteFontFace, issideways : LibC::BOOL, isrighttoleft : LibC::BOOL, scriptanalysis : DWRITE_SCRIPT_ANALYSIS*, localename : LibC::LPWSTR, numbersubstitution : IDWriteNumberSubstitution, features : DWRITE_TYPOGRAPHIC_FEATURES**, featurerangelengths : UInt32*, featureranges : UInt32, maxglyphcount : UInt32, clustermap : UInt16*, textprops : DWRITE_SHAPING_TEXT_PROPERTIES*, glyphindices : UInt16*, glyphprops : DWRITE_SHAPING_GLYPH_PROPERTIES*, actualglyphcount : UInt32*) : HRESULT
    @lpVtbl.value.get_glyphs.unsafe_as(Proc(Char*, UInt32, IDWriteFontFace, LibC::BOOL, LibC::BOOL, DWRITE_SCRIPT_ANALYSIS*, LibC::LPWSTR, IDWriteNumberSubstitution, DWRITE_TYPOGRAPHIC_FEATURES**, UInt32*, UInt32, UInt32, UInt16*, DWRITE_SHAPING_TEXT_PROPERTIES*, UInt16*, DWRITE_SHAPING_GLYPH_PROPERTIES*, UInt32*, HRESULT)).call(textstring, textlength, fontface, issideways, isrighttoleft, scriptanalysis, localename, numbersubstitution, features, featurerangelengths, featureranges, maxglyphcount, clustermap, textprops, glyphindices, glyphprops, actualglyphcount)
  end
  def get_glyph_placements(textstring : Char*, clustermap : UInt16*, textprops : DWRITE_SHAPING_TEXT_PROPERTIES*, textlength : UInt32, glyphindices : UInt16*, glyphprops : DWRITE_SHAPING_GLYPH_PROPERTIES*, glyphcount : UInt32, fontface : IDWriteFontFace, fontemsize : Float32, issideways : LibC::BOOL, isrighttoleft : LibC::BOOL, scriptanalysis : DWRITE_SCRIPT_ANALYSIS*, localename : LibC::LPWSTR, features : DWRITE_TYPOGRAPHIC_FEATURES**, featurerangelengths : UInt32*, featureranges : UInt32, glyphadvances : Float32*, glyphoffsets : DWRITE_GLYPH_OFFSET*) : HRESULT
    @lpVtbl.value.get_glyph_placements.unsafe_as(Proc(Char*, UInt16*, DWRITE_SHAPING_TEXT_PROPERTIES*, UInt32, UInt16*, DWRITE_SHAPING_GLYPH_PROPERTIES*, UInt32, IDWriteFontFace, Float32, LibC::BOOL, LibC::BOOL, DWRITE_SCRIPT_ANALYSIS*, LibC::LPWSTR, DWRITE_TYPOGRAPHIC_FEATURES**, UInt32*, UInt32, Float32*, DWRITE_GLYPH_OFFSET*, HRESULT)).call(textstring, clustermap, textprops, textlength, glyphindices, glyphprops, glyphcount, fontface, fontemsize, issideways, isrighttoleft, scriptanalysis, localename, features, featurerangelengths, featureranges, glyphadvances, glyphoffsets)
  end
  def get_gdi_compatible_glyph_placements(textstring : Char*, clustermap : UInt16*, textprops : DWRITE_SHAPING_TEXT_PROPERTIES*, textlength : UInt32, glyphindices : UInt16*, glyphprops : DWRITE_SHAPING_GLYPH_PROPERTIES*, glyphcount : UInt32, fontface : IDWriteFontFace, fontemsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, usegdinatural : LibC::BOOL, issideways : LibC::BOOL, isrighttoleft : LibC::BOOL, scriptanalysis : DWRITE_SCRIPT_ANALYSIS*, localename : LibC::LPWSTR, features : DWRITE_TYPOGRAPHIC_FEATURES**, featurerangelengths : UInt32*, featureranges : UInt32, glyphadvances : Float32*, glyphoffsets : DWRITE_GLYPH_OFFSET*) : HRESULT
    @lpVtbl.value.get_gdi_compatible_glyph_placements.unsafe_as(Proc(Char*, UInt16*, DWRITE_SHAPING_TEXT_PROPERTIES*, UInt32, UInt16*, DWRITE_SHAPING_GLYPH_PROPERTIES*, UInt32, IDWriteFontFace, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, LibC::BOOL, LibC::BOOL, DWRITE_SCRIPT_ANALYSIS*, LibC::LPWSTR, DWRITE_TYPOGRAPHIC_FEATURES**, UInt32*, UInt32, Float32*, DWRITE_GLYPH_OFFSET*, HRESULT)).call(textstring, clustermap, textprops, textlength, glyphindices, glyphprops, glyphcount, fontface, fontemsize, pixelsperdip, transform, usegdinatural, issideways, isrighttoleft, scriptanalysis, localename, features, featurerangelengths, featureranges, glyphadvances, glyphoffsets)
  end
  def apply_character_spacing(leadingspacing : Float32, trailingspacing : Float32, minimumadvancewidth : Float32, textlength : UInt32, glyphcount : UInt32, clustermap : UInt16*, glyphadvances : Float32*, glyphoffsets : DWRITE_GLYPH_OFFSET*, glyphproperties : DWRITE_SHAPING_GLYPH_PROPERTIES*, modifiedglyphadvances : Float32*, modifiedglyphoffsets : DWRITE_GLYPH_OFFSET*) : HRESULT
    @lpVtbl.value.apply_character_spacing.unsafe_as(Proc(Float32, Float32, Float32, UInt32, UInt32, UInt16*, Float32*, DWRITE_GLYPH_OFFSET*, DWRITE_SHAPING_GLYPH_PROPERTIES*, Float32*, DWRITE_GLYPH_OFFSET*, HRESULT)).call(leadingspacing, trailingspacing, minimumadvancewidth, textlength, glyphcount, clustermap, glyphadvances, glyphoffsets, glyphproperties, modifiedglyphadvances, modifiedglyphoffsets)
  end
  def get_baseline(fontface : IDWriteFontFace, baseline : DWRITE_BASELINE, isvertical : LibC::BOOL, issimulationallowed : LibC::BOOL, scriptanalysis : DWRITE_SCRIPT_ANALYSIS, localename : LibC::LPWSTR, baselinecoordinate : Int32*, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_baseline.unsafe_as(Proc(IDWriteFontFace, DWRITE_BASELINE, LibC::BOOL, LibC::BOOL, DWRITE_SCRIPT_ANALYSIS, LibC::LPWSTR, Int32*, LibC::BOOL*, HRESULT)).call(fontface, baseline, isvertical, issimulationallowed, scriptanalysis, localename, baselinecoordinate, exists)
  end
  def analyze_vertical_glyph_orientation(analysissource : IDWriteTextAnalysisSource1, textposition : UInt32, textlength : UInt32, analysissink : IDWriteTextAnalysisSink1) : HRESULT
    @lpVtbl.value.analyze_vertical_glyph_orientation.unsafe_as(Proc(IDWriteTextAnalysisSource1, UInt32, UInt32, IDWriteTextAnalysisSink1, HRESULT)).call(analysissource, textposition, textlength, analysissink)
  end
  def get_glyph_orientation_transform(glyphorientationangle : DWRITE_GLYPH_ORIENTATION_ANGLE, issideways : LibC::BOOL, transform : DWRITE_MATRIX*) : HRESULT
    @lpVtbl.value.get_glyph_orientation_transform.unsafe_as(Proc(DWRITE_GLYPH_ORIENTATION_ANGLE, LibC::BOOL, DWRITE_MATRIX*, HRESULT)).call(glyphorientationangle, issideways, transform)
  end
  def get_script_properties(scriptanalysis : DWRITE_SCRIPT_ANALYSIS, scriptproperties : DWRITE_SCRIPT_PROPERTIES*) : HRESULT
    @lpVtbl.value.get_script_properties.unsafe_as(Proc(DWRITE_SCRIPT_ANALYSIS, DWRITE_SCRIPT_PROPERTIES*, HRESULT)).call(scriptanalysis, scriptproperties)
  end
  def get_text_complexity(textstring : Char*, textlength : UInt32, fontface : IDWriteFontFace, istextsimple : LibC::BOOL*, textlengthread : UInt32*, glyphindices : UInt16*) : HRESULT
    @lpVtbl.value.get_text_complexity.unsafe_as(Proc(Char*, UInt32, IDWriteFontFace, LibC::BOOL*, UInt32*, UInt16*, HRESULT)).call(textstring, textlength, fontface, istextsimple, textlengthread, glyphindices)
  end
  def get_justification_opportunities(fontface : IDWriteFontFace, fontemsize : Float32, scriptanalysis : DWRITE_SCRIPT_ANALYSIS, textlength : UInt32, glyphcount : UInt32, textstring : Char*, clustermap : UInt16*, glyphproperties : DWRITE_SHAPING_GLYPH_PROPERTIES*, justificationopportunities : DWRITE_JUSTIFICATION_OPPORTUNITY*) : HRESULT
    @lpVtbl.value.get_justification_opportunities.unsafe_as(Proc(IDWriteFontFace, Float32, DWRITE_SCRIPT_ANALYSIS, UInt32, UInt32, Char*, UInt16*, DWRITE_SHAPING_GLYPH_PROPERTIES*, DWRITE_JUSTIFICATION_OPPORTUNITY*, HRESULT)).call(fontface, fontemsize, scriptanalysis, textlength, glyphcount, textstring, clustermap, glyphproperties, justificationopportunities)
  end
  def justify_glyph_advances(linewidth : Float32, glyphcount : UInt32, justificationopportunities : DWRITE_JUSTIFICATION_OPPORTUNITY*, glyphadvances : Float32*, glyphoffsets : DWRITE_GLYPH_OFFSET*, justifiedglyphadvances : Float32*, justifiedglyphoffsets : DWRITE_GLYPH_OFFSET*) : HRESULT
    @lpVtbl.value.justify_glyph_advances.unsafe_as(Proc(Float32, UInt32, DWRITE_JUSTIFICATION_OPPORTUNITY*, Float32*, DWRITE_GLYPH_OFFSET*, Float32*, DWRITE_GLYPH_OFFSET*, HRESULT)).call(linewidth, glyphcount, justificationopportunities, glyphadvances, glyphoffsets, justifiedglyphadvances, justifiedglyphoffsets)
  end
  def get_justified_glyphs(fontface : IDWriteFontFace, fontemsize : Float32, scriptanalysis : DWRITE_SCRIPT_ANALYSIS, textlength : UInt32, glyphcount : UInt32, maxglyphcount : UInt32, clustermap : UInt16*, glyphindices : UInt16*, glyphadvances : Float32*, justifiedglyphadvances : Float32*, justifiedglyphoffsets : DWRITE_GLYPH_OFFSET*, glyphproperties : DWRITE_SHAPING_GLYPH_PROPERTIES*, actualglyphcount : UInt32*, modifiedclustermap : UInt16*, modifiedglyphindices : UInt16*, modifiedglyphadvances : Float32*, modifiedglyphoffsets : DWRITE_GLYPH_OFFSET*) : HRESULT
    @lpVtbl.value.get_justified_glyphs.unsafe_as(Proc(IDWriteFontFace, Float32, DWRITE_SCRIPT_ANALYSIS, UInt32, UInt32, UInt32, UInt16*, UInt16*, Float32*, Float32*, DWRITE_GLYPH_OFFSET*, DWRITE_SHAPING_GLYPH_PROPERTIES*, UInt32*, UInt16*, UInt16*, Float32*, DWRITE_GLYPH_OFFSET*, HRESULT)).call(fontface, fontemsize, scriptanalysis, textlength, glyphcount, maxglyphcount, clustermap, glyphindices, glyphadvances, justifiedglyphadvances, justifiedglyphoffsets, glyphproperties, actualglyphcount, modifiedclustermap, modifiedglyphindices, modifiedglyphadvances, modifiedglyphoffsets)
  end
  def get_glyph_orientation_transform2(glyphorientationangle : DWRITE_GLYPH_ORIENTATION_ANGLE, issideways : LibC::BOOL, originx : Float32, originy : Float32, transform : DWRITE_MATRIX*) : HRESULT
    @lpVtbl.value.get_glyph_orientation_transform2.unsafe_as(Proc(DWRITE_GLYPH_ORIENTATION_ANGLE, LibC::BOOL, Float32, Float32, DWRITE_MATRIX*, HRESULT)).call(glyphorientationangle, issideways, originx, originy, transform)
  end
  def get_typographic_features(fontface : IDWriteFontFace, scriptanalysis : DWRITE_SCRIPT_ANALYSIS, localename : LibC::LPWSTR, maxtagcount : UInt32, actualtagcount : UInt32*, tags : DWRITE_FONT_FEATURE_TAG*) : HRESULT
    @lpVtbl.value.get_typographic_features.unsafe_as(Proc(IDWriteFontFace, DWRITE_SCRIPT_ANALYSIS, LibC::LPWSTR, UInt32, UInt32*, DWRITE_FONT_FEATURE_TAG*, HRESULT)).call(fontface, scriptanalysis, localename, maxtagcount, actualtagcount, tags)
  end
  def check_typographic_feature(fontface : IDWriteFontFace, scriptanalysis : DWRITE_SCRIPT_ANALYSIS, localename : LibC::LPWSTR, featuretag : DWRITE_FONT_FEATURE_TAG, glyphcount : UInt32, glyphindices : UInt16*, featureapplies : UInt8*) : HRESULT
    @lpVtbl.value.check_typographic_feature.unsafe_as(Proc(IDWriteFontFace, DWRITE_SCRIPT_ANALYSIS, LibC::LPWSTR, DWRITE_FONT_FEATURE_TAG, UInt32, UInt16*, UInt8*, HRESULT)).call(fontface, scriptanalysis, localename, featuretag, glyphcount, glyphindices, featureapplies)
  end
end
struct LibWin32::IDWriteFontFallback
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def map_characters(analysissource : IDWriteTextAnalysisSource, textposition : UInt32, textlength : UInt32, basefontcollection : IDWriteFontCollection, basefamilyname : LibC::LPWSTR, baseweight : DWRITE_FONT_WEIGHT, basestyle : DWRITE_FONT_STYLE, basestretch : DWRITE_FONT_STRETCH, mappedlength : UInt32*, mappedfont : IDWriteFont*, scale : Float32*) : HRESULT
    @lpVtbl.value.map_characters.unsafe_as(Proc(IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteFontCollection, LibC::LPWSTR, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, UInt32*, IDWriteFont*, Float32*, HRESULT)).call(analysissource, textposition, textlength, basefontcollection, basefamilyname, baseweight, basestyle, basestretch, mappedlength, mappedfont, scale)
  end
end
struct LibWin32::IDWriteFontFallbackBuilder
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def add_mapping(ranges : DWRITE_UNICODE_RANGE*, rangescount : UInt32, targetfamilynames : UInt16**, targetfamilynamescount : UInt32, fontcollection : IDWriteFontCollection, localename : LibC::LPWSTR, basefamilyname : LibC::LPWSTR, scale : Float32) : HRESULT
    @lpVtbl.value.add_mapping.unsafe_as(Proc(DWRITE_UNICODE_RANGE*, UInt32, UInt16**, UInt32, IDWriteFontCollection, LibC::LPWSTR, LibC::LPWSTR, Float32, HRESULT)).call(ranges, rangescount, targetfamilynames, targetfamilynamescount, fontcollection, localename, basefamilyname, scale)
  end
  def add_mappings(fontfallback : IDWriteFontFallback) : HRESULT
    @lpVtbl.value.add_mappings.unsafe_as(Proc(IDWriteFontFallback, HRESULT)).call(fontfallback)
  end
  def create_font_fallback(fontfallback : IDWriteFontFallback*) : HRESULT
    @lpVtbl.value.create_font_fallback.unsafe_as(Proc(IDWriteFontFallback*, HRESULT)).call(fontfallback)
  end
end
struct LibWin32::IDWriteFont2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_font_family(fontfamily : IDWriteFontFamily*) : HRESULT
    @lpVtbl.value.get_font_family.unsafe_as(Proc(IDWriteFontFamily*, HRESULT)).call(fontfamily)
  end
  def get_weight : DWRITE_FONT_WEIGHT
    @lpVtbl.value.get_weight.unsafe_as(Proc(DWRITE_FONT_WEIGHT)).call
  end
  def get_stretch : DWRITE_FONT_STRETCH
    @lpVtbl.value.get_stretch.unsafe_as(Proc(DWRITE_FONT_STRETCH)).call
  end
  def get_style : DWRITE_FONT_STYLE
    @lpVtbl.value.get_style.unsafe_as(Proc(DWRITE_FONT_STYLE)).call
  end
  def is_symbol_font : LibC::BOOL
    @lpVtbl.value.is_symbol_font.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_face_names(names : IDWriteLocalizedStrings*) : HRESULT
    @lpVtbl.value.get_face_names.unsafe_as(Proc(IDWriteLocalizedStrings*, HRESULT)).call(names)
  end
  def get_informational_strings(informationalstringid : DWRITE_INFORMATIONAL_STRING_ID, informationalstrings : IDWriteLocalizedStrings*, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_informational_strings.unsafe_as(Proc(DWRITE_INFORMATIONAL_STRING_ID, IDWriteLocalizedStrings*, LibC::BOOL*, HRESULT)).call(informationalstringid, informationalstrings, exists)
  end
  def get_simulations : DWRITE_FONT_SIMULATIONS
    @lpVtbl.value.get_simulations.unsafe_as(Proc(DWRITE_FONT_SIMULATIONS)).call
  end
  def get_metrics(fontmetrics : DWRITE_FONT_METRICS*) : Void
    @lpVtbl.value.get_metrics.unsafe_as(Proc(DWRITE_FONT_METRICS*, Void)).call(fontmetrics)
  end
  def has_character(unicodevalue : UInt32, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.has_character.unsafe_as(Proc(UInt32, LibC::BOOL*, HRESULT)).call(unicodevalue, exists)
  end
  def create_font_face(fontface : IDWriteFontFace*) : HRESULT
    @lpVtbl.value.create_font_face.unsafe_as(Proc(IDWriteFontFace*, HRESULT)).call(fontface)
  end
  def get_metrics2(fontmetrics : DWRITE_FONT_METRICS1*) : Void
    @lpVtbl.value.get_metrics2.unsafe_as(Proc(DWRITE_FONT_METRICS1*, Void)).call(fontmetrics)
  end
  def get_panose(panose : DWRITE_PANOSE*) : Void
    @lpVtbl.value.get_panose.unsafe_as(Proc(DWRITE_PANOSE*, Void)).call(panose)
  end
  def get_unicode_ranges(maxrangecount : UInt32, unicoderanges : DWRITE_UNICODE_RANGE*, actualrangecount : UInt32*) : HRESULT
    @lpVtbl.value.get_unicode_ranges.unsafe_as(Proc(UInt32, DWRITE_UNICODE_RANGE*, UInt32*, HRESULT)).call(maxrangecount, unicoderanges, actualrangecount)
  end
  def is_monospaced_font : LibC::BOOL
    @lpVtbl.value.is_monospaced_font.unsafe_as(Proc(LibC::BOOL)).call
  end
  def is_color_font : LibC::BOOL
    @lpVtbl.value.is_color_font.unsafe_as(Proc(LibC::BOOL)).call
  end
end
struct LibWin32::IDWriteFontFace2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type : DWRITE_FONT_FACE_TYPE
    @lpVtbl.value.get_type.unsafe_as(Proc(DWRITE_FONT_FACE_TYPE)).call
  end
  def get_files(numberoffiles : UInt32*, fontfiles : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.get_files.unsafe_as(Proc(UInt32*, IDWriteFontFile*, HRESULT)).call(numberoffiles, fontfiles)
  end
  def get_index : UInt32
    @lpVtbl.value.get_index.unsafe_as(Proc(UInt32)).call
  end
  def get_simulations : DWRITE_FONT_SIMULATIONS
    @lpVtbl.value.get_simulations.unsafe_as(Proc(DWRITE_FONT_SIMULATIONS)).call
  end
  def is_symbol_font : LibC::BOOL
    @lpVtbl.value.is_symbol_font.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_metrics(fontfacemetrics : DWRITE_FONT_METRICS*) : Void
    @lpVtbl.value.get_metrics.unsafe_as(Proc(DWRITE_FONT_METRICS*, Void)).call(fontfacemetrics)
  end
  def get_glyph_count : UInt16
    @lpVtbl.value.get_glyph_count.unsafe_as(Proc(UInt16)).call
  end
  def get_design_glyph_metrics(glyphindices : UInt16*, glyphcount : UInt32, glyphmetrics : DWRITE_GLYPH_METRICS*, issideways : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_design_glyph_metrics.unsafe_as(Proc(UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)).call(glyphindices, glyphcount, glyphmetrics, issideways)
  end
  def get_glyph_indices(codepoints : UInt32*, codepointcount : UInt32, glyphindices : UInt16*) : HRESULT
    @lpVtbl.value.get_glyph_indices.unsafe_as(Proc(UInt32*, UInt32, UInt16*, HRESULT)).call(codepoints, codepointcount, glyphindices)
  end
  def try_get_font_table(opentypetabletag : UInt32, tabledata : Void**, tablesize : UInt32*, tablecontext : Void**, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.try_get_font_table.unsafe_as(Proc(UInt32, Void**, UInt32*, Void**, LibC::BOOL*, HRESULT)).call(opentypetabletag, tabledata, tablesize, tablecontext, exists)
  end
  def release_font_table(tablecontext : Void*) : Void
    @lpVtbl.value.release_font_table.unsafe_as(Proc(Void*, Void)).call(tablecontext)
  end
  def get_glyph_run_outline(emsize : Float32, glyphindices : UInt16*, glyphadvances : Float32*, glyphoffsets : DWRITE_GLYPH_OFFSET*, glyphcount : UInt32, issideways : LibC::BOOL, isrighttoleft : LibC::BOOL, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.get_glyph_run_outline.unsafe_as(Proc(Float32, UInt16*, Float32*, DWRITE_GLYPH_OFFSET*, UInt32, LibC::BOOL, LibC::BOOL, ID2D1SimplifiedGeometrySink, HRESULT)).call(emsize, glyphindices, glyphadvances, glyphoffsets, glyphcount, issideways, isrighttoleft, geometrysink)
  end
  def get_recommended_rendering_mode(emsize : Float32, pixelsperdip : Float32, measuringmode : DWRITE_MEASURING_MODE, renderingparams : IDWriteRenderingParams, renderingmode : DWRITE_RENDERING_MODE*) : HRESULT
    @lpVtbl.value.get_recommended_rendering_mode.unsafe_as(Proc(Float32, Float32, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE*, HRESULT)).call(emsize, pixelsperdip, measuringmode, renderingparams, renderingmode)
  end
  def get_gdi_compatible_metrics(emsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, fontfacemetrics : DWRITE_FONT_METRICS*) : HRESULT
    @lpVtbl.value.get_gdi_compatible_metrics.unsafe_as(Proc(Float32, Float32, DWRITE_MATRIX*, DWRITE_FONT_METRICS*, HRESULT)).call(emsize, pixelsperdip, transform, fontfacemetrics)
  end
  def get_gdi_compatible_glyph_metrics(emsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, usegdinatural : LibC::BOOL, glyphindices : UInt16*, glyphcount : UInt32, glyphmetrics : DWRITE_GLYPH_METRICS*, issideways : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_gdi_compatible_glyph_metrics.unsafe_as(Proc(Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)).call(emsize, pixelsperdip, transform, usegdinatural, glyphindices, glyphcount, glyphmetrics, issideways)
  end
  def get_metrics2(fontmetrics : DWRITE_FONT_METRICS1*) : Void
    @lpVtbl.value.get_metrics2.unsafe_as(Proc(DWRITE_FONT_METRICS1*, Void)).call(fontmetrics)
  end
  def get_gdi_compatible_metrics2(emsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, fontmetrics : DWRITE_FONT_METRICS1*) : HRESULT
    @lpVtbl.value.get_gdi_compatible_metrics2.unsafe_as(Proc(Float32, Float32, DWRITE_MATRIX*, DWRITE_FONT_METRICS1*, HRESULT)).call(emsize, pixelsperdip, transform, fontmetrics)
  end
  def get_caret_metrics(caretmetrics : DWRITE_CARET_METRICS*) : Void
    @lpVtbl.value.get_caret_metrics.unsafe_as(Proc(DWRITE_CARET_METRICS*, Void)).call(caretmetrics)
  end
  def get_unicode_ranges(maxrangecount : UInt32, unicoderanges : DWRITE_UNICODE_RANGE*, actualrangecount : UInt32*) : HRESULT
    @lpVtbl.value.get_unicode_ranges.unsafe_as(Proc(UInt32, DWRITE_UNICODE_RANGE*, UInt32*, HRESULT)).call(maxrangecount, unicoderanges, actualrangecount)
  end
  def is_monospaced_font : LibC::BOOL
    @lpVtbl.value.is_monospaced_font.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_design_glyph_advances(glyphcount : UInt32, glyphindices : UInt16*, glyphadvances : Int32*, issideways : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_design_glyph_advances.unsafe_as(Proc(UInt32, UInt16*, Int32*, LibC::BOOL, HRESULT)).call(glyphcount, glyphindices, glyphadvances, issideways)
  end
  def get_gdi_compatible_glyph_advances(emsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, usegdinatural : LibC::BOOL, issideways : LibC::BOOL, glyphcount : UInt32, glyphindices : UInt16*, glyphadvances : Int32*) : HRESULT
    @lpVtbl.value.get_gdi_compatible_glyph_advances.unsafe_as(Proc(Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, LibC::BOOL, UInt32, UInt16*, Int32*, HRESULT)).call(emsize, pixelsperdip, transform, usegdinatural, issideways, glyphcount, glyphindices, glyphadvances)
  end
  def get_kerning_pair_adjustments(glyphcount : UInt32, glyphindices : UInt16*, glyphadvanceadjustments : Int32*) : HRESULT
    @lpVtbl.value.get_kerning_pair_adjustments.unsafe_as(Proc(UInt32, UInt16*, Int32*, HRESULT)).call(glyphcount, glyphindices, glyphadvanceadjustments)
  end
  def has_kerning_pairs : LibC::BOOL
    @lpVtbl.value.has_kerning_pairs.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_recommended_rendering_mode2(fontemsize : Float32, dpix : Float32, dpiy : Float32, transform : DWRITE_MATRIX*, issideways : LibC::BOOL, outlinethreshold : DWRITE_OUTLINE_THRESHOLD, measuringmode : DWRITE_MEASURING_MODE, renderingmode : DWRITE_RENDERING_MODE*) : HRESULT
    @lpVtbl.value.get_recommended_rendering_mode2.unsafe_as(Proc(Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, DWRITE_RENDERING_MODE*, HRESULT)).call(fontemsize, dpix, dpiy, transform, issideways, outlinethreshold, measuringmode, renderingmode)
  end
  def get_vertical_glyph_variants(glyphcount : UInt32, nominalglyphindices : UInt16*, verticalglyphindices : UInt16*) : HRESULT
    @lpVtbl.value.get_vertical_glyph_variants.unsafe_as(Proc(UInt32, UInt16*, UInt16*, HRESULT)).call(glyphcount, nominalglyphindices, verticalglyphindices)
  end
  def has_vertical_glyph_variants : LibC::BOOL
    @lpVtbl.value.has_vertical_glyph_variants.unsafe_as(Proc(LibC::BOOL)).call
  end
  def is_color_font : LibC::BOOL
    @lpVtbl.value.is_color_font.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_color_palette_count : UInt32
    @lpVtbl.value.get_color_palette_count.unsafe_as(Proc(UInt32)).call
  end
  def get_palette_entry_count : UInt32
    @lpVtbl.value.get_palette_entry_count.unsafe_as(Proc(UInt32)).call
  end
  def get_palette_entries(colorpaletteindex : UInt32, firstentryindex : UInt32, entrycount : UInt32, paletteentries : DWRITE_COLOR_F*) : HRESULT
    @lpVtbl.value.get_palette_entries.unsafe_as(Proc(UInt32, UInt32, UInt32, DWRITE_COLOR_F*, HRESULT)).call(colorpaletteindex, firstentryindex, entrycount, paletteentries)
  end
  def get_recommended_rendering_mode3(fontemsize : Float32, dpix : Float32, dpiy : Float32, transform : DWRITE_MATRIX*, issideways : LibC::BOOL, outlinethreshold : DWRITE_OUTLINE_THRESHOLD, measuringmode : DWRITE_MEASURING_MODE, renderingparams : IDWriteRenderingParams, renderingmode : DWRITE_RENDERING_MODE*, gridfitmode : DWRITE_GRID_FIT_MODE*) : HRESULT
    @lpVtbl.value.get_recommended_rendering_mode3.unsafe_as(Proc(Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE*, DWRITE_GRID_FIT_MODE*, HRESULT)).call(fontemsize, dpix, dpiy, transform, issideways, outlinethreshold, measuringmode, renderingparams, renderingmode, gridfitmode)
  end
end
struct LibWin32::IDWriteColorGlyphRunEnumerator
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def move_next(hasrun : LibC::BOOL*) : HRESULT
    @lpVtbl.value.move_next.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(hasrun)
  end
  def get_current_run(colorglyphrun : DWRITE_COLOR_GLYPH_RUN**) : HRESULT
    @lpVtbl.value.get_current_run.unsafe_as(Proc(DWRITE_COLOR_GLYPH_RUN**, HRESULT)).call(colorglyphrun)
  end
end
struct LibWin32::IDWriteRenderingParams2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_gamma : Float32
    @lpVtbl.value.get_gamma.unsafe_as(Proc(Float32)).call
  end
  def get_enhanced_contrast : Float32
    @lpVtbl.value.get_enhanced_contrast.unsafe_as(Proc(Float32)).call
  end
  def get_clear_type_level : Float32
    @lpVtbl.value.get_clear_type_level.unsafe_as(Proc(Float32)).call
  end
  def get_pixel_geometry : DWRITE_PIXEL_GEOMETRY
    @lpVtbl.value.get_pixel_geometry.unsafe_as(Proc(DWRITE_PIXEL_GEOMETRY)).call
  end
  def get_rendering_mode : DWRITE_RENDERING_MODE
    @lpVtbl.value.get_rendering_mode.unsafe_as(Proc(DWRITE_RENDERING_MODE)).call
  end
  def get_grayscale_enhanced_contrast : Float32
    @lpVtbl.value.get_grayscale_enhanced_contrast.unsafe_as(Proc(Float32)).call
  end
  def get_grid_fit_mode : DWRITE_GRID_FIT_MODE
    @lpVtbl.value.get_grid_fit_mode.unsafe_as(Proc(DWRITE_GRID_FIT_MODE)).call
  end
end
struct LibWin32::IDWriteFactory2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_system_font_collection(fontcollection : IDWriteFontCollection*, checkforupdates : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_system_font_collection.unsafe_as(Proc(IDWriteFontCollection*, LibC::BOOL, HRESULT)).call(fontcollection, checkforupdates)
  end
  def create_custom_font_collection(collectionloader : IDWriteFontCollectionLoader, collectionkey : Void*, collectionkeysize : UInt32, fontcollection : IDWriteFontCollection*) : HRESULT
    @lpVtbl.value.create_custom_font_collection.unsafe_as(Proc(IDWriteFontCollectionLoader, Void*, UInt32, IDWriteFontCollection*, HRESULT)).call(collectionloader, collectionkey, collectionkeysize, fontcollection)
  end
  def register_font_collection_loader(fontcollectionloader : IDWriteFontCollectionLoader) : HRESULT
    @lpVtbl.value.register_font_collection_loader.unsafe_as(Proc(IDWriteFontCollectionLoader, HRESULT)).call(fontcollectionloader)
  end
  def unregister_font_collection_loader(fontcollectionloader : IDWriteFontCollectionLoader) : HRESULT
    @lpVtbl.value.unregister_font_collection_loader.unsafe_as(Proc(IDWriteFontCollectionLoader, HRESULT)).call(fontcollectionloader)
  end
  def create_font_file_reference(filepath : LibC::LPWSTR, lastwritetime : FILETIME*, fontfile : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.create_font_file_reference.unsafe_as(Proc(LibC::LPWSTR, FILETIME*, IDWriteFontFile*, HRESULT)).call(filepath, lastwritetime, fontfile)
  end
  def create_custom_font_file_reference(fontfilereferencekey : Void*, fontfilereferencekeysize : UInt32, fontfileloader : IDWriteFontFileLoader, fontfile : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.create_custom_font_file_reference.unsafe_as(Proc(Void*, UInt32, IDWriteFontFileLoader, IDWriteFontFile*, HRESULT)).call(fontfilereferencekey, fontfilereferencekeysize, fontfileloader, fontfile)
  end
  def create_font_face(fontfacetype : DWRITE_FONT_FACE_TYPE, numberoffiles : UInt32, fontfiles : IDWriteFontFile*, faceindex : UInt32, fontfacesimulationflags : DWRITE_FONT_SIMULATIONS, fontface : IDWriteFontFace*) : HRESULT
    @lpVtbl.value.create_font_face.unsafe_as(Proc(DWRITE_FONT_FACE_TYPE, UInt32, IDWriteFontFile*, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFace*, HRESULT)).call(fontfacetype, numberoffiles, fontfiles, faceindex, fontfacesimulationflags, fontface)
  end
  def create_rendering_params(renderingparams : IDWriteRenderingParams*) : HRESULT
    @lpVtbl.value.create_rendering_params.unsafe_as(Proc(IDWriteRenderingParams*, HRESULT)).call(renderingparams)
  end
  def create_monitor_rendering_params(monitor : HMONITOR, renderingparams : IDWriteRenderingParams*) : HRESULT
    @lpVtbl.value.create_monitor_rendering_params.unsafe_as(Proc(HMONITOR, IDWriteRenderingParams*, HRESULT)).call(monitor, renderingparams)
  end
  def create_custom_rendering_params(gamma : Float32, enhancedcontrast : Float32, cleartypelevel : Float32, pixelgeometry : DWRITE_PIXEL_GEOMETRY, renderingmode : DWRITE_RENDERING_MODE, renderingparams : IDWriteRenderingParams*) : HRESULT
    @lpVtbl.value.create_custom_rendering_params.unsafe_as(Proc(Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams*, HRESULT)).call(gamma, enhancedcontrast, cleartypelevel, pixelgeometry, renderingmode, renderingparams)
  end
  def register_font_file_loader(fontfileloader : IDWriteFontFileLoader) : HRESULT
    @lpVtbl.value.register_font_file_loader.unsafe_as(Proc(IDWriteFontFileLoader, HRESULT)).call(fontfileloader)
  end
  def unregister_font_file_loader(fontfileloader : IDWriteFontFileLoader) : HRESULT
    @lpVtbl.value.unregister_font_file_loader.unsafe_as(Proc(IDWriteFontFileLoader, HRESULT)).call(fontfileloader)
  end
  def create_text_format(fontfamilyname : LibC::LPWSTR, fontcollection : IDWriteFontCollection, fontweight : DWRITE_FONT_WEIGHT, fontstyle : DWRITE_FONT_STYLE, fontstretch : DWRITE_FONT_STRETCH, fontsize : Float32, localename : LibC::LPWSTR, textformat : IDWriteTextFormat*) : HRESULT
    @lpVtbl.value.create_text_format.unsafe_as(Proc(LibC::LPWSTR, IDWriteFontCollection, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, Float32, LibC::LPWSTR, IDWriteTextFormat*, HRESULT)).call(fontfamilyname, fontcollection, fontweight, fontstyle, fontstretch, fontsize, localename, textformat)
  end
  def create_typography(typography : IDWriteTypography*) : HRESULT
    @lpVtbl.value.create_typography.unsafe_as(Proc(IDWriteTypography*, HRESULT)).call(typography)
  end
  def get_gdi_interop(gdiinterop : IDWriteGdiInterop*) : HRESULT
    @lpVtbl.value.get_gdi_interop.unsafe_as(Proc(IDWriteGdiInterop*, HRESULT)).call(gdiinterop)
  end
  def create_text_layout(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, maxwidth : Float32, maxheight : Float32, textlayout : IDWriteTextLayout*) : HRESULT
    @lpVtbl.value.create_text_layout.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, Float32, Float32, IDWriteTextLayout*, HRESULT)).call(string, stringlength, textformat, maxwidth, maxheight, textlayout)
  end
  def create_gdi_compatible_text_layout(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, layoutwidth : Float32, layoutheight : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, usegdinatural : LibC::BOOL, textlayout : IDWriteTextLayout*) : HRESULT
    @lpVtbl.value.create_gdi_compatible_text_layout.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, IDWriteTextLayout*, HRESULT)).call(string, stringlength, textformat, layoutwidth, layoutheight, pixelsperdip, transform, usegdinatural, textlayout)
  end
  def create_ellipsis_trimming_sign(textformat : IDWriteTextFormat, trimmingsign : IDWriteInlineObject*) : HRESULT
    @lpVtbl.value.create_ellipsis_trimming_sign.unsafe_as(Proc(IDWriteTextFormat, IDWriteInlineObject*, HRESULT)).call(textformat, trimmingsign)
  end
  def create_text_analyzer(textanalyzer : IDWriteTextAnalyzer*) : HRESULT
    @lpVtbl.value.create_text_analyzer.unsafe_as(Proc(IDWriteTextAnalyzer*, HRESULT)).call(textanalyzer)
  end
  def create_number_substitution(substitutionmethod : DWRITE_NUMBER_SUBSTITUTION_METHOD, localename : LibC::LPWSTR, ignoreuseroverride : LibC::BOOL, numbersubstitution : IDWriteNumberSubstitution*) : HRESULT
    @lpVtbl.value.create_number_substitution.unsafe_as(Proc(DWRITE_NUMBER_SUBSTITUTION_METHOD, LibC::LPWSTR, LibC::BOOL, IDWriteNumberSubstitution*, HRESULT)).call(substitutionmethod, localename, ignoreuseroverride, numbersubstitution)
  end
  def create_glyph_run_analysis(glyphrun : DWRITE_GLYPH_RUN*, pixelsperdip : Float32, transform : DWRITE_MATRIX*, renderingmode : DWRITE_RENDERING_MODE, measuringmode : DWRITE_MEASURING_MODE, baselineoriginx : Float32, baselineoriginy : Float32, glyphrunanalysis : IDWriteGlyphRunAnalysis*) : HRESULT
    @lpVtbl.value.create_glyph_run_analysis.unsafe_as(Proc(DWRITE_GLYPH_RUN*, Float32, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)).call(glyphrun, pixelsperdip, transform, renderingmode, measuringmode, baselineoriginx, baselineoriginy, glyphrunanalysis)
  end
  def get_eudc_font_collection(fontcollection : IDWriteFontCollection*, checkforupdates : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_eudc_font_collection.unsafe_as(Proc(IDWriteFontCollection*, LibC::BOOL, HRESULT)).call(fontcollection, checkforupdates)
  end
  def create_custom_rendering_params2(gamma : Float32, enhancedcontrast : Float32, enhancedcontrastgrayscale : Float32, cleartypelevel : Float32, pixelgeometry : DWRITE_PIXEL_GEOMETRY, renderingmode : DWRITE_RENDERING_MODE, renderingparams : IDWriteRenderingParams1*) : HRESULT
    @lpVtbl.value.create_custom_rendering_params2.unsafe_as(Proc(Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams1*, HRESULT)).call(gamma, enhancedcontrast, enhancedcontrastgrayscale, cleartypelevel, pixelgeometry, renderingmode, renderingparams)
  end
  def get_system_font_fallback(fontfallback : IDWriteFontFallback*) : HRESULT
    @lpVtbl.value.get_system_font_fallback.unsafe_as(Proc(IDWriteFontFallback*, HRESULT)).call(fontfallback)
  end
  def create_font_fallback_builder(fontfallbackbuilder : IDWriteFontFallbackBuilder*) : HRESULT
    @lpVtbl.value.create_font_fallback_builder.unsafe_as(Proc(IDWriteFontFallbackBuilder*, HRESULT)).call(fontfallbackbuilder)
  end
  def translate_color_glyph_run(baselineoriginx : Float32, baselineoriginy : Float32, glyphrun : DWRITE_GLYPH_RUN*, glyphrundescription : DWRITE_GLYPH_RUN_DESCRIPTION*, measuringmode : DWRITE_MEASURING_MODE, worldtodevicetransform : DWRITE_MATRIX*, colorpaletteindex : UInt32, colorlayers : IDWriteColorGlyphRunEnumerator*) : HRESULT
    @lpVtbl.value.translate_color_glyph_run.unsafe_as(Proc(Float32, Float32, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, DWRITE_MEASURING_MODE, DWRITE_MATRIX*, UInt32, IDWriteColorGlyphRunEnumerator*, HRESULT)).call(baselineoriginx, baselineoriginy, glyphrun, glyphrundescription, measuringmode, worldtodevicetransform, colorpaletteindex, colorlayers)
  end
  def create_custom_rendering_params3(gamma : Float32, enhancedcontrast : Float32, grayscaleenhancedcontrast : Float32, cleartypelevel : Float32, pixelgeometry : DWRITE_PIXEL_GEOMETRY, renderingmode : DWRITE_RENDERING_MODE, gridfitmode : DWRITE_GRID_FIT_MODE, renderingparams : IDWriteRenderingParams2*) : HRESULT
    @lpVtbl.value.create_custom_rendering_params3.unsafe_as(Proc(Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams2*, HRESULT)).call(gamma, enhancedcontrast, grayscaleenhancedcontrast, cleartypelevel, pixelgeometry, renderingmode, gridfitmode, renderingparams)
  end
  def create_glyph_run_analysis2(glyphrun : DWRITE_GLYPH_RUN*, transform : DWRITE_MATRIX*, renderingmode : DWRITE_RENDERING_MODE, measuringmode : DWRITE_MEASURING_MODE, gridfitmode : DWRITE_GRID_FIT_MODE, antialiasmode : DWRITE_TEXT_ANTIALIAS_MODE, baselineoriginx : Float32, baselineoriginy : Float32, glyphrunanalysis : IDWriteGlyphRunAnalysis*) : HRESULT
    @lpVtbl.value.create_glyph_run_analysis2.unsafe_as(Proc(DWRITE_GLYPH_RUN*, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)).call(glyphrun, transform, renderingmode, measuringmode, gridfitmode, antialiasmode, baselineoriginx, baselineoriginy, glyphrunanalysis)
  end
end
struct LibWin32::IDWriteRenderingParams3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_gamma : Float32
    @lpVtbl.value.get_gamma.unsafe_as(Proc(Float32)).call
  end
  def get_enhanced_contrast : Float32
    @lpVtbl.value.get_enhanced_contrast.unsafe_as(Proc(Float32)).call
  end
  def get_clear_type_level : Float32
    @lpVtbl.value.get_clear_type_level.unsafe_as(Proc(Float32)).call
  end
  def get_pixel_geometry : DWRITE_PIXEL_GEOMETRY
    @lpVtbl.value.get_pixel_geometry.unsafe_as(Proc(DWRITE_PIXEL_GEOMETRY)).call
  end
  def get_rendering_mode : DWRITE_RENDERING_MODE
    @lpVtbl.value.get_rendering_mode.unsafe_as(Proc(DWRITE_RENDERING_MODE)).call
  end
  def get_grayscale_enhanced_contrast : Float32
    @lpVtbl.value.get_grayscale_enhanced_contrast.unsafe_as(Proc(Float32)).call
  end
  def get_grid_fit_mode : DWRITE_GRID_FIT_MODE
    @lpVtbl.value.get_grid_fit_mode.unsafe_as(Proc(DWRITE_GRID_FIT_MODE)).call
  end
  def get_rendering_mode1 : DWRITE_RENDERING_MODE1
    @lpVtbl.value.get_rendering_mode1.unsafe_as(Proc(DWRITE_RENDERING_MODE1)).call
  end
end
struct LibWin32::IDWriteFactory3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_system_font_collection(fontcollection : IDWriteFontCollection*, checkforupdates : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_system_font_collection.unsafe_as(Proc(IDWriteFontCollection*, LibC::BOOL, HRESULT)).call(fontcollection, checkforupdates)
  end
  def create_custom_font_collection(collectionloader : IDWriteFontCollectionLoader, collectionkey : Void*, collectionkeysize : UInt32, fontcollection : IDWriteFontCollection*) : HRESULT
    @lpVtbl.value.create_custom_font_collection.unsafe_as(Proc(IDWriteFontCollectionLoader, Void*, UInt32, IDWriteFontCollection*, HRESULT)).call(collectionloader, collectionkey, collectionkeysize, fontcollection)
  end
  def register_font_collection_loader(fontcollectionloader : IDWriteFontCollectionLoader) : HRESULT
    @lpVtbl.value.register_font_collection_loader.unsafe_as(Proc(IDWriteFontCollectionLoader, HRESULT)).call(fontcollectionloader)
  end
  def unregister_font_collection_loader(fontcollectionloader : IDWriteFontCollectionLoader) : HRESULT
    @lpVtbl.value.unregister_font_collection_loader.unsafe_as(Proc(IDWriteFontCollectionLoader, HRESULT)).call(fontcollectionloader)
  end
  def create_font_file_reference(filepath : LibC::LPWSTR, lastwritetime : FILETIME*, fontfile : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.create_font_file_reference.unsafe_as(Proc(LibC::LPWSTR, FILETIME*, IDWriteFontFile*, HRESULT)).call(filepath, lastwritetime, fontfile)
  end
  def create_custom_font_file_reference(fontfilereferencekey : Void*, fontfilereferencekeysize : UInt32, fontfileloader : IDWriteFontFileLoader, fontfile : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.create_custom_font_file_reference.unsafe_as(Proc(Void*, UInt32, IDWriteFontFileLoader, IDWriteFontFile*, HRESULT)).call(fontfilereferencekey, fontfilereferencekeysize, fontfileloader, fontfile)
  end
  def create_font_face(fontfacetype : DWRITE_FONT_FACE_TYPE, numberoffiles : UInt32, fontfiles : IDWriteFontFile*, faceindex : UInt32, fontfacesimulationflags : DWRITE_FONT_SIMULATIONS, fontface : IDWriteFontFace*) : HRESULT
    @lpVtbl.value.create_font_face.unsafe_as(Proc(DWRITE_FONT_FACE_TYPE, UInt32, IDWriteFontFile*, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFace*, HRESULT)).call(fontfacetype, numberoffiles, fontfiles, faceindex, fontfacesimulationflags, fontface)
  end
  def create_rendering_params(renderingparams : IDWriteRenderingParams*) : HRESULT
    @lpVtbl.value.create_rendering_params.unsafe_as(Proc(IDWriteRenderingParams*, HRESULT)).call(renderingparams)
  end
  def create_monitor_rendering_params(monitor : HMONITOR, renderingparams : IDWriteRenderingParams*) : HRESULT
    @lpVtbl.value.create_monitor_rendering_params.unsafe_as(Proc(HMONITOR, IDWriteRenderingParams*, HRESULT)).call(monitor, renderingparams)
  end
  def create_custom_rendering_params(gamma : Float32, enhancedcontrast : Float32, cleartypelevel : Float32, pixelgeometry : DWRITE_PIXEL_GEOMETRY, renderingmode : DWRITE_RENDERING_MODE, renderingparams : IDWriteRenderingParams*) : HRESULT
    @lpVtbl.value.create_custom_rendering_params.unsafe_as(Proc(Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams*, HRESULT)).call(gamma, enhancedcontrast, cleartypelevel, pixelgeometry, renderingmode, renderingparams)
  end
  def register_font_file_loader(fontfileloader : IDWriteFontFileLoader) : HRESULT
    @lpVtbl.value.register_font_file_loader.unsafe_as(Proc(IDWriteFontFileLoader, HRESULT)).call(fontfileloader)
  end
  def unregister_font_file_loader(fontfileloader : IDWriteFontFileLoader) : HRESULT
    @lpVtbl.value.unregister_font_file_loader.unsafe_as(Proc(IDWriteFontFileLoader, HRESULT)).call(fontfileloader)
  end
  def create_text_format(fontfamilyname : LibC::LPWSTR, fontcollection : IDWriteFontCollection, fontweight : DWRITE_FONT_WEIGHT, fontstyle : DWRITE_FONT_STYLE, fontstretch : DWRITE_FONT_STRETCH, fontsize : Float32, localename : LibC::LPWSTR, textformat : IDWriteTextFormat*) : HRESULT
    @lpVtbl.value.create_text_format.unsafe_as(Proc(LibC::LPWSTR, IDWriteFontCollection, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, Float32, LibC::LPWSTR, IDWriteTextFormat*, HRESULT)).call(fontfamilyname, fontcollection, fontweight, fontstyle, fontstretch, fontsize, localename, textformat)
  end
  def create_typography(typography : IDWriteTypography*) : HRESULT
    @lpVtbl.value.create_typography.unsafe_as(Proc(IDWriteTypography*, HRESULT)).call(typography)
  end
  def get_gdi_interop(gdiinterop : IDWriteGdiInterop*) : HRESULT
    @lpVtbl.value.get_gdi_interop.unsafe_as(Proc(IDWriteGdiInterop*, HRESULT)).call(gdiinterop)
  end
  def create_text_layout(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, maxwidth : Float32, maxheight : Float32, textlayout : IDWriteTextLayout*) : HRESULT
    @lpVtbl.value.create_text_layout.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, Float32, Float32, IDWriteTextLayout*, HRESULT)).call(string, stringlength, textformat, maxwidth, maxheight, textlayout)
  end
  def create_gdi_compatible_text_layout(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, layoutwidth : Float32, layoutheight : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, usegdinatural : LibC::BOOL, textlayout : IDWriteTextLayout*) : HRESULT
    @lpVtbl.value.create_gdi_compatible_text_layout.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, IDWriteTextLayout*, HRESULT)).call(string, stringlength, textformat, layoutwidth, layoutheight, pixelsperdip, transform, usegdinatural, textlayout)
  end
  def create_ellipsis_trimming_sign(textformat : IDWriteTextFormat, trimmingsign : IDWriteInlineObject*) : HRESULT
    @lpVtbl.value.create_ellipsis_trimming_sign.unsafe_as(Proc(IDWriteTextFormat, IDWriteInlineObject*, HRESULT)).call(textformat, trimmingsign)
  end
  def create_text_analyzer(textanalyzer : IDWriteTextAnalyzer*) : HRESULT
    @lpVtbl.value.create_text_analyzer.unsafe_as(Proc(IDWriteTextAnalyzer*, HRESULT)).call(textanalyzer)
  end
  def create_number_substitution(substitutionmethod : DWRITE_NUMBER_SUBSTITUTION_METHOD, localename : LibC::LPWSTR, ignoreuseroverride : LibC::BOOL, numbersubstitution : IDWriteNumberSubstitution*) : HRESULT
    @lpVtbl.value.create_number_substitution.unsafe_as(Proc(DWRITE_NUMBER_SUBSTITUTION_METHOD, LibC::LPWSTR, LibC::BOOL, IDWriteNumberSubstitution*, HRESULT)).call(substitutionmethod, localename, ignoreuseroverride, numbersubstitution)
  end
  def create_glyph_run_analysis(glyphrun : DWRITE_GLYPH_RUN*, pixelsperdip : Float32, transform : DWRITE_MATRIX*, renderingmode : DWRITE_RENDERING_MODE, measuringmode : DWRITE_MEASURING_MODE, baselineoriginx : Float32, baselineoriginy : Float32, glyphrunanalysis : IDWriteGlyphRunAnalysis*) : HRESULT
    @lpVtbl.value.create_glyph_run_analysis.unsafe_as(Proc(DWRITE_GLYPH_RUN*, Float32, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)).call(glyphrun, pixelsperdip, transform, renderingmode, measuringmode, baselineoriginx, baselineoriginy, glyphrunanalysis)
  end
  def get_eudc_font_collection(fontcollection : IDWriteFontCollection*, checkforupdates : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_eudc_font_collection.unsafe_as(Proc(IDWriteFontCollection*, LibC::BOOL, HRESULT)).call(fontcollection, checkforupdates)
  end
  def create_custom_rendering_params2(gamma : Float32, enhancedcontrast : Float32, enhancedcontrastgrayscale : Float32, cleartypelevel : Float32, pixelgeometry : DWRITE_PIXEL_GEOMETRY, renderingmode : DWRITE_RENDERING_MODE, renderingparams : IDWriteRenderingParams1*) : HRESULT
    @lpVtbl.value.create_custom_rendering_params2.unsafe_as(Proc(Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams1*, HRESULT)).call(gamma, enhancedcontrast, enhancedcontrastgrayscale, cleartypelevel, pixelgeometry, renderingmode, renderingparams)
  end
  def get_system_font_fallback(fontfallback : IDWriteFontFallback*) : HRESULT
    @lpVtbl.value.get_system_font_fallback.unsafe_as(Proc(IDWriteFontFallback*, HRESULT)).call(fontfallback)
  end
  def create_font_fallback_builder(fontfallbackbuilder : IDWriteFontFallbackBuilder*) : HRESULT
    @lpVtbl.value.create_font_fallback_builder.unsafe_as(Proc(IDWriteFontFallbackBuilder*, HRESULT)).call(fontfallbackbuilder)
  end
  def translate_color_glyph_run(baselineoriginx : Float32, baselineoriginy : Float32, glyphrun : DWRITE_GLYPH_RUN*, glyphrundescription : DWRITE_GLYPH_RUN_DESCRIPTION*, measuringmode : DWRITE_MEASURING_MODE, worldtodevicetransform : DWRITE_MATRIX*, colorpaletteindex : UInt32, colorlayers : IDWriteColorGlyphRunEnumerator*) : HRESULT
    @lpVtbl.value.translate_color_glyph_run.unsafe_as(Proc(Float32, Float32, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, DWRITE_MEASURING_MODE, DWRITE_MATRIX*, UInt32, IDWriteColorGlyphRunEnumerator*, HRESULT)).call(baselineoriginx, baselineoriginy, glyphrun, glyphrundescription, measuringmode, worldtodevicetransform, colorpaletteindex, colorlayers)
  end
  def create_custom_rendering_params3(gamma : Float32, enhancedcontrast : Float32, grayscaleenhancedcontrast : Float32, cleartypelevel : Float32, pixelgeometry : DWRITE_PIXEL_GEOMETRY, renderingmode : DWRITE_RENDERING_MODE, gridfitmode : DWRITE_GRID_FIT_MODE, renderingparams : IDWriteRenderingParams2*) : HRESULT
    @lpVtbl.value.create_custom_rendering_params3.unsafe_as(Proc(Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams2*, HRESULT)).call(gamma, enhancedcontrast, grayscaleenhancedcontrast, cleartypelevel, pixelgeometry, renderingmode, gridfitmode, renderingparams)
  end
  def create_glyph_run_analysis2(glyphrun : DWRITE_GLYPH_RUN*, transform : DWRITE_MATRIX*, renderingmode : DWRITE_RENDERING_MODE, measuringmode : DWRITE_MEASURING_MODE, gridfitmode : DWRITE_GRID_FIT_MODE, antialiasmode : DWRITE_TEXT_ANTIALIAS_MODE, baselineoriginx : Float32, baselineoriginy : Float32, glyphrunanalysis : IDWriteGlyphRunAnalysis*) : HRESULT
    @lpVtbl.value.create_glyph_run_analysis2.unsafe_as(Proc(DWRITE_GLYPH_RUN*, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)).call(glyphrun, transform, renderingmode, measuringmode, gridfitmode, antialiasmode, baselineoriginx, baselineoriginy, glyphrunanalysis)
  end
  def create_glyph_run_analysis3(glyphrun : DWRITE_GLYPH_RUN*, transform : DWRITE_MATRIX*, renderingmode : DWRITE_RENDERING_MODE1, measuringmode : DWRITE_MEASURING_MODE, gridfitmode : DWRITE_GRID_FIT_MODE, antialiasmode : DWRITE_TEXT_ANTIALIAS_MODE, baselineoriginx : Float32, baselineoriginy : Float32, glyphrunanalysis : IDWriteGlyphRunAnalysis*) : HRESULT
    @lpVtbl.value.create_glyph_run_analysis3.unsafe_as(Proc(DWRITE_GLYPH_RUN*, DWRITE_MATRIX*, DWRITE_RENDERING_MODE1, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)).call(glyphrun, transform, renderingmode, measuringmode, gridfitmode, antialiasmode, baselineoriginx, baselineoriginy, glyphrunanalysis)
  end
  def create_custom_rendering_params4(gamma : Float32, enhancedcontrast : Float32, grayscaleenhancedcontrast : Float32, cleartypelevel : Float32, pixelgeometry : DWRITE_PIXEL_GEOMETRY, renderingmode : DWRITE_RENDERING_MODE1, gridfitmode : DWRITE_GRID_FIT_MODE, renderingparams : IDWriteRenderingParams3*) : HRESULT
    @lpVtbl.value.create_custom_rendering_params4.unsafe_as(Proc(Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE1, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams3*, HRESULT)).call(gamma, enhancedcontrast, grayscaleenhancedcontrast, cleartypelevel, pixelgeometry, renderingmode, gridfitmode, renderingparams)
  end
  def create_font_face_reference(fontfile : IDWriteFontFile, faceindex : UInt32, fontsimulations : DWRITE_FONT_SIMULATIONS, fontfacereference : IDWriteFontFaceReference*) : HRESULT
    @lpVtbl.value.create_font_face_reference.unsafe_as(Proc(IDWriteFontFile, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference*, HRESULT)).call(fontfile, faceindex, fontsimulations, fontfacereference)
  end
  def create_font_face_reference2(filepath : LibC::LPWSTR, lastwritetime : FILETIME*, faceindex : UInt32, fontsimulations : DWRITE_FONT_SIMULATIONS, fontfacereference : IDWriteFontFaceReference*) : HRESULT
    @lpVtbl.value.create_font_face_reference2.unsafe_as(Proc(LibC::LPWSTR, FILETIME*, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference*, HRESULT)).call(filepath, lastwritetime, faceindex, fontsimulations, fontfacereference)
  end
  def get_system_font_set(fontset : IDWriteFontSet*) : HRESULT
    @lpVtbl.value.get_system_font_set.unsafe_as(Proc(IDWriteFontSet*, HRESULT)).call(fontset)
  end
  def create_font_set_builder(fontsetbuilder : IDWriteFontSetBuilder*) : HRESULT
    @lpVtbl.value.create_font_set_builder.unsafe_as(Proc(IDWriteFontSetBuilder*, HRESULT)).call(fontsetbuilder)
  end
  def create_font_collection_from_font_set(fontset : IDWriteFontSet, fontcollection : IDWriteFontCollection1*) : HRESULT
    @lpVtbl.value.create_font_collection_from_font_set.unsafe_as(Proc(IDWriteFontSet, IDWriteFontCollection1*, HRESULT)).call(fontset, fontcollection)
  end
  def get_system_font_collection2(includedownloadablefonts : LibC::BOOL, fontcollection : IDWriteFontCollection1*, checkforupdates : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_system_font_collection2.unsafe_as(Proc(LibC::BOOL, IDWriteFontCollection1*, LibC::BOOL, HRESULT)).call(includedownloadablefonts, fontcollection, checkforupdates)
  end
  def get_font_download_queue(fontdownloadqueue : IDWriteFontDownloadQueue*) : HRESULT
    @lpVtbl.value.get_font_download_queue.unsafe_as(Proc(IDWriteFontDownloadQueue*, HRESULT)).call(fontdownloadqueue)
  end
end
struct LibWin32::IDWriteFontSet
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_font_count : UInt32
    @lpVtbl.value.get_font_count.unsafe_as(Proc(UInt32)).call
  end
  def get_font_face_reference(listindex : UInt32, fontfacereference : IDWriteFontFaceReference*) : HRESULT
    @lpVtbl.value.get_font_face_reference.unsafe_as(Proc(UInt32, IDWriteFontFaceReference*, HRESULT)).call(listindex, fontfacereference)
  end
  def find_font_face_reference(fontfacereference : IDWriteFontFaceReference, listindex : UInt32*, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.find_font_face_reference.unsafe_as(Proc(IDWriteFontFaceReference, UInt32*, LibC::BOOL*, HRESULT)).call(fontfacereference, listindex, exists)
  end
  def find_font_face(fontface : IDWriteFontFace, listindex : UInt32*, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.find_font_face.unsafe_as(Proc(IDWriteFontFace, UInt32*, LibC::BOOL*, HRESULT)).call(fontface, listindex, exists)
  end
  def get_property_values(propertyid : DWRITE_FONT_PROPERTY_ID, values : IDWriteStringList*) : HRESULT
    @lpVtbl.value.get_property_values.unsafe_as(Proc(DWRITE_FONT_PROPERTY_ID, IDWriteStringList*, HRESULT)).call(propertyid, values)
  end
  def get_property_values2(propertyid : DWRITE_FONT_PROPERTY_ID, preferredlocalenames : LibC::LPWSTR, values : IDWriteStringList*) : HRESULT
    @lpVtbl.value.get_property_values2.unsafe_as(Proc(DWRITE_FONT_PROPERTY_ID, LibC::LPWSTR, IDWriteStringList*, HRESULT)).call(propertyid, preferredlocalenames, values)
  end
  def get_property_values3(listindex : UInt32, propertyid : DWRITE_FONT_PROPERTY_ID, exists : LibC::BOOL*, values : IDWriteLocalizedStrings*) : HRESULT
    @lpVtbl.value.get_property_values3.unsafe_as(Proc(UInt32, DWRITE_FONT_PROPERTY_ID, LibC::BOOL*, IDWriteLocalizedStrings*, HRESULT)).call(listindex, propertyid, exists, values)
  end
  def get_property_occurrence_count(property : DWRITE_FONT_PROPERTY*, propertyoccurrencecount : UInt32*) : HRESULT
    @lpVtbl.value.get_property_occurrence_count.unsafe_as(Proc(DWRITE_FONT_PROPERTY*, UInt32*, HRESULT)).call(property, propertyoccurrencecount)
  end
  def get_matching_fonts(familyname : LibC::LPWSTR, fontweight : DWRITE_FONT_WEIGHT, fontstretch : DWRITE_FONT_STRETCH, fontstyle : DWRITE_FONT_STYLE, filteredset : IDWriteFontSet*) : HRESULT
    @lpVtbl.value.get_matching_fonts.unsafe_as(Proc(LibC::LPWSTR, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFontSet*, HRESULT)).call(familyname, fontweight, fontstretch, fontstyle, filteredset)
  end
  def get_matching_fonts2(properties : DWRITE_FONT_PROPERTY*, propertycount : UInt32, filteredset : IDWriteFontSet*) : HRESULT
    @lpVtbl.value.get_matching_fonts2.unsafe_as(Proc(DWRITE_FONT_PROPERTY*, UInt32, IDWriteFontSet*, HRESULT)).call(properties, propertycount, filteredset)
  end
end
struct LibWin32::IDWriteFontSetBuilder
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def add_font_face_reference(fontfacereference : IDWriteFontFaceReference, properties : DWRITE_FONT_PROPERTY*, propertycount : UInt32) : HRESULT
    @lpVtbl.value.add_font_face_reference.unsafe_as(Proc(IDWriteFontFaceReference, DWRITE_FONT_PROPERTY*, UInt32, HRESULT)).call(fontfacereference, properties, propertycount)
  end
  def add_font_face_reference2(fontfacereference : IDWriteFontFaceReference) : HRESULT
    @lpVtbl.value.add_font_face_reference2.unsafe_as(Proc(IDWriteFontFaceReference, HRESULT)).call(fontfacereference)
  end
  def add_font_set(fontset : IDWriteFontSet) : HRESULT
    @lpVtbl.value.add_font_set.unsafe_as(Proc(IDWriteFontSet, HRESULT)).call(fontset)
  end
  def create_font_set(fontset : IDWriteFontSet*) : HRESULT
    @lpVtbl.value.create_font_set.unsafe_as(Proc(IDWriteFontSet*, HRESULT)).call(fontset)
  end
end
struct LibWin32::IDWriteFontCollection1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_font_family_count : UInt32
    @lpVtbl.value.get_font_family_count.unsafe_as(Proc(UInt32)).call
  end
  def get_font_family(index : UInt32, fontfamily : IDWriteFontFamily*) : HRESULT
    @lpVtbl.value.get_font_family.unsafe_as(Proc(UInt32, IDWriteFontFamily*, HRESULT)).call(index, fontfamily)
  end
  def find_family_name(familyname : LibC::LPWSTR, index : UInt32*, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.find_family_name.unsafe_as(Proc(LibC::LPWSTR, UInt32*, LibC::BOOL*, HRESULT)).call(familyname, index, exists)
  end
  def get_font_from_font_face(fontface : IDWriteFontFace, font : IDWriteFont*) : HRESULT
    @lpVtbl.value.get_font_from_font_face.unsafe_as(Proc(IDWriteFontFace, IDWriteFont*, HRESULT)).call(fontface, font)
  end
  def get_font_set(fontset : IDWriteFontSet*) : HRESULT
    @lpVtbl.value.get_font_set.unsafe_as(Proc(IDWriteFontSet*, HRESULT)).call(fontset)
  end
  def get_font_family2(index : UInt32, fontfamily : IDWriteFontFamily1*) : HRESULT
    @lpVtbl.value.get_font_family2.unsafe_as(Proc(UInt32, IDWriteFontFamily1*, HRESULT)).call(index, fontfamily)
  end
end
struct LibWin32::IDWriteFontFamily1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_font_collection(fontcollection : IDWriteFontCollection*) : HRESULT
    @lpVtbl.value.get_font_collection.unsafe_as(Proc(IDWriteFontCollection*, HRESULT)).call(fontcollection)
  end
  def get_font_count : UInt32
    @lpVtbl.value.get_font_count.unsafe_as(Proc(UInt32)).call
  end
  def get_font(index : UInt32, font : IDWriteFont*) : HRESULT
    @lpVtbl.value.get_font.unsafe_as(Proc(UInt32, IDWriteFont*, HRESULT)).call(index, font)
  end
  def get_family_names(names : IDWriteLocalizedStrings*) : HRESULT
    @lpVtbl.value.get_family_names.unsafe_as(Proc(IDWriteLocalizedStrings*, HRESULT)).call(names)
  end
  def get_first_matching_font(weight : DWRITE_FONT_WEIGHT, stretch : DWRITE_FONT_STRETCH, style : DWRITE_FONT_STYLE, matchingfont : IDWriteFont*) : HRESULT
    @lpVtbl.value.get_first_matching_font.unsafe_as(Proc(DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFont*, HRESULT)).call(weight, stretch, style, matchingfont)
  end
  def get_matching_fonts(weight : DWRITE_FONT_WEIGHT, stretch : DWRITE_FONT_STRETCH, style : DWRITE_FONT_STYLE, matchingfonts : IDWriteFontList*) : HRESULT
    @lpVtbl.value.get_matching_fonts.unsafe_as(Proc(DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFontList*, HRESULT)).call(weight, stretch, style, matchingfonts)
  end
  def get_font_locality(listindex : UInt32) : DWRITE_LOCALITY
    @lpVtbl.value.get_font_locality.unsafe_as(Proc(UInt32, DWRITE_LOCALITY)).call(listindex)
  end
  def get_font2(listindex : UInt32, font : IDWriteFont3*) : HRESULT
    @lpVtbl.value.get_font2.unsafe_as(Proc(UInt32, IDWriteFont3*, HRESULT)).call(listindex, font)
  end
  def get_font_face_reference(listindex : UInt32, fontfacereference : IDWriteFontFaceReference*) : HRESULT
    @lpVtbl.value.get_font_face_reference.unsafe_as(Proc(UInt32, IDWriteFontFaceReference*, HRESULT)).call(listindex, fontfacereference)
  end
end
struct LibWin32::IDWriteFontList1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_font_collection(fontcollection : IDWriteFontCollection*) : HRESULT
    @lpVtbl.value.get_font_collection.unsafe_as(Proc(IDWriteFontCollection*, HRESULT)).call(fontcollection)
  end
  def get_font_count : UInt32
    @lpVtbl.value.get_font_count.unsafe_as(Proc(UInt32)).call
  end
  def get_font(index : UInt32, font : IDWriteFont*) : HRESULT
    @lpVtbl.value.get_font.unsafe_as(Proc(UInt32, IDWriteFont*, HRESULT)).call(index, font)
  end
  def get_font_locality(listindex : UInt32) : DWRITE_LOCALITY
    @lpVtbl.value.get_font_locality.unsafe_as(Proc(UInt32, DWRITE_LOCALITY)).call(listindex)
  end
  def get_font2(listindex : UInt32, font : IDWriteFont3*) : HRESULT
    @lpVtbl.value.get_font2.unsafe_as(Proc(UInt32, IDWriteFont3*, HRESULT)).call(listindex, font)
  end
  def get_font_face_reference(listindex : UInt32, fontfacereference : IDWriteFontFaceReference*) : HRESULT
    @lpVtbl.value.get_font_face_reference.unsafe_as(Proc(UInt32, IDWriteFontFaceReference*, HRESULT)).call(listindex, fontfacereference)
  end
end
struct LibWin32::IDWriteFontFaceReference
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def create_font_face(fontface : IDWriteFontFace3*) : HRESULT
    @lpVtbl.value.create_font_face.unsafe_as(Proc(IDWriteFontFace3*, HRESULT)).call(fontface)
  end
  def create_font_face_with_simulations(fontfacesimulationflags : DWRITE_FONT_SIMULATIONS, fontface : IDWriteFontFace3*) : HRESULT
    @lpVtbl.value.create_font_face_with_simulations.unsafe_as(Proc(DWRITE_FONT_SIMULATIONS, IDWriteFontFace3*, HRESULT)).call(fontfacesimulationflags, fontface)
  end
  def equals(fontfacereference : IDWriteFontFaceReference) : LibC::BOOL
    @lpVtbl.value.equals.unsafe_as(Proc(IDWriteFontFaceReference, LibC::BOOL)).call(fontfacereference)
  end
  def get_font_face_index : UInt32
    @lpVtbl.value.get_font_face_index.unsafe_as(Proc(UInt32)).call
  end
  def get_simulations : DWRITE_FONT_SIMULATIONS
    @lpVtbl.value.get_simulations.unsafe_as(Proc(DWRITE_FONT_SIMULATIONS)).call
  end
  def get_font_file(fontfile : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.get_font_file.unsafe_as(Proc(IDWriteFontFile*, HRESULT)).call(fontfile)
  end
  def get_local_file_size : UInt64
    @lpVtbl.value.get_local_file_size.unsafe_as(Proc(UInt64)).call
  end
  def get_file_size : UInt64
    @lpVtbl.value.get_file_size.unsafe_as(Proc(UInt64)).call
  end
  def get_file_time(lastwritetime : FILETIME*) : HRESULT
    @lpVtbl.value.get_file_time.unsafe_as(Proc(FILETIME*, HRESULT)).call(lastwritetime)
  end
  def get_locality : DWRITE_LOCALITY
    @lpVtbl.value.get_locality.unsafe_as(Proc(DWRITE_LOCALITY)).call
  end
  def enqueue_font_download_request : HRESULT
    @lpVtbl.value.enqueue_font_download_request.unsafe_as(Proc(HRESULT)).call
  end
  def enqueue_character_download_request(characters : Char*, charactercount : UInt32) : HRESULT
    @lpVtbl.value.enqueue_character_download_request.unsafe_as(Proc(Char*, UInt32, HRESULT)).call(characters, charactercount)
  end
  def enqueue_glyph_download_request(glyphindices : UInt16*, glyphcount : UInt32) : HRESULT
    @lpVtbl.value.enqueue_glyph_download_request.unsafe_as(Proc(UInt16*, UInt32, HRESULT)).call(glyphindices, glyphcount)
  end
  def enqueue_file_fragment_download_request(fileoffset : UInt64, fragmentsize : UInt64) : HRESULT
    @lpVtbl.value.enqueue_file_fragment_download_request.unsafe_as(Proc(UInt64, UInt64, HRESULT)).call(fileoffset, fragmentsize)
  end
end
struct LibWin32::IDWriteFont3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_font_family(fontfamily : IDWriteFontFamily*) : HRESULT
    @lpVtbl.value.get_font_family.unsafe_as(Proc(IDWriteFontFamily*, HRESULT)).call(fontfamily)
  end
  def get_weight : DWRITE_FONT_WEIGHT
    @lpVtbl.value.get_weight.unsafe_as(Proc(DWRITE_FONT_WEIGHT)).call
  end
  def get_stretch : DWRITE_FONT_STRETCH
    @lpVtbl.value.get_stretch.unsafe_as(Proc(DWRITE_FONT_STRETCH)).call
  end
  def get_style : DWRITE_FONT_STYLE
    @lpVtbl.value.get_style.unsafe_as(Proc(DWRITE_FONT_STYLE)).call
  end
  def is_symbol_font : LibC::BOOL
    @lpVtbl.value.is_symbol_font.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_face_names(names : IDWriteLocalizedStrings*) : HRESULT
    @lpVtbl.value.get_face_names.unsafe_as(Proc(IDWriteLocalizedStrings*, HRESULT)).call(names)
  end
  def get_informational_strings(informationalstringid : DWRITE_INFORMATIONAL_STRING_ID, informationalstrings : IDWriteLocalizedStrings*, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_informational_strings.unsafe_as(Proc(DWRITE_INFORMATIONAL_STRING_ID, IDWriteLocalizedStrings*, LibC::BOOL*, HRESULT)).call(informationalstringid, informationalstrings, exists)
  end
  def get_simulations : DWRITE_FONT_SIMULATIONS
    @lpVtbl.value.get_simulations.unsafe_as(Proc(DWRITE_FONT_SIMULATIONS)).call
  end
  def get_metrics(fontmetrics : DWRITE_FONT_METRICS*) : Void
    @lpVtbl.value.get_metrics.unsafe_as(Proc(DWRITE_FONT_METRICS*, Void)).call(fontmetrics)
  end
  def has_character(unicodevalue : UInt32, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.has_character.unsafe_as(Proc(UInt32, LibC::BOOL*, HRESULT)).call(unicodevalue, exists)
  end
  def create_font_face(fontface : IDWriteFontFace*) : HRESULT
    @lpVtbl.value.create_font_face.unsafe_as(Proc(IDWriteFontFace*, HRESULT)).call(fontface)
  end
  def get_metrics2(fontmetrics : DWRITE_FONT_METRICS1*) : Void
    @lpVtbl.value.get_metrics2.unsafe_as(Proc(DWRITE_FONT_METRICS1*, Void)).call(fontmetrics)
  end
  def get_panose(panose : DWRITE_PANOSE*) : Void
    @lpVtbl.value.get_panose.unsafe_as(Proc(DWRITE_PANOSE*, Void)).call(panose)
  end
  def get_unicode_ranges(maxrangecount : UInt32, unicoderanges : DWRITE_UNICODE_RANGE*, actualrangecount : UInt32*) : HRESULT
    @lpVtbl.value.get_unicode_ranges.unsafe_as(Proc(UInt32, DWRITE_UNICODE_RANGE*, UInt32*, HRESULT)).call(maxrangecount, unicoderanges, actualrangecount)
  end
  def is_monospaced_font : LibC::BOOL
    @lpVtbl.value.is_monospaced_font.unsafe_as(Proc(LibC::BOOL)).call
  end
  def is_color_font : LibC::BOOL
    @lpVtbl.value.is_color_font.unsafe_as(Proc(LibC::BOOL)).call
  end
  def create_font_face2(fontface : IDWriteFontFace3*) : HRESULT
    @lpVtbl.value.create_font_face2.unsafe_as(Proc(IDWriteFontFace3*, HRESULT)).call(fontface)
  end
  def equals(font : IDWriteFont) : LibC::BOOL
    @lpVtbl.value.equals.unsafe_as(Proc(IDWriteFont, LibC::BOOL)).call(font)
  end
  def get_font_face_reference(fontfacereference : IDWriteFontFaceReference*) : HRESULT
    @lpVtbl.value.get_font_face_reference.unsafe_as(Proc(IDWriteFontFaceReference*, HRESULT)).call(fontfacereference)
  end
  def has_character2(unicodevalue : UInt32) : LibC::BOOL
    @lpVtbl.value.has_character2.unsafe_as(Proc(UInt32, LibC::BOOL)).call(unicodevalue)
  end
  def get_locality : DWRITE_LOCALITY
    @lpVtbl.value.get_locality.unsafe_as(Proc(DWRITE_LOCALITY)).call
  end
end
struct LibWin32::IDWriteFontFace3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type : DWRITE_FONT_FACE_TYPE
    @lpVtbl.value.get_type.unsafe_as(Proc(DWRITE_FONT_FACE_TYPE)).call
  end
  def get_files(numberoffiles : UInt32*, fontfiles : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.get_files.unsafe_as(Proc(UInt32*, IDWriteFontFile*, HRESULT)).call(numberoffiles, fontfiles)
  end
  def get_index : UInt32
    @lpVtbl.value.get_index.unsafe_as(Proc(UInt32)).call
  end
  def get_simulations : DWRITE_FONT_SIMULATIONS
    @lpVtbl.value.get_simulations.unsafe_as(Proc(DWRITE_FONT_SIMULATIONS)).call
  end
  def is_symbol_font : LibC::BOOL
    @lpVtbl.value.is_symbol_font.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_metrics(fontfacemetrics : DWRITE_FONT_METRICS*) : Void
    @lpVtbl.value.get_metrics.unsafe_as(Proc(DWRITE_FONT_METRICS*, Void)).call(fontfacemetrics)
  end
  def get_glyph_count : UInt16
    @lpVtbl.value.get_glyph_count.unsafe_as(Proc(UInt16)).call
  end
  def get_design_glyph_metrics(glyphindices : UInt16*, glyphcount : UInt32, glyphmetrics : DWRITE_GLYPH_METRICS*, issideways : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_design_glyph_metrics.unsafe_as(Proc(UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)).call(glyphindices, glyphcount, glyphmetrics, issideways)
  end
  def get_glyph_indices(codepoints : UInt32*, codepointcount : UInt32, glyphindices : UInt16*) : HRESULT
    @lpVtbl.value.get_glyph_indices.unsafe_as(Proc(UInt32*, UInt32, UInt16*, HRESULT)).call(codepoints, codepointcount, glyphindices)
  end
  def try_get_font_table(opentypetabletag : UInt32, tabledata : Void**, tablesize : UInt32*, tablecontext : Void**, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.try_get_font_table.unsafe_as(Proc(UInt32, Void**, UInt32*, Void**, LibC::BOOL*, HRESULT)).call(opentypetabletag, tabledata, tablesize, tablecontext, exists)
  end
  def release_font_table(tablecontext : Void*) : Void
    @lpVtbl.value.release_font_table.unsafe_as(Proc(Void*, Void)).call(tablecontext)
  end
  def get_glyph_run_outline(emsize : Float32, glyphindices : UInt16*, glyphadvances : Float32*, glyphoffsets : DWRITE_GLYPH_OFFSET*, glyphcount : UInt32, issideways : LibC::BOOL, isrighttoleft : LibC::BOOL, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.get_glyph_run_outline.unsafe_as(Proc(Float32, UInt16*, Float32*, DWRITE_GLYPH_OFFSET*, UInt32, LibC::BOOL, LibC::BOOL, ID2D1SimplifiedGeometrySink, HRESULT)).call(emsize, glyphindices, glyphadvances, glyphoffsets, glyphcount, issideways, isrighttoleft, geometrysink)
  end
  def get_recommended_rendering_mode(emsize : Float32, pixelsperdip : Float32, measuringmode : DWRITE_MEASURING_MODE, renderingparams : IDWriteRenderingParams, renderingmode : DWRITE_RENDERING_MODE*) : HRESULT
    @lpVtbl.value.get_recommended_rendering_mode.unsafe_as(Proc(Float32, Float32, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE*, HRESULT)).call(emsize, pixelsperdip, measuringmode, renderingparams, renderingmode)
  end
  def get_gdi_compatible_metrics(emsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, fontfacemetrics : DWRITE_FONT_METRICS*) : HRESULT
    @lpVtbl.value.get_gdi_compatible_metrics.unsafe_as(Proc(Float32, Float32, DWRITE_MATRIX*, DWRITE_FONT_METRICS*, HRESULT)).call(emsize, pixelsperdip, transform, fontfacemetrics)
  end
  def get_gdi_compatible_glyph_metrics(emsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, usegdinatural : LibC::BOOL, glyphindices : UInt16*, glyphcount : UInt32, glyphmetrics : DWRITE_GLYPH_METRICS*, issideways : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_gdi_compatible_glyph_metrics.unsafe_as(Proc(Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)).call(emsize, pixelsperdip, transform, usegdinatural, glyphindices, glyphcount, glyphmetrics, issideways)
  end
  def get_metrics2(fontmetrics : DWRITE_FONT_METRICS1*) : Void
    @lpVtbl.value.get_metrics2.unsafe_as(Proc(DWRITE_FONT_METRICS1*, Void)).call(fontmetrics)
  end
  def get_gdi_compatible_metrics2(emsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, fontmetrics : DWRITE_FONT_METRICS1*) : HRESULT
    @lpVtbl.value.get_gdi_compatible_metrics2.unsafe_as(Proc(Float32, Float32, DWRITE_MATRIX*, DWRITE_FONT_METRICS1*, HRESULT)).call(emsize, pixelsperdip, transform, fontmetrics)
  end
  def get_caret_metrics(caretmetrics : DWRITE_CARET_METRICS*) : Void
    @lpVtbl.value.get_caret_metrics.unsafe_as(Proc(DWRITE_CARET_METRICS*, Void)).call(caretmetrics)
  end
  def get_unicode_ranges(maxrangecount : UInt32, unicoderanges : DWRITE_UNICODE_RANGE*, actualrangecount : UInt32*) : HRESULT
    @lpVtbl.value.get_unicode_ranges.unsafe_as(Proc(UInt32, DWRITE_UNICODE_RANGE*, UInt32*, HRESULT)).call(maxrangecount, unicoderanges, actualrangecount)
  end
  def is_monospaced_font : LibC::BOOL
    @lpVtbl.value.is_monospaced_font.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_design_glyph_advances(glyphcount : UInt32, glyphindices : UInt16*, glyphadvances : Int32*, issideways : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_design_glyph_advances.unsafe_as(Proc(UInt32, UInt16*, Int32*, LibC::BOOL, HRESULT)).call(glyphcount, glyphindices, glyphadvances, issideways)
  end
  def get_gdi_compatible_glyph_advances(emsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, usegdinatural : LibC::BOOL, issideways : LibC::BOOL, glyphcount : UInt32, glyphindices : UInt16*, glyphadvances : Int32*) : HRESULT
    @lpVtbl.value.get_gdi_compatible_glyph_advances.unsafe_as(Proc(Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, LibC::BOOL, UInt32, UInt16*, Int32*, HRESULT)).call(emsize, pixelsperdip, transform, usegdinatural, issideways, glyphcount, glyphindices, glyphadvances)
  end
  def get_kerning_pair_adjustments(glyphcount : UInt32, glyphindices : UInt16*, glyphadvanceadjustments : Int32*) : HRESULT
    @lpVtbl.value.get_kerning_pair_adjustments.unsafe_as(Proc(UInt32, UInt16*, Int32*, HRESULT)).call(glyphcount, glyphindices, glyphadvanceadjustments)
  end
  def has_kerning_pairs : LibC::BOOL
    @lpVtbl.value.has_kerning_pairs.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_recommended_rendering_mode2(fontemsize : Float32, dpix : Float32, dpiy : Float32, transform : DWRITE_MATRIX*, issideways : LibC::BOOL, outlinethreshold : DWRITE_OUTLINE_THRESHOLD, measuringmode : DWRITE_MEASURING_MODE, renderingmode : DWRITE_RENDERING_MODE*) : HRESULT
    @lpVtbl.value.get_recommended_rendering_mode2.unsafe_as(Proc(Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, DWRITE_RENDERING_MODE*, HRESULT)).call(fontemsize, dpix, dpiy, transform, issideways, outlinethreshold, measuringmode, renderingmode)
  end
  def get_vertical_glyph_variants(glyphcount : UInt32, nominalglyphindices : UInt16*, verticalglyphindices : UInt16*) : HRESULT
    @lpVtbl.value.get_vertical_glyph_variants.unsafe_as(Proc(UInt32, UInt16*, UInt16*, HRESULT)).call(glyphcount, nominalglyphindices, verticalglyphindices)
  end
  def has_vertical_glyph_variants : LibC::BOOL
    @lpVtbl.value.has_vertical_glyph_variants.unsafe_as(Proc(LibC::BOOL)).call
  end
  def is_color_font : LibC::BOOL
    @lpVtbl.value.is_color_font.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_color_palette_count : UInt32
    @lpVtbl.value.get_color_palette_count.unsafe_as(Proc(UInt32)).call
  end
  def get_palette_entry_count : UInt32
    @lpVtbl.value.get_palette_entry_count.unsafe_as(Proc(UInt32)).call
  end
  def get_palette_entries(colorpaletteindex : UInt32, firstentryindex : UInt32, entrycount : UInt32, paletteentries : DWRITE_COLOR_F*) : HRESULT
    @lpVtbl.value.get_palette_entries.unsafe_as(Proc(UInt32, UInt32, UInt32, DWRITE_COLOR_F*, HRESULT)).call(colorpaletteindex, firstentryindex, entrycount, paletteentries)
  end
  def get_recommended_rendering_mode3(fontemsize : Float32, dpix : Float32, dpiy : Float32, transform : DWRITE_MATRIX*, issideways : LibC::BOOL, outlinethreshold : DWRITE_OUTLINE_THRESHOLD, measuringmode : DWRITE_MEASURING_MODE, renderingparams : IDWriteRenderingParams, renderingmode : DWRITE_RENDERING_MODE*, gridfitmode : DWRITE_GRID_FIT_MODE*) : HRESULT
    @lpVtbl.value.get_recommended_rendering_mode3.unsafe_as(Proc(Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE*, DWRITE_GRID_FIT_MODE*, HRESULT)).call(fontemsize, dpix, dpiy, transform, issideways, outlinethreshold, measuringmode, renderingparams, renderingmode, gridfitmode)
  end
  def get_font_face_reference(fontfacereference : IDWriteFontFaceReference*) : HRESULT
    @lpVtbl.value.get_font_face_reference.unsafe_as(Proc(IDWriteFontFaceReference*, HRESULT)).call(fontfacereference)
  end
  def get_panose(panose : DWRITE_PANOSE*) : Void
    @lpVtbl.value.get_panose.unsafe_as(Proc(DWRITE_PANOSE*, Void)).call(panose)
  end
  def get_weight : DWRITE_FONT_WEIGHT
    @lpVtbl.value.get_weight.unsafe_as(Proc(DWRITE_FONT_WEIGHT)).call
  end
  def get_stretch : DWRITE_FONT_STRETCH
    @lpVtbl.value.get_stretch.unsafe_as(Proc(DWRITE_FONT_STRETCH)).call
  end
  def get_style : DWRITE_FONT_STYLE
    @lpVtbl.value.get_style.unsafe_as(Proc(DWRITE_FONT_STYLE)).call
  end
  def get_family_names(names : IDWriteLocalizedStrings*) : HRESULT
    @lpVtbl.value.get_family_names.unsafe_as(Proc(IDWriteLocalizedStrings*, HRESULT)).call(names)
  end
  def get_face_names(names : IDWriteLocalizedStrings*) : HRESULT
    @lpVtbl.value.get_face_names.unsafe_as(Proc(IDWriteLocalizedStrings*, HRESULT)).call(names)
  end
  def get_informational_strings(informationalstringid : DWRITE_INFORMATIONAL_STRING_ID, informationalstrings : IDWriteLocalizedStrings*, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_informational_strings.unsafe_as(Proc(DWRITE_INFORMATIONAL_STRING_ID, IDWriteLocalizedStrings*, LibC::BOOL*, HRESULT)).call(informationalstringid, informationalstrings, exists)
  end
  def has_character(unicodevalue : UInt32) : LibC::BOOL
    @lpVtbl.value.has_character.unsafe_as(Proc(UInt32, LibC::BOOL)).call(unicodevalue)
  end
  def get_recommended_rendering_mode4(fontemsize : Float32, dpix : Float32, dpiy : Float32, transform : DWRITE_MATRIX*, issideways : LibC::BOOL, outlinethreshold : DWRITE_OUTLINE_THRESHOLD, measuringmode : DWRITE_MEASURING_MODE, renderingparams : IDWriteRenderingParams, renderingmode : DWRITE_RENDERING_MODE1*, gridfitmode : DWRITE_GRID_FIT_MODE*) : HRESULT
    @lpVtbl.value.get_recommended_rendering_mode4.unsafe_as(Proc(Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE1*, DWRITE_GRID_FIT_MODE*, HRESULT)).call(fontemsize, dpix, dpiy, transform, issideways, outlinethreshold, measuringmode, renderingparams, renderingmode, gridfitmode)
  end
  def is_character_local(unicodevalue : UInt32) : LibC::BOOL
    @lpVtbl.value.is_character_local.unsafe_as(Proc(UInt32, LibC::BOOL)).call(unicodevalue)
  end
  def is_glyph_local(glyphid : UInt16) : LibC::BOOL
    @lpVtbl.value.is_glyph_local.unsafe_as(Proc(UInt16, LibC::BOOL)).call(glyphid)
  end
  def are_characters_local(characters : Char*, charactercount : UInt32, enqueueifnotlocal : LibC::BOOL, islocal : LibC::BOOL*) : HRESULT
    @lpVtbl.value.are_characters_local.unsafe_as(Proc(Char*, UInt32, LibC::BOOL, LibC::BOOL*, HRESULT)).call(characters, charactercount, enqueueifnotlocal, islocal)
  end
  def are_glyphs_local(glyphindices : UInt16*, glyphcount : UInt32, enqueueifnotlocal : LibC::BOOL, islocal : LibC::BOOL*) : HRESULT
    @lpVtbl.value.are_glyphs_local.unsafe_as(Proc(UInt16*, UInt32, LibC::BOOL, LibC::BOOL*, HRESULT)).call(glyphindices, glyphcount, enqueueifnotlocal, islocal)
  end
end
struct LibWin32::IDWriteStringList
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_count : UInt32
    @lpVtbl.value.get_count.unsafe_as(Proc(UInt32)).call
  end
  def get_locale_name_length(listindex : UInt32, length : UInt32*) : HRESULT
    @lpVtbl.value.get_locale_name_length.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(listindex, length)
  end
  def get_locale_name(listindex : UInt32, localename : Char*, size : UInt32) : HRESULT
    @lpVtbl.value.get_locale_name.unsafe_as(Proc(UInt32, Char*, UInt32, HRESULT)).call(listindex, localename, size)
  end
  def get_string_length(listindex : UInt32, length : UInt32*) : HRESULT
    @lpVtbl.value.get_string_length.unsafe_as(Proc(UInt32, UInt32*, HRESULT)).call(listindex, length)
  end
  def get_string(listindex : UInt32, stringbuffer : Char*, stringbuffersize : UInt32) : HRESULT
    @lpVtbl.value.get_string.unsafe_as(Proc(UInt32, Char*, UInt32, HRESULT)).call(listindex, stringbuffer, stringbuffersize)
  end
end
struct LibWin32::IDWriteFontDownloadListener
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def download_completed(downloadqueue : IDWriteFontDownloadQueue, context : IUnknown, downloadresult : HRESULT) : Void
    @lpVtbl.value.download_completed.unsafe_as(Proc(IDWriteFontDownloadQueue, IUnknown, HRESULT, Void)).call(downloadqueue, context, downloadresult)
  end
end
struct LibWin32::IDWriteFontDownloadQueue
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def add_listener(listener : IDWriteFontDownloadListener, token : UInt32*) : HRESULT
    @lpVtbl.value.add_listener.unsafe_as(Proc(IDWriteFontDownloadListener, UInt32*, HRESULT)).call(listener, token)
  end
  def remove_listener(token : UInt32) : HRESULT
    @lpVtbl.value.remove_listener.unsafe_as(Proc(UInt32, HRESULT)).call(token)
  end
  def is_empty : LibC::BOOL
    @lpVtbl.value.is_empty.unsafe_as(Proc(LibC::BOOL)).call
  end
  def begin_download(context : IUnknown) : HRESULT
    @lpVtbl.value.begin_download.unsafe_as(Proc(IUnknown, HRESULT)).call(context)
  end
  def cancel_download : HRESULT
    @lpVtbl.value.cancel_download.unsafe_as(Proc(HRESULT)).call
  end
  def get_generation_count : UInt64
    @lpVtbl.value.get_generation_count.unsafe_as(Proc(UInt64)).call
  end
end
struct LibWin32::IDWriteGdiInterop1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def create_font_from_logfont(logfont : LOGFONTW*, font : IDWriteFont*) : HRESULT
    @lpVtbl.value.create_font_from_logfont.unsafe_as(Proc(LOGFONTW*, IDWriteFont*, HRESULT)).call(logfont, font)
  end
  def convert_font_to_logfont(font : IDWriteFont, logfont : LOGFONTW*, issystemfont : LibC::BOOL*) : HRESULT
    @lpVtbl.value.convert_font_to_logfont.unsafe_as(Proc(IDWriteFont, LOGFONTW*, LibC::BOOL*, HRESULT)).call(font, logfont, issystemfont)
  end
  def convert_font_face_to_logfont(font : IDWriteFontFace, logfont : LOGFONTW*) : HRESULT
    @lpVtbl.value.convert_font_face_to_logfont.unsafe_as(Proc(IDWriteFontFace, LOGFONTW*, HRESULT)).call(font, logfont)
  end
  def create_font_face_from_hdc(hdc : HDC, fontface : IDWriteFontFace*) : HRESULT
    @lpVtbl.value.create_font_face_from_hdc.unsafe_as(Proc(HDC, IDWriteFontFace*, HRESULT)).call(hdc, fontface)
  end
  def create_bitmap_render_target(hdc : HDC, width : UInt32, height : UInt32, rendertarget : IDWriteBitmapRenderTarget*) : HRESULT
    @lpVtbl.value.create_bitmap_render_target.unsafe_as(Proc(HDC, UInt32, UInt32, IDWriteBitmapRenderTarget*, HRESULT)).call(hdc, width, height, rendertarget)
  end
  def create_font_from_logfont2(logfont : LOGFONTW*, fontcollection : IDWriteFontCollection, font : IDWriteFont*) : HRESULT
    @lpVtbl.value.create_font_from_logfont2.unsafe_as(Proc(LOGFONTW*, IDWriteFontCollection, IDWriteFont*, HRESULT)).call(logfont, fontcollection, font)
  end
  def get_font_signature(fontface : IDWriteFontFace, fontsignature : FONTSIGNATURE*) : HRESULT
    @lpVtbl.value.get_font_signature.unsafe_as(Proc(IDWriteFontFace, FONTSIGNATURE*, HRESULT)).call(fontface, fontsignature)
  end
  def get_font_signature2(font : IDWriteFont, fontsignature : FONTSIGNATURE*) : HRESULT
    @lpVtbl.value.get_font_signature2.unsafe_as(Proc(IDWriteFont, FONTSIGNATURE*, HRESULT)).call(font, fontsignature)
  end
  def get_matching_fonts_by_logfont(logfont : LOGFONTA*, fontset : IDWriteFontSet, filteredset : IDWriteFontSet*) : HRESULT
    @lpVtbl.value.get_matching_fonts_by_logfont.unsafe_as(Proc(LOGFONTA*, IDWriteFontSet, IDWriteFontSet*, HRESULT)).call(logfont, fontset, filteredset)
  end
end
struct LibWin32::IDWriteTextFormat2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_text_alignment(textalignment : DWRITE_TEXT_ALIGNMENT) : HRESULT
    @lpVtbl.value.set_text_alignment.unsafe_as(Proc(DWRITE_TEXT_ALIGNMENT, HRESULT)).call(textalignment)
  end
  def set_paragraph_alignment(paragraphalignment : DWRITE_PARAGRAPH_ALIGNMENT) : HRESULT
    @lpVtbl.value.set_paragraph_alignment.unsafe_as(Proc(DWRITE_PARAGRAPH_ALIGNMENT, HRESULT)).call(paragraphalignment)
  end
  def set_word_wrapping(wordwrapping : DWRITE_WORD_WRAPPING) : HRESULT
    @lpVtbl.value.set_word_wrapping.unsafe_as(Proc(DWRITE_WORD_WRAPPING, HRESULT)).call(wordwrapping)
  end
  def set_reading_direction(readingdirection : DWRITE_READING_DIRECTION) : HRESULT
    @lpVtbl.value.set_reading_direction.unsafe_as(Proc(DWRITE_READING_DIRECTION, HRESULT)).call(readingdirection)
  end
  def set_flow_direction(flowdirection : DWRITE_FLOW_DIRECTION) : HRESULT
    @lpVtbl.value.set_flow_direction.unsafe_as(Proc(DWRITE_FLOW_DIRECTION, HRESULT)).call(flowdirection)
  end
  def set_incremental_tab_stop(incrementaltabstop : Float32) : HRESULT
    @lpVtbl.value.set_incremental_tab_stop.unsafe_as(Proc(Float32, HRESULT)).call(incrementaltabstop)
  end
  def set_trimming(trimmingoptions : DWRITE_TRIMMING*, trimmingsign : IDWriteInlineObject) : HRESULT
    @lpVtbl.value.set_trimming.unsafe_as(Proc(DWRITE_TRIMMING*, IDWriteInlineObject, HRESULT)).call(trimmingoptions, trimmingsign)
  end
  def set_line_spacing(linespacingmethod : DWRITE_LINE_SPACING_METHOD, linespacing : Float32, baseline : Float32) : HRESULT
    @lpVtbl.value.set_line_spacing.unsafe_as(Proc(DWRITE_LINE_SPACING_METHOD, Float32, Float32, HRESULT)).call(linespacingmethod, linespacing, baseline)
  end
  def get_text_alignment : DWRITE_TEXT_ALIGNMENT
    @lpVtbl.value.get_text_alignment.unsafe_as(Proc(DWRITE_TEXT_ALIGNMENT)).call
  end
  def get_paragraph_alignment : DWRITE_PARAGRAPH_ALIGNMENT
    @lpVtbl.value.get_paragraph_alignment.unsafe_as(Proc(DWRITE_PARAGRAPH_ALIGNMENT)).call
  end
  def get_word_wrapping : DWRITE_WORD_WRAPPING
    @lpVtbl.value.get_word_wrapping.unsafe_as(Proc(DWRITE_WORD_WRAPPING)).call
  end
  def get_reading_direction : DWRITE_READING_DIRECTION
    @lpVtbl.value.get_reading_direction.unsafe_as(Proc(DWRITE_READING_DIRECTION)).call
  end
  def get_flow_direction : DWRITE_FLOW_DIRECTION
    @lpVtbl.value.get_flow_direction.unsafe_as(Proc(DWRITE_FLOW_DIRECTION)).call
  end
  def get_incremental_tab_stop : Float32
    @lpVtbl.value.get_incremental_tab_stop.unsafe_as(Proc(Float32)).call
  end
  def get_trimming(trimmingoptions : DWRITE_TRIMMING*, trimmingsign : IDWriteInlineObject*) : HRESULT
    @lpVtbl.value.get_trimming.unsafe_as(Proc(DWRITE_TRIMMING*, IDWriteInlineObject*, HRESULT)).call(trimmingoptions, trimmingsign)
  end
  def get_line_spacing(linespacingmethod : DWRITE_LINE_SPACING_METHOD*, linespacing : Float32*, baseline : Float32*) : HRESULT
    @lpVtbl.value.get_line_spacing.unsafe_as(Proc(DWRITE_LINE_SPACING_METHOD*, Float32*, Float32*, HRESULT)).call(linespacingmethod, linespacing, baseline)
  end
  def get_font_collection(fontcollection : IDWriteFontCollection*) : HRESULT
    @lpVtbl.value.get_font_collection.unsafe_as(Proc(IDWriteFontCollection*, HRESULT)).call(fontcollection)
  end
  def get_font_family_name_length : UInt32
    @lpVtbl.value.get_font_family_name_length.unsafe_as(Proc(UInt32)).call
  end
  def get_font_family_name(fontfamilyname : Char*, namesize : UInt32) : HRESULT
    @lpVtbl.value.get_font_family_name.unsafe_as(Proc(Char*, UInt32, HRESULT)).call(fontfamilyname, namesize)
  end
  def get_font_weight : DWRITE_FONT_WEIGHT
    @lpVtbl.value.get_font_weight.unsafe_as(Proc(DWRITE_FONT_WEIGHT)).call
  end
  def get_font_style : DWRITE_FONT_STYLE
    @lpVtbl.value.get_font_style.unsafe_as(Proc(DWRITE_FONT_STYLE)).call
  end
  def get_font_stretch : DWRITE_FONT_STRETCH
    @lpVtbl.value.get_font_stretch.unsafe_as(Proc(DWRITE_FONT_STRETCH)).call
  end
  def get_font_size : Float32
    @lpVtbl.value.get_font_size.unsafe_as(Proc(Float32)).call
  end
  def get_locale_name_length : UInt32
    @lpVtbl.value.get_locale_name_length.unsafe_as(Proc(UInt32)).call
  end
  def get_locale_name(localename : Char*, namesize : UInt32) : HRESULT
    @lpVtbl.value.get_locale_name.unsafe_as(Proc(Char*, UInt32, HRESULT)).call(localename, namesize)
  end
  def set_vertical_glyph_orientation(glyphorientation : DWRITE_VERTICAL_GLYPH_ORIENTATION) : HRESULT
    @lpVtbl.value.set_vertical_glyph_orientation.unsafe_as(Proc(DWRITE_VERTICAL_GLYPH_ORIENTATION, HRESULT)).call(glyphorientation)
  end
  def get_vertical_glyph_orientation : DWRITE_VERTICAL_GLYPH_ORIENTATION
    @lpVtbl.value.get_vertical_glyph_orientation.unsafe_as(Proc(DWRITE_VERTICAL_GLYPH_ORIENTATION)).call
  end
  def set_last_line_wrapping(islastlinewrappingenabled : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_last_line_wrapping.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(islastlinewrappingenabled)
  end
  def get_last_line_wrapping : LibC::BOOL
    @lpVtbl.value.get_last_line_wrapping.unsafe_as(Proc(LibC::BOOL)).call
  end
  def set_optical_alignment(opticalalignment : DWRITE_OPTICAL_ALIGNMENT) : HRESULT
    @lpVtbl.value.set_optical_alignment.unsafe_as(Proc(DWRITE_OPTICAL_ALIGNMENT, HRESULT)).call(opticalalignment)
  end
  def get_optical_alignment : DWRITE_OPTICAL_ALIGNMENT
    @lpVtbl.value.get_optical_alignment.unsafe_as(Proc(DWRITE_OPTICAL_ALIGNMENT)).call
  end
  def set_font_fallback(fontfallback : IDWriteFontFallback) : HRESULT
    @lpVtbl.value.set_font_fallback.unsafe_as(Proc(IDWriteFontFallback, HRESULT)).call(fontfallback)
  end
  def get_font_fallback(fontfallback : IDWriteFontFallback*) : HRESULT
    @lpVtbl.value.get_font_fallback.unsafe_as(Proc(IDWriteFontFallback*, HRESULT)).call(fontfallback)
  end
  def set_line_spacing2(linespacingoptions : DWRITE_LINE_SPACING*) : HRESULT
    @lpVtbl.value.set_line_spacing2.unsafe_as(Proc(DWRITE_LINE_SPACING*, HRESULT)).call(linespacingoptions)
  end
  def get_line_spacing2(linespacingoptions : DWRITE_LINE_SPACING*) : HRESULT
    @lpVtbl.value.get_line_spacing2.unsafe_as(Proc(DWRITE_LINE_SPACING*, HRESULT)).call(linespacingoptions)
  end
end
struct LibWin32::IDWriteTextLayout3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_text_alignment(textalignment : DWRITE_TEXT_ALIGNMENT) : HRESULT
    @lpVtbl.value.set_text_alignment.unsafe_as(Proc(DWRITE_TEXT_ALIGNMENT, HRESULT)).call(textalignment)
  end
  def set_paragraph_alignment(paragraphalignment : DWRITE_PARAGRAPH_ALIGNMENT) : HRESULT
    @lpVtbl.value.set_paragraph_alignment.unsafe_as(Proc(DWRITE_PARAGRAPH_ALIGNMENT, HRESULT)).call(paragraphalignment)
  end
  def set_word_wrapping(wordwrapping : DWRITE_WORD_WRAPPING) : HRESULT
    @lpVtbl.value.set_word_wrapping.unsafe_as(Proc(DWRITE_WORD_WRAPPING, HRESULT)).call(wordwrapping)
  end
  def set_reading_direction(readingdirection : DWRITE_READING_DIRECTION) : HRESULT
    @lpVtbl.value.set_reading_direction.unsafe_as(Proc(DWRITE_READING_DIRECTION, HRESULT)).call(readingdirection)
  end
  def set_flow_direction(flowdirection : DWRITE_FLOW_DIRECTION) : HRESULT
    @lpVtbl.value.set_flow_direction.unsafe_as(Proc(DWRITE_FLOW_DIRECTION, HRESULT)).call(flowdirection)
  end
  def set_incremental_tab_stop(incrementaltabstop : Float32) : HRESULT
    @lpVtbl.value.set_incremental_tab_stop.unsafe_as(Proc(Float32, HRESULT)).call(incrementaltabstop)
  end
  def set_trimming(trimmingoptions : DWRITE_TRIMMING*, trimmingsign : IDWriteInlineObject) : HRESULT
    @lpVtbl.value.set_trimming.unsafe_as(Proc(DWRITE_TRIMMING*, IDWriteInlineObject, HRESULT)).call(trimmingoptions, trimmingsign)
  end
  def set_line_spacing(linespacingmethod : DWRITE_LINE_SPACING_METHOD, linespacing : Float32, baseline : Float32) : HRESULT
    @lpVtbl.value.set_line_spacing.unsafe_as(Proc(DWRITE_LINE_SPACING_METHOD, Float32, Float32, HRESULT)).call(linespacingmethod, linespacing, baseline)
  end
  def get_text_alignment : DWRITE_TEXT_ALIGNMENT
    @lpVtbl.value.get_text_alignment.unsafe_as(Proc(DWRITE_TEXT_ALIGNMENT)).call
  end
  def get_paragraph_alignment : DWRITE_PARAGRAPH_ALIGNMENT
    @lpVtbl.value.get_paragraph_alignment.unsafe_as(Proc(DWRITE_PARAGRAPH_ALIGNMENT)).call
  end
  def get_word_wrapping : DWRITE_WORD_WRAPPING
    @lpVtbl.value.get_word_wrapping.unsafe_as(Proc(DWRITE_WORD_WRAPPING)).call
  end
  def get_reading_direction : DWRITE_READING_DIRECTION
    @lpVtbl.value.get_reading_direction.unsafe_as(Proc(DWRITE_READING_DIRECTION)).call
  end
  def get_flow_direction : DWRITE_FLOW_DIRECTION
    @lpVtbl.value.get_flow_direction.unsafe_as(Proc(DWRITE_FLOW_DIRECTION)).call
  end
  def get_incremental_tab_stop : Float32
    @lpVtbl.value.get_incremental_tab_stop.unsafe_as(Proc(Float32)).call
  end
  def get_trimming(trimmingoptions : DWRITE_TRIMMING*, trimmingsign : IDWriteInlineObject*) : HRESULT
    @lpVtbl.value.get_trimming.unsafe_as(Proc(DWRITE_TRIMMING*, IDWriteInlineObject*, HRESULT)).call(trimmingoptions, trimmingsign)
  end
  def get_line_spacing(linespacingmethod : DWRITE_LINE_SPACING_METHOD*, linespacing : Float32*, baseline : Float32*) : HRESULT
    @lpVtbl.value.get_line_spacing.unsafe_as(Proc(DWRITE_LINE_SPACING_METHOD*, Float32*, Float32*, HRESULT)).call(linespacingmethod, linespacing, baseline)
  end
  def get_font_collection(fontcollection : IDWriteFontCollection*) : HRESULT
    @lpVtbl.value.get_font_collection.unsafe_as(Proc(IDWriteFontCollection*, HRESULT)).call(fontcollection)
  end
  def get_font_family_name_length : UInt32
    @lpVtbl.value.get_font_family_name_length.unsafe_as(Proc(UInt32)).call
  end
  def get_font_family_name(fontfamilyname : Char*, namesize : UInt32) : HRESULT
    @lpVtbl.value.get_font_family_name.unsafe_as(Proc(Char*, UInt32, HRESULT)).call(fontfamilyname, namesize)
  end
  def get_font_weight : DWRITE_FONT_WEIGHT
    @lpVtbl.value.get_font_weight.unsafe_as(Proc(DWRITE_FONT_WEIGHT)).call
  end
  def get_font_style : DWRITE_FONT_STYLE
    @lpVtbl.value.get_font_style.unsafe_as(Proc(DWRITE_FONT_STYLE)).call
  end
  def get_font_stretch : DWRITE_FONT_STRETCH
    @lpVtbl.value.get_font_stretch.unsafe_as(Proc(DWRITE_FONT_STRETCH)).call
  end
  def get_font_size : Float32
    @lpVtbl.value.get_font_size.unsafe_as(Proc(Float32)).call
  end
  def get_locale_name_length : UInt32
    @lpVtbl.value.get_locale_name_length.unsafe_as(Proc(UInt32)).call
  end
  def get_locale_name(localename : Char*, namesize : UInt32) : HRESULT
    @lpVtbl.value.get_locale_name.unsafe_as(Proc(Char*, UInt32, HRESULT)).call(localename, namesize)
  end
  def set_max_width(maxwidth : Float32) : HRESULT
    @lpVtbl.value.set_max_width.unsafe_as(Proc(Float32, HRESULT)).call(maxwidth)
  end
  def set_max_height(maxheight : Float32) : HRESULT
    @lpVtbl.value.set_max_height.unsafe_as(Proc(Float32, HRESULT)).call(maxheight)
  end
  def set_font_collection(fontcollection : IDWriteFontCollection, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_collection.unsafe_as(Proc(IDWriteFontCollection, DWRITE_TEXT_RANGE, HRESULT)).call(fontcollection, textrange)
  end
  def set_font_family_name(fontfamilyname : LibC::LPWSTR, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_family_name.unsafe_as(Proc(LibC::LPWSTR, DWRITE_TEXT_RANGE, HRESULT)).call(fontfamilyname, textrange)
  end
  def set_font_weight(fontweight : DWRITE_FONT_WEIGHT, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_weight.unsafe_as(Proc(DWRITE_FONT_WEIGHT, DWRITE_TEXT_RANGE, HRESULT)).call(fontweight, textrange)
  end
  def set_font_style(fontstyle : DWRITE_FONT_STYLE, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_style.unsafe_as(Proc(DWRITE_FONT_STYLE, DWRITE_TEXT_RANGE, HRESULT)).call(fontstyle, textrange)
  end
  def set_font_stretch(fontstretch : DWRITE_FONT_STRETCH, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_stretch.unsafe_as(Proc(DWRITE_FONT_STRETCH, DWRITE_TEXT_RANGE, HRESULT)).call(fontstretch, textrange)
  end
  def set_font_size(fontsize : Float32, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_size.unsafe_as(Proc(Float32, DWRITE_TEXT_RANGE, HRESULT)).call(fontsize, textrange)
  end
  def set_underline(hasunderline : LibC::BOOL, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_underline.unsafe_as(Proc(LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)).call(hasunderline, textrange)
  end
  def set_strikethrough(hasstrikethrough : LibC::BOOL, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_strikethrough.unsafe_as(Proc(LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)).call(hasstrikethrough, textrange)
  end
  def set_drawing_effect(drawingeffect : IUnknown, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_drawing_effect.unsafe_as(Proc(IUnknown, DWRITE_TEXT_RANGE, HRESULT)).call(drawingeffect, textrange)
  end
  def set_inline_object(inlineobject : IDWriteInlineObject, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_inline_object.unsafe_as(Proc(IDWriteInlineObject, DWRITE_TEXT_RANGE, HRESULT)).call(inlineobject, textrange)
  end
  def set_typography(typography : IDWriteTypography, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_typography.unsafe_as(Proc(IDWriteTypography, DWRITE_TEXT_RANGE, HRESULT)).call(typography, textrange)
  end
  def set_locale_name(localename : LibC::LPWSTR, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_locale_name.unsafe_as(Proc(LibC::LPWSTR, DWRITE_TEXT_RANGE, HRESULT)).call(localename, textrange)
  end
  def get_max_width : Float32
    @lpVtbl.value.get_max_width.unsafe_as(Proc(Float32)).call
  end
  def get_max_height : Float32
    @lpVtbl.value.get_max_height.unsafe_as(Proc(Float32)).call
  end
  def get_font_collection2(currentposition : UInt32, fontcollection : IDWriteFontCollection*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_collection2.unsafe_as(Proc(UInt32, IDWriteFontCollection*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontcollection, textrange)
  end
  def get_font_family_name_length2(currentposition : UInt32, namelength : UInt32*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_family_name_length2.unsafe_as(Proc(UInt32, UInt32*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, namelength, textrange)
  end
  def get_font_family_name2(currentposition : UInt32, fontfamilyname : Char*, namesize : UInt32, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_family_name2.unsafe_as(Proc(UInt32, Char*, UInt32, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontfamilyname, namesize, textrange)
  end
  def get_font_weight2(currentposition : UInt32, fontweight : DWRITE_FONT_WEIGHT*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_weight2.unsafe_as(Proc(UInt32, DWRITE_FONT_WEIGHT*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontweight, textrange)
  end
  def get_font_style2(currentposition : UInt32, fontstyle : DWRITE_FONT_STYLE*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_style2.unsafe_as(Proc(UInt32, DWRITE_FONT_STYLE*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontstyle, textrange)
  end
  def get_font_stretch2(currentposition : UInt32, fontstretch : DWRITE_FONT_STRETCH*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_stretch2.unsafe_as(Proc(UInt32, DWRITE_FONT_STRETCH*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontstretch, textrange)
  end
  def get_font_size2(currentposition : UInt32, fontsize : Float32*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_size2.unsafe_as(Proc(UInt32, Float32*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontsize, textrange)
  end
  def get_underline(currentposition : UInt32, hasunderline : LibC::BOOL*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_underline.unsafe_as(Proc(UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, hasunderline, textrange)
  end
  def get_strikethrough(currentposition : UInt32, hasstrikethrough : LibC::BOOL*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_strikethrough.unsafe_as(Proc(UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, hasstrikethrough, textrange)
  end
  def get_drawing_effect(currentposition : UInt32, drawingeffect : IUnknown*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_drawing_effect.unsafe_as(Proc(UInt32, IUnknown*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, drawingeffect, textrange)
  end
  def get_inline_object(currentposition : UInt32, inlineobject : IDWriteInlineObject*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_inline_object.unsafe_as(Proc(UInt32, IDWriteInlineObject*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, inlineobject, textrange)
  end
  def get_typography(currentposition : UInt32, typography : IDWriteTypography*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_typography.unsafe_as(Proc(UInt32, IDWriteTypography*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, typography, textrange)
  end
  def get_locale_name_length2(currentposition : UInt32, namelength : UInt32*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_locale_name_length2.unsafe_as(Proc(UInt32, UInt32*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, namelength, textrange)
  end
  def get_locale_name2(currentposition : UInt32, localename : Char*, namesize : UInt32, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_locale_name2.unsafe_as(Proc(UInt32, Char*, UInt32, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, localename, namesize, textrange)
  end
  def draw(clientdrawingcontext : Void*, renderer : IDWriteTextRenderer, originx : Float32, originy : Float32) : HRESULT
    @lpVtbl.value.draw.unsafe_as(Proc(Void*, IDWriteTextRenderer, Float32, Float32, HRESULT)).call(clientdrawingcontext, renderer, originx, originy)
  end
  def get_line_metrics(linemetrics : DWRITE_LINE_METRICS*, maxlinecount : UInt32, actuallinecount : UInt32*) : HRESULT
    @lpVtbl.value.get_line_metrics.unsafe_as(Proc(DWRITE_LINE_METRICS*, UInt32, UInt32*, HRESULT)).call(linemetrics, maxlinecount, actuallinecount)
  end
  def get_metrics(textmetrics : DWRITE_TEXT_METRICS*) : HRESULT
    @lpVtbl.value.get_metrics.unsafe_as(Proc(DWRITE_TEXT_METRICS*, HRESULT)).call(textmetrics)
  end
  def get_overhang_metrics(overhangs : DWRITE_OVERHANG_METRICS*) : HRESULT
    @lpVtbl.value.get_overhang_metrics.unsafe_as(Proc(DWRITE_OVERHANG_METRICS*, HRESULT)).call(overhangs)
  end
  def get_cluster_metrics(clustermetrics : DWRITE_CLUSTER_METRICS*, maxclustercount : UInt32, actualclustercount : UInt32*) : HRESULT
    @lpVtbl.value.get_cluster_metrics.unsafe_as(Proc(DWRITE_CLUSTER_METRICS*, UInt32, UInt32*, HRESULT)).call(clustermetrics, maxclustercount, actualclustercount)
  end
  def determine_min_width(minwidth : Float32*) : HRESULT
    @lpVtbl.value.determine_min_width.unsafe_as(Proc(Float32*, HRESULT)).call(minwidth)
  end
  def hit_test_point(pointx : Float32, pointy : Float32, istrailinghit : LibC::BOOL*, isinside : LibC::BOOL*, hittestmetrics : DWRITE_HIT_TEST_METRICS*) : HRESULT
    @lpVtbl.value.hit_test_point.unsafe_as(Proc(Float32, Float32, LibC::BOOL*, LibC::BOOL*, DWRITE_HIT_TEST_METRICS*, HRESULT)).call(pointx, pointy, istrailinghit, isinside, hittestmetrics)
  end
  def hit_test_text_position(textposition : UInt32, istrailinghit : LibC::BOOL, pointx : Float32*, pointy : Float32*, hittestmetrics : DWRITE_HIT_TEST_METRICS*) : HRESULT
    @lpVtbl.value.hit_test_text_position.unsafe_as(Proc(UInt32, LibC::BOOL, Float32*, Float32*, DWRITE_HIT_TEST_METRICS*, HRESULT)).call(textposition, istrailinghit, pointx, pointy, hittestmetrics)
  end
  def hit_test_text_range(textposition : UInt32, textlength : UInt32, originx : Float32, originy : Float32, hittestmetrics : DWRITE_HIT_TEST_METRICS*, maxhittestmetricscount : UInt32, actualhittestmetricscount : UInt32*) : HRESULT
    @lpVtbl.value.hit_test_text_range.unsafe_as(Proc(UInt32, UInt32, Float32, Float32, DWRITE_HIT_TEST_METRICS*, UInt32, UInt32*, HRESULT)).call(textposition, textlength, originx, originy, hittestmetrics, maxhittestmetricscount, actualhittestmetricscount)
  end
  def set_pair_kerning(ispairkerningenabled : LibC::BOOL, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_pair_kerning.unsafe_as(Proc(LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)).call(ispairkerningenabled, textrange)
  end
  def get_pair_kerning(currentposition : UInt32, ispairkerningenabled : LibC::BOOL*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_pair_kerning.unsafe_as(Proc(UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, ispairkerningenabled, textrange)
  end
  def set_character_spacing(leadingspacing : Float32, trailingspacing : Float32, minimumadvancewidth : Float32, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_character_spacing.unsafe_as(Proc(Float32, Float32, Float32, DWRITE_TEXT_RANGE, HRESULT)).call(leadingspacing, trailingspacing, minimumadvancewidth, textrange)
  end
  def get_character_spacing(currentposition : UInt32, leadingspacing : Float32*, trailingspacing : Float32*, minimumadvancewidth : Float32*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_character_spacing.unsafe_as(Proc(UInt32, Float32*, Float32*, Float32*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, leadingspacing, trailingspacing, minimumadvancewidth, textrange)
  end
  def get_metrics2(textmetrics : DWRITE_TEXT_METRICS1*) : HRESULT
    @lpVtbl.value.get_metrics2.unsafe_as(Proc(DWRITE_TEXT_METRICS1*, HRESULT)).call(textmetrics)
  end
  def set_vertical_glyph_orientation(glyphorientation : DWRITE_VERTICAL_GLYPH_ORIENTATION) : HRESULT
    @lpVtbl.value.set_vertical_glyph_orientation.unsafe_as(Proc(DWRITE_VERTICAL_GLYPH_ORIENTATION, HRESULT)).call(glyphorientation)
  end
  def get_vertical_glyph_orientation : DWRITE_VERTICAL_GLYPH_ORIENTATION
    @lpVtbl.value.get_vertical_glyph_orientation.unsafe_as(Proc(DWRITE_VERTICAL_GLYPH_ORIENTATION)).call
  end
  def set_last_line_wrapping(islastlinewrappingenabled : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_last_line_wrapping.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(islastlinewrappingenabled)
  end
  def get_last_line_wrapping : LibC::BOOL
    @lpVtbl.value.get_last_line_wrapping.unsafe_as(Proc(LibC::BOOL)).call
  end
  def set_optical_alignment(opticalalignment : DWRITE_OPTICAL_ALIGNMENT) : HRESULT
    @lpVtbl.value.set_optical_alignment.unsafe_as(Proc(DWRITE_OPTICAL_ALIGNMENT, HRESULT)).call(opticalalignment)
  end
  def get_optical_alignment : DWRITE_OPTICAL_ALIGNMENT
    @lpVtbl.value.get_optical_alignment.unsafe_as(Proc(DWRITE_OPTICAL_ALIGNMENT)).call
  end
  def set_font_fallback(fontfallback : IDWriteFontFallback) : HRESULT
    @lpVtbl.value.set_font_fallback.unsafe_as(Proc(IDWriteFontFallback, HRESULT)).call(fontfallback)
  end
  def get_font_fallback(fontfallback : IDWriteFontFallback*) : HRESULT
    @lpVtbl.value.get_font_fallback.unsafe_as(Proc(IDWriteFontFallback*, HRESULT)).call(fontfallback)
  end
  def invalidate_layout : HRESULT
    @lpVtbl.value.invalidate_layout.unsafe_as(Proc(HRESULT)).call
  end
  def set_line_spacing2(linespacingoptions : DWRITE_LINE_SPACING*) : HRESULT
    @lpVtbl.value.set_line_spacing2.unsafe_as(Proc(DWRITE_LINE_SPACING*, HRESULT)).call(linespacingoptions)
  end
  def get_line_spacing2(linespacingoptions : DWRITE_LINE_SPACING*) : HRESULT
    @lpVtbl.value.get_line_spacing2.unsafe_as(Proc(DWRITE_LINE_SPACING*, HRESULT)).call(linespacingoptions)
  end
  def get_line_metrics2(linemetrics : DWRITE_LINE_METRICS1*, maxlinecount : UInt32, actuallinecount : UInt32*) : HRESULT
    @lpVtbl.value.get_line_metrics2.unsafe_as(Proc(DWRITE_LINE_METRICS1*, UInt32, UInt32*, HRESULT)).call(linemetrics, maxlinecount, actuallinecount)
  end
end
struct LibWin32::IDWriteColorGlyphRunEnumerator1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def move_next(hasrun : LibC::BOOL*) : HRESULT
    @lpVtbl.value.move_next.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(hasrun)
  end
  def get_current_run(colorglyphrun : DWRITE_COLOR_GLYPH_RUN**) : HRESULT
    @lpVtbl.value.get_current_run.unsafe_as(Proc(DWRITE_COLOR_GLYPH_RUN**, HRESULT)).call(colorglyphrun)
  end
  def get_current_run2(colorglyphrun : DWRITE_COLOR_GLYPH_RUN1**) : HRESULT
    @lpVtbl.value.get_current_run2.unsafe_as(Proc(DWRITE_COLOR_GLYPH_RUN1**, HRESULT)).call(colorglyphrun)
  end
end
struct LibWin32::IDWriteFontFace4
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type : DWRITE_FONT_FACE_TYPE
    @lpVtbl.value.get_type.unsafe_as(Proc(DWRITE_FONT_FACE_TYPE)).call
  end
  def get_files(numberoffiles : UInt32*, fontfiles : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.get_files.unsafe_as(Proc(UInt32*, IDWriteFontFile*, HRESULT)).call(numberoffiles, fontfiles)
  end
  def get_index : UInt32
    @lpVtbl.value.get_index.unsafe_as(Proc(UInt32)).call
  end
  def get_simulations : DWRITE_FONT_SIMULATIONS
    @lpVtbl.value.get_simulations.unsafe_as(Proc(DWRITE_FONT_SIMULATIONS)).call
  end
  def is_symbol_font : LibC::BOOL
    @lpVtbl.value.is_symbol_font.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_metrics(fontfacemetrics : DWRITE_FONT_METRICS*) : Void
    @lpVtbl.value.get_metrics.unsafe_as(Proc(DWRITE_FONT_METRICS*, Void)).call(fontfacemetrics)
  end
  def get_glyph_count : UInt16
    @lpVtbl.value.get_glyph_count.unsafe_as(Proc(UInt16)).call
  end
  def get_design_glyph_metrics(glyphindices : UInt16*, glyphcount : UInt32, glyphmetrics : DWRITE_GLYPH_METRICS*, issideways : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_design_glyph_metrics.unsafe_as(Proc(UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)).call(glyphindices, glyphcount, glyphmetrics, issideways)
  end
  def get_glyph_indices(codepoints : UInt32*, codepointcount : UInt32, glyphindices : UInt16*) : HRESULT
    @lpVtbl.value.get_glyph_indices.unsafe_as(Proc(UInt32*, UInt32, UInt16*, HRESULT)).call(codepoints, codepointcount, glyphindices)
  end
  def try_get_font_table(opentypetabletag : UInt32, tabledata : Void**, tablesize : UInt32*, tablecontext : Void**, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.try_get_font_table.unsafe_as(Proc(UInt32, Void**, UInt32*, Void**, LibC::BOOL*, HRESULT)).call(opentypetabletag, tabledata, tablesize, tablecontext, exists)
  end
  def release_font_table(tablecontext : Void*) : Void
    @lpVtbl.value.release_font_table.unsafe_as(Proc(Void*, Void)).call(tablecontext)
  end
  def get_glyph_run_outline(emsize : Float32, glyphindices : UInt16*, glyphadvances : Float32*, glyphoffsets : DWRITE_GLYPH_OFFSET*, glyphcount : UInt32, issideways : LibC::BOOL, isrighttoleft : LibC::BOOL, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.get_glyph_run_outline.unsafe_as(Proc(Float32, UInt16*, Float32*, DWRITE_GLYPH_OFFSET*, UInt32, LibC::BOOL, LibC::BOOL, ID2D1SimplifiedGeometrySink, HRESULT)).call(emsize, glyphindices, glyphadvances, glyphoffsets, glyphcount, issideways, isrighttoleft, geometrysink)
  end
  def get_recommended_rendering_mode(emsize : Float32, pixelsperdip : Float32, measuringmode : DWRITE_MEASURING_MODE, renderingparams : IDWriteRenderingParams, renderingmode : DWRITE_RENDERING_MODE*) : HRESULT
    @lpVtbl.value.get_recommended_rendering_mode.unsafe_as(Proc(Float32, Float32, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE*, HRESULT)).call(emsize, pixelsperdip, measuringmode, renderingparams, renderingmode)
  end
  def get_gdi_compatible_metrics(emsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, fontfacemetrics : DWRITE_FONT_METRICS*) : HRESULT
    @lpVtbl.value.get_gdi_compatible_metrics.unsafe_as(Proc(Float32, Float32, DWRITE_MATRIX*, DWRITE_FONT_METRICS*, HRESULT)).call(emsize, pixelsperdip, transform, fontfacemetrics)
  end
  def get_gdi_compatible_glyph_metrics(emsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, usegdinatural : LibC::BOOL, glyphindices : UInt16*, glyphcount : UInt32, glyphmetrics : DWRITE_GLYPH_METRICS*, issideways : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_gdi_compatible_glyph_metrics.unsafe_as(Proc(Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)).call(emsize, pixelsperdip, transform, usegdinatural, glyphindices, glyphcount, glyphmetrics, issideways)
  end
  def get_metrics2(fontmetrics : DWRITE_FONT_METRICS1*) : Void
    @lpVtbl.value.get_metrics2.unsafe_as(Proc(DWRITE_FONT_METRICS1*, Void)).call(fontmetrics)
  end
  def get_gdi_compatible_metrics2(emsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, fontmetrics : DWRITE_FONT_METRICS1*) : HRESULT
    @lpVtbl.value.get_gdi_compatible_metrics2.unsafe_as(Proc(Float32, Float32, DWRITE_MATRIX*, DWRITE_FONT_METRICS1*, HRESULT)).call(emsize, pixelsperdip, transform, fontmetrics)
  end
  def get_caret_metrics(caretmetrics : DWRITE_CARET_METRICS*) : Void
    @lpVtbl.value.get_caret_metrics.unsafe_as(Proc(DWRITE_CARET_METRICS*, Void)).call(caretmetrics)
  end
  def get_unicode_ranges(maxrangecount : UInt32, unicoderanges : DWRITE_UNICODE_RANGE*, actualrangecount : UInt32*) : HRESULT
    @lpVtbl.value.get_unicode_ranges.unsafe_as(Proc(UInt32, DWRITE_UNICODE_RANGE*, UInt32*, HRESULT)).call(maxrangecount, unicoderanges, actualrangecount)
  end
  def is_monospaced_font : LibC::BOOL
    @lpVtbl.value.is_monospaced_font.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_design_glyph_advances(glyphcount : UInt32, glyphindices : UInt16*, glyphadvances : Int32*, issideways : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_design_glyph_advances.unsafe_as(Proc(UInt32, UInt16*, Int32*, LibC::BOOL, HRESULT)).call(glyphcount, glyphindices, glyphadvances, issideways)
  end
  def get_gdi_compatible_glyph_advances(emsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, usegdinatural : LibC::BOOL, issideways : LibC::BOOL, glyphcount : UInt32, glyphindices : UInt16*, glyphadvances : Int32*) : HRESULT
    @lpVtbl.value.get_gdi_compatible_glyph_advances.unsafe_as(Proc(Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, LibC::BOOL, UInt32, UInt16*, Int32*, HRESULT)).call(emsize, pixelsperdip, transform, usegdinatural, issideways, glyphcount, glyphindices, glyphadvances)
  end
  def get_kerning_pair_adjustments(glyphcount : UInt32, glyphindices : UInt16*, glyphadvanceadjustments : Int32*) : HRESULT
    @lpVtbl.value.get_kerning_pair_adjustments.unsafe_as(Proc(UInt32, UInt16*, Int32*, HRESULT)).call(glyphcount, glyphindices, glyphadvanceadjustments)
  end
  def has_kerning_pairs : LibC::BOOL
    @lpVtbl.value.has_kerning_pairs.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_recommended_rendering_mode2(fontemsize : Float32, dpix : Float32, dpiy : Float32, transform : DWRITE_MATRIX*, issideways : LibC::BOOL, outlinethreshold : DWRITE_OUTLINE_THRESHOLD, measuringmode : DWRITE_MEASURING_MODE, renderingmode : DWRITE_RENDERING_MODE*) : HRESULT
    @lpVtbl.value.get_recommended_rendering_mode2.unsafe_as(Proc(Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, DWRITE_RENDERING_MODE*, HRESULT)).call(fontemsize, dpix, dpiy, transform, issideways, outlinethreshold, measuringmode, renderingmode)
  end
  def get_vertical_glyph_variants(glyphcount : UInt32, nominalglyphindices : UInt16*, verticalglyphindices : UInt16*) : HRESULT
    @lpVtbl.value.get_vertical_glyph_variants.unsafe_as(Proc(UInt32, UInt16*, UInt16*, HRESULT)).call(glyphcount, nominalglyphindices, verticalglyphindices)
  end
  def has_vertical_glyph_variants : LibC::BOOL
    @lpVtbl.value.has_vertical_glyph_variants.unsafe_as(Proc(LibC::BOOL)).call
  end
  def is_color_font : LibC::BOOL
    @lpVtbl.value.is_color_font.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_color_palette_count : UInt32
    @lpVtbl.value.get_color_palette_count.unsafe_as(Proc(UInt32)).call
  end
  def get_palette_entry_count : UInt32
    @lpVtbl.value.get_palette_entry_count.unsafe_as(Proc(UInt32)).call
  end
  def get_palette_entries(colorpaletteindex : UInt32, firstentryindex : UInt32, entrycount : UInt32, paletteentries : DWRITE_COLOR_F*) : HRESULT
    @lpVtbl.value.get_palette_entries.unsafe_as(Proc(UInt32, UInt32, UInt32, DWRITE_COLOR_F*, HRESULT)).call(colorpaletteindex, firstentryindex, entrycount, paletteentries)
  end
  def get_recommended_rendering_mode3(fontemsize : Float32, dpix : Float32, dpiy : Float32, transform : DWRITE_MATRIX*, issideways : LibC::BOOL, outlinethreshold : DWRITE_OUTLINE_THRESHOLD, measuringmode : DWRITE_MEASURING_MODE, renderingparams : IDWriteRenderingParams, renderingmode : DWRITE_RENDERING_MODE*, gridfitmode : DWRITE_GRID_FIT_MODE*) : HRESULT
    @lpVtbl.value.get_recommended_rendering_mode3.unsafe_as(Proc(Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE*, DWRITE_GRID_FIT_MODE*, HRESULT)).call(fontemsize, dpix, dpiy, transform, issideways, outlinethreshold, measuringmode, renderingparams, renderingmode, gridfitmode)
  end
  def get_font_face_reference(fontfacereference : IDWriteFontFaceReference*) : HRESULT
    @lpVtbl.value.get_font_face_reference.unsafe_as(Proc(IDWriteFontFaceReference*, HRESULT)).call(fontfacereference)
  end
  def get_panose(panose : DWRITE_PANOSE*) : Void
    @lpVtbl.value.get_panose.unsafe_as(Proc(DWRITE_PANOSE*, Void)).call(panose)
  end
  def get_weight : DWRITE_FONT_WEIGHT
    @lpVtbl.value.get_weight.unsafe_as(Proc(DWRITE_FONT_WEIGHT)).call
  end
  def get_stretch : DWRITE_FONT_STRETCH
    @lpVtbl.value.get_stretch.unsafe_as(Proc(DWRITE_FONT_STRETCH)).call
  end
  def get_style : DWRITE_FONT_STYLE
    @lpVtbl.value.get_style.unsafe_as(Proc(DWRITE_FONT_STYLE)).call
  end
  def get_family_names(names : IDWriteLocalizedStrings*) : HRESULT
    @lpVtbl.value.get_family_names.unsafe_as(Proc(IDWriteLocalizedStrings*, HRESULT)).call(names)
  end
  def get_face_names(names : IDWriteLocalizedStrings*) : HRESULT
    @lpVtbl.value.get_face_names.unsafe_as(Proc(IDWriteLocalizedStrings*, HRESULT)).call(names)
  end
  def get_informational_strings(informationalstringid : DWRITE_INFORMATIONAL_STRING_ID, informationalstrings : IDWriteLocalizedStrings*, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_informational_strings.unsafe_as(Proc(DWRITE_INFORMATIONAL_STRING_ID, IDWriteLocalizedStrings*, LibC::BOOL*, HRESULT)).call(informationalstringid, informationalstrings, exists)
  end
  def has_character(unicodevalue : UInt32) : LibC::BOOL
    @lpVtbl.value.has_character.unsafe_as(Proc(UInt32, LibC::BOOL)).call(unicodevalue)
  end
  def get_recommended_rendering_mode4(fontemsize : Float32, dpix : Float32, dpiy : Float32, transform : DWRITE_MATRIX*, issideways : LibC::BOOL, outlinethreshold : DWRITE_OUTLINE_THRESHOLD, measuringmode : DWRITE_MEASURING_MODE, renderingparams : IDWriteRenderingParams, renderingmode : DWRITE_RENDERING_MODE1*, gridfitmode : DWRITE_GRID_FIT_MODE*) : HRESULT
    @lpVtbl.value.get_recommended_rendering_mode4.unsafe_as(Proc(Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE1*, DWRITE_GRID_FIT_MODE*, HRESULT)).call(fontemsize, dpix, dpiy, transform, issideways, outlinethreshold, measuringmode, renderingparams, renderingmode, gridfitmode)
  end
  def is_character_local(unicodevalue : UInt32) : LibC::BOOL
    @lpVtbl.value.is_character_local.unsafe_as(Proc(UInt32, LibC::BOOL)).call(unicodevalue)
  end
  def is_glyph_local(glyphid : UInt16) : LibC::BOOL
    @lpVtbl.value.is_glyph_local.unsafe_as(Proc(UInt16, LibC::BOOL)).call(glyphid)
  end
  def are_characters_local(characters : Char*, charactercount : UInt32, enqueueifnotlocal : LibC::BOOL, islocal : LibC::BOOL*) : HRESULT
    @lpVtbl.value.are_characters_local.unsafe_as(Proc(Char*, UInt32, LibC::BOOL, LibC::BOOL*, HRESULT)).call(characters, charactercount, enqueueifnotlocal, islocal)
  end
  def are_glyphs_local(glyphindices : UInt16*, glyphcount : UInt32, enqueueifnotlocal : LibC::BOOL, islocal : LibC::BOOL*) : HRESULT
    @lpVtbl.value.are_glyphs_local.unsafe_as(Proc(UInt16*, UInt32, LibC::BOOL, LibC::BOOL*, HRESULT)).call(glyphindices, glyphcount, enqueueifnotlocal, islocal)
  end
  def get_glyph_image_formats(glyphid : UInt16, pixelsperemfirst : UInt32, pixelsperemlast : UInt32, glyphimageformats : DWRITE_GLYPH_IMAGE_FORMATS*) : HRESULT
    @lpVtbl.value.get_glyph_image_formats.unsafe_as(Proc(UInt16, UInt32, UInt32, DWRITE_GLYPH_IMAGE_FORMATS*, HRESULT)).call(glyphid, pixelsperemfirst, pixelsperemlast, glyphimageformats)
  end
  def get_glyph_image_formats2 : DWRITE_GLYPH_IMAGE_FORMATS
    @lpVtbl.value.get_glyph_image_formats2.unsafe_as(Proc(DWRITE_GLYPH_IMAGE_FORMATS)).call
  end
  def get_glyph_image_data(glyphid : UInt16, pixelsperem : UInt32, glyphimageformat : DWRITE_GLYPH_IMAGE_FORMATS, glyphdata : DWRITE_GLYPH_IMAGE_DATA*, glyphdatacontext : Void**) : HRESULT
    @lpVtbl.value.get_glyph_image_data.unsafe_as(Proc(UInt16, UInt32, DWRITE_GLYPH_IMAGE_FORMATS, DWRITE_GLYPH_IMAGE_DATA*, Void**, HRESULT)).call(glyphid, pixelsperem, glyphimageformat, glyphdata, glyphdatacontext)
  end
  def release_glyph_image_data(glyphdatacontext : Void*) : Void
    @lpVtbl.value.release_glyph_image_data.unsafe_as(Proc(Void*, Void)).call(glyphdatacontext)
  end
end
struct LibWin32::IDWriteFactory4
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_system_font_collection(fontcollection : IDWriteFontCollection*, checkforupdates : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_system_font_collection.unsafe_as(Proc(IDWriteFontCollection*, LibC::BOOL, HRESULT)).call(fontcollection, checkforupdates)
  end
  def create_custom_font_collection(collectionloader : IDWriteFontCollectionLoader, collectionkey : Void*, collectionkeysize : UInt32, fontcollection : IDWriteFontCollection*) : HRESULT
    @lpVtbl.value.create_custom_font_collection.unsafe_as(Proc(IDWriteFontCollectionLoader, Void*, UInt32, IDWriteFontCollection*, HRESULT)).call(collectionloader, collectionkey, collectionkeysize, fontcollection)
  end
  def register_font_collection_loader(fontcollectionloader : IDWriteFontCollectionLoader) : HRESULT
    @lpVtbl.value.register_font_collection_loader.unsafe_as(Proc(IDWriteFontCollectionLoader, HRESULT)).call(fontcollectionloader)
  end
  def unregister_font_collection_loader(fontcollectionloader : IDWriteFontCollectionLoader) : HRESULT
    @lpVtbl.value.unregister_font_collection_loader.unsafe_as(Proc(IDWriteFontCollectionLoader, HRESULT)).call(fontcollectionloader)
  end
  def create_font_file_reference(filepath : LibC::LPWSTR, lastwritetime : FILETIME*, fontfile : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.create_font_file_reference.unsafe_as(Proc(LibC::LPWSTR, FILETIME*, IDWriteFontFile*, HRESULT)).call(filepath, lastwritetime, fontfile)
  end
  def create_custom_font_file_reference(fontfilereferencekey : Void*, fontfilereferencekeysize : UInt32, fontfileloader : IDWriteFontFileLoader, fontfile : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.create_custom_font_file_reference.unsafe_as(Proc(Void*, UInt32, IDWriteFontFileLoader, IDWriteFontFile*, HRESULT)).call(fontfilereferencekey, fontfilereferencekeysize, fontfileloader, fontfile)
  end
  def create_font_face(fontfacetype : DWRITE_FONT_FACE_TYPE, numberoffiles : UInt32, fontfiles : IDWriteFontFile*, faceindex : UInt32, fontfacesimulationflags : DWRITE_FONT_SIMULATIONS, fontface : IDWriteFontFace*) : HRESULT
    @lpVtbl.value.create_font_face.unsafe_as(Proc(DWRITE_FONT_FACE_TYPE, UInt32, IDWriteFontFile*, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFace*, HRESULT)).call(fontfacetype, numberoffiles, fontfiles, faceindex, fontfacesimulationflags, fontface)
  end
  def create_rendering_params(renderingparams : IDWriteRenderingParams*) : HRESULT
    @lpVtbl.value.create_rendering_params.unsafe_as(Proc(IDWriteRenderingParams*, HRESULT)).call(renderingparams)
  end
  def create_monitor_rendering_params(monitor : HMONITOR, renderingparams : IDWriteRenderingParams*) : HRESULT
    @lpVtbl.value.create_monitor_rendering_params.unsafe_as(Proc(HMONITOR, IDWriteRenderingParams*, HRESULT)).call(monitor, renderingparams)
  end
  def create_custom_rendering_params(gamma : Float32, enhancedcontrast : Float32, cleartypelevel : Float32, pixelgeometry : DWRITE_PIXEL_GEOMETRY, renderingmode : DWRITE_RENDERING_MODE, renderingparams : IDWriteRenderingParams*) : HRESULT
    @lpVtbl.value.create_custom_rendering_params.unsafe_as(Proc(Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams*, HRESULT)).call(gamma, enhancedcontrast, cleartypelevel, pixelgeometry, renderingmode, renderingparams)
  end
  def register_font_file_loader(fontfileloader : IDWriteFontFileLoader) : HRESULT
    @lpVtbl.value.register_font_file_loader.unsafe_as(Proc(IDWriteFontFileLoader, HRESULT)).call(fontfileloader)
  end
  def unregister_font_file_loader(fontfileloader : IDWriteFontFileLoader) : HRESULT
    @lpVtbl.value.unregister_font_file_loader.unsafe_as(Proc(IDWriteFontFileLoader, HRESULT)).call(fontfileloader)
  end
  def create_text_format(fontfamilyname : LibC::LPWSTR, fontcollection : IDWriteFontCollection, fontweight : DWRITE_FONT_WEIGHT, fontstyle : DWRITE_FONT_STYLE, fontstretch : DWRITE_FONT_STRETCH, fontsize : Float32, localename : LibC::LPWSTR, textformat : IDWriteTextFormat*) : HRESULT
    @lpVtbl.value.create_text_format.unsafe_as(Proc(LibC::LPWSTR, IDWriteFontCollection, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, Float32, LibC::LPWSTR, IDWriteTextFormat*, HRESULT)).call(fontfamilyname, fontcollection, fontweight, fontstyle, fontstretch, fontsize, localename, textformat)
  end
  def create_typography(typography : IDWriteTypography*) : HRESULT
    @lpVtbl.value.create_typography.unsafe_as(Proc(IDWriteTypography*, HRESULT)).call(typography)
  end
  def get_gdi_interop(gdiinterop : IDWriteGdiInterop*) : HRESULT
    @lpVtbl.value.get_gdi_interop.unsafe_as(Proc(IDWriteGdiInterop*, HRESULT)).call(gdiinterop)
  end
  def create_text_layout(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, maxwidth : Float32, maxheight : Float32, textlayout : IDWriteTextLayout*) : HRESULT
    @lpVtbl.value.create_text_layout.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, Float32, Float32, IDWriteTextLayout*, HRESULT)).call(string, stringlength, textformat, maxwidth, maxheight, textlayout)
  end
  def create_gdi_compatible_text_layout(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, layoutwidth : Float32, layoutheight : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, usegdinatural : LibC::BOOL, textlayout : IDWriteTextLayout*) : HRESULT
    @lpVtbl.value.create_gdi_compatible_text_layout.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, IDWriteTextLayout*, HRESULT)).call(string, stringlength, textformat, layoutwidth, layoutheight, pixelsperdip, transform, usegdinatural, textlayout)
  end
  def create_ellipsis_trimming_sign(textformat : IDWriteTextFormat, trimmingsign : IDWriteInlineObject*) : HRESULT
    @lpVtbl.value.create_ellipsis_trimming_sign.unsafe_as(Proc(IDWriteTextFormat, IDWriteInlineObject*, HRESULT)).call(textformat, trimmingsign)
  end
  def create_text_analyzer(textanalyzer : IDWriteTextAnalyzer*) : HRESULT
    @lpVtbl.value.create_text_analyzer.unsafe_as(Proc(IDWriteTextAnalyzer*, HRESULT)).call(textanalyzer)
  end
  def create_number_substitution(substitutionmethod : DWRITE_NUMBER_SUBSTITUTION_METHOD, localename : LibC::LPWSTR, ignoreuseroverride : LibC::BOOL, numbersubstitution : IDWriteNumberSubstitution*) : HRESULT
    @lpVtbl.value.create_number_substitution.unsafe_as(Proc(DWRITE_NUMBER_SUBSTITUTION_METHOD, LibC::LPWSTR, LibC::BOOL, IDWriteNumberSubstitution*, HRESULT)).call(substitutionmethod, localename, ignoreuseroverride, numbersubstitution)
  end
  def create_glyph_run_analysis(glyphrun : DWRITE_GLYPH_RUN*, pixelsperdip : Float32, transform : DWRITE_MATRIX*, renderingmode : DWRITE_RENDERING_MODE, measuringmode : DWRITE_MEASURING_MODE, baselineoriginx : Float32, baselineoriginy : Float32, glyphrunanalysis : IDWriteGlyphRunAnalysis*) : HRESULT
    @lpVtbl.value.create_glyph_run_analysis.unsafe_as(Proc(DWRITE_GLYPH_RUN*, Float32, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)).call(glyphrun, pixelsperdip, transform, renderingmode, measuringmode, baselineoriginx, baselineoriginy, glyphrunanalysis)
  end
  def get_eudc_font_collection(fontcollection : IDWriteFontCollection*, checkforupdates : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_eudc_font_collection.unsafe_as(Proc(IDWriteFontCollection*, LibC::BOOL, HRESULT)).call(fontcollection, checkforupdates)
  end
  def create_custom_rendering_params2(gamma : Float32, enhancedcontrast : Float32, enhancedcontrastgrayscale : Float32, cleartypelevel : Float32, pixelgeometry : DWRITE_PIXEL_GEOMETRY, renderingmode : DWRITE_RENDERING_MODE, renderingparams : IDWriteRenderingParams1*) : HRESULT
    @lpVtbl.value.create_custom_rendering_params2.unsafe_as(Proc(Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams1*, HRESULT)).call(gamma, enhancedcontrast, enhancedcontrastgrayscale, cleartypelevel, pixelgeometry, renderingmode, renderingparams)
  end
  def get_system_font_fallback(fontfallback : IDWriteFontFallback*) : HRESULT
    @lpVtbl.value.get_system_font_fallback.unsafe_as(Proc(IDWriteFontFallback*, HRESULT)).call(fontfallback)
  end
  def create_font_fallback_builder(fontfallbackbuilder : IDWriteFontFallbackBuilder*) : HRESULT
    @lpVtbl.value.create_font_fallback_builder.unsafe_as(Proc(IDWriteFontFallbackBuilder*, HRESULT)).call(fontfallbackbuilder)
  end
  def translate_color_glyph_run(baselineoriginx : Float32, baselineoriginy : Float32, glyphrun : DWRITE_GLYPH_RUN*, glyphrundescription : DWRITE_GLYPH_RUN_DESCRIPTION*, measuringmode : DWRITE_MEASURING_MODE, worldtodevicetransform : DWRITE_MATRIX*, colorpaletteindex : UInt32, colorlayers : IDWriteColorGlyphRunEnumerator*) : HRESULT
    @lpVtbl.value.translate_color_glyph_run.unsafe_as(Proc(Float32, Float32, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, DWRITE_MEASURING_MODE, DWRITE_MATRIX*, UInt32, IDWriteColorGlyphRunEnumerator*, HRESULT)).call(baselineoriginx, baselineoriginy, glyphrun, glyphrundescription, measuringmode, worldtodevicetransform, colorpaletteindex, colorlayers)
  end
  def create_custom_rendering_params3(gamma : Float32, enhancedcontrast : Float32, grayscaleenhancedcontrast : Float32, cleartypelevel : Float32, pixelgeometry : DWRITE_PIXEL_GEOMETRY, renderingmode : DWRITE_RENDERING_MODE, gridfitmode : DWRITE_GRID_FIT_MODE, renderingparams : IDWriteRenderingParams2*) : HRESULT
    @lpVtbl.value.create_custom_rendering_params3.unsafe_as(Proc(Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams2*, HRESULT)).call(gamma, enhancedcontrast, grayscaleenhancedcontrast, cleartypelevel, pixelgeometry, renderingmode, gridfitmode, renderingparams)
  end
  def create_glyph_run_analysis2(glyphrun : DWRITE_GLYPH_RUN*, transform : DWRITE_MATRIX*, renderingmode : DWRITE_RENDERING_MODE, measuringmode : DWRITE_MEASURING_MODE, gridfitmode : DWRITE_GRID_FIT_MODE, antialiasmode : DWRITE_TEXT_ANTIALIAS_MODE, baselineoriginx : Float32, baselineoriginy : Float32, glyphrunanalysis : IDWriteGlyphRunAnalysis*) : HRESULT
    @lpVtbl.value.create_glyph_run_analysis2.unsafe_as(Proc(DWRITE_GLYPH_RUN*, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)).call(glyphrun, transform, renderingmode, measuringmode, gridfitmode, antialiasmode, baselineoriginx, baselineoriginy, glyphrunanalysis)
  end
  def create_glyph_run_analysis3(glyphrun : DWRITE_GLYPH_RUN*, transform : DWRITE_MATRIX*, renderingmode : DWRITE_RENDERING_MODE1, measuringmode : DWRITE_MEASURING_MODE, gridfitmode : DWRITE_GRID_FIT_MODE, antialiasmode : DWRITE_TEXT_ANTIALIAS_MODE, baselineoriginx : Float32, baselineoriginy : Float32, glyphrunanalysis : IDWriteGlyphRunAnalysis*) : HRESULT
    @lpVtbl.value.create_glyph_run_analysis3.unsafe_as(Proc(DWRITE_GLYPH_RUN*, DWRITE_MATRIX*, DWRITE_RENDERING_MODE1, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)).call(glyphrun, transform, renderingmode, measuringmode, gridfitmode, antialiasmode, baselineoriginx, baselineoriginy, glyphrunanalysis)
  end
  def create_custom_rendering_params4(gamma : Float32, enhancedcontrast : Float32, grayscaleenhancedcontrast : Float32, cleartypelevel : Float32, pixelgeometry : DWRITE_PIXEL_GEOMETRY, renderingmode : DWRITE_RENDERING_MODE1, gridfitmode : DWRITE_GRID_FIT_MODE, renderingparams : IDWriteRenderingParams3*) : HRESULT
    @lpVtbl.value.create_custom_rendering_params4.unsafe_as(Proc(Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE1, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams3*, HRESULT)).call(gamma, enhancedcontrast, grayscaleenhancedcontrast, cleartypelevel, pixelgeometry, renderingmode, gridfitmode, renderingparams)
  end
  def create_font_face_reference(fontfile : IDWriteFontFile, faceindex : UInt32, fontsimulations : DWRITE_FONT_SIMULATIONS, fontfacereference : IDWriteFontFaceReference*) : HRESULT
    @lpVtbl.value.create_font_face_reference.unsafe_as(Proc(IDWriteFontFile, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference*, HRESULT)).call(fontfile, faceindex, fontsimulations, fontfacereference)
  end
  def create_font_face_reference2(filepath : LibC::LPWSTR, lastwritetime : FILETIME*, faceindex : UInt32, fontsimulations : DWRITE_FONT_SIMULATIONS, fontfacereference : IDWriteFontFaceReference*) : HRESULT
    @lpVtbl.value.create_font_face_reference2.unsafe_as(Proc(LibC::LPWSTR, FILETIME*, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference*, HRESULT)).call(filepath, lastwritetime, faceindex, fontsimulations, fontfacereference)
  end
  def get_system_font_set(fontset : IDWriteFontSet*) : HRESULT
    @lpVtbl.value.get_system_font_set.unsafe_as(Proc(IDWriteFontSet*, HRESULT)).call(fontset)
  end
  def create_font_set_builder(fontsetbuilder : IDWriteFontSetBuilder*) : HRESULT
    @lpVtbl.value.create_font_set_builder.unsafe_as(Proc(IDWriteFontSetBuilder*, HRESULT)).call(fontsetbuilder)
  end
  def create_font_collection_from_font_set(fontset : IDWriteFontSet, fontcollection : IDWriteFontCollection1*) : HRESULT
    @lpVtbl.value.create_font_collection_from_font_set.unsafe_as(Proc(IDWriteFontSet, IDWriteFontCollection1*, HRESULT)).call(fontset, fontcollection)
  end
  def get_system_font_collection2(includedownloadablefonts : LibC::BOOL, fontcollection : IDWriteFontCollection1*, checkforupdates : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_system_font_collection2.unsafe_as(Proc(LibC::BOOL, IDWriteFontCollection1*, LibC::BOOL, HRESULT)).call(includedownloadablefonts, fontcollection, checkforupdates)
  end
  def get_font_download_queue(fontdownloadqueue : IDWriteFontDownloadQueue*) : HRESULT
    @lpVtbl.value.get_font_download_queue.unsafe_as(Proc(IDWriteFontDownloadQueue*, HRESULT)).call(fontdownloadqueue)
  end
  def translate_color_glyph_run2(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, glyphrundescription : DWRITE_GLYPH_RUN_DESCRIPTION*, desiredglyphimageformats : DWRITE_GLYPH_IMAGE_FORMATS, measuringmode : DWRITE_MEASURING_MODE, worldanddpitransform : DWRITE_MATRIX*, colorpaletteindex : UInt32, colorlayers : IDWriteColorGlyphRunEnumerator1*) : HRESULT
    @lpVtbl.value.translate_color_glyph_run2.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, DWRITE_GLYPH_IMAGE_FORMATS, DWRITE_MEASURING_MODE, DWRITE_MATRIX*, UInt32, IDWriteColorGlyphRunEnumerator1*, HRESULT)).call(baselineorigin, glyphrun, glyphrundescription, desiredglyphimageformats, measuringmode, worldanddpitransform, colorpaletteindex, colorlayers)
  end
  def compute_glyph_origins(glyphrun : DWRITE_GLYPH_RUN*, baselineorigin : D2D_POINT_2F, glyphorigins : D2D_POINT_2F*) : HRESULT
    @lpVtbl.value.compute_glyph_origins.unsafe_as(Proc(DWRITE_GLYPH_RUN*, D2D_POINT_2F, D2D_POINT_2F*, HRESULT)).call(glyphrun, baselineorigin, glyphorigins)
  end
  def compute_glyph_origins2(glyphrun : DWRITE_GLYPH_RUN*, measuringmode : DWRITE_MEASURING_MODE, baselineorigin : D2D_POINT_2F, worldanddpitransform : DWRITE_MATRIX*, glyphorigins : D2D_POINT_2F*) : HRESULT
    @lpVtbl.value.compute_glyph_origins2.unsafe_as(Proc(DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D_POINT_2F, DWRITE_MATRIX*, D2D_POINT_2F*, HRESULT)).call(glyphrun, measuringmode, baselineorigin, worldanddpitransform, glyphorigins)
  end
end
struct LibWin32::IDWriteFontSetBuilder1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def add_font_face_reference(fontfacereference : IDWriteFontFaceReference, properties : DWRITE_FONT_PROPERTY*, propertycount : UInt32) : HRESULT
    @lpVtbl.value.add_font_face_reference.unsafe_as(Proc(IDWriteFontFaceReference, DWRITE_FONT_PROPERTY*, UInt32, HRESULT)).call(fontfacereference, properties, propertycount)
  end
  def add_font_face_reference2(fontfacereference : IDWriteFontFaceReference) : HRESULT
    @lpVtbl.value.add_font_face_reference2.unsafe_as(Proc(IDWriteFontFaceReference, HRESULT)).call(fontfacereference)
  end
  def add_font_set(fontset : IDWriteFontSet) : HRESULT
    @lpVtbl.value.add_font_set.unsafe_as(Proc(IDWriteFontSet, HRESULT)).call(fontset)
  end
  def create_font_set(fontset : IDWriteFontSet*) : HRESULT
    @lpVtbl.value.create_font_set.unsafe_as(Proc(IDWriteFontSet*, HRESULT)).call(fontset)
  end
  def add_font_file(fontfile : IDWriteFontFile) : HRESULT
    @lpVtbl.value.add_font_file.unsafe_as(Proc(IDWriteFontFile, HRESULT)).call(fontfile)
  end
end
struct LibWin32::IDWriteAsyncResult
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_wait_handle : LibC::HANDLE
    @lpVtbl.value.get_wait_handle.unsafe_as(Proc(LibC::HANDLE)).call
  end
  def get_result : HRESULT
    @lpVtbl.value.get_result.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IDWriteRemoteFontFileStream
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def read_file_fragment(fragmentstart : Void**, fileoffset : UInt64, fragmentsize : UInt64, fragmentcontext : Void**) : HRESULT
    @lpVtbl.value.read_file_fragment.unsafe_as(Proc(Void**, UInt64, UInt64, Void**, HRESULT)).call(fragmentstart, fileoffset, fragmentsize, fragmentcontext)
  end
  def release_file_fragment(fragmentcontext : Void*) : Void
    @lpVtbl.value.release_file_fragment.unsafe_as(Proc(Void*, Void)).call(fragmentcontext)
  end
  def get_file_size(filesize : UInt64*) : HRESULT
    @lpVtbl.value.get_file_size.unsafe_as(Proc(UInt64*, HRESULT)).call(filesize)
  end
  def get_last_write_time(lastwritetime : UInt64*) : HRESULT
    @lpVtbl.value.get_last_write_time.unsafe_as(Proc(UInt64*, HRESULT)).call(lastwritetime)
  end
  def get_local_file_size(localfilesize : UInt64*) : HRESULT
    @lpVtbl.value.get_local_file_size.unsafe_as(Proc(UInt64*, HRESULT)).call(localfilesize)
  end
  def get_file_fragment_locality(fileoffset : UInt64, fragmentsize : UInt64, islocal : LibC::BOOL*, partialsize : UInt64*) : HRESULT
    @lpVtbl.value.get_file_fragment_locality.unsafe_as(Proc(UInt64, UInt64, LibC::BOOL*, UInt64*, HRESULT)).call(fileoffset, fragmentsize, islocal, partialsize)
  end
  def get_locality : DWRITE_LOCALITY
    @lpVtbl.value.get_locality.unsafe_as(Proc(DWRITE_LOCALITY)).call
  end
  def begin_download(downloadoperationid : Guid*, filefragments : DWRITE_FILE_FRAGMENT*, fragmentcount : UInt32, asyncresult : IDWriteAsyncResult*) : HRESULT
    @lpVtbl.value.begin_download.unsafe_as(Proc(Guid*, DWRITE_FILE_FRAGMENT*, UInt32, IDWriteAsyncResult*, HRESULT)).call(downloadoperationid, filefragments, fragmentcount, asyncresult)
  end
end
struct LibWin32::IDWriteRemoteFontFileLoader
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def create_stream_from_key(fontfilereferencekey : Void*, fontfilereferencekeysize : UInt32, fontfilestream : IDWriteFontFileStream*) : HRESULT
    @lpVtbl.value.create_stream_from_key.unsafe_as(Proc(Void*, UInt32, IDWriteFontFileStream*, HRESULT)).call(fontfilereferencekey, fontfilereferencekeysize, fontfilestream)
  end
  def create_remote_stream_from_key(fontfilereferencekey : Void*, fontfilereferencekeysize : UInt32, fontfilestream : IDWriteRemoteFontFileStream*) : HRESULT
    @lpVtbl.value.create_remote_stream_from_key.unsafe_as(Proc(Void*, UInt32, IDWriteRemoteFontFileStream*, HRESULT)).call(fontfilereferencekey, fontfilereferencekeysize, fontfilestream)
  end
  def get_locality_from_key(fontfilereferencekey : Void*, fontfilereferencekeysize : UInt32, locality : DWRITE_LOCALITY*) : HRESULT
    @lpVtbl.value.get_locality_from_key.unsafe_as(Proc(Void*, UInt32, DWRITE_LOCALITY*, HRESULT)).call(fontfilereferencekey, fontfilereferencekeysize, locality)
  end
  def create_font_file_reference_from_url(factory : IDWriteFactory, baseurl : LibC::LPWSTR, fontfileurl : LibC::LPWSTR, fontfile : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.create_font_file_reference_from_url.unsafe_as(Proc(IDWriteFactory, LibC::LPWSTR, LibC::LPWSTR, IDWriteFontFile*, HRESULT)).call(factory, baseurl, fontfileurl, fontfile)
  end
end
struct LibWin32::IDWriteInMemoryFontFileLoader
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def create_stream_from_key(fontfilereferencekey : Void*, fontfilereferencekeysize : UInt32, fontfilestream : IDWriteFontFileStream*) : HRESULT
    @lpVtbl.value.create_stream_from_key.unsafe_as(Proc(Void*, UInt32, IDWriteFontFileStream*, HRESULT)).call(fontfilereferencekey, fontfilereferencekeysize, fontfilestream)
  end
  def create_in_memory_font_file_reference(factory : IDWriteFactory, fontdata : Void*, fontdatasize : UInt32, ownerobject : IUnknown, fontfile : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.create_in_memory_font_file_reference.unsafe_as(Proc(IDWriteFactory, Void*, UInt32, IUnknown, IDWriteFontFile*, HRESULT)).call(factory, fontdata, fontdatasize, ownerobject, fontfile)
  end
  def get_file_count : UInt32
    @lpVtbl.value.get_file_count.unsafe_as(Proc(UInt32)).call
  end
end
struct LibWin32::IDWriteFactory5
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_system_font_collection(fontcollection : IDWriteFontCollection*, checkforupdates : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_system_font_collection.unsafe_as(Proc(IDWriteFontCollection*, LibC::BOOL, HRESULT)).call(fontcollection, checkforupdates)
  end
  def create_custom_font_collection(collectionloader : IDWriteFontCollectionLoader, collectionkey : Void*, collectionkeysize : UInt32, fontcollection : IDWriteFontCollection*) : HRESULT
    @lpVtbl.value.create_custom_font_collection.unsafe_as(Proc(IDWriteFontCollectionLoader, Void*, UInt32, IDWriteFontCollection*, HRESULT)).call(collectionloader, collectionkey, collectionkeysize, fontcollection)
  end
  def register_font_collection_loader(fontcollectionloader : IDWriteFontCollectionLoader) : HRESULT
    @lpVtbl.value.register_font_collection_loader.unsafe_as(Proc(IDWriteFontCollectionLoader, HRESULT)).call(fontcollectionloader)
  end
  def unregister_font_collection_loader(fontcollectionloader : IDWriteFontCollectionLoader) : HRESULT
    @lpVtbl.value.unregister_font_collection_loader.unsafe_as(Proc(IDWriteFontCollectionLoader, HRESULT)).call(fontcollectionloader)
  end
  def create_font_file_reference(filepath : LibC::LPWSTR, lastwritetime : FILETIME*, fontfile : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.create_font_file_reference.unsafe_as(Proc(LibC::LPWSTR, FILETIME*, IDWriteFontFile*, HRESULT)).call(filepath, lastwritetime, fontfile)
  end
  def create_custom_font_file_reference(fontfilereferencekey : Void*, fontfilereferencekeysize : UInt32, fontfileloader : IDWriteFontFileLoader, fontfile : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.create_custom_font_file_reference.unsafe_as(Proc(Void*, UInt32, IDWriteFontFileLoader, IDWriteFontFile*, HRESULT)).call(fontfilereferencekey, fontfilereferencekeysize, fontfileloader, fontfile)
  end
  def create_font_face(fontfacetype : DWRITE_FONT_FACE_TYPE, numberoffiles : UInt32, fontfiles : IDWriteFontFile*, faceindex : UInt32, fontfacesimulationflags : DWRITE_FONT_SIMULATIONS, fontface : IDWriteFontFace*) : HRESULT
    @lpVtbl.value.create_font_face.unsafe_as(Proc(DWRITE_FONT_FACE_TYPE, UInt32, IDWriteFontFile*, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFace*, HRESULT)).call(fontfacetype, numberoffiles, fontfiles, faceindex, fontfacesimulationflags, fontface)
  end
  def create_rendering_params(renderingparams : IDWriteRenderingParams*) : HRESULT
    @lpVtbl.value.create_rendering_params.unsafe_as(Proc(IDWriteRenderingParams*, HRESULT)).call(renderingparams)
  end
  def create_monitor_rendering_params(monitor : HMONITOR, renderingparams : IDWriteRenderingParams*) : HRESULT
    @lpVtbl.value.create_monitor_rendering_params.unsafe_as(Proc(HMONITOR, IDWriteRenderingParams*, HRESULT)).call(monitor, renderingparams)
  end
  def create_custom_rendering_params(gamma : Float32, enhancedcontrast : Float32, cleartypelevel : Float32, pixelgeometry : DWRITE_PIXEL_GEOMETRY, renderingmode : DWRITE_RENDERING_MODE, renderingparams : IDWriteRenderingParams*) : HRESULT
    @lpVtbl.value.create_custom_rendering_params.unsafe_as(Proc(Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams*, HRESULT)).call(gamma, enhancedcontrast, cleartypelevel, pixelgeometry, renderingmode, renderingparams)
  end
  def register_font_file_loader(fontfileloader : IDWriteFontFileLoader) : HRESULT
    @lpVtbl.value.register_font_file_loader.unsafe_as(Proc(IDWriteFontFileLoader, HRESULT)).call(fontfileloader)
  end
  def unregister_font_file_loader(fontfileloader : IDWriteFontFileLoader) : HRESULT
    @lpVtbl.value.unregister_font_file_loader.unsafe_as(Proc(IDWriteFontFileLoader, HRESULT)).call(fontfileloader)
  end
  def create_text_format(fontfamilyname : LibC::LPWSTR, fontcollection : IDWriteFontCollection, fontweight : DWRITE_FONT_WEIGHT, fontstyle : DWRITE_FONT_STYLE, fontstretch : DWRITE_FONT_STRETCH, fontsize : Float32, localename : LibC::LPWSTR, textformat : IDWriteTextFormat*) : HRESULT
    @lpVtbl.value.create_text_format.unsafe_as(Proc(LibC::LPWSTR, IDWriteFontCollection, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, Float32, LibC::LPWSTR, IDWriteTextFormat*, HRESULT)).call(fontfamilyname, fontcollection, fontweight, fontstyle, fontstretch, fontsize, localename, textformat)
  end
  def create_typography(typography : IDWriteTypography*) : HRESULT
    @lpVtbl.value.create_typography.unsafe_as(Proc(IDWriteTypography*, HRESULT)).call(typography)
  end
  def get_gdi_interop(gdiinterop : IDWriteGdiInterop*) : HRESULT
    @lpVtbl.value.get_gdi_interop.unsafe_as(Proc(IDWriteGdiInterop*, HRESULT)).call(gdiinterop)
  end
  def create_text_layout(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, maxwidth : Float32, maxheight : Float32, textlayout : IDWriteTextLayout*) : HRESULT
    @lpVtbl.value.create_text_layout.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, Float32, Float32, IDWriteTextLayout*, HRESULT)).call(string, stringlength, textformat, maxwidth, maxheight, textlayout)
  end
  def create_gdi_compatible_text_layout(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, layoutwidth : Float32, layoutheight : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, usegdinatural : LibC::BOOL, textlayout : IDWriteTextLayout*) : HRESULT
    @lpVtbl.value.create_gdi_compatible_text_layout.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, IDWriteTextLayout*, HRESULT)).call(string, stringlength, textformat, layoutwidth, layoutheight, pixelsperdip, transform, usegdinatural, textlayout)
  end
  def create_ellipsis_trimming_sign(textformat : IDWriteTextFormat, trimmingsign : IDWriteInlineObject*) : HRESULT
    @lpVtbl.value.create_ellipsis_trimming_sign.unsafe_as(Proc(IDWriteTextFormat, IDWriteInlineObject*, HRESULT)).call(textformat, trimmingsign)
  end
  def create_text_analyzer(textanalyzer : IDWriteTextAnalyzer*) : HRESULT
    @lpVtbl.value.create_text_analyzer.unsafe_as(Proc(IDWriteTextAnalyzer*, HRESULT)).call(textanalyzer)
  end
  def create_number_substitution(substitutionmethod : DWRITE_NUMBER_SUBSTITUTION_METHOD, localename : LibC::LPWSTR, ignoreuseroverride : LibC::BOOL, numbersubstitution : IDWriteNumberSubstitution*) : HRESULT
    @lpVtbl.value.create_number_substitution.unsafe_as(Proc(DWRITE_NUMBER_SUBSTITUTION_METHOD, LibC::LPWSTR, LibC::BOOL, IDWriteNumberSubstitution*, HRESULT)).call(substitutionmethod, localename, ignoreuseroverride, numbersubstitution)
  end
  def create_glyph_run_analysis(glyphrun : DWRITE_GLYPH_RUN*, pixelsperdip : Float32, transform : DWRITE_MATRIX*, renderingmode : DWRITE_RENDERING_MODE, measuringmode : DWRITE_MEASURING_MODE, baselineoriginx : Float32, baselineoriginy : Float32, glyphrunanalysis : IDWriteGlyphRunAnalysis*) : HRESULT
    @lpVtbl.value.create_glyph_run_analysis.unsafe_as(Proc(DWRITE_GLYPH_RUN*, Float32, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)).call(glyphrun, pixelsperdip, transform, renderingmode, measuringmode, baselineoriginx, baselineoriginy, glyphrunanalysis)
  end
  def get_eudc_font_collection(fontcollection : IDWriteFontCollection*, checkforupdates : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_eudc_font_collection.unsafe_as(Proc(IDWriteFontCollection*, LibC::BOOL, HRESULT)).call(fontcollection, checkforupdates)
  end
  def create_custom_rendering_params2(gamma : Float32, enhancedcontrast : Float32, enhancedcontrastgrayscale : Float32, cleartypelevel : Float32, pixelgeometry : DWRITE_PIXEL_GEOMETRY, renderingmode : DWRITE_RENDERING_MODE, renderingparams : IDWriteRenderingParams1*) : HRESULT
    @lpVtbl.value.create_custom_rendering_params2.unsafe_as(Proc(Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams1*, HRESULT)).call(gamma, enhancedcontrast, enhancedcontrastgrayscale, cleartypelevel, pixelgeometry, renderingmode, renderingparams)
  end
  def get_system_font_fallback(fontfallback : IDWriteFontFallback*) : HRESULT
    @lpVtbl.value.get_system_font_fallback.unsafe_as(Proc(IDWriteFontFallback*, HRESULT)).call(fontfallback)
  end
  def create_font_fallback_builder(fontfallbackbuilder : IDWriteFontFallbackBuilder*) : HRESULT
    @lpVtbl.value.create_font_fallback_builder.unsafe_as(Proc(IDWriteFontFallbackBuilder*, HRESULT)).call(fontfallbackbuilder)
  end
  def translate_color_glyph_run(baselineoriginx : Float32, baselineoriginy : Float32, glyphrun : DWRITE_GLYPH_RUN*, glyphrundescription : DWRITE_GLYPH_RUN_DESCRIPTION*, measuringmode : DWRITE_MEASURING_MODE, worldtodevicetransform : DWRITE_MATRIX*, colorpaletteindex : UInt32, colorlayers : IDWriteColorGlyphRunEnumerator*) : HRESULT
    @lpVtbl.value.translate_color_glyph_run.unsafe_as(Proc(Float32, Float32, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, DWRITE_MEASURING_MODE, DWRITE_MATRIX*, UInt32, IDWriteColorGlyphRunEnumerator*, HRESULT)).call(baselineoriginx, baselineoriginy, glyphrun, glyphrundescription, measuringmode, worldtodevicetransform, colorpaletteindex, colorlayers)
  end
  def create_custom_rendering_params3(gamma : Float32, enhancedcontrast : Float32, grayscaleenhancedcontrast : Float32, cleartypelevel : Float32, pixelgeometry : DWRITE_PIXEL_GEOMETRY, renderingmode : DWRITE_RENDERING_MODE, gridfitmode : DWRITE_GRID_FIT_MODE, renderingparams : IDWriteRenderingParams2*) : HRESULT
    @lpVtbl.value.create_custom_rendering_params3.unsafe_as(Proc(Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams2*, HRESULT)).call(gamma, enhancedcontrast, grayscaleenhancedcontrast, cleartypelevel, pixelgeometry, renderingmode, gridfitmode, renderingparams)
  end
  def create_glyph_run_analysis2(glyphrun : DWRITE_GLYPH_RUN*, transform : DWRITE_MATRIX*, renderingmode : DWRITE_RENDERING_MODE, measuringmode : DWRITE_MEASURING_MODE, gridfitmode : DWRITE_GRID_FIT_MODE, antialiasmode : DWRITE_TEXT_ANTIALIAS_MODE, baselineoriginx : Float32, baselineoriginy : Float32, glyphrunanalysis : IDWriteGlyphRunAnalysis*) : HRESULT
    @lpVtbl.value.create_glyph_run_analysis2.unsafe_as(Proc(DWRITE_GLYPH_RUN*, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)).call(glyphrun, transform, renderingmode, measuringmode, gridfitmode, antialiasmode, baselineoriginx, baselineoriginy, glyphrunanalysis)
  end
  def create_glyph_run_analysis3(glyphrun : DWRITE_GLYPH_RUN*, transform : DWRITE_MATRIX*, renderingmode : DWRITE_RENDERING_MODE1, measuringmode : DWRITE_MEASURING_MODE, gridfitmode : DWRITE_GRID_FIT_MODE, antialiasmode : DWRITE_TEXT_ANTIALIAS_MODE, baselineoriginx : Float32, baselineoriginy : Float32, glyphrunanalysis : IDWriteGlyphRunAnalysis*) : HRESULT
    @lpVtbl.value.create_glyph_run_analysis3.unsafe_as(Proc(DWRITE_GLYPH_RUN*, DWRITE_MATRIX*, DWRITE_RENDERING_MODE1, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)).call(glyphrun, transform, renderingmode, measuringmode, gridfitmode, antialiasmode, baselineoriginx, baselineoriginy, glyphrunanalysis)
  end
  def create_custom_rendering_params4(gamma : Float32, enhancedcontrast : Float32, grayscaleenhancedcontrast : Float32, cleartypelevel : Float32, pixelgeometry : DWRITE_PIXEL_GEOMETRY, renderingmode : DWRITE_RENDERING_MODE1, gridfitmode : DWRITE_GRID_FIT_MODE, renderingparams : IDWriteRenderingParams3*) : HRESULT
    @lpVtbl.value.create_custom_rendering_params4.unsafe_as(Proc(Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE1, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams3*, HRESULT)).call(gamma, enhancedcontrast, grayscaleenhancedcontrast, cleartypelevel, pixelgeometry, renderingmode, gridfitmode, renderingparams)
  end
  def create_font_face_reference(fontfile : IDWriteFontFile, faceindex : UInt32, fontsimulations : DWRITE_FONT_SIMULATIONS, fontfacereference : IDWriteFontFaceReference*) : HRESULT
    @lpVtbl.value.create_font_face_reference.unsafe_as(Proc(IDWriteFontFile, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference*, HRESULT)).call(fontfile, faceindex, fontsimulations, fontfacereference)
  end
  def create_font_face_reference2(filepath : LibC::LPWSTR, lastwritetime : FILETIME*, faceindex : UInt32, fontsimulations : DWRITE_FONT_SIMULATIONS, fontfacereference : IDWriteFontFaceReference*) : HRESULT
    @lpVtbl.value.create_font_face_reference2.unsafe_as(Proc(LibC::LPWSTR, FILETIME*, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference*, HRESULT)).call(filepath, lastwritetime, faceindex, fontsimulations, fontfacereference)
  end
  def get_system_font_set(fontset : IDWriteFontSet*) : HRESULT
    @lpVtbl.value.get_system_font_set.unsafe_as(Proc(IDWriteFontSet*, HRESULT)).call(fontset)
  end
  def create_font_set_builder(fontsetbuilder : IDWriteFontSetBuilder*) : HRESULT
    @lpVtbl.value.create_font_set_builder.unsafe_as(Proc(IDWriteFontSetBuilder*, HRESULT)).call(fontsetbuilder)
  end
  def create_font_collection_from_font_set(fontset : IDWriteFontSet, fontcollection : IDWriteFontCollection1*) : HRESULT
    @lpVtbl.value.create_font_collection_from_font_set.unsafe_as(Proc(IDWriteFontSet, IDWriteFontCollection1*, HRESULT)).call(fontset, fontcollection)
  end
  def get_system_font_collection2(includedownloadablefonts : LibC::BOOL, fontcollection : IDWriteFontCollection1*, checkforupdates : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_system_font_collection2.unsafe_as(Proc(LibC::BOOL, IDWriteFontCollection1*, LibC::BOOL, HRESULT)).call(includedownloadablefonts, fontcollection, checkforupdates)
  end
  def get_font_download_queue(fontdownloadqueue : IDWriteFontDownloadQueue*) : HRESULT
    @lpVtbl.value.get_font_download_queue.unsafe_as(Proc(IDWriteFontDownloadQueue*, HRESULT)).call(fontdownloadqueue)
  end
  def translate_color_glyph_run2(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, glyphrundescription : DWRITE_GLYPH_RUN_DESCRIPTION*, desiredglyphimageformats : DWRITE_GLYPH_IMAGE_FORMATS, measuringmode : DWRITE_MEASURING_MODE, worldanddpitransform : DWRITE_MATRIX*, colorpaletteindex : UInt32, colorlayers : IDWriteColorGlyphRunEnumerator1*) : HRESULT
    @lpVtbl.value.translate_color_glyph_run2.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, DWRITE_GLYPH_IMAGE_FORMATS, DWRITE_MEASURING_MODE, DWRITE_MATRIX*, UInt32, IDWriteColorGlyphRunEnumerator1*, HRESULT)).call(baselineorigin, glyphrun, glyphrundescription, desiredglyphimageformats, measuringmode, worldanddpitransform, colorpaletteindex, colorlayers)
  end
  def compute_glyph_origins(glyphrun : DWRITE_GLYPH_RUN*, baselineorigin : D2D_POINT_2F, glyphorigins : D2D_POINT_2F*) : HRESULT
    @lpVtbl.value.compute_glyph_origins.unsafe_as(Proc(DWRITE_GLYPH_RUN*, D2D_POINT_2F, D2D_POINT_2F*, HRESULT)).call(glyphrun, baselineorigin, glyphorigins)
  end
  def compute_glyph_origins2(glyphrun : DWRITE_GLYPH_RUN*, measuringmode : DWRITE_MEASURING_MODE, baselineorigin : D2D_POINT_2F, worldanddpitransform : DWRITE_MATRIX*, glyphorigins : D2D_POINT_2F*) : HRESULT
    @lpVtbl.value.compute_glyph_origins2.unsafe_as(Proc(DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D_POINT_2F, DWRITE_MATRIX*, D2D_POINT_2F*, HRESULT)).call(glyphrun, measuringmode, baselineorigin, worldanddpitransform, glyphorigins)
  end
  def create_font_set_builder2(fontsetbuilder : IDWriteFontSetBuilder1*) : HRESULT
    @lpVtbl.value.create_font_set_builder2.unsafe_as(Proc(IDWriteFontSetBuilder1*, HRESULT)).call(fontsetbuilder)
  end
  def create_in_memory_font_file_loader(newloader : IDWriteInMemoryFontFileLoader*) : HRESULT
    @lpVtbl.value.create_in_memory_font_file_loader.unsafe_as(Proc(IDWriteInMemoryFontFileLoader*, HRESULT)).call(newloader)
  end
  def create_http_font_file_loader(referrerurl : LibC::LPWSTR, extraheaders : LibC::LPWSTR, newloader : IDWriteRemoteFontFileLoader*) : HRESULT
    @lpVtbl.value.create_http_font_file_loader.unsafe_as(Proc(LibC::LPWSTR, LibC::LPWSTR, IDWriteRemoteFontFileLoader*, HRESULT)).call(referrerurl, extraheaders, newloader)
  end
  def analyze_container_type(filedata : Void*, filedatasize : UInt32) : DWRITE_CONTAINER_TYPE
    @lpVtbl.value.analyze_container_type.unsafe_as(Proc(Void*, UInt32, DWRITE_CONTAINER_TYPE)).call(filedata, filedatasize)
  end
  def unpack_font_file(containertype : DWRITE_CONTAINER_TYPE, filedata : Void*, filedatasize : UInt32, unpackedfontstream : IDWriteFontFileStream*) : HRESULT
    @lpVtbl.value.unpack_font_file.unsafe_as(Proc(DWRITE_CONTAINER_TYPE, Void*, UInt32, IDWriteFontFileStream*, HRESULT)).call(containertype, filedata, filedatasize, unpackedfontstream)
  end
end
struct LibWin32::IDWriteFactory6
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_system_font_collection(fontcollection : IDWriteFontCollection*, checkforupdates : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_system_font_collection.unsafe_as(Proc(IDWriteFontCollection*, LibC::BOOL, HRESULT)).call(fontcollection, checkforupdates)
  end
  def create_custom_font_collection(collectionloader : IDWriteFontCollectionLoader, collectionkey : Void*, collectionkeysize : UInt32, fontcollection : IDWriteFontCollection*) : HRESULT
    @lpVtbl.value.create_custom_font_collection.unsafe_as(Proc(IDWriteFontCollectionLoader, Void*, UInt32, IDWriteFontCollection*, HRESULT)).call(collectionloader, collectionkey, collectionkeysize, fontcollection)
  end
  def register_font_collection_loader(fontcollectionloader : IDWriteFontCollectionLoader) : HRESULT
    @lpVtbl.value.register_font_collection_loader.unsafe_as(Proc(IDWriteFontCollectionLoader, HRESULT)).call(fontcollectionloader)
  end
  def unregister_font_collection_loader(fontcollectionloader : IDWriteFontCollectionLoader) : HRESULT
    @lpVtbl.value.unregister_font_collection_loader.unsafe_as(Proc(IDWriteFontCollectionLoader, HRESULT)).call(fontcollectionloader)
  end
  def create_font_file_reference(filepath : LibC::LPWSTR, lastwritetime : FILETIME*, fontfile : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.create_font_file_reference.unsafe_as(Proc(LibC::LPWSTR, FILETIME*, IDWriteFontFile*, HRESULT)).call(filepath, lastwritetime, fontfile)
  end
  def create_custom_font_file_reference(fontfilereferencekey : Void*, fontfilereferencekeysize : UInt32, fontfileloader : IDWriteFontFileLoader, fontfile : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.create_custom_font_file_reference.unsafe_as(Proc(Void*, UInt32, IDWriteFontFileLoader, IDWriteFontFile*, HRESULT)).call(fontfilereferencekey, fontfilereferencekeysize, fontfileloader, fontfile)
  end
  def create_font_face(fontfacetype : DWRITE_FONT_FACE_TYPE, numberoffiles : UInt32, fontfiles : IDWriteFontFile*, faceindex : UInt32, fontfacesimulationflags : DWRITE_FONT_SIMULATIONS, fontface : IDWriteFontFace*) : HRESULT
    @lpVtbl.value.create_font_face.unsafe_as(Proc(DWRITE_FONT_FACE_TYPE, UInt32, IDWriteFontFile*, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFace*, HRESULT)).call(fontfacetype, numberoffiles, fontfiles, faceindex, fontfacesimulationflags, fontface)
  end
  def create_rendering_params(renderingparams : IDWriteRenderingParams*) : HRESULT
    @lpVtbl.value.create_rendering_params.unsafe_as(Proc(IDWriteRenderingParams*, HRESULT)).call(renderingparams)
  end
  def create_monitor_rendering_params(monitor : HMONITOR, renderingparams : IDWriteRenderingParams*) : HRESULT
    @lpVtbl.value.create_monitor_rendering_params.unsafe_as(Proc(HMONITOR, IDWriteRenderingParams*, HRESULT)).call(monitor, renderingparams)
  end
  def create_custom_rendering_params(gamma : Float32, enhancedcontrast : Float32, cleartypelevel : Float32, pixelgeometry : DWRITE_PIXEL_GEOMETRY, renderingmode : DWRITE_RENDERING_MODE, renderingparams : IDWriteRenderingParams*) : HRESULT
    @lpVtbl.value.create_custom_rendering_params.unsafe_as(Proc(Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams*, HRESULT)).call(gamma, enhancedcontrast, cleartypelevel, pixelgeometry, renderingmode, renderingparams)
  end
  def register_font_file_loader(fontfileloader : IDWriteFontFileLoader) : HRESULT
    @lpVtbl.value.register_font_file_loader.unsafe_as(Proc(IDWriteFontFileLoader, HRESULT)).call(fontfileloader)
  end
  def unregister_font_file_loader(fontfileloader : IDWriteFontFileLoader) : HRESULT
    @lpVtbl.value.unregister_font_file_loader.unsafe_as(Proc(IDWriteFontFileLoader, HRESULT)).call(fontfileloader)
  end
  def create_text_format(fontfamilyname : LibC::LPWSTR, fontcollection : IDWriteFontCollection, fontweight : DWRITE_FONT_WEIGHT, fontstyle : DWRITE_FONT_STYLE, fontstretch : DWRITE_FONT_STRETCH, fontsize : Float32, localename : LibC::LPWSTR, textformat : IDWriteTextFormat*) : HRESULT
    @lpVtbl.value.create_text_format.unsafe_as(Proc(LibC::LPWSTR, IDWriteFontCollection, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, Float32, LibC::LPWSTR, IDWriteTextFormat*, HRESULT)).call(fontfamilyname, fontcollection, fontweight, fontstyle, fontstretch, fontsize, localename, textformat)
  end
  def create_typography(typography : IDWriteTypography*) : HRESULT
    @lpVtbl.value.create_typography.unsafe_as(Proc(IDWriteTypography*, HRESULT)).call(typography)
  end
  def get_gdi_interop(gdiinterop : IDWriteGdiInterop*) : HRESULT
    @lpVtbl.value.get_gdi_interop.unsafe_as(Proc(IDWriteGdiInterop*, HRESULT)).call(gdiinterop)
  end
  def create_text_layout(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, maxwidth : Float32, maxheight : Float32, textlayout : IDWriteTextLayout*) : HRESULT
    @lpVtbl.value.create_text_layout.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, Float32, Float32, IDWriteTextLayout*, HRESULT)).call(string, stringlength, textformat, maxwidth, maxheight, textlayout)
  end
  def create_gdi_compatible_text_layout(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, layoutwidth : Float32, layoutheight : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, usegdinatural : LibC::BOOL, textlayout : IDWriteTextLayout*) : HRESULT
    @lpVtbl.value.create_gdi_compatible_text_layout.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, IDWriteTextLayout*, HRESULT)).call(string, stringlength, textformat, layoutwidth, layoutheight, pixelsperdip, transform, usegdinatural, textlayout)
  end
  def create_ellipsis_trimming_sign(textformat : IDWriteTextFormat, trimmingsign : IDWriteInlineObject*) : HRESULT
    @lpVtbl.value.create_ellipsis_trimming_sign.unsafe_as(Proc(IDWriteTextFormat, IDWriteInlineObject*, HRESULT)).call(textformat, trimmingsign)
  end
  def create_text_analyzer(textanalyzer : IDWriteTextAnalyzer*) : HRESULT
    @lpVtbl.value.create_text_analyzer.unsafe_as(Proc(IDWriteTextAnalyzer*, HRESULT)).call(textanalyzer)
  end
  def create_number_substitution(substitutionmethod : DWRITE_NUMBER_SUBSTITUTION_METHOD, localename : LibC::LPWSTR, ignoreuseroverride : LibC::BOOL, numbersubstitution : IDWriteNumberSubstitution*) : HRESULT
    @lpVtbl.value.create_number_substitution.unsafe_as(Proc(DWRITE_NUMBER_SUBSTITUTION_METHOD, LibC::LPWSTR, LibC::BOOL, IDWriteNumberSubstitution*, HRESULT)).call(substitutionmethod, localename, ignoreuseroverride, numbersubstitution)
  end
  def create_glyph_run_analysis(glyphrun : DWRITE_GLYPH_RUN*, pixelsperdip : Float32, transform : DWRITE_MATRIX*, renderingmode : DWRITE_RENDERING_MODE, measuringmode : DWRITE_MEASURING_MODE, baselineoriginx : Float32, baselineoriginy : Float32, glyphrunanalysis : IDWriteGlyphRunAnalysis*) : HRESULT
    @lpVtbl.value.create_glyph_run_analysis.unsafe_as(Proc(DWRITE_GLYPH_RUN*, Float32, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)).call(glyphrun, pixelsperdip, transform, renderingmode, measuringmode, baselineoriginx, baselineoriginy, glyphrunanalysis)
  end
  def get_eudc_font_collection(fontcollection : IDWriteFontCollection*, checkforupdates : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_eudc_font_collection.unsafe_as(Proc(IDWriteFontCollection*, LibC::BOOL, HRESULT)).call(fontcollection, checkforupdates)
  end
  def create_custom_rendering_params2(gamma : Float32, enhancedcontrast : Float32, enhancedcontrastgrayscale : Float32, cleartypelevel : Float32, pixelgeometry : DWRITE_PIXEL_GEOMETRY, renderingmode : DWRITE_RENDERING_MODE, renderingparams : IDWriteRenderingParams1*) : HRESULT
    @lpVtbl.value.create_custom_rendering_params2.unsafe_as(Proc(Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams1*, HRESULT)).call(gamma, enhancedcontrast, enhancedcontrastgrayscale, cleartypelevel, pixelgeometry, renderingmode, renderingparams)
  end
  def get_system_font_fallback(fontfallback : IDWriteFontFallback*) : HRESULT
    @lpVtbl.value.get_system_font_fallback.unsafe_as(Proc(IDWriteFontFallback*, HRESULT)).call(fontfallback)
  end
  def create_font_fallback_builder(fontfallbackbuilder : IDWriteFontFallbackBuilder*) : HRESULT
    @lpVtbl.value.create_font_fallback_builder.unsafe_as(Proc(IDWriteFontFallbackBuilder*, HRESULT)).call(fontfallbackbuilder)
  end
  def translate_color_glyph_run(baselineoriginx : Float32, baselineoriginy : Float32, glyphrun : DWRITE_GLYPH_RUN*, glyphrundescription : DWRITE_GLYPH_RUN_DESCRIPTION*, measuringmode : DWRITE_MEASURING_MODE, worldtodevicetransform : DWRITE_MATRIX*, colorpaletteindex : UInt32, colorlayers : IDWriteColorGlyphRunEnumerator*) : HRESULT
    @lpVtbl.value.translate_color_glyph_run.unsafe_as(Proc(Float32, Float32, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, DWRITE_MEASURING_MODE, DWRITE_MATRIX*, UInt32, IDWriteColorGlyphRunEnumerator*, HRESULT)).call(baselineoriginx, baselineoriginy, glyphrun, glyphrundescription, measuringmode, worldtodevicetransform, colorpaletteindex, colorlayers)
  end
  def create_custom_rendering_params3(gamma : Float32, enhancedcontrast : Float32, grayscaleenhancedcontrast : Float32, cleartypelevel : Float32, pixelgeometry : DWRITE_PIXEL_GEOMETRY, renderingmode : DWRITE_RENDERING_MODE, gridfitmode : DWRITE_GRID_FIT_MODE, renderingparams : IDWriteRenderingParams2*) : HRESULT
    @lpVtbl.value.create_custom_rendering_params3.unsafe_as(Proc(Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams2*, HRESULT)).call(gamma, enhancedcontrast, grayscaleenhancedcontrast, cleartypelevel, pixelgeometry, renderingmode, gridfitmode, renderingparams)
  end
  def create_glyph_run_analysis2(glyphrun : DWRITE_GLYPH_RUN*, transform : DWRITE_MATRIX*, renderingmode : DWRITE_RENDERING_MODE, measuringmode : DWRITE_MEASURING_MODE, gridfitmode : DWRITE_GRID_FIT_MODE, antialiasmode : DWRITE_TEXT_ANTIALIAS_MODE, baselineoriginx : Float32, baselineoriginy : Float32, glyphrunanalysis : IDWriteGlyphRunAnalysis*) : HRESULT
    @lpVtbl.value.create_glyph_run_analysis2.unsafe_as(Proc(DWRITE_GLYPH_RUN*, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)).call(glyphrun, transform, renderingmode, measuringmode, gridfitmode, antialiasmode, baselineoriginx, baselineoriginy, glyphrunanalysis)
  end
  def create_glyph_run_analysis3(glyphrun : DWRITE_GLYPH_RUN*, transform : DWRITE_MATRIX*, renderingmode : DWRITE_RENDERING_MODE1, measuringmode : DWRITE_MEASURING_MODE, gridfitmode : DWRITE_GRID_FIT_MODE, antialiasmode : DWRITE_TEXT_ANTIALIAS_MODE, baselineoriginx : Float32, baselineoriginy : Float32, glyphrunanalysis : IDWriteGlyphRunAnalysis*) : HRESULT
    @lpVtbl.value.create_glyph_run_analysis3.unsafe_as(Proc(DWRITE_GLYPH_RUN*, DWRITE_MATRIX*, DWRITE_RENDERING_MODE1, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)).call(glyphrun, transform, renderingmode, measuringmode, gridfitmode, antialiasmode, baselineoriginx, baselineoriginy, glyphrunanalysis)
  end
  def create_custom_rendering_params4(gamma : Float32, enhancedcontrast : Float32, grayscaleenhancedcontrast : Float32, cleartypelevel : Float32, pixelgeometry : DWRITE_PIXEL_GEOMETRY, renderingmode : DWRITE_RENDERING_MODE1, gridfitmode : DWRITE_GRID_FIT_MODE, renderingparams : IDWriteRenderingParams3*) : HRESULT
    @lpVtbl.value.create_custom_rendering_params4.unsafe_as(Proc(Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE1, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams3*, HRESULT)).call(gamma, enhancedcontrast, grayscaleenhancedcontrast, cleartypelevel, pixelgeometry, renderingmode, gridfitmode, renderingparams)
  end
  def create_font_face_reference(fontfile : IDWriteFontFile, faceindex : UInt32, fontsimulations : DWRITE_FONT_SIMULATIONS, fontfacereference : IDWriteFontFaceReference*) : HRESULT
    @lpVtbl.value.create_font_face_reference.unsafe_as(Proc(IDWriteFontFile, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference*, HRESULT)).call(fontfile, faceindex, fontsimulations, fontfacereference)
  end
  def create_font_face_reference2(filepath : LibC::LPWSTR, lastwritetime : FILETIME*, faceindex : UInt32, fontsimulations : DWRITE_FONT_SIMULATIONS, fontfacereference : IDWriteFontFaceReference*) : HRESULT
    @lpVtbl.value.create_font_face_reference2.unsafe_as(Proc(LibC::LPWSTR, FILETIME*, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference*, HRESULT)).call(filepath, lastwritetime, faceindex, fontsimulations, fontfacereference)
  end
  def get_system_font_set(fontset : IDWriteFontSet*) : HRESULT
    @lpVtbl.value.get_system_font_set.unsafe_as(Proc(IDWriteFontSet*, HRESULT)).call(fontset)
  end
  def create_font_set_builder(fontsetbuilder : IDWriteFontSetBuilder*) : HRESULT
    @lpVtbl.value.create_font_set_builder.unsafe_as(Proc(IDWriteFontSetBuilder*, HRESULT)).call(fontsetbuilder)
  end
  def create_font_collection_from_font_set(fontset : IDWriteFontSet, fontcollection : IDWriteFontCollection1*) : HRESULT
    @lpVtbl.value.create_font_collection_from_font_set.unsafe_as(Proc(IDWriteFontSet, IDWriteFontCollection1*, HRESULT)).call(fontset, fontcollection)
  end
  def get_system_font_collection2(includedownloadablefonts : LibC::BOOL, fontcollection : IDWriteFontCollection1*, checkforupdates : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_system_font_collection2.unsafe_as(Proc(LibC::BOOL, IDWriteFontCollection1*, LibC::BOOL, HRESULT)).call(includedownloadablefonts, fontcollection, checkforupdates)
  end
  def get_font_download_queue(fontdownloadqueue : IDWriteFontDownloadQueue*) : HRESULT
    @lpVtbl.value.get_font_download_queue.unsafe_as(Proc(IDWriteFontDownloadQueue*, HRESULT)).call(fontdownloadqueue)
  end
  def translate_color_glyph_run2(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, glyphrundescription : DWRITE_GLYPH_RUN_DESCRIPTION*, desiredglyphimageformats : DWRITE_GLYPH_IMAGE_FORMATS, measuringmode : DWRITE_MEASURING_MODE, worldanddpitransform : DWRITE_MATRIX*, colorpaletteindex : UInt32, colorlayers : IDWriteColorGlyphRunEnumerator1*) : HRESULT
    @lpVtbl.value.translate_color_glyph_run2.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, DWRITE_GLYPH_IMAGE_FORMATS, DWRITE_MEASURING_MODE, DWRITE_MATRIX*, UInt32, IDWriteColorGlyphRunEnumerator1*, HRESULT)).call(baselineorigin, glyphrun, glyphrundescription, desiredglyphimageformats, measuringmode, worldanddpitransform, colorpaletteindex, colorlayers)
  end
  def compute_glyph_origins(glyphrun : DWRITE_GLYPH_RUN*, baselineorigin : D2D_POINT_2F, glyphorigins : D2D_POINT_2F*) : HRESULT
    @lpVtbl.value.compute_glyph_origins.unsafe_as(Proc(DWRITE_GLYPH_RUN*, D2D_POINT_2F, D2D_POINT_2F*, HRESULT)).call(glyphrun, baselineorigin, glyphorigins)
  end
  def compute_glyph_origins2(glyphrun : DWRITE_GLYPH_RUN*, measuringmode : DWRITE_MEASURING_MODE, baselineorigin : D2D_POINT_2F, worldanddpitransform : DWRITE_MATRIX*, glyphorigins : D2D_POINT_2F*) : HRESULT
    @lpVtbl.value.compute_glyph_origins2.unsafe_as(Proc(DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D_POINT_2F, DWRITE_MATRIX*, D2D_POINT_2F*, HRESULT)).call(glyphrun, measuringmode, baselineorigin, worldanddpitransform, glyphorigins)
  end
  def create_font_set_builder2(fontsetbuilder : IDWriteFontSetBuilder1*) : HRESULT
    @lpVtbl.value.create_font_set_builder2.unsafe_as(Proc(IDWriteFontSetBuilder1*, HRESULT)).call(fontsetbuilder)
  end
  def create_in_memory_font_file_loader(newloader : IDWriteInMemoryFontFileLoader*) : HRESULT
    @lpVtbl.value.create_in_memory_font_file_loader.unsafe_as(Proc(IDWriteInMemoryFontFileLoader*, HRESULT)).call(newloader)
  end
  def create_http_font_file_loader(referrerurl : LibC::LPWSTR, extraheaders : LibC::LPWSTR, newloader : IDWriteRemoteFontFileLoader*) : HRESULT
    @lpVtbl.value.create_http_font_file_loader.unsafe_as(Proc(LibC::LPWSTR, LibC::LPWSTR, IDWriteRemoteFontFileLoader*, HRESULT)).call(referrerurl, extraheaders, newloader)
  end
  def analyze_container_type(filedata : Void*, filedatasize : UInt32) : DWRITE_CONTAINER_TYPE
    @lpVtbl.value.analyze_container_type.unsafe_as(Proc(Void*, UInt32, DWRITE_CONTAINER_TYPE)).call(filedata, filedatasize)
  end
  def unpack_font_file(containertype : DWRITE_CONTAINER_TYPE, filedata : Void*, filedatasize : UInt32, unpackedfontstream : IDWriteFontFileStream*) : HRESULT
    @lpVtbl.value.unpack_font_file.unsafe_as(Proc(DWRITE_CONTAINER_TYPE, Void*, UInt32, IDWriteFontFileStream*, HRESULT)).call(containertype, filedata, filedatasize, unpackedfontstream)
  end
  def create_font_face_reference3(fontfile : IDWriteFontFile, faceindex : UInt32, fontsimulations : DWRITE_FONT_SIMULATIONS, fontaxisvalues : DWRITE_FONT_AXIS_VALUE*, fontaxisvaluecount : UInt32, fontfacereference : IDWriteFontFaceReference1*) : HRESULT
    @lpVtbl.value.create_font_face_reference3.unsafe_as(Proc(IDWriteFontFile, UInt32, DWRITE_FONT_SIMULATIONS, DWRITE_FONT_AXIS_VALUE*, UInt32, IDWriteFontFaceReference1*, HRESULT)).call(fontfile, faceindex, fontsimulations, fontaxisvalues, fontaxisvaluecount, fontfacereference)
  end
  def create_font_resource(fontfile : IDWriteFontFile, faceindex : UInt32, fontresource : IDWriteFontResource*) : HRESULT
    @lpVtbl.value.create_font_resource.unsafe_as(Proc(IDWriteFontFile, UInt32, IDWriteFontResource*, HRESULT)).call(fontfile, faceindex, fontresource)
  end
  def get_system_font_set2(includedownloadablefonts : LibC::BOOL, fontset : IDWriteFontSet1*) : HRESULT
    @lpVtbl.value.get_system_font_set2.unsafe_as(Proc(LibC::BOOL, IDWriteFontSet1*, HRESULT)).call(includedownloadablefonts, fontset)
  end
  def get_system_font_collection3(includedownloadablefonts : LibC::BOOL, fontfamilymodel : DWRITE_FONT_FAMILY_MODEL, fontcollection : IDWriteFontCollection2*) : HRESULT
    @lpVtbl.value.get_system_font_collection3.unsafe_as(Proc(LibC::BOOL, DWRITE_FONT_FAMILY_MODEL, IDWriteFontCollection2*, HRESULT)).call(includedownloadablefonts, fontfamilymodel, fontcollection)
  end
  def create_font_collection_from_font_set2(fontset : IDWriteFontSet, fontfamilymodel : DWRITE_FONT_FAMILY_MODEL, fontcollection : IDWriteFontCollection2*) : HRESULT
    @lpVtbl.value.create_font_collection_from_font_set2.unsafe_as(Proc(IDWriteFontSet, DWRITE_FONT_FAMILY_MODEL, IDWriteFontCollection2*, HRESULT)).call(fontset, fontfamilymodel, fontcollection)
  end
  def create_font_set_builder3(fontsetbuilder : IDWriteFontSetBuilder2*) : HRESULT
    @lpVtbl.value.create_font_set_builder3.unsafe_as(Proc(IDWriteFontSetBuilder2*, HRESULT)).call(fontsetbuilder)
  end
  def create_text_format2(fontfamilyname : LibC::LPWSTR, fontcollection : IDWriteFontCollection, fontaxisvalues : DWRITE_FONT_AXIS_VALUE*, fontaxisvaluecount : UInt32, fontsize : Float32, localename : LibC::LPWSTR, textformat : IDWriteTextFormat3*) : HRESULT
    @lpVtbl.value.create_text_format2.unsafe_as(Proc(LibC::LPWSTR, IDWriteFontCollection, DWRITE_FONT_AXIS_VALUE*, UInt32, Float32, LibC::LPWSTR, IDWriteTextFormat3*, HRESULT)).call(fontfamilyname, fontcollection, fontaxisvalues, fontaxisvaluecount, fontsize, localename, textformat)
  end
end
struct LibWin32::IDWriteFontFace5
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type : DWRITE_FONT_FACE_TYPE
    @lpVtbl.value.get_type.unsafe_as(Proc(DWRITE_FONT_FACE_TYPE)).call
  end
  def get_files(numberoffiles : UInt32*, fontfiles : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.get_files.unsafe_as(Proc(UInt32*, IDWriteFontFile*, HRESULT)).call(numberoffiles, fontfiles)
  end
  def get_index : UInt32
    @lpVtbl.value.get_index.unsafe_as(Proc(UInt32)).call
  end
  def get_simulations : DWRITE_FONT_SIMULATIONS
    @lpVtbl.value.get_simulations.unsafe_as(Proc(DWRITE_FONT_SIMULATIONS)).call
  end
  def is_symbol_font : LibC::BOOL
    @lpVtbl.value.is_symbol_font.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_metrics(fontfacemetrics : DWRITE_FONT_METRICS*) : Void
    @lpVtbl.value.get_metrics.unsafe_as(Proc(DWRITE_FONT_METRICS*, Void)).call(fontfacemetrics)
  end
  def get_glyph_count : UInt16
    @lpVtbl.value.get_glyph_count.unsafe_as(Proc(UInt16)).call
  end
  def get_design_glyph_metrics(glyphindices : UInt16*, glyphcount : UInt32, glyphmetrics : DWRITE_GLYPH_METRICS*, issideways : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_design_glyph_metrics.unsafe_as(Proc(UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)).call(glyphindices, glyphcount, glyphmetrics, issideways)
  end
  def get_glyph_indices(codepoints : UInt32*, codepointcount : UInt32, glyphindices : UInt16*) : HRESULT
    @lpVtbl.value.get_glyph_indices.unsafe_as(Proc(UInt32*, UInt32, UInt16*, HRESULT)).call(codepoints, codepointcount, glyphindices)
  end
  def try_get_font_table(opentypetabletag : UInt32, tabledata : Void**, tablesize : UInt32*, tablecontext : Void**, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.try_get_font_table.unsafe_as(Proc(UInt32, Void**, UInt32*, Void**, LibC::BOOL*, HRESULT)).call(opentypetabletag, tabledata, tablesize, tablecontext, exists)
  end
  def release_font_table(tablecontext : Void*) : Void
    @lpVtbl.value.release_font_table.unsafe_as(Proc(Void*, Void)).call(tablecontext)
  end
  def get_glyph_run_outline(emsize : Float32, glyphindices : UInt16*, glyphadvances : Float32*, glyphoffsets : DWRITE_GLYPH_OFFSET*, glyphcount : UInt32, issideways : LibC::BOOL, isrighttoleft : LibC::BOOL, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.get_glyph_run_outline.unsafe_as(Proc(Float32, UInt16*, Float32*, DWRITE_GLYPH_OFFSET*, UInt32, LibC::BOOL, LibC::BOOL, ID2D1SimplifiedGeometrySink, HRESULT)).call(emsize, glyphindices, glyphadvances, glyphoffsets, glyphcount, issideways, isrighttoleft, geometrysink)
  end
  def get_recommended_rendering_mode(emsize : Float32, pixelsperdip : Float32, measuringmode : DWRITE_MEASURING_MODE, renderingparams : IDWriteRenderingParams, renderingmode : DWRITE_RENDERING_MODE*) : HRESULT
    @lpVtbl.value.get_recommended_rendering_mode.unsafe_as(Proc(Float32, Float32, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE*, HRESULT)).call(emsize, pixelsperdip, measuringmode, renderingparams, renderingmode)
  end
  def get_gdi_compatible_metrics(emsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, fontfacemetrics : DWRITE_FONT_METRICS*) : HRESULT
    @lpVtbl.value.get_gdi_compatible_metrics.unsafe_as(Proc(Float32, Float32, DWRITE_MATRIX*, DWRITE_FONT_METRICS*, HRESULT)).call(emsize, pixelsperdip, transform, fontfacemetrics)
  end
  def get_gdi_compatible_glyph_metrics(emsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, usegdinatural : LibC::BOOL, glyphindices : UInt16*, glyphcount : UInt32, glyphmetrics : DWRITE_GLYPH_METRICS*, issideways : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_gdi_compatible_glyph_metrics.unsafe_as(Proc(Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)).call(emsize, pixelsperdip, transform, usegdinatural, glyphindices, glyphcount, glyphmetrics, issideways)
  end
  def get_metrics2(fontmetrics : DWRITE_FONT_METRICS1*) : Void
    @lpVtbl.value.get_metrics2.unsafe_as(Proc(DWRITE_FONT_METRICS1*, Void)).call(fontmetrics)
  end
  def get_gdi_compatible_metrics2(emsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, fontmetrics : DWRITE_FONT_METRICS1*) : HRESULT
    @lpVtbl.value.get_gdi_compatible_metrics2.unsafe_as(Proc(Float32, Float32, DWRITE_MATRIX*, DWRITE_FONT_METRICS1*, HRESULT)).call(emsize, pixelsperdip, transform, fontmetrics)
  end
  def get_caret_metrics(caretmetrics : DWRITE_CARET_METRICS*) : Void
    @lpVtbl.value.get_caret_metrics.unsafe_as(Proc(DWRITE_CARET_METRICS*, Void)).call(caretmetrics)
  end
  def get_unicode_ranges(maxrangecount : UInt32, unicoderanges : DWRITE_UNICODE_RANGE*, actualrangecount : UInt32*) : HRESULT
    @lpVtbl.value.get_unicode_ranges.unsafe_as(Proc(UInt32, DWRITE_UNICODE_RANGE*, UInt32*, HRESULT)).call(maxrangecount, unicoderanges, actualrangecount)
  end
  def is_monospaced_font : LibC::BOOL
    @lpVtbl.value.is_monospaced_font.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_design_glyph_advances(glyphcount : UInt32, glyphindices : UInt16*, glyphadvances : Int32*, issideways : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_design_glyph_advances.unsafe_as(Proc(UInt32, UInt16*, Int32*, LibC::BOOL, HRESULT)).call(glyphcount, glyphindices, glyphadvances, issideways)
  end
  def get_gdi_compatible_glyph_advances(emsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, usegdinatural : LibC::BOOL, issideways : LibC::BOOL, glyphcount : UInt32, glyphindices : UInt16*, glyphadvances : Int32*) : HRESULT
    @lpVtbl.value.get_gdi_compatible_glyph_advances.unsafe_as(Proc(Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, LibC::BOOL, UInt32, UInt16*, Int32*, HRESULT)).call(emsize, pixelsperdip, transform, usegdinatural, issideways, glyphcount, glyphindices, glyphadvances)
  end
  def get_kerning_pair_adjustments(glyphcount : UInt32, glyphindices : UInt16*, glyphadvanceadjustments : Int32*) : HRESULT
    @lpVtbl.value.get_kerning_pair_adjustments.unsafe_as(Proc(UInt32, UInt16*, Int32*, HRESULT)).call(glyphcount, glyphindices, glyphadvanceadjustments)
  end
  def has_kerning_pairs : LibC::BOOL
    @lpVtbl.value.has_kerning_pairs.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_recommended_rendering_mode2(fontemsize : Float32, dpix : Float32, dpiy : Float32, transform : DWRITE_MATRIX*, issideways : LibC::BOOL, outlinethreshold : DWRITE_OUTLINE_THRESHOLD, measuringmode : DWRITE_MEASURING_MODE, renderingmode : DWRITE_RENDERING_MODE*) : HRESULT
    @lpVtbl.value.get_recommended_rendering_mode2.unsafe_as(Proc(Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, DWRITE_RENDERING_MODE*, HRESULT)).call(fontemsize, dpix, dpiy, transform, issideways, outlinethreshold, measuringmode, renderingmode)
  end
  def get_vertical_glyph_variants(glyphcount : UInt32, nominalglyphindices : UInt16*, verticalglyphindices : UInt16*) : HRESULT
    @lpVtbl.value.get_vertical_glyph_variants.unsafe_as(Proc(UInt32, UInt16*, UInt16*, HRESULT)).call(glyphcount, nominalglyphindices, verticalglyphindices)
  end
  def has_vertical_glyph_variants : LibC::BOOL
    @lpVtbl.value.has_vertical_glyph_variants.unsafe_as(Proc(LibC::BOOL)).call
  end
  def is_color_font : LibC::BOOL
    @lpVtbl.value.is_color_font.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_color_palette_count : UInt32
    @lpVtbl.value.get_color_palette_count.unsafe_as(Proc(UInt32)).call
  end
  def get_palette_entry_count : UInt32
    @lpVtbl.value.get_palette_entry_count.unsafe_as(Proc(UInt32)).call
  end
  def get_palette_entries(colorpaletteindex : UInt32, firstentryindex : UInt32, entrycount : UInt32, paletteentries : DWRITE_COLOR_F*) : HRESULT
    @lpVtbl.value.get_palette_entries.unsafe_as(Proc(UInt32, UInt32, UInt32, DWRITE_COLOR_F*, HRESULT)).call(colorpaletteindex, firstentryindex, entrycount, paletteentries)
  end
  def get_recommended_rendering_mode3(fontemsize : Float32, dpix : Float32, dpiy : Float32, transform : DWRITE_MATRIX*, issideways : LibC::BOOL, outlinethreshold : DWRITE_OUTLINE_THRESHOLD, measuringmode : DWRITE_MEASURING_MODE, renderingparams : IDWriteRenderingParams, renderingmode : DWRITE_RENDERING_MODE*, gridfitmode : DWRITE_GRID_FIT_MODE*) : HRESULT
    @lpVtbl.value.get_recommended_rendering_mode3.unsafe_as(Proc(Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE*, DWRITE_GRID_FIT_MODE*, HRESULT)).call(fontemsize, dpix, dpiy, transform, issideways, outlinethreshold, measuringmode, renderingparams, renderingmode, gridfitmode)
  end
  def get_font_face_reference(fontfacereference : IDWriteFontFaceReference*) : HRESULT
    @lpVtbl.value.get_font_face_reference.unsafe_as(Proc(IDWriteFontFaceReference*, HRESULT)).call(fontfacereference)
  end
  def get_panose(panose : DWRITE_PANOSE*) : Void
    @lpVtbl.value.get_panose.unsafe_as(Proc(DWRITE_PANOSE*, Void)).call(panose)
  end
  def get_weight : DWRITE_FONT_WEIGHT
    @lpVtbl.value.get_weight.unsafe_as(Proc(DWRITE_FONT_WEIGHT)).call
  end
  def get_stretch : DWRITE_FONT_STRETCH
    @lpVtbl.value.get_stretch.unsafe_as(Proc(DWRITE_FONT_STRETCH)).call
  end
  def get_style : DWRITE_FONT_STYLE
    @lpVtbl.value.get_style.unsafe_as(Proc(DWRITE_FONT_STYLE)).call
  end
  def get_family_names(names : IDWriteLocalizedStrings*) : HRESULT
    @lpVtbl.value.get_family_names.unsafe_as(Proc(IDWriteLocalizedStrings*, HRESULT)).call(names)
  end
  def get_face_names(names : IDWriteLocalizedStrings*) : HRESULT
    @lpVtbl.value.get_face_names.unsafe_as(Proc(IDWriteLocalizedStrings*, HRESULT)).call(names)
  end
  def get_informational_strings(informationalstringid : DWRITE_INFORMATIONAL_STRING_ID, informationalstrings : IDWriteLocalizedStrings*, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_informational_strings.unsafe_as(Proc(DWRITE_INFORMATIONAL_STRING_ID, IDWriteLocalizedStrings*, LibC::BOOL*, HRESULT)).call(informationalstringid, informationalstrings, exists)
  end
  def has_character(unicodevalue : UInt32) : LibC::BOOL
    @lpVtbl.value.has_character.unsafe_as(Proc(UInt32, LibC::BOOL)).call(unicodevalue)
  end
  def get_recommended_rendering_mode4(fontemsize : Float32, dpix : Float32, dpiy : Float32, transform : DWRITE_MATRIX*, issideways : LibC::BOOL, outlinethreshold : DWRITE_OUTLINE_THRESHOLD, measuringmode : DWRITE_MEASURING_MODE, renderingparams : IDWriteRenderingParams, renderingmode : DWRITE_RENDERING_MODE1*, gridfitmode : DWRITE_GRID_FIT_MODE*) : HRESULT
    @lpVtbl.value.get_recommended_rendering_mode4.unsafe_as(Proc(Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE1*, DWRITE_GRID_FIT_MODE*, HRESULT)).call(fontemsize, dpix, dpiy, transform, issideways, outlinethreshold, measuringmode, renderingparams, renderingmode, gridfitmode)
  end
  def is_character_local(unicodevalue : UInt32) : LibC::BOOL
    @lpVtbl.value.is_character_local.unsafe_as(Proc(UInt32, LibC::BOOL)).call(unicodevalue)
  end
  def is_glyph_local(glyphid : UInt16) : LibC::BOOL
    @lpVtbl.value.is_glyph_local.unsafe_as(Proc(UInt16, LibC::BOOL)).call(glyphid)
  end
  def are_characters_local(characters : Char*, charactercount : UInt32, enqueueifnotlocal : LibC::BOOL, islocal : LibC::BOOL*) : HRESULT
    @lpVtbl.value.are_characters_local.unsafe_as(Proc(Char*, UInt32, LibC::BOOL, LibC::BOOL*, HRESULT)).call(characters, charactercount, enqueueifnotlocal, islocal)
  end
  def are_glyphs_local(glyphindices : UInt16*, glyphcount : UInt32, enqueueifnotlocal : LibC::BOOL, islocal : LibC::BOOL*) : HRESULT
    @lpVtbl.value.are_glyphs_local.unsafe_as(Proc(UInt16*, UInt32, LibC::BOOL, LibC::BOOL*, HRESULT)).call(glyphindices, glyphcount, enqueueifnotlocal, islocal)
  end
  def get_glyph_image_formats(glyphid : UInt16, pixelsperemfirst : UInt32, pixelsperemlast : UInt32, glyphimageformats : DWRITE_GLYPH_IMAGE_FORMATS*) : HRESULT
    @lpVtbl.value.get_glyph_image_formats.unsafe_as(Proc(UInt16, UInt32, UInt32, DWRITE_GLYPH_IMAGE_FORMATS*, HRESULT)).call(glyphid, pixelsperemfirst, pixelsperemlast, glyphimageformats)
  end
  def get_glyph_image_formats2 : DWRITE_GLYPH_IMAGE_FORMATS
    @lpVtbl.value.get_glyph_image_formats2.unsafe_as(Proc(DWRITE_GLYPH_IMAGE_FORMATS)).call
  end
  def get_glyph_image_data(glyphid : UInt16, pixelsperem : UInt32, glyphimageformat : DWRITE_GLYPH_IMAGE_FORMATS, glyphdata : DWRITE_GLYPH_IMAGE_DATA*, glyphdatacontext : Void**) : HRESULT
    @lpVtbl.value.get_glyph_image_data.unsafe_as(Proc(UInt16, UInt32, DWRITE_GLYPH_IMAGE_FORMATS, DWRITE_GLYPH_IMAGE_DATA*, Void**, HRESULT)).call(glyphid, pixelsperem, glyphimageformat, glyphdata, glyphdatacontext)
  end
  def release_glyph_image_data(glyphdatacontext : Void*) : Void
    @lpVtbl.value.release_glyph_image_data.unsafe_as(Proc(Void*, Void)).call(glyphdatacontext)
  end
  def get_font_axis_value_count : UInt32
    @lpVtbl.value.get_font_axis_value_count.unsafe_as(Proc(UInt32)).call
  end
  def get_font_axis_values(fontaxisvalues : DWRITE_FONT_AXIS_VALUE*, fontaxisvaluecount : UInt32) : HRESULT
    @lpVtbl.value.get_font_axis_values.unsafe_as(Proc(DWRITE_FONT_AXIS_VALUE*, UInt32, HRESULT)).call(fontaxisvalues, fontaxisvaluecount)
  end
  def has_variations : LibC::BOOL
    @lpVtbl.value.has_variations.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_font_resource(fontresource : IDWriteFontResource*) : HRESULT
    @lpVtbl.value.get_font_resource.unsafe_as(Proc(IDWriteFontResource*, HRESULT)).call(fontresource)
  end
  def equals(fontface : IDWriteFontFace) : LibC::BOOL
    @lpVtbl.value.equals.unsafe_as(Proc(IDWriteFontFace, LibC::BOOL)).call(fontface)
  end
end
struct LibWin32::IDWriteFontResource
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_font_file(fontfile : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.get_font_file.unsafe_as(Proc(IDWriteFontFile*, HRESULT)).call(fontfile)
  end
  def get_font_face_index : UInt32
    @lpVtbl.value.get_font_face_index.unsafe_as(Proc(UInt32)).call
  end
  def get_font_axis_count : UInt32
    @lpVtbl.value.get_font_axis_count.unsafe_as(Proc(UInt32)).call
  end
  def get_default_font_axis_values(fontaxisvalues : DWRITE_FONT_AXIS_VALUE*, fontaxisvaluecount : UInt32) : HRESULT
    @lpVtbl.value.get_default_font_axis_values.unsafe_as(Proc(DWRITE_FONT_AXIS_VALUE*, UInt32, HRESULT)).call(fontaxisvalues, fontaxisvaluecount)
  end
  def get_font_axis_ranges(fontaxisranges : DWRITE_FONT_AXIS_RANGE*, fontaxisrangecount : UInt32) : HRESULT
    @lpVtbl.value.get_font_axis_ranges.unsafe_as(Proc(DWRITE_FONT_AXIS_RANGE*, UInt32, HRESULT)).call(fontaxisranges, fontaxisrangecount)
  end
  def get_font_axis_attributes(axisindex : UInt32) : DWRITE_FONT_AXIS_ATTRIBUTES
    @lpVtbl.value.get_font_axis_attributes.unsafe_as(Proc(UInt32, DWRITE_FONT_AXIS_ATTRIBUTES)).call(axisindex)
  end
  def get_axis_names(axisindex : UInt32, names : IDWriteLocalizedStrings*) : HRESULT
    @lpVtbl.value.get_axis_names.unsafe_as(Proc(UInt32, IDWriteLocalizedStrings*, HRESULT)).call(axisindex, names)
  end
  def get_axis_value_name_count(axisindex : UInt32) : UInt32
    @lpVtbl.value.get_axis_value_name_count.unsafe_as(Proc(UInt32, UInt32)).call(axisindex)
  end
  def get_axis_value_names(axisindex : UInt32, axisvalueindex : UInt32, fontaxisrange : DWRITE_FONT_AXIS_RANGE*, names : IDWriteLocalizedStrings*) : HRESULT
    @lpVtbl.value.get_axis_value_names.unsafe_as(Proc(UInt32, UInt32, DWRITE_FONT_AXIS_RANGE*, IDWriteLocalizedStrings*, HRESULT)).call(axisindex, axisvalueindex, fontaxisrange, names)
  end
  def has_variations : LibC::BOOL
    @lpVtbl.value.has_variations.unsafe_as(Proc(LibC::BOOL)).call
  end
  def create_font_face(fontsimulations : DWRITE_FONT_SIMULATIONS, fontaxisvalues : DWRITE_FONT_AXIS_VALUE*, fontaxisvaluecount : UInt32, fontface : IDWriteFontFace5*) : HRESULT
    @lpVtbl.value.create_font_face.unsafe_as(Proc(DWRITE_FONT_SIMULATIONS, DWRITE_FONT_AXIS_VALUE*, UInt32, IDWriteFontFace5*, HRESULT)).call(fontsimulations, fontaxisvalues, fontaxisvaluecount, fontface)
  end
  def create_font_face_reference(fontsimulations : DWRITE_FONT_SIMULATIONS, fontaxisvalues : DWRITE_FONT_AXIS_VALUE*, fontaxisvaluecount : UInt32, fontfacereference : IDWriteFontFaceReference1*) : HRESULT
    @lpVtbl.value.create_font_face_reference.unsafe_as(Proc(DWRITE_FONT_SIMULATIONS, DWRITE_FONT_AXIS_VALUE*, UInt32, IDWriteFontFaceReference1*, HRESULT)).call(fontsimulations, fontaxisvalues, fontaxisvaluecount, fontfacereference)
  end
end
struct LibWin32::IDWriteFontFaceReference1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def create_font_face(fontface : IDWriteFontFace3*) : HRESULT
    @lpVtbl.value.create_font_face.unsafe_as(Proc(IDWriteFontFace3*, HRESULT)).call(fontface)
  end
  def create_font_face_with_simulations(fontfacesimulationflags : DWRITE_FONT_SIMULATIONS, fontface : IDWriteFontFace3*) : HRESULT
    @lpVtbl.value.create_font_face_with_simulations.unsafe_as(Proc(DWRITE_FONT_SIMULATIONS, IDWriteFontFace3*, HRESULT)).call(fontfacesimulationflags, fontface)
  end
  def equals(fontfacereference : IDWriteFontFaceReference) : LibC::BOOL
    @lpVtbl.value.equals.unsafe_as(Proc(IDWriteFontFaceReference, LibC::BOOL)).call(fontfacereference)
  end
  def get_font_face_index : UInt32
    @lpVtbl.value.get_font_face_index.unsafe_as(Proc(UInt32)).call
  end
  def get_simulations : DWRITE_FONT_SIMULATIONS
    @lpVtbl.value.get_simulations.unsafe_as(Proc(DWRITE_FONT_SIMULATIONS)).call
  end
  def get_font_file(fontfile : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.get_font_file.unsafe_as(Proc(IDWriteFontFile*, HRESULT)).call(fontfile)
  end
  def get_local_file_size : UInt64
    @lpVtbl.value.get_local_file_size.unsafe_as(Proc(UInt64)).call
  end
  def get_file_size : UInt64
    @lpVtbl.value.get_file_size.unsafe_as(Proc(UInt64)).call
  end
  def get_file_time(lastwritetime : FILETIME*) : HRESULT
    @lpVtbl.value.get_file_time.unsafe_as(Proc(FILETIME*, HRESULT)).call(lastwritetime)
  end
  def get_locality : DWRITE_LOCALITY
    @lpVtbl.value.get_locality.unsafe_as(Proc(DWRITE_LOCALITY)).call
  end
  def enqueue_font_download_request : HRESULT
    @lpVtbl.value.enqueue_font_download_request.unsafe_as(Proc(HRESULT)).call
  end
  def enqueue_character_download_request(characters : Char*, charactercount : UInt32) : HRESULT
    @lpVtbl.value.enqueue_character_download_request.unsafe_as(Proc(Char*, UInt32, HRESULT)).call(characters, charactercount)
  end
  def enqueue_glyph_download_request(glyphindices : UInt16*, glyphcount : UInt32) : HRESULT
    @lpVtbl.value.enqueue_glyph_download_request.unsafe_as(Proc(UInt16*, UInt32, HRESULT)).call(glyphindices, glyphcount)
  end
  def enqueue_file_fragment_download_request(fileoffset : UInt64, fragmentsize : UInt64) : HRESULT
    @lpVtbl.value.enqueue_file_fragment_download_request.unsafe_as(Proc(UInt64, UInt64, HRESULT)).call(fileoffset, fragmentsize)
  end
  def create_font_face2(fontface : IDWriteFontFace5*) : HRESULT
    @lpVtbl.value.create_font_face2.unsafe_as(Proc(IDWriteFontFace5*, HRESULT)).call(fontface)
  end
  def get_font_axis_value_count : UInt32
    @lpVtbl.value.get_font_axis_value_count.unsafe_as(Proc(UInt32)).call
  end
  def get_font_axis_values(fontaxisvalues : DWRITE_FONT_AXIS_VALUE*, fontaxisvaluecount : UInt32) : HRESULT
    @lpVtbl.value.get_font_axis_values.unsafe_as(Proc(DWRITE_FONT_AXIS_VALUE*, UInt32, HRESULT)).call(fontaxisvalues, fontaxisvaluecount)
  end
end
struct LibWin32::IDWriteFontSetBuilder2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def add_font_face_reference(fontfacereference : IDWriteFontFaceReference, properties : DWRITE_FONT_PROPERTY*, propertycount : UInt32) : HRESULT
    @lpVtbl.value.add_font_face_reference.unsafe_as(Proc(IDWriteFontFaceReference, DWRITE_FONT_PROPERTY*, UInt32, HRESULT)).call(fontfacereference, properties, propertycount)
  end
  def add_font_face_reference2(fontfacereference : IDWriteFontFaceReference) : HRESULT
    @lpVtbl.value.add_font_face_reference2.unsafe_as(Proc(IDWriteFontFaceReference, HRESULT)).call(fontfacereference)
  end
  def add_font_set(fontset : IDWriteFontSet) : HRESULT
    @lpVtbl.value.add_font_set.unsafe_as(Proc(IDWriteFontSet, HRESULT)).call(fontset)
  end
  def create_font_set(fontset : IDWriteFontSet*) : HRESULT
    @lpVtbl.value.create_font_set.unsafe_as(Proc(IDWriteFontSet*, HRESULT)).call(fontset)
  end
  def add_font_file(fontfile : IDWriteFontFile) : HRESULT
    @lpVtbl.value.add_font_file.unsafe_as(Proc(IDWriteFontFile, HRESULT)).call(fontfile)
  end
  def add_font(fontfile : IDWriteFontFile, fontfaceindex : UInt32, fontsimulations : DWRITE_FONT_SIMULATIONS, fontaxisvalues : DWRITE_FONT_AXIS_VALUE*, fontaxisvaluecount : UInt32, fontaxisranges : DWRITE_FONT_AXIS_RANGE*, fontaxisrangecount : UInt32, properties : DWRITE_FONT_PROPERTY*, propertycount : UInt32) : HRESULT
    @lpVtbl.value.add_font.unsafe_as(Proc(IDWriteFontFile, UInt32, DWRITE_FONT_SIMULATIONS, DWRITE_FONT_AXIS_VALUE*, UInt32, DWRITE_FONT_AXIS_RANGE*, UInt32, DWRITE_FONT_PROPERTY*, UInt32, HRESULT)).call(fontfile, fontfaceindex, fontsimulations, fontaxisvalues, fontaxisvaluecount, fontaxisranges, fontaxisrangecount, properties, propertycount)
  end
  def add_font_file2(filepath : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.add_font_file2.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(filepath)
  end
end
struct LibWin32::IDWriteFontSet1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_font_count : UInt32
    @lpVtbl.value.get_font_count.unsafe_as(Proc(UInt32)).call
  end
  def get_font_face_reference(listindex : UInt32, fontfacereference : IDWriteFontFaceReference*) : HRESULT
    @lpVtbl.value.get_font_face_reference.unsafe_as(Proc(UInt32, IDWriteFontFaceReference*, HRESULT)).call(listindex, fontfacereference)
  end
  def find_font_face_reference(fontfacereference : IDWriteFontFaceReference, listindex : UInt32*, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.find_font_face_reference.unsafe_as(Proc(IDWriteFontFaceReference, UInt32*, LibC::BOOL*, HRESULT)).call(fontfacereference, listindex, exists)
  end
  def find_font_face(fontface : IDWriteFontFace, listindex : UInt32*, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.find_font_face.unsafe_as(Proc(IDWriteFontFace, UInt32*, LibC::BOOL*, HRESULT)).call(fontface, listindex, exists)
  end
  def get_property_values(propertyid : DWRITE_FONT_PROPERTY_ID, values : IDWriteStringList*) : HRESULT
    @lpVtbl.value.get_property_values.unsafe_as(Proc(DWRITE_FONT_PROPERTY_ID, IDWriteStringList*, HRESULT)).call(propertyid, values)
  end
  def get_property_values2(propertyid : DWRITE_FONT_PROPERTY_ID, preferredlocalenames : LibC::LPWSTR, values : IDWriteStringList*) : HRESULT
    @lpVtbl.value.get_property_values2.unsafe_as(Proc(DWRITE_FONT_PROPERTY_ID, LibC::LPWSTR, IDWriteStringList*, HRESULT)).call(propertyid, preferredlocalenames, values)
  end
  def get_property_values3(listindex : UInt32, propertyid : DWRITE_FONT_PROPERTY_ID, exists : LibC::BOOL*, values : IDWriteLocalizedStrings*) : HRESULT
    @lpVtbl.value.get_property_values3.unsafe_as(Proc(UInt32, DWRITE_FONT_PROPERTY_ID, LibC::BOOL*, IDWriteLocalizedStrings*, HRESULT)).call(listindex, propertyid, exists, values)
  end
  def get_property_occurrence_count(property : DWRITE_FONT_PROPERTY*, propertyoccurrencecount : UInt32*) : HRESULT
    @lpVtbl.value.get_property_occurrence_count.unsafe_as(Proc(DWRITE_FONT_PROPERTY*, UInt32*, HRESULT)).call(property, propertyoccurrencecount)
  end
  def get_matching_fonts(familyname : LibC::LPWSTR, fontweight : DWRITE_FONT_WEIGHT, fontstretch : DWRITE_FONT_STRETCH, fontstyle : DWRITE_FONT_STYLE, filteredset : IDWriteFontSet*) : HRESULT
    @lpVtbl.value.get_matching_fonts.unsafe_as(Proc(LibC::LPWSTR, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFontSet*, HRESULT)).call(familyname, fontweight, fontstretch, fontstyle, filteredset)
  end
  def get_matching_fonts2(properties : DWRITE_FONT_PROPERTY*, propertycount : UInt32, filteredset : IDWriteFontSet*) : HRESULT
    @lpVtbl.value.get_matching_fonts2.unsafe_as(Proc(DWRITE_FONT_PROPERTY*, UInt32, IDWriteFontSet*, HRESULT)).call(properties, propertycount, filteredset)
  end
  def get_matching_fonts3(fontproperty : DWRITE_FONT_PROPERTY*, fontaxisvalues : DWRITE_FONT_AXIS_VALUE*, fontaxisvaluecount : UInt32, matchingfonts : IDWriteFontSet1*) : HRESULT
    @lpVtbl.value.get_matching_fonts3.unsafe_as(Proc(DWRITE_FONT_PROPERTY*, DWRITE_FONT_AXIS_VALUE*, UInt32, IDWriteFontSet1*, HRESULT)).call(fontproperty, fontaxisvalues, fontaxisvaluecount, matchingfonts)
  end
  def get_first_font_resources(filteredfontset : IDWriteFontSet1*) : HRESULT
    @lpVtbl.value.get_first_font_resources.unsafe_as(Proc(IDWriteFontSet1*, HRESULT)).call(filteredfontset)
  end
  def get_filtered_fonts(indices : UInt32*, indexcount : UInt32, filteredfontset : IDWriteFontSet1*) : HRESULT
    @lpVtbl.value.get_filtered_fonts.unsafe_as(Proc(UInt32*, UInt32, IDWriteFontSet1*, HRESULT)).call(indices, indexcount, filteredfontset)
  end
  def get_filtered_fonts2(fontaxisranges : DWRITE_FONT_AXIS_RANGE*, fontaxisrangecount : UInt32, selectanyrange : LibC::BOOL, filteredfontset : IDWriteFontSet1*) : HRESULT
    @lpVtbl.value.get_filtered_fonts2.unsafe_as(Proc(DWRITE_FONT_AXIS_RANGE*, UInt32, LibC::BOOL, IDWriteFontSet1*, HRESULT)).call(fontaxisranges, fontaxisrangecount, selectanyrange, filteredfontset)
  end
  def get_filtered_fonts3(properties : DWRITE_FONT_PROPERTY*, propertycount : UInt32, selectanyproperty : LibC::BOOL, filteredfontset : IDWriteFontSet1*) : HRESULT
    @lpVtbl.value.get_filtered_fonts3.unsafe_as(Proc(DWRITE_FONT_PROPERTY*, UInt32, LibC::BOOL, IDWriteFontSet1*, HRESULT)).call(properties, propertycount, selectanyproperty, filteredfontset)
  end
  def get_filtered_font_indices(fontaxisranges : DWRITE_FONT_AXIS_RANGE*, fontaxisrangecount : UInt32, selectanyrange : LibC::BOOL, indices : UInt32*, maxindexcount : UInt32, actualindexcount : UInt32*) : HRESULT
    @lpVtbl.value.get_filtered_font_indices.unsafe_as(Proc(DWRITE_FONT_AXIS_RANGE*, UInt32, LibC::BOOL, UInt32*, UInt32, UInt32*, HRESULT)).call(fontaxisranges, fontaxisrangecount, selectanyrange, indices, maxindexcount, actualindexcount)
  end
  def get_filtered_font_indices2(properties : DWRITE_FONT_PROPERTY*, propertycount : UInt32, selectanyproperty : LibC::BOOL, indices : UInt32*, maxindexcount : UInt32, actualindexcount : UInt32*) : HRESULT
    @lpVtbl.value.get_filtered_font_indices2.unsafe_as(Proc(DWRITE_FONT_PROPERTY*, UInt32, LibC::BOOL, UInt32*, UInt32, UInt32*, HRESULT)).call(properties, propertycount, selectanyproperty, indices, maxindexcount, actualindexcount)
  end
  def get_font_axis_ranges(listindex : UInt32, fontaxisranges : DWRITE_FONT_AXIS_RANGE*, maxfontaxisrangecount : UInt32, actualfontaxisrangecount : UInt32*) : HRESULT
    @lpVtbl.value.get_font_axis_ranges.unsafe_as(Proc(UInt32, DWRITE_FONT_AXIS_RANGE*, UInt32, UInt32*, HRESULT)).call(listindex, fontaxisranges, maxfontaxisrangecount, actualfontaxisrangecount)
  end
  def get_font_axis_ranges2(fontaxisranges : DWRITE_FONT_AXIS_RANGE*, maxfontaxisrangecount : UInt32, actualfontaxisrangecount : UInt32*) : HRESULT
    @lpVtbl.value.get_font_axis_ranges2.unsafe_as(Proc(DWRITE_FONT_AXIS_RANGE*, UInt32, UInt32*, HRESULT)).call(fontaxisranges, maxfontaxisrangecount, actualfontaxisrangecount)
  end
  def get_font_face_reference2(listindex : UInt32, fontfacereference : IDWriteFontFaceReference1*) : HRESULT
    @lpVtbl.value.get_font_face_reference2.unsafe_as(Proc(UInt32, IDWriteFontFaceReference1*, HRESULT)).call(listindex, fontfacereference)
  end
  def create_font_resource(listindex : UInt32, fontresource : IDWriteFontResource*) : HRESULT
    @lpVtbl.value.create_font_resource.unsafe_as(Proc(UInt32, IDWriteFontResource*, HRESULT)).call(listindex, fontresource)
  end
  def create_font_face(listindex : UInt32, fontface : IDWriteFontFace5*) : HRESULT
    @lpVtbl.value.create_font_face.unsafe_as(Proc(UInt32, IDWriteFontFace5*, HRESULT)).call(listindex, fontface)
  end
  def get_font_locality(listindex : UInt32) : DWRITE_LOCALITY
    @lpVtbl.value.get_font_locality.unsafe_as(Proc(UInt32, DWRITE_LOCALITY)).call(listindex)
  end
end
struct LibWin32::IDWriteFontList2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_font_collection(fontcollection : IDWriteFontCollection*) : HRESULT
    @lpVtbl.value.get_font_collection.unsafe_as(Proc(IDWriteFontCollection*, HRESULT)).call(fontcollection)
  end
  def get_font_count : UInt32
    @lpVtbl.value.get_font_count.unsafe_as(Proc(UInt32)).call
  end
  def get_font(index : UInt32, font : IDWriteFont*) : HRESULT
    @lpVtbl.value.get_font.unsafe_as(Proc(UInt32, IDWriteFont*, HRESULT)).call(index, font)
  end
  def get_font_locality(listindex : UInt32) : DWRITE_LOCALITY
    @lpVtbl.value.get_font_locality.unsafe_as(Proc(UInt32, DWRITE_LOCALITY)).call(listindex)
  end
  def get_font2(listindex : UInt32, font : IDWriteFont3*) : HRESULT
    @lpVtbl.value.get_font2.unsafe_as(Proc(UInt32, IDWriteFont3*, HRESULT)).call(listindex, font)
  end
  def get_font_face_reference(listindex : UInt32, fontfacereference : IDWriteFontFaceReference*) : HRESULT
    @lpVtbl.value.get_font_face_reference.unsafe_as(Proc(UInt32, IDWriteFontFaceReference*, HRESULT)).call(listindex, fontfacereference)
  end
  def get_font_set(fontset : IDWriteFontSet1*) : HRESULT
    @lpVtbl.value.get_font_set.unsafe_as(Proc(IDWriteFontSet1*, HRESULT)).call(fontset)
  end
end
struct LibWin32::IDWriteFontFamily2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_font_collection(fontcollection : IDWriteFontCollection*) : HRESULT
    @lpVtbl.value.get_font_collection.unsafe_as(Proc(IDWriteFontCollection*, HRESULT)).call(fontcollection)
  end
  def get_font_count : UInt32
    @lpVtbl.value.get_font_count.unsafe_as(Proc(UInt32)).call
  end
  def get_font(index : UInt32, font : IDWriteFont*) : HRESULT
    @lpVtbl.value.get_font.unsafe_as(Proc(UInt32, IDWriteFont*, HRESULT)).call(index, font)
  end
  def get_family_names(names : IDWriteLocalizedStrings*) : HRESULT
    @lpVtbl.value.get_family_names.unsafe_as(Proc(IDWriteLocalizedStrings*, HRESULT)).call(names)
  end
  def get_first_matching_font(weight : DWRITE_FONT_WEIGHT, stretch : DWRITE_FONT_STRETCH, style : DWRITE_FONT_STYLE, matchingfont : IDWriteFont*) : HRESULT
    @lpVtbl.value.get_first_matching_font.unsafe_as(Proc(DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFont*, HRESULT)).call(weight, stretch, style, matchingfont)
  end
  def get_matching_fonts(weight : DWRITE_FONT_WEIGHT, stretch : DWRITE_FONT_STRETCH, style : DWRITE_FONT_STYLE, matchingfonts : IDWriteFontList*) : HRESULT
    @lpVtbl.value.get_matching_fonts.unsafe_as(Proc(DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFontList*, HRESULT)).call(weight, stretch, style, matchingfonts)
  end
  def get_font_locality(listindex : UInt32) : DWRITE_LOCALITY
    @lpVtbl.value.get_font_locality.unsafe_as(Proc(UInt32, DWRITE_LOCALITY)).call(listindex)
  end
  def get_font2(listindex : UInt32, font : IDWriteFont3*) : HRESULT
    @lpVtbl.value.get_font2.unsafe_as(Proc(UInt32, IDWriteFont3*, HRESULT)).call(listindex, font)
  end
  def get_font_face_reference(listindex : UInt32, fontfacereference : IDWriteFontFaceReference*) : HRESULT
    @lpVtbl.value.get_font_face_reference.unsafe_as(Proc(UInt32, IDWriteFontFaceReference*, HRESULT)).call(listindex, fontfacereference)
  end
  def get_matching_fonts2(fontaxisvalues : DWRITE_FONT_AXIS_VALUE*, fontaxisvaluecount : UInt32, matchingfonts : IDWriteFontList2*) : HRESULT
    @lpVtbl.value.get_matching_fonts2.unsafe_as(Proc(DWRITE_FONT_AXIS_VALUE*, UInt32, IDWriteFontList2*, HRESULT)).call(fontaxisvalues, fontaxisvaluecount, matchingfonts)
  end
  def get_font_set(fontset : IDWriteFontSet1*) : HRESULT
    @lpVtbl.value.get_font_set.unsafe_as(Proc(IDWriteFontSet1*, HRESULT)).call(fontset)
  end
end
struct LibWin32::IDWriteFontCollection2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_font_family_count : UInt32
    @lpVtbl.value.get_font_family_count.unsafe_as(Proc(UInt32)).call
  end
  def get_font_family(index : UInt32, fontfamily : IDWriteFontFamily*) : HRESULT
    @lpVtbl.value.get_font_family.unsafe_as(Proc(UInt32, IDWriteFontFamily*, HRESULT)).call(index, fontfamily)
  end
  def find_family_name(familyname : LibC::LPWSTR, index : UInt32*, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.find_family_name.unsafe_as(Proc(LibC::LPWSTR, UInt32*, LibC::BOOL*, HRESULT)).call(familyname, index, exists)
  end
  def get_font_from_font_face(fontface : IDWriteFontFace, font : IDWriteFont*) : HRESULT
    @lpVtbl.value.get_font_from_font_face.unsafe_as(Proc(IDWriteFontFace, IDWriteFont*, HRESULT)).call(fontface, font)
  end
  def get_font_set(fontset : IDWriteFontSet*) : HRESULT
    @lpVtbl.value.get_font_set.unsafe_as(Proc(IDWriteFontSet*, HRESULT)).call(fontset)
  end
  def get_font_family2(index : UInt32, fontfamily : IDWriteFontFamily1*) : HRESULT
    @lpVtbl.value.get_font_family2.unsafe_as(Proc(UInt32, IDWriteFontFamily1*, HRESULT)).call(index, fontfamily)
  end
  def get_font_family3(index : UInt32, fontfamily : IDWriteFontFamily2*) : HRESULT
    @lpVtbl.value.get_font_family3.unsafe_as(Proc(UInt32, IDWriteFontFamily2*, HRESULT)).call(index, fontfamily)
  end
  def get_matching_fonts(familyname : LibC::LPWSTR, fontaxisvalues : DWRITE_FONT_AXIS_VALUE*, fontaxisvaluecount : UInt32, fontlist : IDWriteFontList2*) : HRESULT
    @lpVtbl.value.get_matching_fonts.unsafe_as(Proc(LibC::LPWSTR, DWRITE_FONT_AXIS_VALUE*, UInt32, IDWriteFontList2*, HRESULT)).call(familyname, fontaxisvalues, fontaxisvaluecount, fontlist)
  end
  def get_font_family_model : DWRITE_FONT_FAMILY_MODEL
    @lpVtbl.value.get_font_family_model.unsafe_as(Proc(DWRITE_FONT_FAMILY_MODEL)).call
  end
  def get_font_set2(fontset : IDWriteFontSet1*) : HRESULT
    @lpVtbl.value.get_font_set2.unsafe_as(Proc(IDWriteFontSet1*, HRESULT)).call(fontset)
  end
end
struct LibWin32::IDWriteTextLayout4
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_text_alignment(textalignment : DWRITE_TEXT_ALIGNMENT) : HRESULT
    @lpVtbl.value.set_text_alignment.unsafe_as(Proc(DWRITE_TEXT_ALIGNMENT, HRESULT)).call(textalignment)
  end
  def set_paragraph_alignment(paragraphalignment : DWRITE_PARAGRAPH_ALIGNMENT) : HRESULT
    @lpVtbl.value.set_paragraph_alignment.unsafe_as(Proc(DWRITE_PARAGRAPH_ALIGNMENT, HRESULT)).call(paragraphalignment)
  end
  def set_word_wrapping(wordwrapping : DWRITE_WORD_WRAPPING) : HRESULT
    @lpVtbl.value.set_word_wrapping.unsafe_as(Proc(DWRITE_WORD_WRAPPING, HRESULT)).call(wordwrapping)
  end
  def set_reading_direction(readingdirection : DWRITE_READING_DIRECTION) : HRESULT
    @lpVtbl.value.set_reading_direction.unsafe_as(Proc(DWRITE_READING_DIRECTION, HRESULT)).call(readingdirection)
  end
  def set_flow_direction(flowdirection : DWRITE_FLOW_DIRECTION) : HRESULT
    @lpVtbl.value.set_flow_direction.unsafe_as(Proc(DWRITE_FLOW_DIRECTION, HRESULT)).call(flowdirection)
  end
  def set_incremental_tab_stop(incrementaltabstop : Float32) : HRESULT
    @lpVtbl.value.set_incremental_tab_stop.unsafe_as(Proc(Float32, HRESULT)).call(incrementaltabstop)
  end
  def set_trimming(trimmingoptions : DWRITE_TRIMMING*, trimmingsign : IDWriteInlineObject) : HRESULT
    @lpVtbl.value.set_trimming.unsafe_as(Proc(DWRITE_TRIMMING*, IDWriteInlineObject, HRESULT)).call(trimmingoptions, trimmingsign)
  end
  def set_line_spacing(linespacingmethod : DWRITE_LINE_SPACING_METHOD, linespacing : Float32, baseline : Float32) : HRESULT
    @lpVtbl.value.set_line_spacing.unsafe_as(Proc(DWRITE_LINE_SPACING_METHOD, Float32, Float32, HRESULT)).call(linespacingmethod, linespacing, baseline)
  end
  def get_text_alignment : DWRITE_TEXT_ALIGNMENT
    @lpVtbl.value.get_text_alignment.unsafe_as(Proc(DWRITE_TEXT_ALIGNMENT)).call
  end
  def get_paragraph_alignment : DWRITE_PARAGRAPH_ALIGNMENT
    @lpVtbl.value.get_paragraph_alignment.unsafe_as(Proc(DWRITE_PARAGRAPH_ALIGNMENT)).call
  end
  def get_word_wrapping : DWRITE_WORD_WRAPPING
    @lpVtbl.value.get_word_wrapping.unsafe_as(Proc(DWRITE_WORD_WRAPPING)).call
  end
  def get_reading_direction : DWRITE_READING_DIRECTION
    @lpVtbl.value.get_reading_direction.unsafe_as(Proc(DWRITE_READING_DIRECTION)).call
  end
  def get_flow_direction : DWRITE_FLOW_DIRECTION
    @lpVtbl.value.get_flow_direction.unsafe_as(Proc(DWRITE_FLOW_DIRECTION)).call
  end
  def get_incremental_tab_stop : Float32
    @lpVtbl.value.get_incremental_tab_stop.unsafe_as(Proc(Float32)).call
  end
  def get_trimming(trimmingoptions : DWRITE_TRIMMING*, trimmingsign : IDWriteInlineObject*) : HRESULT
    @lpVtbl.value.get_trimming.unsafe_as(Proc(DWRITE_TRIMMING*, IDWriteInlineObject*, HRESULT)).call(trimmingoptions, trimmingsign)
  end
  def get_line_spacing(linespacingmethod : DWRITE_LINE_SPACING_METHOD*, linespacing : Float32*, baseline : Float32*) : HRESULT
    @lpVtbl.value.get_line_spacing.unsafe_as(Proc(DWRITE_LINE_SPACING_METHOD*, Float32*, Float32*, HRESULT)).call(linespacingmethod, linespacing, baseline)
  end
  def get_font_collection(fontcollection : IDWriteFontCollection*) : HRESULT
    @lpVtbl.value.get_font_collection.unsafe_as(Proc(IDWriteFontCollection*, HRESULT)).call(fontcollection)
  end
  def get_font_family_name_length : UInt32
    @lpVtbl.value.get_font_family_name_length.unsafe_as(Proc(UInt32)).call
  end
  def get_font_family_name(fontfamilyname : Char*, namesize : UInt32) : HRESULT
    @lpVtbl.value.get_font_family_name.unsafe_as(Proc(Char*, UInt32, HRESULT)).call(fontfamilyname, namesize)
  end
  def get_font_weight : DWRITE_FONT_WEIGHT
    @lpVtbl.value.get_font_weight.unsafe_as(Proc(DWRITE_FONT_WEIGHT)).call
  end
  def get_font_style : DWRITE_FONT_STYLE
    @lpVtbl.value.get_font_style.unsafe_as(Proc(DWRITE_FONT_STYLE)).call
  end
  def get_font_stretch : DWRITE_FONT_STRETCH
    @lpVtbl.value.get_font_stretch.unsafe_as(Proc(DWRITE_FONT_STRETCH)).call
  end
  def get_font_size : Float32
    @lpVtbl.value.get_font_size.unsafe_as(Proc(Float32)).call
  end
  def get_locale_name_length : UInt32
    @lpVtbl.value.get_locale_name_length.unsafe_as(Proc(UInt32)).call
  end
  def get_locale_name(localename : Char*, namesize : UInt32) : HRESULT
    @lpVtbl.value.get_locale_name.unsafe_as(Proc(Char*, UInt32, HRESULT)).call(localename, namesize)
  end
  def set_max_width(maxwidth : Float32) : HRESULT
    @lpVtbl.value.set_max_width.unsafe_as(Proc(Float32, HRESULT)).call(maxwidth)
  end
  def set_max_height(maxheight : Float32) : HRESULT
    @lpVtbl.value.set_max_height.unsafe_as(Proc(Float32, HRESULT)).call(maxheight)
  end
  def set_font_collection(fontcollection : IDWriteFontCollection, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_collection.unsafe_as(Proc(IDWriteFontCollection, DWRITE_TEXT_RANGE, HRESULT)).call(fontcollection, textrange)
  end
  def set_font_family_name(fontfamilyname : LibC::LPWSTR, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_family_name.unsafe_as(Proc(LibC::LPWSTR, DWRITE_TEXT_RANGE, HRESULT)).call(fontfamilyname, textrange)
  end
  def set_font_weight(fontweight : DWRITE_FONT_WEIGHT, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_weight.unsafe_as(Proc(DWRITE_FONT_WEIGHT, DWRITE_TEXT_RANGE, HRESULT)).call(fontweight, textrange)
  end
  def set_font_style(fontstyle : DWRITE_FONT_STYLE, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_style.unsafe_as(Proc(DWRITE_FONT_STYLE, DWRITE_TEXT_RANGE, HRESULT)).call(fontstyle, textrange)
  end
  def set_font_stretch(fontstretch : DWRITE_FONT_STRETCH, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_stretch.unsafe_as(Proc(DWRITE_FONT_STRETCH, DWRITE_TEXT_RANGE, HRESULT)).call(fontstretch, textrange)
  end
  def set_font_size(fontsize : Float32, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_size.unsafe_as(Proc(Float32, DWRITE_TEXT_RANGE, HRESULT)).call(fontsize, textrange)
  end
  def set_underline(hasunderline : LibC::BOOL, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_underline.unsafe_as(Proc(LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)).call(hasunderline, textrange)
  end
  def set_strikethrough(hasstrikethrough : LibC::BOOL, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_strikethrough.unsafe_as(Proc(LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)).call(hasstrikethrough, textrange)
  end
  def set_drawing_effect(drawingeffect : IUnknown, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_drawing_effect.unsafe_as(Proc(IUnknown, DWRITE_TEXT_RANGE, HRESULT)).call(drawingeffect, textrange)
  end
  def set_inline_object(inlineobject : IDWriteInlineObject, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_inline_object.unsafe_as(Proc(IDWriteInlineObject, DWRITE_TEXT_RANGE, HRESULT)).call(inlineobject, textrange)
  end
  def set_typography(typography : IDWriteTypography, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_typography.unsafe_as(Proc(IDWriteTypography, DWRITE_TEXT_RANGE, HRESULT)).call(typography, textrange)
  end
  def set_locale_name(localename : LibC::LPWSTR, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_locale_name.unsafe_as(Proc(LibC::LPWSTR, DWRITE_TEXT_RANGE, HRESULT)).call(localename, textrange)
  end
  def get_max_width : Float32
    @lpVtbl.value.get_max_width.unsafe_as(Proc(Float32)).call
  end
  def get_max_height : Float32
    @lpVtbl.value.get_max_height.unsafe_as(Proc(Float32)).call
  end
  def get_font_collection2(currentposition : UInt32, fontcollection : IDWriteFontCollection*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_collection2.unsafe_as(Proc(UInt32, IDWriteFontCollection*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontcollection, textrange)
  end
  def get_font_family_name_length2(currentposition : UInt32, namelength : UInt32*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_family_name_length2.unsafe_as(Proc(UInt32, UInt32*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, namelength, textrange)
  end
  def get_font_family_name2(currentposition : UInt32, fontfamilyname : Char*, namesize : UInt32, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_family_name2.unsafe_as(Proc(UInt32, Char*, UInt32, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontfamilyname, namesize, textrange)
  end
  def get_font_weight2(currentposition : UInt32, fontweight : DWRITE_FONT_WEIGHT*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_weight2.unsafe_as(Proc(UInt32, DWRITE_FONT_WEIGHT*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontweight, textrange)
  end
  def get_font_style2(currentposition : UInt32, fontstyle : DWRITE_FONT_STYLE*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_style2.unsafe_as(Proc(UInt32, DWRITE_FONT_STYLE*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontstyle, textrange)
  end
  def get_font_stretch2(currentposition : UInt32, fontstretch : DWRITE_FONT_STRETCH*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_stretch2.unsafe_as(Proc(UInt32, DWRITE_FONT_STRETCH*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontstretch, textrange)
  end
  def get_font_size2(currentposition : UInt32, fontsize : Float32*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_size2.unsafe_as(Proc(UInt32, Float32*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontsize, textrange)
  end
  def get_underline(currentposition : UInt32, hasunderline : LibC::BOOL*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_underline.unsafe_as(Proc(UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, hasunderline, textrange)
  end
  def get_strikethrough(currentposition : UInt32, hasstrikethrough : LibC::BOOL*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_strikethrough.unsafe_as(Proc(UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, hasstrikethrough, textrange)
  end
  def get_drawing_effect(currentposition : UInt32, drawingeffect : IUnknown*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_drawing_effect.unsafe_as(Proc(UInt32, IUnknown*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, drawingeffect, textrange)
  end
  def get_inline_object(currentposition : UInt32, inlineobject : IDWriteInlineObject*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_inline_object.unsafe_as(Proc(UInt32, IDWriteInlineObject*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, inlineobject, textrange)
  end
  def get_typography(currentposition : UInt32, typography : IDWriteTypography*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_typography.unsafe_as(Proc(UInt32, IDWriteTypography*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, typography, textrange)
  end
  def get_locale_name_length2(currentposition : UInt32, namelength : UInt32*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_locale_name_length2.unsafe_as(Proc(UInt32, UInt32*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, namelength, textrange)
  end
  def get_locale_name2(currentposition : UInt32, localename : Char*, namesize : UInt32, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_locale_name2.unsafe_as(Proc(UInt32, Char*, UInt32, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, localename, namesize, textrange)
  end
  def draw(clientdrawingcontext : Void*, renderer : IDWriteTextRenderer, originx : Float32, originy : Float32) : HRESULT
    @lpVtbl.value.draw.unsafe_as(Proc(Void*, IDWriteTextRenderer, Float32, Float32, HRESULT)).call(clientdrawingcontext, renderer, originx, originy)
  end
  def get_line_metrics(linemetrics : DWRITE_LINE_METRICS*, maxlinecount : UInt32, actuallinecount : UInt32*) : HRESULT
    @lpVtbl.value.get_line_metrics.unsafe_as(Proc(DWRITE_LINE_METRICS*, UInt32, UInt32*, HRESULT)).call(linemetrics, maxlinecount, actuallinecount)
  end
  def get_metrics(textmetrics : DWRITE_TEXT_METRICS*) : HRESULT
    @lpVtbl.value.get_metrics.unsafe_as(Proc(DWRITE_TEXT_METRICS*, HRESULT)).call(textmetrics)
  end
  def get_overhang_metrics(overhangs : DWRITE_OVERHANG_METRICS*) : HRESULT
    @lpVtbl.value.get_overhang_metrics.unsafe_as(Proc(DWRITE_OVERHANG_METRICS*, HRESULT)).call(overhangs)
  end
  def get_cluster_metrics(clustermetrics : DWRITE_CLUSTER_METRICS*, maxclustercount : UInt32, actualclustercount : UInt32*) : HRESULT
    @lpVtbl.value.get_cluster_metrics.unsafe_as(Proc(DWRITE_CLUSTER_METRICS*, UInt32, UInt32*, HRESULT)).call(clustermetrics, maxclustercount, actualclustercount)
  end
  def determine_min_width(minwidth : Float32*) : HRESULT
    @lpVtbl.value.determine_min_width.unsafe_as(Proc(Float32*, HRESULT)).call(minwidth)
  end
  def hit_test_point(pointx : Float32, pointy : Float32, istrailinghit : LibC::BOOL*, isinside : LibC::BOOL*, hittestmetrics : DWRITE_HIT_TEST_METRICS*) : HRESULT
    @lpVtbl.value.hit_test_point.unsafe_as(Proc(Float32, Float32, LibC::BOOL*, LibC::BOOL*, DWRITE_HIT_TEST_METRICS*, HRESULT)).call(pointx, pointy, istrailinghit, isinside, hittestmetrics)
  end
  def hit_test_text_position(textposition : UInt32, istrailinghit : LibC::BOOL, pointx : Float32*, pointy : Float32*, hittestmetrics : DWRITE_HIT_TEST_METRICS*) : HRESULT
    @lpVtbl.value.hit_test_text_position.unsafe_as(Proc(UInt32, LibC::BOOL, Float32*, Float32*, DWRITE_HIT_TEST_METRICS*, HRESULT)).call(textposition, istrailinghit, pointx, pointy, hittestmetrics)
  end
  def hit_test_text_range(textposition : UInt32, textlength : UInt32, originx : Float32, originy : Float32, hittestmetrics : DWRITE_HIT_TEST_METRICS*, maxhittestmetricscount : UInt32, actualhittestmetricscount : UInt32*) : HRESULT
    @lpVtbl.value.hit_test_text_range.unsafe_as(Proc(UInt32, UInt32, Float32, Float32, DWRITE_HIT_TEST_METRICS*, UInt32, UInt32*, HRESULT)).call(textposition, textlength, originx, originy, hittestmetrics, maxhittestmetricscount, actualhittestmetricscount)
  end
  def set_pair_kerning(ispairkerningenabled : LibC::BOOL, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_pair_kerning.unsafe_as(Proc(LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)).call(ispairkerningenabled, textrange)
  end
  def get_pair_kerning(currentposition : UInt32, ispairkerningenabled : LibC::BOOL*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_pair_kerning.unsafe_as(Proc(UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, ispairkerningenabled, textrange)
  end
  def set_character_spacing(leadingspacing : Float32, trailingspacing : Float32, minimumadvancewidth : Float32, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_character_spacing.unsafe_as(Proc(Float32, Float32, Float32, DWRITE_TEXT_RANGE, HRESULT)).call(leadingspacing, trailingspacing, minimumadvancewidth, textrange)
  end
  def get_character_spacing(currentposition : UInt32, leadingspacing : Float32*, trailingspacing : Float32*, minimumadvancewidth : Float32*, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_character_spacing.unsafe_as(Proc(UInt32, Float32*, Float32*, Float32*, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, leadingspacing, trailingspacing, minimumadvancewidth, textrange)
  end
  def get_metrics2(textmetrics : DWRITE_TEXT_METRICS1*) : HRESULT
    @lpVtbl.value.get_metrics2.unsafe_as(Proc(DWRITE_TEXT_METRICS1*, HRESULT)).call(textmetrics)
  end
  def set_vertical_glyph_orientation(glyphorientation : DWRITE_VERTICAL_GLYPH_ORIENTATION) : HRESULT
    @lpVtbl.value.set_vertical_glyph_orientation.unsafe_as(Proc(DWRITE_VERTICAL_GLYPH_ORIENTATION, HRESULT)).call(glyphorientation)
  end
  def get_vertical_glyph_orientation : DWRITE_VERTICAL_GLYPH_ORIENTATION
    @lpVtbl.value.get_vertical_glyph_orientation.unsafe_as(Proc(DWRITE_VERTICAL_GLYPH_ORIENTATION)).call
  end
  def set_last_line_wrapping(islastlinewrappingenabled : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_last_line_wrapping.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(islastlinewrappingenabled)
  end
  def get_last_line_wrapping : LibC::BOOL
    @lpVtbl.value.get_last_line_wrapping.unsafe_as(Proc(LibC::BOOL)).call
  end
  def set_optical_alignment(opticalalignment : DWRITE_OPTICAL_ALIGNMENT) : HRESULT
    @lpVtbl.value.set_optical_alignment.unsafe_as(Proc(DWRITE_OPTICAL_ALIGNMENT, HRESULT)).call(opticalalignment)
  end
  def get_optical_alignment : DWRITE_OPTICAL_ALIGNMENT
    @lpVtbl.value.get_optical_alignment.unsafe_as(Proc(DWRITE_OPTICAL_ALIGNMENT)).call
  end
  def set_font_fallback(fontfallback : IDWriteFontFallback) : HRESULT
    @lpVtbl.value.set_font_fallback.unsafe_as(Proc(IDWriteFontFallback, HRESULT)).call(fontfallback)
  end
  def get_font_fallback(fontfallback : IDWriteFontFallback*) : HRESULT
    @lpVtbl.value.get_font_fallback.unsafe_as(Proc(IDWriteFontFallback*, HRESULT)).call(fontfallback)
  end
  def invalidate_layout : HRESULT
    @lpVtbl.value.invalidate_layout.unsafe_as(Proc(HRESULT)).call
  end
  def set_line_spacing2(linespacingoptions : DWRITE_LINE_SPACING*) : HRESULT
    @lpVtbl.value.set_line_spacing2.unsafe_as(Proc(DWRITE_LINE_SPACING*, HRESULT)).call(linespacingoptions)
  end
  def get_line_spacing2(linespacingoptions : DWRITE_LINE_SPACING*) : HRESULT
    @lpVtbl.value.get_line_spacing2.unsafe_as(Proc(DWRITE_LINE_SPACING*, HRESULT)).call(linespacingoptions)
  end
  def get_line_metrics2(linemetrics : DWRITE_LINE_METRICS1*, maxlinecount : UInt32, actuallinecount : UInt32*) : HRESULT
    @lpVtbl.value.get_line_metrics2.unsafe_as(Proc(DWRITE_LINE_METRICS1*, UInt32, UInt32*, HRESULT)).call(linemetrics, maxlinecount, actuallinecount)
  end
  def set_font_axis_values(fontaxisvalues : DWRITE_FONT_AXIS_VALUE*, fontaxisvaluecount : UInt32, textrange : DWRITE_TEXT_RANGE) : HRESULT
    @lpVtbl.value.set_font_axis_values.unsafe_as(Proc(DWRITE_FONT_AXIS_VALUE*, UInt32, DWRITE_TEXT_RANGE, HRESULT)).call(fontaxisvalues, fontaxisvaluecount, textrange)
  end
  def get_font_axis_value_count(currentposition : UInt32) : UInt32
    @lpVtbl.value.get_font_axis_value_count.unsafe_as(Proc(UInt32, UInt32)).call(currentposition)
  end
  def get_font_axis_values(currentposition : UInt32, fontaxisvalues : DWRITE_FONT_AXIS_VALUE*, fontaxisvaluecount : UInt32, textrange : DWRITE_TEXT_RANGE*) : HRESULT
    @lpVtbl.value.get_font_axis_values.unsafe_as(Proc(UInt32, DWRITE_FONT_AXIS_VALUE*, UInt32, DWRITE_TEXT_RANGE*, HRESULT)).call(currentposition, fontaxisvalues, fontaxisvaluecount, textrange)
  end
  def get_automatic_font_axes : DWRITE_AUTOMATIC_FONT_AXES
    @lpVtbl.value.get_automatic_font_axes.unsafe_as(Proc(DWRITE_AUTOMATIC_FONT_AXES)).call
  end
  def set_automatic_font_axes(automaticfontaxes : DWRITE_AUTOMATIC_FONT_AXES) : HRESULT
    @lpVtbl.value.set_automatic_font_axes.unsafe_as(Proc(DWRITE_AUTOMATIC_FONT_AXES, HRESULT)).call(automaticfontaxes)
  end
end
struct LibWin32::IDWriteTextFormat3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_text_alignment(textalignment : DWRITE_TEXT_ALIGNMENT) : HRESULT
    @lpVtbl.value.set_text_alignment.unsafe_as(Proc(DWRITE_TEXT_ALIGNMENT, HRESULT)).call(textalignment)
  end
  def set_paragraph_alignment(paragraphalignment : DWRITE_PARAGRAPH_ALIGNMENT) : HRESULT
    @lpVtbl.value.set_paragraph_alignment.unsafe_as(Proc(DWRITE_PARAGRAPH_ALIGNMENT, HRESULT)).call(paragraphalignment)
  end
  def set_word_wrapping(wordwrapping : DWRITE_WORD_WRAPPING) : HRESULT
    @lpVtbl.value.set_word_wrapping.unsafe_as(Proc(DWRITE_WORD_WRAPPING, HRESULT)).call(wordwrapping)
  end
  def set_reading_direction(readingdirection : DWRITE_READING_DIRECTION) : HRESULT
    @lpVtbl.value.set_reading_direction.unsafe_as(Proc(DWRITE_READING_DIRECTION, HRESULT)).call(readingdirection)
  end
  def set_flow_direction(flowdirection : DWRITE_FLOW_DIRECTION) : HRESULT
    @lpVtbl.value.set_flow_direction.unsafe_as(Proc(DWRITE_FLOW_DIRECTION, HRESULT)).call(flowdirection)
  end
  def set_incremental_tab_stop(incrementaltabstop : Float32) : HRESULT
    @lpVtbl.value.set_incremental_tab_stop.unsafe_as(Proc(Float32, HRESULT)).call(incrementaltabstop)
  end
  def set_trimming(trimmingoptions : DWRITE_TRIMMING*, trimmingsign : IDWriteInlineObject) : HRESULT
    @lpVtbl.value.set_trimming.unsafe_as(Proc(DWRITE_TRIMMING*, IDWriteInlineObject, HRESULT)).call(trimmingoptions, trimmingsign)
  end
  def set_line_spacing(linespacingmethod : DWRITE_LINE_SPACING_METHOD, linespacing : Float32, baseline : Float32) : HRESULT
    @lpVtbl.value.set_line_spacing.unsafe_as(Proc(DWRITE_LINE_SPACING_METHOD, Float32, Float32, HRESULT)).call(linespacingmethod, linespacing, baseline)
  end
  def get_text_alignment : DWRITE_TEXT_ALIGNMENT
    @lpVtbl.value.get_text_alignment.unsafe_as(Proc(DWRITE_TEXT_ALIGNMENT)).call
  end
  def get_paragraph_alignment : DWRITE_PARAGRAPH_ALIGNMENT
    @lpVtbl.value.get_paragraph_alignment.unsafe_as(Proc(DWRITE_PARAGRAPH_ALIGNMENT)).call
  end
  def get_word_wrapping : DWRITE_WORD_WRAPPING
    @lpVtbl.value.get_word_wrapping.unsafe_as(Proc(DWRITE_WORD_WRAPPING)).call
  end
  def get_reading_direction : DWRITE_READING_DIRECTION
    @lpVtbl.value.get_reading_direction.unsafe_as(Proc(DWRITE_READING_DIRECTION)).call
  end
  def get_flow_direction : DWRITE_FLOW_DIRECTION
    @lpVtbl.value.get_flow_direction.unsafe_as(Proc(DWRITE_FLOW_DIRECTION)).call
  end
  def get_incremental_tab_stop : Float32
    @lpVtbl.value.get_incremental_tab_stop.unsafe_as(Proc(Float32)).call
  end
  def get_trimming(trimmingoptions : DWRITE_TRIMMING*, trimmingsign : IDWriteInlineObject*) : HRESULT
    @lpVtbl.value.get_trimming.unsafe_as(Proc(DWRITE_TRIMMING*, IDWriteInlineObject*, HRESULT)).call(trimmingoptions, trimmingsign)
  end
  def get_line_spacing(linespacingmethod : DWRITE_LINE_SPACING_METHOD*, linespacing : Float32*, baseline : Float32*) : HRESULT
    @lpVtbl.value.get_line_spacing.unsafe_as(Proc(DWRITE_LINE_SPACING_METHOD*, Float32*, Float32*, HRESULT)).call(linespacingmethod, linespacing, baseline)
  end
  def get_font_collection(fontcollection : IDWriteFontCollection*) : HRESULT
    @lpVtbl.value.get_font_collection.unsafe_as(Proc(IDWriteFontCollection*, HRESULT)).call(fontcollection)
  end
  def get_font_family_name_length : UInt32
    @lpVtbl.value.get_font_family_name_length.unsafe_as(Proc(UInt32)).call
  end
  def get_font_family_name(fontfamilyname : Char*, namesize : UInt32) : HRESULT
    @lpVtbl.value.get_font_family_name.unsafe_as(Proc(Char*, UInt32, HRESULT)).call(fontfamilyname, namesize)
  end
  def get_font_weight : DWRITE_FONT_WEIGHT
    @lpVtbl.value.get_font_weight.unsafe_as(Proc(DWRITE_FONT_WEIGHT)).call
  end
  def get_font_style : DWRITE_FONT_STYLE
    @lpVtbl.value.get_font_style.unsafe_as(Proc(DWRITE_FONT_STYLE)).call
  end
  def get_font_stretch : DWRITE_FONT_STRETCH
    @lpVtbl.value.get_font_stretch.unsafe_as(Proc(DWRITE_FONT_STRETCH)).call
  end
  def get_font_size : Float32
    @lpVtbl.value.get_font_size.unsafe_as(Proc(Float32)).call
  end
  def get_locale_name_length : UInt32
    @lpVtbl.value.get_locale_name_length.unsafe_as(Proc(UInt32)).call
  end
  def get_locale_name(localename : Char*, namesize : UInt32) : HRESULT
    @lpVtbl.value.get_locale_name.unsafe_as(Proc(Char*, UInt32, HRESULT)).call(localename, namesize)
  end
  def set_vertical_glyph_orientation(glyphorientation : DWRITE_VERTICAL_GLYPH_ORIENTATION) : HRESULT
    @lpVtbl.value.set_vertical_glyph_orientation.unsafe_as(Proc(DWRITE_VERTICAL_GLYPH_ORIENTATION, HRESULT)).call(glyphorientation)
  end
  def get_vertical_glyph_orientation : DWRITE_VERTICAL_GLYPH_ORIENTATION
    @lpVtbl.value.get_vertical_glyph_orientation.unsafe_as(Proc(DWRITE_VERTICAL_GLYPH_ORIENTATION)).call
  end
  def set_last_line_wrapping(islastlinewrappingenabled : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_last_line_wrapping.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(islastlinewrappingenabled)
  end
  def get_last_line_wrapping : LibC::BOOL
    @lpVtbl.value.get_last_line_wrapping.unsafe_as(Proc(LibC::BOOL)).call
  end
  def set_optical_alignment(opticalalignment : DWRITE_OPTICAL_ALIGNMENT) : HRESULT
    @lpVtbl.value.set_optical_alignment.unsafe_as(Proc(DWRITE_OPTICAL_ALIGNMENT, HRESULT)).call(opticalalignment)
  end
  def get_optical_alignment : DWRITE_OPTICAL_ALIGNMENT
    @lpVtbl.value.get_optical_alignment.unsafe_as(Proc(DWRITE_OPTICAL_ALIGNMENT)).call
  end
  def set_font_fallback(fontfallback : IDWriteFontFallback) : HRESULT
    @lpVtbl.value.set_font_fallback.unsafe_as(Proc(IDWriteFontFallback, HRESULT)).call(fontfallback)
  end
  def get_font_fallback(fontfallback : IDWriteFontFallback*) : HRESULT
    @lpVtbl.value.get_font_fallback.unsafe_as(Proc(IDWriteFontFallback*, HRESULT)).call(fontfallback)
  end
  def set_line_spacing2(linespacingoptions : DWRITE_LINE_SPACING*) : HRESULT
    @lpVtbl.value.set_line_spacing2.unsafe_as(Proc(DWRITE_LINE_SPACING*, HRESULT)).call(linespacingoptions)
  end
  def get_line_spacing2(linespacingoptions : DWRITE_LINE_SPACING*) : HRESULT
    @lpVtbl.value.get_line_spacing2.unsafe_as(Proc(DWRITE_LINE_SPACING*, HRESULT)).call(linespacingoptions)
  end
  def set_font_axis_values(fontaxisvalues : DWRITE_FONT_AXIS_VALUE*, fontaxisvaluecount : UInt32) : HRESULT
    @lpVtbl.value.set_font_axis_values.unsafe_as(Proc(DWRITE_FONT_AXIS_VALUE*, UInt32, HRESULT)).call(fontaxisvalues, fontaxisvaluecount)
  end
  def get_font_axis_value_count : UInt32
    @lpVtbl.value.get_font_axis_value_count.unsafe_as(Proc(UInt32)).call
  end
  def get_font_axis_values(fontaxisvalues : DWRITE_FONT_AXIS_VALUE*, fontaxisvaluecount : UInt32) : HRESULT
    @lpVtbl.value.get_font_axis_values.unsafe_as(Proc(DWRITE_FONT_AXIS_VALUE*, UInt32, HRESULT)).call(fontaxisvalues, fontaxisvaluecount)
  end
  def get_automatic_font_axes : DWRITE_AUTOMATIC_FONT_AXES
    @lpVtbl.value.get_automatic_font_axes.unsafe_as(Proc(DWRITE_AUTOMATIC_FONT_AXES)).call
  end
  def set_automatic_font_axes(automaticfontaxes : DWRITE_AUTOMATIC_FONT_AXES) : HRESULT
    @lpVtbl.value.set_automatic_font_axes.unsafe_as(Proc(DWRITE_AUTOMATIC_FONT_AXES, HRESULT)).call(automaticfontaxes)
  end
end
struct LibWin32::IDWriteFontFallback1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def map_characters(analysissource : IDWriteTextAnalysisSource, textposition : UInt32, textlength : UInt32, basefontcollection : IDWriteFontCollection, basefamilyname : LibC::LPWSTR, baseweight : DWRITE_FONT_WEIGHT, basestyle : DWRITE_FONT_STYLE, basestretch : DWRITE_FONT_STRETCH, mappedlength : UInt32*, mappedfont : IDWriteFont*, scale : Float32*) : HRESULT
    @lpVtbl.value.map_characters.unsafe_as(Proc(IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteFontCollection, LibC::LPWSTR, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, UInt32*, IDWriteFont*, Float32*, HRESULT)).call(analysissource, textposition, textlength, basefontcollection, basefamilyname, baseweight, basestyle, basestretch, mappedlength, mappedfont, scale)
  end
  def map_characters2(analysissource : IDWriteTextAnalysisSource, textposition : UInt32, textlength : UInt32, basefontcollection : IDWriteFontCollection, basefamilyname : LibC::LPWSTR, fontaxisvalues : DWRITE_FONT_AXIS_VALUE*, fontaxisvaluecount : UInt32, mappedlength : UInt32*, scale : Float32*, mappedfontface : IDWriteFontFace5*) : HRESULT
    @lpVtbl.value.map_characters2.unsafe_as(Proc(IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteFontCollection, LibC::LPWSTR, DWRITE_FONT_AXIS_VALUE*, UInt32, UInt32*, Float32*, IDWriteFontFace5*, HRESULT)).call(analysissource, textposition, textlength, basefontcollection, basefamilyname, fontaxisvalues, fontaxisvaluecount, mappedlength, scale, mappedfontface)
  end
end
struct LibWin32::IDWriteFontSet2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_font_count : UInt32
    @lpVtbl.value.get_font_count.unsafe_as(Proc(UInt32)).call
  end
  def get_font_face_reference(listindex : UInt32, fontfacereference : IDWriteFontFaceReference*) : HRESULT
    @lpVtbl.value.get_font_face_reference.unsafe_as(Proc(UInt32, IDWriteFontFaceReference*, HRESULT)).call(listindex, fontfacereference)
  end
  def find_font_face_reference(fontfacereference : IDWriteFontFaceReference, listindex : UInt32*, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.find_font_face_reference.unsafe_as(Proc(IDWriteFontFaceReference, UInt32*, LibC::BOOL*, HRESULT)).call(fontfacereference, listindex, exists)
  end
  def find_font_face(fontface : IDWriteFontFace, listindex : UInt32*, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.find_font_face.unsafe_as(Proc(IDWriteFontFace, UInt32*, LibC::BOOL*, HRESULT)).call(fontface, listindex, exists)
  end
  def get_property_values(propertyid : DWRITE_FONT_PROPERTY_ID, values : IDWriteStringList*) : HRESULT
    @lpVtbl.value.get_property_values.unsafe_as(Proc(DWRITE_FONT_PROPERTY_ID, IDWriteStringList*, HRESULT)).call(propertyid, values)
  end
  def get_property_values2(propertyid : DWRITE_FONT_PROPERTY_ID, preferredlocalenames : LibC::LPWSTR, values : IDWriteStringList*) : HRESULT
    @lpVtbl.value.get_property_values2.unsafe_as(Proc(DWRITE_FONT_PROPERTY_ID, LibC::LPWSTR, IDWriteStringList*, HRESULT)).call(propertyid, preferredlocalenames, values)
  end
  def get_property_values3(listindex : UInt32, propertyid : DWRITE_FONT_PROPERTY_ID, exists : LibC::BOOL*, values : IDWriteLocalizedStrings*) : HRESULT
    @lpVtbl.value.get_property_values3.unsafe_as(Proc(UInt32, DWRITE_FONT_PROPERTY_ID, LibC::BOOL*, IDWriteLocalizedStrings*, HRESULT)).call(listindex, propertyid, exists, values)
  end
  def get_property_occurrence_count(property : DWRITE_FONT_PROPERTY*, propertyoccurrencecount : UInt32*) : HRESULT
    @lpVtbl.value.get_property_occurrence_count.unsafe_as(Proc(DWRITE_FONT_PROPERTY*, UInt32*, HRESULT)).call(property, propertyoccurrencecount)
  end
  def get_matching_fonts(familyname : LibC::LPWSTR, fontweight : DWRITE_FONT_WEIGHT, fontstretch : DWRITE_FONT_STRETCH, fontstyle : DWRITE_FONT_STYLE, filteredset : IDWriteFontSet*) : HRESULT
    @lpVtbl.value.get_matching_fonts.unsafe_as(Proc(LibC::LPWSTR, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFontSet*, HRESULT)).call(familyname, fontweight, fontstretch, fontstyle, filteredset)
  end
  def get_matching_fonts2(properties : DWRITE_FONT_PROPERTY*, propertycount : UInt32, filteredset : IDWriteFontSet*) : HRESULT
    @lpVtbl.value.get_matching_fonts2.unsafe_as(Proc(DWRITE_FONT_PROPERTY*, UInt32, IDWriteFontSet*, HRESULT)).call(properties, propertycount, filteredset)
  end
  def get_matching_fonts3(fontproperty : DWRITE_FONT_PROPERTY*, fontaxisvalues : DWRITE_FONT_AXIS_VALUE*, fontaxisvaluecount : UInt32, matchingfonts : IDWriteFontSet1*) : HRESULT
    @lpVtbl.value.get_matching_fonts3.unsafe_as(Proc(DWRITE_FONT_PROPERTY*, DWRITE_FONT_AXIS_VALUE*, UInt32, IDWriteFontSet1*, HRESULT)).call(fontproperty, fontaxisvalues, fontaxisvaluecount, matchingfonts)
  end
  def get_first_font_resources(filteredfontset : IDWriteFontSet1*) : HRESULT
    @lpVtbl.value.get_first_font_resources.unsafe_as(Proc(IDWriteFontSet1*, HRESULT)).call(filteredfontset)
  end
  def get_filtered_fonts(indices : UInt32*, indexcount : UInt32, filteredfontset : IDWriteFontSet1*) : HRESULT
    @lpVtbl.value.get_filtered_fonts.unsafe_as(Proc(UInt32*, UInt32, IDWriteFontSet1*, HRESULT)).call(indices, indexcount, filteredfontset)
  end
  def get_filtered_fonts2(fontaxisranges : DWRITE_FONT_AXIS_RANGE*, fontaxisrangecount : UInt32, selectanyrange : LibC::BOOL, filteredfontset : IDWriteFontSet1*) : HRESULT
    @lpVtbl.value.get_filtered_fonts2.unsafe_as(Proc(DWRITE_FONT_AXIS_RANGE*, UInt32, LibC::BOOL, IDWriteFontSet1*, HRESULT)).call(fontaxisranges, fontaxisrangecount, selectanyrange, filteredfontset)
  end
  def get_filtered_fonts3(properties : DWRITE_FONT_PROPERTY*, propertycount : UInt32, selectanyproperty : LibC::BOOL, filteredfontset : IDWriteFontSet1*) : HRESULT
    @lpVtbl.value.get_filtered_fonts3.unsafe_as(Proc(DWRITE_FONT_PROPERTY*, UInt32, LibC::BOOL, IDWriteFontSet1*, HRESULT)).call(properties, propertycount, selectanyproperty, filteredfontset)
  end
  def get_filtered_font_indices(fontaxisranges : DWRITE_FONT_AXIS_RANGE*, fontaxisrangecount : UInt32, selectanyrange : LibC::BOOL, indices : UInt32*, maxindexcount : UInt32, actualindexcount : UInt32*) : HRESULT
    @lpVtbl.value.get_filtered_font_indices.unsafe_as(Proc(DWRITE_FONT_AXIS_RANGE*, UInt32, LibC::BOOL, UInt32*, UInt32, UInt32*, HRESULT)).call(fontaxisranges, fontaxisrangecount, selectanyrange, indices, maxindexcount, actualindexcount)
  end
  def get_filtered_font_indices2(properties : DWRITE_FONT_PROPERTY*, propertycount : UInt32, selectanyproperty : LibC::BOOL, indices : UInt32*, maxindexcount : UInt32, actualindexcount : UInt32*) : HRESULT
    @lpVtbl.value.get_filtered_font_indices2.unsafe_as(Proc(DWRITE_FONT_PROPERTY*, UInt32, LibC::BOOL, UInt32*, UInt32, UInt32*, HRESULT)).call(properties, propertycount, selectanyproperty, indices, maxindexcount, actualindexcount)
  end
  def get_font_axis_ranges(listindex : UInt32, fontaxisranges : DWRITE_FONT_AXIS_RANGE*, maxfontaxisrangecount : UInt32, actualfontaxisrangecount : UInt32*) : HRESULT
    @lpVtbl.value.get_font_axis_ranges.unsafe_as(Proc(UInt32, DWRITE_FONT_AXIS_RANGE*, UInt32, UInt32*, HRESULT)).call(listindex, fontaxisranges, maxfontaxisrangecount, actualfontaxisrangecount)
  end
  def get_font_axis_ranges2(fontaxisranges : DWRITE_FONT_AXIS_RANGE*, maxfontaxisrangecount : UInt32, actualfontaxisrangecount : UInt32*) : HRESULT
    @lpVtbl.value.get_font_axis_ranges2.unsafe_as(Proc(DWRITE_FONT_AXIS_RANGE*, UInt32, UInt32*, HRESULT)).call(fontaxisranges, maxfontaxisrangecount, actualfontaxisrangecount)
  end
  def get_font_face_reference2(listindex : UInt32, fontfacereference : IDWriteFontFaceReference1*) : HRESULT
    @lpVtbl.value.get_font_face_reference2.unsafe_as(Proc(UInt32, IDWriteFontFaceReference1*, HRESULT)).call(listindex, fontfacereference)
  end
  def create_font_resource(listindex : UInt32, fontresource : IDWriteFontResource*) : HRESULT
    @lpVtbl.value.create_font_resource.unsafe_as(Proc(UInt32, IDWriteFontResource*, HRESULT)).call(listindex, fontresource)
  end
  def create_font_face(listindex : UInt32, fontface : IDWriteFontFace5*) : HRESULT
    @lpVtbl.value.create_font_face.unsafe_as(Proc(UInt32, IDWriteFontFace5*, HRESULT)).call(listindex, fontface)
  end
  def get_font_locality(listindex : UInt32) : DWRITE_LOCALITY
    @lpVtbl.value.get_font_locality.unsafe_as(Proc(UInt32, DWRITE_LOCALITY)).call(listindex)
  end
  def get_expiration_event : LibC::HANDLE
    @lpVtbl.value.get_expiration_event.unsafe_as(Proc(LibC::HANDLE)).call
  end
end
struct LibWin32::IDWriteFontCollection3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_font_family_count : UInt32
    @lpVtbl.value.get_font_family_count.unsafe_as(Proc(UInt32)).call
  end
  def get_font_family(index : UInt32, fontfamily : IDWriteFontFamily*) : HRESULT
    @lpVtbl.value.get_font_family.unsafe_as(Proc(UInt32, IDWriteFontFamily*, HRESULT)).call(index, fontfamily)
  end
  def find_family_name(familyname : LibC::LPWSTR, index : UInt32*, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.find_family_name.unsafe_as(Proc(LibC::LPWSTR, UInt32*, LibC::BOOL*, HRESULT)).call(familyname, index, exists)
  end
  def get_font_from_font_face(fontface : IDWriteFontFace, font : IDWriteFont*) : HRESULT
    @lpVtbl.value.get_font_from_font_face.unsafe_as(Proc(IDWriteFontFace, IDWriteFont*, HRESULT)).call(fontface, font)
  end
  def get_font_set(fontset : IDWriteFontSet*) : HRESULT
    @lpVtbl.value.get_font_set.unsafe_as(Proc(IDWriteFontSet*, HRESULT)).call(fontset)
  end
  def get_font_family2(index : UInt32, fontfamily : IDWriteFontFamily1*) : HRESULT
    @lpVtbl.value.get_font_family2.unsafe_as(Proc(UInt32, IDWriteFontFamily1*, HRESULT)).call(index, fontfamily)
  end
  def get_font_family3(index : UInt32, fontfamily : IDWriteFontFamily2*) : HRESULT
    @lpVtbl.value.get_font_family3.unsafe_as(Proc(UInt32, IDWriteFontFamily2*, HRESULT)).call(index, fontfamily)
  end
  def get_matching_fonts(familyname : LibC::LPWSTR, fontaxisvalues : DWRITE_FONT_AXIS_VALUE*, fontaxisvaluecount : UInt32, fontlist : IDWriteFontList2*) : HRESULT
    @lpVtbl.value.get_matching_fonts.unsafe_as(Proc(LibC::LPWSTR, DWRITE_FONT_AXIS_VALUE*, UInt32, IDWriteFontList2*, HRESULT)).call(familyname, fontaxisvalues, fontaxisvaluecount, fontlist)
  end
  def get_font_family_model : DWRITE_FONT_FAMILY_MODEL
    @lpVtbl.value.get_font_family_model.unsafe_as(Proc(DWRITE_FONT_FAMILY_MODEL)).call
  end
  def get_font_set2(fontset : IDWriteFontSet1*) : HRESULT
    @lpVtbl.value.get_font_set2.unsafe_as(Proc(IDWriteFontSet1*, HRESULT)).call(fontset)
  end
  def get_expiration_event : LibC::HANDLE
    @lpVtbl.value.get_expiration_event.unsafe_as(Proc(LibC::HANDLE)).call
  end
end
struct LibWin32::IDWriteFactory7
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_system_font_collection(fontcollection : IDWriteFontCollection*, checkforupdates : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_system_font_collection.unsafe_as(Proc(IDWriteFontCollection*, LibC::BOOL, HRESULT)).call(fontcollection, checkforupdates)
  end
  def create_custom_font_collection(collectionloader : IDWriteFontCollectionLoader, collectionkey : Void*, collectionkeysize : UInt32, fontcollection : IDWriteFontCollection*) : HRESULT
    @lpVtbl.value.create_custom_font_collection.unsafe_as(Proc(IDWriteFontCollectionLoader, Void*, UInt32, IDWriteFontCollection*, HRESULT)).call(collectionloader, collectionkey, collectionkeysize, fontcollection)
  end
  def register_font_collection_loader(fontcollectionloader : IDWriteFontCollectionLoader) : HRESULT
    @lpVtbl.value.register_font_collection_loader.unsafe_as(Proc(IDWriteFontCollectionLoader, HRESULT)).call(fontcollectionloader)
  end
  def unregister_font_collection_loader(fontcollectionloader : IDWriteFontCollectionLoader) : HRESULT
    @lpVtbl.value.unregister_font_collection_loader.unsafe_as(Proc(IDWriteFontCollectionLoader, HRESULT)).call(fontcollectionloader)
  end
  def create_font_file_reference(filepath : LibC::LPWSTR, lastwritetime : FILETIME*, fontfile : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.create_font_file_reference.unsafe_as(Proc(LibC::LPWSTR, FILETIME*, IDWriteFontFile*, HRESULT)).call(filepath, lastwritetime, fontfile)
  end
  def create_custom_font_file_reference(fontfilereferencekey : Void*, fontfilereferencekeysize : UInt32, fontfileloader : IDWriteFontFileLoader, fontfile : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.create_custom_font_file_reference.unsafe_as(Proc(Void*, UInt32, IDWriteFontFileLoader, IDWriteFontFile*, HRESULT)).call(fontfilereferencekey, fontfilereferencekeysize, fontfileloader, fontfile)
  end
  def create_font_face(fontfacetype : DWRITE_FONT_FACE_TYPE, numberoffiles : UInt32, fontfiles : IDWriteFontFile*, faceindex : UInt32, fontfacesimulationflags : DWRITE_FONT_SIMULATIONS, fontface : IDWriteFontFace*) : HRESULT
    @lpVtbl.value.create_font_face.unsafe_as(Proc(DWRITE_FONT_FACE_TYPE, UInt32, IDWriteFontFile*, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFace*, HRESULT)).call(fontfacetype, numberoffiles, fontfiles, faceindex, fontfacesimulationflags, fontface)
  end
  def create_rendering_params(renderingparams : IDWriteRenderingParams*) : HRESULT
    @lpVtbl.value.create_rendering_params.unsafe_as(Proc(IDWriteRenderingParams*, HRESULT)).call(renderingparams)
  end
  def create_monitor_rendering_params(monitor : HMONITOR, renderingparams : IDWriteRenderingParams*) : HRESULT
    @lpVtbl.value.create_monitor_rendering_params.unsafe_as(Proc(HMONITOR, IDWriteRenderingParams*, HRESULT)).call(monitor, renderingparams)
  end
  def create_custom_rendering_params(gamma : Float32, enhancedcontrast : Float32, cleartypelevel : Float32, pixelgeometry : DWRITE_PIXEL_GEOMETRY, renderingmode : DWRITE_RENDERING_MODE, renderingparams : IDWriteRenderingParams*) : HRESULT
    @lpVtbl.value.create_custom_rendering_params.unsafe_as(Proc(Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams*, HRESULT)).call(gamma, enhancedcontrast, cleartypelevel, pixelgeometry, renderingmode, renderingparams)
  end
  def register_font_file_loader(fontfileloader : IDWriteFontFileLoader) : HRESULT
    @lpVtbl.value.register_font_file_loader.unsafe_as(Proc(IDWriteFontFileLoader, HRESULT)).call(fontfileloader)
  end
  def unregister_font_file_loader(fontfileloader : IDWriteFontFileLoader) : HRESULT
    @lpVtbl.value.unregister_font_file_loader.unsafe_as(Proc(IDWriteFontFileLoader, HRESULT)).call(fontfileloader)
  end
  def create_text_format(fontfamilyname : LibC::LPWSTR, fontcollection : IDWriteFontCollection, fontweight : DWRITE_FONT_WEIGHT, fontstyle : DWRITE_FONT_STYLE, fontstretch : DWRITE_FONT_STRETCH, fontsize : Float32, localename : LibC::LPWSTR, textformat : IDWriteTextFormat*) : HRESULT
    @lpVtbl.value.create_text_format.unsafe_as(Proc(LibC::LPWSTR, IDWriteFontCollection, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, Float32, LibC::LPWSTR, IDWriteTextFormat*, HRESULT)).call(fontfamilyname, fontcollection, fontweight, fontstyle, fontstretch, fontsize, localename, textformat)
  end
  def create_typography(typography : IDWriteTypography*) : HRESULT
    @lpVtbl.value.create_typography.unsafe_as(Proc(IDWriteTypography*, HRESULT)).call(typography)
  end
  def get_gdi_interop(gdiinterop : IDWriteGdiInterop*) : HRESULT
    @lpVtbl.value.get_gdi_interop.unsafe_as(Proc(IDWriteGdiInterop*, HRESULT)).call(gdiinterop)
  end
  def create_text_layout(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, maxwidth : Float32, maxheight : Float32, textlayout : IDWriteTextLayout*) : HRESULT
    @lpVtbl.value.create_text_layout.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, Float32, Float32, IDWriteTextLayout*, HRESULT)).call(string, stringlength, textformat, maxwidth, maxheight, textlayout)
  end
  def create_gdi_compatible_text_layout(string : Char*, stringlength : UInt32, textformat : IDWriteTextFormat, layoutwidth : Float32, layoutheight : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, usegdinatural : LibC::BOOL, textlayout : IDWriteTextLayout*) : HRESULT
    @lpVtbl.value.create_gdi_compatible_text_layout.unsafe_as(Proc(Char*, UInt32, IDWriteTextFormat, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, IDWriteTextLayout*, HRESULT)).call(string, stringlength, textformat, layoutwidth, layoutheight, pixelsperdip, transform, usegdinatural, textlayout)
  end
  def create_ellipsis_trimming_sign(textformat : IDWriteTextFormat, trimmingsign : IDWriteInlineObject*) : HRESULT
    @lpVtbl.value.create_ellipsis_trimming_sign.unsafe_as(Proc(IDWriteTextFormat, IDWriteInlineObject*, HRESULT)).call(textformat, trimmingsign)
  end
  def create_text_analyzer(textanalyzer : IDWriteTextAnalyzer*) : HRESULT
    @lpVtbl.value.create_text_analyzer.unsafe_as(Proc(IDWriteTextAnalyzer*, HRESULT)).call(textanalyzer)
  end
  def create_number_substitution(substitutionmethod : DWRITE_NUMBER_SUBSTITUTION_METHOD, localename : LibC::LPWSTR, ignoreuseroverride : LibC::BOOL, numbersubstitution : IDWriteNumberSubstitution*) : HRESULT
    @lpVtbl.value.create_number_substitution.unsafe_as(Proc(DWRITE_NUMBER_SUBSTITUTION_METHOD, LibC::LPWSTR, LibC::BOOL, IDWriteNumberSubstitution*, HRESULT)).call(substitutionmethod, localename, ignoreuseroverride, numbersubstitution)
  end
  def create_glyph_run_analysis(glyphrun : DWRITE_GLYPH_RUN*, pixelsperdip : Float32, transform : DWRITE_MATRIX*, renderingmode : DWRITE_RENDERING_MODE, measuringmode : DWRITE_MEASURING_MODE, baselineoriginx : Float32, baselineoriginy : Float32, glyphrunanalysis : IDWriteGlyphRunAnalysis*) : HRESULT
    @lpVtbl.value.create_glyph_run_analysis.unsafe_as(Proc(DWRITE_GLYPH_RUN*, Float32, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)).call(glyphrun, pixelsperdip, transform, renderingmode, measuringmode, baselineoriginx, baselineoriginy, glyphrunanalysis)
  end
  def get_eudc_font_collection(fontcollection : IDWriteFontCollection*, checkforupdates : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_eudc_font_collection.unsafe_as(Proc(IDWriteFontCollection*, LibC::BOOL, HRESULT)).call(fontcollection, checkforupdates)
  end
  def create_custom_rendering_params2(gamma : Float32, enhancedcontrast : Float32, enhancedcontrastgrayscale : Float32, cleartypelevel : Float32, pixelgeometry : DWRITE_PIXEL_GEOMETRY, renderingmode : DWRITE_RENDERING_MODE, renderingparams : IDWriteRenderingParams1*) : HRESULT
    @lpVtbl.value.create_custom_rendering_params2.unsafe_as(Proc(Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams1*, HRESULT)).call(gamma, enhancedcontrast, enhancedcontrastgrayscale, cleartypelevel, pixelgeometry, renderingmode, renderingparams)
  end
  def get_system_font_fallback(fontfallback : IDWriteFontFallback*) : HRESULT
    @lpVtbl.value.get_system_font_fallback.unsafe_as(Proc(IDWriteFontFallback*, HRESULT)).call(fontfallback)
  end
  def create_font_fallback_builder(fontfallbackbuilder : IDWriteFontFallbackBuilder*) : HRESULT
    @lpVtbl.value.create_font_fallback_builder.unsafe_as(Proc(IDWriteFontFallbackBuilder*, HRESULT)).call(fontfallbackbuilder)
  end
  def translate_color_glyph_run(baselineoriginx : Float32, baselineoriginy : Float32, glyphrun : DWRITE_GLYPH_RUN*, glyphrundescription : DWRITE_GLYPH_RUN_DESCRIPTION*, measuringmode : DWRITE_MEASURING_MODE, worldtodevicetransform : DWRITE_MATRIX*, colorpaletteindex : UInt32, colorlayers : IDWriteColorGlyphRunEnumerator*) : HRESULT
    @lpVtbl.value.translate_color_glyph_run.unsafe_as(Proc(Float32, Float32, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, DWRITE_MEASURING_MODE, DWRITE_MATRIX*, UInt32, IDWriteColorGlyphRunEnumerator*, HRESULT)).call(baselineoriginx, baselineoriginy, glyphrun, glyphrundescription, measuringmode, worldtodevicetransform, colorpaletteindex, colorlayers)
  end
  def create_custom_rendering_params3(gamma : Float32, enhancedcontrast : Float32, grayscaleenhancedcontrast : Float32, cleartypelevel : Float32, pixelgeometry : DWRITE_PIXEL_GEOMETRY, renderingmode : DWRITE_RENDERING_MODE, gridfitmode : DWRITE_GRID_FIT_MODE, renderingparams : IDWriteRenderingParams2*) : HRESULT
    @lpVtbl.value.create_custom_rendering_params3.unsafe_as(Proc(Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams2*, HRESULT)).call(gamma, enhancedcontrast, grayscaleenhancedcontrast, cleartypelevel, pixelgeometry, renderingmode, gridfitmode, renderingparams)
  end
  def create_glyph_run_analysis2(glyphrun : DWRITE_GLYPH_RUN*, transform : DWRITE_MATRIX*, renderingmode : DWRITE_RENDERING_MODE, measuringmode : DWRITE_MEASURING_MODE, gridfitmode : DWRITE_GRID_FIT_MODE, antialiasmode : DWRITE_TEXT_ANTIALIAS_MODE, baselineoriginx : Float32, baselineoriginy : Float32, glyphrunanalysis : IDWriteGlyphRunAnalysis*) : HRESULT
    @lpVtbl.value.create_glyph_run_analysis2.unsafe_as(Proc(DWRITE_GLYPH_RUN*, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)).call(glyphrun, transform, renderingmode, measuringmode, gridfitmode, antialiasmode, baselineoriginx, baselineoriginy, glyphrunanalysis)
  end
  def create_glyph_run_analysis3(glyphrun : DWRITE_GLYPH_RUN*, transform : DWRITE_MATRIX*, renderingmode : DWRITE_RENDERING_MODE1, measuringmode : DWRITE_MEASURING_MODE, gridfitmode : DWRITE_GRID_FIT_MODE, antialiasmode : DWRITE_TEXT_ANTIALIAS_MODE, baselineoriginx : Float32, baselineoriginy : Float32, glyphrunanalysis : IDWriteGlyphRunAnalysis*) : HRESULT
    @lpVtbl.value.create_glyph_run_analysis3.unsafe_as(Proc(DWRITE_GLYPH_RUN*, DWRITE_MATRIX*, DWRITE_RENDERING_MODE1, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)).call(glyphrun, transform, renderingmode, measuringmode, gridfitmode, antialiasmode, baselineoriginx, baselineoriginy, glyphrunanalysis)
  end
  def create_custom_rendering_params4(gamma : Float32, enhancedcontrast : Float32, grayscaleenhancedcontrast : Float32, cleartypelevel : Float32, pixelgeometry : DWRITE_PIXEL_GEOMETRY, renderingmode : DWRITE_RENDERING_MODE1, gridfitmode : DWRITE_GRID_FIT_MODE, renderingparams : IDWriteRenderingParams3*) : HRESULT
    @lpVtbl.value.create_custom_rendering_params4.unsafe_as(Proc(Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE1, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams3*, HRESULT)).call(gamma, enhancedcontrast, grayscaleenhancedcontrast, cleartypelevel, pixelgeometry, renderingmode, gridfitmode, renderingparams)
  end
  def create_font_face_reference(fontfile : IDWriteFontFile, faceindex : UInt32, fontsimulations : DWRITE_FONT_SIMULATIONS, fontfacereference : IDWriteFontFaceReference*) : HRESULT
    @lpVtbl.value.create_font_face_reference.unsafe_as(Proc(IDWriteFontFile, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference*, HRESULT)).call(fontfile, faceindex, fontsimulations, fontfacereference)
  end
  def create_font_face_reference2(filepath : LibC::LPWSTR, lastwritetime : FILETIME*, faceindex : UInt32, fontsimulations : DWRITE_FONT_SIMULATIONS, fontfacereference : IDWriteFontFaceReference*) : HRESULT
    @lpVtbl.value.create_font_face_reference2.unsafe_as(Proc(LibC::LPWSTR, FILETIME*, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference*, HRESULT)).call(filepath, lastwritetime, faceindex, fontsimulations, fontfacereference)
  end
  def get_system_font_set(fontset : IDWriteFontSet*) : HRESULT
    @lpVtbl.value.get_system_font_set.unsafe_as(Proc(IDWriteFontSet*, HRESULT)).call(fontset)
  end
  def create_font_set_builder(fontsetbuilder : IDWriteFontSetBuilder*) : HRESULT
    @lpVtbl.value.create_font_set_builder.unsafe_as(Proc(IDWriteFontSetBuilder*, HRESULT)).call(fontsetbuilder)
  end
  def create_font_collection_from_font_set(fontset : IDWriteFontSet, fontcollection : IDWriteFontCollection1*) : HRESULT
    @lpVtbl.value.create_font_collection_from_font_set.unsafe_as(Proc(IDWriteFontSet, IDWriteFontCollection1*, HRESULT)).call(fontset, fontcollection)
  end
  def get_system_font_collection2(includedownloadablefonts : LibC::BOOL, fontcollection : IDWriteFontCollection1*, checkforupdates : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_system_font_collection2.unsafe_as(Proc(LibC::BOOL, IDWriteFontCollection1*, LibC::BOOL, HRESULT)).call(includedownloadablefonts, fontcollection, checkforupdates)
  end
  def get_font_download_queue(fontdownloadqueue : IDWriteFontDownloadQueue*) : HRESULT
    @lpVtbl.value.get_font_download_queue.unsafe_as(Proc(IDWriteFontDownloadQueue*, HRESULT)).call(fontdownloadqueue)
  end
  def translate_color_glyph_run2(baselineorigin : D2D_POINT_2F, glyphrun : DWRITE_GLYPH_RUN*, glyphrundescription : DWRITE_GLYPH_RUN_DESCRIPTION*, desiredglyphimageformats : DWRITE_GLYPH_IMAGE_FORMATS, measuringmode : DWRITE_MEASURING_MODE, worldanddpitransform : DWRITE_MATRIX*, colorpaletteindex : UInt32, colorlayers : IDWriteColorGlyphRunEnumerator1*) : HRESULT
    @lpVtbl.value.translate_color_glyph_run2.unsafe_as(Proc(D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, DWRITE_GLYPH_IMAGE_FORMATS, DWRITE_MEASURING_MODE, DWRITE_MATRIX*, UInt32, IDWriteColorGlyphRunEnumerator1*, HRESULT)).call(baselineorigin, glyphrun, glyphrundescription, desiredglyphimageformats, measuringmode, worldanddpitransform, colorpaletteindex, colorlayers)
  end
  def compute_glyph_origins(glyphrun : DWRITE_GLYPH_RUN*, baselineorigin : D2D_POINT_2F, glyphorigins : D2D_POINT_2F*) : HRESULT
    @lpVtbl.value.compute_glyph_origins.unsafe_as(Proc(DWRITE_GLYPH_RUN*, D2D_POINT_2F, D2D_POINT_2F*, HRESULT)).call(glyphrun, baselineorigin, glyphorigins)
  end
  def compute_glyph_origins2(glyphrun : DWRITE_GLYPH_RUN*, measuringmode : DWRITE_MEASURING_MODE, baselineorigin : D2D_POINT_2F, worldanddpitransform : DWRITE_MATRIX*, glyphorigins : D2D_POINT_2F*) : HRESULT
    @lpVtbl.value.compute_glyph_origins2.unsafe_as(Proc(DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D_POINT_2F, DWRITE_MATRIX*, D2D_POINT_2F*, HRESULT)).call(glyphrun, measuringmode, baselineorigin, worldanddpitransform, glyphorigins)
  end
  def create_font_set_builder2(fontsetbuilder : IDWriteFontSetBuilder1*) : HRESULT
    @lpVtbl.value.create_font_set_builder2.unsafe_as(Proc(IDWriteFontSetBuilder1*, HRESULT)).call(fontsetbuilder)
  end
  def create_in_memory_font_file_loader(newloader : IDWriteInMemoryFontFileLoader*) : HRESULT
    @lpVtbl.value.create_in_memory_font_file_loader.unsafe_as(Proc(IDWriteInMemoryFontFileLoader*, HRESULT)).call(newloader)
  end
  def create_http_font_file_loader(referrerurl : LibC::LPWSTR, extraheaders : LibC::LPWSTR, newloader : IDWriteRemoteFontFileLoader*) : HRESULT
    @lpVtbl.value.create_http_font_file_loader.unsafe_as(Proc(LibC::LPWSTR, LibC::LPWSTR, IDWriteRemoteFontFileLoader*, HRESULT)).call(referrerurl, extraheaders, newloader)
  end
  def analyze_container_type(filedata : Void*, filedatasize : UInt32) : DWRITE_CONTAINER_TYPE
    @lpVtbl.value.analyze_container_type.unsafe_as(Proc(Void*, UInt32, DWRITE_CONTAINER_TYPE)).call(filedata, filedatasize)
  end
  def unpack_font_file(containertype : DWRITE_CONTAINER_TYPE, filedata : Void*, filedatasize : UInt32, unpackedfontstream : IDWriteFontFileStream*) : HRESULT
    @lpVtbl.value.unpack_font_file.unsafe_as(Proc(DWRITE_CONTAINER_TYPE, Void*, UInt32, IDWriteFontFileStream*, HRESULT)).call(containertype, filedata, filedatasize, unpackedfontstream)
  end
  def create_font_face_reference3(fontfile : IDWriteFontFile, faceindex : UInt32, fontsimulations : DWRITE_FONT_SIMULATIONS, fontaxisvalues : DWRITE_FONT_AXIS_VALUE*, fontaxisvaluecount : UInt32, fontfacereference : IDWriteFontFaceReference1*) : HRESULT
    @lpVtbl.value.create_font_face_reference3.unsafe_as(Proc(IDWriteFontFile, UInt32, DWRITE_FONT_SIMULATIONS, DWRITE_FONT_AXIS_VALUE*, UInt32, IDWriteFontFaceReference1*, HRESULT)).call(fontfile, faceindex, fontsimulations, fontaxisvalues, fontaxisvaluecount, fontfacereference)
  end
  def create_font_resource(fontfile : IDWriteFontFile, faceindex : UInt32, fontresource : IDWriteFontResource*) : HRESULT
    @lpVtbl.value.create_font_resource.unsafe_as(Proc(IDWriteFontFile, UInt32, IDWriteFontResource*, HRESULT)).call(fontfile, faceindex, fontresource)
  end
  def get_system_font_set2(includedownloadablefonts : LibC::BOOL, fontset : IDWriteFontSet1*) : HRESULT
    @lpVtbl.value.get_system_font_set2.unsafe_as(Proc(LibC::BOOL, IDWriteFontSet1*, HRESULT)).call(includedownloadablefonts, fontset)
  end
  def get_system_font_collection3(includedownloadablefonts : LibC::BOOL, fontfamilymodel : DWRITE_FONT_FAMILY_MODEL, fontcollection : IDWriteFontCollection2*) : HRESULT
    @lpVtbl.value.get_system_font_collection3.unsafe_as(Proc(LibC::BOOL, DWRITE_FONT_FAMILY_MODEL, IDWriteFontCollection2*, HRESULT)).call(includedownloadablefonts, fontfamilymodel, fontcollection)
  end
  def create_font_collection_from_font_set2(fontset : IDWriteFontSet, fontfamilymodel : DWRITE_FONT_FAMILY_MODEL, fontcollection : IDWriteFontCollection2*) : HRESULT
    @lpVtbl.value.create_font_collection_from_font_set2.unsafe_as(Proc(IDWriteFontSet, DWRITE_FONT_FAMILY_MODEL, IDWriteFontCollection2*, HRESULT)).call(fontset, fontfamilymodel, fontcollection)
  end
  def create_font_set_builder3(fontsetbuilder : IDWriteFontSetBuilder2*) : HRESULT
    @lpVtbl.value.create_font_set_builder3.unsafe_as(Proc(IDWriteFontSetBuilder2*, HRESULT)).call(fontsetbuilder)
  end
  def create_text_format2(fontfamilyname : LibC::LPWSTR, fontcollection : IDWriteFontCollection, fontaxisvalues : DWRITE_FONT_AXIS_VALUE*, fontaxisvaluecount : UInt32, fontsize : Float32, localename : LibC::LPWSTR, textformat : IDWriteTextFormat3*) : HRESULT
    @lpVtbl.value.create_text_format2.unsafe_as(Proc(LibC::LPWSTR, IDWriteFontCollection, DWRITE_FONT_AXIS_VALUE*, UInt32, Float32, LibC::LPWSTR, IDWriteTextFormat3*, HRESULT)).call(fontfamilyname, fontcollection, fontaxisvalues, fontaxisvaluecount, fontsize, localename, textformat)
  end
  def get_system_font_set3(includedownloadablefonts : LibC::BOOL, fontset : IDWriteFontSet2*) : HRESULT
    @lpVtbl.value.get_system_font_set3.unsafe_as(Proc(LibC::BOOL, IDWriteFontSet2*, HRESULT)).call(includedownloadablefonts, fontset)
  end
  def get_system_font_collection4(includedownloadablefonts : LibC::BOOL, fontfamilymodel : DWRITE_FONT_FAMILY_MODEL, fontcollection : IDWriteFontCollection3*) : HRESULT
    @lpVtbl.value.get_system_font_collection4.unsafe_as(Proc(LibC::BOOL, DWRITE_FONT_FAMILY_MODEL, IDWriteFontCollection3*, HRESULT)).call(includedownloadablefonts, fontfamilymodel, fontcollection)
  end
end
struct LibWin32::IDWriteFontSet3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_font_count : UInt32
    @lpVtbl.value.get_font_count.unsafe_as(Proc(UInt32)).call
  end
  def get_font_face_reference(listindex : UInt32, fontfacereference : IDWriteFontFaceReference*) : HRESULT
    @lpVtbl.value.get_font_face_reference.unsafe_as(Proc(UInt32, IDWriteFontFaceReference*, HRESULT)).call(listindex, fontfacereference)
  end
  def find_font_face_reference(fontfacereference : IDWriteFontFaceReference, listindex : UInt32*, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.find_font_face_reference.unsafe_as(Proc(IDWriteFontFaceReference, UInt32*, LibC::BOOL*, HRESULT)).call(fontfacereference, listindex, exists)
  end
  def find_font_face(fontface : IDWriteFontFace, listindex : UInt32*, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.find_font_face.unsafe_as(Proc(IDWriteFontFace, UInt32*, LibC::BOOL*, HRESULT)).call(fontface, listindex, exists)
  end
  def get_property_values(propertyid : DWRITE_FONT_PROPERTY_ID, values : IDWriteStringList*) : HRESULT
    @lpVtbl.value.get_property_values.unsafe_as(Proc(DWRITE_FONT_PROPERTY_ID, IDWriteStringList*, HRESULT)).call(propertyid, values)
  end
  def get_property_values2(propertyid : DWRITE_FONT_PROPERTY_ID, preferredlocalenames : LibC::LPWSTR, values : IDWriteStringList*) : HRESULT
    @lpVtbl.value.get_property_values2.unsafe_as(Proc(DWRITE_FONT_PROPERTY_ID, LibC::LPWSTR, IDWriteStringList*, HRESULT)).call(propertyid, preferredlocalenames, values)
  end
  def get_property_values3(listindex : UInt32, propertyid : DWRITE_FONT_PROPERTY_ID, exists : LibC::BOOL*, values : IDWriteLocalizedStrings*) : HRESULT
    @lpVtbl.value.get_property_values3.unsafe_as(Proc(UInt32, DWRITE_FONT_PROPERTY_ID, LibC::BOOL*, IDWriteLocalizedStrings*, HRESULT)).call(listindex, propertyid, exists, values)
  end
  def get_property_occurrence_count(property : DWRITE_FONT_PROPERTY*, propertyoccurrencecount : UInt32*) : HRESULT
    @lpVtbl.value.get_property_occurrence_count.unsafe_as(Proc(DWRITE_FONT_PROPERTY*, UInt32*, HRESULT)).call(property, propertyoccurrencecount)
  end
  def get_matching_fonts(familyname : LibC::LPWSTR, fontweight : DWRITE_FONT_WEIGHT, fontstretch : DWRITE_FONT_STRETCH, fontstyle : DWRITE_FONT_STYLE, filteredset : IDWriteFontSet*) : HRESULT
    @lpVtbl.value.get_matching_fonts.unsafe_as(Proc(LibC::LPWSTR, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFontSet*, HRESULT)).call(familyname, fontweight, fontstretch, fontstyle, filteredset)
  end
  def get_matching_fonts2(properties : DWRITE_FONT_PROPERTY*, propertycount : UInt32, filteredset : IDWriteFontSet*) : HRESULT
    @lpVtbl.value.get_matching_fonts2.unsafe_as(Proc(DWRITE_FONT_PROPERTY*, UInt32, IDWriteFontSet*, HRESULT)).call(properties, propertycount, filteredset)
  end
  def get_matching_fonts3(fontproperty : DWRITE_FONT_PROPERTY*, fontaxisvalues : DWRITE_FONT_AXIS_VALUE*, fontaxisvaluecount : UInt32, matchingfonts : IDWriteFontSet1*) : HRESULT
    @lpVtbl.value.get_matching_fonts3.unsafe_as(Proc(DWRITE_FONT_PROPERTY*, DWRITE_FONT_AXIS_VALUE*, UInt32, IDWriteFontSet1*, HRESULT)).call(fontproperty, fontaxisvalues, fontaxisvaluecount, matchingfonts)
  end
  def get_first_font_resources(filteredfontset : IDWriteFontSet1*) : HRESULT
    @lpVtbl.value.get_first_font_resources.unsafe_as(Proc(IDWriteFontSet1*, HRESULT)).call(filteredfontset)
  end
  def get_filtered_fonts(indices : UInt32*, indexcount : UInt32, filteredfontset : IDWriteFontSet1*) : HRESULT
    @lpVtbl.value.get_filtered_fonts.unsafe_as(Proc(UInt32*, UInt32, IDWriteFontSet1*, HRESULT)).call(indices, indexcount, filteredfontset)
  end
  def get_filtered_fonts2(fontaxisranges : DWRITE_FONT_AXIS_RANGE*, fontaxisrangecount : UInt32, selectanyrange : LibC::BOOL, filteredfontset : IDWriteFontSet1*) : HRESULT
    @lpVtbl.value.get_filtered_fonts2.unsafe_as(Proc(DWRITE_FONT_AXIS_RANGE*, UInt32, LibC::BOOL, IDWriteFontSet1*, HRESULT)).call(fontaxisranges, fontaxisrangecount, selectanyrange, filteredfontset)
  end
  def get_filtered_fonts3(properties : DWRITE_FONT_PROPERTY*, propertycount : UInt32, selectanyproperty : LibC::BOOL, filteredfontset : IDWriteFontSet1*) : HRESULT
    @lpVtbl.value.get_filtered_fonts3.unsafe_as(Proc(DWRITE_FONT_PROPERTY*, UInt32, LibC::BOOL, IDWriteFontSet1*, HRESULT)).call(properties, propertycount, selectanyproperty, filteredfontset)
  end
  def get_filtered_font_indices(fontaxisranges : DWRITE_FONT_AXIS_RANGE*, fontaxisrangecount : UInt32, selectanyrange : LibC::BOOL, indices : UInt32*, maxindexcount : UInt32, actualindexcount : UInt32*) : HRESULT
    @lpVtbl.value.get_filtered_font_indices.unsafe_as(Proc(DWRITE_FONT_AXIS_RANGE*, UInt32, LibC::BOOL, UInt32*, UInt32, UInt32*, HRESULT)).call(fontaxisranges, fontaxisrangecount, selectanyrange, indices, maxindexcount, actualindexcount)
  end
  def get_filtered_font_indices2(properties : DWRITE_FONT_PROPERTY*, propertycount : UInt32, selectanyproperty : LibC::BOOL, indices : UInt32*, maxindexcount : UInt32, actualindexcount : UInt32*) : HRESULT
    @lpVtbl.value.get_filtered_font_indices2.unsafe_as(Proc(DWRITE_FONT_PROPERTY*, UInt32, LibC::BOOL, UInt32*, UInt32, UInt32*, HRESULT)).call(properties, propertycount, selectanyproperty, indices, maxindexcount, actualindexcount)
  end
  def get_font_axis_ranges(listindex : UInt32, fontaxisranges : DWRITE_FONT_AXIS_RANGE*, maxfontaxisrangecount : UInt32, actualfontaxisrangecount : UInt32*) : HRESULT
    @lpVtbl.value.get_font_axis_ranges.unsafe_as(Proc(UInt32, DWRITE_FONT_AXIS_RANGE*, UInt32, UInt32*, HRESULT)).call(listindex, fontaxisranges, maxfontaxisrangecount, actualfontaxisrangecount)
  end
  def get_font_axis_ranges2(fontaxisranges : DWRITE_FONT_AXIS_RANGE*, maxfontaxisrangecount : UInt32, actualfontaxisrangecount : UInt32*) : HRESULT
    @lpVtbl.value.get_font_axis_ranges2.unsafe_as(Proc(DWRITE_FONT_AXIS_RANGE*, UInt32, UInt32*, HRESULT)).call(fontaxisranges, maxfontaxisrangecount, actualfontaxisrangecount)
  end
  def get_font_face_reference2(listindex : UInt32, fontfacereference : IDWriteFontFaceReference1*) : HRESULT
    @lpVtbl.value.get_font_face_reference2.unsafe_as(Proc(UInt32, IDWriteFontFaceReference1*, HRESULT)).call(listindex, fontfacereference)
  end
  def create_font_resource(listindex : UInt32, fontresource : IDWriteFontResource*) : HRESULT
    @lpVtbl.value.create_font_resource.unsafe_as(Proc(UInt32, IDWriteFontResource*, HRESULT)).call(listindex, fontresource)
  end
  def create_font_face(listindex : UInt32, fontface : IDWriteFontFace5*) : HRESULT
    @lpVtbl.value.create_font_face.unsafe_as(Proc(UInt32, IDWriteFontFace5*, HRESULT)).call(listindex, fontface)
  end
  def get_font_locality(listindex : UInt32) : DWRITE_LOCALITY
    @lpVtbl.value.get_font_locality.unsafe_as(Proc(UInt32, DWRITE_LOCALITY)).call(listindex)
  end
  def get_expiration_event : LibC::HANDLE
    @lpVtbl.value.get_expiration_event.unsafe_as(Proc(LibC::HANDLE)).call
  end
  def get_font_source_type(fontindex : UInt32) : DWRITE_FONT_SOURCE_TYPE
    @lpVtbl.value.get_font_source_type.unsafe_as(Proc(UInt32, DWRITE_FONT_SOURCE_TYPE)).call(fontindex)
  end
  def get_font_source_name_length(listindex : UInt32) : UInt32
    @lpVtbl.value.get_font_source_name_length.unsafe_as(Proc(UInt32, UInt32)).call(listindex)
  end
  def get_font_source_name(listindex : UInt32, stringbuffer : Char*, stringbuffersize : UInt32) : HRESULT
    @lpVtbl.value.get_font_source_name.unsafe_as(Proc(UInt32, Char*, UInt32, HRESULT)).call(listindex, stringbuffer, stringbuffersize)
  end
end
struct LibWin32::IDWriteFontFace6
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type : DWRITE_FONT_FACE_TYPE
    @lpVtbl.value.get_type.unsafe_as(Proc(DWRITE_FONT_FACE_TYPE)).call
  end
  def get_files(numberoffiles : UInt32*, fontfiles : IDWriteFontFile*) : HRESULT
    @lpVtbl.value.get_files.unsafe_as(Proc(UInt32*, IDWriteFontFile*, HRESULT)).call(numberoffiles, fontfiles)
  end
  def get_index : UInt32
    @lpVtbl.value.get_index.unsafe_as(Proc(UInt32)).call
  end
  def get_simulations : DWRITE_FONT_SIMULATIONS
    @lpVtbl.value.get_simulations.unsafe_as(Proc(DWRITE_FONT_SIMULATIONS)).call
  end
  def is_symbol_font : LibC::BOOL
    @lpVtbl.value.is_symbol_font.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_metrics(fontfacemetrics : DWRITE_FONT_METRICS*) : Void
    @lpVtbl.value.get_metrics.unsafe_as(Proc(DWRITE_FONT_METRICS*, Void)).call(fontfacemetrics)
  end
  def get_glyph_count : UInt16
    @lpVtbl.value.get_glyph_count.unsafe_as(Proc(UInt16)).call
  end
  def get_design_glyph_metrics(glyphindices : UInt16*, glyphcount : UInt32, glyphmetrics : DWRITE_GLYPH_METRICS*, issideways : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_design_glyph_metrics.unsafe_as(Proc(UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)).call(glyphindices, glyphcount, glyphmetrics, issideways)
  end
  def get_glyph_indices(codepoints : UInt32*, codepointcount : UInt32, glyphindices : UInt16*) : HRESULT
    @lpVtbl.value.get_glyph_indices.unsafe_as(Proc(UInt32*, UInt32, UInt16*, HRESULT)).call(codepoints, codepointcount, glyphindices)
  end
  def try_get_font_table(opentypetabletag : UInt32, tabledata : Void**, tablesize : UInt32*, tablecontext : Void**, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.try_get_font_table.unsafe_as(Proc(UInt32, Void**, UInt32*, Void**, LibC::BOOL*, HRESULT)).call(opentypetabletag, tabledata, tablesize, tablecontext, exists)
  end
  def release_font_table(tablecontext : Void*) : Void
    @lpVtbl.value.release_font_table.unsafe_as(Proc(Void*, Void)).call(tablecontext)
  end
  def get_glyph_run_outline(emsize : Float32, glyphindices : UInt16*, glyphadvances : Float32*, glyphoffsets : DWRITE_GLYPH_OFFSET*, glyphcount : UInt32, issideways : LibC::BOOL, isrighttoleft : LibC::BOOL, geometrysink : ID2D1SimplifiedGeometrySink) : HRESULT
    @lpVtbl.value.get_glyph_run_outline.unsafe_as(Proc(Float32, UInt16*, Float32*, DWRITE_GLYPH_OFFSET*, UInt32, LibC::BOOL, LibC::BOOL, ID2D1SimplifiedGeometrySink, HRESULT)).call(emsize, glyphindices, glyphadvances, glyphoffsets, glyphcount, issideways, isrighttoleft, geometrysink)
  end
  def get_recommended_rendering_mode(emsize : Float32, pixelsperdip : Float32, measuringmode : DWRITE_MEASURING_MODE, renderingparams : IDWriteRenderingParams, renderingmode : DWRITE_RENDERING_MODE*) : HRESULT
    @lpVtbl.value.get_recommended_rendering_mode.unsafe_as(Proc(Float32, Float32, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE*, HRESULT)).call(emsize, pixelsperdip, measuringmode, renderingparams, renderingmode)
  end
  def get_gdi_compatible_metrics(emsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, fontfacemetrics : DWRITE_FONT_METRICS*) : HRESULT
    @lpVtbl.value.get_gdi_compatible_metrics.unsafe_as(Proc(Float32, Float32, DWRITE_MATRIX*, DWRITE_FONT_METRICS*, HRESULT)).call(emsize, pixelsperdip, transform, fontfacemetrics)
  end
  def get_gdi_compatible_glyph_metrics(emsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, usegdinatural : LibC::BOOL, glyphindices : UInt16*, glyphcount : UInt32, glyphmetrics : DWRITE_GLYPH_METRICS*, issideways : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_gdi_compatible_glyph_metrics.unsafe_as(Proc(Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)).call(emsize, pixelsperdip, transform, usegdinatural, glyphindices, glyphcount, glyphmetrics, issideways)
  end
  def get_metrics2(fontmetrics : DWRITE_FONT_METRICS1*) : Void
    @lpVtbl.value.get_metrics2.unsafe_as(Proc(DWRITE_FONT_METRICS1*, Void)).call(fontmetrics)
  end
  def get_gdi_compatible_metrics2(emsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, fontmetrics : DWRITE_FONT_METRICS1*) : HRESULT
    @lpVtbl.value.get_gdi_compatible_metrics2.unsafe_as(Proc(Float32, Float32, DWRITE_MATRIX*, DWRITE_FONT_METRICS1*, HRESULT)).call(emsize, pixelsperdip, transform, fontmetrics)
  end
  def get_caret_metrics(caretmetrics : DWRITE_CARET_METRICS*) : Void
    @lpVtbl.value.get_caret_metrics.unsafe_as(Proc(DWRITE_CARET_METRICS*, Void)).call(caretmetrics)
  end
  def get_unicode_ranges(maxrangecount : UInt32, unicoderanges : DWRITE_UNICODE_RANGE*, actualrangecount : UInt32*) : HRESULT
    @lpVtbl.value.get_unicode_ranges.unsafe_as(Proc(UInt32, DWRITE_UNICODE_RANGE*, UInt32*, HRESULT)).call(maxrangecount, unicoderanges, actualrangecount)
  end
  def is_monospaced_font : LibC::BOOL
    @lpVtbl.value.is_monospaced_font.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_design_glyph_advances(glyphcount : UInt32, glyphindices : UInt16*, glyphadvances : Int32*, issideways : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_design_glyph_advances.unsafe_as(Proc(UInt32, UInt16*, Int32*, LibC::BOOL, HRESULT)).call(glyphcount, glyphindices, glyphadvances, issideways)
  end
  def get_gdi_compatible_glyph_advances(emsize : Float32, pixelsperdip : Float32, transform : DWRITE_MATRIX*, usegdinatural : LibC::BOOL, issideways : LibC::BOOL, glyphcount : UInt32, glyphindices : UInt16*, glyphadvances : Int32*) : HRESULT
    @lpVtbl.value.get_gdi_compatible_glyph_advances.unsafe_as(Proc(Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, LibC::BOOL, UInt32, UInt16*, Int32*, HRESULT)).call(emsize, pixelsperdip, transform, usegdinatural, issideways, glyphcount, glyphindices, glyphadvances)
  end
  def get_kerning_pair_adjustments(glyphcount : UInt32, glyphindices : UInt16*, glyphadvanceadjustments : Int32*) : HRESULT
    @lpVtbl.value.get_kerning_pair_adjustments.unsafe_as(Proc(UInt32, UInt16*, Int32*, HRESULT)).call(glyphcount, glyphindices, glyphadvanceadjustments)
  end
  def has_kerning_pairs : LibC::BOOL
    @lpVtbl.value.has_kerning_pairs.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_recommended_rendering_mode2(fontemsize : Float32, dpix : Float32, dpiy : Float32, transform : DWRITE_MATRIX*, issideways : LibC::BOOL, outlinethreshold : DWRITE_OUTLINE_THRESHOLD, measuringmode : DWRITE_MEASURING_MODE, renderingmode : DWRITE_RENDERING_MODE*) : HRESULT
    @lpVtbl.value.get_recommended_rendering_mode2.unsafe_as(Proc(Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, DWRITE_RENDERING_MODE*, HRESULT)).call(fontemsize, dpix, dpiy, transform, issideways, outlinethreshold, measuringmode, renderingmode)
  end
  def get_vertical_glyph_variants(glyphcount : UInt32, nominalglyphindices : UInt16*, verticalglyphindices : UInt16*) : HRESULT
    @lpVtbl.value.get_vertical_glyph_variants.unsafe_as(Proc(UInt32, UInt16*, UInt16*, HRESULT)).call(glyphcount, nominalglyphindices, verticalglyphindices)
  end
  def has_vertical_glyph_variants : LibC::BOOL
    @lpVtbl.value.has_vertical_glyph_variants.unsafe_as(Proc(LibC::BOOL)).call
  end
  def is_color_font : LibC::BOOL
    @lpVtbl.value.is_color_font.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_color_palette_count : UInt32
    @lpVtbl.value.get_color_palette_count.unsafe_as(Proc(UInt32)).call
  end
  def get_palette_entry_count : UInt32
    @lpVtbl.value.get_palette_entry_count.unsafe_as(Proc(UInt32)).call
  end
  def get_palette_entries(colorpaletteindex : UInt32, firstentryindex : UInt32, entrycount : UInt32, paletteentries : DWRITE_COLOR_F*) : HRESULT
    @lpVtbl.value.get_palette_entries.unsafe_as(Proc(UInt32, UInt32, UInt32, DWRITE_COLOR_F*, HRESULT)).call(colorpaletteindex, firstentryindex, entrycount, paletteentries)
  end
  def get_recommended_rendering_mode3(fontemsize : Float32, dpix : Float32, dpiy : Float32, transform : DWRITE_MATRIX*, issideways : LibC::BOOL, outlinethreshold : DWRITE_OUTLINE_THRESHOLD, measuringmode : DWRITE_MEASURING_MODE, renderingparams : IDWriteRenderingParams, renderingmode : DWRITE_RENDERING_MODE*, gridfitmode : DWRITE_GRID_FIT_MODE*) : HRESULT
    @lpVtbl.value.get_recommended_rendering_mode3.unsafe_as(Proc(Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE*, DWRITE_GRID_FIT_MODE*, HRESULT)).call(fontemsize, dpix, dpiy, transform, issideways, outlinethreshold, measuringmode, renderingparams, renderingmode, gridfitmode)
  end
  def get_font_face_reference(fontfacereference : IDWriteFontFaceReference*) : HRESULT
    @lpVtbl.value.get_font_face_reference.unsafe_as(Proc(IDWriteFontFaceReference*, HRESULT)).call(fontfacereference)
  end
  def get_panose(panose : DWRITE_PANOSE*) : Void
    @lpVtbl.value.get_panose.unsafe_as(Proc(DWRITE_PANOSE*, Void)).call(panose)
  end
  def get_weight : DWRITE_FONT_WEIGHT
    @lpVtbl.value.get_weight.unsafe_as(Proc(DWRITE_FONT_WEIGHT)).call
  end
  def get_stretch : DWRITE_FONT_STRETCH
    @lpVtbl.value.get_stretch.unsafe_as(Proc(DWRITE_FONT_STRETCH)).call
  end
  def get_style : DWRITE_FONT_STYLE
    @lpVtbl.value.get_style.unsafe_as(Proc(DWRITE_FONT_STYLE)).call
  end
  def get_family_names(names : IDWriteLocalizedStrings*) : HRESULT
    @lpVtbl.value.get_family_names.unsafe_as(Proc(IDWriteLocalizedStrings*, HRESULT)).call(names)
  end
  def get_face_names(names : IDWriteLocalizedStrings*) : HRESULT
    @lpVtbl.value.get_face_names.unsafe_as(Proc(IDWriteLocalizedStrings*, HRESULT)).call(names)
  end
  def get_informational_strings(informationalstringid : DWRITE_INFORMATIONAL_STRING_ID, informationalstrings : IDWriteLocalizedStrings*, exists : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_informational_strings.unsafe_as(Proc(DWRITE_INFORMATIONAL_STRING_ID, IDWriteLocalizedStrings*, LibC::BOOL*, HRESULT)).call(informationalstringid, informationalstrings, exists)
  end
  def has_character(unicodevalue : UInt32) : LibC::BOOL
    @lpVtbl.value.has_character.unsafe_as(Proc(UInt32, LibC::BOOL)).call(unicodevalue)
  end
  def get_recommended_rendering_mode4(fontemsize : Float32, dpix : Float32, dpiy : Float32, transform : DWRITE_MATRIX*, issideways : LibC::BOOL, outlinethreshold : DWRITE_OUTLINE_THRESHOLD, measuringmode : DWRITE_MEASURING_MODE, renderingparams : IDWriteRenderingParams, renderingmode : DWRITE_RENDERING_MODE1*, gridfitmode : DWRITE_GRID_FIT_MODE*) : HRESULT
    @lpVtbl.value.get_recommended_rendering_mode4.unsafe_as(Proc(Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE1*, DWRITE_GRID_FIT_MODE*, HRESULT)).call(fontemsize, dpix, dpiy, transform, issideways, outlinethreshold, measuringmode, renderingparams, renderingmode, gridfitmode)
  end
  def is_character_local(unicodevalue : UInt32) : LibC::BOOL
    @lpVtbl.value.is_character_local.unsafe_as(Proc(UInt32, LibC::BOOL)).call(unicodevalue)
  end
  def is_glyph_local(glyphid : UInt16) : LibC::BOOL
    @lpVtbl.value.is_glyph_local.unsafe_as(Proc(UInt16, LibC::BOOL)).call(glyphid)
  end
  def are_characters_local(characters : Char*, charactercount : UInt32, enqueueifnotlocal : LibC::BOOL, islocal : LibC::BOOL*) : HRESULT
    @lpVtbl.value.are_characters_local.unsafe_as(Proc(Char*, UInt32, LibC::BOOL, LibC::BOOL*, HRESULT)).call(characters, charactercount, enqueueifnotlocal, islocal)
  end
  def are_glyphs_local(glyphindices : UInt16*, glyphcount : UInt32, enqueueifnotlocal : LibC::BOOL, islocal : LibC::BOOL*) : HRESULT
    @lpVtbl.value.are_glyphs_local.unsafe_as(Proc(UInt16*, UInt32, LibC::BOOL, LibC::BOOL*, HRESULT)).call(glyphindices, glyphcount, enqueueifnotlocal, islocal)
  end
  def get_glyph_image_formats(glyphid : UInt16, pixelsperemfirst : UInt32, pixelsperemlast : UInt32, glyphimageformats : DWRITE_GLYPH_IMAGE_FORMATS*) : HRESULT
    @lpVtbl.value.get_glyph_image_formats.unsafe_as(Proc(UInt16, UInt32, UInt32, DWRITE_GLYPH_IMAGE_FORMATS*, HRESULT)).call(glyphid, pixelsperemfirst, pixelsperemlast, glyphimageformats)
  end
  def get_glyph_image_formats2 : DWRITE_GLYPH_IMAGE_FORMATS
    @lpVtbl.value.get_glyph_image_formats2.unsafe_as(Proc(DWRITE_GLYPH_IMAGE_FORMATS)).call
  end
  def get_glyph_image_data(glyphid : UInt16, pixelsperem : UInt32, glyphimageformat : DWRITE_GLYPH_IMAGE_FORMATS, glyphdata : DWRITE_GLYPH_IMAGE_DATA*, glyphdatacontext : Void**) : HRESULT
    @lpVtbl.value.get_glyph_image_data.unsafe_as(Proc(UInt16, UInt32, DWRITE_GLYPH_IMAGE_FORMATS, DWRITE_GLYPH_IMAGE_DATA*, Void**, HRESULT)).call(glyphid, pixelsperem, glyphimageformat, glyphdata, glyphdatacontext)
  end
  def release_glyph_image_data(glyphdatacontext : Void*) : Void
    @lpVtbl.value.release_glyph_image_data.unsafe_as(Proc(Void*, Void)).call(glyphdatacontext)
  end
  def get_font_axis_value_count : UInt32
    @lpVtbl.value.get_font_axis_value_count.unsafe_as(Proc(UInt32)).call
  end
  def get_font_axis_values(fontaxisvalues : DWRITE_FONT_AXIS_VALUE*, fontaxisvaluecount : UInt32) : HRESULT
    @lpVtbl.value.get_font_axis_values.unsafe_as(Proc(DWRITE_FONT_AXIS_VALUE*, UInt32, HRESULT)).call(fontaxisvalues, fontaxisvaluecount)
  end
  def has_variations : LibC::BOOL
    @lpVtbl.value.has_variations.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_font_resource(fontresource : IDWriteFontResource*) : HRESULT
    @lpVtbl.value.get_font_resource.unsafe_as(Proc(IDWriteFontResource*, HRESULT)).call(fontresource)
  end
  def equals(fontface : IDWriteFontFace) : LibC::BOOL
    @lpVtbl.value.equals.unsafe_as(Proc(IDWriteFontFace, LibC::BOOL)).call(fontface)
  end
  def get_family_names2(fontfamilymodel : DWRITE_FONT_FAMILY_MODEL, names : IDWriteLocalizedStrings*) : HRESULT
    @lpVtbl.value.get_family_names2.unsafe_as(Proc(DWRITE_FONT_FAMILY_MODEL, IDWriteLocalizedStrings*, HRESULT)).call(fontfamilymodel, names)
  end
  def get_face_names2(fontfamilymodel : DWRITE_FONT_FAMILY_MODEL, names : IDWriteLocalizedStrings*) : HRESULT
    @lpVtbl.value.get_face_names2.unsafe_as(Proc(DWRITE_FONT_FAMILY_MODEL, IDWriteLocalizedStrings*, HRESULT)).call(fontfamilymodel, names)
  end
end
