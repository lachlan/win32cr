require "../foundation.cr"
require "../graphics/dxgi/common.cr"
require "../system/com.cr"
require "../graphics/direct3d.cr"
require "../graphics/dxgi.cr"

{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link("delayimp")]
{% end %}
@[Link("user32")]
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/IGNORE:4199")]
{% end %}
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/DELAYLOAD:d3d10.dll")]
@[Link(ldflags: "/DELAYLOAD:d3d10_1.dll")]
{% else %}
@[Link("d3d10")]
@[Link("d3d10_1")]
{% end %}
lib LibWin32
  D3D10_16BIT_INDEX_STRIP_CUT_VALUE = 65535_u32
  D3D10_32BIT_INDEX_STRIP_CUT_VALUE = 4294967295_u32
  D3D10_8BIT_INDEX_STRIP_CUT_VALUE = 255_u32
  D3D10_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = 9_u32
  D3D10_CLIP_OR_CULL_DISTANCE_COUNT = 8_u32
  D3D10_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = 2_u32
  D3D10_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = 14_u32
  D3D10_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = 4_u32
  D3D10_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = 15_u32
  D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4_u32
  D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = 15_u32
  D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1_u32
  D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1_u32
  D3D10_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = 64_u32
  D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4_u32
  D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = 1_u32
  D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1_u32
  D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1_u32
  D3D10_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = 32_u32
  D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = 1_u32
  D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = 128_u32
  D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = 1_u32
  D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = 1_u32
  D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = 128_u32
  D3D10_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = 1_u32
  D3D10_COMMONSHADER_SAMPLER_REGISTER_COUNT = 16_u32
  D3D10_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = 1_u32
  D3D10_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = 1_u32
  D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT = 16_u32
  D3D10_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = 32_u32
  D3D10_COMMONSHADER_TEMP_REGISTER_COMPONENTS = 4_u32
  D3D10_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_COMMONSHADER_TEMP_REGISTER_COUNT = 4096_u32
  D3D10_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = 3_u32
  D3D10_COMMONSHADER_TEMP_REGISTER_READ_PORTS = 3_u32
  D3D10_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = 10_u32
  D3D10_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = -10_i32
  D3D10_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = -8_i32
  D3D10_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = 7_u32
  D3D10_DEFAULT_BLEND_FACTOR_ALPHA = "1.0_f32"
  D3D10_DEFAULT_BLEND_FACTOR_BLUE = "1.0_f32"
  D3D10_DEFAULT_BLEND_FACTOR_GREEN = "1.0_f32"
  D3D10_DEFAULT_BLEND_FACTOR_RED = "1.0_f32"
  D3D10_DEFAULT_BORDER_COLOR_COMPONENT = "0.0_f32"
  D3D10_DEFAULT_DEPTH_BIAS = 0_u32
  D3D10_DEFAULT_DEPTH_BIAS_CLAMP = "0.0_f32"
  D3D10_DEFAULT_MAX_ANISOTROPY = "16.0_f32"
  D3D10_DEFAULT_MIP_LOD_BIAS = "0.0_f32"
  D3D10_DEFAULT_RENDER_TARGET_ARRAY_INDEX = 0_u32
  D3D10_DEFAULT_SAMPLE_MASK = 4294967295_u32
  D3D10_DEFAULT_SCISSOR_ENDX = 0_u32
  D3D10_DEFAULT_SCISSOR_ENDY = 0_u32
  D3D10_DEFAULT_SCISSOR_STARTX = 0_u32
  D3D10_DEFAULT_SCISSOR_STARTY = 0_u32
  D3D10_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = "0.0_f32"
  D3D10_DEFAULT_STENCIL_READ_MASK = 255_u32
  D3D10_DEFAULT_STENCIL_REFERENCE = 0_u32
  D3D10_DEFAULT_STENCIL_WRITE_MASK = 255_u32
  D3D10_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = 0_u32
  D3D10_DEFAULT_VIEWPORT_HEIGHT = 0_u32
  D3D10_DEFAULT_VIEWPORT_MAX_DEPTH = "0.0_f32"
  D3D10_DEFAULT_VIEWPORT_MIN_DEPTH = "0.0_f32"
  D3D10_DEFAULT_VIEWPORT_TOPLEFTX = 0_u32
  D3D10_DEFAULT_VIEWPORT_TOPLEFTY = 0_u32
  D3D10_DEFAULT_VIEWPORT_WIDTH = 0_u32
  D3D10_FLOAT16_FUSED_TOLERANCE_IN_ULP = "0.6_f64"
  D3D10_FLOAT32_MAX = "3.4028235e+38_f32"
  D3D10_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = "0.6_f32"
  D3D10_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = "2.4_f32"
  D3D10_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = "1.0_f32"
  D3D10_FLOAT_TO_SRGB_OFFSET = "0.055_f32"
  D3D10_FLOAT_TO_SRGB_SCALE_1 = "12.92_f32"
  D3D10_FLOAT_TO_SRGB_SCALE_2 = "1.055_f32"
  D3D10_FLOAT_TO_SRGB_THRESHOLD = "0.0031308_f32"
  D3D10_FTOI_INSTRUCTION_MAX_INPUT = "2147483600.0_f32"
  D3D10_FTOI_INSTRUCTION_MIN_INPUT = "-2147483600.0_f32"
  D3D10_FTOU_INSTRUCTION_MAX_INPUT = "4294967300.0_f32"
  D3D10_FTOU_INSTRUCTION_MIN_INPUT = "0.0_f32"
  D3D10_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = 1_u32
  D3D10_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_GS_INPUT_PRIM_CONST_REGISTER_COUNT = 1_u32
  D3D10_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = 2_u32
  D3D10_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = 1_u32
  D3D10_GS_INPUT_REGISTER_COMPONENTS = 4_u32
  D3D10_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_GS_INPUT_REGISTER_COUNT = 16_u32
  D3D10_GS_INPUT_REGISTER_READS_PER_INST = 2_u32
  D3D10_GS_INPUT_REGISTER_READ_PORTS = 1_u32
  D3D10_GS_INPUT_REGISTER_VERTICES = 6_u32
  D3D10_GS_OUTPUT_ELEMENTS = 32_u32
  D3D10_GS_OUTPUT_REGISTER_COMPONENTS = 4_u32
  D3D10_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_GS_OUTPUT_REGISTER_COUNT = 32_u32
  D3D10_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = 0_u32
  D3D10_IA_DEFAULT_PRIMITIVE_TOPOLOGY = 0_u32
  D3D10_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = 0_u32
  D3D10_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = 1_u32
  D3D10_IA_INSTANCE_ID_BIT_COUNT = 32_u32
  D3D10_IA_INTEGER_ARITHMETIC_BIT_COUNT = 32_u32
  D3D10_IA_PRIMITIVE_ID_BIT_COUNT = 32_u32
  D3D10_IA_VERTEX_ID_BIT_COUNT = 32_u32
  D3D10_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 16_u32
  D3D10_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 64_u32
  D3D10_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 16_u32
  D3D10_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = 4294967295_u32
  D3D10_INTEGER_DIVIDE_BY_ZERO_REMAINDER = 4294967295_u32
  D3D10_LINEAR_GAMMA = "1.0_f32"
  D3D10_MAX_BORDER_COLOR_COMPONENT = "1.0_f32"
  D3D10_MAX_DEPTH = "1.0_f32"
  D3D10_MAX_MAXANISOTROPY = 16_u32
  D3D10_MAX_MULTISAMPLE_SAMPLE_COUNT = 32_u32
  D3D10_MAX_POSITION_VALUE = "3.4028236e+34_f32"
  D3D10_MAX_TEXTURE_DIMENSION_2_TO_EXP = 17_u32
  D3D10_MIN_BORDER_COLOR_COMPONENT = "0.0_f32"
  D3D10_MIN_DEPTH = "0.0_f32"
  D3D10_MIN_MAXANISOTROPY = 0_u32
  D3D10_MIP_LOD_BIAS_MAX = "15.99_f32"
  D3D10_MIP_LOD_BIAS_MIN = "-16.0_f32"
  D3D10_MIP_LOD_FRACTIONAL_BIT_COUNT = 6_u32
  D3D10_MIP_LOD_RANGE_BIT_COUNT = 8_u32
  D3D10_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = "1.4_f32"
  D3D10_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = 0_u32
  D3D10_PIXEL_ADDRESS_RANGE_BIT_COUNT = 13_u32
  D3D10_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = 15_u32
  D3D10_PS_FRONTFACING_DEFAULT_VALUE = 4294967295_u32
  D3D10_PS_FRONTFACING_FALSE_VALUE = 0_u32
  D3D10_PS_FRONTFACING_TRUE_VALUE = 4294967295_u32
  D3D10_PS_INPUT_REGISTER_COMPONENTS = 4_u32
  D3D10_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_PS_INPUT_REGISTER_COUNT = 32_u32
  D3D10_PS_INPUT_REGISTER_READS_PER_INST = 2_u32
  D3D10_PS_INPUT_REGISTER_READ_PORTS = 1_u32
  D3D10_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = "0.0_f32"
  D3D10_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = 1_u32
  D3D10_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_PS_OUTPUT_DEPTH_REGISTER_COUNT = 1_u32
  D3D10_PS_OUTPUT_REGISTER_COMPONENTS = 4_u32
  D3D10_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_PS_OUTPUT_REGISTER_COUNT = 8_u32
  D3D10_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = "0.5_f32"
  D3D10_REQ_BLEND_OBJECT_COUNT_PER_CONTEXT = 4096_u32
  D3D10_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = 27_u32
  D3D10_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = 4096_u32
  D3D10_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_CONTEXT = 4096_u32
  D3D10_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 32_u32
  D3D10_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = 32_u32
  D3D10_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = 8192_u32
  D3D10_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = 1024_u32
  D3D10_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = 4096_u32
  D3D10_REQ_MAXANISOTROPY = 16_u32
  D3D10_REQ_MIP_LEVELS = 14_u32
  D3D10_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = 2048_u32
  D3D10_REQ_RASTERIZER_OBJECT_COUNT_PER_CONTEXT = 4096_u32
  D3D10_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = 8192_u32
  D3D10_REQ_RESOURCE_SIZE_IN_MEGABYTES = 128_u32
  D3D10_REQ_RESOURCE_VIEW_COUNT_PER_CONTEXT_2_TO_EXP = 20_u32
  D3D10_REQ_SAMPLER_OBJECT_COUNT_PER_CONTEXT = 4096_u32
  D3D10_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = 512_u32
  D3D10_REQ_TEXTURE1D_U_DIMENSION = 8192_u32
  D3D10_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = 512_u32
  D3D10_REQ_TEXTURE2D_U_OR_V_DIMENSION = 8192_u32
  D3D10_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 2048_u32
  D3D10_REQ_TEXTURECUBE_DIMENSION = 8192_u32
  D3D10_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0_u32
  D3D10_SHADER_MAJOR_VERSION = 4_u32
  D3D10_SHADER_MINOR_VERSION = 0_u32
  D3D10_SHIFT_INSTRUCTION_PAD_VALUE = 0_u32
  D3D10_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = 5_u32
  D3D10_SIMULTANEOUS_RENDER_TARGET_COUNT = 8_u32
  D3D10_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048_u32
  D3D10_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 256_u32
  D3D10_SO_BUFFER_SLOT_COUNT = 4_u32
  D3D10_SO_DDI_REGISTER_INDEX_DENOTING_GAP = 4294967295_u32
  D3D10_SO_MULTIPLE_BUFFER_ELEMENTS_PER_BUFFER = 1_u32
  D3D10_SO_SINGLE_BUFFER_COMPONENT_LIMIT = 64_u32
  D3D10_SRGB_GAMMA = "2.2_f32"
  D3D10_SRGB_TO_FLOAT_DENOMINATOR_1 = "12.92_f32"
  D3D10_SRGB_TO_FLOAT_DENOMINATOR_2 = "1.055_f32"
  D3D10_SRGB_TO_FLOAT_EXPONENT = "2.4_f32"
  D3D10_SRGB_TO_FLOAT_OFFSET = "0.055_f32"
  D3D10_SRGB_TO_FLOAT_THRESHOLD = "0.04045_f32"
  D3D10_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = "0.5_f32"
  D3D10_STANDARD_COMPONENT_BIT_COUNT = 32_u32
  D3D10_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = 64_u32
  D3D10_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4_u32
  D3D10_STANDARD_PIXEL_COMPONENT_COUNT = 128_u32
  D3D10_STANDARD_PIXEL_ELEMENT_COUNT = 32_u32
  D3D10_STANDARD_VECTOR_SIZE = 4_u32
  D3D10_STANDARD_VERTEX_ELEMENT_COUNT = 16_u32
  D3D10_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = 64_u32
  D3D10_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8_u32
  D3D10_SUBTEXEL_FRACTIONAL_BIT_COUNT = 6_u32
  D3D10_TEXEL_ADDRESS_RANGE_BIT_COUNT = 18_u32
  D3D10_UNBOUND_MEMORY_ACCESS_RESULT = 0_u32
  D3D10_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = 15_u32
  D3D10_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16_u32
  D3D10_VIEWPORT_BOUNDS_MAX = 16383_u32
  D3D10_VIEWPORT_BOUNDS_MIN = -16384_i32
  D3D10_VS_INPUT_REGISTER_COMPONENTS = 4_u32
  D3D10_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_VS_INPUT_REGISTER_COUNT = 16_u32
  D3D10_VS_INPUT_REGISTER_READS_PER_INST = 2_u32
  D3D10_VS_INPUT_REGISTER_READ_PORTS = 1_u32
  D3D10_VS_OUTPUT_REGISTER_COMPONENTS = 4_u32
  D3D10_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_VS_OUTPUT_REGISTER_COUNT = 16_u32
  D3D10_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = 10_u32
  D3D10_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 25_u32
  D3D10_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = 25_u32
  D3D_MAJOR_VERSION = 10_u32
  D3D_MINOR_VERSION = 0_u32
  D3D_SPEC_DATE_DAY = 8_u32
  D3D_SPEC_DATE_MONTH = 8_u32
  D3D_SPEC_DATE_YEAR = 2006_u32
  D3D_SPEC_VERSION = "1.050005_f64"
  D3D10_1_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 16_u32
  D3D10_1_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 16_u32
  FACD3D10 = 2169_u32
  D3D10_APPEND_ALIGNED_ELEMENT = 4294967295_u32
  D3D10_FILTER_TYPE_MASK = 3_u32
  D3D10_MIN_FILTER_SHIFT = 4_u32
  D3D10_MAG_FILTER_SHIFT = 2_u32
  D3D10_MIP_FILTER_SHIFT = 0_u32
  D3D10_COMPARISON_FILTERING_BIT = 128_u32
  D3D10_ANISOTROPIC_FILTERING_BIT = 64_u32
  D3D10_TEXT_1BIT_BIT = 2147483648_u32
  D3D10_SDK_VERSION = 29_u32
  D3D10_1_DEFAULT_SAMPLE_MASK = 4294967295_u32
  D3D10_1_FLOAT16_FUSED_TOLERANCE_IN_ULP = "0.6_f64"
  D3D10_1_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = "0.6_f32"
  D3D10_1_GS_INPUT_REGISTER_COUNT = 32_u32
  D3D10_1_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 128_u32
  D3D10_1_PS_OUTPUT_MASK_REGISTER_COMPONENTS = 1_u32
  D3D10_1_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_1_PS_OUTPUT_MASK_REGISTER_COUNT = 1_u32
  D3D10_1_SHADER_MAJOR_VERSION = 4_u32
  D3D10_1_SHADER_MINOR_VERSION = 1_u32
  D3D10_1_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048_u32
  D3D10_1_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 256_u32
  D3D10_1_SO_BUFFER_SLOT_COUNT = 4_u32
  D3D10_1_SO_MULTIPLE_BUFFER_ELEMENTS_PER_BUFFER = 1_u32
  D3D10_1_SO_SINGLE_BUFFER_COMPONENT_LIMIT = 64_u32
  D3D10_1_STANDARD_VERTEX_ELEMENT_COUNT = 32_u32
  D3D10_1_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8_u32
  D3D10_1_VS_INPUT_REGISTER_COUNT = 32_u32
  D3D10_1_VS_OUTPUT_REGISTER_COUNT = 32_u32
  D3D10_SDK_LAYERS_VERSION = 11_u32
  D3D10_DEBUG_FEATURE_FLUSH_PER_RENDER_OP = 1_u32
  D3D10_DEBUG_FEATURE_FINISH_PER_RENDER_OP = 2_u32
  D3D10_DEBUG_FEATURE_PRESENT_PER_RENDER_OP = 4_u32
  DXGI_DEBUG_D3D10 = "243b4c52-3606-4d3a-99d7-a7e7b33ed706"
  D3D10_INFO_QUEUE_DEFAULT_MESSAGE_COUNT_LIMIT = 1024_u32
  D3D10_SHADER_DEBUG = 1_u32
  D3D10_SHADER_SKIP_VALIDATION = 2_u32
  D3D10_SHADER_SKIP_OPTIMIZATION = 4_u32
  D3D10_SHADER_PACK_MATRIX_ROW_MAJOR = 8_u32
  D3D10_SHADER_PACK_MATRIX_COLUMN_MAJOR = 16_u32
  D3D10_SHADER_PARTIAL_PRECISION = 32_u32
  D3D10_SHADER_FORCE_VS_SOFTWARE_NO_OPT = 64_u32
  D3D10_SHADER_FORCE_PS_SOFTWARE_NO_OPT = 128_u32
  D3D10_SHADER_NO_PRESHADER = 256_u32
  D3D10_SHADER_AVOID_FLOW_CONTROL = 512_u32
  D3D10_SHADER_PREFER_FLOW_CONTROL = 1024_u32
  D3D10_SHADER_ENABLE_STRICTNESS = 2048_u32
  D3D10_SHADER_ENABLE_BACKWARDS_COMPATIBILITY = 4096_u32
  D3D10_SHADER_IEEE_STRICTNESS = 8192_u32
  D3D10_SHADER_WARNINGS_ARE_ERRORS = 262144_u32
  D3D10_SHADER_RESOURCES_MAY_ALIAS = 524288_u32
  D3D10_ENABLE_UNBOUNDED_DESCRIPTOR_TABLES = 1048576_u32
  D3D10_ALL_RESOURCES_BOUND = 2097152_u32
  D3D10_SHADER_DEBUG_NAME_FOR_SOURCE = 4194304_u32
  D3D10_SHADER_DEBUG_NAME_FOR_BINARY = 8388608_u32
  D3D10_SHADER_OPTIMIZATION_LEVEL0 = 16384_u32
  D3D10_SHADER_OPTIMIZATION_LEVEL1 = 0_u32
  D3D10_SHADER_OPTIMIZATION_LEVEL3 = 32768_u32
  D3D10_SHADER_FLAGS2_FORCE_ROOT_SIGNATURE_LATEST = 0_u32
  D3D10_SHADER_FLAGS2_FORCE_ROOT_SIGNATURE_1_0 = 16_u32
  D3D10_SHADER_FLAGS2_FORCE_ROOT_SIGNATURE_1_1 = 32_u32
  D3D10_EFFECT_COMPILE_CHILD_EFFECT = 1_u32
  D3D10_EFFECT_COMPILE_ALLOW_SLOW_OPS = 2_u32
  D3D10_EFFECT_SINGLE_THREADED = 8_u32
  D3D10_EFFECT_VARIABLE_POOLED = 1_u32
  D3D10_EFFECT_VARIABLE_ANNOTATION = 2_u32
  D3D10_EFFECT_VARIABLE_EXPLICIT_BIND_POINT = 4_u32
  GUID_DeviceType = "d722fb4d-7a68-437a-b20c-5804ee2494a6"

  alias PFN_D3D10_CREATE_DEVICE1 = Proc(IDXGIAdapter, D3D10_DRIVER_TYPE, HINSTANCE, UInt32, D3D10_FEATURE_LEVEL1, UInt32, ID3D10Device1*, HRESULT)
  alias PFN_D3D10_CREATE_DEVICE_AND_SWAP_CHAIN1 = Proc(IDXGIAdapter, D3D10_DRIVER_TYPE, HINSTANCE, UInt32, D3D10_FEATURE_LEVEL1, UInt32, DXGI_SWAP_CHAIN_DESC*, IDXGISwapChain*, ID3D10Device1*, HRESULT)


  enum D3D10_INPUT_CLASSIFICATION : Int32
    D3D10_INPUT_PER_VERTEX_DATA = 0
    D3D10_INPUT_PER_INSTANCE_DATA = 1
  end

  enum D3D10_FILL_MODE : Int32
    D3D10_FILL_WIREFRAME = 2
    D3D10_FILL_SOLID = 3
  end

  enum D3D10_CULL_MODE : Int32
    D3D10_CULL_NONE = 1
    D3D10_CULL_FRONT = 2
    D3D10_CULL_BACK = 3
  end

  enum D3D10_RESOURCE_DIMENSION : Int32
    D3D10_RESOURCE_DIMENSION_UNKNOWN = 0
    D3D10_RESOURCE_DIMENSION_BUFFER = 1
    D3D10_RESOURCE_DIMENSION_TEXTURE1D = 2
    D3D10_RESOURCE_DIMENSION_TEXTURE2D = 3
    D3D10_RESOURCE_DIMENSION_TEXTURE3D = 4
  end

  enum D3D10_DSV_DIMENSION : Int32
    D3D10_DSV_DIMENSION_UNKNOWN = 0
    D3D10_DSV_DIMENSION_TEXTURE1D = 1
    D3D10_DSV_DIMENSION_TEXTURE1DARRAY = 2
    D3D10_DSV_DIMENSION_TEXTURE2D = 3
    D3D10_DSV_DIMENSION_TEXTURE2DARRAY = 4
    D3D10_DSV_DIMENSION_TEXTURE2DMS = 5
    D3D10_DSV_DIMENSION_TEXTURE2DMSARRAY = 6
  end

  enum D3D10_RTV_DIMENSION : Int32
    D3D10_RTV_DIMENSION_UNKNOWN = 0
    D3D10_RTV_DIMENSION_BUFFER = 1
    D3D10_RTV_DIMENSION_TEXTURE1D = 2
    D3D10_RTV_DIMENSION_TEXTURE1DARRAY = 3
    D3D10_RTV_DIMENSION_TEXTURE2D = 4
    D3D10_RTV_DIMENSION_TEXTURE2DARRAY = 5
    D3D10_RTV_DIMENSION_TEXTURE2DMS = 6
    D3D10_RTV_DIMENSION_TEXTURE2DMSARRAY = 7
    D3D10_RTV_DIMENSION_TEXTURE3D = 8
  end

  enum D3D10_USAGE : Int32
    D3D10_USAGE_DEFAULT = 0
    D3D10_USAGE_IMMUTABLE = 1
    D3D10_USAGE_DYNAMIC = 2
    D3D10_USAGE_STAGING = 3
  end

  enum D3D10_BIND_FLAG : Int32
    D3D10_BIND_VERTEX_BUFFER = 1
    D3D10_BIND_INDEX_BUFFER = 2
    D3D10_BIND_CONSTANT_BUFFER = 4
    D3D10_BIND_SHADER_RESOURCE = 8
    D3D10_BIND_STREAM_OUTPUT = 16
    D3D10_BIND_RENDER_TARGET = 32
    D3D10_BIND_DEPTH_STENCIL = 64
  end

  enum D3D10_CPU_ACCESS_FLAG : Int32
    D3D10_CPU_ACCESS_WRITE = 65536
    D3D10_CPU_ACCESS_READ = 131072
  end

  enum D3D10_RESOURCE_MISC_FLAG : Int32
    D3D10_RESOURCE_MISC_GENERATE_MIPS = 1
    D3D10_RESOURCE_MISC_SHARED = 2
    D3D10_RESOURCE_MISC_TEXTURECUBE = 4
    D3D10_RESOURCE_MISC_SHARED_KEYEDMUTEX = 16
    D3D10_RESOURCE_MISC_GDI_COMPATIBLE = 32
  end

  enum D3D10_MAP : Int32
    D3D10_MAP_READ = 1
    D3D10_MAP_WRITE = 2
    D3D10_MAP_READ_WRITE = 3
    D3D10_MAP_WRITE_DISCARD = 4
    D3D10_MAP_WRITE_NO_OVERWRITE = 5
  end

  enum D3D10_MAP_FLAG : Int32
    D3D10_MAP_FLAG_DO_NOT_WAIT = 1048576
  end

  enum D3D10_RAISE_FLAG : Int32
    D3D10_RAISE_FLAG_DRIVER_INTERNAL_ERROR = 1
  end

  enum D3D10_CLEAR_FLAG : Int32
    D3D10_CLEAR_DEPTH = 1
    D3D10_CLEAR_STENCIL = 2
  end

  enum D3D10_COMPARISON_FUNC : Int32
    D3D10_COMPARISON_NEVER = 1
    D3D10_COMPARISON_LESS = 2
    D3D10_COMPARISON_EQUAL = 3
    D3D10_COMPARISON_LESS_EQUAL = 4
    D3D10_COMPARISON_GREATER = 5
    D3D10_COMPARISON_NOT_EQUAL = 6
    D3D10_COMPARISON_GREATER_EQUAL = 7
    D3D10_COMPARISON_ALWAYS = 8
  end

  enum D3D10_DEPTH_WRITE_MASK : Int32
    D3D10_DEPTH_WRITE_MASK_ZERO = 0
    D3D10_DEPTH_WRITE_MASK_ALL = 1
  end

  enum D3D10_STENCIL_OP : Int32
    D3D10_STENCIL_OP_KEEP = 1
    D3D10_STENCIL_OP_ZERO = 2
    D3D10_STENCIL_OP_REPLACE = 3
    D3D10_STENCIL_OP_INCR_SAT = 4
    D3D10_STENCIL_OP_DECR_SAT = 5
    D3D10_STENCIL_OP_INVERT = 6
    D3D10_STENCIL_OP_INCR = 7
    D3D10_STENCIL_OP_DECR = 8
  end

  enum D3D10_BLEND : Int32
    D3D10_BLEND_ZERO = 1
    D3D10_BLEND_ONE = 2
    D3D10_BLEND_SRC_COLOR = 3
    D3D10_BLEND_INV_SRC_COLOR = 4
    D3D10_BLEND_SRC_ALPHA = 5
    D3D10_BLEND_INV_SRC_ALPHA = 6
    D3D10_BLEND_DEST_ALPHA = 7
    D3D10_BLEND_INV_DEST_ALPHA = 8
    D3D10_BLEND_DEST_COLOR = 9
    D3D10_BLEND_INV_DEST_COLOR = 10
    D3D10_BLEND_SRC_ALPHA_SAT = 11
    D3D10_BLEND_BLEND_FACTOR = 14
    D3D10_BLEND_INV_BLEND_FACTOR = 15
    D3D10_BLEND_SRC1_COLOR = 16
    D3D10_BLEND_INV_SRC1_COLOR = 17
    D3D10_BLEND_SRC1_ALPHA = 18
    D3D10_BLEND_INV_SRC1_ALPHA = 19
  end

  enum D3D10_BLEND_OP : Int32
    D3D10_BLEND_OP_ADD = 1
    D3D10_BLEND_OP_SUBTRACT = 2
    D3D10_BLEND_OP_REV_SUBTRACT = 3
    D3D10_BLEND_OP_MIN = 4
    D3D10_BLEND_OP_MAX = 5
  end

  enum D3D10_COLOR_WRITE_ENABLE : Int32
    D3D10_COLOR_WRITE_ENABLE_RED = 1
    D3D10_COLOR_WRITE_ENABLE_GREEN = 2
    D3D10_COLOR_WRITE_ENABLE_BLUE = 4
    D3D10_COLOR_WRITE_ENABLE_ALPHA = 8
    D3D10_COLOR_WRITE_ENABLE_ALL = 15
  end

  enum D3D10_TEXTURECUBE_FACE : Int32
    D3D10_TEXTURECUBE_FACE_POSITIVE_X = 0
    D3D10_TEXTURECUBE_FACE_NEGATIVE_X = 1
    D3D10_TEXTURECUBE_FACE_POSITIVE_Y = 2
    D3D10_TEXTURECUBE_FACE_NEGATIVE_Y = 3
    D3D10_TEXTURECUBE_FACE_POSITIVE_Z = 4
    D3D10_TEXTURECUBE_FACE_NEGATIVE_Z = 5
  end

  enum D3D10_FILTER : Int32
    D3D10_FILTER_MIN_MAG_MIP_POINT = 0
    D3D10_FILTER_MIN_MAG_POINT_MIP_LINEAR = 1
    D3D10_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 4
    D3D10_FILTER_MIN_POINT_MAG_MIP_LINEAR = 5
    D3D10_FILTER_MIN_LINEAR_MAG_MIP_POINT = 16
    D3D10_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 17
    D3D10_FILTER_MIN_MAG_LINEAR_MIP_POINT = 20
    D3D10_FILTER_MIN_MAG_MIP_LINEAR = 21
    D3D10_FILTER_ANISOTROPIC = 85
    D3D10_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 128
    D3D10_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 129
    D3D10_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 132
    D3D10_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 133
    D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 144
    D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 145
    D3D10_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 148
    D3D10_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 149
    D3D10_FILTER_COMPARISON_ANISOTROPIC = 213
    D3D10_FILTER_TEXT_1BIT = -2147483648
  end

  enum D3D10_FILTER_TYPE : Int32
    D3D10_FILTER_TYPE_POINT = 0
    D3D10_FILTER_TYPE_LINEAR = 1
  end

  enum D3D10_TEXTURE_ADDRESS_MODE : Int32
    D3D10_TEXTURE_ADDRESS_WRAP = 1
    D3D10_TEXTURE_ADDRESS_MIRROR = 2
    D3D10_TEXTURE_ADDRESS_CLAMP = 3
    D3D10_TEXTURE_ADDRESS_BORDER = 4
    D3D10_TEXTURE_ADDRESS_MIRROR_ONCE = 5
  end

  enum D3D10_FORMAT_SUPPORT : Int32
    D3D10_FORMAT_SUPPORT_BUFFER = 1
    D3D10_FORMAT_SUPPORT_IA_VERTEX_BUFFER = 2
    D3D10_FORMAT_SUPPORT_IA_INDEX_BUFFER = 4
    D3D10_FORMAT_SUPPORT_SO_BUFFER = 8
    D3D10_FORMAT_SUPPORT_TEXTURE1D = 16
    D3D10_FORMAT_SUPPORT_TEXTURE2D = 32
    D3D10_FORMAT_SUPPORT_TEXTURE3D = 64
    D3D10_FORMAT_SUPPORT_TEXTURECUBE = 128
    D3D10_FORMAT_SUPPORT_SHADER_LOAD = 256
    D3D10_FORMAT_SUPPORT_SHADER_SAMPLE = 512
    D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON = 1024
    D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT = 2048
    D3D10_FORMAT_SUPPORT_MIP = 4096
    D3D10_FORMAT_SUPPORT_MIP_AUTOGEN = 8192
    D3D10_FORMAT_SUPPORT_RENDER_TARGET = 16384
    D3D10_FORMAT_SUPPORT_BLENDABLE = 32768
    D3D10_FORMAT_SUPPORT_DEPTH_STENCIL = 65536
    D3D10_FORMAT_SUPPORT_CPU_LOCKABLE = 131072
    D3D10_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE = 262144
    D3D10_FORMAT_SUPPORT_DISPLAY = 524288
    D3D10_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT = 1048576
    D3D10_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET = 2097152
    D3D10_FORMAT_SUPPORT_MULTISAMPLE_LOAD = 4194304
    D3D10_FORMAT_SUPPORT_SHADER_GATHER = 8388608
    D3D10_FORMAT_SUPPORT_BACK_BUFFER_CAST = 16777216
  end

  enum D3D10_ASYNC_GETDATA_FLAG : Int32
    D3D10_ASYNC_GETDATA_DONOTFLUSH = 1
  end

  enum D3D10_QUERY : Int32
    D3D10_QUERY_EVENT = 0
    D3D10_QUERY_OCCLUSION = 1
    D3D10_QUERY_TIMESTAMP = 2
    D3D10_QUERY_TIMESTAMP_DISJOINT = 3
    D3D10_QUERY_PIPELINE_STATISTICS = 4
    D3D10_QUERY_OCCLUSION_PREDICATE = 5
    D3D10_QUERY_SO_STATISTICS = 6
    D3D10_QUERY_SO_OVERFLOW_PREDICATE = 7
  end

  enum D3D10_QUERY_MISC_FLAG : Int32
    D3D10_QUERY_MISC_PREDICATEHINT = 1
  end

  enum D3D10_COUNTER : Int32
    D3D10_COUNTER_GPU_IDLE = 0
    D3D10_COUNTER_VERTEX_PROCESSING = 1
    D3D10_COUNTER_GEOMETRY_PROCESSING = 2
    D3D10_COUNTER_PIXEL_PROCESSING = 3
    D3D10_COUNTER_OTHER_GPU_PROCESSING = 4
    D3D10_COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION = 5
    D3D10_COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION = 6
    D3D10_COUNTER_VERTEX_THROUGHPUT_UTILIZATION = 7
    D3D10_COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION = 8
    D3D10_COUNTER_FILLRATE_THROUGHPUT_UTILIZATION = 9
    D3D10_COUNTER_VS_MEMORY_LIMITED = 10
    D3D10_COUNTER_VS_COMPUTATION_LIMITED = 11
    D3D10_COUNTER_GS_MEMORY_LIMITED = 12
    D3D10_COUNTER_GS_COMPUTATION_LIMITED = 13
    D3D10_COUNTER_PS_MEMORY_LIMITED = 14
    D3D10_COUNTER_PS_COMPUTATION_LIMITED = 15
    D3D10_COUNTER_POST_TRANSFORM_CACHE_HIT_RATE = 16
    D3D10_COUNTER_TEXTURE_CACHE_HIT_RATE = 17
    D3D10_COUNTER_DEVICE_DEPENDENT_0 = 1073741824
  end

  enum D3D10_COUNTER_TYPE : Int32
    D3D10_COUNTER_TYPE_FLOAT32 = 0
    D3D10_COUNTER_TYPE_UINT16 = 1
    D3D10_COUNTER_TYPE_UINT32 = 2
    D3D10_COUNTER_TYPE_UINT64 = 3
  end

  enum D3D10_CREATE_DEVICE_FLAG : Int32
    D3D10_CREATE_DEVICE_SINGLETHREADED = 1
    D3D10_CREATE_DEVICE_DEBUG = 2
    D3D10_CREATE_DEVICE_SWITCH_TO_REF = 4
    D3D10_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = 8
    D3D10_CREATE_DEVICE_ALLOW_NULL_FROM_MAP = 16
    D3D10_CREATE_DEVICE_BGRA_SUPPORT = 32
    D3D10_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = 128
    D3D10_CREATE_DEVICE_STRICT_VALIDATION = 512
    D3D10_CREATE_DEVICE_DEBUGGABLE = 1024
  end

  enum D3D10_MESSAGE_CATEGORY : Int32
    D3D10_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0
    D3D10_MESSAGE_CATEGORY_MISCELLANEOUS = 1
    D3D10_MESSAGE_CATEGORY_INITIALIZATION = 2
    D3D10_MESSAGE_CATEGORY_CLEANUP = 3
    D3D10_MESSAGE_CATEGORY_COMPILATION = 4
    D3D10_MESSAGE_CATEGORY_STATE_CREATION = 5
    D3D10_MESSAGE_CATEGORY_STATE_SETTING = 6
    D3D10_MESSAGE_CATEGORY_STATE_GETTING = 7
    D3D10_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 8
    D3D10_MESSAGE_CATEGORY_EXECUTION = 9
    D3D10_MESSAGE_CATEGORY_SHADER = 10
  end

  enum D3D10_MESSAGE_SEVERITY : Int32
    D3D10_MESSAGE_SEVERITY_CORRUPTION = 0
    D3D10_MESSAGE_SEVERITY_ERROR = 1
    D3D10_MESSAGE_SEVERITY_WARNING = 2
    D3D10_MESSAGE_SEVERITY_INFO = 3
    D3D10_MESSAGE_SEVERITY_MESSAGE = 4
  end

  enum D3D10_MESSAGE_ID : Int32
    D3D10_MESSAGE_ID_UNKNOWN = 0
    D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD = 1
    D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD = 2
    D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD = 3
    D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD = 4
    D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD = 5
    D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD = 6
    D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD = 7
    D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD = 8
    D3D10_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD = 9
    D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD = 10
    D3D10_MESSAGE_ID_STRING_FROM_APPLICATION = 11
    D3D10_MESSAGE_ID_CORRUPTED_THIS = 12
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER1 = 13
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER2 = 14
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER3 = 15
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER4 = 16
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER5 = 17
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER6 = 18
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER7 = 19
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER8 = 20
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER9 = 21
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER10 = 22
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER11 = 23
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER12 = 24
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER13 = 25
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER14 = 26
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER15 = 27
    D3D10_MESSAGE_ID_CORRUPTED_MULTITHREADING = 28
    D3D10_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 29
    D3D10_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT = 30
    D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT = 31
    D3D10_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT = 32
    D3D10_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT = 33
    D3D10_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 34
    D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 35
    D3D10_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT = 36
    D3D10_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT = 37
    D3D10_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 38
    D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 39
    D3D10_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT = 40
    D3D10_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT = 41
    D3D10_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT = 42
    D3D10_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 43
    D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 44
    D3D10_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT = 45
    D3D10_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT = 46
    D3D10_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT = 47
    D3D10_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT = 48
    D3D10_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT = 49
    D3D10_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT = 50
    D3D10_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 51
    D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 52
    D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN = 53
    D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS = 54
    D3D10_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 55
    D3D10_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 56
    D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT = 57
    D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES = 58
    D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE = 59
    D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS = 60
    D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS = 61
    D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS = 62
    D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS = 63
    D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS = 64
    D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA = 65
    D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS = 66
    D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS = 67
    D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS = 68
    D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN = 69
    D3D10_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN = 70
    D3D10_MESSAGE_ID_CREATEBUFFER_NULLDESC = 71
    D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS = 72
    D3D10_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION = 73
    D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT = 74
    D3D10_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT = 75
    D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES = 76
    D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE = 77
    D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS = 78
    D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS = 79
    D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS = 80
    D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS = 81
    D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS = 82
    D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA = 83
    D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS = 84
    D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS = 85
    D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS = 86
    D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN = 87
    D3D10_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN = 88
    D3D10_MESSAGE_ID_CREATETEXTURE1D_NULLDESC = 89
    D3D10_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION = 90
    D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT = 91
    D3D10_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT = 92
    D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES = 93
    D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE = 94
    D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS = 95
    D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS = 96
    D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS = 97
    D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS = 98
    D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS = 99
    D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA = 100
    D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS = 101
    D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS = 102
    D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS = 103
    D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN = 104
    D3D10_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN = 105
    D3D10_MESSAGE_ID_CREATETEXTURE2D_NULLDESC = 106
    D3D10_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION = 107
    D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT = 108
    D3D10_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT = 109
    D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES = 110
    D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE = 111
    D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS = 112
    D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS = 113
    D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS = 114
    D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS = 115
    D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS = 116
    D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA = 117
    D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS = 118
    D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS = 119
    D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS = 120
    D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN = 121
    D3D10_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN = 122
    D3D10_MESSAGE_ID_CREATETEXTURE3D_NULLDESC = 123
    D3D10_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION = 124
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 125
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 126
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 127
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 128
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 129
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS = 130
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN = 131
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN = 132
    D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 133
    D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 134
    D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 135
    D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 136
    D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 137
    D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 138
    D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS = 139
    D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN = 140
    D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN = 141
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 142
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 143
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 144
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 145
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 146
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS = 147
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN = 148
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN = 149
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 150
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 151
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 152
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 153
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 154
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 155
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 156
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 157
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 158
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 159
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 160
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 161
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 162
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 163
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC = 164
    D3D10_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 165
    D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 166
    D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 167
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 168
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 169
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 170
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 171
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 172
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 173
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 174
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 175
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL = 176
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL = 177
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 178
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 179
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 180
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 181
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 182
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 183
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 184
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 185
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 186
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 187
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 188
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 189
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 190
    D3D10_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 191
    D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 192
    D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 193
    D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 194
    D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 195
    D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 196
    D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 197
    D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS = 198
    D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC = 199
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 200
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 201
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 202
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 203
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 204
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 205
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 206
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 207
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 208
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 209
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS = 210
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC = 211
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 212
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 213
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 214
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 215
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 216
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 217
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 218
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS = 219
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC = 220
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER = 221
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU = 222
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV = 223
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW = 224
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS = 225
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY = 226
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC = 227
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD = 228
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD = 229
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS = 230
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC = 231
    D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY = 232
    D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS = 233
    D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG = 234
    D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC = 235
    D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED = 236
    D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED = 237
    D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER = 238
    D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE = 239
    D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY = 240
    D3D10_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER = 241
    D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID = 242
    D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE = 243
    D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED = 244
    D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY = 245
    D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER = 246
    D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 247
    D3D10_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY = 248
    D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY = 249
    D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER = 250
    D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 251
    D3D10_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY = 252
    D3D10_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER = 253
    D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED = 254
    D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY = 255
    D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER = 256
    D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 257
    D3D10_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY = 258
    D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT = 259
    D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR = 260
    D3D10_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH = 261
    D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH = 262
    D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 263
    D3D10_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY = 264
    D3D10_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY = 265
    D3D10_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 266
    D3D10_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY = 267
    D3D10_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY = 268
    D3D10_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 269
    D3D10_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY = 270
    D3D10_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY = 271
    D3D10_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY = 272
    D3D10_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 273
    D3D10_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY = 274
    D3D10_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY = 275
    D3D10_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY = 276
    D3D10_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID = 277
    D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE = 278
    D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE = 279
    D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX = 280
    D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE = 281
    D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE = 282
    D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE = 283
    D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE = 284
    D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE = 285
    D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE = 286
    D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE = 287
    D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX = 288
    D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE = 289
    D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID = 290
    D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID = 291
    D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID = 292
    D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID = 293
    D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID = 294
    D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE = 295
    D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS = 296
    D3D10_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED = 297
    D3D10_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN = 298
    D3D10_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED = 299
    D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE = 300
    D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE = 301
    D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS = 302
    D3D10_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED = 303
    D3D10_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN = 304
    D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE = 305
    D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED = 306
    D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE = 307
    D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE = 308
    D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS = 309
    D3D10_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED = 310
    D3D10_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN = 311
    D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE = 312
    D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED = 313
    D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE = 314
    D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE = 315
    D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS = 316
    D3D10_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED = 317
    D3D10_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN = 318
    D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE = 319
    D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED = 320
    D3D10_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED = 321
    D3D10_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED = 322
    D3D10_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS = 323
    D3D10_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN = 324
    D3D10_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN = 325
    D3D10_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE = 326
    D3D10_MESSAGE_ID_REF_THREADING_MODE = 327
    D3D10_MESSAGE_ID_REF_UMDRIVER_EXCEPTION = 328
    D3D10_MESSAGE_ID_REF_KMDRIVER_EXCEPTION = 329
    D3D10_MESSAGE_ID_REF_HARDWARE_EXCEPTION = 330
    D3D10_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE = 331
    D3D10_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER = 332
    D3D10_MESSAGE_ID_REF_OUT_OF_MEMORY = 333
    D3D10_MESSAGE_ID_REF_INFO = 334
    D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW = 335
    D3D10_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW = 336
    D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW = 337
    D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW = 338
    D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW = 339
    D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW = 340
    D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET = 341
    D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 342
    D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX = 343
    D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE = 344
    D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK = 345
    D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE = 346
    D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 347
    D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET = 348
    D3D10_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET = 349
    D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET = 350
    D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL = 351
    D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET = 352
    D3D10_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET = 353
    D3D10_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH = 354
    D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 355
    D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL = 356
    D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET = 357
    D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID = 358
    D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL = 359
    D3D10_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH = 360
    D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH = 361
    D3D10_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT = 362
    D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET = 363
    D3D10_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED = 364
    D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY = 365
    D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED = 366
    D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED = 367
    D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED = 368
    D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED = 369
    D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED = 370
    D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED = 371
    D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED = 372
    D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED = 373
    D3D10_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE = 374
    D3D10_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER = 375
    D3D10_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 376
    D3D10_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 377
    D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 378
    D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 379
    D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 380
    D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN = 381
    D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN = 382
    D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN = 383
    D3D10_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET = 384
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 385
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 386
    D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH = 387
    D3D10_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW = 388
    D3D10_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS = 389
    D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH = 390
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 391
    D3D10_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY = 392
    D3D10_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY = 393
    D3D10_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN = 394
    D3D10_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN = 395
    D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER = 396
    D3D10_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED = 397
    D3D10_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 398
    D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN = 399
    D3D10_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN = 400
    D3D10_MESSAGE_ID_CREATECOUNTER_NULLDESC = 401
    D3D10_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER = 402
    D3D10_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 403
    D3D10_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE = 404
    D3D10_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED = 405
    D3D10_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION = 406
    D3D10_MESSAGE_ID_QUERY_BEGIN_DUPLICATE = 407
    D3D10_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS = 408
    D3D10_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION = 409
    D3D10_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS = 410
    D3D10_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN = 411
    D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE = 412
    D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS = 413
    D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL = 414
    D3D10_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH = 415
    D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED = 416
    D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 417
    D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE = 418
    D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE = 419
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 420
    D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH = 421
    D3D10_MESSAGE_ID_LIVE_OBJECT_SUMMARY = 422
    D3D10_MESSAGE_ID_LIVE_BUFFER = 423
    D3D10_MESSAGE_ID_LIVE_TEXTURE1D = 424
    D3D10_MESSAGE_ID_LIVE_TEXTURE2D = 425
    D3D10_MESSAGE_ID_LIVE_TEXTURE3D = 426
    D3D10_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW = 427
    D3D10_MESSAGE_ID_LIVE_RENDERTARGETVIEW = 428
    D3D10_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW = 429
    D3D10_MESSAGE_ID_LIVE_VERTEXSHADER = 430
    D3D10_MESSAGE_ID_LIVE_GEOMETRYSHADER = 431
    D3D10_MESSAGE_ID_LIVE_PIXELSHADER = 432
    D3D10_MESSAGE_ID_LIVE_INPUTLAYOUT = 433
    D3D10_MESSAGE_ID_LIVE_SAMPLER = 434
    D3D10_MESSAGE_ID_LIVE_BLENDSTATE = 435
    D3D10_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE = 436
    D3D10_MESSAGE_ID_LIVE_RASTERIZERSTATE = 437
    D3D10_MESSAGE_ID_LIVE_QUERY = 438
    D3D10_MESSAGE_ID_LIVE_PREDICATE = 439
    D3D10_MESSAGE_ID_LIVE_COUNTER = 440
    D3D10_MESSAGE_ID_LIVE_DEVICE = 441
    D3D10_MESSAGE_ID_LIVE_SWAPCHAIN = 442
    D3D10_MESSAGE_ID_D3D10_MESSAGES_END = 443
    D3D10_MESSAGE_ID_D3D10L9_MESSAGES_START = 1048576
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED = 1048577
    D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED = 1048578
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT = 1048579
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY = 1048580
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE = 1048581
    D3D10_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED = 1048582
    D3D10_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS = 1048583
    D3D10_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS = 1048584
    D3D10_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS = 1048585
    D3D10_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND = 1048586
    D3D10_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D = 1048587
    D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE = 1048588
    D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE = 1048589
    D3D10_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS = 1048590
    D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS = 1048591
    D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX = 1048592
    D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS = 1048593
    D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED = 1048594
    D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS = 1048595
    D3D10_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY = 1048596
    D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK = 1048597
    D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK = 1048598
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT = 1048599
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE = 1048600
    D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE = 1048601
    D3D10_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE = 1048602
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD = 1048603
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL = 1048604
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX = 1048605
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO = 1048606
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES = 1048607
    D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET = 1048608
    D3D10_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER = 1048609
    D3D10_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE = 1048610
    D3D10_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE = 1048611
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE = 1048612
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS = 1048613
    D3D10_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT = 1048614
    D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS = 1048615
    D3D10_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES = 1048616
    D3D10_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED = 1048617
    D3D10_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED = 1048618
    D3D10_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED = 1048619
    D3D10_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED = 1048620
    D3D10_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED = 1048621
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND = 1048622
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND = 1048623
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED = 1048624
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE = 1048625
    D3D10_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED = 1048626
    D3D10_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 = 1048627
    D3D10_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED = 1048628
    D3D10_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO = 1048629
    D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION = 1048630
    D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED = 1048631
    D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR = 1048632
    D3D10_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA = 1048633
    D3D10_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP = 1048634
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED = 1048635
    D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT = 1048636
    D3D10_MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES = 1048637
    D3D10_MESSAGE_ID_D3D10L9_MESSAGES_END = 1048638
  end

  enum D3D10_DRIVER_TYPE : Int32
    D3D10_DRIVER_TYPE_HARDWARE = 0
    D3D10_DRIVER_TYPE_REFERENCE = 1
    D3D10_DRIVER_TYPE_NULL = 2
    D3D10_DRIVER_TYPE_SOFTWARE = 3
    D3D10_DRIVER_TYPE_WARP = 5
  end

  enum D3D10_DEVICE_STATE_TYPES : Int32
    D3D10_DST_SO_BUFFERS = 1
    D3D10_DST_OM_RENDER_TARGETS = 2
    D3D10_DST_OM_DEPTH_STENCIL_STATE = 3
    D3D10_DST_OM_BLEND_STATE = 4
    D3D10_DST_VS = 5
    D3D10_DST_VS_SAMPLERS = 6
    D3D10_DST_VS_SHADER_RESOURCES = 7
    D3D10_DST_VS_CONSTANT_BUFFERS = 8
    D3D10_DST_GS = 9
    D3D10_DST_GS_SAMPLERS = 10
    D3D10_DST_GS_SHADER_RESOURCES = 11
    D3D10_DST_GS_CONSTANT_BUFFERS = 12
    D3D10_DST_PS = 13
    D3D10_DST_PS_SAMPLERS = 14
    D3D10_DST_PS_SHADER_RESOURCES = 15
    D3D10_DST_PS_CONSTANT_BUFFERS = 16
    D3D10_DST_IA_VERTEX_BUFFERS = 17
    D3D10_DST_IA_INDEX_BUFFER = 18
    D3D10_DST_IA_INPUT_LAYOUT = 19
    D3D10_DST_IA_PRIMITIVE_TOPOLOGY = 20
    D3D10_DST_RS_VIEWPORTS = 21
    D3D10_DST_RS_SCISSOR_RECTS = 22
    D3D10_DST_RS_RASTERIZER_STATE = 23
    D3D10_DST_PREDICATION = 24
  end

  enum D3D10_FEATURE_LEVEL1 : Int32
    D3D10_FEATURE_LEVEL_10_0 = 40960
    D3D10_FEATURE_LEVEL_10_1 = 41216
    D3D10_FEATURE_LEVEL_9_1 = 37120
    D3D10_FEATURE_LEVEL_9_2 = 37376
    D3D10_FEATURE_LEVEL_9_3 = 37632
  end

  enum D3D10_STANDARD_MULTISAMPLE_QUALITY_LEVELS : Int32
    D3D10_STANDARD_MULTISAMPLE_PATTERN = -1
    D3D10_CENTER_MULTISAMPLE_PATTERN = -2
  end

  enum D3D10_SHADER_DEBUG_REGTYPE : Int32
    D3D10_SHADER_DEBUG_REG_INPUT = 0
    D3D10_SHADER_DEBUG_REG_OUTPUT = 1
    D3D10_SHADER_DEBUG_REG_CBUFFER = 2
    D3D10_SHADER_DEBUG_REG_TBUFFER = 3
    D3D10_SHADER_DEBUG_REG_TEMP = 4
    D3D10_SHADER_DEBUG_REG_TEMPARRAY = 5
    D3D10_SHADER_DEBUG_REG_TEXTURE = 6
    D3D10_SHADER_DEBUG_REG_SAMPLER = 7
    D3D10_SHADER_DEBUG_REG_IMMEDIATECBUFFER = 8
    D3D10_SHADER_DEBUG_REG_LITERAL = 9
    D3D10_SHADER_DEBUG_REG_UNUSED = 10
    D3D11_SHADER_DEBUG_REG_INTERFACE_POINTERS = 11
    D3D11_SHADER_DEBUG_REG_UAV = 12
    D3D10_SHADER_DEBUG_REG_FORCE_DWORD = 2147483647
  end

  enum D3D10_SHADER_DEBUG_SCOPETYPE : Int32
    D3D10_SHADER_DEBUG_SCOPE_GLOBAL = 0
    D3D10_SHADER_DEBUG_SCOPE_BLOCK = 1
    D3D10_SHADER_DEBUG_SCOPE_FORLOOP = 2
    D3D10_SHADER_DEBUG_SCOPE_STRUCT = 3
    D3D10_SHADER_DEBUG_SCOPE_FUNC_PARAMS = 4
    D3D10_SHADER_DEBUG_SCOPE_STATEBLOCK = 5
    D3D10_SHADER_DEBUG_SCOPE_NAMESPACE = 6
    D3D10_SHADER_DEBUG_SCOPE_ANNOTATION = 7
    D3D10_SHADER_DEBUG_SCOPE_FORCE_DWORD = 2147483647
  end

  enum D3D10_SHADER_DEBUG_VARTYPE : Int32
    D3D10_SHADER_DEBUG_VAR_VARIABLE = 0
    D3D10_SHADER_DEBUG_VAR_FUNCTION = 1
    D3D10_SHADER_DEBUG_VAR_FORCE_DWORD = 2147483647
  end

  union D3D10_BUFFER_SRV_Anonymous1_e__Union
    first_element : UInt32
    element_offset : UInt32
  end
  union D3D10_BUFFER_SRV_Anonymous2_e__Union
    num_elements : UInt32
    element_width : UInt32
  end
  union D3D10_SHADER_RESOURCE_VIEW_DESC_Anonymous_e__Union
    buffer : D3D10_BUFFER_SRV
    texture1_d : D3D10_TEX1D_SRV
    texture1_d_array : D3D10_TEX1D_ARRAY_SRV
    texture2_d : D3D10_TEX2D_SRV
    texture2_d_array : D3D10_TEX2D_ARRAY_SRV
    texture2_dms : D3D10_TEX2DMS_SRV
    texture2_dms_array : D3D10_TEX2DMS_ARRAY_SRV
    texture3_d : D3D10_TEX3D_SRV
    texture_cube : D3D10_TEXCUBE_SRV
  end
  union D3D10_BUFFER_RTV_Anonymous2_e__Union
    num_elements : UInt32
    element_width : UInt32
  end
  union D3D10_BUFFER_RTV_Anonymous1_e__Union
    first_element : UInt32
    element_offset : UInt32
  end
  union D3D10_RENDER_TARGET_VIEW_DESC_Anonymous_e__Union
    buffer : D3D10_BUFFER_RTV
    texture1_d : D3D10_TEX1D_RTV
    texture1_d_array : D3D10_TEX1D_ARRAY_RTV
    texture2_d : D3D10_TEX2D_RTV
    texture2_d_array : D3D10_TEX2D_ARRAY_RTV
    texture2_dms : D3D10_TEX2DMS_RTV
    texture2_dms_array : D3D10_TEX2DMS_ARRAY_RTV
    texture3_d : D3D10_TEX3D_RTV
  end
  union D3D10_DEPTH_STENCIL_VIEW_DESC_Anonymous_e__Union
    texture1_d : D3D10_TEX1D_DSV
    texture1_d_array : D3D10_TEX1D_ARRAY_DSV
    texture2_d : D3D10_TEX2D_DSV
    texture2_d_array : D3D10_TEX2D_ARRAY_DSV
    texture2_dms : D3D10_TEX2DMS_DSV
    texture2_dms_array : D3D10_TEX2DMS_ARRAY_DSV
  end
  union D3D10_SHADER_RESOURCE_VIEW_DESC1_Anonymous_e__Union
    buffer : D3D10_BUFFER_SRV
    texture1_d : D3D10_TEX1D_SRV
    texture1_d_array : D3D10_TEX1D_ARRAY_SRV
    texture2_d : D3D10_TEX2D_SRV
    texture2_d_array : D3D10_TEX2D_ARRAY_SRV
    texture2_dms : D3D10_TEX2DMS_SRV
    texture2_dms_array : D3D10_TEX2DMS_ARRAY_SRV
    texture3_d : D3D10_TEX3D_SRV
    texture_cube : D3D10_TEXCUBE_SRV
    texture_cube_array : D3D10_TEXCUBE_ARRAY_SRV1
  end

  struct D3D10_INPUT_ELEMENT_DESC
    semantic_name : PSTR
    semantic_index : UInt32
    format : DXGI_FORMAT
    input_slot : UInt32
    aligned_byte_offset : UInt32
    input_slot_class : D3D10_INPUT_CLASSIFICATION
    instance_data_step_rate : UInt32
  end
  struct D3D10_SO_DECLARATION_ENTRY
    semantic_name : PSTR
    semantic_index : UInt32
    start_component : UInt8
    component_count : UInt8
    output_slot : UInt8
  end
  struct D3D10_VIEWPORT
    top_left_x : Int32
    top_left_y : Int32
    width : UInt32
    height : UInt32
    min_depth : Float32
    max_depth : Float32
  end
  struct D3D10_BOX
    left : UInt32
    top : UInt32
    front : UInt32
    right : UInt32
    bottom : UInt32
    back : UInt32
  end
  struct D3D10_DEPTH_STENCILOP_DESC
    stencil_fail_op : D3D10_STENCIL_OP
    stencil_depth_fail_op : D3D10_STENCIL_OP
    stencil_pass_op : D3D10_STENCIL_OP
    stencil_func : D3D10_COMPARISON_FUNC
  end
  struct D3D10_DEPTH_STENCIL_DESC
    depth_enable : LibC::BOOL
    depth_write_mask : D3D10_DEPTH_WRITE_MASK
    depth_func : D3D10_COMPARISON_FUNC
    stencil_enable : LibC::BOOL
    stencil_read_mask : UInt8
    stencil_write_mask : UInt8
    front_face : D3D10_DEPTH_STENCILOP_DESC
    back_face : D3D10_DEPTH_STENCILOP_DESC
  end
  struct D3D10_BLEND_DESC
    alpha_to_coverage_enable : LibC::BOOL
    blend_enable : LibC::BOOL[8]*
    src_blend : D3D10_BLEND
    dest_blend : D3D10_BLEND
    blend_op : D3D10_BLEND_OP
    src_blend_alpha : D3D10_BLEND
    dest_blend_alpha : D3D10_BLEND
    blend_op_alpha : D3D10_BLEND_OP
    render_target_write_mask : UInt8[8]*
  end
  struct D3D10_RASTERIZER_DESC
    fill_mode : D3D10_FILL_MODE
    cull_mode : D3D10_CULL_MODE
    front_counter_clockwise : LibC::BOOL
    depth_bias : Int32
    depth_bias_clamp : Float32
    slope_scaled_depth_bias : Float32
    depth_clip_enable : LibC::BOOL
    scissor_enable : LibC::BOOL
    multisample_enable : LibC::BOOL
    antialiased_line_enable : LibC::BOOL
  end
  struct D3D10_SUBRESOURCE_DATA
    p_sys_mem : Void*
    sys_mem_pitch : UInt32
    sys_mem_slice_pitch : UInt32
  end
  struct D3D10_BUFFER_DESC
    byte_width : UInt32
    usage : D3D10_USAGE
    bind_flags : UInt32
    cpu_access_flags : UInt32
    misc_flags : UInt32
  end
  struct D3D10_TEXTURE1D_DESC
    width : UInt32
    mip_levels : UInt32
    array_size : UInt32
    format : DXGI_FORMAT
    usage : D3D10_USAGE
    bind_flags : UInt32
    cpu_access_flags : UInt32
    misc_flags : UInt32
  end
  struct D3D10_TEXTURE2D_DESC
    width : UInt32
    height : UInt32
    mip_levels : UInt32
    array_size : UInt32
    format : DXGI_FORMAT
    sample_desc : DXGI_SAMPLE_DESC
    usage : D3D10_USAGE
    bind_flags : UInt32
    cpu_access_flags : UInt32
    misc_flags : UInt32
  end
  struct D3D10_MAPPED_TEXTURE2D
    p_data : Void*
    row_pitch : UInt32
  end
  struct D3D10_TEXTURE3D_DESC
    width : UInt32
    height : UInt32
    depth : UInt32
    mip_levels : UInt32
    format : DXGI_FORMAT
    usage : D3D10_USAGE
    bind_flags : UInt32
    cpu_access_flags : UInt32
    misc_flags : UInt32
  end
  struct D3D10_MAPPED_TEXTURE3D
    p_data : Void*
    row_pitch : UInt32
    depth_pitch : UInt32
  end
  struct D3D10_BUFFER_SRV
    anonymous1 : D3D10_BUFFER_SRV_Anonymous1_e__Union
    anonymous2 : D3D10_BUFFER_SRV_Anonymous2_e__Union
  end
  struct D3D10_TEX1D_SRV
    most_detailed_mip : UInt32
    mip_levels : UInt32
  end
  struct D3D10_TEX1D_ARRAY_SRV
    most_detailed_mip : UInt32
    mip_levels : UInt32
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D10_TEX2D_SRV
    most_detailed_mip : UInt32
    mip_levels : UInt32
  end
  struct D3D10_TEX2D_ARRAY_SRV
    most_detailed_mip : UInt32
    mip_levels : UInt32
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D10_TEX3D_SRV
    most_detailed_mip : UInt32
    mip_levels : UInt32
  end
  struct D3D10_TEXCUBE_SRV
    most_detailed_mip : UInt32
    mip_levels : UInt32
  end
  struct D3D10_TEX2DMS_SRV
    unused_field_nothing_to_define : UInt32
  end
  struct D3D10_TEX2DMS_ARRAY_SRV
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D10_SHADER_RESOURCE_VIEW_DESC
    format : DXGI_FORMAT
    view_dimension : D3D_SRV_DIMENSION
    anonymous : D3D10_SHADER_RESOURCE_VIEW_DESC_Anonymous_e__Union
  end
  struct D3D10_BUFFER_RTV
    anonymous1 : D3D10_BUFFER_RTV_Anonymous1_e__Union
    anonymous2 : D3D10_BUFFER_RTV_Anonymous2_e__Union
  end
  struct D3D10_TEX1D_RTV
    mip_slice : UInt32
  end
  struct D3D10_TEX1D_ARRAY_RTV
    mip_slice : UInt32
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D10_TEX2D_RTV
    mip_slice : UInt32
  end
  struct D3D10_TEX2DMS_RTV
    unused_field_nothing_to_define : UInt32
  end
  struct D3D10_TEX2D_ARRAY_RTV
    mip_slice : UInt32
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D10_TEX2DMS_ARRAY_RTV
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D10_TEX3D_RTV
    mip_slice : UInt32
    first_w_slice : UInt32
    w_size : UInt32
  end
  struct D3D10_RENDER_TARGET_VIEW_DESC
    format : DXGI_FORMAT
    view_dimension : D3D10_RTV_DIMENSION
    anonymous : D3D10_RENDER_TARGET_VIEW_DESC_Anonymous_e__Union
  end
  struct D3D10_TEX1D_DSV
    mip_slice : UInt32
  end
  struct D3D10_TEX1D_ARRAY_DSV
    mip_slice : UInt32
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D10_TEX2D_DSV
    mip_slice : UInt32
  end
  struct D3D10_TEX2D_ARRAY_DSV
    mip_slice : UInt32
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D10_TEX2DMS_DSV
    unused_field_nothing_to_define : UInt32
  end
  struct D3D10_TEX2DMS_ARRAY_DSV
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D10_DEPTH_STENCIL_VIEW_DESC
    format : DXGI_FORMAT
    view_dimension : D3D10_DSV_DIMENSION
    anonymous : D3D10_DEPTH_STENCIL_VIEW_DESC_Anonymous_e__Union
  end
  struct D3D10_SAMPLER_DESC
    filter : D3D10_FILTER
    address_u : D3D10_TEXTURE_ADDRESS_MODE
    address_v : D3D10_TEXTURE_ADDRESS_MODE
    address_w : D3D10_TEXTURE_ADDRESS_MODE
    mip_lod_bias : Float32
    max_anisotropy : UInt32
    comparison_func : D3D10_COMPARISON_FUNC
    border_color : Float32[4]*
    min_lod : Float32
    max_lod : Float32
  end
  struct D3D10_QUERY_DESC
    query : D3D10_QUERY
    misc_flags : UInt32
  end
  struct D3D10_QUERY_DATA_TIMESTAMP_DISJOINT
    frequency : UInt64
    disjoint : LibC::BOOL
  end
  struct D3D10_QUERY_DATA_PIPELINE_STATISTICS
    ia_vertices : UInt64
    ia_primitives : UInt64
    vs_invocations : UInt64
    gs_invocations : UInt64
    gs_primitives : UInt64
    c_invocations : UInt64
    c_primitives : UInt64
    ps_invocations : UInt64
  end
  struct D3D10_QUERY_DATA_SO_STATISTICS
    num_primitives_written : UInt64
    primitives_storage_needed : UInt64
  end
  struct D3D10_COUNTER_DESC
    counter : D3D10_COUNTER
    misc_flags : UInt32
  end
  struct D3D10_COUNTER_INFO
    last_device_dependent_counter : D3D10_COUNTER
    num_simultaneous_counters : UInt32
    num_detectable_parallel_units : UInt8
  end
  struct D3D10_MESSAGE
    category : D3D10_MESSAGE_CATEGORY
    severity : D3D10_MESSAGE_SEVERITY
    id : D3D10_MESSAGE_ID
    p_description : UInt8*
    description_byte_length : LibC::UINT_PTR
  end
  struct D3D10_INFO_QUEUE_FILTER_DESC
    num_categories : UInt32
    p_category_list : D3D10_MESSAGE_CATEGORY*
    num_severities : UInt32
    p_severity_list : D3D10_MESSAGE_SEVERITY*
    num_i_ds : UInt32
    p_id_list : D3D10_MESSAGE_ID*
  end
  struct D3D10_INFO_QUEUE_FILTER
    allow_list : D3D10_INFO_QUEUE_FILTER_DESC
    deny_list : D3D10_INFO_QUEUE_FILTER_DESC
  end
  struct D3D10_SHADER_DESC
    version : UInt32
    creator : PSTR
    flags : UInt32
    constant_buffers : UInt32
    bound_resources : UInt32
    input_parameters : UInt32
    output_parameters : UInt32
    instruction_count : UInt32
    temp_register_count : UInt32
    temp_array_count : UInt32
    def_count : UInt32
    dcl_count : UInt32
    texture_normal_instructions : UInt32
    texture_load_instructions : UInt32
    texture_comp_instructions : UInt32
    texture_bias_instructions : UInt32
    texture_gradient_instructions : UInt32
    float_instruction_count : UInt32
    int_instruction_count : UInt32
    uint_instruction_count : UInt32
    static_flow_control_count : UInt32
    dynamic_flow_control_count : UInt32
    macro_instruction_count : UInt32
    array_instruction_count : UInt32
    cut_instruction_count : UInt32
    emit_instruction_count : UInt32
    gs_output_topology : D3D_PRIMITIVE_TOPOLOGY
    gs_max_output_vertex_count : UInt32
  end
  struct D3D10_SHADER_BUFFER_DESC
    name : PSTR
    type : D3D_CBUFFER_TYPE
    variables : UInt32
    size : UInt32
    u_flags : UInt32
  end
  struct D3D10_SHADER_VARIABLE_DESC
    name : PSTR
    start_offset : UInt32
    size : UInt32
    u_flags : UInt32
    default_value : Void*
  end
  struct D3D10_SHADER_TYPE_DESC
    class_ : D3D_SHADER_VARIABLE_CLASS
    type : D3D_SHADER_VARIABLE_TYPE
    rows : UInt32
    columns : UInt32
    elements : UInt32
    members : UInt32
    offset : UInt32
  end
  struct D3D10_SHADER_INPUT_BIND_DESC
    name : PSTR
    type : D3D_SHADER_INPUT_TYPE
    bind_point : UInt32
    bind_count : UInt32
    u_flags : UInt32
    return_type : D3D_RESOURCE_RETURN_TYPE
    dimension : D3D_SRV_DIMENSION
    num_samples : UInt32
  end
  struct D3D10_SIGNATURE_PARAMETER_DESC
    semantic_name : PSTR
    semantic_index : UInt32
    register : UInt32
    system_value_type : D3D_NAME
    component_type : D3D_REGISTER_COMPONENT_TYPE
    mask : UInt8
    read_write_mask : UInt8
  end
  struct D3D10_STATE_BLOCK_MASK
    vs : UInt8
    vs_samplers : UInt8[2]*
    vs_shader_resources : UInt8[16]*
    vs_constant_buffers : UInt8[2]*
    gs : UInt8
    gs_samplers : UInt8[2]*
    gs_shader_resources : UInt8[16]*
    gs_constant_buffers : UInt8[2]*
    ps : UInt8
    ps_samplers : UInt8[2]*
    ps_shader_resources : UInt8[16]*
    ps_constant_buffers : UInt8[2]*
    ia_vertex_buffers : UInt8[2]*
    ia_index_buffer : UInt8
    ia_input_layout : UInt8
    ia_primitive_topology : UInt8
    om_render_targets : UInt8
    om_depth_stencil_state : UInt8
    om_blend_state : UInt8
    rs_viewports : UInt8
    rs_scissor_rects : UInt8
    rs_rasterizer_state : UInt8
    so_buffers : UInt8
    predication : UInt8
  end
  struct D3D10_EFFECT_TYPE_DESC
    type_name : PSTR
    class_ : D3D_SHADER_VARIABLE_CLASS
    type : D3D_SHADER_VARIABLE_TYPE
    elements : UInt32
    members : UInt32
    rows : UInt32
    columns : UInt32
    packed_size : UInt32
    unpacked_size : UInt32
    stride : UInt32
  end
  struct D3D10_EFFECT_VARIABLE_DESC
    name : PSTR
    semantic : PSTR
    flags : UInt32
    annotations : UInt32
    buffer_offset : UInt32
    explicit_bind_point : UInt32
  end
  struct D3D10_EFFECT_SHADER_DESC
    p_input_signature : UInt8*
    is_inline : LibC::BOOL
    p_bytecode : UInt8*
    bytecode_length : UInt32
    so_decl : PSTR
    num_input_signature_entries : UInt32
    num_output_signature_entries : UInt32
  end
  struct D3D10_PASS_DESC
    name : PSTR
    annotations : UInt32
    p_ia_input_signature : UInt8*
    ia_input_signature_size : LibC::UINT_PTR
    stencil_ref : UInt32
    sample_mask : UInt32
    blend_factor : Float32[4]*
  end
  struct D3D10_PASS_SHADER_DESC
    p_shader_variable : ID3D10EffectShaderVariable
    shader_index : UInt32
  end
  struct D3D10_TECHNIQUE_DESC
    name : PSTR
    passes : UInt32
    annotations : UInt32
  end
  struct D3D10_EFFECT_DESC
    is_child_effect : LibC::BOOL
    constant_buffers : UInt32
    shared_constant_buffers : UInt32
    global_variables : UInt32
    shared_global_variables : UInt32
    techniques : UInt32
  end
  struct D3D10_RENDER_TARGET_BLEND_DESC1
    blend_enable : LibC::BOOL
    src_blend : D3D10_BLEND
    dest_blend : D3D10_BLEND
    blend_op : D3D10_BLEND_OP
    src_blend_alpha : D3D10_BLEND
    dest_blend_alpha : D3D10_BLEND
    blend_op_alpha : D3D10_BLEND_OP
    render_target_write_mask : UInt8
  end
  struct D3D10_BLEND_DESC1
    alpha_to_coverage_enable : LibC::BOOL
    independent_blend_enable : LibC::BOOL
    render_target : D3D10_RENDER_TARGET_BLEND_DESC1[8]*
  end
  struct D3D10_TEXCUBE_ARRAY_SRV1
    most_detailed_mip : UInt32
    mip_levels : UInt32
    first2_d_array_face : UInt32
    num_cubes : UInt32
  end
  struct D3D10_SHADER_RESOURCE_VIEW_DESC1
    format : DXGI_FORMAT
    view_dimension : D3D_SRV_DIMENSION
    anonymous : D3D10_SHADER_RESOURCE_VIEW_DESC1_Anonymous_e__Union
  end
  struct D3D10_SHADER_DEBUG_TOKEN_INFO
    file : UInt32
    line : UInt32
    column : UInt32
    token_length : UInt32
    token_id : UInt32
  end
  struct D3D10_SHADER_DEBUG_VAR_INFO
    token_id : UInt32
    type : D3D_SHADER_VARIABLE_TYPE
    register : UInt32
    component : UInt32
    scope_var : UInt32
    scope_var_offset : UInt32
  end
  struct D3D10_SHADER_DEBUG_INPUT_INFO
    var : UInt32
    initial_register_set : D3D10_SHADER_DEBUG_REGTYPE
    initial_bank : UInt32
    initial_register : UInt32
    initial_component : UInt32
    initial_value : UInt32
  end
  struct D3D10_SHADER_DEBUG_SCOPEVAR_INFO
    token_id : UInt32
    var_type : D3D10_SHADER_DEBUG_VARTYPE
    class_ : D3D_SHADER_VARIABLE_CLASS
    rows : UInt32
    columns : UInt32
    struct_member_scope : UInt32
    u_array_indices : UInt32
    array_elements : UInt32
    array_strides : UInt32
    u_variables : UInt32
    u_first_variable : UInt32
  end
  struct D3D10_SHADER_DEBUG_SCOPE_INFO
    scope_type : D3D10_SHADER_DEBUG_SCOPETYPE
    name : UInt32
    u_name_len : UInt32
    u_variables : UInt32
    variable_data : UInt32
  end
  struct D3D10_SHADER_DEBUG_OUTPUTVAR
    var : UInt32
    u_value_min : UInt32
    u_value_max : UInt32
    i_value_min : Int32
    i_value_max : Int32
    f_value_min : Float32
    f_value_max : Float32
    b_na_n_possible : LibC::BOOL
    b_inf_possible : LibC::BOOL
  end
  struct D3D10_SHADER_DEBUG_OUTPUTREG_INFO
    output_register_set : D3D10_SHADER_DEBUG_REGTYPE
    output_reg : UInt32
    temp_array_reg : UInt32
    output_components : UInt32[4]*
    output_vars : D3D10_SHADER_DEBUG_OUTPUTVAR[4]*
    index_reg : UInt32
    index_comp : UInt32
  end
  struct D3D10_SHADER_DEBUG_INST_INFO
    id : UInt32
    opcode : UInt32
    u_outputs : UInt32
    p_outputs : D3D10_SHADER_DEBUG_OUTPUTREG_INFO[2]*
    token_id : UInt32
    nesting_level : UInt32
    scopes : UInt32
    scope_info : UInt32
    accessed_vars : UInt32
    accessed_vars_info : UInt32
  end
  struct D3D10_SHADER_DEBUG_FILE_INFO
    file_name : UInt32
    file_name_len : UInt32
    file_data : UInt32
    file_len : UInt32
  end
  struct D3D10_SHADER_DEBUG_INFO
    size : UInt32
    creator : UInt32
    entrypoint_name : UInt32
    shader_target : UInt32
    compile_flags : UInt32
    files : UInt32
    file_info : UInt32
    instructions : UInt32
    instruction_info : UInt32
    variables : UInt32
    variable_info : UInt32
    input_variables : UInt32
    input_variable_info : UInt32
    tokens : UInt32
    token_info : UInt32
    scopes : UInt32
    scope_info : UInt32
    scope_variables : UInt32
    scope_variable_info : UInt32
    uint_offset : UInt32
    string_offset : UInt32
  end


  struct ID3D10DeviceChildVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
  end

  ID3D10DeviceChild_GUID = "9b7e4c00-342c-4106-a19f-4f2704f689f0"
  IID_ID3D10DeviceChild = LibC::GUID.new(0x9b7e4c00_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
  struct ID3D10DeviceChild
    lpVtbl : ID3D10DeviceChildVTbl*
  end

  struct ID3D10DepthStencilStateVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    get_desc : UInt64
  end

  ID3D10DepthStencilState_GUID = "2b4b1cc8-a4ad-41f8-8322-ca86fc3ec675"
  IID_ID3D10DepthStencilState = LibC::GUID.new(0x2b4b1cc8_u32, 0xa4ad_u16, 0x41f8_u16, StaticArray[0x83_u8, 0x22_u8, 0xca_u8, 0x86_u8, 0xfc_u8, 0x3e_u8, 0xc6_u8, 0x75_u8])
  struct ID3D10DepthStencilState
    lpVtbl : ID3D10DepthStencilStateVTbl*
  end

  struct ID3D10BlendStateVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    get_desc : UInt64
  end

  ID3D10BlendState_GUID = "edad8d19-8a35-4d6d-8566-2ea276cde161"
  IID_ID3D10BlendState = LibC::GUID.new(0xedad8d19_u32, 0x8a35_u16, 0x4d6d_u16, StaticArray[0x85_u8, 0x66_u8, 0x2e_u8, 0xa2_u8, 0x76_u8, 0xcd_u8, 0xe1_u8, 0x61_u8])
  struct ID3D10BlendState
    lpVtbl : ID3D10BlendStateVTbl*
  end

  struct ID3D10RasterizerStateVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    get_desc : UInt64
  end

  ID3D10RasterizerState_GUID = "a2a07292-89af-4345-be2e-c53d9fbb6e9f"
  IID_ID3D10RasterizerState = LibC::GUID.new(0xa2a07292_u32, 0x89af_u16, 0x4345_u16, StaticArray[0xbe_u8, 0x2e_u8, 0xc5_u8, 0x3d_u8, 0x9f_u8, 0xbb_u8, 0x6e_u8, 0x9f_u8])
  struct ID3D10RasterizerState
    lpVtbl : ID3D10RasterizerStateVTbl*
  end

  struct ID3D10ResourceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    get_type : UInt64
    set_eviction_priority : UInt64
    get_eviction_priority : UInt64
  end

  ID3D10Resource_GUID = "9b7e4c01-342c-4106-a19f-4f2704f689f0"
  IID_ID3D10Resource = LibC::GUID.new(0x9b7e4c01_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
  struct ID3D10Resource
    lpVtbl : ID3D10ResourceVTbl*
  end

  struct ID3D10BufferVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    get_type : UInt64
    set_eviction_priority : UInt64
    get_eviction_priority : UInt64
    map : UInt64
    unmap : UInt64
    get_desc : UInt64
  end

  ID3D10Buffer_GUID = "9b7e4c02-342c-4106-a19f-4f2704f689f0"
  IID_ID3D10Buffer = LibC::GUID.new(0x9b7e4c02_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
  struct ID3D10Buffer
    lpVtbl : ID3D10BufferVTbl*
  end

  struct ID3D10Texture1DVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    get_type : UInt64
    set_eviction_priority : UInt64
    get_eviction_priority : UInt64
    map : UInt64
    unmap : UInt64
    get_desc : UInt64
  end

  ID3D10Texture1D_GUID = "9b7e4c03-342c-4106-a19f-4f2704f689f0"
  IID_ID3D10Texture1D = LibC::GUID.new(0x9b7e4c03_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
  struct ID3D10Texture1D
    lpVtbl : ID3D10Texture1DVTbl*
  end

  struct ID3D10Texture2DVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    get_type : UInt64
    set_eviction_priority : UInt64
    get_eviction_priority : UInt64
    map : UInt64
    unmap : UInt64
    get_desc : UInt64
  end

  ID3D10Texture2D_GUID = "9b7e4c04-342c-4106-a19f-4f2704f689f0"
  IID_ID3D10Texture2D = LibC::GUID.new(0x9b7e4c04_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
  struct ID3D10Texture2D
    lpVtbl : ID3D10Texture2DVTbl*
  end

  struct ID3D10Texture3DVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    get_type : UInt64
    set_eviction_priority : UInt64
    get_eviction_priority : UInt64
    map : UInt64
    unmap : UInt64
    get_desc : UInt64
  end

  ID3D10Texture3D_GUID = "9b7e4c05-342c-4106-a19f-4f2704f689f0"
  IID_ID3D10Texture3D = LibC::GUID.new(0x9b7e4c05_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
  struct ID3D10Texture3D
    lpVtbl : ID3D10Texture3DVTbl*
  end

  struct ID3D10ViewVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    get_resource : UInt64
  end

  ID3D10View_GUID = "c902b03f-60a7-49ba-9936-2a3ab37a7e33"
  IID_ID3D10View = LibC::GUID.new(0xc902b03f_u32, 0x60a7_u16, 0x49ba_u16, StaticArray[0x99_u8, 0x36_u8, 0x2a_u8, 0x3a_u8, 0xb3_u8, 0x7a_u8, 0x7e_u8, 0x33_u8])
  struct ID3D10View
    lpVtbl : ID3D10ViewVTbl*
  end

  struct ID3D10ShaderResourceViewVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    get_resource : UInt64
    get_desc : UInt64
  end

  ID3D10ShaderResourceView_GUID = "9b7e4c07-342c-4106-a19f-4f2704f689f0"
  IID_ID3D10ShaderResourceView = LibC::GUID.new(0x9b7e4c07_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
  struct ID3D10ShaderResourceView
    lpVtbl : ID3D10ShaderResourceViewVTbl*
  end

  struct ID3D10RenderTargetViewVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    get_resource : UInt64
    get_desc : UInt64
  end

  ID3D10RenderTargetView_GUID = "9b7e4c08-342c-4106-a19f-4f2704f689f0"
  IID_ID3D10RenderTargetView = LibC::GUID.new(0x9b7e4c08_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
  struct ID3D10RenderTargetView
    lpVtbl : ID3D10RenderTargetViewVTbl*
  end

  struct ID3D10DepthStencilViewVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    get_resource : UInt64
    get_desc : UInt64
  end

  ID3D10DepthStencilView_GUID = "9b7e4c09-342c-4106-a19f-4f2704f689f0"
  IID_ID3D10DepthStencilView = LibC::GUID.new(0x9b7e4c09_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
  struct ID3D10DepthStencilView
    lpVtbl : ID3D10DepthStencilViewVTbl*
  end

  struct ID3D10VertexShaderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
  end

  ID3D10VertexShader_GUID = "9b7e4c0a-342c-4106-a19f-4f2704f689f0"
  IID_ID3D10VertexShader = LibC::GUID.new(0x9b7e4c0a_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
  struct ID3D10VertexShader
    lpVtbl : ID3D10VertexShaderVTbl*
  end

  struct ID3D10GeometryShaderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
  end

  ID3D10GeometryShader_GUID = "6316be88-54cd-4040-ab44-20461bc81f68"
  IID_ID3D10GeometryShader = LibC::GUID.new(0x6316be88_u32, 0x54cd_u16, 0x4040_u16, StaticArray[0xab_u8, 0x44_u8, 0x20_u8, 0x46_u8, 0x1b_u8, 0xc8_u8, 0x1f_u8, 0x68_u8])
  struct ID3D10GeometryShader
    lpVtbl : ID3D10GeometryShaderVTbl*
  end

  struct ID3D10PixelShaderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
  end

  ID3D10PixelShader_GUID = "4968b601-9d00-4cde-8346-8e7f675819b6"
  IID_ID3D10PixelShader = LibC::GUID.new(0x4968b601_u32, 0x9d00_u16, 0x4cde_u16, StaticArray[0x83_u8, 0x46_u8, 0x8e_u8, 0x7f_u8, 0x67_u8, 0x58_u8, 0x19_u8, 0xb6_u8])
  struct ID3D10PixelShader
    lpVtbl : ID3D10PixelShaderVTbl*
  end

  struct ID3D10InputLayoutVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
  end

  ID3D10InputLayout_GUID = "9b7e4c0b-342c-4106-a19f-4f2704f689f0"
  IID_ID3D10InputLayout = LibC::GUID.new(0x9b7e4c0b_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
  struct ID3D10InputLayout
    lpVtbl : ID3D10InputLayoutVTbl*
  end

  struct ID3D10SamplerStateVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    get_desc : UInt64
  end

  ID3D10SamplerState_GUID = "9b7e4c0c-342c-4106-a19f-4f2704f689f0"
  IID_ID3D10SamplerState = LibC::GUID.new(0x9b7e4c0c_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
  struct ID3D10SamplerState
    lpVtbl : ID3D10SamplerStateVTbl*
  end

  struct ID3D10AsynchronousVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    begin_ : UInt64
    end_ : UInt64
    get_data : UInt64
    get_data_size : UInt64
  end

  ID3D10Asynchronous_GUID = "9b7e4c0d-342c-4106-a19f-4f2704f689f0"
  IID_ID3D10Asynchronous = LibC::GUID.new(0x9b7e4c0d_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
  struct ID3D10Asynchronous
    lpVtbl : ID3D10AsynchronousVTbl*
  end

  struct ID3D10QueryVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    begin_ : UInt64
    end_ : UInt64
    get_data : UInt64
    get_data_size : UInt64
    get_desc : UInt64
  end

  ID3D10Query_GUID = "9b7e4c0e-342c-4106-a19f-4f2704f689f0"
  IID_ID3D10Query = LibC::GUID.new(0x9b7e4c0e_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
  struct ID3D10Query
    lpVtbl : ID3D10QueryVTbl*
  end

  struct ID3D10PredicateVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    begin_ : UInt64
    end_ : UInt64
    get_data : UInt64
    get_data_size : UInt64
    get_desc : UInt64
  end

  ID3D10Predicate_GUID = "9b7e4c10-342c-4106-a19f-4f2704f689f0"
  IID_ID3D10Predicate = LibC::GUID.new(0x9b7e4c10_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
  struct ID3D10Predicate
    lpVtbl : ID3D10PredicateVTbl*
  end

  struct ID3D10CounterVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    begin_ : UInt64
    end_ : UInt64
    get_data : UInt64
    get_data_size : UInt64
    get_desc : UInt64
  end

  ID3D10Counter_GUID = "9b7e4c11-342c-4106-a19f-4f2704f689f0"
  IID_ID3D10Counter = LibC::GUID.new(0x9b7e4c11_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
  struct ID3D10Counter
    lpVtbl : ID3D10CounterVTbl*
  end

  struct ID3D10DeviceVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    vs_set_constant_buffers : UInt64
    ps_set_shader_resources : UInt64
    ps_set_shader : UInt64
    ps_set_samplers : UInt64
    vs_set_shader : UInt64
    draw_indexed : UInt64
    draw : UInt64
    ps_set_constant_buffers : UInt64
    ia_set_input_layout : UInt64
    ia_set_vertex_buffers : UInt64
    ia_set_index_buffer : UInt64
    draw_indexed_instanced : UInt64
    draw_instanced : UInt64
    gs_set_constant_buffers : UInt64
    gs_set_shader : UInt64
    ia_set_primitive_topology : UInt64
    vs_set_shader_resources : UInt64
    vs_set_samplers : UInt64
    set_predication : UInt64
    gs_set_shader_resources : UInt64
    gs_set_samplers : UInt64
    om_set_render_targets : UInt64
    om_set_blend_state : UInt64
    om_set_depth_stencil_state : UInt64
    so_set_targets : UInt64
    draw_auto : UInt64
    rs_set_state : UInt64
    rs_set_viewports : UInt64
    rs_set_scissor_rects : UInt64
    copy_subresource_region : UInt64
    copy_resource : UInt64
    update_subresource : UInt64
    clear_render_target_view : UInt64
    clear_depth_stencil_view : UInt64
    generate_mips : UInt64
    resolve_subresource : UInt64
    vs_get_constant_buffers : UInt64
    ps_get_shader_resources : UInt64
    ps_get_shader : UInt64
    ps_get_samplers : UInt64
    vs_get_shader : UInt64
    ps_get_constant_buffers : UInt64
    ia_get_input_layout : UInt64
    ia_get_vertex_buffers : UInt64
    ia_get_index_buffer : UInt64
    gs_get_constant_buffers : UInt64
    gs_get_shader : UInt64
    ia_get_primitive_topology : UInt64
    vs_get_shader_resources : UInt64
    vs_get_samplers : UInt64
    get_predication : UInt64
    gs_get_shader_resources : UInt64
    gs_get_samplers : UInt64
    om_get_render_targets : UInt64
    om_get_blend_state : UInt64
    om_get_depth_stencil_state : UInt64
    so_get_targets : UInt64
    rs_get_state : UInt64
    rs_get_viewports : UInt64
    rs_get_scissor_rects : UInt64
    get_device_removed_reason : UInt64
    set_exception_mode : UInt64
    get_exception_mode : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    clear_state : UInt64
    flush : UInt64
    create_buffer : UInt64
    create_texture1_d : UInt64
    create_texture2_d : UInt64
    create_texture3_d : UInt64
    create_shader_resource_view : UInt64
    create_render_target_view : UInt64
    create_depth_stencil_view : UInt64
    create_input_layout : UInt64
    create_vertex_shader : UInt64
    create_geometry_shader : UInt64
    create_geometry_shader_with_stream_output : UInt64
    create_pixel_shader : UInt64
    create_blend_state : UInt64
    create_depth_stencil_state : UInt64
    create_rasterizer_state : UInt64
    create_sampler_state : UInt64
    create_query : UInt64
    create_predicate : UInt64
    create_counter : UInt64
    check_format_support : UInt64
    check_multisample_quality_levels : UInt64
    check_counter_info : UInt64
    check_counter : UInt64
    get_creation_flags : UInt64
    open_shared_resource : UInt64
    set_text_filter_size : UInt64
    get_text_filter_size : UInt64
  end

  ID3D10Device_GUID = "9b7e4c0f-342c-4106-a19f-4f2704f689f0"
  IID_ID3D10Device = LibC::GUID.new(0x9b7e4c0f_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
  struct ID3D10Device
    lpVtbl : ID3D10DeviceVTbl*
  end

  struct ID3D10MultithreadVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    enter : UInt64
    leave : UInt64
    set_multithread_protected : UInt64
    get_multithread_protected : UInt64
  end

  ID3D10Multithread_GUID = "9b7e4e00-342c-4106-a19f-4f2704f689f0"
  IID_ID3D10Multithread = LibC::GUID.new(0x9b7e4e00_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
  struct ID3D10Multithread
    lpVtbl : ID3D10MultithreadVTbl*
  end

  struct ID3D10DebugVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_feature_mask : UInt64
    get_feature_mask : UInt64
    set_present_per_render_op_delay : UInt64
    get_present_per_render_op_delay : UInt64
    set_swap_chain : UInt64
    get_swap_chain : UInt64
    validate : UInt64
  end

  ID3D10Debug_GUID = "9b7e4e01-342c-4106-a19f-4f2704f689f0"
  IID_ID3D10Debug = LibC::GUID.new(0x9b7e4e01_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
  struct ID3D10Debug
    lpVtbl : ID3D10DebugVTbl*
  end

  struct ID3D10SwitchToRefVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_use_ref : UInt64
    get_use_ref : UInt64
  end

  ID3D10SwitchToRef_GUID = "9b7e4e02-342c-4106-a19f-4f2704f689f0"
  IID_ID3D10SwitchToRef = LibC::GUID.new(0x9b7e4e02_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
  struct ID3D10SwitchToRef
    lpVtbl : ID3D10SwitchToRefVTbl*
  end

  struct ID3D10InfoQueueVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    set_message_count_limit : UInt64
    clear_stored_messages : UInt64
    get_message : UInt64
    get_num_messages_allowed_by_storage_filter : UInt64
    get_num_messages_denied_by_storage_filter : UInt64
    get_num_stored_messages : UInt64
    get_num_stored_messages_allowed_by_retrieval_filter : UInt64
    get_num_messages_discarded_by_message_count_limit : UInt64
    get_message_count_limit : UInt64
    add_storage_filter_entries : UInt64
    get_storage_filter : UInt64
    clear_storage_filter : UInt64
    push_empty_storage_filter : UInt64
    push_copy_of_storage_filter : UInt64
    push_storage_filter : UInt64
    pop_storage_filter : UInt64
    get_storage_filter_stack_size : UInt64
    add_retrieval_filter_entries : UInt64
    get_retrieval_filter : UInt64
    clear_retrieval_filter : UInt64
    push_empty_retrieval_filter : UInt64
    push_copy_of_retrieval_filter : UInt64
    push_retrieval_filter : UInt64
    pop_retrieval_filter : UInt64
    get_retrieval_filter_stack_size : UInt64
    add_message : UInt64
    add_application_message : UInt64
    set_break_on_category : UInt64
    set_break_on_severity : UInt64
    set_break_on_id : UInt64
    get_break_on_category : UInt64
    get_break_on_severity : UInt64
    get_break_on_id : UInt64
    set_mute_debug_output : UInt64
    get_mute_debug_output : UInt64
  end

  ID3D10InfoQueue_GUID = "1b940b17-2642-4d1f-ab1f-b99bad0c395f"
  IID_ID3D10InfoQueue = LibC::GUID.new(0x1b940b17_u32, 0x2642_u16, 0x4d1f_u16, StaticArray[0xab_u8, 0x1f_u8, 0xb9_u8, 0x9b_u8, 0xad_u8, 0xc_u8, 0x39_u8, 0x5f_u8])
  struct ID3D10InfoQueue
    lpVtbl : ID3D10InfoQueueVTbl*
  end

  struct ID3D10ShaderReflectionTypeVTbl
    get_desc : UInt64
    get_member_type_by_index : UInt64
    get_member_type_by_name : UInt64
    get_member_type_name : UInt64
  end

  ID3D10ShaderReflectionType_GUID = "c530ad7d-9b16-4395-a979-ba2ecff83add"
  IID_ID3D10ShaderReflectionType = LibC::GUID.new(0xc530ad7d_u32, 0x9b16_u16, 0x4395_u16, StaticArray[0xa9_u8, 0x79_u8, 0xba_u8, 0x2e_u8, 0xcf_u8, 0xf8_u8, 0x3a_u8, 0xdd_u8])
  struct ID3D10ShaderReflectionType
    lpVtbl : ID3D10ShaderReflectionTypeVTbl*
  end

  struct ID3D10ShaderReflectionVariableVTbl
    get_desc : UInt64
    get_type : UInt64
  end

  ID3D10ShaderReflectionVariable_GUID = "1bf63c95-2650-405d-99c1-3636bd1da0a1"
  IID_ID3D10ShaderReflectionVariable = LibC::GUID.new(0x1bf63c95_u32, 0x2650_u16, 0x405d_u16, StaticArray[0x99_u8, 0xc1_u8, 0x36_u8, 0x36_u8, 0xbd_u8, 0x1d_u8, 0xa0_u8, 0xa1_u8])
  struct ID3D10ShaderReflectionVariable
    lpVtbl : ID3D10ShaderReflectionVariableVTbl*
  end

  struct ID3D10ShaderReflectionConstantBufferVTbl
    get_desc : UInt64
    get_variable_by_index : UInt64
    get_variable_by_name : UInt64
  end

  ID3D10ShaderReflectionConstantBuffer_GUID = "66c66a94-dddd-4b62-a66a-f0da33c2b4d0"
  IID_ID3D10ShaderReflectionConstantBuffer = LibC::GUID.new(0x66c66a94_u32, 0xdddd_u16, 0x4b62_u16, StaticArray[0xa6_u8, 0x6a_u8, 0xf0_u8, 0xda_u8, 0x33_u8, 0xc2_u8, 0xb4_u8, 0xd0_u8])
  struct ID3D10ShaderReflectionConstantBuffer
    lpVtbl : ID3D10ShaderReflectionConstantBufferVTbl*
  end

  struct ID3D10ShaderReflectionVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_desc : UInt64
    get_constant_buffer_by_index : UInt64
    get_constant_buffer_by_name : UInt64
    get_resource_binding_desc : UInt64
    get_input_parameter_desc : UInt64
    get_output_parameter_desc : UInt64
  end

  ID3D10ShaderReflection_GUID = "d40e20b6-f8f7-42ad-ab20-4baf8f15dfaa"
  IID_ID3D10ShaderReflection = LibC::GUID.new(0xd40e20b6_u32, 0xf8f7_u16, 0x42ad_u16, StaticArray[0xab_u8, 0x20_u8, 0x4b_u8, 0xaf_u8, 0x8f_u8, 0x15_u8, 0xdf_u8, 0xaa_u8])
  struct ID3D10ShaderReflection
    lpVtbl : ID3D10ShaderReflectionVTbl*
  end

  struct ID3D10StateBlockVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    capture : UInt64
    apply : UInt64
    release_all_device_objects : UInt64
    get_device : UInt64
  end

  ID3D10StateBlock_GUID = "0803425a-57f5-4dd6-9465-a87570834a08"
  IID_ID3D10StateBlock = LibC::GUID.new(0x803425a_u32, 0x57f5_u16, 0x4dd6_u16, StaticArray[0x94_u8, 0x65_u8, 0xa8_u8, 0x75_u8, 0x70_u8, 0x83_u8, 0x4a_u8, 0x8_u8])
  struct ID3D10StateBlock
    lpVtbl : ID3D10StateBlockVTbl*
  end

  struct ID3D10EffectTypeVTbl
    is_valid : UInt64
    get_desc : UInt64
    get_member_type_by_index : UInt64
    get_member_type_by_name : UInt64
    get_member_type_by_semantic : UInt64
    get_member_name : UInt64
    get_member_semantic : UInt64
  end

  ID3D10EffectType_GUID = "4e9e1ddc-cd9d-4772-a837-00180b9b88fd"
  IID_ID3D10EffectType = LibC::GUID.new(0x4e9e1ddc_u32, 0xcd9d_u16, 0x4772_u16, StaticArray[0xa8_u8, 0x37_u8, 0x0_u8, 0x18_u8, 0xb_u8, 0x9b_u8, 0x88_u8, 0xfd_u8])
  struct ID3D10EffectType
    lpVtbl : ID3D10EffectTypeVTbl*
  end

  struct ID3D10EffectVariableVTbl
    is_valid : UInt64
    get_type : UInt64
    get_desc : UInt64
    get_annotation_by_index : UInt64
    get_annotation_by_name : UInt64
    get_member_by_index : UInt64
    get_member_by_name : UInt64
    get_member_by_semantic : UInt64
    get_element : UInt64
    get_parent_constant_buffer : UInt64
    as_scalar : UInt64
    as_vector : UInt64
    as_matrix : UInt64
    as_string : UInt64
    as_shader_resource : UInt64
    as_render_target_view : UInt64
    as_depth_stencil_view : UInt64
    as_constant_buffer : UInt64
    as_shader : UInt64
    as_blend : UInt64
    as_depth_stencil : UInt64
    as_rasterizer : UInt64
    as_sampler : UInt64
    set_raw_value : UInt64
    get_raw_value : UInt64
  end

  ID3D10EffectVariable_GUID = "ae897105-00e6-45bf-bb8e-281dd6db8e1b"
  IID_ID3D10EffectVariable = LibC::GUID.new(0xae897105_u32, 0xe6_u16, 0x45bf_u16, StaticArray[0xbb_u8, 0x8e_u8, 0x28_u8, 0x1d_u8, 0xd6_u8, 0xdb_u8, 0x8e_u8, 0x1b_u8])
  struct ID3D10EffectVariable
    lpVtbl : ID3D10EffectVariableVTbl*
  end

  struct ID3D10EffectScalarVariableVTbl
    is_valid : UInt64
    get_type : UInt64
    get_desc : UInt64
    get_annotation_by_index : UInt64
    get_annotation_by_name : UInt64
    get_member_by_index : UInt64
    get_member_by_name : UInt64
    get_member_by_semantic : UInt64
    get_element : UInt64
    get_parent_constant_buffer : UInt64
    as_scalar : UInt64
    as_vector : UInt64
    as_matrix : UInt64
    as_string : UInt64
    as_shader_resource : UInt64
    as_render_target_view : UInt64
    as_depth_stencil_view : UInt64
    as_constant_buffer : UInt64
    as_shader : UInt64
    as_blend : UInt64
    as_depth_stencil : UInt64
    as_rasterizer : UInt64
    as_sampler : UInt64
    set_raw_value : UInt64
    get_raw_value : UInt64
    set_float : UInt64
    get_float : UInt64
    set_float_array : UInt64
    get_float_array : UInt64
    set_int : UInt64
    get_int : UInt64
    set_int_array : UInt64
    get_int_array : UInt64
    set_bool : UInt64
    get_bool : UInt64
    set_bool_array : UInt64
    get_bool_array : UInt64
  end

  ID3D10EffectScalarVariable_GUID = "00e48f7b-d2c8-49e8-a86c-022dee53431f"
  IID_ID3D10EffectScalarVariable = LibC::GUID.new(0xe48f7b_u32, 0xd2c8_u16, 0x49e8_u16, StaticArray[0xa8_u8, 0x6c_u8, 0x2_u8, 0x2d_u8, 0xee_u8, 0x53_u8, 0x43_u8, 0x1f_u8])
  struct ID3D10EffectScalarVariable
    lpVtbl : ID3D10EffectScalarVariableVTbl*
  end

  struct ID3D10EffectVectorVariableVTbl
    is_valid : UInt64
    get_type : UInt64
    get_desc : UInt64
    get_annotation_by_index : UInt64
    get_annotation_by_name : UInt64
    get_member_by_index : UInt64
    get_member_by_name : UInt64
    get_member_by_semantic : UInt64
    get_element : UInt64
    get_parent_constant_buffer : UInt64
    as_scalar : UInt64
    as_vector : UInt64
    as_matrix : UInt64
    as_string : UInt64
    as_shader_resource : UInt64
    as_render_target_view : UInt64
    as_depth_stencil_view : UInt64
    as_constant_buffer : UInt64
    as_shader : UInt64
    as_blend : UInt64
    as_depth_stencil : UInt64
    as_rasterizer : UInt64
    as_sampler : UInt64
    set_raw_value : UInt64
    get_raw_value : UInt64
    set_bool_vector : UInt64
    set_int_vector : UInt64
    set_float_vector : UInt64
    get_bool_vector : UInt64
    get_int_vector : UInt64
    get_float_vector : UInt64
    set_bool_vector_array : UInt64
    set_int_vector_array : UInt64
    set_float_vector_array : UInt64
    get_bool_vector_array : UInt64
    get_int_vector_array : UInt64
    get_float_vector_array : UInt64
  end

  ID3D10EffectVectorVariable_GUID = "62b98c44-1f82-4c67-bcd0-72cf8f217e81"
  IID_ID3D10EffectVectorVariable = LibC::GUID.new(0x62b98c44_u32, 0x1f82_u16, 0x4c67_u16, StaticArray[0xbc_u8, 0xd0_u8, 0x72_u8, 0xcf_u8, 0x8f_u8, 0x21_u8, 0x7e_u8, 0x81_u8])
  struct ID3D10EffectVectorVariable
    lpVtbl : ID3D10EffectVectorVariableVTbl*
  end

  struct ID3D10EffectMatrixVariableVTbl
    is_valid : UInt64
    get_type : UInt64
    get_desc : UInt64
    get_annotation_by_index : UInt64
    get_annotation_by_name : UInt64
    get_member_by_index : UInt64
    get_member_by_name : UInt64
    get_member_by_semantic : UInt64
    get_element : UInt64
    get_parent_constant_buffer : UInt64
    as_scalar : UInt64
    as_vector : UInt64
    as_matrix : UInt64
    as_string : UInt64
    as_shader_resource : UInt64
    as_render_target_view : UInt64
    as_depth_stencil_view : UInt64
    as_constant_buffer : UInt64
    as_shader : UInt64
    as_blend : UInt64
    as_depth_stencil : UInt64
    as_rasterizer : UInt64
    as_sampler : UInt64
    set_raw_value : UInt64
    get_raw_value : UInt64
    set_matrix : UInt64
    get_matrix : UInt64
    set_matrix_array : UInt64
    get_matrix_array : UInt64
    set_matrix_transpose : UInt64
    get_matrix_transpose : UInt64
    set_matrix_transpose_array : UInt64
    get_matrix_transpose_array : UInt64
  end

  ID3D10EffectMatrixVariable_GUID = "50666c24-b82f-4eed-a172-5b6e7e8522e0"
  IID_ID3D10EffectMatrixVariable = LibC::GUID.new(0x50666c24_u32, 0xb82f_u16, 0x4eed_u16, StaticArray[0xa1_u8, 0x72_u8, 0x5b_u8, 0x6e_u8, 0x7e_u8, 0x85_u8, 0x22_u8, 0xe0_u8])
  struct ID3D10EffectMatrixVariable
    lpVtbl : ID3D10EffectMatrixVariableVTbl*
  end

  struct ID3D10EffectStringVariableVTbl
    is_valid : UInt64
    get_type : UInt64
    get_desc : UInt64
    get_annotation_by_index : UInt64
    get_annotation_by_name : UInt64
    get_member_by_index : UInt64
    get_member_by_name : UInt64
    get_member_by_semantic : UInt64
    get_element : UInt64
    get_parent_constant_buffer : UInt64
    as_scalar : UInt64
    as_vector : UInt64
    as_matrix : UInt64
    as_string : UInt64
    as_shader_resource : UInt64
    as_render_target_view : UInt64
    as_depth_stencil_view : UInt64
    as_constant_buffer : UInt64
    as_shader : UInt64
    as_blend : UInt64
    as_depth_stencil : UInt64
    as_rasterizer : UInt64
    as_sampler : UInt64
    set_raw_value : UInt64
    get_raw_value : UInt64
    get_string : UInt64
    get_string_array : UInt64
  end

  ID3D10EffectStringVariable_GUID = "71417501-8df9-4e0a-a78a-255f9756baff"
  IID_ID3D10EffectStringVariable = LibC::GUID.new(0x71417501_u32, 0x8df9_u16, 0x4e0a_u16, StaticArray[0xa7_u8, 0x8a_u8, 0x25_u8, 0x5f_u8, 0x97_u8, 0x56_u8, 0xba_u8, 0xff_u8])
  struct ID3D10EffectStringVariable
    lpVtbl : ID3D10EffectStringVariableVTbl*
  end

  struct ID3D10EffectShaderResourceVariableVTbl
    is_valid : UInt64
    get_type : UInt64
    get_desc : UInt64
    get_annotation_by_index : UInt64
    get_annotation_by_name : UInt64
    get_member_by_index : UInt64
    get_member_by_name : UInt64
    get_member_by_semantic : UInt64
    get_element : UInt64
    get_parent_constant_buffer : UInt64
    as_scalar : UInt64
    as_vector : UInt64
    as_matrix : UInt64
    as_string : UInt64
    as_shader_resource : UInt64
    as_render_target_view : UInt64
    as_depth_stencil_view : UInt64
    as_constant_buffer : UInt64
    as_shader : UInt64
    as_blend : UInt64
    as_depth_stencil : UInt64
    as_rasterizer : UInt64
    as_sampler : UInt64
    set_raw_value : UInt64
    get_raw_value : UInt64
    set_resource : UInt64
    get_resource : UInt64
    set_resource_array : UInt64
    get_resource_array : UInt64
  end

  ID3D10EffectShaderResourceVariable_GUID = "c0a7157b-d872-4b1d-8073-efc2acd4b1fc"
  IID_ID3D10EffectShaderResourceVariable = LibC::GUID.new(0xc0a7157b_u32, 0xd872_u16, 0x4b1d_u16, StaticArray[0x80_u8, 0x73_u8, 0xef_u8, 0xc2_u8, 0xac_u8, 0xd4_u8, 0xb1_u8, 0xfc_u8])
  struct ID3D10EffectShaderResourceVariable
    lpVtbl : ID3D10EffectShaderResourceVariableVTbl*
  end

  struct ID3D10EffectRenderTargetViewVariableVTbl
    is_valid : UInt64
    get_type : UInt64
    get_desc : UInt64
    get_annotation_by_index : UInt64
    get_annotation_by_name : UInt64
    get_member_by_index : UInt64
    get_member_by_name : UInt64
    get_member_by_semantic : UInt64
    get_element : UInt64
    get_parent_constant_buffer : UInt64
    as_scalar : UInt64
    as_vector : UInt64
    as_matrix : UInt64
    as_string : UInt64
    as_shader_resource : UInt64
    as_render_target_view : UInt64
    as_depth_stencil_view : UInt64
    as_constant_buffer : UInt64
    as_shader : UInt64
    as_blend : UInt64
    as_depth_stencil : UInt64
    as_rasterizer : UInt64
    as_sampler : UInt64
    set_raw_value : UInt64
    get_raw_value : UInt64
    set_render_target : UInt64
    get_render_target : UInt64
    set_render_target_array : UInt64
    get_render_target_array : UInt64
  end

  ID3D10EffectRenderTargetViewVariable_GUID = "28ca0cc3-c2c9-40bb-b57f-67b737122b17"
  IID_ID3D10EffectRenderTargetViewVariable = LibC::GUID.new(0x28ca0cc3_u32, 0xc2c9_u16, 0x40bb_u16, StaticArray[0xb5_u8, 0x7f_u8, 0x67_u8, 0xb7_u8, 0x37_u8, 0x12_u8, 0x2b_u8, 0x17_u8])
  struct ID3D10EffectRenderTargetViewVariable
    lpVtbl : ID3D10EffectRenderTargetViewVariableVTbl*
  end

  struct ID3D10EffectDepthStencilViewVariableVTbl
    is_valid : UInt64
    get_type : UInt64
    get_desc : UInt64
    get_annotation_by_index : UInt64
    get_annotation_by_name : UInt64
    get_member_by_index : UInt64
    get_member_by_name : UInt64
    get_member_by_semantic : UInt64
    get_element : UInt64
    get_parent_constant_buffer : UInt64
    as_scalar : UInt64
    as_vector : UInt64
    as_matrix : UInt64
    as_string : UInt64
    as_shader_resource : UInt64
    as_render_target_view : UInt64
    as_depth_stencil_view : UInt64
    as_constant_buffer : UInt64
    as_shader : UInt64
    as_blend : UInt64
    as_depth_stencil : UInt64
    as_rasterizer : UInt64
    as_sampler : UInt64
    set_raw_value : UInt64
    get_raw_value : UInt64
    set_depth_stencil : UInt64
    get_depth_stencil : UInt64
    set_depth_stencil_array : UInt64
    get_depth_stencil_array : UInt64
  end

  ID3D10EffectDepthStencilViewVariable_GUID = "3e02c918-cc79-4985-b622-2d92ad701623"
  IID_ID3D10EffectDepthStencilViewVariable = LibC::GUID.new(0x3e02c918_u32, 0xcc79_u16, 0x4985_u16, StaticArray[0xb6_u8, 0x22_u8, 0x2d_u8, 0x92_u8, 0xad_u8, 0x70_u8, 0x16_u8, 0x23_u8])
  struct ID3D10EffectDepthStencilViewVariable
    lpVtbl : ID3D10EffectDepthStencilViewVariableVTbl*
  end

  struct ID3D10EffectConstantBufferVTbl
    is_valid : UInt64
    get_type : UInt64
    get_desc : UInt64
    get_annotation_by_index : UInt64
    get_annotation_by_name : UInt64
    get_member_by_index : UInt64
    get_member_by_name : UInt64
    get_member_by_semantic : UInt64
    get_element : UInt64
    get_parent_constant_buffer : UInt64
    as_scalar : UInt64
    as_vector : UInt64
    as_matrix : UInt64
    as_string : UInt64
    as_shader_resource : UInt64
    as_render_target_view : UInt64
    as_depth_stencil_view : UInt64
    as_constant_buffer : UInt64
    as_shader : UInt64
    as_blend : UInt64
    as_depth_stencil : UInt64
    as_rasterizer : UInt64
    as_sampler : UInt64
    set_raw_value : UInt64
    get_raw_value : UInt64
    set_constant_buffer : UInt64
    get_constant_buffer : UInt64
    set_texture_buffer : UInt64
    get_texture_buffer : UInt64
  end

  ID3D10EffectConstantBuffer_GUID = "56648f4d-cc8b-4444-a5ad-b5a3d76e91b3"
  IID_ID3D10EffectConstantBuffer = LibC::GUID.new(0x56648f4d_u32, 0xcc8b_u16, 0x4444_u16, StaticArray[0xa5_u8, 0xad_u8, 0xb5_u8, 0xa3_u8, 0xd7_u8, 0x6e_u8, 0x91_u8, 0xb3_u8])
  struct ID3D10EffectConstantBuffer
    lpVtbl : ID3D10EffectConstantBufferVTbl*
  end

  struct ID3D10EffectShaderVariableVTbl
    is_valid : UInt64
    get_type : UInt64
    get_desc : UInt64
    get_annotation_by_index : UInt64
    get_annotation_by_name : UInt64
    get_member_by_index : UInt64
    get_member_by_name : UInt64
    get_member_by_semantic : UInt64
    get_element : UInt64
    get_parent_constant_buffer : UInt64
    as_scalar : UInt64
    as_vector : UInt64
    as_matrix : UInt64
    as_string : UInt64
    as_shader_resource : UInt64
    as_render_target_view : UInt64
    as_depth_stencil_view : UInt64
    as_constant_buffer : UInt64
    as_shader : UInt64
    as_blend : UInt64
    as_depth_stencil : UInt64
    as_rasterizer : UInt64
    as_sampler : UInt64
    set_raw_value : UInt64
    get_raw_value : UInt64
    get_shader_desc : UInt64
    get_vertex_shader : UInt64
    get_geometry_shader : UInt64
    get_pixel_shader : UInt64
    get_input_signature_element_desc : UInt64
    get_output_signature_element_desc : UInt64
  end

  ID3D10EffectShaderVariable_GUID = "80849279-c799-4797-8c33-0407a07d9e06"
  IID_ID3D10EffectShaderVariable = LibC::GUID.new(0x80849279_u32, 0xc799_u16, 0x4797_u16, StaticArray[0x8c_u8, 0x33_u8, 0x4_u8, 0x7_u8, 0xa0_u8, 0x7d_u8, 0x9e_u8, 0x6_u8])
  struct ID3D10EffectShaderVariable
    lpVtbl : ID3D10EffectShaderVariableVTbl*
  end

  struct ID3D10EffectBlendVariableVTbl
    is_valid : UInt64
    get_type : UInt64
    get_desc : UInt64
    get_annotation_by_index : UInt64
    get_annotation_by_name : UInt64
    get_member_by_index : UInt64
    get_member_by_name : UInt64
    get_member_by_semantic : UInt64
    get_element : UInt64
    get_parent_constant_buffer : UInt64
    as_scalar : UInt64
    as_vector : UInt64
    as_matrix : UInt64
    as_string : UInt64
    as_shader_resource : UInt64
    as_render_target_view : UInt64
    as_depth_stencil_view : UInt64
    as_constant_buffer : UInt64
    as_shader : UInt64
    as_blend : UInt64
    as_depth_stencil : UInt64
    as_rasterizer : UInt64
    as_sampler : UInt64
    set_raw_value : UInt64
    get_raw_value : UInt64
    get_blend_state : UInt64
    get_backing_store : UInt64
  end

  ID3D10EffectBlendVariable_GUID = "1fcd2294-df6d-4eae-86b3-0e9160cfb07b"
  IID_ID3D10EffectBlendVariable = LibC::GUID.new(0x1fcd2294_u32, 0xdf6d_u16, 0x4eae_u16, StaticArray[0x86_u8, 0xb3_u8, 0xe_u8, 0x91_u8, 0x60_u8, 0xcf_u8, 0xb0_u8, 0x7b_u8])
  struct ID3D10EffectBlendVariable
    lpVtbl : ID3D10EffectBlendVariableVTbl*
  end

  struct ID3D10EffectDepthStencilVariableVTbl
    is_valid : UInt64
    get_type : UInt64
    get_desc : UInt64
    get_annotation_by_index : UInt64
    get_annotation_by_name : UInt64
    get_member_by_index : UInt64
    get_member_by_name : UInt64
    get_member_by_semantic : UInt64
    get_element : UInt64
    get_parent_constant_buffer : UInt64
    as_scalar : UInt64
    as_vector : UInt64
    as_matrix : UInt64
    as_string : UInt64
    as_shader_resource : UInt64
    as_render_target_view : UInt64
    as_depth_stencil_view : UInt64
    as_constant_buffer : UInt64
    as_shader : UInt64
    as_blend : UInt64
    as_depth_stencil : UInt64
    as_rasterizer : UInt64
    as_sampler : UInt64
    set_raw_value : UInt64
    get_raw_value : UInt64
    get_depth_stencil_state : UInt64
    get_backing_store : UInt64
  end

  ID3D10EffectDepthStencilVariable_GUID = "af482368-330a-46a5-9a5c-01c71af24c8d"
  IID_ID3D10EffectDepthStencilVariable = LibC::GUID.new(0xaf482368_u32, 0x330a_u16, 0x46a5_u16, StaticArray[0x9a_u8, 0x5c_u8, 0x1_u8, 0xc7_u8, 0x1a_u8, 0xf2_u8, 0x4c_u8, 0x8d_u8])
  struct ID3D10EffectDepthStencilVariable
    lpVtbl : ID3D10EffectDepthStencilVariableVTbl*
  end

  struct ID3D10EffectRasterizerVariableVTbl
    is_valid : UInt64
    get_type : UInt64
    get_desc : UInt64
    get_annotation_by_index : UInt64
    get_annotation_by_name : UInt64
    get_member_by_index : UInt64
    get_member_by_name : UInt64
    get_member_by_semantic : UInt64
    get_element : UInt64
    get_parent_constant_buffer : UInt64
    as_scalar : UInt64
    as_vector : UInt64
    as_matrix : UInt64
    as_string : UInt64
    as_shader_resource : UInt64
    as_render_target_view : UInt64
    as_depth_stencil_view : UInt64
    as_constant_buffer : UInt64
    as_shader : UInt64
    as_blend : UInt64
    as_depth_stencil : UInt64
    as_rasterizer : UInt64
    as_sampler : UInt64
    set_raw_value : UInt64
    get_raw_value : UInt64
    get_rasterizer_state : UInt64
    get_backing_store : UInt64
  end

  ID3D10EffectRasterizerVariable_GUID = "21af9f0e-4d94-4ea9-9785-2cb76b8c0b34"
  IID_ID3D10EffectRasterizerVariable = LibC::GUID.new(0x21af9f0e_u32, 0x4d94_u16, 0x4ea9_u16, StaticArray[0x97_u8, 0x85_u8, 0x2c_u8, 0xb7_u8, 0x6b_u8, 0x8c_u8, 0xb_u8, 0x34_u8])
  struct ID3D10EffectRasterizerVariable
    lpVtbl : ID3D10EffectRasterizerVariableVTbl*
  end

  struct ID3D10EffectSamplerVariableVTbl
    is_valid : UInt64
    get_type : UInt64
    get_desc : UInt64
    get_annotation_by_index : UInt64
    get_annotation_by_name : UInt64
    get_member_by_index : UInt64
    get_member_by_name : UInt64
    get_member_by_semantic : UInt64
    get_element : UInt64
    get_parent_constant_buffer : UInt64
    as_scalar : UInt64
    as_vector : UInt64
    as_matrix : UInt64
    as_string : UInt64
    as_shader_resource : UInt64
    as_render_target_view : UInt64
    as_depth_stencil_view : UInt64
    as_constant_buffer : UInt64
    as_shader : UInt64
    as_blend : UInt64
    as_depth_stencil : UInt64
    as_rasterizer : UInt64
    as_sampler : UInt64
    set_raw_value : UInt64
    get_raw_value : UInt64
    get_sampler : UInt64
    get_backing_store : UInt64
  end

  ID3D10EffectSamplerVariable_GUID = "6530d5c7-07e9-4271-a418-e7ce4bd1e480"
  IID_ID3D10EffectSamplerVariable = LibC::GUID.new(0x6530d5c7_u32, 0x7e9_u16, 0x4271_u16, StaticArray[0xa4_u8, 0x18_u8, 0xe7_u8, 0xce_u8, 0x4b_u8, 0xd1_u8, 0xe4_u8, 0x80_u8])
  struct ID3D10EffectSamplerVariable
    lpVtbl : ID3D10EffectSamplerVariableVTbl*
  end

  struct ID3D10EffectPassVTbl
    is_valid : UInt64
    get_desc : UInt64
    get_vertex_shader_desc : UInt64
    get_geometry_shader_desc : UInt64
    get_pixel_shader_desc : UInt64
    get_annotation_by_index : UInt64
    get_annotation_by_name : UInt64
    apply : UInt64
    compute_state_block_mask : UInt64
  end

  ID3D10EffectPass_GUID = "5cfbeb89-1a06-46e0-b282-e3f9bfa36a54"
  IID_ID3D10EffectPass = LibC::GUID.new(0x5cfbeb89_u32, 0x1a06_u16, 0x46e0_u16, StaticArray[0xb2_u8, 0x82_u8, 0xe3_u8, 0xf9_u8, 0xbf_u8, 0xa3_u8, 0x6a_u8, 0x54_u8])
  struct ID3D10EffectPass
    lpVtbl : ID3D10EffectPassVTbl*
  end

  struct ID3D10EffectTechniqueVTbl
    is_valid : UInt64
    get_desc : UInt64
    get_annotation_by_index : UInt64
    get_annotation_by_name : UInt64
    get_pass_by_index : UInt64
    get_pass_by_name : UInt64
    compute_state_block_mask : UInt64
  end

  ID3D10EffectTechnique_GUID = "db122ce8-d1c9-4292-b237-24ed3de8b175"
  IID_ID3D10EffectTechnique = LibC::GUID.new(0xdb122ce8_u32, 0xd1c9_u16, 0x4292_u16, StaticArray[0xb2_u8, 0x37_u8, 0x24_u8, 0xed_u8, 0x3d_u8, 0xe8_u8, 0xb1_u8, 0x75_u8])
  struct ID3D10EffectTechnique
    lpVtbl : ID3D10EffectTechniqueVTbl*
  end

  struct ID3D10EffectVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    is_valid : UInt64
    is_pool : UInt64
    get_device : UInt64
    get_desc : UInt64
    get_constant_buffer_by_index : UInt64
    get_constant_buffer_by_name : UInt64
    get_variable_by_index : UInt64
    get_variable_by_name : UInt64
    get_variable_by_semantic : UInt64
    get_technique_by_index : UInt64
    get_technique_by_name : UInt64
    optimize : UInt64
    is_optimized : UInt64
  end

  ID3D10Effect_GUID = "51b0ca8b-ec0b-4519-870d-8ee1cb5017c7"
  IID_ID3D10Effect = LibC::GUID.new(0x51b0ca8b_u32, 0xec0b_u16, 0x4519_u16, StaticArray[0x87_u8, 0xd_u8, 0x8e_u8, 0xe1_u8, 0xcb_u8, 0x50_u8, 0x17_u8, 0xc7_u8])
  struct ID3D10Effect
    lpVtbl : ID3D10EffectVTbl*
  end

  struct ID3D10EffectPoolVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    as_effect : UInt64
  end

  ID3D10EffectPool_GUID = "9537ab04-3250-412e-8213-fcd2f8677933"
  IID_ID3D10EffectPool = LibC::GUID.new(0x9537ab04_u32, 0x3250_u16, 0x412e_u16, StaticArray[0x82_u8, 0x13_u8, 0xfc_u8, 0xd2_u8, 0xf8_u8, 0x67_u8, 0x79_u8, 0x33_u8])
  struct ID3D10EffectPool
    lpVtbl : ID3D10EffectPoolVTbl*
  end

  struct ID3D10BlendState1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    get_desc : UInt64
    get_desc1 : UInt64
  end

  ID3D10BlendState1_GUID = "edad8d99-8a35-4d6d-8566-2ea276cde161"
  IID_ID3D10BlendState1 = LibC::GUID.new(0xedad8d99_u32, 0x8a35_u16, 0x4d6d_u16, StaticArray[0x85_u8, 0x66_u8, 0x2e_u8, 0xa2_u8, 0x76_u8, 0xcd_u8, 0xe1_u8, 0x61_u8])
  struct ID3D10BlendState1
    lpVtbl : ID3D10BlendState1VTbl*
  end

  struct ID3D10ShaderResourceView1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_device : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    get_resource : UInt64
    get_desc : UInt64
    get_desc1 : UInt64
  end

  ID3D10ShaderResourceView1_GUID = "9b7e4c87-342c-4106-a19f-4f2704f689f0"
  IID_ID3D10ShaderResourceView1 = LibC::GUID.new(0x9b7e4c87_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
  struct ID3D10ShaderResourceView1
    lpVtbl : ID3D10ShaderResourceView1VTbl*
  end

  struct ID3D10Device1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    vs_set_constant_buffers : UInt64
    ps_set_shader_resources : UInt64
    ps_set_shader : UInt64
    ps_set_samplers : UInt64
    vs_set_shader : UInt64
    draw_indexed : UInt64
    draw : UInt64
    ps_set_constant_buffers : UInt64
    ia_set_input_layout : UInt64
    ia_set_vertex_buffers : UInt64
    ia_set_index_buffer : UInt64
    draw_indexed_instanced : UInt64
    draw_instanced : UInt64
    gs_set_constant_buffers : UInt64
    gs_set_shader : UInt64
    ia_set_primitive_topology : UInt64
    vs_set_shader_resources : UInt64
    vs_set_samplers : UInt64
    set_predication : UInt64
    gs_set_shader_resources : UInt64
    gs_set_samplers : UInt64
    om_set_render_targets : UInt64
    om_set_blend_state : UInt64
    om_set_depth_stencil_state : UInt64
    so_set_targets : UInt64
    draw_auto : UInt64
    rs_set_state : UInt64
    rs_set_viewports : UInt64
    rs_set_scissor_rects : UInt64
    copy_subresource_region : UInt64
    copy_resource : UInt64
    update_subresource : UInt64
    clear_render_target_view : UInt64
    clear_depth_stencil_view : UInt64
    generate_mips : UInt64
    resolve_subresource : UInt64
    vs_get_constant_buffers : UInt64
    ps_get_shader_resources : UInt64
    ps_get_shader : UInt64
    ps_get_samplers : UInt64
    vs_get_shader : UInt64
    ps_get_constant_buffers : UInt64
    ia_get_input_layout : UInt64
    ia_get_vertex_buffers : UInt64
    ia_get_index_buffer : UInt64
    gs_get_constant_buffers : UInt64
    gs_get_shader : UInt64
    ia_get_primitive_topology : UInt64
    vs_get_shader_resources : UInt64
    vs_get_samplers : UInt64
    get_predication : UInt64
    gs_get_shader_resources : UInt64
    gs_get_samplers : UInt64
    om_get_render_targets : UInt64
    om_get_blend_state : UInt64
    om_get_depth_stencil_state : UInt64
    so_get_targets : UInt64
    rs_get_state : UInt64
    rs_get_viewports : UInt64
    rs_get_scissor_rects : UInt64
    get_device_removed_reason : UInt64
    set_exception_mode : UInt64
    get_exception_mode : UInt64
    get_private_data : UInt64
    set_private_data : UInt64
    set_private_data_interface : UInt64
    clear_state : UInt64
    flush : UInt64
    create_buffer : UInt64
    create_texture1_d : UInt64
    create_texture2_d : UInt64
    create_texture3_d : UInt64
    create_shader_resource_view : UInt64
    create_render_target_view : UInt64
    create_depth_stencil_view : UInt64
    create_input_layout : UInt64
    create_vertex_shader : UInt64
    create_geometry_shader : UInt64
    create_geometry_shader_with_stream_output : UInt64
    create_pixel_shader : UInt64
    create_blend_state : UInt64
    create_depth_stencil_state : UInt64
    create_rasterizer_state : UInt64
    create_sampler_state : UInt64
    create_query : UInt64
    create_predicate : UInt64
    create_counter : UInt64
    check_format_support : UInt64
    check_multisample_quality_levels : UInt64
    check_counter_info : UInt64
    check_counter : UInt64
    get_creation_flags : UInt64
    open_shared_resource : UInt64
    set_text_filter_size : UInt64
    get_text_filter_size : UInt64
    create_shader_resource_view1 : UInt64
    create_blend_state1 : UInt64
    get_feature_level : UInt64
  end

  ID3D10Device1_GUID = "9b7e4c8f-342c-4106-a19f-4f2704f689f0"
  IID_ID3D10Device1 = LibC::GUID.new(0x9b7e4c8f_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
  struct ID3D10Device1
    lpVtbl : ID3D10Device1VTbl*
  end

  struct ID3D10ShaderReflection1VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_desc : UInt64
    get_constant_buffer_by_index : UInt64
    get_constant_buffer_by_name : UInt64
    get_resource_binding_desc : UInt64
    get_input_parameter_desc : UInt64
    get_output_parameter_desc : UInt64
    get_variable_by_name : UInt64
    get_resource_binding_desc_by_name : UInt64
    get_mov_instruction_count : UInt64
    get_movc_instruction_count : UInt64
    get_conversion_instruction_count : UInt64
    get_bitwise_instruction_count : UInt64
    get_gs_input_primitive : UInt64
    is_level9_shader : UInt64
    is_sample_frequency_shader : UInt64
  end

  ID3D10ShaderReflection1_GUID = "c3457783-a846-47ce-9520-cea6f66e7447"
  IID_ID3D10ShaderReflection1 = LibC::GUID.new(0xc3457783_u32, 0xa846_u16, 0x47ce_u16, StaticArray[0x95_u8, 0x20_u8, 0xce_u8, 0xa6_u8, 0xf6_u8, 0x6e_u8, 0x74_u8, 0x47_u8])
  struct ID3D10ShaderReflection1
    lpVtbl : ID3D10ShaderReflection1VTbl*
  end


  # Params # padapter : IDXGIAdapter [In],drivertype : D3D10_DRIVER_TYPE [In],software : HINSTANCE [In],flags : UInt32 [In],sdkversion : UInt32 [In],ppdevice : ID3D10Device* [In]
  fun D3D10CreateDevice(padapter : IDXGIAdapter, drivertype : D3D10_DRIVER_TYPE, software : HINSTANCE, flags : UInt32, sdkversion : UInt32, ppdevice : ID3D10Device*) : HRESULT

  # Params # padapter : IDXGIAdapter [In],drivertype : D3D10_DRIVER_TYPE [In],software : HINSTANCE [In],flags : UInt32 [In],sdkversion : UInt32 [In],pswapchaindesc : DXGI_SWAP_CHAIN_DESC* [In],ppswapchain : IDXGISwapChain* [In],ppdevice : ID3D10Device* [In]
  fun D3D10CreateDeviceAndSwapChain(padapter : IDXGIAdapter, drivertype : D3D10_DRIVER_TYPE, software : HINSTANCE, flags : UInt32, sdkversion : UInt32, pswapchaindesc : DXGI_SWAP_CHAIN_DESC*, ppswapchain : IDXGISwapChain*, ppdevice : ID3D10Device*) : HRESULT

  # Params # numbytes : LibC::UINT_PTR [In],ppbuffer : ID3DBlob* [In]
  fun D3D10CreateBlob(numbytes : LibC::UINT_PTR, ppbuffer : ID3DBlob*) : HRESULT

  # Params # psrcdata : PSTR [In],srcdatasize : LibC::UINT_PTR [In],pfilename : PSTR [In],pdefines : D3D_SHADER_MACRO* [In],pinclude : ID3DInclude [In],pfunctionname : PSTR [In],pprofile : PSTR [In],flags : UInt32 [In],ppshader : ID3DBlob* [In],pperrormsgs : ID3DBlob* [In]
  fun D3D10CompileShader(psrcdata : PSTR, srcdatasize : LibC::UINT_PTR, pfilename : PSTR, pdefines : D3D_SHADER_MACRO*, pinclude : ID3DInclude, pfunctionname : PSTR, pprofile : PSTR, flags : UInt32, ppshader : ID3DBlob*, pperrormsgs : ID3DBlob*) : HRESULT

  # Params # pshader : Void* [In],bytecodelength : LibC::UINT_PTR [In],enablecolorcode : LibC::BOOL [In],pcomments : PSTR [In],ppdisassembly : ID3DBlob* [In]
  fun D3D10DisassembleShader(pshader : Void*, bytecodelength : LibC::UINT_PTR, enablecolorcode : LibC::BOOL, pcomments : PSTR, ppdisassembly : ID3DBlob*) : HRESULT

  # Params # pdevice : ID3D10Device [In]
  fun D3D10GetPixelShaderProfile(pdevice : ID3D10Device) : PSTR

  # Params # pdevice : ID3D10Device [In]
  fun D3D10GetVertexShaderProfile(pdevice : ID3D10Device) : PSTR

  # Params # pdevice : ID3D10Device [In]
  fun D3D10GetGeometryShaderProfile(pdevice : ID3D10Device) : PSTR

  # Params # pshaderbytecode : Void* [In],bytecodelength : LibC::UINT_PTR [In],ppreflector : ID3D10ShaderReflection* [In]
  fun D3D10ReflectShader(pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, ppreflector : ID3D10ShaderReflection*) : HRESULT

  # Params # psrcdata : PSTR [In],srcdatasize : LibC::UINT_PTR [In],pfilename : PSTR [In],pdefines : D3D_SHADER_MACRO* [In],pinclude : ID3DInclude [In],ppshadertext : ID3DBlob* [In],pperrormsgs : ID3DBlob* [In]
  fun D3D10PreprocessShader(psrcdata : PSTR, srcdatasize : LibC::UINT_PTR, pfilename : PSTR, pdefines : D3D_SHADER_MACRO*, pinclude : ID3DInclude, ppshadertext : ID3DBlob*, pperrormsgs : ID3DBlob*) : HRESULT

  # Params # pshaderbytecode : Void* [In],bytecodelength : LibC::UINT_PTR [In],ppsignatureblob : ID3DBlob* [In]
  fun D3D10GetInputSignatureBlob(pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, ppsignatureblob : ID3DBlob*) : HRESULT

  # Params # pshaderbytecode : Void* [In],bytecodelength : LibC::UINT_PTR [In],ppsignatureblob : ID3DBlob* [In]
  fun D3D10GetOutputSignatureBlob(pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, ppsignatureblob : ID3DBlob*) : HRESULT

  # Params # pshaderbytecode : Void* [In],bytecodelength : LibC::UINT_PTR [In],ppsignatureblob : ID3DBlob* [In]
  fun D3D10GetInputAndOutputSignatureBlob(pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, ppsignatureblob : ID3DBlob*) : HRESULT

  # Params # pshaderbytecode : Void* [In],bytecodelength : LibC::UINT_PTR [In],ppdebuginfo : ID3DBlob* [In]
  fun D3D10GetShaderDebugInfo(pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, ppdebuginfo : ID3DBlob*) : HRESULT

  # Params # pa : D3D10_STATE_BLOCK_MASK* [In],pb : D3D10_STATE_BLOCK_MASK* [In],presult : D3D10_STATE_BLOCK_MASK* [In]
  fun D3D10StateBlockMaskUnion(pa : D3D10_STATE_BLOCK_MASK*, pb : D3D10_STATE_BLOCK_MASK*, presult : D3D10_STATE_BLOCK_MASK*) : HRESULT

  # Params # pa : D3D10_STATE_BLOCK_MASK* [In],pb : D3D10_STATE_BLOCK_MASK* [In],presult : D3D10_STATE_BLOCK_MASK* [In]
  fun D3D10StateBlockMaskIntersect(pa : D3D10_STATE_BLOCK_MASK*, pb : D3D10_STATE_BLOCK_MASK*, presult : D3D10_STATE_BLOCK_MASK*) : HRESULT

  # Params # pa : D3D10_STATE_BLOCK_MASK* [In],pb : D3D10_STATE_BLOCK_MASK* [In],presult : D3D10_STATE_BLOCK_MASK* [In]
  fun D3D10StateBlockMaskDifference(pa : D3D10_STATE_BLOCK_MASK*, pb : D3D10_STATE_BLOCK_MASK*, presult : D3D10_STATE_BLOCK_MASK*) : HRESULT

  # Params # pmask : D3D10_STATE_BLOCK_MASK* [In],statetype : D3D10_DEVICE_STATE_TYPES [In],rangestart : UInt32 [In],rangelength : UInt32 [In]
  fun D3D10StateBlockMaskEnableCapture(pmask : D3D10_STATE_BLOCK_MASK*, statetype : D3D10_DEVICE_STATE_TYPES, rangestart : UInt32, rangelength : UInt32) : HRESULT

  # Params # pmask : D3D10_STATE_BLOCK_MASK* [In],statetype : D3D10_DEVICE_STATE_TYPES [In],rangestart : UInt32 [In],rangelength : UInt32 [In]
  fun D3D10StateBlockMaskDisableCapture(pmask : D3D10_STATE_BLOCK_MASK*, statetype : D3D10_DEVICE_STATE_TYPES, rangestart : UInt32, rangelength : UInt32) : HRESULT

  # Params # pmask : D3D10_STATE_BLOCK_MASK* [In]
  fun D3D10StateBlockMaskEnableAll(pmask : D3D10_STATE_BLOCK_MASK*) : HRESULT

  # Params # pmask : D3D10_STATE_BLOCK_MASK* [In]
  fun D3D10StateBlockMaskDisableAll(pmask : D3D10_STATE_BLOCK_MASK*) : HRESULT

  # Params # pmask : D3D10_STATE_BLOCK_MASK* [In],statetype : D3D10_DEVICE_STATE_TYPES [In],entry : UInt32 [In]
  fun D3D10StateBlockMaskGetSetting(pmask : D3D10_STATE_BLOCK_MASK*, statetype : D3D10_DEVICE_STATE_TYPES, entry : UInt32) : LibC::BOOL

  # Params # pdevice : ID3D10Device [In],pstateblockmask : D3D10_STATE_BLOCK_MASK* [In],ppstateblock : ID3D10StateBlock* [In]
  fun D3D10CreateStateBlock(pdevice : ID3D10Device, pstateblockmask : D3D10_STATE_BLOCK_MASK*, ppstateblock : ID3D10StateBlock*) : HRESULT

  # Params # pdata : Void* [In],datalength : LibC::UINT_PTR [In],psrcfilename : PSTR [In],pdefines : D3D_SHADER_MACRO* [In],pinclude : ID3DInclude [In],hlslflags : UInt32 [In],fxflags : UInt32 [In],ppcompiledeffect : ID3DBlob* [In],pperrors : ID3DBlob* [In]
  fun D3D10CompileEffectFromMemory(pdata : Void*, datalength : LibC::UINT_PTR, psrcfilename : PSTR, pdefines : D3D_SHADER_MACRO*, pinclude : ID3DInclude, hlslflags : UInt32, fxflags : UInt32, ppcompiledeffect : ID3DBlob*, pperrors : ID3DBlob*) : HRESULT

  # Params # pdata : Void* [In],datalength : LibC::UINT_PTR [In],fxflags : UInt32 [In],pdevice : ID3D10Device [In],peffectpool : ID3D10EffectPool [In],ppeffect : ID3D10Effect* [In]
  fun D3D10CreateEffectFromMemory(pdata : Void*, datalength : LibC::UINT_PTR, fxflags : UInt32, pdevice : ID3D10Device, peffectpool : ID3D10EffectPool, ppeffect : ID3D10Effect*) : HRESULT

  # Params # pdata : Void* [In],datalength : LibC::UINT_PTR [In],fxflags : UInt32 [In],pdevice : ID3D10Device [In],ppeffectpool : ID3D10EffectPool* [In]
  fun D3D10CreateEffectPoolFromMemory(pdata : Void*, datalength : LibC::UINT_PTR, fxflags : UInt32, pdevice : ID3D10Device, ppeffectpool : ID3D10EffectPool*) : HRESULT

  # Params # peffect : ID3D10Effect [In],enablecolorcode : LibC::BOOL [In],ppdisassembly : ID3DBlob* [In]
  fun D3D10DisassembleEffect(peffect : ID3D10Effect, enablecolorcode : LibC::BOOL, ppdisassembly : ID3DBlob*) : HRESULT

  # Params # padapter : IDXGIAdapter [In],drivertype : D3D10_DRIVER_TYPE [In],software : HINSTANCE [In],flags : UInt32 [In],hardwarelevel : D3D10_FEATURE_LEVEL1 [In],sdkversion : UInt32 [In],ppdevice : ID3D10Device1* [In]
  fun D3D10CreateDevice1(padapter : IDXGIAdapter, drivertype : D3D10_DRIVER_TYPE, software : HINSTANCE, flags : UInt32, hardwarelevel : D3D10_FEATURE_LEVEL1, sdkversion : UInt32, ppdevice : ID3D10Device1*) : HRESULT

  # Params # padapter : IDXGIAdapter [In],drivertype : D3D10_DRIVER_TYPE [In],software : HINSTANCE [In],flags : UInt32 [In],hardwarelevel : D3D10_FEATURE_LEVEL1 [In],sdkversion : UInt32 [In],pswapchaindesc : DXGI_SWAP_CHAIN_DESC* [In],ppswapchain : IDXGISwapChain* [In],ppdevice : ID3D10Device1* [In]
  fun D3D10CreateDeviceAndSwapChain1(padapter : IDXGIAdapter, drivertype : D3D10_DRIVER_TYPE, software : HINSTANCE, flags : UInt32, hardwarelevel : D3D10_FEATURE_LEVEL1, sdkversion : UInt32, pswapchaindesc : DXGI_SWAP_CHAIN_DESC*, ppswapchain : IDXGISwapChain*, ppdevice : ID3D10Device1*) : HRESULT
end
struct LibWin32::ID3D10DeviceChild
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : ID3D10Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID3D10Device*, Void)).call(ppdevice)
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
end
struct LibWin32::ID3D10DepthStencilState
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : ID3D10Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID3D10Device*, Void)).call(ppdevice)
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def get_desc(pdesc : D3D10_DEPTH_STENCIL_DESC*) : Void
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_DEPTH_STENCIL_DESC*, Void)).call(pdesc)
  end
end
struct LibWin32::ID3D10BlendState
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : ID3D10Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID3D10Device*, Void)).call(ppdevice)
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def get_desc(pdesc : D3D10_BLEND_DESC*) : Void
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_BLEND_DESC*, Void)).call(pdesc)
  end
end
struct LibWin32::ID3D10RasterizerState
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : ID3D10Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID3D10Device*, Void)).call(ppdevice)
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def get_desc(pdesc : D3D10_RASTERIZER_DESC*) : Void
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_RASTERIZER_DESC*, Void)).call(pdesc)
  end
end
struct LibWin32::ID3D10Resource
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : ID3D10Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID3D10Device*, Void)).call(ppdevice)
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def get_type(rtype : D3D10_RESOURCE_DIMENSION*) : Void
    @lpVtbl.value.get_type.unsafe_as(Proc(D3D10_RESOURCE_DIMENSION*, Void)).call(rtype)
  end
  def set_eviction_priority(evictionpriority : UInt32) : Void
    @lpVtbl.value.set_eviction_priority.unsafe_as(Proc(UInt32, Void)).call(evictionpriority)
  end
  def get_eviction_priority : UInt32
    @lpVtbl.value.get_eviction_priority.unsafe_as(Proc(UInt32)).call
  end
end
struct LibWin32::ID3D10Buffer
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : ID3D10Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID3D10Device*, Void)).call(ppdevice)
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def get_type(rtype : D3D10_RESOURCE_DIMENSION*) : Void
    @lpVtbl.value.get_type.unsafe_as(Proc(D3D10_RESOURCE_DIMENSION*, Void)).call(rtype)
  end
  def set_eviction_priority(evictionpriority : UInt32) : Void
    @lpVtbl.value.set_eviction_priority.unsafe_as(Proc(UInt32, Void)).call(evictionpriority)
  end
  def get_eviction_priority : UInt32
    @lpVtbl.value.get_eviction_priority.unsafe_as(Proc(UInt32)).call
  end
  def map(maptype : D3D10_MAP, mapflags : UInt32, ppdata : Void**) : HRESULT
    @lpVtbl.value.map.unsafe_as(Proc(D3D10_MAP, UInt32, Void**, HRESULT)).call(maptype, mapflags, ppdata)
  end
  def unmap : Void
    @lpVtbl.value.unmap.unsafe_as(Proc(Void)).call
  end
  def get_desc(pdesc : D3D10_BUFFER_DESC*) : Void
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_BUFFER_DESC*, Void)).call(pdesc)
  end
end
struct LibWin32::ID3D10Texture1D
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : ID3D10Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID3D10Device*, Void)).call(ppdevice)
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def get_type(rtype : D3D10_RESOURCE_DIMENSION*) : Void
    @lpVtbl.value.get_type.unsafe_as(Proc(D3D10_RESOURCE_DIMENSION*, Void)).call(rtype)
  end
  def set_eviction_priority(evictionpriority : UInt32) : Void
    @lpVtbl.value.set_eviction_priority.unsafe_as(Proc(UInt32, Void)).call(evictionpriority)
  end
  def get_eviction_priority : UInt32
    @lpVtbl.value.get_eviction_priority.unsafe_as(Proc(UInt32)).call
  end
  def map(subresource : UInt32, maptype : D3D10_MAP, mapflags : UInt32, ppdata : Void**) : HRESULT
    @lpVtbl.value.map.unsafe_as(Proc(UInt32, D3D10_MAP, UInt32, Void**, HRESULT)).call(subresource, maptype, mapflags, ppdata)
  end
  def unmap(subresource : UInt32) : Void
    @lpVtbl.value.unmap.unsafe_as(Proc(UInt32, Void)).call(subresource)
  end
  def get_desc(pdesc : D3D10_TEXTURE1D_DESC*) : Void
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_TEXTURE1D_DESC*, Void)).call(pdesc)
  end
end
struct LibWin32::ID3D10Texture2D
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : ID3D10Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID3D10Device*, Void)).call(ppdevice)
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def get_type(rtype : D3D10_RESOURCE_DIMENSION*) : Void
    @lpVtbl.value.get_type.unsafe_as(Proc(D3D10_RESOURCE_DIMENSION*, Void)).call(rtype)
  end
  def set_eviction_priority(evictionpriority : UInt32) : Void
    @lpVtbl.value.set_eviction_priority.unsafe_as(Proc(UInt32, Void)).call(evictionpriority)
  end
  def get_eviction_priority : UInt32
    @lpVtbl.value.get_eviction_priority.unsafe_as(Proc(UInt32)).call
  end
  def map(subresource : UInt32, maptype : D3D10_MAP, mapflags : UInt32, pmappedtex2d : D3D10_MAPPED_TEXTURE2D*) : HRESULT
    @lpVtbl.value.map.unsafe_as(Proc(UInt32, D3D10_MAP, UInt32, D3D10_MAPPED_TEXTURE2D*, HRESULT)).call(subresource, maptype, mapflags, pmappedtex2d)
  end
  def unmap(subresource : UInt32) : Void
    @lpVtbl.value.unmap.unsafe_as(Proc(UInt32, Void)).call(subresource)
  end
  def get_desc(pdesc : D3D10_TEXTURE2D_DESC*) : Void
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_TEXTURE2D_DESC*, Void)).call(pdesc)
  end
end
struct LibWin32::ID3D10Texture3D
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : ID3D10Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID3D10Device*, Void)).call(ppdevice)
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def get_type(rtype : D3D10_RESOURCE_DIMENSION*) : Void
    @lpVtbl.value.get_type.unsafe_as(Proc(D3D10_RESOURCE_DIMENSION*, Void)).call(rtype)
  end
  def set_eviction_priority(evictionpriority : UInt32) : Void
    @lpVtbl.value.set_eviction_priority.unsafe_as(Proc(UInt32, Void)).call(evictionpriority)
  end
  def get_eviction_priority : UInt32
    @lpVtbl.value.get_eviction_priority.unsafe_as(Proc(UInt32)).call
  end
  def map(subresource : UInt32, maptype : D3D10_MAP, mapflags : UInt32, pmappedtex3d : D3D10_MAPPED_TEXTURE3D*) : HRESULT
    @lpVtbl.value.map.unsafe_as(Proc(UInt32, D3D10_MAP, UInt32, D3D10_MAPPED_TEXTURE3D*, HRESULT)).call(subresource, maptype, mapflags, pmappedtex3d)
  end
  def unmap(subresource : UInt32) : Void
    @lpVtbl.value.unmap.unsafe_as(Proc(UInt32, Void)).call(subresource)
  end
  def get_desc(pdesc : D3D10_TEXTURE3D_DESC*) : Void
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_TEXTURE3D_DESC*, Void)).call(pdesc)
  end
end
struct LibWin32::ID3D10View
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : ID3D10Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID3D10Device*, Void)).call(ppdevice)
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def get_resource(ppresource : ID3D10Resource*) : Void
    @lpVtbl.value.get_resource.unsafe_as(Proc(ID3D10Resource*, Void)).call(ppresource)
  end
end
struct LibWin32::ID3D10ShaderResourceView
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : ID3D10Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID3D10Device*, Void)).call(ppdevice)
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def get_resource(ppresource : ID3D10Resource*) : Void
    @lpVtbl.value.get_resource.unsafe_as(Proc(ID3D10Resource*, Void)).call(ppresource)
  end
  def get_desc(pdesc : D3D10_SHADER_RESOURCE_VIEW_DESC*) : Void
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_SHADER_RESOURCE_VIEW_DESC*, Void)).call(pdesc)
  end
end
struct LibWin32::ID3D10RenderTargetView
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : ID3D10Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID3D10Device*, Void)).call(ppdevice)
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def get_resource(ppresource : ID3D10Resource*) : Void
    @lpVtbl.value.get_resource.unsafe_as(Proc(ID3D10Resource*, Void)).call(ppresource)
  end
  def get_desc(pdesc : D3D10_RENDER_TARGET_VIEW_DESC*) : Void
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_RENDER_TARGET_VIEW_DESC*, Void)).call(pdesc)
  end
end
struct LibWin32::ID3D10DepthStencilView
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : ID3D10Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID3D10Device*, Void)).call(ppdevice)
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def get_resource(ppresource : ID3D10Resource*) : Void
    @lpVtbl.value.get_resource.unsafe_as(Proc(ID3D10Resource*, Void)).call(ppresource)
  end
  def get_desc(pdesc : D3D10_DEPTH_STENCIL_VIEW_DESC*) : Void
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_DEPTH_STENCIL_VIEW_DESC*, Void)).call(pdesc)
  end
end
struct LibWin32::ID3D10VertexShader
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : ID3D10Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID3D10Device*, Void)).call(ppdevice)
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
end
struct LibWin32::ID3D10GeometryShader
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : ID3D10Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID3D10Device*, Void)).call(ppdevice)
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
end
struct LibWin32::ID3D10PixelShader
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : ID3D10Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID3D10Device*, Void)).call(ppdevice)
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
end
struct LibWin32::ID3D10InputLayout
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : ID3D10Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID3D10Device*, Void)).call(ppdevice)
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
end
struct LibWin32::ID3D10SamplerState
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : ID3D10Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID3D10Device*, Void)).call(ppdevice)
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def get_desc(pdesc : D3D10_SAMPLER_DESC*) : Void
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_SAMPLER_DESC*, Void)).call(pdesc)
  end
end
struct LibWin32::ID3D10Asynchronous
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : ID3D10Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID3D10Device*, Void)).call(ppdevice)
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def begin_ : Void
    @lpVtbl.value.begin_.unsafe_as(Proc(Void)).call
  end
  def end_ : Void
    @lpVtbl.value.end_.unsafe_as(Proc(Void)).call
  end
  def get_data(pdata : Void*, datasize : UInt32, getdataflags : UInt32) : HRESULT
    @lpVtbl.value.get_data.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, datasize, getdataflags)
  end
  def get_data_size : UInt32
    @lpVtbl.value.get_data_size.unsafe_as(Proc(UInt32)).call
  end
end
struct LibWin32::ID3D10Query
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : ID3D10Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID3D10Device*, Void)).call(ppdevice)
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def begin_ : Void
    @lpVtbl.value.begin_.unsafe_as(Proc(Void)).call
  end
  def end_ : Void
    @lpVtbl.value.end_.unsafe_as(Proc(Void)).call
  end
  def get_data(pdata : Void*, datasize : UInt32, getdataflags : UInt32) : HRESULT
    @lpVtbl.value.get_data.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, datasize, getdataflags)
  end
  def get_data_size : UInt32
    @lpVtbl.value.get_data_size.unsafe_as(Proc(UInt32)).call
  end
  def get_desc(pdesc : D3D10_QUERY_DESC*) : Void
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_QUERY_DESC*, Void)).call(pdesc)
  end
end
struct LibWin32::ID3D10Predicate
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : ID3D10Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID3D10Device*, Void)).call(ppdevice)
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def begin_ : Void
    @lpVtbl.value.begin_.unsafe_as(Proc(Void)).call
  end
  def end_ : Void
    @lpVtbl.value.end_.unsafe_as(Proc(Void)).call
  end
  def get_data(pdata : Void*, datasize : UInt32, getdataflags : UInt32) : HRESULT
    @lpVtbl.value.get_data.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, datasize, getdataflags)
  end
  def get_data_size : UInt32
    @lpVtbl.value.get_data_size.unsafe_as(Proc(UInt32)).call
  end
  def get_desc(pdesc : D3D10_QUERY_DESC*) : Void
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_QUERY_DESC*, Void)).call(pdesc)
  end
end
struct LibWin32::ID3D10Counter
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : ID3D10Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID3D10Device*, Void)).call(ppdevice)
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def begin_ : Void
    @lpVtbl.value.begin_.unsafe_as(Proc(Void)).call
  end
  def end_ : Void
    @lpVtbl.value.end_.unsafe_as(Proc(Void)).call
  end
  def get_data(pdata : Void*, datasize : UInt32, getdataflags : UInt32) : HRESULT
    @lpVtbl.value.get_data.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, datasize, getdataflags)
  end
  def get_data_size : UInt32
    @lpVtbl.value.get_data_size.unsafe_as(Proc(UInt32)).call
  end
  def get_desc(pdesc : D3D10_COUNTER_DESC*) : Void
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_COUNTER_DESC*, Void)).call(pdesc)
  end
end
struct LibWin32::ID3D10Device
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def vs_set_constant_buffers(startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D10Buffer*) : Void
    @lpVtbl.value.vs_set_constant_buffers.unsafe_as(Proc(UInt32, UInt32, ID3D10Buffer*, Void)).call(startslot, numbuffers, ppconstantbuffers)
  end
  def ps_set_shader_resources(startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D10ShaderResourceView*) : Void
    @lpVtbl.value.ps_set_shader_resources.unsafe_as(Proc(UInt32, UInt32, ID3D10ShaderResourceView*, Void)).call(startslot, numviews, ppshaderresourceviews)
  end
  def ps_set_shader(ppixelshader : ID3D10PixelShader) : Void
    @lpVtbl.value.ps_set_shader.unsafe_as(Proc(ID3D10PixelShader, Void)).call(ppixelshader)
  end
  def ps_set_samplers(startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D10SamplerState*) : Void
    @lpVtbl.value.ps_set_samplers.unsafe_as(Proc(UInt32, UInt32, ID3D10SamplerState*, Void)).call(startslot, numsamplers, ppsamplers)
  end
  def vs_set_shader(pvertexshader : ID3D10VertexShader) : Void
    @lpVtbl.value.vs_set_shader.unsafe_as(Proc(ID3D10VertexShader, Void)).call(pvertexshader)
  end
  def draw_indexed(indexcount : UInt32, startindexlocation : UInt32, basevertexlocation : Int32) : Void
    @lpVtbl.value.draw_indexed.unsafe_as(Proc(UInt32, UInt32, Int32, Void)).call(indexcount, startindexlocation, basevertexlocation)
  end
  def draw(vertexcount : UInt32, startvertexlocation : UInt32) : Void
    @lpVtbl.value.draw.unsafe_as(Proc(UInt32, UInt32, Void)).call(vertexcount, startvertexlocation)
  end
  def ps_set_constant_buffers(startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D10Buffer*) : Void
    @lpVtbl.value.ps_set_constant_buffers.unsafe_as(Proc(UInt32, UInt32, ID3D10Buffer*, Void)).call(startslot, numbuffers, ppconstantbuffers)
  end
  def ia_set_input_layout(pinputlayout : ID3D10InputLayout) : Void
    @lpVtbl.value.ia_set_input_layout.unsafe_as(Proc(ID3D10InputLayout, Void)).call(pinputlayout)
  end
  def ia_set_vertex_buffers(startslot : UInt32, numbuffers : UInt32, ppvertexbuffers : ID3D10Buffer*, pstrides : UInt32*, poffsets : UInt32*) : Void
    @lpVtbl.value.ia_set_vertex_buffers.unsafe_as(Proc(UInt32, UInt32, ID3D10Buffer*, UInt32*, UInt32*, Void)).call(startslot, numbuffers, ppvertexbuffers, pstrides, poffsets)
  end
  def ia_set_index_buffer(pindexbuffer : ID3D10Buffer, format : DXGI_FORMAT, offset : UInt32) : Void
    @lpVtbl.value.ia_set_index_buffer.unsafe_as(Proc(ID3D10Buffer, DXGI_FORMAT, UInt32, Void)).call(pindexbuffer, format, offset)
  end
  def draw_indexed_instanced(indexcountperinstance : UInt32, instancecount : UInt32, startindexlocation : UInt32, basevertexlocation : Int32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_indexed_instanced.unsafe_as(Proc(UInt32, UInt32, UInt32, Int32, UInt32, Void)).call(indexcountperinstance, instancecount, startindexlocation, basevertexlocation, startinstancelocation)
  end
  def draw_instanced(vertexcountperinstance : UInt32, instancecount : UInt32, startvertexlocation : UInt32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_instanced.unsafe_as(Proc(UInt32, UInt32, UInt32, UInt32, Void)).call(vertexcountperinstance, instancecount, startvertexlocation, startinstancelocation)
  end
  def gs_set_constant_buffers(startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D10Buffer*) : Void
    @lpVtbl.value.gs_set_constant_buffers.unsafe_as(Proc(UInt32, UInt32, ID3D10Buffer*, Void)).call(startslot, numbuffers, ppconstantbuffers)
  end
  def gs_set_shader(pshader : ID3D10GeometryShader) : Void
    @lpVtbl.value.gs_set_shader.unsafe_as(Proc(ID3D10GeometryShader, Void)).call(pshader)
  end
  def ia_set_primitive_topology(topology : D3D_PRIMITIVE_TOPOLOGY) : Void
    @lpVtbl.value.ia_set_primitive_topology.unsafe_as(Proc(D3D_PRIMITIVE_TOPOLOGY, Void)).call(topology)
  end
  def vs_set_shader_resources(startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D10ShaderResourceView*) : Void
    @lpVtbl.value.vs_set_shader_resources.unsafe_as(Proc(UInt32, UInt32, ID3D10ShaderResourceView*, Void)).call(startslot, numviews, ppshaderresourceviews)
  end
  def vs_set_samplers(startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D10SamplerState*) : Void
    @lpVtbl.value.vs_set_samplers.unsafe_as(Proc(UInt32, UInt32, ID3D10SamplerState*, Void)).call(startslot, numsamplers, ppsamplers)
  end
  def set_predication(ppredicate : ID3D10Predicate, predicatevalue : LibC::BOOL) : Void
    @lpVtbl.value.set_predication.unsafe_as(Proc(ID3D10Predicate, LibC::BOOL, Void)).call(ppredicate, predicatevalue)
  end
  def gs_set_shader_resources(startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D10ShaderResourceView*) : Void
    @lpVtbl.value.gs_set_shader_resources.unsafe_as(Proc(UInt32, UInt32, ID3D10ShaderResourceView*, Void)).call(startslot, numviews, ppshaderresourceviews)
  end
  def gs_set_samplers(startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D10SamplerState*) : Void
    @lpVtbl.value.gs_set_samplers.unsafe_as(Proc(UInt32, UInt32, ID3D10SamplerState*, Void)).call(startslot, numsamplers, ppsamplers)
  end
  def om_set_render_targets(numviews : UInt32, pprendertargetviews : ID3D10RenderTargetView*, pdepthstencilview : ID3D10DepthStencilView) : Void
    @lpVtbl.value.om_set_render_targets.unsafe_as(Proc(UInt32, ID3D10RenderTargetView*, ID3D10DepthStencilView, Void)).call(numviews, pprendertargetviews, pdepthstencilview)
  end
  def om_set_blend_state(pblendstate : ID3D10BlendState, blendfactor : Float32*, samplemask : UInt32) : Void
    @lpVtbl.value.om_set_blend_state.unsafe_as(Proc(ID3D10BlendState, Float32*, UInt32, Void)).call(pblendstate, blendfactor, samplemask)
  end
  def om_set_depth_stencil_state(pdepthstencilstate : ID3D10DepthStencilState, stencilref : UInt32) : Void
    @lpVtbl.value.om_set_depth_stencil_state.unsafe_as(Proc(ID3D10DepthStencilState, UInt32, Void)).call(pdepthstencilstate, stencilref)
  end
  def so_set_targets(numbuffers : UInt32, ppsotargets : ID3D10Buffer*, poffsets : UInt32*) : Void
    @lpVtbl.value.so_set_targets.unsafe_as(Proc(UInt32, ID3D10Buffer*, UInt32*, Void)).call(numbuffers, ppsotargets, poffsets)
  end
  def draw_auto : Void
    @lpVtbl.value.draw_auto.unsafe_as(Proc(Void)).call
  end
  def rs_set_state(prasterizerstate : ID3D10RasterizerState) : Void
    @lpVtbl.value.rs_set_state.unsafe_as(Proc(ID3D10RasterizerState, Void)).call(prasterizerstate)
  end
  def rs_set_viewports(numviewports : UInt32, pviewports : D3D10_VIEWPORT*) : Void
    @lpVtbl.value.rs_set_viewports.unsafe_as(Proc(UInt32, D3D10_VIEWPORT*, Void)).call(numviewports, pviewports)
  end
  def rs_set_scissor_rects(numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.rs_set_scissor_rects.unsafe_as(Proc(UInt32, RECT*, Void)).call(numrects, prects)
  end
  def copy_subresource_region(pdstresource : ID3D10Resource, dstsubresource : UInt32, dstx : UInt32, dsty : UInt32, dstz : UInt32, psrcresource : ID3D10Resource, srcsubresource : UInt32, psrcbox : D3D10_BOX*) : Void
    @lpVtbl.value.copy_subresource_region.unsafe_as(Proc(ID3D10Resource, UInt32, UInt32, UInt32, UInt32, ID3D10Resource, UInt32, D3D10_BOX*, Void)).call(pdstresource, dstsubresource, dstx, dsty, dstz, psrcresource, srcsubresource, psrcbox)
  end
  def copy_resource(pdstresource : ID3D10Resource, psrcresource : ID3D10Resource) : Void
    @lpVtbl.value.copy_resource.unsafe_as(Proc(ID3D10Resource, ID3D10Resource, Void)).call(pdstresource, psrcresource)
  end
  def update_subresource(pdstresource : ID3D10Resource, dstsubresource : UInt32, pdstbox : D3D10_BOX*, psrcdata : Void*, srcrowpitch : UInt32, srcdepthpitch : UInt32) : Void
    @lpVtbl.value.update_subresource.unsafe_as(Proc(ID3D10Resource, UInt32, D3D10_BOX*, Void*, UInt32, UInt32, Void)).call(pdstresource, dstsubresource, pdstbox, psrcdata, srcrowpitch, srcdepthpitch)
  end
  def clear_render_target_view(prendertargetview : ID3D10RenderTargetView, colorrgba : Float32*) : Void
    @lpVtbl.value.clear_render_target_view.unsafe_as(Proc(ID3D10RenderTargetView, Float32*, Void)).call(prendertargetview, colorrgba)
  end
  def clear_depth_stencil_view(pdepthstencilview : ID3D10DepthStencilView, clearflags : UInt32, depth : Float32, stencil : UInt8) : Void
    @lpVtbl.value.clear_depth_stencil_view.unsafe_as(Proc(ID3D10DepthStencilView, UInt32, Float32, UInt8, Void)).call(pdepthstencilview, clearflags, depth, stencil)
  end
  def generate_mips(pshaderresourceview : ID3D10ShaderResourceView) : Void
    @lpVtbl.value.generate_mips.unsafe_as(Proc(ID3D10ShaderResourceView, Void)).call(pshaderresourceview)
  end
  def resolve_subresource(pdstresource : ID3D10Resource, dstsubresource : UInt32, psrcresource : ID3D10Resource, srcsubresource : UInt32, format : DXGI_FORMAT) : Void
    @lpVtbl.value.resolve_subresource.unsafe_as(Proc(ID3D10Resource, UInt32, ID3D10Resource, UInt32, DXGI_FORMAT, Void)).call(pdstresource, dstsubresource, psrcresource, srcsubresource, format)
  end
  def vs_get_constant_buffers(startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D10Buffer*) : Void
    @lpVtbl.value.vs_get_constant_buffers.unsafe_as(Proc(UInt32, UInt32, ID3D10Buffer*, Void)).call(startslot, numbuffers, ppconstantbuffers)
  end
  def ps_get_shader_resources(startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D10ShaderResourceView*) : Void
    @lpVtbl.value.ps_get_shader_resources.unsafe_as(Proc(UInt32, UInt32, ID3D10ShaderResourceView*, Void)).call(startslot, numviews, ppshaderresourceviews)
  end
  def ps_get_shader(pppixelshader : ID3D10PixelShader*) : Void
    @lpVtbl.value.ps_get_shader.unsafe_as(Proc(ID3D10PixelShader*, Void)).call(pppixelshader)
  end
  def ps_get_samplers(startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D10SamplerState*) : Void
    @lpVtbl.value.ps_get_samplers.unsafe_as(Proc(UInt32, UInt32, ID3D10SamplerState*, Void)).call(startslot, numsamplers, ppsamplers)
  end
  def vs_get_shader(ppvertexshader : ID3D10VertexShader*) : Void
    @lpVtbl.value.vs_get_shader.unsafe_as(Proc(ID3D10VertexShader*, Void)).call(ppvertexshader)
  end
  def ps_get_constant_buffers(startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D10Buffer*) : Void
    @lpVtbl.value.ps_get_constant_buffers.unsafe_as(Proc(UInt32, UInt32, ID3D10Buffer*, Void)).call(startslot, numbuffers, ppconstantbuffers)
  end
  def ia_get_input_layout(ppinputlayout : ID3D10InputLayout*) : Void
    @lpVtbl.value.ia_get_input_layout.unsafe_as(Proc(ID3D10InputLayout*, Void)).call(ppinputlayout)
  end
  def ia_get_vertex_buffers(startslot : UInt32, numbuffers : UInt32, ppvertexbuffers : ID3D10Buffer*, pstrides : UInt32*, poffsets : UInt32*) : Void
    @lpVtbl.value.ia_get_vertex_buffers.unsafe_as(Proc(UInt32, UInt32, ID3D10Buffer*, UInt32*, UInt32*, Void)).call(startslot, numbuffers, ppvertexbuffers, pstrides, poffsets)
  end
  def ia_get_index_buffer(pindexbuffer : ID3D10Buffer*, format : DXGI_FORMAT*, offset : UInt32*) : Void
    @lpVtbl.value.ia_get_index_buffer.unsafe_as(Proc(ID3D10Buffer*, DXGI_FORMAT*, UInt32*, Void)).call(pindexbuffer, format, offset)
  end
  def gs_get_constant_buffers(startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D10Buffer*) : Void
    @lpVtbl.value.gs_get_constant_buffers.unsafe_as(Proc(UInt32, UInt32, ID3D10Buffer*, Void)).call(startslot, numbuffers, ppconstantbuffers)
  end
  def gs_get_shader(ppgeometryshader : ID3D10GeometryShader*) : Void
    @lpVtbl.value.gs_get_shader.unsafe_as(Proc(ID3D10GeometryShader*, Void)).call(ppgeometryshader)
  end
  def ia_get_primitive_topology(ptopology : D3D_PRIMITIVE_TOPOLOGY*) : Void
    @lpVtbl.value.ia_get_primitive_topology.unsafe_as(Proc(D3D_PRIMITIVE_TOPOLOGY*, Void)).call(ptopology)
  end
  def vs_get_shader_resources(startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D10ShaderResourceView*) : Void
    @lpVtbl.value.vs_get_shader_resources.unsafe_as(Proc(UInt32, UInt32, ID3D10ShaderResourceView*, Void)).call(startslot, numviews, ppshaderresourceviews)
  end
  def vs_get_samplers(startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D10SamplerState*) : Void
    @lpVtbl.value.vs_get_samplers.unsafe_as(Proc(UInt32, UInt32, ID3D10SamplerState*, Void)).call(startslot, numsamplers, ppsamplers)
  end
  def get_predication(pppredicate : ID3D10Predicate*, ppredicatevalue : LibC::BOOL*) : Void
    @lpVtbl.value.get_predication.unsafe_as(Proc(ID3D10Predicate*, LibC::BOOL*, Void)).call(pppredicate, ppredicatevalue)
  end
  def gs_get_shader_resources(startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D10ShaderResourceView*) : Void
    @lpVtbl.value.gs_get_shader_resources.unsafe_as(Proc(UInt32, UInt32, ID3D10ShaderResourceView*, Void)).call(startslot, numviews, ppshaderresourceviews)
  end
  def gs_get_samplers(startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D10SamplerState*) : Void
    @lpVtbl.value.gs_get_samplers.unsafe_as(Proc(UInt32, UInt32, ID3D10SamplerState*, Void)).call(startslot, numsamplers, ppsamplers)
  end
  def om_get_render_targets(numviews : UInt32, pprendertargetviews : ID3D10RenderTargetView*, ppdepthstencilview : ID3D10DepthStencilView*) : Void
    @lpVtbl.value.om_get_render_targets.unsafe_as(Proc(UInt32, ID3D10RenderTargetView*, ID3D10DepthStencilView*, Void)).call(numviews, pprendertargetviews, ppdepthstencilview)
  end
  def om_get_blend_state(ppblendstate : ID3D10BlendState*, blendfactor : Float32*, psamplemask : UInt32*) : Void
    @lpVtbl.value.om_get_blend_state.unsafe_as(Proc(ID3D10BlendState*, Float32*, UInt32*, Void)).call(ppblendstate, blendfactor, psamplemask)
  end
  def om_get_depth_stencil_state(ppdepthstencilstate : ID3D10DepthStencilState*, pstencilref : UInt32*) : Void
    @lpVtbl.value.om_get_depth_stencil_state.unsafe_as(Proc(ID3D10DepthStencilState*, UInt32*, Void)).call(ppdepthstencilstate, pstencilref)
  end
  def so_get_targets(numbuffers : UInt32, ppsotargets : ID3D10Buffer*, poffsets : UInt32*) : Void
    @lpVtbl.value.so_get_targets.unsafe_as(Proc(UInt32, ID3D10Buffer*, UInt32*, Void)).call(numbuffers, ppsotargets, poffsets)
  end
  def rs_get_state(pprasterizerstate : ID3D10RasterizerState*) : Void
    @lpVtbl.value.rs_get_state.unsafe_as(Proc(ID3D10RasterizerState*, Void)).call(pprasterizerstate)
  end
  def rs_get_viewports(numviewports : UInt32*, pviewports : D3D10_VIEWPORT*) : Void
    @lpVtbl.value.rs_get_viewports.unsafe_as(Proc(UInt32*, D3D10_VIEWPORT*, Void)).call(numviewports, pviewports)
  end
  def rs_get_scissor_rects(numrects : UInt32*, prects : RECT*) : Void
    @lpVtbl.value.rs_get_scissor_rects.unsafe_as(Proc(UInt32*, RECT*, Void)).call(numrects, prects)
  end
  def get_device_removed_reason : HRESULT
    @lpVtbl.value.get_device_removed_reason.unsafe_as(Proc(HRESULT)).call
  end
  def set_exception_mode(raiseflags : UInt32) : HRESULT
    @lpVtbl.value.set_exception_mode.unsafe_as(Proc(UInt32, HRESULT)).call(raiseflags)
  end
  def get_exception_mode : UInt32
    @lpVtbl.value.get_exception_mode.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def clear_state : Void
    @lpVtbl.value.clear_state.unsafe_as(Proc(Void)).call
  end
  def flush : Void
    @lpVtbl.value.flush.unsafe_as(Proc(Void)).call
  end
  def create_buffer(pdesc : D3D10_BUFFER_DESC*, pinitialdata : D3D10_SUBRESOURCE_DATA*, ppbuffer : ID3D10Buffer*) : HRESULT
    @lpVtbl.value.create_buffer.unsafe_as(Proc(D3D10_BUFFER_DESC*, D3D10_SUBRESOURCE_DATA*, ID3D10Buffer*, HRESULT)).call(pdesc, pinitialdata, ppbuffer)
  end
  def create_texture1_d(pdesc : D3D10_TEXTURE1D_DESC*, pinitialdata : D3D10_SUBRESOURCE_DATA*, pptexture1d : ID3D10Texture1D*) : HRESULT
    @lpVtbl.value.create_texture1_d.unsafe_as(Proc(D3D10_TEXTURE1D_DESC*, D3D10_SUBRESOURCE_DATA*, ID3D10Texture1D*, HRESULT)).call(pdesc, pinitialdata, pptexture1d)
  end
  def create_texture2_d(pdesc : D3D10_TEXTURE2D_DESC*, pinitialdata : D3D10_SUBRESOURCE_DATA*, pptexture2d : ID3D10Texture2D*) : HRESULT
    @lpVtbl.value.create_texture2_d.unsafe_as(Proc(D3D10_TEXTURE2D_DESC*, D3D10_SUBRESOURCE_DATA*, ID3D10Texture2D*, HRESULT)).call(pdesc, pinitialdata, pptexture2d)
  end
  def create_texture3_d(pdesc : D3D10_TEXTURE3D_DESC*, pinitialdata : D3D10_SUBRESOURCE_DATA*, pptexture3d : ID3D10Texture3D*) : HRESULT
    @lpVtbl.value.create_texture3_d.unsafe_as(Proc(D3D10_TEXTURE3D_DESC*, D3D10_SUBRESOURCE_DATA*, ID3D10Texture3D*, HRESULT)).call(pdesc, pinitialdata, pptexture3d)
  end
  def create_shader_resource_view(presource : ID3D10Resource, pdesc : D3D10_SHADER_RESOURCE_VIEW_DESC*, ppsrview : ID3D10ShaderResourceView*) : HRESULT
    @lpVtbl.value.create_shader_resource_view.unsafe_as(Proc(ID3D10Resource, D3D10_SHADER_RESOURCE_VIEW_DESC*, ID3D10ShaderResourceView*, HRESULT)).call(presource, pdesc, ppsrview)
  end
  def create_render_target_view(presource : ID3D10Resource, pdesc : D3D10_RENDER_TARGET_VIEW_DESC*, pprtview : ID3D10RenderTargetView*) : HRESULT
    @lpVtbl.value.create_render_target_view.unsafe_as(Proc(ID3D10Resource, D3D10_RENDER_TARGET_VIEW_DESC*, ID3D10RenderTargetView*, HRESULT)).call(presource, pdesc, pprtview)
  end
  def create_depth_stencil_view(presource : ID3D10Resource, pdesc : D3D10_DEPTH_STENCIL_VIEW_DESC*, ppdepthstencilview : ID3D10DepthStencilView*) : HRESULT
    @lpVtbl.value.create_depth_stencil_view.unsafe_as(Proc(ID3D10Resource, D3D10_DEPTH_STENCIL_VIEW_DESC*, ID3D10DepthStencilView*, HRESULT)).call(presource, pdesc, ppdepthstencilview)
  end
  def create_input_layout(pinputelementdescs : D3D10_INPUT_ELEMENT_DESC*, numelements : UInt32, pshaderbytecodewithinputsignature : Void*, bytecodelength : LibC::UINT_PTR, ppinputlayout : ID3D10InputLayout*) : HRESULT
    @lpVtbl.value.create_input_layout.unsafe_as(Proc(D3D10_INPUT_ELEMENT_DESC*, UInt32, Void*, LibC::UINT_PTR, ID3D10InputLayout*, HRESULT)).call(pinputelementdescs, numelements, pshaderbytecodewithinputsignature, bytecodelength, ppinputlayout)
  end
  def create_vertex_shader(pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, ppvertexshader : ID3D10VertexShader*) : HRESULT
    @lpVtbl.value.create_vertex_shader.unsafe_as(Proc(Void*, LibC::UINT_PTR, ID3D10VertexShader*, HRESULT)).call(pshaderbytecode, bytecodelength, ppvertexshader)
  end
  def create_geometry_shader(pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, ppgeometryshader : ID3D10GeometryShader*) : HRESULT
    @lpVtbl.value.create_geometry_shader.unsafe_as(Proc(Void*, LibC::UINT_PTR, ID3D10GeometryShader*, HRESULT)).call(pshaderbytecode, bytecodelength, ppgeometryshader)
  end
  def create_geometry_shader_with_stream_output(pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, psodeclaration : D3D10_SO_DECLARATION_ENTRY*, numentries : UInt32, outputstreamstride : UInt32, ppgeometryshader : ID3D10GeometryShader*) : HRESULT
    @lpVtbl.value.create_geometry_shader_with_stream_output.unsafe_as(Proc(Void*, LibC::UINT_PTR, D3D10_SO_DECLARATION_ENTRY*, UInt32, UInt32, ID3D10GeometryShader*, HRESULT)).call(pshaderbytecode, bytecodelength, psodeclaration, numentries, outputstreamstride, ppgeometryshader)
  end
  def create_pixel_shader(pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pppixelshader : ID3D10PixelShader*) : HRESULT
    @lpVtbl.value.create_pixel_shader.unsafe_as(Proc(Void*, LibC::UINT_PTR, ID3D10PixelShader*, HRESULT)).call(pshaderbytecode, bytecodelength, pppixelshader)
  end
  def create_blend_state(pblendstatedesc : D3D10_BLEND_DESC*, ppblendstate : ID3D10BlendState*) : HRESULT
    @lpVtbl.value.create_blend_state.unsafe_as(Proc(D3D10_BLEND_DESC*, ID3D10BlendState*, HRESULT)).call(pblendstatedesc, ppblendstate)
  end
  def create_depth_stencil_state(pdepthstencildesc : D3D10_DEPTH_STENCIL_DESC*, ppdepthstencilstate : ID3D10DepthStencilState*) : HRESULT
    @lpVtbl.value.create_depth_stencil_state.unsafe_as(Proc(D3D10_DEPTH_STENCIL_DESC*, ID3D10DepthStencilState*, HRESULT)).call(pdepthstencildesc, ppdepthstencilstate)
  end
  def create_rasterizer_state(prasterizerdesc : D3D10_RASTERIZER_DESC*, pprasterizerstate : ID3D10RasterizerState*) : HRESULT
    @lpVtbl.value.create_rasterizer_state.unsafe_as(Proc(D3D10_RASTERIZER_DESC*, ID3D10RasterizerState*, HRESULT)).call(prasterizerdesc, pprasterizerstate)
  end
  def create_sampler_state(psamplerdesc : D3D10_SAMPLER_DESC*, ppsamplerstate : ID3D10SamplerState*) : HRESULT
    @lpVtbl.value.create_sampler_state.unsafe_as(Proc(D3D10_SAMPLER_DESC*, ID3D10SamplerState*, HRESULT)).call(psamplerdesc, ppsamplerstate)
  end
  def create_query(pquerydesc : D3D10_QUERY_DESC*, ppquery : ID3D10Query*) : HRESULT
    @lpVtbl.value.create_query.unsafe_as(Proc(D3D10_QUERY_DESC*, ID3D10Query*, HRESULT)).call(pquerydesc, ppquery)
  end
  def create_predicate(ppredicatedesc : D3D10_QUERY_DESC*, pppredicate : ID3D10Predicate*) : HRESULT
    @lpVtbl.value.create_predicate.unsafe_as(Proc(D3D10_QUERY_DESC*, ID3D10Predicate*, HRESULT)).call(ppredicatedesc, pppredicate)
  end
  def create_counter(pcounterdesc : D3D10_COUNTER_DESC*, ppcounter : ID3D10Counter*) : HRESULT
    @lpVtbl.value.create_counter.unsafe_as(Proc(D3D10_COUNTER_DESC*, ID3D10Counter*, HRESULT)).call(pcounterdesc, ppcounter)
  end
  def check_format_support(format : DXGI_FORMAT, pformatsupport : UInt32*) : HRESULT
    @lpVtbl.value.check_format_support.unsafe_as(Proc(DXGI_FORMAT, UInt32*, HRESULT)).call(format, pformatsupport)
  end
  def check_multisample_quality_levels(format : DXGI_FORMAT, samplecount : UInt32, pnumqualitylevels : UInt32*) : HRESULT
    @lpVtbl.value.check_multisample_quality_levels.unsafe_as(Proc(DXGI_FORMAT, UInt32, UInt32*, HRESULT)).call(format, samplecount, pnumqualitylevels)
  end
  def check_counter_info(pcounterinfo : D3D10_COUNTER_INFO*) : Void
    @lpVtbl.value.check_counter_info.unsafe_as(Proc(D3D10_COUNTER_INFO*, Void)).call(pcounterinfo)
  end
  def check_counter(pdesc : D3D10_COUNTER_DESC*, ptype : D3D10_COUNTER_TYPE*, pactivecounters : UInt32*, szname : UInt8*, pnamelength : UInt32*, szunits : UInt8*, punitslength : UInt32*, szdescription : UInt8*, pdescriptionlength : UInt32*) : HRESULT
    @lpVtbl.value.check_counter.unsafe_as(Proc(D3D10_COUNTER_DESC*, D3D10_COUNTER_TYPE*, UInt32*, UInt8*, UInt32*, UInt8*, UInt32*, UInt8*, UInt32*, HRESULT)).call(pdesc, ptype, pactivecounters, szname, pnamelength, szunits, punitslength, szdescription, pdescriptionlength)
  end
  def get_creation_flags : UInt32
    @lpVtbl.value.get_creation_flags.unsafe_as(Proc(UInt32)).call
  end
  def open_shared_resource(hresource : LibC::HANDLE, returnedinterface : Guid*, ppresource : Void**) : HRESULT
    @lpVtbl.value.open_shared_resource.unsafe_as(Proc(LibC::HANDLE, Guid*, Void**, HRESULT)).call(hresource, returnedinterface, ppresource)
  end
  def set_text_filter_size(width : UInt32, height : UInt32) : Void
    @lpVtbl.value.set_text_filter_size.unsafe_as(Proc(UInt32, UInt32, Void)).call(width, height)
  end
  def get_text_filter_size(pwidth : UInt32*, pheight : UInt32*) : Void
    @lpVtbl.value.get_text_filter_size.unsafe_as(Proc(UInt32*, UInt32*, Void)).call(pwidth, pheight)
  end
end
struct LibWin32::ID3D10Multithread
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def enter : Void
    @lpVtbl.value.enter.unsafe_as(Proc(Void)).call
  end
  def leave : Void
    @lpVtbl.value.leave.unsafe_as(Proc(Void)).call
  end
  def set_multithread_protected(bmtprotect : LibC::BOOL) : LibC::BOOL
    @lpVtbl.value.set_multithread_protected.unsafe_as(Proc(LibC::BOOL, LibC::BOOL)).call(bmtprotect)
  end
  def get_multithread_protected : LibC::BOOL
    @lpVtbl.value.get_multithread_protected.unsafe_as(Proc(LibC::BOOL)).call
  end
end
struct LibWin32::ID3D10Debug
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_feature_mask(mask : UInt32) : HRESULT
    @lpVtbl.value.set_feature_mask.unsafe_as(Proc(UInt32, HRESULT)).call(mask)
  end
  def get_feature_mask : UInt32
    @lpVtbl.value.get_feature_mask.unsafe_as(Proc(UInt32)).call
  end
  def set_present_per_render_op_delay(milliseconds : UInt32) : HRESULT
    @lpVtbl.value.set_present_per_render_op_delay.unsafe_as(Proc(UInt32, HRESULT)).call(milliseconds)
  end
  def get_present_per_render_op_delay : UInt32
    @lpVtbl.value.get_present_per_render_op_delay.unsafe_as(Proc(UInt32)).call
  end
  def set_swap_chain(pswapchain : IDXGISwapChain) : HRESULT
    @lpVtbl.value.set_swap_chain.unsafe_as(Proc(IDXGISwapChain, HRESULT)).call(pswapchain)
  end
  def get_swap_chain(ppswapchain : IDXGISwapChain*) : HRESULT
    @lpVtbl.value.get_swap_chain.unsafe_as(Proc(IDXGISwapChain*, HRESULT)).call(ppswapchain)
  end
  def validate : HRESULT
    @lpVtbl.value.validate.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::ID3D10SwitchToRef
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_use_ref(useref : LibC::BOOL) : LibC::BOOL
    @lpVtbl.value.set_use_ref.unsafe_as(Proc(LibC::BOOL, LibC::BOOL)).call(useref)
  end
  def get_use_ref : LibC::BOOL
    @lpVtbl.value.get_use_ref.unsafe_as(Proc(LibC::BOOL)).call
  end
end
struct LibWin32::ID3D10InfoQueue
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def set_message_count_limit(messagecountlimit : UInt64) : HRESULT
    @lpVtbl.value.set_message_count_limit.unsafe_as(Proc(UInt64, HRESULT)).call(messagecountlimit)
  end
  def clear_stored_messages : Void
    @lpVtbl.value.clear_stored_messages.unsafe_as(Proc(Void)).call
  end
  def get_message(messageindex : UInt64, pmessage : D3D10_MESSAGE*, pmessagebytelength : LibC::UINT_PTR*) : HRESULT
    @lpVtbl.value.get_message.unsafe_as(Proc(UInt64, D3D10_MESSAGE*, LibC::UINT_PTR*, HRESULT)).call(messageindex, pmessage, pmessagebytelength)
  end
  def get_num_messages_allowed_by_storage_filter : UInt64
    @lpVtbl.value.get_num_messages_allowed_by_storage_filter.unsafe_as(Proc(UInt64)).call
  end
  def get_num_messages_denied_by_storage_filter : UInt64
    @lpVtbl.value.get_num_messages_denied_by_storage_filter.unsafe_as(Proc(UInt64)).call
  end
  def get_num_stored_messages : UInt64
    @lpVtbl.value.get_num_stored_messages.unsafe_as(Proc(UInt64)).call
  end
  def get_num_stored_messages_allowed_by_retrieval_filter : UInt64
    @lpVtbl.value.get_num_stored_messages_allowed_by_retrieval_filter.unsafe_as(Proc(UInt64)).call
  end
  def get_num_messages_discarded_by_message_count_limit : UInt64
    @lpVtbl.value.get_num_messages_discarded_by_message_count_limit.unsafe_as(Proc(UInt64)).call
  end
  def get_message_count_limit : UInt64
    @lpVtbl.value.get_message_count_limit.unsafe_as(Proc(UInt64)).call
  end
  def add_storage_filter_entries(pfilter : D3D10_INFO_QUEUE_FILTER*) : HRESULT
    @lpVtbl.value.add_storage_filter_entries.unsafe_as(Proc(D3D10_INFO_QUEUE_FILTER*, HRESULT)).call(pfilter)
  end
  def get_storage_filter(pfilter : D3D10_INFO_QUEUE_FILTER*, pfilterbytelength : LibC::UINT_PTR*) : HRESULT
    @lpVtbl.value.get_storage_filter.unsafe_as(Proc(D3D10_INFO_QUEUE_FILTER*, LibC::UINT_PTR*, HRESULT)).call(pfilter, pfilterbytelength)
  end
  def clear_storage_filter : Void
    @lpVtbl.value.clear_storage_filter.unsafe_as(Proc(Void)).call
  end
  def push_empty_storage_filter : HRESULT
    @lpVtbl.value.push_empty_storage_filter.unsafe_as(Proc(HRESULT)).call
  end
  def push_copy_of_storage_filter : HRESULT
    @lpVtbl.value.push_copy_of_storage_filter.unsafe_as(Proc(HRESULT)).call
  end
  def push_storage_filter(pfilter : D3D10_INFO_QUEUE_FILTER*) : HRESULT
    @lpVtbl.value.push_storage_filter.unsafe_as(Proc(D3D10_INFO_QUEUE_FILTER*, HRESULT)).call(pfilter)
  end
  def pop_storage_filter : Void
    @lpVtbl.value.pop_storage_filter.unsafe_as(Proc(Void)).call
  end
  def get_storage_filter_stack_size : UInt32
    @lpVtbl.value.get_storage_filter_stack_size.unsafe_as(Proc(UInt32)).call
  end
  def add_retrieval_filter_entries(pfilter : D3D10_INFO_QUEUE_FILTER*) : HRESULT
    @lpVtbl.value.add_retrieval_filter_entries.unsafe_as(Proc(D3D10_INFO_QUEUE_FILTER*, HRESULT)).call(pfilter)
  end
  def get_retrieval_filter(pfilter : D3D10_INFO_QUEUE_FILTER*, pfilterbytelength : LibC::UINT_PTR*) : HRESULT
    @lpVtbl.value.get_retrieval_filter.unsafe_as(Proc(D3D10_INFO_QUEUE_FILTER*, LibC::UINT_PTR*, HRESULT)).call(pfilter, pfilterbytelength)
  end
  def clear_retrieval_filter : Void
    @lpVtbl.value.clear_retrieval_filter.unsafe_as(Proc(Void)).call
  end
  def push_empty_retrieval_filter : HRESULT
    @lpVtbl.value.push_empty_retrieval_filter.unsafe_as(Proc(HRESULT)).call
  end
  def push_copy_of_retrieval_filter : HRESULT
    @lpVtbl.value.push_copy_of_retrieval_filter.unsafe_as(Proc(HRESULT)).call
  end
  def push_retrieval_filter(pfilter : D3D10_INFO_QUEUE_FILTER*) : HRESULT
    @lpVtbl.value.push_retrieval_filter.unsafe_as(Proc(D3D10_INFO_QUEUE_FILTER*, HRESULT)).call(pfilter)
  end
  def pop_retrieval_filter : Void
    @lpVtbl.value.pop_retrieval_filter.unsafe_as(Proc(Void)).call
  end
  def get_retrieval_filter_stack_size : UInt32
    @lpVtbl.value.get_retrieval_filter_stack_size.unsafe_as(Proc(UInt32)).call
  end
  def add_message(category : D3D10_MESSAGE_CATEGORY, severity : D3D10_MESSAGE_SEVERITY, id : D3D10_MESSAGE_ID, pdescription : PSTR) : HRESULT
    @lpVtbl.value.add_message.unsafe_as(Proc(D3D10_MESSAGE_CATEGORY, D3D10_MESSAGE_SEVERITY, D3D10_MESSAGE_ID, PSTR, HRESULT)).call(category, severity, id, pdescription)
  end
  def add_application_message(severity : D3D10_MESSAGE_SEVERITY, pdescription : PSTR) : HRESULT
    @lpVtbl.value.add_application_message.unsafe_as(Proc(D3D10_MESSAGE_SEVERITY, PSTR, HRESULT)).call(severity, pdescription)
  end
  def set_break_on_category(category : D3D10_MESSAGE_CATEGORY, benable : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_break_on_category.unsafe_as(Proc(D3D10_MESSAGE_CATEGORY, LibC::BOOL, HRESULT)).call(category, benable)
  end
  def set_break_on_severity(severity : D3D10_MESSAGE_SEVERITY, benable : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_break_on_severity.unsafe_as(Proc(D3D10_MESSAGE_SEVERITY, LibC::BOOL, HRESULT)).call(severity, benable)
  end
  def set_break_on_id(id : D3D10_MESSAGE_ID, benable : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_break_on_id.unsafe_as(Proc(D3D10_MESSAGE_ID, LibC::BOOL, HRESULT)).call(id, benable)
  end
  def get_break_on_category(category : D3D10_MESSAGE_CATEGORY) : LibC::BOOL
    @lpVtbl.value.get_break_on_category.unsafe_as(Proc(D3D10_MESSAGE_CATEGORY, LibC::BOOL)).call(category)
  end
  def get_break_on_severity(severity : D3D10_MESSAGE_SEVERITY) : LibC::BOOL
    @lpVtbl.value.get_break_on_severity.unsafe_as(Proc(D3D10_MESSAGE_SEVERITY, LibC::BOOL)).call(severity)
  end
  def get_break_on_id(id : D3D10_MESSAGE_ID) : LibC::BOOL
    @lpVtbl.value.get_break_on_id.unsafe_as(Proc(D3D10_MESSAGE_ID, LibC::BOOL)).call(id)
  end
  def set_mute_debug_output(bmute : LibC::BOOL) : Void
    @lpVtbl.value.set_mute_debug_output.unsafe_as(Proc(LibC::BOOL, Void)).call(bmute)
  end
  def get_mute_debug_output : LibC::BOOL
    @lpVtbl.value.get_mute_debug_output.unsafe_as(Proc(LibC::BOOL)).call
  end
end
struct LibWin32::ID3D10ShaderReflectionType
  def get_desc(pdesc : D3D10_SHADER_TYPE_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_SHADER_TYPE_DESC*, HRESULT)).call(pdesc)
  end
  def get_member_type_by_index(index : UInt32) : ID3D10ShaderReflectionType
    @lpVtbl.value.get_member_type_by_index.unsafe_as(Proc(UInt32, ID3D10ShaderReflectionType)).call(index)
  end
  def get_member_type_by_name(name : PSTR) : ID3D10ShaderReflectionType
    @lpVtbl.value.get_member_type_by_name.unsafe_as(Proc(PSTR, ID3D10ShaderReflectionType)).call(name)
  end
  def get_member_type_name(index : UInt32) : PSTR
    @lpVtbl.value.get_member_type_name.unsafe_as(Proc(UInt32, PSTR)).call(index)
  end
end
struct LibWin32::ID3D10ShaderReflectionVariable
  def get_desc(pdesc : D3D10_SHADER_VARIABLE_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_SHADER_VARIABLE_DESC*, HRESULT)).call(pdesc)
  end
  def get_type : ID3D10ShaderReflectionType
    @lpVtbl.value.get_type.unsafe_as(Proc(ID3D10ShaderReflectionType)).call
  end
end
struct LibWin32::ID3D10ShaderReflectionConstantBuffer
  def get_desc(pdesc : D3D10_SHADER_BUFFER_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_SHADER_BUFFER_DESC*, HRESULT)).call(pdesc)
  end
  def get_variable_by_index(index : UInt32) : ID3D10ShaderReflectionVariable
    @lpVtbl.value.get_variable_by_index.unsafe_as(Proc(UInt32, ID3D10ShaderReflectionVariable)).call(index)
  end
  def get_variable_by_name(name : PSTR) : ID3D10ShaderReflectionVariable
    @lpVtbl.value.get_variable_by_name.unsafe_as(Proc(PSTR, ID3D10ShaderReflectionVariable)).call(name)
  end
end
struct LibWin32::ID3D10ShaderReflection
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_desc(pdesc : D3D10_SHADER_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_SHADER_DESC*, HRESULT)).call(pdesc)
  end
  def get_constant_buffer_by_index(index : UInt32) : ID3D10ShaderReflectionConstantBuffer
    @lpVtbl.value.get_constant_buffer_by_index.unsafe_as(Proc(UInt32, ID3D10ShaderReflectionConstantBuffer)).call(index)
  end
  def get_constant_buffer_by_name(name : PSTR) : ID3D10ShaderReflectionConstantBuffer
    @lpVtbl.value.get_constant_buffer_by_name.unsafe_as(Proc(PSTR, ID3D10ShaderReflectionConstantBuffer)).call(name)
  end
  def get_resource_binding_desc(resourceindex : UInt32, pdesc : D3D10_SHADER_INPUT_BIND_DESC*) : HRESULT
    @lpVtbl.value.get_resource_binding_desc.unsafe_as(Proc(UInt32, D3D10_SHADER_INPUT_BIND_DESC*, HRESULT)).call(resourceindex, pdesc)
  end
  def get_input_parameter_desc(parameterindex : UInt32, pdesc : D3D10_SIGNATURE_PARAMETER_DESC*) : HRESULT
    @lpVtbl.value.get_input_parameter_desc.unsafe_as(Proc(UInt32, D3D10_SIGNATURE_PARAMETER_DESC*, HRESULT)).call(parameterindex, pdesc)
  end
  def get_output_parameter_desc(parameterindex : UInt32, pdesc : D3D10_SIGNATURE_PARAMETER_DESC*) : HRESULT
    @lpVtbl.value.get_output_parameter_desc.unsafe_as(Proc(UInt32, D3D10_SIGNATURE_PARAMETER_DESC*, HRESULT)).call(parameterindex, pdesc)
  end
end
struct LibWin32::ID3D10StateBlock
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def capture : HRESULT
    @lpVtbl.value.capture.unsafe_as(Proc(HRESULT)).call
  end
  def apply : HRESULT
    @lpVtbl.value.apply.unsafe_as(Proc(HRESULT)).call
  end
  def release_all_device_objects : HRESULT
    @lpVtbl.value.release_all_device_objects.unsafe_as(Proc(HRESULT)).call
  end
  def get_device(ppdevice : ID3D10Device*) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(ID3D10Device*, HRESULT)).call(ppdevice)
  end
end
struct LibWin32::ID3D10EffectType
  def is_valid : LibC::BOOL
    @lpVtbl.value.is_valid.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_desc(pdesc : D3D10_EFFECT_TYPE_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_EFFECT_TYPE_DESC*, HRESULT)).call(pdesc)
  end
  def get_member_type_by_index(index : UInt32) : ID3D10EffectType
    @lpVtbl.value.get_member_type_by_index.unsafe_as(Proc(UInt32, ID3D10EffectType)).call(index)
  end
  def get_member_type_by_name(name : PSTR) : ID3D10EffectType
    @lpVtbl.value.get_member_type_by_name.unsafe_as(Proc(PSTR, ID3D10EffectType)).call(name)
  end
  def get_member_type_by_semantic(semantic : PSTR) : ID3D10EffectType
    @lpVtbl.value.get_member_type_by_semantic.unsafe_as(Proc(PSTR, ID3D10EffectType)).call(semantic)
  end
  def get_member_name(index : UInt32) : PSTR
    @lpVtbl.value.get_member_name.unsafe_as(Proc(UInt32, PSTR)).call(index)
  end
  def get_member_semantic(index : UInt32) : PSTR
    @lpVtbl.value.get_member_semantic.unsafe_as(Proc(UInt32, PSTR)).call(index)
  end
end
struct LibWin32::ID3D10EffectVariable
  def is_valid : LibC::BOOL
    @lpVtbl.value.is_valid.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_type : ID3D10EffectType
    @lpVtbl.value.get_type.unsafe_as(Proc(ID3D10EffectType)).call
  end
  def get_desc(pdesc : D3D10_EFFECT_VARIABLE_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_EFFECT_VARIABLE_DESC*, HRESULT)).call(pdesc)
  end
  def get_annotation_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_annotation_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_member_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_semantic(semantic : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_semantic.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(semantic)
  end
  def get_element(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_element.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_parent_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.get_parent_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_scalar : ID3D10EffectScalarVariable
    @lpVtbl.value.as_scalar.unsafe_as(Proc(ID3D10EffectScalarVariable)).call
  end
  def as_vector : ID3D10EffectVectorVariable
    @lpVtbl.value.as_vector.unsafe_as(Proc(ID3D10EffectVectorVariable)).call
  end
  def as_matrix : ID3D10EffectMatrixVariable
    @lpVtbl.value.as_matrix.unsafe_as(Proc(ID3D10EffectMatrixVariable)).call
  end
  def as_string : ID3D10EffectStringVariable
    @lpVtbl.value.as_string.unsafe_as(Proc(ID3D10EffectStringVariable)).call
  end
  def as_shader_resource : ID3D10EffectShaderResourceVariable
    @lpVtbl.value.as_shader_resource.unsafe_as(Proc(ID3D10EffectShaderResourceVariable)).call
  end
  def as_render_target_view : ID3D10EffectRenderTargetViewVariable
    @lpVtbl.value.as_render_target_view.unsafe_as(Proc(ID3D10EffectRenderTargetViewVariable)).call
  end
  def as_depth_stencil_view : ID3D10EffectDepthStencilViewVariable
    @lpVtbl.value.as_depth_stencil_view.unsafe_as(Proc(ID3D10EffectDepthStencilViewVariable)).call
  end
  def as_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.as_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_shader : ID3D10EffectShaderVariable
    @lpVtbl.value.as_shader.unsafe_as(Proc(ID3D10EffectShaderVariable)).call
  end
  def as_blend : ID3D10EffectBlendVariable
    @lpVtbl.value.as_blend.unsafe_as(Proc(ID3D10EffectBlendVariable)).call
  end
  def as_depth_stencil : ID3D10EffectDepthStencilVariable
    @lpVtbl.value.as_depth_stencil.unsafe_as(Proc(ID3D10EffectDepthStencilVariable)).call
  end
  def as_rasterizer : ID3D10EffectRasterizerVariable
    @lpVtbl.value.as_rasterizer.unsafe_as(Proc(ID3D10EffectRasterizerVariable)).call
  end
  def as_sampler : ID3D10EffectSamplerVariable
    @lpVtbl.value.as_sampler.unsafe_as(Proc(ID3D10EffectSamplerVariable)).call
  end
  def set_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.set_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
  def get_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.get_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
end
struct LibWin32::ID3D10EffectScalarVariable
  def is_valid : LibC::BOOL
    @lpVtbl.value.is_valid.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_type : ID3D10EffectType
    @lpVtbl.value.get_type.unsafe_as(Proc(ID3D10EffectType)).call
  end
  def get_desc(pdesc : D3D10_EFFECT_VARIABLE_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_EFFECT_VARIABLE_DESC*, HRESULT)).call(pdesc)
  end
  def get_annotation_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_annotation_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_member_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_semantic(semantic : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_semantic.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(semantic)
  end
  def get_element(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_element.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_parent_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.get_parent_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_scalar : ID3D10EffectScalarVariable
    @lpVtbl.value.as_scalar.unsafe_as(Proc(ID3D10EffectScalarVariable)).call
  end
  def as_vector : ID3D10EffectVectorVariable
    @lpVtbl.value.as_vector.unsafe_as(Proc(ID3D10EffectVectorVariable)).call
  end
  def as_matrix : ID3D10EffectMatrixVariable
    @lpVtbl.value.as_matrix.unsafe_as(Proc(ID3D10EffectMatrixVariable)).call
  end
  def as_string : ID3D10EffectStringVariable
    @lpVtbl.value.as_string.unsafe_as(Proc(ID3D10EffectStringVariable)).call
  end
  def as_shader_resource : ID3D10EffectShaderResourceVariable
    @lpVtbl.value.as_shader_resource.unsafe_as(Proc(ID3D10EffectShaderResourceVariable)).call
  end
  def as_render_target_view : ID3D10EffectRenderTargetViewVariable
    @lpVtbl.value.as_render_target_view.unsafe_as(Proc(ID3D10EffectRenderTargetViewVariable)).call
  end
  def as_depth_stencil_view : ID3D10EffectDepthStencilViewVariable
    @lpVtbl.value.as_depth_stencil_view.unsafe_as(Proc(ID3D10EffectDepthStencilViewVariable)).call
  end
  def as_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.as_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_shader : ID3D10EffectShaderVariable
    @lpVtbl.value.as_shader.unsafe_as(Proc(ID3D10EffectShaderVariable)).call
  end
  def as_blend : ID3D10EffectBlendVariable
    @lpVtbl.value.as_blend.unsafe_as(Proc(ID3D10EffectBlendVariable)).call
  end
  def as_depth_stencil : ID3D10EffectDepthStencilVariable
    @lpVtbl.value.as_depth_stencil.unsafe_as(Proc(ID3D10EffectDepthStencilVariable)).call
  end
  def as_rasterizer : ID3D10EffectRasterizerVariable
    @lpVtbl.value.as_rasterizer.unsafe_as(Proc(ID3D10EffectRasterizerVariable)).call
  end
  def as_sampler : ID3D10EffectSamplerVariable
    @lpVtbl.value.as_sampler.unsafe_as(Proc(ID3D10EffectSamplerVariable)).call
  end
  def set_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.set_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
  def get_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.get_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
  def set_float(value : Float32) : HRESULT
    @lpVtbl.value.set_float.unsafe_as(Proc(Float32, HRESULT)).call(value)
  end
  def get_float(pvalue : Float32*) : HRESULT
    @lpVtbl.value.get_float.unsafe_as(Proc(Float32*, HRESULT)).call(pvalue)
  end
  def set_float_array(pdata : Float32*, offset : UInt32, count : UInt32) : HRESULT
    @lpVtbl.value.set_float_array.unsafe_as(Proc(Float32*, UInt32, UInt32, HRESULT)).call(pdata, offset, count)
  end
  def get_float_array(pdata : Float32*, offset : UInt32, count : UInt32) : HRESULT
    @lpVtbl.value.get_float_array.unsafe_as(Proc(Float32*, UInt32, UInt32, HRESULT)).call(pdata, offset, count)
  end
  def set_int(value : Int32) : HRESULT
    @lpVtbl.value.set_int.unsafe_as(Proc(Int32, HRESULT)).call(value)
  end
  def get_int(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_int.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def set_int_array(pdata : Int32*, offset : UInt32, count : UInt32) : HRESULT
    @lpVtbl.value.set_int_array.unsafe_as(Proc(Int32*, UInt32, UInt32, HRESULT)).call(pdata, offset, count)
  end
  def get_int_array(pdata : Int32*, offset : UInt32, count : UInt32) : HRESULT
    @lpVtbl.value.get_int_array.unsafe_as(Proc(Int32*, UInt32, UInt32, HRESULT)).call(pdata, offset, count)
  end
  def set_bool(value : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_bool.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(value)
  end
  def get_bool(pvalue : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_bool.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pvalue)
  end
  def set_bool_array(pdata : LibC::BOOL*, offset : UInt32, count : UInt32) : HRESULT
    @lpVtbl.value.set_bool_array.unsafe_as(Proc(LibC::BOOL*, UInt32, UInt32, HRESULT)).call(pdata, offset, count)
  end
  def get_bool_array(pdata : LibC::BOOL*, offset : UInt32, count : UInt32) : HRESULT
    @lpVtbl.value.get_bool_array.unsafe_as(Proc(LibC::BOOL*, UInt32, UInt32, HRESULT)).call(pdata, offset, count)
  end
end
struct LibWin32::ID3D10EffectVectorVariable
  def is_valid : LibC::BOOL
    @lpVtbl.value.is_valid.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_type : ID3D10EffectType
    @lpVtbl.value.get_type.unsafe_as(Proc(ID3D10EffectType)).call
  end
  def get_desc(pdesc : D3D10_EFFECT_VARIABLE_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_EFFECT_VARIABLE_DESC*, HRESULT)).call(pdesc)
  end
  def get_annotation_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_annotation_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_member_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_semantic(semantic : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_semantic.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(semantic)
  end
  def get_element(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_element.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_parent_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.get_parent_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_scalar : ID3D10EffectScalarVariable
    @lpVtbl.value.as_scalar.unsafe_as(Proc(ID3D10EffectScalarVariable)).call
  end
  def as_vector : ID3D10EffectVectorVariable
    @lpVtbl.value.as_vector.unsafe_as(Proc(ID3D10EffectVectorVariable)).call
  end
  def as_matrix : ID3D10EffectMatrixVariable
    @lpVtbl.value.as_matrix.unsafe_as(Proc(ID3D10EffectMatrixVariable)).call
  end
  def as_string : ID3D10EffectStringVariable
    @lpVtbl.value.as_string.unsafe_as(Proc(ID3D10EffectStringVariable)).call
  end
  def as_shader_resource : ID3D10EffectShaderResourceVariable
    @lpVtbl.value.as_shader_resource.unsafe_as(Proc(ID3D10EffectShaderResourceVariable)).call
  end
  def as_render_target_view : ID3D10EffectRenderTargetViewVariable
    @lpVtbl.value.as_render_target_view.unsafe_as(Proc(ID3D10EffectRenderTargetViewVariable)).call
  end
  def as_depth_stencil_view : ID3D10EffectDepthStencilViewVariable
    @lpVtbl.value.as_depth_stencil_view.unsafe_as(Proc(ID3D10EffectDepthStencilViewVariable)).call
  end
  def as_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.as_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_shader : ID3D10EffectShaderVariable
    @lpVtbl.value.as_shader.unsafe_as(Proc(ID3D10EffectShaderVariable)).call
  end
  def as_blend : ID3D10EffectBlendVariable
    @lpVtbl.value.as_blend.unsafe_as(Proc(ID3D10EffectBlendVariable)).call
  end
  def as_depth_stencil : ID3D10EffectDepthStencilVariable
    @lpVtbl.value.as_depth_stencil.unsafe_as(Proc(ID3D10EffectDepthStencilVariable)).call
  end
  def as_rasterizer : ID3D10EffectRasterizerVariable
    @lpVtbl.value.as_rasterizer.unsafe_as(Proc(ID3D10EffectRasterizerVariable)).call
  end
  def as_sampler : ID3D10EffectSamplerVariable
    @lpVtbl.value.as_sampler.unsafe_as(Proc(ID3D10EffectSamplerVariable)).call
  end
  def set_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.set_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
  def get_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.get_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
  def set_bool_vector(pdata : LibC::BOOL*) : HRESULT
    @lpVtbl.value.set_bool_vector.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pdata)
  end
  def set_int_vector(pdata : Int32*) : HRESULT
    @lpVtbl.value.set_int_vector.unsafe_as(Proc(Int32*, HRESULT)).call(pdata)
  end
  def set_float_vector(pdata : Float32*) : HRESULT
    @lpVtbl.value.set_float_vector.unsafe_as(Proc(Float32*, HRESULT)).call(pdata)
  end
  def get_bool_vector(pdata : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_bool_vector.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pdata)
  end
  def get_int_vector(pdata : Int32*) : HRESULT
    @lpVtbl.value.get_int_vector.unsafe_as(Proc(Int32*, HRESULT)).call(pdata)
  end
  def get_float_vector(pdata : Float32*) : HRESULT
    @lpVtbl.value.get_float_vector.unsafe_as(Proc(Float32*, HRESULT)).call(pdata)
  end
  def set_bool_vector_array(pdata : LibC::BOOL*, offset : UInt32, count : UInt32) : HRESULT
    @lpVtbl.value.set_bool_vector_array.unsafe_as(Proc(LibC::BOOL*, UInt32, UInt32, HRESULT)).call(pdata, offset, count)
  end
  def set_int_vector_array(pdata : Int32*, offset : UInt32, count : UInt32) : HRESULT
    @lpVtbl.value.set_int_vector_array.unsafe_as(Proc(Int32*, UInt32, UInt32, HRESULT)).call(pdata, offset, count)
  end
  def set_float_vector_array(pdata : Float32*, offset : UInt32, count : UInt32) : HRESULT
    @lpVtbl.value.set_float_vector_array.unsafe_as(Proc(Float32*, UInt32, UInt32, HRESULT)).call(pdata, offset, count)
  end
  def get_bool_vector_array(pdata : LibC::BOOL*, offset : UInt32, count : UInt32) : HRESULT
    @lpVtbl.value.get_bool_vector_array.unsafe_as(Proc(LibC::BOOL*, UInt32, UInt32, HRESULT)).call(pdata, offset, count)
  end
  def get_int_vector_array(pdata : Int32*, offset : UInt32, count : UInt32) : HRESULT
    @lpVtbl.value.get_int_vector_array.unsafe_as(Proc(Int32*, UInt32, UInt32, HRESULT)).call(pdata, offset, count)
  end
  def get_float_vector_array(pdata : Float32*, offset : UInt32, count : UInt32) : HRESULT
    @lpVtbl.value.get_float_vector_array.unsafe_as(Proc(Float32*, UInt32, UInt32, HRESULT)).call(pdata, offset, count)
  end
end
struct LibWin32::ID3D10EffectMatrixVariable
  def is_valid : LibC::BOOL
    @lpVtbl.value.is_valid.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_type : ID3D10EffectType
    @lpVtbl.value.get_type.unsafe_as(Proc(ID3D10EffectType)).call
  end
  def get_desc(pdesc : D3D10_EFFECT_VARIABLE_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_EFFECT_VARIABLE_DESC*, HRESULT)).call(pdesc)
  end
  def get_annotation_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_annotation_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_member_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_semantic(semantic : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_semantic.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(semantic)
  end
  def get_element(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_element.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_parent_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.get_parent_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_scalar : ID3D10EffectScalarVariable
    @lpVtbl.value.as_scalar.unsafe_as(Proc(ID3D10EffectScalarVariable)).call
  end
  def as_vector : ID3D10EffectVectorVariable
    @lpVtbl.value.as_vector.unsafe_as(Proc(ID3D10EffectVectorVariable)).call
  end
  def as_matrix : ID3D10EffectMatrixVariable
    @lpVtbl.value.as_matrix.unsafe_as(Proc(ID3D10EffectMatrixVariable)).call
  end
  def as_string : ID3D10EffectStringVariable
    @lpVtbl.value.as_string.unsafe_as(Proc(ID3D10EffectStringVariable)).call
  end
  def as_shader_resource : ID3D10EffectShaderResourceVariable
    @lpVtbl.value.as_shader_resource.unsafe_as(Proc(ID3D10EffectShaderResourceVariable)).call
  end
  def as_render_target_view : ID3D10EffectRenderTargetViewVariable
    @lpVtbl.value.as_render_target_view.unsafe_as(Proc(ID3D10EffectRenderTargetViewVariable)).call
  end
  def as_depth_stencil_view : ID3D10EffectDepthStencilViewVariable
    @lpVtbl.value.as_depth_stencil_view.unsafe_as(Proc(ID3D10EffectDepthStencilViewVariable)).call
  end
  def as_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.as_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_shader : ID3D10EffectShaderVariable
    @lpVtbl.value.as_shader.unsafe_as(Proc(ID3D10EffectShaderVariable)).call
  end
  def as_blend : ID3D10EffectBlendVariable
    @lpVtbl.value.as_blend.unsafe_as(Proc(ID3D10EffectBlendVariable)).call
  end
  def as_depth_stencil : ID3D10EffectDepthStencilVariable
    @lpVtbl.value.as_depth_stencil.unsafe_as(Proc(ID3D10EffectDepthStencilVariable)).call
  end
  def as_rasterizer : ID3D10EffectRasterizerVariable
    @lpVtbl.value.as_rasterizer.unsafe_as(Proc(ID3D10EffectRasterizerVariable)).call
  end
  def as_sampler : ID3D10EffectSamplerVariable
    @lpVtbl.value.as_sampler.unsafe_as(Proc(ID3D10EffectSamplerVariable)).call
  end
  def set_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.set_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
  def get_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.get_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
  def set_matrix(pdata : Float32*) : HRESULT
    @lpVtbl.value.set_matrix.unsafe_as(Proc(Float32*, HRESULT)).call(pdata)
  end
  def get_matrix(pdata : Float32*) : HRESULT
    @lpVtbl.value.get_matrix.unsafe_as(Proc(Float32*, HRESULT)).call(pdata)
  end
  def set_matrix_array(pdata : Float32*, offset : UInt32, count : UInt32) : HRESULT
    @lpVtbl.value.set_matrix_array.unsafe_as(Proc(Float32*, UInt32, UInt32, HRESULT)).call(pdata, offset, count)
  end
  def get_matrix_array(pdata : Float32*, offset : UInt32, count : UInt32) : HRESULT
    @lpVtbl.value.get_matrix_array.unsafe_as(Proc(Float32*, UInt32, UInt32, HRESULT)).call(pdata, offset, count)
  end
  def set_matrix_transpose(pdata : Float32*) : HRESULT
    @lpVtbl.value.set_matrix_transpose.unsafe_as(Proc(Float32*, HRESULT)).call(pdata)
  end
  def get_matrix_transpose(pdata : Float32*) : HRESULT
    @lpVtbl.value.get_matrix_transpose.unsafe_as(Proc(Float32*, HRESULT)).call(pdata)
  end
  def set_matrix_transpose_array(pdata : Float32*, offset : UInt32, count : UInt32) : HRESULT
    @lpVtbl.value.set_matrix_transpose_array.unsafe_as(Proc(Float32*, UInt32, UInt32, HRESULT)).call(pdata, offset, count)
  end
  def get_matrix_transpose_array(pdata : Float32*, offset : UInt32, count : UInt32) : HRESULT
    @lpVtbl.value.get_matrix_transpose_array.unsafe_as(Proc(Float32*, UInt32, UInt32, HRESULT)).call(pdata, offset, count)
  end
end
struct LibWin32::ID3D10EffectStringVariable
  def is_valid : LibC::BOOL
    @lpVtbl.value.is_valid.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_type : ID3D10EffectType
    @lpVtbl.value.get_type.unsafe_as(Proc(ID3D10EffectType)).call
  end
  def get_desc(pdesc : D3D10_EFFECT_VARIABLE_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_EFFECT_VARIABLE_DESC*, HRESULT)).call(pdesc)
  end
  def get_annotation_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_annotation_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_member_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_semantic(semantic : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_semantic.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(semantic)
  end
  def get_element(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_element.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_parent_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.get_parent_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_scalar : ID3D10EffectScalarVariable
    @lpVtbl.value.as_scalar.unsafe_as(Proc(ID3D10EffectScalarVariable)).call
  end
  def as_vector : ID3D10EffectVectorVariable
    @lpVtbl.value.as_vector.unsafe_as(Proc(ID3D10EffectVectorVariable)).call
  end
  def as_matrix : ID3D10EffectMatrixVariable
    @lpVtbl.value.as_matrix.unsafe_as(Proc(ID3D10EffectMatrixVariable)).call
  end
  def as_string : ID3D10EffectStringVariable
    @lpVtbl.value.as_string.unsafe_as(Proc(ID3D10EffectStringVariable)).call
  end
  def as_shader_resource : ID3D10EffectShaderResourceVariable
    @lpVtbl.value.as_shader_resource.unsafe_as(Proc(ID3D10EffectShaderResourceVariable)).call
  end
  def as_render_target_view : ID3D10EffectRenderTargetViewVariable
    @lpVtbl.value.as_render_target_view.unsafe_as(Proc(ID3D10EffectRenderTargetViewVariable)).call
  end
  def as_depth_stencil_view : ID3D10EffectDepthStencilViewVariable
    @lpVtbl.value.as_depth_stencil_view.unsafe_as(Proc(ID3D10EffectDepthStencilViewVariable)).call
  end
  def as_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.as_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_shader : ID3D10EffectShaderVariable
    @lpVtbl.value.as_shader.unsafe_as(Proc(ID3D10EffectShaderVariable)).call
  end
  def as_blend : ID3D10EffectBlendVariable
    @lpVtbl.value.as_blend.unsafe_as(Proc(ID3D10EffectBlendVariable)).call
  end
  def as_depth_stencil : ID3D10EffectDepthStencilVariable
    @lpVtbl.value.as_depth_stencil.unsafe_as(Proc(ID3D10EffectDepthStencilVariable)).call
  end
  def as_rasterizer : ID3D10EffectRasterizerVariable
    @lpVtbl.value.as_rasterizer.unsafe_as(Proc(ID3D10EffectRasterizerVariable)).call
  end
  def as_sampler : ID3D10EffectSamplerVariable
    @lpVtbl.value.as_sampler.unsafe_as(Proc(ID3D10EffectSamplerVariable)).call
  end
  def set_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.set_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
  def get_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.get_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
  def get_string(ppstring : PSTR*) : HRESULT
    @lpVtbl.value.get_string.unsafe_as(Proc(PSTR*, HRESULT)).call(ppstring)
  end
  def get_string_array(ppstrings : PSTR*, offset : UInt32, count : UInt32) : HRESULT
    @lpVtbl.value.get_string_array.unsafe_as(Proc(PSTR*, UInt32, UInt32, HRESULT)).call(ppstrings, offset, count)
  end
end
struct LibWin32::ID3D10EffectShaderResourceVariable
  def is_valid : LibC::BOOL
    @lpVtbl.value.is_valid.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_type : ID3D10EffectType
    @lpVtbl.value.get_type.unsafe_as(Proc(ID3D10EffectType)).call
  end
  def get_desc(pdesc : D3D10_EFFECT_VARIABLE_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_EFFECT_VARIABLE_DESC*, HRESULT)).call(pdesc)
  end
  def get_annotation_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_annotation_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_member_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_semantic(semantic : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_semantic.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(semantic)
  end
  def get_element(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_element.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_parent_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.get_parent_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_scalar : ID3D10EffectScalarVariable
    @lpVtbl.value.as_scalar.unsafe_as(Proc(ID3D10EffectScalarVariable)).call
  end
  def as_vector : ID3D10EffectVectorVariable
    @lpVtbl.value.as_vector.unsafe_as(Proc(ID3D10EffectVectorVariable)).call
  end
  def as_matrix : ID3D10EffectMatrixVariable
    @lpVtbl.value.as_matrix.unsafe_as(Proc(ID3D10EffectMatrixVariable)).call
  end
  def as_string : ID3D10EffectStringVariable
    @lpVtbl.value.as_string.unsafe_as(Proc(ID3D10EffectStringVariable)).call
  end
  def as_shader_resource : ID3D10EffectShaderResourceVariable
    @lpVtbl.value.as_shader_resource.unsafe_as(Proc(ID3D10EffectShaderResourceVariable)).call
  end
  def as_render_target_view : ID3D10EffectRenderTargetViewVariable
    @lpVtbl.value.as_render_target_view.unsafe_as(Proc(ID3D10EffectRenderTargetViewVariable)).call
  end
  def as_depth_stencil_view : ID3D10EffectDepthStencilViewVariable
    @lpVtbl.value.as_depth_stencil_view.unsafe_as(Proc(ID3D10EffectDepthStencilViewVariable)).call
  end
  def as_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.as_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_shader : ID3D10EffectShaderVariable
    @lpVtbl.value.as_shader.unsafe_as(Proc(ID3D10EffectShaderVariable)).call
  end
  def as_blend : ID3D10EffectBlendVariable
    @lpVtbl.value.as_blend.unsafe_as(Proc(ID3D10EffectBlendVariable)).call
  end
  def as_depth_stencil : ID3D10EffectDepthStencilVariable
    @lpVtbl.value.as_depth_stencil.unsafe_as(Proc(ID3D10EffectDepthStencilVariable)).call
  end
  def as_rasterizer : ID3D10EffectRasterizerVariable
    @lpVtbl.value.as_rasterizer.unsafe_as(Proc(ID3D10EffectRasterizerVariable)).call
  end
  def as_sampler : ID3D10EffectSamplerVariable
    @lpVtbl.value.as_sampler.unsafe_as(Proc(ID3D10EffectSamplerVariable)).call
  end
  def set_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.set_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
  def get_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.get_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
  def set_resource(presource : ID3D10ShaderResourceView) : HRESULT
    @lpVtbl.value.set_resource.unsafe_as(Proc(ID3D10ShaderResourceView, HRESULT)).call(presource)
  end
  def get_resource(ppresource : ID3D10ShaderResourceView*) : HRESULT
    @lpVtbl.value.get_resource.unsafe_as(Proc(ID3D10ShaderResourceView*, HRESULT)).call(ppresource)
  end
  def set_resource_array(ppresources : ID3D10ShaderResourceView*, offset : UInt32, count : UInt32) : HRESULT
    @lpVtbl.value.set_resource_array.unsafe_as(Proc(ID3D10ShaderResourceView*, UInt32, UInt32, HRESULT)).call(ppresources, offset, count)
  end
  def get_resource_array(ppresources : ID3D10ShaderResourceView*, offset : UInt32, count : UInt32) : HRESULT
    @lpVtbl.value.get_resource_array.unsafe_as(Proc(ID3D10ShaderResourceView*, UInt32, UInt32, HRESULT)).call(ppresources, offset, count)
  end
end
struct LibWin32::ID3D10EffectRenderTargetViewVariable
  def is_valid : LibC::BOOL
    @lpVtbl.value.is_valid.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_type : ID3D10EffectType
    @lpVtbl.value.get_type.unsafe_as(Proc(ID3D10EffectType)).call
  end
  def get_desc(pdesc : D3D10_EFFECT_VARIABLE_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_EFFECT_VARIABLE_DESC*, HRESULT)).call(pdesc)
  end
  def get_annotation_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_annotation_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_member_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_semantic(semantic : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_semantic.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(semantic)
  end
  def get_element(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_element.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_parent_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.get_parent_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_scalar : ID3D10EffectScalarVariable
    @lpVtbl.value.as_scalar.unsafe_as(Proc(ID3D10EffectScalarVariable)).call
  end
  def as_vector : ID3D10EffectVectorVariable
    @lpVtbl.value.as_vector.unsafe_as(Proc(ID3D10EffectVectorVariable)).call
  end
  def as_matrix : ID3D10EffectMatrixVariable
    @lpVtbl.value.as_matrix.unsafe_as(Proc(ID3D10EffectMatrixVariable)).call
  end
  def as_string : ID3D10EffectStringVariable
    @lpVtbl.value.as_string.unsafe_as(Proc(ID3D10EffectStringVariable)).call
  end
  def as_shader_resource : ID3D10EffectShaderResourceVariable
    @lpVtbl.value.as_shader_resource.unsafe_as(Proc(ID3D10EffectShaderResourceVariable)).call
  end
  def as_render_target_view : ID3D10EffectRenderTargetViewVariable
    @lpVtbl.value.as_render_target_view.unsafe_as(Proc(ID3D10EffectRenderTargetViewVariable)).call
  end
  def as_depth_stencil_view : ID3D10EffectDepthStencilViewVariable
    @lpVtbl.value.as_depth_stencil_view.unsafe_as(Proc(ID3D10EffectDepthStencilViewVariable)).call
  end
  def as_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.as_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_shader : ID3D10EffectShaderVariable
    @lpVtbl.value.as_shader.unsafe_as(Proc(ID3D10EffectShaderVariable)).call
  end
  def as_blend : ID3D10EffectBlendVariable
    @lpVtbl.value.as_blend.unsafe_as(Proc(ID3D10EffectBlendVariable)).call
  end
  def as_depth_stencil : ID3D10EffectDepthStencilVariable
    @lpVtbl.value.as_depth_stencil.unsafe_as(Proc(ID3D10EffectDepthStencilVariable)).call
  end
  def as_rasterizer : ID3D10EffectRasterizerVariable
    @lpVtbl.value.as_rasterizer.unsafe_as(Proc(ID3D10EffectRasterizerVariable)).call
  end
  def as_sampler : ID3D10EffectSamplerVariable
    @lpVtbl.value.as_sampler.unsafe_as(Proc(ID3D10EffectSamplerVariable)).call
  end
  def set_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.set_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
  def get_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.get_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
  def set_render_target(presource : ID3D10RenderTargetView) : HRESULT
    @lpVtbl.value.set_render_target.unsafe_as(Proc(ID3D10RenderTargetView, HRESULT)).call(presource)
  end
  def get_render_target(ppresource : ID3D10RenderTargetView*) : HRESULT
    @lpVtbl.value.get_render_target.unsafe_as(Proc(ID3D10RenderTargetView*, HRESULT)).call(ppresource)
  end
  def set_render_target_array(ppresources : ID3D10RenderTargetView*, offset : UInt32, count : UInt32) : HRESULT
    @lpVtbl.value.set_render_target_array.unsafe_as(Proc(ID3D10RenderTargetView*, UInt32, UInt32, HRESULT)).call(ppresources, offset, count)
  end
  def get_render_target_array(ppresources : ID3D10RenderTargetView*, offset : UInt32, count : UInt32) : HRESULT
    @lpVtbl.value.get_render_target_array.unsafe_as(Proc(ID3D10RenderTargetView*, UInt32, UInt32, HRESULT)).call(ppresources, offset, count)
  end
end
struct LibWin32::ID3D10EffectDepthStencilViewVariable
  def is_valid : LibC::BOOL
    @lpVtbl.value.is_valid.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_type : ID3D10EffectType
    @lpVtbl.value.get_type.unsafe_as(Proc(ID3D10EffectType)).call
  end
  def get_desc(pdesc : D3D10_EFFECT_VARIABLE_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_EFFECT_VARIABLE_DESC*, HRESULT)).call(pdesc)
  end
  def get_annotation_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_annotation_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_member_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_semantic(semantic : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_semantic.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(semantic)
  end
  def get_element(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_element.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_parent_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.get_parent_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_scalar : ID3D10EffectScalarVariable
    @lpVtbl.value.as_scalar.unsafe_as(Proc(ID3D10EffectScalarVariable)).call
  end
  def as_vector : ID3D10EffectVectorVariable
    @lpVtbl.value.as_vector.unsafe_as(Proc(ID3D10EffectVectorVariable)).call
  end
  def as_matrix : ID3D10EffectMatrixVariable
    @lpVtbl.value.as_matrix.unsafe_as(Proc(ID3D10EffectMatrixVariable)).call
  end
  def as_string : ID3D10EffectStringVariable
    @lpVtbl.value.as_string.unsafe_as(Proc(ID3D10EffectStringVariable)).call
  end
  def as_shader_resource : ID3D10EffectShaderResourceVariable
    @lpVtbl.value.as_shader_resource.unsafe_as(Proc(ID3D10EffectShaderResourceVariable)).call
  end
  def as_render_target_view : ID3D10EffectRenderTargetViewVariable
    @lpVtbl.value.as_render_target_view.unsafe_as(Proc(ID3D10EffectRenderTargetViewVariable)).call
  end
  def as_depth_stencil_view : ID3D10EffectDepthStencilViewVariable
    @lpVtbl.value.as_depth_stencil_view.unsafe_as(Proc(ID3D10EffectDepthStencilViewVariable)).call
  end
  def as_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.as_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_shader : ID3D10EffectShaderVariable
    @lpVtbl.value.as_shader.unsafe_as(Proc(ID3D10EffectShaderVariable)).call
  end
  def as_blend : ID3D10EffectBlendVariable
    @lpVtbl.value.as_blend.unsafe_as(Proc(ID3D10EffectBlendVariable)).call
  end
  def as_depth_stencil : ID3D10EffectDepthStencilVariable
    @lpVtbl.value.as_depth_stencil.unsafe_as(Proc(ID3D10EffectDepthStencilVariable)).call
  end
  def as_rasterizer : ID3D10EffectRasterizerVariable
    @lpVtbl.value.as_rasterizer.unsafe_as(Proc(ID3D10EffectRasterizerVariable)).call
  end
  def as_sampler : ID3D10EffectSamplerVariable
    @lpVtbl.value.as_sampler.unsafe_as(Proc(ID3D10EffectSamplerVariable)).call
  end
  def set_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.set_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
  def get_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.get_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
  def set_depth_stencil(presource : ID3D10DepthStencilView) : HRESULT
    @lpVtbl.value.set_depth_stencil.unsafe_as(Proc(ID3D10DepthStencilView, HRESULT)).call(presource)
  end
  def get_depth_stencil(ppresource : ID3D10DepthStencilView*) : HRESULT
    @lpVtbl.value.get_depth_stencil.unsafe_as(Proc(ID3D10DepthStencilView*, HRESULT)).call(ppresource)
  end
  def set_depth_stencil_array(ppresources : ID3D10DepthStencilView*, offset : UInt32, count : UInt32) : HRESULT
    @lpVtbl.value.set_depth_stencil_array.unsafe_as(Proc(ID3D10DepthStencilView*, UInt32, UInt32, HRESULT)).call(ppresources, offset, count)
  end
  def get_depth_stencil_array(ppresources : ID3D10DepthStencilView*, offset : UInt32, count : UInt32) : HRESULT
    @lpVtbl.value.get_depth_stencil_array.unsafe_as(Proc(ID3D10DepthStencilView*, UInt32, UInt32, HRESULT)).call(ppresources, offset, count)
  end
end
struct LibWin32::ID3D10EffectConstantBuffer
  def is_valid : LibC::BOOL
    @lpVtbl.value.is_valid.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_type : ID3D10EffectType
    @lpVtbl.value.get_type.unsafe_as(Proc(ID3D10EffectType)).call
  end
  def get_desc(pdesc : D3D10_EFFECT_VARIABLE_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_EFFECT_VARIABLE_DESC*, HRESULT)).call(pdesc)
  end
  def get_annotation_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_annotation_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_member_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_semantic(semantic : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_semantic.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(semantic)
  end
  def get_element(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_element.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_parent_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.get_parent_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_scalar : ID3D10EffectScalarVariable
    @lpVtbl.value.as_scalar.unsafe_as(Proc(ID3D10EffectScalarVariable)).call
  end
  def as_vector : ID3D10EffectVectorVariable
    @lpVtbl.value.as_vector.unsafe_as(Proc(ID3D10EffectVectorVariable)).call
  end
  def as_matrix : ID3D10EffectMatrixVariable
    @lpVtbl.value.as_matrix.unsafe_as(Proc(ID3D10EffectMatrixVariable)).call
  end
  def as_string : ID3D10EffectStringVariable
    @lpVtbl.value.as_string.unsafe_as(Proc(ID3D10EffectStringVariable)).call
  end
  def as_shader_resource : ID3D10EffectShaderResourceVariable
    @lpVtbl.value.as_shader_resource.unsafe_as(Proc(ID3D10EffectShaderResourceVariable)).call
  end
  def as_render_target_view : ID3D10EffectRenderTargetViewVariable
    @lpVtbl.value.as_render_target_view.unsafe_as(Proc(ID3D10EffectRenderTargetViewVariable)).call
  end
  def as_depth_stencil_view : ID3D10EffectDepthStencilViewVariable
    @lpVtbl.value.as_depth_stencil_view.unsafe_as(Proc(ID3D10EffectDepthStencilViewVariable)).call
  end
  def as_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.as_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_shader : ID3D10EffectShaderVariable
    @lpVtbl.value.as_shader.unsafe_as(Proc(ID3D10EffectShaderVariable)).call
  end
  def as_blend : ID3D10EffectBlendVariable
    @lpVtbl.value.as_blend.unsafe_as(Proc(ID3D10EffectBlendVariable)).call
  end
  def as_depth_stencil : ID3D10EffectDepthStencilVariable
    @lpVtbl.value.as_depth_stencil.unsafe_as(Proc(ID3D10EffectDepthStencilVariable)).call
  end
  def as_rasterizer : ID3D10EffectRasterizerVariable
    @lpVtbl.value.as_rasterizer.unsafe_as(Proc(ID3D10EffectRasterizerVariable)).call
  end
  def as_sampler : ID3D10EffectSamplerVariable
    @lpVtbl.value.as_sampler.unsafe_as(Proc(ID3D10EffectSamplerVariable)).call
  end
  def set_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.set_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
  def get_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.get_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
  def set_constant_buffer(pconstantbuffer : ID3D10Buffer) : HRESULT
    @lpVtbl.value.set_constant_buffer.unsafe_as(Proc(ID3D10Buffer, HRESULT)).call(pconstantbuffer)
  end
  def get_constant_buffer(ppconstantbuffer : ID3D10Buffer*) : HRESULT
    @lpVtbl.value.get_constant_buffer.unsafe_as(Proc(ID3D10Buffer*, HRESULT)).call(ppconstantbuffer)
  end
  def set_texture_buffer(ptexturebuffer : ID3D10ShaderResourceView) : HRESULT
    @lpVtbl.value.set_texture_buffer.unsafe_as(Proc(ID3D10ShaderResourceView, HRESULT)).call(ptexturebuffer)
  end
  def get_texture_buffer(pptexturebuffer : ID3D10ShaderResourceView*) : HRESULT
    @lpVtbl.value.get_texture_buffer.unsafe_as(Proc(ID3D10ShaderResourceView*, HRESULT)).call(pptexturebuffer)
  end
end
struct LibWin32::ID3D10EffectShaderVariable
  def is_valid : LibC::BOOL
    @lpVtbl.value.is_valid.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_type : ID3D10EffectType
    @lpVtbl.value.get_type.unsafe_as(Proc(ID3D10EffectType)).call
  end
  def get_desc(pdesc : D3D10_EFFECT_VARIABLE_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_EFFECT_VARIABLE_DESC*, HRESULT)).call(pdesc)
  end
  def get_annotation_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_annotation_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_member_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_semantic(semantic : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_semantic.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(semantic)
  end
  def get_element(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_element.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_parent_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.get_parent_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_scalar : ID3D10EffectScalarVariable
    @lpVtbl.value.as_scalar.unsafe_as(Proc(ID3D10EffectScalarVariable)).call
  end
  def as_vector : ID3D10EffectVectorVariable
    @lpVtbl.value.as_vector.unsafe_as(Proc(ID3D10EffectVectorVariable)).call
  end
  def as_matrix : ID3D10EffectMatrixVariable
    @lpVtbl.value.as_matrix.unsafe_as(Proc(ID3D10EffectMatrixVariable)).call
  end
  def as_string : ID3D10EffectStringVariable
    @lpVtbl.value.as_string.unsafe_as(Proc(ID3D10EffectStringVariable)).call
  end
  def as_shader_resource : ID3D10EffectShaderResourceVariable
    @lpVtbl.value.as_shader_resource.unsafe_as(Proc(ID3D10EffectShaderResourceVariable)).call
  end
  def as_render_target_view : ID3D10EffectRenderTargetViewVariable
    @lpVtbl.value.as_render_target_view.unsafe_as(Proc(ID3D10EffectRenderTargetViewVariable)).call
  end
  def as_depth_stencil_view : ID3D10EffectDepthStencilViewVariable
    @lpVtbl.value.as_depth_stencil_view.unsafe_as(Proc(ID3D10EffectDepthStencilViewVariable)).call
  end
  def as_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.as_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_shader : ID3D10EffectShaderVariable
    @lpVtbl.value.as_shader.unsafe_as(Proc(ID3D10EffectShaderVariable)).call
  end
  def as_blend : ID3D10EffectBlendVariable
    @lpVtbl.value.as_blend.unsafe_as(Proc(ID3D10EffectBlendVariable)).call
  end
  def as_depth_stencil : ID3D10EffectDepthStencilVariable
    @lpVtbl.value.as_depth_stencil.unsafe_as(Proc(ID3D10EffectDepthStencilVariable)).call
  end
  def as_rasterizer : ID3D10EffectRasterizerVariable
    @lpVtbl.value.as_rasterizer.unsafe_as(Proc(ID3D10EffectRasterizerVariable)).call
  end
  def as_sampler : ID3D10EffectSamplerVariable
    @lpVtbl.value.as_sampler.unsafe_as(Proc(ID3D10EffectSamplerVariable)).call
  end
  def set_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.set_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
  def get_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.get_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
  def get_shader_desc(shaderindex : UInt32, pdesc : D3D10_EFFECT_SHADER_DESC*) : HRESULT
    @lpVtbl.value.get_shader_desc.unsafe_as(Proc(UInt32, D3D10_EFFECT_SHADER_DESC*, HRESULT)).call(shaderindex, pdesc)
  end
  def get_vertex_shader(shaderindex : UInt32, ppvs : ID3D10VertexShader*) : HRESULT
    @lpVtbl.value.get_vertex_shader.unsafe_as(Proc(UInt32, ID3D10VertexShader*, HRESULT)).call(shaderindex, ppvs)
  end
  def get_geometry_shader(shaderindex : UInt32, ppgs : ID3D10GeometryShader*) : HRESULT
    @lpVtbl.value.get_geometry_shader.unsafe_as(Proc(UInt32, ID3D10GeometryShader*, HRESULT)).call(shaderindex, ppgs)
  end
  def get_pixel_shader(shaderindex : UInt32, ppps : ID3D10PixelShader*) : HRESULT
    @lpVtbl.value.get_pixel_shader.unsafe_as(Proc(UInt32, ID3D10PixelShader*, HRESULT)).call(shaderindex, ppps)
  end
  def get_input_signature_element_desc(shaderindex : UInt32, element : UInt32, pdesc : D3D10_SIGNATURE_PARAMETER_DESC*) : HRESULT
    @lpVtbl.value.get_input_signature_element_desc.unsafe_as(Proc(UInt32, UInt32, D3D10_SIGNATURE_PARAMETER_DESC*, HRESULT)).call(shaderindex, element, pdesc)
  end
  def get_output_signature_element_desc(shaderindex : UInt32, element : UInt32, pdesc : D3D10_SIGNATURE_PARAMETER_DESC*) : HRESULT
    @lpVtbl.value.get_output_signature_element_desc.unsafe_as(Proc(UInt32, UInt32, D3D10_SIGNATURE_PARAMETER_DESC*, HRESULT)).call(shaderindex, element, pdesc)
  end
end
struct LibWin32::ID3D10EffectBlendVariable
  def is_valid : LibC::BOOL
    @lpVtbl.value.is_valid.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_type : ID3D10EffectType
    @lpVtbl.value.get_type.unsafe_as(Proc(ID3D10EffectType)).call
  end
  def get_desc(pdesc : D3D10_EFFECT_VARIABLE_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_EFFECT_VARIABLE_DESC*, HRESULT)).call(pdesc)
  end
  def get_annotation_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_annotation_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_member_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_semantic(semantic : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_semantic.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(semantic)
  end
  def get_element(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_element.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_parent_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.get_parent_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_scalar : ID3D10EffectScalarVariable
    @lpVtbl.value.as_scalar.unsafe_as(Proc(ID3D10EffectScalarVariable)).call
  end
  def as_vector : ID3D10EffectVectorVariable
    @lpVtbl.value.as_vector.unsafe_as(Proc(ID3D10EffectVectorVariable)).call
  end
  def as_matrix : ID3D10EffectMatrixVariable
    @lpVtbl.value.as_matrix.unsafe_as(Proc(ID3D10EffectMatrixVariable)).call
  end
  def as_string : ID3D10EffectStringVariable
    @lpVtbl.value.as_string.unsafe_as(Proc(ID3D10EffectStringVariable)).call
  end
  def as_shader_resource : ID3D10EffectShaderResourceVariable
    @lpVtbl.value.as_shader_resource.unsafe_as(Proc(ID3D10EffectShaderResourceVariable)).call
  end
  def as_render_target_view : ID3D10EffectRenderTargetViewVariable
    @lpVtbl.value.as_render_target_view.unsafe_as(Proc(ID3D10EffectRenderTargetViewVariable)).call
  end
  def as_depth_stencil_view : ID3D10EffectDepthStencilViewVariable
    @lpVtbl.value.as_depth_stencil_view.unsafe_as(Proc(ID3D10EffectDepthStencilViewVariable)).call
  end
  def as_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.as_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_shader : ID3D10EffectShaderVariable
    @lpVtbl.value.as_shader.unsafe_as(Proc(ID3D10EffectShaderVariable)).call
  end
  def as_blend : ID3D10EffectBlendVariable
    @lpVtbl.value.as_blend.unsafe_as(Proc(ID3D10EffectBlendVariable)).call
  end
  def as_depth_stencil : ID3D10EffectDepthStencilVariable
    @lpVtbl.value.as_depth_stencil.unsafe_as(Proc(ID3D10EffectDepthStencilVariable)).call
  end
  def as_rasterizer : ID3D10EffectRasterizerVariable
    @lpVtbl.value.as_rasterizer.unsafe_as(Proc(ID3D10EffectRasterizerVariable)).call
  end
  def as_sampler : ID3D10EffectSamplerVariable
    @lpVtbl.value.as_sampler.unsafe_as(Proc(ID3D10EffectSamplerVariable)).call
  end
  def set_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.set_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
  def get_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.get_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
  def get_blend_state(index : UInt32, ppblendstate : ID3D10BlendState*) : HRESULT
    @lpVtbl.value.get_blend_state.unsafe_as(Proc(UInt32, ID3D10BlendState*, HRESULT)).call(index, ppblendstate)
  end
  def get_backing_store(index : UInt32, pblenddesc : D3D10_BLEND_DESC*) : HRESULT
    @lpVtbl.value.get_backing_store.unsafe_as(Proc(UInt32, D3D10_BLEND_DESC*, HRESULT)).call(index, pblenddesc)
  end
end
struct LibWin32::ID3D10EffectDepthStencilVariable
  def is_valid : LibC::BOOL
    @lpVtbl.value.is_valid.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_type : ID3D10EffectType
    @lpVtbl.value.get_type.unsafe_as(Proc(ID3D10EffectType)).call
  end
  def get_desc(pdesc : D3D10_EFFECT_VARIABLE_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_EFFECT_VARIABLE_DESC*, HRESULT)).call(pdesc)
  end
  def get_annotation_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_annotation_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_member_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_semantic(semantic : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_semantic.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(semantic)
  end
  def get_element(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_element.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_parent_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.get_parent_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_scalar : ID3D10EffectScalarVariable
    @lpVtbl.value.as_scalar.unsafe_as(Proc(ID3D10EffectScalarVariable)).call
  end
  def as_vector : ID3D10EffectVectorVariable
    @lpVtbl.value.as_vector.unsafe_as(Proc(ID3D10EffectVectorVariable)).call
  end
  def as_matrix : ID3D10EffectMatrixVariable
    @lpVtbl.value.as_matrix.unsafe_as(Proc(ID3D10EffectMatrixVariable)).call
  end
  def as_string : ID3D10EffectStringVariable
    @lpVtbl.value.as_string.unsafe_as(Proc(ID3D10EffectStringVariable)).call
  end
  def as_shader_resource : ID3D10EffectShaderResourceVariable
    @lpVtbl.value.as_shader_resource.unsafe_as(Proc(ID3D10EffectShaderResourceVariable)).call
  end
  def as_render_target_view : ID3D10EffectRenderTargetViewVariable
    @lpVtbl.value.as_render_target_view.unsafe_as(Proc(ID3D10EffectRenderTargetViewVariable)).call
  end
  def as_depth_stencil_view : ID3D10EffectDepthStencilViewVariable
    @lpVtbl.value.as_depth_stencil_view.unsafe_as(Proc(ID3D10EffectDepthStencilViewVariable)).call
  end
  def as_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.as_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_shader : ID3D10EffectShaderVariable
    @lpVtbl.value.as_shader.unsafe_as(Proc(ID3D10EffectShaderVariable)).call
  end
  def as_blend : ID3D10EffectBlendVariable
    @lpVtbl.value.as_blend.unsafe_as(Proc(ID3D10EffectBlendVariable)).call
  end
  def as_depth_stencil : ID3D10EffectDepthStencilVariable
    @lpVtbl.value.as_depth_stencil.unsafe_as(Proc(ID3D10EffectDepthStencilVariable)).call
  end
  def as_rasterizer : ID3D10EffectRasterizerVariable
    @lpVtbl.value.as_rasterizer.unsafe_as(Proc(ID3D10EffectRasterizerVariable)).call
  end
  def as_sampler : ID3D10EffectSamplerVariable
    @lpVtbl.value.as_sampler.unsafe_as(Proc(ID3D10EffectSamplerVariable)).call
  end
  def set_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.set_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
  def get_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.get_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
  def get_depth_stencil_state(index : UInt32, ppdepthstencilstate : ID3D10DepthStencilState*) : HRESULT
    @lpVtbl.value.get_depth_stencil_state.unsafe_as(Proc(UInt32, ID3D10DepthStencilState*, HRESULT)).call(index, ppdepthstencilstate)
  end
  def get_backing_store(index : UInt32, pdepthstencildesc : D3D10_DEPTH_STENCIL_DESC*) : HRESULT
    @lpVtbl.value.get_backing_store.unsafe_as(Proc(UInt32, D3D10_DEPTH_STENCIL_DESC*, HRESULT)).call(index, pdepthstencildesc)
  end
end
struct LibWin32::ID3D10EffectRasterizerVariable
  def is_valid : LibC::BOOL
    @lpVtbl.value.is_valid.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_type : ID3D10EffectType
    @lpVtbl.value.get_type.unsafe_as(Proc(ID3D10EffectType)).call
  end
  def get_desc(pdesc : D3D10_EFFECT_VARIABLE_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_EFFECT_VARIABLE_DESC*, HRESULT)).call(pdesc)
  end
  def get_annotation_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_annotation_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_member_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_semantic(semantic : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_semantic.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(semantic)
  end
  def get_element(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_element.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_parent_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.get_parent_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_scalar : ID3D10EffectScalarVariable
    @lpVtbl.value.as_scalar.unsafe_as(Proc(ID3D10EffectScalarVariable)).call
  end
  def as_vector : ID3D10EffectVectorVariable
    @lpVtbl.value.as_vector.unsafe_as(Proc(ID3D10EffectVectorVariable)).call
  end
  def as_matrix : ID3D10EffectMatrixVariable
    @lpVtbl.value.as_matrix.unsafe_as(Proc(ID3D10EffectMatrixVariable)).call
  end
  def as_string : ID3D10EffectStringVariable
    @lpVtbl.value.as_string.unsafe_as(Proc(ID3D10EffectStringVariable)).call
  end
  def as_shader_resource : ID3D10EffectShaderResourceVariable
    @lpVtbl.value.as_shader_resource.unsafe_as(Proc(ID3D10EffectShaderResourceVariable)).call
  end
  def as_render_target_view : ID3D10EffectRenderTargetViewVariable
    @lpVtbl.value.as_render_target_view.unsafe_as(Proc(ID3D10EffectRenderTargetViewVariable)).call
  end
  def as_depth_stencil_view : ID3D10EffectDepthStencilViewVariable
    @lpVtbl.value.as_depth_stencil_view.unsafe_as(Proc(ID3D10EffectDepthStencilViewVariable)).call
  end
  def as_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.as_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_shader : ID3D10EffectShaderVariable
    @lpVtbl.value.as_shader.unsafe_as(Proc(ID3D10EffectShaderVariable)).call
  end
  def as_blend : ID3D10EffectBlendVariable
    @lpVtbl.value.as_blend.unsafe_as(Proc(ID3D10EffectBlendVariable)).call
  end
  def as_depth_stencil : ID3D10EffectDepthStencilVariable
    @lpVtbl.value.as_depth_stencil.unsafe_as(Proc(ID3D10EffectDepthStencilVariable)).call
  end
  def as_rasterizer : ID3D10EffectRasterizerVariable
    @lpVtbl.value.as_rasterizer.unsafe_as(Proc(ID3D10EffectRasterizerVariable)).call
  end
  def as_sampler : ID3D10EffectSamplerVariable
    @lpVtbl.value.as_sampler.unsafe_as(Proc(ID3D10EffectSamplerVariable)).call
  end
  def set_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.set_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
  def get_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.get_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
  def get_rasterizer_state(index : UInt32, pprasterizerstate : ID3D10RasterizerState*) : HRESULT
    @lpVtbl.value.get_rasterizer_state.unsafe_as(Proc(UInt32, ID3D10RasterizerState*, HRESULT)).call(index, pprasterizerstate)
  end
  def get_backing_store(index : UInt32, prasterizerdesc : D3D10_RASTERIZER_DESC*) : HRESULT
    @lpVtbl.value.get_backing_store.unsafe_as(Proc(UInt32, D3D10_RASTERIZER_DESC*, HRESULT)).call(index, prasterizerdesc)
  end
end
struct LibWin32::ID3D10EffectSamplerVariable
  def is_valid : LibC::BOOL
    @lpVtbl.value.is_valid.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_type : ID3D10EffectType
    @lpVtbl.value.get_type.unsafe_as(Proc(ID3D10EffectType)).call
  end
  def get_desc(pdesc : D3D10_EFFECT_VARIABLE_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_EFFECT_VARIABLE_DESC*, HRESULT)).call(pdesc)
  end
  def get_annotation_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_annotation_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_member_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_member_by_semantic(semantic : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_member_by_semantic.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(semantic)
  end
  def get_element(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_element.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_parent_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.get_parent_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_scalar : ID3D10EffectScalarVariable
    @lpVtbl.value.as_scalar.unsafe_as(Proc(ID3D10EffectScalarVariable)).call
  end
  def as_vector : ID3D10EffectVectorVariable
    @lpVtbl.value.as_vector.unsafe_as(Proc(ID3D10EffectVectorVariable)).call
  end
  def as_matrix : ID3D10EffectMatrixVariable
    @lpVtbl.value.as_matrix.unsafe_as(Proc(ID3D10EffectMatrixVariable)).call
  end
  def as_string : ID3D10EffectStringVariable
    @lpVtbl.value.as_string.unsafe_as(Proc(ID3D10EffectStringVariable)).call
  end
  def as_shader_resource : ID3D10EffectShaderResourceVariable
    @lpVtbl.value.as_shader_resource.unsafe_as(Proc(ID3D10EffectShaderResourceVariable)).call
  end
  def as_render_target_view : ID3D10EffectRenderTargetViewVariable
    @lpVtbl.value.as_render_target_view.unsafe_as(Proc(ID3D10EffectRenderTargetViewVariable)).call
  end
  def as_depth_stencil_view : ID3D10EffectDepthStencilViewVariable
    @lpVtbl.value.as_depth_stencil_view.unsafe_as(Proc(ID3D10EffectDepthStencilViewVariable)).call
  end
  def as_constant_buffer : ID3D10EffectConstantBuffer
    @lpVtbl.value.as_constant_buffer.unsafe_as(Proc(ID3D10EffectConstantBuffer)).call
  end
  def as_shader : ID3D10EffectShaderVariable
    @lpVtbl.value.as_shader.unsafe_as(Proc(ID3D10EffectShaderVariable)).call
  end
  def as_blend : ID3D10EffectBlendVariable
    @lpVtbl.value.as_blend.unsafe_as(Proc(ID3D10EffectBlendVariable)).call
  end
  def as_depth_stencil : ID3D10EffectDepthStencilVariable
    @lpVtbl.value.as_depth_stencil.unsafe_as(Proc(ID3D10EffectDepthStencilVariable)).call
  end
  def as_rasterizer : ID3D10EffectRasterizerVariable
    @lpVtbl.value.as_rasterizer.unsafe_as(Proc(ID3D10EffectRasterizerVariable)).call
  end
  def as_sampler : ID3D10EffectSamplerVariable
    @lpVtbl.value.as_sampler.unsafe_as(Proc(ID3D10EffectSamplerVariable)).call
  end
  def set_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.set_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
  def get_raw_value(pdata : Void*, offset : UInt32, bytecount : UInt32) : HRESULT
    @lpVtbl.value.get_raw_value.unsafe_as(Proc(Void*, UInt32, UInt32, HRESULT)).call(pdata, offset, bytecount)
  end
  def get_sampler(index : UInt32, ppsampler : ID3D10SamplerState*) : HRESULT
    @lpVtbl.value.get_sampler.unsafe_as(Proc(UInt32, ID3D10SamplerState*, HRESULT)).call(index, ppsampler)
  end
  def get_backing_store(index : UInt32, psamplerdesc : D3D10_SAMPLER_DESC*) : HRESULT
    @lpVtbl.value.get_backing_store.unsafe_as(Proc(UInt32, D3D10_SAMPLER_DESC*, HRESULT)).call(index, psamplerdesc)
  end
end
struct LibWin32::ID3D10EffectPass
  def is_valid : LibC::BOOL
    @lpVtbl.value.is_valid.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_desc(pdesc : D3D10_PASS_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_PASS_DESC*, HRESULT)).call(pdesc)
  end
  def get_vertex_shader_desc(pdesc : D3D10_PASS_SHADER_DESC*) : HRESULT
    @lpVtbl.value.get_vertex_shader_desc.unsafe_as(Proc(D3D10_PASS_SHADER_DESC*, HRESULT)).call(pdesc)
  end
  def get_geometry_shader_desc(pdesc : D3D10_PASS_SHADER_DESC*) : HRESULT
    @lpVtbl.value.get_geometry_shader_desc.unsafe_as(Proc(D3D10_PASS_SHADER_DESC*, HRESULT)).call(pdesc)
  end
  def get_pixel_shader_desc(pdesc : D3D10_PASS_SHADER_DESC*) : HRESULT
    @lpVtbl.value.get_pixel_shader_desc.unsafe_as(Proc(D3D10_PASS_SHADER_DESC*, HRESULT)).call(pdesc)
  end
  def get_annotation_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_annotation_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def apply(flags : UInt32) : HRESULT
    @lpVtbl.value.apply.unsafe_as(Proc(UInt32, HRESULT)).call(flags)
  end
  def compute_state_block_mask(pstateblockmask : D3D10_STATE_BLOCK_MASK*) : HRESULT
    @lpVtbl.value.compute_state_block_mask.unsafe_as(Proc(D3D10_STATE_BLOCK_MASK*, HRESULT)).call(pstateblockmask)
  end
end
struct LibWin32::ID3D10EffectTechnique
  def is_valid : LibC::BOOL
    @lpVtbl.value.is_valid.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_desc(pdesc : D3D10_TECHNIQUE_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_TECHNIQUE_DESC*, HRESULT)).call(pdesc)
  end
  def get_annotation_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_annotation_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_annotation_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_pass_by_index(index : UInt32) : ID3D10EffectPass
    @lpVtbl.value.get_pass_by_index.unsafe_as(Proc(UInt32, ID3D10EffectPass)).call(index)
  end
  def get_pass_by_name(name : PSTR) : ID3D10EffectPass
    @lpVtbl.value.get_pass_by_name.unsafe_as(Proc(PSTR, ID3D10EffectPass)).call(name)
  end
  def compute_state_block_mask(pstateblockmask : D3D10_STATE_BLOCK_MASK*) : HRESULT
    @lpVtbl.value.compute_state_block_mask.unsafe_as(Proc(D3D10_STATE_BLOCK_MASK*, HRESULT)).call(pstateblockmask)
  end
end
struct LibWin32::ID3D10Effect
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def is_valid : LibC::BOOL
    @lpVtbl.value.is_valid.unsafe_as(Proc(LibC::BOOL)).call
  end
  def is_pool : LibC::BOOL
    @lpVtbl.value.is_pool.unsafe_as(Proc(LibC::BOOL)).call
  end
  def get_device(ppdevice : ID3D10Device*) : HRESULT
    @lpVtbl.value.get_device.unsafe_as(Proc(ID3D10Device*, HRESULT)).call(ppdevice)
  end
  def get_desc(pdesc : D3D10_EFFECT_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_EFFECT_DESC*, HRESULT)).call(pdesc)
  end
  def get_constant_buffer_by_index(index : UInt32) : ID3D10EffectConstantBuffer
    @lpVtbl.value.get_constant_buffer_by_index.unsafe_as(Proc(UInt32, ID3D10EffectConstantBuffer)).call(index)
  end
  def get_constant_buffer_by_name(name : PSTR) : ID3D10EffectConstantBuffer
    @lpVtbl.value.get_constant_buffer_by_name.unsafe_as(Proc(PSTR, ID3D10EffectConstantBuffer)).call(name)
  end
  def get_variable_by_index(index : UInt32) : ID3D10EffectVariable
    @lpVtbl.value.get_variable_by_index.unsafe_as(Proc(UInt32, ID3D10EffectVariable)).call(index)
  end
  def get_variable_by_name(name : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_variable_by_name.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(name)
  end
  def get_variable_by_semantic(semantic : PSTR) : ID3D10EffectVariable
    @lpVtbl.value.get_variable_by_semantic.unsafe_as(Proc(PSTR, ID3D10EffectVariable)).call(semantic)
  end
  def get_technique_by_index(index : UInt32) : ID3D10EffectTechnique
    @lpVtbl.value.get_technique_by_index.unsafe_as(Proc(UInt32, ID3D10EffectTechnique)).call(index)
  end
  def get_technique_by_name(name : PSTR) : ID3D10EffectTechnique
    @lpVtbl.value.get_technique_by_name.unsafe_as(Proc(PSTR, ID3D10EffectTechnique)).call(name)
  end
  def optimize : HRESULT
    @lpVtbl.value.optimize.unsafe_as(Proc(HRESULT)).call
  end
  def is_optimized : LibC::BOOL
    @lpVtbl.value.is_optimized.unsafe_as(Proc(LibC::BOOL)).call
  end
end
struct LibWin32::ID3D10EffectPool
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def as_effect : ID3D10Effect
    @lpVtbl.value.as_effect.unsafe_as(Proc(ID3D10Effect)).call
  end
end
struct LibWin32::ID3D10BlendState1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : ID3D10Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID3D10Device*, Void)).call(ppdevice)
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def get_desc(pdesc : D3D10_BLEND_DESC*) : Void
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_BLEND_DESC*, Void)).call(pdesc)
  end
  def get_desc1(pdesc : D3D10_BLEND_DESC1*) : Void
    @lpVtbl.value.get_desc1.unsafe_as(Proc(D3D10_BLEND_DESC1*, Void)).call(pdesc)
  end
end
struct LibWin32::ID3D10ShaderResourceView1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_device(ppdevice : ID3D10Device*) : Void
    @lpVtbl.value.get_device.unsafe_as(Proc(ID3D10Device*, Void)).call(ppdevice)
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def get_resource(ppresource : ID3D10Resource*) : Void
    @lpVtbl.value.get_resource.unsafe_as(Proc(ID3D10Resource*, Void)).call(ppresource)
  end
  def get_desc(pdesc : D3D10_SHADER_RESOURCE_VIEW_DESC*) : Void
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_SHADER_RESOURCE_VIEW_DESC*, Void)).call(pdesc)
  end
  def get_desc1(pdesc : D3D10_SHADER_RESOURCE_VIEW_DESC1*) : Void
    @lpVtbl.value.get_desc1.unsafe_as(Proc(D3D10_SHADER_RESOURCE_VIEW_DESC1*, Void)).call(pdesc)
  end
end
struct LibWin32::ID3D10Device1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def vs_set_constant_buffers(startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D10Buffer*) : Void
    @lpVtbl.value.vs_set_constant_buffers.unsafe_as(Proc(UInt32, UInt32, ID3D10Buffer*, Void)).call(startslot, numbuffers, ppconstantbuffers)
  end
  def ps_set_shader_resources(startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D10ShaderResourceView*) : Void
    @lpVtbl.value.ps_set_shader_resources.unsafe_as(Proc(UInt32, UInt32, ID3D10ShaderResourceView*, Void)).call(startslot, numviews, ppshaderresourceviews)
  end
  def ps_set_shader(ppixelshader : ID3D10PixelShader) : Void
    @lpVtbl.value.ps_set_shader.unsafe_as(Proc(ID3D10PixelShader, Void)).call(ppixelshader)
  end
  def ps_set_samplers(startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D10SamplerState*) : Void
    @lpVtbl.value.ps_set_samplers.unsafe_as(Proc(UInt32, UInt32, ID3D10SamplerState*, Void)).call(startslot, numsamplers, ppsamplers)
  end
  def vs_set_shader(pvertexshader : ID3D10VertexShader) : Void
    @lpVtbl.value.vs_set_shader.unsafe_as(Proc(ID3D10VertexShader, Void)).call(pvertexshader)
  end
  def draw_indexed(indexcount : UInt32, startindexlocation : UInt32, basevertexlocation : Int32) : Void
    @lpVtbl.value.draw_indexed.unsafe_as(Proc(UInt32, UInt32, Int32, Void)).call(indexcount, startindexlocation, basevertexlocation)
  end
  def draw(vertexcount : UInt32, startvertexlocation : UInt32) : Void
    @lpVtbl.value.draw.unsafe_as(Proc(UInt32, UInt32, Void)).call(vertexcount, startvertexlocation)
  end
  def ps_set_constant_buffers(startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D10Buffer*) : Void
    @lpVtbl.value.ps_set_constant_buffers.unsafe_as(Proc(UInt32, UInt32, ID3D10Buffer*, Void)).call(startslot, numbuffers, ppconstantbuffers)
  end
  def ia_set_input_layout(pinputlayout : ID3D10InputLayout) : Void
    @lpVtbl.value.ia_set_input_layout.unsafe_as(Proc(ID3D10InputLayout, Void)).call(pinputlayout)
  end
  def ia_set_vertex_buffers(startslot : UInt32, numbuffers : UInt32, ppvertexbuffers : ID3D10Buffer*, pstrides : UInt32*, poffsets : UInt32*) : Void
    @lpVtbl.value.ia_set_vertex_buffers.unsafe_as(Proc(UInt32, UInt32, ID3D10Buffer*, UInt32*, UInt32*, Void)).call(startslot, numbuffers, ppvertexbuffers, pstrides, poffsets)
  end
  def ia_set_index_buffer(pindexbuffer : ID3D10Buffer, format : DXGI_FORMAT, offset : UInt32) : Void
    @lpVtbl.value.ia_set_index_buffer.unsafe_as(Proc(ID3D10Buffer, DXGI_FORMAT, UInt32, Void)).call(pindexbuffer, format, offset)
  end
  def draw_indexed_instanced(indexcountperinstance : UInt32, instancecount : UInt32, startindexlocation : UInt32, basevertexlocation : Int32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_indexed_instanced.unsafe_as(Proc(UInt32, UInt32, UInt32, Int32, UInt32, Void)).call(indexcountperinstance, instancecount, startindexlocation, basevertexlocation, startinstancelocation)
  end
  def draw_instanced(vertexcountperinstance : UInt32, instancecount : UInt32, startvertexlocation : UInt32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_instanced.unsafe_as(Proc(UInt32, UInt32, UInt32, UInt32, Void)).call(vertexcountperinstance, instancecount, startvertexlocation, startinstancelocation)
  end
  def gs_set_constant_buffers(startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D10Buffer*) : Void
    @lpVtbl.value.gs_set_constant_buffers.unsafe_as(Proc(UInt32, UInt32, ID3D10Buffer*, Void)).call(startslot, numbuffers, ppconstantbuffers)
  end
  def gs_set_shader(pshader : ID3D10GeometryShader) : Void
    @lpVtbl.value.gs_set_shader.unsafe_as(Proc(ID3D10GeometryShader, Void)).call(pshader)
  end
  def ia_set_primitive_topology(topology : D3D_PRIMITIVE_TOPOLOGY) : Void
    @lpVtbl.value.ia_set_primitive_topology.unsafe_as(Proc(D3D_PRIMITIVE_TOPOLOGY, Void)).call(topology)
  end
  def vs_set_shader_resources(startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D10ShaderResourceView*) : Void
    @lpVtbl.value.vs_set_shader_resources.unsafe_as(Proc(UInt32, UInt32, ID3D10ShaderResourceView*, Void)).call(startslot, numviews, ppshaderresourceviews)
  end
  def vs_set_samplers(startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D10SamplerState*) : Void
    @lpVtbl.value.vs_set_samplers.unsafe_as(Proc(UInt32, UInt32, ID3D10SamplerState*, Void)).call(startslot, numsamplers, ppsamplers)
  end
  def set_predication(ppredicate : ID3D10Predicate, predicatevalue : LibC::BOOL) : Void
    @lpVtbl.value.set_predication.unsafe_as(Proc(ID3D10Predicate, LibC::BOOL, Void)).call(ppredicate, predicatevalue)
  end
  def gs_set_shader_resources(startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D10ShaderResourceView*) : Void
    @lpVtbl.value.gs_set_shader_resources.unsafe_as(Proc(UInt32, UInt32, ID3D10ShaderResourceView*, Void)).call(startslot, numviews, ppshaderresourceviews)
  end
  def gs_set_samplers(startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D10SamplerState*) : Void
    @lpVtbl.value.gs_set_samplers.unsafe_as(Proc(UInt32, UInt32, ID3D10SamplerState*, Void)).call(startslot, numsamplers, ppsamplers)
  end
  def om_set_render_targets(numviews : UInt32, pprendertargetviews : ID3D10RenderTargetView*, pdepthstencilview : ID3D10DepthStencilView) : Void
    @lpVtbl.value.om_set_render_targets.unsafe_as(Proc(UInt32, ID3D10RenderTargetView*, ID3D10DepthStencilView, Void)).call(numviews, pprendertargetviews, pdepthstencilview)
  end
  def om_set_blend_state(pblendstate : ID3D10BlendState, blendfactor : Float32*, samplemask : UInt32) : Void
    @lpVtbl.value.om_set_blend_state.unsafe_as(Proc(ID3D10BlendState, Float32*, UInt32, Void)).call(pblendstate, blendfactor, samplemask)
  end
  def om_set_depth_stencil_state(pdepthstencilstate : ID3D10DepthStencilState, stencilref : UInt32) : Void
    @lpVtbl.value.om_set_depth_stencil_state.unsafe_as(Proc(ID3D10DepthStencilState, UInt32, Void)).call(pdepthstencilstate, stencilref)
  end
  def so_set_targets(numbuffers : UInt32, ppsotargets : ID3D10Buffer*, poffsets : UInt32*) : Void
    @lpVtbl.value.so_set_targets.unsafe_as(Proc(UInt32, ID3D10Buffer*, UInt32*, Void)).call(numbuffers, ppsotargets, poffsets)
  end
  def draw_auto : Void
    @lpVtbl.value.draw_auto.unsafe_as(Proc(Void)).call
  end
  def rs_set_state(prasterizerstate : ID3D10RasterizerState) : Void
    @lpVtbl.value.rs_set_state.unsafe_as(Proc(ID3D10RasterizerState, Void)).call(prasterizerstate)
  end
  def rs_set_viewports(numviewports : UInt32, pviewports : D3D10_VIEWPORT*) : Void
    @lpVtbl.value.rs_set_viewports.unsafe_as(Proc(UInt32, D3D10_VIEWPORT*, Void)).call(numviewports, pviewports)
  end
  def rs_set_scissor_rects(numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.rs_set_scissor_rects.unsafe_as(Proc(UInt32, RECT*, Void)).call(numrects, prects)
  end
  def copy_subresource_region(pdstresource : ID3D10Resource, dstsubresource : UInt32, dstx : UInt32, dsty : UInt32, dstz : UInt32, psrcresource : ID3D10Resource, srcsubresource : UInt32, psrcbox : D3D10_BOX*) : Void
    @lpVtbl.value.copy_subresource_region.unsafe_as(Proc(ID3D10Resource, UInt32, UInt32, UInt32, UInt32, ID3D10Resource, UInt32, D3D10_BOX*, Void)).call(pdstresource, dstsubresource, dstx, dsty, dstz, psrcresource, srcsubresource, psrcbox)
  end
  def copy_resource(pdstresource : ID3D10Resource, psrcresource : ID3D10Resource) : Void
    @lpVtbl.value.copy_resource.unsafe_as(Proc(ID3D10Resource, ID3D10Resource, Void)).call(pdstresource, psrcresource)
  end
  def update_subresource(pdstresource : ID3D10Resource, dstsubresource : UInt32, pdstbox : D3D10_BOX*, psrcdata : Void*, srcrowpitch : UInt32, srcdepthpitch : UInt32) : Void
    @lpVtbl.value.update_subresource.unsafe_as(Proc(ID3D10Resource, UInt32, D3D10_BOX*, Void*, UInt32, UInt32, Void)).call(pdstresource, dstsubresource, pdstbox, psrcdata, srcrowpitch, srcdepthpitch)
  end
  def clear_render_target_view(prendertargetview : ID3D10RenderTargetView, colorrgba : Float32*) : Void
    @lpVtbl.value.clear_render_target_view.unsafe_as(Proc(ID3D10RenderTargetView, Float32*, Void)).call(prendertargetview, colorrgba)
  end
  def clear_depth_stencil_view(pdepthstencilview : ID3D10DepthStencilView, clearflags : UInt32, depth : Float32, stencil : UInt8) : Void
    @lpVtbl.value.clear_depth_stencil_view.unsafe_as(Proc(ID3D10DepthStencilView, UInt32, Float32, UInt8, Void)).call(pdepthstencilview, clearflags, depth, stencil)
  end
  def generate_mips(pshaderresourceview : ID3D10ShaderResourceView) : Void
    @lpVtbl.value.generate_mips.unsafe_as(Proc(ID3D10ShaderResourceView, Void)).call(pshaderresourceview)
  end
  def resolve_subresource(pdstresource : ID3D10Resource, dstsubresource : UInt32, psrcresource : ID3D10Resource, srcsubresource : UInt32, format : DXGI_FORMAT) : Void
    @lpVtbl.value.resolve_subresource.unsafe_as(Proc(ID3D10Resource, UInt32, ID3D10Resource, UInt32, DXGI_FORMAT, Void)).call(pdstresource, dstsubresource, psrcresource, srcsubresource, format)
  end
  def vs_get_constant_buffers(startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D10Buffer*) : Void
    @lpVtbl.value.vs_get_constant_buffers.unsafe_as(Proc(UInt32, UInt32, ID3D10Buffer*, Void)).call(startslot, numbuffers, ppconstantbuffers)
  end
  def ps_get_shader_resources(startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D10ShaderResourceView*) : Void
    @lpVtbl.value.ps_get_shader_resources.unsafe_as(Proc(UInt32, UInt32, ID3D10ShaderResourceView*, Void)).call(startslot, numviews, ppshaderresourceviews)
  end
  def ps_get_shader(pppixelshader : ID3D10PixelShader*) : Void
    @lpVtbl.value.ps_get_shader.unsafe_as(Proc(ID3D10PixelShader*, Void)).call(pppixelshader)
  end
  def ps_get_samplers(startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D10SamplerState*) : Void
    @lpVtbl.value.ps_get_samplers.unsafe_as(Proc(UInt32, UInt32, ID3D10SamplerState*, Void)).call(startslot, numsamplers, ppsamplers)
  end
  def vs_get_shader(ppvertexshader : ID3D10VertexShader*) : Void
    @lpVtbl.value.vs_get_shader.unsafe_as(Proc(ID3D10VertexShader*, Void)).call(ppvertexshader)
  end
  def ps_get_constant_buffers(startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D10Buffer*) : Void
    @lpVtbl.value.ps_get_constant_buffers.unsafe_as(Proc(UInt32, UInt32, ID3D10Buffer*, Void)).call(startslot, numbuffers, ppconstantbuffers)
  end
  def ia_get_input_layout(ppinputlayout : ID3D10InputLayout*) : Void
    @lpVtbl.value.ia_get_input_layout.unsafe_as(Proc(ID3D10InputLayout*, Void)).call(ppinputlayout)
  end
  def ia_get_vertex_buffers(startslot : UInt32, numbuffers : UInt32, ppvertexbuffers : ID3D10Buffer*, pstrides : UInt32*, poffsets : UInt32*) : Void
    @lpVtbl.value.ia_get_vertex_buffers.unsafe_as(Proc(UInt32, UInt32, ID3D10Buffer*, UInt32*, UInt32*, Void)).call(startslot, numbuffers, ppvertexbuffers, pstrides, poffsets)
  end
  def ia_get_index_buffer(pindexbuffer : ID3D10Buffer*, format : DXGI_FORMAT*, offset : UInt32*) : Void
    @lpVtbl.value.ia_get_index_buffer.unsafe_as(Proc(ID3D10Buffer*, DXGI_FORMAT*, UInt32*, Void)).call(pindexbuffer, format, offset)
  end
  def gs_get_constant_buffers(startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D10Buffer*) : Void
    @lpVtbl.value.gs_get_constant_buffers.unsafe_as(Proc(UInt32, UInt32, ID3D10Buffer*, Void)).call(startslot, numbuffers, ppconstantbuffers)
  end
  def gs_get_shader(ppgeometryshader : ID3D10GeometryShader*) : Void
    @lpVtbl.value.gs_get_shader.unsafe_as(Proc(ID3D10GeometryShader*, Void)).call(ppgeometryshader)
  end
  def ia_get_primitive_topology(ptopology : D3D_PRIMITIVE_TOPOLOGY*) : Void
    @lpVtbl.value.ia_get_primitive_topology.unsafe_as(Proc(D3D_PRIMITIVE_TOPOLOGY*, Void)).call(ptopology)
  end
  def vs_get_shader_resources(startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D10ShaderResourceView*) : Void
    @lpVtbl.value.vs_get_shader_resources.unsafe_as(Proc(UInt32, UInt32, ID3D10ShaderResourceView*, Void)).call(startslot, numviews, ppshaderresourceviews)
  end
  def vs_get_samplers(startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D10SamplerState*) : Void
    @lpVtbl.value.vs_get_samplers.unsafe_as(Proc(UInt32, UInt32, ID3D10SamplerState*, Void)).call(startslot, numsamplers, ppsamplers)
  end
  def get_predication(pppredicate : ID3D10Predicate*, ppredicatevalue : LibC::BOOL*) : Void
    @lpVtbl.value.get_predication.unsafe_as(Proc(ID3D10Predicate*, LibC::BOOL*, Void)).call(pppredicate, ppredicatevalue)
  end
  def gs_get_shader_resources(startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D10ShaderResourceView*) : Void
    @lpVtbl.value.gs_get_shader_resources.unsafe_as(Proc(UInt32, UInt32, ID3D10ShaderResourceView*, Void)).call(startslot, numviews, ppshaderresourceviews)
  end
  def gs_get_samplers(startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D10SamplerState*) : Void
    @lpVtbl.value.gs_get_samplers.unsafe_as(Proc(UInt32, UInt32, ID3D10SamplerState*, Void)).call(startslot, numsamplers, ppsamplers)
  end
  def om_get_render_targets(numviews : UInt32, pprendertargetviews : ID3D10RenderTargetView*, ppdepthstencilview : ID3D10DepthStencilView*) : Void
    @lpVtbl.value.om_get_render_targets.unsafe_as(Proc(UInt32, ID3D10RenderTargetView*, ID3D10DepthStencilView*, Void)).call(numviews, pprendertargetviews, ppdepthstencilview)
  end
  def om_get_blend_state(ppblendstate : ID3D10BlendState*, blendfactor : Float32*, psamplemask : UInt32*) : Void
    @lpVtbl.value.om_get_blend_state.unsafe_as(Proc(ID3D10BlendState*, Float32*, UInt32*, Void)).call(ppblendstate, blendfactor, psamplemask)
  end
  def om_get_depth_stencil_state(ppdepthstencilstate : ID3D10DepthStencilState*, pstencilref : UInt32*) : Void
    @lpVtbl.value.om_get_depth_stencil_state.unsafe_as(Proc(ID3D10DepthStencilState*, UInt32*, Void)).call(ppdepthstencilstate, pstencilref)
  end
  def so_get_targets(numbuffers : UInt32, ppsotargets : ID3D10Buffer*, poffsets : UInt32*) : Void
    @lpVtbl.value.so_get_targets.unsafe_as(Proc(UInt32, ID3D10Buffer*, UInt32*, Void)).call(numbuffers, ppsotargets, poffsets)
  end
  def rs_get_state(pprasterizerstate : ID3D10RasterizerState*) : Void
    @lpVtbl.value.rs_get_state.unsafe_as(Proc(ID3D10RasterizerState*, Void)).call(pprasterizerstate)
  end
  def rs_get_viewports(numviewports : UInt32*, pviewports : D3D10_VIEWPORT*) : Void
    @lpVtbl.value.rs_get_viewports.unsafe_as(Proc(UInt32*, D3D10_VIEWPORT*, Void)).call(numviewports, pviewports)
  end
  def rs_get_scissor_rects(numrects : UInt32*, prects : RECT*) : Void
    @lpVtbl.value.rs_get_scissor_rects.unsafe_as(Proc(UInt32*, RECT*, Void)).call(numrects, prects)
  end
  def get_device_removed_reason : HRESULT
    @lpVtbl.value.get_device_removed_reason.unsafe_as(Proc(HRESULT)).call
  end
  def set_exception_mode(raiseflags : UInt32) : HRESULT
    @lpVtbl.value.set_exception_mode.unsafe_as(Proc(UInt32, HRESULT)).call(raiseflags)
  end
  def get_exception_mode : UInt32
    @lpVtbl.value.get_exception_mode.unsafe_as(Proc(UInt32)).call
  end
  def get_private_data(guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.unsafe_as(Proc(Guid*, UInt32*, Void*, HRESULT)).call(guid, pdatasize, pdata)
  end
  def set_private_data(guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.unsafe_as(Proc(Guid*, UInt32, Void*, HRESULT)).call(guid, datasize, pdata)
  end
  def set_private_data_interface(guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.unsafe_as(Proc(Guid*, IUnknown, HRESULT)).call(guid, pdata)
  end
  def clear_state : Void
    @lpVtbl.value.clear_state.unsafe_as(Proc(Void)).call
  end
  def flush : Void
    @lpVtbl.value.flush.unsafe_as(Proc(Void)).call
  end
  def create_buffer(pdesc : D3D10_BUFFER_DESC*, pinitialdata : D3D10_SUBRESOURCE_DATA*, ppbuffer : ID3D10Buffer*) : HRESULT
    @lpVtbl.value.create_buffer.unsafe_as(Proc(D3D10_BUFFER_DESC*, D3D10_SUBRESOURCE_DATA*, ID3D10Buffer*, HRESULT)).call(pdesc, pinitialdata, ppbuffer)
  end
  def create_texture1_d(pdesc : D3D10_TEXTURE1D_DESC*, pinitialdata : D3D10_SUBRESOURCE_DATA*, pptexture1d : ID3D10Texture1D*) : HRESULT
    @lpVtbl.value.create_texture1_d.unsafe_as(Proc(D3D10_TEXTURE1D_DESC*, D3D10_SUBRESOURCE_DATA*, ID3D10Texture1D*, HRESULT)).call(pdesc, pinitialdata, pptexture1d)
  end
  def create_texture2_d(pdesc : D3D10_TEXTURE2D_DESC*, pinitialdata : D3D10_SUBRESOURCE_DATA*, pptexture2d : ID3D10Texture2D*) : HRESULT
    @lpVtbl.value.create_texture2_d.unsafe_as(Proc(D3D10_TEXTURE2D_DESC*, D3D10_SUBRESOURCE_DATA*, ID3D10Texture2D*, HRESULT)).call(pdesc, pinitialdata, pptexture2d)
  end
  def create_texture3_d(pdesc : D3D10_TEXTURE3D_DESC*, pinitialdata : D3D10_SUBRESOURCE_DATA*, pptexture3d : ID3D10Texture3D*) : HRESULT
    @lpVtbl.value.create_texture3_d.unsafe_as(Proc(D3D10_TEXTURE3D_DESC*, D3D10_SUBRESOURCE_DATA*, ID3D10Texture3D*, HRESULT)).call(pdesc, pinitialdata, pptexture3d)
  end
  def create_shader_resource_view(presource : ID3D10Resource, pdesc : D3D10_SHADER_RESOURCE_VIEW_DESC*, ppsrview : ID3D10ShaderResourceView*) : HRESULT
    @lpVtbl.value.create_shader_resource_view.unsafe_as(Proc(ID3D10Resource, D3D10_SHADER_RESOURCE_VIEW_DESC*, ID3D10ShaderResourceView*, HRESULT)).call(presource, pdesc, ppsrview)
  end
  def create_render_target_view(presource : ID3D10Resource, pdesc : D3D10_RENDER_TARGET_VIEW_DESC*, pprtview : ID3D10RenderTargetView*) : HRESULT
    @lpVtbl.value.create_render_target_view.unsafe_as(Proc(ID3D10Resource, D3D10_RENDER_TARGET_VIEW_DESC*, ID3D10RenderTargetView*, HRESULT)).call(presource, pdesc, pprtview)
  end
  def create_depth_stencil_view(presource : ID3D10Resource, pdesc : D3D10_DEPTH_STENCIL_VIEW_DESC*, ppdepthstencilview : ID3D10DepthStencilView*) : HRESULT
    @lpVtbl.value.create_depth_stencil_view.unsafe_as(Proc(ID3D10Resource, D3D10_DEPTH_STENCIL_VIEW_DESC*, ID3D10DepthStencilView*, HRESULT)).call(presource, pdesc, ppdepthstencilview)
  end
  def create_input_layout(pinputelementdescs : D3D10_INPUT_ELEMENT_DESC*, numelements : UInt32, pshaderbytecodewithinputsignature : Void*, bytecodelength : LibC::UINT_PTR, ppinputlayout : ID3D10InputLayout*) : HRESULT
    @lpVtbl.value.create_input_layout.unsafe_as(Proc(D3D10_INPUT_ELEMENT_DESC*, UInt32, Void*, LibC::UINT_PTR, ID3D10InputLayout*, HRESULT)).call(pinputelementdescs, numelements, pshaderbytecodewithinputsignature, bytecodelength, ppinputlayout)
  end
  def create_vertex_shader(pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, ppvertexshader : ID3D10VertexShader*) : HRESULT
    @lpVtbl.value.create_vertex_shader.unsafe_as(Proc(Void*, LibC::UINT_PTR, ID3D10VertexShader*, HRESULT)).call(pshaderbytecode, bytecodelength, ppvertexshader)
  end
  def create_geometry_shader(pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, ppgeometryshader : ID3D10GeometryShader*) : HRESULT
    @lpVtbl.value.create_geometry_shader.unsafe_as(Proc(Void*, LibC::UINT_PTR, ID3D10GeometryShader*, HRESULT)).call(pshaderbytecode, bytecodelength, ppgeometryshader)
  end
  def create_geometry_shader_with_stream_output(pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, psodeclaration : D3D10_SO_DECLARATION_ENTRY*, numentries : UInt32, outputstreamstride : UInt32, ppgeometryshader : ID3D10GeometryShader*) : HRESULT
    @lpVtbl.value.create_geometry_shader_with_stream_output.unsafe_as(Proc(Void*, LibC::UINT_PTR, D3D10_SO_DECLARATION_ENTRY*, UInt32, UInt32, ID3D10GeometryShader*, HRESULT)).call(pshaderbytecode, bytecodelength, psodeclaration, numentries, outputstreamstride, ppgeometryshader)
  end
  def create_pixel_shader(pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pppixelshader : ID3D10PixelShader*) : HRESULT
    @lpVtbl.value.create_pixel_shader.unsafe_as(Proc(Void*, LibC::UINT_PTR, ID3D10PixelShader*, HRESULT)).call(pshaderbytecode, bytecodelength, pppixelshader)
  end
  def create_blend_state(pblendstatedesc : D3D10_BLEND_DESC*, ppblendstate : ID3D10BlendState*) : HRESULT
    @lpVtbl.value.create_blend_state.unsafe_as(Proc(D3D10_BLEND_DESC*, ID3D10BlendState*, HRESULT)).call(pblendstatedesc, ppblendstate)
  end
  def create_depth_stencil_state(pdepthstencildesc : D3D10_DEPTH_STENCIL_DESC*, ppdepthstencilstate : ID3D10DepthStencilState*) : HRESULT
    @lpVtbl.value.create_depth_stencil_state.unsafe_as(Proc(D3D10_DEPTH_STENCIL_DESC*, ID3D10DepthStencilState*, HRESULT)).call(pdepthstencildesc, ppdepthstencilstate)
  end
  def create_rasterizer_state(prasterizerdesc : D3D10_RASTERIZER_DESC*, pprasterizerstate : ID3D10RasterizerState*) : HRESULT
    @lpVtbl.value.create_rasterizer_state.unsafe_as(Proc(D3D10_RASTERIZER_DESC*, ID3D10RasterizerState*, HRESULT)).call(prasterizerdesc, pprasterizerstate)
  end
  def create_sampler_state(psamplerdesc : D3D10_SAMPLER_DESC*, ppsamplerstate : ID3D10SamplerState*) : HRESULT
    @lpVtbl.value.create_sampler_state.unsafe_as(Proc(D3D10_SAMPLER_DESC*, ID3D10SamplerState*, HRESULT)).call(psamplerdesc, ppsamplerstate)
  end
  def create_query(pquerydesc : D3D10_QUERY_DESC*, ppquery : ID3D10Query*) : HRESULT
    @lpVtbl.value.create_query.unsafe_as(Proc(D3D10_QUERY_DESC*, ID3D10Query*, HRESULT)).call(pquerydesc, ppquery)
  end
  def create_predicate(ppredicatedesc : D3D10_QUERY_DESC*, pppredicate : ID3D10Predicate*) : HRESULT
    @lpVtbl.value.create_predicate.unsafe_as(Proc(D3D10_QUERY_DESC*, ID3D10Predicate*, HRESULT)).call(ppredicatedesc, pppredicate)
  end
  def create_counter(pcounterdesc : D3D10_COUNTER_DESC*, ppcounter : ID3D10Counter*) : HRESULT
    @lpVtbl.value.create_counter.unsafe_as(Proc(D3D10_COUNTER_DESC*, ID3D10Counter*, HRESULT)).call(pcounterdesc, ppcounter)
  end
  def check_format_support(format : DXGI_FORMAT, pformatsupport : UInt32*) : HRESULT
    @lpVtbl.value.check_format_support.unsafe_as(Proc(DXGI_FORMAT, UInt32*, HRESULT)).call(format, pformatsupport)
  end
  def check_multisample_quality_levels(format : DXGI_FORMAT, samplecount : UInt32, pnumqualitylevels : UInt32*) : HRESULT
    @lpVtbl.value.check_multisample_quality_levels.unsafe_as(Proc(DXGI_FORMAT, UInt32, UInt32*, HRESULT)).call(format, samplecount, pnumqualitylevels)
  end
  def check_counter_info(pcounterinfo : D3D10_COUNTER_INFO*) : Void
    @lpVtbl.value.check_counter_info.unsafe_as(Proc(D3D10_COUNTER_INFO*, Void)).call(pcounterinfo)
  end
  def check_counter(pdesc : D3D10_COUNTER_DESC*, ptype : D3D10_COUNTER_TYPE*, pactivecounters : UInt32*, szname : UInt8*, pnamelength : UInt32*, szunits : UInt8*, punitslength : UInt32*, szdescription : UInt8*, pdescriptionlength : UInt32*) : HRESULT
    @lpVtbl.value.check_counter.unsafe_as(Proc(D3D10_COUNTER_DESC*, D3D10_COUNTER_TYPE*, UInt32*, UInt8*, UInt32*, UInt8*, UInt32*, UInt8*, UInt32*, HRESULT)).call(pdesc, ptype, pactivecounters, szname, pnamelength, szunits, punitslength, szdescription, pdescriptionlength)
  end
  def get_creation_flags : UInt32
    @lpVtbl.value.get_creation_flags.unsafe_as(Proc(UInt32)).call
  end
  def open_shared_resource(hresource : LibC::HANDLE, returnedinterface : Guid*, ppresource : Void**) : HRESULT
    @lpVtbl.value.open_shared_resource.unsafe_as(Proc(LibC::HANDLE, Guid*, Void**, HRESULT)).call(hresource, returnedinterface, ppresource)
  end
  def set_text_filter_size(width : UInt32, height : UInt32) : Void
    @lpVtbl.value.set_text_filter_size.unsafe_as(Proc(UInt32, UInt32, Void)).call(width, height)
  end
  def get_text_filter_size(pwidth : UInt32*, pheight : UInt32*) : Void
    @lpVtbl.value.get_text_filter_size.unsafe_as(Proc(UInt32*, UInt32*, Void)).call(pwidth, pheight)
  end
  def create_shader_resource_view1(presource : ID3D10Resource, pdesc : D3D10_SHADER_RESOURCE_VIEW_DESC1*, ppsrview : ID3D10ShaderResourceView1*) : HRESULT
    @lpVtbl.value.create_shader_resource_view1.unsafe_as(Proc(ID3D10Resource, D3D10_SHADER_RESOURCE_VIEW_DESC1*, ID3D10ShaderResourceView1*, HRESULT)).call(presource, pdesc, ppsrview)
  end
  def create_blend_state1(pblendstatedesc : D3D10_BLEND_DESC1*, ppblendstate : ID3D10BlendState1*) : HRESULT
    @lpVtbl.value.create_blend_state1.unsafe_as(Proc(D3D10_BLEND_DESC1*, ID3D10BlendState1*, HRESULT)).call(pblendstatedesc, ppblendstate)
  end
  def get_feature_level : D3D10_FEATURE_LEVEL1
    @lpVtbl.value.get_feature_level.unsafe_as(Proc(D3D10_FEATURE_LEVEL1)).call
  end
end
struct LibWin32::ID3D10ShaderReflection1
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_desc(pdesc : D3D10_SHADER_DESC*) : HRESULT
    @lpVtbl.value.get_desc.unsafe_as(Proc(D3D10_SHADER_DESC*, HRESULT)).call(pdesc)
  end
  def get_constant_buffer_by_index(index : UInt32) : ID3D10ShaderReflectionConstantBuffer
    @lpVtbl.value.get_constant_buffer_by_index.unsafe_as(Proc(UInt32, ID3D10ShaderReflectionConstantBuffer)).call(index)
  end
  def get_constant_buffer_by_name(name : PSTR) : ID3D10ShaderReflectionConstantBuffer
    @lpVtbl.value.get_constant_buffer_by_name.unsafe_as(Proc(PSTR, ID3D10ShaderReflectionConstantBuffer)).call(name)
  end
  def get_resource_binding_desc(resourceindex : UInt32, pdesc : D3D10_SHADER_INPUT_BIND_DESC*) : HRESULT
    @lpVtbl.value.get_resource_binding_desc.unsafe_as(Proc(UInt32, D3D10_SHADER_INPUT_BIND_DESC*, HRESULT)).call(resourceindex, pdesc)
  end
  def get_input_parameter_desc(parameterindex : UInt32, pdesc : D3D10_SIGNATURE_PARAMETER_DESC*) : HRESULT
    @lpVtbl.value.get_input_parameter_desc.unsafe_as(Proc(UInt32, D3D10_SIGNATURE_PARAMETER_DESC*, HRESULT)).call(parameterindex, pdesc)
  end
  def get_output_parameter_desc(parameterindex : UInt32, pdesc : D3D10_SIGNATURE_PARAMETER_DESC*) : HRESULT
    @lpVtbl.value.get_output_parameter_desc.unsafe_as(Proc(UInt32, D3D10_SIGNATURE_PARAMETER_DESC*, HRESULT)).call(parameterindex, pdesc)
  end
  def get_variable_by_name(name : PSTR) : ID3D10ShaderReflectionVariable
    @lpVtbl.value.get_variable_by_name.unsafe_as(Proc(PSTR, ID3D10ShaderReflectionVariable)).call(name)
  end
  def get_resource_binding_desc_by_name(name : PSTR, pdesc : D3D10_SHADER_INPUT_BIND_DESC*) : HRESULT
    @lpVtbl.value.get_resource_binding_desc_by_name.unsafe_as(Proc(PSTR, D3D10_SHADER_INPUT_BIND_DESC*, HRESULT)).call(name, pdesc)
  end
  def get_mov_instruction_count(pcount : UInt32*) : HRESULT
    @lpVtbl.value.get_mov_instruction_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pcount)
  end
  def get_movc_instruction_count(pcount : UInt32*) : HRESULT
    @lpVtbl.value.get_movc_instruction_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pcount)
  end
  def get_conversion_instruction_count(pcount : UInt32*) : HRESULT
    @lpVtbl.value.get_conversion_instruction_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pcount)
  end
  def get_bitwise_instruction_count(pcount : UInt32*) : HRESULT
    @lpVtbl.value.get_bitwise_instruction_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pcount)
  end
  def get_gs_input_primitive(pprim : D3D_PRIMITIVE*) : HRESULT
    @lpVtbl.value.get_gs_input_primitive.unsafe_as(Proc(D3D_PRIMITIVE*, HRESULT)).call(pprim)
  end
  def is_level9_shader(pblevel9shader : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_level9_shader.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pblevel9shader)
  end
  def is_sample_frequency_shader(pbsamplefrequency : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_sample_frequency_shader.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pbsamplefrequency)
  end
end
