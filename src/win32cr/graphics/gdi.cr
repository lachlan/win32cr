require "../foundation.cr"

{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link("delayimp")]
{% end %}
@[Link("user32")]
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/IGNORE:4199")]
{% end %}
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/DELAYLOAD:gdi32.dll")]
@[Link(ldflags: "/DELAYLOAD:msimg32.dll")]
@[Link(ldflags: "/DELAYLOAD:opengl32.dll")]
@[Link(ldflags: "/DELAYLOAD:fontsub.dll")]
@[Link(ldflags: "/DELAYLOAD:t2embed.dll")]
@[Link(ldflags: "/DELAYLOAD:user32.dll")]
{% else %}
@[Link("gdi32")]
@[Link("msimg32")]
@[Link("opengl32")]
@[Link("fontsub")]
@[Link("t2embed")]
@[Link("user32")]
{% end %}
lib LibWin32
  alias HDC = LibC::IntPtrT
  alias CreatedHDC = LibC::IntPtrT
  alias HBITMAP = LibC::IntPtrT
  alias HRGN = LibC::IntPtrT
  alias HPEN = LibC::IntPtrT
  alias HBRUSH = LibC::IntPtrT
  alias HFONT = LibC::IntPtrT
  alias HMETAFILE = LibC::IntPtrT
  alias HENHMETAFILE = LibC::IntPtrT
  alias HPALETTE = LibC::IntPtrT
  alias HdcMetdataFileHandle = LibC::IntPtrT
  alias HdcMetdataEnhFileHandle = LibC::IntPtrT
  alias HGDIOBJ = LibC::IntPtrT
  alias HMONITOR = LibC::IntPtrT

  GDI_ERROR = -1_i32
  ERROR = 0_u32
  NULLREGION = 1_u32
  SIMPLEREGION = 2_u32
  COMPLEXREGION = 3_u32
  RGN_ERROR = 0_u32
  MAXSTRETCHBLTMODE = 4_u32
  POLYFILL_LAST = 2_u32
  LAYOUT_BTT = 2_u32
  LAYOUT_VBH = 4_u32
  ASPECT_FILTERING = 1_u32
  META_SETBKCOLOR = 513_u32
  META_SETBKMODE = 258_u32
  META_SETMAPMODE = 259_u32
  META_SETROP2 = 260_u32
  META_SETRELABS = 261_u32
  META_SETPOLYFILLMODE = 262_u32
  META_SETSTRETCHBLTMODE = 263_u32
  META_SETTEXTCHAREXTRA = 264_u32
  META_SETTEXTCOLOR = 521_u32
  META_SETTEXTJUSTIFICATION = 522_u32
  META_SETWINDOWORG = 523_u32
  META_SETWINDOWEXT = 524_u32
  META_SETVIEWPORTORG = 525_u32
  META_SETVIEWPORTEXT = 526_u32
  META_OFFSETWINDOWORG = 527_u32
  META_SCALEWINDOWEXT = 1040_u32
  META_OFFSETVIEWPORTORG = 529_u32
  META_SCALEVIEWPORTEXT = 1042_u32
  META_LINETO = 531_u32
  META_MOVETO = 532_u32
  META_EXCLUDECLIPRECT = 1045_u32
  META_INTERSECTCLIPRECT = 1046_u32
  META_ARC = 2071_u32
  META_ELLIPSE = 1048_u32
  META_FLOODFILL = 1049_u32
  META_PIE = 2074_u32
  META_RECTANGLE = 1051_u32
  META_ROUNDRECT = 1564_u32
  META_PATBLT = 1565_u32
  META_SAVEDC = 30_u32
  META_SETPIXEL = 1055_u32
  META_OFFSETCLIPRGN = 544_u32
  META_TEXTOUT = 1313_u32
  META_BITBLT = 2338_u32
  META_STRETCHBLT = 2851_u32
  META_POLYGON = 804_u32
  META_POLYLINE = 805_u32
  META_ESCAPE = 1574_u32
  META_RESTOREDC = 295_u32
  META_FILLREGION = 552_u32
  META_FRAMEREGION = 1065_u32
  META_INVERTREGION = 298_u32
  META_PAINTREGION = 299_u32
  META_SELECTCLIPREGION = 300_u32
  META_SELECTOBJECT = 301_u32
  META_SETTEXTALIGN = 302_u32
  META_CHORD = 2096_u32
  META_SETMAPPERFLAGS = 561_u32
  META_EXTTEXTOUT = 2610_u32
  META_SETDIBTODEV = 3379_u32
  META_SELECTPALETTE = 564_u32
  META_REALIZEPALETTE = 53_u32
  META_ANIMATEPALETTE = 1078_u32
  META_SETPALENTRIES = 55_u32
  META_POLYPOLYGON = 1336_u32
  META_RESIZEPALETTE = 313_u32
  META_DIBBITBLT = 2368_u32
  META_DIBSTRETCHBLT = 2881_u32
  META_DIBCREATEPATTERNBRUSH = 322_u32
  META_STRETCHDIB = 3907_u32
  META_EXTFLOODFILL = 1352_u32
  META_SETLAYOUT = 329_u32
  META_DELETEOBJECT = 496_u32
  META_CREATEPALETTE = 247_u32
  META_CREATEPATTERNBRUSH = 505_u32
  META_CREATEPENINDIRECT = 762_u32
  META_CREATEFONTINDIRECT = 763_u32
  META_CREATEBRUSHINDIRECT = 764_u32
  META_CREATEREGION = 1791_u32
  NEWFRAME = 1_u32
  ABORTDOC = 2_u32
  NEXTBAND = 3_u32
  SETCOLORTABLE = 4_u32
  GETCOLORTABLE = 5_u32
  FLUSHOUTPUT = 6_u32
  DRAFTMODE = 7_u32
  QUERYESCSUPPORT = 8_u32
  SETABORTPROC = 9_u32
  STARTDOC = 10_u32
  ENDDOC = 11_u32
  GETPHYSPAGESIZE = 12_u32
  GETPRINTINGOFFSET = 13_u32
  GETSCALINGFACTOR = 14_u32
  MFCOMMENT = 15_u32
  GETPENWIDTH = 16_u32
  SETCOPYCOUNT = 17_u32
  SELECTPAPERSOURCE = 18_u32
  DEVICEDATA = 19_u32
  PASSTHROUGH = 19_u32
  GETTECHNOLGY = 20_u32
  GETTECHNOLOGY = 20_u32
  SETLINECAP = 21_u32
  SETLINEJOIN = 22_u32
  SETMITERLIMIT = 23_u32
  BANDINFO = 24_u32
  DRAWPATTERNRECT = 25_u32
  GETVECTORPENSIZE = 26_u32
  GETVECTORBRUSHSIZE = 27_u32
  ENABLEDUPLEX = 28_u32
  GETSETPAPERBINS = 29_u32
  GETSETPRINTORIENT = 30_u32
  ENUMPAPERBINS = 31_u32
  SETDIBSCALING = 32_u32
  EPSPRINTING = 33_u32
  ENUMPAPERMETRICS = 34_u32
  GETSETPAPERMETRICS = 35_u32
  POSTSCRIPT_DATA = 37_u32
  POSTSCRIPT_IGNORE = 38_u32
  MOUSETRAILS = 39_u32
  GETDEVICEUNITS = 42_u32
  GETEXTENDEDTEXTMETRICS = 256_u32
  GETEXTENTTABLE = 257_u32
  GETPAIRKERNTABLE = 258_u32
  GETTRACKKERNTABLE = 259_u32
  EXTTEXTOUT = 512_u32
  GETFACENAME = 513_u32
  DOWNLOADFACE = 514_u32
  ENABLERELATIVEWIDTHS = 768_u32
  ENABLEPAIRKERNING = 769_u32
  SETKERNTRACK = 770_u32
  SETALLJUSTVALUES = 771_u32
  SETCHARSET = 772_u32
  STRETCHBLT = 2048_u32
  METAFILE_DRIVER = 2049_u32
  GETSETSCREENPARAMS = 3072_u32
  QUERYDIBSUPPORT = 3073_u32
  BEGIN_PATH = 4096_u32
  CLIP_TO_PATH = 4097_u32
  END_PATH = 4098_u32
  EXT_DEVICE_CAPS = 4099_u32
  RESTORE_CTM = 4100_u32
  SAVE_CTM = 4101_u32
  SET_ARC_DIRECTION = 4102_u32
  SET_BACKGROUND_COLOR = 4103_u32
  SET_POLY_MODE = 4104_u32
  SET_SCREEN_ANGLE = 4105_u32
  SET_SPREAD = 4106_u32
  TRANSFORM_CTM = 4107_u32
  SET_CLIP_BOX = 4108_u32
  SET_BOUNDS = 4109_u32
  SET_MIRROR_MODE = 4110_u32
  OPENCHANNEL = 4110_u32
  DOWNLOADHEADER = 4111_u32
  CLOSECHANNEL = 4112_u32
  POSTSCRIPT_PASSTHROUGH = 4115_u32
  ENCAPSULATED_POSTSCRIPT = 4116_u32
  POSTSCRIPT_IDENTIFY = 4117_u32
  POSTSCRIPT_INJECTION = 4118_u32
  CHECKJPEGFORMAT = 4119_u32
  CHECKPNGFORMAT = 4120_u32
  GET_PS_FEATURESETTING = 4121_u32
  GDIPLUS_TS_QUERYVER = 4122_u32
  GDIPLUS_TS_RECORD = 4123_u32
  MILCORE_TS_QUERYVER_RESULT_FALSE = 0_u32
  MILCORE_TS_QUERYVER_RESULT_TRUE = 2147483647_u32
  SPCLPASSTHROUGH2 = 4568_u32
  PSIDENT_GDICENTRIC = 0_u32
  PSIDENT_PSCENTRIC = 1_u32
  PSINJECT_DLFONT = 3722304989_u32
  FEATURESETTING_NUP = 0_u32
  FEATURESETTING_OUTPUT = 1_u32
  FEATURESETTING_PSLEVEL = 2_u32
  FEATURESETTING_CUSTPAPER = 3_u32
  FEATURESETTING_MIRROR = 4_u32
  FEATURESETTING_NEGATIVE = 5_u32
  FEATURESETTING_PROTOCOL = 6_u32
  FEATURESETTING_PRIVATE_BEGIN = 4096_u32
  FEATURESETTING_PRIVATE_END = 8191_u32
  PSPROTOCOL_ASCII = 0_u32
  PSPROTOCOL_BCP = 1_u32
  PSPROTOCOL_TBCP = 2_u32
  PSPROTOCOL_BINARY = 3_u32
  QDI_SETDIBITS = 1_u32
  QDI_GETDIBITS = 2_u32
  QDI_DIBTOSCREEN = 4_u32
  QDI_STRETCHDIB = 8_u32
  SP_NOTREPORTED = 16384_u32
  SP_ERROR = -1_i32
  SP_APPABORT = -2_i32
  SP_USERABORT = -3_i32
  SP_OUTOFDISK = -4_i32
  SP_OUTOFMEMORY = -5_i32
  PR_JOBSTATUS = 0_u32
  LCS_CALIBRATED_RGB = 0_i32
  LCS_GM_BUSINESS = 1_i32
  LCS_GM_GRAPHICS = 2_i32
  LCS_GM_IMAGES = 4_i32
  LCS_GM_ABS_COLORIMETRIC = 8_i32
  CM_OUT_OF_GAMUT = 255_u32
  CM_IN_GAMUT = 0_u32
  BI_RGB = 0_i32
  BI_RLE8 = 1_i32
  BI_RLE4 = 2_i32
  BI_BITFIELDS = 3_i32
  BI_JPEG = 4_i32
  BI_PNG = 5_i32
  TMPF_FIXED_PITCH = 1_u32
  TMPF_VECTOR = 2_u32
  TMPF_DEVICE = 8_u32
  TMPF_TRUETYPE = 4_u32
  NTM_REGULAR = 64_i32
  NTM_BOLD = 32_i32
  NTM_ITALIC = 1_i32
  NTM_NONNEGATIVE_AC = 65536_u32
  NTM_PS_OPENTYPE = 131072_u32
  NTM_TT_OPENTYPE = 262144_u32
  NTM_MULTIPLEMASTER = 524288_u32
  NTM_TYPE1 = 1048576_u32
  NTM_DSIG = 2097152_u32
  LF_FACESIZE = 32_u32
  LF_FULLFACESIZE = 64_u32
  OUT_SCREEN_OUTLINE_PRECIS = 9_u32
  CLEARTYPE_NATURAL_QUALITY = 6_u32
  DEFAULT_PITCH = 0_u32
  FIXED_PITCH = 1_u32
  VARIABLE_PITCH = 2_u32
  MONO_FONT = 8_u32
  ANSI_CHARSET = 0_u32
  DEFAULT_CHARSET = 1_u32
  SYMBOL_CHARSET = 2_u32
  SHIFTJIS_CHARSET = 128_u32
  HANGEUL_CHARSET = 129_u32
  HANGUL_CHARSET = 129_u32
  GB2312_CHARSET = 134_u32
  CHINESEBIG5_CHARSET = 136_u32
  OEM_CHARSET = 255_u32
  JOHAB_CHARSET = 130_u32
  HEBREW_CHARSET = 177_u32
  ARABIC_CHARSET = 178_u32
  GREEK_CHARSET = 161_u32
  TURKISH_CHARSET = 162_u32
  VIETNAMESE_CHARSET = 163_u32
  THAI_CHARSET = 222_u32
  EASTEUROPE_CHARSET = 238_u32
  RUSSIAN_CHARSET = 204_u32
  MAC_CHARSET = 77_u32
  BALTIC_CHARSET = 186_u32
  FS_LATIN1 = 1_i32
  FS_LATIN2 = 2_i32
  FS_CYRILLIC = 4_i32
  FS_GREEK = 8_i32
  FS_TURKISH = 16_i32
  FS_HEBREW = 32_i32
  FS_ARABIC = 64_i32
  FS_BALTIC = 128_i32
  FS_VIETNAMESE = 256_i32
  FS_THAI = 65536_i32
  FS_JISJAPAN = 131072_i32
  FS_CHINESESIMP = 262144_i32
  FS_WANSUNG = 524288_i32
  FS_CHINESETRAD = 1048576_i32
  FS_JOHAB = 2097152_i32
  FS_SYMBOL = -2147483648_i32
  FW_DONTCARE = 0_u32
  FW_THIN = 100_u32
  FW_EXTRALIGHT = 200_u32
  FW_LIGHT = 300_u32
  FW_NORMAL = 400_u32
  FW_MEDIUM = 500_u32
  FW_SEMIBOLD = 600_u32
  FW_BOLD = 700_u32
  FW_EXTRABOLD = 800_u32
  FW_HEAVY = 900_u32
  FW_ULTRALIGHT = 200_u32
  FW_REGULAR = 400_u32
  FW_DEMIBOLD = 600_u32
  FW_ULTRABOLD = 800_u32
  FW_BLACK = 900_u32
  PANOSE_COUNT = 10_u32
  PAN_FAMILYTYPE_INDEX = 0_u32
  PAN_SERIFSTYLE_INDEX = 1_u32
  PAN_WEIGHT_INDEX = 2_u32
  PAN_PROPORTION_INDEX = 3_u32
  PAN_CONTRAST_INDEX = 4_u32
  PAN_STROKEVARIATION_INDEX = 5_u32
  PAN_ARMSTYLE_INDEX = 6_u32
  PAN_LETTERFORM_INDEX = 7_u32
  PAN_MIDLINE_INDEX = 8_u32
  PAN_XHEIGHT_INDEX = 9_u32
  PAN_CULTURE_LATIN = 0_u32
  PAN_ANY = 0_u32
  PAN_NO_FIT = 1_u32
  PAN_FAMILY_TEXT_DISPLAY = 2_u32
  PAN_FAMILY_SCRIPT = 3_u32
  PAN_FAMILY_DECORATIVE = 4_u32
  PAN_FAMILY_PICTORIAL = 5_u32
  PAN_SERIF_COVE = 2_u32
  PAN_SERIF_OBTUSE_COVE = 3_u32
  PAN_SERIF_SQUARE_COVE = 4_u32
  PAN_SERIF_OBTUSE_SQUARE_COVE = 5_u32
  PAN_SERIF_SQUARE = 6_u32
  PAN_SERIF_THIN = 7_u32
  PAN_SERIF_BONE = 8_u32
  PAN_SERIF_EXAGGERATED = 9_u32
  PAN_SERIF_TRIANGLE = 10_u32
  PAN_SERIF_NORMAL_SANS = 11_u32
  PAN_SERIF_OBTUSE_SANS = 12_u32
  PAN_SERIF_PERP_SANS = 13_u32
  PAN_SERIF_FLARED = 14_u32
  PAN_SERIF_ROUNDED = 15_u32
  PAN_WEIGHT_VERY_LIGHT = 2_u32
  PAN_WEIGHT_LIGHT = 3_u32
  PAN_WEIGHT_THIN = 4_u32
  PAN_WEIGHT_BOOK = 5_u32
  PAN_WEIGHT_MEDIUM = 6_u32
  PAN_WEIGHT_DEMI = 7_u32
  PAN_WEIGHT_BOLD = 8_u32
  PAN_WEIGHT_HEAVY = 9_u32
  PAN_WEIGHT_BLACK = 10_u32
  PAN_WEIGHT_NORD = 11_u32
  PAN_PROP_OLD_STYLE = 2_u32
  PAN_PROP_MODERN = 3_u32
  PAN_PROP_EVEN_WIDTH = 4_u32
  PAN_PROP_EXPANDED = 5_u32
  PAN_PROP_CONDENSED = 6_u32
  PAN_PROP_VERY_EXPANDED = 7_u32
  PAN_PROP_VERY_CONDENSED = 8_u32
  PAN_PROP_MONOSPACED = 9_u32
  PAN_CONTRAST_NONE = 2_u32
  PAN_CONTRAST_VERY_LOW = 3_u32
  PAN_CONTRAST_LOW = 4_u32
  PAN_CONTRAST_MEDIUM_LOW = 5_u32
  PAN_CONTRAST_MEDIUM = 6_u32
  PAN_CONTRAST_MEDIUM_HIGH = 7_u32
  PAN_CONTRAST_HIGH = 8_u32
  PAN_CONTRAST_VERY_HIGH = 9_u32
  PAN_STROKE_GRADUAL_DIAG = 2_u32
  PAN_STROKE_GRADUAL_TRAN = 3_u32
  PAN_STROKE_GRADUAL_VERT = 4_u32
  PAN_STROKE_GRADUAL_HORZ = 5_u32
  PAN_STROKE_RAPID_VERT = 6_u32
  PAN_STROKE_RAPID_HORZ = 7_u32
  PAN_STROKE_INSTANT_VERT = 8_u32
  PAN_STRAIGHT_ARMS_HORZ = 2_u32
  PAN_STRAIGHT_ARMS_WEDGE = 3_u32
  PAN_STRAIGHT_ARMS_VERT = 4_u32
  PAN_STRAIGHT_ARMS_SINGLE_SERIF = 5_u32
  PAN_STRAIGHT_ARMS_DOUBLE_SERIF = 6_u32
  PAN_BENT_ARMS_HORZ = 7_u32
  PAN_BENT_ARMS_WEDGE = 8_u32
  PAN_BENT_ARMS_VERT = 9_u32
  PAN_BENT_ARMS_SINGLE_SERIF = 10_u32
  PAN_BENT_ARMS_DOUBLE_SERIF = 11_u32
  PAN_LETT_NORMAL_CONTACT = 2_u32
  PAN_LETT_NORMAL_WEIGHTED = 3_u32
  PAN_LETT_NORMAL_BOXED = 4_u32
  PAN_LETT_NORMAL_FLATTENED = 5_u32
  PAN_LETT_NORMAL_ROUNDED = 6_u32
  PAN_LETT_NORMAL_OFF_CENTER = 7_u32
  PAN_LETT_NORMAL_SQUARE = 8_u32
  PAN_LETT_OBLIQUE_CONTACT = 9_u32
  PAN_LETT_OBLIQUE_WEIGHTED = 10_u32
  PAN_LETT_OBLIQUE_BOXED = 11_u32
  PAN_LETT_OBLIQUE_FLATTENED = 12_u32
  PAN_LETT_OBLIQUE_ROUNDED = 13_u32
  PAN_LETT_OBLIQUE_OFF_CENTER = 14_u32
  PAN_LETT_OBLIQUE_SQUARE = 15_u32
  PAN_MIDLINE_STANDARD_TRIMMED = 2_u32
  PAN_MIDLINE_STANDARD_POINTED = 3_u32
  PAN_MIDLINE_STANDARD_SERIFED = 4_u32
  PAN_MIDLINE_HIGH_TRIMMED = 5_u32
  PAN_MIDLINE_HIGH_POINTED = 6_u32
  PAN_MIDLINE_HIGH_SERIFED = 7_u32
  PAN_MIDLINE_CONSTANT_TRIMMED = 8_u32
  PAN_MIDLINE_CONSTANT_POINTED = 9_u32
  PAN_MIDLINE_CONSTANT_SERIFED = 10_u32
  PAN_MIDLINE_LOW_TRIMMED = 11_u32
  PAN_MIDLINE_LOW_POINTED = 12_u32
  PAN_MIDLINE_LOW_SERIFED = 13_u32
  PAN_XHEIGHT_CONSTANT_SMALL = 2_u32
  PAN_XHEIGHT_CONSTANT_STD = 3_u32
  PAN_XHEIGHT_CONSTANT_LARGE = 4_u32
  PAN_XHEIGHT_DUCKING_SMALL = 5_u32
  PAN_XHEIGHT_DUCKING_STD = 6_u32
  PAN_XHEIGHT_DUCKING_LARGE = 7_u32
  ELF_VENDOR_SIZE = 4_u32
  ELF_VERSION = 0_u32
  ELF_CULTURE_LATIN = 0_u32
  RASTER_FONTTYPE = 1_u32
  DEVICE_FONTTYPE = 2_u32
  TRUETYPE_FONTTYPE = 4_u32
  PC_RESERVED = 1_u32
  PC_EXPLICIT = 2_u32
  PC_NOCOLLAPSE = 4_u32
  BKMODE_LAST = 2_u32
  GM_LAST = 2_u32
  PT_CLOSEFIGURE = 1_u32
  PT_LINETO = 2_u32
  PT_BEZIERTO = 4_u32
  PT_MOVETO = 6_u32
  ABSOLUTE = 1_u32
  RELATIVE = 2_u32
  STOCK_LAST = 19_u32
  CLR_INVALID = 4294967295_u32
  BS_SOLID = 0_u32
  BS_NULL = 1_u32
  BS_HOLLOW = 1_u32
  BS_HATCHED = 2_u32
  BS_PATTERN = 3_u32
  BS_INDEXED = 4_u32
  BS_DIBPATTERN = 5_u32
  BS_DIBPATTERNPT = 6_u32
  BS_PATTERN8X8 = 7_u32
  BS_DIBPATTERN8X8 = 8_u32
  BS_MONOPATTERN = 9_u32
  HS_API_MAX = 12_u32
  DT_PLOTTER = 0_u32
  DT_RASDISPLAY = 1_u32
  DT_RASPRINTER = 2_u32
  DT_RASCAMERA = 3_u32
  DT_CHARSTREAM = 4_u32
  DT_METAFILE = 5_u32
  DT_DISPFILE = 6_u32
  CC_NONE = 0_u32
  CC_CIRCLES = 1_u32
  CC_PIE = 2_u32
  CC_CHORD = 4_u32
  CC_ELLIPSES = 8_u32
  CC_WIDE = 16_u32
  CC_STYLED = 32_u32
  CC_WIDESTYLED = 64_u32
  CC_INTERIORS = 128_u32
  CC_ROUNDRECT = 256_u32
  LC_NONE = 0_u32
  LC_POLYLINE = 2_u32
  LC_MARKER = 4_u32
  LC_POLYMARKER = 8_u32
  LC_WIDE = 16_u32
  LC_STYLED = 32_u32
  LC_WIDESTYLED = 64_u32
  LC_INTERIORS = 128_u32
  PC_NONE = 0_u32
  PC_POLYGON = 1_u32
  PC_RECTANGLE = 2_u32
  PC_WINDPOLYGON = 4_u32
  PC_TRAPEZOID = 4_u32
  PC_SCANLINE = 8_u32
  PC_WIDE = 16_u32
  PC_STYLED = 32_u32
  PC_WIDESTYLED = 64_u32
  PC_INTERIORS = 128_u32
  PC_POLYPOLYGON = 256_u32
  PC_PATHS = 512_u32
  CP_NONE = 0_u32
  CP_RECTANGLE = 1_u32
  CP_REGION = 2_u32
  TC_OP_CHARACTER = 1_u32
  TC_OP_STROKE = 2_u32
  TC_CP_STROKE = 4_u32
  TC_CR_90 = 8_u32
  TC_CR_ANY = 16_u32
  TC_SF_X_YINDEP = 32_u32
  TC_SA_DOUBLE = 64_u32
  TC_SA_INTEGER = 128_u32
  TC_SA_CONTIN = 256_u32
  TC_EA_DOUBLE = 512_u32
  TC_IA_ABLE = 1024_u32
  TC_UA_ABLE = 2048_u32
  TC_SO_ABLE = 4096_u32
  TC_RA_ABLE = 8192_u32
  TC_VA_ABLE = 16384_u32
  TC_RESERVED = 32768_u32
  TC_SCROLLBLT = 65536_u32
  RC_BITBLT = 1_u32
  RC_BANDING = 2_u32
  RC_SCALING = 4_u32
  RC_BITMAP64 = 8_u32
  RC_GDI20_OUTPUT = 16_u32
  RC_GDI20_STATE = 32_u32
  RC_SAVEBITMAP = 64_u32
  RC_DI_BITMAP = 128_u32
  RC_PALETTE = 256_u32
  RC_DIBTODEV = 512_u32
  RC_BIGFONT = 1024_u32
  RC_STRETCHBLT = 2048_u32
  RC_FLOODFILL = 4096_u32
  RC_STRETCHDIB = 8192_u32
  RC_OP_DX_OUTPUT = 16384_u32
  RC_DEVBITS = 32768_u32
  SB_NONE = 0_u32
  SB_CONST_ALPHA = 1_u32
  SB_PIXEL_ALPHA = 2_u32
  SB_PREMULT_ALPHA = 4_u32
  SB_GRAD_RECT = 16_u32
  SB_GRAD_TRI = 32_u32
  CM_NONE = 0_u32
  CM_DEVICE_ICM = 1_u32
  CM_GAMMA_RAMP = 2_u32
  CM_CMYK_COLOR = 4_u32
  SYSPAL_ERROR = 0_u32
  CBM_INIT = 4_i32
  CCHFORMNAME = 32_u32
  DM_SPECVERSION = 1025_u32
  DM_ORIENTATION = 1_i32
  DM_PAPERSIZE = 2_i32
  DM_PAPERLENGTH = 4_i32
  DM_PAPERWIDTH = 8_i32
  DM_SCALE = 16_i32
  DM_POSITION = 32_i32
  DM_NUP = 64_i32
  DM_DISPLAYORIENTATION = 128_i32
  DM_COPIES = 256_i32
  DM_DEFAULTSOURCE = 512_i32
  DM_PRINTQUALITY = 1024_i32
  DM_COLOR = 2048_i32
  DM_DUPLEX = 4096_i32
  DM_YRESOLUTION = 8192_i32
  DM_TTOPTION = 16384_i32
  DM_COLLATE = 32768_i32
  DM_FORMNAME = 65536_i32
  DM_LOGPIXELS = 131072_i32
  DM_BITSPERPEL = 262144_i32
  DM_PELSWIDTH = 524288_i32
  DM_PELSHEIGHT = 1048576_i32
  DM_DISPLAYFLAGS = 2097152_i32
  DM_DISPLAYFREQUENCY = 4194304_i32
  DM_ICMMETHOD = 8388608_i32
  DM_ICMINTENT = 16777216_i32
  DM_MEDIATYPE = 33554432_i32
  DM_DITHERTYPE = 67108864_i32
  DM_PANNINGWIDTH = 134217728_i32
  DM_PANNINGHEIGHT = 268435456_i32
  DM_DISPLAYFIXEDOUTPUT = 536870912_i32
  DMORIENT_PORTRAIT = 1_u32
  DMORIENT_LANDSCAPE = 2_u32
  DMPAPER_LETTER = 1_u32
  DMPAPER_LETTERSMALL = 2_u32
  DMPAPER_TABLOID = 3_u32
  DMPAPER_LEDGER = 4_u32
  DMPAPER_LEGAL = 5_u32
  DMPAPER_STATEMENT = 6_u32
  DMPAPER_EXECUTIVE = 7_u32
  DMPAPER_A3 = 8_u32
  DMPAPER_A4 = 9_u32
  DMPAPER_A4SMALL = 10_u32
  DMPAPER_A5 = 11_u32
  DMPAPER_B4 = 12_u32
  DMPAPER_B5 = 13_u32
  DMPAPER_FOLIO = 14_u32
  DMPAPER_QUARTO = 15_u32
  DMPAPER_10X14 = 16_u32
  DMPAPER_11X17 = 17_u32
  DMPAPER_NOTE = 18_u32
  DMPAPER_ENV_9 = 19_u32
  DMPAPER_ENV_10 = 20_u32
  DMPAPER_ENV_11 = 21_u32
  DMPAPER_ENV_12 = 22_u32
  DMPAPER_ENV_14 = 23_u32
  DMPAPER_CSHEET = 24_u32
  DMPAPER_DSHEET = 25_u32
  DMPAPER_ESHEET = 26_u32
  DMPAPER_ENV_DL = 27_u32
  DMPAPER_ENV_C5 = 28_u32
  DMPAPER_ENV_C3 = 29_u32
  DMPAPER_ENV_C4 = 30_u32
  DMPAPER_ENV_C6 = 31_u32
  DMPAPER_ENV_C65 = 32_u32
  DMPAPER_ENV_B4 = 33_u32
  DMPAPER_ENV_B5 = 34_u32
  DMPAPER_ENV_B6 = 35_u32
  DMPAPER_ENV_ITALY = 36_u32
  DMPAPER_ENV_MONARCH = 37_u32
  DMPAPER_ENV_PERSONAL = 38_u32
  DMPAPER_FANFOLD_US = 39_u32
  DMPAPER_FANFOLD_STD_GERMAN = 40_u32
  DMPAPER_FANFOLD_LGL_GERMAN = 41_u32
  DMPAPER_ISO_B4 = 42_u32
  DMPAPER_JAPANESE_POSTCARD = 43_u32
  DMPAPER_9X11 = 44_u32
  DMPAPER_10X11 = 45_u32
  DMPAPER_15X11 = 46_u32
  DMPAPER_ENV_INVITE = 47_u32
  DMPAPER_RESERVED_48 = 48_u32
  DMPAPER_RESERVED_49 = 49_u32
  DMPAPER_LETTER_EXTRA = 50_u32
  DMPAPER_LEGAL_EXTRA = 51_u32
  DMPAPER_TABLOID_EXTRA = 52_u32
  DMPAPER_A4_EXTRA = 53_u32
  DMPAPER_LETTER_TRANSVERSE = 54_u32
  DMPAPER_A4_TRANSVERSE = 55_u32
  DMPAPER_LETTER_EXTRA_TRANSVERSE = 56_u32
  DMPAPER_A_PLUS = 57_u32
  DMPAPER_B_PLUS = 58_u32
  DMPAPER_LETTER_PLUS = 59_u32
  DMPAPER_A4_PLUS = 60_u32
  DMPAPER_A5_TRANSVERSE = 61_u32
  DMPAPER_B5_TRANSVERSE = 62_u32
  DMPAPER_A3_EXTRA = 63_u32
  DMPAPER_A5_EXTRA = 64_u32
  DMPAPER_B5_EXTRA = 65_u32
  DMPAPER_A2 = 66_u32
  DMPAPER_A3_TRANSVERSE = 67_u32
  DMPAPER_A3_EXTRA_TRANSVERSE = 68_u32
  DMPAPER_DBL_JAPANESE_POSTCARD = 69_u32
  DMPAPER_A6 = 70_u32
  DMPAPER_JENV_KAKU2 = 71_u32
  DMPAPER_JENV_KAKU3 = 72_u32
  DMPAPER_JENV_CHOU3 = 73_u32
  DMPAPER_JENV_CHOU4 = 74_u32
  DMPAPER_LETTER_ROTATED = 75_u32
  DMPAPER_A3_ROTATED = 76_u32
  DMPAPER_A4_ROTATED = 77_u32
  DMPAPER_A5_ROTATED = 78_u32
  DMPAPER_B4_JIS_ROTATED = 79_u32
  DMPAPER_B5_JIS_ROTATED = 80_u32
  DMPAPER_JAPANESE_POSTCARD_ROTATED = 81_u32
  DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED = 82_u32
  DMPAPER_A6_ROTATED = 83_u32
  DMPAPER_JENV_KAKU2_ROTATED = 84_u32
  DMPAPER_JENV_KAKU3_ROTATED = 85_u32
  DMPAPER_JENV_CHOU3_ROTATED = 86_u32
  DMPAPER_JENV_CHOU4_ROTATED = 87_u32
  DMPAPER_B6_JIS = 88_u32
  DMPAPER_B6_JIS_ROTATED = 89_u32
  DMPAPER_12X11 = 90_u32
  DMPAPER_JENV_YOU4 = 91_u32
  DMPAPER_JENV_YOU4_ROTATED = 92_u32
  DMPAPER_P16K = 93_u32
  DMPAPER_P32K = 94_u32
  DMPAPER_P32KBIG = 95_u32
  DMPAPER_PENV_1 = 96_u32
  DMPAPER_PENV_2 = 97_u32
  DMPAPER_PENV_3 = 98_u32
  DMPAPER_PENV_4 = 99_u32
  DMPAPER_PENV_5 = 100_u32
  DMPAPER_PENV_6 = 101_u32
  DMPAPER_PENV_7 = 102_u32
  DMPAPER_PENV_8 = 103_u32
  DMPAPER_PENV_9 = 104_u32
  DMPAPER_PENV_10 = 105_u32
  DMPAPER_P16K_ROTATED = 106_u32
  DMPAPER_P32K_ROTATED = 107_u32
  DMPAPER_P32KBIG_ROTATED = 108_u32
  DMPAPER_PENV_1_ROTATED = 109_u32
  DMPAPER_PENV_2_ROTATED = 110_u32
  DMPAPER_PENV_3_ROTATED = 111_u32
  DMPAPER_PENV_4_ROTATED = 112_u32
  DMPAPER_PENV_5_ROTATED = 113_u32
  DMPAPER_PENV_6_ROTATED = 114_u32
  DMPAPER_PENV_7_ROTATED = 115_u32
  DMPAPER_PENV_8_ROTATED = 116_u32
  DMPAPER_PENV_9_ROTATED = 117_u32
  DMPAPER_PENV_10_ROTATED = 118_u32
  DMPAPER_LAST = 118_u32
  DMPAPER_USER = 256_u32
  DMBIN_UPPER = 1_u32
  DMBIN_ONLYONE = 1_u32
  DMBIN_LOWER = 2_u32
  DMBIN_MIDDLE = 3_u32
  DMBIN_MANUAL = 4_u32
  DMBIN_ENVELOPE = 5_u32
  DMBIN_ENVMANUAL = 6_u32
  DMBIN_AUTO = 7_u32
  DMBIN_TRACTOR = 8_u32
  DMBIN_SMALLFMT = 9_u32
  DMBIN_LARGEFMT = 10_u32
  DMBIN_LARGECAPACITY = 11_u32
  DMBIN_CASSETTE = 14_u32
  DMBIN_FORMSOURCE = 15_u32
  DMBIN_LAST = 15_u32
  DMBIN_USER = 256_u32
  DMRES_DRAFT = -1_i32
  DMRES_LOW = -2_i32
  DMRES_MEDIUM = -3_i32
  DMRES_HIGH = -4_i32
  DMCOLOR_MONOCHROME = 1_u32
  DMCOLOR_COLOR = 2_u32
  DMDUP_SIMPLEX = 1_u32
  DMDUP_VERTICAL = 2_u32
  DMDUP_HORIZONTAL = 3_u32
  DMTT_BITMAP = 1_u32
  DMTT_DOWNLOAD = 2_u32
  DMTT_SUBDEV = 3_u32
  DMTT_DOWNLOAD_OUTLINE = 4_u32
  DMCOLLATE_FALSE = 0_u32
  DMCOLLATE_TRUE = 1_u32
  DMDO_DEFAULT = 0_u32
  DMDO_90 = 1_u32
  DMDO_180 = 2_u32
  DMDO_270 = 3_u32
  DMDFO_DEFAULT = 0_u32
  DMDFO_STRETCH = 1_u32
  DMDFO_CENTER = 2_u32
  DM_INTERLACED = 2_u32
  DMDISPLAYFLAGS_TEXTMODE = 4_u32
  DMNUP_SYSTEM = 1_u32
  DMNUP_ONEUP = 2_u32
  DMICMMETHOD_NONE = 1_u32
  DMICMMETHOD_SYSTEM = 2_u32
  DMICMMETHOD_DRIVER = 3_u32
  DMICMMETHOD_DEVICE = 4_u32
  DMICMMETHOD_USER = 256_u32
  DMICM_SATURATE = 1_u32
  DMICM_CONTRAST = 2_u32
  DMICM_COLORIMETRIC = 3_u32
  DMICM_ABS_COLORIMETRIC = 4_u32
  DMICM_USER = 256_u32
  DMMEDIA_STANDARD = 1_u32
  DMMEDIA_TRANSPARENCY = 2_u32
  DMMEDIA_GLOSSY = 3_u32
  DMMEDIA_USER = 256_u32
  DMDITHER_NONE = 1_u32
  DMDITHER_COARSE = 2_u32
  DMDITHER_FINE = 3_u32
  DMDITHER_LINEART = 4_u32
  DMDITHER_ERRORDIFFUSION = 5_u32
  DMDITHER_RESERVED6 = 6_u32
  DMDITHER_RESERVED7 = 7_u32
  DMDITHER_RESERVED8 = 8_u32
  DMDITHER_RESERVED9 = 9_u32
  DMDITHER_GRAYSCALE = 10_u32
  DMDITHER_USER = 256_u32
  DISPLAY_DEVICE_ATTACHED_TO_DESKTOP = 1_u32
  DISPLAY_DEVICE_MULTI_DRIVER = 2_u32
  DISPLAY_DEVICE_PRIMARY_DEVICE = 4_u32
  DISPLAY_DEVICE_MIRRORING_DRIVER = 8_u32
  DISPLAY_DEVICE_VGA_COMPATIBLE = 16_u32
  DISPLAY_DEVICE_REMOVABLE = 32_u32
  DISPLAY_DEVICE_ACC_DRIVER = 64_u32
  DISPLAY_DEVICE_MODESPRUNED = 134217728_u32
  DISPLAY_DEVICE_RDPUDD = 16777216_u32
  DISPLAY_DEVICE_REMOTE = 67108864_u32
  DISPLAY_DEVICE_DISCONNECT = 33554432_u32
  DISPLAY_DEVICE_TS_COMPATIBLE = 2097152_u32
  DISPLAY_DEVICE_UNSAFE_MODES_ON = 524288_u32
  DISPLAY_DEVICE_ACTIVE = 1_u32
  DISPLAY_DEVICE_ATTACHED = 2_u32
  DISPLAYCONFIG_MAXPATH = 1024_u32
  DISPLAYCONFIG_PATH_MODE_IDX_INVALID = 4294967295_u32
  DISPLAYCONFIG_PATH_TARGET_MODE_IDX_INVALID = 65535_u32
  DISPLAYCONFIG_PATH_DESKTOP_IMAGE_IDX_INVALID = 65535_u32
  DISPLAYCONFIG_PATH_SOURCE_MODE_IDX_INVALID = 65535_u32
  DISPLAYCONFIG_PATH_CLONE_GROUP_INVALID = 65535_u32
  DISPLAYCONFIG_SOURCE_IN_USE = 1_u32
  DISPLAYCONFIG_TARGET_IN_USE = 1_u32
  DISPLAYCONFIG_TARGET_FORCIBLE = 2_u32
  DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_BOOT = 4_u32
  DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_PATH = 8_u32
  DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_SYSTEM = 16_u32
  DISPLAYCONFIG_TARGET_IS_HMD = 32_u32
  DISPLAYCONFIG_PATH_ACTIVE = 1_u32
  DISPLAYCONFIG_PATH_PREFERRED_UNSCALED = 4_u32
  DISPLAYCONFIG_PATH_SUPPORT_VIRTUAL_MODE = 8_u32
  DISPLAYCONFIG_PATH_VALID_FLAGS = 29_u32
  QDC_ALL_PATHS = 1_u32
  QDC_ONLY_ACTIVE_PATHS = 2_u32
  QDC_DATABASE_CURRENT = 4_u32
  QDC_VIRTUAL_MODE_AWARE = 16_u32
  QDC_INCLUDE_HMD = 32_u32
  QDC_VIRTUAL_REFRESH_RATE_AWARE = 64_u32
  SDC_TOPOLOGY_INTERNAL = 1_u32
  SDC_TOPOLOGY_CLONE = 2_u32
  SDC_TOPOLOGY_EXTEND = 4_u32
  SDC_TOPOLOGY_EXTERNAL = 8_u32
  SDC_TOPOLOGY_SUPPLIED = 16_u32
  SDC_USE_SUPPLIED_DISPLAY_CONFIG = 32_u32
  SDC_VALIDATE = 64_u32
  SDC_APPLY = 128_u32
  SDC_NO_OPTIMIZATION = 256_u32
  SDC_SAVE_TO_DATABASE = 512_u32
  SDC_ALLOW_CHANGES = 1024_u32
  SDC_PATH_PERSIST_IF_REQUIRED = 2048_u32
  SDC_FORCE_MODE_ENUMERATION = 4096_u32
  SDC_ALLOW_PATH_ORDER_CHANGES = 8192_u32
  SDC_VIRTUAL_MODE_AWARE = 32768_u32
  SDC_VIRTUAL_REFRESH_RATE_AWARE = 131072_u32
  RDH_RECTANGLES = 1_u32
  SYSRGN = 4_u32
  TT_POLYGON_TYPE = 24_u32
  TT_PRIM_LINE = 1_u32
  TT_PRIM_QSPLINE = 2_u32
  TT_PRIM_CSPLINE = 3_u32
  GCP_DBCS = 1_u32
  GCP_ERROR = 32768_u32
  FLI_MASK = 4155_u32
  FLI_GLYPHS = 262144_i32
  GCP_JUSTIFYIN = 2097152_i32
  GCPCLASS_LATIN = 1_u32
  GCPCLASS_HEBREW = 2_u32
  GCPCLASS_ARABIC = 2_u32
  GCPCLASS_NEUTRAL = 3_u32
  GCPCLASS_LOCALNUMBER = 4_u32
  GCPCLASS_LATINNUMBER = 5_u32
  GCPCLASS_LATINNUMERICTERMINATOR = 6_u32
  GCPCLASS_LATINNUMERICSEPARATOR = 7_u32
  GCPCLASS_NUMERICSEPARATOR = 8_u32
  GCPCLASS_PREBOUNDLTR = 128_u32
  GCPCLASS_PREBOUNDRTL = 64_u32
  GCPCLASS_POSTBOUNDLTR = 32_u32
  GCPCLASS_POSTBOUNDRTL = 16_u32
  GCPGLYPH_LINKBEFORE = 32768_u32
  GCPGLYPH_LINKAFTER = 16384_u32
  TT_AVAILABLE = 1_u32
  TT_ENABLED = 2_u32
  PFD_TYPE_RGBA = 0_u32
  PFD_TYPE_COLORINDEX = 1_u32
  PFD_MAIN_PLANE = 0_u32
  PFD_OVERLAY_PLANE = 1_u32
  PFD_UNDERLAY_PLANE = -1_i32
  PFD_DOUBLEBUFFER = 1_u32
  PFD_STEREO = 2_u32
  PFD_DRAW_TO_WINDOW = 4_u32
  PFD_DRAW_TO_BITMAP = 8_u32
  PFD_SUPPORT_GDI = 16_u32
  PFD_SUPPORT_OPENGL = 32_u32
  PFD_GENERIC_FORMAT = 64_u32
  PFD_NEED_PALETTE = 128_u32
  PFD_NEED_SYSTEM_PALETTE = 256_u32
  PFD_SWAP_EXCHANGE = 512_u32
  PFD_SWAP_COPY = 1024_u32
  PFD_SWAP_LAYER_BUFFERS = 2048_u32
  PFD_GENERIC_ACCELERATED = 4096_u32
  PFD_SUPPORT_DIRECTDRAW = 8192_u32
  PFD_DIRECT3D_ACCELERATED = 16384_u32
  PFD_SUPPORT_COMPOSITION = 32768_u32
  PFD_DEPTH_DONTCARE = 536870912_u32
  PFD_DOUBLEBUFFER_DONTCARE = 1073741824_u32
  PFD_STEREO_DONTCARE = 2147483648_u32
  DC_BINADJUST = 19_u32
  DC_EMF_COMPLIANT = 20_u32
  DC_DATATYPE_PRODUCED = 21_u32
  DC_MANUFACTURER = 23_u32
  DC_MODEL = 24_u32
  PRINTRATEUNIT_PPM = 1_u32
  PRINTRATEUNIT_CPS = 2_u32
  PRINTRATEUNIT_LPM = 3_u32
  PRINTRATEUNIT_IPM = 4_u32
  DCTT_BITMAP = 1_i32
  DCTT_DOWNLOAD = 2_i32
  DCTT_SUBDEV = 4_i32
  DCTT_DOWNLOAD_OUTLINE = 8_i32
  DCBA_FACEUPNONE = 0_u32
  DCBA_FACEUPCENTER = 1_u32
  DCBA_FACEUPLEFT = 2_u32
  DCBA_FACEUPRIGHT = 3_u32
  DCBA_FACEDOWNNONE = 256_u32
  DCBA_FACEDOWNCENTER = 257_u32
  DCBA_FACEDOWNLEFT = 258_u32
  DCBA_FACEDOWNRIGHT = 259_u32
  GS_8BIT_INDICES = 1_u32
  GGI_MARK_NONEXISTING_GLYPHS = 1_u32
  MM_MAX_NUMAXES = 16_u32
  MM_MAX_AXES_NAMELEN = 16_u32
  GDIREGISTERDDRAWPACKETVERSION = 1_u32
  AC_SRC_OVER = 0_u32
  AC_SRC_ALPHA = 1_u32
  GRADIENT_FILL_OP_FLAG = 255_u32
  CA_NEGATIVE = 1_u32
  CA_LOG_FILTER = 2_u32
  ILLUMINANT_DEVICE_DEFAULT = 0_u32
  ILLUMINANT_A = 1_u32
  ILLUMINANT_B = 2_u32
  ILLUMINANT_C = 3_u32
  ILLUMINANT_D50 = 4_u32
  ILLUMINANT_D55 = 5_u32
  ILLUMINANT_D65 = 6_u32
  ILLUMINANT_D75 = 7_u32
  ILLUMINANT_F2 = 8_u32
  ILLUMINANT_MAX_INDEX = 8_u32
  ILLUMINANT_TUNGSTEN = 1_u32
  ILLUMINANT_DAYLIGHT = 3_u32
  ILLUMINANT_FLUORESCENT = 8_u32
  ILLUMINANT_NTSC = 3_u32
  DI_APPBANDING = 1_u32
  DI_ROPS_READ_DESTINATION = 2_u32
  FONTMAPPER_MAX = 10_u32
  ICM_OFF = 1_u32
  ICM_ON = 2_u32
  ICM_QUERY = 3_u32
  ICM_DONE_OUTSIDEDC = 4_u32
  ENHMETA_SIGNATURE = 1179469088_u32
  ENHMETA_STOCK_OBJECT = 2147483648_u32
  EMR_HEADER = 1_u32
  EMR_POLYBEZIER = 2_u32
  EMR_POLYGON = 3_u32
  EMR_POLYLINE = 4_u32
  EMR_POLYBEZIERTO = 5_u32
  EMR_POLYLINETO = 6_u32
  EMR_POLYPOLYLINE = 7_u32
  EMR_POLYPOLYGON = 8_u32
  EMR_SETWINDOWEXTEX = 9_u32
  EMR_SETWINDOWORGEX = 10_u32
  EMR_SETVIEWPORTEXTEX = 11_u32
  EMR_SETVIEWPORTORGEX = 12_u32
  EMR_SETBRUSHORGEX = 13_u32
  EMR_EOF = 14_u32
  EMR_SETPIXELV = 15_u32
  EMR_SETMAPPERFLAGS = 16_u32
  EMR_SETMAPMODE = 17_u32
  EMR_SETBKMODE = 18_u32
  EMR_SETPOLYFILLMODE = 19_u32
  EMR_SETROP2 = 20_u32
  EMR_SETSTRETCHBLTMODE = 21_u32
  EMR_SETTEXTALIGN = 22_u32
  EMR_SETCOLORADJUSTMENT = 23_u32
  EMR_SETTEXTCOLOR = 24_u32
  EMR_SETBKCOLOR = 25_u32
  EMR_OFFSETCLIPRGN = 26_u32
  EMR_MOVETOEX = 27_u32
  EMR_SETMETARGN = 28_u32
  EMR_EXCLUDECLIPRECT = 29_u32
  EMR_INTERSECTCLIPRECT = 30_u32
  EMR_SCALEVIEWPORTEXTEX = 31_u32
  EMR_SCALEWINDOWEXTEX = 32_u32
  EMR_SAVEDC = 33_u32
  EMR_RESTOREDC = 34_u32
  EMR_SETWORLDTRANSFORM = 35_u32
  EMR_MODIFYWORLDTRANSFORM = 36_u32
  EMR_SELECTOBJECT = 37_u32
  EMR_CREATEPEN = 38_u32
  EMR_CREATEBRUSHINDIRECT = 39_u32
  EMR_DELETEOBJECT = 40_u32
  EMR_ANGLEARC = 41_u32
  EMR_ELLIPSE = 42_u32
  EMR_RECTANGLE = 43_u32
  EMR_ROUNDRECT = 44_u32
  EMR_ARC = 45_u32
  EMR_CHORD = 46_u32
  EMR_PIE = 47_u32
  EMR_SELECTPALETTE = 48_u32
  EMR_CREATEPALETTE = 49_u32
  EMR_SETPALETTEENTRIES = 50_u32
  EMR_RESIZEPALETTE = 51_u32
  EMR_REALIZEPALETTE = 52_u32
  EMR_EXTFLOODFILL = 53_u32
  EMR_LINETO = 54_u32
  EMR_ARCTO = 55_u32
  EMR_POLYDRAW = 56_u32
  EMR_SETARCDIRECTION = 57_u32
  EMR_SETMITERLIMIT = 58_u32
  EMR_BEGINPATH = 59_u32
  EMR_ENDPATH = 60_u32
  EMR_CLOSEFIGURE = 61_u32
  EMR_FILLPATH = 62_u32
  EMR_STROKEANDFILLPATH = 63_u32
  EMR_STROKEPATH = 64_u32
  EMR_FLATTENPATH = 65_u32
  EMR_WIDENPATH = 66_u32
  EMR_SELECTCLIPPATH = 67_u32
  EMR_ABORTPATH = 68_u32
  EMR_GDICOMMENT = 70_u32
  EMR_FILLRGN = 71_u32
  EMR_FRAMERGN = 72_u32
  EMR_INVERTRGN = 73_u32
  EMR_PAINTRGN = 74_u32
  EMR_EXTSELECTCLIPRGN = 75_u32
  EMR_BITBLT = 76_u32
  EMR_STRETCHBLT = 77_u32
  EMR_MASKBLT = 78_u32
  EMR_PLGBLT = 79_u32
  EMR_SETDIBITSTODEVICE = 80_u32
  EMR_STRETCHDIBITS = 81_u32
  EMR_EXTCREATEFONTINDIRECTW = 82_u32
  EMR_EXTTEXTOUTA = 83_u32
  EMR_EXTTEXTOUTW = 84_u32
  EMR_POLYBEZIER16 = 85_u32
  EMR_POLYGON16 = 86_u32
  EMR_POLYLINE16 = 87_u32
  EMR_POLYBEZIERTO16 = 88_u32
  EMR_POLYLINETO16 = 89_u32
  EMR_POLYPOLYLINE16 = 90_u32
  EMR_POLYPOLYGON16 = 91_u32
  EMR_POLYDRAW16 = 92_u32
  EMR_CREATEMONOBRUSH = 93_u32
  EMR_CREATEDIBPATTERNBRUSHPT = 94_u32
  EMR_EXTCREATEPEN = 95_u32
  EMR_POLYTEXTOUTA = 96_u32
  EMR_POLYTEXTOUTW = 97_u32
  EMR_SETICMMODE = 98_u32
  EMR_CREATECOLORSPACE = 99_u32
  EMR_SETCOLORSPACE = 100_u32
  EMR_DELETECOLORSPACE = 101_u32
  EMR_GLSRECORD = 102_u32
  EMR_GLSBOUNDEDRECORD = 103_u32
  EMR_PIXELFORMAT = 104_u32
  EMR_RESERVED_105 = 105_u32
  EMR_RESERVED_106 = 106_u32
  EMR_RESERVED_107 = 107_u32
  EMR_RESERVED_108 = 108_u32
  EMR_RESERVED_109 = 109_u32
  EMR_RESERVED_110 = 110_u32
  EMR_COLORCORRECTPALETTE = 111_u32
  EMR_SETICMPROFILEA = 112_u32
  EMR_SETICMPROFILEW = 113_u32
  EMR_ALPHABLEND = 114_u32
  EMR_SETLAYOUT = 115_u32
  EMR_TRANSPARENTBLT = 116_u32
  EMR_RESERVED_117 = 117_u32
  EMR_GRADIENTFILL = 118_u32
  EMR_RESERVED_119 = 119_u32
  EMR_RESERVED_120 = 120_u32
  EMR_COLORMATCHTOTARGETW = 121_u32
  EMR_CREATECOLORSPACEW = 122_u32
  EMR_MIN = 1_u32
  EMR_MAX = 122_u32
  SETICMPROFILE_EMBEDED = 1_u32
  CREATECOLORSPACE_EMBEDED = 1_u32
  COLORMATCHTOTARGET_EMBEDED = 1_u32
  GDICOMMENT_IDENTIFIER = 1128875079_u32
  GDICOMMENT_WINDOWS_METAFILE = 2147483649_u32
  GDICOMMENT_BEGINGROUP = 2_u32
  GDICOMMENT_ENDGROUP = 3_u32
  GDICOMMENT_MULTIFORMATS = 1073741828_u32
  EPS_SIGNATURE = 1179865157_u32
  GDICOMMENT_UNICODE_STRING = 64_u32
  GDICOMMENT_UNICODE_END = 128_u32
  WGL_FONT_LINES = 0_u32
  WGL_FONT_POLYGONS = 1_u32
  LPD_DOUBLEBUFFER = 1_u32
  LPD_STEREO = 2_u32
  LPD_SUPPORT_GDI = 16_u32
  LPD_SUPPORT_OPENGL = 32_u32
  LPD_SHARE_DEPTH = 64_u32
  LPD_SHARE_STENCIL = 128_u32
  LPD_SHARE_ACCUM = 256_u32
  LPD_SWAP_EXCHANGE = 512_u32
  LPD_SWAP_COPY = 1024_u32
  LPD_TRANSPARENT = 4096_u32
  LPD_TYPE_RGBA = 0_u32
  LPD_TYPE_COLORINDEX = 1_u32
  WGL_SWAP_MAIN_PLANE = 1_u32
  WGL_SWAP_OVERLAY1 = 2_u32
  WGL_SWAP_OVERLAY2 = 4_u32
  WGL_SWAP_OVERLAY3 = 8_u32
  WGL_SWAP_OVERLAY4 = 16_u32
  WGL_SWAP_OVERLAY5 = 32_u32
  WGL_SWAP_OVERLAY6 = 64_u32
  WGL_SWAP_OVERLAY7 = 128_u32
  WGL_SWAP_OVERLAY8 = 256_u32
  WGL_SWAP_OVERLAY9 = 512_u32
  WGL_SWAP_OVERLAY10 = 1024_u32
  WGL_SWAP_OVERLAY11 = 2048_u32
  WGL_SWAP_OVERLAY12 = 4096_u32
  WGL_SWAP_OVERLAY13 = 8192_u32
  WGL_SWAP_OVERLAY14 = 16384_u32
  WGL_SWAP_OVERLAY15 = 32768_u32
  WGL_SWAP_UNDERLAY1 = 65536_u32
  WGL_SWAP_UNDERLAY2 = 131072_u32
  WGL_SWAP_UNDERLAY3 = 262144_u32
  WGL_SWAP_UNDERLAY4 = 524288_u32
  WGL_SWAP_UNDERLAY5 = 1048576_u32
  WGL_SWAP_UNDERLAY6 = 2097152_u32
  WGL_SWAP_UNDERLAY7 = 4194304_u32
  WGL_SWAP_UNDERLAY8 = 8388608_u32
  WGL_SWAP_UNDERLAY9 = 16777216_u32
  WGL_SWAP_UNDERLAY10 = 33554432_u32
  WGL_SWAP_UNDERLAY11 = 67108864_u32
  WGL_SWAP_UNDERLAY12 = 134217728_u32
  WGL_SWAP_UNDERLAY13 = 268435456_u32
  WGL_SWAP_UNDERLAY14 = 536870912_u32
  WGL_SWAP_UNDERLAY15 = 1073741824_u32
  WGL_SWAPMULTIPLE_MAX = 16_u32
  NEWTRANSPARENT = 3_u32
  QUERYROPSUPPORT = 40_u32
  SELECTDIB = 41_u32
  SC_SCREENSAVE = 61760_u32
  TTFCFP_SUBSET = 0_u32
  TTFCFP_SUBSET1 = 1_u32
  TTFCFP_DELTA = 2_u32
  TTFCFP_APPLE_PLATFORMID = 1_u32
  TTFCFP_MS_PLATFORMID = 3_u32
  TTFCFP_DONT_CARE = 65535_u32
  TTFCFP_LANG_KEEP_ALL = 0_u32
  TTFCFP_FLAGS_SUBSET = 1_u32
  TTFCFP_FLAGS_COMPRESS = 2_u32
  TTFCFP_FLAGS_TTC = 4_u32
  TTFCFP_FLAGS_GLYPHLIST = 8_u32
  TTFMFP_SUBSET = 0_u32
  TTFMFP_SUBSET1 = 1_u32
  TTFMFP_DELTA = 2_u32
  ERR_GENERIC = 1000_u32
  ERR_READOUTOFBOUNDS = 1001_u32
  ERR_WRITEOUTOFBOUNDS = 1002_u32
  ERR_READCONTROL = 1003_u32
  ERR_WRITECONTROL = 1004_u32
  ERR_MEM = 1005_u32
  ERR_FORMAT = 1006_u32
  ERR_WOULD_GROW = 1007_u32
  ERR_VERSION = 1008_u32
  ERR_NO_GLYPHS = 1009_u32
  ERR_INVALID_MERGE_FORMATS = 1010_u32
  ERR_INVALID_MERGE_CHECKSUMS = 1011_u32
  ERR_INVALID_MERGE_NUMGLYPHS = 1012_u32
  ERR_INVALID_DELTA_FORMAT = 1013_u32
  ERR_NOT_TTC = 1014_u32
  ERR_INVALID_TTC_INDEX = 1015_u32
  ERR_MISSING_CMAP = 1030_u32
  ERR_MISSING_GLYF = 1031_u32
  ERR_MISSING_HEAD = 1032_u32
  ERR_MISSING_HHEA = 1033_u32
  ERR_MISSING_HMTX = 1034_u32
  ERR_MISSING_LOCA = 1035_u32
  ERR_MISSING_MAXP = 1036_u32
  ERR_MISSING_NAME = 1037_u32
  ERR_MISSING_POST = 1038_u32
  ERR_MISSING_OS2 = 1039_u32
  ERR_MISSING_VHEA = 1040_u32
  ERR_MISSING_VMTX = 1041_u32
  ERR_MISSING_HHEA_OR_VHEA = 1042_u32
  ERR_MISSING_HMTX_OR_VMTX = 1043_u32
  ERR_MISSING_EBDT = 1044_u32
  ERR_INVALID_CMAP = 1060_u32
  ERR_INVALID_GLYF = 1061_u32
  ERR_INVALID_HEAD = 1062_u32
  ERR_INVALID_HHEA = 1063_u32
  ERR_INVALID_HMTX = 1064_u32
  ERR_INVALID_LOCA = 1065_u32
  ERR_INVALID_MAXP = 1066_u32
  ERR_INVALID_NAME = 1067_u32
  ERR_INVALID_POST = 1068_u32
  ERR_INVALID_OS2 = 1069_u32
  ERR_INVALID_VHEA = 1070_u32
  ERR_INVALID_VMTX = 1071_u32
  ERR_INVALID_HHEA_OR_VHEA = 1072_u32
  ERR_INVALID_HMTX_OR_VMTX = 1073_u32
  ERR_INVALID_TTO = 1080_u32
  ERR_INVALID_GSUB = 1081_u32
  ERR_INVALID_GPOS = 1082_u32
  ERR_INVALID_GDEF = 1083_u32
  ERR_INVALID_JSTF = 1084_u32
  ERR_INVALID_BASE = 1085_u32
  ERR_INVALID_EBLC = 1086_u32
  ERR_INVALID_LTSH = 1087_u32
  ERR_INVALID_VDMX = 1088_u32
  ERR_INVALID_HDMX = 1089_u32
  ERR_PARAMETER0 = 1100_u32
  ERR_PARAMETER1 = 1101_u32
  ERR_PARAMETER2 = 1102_u32
  ERR_PARAMETER3 = 1103_u32
  ERR_PARAMETER4 = 1104_u32
  ERR_PARAMETER5 = 1105_u32
  ERR_PARAMETER6 = 1106_u32
  ERR_PARAMETER7 = 1107_u32
  ERR_PARAMETER8 = 1108_u32
  ERR_PARAMETER9 = 1109_u32
  ERR_PARAMETER10 = 1110_u32
  ERR_PARAMETER11 = 1111_u32
  ERR_PARAMETER12 = 1112_u32
  ERR_PARAMETER13 = 1113_u32
  ERR_PARAMETER14 = 1114_u32
  ERR_PARAMETER15 = 1115_u32
  ERR_PARAMETER16 = 1116_u32
  CHARSET_DEFAULT = 1_u32
  CHARSET_GLYPHIDX = 3_u32
  TTEMBED_FAILIFVARIATIONSIMULATED = 16_u32
  TTEMBED_WEBOBJECT = 128_u32
  TTEMBED_XORENCRYPTDATA = 268435456_u32
  TTEMBED_VARIATIONSIMULATED = 1_u32
  TTEMBED_EUDCEMBEDDED = 2_u32
  TTEMBED_SUBSETCANCEL = 4_u32
  TTLOAD_PRIVATE = 1_u32
  TTLOAD_EUDC_OVERWRITE = 2_u32
  TTLOAD_EUDC_SET = 4_u32
  TTDELETE_DONTREMOVEFONT = 1_u32
  E_NONE = 0_i32
  E_API_NOTIMPL = 1_i32
  E_CHARCODECOUNTINVALID = 2_i32
  E_CHARCODESETINVALID = 3_i32
  E_DEVICETRUETYPEFONT = 4_i32
  E_HDCINVALID = 6_i32
  E_NOFREEMEMORY = 7_i32
  E_FONTREFERENCEINVALID = 8_i32
  E_NOTATRUETYPEFONT = 10_i32
  E_ERRORACCESSINGFONTDATA = 12_i32
  E_ERRORACCESSINGFACENAME = 13_i32
  E_ERRORUNICODECONVERSION = 17_i32
  E_ERRORCONVERTINGCHARS = 18_i32
  E_EXCEPTION = 19_i32
  E_RESERVEDPARAMNOTNULL = 20_i32
  E_CHARSETINVALID = 21_i32
  E_FILE_NOT_FOUND = 23_i32
  E_TTC_INDEX_OUT_OF_RANGE = 24_i32
  E_INPUTPARAMINVALID = 25_i32
  E_ERRORCOMPRESSINGFONTDATA = 256_i32
  E_FONTDATAINVALID = 258_i32
  E_NAMECHANGEFAILED = 259_i32
  E_FONTNOTEMBEDDABLE = 260_i32
  E_PRIVSINVALID = 261_i32
  E_SUBSETTINGFAILED = 262_i32
  E_READFROMSTREAMFAILED = 263_i32
  E_SAVETOSTREAMFAILED = 264_i32
  E_NOOS2 = 265_i32
  E_T2NOFREEMEMORY = 266_i32
  E_ERRORREADINGFONTDATA = 267_i32
  E_FLAGSINVALID = 268_i32
  E_ERRORCREATINGFONTFILE = 269_i32
  E_FONTALREADYEXISTS = 270_i32
  E_FONTNAMEALREADYEXISTS = 271_i32
  E_FONTINSTALLFAILED = 272_i32
  E_ERRORDECOMPRESSINGFONTDATA = 273_i32
  E_ERRORACCESSINGEXCLUDELIST = 274_i32
  E_FACENAMEINVALID = 275_i32
  E_STREAMINVALID = 276_i32
  E_STATUSINVALID = 277_i32
  E_PRIVSTATUSINVALID = 278_i32
  E_PERMISSIONSINVALID = 279_i32
  E_PBENABLEDINVALID = 280_i32
  E_SUBSETTINGEXCEPTION = 281_i32
  E_SUBSTRING_TEST_FAIL = 282_i32
  E_FONTVARIATIONSIMULATED = 283_i32
  E_FONTFAMILYNAMENOTINFULL = 285_i32
  E_ADDFONTFAILED = 512_i32
  E_COULDNTCREATETEMPFILE = 513_i32
  E_FONTFILECREATEFAILED = 515_i32
  E_WINDOWSAPI = 516_i32
  E_FONTFILENOTFOUND = 517_i32
  E_RESOURCEFILECREATEFAILED = 518_i32
  E_ERROREXPANDINGFONTDATA = 519_i32
  E_ERRORGETTINGDC = 520_i32
  E_EXCEPTIONINDECOMPRESSION = 521_i32
  E_EXCEPTIONINCOMPRESSION = 522_i32

  alias FONTENUMPROCA = Proc(LOGFONTA*, TEXTMETRICA*, UInt32, LPARAM, Int32)
  alias FONTENUMPROCW = Proc(LOGFONTW*, TEXTMETRICW*, UInt32, LPARAM, Int32)
  alias GOBJENUMPROC = Proc(Void*, LPARAM, Int32)
  alias LINEDDAPROC = Proc(Int32, Int32, LPARAM, Void)
  alias LPFNDEVMODE = Proc(LibC::HANDLE, HINSTANCE, DEVMODEA*, PSTR, PSTR, DEVMODEA*, PSTR, UInt32, UInt32)
  alias LPFNDEVCAPS = Proc(PSTR, PSTR, UInt32, PSTR, DEVMODEA*, UInt32)
  alias MFENUMPROC = Proc(HDC, HANDLETABLE*, METARECORD*, Int32, LPARAM, Int32)
  alias ENHMFENUMPROC = Proc(HDC, HANDLETABLE*, ENHMETARECORD*, Int32, LPARAM, Int32)
  alias CFP_ALLOCPROC = Proc(LibC::UINT_PTR, Void*)
  alias CFP_REALLOCPROC = Proc(Void*, LibC::UINT_PTR, Void*)
  alias CFP_FREEPROC = Proc(Void*, Void)
  alias READEMBEDPROC = Proc(Void*, Void*, UInt32, UInt32)
  alias WRITEEMBEDPROC = Proc(Void*, Void*, UInt32, UInt32)
  alias GRAYSTRINGPROC = Proc(HDC, LPARAM, Int32, LibC::BOOL)
  alias DRAWSTATEPROC = Proc(HDC, LPARAM, LibC::UINT_PTR, Int32, Int32, LibC::BOOL)
  alias MONITORENUMPROC = Proc(HMONITOR, HDC, RECT*, LPARAM, LibC::BOOL)


  enum R2_MODE : Int32
    R2_BLACK = 1
    R2_NOTMERGEPEN = 2
    R2_MASKNOTPEN = 3
    R2_NOTCOPYPEN = 4
    R2_MASKPENNOT = 5
    R2_NOT = 6
    R2_XORPEN = 7
    R2_NOTMASKPEN = 8
    R2_MASKPEN = 9
    R2_NOTXORPEN = 10
    R2_NOP = 11
    R2_MERGENOTPEN = 12
    R2_COPYPEN = 13
    R2_MERGEPENNOT = 14
    R2_MERGEPEN = 15
    R2_WHITE = 16
    R2_LAST = 16
  end

  enum RGN_COMBINE_MODE : Int32
    RGN_AND = 1
    RGN_OR = 2
    RGN_XOR = 3
    RGN_DIFF = 4
    RGN_COPY = 5
    RGN_MIN = 1
    RGN_MAX = 5
  end

  enum ETO_OPTIONS : UInt32
    ETO_OPAQUE = 2
    ETO_CLIPPED = 4
    ETO_GLYPH_INDEX = 16
    ETO_RTLREADING = 128
    ETO_NUMERICSLOCAL = 1024
    ETO_NUMERICSLATIN = 2048
    ETO_IGNORELANGUAGE = 4096
    ETO_PDY = 8192
    ETO_REVERSE_INDEX_MAP = 65536
  end

  enum OBJ_TYPE : Int32
    OBJ_PEN = 1
    OBJ_BRUSH = 2
    OBJ_DC = 3
    OBJ_METADC = 4
    OBJ_PAL = 5
    OBJ_FONT = 6
    OBJ_BITMAP = 7
    OBJ_REGION = 8
    OBJ_METAFILE = 9
    OBJ_MEMDC = 10
    OBJ_EXTPEN = 11
    OBJ_ENHMETADC = 12
    OBJ_ENHMETAFILE = 13
    OBJ_COLORSPACE = 14
  end

  enum ROP_CODE : UInt32
    SRCCOPY = 13369376
    SRCPAINT = 15597702
    SRCAND = 8913094
    SRCINVERT = 6684742
    SRCERASE = 4457256
    NOTSRCCOPY = 3342344
    NOTSRCERASE = 1114278
    MERGECOPY = 12583114
    MERGEPAINT = 12255782
    PATCOPY = 15728673
    PATPAINT = 16452105
    PATINVERT = 5898313
    DSTINVERT = 5570569
    BLACKNESS = 66
    WHITENESS = 16711778
    NOMIRRORBITMAP = 2147483648
    CAPTUREBLT = 1073741824
  end

  enum DIB_USAGE : UInt32
    DIB_RGB_COLORS = 0
    DIB_PAL_COLORS = 1
  end

  enum DRAWEDGE_FLAGS : UInt32
    BDR_RAISEDOUTER = 1
    BDR_SUNKENOUTER = 2
    BDR_RAISEDINNER = 4
    BDR_SUNKENINNER = 8
    BDR_OUTER = 3
    BDR_INNER = 12
    BDR_RAISED = 5
    BDR_SUNKEN = 10
    EDGE_RAISED = 5
    EDGE_SUNKEN = 10
    EDGE_ETCHED = 6
    EDGE_BUMP = 9
  end

  enum DFC_TYPE : UInt32
    DFC_CAPTION = 1
    DFC_MENU = 2
    DFC_SCROLL = 3
    DFC_BUTTON = 4
    DFC_POPUPMENU = 5
  end

  enum DFCS_STATE : UInt32
    DFCS_CAPTIONCLOSE = 0
    DFCS_CAPTIONMIN = 1
    DFCS_CAPTIONMAX = 2
    DFCS_CAPTIONRESTORE = 3
    DFCS_CAPTIONHELP = 4
    DFCS_MENUARROW = 0
    DFCS_MENUCHECK = 1
    DFCS_MENUBULLET = 2
    DFCS_MENUARROWRIGHT = 4
    DFCS_SCROLLUP = 0
    DFCS_SCROLLDOWN = 1
    DFCS_SCROLLLEFT = 2
    DFCS_SCROLLRIGHT = 3
    DFCS_SCROLLCOMBOBOX = 5
    DFCS_SCROLLSIZEGRIP = 8
    DFCS_SCROLLSIZEGRIPRIGHT = 16
    DFCS_BUTTONCHECK = 0
    DFCS_BUTTONRADIOIMAGE = 1
    DFCS_BUTTONRADIOMASK = 2
    DFCS_BUTTONRADIO = 4
    DFCS_BUTTON3STATE = 8
    DFCS_BUTTONPUSH = 16
    DFCS_INACTIVE = 256
    DFCS_PUSHED = 512
    DFCS_CHECKED = 1024
    DFCS_TRANSPARENT = 2048
    DFCS_HOT = 4096
    DFCS_ADJUSTRECT = 8192
    DFCS_FLAT = 16384
    DFCS_MONO = 32768
  end

  enum CDS_TYPE : UInt32
    CDS_FULLSCREEN = 4
    CDS_GLOBAL = 8
    CDS_NORESET = 268435456
    CDS_RESET = 1073741824
    CDS_SET_PRIMARY = 16
    CDS_TEST = 2
    CDS_UPDATEREGISTRY = 1
    CDS_VIDEOPARAMETERS = 32
    CDS_ENABLE_UNSAFE_MODES = 256
    CDS_DISABLE_UNSAFE_MODES = 512
    CDS_RESET_EX = 536870912
  end

  enum DISP_CHANGE : Int32
    DISP_CHANGE_SUCCESSFUL = 0
    DISP_CHANGE_RESTART = 1
    DISP_CHANGE_FAILED = -1
    DISP_CHANGE_BADMODE = -2
    DISP_CHANGE_NOTUPDATED = -3
    DISP_CHANGE_BADFLAGS = -4
    DISP_CHANGE_BADPARAM = -5
    DISP_CHANGE_BADDUALVIEW = -6
  end

  enum DRAWSTATE_FLAGS : UInt32
    DST_COMPLEX = 0
    DST_TEXT = 1
    DST_PREFIXTEXT = 2
    DST_ICON = 3
    DST_BITMAP = 4
    DSS_NORMAL = 0
    DSS_UNION = 16
    DSS_DISABLED = 32
    DSS_MONO = 128
    DSS_HIDEPREFIX = 512
    DSS_PREFIXONLY = 1024
    DSS_RIGHT = 32768
  end

  enum REDRAW_WINDOW_FLAGS : UInt32
    RDW_INVALIDATE = 1
    RDW_INTERNALPAINT = 2
    RDW_ERASE = 4
    RDW_VALIDATE = 8
    RDW_NOINTERNALPAINT = 16
    RDW_NOERASE = 32
    RDW_NOCHILDREN = 64
    RDW_ALLCHILDREN = 128
    RDW_UPDATENOW = 256
    RDW_ERASENOW = 512
    RDW_FRAME = 1024
    RDW_NOFRAME = 2048
  end

  enum ENUM_DISPLAY_SETTINGS_MODE : UInt32
    ENUM_CURRENT_SETTINGS = 4294967295
    ENUM_REGISTRY_SETTINGS = 4294967294
  end

  enum TEXT_ALIGN_OPTIONS : UInt32
    TA_NOUPDATECP = 0
    TA_UPDATECP = 1
    TA_LEFT = 0
    TA_RIGHT = 2
    TA_CENTER = 6
    TA_TOP = 0
    TA_BOTTOM = 8
    TA_BASELINE = 24
    TA_RTLREADING = 256
    TA_MASK = 287
    VTA_BASELINE = 24
    VTA_LEFT = 8
    VTA_RIGHT = 0
    VTA_CENTER = 6
    VTA_BOTTOM = 2
    VTA_TOP = 0
  end

  enum PEN_STYLE : UInt32
    PS_GEOMETRIC = 65536
    PS_COSMETIC = 0
    PS_SOLID = 0
    PS_DASH = 1
    PS_DOT = 2
    PS_DASHDOT = 3
    PS_DASHDOTDOT = 4
    PS_NULL = 5
    PS_INSIDEFRAME = 6
    PS_USERSTYLE = 7
    PS_ALTERNATE = 8
    PS_STYLE_MASK = 15
    PS_ENDCAP_ROUND = 0
    PS_ENDCAP_SQUARE = 256
    PS_ENDCAP_FLAT = 512
    PS_ENDCAP_MASK = 3840
    PS_JOIN_ROUND = 0
    PS_JOIN_BEVEL = 4096
    PS_JOIN_MITER = 8192
    PS_JOIN_MASK = 61440
    PS_TYPE_MASK = 983040
  end

  enum TTEMBED_FLAGS : UInt32
    TTEMBED_EMBEDEUDC = 32
    TTEMBED_RAW = 0
    TTEMBED_SUBSET = 1
    TTEMBED_TTCOMPRESSED = 4
  end

  enum DRAW_TEXT_FORMAT : UInt32
    DT_BOTTOM = 8
    DT_CALCRECT = 1024
    DT_CENTER = 1
    DT_EDITCONTROL = 8192
    DT_END_ELLIPSIS = 32768
    DT_EXPANDTABS = 64
    DT_EXTERNALLEADING = 512
    DT_HIDEPREFIX = 1048576
    DT_INTERNAL = 4096
    DT_LEFT = 0
    DT_MODIFYSTRING = 65536
    DT_NOCLIP = 256
    DT_NOFULLWIDTHCHARBREAK = 524288
    DT_NOPREFIX = 2048
    DT_PATH_ELLIPSIS = 16384
    DT_PREFIXONLY = 2097152
    DT_RIGHT = 2
    DT_RTLREADING = 131072
    DT_SINGLELINE = 32
    DT_TABSTOP = 128
    DT_TOP = 0
    DT_VCENTER = 4
    DT_WORDBREAK = 16
    DT_WORD_ELLIPSIS = 262144
  end

  enum EMBED_FONT_CHARSET : UInt32
    CHARSET_UNICODE = 1
    CHARSET_SYMBOL = 2
  end

  enum GET_DCX_FLAGS : UInt32
    DCX_WINDOW = 1
    DCX_CACHE = 2
    DCX_PARENTCLIP = 32
    DCX_CLIPSIBLINGS = 16
    DCX_CLIPCHILDREN = 8
    DCX_NORESETATTRS = 4
    DCX_LOCKWINDOWUPDATE = 1024
    DCX_EXCLUDERGN = 64
    DCX_INTERSECTRGN = 128
    DCX_INTERSECTUPDATE = 512
    DCX_VALIDATE = 2097152
  end

  enum GET_GLYPH_OUTLINE_FORMAT : UInt32
    GGO_BEZIER = 3
    GGO_BITMAP = 1
    GGO_GLYPH_INDEX = 128
    GGO_GRAY2_BITMAP = 4
    GGO_GRAY4_BITMAP = 5
    GGO_GRAY8_BITMAP = 6
    GGO_METRICS = 0
    GGO_NATIVE = 2
    GGO_UNHINTED = 256
  end

  enum SET_BOUNDS_RECT_FLAGS : UInt32
    DCB_ACCUMULATE = 2
    DCB_DISABLE = 8
    DCB_ENABLE = 4
    DCB_RESET = 1
  end

  enum GET_STOCK_OBJECT_FLAGS : UInt32
    BLACK_BRUSH = 4
    DKGRAY_BRUSH = 3
    DC_BRUSH = 18
    GRAY_BRUSH = 2
    HOLLOW_BRUSH = 5
    LTGRAY_BRUSH = 1
    NULL_BRUSH = 5
    WHITE_BRUSH = 0
    BLACK_PEN = 7
    DC_PEN = 19
    NULL_PEN = 8
    WHITE_PEN = 6
    ANSI_FIXED_FONT = 11
    ANSI_VAR_FONT = 12
    DEVICE_DEFAULT_FONT = 14
    DEFAULT_GUI_FONT = 17
    OEM_FIXED_FONT = 10
    SYSTEM_FONT = 13
    SYSTEM_FIXED_FONT = 16
    DEFAULT_PALETTE = 15
  end

  enum MODIFY_WORLD_TRANSFORM_MODE : UInt32
    MWT_IDENTITY = 1
    MWT_LEFTMULTIPLY = 2
    MWT_RIGHTMULTIPLY = 3
  end

  enum FONT_CLIP_PRECISION : UInt32
    CLIP_CHARACTER_PRECIS = 1
    CLIP_DEFAULT_PRECIS = 0
    CLIP_DFA_DISABLE = 64
    CLIP_EMBEDDED = 128
    CLIP_LH_ANGLES = 16
    CLIP_MASK = 15
    CLIP_STROKE_PRECIS = 2
    CLIP_TT_ALWAYS = 32
  end

  enum CREATE_POLYGON_RGN_MODE : UInt32
    ALTERNATE = 1
    WINDING = 2
  end

  enum EMBEDDED_FONT_PRIV_STATUS : UInt32
    EMBED_PREVIEWPRINT = 1
    EMBED_EDITABLE = 2
    EMBED_INSTALLABLE = 3
    EMBED_NOEMBEDDING = 4
  end

  enum MONITOR_FROM_FLAGS : UInt32
    MONITOR_DEFAULTTONEAREST = 2
    MONITOR_DEFAULTTONULL = 0
    MONITOR_DEFAULTTOPRIMARY = 1
  end

  enum FONT_RESOURCE_CHARACTERISTICS : UInt32
    FR_PRIVATE = 16
    FR_NOT_ENUM = 32
  end

  enum DC_LAYOUT : UInt32
    LAYOUT_BITMAPORIENTATIONPRESERVED = 8
    LAYOUT_RTL = 1
  end

  enum GET_DEVICE_CAPS_INDEX : UInt32
    DRIVERVERSION = 0
    TECHNOLOGY = 2
    HORZSIZE = 4
    VERTSIZE = 6
    HORZRES = 8
    VERTRES = 10
    BITSPIXEL = 12
    PLANES = 14
    NUMBRUSHES = 16
    NUMPENS = 18
    NUMMARKERS = 20
    NUMFONTS = 22
    NUMCOLORS = 24
    PDEVICESIZE = 26
    CURVECAPS = 28
    LINECAPS = 30
    POLYGONALCAPS = 32
    TEXTCAPS = 34
    CLIPCAPS = 36
    RASTERCAPS = 38
    ASPECTX = 40
    ASPECTY = 42
    ASPECTXY = 44
    LOGPIXELSX = 88
    LOGPIXELSY = 90
    SIZEPALETTE = 104
    NUMRESERVED = 106
    COLORRES = 108
    PHYSICALWIDTH = 110
    PHYSICALHEIGHT = 111
    PHYSICALOFFSETX = 112
    PHYSICALOFFSETY = 113
    SCALINGFACTORX = 114
    SCALINGFACTORY = 115
    VREFRESH = 116
    DESKTOPVERTRES = 117
    DESKTOPHORZRES = 118
    BLTALIGNMENT = 119
    SHADEBLENDCAPS = 120
    COLORMGMTCAPS = 121
  end

  enum FONT_OUTPUT_PRECISION : UInt32
    OUT_CHARACTER_PRECIS = 2
    OUT_DEFAULT_PRECIS = 0
    OUT_DEVICE_PRECIS = 5
    OUT_OUTLINE_PRECIS = 8
    OUT_PS_ONLY_PRECIS = 10
    OUT_RASTER_PRECIS = 6
    OUT_STRING_PRECIS = 1
    OUT_STROKE_PRECIS = 3
    OUT_TT_ONLY_PRECIS = 7
    OUT_TT_PRECIS = 4
  end

  enum ARC_DIRECTION : UInt32
    AD_COUNTERCLOCKWISE = 1
    AD_CLOCKWISE = 2
  end

  enum TTLOAD_EMBEDDED_FONT_STATUS : UInt32
    TTLOAD_FONT_SUBSETTED = 1
    TTLOAD_FONT_IN_SYSSTARTUP = 2
  end

  enum STRETCH_BLT_MODE : UInt32
    BLACKONWHITE = 1
    COLORONCOLOR = 3
    HALFTONE = 4
    STRETCH_ANDSCANS = 1
    STRETCH_DELETESCANS = 3
    STRETCH_HALFTONE = 4
    STRETCH_ORSCANS = 2
    WHITEONBLACK = 2
  end

  enum FONT_QUALITY : UInt32
    ANTIALIASED_QUALITY = 4
    CLEARTYPE_QUALITY = 5
    DEFAULT_QUALITY = 0
    DRAFT_QUALITY = 1
    NONANTIALIASED_QUALITY = 3
    PROOF_QUALITY = 2
  end

  enum BACKGROUND_MODE : UInt32
    OPAQUE = 2
    TRANSPARENT = 1
  end

  enum GET_CHARACTER_PLACEMENT_FLAGS : UInt32
    GCP_CLASSIN = 524288
    GCP_DIACRITIC = 256
    GCP_DISPLAYZWG = 4194304
    GCP_GLYPHSHAPE = 16
    GCP_JUSTIFY = 65536
    GCP_KASHIDA = 1024
    GCP_LIGATE = 32
    GCP_MAXEXTENT = 1048576
    GCP_NEUTRALOVERRIDE = 33554432
    GCP_NUMERICOVERRIDE = 16777216
    GCP_NUMERICSLATIN = 67108864
    GCP_NUMERICSLOCAL = 134217728
    GCP_REORDER = 2
    GCP_SYMSWAPOFF = 8388608
    GCP_USEKERNING = 8
  end

  enum DRAW_EDGE_FLAGS : UInt32
    BF_ADJUST = 8192
    BF_BOTTOM = 8
    BF_BOTTOMLEFT = 9
    BF_BOTTOMRIGHT = 12
    BF_DIAGONAL = 16
    BF_DIAGONAL_ENDBOTTOMLEFT = 25
    BF_DIAGONAL_ENDBOTTOMRIGHT = 28
    BF_DIAGONAL_ENDTOPLEFT = 19
    BF_DIAGONAL_ENDTOPRIGHT = 22
    BF_FLAT = 16384
    BF_LEFT = 1
    BF_MIDDLE = 2048
    BF_MONO = 32768
    BF_RECT = 15
    BF_RIGHT = 4
    BF_SOFT = 4096
    BF_TOP = 2
    BF_TOPLEFT = 3
    BF_TOPRIGHT = 6
  end

  enum FONT_LICENSE_PRIVS : UInt32
    LICENSE_PREVIEWPRINT = 4
    LICENSE_EDITABLE = 8
    LICENSE_INSTALLABLE = 0
    LICENSE_NOEMBEDDING = 2
    LICENSE_DEFAULT = 0
  end

  enum GRADIENT_FILL : UInt32
    GRADIENT_FILL_RECT_H = 0
    GRADIENT_FILL_RECT_V = 1
    GRADIENT_FILL_TRIANGLE = 2
  end

  enum CREATE_FONT_PACKAGE_SUBSET_ENCODING : UInt32
    TTFCFP_STD_MAC_CHAR_SET = 0
    TTFCFP_SYMBOL_CHAR_SET = 0
    TTFCFP_UNICODE_CHAR_SET = 1
  end

  enum EXT_FLOOD_FILL_TYPE : UInt32
    FLOODFILLBORDER = 0
    FLOODFILLSURFACE = 1
  end

  enum HATCH_BRUSH_STYLE : UInt32
    HS_BDIAGONAL = 3
    HS_CROSS = 4
    HS_DIAGCROSS = 5
    HS_FDIAGONAL = 2
    HS_HORIZONTAL = 0
    HS_VERTICAL = 1
  end

  enum DRAW_CAPTION_FLAGS : UInt32
    DC_ACTIVE = 1
    DC_BUTTONS = 4096
    DC_GRADIENT = 32
    DC_ICON = 4
    DC_INBUTTON = 16
    DC_SMALLCAP = 2
    DC_TEXT = 8
  end

  enum SYSTEM_PALETTE_USE : UInt32
    SYSPAL_NOSTATIC = 2
    SYSPAL_NOSTATIC256 = 3
    SYSPAL_STATIC = 1
  end

  enum GRAPHICS_MODE : UInt32
    GM_COMPATIBLE = 1
    GM_ADVANCED = 2
  end

  enum FONT_PITCH_AND_FAMILY : UInt32
    FF_DECORATIVE = 80
    FF_DONTCARE = 0
    FF_MODERN = 48
    FF_ROMAN = 16
    FF_SCRIPT = 64
    FF_SWISS = 32
  end

  enum CREATE_FONT_PACKAGE_SUBSET_PLATFORM : UInt32
    TTFCFP_UNICODE_PLATFORMID = 0
    TTFCFP_ISO_PLATFORMID = 2
  end

  enum HDC_MAP_MODE : UInt32
    MM_ANISOTROPIC = 8
    MM_HIENGLISH = 5
    MM_HIMETRIC = 3
    MM_ISOTROPIC = 7
    MM_LOENGLISH = 4
    MM_LOMETRIC = 2
    MM_TEXT = 1
    MM_TWIPS = 6
  end

  enum DISPLAYCONFIG_COLOR_ENCODING : Int32
    DISPLAYCONFIG_COLOR_ENCODING_RGB = 0
    DISPLAYCONFIG_COLOR_ENCODING_YCBCR444 = 1
    DISPLAYCONFIG_COLOR_ENCODING_YCBCR422 = 2
    DISPLAYCONFIG_COLOR_ENCODING_YCBCR420 = 3
    DISPLAYCONFIG_COLOR_ENCODING_INTENSITY = 4
    DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32 = -1
  end

  union DEVMODEA_Anonymous1_e__Union
    anonymous1 : DEVMODEA_Anonymous1_e__Union_Anonymous1_e__Struct
    anonymous2 : DEVMODEA_Anonymous1_e__Union_Anonymous2_e__Struct
  end
  union DEVMODEA_Anonymous2_e__Union
    dm_display_flags : UInt32
    dm_nup : UInt32
  end
  union DEVMODEW_Anonymous1_e__Union
    anonymous1 : DEVMODEW_Anonymous1_e__Union_Anonymous1_e__Struct
    anonymous2 : DEVMODEW_Anonymous1_e__Union_Anonymous2_e__Struct
  end
  union DEVMODEW_Anonymous2_e__Union
    dm_display_flags : UInt32
    dm_nup : UInt32
  end

  struct XFORM
    e_m11 : Float32
    e_m12 : Float32
    e_m21 : Float32
    e_m22 : Float32
    e_dx : Float32
    e_dy : Float32
  end
  struct BITMAP
    bm_type : Int32
    bm_width : Int32
    bm_height : Int32
    bm_width_bytes : Int32
    bm_planes : UInt16
    bm_bits_pixel : UInt16
    bm_bits : Void*
  end
  struct RGBTRIPLE
    rgbt_blue : UInt8
    rgbt_green : UInt8
    rgbt_red : UInt8
  end
  struct RGBQUAD
    rgb_blue : UInt8
    rgb_green : UInt8
    rgb_red : UInt8
    rgb_reserved : UInt8
  end
  struct CIEXYZ
    ciexyz_x : Int32
    ciexyz_y : Int32
    ciexyz_z : Int32
  end
  struct CIEXYZTRIPLE
    ciexyz_red : CIEXYZ
    ciexyz_green : CIEXYZ
    ciexyz_blue : CIEXYZ
  end
  struct BITMAPCOREHEADER
    bc_size : UInt32
    bc_width : UInt16
    bc_height : UInt16
    bc_planes : UInt16
    bc_bit_count : UInt16
  end
  struct BITMAPINFOHEADER
    bi_size : UInt32
    bi_width : Int32
    bi_height : Int32
    bi_planes : UInt16
    bi_bit_count : UInt16
    bi_compression : UInt32
    bi_size_image : UInt32
    bi_x_pels_per_meter : Int32
    bi_y_pels_per_meter : Int32
    bi_clr_used : UInt32
    bi_clr_important : UInt32
  end
  struct BITMAPV4HEADER
    b_v4_size : UInt32
    b_v4_width : Int32
    b_v4_height : Int32
    b_v4_planes : UInt16
    b_v4_bit_count : UInt16
    b_v4_v4_compression : UInt32
    b_v4_size_image : UInt32
    b_v4_x_pels_per_meter : Int32
    b_v4_y_pels_per_meter : Int32
    b_v4_clr_used : UInt32
    b_v4_clr_important : UInt32
    b_v4_red_mask : UInt32
    b_v4_green_mask : UInt32
    b_v4_blue_mask : UInt32
    b_v4_alpha_mask : UInt32
    b_v4_cs_type : UInt32
    b_v4_endpoints : CIEXYZTRIPLE
    b_v4_gamma_red : UInt32
    b_v4_gamma_green : UInt32
    b_v4_gamma_blue : UInt32
  end
  struct BITMAPV5HEADER
    b_v5_size : UInt32
    b_v5_width : Int32
    b_v5_height : Int32
    b_v5_planes : UInt16
    b_v5_bit_count : UInt16
    b_v5_compression : UInt32
    b_v5_size_image : UInt32
    b_v5_x_pels_per_meter : Int32
    b_v5_y_pels_per_meter : Int32
    b_v5_clr_used : UInt32
    b_v5_clr_important : UInt32
    b_v5_red_mask : UInt32
    b_v5_green_mask : UInt32
    b_v5_blue_mask : UInt32
    b_v5_alpha_mask : UInt32
    b_v5_cs_type : UInt32
    b_v5_endpoints : CIEXYZTRIPLE
    b_v5_gamma_red : UInt32
    b_v5_gamma_green : UInt32
    b_v5_gamma_blue : UInt32
    b_v5_intent : UInt32
    b_v5_profile_data : UInt32
    b_v5_profile_size : UInt32
    b_v5_reserved : UInt32
  end
  struct BITMAPINFO
    bmi_header : BITMAPINFOHEADER
    bmi_colors : RGBQUAD[0]*
  end
  struct BITMAPCOREINFO
    bmci_header : BITMAPCOREHEADER
    bmci_colors : RGBTRIPLE[0]*
  end
  struct BITMAPFILEHEADER
    bf_type : UInt16
    bf_size : UInt32
    bf_reserved1 : UInt16
    bf_reserved2 : UInt16
    bf_off_bits : UInt32
  end
  struct HANDLETABLE
    object_handle : HGDIOBJ[0]*
  end
  struct METARECORD
    rd_size : UInt32
    rd_function : UInt16
    rd_parm : UInt16[0]*
  end
  struct METAHEADER
    mt_type : UInt16
    mt_header_size : UInt16
    mt_version : UInt16
    mt_size : UInt32
    mt_no_objects : UInt16
    mt_max_record : UInt32
    mt_no_parameters : UInt16
  end
  struct ENHMETARECORD
    i_type : UInt32
    n_size : UInt32
    d_parm : UInt32[0]*
  end
  struct ENHMETAHEADER
    i_type : UInt32
    n_size : UInt32
    rcl_bounds : RECTL
    rcl_frame : RECTL
    d_signature : UInt32
    n_version : UInt32
    n_bytes : UInt32
    n_records : UInt32
    n_handles : UInt16
    s_reserved : UInt16
    n_description : UInt32
    off_description : UInt32
    n_pal_entries : UInt32
    szl_device : SIZE
    szl_millimeters : SIZE
    cb_pixel_format : UInt32
    off_pixel_format : UInt32
    b_open_gl : UInt32
    szl_micrometers : SIZE
  end
  struct TEXTMETRICA
    tm_height : Int32
    tm_ascent : Int32
    tm_descent : Int32
    tm_internal_leading : Int32
    tm_external_leading : Int32
    tm_ave_char_width : Int32
    tm_max_char_width : Int32
    tm_weight : Int32
    tm_overhang : Int32
    tm_digitized_aspect_x : Int32
    tm_digitized_aspect_y : Int32
    tm_first_char : UInt8
    tm_last_char : UInt8
    tm_default_char : UInt8
    tm_break_char : UInt8
    tm_italic : UInt8
    tm_underlined : UInt8
    tm_struck_out : UInt8
    tm_pitch_and_family : UInt8
    tm_char_set : UInt8
  end
  struct TEXTMETRICW
    tm_height : Int32
    tm_ascent : Int32
    tm_descent : Int32
    tm_internal_leading : Int32
    tm_external_leading : Int32
    tm_ave_char_width : Int32
    tm_max_char_width : Int32
    tm_weight : Int32
    tm_overhang : Int32
    tm_digitized_aspect_x : Int32
    tm_digitized_aspect_y : Int32
    tm_first_char : Char
    tm_last_char : Char
    tm_default_char : Char
    tm_break_char : Char
    tm_italic : UInt8
    tm_underlined : UInt8
    tm_struck_out : UInt8
    tm_pitch_and_family : UInt8
    tm_char_set : UInt8
  end
  struct NEWTEXTMETRICA
    tm_height : Int32
    tm_ascent : Int32
    tm_descent : Int32
    tm_internal_leading : Int32
    tm_external_leading : Int32
    tm_ave_char_width : Int32
    tm_max_char_width : Int32
    tm_weight : Int32
    tm_overhang : Int32
    tm_digitized_aspect_x : Int32
    tm_digitized_aspect_y : Int32
    tm_first_char : UInt8
    tm_last_char : UInt8
    tm_default_char : UInt8
    tm_break_char : UInt8
    tm_italic : UInt8
    tm_underlined : UInt8
    tm_struck_out : UInt8
    tm_pitch_and_family : UInt8
    tm_char_set : UInt8
    ntm_flags : UInt32
    ntm_size_em : UInt32
    ntm_cell_height : UInt32
    ntm_avg_width : UInt32
  end
  struct NEWTEXTMETRICW
    tm_height : Int32
    tm_ascent : Int32
    tm_descent : Int32
    tm_internal_leading : Int32
    tm_external_leading : Int32
    tm_ave_char_width : Int32
    tm_max_char_width : Int32
    tm_weight : Int32
    tm_overhang : Int32
    tm_digitized_aspect_x : Int32
    tm_digitized_aspect_y : Int32
    tm_first_char : Char
    tm_last_char : Char
    tm_default_char : Char
    tm_break_char : Char
    tm_italic : UInt8
    tm_underlined : UInt8
    tm_struck_out : UInt8
    tm_pitch_and_family : UInt8
    tm_char_set : UInt8
    ntm_flags : UInt32
    ntm_size_em : UInt32
    ntm_cell_height : UInt32
    ntm_avg_width : UInt32
  end
  struct PELARRAY
    pa_x_count : Int32
    pa_y_count : Int32
    pa_x_ext : Int32
    pa_y_ext : Int32
    pa_rg_bs : UInt8
  end
  struct LOGBRUSH
    lb_style : UInt32
    lb_color : UInt32
    lb_hatch : LibC::UINT_PTR
  end
  struct LOGBRUSH32
    lb_style : UInt32
    lb_color : UInt32
    lb_hatch : UInt32
  end
  struct LOGPEN
    lopn_style : UInt32
    lopn_width : POINT
    lopn_color : UInt32
  end
  struct EXTLOGPEN
    elp_pen_style : UInt32
    elp_width : UInt32
    elp_brush_style : UInt32
    elp_color : UInt32
    elp_hatch : LibC::UINT_PTR
    elp_num_entries : UInt32
    elp_style_entry : UInt32[0]*
  end
  struct EXTLOGPEN32
    elp_pen_style : UInt32
    elp_width : UInt32
    elp_brush_style : UInt32
    elp_color : UInt32
    elp_hatch : UInt32
    elp_num_entries : UInt32
    elp_style_entry : UInt32[0]*
  end
  struct PALETTEENTRY
    pe_red : UInt8
    pe_green : UInt8
    pe_blue : UInt8
    pe_flags : UInt8
  end
  struct LOGPALETTE
    pal_version : UInt16
    pal_num_entries : UInt16
    pal_pal_entry : PALETTEENTRY[0]*
  end
  struct LOGFONTA
    lf_height : Int32
    lf_width : Int32
    lf_escapement : Int32
    lf_orientation : Int32
    lf_weight : Int32
    lf_italic : UInt8
    lf_underline : UInt8
    lf_strike_out : UInt8
    lf_char_set : UInt8
    lf_out_precision : UInt8
    lf_clip_precision : UInt8
    lf_quality : UInt8
    lf_pitch_and_family : UInt8
    lf_face_name : CHAR[32]*
  end
  struct LOGFONTW
    lf_height : Int32
    lf_width : Int32
    lf_escapement : Int32
    lf_orientation : Int32
    lf_weight : Int32
    lf_italic : UInt8
    lf_underline : UInt8
    lf_strike_out : UInt8
    lf_char_set : UInt8
    lf_out_precision : UInt8
    lf_clip_precision : UInt8
    lf_quality : UInt8
    lf_pitch_and_family : UInt8
    lf_face_name : Char[32]*
  end
  struct ENUMLOGFONTA
    elf_log_font : LOGFONTA
    elf_full_name : UInt8[64]*
    elf_style : UInt8[32]*
  end
  struct ENUMLOGFONTW
    elf_log_font : LOGFONTW
    elf_full_name : Char[64]*
    elf_style : Char[32]*
  end
  struct ENUMLOGFONTEXA
    elf_log_font : LOGFONTA
    elf_full_name : UInt8[64]*
    elf_style : UInt8[32]*
    elf_script : UInt8[32]*
  end
  struct ENUMLOGFONTEXW
    elf_log_font : LOGFONTW
    elf_full_name : Char[64]*
    elf_style : Char[32]*
    elf_script : Char[32]*
  end
  struct PANOSE
    b_family_type : UInt8
    b_serif_style : UInt8
    b_weight : UInt8
    b_proportion : UInt8
    b_contrast : UInt8
    b_stroke_variation : UInt8
    b_arm_style : UInt8
    b_letterform : UInt8
    b_midline : UInt8
    b_x_height : UInt8
  end
  struct EXTLOGFONTA
    elf_log_font : LOGFONTA
    elf_full_name : UInt8[64]*
    elf_style : UInt8[32]*
    elf_version : UInt32
    elf_style_size : UInt32
    elf_match : UInt32
    elf_reserved : UInt32
    elf_vendor_id : UInt8[4]*
    elf_culture : UInt32
    elf_panose : PANOSE
  end
  struct EXTLOGFONTW
    elf_log_font : LOGFONTW
    elf_full_name : Char[64]*
    elf_style : Char[32]*
    elf_version : UInt32
    elf_style_size : UInt32
    elf_match : UInt32
    elf_reserved : UInt32
    elf_vendor_id : UInt8[4]*
    elf_culture : UInt32
    elf_panose : PANOSE
  end
  struct DEVMODEA
    dm_device_name : UInt8[32]*
    dm_spec_version : UInt16
    dm_driver_version : UInt16
    dm_size : UInt16
    dm_driver_extra : UInt16
    dm_fields : UInt32
    anonymous1 : DEVMODEA_Anonymous1_e__Union
    dm_color : Int16
    dm_duplex : Int16
    dm_y_resolution : Int16
    dm_tt_option : Int16
    dm_collate : Int16
    dm_form_name : UInt8[32]*
    dm_log_pixels : UInt16
    dm_bits_per_pel : UInt32
    dm_pels_width : UInt32
    dm_pels_height : UInt32
    anonymous2 : DEVMODEA_Anonymous2_e__Union
    dm_display_frequency : UInt32
    dm_icm_method : UInt32
    dm_icm_intent : UInt32
    dm_media_type : UInt32
    dm_dither_type : UInt32
    dm_reserved1 : UInt32
    dm_reserved2 : UInt32
    dm_panning_width : UInt32
    dm_panning_height : UInt32
  end
  struct DEVMODEA_Anonymous1_e__Union_Anonymous2_e__Struct
    dm_position : POINTL
    dm_display_orientation : UInt32
    dm_display_fixed_output : UInt32
  end
  struct DEVMODEA_Anonymous1_e__Union_Anonymous1_e__Struct
    dm_orientation : Int16
    dm_paper_size : Int16
    dm_paper_length : Int16
    dm_paper_width : Int16
    dm_scale : Int16
    dm_copies : Int16
    dm_default_source : Int16
    dm_print_quality : Int16
  end
  struct DEVMODEW
    dm_device_name : Char[32]*
    dm_spec_version : UInt16
    dm_driver_version : UInt16
    dm_size : UInt16
    dm_driver_extra : UInt16
    dm_fields : UInt32
    anonymous1 : DEVMODEW_Anonymous1_e__Union
    dm_color : Int16
    dm_duplex : Int16
    dm_y_resolution : Int16
    dm_tt_option : Int16
    dm_collate : Int16
    dm_form_name : Char[32]*
    dm_log_pixels : UInt16
    dm_bits_per_pel : UInt32
    dm_pels_width : UInt32
    dm_pels_height : UInt32
    anonymous2 : DEVMODEW_Anonymous2_e__Union
    dm_display_frequency : UInt32
    dm_icm_method : UInt32
    dm_icm_intent : UInt32
    dm_media_type : UInt32
    dm_dither_type : UInt32
    dm_reserved1 : UInt32
    dm_reserved2 : UInt32
    dm_panning_width : UInt32
    dm_panning_height : UInt32
  end
  struct DEVMODEW_Anonymous1_e__Union_Anonymous1_e__Struct
    dm_orientation : Int16
    dm_paper_size : Int16
    dm_paper_length : Int16
    dm_paper_width : Int16
    dm_scale : Int16
    dm_copies : Int16
    dm_default_source : Int16
    dm_print_quality : Int16
  end
  struct DEVMODEW_Anonymous1_e__Union_Anonymous2_e__Struct
    dm_position : POINTL
    dm_display_orientation : UInt32
    dm_display_fixed_output : UInt32
  end
  struct DISPLAY_DEVICEA
    cb : UInt32
    device_name : CHAR[32]*
    device_string : CHAR[128]*
    state_flags : UInt32
    device_id : CHAR[128]*
    device_key : CHAR[128]*
  end
  struct DISPLAY_DEVICEW
    cb : UInt32
    device_name : Char[32]*
    device_string : Char[128]*
    state_flags : UInt32
    device_id : Char[128]*
    device_key : Char[128]*
  end
  struct RGNDATAHEADER
    dw_size : UInt32
    i_type : UInt32
    n_count : UInt32
    n_rgn_size : UInt32
    rc_bound : RECT
  end
  struct RGNDATA
    rdh : RGNDATAHEADER
    buffer : CHAR[0]*
  end
  struct ABC
    abc_a : Int32
    abc_b : UInt32
    abc_c : Int32
  end
  struct ABCFLOAT
    abcf_a : Float32
    abcf_b : Float32
    abcf_c : Float32
  end
  struct OUTLINETEXTMETRICA
    otm_size : UInt32
    otm_text_metrics : TEXTMETRICA
    otm_filler : UInt8
    otm_panose_number : PANOSE
    otmfs_selection : UInt32
    otmfs_type : UInt32
    otms_char_slope_rise : Int32
    otms_char_slope_run : Int32
    otm_italic_angle : Int32
    otm_em_square : UInt32
    otm_ascent : Int32
    otm_descent : Int32
    otm_line_gap : UInt32
    otms_cap_em_height : UInt32
    otms_x_height : UInt32
    otmrc_font_box : RECT
    otm_mac_ascent : Int32
    otm_mac_descent : Int32
    otm_mac_line_gap : UInt32
    otmus_minimum_ppem : UInt32
    otmpt_subscript_size : POINT
    otmpt_subscript_offset : POINT
    otmpt_superscript_size : POINT
    otmpt_superscript_offset : POINT
    otms_strikeout_size : UInt32
    otms_strikeout_position : Int32
    otms_underscore_size : Int32
    otms_underscore_position : Int32
    otmp_family_name : PSTR
    otmp_face_name : PSTR
    otmp_style_name : PSTR
    otmp_full_name : PSTR
  end
  struct OUTLINETEXTMETRICW
    otm_size : UInt32
    otm_text_metrics : TEXTMETRICW
    otm_filler : UInt8
    otm_panose_number : PANOSE
    otmfs_selection : UInt32
    otmfs_type : UInt32
    otms_char_slope_rise : Int32
    otms_char_slope_run : Int32
    otm_italic_angle : Int32
    otm_em_square : UInt32
    otm_ascent : Int32
    otm_descent : Int32
    otm_line_gap : UInt32
    otms_cap_em_height : UInt32
    otms_x_height : UInt32
    otmrc_font_box : RECT
    otm_mac_ascent : Int32
    otm_mac_descent : Int32
    otm_mac_line_gap : UInt32
    otmus_minimum_ppem : UInt32
    otmpt_subscript_size : POINT
    otmpt_subscript_offset : POINT
    otmpt_superscript_size : POINT
    otmpt_superscript_offset : POINT
    otms_strikeout_size : UInt32
    otms_strikeout_position : Int32
    otms_underscore_size : Int32
    otms_underscore_position : Int32
    otmp_family_name : PSTR
    otmp_face_name : PSTR
    otmp_style_name : PSTR
    otmp_full_name : PSTR
  end
  struct POLYTEXTA
    x : Int32
    y : Int32
    n : UInt32
    lpstr : PSTR
    ui_flags : UInt32
    rcl : RECT
    pdx : Int32*
  end
  struct POLYTEXTW
    x : Int32
    y : Int32
    n : UInt32
    lpstr : LibC::LPWSTR
    ui_flags : UInt32
    rcl : RECT
    pdx : Int32*
  end
  struct FIXED
    fract : UInt16
    value : Int16
  end
  struct MAT2
    e_m11 : FIXED
    e_m12 : FIXED
    e_m21 : FIXED
    e_m22 : FIXED
  end
  struct GLYPHMETRICS
    gm_black_box_x : UInt32
    gm_black_box_y : UInt32
    gmpt_glyph_origin : POINT
    gm_cell_inc_x : Int16
    gm_cell_inc_y : Int16
  end
  struct POINTFX
    x : FIXED
    y : FIXED
  end
  struct TTPOLYCURVE
    w_type : UInt16
    cpfx : UInt16
    apfx : POINTFX[0]*
  end
  struct TTPOLYGONHEADER
    cb : UInt32
    dw_type : UInt32
    pfx_start : POINTFX
  end
  struct GCP_RESULTSA
    l_struct_size : UInt32
    lp_out_string : PSTR
    lp_order : UInt32*
    lp_dx : Int32*
    lp_caret_pos : Int32*
    lp_class : PSTR
    lp_glyphs : LibC::LPWSTR
    n_glyphs : UInt32
    n_max_fit : Int32
  end
  struct GCP_RESULTSW
    l_struct_size : UInt32
    lp_out_string : LibC::LPWSTR
    lp_order : UInt32*
    lp_dx : Int32*
    lp_caret_pos : Int32*
    lp_class : PSTR
    lp_glyphs : LibC::LPWSTR
    n_glyphs : UInt32
    n_max_fit : Int32
  end
  struct RASTERIZER_STATUS
    n_size : Int16
    w_flags : Int16
    n_language_id : Int16
  end
  struct WCRANGE
    wc_low : Char
    c_glyphs : UInt16
  end
  struct GLYPHSET
    cb_this : UInt32
    fl_accel : UInt32
    c_glyphs_supported : UInt32
    c_ranges : UInt32
    ranges : WCRANGE[0]*
  end
  struct DESIGNVECTOR
    dv_reserved : UInt32
    dv_num_axes : UInt32
    dv_values : Int32[16]*
  end
  struct AXISINFOA
    ax_min_value : Int32
    ax_max_value : Int32
    ax_axis_name : UInt8[16]*
  end
  struct AXISINFOW
    ax_min_value : Int32
    ax_max_value : Int32
    ax_axis_name : Char[16]*
  end
  struct AXESLISTA
    axl_reserved : UInt32
    axl_num_axes : UInt32
    axl_axis_info : AXISINFOA[16]*
  end
  struct AXESLISTW
    axl_reserved : UInt32
    axl_num_axes : UInt32
    axl_axis_info : AXISINFOW[16]*
  end
  struct ENUMLOGFONTEXDVA
    elf_enum_logfont_ex : ENUMLOGFONTEXA
    elf_design_vector : DESIGNVECTOR
  end
  struct ENUMLOGFONTEXDVW
    elf_enum_logfont_ex : ENUMLOGFONTEXW
    elf_design_vector : DESIGNVECTOR
  end
  struct TRIVERTEX
    x : Int32
    y : Int32
    red : UInt16
    green : UInt16
    blue : UInt16
    alpha : UInt16
  end
  struct GRADIENT_TRIANGLE
    vertex1 : UInt32
    vertex2 : UInt32
    vertex3 : UInt32
  end
  struct GRADIENT_RECT
    upper_left : UInt32
    lower_right : UInt32
  end
  struct BLENDFUNCTION
    blend_op : UInt8
    blend_flags : UInt8
    source_constant_alpha : UInt8
    alpha_format : UInt8
  end
  struct DIBSECTION
    ds_bm : BITMAP
    ds_bmih : BITMAPINFOHEADER
    ds_bitfields : UInt32[3]*
    dsh_section : LibC::HANDLE
    ds_offset : UInt32
  end
  struct COLORADJUSTMENT
    ca_size : UInt16
    ca_flags : UInt16
    ca_illuminant_index : UInt16
    ca_red_gamma : UInt16
    ca_green_gamma : UInt16
    ca_blue_gamma : UInt16
    ca_reference_black : UInt16
    ca_reference_white : UInt16
    ca_contrast : Int16
    ca_brightness : Int16
    ca_colorfulness : Int16
    ca_red_green_tint : Int16
  end
  struct KERNINGPAIR
    w_first : UInt16
    w_second : UInt16
    i_kern_amount : Int32
  end
  struct EMR
    i_type : UInt32
    n_size : UInt32
  end
  struct EMRTEXT
    ptl_reference : POINTL
    n_chars : UInt32
    off_string : UInt32
    f_options : UInt32
    rcl : RECTL
    off_dx : UInt32
  end
  struct ABORTPATH
    emr : EMR
  end
  struct EMRSELECTCLIPPATH
    emr : EMR
    i_mode : UInt32
  end
  struct EMRSETMITERLIMIT
    emr : EMR
    e_miter_limit : Float32
  end
  struct EMRRESTOREDC
    emr : EMR
    i_relative : Int32
  end
  struct EMRSETARCDIRECTION
    emr : EMR
    i_arc_direction : UInt32
  end
  struct EMRSETMAPPERFLAGS
    emr : EMR
    dw_flags : UInt32
  end
  struct EMRSETTEXTCOLOR
    emr : EMR
    cr_color : UInt32
  end
  struct EMRSELECTOBJECT
    emr : EMR
    ih_object : UInt32
  end
  struct EMRSELECTPALETTE
    emr : EMR
    ih_pal : UInt32
  end
  struct EMRRESIZEPALETTE
    emr : EMR
    ih_pal : UInt32
    c_entries : UInt32
  end
  struct EMRSETPALETTEENTRIES
    emr : EMR
    ih_pal : UInt32
    i_start : UInt32
    c_entries : UInt32
    a_pal_entries : PALETTEENTRY[0]*
  end
  struct EMRSETCOLORADJUSTMENT
    emr : EMR
    color_adjustment : COLORADJUSTMENT
  end
  struct EMRGDICOMMENT
    emr : EMR
    cb_data : UInt32
    data : UInt8[0]*
  end
  struct EMREOF
    emr : EMR
    n_pal_entries : UInt32
    off_pal_entries : UInt32
    n_size_last : UInt32
  end
  struct EMRLINETO
    emr : EMR
    ptl : POINTL
  end
  struct EMROFFSETCLIPRGN
    emr : EMR
    ptl_offset : POINTL
  end
  struct EMRFILLPATH
    emr : EMR
    rcl_bounds : RECTL
  end
  struct EMREXCLUDECLIPRECT
    emr : EMR
    rcl_clip : RECTL
  end
  struct EMRSETVIEWPORTORGEX
    emr : EMR
    ptl_origin : POINTL
  end
  struct EMRSETVIEWPORTEXTEX
    emr : EMR
    szl_extent : SIZE
  end
  struct EMRSCALEVIEWPORTEXTEX
    emr : EMR
    x_num : Int32
    x_denom : Int32
    y_num : Int32
    y_denom : Int32
  end
  struct EMRSETWORLDTRANSFORM
    emr : EMR
    xform : XFORM
  end
  struct EMRMODIFYWORLDTRANSFORM
    emr : EMR
    xform : XFORM
    i_mode : UInt32
  end
  struct EMRSETPIXELV
    emr : EMR
    ptl_pixel : POINTL
    cr_color : UInt32
  end
  struct EMREXTFLOODFILL
    emr : EMR
    ptl_start : POINTL
    cr_color : UInt32
    i_mode : UInt32
  end
  struct EMRELLIPSE
    emr : EMR
    rcl_box : RECTL
  end
  struct EMRROUNDRECT
    emr : EMR
    rcl_box : RECTL
    szl_corner : SIZE
  end
  struct EMRARC
    emr : EMR
    rcl_box : RECTL
    ptl_start : POINTL
    ptl_end : POINTL
  end
  struct EMRANGLEARC
    emr : EMR
    ptl_center : POINTL
    n_radius : UInt32
    e_start_angle : Float32
    e_sweep_angle : Float32
  end
  struct EMRPOLYLINE
    emr : EMR
    rcl_bounds : RECTL
    cptl : UInt32
    aptl : POINTL[0]*
  end
  struct EMRPOLYLINE16
    emr : EMR
    rcl_bounds : RECTL
    cpts : UInt32
    apts : POINTS[0]*
  end
  struct EMRPOLYDRAW
    emr : EMR
    rcl_bounds : RECTL
    cptl : UInt32
    aptl : POINTL[0]*
    ab_types : UInt8[0]*
  end
  struct EMRPOLYDRAW16
    emr : EMR
    rcl_bounds : RECTL
    cpts : UInt32
    apts : POINTS[0]*
    ab_types : UInt8[0]*
  end
  struct EMRPOLYPOLYLINE
    emr : EMR
    rcl_bounds : RECTL
    n_polys : UInt32
    cptl : UInt32
    a_poly_counts : UInt32[0]*
    aptl : POINTL[0]*
  end
  struct EMRPOLYPOLYLINE16
    emr : EMR
    rcl_bounds : RECTL
    n_polys : UInt32
    cpts : UInt32
    a_poly_counts : UInt32[0]*
    apts : POINTS[0]*
  end
  struct EMRINVERTRGN
    emr : EMR
    rcl_bounds : RECTL
    cb_rgn_data : UInt32
    rgn_data : UInt8[0]*
  end
  struct EMRFILLRGN
    emr : EMR
    rcl_bounds : RECTL
    cb_rgn_data : UInt32
    ih_brush : UInt32
    rgn_data : UInt8[0]*
  end
  struct EMRFRAMERGN
    emr : EMR
    rcl_bounds : RECTL
    cb_rgn_data : UInt32
    ih_brush : UInt32
    szl_stroke : SIZE
    rgn_data : UInt8[0]*
  end
  struct EMREXTSELECTCLIPRGN
    emr : EMR
    cb_rgn_data : UInt32
    i_mode : UInt32
    rgn_data : UInt8[0]*
  end
  struct EMREXTTEXTOUTA
    emr : EMR
    rcl_bounds : RECTL
    i_graphics_mode : UInt32
    ex_scale : Float32
    ey_scale : Float32
    emrtext : EMRTEXT
  end
  struct EMRPOLYTEXTOUTA
    emr : EMR
    rcl_bounds : RECTL
    i_graphics_mode : UInt32
    ex_scale : Float32
    ey_scale : Float32
    c_strings : Int32
    aemrtext : EMRTEXT[0]*
  end
  struct EMRBITBLT
    emr : EMR
    rcl_bounds : RECTL
    x_dest : Int32
    y_dest : Int32
    cx_dest : Int32
    cy_dest : Int32
    dw_rop : UInt32
    x_src : Int32
    y_src : Int32
    xform_src : XFORM
    cr_bk_color_src : UInt32
    i_usage_src : UInt32
    off_bmi_src : UInt32
    cb_bmi_src : UInt32
    off_bits_src : UInt32
    cb_bits_src : UInt32
  end
  struct EMRSTRETCHBLT
    emr : EMR
    rcl_bounds : RECTL
    x_dest : Int32
    y_dest : Int32
    cx_dest : Int32
    cy_dest : Int32
    dw_rop : UInt32
    x_src : Int32
    y_src : Int32
    xform_src : XFORM
    cr_bk_color_src : UInt32
    i_usage_src : UInt32
    off_bmi_src : UInt32
    cb_bmi_src : UInt32
    off_bits_src : UInt32
    cb_bits_src : UInt32
    cx_src : Int32
    cy_src : Int32
  end
  struct EMRMASKBLT
    emr : EMR
    rcl_bounds : RECTL
    x_dest : Int32
    y_dest : Int32
    cx_dest : Int32
    cy_dest : Int32
    dw_rop : UInt32
    x_src : Int32
    y_src : Int32
    xform_src : XFORM
    cr_bk_color_src : UInt32
    i_usage_src : UInt32
    off_bmi_src : UInt32
    cb_bmi_src : UInt32
    off_bits_src : UInt32
    cb_bits_src : UInt32
    x_mask : Int32
    y_mask : Int32
    i_usage_mask : UInt32
    off_bmi_mask : UInt32
    cb_bmi_mask : UInt32
    off_bits_mask : UInt32
    cb_bits_mask : UInt32
  end
  struct EMRPLGBLT
    emr : EMR
    rcl_bounds : RECTL
    aptl_dest : POINTL[3]*
    x_src : Int32
    y_src : Int32
    cx_src : Int32
    cy_src : Int32
    xform_src : XFORM
    cr_bk_color_src : UInt32
    i_usage_src : UInt32
    off_bmi_src : UInt32
    cb_bmi_src : UInt32
    off_bits_src : UInt32
    cb_bits_src : UInt32
    x_mask : Int32
    y_mask : Int32
    i_usage_mask : UInt32
    off_bmi_mask : UInt32
    cb_bmi_mask : UInt32
    off_bits_mask : UInt32
    cb_bits_mask : UInt32
  end
  struct EMRSETDIBITSTODEVICE
    emr : EMR
    rcl_bounds : RECTL
    x_dest : Int32
    y_dest : Int32
    x_src : Int32
    y_src : Int32
    cx_src : Int32
    cy_src : Int32
    off_bmi_src : UInt32
    cb_bmi_src : UInt32
    off_bits_src : UInt32
    cb_bits_src : UInt32
    i_usage_src : UInt32
    i_start_scan : UInt32
    c_scans : UInt32
  end
  struct EMRSTRETCHDIBITS
    emr : EMR
    rcl_bounds : RECTL
    x_dest : Int32
    y_dest : Int32
    x_src : Int32
    y_src : Int32
    cx_src : Int32
    cy_src : Int32
    off_bmi_src : UInt32
    cb_bmi_src : UInt32
    off_bits_src : UInt32
    cb_bits_src : UInt32
    i_usage_src : UInt32
    dw_rop : UInt32
    cx_dest : Int32
    cy_dest : Int32
  end
  struct EMREXTCREATEFONTINDIRECTW
    emr : EMR
    ih_font : UInt32
    elfw : EXTLOGFONTW
  end
  struct EMRCREATEPALETTE
    emr : EMR
    ih_pal : UInt32
    lgpl : LOGPALETTE
  end
  struct EMRCREATEPEN
    emr : EMR
    ih_pen : UInt32
    lopn : LOGPEN
  end
  struct EMREXTCREATEPEN
    emr : EMR
    ih_pen : UInt32
    off_bmi : UInt32
    cb_bmi : UInt32
    off_bits : UInt32
    cb_bits : UInt32
    elp : EXTLOGPEN32
  end
  struct EMRCREATEBRUSHINDIRECT
    emr : EMR
    ih_brush : UInt32
    lb : LOGBRUSH32
  end
  struct EMRCREATEMONOBRUSH
    emr : EMR
    ih_brush : UInt32
    i_usage : UInt32
    off_bmi : UInt32
    cb_bmi : UInt32
    off_bits : UInt32
    cb_bits : UInt32
  end
  struct EMRCREATEDIBPATTERNBRUSHPT
    emr : EMR
    ih_brush : UInt32
    i_usage : UInt32
    off_bmi : UInt32
    cb_bmi : UInt32
    off_bits : UInt32
    cb_bits : UInt32
  end
  struct EMRFORMAT
    d_signature : UInt32
    n_version : UInt32
    cb_data : UInt32
    off_data : UInt32
  end
  struct EMRGLSRECORD
    emr : EMR
    cb_data : UInt32
    data : UInt8[0]*
  end
  struct EMRGLSBOUNDEDRECORD
    emr : EMR
    rcl_bounds : RECTL
    cb_data : UInt32
    data : UInt8[0]*
  end
  struct EMRSETCOLORSPACE
    emr : EMR
    ih_cs : UInt32
  end
  struct EMREXTESCAPE
    emr : EMR
    i_escape : Int32
    cb_esc_data : Int32
    esc_data : UInt8[0]*
  end
  struct EMRNAMEDESCAPE
    emr : EMR
    i_escape : Int32
    cb_driver : Int32
    cb_esc_data : Int32
    esc_data : UInt8[0]*
  end
  struct EMRSETICMPROFILE
    emr : EMR
    dw_flags : UInt32
    cb_name : UInt32
    cb_data : UInt32
    data : UInt8[0]*
  end
  struct COLORMATCHTOTARGET
    emr : EMR
    dw_action : UInt32
    dw_flags : UInt32
    cb_name : UInt32
    cb_data : UInt32
    data : UInt8[0]*
  end
  struct COLORCORRECTPALETTE
    emr : EMR
    ih_palette : UInt32
    n_first_entry : UInt32
    n_pal_entries : UInt32
    n_reserved : UInt32
  end
  struct EMRALPHABLEND
    emr : EMR
    rcl_bounds : RECTL
    x_dest : Int32
    y_dest : Int32
    cx_dest : Int32
    cy_dest : Int32
    dw_rop : UInt32
    x_src : Int32
    y_src : Int32
    xform_src : XFORM
    cr_bk_color_src : UInt32
    i_usage_src : UInt32
    off_bmi_src : UInt32
    cb_bmi_src : UInt32
    off_bits_src : UInt32
    cb_bits_src : UInt32
    cx_src : Int32
    cy_src : Int32
  end
  struct EMRGRADIENTFILL
    emr : EMR
    rcl_bounds : RECTL
    n_ver : UInt32
    n_tri : UInt32
    ul_mode : GRADIENT_FILL
    ver : TRIVERTEX[0]*
  end
  struct EMRTRANSPARENTBLT
    emr : EMR
    rcl_bounds : RECTL
    x_dest : Int32
    y_dest : Int32
    cx_dest : Int32
    cy_dest : Int32
    dw_rop : UInt32
    x_src : Int32
    y_src : Int32
    xform_src : XFORM
    cr_bk_color_src : UInt32
    i_usage_src : UInt32
    off_bmi_src : UInt32
    cb_bmi_src : UInt32
    off_bits_src : UInt32
    cb_bits_src : UInt32
    cx_src : Int32
    cy_src : Int32
  end
  struct WGLSWAP
    hdc : HDC
    ui_flags : UInt32
  end
  struct TTLOADINFO
    us_struct_size : UInt16
    us_ref_str_size : UInt16
    pus_ref_str : UInt16*
  end
  struct TTEMBEDINFO
    us_struct_size : UInt16
    us_root_str_size : UInt16
    pus_root_str : UInt16*
  end
  struct TTVALIDATIONTESTSPARAMS
    ul_struct_size : UInt32
    l_test_from_size : Int32
    l_test_to_size : Int32
    ul_char_set : UInt32
    us_reserved1 : UInt16
    us_char_code_count : UInt16
    pus_char_code_set : UInt16*
  end
  struct TTVALIDATIONTESTSPARAMSEX
    ul_struct_size : UInt32
    l_test_from_size : Int32
    l_test_to_size : Int32
    ul_char_set : UInt32
    us_reserved1 : UInt16
    us_char_code_count : UInt16
    pul_char_code_set : UInt32*
  end
  struct PAINTSTRUCT
    hdc : HDC
    f_erase : LibC::BOOL
    rc_paint : RECT
    f_restore : LibC::BOOL
    f_inc_update : LibC::BOOL
    rgb_reserved : UInt8[32]*
  end
  struct DRAWTEXTPARAMS
    cb_size : UInt32
    i_tab_length : Int32
    i_left_margin : Int32
    i_right_margin : Int32
    ui_length_drawn : UInt32
  end
  struct MONITORINFO
    cb_size : UInt32
    rc_monitor : RECT
    rc_work : RECT
    dw_flags : UInt32
  end
  struct MONITORINFOEXA
    __anonymous_base_winuser_l13567_c43 : MONITORINFO
    sz_device : CHAR[32]*
  end
  struct MONITORINFOEXW
    __anonymous_base_winuser_l13571_c43 : MONITORINFO
    sz_device : Char[32]*
  end


  # Params # h : HGDIOBJ [In],c : Int32 [In],pv : Void* [In]
  fun GetObjectA(h : HGDIOBJ, c : Int32, pv : Void*) : Int32

  # Params # param0 : PSTR [In]
  fun AddFontResourceA(param0 : PSTR) : Int32

  # Params # param0 : LibC::LPWSTR [In]
  fun AddFontResourceW(param0 : LibC::LPWSTR) : Int32

  # Params # hpal : HPALETTE [In],istartindex : UInt32 [In],centries : UInt32 [In],ppe : PALETTEENTRY* [In]
  fun AnimatePalette(hpal : HPALETTE, istartindex : UInt32, centries : UInt32, ppe : PALETTEENTRY*) : LibC::BOOL

  # Params # hdc : HDC [In],x1 : Int32 [In],y1 : Int32 [In],x2 : Int32 [In],y2 : Int32 [In],x3 : Int32 [In],y3 : Int32 [In],x4 : Int32 [In],y4 : Int32 [In]
  fun Arc(hdc : HDC, x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32, x3 : Int32, y3 : Int32, x4 : Int32, y4 : Int32) : LibC::BOOL

  # Params # hdc : HDC [In],x : Int32 [In],y : Int32 [In],cx : Int32 [In],cy : Int32 [In],hdcsrc : HDC [In],x1 : Int32 [In],y1 : Int32 [In],rop : ROP_CODE [In]
  fun BitBlt(hdc : HDC, x : Int32, y : Int32, cx : Int32, cy : Int32, hdcsrc : HDC, x1 : Int32, y1 : Int32, rop : ROP_CODE) : LibC::BOOL

  # Params # hdc : HDC [In]
  fun CancelDC(hdc : HDC) : LibC::BOOL

  # Params # hdc : HDC [In],x1 : Int32 [In],y1 : Int32 [In],x2 : Int32 [In],y2 : Int32 [In],x3 : Int32 [In],y3 : Int32 [In],x4 : Int32 [In],y4 : Int32 [In]
  fun Chord(hdc : HDC, x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32, x3 : Int32, y3 : Int32, x4 : Int32, y4 : Int32) : LibC::BOOL

  # Params # hdc : HDC [In]
  fun CloseMetaFile(hdc : HDC) : HMETAFILE

  # Params # hrgndst : HRGN [In],hrgnsrc1 : HRGN [In],hrgnsrc2 : HRGN [In],imode : RGN_COMBINE_MODE [In]
  fun CombineRgn(hrgndst : HRGN, hrgnsrc1 : HRGN, hrgnsrc2 : HRGN, imode : RGN_COMBINE_MODE) : Int32

  # Params # param0 : HMETAFILE [In],param1 : PSTR [In]
  fun CopyMetaFileA(param0 : HMETAFILE, param1 : PSTR) : HMETAFILE

  # Params # param0 : HMETAFILE [In],param1 : LibC::LPWSTR [In]
  fun CopyMetaFileW(param0 : HMETAFILE, param1 : LibC::LPWSTR) : HMETAFILE

  # Params # nwidth : Int32 [In],nheight : Int32 [In],nplanes : UInt32 [In],nbitcount : UInt32 [In],lpbits : Void* [In]
  fun CreateBitmap(nwidth : Int32, nheight : Int32, nplanes : UInt32, nbitcount : UInt32, lpbits : Void*) : HBITMAP

  # Params # pbm : BITMAP* [In]
  fun CreateBitmapIndirect(pbm : BITMAP*) : HBITMAP

  # Params # plbrush : LOGBRUSH* [In]
  fun CreateBrushIndirect(plbrush : LOGBRUSH*) : HBRUSH

  # Params # hdc : HDC [In],cx : Int32 [In],cy : Int32 [In]
  fun CreateCompatibleBitmap(hdc : HDC, cx : Int32, cy : Int32) : HBITMAP

  # Params # hdc : HDC [In],cx : Int32 [In],cy : Int32 [In]
  fun CreateDiscardableBitmap(hdc : HDC, cx : Int32, cy : Int32) : HBITMAP

  # Params # hdc : HDC [In]
  fun CreateCompatibleDC(hdc : HDC) : CreatedHDC

  # Params # pwszdriver : PSTR [In],pwszdevice : PSTR [In],pszport : PSTR [In],pdm : DEVMODEA* [In]
  fun CreateDCA(pwszdriver : PSTR, pwszdevice : PSTR, pszport : PSTR, pdm : DEVMODEA*) : CreatedHDC

  # Params # pwszdriver : LibC::LPWSTR [In],pwszdevice : LibC::LPWSTR [In],pszport : LibC::LPWSTR [In],pdm : DEVMODEW* [In]
  fun CreateDCW(pwszdriver : LibC::LPWSTR, pwszdevice : LibC::LPWSTR, pszport : LibC::LPWSTR, pdm : DEVMODEW*) : CreatedHDC

  # Params # hdc : HDC [In],pbmih : BITMAPINFOHEADER* [In],flinit : UInt32 [In],pjbits : Void* [In],pbmi : BITMAPINFO* [In],iusage : DIB_USAGE [In]
  fun CreateDIBitmap(hdc : HDC, pbmih : BITMAPINFOHEADER*, flinit : UInt32, pjbits : Void*, pbmi : BITMAPINFO*, iusage : DIB_USAGE) : HBITMAP

  # Params # h : LibC::IntPtrT [In],iusage : DIB_USAGE [In]
  fun CreateDIBPatternBrush(h : LibC::IntPtrT, iusage : DIB_USAGE) : HBRUSH

  # Params # lppackeddib : Void* [In],iusage : DIB_USAGE [In]
  fun CreateDIBPatternBrushPt(lppackeddib : Void*, iusage : DIB_USAGE) : HBRUSH

  # Params # x1 : Int32 [In],y1 : Int32 [In],x2 : Int32 [In],y2 : Int32 [In]
  fun CreateEllipticRgn(x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32) : HRGN

  # Params # lprect : RECT* [In]
  fun CreateEllipticRgnIndirect(lprect : RECT*) : HRGN

  # Params # lplf : LOGFONTA* [In]
  fun CreateFontIndirectA(lplf : LOGFONTA*) : HFONT

  # Params # lplf : LOGFONTW* [In]
  fun CreateFontIndirectW(lplf : LOGFONTW*) : HFONT

  # Params # cheight : Int32 [In],cwidth : Int32 [In],cescapement : Int32 [In],corientation : Int32 [In],cweight : Int32 [In],bitalic : UInt32 [In],bunderline : UInt32 [In],bstrikeout : UInt32 [In],icharset : UInt32 [In],ioutprecision : FONT_OUTPUT_PRECISION [In],iclipprecision : FONT_CLIP_PRECISION [In],iquality : FONT_QUALITY [In],ipitchandfamily : FONT_PITCH_AND_FAMILY [In],pszfacename : PSTR [In]
  fun CreateFontA(cheight : Int32, cwidth : Int32, cescapement : Int32, corientation : Int32, cweight : Int32, bitalic : UInt32, bunderline : UInt32, bstrikeout : UInt32, icharset : UInt32, ioutprecision : FONT_OUTPUT_PRECISION, iclipprecision : FONT_CLIP_PRECISION, iquality : FONT_QUALITY, ipitchandfamily : FONT_PITCH_AND_FAMILY, pszfacename : PSTR) : HFONT

  # Params # cheight : Int32 [In],cwidth : Int32 [In],cescapement : Int32 [In],corientation : Int32 [In],cweight : Int32 [In],bitalic : UInt32 [In],bunderline : UInt32 [In],bstrikeout : UInt32 [In],icharset : UInt32 [In],ioutprecision : FONT_OUTPUT_PRECISION [In],iclipprecision : FONT_CLIP_PRECISION [In],iquality : FONT_QUALITY [In],ipitchandfamily : FONT_PITCH_AND_FAMILY [In],pszfacename : LibC::LPWSTR [In]
  fun CreateFontW(cheight : Int32, cwidth : Int32, cescapement : Int32, corientation : Int32, cweight : Int32, bitalic : UInt32, bunderline : UInt32, bstrikeout : UInt32, icharset : UInt32, ioutprecision : FONT_OUTPUT_PRECISION, iclipprecision : FONT_CLIP_PRECISION, iquality : FONT_QUALITY, ipitchandfamily : FONT_PITCH_AND_FAMILY, pszfacename : LibC::LPWSTR) : HFONT

  # Params # ihatch : HATCH_BRUSH_STYLE [In],color : UInt32 [In]
  fun CreateHatchBrush(ihatch : HATCH_BRUSH_STYLE, color : UInt32) : HBRUSH

  # Params # pszdriver : PSTR [In],pszdevice : PSTR [In],pszport : PSTR [In],pdm : DEVMODEA* [In]
  fun CreateICA(pszdriver : PSTR, pszdevice : PSTR, pszport : PSTR, pdm : DEVMODEA*) : CreatedHDC

  # Params # pszdriver : LibC::LPWSTR [In],pszdevice : LibC::LPWSTR [In],pszport : LibC::LPWSTR [In],pdm : DEVMODEW* [In]
  fun CreateICW(pszdriver : LibC::LPWSTR, pszdevice : LibC::LPWSTR, pszport : LibC::LPWSTR, pdm : DEVMODEW*) : CreatedHDC

  # Params # pszfile : PSTR [In]
  fun CreateMetaFileA(pszfile : PSTR) : HdcMetdataFileHandle

  # Params # pszfile : LibC::LPWSTR [In]
  fun CreateMetaFileW(pszfile : LibC::LPWSTR) : HdcMetdataFileHandle

  # Params # plpal : LOGPALETTE* [In]
  fun CreatePalette(plpal : LOGPALETTE*) : HPALETTE

  # Params # istyle : PEN_STYLE [In],cwidth : Int32 [In],color : UInt32 [In]
  fun CreatePen(istyle : PEN_STYLE, cwidth : Int32, color : UInt32) : HPEN

  # Params # plpen : LOGPEN* [In]
  fun CreatePenIndirect(plpen : LOGPEN*) : HPEN

  # Params # pptl : POINT* [In],pc : Int32* [In],cpoly : Int32 [In],imode : CREATE_POLYGON_RGN_MODE [In]
  fun CreatePolyPolygonRgn(pptl : POINT*, pc : Int32*, cpoly : Int32, imode : CREATE_POLYGON_RGN_MODE) : HRGN

  # Params # hbm : HBITMAP [In]
  fun CreatePatternBrush(hbm : HBITMAP) : HBRUSH

  # Params # x1 : Int32 [In],y1 : Int32 [In],x2 : Int32 [In],y2 : Int32 [In]
  fun CreateRectRgn(x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32) : HRGN

  # Params # lprect : RECT* [In]
  fun CreateRectRgnIndirect(lprect : RECT*) : HRGN

  # Params # x1 : Int32 [In],y1 : Int32 [In],x2 : Int32 [In],y2 : Int32 [In],w : Int32 [In],h : Int32 [In]
  fun CreateRoundRectRgn(x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32, w : Int32, h : Int32) : HRGN

  # Params # fdwhidden : UInt32 [In],lpszfont : PSTR [In],lpszfile : PSTR [In],lpszpath : PSTR [In]
  fun CreateScalableFontResourceA(fdwhidden : UInt32, lpszfont : PSTR, lpszfile : PSTR, lpszpath : PSTR) : LibC::BOOL

  # Params # fdwhidden : UInt32 [In],lpszfont : LibC::LPWSTR [In],lpszfile : LibC::LPWSTR [In],lpszpath : LibC::LPWSTR [In]
  fun CreateScalableFontResourceW(fdwhidden : UInt32, lpszfont : LibC::LPWSTR, lpszfile : LibC::LPWSTR, lpszpath : LibC::LPWSTR) : LibC::BOOL

  # Params # color : UInt32 [In]
  fun CreateSolidBrush(color : UInt32) : HBRUSH

  # Params # hdc : CreatedHDC [In]
  fun DeleteDC(hdc : CreatedHDC) : LibC::BOOL

  # Params # hmf : HMETAFILE [In]
  fun DeleteMetaFile(hmf : HMETAFILE) : LibC::BOOL

  # Params # ho : HGDIOBJ [In]
  fun DeleteObject(ho : HGDIOBJ) : LibC::BOOL

  # Params # hdc : HDC [In],iescape : Int32 [In],cjin : Int32 [In],lpin : PSTR [In]
  fun DrawEscape(hdc : HDC, iescape : Int32, cjin : Int32, lpin : PSTR) : Int32

  # Params # hdc : HDC [In],left : Int32 [In],top : Int32 [In],right : Int32 [In],bottom : Int32 [In]
  fun Ellipse(hdc : HDC, left : Int32, top : Int32, right : Int32, bottom : Int32) : LibC::BOOL

  # Params # hdc : HDC [In],lplogfont : LOGFONTA* [In],lpproc : FONTENUMPROCA [In],lparam : LPARAM [In],dwflags : UInt32 [In]
  fun EnumFontFamiliesExA(hdc : HDC, lplogfont : LOGFONTA*, lpproc : FONTENUMPROCA, lparam : LPARAM, dwflags : UInt32) : Int32

  # Params # hdc : HDC [In],lplogfont : LOGFONTW* [In],lpproc : FONTENUMPROCW [In],lparam : LPARAM [In],dwflags : UInt32 [In]
  fun EnumFontFamiliesExW(hdc : HDC, lplogfont : LOGFONTW*, lpproc : FONTENUMPROCW, lparam : LPARAM, dwflags : UInt32) : Int32

  # Params # hdc : HDC [In],lplogfont : PSTR [In],lpproc : FONTENUMPROCA [In],lparam : LPARAM [In]
  fun EnumFontFamiliesA(hdc : HDC, lplogfont : PSTR, lpproc : FONTENUMPROCA, lparam : LPARAM) : Int32

  # Params # hdc : HDC [In],lplogfont : LibC::LPWSTR [In],lpproc : FONTENUMPROCW [In],lparam : LPARAM [In]
  fun EnumFontFamiliesW(hdc : HDC, lplogfont : LibC::LPWSTR, lpproc : FONTENUMPROCW, lparam : LPARAM) : Int32

  # Params # hdc : HDC [In],lplogfont : PSTR [In],lpproc : FONTENUMPROCA [In],lparam : LPARAM [In]
  fun EnumFontsA(hdc : HDC, lplogfont : PSTR, lpproc : FONTENUMPROCA, lparam : LPARAM) : Int32

  # Params # hdc : HDC [In],lplogfont : LibC::LPWSTR [In],lpproc : FONTENUMPROCW [In],lparam : LPARAM [In]
  fun EnumFontsW(hdc : HDC, lplogfont : LibC::LPWSTR, lpproc : FONTENUMPROCW, lparam : LPARAM) : Int32

  # Params # hdc : HDC [In],ntype : OBJ_TYPE [In],lpfunc : GOBJENUMPROC [In],lparam : LPARAM [In]
  fun EnumObjects(hdc : HDC, ntype : OBJ_TYPE, lpfunc : GOBJENUMPROC, lparam : LPARAM) : Int32

  # Params # hrgn1 : HRGN [In],hrgn2 : HRGN [In]
  fun EqualRgn(hrgn1 : HRGN, hrgn2 : HRGN) : LibC::BOOL

  # Params # hdc : HDC [In],left : Int32 [In],top : Int32 [In],right : Int32 [In],bottom : Int32 [In]
  fun ExcludeClipRect(hdc : HDC, left : Int32, top : Int32, right : Int32, bottom : Int32) : Int32

  # Params # lpx : XFORM* [In],ncount : UInt32 [In],lpdata : RGNDATA* [In]
  fun ExtCreateRegion(lpx : XFORM*, ncount : UInt32, lpdata : RGNDATA*) : HRGN

  # Params # hdc : HDC [In],x : Int32 [In],y : Int32 [In],color : UInt32 [In],type : EXT_FLOOD_FILL_TYPE [In]
  fun ExtFloodFill(hdc : HDC, x : Int32, y : Int32, color : UInt32, type : EXT_FLOOD_FILL_TYPE) : LibC::BOOL

  # Params # hdc : HDC [In],hrgn : HRGN [In],hbr : HBRUSH [In]
  fun FillRgn(hdc : HDC, hrgn : HRGN, hbr : HBRUSH) : LibC::BOOL

  # Params # hdc : HDC [In],x : Int32 [In],y : Int32 [In],color : UInt32 [In]
  fun FloodFill(hdc : HDC, x : Int32, y : Int32, color : UInt32) : LibC::BOOL

  # Params # hdc : HDC [In],hrgn : HRGN [In],hbr : HBRUSH [In],w : Int32 [In],h : Int32 [In]
  fun FrameRgn(hdc : HDC, hrgn : HRGN, hbr : HBRUSH, w : Int32, h : Int32) : LibC::BOOL

  # Params # hdc : HDC [In]
  fun GetROP2(hdc : HDC) : Int32

  # Params # hdc : HDC [In],lpsize : SIZE* [In]
  fun GetAspectRatioFilterEx(hdc : HDC, lpsize : SIZE*) : LibC::BOOL

  # Params # hdc : HDC [In]
  fun GetBkColor(hdc : HDC) : UInt32

  # Params # hdc : HDC [In]
  fun GetDCBrushColor(hdc : HDC) : UInt32

  # Params # hdc : HDC [In]
  fun GetDCPenColor(hdc : HDC) : UInt32

  # Params # hdc : HDC [In]
  fun GetBkMode(hdc : HDC) : Int32

  # Params # hbit : HBITMAP [In],cb : Int32 [In],lpvbits : Void* [In]
  fun GetBitmapBits(hbit : HBITMAP, cb : Int32, lpvbits : Void*) : Int32

  # Params # hbit : HBITMAP [In],lpsize : SIZE* [In]
  fun GetBitmapDimensionEx(hbit : HBITMAP, lpsize : SIZE*) : LibC::BOOL

  # Params # hdc : HDC [In],lprect : RECT* [In],flags : UInt32 [In]
  fun GetBoundsRect(hdc : HDC, lprect : RECT*, flags : UInt32) : UInt32

  # Params # hdc : HDC [In],lppt : POINT* [In]
  fun GetBrushOrgEx(hdc : HDC, lppt : POINT*) : LibC::BOOL

  # Params # hdc : HDC [In],ifirst : UInt32 [In],ilast : UInt32 [In],lpbuffer : Int32* [In]
  fun GetCharWidthA(hdc : HDC, ifirst : UInt32, ilast : UInt32, lpbuffer : Int32*) : LibC::BOOL

  # Params # hdc : HDC [In],ifirst : UInt32 [In],ilast : UInt32 [In],lpbuffer : Int32* [In]
  fun GetCharWidthW(hdc : HDC, ifirst : UInt32, ilast : UInt32, lpbuffer : Int32*) : LibC::BOOL

  # Params # hdc : HDC [In],ifirst : UInt32 [In],ilast : UInt32 [In],lpbuffer : Int32* [In]
  fun GetCharWidth32A(hdc : HDC, ifirst : UInt32, ilast : UInt32, lpbuffer : Int32*) : LibC::BOOL

  # Params # hdc : HDC [In],ifirst : UInt32 [In],ilast : UInt32 [In],lpbuffer : Int32* [In]
  fun GetCharWidth32W(hdc : HDC, ifirst : UInt32, ilast : UInt32, lpbuffer : Int32*) : LibC::BOOL

  # Params # hdc : HDC [In],ifirst : UInt32 [In],ilast : UInt32 [In],lpbuffer : Float32* [In]
  fun GetCharWidthFloatA(hdc : HDC, ifirst : UInt32, ilast : UInt32, lpbuffer : Float32*) : LibC::BOOL

  # Params # hdc : HDC [In],ifirst : UInt32 [In],ilast : UInt32 [In],lpbuffer : Float32* [In]
  fun GetCharWidthFloatW(hdc : HDC, ifirst : UInt32, ilast : UInt32, lpbuffer : Float32*) : LibC::BOOL

  # Params # hdc : HDC [In],wfirst : UInt32 [In],wlast : UInt32 [In],lpabc : ABC* [In]
  fun GetCharABCWidthsA(hdc : HDC, wfirst : UInt32, wlast : UInt32, lpabc : ABC*) : LibC::BOOL

  # Params # hdc : HDC [In],wfirst : UInt32 [In],wlast : UInt32 [In],lpabc : ABC* [In]
  fun GetCharABCWidthsW(hdc : HDC, wfirst : UInt32, wlast : UInt32, lpabc : ABC*) : LibC::BOOL

  # Params # hdc : HDC [In],ifirst : UInt32 [In],ilast : UInt32 [In],lpabc : ABCFLOAT* [In]
  fun GetCharABCWidthsFloatA(hdc : HDC, ifirst : UInt32, ilast : UInt32, lpabc : ABCFLOAT*) : LibC::BOOL

  # Params # hdc : HDC [In],ifirst : UInt32 [In],ilast : UInt32 [In],lpabc : ABCFLOAT* [In]
  fun GetCharABCWidthsFloatW(hdc : HDC, ifirst : UInt32, ilast : UInt32, lpabc : ABCFLOAT*) : LibC::BOOL

  # Params # hdc : HDC [In],lprect : RECT* [In]
  fun GetClipBox(hdc : HDC, lprect : RECT*) : Int32

  # Params # hdc : HDC [In],hrgn : HRGN [In]
  fun GetClipRgn(hdc : HDC, hrgn : HRGN) : Int32

  # Params # hdc : HDC [In],hrgn : HRGN [In]
  fun GetMetaRgn(hdc : HDC, hrgn : HRGN) : Int32

  # Params # hdc : HDC [In],type : OBJ_TYPE [In]
  fun GetCurrentObject(hdc : HDC, type : OBJ_TYPE) : HGDIOBJ

  # Params # hdc : HDC [In],lppt : POINT* [In]
  fun GetCurrentPositionEx(hdc : HDC, lppt : POINT*) : LibC::BOOL

  # Params # hdc : HDC [In],index : GET_DEVICE_CAPS_INDEX [In]
  fun GetDeviceCaps(hdc : HDC, index : GET_DEVICE_CAPS_INDEX) : Int32

  # Params # hdc : HDC [In],hbm : HBITMAP [In],start : UInt32 [In],clines : UInt32 [In],lpvbits : Void* [In],lpbmi : BITMAPINFO* [In],usage : DIB_USAGE [In]
  fun GetDIBits(hdc : HDC, hbm : HBITMAP, start : UInt32, clines : UInt32, lpvbits : Void*, lpbmi : BITMAPINFO*, usage : DIB_USAGE) : Int32

  # Params # hdc : HDC [In],dwtable : UInt32 [In],dwoffset : UInt32 [In],pvbuffer : Void* [In],cjbuffer : UInt32 [In]
  fun GetFontData(hdc : HDC, dwtable : UInt32, dwoffset : UInt32, pvbuffer : Void*, cjbuffer : UInt32) : UInt32

  # Params # hdc : HDC [In],uchar : UInt32 [In],fuformat : GET_GLYPH_OUTLINE_FORMAT [In],lpgm : GLYPHMETRICS* [In],cjbuffer : UInt32 [In],pvbuffer : Void* [In],lpmat2 : MAT2* [In]
  fun GetGlyphOutlineA(hdc : HDC, uchar : UInt32, fuformat : GET_GLYPH_OUTLINE_FORMAT, lpgm : GLYPHMETRICS*, cjbuffer : UInt32, pvbuffer : Void*, lpmat2 : MAT2*) : UInt32

  # Params # hdc : HDC [In],uchar : UInt32 [In],fuformat : GET_GLYPH_OUTLINE_FORMAT [In],lpgm : GLYPHMETRICS* [In],cjbuffer : UInt32 [In],pvbuffer : Void* [In],lpmat2 : MAT2* [In]
  fun GetGlyphOutlineW(hdc : HDC, uchar : UInt32, fuformat : GET_GLYPH_OUTLINE_FORMAT, lpgm : GLYPHMETRICS*, cjbuffer : UInt32, pvbuffer : Void*, lpmat2 : MAT2*) : UInt32

  # Params # hdc : HDC [In]
  fun GetGraphicsMode(hdc : HDC) : Int32

  # Params # hdc : HDC [In]
  fun GetMapMode(hdc : HDC) : Int32

  # Params # hmf : HMETAFILE [In],cbbuffer : UInt32 [In],lpdata : Void* [In]
  fun GetMetaFileBitsEx(hmf : HMETAFILE, cbbuffer : UInt32, lpdata : Void*) : UInt32

  # Params # lpname : PSTR [In]
  fun GetMetaFileA(lpname : PSTR) : HMETAFILE

  # Params # lpname : LibC::LPWSTR [In]
  fun GetMetaFileW(lpname : LibC::LPWSTR) : HMETAFILE

  # Params # hdc : HDC [In],color : UInt32 [In]
  fun GetNearestColor(hdc : HDC, color : UInt32) : UInt32

  # Params # h : HPALETTE [In],color : UInt32 [In]
  fun GetNearestPaletteIndex(h : HPALETTE, color : UInt32) : UInt32

  # Params # h : HGDIOBJ [In]
  fun GetObjectType(h : HGDIOBJ) : UInt32

  # Params # hdc : HDC [In],cjcopy : UInt32 [In],potm : OUTLINETEXTMETRICA* [In]
  fun GetOutlineTextMetricsA(hdc : HDC, cjcopy : UInt32, potm : OUTLINETEXTMETRICA*) : UInt32

  # Params # hdc : HDC [In],cjcopy : UInt32 [In],potm : OUTLINETEXTMETRICW* [In]
  fun GetOutlineTextMetricsW(hdc : HDC, cjcopy : UInt32, potm : OUTLINETEXTMETRICW*) : UInt32

  # Params # hpal : HPALETTE [In],istart : UInt32 [In],centries : UInt32 [In],ppalentries : PALETTEENTRY* [In]
  fun GetPaletteEntries(hpal : HPALETTE, istart : UInt32, centries : UInt32, ppalentries : PALETTEENTRY*) : UInt32

  # Params # hdc : HDC [In],x : Int32 [In],y : Int32 [In]
  fun GetPixel(hdc : HDC, x : Int32, y : Int32) : UInt32

  # Params # hdc : HDC [In]
  fun GetPolyFillMode(hdc : HDC) : Int32

  # Params # lpraststat : RASTERIZER_STATUS* [In],cjbytes : UInt32 [In]
  fun GetRasterizerCaps(lpraststat : RASTERIZER_STATUS*, cjbytes : UInt32) : LibC::BOOL

  # Params # hdc : HDC [In],hrgn : HRGN [In],i : Int32 [In]
  fun GetRandomRgn(hdc : HDC, hrgn : HRGN, i : Int32) : Int32

  # Params # hrgn : HRGN [In],ncount : UInt32 [In],lprgndata : RGNDATA* [In]
  fun GetRegionData(hrgn : HRGN, ncount : UInt32, lprgndata : RGNDATA*) : UInt32

  # Params # hrgn : HRGN [In],lprc : RECT* [In]
  fun GetRgnBox(hrgn : HRGN, lprc : RECT*) : Int32

  # Params # i : GET_STOCK_OBJECT_FLAGS [In]
  fun GetStockObject(i : GET_STOCK_OBJECT_FLAGS) : HGDIOBJ

  # Params # hdc : HDC [In]
  fun GetStretchBltMode(hdc : HDC) : Int32

  # Params # hdc : HDC [In],istart : UInt32 [In],centries : UInt32 [In],ppalentries : PALETTEENTRY* [In]
  fun GetSystemPaletteEntries(hdc : HDC, istart : UInt32, centries : UInt32, ppalentries : PALETTEENTRY*) : UInt32

  # Params # hdc : HDC [In]
  fun GetSystemPaletteUse(hdc : HDC) : UInt32

  # Params # hdc : HDC [In]
  fun GetTextCharacterExtra(hdc : HDC) : Int32

  # Params # hdc : HDC [In]
  fun GetTextAlign(hdc : HDC) : UInt32

  # Params # hdc : HDC [In]
  fun GetTextColor(hdc : HDC) : UInt32

  # Params # hdc : HDC [In],lpstring : UInt8* [In],c : Int32 [In],lpsz : SIZE* [In]
  fun GetTextExtentPointA(hdc : HDC, lpstring : UInt8*, c : Int32, lpsz : SIZE*) : LibC::BOOL

  # Params # hdc : HDC [In],lpstring : Char* [In],c : Int32 [In],lpsz : SIZE* [In]
  fun GetTextExtentPointW(hdc : HDC, lpstring : Char*, c : Int32, lpsz : SIZE*) : LibC::BOOL

  # Params # hdc : HDC [In],lpstring : UInt8* [In],c : Int32 [In],psizl : SIZE* [In]
  fun GetTextExtentPoint32A(hdc : HDC, lpstring : UInt8*, c : Int32, psizl : SIZE*) : LibC::BOOL

  # Params # hdc : HDC [In],lpstring : Char* [In],c : Int32 [In],psizl : SIZE* [In]
  fun GetTextExtentPoint32W(hdc : HDC, lpstring : Char*, c : Int32, psizl : SIZE*) : LibC::BOOL

  # Params # hdc : HDC [In],lpszstring : UInt8* [In],cchstring : Int32 [In],nmaxextent : Int32 [In],lpnfit : Int32* [In],lpndx : Int32* [In],lpsize : SIZE* [In]
  fun GetTextExtentExPointA(hdc : HDC, lpszstring : UInt8*, cchstring : Int32, nmaxextent : Int32, lpnfit : Int32*, lpndx : Int32*, lpsize : SIZE*) : LibC::BOOL

  # Params # hdc : HDC [In],lpszstring : Char* [In],cchstring : Int32 [In],nmaxextent : Int32 [In],lpnfit : Int32* [In],lpndx : Int32* [In],lpsize : SIZE* [In]
  fun GetTextExtentExPointW(hdc : HDC, lpszstring : Char*, cchstring : Int32, nmaxextent : Int32, lpnfit : Int32*, lpndx : Int32*, lpsize : SIZE*) : LibC::BOOL

  # Params # hdc : HDC [In]
  fun GetFontLanguageInfo(hdc : HDC) : UInt32

  # Params # hdc : HDC [In],lpstring : UInt8* [In],ncount : Int32 [In],nmexextent : Int32 [In],lpresults : GCP_RESULTSA* [In],dwflags : GET_CHARACTER_PLACEMENT_FLAGS [In]
  fun GetCharacterPlacementA(hdc : HDC, lpstring : UInt8*, ncount : Int32, nmexextent : Int32, lpresults : GCP_RESULTSA*, dwflags : GET_CHARACTER_PLACEMENT_FLAGS) : UInt32

  # Params # hdc : HDC [In],lpstring : Char* [In],ncount : Int32 [In],nmexextent : Int32 [In],lpresults : GCP_RESULTSW* [In],dwflags : GET_CHARACTER_PLACEMENT_FLAGS [In]
  fun GetCharacterPlacementW(hdc : HDC, lpstring : Char*, ncount : Int32, nmexextent : Int32, lpresults : GCP_RESULTSW*, dwflags : GET_CHARACTER_PLACEMENT_FLAGS) : UInt32

  # Params # hdc : HDC [In],lpgs : GLYPHSET* [In]
  fun GetFontUnicodeRanges(hdc : HDC, lpgs : GLYPHSET*) : UInt32

  # Params # hdc : HDC [In],lpstr : UInt8* [In],c : Int32 [In],pgi : UInt16* [In],fl : UInt32 [In]
  fun GetGlyphIndicesA(hdc : HDC, lpstr : UInt8*, c : Int32, pgi : UInt16*, fl : UInt32) : UInt32

  # Params # hdc : HDC [In],lpstr : Char* [In],c : Int32 [In],pgi : UInt16* [In],fl : UInt32 [In]
  fun GetGlyphIndicesW(hdc : HDC, lpstr : Char*, c : Int32, pgi : UInt16*, fl : UInt32) : UInt32

  # Params # hdc : HDC [In],pgiin : UInt16* [In],cgi : Int32 [In],psize : SIZE* [In]
  fun GetTextExtentPointI(hdc : HDC, pgiin : UInt16*, cgi : Int32, psize : SIZE*) : LibC::BOOL

  # Params # hdc : HDC [In],lpwszstring : UInt16* [In],cwchstring : Int32 [In],nmaxextent : Int32 [In],lpnfit : Int32* [In],lpndx : Int32* [In],lpsize : SIZE* [In]
  fun GetTextExtentExPointI(hdc : HDC, lpwszstring : UInt16*, cwchstring : Int32, nmaxextent : Int32, lpnfit : Int32*, lpndx : Int32*, lpsize : SIZE*) : LibC::BOOL

  # Params # hdc : HDC [In],gifirst : UInt32 [In],cgi : UInt32 [In],pgi : UInt16* [In],piwidths : Int32* [In]
  fun GetCharWidthI(hdc : HDC, gifirst : UInt32, cgi : UInt32, pgi : UInt16*, piwidths : Int32*) : LibC::BOOL

  # Params # hdc : HDC [In],gifirst : UInt32 [In],cgi : UInt32 [In],pgi : UInt16* [In],pabc : ABC* [In]
  fun GetCharABCWidthsI(hdc : HDC, gifirst : UInt32, cgi : UInt32, pgi : UInt16*, pabc : ABC*) : LibC::BOOL

  # Params # name : PSTR [In],fl : FONT_RESOURCE_CHARACTERISTICS [In],res : Void* [In]
  fun AddFontResourceExA(name : PSTR, fl : FONT_RESOURCE_CHARACTERISTICS, res : Void*) : Int32

  # Params # name : LibC::LPWSTR [In],fl : FONT_RESOURCE_CHARACTERISTICS [In],res : Void* [In]
  fun AddFontResourceExW(name : LibC::LPWSTR, fl : FONT_RESOURCE_CHARACTERISTICS, res : Void*) : Int32

  # Params # name : PSTR [In],fl : UInt32 [In],pdv : Void* [In]
  fun RemoveFontResourceExA(name : PSTR, fl : UInt32, pdv : Void*) : LibC::BOOL

  # Params # name : LibC::LPWSTR [In],fl : UInt32 [In],pdv : Void* [In]
  fun RemoveFontResourceExW(name : LibC::LPWSTR, fl : UInt32, pdv : Void*) : LibC::BOOL

  # Params # pfileview : Void* [In],cjsize : UInt32 [In],pvresrved : Void* [In],pnumfonts : UInt32* [In]
  fun AddFontMemResourceEx(pfileview : Void*, cjsize : UInt32, pvresrved : Void*, pnumfonts : UInt32*) : LibC::HANDLE

  # Params # h : LibC::HANDLE [In]
  fun RemoveFontMemResourceEx(h : LibC::HANDLE) : LibC::BOOL

  # Params # param0 : ENUMLOGFONTEXDVA* [In]
  fun CreateFontIndirectExA(param0 : ENUMLOGFONTEXDVA*) : HFONT

  # Params # param0 : ENUMLOGFONTEXDVW* [In]
  fun CreateFontIndirectExW(param0 : ENUMLOGFONTEXDVW*) : HFONT

  # Params # hdc : HDC [In],lpsize : SIZE* [In]
  fun GetViewportExtEx(hdc : HDC, lpsize : SIZE*) : LibC::BOOL

  # Params # hdc : HDC [In],lppoint : POINT* [In]
  fun GetViewportOrgEx(hdc : HDC, lppoint : POINT*) : LibC::BOOL

  # Params # hdc : HDC [In],lpsize : SIZE* [In]
  fun GetWindowExtEx(hdc : HDC, lpsize : SIZE*) : LibC::BOOL

  # Params # hdc : HDC [In],lppoint : POINT* [In]
  fun GetWindowOrgEx(hdc : HDC, lppoint : POINT*) : LibC::BOOL

  # Params # hdc : HDC [In],left : Int32 [In],top : Int32 [In],right : Int32 [In],bottom : Int32 [In]
  fun IntersectClipRect(hdc : HDC, left : Int32, top : Int32, right : Int32, bottom : Int32) : Int32

  # Params # hdc : HDC [In],hrgn : HRGN [In]
  fun InvertRgn(hdc : HDC, hrgn : HRGN) : LibC::BOOL

  # Params # xstart : Int32 [In],ystart : Int32 [In],xend : Int32 [In],yend : Int32 [In],lpproc : LINEDDAPROC [In],data : LPARAM [In]
  fun LineDDA(xstart : Int32, ystart : Int32, xend : Int32, yend : Int32, lpproc : LINEDDAPROC, data : LPARAM) : LibC::BOOL

  # Params # hdc : HDC [In],x : Int32 [In],y : Int32 [In]
  fun LineTo(hdc : HDC, x : Int32, y : Int32) : LibC::BOOL

  # Params # hdcdest : HDC [In],xdest : Int32 [In],ydest : Int32 [In],width : Int32 [In],height : Int32 [In],hdcsrc : HDC [In],xsrc : Int32 [In],ysrc : Int32 [In],hbmmask : HBITMAP [In],xmask : Int32 [In],ymask : Int32 [In],rop : UInt32 [In]
  fun MaskBlt(hdcdest : HDC, xdest : Int32, ydest : Int32, width : Int32, height : Int32, hdcsrc : HDC, xsrc : Int32, ysrc : Int32, hbmmask : HBITMAP, xmask : Int32, ymask : Int32, rop : UInt32) : LibC::BOOL

  # Params # hdcdest : HDC [In],lppoint : POINT* [In],hdcsrc : HDC [In],xsrc : Int32 [In],ysrc : Int32 [In],width : Int32 [In],height : Int32 [In],hbmmask : HBITMAP [In],xmask : Int32 [In],ymask : Int32 [In]
  fun PlgBlt(hdcdest : HDC, lppoint : POINT*, hdcsrc : HDC, xsrc : Int32, ysrc : Int32, width : Int32, height : Int32, hbmmask : HBITMAP, xmask : Int32, ymask : Int32) : LibC::BOOL

  # Params # hdc : HDC [In],x : Int32 [In],y : Int32 [In]
  fun OffsetClipRgn(hdc : HDC, x : Int32, y : Int32) : Int32

  # Params # hrgn : HRGN [In],x : Int32 [In],y : Int32 [In]
  fun OffsetRgn(hrgn : HRGN, x : Int32, y : Int32) : Int32

  # Params # hdc : HDC [In],x : Int32 [In],y : Int32 [In],w : Int32 [In],h : Int32 [In],rop : ROP_CODE [In]
  fun PatBlt(hdc : HDC, x : Int32, y : Int32, w : Int32, h : Int32, rop : ROP_CODE) : LibC::BOOL

  # Params # hdc : HDC [In],left : Int32 [In],top : Int32 [In],right : Int32 [In],bottom : Int32 [In],xr1 : Int32 [In],yr1 : Int32 [In],xr2 : Int32 [In],yr2 : Int32 [In]
  fun Pie(hdc : HDC, left : Int32, top : Int32, right : Int32, bottom : Int32, xr1 : Int32, yr1 : Int32, xr2 : Int32, yr2 : Int32) : LibC::BOOL

  # Params # hdc : HDC [In],hmf : HMETAFILE [In]
  fun PlayMetaFile(hdc : HDC, hmf : HMETAFILE) : LibC::BOOL

  # Params # hdc : HDC [In],hrgn : HRGN [In]
  fun PaintRgn(hdc : HDC, hrgn : HRGN) : LibC::BOOL

  # Params # hdc : HDC [In],apt : POINT* [In],asz : Int32* [In],csz : Int32 [In]
  fun PolyPolygon(hdc : HDC, apt : POINT*, asz : Int32*, csz : Int32) : LibC::BOOL

  # Params # hrgn : HRGN [In],x : Int32 [In],y : Int32 [In]
  fun PtInRegion(hrgn : HRGN, x : Int32, y : Int32) : LibC::BOOL

  # Params # hdc : HDC [In],x : Int32 [In],y : Int32 [In]
  fun PtVisible(hdc : HDC, x : Int32, y : Int32) : LibC::BOOL

  # Params # hrgn : HRGN [In],lprect : RECT* [In]
  fun RectInRegion(hrgn : HRGN, lprect : RECT*) : LibC::BOOL

  # Params # hdc : HDC [In],lprect : RECT* [In]
  fun RectVisible(hdc : HDC, lprect : RECT*) : LibC::BOOL

  # Params # hdc : HDC [In],left : Int32 [In],top : Int32 [In],right : Int32 [In],bottom : Int32 [In]
  fun Rectangle(hdc : HDC, left : Int32, top : Int32, right : Int32, bottom : Int32) : LibC::BOOL

  # Params # hdc : HDC [In],nsaveddc : Int32 [In]
  fun RestoreDC(hdc : HDC, nsaveddc : Int32) : LibC::BOOL

  # Params # hdc : HDC [In],lpdm : DEVMODEA* [In]
  fun ResetDCA(hdc : HDC, lpdm : DEVMODEA*) : HDC

  # Params # hdc : HDC [In],lpdm : DEVMODEW* [In]
  fun ResetDCW(hdc : HDC, lpdm : DEVMODEW*) : HDC

  # Params # hdc : HDC [In]
  fun RealizePalette(hdc : HDC) : UInt32

  # Params # lpfilename : PSTR [In]
  fun RemoveFontResourceA(lpfilename : PSTR) : LibC::BOOL

  # Params # lpfilename : LibC::LPWSTR [In]
  fun RemoveFontResourceW(lpfilename : LibC::LPWSTR) : LibC::BOOL

  # Params # hdc : HDC [In],left : Int32 [In],top : Int32 [In],right : Int32 [In],bottom : Int32 [In],width : Int32 [In],height : Int32 [In]
  fun RoundRect(hdc : HDC, left : Int32, top : Int32, right : Int32, bottom : Int32, width : Int32, height : Int32) : LibC::BOOL

  # Params # hpal : HPALETTE [In],n : UInt32 [In]
  fun ResizePalette(hpal : HPALETTE, n : UInt32) : LibC::BOOL

  # Params # hdc : HDC [In]
  fun SaveDC(hdc : HDC) : Int32

  # Params # hdc : HDC [In],hrgn : HRGN [In]
  fun SelectClipRgn(hdc : HDC, hrgn : HRGN) : Int32

  # Params # hdc : HDC [In],hrgn : HRGN [In],mode : RGN_COMBINE_MODE [In]
  fun ExtSelectClipRgn(hdc : HDC, hrgn : HRGN, mode : RGN_COMBINE_MODE) : Int32

  # Params # hdc : HDC [In]
  fun SetMetaRgn(hdc : HDC) : Int32

  # Params # hdc : HDC [In],h : HGDIOBJ [In]
  fun SelectObject(hdc : HDC, h : HGDIOBJ) : HGDIOBJ

  # Params # hdc : HDC [In],hpal : HPALETTE [In],bforcebkgd : LibC::BOOL [In]
  fun SelectPalette(hdc : HDC, hpal : HPALETTE, bforcebkgd : LibC::BOOL) : HPALETTE

  # Params # hdc : HDC [In],color : UInt32 [In]
  fun SetBkColor(hdc : HDC, color : UInt32) : UInt32

  # Params # hdc : HDC [In],color : UInt32 [In]
  fun SetDCBrushColor(hdc : HDC, color : UInt32) : UInt32

  # Params # hdc : HDC [In],color : UInt32 [In]
  fun SetDCPenColor(hdc : HDC, color : UInt32) : UInt32

  # Params # hdc : HDC [In],mode : BACKGROUND_MODE [In]
  fun SetBkMode(hdc : HDC, mode : BACKGROUND_MODE) : Int32

  # Params # hbm : HBITMAP [In],cb : UInt32 [In],pvbits : Void* [In]
  fun SetBitmapBits(hbm : HBITMAP, cb : UInt32, pvbits : Void*) : Int32

  # Params # hdc : HDC [In],lprect : RECT* [In],flags : SET_BOUNDS_RECT_FLAGS [In]
  fun SetBoundsRect(hdc : HDC, lprect : RECT*, flags : SET_BOUNDS_RECT_FLAGS) : UInt32

  # Params # hdc : HDC [In],hbm : HBITMAP [In],start : UInt32 [In],clines : UInt32 [In],lpbits : Void* [In],lpbmi : BITMAPINFO* [In],coloruse : DIB_USAGE [In]
  fun SetDIBits(hdc : HDC, hbm : HBITMAP, start : UInt32, clines : UInt32, lpbits : Void*, lpbmi : BITMAPINFO*, coloruse : DIB_USAGE) : Int32

  # Params # hdc : HDC [In],xdest : Int32 [In],ydest : Int32 [In],w : UInt32 [In],h : UInt32 [In],xsrc : Int32 [In],ysrc : Int32 [In],startscan : UInt32 [In],clines : UInt32 [In],lpvbits : Void* [In],lpbmi : BITMAPINFO* [In],coloruse : DIB_USAGE [In]
  fun SetDIBitsToDevice(hdc : HDC, xdest : Int32, ydest : Int32, w : UInt32, h : UInt32, xsrc : Int32, ysrc : Int32, startscan : UInt32, clines : UInt32, lpvbits : Void*, lpbmi : BITMAPINFO*, coloruse : DIB_USAGE) : Int32

  # Params # hdc : HDC [In],flags : UInt32 [In]
  fun SetMapperFlags(hdc : HDC, flags : UInt32) : UInt32

  # Params # hdc : HDC [In],imode : GRAPHICS_MODE [In]
  fun SetGraphicsMode(hdc : HDC, imode : GRAPHICS_MODE) : Int32

  # Params # hdc : HDC [In],imode : HDC_MAP_MODE [In]
  fun SetMapMode(hdc : HDC, imode : HDC_MAP_MODE) : Int32

  # Params # hdc : HDC [In],l : DC_LAYOUT [In]
  fun SetLayout(hdc : HDC, l : DC_LAYOUT) : UInt32

  # Params # hdc : HDC [In]
  fun GetLayout(hdc : HDC) : UInt32

  # Params # cbbuffer : UInt32 [In],lpdata : UInt8* [In]
  fun SetMetaFileBitsEx(cbbuffer : UInt32, lpdata : UInt8*) : HMETAFILE

  # Params # hpal : HPALETTE [In],istart : UInt32 [In],centries : UInt32 [In],ppalentries : PALETTEENTRY* [In]
  fun SetPaletteEntries(hpal : HPALETTE, istart : UInt32, centries : UInt32, ppalentries : PALETTEENTRY*) : UInt32

  # Params # hdc : HDC [In],x : Int32 [In],y : Int32 [In],color : UInt32 [In]
  fun SetPixel(hdc : HDC, x : Int32, y : Int32, color : UInt32) : UInt32

  # Params # hdc : HDC [In],x : Int32 [In],y : Int32 [In],color : UInt32 [In]
  fun SetPixelV(hdc : HDC, x : Int32, y : Int32, color : UInt32) : LibC::BOOL

  # Params # hdc : HDC [In],mode : CREATE_POLYGON_RGN_MODE [In]
  fun SetPolyFillMode(hdc : HDC, mode : CREATE_POLYGON_RGN_MODE) : Int32

  # Params # hdcdest : HDC [In],xdest : Int32 [In],ydest : Int32 [In],wdest : Int32 [In],hdest : Int32 [In],hdcsrc : HDC [In],xsrc : Int32 [In],ysrc : Int32 [In],wsrc : Int32 [In],hsrc : Int32 [In],rop : ROP_CODE [In]
  fun StretchBlt(hdcdest : HDC, xdest : Int32, ydest : Int32, wdest : Int32, hdest : Int32, hdcsrc : HDC, xsrc : Int32, ysrc : Int32, wsrc : Int32, hsrc : Int32, rop : ROP_CODE) : LibC::BOOL

  # Params # hrgn : HRGN [In],left : Int32 [In],top : Int32 [In],right : Int32 [In],bottom : Int32 [In]
  fun SetRectRgn(hrgn : HRGN, left : Int32, top : Int32, right : Int32, bottom : Int32) : LibC::BOOL

  # Params # hdc : HDC [In],xdest : Int32 [In],ydest : Int32 [In],destwidth : Int32 [In],destheight : Int32 [In],xsrc : Int32 [In],ysrc : Int32 [In],srcwidth : Int32 [In],srcheight : Int32 [In],lpbits : Void* [In],lpbmi : BITMAPINFO* [In],iusage : DIB_USAGE [In],rop : ROP_CODE [In]
  fun StretchDIBits(hdc : HDC, xdest : Int32, ydest : Int32, destwidth : Int32, destheight : Int32, xsrc : Int32, ysrc : Int32, srcwidth : Int32, srcheight : Int32, lpbits : Void*, lpbmi : BITMAPINFO*, iusage : DIB_USAGE, rop : ROP_CODE) : Int32

  # Params # hdc : HDC [In],rop2 : R2_MODE [In]
  fun SetROP2(hdc : HDC, rop2 : R2_MODE) : Int32

  # Params # hdc : HDC [In],mode : STRETCH_BLT_MODE [In]
  fun SetStretchBltMode(hdc : HDC, mode : STRETCH_BLT_MODE) : Int32

  # Params # hdc : HDC [In],use : SYSTEM_PALETTE_USE [In]
  fun SetSystemPaletteUse(hdc : HDC, use : SYSTEM_PALETTE_USE) : UInt32

  # Params # hdc : HDC [In],extra : Int32 [In]
  fun SetTextCharacterExtra(hdc : HDC, extra : Int32) : Int32

  # Params # hdc : HDC [In],color : UInt32 [In]
  fun SetTextColor(hdc : HDC, color : UInt32) : UInt32

  # Params # hdc : HDC [In],align : TEXT_ALIGN_OPTIONS [In]
  fun SetTextAlign(hdc : HDC, align : TEXT_ALIGN_OPTIONS) : UInt32

  # Params # hdc : HDC [In],extra : Int32 [In],count : Int32 [In]
  fun SetTextJustification(hdc : HDC, extra : Int32, count : Int32) : LibC::BOOL

  # Params # hdc : HDC [In]
  fun UpdateColors(hdc : HDC) : LibC::BOOL

  # Params # hdcdest : HDC [In],xorigindest : Int32 [In],yorigindest : Int32 [In],wdest : Int32 [In],hdest : Int32 [In],hdcsrc : HDC [In],xoriginsrc : Int32 [In],yoriginsrc : Int32 [In],wsrc : Int32 [In],hsrc : Int32 [In],ftn : BLENDFUNCTION [In]
  fun AlphaBlend(hdcdest : HDC, xorigindest : Int32, yorigindest : Int32, wdest : Int32, hdest : Int32, hdcsrc : HDC, xoriginsrc : Int32, yoriginsrc : Int32, wsrc : Int32, hsrc : Int32, ftn : BLENDFUNCTION) : LibC::BOOL

  # Params # hdcdest : HDC [In],xorigindest : Int32 [In],yorigindest : Int32 [In],wdest : Int32 [In],hdest : Int32 [In],hdcsrc : HDC [In],xoriginsrc : Int32 [In],yoriginsrc : Int32 [In],wsrc : Int32 [In],hsrc : Int32 [In],crtransparent : UInt32 [In]
  fun TransparentBlt(hdcdest : HDC, xorigindest : Int32, yorigindest : Int32, wdest : Int32, hdest : Int32, hdcsrc : HDC, xoriginsrc : Int32, yoriginsrc : Int32, wsrc : Int32, hsrc : Int32, crtransparent : UInt32) : LibC::BOOL

  # Params # hdc : HDC [In],pvertex : TRIVERTEX* [In],nvertex : UInt32 [In],pmesh : Void* [In],nmesh : UInt32 [In],ulmode : GRADIENT_FILL [In]
  fun GradientFill(hdc : HDC, pvertex : TRIVERTEX*, nvertex : UInt32, pmesh : Void*, nmesh : UInt32, ulmode : GRADIENT_FILL) : LibC::BOOL

  # Params # hdcdest : HDC [In],xorigindest : Int32 [In],yorigindest : Int32 [In],wdest : Int32 [In],hdest : Int32 [In],hdcsrc : HDC [In],xoriginsrc : Int32 [In],yoriginsrc : Int32 [In],wsrc : Int32 [In],hsrc : Int32 [In],ftn : BLENDFUNCTION [In]
  fun GdiAlphaBlend(hdcdest : HDC, xorigindest : Int32, yorigindest : Int32, wdest : Int32, hdest : Int32, hdcsrc : HDC, xoriginsrc : Int32, yoriginsrc : Int32, wsrc : Int32, hsrc : Int32, ftn : BLENDFUNCTION) : LibC::BOOL

  # Params # hdcdest : HDC [In],xorigindest : Int32 [In],yorigindest : Int32 [In],wdest : Int32 [In],hdest : Int32 [In],hdcsrc : HDC [In],xoriginsrc : Int32 [In],yoriginsrc : Int32 [In],wsrc : Int32 [In],hsrc : Int32 [In],crtransparent : UInt32 [In]
  fun GdiTransparentBlt(hdcdest : HDC, xorigindest : Int32, yorigindest : Int32, wdest : Int32, hdest : Int32, hdcsrc : HDC, xoriginsrc : Int32, yoriginsrc : Int32, wsrc : Int32, hsrc : Int32, crtransparent : UInt32) : LibC::BOOL

  # Params # hdc : HDC [In],pvertex : TRIVERTEX* [In],nvertex : UInt32 [In],pmesh : Void* [In],ncount : UInt32 [In],ulmode : GRADIENT_FILL [In]
  fun GdiGradientFill(hdc : HDC, pvertex : TRIVERTEX*, nvertex : UInt32, pmesh : Void*, ncount : UInt32, ulmode : GRADIENT_FILL) : LibC::BOOL

  # Params # hdc : HDC [In],lphandletable : HANDLETABLE* [In],lpmr : METARECORD* [In],noobjs : UInt32 [In]
  fun PlayMetaFileRecord(hdc : HDC, lphandletable : HANDLETABLE*, lpmr : METARECORD*, noobjs : UInt32) : LibC::BOOL

  # Params # hdc : HDC [In],hmf : HMETAFILE [In],proc : MFENUMPROC [In],param3 : LPARAM [In]
  fun EnumMetaFile(hdc : HDC, hmf : HMETAFILE, proc : MFENUMPROC, param3 : LPARAM) : LibC::BOOL

  # Params # hdc : HDC [In]
  fun CloseEnhMetaFile(hdc : HDC) : HENHMETAFILE

  # Params # henh : HENHMETAFILE [In],lpfilename : PSTR [In]
  fun CopyEnhMetaFileA(henh : HENHMETAFILE, lpfilename : PSTR) : HENHMETAFILE

  # Params # henh : HENHMETAFILE [In],lpfilename : LibC::LPWSTR [In]
  fun CopyEnhMetaFileW(henh : HENHMETAFILE, lpfilename : LibC::LPWSTR) : HENHMETAFILE

  # Params # hdc : HDC [In],lpfilename : PSTR [In],lprc : RECT* [In],lpdesc : PSTR [In]
  fun CreateEnhMetaFileA(hdc : HDC, lpfilename : PSTR, lprc : RECT*, lpdesc : PSTR) : HdcMetdataEnhFileHandle

  # Params # hdc : HDC [In],lpfilename : LibC::LPWSTR [In],lprc : RECT* [In],lpdesc : LibC::LPWSTR [In]
  fun CreateEnhMetaFileW(hdc : HDC, lpfilename : LibC::LPWSTR, lprc : RECT*, lpdesc : LibC::LPWSTR) : HdcMetdataEnhFileHandle

  # Params # hmf : HENHMETAFILE [In]
  fun DeleteEnhMetaFile(hmf : HENHMETAFILE) : LibC::BOOL

  # Params # hdc : HDC [In],hmf : HENHMETAFILE [In],proc : ENHMFENUMPROC [In],param3 : Void* [In],lprect : RECT* [In]
  fun EnumEnhMetaFile(hdc : HDC, hmf : HENHMETAFILE, proc : ENHMFENUMPROC, param3 : Void*, lprect : RECT*) : LibC::BOOL

  # Params # lpname : PSTR [In]
  fun GetEnhMetaFileA(lpname : PSTR) : HENHMETAFILE

  # Params # lpname : LibC::LPWSTR [In]
  fun GetEnhMetaFileW(lpname : LibC::LPWSTR) : HENHMETAFILE

  # Params # hemf : HENHMETAFILE [In],nsize : UInt32 [In],lpdata : UInt8* [In]
  fun GetEnhMetaFileBits(hemf : HENHMETAFILE, nsize : UInt32, lpdata : UInt8*) : UInt32

  # Params # hemf : HENHMETAFILE [In],cchbuffer : UInt32 [In],lpdescription : UInt8* [In]
  fun GetEnhMetaFileDescriptionA(hemf : HENHMETAFILE, cchbuffer : UInt32, lpdescription : UInt8*) : UInt32

  # Params # hemf : HENHMETAFILE [In],cchbuffer : UInt32 [In],lpdescription : Char* [In]
  fun GetEnhMetaFileDescriptionW(hemf : HENHMETAFILE, cchbuffer : UInt32, lpdescription : Char*) : UInt32

  # Params # hemf : HENHMETAFILE [In],nsize : UInt32 [In],lpenhmetaheader : ENHMETAHEADER* [In]
  fun GetEnhMetaFileHeader(hemf : HENHMETAFILE, nsize : UInt32, lpenhmetaheader : ENHMETAHEADER*) : UInt32

  # Params # hemf : HENHMETAFILE [In],nnumentries : UInt32 [In],lppaletteentries : PALETTEENTRY* [In]
  fun GetEnhMetaFilePaletteEntries(hemf : HENHMETAFILE, nnumentries : UInt32, lppaletteentries : PALETTEENTRY*) : UInt32

  # Params # hemf : HENHMETAFILE [In],cbdata16 : UInt32 [In],pdata16 : UInt8* [In],imapmode : Int32 [In],hdcref : HDC [In]
  fun GetWinMetaFileBits(hemf : HENHMETAFILE, cbdata16 : UInt32, pdata16 : UInt8*, imapmode : Int32, hdcref : HDC) : UInt32

  # Params # hdc : HDC [In],hmf : HENHMETAFILE [In],lprect : RECT* [In]
  fun PlayEnhMetaFile(hdc : HDC, hmf : HENHMETAFILE, lprect : RECT*) : LibC::BOOL

  # Params # hdc : HDC [In],pht : HANDLETABLE* [In],pmr : ENHMETARECORD* [In],cht : UInt32 [In]
  fun PlayEnhMetaFileRecord(hdc : HDC, pht : HANDLETABLE*, pmr : ENHMETARECORD*, cht : UInt32) : LibC::BOOL

  # Params # nsize : UInt32 [In],pb : UInt8* [In]
  fun SetEnhMetaFileBits(nsize : UInt32, pb : UInt8*) : HENHMETAFILE

  # Params # hdc : HDC [In],nsize : UInt32 [In],lpdata : UInt8* [In]
  fun GdiComment(hdc : HDC, nsize : UInt32, lpdata : UInt8*) : LibC::BOOL

  # Params # hdc : HDC [In],lptm : TEXTMETRICA* [In]
  fun GetTextMetricsA(hdc : HDC, lptm : TEXTMETRICA*) : LibC::BOOL

  # Params # hdc : HDC [In],lptm : TEXTMETRICW* [In]
  fun GetTextMetricsW(hdc : HDC, lptm : TEXTMETRICW*) : LibC::BOOL

  # Params # hdc : HDC [In],x : Int32 [In],y : Int32 [In],r : UInt32 [In],startangle : Float32 [In],sweepangle : Float32 [In]
  fun AngleArc(hdc : HDC, x : Int32, y : Int32, r : UInt32, startangle : Float32, sweepangle : Float32) : LibC::BOOL

  # Params # hdc : HDC [In],apt : POINT* [In],asz : UInt32* [In],csz : UInt32 [In]
  fun PolyPolyline(hdc : HDC, apt : POINT*, asz : UInt32*, csz : UInt32) : LibC::BOOL

  # Params # hdc : HDC [In],lpxf : XFORM* [In]
  fun GetWorldTransform(hdc : HDC, lpxf : XFORM*) : LibC::BOOL

  # Params # hdc : HDC [In],lpxf : XFORM* [In]
  fun SetWorldTransform(hdc : HDC, lpxf : XFORM*) : LibC::BOOL

  # Params # hdc : HDC [In],lpxf : XFORM* [In],mode : MODIFY_WORLD_TRANSFORM_MODE [In]
  fun ModifyWorldTransform(hdc : HDC, lpxf : XFORM*, mode : MODIFY_WORLD_TRANSFORM_MODE) : LibC::BOOL

  # Params # lpxfout : XFORM* [In],lpxf1 : XFORM* [In],lpxf2 : XFORM* [In]
  fun CombineTransform(lpxfout : XFORM*, lpxf1 : XFORM*, lpxf2 : XFORM*) : LibC::BOOL

  # Params # hdc : HDC [In],pbmi : BITMAPINFO* [In],usage : DIB_USAGE [In],ppvbits : Void** [In],hsection : LibC::HANDLE [In],offset : UInt32 [In]
  fun CreateDIBSection(hdc : HDC, pbmi : BITMAPINFO*, usage : DIB_USAGE, ppvbits : Void**, hsection : LibC::HANDLE, offset : UInt32) : HBITMAP

  # Params # hdc : HDC [In],istart : UInt32 [In],centries : UInt32 [In],prgbq : RGBQUAD* [In]
  fun GetDIBColorTable(hdc : HDC, istart : UInt32, centries : UInt32, prgbq : RGBQUAD*) : UInt32

  # Params # hdc : HDC [In],istart : UInt32 [In],centries : UInt32 [In],prgbq : RGBQUAD* [In]
  fun SetDIBColorTable(hdc : HDC, istart : UInt32, centries : UInt32, prgbq : RGBQUAD*) : UInt32

  # Params # hdc : HDC [In],lpca : COLORADJUSTMENT* [In]
  fun SetColorAdjustment(hdc : HDC, lpca : COLORADJUSTMENT*) : LibC::BOOL

  # Params # hdc : HDC [In],lpca : COLORADJUSTMENT* [In]
  fun GetColorAdjustment(hdc : HDC, lpca : COLORADJUSTMENT*) : LibC::BOOL

  # Params # hdc : HDC [In]
  fun CreateHalftonePalette(hdc : HDC) : HPALETTE

  # Params # hdc : HDC [In]
  fun AbortPath(hdc : HDC) : LibC::BOOL

  # Params # hdc : HDC [In],left : Int32 [In],top : Int32 [In],right : Int32 [In],bottom : Int32 [In],xr1 : Int32 [In],yr1 : Int32 [In],xr2 : Int32 [In],yr2 : Int32 [In]
  fun ArcTo(hdc : HDC, left : Int32, top : Int32, right : Int32, bottom : Int32, xr1 : Int32, yr1 : Int32, xr2 : Int32, yr2 : Int32) : LibC::BOOL

  # Params # hdc : HDC [In]
  fun BeginPath(hdc : HDC) : LibC::BOOL

  # Params # hdc : HDC [In]
  fun CloseFigure(hdc : HDC) : LibC::BOOL

  # Params # hdc : HDC [In]
  fun EndPath(hdc : HDC) : LibC::BOOL

  # Params # hdc : HDC [In]
  fun FillPath(hdc : HDC) : LibC::BOOL

  # Params # hdc : HDC [In]
  fun FlattenPath(hdc : HDC) : LibC::BOOL

  # Params # hdc : HDC [In],apt : POINT* [In],aj : UInt8* [In],cpt : Int32 [In]
  fun GetPath(hdc : HDC, apt : POINT*, aj : UInt8*, cpt : Int32) : Int32

  # Params # hdc : HDC [In]
  fun PathToRegion(hdc : HDC) : HRGN

  # Params # hdc : HDC [In],apt : POINT* [In],aj : UInt8* [In],cpt : Int32 [In]
  fun PolyDraw(hdc : HDC, apt : POINT*, aj : UInt8*, cpt : Int32) : LibC::BOOL

  # Params # hdc : HDC [In],mode : RGN_COMBINE_MODE [In]
  fun SelectClipPath(hdc : HDC, mode : RGN_COMBINE_MODE) : LibC::BOOL

  # Params # hdc : HDC [In],dir : ARC_DIRECTION [In]
  fun SetArcDirection(hdc : HDC, dir : ARC_DIRECTION) : Int32

  # Params # hdc : HDC [In],limit : Float32 [In],old : Float32* [In]
  fun SetMiterLimit(hdc : HDC, limit : Float32, old : Float32*) : LibC::BOOL

  # Params # hdc : HDC [In]
  fun StrokeAndFillPath(hdc : HDC) : LibC::BOOL

  # Params # hdc : HDC [In]
  fun StrokePath(hdc : HDC) : LibC::BOOL

  # Params # hdc : HDC [In]
  fun WidenPath(hdc : HDC) : LibC::BOOL

  # Params # ipenstyle : PEN_STYLE [In],cwidth : UInt32 [In],plbrush : LOGBRUSH* [In],cstyle : UInt32 [In],pstyle : UInt32* [In]
  fun ExtCreatePen(ipenstyle : PEN_STYLE, cwidth : UInt32, plbrush : LOGBRUSH*, cstyle : UInt32, pstyle : UInt32*) : HPEN

  # Params # hdc : HDC [In],plimit : Float32* [In]
  fun GetMiterLimit(hdc : HDC, plimit : Float32*) : LibC::BOOL

  # Params # hdc : HDC [In]
  fun GetArcDirection(hdc : HDC) : Int32

  # Params # h : HGDIOBJ [In],c : Int32 [In],pv : Void* [In]
  fun GetObjectW(h : HGDIOBJ, c : Int32, pv : Void*) : Int32

  # Params # hdc : HDC [In],x : Int32 [In],y : Int32 [In],lppt : POINT* [In]
  fun MoveToEx(hdc : HDC, x : Int32, y : Int32, lppt : POINT*) : LibC::BOOL

  # Params # hdc : HDC [In],x : Int32 [In],y : Int32 [In],lpstring : UInt8* [In],c : Int32 [In]
  fun TextOutA(hdc : HDC, x : Int32, y : Int32, lpstring : UInt8*, c : Int32) : LibC::BOOL

  # Params # hdc : HDC [In],x : Int32 [In],y : Int32 [In],lpstring : Char* [In],c : Int32 [In]
  fun TextOutW(hdc : HDC, x : Int32, y : Int32, lpstring : Char*, c : Int32) : LibC::BOOL

  # Params # hdc : HDC [In],x : Int32 [In],y : Int32 [In],options : ETO_OPTIONS [In],lprect : RECT* [In],lpstring : UInt8* [In],c : UInt32 [In],lpdx : Int32* [In]
  fun ExtTextOutA(hdc : HDC, x : Int32, y : Int32, options : ETO_OPTIONS, lprect : RECT*, lpstring : UInt8*, c : UInt32, lpdx : Int32*) : LibC::BOOL

  # Params # hdc : HDC [In],x : Int32 [In],y : Int32 [In],options : ETO_OPTIONS [In],lprect : RECT* [In],lpstring : Char* [In],c : UInt32 [In],lpdx : Int32* [In]
  fun ExtTextOutW(hdc : HDC, x : Int32, y : Int32, options : ETO_OPTIONS, lprect : RECT*, lpstring : Char*, c : UInt32, lpdx : Int32*) : LibC::BOOL

  # Params # hdc : HDC [In],ppt : POLYTEXTA* [In],nstrings : Int32 [In]
  fun PolyTextOutA(hdc : HDC, ppt : POLYTEXTA*, nstrings : Int32) : LibC::BOOL

  # Params # hdc : HDC [In],ppt : POLYTEXTW* [In],nstrings : Int32 [In]
  fun PolyTextOutW(hdc : HDC, ppt : POLYTEXTW*, nstrings : Int32) : LibC::BOOL

  # Params # pptl : POINT* [In],cpoint : Int32 [In],imode : CREATE_POLYGON_RGN_MODE [In]
  fun CreatePolygonRgn(pptl : POINT*, cpoint : Int32, imode : CREATE_POLYGON_RGN_MODE) : HRGN

  # Params # hdc : HDC [In],lppt : POINT* [In],c : Int32 [In]
  fun DPtoLP(hdc : HDC, lppt : POINT*, c : Int32) : LibC::BOOL

  # Params # hdc : HDC [In],lppt : POINT* [In],c : Int32 [In]
  fun LPtoDP(hdc : HDC, lppt : POINT*, c : Int32) : LibC::BOOL

  # Params # hdc : HDC [In],apt : POINT* [In],cpt : Int32 [In]
  fun Polygon(hdc : HDC, apt : POINT*, cpt : Int32) : LibC::BOOL

  # Params # hdc : HDC [In],apt : POINT* [In],cpt : Int32 [In]
  fun Polyline(hdc : HDC, apt : POINT*, cpt : Int32) : LibC::BOOL

  # Params # hdc : HDC [In],apt : POINT* [In],cpt : UInt32 [In]
  fun PolyBezier(hdc : HDC, apt : POINT*, cpt : UInt32) : LibC::BOOL

  # Params # hdc : HDC [In],apt : POINT* [In],cpt : UInt32 [In]
  fun PolyBezierTo(hdc : HDC, apt : POINT*, cpt : UInt32) : LibC::BOOL

  # Params # hdc : HDC [In],apt : POINT* [In],cpt : UInt32 [In]
  fun PolylineTo(hdc : HDC, apt : POINT*, cpt : UInt32) : LibC::BOOL

  # Params # hdc : HDC [In],x : Int32 [In],y : Int32 [In],lpsz : SIZE* [In]
  fun SetViewportExtEx(hdc : HDC, x : Int32, y : Int32, lpsz : SIZE*) : LibC::BOOL

  # Params # hdc : HDC [In],x : Int32 [In],y : Int32 [In],lppt : POINT* [In]
  fun SetViewportOrgEx(hdc : HDC, x : Int32, y : Int32, lppt : POINT*) : LibC::BOOL

  # Params # hdc : HDC [In],x : Int32 [In],y : Int32 [In],lpsz : SIZE* [In]
  fun SetWindowExtEx(hdc : HDC, x : Int32, y : Int32, lpsz : SIZE*) : LibC::BOOL

  # Params # hdc : HDC [In],x : Int32 [In],y : Int32 [In],lppt : POINT* [In]
  fun SetWindowOrgEx(hdc : HDC, x : Int32, y : Int32, lppt : POINT*) : LibC::BOOL

  # Params # hdc : HDC [In],x : Int32 [In],y : Int32 [In],lppt : POINT* [In]
  fun OffsetViewportOrgEx(hdc : HDC, x : Int32, y : Int32, lppt : POINT*) : LibC::BOOL

  # Params # hdc : HDC [In],x : Int32 [In],y : Int32 [In],lppt : POINT* [In]
  fun OffsetWindowOrgEx(hdc : HDC, x : Int32, y : Int32, lppt : POINT*) : LibC::BOOL

  # Params # hdc : HDC [In],xn : Int32 [In],dx : Int32 [In],yn : Int32 [In],yd : Int32 [In],lpsz : SIZE* [In]
  fun ScaleViewportExtEx(hdc : HDC, xn : Int32, dx : Int32, yn : Int32, yd : Int32, lpsz : SIZE*) : LibC::BOOL

  # Params # hdc : HDC [In],xn : Int32 [In],xd : Int32 [In],yn : Int32 [In],yd : Int32 [In],lpsz : SIZE* [In]
  fun ScaleWindowExtEx(hdc : HDC, xn : Int32, xd : Int32, yn : Int32, yd : Int32, lpsz : SIZE*) : LibC::BOOL

  # Params # hbm : HBITMAP [In],w : Int32 [In],h : Int32 [In],lpsz : SIZE* [In]
  fun SetBitmapDimensionEx(hbm : HBITMAP, w : Int32, h : Int32, lpsz : SIZE*) : LibC::BOOL

  # Params # hdc : HDC [In],x : Int32 [In],y : Int32 [In],lppt : POINT* [In]
  fun SetBrushOrgEx(hdc : HDC, x : Int32, y : Int32, lppt : POINT*) : LibC::BOOL

  # Params # hdc : HDC [In],c : Int32 [In],lpname : UInt8* [In]
  fun GetTextFaceA(hdc : HDC, c : Int32, lpname : UInt8*) : Int32

  # Params # hdc : HDC [In],c : Int32 [In],lpname : Char* [In]
  fun GetTextFaceW(hdc : HDC, c : Int32, lpname : Char*) : Int32

  # Params # hdc : HDC [In],npairs : UInt32 [In],lpkernpair : KERNINGPAIR* [In]
  fun GetKerningPairsA(hdc : HDC, npairs : UInt32, lpkernpair : KERNINGPAIR*) : UInt32

  # Params # hdc : HDC [In],npairs : UInt32 [In],lpkernpair : KERNINGPAIR* [In]
  fun GetKerningPairsW(hdc : HDC, npairs : UInt32, lpkernpair : KERNINGPAIR*) : UInt32

  # Params # hdc : HDC [In],lppt : POINT* [In]
  fun GetDCOrgEx(hdc : HDC, lppt : POINT*) : LibC::BOOL

  # Params # hdc : HDC [In],x : Int32 [In],y : Int32 [In],ptl : POINT* [In]
  fun FixBrushOrgEx(hdc : HDC, x : Int32, y : Int32, ptl : POINT*) : LibC::BOOL

  # Params # h : HGDIOBJ [In]
  fun UnrealizeObject(h : HGDIOBJ) : LibC::BOOL

  # Params # 
  fun GdiFlush : LibC::BOOL

  # Params # dw : UInt32 [In]
  fun GdiSetBatchLimit(dw : UInt32) : UInt32

  # Params # 
  fun GdiGetBatchLimit : UInt32

  # Params # param0 : UInt32 [In],param1 : WGLSWAP* [In]
  fun wglSwapMultipleBuffers(param0 : UInt32, param1 : WGLSWAP*) : UInt32

  # Params # puchsrcbuffer : UInt8* [In],ulsrcbuffersize : UInt32 [In],ppuchfontpackagebuffer : UInt8** [In],pulfontpackagebuffersize : UInt32* [In],pulbyteswritten : UInt32* [In],usflag : UInt16 [In],usttcindex : UInt16 [In],ussubsetformat : UInt16 [In],ussubsetlanguage : UInt16 [In],ussubsetplatform : CREATE_FONT_PACKAGE_SUBSET_PLATFORM [In],ussubsetencoding : CREATE_FONT_PACKAGE_SUBSET_ENCODING [In],pussubsetkeeplist : UInt16* [In],ussubsetlistcount : UInt16 [In],lpfnallocate : CFP_ALLOCPROC [In],lpfnreallocate : CFP_REALLOCPROC [In],lpfnfree : CFP_FREEPROC [In],lpvreserved : Void* [In]
  fun CreateFontPackage(puchsrcbuffer : UInt8*, ulsrcbuffersize : UInt32, ppuchfontpackagebuffer : UInt8**, pulfontpackagebuffersize : UInt32*, pulbyteswritten : UInt32*, usflag : UInt16, usttcindex : UInt16, ussubsetformat : UInt16, ussubsetlanguage : UInt16, ussubsetplatform : CREATE_FONT_PACKAGE_SUBSET_PLATFORM, ussubsetencoding : CREATE_FONT_PACKAGE_SUBSET_ENCODING, pussubsetkeeplist : UInt16*, ussubsetlistcount : UInt16, lpfnallocate : CFP_ALLOCPROC, lpfnreallocate : CFP_REALLOCPROC, lpfnfree : CFP_FREEPROC, lpvreserved : Void*) : UInt32

  # Params # puchmergefontbuffer : UInt8* [In],ulmergefontbuffersize : UInt32 [In],puchfontpackagebuffer : UInt8* [In],ulfontpackagebuffersize : UInt32 [In],ppuchdestbuffer : UInt8** [In],puldestbuffersize : UInt32* [In],pulbyteswritten : UInt32* [In],usmode : UInt16 [In],lpfnallocate : CFP_ALLOCPROC [In],lpfnreallocate : CFP_REALLOCPROC [In],lpfnfree : CFP_FREEPROC [In],lpvreserved : Void* [In]
  fun MergeFontPackage(puchmergefontbuffer : UInt8*, ulmergefontbuffersize : UInt32, puchfontpackagebuffer : UInt8*, ulfontpackagebuffersize : UInt32, ppuchdestbuffer : UInt8**, puldestbuffersize : UInt32*, pulbyteswritten : UInt32*, usmode : UInt16, lpfnallocate : CFP_ALLOCPROC, lpfnreallocate : CFP_REALLOCPROC, lpfnfree : CFP_FREEPROC, lpvreserved : Void*) : UInt32

  # Params # hdc : HDC [In],ulflags : TTEMBED_FLAGS [In],ulcharset : EMBED_FONT_CHARSET [In],pulprivstatus : EMBEDDED_FONT_PRIV_STATUS* [In],pulstatus : UInt32* [In],lpfnwritetostream : WRITEEMBEDPROC [In],lpvwritestream : Void* [In],puscharcodeset : UInt16* [In],uscharcodecount : UInt16 [In],uslanguage : UInt16 [In],pttembedinfo : TTEMBEDINFO* [In]
  fun TTEmbedFont(hdc : HDC, ulflags : TTEMBED_FLAGS, ulcharset : EMBED_FONT_CHARSET, pulprivstatus : EMBEDDED_FONT_PRIV_STATUS*, pulstatus : UInt32*, lpfnwritetostream : WRITEEMBEDPROC, lpvwritestream : Void*, puscharcodeset : UInt16*, uscharcodecount : UInt16, uslanguage : UInt16, pttembedinfo : TTEMBEDINFO*) : Int32

  # Params # hdc : HDC [In],szfontfilename : PSTR [In],usttcindex : UInt16 [In],ulflags : TTEMBED_FLAGS [In],ulcharset : EMBED_FONT_CHARSET [In],pulprivstatus : EMBEDDED_FONT_PRIV_STATUS* [In],pulstatus : UInt32* [In],lpfnwritetostream : WRITEEMBEDPROC [In],lpvwritestream : Void* [In],puscharcodeset : UInt16* [In],uscharcodecount : UInt16 [In],uslanguage : UInt16 [In],pttembedinfo : TTEMBEDINFO* [In]
  fun TTEmbedFontFromFileA(hdc : HDC, szfontfilename : PSTR, usttcindex : UInt16, ulflags : TTEMBED_FLAGS, ulcharset : EMBED_FONT_CHARSET, pulprivstatus : EMBEDDED_FONT_PRIV_STATUS*, pulstatus : UInt32*, lpfnwritetostream : WRITEEMBEDPROC, lpvwritestream : Void*, puscharcodeset : UInt16*, uscharcodecount : UInt16, uslanguage : UInt16, pttembedinfo : TTEMBEDINFO*) : Int32

  # Params # phfontreference : LibC::HANDLE* [In],ulflags : UInt32 [In],pulprivstatus : EMBEDDED_FONT_PRIV_STATUS* [In],ulprivs : FONT_LICENSE_PRIVS [In],pulstatus : TTLOAD_EMBEDDED_FONT_STATUS* [In],lpfnreadfromstream : READEMBEDPROC [In],lpvreadstream : Void* [In],szwinfamilyname : LibC::LPWSTR [In],szmacfamilyname : PSTR [In],pttloadinfo : TTLOADINFO* [In]
  fun TTLoadEmbeddedFont(phfontreference : LibC::HANDLE*, ulflags : UInt32, pulprivstatus : EMBEDDED_FONT_PRIV_STATUS*, ulprivs : FONT_LICENSE_PRIVS, pulstatus : TTLOAD_EMBEDDED_FONT_STATUS*, lpfnreadfromstream : READEMBEDPROC, lpvreadstream : Void*, szwinfamilyname : LibC::LPWSTR, szmacfamilyname : PSTR, pttloadinfo : TTLOADINFO*) : Int32

  # Params # ulflags : TTEMBED_FLAGS [In],pulprivstatus : UInt32* [In],ulprivs : FONT_LICENSE_PRIVS [In],pulstatus : UInt32* [In],lpfnreadfromstream : READEMBEDPROC [In],lpvreadstream : Void* [In],pttloadinfo : TTLOADINFO* [In]
  fun TTGetEmbeddedFontInfo(ulflags : TTEMBED_FLAGS, pulprivstatus : UInt32*, ulprivs : FONT_LICENSE_PRIVS, pulstatus : UInt32*, lpfnreadfromstream : READEMBEDPROC, lpvreadstream : Void*, pttloadinfo : TTLOADINFO*) : Int32

  # Params # hfontreference : LibC::HANDLE [In],ulflags : UInt32 [In],pulstatus : UInt32* [In]
  fun TTDeleteEmbeddedFont(hfontreference : LibC::HANDLE, ulflags : UInt32, pulstatus : UInt32*) : Int32

  # Params # hdc : HDC [In],pulembedtype : EMBEDDED_FONT_PRIV_STATUS* [In]
  fun TTGetEmbeddingType(hdc : HDC, pulembedtype : EMBEDDED_FONT_PRIV_STATUS*) : Int32

  # Params # hdc : HDC [In],puccharcodes : UInt8* [In],ulcharcodesize : UInt32 [In],pusshortcodes : UInt16* [In],ulshortcodesize : UInt32 [In],ulflags : UInt32 [In]
  fun TTCharToUnicode(hdc : HDC, puccharcodes : UInt8*, ulcharcodesize : UInt32, pusshortcodes : UInt16*, ulshortcodesize : UInt32, ulflags : UInt32) : Int32

  # Params # hdc : HDC [In],ptestparam : TTVALIDATIONTESTSPARAMS* [In]
  fun TTRunValidationTests(hdc : HDC, ptestparam : TTVALIDATIONTESTSPARAMS*) : Int32

  # Params # hdc : HDC [In],pbenabled : LibC::BOOL* [In]
  fun TTIsEmbeddingEnabled(hdc : HDC, pbenabled : LibC::BOOL*) : Int32

  # Params # lpszfacename : PSTR [In],pbenabled : LibC::BOOL* [In]
  fun TTIsEmbeddingEnabledForFacename(lpszfacename : PSTR, pbenabled : LibC::BOOL*) : Int32

  # Params # lpszfacename : PSTR [In],benable : LibC::BOOL [In]
  fun TTEnableEmbeddingForFacename(lpszfacename : PSTR, benable : LibC::BOOL) : Int32

  # Params # hdc : HDC [In],ulflags : TTEMBED_FLAGS [In],ulcharset : EMBED_FONT_CHARSET [In],pulprivstatus : EMBEDDED_FONT_PRIV_STATUS* [In],pulstatus : UInt32* [In],lpfnwritetostream : WRITEEMBEDPROC [In],lpvwritestream : Void* [In],pulcharcodeset : UInt32* [In],uscharcodecount : UInt16 [In],uslanguage : UInt16 [In],pttembedinfo : TTEMBEDINFO* [In]
  fun TTEmbedFontEx(hdc : HDC, ulflags : TTEMBED_FLAGS, ulcharset : EMBED_FONT_CHARSET, pulprivstatus : EMBEDDED_FONT_PRIV_STATUS*, pulstatus : UInt32*, lpfnwritetostream : WRITEEMBEDPROC, lpvwritestream : Void*, pulcharcodeset : UInt32*, uscharcodecount : UInt16, uslanguage : UInt16, pttembedinfo : TTEMBEDINFO*) : Int32

  # Params # hdc : HDC [In],ptestparam : TTVALIDATIONTESTSPARAMSEX* [In]
  fun TTRunValidationTestsEx(hdc : HDC, ptestparam : TTVALIDATIONTESTSPARAMSEX*) : Int32

  # Params # phfontreference : LibC::HANDLE* [In],wzwinfamilyname : Char* [In],cchmaxwinname : Int32 [In],szmacfamilyname : UInt8* [In],cchmaxmacname : Int32 [In]
  fun TTGetNewFontName(phfontreference : LibC::HANDLE*, wzwinfamilyname : Char*, cchmaxwinname : Int32, szmacfamilyname : UInt8*, cchmaxmacname : Int32) : Int32

  # Params # hdc : HDC [In],qrc : RECT* [In],edge : DRAWEDGE_FLAGS [In],grfflags : DRAW_EDGE_FLAGS [In]
  fun DrawEdge(hdc : HDC, qrc : RECT*, edge : DRAWEDGE_FLAGS, grfflags : DRAW_EDGE_FLAGS) : LibC::BOOL

  # Params # param0 : HDC [In],param1 : RECT* [In],param2 : DFC_TYPE [In],param3 : DFCS_STATE [In]
  fun DrawFrameControl(param0 : HDC, param1 : RECT*, param2 : DFC_TYPE, param3 : DFCS_STATE) : LibC::BOOL

  # Params # hwnd : LibC::HANDLE [In],hdc : HDC [In],lprect : RECT* [In],flags : DRAW_CAPTION_FLAGS [In]
  fun DrawCaption(hwnd : LibC::HANDLE, hdc : HDC, lprect : RECT*, flags : DRAW_CAPTION_FLAGS) : LibC::BOOL

  # Params # hwnd : LibC::HANDLE [In],idani : Int32 [In],lprcfrom : RECT* [In],lprcto : RECT* [In]
  fun DrawAnimatedRects(hwnd : LibC::HANDLE, idani : Int32, lprcfrom : RECT*, lprcto : RECT*) : LibC::BOOL

  # Params # hdc : HDC [In],lpchtext : UInt8* [In],cchtext : Int32 [In],lprc : RECT* [In],format : DRAW_TEXT_FORMAT [In]
  fun DrawTextA(hdc : HDC, lpchtext : UInt8*, cchtext : Int32, lprc : RECT*, format : DRAW_TEXT_FORMAT) : Int32

  # Params # hdc : HDC [In],lpchtext : Char* [In],cchtext : Int32 [In],lprc : RECT* [In],format : DRAW_TEXT_FORMAT [In]
  fun DrawTextW(hdc : HDC, lpchtext : Char*, cchtext : Int32, lprc : RECT*, format : DRAW_TEXT_FORMAT) : Int32

  # Params # hdc : HDC [In],lpchtext : UInt8* [In],cchtext : Int32 [In],lprc : RECT* [In],format : DRAW_TEXT_FORMAT [In],lpdtp : DRAWTEXTPARAMS* [In]
  fun DrawTextExA(hdc : HDC, lpchtext : UInt8*, cchtext : Int32, lprc : RECT*, format : DRAW_TEXT_FORMAT, lpdtp : DRAWTEXTPARAMS*) : Int32

  # Params # hdc : HDC [In],lpchtext : Char* [In],cchtext : Int32 [In],lprc : RECT* [In],format : DRAW_TEXT_FORMAT [In],lpdtp : DRAWTEXTPARAMS* [In]
  fun DrawTextExW(hdc : HDC, lpchtext : Char*, cchtext : Int32, lprc : RECT*, format : DRAW_TEXT_FORMAT, lpdtp : DRAWTEXTPARAMS*) : Int32

  # Params # hdc : HDC [In],hbrush : HBRUSH [In],lpoutputfunc : GRAYSTRINGPROC [In],lpdata : LPARAM [In],ncount : Int32 [In],x : Int32 [In],y : Int32 [In],nwidth : Int32 [In],nheight : Int32 [In]
  fun GrayStringA(hdc : HDC, hbrush : HBRUSH, lpoutputfunc : GRAYSTRINGPROC, lpdata : LPARAM, ncount : Int32, x : Int32, y : Int32, nwidth : Int32, nheight : Int32) : LibC::BOOL

  # Params # hdc : HDC [In],hbrush : HBRUSH [In],lpoutputfunc : GRAYSTRINGPROC [In],lpdata : LPARAM [In],ncount : Int32 [In],x : Int32 [In],y : Int32 [In],nwidth : Int32 [In],nheight : Int32 [In]
  fun GrayStringW(hdc : HDC, hbrush : HBRUSH, lpoutputfunc : GRAYSTRINGPROC, lpdata : LPARAM, ncount : Int32, x : Int32, y : Int32, nwidth : Int32, nheight : Int32) : LibC::BOOL

  # Params # hdc : HDC [In],hbrfore : HBRUSH [In],qfncallback : DRAWSTATEPROC [In],ldata : LPARAM [In],wdata : LibC::UINT_PTR [In],x : Int32 [In],y : Int32 [In],cx : Int32 [In],cy : Int32 [In],uflags : DRAWSTATE_FLAGS [In]
  fun DrawStateA(hdc : HDC, hbrfore : HBRUSH, qfncallback : DRAWSTATEPROC, ldata : LPARAM, wdata : LibC::UINT_PTR, x : Int32, y : Int32, cx : Int32, cy : Int32, uflags : DRAWSTATE_FLAGS) : LibC::BOOL

  # Params # hdc : HDC [In],hbrfore : HBRUSH [In],qfncallback : DRAWSTATEPROC [In],ldata : LPARAM [In],wdata : LibC::UINT_PTR [In],x : Int32 [In],y : Int32 [In],cx : Int32 [In],cy : Int32 [In],uflags : DRAWSTATE_FLAGS [In]
  fun DrawStateW(hdc : HDC, hbrfore : HBRUSH, qfncallback : DRAWSTATEPROC, ldata : LPARAM, wdata : LibC::UINT_PTR, x : Int32, y : Int32, cx : Int32, cy : Int32, uflags : DRAWSTATE_FLAGS) : LibC::BOOL

  # Params # hdc : HDC [In],x : Int32 [In],y : Int32 [In],lpstring : UInt8* [In],chcount : Int32 [In],ntabpositions : Int32 [In],lpntabstoppositions : Int32* [In],ntaborigin : Int32 [In]
  fun TabbedTextOutA(hdc : HDC, x : Int32, y : Int32, lpstring : UInt8*, chcount : Int32, ntabpositions : Int32, lpntabstoppositions : Int32*, ntaborigin : Int32) : Int32

  # Params # hdc : HDC [In],x : Int32 [In],y : Int32 [In],lpstring : Char* [In],chcount : Int32 [In],ntabpositions : Int32 [In],lpntabstoppositions : Int32* [In],ntaborigin : Int32 [In]
  fun TabbedTextOutW(hdc : HDC, x : Int32, y : Int32, lpstring : Char*, chcount : Int32, ntabpositions : Int32, lpntabstoppositions : Int32*, ntaborigin : Int32) : Int32

  # Params # hdc : HDC [In],lpstring : UInt8* [In],chcount : Int32 [In],ntabpositions : Int32 [In],lpntabstoppositions : Int32* [In]
  fun GetTabbedTextExtentA(hdc : HDC, lpstring : UInt8*, chcount : Int32, ntabpositions : Int32, lpntabstoppositions : Int32*) : UInt32

  # Params # hdc : HDC [In],lpstring : Char* [In],chcount : Int32 [In],ntabpositions : Int32 [In],lpntabstoppositions : Int32* [In]
  fun GetTabbedTextExtentW(hdc : HDC, lpstring : Char*, chcount : Int32, ntabpositions : Int32, lpntabstoppositions : Int32*) : UInt32

  # Params # hwnd : LibC::HANDLE [In]
  fun UpdateWindow(hwnd : LibC::HANDLE) : LibC::BOOL

  # Params # hdc : HDC [In]
  fun PaintDesktop(hdc : HDC) : LibC::BOOL

  # Params # hdc : HDC [In]
  fun WindowFromDC(hdc : HDC) : HANDLE

  # Params # hwnd : LibC::HANDLE [In]
  fun GetDC(hwnd : LibC::HANDLE) : HDC

  # Params # hwnd : LibC::HANDLE [In],hrgnclip : HRGN [In],flags : GET_DCX_FLAGS [In]
  fun GetDCEx(hwnd : LibC::HANDLE, hrgnclip : HRGN, flags : GET_DCX_FLAGS) : HDC

  # Params # hwnd : LibC::HANDLE [In]
  fun GetWindowDC(hwnd : LibC::HANDLE) : HDC

  # Params # hwnd : LibC::HANDLE [In],hdc : HDC [In]
  fun ReleaseDC(hwnd : LibC::HANDLE, hdc : HDC) : Int32

  # Params # hwnd : LibC::HANDLE [In],lppaint : PAINTSTRUCT* [In]
  fun BeginPaint(hwnd : LibC::HANDLE, lppaint : PAINTSTRUCT*) : HDC

  # Params # hwnd : LibC::HANDLE [In],lppaint : PAINTSTRUCT* [In]
  fun EndPaint(hwnd : LibC::HANDLE, lppaint : PAINTSTRUCT*) : LibC::BOOL

  # Params # hwnd : LibC::HANDLE [In],lprect : RECT* [In],berase : LibC::BOOL [In]
  fun GetUpdateRect(hwnd : LibC::HANDLE, lprect : RECT*, berase : LibC::BOOL) : LibC::BOOL

  # Params # hwnd : LibC::HANDLE [In],hrgn : HRGN [In],berase : LibC::BOOL [In]
  fun GetUpdateRgn(hwnd : LibC::HANDLE, hrgn : HRGN, berase : LibC::BOOL) : Int32

  # Params # hwnd : LibC::HANDLE [In],hrgn : HRGN [In],bredraw : LibC::BOOL [In]
  fun SetWindowRgn(hwnd : LibC::HANDLE, hrgn : HRGN, bredraw : LibC::BOOL) : Int32

  # Params # hwnd : LibC::HANDLE [In],hrgn : HRGN [In]
  fun GetWindowRgn(hwnd : LibC::HANDLE, hrgn : HRGN) : Int32

  # Params # hwnd : LibC::HANDLE [In],lprc : RECT* [In]
  fun GetWindowRgnBox(hwnd : LibC::HANDLE, lprc : RECT*) : Int32

  # Params # hdc : HDC [In],hwnd : LibC::HANDLE [In]
  fun ExcludeUpdateRgn(hdc : HDC, hwnd : LibC::HANDLE) : Int32

  # Params # hwnd : LibC::HANDLE [In],lprect : RECT* [In],berase : LibC::BOOL [In]
  fun InvalidateRect(hwnd : LibC::HANDLE, lprect : RECT*, berase : LibC::BOOL) : LibC::BOOL

  # Params # hwnd : LibC::HANDLE [In],lprect : RECT* [In]
  fun ValidateRect(hwnd : LibC::HANDLE, lprect : RECT*) : LibC::BOOL

  # Params # hwnd : LibC::HANDLE [In],hrgn : HRGN [In],berase : LibC::BOOL [In]
  fun InvalidateRgn(hwnd : LibC::HANDLE, hrgn : HRGN, berase : LibC::BOOL) : LibC::BOOL

  # Params # hwnd : LibC::HANDLE [In],hrgn : HRGN [In]
  fun ValidateRgn(hwnd : LibC::HANDLE, hrgn : HRGN) : LibC::BOOL

  # Params # hwnd : LibC::HANDLE [In],lprcupdate : RECT* [In],hrgnupdate : HRGN [In],flags : REDRAW_WINDOW_FLAGS [In]
  fun RedrawWindow(hwnd : LibC::HANDLE, lprcupdate : RECT*, hrgnupdate : HRGN, flags : REDRAW_WINDOW_FLAGS) : LibC::BOOL

  # Params # hwndlock : LibC::HANDLE [In]
  fun LockWindowUpdate(hwndlock : LibC::HANDLE) : LibC::BOOL

  # Params # hwnd : LibC::HANDLE [In],lppoint : POINT* [In]
  fun ClientToScreen(hwnd : LibC::HANDLE, lppoint : POINT*) : LibC::BOOL

  # Params # hwnd : LibC::HANDLE [In],lppoint : POINT* [In]
  fun ScreenToClient(hwnd : LibC::HANDLE, lppoint : POINT*) : LibC::BOOL

  # Params # hwndfrom : LibC::HANDLE [In],hwndto : LibC::HANDLE [In],lppoints : POINT* [In],cpoints : UInt32 [In]
  fun MapWindowPoints(hwndfrom : LibC::HANDLE, hwndto : LibC::HANDLE, lppoints : POINT*, cpoints : UInt32) : Int32

  # Params # nindex : Int32 [In]
  fun GetSysColorBrush(nindex : Int32) : HBRUSH

  # Params # hdc : HDC [In],lprc : RECT* [In]
  fun DrawFocusRect(hdc : HDC, lprc : RECT*) : LibC::BOOL

  # Params # hdc : HDC [In],lprc : RECT* [In],hbr : HBRUSH [In]
  fun FillRect(hdc : HDC, lprc : RECT*, hbr : HBRUSH) : Int32

  # Params # hdc : HDC [In],lprc : RECT* [In],hbr : HBRUSH [In]
  fun FrameRect(hdc : HDC, lprc : RECT*, hbr : HBRUSH) : Int32

  # Params # hdc : HDC [In],lprc : RECT* [In]
  fun InvertRect(hdc : HDC, lprc : RECT*) : LibC::BOOL

  # Params # lprc : RECT* [In],xleft : Int32 [In],ytop : Int32 [In],xright : Int32 [In],ybottom : Int32 [In]
  fun SetRect(lprc : RECT*, xleft : Int32, ytop : Int32, xright : Int32, ybottom : Int32) : LibC::BOOL

  # Params # lprc : RECT* [In]
  fun SetRectEmpty(lprc : RECT*) : LibC::BOOL

  # Params # lprcdst : RECT* [In],lprcsrc : RECT* [In]
  fun CopyRect(lprcdst : RECT*, lprcsrc : RECT*) : LibC::BOOL

  # Params # lprc : RECT* [In],dx : Int32 [In],dy : Int32 [In]
  fun InflateRect(lprc : RECT*, dx : Int32, dy : Int32) : LibC::BOOL

  # Params # lprcdst : RECT* [In],lprcsrc1 : RECT* [In],lprcsrc2 : RECT* [In]
  fun IntersectRect(lprcdst : RECT*, lprcsrc1 : RECT*, lprcsrc2 : RECT*) : LibC::BOOL

  # Params # lprcdst : RECT* [In],lprcsrc1 : RECT* [In],lprcsrc2 : RECT* [In]
  fun UnionRect(lprcdst : RECT*, lprcsrc1 : RECT*, lprcsrc2 : RECT*) : LibC::BOOL

  # Params # lprcdst : RECT* [In],lprcsrc1 : RECT* [In],lprcsrc2 : RECT* [In]
  fun SubtractRect(lprcdst : RECT*, lprcsrc1 : RECT*, lprcsrc2 : RECT*) : LibC::BOOL

  # Params # lprc : RECT* [In],dx : Int32 [In],dy : Int32 [In]
  fun OffsetRect(lprc : RECT*, dx : Int32, dy : Int32) : LibC::BOOL

  # Params # lprc : RECT* [In]
  fun IsRectEmpty(lprc : RECT*) : LibC::BOOL

  # Params # lprc1 : RECT* [In],lprc2 : RECT* [In]
  fun EqualRect(lprc1 : RECT*, lprc2 : RECT*) : LibC::BOOL

  # Params # lprc : RECT* [In],pt : POINT [In]
  fun PtInRect(lprc : RECT*, pt : POINT) : LibC::BOOL

  # Params # hinstance : HINSTANCE [In],lpbitmapname : PSTR [In]
  fun LoadBitmapA(hinstance : HINSTANCE, lpbitmapname : PSTR) : HBITMAP

  # Params # hinstance : HINSTANCE [In],lpbitmapname : LibC::LPWSTR [In]
  fun LoadBitmapW(hinstance : HINSTANCE, lpbitmapname : LibC::LPWSTR) : HBITMAP

  # Params # lpdevmode : DEVMODEA* [In],dwflags : CDS_TYPE [In]
  fun ChangeDisplaySettingsA(lpdevmode : DEVMODEA*, dwflags : CDS_TYPE) : DISP_CHANGE

  # Params # lpdevmode : DEVMODEW* [In],dwflags : CDS_TYPE [In]
  fun ChangeDisplaySettingsW(lpdevmode : DEVMODEW*, dwflags : CDS_TYPE) : DISP_CHANGE

  # Params # lpszdevicename : PSTR [In],lpdevmode : DEVMODEA* [In],hwnd : LibC::HANDLE [In],dwflags : CDS_TYPE [In],lparam : Void* [In]
  fun ChangeDisplaySettingsExA(lpszdevicename : PSTR, lpdevmode : DEVMODEA*, hwnd : LibC::HANDLE, dwflags : CDS_TYPE, lparam : Void*) : DISP_CHANGE

  # Params # lpszdevicename : LibC::LPWSTR [In],lpdevmode : DEVMODEW* [In],hwnd : LibC::HANDLE [In],dwflags : CDS_TYPE [In],lparam : Void* [In]
  fun ChangeDisplaySettingsExW(lpszdevicename : LibC::LPWSTR, lpdevmode : DEVMODEW*, hwnd : LibC::HANDLE, dwflags : CDS_TYPE, lparam : Void*) : DISP_CHANGE

  # Params # lpszdevicename : PSTR [In],imodenum : ENUM_DISPLAY_SETTINGS_MODE [In],lpdevmode : DEVMODEA* [In]
  fun EnumDisplaySettingsA(lpszdevicename : PSTR, imodenum : ENUM_DISPLAY_SETTINGS_MODE, lpdevmode : DEVMODEA*) : LibC::BOOL

  # Params # lpszdevicename : LibC::LPWSTR [In],imodenum : ENUM_DISPLAY_SETTINGS_MODE [In],lpdevmode : DEVMODEW* [In]
  fun EnumDisplaySettingsW(lpszdevicename : LibC::LPWSTR, imodenum : ENUM_DISPLAY_SETTINGS_MODE, lpdevmode : DEVMODEW*) : LibC::BOOL

  # Params # lpszdevicename : PSTR [In],imodenum : ENUM_DISPLAY_SETTINGS_MODE [In],lpdevmode : DEVMODEA* [In],dwflags : UInt32 [In]
  fun EnumDisplaySettingsExA(lpszdevicename : PSTR, imodenum : ENUM_DISPLAY_SETTINGS_MODE, lpdevmode : DEVMODEA*, dwflags : UInt32) : LibC::BOOL

  # Params # lpszdevicename : LibC::LPWSTR [In],imodenum : ENUM_DISPLAY_SETTINGS_MODE [In],lpdevmode : DEVMODEW* [In],dwflags : UInt32 [In]
  fun EnumDisplaySettingsExW(lpszdevicename : LibC::LPWSTR, imodenum : ENUM_DISPLAY_SETTINGS_MODE, lpdevmode : DEVMODEW*, dwflags : UInt32) : LibC::BOOL

  # Params # lpdevice : PSTR [In],idevnum : UInt32 [In],lpdisplaydevice : DISPLAY_DEVICEA* [In],dwflags : UInt32 [In]
  fun EnumDisplayDevicesA(lpdevice : PSTR, idevnum : UInt32, lpdisplaydevice : DISPLAY_DEVICEA*, dwflags : UInt32) : LibC::BOOL

  # Params # lpdevice : LibC::LPWSTR [In],idevnum : UInt32 [In],lpdisplaydevice : DISPLAY_DEVICEW* [In],dwflags : UInt32 [In]
  fun EnumDisplayDevicesW(lpdevice : LibC::LPWSTR, idevnum : UInt32, lpdisplaydevice : DISPLAY_DEVICEW*, dwflags : UInt32) : LibC::BOOL

  # Params # pt : POINT [In],dwflags : MONITOR_FROM_FLAGS [In]
  fun MonitorFromPoint(pt : POINT, dwflags : MONITOR_FROM_FLAGS) : HMONITOR

  # Params # lprc : RECT* [In],dwflags : MONITOR_FROM_FLAGS [In]
  fun MonitorFromRect(lprc : RECT*, dwflags : MONITOR_FROM_FLAGS) : HMONITOR

  # Params # hwnd : LibC::HANDLE [In],dwflags : MONITOR_FROM_FLAGS [In]
  fun MonitorFromWindow(hwnd : LibC::HANDLE, dwflags : MONITOR_FROM_FLAGS) : HMONITOR

  # Params # hmonitor : HMONITOR [In],lpmi : MONITORINFO* [In]
  fun GetMonitorInfoA(hmonitor : HMONITOR, lpmi : MONITORINFO*) : LibC::BOOL

  # Params # hmonitor : HMONITOR [In],lpmi : MONITORINFO* [In]
  fun GetMonitorInfoW(hmonitor : HMONITOR, lpmi : MONITORINFO*) : LibC::BOOL

  # Params # hdc : HDC [In],lprcclip : RECT* [In],lpfnenum : MONITORENUMPROC [In],dwdata : LPARAM [In]
  fun EnumDisplayMonitors(hdc : HDC, lprcclip : RECT*, lpfnenum : MONITORENUMPROC, dwdata : LPARAM) : LibC::BOOL
end
