require "../foundation.cr"
require "../graphics/dxgi/common.cr"
require "../system/com.cr"
require "../graphics/direct3d.cr"
require "../graphics/dxgi.cr"
require "../security.cr"

{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link("delayimp")]
{% end %}
@[Link("user32")]
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/IGNORE:4199")]
{% end %}
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/DELAYLOAD:d3d11.dll")]
@[Link(ldflags: "/DELAYLOAD:d3dcompiler_47.dll")]
@[Link(ldflags: "/DELAYLOAD:d3dcsx.dll")]
{% else %}
@[Link("d3d11")]
@[Link("d3dcompiler_47")]
@[Link("d3dcsx")]
{% end %}
lib LibWin32
  D3D11_16BIT_INDEX_STRIP_CUT_VALUE = 65535_u32
  D3D11_32BIT_INDEX_STRIP_CUT_VALUE = 4294967295_u32
  D3D11_8BIT_INDEX_STRIP_CUT_VALUE = 255_u32
  D3D11_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = 9_u32
  D3D11_CLIP_OR_CULL_DISTANCE_COUNT = 8_u32
  D3D11_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = 2_u32
  D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = 14_u32
  D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = 4_u32
  D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = 32_u32
  D3D11_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = 15_u32
  D3D11_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT = 16_u32
  D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4_u32
  D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = 15_u32
  D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1_u32
  D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1_u32
  D3D11_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = 64_u32
  D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4_u32
  D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = 1_u32
  D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1_u32
  D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1_u32
  D3D11_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = 32_u32
  D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = 1_u32
  D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = 128_u32
  D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = 1_u32
  D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = 1_u32
  D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = 128_u32
  D3D11_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = 1_u32
  D3D11_COMMONSHADER_SAMPLER_REGISTER_COUNT = 16_u32
  D3D11_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = 1_u32
  D3D11_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = 1_u32
  D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT = 16_u32
  D3D11_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = 32_u32
  D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENTS = 4_u32
  D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D11_COMMONSHADER_TEMP_REGISTER_COUNT = 4096_u32
  D3D11_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = 3_u32
  D3D11_COMMONSHADER_TEMP_REGISTER_READ_PORTS = 3_u32
  D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = 10_u32
  D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = -10_i32
  D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = -8_i32
  D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = 7_u32
  D3D11_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 256_u32
  D3D11_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = 64_u32
  D3D11_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 240_u32
  D3D11_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = 68_u32
  D3D11_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 224_u32
  D3D11_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = 72_u32
  D3D11_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 208_u32
  D3D11_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = 76_u32
  D3D11_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 192_u32
  D3D11_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP = 84_u32
  D3D11_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 176_u32
  D3D11_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = 92_u32
  D3D11_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 160_u32
  D3D11_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = 100_u32
  D3D11_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 144_u32
  D3D11_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = 112_u32
  D3D11_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 128_u32
  D3D11_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = 128_u32
  D3D11_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 112_u32
  D3D11_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = 144_u32
  D3D11_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 96_u32
  D3D11_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP = 168_u32
  D3D11_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 80_u32
  D3D11_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP = 204_u32
  D3D11_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 64_u32
  D3D11_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = 256_u32
  D3D11_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 48_u32
  D3D11_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = 340_u32
  D3D11_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 32_u32
  D3D11_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = 512_u32
  D3D11_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 16_u32
  D3D11_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = 768_u32
  D3D11_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = 1_u32
  D3D11_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = 256_u32
  D3D11_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = 768_u32
  D3D11_CS_4_X_THREAD_GROUP_MAX_X = 768_u32
  D3D11_CS_4_X_THREAD_GROUP_MAX_Y = 768_u32
  D3D11_CS_4_X_UAV_REGISTER_COUNT = 1_u32
  D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = 65535_u32
  D3D11_CS_TGSM_REGISTER_COUNT = 8192_u32
  D3D11_CS_TGSM_REGISTER_READS_PER_INST = 1_u32
  D3D11_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = 1_u32
  D3D11_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = 1_u32
  D3D11_CS_THREADGROUPID_REGISTER_COMPONENTS = 3_u32
  D3D11_CS_THREADGROUPID_REGISTER_COUNT = 1_u32
  D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS = 1_u32
  D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT = 1_u32
  D3D11_CS_THREADIDINGROUP_REGISTER_COMPONENTS = 3_u32
  D3D11_CS_THREADIDINGROUP_REGISTER_COUNT = 1_u32
  D3D11_CS_THREADID_REGISTER_COMPONENTS = 3_u32
  D3D11_CS_THREADID_REGISTER_COUNT = 1_u32
  D3D11_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = 1024_u32
  D3D11_CS_THREAD_GROUP_MAX_X = 1024_u32
  D3D11_CS_THREAD_GROUP_MAX_Y = 1024_u32
  D3D11_CS_THREAD_GROUP_MAX_Z = 64_u32
  D3D11_CS_THREAD_GROUP_MIN_X = 1_u32
  D3D11_CS_THREAD_GROUP_MIN_Y = 1_u32
  D3D11_CS_THREAD_GROUP_MIN_Z = 1_u32
  D3D11_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = 16384_u32
  D3D11_DEFAULT_BLEND_FACTOR_ALPHA = "1.0_f32"
  D3D11_DEFAULT_BLEND_FACTOR_BLUE = "1.0_f32"
  D3D11_DEFAULT_BLEND_FACTOR_GREEN = "1.0_f32"
  D3D11_DEFAULT_BLEND_FACTOR_RED = "1.0_f32"
  D3D11_DEFAULT_BORDER_COLOR_COMPONENT = "0.0_f32"
  D3D11_DEFAULT_DEPTH_BIAS = 0_u32
  D3D11_DEFAULT_DEPTH_BIAS_CLAMP = "0.0_f32"
  D3D11_DEFAULT_MAX_ANISOTROPY = 16_u32
  D3D11_DEFAULT_MIP_LOD_BIAS = "0.0_f32"
  D3D11_DEFAULT_RENDER_TARGET_ARRAY_INDEX = 0_u32
  D3D11_DEFAULT_SAMPLE_MASK = 4294967295_u32
  D3D11_DEFAULT_SCISSOR_ENDX = 0_u32
  D3D11_DEFAULT_SCISSOR_ENDY = 0_u32
  D3D11_DEFAULT_SCISSOR_STARTX = 0_u32
  D3D11_DEFAULT_SCISSOR_STARTY = 0_u32
  D3D11_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = "0.0_f32"
  D3D11_DEFAULT_STENCIL_READ_MASK = 255_u32
  D3D11_DEFAULT_STENCIL_REFERENCE = 0_u32
  D3D11_DEFAULT_STENCIL_WRITE_MASK = 255_u32
  D3D11_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = 0_u32
  D3D11_DEFAULT_VIEWPORT_HEIGHT = 0_u32
  D3D11_DEFAULT_VIEWPORT_MAX_DEPTH = "0.0_f32"
  D3D11_DEFAULT_VIEWPORT_MIN_DEPTH = "0.0_f32"
  D3D11_DEFAULT_VIEWPORT_TOPLEFTX = 0_u32
  D3D11_DEFAULT_VIEWPORT_TOPLEFTY = 0_u32
  D3D11_DEFAULT_VIEWPORT_WIDTH = 0_u32
  D3D11_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968_u32
  D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS = 4_u32
  D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COUNT = 32_u32
  D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST = 2_u32
  D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS = 1_u32
  D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS = 3_u32
  D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT = 1_u32
  D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST = 2_u32
  D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS = 1_u32
  D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4_u32
  D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT = 32_u32
  D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2_u32
  D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1_u32
  D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1_u32
  D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1_u32
  D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2_u32
  D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1_u32
  D3D11_DS_OUTPUT_REGISTER_COMPONENTS = 4_u32
  D3D11_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D11_DS_OUTPUT_REGISTER_COUNT = 32_u32
  D3D11_FLOAT16_FUSED_TOLERANCE_IN_ULP = "0.6_f64"
  D3D11_FLOAT32_MAX = "3.4028235e+38_f32"
  D3D11_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = "0.6_f32"
  D3D11_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = "2.4_f32"
  D3D11_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = "1.0_f32"
  D3D11_FLOAT_TO_SRGB_OFFSET = "0.055_f32"
  D3D11_FLOAT_TO_SRGB_SCALE_1 = "12.92_f32"
  D3D11_FLOAT_TO_SRGB_SCALE_2 = "1.055_f32"
  D3D11_FLOAT_TO_SRGB_THRESHOLD = "0.0031308_f32"
  D3D11_FTOI_INSTRUCTION_MAX_INPUT = "2147483600.0_f32"
  D3D11_FTOI_INSTRUCTION_MIN_INPUT = "-2147483600.0_f32"
  D3D11_FTOU_INSTRUCTION_MAX_INPUT = "4294967300.0_f32"
  D3D11_FTOU_INSTRUCTION_MIN_INPUT = "0.0_f32"
  D3D11_GS_INPUT_INSTANCE_ID_READS_PER_INST = 2_u32
  D3D11_GS_INPUT_INSTANCE_ID_READ_PORTS = 1_u32
  D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS = 1_u32
  D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COUNT = 1_u32
  D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = 1_u32
  D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D11_GS_INPUT_PRIM_CONST_REGISTER_COUNT = 1_u32
  D3D11_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = 2_u32
  D3D11_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = 1_u32
  D3D11_GS_INPUT_REGISTER_COMPONENTS = 4_u32
  D3D11_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D11_GS_INPUT_REGISTER_COUNT = 32_u32
  D3D11_GS_INPUT_REGISTER_READS_PER_INST = 2_u32
  D3D11_GS_INPUT_REGISTER_READ_PORTS = 1_u32
  D3D11_GS_INPUT_REGISTER_VERTICES = 32_u32
  D3D11_GS_MAX_INSTANCE_COUNT = 32_u32
  D3D11_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES = 1024_u32
  D3D11_GS_OUTPUT_ELEMENTS = 32_u32
  D3D11_GS_OUTPUT_REGISTER_COMPONENTS = 4_u32
  D3D11_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D11_GS_OUTPUT_REGISTER_COUNT = 32_u32
  D3D11_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT = 32_u32
  D3D11_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT = 32_u32
  D3D11_HS_CONTROL_POINT_REGISTER_COMPONENTS = 4_u32
  D3D11_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D11_HS_CONTROL_POINT_REGISTER_READS_PER_INST = 2_u32
  D3D11_HS_CONTROL_POINT_REGISTER_READ_PORTS = 1_u32
  D3D11_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND = 4294967295_u32
  D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS = 1_u32
  D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT = 1_u32
  D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST = 2_u32
  D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS = 1_u32
  D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS = 1_u32
  D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT = 1_u32
  D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST = 2_u32
  D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS = 1_u32
  D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1_u32
  D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1_u32
  D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2_u32
  D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1_u32
  D3D11_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND = 4294967295_u32
  D3D11_HS_MAXTESSFACTOR_LOWER_BOUND = "1.0_f32"
  D3D11_HS_MAXTESSFACTOR_UPPER_BOUND = "64.0_f32"
  D3D11_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968_u32
  D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS = 1_u32
  D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT = 1_u32
  D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST = 2_u32
  D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS = 1_u32
  D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4_u32
  D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT = 32_u32
  D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2_u32
  D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1_u32
  D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS = 128_u32
  D3D11_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = 0_u32
  D3D11_IA_DEFAULT_PRIMITIVE_TOPOLOGY = 0_u32
  D3D11_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = 0_u32
  D3D11_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = 1_u32
  D3D11_IA_INSTANCE_ID_BIT_COUNT = 32_u32
  D3D11_IA_INTEGER_ARITHMETIC_BIT_COUNT = 32_u32
  D3D11_IA_PATCH_MAX_CONTROL_POINT_COUNT = 32_u32
  D3D11_IA_PRIMITIVE_ID_BIT_COUNT = 32_u32
  D3D11_IA_VERTEX_ID_BIT_COUNT = 32_u32
  D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 32_u32
  D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 128_u32
  D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 32_u32
  D3D11_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = 4294967295_u32
  D3D11_INTEGER_DIVIDE_BY_ZERO_REMAINDER = 4294967295_u32
  D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = 4294967295_u32
  D3D11_KEEP_UNORDERED_ACCESS_VIEWS = 4294967295_u32
  D3D11_LINEAR_GAMMA = "1.0_f32"
  D3D11_MAJOR_VERSION = 11_u32
  D3D11_MAX_BORDER_COLOR_COMPONENT = "1.0_f32"
  D3D11_MAX_DEPTH = "1.0_f32"
  D3D11_MAX_MAXANISOTROPY = 16_u32
  D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT = 32_u32
  D3D11_MAX_POSITION_VALUE = "3.4028236e+34_f32"
  D3D11_MAX_TEXTURE_DIMENSION_2_TO_EXP = 17_u32
  D3D11_MINOR_VERSION = 0_u32
  D3D11_MIN_BORDER_COLOR_COMPONENT = "0.0_f32"
  D3D11_MIN_DEPTH = "0.0_f32"
  D3D11_MIN_MAXANISOTROPY = 0_u32
  D3D11_MIP_LOD_BIAS_MAX = "15.99_f32"
  D3D11_MIP_LOD_BIAS_MIN = "-16.0_f32"
  D3D11_MIP_LOD_FRACTIONAL_BIT_COUNT = 8_u32
  D3D11_MIP_LOD_RANGE_BIT_COUNT = 8_u32
  D3D11_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = "1.4_f32"
  D3D11_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = 0_u32
  D3D11_PIXEL_ADDRESS_RANGE_BIT_COUNT = 15_u32
  D3D11_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = 16_u32
  D3D11_PS_CS_UAV_REGISTER_COMPONENTS = 1_u32
  D3D11_PS_CS_UAV_REGISTER_COUNT = 8_u32
  D3D11_PS_CS_UAV_REGISTER_READS_PER_INST = 1_u32
  D3D11_PS_CS_UAV_REGISTER_READ_PORTS = 1_u32
  D3D11_PS_FRONTFACING_DEFAULT_VALUE = 4294967295_u32
  D3D11_PS_FRONTFACING_FALSE_VALUE = 0_u32
  D3D11_PS_FRONTFACING_TRUE_VALUE = 4294967295_u32
  D3D11_PS_INPUT_REGISTER_COMPONENTS = 4_u32
  D3D11_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D11_PS_INPUT_REGISTER_COUNT = 32_u32
  D3D11_PS_INPUT_REGISTER_READS_PER_INST = 2_u32
  D3D11_PS_INPUT_REGISTER_READ_PORTS = 1_u32
  D3D11_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = "0.0_f32"
  D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = 1_u32
  D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D11_PS_OUTPUT_DEPTH_REGISTER_COUNT = 1_u32
  D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENTS = 1_u32
  D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D11_PS_OUTPUT_MASK_REGISTER_COUNT = 1_u32
  D3D11_PS_OUTPUT_REGISTER_COMPONENTS = 4_u32
  D3D11_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D11_PS_OUTPUT_REGISTER_COUNT = 8_u32
  D3D11_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = "0.5_f32"
  D3D11_RAW_UAV_SRV_BYTE_ALIGNMENT = 16_u32
  D3D11_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = 4096_u32
  D3D11_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = 27_u32
  D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = 4096_u32
  D3D11_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = 4096_u32
  D3D11_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 32_u32
  D3D11_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = 32_u32
  D3D11_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = 16384_u32
  D3D11_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = 1024_u32
  D3D11_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = 4096_u32
  D3D11_REQ_MAXANISOTROPY = 16_u32
  D3D11_REQ_MIP_LEVELS = 15_u32
  D3D11_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = 2048_u32
  D3D11_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = 4096_u32
  D3D11_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = 16384_u32
  D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = 128_u32
  D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM = "0.25_f32"
  D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM = 2048_u32
  D3D11_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = 20_u32
  D3D11_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = 4096_u32
  D3D11_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = 2048_u32
  D3D11_REQ_TEXTURE1D_U_DIMENSION = 16384_u32
  D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = 2048_u32
  D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION = 16384_u32
  D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 2048_u32
  D3D11_REQ_TEXTURECUBE_DIMENSION = 16384_u32
  D3D11_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0_u32
  D3D11_SHADER_MAJOR_VERSION = 5_u32
  D3D11_SHADER_MAX_INSTANCES = 65535_u32
  D3D11_SHADER_MAX_INTERFACES = 253_u32
  D3D11_SHADER_MAX_INTERFACE_CALL_SITES = 4096_u32
  D3D11_SHADER_MAX_TYPES = 65535_u32
  D3D11_SHADER_MINOR_VERSION = 0_u32
  D3D11_SHIFT_INSTRUCTION_PAD_VALUE = 0_u32
  D3D11_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = 5_u32
  D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT = 8_u32
  D3D11_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048_u32
  D3D11_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 512_u32
  D3D11_SO_BUFFER_SLOT_COUNT = 4_u32
  D3D11_SO_DDI_REGISTER_INDEX_DENOTING_GAP = 4294967295_u32
  D3D11_SO_NO_RASTERIZED_STREAM = 4294967295_u32
  D3D11_SO_OUTPUT_COMPONENT_COUNT = 128_u32
  D3D11_SO_STREAM_COUNT = 4_u32
  D3D11_SPEC_DATE_DAY = 16_u32
  D3D11_SPEC_DATE_MONTH = 5_u32
  D3D11_SPEC_DATE_YEAR = 2011_u32
  D3D11_SPEC_VERSION = "1.07_f64"
  D3D11_SRGB_GAMMA = "2.2_f32"
  D3D11_SRGB_TO_FLOAT_DENOMINATOR_1 = "12.92_f32"
  D3D11_SRGB_TO_FLOAT_DENOMINATOR_2 = "1.055_f32"
  D3D11_SRGB_TO_FLOAT_EXPONENT = "2.4_f32"
  D3D11_SRGB_TO_FLOAT_OFFSET = "0.055_f32"
  D3D11_SRGB_TO_FLOAT_THRESHOLD = "0.04045_f32"
  D3D11_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = "0.5_f32"
  D3D11_STANDARD_COMPONENT_BIT_COUNT = 32_u32
  D3D11_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = 64_u32
  D3D11_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4_u32
  D3D11_STANDARD_PIXEL_COMPONENT_COUNT = 128_u32
  D3D11_STANDARD_PIXEL_ELEMENT_COUNT = 32_u32
  D3D11_STANDARD_VECTOR_SIZE = 4_u32
  D3D11_STANDARD_VERTEX_ELEMENT_COUNT = 32_u32
  D3D11_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = 64_u32
  D3D11_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8_u32
  D3D11_SUBTEXEL_FRACTIONAL_BIT_COUNT = 8_u32
  D3D11_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR = 64_u32
  D3D11_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR = 64_u32
  D3D11_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR = 63_u32
  D3D11_TESSELLATOR_MAX_TESSELLATION_FACTOR = 64_u32
  D3D11_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR = 2_u32
  D3D11_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR = 1_u32
  D3D11_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = 1_u32
  D3D11_TEXEL_ADDRESS_RANGE_BIT_COUNT = 16_u32
  D3D11_UNBOUND_MEMORY_ACCESS_RESULT = 0_u32
  D3D11_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = 15_u32
  D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16_u32
  D3D11_VIEWPORT_BOUNDS_MAX = 32767_u32
  D3D11_VIEWPORT_BOUNDS_MIN = -32768_i32
  D3D11_VS_INPUT_REGISTER_COMPONENTS = 4_u32
  D3D11_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D11_VS_INPUT_REGISTER_COUNT = 32_u32
  D3D11_VS_INPUT_REGISTER_READS_PER_INST = 2_u32
  D3D11_VS_INPUT_REGISTER_READ_PORTS = 1_u32
  D3D11_VS_OUTPUT_REGISTER_COMPONENTS = 4_u32
  D3D11_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D11_VS_OUTPUT_REGISTER_COUNT = 32_u32
  D3D11_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = 10_u32
  D3D11_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 25_u32
  D3D11_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = 25_u32
  D3D11_1_UAV_SLOT_COUNT = 64_u32
  D3D11_2_TILED_RESOURCE_TILE_SIZE_IN_BYTES = 65536_u32
  D3D11_4_VIDEO_DECODER_MAX_HISTOGRAM_COMPONENTS = 4_u32
  D3D11_4_VIDEO_DECODER_HISTOGRAM_OFFSET_ALIGNMENT = 256_u32
  FACD3D11 = 2172_u32
  D3D11_APPEND_ALIGNED_ELEMENT = 4294967295_u32
  D3D11_FILTER_REDUCTION_TYPE_MASK = 3_u32
  D3D11_FILTER_REDUCTION_TYPE_SHIFT = 7_u32
  D3D11_FILTER_TYPE_MASK = 3_u32
  D3D11_MIN_FILTER_SHIFT = 4_u32
  D3D11_MAG_FILTER_SHIFT = 2_u32
  D3D11_MIP_FILTER_SHIFT = 0_u32
  D3D11_COMPARISON_FILTERING_BIT = 128_u32
  D3D11_ANISOTROPIC_FILTERING_BIT = 64_u32
  D3D11_DECODER_PROFILE_MPEG2_MOCOMP = "e6a9f44b-61b0-4563-9ea4-63d2a3c6fe66"
  D3D11_DECODER_PROFILE_MPEG2_IDCT = "bf22ad00-03ea-4690-8077-473346209b7e"
  D3D11_DECODER_PROFILE_MPEG2_VLD = "ee27417f-5e28-4e65-beea-1d26b508adc9"
  D3D11_DECODER_PROFILE_MPEG1_VLD = "6f3ec719-3735-42cc-8063-65cc3cb36616"
  D3D11_DECODER_PROFILE_MPEG2and1_VLD = "86695f12-340e-4f04-9fd3-9253dd327460"
  D3D11_DECODER_PROFILE_H264_MOCOMP_NOFGT = "1b81be64-a0c7-11d3-b984-00c04f2e73c5"
  D3D11_DECODER_PROFILE_H264_MOCOMP_FGT = "1b81be65-a0c7-11d3-b984-00c04f2e73c5"
  D3D11_DECODER_PROFILE_H264_IDCT_NOFGT = "1b81be66-a0c7-11d3-b984-00c04f2e73c5"
  D3D11_DECODER_PROFILE_H264_IDCT_FGT = "1b81be67-a0c7-11d3-b984-00c04f2e73c5"
  D3D11_DECODER_PROFILE_H264_VLD_NOFGT = "1b81be68-a0c7-11d3-b984-00c04f2e73c5"
  D3D11_DECODER_PROFILE_H264_VLD_FGT = "1b81be69-a0c7-11d3-b984-00c04f2e73c5"
  D3D11_DECODER_PROFILE_H264_VLD_WITHFMOASO_NOFGT = "d5f04ff9-3418-45d8-9561-32a76aae2ddd"
  D3D11_DECODER_PROFILE_H264_VLD_STEREO_PROGRESSIVE_NOFGT = "d79be8da-0cf1-4c81-b82a-69a4e236f43d"
  D3D11_DECODER_PROFILE_H264_VLD_STEREO_NOFGT = "f9aaccbb-c2b6-4cfc-8779-5707b1760552"
  D3D11_DECODER_PROFILE_H264_VLD_MULTIVIEW_NOFGT = "705b9d82-76cf-49d6-b7e6-ac8872db013c"
  D3D11_DECODER_PROFILE_WMV8_POSTPROC = "1b81be80-a0c7-11d3-b984-00c04f2e73c5"
  D3D11_DECODER_PROFILE_WMV8_MOCOMP = "1b81be81-a0c7-11d3-b984-00c04f2e73c5"
  D3D11_DECODER_PROFILE_WMV9_POSTPROC = "1b81be90-a0c7-11d3-b984-00c04f2e73c5"
  D3D11_DECODER_PROFILE_WMV9_MOCOMP = "1b81be91-a0c7-11d3-b984-00c04f2e73c5"
  D3D11_DECODER_PROFILE_WMV9_IDCT = "1b81be94-a0c7-11d3-b984-00c04f2e73c5"
  D3D11_DECODER_PROFILE_VC1_POSTPROC = "1b81bea0-a0c7-11d3-b984-00c04f2e73c5"
  D3D11_DECODER_PROFILE_VC1_MOCOMP = "1b81bea1-a0c7-11d3-b984-00c04f2e73c5"
  D3D11_DECODER_PROFILE_VC1_IDCT = "1b81bea2-a0c7-11d3-b984-00c04f2e73c5"
  D3D11_DECODER_PROFILE_VC1_VLD = "1b81bea3-a0c7-11d3-b984-00c04f2e73c5"
  D3D11_DECODER_PROFILE_VC1_D2010 = "1b81bea4-a0c7-11d3-b984-00c04f2e73c5"
  D3D11_DECODER_PROFILE_MPEG4PT2_VLD_SIMPLE = "efd64d74-c9e8-41d7-a5e9-e9b0e39fa319"
  D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_NOGMC = "ed418a9f-010d-4eda-9ae3-9a65358d8d2e"
  D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_GMC = "ab998b5b-4258-44a9-9feb-94e597a6baae"
  D3D11_DECODER_PROFILE_HEVC_VLD_MAIN = "5b11d51b-2f4c-4452-bcc3-09f2a1160cc0"
  D3D11_DECODER_PROFILE_HEVC_VLD_MAIN10 = "107af0e0-ef1a-4d19-aba8-67a163073d13"
  D3D11_DECODER_PROFILE_VP9_VLD_PROFILE0 = "463707f8-a1d0-4585-876d-83aa6d60b89e"
  D3D11_DECODER_PROFILE_VP9_VLD_10BIT_PROFILE2 = "a4c749ef-6ecf-48aa-8448-50a7a1165ff7"
  D3D11_DECODER_PROFILE_VP8_VLD = "90b899ea-3a62-4705-88b3-8df04b2744e7"
  D3D11_DECODER_PROFILE_AV1_VLD_PROFILE0 = "b8be4ccb-cf53-46ba-8d59-d6b8a6da5d2a"
  D3D11_DECODER_PROFILE_AV1_VLD_PROFILE1 = "6936ff0f-45b1-4163-9cc1-646ef6946108"
  D3D11_DECODER_PROFILE_AV1_VLD_PROFILE2 = "0c5f2aa1-e541-4089-bb7b-98110a19d7c8"
  D3D11_DECODER_PROFILE_AV1_VLD_12BIT_PROFILE2 = "17127009-a00f-4ce1-994e-bf4081f6f3f0"
  D3D11_DECODER_PROFILE_AV1_VLD_12BIT_PROFILE2_420 = "2d80bed6-9cac-4835-9e91-327bbc4f9ee8"
  D3D11_CRYPTO_TYPE_AES128_CTR = "9b6bd711-4f74-41c9-9e7b-0be2d7d93b4f"
  D3D11_DECODER_ENCRYPTION_HW_CENC = "89d6ac4f-09f2-4229-b2cd-37740a6dfd81"
  D3D11_DECODER_BITSTREAM_ENCRYPTION_TYPE_CENC = "b0405235-c13d-44f2-9ae5-dd48e08e5b67"
  D3D11_DECODER_BITSTREAM_ENCRYPTION_TYPE_CBCS = "422d9319-9d21-4bb7-9371-faf5a82c3e04"
  D3D11_KEY_EXCHANGE_HW_PROTECTION = "b1170d8a-628d-4da3-ad3b-82ddb08b4970"
  D3D11_AUTHENTICATED_QUERY_PROTECTION = "a84eb584-c495-48aa-b94d-8bd2d6fbce05"
  D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE = "bc1b18a5-b1fb-42ab-bd94-b5828b4bf7be"
  D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE = "ec1c539d-8cff-4e2a-bcc4-f5692f99f480"
  D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION = "2634499e-d018-4d74-ac17-7f724059528d"
  D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT = "0db207b3-9450-46a6-82de-1b96d44f9cf2"
  D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS = "649bbadb-f0f4-4639-a15b-24393fc3abac"
  D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT = "012f0bd6-e662-4474-befd-aa53e5143c6d"
  D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT = "2c042b5e-8c07-46d5-aabe-8f75cbad4c31"
  D3D11_AUTHENTICATED_QUERY_OUTPUT_ID = "839ddca3-9b4e-41e4-b053-892bd2a11ee7"
  D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ATTRIBUTES = "6214d9d2-432c-4abb-9fce-216eea269e3b"
  D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID_COUNT = "b30f7066-203c-4b07-93fc-ceaafd61241e"
  D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID = "f83a5958-e986-4bda-beb0-411f6a7a01b7"
  D3D11_AUTHENTICATED_QUERY_CURRENT_ENCRYPTION_WHEN_ACCESSIBLE = "ec1791c7-dad3-4f15-9ec3-faa93d60d4f0"
  D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE = "06114bdb-3523-470a-8dca-fbc2845154f0"
  D3D11_AUTHENTICATED_CONFIGURE_PROTECTION = "50455658-3f47-4362-bf99-bfdfcde9ed29"
  D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION = "6346cc54-2cfc-4ad4-8224-d15837de7700"
  D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE = "0772d047-1b40-48e8-9ca6-b5f510de9f01"
  D3D11_AUTHENTICATED_CONFIGURE_ENCRYPTION_WHEN_ACCESSIBLE = "41fff286-6ae0-4d43-9d55-a46e9efd158a"
  D3D11_KEY_EXCHANGE_RSAES_OAEP = "c1949895-d72a-4a1d-8e5d-ed857d171520"
  D3D11_SDK_VERSION = 7_u32
  D3D11_PACKED_TILE = 4294967295_u32
  D3D11_SDK_LAYERS_VERSION = 1_u32
  D3D11_DEBUG_FEATURE_FLUSH_PER_RENDER_OP = 1_u32
  D3D11_DEBUG_FEATURE_FINISH_PER_RENDER_OP = 2_u32
  D3D11_DEBUG_FEATURE_PRESENT_PER_RENDER_OP = 4_u32
  D3D11_DEBUG_FEATURE_ALWAYS_DISCARD_OFFERED_RESOURCE = 8_u32
  D3D11_DEBUG_FEATURE_NEVER_DISCARD_OFFERED_RESOURCE = 16_u32
  D3D11_DEBUG_FEATURE_AVOID_BEHAVIOR_CHANGING_DEBUG_AIDS = 64_u32
  D3D11_DEBUG_FEATURE_DISABLE_TILED_RESOURCE_MAPPING_TRACKING_AND_VALIDATION = 128_u32
  DXGI_DEBUG_D3D11 = "4b99317b-ac39-4aa6-bb0b-baa04784798f"
  D3D11_INFO_QUEUE_DEFAULT_MESSAGE_COUNT_LIMIT = 1024_u32
  D3D_RETURN_PARAMETER_INDEX = -1_i32
  D3D_SHADER_REQUIRES_DOUBLES = 1_u32
  D3D_SHADER_REQUIRES_EARLY_DEPTH_STENCIL = 2_u32
  D3D_SHADER_REQUIRES_UAVS_AT_EVERY_STAGE = 4_u32
  D3D_SHADER_REQUIRES_64_UAVS = 8_u32
  D3D_SHADER_REQUIRES_MINIMUM_PRECISION = 16_u32
  D3D_SHADER_REQUIRES_11_1_DOUBLE_EXTENSIONS = 32_u32
  D3D_SHADER_REQUIRES_11_1_SHADER_EXTENSIONS = 64_u32
  D3D_SHADER_REQUIRES_LEVEL_9_COMPARISON_FILTERING = 128_u32
  D3D_SHADER_REQUIRES_TILED_RESOURCES = 256_u32
  D3D11_TRACE_COMPONENT_X = 1_u32
  D3D11_TRACE_COMPONENT_Y = 2_u32
  D3D11_TRACE_COMPONENT_Z = 4_u32
  D3D11_TRACE_COMPONENT_W = 8_u32
  D3D11_SHADER_TRACE_FLAG_RECORD_REGISTER_WRITES = 1_u32
  D3D11_SHADER_TRACE_FLAG_RECORD_REGISTER_READS = 2_u32
  D3D11_TRACE_REGISTER_FLAGS_RELATIVE_INDEXING = 1_u32
  D3D11_TRACE_MISC_GS_EMIT = 1_u32
  D3D11_TRACE_MISC_GS_CUT = 2_u32
  D3D11_TRACE_MISC_PS_DISCARD = 4_u32
  D3D11_TRACE_MISC_GS_EMIT_STREAM = 8_u32
  D3D11_TRACE_MISC_GS_CUT_STREAM = 16_u32
  D3D11_TRACE_MISC_HALT = 32_u32
  D3D11_TRACE_MISC_MESSAGE = 64_u32
  D3DX11_FFT_MAX_PRECOMPUTE_BUFFERS = 4_u32
  D3DX11_FFT_MAX_TEMP_BUFFERS = 4_u32
  D3DX11_FFT_MAX_DIMENSIONS = 32_u32

  type CD3D11_VIDEO_DEFAULT = Void

  alias PFN_D3D11_CREATE_DEVICE = Proc(IDXGIAdapter, D3D_DRIVER_TYPE, HINSTANCE, UInt32, D3D_FEATURE_LEVEL*, UInt32, UInt32, ID3D11Device*, D3D_FEATURE_LEVEL*, ID3D11DeviceContext*, HRESULT)
  alias PFN_D3D11_CREATE_DEVICE_AND_SWAP_CHAIN = Proc(IDXGIAdapter, D3D_DRIVER_TYPE, HINSTANCE, UInt32, D3D_FEATURE_LEVEL*, UInt32, UInt32, DXGI_SWAP_CHAIN_DESC*, IDXGISwapChain*, ID3D11Device*, D3D_FEATURE_LEVEL*, ID3D11DeviceContext*, HRESULT)


  enum D3D11_INPUT_CLASSIFICATION : Int32
    D3D11_INPUT_PER_VERTEX_DATA = 0
    D3D11_INPUT_PER_INSTANCE_DATA = 1
  end

  enum D3D11_FILL_MODE : Int32
    D3D11_FILL_WIREFRAME = 2
    D3D11_FILL_SOLID = 3
  end

  enum D3D11_CULL_MODE : Int32
    D3D11_CULL_NONE = 1
    D3D11_CULL_FRONT = 2
    D3D11_CULL_BACK = 3
  end

  enum D3D11_RESOURCE_DIMENSION : Int32
    D3D11_RESOURCE_DIMENSION_UNKNOWN = 0
    D3D11_RESOURCE_DIMENSION_BUFFER = 1
    D3D11_RESOURCE_DIMENSION_TEXTURE1D = 2
    D3D11_RESOURCE_DIMENSION_TEXTURE2D = 3
    D3D11_RESOURCE_DIMENSION_TEXTURE3D = 4
  end

  enum D3D11_DSV_DIMENSION : Int32
    D3D11_DSV_DIMENSION_UNKNOWN = 0
    D3D11_DSV_DIMENSION_TEXTURE1D = 1
    D3D11_DSV_DIMENSION_TEXTURE1DARRAY = 2
    D3D11_DSV_DIMENSION_TEXTURE2D = 3
    D3D11_DSV_DIMENSION_TEXTURE2DARRAY = 4
    D3D11_DSV_DIMENSION_TEXTURE2DMS = 5
    D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY = 6
  end

  enum D3D11_RTV_DIMENSION : Int32
    D3D11_RTV_DIMENSION_UNKNOWN = 0
    D3D11_RTV_DIMENSION_BUFFER = 1
    D3D11_RTV_DIMENSION_TEXTURE1D = 2
    D3D11_RTV_DIMENSION_TEXTURE1DARRAY = 3
    D3D11_RTV_DIMENSION_TEXTURE2D = 4
    D3D11_RTV_DIMENSION_TEXTURE2DARRAY = 5
    D3D11_RTV_DIMENSION_TEXTURE2DMS = 6
    D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY = 7
    D3D11_RTV_DIMENSION_TEXTURE3D = 8
  end

  enum D3D11_UAV_DIMENSION : Int32
    D3D11_UAV_DIMENSION_UNKNOWN = 0
    D3D11_UAV_DIMENSION_BUFFER = 1
    D3D11_UAV_DIMENSION_TEXTURE1D = 2
    D3D11_UAV_DIMENSION_TEXTURE1DARRAY = 3
    D3D11_UAV_DIMENSION_TEXTURE2D = 4
    D3D11_UAV_DIMENSION_TEXTURE2DARRAY = 5
    D3D11_UAV_DIMENSION_TEXTURE3D = 8
  end

  enum D3D11_USAGE : Int32
    D3D11_USAGE_DEFAULT = 0
    D3D11_USAGE_IMMUTABLE = 1
    D3D11_USAGE_DYNAMIC = 2
    D3D11_USAGE_STAGING = 3
  end

  enum D3D11_BIND_FLAG : UInt32
    D3D11_BIND_VERTEX_BUFFER = 1
    D3D11_BIND_INDEX_BUFFER = 2
    D3D11_BIND_CONSTANT_BUFFER = 4
    D3D11_BIND_SHADER_RESOURCE = 8
    D3D11_BIND_STREAM_OUTPUT = 16
    D3D11_BIND_RENDER_TARGET = 32
    D3D11_BIND_DEPTH_STENCIL = 64
    D3D11_BIND_UNORDERED_ACCESS = 128
    D3D11_BIND_DECODER = 512
    D3D11_BIND_VIDEO_ENCODER = 1024
  end

  enum D3D11_CPU_ACCESS_FLAG : UInt32
    D3D11_CPU_ACCESS_WRITE = 65536
    D3D11_CPU_ACCESS_READ = 131072
  end

  enum D3D11_RESOURCE_MISC_FLAG : UInt32
    D3D11_RESOURCE_MISC_GENERATE_MIPS = 1
    D3D11_RESOURCE_MISC_SHARED = 2
    D3D11_RESOURCE_MISC_TEXTURECUBE = 4
    D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS = 16
    D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS = 32
    D3D11_RESOURCE_MISC_BUFFER_STRUCTURED = 64
    D3D11_RESOURCE_MISC_RESOURCE_CLAMP = 128
    D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX = 256
    D3D11_RESOURCE_MISC_GDI_COMPATIBLE = 512
    D3D11_RESOURCE_MISC_SHARED_NTHANDLE = 2048
    D3D11_RESOURCE_MISC_RESTRICTED_CONTENT = 4096
    D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE = 8192
    D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER = 16384
    D3D11_RESOURCE_MISC_GUARDED = 32768
    D3D11_RESOURCE_MISC_TILE_POOL = 131072
    D3D11_RESOURCE_MISC_TILED = 262144
    D3D11_RESOURCE_MISC_HW_PROTECTED = 524288
    D3D11_RESOURCE_MISC_SHARED_DISPLAYABLE = 1048576
    D3D11_RESOURCE_MISC_SHARED_EXCLUSIVE_WRITER = 2097152
  end

  enum D3D11_MAP : Int32
    D3D11_MAP_READ = 1
    D3D11_MAP_WRITE = 2
    D3D11_MAP_READ_WRITE = 3
    D3D11_MAP_WRITE_DISCARD = 4
    D3D11_MAP_WRITE_NO_OVERWRITE = 5
  end

  enum D3D11_MAP_FLAG : Int32
    D3D11_MAP_FLAG_DO_NOT_WAIT = 1048576
  end

  enum D3D11_RAISE_FLAG : Int32
    D3D11_RAISE_FLAG_DRIVER_INTERNAL_ERROR = 1
  end

  enum D3D11_CLEAR_FLAG : Int32
    D3D11_CLEAR_DEPTH = 1
    D3D11_CLEAR_STENCIL = 2
  end

  enum D3D11_COMPARISON_FUNC : Int32
    D3D11_COMPARISON_NEVER = 1
    D3D11_COMPARISON_LESS = 2
    D3D11_COMPARISON_EQUAL = 3
    D3D11_COMPARISON_LESS_EQUAL = 4
    D3D11_COMPARISON_GREATER = 5
    D3D11_COMPARISON_NOT_EQUAL = 6
    D3D11_COMPARISON_GREATER_EQUAL = 7
    D3D11_COMPARISON_ALWAYS = 8
  end

  enum D3D11_DEPTH_WRITE_MASK : Int32
    D3D11_DEPTH_WRITE_MASK_ZERO = 0
    D3D11_DEPTH_WRITE_MASK_ALL = 1
  end

  enum D3D11_STENCIL_OP : Int32
    D3D11_STENCIL_OP_KEEP = 1
    D3D11_STENCIL_OP_ZERO = 2
    D3D11_STENCIL_OP_REPLACE = 3
    D3D11_STENCIL_OP_INCR_SAT = 4
    D3D11_STENCIL_OP_DECR_SAT = 5
    D3D11_STENCIL_OP_INVERT = 6
    D3D11_STENCIL_OP_INCR = 7
    D3D11_STENCIL_OP_DECR = 8
  end

  enum D3D11_BLEND : Int32
    D3D11_BLEND_ZERO = 1
    D3D11_BLEND_ONE = 2
    D3D11_BLEND_SRC_COLOR = 3
    D3D11_BLEND_INV_SRC_COLOR = 4
    D3D11_BLEND_SRC_ALPHA = 5
    D3D11_BLEND_INV_SRC_ALPHA = 6
    D3D11_BLEND_DEST_ALPHA = 7
    D3D11_BLEND_INV_DEST_ALPHA = 8
    D3D11_BLEND_DEST_COLOR = 9
    D3D11_BLEND_INV_DEST_COLOR = 10
    D3D11_BLEND_SRC_ALPHA_SAT = 11
    D3D11_BLEND_BLEND_FACTOR = 14
    D3D11_BLEND_INV_BLEND_FACTOR = 15
    D3D11_BLEND_SRC1_COLOR = 16
    D3D11_BLEND_INV_SRC1_COLOR = 17
    D3D11_BLEND_SRC1_ALPHA = 18
    D3D11_BLEND_INV_SRC1_ALPHA = 19
  end

  enum D3D11_BLEND_OP : Int32
    D3D11_BLEND_OP_ADD = 1
    D3D11_BLEND_OP_SUBTRACT = 2
    D3D11_BLEND_OP_REV_SUBTRACT = 3
    D3D11_BLEND_OP_MIN = 4
    D3D11_BLEND_OP_MAX = 5
  end

  enum D3D11_COLOR_WRITE_ENABLE : Int32
    D3D11_COLOR_WRITE_ENABLE_RED = 1
    D3D11_COLOR_WRITE_ENABLE_GREEN = 2
    D3D11_COLOR_WRITE_ENABLE_BLUE = 4
    D3D11_COLOR_WRITE_ENABLE_ALPHA = 8
    D3D11_COLOR_WRITE_ENABLE_ALL = 15
  end

  enum D3D11_TEXTURECUBE_FACE : Int32
    D3D11_TEXTURECUBE_FACE_POSITIVE_X = 0
    D3D11_TEXTURECUBE_FACE_NEGATIVE_X = 1
    D3D11_TEXTURECUBE_FACE_POSITIVE_Y = 2
    D3D11_TEXTURECUBE_FACE_NEGATIVE_Y = 3
    D3D11_TEXTURECUBE_FACE_POSITIVE_Z = 4
    D3D11_TEXTURECUBE_FACE_NEGATIVE_Z = 5
  end

  enum D3D11_BUFFEREX_SRV_FLAG : Int32
    D3D11_BUFFEREX_SRV_FLAG_RAW = 1
  end

  enum D3D11_DSV_FLAG : Int32
    D3D11_DSV_READ_ONLY_DEPTH = 1
    D3D11_DSV_READ_ONLY_STENCIL = 2
  end

  enum D3D11_BUFFER_UAV_FLAG : Int32
    D3D11_BUFFER_UAV_FLAG_RAW = 1
    D3D11_BUFFER_UAV_FLAG_APPEND = 2
    D3D11_BUFFER_UAV_FLAG_COUNTER = 4
  end

  enum D3D11_FILTER : Int32
    D3D11_FILTER_MIN_MAG_MIP_POINT = 0
    D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR = 1
    D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 4
    D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR = 5
    D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT = 16
    D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 17
    D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT = 20
    D3D11_FILTER_MIN_MAG_MIP_LINEAR = 21
    D3D11_FILTER_ANISOTROPIC = 85
    D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 128
    D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 129
    D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 132
    D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 133
    D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 144
    D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 145
    D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 148
    D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 149
    D3D11_FILTER_COMPARISON_ANISOTROPIC = 213
    D3D11_FILTER_MINIMUM_MIN_MAG_MIP_POINT = 256
    D3D11_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 257
    D3D11_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 260
    D3D11_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 261
    D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 272
    D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 273
    D3D11_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 276
    D3D11_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 277
    D3D11_FILTER_MINIMUM_ANISOTROPIC = 341
    D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 384
    D3D11_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 385
    D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 388
    D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 389
    D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 400
    D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 401
    D3D11_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 404
    D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 405
    D3D11_FILTER_MAXIMUM_ANISOTROPIC = 469
  end

  enum D3D11_FILTER_TYPE : Int32
    D3D11_FILTER_TYPE_POINT = 0
    D3D11_FILTER_TYPE_LINEAR = 1
  end

  enum D3D11_FILTER_REDUCTION_TYPE : Int32
    D3D11_FILTER_REDUCTION_TYPE_STANDARD = 0
    D3D11_FILTER_REDUCTION_TYPE_COMPARISON = 1
    D3D11_FILTER_REDUCTION_TYPE_MINIMUM = 2
    D3D11_FILTER_REDUCTION_TYPE_MAXIMUM = 3
  end

  enum D3D11_TEXTURE_ADDRESS_MODE : Int32
    D3D11_TEXTURE_ADDRESS_WRAP = 1
    D3D11_TEXTURE_ADDRESS_MIRROR = 2
    D3D11_TEXTURE_ADDRESS_CLAMP = 3
    D3D11_TEXTURE_ADDRESS_BORDER = 4
    D3D11_TEXTURE_ADDRESS_MIRROR_ONCE = 5
  end

  enum D3D11_FORMAT_SUPPORT : Int32
    D3D11_FORMAT_SUPPORT_BUFFER = 1
    D3D11_FORMAT_SUPPORT_IA_VERTEX_BUFFER = 2
    D3D11_FORMAT_SUPPORT_IA_INDEX_BUFFER = 4
    D3D11_FORMAT_SUPPORT_SO_BUFFER = 8
    D3D11_FORMAT_SUPPORT_TEXTURE1D = 16
    D3D11_FORMAT_SUPPORT_TEXTURE2D = 32
    D3D11_FORMAT_SUPPORT_TEXTURE3D = 64
    D3D11_FORMAT_SUPPORT_TEXTURECUBE = 128
    D3D11_FORMAT_SUPPORT_SHADER_LOAD = 256
    D3D11_FORMAT_SUPPORT_SHADER_SAMPLE = 512
    D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON = 1024
    D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT = 2048
    D3D11_FORMAT_SUPPORT_MIP = 4096
    D3D11_FORMAT_SUPPORT_MIP_AUTOGEN = 8192
    D3D11_FORMAT_SUPPORT_RENDER_TARGET = 16384
    D3D11_FORMAT_SUPPORT_BLENDABLE = 32768
    D3D11_FORMAT_SUPPORT_DEPTH_STENCIL = 65536
    D3D11_FORMAT_SUPPORT_CPU_LOCKABLE = 131072
    D3D11_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE = 262144
    D3D11_FORMAT_SUPPORT_DISPLAY = 524288
    D3D11_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT = 1048576
    D3D11_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET = 2097152
    D3D11_FORMAT_SUPPORT_MULTISAMPLE_LOAD = 4194304
    D3D11_FORMAT_SUPPORT_SHADER_GATHER = 8388608
    D3D11_FORMAT_SUPPORT_BACK_BUFFER_CAST = 16777216
    D3D11_FORMAT_SUPPORT_TYPED_UNORDERED_ACCESS_VIEW = 33554432
    D3D11_FORMAT_SUPPORT_SHADER_GATHER_COMPARISON = 67108864
    D3D11_FORMAT_SUPPORT_DECODER_OUTPUT = 134217728
    D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_OUTPUT = 268435456
    D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_INPUT = 536870912
    D3D11_FORMAT_SUPPORT_VIDEO_ENCODER = 1073741824
  end

  enum D3D11_FORMAT_SUPPORT2 : Int32
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_ADD = 1
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS = 2
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 4
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE = 8
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX = 16
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 32
    D3D11_FORMAT_SUPPORT2_UAV_TYPED_LOAD = 64
    D3D11_FORMAT_SUPPORT2_UAV_TYPED_STORE = 128
    D3D11_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP = 256
    D3D11_FORMAT_SUPPORT2_TILED = 512
    D3D11_FORMAT_SUPPORT2_SHAREABLE = 1024
    D3D11_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY = 16384
  end

  enum D3D11_ASYNC_GETDATA_FLAG : Int32
    D3D11_ASYNC_GETDATA_DONOTFLUSH = 1
  end

  enum D3D11_QUERY : Int32
    D3D11_QUERY_EVENT = 0
    D3D11_QUERY_OCCLUSION = 1
    D3D11_QUERY_TIMESTAMP = 2
    D3D11_QUERY_TIMESTAMP_DISJOINT = 3
    D3D11_QUERY_PIPELINE_STATISTICS = 4
    D3D11_QUERY_OCCLUSION_PREDICATE = 5
    D3D11_QUERY_SO_STATISTICS = 6
    D3D11_QUERY_SO_OVERFLOW_PREDICATE = 7
    D3D11_QUERY_SO_STATISTICS_STREAM0 = 8
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 = 9
    D3D11_QUERY_SO_STATISTICS_STREAM1 = 10
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 = 11
    D3D11_QUERY_SO_STATISTICS_STREAM2 = 12
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 = 13
    D3D11_QUERY_SO_STATISTICS_STREAM3 = 14
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3 = 15
  end

  enum D3D11_QUERY_MISC_FLAG : Int32
    D3D11_QUERY_MISC_PREDICATEHINT = 1
  end

  enum D3D11_COUNTER : Int32
    D3D11_COUNTER_DEVICE_DEPENDENT_0 = 1073741824
  end

  enum D3D11_COUNTER_TYPE : Int32
    D3D11_COUNTER_TYPE_FLOAT32 = 0
    D3D11_COUNTER_TYPE_UINT16 = 1
    D3D11_COUNTER_TYPE_UINT32 = 2
    D3D11_COUNTER_TYPE_UINT64 = 3
  end

  enum D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS : Int32
    D3D11_STANDARD_MULTISAMPLE_PATTERN = -1
    D3D11_CENTER_MULTISAMPLE_PATTERN = -2
  end

  enum D3D11_DEVICE_CONTEXT_TYPE : Int32
    D3D11_DEVICE_CONTEXT_IMMEDIATE = 0
    D3D11_DEVICE_CONTEXT_DEFERRED = 1
  end

  enum D3D11_FEATURE : Int32
    D3D11_FEATURE_THREADING = 0
    D3D11_FEATURE_DOUBLES = 1
    D3D11_FEATURE_FORMAT_SUPPORT = 2
    D3D11_FEATURE_FORMAT_SUPPORT2 = 3
    D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS = 4
    D3D11_FEATURE_D3D11_OPTIONS = 5
    D3D11_FEATURE_ARCHITECTURE_INFO = 6
    D3D11_FEATURE_D3D9_OPTIONS = 7
    D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT = 8
    D3D11_FEATURE_D3D9_SHADOW_SUPPORT = 9
    D3D11_FEATURE_D3D11_OPTIONS1 = 10
    D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT = 11
    D3D11_FEATURE_MARKER_SUPPORT = 12
    D3D11_FEATURE_D3D9_OPTIONS1 = 13
    D3D11_FEATURE_D3D11_OPTIONS2 = 14
    D3D11_FEATURE_D3D11_OPTIONS3 = 15
    D3D11_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT = 16
    D3D11_FEATURE_D3D11_OPTIONS4 = 17
    D3D11_FEATURE_SHADER_CACHE = 18
    D3D11_FEATURE_D3D11_OPTIONS5 = 19
    D3D11_FEATURE_DISPLAYABLE = 20
  end

  enum D3D11_SHADER_MIN_PRECISION_SUPPORT : Int32
    D3D11_SHADER_MIN_PRECISION_10_BIT = 1
    D3D11_SHADER_MIN_PRECISION_16_BIT = 2
  end

  enum D3D11_TILED_RESOURCES_TIER : Int32
    D3D11_TILED_RESOURCES_NOT_SUPPORTED = 0
    D3D11_TILED_RESOURCES_TIER_1 = 1
    D3D11_TILED_RESOURCES_TIER_2 = 2
    D3D11_TILED_RESOURCES_TIER_3 = 3
  end

  enum D3D11_CONSERVATIVE_RASTERIZATION_TIER : Int32
    D3D11_CONSERVATIVE_RASTERIZATION_NOT_SUPPORTED = 0
    D3D11_CONSERVATIVE_RASTERIZATION_TIER_1 = 1
    D3D11_CONSERVATIVE_RASTERIZATION_TIER_2 = 2
    D3D11_CONSERVATIVE_RASTERIZATION_TIER_3 = 3
  end

  enum D3D11_SHADER_CACHE_SUPPORT_FLAGS : Int32
    D3D11_SHADER_CACHE_SUPPORT_NONE = 0
    D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE = 1
    D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE = 2
  end

  enum D3D11_SHARED_RESOURCE_TIER : Int32
    D3D11_SHARED_RESOURCE_TIER_0 = 0
    D3D11_SHARED_RESOURCE_TIER_1 = 1
    D3D11_SHARED_RESOURCE_TIER_2 = 2
    D3D11_SHARED_RESOURCE_TIER_3 = 3
  end

  enum D3D11_VIDEO_DECODER_BUFFER_TYPE : Int32
    D3D11_VIDEO_DECODER_BUFFER_PICTURE_PARAMETERS = 0
    D3D11_VIDEO_DECODER_BUFFER_MACROBLOCK_CONTROL = 1
    D3D11_VIDEO_DECODER_BUFFER_RESIDUAL_DIFFERENCE = 2
    D3D11_VIDEO_DECODER_BUFFER_DEBLOCKING_CONTROL = 3
    D3D11_VIDEO_DECODER_BUFFER_INVERSE_QUANTIZATION_MATRIX = 4
    D3D11_VIDEO_DECODER_BUFFER_SLICE_CONTROL = 5
    D3D11_VIDEO_DECODER_BUFFER_BITSTREAM = 6
    D3D11_VIDEO_DECODER_BUFFER_MOTION_VECTOR = 7
    D3D11_VIDEO_DECODER_BUFFER_FILM_GRAIN = 8
  end

  enum D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT : Int32
    D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_INPUT = 1
    D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_OUTPUT = 2
  end

  enum D3D11_VIDEO_PROCESSOR_DEVICE_CAPS : Int32
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_LINEAR_SPACE = 1
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_xvYCC = 2
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_RGB_RANGE_CONVERSION = 4
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION = 8
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_NOMINAL_RANGE = 16
  end

  enum D3D11_VIDEO_PROCESSOR_FEATURE_CAPS : Int32
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_FILL = 1
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_CONSTRICTION = 2
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LUMA_KEY = 4
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_PALETTE = 8
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LEGACY = 16
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_STEREO = 32
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ROTATION = 64
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_STREAM = 128
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_PIXEL_ASPECT_RATIO = 256
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_MIRROR = 512
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_SHADER_USAGE = 1024
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_METADATA_HDR10 = 2048
  end

  enum D3D11_VIDEO_PROCESSOR_FILTER_CAPS : Int32
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_BRIGHTNESS = 1
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_CONTRAST = 2
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_HUE = 4
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_SATURATION = 8
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_NOISE_REDUCTION = 16
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_EDGE_ENHANCEMENT = 32
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_ANAMORPHIC_SCALING = 64
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_STEREO_ADJUSTMENT = 128
  end

  enum D3D11_VIDEO_PROCESSOR_FORMAT_CAPS : Int32
    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_INTERLACED = 1
    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_PROCAMP = 2
    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_LUMA_KEY = 4
    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_PALETTE_INTERLACED = 8
  end

  enum D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS : Int32
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DENOISE = 1
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DERINGING = 2
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_EDGE_ENHANCEMENT = 4
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_COLOR_CORRECTION = 8
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_FLESH_TONE_MAPPING = 16
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_IMAGE_STABILIZATION = 32
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_SUPER_RESOLUTION = 64
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_ANAMORPHIC_SCALING = 128
  end

  enum D3D11_VIDEO_PROCESSOR_STEREO_CAPS : Int32
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_MONO_OFFSET = 1
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_ROW_INTERLEAVED = 2
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_COLUMN_INTERLEAVED = 4
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_CHECKERBOARD = 8
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_FLIP_MODE = 16
  end

  enum D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS : Int32
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BLEND = 1
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BOB = 2
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE = 4
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION = 8
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_INVERSE_TELECINE = 16
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_FRAME_RATE_CONVERSION = 32
  end

  enum D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS : Int32
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32 = 1
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_22 = 2
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2224 = 4
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2332 = 8
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32322 = 16
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_55 = 32
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_64 = 64
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_87 = 128
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_222222222223 = 256
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_OTHER = -2147483648
  end

  enum D3D11_CONTENT_PROTECTION_CAPS : Int32
    D3D11_CONTENT_PROTECTION_CAPS_SOFTWARE = 1
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE = 2
    D3D11_CONTENT_PROTECTION_CAPS_PROTECTION_ALWAYS_ON = 4
    D3D11_CONTENT_PROTECTION_CAPS_PARTIAL_DECRYPTION = 8
    D3D11_CONTENT_PROTECTION_CAPS_CONTENT_KEY = 16
    D3D11_CONTENT_PROTECTION_CAPS_FRESHEN_SESSION_KEY = 32
    D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK = 64
    D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK_KEY = 128
    D3D11_CONTENT_PROTECTION_CAPS_SEQUENTIAL_CTR_IV = 256
    D3D11_CONTENT_PROTECTION_CAPS_ENCRYPT_SLICEDATA_ONLY = 512
    D3D11_CONTENT_PROTECTION_CAPS_DECRYPTION_BLT = 1024
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECT_UNCOMPRESSED = 2048
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECTED_MEMORY_PAGEABLE = 4096
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_TEARDOWN = 8192
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION = 16384
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION_MULTI_THREADED = 32768
  end

  enum D3D11_VIDEO_PROCESSOR_FILTER : Int32
    D3D11_VIDEO_PROCESSOR_FILTER_BRIGHTNESS = 0
    D3D11_VIDEO_PROCESSOR_FILTER_CONTRAST = 1
    D3D11_VIDEO_PROCESSOR_FILTER_HUE = 2
    D3D11_VIDEO_PROCESSOR_FILTER_SATURATION = 3
    D3D11_VIDEO_PROCESSOR_FILTER_NOISE_REDUCTION = 4
    D3D11_VIDEO_PROCESSOR_FILTER_EDGE_ENHANCEMENT = 5
    D3D11_VIDEO_PROCESSOR_FILTER_ANAMORPHIC_SCALING = 6
    D3D11_VIDEO_PROCESSOR_FILTER_STEREO_ADJUSTMENT = 7
  end

  enum D3D11_VIDEO_FRAME_FORMAT : Int32
    D3D11_VIDEO_FRAME_FORMAT_PROGRESSIVE = 0
    D3D11_VIDEO_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST = 1
    D3D11_VIDEO_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST = 2
  end

  enum D3D11_VIDEO_USAGE : Int32
    D3D11_VIDEO_USAGE_PLAYBACK_NORMAL = 0
    D3D11_VIDEO_USAGE_OPTIMAL_SPEED = 1
    D3D11_VIDEO_USAGE_OPTIMAL_QUALITY = 2
  end

  enum D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE : Int32
    D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_UNDEFINED = 0
    D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_16_235 = 1
    D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_0_255 = 2
  end

  enum D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE : Int32
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_OPAQUE = 0
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_BACKGROUND = 1
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_DESTINATION = 2
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_SOURCE_STREAM = 3
  end

  enum D3D11_VIDEO_PROCESSOR_OUTPUT_RATE : Int32
    D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_NORMAL = 0
    D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_HALF = 1
    D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_CUSTOM = 2
  end

  enum D3D11_VIDEO_PROCESSOR_STEREO_FORMAT : Int32
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO = 0
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_HORIZONTAL = 1
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_VERTICAL = 2
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_SEPARATE = 3
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO_OFFSET = 4
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_ROW_INTERLEAVED = 5
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_COLUMN_INTERLEAVED = 6
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_CHECKERBOARD = 7
  end

  enum D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE : Int32
    D3D11_VIDEO_PROCESSOR_STEREO_FLIP_NONE = 0
    D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME0 = 1
    D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME1 = 2
  end

  enum D3D11_VIDEO_PROCESSOR_ROTATION : Int32
    D3D11_VIDEO_PROCESSOR_ROTATION_IDENTITY = 0
    D3D11_VIDEO_PROCESSOR_ROTATION_90 = 1
    D3D11_VIDEO_PROCESSOR_ROTATION_180 = 2
    D3D11_VIDEO_PROCESSOR_ROTATION_270 = 3
  end

  enum D3D11_AUTHENTICATED_CHANNEL_TYPE : Int32
    D3D11_AUTHENTICATED_CHANNEL_D3D11 = 1
    D3D11_AUTHENTICATED_CHANNEL_DRIVER_SOFTWARE = 2
    D3D11_AUTHENTICATED_CHANNEL_DRIVER_HARDWARE = 3
  end

  enum D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE : Int32
    D3D11_PROCESSIDTYPE_UNKNOWN = 0
    D3D11_PROCESSIDTYPE_DWM = 1
    D3D11_PROCESSIDTYPE_HANDLE = 2
  end

  enum D3D11_BUS_TYPE : Int32
    D3D11_BUS_TYPE_OTHER = 0
    D3D11_BUS_TYPE_PCI = 1
    D3D11_BUS_TYPE_PCIX = 2
    D3D11_BUS_TYPE_PCIEXPRESS = 3
    D3D11_BUS_TYPE_AGP = 4
    D3D11_BUS_IMPL_MODIFIER_INSIDE_OF_CHIPSET = 65536
    D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = 131072
    D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = 196608
    D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR = 262144
    D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 327680
    D3D11_BUS_IMPL_MODIFIER_NON_STANDARD = -2147483648
  end

  enum D3D11_VDOV_DIMENSION : Int32
    D3D11_VDOV_DIMENSION_UNKNOWN = 0
    D3D11_VDOV_DIMENSION_TEXTURE2D = 1
  end

  enum D3D11_VPIV_DIMENSION : Int32
    D3D11_VPIV_DIMENSION_UNKNOWN = 0
    D3D11_VPIV_DIMENSION_TEXTURE2D = 1
  end

  enum D3D11_VPOV_DIMENSION : Int32
    D3D11_VPOV_DIMENSION_UNKNOWN = 0
    D3D11_VPOV_DIMENSION_TEXTURE2D = 1
    D3D11_VPOV_DIMENSION_TEXTURE2DARRAY = 2
  end

  enum D3D11_CREATE_DEVICE_FLAG : UInt32
    D3D11_CREATE_DEVICE_SINGLETHREADED = 1
    D3D11_CREATE_DEVICE_DEBUG = 2
    D3D11_CREATE_DEVICE_SWITCH_TO_REF = 4
    D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = 8
    D3D11_CREATE_DEVICE_BGRA_SUPPORT = 32
    D3D11_CREATE_DEVICE_DEBUGGABLE = 64
    D3D11_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = 128
    D3D11_CREATE_DEVICE_DISABLE_GPU_TIMEOUT = 256
    D3D11_CREATE_DEVICE_VIDEO_SUPPORT = 2048
  end

  enum D3D11_RLDO_FLAGS : Int32
    D3D11_RLDO_SUMMARY = 1
    D3D11_RLDO_DETAIL = 2
    D3D11_RLDO_IGNORE_INTERNAL = 4
  end

  enum D3D11_SHADER_TRACKING_RESOURCE_TYPE : Int32
    D3D11_SHADER_TRACKING_RESOURCE_TYPE_NONE = 0
    D3D11_SHADER_TRACKING_RESOURCE_TYPE_UAV_DEVICEMEMORY = 1
    D3D11_SHADER_TRACKING_RESOURCE_TYPE_NON_UAV_DEVICEMEMORY = 2
    D3D11_SHADER_TRACKING_RESOURCE_TYPE_ALL_DEVICEMEMORY = 3
    D3D11_SHADER_TRACKING_RESOURCE_TYPE_GROUPSHARED_MEMORY = 4
    D3D11_SHADER_TRACKING_RESOURCE_TYPE_ALL_SHARED_MEMORY = 5
    D3D11_SHADER_TRACKING_RESOURCE_TYPE_GROUPSHARED_NON_UAV = 6
    D3D11_SHADER_TRACKING_RESOURCE_TYPE_ALL = 7
  end

  enum D3D11_SHADER_TRACKING_OPTIONS : Int32
    D3D11_SHADER_TRACKING_OPTION_IGNORE = 0
    D3D11_SHADER_TRACKING_OPTION_TRACK_UNINITIALIZED = 1
    D3D11_SHADER_TRACKING_OPTION_TRACK_RAW = 2
    D3D11_SHADER_TRACKING_OPTION_TRACK_WAR = 4
    D3D11_SHADER_TRACKING_OPTION_TRACK_WAW = 8
    D3D11_SHADER_TRACKING_OPTION_ALLOW_SAME = 16
    D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY = 32
    D3D11_SHADER_TRACKING_OPTION_TRACK_RAW_ACROSS_THREADGROUPS = 64
    D3D11_SHADER_TRACKING_OPTION_TRACK_WAR_ACROSS_THREADGROUPS = 128
    D3D11_SHADER_TRACKING_OPTION_TRACK_WAW_ACROSS_THREADGROUPS = 256
    D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY_ACROSS_THREADGROUPS = 512
    D3D11_SHADER_TRACKING_OPTION_UAV_SPECIFIC_FLAGS = 960
    D3D11_SHADER_TRACKING_OPTION_ALL_HAZARDS = 1006
    D3D11_SHADER_TRACKING_OPTION_ALL_HAZARDS_ALLOWING_SAME = 1022
    D3D11_SHADER_TRACKING_OPTION_ALL_OPTIONS = 1023
  end

  enum D3D11_MESSAGE_CATEGORY : Int32
    D3D11_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0
    D3D11_MESSAGE_CATEGORY_MISCELLANEOUS = 1
    D3D11_MESSAGE_CATEGORY_INITIALIZATION = 2
    D3D11_MESSAGE_CATEGORY_CLEANUP = 3
    D3D11_MESSAGE_CATEGORY_COMPILATION = 4
    D3D11_MESSAGE_CATEGORY_STATE_CREATION = 5
    D3D11_MESSAGE_CATEGORY_STATE_SETTING = 6
    D3D11_MESSAGE_CATEGORY_STATE_GETTING = 7
    D3D11_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 8
    D3D11_MESSAGE_CATEGORY_EXECUTION = 9
    D3D11_MESSAGE_CATEGORY_SHADER = 10
  end

  enum D3D11_MESSAGE_SEVERITY : Int32
    D3D11_MESSAGE_SEVERITY_CORRUPTION = 0
    D3D11_MESSAGE_SEVERITY_ERROR = 1
    D3D11_MESSAGE_SEVERITY_WARNING = 2
    D3D11_MESSAGE_SEVERITY_INFO = 3
    D3D11_MESSAGE_SEVERITY_MESSAGE = 4
  end

  enum D3D11_MESSAGE_ID : Int32
    D3D11_MESSAGE_ID_UNKNOWN = 0
    D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD = 1
    D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD = 2
    D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD = 3
    D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD = 4
    D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD = 5
    D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD = 6
    D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD = 7
    D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD = 8
    D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD = 9
    D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD = 10
    D3D11_MESSAGE_ID_STRING_FROM_APPLICATION = 11
    D3D11_MESSAGE_ID_CORRUPTED_THIS = 12
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER1 = 13
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER2 = 14
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER3 = 15
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER4 = 16
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER5 = 17
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER6 = 18
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER7 = 19
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER8 = 20
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER9 = 21
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER10 = 22
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER11 = 23
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER12 = 24
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER13 = 25
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER14 = 26
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER15 = 27
    D3D11_MESSAGE_ID_CORRUPTED_MULTITHREADING = 28
    D3D11_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 29
    D3D11_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT = 30
    D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT = 31
    D3D11_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT = 32
    D3D11_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT = 33
    D3D11_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 34
    D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 35
    D3D11_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT = 36
    D3D11_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT = 37
    D3D11_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 38
    D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 39
    D3D11_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT = 40
    D3D11_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT = 41
    D3D11_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT = 42
    D3D11_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 43
    D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 44
    D3D11_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT = 45
    D3D11_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT = 46
    D3D11_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT = 47
    D3D11_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT = 48
    D3D11_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT = 49
    D3D11_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT = 50
    D3D11_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 51
    D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 52
    D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN = 53
    D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS = 54
    D3D11_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 55
    D3D11_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 56
    D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT = 57
    D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES = 58
    D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE = 59
    D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS = 60
    D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS = 61
    D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS = 62
    D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS = 63
    D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS = 64
    D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA = 65
    D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS = 66
    D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS = 67
    D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS = 68
    D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN = 69
    D3D11_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN = 70
    D3D11_MESSAGE_ID_CREATEBUFFER_NULLDESC = 71
    D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS = 72
    D3D11_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION = 73
    D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT = 74
    D3D11_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT = 75
    D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES = 76
    D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE = 77
    D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS = 78
    D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS = 79
    D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS = 80
    D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS = 81
    D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS = 82
    D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA = 83
    D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS = 84
    D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS = 85
    D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS = 86
    D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN = 87
    D3D11_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN = 88
    D3D11_MESSAGE_ID_CREATETEXTURE1D_NULLDESC = 89
    D3D11_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION = 90
    D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT = 91
    D3D11_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT = 92
    D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES = 93
    D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE = 94
    D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS = 95
    D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS = 96
    D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS = 97
    D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS = 98
    D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS = 99
    D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA = 100
    D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS = 101
    D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS = 102
    D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS = 103
    D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN = 104
    D3D11_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN = 105
    D3D11_MESSAGE_ID_CREATETEXTURE2D_NULLDESC = 106
    D3D11_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION = 107
    D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT = 108
    D3D11_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT = 109
    D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES = 110
    D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE = 111
    D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS = 112
    D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS = 113
    D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS = 114
    D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS = 115
    D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS = 116
    D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA = 117
    D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS = 118
    D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS = 119
    D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS = 120
    D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN = 121
    D3D11_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN = 122
    D3D11_MESSAGE_ID_CREATETEXTURE3D_NULLDESC = 123
    D3D11_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION = 124
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 125
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 126
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 127
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 128
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 129
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS = 130
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN = 131
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN = 132
    D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 133
    D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 134
    D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 135
    D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 136
    D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 137
    D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 138
    D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS = 139
    D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN = 140
    D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN = 141
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 142
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 143
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 144
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 145
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 146
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS = 147
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN = 148
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN = 149
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 150
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 151
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 152
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 153
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 154
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 155
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 156
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 157
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 158
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 159
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 160
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 161
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 162
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 163
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC = 164
    D3D11_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 165
    D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 166
    D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 167
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 168
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 169
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 170
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 171
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 172
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 173
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 174
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 175
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL = 176
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL = 177
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 178
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 179
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 180
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 181
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 182
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 183
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 184
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 185
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 186
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 187
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 188
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 189
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 190
    D3D11_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 191
    D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 192
    D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 193
    D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 194
    D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 195
    D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 196
    D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 197
    D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS = 198
    D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC = 199
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 200
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 201
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 202
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 203
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 204
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 205
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 206
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 207
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 208
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 209
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS = 210
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC = 211
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 212
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 213
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 214
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 215
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 216
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 217
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 218
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS = 219
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC = 220
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER = 221
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU = 222
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV = 223
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW = 224
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS = 225
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY = 226
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC = 227
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD = 228
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD = 229
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS = 230
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC = 231
    D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY = 232
    D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS = 233
    D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG = 234
    D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC = 235
    D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED = 236
    D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED = 237
    D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER = 238
    D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE = 239
    D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY = 240
    D3D11_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER = 241
    D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID = 242
    D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE = 243
    D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED = 244
    D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY = 245
    D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER = 246
    D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 247
    D3D11_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY = 248
    D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY = 249
    D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER = 250
    D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 251
    D3D11_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY = 252
    D3D11_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER = 253
    D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED = 254
    D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY = 255
    D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER = 256
    D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 257
    D3D11_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY = 258
    D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT = 259
    D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR = 260
    D3D11_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH = 261
    D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH = 262
    D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 263
    D3D11_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY = 264
    D3D11_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY = 265
    D3D11_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 266
    D3D11_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY = 267
    D3D11_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY = 268
    D3D11_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 269
    D3D11_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY = 270
    D3D11_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY = 271
    D3D11_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY = 272
    D3D11_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 273
    D3D11_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY = 274
    D3D11_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY = 275
    D3D11_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY = 276
    D3D11_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID = 277
    D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE = 278
    D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE = 279
    D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX = 280
    D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE = 281
    D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE = 282
    D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE = 283
    D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE = 284
    D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE = 285
    D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE = 286
    D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE = 287
    D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX = 288
    D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE = 289
    D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID = 290
    D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID = 291
    D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID = 292
    D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID = 293
    D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID = 294
    D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE = 295
    D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS = 296
    D3D11_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED = 297
    D3D11_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN = 298
    D3D11_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED = 299
    D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE = 300
    D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE = 301
    D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS = 302
    D3D11_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED = 303
    D3D11_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN = 304
    D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE = 305
    D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED = 306
    D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE = 307
    D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE = 308
    D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS = 309
    D3D11_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED = 310
    D3D11_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN = 311
    D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE = 312
    D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED = 313
    D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE = 314
    D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE = 315
    D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS = 316
    D3D11_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED = 317
    D3D11_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN = 318
    D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE = 319
    D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED = 320
    D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED = 321
    D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED = 322
    D3D11_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS = 323
    D3D11_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN = 324
    D3D11_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN = 325
    D3D11_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE = 326
    D3D11_MESSAGE_ID_REF_THREADING_MODE = 327
    D3D11_MESSAGE_ID_REF_UMDRIVER_EXCEPTION = 328
    D3D11_MESSAGE_ID_REF_KMDRIVER_EXCEPTION = 329
    D3D11_MESSAGE_ID_REF_HARDWARE_EXCEPTION = 330
    D3D11_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE = 331
    D3D11_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER = 332
    D3D11_MESSAGE_ID_REF_OUT_OF_MEMORY = 333
    D3D11_MESSAGE_ID_REF_INFO = 334
    D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW = 335
    D3D11_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW = 336
    D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW = 337
    D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW = 338
    D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW = 339
    D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW = 340
    D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET = 341
    D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 342
    D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX = 343
    D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE = 344
    D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK = 345
    D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE = 346
    D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 347
    D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET = 348
    D3D11_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET = 349
    D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET = 350
    D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL = 351
    D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET = 352
    D3D11_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET = 353
    D3D11_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH = 354
    D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 355
    D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL = 356
    D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET = 357
    D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID = 358
    D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL = 359
    D3D11_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH = 360
    D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH = 361
    D3D11_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT = 362
    D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET = 363
    D3D11_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED = 364
    D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY = 365
    D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED = 366
    D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED = 367
    D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED = 368
    D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED = 369
    D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED = 370
    D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED = 371
    D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED = 372
    D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED = 373
    D3D11_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE = 374
    D3D11_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER = 375
    D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 376
    D3D11_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 377
    D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 378
    D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 379
    D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 380
    D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN = 381
    D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN = 382
    D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN = 383
    D3D11_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET = 384
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 385
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 386
    D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH = 387
    D3D11_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW = 388
    D3D11_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS = 389
    D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH = 390
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 391
    D3D11_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY = 392
    D3D11_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY = 393
    D3D11_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN = 394
    D3D11_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN = 395
    D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER = 396
    D3D11_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED = 397
    D3D11_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 398
    D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN = 399
    D3D11_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN = 400
    D3D11_MESSAGE_ID_CREATECOUNTER_NULLDESC = 401
    D3D11_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER = 402
    D3D11_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 403
    D3D11_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE = 404
    D3D11_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED = 405
    D3D11_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION = 406
    D3D11_MESSAGE_ID_QUERY_BEGIN_DUPLICATE = 407
    D3D11_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS = 408
    D3D11_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION = 409
    D3D11_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS = 410
    D3D11_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN = 411
    D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE = 412
    D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS = 413
    D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL = 414
    D3D11_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH = 415
    D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED = 416
    D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 417
    D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE = 418
    D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE = 419
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 420
    D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH = 421
    D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY = 422
    D3D11_MESSAGE_ID_LIVE_BUFFER = 423
    D3D11_MESSAGE_ID_LIVE_TEXTURE1D = 424
    D3D11_MESSAGE_ID_LIVE_TEXTURE2D = 425
    D3D11_MESSAGE_ID_LIVE_TEXTURE3D = 426
    D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW = 427
    D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW = 428
    D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW = 429
    D3D11_MESSAGE_ID_LIVE_VERTEXSHADER = 430
    D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER = 431
    D3D11_MESSAGE_ID_LIVE_PIXELSHADER = 432
    D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT = 433
    D3D11_MESSAGE_ID_LIVE_SAMPLER = 434
    D3D11_MESSAGE_ID_LIVE_BLENDSTATE = 435
    D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE = 436
    D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE = 437
    D3D11_MESSAGE_ID_LIVE_QUERY = 438
    D3D11_MESSAGE_ID_LIVE_PREDICATE = 439
    D3D11_MESSAGE_ID_LIVE_COUNTER = 440
    D3D11_MESSAGE_ID_LIVE_DEVICE = 441
    D3D11_MESSAGE_ID_LIVE_SWAPCHAIN = 442
    D3D11_MESSAGE_ID_D3D10_MESSAGES_END = 443
    D3D11_MESSAGE_ID_D3D10L9_MESSAGES_START = 1048576
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED = 1048577
    D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED = 1048578
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT = 1048579
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY = 1048580
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE = 1048581
    D3D11_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED = 1048582
    D3D11_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS = 1048583
    D3D11_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS = 1048584
    D3D11_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS = 1048585
    D3D11_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND = 1048586
    D3D11_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D = 1048587
    D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE = 1048588
    D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE = 1048589
    D3D11_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS = 1048590
    D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS = 1048591
    D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX = 1048592
    D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS = 1048593
    D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED = 1048594
    D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS = 1048595
    D3D11_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY = 1048596
    D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK = 1048597
    D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK = 1048598
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT = 1048599
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE = 1048600
    D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE = 1048601
    D3D11_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE = 1048602
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD = 1048603
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL = 1048604
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX = 1048605
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO = 1048606
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES = 1048607
    D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET = 1048608
    D3D11_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER = 1048609
    D3D11_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE = 1048610
    D3D11_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE = 1048611
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE = 1048612
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS = 1048613
    D3D11_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT = 1048614
    D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS = 1048615
    D3D11_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES = 1048616
    D3D11_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED = 1048617
    D3D11_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED = 1048618
    D3D11_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED = 1048619
    D3D11_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED = 1048620
    D3D11_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED = 1048621
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND = 1048622
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND = 1048623
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED = 1048624
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE = 1048625
    D3D11_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED = 1048626
    D3D11_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 = 1048627
    D3D11_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED = 1048628
    D3D11_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO = 1048629
    D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION = 1048630
    D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED = 1048631
    D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR = 1048632
    D3D11_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA = 1048633
    D3D11_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP = 1048634
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED = 1048635
    D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT = 1048636
    D3D11_MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES = 1048637
    D3D11_MESSAGE_ID_D3D10L9_MESSAGES_END = 1048638
    D3D11_MESSAGE_ID_D3D11_MESSAGES_START = 2097152
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS = 2097153
    D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE = 2097154
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE = 2097155
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS = 2097156
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER = 2097157
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS = 2097158
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE = 2097159
    D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE = 2097160
    D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_COMMANDLISTFLAGS = 2097161
    D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_SINGLETHREADED = 2097162
    D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALIDARG_RETURN = 2097163
    D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_CALL_RETURN = 2097164
    D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_OUTOFMEMORY_RETURN = 2097165
    D3D11_MESSAGE_ID_FINISHDISPLAYLIST_ONIMMEDIATECONTEXT = 2097166
    D3D11_MESSAGE_ID_FINISHDISPLAYLIST_OUTOFMEMORY_RETURN = 2097167
    D3D11_MESSAGE_ID_FINISHDISPLAYLIST_INVALID_CALL_RETURN = 2097168
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM = 2097169
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES = 2097170
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES = 2097171
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES = 2097172
    D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_HAZARD = 2097173
    D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_HAZARD = 2097174
    D3D11_MESSAGE_ID_HSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 2097175
    D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 2097176
    D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCALL = 2097177
    D3D11_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY = 2097178
    D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE = 2097179
    D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE = 2097180
    D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE = 2097181
    D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_VIEWS_EMPTY = 2097182
    D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFER = 2097183
    D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097184
    D3D11_MESSAGE_ID_DEVICE_HSSETSAMPLERS_SAMPLERS_EMPTY = 2097185
    D3D11_MESSAGE_ID_DEVICE_HSGETSHADERRESOURCES_VIEWS_EMPTY = 2097186
    D3D11_MESSAGE_ID_DEVICE_HSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097187
    D3D11_MESSAGE_ID_DEVICE_HSGETSAMPLERS_SAMPLERS_EMPTY = 2097188
    D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_HAZARD = 2097189
    D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_HAZARD = 2097190
    D3D11_MESSAGE_ID_DSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 2097191
    D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 2097192
    D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCALL = 2097193
    D3D11_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY = 2097194
    D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE = 2097195
    D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE = 2097196
    D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE = 2097197
    D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_VIEWS_EMPTY = 2097198
    D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFER = 2097199
    D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097200
    D3D11_MESSAGE_ID_DEVICE_DSSETSAMPLERS_SAMPLERS_EMPTY = 2097201
    D3D11_MESSAGE_ID_DEVICE_DSGETSHADERRESOURCES_VIEWS_EMPTY = 2097202
    D3D11_MESSAGE_ID_DEVICE_DSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097203
    D3D11_MESSAGE_ID_DEVICE_DSGETSAMPLERS_SAMPLERS_EMPTY = 2097204
    D3D11_MESSAGE_ID_DEVICE_DRAW_HS_XOR_DS_MISMATCH = 2097205
    D3D11_MESSAGE_ID_DEFERRED_CONTEXT_REMOVAL_PROCESS_AT_FAULT = 2097206
    D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER = 2097207
    D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED = 2097208
    D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW = 2097209
    D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDMAPTYPE = 2097210
    D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDSUBRESOURCE = 2097211
    D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDFLAGS = 2097212
    D3D11_MESSAGE_ID_RESOURCE_MAP_ALREADYMAPPED = 2097213
    D3D11_MESSAGE_ID_RESOURCE_MAP_DEVICEREMOVED_RETURN = 2097214
    D3D11_MESSAGE_ID_RESOURCE_MAP_OUTOFMEMORY_RETURN = 2097215
    D3D11_MESSAGE_ID_RESOURCE_MAP_WITHOUT_INITIAL_DISCARD = 2097216
    D3D11_MESSAGE_ID_RESOURCE_UNMAP_INVALIDSUBRESOURCE = 2097217
    D3D11_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED = 2097218
    D3D11_MESSAGE_ID_DEVICE_DRAW_RASTERIZING_CONTROL_POINTS = 2097219
    D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED = 2097220
    D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH = 2097221
    D3D11_MESSAGE_ID_DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH = 2097222
    D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH = 2097223
    D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH = 2097224
    D3D11_MESSAGE_ID_CREATE_CONTEXT = 2097225
    D3D11_MESSAGE_ID_LIVE_CONTEXT = 2097226
    D3D11_MESSAGE_ID_DESTROY_CONTEXT = 2097227
    D3D11_MESSAGE_ID_CREATE_BUFFER = 2097228
    D3D11_MESSAGE_ID_LIVE_BUFFER_WIN7 = 2097229
    D3D11_MESSAGE_ID_DESTROY_BUFFER = 2097230
    D3D11_MESSAGE_ID_CREATE_TEXTURE1D = 2097231
    D3D11_MESSAGE_ID_LIVE_TEXTURE1D_WIN7 = 2097232
    D3D11_MESSAGE_ID_DESTROY_TEXTURE1D = 2097233
    D3D11_MESSAGE_ID_CREATE_TEXTURE2D = 2097234
    D3D11_MESSAGE_ID_LIVE_TEXTURE2D_WIN7 = 2097235
    D3D11_MESSAGE_ID_DESTROY_TEXTURE2D = 2097236
    D3D11_MESSAGE_ID_CREATE_TEXTURE3D = 2097237
    D3D11_MESSAGE_ID_LIVE_TEXTURE3D_WIN7 = 2097238
    D3D11_MESSAGE_ID_DESTROY_TEXTURE3D = 2097239
    D3D11_MESSAGE_ID_CREATE_SHADERRESOURCEVIEW = 2097240
    D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW_WIN7 = 2097241
    D3D11_MESSAGE_ID_DESTROY_SHADERRESOURCEVIEW = 2097242
    D3D11_MESSAGE_ID_CREATE_RENDERTARGETVIEW = 2097243
    D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW_WIN7 = 2097244
    D3D11_MESSAGE_ID_DESTROY_RENDERTARGETVIEW = 2097245
    D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILVIEW = 2097246
    D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW_WIN7 = 2097247
    D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILVIEW = 2097248
    D3D11_MESSAGE_ID_CREATE_VERTEXSHADER = 2097249
    D3D11_MESSAGE_ID_LIVE_VERTEXSHADER_WIN7 = 2097250
    D3D11_MESSAGE_ID_DESTROY_VERTEXSHADER = 2097251
    D3D11_MESSAGE_ID_CREATE_HULLSHADER = 2097252
    D3D11_MESSAGE_ID_LIVE_HULLSHADER = 2097253
    D3D11_MESSAGE_ID_DESTROY_HULLSHADER = 2097254
    D3D11_MESSAGE_ID_CREATE_DOMAINSHADER = 2097255
    D3D11_MESSAGE_ID_LIVE_DOMAINSHADER = 2097256
    D3D11_MESSAGE_ID_DESTROY_DOMAINSHADER = 2097257
    D3D11_MESSAGE_ID_CREATE_GEOMETRYSHADER = 2097258
    D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER_WIN7 = 2097259
    D3D11_MESSAGE_ID_DESTROY_GEOMETRYSHADER = 2097260
    D3D11_MESSAGE_ID_CREATE_PIXELSHADER = 2097261
    D3D11_MESSAGE_ID_LIVE_PIXELSHADER_WIN7 = 2097262
    D3D11_MESSAGE_ID_DESTROY_PIXELSHADER = 2097263
    D3D11_MESSAGE_ID_CREATE_INPUTLAYOUT = 2097264
    D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT_WIN7 = 2097265
    D3D11_MESSAGE_ID_DESTROY_INPUTLAYOUT = 2097266
    D3D11_MESSAGE_ID_CREATE_SAMPLER = 2097267
    D3D11_MESSAGE_ID_LIVE_SAMPLER_WIN7 = 2097268
    D3D11_MESSAGE_ID_DESTROY_SAMPLER = 2097269
    D3D11_MESSAGE_ID_CREATE_BLENDSTATE = 2097270
    D3D11_MESSAGE_ID_LIVE_BLENDSTATE_WIN7 = 2097271
    D3D11_MESSAGE_ID_DESTROY_BLENDSTATE = 2097272
    D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILSTATE = 2097273
    D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE_WIN7 = 2097274
    D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILSTATE = 2097275
    D3D11_MESSAGE_ID_CREATE_RASTERIZERSTATE = 2097276
    D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE_WIN7 = 2097277
    D3D11_MESSAGE_ID_DESTROY_RASTERIZERSTATE = 2097278
    D3D11_MESSAGE_ID_CREATE_QUERY = 2097279
    D3D11_MESSAGE_ID_LIVE_QUERY_WIN7 = 2097280
    D3D11_MESSAGE_ID_DESTROY_QUERY = 2097281
    D3D11_MESSAGE_ID_CREATE_PREDICATE = 2097282
    D3D11_MESSAGE_ID_LIVE_PREDICATE_WIN7 = 2097283
    D3D11_MESSAGE_ID_DESTROY_PREDICATE = 2097284
    D3D11_MESSAGE_ID_CREATE_COUNTER = 2097285
    D3D11_MESSAGE_ID_DESTROY_COUNTER = 2097286
    D3D11_MESSAGE_ID_CREATE_COMMANDLIST = 2097287
    D3D11_MESSAGE_ID_LIVE_COMMANDLIST = 2097288
    D3D11_MESSAGE_ID_DESTROY_COMMANDLIST = 2097289
    D3D11_MESSAGE_ID_CREATE_CLASSINSTANCE = 2097290
    D3D11_MESSAGE_ID_LIVE_CLASSINSTANCE = 2097291
    D3D11_MESSAGE_ID_DESTROY_CLASSINSTANCE = 2097292
    D3D11_MESSAGE_ID_CREATE_CLASSLINKAGE = 2097293
    D3D11_MESSAGE_ID_LIVE_CLASSLINKAGE = 2097294
    D3D11_MESSAGE_ID_DESTROY_CLASSLINKAGE = 2097295
    D3D11_MESSAGE_ID_LIVE_DEVICE_WIN7 = 2097296
    D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY_WIN7 = 2097297
    D3D11_MESSAGE_ID_CREATE_COMPUTESHADER = 2097298
    D3D11_MESSAGE_ID_LIVE_COMPUTESHADER = 2097299
    D3D11_MESSAGE_ID_DESTROY_COMPUTESHADER = 2097300
    D3D11_MESSAGE_ID_CREATE_UNORDEREDACCESSVIEW = 2097301
    D3D11_MESSAGE_ID_LIVE_UNORDEREDACCESSVIEW = 2097302
    D3D11_MESSAGE_ID_DESTROY_UNORDEREDACCESSVIEW = 2097303
    D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACES_FEATURELEVEL = 2097304
    D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACE_COUNT_MISMATCH = 2097305
    D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE = 2097306
    D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_INDEX = 2097307
    D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_TYPE = 2097308
    D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_DATA = 2097309
    D3D11_MESSAGE_ID_DEVICE_SETSHADER_UNBOUND_INSTANCE_DATA = 2097310
    D3D11_MESSAGE_ID_DEVICE_SETSHADER_INSTANCE_DATA_BINDINGS = 2097311
    D3D11_MESSAGE_ID_DEVICE_CREATESHADER_CLASSLINKAGE_FULL = 2097312
    D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE = 2097313
    D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE = 2097314
    D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN = 2097315
    D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_HAZARD = 2097316
    D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_HAZARD = 2097317
    D3D11_MESSAGE_ID_CSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 2097318
    D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 2097319
    D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCALL = 2097320
    D3D11_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY = 2097321
    D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE = 2097322
    D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERTYPE = 2097323
    D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE = 2097324
    D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY = 2097325
    D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFER = 2097326
    D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097327
    D3D11_MESSAGE_ID_DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY = 2097328
    D3D11_MESSAGE_ID_DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY = 2097329
    D3D11_MESSAGE_ID_DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097330
    D3D11_MESSAGE_ID_DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY = 2097331
    D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097332
    D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097333
    D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097334
    D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097335
    D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED = 2097336
    D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097337
    D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097338
    D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSTRUCTURESTRIDE = 2097339
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFLAGS = 2097340
    D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE = 2097341
    D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC = 2097342
    D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT = 2097343
    D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS = 2097344
    D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT = 2097345
    D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_HAZARD = 2097346
    D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS = 2097347
    D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP = 2097348
    D3D11_MESSAGE_ID_CSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = 2097349
    D3D11_MESSAGE_ID_PSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = 2097350
    D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN = 2097351
    D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN = 2097352
    D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_TOOMANYOBJECTS = 2097353
    D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_HAZARD = 2097354
    D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_DENORMFLUSH = 2097355
    D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY = 2097356
    D3D11_MESSAGE_ID_DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY = 2097357
    D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS = 2097358
    D3D11_MESSAGE_ID_CREATESHADERRESESOURCEVIEW_TOOMANYOBJECTS = 2097359
    D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER = 2097360
    D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED = 2097361
    D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW = 2097362
    D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDCONTEXT = 2097363
    D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDRESOURCE = 2097364
    D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDMINLOD = 2097365
    D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDCONTEXT = 2097366
    D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDRESOURCE = 2097367
    D3D11_MESSAGE_ID_OMSETDEPTHSTENCIL_UNBINDDELETINGOBJECT = 2097368
    D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DEPTH_READONLY = 2097369
    D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_STENCIL_READONLY = 2097370
    D3D11_MESSAGE_ID_CHECKFEATURESUPPORT_FORMAT_DEPRECATED = 2097371
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH = 2097372
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET = 2097373
    D3D11_MESSAGE_ID_DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP = 2097374
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH = 2097375
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED = 2097376
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED = 2097377
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH = 2097378
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH = 2097379
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED = 2097380
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED = 2097381
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED = 2097382
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED = 2097383
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED = 2097384
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED = 2097385
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED = 2097386
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED = 2097387
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED = 2097388
    D3D11_MESSAGE_ID_DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED = 2097389
    D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW = 2097390
    D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO = 2097391
    D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH = 2097392
    D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH = 2097393
    D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED = 2097394
    D3D11_MESSAGE_ID_DEVICE_DISPATCH_UNSUPPORTED = 2097395
    D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_UNSUPPORTED = 2097396
    D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDOFFSET = 2097397
    D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_LARGEOFFSET = 2097398
    D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE = 2097399
    D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDSOURCESTATE = 2097400
    D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED = 2097401
    D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDVIEW = 2097402
    D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDOFFSET = 2097403
    D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_TOOMANYVIEWS = 2097404
    D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT = 2097405
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED = 2097406
    D3D11_MESSAGE_ID_REF_WARNING = 2097407
    D3D11_MESSAGE_ID_DEVICE_DRAW_PIXEL_SHADER_WITHOUT_RTV_OR_DSV = 2097408
    D3D11_MESSAGE_ID_SHADER_ABORT = 2097409
    D3D11_MESSAGE_ID_SHADER_MESSAGE = 2097410
    D3D11_MESSAGE_ID_SHADER_ERROR = 2097411
    D3D11_MESSAGE_ID_OFFERRESOURCES_INVALIDRESOURCE = 2097412
    D3D11_MESSAGE_ID_HSSETSAMPLERS_UNBINDDELETINGOBJECT = 2097413
    D3D11_MESSAGE_ID_DSSETSAMPLERS_UNBINDDELETINGOBJECT = 2097414
    D3D11_MESSAGE_ID_CSSETSAMPLERS_UNBINDDELETINGOBJECT = 2097415
    D3D11_MESSAGE_ID_HSSETSHADER_UNBINDDELETINGOBJECT = 2097416
    D3D11_MESSAGE_ID_DSSETSHADER_UNBINDDELETINGOBJECT = 2097417
    D3D11_MESSAGE_ID_CSSETSHADER_UNBINDDELETINGOBJECT = 2097418
    D3D11_MESSAGE_ID_ENQUEUESETEVENT_INVALIDARG_RETURN = 2097419
    D3D11_MESSAGE_ID_ENQUEUESETEVENT_OUTOFMEMORY_RETURN = 2097420
    D3D11_MESSAGE_ID_ENQUEUESETEVENT_ACCESSDENIED_RETURN = 2097421
    D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NUMUAVS_INVALIDRANGE = 2097422
    D3D11_MESSAGE_ID_USE_OF_ZERO_REFCOUNT_OBJECT = 2097423
    D3D11_MESSAGE_ID_D3D11_MESSAGES_END = 2097424
    D3D11_MESSAGE_ID_D3D11_1_MESSAGES_START = 3145728
    D3D11_MESSAGE_ID_CREATE_VIDEODECODER = 3145729
    D3D11_MESSAGE_ID_CREATE_VIDEOPROCESSORENUM = 3145730
    D3D11_MESSAGE_ID_CREATE_VIDEOPROCESSOR = 3145731
    D3D11_MESSAGE_ID_CREATE_DECODEROUTPUTVIEW = 3145732
    D3D11_MESSAGE_ID_CREATE_PROCESSORINPUTVIEW = 3145733
    D3D11_MESSAGE_ID_CREATE_PROCESSOROUTPUTVIEW = 3145734
    D3D11_MESSAGE_ID_CREATE_DEVICECONTEXTSTATE = 3145735
    D3D11_MESSAGE_ID_LIVE_VIDEODECODER = 3145736
    D3D11_MESSAGE_ID_LIVE_VIDEOPROCESSORENUM = 3145737
    D3D11_MESSAGE_ID_LIVE_VIDEOPROCESSOR = 3145738
    D3D11_MESSAGE_ID_LIVE_DECODEROUTPUTVIEW = 3145739
    D3D11_MESSAGE_ID_LIVE_PROCESSORINPUTVIEW = 3145740
    D3D11_MESSAGE_ID_LIVE_PROCESSOROUTPUTVIEW = 3145741
    D3D11_MESSAGE_ID_LIVE_DEVICECONTEXTSTATE = 3145742
    D3D11_MESSAGE_ID_DESTROY_VIDEODECODER = 3145743
    D3D11_MESSAGE_ID_DESTROY_VIDEOPROCESSORENUM = 3145744
    D3D11_MESSAGE_ID_DESTROY_VIDEOPROCESSOR = 3145745
    D3D11_MESSAGE_ID_DESTROY_DECODEROUTPUTVIEW = 3145746
    D3D11_MESSAGE_ID_DESTROY_PROCESSORINPUTVIEW = 3145747
    D3D11_MESSAGE_ID_DESTROY_PROCESSOROUTPUTVIEW = 3145748
    D3D11_MESSAGE_ID_DESTROY_DEVICECONTEXTSTATE = 3145749
    D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFLAGS = 3145750
    D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFEATURELEVEL = 3145751
    D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_FEATURELEVELS_NOT_SUPPORTED = 3145752
    D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDREFIID = 3145753
    D3D11_MESSAGE_ID_DEVICE_DISCARDVIEW_INVALIDVIEW = 3145754
    D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION1_INVALIDCOPYFLAGS = 3145755
    D3D11_MESSAGE_ID_UPDATESUBRESOURCE1_INVALIDCOPYFLAGS = 3145756
    D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT = 3145757
    D3D11_MESSAGE_ID_CREATEVIDEODECODER_OUTOFMEMORY_RETURN = 3145758
    D3D11_MESSAGE_ID_CREATEVIDEODECODER_NULLPARAM = 3145759
    D3D11_MESSAGE_ID_CREATEVIDEODECODER_INVALIDFORMAT = 3145760
    D3D11_MESSAGE_ID_CREATEVIDEODECODER_ZEROWIDTHHEIGHT = 3145761
    D3D11_MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERSIZE = 3145762
    D3D11_MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERUSAGE = 3145763
    D3D11_MESSAGE_ID_GETVIDEODECODERPROFILECOUNT_OUTOFMEMORY = 3145764
    D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_NULLPARAM = 3145765
    D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_INVALIDINDEX = 3145766
    D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_OUTOFMEMORY_RETURN = 3145767
    D3D11_MESSAGE_ID_CHECKVIDEODECODERFORMAT_NULLPARAM = 3145768
    D3D11_MESSAGE_ID_CHECKVIDEODECODERFORMAT_OUTOFMEMORY_RETURN = 3145769
    D3D11_MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_NULLPARAM = 3145770
    D3D11_MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_OUTOFMEMORY_RETURN = 3145771
    D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_NULLPARAM = 3145772
    D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_INVALIDINDEX = 3145773
    D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_OUTOFMEMORY_RETURN = 3145774
    D3D11_MESSAGE_ID_GETDECODERCREATIONPARAMS_NULLPARAM = 3145775
    D3D11_MESSAGE_ID_GETDECODERDRIVERHANDLE_NULLPARAM = 3145776
    D3D11_MESSAGE_ID_GETDECODERBUFFER_NULLPARAM = 3145777
    D3D11_MESSAGE_ID_GETDECODERBUFFER_INVALIDBUFFER = 3145778
    D3D11_MESSAGE_ID_GETDECODERBUFFER_INVALIDTYPE = 3145779
    D3D11_MESSAGE_ID_GETDECODERBUFFER_LOCKED = 3145780
    D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_NULLPARAM = 3145781
    D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_INVALIDTYPE = 3145782
    D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_NOTLOCKED = 3145783
    D3D11_MESSAGE_ID_DECODERBEGINFRAME_NULLPARAM = 3145784
    D3D11_MESSAGE_ID_DECODERBEGINFRAME_HAZARD = 3145785
    D3D11_MESSAGE_ID_DECODERENDFRAME_NULLPARAM = 3145786
    D3D11_MESSAGE_ID_SUBMITDECODERBUFFERS_NULLPARAM = 3145787
    D3D11_MESSAGE_ID_SUBMITDECODERBUFFERS_INVALIDTYPE = 3145788
    D3D11_MESSAGE_ID_DECODEREXTENSION_NULLPARAM = 3145789
    D3D11_MESSAGE_ID_DECODEREXTENSION_INVALIDRESOURCE = 3145790
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_OUTOFMEMORY_RETURN = 3145791
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_NULLPARAM = 3145792
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDFRAMEFORMAT = 3145793
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDUSAGE = 3145794
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDINPUTFRAMERATE = 3145795
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDOUTPUTFRAMERATE = 3145796
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDWIDTHHEIGHT = 3145797
    D3D11_MESSAGE_ID_GETVIDEOPROCESSORCONTENTDESC_NULLPARAM = 3145798
    D3D11_MESSAGE_ID_CHECKVIDEOPROCESSORFORMAT_NULLPARAM = 3145799
    D3D11_MESSAGE_ID_GETVIDEOPROCESSORCAPS_NULLPARAM = 3145800
    D3D11_MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_NULLPARAM = 3145801
    D3D11_MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_INVALIDINDEX = 3145802
    D3D11_MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_NULLPARAM = 3145803
    D3D11_MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_INVALIDINDEX = 3145804
    D3D11_MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_NULLPARAM = 3145805
    D3D11_MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_UNSUPPORTED = 3145806
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOR_OUTOFMEMORY_RETURN = 3145807
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOR_NULLPARAM = 3145808
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTTARGETRECT_NULLPARAM = 3145809
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_NULLPARAM = 3145810
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_INVALIDALPHA = 3145811
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE_NULLPARAM = 3145812
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_NULLPARAM = 3145813
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_UNSUPPORTED = 3145814
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDSTREAM = 3145815
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDFILLMODE = 3145816
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_NULLPARAM = 3145817
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_NULLPARAM = 3145818
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_UNSUPPORTED = 3145819
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTEXTENSION_NULLPARAM = 3145820
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTTARGETRECT_NULLPARAM = 3145821
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTBACKGROUNDCOLOR_NULLPARAM = 3145822
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE_NULLPARAM = 3145823
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTALPHAFILLMODE_NULLPARAM = 3145824
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCONSTRICTION_NULLPARAM = 3145825
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_UNSUPPORTED = 3145826
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_INVALIDSIZE = 3145827
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSTEREOMODE_NULLPARAM = 3145828
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTEXTENSION_NULLPARAM = 3145829
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_NULLPARAM = 3145830
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDFORMAT = 3145831
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDSTREAM = 3145832
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_NULLPARAM = 3145833
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_INVALIDSTREAM = 3145834
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_NULLPARAM = 3145835
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDRATE = 3145836
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDFLAG = 3145837
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDSTREAM = 3145838
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_NULLPARAM = 3145839
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDSTREAM = 3145840
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDRECT = 3145841
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_NULLPARAM = 3145842
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDSTREAM = 3145843
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDRECT = 3145844
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_NULLPARAM = 3145845
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDSTREAM = 3145846
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDALPHA = 3145847
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_NULLPARAM = 3145848
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDSTREAM = 3145849
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDCOUNT = 3145850
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDALPHA = 3145851
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_NULLPARAM = 3145852
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDSTREAM = 3145853
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDRATIO = 3145854
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_NULLPARAM = 3145855
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDSTREAM = 3145856
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDRANGE = 3145857
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_UNSUPPORTED = 3145858
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_NULLPARAM = 3145859
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDSTREAM = 3145860
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_UNSUPPORTED = 3145861
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FLIPUNSUPPORTED = 3145862
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_MONOOFFSETUNSUPPORTED = 3145863
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FORMATUNSUPPORTED = 3145864
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDFORMAT = 3145865
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_NULLPARAM = 3145866
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM = 3145867
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_NULLPARAM = 3145868
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDSTREAM = 3145869
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDFILTER = 3145870
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_UNSUPPORTED = 3145871
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDLEVEL = 3145872
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_NULLPARAM = 3145873
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_INVALIDSTREAM = 3145874
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFRAMEFORMAT_NULLPARAM = 3145875
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE_NULLPARAM = 3145876
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMOUTPUTRATE_NULLPARAM = 3145877
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSOURCERECT_NULLPARAM = 3145878
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMDESTRECT_NULLPARAM = 3145879
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMALPHA_NULLPARAM = 3145880
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPALETTE_NULLPARAM = 3145881
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_NULLPARAM = 3145882
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMLUMAKEY_NULLPARAM = 3145883
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSTEREOFORMAT_NULLPARAM = 3145884
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_NULLPARAM = 3145885
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFILTER_NULLPARAM = 3145886
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_NULLPARAM = 3145887
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_INVALIDSTREAM = 3145888
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_NULLPARAM = 3145889
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSTREAMCOUNT = 3145890
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_TARGETRECT = 3145891
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDOUTPUT = 3145892
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDPASTFRAMES = 3145893
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDFUTUREFRAMES = 3145894
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSOURCERECT = 3145895
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDDESTRECT = 3145896
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDINPUTRESOURCE = 3145897
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAYSIZE = 3145898
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAY = 3145899
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTEXPECTED = 3145900
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTNOTEXPECTED = 3145901
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_STEREONOTENABLED = 3145902
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDRIGHTRESOURCE = 3145903
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_NOSTEREOSTREAMS = 3145904
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INPUTHAZARD = 3145905
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_OUTPUTHAZARD = 3145906
    D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_OUTOFMEMORY_RETURN = 3145907
    D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_NULLPARAM = 3145908
    D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDTYPE = 3145909
    D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDBIND = 3145910
    D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEDFORMAT = 3145911
    D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDMIP = 3145912
    D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEMIP = 3145913
    D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAYSIZE = 3145914
    D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAY = 3145915
    D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDDIMENSION = 3145916
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_OUTOFMEMORY_RETURN = 3145917
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_NULLPARAM = 3145918
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDTYPE = 3145919
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDBIND = 3145920
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMISC = 3145921
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDUSAGE = 3145922
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFORMAT = 3145923
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFOURCC = 3145924
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMIP = 3145925
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_UNSUPPORTEDMIP = 3145926
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAYSIZE = 3145927
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAY = 3145928
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDDIMENSION = 3145929
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_OUTOFMEMORY_RETURN = 3145930
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_NULLPARAM = 3145931
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDTYPE = 3145932
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDBIND = 3145933
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDFORMAT = 3145934
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMIP = 3145935
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDMIP = 3145936
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDARRAY = 3145937
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDARRAY = 3145938
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDDIMENSION = 3145939
    D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_FORCED_SAMPLE_COUNT = 3145940
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS = 3145941
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDARRAYWITHDECODER = 3145942
    D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDARRAYWITHDECODER = 3145943
    D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDARRAYWITHDECODER = 3145944
    D3D11_MESSAGE_ID_DEVICE_LOCKEDOUT_INTERFACE = 3145945
    D3D11_MESSAGE_ID_REF_WARNING_ATOMIC_INCONSISTENT = 3145946
    D3D11_MESSAGE_ID_REF_WARNING_READING_UNINITIALIZED_RESOURCE = 3145947
    D3D11_MESSAGE_ID_REF_WARNING_RAW_HAZARD = 3145948
    D3D11_MESSAGE_ID_REF_WARNING_WAR_HAZARD = 3145949
    D3D11_MESSAGE_ID_REF_WARNING_WAW_HAZARD = 3145950
    D3D11_MESSAGE_ID_CREATECRYPTOSESSION_NULLPARAM = 3145951
    D3D11_MESSAGE_ID_CREATECRYPTOSESSION_OUTOFMEMORY_RETURN = 3145952
    D3D11_MESSAGE_ID_GETCRYPTOTYPE_NULLPARAM = 3145953
    D3D11_MESSAGE_ID_GETDECODERPROFILE_NULLPARAM = 3145954
    D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATESIZE_NULLPARAM = 3145955
    D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_NULLPARAM = 3145956
    D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_WRONGSIZE = 3145957
    D3D11_MESSAGE_ID_GETCRYPTOSESSIONHANDLE_WRONGSIZE = 3145958
    D3D11_MESSAGE_ID_NEGOTIATECRPYTOSESSIONKEYEXCHANGE_NULLPARAM = 3145959
    D3D11_MESSAGE_ID_ENCRYPTIONBLT_UNSUPPORTED = 3145960
    D3D11_MESSAGE_ID_ENCRYPTIONBLT_NULLPARAM = 3145961
    D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_WRONGDEVICE = 3145962
    D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_WRONGDEVICE = 3145963
    D3D11_MESSAGE_ID_ENCRYPTIONBLT_FORMAT_MISMATCH = 3145964
    D3D11_MESSAGE_ID_ENCRYPTIONBLT_SIZE_MISMATCH = 3145965
    D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_MULTISAMPLED = 3145966
    D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_NOT_STAGING = 3145967
    D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_MAPPED = 3145968
    D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_MAPPED = 3145969
    D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_OFFERED = 3145970
    D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_OFFERED = 3145971
    D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_CONTENT_UNDEFINED = 3145972
    D3D11_MESSAGE_ID_DECRYPTIONBLT_UNSUPPORTED = 3145973
    D3D11_MESSAGE_ID_DECRYPTIONBLT_NULLPARAM = 3145974
    D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_WRONGDEVICE = 3145975
    D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_WRONGDEVICE = 3145976
    D3D11_MESSAGE_ID_DECRYPTIONBLT_FORMAT_MISMATCH = 3145977
    D3D11_MESSAGE_ID_DECRYPTIONBLT_SIZE_MISMATCH = 3145978
    D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_MULTISAMPLED = 3145979
    D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_NOT_STAGING = 3145980
    D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_NOT_RENDER_TARGET = 3145981
    D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_MAPPED = 3145982
    D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_MAPPED = 3145983
    D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_OFFERED = 3145984
    D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_OFFERED = 3145985
    D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_CONTENT_UNDEFINED = 3145986
    D3D11_MESSAGE_ID_STARTSESSIONKEYREFRESH_NULLPARAM = 3145987
    D3D11_MESSAGE_ID_STARTSESSIONKEYREFRESH_INVALIDSIZE = 3145988
    D3D11_MESSAGE_ID_FINISHSESSIONKEYREFRESH_NULLPARAM = 3145989
    D3D11_MESSAGE_ID_GETENCRYPTIONBLTKEY_NULLPARAM = 3145990
    D3D11_MESSAGE_ID_GETENCRYPTIONBLTKEY_INVALIDSIZE = 3145991
    D3D11_MESSAGE_ID_GETCONTENTPROTECTIONCAPS_NULLPARAM = 3145992
    D3D11_MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_NULLPARAM = 3145993
    D3D11_MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_INVALIDINDEX = 3145994
    D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_NULLPARAM = 3145995
    D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_UNSUPPORTED = 3145996
    D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_INVALIDTYPE = 3145997
    D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_OUTOFMEMORY_RETURN = 3145998
    D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_INVALIDCHANNEL = 3145999
    D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_NULLPARAM = 3146000
    D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_INVALIDCHANNEL = 3146001
    D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_NULLPARAM = 3146002
    D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_WRONGSIZE = 3146003
    D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDCHANNEL = 3146004
    D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_NULLPARAM = 3146005
    D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_NULLPARAM = 3146006
    D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGCHANNEL = 3146007
    D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_UNSUPPORTEDQUERY = 3146008
    D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGSIZE = 3146009
    D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_INVALIDPROCESSINDEX = 3146010
    D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_NULLPARAM = 3146011
    D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGCHANNEL = 3146012
    D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_UNSUPPORTEDCONFIGURE = 3146013
    D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGSIZE = 3146014
    D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_INVALIDPROCESSIDTYPE = 3146015
    D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146016
    D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146017
    D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146018
    D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146019
    D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146020
    D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146021
    D3D11_MESSAGE_ID_NEGOTIATECRPYTOSESSIONKEYEXCHANGE_INVALIDSIZE = 3146022
    D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDSIZE = 3146023
    D3D11_MESSAGE_ID_OFFERRESOURCES_INVALIDPRIORITY = 3146024
    D3D11_MESSAGE_ID_GETCRYPTOSESSIONHANDLE_OUTOFMEMORY = 3146025
    D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_NULLPARAM = 3146026
    D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDTYPE = 3146027
    D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDBIND = 3146028
    D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDARRAY = 3146029
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_NULLPARAM = 3146030
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALIDSTREAM = 3146031
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALID = 3146032
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_UNSUPPORTED = 3146033
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMROTATION_NULLPARAM = 3146034
    D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDVIEW = 3146035
    D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146036
    D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146037
    D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146038
    D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146039
    D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146040
    D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146041
    D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146042
    D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146043
    D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED = 3146044
    D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_SHADEREXTENSIONSNOTSUPPORTED = 3146045
    D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146046
    D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146047
    D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146048
    D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146049
    D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_MINPRECISION = 3146050
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_UNSUPPORTED = 3146051
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_UNSUPPORTED = 3146052
    D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED = 3146053
    D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED = 3146054
    D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED = 3146055
    D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED = 3146056
    D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED = 3146057
    D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED = 3146058
    D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED = 3146059
    D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_INVALIDOFFSET = 3146060
    D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_TOOMANYVIEWS = 3146061
    D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_NOTSUPPORTED = 3146062
    D3D11_MESSAGE_ID_SWAPDEVICECONTEXTSTATE_NOTSUPPORTED = 3146063
    D3D11_MESSAGE_ID_UPDATESUBRESOURCE_PREFERUPDATESUBRESOURCE1 = 3146064
    D3D11_MESSAGE_ID_GETDC_INACCESSIBLE = 3146065
    D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDRECT = 3146066
    D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLE_MASK_IGNORED_ON_FL9 = 3146067
    D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE1_NOT_SUPPORTED = 3146068
    D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BY_NAME_NOT_SUPPORTED = 3146069
    D3D11_MESSAGE_ID_ENQUEUESETEVENT_NOT_SUPPORTED = 3146070
    D3D11_MESSAGE_ID_OFFERRELEASE_NOT_SUPPORTED = 3146071
    D3D11_MESSAGE_ID_OFFERRESOURCES_INACCESSIBLE = 3146072
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMSAA = 3146073
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMSAA = 3146074
    D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT = 3146075
    D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT = 3146076
    D3D11_MESSAGE_ID_UPDATESUBRESOURCE_EMPTYDESTBOX = 3146077
    D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_EMPTYSOURCEBOX = 3146078
    D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS = 3146079
    D3D11_MESSAGE_ID_DEVICE_DRAW_DEPTHSTENCILVIEW_NOT_SET = 3146080
    D3D11_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET = 3146081
    D3D11_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET_DUE_TO_FLIP_PRESENT = 3146082
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET_DUE_TO_FLIP_PRESENT = 3146083
    D3D11_MESSAGE_ID_GETDATAFORNEWHARDWAREKEY_NULLPARAM = 3146084
    D3D11_MESSAGE_ID_CHECKCRYPTOSESSIONSTATUS_NULLPARAM = 3146085
    D3D11_MESSAGE_ID_GETCRYPTOSESSIONPRIVATEDATASIZE_NULLPARAM = 3146086
    D3D11_MESSAGE_ID_GETVIDEODECODERCAPS_NULLPARAM = 3146087
    D3D11_MESSAGE_ID_GETVIDEODECODERCAPS_ZEROWIDTHHEIGHT = 3146088
    D3D11_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_NULLPARAM = 3146089
    D3D11_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE = 3146090
    D3D11_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT = 3146091
    D3D11_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_NULLPARAM = 3146092
    D3D11_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_UNSUPPORTED = 3146093
    D3D11_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_NULLPARAM = 3146094
    D3D11_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_UNSUPPORTED = 3146095
    D3D11_MESSAGE_ID_CHECKVIDEOPROCESSORFORMATCONVERSION_NULLPARAM = 3146096
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE1_NULLPARAM = 3146097
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE1_NULLPARAM = 3146098
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_NULLPARAM = 3146099
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_INVALIDSTREAM = 3146100
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_NULLPARAM = 3146101
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_INVALIDSTREAM = 3146102
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_UNSUPPORTED = 3146103
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE1_NULLPARAM = 3146104
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMMIRROR_NULLPARAM = 3146105
    D3D11_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_NULLPARAM = 3146106
    D3D11_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE = 3146107
    D3D11_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT = 3146108
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSHADERUSAGE_NULLPARAM = 3146109
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSHADERUSAGE_NULLPARAM = 3146110
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_NULLPARAM = 3146111
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSTREAMCOUNT = 3146112
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_TARGETRECT = 3146113
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSOURCERECT = 3146114
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDDESTRECT = 3146115
    D3D11_MESSAGE_ID_GETCRYPTOSESSIONPRIVATEDATASIZE_INVALID_KEY_EXCHANGE_TYPE = 3146116
    D3D11_MESSAGE_ID_D3D11_1_MESSAGES_END = 3146117
    D3D11_MESSAGE_ID_D3D11_2_MESSAGES_START = 3146118
    D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDUSAGE = 3146119
    D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDUSAGE = 3146120
    D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDUSAGE = 3146121
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_STEPRATE_NOT_1 = 3146122
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_INSTANCING_NOT_SUPPORTED = 3146123
    D3D11_MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER = 3146124
    D3D11_MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER = 3146125
    D3D11_MESSAGE_ID_COPYTILES_INVALID_PARAMETER = 3146126
    D3D11_MESSAGE_ID_UPDATETILES_INVALID_PARAMETER = 3146127
    D3D11_MESSAGE_ID_RESIZETILEPOOL_INVALID_PARAMETER = 3146128
    D3D11_MESSAGE_ID_TILEDRESOURCEBARRIER_INVALID_PARAMETER = 3146129
    D3D11_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_WARNING = 3146130
    D3D11_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_ERROR = 3146131
    D3D11_MESSAGE_ID_DIRTY_TILE_MAPPING_ACCESS = 3146132
    D3D11_MESSAGE_ID_DUPLICATE_TILE_MAPPINGS_IN_COVERED_AREA = 3146133
    D3D11_MESSAGE_ID_TILE_MAPPINGS_IN_COVERED_AREA_DUPLICATED_OUTSIDE = 3146134
    D3D11_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INCOMPATIBLE_RESOURCES = 3146135
    D3D11_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INPUT_AND_OUTPUT = 3146136
    D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_INVALIDFLAGS = 3146137
    D3D11_MESSAGE_ID_GETRESOURCETILING_NONTILED_RESOURCE = 3146138
    D3D11_MESSAGE_ID_RESIZETILEPOOL_SHRINK_WITH_MAPPINGS_STILL_DEFINED_PAST_END = 3146139
    D3D11_MESSAGE_ID_NEED_TO_CALL_TILEDRESOURCEBARRIER = 3146140
    D3D11_MESSAGE_ID_CREATEDEVICE_INVALIDARGS = 3146141
    D3D11_MESSAGE_ID_CREATEDEVICE_WARNING = 3146142
    D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWUINT_HAZARD = 3146143
    D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_HAZARD = 3146144
    D3D11_MESSAGE_ID_TILED_RESOURCE_TIER_1_BUFFER_TEXTURE_MISMATCH = 3146145
    D3D11_MESSAGE_ID_CREATE_CRYPTOSESSION = 3146146
    D3D11_MESSAGE_ID_CREATE_AUTHENTICATEDCHANNEL = 3146147
    D3D11_MESSAGE_ID_LIVE_CRYPTOSESSION = 3146148
    D3D11_MESSAGE_ID_LIVE_AUTHENTICATEDCHANNEL = 3146149
    D3D11_MESSAGE_ID_DESTROY_CRYPTOSESSION = 3146150
    D3D11_MESSAGE_ID_DESTROY_AUTHENTICATEDCHANNEL = 3146151
    D3D11_MESSAGE_ID_D3D11_2_MESSAGES_END = 3146152
    D3D11_MESSAGE_ID_D3D11_3_MESSAGES_START = 3146153
    D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE = 3146154
    D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_SYSTEMVALUE = 3146155
    D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDCONTEXTTYPE = 3146156
    D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_DECODENOTSUPPORTED = 3146157
    D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_ENCODENOTSUPPORTED = 3146158
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANEINDEX = 3146159
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANEINDEX = 3146160
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_AMBIGUOUSVIDEOPLANEINDEX = 3146161
    D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANEINDEX = 3146162
    D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANEINDEX = 3146163
    D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_AMBIGUOUSVIDEOPLANEINDEX = 3146164
    D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANEINDEX = 3146165
    D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANEINDEX = 3146166
    D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_AMBIGUOUSVIDEOPLANEINDEX = 3146167
    D3D11_MESSAGE_ID_JPEGDECODE_INVALIDSCANDATAOFFSET = 3146168
    D3D11_MESSAGE_ID_JPEGDECODE_NOTSUPPORTED = 3146169
    D3D11_MESSAGE_ID_JPEGDECODE_DIMENSIONSTOOLARGE = 3146170
    D3D11_MESSAGE_ID_JPEGDECODE_INVALIDCOMPONENTS = 3146171
    D3D11_MESSAGE_ID_JPEGDECODE_DESTINATIONNOT2D = 3146172
    D3D11_MESSAGE_ID_JPEGDECODE_TILEDRESOURCESUNSUPPORTED = 3146173
    D3D11_MESSAGE_ID_JPEGDECODE_GUARDRECTSUNSUPPORTED = 3146174
    D3D11_MESSAGE_ID_JPEGDECODE_FORMATUNSUPPORTED = 3146175
    D3D11_MESSAGE_ID_JPEGDECODE_INVALIDSUBRESOURCE = 3146176
    D3D11_MESSAGE_ID_JPEGDECODE_INVALIDMIPLEVEL = 3146177
    D3D11_MESSAGE_ID_JPEGDECODE_EMPTYDESTBOX = 3146178
    D3D11_MESSAGE_ID_JPEGDECODE_DESTBOXNOT2D = 3146179
    D3D11_MESSAGE_ID_JPEGDECODE_DESTBOXNOTSUB = 3146180
    D3D11_MESSAGE_ID_JPEGDECODE_DESTBOXESINTERSECT = 3146181
    D3D11_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEMISMATCH = 3146182
    D3D11_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEMISMATCH = 3146183
    D3D11_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEODD = 3146184
    D3D11_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEODD = 3146185
    D3D11_MESSAGE_ID_JPEGDECODE_OUTPUTDIMENSIONSTOOLARGE = 3146186
    D3D11_MESSAGE_ID_JPEGDECODE_NONPOW2SCALEUNSUPPORTED = 3146187
    D3D11_MESSAGE_ID_JPEGDECODE_FRACTIONALDOWNSCALETOLARGE = 3146188
    D3D11_MESSAGE_ID_JPEGDECODE_CHROMASIZEMISMATCH = 3146189
    D3D11_MESSAGE_ID_JPEGDECODE_LUMACHROMASIZEMISMATCH = 3146190
    D3D11_MESSAGE_ID_JPEGDECODE_INVALIDNUMDESTINATIONS = 3146191
    D3D11_MESSAGE_ID_JPEGDECODE_SUBBOXUNSUPPORTED = 3146192
    D3D11_MESSAGE_ID_JPEGDECODE_1DESTUNSUPPORTEDFORMAT = 3146193
    D3D11_MESSAGE_ID_JPEGDECODE_3DESTUNSUPPORTEDFORMAT = 3146194
    D3D11_MESSAGE_ID_JPEGDECODE_SCALEUNSUPPORTED = 3146195
    D3D11_MESSAGE_ID_JPEGDECODE_INVALIDSOURCESIZE = 3146196
    D3D11_MESSAGE_ID_JPEGDECODE_INVALIDCOPYFLAGS = 3146197
    D3D11_MESSAGE_ID_JPEGDECODE_HAZARD = 3146198
    D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERUSAGE = 3146199
    D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERMISCFLAGS = 3146200
    D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDDSTTEXTUREUSAGE = 3146201
    D3D11_MESSAGE_ID_JPEGDECODE_BACKBUFFERNOTSUPPORTED = 3146202
    D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPRTEDCOPYFLAGS = 3146203
    D3D11_MESSAGE_ID_JPEGENCODE_NOTSUPPORTED = 3146204
    D3D11_MESSAGE_ID_JPEGENCODE_INVALIDSCANDATAOFFSET = 3146205
    D3D11_MESSAGE_ID_JPEGENCODE_INVALIDCOMPONENTS = 3146206
    D3D11_MESSAGE_ID_JPEGENCODE_SOURCENOT2D = 3146207
    D3D11_MESSAGE_ID_JPEGENCODE_TILEDRESOURCESUNSUPPORTED = 3146208
    D3D11_MESSAGE_ID_JPEGENCODE_GUARDRECTSUNSUPPORTED = 3146209
    D3D11_MESSAGE_ID_JPEGENCODE_XSUBSAMPLEMISMATCH = 3146210
    D3D11_MESSAGE_ID_JPEGENCODE_YSUBSAMPLEMISMATCH = 3146211
    D3D11_MESSAGE_ID_JPEGENCODE_FORMATUNSUPPORTED = 3146212
    D3D11_MESSAGE_ID_JPEGENCODE_INVALIDSUBRESOURCE = 3146213
    D3D11_MESSAGE_ID_JPEGENCODE_INVALIDMIPLEVEL = 3146214
    D3D11_MESSAGE_ID_JPEGENCODE_DIMENSIONSTOOLARGE = 3146215
    D3D11_MESSAGE_ID_JPEGENCODE_HAZARD = 3146216
    D3D11_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERUSAGE = 3146217
    D3D11_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERMISCFLAGS = 3146218
    D3D11_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDSRCTEXTUREUSAGE = 3146219
    D3D11_MESSAGE_ID_JPEGENCODE_BACKBUFFERNOTSUPPORTED = 3146220
    D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNSUPPORTEDCONTEXTTTYPEFORQUERY = 3146221
    D3D11_MESSAGE_ID_FLUSH1_INVALIDCONTEXTTYPE = 3146222
    D3D11_MESSAGE_ID_DEVICE_SETHARDWAREPROTECTION_INVALIDCONTEXT = 3146223
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTHDRMETADATA_NULLPARAM = 3146224
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTHDRMETADATA_INVALIDSIZE = 3146225
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTHDRMETADATA_NULLPARAM = 3146226
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTHDRMETADATA_INVALIDSIZE = 3146227
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_NULLPARAM = 3146228
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_INVALIDSTREAM = 3146229
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_INVALIDSIZE = 3146230
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_NULLPARAM = 3146231
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_INVALIDSTREAM = 3146232
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_INVALIDSIZE = 3146233
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFRAMEFORMAT_INVALIDSTREAM = 3146234
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE_INVALIDSTREAM = 3146235
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMOUTPUTRATE_INVALIDSTREAM = 3146236
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSOURCERECT_INVALIDSTREAM = 3146237
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMDESTRECT_INVALIDSTREAM = 3146238
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMALPHA_INVALIDSTREAM = 3146239
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPALETTE_INVALIDSTREAM = 3146240
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_INVALIDSTREAM = 3146241
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMLUMAKEY_INVALIDSTREAM = 3146242
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSTEREOFORMAT_INVALIDSTREAM = 3146243
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM = 3146244
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFILTER_INVALIDSTREAM = 3146245
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMROTATION_INVALIDSTREAM = 3146246
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE1_INVALIDSTREAM = 3146247
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMMIRROR_INVALIDSTREAM = 3146248
    D3D11_MESSAGE_ID_CREATE_FENCE = 3146249
    D3D11_MESSAGE_ID_LIVE_FENCE = 3146250
    D3D11_MESSAGE_ID_DESTROY_FENCE = 3146251
    D3D11_MESSAGE_ID_CREATE_SYNCHRONIZEDCHANNEL = 3146252
    D3D11_MESSAGE_ID_LIVE_SYNCHRONIZEDCHANNEL = 3146253
    D3D11_MESSAGE_ID_DESTROY_SYNCHRONIZEDCHANNEL = 3146254
    D3D11_MESSAGE_ID_CREATEFENCE_INVALIDFLAGS = 3146255
    D3D11_MESSAGE_ID_D3D11_3_MESSAGES_END = 3146256
    D3D11_MESSAGE_ID_D3D11_5_MESSAGES_START = 3146257
    D3D11_MESSAGE_ID_NEGOTIATECRYPTOSESSIONKEYEXCHANGEMT_INVALIDKEYEXCHANGETYPE = 3146258
    D3D11_MESSAGE_ID_NEGOTIATECRYPTOSESSIONKEYEXCHANGEMT_NOT_SUPPORTED = 3146259
    D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_COMPONENT_COUNT = 3146260
    D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_COMPONENT = 3146261
    D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_SIZE = 3146262
    D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_USAGE = 3146263
    D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_MISC_FLAGS = 3146264
    D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_OFFSET = 3146265
    D3D11_MESSAGE_ID_CREATE_TRACKEDWORKLOAD = 3146266
    D3D11_MESSAGE_ID_LIVE_TRACKEDWORKLOAD = 3146267
    D3D11_MESSAGE_ID_DESTROY_TRACKEDWORKLOAD = 3146268
    D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_NULLPARAM = 3146269
    D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_MAX_INSTANCES = 3146270
    D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_DEADLINE_TYPE = 3146271
    D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_ENGINE_TYPE = 3146272
    D3D11_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOADS = 3146273
    D3D11_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOAD_PAIRS = 3146274
    D3D11_MESSAGE_ID_INCOMPLETE_TRACKED_WORKLOAD_PAIR = 3146275
    D3D11_MESSAGE_ID_OUT_OF_ORDER_TRACKED_WORKLOAD_PAIR = 3146276
    D3D11_MESSAGE_ID_CANNOT_ADD_TRACKED_WORKLOAD = 3146277
    D3D11_MESSAGE_ID_TRACKED_WORKLOAD_NOT_SUPPORTED = 3146278
    D3D11_MESSAGE_ID_TRACKED_WORKLOAD_ENGINE_TYPE_NOT_FOUND = 3146279
    D3D11_MESSAGE_ID_NO_TRACKED_WORKLOAD_SLOT_AVAILABLE = 3146280
    D3D11_MESSAGE_ID_END_TRACKED_WORKLOAD_INVALID_ARG = 3146281
    D3D11_MESSAGE_ID_TRACKED_WORKLOAD_DISJOINT_FAILURE = 3146282
    D3D11_MESSAGE_ID_D3D11_5_MESSAGES_END = 3146283
  end

  enum D3D11_COPY_FLAGS : Int32
    D3D11_COPY_NO_OVERWRITE = 1
    D3D11_COPY_DISCARD = 2
  end

  enum D3D11_LOGIC_OP : Int32
    D3D11_LOGIC_OP_CLEAR = 0
    D3D11_LOGIC_OP_SET = 1
    D3D11_LOGIC_OP_COPY = 2
    D3D11_LOGIC_OP_COPY_INVERTED = 3
    D3D11_LOGIC_OP_NOOP = 4
    D3D11_LOGIC_OP_INVERT = 5
    D3D11_LOGIC_OP_AND = 6
    D3D11_LOGIC_OP_NAND = 7
    D3D11_LOGIC_OP_OR = 8
    D3D11_LOGIC_OP_NOR = 9
    D3D11_LOGIC_OP_XOR = 10
    D3D11_LOGIC_OP_EQUIV = 11
    D3D11_LOGIC_OP_AND_REVERSE = 12
    D3D11_LOGIC_OP_AND_INVERTED = 13
    D3D11_LOGIC_OP_OR_REVERSE = 14
    D3D11_LOGIC_OP_OR_INVERTED = 15
  end

  enum D3D11_1_CREATE_DEVICE_CONTEXT_STATE_FLAG : Int32
    D3D11_1_CREATE_DEVICE_CONTEXT_STATE_SINGLETHREADED = 1
  end

  enum D3D11_VIDEO_DECODER_CAPS : Int32
    D3D11_VIDEO_DECODER_CAPS_DOWNSAMPLE = 1
    D3D11_VIDEO_DECODER_CAPS_NON_REAL_TIME = 2
    D3D11_VIDEO_DECODER_CAPS_DOWNSAMPLE_DYNAMIC = 4
    D3D11_VIDEO_DECODER_CAPS_DOWNSAMPLE_REQUIRED = 8
    D3D11_VIDEO_DECODER_CAPS_UNSUPPORTED = 16
  end

  enum D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINTS : Int32
    D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_MULTIPLANE_OVERLAY_ROTATION = 1
    D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_MULTIPLANE_OVERLAY_RESIZE = 2
    D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_MULTIPLANE_OVERLAY_COLOR_SPACE_CONVERSION = 4
    D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_TRIPLE_BUFFER_OUTPUT = 8
  end

  enum D3D11_CRYPTO_SESSION_STATUS : Int32
    D3D11_CRYPTO_SESSION_STATUS_OK = 0
    D3D11_CRYPTO_SESSION_STATUS_KEY_LOST = 1
    D3D11_CRYPTO_SESSION_STATUS_KEY_AND_CONTENT_LOST = 2
  end

  enum D3D11_TILE_MAPPING_FLAG : Int32
    D3D11_TILE_MAPPING_NO_OVERWRITE = 1
  end

  enum D3D11_TILE_RANGE_FLAG : Int32
    D3D11_TILE_RANGE_NULL = 1
    D3D11_TILE_RANGE_SKIP = 2
    D3D11_TILE_RANGE_REUSE_SINGLE_TILE = 4
  end

  enum D3D11_CHECK_MULTISAMPLE_QUALITY_LEVELS_FLAG : Int32
    D3D11_CHECK_MULTISAMPLE_QUALITY_LEVELS_TILED_RESOURCE = 1
  end

  enum D3D11_TILE_COPY_FLAG : Int32
    D3D11_TILE_COPY_NO_OVERWRITE = 1
    D3D11_TILE_COPY_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE = 2
    D3D11_TILE_COPY_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER = 4
  end

  enum D3D11_CONTEXT_TYPE : Int32
    D3D11_CONTEXT_TYPE_ALL = 0
    D3D11_CONTEXT_TYPE_3D = 1
    D3D11_CONTEXT_TYPE_COMPUTE = 2
    D3D11_CONTEXT_TYPE_COPY = 3
    D3D11_CONTEXT_TYPE_VIDEO = 4
  end

  enum D3D11_TEXTURE_LAYOUT : Int32
    D3D11_TEXTURE_LAYOUT_UNDEFINED = 0
    D3D11_TEXTURE_LAYOUT_ROW_MAJOR = 1
    D3D11_TEXTURE_LAYOUT_64K_STANDARD_SWIZZLE = 2
  end

  enum D3D11_CONSERVATIVE_RASTERIZATION_MODE : Int32
    D3D11_CONSERVATIVE_RASTERIZATION_MODE_OFF = 0
    D3D11_CONSERVATIVE_RASTERIZATION_MODE_ON = 1
  end

  enum D3D11_FENCE_FLAG : UInt32
    D3D11_FENCE_FLAG_NONE = 0
    D3D11_FENCE_FLAG_SHARED = 2
    D3D11_FENCE_FLAG_SHARED_CROSS_ADAPTER = 4
    D3D11_FENCE_FLAG_NON_MONITORED = 8
  end

  enum D3D11_FEATURE_VIDEO : Int32
    D3D11_FEATURE_VIDEO_DECODER_HISTOGRAM = 0
  end

  enum D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT : Int32
    D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_Y = 0
    D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_U = 1
    D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_V = 2
    D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_R = 0
    D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_G = 1
    D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_B = 2
    D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_A = 3
  end

  enum D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS : UInt32
    D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_NONE = 0
    D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_Y = 1
    D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_U = 2
    D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_V = 4
    D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_R = 1
    D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_G = 2
    D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_B = 4
    D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_A = 8
  end

  enum D3D11_CRYPTO_SESSION_KEY_EXCHANGE_FLAGS : UInt32
    D3D11_CRYPTO_SESSION_KEY_EXCHANGE_FLAG_NONE = 0
  end

  enum D3D11_SHADER_VERSION_TYPE : Int32
    D3D11_SHVER_PIXEL_SHADER = 0
    D3D11_SHVER_VERTEX_SHADER = 1
    D3D11_SHVER_GEOMETRY_SHADER = 2
    D3D11_SHVER_HULL_SHADER = 3
    D3D11_SHVER_DOMAIN_SHADER = 4
    D3D11_SHVER_COMPUTE_SHADER = 5
    D3D11_SHVER_RESERVED0 = 65520
  end

  enum D3D11_SHADER_TYPE : Int32
    D3D11_VERTEX_SHADER = 1
    D3D11_HULL_SHADER = 2
    D3D11_DOMAIN_SHADER = 3
    D3D11_GEOMETRY_SHADER = 4
    D3D11_PIXEL_SHADER = 5
    D3D11_COMPUTE_SHADER = 6
  end

  enum D3D11_TRACE_GS_INPUT_PRIMITIVE : Int32
    D3D11_TRACE_GS_INPUT_PRIMITIVE_UNDEFINED = 0
    D3D11_TRACE_GS_INPUT_PRIMITIVE_POINT = 1
    D3D11_TRACE_GS_INPUT_PRIMITIVE_LINE = 2
    D3D11_TRACE_GS_INPUT_PRIMITIVE_TRIANGLE = 3
    D3D11_TRACE_GS_INPUT_PRIMITIVE_LINE_ADJ = 6
    D3D11_TRACE_GS_INPUT_PRIMITIVE_TRIANGLE_ADJ = 7
  end

  enum D3D11_TRACE_REGISTER_TYPE : Int32
    D3D11_TRACE_OUTPUT_NULL_REGISTER = 0
    D3D11_TRACE_INPUT_REGISTER = 1
    D3D11_TRACE_INPUT_PRIMITIVE_ID_REGISTER = 2
    D3D11_TRACE_IMMEDIATE_CONSTANT_BUFFER = 3
    D3D11_TRACE_TEMP_REGISTER = 4
    D3D11_TRACE_INDEXABLE_TEMP_REGISTER = 5
    D3D11_TRACE_OUTPUT_REGISTER = 6
    D3D11_TRACE_OUTPUT_DEPTH_REGISTER = 7
    D3D11_TRACE_CONSTANT_BUFFER = 8
    D3D11_TRACE_IMMEDIATE32 = 9
    D3D11_TRACE_SAMPLER = 10
    D3D11_TRACE_RESOURCE = 11
    D3D11_TRACE_RASTERIZER = 12
    D3D11_TRACE_OUTPUT_COVERAGE_MASK = 13
    D3D11_TRACE_STREAM = 14
    D3D11_TRACE_THIS_POINTER = 15
    D3D11_TRACE_OUTPUT_CONTROL_POINT_ID_REGISTER = 16
    D3D11_TRACE_INPUT_FORK_INSTANCE_ID_REGISTER = 17
    D3D11_TRACE_INPUT_JOIN_INSTANCE_ID_REGISTER = 18
    D3D11_TRACE_INPUT_CONTROL_POINT_REGISTER = 19
    D3D11_TRACE_OUTPUT_CONTROL_POINT_REGISTER = 20
    D3D11_TRACE_INPUT_PATCH_CONSTANT_REGISTER = 21
    D3D11_TRACE_INPUT_DOMAIN_POINT_REGISTER = 22
    D3D11_TRACE_UNORDERED_ACCESS_VIEW = 23
    D3D11_TRACE_THREAD_GROUP_SHARED_MEMORY = 24
    D3D11_TRACE_INPUT_THREAD_ID_REGISTER = 25
    D3D11_TRACE_INPUT_THREAD_GROUP_ID_REGISTER = 26
    D3D11_TRACE_INPUT_THREAD_ID_IN_GROUP_REGISTER = 27
    D3D11_TRACE_INPUT_COVERAGE_MASK_REGISTER = 28
    D3D11_TRACE_INPUT_THREAD_ID_IN_GROUP_FLATTENED_REGISTER = 29
    D3D11_TRACE_INPUT_GS_INSTANCE_ID_REGISTER = 30
    D3D11_TRACE_OUTPUT_DEPTH_GREATER_EQUAL_REGISTER = 31
    D3D11_TRACE_OUTPUT_DEPTH_LESS_EQUAL_REGISTER = 32
    D3D11_TRACE_IMMEDIATE64 = 33
    D3D11_TRACE_INPUT_CYCLE_COUNTER_REGISTER = 34
    D3D11_TRACE_INTERFACE_POINTER = 35
  end

  enum D3DX11_SCAN_DATA_TYPE : Int32
    D3DX11_SCAN_DATA_TYPE_FLOAT = 1
    D3DX11_SCAN_DATA_TYPE_INT = 2
    D3DX11_SCAN_DATA_TYPE_UINT = 3
  end

  enum D3DX11_SCAN_OPCODE : Int32
    D3DX11_SCAN_OPCODE_ADD = 1
    D3DX11_SCAN_OPCODE_MIN = 2
    D3DX11_SCAN_OPCODE_MAX = 3
    D3DX11_SCAN_OPCODE_MUL = 4
    D3DX11_SCAN_OPCODE_AND = 5
    D3DX11_SCAN_OPCODE_OR = 6
    D3DX11_SCAN_OPCODE_XOR = 7
  end

  enum D3DX11_SCAN_DIRECTION : Int32
    D3DX11_SCAN_DIRECTION_FORWARD = 1
    D3DX11_SCAN_DIRECTION_BACKWARD = 2
  end

  enum D3DX11_FFT_DATA_TYPE : Int32
    D3DX11_FFT_DATA_TYPE_REAL = 0
    D3DX11_FFT_DATA_TYPE_COMPLEX = 1
  end

  enum D3DX11_FFT_DIM_MASK : Int32
    D3DX11_FFT_DIM_MASK_1D = 1
    D3DX11_FFT_DIM_MASK_2D = 3
    D3DX11_FFT_DIM_MASK_3D = 7
  end

  enum D3DX11_FFT_CREATE_FLAG : Int32
    D3DX11_FFT_CREATE_FLAG_NO_PRECOMPUTE_BUFFERS = 1
  end

  union D3D11_BUFFER_SRV_Anonymous1_e__Union
    first_element : UInt32
    element_offset : UInt32
  end
  union D3D11_BUFFER_SRV_Anonymous2_e__Union
    num_elements : UInt32
    element_width : UInt32
  end
  union D3D11_SHADER_RESOURCE_VIEW_DESC_Anonymous_e__Union
    buffer : D3D11_BUFFER_SRV
    texture1_d : D3D11_TEX1D_SRV
    texture1_d_array : D3D11_TEX1D_ARRAY_SRV
    texture2_d : D3D11_TEX2D_SRV
    texture2_d_array : D3D11_TEX2D_ARRAY_SRV
    texture2_dms : D3D11_TEX2DMS_SRV
    texture2_dms_array : D3D11_TEX2DMS_ARRAY_SRV
    texture3_d : D3D11_TEX3D_SRV
    texture_cube : D3D11_TEXCUBE_SRV
    texture_cube_array : D3D11_TEXCUBE_ARRAY_SRV
    buffer_ex : D3D11_BUFFEREX_SRV
  end
  union D3D11_BUFFER_RTV_Anonymous2_e__Union
    num_elements : UInt32
    element_width : UInt32
  end
  union D3D11_BUFFER_RTV_Anonymous1_e__Union
    first_element : UInt32
    element_offset : UInt32
  end
  union D3D11_RENDER_TARGET_VIEW_DESC_Anonymous_e__Union
    buffer : D3D11_BUFFER_RTV
    texture1_d : D3D11_TEX1D_RTV
    texture1_d_array : D3D11_TEX1D_ARRAY_RTV
    texture2_d : D3D11_TEX2D_RTV
    texture2_d_array : D3D11_TEX2D_ARRAY_RTV
    texture2_dms : D3D11_TEX2DMS_RTV
    texture2_dms_array : D3D11_TEX2DMS_ARRAY_RTV
    texture3_d : D3D11_TEX3D_RTV
  end
  union D3D11_DEPTH_STENCIL_VIEW_DESC_Anonymous_e__Union
    texture1_d : D3D11_TEX1D_DSV
    texture1_d_array : D3D11_TEX1D_ARRAY_DSV
    texture2_d : D3D11_TEX2D_DSV
    texture2_d_array : D3D11_TEX2D_ARRAY_DSV
    texture2_dms : D3D11_TEX2DMS_DSV
    texture2_dms_array : D3D11_TEX2DMS_ARRAY_DSV
  end
  union D3D11_UNORDERED_ACCESS_VIEW_DESC_Anonymous_e__Union
    buffer : D3D11_BUFFER_UAV
    texture1_d : D3D11_TEX1D_UAV
    texture1_d_array : D3D11_TEX1D_ARRAY_UAV
    texture2_d : D3D11_TEX2D_UAV
    texture2_d_array : D3D11_TEX2D_ARRAY_UAV
    texture3_d : D3D11_TEX3D_UAV
  end
  union D3D11_VIDEO_COLOR_Anonymous_e__Union
    y_cb_cr : D3D11_VIDEO_COLOR_YCbCrA
    rgba : D3D11_VIDEO_COLOR_RGBA
  end
  union D3D11_AUTHENTICATED_PROTECTION_FLAGS
    flags : D3D11_AUTHENTICATED_PROTECTION_FLAGS_Flags_e__Struct
    value : UInt32
  end
  union D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC_Anonymous_e__Union
    texture2_d : D3D11_TEX2D_VDOV
  end
  union D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC_Anonymous_e__Union
    texture2_d : D3D11_TEX2D_VPIV
  end
  union D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC_Anonymous_e__Union
    texture2_d : D3D11_TEX2D_VPOV
    texture2_d_array : D3D11_TEX2D_ARRAY_VPOV
  end
  union D3D11_SHADER_RESOURCE_VIEW_DESC1_Anonymous_e__Union
    buffer : D3D11_BUFFER_SRV
    texture1_d : D3D11_TEX1D_SRV
    texture1_d_array : D3D11_TEX1D_ARRAY_SRV
    texture2_d : D3D11_TEX2D_SRV1
    texture2_d_array : D3D11_TEX2D_ARRAY_SRV1
    texture2_dms : D3D11_TEX2DMS_SRV
    texture2_dms_array : D3D11_TEX2DMS_ARRAY_SRV
    texture3_d : D3D11_TEX3D_SRV
    texture_cube : D3D11_TEXCUBE_SRV
    texture_cube_array : D3D11_TEXCUBE_ARRAY_SRV
    buffer_ex : D3D11_BUFFEREX_SRV
  end
  union D3D11_RENDER_TARGET_VIEW_DESC1_Anonymous_e__Union
    buffer : D3D11_BUFFER_RTV
    texture1_d : D3D11_TEX1D_RTV
    texture1_d_array : D3D11_TEX1D_ARRAY_RTV
    texture2_d : D3D11_TEX2D_RTV1
    texture2_d_array : D3D11_TEX2D_ARRAY_RTV1
    texture2_dms : D3D11_TEX2DMS_RTV
    texture2_dms_array : D3D11_TEX2DMS_ARRAY_RTV
    texture3_d : D3D11_TEX3D_RTV
  end
  union D3D11_UNORDERED_ACCESS_VIEW_DESC1_Anonymous_e__Union
    buffer : D3D11_BUFFER_UAV
    texture1_d : D3D11_TEX1D_UAV
    texture1_d_array : D3D11_TEX1D_ARRAY_UAV
    texture2_d : D3D11_TEX2D_UAV1
    texture2_d_array : D3D11_TEX2D_ARRAY_UAV1
    texture3_d : D3D11_TEX3D_UAV
  end
  union D3D11_SHADER_TRACE_DESC_Anonymous_e__Union
    vertex_shader_trace_desc : D3D11_VERTEX_SHADER_TRACE_DESC
    hull_shader_trace_desc : D3D11_HULL_SHADER_TRACE_DESC
    domain_shader_trace_desc : D3D11_DOMAIN_SHADER_TRACE_DESC
    geometry_shader_trace_desc : D3D11_GEOMETRY_SHADER_TRACE_DESC
    pixel_shader_trace_desc : D3D11_PIXEL_SHADER_TRACE_DESC
    compute_shader_trace_desc : D3D11_COMPUTE_SHADER_TRACE_DESC
  end
  union D3D11_TRACE_REGISTER_Anonymous_e__Union
    index1_d : UInt16
    index2_d : UInt16[2]*
  end

  struct D3D11_INPUT_ELEMENT_DESC
    semantic_name : PSTR
    semantic_index : UInt32
    format : DXGI_FORMAT
    input_slot : UInt32
    aligned_byte_offset : UInt32
    input_slot_class : D3D11_INPUT_CLASSIFICATION
    instance_data_step_rate : UInt32
  end
  struct D3D11_SO_DECLARATION_ENTRY
    stream : UInt32
    semantic_name : PSTR
    semantic_index : UInt32
    start_component : UInt8
    component_count : UInt8
    output_slot : UInt8
  end
  struct D3D11_VIEWPORT
    top_left_x : Float32
    top_left_y : Float32
    width : Float32
    height : Float32
    min_depth : Float32
    max_depth : Float32
  end
  struct D3D11_DRAW_INSTANCED_INDIRECT_ARGS
    vertex_count_per_instance : UInt32
    instance_count : UInt32
    start_vertex_location : UInt32
    start_instance_location : UInt32
  end
  struct D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS
    index_count_per_instance : UInt32
    instance_count : UInt32
    start_index_location : UInt32
    base_vertex_location : Int32
    start_instance_location : UInt32
  end
  struct D3D11_BOX
    left : UInt32
    top : UInt32
    front : UInt32
    right : UInt32
    bottom : UInt32
    back : UInt32
  end
  struct D3D11_DEPTH_STENCILOP_DESC
    stencil_fail_op : D3D11_STENCIL_OP
    stencil_depth_fail_op : D3D11_STENCIL_OP
    stencil_pass_op : D3D11_STENCIL_OP
    stencil_func : D3D11_COMPARISON_FUNC
  end
  struct D3D11_DEPTH_STENCIL_DESC
    depth_enable : LibC::BOOL
    depth_write_mask : D3D11_DEPTH_WRITE_MASK
    depth_func : D3D11_COMPARISON_FUNC
    stencil_enable : LibC::BOOL
    stencil_read_mask : UInt8
    stencil_write_mask : UInt8
    front_face : D3D11_DEPTH_STENCILOP_DESC
    back_face : D3D11_DEPTH_STENCILOP_DESC
  end
  struct D3D11_RENDER_TARGET_BLEND_DESC
    blend_enable : LibC::BOOL
    src_blend : D3D11_BLEND
    dest_blend : D3D11_BLEND
    blend_op : D3D11_BLEND_OP
    src_blend_alpha : D3D11_BLEND
    dest_blend_alpha : D3D11_BLEND
    blend_op_alpha : D3D11_BLEND_OP
    render_target_write_mask : UInt8
  end
  struct D3D11_BLEND_DESC
    alpha_to_coverage_enable : LibC::BOOL
    independent_blend_enable : LibC::BOOL
    render_target : D3D11_RENDER_TARGET_BLEND_DESC[8]*
  end
  struct D3D11_RASTERIZER_DESC
    fill_mode : D3D11_FILL_MODE
    cull_mode : D3D11_CULL_MODE
    front_counter_clockwise : LibC::BOOL
    depth_bias : Int32
    depth_bias_clamp : Float32
    slope_scaled_depth_bias : Float32
    depth_clip_enable : LibC::BOOL
    scissor_enable : LibC::BOOL
    multisample_enable : LibC::BOOL
    antialiased_line_enable : LibC::BOOL
  end
  struct D3D11_SUBRESOURCE_DATA
    p_sys_mem : Void*
    sys_mem_pitch : UInt32
    sys_mem_slice_pitch : UInt32
  end
  struct D3D11_MAPPED_SUBRESOURCE
    p_data : Void*
    row_pitch : UInt32
    depth_pitch : UInt32
  end
  struct D3D11_BUFFER_DESC
    byte_width : UInt32
    usage : D3D11_USAGE
    bind_flags : UInt32
    cpu_access_flags : UInt32
    misc_flags : UInt32
    structure_byte_stride : UInt32
  end
  struct D3D11_TEXTURE1D_DESC
    width : UInt32
    mip_levels : UInt32
    array_size : UInt32
    format : DXGI_FORMAT
    usage : D3D11_USAGE
    bind_flags : UInt32
    cpu_access_flags : UInt32
    misc_flags : UInt32
  end
  struct D3D11_TEXTURE2D_DESC
    width : UInt32
    height : UInt32
    mip_levels : UInt32
    array_size : UInt32
    format : DXGI_FORMAT
    sample_desc : DXGI_SAMPLE_DESC
    usage : D3D11_USAGE
    bind_flags : D3D11_BIND_FLAG
    cpu_access_flags : D3D11_CPU_ACCESS_FLAG
    misc_flags : D3D11_RESOURCE_MISC_FLAG
  end
  struct D3D11_TEXTURE3D_DESC
    width : UInt32
    height : UInt32
    depth : UInt32
    mip_levels : UInt32
    format : DXGI_FORMAT
    usage : D3D11_USAGE
    bind_flags : UInt32
    cpu_access_flags : UInt32
    misc_flags : UInt32
  end
  struct D3D11_BUFFER_SRV
    anonymous1 : D3D11_BUFFER_SRV_Anonymous1_e__Union
    anonymous2 : D3D11_BUFFER_SRV_Anonymous2_e__Union
  end
  struct D3D11_BUFFEREX_SRV
    first_element : UInt32
    num_elements : UInt32
    flags : UInt32
  end
  struct D3D11_TEX1D_SRV
    most_detailed_mip : UInt32
    mip_levels : UInt32
  end
  struct D3D11_TEX1D_ARRAY_SRV
    most_detailed_mip : UInt32
    mip_levels : UInt32
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D11_TEX2D_SRV
    most_detailed_mip : UInt32
    mip_levels : UInt32
  end
  struct D3D11_TEX2D_ARRAY_SRV
    most_detailed_mip : UInt32
    mip_levels : UInt32
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D11_TEX3D_SRV
    most_detailed_mip : UInt32
    mip_levels : UInt32
  end
  struct D3D11_TEXCUBE_SRV
    most_detailed_mip : UInt32
    mip_levels : UInt32
  end
  struct D3D11_TEXCUBE_ARRAY_SRV
    most_detailed_mip : UInt32
    mip_levels : UInt32
    first2_d_array_face : UInt32
    num_cubes : UInt32
  end
  struct D3D11_TEX2DMS_SRV
    unused_field_nothing_to_define : UInt32
  end
  struct D3D11_TEX2DMS_ARRAY_SRV
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D11_SHADER_RESOURCE_VIEW_DESC
    format : DXGI_FORMAT
    view_dimension : D3D_SRV_DIMENSION
    anonymous : D3D11_SHADER_RESOURCE_VIEW_DESC_Anonymous_e__Union
  end
  struct D3D11_BUFFER_RTV
    anonymous1 : D3D11_BUFFER_RTV_Anonymous1_e__Union
    anonymous2 : D3D11_BUFFER_RTV_Anonymous2_e__Union
  end
  struct D3D11_TEX1D_RTV
    mip_slice : UInt32
  end
  struct D3D11_TEX1D_ARRAY_RTV
    mip_slice : UInt32
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D11_TEX2D_RTV
    mip_slice : UInt32
  end
  struct D3D11_TEX2DMS_RTV
    unused_field_nothing_to_define : UInt32
  end
  struct D3D11_TEX2D_ARRAY_RTV
    mip_slice : UInt32
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D11_TEX2DMS_ARRAY_RTV
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D11_TEX3D_RTV
    mip_slice : UInt32
    first_w_slice : UInt32
    w_size : UInt32
  end
  struct D3D11_RENDER_TARGET_VIEW_DESC
    format : DXGI_FORMAT
    view_dimension : D3D11_RTV_DIMENSION
    anonymous : D3D11_RENDER_TARGET_VIEW_DESC_Anonymous_e__Union
  end
  struct D3D11_TEX1D_DSV
    mip_slice : UInt32
  end
  struct D3D11_TEX1D_ARRAY_DSV
    mip_slice : UInt32
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D11_TEX2D_DSV
    mip_slice : UInt32
  end
  struct D3D11_TEX2D_ARRAY_DSV
    mip_slice : UInt32
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D11_TEX2DMS_DSV
    unused_field_nothing_to_define : UInt32
  end
  struct D3D11_TEX2DMS_ARRAY_DSV
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D11_DEPTH_STENCIL_VIEW_DESC
    format : DXGI_FORMAT
    view_dimension : D3D11_DSV_DIMENSION
    flags : UInt32
    anonymous : D3D11_DEPTH_STENCIL_VIEW_DESC_Anonymous_e__Union
  end
  struct D3D11_BUFFER_UAV
    first_element : UInt32
    num_elements : UInt32
    flags : UInt32
  end
  struct D3D11_TEX1D_UAV
    mip_slice : UInt32
  end
  struct D3D11_TEX1D_ARRAY_UAV
    mip_slice : UInt32
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D11_TEX2D_UAV
    mip_slice : UInt32
  end
  struct D3D11_TEX2D_ARRAY_UAV
    mip_slice : UInt32
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D11_TEX3D_UAV
    mip_slice : UInt32
    first_w_slice : UInt32
    w_size : UInt32
  end
  struct D3D11_UNORDERED_ACCESS_VIEW_DESC
    format : DXGI_FORMAT
    view_dimension : D3D11_UAV_DIMENSION
    anonymous : D3D11_UNORDERED_ACCESS_VIEW_DESC_Anonymous_e__Union
  end
  struct D3D11_SAMPLER_DESC
    filter : D3D11_FILTER
    address_u : D3D11_TEXTURE_ADDRESS_MODE
    address_v : D3D11_TEXTURE_ADDRESS_MODE
    address_w : D3D11_TEXTURE_ADDRESS_MODE
    mip_lod_bias : Float32
    max_anisotropy : UInt32
    comparison_func : D3D11_COMPARISON_FUNC
    border_color : Float32[4]*
    min_lod : Float32
    max_lod : Float32
  end
  struct D3D11_QUERY_DESC
    query : D3D11_QUERY
    misc_flags : UInt32
  end
  struct D3D11_QUERY_DATA_TIMESTAMP_DISJOINT
    frequency : UInt64
    disjoint : LibC::BOOL
  end
  struct D3D11_QUERY_DATA_PIPELINE_STATISTICS
    ia_vertices : UInt64
    ia_primitives : UInt64
    vs_invocations : UInt64
    gs_invocations : UInt64
    gs_primitives : UInt64
    c_invocations : UInt64
    c_primitives : UInt64
    ps_invocations : UInt64
    hs_invocations : UInt64
    ds_invocations : UInt64
    cs_invocations : UInt64
  end
  struct D3D11_QUERY_DATA_SO_STATISTICS
    num_primitives_written : UInt64
    primitives_storage_needed : UInt64
  end
  struct D3D11_COUNTER_DESC
    counter : D3D11_COUNTER
    misc_flags : UInt32
  end
  struct D3D11_COUNTER_INFO
    last_device_dependent_counter : D3D11_COUNTER
    num_simultaneous_counters : UInt32
    num_detectable_parallel_units : UInt8
  end
  struct D3D11_CLASS_INSTANCE_DESC
    instance_id : UInt32
    instance_index : UInt32
    type_id : UInt32
    constant_buffer : UInt32
    base_constant_buffer_offset : UInt32
    base_texture : UInt32
    base_sampler : UInt32
    created : LibC::BOOL
  end
  struct D3D11_FEATURE_DATA_THREADING
    driver_concurrent_creates : LibC::BOOL
    driver_command_lists : LibC::BOOL
  end
  struct D3D11_FEATURE_DATA_DOUBLES
    double_precision_float_shader_ops : LibC::BOOL
  end
  struct D3D11_FEATURE_DATA_FORMAT_SUPPORT
    in_format : DXGI_FORMAT
    out_format_support : UInt32
  end
  struct D3D11_FEATURE_DATA_FORMAT_SUPPORT2
    in_format : DXGI_FORMAT
    out_format_support2 : UInt32
  end
  struct D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS
    compute_shaders_plus_raw_and_structured_buffers_via_shader_4_x : LibC::BOOL
  end
  struct D3D11_FEATURE_DATA_D3D11_OPTIONS
    output_merger_logic_op : LibC::BOOL
    uav_only_rendering_forced_sample_count : LibC::BOOL
    discard_ap_is_seen_by_driver : LibC::BOOL
    flags_for_update_and_copy_seen_by_driver : LibC::BOOL
    clear_view : LibC::BOOL
    copy_with_overlap : LibC::BOOL
    constant_buffer_partial_update : LibC::BOOL
    constant_buffer_offsetting : LibC::BOOL
    map_no_overwrite_on_dynamic_constant_buffer : LibC::BOOL
    map_no_overwrite_on_dynamic_buffer_srv : LibC::BOOL
    multisample_rtv_with_forced_sample_count_one : LibC::BOOL
    sad4_shader_instructions : LibC::BOOL
    extended_doubles_shader_instructions : LibC::BOOL
    extended_resource_sharing : LibC::BOOL
  end
  struct D3D11_FEATURE_DATA_ARCHITECTURE_INFO
    tile_based_deferred_renderer : LibC::BOOL
  end
  struct D3D11_FEATURE_DATA_D3D9_OPTIONS
    full_non_pow2_texture_support : LibC::BOOL
  end
  struct D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT
    supports_depth_as_texture_with_less_equal_comparison_filter : LibC::BOOL
  end
  struct D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT
    pixel_shader_min_precision : UInt32
    all_other_shader_stages_min_precision : UInt32
  end
  struct D3D11_FEATURE_DATA_D3D11_OPTIONS1
    tiled_resources_tier : D3D11_TILED_RESOURCES_TIER
    min_max_filtering : LibC::BOOL
    clear_view_also_supports_depth_only_formats : LibC::BOOL
    map_on_default_buffers : LibC::BOOL
  end
  struct D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT
    simple_instancing_supported : LibC::BOOL
  end
  struct D3D11_FEATURE_DATA_MARKER_SUPPORT
    profile : LibC::BOOL
  end
  struct D3D11_FEATURE_DATA_D3D9_OPTIONS1
    full_non_pow2_texture_supported : LibC::BOOL
    depth_as_texture_with_less_equal_comparison_filter_supported : LibC::BOOL
    simple_instancing_supported : LibC::BOOL
    texture_cube_face_render_target_with_non_cube_depth_stencil_supported : LibC::BOOL
  end
  struct D3D11_FEATURE_DATA_D3D11_OPTIONS2
    ps_specified_stencil_ref_supported : LibC::BOOL
    typed_uav_load_additional_formats : LibC::BOOL
    ro_vs_supported : LibC::BOOL
    conservative_rasterization_tier : D3D11_CONSERVATIVE_RASTERIZATION_TIER
    tiled_resources_tier : D3D11_TILED_RESOURCES_TIER
    map_on_default_textures : LibC::BOOL
    standard_swizzle : LibC::BOOL
    unified_memory_architecture : LibC::BOOL
  end
  struct D3D11_FEATURE_DATA_D3D11_OPTIONS3
    vp_and_rt_array_index_from_any_shader_feeding_rasterizer : LibC::BOOL
  end
  struct D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT
    max_gpu_virtual_address_bits_per_resource : UInt32
    max_gpu_virtual_address_bits_per_process : UInt32
  end
  struct D3D11_FEATURE_DATA_SHADER_CACHE
    support_flags : UInt32
  end
  struct D3D11_FEATURE_DATA_DISPLAYABLE
    displayable_texture : LibC::BOOL
    shared_resource_tier : D3D11_SHARED_RESOURCE_TIER
  end
  struct D3D11_FEATURE_DATA_D3D11_OPTIONS5
    shared_resource_tier : D3D11_SHARED_RESOURCE_TIER
  end
  struct D3D11_VIDEO_DECODER_DESC
    guid : Guid
    sample_width : UInt32
    sample_height : UInt32
    output_format : DXGI_FORMAT
  end
  struct D3D11_VIDEO_DECODER_CONFIG
    guid_config_bitstream_encryption : Guid
    guid_config_m_bcontrol_encryption : Guid
    guid_config_resid_diff_encryption : Guid
    config_bitstream_raw : UInt32
    config_m_bcontrol_raster_order : UInt32
    config_resid_diff_host : UInt32
    config_spatial_resid8 : UInt32
    config_resid8_subtraction : UInt32
    config_spatial_host8or9_clipping : UInt32
    config_spatial_resid_interleaved : UInt32
    config_intra_resid_unsigned : UInt32
    config_resid_diff_accelerator : UInt32
    config_host_inverse_scan : UInt32
    config_specific_idct : UInt32
    config4_grouped_coefs : UInt32
    config_min_render_target_buff_count : UInt16
    config_decoder_specific : UInt16
  end
  struct D3D11_AES_CTR_IV
    iv : UInt64
    count : UInt64
  end
  struct D3D11_ENCRYPTED_BLOCK_INFO
    num_encrypted_bytes_at_beginning : UInt32
    num_bytes_in_skip_pattern : UInt32
    num_bytes_in_encrypt_pattern : UInt32
  end
  struct D3D11_VIDEO_DECODER_BUFFER_DESC
    buffer_type : D3D11_VIDEO_DECODER_BUFFER_TYPE
    buffer_index : UInt32
    data_offset : UInt32
    data_size : UInt32
    first_m_baddress : UInt32
    num_m_bs_in_buffer : UInt32
    width : UInt32
    height : UInt32
    stride : UInt32
    reserved_bits : UInt32
    p_iv : Void*
    iv_size : UInt32
    partial_encryption : LibC::BOOL
    encrypted_block_info : D3D11_ENCRYPTED_BLOCK_INFO
  end
  struct D3D11_VIDEO_DECODER_EXTENSION
    function : UInt32
    p_private_input_data : Void*
    private_input_data_size : UInt32
    p_private_output_data : Void*
    private_output_data_size : UInt32
    resource_count : UInt32
    pp_resource_list : ID3D11Resource*
  end
  struct D3D11_VIDEO_PROCESSOR_CAPS
    device_caps : UInt32
    feature_caps : UInt32
    filter_caps : UInt32
    input_format_caps : UInt32
    auto_stream_caps : UInt32
    stereo_caps : UInt32
    rate_conversion_caps_count : UInt32
    max_input_streams : UInt32
    max_stream_states : UInt32
  end
  struct D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS
    past_frames : UInt32
    future_frames : UInt32
    processor_caps : UInt32
    i_telecine_caps : UInt32
    custom_rate_count : UInt32
  end
  struct D3D11_VIDEO_CONTENT_PROTECTION_CAPS
    caps : UInt32
    key_exchange_type_count : UInt32
    block_alignment_size : UInt32
    protected_memory_size : UInt64
  end
  struct D3D11_VIDEO_PROCESSOR_CUSTOM_RATE
    custom_rate : DXGI_RATIONAL
    output_frames : UInt32
    input_interlaced : LibC::BOOL
    input_frames_or_fields : UInt32
  end
  struct D3D11_VIDEO_PROCESSOR_FILTER_RANGE
    minimum : Int32
    maximum : Int32
    default : Int32
    multiplier : Float32
  end
  struct D3D11_VIDEO_PROCESSOR_CONTENT_DESC
    input_frame_format : D3D11_VIDEO_FRAME_FORMAT
    input_frame_rate : DXGI_RATIONAL
    input_width : UInt32
    input_height : UInt32
    output_frame_rate : DXGI_RATIONAL
    output_width : UInt32
    output_height : UInt32
    usage : D3D11_VIDEO_USAGE
  end
  struct D3D11_VIDEO_COLOR_RGBA
    r : Float32
    g : Float32
    b : Float32
    a : Float32
  end
  struct D3D11_VIDEO_COLOR_YCbCrA
    y : Float32
    cb : Float32
    cr : Float32
    a : Float32
  end
  struct D3D11_VIDEO_COLOR
    anonymous : D3D11_VIDEO_COLOR_Anonymous_e__Union
  end
  struct D3D11_VIDEO_PROCESSOR_COLOR_SPACE
    _bitfield : UInt32
  end
  struct D3D11_VIDEO_PROCESSOR_STREAM
    enable : LibC::BOOL
    output_index : UInt32
    input_frame_or_field : UInt32
    past_frames : UInt32
    future_frames : UInt32
    pp_past_surfaces : ID3D11VideoProcessorInputView*
    p_input_surface : ID3D11VideoProcessorInputView
    pp_future_surfaces : ID3D11VideoProcessorInputView*
    pp_past_surfaces_right : ID3D11VideoProcessorInputView*
    p_input_surface_right : ID3D11VideoProcessorInputView
    pp_future_surfaces_right : ID3D11VideoProcessorInputView*
  end
  struct D3D11_OMAC
    omac : UInt8[16]*
  end
  struct D3D11_AUTHENTICATED_QUERY_INPUT
    query_type : Guid
    h_channel : LibC::HANDLE
    sequence_number : UInt32
  end
  struct D3D11_AUTHENTICATED_QUERY_OUTPUT
    omac : D3D11_OMAC
    query_type : Guid
    h_channel : LibC::HANDLE
    sequence_number : UInt32
    return_code : HRESULT
  end
  struct D3D11_AUTHENTICATED_PROTECTION_FLAGS_Flags_e__Struct
    _bitfield : UInt32
  end
  struct D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT
    output : D3D11_AUTHENTICATED_QUERY_OUTPUT
    protection_flags : D3D11_AUTHENTICATED_PROTECTION_FLAGS
  end
  struct D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT
    output : D3D11_AUTHENTICATED_QUERY_OUTPUT
    channel_type : D3D11_AUTHENTICATED_CHANNEL_TYPE
  end
  struct D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT
    output : D3D11_AUTHENTICATED_QUERY_OUTPUT
    device_handle : LibC::HANDLE
  end
  struct D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT
    input : D3D11_AUTHENTICATED_QUERY_INPUT
    decoder_handle : LibC::HANDLE
  end
  struct D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT
    output : D3D11_AUTHENTICATED_QUERY_OUTPUT
    decoder_handle : LibC::HANDLE
    crypto_session_handle : LibC::HANDLE
    device_handle : LibC::HANDLE
  end
  struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT
    output : D3D11_AUTHENTICATED_QUERY_OUTPUT
    restricted_shared_resource_process_count : UInt32
  end
  struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT
    input : D3D11_AUTHENTICATED_QUERY_INPUT
    process_index : UInt32
  end
  struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT
    output : D3D11_AUTHENTICATED_QUERY_OUTPUT
    process_index : UInt32
    process_identifier : D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE
    process_handle : LibC::HANDLE
  end
  struct D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT
    output : D3D11_AUTHENTICATED_QUERY_OUTPUT
    unrestricted_protected_shared_resource_count : UInt32
  end
  struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT
    input : D3D11_AUTHENTICATED_QUERY_INPUT
    device_handle : LibC::HANDLE
    crypto_session_handle : LibC::HANDLE
  end
  struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT
    output : D3D11_AUTHENTICATED_QUERY_OUTPUT
    device_handle : LibC::HANDLE
    crypto_session_handle : LibC::HANDLE
    output_id_count : UInt32
  end
  struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT
    input : D3D11_AUTHENTICATED_QUERY_INPUT
    device_handle : LibC::HANDLE
    crypto_session_handle : LibC::HANDLE
    output_id_index : UInt32
  end
  struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT
    output : D3D11_AUTHENTICATED_QUERY_OUTPUT
    device_handle : LibC::HANDLE
    crypto_session_handle : LibC::HANDLE
    output_id_index : UInt32
    output_id : UInt64
  end
  struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT
    output : D3D11_AUTHENTICATED_QUERY_OUTPUT
    bus_type : D3D11_BUS_TYPE
    accessible_in_contiguous_blocks : LibC::BOOL
    accessible_in_non_contiguous_blocks : LibC::BOOL
  end
  struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT
    output : D3D11_AUTHENTICATED_QUERY_OUTPUT
    encryption_guid_count : UInt32
  end
  struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT
    input : D3D11_AUTHENTICATED_QUERY_INPUT
    encryption_guid_index : UInt32
  end
  struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT
    output : D3D11_AUTHENTICATED_QUERY_OUTPUT
    encryption_guid_index : UInt32
    encryption_guid : Guid
  end
  struct D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT
    output : D3D11_AUTHENTICATED_QUERY_OUTPUT
    encryption_guid : Guid
  end
  struct D3D11_AUTHENTICATED_CONFIGURE_INPUT
    omac : D3D11_OMAC
    configure_type : Guid
    h_channel : LibC::HANDLE
    sequence_number : UInt32
  end
  struct D3D11_AUTHENTICATED_CONFIGURE_OUTPUT
    omac : D3D11_OMAC
    configure_type : Guid
    h_channel : LibC::HANDLE
    sequence_number : UInt32
    return_code : HRESULT
  end
  struct D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT
    parameters : D3D11_AUTHENTICATED_CONFIGURE_INPUT
    start_sequence_query : UInt32
    start_sequence_configure : UInt32
  end
  struct D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT
    parameters : D3D11_AUTHENTICATED_CONFIGURE_INPUT
    protections : D3D11_AUTHENTICATED_PROTECTION_FLAGS
  end
  struct D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT
    parameters : D3D11_AUTHENTICATED_CONFIGURE_INPUT
    decoder_handle : LibC::HANDLE
    crypto_session_handle : LibC::HANDLE
    device_handle : LibC::HANDLE
  end
  struct D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT
    parameters : D3D11_AUTHENTICATED_CONFIGURE_INPUT
    process_type : D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE
    process_handle : LibC::HANDLE
    allow_access : LibC::BOOL
  end
  struct D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT
    parameters : D3D11_AUTHENTICATED_CONFIGURE_INPUT
    encryption_guid : Guid
  end
  struct D3D11_TEX2D_VDOV
    array_slice : UInt32
  end
  struct D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC
    decode_profile : Guid
    view_dimension : D3D11_VDOV_DIMENSION
    anonymous : D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC_Anonymous_e__Union
  end
  struct D3D11_TEX2D_VPIV
    mip_slice : UInt32
    array_slice : UInt32
  end
  struct D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC
    four_cc : UInt32
    view_dimension : D3D11_VPIV_DIMENSION
    anonymous : D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC_Anonymous_e__Union
  end
  struct D3D11_TEX2D_VPOV
    mip_slice : UInt32
  end
  struct D3D11_TEX2D_ARRAY_VPOV
    mip_slice : UInt32
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC
    view_dimension : D3D11_VPOV_DIMENSION
    anonymous : D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC_Anonymous_e__Union
  end
  struct D3D11_MESSAGE
    category : D3D11_MESSAGE_CATEGORY
    severity : D3D11_MESSAGE_SEVERITY
    id : D3D11_MESSAGE_ID
    p_description : UInt8*
    description_byte_length : LibC::UINT_PTR
  end
  struct D3D11_INFO_QUEUE_FILTER_DESC
    num_categories : UInt32
    p_category_list : D3D11_MESSAGE_CATEGORY*
    num_severities : UInt32
    p_severity_list : D3D11_MESSAGE_SEVERITY*
    num_i_ds : UInt32
    p_id_list : D3D11_MESSAGE_ID*
  end
  struct D3D11_INFO_QUEUE_FILTER
    allow_list : D3D11_INFO_QUEUE_FILTER_DESC
    deny_list : D3D11_INFO_QUEUE_FILTER_DESC
  end
  struct D3D11_RENDER_TARGET_BLEND_DESC1
    blend_enable : LibC::BOOL
    logic_op_enable : LibC::BOOL
    src_blend : D3D11_BLEND
    dest_blend : D3D11_BLEND
    blend_op : D3D11_BLEND_OP
    src_blend_alpha : D3D11_BLEND
    dest_blend_alpha : D3D11_BLEND
    blend_op_alpha : D3D11_BLEND_OP
    logic_op : D3D11_LOGIC_OP
    render_target_write_mask : UInt8
  end
  struct D3D11_BLEND_DESC1
    alpha_to_coverage_enable : LibC::BOOL
    independent_blend_enable : LibC::BOOL
    render_target : D3D11_RENDER_TARGET_BLEND_DESC1[8]*
  end
  struct D3D11_RASTERIZER_DESC1
    fill_mode : D3D11_FILL_MODE
    cull_mode : D3D11_CULL_MODE
    front_counter_clockwise : LibC::BOOL
    depth_bias : Int32
    depth_bias_clamp : Float32
    slope_scaled_depth_bias : Float32
    depth_clip_enable : LibC::BOOL
    scissor_enable : LibC::BOOL
    multisample_enable : LibC::BOOL
    antialiased_line_enable : LibC::BOOL
    forced_sample_count : UInt32
  end
  struct D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK
    clear_size : UInt32
    encrypted_size : UInt32
  end
  struct D3D11_VIDEO_DECODER_BUFFER_DESC1
    buffer_type : D3D11_VIDEO_DECODER_BUFFER_TYPE
    data_offset : UInt32
    data_size : UInt32
    p_iv : Void*
    iv_size : UInt32
    p_sub_sample_mapping_block : D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK*
    sub_sample_mapping_count : UInt32
  end
  struct D3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION
    p_crypto_session : ID3D11CryptoSession
    blob_size : UInt32
    p_blob : Void*
    p_key_info_id : Guid*
    private_data_size : UInt32
    p_private_data : Void*
  end
  struct D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT
    enable : LibC::BOOL
    width : UInt32
    height : UInt32
    format : DXGI_FORMAT
  end
  struct D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA
    private_data_size : UInt32
    hw_protection_data_size : UInt32
    pb_input : UInt8[4]*
  end
  struct D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA
    private_data_size : UInt32
    max_hw_protection_data_size : UInt32
    hw_protection_data_size : UInt32
    transport_time : UInt64
    execution_time : UInt64
    pb_output : UInt8[4]*
  end
  struct D3D11_KEY_EXCHANGE_HW_PROTECTION_DATA
    hw_protection_function_id : UInt32
    p_input_data : D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA*
    p_output_data : D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA*
    status : HRESULT
  end
  struct D3D11_VIDEO_SAMPLE_DESC
    width : UInt32
    height : UInt32
    format : DXGI_FORMAT
    color_space : DXGI_COLOR_SPACE_TYPE
  end
  struct D3D11_TILED_RESOURCE_COORDINATE
    x : UInt32
    y : UInt32
    z : UInt32
    subresource : UInt32
  end
  struct D3D11_TILE_REGION_SIZE
    num_tiles : UInt32
    b_use_box : LibC::BOOL
    width : UInt32
    height : UInt16
    depth : UInt16
  end
  struct D3D11_SUBRESOURCE_TILING
    width_in_tiles : UInt32
    height_in_tiles : UInt16
    depth_in_tiles : UInt16
    start_tile_index_in_overall_resource : UInt32
  end
  struct D3D11_TILE_SHAPE
    width_in_texels : UInt32
    height_in_texels : UInt32
    depth_in_texels : UInt32
  end
  struct D3D11_PACKED_MIP_DESC
    num_standard_mips : UInt8
    num_packed_mips : UInt8
    num_tiles_for_packed_mips : UInt32
    start_tile_index_in_overall_resource : UInt32
  end
  struct D3D11_TEXTURE2D_DESC1
    width : UInt32
    height : UInt32
    mip_levels : UInt32
    array_size : UInt32
    format : DXGI_FORMAT
    sample_desc : DXGI_SAMPLE_DESC
    usage : D3D11_USAGE
    bind_flags : UInt32
    cpu_access_flags : UInt32
    misc_flags : UInt32
    texture_layout : D3D11_TEXTURE_LAYOUT
  end
  struct D3D11_TEXTURE3D_DESC1
    width : UInt32
    height : UInt32
    depth : UInt32
    mip_levels : UInt32
    format : DXGI_FORMAT
    usage : D3D11_USAGE
    bind_flags : UInt32
    cpu_access_flags : UInt32
    misc_flags : UInt32
    texture_layout : D3D11_TEXTURE_LAYOUT
  end
  struct D3D11_RASTERIZER_DESC2
    fill_mode : D3D11_FILL_MODE
    cull_mode : D3D11_CULL_MODE
    front_counter_clockwise : LibC::BOOL
    depth_bias : Int32
    depth_bias_clamp : Float32
    slope_scaled_depth_bias : Float32
    depth_clip_enable : LibC::BOOL
    scissor_enable : LibC::BOOL
    multisample_enable : LibC::BOOL
    antialiased_line_enable : LibC::BOOL
    forced_sample_count : UInt32
    conservative_raster : D3D11_CONSERVATIVE_RASTERIZATION_MODE
  end
  struct D3D11_TEX2D_SRV1
    most_detailed_mip : UInt32
    mip_levels : UInt32
    plane_slice : UInt32
  end
  struct D3D11_TEX2D_ARRAY_SRV1
    most_detailed_mip : UInt32
    mip_levels : UInt32
    first_array_slice : UInt32
    array_size : UInt32
    plane_slice : UInt32
  end
  struct D3D11_SHADER_RESOURCE_VIEW_DESC1
    format : DXGI_FORMAT
    view_dimension : D3D_SRV_DIMENSION
    anonymous : D3D11_SHADER_RESOURCE_VIEW_DESC1_Anonymous_e__Union
  end
  struct D3D11_TEX2D_RTV1
    mip_slice : UInt32
    plane_slice : UInt32
  end
  struct D3D11_TEX2D_ARRAY_RTV1
    mip_slice : UInt32
    first_array_slice : UInt32
    array_size : UInt32
    plane_slice : UInt32
  end
  struct D3D11_RENDER_TARGET_VIEW_DESC1
    format : DXGI_FORMAT
    view_dimension : D3D11_RTV_DIMENSION
    anonymous : D3D11_RENDER_TARGET_VIEW_DESC1_Anonymous_e__Union
  end
  struct D3D11_TEX2D_UAV1
    mip_slice : UInt32
    plane_slice : UInt32
  end
  struct D3D11_TEX2D_ARRAY_UAV1
    mip_slice : UInt32
    first_array_slice : UInt32
    array_size : UInt32
    plane_slice : UInt32
  end
  struct D3D11_UNORDERED_ACCESS_VIEW_DESC1
    format : DXGI_FORMAT
    view_dimension : D3D11_UAV_DIMENSION
    anonymous : D3D11_UNORDERED_ACCESS_VIEW_DESC1_Anonymous_e__Union
  end
  struct D3D11_QUERY_DESC1
    query : D3D11_QUERY
    misc_flags : UInt32
    context_type : D3D11_CONTEXT_TYPE
  end
  struct D3D11_FEATURE_DATA_VIDEO_DECODER_HISTOGRAM
    decoder_desc : D3D11_VIDEO_DECODER_DESC
    components : D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS
    bin_count : UInt32
    counter_bit_depth : UInt32
  end
  struct D3D11_VIDEO_DECODER_BUFFER_DESC2
    buffer_type : D3D11_VIDEO_DECODER_BUFFER_TYPE
    data_offset : UInt32
    data_size : UInt32
    p_iv : Void*
    iv_size : UInt32
    p_sub_sample_mapping_block : D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK*
    sub_sample_mapping_count : UInt32
    c_blocks_stripe_encrypted : UInt32
    c_blocks_stripe_clear : UInt32
  end
  struct D3D11_FEATURE_DATA_D3D11_OPTIONS4
    extended_nv12_shared_texture_supported : LibC::BOOL
  end
  struct D3D11_SIGNATURE_PARAMETER_DESC
    semantic_name : PSTR
    semantic_index : UInt32
    register : UInt32
    system_value_type : D3D_NAME
    component_type : D3D_REGISTER_COMPONENT_TYPE
    mask : UInt8
    read_write_mask : UInt8
    stream : UInt32
    min_precision : D3D_MIN_PRECISION
  end
  struct D3D11_SHADER_BUFFER_DESC
    name : PSTR
    type : D3D_CBUFFER_TYPE
    variables : UInt32
    size : UInt32
    u_flags : UInt32
  end
  struct D3D11_SHADER_VARIABLE_DESC
    name : PSTR
    start_offset : UInt32
    size : UInt32
    u_flags : UInt32
    default_value : Void*
    start_texture : UInt32
    texture_size : UInt32
    start_sampler : UInt32
    sampler_size : UInt32
  end
  struct D3D11_SHADER_TYPE_DESC
    class_ : D3D_SHADER_VARIABLE_CLASS
    type : D3D_SHADER_VARIABLE_TYPE
    rows : UInt32
    columns : UInt32
    elements : UInt32
    members : UInt32
    offset : UInt32
    name : PSTR
  end
  struct D3D11_SHADER_DESC
    version : UInt32
    creator : PSTR
    flags : UInt32
    constant_buffers : UInt32
    bound_resources : UInt32
    input_parameters : UInt32
    output_parameters : UInt32
    instruction_count : UInt32
    temp_register_count : UInt32
    temp_array_count : UInt32
    def_count : UInt32
    dcl_count : UInt32
    texture_normal_instructions : UInt32
    texture_load_instructions : UInt32
    texture_comp_instructions : UInt32
    texture_bias_instructions : UInt32
    texture_gradient_instructions : UInt32
    float_instruction_count : UInt32
    int_instruction_count : UInt32
    uint_instruction_count : UInt32
    static_flow_control_count : UInt32
    dynamic_flow_control_count : UInt32
    macro_instruction_count : UInt32
    array_instruction_count : UInt32
    cut_instruction_count : UInt32
    emit_instruction_count : UInt32
    gs_output_topology : D3D_PRIMITIVE_TOPOLOGY
    gs_max_output_vertex_count : UInt32
    input_primitive : D3D_PRIMITIVE
    patch_constant_parameters : UInt32
    c_gs_instance_count : UInt32
    c_control_points : UInt32
    hs_output_primitive : D3D_TESSELLATOR_OUTPUT_PRIMITIVE
    hs_partitioning : D3D_TESSELLATOR_PARTITIONING
    tessellator_domain : D3D_TESSELLATOR_DOMAIN
    c_barrier_instructions : UInt32
    c_interlocked_instructions : UInt32
    c_texture_store_instructions : UInt32
  end
  struct D3D11_SHADER_INPUT_BIND_DESC
    name : PSTR
    type : D3D_SHADER_INPUT_TYPE
    bind_point : UInt32
    bind_count : UInt32
    u_flags : UInt32
    return_type : D3D_RESOURCE_RETURN_TYPE
    dimension : D3D_SRV_DIMENSION
    num_samples : UInt32
  end
  struct D3D11_LIBRARY_DESC
    creator : PSTR
    flags : UInt32
    function_count : UInt32
  end
  struct D3D11_FUNCTION_DESC
    version : UInt32
    creator : PSTR
    flags : UInt32
    constant_buffers : UInt32
    bound_resources : UInt32
    instruction_count : UInt32
    temp_register_count : UInt32
    temp_array_count : UInt32
    def_count : UInt32
    dcl_count : UInt32
    texture_normal_instructions : UInt32
    texture_load_instructions : UInt32
    texture_comp_instructions : UInt32
    texture_bias_instructions : UInt32
    texture_gradient_instructions : UInt32
    float_instruction_count : UInt32
    int_instruction_count : UInt32
    uint_instruction_count : UInt32
    static_flow_control_count : UInt32
    dynamic_flow_control_count : UInt32
    macro_instruction_count : UInt32
    array_instruction_count : UInt32
    mov_instruction_count : UInt32
    movc_instruction_count : UInt32
    conversion_instruction_count : UInt32
    bitwise_instruction_count : UInt32
    min_feature_level : D3D_FEATURE_LEVEL
    required_feature_flags : UInt64
    name : PSTR
    function_parameter_count : Int32
    has_return : LibC::BOOL
    has10_level9_vertex_shader : LibC::BOOL
    has10_level9_pixel_shader : LibC::BOOL
  end
  struct D3D11_PARAMETER_DESC
    name : PSTR
    semantic_name : PSTR
    type : D3D_SHADER_VARIABLE_TYPE
    class_ : D3D_SHADER_VARIABLE_CLASS
    rows : UInt32
    columns : UInt32
    interpolation_mode : D3D_INTERPOLATION_MODE
    flags : D3D_PARAMETER_FLAGS
    first_in_register : UInt32
    first_in_component : UInt32
    first_out_register : UInt32
    first_out_component : UInt32
  end
  struct D3D11_VERTEX_SHADER_TRACE_DESC
    invocation : UInt64
  end
  struct D3D11_HULL_SHADER_TRACE_DESC
    invocation : UInt64
  end
  struct D3D11_DOMAIN_SHADER_TRACE_DESC
    invocation : UInt64
  end
  struct D3D11_GEOMETRY_SHADER_TRACE_DESC
    invocation : UInt64
  end
  struct D3D11_PIXEL_SHADER_TRACE_DESC
    invocation : UInt64
    x : Int32
    y : Int32
    sample_mask : UInt64
  end
  struct D3D11_COMPUTE_SHADER_TRACE_DESC
    invocation : UInt64
    thread_id_in_group : UInt32[3]*
    thread_group_id : UInt32[3]*
  end
  struct D3D11_SHADER_TRACE_DESC
    type : D3D11_SHADER_TYPE
    flags : UInt32
    anonymous : D3D11_SHADER_TRACE_DESC_Anonymous_e__Union
  end
  struct D3D11_TRACE_STATS
    trace_desc : D3D11_SHADER_TRACE_DESC
    num_invocations_in_stamp : UInt8
    target_stamp_index : UInt8
    num_trace_steps : UInt32
    input_mask : UInt8[32]*
    output_mask : UInt8[32]*
    num_temps : UInt16
    max_indexable_temp_index : UInt16
    indexable_temp_size : UInt16[4096]*
    immediate_constant_buffer_size : UInt16
    pixel_position : UInt32[8]*
    pixel_coverage_mask : UInt64[4]*
    pixel_discarded_mask : UInt64[4]*
    pixel_coverage_mask_after_shader : UInt64[4]*
    pixel_coverage_mask_after_a2_c_sample_mask : UInt64[4]*
    pixel_coverage_mask_after_a2_c_sample_mask_depth : UInt64[4]*
    pixel_coverage_mask_after_a2_c_sample_mask_depth_stencil : UInt64[4]*
    ps_outputs_depth : LibC::BOOL
    ps_outputs_mask : LibC::BOOL
    gs_input_primitive : D3D11_TRACE_GS_INPUT_PRIMITIVE
    gs_inputs_primitive_id : LibC::BOOL
    hs_output_patch_constant_mask : UInt8[32]*
    ds_input_patch_constant_mask : UInt8[32]*
  end
  struct D3D11_TRACE_VALUE
    bits : UInt32[4]*
    valid_mask : UInt8
  end
  struct D3D11_TRACE_REGISTER
    reg_type : D3D11_TRACE_REGISTER_TYPE
    anonymous : D3D11_TRACE_REGISTER_Anonymous_e__Union
    operand_index : UInt8
    flags : UInt8
  end
  struct D3D11_TRACE_STEP
    id : UInt32
    instruction_active : LibC::BOOL
    num_registers_written : UInt8
    num_registers_read : UInt8
    misc_operations : UInt16
    opcode_type : UInt32
    current_global_cycle : UInt64
  end
  struct D3DX11_FFT_DESC
    num_dimensions : UInt32
    element_lengths : UInt32[32]*
    dimension_mask : UInt32
    type : D3DX11_FFT_DATA_TYPE
  end
  struct D3DX11_FFT_BUFFER_INFO
    num_temp_buffer_sizes : UInt32
    temp_buffer_float_sizes : UInt32[4]*
    num_precompute_buffer_sizes : UInt32
    precompute_buffer_float_sizes : UInt32[4]*
  end


  struct ID3D11DeviceChildVTbl
    query_interface : Proc(ID3D11DeviceChild*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11DeviceChild*, UInt32)
    release : Proc(ID3D11DeviceChild*, UInt32)
    get_device : Proc(ID3D11DeviceChild*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11DeviceChild*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11DeviceChild*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11DeviceChild*, Guid*, IUnknown, HRESULT)
  end

  ID3D11DeviceChild_GUID = "1841e5c8-16b0-489b-bcc8-44cfb0d5deae"
  IID_ID3D11DeviceChild = LibC::GUID.new(0x1841e5c8_u32, 0x16b0_u16, 0x489b_u16, StaticArray[0xbc_u8, 0xc8_u8, 0x44_u8, 0xcf_u8, 0xb0_u8, 0xd5_u8, 0xde_u8, 0xae_u8])
  struct ID3D11DeviceChild
    lpVtbl : ID3D11DeviceChildVTbl*
  end

  struct ID3D11DepthStencilStateVTbl
    query_interface : Proc(ID3D11DepthStencilState*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11DepthStencilState*, UInt32)
    release : Proc(ID3D11DepthStencilState*, UInt32)
    get_device : Proc(ID3D11DepthStencilState*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11DepthStencilState*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11DepthStencilState*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11DepthStencilState*, Guid*, IUnknown, HRESULT)
    get_desc : Proc(ID3D11DepthStencilState*, D3D11_DEPTH_STENCIL_DESC*, Void)
  end

  ID3D11DepthStencilState_GUID = "03823efb-8d8f-4e1c-9aa2-f64bb2cbfdf1"
  IID_ID3D11DepthStencilState = LibC::GUID.new(0x3823efb_u32, 0x8d8f_u16, 0x4e1c_u16, StaticArray[0x9a_u8, 0xa2_u8, 0xf6_u8, 0x4b_u8, 0xb2_u8, 0xcb_u8, 0xfd_u8, 0xf1_u8])
  struct ID3D11DepthStencilState
    lpVtbl : ID3D11DepthStencilStateVTbl*
  end

  struct ID3D11BlendStateVTbl
    query_interface : Proc(ID3D11BlendState*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11BlendState*, UInt32)
    release : Proc(ID3D11BlendState*, UInt32)
    get_device : Proc(ID3D11BlendState*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11BlendState*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11BlendState*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11BlendState*, Guid*, IUnknown, HRESULT)
    get_desc : Proc(ID3D11BlendState*, D3D11_BLEND_DESC*, Void)
  end

  ID3D11BlendState_GUID = "75b68faa-347d-4159-8f45-a0640f01cd9a"
  IID_ID3D11BlendState = LibC::GUID.new(0x75b68faa_u32, 0x347d_u16, 0x4159_u16, StaticArray[0x8f_u8, 0x45_u8, 0xa0_u8, 0x64_u8, 0xf_u8, 0x1_u8, 0xcd_u8, 0x9a_u8])
  struct ID3D11BlendState
    lpVtbl : ID3D11BlendStateVTbl*
  end

  struct ID3D11RasterizerStateVTbl
    query_interface : Proc(ID3D11RasterizerState*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11RasterizerState*, UInt32)
    release : Proc(ID3D11RasterizerState*, UInt32)
    get_device : Proc(ID3D11RasterizerState*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11RasterizerState*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11RasterizerState*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11RasterizerState*, Guid*, IUnknown, HRESULT)
    get_desc : Proc(ID3D11RasterizerState*, D3D11_RASTERIZER_DESC*, Void)
  end

  ID3D11RasterizerState_GUID = "9bb4ab81-ab1a-4d8f-b506-fc04200b6ee7"
  IID_ID3D11RasterizerState = LibC::GUID.new(0x9bb4ab81_u32, 0xab1a_u16, 0x4d8f_u16, StaticArray[0xb5_u8, 0x6_u8, 0xfc_u8, 0x4_u8, 0x20_u8, 0xb_u8, 0x6e_u8, 0xe7_u8])
  struct ID3D11RasterizerState
    lpVtbl : ID3D11RasterizerStateVTbl*
  end

  struct ID3D11ResourceVTbl
    query_interface : Proc(ID3D11Resource*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11Resource*, UInt32)
    release : Proc(ID3D11Resource*, UInt32)
    get_device : Proc(ID3D11Resource*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11Resource*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11Resource*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11Resource*, Guid*, IUnknown, HRESULT)
    get_type : Proc(ID3D11Resource*, D3D11_RESOURCE_DIMENSION*, Void)
    set_eviction_priority : Proc(ID3D11Resource*, UInt32, Void)
    get_eviction_priority : Proc(ID3D11Resource*, UInt32)
  end

  ID3D11Resource_GUID = "dc8e63f3-d12b-4952-b47b-5e45026a862d"
  IID_ID3D11Resource = LibC::GUID.new(0xdc8e63f3_u32, 0xd12b_u16, 0x4952_u16, StaticArray[0xb4_u8, 0x7b_u8, 0x5e_u8, 0x45_u8, 0x2_u8, 0x6a_u8, 0x86_u8, 0x2d_u8])
  struct ID3D11Resource
    lpVtbl : ID3D11ResourceVTbl*
  end

  struct ID3D11BufferVTbl
    query_interface : Proc(ID3D11Buffer*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11Buffer*, UInt32)
    release : Proc(ID3D11Buffer*, UInt32)
    get_device : Proc(ID3D11Buffer*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11Buffer*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11Buffer*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11Buffer*, Guid*, IUnknown, HRESULT)
    get_type : Proc(ID3D11Buffer*, D3D11_RESOURCE_DIMENSION*, Void)
    set_eviction_priority : Proc(ID3D11Buffer*, UInt32, Void)
    get_eviction_priority : Proc(ID3D11Buffer*, UInt32)
    get_desc : Proc(ID3D11Buffer*, D3D11_BUFFER_DESC*, Void)
  end

  ID3D11Buffer_GUID = "48570b85-d1ee-4fcd-a250-eb350722b037"
  IID_ID3D11Buffer = LibC::GUID.new(0x48570b85_u32, 0xd1ee_u16, 0x4fcd_u16, StaticArray[0xa2_u8, 0x50_u8, 0xeb_u8, 0x35_u8, 0x7_u8, 0x22_u8, 0xb0_u8, 0x37_u8])
  struct ID3D11Buffer
    lpVtbl : ID3D11BufferVTbl*
  end

  struct ID3D11Texture1DVTbl
    query_interface : Proc(ID3D11Texture1D*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11Texture1D*, UInt32)
    release : Proc(ID3D11Texture1D*, UInt32)
    get_device : Proc(ID3D11Texture1D*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11Texture1D*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11Texture1D*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11Texture1D*, Guid*, IUnknown, HRESULT)
    get_type : Proc(ID3D11Texture1D*, D3D11_RESOURCE_DIMENSION*, Void)
    set_eviction_priority : Proc(ID3D11Texture1D*, UInt32, Void)
    get_eviction_priority : Proc(ID3D11Texture1D*, UInt32)
    get_desc : Proc(ID3D11Texture1D*, D3D11_TEXTURE1D_DESC*, Void)
  end

  ID3D11Texture1D_GUID = "f8fb5c27-c6b3-4f75-a4c8-439af2ef564c"
  IID_ID3D11Texture1D = LibC::GUID.new(0xf8fb5c27_u32, 0xc6b3_u16, 0x4f75_u16, StaticArray[0xa4_u8, 0xc8_u8, 0x43_u8, 0x9a_u8, 0xf2_u8, 0xef_u8, 0x56_u8, 0x4c_u8])
  struct ID3D11Texture1D
    lpVtbl : ID3D11Texture1DVTbl*
  end

  struct ID3D11Texture2DVTbl
    query_interface : Proc(ID3D11Texture2D*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11Texture2D*, UInt32)
    release : Proc(ID3D11Texture2D*, UInt32)
    get_device : Proc(ID3D11Texture2D*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11Texture2D*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11Texture2D*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11Texture2D*, Guid*, IUnknown, HRESULT)
    get_type : Proc(ID3D11Texture2D*, D3D11_RESOURCE_DIMENSION*, Void)
    set_eviction_priority : Proc(ID3D11Texture2D*, UInt32, Void)
    get_eviction_priority : Proc(ID3D11Texture2D*, UInt32)
    get_desc : Proc(ID3D11Texture2D*, D3D11_TEXTURE2D_DESC*, Void)
  end

  ID3D11Texture2D_GUID = "6f15aaf2-d208-4e89-9ab4-489535d34f9c"
  IID_ID3D11Texture2D = LibC::GUID.new(0x6f15aaf2_u32, 0xd208_u16, 0x4e89_u16, StaticArray[0x9a_u8, 0xb4_u8, 0x48_u8, 0x95_u8, 0x35_u8, 0xd3_u8, 0x4f_u8, 0x9c_u8])
  struct ID3D11Texture2D
    lpVtbl : ID3D11Texture2DVTbl*
  end

  struct ID3D11Texture3DVTbl
    query_interface : Proc(ID3D11Texture3D*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11Texture3D*, UInt32)
    release : Proc(ID3D11Texture3D*, UInt32)
    get_device : Proc(ID3D11Texture3D*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11Texture3D*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11Texture3D*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11Texture3D*, Guid*, IUnknown, HRESULT)
    get_type : Proc(ID3D11Texture3D*, D3D11_RESOURCE_DIMENSION*, Void)
    set_eviction_priority : Proc(ID3D11Texture3D*, UInt32, Void)
    get_eviction_priority : Proc(ID3D11Texture3D*, UInt32)
    get_desc : Proc(ID3D11Texture3D*, D3D11_TEXTURE3D_DESC*, Void)
  end

  ID3D11Texture3D_GUID = "037e866e-f56d-4357-a8af-9dabbe6e250e"
  IID_ID3D11Texture3D = LibC::GUID.new(0x37e866e_u32, 0xf56d_u16, 0x4357_u16, StaticArray[0xa8_u8, 0xaf_u8, 0x9d_u8, 0xab_u8, 0xbe_u8, 0x6e_u8, 0x25_u8, 0xe_u8])
  struct ID3D11Texture3D
    lpVtbl : ID3D11Texture3DVTbl*
  end

  struct ID3D11ViewVTbl
    query_interface : Proc(ID3D11View*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11View*, UInt32)
    release : Proc(ID3D11View*, UInt32)
    get_device : Proc(ID3D11View*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11View*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11View*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11View*, Guid*, IUnknown, HRESULT)
    get_resource : Proc(ID3D11View*, ID3D11Resource*, Void)
  end

  ID3D11View_GUID = "839d1216-bb2e-412b-b7f4-a9dbebe08ed1"
  IID_ID3D11View = LibC::GUID.new(0x839d1216_u32, 0xbb2e_u16, 0x412b_u16, StaticArray[0xb7_u8, 0xf4_u8, 0xa9_u8, 0xdb_u8, 0xeb_u8, 0xe0_u8, 0x8e_u8, 0xd1_u8])
  struct ID3D11View
    lpVtbl : ID3D11ViewVTbl*
  end

  struct ID3D11ShaderResourceViewVTbl
    query_interface : Proc(ID3D11ShaderResourceView*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11ShaderResourceView*, UInt32)
    release : Proc(ID3D11ShaderResourceView*, UInt32)
    get_device : Proc(ID3D11ShaderResourceView*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11ShaderResourceView*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11ShaderResourceView*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11ShaderResourceView*, Guid*, IUnknown, HRESULT)
    get_resource : Proc(ID3D11ShaderResourceView*, ID3D11Resource*, Void)
    get_desc : Proc(ID3D11ShaderResourceView*, D3D11_SHADER_RESOURCE_VIEW_DESC*, Void)
  end

  ID3D11ShaderResourceView_GUID = "b0e06fe0-8192-4e1a-b1ca-36d7414710b2"
  IID_ID3D11ShaderResourceView = LibC::GUID.new(0xb0e06fe0_u32, 0x8192_u16, 0x4e1a_u16, StaticArray[0xb1_u8, 0xca_u8, 0x36_u8, 0xd7_u8, 0x41_u8, 0x47_u8, 0x10_u8, 0xb2_u8])
  struct ID3D11ShaderResourceView
    lpVtbl : ID3D11ShaderResourceViewVTbl*
  end

  struct ID3D11RenderTargetViewVTbl
    query_interface : Proc(ID3D11RenderTargetView*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11RenderTargetView*, UInt32)
    release : Proc(ID3D11RenderTargetView*, UInt32)
    get_device : Proc(ID3D11RenderTargetView*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11RenderTargetView*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11RenderTargetView*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11RenderTargetView*, Guid*, IUnknown, HRESULT)
    get_resource : Proc(ID3D11RenderTargetView*, ID3D11Resource*, Void)
    get_desc : Proc(ID3D11RenderTargetView*, D3D11_RENDER_TARGET_VIEW_DESC*, Void)
  end

  ID3D11RenderTargetView_GUID = "dfdba067-0b8d-4865-875b-d7b4516cc164"
  IID_ID3D11RenderTargetView = LibC::GUID.new(0xdfdba067_u32, 0xb8d_u16, 0x4865_u16, StaticArray[0x87_u8, 0x5b_u8, 0xd7_u8, 0xb4_u8, 0x51_u8, 0x6c_u8, 0xc1_u8, 0x64_u8])
  struct ID3D11RenderTargetView
    lpVtbl : ID3D11RenderTargetViewVTbl*
  end

  struct ID3D11DepthStencilViewVTbl
    query_interface : Proc(ID3D11DepthStencilView*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11DepthStencilView*, UInt32)
    release : Proc(ID3D11DepthStencilView*, UInt32)
    get_device : Proc(ID3D11DepthStencilView*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11DepthStencilView*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11DepthStencilView*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11DepthStencilView*, Guid*, IUnknown, HRESULT)
    get_resource : Proc(ID3D11DepthStencilView*, ID3D11Resource*, Void)
    get_desc : Proc(ID3D11DepthStencilView*, D3D11_DEPTH_STENCIL_VIEW_DESC*, Void)
  end

  ID3D11DepthStencilView_GUID = "9fdac92a-1876-48c3-afad-25b94f84a9b6"
  IID_ID3D11DepthStencilView = LibC::GUID.new(0x9fdac92a_u32, 0x1876_u16, 0x48c3_u16, StaticArray[0xaf_u8, 0xad_u8, 0x25_u8, 0xb9_u8, 0x4f_u8, 0x84_u8, 0xa9_u8, 0xb6_u8])
  struct ID3D11DepthStencilView
    lpVtbl : ID3D11DepthStencilViewVTbl*
  end

  struct ID3D11UnorderedAccessViewVTbl
    query_interface : Proc(ID3D11UnorderedAccessView*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11UnorderedAccessView*, UInt32)
    release : Proc(ID3D11UnorderedAccessView*, UInt32)
    get_device : Proc(ID3D11UnorderedAccessView*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11UnorderedAccessView*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11UnorderedAccessView*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11UnorderedAccessView*, Guid*, IUnknown, HRESULT)
    get_resource : Proc(ID3D11UnorderedAccessView*, ID3D11Resource*, Void)
    get_desc : Proc(ID3D11UnorderedAccessView*, D3D11_UNORDERED_ACCESS_VIEW_DESC*, Void)
  end

  ID3D11UnorderedAccessView_GUID = "28acf509-7f5c-48f6-8611-f316010a6380"
  IID_ID3D11UnorderedAccessView = LibC::GUID.new(0x28acf509_u32, 0x7f5c_u16, 0x48f6_u16, StaticArray[0x86_u8, 0x11_u8, 0xf3_u8, 0x16_u8, 0x1_u8, 0xa_u8, 0x63_u8, 0x80_u8])
  struct ID3D11UnorderedAccessView
    lpVtbl : ID3D11UnorderedAccessViewVTbl*
  end

  struct ID3D11VertexShaderVTbl
    query_interface : Proc(ID3D11VertexShader*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11VertexShader*, UInt32)
    release : Proc(ID3D11VertexShader*, UInt32)
    get_device : Proc(ID3D11VertexShader*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11VertexShader*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11VertexShader*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11VertexShader*, Guid*, IUnknown, HRESULT)
  end

  ID3D11VertexShader_GUID = "3b301d64-d678-4289-8897-22f8928b72f3"
  IID_ID3D11VertexShader = LibC::GUID.new(0x3b301d64_u32, 0xd678_u16, 0x4289_u16, StaticArray[0x88_u8, 0x97_u8, 0x22_u8, 0xf8_u8, 0x92_u8, 0x8b_u8, 0x72_u8, 0xf3_u8])
  struct ID3D11VertexShader
    lpVtbl : ID3D11VertexShaderVTbl*
  end

  struct ID3D11HullShaderVTbl
    query_interface : Proc(ID3D11HullShader*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11HullShader*, UInt32)
    release : Proc(ID3D11HullShader*, UInt32)
    get_device : Proc(ID3D11HullShader*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11HullShader*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11HullShader*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11HullShader*, Guid*, IUnknown, HRESULT)
  end

  ID3D11HullShader_GUID = "8e5c6061-628a-4c8e-8264-bbe45cb3d5dd"
  IID_ID3D11HullShader = LibC::GUID.new(0x8e5c6061_u32, 0x628a_u16, 0x4c8e_u16, StaticArray[0x82_u8, 0x64_u8, 0xbb_u8, 0xe4_u8, 0x5c_u8, 0xb3_u8, 0xd5_u8, 0xdd_u8])
  struct ID3D11HullShader
    lpVtbl : ID3D11HullShaderVTbl*
  end

  struct ID3D11DomainShaderVTbl
    query_interface : Proc(ID3D11DomainShader*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11DomainShader*, UInt32)
    release : Proc(ID3D11DomainShader*, UInt32)
    get_device : Proc(ID3D11DomainShader*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11DomainShader*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11DomainShader*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11DomainShader*, Guid*, IUnknown, HRESULT)
  end

  ID3D11DomainShader_GUID = "f582c508-0f36-490c-9977-31eece268cfa"
  IID_ID3D11DomainShader = LibC::GUID.new(0xf582c508_u32, 0xf36_u16, 0x490c_u16, StaticArray[0x99_u8, 0x77_u8, 0x31_u8, 0xee_u8, 0xce_u8, 0x26_u8, 0x8c_u8, 0xfa_u8])
  struct ID3D11DomainShader
    lpVtbl : ID3D11DomainShaderVTbl*
  end

  struct ID3D11GeometryShaderVTbl
    query_interface : Proc(ID3D11GeometryShader*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11GeometryShader*, UInt32)
    release : Proc(ID3D11GeometryShader*, UInt32)
    get_device : Proc(ID3D11GeometryShader*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11GeometryShader*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11GeometryShader*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11GeometryShader*, Guid*, IUnknown, HRESULT)
  end

  ID3D11GeometryShader_GUID = "38325b96-effb-4022-ba02-2e795b70275c"
  IID_ID3D11GeometryShader = LibC::GUID.new(0x38325b96_u32, 0xeffb_u16, 0x4022_u16, StaticArray[0xba_u8, 0x2_u8, 0x2e_u8, 0x79_u8, 0x5b_u8, 0x70_u8, 0x27_u8, 0x5c_u8])
  struct ID3D11GeometryShader
    lpVtbl : ID3D11GeometryShaderVTbl*
  end

  struct ID3D11PixelShaderVTbl
    query_interface : Proc(ID3D11PixelShader*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11PixelShader*, UInt32)
    release : Proc(ID3D11PixelShader*, UInt32)
    get_device : Proc(ID3D11PixelShader*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11PixelShader*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11PixelShader*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11PixelShader*, Guid*, IUnknown, HRESULT)
  end

  ID3D11PixelShader_GUID = "ea82e40d-51dc-4f33-93d4-db7c9125ae8c"
  IID_ID3D11PixelShader = LibC::GUID.new(0xea82e40d_u32, 0x51dc_u16, 0x4f33_u16, StaticArray[0x93_u8, 0xd4_u8, 0xdb_u8, 0x7c_u8, 0x91_u8, 0x25_u8, 0xae_u8, 0x8c_u8])
  struct ID3D11PixelShader
    lpVtbl : ID3D11PixelShaderVTbl*
  end

  struct ID3D11ComputeShaderVTbl
    query_interface : Proc(ID3D11ComputeShader*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11ComputeShader*, UInt32)
    release : Proc(ID3D11ComputeShader*, UInt32)
    get_device : Proc(ID3D11ComputeShader*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11ComputeShader*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11ComputeShader*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11ComputeShader*, Guid*, IUnknown, HRESULT)
  end

  ID3D11ComputeShader_GUID = "4f5b196e-c2bd-495e-bd01-1fded38e4969"
  IID_ID3D11ComputeShader = LibC::GUID.new(0x4f5b196e_u32, 0xc2bd_u16, 0x495e_u16, StaticArray[0xbd_u8, 0x1_u8, 0x1f_u8, 0xde_u8, 0xd3_u8, 0x8e_u8, 0x49_u8, 0x69_u8])
  struct ID3D11ComputeShader
    lpVtbl : ID3D11ComputeShaderVTbl*
  end

  struct ID3D11InputLayoutVTbl
    query_interface : Proc(ID3D11InputLayout*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11InputLayout*, UInt32)
    release : Proc(ID3D11InputLayout*, UInt32)
    get_device : Proc(ID3D11InputLayout*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11InputLayout*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11InputLayout*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11InputLayout*, Guid*, IUnknown, HRESULT)
  end

  ID3D11InputLayout_GUID = "e4819ddc-4cf0-4025-bd26-5de82a3e07b7"
  IID_ID3D11InputLayout = LibC::GUID.new(0xe4819ddc_u32, 0x4cf0_u16, 0x4025_u16, StaticArray[0xbd_u8, 0x26_u8, 0x5d_u8, 0xe8_u8, 0x2a_u8, 0x3e_u8, 0x7_u8, 0xb7_u8])
  struct ID3D11InputLayout
    lpVtbl : ID3D11InputLayoutVTbl*
  end

  struct ID3D11SamplerStateVTbl
    query_interface : Proc(ID3D11SamplerState*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11SamplerState*, UInt32)
    release : Proc(ID3D11SamplerState*, UInt32)
    get_device : Proc(ID3D11SamplerState*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11SamplerState*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11SamplerState*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11SamplerState*, Guid*, IUnknown, HRESULT)
    get_desc : Proc(ID3D11SamplerState*, D3D11_SAMPLER_DESC*, Void)
  end

  ID3D11SamplerState_GUID = "da6fea51-564c-4487-9810-f0d0f9b4e3a5"
  IID_ID3D11SamplerState = LibC::GUID.new(0xda6fea51_u32, 0x564c_u16, 0x4487_u16, StaticArray[0x98_u8, 0x10_u8, 0xf0_u8, 0xd0_u8, 0xf9_u8, 0xb4_u8, 0xe3_u8, 0xa5_u8])
  struct ID3D11SamplerState
    lpVtbl : ID3D11SamplerStateVTbl*
  end

  struct ID3D11AsynchronousVTbl
    query_interface : Proc(ID3D11Asynchronous*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11Asynchronous*, UInt32)
    release : Proc(ID3D11Asynchronous*, UInt32)
    get_device : Proc(ID3D11Asynchronous*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11Asynchronous*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11Asynchronous*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11Asynchronous*, Guid*, IUnknown, HRESULT)
    get_data_size : Proc(ID3D11Asynchronous*, UInt32)
  end

  ID3D11Asynchronous_GUID = "4b35d0cd-1e15-4258-9c98-1b1333f6dd3b"
  IID_ID3D11Asynchronous = LibC::GUID.new(0x4b35d0cd_u32, 0x1e15_u16, 0x4258_u16, StaticArray[0x9c_u8, 0x98_u8, 0x1b_u8, 0x13_u8, 0x33_u8, 0xf6_u8, 0xdd_u8, 0x3b_u8])
  struct ID3D11Asynchronous
    lpVtbl : ID3D11AsynchronousVTbl*
  end

  struct ID3D11QueryVTbl
    query_interface : Proc(ID3D11Query*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11Query*, UInt32)
    release : Proc(ID3D11Query*, UInt32)
    get_device : Proc(ID3D11Query*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11Query*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11Query*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11Query*, Guid*, IUnknown, HRESULT)
    get_data_size : Proc(ID3D11Query*, UInt32)
    get_desc : Proc(ID3D11Query*, D3D11_QUERY_DESC*, Void)
  end

  ID3D11Query_GUID = "d6c00747-87b7-425e-b84d-44d108560afd"
  IID_ID3D11Query = LibC::GUID.new(0xd6c00747_u32, 0x87b7_u16, 0x425e_u16, StaticArray[0xb8_u8, 0x4d_u8, 0x44_u8, 0xd1_u8, 0x8_u8, 0x56_u8, 0xa_u8, 0xfd_u8])
  struct ID3D11Query
    lpVtbl : ID3D11QueryVTbl*
  end

  struct ID3D11PredicateVTbl
    query_interface : Proc(ID3D11Predicate*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11Predicate*, UInt32)
    release : Proc(ID3D11Predicate*, UInt32)
    get_device : Proc(ID3D11Predicate*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11Predicate*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11Predicate*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11Predicate*, Guid*, IUnknown, HRESULT)
    get_data_size : Proc(ID3D11Predicate*, UInt32)
    get_desc : Proc(ID3D11Predicate*, D3D11_QUERY_DESC*, Void)
  end

  ID3D11Predicate_GUID = "9eb576dd-9f77-4d86-81aa-8bab5fe490e2"
  IID_ID3D11Predicate = LibC::GUID.new(0x9eb576dd_u32, 0x9f77_u16, 0x4d86_u16, StaticArray[0x81_u8, 0xaa_u8, 0x8b_u8, 0xab_u8, 0x5f_u8, 0xe4_u8, 0x90_u8, 0xe2_u8])
  struct ID3D11Predicate
    lpVtbl : ID3D11PredicateVTbl*
  end

  struct ID3D11CounterVTbl
    query_interface : Proc(ID3D11Counter*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11Counter*, UInt32)
    release : Proc(ID3D11Counter*, UInt32)
    get_device : Proc(ID3D11Counter*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11Counter*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11Counter*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11Counter*, Guid*, IUnknown, HRESULT)
    get_data_size : Proc(ID3D11Counter*, UInt32)
    get_desc : Proc(ID3D11Counter*, D3D11_COUNTER_DESC*, Void)
  end

  ID3D11Counter_GUID = "6e8c49fb-a371-4770-b440-29086022b741"
  IID_ID3D11Counter = LibC::GUID.new(0x6e8c49fb_u32, 0xa371_u16, 0x4770_u16, StaticArray[0xb4_u8, 0x40_u8, 0x29_u8, 0x8_u8, 0x60_u8, 0x22_u8, 0xb7_u8, 0x41_u8])
  struct ID3D11Counter
    lpVtbl : ID3D11CounterVTbl*
  end

  struct ID3D11ClassInstanceVTbl
    query_interface : Proc(ID3D11ClassInstance*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11ClassInstance*, UInt32)
    release : Proc(ID3D11ClassInstance*, UInt32)
    get_device : Proc(ID3D11ClassInstance*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11ClassInstance*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11ClassInstance*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11ClassInstance*, Guid*, IUnknown, HRESULT)
    get_class_linkage : Proc(ID3D11ClassInstance*, ID3D11ClassLinkage*, Void)
    get_desc : Proc(ID3D11ClassInstance*, D3D11_CLASS_INSTANCE_DESC*, Void)
    get_instance_name : Proc(ID3D11ClassInstance*, UInt8*, LibC::UINT_PTR*, Void)
    get_type_name : Proc(ID3D11ClassInstance*, UInt8*, LibC::UINT_PTR*, Void)
  end

  ID3D11ClassInstance_GUID = "a6cd7faa-b0b7-4a2f-9436-8662a65797cb"
  IID_ID3D11ClassInstance = LibC::GUID.new(0xa6cd7faa_u32, 0xb0b7_u16, 0x4a2f_u16, StaticArray[0x94_u8, 0x36_u8, 0x86_u8, 0x62_u8, 0xa6_u8, 0x57_u8, 0x97_u8, 0xcb_u8])
  struct ID3D11ClassInstance
    lpVtbl : ID3D11ClassInstanceVTbl*
  end

  struct ID3D11ClassLinkageVTbl
    query_interface : Proc(ID3D11ClassLinkage*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11ClassLinkage*, UInt32)
    release : Proc(ID3D11ClassLinkage*, UInt32)
    get_device : Proc(ID3D11ClassLinkage*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11ClassLinkage*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11ClassLinkage*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11ClassLinkage*, Guid*, IUnknown, HRESULT)
    get_class_instance : Proc(ID3D11ClassLinkage*, PSTR, UInt32, ID3D11ClassInstance*, HRESULT)
    create_class_instance : Proc(ID3D11ClassLinkage*, PSTR, UInt32, UInt32, UInt32, UInt32, ID3D11ClassInstance*, HRESULT)
  end

  ID3D11ClassLinkage_GUID = "ddf57cba-9543-46e4-a12b-f207a0fe7fed"
  IID_ID3D11ClassLinkage = LibC::GUID.new(0xddf57cba_u32, 0x9543_u16, 0x46e4_u16, StaticArray[0xa1_u8, 0x2b_u8, 0xf2_u8, 0x7_u8, 0xa0_u8, 0xfe_u8, 0x7f_u8, 0xed_u8])
  struct ID3D11ClassLinkage
    lpVtbl : ID3D11ClassLinkageVTbl*
  end

  struct ID3D11CommandListVTbl
    query_interface : Proc(ID3D11CommandList*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11CommandList*, UInt32)
    release : Proc(ID3D11CommandList*, UInt32)
    get_device : Proc(ID3D11CommandList*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11CommandList*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11CommandList*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11CommandList*, Guid*, IUnknown, HRESULT)
    get_context_flags : Proc(ID3D11CommandList*, UInt32)
  end

  ID3D11CommandList_GUID = "a24bc4d1-769e-43f7-8013-98ff566c18e2"
  IID_ID3D11CommandList = LibC::GUID.new(0xa24bc4d1_u32, 0x769e_u16, 0x43f7_u16, StaticArray[0x80_u8, 0x13_u8, 0x98_u8, 0xff_u8, 0x56_u8, 0x6c_u8, 0x18_u8, 0xe2_u8])
  struct ID3D11CommandList
    lpVtbl : ID3D11CommandListVTbl*
  end

  struct ID3D11DeviceContextVTbl
    query_interface : Proc(ID3D11DeviceContext*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11DeviceContext*, UInt32)
    release : Proc(ID3D11DeviceContext*, UInt32)
    get_device : Proc(ID3D11DeviceContext*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11DeviceContext*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11DeviceContext*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11DeviceContext*, Guid*, IUnknown, HRESULT)
    vs_set_constant_buffers : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11Buffer*, Void)
    ps_set_shader_resources : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    ps_set_shader : Proc(ID3D11DeviceContext*, ID3D11PixelShader, ID3D11ClassInstance*, UInt32, Void)
    ps_set_samplers : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11SamplerState*, Void)
    vs_set_shader : Proc(ID3D11DeviceContext*, ID3D11VertexShader, ID3D11ClassInstance*, UInt32, Void)
    draw_indexed : Proc(ID3D11DeviceContext*, UInt32, UInt32, Int32, Void)
    draw : Proc(ID3D11DeviceContext*, UInt32, UInt32, Void)
    map : Proc(ID3D11DeviceContext*, ID3D11Resource, UInt32, D3D11_MAP, UInt32, D3D11_MAPPED_SUBRESOURCE*, HRESULT)
    unmap : Proc(ID3D11DeviceContext*, ID3D11Resource, UInt32, Void)
    ps_set_constant_buffers : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11Buffer*, Void)
    ia_set_input_layout : Proc(ID3D11DeviceContext*, ID3D11InputLayout, Void)
    ia_set_vertex_buffers : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    ia_set_index_buffer : Proc(ID3D11DeviceContext*, ID3D11Buffer, DXGI_FORMAT, UInt32, Void)
    draw_indexed_instanced : Proc(ID3D11DeviceContext*, UInt32, UInt32, UInt32, Int32, UInt32, Void)
    draw_instanced : Proc(ID3D11DeviceContext*, UInt32, UInt32, UInt32, UInt32, Void)
    gs_set_constant_buffers : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11Buffer*, Void)
    gs_set_shader : Proc(ID3D11DeviceContext*, ID3D11GeometryShader, ID3D11ClassInstance*, UInt32, Void)
    ia_set_primitive_topology : Proc(ID3D11DeviceContext*, D3D_PRIMITIVE_TOPOLOGY, Void)
    vs_set_shader_resources : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    vs_set_samplers : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11SamplerState*, Void)
    begin_ : Proc(ID3D11DeviceContext*, ID3D11Asynchronous, Void)
    end_ : Proc(ID3D11DeviceContext*, ID3D11Asynchronous, Void)
    get_data : Proc(ID3D11DeviceContext*, ID3D11Asynchronous, Void*, UInt32, UInt32, HRESULT)
    set_predication : Proc(ID3D11DeviceContext*, ID3D11Predicate, LibC::BOOL, Void)
    gs_set_shader_resources : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    gs_set_samplers : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11SamplerState*, Void)
    om_set_render_targets : Proc(ID3D11DeviceContext*, UInt32, ID3D11RenderTargetView*, ID3D11DepthStencilView, Void)
    om_set_render_targets_and_unordered_access_views : Proc(ID3D11DeviceContext*, UInt32, ID3D11RenderTargetView*, ID3D11DepthStencilView, UInt32, UInt32, ID3D11UnorderedAccessView*, UInt32*, Void)
    om_set_blend_state : Proc(ID3D11DeviceContext*, ID3D11BlendState, Float32*, UInt32, Void)
    om_set_depth_stencil_state : Proc(ID3D11DeviceContext*, ID3D11DepthStencilState, UInt32, Void)
    so_set_targets : Proc(ID3D11DeviceContext*, UInt32, ID3D11Buffer*, UInt32*, Void)
    draw_auto : Proc(ID3D11DeviceContext*, Void)
    draw_indexed_instanced_indirect : Proc(ID3D11DeviceContext*, ID3D11Buffer, UInt32, Void)
    draw_instanced_indirect : Proc(ID3D11DeviceContext*, ID3D11Buffer, UInt32, Void)
    dispatch : Proc(ID3D11DeviceContext*, UInt32, UInt32, UInt32, Void)
    dispatch_indirect : Proc(ID3D11DeviceContext*, ID3D11Buffer, UInt32, Void)
    rs_set_state : Proc(ID3D11DeviceContext*, ID3D11RasterizerState, Void)
    rs_set_viewports : Proc(ID3D11DeviceContext*, UInt32, D3D11_VIEWPORT*, Void)
    rs_set_scissor_rects : Proc(ID3D11DeviceContext*, UInt32, RECT*, Void)
    copy_subresource_region : Proc(ID3D11DeviceContext*, ID3D11Resource, UInt32, UInt32, UInt32, UInt32, ID3D11Resource, UInt32, D3D11_BOX*, Void)
    copy_resource : Proc(ID3D11DeviceContext*, ID3D11Resource, ID3D11Resource, Void)
    update_subresource : Proc(ID3D11DeviceContext*, ID3D11Resource, UInt32, D3D11_BOX*, Void*, UInt32, UInt32, Void)
    copy_structure_count : Proc(ID3D11DeviceContext*, ID3D11Buffer, UInt32, ID3D11UnorderedAccessView, Void)
    clear_render_target_view : Proc(ID3D11DeviceContext*, ID3D11RenderTargetView, Float32*, Void)
    clear_unordered_access_view_uint : Proc(ID3D11DeviceContext*, ID3D11UnorderedAccessView, UInt32*, Void)
    clear_unordered_access_view_float : Proc(ID3D11DeviceContext*, ID3D11UnorderedAccessView, Float32*, Void)
    clear_depth_stencil_view : Proc(ID3D11DeviceContext*, ID3D11DepthStencilView, UInt32, Float32, UInt8, Void)
    generate_mips : Proc(ID3D11DeviceContext*, ID3D11ShaderResourceView, Void)
    set_resource_min_lod : Proc(ID3D11DeviceContext*, ID3D11Resource, Float32, Void)
    get_resource_min_lod : Proc(ID3D11DeviceContext*, ID3D11Resource, Float32)
    resolve_subresource : Proc(ID3D11DeviceContext*, ID3D11Resource, UInt32, ID3D11Resource, UInt32, DXGI_FORMAT, Void)
    execute_command_list : Proc(ID3D11DeviceContext*, ID3D11CommandList, LibC::BOOL, Void)
    hs_set_shader_resources : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    hs_set_shader : Proc(ID3D11DeviceContext*, ID3D11HullShader, ID3D11ClassInstance*, UInt32, Void)
    hs_set_samplers : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11SamplerState*, Void)
    hs_set_constant_buffers : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11Buffer*, Void)
    ds_set_shader_resources : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    ds_set_shader : Proc(ID3D11DeviceContext*, ID3D11DomainShader, ID3D11ClassInstance*, UInt32, Void)
    ds_set_samplers : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11SamplerState*, Void)
    ds_set_constant_buffers : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11Buffer*, Void)
    cs_set_shader_resources : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    cs_set_unordered_access_views : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11UnorderedAccessView*, UInt32*, Void)
    cs_set_shader : Proc(ID3D11DeviceContext*, ID3D11ComputeShader, ID3D11ClassInstance*, UInt32, Void)
    cs_set_samplers : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11SamplerState*, Void)
    cs_set_constant_buffers : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11Buffer*, Void)
    vs_get_constant_buffers : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11Buffer*, Void)
    ps_get_shader_resources : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    ps_get_shader : Proc(ID3D11DeviceContext*, ID3D11PixelShader*, ID3D11ClassInstance*, UInt32*, Void)
    ps_get_samplers : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11SamplerState*, Void)
    vs_get_shader : Proc(ID3D11DeviceContext*, ID3D11VertexShader*, ID3D11ClassInstance*, UInt32*, Void)
    ps_get_constant_buffers : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11Buffer*, Void)
    ia_get_input_layout : Proc(ID3D11DeviceContext*, ID3D11InputLayout*, Void)
    ia_get_vertex_buffers : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    ia_get_index_buffer : Proc(ID3D11DeviceContext*, ID3D11Buffer*, DXGI_FORMAT*, UInt32*, Void)
    gs_get_constant_buffers : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11Buffer*, Void)
    gs_get_shader : Proc(ID3D11DeviceContext*, ID3D11GeometryShader*, ID3D11ClassInstance*, UInt32*, Void)
    ia_get_primitive_topology : Proc(ID3D11DeviceContext*, D3D_PRIMITIVE_TOPOLOGY*, Void)
    vs_get_shader_resources : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    vs_get_samplers : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11SamplerState*, Void)
    get_predication : Proc(ID3D11DeviceContext*, ID3D11Predicate*, LibC::BOOL*, Void)
    gs_get_shader_resources : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    gs_get_samplers : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11SamplerState*, Void)
    om_get_render_targets : Proc(ID3D11DeviceContext*, UInt32, ID3D11RenderTargetView*, ID3D11DepthStencilView*, Void)
    om_get_render_targets_and_unordered_access_views : Proc(ID3D11DeviceContext*, UInt32, ID3D11RenderTargetView*, ID3D11DepthStencilView*, UInt32, UInt32, ID3D11UnorderedAccessView*, Void)
    om_get_blend_state : Proc(ID3D11DeviceContext*, ID3D11BlendState*, Float32*, UInt32*, Void)
    om_get_depth_stencil_state : Proc(ID3D11DeviceContext*, ID3D11DepthStencilState*, UInt32*, Void)
    so_get_targets : Proc(ID3D11DeviceContext*, UInt32, ID3D11Buffer*, Void)
    rs_get_state : Proc(ID3D11DeviceContext*, ID3D11RasterizerState*, Void)
    rs_get_viewports : Proc(ID3D11DeviceContext*, UInt32*, D3D11_VIEWPORT*, Void)
    rs_get_scissor_rects : Proc(ID3D11DeviceContext*, UInt32*, RECT*, Void)
    hs_get_shader_resources : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    hs_get_shader : Proc(ID3D11DeviceContext*, ID3D11HullShader*, ID3D11ClassInstance*, UInt32*, Void)
    hs_get_samplers : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11SamplerState*, Void)
    hs_get_constant_buffers : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11Buffer*, Void)
    ds_get_shader_resources : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    ds_get_shader : Proc(ID3D11DeviceContext*, ID3D11DomainShader*, ID3D11ClassInstance*, UInt32*, Void)
    ds_get_samplers : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11SamplerState*, Void)
    ds_get_constant_buffers : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11Buffer*, Void)
    cs_get_shader_resources : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    cs_get_unordered_access_views : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11UnorderedAccessView*, Void)
    cs_get_shader : Proc(ID3D11DeviceContext*, ID3D11ComputeShader*, ID3D11ClassInstance*, UInt32*, Void)
    cs_get_samplers : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11SamplerState*, Void)
    cs_get_constant_buffers : Proc(ID3D11DeviceContext*, UInt32, UInt32, ID3D11Buffer*, Void)
    clear_state : Proc(ID3D11DeviceContext*, Void)
    flush : Proc(ID3D11DeviceContext*, Void)
    get_type : Proc(ID3D11DeviceContext*, D3D11_DEVICE_CONTEXT_TYPE)
    get_context_flags : Proc(ID3D11DeviceContext*, UInt32)
    finish_command_list : Proc(ID3D11DeviceContext*, LibC::BOOL, ID3D11CommandList*, HRESULT)
  end

  ID3D11DeviceContext_GUID = "c0bfa96c-e089-44fb-8eaf-26f8796190da"
  IID_ID3D11DeviceContext = LibC::GUID.new(0xc0bfa96c_u32, 0xe089_u16, 0x44fb_u16, StaticArray[0x8e_u8, 0xaf_u8, 0x26_u8, 0xf8_u8, 0x79_u8, 0x61_u8, 0x90_u8, 0xda_u8])
  struct ID3D11DeviceContext
    lpVtbl : ID3D11DeviceContextVTbl*
  end

  struct ID3D11VideoDecoderVTbl
    query_interface : Proc(ID3D11VideoDecoder*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11VideoDecoder*, UInt32)
    release : Proc(ID3D11VideoDecoder*, UInt32)
    get_device : Proc(ID3D11VideoDecoder*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11VideoDecoder*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11VideoDecoder*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11VideoDecoder*, Guid*, IUnknown, HRESULT)
    get_creation_parameters : Proc(ID3D11VideoDecoder*, D3D11_VIDEO_DECODER_DESC*, D3D11_VIDEO_DECODER_CONFIG*, HRESULT)
    get_driver_handle : Proc(ID3D11VideoDecoder*, LibC::HANDLE*, HRESULT)
  end

  ID3D11VideoDecoder_GUID = "3c9c5b51-995d-48d1-9b8d-fa5caeded65c"
  IID_ID3D11VideoDecoder = LibC::GUID.new(0x3c9c5b51_u32, 0x995d_u16, 0x48d1_u16, StaticArray[0x9b_u8, 0x8d_u8, 0xfa_u8, 0x5c_u8, 0xae_u8, 0xde_u8, 0xd6_u8, 0x5c_u8])
  struct ID3D11VideoDecoder
    lpVtbl : ID3D11VideoDecoderVTbl*
  end

  struct ID3D11VideoProcessorEnumeratorVTbl
    query_interface : Proc(ID3D11VideoProcessorEnumerator*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11VideoProcessorEnumerator*, UInt32)
    release : Proc(ID3D11VideoProcessorEnumerator*, UInt32)
    get_device : Proc(ID3D11VideoProcessorEnumerator*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11VideoProcessorEnumerator*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11VideoProcessorEnumerator*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11VideoProcessorEnumerator*, Guid*, IUnknown, HRESULT)
    get_video_processor_content_desc : Proc(ID3D11VideoProcessorEnumerator*, D3D11_VIDEO_PROCESSOR_CONTENT_DESC*, HRESULT)
    check_video_processor_format : Proc(ID3D11VideoProcessorEnumerator*, DXGI_FORMAT, UInt32*, HRESULT)
    get_video_processor_caps : Proc(ID3D11VideoProcessorEnumerator*, D3D11_VIDEO_PROCESSOR_CAPS*, HRESULT)
    get_video_processor_rate_conversion_caps : Proc(ID3D11VideoProcessorEnumerator*, UInt32, D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS*, HRESULT)
    get_video_processor_custom_rate : Proc(ID3D11VideoProcessorEnumerator*, UInt32, UInt32, D3D11_VIDEO_PROCESSOR_CUSTOM_RATE*, HRESULT)
    get_video_processor_filter_range : Proc(ID3D11VideoProcessorEnumerator*, D3D11_VIDEO_PROCESSOR_FILTER, D3D11_VIDEO_PROCESSOR_FILTER_RANGE*, HRESULT)
  end

  ID3D11VideoProcessorEnumerator_GUID = "31627037-53ab-4200-9061-05faa9ab45f9"
  IID_ID3D11VideoProcessorEnumerator = LibC::GUID.new(0x31627037_u32, 0x53ab_u16, 0x4200_u16, StaticArray[0x90_u8, 0x61_u8, 0x5_u8, 0xfa_u8, 0xa9_u8, 0xab_u8, 0x45_u8, 0xf9_u8])
  struct ID3D11VideoProcessorEnumerator
    lpVtbl : ID3D11VideoProcessorEnumeratorVTbl*
  end

  struct ID3D11VideoProcessorVTbl
    query_interface : Proc(ID3D11VideoProcessor*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11VideoProcessor*, UInt32)
    release : Proc(ID3D11VideoProcessor*, UInt32)
    get_device : Proc(ID3D11VideoProcessor*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11VideoProcessor*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11VideoProcessor*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11VideoProcessor*, Guid*, IUnknown, HRESULT)
    get_content_desc : Proc(ID3D11VideoProcessor*, D3D11_VIDEO_PROCESSOR_CONTENT_DESC*, Void)
    get_rate_conversion_caps : Proc(ID3D11VideoProcessor*, D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS*, Void)
  end

  ID3D11VideoProcessor_GUID = "1d7b0652-185f-41c6-85ce-0c5be3d4ae6c"
  IID_ID3D11VideoProcessor = LibC::GUID.new(0x1d7b0652_u32, 0x185f_u16, 0x41c6_u16, StaticArray[0x85_u8, 0xce_u8, 0xc_u8, 0x5b_u8, 0xe3_u8, 0xd4_u8, 0xae_u8, 0x6c_u8])
  struct ID3D11VideoProcessor
    lpVtbl : ID3D11VideoProcessorVTbl*
  end

  struct ID3D11AuthenticatedChannelVTbl
    query_interface : Proc(ID3D11AuthenticatedChannel*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11AuthenticatedChannel*, UInt32)
    release : Proc(ID3D11AuthenticatedChannel*, UInt32)
    get_device : Proc(ID3D11AuthenticatedChannel*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11AuthenticatedChannel*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11AuthenticatedChannel*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11AuthenticatedChannel*, Guid*, IUnknown, HRESULT)
    get_certificate_size : Proc(ID3D11AuthenticatedChannel*, UInt32*, HRESULT)
    get_certificate : Proc(ID3D11AuthenticatedChannel*, UInt32, UInt8*, HRESULT)
    get_channel_handle : Proc(ID3D11AuthenticatedChannel*, LibC::HANDLE*, Void)
  end

  ID3D11AuthenticatedChannel_GUID = "3015a308-dcbd-47aa-a747-192486d14d4a"
  IID_ID3D11AuthenticatedChannel = LibC::GUID.new(0x3015a308_u32, 0xdcbd_u16, 0x47aa_u16, StaticArray[0xa7_u8, 0x47_u8, 0x19_u8, 0x24_u8, 0x86_u8, 0xd1_u8, 0x4d_u8, 0x4a_u8])
  struct ID3D11AuthenticatedChannel
    lpVtbl : ID3D11AuthenticatedChannelVTbl*
  end

  struct ID3D11CryptoSessionVTbl
    query_interface : Proc(ID3D11CryptoSession*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11CryptoSession*, UInt32)
    release : Proc(ID3D11CryptoSession*, UInt32)
    get_device : Proc(ID3D11CryptoSession*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11CryptoSession*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11CryptoSession*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11CryptoSession*, Guid*, IUnknown, HRESULT)
    get_crypto_type : Proc(ID3D11CryptoSession*, Guid*, Void)
    get_decoder_profile : Proc(ID3D11CryptoSession*, Guid*, Void)
    get_certificate_size : Proc(ID3D11CryptoSession*, UInt32*, HRESULT)
    get_certificate : Proc(ID3D11CryptoSession*, UInt32, UInt8*, HRESULT)
    get_crypto_session_handle : Proc(ID3D11CryptoSession*, LibC::HANDLE*, Void)
  end

  ID3D11CryptoSession_GUID = "9b32f9ad-bdcc-40a6-a39d-d5c865845720"
  IID_ID3D11CryptoSession = LibC::GUID.new(0x9b32f9ad_u32, 0xbdcc_u16, 0x40a6_u16, StaticArray[0xa3_u8, 0x9d_u8, 0xd5_u8, 0xc8_u8, 0x65_u8, 0x84_u8, 0x57_u8, 0x20_u8])
  struct ID3D11CryptoSession
    lpVtbl : ID3D11CryptoSessionVTbl*
  end

  struct ID3D11VideoDecoderOutputViewVTbl
    query_interface : Proc(ID3D11VideoDecoderOutputView*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11VideoDecoderOutputView*, UInt32)
    release : Proc(ID3D11VideoDecoderOutputView*, UInt32)
    get_device : Proc(ID3D11VideoDecoderOutputView*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11VideoDecoderOutputView*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11VideoDecoderOutputView*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11VideoDecoderOutputView*, Guid*, IUnknown, HRESULT)
    get_resource : Proc(ID3D11VideoDecoderOutputView*, ID3D11Resource*, Void)
    get_desc : Proc(ID3D11VideoDecoderOutputView*, D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC*, Void)
  end

  ID3D11VideoDecoderOutputView_GUID = "c2931aea-2a85-4f20-860f-fba1fd256e18"
  IID_ID3D11VideoDecoderOutputView = LibC::GUID.new(0xc2931aea_u32, 0x2a85_u16, 0x4f20_u16, StaticArray[0x86_u8, 0xf_u8, 0xfb_u8, 0xa1_u8, 0xfd_u8, 0x25_u8, 0x6e_u8, 0x18_u8])
  struct ID3D11VideoDecoderOutputView
    lpVtbl : ID3D11VideoDecoderOutputViewVTbl*
  end

  struct ID3D11VideoProcessorInputViewVTbl
    query_interface : Proc(ID3D11VideoProcessorInputView*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11VideoProcessorInputView*, UInt32)
    release : Proc(ID3D11VideoProcessorInputView*, UInt32)
    get_device : Proc(ID3D11VideoProcessorInputView*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11VideoProcessorInputView*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11VideoProcessorInputView*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11VideoProcessorInputView*, Guid*, IUnknown, HRESULT)
    get_resource : Proc(ID3D11VideoProcessorInputView*, ID3D11Resource*, Void)
    get_desc : Proc(ID3D11VideoProcessorInputView*, D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*, Void)
  end

  ID3D11VideoProcessorInputView_GUID = "11ec5a5f-51dc-4945-ab34-6e8c21300ea5"
  IID_ID3D11VideoProcessorInputView = LibC::GUID.new(0x11ec5a5f_u32, 0x51dc_u16, 0x4945_u16, StaticArray[0xab_u8, 0x34_u8, 0x6e_u8, 0x8c_u8, 0x21_u8, 0x30_u8, 0xe_u8, 0xa5_u8])
  struct ID3D11VideoProcessorInputView
    lpVtbl : ID3D11VideoProcessorInputViewVTbl*
  end

  struct ID3D11VideoProcessorOutputViewVTbl
    query_interface : Proc(ID3D11VideoProcessorOutputView*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11VideoProcessorOutputView*, UInt32)
    release : Proc(ID3D11VideoProcessorOutputView*, UInt32)
    get_device : Proc(ID3D11VideoProcessorOutputView*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11VideoProcessorOutputView*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11VideoProcessorOutputView*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11VideoProcessorOutputView*, Guid*, IUnknown, HRESULT)
    get_resource : Proc(ID3D11VideoProcessorOutputView*, ID3D11Resource*, Void)
    get_desc : Proc(ID3D11VideoProcessorOutputView*, D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*, Void)
  end

  ID3D11VideoProcessorOutputView_GUID = "a048285e-25a9-4527-bd93-d68b68c44254"
  IID_ID3D11VideoProcessorOutputView = LibC::GUID.new(0xa048285e_u32, 0x25a9_u16, 0x4527_u16, StaticArray[0xbd_u8, 0x93_u8, 0xd6_u8, 0x8b_u8, 0x68_u8, 0xc4_u8, 0x42_u8, 0x54_u8])
  struct ID3D11VideoProcessorOutputView
    lpVtbl : ID3D11VideoProcessorOutputViewVTbl*
  end

  struct ID3D11VideoContextVTbl
    query_interface : Proc(ID3D11VideoContext*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11VideoContext*, UInt32)
    release : Proc(ID3D11VideoContext*, UInt32)
    get_device : Proc(ID3D11VideoContext*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11VideoContext*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11VideoContext*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11VideoContext*, Guid*, IUnknown, HRESULT)
    get_decoder_buffer : Proc(ID3D11VideoContext*, ID3D11VideoDecoder, D3D11_VIDEO_DECODER_BUFFER_TYPE, UInt32*, Void**, HRESULT)
    release_decoder_buffer : Proc(ID3D11VideoContext*, ID3D11VideoDecoder, D3D11_VIDEO_DECODER_BUFFER_TYPE, HRESULT)
    decoder_begin_frame : Proc(ID3D11VideoContext*, ID3D11VideoDecoder, ID3D11VideoDecoderOutputView, UInt32, Void*, HRESULT)
    decoder_end_frame : Proc(ID3D11VideoContext*, ID3D11VideoDecoder, HRESULT)
    submit_decoder_buffers : Proc(ID3D11VideoContext*, ID3D11VideoDecoder, UInt32, D3D11_VIDEO_DECODER_BUFFER_DESC*, HRESULT)
    decoder_extension : Proc(ID3D11VideoContext*, ID3D11VideoDecoder, D3D11_VIDEO_DECODER_EXTENSION*, Int32)
    video_processor_set_output_target_rect : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, LibC::BOOL, RECT*, Void)
    video_processor_set_output_background_color : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, LibC::BOOL, D3D11_VIDEO_COLOR*, Void)
    video_processor_set_output_color_space : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, D3D11_VIDEO_PROCESSOR_COLOR_SPACE*, Void)
    video_processor_set_output_alpha_fill_mode : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE, UInt32, Void)
    video_processor_set_output_constriction : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, LibC::BOOL, SIZE, Void)
    video_processor_set_output_stereo_mode : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, LibC::BOOL, Void)
    video_processor_set_output_extension : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, Guid*, UInt32, Void*, Int32)
    video_processor_get_output_target_rect : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, LibC::BOOL*, RECT*, Void)
    video_processor_get_output_background_color : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, LibC::BOOL*, D3D11_VIDEO_COLOR*, Void)
    video_processor_get_output_color_space : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, D3D11_VIDEO_PROCESSOR_COLOR_SPACE*, Void)
    video_processor_get_output_alpha_fill_mode : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE*, UInt32*, Void)
    video_processor_get_output_constriction : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, LibC::BOOL*, SIZE*, Void)
    video_processor_get_output_stereo_mode : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, LibC::BOOL*, Void)
    video_processor_get_output_extension : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, Guid*, UInt32, Void*, Int32)
    video_processor_set_stream_frame_format : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_FRAME_FORMAT, Void)
    video_processor_set_stream_color_space : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_PROCESSOR_COLOR_SPACE*, Void)
    video_processor_set_stream_output_rate : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_PROCESSOR_OUTPUT_RATE, LibC::BOOL, DXGI_RATIONAL*, Void)
    video_processor_set_stream_source_rect : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, LibC::BOOL, RECT*, Void)
    video_processor_set_stream_dest_rect : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, LibC::BOOL, RECT*, Void)
    video_processor_set_stream_alpha : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, LibC::BOOL, Float32, Void)
    video_processor_set_stream_palette : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, UInt32, UInt32*, Void)
    video_processor_set_stream_pixel_aspect_ratio : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, LibC::BOOL, DXGI_RATIONAL*, DXGI_RATIONAL*, Void)
    video_processor_set_stream_luma_key : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, LibC::BOOL, Float32, Float32, Void)
    video_processor_set_stream_stereo_format : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, LibC::BOOL, D3D11_VIDEO_PROCESSOR_STEREO_FORMAT, LibC::BOOL, LibC::BOOL, D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE, Int32, Void)
    video_processor_set_stream_auto_processing_mode : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, LibC::BOOL, Void)
    video_processor_set_stream_filter : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_PROCESSOR_FILTER, LibC::BOOL, Int32, Void)
    video_processor_set_stream_extension : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, Guid*, UInt32, Void*, Int32)
    video_processor_get_stream_frame_format : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_FRAME_FORMAT*, Void)
    video_processor_get_stream_color_space : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_PROCESSOR_COLOR_SPACE*, Void)
    video_processor_get_stream_output_rate : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_PROCESSOR_OUTPUT_RATE*, LibC::BOOL*, DXGI_RATIONAL*, Void)
    video_processor_get_stream_source_rect : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, RECT*, Void)
    video_processor_get_stream_dest_rect : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, RECT*, Void)
    video_processor_get_stream_alpha : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, Float32*, Void)
    video_processor_get_stream_palette : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, UInt32, UInt32*, Void)
    video_processor_get_stream_pixel_aspect_ratio : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, DXGI_RATIONAL*, DXGI_RATIONAL*, Void)
    video_processor_get_stream_luma_key : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, Float32*, Float32*, Void)
    video_processor_get_stream_stereo_format : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, D3D11_VIDEO_PROCESSOR_STEREO_FORMAT*, LibC::BOOL*, LibC::BOOL*, D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE*, Int32*, Void)
    video_processor_get_stream_auto_processing_mode : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, Void)
    video_processor_get_stream_filter : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_PROCESSOR_FILTER, LibC::BOOL*, Int32*, Void)
    video_processor_get_stream_extension : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, Guid*, UInt32, Void*, Int32)
    video_processor_blt : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, ID3D11VideoProcessorOutputView, UInt32, UInt32, D3D11_VIDEO_PROCESSOR_STREAM*, HRESULT)
    negotiate_crypto_session_key_exchange : Proc(ID3D11VideoContext*, ID3D11CryptoSession, UInt32, Void*, HRESULT)
    encryption_blt : Proc(ID3D11VideoContext*, ID3D11CryptoSession, ID3D11Texture2D, ID3D11Texture2D, UInt32, Void*, Void)
    decryption_blt : Proc(ID3D11VideoContext*, ID3D11CryptoSession, ID3D11Texture2D, ID3D11Texture2D, D3D11_ENCRYPTED_BLOCK_INFO*, UInt32, Void*, UInt32, Void*, Void)
    start_session_key_refresh : Proc(ID3D11VideoContext*, ID3D11CryptoSession, UInt32, Void*, Void)
    finish_session_key_refresh : Proc(ID3D11VideoContext*, ID3D11CryptoSession, Void)
    get_encryption_blt_key : Proc(ID3D11VideoContext*, ID3D11CryptoSession, UInt32, Void*, HRESULT)
    negotiate_authenticated_channel_key_exchange : Proc(ID3D11VideoContext*, ID3D11AuthenticatedChannel, UInt32, Void*, HRESULT)
    query_authenticated_channel : Proc(ID3D11VideoContext*, ID3D11AuthenticatedChannel, UInt32, Void*, UInt32, Void*, HRESULT)
    configure_authenticated_channel : Proc(ID3D11VideoContext*, ID3D11AuthenticatedChannel, UInt32, Void*, D3D11_AUTHENTICATED_CONFIGURE_OUTPUT*, HRESULT)
    video_processor_set_stream_rotation : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, LibC::BOOL, D3D11_VIDEO_PROCESSOR_ROTATION, Void)
    video_processor_get_stream_rotation : Proc(ID3D11VideoContext*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, D3D11_VIDEO_PROCESSOR_ROTATION*, Void)
  end

  ID3D11VideoContext_GUID = "61f21c45-3c0e-4a74-9cea-67100d9ad5e4"
  IID_ID3D11VideoContext = LibC::GUID.new(0x61f21c45_u32, 0x3c0e_u16, 0x4a74_u16, StaticArray[0x9c_u8, 0xea_u8, 0x67_u8, 0x10_u8, 0xd_u8, 0x9a_u8, 0xd5_u8, 0xe4_u8])
  struct ID3D11VideoContext
    lpVtbl : ID3D11VideoContextVTbl*
  end

  struct ID3D11VideoDeviceVTbl
    query_interface : Proc(ID3D11VideoDevice*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11VideoDevice*, UInt32)
    release : Proc(ID3D11VideoDevice*, UInt32)
    create_video_decoder : Proc(ID3D11VideoDevice*, D3D11_VIDEO_DECODER_DESC*, D3D11_VIDEO_DECODER_CONFIG*, ID3D11VideoDecoder*, HRESULT)
    create_video_processor : Proc(ID3D11VideoDevice*, ID3D11VideoProcessorEnumerator, UInt32, ID3D11VideoProcessor*, HRESULT)
    create_authenticated_channel : Proc(ID3D11VideoDevice*, D3D11_AUTHENTICATED_CHANNEL_TYPE, ID3D11AuthenticatedChannel*, HRESULT)
    create_crypto_session : Proc(ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession*, HRESULT)
    create_video_decoder_output_view : Proc(ID3D11VideoDevice*, ID3D11Resource, D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC*, ID3D11VideoDecoderOutputView*, HRESULT)
    create_video_processor_input_view : Proc(ID3D11VideoDevice*, ID3D11Resource, ID3D11VideoProcessorEnumerator, D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*, ID3D11VideoProcessorInputView*, HRESULT)
    create_video_processor_output_view : Proc(ID3D11VideoDevice*, ID3D11Resource, ID3D11VideoProcessorEnumerator, D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*, ID3D11VideoProcessorOutputView*, HRESULT)
    create_video_processor_enumerator : Proc(ID3D11VideoDevice*, D3D11_VIDEO_PROCESSOR_CONTENT_DESC*, ID3D11VideoProcessorEnumerator*, HRESULT)
    get_video_decoder_profile_count : Proc(ID3D11VideoDevice*, UInt32)
    get_video_decoder_profile : Proc(ID3D11VideoDevice*, UInt32, Guid*, HRESULT)
    check_video_decoder_format : Proc(ID3D11VideoDevice*, Guid*, DXGI_FORMAT, LibC::BOOL*, HRESULT)
    get_video_decoder_config_count : Proc(ID3D11VideoDevice*, D3D11_VIDEO_DECODER_DESC*, UInt32*, HRESULT)
    get_video_decoder_config : Proc(ID3D11VideoDevice*, D3D11_VIDEO_DECODER_DESC*, UInt32, D3D11_VIDEO_DECODER_CONFIG*, HRESULT)
    get_content_protection_caps : Proc(ID3D11VideoDevice*, Guid*, Guid*, D3D11_VIDEO_CONTENT_PROTECTION_CAPS*, HRESULT)
    check_crypto_key_exchange : Proc(ID3D11VideoDevice*, Guid*, Guid*, UInt32, Guid*, HRESULT)
    set_private_data : Proc(ID3D11VideoDevice*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11VideoDevice*, Guid*, IUnknown, HRESULT)
  end

  ID3D11VideoDevice_GUID = "10ec4d5b-975a-4689-b9e4-d0aac30fe333"
  IID_ID3D11VideoDevice = LibC::GUID.new(0x10ec4d5b_u32, 0x975a_u16, 0x4689_u16, StaticArray[0xb9_u8, 0xe4_u8, 0xd0_u8, 0xaa_u8, 0xc3_u8, 0xf_u8, 0xe3_u8, 0x33_u8])
  struct ID3D11VideoDevice
    lpVtbl : ID3D11VideoDeviceVTbl*
  end

  struct ID3D11DeviceVTbl
    query_interface : Proc(ID3D11Device*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11Device*, UInt32)
    release : Proc(ID3D11Device*, UInt32)
    create_buffer : Proc(ID3D11Device*, D3D11_BUFFER_DESC*, D3D11_SUBRESOURCE_DATA*, ID3D11Buffer*, HRESULT)
    create_texture1_d : Proc(ID3D11Device*, D3D11_TEXTURE1D_DESC*, D3D11_SUBRESOURCE_DATA*, ID3D11Texture1D*, HRESULT)
    create_texture2_d : Proc(ID3D11Device*, D3D11_TEXTURE2D_DESC*, D3D11_SUBRESOURCE_DATA*, ID3D11Texture2D*, HRESULT)
    create_texture3_d : Proc(ID3D11Device*, D3D11_TEXTURE3D_DESC*, D3D11_SUBRESOURCE_DATA*, ID3D11Texture3D*, HRESULT)
    create_shader_resource_view : Proc(ID3D11Device*, ID3D11Resource, D3D11_SHADER_RESOURCE_VIEW_DESC*, ID3D11ShaderResourceView*, HRESULT)
    create_unordered_access_view : Proc(ID3D11Device*, ID3D11Resource, D3D11_UNORDERED_ACCESS_VIEW_DESC*, ID3D11UnorderedAccessView*, HRESULT)
    create_render_target_view : Proc(ID3D11Device*, ID3D11Resource, D3D11_RENDER_TARGET_VIEW_DESC*, ID3D11RenderTargetView*, HRESULT)
    create_depth_stencil_view : Proc(ID3D11Device*, ID3D11Resource, D3D11_DEPTH_STENCIL_VIEW_DESC*, ID3D11DepthStencilView*, HRESULT)
    create_input_layout : Proc(ID3D11Device*, D3D11_INPUT_ELEMENT_DESC*, UInt32, Void*, LibC::UINT_PTR, ID3D11InputLayout*, HRESULT)
    create_vertex_shader : Proc(ID3D11Device*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11VertexShader*, HRESULT)
    create_geometry_shader : Proc(ID3D11Device*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11GeometryShader*, HRESULT)
    create_geometry_shader_with_stream_output : Proc(ID3D11Device*, Void*, LibC::UINT_PTR, D3D11_SO_DECLARATION_ENTRY*, UInt32, UInt32*, UInt32, UInt32, ID3D11ClassLinkage, ID3D11GeometryShader*, HRESULT)
    create_pixel_shader : Proc(ID3D11Device*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11PixelShader*, HRESULT)
    create_hull_shader : Proc(ID3D11Device*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11HullShader*, HRESULT)
    create_domain_shader : Proc(ID3D11Device*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11DomainShader*, HRESULT)
    create_compute_shader : Proc(ID3D11Device*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11ComputeShader*, HRESULT)
    create_class_linkage : Proc(ID3D11Device*, ID3D11ClassLinkage*, HRESULT)
    create_blend_state : Proc(ID3D11Device*, D3D11_BLEND_DESC*, ID3D11BlendState*, HRESULT)
    create_depth_stencil_state : Proc(ID3D11Device*, D3D11_DEPTH_STENCIL_DESC*, ID3D11DepthStencilState*, HRESULT)
    create_rasterizer_state : Proc(ID3D11Device*, D3D11_RASTERIZER_DESC*, ID3D11RasterizerState*, HRESULT)
    create_sampler_state : Proc(ID3D11Device*, D3D11_SAMPLER_DESC*, ID3D11SamplerState*, HRESULT)
    create_query : Proc(ID3D11Device*, D3D11_QUERY_DESC*, ID3D11Query*, HRESULT)
    create_predicate : Proc(ID3D11Device*, D3D11_QUERY_DESC*, ID3D11Predicate*, HRESULT)
    create_counter : Proc(ID3D11Device*, D3D11_COUNTER_DESC*, ID3D11Counter*, HRESULT)
    create_deferred_context : Proc(ID3D11Device*, UInt32, ID3D11DeviceContext*, HRESULT)
    open_shared_resource : Proc(ID3D11Device*, LibC::HANDLE, Guid*, Void**, HRESULT)
    check_format_support : Proc(ID3D11Device*, DXGI_FORMAT, UInt32*, HRESULT)
    check_multisample_quality_levels : Proc(ID3D11Device*, DXGI_FORMAT, UInt32, UInt32*, HRESULT)
    check_counter_info : Proc(ID3D11Device*, D3D11_COUNTER_INFO*, Void)
    check_counter : Proc(ID3D11Device*, D3D11_COUNTER_DESC*, D3D11_COUNTER_TYPE*, UInt32*, UInt8*, UInt32*, UInt8*, UInt32*, UInt8*, UInt32*, HRESULT)
    check_feature_support : Proc(ID3D11Device*, D3D11_FEATURE, Void*, UInt32, HRESULT)
    get_private_data : Proc(ID3D11Device*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11Device*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11Device*, Guid*, IUnknown, HRESULT)
    get_feature_level : Proc(ID3D11Device*, D3D_FEATURE_LEVEL)
    get_creation_flags : Proc(ID3D11Device*, UInt32)
    get_device_removed_reason : Proc(ID3D11Device*, HRESULT)
    get_immediate_context : Proc(ID3D11Device*, ID3D11DeviceContext*, Void)
    set_exception_mode : Proc(ID3D11Device*, UInt32, HRESULT)
    get_exception_mode : Proc(ID3D11Device*, UInt32)
  end

  ID3D11Device_GUID = "db6f6ddb-ac77-4e88-8253-819df9bbf140"
  IID_ID3D11Device = LibC::GUID.new(0xdb6f6ddb_u32, 0xac77_u16, 0x4e88_u16, StaticArray[0x82_u8, 0x53_u8, 0x81_u8, 0x9d_u8, 0xf9_u8, 0xbb_u8, 0xf1_u8, 0x40_u8])
  struct ID3D11Device
    lpVtbl : ID3D11DeviceVTbl*
  end

  struct ID3D11DebugVTbl
    query_interface : Proc(ID3D11Debug*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11Debug*, UInt32)
    release : Proc(ID3D11Debug*, UInt32)
    set_feature_mask : Proc(ID3D11Debug*, UInt32, HRESULT)
    get_feature_mask : Proc(ID3D11Debug*, UInt32)
    set_present_per_render_op_delay : Proc(ID3D11Debug*, UInt32, HRESULT)
    get_present_per_render_op_delay : Proc(ID3D11Debug*, UInt32)
    set_swap_chain : Proc(ID3D11Debug*, IDXGISwapChain, HRESULT)
    get_swap_chain : Proc(ID3D11Debug*, IDXGISwapChain*, HRESULT)
    validate_context : Proc(ID3D11Debug*, ID3D11DeviceContext, HRESULT)
    report_live_device_objects : Proc(ID3D11Debug*, D3D11_RLDO_FLAGS, HRESULT)
    validate_context_for_dispatch : Proc(ID3D11Debug*, ID3D11DeviceContext, HRESULT)
  end

  ID3D11Debug_GUID = "79cf2233-7536-4948-9d36-1e4692dc5760"
  IID_ID3D11Debug = LibC::GUID.new(0x79cf2233_u32, 0x7536_u16, 0x4948_u16, StaticArray[0x9d_u8, 0x36_u8, 0x1e_u8, 0x46_u8, 0x92_u8, 0xdc_u8, 0x57_u8, 0x60_u8])
  struct ID3D11Debug
    lpVtbl : ID3D11DebugVTbl*
  end

  struct ID3D11SwitchToRefVTbl
    query_interface : Proc(ID3D11SwitchToRef*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11SwitchToRef*, UInt32)
    release : Proc(ID3D11SwitchToRef*, UInt32)
    set_use_ref : Proc(ID3D11SwitchToRef*, LibC::BOOL, LibC::BOOL)
    get_use_ref : Proc(ID3D11SwitchToRef*, LibC::BOOL)
  end

  ID3D11SwitchToRef_GUID = "1ef337e3-58e7-4f83-a692-db221f5ed47e"
  IID_ID3D11SwitchToRef = LibC::GUID.new(0x1ef337e3_u32, 0x58e7_u16, 0x4f83_u16, StaticArray[0xa6_u8, 0x92_u8, 0xdb_u8, 0x22_u8, 0x1f_u8, 0x5e_u8, 0xd4_u8, 0x7e_u8])
  struct ID3D11SwitchToRef
    lpVtbl : ID3D11SwitchToRefVTbl*
  end

  struct ID3D11TracingDeviceVTbl
    query_interface : Proc(ID3D11TracingDevice*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11TracingDevice*, UInt32)
    release : Proc(ID3D11TracingDevice*, UInt32)
    set_shader_tracking_options_by_type : Proc(ID3D11TracingDevice*, UInt32, UInt32, HRESULT)
    set_shader_tracking_options : Proc(ID3D11TracingDevice*, IUnknown, UInt32, HRESULT)
  end

  ID3D11TracingDevice_GUID = "1911c771-1587-413e-a7e0-fb26c3de0268"
  IID_ID3D11TracingDevice = LibC::GUID.new(0x1911c771_u32, 0x1587_u16, 0x413e_u16, StaticArray[0xa7_u8, 0xe0_u8, 0xfb_u8, 0x26_u8, 0xc3_u8, 0xde_u8, 0x2_u8, 0x68_u8])
  struct ID3D11TracingDevice
    lpVtbl : ID3D11TracingDeviceVTbl*
  end

  struct ID3D11RefTrackingOptionsVTbl
    query_interface : Proc(ID3D11RefTrackingOptions*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11RefTrackingOptions*, UInt32)
    release : Proc(ID3D11RefTrackingOptions*, UInt32)
    set_tracking_options : Proc(ID3D11RefTrackingOptions*, UInt32, HRESULT)
  end

  ID3D11RefTrackingOptions_GUID = "193dacdf-0db2-4c05-a55c-ef06cac56fd9"
  IID_ID3D11RefTrackingOptions = LibC::GUID.new(0x193dacdf_u32, 0xdb2_u16, 0x4c05_u16, StaticArray[0xa5_u8, 0x5c_u8, 0xef_u8, 0x6_u8, 0xca_u8, 0xc5_u8, 0x6f_u8, 0xd9_u8])
  struct ID3D11RefTrackingOptions
    lpVtbl : ID3D11RefTrackingOptionsVTbl*
  end

  struct ID3D11RefDefaultTrackingOptionsVTbl
    query_interface : Proc(ID3D11RefDefaultTrackingOptions*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11RefDefaultTrackingOptions*, UInt32)
    release : Proc(ID3D11RefDefaultTrackingOptions*, UInt32)
    set_tracking_options : Proc(ID3D11RefDefaultTrackingOptions*, UInt32, UInt32, HRESULT)
  end

  ID3D11RefDefaultTrackingOptions_GUID = "03916615-c644-418c-9bf4-75db5be63ca0"
  IID_ID3D11RefDefaultTrackingOptions = LibC::GUID.new(0x3916615_u32, 0xc644_u16, 0x418c_u16, StaticArray[0x9b_u8, 0xf4_u8, 0x75_u8, 0xdb_u8, 0x5b_u8, 0xe6_u8, 0x3c_u8, 0xa0_u8])
  struct ID3D11RefDefaultTrackingOptions
    lpVtbl : ID3D11RefDefaultTrackingOptionsVTbl*
  end

  struct ID3D11InfoQueueVTbl
    query_interface : Proc(ID3D11InfoQueue*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11InfoQueue*, UInt32)
    release : Proc(ID3D11InfoQueue*, UInt32)
    set_message_count_limit : Proc(ID3D11InfoQueue*, UInt64, HRESULT)
    clear_stored_messages : Proc(ID3D11InfoQueue*, Void)
    get_message : Proc(ID3D11InfoQueue*, UInt64, D3D11_MESSAGE*, LibC::UINT_PTR*, HRESULT)
    get_num_messages_allowed_by_storage_filter : Proc(ID3D11InfoQueue*, UInt64)
    get_num_messages_denied_by_storage_filter : Proc(ID3D11InfoQueue*, UInt64)
    get_num_stored_messages : Proc(ID3D11InfoQueue*, UInt64)
    get_num_stored_messages_allowed_by_retrieval_filter : Proc(ID3D11InfoQueue*, UInt64)
    get_num_messages_discarded_by_message_count_limit : Proc(ID3D11InfoQueue*, UInt64)
    get_message_count_limit : Proc(ID3D11InfoQueue*, UInt64)
    add_storage_filter_entries : Proc(ID3D11InfoQueue*, D3D11_INFO_QUEUE_FILTER*, HRESULT)
    get_storage_filter : Proc(ID3D11InfoQueue*, D3D11_INFO_QUEUE_FILTER*, LibC::UINT_PTR*, HRESULT)
    clear_storage_filter : Proc(ID3D11InfoQueue*, Void)
    push_empty_storage_filter : Proc(ID3D11InfoQueue*, HRESULT)
    push_copy_of_storage_filter : Proc(ID3D11InfoQueue*, HRESULT)
    push_storage_filter : Proc(ID3D11InfoQueue*, D3D11_INFO_QUEUE_FILTER*, HRESULT)
    pop_storage_filter : Proc(ID3D11InfoQueue*, Void)
    get_storage_filter_stack_size : Proc(ID3D11InfoQueue*, UInt32)
    add_retrieval_filter_entries : Proc(ID3D11InfoQueue*, D3D11_INFO_QUEUE_FILTER*, HRESULT)
    get_retrieval_filter : Proc(ID3D11InfoQueue*, D3D11_INFO_QUEUE_FILTER*, LibC::UINT_PTR*, HRESULT)
    clear_retrieval_filter : Proc(ID3D11InfoQueue*, Void)
    push_empty_retrieval_filter : Proc(ID3D11InfoQueue*, HRESULT)
    push_copy_of_retrieval_filter : Proc(ID3D11InfoQueue*, HRESULT)
    push_retrieval_filter : Proc(ID3D11InfoQueue*, D3D11_INFO_QUEUE_FILTER*, HRESULT)
    pop_retrieval_filter : Proc(ID3D11InfoQueue*, Void)
    get_retrieval_filter_stack_size : Proc(ID3D11InfoQueue*, UInt32)
    add_message : Proc(ID3D11InfoQueue*, D3D11_MESSAGE_CATEGORY, D3D11_MESSAGE_SEVERITY, D3D11_MESSAGE_ID, PSTR, HRESULT)
    add_application_message : Proc(ID3D11InfoQueue*, D3D11_MESSAGE_SEVERITY, PSTR, HRESULT)
    set_break_on_category : Proc(ID3D11InfoQueue*, D3D11_MESSAGE_CATEGORY, LibC::BOOL, HRESULT)
    set_break_on_severity : Proc(ID3D11InfoQueue*, D3D11_MESSAGE_SEVERITY, LibC::BOOL, HRESULT)
    set_break_on_id : Proc(ID3D11InfoQueue*, D3D11_MESSAGE_ID, LibC::BOOL, HRESULT)
    get_break_on_category : Proc(ID3D11InfoQueue*, D3D11_MESSAGE_CATEGORY, LibC::BOOL)
    get_break_on_severity : Proc(ID3D11InfoQueue*, D3D11_MESSAGE_SEVERITY, LibC::BOOL)
    get_break_on_id : Proc(ID3D11InfoQueue*, D3D11_MESSAGE_ID, LibC::BOOL)
    set_mute_debug_output : Proc(ID3D11InfoQueue*, LibC::BOOL, Void)
    get_mute_debug_output : Proc(ID3D11InfoQueue*, LibC::BOOL)
  end

  ID3D11InfoQueue_GUID = "6543dbb6-1b48-42f5-ab82-e97ec74326f6"
  IID_ID3D11InfoQueue = LibC::GUID.new(0x6543dbb6_u32, 0x1b48_u16, 0x42f5_u16, StaticArray[0xab_u8, 0x82_u8, 0xe9_u8, 0x7e_u8, 0xc7_u8, 0x43_u8, 0x26_u8, 0xf6_u8])
  struct ID3D11InfoQueue
    lpVtbl : ID3D11InfoQueueVTbl*
  end

  struct ID3D11BlendState1VTbl
    query_interface : Proc(ID3D11BlendState1*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11BlendState1*, UInt32)
    release : Proc(ID3D11BlendState1*, UInt32)
    get_device : Proc(ID3D11BlendState1*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11BlendState1*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11BlendState1*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11BlendState1*, Guid*, IUnknown, HRESULT)
    get_desc : Proc(ID3D11BlendState1*, D3D11_BLEND_DESC*, Void)
    get_desc1 : Proc(ID3D11BlendState1*, D3D11_BLEND_DESC1*, Void)
  end

  ID3D11BlendState1_GUID = "cc86fabe-da55-401d-85e7-e3c9de2877e9"
  IID_ID3D11BlendState1 = LibC::GUID.new(0xcc86fabe_u32, 0xda55_u16, 0x401d_u16, StaticArray[0x85_u8, 0xe7_u8, 0xe3_u8, 0xc9_u8, 0xde_u8, 0x28_u8, 0x77_u8, 0xe9_u8])
  struct ID3D11BlendState1
    lpVtbl : ID3D11BlendState1VTbl*
  end

  struct ID3D11RasterizerState1VTbl
    query_interface : Proc(ID3D11RasterizerState1*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11RasterizerState1*, UInt32)
    release : Proc(ID3D11RasterizerState1*, UInt32)
    get_device : Proc(ID3D11RasterizerState1*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11RasterizerState1*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11RasterizerState1*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11RasterizerState1*, Guid*, IUnknown, HRESULT)
    get_desc : Proc(ID3D11RasterizerState1*, D3D11_RASTERIZER_DESC*, Void)
    get_desc1 : Proc(ID3D11RasterizerState1*, D3D11_RASTERIZER_DESC1*, Void)
  end

  ID3D11RasterizerState1_GUID = "1217d7a6-5039-418c-b042-9cbe256afd6e"
  IID_ID3D11RasterizerState1 = LibC::GUID.new(0x1217d7a6_u32, 0x5039_u16, 0x418c_u16, StaticArray[0xb0_u8, 0x42_u8, 0x9c_u8, 0xbe_u8, 0x25_u8, 0x6a_u8, 0xfd_u8, 0x6e_u8])
  struct ID3D11RasterizerState1
    lpVtbl : ID3D11RasterizerState1VTbl*
  end

  struct ID3DDeviceContextStateVTbl
    query_interface : Proc(ID3DDeviceContextState*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3DDeviceContextState*, UInt32)
    release : Proc(ID3DDeviceContextState*, UInt32)
    get_device : Proc(ID3DDeviceContextState*, ID3D11Device*, Void)
    get_private_data : Proc(ID3DDeviceContextState*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3DDeviceContextState*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3DDeviceContextState*, Guid*, IUnknown, HRESULT)
  end

  ID3DDeviceContextState_GUID = "5c1e0d8a-7c23-48f9-8c59-a92958ceff11"
  IID_ID3DDeviceContextState = LibC::GUID.new(0x5c1e0d8a_u32, 0x7c23_u16, 0x48f9_u16, StaticArray[0x8c_u8, 0x59_u8, 0xa9_u8, 0x29_u8, 0x58_u8, 0xce_u8, 0xff_u8, 0x11_u8])
  struct ID3DDeviceContextState
    lpVtbl : ID3DDeviceContextStateVTbl*
  end

  struct ID3D11DeviceContext1VTbl
    query_interface : Proc(ID3D11DeviceContext1*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11DeviceContext1*, UInt32)
    release : Proc(ID3D11DeviceContext1*, UInt32)
    get_device : Proc(ID3D11DeviceContext1*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11DeviceContext1*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11DeviceContext1*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11DeviceContext1*, Guid*, IUnknown, HRESULT)
    vs_set_constant_buffers : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11Buffer*, Void)
    ps_set_shader_resources : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    ps_set_shader : Proc(ID3D11DeviceContext1*, ID3D11PixelShader, ID3D11ClassInstance*, UInt32, Void)
    ps_set_samplers : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11SamplerState*, Void)
    vs_set_shader : Proc(ID3D11DeviceContext1*, ID3D11VertexShader, ID3D11ClassInstance*, UInt32, Void)
    draw_indexed : Proc(ID3D11DeviceContext1*, UInt32, UInt32, Int32, Void)
    draw : Proc(ID3D11DeviceContext1*, UInt32, UInt32, Void)
    map : Proc(ID3D11DeviceContext1*, ID3D11Resource, UInt32, D3D11_MAP, UInt32, D3D11_MAPPED_SUBRESOURCE*, HRESULT)
    unmap : Proc(ID3D11DeviceContext1*, ID3D11Resource, UInt32, Void)
    ps_set_constant_buffers : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11Buffer*, Void)
    ia_set_input_layout : Proc(ID3D11DeviceContext1*, ID3D11InputLayout, Void)
    ia_set_vertex_buffers : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    ia_set_index_buffer : Proc(ID3D11DeviceContext1*, ID3D11Buffer, DXGI_FORMAT, UInt32, Void)
    draw_indexed_instanced : Proc(ID3D11DeviceContext1*, UInt32, UInt32, UInt32, Int32, UInt32, Void)
    draw_instanced : Proc(ID3D11DeviceContext1*, UInt32, UInt32, UInt32, UInt32, Void)
    gs_set_constant_buffers : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11Buffer*, Void)
    gs_set_shader : Proc(ID3D11DeviceContext1*, ID3D11GeometryShader, ID3D11ClassInstance*, UInt32, Void)
    ia_set_primitive_topology : Proc(ID3D11DeviceContext1*, D3D_PRIMITIVE_TOPOLOGY, Void)
    vs_set_shader_resources : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    vs_set_samplers : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11SamplerState*, Void)
    begin_ : Proc(ID3D11DeviceContext1*, ID3D11Asynchronous, Void)
    end_ : Proc(ID3D11DeviceContext1*, ID3D11Asynchronous, Void)
    get_data : Proc(ID3D11DeviceContext1*, ID3D11Asynchronous, Void*, UInt32, UInt32, HRESULT)
    set_predication : Proc(ID3D11DeviceContext1*, ID3D11Predicate, LibC::BOOL, Void)
    gs_set_shader_resources : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    gs_set_samplers : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11SamplerState*, Void)
    om_set_render_targets : Proc(ID3D11DeviceContext1*, UInt32, ID3D11RenderTargetView*, ID3D11DepthStencilView, Void)
    om_set_render_targets_and_unordered_access_views : Proc(ID3D11DeviceContext1*, UInt32, ID3D11RenderTargetView*, ID3D11DepthStencilView, UInt32, UInt32, ID3D11UnorderedAccessView*, UInt32*, Void)
    om_set_blend_state : Proc(ID3D11DeviceContext1*, ID3D11BlendState, Float32*, UInt32, Void)
    om_set_depth_stencil_state : Proc(ID3D11DeviceContext1*, ID3D11DepthStencilState, UInt32, Void)
    so_set_targets : Proc(ID3D11DeviceContext1*, UInt32, ID3D11Buffer*, UInt32*, Void)
    draw_auto : Proc(ID3D11DeviceContext1*, Void)
    draw_indexed_instanced_indirect : Proc(ID3D11DeviceContext1*, ID3D11Buffer, UInt32, Void)
    draw_instanced_indirect : Proc(ID3D11DeviceContext1*, ID3D11Buffer, UInt32, Void)
    dispatch : Proc(ID3D11DeviceContext1*, UInt32, UInt32, UInt32, Void)
    dispatch_indirect : Proc(ID3D11DeviceContext1*, ID3D11Buffer, UInt32, Void)
    rs_set_state : Proc(ID3D11DeviceContext1*, ID3D11RasterizerState, Void)
    rs_set_viewports : Proc(ID3D11DeviceContext1*, UInt32, D3D11_VIEWPORT*, Void)
    rs_set_scissor_rects : Proc(ID3D11DeviceContext1*, UInt32, RECT*, Void)
    copy_subresource_region : Proc(ID3D11DeviceContext1*, ID3D11Resource, UInt32, UInt32, UInt32, UInt32, ID3D11Resource, UInt32, D3D11_BOX*, Void)
    copy_resource : Proc(ID3D11DeviceContext1*, ID3D11Resource, ID3D11Resource, Void)
    update_subresource : Proc(ID3D11DeviceContext1*, ID3D11Resource, UInt32, D3D11_BOX*, Void*, UInt32, UInt32, Void)
    copy_structure_count : Proc(ID3D11DeviceContext1*, ID3D11Buffer, UInt32, ID3D11UnorderedAccessView, Void)
    clear_render_target_view : Proc(ID3D11DeviceContext1*, ID3D11RenderTargetView, Float32*, Void)
    clear_unordered_access_view_uint : Proc(ID3D11DeviceContext1*, ID3D11UnorderedAccessView, UInt32*, Void)
    clear_unordered_access_view_float : Proc(ID3D11DeviceContext1*, ID3D11UnorderedAccessView, Float32*, Void)
    clear_depth_stencil_view : Proc(ID3D11DeviceContext1*, ID3D11DepthStencilView, UInt32, Float32, UInt8, Void)
    generate_mips : Proc(ID3D11DeviceContext1*, ID3D11ShaderResourceView, Void)
    set_resource_min_lod : Proc(ID3D11DeviceContext1*, ID3D11Resource, Float32, Void)
    get_resource_min_lod : Proc(ID3D11DeviceContext1*, ID3D11Resource, Float32)
    resolve_subresource : Proc(ID3D11DeviceContext1*, ID3D11Resource, UInt32, ID3D11Resource, UInt32, DXGI_FORMAT, Void)
    execute_command_list : Proc(ID3D11DeviceContext1*, ID3D11CommandList, LibC::BOOL, Void)
    hs_set_shader_resources : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    hs_set_shader : Proc(ID3D11DeviceContext1*, ID3D11HullShader, ID3D11ClassInstance*, UInt32, Void)
    hs_set_samplers : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11SamplerState*, Void)
    hs_set_constant_buffers : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11Buffer*, Void)
    ds_set_shader_resources : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    ds_set_shader : Proc(ID3D11DeviceContext1*, ID3D11DomainShader, ID3D11ClassInstance*, UInt32, Void)
    ds_set_samplers : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11SamplerState*, Void)
    ds_set_constant_buffers : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11Buffer*, Void)
    cs_set_shader_resources : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    cs_set_unordered_access_views : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11UnorderedAccessView*, UInt32*, Void)
    cs_set_shader : Proc(ID3D11DeviceContext1*, ID3D11ComputeShader, ID3D11ClassInstance*, UInt32, Void)
    cs_set_samplers : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11SamplerState*, Void)
    cs_set_constant_buffers : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11Buffer*, Void)
    vs_get_constant_buffers : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11Buffer*, Void)
    ps_get_shader_resources : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    ps_get_shader : Proc(ID3D11DeviceContext1*, ID3D11PixelShader*, ID3D11ClassInstance*, UInt32*, Void)
    ps_get_samplers : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11SamplerState*, Void)
    vs_get_shader : Proc(ID3D11DeviceContext1*, ID3D11VertexShader*, ID3D11ClassInstance*, UInt32*, Void)
    ps_get_constant_buffers : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11Buffer*, Void)
    ia_get_input_layout : Proc(ID3D11DeviceContext1*, ID3D11InputLayout*, Void)
    ia_get_vertex_buffers : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    ia_get_index_buffer : Proc(ID3D11DeviceContext1*, ID3D11Buffer*, DXGI_FORMAT*, UInt32*, Void)
    gs_get_constant_buffers : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11Buffer*, Void)
    gs_get_shader : Proc(ID3D11DeviceContext1*, ID3D11GeometryShader*, ID3D11ClassInstance*, UInt32*, Void)
    ia_get_primitive_topology : Proc(ID3D11DeviceContext1*, D3D_PRIMITIVE_TOPOLOGY*, Void)
    vs_get_shader_resources : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    vs_get_samplers : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11SamplerState*, Void)
    get_predication : Proc(ID3D11DeviceContext1*, ID3D11Predicate*, LibC::BOOL*, Void)
    gs_get_shader_resources : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    gs_get_samplers : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11SamplerState*, Void)
    om_get_render_targets : Proc(ID3D11DeviceContext1*, UInt32, ID3D11RenderTargetView*, ID3D11DepthStencilView*, Void)
    om_get_render_targets_and_unordered_access_views : Proc(ID3D11DeviceContext1*, UInt32, ID3D11RenderTargetView*, ID3D11DepthStencilView*, UInt32, UInt32, ID3D11UnorderedAccessView*, Void)
    om_get_blend_state : Proc(ID3D11DeviceContext1*, ID3D11BlendState*, Float32*, UInt32*, Void)
    om_get_depth_stencil_state : Proc(ID3D11DeviceContext1*, ID3D11DepthStencilState*, UInt32*, Void)
    so_get_targets : Proc(ID3D11DeviceContext1*, UInt32, ID3D11Buffer*, Void)
    rs_get_state : Proc(ID3D11DeviceContext1*, ID3D11RasterizerState*, Void)
    rs_get_viewports : Proc(ID3D11DeviceContext1*, UInt32*, D3D11_VIEWPORT*, Void)
    rs_get_scissor_rects : Proc(ID3D11DeviceContext1*, UInt32*, RECT*, Void)
    hs_get_shader_resources : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    hs_get_shader : Proc(ID3D11DeviceContext1*, ID3D11HullShader*, ID3D11ClassInstance*, UInt32*, Void)
    hs_get_samplers : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11SamplerState*, Void)
    hs_get_constant_buffers : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11Buffer*, Void)
    ds_get_shader_resources : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    ds_get_shader : Proc(ID3D11DeviceContext1*, ID3D11DomainShader*, ID3D11ClassInstance*, UInt32*, Void)
    ds_get_samplers : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11SamplerState*, Void)
    ds_get_constant_buffers : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11Buffer*, Void)
    cs_get_shader_resources : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    cs_get_unordered_access_views : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11UnorderedAccessView*, Void)
    cs_get_shader : Proc(ID3D11DeviceContext1*, ID3D11ComputeShader*, ID3D11ClassInstance*, UInt32*, Void)
    cs_get_samplers : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11SamplerState*, Void)
    cs_get_constant_buffers : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11Buffer*, Void)
    clear_state : Proc(ID3D11DeviceContext1*, Void)
    flush : Proc(ID3D11DeviceContext1*, Void)
    get_type : Proc(ID3D11DeviceContext1*, D3D11_DEVICE_CONTEXT_TYPE)
    get_context_flags : Proc(ID3D11DeviceContext1*, UInt32)
    finish_command_list : Proc(ID3D11DeviceContext1*, LibC::BOOL, ID3D11CommandList*, HRESULT)
    copy_subresource_region1 : Proc(ID3D11DeviceContext1*, ID3D11Resource, UInt32, UInt32, UInt32, UInt32, ID3D11Resource, UInt32, D3D11_BOX*, UInt32, Void)
    update_subresource1 : Proc(ID3D11DeviceContext1*, ID3D11Resource, UInt32, D3D11_BOX*, Void*, UInt32, UInt32, UInt32, Void)
    discard_resource : Proc(ID3D11DeviceContext1*, ID3D11Resource, Void)
    discard_view : Proc(ID3D11DeviceContext1*, ID3D11View, Void)
    vs_set_constant_buffers1 : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    hs_set_constant_buffers1 : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    ds_set_constant_buffers1 : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    gs_set_constant_buffers1 : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    ps_set_constant_buffers1 : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    cs_set_constant_buffers1 : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    vs_get_constant_buffers1 : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    hs_get_constant_buffers1 : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    ds_get_constant_buffers1 : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    gs_get_constant_buffers1 : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    ps_get_constant_buffers1 : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    cs_get_constant_buffers1 : Proc(ID3D11DeviceContext1*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    swap_device_context_state : Proc(ID3D11DeviceContext1*, ID3DDeviceContextState, ID3DDeviceContextState*, Void)
    clear_view : Proc(ID3D11DeviceContext1*, ID3D11View, Float32*, RECT*, UInt32, Void)
    discard_view1 : Proc(ID3D11DeviceContext1*, ID3D11View, RECT*, UInt32, Void)
  end

  ID3D11DeviceContext1_GUID = "bb2c6faa-b5fb-4082-8e6b-388b8cfa90e1"
  IID_ID3D11DeviceContext1 = LibC::GUID.new(0xbb2c6faa_u32, 0xb5fb_u16, 0x4082_u16, StaticArray[0x8e_u8, 0x6b_u8, 0x38_u8, 0x8b_u8, 0x8c_u8, 0xfa_u8, 0x90_u8, 0xe1_u8])
  struct ID3D11DeviceContext1
    lpVtbl : ID3D11DeviceContext1VTbl*
  end

  struct ID3D11VideoContext1VTbl
    query_interface : Proc(ID3D11VideoContext1*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11VideoContext1*, UInt32)
    release : Proc(ID3D11VideoContext1*, UInt32)
    get_device : Proc(ID3D11VideoContext1*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11VideoContext1*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11VideoContext1*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11VideoContext1*, Guid*, IUnknown, HRESULT)
    get_decoder_buffer : Proc(ID3D11VideoContext1*, ID3D11VideoDecoder, D3D11_VIDEO_DECODER_BUFFER_TYPE, UInt32*, Void**, HRESULT)
    release_decoder_buffer : Proc(ID3D11VideoContext1*, ID3D11VideoDecoder, D3D11_VIDEO_DECODER_BUFFER_TYPE, HRESULT)
    decoder_begin_frame : Proc(ID3D11VideoContext1*, ID3D11VideoDecoder, ID3D11VideoDecoderOutputView, UInt32, Void*, HRESULT)
    decoder_end_frame : Proc(ID3D11VideoContext1*, ID3D11VideoDecoder, HRESULT)
    submit_decoder_buffers : Proc(ID3D11VideoContext1*, ID3D11VideoDecoder, UInt32, D3D11_VIDEO_DECODER_BUFFER_DESC*, HRESULT)
    decoder_extension : Proc(ID3D11VideoContext1*, ID3D11VideoDecoder, D3D11_VIDEO_DECODER_EXTENSION*, Int32)
    video_processor_set_output_target_rect : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, LibC::BOOL, RECT*, Void)
    video_processor_set_output_background_color : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, LibC::BOOL, D3D11_VIDEO_COLOR*, Void)
    video_processor_set_output_color_space : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, D3D11_VIDEO_PROCESSOR_COLOR_SPACE*, Void)
    video_processor_set_output_alpha_fill_mode : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE, UInt32, Void)
    video_processor_set_output_constriction : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, LibC::BOOL, SIZE, Void)
    video_processor_set_output_stereo_mode : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, LibC::BOOL, Void)
    video_processor_set_output_extension : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, Guid*, UInt32, Void*, Int32)
    video_processor_get_output_target_rect : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, LibC::BOOL*, RECT*, Void)
    video_processor_get_output_background_color : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, LibC::BOOL*, D3D11_VIDEO_COLOR*, Void)
    video_processor_get_output_color_space : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, D3D11_VIDEO_PROCESSOR_COLOR_SPACE*, Void)
    video_processor_get_output_alpha_fill_mode : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE*, UInt32*, Void)
    video_processor_get_output_constriction : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, LibC::BOOL*, SIZE*, Void)
    video_processor_get_output_stereo_mode : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, LibC::BOOL*, Void)
    video_processor_get_output_extension : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, Guid*, UInt32, Void*, Int32)
    video_processor_set_stream_frame_format : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_FRAME_FORMAT, Void)
    video_processor_set_stream_color_space : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_PROCESSOR_COLOR_SPACE*, Void)
    video_processor_set_stream_output_rate : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_PROCESSOR_OUTPUT_RATE, LibC::BOOL, DXGI_RATIONAL*, Void)
    video_processor_set_stream_source_rect : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, LibC::BOOL, RECT*, Void)
    video_processor_set_stream_dest_rect : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, LibC::BOOL, RECT*, Void)
    video_processor_set_stream_alpha : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, LibC::BOOL, Float32, Void)
    video_processor_set_stream_palette : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, UInt32, UInt32*, Void)
    video_processor_set_stream_pixel_aspect_ratio : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, LibC::BOOL, DXGI_RATIONAL*, DXGI_RATIONAL*, Void)
    video_processor_set_stream_luma_key : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, LibC::BOOL, Float32, Float32, Void)
    video_processor_set_stream_stereo_format : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, LibC::BOOL, D3D11_VIDEO_PROCESSOR_STEREO_FORMAT, LibC::BOOL, LibC::BOOL, D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE, Int32, Void)
    video_processor_set_stream_auto_processing_mode : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, LibC::BOOL, Void)
    video_processor_set_stream_filter : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_PROCESSOR_FILTER, LibC::BOOL, Int32, Void)
    video_processor_set_stream_extension : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, Guid*, UInt32, Void*, Int32)
    video_processor_get_stream_frame_format : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_FRAME_FORMAT*, Void)
    video_processor_get_stream_color_space : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_PROCESSOR_COLOR_SPACE*, Void)
    video_processor_get_stream_output_rate : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_PROCESSOR_OUTPUT_RATE*, LibC::BOOL*, DXGI_RATIONAL*, Void)
    video_processor_get_stream_source_rect : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, RECT*, Void)
    video_processor_get_stream_dest_rect : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, RECT*, Void)
    video_processor_get_stream_alpha : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, Float32*, Void)
    video_processor_get_stream_palette : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, UInt32, UInt32*, Void)
    video_processor_get_stream_pixel_aspect_ratio : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, DXGI_RATIONAL*, DXGI_RATIONAL*, Void)
    video_processor_get_stream_luma_key : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, Float32*, Float32*, Void)
    video_processor_get_stream_stereo_format : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, D3D11_VIDEO_PROCESSOR_STEREO_FORMAT*, LibC::BOOL*, LibC::BOOL*, D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE*, Int32*, Void)
    video_processor_get_stream_auto_processing_mode : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, Void)
    video_processor_get_stream_filter : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_PROCESSOR_FILTER, LibC::BOOL*, Int32*, Void)
    video_processor_get_stream_extension : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, Guid*, UInt32, Void*, Int32)
    video_processor_blt : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, ID3D11VideoProcessorOutputView, UInt32, UInt32, D3D11_VIDEO_PROCESSOR_STREAM*, HRESULT)
    negotiate_crypto_session_key_exchange : Proc(ID3D11VideoContext1*, ID3D11CryptoSession, UInt32, Void*, HRESULT)
    encryption_blt : Proc(ID3D11VideoContext1*, ID3D11CryptoSession, ID3D11Texture2D, ID3D11Texture2D, UInt32, Void*, Void)
    decryption_blt : Proc(ID3D11VideoContext1*, ID3D11CryptoSession, ID3D11Texture2D, ID3D11Texture2D, D3D11_ENCRYPTED_BLOCK_INFO*, UInt32, Void*, UInt32, Void*, Void)
    start_session_key_refresh : Proc(ID3D11VideoContext1*, ID3D11CryptoSession, UInt32, Void*, Void)
    finish_session_key_refresh : Proc(ID3D11VideoContext1*, ID3D11CryptoSession, Void)
    get_encryption_blt_key : Proc(ID3D11VideoContext1*, ID3D11CryptoSession, UInt32, Void*, HRESULT)
    negotiate_authenticated_channel_key_exchange : Proc(ID3D11VideoContext1*, ID3D11AuthenticatedChannel, UInt32, Void*, HRESULT)
    query_authenticated_channel : Proc(ID3D11VideoContext1*, ID3D11AuthenticatedChannel, UInt32, Void*, UInt32, Void*, HRESULT)
    configure_authenticated_channel : Proc(ID3D11VideoContext1*, ID3D11AuthenticatedChannel, UInt32, Void*, D3D11_AUTHENTICATED_CONFIGURE_OUTPUT*, HRESULT)
    video_processor_set_stream_rotation : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, LibC::BOOL, D3D11_VIDEO_PROCESSOR_ROTATION, Void)
    video_processor_get_stream_rotation : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, D3D11_VIDEO_PROCESSOR_ROTATION*, Void)
    submit_decoder_buffers1 : Proc(ID3D11VideoContext1*, ID3D11VideoDecoder, UInt32, D3D11_VIDEO_DECODER_BUFFER_DESC1*, HRESULT)
    get_data_for_new_hardware_key : Proc(ID3D11VideoContext1*, ID3D11CryptoSession, UInt32, Void*, UInt64*, HRESULT)
    check_crypto_session_status : Proc(ID3D11VideoContext1*, ID3D11CryptoSession, D3D11_CRYPTO_SESSION_STATUS*, HRESULT)
    decoder_enable_downsampling : Proc(ID3D11VideoContext1*, ID3D11VideoDecoder, DXGI_COLOR_SPACE_TYPE, D3D11_VIDEO_SAMPLE_DESC*, UInt32, HRESULT)
    decoder_update_downsampling : Proc(ID3D11VideoContext1*, ID3D11VideoDecoder, D3D11_VIDEO_SAMPLE_DESC*, HRESULT)
    video_processor_set_output_color_space1 : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, DXGI_COLOR_SPACE_TYPE, Void)
    video_processor_set_output_shader_usage : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, LibC::BOOL, Void)
    video_processor_get_output_color_space1 : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, DXGI_COLOR_SPACE_TYPE*, Void)
    video_processor_get_output_shader_usage : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, LibC::BOOL*, Void)
    video_processor_set_stream_color_space1 : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, DXGI_COLOR_SPACE_TYPE, Void)
    video_processor_set_stream_mirror : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, LibC::BOOL, LibC::BOOL, LibC::BOOL, Void)
    video_processor_get_stream_color_space1 : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, DXGI_COLOR_SPACE_TYPE*, Void)
    video_processor_get_stream_mirror : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, LibC::BOOL*, LibC::BOOL*, Void)
    video_processor_get_behavior_hints : Proc(ID3D11VideoContext1*, ID3D11VideoProcessor, UInt32, UInt32, DXGI_FORMAT, UInt32, D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT*, UInt32*, HRESULT)
  end

  ID3D11VideoContext1_GUID = "a7f026da-a5f8-4487-a564-15e34357651e"
  IID_ID3D11VideoContext1 = LibC::GUID.new(0xa7f026da_u32, 0xa5f8_u16, 0x4487_u16, StaticArray[0xa5_u8, 0x64_u8, 0x15_u8, 0xe3_u8, 0x43_u8, 0x57_u8, 0x65_u8, 0x1e_u8])
  struct ID3D11VideoContext1
    lpVtbl : ID3D11VideoContext1VTbl*
  end

  struct ID3D11VideoDevice1VTbl
    query_interface : Proc(ID3D11VideoDevice1*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11VideoDevice1*, UInt32)
    release : Proc(ID3D11VideoDevice1*, UInt32)
    create_video_decoder : Proc(ID3D11VideoDevice1*, D3D11_VIDEO_DECODER_DESC*, D3D11_VIDEO_DECODER_CONFIG*, ID3D11VideoDecoder*, HRESULT)
    create_video_processor : Proc(ID3D11VideoDevice1*, ID3D11VideoProcessorEnumerator, UInt32, ID3D11VideoProcessor*, HRESULT)
    create_authenticated_channel : Proc(ID3D11VideoDevice1*, D3D11_AUTHENTICATED_CHANNEL_TYPE, ID3D11AuthenticatedChannel*, HRESULT)
    create_crypto_session : Proc(ID3D11VideoDevice1*, Guid*, Guid*, Guid*, ID3D11CryptoSession*, HRESULT)
    create_video_decoder_output_view : Proc(ID3D11VideoDevice1*, ID3D11Resource, D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC*, ID3D11VideoDecoderOutputView*, HRESULT)
    create_video_processor_input_view : Proc(ID3D11VideoDevice1*, ID3D11Resource, ID3D11VideoProcessorEnumerator, D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*, ID3D11VideoProcessorInputView*, HRESULT)
    create_video_processor_output_view : Proc(ID3D11VideoDevice1*, ID3D11Resource, ID3D11VideoProcessorEnumerator, D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*, ID3D11VideoProcessorOutputView*, HRESULT)
    create_video_processor_enumerator : Proc(ID3D11VideoDevice1*, D3D11_VIDEO_PROCESSOR_CONTENT_DESC*, ID3D11VideoProcessorEnumerator*, HRESULT)
    get_video_decoder_profile_count : Proc(ID3D11VideoDevice1*, UInt32)
    get_video_decoder_profile : Proc(ID3D11VideoDevice1*, UInt32, Guid*, HRESULT)
    check_video_decoder_format : Proc(ID3D11VideoDevice1*, Guid*, DXGI_FORMAT, LibC::BOOL*, HRESULT)
    get_video_decoder_config_count : Proc(ID3D11VideoDevice1*, D3D11_VIDEO_DECODER_DESC*, UInt32*, HRESULT)
    get_video_decoder_config : Proc(ID3D11VideoDevice1*, D3D11_VIDEO_DECODER_DESC*, UInt32, D3D11_VIDEO_DECODER_CONFIG*, HRESULT)
    get_content_protection_caps : Proc(ID3D11VideoDevice1*, Guid*, Guid*, D3D11_VIDEO_CONTENT_PROTECTION_CAPS*, HRESULT)
    check_crypto_key_exchange : Proc(ID3D11VideoDevice1*, Guid*, Guid*, UInt32, Guid*, HRESULT)
    set_private_data : Proc(ID3D11VideoDevice1*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11VideoDevice1*, Guid*, IUnknown, HRESULT)
    get_crypto_session_private_data_size : Proc(ID3D11VideoDevice1*, Guid*, Guid*, Guid*, UInt32*, UInt32*, HRESULT)
    get_video_decoder_caps : Proc(ID3D11VideoDevice1*, Guid*, UInt32, UInt32, DXGI_RATIONAL*, UInt32, Guid*, UInt32*, HRESULT)
    check_video_decoder_downsampling : Proc(ID3D11VideoDevice1*, D3D11_VIDEO_DECODER_DESC*, DXGI_COLOR_SPACE_TYPE, D3D11_VIDEO_DECODER_CONFIG*, DXGI_RATIONAL*, D3D11_VIDEO_SAMPLE_DESC*, LibC::BOOL*, LibC::BOOL*, HRESULT)
    recommend_video_decoder_downsample_parameters : Proc(ID3D11VideoDevice1*, D3D11_VIDEO_DECODER_DESC*, DXGI_COLOR_SPACE_TYPE, D3D11_VIDEO_DECODER_CONFIG*, DXGI_RATIONAL*, D3D11_VIDEO_SAMPLE_DESC*, HRESULT)
  end

  ID3D11VideoDevice1_GUID = "29da1d51-1321-4454-804b-f5fc9f861f0f"
  IID_ID3D11VideoDevice1 = LibC::GUID.new(0x29da1d51_u32, 0x1321_u16, 0x4454_u16, StaticArray[0x80_u8, 0x4b_u8, 0xf5_u8, 0xfc_u8, 0x9f_u8, 0x86_u8, 0x1f_u8, 0xf_u8])
  struct ID3D11VideoDevice1
    lpVtbl : ID3D11VideoDevice1VTbl*
  end

  struct ID3D11VideoProcessorEnumerator1VTbl
    query_interface : Proc(ID3D11VideoProcessorEnumerator1*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11VideoProcessorEnumerator1*, UInt32)
    release : Proc(ID3D11VideoProcessorEnumerator1*, UInt32)
    get_device : Proc(ID3D11VideoProcessorEnumerator1*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11VideoProcessorEnumerator1*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11VideoProcessorEnumerator1*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11VideoProcessorEnumerator1*, Guid*, IUnknown, HRESULT)
    get_video_processor_content_desc : Proc(ID3D11VideoProcessorEnumerator1*, D3D11_VIDEO_PROCESSOR_CONTENT_DESC*, HRESULT)
    check_video_processor_format : Proc(ID3D11VideoProcessorEnumerator1*, DXGI_FORMAT, UInt32*, HRESULT)
    get_video_processor_caps : Proc(ID3D11VideoProcessorEnumerator1*, D3D11_VIDEO_PROCESSOR_CAPS*, HRESULT)
    get_video_processor_rate_conversion_caps : Proc(ID3D11VideoProcessorEnumerator1*, UInt32, D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS*, HRESULT)
    get_video_processor_custom_rate : Proc(ID3D11VideoProcessorEnumerator1*, UInt32, UInt32, D3D11_VIDEO_PROCESSOR_CUSTOM_RATE*, HRESULT)
    get_video_processor_filter_range : Proc(ID3D11VideoProcessorEnumerator1*, D3D11_VIDEO_PROCESSOR_FILTER, D3D11_VIDEO_PROCESSOR_FILTER_RANGE*, HRESULT)
    check_video_processor_format_conversion : Proc(ID3D11VideoProcessorEnumerator1*, DXGI_FORMAT, DXGI_COLOR_SPACE_TYPE, DXGI_FORMAT, DXGI_COLOR_SPACE_TYPE, LibC::BOOL*, HRESULT)
  end

  ID3D11VideoProcessorEnumerator1_GUID = "465217f2-5568-43cf-b5b9-f61d54531ca1"
  IID_ID3D11VideoProcessorEnumerator1 = LibC::GUID.new(0x465217f2_u32, 0x5568_u16, 0x43cf_u16, StaticArray[0xb5_u8, 0xb9_u8, 0xf6_u8, 0x1d_u8, 0x54_u8, 0x53_u8, 0x1c_u8, 0xa1_u8])
  struct ID3D11VideoProcessorEnumerator1
    lpVtbl : ID3D11VideoProcessorEnumerator1VTbl*
  end

  struct ID3D11Device1VTbl
    query_interface : Proc(ID3D11Device1*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11Device1*, UInt32)
    release : Proc(ID3D11Device1*, UInt32)
    create_buffer : Proc(ID3D11Device1*, D3D11_BUFFER_DESC*, D3D11_SUBRESOURCE_DATA*, ID3D11Buffer*, HRESULT)
    create_texture1_d : Proc(ID3D11Device1*, D3D11_TEXTURE1D_DESC*, D3D11_SUBRESOURCE_DATA*, ID3D11Texture1D*, HRESULT)
    create_texture2_d : Proc(ID3D11Device1*, D3D11_TEXTURE2D_DESC*, D3D11_SUBRESOURCE_DATA*, ID3D11Texture2D*, HRESULT)
    create_texture3_d : Proc(ID3D11Device1*, D3D11_TEXTURE3D_DESC*, D3D11_SUBRESOURCE_DATA*, ID3D11Texture3D*, HRESULT)
    create_shader_resource_view : Proc(ID3D11Device1*, ID3D11Resource, D3D11_SHADER_RESOURCE_VIEW_DESC*, ID3D11ShaderResourceView*, HRESULT)
    create_unordered_access_view : Proc(ID3D11Device1*, ID3D11Resource, D3D11_UNORDERED_ACCESS_VIEW_DESC*, ID3D11UnorderedAccessView*, HRESULT)
    create_render_target_view : Proc(ID3D11Device1*, ID3D11Resource, D3D11_RENDER_TARGET_VIEW_DESC*, ID3D11RenderTargetView*, HRESULT)
    create_depth_stencil_view : Proc(ID3D11Device1*, ID3D11Resource, D3D11_DEPTH_STENCIL_VIEW_DESC*, ID3D11DepthStencilView*, HRESULT)
    create_input_layout : Proc(ID3D11Device1*, D3D11_INPUT_ELEMENT_DESC*, UInt32, Void*, LibC::UINT_PTR, ID3D11InputLayout*, HRESULT)
    create_vertex_shader : Proc(ID3D11Device1*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11VertexShader*, HRESULT)
    create_geometry_shader : Proc(ID3D11Device1*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11GeometryShader*, HRESULT)
    create_geometry_shader_with_stream_output : Proc(ID3D11Device1*, Void*, LibC::UINT_PTR, D3D11_SO_DECLARATION_ENTRY*, UInt32, UInt32*, UInt32, UInt32, ID3D11ClassLinkage, ID3D11GeometryShader*, HRESULT)
    create_pixel_shader : Proc(ID3D11Device1*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11PixelShader*, HRESULT)
    create_hull_shader : Proc(ID3D11Device1*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11HullShader*, HRESULT)
    create_domain_shader : Proc(ID3D11Device1*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11DomainShader*, HRESULT)
    create_compute_shader : Proc(ID3D11Device1*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11ComputeShader*, HRESULT)
    create_class_linkage : Proc(ID3D11Device1*, ID3D11ClassLinkage*, HRESULT)
    create_blend_state : Proc(ID3D11Device1*, D3D11_BLEND_DESC*, ID3D11BlendState*, HRESULT)
    create_depth_stencil_state : Proc(ID3D11Device1*, D3D11_DEPTH_STENCIL_DESC*, ID3D11DepthStencilState*, HRESULT)
    create_rasterizer_state : Proc(ID3D11Device1*, D3D11_RASTERIZER_DESC*, ID3D11RasterizerState*, HRESULT)
    create_sampler_state : Proc(ID3D11Device1*, D3D11_SAMPLER_DESC*, ID3D11SamplerState*, HRESULT)
    create_query : Proc(ID3D11Device1*, D3D11_QUERY_DESC*, ID3D11Query*, HRESULT)
    create_predicate : Proc(ID3D11Device1*, D3D11_QUERY_DESC*, ID3D11Predicate*, HRESULT)
    create_counter : Proc(ID3D11Device1*, D3D11_COUNTER_DESC*, ID3D11Counter*, HRESULT)
    create_deferred_context : Proc(ID3D11Device1*, UInt32, ID3D11DeviceContext*, HRESULT)
    open_shared_resource : Proc(ID3D11Device1*, LibC::HANDLE, Guid*, Void**, HRESULT)
    check_format_support : Proc(ID3D11Device1*, DXGI_FORMAT, UInt32*, HRESULT)
    check_multisample_quality_levels : Proc(ID3D11Device1*, DXGI_FORMAT, UInt32, UInt32*, HRESULT)
    check_counter_info : Proc(ID3D11Device1*, D3D11_COUNTER_INFO*, Void)
    check_counter : Proc(ID3D11Device1*, D3D11_COUNTER_DESC*, D3D11_COUNTER_TYPE*, UInt32*, UInt8*, UInt32*, UInt8*, UInt32*, UInt8*, UInt32*, HRESULT)
    check_feature_support : Proc(ID3D11Device1*, D3D11_FEATURE, Void*, UInt32, HRESULT)
    get_private_data : Proc(ID3D11Device1*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11Device1*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11Device1*, Guid*, IUnknown, HRESULT)
    get_feature_level : Proc(ID3D11Device1*, D3D_FEATURE_LEVEL)
    get_creation_flags : Proc(ID3D11Device1*, UInt32)
    get_device_removed_reason : Proc(ID3D11Device1*, HRESULT)
    get_immediate_context : Proc(ID3D11Device1*, ID3D11DeviceContext*, Void)
    set_exception_mode : Proc(ID3D11Device1*, UInt32, HRESULT)
    get_exception_mode : Proc(ID3D11Device1*, UInt32)
    get_immediate_context1 : Proc(ID3D11Device1*, ID3D11DeviceContext1*, Void)
    create_deferred_context1 : Proc(ID3D11Device1*, UInt32, ID3D11DeviceContext1*, HRESULT)
    create_blend_state1 : Proc(ID3D11Device1*, D3D11_BLEND_DESC1*, ID3D11BlendState1*, HRESULT)
    create_rasterizer_state1 : Proc(ID3D11Device1*, D3D11_RASTERIZER_DESC1*, ID3D11RasterizerState1*, HRESULT)
    create_device_context_state : Proc(ID3D11Device1*, UInt32, D3D_FEATURE_LEVEL*, UInt32, UInt32, Guid*, D3D_FEATURE_LEVEL*, ID3DDeviceContextState*, HRESULT)
    open_shared_resource1 : Proc(ID3D11Device1*, LibC::HANDLE, Guid*, Void**, HRESULT)
    open_shared_resource_by_name : Proc(ID3D11Device1*, LibC::LPWSTR, UInt32, Guid*, Void**, HRESULT)
  end

  ID3D11Device1_GUID = "a04bfb29-08ef-43d6-a49c-a9bdbdcbe686"
  IID_ID3D11Device1 = LibC::GUID.new(0xa04bfb29_u32, 0x8ef_u16, 0x43d6_u16, StaticArray[0xa4_u8, 0x9c_u8, 0xa9_u8, 0xbd_u8, 0xbd_u8, 0xcb_u8, 0xe6_u8, 0x86_u8])
  struct ID3D11Device1
    lpVtbl : ID3D11Device1VTbl*
  end

  struct ID3DUserDefinedAnnotationVTbl
    query_interface : Proc(ID3DUserDefinedAnnotation*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3DUserDefinedAnnotation*, UInt32)
    release : Proc(ID3DUserDefinedAnnotation*, UInt32)
    begin_event : Proc(ID3DUserDefinedAnnotation*, LibC::LPWSTR, Int32)
    end_event : Proc(ID3DUserDefinedAnnotation*, Int32)
    set_marker : Proc(ID3DUserDefinedAnnotation*, LibC::LPWSTR, Void)
    get_status : Proc(ID3DUserDefinedAnnotation*, LibC::BOOL)
  end

  ID3DUserDefinedAnnotation_GUID = "b2daad8b-03d4-4dbf-95eb-32ab4b63d0ab"
  IID_ID3DUserDefinedAnnotation = LibC::GUID.new(0xb2daad8b_u32, 0x3d4_u16, 0x4dbf_u16, StaticArray[0x95_u8, 0xeb_u8, 0x32_u8, 0xab_u8, 0x4b_u8, 0x63_u8, 0xd0_u8, 0xab_u8])
  struct ID3DUserDefinedAnnotation
    lpVtbl : ID3DUserDefinedAnnotationVTbl*
  end

  struct ID3D11DeviceContext2VTbl
    query_interface : Proc(ID3D11DeviceContext2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11DeviceContext2*, UInt32)
    release : Proc(ID3D11DeviceContext2*, UInt32)
    get_device : Proc(ID3D11DeviceContext2*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11DeviceContext2*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11DeviceContext2*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11DeviceContext2*, Guid*, IUnknown, HRESULT)
    vs_set_constant_buffers : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11Buffer*, Void)
    ps_set_shader_resources : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    ps_set_shader : Proc(ID3D11DeviceContext2*, ID3D11PixelShader, ID3D11ClassInstance*, UInt32, Void)
    ps_set_samplers : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11SamplerState*, Void)
    vs_set_shader : Proc(ID3D11DeviceContext2*, ID3D11VertexShader, ID3D11ClassInstance*, UInt32, Void)
    draw_indexed : Proc(ID3D11DeviceContext2*, UInt32, UInt32, Int32, Void)
    draw : Proc(ID3D11DeviceContext2*, UInt32, UInt32, Void)
    map : Proc(ID3D11DeviceContext2*, ID3D11Resource, UInt32, D3D11_MAP, UInt32, D3D11_MAPPED_SUBRESOURCE*, HRESULT)
    unmap : Proc(ID3D11DeviceContext2*, ID3D11Resource, UInt32, Void)
    ps_set_constant_buffers : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11Buffer*, Void)
    ia_set_input_layout : Proc(ID3D11DeviceContext2*, ID3D11InputLayout, Void)
    ia_set_vertex_buffers : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    ia_set_index_buffer : Proc(ID3D11DeviceContext2*, ID3D11Buffer, DXGI_FORMAT, UInt32, Void)
    draw_indexed_instanced : Proc(ID3D11DeviceContext2*, UInt32, UInt32, UInt32, Int32, UInt32, Void)
    draw_instanced : Proc(ID3D11DeviceContext2*, UInt32, UInt32, UInt32, UInt32, Void)
    gs_set_constant_buffers : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11Buffer*, Void)
    gs_set_shader : Proc(ID3D11DeviceContext2*, ID3D11GeometryShader, ID3D11ClassInstance*, UInt32, Void)
    ia_set_primitive_topology : Proc(ID3D11DeviceContext2*, D3D_PRIMITIVE_TOPOLOGY, Void)
    vs_set_shader_resources : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    vs_set_samplers : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11SamplerState*, Void)
    begin_ : Proc(ID3D11DeviceContext2*, ID3D11Asynchronous, Void)
    end_ : Proc(ID3D11DeviceContext2*, ID3D11Asynchronous, Void)
    get_data : Proc(ID3D11DeviceContext2*, ID3D11Asynchronous, Void*, UInt32, UInt32, HRESULT)
    set_predication : Proc(ID3D11DeviceContext2*, ID3D11Predicate, LibC::BOOL, Void)
    gs_set_shader_resources : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    gs_set_samplers : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11SamplerState*, Void)
    om_set_render_targets : Proc(ID3D11DeviceContext2*, UInt32, ID3D11RenderTargetView*, ID3D11DepthStencilView, Void)
    om_set_render_targets_and_unordered_access_views : Proc(ID3D11DeviceContext2*, UInt32, ID3D11RenderTargetView*, ID3D11DepthStencilView, UInt32, UInt32, ID3D11UnorderedAccessView*, UInt32*, Void)
    om_set_blend_state : Proc(ID3D11DeviceContext2*, ID3D11BlendState, Float32*, UInt32, Void)
    om_set_depth_stencil_state : Proc(ID3D11DeviceContext2*, ID3D11DepthStencilState, UInt32, Void)
    so_set_targets : Proc(ID3D11DeviceContext2*, UInt32, ID3D11Buffer*, UInt32*, Void)
    draw_auto : Proc(ID3D11DeviceContext2*, Void)
    draw_indexed_instanced_indirect : Proc(ID3D11DeviceContext2*, ID3D11Buffer, UInt32, Void)
    draw_instanced_indirect : Proc(ID3D11DeviceContext2*, ID3D11Buffer, UInt32, Void)
    dispatch : Proc(ID3D11DeviceContext2*, UInt32, UInt32, UInt32, Void)
    dispatch_indirect : Proc(ID3D11DeviceContext2*, ID3D11Buffer, UInt32, Void)
    rs_set_state : Proc(ID3D11DeviceContext2*, ID3D11RasterizerState, Void)
    rs_set_viewports : Proc(ID3D11DeviceContext2*, UInt32, D3D11_VIEWPORT*, Void)
    rs_set_scissor_rects : Proc(ID3D11DeviceContext2*, UInt32, RECT*, Void)
    copy_subresource_region : Proc(ID3D11DeviceContext2*, ID3D11Resource, UInt32, UInt32, UInt32, UInt32, ID3D11Resource, UInt32, D3D11_BOX*, Void)
    copy_resource : Proc(ID3D11DeviceContext2*, ID3D11Resource, ID3D11Resource, Void)
    update_subresource : Proc(ID3D11DeviceContext2*, ID3D11Resource, UInt32, D3D11_BOX*, Void*, UInt32, UInt32, Void)
    copy_structure_count : Proc(ID3D11DeviceContext2*, ID3D11Buffer, UInt32, ID3D11UnorderedAccessView, Void)
    clear_render_target_view : Proc(ID3D11DeviceContext2*, ID3D11RenderTargetView, Float32*, Void)
    clear_unordered_access_view_uint : Proc(ID3D11DeviceContext2*, ID3D11UnorderedAccessView, UInt32*, Void)
    clear_unordered_access_view_float : Proc(ID3D11DeviceContext2*, ID3D11UnorderedAccessView, Float32*, Void)
    clear_depth_stencil_view : Proc(ID3D11DeviceContext2*, ID3D11DepthStencilView, UInt32, Float32, UInt8, Void)
    generate_mips : Proc(ID3D11DeviceContext2*, ID3D11ShaderResourceView, Void)
    set_resource_min_lod : Proc(ID3D11DeviceContext2*, ID3D11Resource, Float32, Void)
    get_resource_min_lod : Proc(ID3D11DeviceContext2*, ID3D11Resource, Float32)
    resolve_subresource : Proc(ID3D11DeviceContext2*, ID3D11Resource, UInt32, ID3D11Resource, UInt32, DXGI_FORMAT, Void)
    execute_command_list : Proc(ID3D11DeviceContext2*, ID3D11CommandList, LibC::BOOL, Void)
    hs_set_shader_resources : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    hs_set_shader : Proc(ID3D11DeviceContext2*, ID3D11HullShader, ID3D11ClassInstance*, UInt32, Void)
    hs_set_samplers : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11SamplerState*, Void)
    hs_set_constant_buffers : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11Buffer*, Void)
    ds_set_shader_resources : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    ds_set_shader : Proc(ID3D11DeviceContext2*, ID3D11DomainShader, ID3D11ClassInstance*, UInt32, Void)
    ds_set_samplers : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11SamplerState*, Void)
    ds_set_constant_buffers : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11Buffer*, Void)
    cs_set_shader_resources : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    cs_set_unordered_access_views : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11UnorderedAccessView*, UInt32*, Void)
    cs_set_shader : Proc(ID3D11DeviceContext2*, ID3D11ComputeShader, ID3D11ClassInstance*, UInt32, Void)
    cs_set_samplers : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11SamplerState*, Void)
    cs_set_constant_buffers : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11Buffer*, Void)
    vs_get_constant_buffers : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11Buffer*, Void)
    ps_get_shader_resources : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    ps_get_shader : Proc(ID3D11DeviceContext2*, ID3D11PixelShader*, ID3D11ClassInstance*, UInt32*, Void)
    ps_get_samplers : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11SamplerState*, Void)
    vs_get_shader : Proc(ID3D11DeviceContext2*, ID3D11VertexShader*, ID3D11ClassInstance*, UInt32*, Void)
    ps_get_constant_buffers : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11Buffer*, Void)
    ia_get_input_layout : Proc(ID3D11DeviceContext2*, ID3D11InputLayout*, Void)
    ia_get_vertex_buffers : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    ia_get_index_buffer : Proc(ID3D11DeviceContext2*, ID3D11Buffer*, DXGI_FORMAT*, UInt32*, Void)
    gs_get_constant_buffers : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11Buffer*, Void)
    gs_get_shader : Proc(ID3D11DeviceContext2*, ID3D11GeometryShader*, ID3D11ClassInstance*, UInt32*, Void)
    ia_get_primitive_topology : Proc(ID3D11DeviceContext2*, D3D_PRIMITIVE_TOPOLOGY*, Void)
    vs_get_shader_resources : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    vs_get_samplers : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11SamplerState*, Void)
    get_predication : Proc(ID3D11DeviceContext2*, ID3D11Predicate*, LibC::BOOL*, Void)
    gs_get_shader_resources : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    gs_get_samplers : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11SamplerState*, Void)
    om_get_render_targets : Proc(ID3D11DeviceContext2*, UInt32, ID3D11RenderTargetView*, ID3D11DepthStencilView*, Void)
    om_get_render_targets_and_unordered_access_views : Proc(ID3D11DeviceContext2*, UInt32, ID3D11RenderTargetView*, ID3D11DepthStencilView*, UInt32, UInt32, ID3D11UnorderedAccessView*, Void)
    om_get_blend_state : Proc(ID3D11DeviceContext2*, ID3D11BlendState*, Float32*, UInt32*, Void)
    om_get_depth_stencil_state : Proc(ID3D11DeviceContext2*, ID3D11DepthStencilState*, UInt32*, Void)
    so_get_targets : Proc(ID3D11DeviceContext2*, UInt32, ID3D11Buffer*, Void)
    rs_get_state : Proc(ID3D11DeviceContext2*, ID3D11RasterizerState*, Void)
    rs_get_viewports : Proc(ID3D11DeviceContext2*, UInt32*, D3D11_VIEWPORT*, Void)
    rs_get_scissor_rects : Proc(ID3D11DeviceContext2*, UInt32*, RECT*, Void)
    hs_get_shader_resources : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    hs_get_shader : Proc(ID3D11DeviceContext2*, ID3D11HullShader*, ID3D11ClassInstance*, UInt32*, Void)
    hs_get_samplers : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11SamplerState*, Void)
    hs_get_constant_buffers : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11Buffer*, Void)
    ds_get_shader_resources : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    ds_get_shader : Proc(ID3D11DeviceContext2*, ID3D11DomainShader*, ID3D11ClassInstance*, UInt32*, Void)
    ds_get_samplers : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11SamplerState*, Void)
    ds_get_constant_buffers : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11Buffer*, Void)
    cs_get_shader_resources : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    cs_get_unordered_access_views : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11UnorderedAccessView*, Void)
    cs_get_shader : Proc(ID3D11DeviceContext2*, ID3D11ComputeShader*, ID3D11ClassInstance*, UInt32*, Void)
    cs_get_samplers : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11SamplerState*, Void)
    cs_get_constant_buffers : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11Buffer*, Void)
    clear_state : Proc(ID3D11DeviceContext2*, Void)
    flush : Proc(ID3D11DeviceContext2*, Void)
    get_type : Proc(ID3D11DeviceContext2*, D3D11_DEVICE_CONTEXT_TYPE)
    get_context_flags : Proc(ID3D11DeviceContext2*, UInt32)
    finish_command_list : Proc(ID3D11DeviceContext2*, LibC::BOOL, ID3D11CommandList*, HRESULT)
    copy_subresource_region1 : Proc(ID3D11DeviceContext2*, ID3D11Resource, UInt32, UInt32, UInt32, UInt32, ID3D11Resource, UInt32, D3D11_BOX*, UInt32, Void)
    update_subresource1 : Proc(ID3D11DeviceContext2*, ID3D11Resource, UInt32, D3D11_BOX*, Void*, UInt32, UInt32, UInt32, Void)
    discard_resource : Proc(ID3D11DeviceContext2*, ID3D11Resource, Void)
    discard_view : Proc(ID3D11DeviceContext2*, ID3D11View, Void)
    vs_set_constant_buffers1 : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    hs_set_constant_buffers1 : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    ds_set_constant_buffers1 : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    gs_set_constant_buffers1 : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    ps_set_constant_buffers1 : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    cs_set_constant_buffers1 : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    vs_get_constant_buffers1 : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    hs_get_constant_buffers1 : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    ds_get_constant_buffers1 : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    gs_get_constant_buffers1 : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    ps_get_constant_buffers1 : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    cs_get_constant_buffers1 : Proc(ID3D11DeviceContext2*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    swap_device_context_state : Proc(ID3D11DeviceContext2*, ID3DDeviceContextState, ID3DDeviceContextState*, Void)
    clear_view : Proc(ID3D11DeviceContext2*, ID3D11View, Float32*, RECT*, UInt32, Void)
    discard_view1 : Proc(ID3D11DeviceContext2*, ID3D11View, RECT*, UInt32, Void)
    update_tile_mappings : Proc(ID3D11DeviceContext2*, ID3D11Resource, UInt32, D3D11_TILED_RESOURCE_COORDINATE*, D3D11_TILE_REGION_SIZE*, ID3D11Buffer, UInt32, UInt32*, UInt32*, UInt32*, UInt32, HRESULT)
    copy_tile_mappings : Proc(ID3D11DeviceContext2*, ID3D11Resource, D3D11_TILED_RESOURCE_COORDINATE*, ID3D11Resource, D3D11_TILED_RESOURCE_COORDINATE*, D3D11_TILE_REGION_SIZE*, UInt32, HRESULT)
    copy_tiles : Proc(ID3D11DeviceContext2*, ID3D11Resource, D3D11_TILED_RESOURCE_COORDINATE*, D3D11_TILE_REGION_SIZE*, ID3D11Buffer, UInt64, UInt32, Void)
    update_tiles : Proc(ID3D11DeviceContext2*, ID3D11Resource, D3D11_TILED_RESOURCE_COORDINATE*, D3D11_TILE_REGION_SIZE*, Void*, UInt32, Void)
    resize_tile_pool : Proc(ID3D11DeviceContext2*, ID3D11Buffer, UInt64, HRESULT)
    tiled_resource_barrier : Proc(ID3D11DeviceContext2*, ID3D11DeviceChild, ID3D11DeviceChild, Void)
    is_annotation_enabled : Proc(ID3D11DeviceContext2*, LibC::BOOL)
    set_marker_int : Proc(ID3D11DeviceContext2*, LibC::LPWSTR, Int32, Void)
    begin_event_int : Proc(ID3D11DeviceContext2*, LibC::LPWSTR, Int32, Void)
    end_event : Proc(ID3D11DeviceContext2*, Void)
  end

  ID3D11DeviceContext2_GUID = "420d5b32-b90c-4da4-bef0-359f6a24a83a"
  IID_ID3D11DeviceContext2 = LibC::GUID.new(0x420d5b32_u32, 0xb90c_u16, 0x4da4_u16, StaticArray[0xbe_u8, 0xf0_u8, 0x35_u8, 0x9f_u8, 0x6a_u8, 0x24_u8, 0xa8_u8, 0x3a_u8])
  struct ID3D11DeviceContext2
    lpVtbl : ID3D11DeviceContext2VTbl*
  end

  struct ID3D11Device2VTbl
    query_interface : Proc(ID3D11Device2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11Device2*, UInt32)
    release : Proc(ID3D11Device2*, UInt32)
    create_buffer : Proc(ID3D11Device2*, D3D11_BUFFER_DESC*, D3D11_SUBRESOURCE_DATA*, ID3D11Buffer*, HRESULT)
    create_texture1_d : Proc(ID3D11Device2*, D3D11_TEXTURE1D_DESC*, D3D11_SUBRESOURCE_DATA*, ID3D11Texture1D*, HRESULT)
    create_texture2_d : Proc(ID3D11Device2*, D3D11_TEXTURE2D_DESC*, D3D11_SUBRESOURCE_DATA*, ID3D11Texture2D*, HRESULT)
    create_texture3_d : Proc(ID3D11Device2*, D3D11_TEXTURE3D_DESC*, D3D11_SUBRESOURCE_DATA*, ID3D11Texture3D*, HRESULT)
    create_shader_resource_view : Proc(ID3D11Device2*, ID3D11Resource, D3D11_SHADER_RESOURCE_VIEW_DESC*, ID3D11ShaderResourceView*, HRESULT)
    create_unordered_access_view : Proc(ID3D11Device2*, ID3D11Resource, D3D11_UNORDERED_ACCESS_VIEW_DESC*, ID3D11UnorderedAccessView*, HRESULT)
    create_render_target_view : Proc(ID3D11Device2*, ID3D11Resource, D3D11_RENDER_TARGET_VIEW_DESC*, ID3D11RenderTargetView*, HRESULT)
    create_depth_stencil_view : Proc(ID3D11Device2*, ID3D11Resource, D3D11_DEPTH_STENCIL_VIEW_DESC*, ID3D11DepthStencilView*, HRESULT)
    create_input_layout : Proc(ID3D11Device2*, D3D11_INPUT_ELEMENT_DESC*, UInt32, Void*, LibC::UINT_PTR, ID3D11InputLayout*, HRESULT)
    create_vertex_shader : Proc(ID3D11Device2*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11VertexShader*, HRESULT)
    create_geometry_shader : Proc(ID3D11Device2*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11GeometryShader*, HRESULT)
    create_geometry_shader_with_stream_output : Proc(ID3D11Device2*, Void*, LibC::UINT_PTR, D3D11_SO_DECLARATION_ENTRY*, UInt32, UInt32*, UInt32, UInt32, ID3D11ClassLinkage, ID3D11GeometryShader*, HRESULT)
    create_pixel_shader : Proc(ID3D11Device2*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11PixelShader*, HRESULT)
    create_hull_shader : Proc(ID3D11Device2*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11HullShader*, HRESULT)
    create_domain_shader : Proc(ID3D11Device2*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11DomainShader*, HRESULT)
    create_compute_shader : Proc(ID3D11Device2*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11ComputeShader*, HRESULT)
    create_class_linkage : Proc(ID3D11Device2*, ID3D11ClassLinkage*, HRESULT)
    create_blend_state : Proc(ID3D11Device2*, D3D11_BLEND_DESC*, ID3D11BlendState*, HRESULT)
    create_depth_stencil_state : Proc(ID3D11Device2*, D3D11_DEPTH_STENCIL_DESC*, ID3D11DepthStencilState*, HRESULT)
    create_rasterizer_state : Proc(ID3D11Device2*, D3D11_RASTERIZER_DESC*, ID3D11RasterizerState*, HRESULT)
    create_sampler_state : Proc(ID3D11Device2*, D3D11_SAMPLER_DESC*, ID3D11SamplerState*, HRESULT)
    create_query : Proc(ID3D11Device2*, D3D11_QUERY_DESC*, ID3D11Query*, HRESULT)
    create_predicate : Proc(ID3D11Device2*, D3D11_QUERY_DESC*, ID3D11Predicate*, HRESULT)
    create_counter : Proc(ID3D11Device2*, D3D11_COUNTER_DESC*, ID3D11Counter*, HRESULT)
    create_deferred_context : Proc(ID3D11Device2*, UInt32, ID3D11DeviceContext*, HRESULT)
    open_shared_resource : Proc(ID3D11Device2*, LibC::HANDLE, Guid*, Void**, HRESULT)
    check_format_support : Proc(ID3D11Device2*, DXGI_FORMAT, UInt32*, HRESULT)
    check_multisample_quality_levels : Proc(ID3D11Device2*, DXGI_FORMAT, UInt32, UInt32*, HRESULT)
    check_counter_info : Proc(ID3D11Device2*, D3D11_COUNTER_INFO*, Void)
    check_counter : Proc(ID3D11Device2*, D3D11_COUNTER_DESC*, D3D11_COUNTER_TYPE*, UInt32*, UInt8*, UInt32*, UInt8*, UInt32*, UInt8*, UInt32*, HRESULT)
    check_feature_support : Proc(ID3D11Device2*, D3D11_FEATURE, Void*, UInt32, HRESULT)
    get_private_data : Proc(ID3D11Device2*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11Device2*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11Device2*, Guid*, IUnknown, HRESULT)
    get_feature_level : Proc(ID3D11Device2*, D3D_FEATURE_LEVEL)
    get_creation_flags : Proc(ID3D11Device2*, UInt32)
    get_device_removed_reason : Proc(ID3D11Device2*, HRESULT)
    get_immediate_context : Proc(ID3D11Device2*, ID3D11DeviceContext*, Void)
    set_exception_mode : Proc(ID3D11Device2*, UInt32, HRESULT)
    get_exception_mode : Proc(ID3D11Device2*, UInt32)
    get_immediate_context1 : Proc(ID3D11Device2*, ID3D11DeviceContext1*, Void)
    create_deferred_context1 : Proc(ID3D11Device2*, UInt32, ID3D11DeviceContext1*, HRESULT)
    create_blend_state1 : Proc(ID3D11Device2*, D3D11_BLEND_DESC1*, ID3D11BlendState1*, HRESULT)
    create_rasterizer_state1 : Proc(ID3D11Device2*, D3D11_RASTERIZER_DESC1*, ID3D11RasterizerState1*, HRESULT)
    create_device_context_state : Proc(ID3D11Device2*, UInt32, D3D_FEATURE_LEVEL*, UInt32, UInt32, Guid*, D3D_FEATURE_LEVEL*, ID3DDeviceContextState*, HRESULT)
    open_shared_resource1 : Proc(ID3D11Device2*, LibC::HANDLE, Guid*, Void**, HRESULT)
    open_shared_resource_by_name : Proc(ID3D11Device2*, LibC::LPWSTR, UInt32, Guid*, Void**, HRESULT)
    get_immediate_context2 : Proc(ID3D11Device2*, ID3D11DeviceContext2*, Void)
    create_deferred_context2 : Proc(ID3D11Device2*, UInt32, ID3D11DeviceContext2*, HRESULT)
    get_resource_tiling : Proc(ID3D11Device2*, ID3D11Resource, UInt32*, D3D11_PACKED_MIP_DESC*, D3D11_TILE_SHAPE*, UInt32*, UInt32, D3D11_SUBRESOURCE_TILING*, Void)
    check_multisample_quality_levels1 : Proc(ID3D11Device2*, DXGI_FORMAT, UInt32, UInt32, UInt32*, HRESULT)
  end

  ID3D11Device2_GUID = "9d06dffa-d1e5-4d07-83a8-1bb123f2f841"
  IID_ID3D11Device2 = LibC::GUID.new(0x9d06dffa_u32, 0xd1e5_u16, 0x4d07_u16, StaticArray[0x83_u8, 0xa8_u8, 0x1b_u8, 0xb1_u8, 0x23_u8, 0xf2_u8, 0xf8_u8, 0x41_u8])
  struct ID3D11Device2
    lpVtbl : ID3D11Device2VTbl*
  end

  struct ID3D11Texture2D1VTbl
    query_interface : Proc(ID3D11Texture2D1*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11Texture2D1*, UInt32)
    release : Proc(ID3D11Texture2D1*, UInt32)
    get_device : Proc(ID3D11Texture2D1*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11Texture2D1*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11Texture2D1*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11Texture2D1*, Guid*, IUnknown, HRESULT)
    get_type : Proc(ID3D11Texture2D1*, D3D11_RESOURCE_DIMENSION*, Void)
    set_eviction_priority : Proc(ID3D11Texture2D1*, UInt32, Void)
    get_eviction_priority : Proc(ID3D11Texture2D1*, UInt32)
    get_desc : Proc(ID3D11Texture2D1*, D3D11_TEXTURE2D_DESC*, Void)
    get_desc1 : Proc(ID3D11Texture2D1*, D3D11_TEXTURE2D_DESC1*, Void)
  end

  ID3D11Texture2D1_GUID = "51218251-1e33-4617-9ccb-4d3a4367e7bb"
  IID_ID3D11Texture2D1 = LibC::GUID.new(0x51218251_u32, 0x1e33_u16, 0x4617_u16, StaticArray[0x9c_u8, 0xcb_u8, 0x4d_u8, 0x3a_u8, 0x43_u8, 0x67_u8, 0xe7_u8, 0xbb_u8])
  struct ID3D11Texture2D1
    lpVtbl : ID3D11Texture2D1VTbl*
  end

  struct ID3D11Texture3D1VTbl
    query_interface : Proc(ID3D11Texture3D1*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11Texture3D1*, UInt32)
    release : Proc(ID3D11Texture3D1*, UInt32)
    get_device : Proc(ID3D11Texture3D1*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11Texture3D1*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11Texture3D1*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11Texture3D1*, Guid*, IUnknown, HRESULT)
    get_type : Proc(ID3D11Texture3D1*, D3D11_RESOURCE_DIMENSION*, Void)
    set_eviction_priority : Proc(ID3D11Texture3D1*, UInt32, Void)
    get_eviction_priority : Proc(ID3D11Texture3D1*, UInt32)
    get_desc : Proc(ID3D11Texture3D1*, D3D11_TEXTURE3D_DESC*, Void)
    get_desc1 : Proc(ID3D11Texture3D1*, D3D11_TEXTURE3D_DESC1*, Void)
  end

  ID3D11Texture3D1_GUID = "0c711683-2853-4846-9bb0-f3e60639e46a"
  IID_ID3D11Texture3D1 = LibC::GUID.new(0xc711683_u32, 0x2853_u16, 0x4846_u16, StaticArray[0x9b_u8, 0xb0_u8, 0xf3_u8, 0xe6_u8, 0x6_u8, 0x39_u8, 0xe4_u8, 0x6a_u8])
  struct ID3D11Texture3D1
    lpVtbl : ID3D11Texture3D1VTbl*
  end

  struct ID3D11RasterizerState2VTbl
    query_interface : Proc(ID3D11RasterizerState2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11RasterizerState2*, UInt32)
    release : Proc(ID3D11RasterizerState2*, UInt32)
    get_device : Proc(ID3D11RasterizerState2*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11RasterizerState2*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11RasterizerState2*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11RasterizerState2*, Guid*, IUnknown, HRESULT)
    get_desc : Proc(ID3D11RasterizerState2*, D3D11_RASTERIZER_DESC*, Void)
    get_desc1 : Proc(ID3D11RasterizerState2*, D3D11_RASTERIZER_DESC1*, Void)
    get_desc2 : Proc(ID3D11RasterizerState2*, D3D11_RASTERIZER_DESC2*, Void)
  end

  ID3D11RasterizerState2_GUID = "6fbd02fb-209f-46c4-b059-2ed15586a6ac"
  IID_ID3D11RasterizerState2 = LibC::GUID.new(0x6fbd02fb_u32, 0x209f_u16, 0x46c4_u16, StaticArray[0xb0_u8, 0x59_u8, 0x2e_u8, 0xd1_u8, 0x55_u8, 0x86_u8, 0xa6_u8, 0xac_u8])
  struct ID3D11RasterizerState2
    lpVtbl : ID3D11RasterizerState2VTbl*
  end

  struct ID3D11ShaderResourceView1VTbl
    query_interface : Proc(ID3D11ShaderResourceView1*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11ShaderResourceView1*, UInt32)
    release : Proc(ID3D11ShaderResourceView1*, UInt32)
    get_device : Proc(ID3D11ShaderResourceView1*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11ShaderResourceView1*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11ShaderResourceView1*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11ShaderResourceView1*, Guid*, IUnknown, HRESULT)
    get_resource : Proc(ID3D11ShaderResourceView1*, ID3D11Resource*, Void)
    get_desc : Proc(ID3D11ShaderResourceView1*, D3D11_SHADER_RESOURCE_VIEW_DESC*, Void)
    get_desc1 : Proc(ID3D11ShaderResourceView1*, D3D11_SHADER_RESOURCE_VIEW_DESC1*, Void)
  end

  ID3D11ShaderResourceView1_GUID = "91308b87-9040-411d-8c67-c39253ce3802"
  IID_ID3D11ShaderResourceView1 = LibC::GUID.new(0x91308b87_u32, 0x9040_u16, 0x411d_u16, StaticArray[0x8c_u8, 0x67_u8, 0xc3_u8, 0x92_u8, 0x53_u8, 0xce_u8, 0x38_u8, 0x2_u8])
  struct ID3D11ShaderResourceView1
    lpVtbl : ID3D11ShaderResourceView1VTbl*
  end

  struct ID3D11RenderTargetView1VTbl
    query_interface : Proc(ID3D11RenderTargetView1*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11RenderTargetView1*, UInt32)
    release : Proc(ID3D11RenderTargetView1*, UInt32)
    get_device : Proc(ID3D11RenderTargetView1*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11RenderTargetView1*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11RenderTargetView1*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11RenderTargetView1*, Guid*, IUnknown, HRESULT)
    get_resource : Proc(ID3D11RenderTargetView1*, ID3D11Resource*, Void)
    get_desc : Proc(ID3D11RenderTargetView1*, D3D11_RENDER_TARGET_VIEW_DESC*, Void)
    get_desc1 : Proc(ID3D11RenderTargetView1*, D3D11_RENDER_TARGET_VIEW_DESC1*, Void)
  end

  ID3D11RenderTargetView1_GUID = "ffbe2e23-f011-418a-ac56-5ceed7c5b94b"
  IID_ID3D11RenderTargetView1 = LibC::GUID.new(0xffbe2e23_u32, 0xf011_u16, 0x418a_u16, StaticArray[0xac_u8, 0x56_u8, 0x5c_u8, 0xee_u8, 0xd7_u8, 0xc5_u8, 0xb9_u8, 0x4b_u8])
  struct ID3D11RenderTargetView1
    lpVtbl : ID3D11RenderTargetView1VTbl*
  end

  struct ID3D11UnorderedAccessView1VTbl
    query_interface : Proc(ID3D11UnorderedAccessView1*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11UnorderedAccessView1*, UInt32)
    release : Proc(ID3D11UnorderedAccessView1*, UInt32)
    get_device : Proc(ID3D11UnorderedAccessView1*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11UnorderedAccessView1*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11UnorderedAccessView1*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11UnorderedAccessView1*, Guid*, IUnknown, HRESULT)
    get_resource : Proc(ID3D11UnorderedAccessView1*, ID3D11Resource*, Void)
    get_desc : Proc(ID3D11UnorderedAccessView1*, D3D11_UNORDERED_ACCESS_VIEW_DESC*, Void)
    get_desc1 : Proc(ID3D11UnorderedAccessView1*, D3D11_UNORDERED_ACCESS_VIEW_DESC1*, Void)
  end

  ID3D11UnorderedAccessView1_GUID = "7b3b6153-a886-4544-ab37-6537c8500403"
  IID_ID3D11UnorderedAccessView1 = LibC::GUID.new(0x7b3b6153_u32, 0xa886_u16, 0x4544_u16, StaticArray[0xab_u8, 0x37_u8, 0x65_u8, 0x37_u8, 0xc8_u8, 0x50_u8, 0x4_u8, 0x3_u8])
  struct ID3D11UnorderedAccessView1
    lpVtbl : ID3D11UnorderedAccessView1VTbl*
  end

  struct ID3D11Query1VTbl
    query_interface : Proc(ID3D11Query1*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11Query1*, UInt32)
    release : Proc(ID3D11Query1*, UInt32)
    get_device : Proc(ID3D11Query1*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11Query1*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11Query1*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11Query1*, Guid*, IUnknown, HRESULT)
    get_data_size : Proc(ID3D11Query1*, UInt32)
    get_desc : Proc(ID3D11Query1*, D3D11_QUERY_DESC*, Void)
    get_desc1 : Proc(ID3D11Query1*, D3D11_QUERY_DESC1*, Void)
  end

  ID3D11Query1_GUID = "631b4766-36dc-461d-8db6-c47e13e60916"
  IID_ID3D11Query1 = LibC::GUID.new(0x631b4766_u32, 0x36dc_u16, 0x461d_u16, StaticArray[0x8d_u8, 0xb6_u8, 0xc4_u8, 0x7e_u8, 0x13_u8, 0xe6_u8, 0x9_u8, 0x16_u8])
  struct ID3D11Query1
    lpVtbl : ID3D11Query1VTbl*
  end

  struct ID3D11DeviceContext3VTbl
    query_interface : Proc(ID3D11DeviceContext3*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11DeviceContext3*, UInt32)
    release : Proc(ID3D11DeviceContext3*, UInt32)
    get_device : Proc(ID3D11DeviceContext3*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11DeviceContext3*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11DeviceContext3*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11DeviceContext3*, Guid*, IUnknown, HRESULT)
    vs_set_constant_buffers : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11Buffer*, Void)
    ps_set_shader_resources : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    ps_set_shader : Proc(ID3D11DeviceContext3*, ID3D11PixelShader, ID3D11ClassInstance*, UInt32, Void)
    ps_set_samplers : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11SamplerState*, Void)
    vs_set_shader : Proc(ID3D11DeviceContext3*, ID3D11VertexShader, ID3D11ClassInstance*, UInt32, Void)
    draw_indexed : Proc(ID3D11DeviceContext3*, UInt32, UInt32, Int32, Void)
    draw : Proc(ID3D11DeviceContext3*, UInt32, UInt32, Void)
    map : Proc(ID3D11DeviceContext3*, ID3D11Resource, UInt32, D3D11_MAP, UInt32, D3D11_MAPPED_SUBRESOURCE*, HRESULT)
    unmap : Proc(ID3D11DeviceContext3*, ID3D11Resource, UInt32, Void)
    ps_set_constant_buffers : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11Buffer*, Void)
    ia_set_input_layout : Proc(ID3D11DeviceContext3*, ID3D11InputLayout, Void)
    ia_set_vertex_buffers : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    ia_set_index_buffer : Proc(ID3D11DeviceContext3*, ID3D11Buffer, DXGI_FORMAT, UInt32, Void)
    draw_indexed_instanced : Proc(ID3D11DeviceContext3*, UInt32, UInt32, UInt32, Int32, UInt32, Void)
    draw_instanced : Proc(ID3D11DeviceContext3*, UInt32, UInt32, UInt32, UInt32, Void)
    gs_set_constant_buffers : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11Buffer*, Void)
    gs_set_shader : Proc(ID3D11DeviceContext3*, ID3D11GeometryShader, ID3D11ClassInstance*, UInt32, Void)
    ia_set_primitive_topology : Proc(ID3D11DeviceContext3*, D3D_PRIMITIVE_TOPOLOGY, Void)
    vs_set_shader_resources : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    vs_set_samplers : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11SamplerState*, Void)
    begin_ : Proc(ID3D11DeviceContext3*, ID3D11Asynchronous, Void)
    end_ : Proc(ID3D11DeviceContext3*, ID3D11Asynchronous, Void)
    get_data : Proc(ID3D11DeviceContext3*, ID3D11Asynchronous, Void*, UInt32, UInt32, HRESULT)
    set_predication : Proc(ID3D11DeviceContext3*, ID3D11Predicate, LibC::BOOL, Void)
    gs_set_shader_resources : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    gs_set_samplers : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11SamplerState*, Void)
    om_set_render_targets : Proc(ID3D11DeviceContext3*, UInt32, ID3D11RenderTargetView*, ID3D11DepthStencilView, Void)
    om_set_render_targets_and_unordered_access_views : Proc(ID3D11DeviceContext3*, UInt32, ID3D11RenderTargetView*, ID3D11DepthStencilView, UInt32, UInt32, ID3D11UnorderedAccessView*, UInt32*, Void)
    om_set_blend_state : Proc(ID3D11DeviceContext3*, ID3D11BlendState, Float32*, UInt32, Void)
    om_set_depth_stencil_state : Proc(ID3D11DeviceContext3*, ID3D11DepthStencilState, UInt32, Void)
    so_set_targets : Proc(ID3D11DeviceContext3*, UInt32, ID3D11Buffer*, UInt32*, Void)
    draw_auto : Proc(ID3D11DeviceContext3*, Void)
    draw_indexed_instanced_indirect : Proc(ID3D11DeviceContext3*, ID3D11Buffer, UInt32, Void)
    draw_instanced_indirect : Proc(ID3D11DeviceContext3*, ID3D11Buffer, UInt32, Void)
    dispatch : Proc(ID3D11DeviceContext3*, UInt32, UInt32, UInt32, Void)
    dispatch_indirect : Proc(ID3D11DeviceContext3*, ID3D11Buffer, UInt32, Void)
    rs_set_state : Proc(ID3D11DeviceContext3*, ID3D11RasterizerState, Void)
    rs_set_viewports : Proc(ID3D11DeviceContext3*, UInt32, D3D11_VIEWPORT*, Void)
    rs_set_scissor_rects : Proc(ID3D11DeviceContext3*, UInt32, RECT*, Void)
    copy_subresource_region : Proc(ID3D11DeviceContext3*, ID3D11Resource, UInt32, UInt32, UInt32, UInt32, ID3D11Resource, UInt32, D3D11_BOX*, Void)
    copy_resource : Proc(ID3D11DeviceContext3*, ID3D11Resource, ID3D11Resource, Void)
    update_subresource : Proc(ID3D11DeviceContext3*, ID3D11Resource, UInt32, D3D11_BOX*, Void*, UInt32, UInt32, Void)
    copy_structure_count : Proc(ID3D11DeviceContext3*, ID3D11Buffer, UInt32, ID3D11UnorderedAccessView, Void)
    clear_render_target_view : Proc(ID3D11DeviceContext3*, ID3D11RenderTargetView, Float32*, Void)
    clear_unordered_access_view_uint : Proc(ID3D11DeviceContext3*, ID3D11UnorderedAccessView, UInt32*, Void)
    clear_unordered_access_view_float : Proc(ID3D11DeviceContext3*, ID3D11UnorderedAccessView, Float32*, Void)
    clear_depth_stencil_view : Proc(ID3D11DeviceContext3*, ID3D11DepthStencilView, UInt32, Float32, UInt8, Void)
    generate_mips : Proc(ID3D11DeviceContext3*, ID3D11ShaderResourceView, Void)
    set_resource_min_lod : Proc(ID3D11DeviceContext3*, ID3D11Resource, Float32, Void)
    get_resource_min_lod : Proc(ID3D11DeviceContext3*, ID3D11Resource, Float32)
    resolve_subresource : Proc(ID3D11DeviceContext3*, ID3D11Resource, UInt32, ID3D11Resource, UInt32, DXGI_FORMAT, Void)
    execute_command_list : Proc(ID3D11DeviceContext3*, ID3D11CommandList, LibC::BOOL, Void)
    hs_set_shader_resources : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    hs_set_shader : Proc(ID3D11DeviceContext3*, ID3D11HullShader, ID3D11ClassInstance*, UInt32, Void)
    hs_set_samplers : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11SamplerState*, Void)
    hs_set_constant_buffers : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11Buffer*, Void)
    ds_set_shader_resources : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    ds_set_shader : Proc(ID3D11DeviceContext3*, ID3D11DomainShader, ID3D11ClassInstance*, UInt32, Void)
    ds_set_samplers : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11SamplerState*, Void)
    ds_set_constant_buffers : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11Buffer*, Void)
    cs_set_shader_resources : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    cs_set_unordered_access_views : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11UnorderedAccessView*, UInt32*, Void)
    cs_set_shader : Proc(ID3D11DeviceContext3*, ID3D11ComputeShader, ID3D11ClassInstance*, UInt32, Void)
    cs_set_samplers : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11SamplerState*, Void)
    cs_set_constant_buffers : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11Buffer*, Void)
    vs_get_constant_buffers : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11Buffer*, Void)
    ps_get_shader_resources : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    ps_get_shader : Proc(ID3D11DeviceContext3*, ID3D11PixelShader*, ID3D11ClassInstance*, UInt32*, Void)
    ps_get_samplers : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11SamplerState*, Void)
    vs_get_shader : Proc(ID3D11DeviceContext3*, ID3D11VertexShader*, ID3D11ClassInstance*, UInt32*, Void)
    ps_get_constant_buffers : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11Buffer*, Void)
    ia_get_input_layout : Proc(ID3D11DeviceContext3*, ID3D11InputLayout*, Void)
    ia_get_vertex_buffers : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    ia_get_index_buffer : Proc(ID3D11DeviceContext3*, ID3D11Buffer*, DXGI_FORMAT*, UInt32*, Void)
    gs_get_constant_buffers : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11Buffer*, Void)
    gs_get_shader : Proc(ID3D11DeviceContext3*, ID3D11GeometryShader*, ID3D11ClassInstance*, UInt32*, Void)
    ia_get_primitive_topology : Proc(ID3D11DeviceContext3*, D3D_PRIMITIVE_TOPOLOGY*, Void)
    vs_get_shader_resources : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    vs_get_samplers : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11SamplerState*, Void)
    get_predication : Proc(ID3D11DeviceContext3*, ID3D11Predicate*, LibC::BOOL*, Void)
    gs_get_shader_resources : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    gs_get_samplers : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11SamplerState*, Void)
    om_get_render_targets : Proc(ID3D11DeviceContext3*, UInt32, ID3D11RenderTargetView*, ID3D11DepthStencilView*, Void)
    om_get_render_targets_and_unordered_access_views : Proc(ID3D11DeviceContext3*, UInt32, ID3D11RenderTargetView*, ID3D11DepthStencilView*, UInt32, UInt32, ID3D11UnorderedAccessView*, Void)
    om_get_blend_state : Proc(ID3D11DeviceContext3*, ID3D11BlendState*, Float32*, UInt32*, Void)
    om_get_depth_stencil_state : Proc(ID3D11DeviceContext3*, ID3D11DepthStencilState*, UInt32*, Void)
    so_get_targets : Proc(ID3D11DeviceContext3*, UInt32, ID3D11Buffer*, Void)
    rs_get_state : Proc(ID3D11DeviceContext3*, ID3D11RasterizerState*, Void)
    rs_get_viewports : Proc(ID3D11DeviceContext3*, UInt32*, D3D11_VIEWPORT*, Void)
    rs_get_scissor_rects : Proc(ID3D11DeviceContext3*, UInt32*, RECT*, Void)
    hs_get_shader_resources : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    hs_get_shader : Proc(ID3D11DeviceContext3*, ID3D11HullShader*, ID3D11ClassInstance*, UInt32*, Void)
    hs_get_samplers : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11SamplerState*, Void)
    hs_get_constant_buffers : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11Buffer*, Void)
    ds_get_shader_resources : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    ds_get_shader : Proc(ID3D11DeviceContext3*, ID3D11DomainShader*, ID3D11ClassInstance*, UInt32*, Void)
    ds_get_samplers : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11SamplerState*, Void)
    ds_get_constant_buffers : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11Buffer*, Void)
    cs_get_shader_resources : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    cs_get_unordered_access_views : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11UnorderedAccessView*, Void)
    cs_get_shader : Proc(ID3D11DeviceContext3*, ID3D11ComputeShader*, ID3D11ClassInstance*, UInt32*, Void)
    cs_get_samplers : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11SamplerState*, Void)
    cs_get_constant_buffers : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11Buffer*, Void)
    clear_state : Proc(ID3D11DeviceContext3*, Void)
    flush : Proc(ID3D11DeviceContext3*, Void)
    get_type : Proc(ID3D11DeviceContext3*, D3D11_DEVICE_CONTEXT_TYPE)
    get_context_flags : Proc(ID3D11DeviceContext3*, UInt32)
    finish_command_list : Proc(ID3D11DeviceContext3*, LibC::BOOL, ID3D11CommandList*, HRESULT)
    copy_subresource_region1 : Proc(ID3D11DeviceContext3*, ID3D11Resource, UInt32, UInt32, UInt32, UInt32, ID3D11Resource, UInt32, D3D11_BOX*, UInt32, Void)
    update_subresource1 : Proc(ID3D11DeviceContext3*, ID3D11Resource, UInt32, D3D11_BOX*, Void*, UInt32, UInt32, UInt32, Void)
    discard_resource : Proc(ID3D11DeviceContext3*, ID3D11Resource, Void)
    discard_view : Proc(ID3D11DeviceContext3*, ID3D11View, Void)
    vs_set_constant_buffers1 : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    hs_set_constant_buffers1 : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    ds_set_constant_buffers1 : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    gs_set_constant_buffers1 : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    ps_set_constant_buffers1 : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    cs_set_constant_buffers1 : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    vs_get_constant_buffers1 : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    hs_get_constant_buffers1 : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    ds_get_constant_buffers1 : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    gs_get_constant_buffers1 : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    ps_get_constant_buffers1 : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    cs_get_constant_buffers1 : Proc(ID3D11DeviceContext3*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    swap_device_context_state : Proc(ID3D11DeviceContext3*, ID3DDeviceContextState, ID3DDeviceContextState*, Void)
    clear_view : Proc(ID3D11DeviceContext3*, ID3D11View, Float32*, RECT*, UInt32, Void)
    discard_view1 : Proc(ID3D11DeviceContext3*, ID3D11View, RECT*, UInt32, Void)
    update_tile_mappings : Proc(ID3D11DeviceContext3*, ID3D11Resource, UInt32, D3D11_TILED_RESOURCE_COORDINATE*, D3D11_TILE_REGION_SIZE*, ID3D11Buffer, UInt32, UInt32*, UInt32*, UInt32*, UInt32, HRESULT)
    copy_tile_mappings : Proc(ID3D11DeviceContext3*, ID3D11Resource, D3D11_TILED_RESOURCE_COORDINATE*, ID3D11Resource, D3D11_TILED_RESOURCE_COORDINATE*, D3D11_TILE_REGION_SIZE*, UInt32, HRESULT)
    copy_tiles : Proc(ID3D11DeviceContext3*, ID3D11Resource, D3D11_TILED_RESOURCE_COORDINATE*, D3D11_TILE_REGION_SIZE*, ID3D11Buffer, UInt64, UInt32, Void)
    update_tiles : Proc(ID3D11DeviceContext3*, ID3D11Resource, D3D11_TILED_RESOURCE_COORDINATE*, D3D11_TILE_REGION_SIZE*, Void*, UInt32, Void)
    resize_tile_pool : Proc(ID3D11DeviceContext3*, ID3D11Buffer, UInt64, HRESULT)
    tiled_resource_barrier : Proc(ID3D11DeviceContext3*, ID3D11DeviceChild, ID3D11DeviceChild, Void)
    is_annotation_enabled : Proc(ID3D11DeviceContext3*, LibC::BOOL)
    set_marker_int : Proc(ID3D11DeviceContext3*, LibC::LPWSTR, Int32, Void)
    begin_event_int : Proc(ID3D11DeviceContext3*, LibC::LPWSTR, Int32, Void)
    end_event : Proc(ID3D11DeviceContext3*, Void)
    flush1 : Proc(ID3D11DeviceContext3*, D3D11_CONTEXT_TYPE, LibC::HANDLE, Void)
    set_hardware_protection_state : Proc(ID3D11DeviceContext3*, LibC::BOOL, Void)
    get_hardware_protection_state : Proc(ID3D11DeviceContext3*, LibC::BOOL*, Void)
  end

  ID3D11DeviceContext3_GUID = "b4e3c01d-e79e-4637-91b2-510e9f4c9b8f"
  IID_ID3D11DeviceContext3 = LibC::GUID.new(0xb4e3c01d_u32, 0xe79e_u16, 0x4637_u16, StaticArray[0x91_u8, 0xb2_u8, 0x51_u8, 0xe_u8, 0x9f_u8, 0x4c_u8, 0x9b_u8, 0x8f_u8])
  struct ID3D11DeviceContext3
    lpVtbl : ID3D11DeviceContext3VTbl*
  end

  struct ID3D11FenceVTbl
    query_interface : Proc(ID3D11Fence*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11Fence*, UInt32)
    release : Proc(ID3D11Fence*, UInt32)
    get_device : Proc(ID3D11Fence*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11Fence*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11Fence*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11Fence*, Guid*, IUnknown, HRESULT)
    create_shared_handle : Proc(ID3D11Fence*, SECURITY_ATTRIBUTES*, UInt32, LibC::LPWSTR, LibC::HANDLE*, HRESULT)
    get_completed_value : Proc(ID3D11Fence*, UInt64)
    set_event_on_completion : Proc(ID3D11Fence*, UInt64, LibC::HANDLE, HRESULT)
  end

  ID3D11Fence_GUID = "affde9d1-1df7-4bb7-8a34-0f46251dab80"
  IID_ID3D11Fence = LibC::GUID.new(0xaffde9d1_u32, 0x1df7_u16, 0x4bb7_u16, StaticArray[0x8a_u8, 0x34_u8, 0xf_u8, 0x46_u8, 0x25_u8, 0x1d_u8, 0xab_u8, 0x80_u8])
  struct ID3D11Fence
    lpVtbl : ID3D11FenceVTbl*
  end

  struct ID3D11DeviceContext4VTbl
    query_interface : Proc(ID3D11DeviceContext4*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11DeviceContext4*, UInt32)
    release : Proc(ID3D11DeviceContext4*, UInt32)
    get_device : Proc(ID3D11DeviceContext4*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11DeviceContext4*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11DeviceContext4*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11DeviceContext4*, Guid*, IUnknown, HRESULT)
    vs_set_constant_buffers : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11Buffer*, Void)
    ps_set_shader_resources : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    ps_set_shader : Proc(ID3D11DeviceContext4*, ID3D11PixelShader, ID3D11ClassInstance*, UInt32, Void)
    ps_set_samplers : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11SamplerState*, Void)
    vs_set_shader : Proc(ID3D11DeviceContext4*, ID3D11VertexShader, ID3D11ClassInstance*, UInt32, Void)
    draw_indexed : Proc(ID3D11DeviceContext4*, UInt32, UInt32, Int32, Void)
    draw : Proc(ID3D11DeviceContext4*, UInt32, UInt32, Void)
    map : Proc(ID3D11DeviceContext4*, ID3D11Resource, UInt32, D3D11_MAP, UInt32, D3D11_MAPPED_SUBRESOURCE*, HRESULT)
    unmap : Proc(ID3D11DeviceContext4*, ID3D11Resource, UInt32, Void)
    ps_set_constant_buffers : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11Buffer*, Void)
    ia_set_input_layout : Proc(ID3D11DeviceContext4*, ID3D11InputLayout, Void)
    ia_set_vertex_buffers : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    ia_set_index_buffer : Proc(ID3D11DeviceContext4*, ID3D11Buffer, DXGI_FORMAT, UInt32, Void)
    draw_indexed_instanced : Proc(ID3D11DeviceContext4*, UInt32, UInt32, UInt32, Int32, UInt32, Void)
    draw_instanced : Proc(ID3D11DeviceContext4*, UInt32, UInt32, UInt32, UInt32, Void)
    gs_set_constant_buffers : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11Buffer*, Void)
    gs_set_shader : Proc(ID3D11DeviceContext4*, ID3D11GeometryShader, ID3D11ClassInstance*, UInt32, Void)
    ia_set_primitive_topology : Proc(ID3D11DeviceContext4*, D3D_PRIMITIVE_TOPOLOGY, Void)
    vs_set_shader_resources : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    vs_set_samplers : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11SamplerState*, Void)
    begin_ : Proc(ID3D11DeviceContext4*, ID3D11Asynchronous, Void)
    end_ : Proc(ID3D11DeviceContext4*, ID3D11Asynchronous, Void)
    get_data : Proc(ID3D11DeviceContext4*, ID3D11Asynchronous, Void*, UInt32, UInt32, HRESULT)
    set_predication : Proc(ID3D11DeviceContext4*, ID3D11Predicate, LibC::BOOL, Void)
    gs_set_shader_resources : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    gs_set_samplers : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11SamplerState*, Void)
    om_set_render_targets : Proc(ID3D11DeviceContext4*, UInt32, ID3D11RenderTargetView*, ID3D11DepthStencilView, Void)
    om_set_render_targets_and_unordered_access_views : Proc(ID3D11DeviceContext4*, UInt32, ID3D11RenderTargetView*, ID3D11DepthStencilView, UInt32, UInt32, ID3D11UnorderedAccessView*, UInt32*, Void)
    om_set_blend_state : Proc(ID3D11DeviceContext4*, ID3D11BlendState, Float32*, UInt32, Void)
    om_set_depth_stencil_state : Proc(ID3D11DeviceContext4*, ID3D11DepthStencilState, UInt32, Void)
    so_set_targets : Proc(ID3D11DeviceContext4*, UInt32, ID3D11Buffer*, UInt32*, Void)
    draw_auto : Proc(ID3D11DeviceContext4*, Void)
    draw_indexed_instanced_indirect : Proc(ID3D11DeviceContext4*, ID3D11Buffer, UInt32, Void)
    draw_instanced_indirect : Proc(ID3D11DeviceContext4*, ID3D11Buffer, UInt32, Void)
    dispatch : Proc(ID3D11DeviceContext4*, UInt32, UInt32, UInt32, Void)
    dispatch_indirect : Proc(ID3D11DeviceContext4*, ID3D11Buffer, UInt32, Void)
    rs_set_state : Proc(ID3D11DeviceContext4*, ID3D11RasterizerState, Void)
    rs_set_viewports : Proc(ID3D11DeviceContext4*, UInt32, D3D11_VIEWPORT*, Void)
    rs_set_scissor_rects : Proc(ID3D11DeviceContext4*, UInt32, RECT*, Void)
    copy_subresource_region : Proc(ID3D11DeviceContext4*, ID3D11Resource, UInt32, UInt32, UInt32, UInt32, ID3D11Resource, UInt32, D3D11_BOX*, Void)
    copy_resource : Proc(ID3D11DeviceContext4*, ID3D11Resource, ID3D11Resource, Void)
    update_subresource : Proc(ID3D11DeviceContext4*, ID3D11Resource, UInt32, D3D11_BOX*, Void*, UInt32, UInt32, Void)
    copy_structure_count : Proc(ID3D11DeviceContext4*, ID3D11Buffer, UInt32, ID3D11UnorderedAccessView, Void)
    clear_render_target_view : Proc(ID3D11DeviceContext4*, ID3D11RenderTargetView, Float32*, Void)
    clear_unordered_access_view_uint : Proc(ID3D11DeviceContext4*, ID3D11UnorderedAccessView, UInt32*, Void)
    clear_unordered_access_view_float : Proc(ID3D11DeviceContext4*, ID3D11UnorderedAccessView, Float32*, Void)
    clear_depth_stencil_view : Proc(ID3D11DeviceContext4*, ID3D11DepthStencilView, UInt32, Float32, UInt8, Void)
    generate_mips : Proc(ID3D11DeviceContext4*, ID3D11ShaderResourceView, Void)
    set_resource_min_lod : Proc(ID3D11DeviceContext4*, ID3D11Resource, Float32, Void)
    get_resource_min_lod : Proc(ID3D11DeviceContext4*, ID3D11Resource, Float32)
    resolve_subresource : Proc(ID3D11DeviceContext4*, ID3D11Resource, UInt32, ID3D11Resource, UInt32, DXGI_FORMAT, Void)
    execute_command_list : Proc(ID3D11DeviceContext4*, ID3D11CommandList, LibC::BOOL, Void)
    hs_set_shader_resources : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    hs_set_shader : Proc(ID3D11DeviceContext4*, ID3D11HullShader, ID3D11ClassInstance*, UInt32, Void)
    hs_set_samplers : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11SamplerState*, Void)
    hs_set_constant_buffers : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11Buffer*, Void)
    ds_set_shader_resources : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    ds_set_shader : Proc(ID3D11DeviceContext4*, ID3D11DomainShader, ID3D11ClassInstance*, UInt32, Void)
    ds_set_samplers : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11SamplerState*, Void)
    ds_set_constant_buffers : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11Buffer*, Void)
    cs_set_shader_resources : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    cs_set_unordered_access_views : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11UnorderedAccessView*, UInt32*, Void)
    cs_set_shader : Proc(ID3D11DeviceContext4*, ID3D11ComputeShader, ID3D11ClassInstance*, UInt32, Void)
    cs_set_samplers : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11SamplerState*, Void)
    cs_set_constant_buffers : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11Buffer*, Void)
    vs_get_constant_buffers : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11Buffer*, Void)
    ps_get_shader_resources : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    ps_get_shader : Proc(ID3D11DeviceContext4*, ID3D11PixelShader*, ID3D11ClassInstance*, UInt32*, Void)
    ps_get_samplers : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11SamplerState*, Void)
    vs_get_shader : Proc(ID3D11DeviceContext4*, ID3D11VertexShader*, ID3D11ClassInstance*, UInt32*, Void)
    ps_get_constant_buffers : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11Buffer*, Void)
    ia_get_input_layout : Proc(ID3D11DeviceContext4*, ID3D11InputLayout*, Void)
    ia_get_vertex_buffers : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    ia_get_index_buffer : Proc(ID3D11DeviceContext4*, ID3D11Buffer*, DXGI_FORMAT*, UInt32*, Void)
    gs_get_constant_buffers : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11Buffer*, Void)
    gs_get_shader : Proc(ID3D11DeviceContext4*, ID3D11GeometryShader*, ID3D11ClassInstance*, UInt32*, Void)
    ia_get_primitive_topology : Proc(ID3D11DeviceContext4*, D3D_PRIMITIVE_TOPOLOGY*, Void)
    vs_get_shader_resources : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    vs_get_samplers : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11SamplerState*, Void)
    get_predication : Proc(ID3D11DeviceContext4*, ID3D11Predicate*, LibC::BOOL*, Void)
    gs_get_shader_resources : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    gs_get_samplers : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11SamplerState*, Void)
    om_get_render_targets : Proc(ID3D11DeviceContext4*, UInt32, ID3D11RenderTargetView*, ID3D11DepthStencilView*, Void)
    om_get_render_targets_and_unordered_access_views : Proc(ID3D11DeviceContext4*, UInt32, ID3D11RenderTargetView*, ID3D11DepthStencilView*, UInt32, UInt32, ID3D11UnorderedAccessView*, Void)
    om_get_blend_state : Proc(ID3D11DeviceContext4*, ID3D11BlendState*, Float32*, UInt32*, Void)
    om_get_depth_stencil_state : Proc(ID3D11DeviceContext4*, ID3D11DepthStencilState*, UInt32*, Void)
    so_get_targets : Proc(ID3D11DeviceContext4*, UInt32, ID3D11Buffer*, Void)
    rs_get_state : Proc(ID3D11DeviceContext4*, ID3D11RasterizerState*, Void)
    rs_get_viewports : Proc(ID3D11DeviceContext4*, UInt32*, D3D11_VIEWPORT*, Void)
    rs_get_scissor_rects : Proc(ID3D11DeviceContext4*, UInt32*, RECT*, Void)
    hs_get_shader_resources : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    hs_get_shader : Proc(ID3D11DeviceContext4*, ID3D11HullShader*, ID3D11ClassInstance*, UInt32*, Void)
    hs_get_samplers : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11SamplerState*, Void)
    hs_get_constant_buffers : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11Buffer*, Void)
    ds_get_shader_resources : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    ds_get_shader : Proc(ID3D11DeviceContext4*, ID3D11DomainShader*, ID3D11ClassInstance*, UInt32*, Void)
    ds_get_samplers : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11SamplerState*, Void)
    ds_get_constant_buffers : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11Buffer*, Void)
    cs_get_shader_resources : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11ShaderResourceView*, Void)
    cs_get_unordered_access_views : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11UnorderedAccessView*, Void)
    cs_get_shader : Proc(ID3D11DeviceContext4*, ID3D11ComputeShader*, ID3D11ClassInstance*, UInt32*, Void)
    cs_get_samplers : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11SamplerState*, Void)
    cs_get_constant_buffers : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11Buffer*, Void)
    clear_state : Proc(ID3D11DeviceContext4*, Void)
    flush : Proc(ID3D11DeviceContext4*, Void)
    get_type : Proc(ID3D11DeviceContext4*, D3D11_DEVICE_CONTEXT_TYPE)
    get_context_flags : Proc(ID3D11DeviceContext4*, UInt32)
    finish_command_list : Proc(ID3D11DeviceContext4*, LibC::BOOL, ID3D11CommandList*, HRESULT)
    copy_subresource_region1 : Proc(ID3D11DeviceContext4*, ID3D11Resource, UInt32, UInt32, UInt32, UInt32, ID3D11Resource, UInt32, D3D11_BOX*, UInt32, Void)
    update_subresource1 : Proc(ID3D11DeviceContext4*, ID3D11Resource, UInt32, D3D11_BOX*, Void*, UInt32, UInt32, UInt32, Void)
    discard_resource : Proc(ID3D11DeviceContext4*, ID3D11Resource, Void)
    discard_view : Proc(ID3D11DeviceContext4*, ID3D11View, Void)
    vs_set_constant_buffers1 : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    hs_set_constant_buffers1 : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    ds_set_constant_buffers1 : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    gs_set_constant_buffers1 : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    ps_set_constant_buffers1 : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    cs_set_constant_buffers1 : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    vs_get_constant_buffers1 : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    hs_get_constant_buffers1 : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    ds_get_constant_buffers1 : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    gs_get_constant_buffers1 : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    ps_get_constant_buffers1 : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    cs_get_constant_buffers1 : Proc(ID3D11DeviceContext4*, UInt32, UInt32, ID3D11Buffer*, UInt32*, UInt32*, Void)
    swap_device_context_state : Proc(ID3D11DeviceContext4*, ID3DDeviceContextState, ID3DDeviceContextState*, Void)
    clear_view : Proc(ID3D11DeviceContext4*, ID3D11View, Float32*, RECT*, UInt32, Void)
    discard_view1 : Proc(ID3D11DeviceContext4*, ID3D11View, RECT*, UInt32, Void)
    update_tile_mappings : Proc(ID3D11DeviceContext4*, ID3D11Resource, UInt32, D3D11_TILED_RESOURCE_COORDINATE*, D3D11_TILE_REGION_SIZE*, ID3D11Buffer, UInt32, UInt32*, UInt32*, UInt32*, UInt32, HRESULT)
    copy_tile_mappings : Proc(ID3D11DeviceContext4*, ID3D11Resource, D3D11_TILED_RESOURCE_COORDINATE*, ID3D11Resource, D3D11_TILED_RESOURCE_COORDINATE*, D3D11_TILE_REGION_SIZE*, UInt32, HRESULT)
    copy_tiles : Proc(ID3D11DeviceContext4*, ID3D11Resource, D3D11_TILED_RESOURCE_COORDINATE*, D3D11_TILE_REGION_SIZE*, ID3D11Buffer, UInt64, UInt32, Void)
    update_tiles : Proc(ID3D11DeviceContext4*, ID3D11Resource, D3D11_TILED_RESOURCE_COORDINATE*, D3D11_TILE_REGION_SIZE*, Void*, UInt32, Void)
    resize_tile_pool : Proc(ID3D11DeviceContext4*, ID3D11Buffer, UInt64, HRESULT)
    tiled_resource_barrier : Proc(ID3D11DeviceContext4*, ID3D11DeviceChild, ID3D11DeviceChild, Void)
    is_annotation_enabled : Proc(ID3D11DeviceContext4*, LibC::BOOL)
    set_marker_int : Proc(ID3D11DeviceContext4*, LibC::LPWSTR, Int32, Void)
    begin_event_int : Proc(ID3D11DeviceContext4*, LibC::LPWSTR, Int32, Void)
    end_event : Proc(ID3D11DeviceContext4*, Void)
    flush1 : Proc(ID3D11DeviceContext4*, D3D11_CONTEXT_TYPE, LibC::HANDLE, Void)
    set_hardware_protection_state : Proc(ID3D11DeviceContext4*, LibC::BOOL, Void)
    get_hardware_protection_state : Proc(ID3D11DeviceContext4*, LibC::BOOL*, Void)
    signal : Proc(ID3D11DeviceContext4*, ID3D11Fence, UInt64, HRESULT)
    wait : Proc(ID3D11DeviceContext4*, ID3D11Fence, UInt64, HRESULT)
  end

  ID3D11DeviceContext4_GUID = "917600da-f58c-4c33-98d8-3e15b390fa24"
  IID_ID3D11DeviceContext4 = LibC::GUID.new(0x917600da_u32, 0xf58c_u16, 0x4c33_u16, StaticArray[0x98_u8, 0xd8_u8, 0x3e_u8, 0x15_u8, 0xb3_u8, 0x90_u8, 0xfa_u8, 0x24_u8])
  struct ID3D11DeviceContext4
    lpVtbl : ID3D11DeviceContext4VTbl*
  end

  struct ID3D11Device3VTbl
    query_interface : Proc(ID3D11Device3*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11Device3*, UInt32)
    release : Proc(ID3D11Device3*, UInt32)
    create_buffer : Proc(ID3D11Device3*, D3D11_BUFFER_DESC*, D3D11_SUBRESOURCE_DATA*, ID3D11Buffer*, HRESULT)
    create_texture1_d : Proc(ID3D11Device3*, D3D11_TEXTURE1D_DESC*, D3D11_SUBRESOURCE_DATA*, ID3D11Texture1D*, HRESULT)
    create_texture2_d : Proc(ID3D11Device3*, D3D11_TEXTURE2D_DESC*, D3D11_SUBRESOURCE_DATA*, ID3D11Texture2D*, HRESULT)
    create_texture3_d : Proc(ID3D11Device3*, D3D11_TEXTURE3D_DESC*, D3D11_SUBRESOURCE_DATA*, ID3D11Texture3D*, HRESULT)
    create_shader_resource_view : Proc(ID3D11Device3*, ID3D11Resource, D3D11_SHADER_RESOURCE_VIEW_DESC*, ID3D11ShaderResourceView*, HRESULT)
    create_unordered_access_view : Proc(ID3D11Device3*, ID3D11Resource, D3D11_UNORDERED_ACCESS_VIEW_DESC*, ID3D11UnorderedAccessView*, HRESULT)
    create_render_target_view : Proc(ID3D11Device3*, ID3D11Resource, D3D11_RENDER_TARGET_VIEW_DESC*, ID3D11RenderTargetView*, HRESULT)
    create_depth_stencil_view : Proc(ID3D11Device3*, ID3D11Resource, D3D11_DEPTH_STENCIL_VIEW_DESC*, ID3D11DepthStencilView*, HRESULT)
    create_input_layout : Proc(ID3D11Device3*, D3D11_INPUT_ELEMENT_DESC*, UInt32, Void*, LibC::UINT_PTR, ID3D11InputLayout*, HRESULT)
    create_vertex_shader : Proc(ID3D11Device3*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11VertexShader*, HRESULT)
    create_geometry_shader : Proc(ID3D11Device3*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11GeometryShader*, HRESULT)
    create_geometry_shader_with_stream_output : Proc(ID3D11Device3*, Void*, LibC::UINT_PTR, D3D11_SO_DECLARATION_ENTRY*, UInt32, UInt32*, UInt32, UInt32, ID3D11ClassLinkage, ID3D11GeometryShader*, HRESULT)
    create_pixel_shader : Proc(ID3D11Device3*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11PixelShader*, HRESULT)
    create_hull_shader : Proc(ID3D11Device3*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11HullShader*, HRESULT)
    create_domain_shader : Proc(ID3D11Device3*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11DomainShader*, HRESULT)
    create_compute_shader : Proc(ID3D11Device3*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11ComputeShader*, HRESULT)
    create_class_linkage : Proc(ID3D11Device3*, ID3D11ClassLinkage*, HRESULT)
    create_blend_state : Proc(ID3D11Device3*, D3D11_BLEND_DESC*, ID3D11BlendState*, HRESULT)
    create_depth_stencil_state : Proc(ID3D11Device3*, D3D11_DEPTH_STENCIL_DESC*, ID3D11DepthStencilState*, HRESULT)
    create_rasterizer_state : Proc(ID3D11Device3*, D3D11_RASTERIZER_DESC*, ID3D11RasterizerState*, HRESULT)
    create_sampler_state : Proc(ID3D11Device3*, D3D11_SAMPLER_DESC*, ID3D11SamplerState*, HRESULT)
    create_query : Proc(ID3D11Device3*, D3D11_QUERY_DESC*, ID3D11Query*, HRESULT)
    create_predicate : Proc(ID3D11Device3*, D3D11_QUERY_DESC*, ID3D11Predicate*, HRESULT)
    create_counter : Proc(ID3D11Device3*, D3D11_COUNTER_DESC*, ID3D11Counter*, HRESULT)
    create_deferred_context : Proc(ID3D11Device3*, UInt32, ID3D11DeviceContext*, HRESULT)
    open_shared_resource : Proc(ID3D11Device3*, LibC::HANDLE, Guid*, Void**, HRESULT)
    check_format_support : Proc(ID3D11Device3*, DXGI_FORMAT, UInt32*, HRESULT)
    check_multisample_quality_levels : Proc(ID3D11Device3*, DXGI_FORMAT, UInt32, UInt32*, HRESULT)
    check_counter_info : Proc(ID3D11Device3*, D3D11_COUNTER_INFO*, Void)
    check_counter : Proc(ID3D11Device3*, D3D11_COUNTER_DESC*, D3D11_COUNTER_TYPE*, UInt32*, UInt8*, UInt32*, UInt8*, UInt32*, UInt8*, UInt32*, HRESULT)
    check_feature_support : Proc(ID3D11Device3*, D3D11_FEATURE, Void*, UInt32, HRESULT)
    get_private_data : Proc(ID3D11Device3*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11Device3*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11Device3*, Guid*, IUnknown, HRESULT)
    get_feature_level : Proc(ID3D11Device3*, D3D_FEATURE_LEVEL)
    get_creation_flags : Proc(ID3D11Device3*, UInt32)
    get_device_removed_reason : Proc(ID3D11Device3*, HRESULT)
    get_immediate_context : Proc(ID3D11Device3*, ID3D11DeviceContext*, Void)
    set_exception_mode : Proc(ID3D11Device3*, UInt32, HRESULT)
    get_exception_mode : Proc(ID3D11Device3*, UInt32)
    get_immediate_context1 : Proc(ID3D11Device3*, ID3D11DeviceContext1*, Void)
    create_deferred_context1 : Proc(ID3D11Device3*, UInt32, ID3D11DeviceContext1*, HRESULT)
    create_blend_state1 : Proc(ID3D11Device3*, D3D11_BLEND_DESC1*, ID3D11BlendState1*, HRESULT)
    create_rasterizer_state1 : Proc(ID3D11Device3*, D3D11_RASTERIZER_DESC1*, ID3D11RasterizerState1*, HRESULT)
    create_device_context_state : Proc(ID3D11Device3*, UInt32, D3D_FEATURE_LEVEL*, UInt32, UInt32, Guid*, D3D_FEATURE_LEVEL*, ID3DDeviceContextState*, HRESULT)
    open_shared_resource1 : Proc(ID3D11Device3*, LibC::HANDLE, Guid*, Void**, HRESULT)
    open_shared_resource_by_name : Proc(ID3D11Device3*, LibC::LPWSTR, UInt32, Guid*, Void**, HRESULT)
    get_immediate_context2 : Proc(ID3D11Device3*, ID3D11DeviceContext2*, Void)
    create_deferred_context2 : Proc(ID3D11Device3*, UInt32, ID3D11DeviceContext2*, HRESULT)
    get_resource_tiling : Proc(ID3D11Device3*, ID3D11Resource, UInt32*, D3D11_PACKED_MIP_DESC*, D3D11_TILE_SHAPE*, UInt32*, UInt32, D3D11_SUBRESOURCE_TILING*, Void)
    check_multisample_quality_levels1 : Proc(ID3D11Device3*, DXGI_FORMAT, UInt32, UInt32, UInt32*, HRESULT)
    create_texture2_d1 : Proc(ID3D11Device3*, D3D11_TEXTURE2D_DESC1*, D3D11_SUBRESOURCE_DATA*, ID3D11Texture2D1*, HRESULT)
    create_texture3_d1 : Proc(ID3D11Device3*, D3D11_TEXTURE3D_DESC1*, D3D11_SUBRESOURCE_DATA*, ID3D11Texture3D1*, HRESULT)
    create_rasterizer_state2 : Proc(ID3D11Device3*, D3D11_RASTERIZER_DESC2*, ID3D11RasterizerState2*, HRESULT)
    create_shader_resource_view1 : Proc(ID3D11Device3*, ID3D11Resource, D3D11_SHADER_RESOURCE_VIEW_DESC1*, ID3D11ShaderResourceView1*, HRESULT)
    create_unordered_access_view1 : Proc(ID3D11Device3*, ID3D11Resource, D3D11_UNORDERED_ACCESS_VIEW_DESC1*, ID3D11UnorderedAccessView1*, HRESULT)
    create_render_target_view1 : Proc(ID3D11Device3*, ID3D11Resource, D3D11_RENDER_TARGET_VIEW_DESC1*, ID3D11RenderTargetView1*, HRESULT)
    create_query1 : Proc(ID3D11Device3*, D3D11_QUERY_DESC1*, ID3D11Query1*, HRESULT)
    get_immediate_context3 : Proc(ID3D11Device3*, ID3D11DeviceContext3*, Void)
    create_deferred_context3 : Proc(ID3D11Device3*, UInt32, ID3D11DeviceContext3*, HRESULT)
    write_to_subresource : Proc(ID3D11Device3*, ID3D11Resource, UInt32, D3D11_BOX*, Void*, UInt32, UInt32, Void)
    read_from_subresource : Proc(ID3D11Device3*, Void*, UInt32, UInt32, ID3D11Resource, UInt32, D3D11_BOX*, Void)
  end

  ID3D11Device3_GUID = "a05c8c37-d2c6-4732-b3a0-9ce0b0dc9ae6"
  IID_ID3D11Device3 = LibC::GUID.new(0xa05c8c37_u32, 0xd2c6_u16, 0x4732_u16, StaticArray[0xb3_u8, 0xa0_u8, 0x9c_u8, 0xe0_u8, 0xb0_u8, 0xdc_u8, 0x9a_u8, 0xe6_u8])
  struct ID3D11Device3
    lpVtbl : ID3D11Device3VTbl*
  end

  struct ID3D11Device4VTbl
    query_interface : Proc(ID3D11Device4*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11Device4*, UInt32)
    release : Proc(ID3D11Device4*, UInt32)
    create_buffer : Proc(ID3D11Device4*, D3D11_BUFFER_DESC*, D3D11_SUBRESOURCE_DATA*, ID3D11Buffer*, HRESULT)
    create_texture1_d : Proc(ID3D11Device4*, D3D11_TEXTURE1D_DESC*, D3D11_SUBRESOURCE_DATA*, ID3D11Texture1D*, HRESULT)
    create_texture2_d : Proc(ID3D11Device4*, D3D11_TEXTURE2D_DESC*, D3D11_SUBRESOURCE_DATA*, ID3D11Texture2D*, HRESULT)
    create_texture3_d : Proc(ID3D11Device4*, D3D11_TEXTURE3D_DESC*, D3D11_SUBRESOURCE_DATA*, ID3D11Texture3D*, HRESULT)
    create_shader_resource_view : Proc(ID3D11Device4*, ID3D11Resource, D3D11_SHADER_RESOURCE_VIEW_DESC*, ID3D11ShaderResourceView*, HRESULT)
    create_unordered_access_view : Proc(ID3D11Device4*, ID3D11Resource, D3D11_UNORDERED_ACCESS_VIEW_DESC*, ID3D11UnorderedAccessView*, HRESULT)
    create_render_target_view : Proc(ID3D11Device4*, ID3D11Resource, D3D11_RENDER_TARGET_VIEW_DESC*, ID3D11RenderTargetView*, HRESULT)
    create_depth_stencil_view : Proc(ID3D11Device4*, ID3D11Resource, D3D11_DEPTH_STENCIL_VIEW_DESC*, ID3D11DepthStencilView*, HRESULT)
    create_input_layout : Proc(ID3D11Device4*, D3D11_INPUT_ELEMENT_DESC*, UInt32, Void*, LibC::UINT_PTR, ID3D11InputLayout*, HRESULT)
    create_vertex_shader : Proc(ID3D11Device4*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11VertexShader*, HRESULT)
    create_geometry_shader : Proc(ID3D11Device4*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11GeometryShader*, HRESULT)
    create_geometry_shader_with_stream_output : Proc(ID3D11Device4*, Void*, LibC::UINT_PTR, D3D11_SO_DECLARATION_ENTRY*, UInt32, UInt32*, UInt32, UInt32, ID3D11ClassLinkage, ID3D11GeometryShader*, HRESULT)
    create_pixel_shader : Proc(ID3D11Device4*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11PixelShader*, HRESULT)
    create_hull_shader : Proc(ID3D11Device4*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11HullShader*, HRESULT)
    create_domain_shader : Proc(ID3D11Device4*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11DomainShader*, HRESULT)
    create_compute_shader : Proc(ID3D11Device4*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11ComputeShader*, HRESULT)
    create_class_linkage : Proc(ID3D11Device4*, ID3D11ClassLinkage*, HRESULT)
    create_blend_state : Proc(ID3D11Device4*, D3D11_BLEND_DESC*, ID3D11BlendState*, HRESULT)
    create_depth_stencil_state : Proc(ID3D11Device4*, D3D11_DEPTH_STENCIL_DESC*, ID3D11DepthStencilState*, HRESULT)
    create_rasterizer_state : Proc(ID3D11Device4*, D3D11_RASTERIZER_DESC*, ID3D11RasterizerState*, HRESULT)
    create_sampler_state : Proc(ID3D11Device4*, D3D11_SAMPLER_DESC*, ID3D11SamplerState*, HRESULT)
    create_query : Proc(ID3D11Device4*, D3D11_QUERY_DESC*, ID3D11Query*, HRESULT)
    create_predicate : Proc(ID3D11Device4*, D3D11_QUERY_DESC*, ID3D11Predicate*, HRESULT)
    create_counter : Proc(ID3D11Device4*, D3D11_COUNTER_DESC*, ID3D11Counter*, HRESULT)
    create_deferred_context : Proc(ID3D11Device4*, UInt32, ID3D11DeviceContext*, HRESULT)
    open_shared_resource : Proc(ID3D11Device4*, LibC::HANDLE, Guid*, Void**, HRESULT)
    check_format_support : Proc(ID3D11Device4*, DXGI_FORMAT, UInt32*, HRESULT)
    check_multisample_quality_levels : Proc(ID3D11Device4*, DXGI_FORMAT, UInt32, UInt32*, HRESULT)
    check_counter_info : Proc(ID3D11Device4*, D3D11_COUNTER_INFO*, Void)
    check_counter : Proc(ID3D11Device4*, D3D11_COUNTER_DESC*, D3D11_COUNTER_TYPE*, UInt32*, UInt8*, UInt32*, UInt8*, UInt32*, UInt8*, UInt32*, HRESULT)
    check_feature_support : Proc(ID3D11Device4*, D3D11_FEATURE, Void*, UInt32, HRESULT)
    get_private_data : Proc(ID3D11Device4*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11Device4*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11Device4*, Guid*, IUnknown, HRESULT)
    get_feature_level : Proc(ID3D11Device4*, D3D_FEATURE_LEVEL)
    get_creation_flags : Proc(ID3D11Device4*, UInt32)
    get_device_removed_reason : Proc(ID3D11Device4*, HRESULT)
    get_immediate_context : Proc(ID3D11Device4*, ID3D11DeviceContext*, Void)
    set_exception_mode : Proc(ID3D11Device4*, UInt32, HRESULT)
    get_exception_mode : Proc(ID3D11Device4*, UInt32)
    get_immediate_context1 : Proc(ID3D11Device4*, ID3D11DeviceContext1*, Void)
    create_deferred_context1 : Proc(ID3D11Device4*, UInt32, ID3D11DeviceContext1*, HRESULT)
    create_blend_state1 : Proc(ID3D11Device4*, D3D11_BLEND_DESC1*, ID3D11BlendState1*, HRESULT)
    create_rasterizer_state1 : Proc(ID3D11Device4*, D3D11_RASTERIZER_DESC1*, ID3D11RasterizerState1*, HRESULT)
    create_device_context_state : Proc(ID3D11Device4*, UInt32, D3D_FEATURE_LEVEL*, UInt32, UInt32, Guid*, D3D_FEATURE_LEVEL*, ID3DDeviceContextState*, HRESULT)
    open_shared_resource1 : Proc(ID3D11Device4*, LibC::HANDLE, Guid*, Void**, HRESULT)
    open_shared_resource_by_name : Proc(ID3D11Device4*, LibC::LPWSTR, UInt32, Guid*, Void**, HRESULT)
    get_immediate_context2 : Proc(ID3D11Device4*, ID3D11DeviceContext2*, Void)
    create_deferred_context2 : Proc(ID3D11Device4*, UInt32, ID3D11DeviceContext2*, HRESULT)
    get_resource_tiling : Proc(ID3D11Device4*, ID3D11Resource, UInt32*, D3D11_PACKED_MIP_DESC*, D3D11_TILE_SHAPE*, UInt32*, UInt32, D3D11_SUBRESOURCE_TILING*, Void)
    check_multisample_quality_levels1 : Proc(ID3D11Device4*, DXGI_FORMAT, UInt32, UInt32, UInt32*, HRESULT)
    create_texture2_d1 : Proc(ID3D11Device4*, D3D11_TEXTURE2D_DESC1*, D3D11_SUBRESOURCE_DATA*, ID3D11Texture2D1*, HRESULT)
    create_texture3_d1 : Proc(ID3D11Device4*, D3D11_TEXTURE3D_DESC1*, D3D11_SUBRESOURCE_DATA*, ID3D11Texture3D1*, HRESULT)
    create_rasterizer_state2 : Proc(ID3D11Device4*, D3D11_RASTERIZER_DESC2*, ID3D11RasterizerState2*, HRESULT)
    create_shader_resource_view1 : Proc(ID3D11Device4*, ID3D11Resource, D3D11_SHADER_RESOURCE_VIEW_DESC1*, ID3D11ShaderResourceView1*, HRESULT)
    create_unordered_access_view1 : Proc(ID3D11Device4*, ID3D11Resource, D3D11_UNORDERED_ACCESS_VIEW_DESC1*, ID3D11UnorderedAccessView1*, HRESULT)
    create_render_target_view1 : Proc(ID3D11Device4*, ID3D11Resource, D3D11_RENDER_TARGET_VIEW_DESC1*, ID3D11RenderTargetView1*, HRESULT)
    create_query1 : Proc(ID3D11Device4*, D3D11_QUERY_DESC1*, ID3D11Query1*, HRESULT)
    get_immediate_context3 : Proc(ID3D11Device4*, ID3D11DeviceContext3*, Void)
    create_deferred_context3 : Proc(ID3D11Device4*, UInt32, ID3D11DeviceContext3*, HRESULT)
    write_to_subresource : Proc(ID3D11Device4*, ID3D11Resource, UInt32, D3D11_BOX*, Void*, UInt32, UInt32, Void)
    read_from_subresource : Proc(ID3D11Device4*, Void*, UInt32, UInt32, ID3D11Resource, UInt32, D3D11_BOX*, Void)
    register_device_removed_event : Proc(ID3D11Device4*, LibC::HANDLE, UInt32*, HRESULT)
    unregister_device_removed : Proc(ID3D11Device4*, UInt32, Void)
  end

  ID3D11Device4_GUID = "8992ab71-02e6-4b8d-ba48-b056dcda42c4"
  IID_ID3D11Device4 = LibC::GUID.new(0x8992ab71_u32, 0x2e6_u16, 0x4b8d_u16, StaticArray[0xba_u8, 0x48_u8, 0xb0_u8, 0x56_u8, 0xdc_u8, 0xda_u8, 0x42_u8, 0xc4_u8])
  struct ID3D11Device4
    lpVtbl : ID3D11Device4VTbl*
  end

  struct ID3D11Device5VTbl
    query_interface : Proc(ID3D11Device5*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11Device5*, UInt32)
    release : Proc(ID3D11Device5*, UInt32)
    create_buffer : Proc(ID3D11Device5*, D3D11_BUFFER_DESC*, D3D11_SUBRESOURCE_DATA*, ID3D11Buffer*, HRESULT)
    create_texture1_d : Proc(ID3D11Device5*, D3D11_TEXTURE1D_DESC*, D3D11_SUBRESOURCE_DATA*, ID3D11Texture1D*, HRESULT)
    create_texture2_d : Proc(ID3D11Device5*, D3D11_TEXTURE2D_DESC*, D3D11_SUBRESOURCE_DATA*, ID3D11Texture2D*, HRESULT)
    create_texture3_d : Proc(ID3D11Device5*, D3D11_TEXTURE3D_DESC*, D3D11_SUBRESOURCE_DATA*, ID3D11Texture3D*, HRESULT)
    create_shader_resource_view : Proc(ID3D11Device5*, ID3D11Resource, D3D11_SHADER_RESOURCE_VIEW_DESC*, ID3D11ShaderResourceView*, HRESULT)
    create_unordered_access_view : Proc(ID3D11Device5*, ID3D11Resource, D3D11_UNORDERED_ACCESS_VIEW_DESC*, ID3D11UnorderedAccessView*, HRESULT)
    create_render_target_view : Proc(ID3D11Device5*, ID3D11Resource, D3D11_RENDER_TARGET_VIEW_DESC*, ID3D11RenderTargetView*, HRESULT)
    create_depth_stencil_view : Proc(ID3D11Device5*, ID3D11Resource, D3D11_DEPTH_STENCIL_VIEW_DESC*, ID3D11DepthStencilView*, HRESULT)
    create_input_layout : Proc(ID3D11Device5*, D3D11_INPUT_ELEMENT_DESC*, UInt32, Void*, LibC::UINT_PTR, ID3D11InputLayout*, HRESULT)
    create_vertex_shader : Proc(ID3D11Device5*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11VertexShader*, HRESULT)
    create_geometry_shader : Proc(ID3D11Device5*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11GeometryShader*, HRESULT)
    create_geometry_shader_with_stream_output : Proc(ID3D11Device5*, Void*, LibC::UINT_PTR, D3D11_SO_DECLARATION_ENTRY*, UInt32, UInt32*, UInt32, UInt32, ID3D11ClassLinkage, ID3D11GeometryShader*, HRESULT)
    create_pixel_shader : Proc(ID3D11Device5*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11PixelShader*, HRESULT)
    create_hull_shader : Proc(ID3D11Device5*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11HullShader*, HRESULT)
    create_domain_shader : Proc(ID3D11Device5*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11DomainShader*, HRESULT)
    create_compute_shader : Proc(ID3D11Device5*, Void*, LibC::UINT_PTR, ID3D11ClassLinkage, ID3D11ComputeShader*, HRESULT)
    create_class_linkage : Proc(ID3D11Device5*, ID3D11ClassLinkage*, HRESULT)
    create_blend_state : Proc(ID3D11Device5*, D3D11_BLEND_DESC*, ID3D11BlendState*, HRESULT)
    create_depth_stencil_state : Proc(ID3D11Device5*, D3D11_DEPTH_STENCIL_DESC*, ID3D11DepthStencilState*, HRESULT)
    create_rasterizer_state : Proc(ID3D11Device5*, D3D11_RASTERIZER_DESC*, ID3D11RasterizerState*, HRESULT)
    create_sampler_state : Proc(ID3D11Device5*, D3D11_SAMPLER_DESC*, ID3D11SamplerState*, HRESULT)
    create_query : Proc(ID3D11Device5*, D3D11_QUERY_DESC*, ID3D11Query*, HRESULT)
    create_predicate : Proc(ID3D11Device5*, D3D11_QUERY_DESC*, ID3D11Predicate*, HRESULT)
    create_counter : Proc(ID3D11Device5*, D3D11_COUNTER_DESC*, ID3D11Counter*, HRESULT)
    create_deferred_context : Proc(ID3D11Device5*, UInt32, ID3D11DeviceContext*, HRESULT)
    open_shared_resource : Proc(ID3D11Device5*, LibC::HANDLE, Guid*, Void**, HRESULT)
    check_format_support : Proc(ID3D11Device5*, DXGI_FORMAT, UInt32*, HRESULT)
    check_multisample_quality_levels : Proc(ID3D11Device5*, DXGI_FORMAT, UInt32, UInt32*, HRESULT)
    check_counter_info : Proc(ID3D11Device5*, D3D11_COUNTER_INFO*, Void)
    check_counter : Proc(ID3D11Device5*, D3D11_COUNTER_DESC*, D3D11_COUNTER_TYPE*, UInt32*, UInt8*, UInt32*, UInt8*, UInt32*, UInt8*, UInt32*, HRESULT)
    check_feature_support : Proc(ID3D11Device5*, D3D11_FEATURE, Void*, UInt32, HRESULT)
    get_private_data : Proc(ID3D11Device5*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11Device5*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11Device5*, Guid*, IUnknown, HRESULT)
    get_feature_level : Proc(ID3D11Device5*, D3D_FEATURE_LEVEL)
    get_creation_flags : Proc(ID3D11Device5*, UInt32)
    get_device_removed_reason : Proc(ID3D11Device5*, HRESULT)
    get_immediate_context : Proc(ID3D11Device5*, ID3D11DeviceContext*, Void)
    set_exception_mode : Proc(ID3D11Device5*, UInt32, HRESULT)
    get_exception_mode : Proc(ID3D11Device5*, UInt32)
    get_immediate_context1 : Proc(ID3D11Device5*, ID3D11DeviceContext1*, Void)
    create_deferred_context1 : Proc(ID3D11Device5*, UInt32, ID3D11DeviceContext1*, HRESULT)
    create_blend_state1 : Proc(ID3D11Device5*, D3D11_BLEND_DESC1*, ID3D11BlendState1*, HRESULT)
    create_rasterizer_state1 : Proc(ID3D11Device5*, D3D11_RASTERIZER_DESC1*, ID3D11RasterizerState1*, HRESULT)
    create_device_context_state : Proc(ID3D11Device5*, UInt32, D3D_FEATURE_LEVEL*, UInt32, UInt32, Guid*, D3D_FEATURE_LEVEL*, ID3DDeviceContextState*, HRESULT)
    open_shared_resource1 : Proc(ID3D11Device5*, LibC::HANDLE, Guid*, Void**, HRESULT)
    open_shared_resource_by_name : Proc(ID3D11Device5*, LibC::LPWSTR, UInt32, Guid*, Void**, HRESULT)
    get_immediate_context2 : Proc(ID3D11Device5*, ID3D11DeviceContext2*, Void)
    create_deferred_context2 : Proc(ID3D11Device5*, UInt32, ID3D11DeviceContext2*, HRESULT)
    get_resource_tiling : Proc(ID3D11Device5*, ID3D11Resource, UInt32*, D3D11_PACKED_MIP_DESC*, D3D11_TILE_SHAPE*, UInt32*, UInt32, D3D11_SUBRESOURCE_TILING*, Void)
    check_multisample_quality_levels1 : Proc(ID3D11Device5*, DXGI_FORMAT, UInt32, UInt32, UInt32*, HRESULT)
    create_texture2_d1 : Proc(ID3D11Device5*, D3D11_TEXTURE2D_DESC1*, D3D11_SUBRESOURCE_DATA*, ID3D11Texture2D1*, HRESULT)
    create_texture3_d1 : Proc(ID3D11Device5*, D3D11_TEXTURE3D_DESC1*, D3D11_SUBRESOURCE_DATA*, ID3D11Texture3D1*, HRESULT)
    create_rasterizer_state2 : Proc(ID3D11Device5*, D3D11_RASTERIZER_DESC2*, ID3D11RasterizerState2*, HRESULT)
    create_shader_resource_view1 : Proc(ID3D11Device5*, ID3D11Resource, D3D11_SHADER_RESOURCE_VIEW_DESC1*, ID3D11ShaderResourceView1*, HRESULT)
    create_unordered_access_view1 : Proc(ID3D11Device5*, ID3D11Resource, D3D11_UNORDERED_ACCESS_VIEW_DESC1*, ID3D11UnorderedAccessView1*, HRESULT)
    create_render_target_view1 : Proc(ID3D11Device5*, ID3D11Resource, D3D11_RENDER_TARGET_VIEW_DESC1*, ID3D11RenderTargetView1*, HRESULT)
    create_query1 : Proc(ID3D11Device5*, D3D11_QUERY_DESC1*, ID3D11Query1*, HRESULT)
    get_immediate_context3 : Proc(ID3D11Device5*, ID3D11DeviceContext3*, Void)
    create_deferred_context3 : Proc(ID3D11Device5*, UInt32, ID3D11DeviceContext3*, HRESULT)
    write_to_subresource : Proc(ID3D11Device5*, ID3D11Resource, UInt32, D3D11_BOX*, Void*, UInt32, UInt32, Void)
    read_from_subresource : Proc(ID3D11Device5*, Void*, UInt32, UInt32, ID3D11Resource, UInt32, D3D11_BOX*, Void)
    register_device_removed_event : Proc(ID3D11Device5*, LibC::HANDLE, UInt32*, HRESULT)
    unregister_device_removed : Proc(ID3D11Device5*, UInt32, Void)
    open_shared_fence : Proc(ID3D11Device5*, LibC::HANDLE, Guid*, Void**, HRESULT)
    create_fence : Proc(ID3D11Device5*, UInt64, D3D11_FENCE_FLAG, Guid*, Void**, HRESULT)
  end

  ID3D11Device5_GUID = "8ffde202-a0e7-45df-9e01-e837801b5ea0"
  IID_ID3D11Device5 = LibC::GUID.new(0x8ffde202_u32, 0xa0e7_u16, 0x45df_u16, StaticArray[0x9e_u8, 0x1_u8, 0xe8_u8, 0x37_u8, 0x80_u8, 0x1b_u8, 0x5e_u8, 0xa0_u8])
  struct ID3D11Device5
    lpVtbl : ID3D11Device5VTbl*
  end

  struct ID3D11MultithreadVTbl
    query_interface : Proc(ID3D11Multithread*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11Multithread*, UInt32)
    release : Proc(ID3D11Multithread*, UInt32)
    enter : Proc(ID3D11Multithread*, Void)
    leave : Proc(ID3D11Multithread*, Void)
    set_multithread_protected : Proc(ID3D11Multithread*, LibC::BOOL, LibC::BOOL)
    get_multithread_protected : Proc(ID3D11Multithread*, LibC::BOOL)
  end

  ID3D11Multithread_GUID = "9b7e4e00-342c-4106-a19f-4f2704f689f0"
  IID_ID3D11Multithread = LibC::GUID.new(0x9b7e4e00_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
  struct ID3D11Multithread
    lpVtbl : ID3D11MultithreadVTbl*
  end

  struct ID3D11VideoContext2VTbl
    query_interface : Proc(ID3D11VideoContext2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11VideoContext2*, UInt32)
    release : Proc(ID3D11VideoContext2*, UInt32)
    get_device : Proc(ID3D11VideoContext2*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11VideoContext2*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11VideoContext2*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11VideoContext2*, Guid*, IUnknown, HRESULT)
    get_decoder_buffer : Proc(ID3D11VideoContext2*, ID3D11VideoDecoder, D3D11_VIDEO_DECODER_BUFFER_TYPE, UInt32*, Void**, HRESULT)
    release_decoder_buffer : Proc(ID3D11VideoContext2*, ID3D11VideoDecoder, D3D11_VIDEO_DECODER_BUFFER_TYPE, HRESULT)
    decoder_begin_frame : Proc(ID3D11VideoContext2*, ID3D11VideoDecoder, ID3D11VideoDecoderOutputView, UInt32, Void*, HRESULT)
    decoder_end_frame : Proc(ID3D11VideoContext2*, ID3D11VideoDecoder, HRESULT)
    submit_decoder_buffers : Proc(ID3D11VideoContext2*, ID3D11VideoDecoder, UInt32, D3D11_VIDEO_DECODER_BUFFER_DESC*, HRESULT)
    decoder_extension : Proc(ID3D11VideoContext2*, ID3D11VideoDecoder, D3D11_VIDEO_DECODER_EXTENSION*, Int32)
    video_processor_set_output_target_rect : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, LibC::BOOL, RECT*, Void)
    video_processor_set_output_background_color : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, LibC::BOOL, D3D11_VIDEO_COLOR*, Void)
    video_processor_set_output_color_space : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, D3D11_VIDEO_PROCESSOR_COLOR_SPACE*, Void)
    video_processor_set_output_alpha_fill_mode : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE, UInt32, Void)
    video_processor_set_output_constriction : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, LibC::BOOL, SIZE, Void)
    video_processor_set_output_stereo_mode : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, LibC::BOOL, Void)
    video_processor_set_output_extension : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, Guid*, UInt32, Void*, Int32)
    video_processor_get_output_target_rect : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, LibC::BOOL*, RECT*, Void)
    video_processor_get_output_background_color : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, LibC::BOOL*, D3D11_VIDEO_COLOR*, Void)
    video_processor_get_output_color_space : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, D3D11_VIDEO_PROCESSOR_COLOR_SPACE*, Void)
    video_processor_get_output_alpha_fill_mode : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE*, UInt32*, Void)
    video_processor_get_output_constriction : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, LibC::BOOL*, SIZE*, Void)
    video_processor_get_output_stereo_mode : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, LibC::BOOL*, Void)
    video_processor_get_output_extension : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, Guid*, UInt32, Void*, Int32)
    video_processor_set_stream_frame_format : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_FRAME_FORMAT, Void)
    video_processor_set_stream_color_space : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_PROCESSOR_COLOR_SPACE*, Void)
    video_processor_set_stream_output_rate : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_PROCESSOR_OUTPUT_RATE, LibC::BOOL, DXGI_RATIONAL*, Void)
    video_processor_set_stream_source_rect : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, LibC::BOOL, RECT*, Void)
    video_processor_set_stream_dest_rect : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, LibC::BOOL, RECT*, Void)
    video_processor_set_stream_alpha : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, LibC::BOOL, Float32, Void)
    video_processor_set_stream_palette : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, UInt32, UInt32*, Void)
    video_processor_set_stream_pixel_aspect_ratio : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, LibC::BOOL, DXGI_RATIONAL*, DXGI_RATIONAL*, Void)
    video_processor_set_stream_luma_key : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, LibC::BOOL, Float32, Float32, Void)
    video_processor_set_stream_stereo_format : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, LibC::BOOL, D3D11_VIDEO_PROCESSOR_STEREO_FORMAT, LibC::BOOL, LibC::BOOL, D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE, Int32, Void)
    video_processor_set_stream_auto_processing_mode : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, LibC::BOOL, Void)
    video_processor_set_stream_filter : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_PROCESSOR_FILTER, LibC::BOOL, Int32, Void)
    video_processor_set_stream_extension : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, Guid*, UInt32, Void*, Int32)
    video_processor_get_stream_frame_format : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_FRAME_FORMAT*, Void)
    video_processor_get_stream_color_space : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_PROCESSOR_COLOR_SPACE*, Void)
    video_processor_get_stream_output_rate : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_PROCESSOR_OUTPUT_RATE*, LibC::BOOL*, DXGI_RATIONAL*, Void)
    video_processor_get_stream_source_rect : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, RECT*, Void)
    video_processor_get_stream_dest_rect : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, RECT*, Void)
    video_processor_get_stream_alpha : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, Float32*, Void)
    video_processor_get_stream_palette : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, UInt32, UInt32*, Void)
    video_processor_get_stream_pixel_aspect_ratio : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, DXGI_RATIONAL*, DXGI_RATIONAL*, Void)
    video_processor_get_stream_luma_key : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, Float32*, Float32*, Void)
    video_processor_get_stream_stereo_format : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, D3D11_VIDEO_PROCESSOR_STEREO_FORMAT*, LibC::BOOL*, LibC::BOOL*, D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE*, Int32*, Void)
    video_processor_get_stream_auto_processing_mode : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, Void)
    video_processor_get_stream_filter : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_PROCESSOR_FILTER, LibC::BOOL*, Int32*, Void)
    video_processor_get_stream_extension : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, Guid*, UInt32, Void*, Int32)
    video_processor_blt : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, ID3D11VideoProcessorOutputView, UInt32, UInt32, D3D11_VIDEO_PROCESSOR_STREAM*, HRESULT)
    negotiate_crypto_session_key_exchange : Proc(ID3D11VideoContext2*, ID3D11CryptoSession, UInt32, Void*, HRESULT)
    encryption_blt : Proc(ID3D11VideoContext2*, ID3D11CryptoSession, ID3D11Texture2D, ID3D11Texture2D, UInt32, Void*, Void)
    decryption_blt : Proc(ID3D11VideoContext2*, ID3D11CryptoSession, ID3D11Texture2D, ID3D11Texture2D, D3D11_ENCRYPTED_BLOCK_INFO*, UInt32, Void*, UInt32, Void*, Void)
    start_session_key_refresh : Proc(ID3D11VideoContext2*, ID3D11CryptoSession, UInt32, Void*, Void)
    finish_session_key_refresh : Proc(ID3D11VideoContext2*, ID3D11CryptoSession, Void)
    get_encryption_blt_key : Proc(ID3D11VideoContext2*, ID3D11CryptoSession, UInt32, Void*, HRESULT)
    negotiate_authenticated_channel_key_exchange : Proc(ID3D11VideoContext2*, ID3D11AuthenticatedChannel, UInt32, Void*, HRESULT)
    query_authenticated_channel : Proc(ID3D11VideoContext2*, ID3D11AuthenticatedChannel, UInt32, Void*, UInt32, Void*, HRESULT)
    configure_authenticated_channel : Proc(ID3D11VideoContext2*, ID3D11AuthenticatedChannel, UInt32, Void*, D3D11_AUTHENTICATED_CONFIGURE_OUTPUT*, HRESULT)
    video_processor_set_stream_rotation : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, LibC::BOOL, D3D11_VIDEO_PROCESSOR_ROTATION, Void)
    video_processor_get_stream_rotation : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, D3D11_VIDEO_PROCESSOR_ROTATION*, Void)
    submit_decoder_buffers1 : Proc(ID3D11VideoContext2*, ID3D11VideoDecoder, UInt32, D3D11_VIDEO_DECODER_BUFFER_DESC1*, HRESULT)
    get_data_for_new_hardware_key : Proc(ID3D11VideoContext2*, ID3D11CryptoSession, UInt32, Void*, UInt64*, HRESULT)
    check_crypto_session_status : Proc(ID3D11VideoContext2*, ID3D11CryptoSession, D3D11_CRYPTO_SESSION_STATUS*, HRESULT)
    decoder_enable_downsampling : Proc(ID3D11VideoContext2*, ID3D11VideoDecoder, DXGI_COLOR_SPACE_TYPE, D3D11_VIDEO_SAMPLE_DESC*, UInt32, HRESULT)
    decoder_update_downsampling : Proc(ID3D11VideoContext2*, ID3D11VideoDecoder, D3D11_VIDEO_SAMPLE_DESC*, HRESULT)
    video_processor_set_output_color_space1 : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, DXGI_COLOR_SPACE_TYPE, Void)
    video_processor_set_output_shader_usage : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, LibC::BOOL, Void)
    video_processor_get_output_color_space1 : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, DXGI_COLOR_SPACE_TYPE*, Void)
    video_processor_get_output_shader_usage : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, LibC::BOOL*, Void)
    video_processor_set_stream_color_space1 : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, DXGI_COLOR_SPACE_TYPE, Void)
    video_processor_set_stream_mirror : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, LibC::BOOL, LibC::BOOL, LibC::BOOL, Void)
    video_processor_get_stream_color_space1 : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, DXGI_COLOR_SPACE_TYPE*, Void)
    video_processor_get_stream_mirror : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, LibC::BOOL*, LibC::BOOL*, Void)
    video_processor_get_behavior_hints : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, UInt32, DXGI_FORMAT, UInt32, D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT*, UInt32*, HRESULT)
    video_processor_set_output_hdr_meta_data : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, DXGI_HDR_METADATA_TYPE, UInt32, Void*, Void)
    video_processor_get_output_hdr_meta_data : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, DXGI_HDR_METADATA_TYPE*, UInt32, Void*, Void)
    video_processor_set_stream_hdr_meta_data : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, DXGI_HDR_METADATA_TYPE, UInt32, Void*, Void)
    video_processor_get_stream_hdr_meta_data : Proc(ID3D11VideoContext2*, ID3D11VideoProcessor, UInt32, DXGI_HDR_METADATA_TYPE*, UInt32, Void*, Void)
  end

  ID3D11VideoContext2_GUID = "c4e7374c-6243-4d1b-ae87-52b4f740e261"
  IID_ID3D11VideoContext2 = LibC::GUID.new(0xc4e7374c_u32, 0x6243_u16, 0x4d1b_u16, StaticArray[0xae_u8, 0x87_u8, 0x52_u8, 0xb4_u8, 0xf7_u8, 0x40_u8, 0xe2_u8, 0x61_u8])
  struct ID3D11VideoContext2
    lpVtbl : ID3D11VideoContext2VTbl*
  end

  struct ID3D11VideoDevice2VTbl
    query_interface : Proc(ID3D11VideoDevice2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11VideoDevice2*, UInt32)
    release : Proc(ID3D11VideoDevice2*, UInt32)
    create_video_decoder : Proc(ID3D11VideoDevice2*, D3D11_VIDEO_DECODER_DESC*, D3D11_VIDEO_DECODER_CONFIG*, ID3D11VideoDecoder*, HRESULT)
    create_video_processor : Proc(ID3D11VideoDevice2*, ID3D11VideoProcessorEnumerator, UInt32, ID3D11VideoProcessor*, HRESULT)
    create_authenticated_channel : Proc(ID3D11VideoDevice2*, D3D11_AUTHENTICATED_CHANNEL_TYPE, ID3D11AuthenticatedChannel*, HRESULT)
    create_crypto_session : Proc(ID3D11VideoDevice2*, Guid*, Guid*, Guid*, ID3D11CryptoSession*, HRESULT)
    create_video_decoder_output_view : Proc(ID3D11VideoDevice2*, ID3D11Resource, D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC*, ID3D11VideoDecoderOutputView*, HRESULT)
    create_video_processor_input_view : Proc(ID3D11VideoDevice2*, ID3D11Resource, ID3D11VideoProcessorEnumerator, D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*, ID3D11VideoProcessorInputView*, HRESULT)
    create_video_processor_output_view : Proc(ID3D11VideoDevice2*, ID3D11Resource, ID3D11VideoProcessorEnumerator, D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*, ID3D11VideoProcessorOutputView*, HRESULT)
    create_video_processor_enumerator : Proc(ID3D11VideoDevice2*, D3D11_VIDEO_PROCESSOR_CONTENT_DESC*, ID3D11VideoProcessorEnumerator*, HRESULT)
    get_video_decoder_profile_count : Proc(ID3D11VideoDevice2*, UInt32)
    get_video_decoder_profile : Proc(ID3D11VideoDevice2*, UInt32, Guid*, HRESULT)
    check_video_decoder_format : Proc(ID3D11VideoDevice2*, Guid*, DXGI_FORMAT, LibC::BOOL*, HRESULT)
    get_video_decoder_config_count : Proc(ID3D11VideoDevice2*, D3D11_VIDEO_DECODER_DESC*, UInt32*, HRESULT)
    get_video_decoder_config : Proc(ID3D11VideoDevice2*, D3D11_VIDEO_DECODER_DESC*, UInt32, D3D11_VIDEO_DECODER_CONFIG*, HRESULT)
    get_content_protection_caps : Proc(ID3D11VideoDevice2*, Guid*, Guid*, D3D11_VIDEO_CONTENT_PROTECTION_CAPS*, HRESULT)
    check_crypto_key_exchange : Proc(ID3D11VideoDevice2*, Guid*, Guid*, UInt32, Guid*, HRESULT)
    set_private_data : Proc(ID3D11VideoDevice2*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11VideoDevice2*, Guid*, IUnknown, HRESULT)
    get_crypto_session_private_data_size : Proc(ID3D11VideoDevice2*, Guid*, Guid*, Guid*, UInt32*, UInt32*, HRESULT)
    get_video_decoder_caps : Proc(ID3D11VideoDevice2*, Guid*, UInt32, UInt32, DXGI_RATIONAL*, UInt32, Guid*, UInt32*, HRESULT)
    check_video_decoder_downsampling : Proc(ID3D11VideoDevice2*, D3D11_VIDEO_DECODER_DESC*, DXGI_COLOR_SPACE_TYPE, D3D11_VIDEO_DECODER_CONFIG*, DXGI_RATIONAL*, D3D11_VIDEO_SAMPLE_DESC*, LibC::BOOL*, LibC::BOOL*, HRESULT)
    recommend_video_decoder_downsample_parameters : Proc(ID3D11VideoDevice2*, D3D11_VIDEO_DECODER_DESC*, DXGI_COLOR_SPACE_TYPE, D3D11_VIDEO_DECODER_CONFIG*, DXGI_RATIONAL*, D3D11_VIDEO_SAMPLE_DESC*, HRESULT)
    check_feature_support : Proc(ID3D11VideoDevice2*, D3D11_FEATURE_VIDEO, Void*, UInt32, HRESULT)
    negotiate_crypto_session_key_exchange_mt : Proc(ID3D11VideoDevice2*, ID3D11CryptoSession, D3D11_CRYPTO_SESSION_KEY_EXCHANGE_FLAGS, UInt32, Void*, HRESULT)
  end

  ID3D11VideoDevice2_GUID = "59c0cb01-35f0-4a70-8f67-87905c906a53"
  IID_ID3D11VideoDevice2 = LibC::GUID.new(0x59c0cb01_u32, 0x35f0_u16, 0x4a70_u16, StaticArray[0x8f_u8, 0x67_u8, 0x87_u8, 0x90_u8, 0x5c_u8, 0x90_u8, 0x6a_u8, 0x53_u8])
  struct ID3D11VideoDevice2
    lpVtbl : ID3D11VideoDevice2VTbl*
  end

  struct ID3D11VideoContext3VTbl
    query_interface : Proc(ID3D11VideoContext3*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11VideoContext3*, UInt32)
    release : Proc(ID3D11VideoContext3*, UInt32)
    get_device : Proc(ID3D11VideoContext3*, ID3D11Device*, Void)
    get_private_data : Proc(ID3D11VideoContext3*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D11VideoContext3*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D11VideoContext3*, Guid*, IUnknown, HRESULT)
    get_decoder_buffer : Proc(ID3D11VideoContext3*, ID3D11VideoDecoder, D3D11_VIDEO_DECODER_BUFFER_TYPE, UInt32*, Void**, HRESULT)
    release_decoder_buffer : Proc(ID3D11VideoContext3*, ID3D11VideoDecoder, D3D11_VIDEO_DECODER_BUFFER_TYPE, HRESULT)
    decoder_begin_frame : Proc(ID3D11VideoContext3*, ID3D11VideoDecoder, ID3D11VideoDecoderOutputView, UInt32, Void*, HRESULT)
    decoder_end_frame : Proc(ID3D11VideoContext3*, ID3D11VideoDecoder, HRESULT)
    submit_decoder_buffers : Proc(ID3D11VideoContext3*, ID3D11VideoDecoder, UInt32, D3D11_VIDEO_DECODER_BUFFER_DESC*, HRESULT)
    decoder_extension : Proc(ID3D11VideoContext3*, ID3D11VideoDecoder, D3D11_VIDEO_DECODER_EXTENSION*, Int32)
    video_processor_set_output_target_rect : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, LibC::BOOL, RECT*, Void)
    video_processor_set_output_background_color : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, LibC::BOOL, D3D11_VIDEO_COLOR*, Void)
    video_processor_set_output_color_space : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, D3D11_VIDEO_PROCESSOR_COLOR_SPACE*, Void)
    video_processor_set_output_alpha_fill_mode : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE, UInt32, Void)
    video_processor_set_output_constriction : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, LibC::BOOL, SIZE, Void)
    video_processor_set_output_stereo_mode : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, LibC::BOOL, Void)
    video_processor_set_output_extension : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, Guid*, UInt32, Void*, Int32)
    video_processor_get_output_target_rect : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, LibC::BOOL*, RECT*, Void)
    video_processor_get_output_background_color : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, LibC::BOOL*, D3D11_VIDEO_COLOR*, Void)
    video_processor_get_output_color_space : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, D3D11_VIDEO_PROCESSOR_COLOR_SPACE*, Void)
    video_processor_get_output_alpha_fill_mode : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE*, UInt32*, Void)
    video_processor_get_output_constriction : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, LibC::BOOL*, SIZE*, Void)
    video_processor_get_output_stereo_mode : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, LibC::BOOL*, Void)
    video_processor_get_output_extension : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, Guid*, UInt32, Void*, Int32)
    video_processor_set_stream_frame_format : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_FRAME_FORMAT, Void)
    video_processor_set_stream_color_space : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_PROCESSOR_COLOR_SPACE*, Void)
    video_processor_set_stream_output_rate : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_PROCESSOR_OUTPUT_RATE, LibC::BOOL, DXGI_RATIONAL*, Void)
    video_processor_set_stream_source_rect : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, LibC::BOOL, RECT*, Void)
    video_processor_set_stream_dest_rect : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, LibC::BOOL, RECT*, Void)
    video_processor_set_stream_alpha : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, LibC::BOOL, Float32, Void)
    video_processor_set_stream_palette : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, UInt32, UInt32*, Void)
    video_processor_set_stream_pixel_aspect_ratio : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, LibC::BOOL, DXGI_RATIONAL*, DXGI_RATIONAL*, Void)
    video_processor_set_stream_luma_key : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, LibC::BOOL, Float32, Float32, Void)
    video_processor_set_stream_stereo_format : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, LibC::BOOL, D3D11_VIDEO_PROCESSOR_STEREO_FORMAT, LibC::BOOL, LibC::BOOL, D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE, Int32, Void)
    video_processor_set_stream_auto_processing_mode : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, LibC::BOOL, Void)
    video_processor_set_stream_filter : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_PROCESSOR_FILTER, LibC::BOOL, Int32, Void)
    video_processor_set_stream_extension : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, Guid*, UInt32, Void*, Int32)
    video_processor_get_stream_frame_format : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_FRAME_FORMAT*, Void)
    video_processor_get_stream_color_space : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_PROCESSOR_COLOR_SPACE*, Void)
    video_processor_get_stream_output_rate : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_PROCESSOR_OUTPUT_RATE*, LibC::BOOL*, DXGI_RATIONAL*, Void)
    video_processor_get_stream_source_rect : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, RECT*, Void)
    video_processor_get_stream_dest_rect : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, RECT*, Void)
    video_processor_get_stream_alpha : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, Float32*, Void)
    video_processor_get_stream_palette : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, UInt32, UInt32*, Void)
    video_processor_get_stream_pixel_aspect_ratio : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, DXGI_RATIONAL*, DXGI_RATIONAL*, Void)
    video_processor_get_stream_luma_key : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, Float32*, Float32*, Void)
    video_processor_get_stream_stereo_format : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, D3D11_VIDEO_PROCESSOR_STEREO_FORMAT*, LibC::BOOL*, LibC::BOOL*, D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE*, Int32*, Void)
    video_processor_get_stream_auto_processing_mode : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, Void)
    video_processor_get_stream_filter : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, D3D11_VIDEO_PROCESSOR_FILTER, LibC::BOOL*, Int32*, Void)
    video_processor_get_stream_extension : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, Guid*, UInt32, Void*, Int32)
    video_processor_blt : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, ID3D11VideoProcessorOutputView, UInt32, UInt32, D3D11_VIDEO_PROCESSOR_STREAM*, HRESULT)
    negotiate_crypto_session_key_exchange : Proc(ID3D11VideoContext3*, ID3D11CryptoSession, UInt32, Void*, HRESULT)
    encryption_blt : Proc(ID3D11VideoContext3*, ID3D11CryptoSession, ID3D11Texture2D, ID3D11Texture2D, UInt32, Void*, Void)
    decryption_blt : Proc(ID3D11VideoContext3*, ID3D11CryptoSession, ID3D11Texture2D, ID3D11Texture2D, D3D11_ENCRYPTED_BLOCK_INFO*, UInt32, Void*, UInt32, Void*, Void)
    start_session_key_refresh : Proc(ID3D11VideoContext3*, ID3D11CryptoSession, UInt32, Void*, Void)
    finish_session_key_refresh : Proc(ID3D11VideoContext3*, ID3D11CryptoSession, Void)
    get_encryption_blt_key : Proc(ID3D11VideoContext3*, ID3D11CryptoSession, UInt32, Void*, HRESULT)
    negotiate_authenticated_channel_key_exchange : Proc(ID3D11VideoContext3*, ID3D11AuthenticatedChannel, UInt32, Void*, HRESULT)
    query_authenticated_channel : Proc(ID3D11VideoContext3*, ID3D11AuthenticatedChannel, UInt32, Void*, UInt32, Void*, HRESULT)
    configure_authenticated_channel : Proc(ID3D11VideoContext3*, ID3D11AuthenticatedChannel, UInt32, Void*, D3D11_AUTHENTICATED_CONFIGURE_OUTPUT*, HRESULT)
    video_processor_set_stream_rotation : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, LibC::BOOL, D3D11_VIDEO_PROCESSOR_ROTATION, Void)
    video_processor_get_stream_rotation : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, D3D11_VIDEO_PROCESSOR_ROTATION*, Void)
    submit_decoder_buffers1 : Proc(ID3D11VideoContext3*, ID3D11VideoDecoder, UInt32, D3D11_VIDEO_DECODER_BUFFER_DESC1*, HRESULT)
    get_data_for_new_hardware_key : Proc(ID3D11VideoContext3*, ID3D11CryptoSession, UInt32, Void*, UInt64*, HRESULT)
    check_crypto_session_status : Proc(ID3D11VideoContext3*, ID3D11CryptoSession, D3D11_CRYPTO_SESSION_STATUS*, HRESULT)
    decoder_enable_downsampling : Proc(ID3D11VideoContext3*, ID3D11VideoDecoder, DXGI_COLOR_SPACE_TYPE, D3D11_VIDEO_SAMPLE_DESC*, UInt32, HRESULT)
    decoder_update_downsampling : Proc(ID3D11VideoContext3*, ID3D11VideoDecoder, D3D11_VIDEO_SAMPLE_DESC*, HRESULT)
    video_processor_set_output_color_space1 : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, DXGI_COLOR_SPACE_TYPE, Void)
    video_processor_set_output_shader_usage : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, LibC::BOOL, Void)
    video_processor_get_output_color_space1 : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, DXGI_COLOR_SPACE_TYPE*, Void)
    video_processor_get_output_shader_usage : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, LibC::BOOL*, Void)
    video_processor_set_stream_color_space1 : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, DXGI_COLOR_SPACE_TYPE, Void)
    video_processor_set_stream_mirror : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, LibC::BOOL, LibC::BOOL, LibC::BOOL, Void)
    video_processor_get_stream_color_space1 : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, DXGI_COLOR_SPACE_TYPE*, Void)
    video_processor_get_stream_mirror : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, LibC::BOOL*, LibC::BOOL*, LibC::BOOL*, Void)
    video_processor_get_behavior_hints : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, UInt32, DXGI_FORMAT, UInt32, D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT*, UInt32*, HRESULT)
    video_processor_set_output_hdr_meta_data : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, DXGI_HDR_METADATA_TYPE, UInt32, Void*, Void)
    video_processor_get_output_hdr_meta_data : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, DXGI_HDR_METADATA_TYPE*, UInt32, Void*, Void)
    video_processor_set_stream_hdr_meta_data : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, DXGI_HDR_METADATA_TYPE, UInt32, Void*, Void)
    video_processor_get_stream_hdr_meta_data : Proc(ID3D11VideoContext3*, ID3D11VideoProcessor, UInt32, DXGI_HDR_METADATA_TYPE*, UInt32, Void*, Void)
    decoder_begin_frame1 : Proc(ID3D11VideoContext3*, ID3D11VideoDecoder, ID3D11VideoDecoderOutputView, UInt32, Void*, UInt32, UInt32*, ID3D11Buffer*, HRESULT)
    submit_decoder_buffers2 : Proc(ID3D11VideoContext3*, ID3D11VideoDecoder, UInt32, D3D11_VIDEO_DECODER_BUFFER_DESC2*, HRESULT)
  end

  ID3D11VideoContext3_GUID = "a9e2faa0-cb39-418f-a0b7-d8aad4de672e"
  IID_ID3D11VideoContext3 = LibC::GUID.new(0xa9e2faa0_u32, 0xcb39_u16, 0x418f_u16, StaticArray[0xa0_u8, 0xb7_u8, 0xd8_u8, 0xaa_u8, 0xd4_u8, 0xde_u8, 0x67_u8, 0x2e_u8])
  struct ID3D11VideoContext3
    lpVtbl : ID3D11VideoContext3VTbl*
  end

  struct ID3D11ShaderReflectionTypeVTbl
    get_desc : Proc(ID3D11ShaderReflectionType*, D3D11_SHADER_TYPE_DESC*, HRESULT)
    get_member_type_by_index : Proc(ID3D11ShaderReflectionType*, UInt32, ID3D11ShaderReflectionType)
    get_member_type_by_name : Proc(ID3D11ShaderReflectionType*, PSTR, ID3D11ShaderReflectionType)
    get_member_type_name : Proc(ID3D11ShaderReflectionType*, UInt32, PSTR)
    is_equal : Proc(ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType, HRESULT)
    get_sub_type : Proc(ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType)
    get_base_class : Proc(ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType)
    get_num_interfaces : Proc(ID3D11ShaderReflectionType*, UInt32)
    get_interface_by_index : Proc(ID3D11ShaderReflectionType*, UInt32, ID3D11ShaderReflectionType)
    is_of_type : Proc(ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType, HRESULT)
    implements_interface : Proc(ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType, HRESULT)
  end

  ID3D11ShaderReflectionType_GUID = "6e6ffa6a-9bae-4613-a51e-91652d508c21"
  IID_ID3D11ShaderReflectionType = LibC::GUID.new(0x6e6ffa6a_u32, 0x9bae_u16, 0x4613_u16, StaticArray[0xa5_u8, 0x1e_u8, 0x91_u8, 0x65_u8, 0x2d_u8, 0x50_u8, 0x8c_u8, 0x21_u8])
  struct ID3D11ShaderReflectionType
    lpVtbl : ID3D11ShaderReflectionTypeVTbl*
  end

  struct ID3D11ShaderReflectionVariableVTbl
    get_desc : Proc(ID3D11ShaderReflectionVariable*, D3D11_SHADER_VARIABLE_DESC*, HRESULT)
    get_type : Proc(ID3D11ShaderReflectionVariable*, ID3D11ShaderReflectionType)
    get_buffer : Proc(ID3D11ShaderReflectionVariable*, ID3D11ShaderReflectionConstantBuffer)
    get_interface_slot : Proc(ID3D11ShaderReflectionVariable*, UInt32, UInt32)
  end

  ID3D11ShaderReflectionVariable_GUID = "51f23923-f3e5-4bd1-91cb-606177d8db4c"
  IID_ID3D11ShaderReflectionVariable = LibC::GUID.new(0x51f23923_u32, 0xf3e5_u16, 0x4bd1_u16, StaticArray[0x91_u8, 0xcb_u8, 0x60_u8, 0x61_u8, 0x77_u8, 0xd8_u8, 0xdb_u8, 0x4c_u8])
  struct ID3D11ShaderReflectionVariable
    lpVtbl : ID3D11ShaderReflectionVariableVTbl*
  end

  struct ID3D11ShaderReflectionConstantBufferVTbl
    get_desc : Proc(ID3D11ShaderReflectionConstantBuffer*, D3D11_SHADER_BUFFER_DESC*, HRESULT)
    get_variable_by_index : Proc(ID3D11ShaderReflectionConstantBuffer*, UInt32, ID3D11ShaderReflectionVariable)
    get_variable_by_name : Proc(ID3D11ShaderReflectionConstantBuffer*, PSTR, ID3D11ShaderReflectionVariable)
  end

  ID3D11ShaderReflectionConstantBuffer_GUID = "eb62d63d-93dd-4318-8ae8-c6f83ad371b8"
  IID_ID3D11ShaderReflectionConstantBuffer = LibC::GUID.new(0xeb62d63d_u32, 0x93dd_u16, 0x4318_u16, StaticArray[0x8a_u8, 0xe8_u8, 0xc6_u8, 0xf8_u8, 0x3a_u8, 0xd3_u8, 0x71_u8, 0xb8_u8])
  struct ID3D11ShaderReflectionConstantBuffer
    lpVtbl : ID3D11ShaderReflectionConstantBufferVTbl*
  end

  struct ID3D11ShaderReflectionVTbl
    query_interface : Proc(ID3D11ShaderReflection*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11ShaderReflection*, UInt32)
    release : Proc(ID3D11ShaderReflection*, UInt32)
    get_desc : Proc(ID3D11ShaderReflection*, D3D11_SHADER_DESC*, HRESULT)
    get_constant_buffer_by_index : Proc(ID3D11ShaderReflection*, UInt32, ID3D11ShaderReflectionConstantBuffer)
    get_constant_buffer_by_name : Proc(ID3D11ShaderReflection*, PSTR, ID3D11ShaderReflectionConstantBuffer)
    get_resource_binding_desc : Proc(ID3D11ShaderReflection*, UInt32, D3D11_SHADER_INPUT_BIND_DESC*, HRESULT)
    get_input_parameter_desc : Proc(ID3D11ShaderReflection*, UInt32, D3D11_SIGNATURE_PARAMETER_DESC*, HRESULT)
    get_output_parameter_desc : Proc(ID3D11ShaderReflection*, UInt32, D3D11_SIGNATURE_PARAMETER_DESC*, HRESULT)
    get_patch_constant_parameter_desc : Proc(ID3D11ShaderReflection*, UInt32, D3D11_SIGNATURE_PARAMETER_DESC*, HRESULT)
    get_variable_by_name : Proc(ID3D11ShaderReflection*, PSTR, ID3D11ShaderReflectionVariable)
    get_resource_binding_desc_by_name : Proc(ID3D11ShaderReflection*, PSTR, D3D11_SHADER_INPUT_BIND_DESC*, HRESULT)
    get_mov_instruction_count : Proc(ID3D11ShaderReflection*, UInt32)
    get_movc_instruction_count : Proc(ID3D11ShaderReflection*, UInt32)
    get_conversion_instruction_count : Proc(ID3D11ShaderReflection*, UInt32)
    get_bitwise_instruction_count : Proc(ID3D11ShaderReflection*, UInt32)
    get_gs_input_primitive : Proc(ID3D11ShaderReflection*, D3D_PRIMITIVE)
    is_sample_frequency_shader : Proc(ID3D11ShaderReflection*, LibC::BOOL)
    get_num_interface_slots : Proc(ID3D11ShaderReflection*, UInt32)
    get_min_feature_level : Proc(ID3D11ShaderReflection*, D3D_FEATURE_LEVEL*, HRESULT)
    get_thread_group_size : Proc(ID3D11ShaderReflection*, UInt32*, UInt32*, UInt32*, UInt32)
    get_requires_flags : Proc(ID3D11ShaderReflection*, UInt64)
  end

  ID3D11ShaderReflection_GUID = "8d536ca1-0cca-4956-a837-786963755584"
  IID_ID3D11ShaderReflection = LibC::GUID.new(0x8d536ca1_u32, 0xcca_u16, 0x4956_u16, StaticArray[0xa8_u8, 0x37_u8, 0x78_u8, 0x69_u8, 0x63_u8, 0x75_u8, 0x55_u8, 0x84_u8])
  struct ID3D11ShaderReflection
    lpVtbl : ID3D11ShaderReflectionVTbl*
  end

  struct ID3D11LibraryReflectionVTbl
    query_interface : Proc(ID3D11LibraryReflection*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11LibraryReflection*, UInt32)
    release : Proc(ID3D11LibraryReflection*, UInt32)
    get_desc : Proc(ID3D11LibraryReflection*, D3D11_LIBRARY_DESC*, HRESULT)
    get_function_by_index : Proc(ID3D11LibraryReflection*, Int32, ID3D11FunctionReflection)
  end

  ID3D11LibraryReflection_GUID = "54384f1b-5b3e-4bb7-ae01-60ba3097cbb6"
  IID_ID3D11LibraryReflection = LibC::GUID.new(0x54384f1b_u32, 0x5b3e_u16, 0x4bb7_u16, StaticArray[0xae_u8, 0x1_u8, 0x60_u8, 0xba_u8, 0x30_u8, 0x97_u8, 0xcb_u8, 0xb6_u8])
  struct ID3D11LibraryReflection
    lpVtbl : ID3D11LibraryReflectionVTbl*
  end

  struct ID3D11FunctionReflectionVTbl
    get_desc : Proc(ID3D11FunctionReflection*, D3D11_FUNCTION_DESC*, HRESULT)
    get_constant_buffer_by_index : Proc(ID3D11FunctionReflection*, UInt32, ID3D11ShaderReflectionConstantBuffer)
    get_constant_buffer_by_name : Proc(ID3D11FunctionReflection*, PSTR, ID3D11ShaderReflectionConstantBuffer)
    get_resource_binding_desc : Proc(ID3D11FunctionReflection*, UInt32, D3D11_SHADER_INPUT_BIND_DESC*, HRESULT)
    get_variable_by_name : Proc(ID3D11FunctionReflection*, PSTR, ID3D11ShaderReflectionVariable)
    get_resource_binding_desc_by_name : Proc(ID3D11FunctionReflection*, PSTR, D3D11_SHADER_INPUT_BIND_DESC*, HRESULT)
    get_function_parameter : Proc(ID3D11FunctionReflection*, Int32, ID3D11FunctionParameterReflection)
  end

  ID3D11FunctionReflection_GUID = "207bcecb-d683-4a06-a8a3-9b149b9f73a4"
  IID_ID3D11FunctionReflection = LibC::GUID.new(0x207bcecb_u32, 0xd683_u16, 0x4a06_u16, StaticArray[0xa8_u8, 0xa3_u8, 0x9b_u8, 0x14_u8, 0x9b_u8, 0x9f_u8, 0x73_u8, 0xa4_u8])
  struct ID3D11FunctionReflection
    lpVtbl : ID3D11FunctionReflectionVTbl*
  end

  struct ID3D11FunctionParameterReflectionVTbl
    get_desc : Proc(ID3D11FunctionParameterReflection*, D3D11_PARAMETER_DESC*, HRESULT)
  end

  ID3D11FunctionParameterReflection_GUID = "42757488-334f-47fe-982e-1a65d08cc462"
  IID_ID3D11FunctionParameterReflection = LibC::GUID.new(0x42757488_u32, 0x334f_u16, 0x47fe_u16, StaticArray[0x98_u8, 0x2e_u8, 0x1a_u8, 0x65_u8, 0xd0_u8, 0x8c_u8, 0xc4_u8, 0x62_u8])
  struct ID3D11FunctionParameterReflection
    lpVtbl : ID3D11FunctionParameterReflectionVTbl*
  end

  struct ID3D11ModuleInstanceVTbl
    query_interface : Proc(ID3D11ModuleInstance*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11ModuleInstance*, UInt32)
    release : Proc(ID3D11ModuleInstance*, UInt32)
    bind_constant_buffer : Proc(ID3D11ModuleInstance*, UInt32, UInt32, UInt32, HRESULT)
    bind_constant_buffer_by_name : Proc(ID3D11ModuleInstance*, PSTR, UInt32, UInt32, HRESULT)
    bind_resource : Proc(ID3D11ModuleInstance*, UInt32, UInt32, UInt32, HRESULT)
    bind_resource_by_name : Proc(ID3D11ModuleInstance*, PSTR, UInt32, UInt32, HRESULT)
    bind_sampler : Proc(ID3D11ModuleInstance*, UInt32, UInt32, UInt32, HRESULT)
    bind_sampler_by_name : Proc(ID3D11ModuleInstance*, PSTR, UInt32, UInt32, HRESULT)
    bind_unordered_access_view : Proc(ID3D11ModuleInstance*, UInt32, UInt32, UInt32, HRESULT)
    bind_unordered_access_view_by_name : Proc(ID3D11ModuleInstance*, PSTR, UInt32, UInt32, HRESULT)
    bind_resource_as_unordered_access_view : Proc(ID3D11ModuleInstance*, UInt32, UInt32, UInt32, HRESULT)
    bind_resource_as_unordered_access_view_by_name : Proc(ID3D11ModuleInstance*, PSTR, UInt32, UInt32, HRESULT)
  end

  ID3D11ModuleInstance_GUID = "469e07f7-045a-48d5-aa12-68a478cdf75d"
  IID_ID3D11ModuleInstance = LibC::GUID.new(0x469e07f7_u32, 0x45a_u16, 0x48d5_u16, StaticArray[0xaa_u8, 0x12_u8, 0x68_u8, 0xa4_u8, 0x78_u8, 0xcd_u8, 0xf7_u8, 0x5d_u8])
  struct ID3D11ModuleInstance
    lpVtbl : ID3D11ModuleInstanceVTbl*
  end

  struct ID3D11ModuleVTbl
    query_interface : Proc(ID3D11Module*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11Module*, UInt32)
    release : Proc(ID3D11Module*, UInt32)
    create_instance : Proc(ID3D11Module*, PSTR, ID3D11ModuleInstance*, HRESULT)
  end

  ID3D11Module_GUID = "cac701ee-80fc-4122-8242-10b39c8cec34"
  IID_ID3D11Module = LibC::GUID.new(0xcac701ee_u32, 0x80fc_u16, 0x4122_u16, StaticArray[0x82_u8, 0x42_u8, 0x10_u8, 0xb3_u8, 0x9c_u8, 0x8c_u8, 0xec_u8, 0x34_u8])
  struct ID3D11Module
    lpVtbl : ID3D11ModuleVTbl*
  end

  struct ID3D11LinkerVTbl
    query_interface : Proc(ID3D11Linker*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11Linker*, UInt32)
    release : Proc(ID3D11Linker*, UInt32)
    link : Proc(ID3D11Linker*, ID3D11ModuleInstance, PSTR, PSTR, UInt32, ID3DBlob*, ID3DBlob*, HRESULT)
    use_library : Proc(ID3D11Linker*, ID3D11ModuleInstance, HRESULT)
    add_clip_plane_from_c_buffer : Proc(ID3D11Linker*, UInt32, UInt32, HRESULT)
  end

  ID3D11Linker_GUID = "59a6cd0e-e10d-4c1f-88c0-63aba1daf30e"
  IID_ID3D11Linker = LibC::GUID.new(0x59a6cd0e_u32, 0xe10d_u16, 0x4c1f_u16, StaticArray[0x88_u8, 0xc0_u8, 0x63_u8, 0xab_u8, 0xa1_u8, 0xda_u8, 0xf3_u8, 0xe_u8])
  struct ID3D11Linker
    lpVtbl : ID3D11LinkerVTbl*
  end

  struct ID3D11LinkingNodeVTbl
    query_interface : Proc(ID3D11LinkingNode*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11LinkingNode*, UInt32)
    release : Proc(ID3D11LinkingNode*, UInt32)
  end

  ID3D11LinkingNode_GUID = "d80dd70c-8d2f-4751-94a1-03c79b3556db"
  IID_ID3D11LinkingNode = LibC::GUID.new(0xd80dd70c_u32, 0x8d2f_u16, 0x4751_u16, StaticArray[0x94_u8, 0xa1_u8, 0x3_u8, 0xc7_u8, 0x9b_u8, 0x35_u8, 0x56_u8, 0xdb_u8])
  struct ID3D11LinkingNode
    lpVtbl : ID3D11LinkingNodeVTbl*
  end

  struct ID3D11FunctionLinkingGraphVTbl
    query_interface : Proc(ID3D11FunctionLinkingGraph*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11FunctionLinkingGraph*, UInt32)
    release : Proc(ID3D11FunctionLinkingGraph*, UInt32)
    create_module_instance : Proc(ID3D11FunctionLinkingGraph*, ID3D11ModuleInstance*, ID3DBlob*, HRESULT)
    set_input_signature : Proc(ID3D11FunctionLinkingGraph*, D3D11_PARAMETER_DESC*, UInt32, ID3D11LinkingNode*, HRESULT)
    set_output_signature : Proc(ID3D11FunctionLinkingGraph*, D3D11_PARAMETER_DESC*, UInt32, ID3D11LinkingNode*, HRESULT)
    call_function : Proc(ID3D11FunctionLinkingGraph*, PSTR, ID3D11Module, PSTR, ID3D11LinkingNode*, HRESULT)
    pass_value : Proc(ID3D11FunctionLinkingGraph*, ID3D11LinkingNode, Int32, ID3D11LinkingNode, Int32, HRESULT)
    pass_value_with_swizzle : Proc(ID3D11FunctionLinkingGraph*, ID3D11LinkingNode, Int32, PSTR, ID3D11LinkingNode, Int32, PSTR, HRESULT)
    get_last_error : Proc(ID3D11FunctionLinkingGraph*, ID3DBlob*, HRESULT)
    generate_hlsl : Proc(ID3D11FunctionLinkingGraph*, UInt32, ID3DBlob*, HRESULT)
  end

  ID3D11FunctionLinkingGraph_GUID = "54133220-1ce8-43d3-8236-9855c5ceecff"
  IID_ID3D11FunctionLinkingGraph = LibC::GUID.new(0x54133220_u32, 0x1ce8_u16, 0x43d3_u16, StaticArray[0x82_u8, 0x36_u8, 0x98_u8, 0x55_u8, 0xc5_u8, 0xce_u8, 0xec_u8, 0xff_u8])
  struct ID3D11FunctionLinkingGraph
    lpVtbl : ID3D11FunctionLinkingGraphVTbl*
  end

  struct ID3D11ShaderTraceVTbl
    query_interface : Proc(ID3D11ShaderTrace*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11ShaderTrace*, UInt32)
    release : Proc(ID3D11ShaderTrace*, UInt32)
    trace_ready : Proc(ID3D11ShaderTrace*, UInt64*, HRESULT)
    reset_trace : Proc(ID3D11ShaderTrace*, Void)
    get_trace_stats : Proc(ID3D11ShaderTrace*, D3D11_TRACE_STATS*, HRESULT)
    ps_select_stamp : Proc(ID3D11ShaderTrace*, UInt32, HRESULT)
    get_initial_register_contents : Proc(ID3D11ShaderTrace*, D3D11_TRACE_REGISTER*, D3D11_TRACE_VALUE*, HRESULT)
    get_step : Proc(ID3D11ShaderTrace*, UInt32, D3D11_TRACE_STEP*, HRESULT)
    get_written_register : Proc(ID3D11ShaderTrace*, UInt32, UInt32, D3D11_TRACE_REGISTER*, D3D11_TRACE_VALUE*, HRESULT)
    get_read_register : Proc(ID3D11ShaderTrace*, UInt32, UInt32, D3D11_TRACE_REGISTER*, D3D11_TRACE_VALUE*, HRESULT)
  end

  ID3D11ShaderTrace_GUID = "36b013e6-2811-4845-baa7-d623fe0df104"
  IID_ID3D11ShaderTrace = LibC::GUID.new(0x36b013e6_u32, 0x2811_u16, 0x4845_u16, StaticArray[0xba_u8, 0xa7_u8, 0xd6_u8, 0x23_u8, 0xfe_u8, 0xd_u8, 0xf1_u8, 0x4_u8])
  struct ID3D11ShaderTrace
    lpVtbl : ID3D11ShaderTraceVTbl*
  end

  struct ID3D11ShaderTraceFactoryVTbl
    query_interface : Proc(ID3D11ShaderTraceFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D11ShaderTraceFactory*, UInt32)
    release : Proc(ID3D11ShaderTraceFactory*, UInt32)
    create_shader_trace : Proc(ID3D11ShaderTraceFactory*, IUnknown, D3D11_SHADER_TRACE_DESC*, ID3D11ShaderTrace*, HRESULT)
  end

  ID3D11ShaderTraceFactory_GUID = "1fbad429-66ab-41cc-9617-667ac10e4459"
  IID_ID3D11ShaderTraceFactory = LibC::GUID.new(0x1fbad429_u32, 0x66ab_u16, 0x41cc_u16, StaticArray[0x96_u8, 0x17_u8, 0x66_u8, 0x7a_u8, 0xc1_u8, 0xe_u8, 0x44_u8, 0x59_u8])
  struct ID3D11ShaderTraceFactory
    lpVtbl : ID3D11ShaderTraceFactoryVTbl*
  end

  struct ID3DX11ScanVTbl
    query_interface : Proc(ID3DX11Scan*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3DX11Scan*, UInt32)
    release : Proc(ID3DX11Scan*, UInt32)
    set_scan_direction : Proc(ID3DX11Scan*, D3DX11_SCAN_DIRECTION, HRESULT)
    scan : Proc(ID3DX11Scan*, D3DX11_SCAN_DATA_TYPE, D3DX11_SCAN_OPCODE, UInt32, ID3D11UnorderedAccessView, ID3D11UnorderedAccessView, HRESULT)
    multiscan : Proc(ID3DX11Scan*, D3DX11_SCAN_DATA_TYPE, D3DX11_SCAN_OPCODE, UInt32, UInt32, UInt32, ID3D11UnorderedAccessView, ID3D11UnorderedAccessView, HRESULT)
  end

  ID3DX11Scan_GUID = "5089b68f-e71d-4d38-be8e-f363b95a9405"
  IID_ID3DX11Scan = LibC::GUID.new(0x5089b68f_u32, 0xe71d_u16, 0x4d38_u16, StaticArray[0xbe_u8, 0x8e_u8, 0xf3_u8, 0x63_u8, 0xb9_u8, 0x5a_u8, 0x94_u8, 0x5_u8])
  struct ID3DX11Scan
    lpVtbl : ID3DX11ScanVTbl*
  end

  struct ID3DX11SegmentedScanVTbl
    query_interface : Proc(ID3DX11SegmentedScan*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3DX11SegmentedScan*, UInt32)
    release : Proc(ID3DX11SegmentedScan*, UInt32)
    set_scan_direction : Proc(ID3DX11SegmentedScan*, D3DX11_SCAN_DIRECTION, HRESULT)
    seg_scan : Proc(ID3DX11SegmentedScan*, D3DX11_SCAN_DATA_TYPE, D3DX11_SCAN_OPCODE, UInt32, ID3D11UnorderedAccessView, ID3D11UnorderedAccessView, ID3D11UnorderedAccessView, HRESULT)
  end

  ID3DX11SegmentedScan_GUID = "a915128c-d954-4c79-bfe1-64db923194d6"
  IID_ID3DX11SegmentedScan = LibC::GUID.new(0xa915128c_u32, 0xd954_u16, 0x4c79_u16, StaticArray[0xbf_u8, 0xe1_u8, 0x64_u8, 0xdb_u8, 0x92_u8, 0x31_u8, 0x94_u8, 0xd6_u8])
  struct ID3DX11SegmentedScan
    lpVtbl : ID3DX11SegmentedScanVTbl*
  end

  struct ID3DX11FFTVTbl
    query_interface : Proc(ID3DX11FFT*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3DX11FFT*, UInt32)
    release : Proc(ID3DX11FFT*, UInt32)
    set_forward_scale : Proc(ID3DX11FFT*, Float32, HRESULT)
    get_forward_scale : Proc(ID3DX11FFT*, Float32)
    set_inverse_scale : Proc(ID3DX11FFT*, Float32, HRESULT)
    get_inverse_scale : Proc(ID3DX11FFT*, Float32)
    attach_buffers_and_precompute : Proc(ID3DX11FFT*, UInt32, ID3D11UnorderedAccessView*, UInt32, ID3D11UnorderedAccessView*, HRESULT)
    forward_transform : Proc(ID3DX11FFT*, ID3D11UnorderedAccessView, ID3D11UnorderedAccessView*, HRESULT)
    inverse_transform : Proc(ID3DX11FFT*, ID3D11UnorderedAccessView, ID3D11UnorderedAccessView*, HRESULT)
  end

  ID3DX11FFT_GUID = "b3f7a938-4c93-4310-a675-b30d6de50553"
  IID_ID3DX11FFT = LibC::GUID.new(0xb3f7a938_u32, 0x4c93_u16, 0x4310_u16, StaticArray[0xa6_u8, 0x75_u8, 0xb3_u8, 0xd_u8, 0x6d_u8, 0xe5_u8, 0x5_u8, 0x53_u8])
  struct ID3DX11FFT
    lpVtbl : ID3DX11FFTVTbl*
  end


  # Params # padapter : IDXGIAdapter [In],drivertype : D3D_DRIVER_TYPE [In],software : HINSTANCE [In],flags : D3D11_CREATE_DEVICE_FLAG [In],pfeaturelevels : D3D_FEATURE_LEVEL* [In],featurelevels : UInt32 [In],sdkversion : UInt32 [In],ppdevice : ID3D11Device* [In],pfeaturelevel : D3D_FEATURE_LEVEL* [In],ppimmediatecontext : ID3D11DeviceContext* [In]
  fun D3D11CreateDevice(padapter : IDXGIAdapter, drivertype : D3D_DRIVER_TYPE, software : HINSTANCE, flags : D3D11_CREATE_DEVICE_FLAG, pfeaturelevels : D3D_FEATURE_LEVEL*, featurelevels : UInt32, sdkversion : UInt32, ppdevice : ID3D11Device*, pfeaturelevel : D3D_FEATURE_LEVEL*, ppimmediatecontext : ID3D11DeviceContext*) : HRESULT

  # Params # padapter : IDXGIAdapter [In],drivertype : D3D_DRIVER_TYPE [In],software : HINSTANCE [In],flags : D3D11_CREATE_DEVICE_FLAG [In],pfeaturelevels : D3D_FEATURE_LEVEL* [In],featurelevels : UInt32 [In],sdkversion : UInt32 [In],pswapchaindesc : DXGI_SWAP_CHAIN_DESC* [In],ppswapchain : IDXGISwapChain* [In],ppdevice : ID3D11Device* [In],pfeaturelevel : D3D_FEATURE_LEVEL* [In],ppimmediatecontext : ID3D11DeviceContext* [In]
  fun D3D11CreateDeviceAndSwapChain(padapter : IDXGIAdapter, drivertype : D3D_DRIVER_TYPE, software : HINSTANCE, flags : D3D11_CREATE_DEVICE_FLAG, pfeaturelevels : D3D_FEATURE_LEVEL*, featurelevels : UInt32, sdkversion : UInt32, pswapchaindesc : DXGI_SWAP_CHAIN_DESC*, ppswapchain : IDXGISwapChain*, ppdevice : ID3D11Device*, pfeaturelevel : D3D_FEATURE_LEVEL*, ppimmediatecontext : ID3D11DeviceContext*) : HRESULT

  # Params # psrcdata : Void* [In],srcdatasize : LibC::UINT_PTR [In],ptrace : ID3D11ShaderTrace [In],startstep : UInt32 [In],numsteps : UInt32 [In],flags : UInt32 [In],ppdisassembly : ID3DBlob* [In]
  fun D3DDisassemble11Trace(psrcdata : Void*, srcdatasize : LibC::UINT_PTR, ptrace : ID3D11ShaderTrace, startstep : UInt32, numsteps : UInt32, flags : UInt32, ppdisassembly : ID3DBlob*) : HRESULT

  # Params # pdevicecontext : ID3D11DeviceContext [In],maxelementscansize : UInt32 [In],maxscancount : UInt32 [In],ppscan : ID3DX11Scan* [In]
  fun D3DX11CreateScan(pdevicecontext : ID3D11DeviceContext, maxelementscansize : UInt32, maxscancount : UInt32, ppscan : ID3DX11Scan*) : HRESULT

  # Params # pdevicecontext : ID3D11DeviceContext [In],maxelementscansize : UInt32 [In],ppscan : ID3DX11SegmentedScan* [In]
  fun D3DX11CreateSegmentedScan(pdevicecontext : ID3D11DeviceContext, maxelementscansize : UInt32, ppscan : ID3DX11SegmentedScan*) : HRESULT

  # Params # pdevicecontext : ID3D11DeviceContext [In],pdesc : D3DX11_FFT_DESC* [In],flags : UInt32 [In],pbufferinfo : D3DX11_FFT_BUFFER_INFO* [In],ppfft : ID3DX11FFT* [In]
  fun D3DX11CreateFFT(pdevicecontext : ID3D11DeviceContext, pdesc : D3DX11_FFT_DESC*, flags : UInt32, pbufferinfo : D3DX11_FFT_BUFFER_INFO*, ppfft : ID3DX11FFT*) : HRESULT

  # Params # pdevicecontext : ID3D11DeviceContext [In],x : UInt32 [In],flags : UInt32 [In],pbufferinfo : D3DX11_FFT_BUFFER_INFO* [In],ppfft : ID3DX11FFT* [In]
  fun D3DX11CreateFFT1DReal(pdevicecontext : ID3D11DeviceContext, x : UInt32, flags : UInt32, pbufferinfo : D3DX11_FFT_BUFFER_INFO*, ppfft : ID3DX11FFT*) : HRESULT

  # Params # pdevicecontext : ID3D11DeviceContext [In],x : UInt32 [In],flags : UInt32 [In],pbufferinfo : D3DX11_FFT_BUFFER_INFO* [In],ppfft : ID3DX11FFT* [In]
  fun D3DX11CreateFFT1DComplex(pdevicecontext : ID3D11DeviceContext, x : UInt32, flags : UInt32, pbufferinfo : D3DX11_FFT_BUFFER_INFO*, ppfft : ID3DX11FFT*) : HRESULT

  # Params # pdevicecontext : ID3D11DeviceContext [In],x : UInt32 [In],y : UInt32 [In],flags : UInt32 [In],pbufferinfo : D3DX11_FFT_BUFFER_INFO* [In],ppfft : ID3DX11FFT* [In]
  fun D3DX11CreateFFT2DReal(pdevicecontext : ID3D11DeviceContext, x : UInt32, y : UInt32, flags : UInt32, pbufferinfo : D3DX11_FFT_BUFFER_INFO*, ppfft : ID3DX11FFT*) : HRESULT

  # Params # pdevicecontext : ID3D11DeviceContext [In],x : UInt32 [In],y : UInt32 [In],flags : UInt32 [In],pbufferinfo : D3DX11_FFT_BUFFER_INFO* [In],ppfft : ID3DX11FFT* [In]
  fun D3DX11CreateFFT2DComplex(pdevicecontext : ID3D11DeviceContext, x : UInt32, y : UInt32, flags : UInt32, pbufferinfo : D3DX11_FFT_BUFFER_INFO*, ppfft : ID3DX11FFT*) : HRESULT

  # Params # pdevicecontext : ID3D11DeviceContext [In],x : UInt32 [In],y : UInt32 [In],z : UInt32 [In],flags : UInt32 [In],pbufferinfo : D3DX11_FFT_BUFFER_INFO* [In],ppfft : ID3DX11FFT* [In]
  fun D3DX11CreateFFT3DReal(pdevicecontext : ID3D11DeviceContext, x : UInt32, y : UInt32, z : UInt32, flags : UInt32, pbufferinfo : D3DX11_FFT_BUFFER_INFO*, ppfft : ID3DX11FFT*) : HRESULT

  # Params # pdevicecontext : ID3D11DeviceContext [In],x : UInt32 [In],y : UInt32 [In],z : UInt32 [In],flags : UInt32 [In],pbufferinfo : D3DX11_FFT_BUFFER_INFO* [In],ppfft : ID3DX11FFT* [In]
  fun D3DX11CreateFFT3DComplex(pdevicecontext : ID3D11DeviceContext, x : UInt32, y : UInt32, z : UInt32, flags : UInt32, pbufferinfo : D3DX11_FFT_BUFFER_INFO*, ppfft : ID3DX11FFT*) : HRESULT
end
struct LibWin32::ID3D11DeviceChild
  def query_interface(this : ID3D11DeviceChild*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11DeviceChild*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11DeviceChild*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11DeviceChild*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11DeviceChild*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11DeviceChild*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11DeviceChild*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
end
struct LibWin32::ID3D11DepthStencilState
  def query_interface(this : ID3D11DepthStencilState*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11DepthStencilState*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11DepthStencilState*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11DepthStencilState*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11DepthStencilState*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11DepthStencilState*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11DepthStencilState*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_desc(this : ID3D11DepthStencilState*, pdesc : D3D11_DEPTH_STENCIL_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
end
struct LibWin32::ID3D11BlendState
  def query_interface(this : ID3D11BlendState*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11BlendState*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11BlendState*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11BlendState*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11BlendState*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11BlendState*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11BlendState*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_desc(this : ID3D11BlendState*, pdesc : D3D11_BLEND_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
end
struct LibWin32::ID3D11RasterizerState
  def query_interface(this : ID3D11RasterizerState*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11RasterizerState*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11RasterizerState*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11RasterizerState*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11RasterizerState*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11RasterizerState*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11RasterizerState*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_desc(this : ID3D11RasterizerState*, pdesc : D3D11_RASTERIZER_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
end
struct LibWin32::ID3D11Resource
  def query_interface(this : ID3D11Resource*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11Resource*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11Resource*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11Resource*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11Resource*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11Resource*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11Resource*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_type(this : ID3D11Resource*, presourcedimension : D3D11_RESOURCE_DIMENSION*) : Void
    @lpVtbl.value.get_type.call(this, presourcedimension)
  end
  def set_eviction_priority(this : ID3D11Resource*, evictionpriority : UInt32) : Void
    @lpVtbl.value.set_eviction_priority.call(this, evictionpriority)
  end
  def get_eviction_priority(this : ID3D11Resource*) : UInt32
    @lpVtbl.value.get_eviction_priority.call(this)
  end
end
struct LibWin32::ID3D11Buffer
  def query_interface(this : ID3D11Buffer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11Buffer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11Buffer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11Buffer*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11Buffer*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11Buffer*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11Buffer*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_type(this : ID3D11Buffer*, presourcedimension : D3D11_RESOURCE_DIMENSION*) : Void
    @lpVtbl.value.get_type.call(this, presourcedimension)
  end
  def set_eviction_priority(this : ID3D11Buffer*, evictionpriority : UInt32) : Void
    @lpVtbl.value.set_eviction_priority.call(this, evictionpriority)
  end
  def get_eviction_priority(this : ID3D11Buffer*) : UInt32
    @lpVtbl.value.get_eviction_priority.call(this)
  end
  def get_desc(this : ID3D11Buffer*, pdesc : D3D11_BUFFER_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
end
struct LibWin32::ID3D11Texture1D
  def query_interface(this : ID3D11Texture1D*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11Texture1D*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11Texture1D*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11Texture1D*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11Texture1D*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11Texture1D*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11Texture1D*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_type(this : ID3D11Texture1D*, presourcedimension : D3D11_RESOURCE_DIMENSION*) : Void
    @lpVtbl.value.get_type.call(this, presourcedimension)
  end
  def set_eviction_priority(this : ID3D11Texture1D*, evictionpriority : UInt32) : Void
    @lpVtbl.value.set_eviction_priority.call(this, evictionpriority)
  end
  def get_eviction_priority(this : ID3D11Texture1D*) : UInt32
    @lpVtbl.value.get_eviction_priority.call(this)
  end
  def get_desc(this : ID3D11Texture1D*, pdesc : D3D11_TEXTURE1D_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
end
struct LibWin32::ID3D11Texture2D
  def query_interface(this : ID3D11Texture2D*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11Texture2D*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11Texture2D*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11Texture2D*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11Texture2D*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11Texture2D*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11Texture2D*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_type(this : ID3D11Texture2D*, presourcedimension : D3D11_RESOURCE_DIMENSION*) : Void
    @lpVtbl.value.get_type.call(this, presourcedimension)
  end
  def set_eviction_priority(this : ID3D11Texture2D*, evictionpriority : UInt32) : Void
    @lpVtbl.value.set_eviction_priority.call(this, evictionpriority)
  end
  def get_eviction_priority(this : ID3D11Texture2D*) : UInt32
    @lpVtbl.value.get_eviction_priority.call(this)
  end
  def get_desc(this : ID3D11Texture2D*, pdesc : D3D11_TEXTURE2D_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
end
struct LibWin32::ID3D11Texture3D
  def query_interface(this : ID3D11Texture3D*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11Texture3D*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11Texture3D*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11Texture3D*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11Texture3D*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11Texture3D*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11Texture3D*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_type(this : ID3D11Texture3D*, presourcedimension : D3D11_RESOURCE_DIMENSION*) : Void
    @lpVtbl.value.get_type.call(this, presourcedimension)
  end
  def set_eviction_priority(this : ID3D11Texture3D*, evictionpriority : UInt32) : Void
    @lpVtbl.value.set_eviction_priority.call(this, evictionpriority)
  end
  def get_eviction_priority(this : ID3D11Texture3D*) : UInt32
    @lpVtbl.value.get_eviction_priority.call(this)
  end
  def get_desc(this : ID3D11Texture3D*, pdesc : D3D11_TEXTURE3D_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
end
struct LibWin32::ID3D11View
  def query_interface(this : ID3D11View*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11View*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11View*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11View*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11View*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11View*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11View*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_resource(this : ID3D11View*, ppresource : ID3D11Resource*) : Void
    @lpVtbl.value.get_resource.call(this, ppresource)
  end
end
struct LibWin32::ID3D11ShaderResourceView
  def query_interface(this : ID3D11ShaderResourceView*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11ShaderResourceView*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11ShaderResourceView*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11ShaderResourceView*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11ShaderResourceView*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11ShaderResourceView*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11ShaderResourceView*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_resource(this : ID3D11ShaderResourceView*, ppresource : ID3D11Resource*) : Void
    @lpVtbl.value.get_resource.call(this, ppresource)
  end
  def get_desc(this : ID3D11ShaderResourceView*, pdesc : D3D11_SHADER_RESOURCE_VIEW_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
end
struct LibWin32::ID3D11RenderTargetView
  def query_interface(this : ID3D11RenderTargetView*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11RenderTargetView*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11RenderTargetView*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11RenderTargetView*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11RenderTargetView*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11RenderTargetView*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11RenderTargetView*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_resource(this : ID3D11RenderTargetView*, ppresource : ID3D11Resource*) : Void
    @lpVtbl.value.get_resource.call(this, ppresource)
  end
  def get_desc(this : ID3D11RenderTargetView*, pdesc : D3D11_RENDER_TARGET_VIEW_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
end
struct LibWin32::ID3D11DepthStencilView
  def query_interface(this : ID3D11DepthStencilView*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11DepthStencilView*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11DepthStencilView*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11DepthStencilView*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11DepthStencilView*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11DepthStencilView*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11DepthStencilView*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_resource(this : ID3D11DepthStencilView*, ppresource : ID3D11Resource*) : Void
    @lpVtbl.value.get_resource.call(this, ppresource)
  end
  def get_desc(this : ID3D11DepthStencilView*, pdesc : D3D11_DEPTH_STENCIL_VIEW_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
end
struct LibWin32::ID3D11UnorderedAccessView
  def query_interface(this : ID3D11UnorderedAccessView*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11UnorderedAccessView*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11UnorderedAccessView*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11UnorderedAccessView*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11UnorderedAccessView*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11UnorderedAccessView*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11UnorderedAccessView*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_resource(this : ID3D11UnorderedAccessView*, ppresource : ID3D11Resource*) : Void
    @lpVtbl.value.get_resource.call(this, ppresource)
  end
  def get_desc(this : ID3D11UnorderedAccessView*, pdesc : D3D11_UNORDERED_ACCESS_VIEW_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
end
struct LibWin32::ID3D11VertexShader
  def query_interface(this : ID3D11VertexShader*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11VertexShader*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11VertexShader*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11VertexShader*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11VertexShader*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11VertexShader*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11VertexShader*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
end
struct LibWin32::ID3D11HullShader
  def query_interface(this : ID3D11HullShader*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11HullShader*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11HullShader*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11HullShader*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11HullShader*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11HullShader*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11HullShader*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
end
struct LibWin32::ID3D11DomainShader
  def query_interface(this : ID3D11DomainShader*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11DomainShader*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11DomainShader*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11DomainShader*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11DomainShader*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11DomainShader*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11DomainShader*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
end
struct LibWin32::ID3D11GeometryShader
  def query_interface(this : ID3D11GeometryShader*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11GeometryShader*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11GeometryShader*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11GeometryShader*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11GeometryShader*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11GeometryShader*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11GeometryShader*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
end
struct LibWin32::ID3D11PixelShader
  def query_interface(this : ID3D11PixelShader*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11PixelShader*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11PixelShader*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11PixelShader*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11PixelShader*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11PixelShader*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11PixelShader*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
end
struct LibWin32::ID3D11ComputeShader
  def query_interface(this : ID3D11ComputeShader*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11ComputeShader*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11ComputeShader*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11ComputeShader*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11ComputeShader*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11ComputeShader*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11ComputeShader*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
end
struct LibWin32::ID3D11InputLayout
  def query_interface(this : ID3D11InputLayout*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11InputLayout*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11InputLayout*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11InputLayout*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11InputLayout*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11InputLayout*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11InputLayout*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
end
struct LibWin32::ID3D11SamplerState
  def query_interface(this : ID3D11SamplerState*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11SamplerState*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11SamplerState*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11SamplerState*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11SamplerState*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11SamplerState*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11SamplerState*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_desc(this : ID3D11SamplerState*, pdesc : D3D11_SAMPLER_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
end
struct LibWin32::ID3D11Asynchronous
  def query_interface(this : ID3D11Asynchronous*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11Asynchronous*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11Asynchronous*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11Asynchronous*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11Asynchronous*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11Asynchronous*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11Asynchronous*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_data_size(this : ID3D11Asynchronous*) : UInt32
    @lpVtbl.value.get_data_size.call(this)
  end
end
struct LibWin32::ID3D11Query
  def query_interface(this : ID3D11Query*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11Query*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11Query*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11Query*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11Query*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11Query*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11Query*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_data_size(this : ID3D11Query*) : UInt32
    @lpVtbl.value.get_data_size.call(this)
  end
  def get_desc(this : ID3D11Query*, pdesc : D3D11_QUERY_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
end
struct LibWin32::ID3D11Predicate
  def query_interface(this : ID3D11Predicate*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11Predicate*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11Predicate*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11Predicate*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11Predicate*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11Predicate*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11Predicate*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_data_size(this : ID3D11Predicate*) : UInt32
    @lpVtbl.value.get_data_size.call(this)
  end
  def get_desc(this : ID3D11Predicate*, pdesc : D3D11_QUERY_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
end
struct LibWin32::ID3D11Counter
  def query_interface(this : ID3D11Counter*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11Counter*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11Counter*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11Counter*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11Counter*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11Counter*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11Counter*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_data_size(this : ID3D11Counter*) : UInt32
    @lpVtbl.value.get_data_size.call(this)
  end
  def get_desc(this : ID3D11Counter*, pdesc : D3D11_COUNTER_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
end
struct LibWin32::ID3D11ClassInstance
  def query_interface(this : ID3D11ClassInstance*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11ClassInstance*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11ClassInstance*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11ClassInstance*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11ClassInstance*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11ClassInstance*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11ClassInstance*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_class_linkage(this : ID3D11ClassInstance*, pplinkage : ID3D11ClassLinkage*) : Void
    @lpVtbl.value.get_class_linkage.call(this, pplinkage)
  end
  def get_desc(this : ID3D11ClassInstance*, pdesc : D3D11_CLASS_INSTANCE_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
  def get_instance_name(this : ID3D11ClassInstance*, pinstancename : UInt8*, pbufferlength : LibC::UINT_PTR*) : Void
    @lpVtbl.value.get_instance_name.call(this, pinstancename, pbufferlength)
  end
  def get_type_name(this : ID3D11ClassInstance*, ptypename : UInt8*, pbufferlength : LibC::UINT_PTR*) : Void
    @lpVtbl.value.get_type_name.call(this, ptypename, pbufferlength)
  end
end
struct LibWin32::ID3D11ClassLinkage
  def query_interface(this : ID3D11ClassLinkage*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11ClassLinkage*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11ClassLinkage*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11ClassLinkage*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11ClassLinkage*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11ClassLinkage*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11ClassLinkage*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_class_instance(this : ID3D11ClassLinkage*, pclassinstancename : PSTR, instanceindex : UInt32, ppinstance : ID3D11ClassInstance*) : HRESULT
    @lpVtbl.value.get_class_instance.call(this, pclassinstancename, instanceindex, ppinstance)
  end
  def create_class_instance(this : ID3D11ClassLinkage*, pclasstypename : PSTR, constantbufferoffset : UInt32, constantvectoroffset : UInt32, textureoffset : UInt32, sampleroffset : UInt32, ppinstance : ID3D11ClassInstance*) : HRESULT
    @lpVtbl.value.create_class_instance.call(this, pclasstypename, constantbufferoffset, constantvectoroffset, textureoffset, sampleroffset, ppinstance)
  end
end
struct LibWin32::ID3D11CommandList
  def query_interface(this : ID3D11CommandList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11CommandList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11CommandList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11CommandList*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11CommandList*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11CommandList*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11CommandList*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_context_flags(this : ID3D11CommandList*) : UInt32
    @lpVtbl.value.get_context_flags.call(this)
  end
end
struct LibWin32::ID3D11DeviceContext
  def query_interface(this : ID3D11DeviceContext*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11DeviceContext*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11DeviceContext*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11DeviceContext*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11DeviceContext*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11DeviceContext*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11DeviceContext*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def vs_set_constant_buffers(this : ID3D11DeviceContext*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.vs_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ps_set_shader_resources(this : ID3D11DeviceContext*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.ps_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def ps_set_shader(this : ID3D11DeviceContext*, ppixelshader : ID3D11PixelShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.ps_set_shader.call(this, ppixelshader, ppclassinstances, numclassinstances)
  end
  def ps_set_samplers(this : ID3D11DeviceContext*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.ps_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def vs_set_shader(this : ID3D11DeviceContext*, pvertexshader : ID3D11VertexShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.vs_set_shader.call(this, pvertexshader, ppclassinstances, numclassinstances)
  end
  def draw_indexed(this : ID3D11DeviceContext*, indexcount : UInt32, startindexlocation : UInt32, basevertexlocation : Int32) : Void
    @lpVtbl.value.draw_indexed.call(this, indexcount, startindexlocation, basevertexlocation)
  end
  def draw(this : ID3D11DeviceContext*, vertexcount : UInt32, startvertexlocation : UInt32) : Void
    @lpVtbl.value.draw.call(this, vertexcount, startvertexlocation)
  end
  def map(this : ID3D11DeviceContext*, presource : ID3D11Resource, subresource : UInt32, maptype : D3D11_MAP, mapflags : UInt32, pmappedresource : D3D11_MAPPED_SUBRESOURCE*) : HRESULT
    @lpVtbl.value.map.call(this, presource, subresource, maptype, mapflags, pmappedresource)
  end
  def unmap(this : ID3D11DeviceContext*, presource : ID3D11Resource, subresource : UInt32) : Void
    @lpVtbl.value.unmap.call(this, presource, subresource)
  end
  def ps_set_constant_buffers(this : ID3D11DeviceContext*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.ps_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ia_set_input_layout(this : ID3D11DeviceContext*, pinputlayout : ID3D11InputLayout) : Void
    @lpVtbl.value.ia_set_input_layout.call(this, pinputlayout)
  end
  def ia_set_vertex_buffers(this : ID3D11DeviceContext*, startslot : UInt32, numbuffers : UInt32, ppvertexbuffers : ID3D11Buffer*, pstrides : UInt32*, poffsets : UInt32*) : Void
    @lpVtbl.value.ia_set_vertex_buffers.call(this, startslot, numbuffers, ppvertexbuffers, pstrides, poffsets)
  end
  def ia_set_index_buffer(this : ID3D11DeviceContext*, pindexbuffer : ID3D11Buffer, format : DXGI_FORMAT, offset : UInt32) : Void
    @lpVtbl.value.ia_set_index_buffer.call(this, pindexbuffer, format, offset)
  end
  def draw_indexed_instanced(this : ID3D11DeviceContext*, indexcountperinstance : UInt32, instancecount : UInt32, startindexlocation : UInt32, basevertexlocation : Int32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_indexed_instanced.call(this, indexcountperinstance, instancecount, startindexlocation, basevertexlocation, startinstancelocation)
  end
  def draw_instanced(this : ID3D11DeviceContext*, vertexcountperinstance : UInt32, instancecount : UInt32, startvertexlocation : UInt32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_instanced.call(this, vertexcountperinstance, instancecount, startvertexlocation, startinstancelocation)
  end
  def gs_set_constant_buffers(this : ID3D11DeviceContext*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.gs_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def gs_set_shader(this : ID3D11DeviceContext*, pshader : ID3D11GeometryShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.gs_set_shader.call(this, pshader, ppclassinstances, numclassinstances)
  end
  def ia_set_primitive_topology(this : ID3D11DeviceContext*, topology : D3D_PRIMITIVE_TOPOLOGY) : Void
    @lpVtbl.value.ia_set_primitive_topology.call(this, topology)
  end
  def vs_set_shader_resources(this : ID3D11DeviceContext*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.vs_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def vs_set_samplers(this : ID3D11DeviceContext*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.vs_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def begin_(this : ID3D11DeviceContext*, pasync : ID3D11Asynchronous) : Void
    @lpVtbl.value.begin_.call(this, pasync)
  end
  def end_(this : ID3D11DeviceContext*, pasync : ID3D11Asynchronous) : Void
    @lpVtbl.value.end_.call(this, pasync)
  end
  def get_data(this : ID3D11DeviceContext*, pasync : ID3D11Asynchronous, pdata : Void*, datasize : UInt32, getdataflags : UInt32) : HRESULT
    @lpVtbl.value.get_data.call(this, pasync, pdata, datasize, getdataflags)
  end
  def set_predication(this : ID3D11DeviceContext*, ppredicate : ID3D11Predicate, predicatevalue : LibC::BOOL) : Void
    @lpVtbl.value.set_predication.call(this, ppredicate, predicatevalue)
  end
  def gs_set_shader_resources(this : ID3D11DeviceContext*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.gs_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def gs_set_samplers(this : ID3D11DeviceContext*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.gs_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def om_set_render_targets(this : ID3D11DeviceContext*, numviews : UInt32, pprendertargetviews : ID3D11RenderTargetView*, pdepthstencilview : ID3D11DepthStencilView) : Void
    @lpVtbl.value.om_set_render_targets.call(this, numviews, pprendertargetviews, pdepthstencilview)
  end
  def om_set_render_targets_and_unordered_access_views(this : ID3D11DeviceContext*, numrtvs : UInt32, pprendertargetviews : ID3D11RenderTargetView*, pdepthstencilview : ID3D11DepthStencilView, uavstartslot : UInt32, numuavs : UInt32, ppunorderedaccessviews : ID3D11UnorderedAccessView*, puavinitialcounts : UInt32*) : Void
    @lpVtbl.value.om_set_render_targets_and_unordered_access_views.call(this, numrtvs, pprendertargetviews, pdepthstencilview, uavstartslot, numuavs, ppunorderedaccessviews, puavinitialcounts)
  end
  def om_set_blend_state(this : ID3D11DeviceContext*, pblendstate : ID3D11BlendState, blendfactor : Float32*, samplemask : UInt32) : Void
    @lpVtbl.value.om_set_blend_state.call(this, pblendstate, blendfactor, samplemask)
  end
  def om_set_depth_stencil_state(this : ID3D11DeviceContext*, pdepthstencilstate : ID3D11DepthStencilState, stencilref : UInt32) : Void
    @lpVtbl.value.om_set_depth_stencil_state.call(this, pdepthstencilstate, stencilref)
  end
  def so_set_targets(this : ID3D11DeviceContext*, numbuffers : UInt32, ppsotargets : ID3D11Buffer*, poffsets : UInt32*) : Void
    @lpVtbl.value.so_set_targets.call(this, numbuffers, ppsotargets, poffsets)
  end
  def draw_auto(this : ID3D11DeviceContext*) : Void
    @lpVtbl.value.draw_auto.call(this)
  end
  def draw_indexed_instanced_indirect(this : ID3D11DeviceContext*, pbufferforargs : ID3D11Buffer, alignedbyteoffsetforargs : UInt32) : Void
    @lpVtbl.value.draw_indexed_instanced_indirect.call(this, pbufferforargs, alignedbyteoffsetforargs)
  end
  def draw_instanced_indirect(this : ID3D11DeviceContext*, pbufferforargs : ID3D11Buffer, alignedbyteoffsetforargs : UInt32) : Void
    @lpVtbl.value.draw_instanced_indirect.call(this, pbufferforargs, alignedbyteoffsetforargs)
  end
  def dispatch(this : ID3D11DeviceContext*, threadgroupcountx : UInt32, threadgroupcounty : UInt32, threadgroupcountz : UInt32) : Void
    @lpVtbl.value.dispatch.call(this, threadgroupcountx, threadgroupcounty, threadgroupcountz)
  end
  def dispatch_indirect(this : ID3D11DeviceContext*, pbufferforargs : ID3D11Buffer, alignedbyteoffsetforargs : UInt32) : Void
    @lpVtbl.value.dispatch_indirect.call(this, pbufferforargs, alignedbyteoffsetforargs)
  end
  def rs_set_state(this : ID3D11DeviceContext*, prasterizerstate : ID3D11RasterizerState) : Void
    @lpVtbl.value.rs_set_state.call(this, prasterizerstate)
  end
  def rs_set_viewports(this : ID3D11DeviceContext*, numviewports : UInt32, pviewports : D3D11_VIEWPORT*) : Void
    @lpVtbl.value.rs_set_viewports.call(this, numviewports, pviewports)
  end
  def rs_set_scissor_rects(this : ID3D11DeviceContext*, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.rs_set_scissor_rects.call(this, numrects, prects)
  end
  def copy_subresource_region(this : ID3D11DeviceContext*, pdstresource : ID3D11Resource, dstsubresource : UInt32, dstx : UInt32, dsty : UInt32, dstz : UInt32, psrcresource : ID3D11Resource, srcsubresource : UInt32, psrcbox : D3D11_BOX*) : Void
    @lpVtbl.value.copy_subresource_region.call(this, pdstresource, dstsubresource, dstx, dsty, dstz, psrcresource, srcsubresource, psrcbox)
  end
  def copy_resource(this : ID3D11DeviceContext*, pdstresource : ID3D11Resource, psrcresource : ID3D11Resource) : Void
    @lpVtbl.value.copy_resource.call(this, pdstresource, psrcresource)
  end
  def update_subresource(this : ID3D11DeviceContext*, pdstresource : ID3D11Resource, dstsubresource : UInt32, pdstbox : D3D11_BOX*, psrcdata : Void*, srcrowpitch : UInt32, srcdepthpitch : UInt32) : Void
    @lpVtbl.value.update_subresource.call(this, pdstresource, dstsubresource, pdstbox, psrcdata, srcrowpitch, srcdepthpitch)
  end
  def copy_structure_count(this : ID3D11DeviceContext*, pdstbuffer : ID3D11Buffer, dstalignedbyteoffset : UInt32, psrcview : ID3D11UnorderedAccessView) : Void
    @lpVtbl.value.copy_structure_count.call(this, pdstbuffer, dstalignedbyteoffset, psrcview)
  end
  def clear_render_target_view(this : ID3D11DeviceContext*, prendertargetview : ID3D11RenderTargetView, colorrgba : Float32*) : Void
    @lpVtbl.value.clear_render_target_view.call(this, prendertargetview, colorrgba)
  end
  def clear_unordered_access_view_uint(this : ID3D11DeviceContext*, punorderedaccessview : ID3D11UnorderedAccessView, values : UInt32*) : Void
    @lpVtbl.value.clear_unordered_access_view_uint.call(this, punorderedaccessview, values)
  end
  def clear_unordered_access_view_float(this : ID3D11DeviceContext*, punorderedaccessview : ID3D11UnorderedAccessView, values : Float32*) : Void
    @lpVtbl.value.clear_unordered_access_view_float.call(this, punorderedaccessview, values)
  end
  def clear_depth_stencil_view(this : ID3D11DeviceContext*, pdepthstencilview : ID3D11DepthStencilView, clearflags : UInt32, depth : Float32, stencil : UInt8) : Void
    @lpVtbl.value.clear_depth_stencil_view.call(this, pdepthstencilview, clearflags, depth, stencil)
  end
  def generate_mips(this : ID3D11DeviceContext*, pshaderresourceview : ID3D11ShaderResourceView) : Void
    @lpVtbl.value.generate_mips.call(this, pshaderresourceview)
  end
  def set_resource_min_lod(this : ID3D11DeviceContext*, presource : ID3D11Resource, minlod : Float32) : Void
    @lpVtbl.value.set_resource_min_lod.call(this, presource, minlod)
  end
  def get_resource_min_lod(this : ID3D11DeviceContext*, presource : ID3D11Resource) : Float32
    @lpVtbl.value.get_resource_min_lod.call(this, presource)
  end
  def resolve_subresource(this : ID3D11DeviceContext*, pdstresource : ID3D11Resource, dstsubresource : UInt32, psrcresource : ID3D11Resource, srcsubresource : UInt32, format : DXGI_FORMAT) : Void
    @lpVtbl.value.resolve_subresource.call(this, pdstresource, dstsubresource, psrcresource, srcsubresource, format)
  end
  def execute_command_list(this : ID3D11DeviceContext*, pcommandlist : ID3D11CommandList, restorecontextstate : LibC::BOOL) : Void
    @lpVtbl.value.execute_command_list.call(this, pcommandlist, restorecontextstate)
  end
  def hs_set_shader_resources(this : ID3D11DeviceContext*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.hs_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def hs_set_shader(this : ID3D11DeviceContext*, phullshader : ID3D11HullShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.hs_set_shader.call(this, phullshader, ppclassinstances, numclassinstances)
  end
  def hs_set_samplers(this : ID3D11DeviceContext*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.hs_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def hs_set_constant_buffers(this : ID3D11DeviceContext*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.hs_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ds_set_shader_resources(this : ID3D11DeviceContext*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.ds_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def ds_set_shader(this : ID3D11DeviceContext*, pdomainshader : ID3D11DomainShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.ds_set_shader.call(this, pdomainshader, ppclassinstances, numclassinstances)
  end
  def ds_set_samplers(this : ID3D11DeviceContext*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.ds_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def ds_set_constant_buffers(this : ID3D11DeviceContext*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.ds_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def cs_set_shader_resources(this : ID3D11DeviceContext*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.cs_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def cs_set_unordered_access_views(this : ID3D11DeviceContext*, startslot : UInt32, numuavs : UInt32, ppunorderedaccessviews : ID3D11UnorderedAccessView*, puavinitialcounts : UInt32*) : Void
    @lpVtbl.value.cs_set_unordered_access_views.call(this, startslot, numuavs, ppunorderedaccessviews, puavinitialcounts)
  end
  def cs_set_shader(this : ID3D11DeviceContext*, pcomputeshader : ID3D11ComputeShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.cs_set_shader.call(this, pcomputeshader, ppclassinstances, numclassinstances)
  end
  def cs_set_samplers(this : ID3D11DeviceContext*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.cs_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def cs_set_constant_buffers(this : ID3D11DeviceContext*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.cs_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def vs_get_constant_buffers(this : ID3D11DeviceContext*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.vs_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ps_get_shader_resources(this : ID3D11DeviceContext*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.ps_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def ps_get_shader(this : ID3D11DeviceContext*, pppixelshader : ID3D11PixelShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.ps_get_shader.call(this, pppixelshader, ppclassinstances, pnumclassinstances)
  end
  def ps_get_samplers(this : ID3D11DeviceContext*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.ps_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def vs_get_shader(this : ID3D11DeviceContext*, ppvertexshader : ID3D11VertexShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.vs_get_shader.call(this, ppvertexshader, ppclassinstances, pnumclassinstances)
  end
  def ps_get_constant_buffers(this : ID3D11DeviceContext*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.ps_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ia_get_input_layout(this : ID3D11DeviceContext*, ppinputlayout : ID3D11InputLayout*) : Void
    @lpVtbl.value.ia_get_input_layout.call(this, ppinputlayout)
  end
  def ia_get_vertex_buffers(this : ID3D11DeviceContext*, startslot : UInt32, numbuffers : UInt32, ppvertexbuffers : ID3D11Buffer*, pstrides : UInt32*, poffsets : UInt32*) : Void
    @lpVtbl.value.ia_get_vertex_buffers.call(this, startslot, numbuffers, ppvertexbuffers, pstrides, poffsets)
  end
  def ia_get_index_buffer(this : ID3D11DeviceContext*, pindexbuffer : ID3D11Buffer*, format : DXGI_FORMAT*, offset : UInt32*) : Void
    @lpVtbl.value.ia_get_index_buffer.call(this, pindexbuffer, format, offset)
  end
  def gs_get_constant_buffers(this : ID3D11DeviceContext*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.gs_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def gs_get_shader(this : ID3D11DeviceContext*, ppgeometryshader : ID3D11GeometryShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.gs_get_shader.call(this, ppgeometryshader, ppclassinstances, pnumclassinstances)
  end
  def ia_get_primitive_topology(this : ID3D11DeviceContext*, ptopology : D3D_PRIMITIVE_TOPOLOGY*) : Void
    @lpVtbl.value.ia_get_primitive_topology.call(this, ptopology)
  end
  def vs_get_shader_resources(this : ID3D11DeviceContext*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.vs_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def vs_get_samplers(this : ID3D11DeviceContext*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.vs_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def get_predication(this : ID3D11DeviceContext*, pppredicate : ID3D11Predicate*, ppredicatevalue : LibC::BOOL*) : Void
    @lpVtbl.value.get_predication.call(this, pppredicate, ppredicatevalue)
  end
  def gs_get_shader_resources(this : ID3D11DeviceContext*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.gs_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def gs_get_samplers(this : ID3D11DeviceContext*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.gs_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def om_get_render_targets(this : ID3D11DeviceContext*, numviews : UInt32, pprendertargetviews : ID3D11RenderTargetView*, ppdepthstencilview : ID3D11DepthStencilView*) : Void
    @lpVtbl.value.om_get_render_targets.call(this, numviews, pprendertargetviews, ppdepthstencilview)
  end
  def om_get_render_targets_and_unordered_access_views(this : ID3D11DeviceContext*, numrtvs : UInt32, pprendertargetviews : ID3D11RenderTargetView*, ppdepthstencilview : ID3D11DepthStencilView*, uavstartslot : UInt32, numuavs : UInt32, ppunorderedaccessviews : ID3D11UnorderedAccessView*) : Void
    @lpVtbl.value.om_get_render_targets_and_unordered_access_views.call(this, numrtvs, pprendertargetviews, ppdepthstencilview, uavstartslot, numuavs, ppunorderedaccessviews)
  end
  def om_get_blend_state(this : ID3D11DeviceContext*, ppblendstate : ID3D11BlendState*, blendfactor : Float32*, psamplemask : UInt32*) : Void
    @lpVtbl.value.om_get_blend_state.call(this, ppblendstate, blendfactor, psamplemask)
  end
  def om_get_depth_stencil_state(this : ID3D11DeviceContext*, ppdepthstencilstate : ID3D11DepthStencilState*, pstencilref : UInt32*) : Void
    @lpVtbl.value.om_get_depth_stencil_state.call(this, ppdepthstencilstate, pstencilref)
  end
  def so_get_targets(this : ID3D11DeviceContext*, numbuffers : UInt32, ppsotargets : ID3D11Buffer*) : Void
    @lpVtbl.value.so_get_targets.call(this, numbuffers, ppsotargets)
  end
  def rs_get_state(this : ID3D11DeviceContext*, pprasterizerstate : ID3D11RasterizerState*) : Void
    @lpVtbl.value.rs_get_state.call(this, pprasterizerstate)
  end
  def rs_get_viewports(this : ID3D11DeviceContext*, pnumviewports : UInt32*, pviewports : D3D11_VIEWPORT*) : Void
    @lpVtbl.value.rs_get_viewports.call(this, pnumviewports, pviewports)
  end
  def rs_get_scissor_rects(this : ID3D11DeviceContext*, pnumrects : UInt32*, prects : RECT*) : Void
    @lpVtbl.value.rs_get_scissor_rects.call(this, pnumrects, prects)
  end
  def hs_get_shader_resources(this : ID3D11DeviceContext*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.hs_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def hs_get_shader(this : ID3D11DeviceContext*, pphullshader : ID3D11HullShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.hs_get_shader.call(this, pphullshader, ppclassinstances, pnumclassinstances)
  end
  def hs_get_samplers(this : ID3D11DeviceContext*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.hs_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def hs_get_constant_buffers(this : ID3D11DeviceContext*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.hs_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ds_get_shader_resources(this : ID3D11DeviceContext*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.ds_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def ds_get_shader(this : ID3D11DeviceContext*, ppdomainshader : ID3D11DomainShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.ds_get_shader.call(this, ppdomainshader, ppclassinstances, pnumclassinstances)
  end
  def ds_get_samplers(this : ID3D11DeviceContext*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.ds_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def ds_get_constant_buffers(this : ID3D11DeviceContext*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.ds_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def cs_get_shader_resources(this : ID3D11DeviceContext*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.cs_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def cs_get_unordered_access_views(this : ID3D11DeviceContext*, startslot : UInt32, numuavs : UInt32, ppunorderedaccessviews : ID3D11UnorderedAccessView*) : Void
    @lpVtbl.value.cs_get_unordered_access_views.call(this, startslot, numuavs, ppunorderedaccessviews)
  end
  def cs_get_shader(this : ID3D11DeviceContext*, ppcomputeshader : ID3D11ComputeShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.cs_get_shader.call(this, ppcomputeshader, ppclassinstances, pnumclassinstances)
  end
  def cs_get_samplers(this : ID3D11DeviceContext*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.cs_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def cs_get_constant_buffers(this : ID3D11DeviceContext*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.cs_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def clear_state(this : ID3D11DeviceContext*) : Void
    @lpVtbl.value.clear_state.call(this)
  end
  def flush(this : ID3D11DeviceContext*) : Void
    @lpVtbl.value.flush.call(this)
  end
  def get_type(this : ID3D11DeviceContext*) : D3D11_DEVICE_CONTEXT_TYPE
    @lpVtbl.value.get_type.call(this)
  end
  def get_context_flags(this : ID3D11DeviceContext*) : UInt32
    @lpVtbl.value.get_context_flags.call(this)
  end
  def finish_command_list(this : ID3D11DeviceContext*, restoredeferredcontextstate : LibC::BOOL, ppcommandlist : ID3D11CommandList*) : HRESULT
    @lpVtbl.value.finish_command_list.call(this, restoredeferredcontextstate, ppcommandlist)
  end
end
struct LibWin32::ID3D11VideoDecoder
  def query_interface(this : ID3D11VideoDecoder*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11VideoDecoder*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11VideoDecoder*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11VideoDecoder*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11VideoDecoder*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11VideoDecoder*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11VideoDecoder*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_creation_parameters(this : ID3D11VideoDecoder*, pvideodesc : D3D11_VIDEO_DECODER_DESC*, pconfig : D3D11_VIDEO_DECODER_CONFIG*) : HRESULT
    @lpVtbl.value.get_creation_parameters.call(this, pvideodesc, pconfig)
  end
  def get_driver_handle(this : ID3D11VideoDecoder*, pdriverhandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.get_driver_handle.call(this, pdriverhandle)
  end
end
struct LibWin32::ID3D11VideoProcessorEnumerator
  def query_interface(this : ID3D11VideoProcessorEnumerator*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11VideoProcessorEnumerator*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11VideoProcessorEnumerator*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11VideoProcessorEnumerator*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11VideoProcessorEnumerator*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11VideoProcessorEnumerator*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11VideoProcessorEnumerator*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_video_processor_content_desc(this : ID3D11VideoProcessorEnumerator*, pcontentdesc : D3D11_VIDEO_PROCESSOR_CONTENT_DESC*) : HRESULT
    @lpVtbl.value.get_video_processor_content_desc.call(this, pcontentdesc)
  end
  def check_video_processor_format(this : ID3D11VideoProcessorEnumerator*, format : DXGI_FORMAT, pflags : UInt32*) : HRESULT
    @lpVtbl.value.check_video_processor_format.call(this, format, pflags)
  end
  def get_video_processor_caps(this : ID3D11VideoProcessorEnumerator*, pcaps : D3D11_VIDEO_PROCESSOR_CAPS*) : HRESULT
    @lpVtbl.value.get_video_processor_caps.call(this, pcaps)
  end
  def get_video_processor_rate_conversion_caps(this : ID3D11VideoProcessorEnumerator*, typeindex : UInt32, pcaps : D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS*) : HRESULT
    @lpVtbl.value.get_video_processor_rate_conversion_caps.call(this, typeindex, pcaps)
  end
  def get_video_processor_custom_rate(this : ID3D11VideoProcessorEnumerator*, typeindex : UInt32, customrateindex : UInt32, prate : D3D11_VIDEO_PROCESSOR_CUSTOM_RATE*) : HRESULT
    @lpVtbl.value.get_video_processor_custom_rate.call(this, typeindex, customrateindex, prate)
  end
  def get_video_processor_filter_range(this : ID3D11VideoProcessorEnumerator*, filter : D3D11_VIDEO_PROCESSOR_FILTER, prange : D3D11_VIDEO_PROCESSOR_FILTER_RANGE*) : HRESULT
    @lpVtbl.value.get_video_processor_filter_range.call(this, filter, prange)
  end
end
struct LibWin32::ID3D11VideoProcessor
  def query_interface(this : ID3D11VideoProcessor*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11VideoProcessor*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11VideoProcessor*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11VideoProcessor*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11VideoProcessor*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11VideoProcessor*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11VideoProcessor*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_content_desc(this : ID3D11VideoProcessor*, pdesc : D3D11_VIDEO_PROCESSOR_CONTENT_DESC*) : Void
    @lpVtbl.value.get_content_desc.call(this, pdesc)
  end
  def get_rate_conversion_caps(this : ID3D11VideoProcessor*, pcaps : D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS*) : Void
    @lpVtbl.value.get_rate_conversion_caps.call(this, pcaps)
  end
end
struct LibWin32::ID3D11AuthenticatedChannel
  def query_interface(this : ID3D11AuthenticatedChannel*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11AuthenticatedChannel*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11AuthenticatedChannel*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11AuthenticatedChannel*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11AuthenticatedChannel*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11AuthenticatedChannel*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11AuthenticatedChannel*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_certificate_size(this : ID3D11AuthenticatedChannel*, pcertificatesize : UInt32*) : HRESULT
    @lpVtbl.value.get_certificate_size.call(this, pcertificatesize)
  end
  def get_certificate(this : ID3D11AuthenticatedChannel*, certificatesize : UInt32, pcertificate : UInt8*) : HRESULT
    @lpVtbl.value.get_certificate.call(this, certificatesize, pcertificate)
  end
  def get_channel_handle(this : ID3D11AuthenticatedChannel*, pchannelhandle : LibC::HANDLE*) : Void
    @lpVtbl.value.get_channel_handle.call(this, pchannelhandle)
  end
end
struct LibWin32::ID3D11CryptoSession
  def query_interface(this : ID3D11CryptoSession*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11CryptoSession*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11CryptoSession*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11CryptoSession*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11CryptoSession*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11CryptoSession*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11CryptoSession*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_crypto_type(this : ID3D11CryptoSession*, pcryptotype : Guid*) : Void
    @lpVtbl.value.get_crypto_type.call(this, pcryptotype)
  end
  def get_decoder_profile(this : ID3D11CryptoSession*, pdecoderprofile : Guid*) : Void
    @lpVtbl.value.get_decoder_profile.call(this, pdecoderprofile)
  end
  def get_certificate_size(this : ID3D11CryptoSession*, pcertificatesize : UInt32*) : HRESULT
    @lpVtbl.value.get_certificate_size.call(this, pcertificatesize)
  end
  def get_certificate(this : ID3D11CryptoSession*, certificatesize : UInt32, pcertificate : UInt8*) : HRESULT
    @lpVtbl.value.get_certificate.call(this, certificatesize, pcertificate)
  end
  def get_crypto_session_handle(this : ID3D11CryptoSession*, pcryptosessionhandle : LibC::HANDLE*) : Void
    @lpVtbl.value.get_crypto_session_handle.call(this, pcryptosessionhandle)
  end
end
struct LibWin32::ID3D11VideoDecoderOutputView
  def query_interface(this : ID3D11VideoDecoderOutputView*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11VideoDecoderOutputView*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11VideoDecoderOutputView*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11VideoDecoderOutputView*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11VideoDecoderOutputView*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11VideoDecoderOutputView*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11VideoDecoderOutputView*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_resource(this : ID3D11VideoDecoderOutputView*, ppresource : ID3D11Resource*) : Void
    @lpVtbl.value.get_resource.call(this, ppresource)
  end
  def get_desc(this : ID3D11VideoDecoderOutputView*, pdesc : D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
end
struct LibWin32::ID3D11VideoProcessorInputView
  def query_interface(this : ID3D11VideoProcessorInputView*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11VideoProcessorInputView*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11VideoProcessorInputView*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11VideoProcessorInputView*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11VideoProcessorInputView*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11VideoProcessorInputView*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11VideoProcessorInputView*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_resource(this : ID3D11VideoProcessorInputView*, ppresource : ID3D11Resource*) : Void
    @lpVtbl.value.get_resource.call(this, ppresource)
  end
  def get_desc(this : ID3D11VideoProcessorInputView*, pdesc : D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
end
struct LibWin32::ID3D11VideoProcessorOutputView
  def query_interface(this : ID3D11VideoProcessorOutputView*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11VideoProcessorOutputView*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11VideoProcessorOutputView*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11VideoProcessorOutputView*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11VideoProcessorOutputView*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11VideoProcessorOutputView*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11VideoProcessorOutputView*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_resource(this : ID3D11VideoProcessorOutputView*, ppresource : ID3D11Resource*) : Void
    @lpVtbl.value.get_resource.call(this, ppresource)
  end
  def get_desc(this : ID3D11VideoProcessorOutputView*, pdesc : D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
end
struct LibWin32::ID3D11VideoContext
  def query_interface(this : ID3D11VideoContext*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11VideoContext*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11VideoContext*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11VideoContext*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11VideoContext*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11VideoContext*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11VideoContext*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_decoder_buffer(this : ID3D11VideoContext*, pdecoder : ID3D11VideoDecoder, type : D3D11_VIDEO_DECODER_BUFFER_TYPE, pbuffersize : UInt32*, ppbuffer : Void**) : HRESULT
    @lpVtbl.value.get_decoder_buffer.call(this, pdecoder, type, pbuffersize, ppbuffer)
  end
  def release_decoder_buffer(this : ID3D11VideoContext*, pdecoder : ID3D11VideoDecoder, type : D3D11_VIDEO_DECODER_BUFFER_TYPE) : HRESULT
    @lpVtbl.value.release_decoder_buffer.call(this, pdecoder, type)
  end
  def decoder_begin_frame(this : ID3D11VideoContext*, pdecoder : ID3D11VideoDecoder, pview : ID3D11VideoDecoderOutputView, contentkeysize : UInt32, pcontentkey : Void*) : HRESULT
    @lpVtbl.value.decoder_begin_frame.call(this, pdecoder, pview, contentkeysize, pcontentkey)
  end
  def decoder_end_frame(this : ID3D11VideoContext*, pdecoder : ID3D11VideoDecoder) : HRESULT
    @lpVtbl.value.decoder_end_frame.call(this, pdecoder)
  end
  def submit_decoder_buffers(this : ID3D11VideoContext*, pdecoder : ID3D11VideoDecoder, numbuffers : UInt32, pbufferdesc : D3D11_VIDEO_DECODER_BUFFER_DESC*) : HRESULT
    @lpVtbl.value.submit_decoder_buffers.call(this, pdecoder, numbuffers, pbufferdesc)
  end
  def decoder_extension(this : ID3D11VideoContext*, pdecoder : ID3D11VideoDecoder, pextensiondata : D3D11_VIDEO_DECODER_EXTENSION*) : Int32
    @lpVtbl.value.decoder_extension.call(this, pdecoder, pextensiondata)
  end
  def video_processor_set_output_target_rect(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, enable : LibC::BOOL, prect : RECT*) : Void
    @lpVtbl.value.video_processor_set_output_target_rect.call(this, pvideoprocessor, enable, prect)
  end
  def video_processor_set_output_background_color(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, ycbcr : LibC::BOOL, pcolor : D3D11_VIDEO_COLOR*) : Void
    @lpVtbl.value.video_processor_set_output_background_color.call(this, pvideoprocessor, ycbcr, pcolor)
  end
  def video_processor_set_output_color_space(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, pcolorspace : D3D11_VIDEO_PROCESSOR_COLOR_SPACE*) : Void
    @lpVtbl.value.video_processor_set_output_color_space.call(this, pvideoprocessor, pcolorspace)
  end
  def video_processor_set_output_alpha_fill_mode(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, alphafillmode : D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE, streamindex : UInt32) : Void
    @lpVtbl.value.video_processor_set_output_alpha_fill_mode.call(this, pvideoprocessor, alphafillmode, streamindex)
  end
  def video_processor_set_output_constriction(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, enable : LibC::BOOL, size : SIZE) : Void
    @lpVtbl.value.video_processor_set_output_constriction.call(this, pvideoprocessor, enable, size)
  end
  def video_processor_set_output_stereo_mode(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, enable : LibC::BOOL) : Void
    @lpVtbl.value.video_processor_set_output_stereo_mode.call(this, pvideoprocessor, enable)
  end
  def video_processor_set_output_extension(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, pextensionguid : Guid*, datasize : UInt32, pdata : Void*) : Int32
    @lpVtbl.value.video_processor_set_output_extension.call(this, pvideoprocessor, pextensionguid, datasize, pdata)
  end
  def video_processor_get_output_target_rect(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, enabled : LibC::BOOL*, prect : RECT*) : Void
    @lpVtbl.value.video_processor_get_output_target_rect.call(this, pvideoprocessor, enabled, prect)
  end
  def video_processor_get_output_background_color(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, pycbcr : LibC::BOOL*, pcolor : D3D11_VIDEO_COLOR*) : Void
    @lpVtbl.value.video_processor_get_output_background_color.call(this, pvideoprocessor, pycbcr, pcolor)
  end
  def video_processor_get_output_color_space(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, pcolorspace : D3D11_VIDEO_PROCESSOR_COLOR_SPACE*) : Void
    @lpVtbl.value.video_processor_get_output_color_space.call(this, pvideoprocessor, pcolorspace)
  end
  def video_processor_get_output_alpha_fill_mode(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, palphafillmode : D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE*, pstreamindex : UInt32*) : Void
    @lpVtbl.value.video_processor_get_output_alpha_fill_mode.call(this, pvideoprocessor, palphafillmode, pstreamindex)
  end
  def video_processor_get_output_constriction(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, penabled : LibC::BOOL*, psize : SIZE*) : Void
    @lpVtbl.value.video_processor_get_output_constriction.call(this, pvideoprocessor, penabled, psize)
  end
  def video_processor_get_output_stereo_mode(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, penabled : LibC::BOOL*) : Void
    @lpVtbl.value.video_processor_get_output_stereo_mode.call(this, pvideoprocessor, penabled)
  end
  def video_processor_get_output_extension(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, pextensionguid : Guid*, datasize : UInt32, pdata : Void*) : Int32
    @lpVtbl.value.video_processor_get_output_extension.call(this, pvideoprocessor, pextensionguid, datasize, pdata)
  end
  def video_processor_set_stream_frame_format(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, frameformat : D3D11_VIDEO_FRAME_FORMAT) : Void
    @lpVtbl.value.video_processor_set_stream_frame_format.call(this, pvideoprocessor, streamindex, frameformat)
  end
  def video_processor_set_stream_color_space(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, pcolorspace : D3D11_VIDEO_PROCESSOR_COLOR_SPACE*) : Void
    @lpVtbl.value.video_processor_set_stream_color_space.call(this, pvideoprocessor, streamindex, pcolorspace)
  end
  def video_processor_set_stream_output_rate(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, outputrate : D3D11_VIDEO_PROCESSOR_OUTPUT_RATE, repeatframe : LibC::BOOL, pcustomrate : DXGI_RATIONAL*) : Void
    @lpVtbl.value.video_processor_set_stream_output_rate.call(this, pvideoprocessor, streamindex, outputrate, repeatframe, pcustomrate)
  end
  def video_processor_set_stream_source_rect(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, prect : RECT*) : Void
    @lpVtbl.value.video_processor_set_stream_source_rect.call(this, pvideoprocessor, streamindex, enable, prect)
  end
  def video_processor_set_stream_dest_rect(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, prect : RECT*) : Void
    @lpVtbl.value.video_processor_set_stream_dest_rect.call(this, pvideoprocessor, streamindex, enable, prect)
  end
  def video_processor_set_stream_alpha(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, alpha : Float32) : Void
    @lpVtbl.value.video_processor_set_stream_alpha.call(this, pvideoprocessor, streamindex, enable, alpha)
  end
  def video_processor_set_stream_palette(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, count : UInt32, pentries : UInt32*) : Void
    @lpVtbl.value.video_processor_set_stream_palette.call(this, pvideoprocessor, streamindex, count, pentries)
  end
  def video_processor_set_stream_pixel_aspect_ratio(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, psourceaspectratio : DXGI_RATIONAL*, pdestinationaspectratio : DXGI_RATIONAL*) : Void
    @lpVtbl.value.video_processor_set_stream_pixel_aspect_ratio.call(this, pvideoprocessor, streamindex, enable, psourceaspectratio, pdestinationaspectratio)
  end
  def video_processor_set_stream_luma_key(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, lower : Float32, upper : Float32) : Void
    @lpVtbl.value.video_processor_set_stream_luma_key.call(this, pvideoprocessor, streamindex, enable, lower, upper)
  end
  def video_processor_set_stream_stereo_format(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, format : D3D11_VIDEO_PROCESSOR_STEREO_FORMAT, leftviewframe0 : LibC::BOOL, baseviewframe0 : LibC::BOOL, flipmode : D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE, monooffset : Int32) : Void
    @lpVtbl.value.video_processor_set_stream_stereo_format.call(this, pvideoprocessor, streamindex, enable, format, leftviewframe0, baseviewframe0, flipmode, monooffset)
  end
  def video_processor_set_stream_auto_processing_mode(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL) : Void
    @lpVtbl.value.video_processor_set_stream_auto_processing_mode.call(this, pvideoprocessor, streamindex, enable)
  end
  def video_processor_set_stream_filter(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, filter : D3D11_VIDEO_PROCESSOR_FILTER, enable : LibC::BOOL, level : Int32) : Void
    @lpVtbl.value.video_processor_set_stream_filter.call(this, pvideoprocessor, streamindex, filter, enable, level)
  end
  def video_processor_set_stream_extension(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, pextensionguid : Guid*, datasize : UInt32, pdata : Void*) : Int32
    @lpVtbl.value.video_processor_set_stream_extension.call(this, pvideoprocessor, streamindex, pextensionguid, datasize, pdata)
  end
  def video_processor_get_stream_frame_format(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, pframeformat : D3D11_VIDEO_FRAME_FORMAT*) : Void
    @lpVtbl.value.video_processor_get_stream_frame_format.call(this, pvideoprocessor, streamindex, pframeformat)
  end
  def video_processor_get_stream_color_space(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, pcolorspace : D3D11_VIDEO_PROCESSOR_COLOR_SPACE*) : Void
    @lpVtbl.value.video_processor_get_stream_color_space.call(this, pvideoprocessor, streamindex, pcolorspace)
  end
  def video_processor_get_stream_output_rate(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, poutputrate : D3D11_VIDEO_PROCESSOR_OUTPUT_RATE*, prepeatframe : LibC::BOOL*, pcustomrate : DXGI_RATIONAL*) : Void
    @lpVtbl.value.video_processor_get_stream_output_rate.call(this, pvideoprocessor, streamindex, poutputrate, prepeatframe, pcustomrate)
  end
  def video_processor_get_stream_source_rect(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penabled : LibC::BOOL*, prect : RECT*) : Void
    @lpVtbl.value.video_processor_get_stream_source_rect.call(this, pvideoprocessor, streamindex, penabled, prect)
  end
  def video_processor_get_stream_dest_rect(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penabled : LibC::BOOL*, prect : RECT*) : Void
    @lpVtbl.value.video_processor_get_stream_dest_rect.call(this, pvideoprocessor, streamindex, penabled, prect)
  end
  def video_processor_get_stream_alpha(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penabled : LibC::BOOL*, palpha : Float32*) : Void
    @lpVtbl.value.video_processor_get_stream_alpha.call(this, pvideoprocessor, streamindex, penabled, palpha)
  end
  def video_processor_get_stream_palette(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, count : UInt32, pentries : UInt32*) : Void
    @lpVtbl.value.video_processor_get_stream_palette.call(this, pvideoprocessor, streamindex, count, pentries)
  end
  def video_processor_get_stream_pixel_aspect_ratio(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penabled : LibC::BOOL*, psourceaspectratio : DXGI_RATIONAL*, pdestinationaspectratio : DXGI_RATIONAL*) : Void
    @lpVtbl.value.video_processor_get_stream_pixel_aspect_ratio.call(this, pvideoprocessor, streamindex, penabled, psourceaspectratio, pdestinationaspectratio)
  end
  def video_processor_get_stream_luma_key(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penabled : LibC::BOOL*, plower : Float32*, pupper : Float32*) : Void
    @lpVtbl.value.video_processor_get_stream_luma_key.call(this, pvideoprocessor, streamindex, penabled, plower, pupper)
  end
  def video_processor_get_stream_stereo_format(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penable : LibC::BOOL*, pformat : D3D11_VIDEO_PROCESSOR_STEREO_FORMAT*, pleftviewframe0 : LibC::BOOL*, pbaseviewframe0 : LibC::BOOL*, pflipmode : D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE*, monooffset : Int32*) : Void
    @lpVtbl.value.video_processor_get_stream_stereo_format.call(this, pvideoprocessor, streamindex, penable, pformat, pleftviewframe0, pbaseviewframe0, pflipmode, monooffset)
  end
  def video_processor_get_stream_auto_processing_mode(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penabled : LibC::BOOL*) : Void
    @lpVtbl.value.video_processor_get_stream_auto_processing_mode.call(this, pvideoprocessor, streamindex, penabled)
  end
  def video_processor_get_stream_filter(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, filter : D3D11_VIDEO_PROCESSOR_FILTER, penabled : LibC::BOOL*, plevel : Int32*) : Void
    @lpVtbl.value.video_processor_get_stream_filter.call(this, pvideoprocessor, streamindex, filter, penabled, plevel)
  end
  def video_processor_get_stream_extension(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, pextensionguid : Guid*, datasize : UInt32, pdata : Void*) : Int32
    @lpVtbl.value.video_processor_get_stream_extension.call(this, pvideoprocessor, streamindex, pextensionguid, datasize, pdata)
  end
  def video_processor_blt(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, pview : ID3D11VideoProcessorOutputView, outputframe : UInt32, streamcount : UInt32, pstreams : D3D11_VIDEO_PROCESSOR_STREAM*) : HRESULT
    @lpVtbl.value.video_processor_blt.call(this, pvideoprocessor, pview, outputframe, streamcount, pstreams)
  end
  def negotiate_crypto_session_key_exchange(this : ID3D11VideoContext*, pcryptosession : ID3D11CryptoSession, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.negotiate_crypto_session_key_exchange.call(this, pcryptosession, datasize, pdata)
  end
  def encryption_blt(this : ID3D11VideoContext*, pcryptosession : ID3D11CryptoSession, psrcsurface : ID3D11Texture2D, pdstsurface : ID3D11Texture2D, ivsize : UInt32, piv : Void*) : Void
    @lpVtbl.value.encryption_blt.call(this, pcryptosession, psrcsurface, pdstsurface, ivsize, piv)
  end
  def decryption_blt(this : ID3D11VideoContext*, pcryptosession : ID3D11CryptoSession, psrcsurface : ID3D11Texture2D, pdstsurface : ID3D11Texture2D, pencryptedblockinfo : D3D11_ENCRYPTED_BLOCK_INFO*, contentkeysize : UInt32, pcontentkey : Void*, ivsize : UInt32, piv : Void*) : Void
    @lpVtbl.value.decryption_blt.call(this, pcryptosession, psrcsurface, pdstsurface, pencryptedblockinfo, contentkeysize, pcontentkey, ivsize, piv)
  end
  def start_session_key_refresh(this : ID3D11VideoContext*, pcryptosession : ID3D11CryptoSession, randomnumbersize : UInt32, prandomnumber : Void*) : Void
    @lpVtbl.value.start_session_key_refresh.call(this, pcryptosession, randomnumbersize, prandomnumber)
  end
  def finish_session_key_refresh(this : ID3D11VideoContext*, pcryptosession : ID3D11CryptoSession) : Void
    @lpVtbl.value.finish_session_key_refresh.call(this, pcryptosession)
  end
  def get_encryption_blt_key(this : ID3D11VideoContext*, pcryptosession : ID3D11CryptoSession, keysize : UInt32, preadbackkey : Void*) : HRESULT
    @lpVtbl.value.get_encryption_blt_key.call(this, pcryptosession, keysize, preadbackkey)
  end
  def negotiate_authenticated_channel_key_exchange(this : ID3D11VideoContext*, pchannel : ID3D11AuthenticatedChannel, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.negotiate_authenticated_channel_key_exchange.call(this, pchannel, datasize, pdata)
  end
  def query_authenticated_channel(this : ID3D11VideoContext*, pchannel : ID3D11AuthenticatedChannel, inputsize : UInt32, pinput : Void*, outputsize : UInt32, poutput : Void*) : HRESULT
    @lpVtbl.value.query_authenticated_channel.call(this, pchannel, inputsize, pinput, outputsize, poutput)
  end
  def configure_authenticated_channel(this : ID3D11VideoContext*, pchannel : ID3D11AuthenticatedChannel, inputsize : UInt32, pinput : Void*, poutput : D3D11_AUTHENTICATED_CONFIGURE_OUTPUT*) : HRESULT
    @lpVtbl.value.configure_authenticated_channel.call(this, pchannel, inputsize, pinput, poutput)
  end
  def video_processor_set_stream_rotation(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, rotation : D3D11_VIDEO_PROCESSOR_ROTATION) : Void
    @lpVtbl.value.video_processor_set_stream_rotation.call(this, pvideoprocessor, streamindex, enable, rotation)
  end
  def video_processor_get_stream_rotation(this : ID3D11VideoContext*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penable : LibC::BOOL*, protation : D3D11_VIDEO_PROCESSOR_ROTATION*) : Void
    @lpVtbl.value.video_processor_get_stream_rotation.call(this, pvideoprocessor, streamindex, penable, protation)
  end
end
struct LibWin32::ID3D11VideoDevice
  def query_interface(this : ID3D11VideoDevice*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11VideoDevice*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11VideoDevice*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_video_decoder(this : ID3D11VideoDevice*, pvideodesc : D3D11_VIDEO_DECODER_DESC*, pconfig : D3D11_VIDEO_DECODER_CONFIG*, ppdecoder : ID3D11VideoDecoder*) : HRESULT
    @lpVtbl.value.create_video_decoder.call(this, pvideodesc, pconfig, ppdecoder)
  end
  def create_video_processor(this : ID3D11VideoDevice*, penum : ID3D11VideoProcessorEnumerator, rateconversionindex : UInt32, ppvideoprocessor : ID3D11VideoProcessor*) : HRESULT
    @lpVtbl.value.create_video_processor.call(this, penum, rateconversionindex, ppvideoprocessor)
  end
  def create_authenticated_channel(this : ID3D11VideoDevice*, channeltype : D3D11_AUTHENTICATED_CHANNEL_TYPE, ppauthenticatedchannel : ID3D11AuthenticatedChannel*) : HRESULT
    @lpVtbl.value.create_authenticated_channel.call(this, channeltype, ppauthenticatedchannel)
  end
  def create_crypto_session(this : ID3D11VideoDevice*, pcryptotype : Guid*, pdecoderprofile : Guid*, pkeyexchangetype : Guid*, ppcryptosession : ID3D11CryptoSession*) : HRESULT
    @lpVtbl.value.create_crypto_session.call(this, pcryptotype, pdecoderprofile, pkeyexchangetype, ppcryptosession)
  end
  def create_video_decoder_output_view(this : ID3D11VideoDevice*, presource : ID3D11Resource, pdesc : D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC*, ppvdovview : ID3D11VideoDecoderOutputView*) : HRESULT
    @lpVtbl.value.create_video_decoder_output_view.call(this, presource, pdesc, ppvdovview)
  end
  def create_video_processor_input_view(this : ID3D11VideoDevice*, presource : ID3D11Resource, penum : ID3D11VideoProcessorEnumerator, pdesc : D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*, ppvpiview : ID3D11VideoProcessorInputView*) : HRESULT
    @lpVtbl.value.create_video_processor_input_view.call(this, presource, penum, pdesc, ppvpiview)
  end
  def create_video_processor_output_view(this : ID3D11VideoDevice*, presource : ID3D11Resource, penum : ID3D11VideoProcessorEnumerator, pdesc : D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*, ppvpoview : ID3D11VideoProcessorOutputView*) : HRESULT
    @lpVtbl.value.create_video_processor_output_view.call(this, presource, penum, pdesc, ppvpoview)
  end
  def create_video_processor_enumerator(this : ID3D11VideoDevice*, pdesc : D3D11_VIDEO_PROCESSOR_CONTENT_DESC*, ppenum : ID3D11VideoProcessorEnumerator*) : HRESULT
    @lpVtbl.value.create_video_processor_enumerator.call(this, pdesc, ppenum)
  end
  def get_video_decoder_profile_count(this : ID3D11VideoDevice*) : UInt32
    @lpVtbl.value.get_video_decoder_profile_count.call(this)
  end
  def get_video_decoder_profile(this : ID3D11VideoDevice*, index : UInt32, pdecoderprofile : Guid*) : HRESULT
    @lpVtbl.value.get_video_decoder_profile.call(this, index, pdecoderprofile)
  end
  def check_video_decoder_format(this : ID3D11VideoDevice*, pdecoderprofile : Guid*, format : DXGI_FORMAT, psupported : LibC::BOOL*) : HRESULT
    @lpVtbl.value.check_video_decoder_format.call(this, pdecoderprofile, format, psupported)
  end
  def get_video_decoder_config_count(this : ID3D11VideoDevice*, pdesc : D3D11_VIDEO_DECODER_DESC*, pcount : UInt32*) : HRESULT
    @lpVtbl.value.get_video_decoder_config_count.call(this, pdesc, pcount)
  end
  def get_video_decoder_config(this : ID3D11VideoDevice*, pdesc : D3D11_VIDEO_DECODER_DESC*, index : UInt32, pconfig : D3D11_VIDEO_DECODER_CONFIG*) : HRESULT
    @lpVtbl.value.get_video_decoder_config.call(this, pdesc, index, pconfig)
  end
  def get_content_protection_caps(this : ID3D11VideoDevice*, pcryptotype : Guid*, pdecoderprofile : Guid*, pcaps : D3D11_VIDEO_CONTENT_PROTECTION_CAPS*) : HRESULT
    @lpVtbl.value.get_content_protection_caps.call(this, pcryptotype, pdecoderprofile, pcaps)
  end
  def check_crypto_key_exchange(this : ID3D11VideoDevice*, pcryptotype : Guid*, pdecoderprofile : Guid*, index : UInt32, pkeyexchangetype : Guid*) : HRESULT
    @lpVtbl.value.check_crypto_key_exchange.call(this, pcryptotype, pdecoderprofile, index, pkeyexchangetype)
  end
  def set_private_data(this : ID3D11VideoDevice*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11VideoDevice*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
end
struct LibWin32::ID3D11Device
  def query_interface(this : ID3D11Device*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11Device*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11Device*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_buffer(this : ID3D11Device*, pdesc : D3D11_BUFFER_DESC*, pinitialdata : D3D11_SUBRESOURCE_DATA*, ppbuffer : ID3D11Buffer*) : HRESULT
    @lpVtbl.value.create_buffer.call(this, pdesc, pinitialdata, ppbuffer)
  end
  def create_texture1_d(this : ID3D11Device*, pdesc : D3D11_TEXTURE1D_DESC*, pinitialdata : D3D11_SUBRESOURCE_DATA*, pptexture1d : ID3D11Texture1D*) : HRESULT
    @lpVtbl.value.create_texture1_d.call(this, pdesc, pinitialdata, pptexture1d)
  end
  def create_texture2_d(this : ID3D11Device*, pdesc : D3D11_TEXTURE2D_DESC*, pinitialdata : D3D11_SUBRESOURCE_DATA*, pptexture2d : ID3D11Texture2D*) : HRESULT
    @lpVtbl.value.create_texture2_d.call(this, pdesc, pinitialdata, pptexture2d)
  end
  def create_texture3_d(this : ID3D11Device*, pdesc : D3D11_TEXTURE3D_DESC*, pinitialdata : D3D11_SUBRESOURCE_DATA*, pptexture3d : ID3D11Texture3D*) : HRESULT
    @lpVtbl.value.create_texture3_d.call(this, pdesc, pinitialdata, pptexture3d)
  end
  def create_shader_resource_view(this : ID3D11Device*, presource : ID3D11Resource, pdesc : D3D11_SHADER_RESOURCE_VIEW_DESC*, ppsrview : ID3D11ShaderResourceView*) : HRESULT
    @lpVtbl.value.create_shader_resource_view.call(this, presource, pdesc, ppsrview)
  end
  def create_unordered_access_view(this : ID3D11Device*, presource : ID3D11Resource, pdesc : D3D11_UNORDERED_ACCESS_VIEW_DESC*, ppuaview : ID3D11UnorderedAccessView*) : HRESULT
    @lpVtbl.value.create_unordered_access_view.call(this, presource, pdesc, ppuaview)
  end
  def create_render_target_view(this : ID3D11Device*, presource : ID3D11Resource, pdesc : D3D11_RENDER_TARGET_VIEW_DESC*, pprtview : ID3D11RenderTargetView*) : HRESULT
    @lpVtbl.value.create_render_target_view.call(this, presource, pdesc, pprtview)
  end
  def create_depth_stencil_view(this : ID3D11Device*, presource : ID3D11Resource, pdesc : D3D11_DEPTH_STENCIL_VIEW_DESC*, ppdepthstencilview : ID3D11DepthStencilView*) : HRESULT
    @lpVtbl.value.create_depth_stencil_view.call(this, presource, pdesc, ppdepthstencilview)
  end
  def create_input_layout(this : ID3D11Device*, pinputelementdescs : D3D11_INPUT_ELEMENT_DESC*, numelements : UInt32, pshaderbytecodewithinputsignature : Void*, bytecodelength : LibC::UINT_PTR, ppinputlayout : ID3D11InputLayout*) : HRESULT
    @lpVtbl.value.create_input_layout.call(this, pinputelementdescs, numelements, pshaderbytecodewithinputsignature, bytecodelength, ppinputlayout)
  end
  def create_vertex_shader(this : ID3D11Device*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, ppvertexshader : ID3D11VertexShader*) : HRESULT
    @lpVtbl.value.create_vertex_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, ppvertexshader)
  end
  def create_geometry_shader(this : ID3D11Device*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, ppgeometryshader : ID3D11GeometryShader*) : HRESULT
    @lpVtbl.value.create_geometry_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, ppgeometryshader)
  end
  def create_geometry_shader_with_stream_output(this : ID3D11Device*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, psodeclaration : D3D11_SO_DECLARATION_ENTRY*, numentries : UInt32, pbufferstrides : UInt32*, numstrides : UInt32, rasterizedstream : UInt32, pclasslinkage : ID3D11ClassLinkage, ppgeometryshader : ID3D11GeometryShader*) : HRESULT
    @lpVtbl.value.create_geometry_shader_with_stream_output.call(this, pshaderbytecode, bytecodelength, psodeclaration, numentries, pbufferstrides, numstrides, rasterizedstream, pclasslinkage, ppgeometryshader)
  end
  def create_pixel_shader(this : ID3D11Device*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, pppixelshader : ID3D11PixelShader*) : HRESULT
    @lpVtbl.value.create_pixel_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, pppixelshader)
  end
  def create_hull_shader(this : ID3D11Device*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, pphullshader : ID3D11HullShader*) : HRESULT
    @lpVtbl.value.create_hull_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, pphullshader)
  end
  def create_domain_shader(this : ID3D11Device*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, ppdomainshader : ID3D11DomainShader*) : HRESULT
    @lpVtbl.value.create_domain_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, ppdomainshader)
  end
  def create_compute_shader(this : ID3D11Device*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, ppcomputeshader : ID3D11ComputeShader*) : HRESULT
    @lpVtbl.value.create_compute_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, ppcomputeshader)
  end
  def create_class_linkage(this : ID3D11Device*, pplinkage : ID3D11ClassLinkage*) : HRESULT
    @lpVtbl.value.create_class_linkage.call(this, pplinkage)
  end
  def create_blend_state(this : ID3D11Device*, pblendstatedesc : D3D11_BLEND_DESC*, ppblendstate : ID3D11BlendState*) : HRESULT
    @lpVtbl.value.create_blend_state.call(this, pblendstatedesc, ppblendstate)
  end
  def create_depth_stencil_state(this : ID3D11Device*, pdepthstencildesc : D3D11_DEPTH_STENCIL_DESC*, ppdepthstencilstate : ID3D11DepthStencilState*) : HRESULT
    @lpVtbl.value.create_depth_stencil_state.call(this, pdepthstencildesc, ppdepthstencilstate)
  end
  def create_rasterizer_state(this : ID3D11Device*, prasterizerdesc : D3D11_RASTERIZER_DESC*, pprasterizerstate : ID3D11RasterizerState*) : HRESULT
    @lpVtbl.value.create_rasterizer_state.call(this, prasterizerdesc, pprasterizerstate)
  end
  def create_sampler_state(this : ID3D11Device*, psamplerdesc : D3D11_SAMPLER_DESC*, ppsamplerstate : ID3D11SamplerState*) : HRESULT
    @lpVtbl.value.create_sampler_state.call(this, psamplerdesc, ppsamplerstate)
  end
  def create_query(this : ID3D11Device*, pquerydesc : D3D11_QUERY_DESC*, ppquery : ID3D11Query*) : HRESULT
    @lpVtbl.value.create_query.call(this, pquerydesc, ppquery)
  end
  def create_predicate(this : ID3D11Device*, ppredicatedesc : D3D11_QUERY_DESC*, pppredicate : ID3D11Predicate*) : HRESULT
    @lpVtbl.value.create_predicate.call(this, ppredicatedesc, pppredicate)
  end
  def create_counter(this : ID3D11Device*, pcounterdesc : D3D11_COUNTER_DESC*, ppcounter : ID3D11Counter*) : HRESULT
    @lpVtbl.value.create_counter.call(this, pcounterdesc, ppcounter)
  end
  def create_deferred_context(this : ID3D11Device*, contextflags : UInt32, ppdeferredcontext : ID3D11DeviceContext*) : HRESULT
    @lpVtbl.value.create_deferred_context.call(this, contextflags, ppdeferredcontext)
  end
  def open_shared_resource(this : ID3D11Device*, hresource : LibC::HANDLE, returnedinterface : Guid*, ppresource : Void**) : HRESULT
    @lpVtbl.value.open_shared_resource.call(this, hresource, returnedinterface, ppresource)
  end
  def check_format_support(this : ID3D11Device*, format : DXGI_FORMAT, pformatsupport : UInt32*) : HRESULT
    @lpVtbl.value.check_format_support.call(this, format, pformatsupport)
  end
  def check_multisample_quality_levels(this : ID3D11Device*, format : DXGI_FORMAT, samplecount : UInt32, pnumqualitylevels : UInt32*) : HRESULT
    @lpVtbl.value.check_multisample_quality_levels.call(this, format, samplecount, pnumqualitylevels)
  end
  def check_counter_info(this : ID3D11Device*, pcounterinfo : D3D11_COUNTER_INFO*) : Void
    @lpVtbl.value.check_counter_info.call(this, pcounterinfo)
  end
  def check_counter(this : ID3D11Device*, pdesc : D3D11_COUNTER_DESC*, ptype : D3D11_COUNTER_TYPE*, pactivecounters : UInt32*, szname : UInt8*, pnamelength : UInt32*, szunits : UInt8*, punitslength : UInt32*, szdescription : UInt8*, pdescriptionlength : UInt32*) : HRESULT
    @lpVtbl.value.check_counter.call(this, pdesc, ptype, pactivecounters, szname, pnamelength, szunits, punitslength, szdescription, pdescriptionlength)
  end
  def check_feature_support(this : ID3D11Device*, feature : D3D11_FEATURE, pfeaturesupportdata : Void*, featuresupportdatasize : UInt32) : HRESULT
    @lpVtbl.value.check_feature_support.call(this, feature, pfeaturesupportdata, featuresupportdatasize)
  end
  def get_private_data(this : ID3D11Device*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11Device*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11Device*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_feature_level(this : ID3D11Device*) : D3D_FEATURE_LEVEL
    @lpVtbl.value.get_feature_level.call(this)
  end
  def get_creation_flags(this : ID3D11Device*) : UInt32
    @lpVtbl.value.get_creation_flags.call(this)
  end
  def get_device_removed_reason(this : ID3D11Device*) : HRESULT
    @lpVtbl.value.get_device_removed_reason.call(this)
  end
  def get_immediate_context(this : ID3D11Device*, ppimmediatecontext : ID3D11DeviceContext*) : Void
    @lpVtbl.value.get_immediate_context.call(this, ppimmediatecontext)
  end
  def set_exception_mode(this : ID3D11Device*, raiseflags : UInt32) : HRESULT
    @lpVtbl.value.set_exception_mode.call(this, raiseflags)
  end
  def get_exception_mode(this : ID3D11Device*) : UInt32
    @lpVtbl.value.get_exception_mode.call(this)
  end
end
struct LibWin32::ID3D11Debug
  def query_interface(this : ID3D11Debug*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11Debug*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11Debug*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_feature_mask(this : ID3D11Debug*, mask : UInt32) : HRESULT
    @lpVtbl.value.set_feature_mask.call(this, mask)
  end
  def get_feature_mask(this : ID3D11Debug*) : UInt32
    @lpVtbl.value.get_feature_mask.call(this)
  end
  def set_present_per_render_op_delay(this : ID3D11Debug*, milliseconds : UInt32) : HRESULT
    @lpVtbl.value.set_present_per_render_op_delay.call(this, milliseconds)
  end
  def get_present_per_render_op_delay(this : ID3D11Debug*) : UInt32
    @lpVtbl.value.get_present_per_render_op_delay.call(this)
  end
  def set_swap_chain(this : ID3D11Debug*, pswapchain : IDXGISwapChain) : HRESULT
    @lpVtbl.value.set_swap_chain.call(this, pswapchain)
  end
  def get_swap_chain(this : ID3D11Debug*, ppswapchain : IDXGISwapChain*) : HRESULT
    @lpVtbl.value.get_swap_chain.call(this, ppswapchain)
  end
  def validate_context(this : ID3D11Debug*, pcontext : ID3D11DeviceContext) : HRESULT
    @lpVtbl.value.validate_context.call(this, pcontext)
  end
  def report_live_device_objects(this : ID3D11Debug*, flags : D3D11_RLDO_FLAGS) : HRESULT
    @lpVtbl.value.report_live_device_objects.call(this, flags)
  end
  def validate_context_for_dispatch(this : ID3D11Debug*, pcontext : ID3D11DeviceContext) : HRESULT
    @lpVtbl.value.validate_context_for_dispatch.call(this, pcontext)
  end
end
struct LibWin32::ID3D11SwitchToRef
  def query_interface(this : ID3D11SwitchToRef*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11SwitchToRef*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11SwitchToRef*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_use_ref(this : ID3D11SwitchToRef*, useref : LibC::BOOL) : LibC::BOOL
    @lpVtbl.value.set_use_ref.call(this, useref)
  end
  def get_use_ref(this : ID3D11SwitchToRef*) : LibC::BOOL
    @lpVtbl.value.get_use_ref.call(this)
  end
end
struct LibWin32::ID3D11TracingDevice
  def query_interface(this : ID3D11TracingDevice*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11TracingDevice*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11TracingDevice*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_shader_tracking_options_by_type(this : ID3D11TracingDevice*, resourcetypeflags : UInt32, options : UInt32) : HRESULT
    @lpVtbl.value.set_shader_tracking_options_by_type.call(this, resourcetypeflags, options)
  end
  def set_shader_tracking_options(this : ID3D11TracingDevice*, pshader : IUnknown, options : UInt32) : HRESULT
    @lpVtbl.value.set_shader_tracking_options.call(this, pshader, options)
  end
end
struct LibWin32::ID3D11RefTrackingOptions
  def query_interface(this : ID3D11RefTrackingOptions*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11RefTrackingOptions*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11RefTrackingOptions*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_tracking_options(this : ID3D11RefTrackingOptions*, uoptions : UInt32) : HRESULT
    @lpVtbl.value.set_tracking_options.call(this, uoptions)
  end
end
struct LibWin32::ID3D11RefDefaultTrackingOptions
  def query_interface(this : ID3D11RefDefaultTrackingOptions*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11RefDefaultTrackingOptions*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11RefDefaultTrackingOptions*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_tracking_options(this : ID3D11RefDefaultTrackingOptions*, resourcetypeflags : UInt32, options : UInt32) : HRESULT
    @lpVtbl.value.set_tracking_options.call(this, resourcetypeflags, options)
  end
end
struct LibWin32::ID3D11InfoQueue
  def query_interface(this : ID3D11InfoQueue*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11InfoQueue*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11InfoQueue*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_message_count_limit(this : ID3D11InfoQueue*, messagecountlimit : UInt64) : HRESULT
    @lpVtbl.value.set_message_count_limit.call(this, messagecountlimit)
  end
  def clear_stored_messages(this : ID3D11InfoQueue*) : Void
    @lpVtbl.value.clear_stored_messages.call(this)
  end
  def get_message(this : ID3D11InfoQueue*, messageindex : UInt64, pmessage : D3D11_MESSAGE*, pmessagebytelength : LibC::UINT_PTR*) : HRESULT
    @lpVtbl.value.get_message.call(this, messageindex, pmessage, pmessagebytelength)
  end
  def get_num_messages_allowed_by_storage_filter(this : ID3D11InfoQueue*) : UInt64
    @lpVtbl.value.get_num_messages_allowed_by_storage_filter.call(this)
  end
  def get_num_messages_denied_by_storage_filter(this : ID3D11InfoQueue*) : UInt64
    @lpVtbl.value.get_num_messages_denied_by_storage_filter.call(this)
  end
  def get_num_stored_messages(this : ID3D11InfoQueue*) : UInt64
    @lpVtbl.value.get_num_stored_messages.call(this)
  end
  def get_num_stored_messages_allowed_by_retrieval_filter(this : ID3D11InfoQueue*) : UInt64
    @lpVtbl.value.get_num_stored_messages_allowed_by_retrieval_filter.call(this)
  end
  def get_num_messages_discarded_by_message_count_limit(this : ID3D11InfoQueue*) : UInt64
    @lpVtbl.value.get_num_messages_discarded_by_message_count_limit.call(this)
  end
  def get_message_count_limit(this : ID3D11InfoQueue*) : UInt64
    @lpVtbl.value.get_message_count_limit.call(this)
  end
  def add_storage_filter_entries(this : ID3D11InfoQueue*, pfilter : D3D11_INFO_QUEUE_FILTER*) : HRESULT
    @lpVtbl.value.add_storage_filter_entries.call(this, pfilter)
  end
  def get_storage_filter(this : ID3D11InfoQueue*, pfilter : D3D11_INFO_QUEUE_FILTER*, pfilterbytelength : LibC::UINT_PTR*) : HRESULT
    @lpVtbl.value.get_storage_filter.call(this, pfilter, pfilterbytelength)
  end
  def clear_storage_filter(this : ID3D11InfoQueue*) : Void
    @lpVtbl.value.clear_storage_filter.call(this)
  end
  def push_empty_storage_filter(this : ID3D11InfoQueue*) : HRESULT
    @lpVtbl.value.push_empty_storage_filter.call(this)
  end
  def push_copy_of_storage_filter(this : ID3D11InfoQueue*) : HRESULT
    @lpVtbl.value.push_copy_of_storage_filter.call(this)
  end
  def push_storage_filter(this : ID3D11InfoQueue*, pfilter : D3D11_INFO_QUEUE_FILTER*) : HRESULT
    @lpVtbl.value.push_storage_filter.call(this, pfilter)
  end
  def pop_storage_filter(this : ID3D11InfoQueue*) : Void
    @lpVtbl.value.pop_storage_filter.call(this)
  end
  def get_storage_filter_stack_size(this : ID3D11InfoQueue*) : UInt32
    @lpVtbl.value.get_storage_filter_stack_size.call(this)
  end
  def add_retrieval_filter_entries(this : ID3D11InfoQueue*, pfilter : D3D11_INFO_QUEUE_FILTER*) : HRESULT
    @lpVtbl.value.add_retrieval_filter_entries.call(this, pfilter)
  end
  def get_retrieval_filter(this : ID3D11InfoQueue*, pfilter : D3D11_INFO_QUEUE_FILTER*, pfilterbytelength : LibC::UINT_PTR*) : HRESULT
    @lpVtbl.value.get_retrieval_filter.call(this, pfilter, pfilterbytelength)
  end
  def clear_retrieval_filter(this : ID3D11InfoQueue*) : Void
    @lpVtbl.value.clear_retrieval_filter.call(this)
  end
  def push_empty_retrieval_filter(this : ID3D11InfoQueue*) : HRESULT
    @lpVtbl.value.push_empty_retrieval_filter.call(this)
  end
  def push_copy_of_retrieval_filter(this : ID3D11InfoQueue*) : HRESULT
    @lpVtbl.value.push_copy_of_retrieval_filter.call(this)
  end
  def push_retrieval_filter(this : ID3D11InfoQueue*, pfilter : D3D11_INFO_QUEUE_FILTER*) : HRESULT
    @lpVtbl.value.push_retrieval_filter.call(this, pfilter)
  end
  def pop_retrieval_filter(this : ID3D11InfoQueue*) : Void
    @lpVtbl.value.pop_retrieval_filter.call(this)
  end
  def get_retrieval_filter_stack_size(this : ID3D11InfoQueue*) : UInt32
    @lpVtbl.value.get_retrieval_filter_stack_size.call(this)
  end
  def add_message(this : ID3D11InfoQueue*, category : D3D11_MESSAGE_CATEGORY, severity : D3D11_MESSAGE_SEVERITY, id : D3D11_MESSAGE_ID, pdescription : PSTR) : HRESULT
    @lpVtbl.value.add_message.call(this, category, severity, id, pdescription)
  end
  def add_application_message(this : ID3D11InfoQueue*, severity : D3D11_MESSAGE_SEVERITY, pdescription : PSTR) : HRESULT
    @lpVtbl.value.add_application_message.call(this, severity, pdescription)
  end
  def set_break_on_category(this : ID3D11InfoQueue*, category : D3D11_MESSAGE_CATEGORY, benable : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_break_on_category.call(this, category, benable)
  end
  def set_break_on_severity(this : ID3D11InfoQueue*, severity : D3D11_MESSAGE_SEVERITY, benable : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_break_on_severity.call(this, severity, benable)
  end
  def set_break_on_id(this : ID3D11InfoQueue*, id : D3D11_MESSAGE_ID, benable : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_break_on_id.call(this, id, benable)
  end
  def get_break_on_category(this : ID3D11InfoQueue*, category : D3D11_MESSAGE_CATEGORY) : LibC::BOOL
    @lpVtbl.value.get_break_on_category.call(this, category)
  end
  def get_break_on_severity(this : ID3D11InfoQueue*, severity : D3D11_MESSAGE_SEVERITY) : LibC::BOOL
    @lpVtbl.value.get_break_on_severity.call(this, severity)
  end
  def get_break_on_id(this : ID3D11InfoQueue*, id : D3D11_MESSAGE_ID) : LibC::BOOL
    @lpVtbl.value.get_break_on_id.call(this, id)
  end
  def set_mute_debug_output(this : ID3D11InfoQueue*, bmute : LibC::BOOL) : Void
    @lpVtbl.value.set_mute_debug_output.call(this, bmute)
  end
  def get_mute_debug_output(this : ID3D11InfoQueue*) : LibC::BOOL
    @lpVtbl.value.get_mute_debug_output.call(this)
  end
end
struct LibWin32::ID3D11BlendState1
  def query_interface(this : ID3D11BlendState1*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11BlendState1*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11BlendState1*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11BlendState1*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11BlendState1*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11BlendState1*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11BlendState1*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_desc(this : ID3D11BlendState1*, pdesc : D3D11_BLEND_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
  def get_desc1(this : ID3D11BlendState1*, pdesc : D3D11_BLEND_DESC1*) : Void
    @lpVtbl.value.get_desc1.call(this, pdesc)
  end
end
struct LibWin32::ID3D11RasterizerState1
  def query_interface(this : ID3D11RasterizerState1*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11RasterizerState1*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11RasterizerState1*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11RasterizerState1*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11RasterizerState1*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11RasterizerState1*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11RasterizerState1*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_desc(this : ID3D11RasterizerState1*, pdesc : D3D11_RASTERIZER_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
  def get_desc1(this : ID3D11RasterizerState1*, pdesc : D3D11_RASTERIZER_DESC1*) : Void
    @lpVtbl.value.get_desc1.call(this, pdesc)
  end
end
struct LibWin32::ID3DDeviceContextState
  def query_interface(this : ID3DDeviceContextState*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3DDeviceContextState*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3DDeviceContextState*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3DDeviceContextState*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3DDeviceContextState*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3DDeviceContextState*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3DDeviceContextState*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
end
struct LibWin32::ID3D11DeviceContext1
  def query_interface(this : ID3D11DeviceContext1*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11DeviceContext1*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11DeviceContext1*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11DeviceContext1*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11DeviceContext1*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11DeviceContext1*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11DeviceContext1*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def vs_set_constant_buffers(this : ID3D11DeviceContext1*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.vs_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ps_set_shader_resources(this : ID3D11DeviceContext1*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.ps_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def ps_set_shader(this : ID3D11DeviceContext1*, ppixelshader : ID3D11PixelShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.ps_set_shader.call(this, ppixelshader, ppclassinstances, numclassinstances)
  end
  def ps_set_samplers(this : ID3D11DeviceContext1*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.ps_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def vs_set_shader(this : ID3D11DeviceContext1*, pvertexshader : ID3D11VertexShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.vs_set_shader.call(this, pvertexshader, ppclassinstances, numclassinstances)
  end
  def draw_indexed(this : ID3D11DeviceContext1*, indexcount : UInt32, startindexlocation : UInt32, basevertexlocation : Int32) : Void
    @lpVtbl.value.draw_indexed.call(this, indexcount, startindexlocation, basevertexlocation)
  end
  def draw(this : ID3D11DeviceContext1*, vertexcount : UInt32, startvertexlocation : UInt32) : Void
    @lpVtbl.value.draw.call(this, vertexcount, startvertexlocation)
  end
  def map(this : ID3D11DeviceContext1*, presource : ID3D11Resource, subresource : UInt32, maptype : D3D11_MAP, mapflags : UInt32, pmappedresource : D3D11_MAPPED_SUBRESOURCE*) : HRESULT
    @lpVtbl.value.map.call(this, presource, subresource, maptype, mapflags, pmappedresource)
  end
  def unmap(this : ID3D11DeviceContext1*, presource : ID3D11Resource, subresource : UInt32) : Void
    @lpVtbl.value.unmap.call(this, presource, subresource)
  end
  def ps_set_constant_buffers(this : ID3D11DeviceContext1*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.ps_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ia_set_input_layout(this : ID3D11DeviceContext1*, pinputlayout : ID3D11InputLayout) : Void
    @lpVtbl.value.ia_set_input_layout.call(this, pinputlayout)
  end
  def ia_set_vertex_buffers(this : ID3D11DeviceContext1*, startslot : UInt32, numbuffers : UInt32, ppvertexbuffers : ID3D11Buffer*, pstrides : UInt32*, poffsets : UInt32*) : Void
    @lpVtbl.value.ia_set_vertex_buffers.call(this, startslot, numbuffers, ppvertexbuffers, pstrides, poffsets)
  end
  def ia_set_index_buffer(this : ID3D11DeviceContext1*, pindexbuffer : ID3D11Buffer, format : DXGI_FORMAT, offset : UInt32) : Void
    @lpVtbl.value.ia_set_index_buffer.call(this, pindexbuffer, format, offset)
  end
  def draw_indexed_instanced(this : ID3D11DeviceContext1*, indexcountperinstance : UInt32, instancecount : UInt32, startindexlocation : UInt32, basevertexlocation : Int32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_indexed_instanced.call(this, indexcountperinstance, instancecount, startindexlocation, basevertexlocation, startinstancelocation)
  end
  def draw_instanced(this : ID3D11DeviceContext1*, vertexcountperinstance : UInt32, instancecount : UInt32, startvertexlocation : UInt32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_instanced.call(this, vertexcountperinstance, instancecount, startvertexlocation, startinstancelocation)
  end
  def gs_set_constant_buffers(this : ID3D11DeviceContext1*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.gs_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def gs_set_shader(this : ID3D11DeviceContext1*, pshader : ID3D11GeometryShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.gs_set_shader.call(this, pshader, ppclassinstances, numclassinstances)
  end
  def ia_set_primitive_topology(this : ID3D11DeviceContext1*, topology : D3D_PRIMITIVE_TOPOLOGY) : Void
    @lpVtbl.value.ia_set_primitive_topology.call(this, topology)
  end
  def vs_set_shader_resources(this : ID3D11DeviceContext1*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.vs_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def vs_set_samplers(this : ID3D11DeviceContext1*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.vs_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def begin_(this : ID3D11DeviceContext1*, pasync : ID3D11Asynchronous) : Void
    @lpVtbl.value.begin_.call(this, pasync)
  end
  def end_(this : ID3D11DeviceContext1*, pasync : ID3D11Asynchronous) : Void
    @lpVtbl.value.end_.call(this, pasync)
  end
  def get_data(this : ID3D11DeviceContext1*, pasync : ID3D11Asynchronous, pdata : Void*, datasize : UInt32, getdataflags : UInt32) : HRESULT
    @lpVtbl.value.get_data.call(this, pasync, pdata, datasize, getdataflags)
  end
  def set_predication(this : ID3D11DeviceContext1*, ppredicate : ID3D11Predicate, predicatevalue : LibC::BOOL) : Void
    @lpVtbl.value.set_predication.call(this, ppredicate, predicatevalue)
  end
  def gs_set_shader_resources(this : ID3D11DeviceContext1*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.gs_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def gs_set_samplers(this : ID3D11DeviceContext1*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.gs_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def om_set_render_targets(this : ID3D11DeviceContext1*, numviews : UInt32, pprendertargetviews : ID3D11RenderTargetView*, pdepthstencilview : ID3D11DepthStencilView) : Void
    @lpVtbl.value.om_set_render_targets.call(this, numviews, pprendertargetviews, pdepthstencilview)
  end
  def om_set_render_targets_and_unordered_access_views(this : ID3D11DeviceContext1*, numrtvs : UInt32, pprendertargetviews : ID3D11RenderTargetView*, pdepthstencilview : ID3D11DepthStencilView, uavstartslot : UInt32, numuavs : UInt32, ppunorderedaccessviews : ID3D11UnorderedAccessView*, puavinitialcounts : UInt32*) : Void
    @lpVtbl.value.om_set_render_targets_and_unordered_access_views.call(this, numrtvs, pprendertargetviews, pdepthstencilview, uavstartslot, numuavs, ppunorderedaccessviews, puavinitialcounts)
  end
  def om_set_blend_state(this : ID3D11DeviceContext1*, pblendstate : ID3D11BlendState, blendfactor : Float32*, samplemask : UInt32) : Void
    @lpVtbl.value.om_set_blend_state.call(this, pblendstate, blendfactor, samplemask)
  end
  def om_set_depth_stencil_state(this : ID3D11DeviceContext1*, pdepthstencilstate : ID3D11DepthStencilState, stencilref : UInt32) : Void
    @lpVtbl.value.om_set_depth_stencil_state.call(this, pdepthstencilstate, stencilref)
  end
  def so_set_targets(this : ID3D11DeviceContext1*, numbuffers : UInt32, ppsotargets : ID3D11Buffer*, poffsets : UInt32*) : Void
    @lpVtbl.value.so_set_targets.call(this, numbuffers, ppsotargets, poffsets)
  end
  def draw_auto(this : ID3D11DeviceContext1*) : Void
    @lpVtbl.value.draw_auto.call(this)
  end
  def draw_indexed_instanced_indirect(this : ID3D11DeviceContext1*, pbufferforargs : ID3D11Buffer, alignedbyteoffsetforargs : UInt32) : Void
    @lpVtbl.value.draw_indexed_instanced_indirect.call(this, pbufferforargs, alignedbyteoffsetforargs)
  end
  def draw_instanced_indirect(this : ID3D11DeviceContext1*, pbufferforargs : ID3D11Buffer, alignedbyteoffsetforargs : UInt32) : Void
    @lpVtbl.value.draw_instanced_indirect.call(this, pbufferforargs, alignedbyteoffsetforargs)
  end
  def dispatch(this : ID3D11DeviceContext1*, threadgroupcountx : UInt32, threadgroupcounty : UInt32, threadgroupcountz : UInt32) : Void
    @lpVtbl.value.dispatch.call(this, threadgroupcountx, threadgroupcounty, threadgroupcountz)
  end
  def dispatch_indirect(this : ID3D11DeviceContext1*, pbufferforargs : ID3D11Buffer, alignedbyteoffsetforargs : UInt32) : Void
    @lpVtbl.value.dispatch_indirect.call(this, pbufferforargs, alignedbyteoffsetforargs)
  end
  def rs_set_state(this : ID3D11DeviceContext1*, prasterizerstate : ID3D11RasterizerState) : Void
    @lpVtbl.value.rs_set_state.call(this, prasterizerstate)
  end
  def rs_set_viewports(this : ID3D11DeviceContext1*, numviewports : UInt32, pviewports : D3D11_VIEWPORT*) : Void
    @lpVtbl.value.rs_set_viewports.call(this, numviewports, pviewports)
  end
  def rs_set_scissor_rects(this : ID3D11DeviceContext1*, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.rs_set_scissor_rects.call(this, numrects, prects)
  end
  def copy_subresource_region(this : ID3D11DeviceContext1*, pdstresource : ID3D11Resource, dstsubresource : UInt32, dstx : UInt32, dsty : UInt32, dstz : UInt32, psrcresource : ID3D11Resource, srcsubresource : UInt32, psrcbox : D3D11_BOX*) : Void
    @lpVtbl.value.copy_subresource_region.call(this, pdstresource, dstsubresource, dstx, dsty, dstz, psrcresource, srcsubresource, psrcbox)
  end
  def copy_resource(this : ID3D11DeviceContext1*, pdstresource : ID3D11Resource, psrcresource : ID3D11Resource) : Void
    @lpVtbl.value.copy_resource.call(this, pdstresource, psrcresource)
  end
  def update_subresource(this : ID3D11DeviceContext1*, pdstresource : ID3D11Resource, dstsubresource : UInt32, pdstbox : D3D11_BOX*, psrcdata : Void*, srcrowpitch : UInt32, srcdepthpitch : UInt32) : Void
    @lpVtbl.value.update_subresource.call(this, pdstresource, dstsubresource, pdstbox, psrcdata, srcrowpitch, srcdepthpitch)
  end
  def copy_structure_count(this : ID3D11DeviceContext1*, pdstbuffer : ID3D11Buffer, dstalignedbyteoffset : UInt32, psrcview : ID3D11UnorderedAccessView) : Void
    @lpVtbl.value.copy_structure_count.call(this, pdstbuffer, dstalignedbyteoffset, psrcview)
  end
  def clear_render_target_view(this : ID3D11DeviceContext1*, prendertargetview : ID3D11RenderTargetView, colorrgba : Float32*) : Void
    @lpVtbl.value.clear_render_target_view.call(this, prendertargetview, colorrgba)
  end
  def clear_unordered_access_view_uint(this : ID3D11DeviceContext1*, punorderedaccessview : ID3D11UnorderedAccessView, values : UInt32*) : Void
    @lpVtbl.value.clear_unordered_access_view_uint.call(this, punorderedaccessview, values)
  end
  def clear_unordered_access_view_float(this : ID3D11DeviceContext1*, punorderedaccessview : ID3D11UnorderedAccessView, values : Float32*) : Void
    @lpVtbl.value.clear_unordered_access_view_float.call(this, punorderedaccessview, values)
  end
  def clear_depth_stencil_view(this : ID3D11DeviceContext1*, pdepthstencilview : ID3D11DepthStencilView, clearflags : UInt32, depth : Float32, stencil : UInt8) : Void
    @lpVtbl.value.clear_depth_stencil_view.call(this, pdepthstencilview, clearflags, depth, stencil)
  end
  def generate_mips(this : ID3D11DeviceContext1*, pshaderresourceview : ID3D11ShaderResourceView) : Void
    @lpVtbl.value.generate_mips.call(this, pshaderresourceview)
  end
  def set_resource_min_lod(this : ID3D11DeviceContext1*, presource : ID3D11Resource, minlod : Float32) : Void
    @lpVtbl.value.set_resource_min_lod.call(this, presource, minlod)
  end
  def get_resource_min_lod(this : ID3D11DeviceContext1*, presource : ID3D11Resource) : Float32
    @lpVtbl.value.get_resource_min_lod.call(this, presource)
  end
  def resolve_subresource(this : ID3D11DeviceContext1*, pdstresource : ID3D11Resource, dstsubresource : UInt32, psrcresource : ID3D11Resource, srcsubresource : UInt32, format : DXGI_FORMAT) : Void
    @lpVtbl.value.resolve_subresource.call(this, pdstresource, dstsubresource, psrcresource, srcsubresource, format)
  end
  def execute_command_list(this : ID3D11DeviceContext1*, pcommandlist : ID3D11CommandList, restorecontextstate : LibC::BOOL) : Void
    @lpVtbl.value.execute_command_list.call(this, pcommandlist, restorecontextstate)
  end
  def hs_set_shader_resources(this : ID3D11DeviceContext1*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.hs_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def hs_set_shader(this : ID3D11DeviceContext1*, phullshader : ID3D11HullShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.hs_set_shader.call(this, phullshader, ppclassinstances, numclassinstances)
  end
  def hs_set_samplers(this : ID3D11DeviceContext1*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.hs_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def hs_set_constant_buffers(this : ID3D11DeviceContext1*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.hs_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ds_set_shader_resources(this : ID3D11DeviceContext1*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.ds_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def ds_set_shader(this : ID3D11DeviceContext1*, pdomainshader : ID3D11DomainShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.ds_set_shader.call(this, pdomainshader, ppclassinstances, numclassinstances)
  end
  def ds_set_samplers(this : ID3D11DeviceContext1*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.ds_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def ds_set_constant_buffers(this : ID3D11DeviceContext1*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.ds_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def cs_set_shader_resources(this : ID3D11DeviceContext1*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.cs_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def cs_set_unordered_access_views(this : ID3D11DeviceContext1*, startslot : UInt32, numuavs : UInt32, ppunorderedaccessviews : ID3D11UnorderedAccessView*, puavinitialcounts : UInt32*) : Void
    @lpVtbl.value.cs_set_unordered_access_views.call(this, startslot, numuavs, ppunorderedaccessviews, puavinitialcounts)
  end
  def cs_set_shader(this : ID3D11DeviceContext1*, pcomputeshader : ID3D11ComputeShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.cs_set_shader.call(this, pcomputeshader, ppclassinstances, numclassinstances)
  end
  def cs_set_samplers(this : ID3D11DeviceContext1*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.cs_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def cs_set_constant_buffers(this : ID3D11DeviceContext1*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.cs_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def vs_get_constant_buffers(this : ID3D11DeviceContext1*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.vs_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ps_get_shader_resources(this : ID3D11DeviceContext1*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.ps_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def ps_get_shader(this : ID3D11DeviceContext1*, pppixelshader : ID3D11PixelShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.ps_get_shader.call(this, pppixelshader, ppclassinstances, pnumclassinstances)
  end
  def ps_get_samplers(this : ID3D11DeviceContext1*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.ps_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def vs_get_shader(this : ID3D11DeviceContext1*, ppvertexshader : ID3D11VertexShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.vs_get_shader.call(this, ppvertexshader, ppclassinstances, pnumclassinstances)
  end
  def ps_get_constant_buffers(this : ID3D11DeviceContext1*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.ps_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ia_get_input_layout(this : ID3D11DeviceContext1*, ppinputlayout : ID3D11InputLayout*) : Void
    @lpVtbl.value.ia_get_input_layout.call(this, ppinputlayout)
  end
  def ia_get_vertex_buffers(this : ID3D11DeviceContext1*, startslot : UInt32, numbuffers : UInt32, ppvertexbuffers : ID3D11Buffer*, pstrides : UInt32*, poffsets : UInt32*) : Void
    @lpVtbl.value.ia_get_vertex_buffers.call(this, startslot, numbuffers, ppvertexbuffers, pstrides, poffsets)
  end
  def ia_get_index_buffer(this : ID3D11DeviceContext1*, pindexbuffer : ID3D11Buffer*, format : DXGI_FORMAT*, offset : UInt32*) : Void
    @lpVtbl.value.ia_get_index_buffer.call(this, pindexbuffer, format, offset)
  end
  def gs_get_constant_buffers(this : ID3D11DeviceContext1*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.gs_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def gs_get_shader(this : ID3D11DeviceContext1*, ppgeometryshader : ID3D11GeometryShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.gs_get_shader.call(this, ppgeometryshader, ppclassinstances, pnumclassinstances)
  end
  def ia_get_primitive_topology(this : ID3D11DeviceContext1*, ptopology : D3D_PRIMITIVE_TOPOLOGY*) : Void
    @lpVtbl.value.ia_get_primitive_topology.call(this, ptopology)
  end
  def vs_get_shader_resources(this : ID3D11DeviceContext1*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.vs_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def vs_get_samplers(this : ID3D11DeviceContext1*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.vs_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def get_predication(this : ID3D11DeviceContext1*, pppredicate : ID3D11Predicate*, ppredicatevalue : LibC::BOOL*) : Void
    @lpVtbl.value.get_predication.call(this, pppredicate, ppredicatevalue)
  end
  def gs_get_shader_resources(this : ID3D11DeviceContext1*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.gs_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def gs_get_samplers(this : ID3D11DeviceContext1*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.gs_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def om_get_render_targets(this : ID3D11DeviceContext1*, numviews : UInt32, pprendertargetviews : ID3D11RenderTargetView*, ppdepthstencilview : ID3D11DepthStencilView*) : Void
    @lpVtbl.value.om_get_render_targets.call(this, numviews, pprendertargetviews, ppdepthstencilview)
  end
  def om_get_render_targets_and_unordered_access_views(this : ID3D11DeviceContext1*, numrtvs : UInt32, pprendertargetviews : ID3D11RenderTargetView*, ppdepthstencilview : ID3D11DepthStencilView*, uavstartslot : UInt32, numuavs : UInt32, ppunorderedaccessviews : ID3D11UnorderedAccessView*) : Void
    @lpVtbl.value.om_get_render_targets_and_unordered_access_views.call(this, numrtvs, pprendertargetviews, ppdepthstencilview, uavstartslot, numuavs, ppunorderedaccessviews)
  end
  def om_get_blend_state(this : ID3D11DeviceContext1*, ppblendstate : ID3D11BlendState*, blendfactor : Float32*, psamplemask : UInt32*) : Void
    @lpVtbl.value.om_get_blend_state.call(this, ppblendstate, blendfactor, psamplemask)
  end
  def om_get_depth_stencil_state(this : ID3D11DeviceContext1*, ppdepthstencilstate : ID3D11DepthStencilState*, pstencilref : UInt32*) : Void
    @lpVtbl.value.om_get_depth_stencil_state.call(this, ppdepthstencilstate, pstencilref)
  end
  def so_get_targets(this : ID3D11DeviceContext1*, numbuffers : UInt32, ppsotargets : ID3D11Buffer*) : Void
    @lpVtbl.value.so_get_targets.call(this, numbuffers, ppsotargets)
  end
  def rs_get_state(this : ID3D11DeviceContext1*, pprasterizerstate : ID3D11RasterizerState*) : Void
    @lpVtbl.value.rs_get_state.call(this, pprasterizerstate)
  end
  def rs_get_viewports(this : ID3D11DeviceContext1*, pnumviewports : UInt32*, pviewports : D3D11_VIEWPORT*) : Void
    @lpVtbl.value.rs_get_viewports.call(this, pnumviewports, pviewports)
  end
  def rs_get_scissor_rects(this : ID3D11DeviceContext1*, pnumrects : UInt32*, prects : RECT*) : Void
    @lpVtbl.value.rs_get_scissor_rects.call(this, pnumrects, prects)
  end
  def hs_get_shader_resources(this : ID3D11DeviceContext1*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.hs_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def hs_get_shader(this : ID3D11DeviceContext1*, pphullshader : ID3D11HullShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.hs_get_shader.call(this, pphullshader, ppclassinstances, pnumclassinstances)
  end
  def hs_get_samplers(this : ID3D11DeviceContext1*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.hs_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def hs_get_constant_buffers(this : ID3D11DeviceContext1*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.hs_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ds_get_shader_resources(this : ID3D11DeviceContext1*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.ds_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def ds_get_shader(this : ID3D11DeviceContext1*, ppdomainshader : ID3D11DomainShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.ds_get_shader.call(this, ppdomainshader, ppclassinstances, pnumclassinstances)
  end
  def ds_get_samplers(this : ID3D11DeviceContext1*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.ds_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def ds_get_constant_buffers(this : ID3D11DeviceContext1*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.ds_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def cs_get_shader_resources(this : ID3D11DeviceContext1*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.cs_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def cs_get_unordered_access_views(this : ID3D11DeviceContext1*, startslot : UInt32, numuavs : UInt32, ppunorderedaccessviews : ID3D11UnorderedAccessView*) : Void
    @lpVtbl.value.cs_get_unordered_access_views.call(this, startslot, numuavs, ppunorderedaccessviews)
  end
  def cs_get_shader(this : ID3D11DeviceContext1*, ppcomputeshader : ID3D11ComputeShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.cs_get_shader.call(this, ppcomputeshader, ppclassinstances, pnumclassinstances)
  end
  def cs_get_samplers(this : ID3D11DeviceContext1*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.cs_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def cs_get_constant_buffers(this : ID3D11DeviceContext1*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.cs_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def clear_state(this : ID3D11DeviceContext1*) : Void
    @lpVtbl.value.clear_state.call(this)
  end
  def flush(this : ID3D11DeviceContext1*) : Void
    @lpVtbl.value.flush.call(this)
  end
  def get_type(this : ID3D11DeviceContext1*) : D3D11_DEVICE_CONTEXT_TYPE
    @lpVtbl.value.get_type.call(this)
  end
  def get_context_flags(this : ID3D11DeviceContext1*) : UInt32
    @lpVtbl.value.get_context_flags.call(this)
  end
  def finish_command_list(this : ID3D11DeviceContext1*, restoredeferredcontextstate : LibC::BOOL, ppcommandlist : ID3D11CommandList*) : HRESULT
    @lpVtbl.value.finish_command_list.call(this, restoredeferredcontextstate, ppcommandlist)
  end
  def copy_subresource_region1(this : ID3D11DeviceContext1*, pdstresource : ID3D11Resource, dstsubresource : UInt32, dstx : UInt32, dsty : UInt32, dstz : UInt32, psrcresource : ID3D11Resource, srcsubresource : UInt32, psrcbox : D3D11_BOX*, copyflags : UInt32) : Void
    @lpVtbl.value.copy_subresource_region1.call(this, pdstresource, dstsubresource, dstx, dsty, dstz, psrcresource, srcsubresource, psrcbox, copyflags)
  end
  def update_subresource1(this : ID3D11DeviceContext1*, pdstresource : ID3D11Resource, dstsubresource : UInt32, pdstbox : D3D11_BOX*, psrcdata : Void*, srcrowpitch : UInt32, srcdepthpitch : UInt32, copyflags : UInt32) : Void
    @lpVtbl.value.update_subresource1.call(this, pdstresource, dstsubresource, pdstbox, psrcdata, srcrowpitch, srcdepthpitch, copyflags)
  end
  def discard_resource(this : ID3D11DeviceContext1*, presource : ID3D11Resource) : Void
    @lpVtbl.value.discard_resource.call(this, presource)
  end
  def discard_view(this : ID3D11DeviceContext1*, presourceview : ID3D11View) : Void
    @lpVtbl.value.discard_view.call(this, presourceview)
  end
  def vs_set_constant_buffers1(this : ID3D11DeviceContext1*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.vs_set_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def hs_set_constant_buffers1(this : ID3D11DeviceContext1*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.hs_set_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def ds_set_constant_buffers1(this : ID3D11DeviceContext1*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.ds_set_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def gs_set_constant_buffers1(this : ID3D11DeviceContext1*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.gs_set_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def ps_set_constant_buffers1(this : ID3D11DeviceContext1*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.ps_set_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def cs_set_constant_buffers1(this : ID3D11DeviceContext1*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.cs_set_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def vs_get_constant_buffers1(this : ID3D11DeviceContext1*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.vs_get_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def hs_get_constant_buffers1(this : ID3D11DeviceContext1*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.hs_get_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def ds_get_constant_buffers1(this : ID3D11DeviceContext1*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.ds_get_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def gs_get_constant_buffers1(this : ID3D11DeviceContext1*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.gs_get_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def ps_get_constant_buffers1(this : ID3D11DeviceContext1*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.ps_get_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def cs_get_constant_buffers1(this : ID3D11DeviceContext1*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.cs_get_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def swap_device_context_state(this : ID3D11DeviceContext1*, pstate : ID3DDeviceContextState, pppreviousstate : ID3DDeviceContextState*) : Void
    @lpVtbl.value.swap_device_context_state.call(this, pstate, pppreviousstate)
  end
  def clear_view(this : ID3D11DeviceContext1*, pview : ID3D11View, color : Float32*, prect : RECT*, numrects : UInt32) : Void
    @lpVtbl.value.clear_view.call(this, pview, color, prect, numrects)
  end
  def discard_view1(this : ID3D11DeviceContext1*, presourceview : ID3D11View, prects : RECT*, numrects : UInt32) : Void
    @lpVtbl.value.discard_view1.call(this, presourceview, prects, numrects)
  end
end
struct LibWin32::ID3D11VideoContext1
  def query_interface(this : ID3D11VideoContext1*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11VideoContext1*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11VideoContext1*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11VideoContext1*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11VideoContext1*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11VideoContext1*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11VideoContext1*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_decoder_buffer(this : ID3D11VideoContext1*, pdecoder : ID3D11VideoDecoder, type : D3D11_VIDEO_DECODER_BUFFER_TYPE, pbuffersize : UInt32*, ppbuffer : Void**) : HRESULT
    @lpVtbl.value.get_decoder_buffer.call(this, pdecoder, type, pbuffersize, ppbuffer)
  end
  def release_decoder_buffer(this : ID3D11VideoContext1*, pdecoder : ID3D11VideoDecoder, type : D3D11_VIDEO_DECODER_BUFFER_TYPE) : HRESULT
    @lpVtbl.value.release_decoder_buffer.call(this, pdecoder, type)
  end
  def decoder_begin_frame(this : ID3D11VideoContext1*, pdecoder : ID3D11VideoDecoder, pview : ID3D11VideoDecoderOutputView, contentkeysize : UInt32, pcontentkey : Void*) : HRESULT
    @lpVtbl.value.decoder_begin_frame.call(this, pdecoder, pview, contentkeysize, pcontentkey)
  end
  def decoder_end_frame(this : ID3D11VideoContext1*, pdecoder : ID3D11VideoDecoder) : HRESULT
    @lpVtbl.value.decoder_end_frame.call(this, pdecoder)
  end
  def submit_decoder_buffers(this : ID3D11VideoContext1*, pdecoder : ID3D11VideoDecoder, numbuffers : UInt32, pbufferdesc : D3D11_VIDEO_DECODER_BUFFER_DESC*) : HRESULT
    @lpVtbl.value.submit_decoder_buffers.call(this, pdecoder, numbuffers, pbufferdesc)
  end
  def decoder_extension(this : ID3D11VideoContext1*, pdecoder : ID3D11VideoDecoder, pextensiondata : D3D11_VIDEO_DECODER_EXTENSION*) : Int32
    @lpVtbl.value.decoder_extension.call(this, pdecoder, pextensiondata)
  end
  def video_processor_set_output_target_rect(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, enable : LibC::BOOL, prect : RECT*) : Void
    @lpVtbl.value.video_processor_set_output_target_rect.call(this, pvideoprocessor, enable, prect)
  end
  def video_processor_set_output_background_color(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, ycbcr : LibC::BOOL, pcolor : D3D11_VIDEO_COLOR*) : Void
    @lpVtbl.value.video_processor_set_output_background_color.call(this, pvideoprocessor, ycbcr, pcolor)
  end
  def video_processor_set_output_color_space(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, pcolorspace : D3D11_VIDEO_PROCESSOR_COLOR_SPACE*) : Void
    @lpVtbl.value.video_processor_set_output_color_space.call(this, pvideoprocessor, pcolorspace)
  end
  def video_processor_set_output_alpha_fill_mode(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, alphafillmode : D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE, streamindex : UInt32) : Void
    @lpVtbl.value.video_processor_set_output_alpha_fill_mode.call(this, pvideoprocessor, alphafillmode, streamindex)
  end
  def video_processor_set_output_constriction(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, enable : LibC::BOOL, size : SIZE) : Void
    @lpVtbl.value.video_processor_set_output_constriction.call(this, pvideoprocessor, enable, size)
  end
  def video_processor_set_output_stereo_mode(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, enable : LibC::BOOL) : Void
    @lpVtbl.value.video_processor_set_output_stereo_mode.call(this, pvideoprocessor, enable)
  end
  def video_processor_set_output_extension(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, pextensionguid : Guid*, datasize : UInt32, pdata : Void*) : Int32
    @lpVtbl.value.video_processor_set_output_extension.call(this, pvideoprocessor, pextensionguid, datasize, pdata)
  end
  def video_processor_get_output_target_rect(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, enabled : LibC::BOOL*, prect : RECT*) : Void
    @lpVtbl.value.video_processor_get_output_target_rect.call(this, pvideoprocessor, enabled, prect)
  end
  def video_processor_get_output_background_color(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, pycbcr : LibC::BOOL*, pcolor : D3D11_VIDEO_COLOR*) : Void
    @lpVtbl.value.video_processor_get_output_background_color.call(this, pvideoprocessor, pycbcr, pcolor)
  end
  def video_processor_get_output_color_space(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, pcolorspace : D3D11_VIDEO_PROCESSOR_COLOR_SPACE*) : Void
    @lpVtbl.value.video_processor_get_output_color_space.call(this, pvideoprocessor, pcolorspace)
  end
  def video_processor_get_output_alpha_fill_mode(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, palphafillmode : D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE*, pstreamindex : UInt32*) : Void
    @lpVtbl.value.video_processor_get_output_alpha_fill_mode.call(this, pvideoprocessor, palphafillmode, pstreamindex)
  end
  def video_processor_get_output_constriction(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, penabled : LibC::BOOL*, psize : SIZE*) : Void
    @lpVtbl.value.video_processor_get_output_constriction.call(this, pvideoprocessor, penabled, psize)
  end
  def video_processor_get_output_stereo_mode(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, penabled : LibC::BOOL*) : Void
    @lpVtbl.value.video_processor_get_output_stereo_mode.call(this, pvideoprocessor, penabled)
  end
  def video_processor_get_output_extension(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, pextensionguid : Guid*, datasize : UInt32, pdata : Void*) : Int32
    @lpVtbl.value.video_processor_get_output_extension.call(this, pvideoprocessor, pextensionguid, datasize, pdata)
  end
  def video_processor_set_stream_frame_format(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, frameformat : D3D11_VIDEO_FRAME_FORMAT) : Void
    @lpVtbl.value.video_processor_set_stream_frame_format.call(this, pvideoprocessor, streamindex, frameformat)
  end
  def video_processor_set_stream_color_space(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, pcolorspace : D3D11_VIDEO_PROCESSOR_COLOR_SPACE*) : Void
    @lpVtbl.value.video_processor_set_stream_color_space.call(this, pvideoprocessor, streamindex, pcolorspace)
  end
  def video_processor_set_stream_output_rate(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, outputrate : D3D11_VIDEO_PROCESSOR_OUTPUT_RATE, repeatframe : LibC::BOOL, pcustomrate : DXGI_RATIONAL*) : Void
    @lpVtbl.value.video_processor_set_stream_output_rate.call(this, pvideoprocessor, streamindex, outputrate, repeatframe, pcustomrate)
  end
  def video_processor_set_stream_source_rect(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, prect : RECT*) : Void
    @lpVtbl.value.video_processor_set_stream_source_rect.call(this, pvideoprocessor, streamindex, enable, prect)
  end
  def video_processor_set_stream_dest_rect(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, prect : RECT*) : Void
    @lpVtbl.value.video_processor_set_stream_dest_rect.call(this, pvideoprocessor, streamindex, enable, prect)
  end
  def video_processor_set_stream_alpha(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, alpha : Float32) : Void
    @lpVtbl.value.video_processor_set_stream_alpha.call(this, pvideoprocessor, streamindex, enable, alpha)
  end
  def video_processor_set_stream_palette(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, count : UInt32, pentries : UInt32*) : Void
    @lpVtbl.value.video_processor_set_stream_palette.call(this, pvideoprocessor, streamindex, count, pentries)
  end
  def video_processor_set_stream_pixel_aspect_ratio(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, psourceaspectratio : DXGI_RATIONAL*, pdestinationaspectratio : DXGI_RATIONAL*) : Void
    @lpVtbl.value.video_processor_set_stream_pixel_aspect_ratio.call(this, pvideoprocessor, streamindex, enable, psourceaspectratio, pdestinationaspectratio)
  end
  def video_processor_set_stream_luma_key(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, lower : Float32, upper : Float32) : Void
    @lpVtbl.value.video_processor_set_stream_luma_key.call(this, pvideoprocessor, streamindex, enable, lower, upper)
  end
  def video_processor_set_stream_stereo_format(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, format : D3D11_VIDEO_PROCESSOR_STEREO_FORMAT, leftviewframe0 : LibC::BOOL, baseviewframe0 : LibC::BOOL, flipmode : D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE, monooffset : Int32) : Void
    @lpVtbl.value.video_processor_set_stream_stereo_format.call(this, pvideoprocessor, streamindex, enable, format, leftviewframe0, baseviewframe0, flipmode, monooffset)
  end
  def video_processor_set_stream_auto_processing_mode(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL) : Void
    @lpVtbl.value.video_processor_set_stream_auto_processing_mode.call(this, pvideoprocessor, streamindex, enable)
  end
  def video_processor_set_stream_filter(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, filter : D3D11_VIDEO_PROCESSOR_FILTER, enable : LibC::BOOL, level : Int32) : Void
    @lpVtbl.value.video_processor_set_stream_filter.call(this, pvideoprocessor, streamindex, filter, enable, level)
  end
  def video_processor_set_stream_extension(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, pextensionguid : Guid*, datasize : UInt32, pdata : Void*) : Int32
    @lpVtbl.value.video_processor_set_stream_extension.call(this, pvideoprocessor, streamindex, pextensionguid, datasize, pdata)
  end
  def video_processor_get_stream_frame_format(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, pframeformat : D3D11_VIDEO_FRAME_FORMAT*) : Void
    @lpVtbl.value.video_processor_get_stream_frame_format.call(this, pvideoprocessor, streamindex, pframeformat)
  end
  def video_processor_get_stream_color_space(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, pcolorspace : D3D11_VIDEO_PROCESSOR_COLOR_SPACE*) : Void
    @lpVtbl.value.video_processor_get_stream_color_space.call(this, pvideoprocessor, streamindex, pcolorspace)
  end
  def video_processor_get_stream_output_rate(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, poutputrate : D3D11_VIDEO_PROCESSOR_OUTPUT_RATE*, prepeatframe : LibC::BOOL*, pcustomrate : DXGI_RATIONAL*) : Void
    @lpVtbl.value.video_processor_get_stream_output_rate.call(this, pvideoprocessor, streamindex, poutputrate, prepeatframe, pcustomrate)
  end
  def video_processor_get_stream_source_rect(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penabled : LibC::BOOL*, prect : RECT*) : Void
    @lpVtbl.value.video_processor_get_stream_source_rect.call(this, pvideoprocessor, streamindex, penabled, prect)
  end
  def video_processor_get_stream_dest_rect(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penabled : LibC::BOOL*, prect : RECT*) : Void
    @lpVtbl.value.video_processor_get_stream_dest_rect.call(this, pvideoprocessor, streamindex, penabled, prect)
  end
  def video_processor_get_stream_alpha(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penabled : LibC::BOOL*, palpha : Float32*) : Void
    @lpVtbl.value.video_processor_get_stream_alpha.call(this, pvideoprocessor, streamindex, penabled, palpha)
  end
  def video_processor_get_stream_palette(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, count : UInt32, pentries : UInt32*) : Void
    @lpVtbl.value.video_processor_get_stream_palette.call(this, pvideoprocessor, streamindex, count, pentries)
  end
  def video_processor_get_stream_pixel_aspect_ratio(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penabled : LibC::BOOL*, psourceaspectratio : DXGI_RATIONAL*, pdestinationaspectratio : DXGI_RATIONAL*) : Void
    @lpVtbl.value.video_processor_get_stream_pixel_aspect_ratio.call(this, pvideoprocessor, streamindex, penabled, psourceaspectratio, pdestinationaspectratio)
  end
  def video_processor_get_stream_luma_key(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penabled : LibC::BOOL*, plower : Float32*, pupper : Float32*) : Void
    @lpVtbl.value.video_processor_get_stream_luma_key.call(this, pvideoprocessor, streamindex, penabled, plower, pupper)
  end
  def video_processor_get_stream_stereo_format(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penable : LibC::BOOL*, pformat : D3D11_VIDEO_PROCESSOR_STEREO_FORMAT*, pleftviewframe0 : LibC::BOOL*, pbaseviewframe0 : LibC::BOOL*, pflipmode : D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE*, monooffset : Int32*) : Void
    @lpVtbl.value.video_processor_get_stream_stereo_format.call(this, pvideoprocessor, streamindex, penable, pformat, pleftviewframe0, pbaseviewframe0, pflipmode, monooffset)
  end
  def video_processor_get_stream_auto_processing_mode(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penabled : LibC::BOOL*) : Void
    @lpVtbl.value.video_processor_get_stream_auto_processing_mode.call(this, pvideoprocessor, streamindex, penabled)
  end
  def video_processor_get_stream_filter(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, filter : D3D11_VIDEO_PROCESSOR_FILTER, penabled : LibC::BOOL*, plevel : Int32*) : Void
    @lpVtbl.value.video_processor_get_stream_filter.call(this, pvideoprocessor, streamindex, filter, penabled, plevel)
  end
  def video_processor_get_stream_extension(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, pextensionguid : Guid*, datasize : UInt32, pdata : Void*) : Int32
    @lpVtbl.value.video_processor_get_stream_extension.call(this, pvideoprocessor, streamindex, pextensionguid, datasize, pdata)
  end
  def video_processor_blt(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, pview : ID3D11VideoProcessorOutputView, outputframe : UInt32, streamcount : UInt32, pstreams : D3D11_VIDEO_PROCESSOR_STREAM*) : HRESULT
    @lpVtbl.value.video_processor_blt.call(this, pvideoprocessor, pview, outputframe, streamcount, pstreams)
  end
  def negotiate_crypto_session_key_exchange(this : ID3D11VideoContext1*, pcryptosession : ID3D11CryptoSession, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.negotiate_crypto_session_key_exchange.call(this, pcryptosession, datasize, pdata)
  end
  def encryption_blt(this : ID3D11VideoContext1*, pcryptosession : ID3D11CryptoSession, psrcsurface : ID3D11Texture2D, pdstsurface : ID3D11Texture2D, ivsize : UInt32, piv : Void*) : Void
    @lpVtbl.value.encryption_blt.call(this, pcryptosession, psrcsurface, pdstsurface, ivsize, piv)
  end
  def decryption_blt(this : ID3D11VideoContext1*, pcryptosession : ID3D11CryptoSession, psrcsurface : ID3D11Texture2D, pdstsurface : ID3D11Texture2D, pencryptedblockinfo : D3D11_ENCRYPTED_BLOCK_INFO*, contentkeysize : UInt32, pcontentkey : Void*, ivsize : UInt32, piv : Void*) : Void
    @lpVtbl.value.decryption_blt.call(this, pcryptosession, psrcsurface, pdstsurface, pencryptedblockinfo, contentkeysize, pcontentkey, ivsize, piv)
  end
  def start_session_key_refresh(this : ID3D11VideoContext1*, pcryptosession : ID3D11CryptoSession, randomnumbersize : UInt32, prandomnumber : Void*) : Void
    @lpVtbl.value.start_session_key_refresh.call(this, pcryptosession, randomnumbersize, prandomnumber)
  end
  def finish_session_key_refresh(this : ID3D11VideoContext1*, pcryptosession : ID3D11CryptoSession) : Void
    @lpVtbl.value.finish_session_key_refresh.call(this, pcryptosession)
  end
  def get_encryption_blt_key(this : ID3D11VideoContext1*, pcryptosession : ID3D11CryptoSession, keysize : UInt32, preadbackkey : Void*) : HRESULT
    @lpVtbl.value.get_encryption_blt_key.call(this, pcryptosession, keysize, preadbackkey)
  end
  def negotiate_authenticated_channel_key_exchange(this : ID3D11VideoContext1*, pchannel : ID3D11AuthenticatedChannel, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.negotiate_authenticated_channel_key_exchange.call(this, pchannel, datasize, pdata)
  end
  def query_authenticated_channel(this : ID3D11VideoContext1*, pchannel : ID3D11AuthenticatedChannel, inputsize : UInt32, pinput : Void*, outputsize : UInt32, poutput : Void*) : HRESULT
    @lpVtbl.value.query_authenticated_channel.call(this, pchannel, inputsize, pinput, outputsize, poutput)
  end
  def configure_authenticated_channel(this : ID3D11VideoContext1*, pchannel : ID3D11AuthenticatedChannel, inputsize : UInt32, pinput : Void*, poutput : D3D11_AUTHENTICATED_CONFIGURE_OUTPUT*) : HRESULT
    @lpVtbl.value.configure_authenticated_channel.call(this, pchannel, inputsize, pinput, poutput)
  end
  def video_processor_set_stream_rotation(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, rotation : D3D11_VIDEO_PROCESSOR_ROTATION) : Void
    @lpVtbl.value.video_processor_set_stream_rotation.call(this, pvideoprocessor, streamindex, enable, rotation)
  end
  def video_processor_get_stream_rotation(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penable : LibC::BOOL*, protation : D3D11_VIDEO_PROCESSOR_ROTATION*) : Void
    @lpVtbl.value.video_processor_get_stream_rotation.call(this, pvideoprocessor, streamindex, penable, protation)
  end
  def submit_decoder_buffers1(this : ID3D11VideoContext1*, pdecoder : ID3D11VideoDecoder, numbuffers : UInt32, pbufferdesc : D3D11_VIDEO_DECODER_BUFFER_DESC1*) : HRESULT
    @lpVtbl.value.submit_decoder_buffers1.call(this, pdecoder, numbuffers, pbufferdesc)
  end
  def get_data_for_new_hardware_key(this : ID3D11VideoContext1*, pcryptosession : ID3D11CryptoSession, privateinputsize : UInt32, pprivatinputdata : Void*, pprivateoutputdata : UInt64*) : HRESULT
    @lpVtbl.value.get_data_for_new_hardware_key.call(this, pcryptosession, privateinputsize, pprivatinputdata, pprivateoutputdata)
  end
  def check_crypto_session_status(this : ID3D11VideoContext1*, pcryptosession : ID3D11CryptoSession, pstatus : D3D11_CRYPTO_SESSION_STATUS*) : HRESULT
    @lpVtbl.value.check_crypto_session_status.call(this, pcryptosession, pstatus)
  end
  def decoder_enable_downsampling(this : ID3D11VideoContext1*, pdecoder : ID3D11VideoDecoder, inputcolorspace : DXGI_COLOR_SPACE_TYPE, poutputdesc : D3D11_VIDEO_SAMPLE_DESC*, referenceframecount : UInt32) : HRESULT
    @lpVtbl.value.decoder_enable_downsampling.call(this, pdecoder, inputcolorspace, poutputdesc, referenceframecount)
  end
  def decoder_update_downsampling(this : ID3D11VideoContext1*, pdecoder : ID3D11VideoDecoder, poutputdesc : D3D11_VIDEO_SAMPLE_DESC*) : HRESULT
    @lpVtbl.value.decoder_update_downsampling.call(this, pdecoder, poutputdesc)
  end
  def video_processor_set_output_color_space1(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, colorspace : DXGI_COLOR_SPACE_TYPE) : Void
    @lpVtbl.value.video_processor_set_output_color_space1.call(this, pvideoprocessor, colorspace)
  end
  def video_processor_set_output_shader_usage(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, shaderusage : LibC::BOOL) : Void
    @lpVtbl.value.video_processor_set_output_shader_usage.call(this, pvideoprocessor, shaderusage)
  end
  def video_processor_get_output_color_space1(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, pcolorspace : DXGI_COLOR_SPACE_TYPE*) : Void
    @lpVtbl.value.video_processor_get_output_color_space1.call(this, pvideoprocessor, pcolorspace)
  end
  def video_processor_get_output_shader_usage(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, pshaderusage : LibC::BOOL*) : Void
    @lpVtbl.value.video_processor_get_output_shader_usage.call(this, pvideoprocessor, pshaderusage)
  end
  def video_processor_set_stream_color_space1(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, colorspace : DXGI_COLOR_SPACE_TYPE) : Void
    @lpVtbl.value.video_processor_set_stream_color_space1.call(this, pvideoprocessor, streamindex, colorspace)
  end
  def video_processor_set_stream_mirror(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, fliphorizontal : LibC::BOOL, flipvertical : LibC::BOOL) : Void
    @lpVtbl.value.video_processor_set_stream_mirror.call(this, pvideoprocessor, streamindex, enable, fliphorizontal, flipvertical)
  end
  def video_processor_get_stream_color_space1(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, pcolorspace : DXGI_COLOR_SPACE_TYPE*) : Void
    @lpVtbl.value.video_processor_get_stream_color_space1.call(this, pvideoprocessor, streamindex, pcolorspace)
  end
  def video_processor_get_stream_mirror(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penable : LibC::BOOL*, pfliphorizontal : LibC::BOOL*, pflipvertical : LibC::BOOL*) : Void
    @lpVtbl.value.video_processor_get_stream_mirror.call(this, pvideoprocessor, streamindex, penable, pfliphorizontal, pflipvertical)
  end
  def video_processor_get_behavior_hints(this : ID3D11VideoContext1*, pvideoprocessor : ID3D11VideoProcessor, outputwidth : UInt32, outputheight : UInt32, outputformat : DXGI_FORMAT, streamcount : UInt32, pstreams : D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT*, pbehaviorhints : UInt32*) : HRESULT
    @lpVtbl.value.video_processor_get_behavior_hints.call(this, pvideoprocessor, outputwidth, outputheight, outputformat, streamcount, pstreams, pbehaviorhints)
  end
end
struct LibWin32::ID3D11VideoDevice1
  def query_interface(this : ID3D11VideoDevice1*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11VideoDevice1*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11VideoDevice1*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_video_decoder(this : ID3D11VideoDevice1*, pvideodesc : D3D11_VIDEO_DECODER_DESC*, pconfig : D3D11_VIDEO_DECODER_CONFIG*, ppdecoder : ID3D11VideoDecoder*) : HRESULT
    @lpVtbl.value.create_video_decoder.call(this, pvideodesc, pconfig, ppdecoder)
  end
  def create_video_processor(this : ID3D11VideoDevice1*, penum : ID3D11VideoProcessorEnumerator, rateconversionindex : UInt32, ppvideoprocessor : ID3D11VideoProcessor*) : HRESULT
    @lpVtbl.value.create_video_processor.call(this, penum, rateconversionindex, ppvideoprocessor)
  end
  def create_authenticated_channel(this : ID3D11VideoDevice1*, channeltype : D3D11_AUTHENTICATED_CHANNEL_TYPE, ppauthenticatedchannel : ID3D11AuthenticatedChannel*) : HRESULT
    @lpVtbl.value.create_authenticated_channel.call(this, channeltype, ppauthenticatedchannel)
  end
  def create_crypto_session(this : ID3D11VideoDevice1*, pcryptotype : Guid*, pdecoderprofile : Guid*, pkeyexchangetype : Guid*, ppcryptosession : ID3D11CryptoSession*) : HRESULT
    @lpVtbl.value.create_crypto_session.call(this, pcryptotype, pdecoderprofile, pkeyexchangetype, ppcryptosession)
  end
  def create_video_decoder_output_view(this : ID3D11VideoDevice1*, presource : ID3D11Resource, pdesc : D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC*, ppvdovview : ID3D11VideoDecoderOutputView*) : HRESULT
    @lpVtbl.value.create_video_decoder_output_view.call(this, presource, pdesc, ppvdovview)
  end
  def create_video_processor_input_view(this : ID3D11VideoDevice1*, presource : ID3D11Resource, penum : ID3D11VideoProcessorEnumerator, pdesc : D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*, ppvpiview : ID3D11VideoProcessorInputView*) : HRESULT
    @lpVtbl.value.create_video_processor_input_view.call(this, presource, penum, pdesc, ppvpiview)
  end
  def create_video_processor_output_view(this : ID3D11VideoDevice1*, presource : ID3D11Resource, penum : ID3D11VideoProcessorEnumerator, pdesc : D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*, ppvpoview : ID3D11VideoProcessorOutputView*) : HRESULT
    @lpVtbl.value.create_video_processor_output_view.call(this, presource, penum, pdesc, ppvpoview)
  end
  def create_video_processor_enumerator(this : ID3D11VideoDevice1*, pdesc : D3D11_VIDEO_PROCESSOR_CONTENT_DESC*, ppenum : ID3D11VideoProcessorEnumerator*) : HRESULT
    @lpVtbl.value.create_video_processor_enumerator.call(this, pdesc, ppenum)
  end
  def get_video_decoder_profile_count(this : ID3D11VideoDevice1*) : UInt32
    @lpVtbl.value.get_video_decoder_profile_count.call(this)
  end
  def get_video_decoder_profile(this : ID3D11VideoDevice1*, index : UInt32, pdecoderprofile : Guid*) : HRESULT
    @lpVtbl.value.get_video_decoder_profile.call(this, index, pdecoderprofile)
  end
  def check_video_decoder_format(this : ID3D11VideoDevice1*, pdecoderprofile : Guid*, format : DXGI_FORMAT, psupported : LibC::BOOL*) : HRESULT
    @lpVtbl.value.check_video_decoder_format.call(this, pdecoderprofile, format, psupported)
  end
  def get_video_decoder_config_count(this : ID3D11VideoDevice1*, pdesc : D3D11_VIDEO_DECODER_DESC*, pcount : UInt32*) : HRESULT
    @lpVtbl.value.get_video_decoder_config_count.call(this, pdesc, pcount)
  end
  def get_video_decoder_config(this : ID3D11VideoDevice1*, pdesc : D3D11_VIDEO_DECODER_DESC*, index : UInt32, pconfig : D3D11_VIDEO_DECODER_CONFIG*) : HRESULT
    @lpVtbl.value.get_video_decoder_config.call(this, pdesc, index, pconfig)
  end
  def get_content_protection_caps(this : ID3D11VideoDevice1*, pcryptotype : Guid*, pdecoderprofile : Guid*, pcaps : D3D11_VIDEO_CONTENT_PROTECTION_CAPS*) : HRESULT
    @lpVtbl.value.get_content_protection_caps.call(this, pcryptotype, pdecoderprofile, pcaps)
  end
  def check_crypto_key_exchange(this : ID3D11VideoDevice1*, pcryptotype : Guid*, pdecoderprofile : Guid*, index : UInt32, pkeyexchangetype : Guid*) : HRESULT
    @lpVtbl.value.check_crypto_key_exchange.call(this, pcryptotype, pdecoderprofile, index, pkeyexchangetype)
  end
  def set_private_data(this : ID3D11VideoDevice1*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11VideoDevice1*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_crypto_session_private_data_size(this : ID3D11VideoDevice1*, pcryptotype : Guid*, pdecoderprofile : Guid*, pkeyexchangetype : Guid*, pprivateinputsize : UInt32*, pprivateoutputsize : UInt32*) : HRESULT
    @lpVtbl.value.get_crypto_session_private_data_size.call(this, pcryptotype, pdecoderprofile, pkeyexchangetype, pprivateinputsize, pprivateoutputsize)
  end
  def get_video_decoder_caps(this : ID3D11VideoDevice1*, pdecoderprofile : Guid*, samplewidth : UInt32, sampleheight : UInt32, pframerate : DXGI_RATIONAL*, bitrate : UInt32, pcryptotype : Guid*, pdecodercaps : UInt32*) : HRESULT
    @lpVtbl.value.get_video_decoder_caps.call(this, pdecoderprofile, samplewidth, sampleheight, pframerate, bitrate, pcryptotype, pdecodercaps)
  end
  def check_video_decoder_downsampling(this : ID3D11VideoDevice1*, pinputdesc : D3D11_VIDEO_DECODER_DESC*, inputcolorspace : DXGI_COLOR_SPACE_TYPE, pinputconfig : D3D11_VIDEO_DECODER_CONFIG*, pframerate : DXGI_RATIONAL*, poutputdesc : D3D11_VIDEO_SAMPLE_DESC*, psupported : LibC::BOOL*, prealtimehint : LibC::BOOL*) : HRESULT
    @lpVtbl.value.check_video_decoder_downsampling.call(this, pinputdesc, inputcolorspace, pinputconfig, pframerate, poutputdesc, psupported, prealtimehint)
  end
  def recommend_video_decoder_downsample_parameters(this : ID3D11VideoDevice1*, pinputdesc : D3D11_VIDEO_DECODER_DESC*, inputcolorspace : DXGI_COLOR_SPACE_TYPE, pinputconfig : D3D11_VIDEO_DECODER_CONFIG*, pframerate : DXGI_RATIONAL*, precommendedoutputdesc : D3D11_VIDEO_SAMPLE_DESC*) : HRESULT
    @lpVtbl.value.recommend_video_decoder_downsample_parameters.call(this, pinputdesc, inputcolorspace, pinputconfig, pframerate, precommendedoutputdesc)
  end
end
struct LibWin32::ID3D11VideoProcessorEnumerator1
  def query_interface(this : ID3D11VideoProcessorEnumerator1*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11VideoProcessorEnumerator1*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11VideoProcessorEnumerator1*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11VideoProcessorEnumerator1*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11VideoProcessorEnumerator1*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11VideoProcessorEnumerator1*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11VideoProcessorEnumerator1*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_video_processor_content_desc(this : ID3D11VideoProcessorEnumerator1*, pcontentdesc : D3D11_VIDEO_PROCESSOR_CONTENT_DESC*) : HRESULT
    @lpVtbl.value.get_video_processor_content_desc.call(this, pcontentdesc)
  end
  def check_video_processor_format(this : ID3D11VideoProcessorEnumerator1*, format : DXGI_FORMAT, pflags : UInt32*) : HRESULT
    @lpVtbl.value.check_video_processor_format.call(this, format, pflags)
  end
  def get_video_processor_caps(this : ID3D11VideoProcessorEnumerator1*, pcaps : D3D11_VIDEO_PROCESSOR_CAPS*) : HRESULT
    @lpVtbl.value.get_video_processor_caps.call(this, pcaps)
  end
  def get_video_processor_rate_conversion_caps(this : ID3D11VideoProcessorEnumerator1*, typeindex : UInt32, pcaps : D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS*) : HRESULT
    @lpVtbl.value.get_video_processor_rate_conversion_caps.call(this, typeindex, pcaps)
  end
  def get_video_processor_custom_rate(this : ID3D11VideoProcessorEnumerator1*, typeindex : UInt32, customrateindex : UInt32, prate : D3D11_VIDEO_PROCESSOR_CUSTOM_RATE*) : HRESULT
    @lpVtbl.value.get_video_processor_custom_rate.call(this, typeindex, customrateindex, prate)
  end
  def get_video_processor_filter_range(this : ID3D11VideoProcessorEnumerator1*, filter : D3D11_VIDEO_PROCESSOR_FILTER, prange : D3D11_VIDEO_PROCESSOR_FILTER_RANGE*) : HRESULT
    @lpVtbl.value.get_video_processor_filter_range.call(this, filter, prange)
  end
  def check_video_processor_format_conversion(this : ID3D11VideoProcessorEnumerator1*, inputformat : DXGI_FORMAT, inputcolorspace : DXGI_COLOR_SPACE_TYPE, outputformat : DXGI_FORMAT, outputcolorspace : DXGI_COLOR_SPACE_TYPE, psupported : LibC::BOOL*) : HRESULT
    @lpVtbl.value.check_video_processor_format_conversion.call(this, inputformat, inputcolorspace, outputformat, outputcolorspace, psupported)
  end
end
struct LibWin32::ID3D11Device1
  def query_interface(this : ID3D11Device1*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11Device1*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11Device1*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_buffer(this : ID3D11Device1*, pdesc : D3D11_BUFFER_DESC*, pinitialdata : D3D11_SUBRESOURCE_DATA*, ppbuffer : ID3D11Buffer*) : HRESULT
    @lpVtbl.value.create_buffer.call(this, pdesc, pinitialdata, ppbuffer)
  end
  def create_texture1_d(this : ID3D11Device1*, pdesc : D3D11_TEXTURE1D_DESC*, pinitialdata : D3D11_SUBRESOURCE_DATA*, pptexture1d : ID3D11Texture1D*) : HRESULT
    @lpVtbl.value.create_texture1_d.call(this, pdesc, pinitialdata, pptexture1d)
  end
  def create_texture2_d(this : ID3D11Device1*, pdesc : D3D11_TEXTURE2D_DESC*, pinitialdata : D3D11_SUBRESOURCE_DATA*, pptexture2d : ID3D11Texture2D*) : HRESULT
    @lpVtbl.value.create_texture2_d.call(this, pdesc, pinitialdata, pptexture2d)
  end
  def create_texture3_d(this : ID3D11Device1*, pdesc : D3D11_TEXTURE3D_DESC*, pinitialdata : D3D11_SUBRESOURCE_DATA*, pptexture3d : ID3D11Texture3D*) : HRESULT
    @lpVtbl.value.create_texture3_d.call(this, pdesc, pinitialdata, pptexture3d)
  end
  def create_shader_resource_view(this : ID3D11Device1*, presource : ID3D11Resource, pdesc : D3D11_SHADER_RESOURCE_VIEW_DESC*, ppsrview : ID3D11ShaderResourceView*) : HRESULT
    @lpVtbl.value.create_shader_resource_view.call(this, presource, pdesc, ppsrview)
  end
  def create_unordered_access_view(this : ID3D11Device1*, presource : ID3D11Resource, pdesc : D3D11_UNORDERED_ACCESS_VIEW_DESC*, ppuaview : ID3D11UnorderedAccessView*) : HRESULT
    @lpVtbl.value.create_unordered_access_view.call(this, presource, pdesc, ppuaview)
  end
  def create_render_target_view(this : ID3D11Device1*, presource : ID3D11Resource, pdesc : D3D11_RENDER_TARGET_VIEW_DESC*, pprtview : ID3D11RenderTargetView*) : HRESULT
    @lpVtbl.value.create_render_target_view.call(this, presource, pdesc, pprtview)
  end
  def create_depth_stencil_view(this : ID3D11Device1*, presource : ID3D11Resource, pdesc : D3D11_DEPTH_STENCIL_VIEW_DESC*, ppdepthstencilview : ID3D11DepthStencilView*) : HRESULT
    @lpVtbl.value.create_depth_stencil_view.call(this, presource, pdesc, ppdepthstencilview)
  end
  def create_input_layout(this : ID3D11Device1*, pinputelementdescs : D3D11_INPUT_ELEMENT_DESC*, numelements : UInt32, pshaderbytecodewithinputsignature : Void*, bytecodelength : LibC::UINT_PTR, ppinputlayout : ID3D11InputLayout*) : HRESULT
    @lpVtbl.value.create_input_layout.call(this, pinputelementdescs, numelements, pshaderbytecodewithinputsignature, bytecodelength, ppinputlayout)
  end
  def create_vertex_shader(this : ID3D11Device1*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, ppvertexshader : ID3D11VertexShader*) : HRESULT
    @lpVtbl.value.create_vertex_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, ppvertexshader)
  end
  def create_geometry_shader(this : ID3D11Device1*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, ppgeometryshader : ID3D11GeometryShader*) : HRESULT
    @lpVtbl.value.create_geometry_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, ppgeometryshader)
  end
  def create_geometry_shader_with_stream_output(this : ID3D11Device1*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, psodeclaration : D3D11_SO_DECLARATION_ENTRY*, numentries : UInt32, pbufferstrides : UInt32*, numstrides : UInt32, rasterizedstream : UInt32, pclasslinkage : ID3D11ClassLinkage, ppgeometryshader : ID3D11GeometryShader*) : HRESULT
    @lpVtbl.value.create_geometry_shader_with_stream_output.call(this, pshaderbytecode, bytecodelength, psodeclaration, numentries, pbufferstrides, numstrides, rasterizedstream, pclasslinkage, ppgeometryshader)
  end
  def create_pixel_shader(this : ID3D11Device1*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, pppixelshader : ID3D11PixelShader*) : HRESULT
    @lpVtbl.value.create_pixel_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, pppixelshader)
  end
  def create_hull_shader(this : ID3D11Device1*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, pphullshader : ID3D11HullShader*) : HRESULT
    @lpVtbl.value.create_hull_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, pphullshader)
  end
  def create_domain_shader(this : ID3D11Device1*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, ppdomainshader : ID3D11DomainShader*) : HRESULT
    @lpVtbl.value.create_domain_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, ppdomainshader)
  end
  def create_compute_shader(this : ID3D11Device1*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, ppcomputeshader : ID3D11ComputeShader*) : HRESULT
    @lpVtbl.value.create_compute_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, ppcomputeshader)
  end
  def create_class_linkage(this : ID3D11Device1*, pplinkage : ID3D11ClassLinkage*) : HRESULT
    @lpVtbl.value.create_class_linkage.call(this, pplinkage)
  end
  def create_blend_state(this : ID3D11Device1*, pblendstatedesc : D3D11_BLEND_DESC*, ppblendstate : ID3D11BlendState*) : HRESULT
    @lpVtbl.value.create_blend_state.call(this, pblendstatedesc, ppblendstate)
  end
  def create_depth_stencil_state(this : ID3D11Device1*, pdepthstencildesc : D3D11_DEPTH_STENCIL_DESC*, ppdepthstencilstate : ID3D11DepthStencilState*) : HRESULT
    @lpVtbl.value.create_depth_stencil_state.call(this, pdepthstencildesc, ppdepthstencilstate)
  end
  def create_rasterizer_state(this : ID3D11Device1*, prasterizerdesc : D3D11_RASTERIZER_DESC*, pprasterizerstate : ID3D11RasterizerState*) : HRESULT
    @lpVtbl.value.create_rasterizer_state.call(this, prasterizerdesc, pprasterizerstate)
  end
  def create_sampler_state(this : ID3D11Device1*, psamplerdesc : D3D11_SAMPLER_DESC*, ppsamplerstate : ID3D11SamplerState*) : HRESULT
    @lpVtbl.value.create_sampler_state.call(this, psamplerdesc, ppsamplerstate)
  end
  def create_query(this : ID3D11Device1*, pquerydesc : D3D11_QUERY_DESC*, ppquery : ID3D11Query*) : HRESULT
    @lpVtbl.value.create_query.call(this, pquerydesc, ppquery)
  end
  def create_predicate(this : ID3D11Device1*, ppredicatedesc : D3D11_QUERY_DESC*, pppredicate : ID3D11Predicate*) : HRESULT
    @lpVtbl.value.create_predicate.call(this, ppredicatedesc, pppredicate)
  end
  def create_counter(this : ID3D11Device1*, pcounterdesc : D3D11_COUNTER_DESC*, ppcounter : ID3D11Counter*) : HRESULT
    @lpVtbl.value.create_counter.call(this, pcounterdesc, ppcounter)
  end
  def create_deferred_context(this : ID3D11Device1*, contextflags : UInt32, ppdeferredcontext : ID3D11DeviceContext*) : HRESULT
    @lpVtbl.value.create_deferred_context.call(this, contextflags, ppdeferredcontext)
  end
  def open_shared_resource(this : ID3D11Device1*, hresource : LibC::HANDLE, returnedinterface : Guid*, ppresource : Void**) : HRESULT
    @lpVtbl.value.open_shared_resource.call(this, hresource, returnedinterface, ppresource)
  end
  def check_format_support(this : ID3D11Device1*, format : DXGI_FORMAT, pformatsupport : UInt32*) : HRESULT
    @lpVtbl.value.check_format_support.call(this, format, pformatsupport)
  end
  def check_multisample_quality_levels(this : ID3D11Device1*, format : DXGI_FORMAT, samplecount : UInt32, pnumqualitylevels : UInt32*) : HRESULT
    @lpVtbl.value.check_multisample_quality_levels.call(this, format, samplecount, pnumqualitylevels)
  end
  def check_counter_info(this : ID3D11Device1*, pcounterinfo : D3D11_COUNTER_INFO*) : Void
    @lpVtbl.value.check_counter_info.call(this, pcounterinfo)
  end
  def check_counter(this : ID3D11Device1*, pdesc : D3D11_COUNTER_DESC*, ptype : D3D11_COUNTER_TYPE*, pactivecounters : UInt32*, szname : UInt8*, pnamelength : UInt32*, szunits : UInt8*, punitslength : UInt32*, szdescription : UInt8*, pdescriptionlength : UInt32*) : HRESULT
    @lpVtbl.value.check_counter.call(this, pdesc, ptype, pactivecounters, szname, pnamelength, szunits, punitslength, szdescription, pdescriptionlength)
  end
  def check_feature_support(this : ID3D11Device1*, feature : D3D11_FEATURE, pfeaturesupportdata : Void*, featuresupportdatasize : UInt32) : HRESULT
    @lpVtbl.value.check_feature_support.call(this, feature, pfeaturesupportdata, featuresupportdatasize)
  end
  def get_private_data(this : ID3D11Device1*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11Device1*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11Device1*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_feature_level(this : ID3D11Device1*) : D3D_FEATURE_LEVEL
    @lpVtbl.value.get_feature_level.call(this)
  end
  def get_creation_flags(this : ID3D11Device1*) : UInt32
    @lpVtbl.value.get_creation_flags.call(this)
  end
  def get_device_removed_reason(this : ID3D11Device1*) : HRESULT
    @lpVtbl.value.get_device_removed_reason.call(this)
  end
  def get_immediate_context(this : ID3D11Device1*, ppimmediatecontext : ID3D11DeviceContext*) : Void
    @lpVtbl.value.get_immediate_context.call(this, ppimmediatecontext)
  end
  def set_exception_mode(this : ID3D11Device1*, raiseflags : UInt32) : HRESULT
    @lpVtbl.value.set_exception_mode.call(this, raiseflags)
  end
  def get_exception_mode(this : ID3D11Device1*) : UInt32
    @lpVtbl.value.get_exception_mode.call(this)
  end
  def get_immediate_context1(this : ID3D11Device1*, ppimmediatecontext : ID3D11DeviceContext1*) : Void
    @lpVtbl.value.get_immediate_context1.call(this, ppimmediatecontext)
  end
  def create_deferred_context1(this : ID3D11Device1*, contextflags : UInt32, ppdeferredcontext : ID3D11DeviceContext1*) : HRESULT
    @lpVtbl.value.create_deferred_context1.call(this, contextflags, ppdeferredcontext)
  end
  def create_blend_state1(this : ID3D11Device1*, pblendstatedesc : D3D11_BLEND_DESC1*, ppblendstate : ID3D11BlendState1*) : HRESULT
    @lpVtbl.value.create_blend_state1.call(this, pblendstatedesc, ppblendstate)
  end
  def create_rasterizer_state1(this : ID3D11Device1*, prasterizerdesc : D3D11_RASTERIZER_DESC1*, pprasterizerstate : ID3D11RasterizerState1*) : HRESULT
    @lpVtbl.value.create_rasterizer_state1.call(this, prasterizerdesc, pprasterizerstate)
  end
  def create_device_context_state(this : ID3D11Device1*, flags : UInt32, pfeaturelevels : D3D_FEATURE_LEVEL*, featurelevels : UInt32, sdkversion : UInt32, emulatedinterface : Guid*, pchosenfeaturelevel : D3D_FEATURE_LEVEL*, ppcontextstate : ID3DDeviceContextState*) : HRESULT
    @lpVtbl.value.create_device_context_state.call(this, flags, pfeaturelevels, featurelevels, sdkversion, emulatedinterface, pchosenfeaturelevel, ppcontextstate)
  end
  def open_shared_resource1(this : ID3D11Device1*, hresource : LibC::HANDLE, returnedinterface : Guid*, ppresource : Void**) : HRESULT
    @lpVtbl.value.open_shared_resource1.call(this, hresource, returnedinterface, ppresource)
  end
  def open_shared_resource_by_name(this : ID3D11Device1*, lpname : LibC::LPWSTR, dwdesiredaccess : UInt32, returnedinterface : Guid*, ppresource : Void**) : HRESULT
    @lpVtbl.value.open_shared_resource_by_name.call(this, lpname, dwdesiredaccess, returnedinterface, ppresource)
  end
end
struct LibWin32::ID3DUserDefinedAnnotation
  def query_interface(this : ID3DUserDefinedAnnotation*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3DUserDefinedAnnotation*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3DUserDefinedAnnotation*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def begin_event(this : ID3DUserDefinedAnnotation*, name : LibC::LPWSTR) : Int32
    @lpVtbl.value.begin_event.call(this, name)
  end
  def end_event(this : ID3DUserDefinedAnnotation*) : Int32
    @lpVtbl.value.end_event.call(this)
  end
  def set_marker(this : ID3DUserDefinedAnnotation*, name : LibC::LPWSTR) : Void
    @lpVtbl.value.set_marker.call(this, name)
  end
  def get_status(this : ID3DUserDefinedAnnotation*) : LibC::BOOL
    @lpVtbl.value.get_status.call(this)
  end
end
struct LibWin32::ID3D11DeviceContext2
  def query_interface(this : ID3D11DeviceContext2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11DeviceContext2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11DeviceContext2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11DeviceContext2*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11DeviceContext2*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11DeviceContext2*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11DeviceContext2*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def vs_set_constant_buffers(this : ID3D11DeviceContext2*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.vs_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ps_set_shader_resources(this : ID3D11DeviceContext2*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.ps_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def ps_set_shader(this : ID3D11DeviceContext2*, ppixelshader : ID3D11PixelShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.ps_set_shader.call(this, ppixelshader, ppclassinstances, numclassinstances)
  end
  def ps_set_samplers(this : ID3D11DeviceContext2*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.ps_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def vs_set_shader(this : ID3D11DeviceContext2*, pvertexshader : ID3D11VertexShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.vs_set_shader.call(this, pvertexshader, ppclassinstances, numclassinstances)
  end
  def draw_indexed(this : ID3D11DeviceContext2*, indexcount : UInt32, startindexlocation : UInt32, basevertexlocation : Int32) : Void
    @lpVtbl.value.draw_indexed.call(this, indexcount, startindexlocation, basevertexlocation)
  end
  def draw(this : ID3D11DeviceContext2*, vertexcount : UInt32, startvertexlocation : UInt32) : Void
    @lpVtbl.value.draw.call(this, vertexcount, startvertexlocation)
  end
  def map(this : ID3D11DeviceContext2*, presource : ID3D11Resource, subresource : UInt32, maptype : D3D11_MAP, mapflags : UInt32, pmappedresource : D3D11_MAPPED_SUBRESOURCE*) : HRESULT
    @lpVtbl.value.map.call(this, presource, subresource, maptype, mapflags, pmappedresource)
  end
  def unmap(this : ID3D11DeviceContext2*, presource : ID3D11Resource, subresource : UInt32) : Void
    @lpVtbl.value.unmap.call(this, presource, subresource)
  end
  def ps_set_constant_buffers(this : ID3D11DeviceContext2*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.ps_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ia_set_input_layout(this : ID3D11DeviceContext2*, pinputlayout : ID3D11InputLayout) : Void
    @lpVtbl.value.ia_set_input_layout.call(this, pinputlayout)
  end
  def ia_set_vertex_buffers(this : ID3D11DeviceContext2*, startslot : UInt32, numbuffers : UInt32, ppvertexbuffers : ID3D11Buffer*, pstrides : UInt32*, poffsets : UInt32*) : Void
    @lpVtbl.value.ia_set_vertex_buffers.call(this, startslot, numbuffers, ppvertexbuffers, pstrides, poffsets)
  end
  def ia_set_index_buffer(this : ID3D11DeviceContext2*, pindexbuffer : ID3D11Buffer, format : DXGI_FORMAT, offset : UInt32) : Void
    @lpVtbl.value.ia_set_index_buffer.call(this, pindexbuffer, format, offset)
  end
  def draw_indexed_instanced(this : ID3D11DeviceContext2*, indexcountperinstance : UInt32, instancecount : UInt32, startindexlocation : UInt32, basevertexlocation : Int32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_indexed_instanced.call(this, indexcountperinstance, instancecount, startindexlocation, basevertexlocation, startinstancelocation)
  end
  def draw_instanced(this : ID3D11DeviceContext2*, vertexcountperinstance : UInt32, instancecount : UInt32, startvertexlocation : UInt32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_instanced.call(this, vertexcountperinstance, instancecount, startvertexlocation, startinstancelocation)
  end
  def gs_set_constant_buffers(this : ID3D11DeviceContext2*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.gs_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def gs_set_shader(this : ID3D11DeviceContext2*, pshader : ID3D11GeometryShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.gs_set_shader.call(this, pshader, ppclassinstances, numclassinstances)
  end
  def ia_set_primitive_topology(this : ID3D11DeviceContext2*, topology : D3D_PRIMITIVE_TOPOLOGY) : Void
    @lpVtbl.value.ia_set_primitive_topology.call(this, topology)
  end
  def vs_set_shader_resources(this : ID3D11DeviceContext2*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.vs_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def vs_set_samplers(this : ID3D11DeviceContext2*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.vs_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def begin_(this : ID3D11DeviceContext2*, pasync : ID3D11Asynchronous) : Void
    @lpVtbl.value.begin_.call(this, pasync)
  end
  def end_(this : ID3D11DeviceContext2*, pasync : ID3D11Asynchronous) : Void
    @lpVtbl.value.end_.call(this, pasync)
  end
  def get_data(this : ID3D11DeviceContext2*, pasync : ID3D11Asynchronous, pdata : Void*, datasize : UInt32, getdataflags : UInt32) : HRESULT
    @lpVtbl.value.get_data.call(this, pasync, pdata, datasize, getdataflags)
  end
  def set_predication(this : ID3D11DeviceContext2*, ppredicate : ID3D11Predicate, predicatevalue : LibC::BOOL) : Void
    @lpVtbl.value.set_predication.call(this, ppredicate, predicatevalue)
  end
  def gs_set_shader_resources(this : ID3D11DeviceContext2*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.gs_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def gs_set_samplers(this : ID3D11DeviceContext2*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.gs_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def om_set_render_targets(this : ID3D11DeviceContext2*, numviews : UInt32, pprendertargetviews : ID3D11RenderTargetView*, pdepthstencilview : ID3D11DepthStencilView) : Void
    @lpVtbl.value.om_set_render_targets.call(this, numviews, pprendertargetviews, pdepthstencilview)
  end
  def om_set_render_targets_and_unordered_access_views(this : ID3D11DeviceContext2*, numrtvs : UInt32, pprendertargetviews : ID3D11RenderTargetView*, pdepthstencilview : ID3D11DepthStencilView, uavstartslot : UInt32, numuavs : UInt32, ppunorderedaccessviews : ID3D11UnorderedAccessView*, puavinitialcounts : UInt32*) : Void
    @lpVtbl.value.om_set_render_targets_and_unordered_access_views.call(this, numrtvs, pprendertargetviews, pdepthstencilview, uavstartslot, numuavs, ppunorderedaccessviews, puavinitialcounts)
  end
  def om_set_blend_state(this : ID3D11DeviceContext2*, pblendstate : ID3D11BlendState, blendfactor : Float32*, samplemask : UInt32) : Void
    @lpVtbl.value.om_set_blend_state.call(this, pblendstate, blendfactor, samplemask)
  end
  def om_set_depth_stencil_state(this : ID3D11DeviceContext2*, pdepthstencilstate : ID3D11DepthStencilState, stencilref : UInt32) : Void
    @lpVtbl.value.om_set_depth_stencil_state.call(this, pdepthstencilstate, stencilref)
  end
  def so_set_targets(this : ID3D11DeviceContext2*, numbuffers : UInt32, ppsotargets : ID3D11Buffer*, poffsets : UInt32*) : Void
    @lpVtbl.value.so_set_targets.call(this, numbuffers, ppsotargets, poffsets)
  end
  def draw_auto(this : ID3D11DeviceContext2*) : Void
    @lpVtbl.value.draw_auto.call(this)
  end
  def draw_indexed_instanced_indirect(this : ID3D11DeviceContext2*, pbufferforargs : ID3D11Buffer, alignedbyteoffsetforargs : UInt32) : Void
    @lpVtbl.value.draw_indexed_instanced_indirect.call(this, pbufferforargs, alignedbyteoffsetforargs)
  end
  def draw_instanced_indirect(this : ID3D11DeviceContext2*, pbufferforargs : ID3D11Buffer, alignedbyteoffsetforargs : UInt32) : Void
    @lpVtbl.value.draw_instanced_indirect.call(this, pbufferforargs, alignedbyteoffsetforargs)
  end
  def dispatch(this : ID3D11DeviceContext2*, threadgroupcountx : UInt32, threadgroupcounty : UInt32, threadgroupcountz : UInt32) : Void
    @lpVtbl.value.dispatch.call(this, threadgroupcountx, threadgroupcounty, threadgroupcountz)
  end
  def dispatch_indirect(this : ID3D11DeviceContext2*, pbufferforargs : ID3D11Buffer, alignedbyteoffsetforargs : UInt32) : Void
    @lpVtbl.value.dispatch_indirect.call(this, pbufferforargs, alignedbyteoffsetforargs)
  end
  def rs_set_state(this : ID3D11DeviceContext2*, prasterizerstate : ID3D11RasterizerState) : Void
    @lpVtbl.value.rs_set_state.call(this, prasterizerstate)
  end
  def rs_set_viewports(this : ID3D11DeviceContext2*, numviewports : UInt32, pviewports : D3D11_VIEWPORT*) : Void
    @lpVtbl.value.rs_set_viewports.call(this, numviewports, pviewports)
  end
  def rs_set_scissor_rects(this : ID3D11DeviceContext2*, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.rs_set_scissor_rects.call(this, numrects, prects)
  end
  def copy_subresource_region(this : ID3D11DeviceContext2*, pdstresource : ID3D11Resource, dstsubresource : UInt32, dstx : UInt32, dsty : UInt32, dstz : UInt32, psrcresource : ID3D11Resource, srcsubresource : UInt32, psrcbox : D3D11_BOX*) : Void
    @lpVtbl.value.copy_subresource_region.call(this, pdstresource, dstsubresource, dstx, dsty, dstz, psrcresource, srcsubresource, psrcbox)
  end
  def copy_resource(this : ID3D11DeviceContext2*, pdstresource : ID3D11Resource, psrcresource : ID3D11Resource) : Void
    @lpVtbl.value.copy_resource.call(this, pdstresource, psrcresource)
  end
  def update_subresource(this : ID3D11DeviceContext2*, pdstresource : ID3D11Resource, dstsubresource : UInt32, pdstbox : D3D11_BOX*, psrcdata : Void*, srcrowpitch : UInt32, srcdepthpitch : UInt32) : Void
    @lpVtbl.value.update_subresource.call(this, pdstresource, dstsubresource, pdstbox, psrcdata, srcrowpitch, srcdepthpitch)
  end
  def copy_structure_count(this : ID3D11DeviceContext2*, pdstbuffer : ID3D11Buffer, dstalignedbyteoffset : UInt32, psrcview : ID3D11UnorderedAccessView) : Void
    @lpVtbl.value.copy_structure_count.call(this, pdstbuffer, dstalignedbyteoffset, psrcview)
  end
  def clear_render_target_view(this : ID3D11DeviceContext2*, prendertargetview : ID3D11RenderTargetView, colorrgba : Float32*) : Void
    @lpVtbl.value.clear_render_target_view.call(this, prendertargetview, colorrgba)
  end
  def clear_unordered_access_view_uint(this : ID3D11DeviceContext2*, punorderedaccessview : ID3D11UnorderedAccessView, values : UInt32*) : Void
    @lpVtbl.value.clear_unordered_access_view_uint.call(this, punorderedaccessview, values)
  end
  def clear_unordered_access_view_float(this : ID3D11DeviceContext2*, punorderedaccessview : ID3D11UnorderedAccessView, values : Float32*) : Void
    @lpVtbl.value.clear_unordered_access_view_float.call(this, punorderedaccessview, values)
  end
  def clear_depth_stencil_view(this : ID3D11DeviceContext2*, pdepthstencilview : ID3D11DepthStencilView, clearflags : UInt32, depth : Float32, stencil : UInt8) : Void
    @lpVtbl.value.clear_depth_stencil_view.call(this, pdepthstencilview, clearflags, depth, stencil)
  end
  def generate_mips(this : ID3D11DeviceContext2*, pshaderresourceview : ID3D11ShaderResourceView) : Void
    @lpVtbl.value.generate_mips.call(this, pshaderresourceview)
  end
  def set_resource_min_lod(this : ID3D11DeviceContext2*, presource : ID3D11Resource, minlod : Float32) : Void
    @lpVtbl.value.set_resource_min_lod.call(this, presource, minlod)
  end
  def get_resource_min_lod(this : ID3D11DeviceContext2*, presource : ID3D11Resource) : Float32
    @lpVtbl.value.get_resource_min_lod.call(this, presource)
  end
  def resolve_subresource(this : ID3D11DeviceContext2*, pdstresource : ID3D11Resource, dstsubresource : UInt32, psrcresource : ID3D11Resource, srcsubresource : UInt32, format : DXGI_FORMAT) : Void
    @lpVtbl.value.resolve_subresource.call(this, pdstresource, dstsubresource, psrcresource, srcsubresource, format)
  end
  def execute_command_list(this : ID3D11DeviceContext2*, pcommandlist : ID3D11CommandList, restorecontextstate : LibC::BOOL) : Void
    @lpVtbl.value.execute_command_list.call(this, pcommandlist, restorecontextstate)
  end
  def hs_set_shader_resources(this : ID3D11DeviceContext2*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.hs_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def hs_set_shader(this : ID3D11DeviceContext2*, phullshader : ID3D11HullShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.hs_set_shader.call(this, phullshader, ppclassinstances, numclassinstances)
  end
  def hs_set_samplers(this : ID3D11DeviceContext2*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.hs_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def hs_set_constant_buffers(this : ID3D11DeviceContext2*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.hs_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ds_set_shader_resources(this : ID3D11DeviceContext2*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.ds_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def ds_set_shader(this : ID3D11DeviceContext2*, pdomainshader : ID3D11DomainShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.ds_set_shader.call(this, pdomainshader, ppclassinstances, numclassinstances)
  end
  def ds_set_samplers(this : ID3D11DeviceContext2*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.ds_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def ds_set_constant_buffers(this : ID3D11DeviceContext2*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.ds_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def cs_set_shader_resources(this : ID3D11DeviceContext2*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.cs_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def cs_set_unordered_access_views(this : ID3D11DeviceContext2*, startslot : UInt32, numuavs : UInt32, ppunorderedaccessviews : ID3D11UnorderedAccessView*, puavinitialcounts : UInt32*) : Void
    @lpVtbl.value.cs_set_unordered_access_views.call(this, startslot, numuavs, ppunorderedaccessviews, puavinitialcounts)
  end
  def cs_set_shader(this : ID3D11DeviceContext2*, pcomputeshader : ID3D11ComputeShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.cs_set_shader.call(this, pcomputeshader, ppclassinstances, numclassinstances)
  end
  def cs_set_samplers(this : ID3D11DeviceContext2*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.cs_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def cs_set_constant_buffers(this : ID3D11DeviceContext2*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.cs_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def vs_get_constant_buffers(this : ID3D11DeviceContext2*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.vs_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ps_get_shader_resources(this : ID3D11DeviceContext2*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.ps_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def ps_get_shader(this : ID3D11DeviceContext2*, pppixelshader : ID3D11PixelShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.ps_get_shader.call(this, pppixelshader, ppclassinstances, pnumclassinstances)
  end
  def ps_get_samplers(this : ID3D11DeviceContext2*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.ps_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def vs_get_shader(this : ID3D11DeviceContext2*, ppvertexshader : ID3D11VertexShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.vs_get_shader.call(this, ppvertexshader, ppclassinstances, pnumclassinstances)
  end
  def ps_get_constant_buffers(this : ID3D11DeviceContext2*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.ps_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ia_get_input_layout(this : ID3D11DeviceContext2*, ppinputlayout : ID3D11InputLayout*) : Void
    @lpVtbl.value.ia_get_input_layout.call(this, ppinputlayout)
  end
  def ia_get_vertex_buffers(this : ID3D11DeviceContext2*, startslot : UInt32, numbuffers : UInt32, ppvertexbuffers : ID3D11Buffer*, pstrides : UInt32*, poffsets : UInt32*) : Void
    @lpVtbl.value.ia_get_vertex_buffers.call(this, startslot, numbuffers, ppvertexbuffers, pstrides, poffsets)
  end
  def ia_get_index_buffer(this : ID3D11DeviceContext2*, pindexbuffer : ID3D11Buffer*, format : DXGI_FORMAT*, offset : UInt32*) : Void
    @lpVtbl.value.ia_get_index_buffer.call(this, pindexbuffer, format, offset)
  end
  def gs_get_constant_buffers(this : ID3D11DeviceContext2*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.gs_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def gs_get_shader(this : ID3D11DeviceContext2*, ppgeometryshader : ID3D11GeometryShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.gs_get_shader.call(this, ppgeometryshader, ppclassinstances, pnumclassinstances)
  end
  def ia_get_primitive_topology(this : ID3D11DeviceContext2*, ptopology : D3D_PRIMITIVE_TOPOLOGY*) : Void
    @lpVtbl.value.ia_get_primitive_topology.call(this, ptopology)
  end
  def vs_get_shader_resources(this : ID3D11DeviceContext2*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.vs_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def vs_get_samplers(this : ID3D11DeviceContext2*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.vs_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def get_predication(this : ID3D11DeviceContext2*, pppredicate : ID3D11Predicate*, ppredicatevalue : LibC::BOOL*) : Void
    @lpVtbl.value.get_predication.call(this, pppredicate, ppredicatevalue)
  end
  def gs_get_shader_resources(this : ID3D11DeviceContext2*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.gs_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def gs_get_samplers(this : ID3D11DeviceContext2*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.gs_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def om_get_render_targets(this : ID3D11DeviceContext2*, numviews : UInt32, pprendertargetviews : ID3D11RenderTargetView*, ppdepthstencilview : ID3D11DepthStencilView*) : Void
    @lpVtbl.value.om_get_render_targets.call(this, numviews, pprendertargetviews, ppdepthstencilview)
  end
  def om_get_render_targets_and_unordered_access_views(this : ID3D11DeviceContext2*, numrtvs : UInt32, pprendertargetviews : ID3D11RenderTargetView*, ppdepthstencilview : ID3D11DepthStencilView*, uavstartslot : UInt32, numuavs : UInt32, ppunorderedaccessviews : ID3D11UnorderedAccessView*) : Void
    @lpVtbl.value.om_get_render_targets_and_unordered_access_views.call(this, numrtvs, pprendertargetviews, ppdepthstencilview, uavstartslot, numuavs, ppunorderedaccessviews)
  end
  def om_get_blend_state(this : ID3D11DeviceContext2*, ppblendstate : ID3D11BlendState*, blendfactor : Float32*, psamplemask : UInt32*) : Void
    @lpVtbl.value.om_get_blend_state.call(this, ppblendstate, blendfactor, psamplemask)
  end
  def om_get_depth_stencil_state(this : ID3D11DeviceContext2*, ppdepthstencilstate : ID3D11DepthStencilState*, pstencilref : UInt32*) : Void
    @lpVtbl.value.om_get_depth_stencil_state.call(this, ppdepthstencilstate, pstencilref)
  end
  def so_get_targets(this : ID3D11DeviceContext2*, numbuffers : UInt32, ppsotargets : ID3D11Buffer*) : Void
    @lpVtbl.value.so_get_targets.call(this, numbuffers, ppsotargets)
  end
  def rs_get_state(this : ID3D11DeviceContext2*, pprasterizerstate : ID3D11RasterizerState*) : Void
    @lpVtbl.value.rs_get_state.call(this, pprasterizerstate)
  end
  def rs_get_viewports(this : ID3D11DeviceContext2*, pnumviewports : UInt32*, pviewports : D3D11_VIEWPORT*) : Void
    @lpVtbl.value.rs_get_viewports.call(this, pnumviewports, pviewports)
  end
  def rs_get_scissor_rects(this : ID3D11DeviceContext2*, pnumrects : UInt32*, prects : RECT*) : Void
    @lpVtbl.value.rs_get_scissor_rects.call(this, pnumrects, prects)
  end
  def hs_get_shader_resources(this : ID3D11DeviceContext2*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.hs_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def hs_get_shader(this : ID3D11DeviceContext2*, pphullshader : ID3D11HullShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.hs_get_shader.call(this, pphullshader, ppclassinstances, pnumclassinstances)
  end
  def hs_get_samplers(this : ID3D11DeviceContext2*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.hs_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def hs_get_constant_buffers(this : ID3D11DeviceContext2*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.hs_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ds_get_shader_resources(this : ID3D11DeviceContext2*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.ds_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def ds_get_shader(this : ID3D11DeviceContext2*, ppdomainshader : ID3D11DomainShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.ds_get_shader.call(this, ppdomainshader, ppclassinstances, pnumclassinstances)
  end
  def ds_get_samplers(this : ID3D11DeviceContext2*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.ds_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def ds_get_constant_buffers(this : ID3D11DeviceContext2*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.ds_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def cs_get_shader_resources(this : ID3D11DeviceContext2*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.cs_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def cs_get_unordered_access_views(this : ID3D11DeviceContext2*, startslot : UInt32, numuavs : UInt32, ppunorderedaccessviews : ID3D11UnorderedAccessView*) : Void
    @lpVtbl.value.cs_get_unordered_access_views.call(this, startslot, numuavs, ppunorderedaccessviews)
  end
  def cs_get_shader(this : ID3D11DeviceContext2*, ppcomputeshader : ID3D11ComputeShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.cs_get_shader.call(this, ppcomputeshader, ppclassinstances, pnumclassinstances)
  end
  def cs_get_samplers(this : ID3D11DeviceContext2*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.cs_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def cs_get_constant_buffers(this : ID3D11DeviceContext2*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.cs_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def clear_state(this : ID3D11DeviceContext2*) : Void
    @lpVtbl.value.clear_state.call(this)
  end
  def flush(this : ID3D11DeviceContext2*) : Void
    @lpVtbl.value.flush.call(this)
  end
  def get_type(this : ID3D11DeviceContext2*) : D3D11_DEVICE_CONTEXT_TYPE
    @lpVtbl.value.get_type.call(this)
  end
  def get_context_flags(this : ID3D11DeviceContext2*) : UInt32
    @lpVtbl.value.get_context_flags.call(this)
  end
  def finish_command_list(this : ID3D11DeviceContext2*, restoredeferredcontextstate : LibC::BOOL, ppcommandlist : ID3D11CommandList*) : HRESULT
    @lpVtbl.value.finish_command_list.call(this, restoredeferredcontextstate, ppcommandlist)
  end
  def copy_subresource_region1(this : ID3D11DeviceContext2*, pdstresource : ID3D11Resource, dstsubresource : UInt32, dstx : UInt32, dsty : UInt32, dstz : UInt32, psrcresource : ID3D11Resource, srcsubresource : UInt32, psrcbox : D3D11_BOX*, copyflags : UInt32) : Void
    @lpVtbl.value.copy_subresource_region1.call(this, pdstresource, dstsubresource, dstx, dsty, dstz, psrcresource, srcsubresource, psrcbox, copyflags)
  end
  def update_subresource1(this : ID3D11DeviceContext2*, pdstresource : ID3D11Resource, dstsubresource : UInt32, pdstbox : D3D11_BOX*, psrcdata : Void*, srcrowpitch : UInt32, srcdepthpitch : UInt32, copyflags : UInt32) : Void
    @lpVtbl.value.update_subresource1.call(this, pdstresource, dstsubresource, pdstbox, psrcdata, srcrowpitch, srcdepthpitch, copyflags)
  end
  def discard_resource(this : ID3D11DeviceContext2*, presource : ID3D11Resource) : Void
    @lpVtbl.value.discard_resource.call(this, presource)
  end
  def discard_view(this : ID3D11DeviceContext2*, presourceview : ID3D11View) : Void
    @lpVtbl.value.discard_view.call(this, presourceview)
  end
  def vs_set_constant_buffers1(this : ID3D11DeviceContext2*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.vs_set_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def hs_set_constant_buffers1(this : ID3D11DeviceContext2*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.hs_set_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def ds_set_constant_buffers1(this : ID3D11DeviceContext2*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.ds_set_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def gs_set_constant_buffers1(this : ID3D11DeviceContext2*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.gs_set_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def ps_set_constant_buffers1(this : ID3D11DeviceContext2*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.ps_set_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def cs_set_constant_buffers1(this : ID3D11DeviceContext2*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.cs_set_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def vs_get_constant_buffers1(this : ID3D11DeviceContext2*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.vs_get_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def hs_get_constant_buffers1(this : ID3D11DeviceContext2*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.hs_get_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def ds_get_constant_buffers1(this : ID3D11DeviceContext2*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.ds_get_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def gs_get_constant_buffers1(this : ID3D11DeviceContext2*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.gs_get_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def ps_get_constant_buffers1(this : ID3D11DeviceContext2*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.ps_get_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def cs_get_constant_buffers1(this : ID3D11DeviceContext2*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.cs_get_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def swap_device_context_state(this : ID3D11DeviceContext2*, pstate : ID3DDeviceContextState, pppreviousstate : ID3DDeviceContextState*) : Void
    @lpVtbl.value.swap_device_context_state.call(this, pstate, pppreviousstate)
  end
  def clear_view(this : ID3D11DeviceContext2*, pview : ID3D11View, color : Float32*, prect : RECT*, numrects : UInt32) : Void
    @lpVtbl.value.clear_view.call(this, pview, color, prect, numrects)
  end
  def discard_view1(this : ID3D11DeviceContext2*, presourceview : ID3D11View, prects : RECT*, numrects : UInt32) : Void
    @lpVtbl.value.discard_view1.call(this, presourceview, prects, numrects)
  end
  def update_tile_mappings(this : ID3D11DeviceContext2*, ptiledresource : ID3D11Resource, numtiledresourceregions : UInt32, ptiledresourceregionstartcoordinates : D3D11_TILED_RESOURCE_COORDINATE*, ptiledresourceregionsizes : D3D11_TILE_REGION_SIZE*, ptilepool : ID3D11Buffer, numranges : UInt32, prangeflags : UInt32*, ptilepoolstartoffsets : UInt32*, prangetilecounts : UInt32*, flags : UInt32) : HRESULT
    @lpVtbl.value.update_tile_mappings.call(this, ptiledresource, numtiledresourceregions, ptiledresourceregionstartcoordinates, ptiledresourceregionsizes, ptilepool, numranges, prangeflags, ptilepoolstartoffsets, prangetilecounts, flags)
  end
  def copy_tile_mappings(this : ID3D11DeviceContext2*, pdesttiledresource : ID3D11Resource, pdestregionstartcoordinate : D3D11_TILED_RESOURCE_COORDINATE*, psourcetiledresource : ID3D11Resource, psourceregionstartcoordinate : D3D11_TILED_RESOURCE_COORDINATE*, ptileregionsize : D3D11_TILE_REGION_SIZE*, flags : UInt32) : HRESULT
    @lpVtbl.value.copy_tile_mappings.call(this, pdesttiledresource, pdestregionstartcoordinate, psourcetiledresource, psourceregionstartcoordinate, ptileregionsize, flags)
  end
  def copy_tiles(this : ID3D11DeviceContext2*, ptiledresource : ID3D11Resource, ptileregionstartcoordinate : D3D11_TILED_RESOURCE_COORDINATE*, ptileregionsize : D3D11_TILE_REGION_SIZE*, pbuffer : ID3D11Buffer, bufferstartoffsetinbytes : UInt64, flags : UInt32) : Void
    @lpVtbl.value.copy_tiles.call(this, ptiledresource, ptileregionstartcoordinate, ptileregionsize, pbuffer, bufferstartoffsetinbytes, flags)
  end
  def update_tiles(this : ID3D11DeviceContext2*, pdesttiledresource : ID3D11Resource, pdesttileregionstartcoordinate : D3D11_TILED_RESOURCE_COORDINATE*, pdesttileregionsize : D3D11_TILE_REGION_SIZE*, psourcetiledata : Void*, flags : UInt32) : Void
    @lpVtbl.value.update_tiles.call(this, pdesttiledresource, pdesttileregionstartcoordinate, pdesttileregionsize, psourcetiledata, flags)
  end
  def resize_tile_pool(this : ID3D11DeviceContext2*, ptilepool : ID3D11Buffer, newsizeinbytes : UInt64) : HRESULT
    @lpVtbl.value.resize_tile_pool.call(this, ptilepool, newsizeinbytes)
  end
  def tiled_resource_barrier(this : ID3D11DeviceContext2*, ptiledresourceorviewaccessbeforebarrier : ID3D11DeviceChild, ptiledresourceorviewaccessafterbarrier : ID3D11DeviceChild) : Void
    @lpVtbl.value.tiled_resource_barrier.call(this, ptiledresourceorviewaccessbeforebarrier, ptiledresourceorviewaccessafterbarrier)
  end
  def is_annotation_enabled(this : ID3D11DeviceContext2*) : LibC::BOOL
    @lpVtbl.value.is_annotation_enabled.call(this)
  end
  def set_marker_int(this : ID3D11DeviceContext2*, plabel : LibC::LPWSTR, data : Int32) : Void
    @lpVtbl.value.set_marker_int.call(this, plabel, data)
  end
  def begin_event_int(this : ID3D11DeviceContext2*, plabel : LibC::LPWSTR, data : Int32) : Void
    @lpVtbl.value.begin_event_int.call(this, plabel, data)
  end
  def end_event(this : ID3D11DeviceContext2*) : Void
    @lpVtbl.value.end_event.call(this)
  end
end
struct LibWin32::ID3D11Device2
  def query_interface(this : ID3D11Device2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11Device2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11Device2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_buffer(this : ID3D11Device2*, pdesc : D3D11_BUFFER_DESC*, pinitialdata : D3D11_SUBRESOURCE_DATA*, ppbuffer : ID3D11Buffer*) : HRESULT
    @lpVtbl.value.create_buffer.call(this, pdesc, pinitialdata, ppbuffer)
  end
  def create_texture1_d(this : ID3D11Device2*, pdesc : D3D11_TEXTURE1D_DESC*, pinitialdata : D3D11_SUBRESOURCE_DATA*, pptexture1d : ID3D11Texture1D*) : HRESULT
    @lpVtbl.value.create_texture1_d.call(this, pdesc, pinitialdata, pptexture1d)
  end
  def create_texture2_d(this : ID3D11Device2*, pdesc : D3D11_TEXTURE2D_DESC*, pinitialdata : D3D11_SUBRESOURCE_DATA*, pptexture2d : ID3D11Texture2D*) : HRESULT
    @lpVtbl.value.create_texture2_d.call(this, pdesc, pinitialdata, pptexture2d)
  end
  def create_texture3_d(this : ID3D11Device2*, pdesc : D3D11_TEXTURE3D_DESC*, pinitialdata : D3D11_SUBRESOURCE_DATA*, pptexture3d : ID3D11Texture3D*) : HRESULT
    @lpVtbl.value.create_texture3_d.call(this, pdesc, pinitialdata, pptexture3d)
  end
  def create_shader_resource_view(this : ID3D11Device2*, presource : ID3D11Resource, pdesc : D3D11_SHADER_RESOURCE_VIEW_DESC*, ppsrview : ID3D11ShaderResourceView*) : HRESULT
    @lpVtbl.value.create_shader_resource_view.call(this, presource, pdesc, ppsrview)
  end
  def create_unordered_access_view(this : ID3D11Device2*, presource : ID3D11Resource, pdesc : D3D11_UNORDERED_ACCESS_VIEW_DESC*, ppuaview : ID3D11UnorderedAccessView*) : HRESULT
    @lpVtbl.value.create_unordered_access_view.call(this, presource, pdesc, ppuaview)
  end
  def create_render_target_view(this : ID3D11Device2*, presource : ID3D11Resource, pdesc : D3D11_RENDER_TARGET_VIEW_DESC*, pprtview : ID3D11RenderTargetView*) : HRESULT
    @lpVtbl.value.create_render_target_view.call(this, presource, pdesc, pprtview)
  end
  def create_depth_stencil_view(this : ID3D11Device2*, presource : ID3D11Resource, pdesc : D3D11_DEPTH_STENCIL_VIEW_DESC*, ppdepthstencilview : ID3D11DepthStencilView*) : HRESULT
    @lpVtbl.value.create_depth_stencil_view.call(this, presource, pdesc, ppdepthstencilview)
  end
  def create_input_layout(this : ID3D11Device2*, pinputelementdescs : D3D11_INPUT_ELEMENT_DESC*, numelements : UInt32, pshaderbytecodewithinputsignature : Void*, bytecodelength : LibC::UINT_PTR, ppinputlayout : ID3D11InputLayout*) : HRESULT
    @lpVtbl.value.create_input_layout.call(this, pinputelementdescs, numelements, pshaderbytecodewithinputsignature, bytecodelength, ppinputlayout)
  end
  def create_vertex_shader(this : ID3D11Device2*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, ppvertexshader : ID3D11VertexShader*) : HRESULT
    @lpVtbl.value.create_vertex_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, ppvertexshader)
  end
  def create_geometry_shader(this : ID3D11Device2*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, ppgeometryshader : ID3D11GeometryShader*) : HRESULT
    @lpVtbl.value.create_geometry_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, ppgeometryshader)
  end
  def create_geometry_shader_with_stream_output(this : ID3D11Device2*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, psodeclaration : D3D11_SO_DECLARATION_ENTRY*, numentries : UInt32, pbufferstrides : UInt32*, numstrides : UInt32, rasterizedstream : UInt32, pclasslinkage : ID3D11ClassLinkage, ppgeometryshader : ID3D11GeometryShader*) : HRESULT
    @lpVtbl.value.create_geometry_shader_with_stream_output.call(this, pshaderbytecode, bytecodelength, psodeclaration, numentries, pbufferstrides, numstrides, rasterizedstream, pclasslinkage, ppgeometryshader)
  end
  def create_pixel_shader(this : ID3D11Device2*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, pppixelshader : ID3D11PixelShader*) : HRESULT
    @lpVtbl.value.create_pixel_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, pppixelshader)
  end
  def create_hull_shader(this : ID3D11Device2*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, pphullshader : ID3D11HullShader*) : HRESULT
    @lpVtbl.value.create_hull_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, pphullshader)
  end
  def create_domain_shader(this : ID3D11Device2*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, ppdomainshader : ID3D11DomainShader*) : HRESULT
    @lpVtbl.value.create_domain_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, ppdomainshader)
  end
  def create_compute_shader(this : ID3D11Device2*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, ppcomputeshader : ID3D11ComputeShader*) : HRESULT
    @lpVtbl.value.create_compute_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, ppcomputeshader)
  end
  def create_class_linkage(this : ID3D11Device2*, pplinkage : ID3D11ClassLinkage*) : HRESULT
    @lpVtbl.value.create_class_linkage.call(this, pplinkage)
  end
  def create_blend_state(this : ID3D11Device2*, pblendstatedesc : D3D11_BLEND_DESC*, ppblendstate : ID3D11BlendState*) : HRESULT
    @lpVtbl.value.create_blend_state.call(this, pblendstatedesc, ppblendstate)
  end
  def create_depth_stencil_state(this : ID3D11Device2*, pdepthstencildesc : D3D11_DEPTH_STENCIL_DESC*, ppdepthstencilstate : ID3D11DepthStencilState*) : HRESULT
    @lpVtbl.value.create_depth_stencil_state.call(this, pdepthstencildesc, ppdepthstencilstate)
  end
  def create_rasterizer_state(this : ID3D11Device2*, prasterizerdesc : D3D11_RASTERIZER_DESC*, pprasterizerstate : ID3D11RasterizerState*) : HRESULT
    @lpVtbl.value.create_rasterizer_state.call(this, prasterizerdesc, pprasterizerstate)
  end
  def create_sampler_state(this : ID3D11Device2*, psamplerdesc : D3D11_SAMPLER_DESC*, ppsamplerstate : ID3D11SamplerState*) : HRESULT
    @lpVtbl.value.create_sampler_state.call(this, psamplerdesc, ppsamplerstate)
  end
  def create_query(this : ID3D11Device2*, pquerydesc : D3D11_QUERY_DESC*, ppquery : ID3D11Query*) : HRESULT
    @lpVtbl.value.create_query.call(this, pquerydesc, ppquery)
  end
  def create_predicate(this : ID3D11Device2*, ppredicatedesc : D3D11_QUERY_DESC*, pppredicate : ID3D11Predicate*) : HRESULT
    @lpVtbl.value.create_predicate.call(this, ppredicatedesc, pppredicate)
  end
  def create_counter(this : ID3D11Device2*, pcounterdesc : D3D11_COUNTER_DESC*, ppcounter : ID3D11Counter*) : HRESULT
    @lpVtbl.value.create_counter.call(this, pcounterdesc, ppcounter)
  end
  def create_deferred_context(this : ID3D11Device2*, contextflags : UInt32, ppdeferredcontext : ID3D11DeviceContext*) : HRESULT
    @lpVtbl.value.create_deferred_context.call(this, contextflags, ppdeferredcontext)
  end
  def open_shared_resource(this : ID3D11Device2*, hresource : LibC::HANDLE, returnedinterface : Guid*, ppresource : Void**) : HRESULT
    @lpVtbl.value.open_shared_resource.call(this, hresource, returnedinterface, ppresource)
  end
  def check_format_support(this : ID3D11Device2*, format : DXGI_FORMAT, pformatsupport : UInt32*) : HRESULT
    @lpVtbl.value.check_format_support.call(this, format, pformatsupport)
  end
  def check_multisample_quality_levels(this : ID3D11Device2*, format : DXGI_FORMAT, samplecount : UInt32, pnumqualitylevels : UInt32*) : HRESULT
    @lpVtbl.value.check_multisample_quality_levels.call(this, format, samplecount, pnumqualitylevels)
  end
  def check_counter_info(this : ID3D11Device2*, pcounterinfo : D3D11_COUNTER_INFO*) : Void
    @lpVtbl.value.check_counter_info.call(this, pcounterinfo)
  end
  def check_counter(this : ID3D11Device2*, pdesc : D3D11_COUNTER_DESC*, ptype : D3D11_COUNTER_TYPE*, pactivecounters : UInt32*, szname : UInt8*, pnamelength : UInt32*, szunits : UInt8*, punitslength : UInt32*, szdescription : UInt8*, pdescriptionlength : UInt32*) : HRESULT
    @lpVtbl.value.check_counter.call(this, pdesc, ptype, pactivecounters, szname, pnamelength, szunits, punitslength, szdescription, pdescriptionlength)
  end
  def check_feature_support(this : ID3D11Device2*, feature : D3D11_FEATURE, pfeaturesupportdata : Void*, featuresupportdatasize : UInt32) : HRESULT
    @lpVtbl.value.check_feature_support.call(this, feature, pfeaturesupportdata, featuresupportdatasize)
  end
  def get_private_data(this : ID3D11Device2*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11Device2*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11Device2*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_feature_level(this : ID3D11Device2*) : D3D_FEATURE_LEVEL
    @lpVtbl.value.get_feature_level.call(this)
  end
  def get_creation_flags(this : ID3D11Device2*) : UInt32
    @lpVtbl.value.get_creation_flags.call(this)
  end
  def get_device_removed_reason(this : ID3D11Device2*) : HRESULT
    @lpVtbl.value.get_device_removed_reason.call(this)
  end
  def get_immediate_context(this : ID3D11Device2*, ppimmediatecontext : ID3D11DeviceContext*) : Void
    @lpVtbl.value.get_immediate_context.call(this, ppimmediatecontext)
  end
  def set_exception_mode(this : ID3D11Device2*, raiseflags : UInt32) : HRESULT
    @lpVtbl.value.set_exception_mode.call(this, raiseflags)
  end
  def get_exception_mode(this : ID3D11Device2*) : UInt32
    @lpVtbl.value.get_exception_mode.call(this)
  end
  def get_immediate_context1(this : ID3D11Device2*, ppimmediatecontext : ID3D11DeviceContext1*) : Void
    @lpVtbl.value.get_immediate_context1.call(this, ppimmediatecontext)
  end
  def create_deferred_context1(this : ID3D11Device2*, contextflags : UInt32, ppdeferredcontext : ID3D11DeviceContext1*) : HRESULT
    @lpVtbl.value.create_deferred_context1.call(this, contextflags, ppdeferredcontext)
  end
  def create_blend_state1(this : ID3D11Device2*, pblendstatedesc : D3D11_BLEND_DESC1*, ppblendstate : ID3D11BlendState1*) : HRESULT
    @lpVtbl.value.create_blend_state1.call(this, pblendstatedesc, ppblendstate)
  end
  def create_rasterizer_state1(this : ID3D11Device2*, prasterizerdesc : D3D11_RASTERIZER_DESC1*, pprasterizerstate : ID3D11RasterizerState1*) : HRESULT
    @lpVtbl.value.create_rasterizer_state1.call(this, prasterizerdesc, pprasterizerstate)
  end
  def create_device_context_state(this : ID3D11Device2*, flags : UInt32, pfeaturelevels : D3D_FEATURE_LEVEL*, featurelevels : UInt32, sdkversion : UInt32, emulatedinterface : Guid*, pchosenfeaturelevel : D3D_FEATURE_LEVEL*, ppcontextstate : ID3DDeviceContextState*) : HRESULT
    @lpVtbl.value.create_device_context_state.call(this, flags, pfeaturelevels, featurelevels, sdkversion, emulatedinterface, pchosenfeaturelevel, ppcontextstate)
  end
  def open_shared_resource1(this : ID3D11Device2*, hresource : LibC::HANDLE, returnedinterface : Guid*, ppresource : Void**) : HRESULT
    @lpVtbl.value.open_shared_resource1.call(this, hresource, returnedinterface, ppresource)
  end
  def open_shared_resource_by_name(this : ID3D11Device2*, lpname : LibC::LPWSTR, dwdesiredaccess : UInt32, returnedinterface : Guid*, ppresource : Void**) : HRESULT
    @lpVtbl.value.open_shared_resource_by_name.call(this, lpname, dwdesiredaccess, returnedinterface, ppresource)
  end
  def get_immediate_context2(this : ID3D11Device2*, ppimmediatecontext : ID3D11DeviceContext2*) : Void
    @lpVtbl.value.get_immediate_context2.call(this, ppimmediatecontext)
  end
  def create_deferred_context2(this : ID3D11Device2*, contextflags : UInt32, ppdeferredcontext : ID3D11DeviceContext2*) : HRESULT
    @lpVtbl.value.create_deferred_context2.call(this, contextflags, ppdeferredcontext)
  end
  def get_resource_tiling(this : ID3D11Device2*, ptiledresource : ID3D11Resource, pnumtilesforentireresource : UInt32*, ppackedmipdesc : D3D11_PACKED_MIP_DESC*, pstandardtileshapefornonpackedmips : D3D11_TILE_SHAPE*, pnumsubresourcetilings : UInt32*, firstsubresourcetilingtoget : UInt32, psubresourcetilingsfornonpackedmips : D3D11_SUBRESOURCE_TILING*) : Void
    @lpVtbl.value.get_resource_tiling.call(this, ptiledresource, pnumtilesforentireresource, ppackedmipdesc, pstandardtileshapefornonpackedmips, pnumsubresourcetilings, firstsubresourcetilingtoget, psubresourcetilingsfornonpackedmips)
  end
  def check_multisample_quality_levels1(this : ID3D11Device2*, format : DXGI_FORMAT, samplecount : UInt32, flags : UInt32, pnumqualitylevels : UInt32*) : HRESULT
    @lpVtbl.value.check_multisample_quality_levels1.call(this, format, samplecount, flags, pnumqualitylevels)
  end
end
struct LibWin32::ID3D11Texture2D1
  def query_interface(this : ID3D11Texture2D1*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11Texture2D1*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11Texture2D1*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11Texture2D1*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11Texture2D1*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11Texture2D1*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11Texture2D1*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_type(this : ID3D11Texture2D1*, presourcedimension : D3D11_RESOURCE_DIMENSION*) : Void
    @lpVtbl.value.get_type.call(this, presourcedimension)
  end
  def set_eviction_priority(this : ID3D11Texture2D1*, evictionpriority : UInt32) : Void
    @lpVtbl.value.set_eviction_priority.call(this, evictionpriority)
  end
  def get_eviction_priority(this : ID3D11Texture2D1*) : UInt32
    @lpVtbl.value.get_eviction_priority.call(this)
  end
  def get_desc(this : ID3D11Texture2D1*, pdesc : D3D11_TEXTURE2D_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
  def get_desc1(this : ID3D11Texture2D1*, pdesc : D3D11_TEXTURE2D_DESC1*) : Void
    @lpVtbl.value.get_desc1.call(this, pdesc)
  end
end
struct LibWin32::ID3D11Texture3D1
  def query_interface(this : ID3D11Texture3D1*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11Texture3D1*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11Texture3D1*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11Texture3D1*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11Texture3D1*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11Texture3D1*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11Texture3D1*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_type(this : ID3D11Texture3D1*, presourcedimension : D3D11_RESOURCE_DIMENSION*) : Void
    @lpVtbl.value.get_type.call(this, presourcedimension)
  end
  def set_eviction_priority(this : ID3D11Texture3D1*, evictionpriority : UInt32) : Void
    @lpVtbl.value.set_eviction_priority.call(this, evictionpriority)
  end
  def get_eviction_priority(this : ID3D11Texture3D1*) : UInt32
    @lpVtbl.value.get_eviction_priority.call(this)
  end
  def get_desc(this : ID3D11Texture3D1*, pdesc : D3D11_TEXTURE3D_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
  def get_desc1(this : ID3D11Texture3D1*, pdesc : D3D11_TEXTURE3D_DESC1*) : Void
    @lpVtbl.value.get_desc1.call(this, pdesc)
  end
end
struct LibWin32::ID3D11RasterizerState2
  def query_interface(this : ID3D11RasterizerState2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11RasterizerState2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11RasterizerState2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11RasterizerState2*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11RasterizerState2*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11RasterizerState2*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11RasterizerState2*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_desc(this : ID3D11RasterizerState2*, pdesc : D3D11_RASTERIZER_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
  def get_desc1(this : ID3D11RasterizerState2*, pdesc : D3D11_RASTERIZER_DESC1*) : Void
    @lpVtbl.value.get_desc1.call(this, pdesc)
  end
  def get_desc2(this : ID3D11RasterizerState2*, pdesc : D3D11_RASTERIZER_DESC2*) : Void
    @lpVtbl.value.get_desc2.call(this, pdesc)
  end
end
struct LibWin32::ID3D11ShaderResourceView1
  def query_interface(this : ID3D11ShaderResourceView1*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11ShaderResourceView1*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11ShaderResourceView1*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11ShaderResourceView1*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11ShaderResourceView1*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11ShaderResourceView1*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11ShaderResourceView1*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_resource(this : ID3D11ShaderResourceView1*, ppresource : ID3D11Resource*) : Void
    @lpVtbl.value.get_resource.call(this, ppresource)
  end
  def get_desc(this : ID3D11ShaderResourceView1*, pdesc : D3D11_SHADER_RESOURCE_VIEW_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
  def get_desc1(this : ID3D11ShaderResourceView1*, pdesc1 : D3D11_SHADER_RESOURCE_VIEW_DESC1*) : Void
    @lpVtbl.value.get_desc1.call(this, pdesc1)
  end
end
struct LibWin32::ID3D11RenderTargetView1
  def query_interface(this : ID3D11RenderTargetView1*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11RenderTargetView1*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11RenderTargetView1*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11RenderTargetView1*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11RenderTargetView1*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11RenderTargetView1*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11RenderTargetView1*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_resource(this : ID3D11RenderTargetView1*, ppresource : ID3D11Resource*) : Void
    @lpVtbl.value.get_resource.call(this, ppresource)
  end
  def get_desc(this : ID3D11RenderTargetView1*, pdesc : D3D11_RENDER_TARGET_VIEW_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
  def get_desc1(this : ID3D11RenderTargetView1*, pdesc1 : D3D11_RENDER_TARGET_VIEW_DESC1*) : Void
    @lpVtbl.value.get_desc1.call(this, pdesc1)
  end
end
struct LibWin32::ID3D11UnorderedAccessView1
  def query_interface(this : ID3D11UnorderedAccessView1*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11UnorderedAccessView1*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11UnorderedAccessView1*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11UnorderedAccessView1*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11UnorderedAccessView1*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11UnorderedAccessView1*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11UnorderedAccessView1*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_resource(this : ID3D11UnorderedAccessView1*, ppresource : ID3D11Resource*) : Void
    @lpVtbl.value.get_resource.call(this, ppresource)
  end
  def get_desc(this : ID3D11UnorderedAccessView1*, pdesc : D3D11_UNORDERED_ACCESS_VIEW_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
  def get_desc1(this : ID3D11UnorderedAccessView1*, pdesc1 : D3D11_UNORDERED_ACCESS_VIEW_DESC1*) : Void
    @lpVtbl.value.get_desc1.call(this, pdesc1)
  end
end
struct LibWin32::ID3D11Query1
  def query_interface(this : ID3D11Query1*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11Query1*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11Query1*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11Query1*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11Query1*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11Query1*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11Query1*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_data_size(this : ID3D11Query1*) : UInt32
    @lpVtbl.value.get_data_size.call(this)
  end
  def get_desc(this : ID3D11Query1*, pdesc : D3D11_QUERY_DESC*) : Void
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
  def get_desc1(this : ID3D11Query1*, pdesc1 : D3D11_QUERY_DESC1*) : Void
    @lpVtbl.value.get_desc1.call(this, pdesc1)
  end
end
struct LibWin32::ID3D11DeviceContext3
  def query_interface(this : ID3D11DeviceContext3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11DeviceContext3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11DeviceContext3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11DeviceContext3*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11DeviceContext3*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11DeviceContext3*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11DeviceContext3*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def vs_set_constant_buffers(this : ID3D11DeviceContext3*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.vs_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ps_set_shader_resources(this : ID3D11DeviceContext3*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.ps_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def ps_set_shader(this : ID3D11DeviceContext3*, ppixelshader : ID3D11PixelShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.ps_set_shader.call(this, ppixelshader, ppclassinstances, numclassinstances)
  end
  def ps_set_samplers(this : ID3D11DeviceContext3*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.ps_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def vs_set_shader(this : ID3D11DeviceContext3*, pvertexshader : ID3D11VertexShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.vs_set_shader.call(this, pvertexshader, ppclassinstances, numclassinstances)
  end
  def draw_indexed(this : ID3D11DeviceContext3*, indexcount : UInt32, startindexlocation : UInt32, basevertexlocation : Int32) : Void
    @lpVtbl.value.draw_indexed.call(this, indexcount, startindexlocation, basevertexlocation)
  end
  def draw(this : ID3D11DeviceContext3*, vertexcount : UInt32, startvertexlocation : UInt32) : Void
    @lpVtbl.value.draw.call(this, vertexcount, startvertexlocation)
  end
  def map(this : ID3D11DeviceContext3*, presource : ID3D11Resource, subresource : UInt32, maptype : D3D11_MAP, mapflags : UInt32, pmappedresource : D3D11_MAPPED_SUBRESOURCE*) : HRESULT
    @lpVtbl.value.map.call(this, presource, subresource, maptype, mapflags, pmappedresource)
  end
  def unmap(this : ID3D11DeviceContext3*, presource : ID3D11Resource, subresource : UInt32) : Void
    @lpVtbl.value.unmap.call(this, presource, subresource)
  end
  def ps_set_constant_buffers(this : ID3D11DeviceContext3*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.ps_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ia_set_input_layout(this : ID3D11DeviceContext3*, pinputlayout : ID3D11InputLayout) : Void
    @lpVtbl.value.ia_set_input_layout.call(this, pinputlayout)
  end
  def ia_set_vertex_buffers(this : ID3D11DeviceContext3*, startslot : UInt32, numbuffers : UInt32, ppvertexbuffers : ID3D11Buffer*, pstrides : UInt32*, poffsets : UInt32*) : Void
    @lpVtbl.value.ia_set_vertex_buffers.call(this, startslot, numbuffers, ppvertexbuffers, pstrides, poffsets)
  end
  def ia_set_index_buffer(this : ID3D11DeviceContext3*, pindexbuffer : ID3D11Buffer, format : DXGI_FORMAT, offset : UInt32) : Void
    @lpVtbl.value.ia_set_index_buffer.call(this, pindexbuffer, format, offset)
  end
  def draw_indexed_instanced(this : ID3D11DeviceContext3*, indexcountperinstance : UInt32, instancecount : UInt32, startindexlocation : UInt32, basevertexlocation : Int32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_indexed_instanced.call(this, indexcountperinstance, instancecount, startindexlocation, basevertexlocation, startinstancelocation)
  end
  def draw_instanced(this : ID3D11DeviceContext3*, vertexcountperinstance : UInt32, instancecount : UInt32, startvertexlocation : UInt32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_instanced.call(this, vertexcountperinstance, instancecount, startvertexlocation, startinstancelocation)
  end
  def gs_set_constant_buffers(this : ID3D11DeviceContext3*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.gs_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def gs_set_shader(this : ID3D11DeviceContext3*, pshader : ID3D11GeometryShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.gs_set_shader.call(this, pshader, ppclassinstances, numclassinstances)
  end
  def ia_set_primitive_topology(this : ID3D11DeviceContext3*, topology : D3D_PRIMITIVE_TOPOLOGY) : Void
    @lpVtbl.value.ia_set_primitive_topology.call(this, topology)
  end
  def vs_set_shader_resources(this : ID3D11DeviceContext3*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.vs_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def vs_set_samplers(this : ID3D11DeviceContext3*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.vs_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def begin_(this : ID3D11DeviceContext3*, pasync : ID3D11Asynchronous) : Void
    @lpVtbl.value.begin_.call(this, pasync)
  end
  def end_(this : ID3D11DeviceContext3*, pasync : ID3D11Asynchronous) : Void
    @lpVtbl.value.end_.call(this, pasync)
  end
  def get_data(this : ID3D11DeviceContext3*, pasync : ID3D11Asynchronous, pdata : Void*, datasize : UInt32, getdataflags : UInt32) : HRESULT
    @lpVtbl.value.get_data.call(this, pasync, pdata, datasize, getdataflags)
  end
  def set_predication(this : ID3D11DeviceContext3*, ppredicate : ID3D11Predicate, predicatevalue : LibC::BOOL) : Void
    @lpVtbl.value.set_predication.call(this, ppredicate, predicatevalue)
  end
  def gs_set_shader_resources(this : ID3D11DeviceContext3*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.gs_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def gs_set_samplers(this : ID3D11DeviceContext3*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.gs_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def om_set_render_targets(this : ID3D11DeviceContext3*, numviews : UInt32, pprendertargetviews : ID3D11RenderTargetView*, pdepthstencilview : ID3D11DepthStencilView) : Void
    @lpVtbl.value.om_set_render_targets.call(this, numviews, pprendertargetviews, pdepthstencilview)
  end
  def om_set_render_targets_and_unordered_access_views(this : ID3D11DeviceContext3*, numrtvs : UInt32, pprendertargetviews : ID3D11RenderTargetView*, pdepthstencilview : ID3D11DepthStencilView, uavstartslot : UInt32, numuavs : UInt32, ppunorderedaccessviews : ID3D11UnorderedAccessView*, puavinitialcounts : UInt32*) : Void
    @lpVtbl.value.om_set_render_targets_and_unordered_access_views.call(this, numrtvs, pprendertargetviews, pdepthstencilview, uavstartslot, numuavs, ppunorderedaccessviews, puavinitialcounts)
  end
  def om_set_blend_state(this : ID3D11DeviceContext3*, pblendstate : ID3D11BlendState, blendfactor : Float32*, samplemask : UInt32) : Void
    @lpVtbl.value.om_set_blend_state.call(this, pblendstate, blendfactor, samplemask)
  end
  def om_set_depth_stencil_state(this : ID3D11DeviceContext3*, pdepthstencilstate : ID3D11DepthStencilState, stencilref : UInt32) : Void
    @lpVtbl.value.om_set_depth_stencil_state.call(this, pdepthstencilstate, stencilref)
  end
  def so_set_targets(this : ID3D11DeviceContext3*, numbuffers : UInt32, ppsotargets : ID3D11Buffer*, poffsets : UInt32*) : Void
    @lpVtbl.value.so_set_targets.call(this, numbuffers, ppsotargets, poffsets)
  end
  def draw_auto(this : ID3D11DeviceContext3*) : Void
    @lpVtbl.value.draw_auto.call(this)
  end
  def draw_indexed_instanced_indirect(this : ID3D11DeviceContext3*, pbufferforargs : ID3D11Buffer, alignedbyteoffsetforargs : UInt32) : Void
    @lpVtbl.value.draw_indexed_instanced_indirect.call(this, pbufferforargs, alignedbyteoffsetforargs)
  end
  def draw_instanced_indirect(this : ID3D11DeviceContext3*, pbufferforargs : ID3D11Buffer, alignedbyteoffsetforargs : UInt32) : Void
    @lpVtbl.value.draw_instanced_indirect.call(this, pbufferforargs, alignedbyteoffsetforargs)
  end
  def dispatch(this : ID3D11DeviceContext3*, threadgroupcountx : UInt32, threadgroupcounty : UInt32, threadgroupcountz : UInt32) : Void
    @lpVtbl.value.dispatch.call(this, threadgroupcountx, threadgroupcounty, threadgroupcountz)
  end
  def dispatch_indirect(this : ID3D11DeviceContext3*, pbufferforargs : ID3D11Buffer, alignedbyteoffsetforargs : UInt32) : Void
    @lpVtbl.value.dispatch_indirect.call(this, pbufferforargs, alignedbyteoffsetforargs)
  end
  def rs_set_state(this : ID3D11DeviceContext3*, prasterizerstate : ID3D11RasterizerState) : Void
    @lpVtbl.value.rs_set_state.call(this, prasterizerstate)
  end
  def rs_set_viewports(this : ID3D11DeviceContext3*, numviewports : UInt32, pviewports : D3D11_VIEWPORT*) : Void
    @lpVtbl.value.rs_set_viewports.call(this, numviewports, pviewports)
  end
  def rs_set_scissor_rects(this : ID3D11DeviceContext3*, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.rs_set_scissor_rects.call(this, numrects, prects)
  end
  def copy_subresource_region(this : ID3D11DeviceContext3*, pdstresource : ID3D11Resource, dstsubresource : UInt32, dstx : UInt32, dsty : UInt32, dstz : UInt32, psrcresource : ID3D11Resource, srcsubresource : UInt32, psrcbox : D3D11_BOX*) : Void
    @lpVtbl.value.copy_subresource_region.call(this, pdstresource, dstsubresource, dstx, dsty, dstz, psrcresource, srcsubresource, psrcbox)
  end
  def copy_resource(this : ID3D11DeviceContext3*, pdstresource : ID3D11Resource, psrcresource : ID3D11Resource) : Void
    @lpVtbl.value.copy_resource.call(this, pdstresource, psrcresource)
  end
  def update_subresource(this : ID3D11DeviceContext3*, pdstresource : ID3D11Resource, dstsubresource : UInt32, pdstbox : D3D11_BOX*, psrcdata : Void*, srcrowpitch : UInt32, srcdepthpitch : UInt32) : Void
    @lpVtbl.value.update_subresource.call(this, pdstresource, dstsubresource, pdstbox, psrcdata, srcrowpitch, srcdepthpitch)
  end
  def copy_structure_count(this : ID3D11DeviceContext3*, pdstbuffer : ID3D11Buffer, dstalignedbyteoffset : UInt32, psrcview : ID3D11UnorderedAccessView) : Void
    @lpVtbl.value.copy_structure_count.call(this, pdstbuffer, dstalignedbyteoffset, psrcview)
  end
  def clear_render_target_view(this : ID3D11DeviceContext3*, prendertargetview : ID3D11RenderTargetView, colorrgba : Float32*) : Void
    @lpVtbl.value.clear_render_target_view.call(this, prendertargetview, colorrgba)
  end
  def clear_unordered_access_view_uint(this : ID3D11DeviceContext3*, punorderedaccessview : ID3D11UnorderedAccessView, values : UInt32*) : Void
    @lpVtbl.value.clear_unordered_access_view_uint.call(this, punorderedaccessview, values)
  end
  def clear_unordered_access_view_float(this : ID3D11DeviceContext3*, punorderedaccessview : ID3D11UnorderedAccessView, values : Float32*) : Void
    @lpVtbl.value.clear_unordered_access_view_float.call(this, punorderedaccessview, values)
  end
  def clear_depth_stencil_view(this : ID3D11DeviceContext3*, pdepthstencilview : ID3D11DepthStencilView, clearflags : UInt32, depth : Float32, stencil : UInt8) : Void
    @lpVtbl.value.clear_depth_stencil_view.call(this, pdepthstencilview, clearflags, depth, stencil)
  end
  def generate_mips(this : ID3D11DeviceContext3*, pshaderresourceview : ID3D11ShaderResourceView) : Void
    @lpVtbl.value.generate_mips.call(this, pshaderresourceview)
  end
  def set_resource_min_lod(this : ID3D11DeviceContext3*, presource : ID3D11Resource, minlod : Float32) : Void
    @lpVtbl.value.set_resource_min_lod.call(this, presource, minlod)
  end
  def get_resource_min_lod(this : ID3D11DeviceContext3*, presource : ID3D11Resource) : Float32
    @lpVtbl.value.get_resource_min_lod.call(this, presource)
  end
  def resolve_subresource(this : ID3D11DeviceContext3*, pdstresource : ID3D11Resource, dstsubresource : UInt32, psrcresource : ID3D11Resource, srcsubresource : UInt32, format : DXGI_FORMAT) : Void
    @lpVtbl.value.resolve_subresource.call(this, pdstresource, dstsubresource, psrcresource, srcsubresource, format)
  end
  def execute_command_list(this : ID3D11DeviceContext3*, pcommandlist : ID3D11CommandList, restorecontextstate : LibC::BOOL) : Void
    @lpVtbl.value.execute_command_list.call(this, pcommandlist, restorecontextstate)
  end
  def hs_set_shader_resources(this : ID3D11DeviceContext3*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.hs_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def hs_set_shader(this : ID3D11DeviceContext3*, phullshader : ID3D11HullShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.hs_set_shader.call(this, phullshader, ppclassinstances, numclassinstances)
  end
  def hs_set_samplers(this : ID3D11DeviceContext3*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.hs_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def hs_set_constant_buffers(this : ID3D11DeviceContext3*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.hs_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ds_set_shader_resources(this : ID3D11DeviceContext3*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.ds_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def ds_set_shader(this : ID3D11DeviceContext3*, pdomainshader : ID3D11DomainShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.ds_set_shader.call(this, pdomainshader, ppclassinstances, numclassinstances)
  end
  def ds_set_samplers(this : ID3D11DeviceContext3*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.ds_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def ds_set_constant_buffers(this : ID3D11DeviceContext3*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.ds_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def cs_set_shader_resources(this : ID3D11DeviceContext3*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.cs_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def cs_set_unordered_access_views(this : ID3D11DeviceContext3*, startslot : UInt32, numuavs : UInt32, ppunorderedaccessviews : ID3D11UnorderedAccessView*, puavinitialcounts : UInt32*) : Void
    @lpVtbl.value.cs_set_unordered_access_views.call(this, startslot, numuavs, ppunorderedaccessviews, puavinitialcounts)
  end
  def cs_set_shader(this : ID3D11DeviceContext3*, pcomputeshader : ID3D11ComputeShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.cs_set_shader.call(this, pcomputeshader, ppclassinstances, numclassinstances)
  end
  def cs_set_samplers(this : ID3D11DeviceContext3*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.cs_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def cs_set_constant_buffers(this : ID3D11DeviceContext3*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.cs_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def vs_get_constant_buffers(this : ID3D11DeviceContext3*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.vs_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ps_get_shader_resources(this : ID3D11DeviceContext3*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.ps_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def ps_get_shader(this : ID3D11DeviceContext3*, pppixelshader : ID3D11PixelShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.ps_get_shader.call(this, pppixelshader, ppclassinstances, pnumclassinstances)
  end
  def ps_get_samplers(this : ID3D11DeviceContext3*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.ps_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def vs_get_shader(this : ID3D11DeviceContext3*, ppvertexshader : ID3D11VertexShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.vs_get_shader.call(this, ppvertexshader, ppclassinstances, pnumclassinstances)
  end
  def ps_get_constant_buffers(this : ID3D11DeviceContext3*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.ps_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ia_get_input_layout(this : ID3D11DeviceContext3*, ppinputlayout : ID3D11InputLayout*) : Void
    @lpVtbl.value.ia_get_input_layout.call(this, ppinputlayout)
  end
  def ia_get_vertex_buffers(this : ID3D11DeviceContext3*, startslot : UInt32, numbuffers : UInt32, ppvertexbuffers : ID3D11Buffer*, pstrides : UInt32*, poffsets : UInt32*) : Void
    @lpVtbl.value.ia_get_vertex_buffers.call(this, startslot, numbuffers, ppvertexbuffers, pstrides, poffsets)
  end
  def ia_get_index_buffer(this : ID3D11DeviceContext3*, pindexbuffer : ID3D11Buffer*, format : DXGI_FORMAT*, offset : UInt32*) : Void
    @lpVtbl.value.ia_get_index_buffer.call(this, pindexbuffer, format, offset)
  end
  def gs_get_constant_buffers(this : ID3D11DeviceContext3*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.gs_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def gs_get_shader(this : ID3D11DeviceContext3*, ppgeometryshader : ID3D11GeometryShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.gs_get_shader.call(this, ppgeometryshader, ppclassinstances, pnumclassinstances)
  end
  def ia_get_primitive_topology(this : ID3D11DeviceContext3*, ptopology : D3D_PRIMITIVE_TOPOLOGY*) : Void
    @lpVtbl.value.ia_get_primitive_topology.call(this, ptopology)
  end
  def vs_get_shader_resources(this : ID3D11DeviceContext3*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.vs_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def vs_get_samplers(this : ID3D11DeviceContext3*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.vs_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def get_predication(this : ID3D11DeviceContext3*, pppredicate : ID3D11Predicate*, ppredicatevalue : LibC::BOOL*) : Void
    @lpVtbl.value.get_predication.call(this, pppredicate, ppredicatevalue)
  end
  def gs_get_shader_resources(this : ID3D11DeviceContext3*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.gs_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def gs_get_samplers(this : ID3D11DeviceContext3*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.gs_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def om_get_render_targets(this : ID3D11DeviceContext3*, numviews : UInt32, pprendertargetviews : ID3D11RenderTargetView*, ppdepthstencilview : ID3D11DepthStencilView*) : Void
    @lpVtbl.value.om_get_render_targets.call(this, numviews, pprendertargetviews, ppdepthstencilview)
  end
  def om_get_render_targets_and_unordered_access_views(this : ID3D11DeviceContext3*, numrtvs : UInt32, pprendertargetviews : ID3D11RenderTargetView*, ppdepthstencilview : ID3D11DepthStencilView*, uavstartslot : UInt32, numuavs : UInt32, ppunorderedaccessviews : ID3D11UnorderedAccessView*) : Void
    @lpVtbl.value.om_get_render_targets_and_unordered_access_views.call(this, numrtvs, pprendertargetviews, ppdepthstencilview, uavstartslot, numuavs, ppunorderedaccessviews)
  end
  def om_get_blend_state(this : ID3D11DeviceContext3*, ppblendstate : ID3D11BlendState*, blendfactor : Float32*, psamplemask : UInt32*) : Void
    @lpVtbl.value.om_get_blend_state.call(this, ppblendstate, blendfactor, psamplemask)
  end
  def om_get_depth_stencil_state(this : ID3D11DeviceContext3*, ppdepthstencilstate : ID3D11DepthStencilState*, pstencilref : UInt32*) : Void
    @lpVtbl.value.om_get_depth_stencil_state.call(this, ppdepthstencilstate, pstencilref)
  end
  def so_get_targets(this : ID3D11DeviceContext3*, numbuffers : UInt32, ppsotargets : ID3D11Buffer*) : Void
    @lpVtbl.value.so_get_targets.call(this, numbuffers, ppsotargets)
  end
  def rs_get_state(this : ID3D11DeviceContext3*, pprasterizerstate : ID3D11RasterizerState*) : Void
    @lpVtbl.value.rs_get_state.call(this, pprasterizerstate)
  end
  def rs_get_viewports(this : ID3D11DeviceContext3*, pnumviewports : UInt32*, pviewports : D3D11_VIEWPORT*) : Void
    @lpVtbl.value.rs_get_viewports.call(this, pnumviewports, pviewports)
  end
  def rs_get_scissor_rects(this : ID3D11DeviceContext3*, pnumrects : UInt32*, prects : RECT*) : Void
    @lpVtbl.value.rs_get_scissor_rects.call(this, pnumrects, prects)
  end
  def hs_get_shader_resources(this : ID3D11DeviceContext3*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.hs_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def hs_get_shader(this : ID3D11DeviceContext3*, pphullshader : ID3D11HullShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.hs_get_shader.call(this, pphullshader, ppclassinstances, pnumclassinstances)
  end
  def hs_get_samplers(this : ID3D11DeviceContext3*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.hs_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def hs_get_constant_buffers(this : ID3D11DeviceContext3*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.hs_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ds_get_shader_resources(this : ID3D11DeviceContext3*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.ds_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def ds_get_shader(this : ID3D11DeviceContext3*, ppdomainshader : ID3D11DomainShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.ds_get_shader.call(this, ppdomainshader, ppclassinstances, pnumclassinstances)
  end
  def ds_get_samplers(this : ID3D11DeviceContext3*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.ds_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def ds_get_constant_buffers(this : ID3D11DeviceContext3*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.ds_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def cs_get_shader_resources(this : ID3D11DeviceContext3*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.cs_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def cs_get_unordered_access_views(this : ID3D11DeviceContext3*, startslot : UInt32, numuavs : UInt32, ppunorderedaccessviews : ID3D11UnorderedAccessView*) : Void
    @lpVtbl.value.cs_get_unordered_access_views.call(this, startslot, numuavs, ppunorderedaccessviews)
  end
  def cs_get_shader(this : ID3D11DeviceContext3*, ppcomputeshader : ID3D11ComputeShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.cs_get_shader.call(this, ppcomputeshader, ppclassinstances, pnumclassinstances)
  end
  def cs_get_samplers(this : ID3D11DeviceContext3*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.cs_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def cs_get_constant_buffers(this : ID3D11DeviceContext3*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.cs_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def clear_state(this : ID3D11DeviceContext3*) : Void
    @lpVtbl.value.clear_state.call(this)
  end
  def flush(this : ID3D11DeviceContext3*) : Void
    @lpVtbl.value.flush.call(this)
  end
  def get_type(this : ID3D11DeviceContext3*) : D3D11_DEVICE_CONTEXT_TYPE
    @lpVtbl.value.get_type.call(this)
  end
  def get_context_flags(this : ID3D11DeviceContext3*) : UInt32
    @lpVtbl.value.get_context_flags.call(this)
  end
  def finish_command_list(this : ID3D11DeviceContext3*, restoredeferredcontextstate : LibC::BOOL, ppcommandlist : ID3D11CommandList*) : HRESULT
    @lpVtbl.value.finish_command_list.call(this, restoredeferredcontextstate, ppcommandlist)
  end
  def copy_subresource_region1(this : ID3D11DeviceContext3*, pdstresource : ID3D11Resource, dstsubresource : UInt32, dstx : UInt32, dsty : UInt32, dstz : UInt32, psrcresource : ID3D11Resource, srcsubresource : UInt32, psrcbox : D3D11_BOX*, copyflags : UInt32) : Void
    @lpVtbl.value.copy_subresource_region1.call(this, pdstresource, dstsubresource, dstx, dsty, dstz, psrcresource, srcsubresource, psrcbox, copyflags)
  end
  def update_subresource1(this : ID3D11DeviceContext3*, pdstresource : ID3D11Resource, dstsubresource : UInt32, pdstbox : D3D11_BOX*, psrcdata : Void*, srcrowpitch : UInt32, srcdepthpitch : UInt32, copyflags : UInt32) : Void
    @lpVtbl.value.update_subresource1.call(this, pdstresource, dstsubresource, pdstbox, psrcdata, srcrowpitch, srcdepthpitch, copyflags)
  end
  def discard_resource(this : ID3D11DeviceContext3*, presource : ID3D11Resource) : Void
    @lpVtbl.value.discard_resource.call(this, presource)
  end
  def discard_view(this : ID3D11DeviceContext3*, presourceview : ID3D11View) : Void
    @lpVtbl.value.discard_view.call(this, presourceview)
  end
  def vs_set_constant_buffers1(this : ID3D11DeviceContext3*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.vs_set_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def hs_set_constant_buffers1(this : ID3D11DeviceContext3*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.hs_set_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def ds_set_constant_buffers1(this : ID3D11DeviceContext3*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.ds_set_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def gs_set_constant_buffers1(this : ID3D11DeviceContext3*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.gs_set_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def ps_set_constant_buffers1(this : ID3D11DeviceContext3*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.ps_set_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def cs_set_constant_buffers1(this : ID3D11DeviceContext3*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.cs_set_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def vs_get_constant_buffers1(this : ID3D11DeviceContext3*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.vs_get_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def hs_get_constant_buffers1(this : ID3D11DeviceContext3*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.hs_get_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def ds_get_constant_buffers1(this : ID3D11DeviceContext3*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.ds_get_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def gs_get_constant_buffers1(this : ID3D11DeviceContext3*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.gs_get_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def ps_get_constant_buffers1(this : ID3D11DeviceContext3*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.ps_get_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def cs_get_constant_buffers1(this : ID3D11DeviceContext3*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.cs_get_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def swap_device_context_state(this : ID3D11DeviceContext3*, pstate : ID3DDeviceContextState, pppreviousstate : ID3DDeviceContextState*) : Void
    @lpVtbl.value.swap_device_context_state.call(this, pstate, pppreviousstate)
  end
  def clear_view(this : ID3D11DeviceContext3*, pview : ID3D11View, color : Float32*, prect : RECT*, numrects : UInt32) : Void
    @lpVtbl.value.clear_view.call(this, pview, color, prect, numrects)
  end
  def discard_view1(this : ID3D11DeviceContext3*, presourceview : ID3D11View, prects : RECT*, numrects : UInt32) : Void
    @lpVtbl.value.discard_view1.call(this, presourceview, prects, numrects)
  end
  def update_tile_mappings(this : ID3D11DeviceContext3*, ptiledresource : ID3D11Resource, numtiledresourceregions : UInt32, ptiledresourceregionstartcoordinates : D3D11_TILED_RESOURCE_COORDINATE*, ptiledresourceregionsizes : D3D11_TILE_REGION_SIZE*, ptilepool : ID3D11Buffer, numranges : UInt32, prangeflags : UInt32*, ptilepoolstartoffsets : UInt32*, prangetilecounts : UInt32*, flags : UInt32) : HRESULT
    @lpVtbl.value.update_tile_mappings.call(this, ptiledresource, numtiledresourceregions, ptiledresourceregionstartcoordinates, ptiledresourceregionsizes, ptilepool, numranges, prangeflags, ptilepoolstartoffsets, prangetilecounts, flags)
  end
  def copy_tile_mappings(this : ID3D11DeviceContext3*, pdesttiledresource : ID3D11Resource, pdestregionstartcoordinate : D3D11_TILED_RESOURCE_COORDINATE*, psourcetiledresource : ID3D11Resource, psourceregionstartcoordinate : D3D11_TILED_RESOURCE_COORDINATE*, ptileregionsize : D3D11_TILE_REGION_SIZE*, flags : UInt32) : HRESULT
    @lpVtbl.value.copy_tile_mappings.call(this, pdesttiledresource, pdestregionstartcoordinate, psourcetiledresource, psourceregionstartcoordinate, ptileregionsize, flags)
  end
  def copy_tiles(this : ID3D11DeviceContext3*, ptiledresource : ID3D11Resource, ptileregionstartcoordinate : D3D11_TILED_RESOURCE_COORDINATE*, ptileregionsize : D3D11_TILE_REGION_SIZE*, pbuffer : ID3D11Buffer, bufferstartoffsetinbytes : UInt64, flags : UInt32) : Void
    @lpVtbl.value.copy_tiles.call(this, ptiledresource, ptileregionstartcoordinate, ptileregionsize, pbuffer, bufferstartoffsetinbytes, flags)
  end
  def update_tiles(this : ID3D11DeviceContext3*, pdesttiledresource : ID3D11Resource, pdesttileregionstartcoordinate : D3D11_TILED_RESOURCE_COORDINATE*, pdesttileregionsize : D3D11_TILE_REGION_SIZE*, psourcetiledata : Void*, flags : UInt32) : Void
    @lpVtbl.value.update_tiles.call(this, pdesttiledresource, pdesttileregionstartcoordinate, pdesttileregionsize, psourcetiledata, flags)
  end
  def resize_tile_pool(this : ID3D11DeviceContext3*, ptilepool : ID3D11Buffer, newsizeinbytes : UInt64) : HRESULT
    @lpVtbl.value.resize_tile_pool.call(this, ptilepool, newsizeinbytes)
  end
  def tiled_resource_barrier(this : ID3D11DeviceContext3*, ptiledresourceorviewaccessbeforebarrier : ID3D11DeviceChild, ptiledresourceorviewaccessafterbarrier : ID3D11DeviceChild) : Void
    @lpVtbl.value.tiled_resource_barrier.call(this, ptiledresourceorviewaccessbeforebarrier, ptiledresourceorviewaccessafterbarrier)
  end
  def is_annotation_enabled(this : ID3D11DeviceContext3*) : LibC::BOOL
    @lpVtbl.value.is_annotation_enabled.call(this)
  end
  def set_marker_int(this : ID3D11DeviceContext3*, plabel : LibC::LPWSTR, data : Int32) : Void
    @lpVtbl.value.set_marker_int.call(this, plabel, data)
  end
  def begin_event_int(this : ID3D11DeviceContext3*, plabel : LibC::LPWSTR, data : Int32) : Void
    @lpVtbl.value.begin_event_int.call(this, plabel, data)
  end
  def end_event(this : ID3D11DeviceContext3*) : Void
    @lpVtbl.value.end_event.call(this)
  end
  def flush1(this : ID3D11DeviceContext3*, contexttype : D3D11_CONTEXT_TYPE, hevent : LibC::HANDLE) : Void
    @lpVtbl.value.flush1.call(this, contexttype, hevent)
  end
  def set_hardware_protection_state(this : ID3D11DeviceContext3*, hwprotectionenable : LibC::BOOL) : Void
    @lpVtbl.value.set_hardware_protection_state.call(this, hwprotectionenable)
  end
  def get_hardware_protection_state(this : ID3D11DeviceContext3*, phwprotectionenable : LibC::BOOL*) : Void
    @lpVtbl.value.get_hardware_protection_state.call(this, phwprotectionenable)
  end
end
struct LibWin32::ID3D11Fence
  def query_interface(this : ID3D11Fence*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11Fence*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11Fence*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11Fence*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11Fence*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11Fence*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11Fence*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def create_shared_handle(this : ID3D11Fence*, pattributes : SECURITY_ATTRIBUTES*, dwaccess : UInt32, lpname : LibC::LPWSTR, phandle : LibC::HANDLE*) : HRESULT
    @lpVtbl.value.create_shared_handle.call(this, pattributes, dwaccess, lpname, phandle)
  end
  def get_completed_value(this : ID3D11Fence*) : UInt64
    @lpVtbl.value.get_completed_value.call(this)
  end
  def set_event_on_completion(this : ID3D11Fence*, value : UInt64, hevent : LibC::HANDLE) : HRESULT
    @lpVtbl.value.set_event_on_completion.call(this, value, hevent)
  end
end
struct LibWin32::ID3D11DeviceContext4
  def query_interface(this : ID3D11DeviceContext4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11DeviceContext4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11DeviceContext4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11DeviceContext4*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11DeviceContext4*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11DeviceContext4*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11DeviceContext4*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def vs_set_constant_buffers(this : ID3D11DeviceContext4*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.vs_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ps_set_shader_resources(this : ID3D11DeviceContext4*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.ps_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def ps_set_shader(this : ID3D11DeviceContext4*, ppixelshader : ID3D11PixelShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.ps_set_shader.call(this, ppixelshader, ppclassinstances, numclassinstances)
  end
  def ps_set_samplers(this : ID3D11DeviceContext4*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.ps_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def vs_set_shader(this : ID3D11DeviceContext4*, pvertexshader : ID3D11VertexShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.vs_set_shader.call(this, pvertexshader, ppclassinstances, numclassinstances)
  end
  def draw_indexed(this : ID3D11DeviceContext4*, indexcount : UInt32, startindexlocation : UInt32, basevertexlocation : Int32) : Void
    @lpVtbl.value.draw_indexed.call(this, indexcount, startindexlocation, basevertexlocation)
  end
  def draw(this : ID3D11DeviceContext4*, vertexcount : UInt32, startvertexlocation : UInt32) : Void
    @lpVtbl.value.draw.call(this, vertexcount, startvertexlocation)
  end
  def map(this : ID3D11DeviceContext4*, presource : ID3D11Resource, subresource : UInt32, maptype : D3D11_MAP, mapflags : UInt32, pmappedresource : D3D11_MAPPED_SUBRESOURCE*) : HRESULT
    @lpVtbl.value.map.call(this, presource, subresource, maptype, mapflags, pmappedresource)
  end
  def unmap(this : ID3D11DeviceContext4*, presource : ID3D11Resource, subresource : UInt32) : Void
    @lpVtbl.value.unmap.call(this, presource, subresource)
  end
  def ps_set_constant_buffers(this : ID3D11DeviceContext4*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.ps_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ia_set_input_layout(this : ID3D11DeviceContext4*, pinputlayout : ID3D11InputLayout) : Void
    @lpVtbl.value.ia_set_input_layout.call(this, pinputlayout)
  end
  def ia_set_vertex_buffers(this : ID3D11DeviceContext4*, startslot : UInt32, numbuffers : UInt32, ppvertexbuffers : ID3D11Buffer*, pstrides : UInt32*, poffsets : UInt32*) : Void
    @lpVtbl.value.ia_set_vertex_buffers.call(this, startslot, numbuffers, ppvertexbuffers, pstrides, poffsets)
  end
  def ia_set_index_buffer(this : ID3D11DeviceContext4*, pindexbuffer : ID3D11Buffer, format : DXGI_FORMAT, offset : UInt32) : Void
    @lpVtbl.value.ia_set_index_buffer.call(this, pindexbuffer, format, offset)
  end
  def draw_indexed_instanced(this : ID3D11DeviceContext4*, indexcountperinstance : UInt32, instancecount : UInt32, startindexlocation : UInt32, basevertexlocation : Int32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_indexed_instanced.call(this, indexcountperinstance, instancecount, startindexlocation, basevertexlocation, startinstancelocation)
  end
  def draw_instanced(this : ID3D11DeviceContext4*, vertexcountperinstance : UInt32, instancecount : UInt32, startvertexlocation : UInt32, startinstancelocation : UInt32) : Void
    @lpVtbl.value.draw_instanced.call(this, vertexcountperinstance, instancecount, startvertexlocation, startinstancelocation)
  end
  def gs_set_constant_buffers(this : ID3D11DeviceContext4*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.gs_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def gs_set_shader(this : ID3D11DeviceContext4*, pshader : ID3D11GeometryShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.gs_set_shader.call(this, pshader, ppclassinstances, numclassinstances)
  end
  def ia_set_primitive_topology(this : ID3D11DeviceContext4*, topology : D3D_PRIMITIVE_TOPOLOGY) : Void
    @lpVtbl.value.ia_set_primitive_topology.call(this, topology)
  end
  def vs_set_shader_resources(this : ID3D11DeviceContext4*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.vs_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def vs_set_samplers(this : ID3D11DeviceContext4*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.vs_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def begin_(this : ID3D11DeviceContext4*, pasync : ID3D11Asynchronous) : Void
    @lpVtbl.value.begin_.call(this, pasync)
  end
  def end_(this : ID3D11DeviceContext4*, pasync : ID3D11Asynchronous) : Void
    @lpVtbl.value.end_.call(this, pasync)
  end
  def get_data(this : ID3D11DeviceContext4*, pasync : ID3D11Asynchronous, pdata : Void*, datasize : UInt32, getdataflags : UInt32) : HRESULT
    @lpVtbl.value.get_data.call(this, pasync, pdata, datasize, getdataflags)
  end
  def set_predication(this : ID3D11DeviceContext4*, ppredicate : ID3D11Predicate, predicatevalue : LibC::BOOL) : Void
    @lpVtbl.value.set_predication.call(this, ppredicate, predicatevalue)
  end
  def gs_set_shader_resources(this : ID3D11DeviceContext4*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.gs_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def gs_set_samplers(this : ID3D11DeviceContext4*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.gs_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def om_set_render_targets(this : ID3D11DeviceContext4*, numviews : UInt32, pprendertargetviews : ID3D11RenderTargetView*, pdepthstencilview : ID3D11DepthStencilView) : Void
    @lpVtbl.value.om_set_render_targets.call(this, numviews, pprendertargetviews, pdepthstencilview)
  end
  def om_set_render_targets_and_unordered_access_views(this : ID3D11DeviceContext4*, numrtvs : UInt32, pprendertargetviews : ID3D11RenderTargetView*, pdepthstencilview : ID3D11DepthStencilView, uavstartslot : UInt32, numuavs : UInt32, ppunorderedaccessviews : ID3D11UnorderedAccessView*, puavinitialcounts : UInt32*) : Void
    @lpVtbl.value.om_set_render_targets_and_unordered_access_views.call(this, numrtvs, pprendertargetviews, pdepthstencilview, uavstartslot, numuavs, ppunorderedaccessviews, puavinitialcounts)
  end
  def om_set_blend_state(this : ID3D11DeviceContext4*, pblendstate : ID3D11BlendState, blendfactor : Float32*, samplemask : UInt32) : Void
    @lpVtbl.value.om_set_blend_state.call(this, pblendstate, blendfactor, samplemask)
  end
  def om_set_depth_stencil_state(this : ID3D11DeviceContext4*, pdepthstencilstate : ID3D11DepthStencilState, stencilref : UInt32) : Void
    @lpVtbl.value.om_set_depth_stencil_state.call(this, pdepthstencilstate, stencilref)
  end
  def so_set_targets(this : ID3D11DeviceContext4*, numbuffers : UInt32, ppsotargets : ID3D11Buffer*, poffsets : UInt32*) : Void
    @lpVtbl.value.so_set_targets.call(this, numbuffers, ppsotargets, poffsets)
  end
  def draw_auto(this : ID3D11DeviceContext4*) : Void
    @lpVtbl.value.draw_auto.call(this)
  end
  def draw_indexed_instanced_indirect(this : ID3D11DeviceContext4*, pbufferforargs : ID3D11Buffer, alignedbyteoffsetforargs : UInt32) : Void
    @lpVtbl.value.draw_indexed_instanced_indirect.call(this, pbufferforargs, alignedbyteoffsetforargs)
  end
  def draw_instanced_indirect(this : ID3D11DeviceContext4*, pbufferforargs : ID3D11Buffer, alignedbyteoffsetforargs : UInt32) : Void
    @lpVtbl.value.draw_instanced_indirect.call(this, pbufferforargs, alignedbyteoffsetforargs)
  end
  def dispatch(this : ID3D11DeviceContext4*, threadgroupcountx : UInt32, threadgroupcounty : UInt32, threadgroupcountz : UInt32) : Void
    @lpVtbl.value.dispatch.call(this, threadgroupcountx, threadgroupcounty, threadgroupcountz)
  end
  def dispatch_indirect(this : ID3D11DeviceContext4*, pbufferforargs : ID3D11Buffer, alignedbyteoffsetforargs : UInt32) : Void
    @lpVtbl.value.dispatch_indirect.call(this, pbufferforargs, alignedbyteoffsetforargs)
  end
  def rs_set_state(this : ID3D11DeviceContext4*, prasterizerstate : ID3D11RasterizerState) : Void
    @lpVtbl.value.rs_set_state.call(this, prasterizerstate)
  end
  def rs_set_viewports(this : ID3D11DeviceContext4*, numviewports : UInt32, pviewports : D3D11_VIEWPORT*) : Void
    @lpVtbl.value.rs_set_viewports.call(this, numviewports, pviewports)
  end
  def rs_set_scissor_rects(this : ID3D11DeviceContext4*, numrects : UInt32, prects : RECT*) : Void
    @lpVtbl.value.rs_set_scissor_rects.call(this, numrects, prects)
  end
  def copy_subresource_region(this : ID3D11DeviceContext4*, pdstresource : ID3D11Resource, dstsubresource : UInt32, dstx : UInt32, dsty : UInt32, dstz : UInt32, psrcresource : ID3D11Resource, srcsubresource : UInt32, psrcbox : D3D11_BOX*) : Void
    @lpVtbl.value.copy_subresource_region.call(this, pdstresource, dstsubresource, dstx, dsty, dstz, psrcresource, srcsubresource, psrcbox)
  end
  def copy_resource(this : ID3D11DeviceContext4*, pdstresource : ID3D11Resource, psrcresource : ID3D11Resource) : Void
    @lpVtbl.value.copy_resource.call(this, pdstresource, psrcresource)
  end
  def update_subresource(this : ID3D11DeviceContext4*, pdstresource : ID3D11Resource, dstsubresource : UInt32, pdstbox : D3D11_BOX*, psrcdata : Void*, srcrowpitch : UInt32, srcdepthpitch : UInt32) : Void
    @lpVtbl.value.update_subresource.call(this, pdstresource, dstsubresource, pdstbox, psrcdata, srcrowpitch, srcdepthpitch)
  end
  def copy_structure_count(this : ID3D11DeviceContext4*, pdstbuffer : ID3D11Buffer, dstalignedbyteoffset : UInt32, psrcview : ID3D11UnorderedAccessView) : Void
    @lpVtbl.value.copy_structure_count.call(this, pdstbuffer, dstalignedbyteoffset, psrcview)
  end
  def clear_render_target_view(this : ID3D11DeviceContext4*, prendertargetview : ID3D11RenderTargetView, colorrgba : Float32*) : Void
    @lpVtbl.value.clear_render_target_view.call(this, prendertargetview, colorrgba)
  end
  def clear_unordered_access_view_uint(this : ID3D11DeviceContext4*, punorderedaccessview : ID3D11UnorderedAccessView, values : UInt32*) : Void
    @lpVtbl.value.clear_unordered_access_view_uint.call(this, punorderedaccessview, values)
  end
  def clear_unordered_access_view_float(this : ID3D11DeviceContext4*, punorderedaccessview : ID3D11UnorderedAccessView, values : Float32*) : Void
    @lpVtbl.value.clear_unordered_access_view_float.call(this, punorderedaccessview, values)
  end
  def clear_depth_stencil_view(this : ID3D11DeviceContext4*, pdepthstencilview : ID3D11DepthStencilView, clearflags : UInt32, depth : Float32, stencil : UInt8) : Void
    @lpVtbl.value.clear_depth_stencil_view.call(this, pdepthstencilview, clearflags, depth, stencil)
  end
  def generate_mips(this : ID3D11DeviceContext4*, pshaderresourceview : ID3D11ShaderResourceView) : Void
    @lpVtbl.value.generate_mips.call(this, pshaderresourceview)
  end
  def set_resource_min_lod(this : ID3D11DeviceContext4*, presource : ID3D11Resource, minlod : Float32) : Void
    @lpVtbl.value.set_resource_min_lod.call(this, presource, minlod)
  end
  def get_resource_min_lod(this : ID3D11DeviceContext4*, presource : ID3D11Resource) : Float32
    @lpVtbl.value.get_resource_min_lod.call(this, presource)
  end
  def resolve_subresource(this : ID3D11DeviceContext4*, pdstresource : ID3D11Resource, dstsubresource : UInt32, psrcresource : ID3D11Resource, srcsubresource : UInt32, format : DXGI_FORMAT) : Void
    @lpVtbl.value.resolve_subresource.call(this, pdstresource, dstsubresource, psrcresource, srcsubresource, format)
  end
  def execute_command_list(this : ID3D11DeviceContext4*, pcommandlist : ID3D11CommandList, restorecontextstate : LibC::BOOL) : Void
    @lpVtbl.value.execute_command_list.call(this, pcommandlist, restorecontextstate)
  end
  def hs_set_shader_resources(this : ID3D11DeviceContext4*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.hs_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def hs_set_shader(this : ID3D11DeviceContext4*, phullshader : ID3D11HullShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.hs_set_shader.call(this, phullshader, ppclassinstances, numclassinstances)
  end
  def hs_set_samplers(this : ID3D11DeviceContext4*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.hs_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def hs_set_constant_buffers(this : ID3D11DeviceContext4*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.hs_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ds_set_shader_resources(this : ID3D11DeviceContext4*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.ds_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def ds_set_shader(this : ID3D11DeviceContext4*, pdomainshader : ID3D11DomainShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.ds_set_shader.call(this, pdomainshader, ppclassinstances, numclassinstances)
  end
  def ds_set_samplers(this : ID3D11DeviceContext4*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.ds_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def ds_set_constant_buffers(this : ID3D11DeviceContext4*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.ds_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def cs_set_shader_resources(this : ID3D11DeviceContext4*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.cs_set_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def cs_set_unordered_access_views(this : ID3D11DeviceContext4*, startslot : UInt32, numuavs : UInt32, ppunorderedaccessviews : ID3D11UnorderedAccessView*, puavinitialcounts : UInt32*) : Void
    @lpVtbl.value.cs_set_unordered_access_views.call(this, startslot, numuavs, ppunorderedaccessviews, puavinitialcounts)
  end
  def cs_set_shader(this : ID3D11DeviceContext4*, pcomputeshader : ID3D11ComputeShader, ppclassinstances : ID3D11ClassInstance*, numclassinstances : UInt32) : Void
    @lpVtbl.value.cs_set_shader.call(this, pcomputeshader, ppclassinstances, numclassinstances)
  end
  def cs_set_samplers(this : ID3D11DeviceContext4*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.cs_set_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def cs_set_constant_buffers(this : ID3D11DeviceContext4*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.cs_set_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def vs_get_constant_buffers(this : ID3D11DeviceContext4*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.vs_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ps_get_shader_resources(this : ID3D11DeviceContext4*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.ps_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def ps_get_shader(this : ID3D11DeviceContext4*, pppixelshader : ID3D11PixelShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.ps_get_shader.call(this, pppixelshader, ppclassinstances, pnumclassinstances)
  end
  def ps_get_samplers(this : ID3D11DeviceContext4*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.ps_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def vs_get_shader(this : ID3D11DeviceContext4*, ppvertexshader : ID3D11VertexShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.vs_get_shader.call(this, ppvertexshader, ppclassinstances, pnumclassinstances)
  end
  def ps_get_constant_buffers(this : ID3D11DeviceContext4*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.ps_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ia_get_input_layout(this : ID3D11DeviceContext4*, ppinputlayout : ID3D11InputLayout*) : Void
    @lpVtbl.value.ia_get_input_layout.call(this, ppinputlayout)
  end
  def ia_get_vertex_buffers(this : ID3D11DeviceContext4*, startslot : UInt32, numbuffers : UInt32, ppvertexbuffers : ID3D11Buffer*, pstrides : UInt32*, poffsets : UInt32*) : Void
    @lpVtbl.value.ia_get_vertex_buffers.call(this, startslot, numbuffers, ppvertexbuffers, pstrides, poffsets)
  end
  def ia_get_index_buffer(this : ID3D11DeviceContext4*, pindexbuffer : ID3D11Buffer*, format : DXGI_FORMAT*, offset : UInt32*) : Void
    @lpVtbl.value.ia_get_index_buffer.call(this, pindexbuffer, format, offset)
  end
  def gs_get_constant_buffers(this : ID3D11DeviceContext4*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.gs_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def gs_get_shader(this : ID3D11DeviceContext4*, ppgeometryshader : ID3D11GeometryShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.gs_get_shader.call(this, ppgeometryshader, ppclassinstances, pnumclassinstances)
  end
  def ia_get_primitive_topology(this : ID3D11DeviceContext4*, ptopology : D3D_PRIMITIVE_TOPOLOGY*) : Void
    @lpVtbl.value.ia_get_primitive_topology.call(this, ptopology)
  end
  def vs_get_shader_resources(this : ID3D11DeviceContext4*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.vs_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def vs_get_samplers(this : ID3D11DeviceContext4*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.vs_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def get_predication(this : ID3D11DeviceContext4*, pppredicate : ID3D11Predicate*, ppredicatevalue : LibC::BOOL*) : Void
    @lpVtbl.value.get_predication.call(this, pppredicate, ppredicatevalue)
  end
  def gs_get_shader_resources(this : ID3D11DeviceContext4*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.gs_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def gs_get_samplers(this : ID3D11DeviceContext4*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.gs_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def om_get_render_targets(this : ID3D11DeviceContext4*, numviews : UInt32, pprendertargetviews : ID3D11RenderTargetView*, ppdepthstencilview : ID3D11DepthStencilView*) : Void
    @lpVtbl.value.om_get_render_targets.call(this, numviews, pprendertargetviews, ppdepthstencilview)
  end
  def om_get_render_targets_and_unordered_access_views(this : ID3D11DeviceContext4*, numrtvs : UInt32, pprendertargetviews : ID3D11RenderTargetView*, ppdepthstencilview : ID3D11DepthStencilView*, uavstartslot : UInt32, numuavs : UInt32, ppunorderedaccessviews : ID3D11UnorderedAccessView*) : Void
    @lpVtbl.value.om_get_render_targets_and_unordered_access_views.call(this, numrtvs, pprendertargetviews, ppdepthstencilview, uavstartslot, numuavs, ppunorderedaccessviews)
  end
  def om_get_blend_state(this : ID3D11DeviceContext4*, ppblendstate : ID3D11BlendState*, blendfactor : Float32*, psamplemask : UInt32*) : Void
    @lpVtbl.value.om_get_blend_state.call(this, ppblendstate, blendfactor, psamplemask)
  end
  def om_get_depth_stencil_state(this : ID3D11DeviceContext4*, ppdepthstencilstate : ID3D11DepthStencilState*, pstencilref : UInt32*) : Void
    @lpVtbl.value.om_get_depth_stencil_state.call(this, ppdepthstencilstate, pstencilref)
  end
  def so_get_targets(this : ID3D11DeviceContext4*, numbuffers : UInt32, ppsotargets : ID3D11Buffer*) : Void
    @lpVtbl.value.so_get_targets.call(this, numbuffers, ppsotargets)
  end
  def rs_get_state(this : ID3D11DeviceContext4*, pprasterizerstate : ID3D11RasterizerState*) : Void
    @lpVtbl.value.rs_get_state.call(this, pprasterizerstate)
  end
  def rs_get_viewports(this : ID3D11DeviceContext4*, pnumviewports : UInt32*, pviewports : D3D11_VIEWPORT*) : Void
    @lpVtbl.value.rs_get_viewports.call(this, pnumviewports, pviewports)
  end
  def rs_get_scissor_rects(this : ID3D11DeviceContext4*, pnumrects : UInt32*, prects : RECT*) : Void
    @lpVtbl.value.rs_get_scissor_rects.call(this, pnumrects, prects)
  end
  def hs_get_shader_resources(this : ID3D11DeviceContext4*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.hs_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def hs_get_shader(this : ID3D11DeviceContext4*, pphullshader : ID3D11HullShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.hs_get_shader.call(this, pphullshader, ppclassinstances, pnumclassinstances)
  end
  def hs_get_samplers(this : ID3D11DeviceContext4*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.hs_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def hs_get_constant_buffers(this : ID3D11DeviceContext4*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.hs_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def ds_get_shader_resources(this : ID3D11DeviceContext4*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.ds_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def ds_get_shader(this : ID3D11DeviceContext4*, ppdomainshader : ID3D11DomainShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.ds_get_shader.call(this, ppdomainshader, ppclassinstances, pnumclassinstances)
  end
  def ds_get_samplers(this : ID3D11DeviceContext4*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.ds_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def ds_get_constant_buffers(this : ID3D11DeviceContext4*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.ds_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def cs_get_shader_resources(this : ID3D11DeviceContext4*, startslot : UInt32, numviews : UInt32, ppshaderresourceviews : ID3D11ShaderResourceView*) : Void
    @lpVtbl.value.cs_get_shader_resources.call(this, startslot, numviews, ppshaderresourceviews)
  end
  def cs_get_unordered_access_views(this : ID3D11DeviceContext4*, startslot : UInt32, numuavs : UInt32, ppunorderedaccessviews : ID3D11UnorderedAccessView*) : Void
    @lpVtbl.value.cs_get_unordered_access_views.call(this, startslot, numuavs, ppunorderedaccessviews)
  end
  def cs_get_shader(this : ID3D11DeviceContext4*, ppcomputeshader : ID3D11ComputeShader*, ppclassinstances : ID3D11ClassInstance*, pnumclassinstances : UInt32*) : Void
    @lpVtbl.value.cs_get_shader.call(this, ppcomputeshader, ppclassinstances, pnumclassinstances)
  end
  def cs_get_samplers(this : ID3D11DeviceContext4*, startslot : UInt32, numsamplers : UInt32, ppsamplers : ID3D11SamplerState*) : Void
    @lpVtbl.value.cs_get_samplers.call(this, startslot, numsamplers, ppsamplers)
  end
  def cs_get_constant_buffers(this : ID3D11DeviceContext4*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*) : Void
    @lpVtbl.value.cs_get_constant_buffers.call(this, startslot, numbuffers, ppconstantbuffers)
  end
  def clear_state(this : ID3D11DeviceContext4*) : Void
    @lpVtbl.value.clear_state.call(this)
  end
  def flush(this : ID3D11DeviceContext4*) : Void
    @lpVtbl.value.flush.call(this)
  end
  def get_type(this : ID3D11DeviceContext4*) : D3D11_DEVICE_CONTEXT_TYPE
    @lpVtbl.value.get_type.call(this)
  end
  def get_context_flags(this : ID3D11DeviceContext4*) : UInt32
    @lpVtbl.value.get_context_flags.call(this)
  end
  def finish_command_list(this : ID3D11DeviceContext4*, restoredeferredcontextstate : LibC::BOOL, ppcommandlist : ID3D11CommandList*) : HRESULT
    @lpVtbl.value.finish_command_list.call(this, restoredeferredcontextstate, ppcommandlist)
  end
  def copy_subresource_region1(this : ID3D11DeviceContext4*, pdstresource : ID3D11Resource, dstsubresource : UInt32, dstx : UInt32, dsty : UInt32, dstz : UInt32, psrcresource : ID3D11Resource, srcsubresource : UInt32, psrcbox : D3D11_BOX*, copyflags : UInt32) : Void
    @lpVtbl.value.copy_subresource_region1.call(this, pdstresource, dstsubresource, dstx, dsty, dstz, psrcresource, srcsubresource, psrcbox, copyflags)
  end
  def update_subresource1(this : ID3D11DeviceContext4*, pdstresource : ID3D11Resource, dstsubresource : UInt32, pdstbox : D3D11_BOX*, psrcdata : Void*, srcrowpitch : UInt32, srcdepthpitch : UInt32, copyflags : UInt32) : Void
    @lpVtbl.value.update_subresource1.call(this, pdstresource, dstsubresource, pdstbox, psrcdata, srcrowpitch, srcdepthpitch, copyflags)
  end
  def discard_resource(this : ID3D11DeviceContext4*, presource : ID3D11Resource) : Void
    @lpVtbl.value.discard_resource.call(this, presource)
  end
  def discard_view(this : ID3D11DeviceContext4*, presourceview : ID3D11View) : Void
    @lpVtbl.value.discard_view.call(this, presourceview)
  end
  def vs_set_constant_buffers1(this : ID3D11DeviceContext4*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.vs_set_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def hs_set_constant_buffers1(this : ID3D11DeviceContext4*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.hs_set_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def ds_set_constant_buffers1(this : ID3D11DeviceContext4*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.ds_set_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def gs_set_constant_buffers1(this : ID3D11DeviceContext4*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.gs_set_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def ps_set_constant_buffers1(this : ID3D11DeviceContext4*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.ps_set_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def cs_set_constant_buffers1(this : ID3D11DeviceContext4*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.cs_set_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def vs_get_constant_buffers1(this : ID3D11DeviceContext4*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.vs_get_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def hs_get_constant_buffers1(this : ID3D11DeviceContext4*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.hs_get_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def ds_get_constant_buffers1(this : ID3D11DeviceContext4*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.ds_get_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def gs_get_constant_buffers1(this : ID3D11DeviceContext4*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.gs_get_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def ps_get_constant_buffers1(this : ID3D11DeviceContext4*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.ps_get_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def cs_get_constant_buffers1(this : ID3D11DeviceContext4*, startslot : UInt32, numbuffers : UInt32, ppconstantbuffers : ID3D11Buffer*, pfirstconstant : UInt32*, pnumconstants : UInt32*) : Void
    @lpVtbl.value.cs_get_constant_buffers1.call(this, startslot, numbuffers, ppconstantbuffers, pfirstconstant, pnumconstants)
  end
  def swap_device_context_state(this : ID3D11DeviceContext4*, pstate : ID3DDeviceContextState, pppreviousstate : ID3DDeviceContextState*) : Void
    @lpVtbl.value.swap_device_context_state.call(this, pstate, pppreviousstate)
  end
  def clear_view(this : ID3D11DeviceContext4*, pview : ID3D11View, color : Float32*, prect : RECT*, numrects : UInt32) : Void
    @lpVtbl.value.clear_view.call(this, pview, color, prect, numrects)
  end
  def discard_view1(this : ID3D11DeviceContext4*, presourceview : ID3D11View, prects : RECT*, numrects : UInt32) : Void
    @lpVtbl.value.discard_view1.call(this, presourceview, prects, numrects)
  end
  def update_tile_mappings(this : ID3D11DeviceContext4*, ptiledresource : ID3D11Resource, numtiledresourceregions : UInt32, ptiledresourceregionstartcoordinates : D3D11_TILED_RESOURCE_COORDINATE*, ptiledresourceregionsizes : D3D11_TILE_REGION_SIZE*, ptilepool : ID3D11Buffer, numranges : UInt32, prangeflags : UInt32*, ptilepoolstartoffsets : UInt32*, prangetilecounts : UInt32*, flags : UInt32) : HRESULT
    @lpVtbl.value.update_tile_mappings.call(this, ptiledresource, numtiledresourceregions, ptiledresourceregionstartcoordinates, ptiledresourceregionsizes, ptilepool, numranges, prangeflags, ptilepoolstartoffsets, prangetilecounts, flags)
  end
  def copy_tile_mappings(this : ID3D11DeviceContext4*, pdesttiledresource : ID3D11Resource, pdestregionstartcoordinate : D3D11_TILED_RESOURCE_COORDINATE*, psourcetiledresource : ID3D11Resource, psourceregionstartcoordinate : D3D11_TILED_RESOURCE_COORDINATE*, ptileregionsize : D3D11_TILE_REGION_SIZE*, flags : UInt32) : HRESULT
    @lpVtbl.value.copy_tile_mappings.call(this, pdesttiledresource, pdestregionstartcoordinate, psourcetiledresource, psourceregionstartcoordinate, ptileregionsize, flags)
  end
  def copy_tiles(this : ID3D11DeviceContext4*, ptiledresource : ID3D11Resource, ptileregionstartcoordinate : D3D11_TILED_RESOURCE_COORDINATE*, ptileregionsize : D3D11_TILE_REGION_SIZE*, pbuffer : ID3D11Buffer, bufferstartoffsetinbytes : UInt64, flags : UInt32) : Void
    @lpVtbl.value.copy_tiles.call(this, ptiledresource, ptileregionstartcoordinate, ptileregionsize, pbuffer, bufferstartoffsetinbytes, flags)
  end
  def update_tiles(this : ID3D11DeviceContext4*, pdesttiledresource : ID3D11Resource, pdesttileregionstartcoordinate : D3D11_TILED_RESOURCE_COORDINATE*, pdesttileregionsize : D3D11_TILE_REGION_SIZE*, psourcetiledata : Void*, flags : UInt32) : Void
    @lpVtbl.value.update_tiles.call(this, pdesttiledresource, pdesttileregionstartcoordinate, pdesttileregionsize, psourcetiledata, flags)
  end
  def resize_tile_pool(this : ID3D11DeviceContext4*, ptilepool : ID3D11Buffer, newsizeinbytes : UInt64) : HRESULT
    @lpVtbl.value.resize_tile_pool.call(this, ptilepool, newsizeinbytes)
  end
  def tiled_resource_barrier(this : ID3D11DeviceContext4*, ptiledresourceorviewaccessbeforebarrier : ID3D11DeviceChild, ptiledresourceorviewaccessafterbarrier : ID3D11DeviceChild) : Void
    @lpVtbl.value.tiled_resource_barrier.call(this, ptiledresourceorviewaccessbeforebarrier, ptiledresourceorviewaccessafterbarrier)
  end
  def is_annotation_enabled(this : ID3D11DeviceContext4*) : LibC::BOOL
    @lpVtbl.value.is_annotation_enabled.call(this)
  end
  def set_marker_int(this : ID3D11DeviceContext4*, plabel : LibC::LPWSTR, data : Int32) : Void
    @lpVtbl.value.set_marker_int.call(this, plabel, data)
  end
  def begin_event_int(this : ID3D11DeviceContext4*, plabel : LibC::LPWSTR, data : Int32) : Void
    @lpVtbl.value.begin_event_int.call(this, plabel, data)
  end
  def end_event(this : ID3D11DeviceContext4*) : Void
    @lpVtbl.value.end_event.call(this)
  end
  def flush1(this : ID3D11DeviceContext4*, contexttype : D3D11_CONTEXT_TYPE, hevent : LibC::HANDLE) : Void
    @lpVtbl.value.flush1.call(this, contexttype, hevent)
  end
  def set_hardware_protection_state(this : ID3D11DeviceContext4*, hwprotectionenable : LibC::BOOL) : Void
    @lpVtbl.value.set_hardware_protection_state.call(this, hwprotectionenable)
  end
  def get_hardware_protection_state(this : ID3D11DeviceContext4*, phwprotectionenable : LibC::BOOL*) : Void
    @lpVtbl.value.get_hardware_protection_state.call(this, phwprotectionenable)
  end
  def signal(this : ID3D11DeviceContext4*, pfence : ID3D11Fence, value : UInt64) : HRESULT
    @lpVtbl.value.signal.call(this, pfence, value)
  end
  def wait(this : ID3D11DeviceContext4*, pfence : ID3D11Fence, value : UInt64) : HRESULT
    @lpVtbl.value.wait.call(this, pfence, value)
  end
end
struct LibWin32::ID3D11Device3
  def query_interface(this : ID3D11Device3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11Device3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11Device3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_buffer(this : ID3D11Device3*, pdesc : D3D11_BUFFER_DESC*, pinitialdata : D3D11_SUBRESOURCE_DATA*, ppbuffer : ID3D11Buffer*) : HRESULT
    @lpVtbl.value.create_buffer.call(this, pdesc, pinitialdata, ppbuffer)
  end
  def create_texture1_d(this : ID3D11Device3*, pdesc : D3D11_TEXTURE1D_DESC*, pinitialdata : D3D11_SUBRESOURCE_DATA*, pptexture1d : ID3D11Texture1D*) : HRESULT
    @lpVtbl.value.create_texture1_d.call(this, pdesc, pinitialdata, pptexture1d)
  end
  def create_texture2_d(this : ID3D11Device3*, pdesc : D3D11_TEXTURE2D_DESC*, pinitialdata : D3D11_SUBRESOURCE_DATA*, pptexture2d : ID3D11Texture2D*) : HRESULT
    @lpVtbl.value.create_texture2_d.call(this, pdesc, pinitialdata, pptexture2d)
  end
  def create_texture3_d(this : ID3D11Device3*, pdesc : D3D11_TEXTURE3D_DESC*, pinitialdata : D3D11_SUBRESOURCE_DATA*, pptexture3d : ID3D11Texture3D*) : HRESULT
    @lpVtbl.value.create_texture3_d.call(this, pdesc, pinitialdata, pptexture3d)
  end
  def create_shader_resource_view(this : ID3D11Device3*, presource : ID3D11Resource, pdesc : D3D11_SHADER_RESOURCE_VIEW_DESC*, ppsrview : ID3D11ShaderResourceView*) : HRESULT
    @lpVtbl.value.create_shader_resource_view.call(this, presource, pdesc, ppsrview)
  end
  def create_unordered_access_view(this : ID3D11Device3*, presource : ID3D11Resource, pdesc : D3D11_UNORDERED_ACCESS_VIEW_DESC*, ppuaview : ID3D11UnorderedAccessView*) : HRESULT
    @lpVtbl.value.create_unordered_access_view.call(this, presource, pdesc, ppuaview)
  end
  def create_render_target_view(this : ID3D11Device3*, presource : ID3D11Resource, pdesc : D3D11_RENDER_TARGET_VIEW_DESC*, pprtview : ID3D11RenderTargetView*) : HRESULT
    @lpVtbl.value.create_render_target_view.call(this, presource, pdesc, pprtview)
  end
  def create_depth_stencil_view(this : ID3D11Device3*, presource : ID3D11Resource, pdesc : D3D11_DEPTH_STENCIL_VIEW_DESC*, ppdepthstencilview : ID3D11DepthStencilView*) : HRESULT
    @lpVtbl.value.create_depth_stencil_view.call(this, presource, pdesc, ppdepthstencilview)
  end
  def create_input_layout(this : ID3D11Device3*, pinputelementdescs : D3D11_INPUT_ELEMENT_DESC*, numelements : UInt32, pshaderbytecodewithinputsignature : Void*, bytecodelength : LibC::UINT_PTR, ppinputlayout : ID3D11InputLayout*) : HRESULT
    @lpVtbl.value.create_input_layout.call(this, pinputelementdescs, numelements, pshaderbytecodewithinputsignature, bytecodelength, ppinputlayout)
  end
  def create_vertex_shader(this : ID3D11Device3*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, ppvertexshader : ID3D11VertexShader*) : HRESULT
    @lpVtbl.value.create_vertex_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, ppvertexshader)
  end
  def create_geometry_shader(this : ID3D11Device3*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, ppgeometryshader : ID3D11GeometryShader*) : HRESULT
    @lpVtbl.value.create_geometry_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, ppgeometryshader)
  end
  def create_geometry_shader_with_stream_output(this : ID3D11Device3*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, psodeclaration : D3D11_SO_DECLARATION_ENTRY*, numentries : UInt32, pbufferstrides : UInt32*, numstrides : UInt32, rasterizedstream : UInt32, pclasslinkage : ID3D11ClassLinkage, ppgeometryshader : ID3D11GeometryShader*) : HRESULT
    @lpVtbl.value.create_geometry_shader_with_stream_output.call(this, pshaderbytecode, bytecodelength, psodeclaration, numentries, pbufferstrides, numstrides, rasterizedstream, pclasslinkage, ppgeometryshader)
  end
  def create_pixel_shader(this : ID3D11Device3*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, pppixelshader : ID3D11PixelShader*) : HRESULT
    @lpVtbl.value.create_pixel_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, pppixelshader)
  end
  def create_hull_shader(this : ID3D11Device3*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, pphullshader : ID3D11HullShader*) : HRESULT
    @lpVtbl.value.create_hull_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, pphullshader)
  end
  def create_domain_shader(this : ID3D11Device3*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, ppdomainshader : ID3D11DomainShader*) : HRESULT
    @lpVtbl.value.create_domain_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, ppdomainshader)
  end
  def create_compute_shader(this : ID3D11Device3*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, ppcomputeshader : ID3D11ComputeShader*) : HRESULT
    @lpVtbl.value.create_compute_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, ppcomputeshader)
  end
  def create_class_linkage(this : ID3D11Device3*, pplinkage : ID3D11ClassLinkage*) : HRESULT
    @lpVtbl.value.create_class_linkage.call(this, pplinkage)
  end
  def create_blend_state(this : ID3D11Device3*, pblendstatedesc : D3D11_BLEND_DESC*, ppblendstate : ID3D11BlendState*) : HRESULT
    @lpVtbl.value.create_blend_state.call(this, pblendstatedesc, ppblendstate)
  end
  def create_depth_stencil_state(this : ID3D11Device3*, pdepthstencildesc : D3D11_DEPTH_STENCIL_DESC*, ppdepthstencilstate : ID3D11DepthStencilState*) : HRESULT
    @lpVtbl.value.create_depth_stencil_state.call(this, pdepthstencildesc, ppdepthstencilstate)
  end
  def create_rasterizer_state(this : ID3D11Device3*, prasterizerdesc : D3D11_RASTERIZER_DESC*, pprasterizerstate : ID3D11RasterizerState*) : HRESULT
    @lpVtbl.value.create_rasterizer_state.call(this, prasterizerdesc, pprasterizerstate)
  end
  def create_sampler_state(this : ID3D11Device3*, psamplerdesc : D3D11_SAMPLER_DESC*, ppsamplerstate : ID3D11SamplerState*) : HRESULT
    @lpVtbl.value.create_sampler_state.call(this, psamplerdesc, ppsamplerstate)
  end
  def create_query(this : ID3D11Device3*, pquerydesc : D3D11_QUERY_DESC*, ppquery : ID3D11Query*) : HRESULT
    @lpVtbl.value.create_query.call(this, pquerydesc, ppquery)
  end
  def create_predicate(this : ID3D11Device3*, ppredicatedesc : D3D11_QUERY_DESC*, pppredicate : ID3D11Predicate*) : HRESULT
    @lpVtbl.value.create_predicate.call(this, ppredicatedesc, pppredicate)
  end
  def create_counter(this : ID3D11Device3*, pcounterdesc : D3D11_COUNTER_DESC*, ppcounter : ID3D11Counter*) : HRESULT
    @lpVtbl.value.create_counter.call(this, pcounterdesc, ppcounter)
  end
  def create_deferred_context(this : ID3D11Device3*, contextflags : UInt32, ppdeferredcontext : ID3D11DeviceContext*) : HRESULT
    @lpVtbl.value.create_deferred_context.call(this, contextflags, ppdeferredcontext)
  end
  def open_shared_resource(this : ID3D11Device3*, hresource : LibC::HANDLE, returnedinterface : Guid*, ppresource : Void**) : HRESULT
    @lpVtbl.value.open_shared_resource.call(this, hresource, returnedinterface, ppresource)
  end
  def check_format_support(this : ID3D11Device3*, format : DXGI_FORMAT, pformatsupport : UInt32*) : HRESULT
    @lpVtbl.value.check_format_support.call(this, format, pformatsupport)
  end
  def check_multisample_quality_levels(this : ID3D11Device3*, format : DXGI_FORMAT, samplecount : UInt32, pnumqualitylevels : UInt32*) : HRESULT
    @lpVtbl.value.check_multisample_quality_levels.call(this, format, samplecount, pnumqualitylevels)
  end
  def check_counter_info(this : ID3D11Device3*, pcounterinfo : D3D11_COUNTER_INFO*) : Void
    @lpVtbl.value.check_counter_info.call(this, pcounterinfo)
  end
  def check_counter(this : ID3D11Device3*, pdesc : D3D11_COUNTER_DESC*, ptype : D3D11_COUNTER_TYPE*, pactivecounters : UInt32*, szname : UInt8*, pnamelength : UInt32*, szunits : UInt8*, punitslength : UInt32*, szdescription : UInt8*, pdescriptionlength : UInt32*) : HRESULT
    @lpVtbl.value.check_counter.call(this, pdesc, ptype, pactivecounters, szname, pnamelength, szunits, punitslength, szdescription, pdescriptionlength)
  end
  def check_feature_support(this : ID3D11Device3*, feature : D3D11_FEATURE, pfeaturesupportdata : Void*, featuresupportdatasize : UInt32) : HRESULT
    @lpVtbl.value.check_feature_support.call(this, feature, pfeaturesupportdata, featuresupportdatasize)
  end
  def get_private_data(this : ID3D11Device3*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11Device3*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11Device3*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_feature_level(this : ID3D11Device3*) : D3D_FEATURE_LEVEL
    @lpVtbl.value.get_feature_level.call(this)
  end
  def get_creation_flags(this : ID3D11Device3*) : UInt32
    @lpVtbl.value.get_creation_flags.call(this)
  end
  def get_device_removed_reason(this : ID3D11Device3*) : HRESULT
    @lpVtbl.value.get_device_removed_reason.call(this)
  end
  def get_immediate_context(this : ID3D11Device3*, ppimmediatecontext : ID3D11DeviceContext*) : Void
    @lpVtbl.value.get_immediate_context.call(this, ppimmediatecontext)
  end
  def set_exception_mode(this : ID3D11Device3*, raiseflags : UInt32) : HRESULT
    @lpVtbl.value.set_exception_mode.call(this, raiseflags)
  end
  def get_exception_mode(this : ID3D11Device3*) : UInt32
    @lpVtbl.value.get_exception_mode.call(this)
  end
  def get_immediate_context1(this : ID3D11Device3*, ppimmediatecontext : ID3D11DeviceContext1*) : Void
    @lpVtbl.value.get_immediate_context1.call(this, ppimmediatecontext)
  end
  def create_deferred_context1(this : ID3D11Device3*, contextflags : UInt32, ppdeferredcontext : ID3D11DeviceContext1*) : HRESULT
    @lpVtbl.value.create_deferred_context1.call(this, contextflags, ppdeferredcontext)
  end
  def create_blend_state1(this : ID3D11Device3*, pblendstatedesc : D3D11_BLEND_DESC1*, ppblendstate : ID3D11BlendState1*) : HRESULT
    @lpVtbl.value.create_blend_state1.call(this, pblendstatedesc, ppblendstate)
  end
  def create_rasterizer_state1(this : ID3D11Device3*, prasterizerdesc : D3D11_RASTERIZER_DESC1*, pprasterizerstate : ID3D11RasterizerState1*) : HRESULT
    @lpVtbl.value.create_rasterizer_state1.call(this, prasterizerdesc, pprasterizerstate)
  end
  def create_device_context_state(this : ID3D11Device3*, flags : UInt32, pfeaturelevels : D3D_FEATURE_LEVEL*, featurelevels : UInt32, sdkversion : UInt32, emulatedinterface : Guid*, pchosenfeaturelevel : D3D_FEATURE_LEVEL*, ppcontextstate : ID3DDeviceContextState*) : HRESULT
    @lpVtbl.value.create_device_context_state.call(this, flags, pfeaturelevels, featurelevels, sdkversion, emulatedinterface, pchosenfeaturelevel, ppcontextstate)
  end
  def open_shared_resource1(this : ID3D11Device3*, hresource : LibC::HANDLE, returnedinterface : Guid*, ppresource : Void**) : HRESULT
    @lpVtbl.value.open_shared_resource1.call(this, hresource, returnedinterface, ppresource)
  end
  def open_shared_resource_by_name(this : ID3D11Device3*, lpname : LibC::LPWSTR, dwdesiredaccess : UInt32, returnedinterface : Guid*, ppresource : Void**) : HRESULT
    @lpVtbl.value.open_shared_resource_by_name.call(this, lpname, dwdesiredaccess, returnedinterface, ppresource)
  end
  def get_immediate_context2(this : ID3D11Device3*, ppimmediatecontext : ID3D11DeviceContext2*) : Void
    @lpVtbl.value.get_immediate_context2.call(this, ppimmediatecontext)
  end
  def create_deferred_context2(this : ID3D11Device3*, contextflags : UInt32, ppdeferredcontext : ID3D11DeviceContext2*) : HRESULT
    @lpVtbl.value.create_deferred_context2.call(this, contextflags, ppdeferredcontext)
  end
  def get_resource_tiling(this : ID3D11Device3*, ptiledresource : ID3D11Resource, pnumtilesforentireresource : UInt32*, ppackedmipdesc : D3D11_PACKED_MIP_DESC*, pstandardtileshapefornonpackedmips : D3D11_TILE_SHAPE*, pnumsubresourcetilings : UInt32*, firstsubresourcetilingtoget : UInt32, psubresourcetilingsfornonpackedmips : D3D11_SUBRESOURCE_TILING*) : Void
    @lpVtbl.value.get_resource_tiling.call(this, ptiledresource, pnumtilesforentireresource, ppackedmipdesc, pstandardtileshapefornonpackedmips, pnumsubresourcetilings, firstsubresourcetilingtoget, psubresourcetilingsfornonpackedmips)
  end
  def check_multisample_quality_levels1(this : ID3D11Device3*, format : DXGI_FORMAT, samplecount : UInt32, flags : UInt32, pnumqualitylevels : UInt32*) : HRESULT
    @lpVtbl.value.check_multisample_quality_levels1.call(this, format, samplecount, flags, pnumqualitylevels)
  end
  def create_texture2_d1(this : ID3D11Device3*, pdesc1 : D3D11_TEXTURE2D_DESC1*, pinitialdata : D3D11_SUBRESOURCE_DATA*, pptexture2d : ID3D11Texture2D1*) : HRESULT
    @lpVtbl.value.create_texture2_d1.call(this, pdesc1, pinitialdata, pptexture2d)
  end
  def create_texture3_d1(this : ID3D11Device3*, pdesc1 : D3D11_TEXTURE3D_DESC1*, pinitialdata : D3D11_SUBRESOURCE_DATA*, pptexture3d : ID3D11Texture3D1*) : HRESULT
    @lpVtbl.value.create_texture3_d1.call(this, pdesc1, pinitialdata, pptexture3d)
  end
  def create_rasterizer_state2(this : ID3D11Device3*, prasterizerdesc : D3D11_RASTERIZER_DESC2*, pprasterizerstate : ID3D11RasterizerState2*) : HRESULT
    @lpVtbl.value.create_rasterizer_state2.call(this, prasterizerdesc, pprasterizerstate)
  end
  def create_shader_resource_view1(this : ID3D11Device3*, presource : ID3D11Resource, pdesc1 : D3D11_SHADER_RESOURCE_VIEW_DESC1*, ppsrview1 : ID3D11ShaderResourceView1*) : HRESULT
    @lpVtbl.value.create_shader_resource_view1.call(this, presource, pdesc1, ppsrview1)
  end
  def create_unordered_access_view1(this : ID3D11Device3*, presource : ID3D11Resource, pdesc1 : D3D11_UNORDERED_ACCESS_VIEW_DESC1*, ppuaview1 : ID3D11UnorderedAccessView1*) : HRESULT
    @lpVtbl.value.create_unordered_access_view1.call(this, presource, pdesc1, ppuaview1)
  end
  def create_render_target_view1(this : ID3D11Device3*, presource : ID3D11Resource, pdesc1 : D3D11_RENDER_TARGET_VIEW_DESC1*, pprtview1 : ID3D11RenderTargetView1*) : HRESULT
    @lpVtbl.value.create_render_target_view1.call(this, presource, pdesc1, pprtview1)
  end
  def create_query1(this : ID3D11Device3*, pquerydesc1 : D3D11_QUERY_DESC1*, ppquery1 : ID3D11Query1*) : HRESULT
    @lpVtbl.value.create_query1.call(this, pquerydesc1, ppquery1)
  end
  def get_immediate_context3(this : ID3D11Device3*, ppimmediatecontext : ID3D11DeviceContext3*) : Void
    @lpVtbl.value.get_immediate_context3.call(this, ppimmediatecontext)
  end
  def create_deferred_context3(this : ID3D11Device3*, contextflags : UInt32, ppdeferredcontext : ID3D11DeviceContext3*) : HRESULT
    @lpVtbl.value.create_deferred_context3.call(this, contextflags, ppdeferredcontext)
  end
  def write_to_subresource(this : ID3D11Device3*, pdstresource : ID3D11Resource, dstsubresource : UInt32, pdstbox : D3D11_BOX*, psrcdata : Void*, srcrowpitch : UInt32, srcdepthpitch : UInt32) : Void
    @lpVtbl.value.write_to_subresource.call(this, pdstresource, dstsubresource, pdstbox, psrcdata, srcrowpitch, srcdepthpitch)
  end
  def read_from_subresource(this : ID3D11Device3*, pdstdata : Void*, dstrowpitch : UInt32, dstdepthpitch : UInt32, psrcresource : ID3D11Resource, srcsubresource : UInt32, psrcbox : D3D11_BOX*) : Void
    @lpVtbl.value.read_from_subresource.call(this, pdstdata, dstrowpitch, dstdepthpitch, psrcresource, srcsubresource, psrcbox)
  end
end
struct LibWin32::ID3D11Device4
  def query_interface(this : ID3D11Device4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11Device4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11Device4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_buffer(this : ID3D11Device4*, pdesc : D3D11_BUFFER_DESC*, pinitialdata : D3D11_SUBRESOURCE_DATA*, ppbuffer : ID3D11Buffer*) : HRESULT
    @lpVtbl.value.create_buffer.call(this, pdesc, pinitialdata, ppbuffer)
  end
  def create_texture1_d(this : ID3D11Device4*, pdesc : D3D11_TEXTURE1D_DESC*, pinitialdata : D3D11_SUBRESOURCE_DATA*, pptexture1d : ID3D11Texture1D*) : HRESULT
    @lpVtbl.value.create_texture1_d.call(this, pdesc, pinitialdata, pptexture1d)
  end
  def create_texture2_d(this : ID3D11Device4*, pdesc : D3D11_TEXTURE2D_DESC*, pinitialdata : D3D11_SUBRESOURCE_DATA*, pptexture2d : ID3D11Texture2D*) : HRESULT
    @lpVtbl.value.create_texture2_d.call(this, pdesc, pinitialdata, pptexture2d)
  end
  def create_texture3_d(this : ID3D11Device4*, pdesc : D3D11_TEXTURE3D_DESC*, pinitialdata : D3D11_SUBRESOURCE_DATA*, pptexture3d : ID3D11Texture3D*) : HRESULT
    @lpVtbl.value.create_texture3_d.call(this, pdesc, pinitialdata, pptexture3d)
  end
  def create_shader_resource_view(this : ID3D11Device4*, presource : ID3D11Resource, pdesc : D3D11_SHADER_RESOURCE_VIEW_DESC*, ppsrview : ID3D11ShaderResourceView*) : HRESULT
    @lpVtbl.value.create_shader_resource_view.call(this, presource, pdesc, ppsrview)
  end
  def create_unordered_access_view(this : ID3D11Device4*, presource : ID3D11Resource, pdesc : D3D11_UNORDERED_ACCESS_VIEW_DESC*, ppuaview : ID3D11UnorderedAccessView*) : HRESULT
    @lpVtbl.value.create_unordered_access_view.call(this, presource, pdesc, ppuaview)
  end
  def create_render_target_view(this : ID3D11Device4*, presource : ID3D11Resource, pdesc : D3D11_RENDER_TARGET_VIEW_DESC*, pprtview : ID3D11RenderTargetView*) : HRESULT
    @lpVtbl.value.create_render_target_view.call(this, presource, pdesc, pprtview)
  end
  def create_depth_stencil_view(this : ID3D11Device4*, presource : ID3D11Resource, pdesc : D3D11_DEPTH_STENCIL_VIEW_DESC*, ppdepthstencilview : ID3D11DepthStencilView*) : HRESULT
    @lpVtbl.value.create_depth_stencil_view.call(this, presource, pdesc, ppdepthstencilview)
  end
  def create_input_layout(this : ID3D11Device4*, pinputelementdescs : D3D11_INPUT_ELEMENT_DESC*, numelements : UInt32, pshaderbytecodewithinputsignature : Void*, bytecodelength : LibC::UINT_PTR, ppinputlayout : ID3D11InputLayout*) : HRESULT
    @lpVtbl.value.create_input_layout.call(this, pinputelementdescs, numelements, pshaderbytecodewithinputsignature, bytecodelength, ppinputlayout)
  end
  def create_vertex_shader(this : ID3D11Device4*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, ppvertexshader : ID3D11VertexShader*) : HRESULT
    @lpVtbl.value.create_vertex_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, ppvertexshader)
  end
  def create_geometry_shader(this : ID3D11Device4*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, ppgeometryshader : ID3D11GeometryShader*) : HRESULT
    @lpVtbl.value.create_geometry_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, ppgeometryshader)
  end
  def create_geometry_shader_with_stream_output(this : ID3D11Device4*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, psodeclaration : D3D11_SO_DECLARATION_ENTRY*, numentries : UInt32, pbufferstrides : UInt32*, numstrides : UInt32, rasterizedstream : UInt32, pclasslinkage : ID3D11ClassLinkage, ppgeometryshader : ID3D11GeometryShader*) : HRESULT
    @lpVtbl.value.create_geometry_shader_with_stream_output.call(this, pshaderbytecode, bytecodelength, psodeclaration, numentries, pbufferstrides, numstrides, rasterizedstream, pclasslinkage, ppgeometryshader)
  end
  def create_pixel_shader(this : ID3D11Device4*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, pppixelshader : ID3D11PixelShader*) : HRESULT
    @lpVtbl.value.create_pixel_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, pppixelshader)
  end
  def create_hull_shader(this : ID3D11Device4*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, pphullshader : ID3D11HullShader*) : HRESULT
    @lpVtbl.value.create_hull_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, pphullshader)
  end
  def create_domain_shader(this : ID3D11Device4*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, ppdomainshader : ID3D11DomainShader*) : HRESULT
    @lpVtbl.value.create_domain_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, ppdomainshader)
  end
  def create_compute_shader(this : ID3D11Device4*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, ppcomputeshader : ID3D11ComputeShader*) : HRESULT
    @lpVtbl.value.create_compute_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, ppcomputeshader)
  end
  def create_class_linkage(this : ID3D11Device4*, pplinkage : ID3D11ClassLinkage*) : HRESULT
    @lpVtbl.value.create_class_linkage.call(this, pplinkage)
  end
  def create_blend_state(this : ID3D11Device4*, pblendstatedesc : D3D11_BLEND_DESC*, ppblendstate : ID3D11BlendState*) : HRESULT
    @lpVtbl.value.create_blend_state.call(this, pblendstatedesc, ppblendstate)
  end
  def create_depth_stencil_state(this : ID3D11Device4*, pdepthstencildesc : D3D11_DEPTH_STENCIL_DESC*, ppdepthstencilstate : ID3D11DepthStencilState*) : HRESULT
    @lpVtbl.value.create_depth_stencil_state.call(this, pdepthstencildesc, ppdepthstencilstate)
  end
  def create_rasterizer_state(this : ID3D11Device4*, prasterizerdesc : D3D11_RASTERIZER_DESC*, pprasterizerstate : ID3D11RasterizerState*) : HRESULT
    @lpVtbl.value.create_rasterizer_state.call(this, prasterizerdesc, pprasterizerstate)
  end
  def create_sampler_state(this : ID3D11Device4*, psamplerdesc : D3D11_SAMPLER_DESC*, ppsamplerstate : ID3D11SamplerState*) : HRESULT
    @lpVtbl.value.create_sampler_state.call(this, psamplerdesc, ppsamplerstate)
  end
  def create_query(this : ID3D11Device4*, pquerydesc : D3D11_QUERY_DESC*, ppquery : ID3D11Query*) : HRESULT
    @lpVtbl.value.create_query.call(this, pquerydesc, ppquery)
  end
  def create_predicate(this : ID3D11Device4*, ppredicatedesc : D3D11_QUERY_DESC*, pppredicate : ID3D11Predicate*) : HRESULT
    @lpVtbl.value.create_predicate.call(this, ppredicatedesc, pppredicate)
  end
  def create_counter(this : ID3D11Device4*, pcounterdesc : D3D11_COUNTER_DESC*, ppcounter : ID3D11Counter*) : HRESULT
    @lpVtbl.value.create_counter.call(this, pcounterdesc, ppcounter)
  end
  def create_deferred_context(this : ID3D11Device4*, contextflags : UInt32, ppdeferredcontext : ID3D11DeviceContext*) : HRESULT
    @lpVtbl.value.create_deferred_context.call(this, contextflags, ppdeferredcontext)
  end
  def open_shared_resource(this : ID3D11Device4*, hresource : LibC::HANDLE, returnedinterface : Guid*, ppresource : Void**) : HRESULT
    @lpVtbl.value.open_shared_resource.call(this, hresource, returnedinterface, ppresource)
  end
  def check_format_support(this : ID3D11Device4*, format : DXGI_FORMAT, pformatsupport : UInt32*) : HRESULT
    @lpVtbl.value.check_format_support.call(this, format, pformatsupport)
  end
  def check_multisample_quality_levels(this : ID3D11Device4*, format : DXGI_FORMAT, samplecount : UInt32, pnumqualitylevels : UInt32*) : HRESULT
    @lpVtbl.value.check_multisample_quality_levels.call(this, format, samplecount, pnumqualitylevels)
  end
  def check_counter_info(this : ID3D11Device4*, pcounterinfo : D3D11_COUNTER_INFO*) : Void
    @lpVtbl.value.check_counter_info.call(this, pcounterinfo)
  end
  def check_counter(this : ID3D11Device4*, pdesc : D3D11_COUNTER_DESC*, ptype : D3D11_COUNTER_TYPE*, pactivecounters : UInt32*, szname : UInt8*, pnamelength : UInt32*, szunits : UInt8*, punitslength : UInt32*, szdescription : UInt8*, pdescriptionlength : UInt32*) : HRESULT
    @lpVtbl.value.check_counter.call(this, pdesc, ptype, pactivecounters, szname, pnamelength, szunits, punitslength, szdescription, pdescriptionlength)
  end
  def check_feature_support(this : ID3D11Device4*, feature : D3D11_FEATURE, pfeaturesupportdata : Void*, featuresupportdatasize : UInt32) : HRESULT
    @lpVtbl.value.check_feature_support.call(this, feature, pfeaturesupportdata, featuresupportdatasize)
  end
  def get_private_data(this : ID3D11Device4*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11Device4*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11Device4*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_feature_level(this : ID3D11Device4*) : D3D_FEATURE_LEVEL
    @lpVtbl.value.get_feature_level.call(this)
  end
  def get_creation_flags(this : ID3D11Device4*) : UInt32
    @lpVtbl.value.get_creation_flags.call(this)
  end
  def get_device_removed_reason(this : ID3D11Device4*) : HRESULT
    @lpVtbl.value.get_device_removed_reason.call(this)
  end
  def get_immediate_context(this : ID3D11Device4*, ppimmediatecontext : ID3D11DeviceContext*) : Void
    @lpVtbl.value.get_immediate_context.call(this, ppimmediatecontext)
  end
  def set_exception_mode(this : ID3D11Device4*, raiseflags : UInt32) : HRESULT
    @lpVtbl.value.set_exception_mode.call(this, raiseflags)
  end
  def get_exception_mode(this : ID3D11Device4*) : UInt32
    @lpVtbl.value.get_exception_mode.call(this)
  end
  def get_immediate_context1(this : ID3D11Device4*, ppimmediatecontext : ID3D11DeviceContext1*) : Void
    @lpVtbl.value.get_immediate_context1.call(this, ppimmediatecontext)
  end
  def create_deferred_context1(this : ID3D11Device4*, contextflags : UInt32, ppdeferredcontext : ID3D11DeviceContext1*) : HRESULT
    @lpVtbl.value.create_deferred_context1.call(this, contextflags, ppdeferredcontext)
  end
  def create_blend_state1(this : ID3D11Device4*, pblendstatedesc : D3D11_BLEND_DESC1*, ppblendstate : ID3D11BlendState1*) : HRESULT
    @lpVtbl.value.create_blend_state1.call(this, pblendstatedesc, ppblendstate)
  end
  def create_rasterizer_state1(this : ID3D11Device4*, prasterizerdesc : D3D11_RASTERIZER_DESC1*, pprasterizerstate : ID3D11RasterizerState1*) : HRESULT
    @lpVtbl.value.create_rasterizer_state1.call(this, prasterizerdesc, pprasterizerstate)
  end
  def create_device_context_state(this : ID3D11Device4*, flags : UInt32, pfeaturelevels : D3D_FEATURE_LEVEL*, featurelevels : UInt32, sdkversion : UInt32, emulatedinterface : Guid*, pchosenfeaturelevel : D3D_FEATURE_LEVEL*, ppcontextstate : ID3DDeviceContextState*) : HRESULT
    @lpVtbl.value.create_device_context_state.call(this, flags, pfeaturelevels, featurelevels, sdkversion, emulatedinterface, pchosenfeaturelevel, ppcontextstate)
  end
  def open_shared_resource1(this : ID3D11Device4*, hresource : LibC::HANDLE, returnedinterface : Guid*, ppresource : Void**) : HRESULT
    @lpVtbl.value.open_shared_resource1.call(this, hresource, returnedinterface, ppresource)
  end
  def open_shared_resource_by_name(this : ID3D11Device4*, lpname : LibC::LPWSTR, dwdesiredaccess : UInt32, returnedinterface : Guid*, ppresource : Void**) : HRESULT
    @lpVtbl.value.open_shared_resource_by_name.call(this, lpname, dwdesiredaccess, returnedinterface, ppresource)
  end
  def get_immediate_context2(this : ID3D11Device4*, ppimmediatecontext : ID3D11DeviceContext2*) : Void
    @lpVtbl.value.get_immediate_context2.call(this, ppimmediatecontext)
  end
  def create_deferred_context2(this : ID3D11Device4*, contextflags : UInt32, ppdeferredcontext : ID3D11DeviceContext2*) : HRESULT
    @lpVtbl.value.create_deferred_context2.call(this, contextflags, ppdeferredcontext)
  end
  def get_resource_tiling(this : ID3D11Device4*, ptiledresource : ID3D11Resource, pnumtilesforentireresource : UInt32*, ppackedmipdesc : D3D11_PACKED_MIP_DESC*, pstandardtileshapefornonpackedmips : D3D11_TILE_SHAPE*, pnumsubresourcetilings : UInt32*, firstsubresourcetilingtoget : UInt32, psubresourcetilingsfornonpackedmips : D3D11_SUBRESOURCE_TILING*) : Void
    @lpVtbl.value.get_resource_tiling.call(this, ptiledresource, pnumtilesforentireresource, ppackedmipdesc, pstandardtileshapefornonpackedmips, pnumsubresourcetilings, firstsubresourcetilingtoget, psubresourcetilingsfornonpackedmips)
  end
  def check_multisample_quality_levels1(this : ID3D11Device4*, format : DXGI_FORMAT, samplecount : UInt32, flags : UInt32, pnumqualitylevels : UInt32*) : HRESULT
    @lpVtbl.value.check_multisample_quality_levels1.call(this, format, samplecount, flags, pnumqualitylevels)
  end
  def create_texture2_d1(this : ID3D11Device4*, pdesc1 : D3D11_TEXTURE2D_DESC1*, pinitialdata : D3D11_SUBRESOURCE_DATA*, pptexture2d : ID3D11Texture2D1*) : HRESULT
    @lpVtbl.value.create_texture2_d1.call(this, pdesc1, pinitialdata, pptexture2d)
  end
  def create_texture3_d1(this : ID3D11Device4*, pdesc1 : D3D11_TEXTURE3D_DESC1*, pinitialdata : D3D11_SUBRESOURCE_DATA*, pptexture3d : ID3D11Texture3D1*) : HRESULT
    @lpVtbl.value.create_texture3_d1.call(this, pdesc1, pinitialdata, pptexture3d)
  end
  def create_rasterizer_state2(this : ID3D11Device4*, prasterizerdesc : D3D11_RASTERIZER_DESC2*, pprasterizerstate : ID3D11RasterizerState2*) : HRESULT
    @lpVtbl.value.create_rasterizer_state2.call(this, prasterizerdesc, pprasterizerstate)
  end
  def create_shader_resource_view1(this : ID3D11Device4*, presource : ID3D11Resource, pdesc1 : D3D11_SHADER_RESOURCE_VIEW_DESC1*, ppsrview1 : ID3D11ShaderResourceView1*) : HRESULT
    @lpVtbl.value.create_shader_resource_view1.call(this, presource, pdesc1, ppsrview1)
  end
  def create_unordered_access_view1(this : ID3D11Device4*, presource : ID3D11Resource, pdesc1 : D3D11_UNORDERED_ACCESS_VIEW_DESC1*, ppuaview1 : ID3D11UnorderedAccessView1*) : HRESULT
    @lpVtbl.value.create_unordered_access_view1.call(this, presource, pdesc1, ppuaview1)
  end
  def create_render_target_view1(this : ID3D11Device4*, presource : ID3D11Resource, pdesc1 : D3D11_RENDER_TARGET_VIEW_DESC1*, pprtview1 : ID3D11RenderTargetView1*) : HRESULT
    @lpVtbl.value.create_render_target_view1.call(this, presource, pdesc1, pprtview1)
  end
  def create_query1(this : ID3D11Device4*, pquerydesc1 : D3D11_QUERY_DESC1*, ppquery1 : ID3D11Query1*) : HRESULT
    @lpVtbl.value.create_query1.call(this, pquerydesc1, ppquery1)
  end
  def get_immediate_context3(this : ID3D11Device4*, ppimmediatecontext : ID3D11DeviceContext3*) : Void
    @lpVtbl.value.get_immediate_context3.call(this, ppimmediatecontext)
  end
  def create_deferred_context3(this : ID3D11Device4*, contextflags : UInt32, ppdeferredcontext : ID3D11DeviceContext3*) : HRESULT
    @lpVtbl.value.create_deferred_context3.call(this, contextflags, ppdeferredcontext)
  end
  def write_to_subresource(this : ID3D11Device4*, pdstresource : ID3D11Resource, dstsubresource : UInt32, pdstbox : D3D11_BOX*, psrcdata : Void*, srcrowpitch : UInt32, srcdepthpitch : UInt32) : Void
    @lpVtbl.value.write_to_subresource.call(this, pdstresource, dstsubresource, pdstbox, psrcdata, srcrowpitch, srcdepthpitch)
  end
  def read_from_subresource(this : ID3D11Device4*, pdstdata : Void*, dstrowpitch : UInt32, dstdepthpitch : UInt32, psrcresource : ID3D11Resource, srcsubresource : UInt32, psrcbox : D3D11_BOX*) : Void
    @lpVtbl.value.read_from_subresource.call(this, pdstdata, dstrowpitch, dstdepthpitch, psrcresource, srcsubresource, psrcbox)
  end
  def register_device_removed_event(this : ID3D11Device4*, hevent : LibC::HANDLE, pdwcookie : UInt32*) : HRESULT
    @lpVtbl.value.register_device_removed_event.call(this, hevent, pdwcookie)
  end
  def unregister_device_removed(this : ID3D11Device4*, dwcookie : UInt32) : Void
    @lpVtbl.value.unregister_device_removed.call(this, dwcookie)
  end
end
struct LibWin32::ID3D11Device5
  def query_interface(this : ID3D11Device5*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11Device5*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11Device5*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_buffer(this : ID3D11Device5*, pdesc : D3D11_BUFFER_DESC*, pinitialdata : D3D11_SUBRESOURCE_DATA*, ppbuffer : ID3D11Buffer*) : HRESULT
    @lpVtbl.value.create_buffer.call(this, pdesc, pinitialdata, ppbuffer)
  end
  def create_texture1_d(this : ID3D11Device5*, pdesc : D3D11_TEXTURE1D_DESC*, pinitialdata : D3D11_SUBRESOURCE_DATA*, pptexture1d : ID3D11Texture1D*) : HRESULT
    @lpVtbl.value.create_texture1_d.call(this, pdesc, pinitialdata, pptexture1d)
  end
  def create_texture2_d(this : ID3D11Device5*, pdesc : D3D11_TEXTURE2D_DESC*, pinitialdata : D3D11_SUBRESOURCE_DATA*, pptexture2d : ID3D11Texture2D*) : HRESULT
    @lpVtbl.value.create_texture2_d.call(this, pdesc, pinitialdata, pptexture2d)
  end
  def create_texture3_d(this : ID3D11Device5*, pdesc : D3D11_TEXTURE3D_DESC*, pinitialdata : D3D11_SUBRESOURCE_DATA*, pptexture3d : ID3D11Texture3D*) : HRESULT
    @lpVtbl.value.create_texture3_d.call(this, pdesc, pinitialdata, pptexture3d)
  end
  def create_shader_resource_view(this : ID3D11Device5*, presource : ID3D11Resource, pdesc : D3D11_SHADER_RESOURCE_VIEW_DESC*, ppsrview : ID3D11ShaderResourceView*) : HRESULT
    @lpVtbl.value.create_shader_resource_view.call(this, presource, pdesc, ppsrview)
  end
  def create_unordered_access_view(this : ID3D11Device5*, presource : ID3D11Resource, pdesc : D3D11_UNORDERED_ACCESS_VIEW_DESC*, ppuaview : ID3D11UnorderedAccessView*) : HRESULT
    @lpVtbl.value.create_unordered_access_view.call(this, presource, pdesc, ppuaview)
  end
  def create_render_target_view(this : ID3D11Device5*, presource : ID3D11Resource, pdesc : D3D11_RENDER_TARGET_VIEW_DESC*, pprtview : ID3D11RenderTargetView*) : HRESULT
    @lpVtbl.value.create_render_target_view.call(this, presource, pdesc, pprtview)
  end
  def create_depth_stencil_view(this : ID3D11Device5*, presource : ID3D11Resource, pdesc : D3D11_DEPTH_STENCIL_VIEW_DESC*, ppdepthstencilview : ID3D11DepthStencilView*) : HRESULT
    @lpVtbl.value.create_depth_stencil_view.call(this, presource, pdesc, ppdepthstencilview)
  end
  def create_input_layout(this : ID3D11Device5*, pinputelementdescs : D3D11_INPUT_ELEMENT_DESC*, numelements : UInt32, pshaderbytecodewithinputsignature : Void*, bytecodelength : LibC::UINT_PTR, ppinputlayout : ID3D11InputLayout*) : HRESULT
    @lpVtbl.value.create_input_layout.call(this, pinputelementdescs, numelements, pshaderbytecodewithinputsignature, bytecodelength, ppinputlayout)
  end
  def create_vertex_shader(this : ID3D11Device5*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, ppvertexshader : ID3D11VertexShader*) : HRESULT
    @lpVtbl.value.create_vertex_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, ppvertexshader)
  end
  def create_geometry_shader(this : ID3D11Device5*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, ppgeometryshader : ID3D11GeometryShader*) : HRESULT
    @lpVtbl.value.create_geometry_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, ppgeometryshader)
  end
  def create_geometry_shader_with_stream_output(this : ID3D11Device5*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, psodeclaration : D3D11_SO_DECLARATION_ENTRY*, numentries : UInt32, pbufferstrides : UInt32*, numstrides : UInt32, rasterizedstream : UInt32, pclasslinkage : ID3D11ClassLinkage, ppgeometryshader : ID3D11GeometryShader*) : HRESULT
    @lpVtbl.value.create_geometry_shader_with_stream_output.call(this, pshaderbytecode, bytecodelength, psodeclaration, numentries, pbufferstrides, numstrides, rasterizedstream, pclasslinkage, ppgeometryshader)
  end
  def create_pixel_shader(this : ID3D11Device5*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, pppixelshader : ID3D11PixelShader*) : HRESULT
    @lpVtbl.value.create_pixel_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, pppixelshader)
  end
  def create_hull_shader(this : ID3D11Device5*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, pphullshader : ID3D11HullShader*) : HRESULT
    @lpVtbl.value.create_hull_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, pphullshader)
  end
  def create_domain_shader(this : ID3D11Device5*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, ppdomainshader : ID3D11DomainShader*) : HRESULT
    @lpVtbl.value.create_domain_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, ppdomainshader)
  end
  def create_compute_shader(this : ID3D11Device5*, pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, pclasslinkage : ID3D11ClassLinkage, ppcomputeshader : ID3D11ComputeShader*) : HRESULT
    @lpVtbl.value.create_compute_shader.call(this, pshaderbytecode, bytecodelength, pclasslinkage, ppcomputeshader)
  end
  def create_class_linkage(this : ID3D11Device5*, pplinkage : ID3D11ClassLinkage*) : HRESULT
    @lpVtbl.value.create_class_linkage.call(this, pplinkage)
  end
  def create_blend_state(this : ID3D11Device5*, pblendstatedesc : D3D11_BLEND_DESC*, ppblendstate : ID3D11BlendState*) : HRESULT
    @lpVtbl.value.create_blend_state.call(this, pblendstatedesc, ppblendstate)
  end
  def create_depth_stencil_state(this : ID3D11Device5*, pdepthstencildesc : D3D11_DEPTH_STENCIL_DESC*, ppdepthstencilstate : ID3D11DepthStencilState*) : HRESULT
    @lpVtbl.value.create_depth_stencil_state.call(this, pdepthstencildesc, ppdepthstencilstate)
  end
  def create_rasterizer_state(this : ID3D11Device5*, prasterizerdesc : D3D11_RASTERIZER_DESC*, pprasterizerstate : ID3D11RasterizerState*) : HRESULT
    @lpVtbl.value.create_rasterizer_state.call(this, prasterizerdesc, pprasterizerstate)
  end
  def create_sampler_state(this : ID3D11Device5*, psamplerdesc : D3D11_SAMPLER_DESC*, ppsamplerstate : ID3D11SamplerState*) : HRESULT
    @lpVtbl.value.create_sampler_state.call(this, psamplerdesc, ppsamplerstate)
  end
  def create_query(this : ID3D11Device5*, pquerydesc : D3D11_QUERY_DESC*, ppquery : ID3D11Query*) : HRESULT
    @lpVtbl.value.create_query.call(this, pquerydesc, ppquery)
  end
  def create_predicate(this : ID3D11Device5*, ppredicatedesc : D3D11_QUERY_DESC*, pppredicate : ID3D11Predicate*) : HRESULT
    @lpVtbl.value.create_predicate.call(this, ppredicatedesc, pppredicate)
  end
  def create_counter(this : ID3D11Device5*, pcounterdesc : D3D11_COUNTER_DESC*, ppcounter : ID3D11Counter*) : HRESULT
    @lpVtbl.value.create_counter.call(this, pcounterdesc, ppcounter)
  end
  def create_deferred_context(this : ID3D11Device5*, contextflags : UInt32, ppdeferredcontext : ID3D11DeviceContext*) : HRESULT
    @lpVtbl.value.create_deferred_context.call(this, contextflags, ppdeferredcontext)
  end
  def open_shared_resource(this : ID3D11Device5*, hresource : LibC::HANDLE, returnedinterface : Guid*, ppresource : Void**) : HRESULT
    @lpVtbl.value.open_shared_resource.call(this, hresource, returnedinterface, ppresource)
  end
  def check_format_support(this : ID3D11Device5*, format : DXGI_FORMAT, pformatsupport : UInt32*) : HRESULT
    @lpVtbl.value.check_format_support.call(this, format, pformatsupport)
  end
  def check_multisample_quality_levels(this : ID3D11Device5*, format : DXGI_FORMAT, samplecount : UInt32, pnumqualitylevels : UInt32*) : HRESULT
    @lpVtbl.value.check_multisample_quality_levels.call(this, format, samplecount, pnumqualitylevels)
  end
  def check_counter_info(this : ID3D11Device5*, pcounterinfo : D3D11_COUNTER_INFO*) : Void
    @lpVtbl.value.check_counter_info.call(this, pcounterinfo)
  end
  def check_counter(this : ID3D11Device5*, pdesc : D3D11_COUNTER_DESC*, ptype : D3D11_COUNTER_TYPE*, pactivecounters : UInt32*, szname : UInt8*, pnamelength : UInt32*, szunits : UInt8*, punitslength : UInt32*, szdescription : UInt8*, pdescriptionlength : UInt32*) : HRESULT
    @lpVtbl.value.check_counter.call(this, pdesc, ptype, pactivecounters, szname, pnamelength, szunits, punitslength, szdescription, pdescriptionlength)
  end
  def check_feature_support(this : ID3D11Device5*, feature : D3D11_FEATURE, pfeaturesupportdata : Void*, featuresupportdatasize : UInt32) : HRESULT
    @lpVtbl.value.check_feature_support.call(this, feature, pfeaturesupportdata, featuresupportdatasize)
  end
  def get_private_data(this : ID3D11Device5*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11Device5*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11Device5*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_feature_level(this : ID3D11Device5*) : D3D_FEATURE_LEVEL
    @lpVtbl.value.get_feature_level.call(this)
  end
  def get_creation_flags(this : ID3D11Device5*) : UInt32
    @lpVtbl.value.get_creation_flags.call(this)
  end
  def get_device_removed_reason(this : ID3D11Device5*) : HRESULT
    @lpVtbl.value.get_device_removed_reason.call(this)
  end
  def get_immediate_context(this : ID3D11Device5*, ppimmediatecontext : ID3D11DeviceContext*) : Void
    @lpVtbl.value.get_immediate_context.call(this, ppimmediatecontext)
  end
  def set_exception_mode(this : ID3D11Device5*, raiseflags : UInt32) : HRESULT
    @lpVtbl.value.set_exception_mode.call(this, raiseflags)
  end
  def get_exception_mode(this : ID3D11Device5*) : UInt32
    @lpVtbl.value.get_exception_mode.call(this)
  end
  def get_immediate_context1(this : ID3D11Device5*, ppimmediatecontext : ID3D11DeviceContext1*) : Void
    @lpVtbl.value.get_immediate_context1.call(this, ppimmediatecontext)
  end
  def create_deferred_context1(this : ID3D11Device5*, contextflags : UInt32, ppdeferredcontext : ID3D11DeviceContext1*) : HRESULT
    @lpVtbl.value.create_deferred_context1.call(this, contextflags, ppdeferredcontext)
  end
  def create_blend_state1(this : ID3D11Device5*, pblendstatedesc : D3D11_BLEND_DESC1*, ppblendstate : ID3D11BlendState1*) : HRESULT
    @lpVtbl.value.create_blend_state1.call(this, pblendstatedesc, ppblendstate)
  end
  def create_rasterizer_state1(this : ID3D11Device5*, prasterizerdesc : D3D11_RASTERIZER_DESC1*, pprasterizerstate : ID3D11RasterizerState1*) : HRESULT
    @lpVtbl.value.create_rasterizer_state1.call(this, prasterizerdesc, pprasterizerstate)
  end
  def create_device_context_state(this : ID3D11Device5*, flags : UInt32, pfeaturelevels : D3D_FEATURE_LEVEL*, featurelevels : UInt32, sdkversion : UInt32, emulatedinterface : Guid*, pchosenfeaturelevel : D3D_FEATURE_LEVEL*, ppcontextstate : ID3DDeviceContextState*) : HRESULT
    @lpVtbl.value.create_device_context_state.call(this, flags, pfeaturelevels, featurelevels, sdkversion, emulatedinterface, pchosenfeaturelevel, ppcontextstate)
  end
  def open_shared_resource1(this : ID3D11Device5*, hresource : LibC::HANDLE, returnedinterface : Guid*, ppresource : Void**) : HRESULT
    @lpVtbl.value.open_shared_resource1.call(this, hresource, returnedinterface, ppresource)
  end
  def open_shared_resource_by_name(this : ID3D11Device5*, lpname : LibC::LPWSTR, dwdesiredaccess : UInt32, returnedinterface : Guid*, ppresource : Void**) : HRESULT
    @lpVtbl.value.open_shared_resource_by_name.call(this, lpname, dwdesiredaccess, returnedinterface, ppresource)
  end
  def get_immediate_context2(this : ID3D11Device5*, ppimmediatecontext : ID3D11DeviceContext2*) : Void
    @lpVtbl.value.get_immediate_context2.call(this, ppimmediatecontext)
  end
  def create_deferred_context2(this : ID3D11Device5*, contextflags : UInt32, ppdeferredcontext : ID3D11DeviceContext2*) : HRESULT
    @lpVtbl.value.create_deferred_context2.call(this, contextflags, ppdeferredcontext)
  end
  def get_resource_tiling(this : ID3D11Device5*, ptiledresource : ID3D11Resource, pnumtilesforentireresource : UInt32*, ppackedmipdesc : D3D11_PACKED_MIP_DESC*, pstandardtileshapefornonpackedmips : D3D11_TILE_SHAPE*, pnumsubresourcetilings : UInt32*, firstsubresourcetilingtoget : UInt32, psubresourcetilingsfornonpackedmips : D3D11_SUBRESOURCE_TILING*) : Void
    @lpVtbl.value.get_resource_tiling.call(this, ptiledresource, pnumtilesforentireresource, ppackedmipdesc, pstandardtileshapefornonpackedmips, pnumsubresourcetilings, firstsubresourcetilingtoget, psubresourcetilingsfornonpackedmips)
  end
  def check_multisample_quality_levels1(this : ID3D11Device5*, format : DXGI_FORMAT, samplecount : UInt32, flags : UInt32, pnumqualitylevels : UInt32*) : HRESULT
    @lpVtbl.value.check_multisample_quality_levels1.call(this, format, samplecount, flags, pnumqualitylevels)
  end
  def create_texture2_d1(this : ID3D11Device5*, pdesc1 : D3D11_TEXTURE2D_DESC1*, pinitialdata : D3D11_SUBRESOURCE_DATA*, pptexture2d : ID3D11Texture2D1*) : HRESULT
    @lpVtbl.value.create_texture2_d1.call(this, pdesc1, pinitialdata, pptexture2d)
  end
  def create_texture3_d1(this : ID3D11Device5*, pdesc1 : D3D11_TEXTURE3D_DESC1*, pinitialdata : D3D11_SUBRESOURCE_DATA*, pptexture3d : ID3D11Texture3D1*) : HRESULT
    @lpVtbl.value.create_texture3_d1.call(this, pdesc1, pinitialdata, pptexture3d)
  end
  def create_rasterizer_state2(this : ID3D11Device5*, prasterizerdesc : D3D11_RASTERIZER_DESC2*, pprasterizerstate : ID3D11RasterizerState2*) : HRESULT
    @lpVtbl.value.create_rasterizer_state2.call(this, prasterizerdesc, pprasterizerstate)
  end
  def create_shader_resource_view1(this : ID3D11Device5*, presource : ID3D11Resource, pdesc1 : D3D11_SHADER_RESOURCE_VIEW_DESC1*, ppsrview1 : ID3D11ShaderResourceView1*) : HRESULT
    @lpVtbl.value.create_shader_resource_view1.call(this, presource, pdesc1, ppsrview1)
  end
  def create_unordered_access_view1(this : ID3D11Device5*, presource : ID3D11Resource, pdesc1 : D3D11_UNORDERED_ACCESS_VIEW_DESC1*, ppuaview1 : ID3D11UnorderedAccessView1*) : HRESULT
    @lpVtbl.value.create_unordered_access_view1.call(this, presource, pdesc1, ppuaview1)
  end
  def create_render_target_view1(this : ID3D11Device5*, presource : ID3D11Resource, pdesc1 : D3D11_RENDER_TARGET_VIEW_DESC1*, pprtview1 : ID3D11RenderTargetView1*) : HRESULT
    @lpVtbl.value.create_render_target_view1.call(this, presource, pdesc1, pprtview1)
  end
  def create_query1(this : ID3D11Device5*, pquerydesc1 : D3D11_QUERY_DESC1*, ppquery1 : ID3D11Query1*) : HRESULT
    @lpVtbl.value.create_query1.call(this, pquerydesc1, ppquery1)
  end
  def get_immediate_context3(this : ID3D11Device5*, ppimmediatecontext : ID3D11DeviceContext3*) : Void
    @lpVtbl.value.get_immediate_context3.call(this, ppimmediatecontext)
  end
  def create_deferred_context3(this : ID3D11Device5*, contextflags : UInt32, ppdeferredcontext : ID3D11DeviceContext3*) : HRESULT
    @lpVtbl.value.create_deferred_context3.call(this, contextflags, ppdeferredcontext)
  end
  def write_to_subresource(this : ID3D11Device5*, pdstresource : ID3D11Resource, dstsubresource : UInt32, pdstbox : D3D11_BOX*, psrcdata : Void*, srcrowpitch : UInt32, srcdepthpitch : UInt32) : Void
    @lpVtbl.value.write_to_subresource.call(this, pdstresource, dstsubresource, pdstbox, psrcdata, srcrowpitch, srcdepthpitch)
  end
  def read_from_subresource(this : ID3D11Device5*, pdstdata : Void*, dstrowpitch : UInt32, dstdepthpitch : UInt32, psrcresource : ID3D11Resource, srcsubresource : UInt32, psrcbox : D3D11_BOX*) : Void
    @lpVtbl.value.read_from_subresource.call(this, pdstdata, dstrowpitch, dstdepthpitch, psrcresource, srcsubresource, psrcbox)
  end
  def register_device_removed_event(this : ID3D11Device5*, hevent : LibC::HANDLE, pdwcookie : UInt32*) : HRESULT
    @lpVtbl.value.register_device_removed_event.call(this, hevent, pdwcookie)
  end
  def unregister_device_removed(this : ID3D11Device5*, dwcookie : UInt32) : Void
    @lpVtbl.value.unregister_device_removed.call(this, dwcookie)
  end
  def open_shared_fence(this : ID3D11Device5*, hfence : LibC::HANDLE, returnedinterface : Guid*, ppfence : Void**) : HRESULT
    @lpVtbl.value.open_shared_fence.call(this, hfence, returnedinterface, ppfence)
  end
  def create_fence(this : ID3D11Device5*, initialvalue : UInt64, flags : D3D11_FENCE_FLAG, returnedinterface : Guid*, ppfence : Void**) : HRESULT
    @lpVtbl.value.create_fence.call(this, initialvalue, flags, returnedinterface, ppfence)
  end
end
struct LibWin32::ID3D11Multithread
  def query_interface(this : ID3D11Multithread*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11Multithread*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11Multithread*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def enter(this : ID3D11Multithread*) : Void
    @lpVtbl.value.enter.call(this)
  end
  def leave(this : ID3D11Multithread*) : Void
    @lpVtbl.value.leave.call(this)
  end
  def set_multithread_protected(this : ID3D11Multithread*, bmtprotect : LibC::BOOL) : LibC::BOOL
    @lpVtbl.value.set_multithread_protected.call(this, bmtprotect)
  end
  def get_multithread_protected(this : ID3D11Multithread*) : LibC::BOOL
    @lpVtbl.value.get_multithread_protected.call(this)
  end
end
struct LibWin32::ID3D11VideoContext2
  def query_interface(this : ID3D11VideoContext2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11VideoContext2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11VideoContext2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11VideoContext2*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11VideoContext2*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11VideoContext2*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11VideoContext2*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_decoder_buffer(this : ID3D11VideoContext2*, pdecoder : ID3D11VideoDecoder, type : D3D11_VIDEO_DECODER_BUFFER_TYPE, pbuffersize : UInt32*, ppbuffer : Void**) : HRESULT
    @lpVtbl.value.get_decoder_buffer.call(this, pdecoder, type, pbuffersize, ppbuffer)
  end
  def release_decoder_buffer(this : ID3D11VideoContext2*, pdecoder : ID3D11VideoDecoder, type : D3D11_VIDEO_DECODER_BUFFER_TYPE) : HRESULT
    @lpVtbl.value.release_decoder_buffer.call(this, pdecoder, type)
  end
  def decoder_begin_frame(this : ID3D11VideoContext2*, pdecoder : ID3D11VideoDecoder, pview : ID3D11VideoDecoderOutputView, contentkeysize : UInt32, pcontentkey : Void*) : HRESULT
    @lpVtbl.value.decoder_begin_frame.call(this, pdecoder, pview, contentkeysize, pcontentkey)
  end
  def decoder_end_frame(this : ID3D11VideoContext2*, pdecoder : ID3D11VideoDecoder) : HRESULT
    @lpVtbl.value.decoder_end_frame.call(this, pdecoder)
  end
  def submit_decoder_buffers(this : ID3D11VideoContext2*, pdecoder : ID3D11VideoDecoder, numbuffers : UInt32, pbufferdesc : D3D11_VIDEO_DECODER_BUFFER_DESC*) : HRESULT
    @lpVtbl.value.submit_decoder_buffers.call(this, pdecoder, numbuffers, pbufferdesc)
  end
  def decoder_extension(this : ID3D11VideoContext2*, pdecoder : ID3D11VideoDecoder, pextensiondata : D3D11_VIDEO_DECODER_EXTENSION*) : Int32
    @lpVtbl.value.decoder_extension.call(this, pdecoder, pextensiondata)
  end
  def video_processor_set_output_target_rect(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, enable : LibC::BOOL, prect : RECT*) : Void
    @lpVtbl.value.video_processor_set_output_target_rect.call(this, pvideoprocessor, enable, prect)
  end
  def video_processor_set_output_background_color(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, ycbcr : LibC::BOOL, pcolor : D3D11_VIDEO_COLOR*) : Void
    @lpVtbl.value.video_processor_set_output_background_color.call(this, pvideoprocessor, ycbcr, pcolor)
  end
  def video_processor_set_output_color_space(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, pcolorspace : D3D11_VIDEO_PROCESSOR_COLOR_SPACE*) : Void
    @lpVtbl.value.video_processor_set_output_color_space.call(this, pvideoprocessor, pcolorspace)
  end
  def video_processor_set_output_alpha_fill_mode(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, alphafillmode : D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE, streamindex : UInt32) : Void
    @lpVtbl.value.video_processor_set_output_alpha_fill_mode.call(this, pvideoprocessor, alphafillmode, streamindex)
  end
  def video_processor_set_output_constriction(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, enable : LibC::BOOL, size : SIZE) : Void
    @lpVtbl.value.video_processor_set_output_constriction.call(this, pvideoprocessor, enable, size)
  end
  def video_processor_set_output_stereo_mode(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, enable : LibC::BOOL) : Void
    @lpVtbl.value.video_processor_set_output_stereo_mode.call(this, pvideoprocessor, enable)
  end
  def video_processor_set_output_extension(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, pextensionguid : Guid*, datasize : UInt32, pdata : Void*) : Int32
    @lpVtbl.value.video_processor_set_output_extension.call(this, pvideoprocessor, pextensionguid, datasize, pdata)
  end
  def video_processor_get_output_target_rect(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, enabled : LibC::BOOL*, prect : RECT*) : Void
    @lpVtbl.value.video_processor_get_output_target_rect.call(this, pvideoprocessor, enabled, prect)
  end
  def video_processor_get_output_background_color(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, pycbcr : LibC::BOOL*, pcolor : D3D11_VIDEO_COLOR*) : Void
    @lpVtbl.value.video_processor_get_output_background_color.call(this, pvideoprocessor, pycbcr, pcolor)
  end
  def video_processor_get_output_color_space(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, pcolorspace : D3D11_VIDEO_PROCESSOR_COLOR_SPACE*) : Void
    @lpVtbl.value.video_processor_get_output_color_space.call(this, pvideoprocessor, pcolorspace)
  end
  def video_processor_get_output_alpha_fill_mode(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, palphafillmode : D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE*, pstreamindex : UInt32*) : Void
    @lpVtbl.value.video_processor_get_output_alpha_fill_mode.call(this, pvideoprocessor, palphafillmode, pstreamindex)
  end
  def video_processor_get_output_constriction(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, penabled : LibC::BOOL*, psize : SIZE*) : Void
    @lpVtbl.value.video_processor_get_output_constriction.call(this, pvideoprocessor, penabled, psize)
  end
  def video_processor_get_output_stereo_mode(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, penabled : LibC::BOOL*) : Void
    @lpVtbl.value.video_processor_get_output_stereo_mode.call(this, pvideoprocessor, penabled)
  end
  def video_processor_get_output_extension(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, pextensionguid : Guid*, datasize : UInt32, pdata : Void*) : Int32
    @lpVtbl.value.video_processor_get_output_extension.call(this, pvideoprocessor, pextensionguid, datasize, pdata)
  end
  def video_processor_set_stream_frame_format(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, frameformat : D3D11_VIDEO_FRAME_FORMAT) : Void
    @lpVtbl.value.video_processor_set_stream_frame_format.call(this, pvideoprocessor, streamindex, frameformat)
  end
  def video_processor_set_stream_color_space(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, pcolorspace : D3D11_VIDEO_PROCESSOR_COLOR_SPACE*) : Void
    @lpVtbl.value.video_processor_set_stream_color_space.call(this, pvideoprocessor, streamindex, pcolorspace)
  end
  def video_processor_set_stream_output_rate(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, outputrate : D3D11_VIDEO_PROCESSOR_OUTPUT_RATE, repeatframe : LibC::BOOL, pcustomrate : DXGI_RATIONAL*) : Void
    @lpVtbl.value.video_processor_set_stream_output_rate.call(this, pvideoprocessor, streamindex, outputrate, repeatframe, pcustomrate)
  end
  def video_processor_set_stream_source_rect(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, prect : RECT*) : Void
    @lpVtbl.value.video_processor_set_stream_source_rect.call(this, pvideoprocessor, streamindex, enable, prect)
  end
  def video_processor_set_stream_dest_rect(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, prect : RECT*) : Void
    @lpVtbl.value.video_processor_set_stream_dest_rect.call(this, pvideoprocessor, streamindex, enable, prect)
  end
  def video_processor_set_stream_alpha(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, alpha : Float32) : Void
    @lpVtbl.value.video_processor_set_stream_alpha.call(this, pvideoprocessor, streamindex, enable, alpha)
  end
  def video_processor_set_stream_palette(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, count : UInt32, pentries : UInt32*) : Void
    @lpVtbl.value.video_processor_set_stream_palette.call(this, pvideoprocessor, streamindex, count, pentries)
  end
  def video_processor_set_stream_pixel_aspect_ratio(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, psourceaspectratio : DXGI_RATIONAL*, pdestinationaspectratio : DXGI_RATIONAL*) : Void
    @lpVtbl.value.video_processor_set_stream_pixel_aspect_ratio.call(this, pvideoprocessor, streamindex, enable, psourceaspectratio, pdestinationaspectratio)
  end
  def video_processor_set_stream_luma_key(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, lower : Float32, upper : Float32) : Void
    @lpVtbl.value.video_processor_set_stream_luma_key.call(this, pvideoprocessor, streamindex, enable, lower, upper)
  end
  def video_processor_set_stream_stereo_format(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, format : D3D11_VIDEO_PROCESSOR_STEREO_FORMAT, leftviewframe0 : LibC::BOOL, baseviewframe0 : LibC::BOOL, flipmode : D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE, monooffset : Int32) : Void
    @lpVtbl.value.video_processor_set_stream_stereo_format.call(this, pvideoprocessor, streamindex, enable, format, leftviewframe0, baseviewframe0, flipmode, monooffset)
  end
  def video_processor_set_stream_auto_processing_mode(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL) : Void
    @lpVtbl.value.video_processor_set_stream_auto_processing_mode.call(this, pvideoprocessor, streamindex, enable)
  end
  def video_processor_set_stream_filter(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, filter : D3D11_VIDEO_PROCESSOR_FILTER, enable : LibC::BOOL, level : Int32) : Void
    @lpVtbl.value.video_processor_set_stream_filter.call(this, pvideoprocessor, streamindex, filter, enable, level)
  end
  def video_processor_set_stream_extension(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, pextensionguid : Guid*, datasize : UInt32, pdata : Void*) : Int32
    @lpVtbl.value.video_processor_set_stream_extension.call(this, pvideoprocessor, streamindex, pextensionguid, datasize, pdata)
  end
  def video_processor_get_stream_frame_format(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, pframeformat : D3D11_VIDEO_FRAME_FORMAT*) : Void
    @lpVtbl.value.video_processor_get_stream_frame_format.call(this, pvideoprocessor, streamindex, pframeformat)
  end
  def video_processor_get_stream_color_space(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, pcolorspace : D3D11_VIDEO_PROCESSOR_COLOR_SPACE*) : Void
    @lpVtbl.value.video_processor_get_stream_color_space.call(this, pvideoprocessor, streamindex, pcolorspace)
  end
  def video_processor_get_stream_output_rate(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, poutputrate : D3D11_VIDEO_PROCESSOR_OUTPUT_RATE*, prepeatframe : LibC::BOOL*, pcustomrate : DXGI_RATIONAL*) : Void
    @lpVtbl.value.video_processor_get_stream_output_rate.call(this, pvideoprocessor, streamindex, poutputrate, prepeatframe, pcustomrate)
  end
  def video_processor_get_stream_source_rect(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penabled : LibC::BOOL*, prect : RECT*) : Void
    @lpVtbl.value.video_processor_get_stream_source_rect.call(this, pvideoprocessor, streamindex, penabled, prect)
  end
  def video_processor_get_stream_dest_rect(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penabled : LibC::BOOL*, prect : RECT*) : Void
    @lpVtbl.value.video_processor_get_stream_dest_rect.call(this, pvideoprocessor, streamindex, penabled, prect)
  end
  def video_processor_get_stream_alpha(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penabled : LibC::BOOL*, palpha : Float32*) : Void
    @lpVtbl.value.video_processor_get_stream_alpha.call(this, pvideoprocessor, streamindex, penabled, palpha)
  end
  def video_processor_get_stream_palette(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, count : UInt32, pentries : UInt32*) : Void
    @lpVtbl.value.video_processor_get_stream_palette.call(this, pvideoprocessor, streamindex, count, pentries)
  end
  def video_processor_get_stream_pixel_aspect_ratio(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penabled : LibC::BOOL*, psourceaspectratio : DXGI_RATIONAL*, pdestinationaspectratio : DXGI_RATIONAL*) : Void
    @lpVtbl.value.video_processor_get_stream_pixel_aspect_ratio.call(this, pvideoprocessor, streamindex, penabled, psourceaspectratio, pdestinationaspectratio)
  end
  def video_processor_get_stream_luma_key(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penabled : LibC::BOOL*, plower : Float32*, pupper : Float32*) : Void
    @lpVtbl.value.video_processor_get_stream_luma_key.call(this, pvideoprocessor, streamindex, penabled, plower, pupper)
  end
  def video_processor_get_stream_stereo_format(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penable : LibC::BOOL*, pformat : D3D11_VIDEO_PROCESSOR_STEREO_FORMAT*, pleftviewframe0 : LibC::BOOL*, pbaseviewframe0 : LibC::BOOL*, pflipmode : D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE*, monooffset : Int32*) : Void
    @lpVtbl.value.video_processor_get_stream_stereo_format.call(this, pvideoprocessor, streamindex, penable, pformat, pleftviewframe0, pbaseviewframe0, pflipmode, monooffset)
  end
  def video_processor_get_stream_auto_processing_mode(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penabled : LibC::BOOL*) : Void
    @lpVtbl.value.video_processor_get_stream_auto_processing_mode.call(this, pvideoprocessor, streamindex, penabled)
  end
  def video_processor_get_stream_filter(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, filter : D3D11_VIDEO_PROCESSOR_FILTER, penabled : LibC::BOOL*, plevel : Int32*) : Void
    @lpVtbl.value.video_processor_get_stream_filter.call(this, pvideoprocessor, streamindex, filter, penabled, plevel)
  end
  def video_processor_get_stream_extension(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, pextensionguid : Guid*, datasize : UInt32, pdata : Void*) : Int32
    @lpVtbl.value.video_processor_get_stream_extension.call(this, pvideoprocessor, streamindex, pextensionguid, datasize, pdata)
  end
  def video_processor_blt(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, pview : ID3D11VideoProcessorOutputView, outputframe : UInt32, streamcount : UInt32, pstreams : D3D11_VIDEO_PROCESSOR_STREAM*) : HRESULT
    @lpVtbl.value.video_processor_blt.call(this, pvideoprocessor, pview, outputframe, streamcount, pstreams)
  end
  def negotiate_crypto_session_key_exchange(this : ID3D11VideoContext2*, pcryptosession : ID3D11CryptoSession, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.negotiate_crypto_session_key_exchange.call(this, pcryptosession, datasize, pdata)
  end
  def encryption_blt(this : ID3D11VideoContext2*, pcryptosession : ID3D11CryptoSession, psrcsurface : ID3D11Texture2D, pdstsurface : ID3D11Texture2D, ivsize : UInt32, piv : Void*) : Void
    @lpVtbl.value.encryption_blt.call(this, pcryptosession, psrcsurface, pdstsurface, ivsize, piv)
  end
  def decryption_blt(this : ID3D11VideoContext2*, pcryptosession : ID3D11CryptoSession, psrcsurface : ID3D11Texture2D, pdstsurface : ID3D11Texture2D, pencryptedblockinfo : D3D11_ENCRYPTED_BLOCK_INFO*, contentkeysize : UInt32, pcontentkey : Void*, ivsize : UInt32, piv : Void*) : Void
    @lpVtbl.value.decryption_blt.call(this, pcryptosession, psrcsurface, pdstsurface, pencryptedblockinfo, contentkeysize, pcontentkey, ivsize, piv)
  end
  def start_session_key_refresh(this : ID3D11VideoContext2*, pcryptosession : ID3D11CryptoSession, randomnumbersize : UInt32, prandomnumber : Void*) : Void
    @lpVtbl.value.start_session_key_refresh.call(this, pcryptosession, randomnumbersize, prandomnumber)
  end
  def finish_session_key_refresh(this : ID3D11VideoContext2*, pcryptosession : ID3D11CryptoSession) : Void
    @lpVtbl.value.finish_session_key_refresh.call(this, pcryptosession)
  end
  def get_encryption_blt_key(this : ID3D11VideoContext2*, pcryptosession : ID3D11CryptoSession, keysize : UInt32, preadbackkey : Void*) : HRESULT
    @lpVtbl.value.get_encryption_blt_key.call(this, pcryptosession, keysize, preadbackkey)
  end
  def negotiate_authenticated_channel_key_exchange(this : ID3D11VideoContext2*, pchannel : ID3D11AuthenticatedChannel, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.negotiate_authenticated_channel_key_exchange.call(this, pchannel, datasize, pdata)
  end
  def query_authenticated_channel(this : ID3D11VideoContext2*, pchannel : ID3D11AuthenticatedChannel, inputsize : UInt32, pinput : Void*, outputsize : UInt32, poutput : Void*) : HRESULT
    @lpVtbl.value.query_authenticated_channel.call(this, pchannel, inputsize, pinput, outputsize, poutput)
  end
  def configure_authenticated_channel(this : ID3D11VideoContext2*, pchannel : ID3D11AuthenticatedChannel, inputsize : UInt32, pinput : Void*, poutput : D3D11_AUTHENTICATED_CONFIGURE_OUTPUT*) : HRESULT
    @lpVtbl.value.configure_authenticated_channel.call(this, pchannel, inputsize, pinput, poutput)
  end
  def video_processor_set_stream_rotation(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, rotation : D3D11_VIDEO_PROCESSOR_ROTATION) : Void
    @lpVtbl.value.video_processor_set_stream_rotation.call(this, pvideoprocessor, streamindex, enable, rotation)
  end
  def video_processor_get_stream_rotation(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penable : LibC::BOOL*, protation : D3D11_VIDEO_PROCESSOR_ROTATION*) : Void
    @lpVtbl.value.video_processor_get_stream_rotation.call(this, pvideoprocessor, streamindex, penable, protation)
  end
  def submit_decoder_buffers1(this : ID3D11VideoContext2*, pdecoder : ID3D11VideoDecoder, numbuffers : UInt32, pbufferdesc : D3D11_VIDEO_DECODER_BUFFER_DESC1*) : HRESULT
    @lpVtbl.value.submit_decoder_buffers1.call(this, pdecoder, numbuffers, pbufferdesc)
  end
  def get_data_for_new_hardware_key(this : ID3D11VideoContext2*, pcryptosession : ID3D11CryptoSession, privateinputsize : UInt32, pprivatinputdata : Void*, pprivateoutputdata : UInt64*) : HRESULT
    @lpVtbl.value.get_data_for_new_hardware_key.call(this, pcryptosession, privateinputsize, pprivatinputdata, pprivateoutputdata)
  end
  def check_crypto_session_status(this : ID3D11VideoContext2*, pcryptosession : ID3D11CryptoSession, pstatus : D3D11_CRYPTO_SESSION_STATUS*) : HRESULT
    @lpVtbl.value.check_crypto_session_status.call(this, pcryptosession, pstatus)
  end
  def decoder_enable_downsampling(this : ID3D11VideoContext2*, pdecoder : ID3D11VideoDecoder, inputcolorspace : DXGI_COLOR_SPACE_TYPE, poutputdesc : D3D11_VIDEO_SAMPLE_DESC*, referenceframecount : UInt32) : HRESULT
    @lpVtbl.value.decoder_enable_downsampling.call(this, pdecoder, inputcolorspace, poutputdesc, referenceframecount)
  end
  def decoder_update_downsampling(this : ID3D11VideoContext2*, pdecoder : ID3D11VideoDecoder, poutputdesc : D3D11_VIDEO_SAMPLE_DESC*) : HRESULT
    @lpVtbl.value.decoder_update_downsampling.call(this, pdecoder, poutputdesc)
  end
  def video_processor_set_output_color_space1(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, colorspace : DXGI_COLOR_SPACE_TYPE) : Void
    @lpVtbl.value.video_processor_set_output_color_space1.call(this, pvideoprocessor, colorspace)
  end
  def video_processor_set_output_shader_usage(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, shaderusage : LibC::BOOL) : Void
    @lpVtbl.value.video_processor_set_output_shader_usage.call(this, pvideoprocessor, shaderusage)
  end
  def video_processor_get_output_color_space1(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, pcolorspace : DXGI_COLOR_SPACE_TYPE*) : Void
    @lpVtbl.value.video_processor_get_output_color_space1.call(this, pvideoprocessor, pcolorspace)
  end
  def video_processor_get_output_shader_usage(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, pshaderusage : LibC::BOOL*) : Void
    @lpVtbl.value.video_processor_get_output_shader_usage.call(this, pvideoprocessor, pshaderusage)
  end
  def video_processor_set_stream_color_space1(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, colorspace : DXGI_COLOR_SPACE_TYPE) : Void
    @lpVtbl.value.video_processor_set_stream_color_space1.call(this, pvideoprocessor, streamindex, colorspace)
  end
  def video_processor_set_stream_mirror(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, fliphorizontal : LibC::BOOL, flipvertical : LibC::BOOL) : Void
    @lpVtbl.value.video_processor_set_stream_mirror.call(this, pvideoprocessor, streamindex, enable, fliphorizontal, flipvertical)
  end
  def video_processor_get_stream_color_space1(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, pcolorspace : DXGI_COLOR_SPACE_TYPE*) : Void
    @lpVtbl.value.video_processor_get_stream_color_space1.call(this, pvideoprocessor, streamindex, pcolorspace)
  end
  def video_processor_get_stream_mirror(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penable : LibC::BOOL*, pfliphorizontal : LibC::BOOL*, pflipvertical : LibC::BOOL*) : Void
    @lpVtbl.value.video_processor_get_stream_mirror.call(this, pvideoprocessor, streamindex, penable, pfliphorizontal, pflipvertical)
  end
  def video_processor_get_behavior_hints(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, outputwidth : UInt32, outputheight : UInt32, outputformat : DXGI_FORMAT, streamcount : UInt32, pstreams : D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT*, pbehaviorhints : UInt32*) : HRESULT
    @lpVtbl.value.video_processor_get_behavior_hints.call(this, pvideoprocessor, outputwidth, outputheight, outputformat, streamcount, pstreams, pbehaviorhints)
  end
  def video_processor_set_output_hdr_meta_data(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, type : DXGI_HDR_METADATA_TYPE, size : UInt32, phdrmetadata : Void*) : Void
    @lpVtbl.value.video_processor_set_output_hdr_meta_data.call(this, pvideoprocessor, type, size, phdrmetadata)
  end
  def video_processor_get_output_hdr_meta_data(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, ptype : DXGI_HDR_METADATA_TYPE*, size : UInt32, pmetadata : Void*) : Void
    @lpVtbl.value.video_processor_get_output_hdr_meta_data.call(this, pvideoprocessor, ptype, size, pmetadata)
  end
  def video_processor_set_stream_hdr_meta_data(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, type : DXGI_HDR_METADATA_TYPE, size : UInt32, phdrmetadata : Void*) : Void
    @lpVtbl.value.video_processor_set_stream_hdr_meta_data.call(this, pvideoprocessor, streamindex, type, size, phdrmetadata)
  end
  def video_processor_get_stream_hdr_meta_data(this : ID3D11VideoContext2*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, ptype : DXGI_HDR_METADATA_TYPE*, size : UInt32, pmetadata : Void*) : Void
    @lpVtbl.value.video_processor_get_stream_hdr_meta_data.call(this, pvideoprocessor, streamindex, ptype, size, pmetadata)
  end
end
struct LibWin32::ID3D11VideoDevice2
  def query_interface(this : ID3D11VideoDevice2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11VideoDevice2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11VideoDevice2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_video_decoder(this : ID3D11VideoDevice2*, pvideodesc : D3D11_VIDEO_DECODER_DESC*, pconfig : D3D11_VIDEO_DECODER_CONFIG*, ppdecoder : ID3D11VideoDecoder*) : HRESULT
    @lpVtbl.value.create_video_decoder.call(this, pvideodesc, pconfig, ppdecoder)
  end
  def create_video_processor(this : ID3D11VideoDevice2*, penum : ID3D11VideoProcessorEnumerator, rateconversionindex : UInt32, ppvideoprocessor : ID3D11VideoProcessor*) : HRESULT
    @lpVtbl.value.create_video_processor.call(this, penum, rateconversionindex, ppvideoprocessor)
  end
  def create_authenticated_channel(this : ID3D11VideoDevice2*, channeltype : D3D11_AUTHENTICATED_CHANNEL_TYPE, ppauthenticatedchannel : ID3D11AuthenticatedChannel*) : HRESULT
    @lpVtbl.value.create_authenticated_channel.call(this, channeltype, ppauthenticatedchannel)
  end
  def create_crypto_session(this : ID3D11VideoDevice2*, pcryptotype : Guid*, pdecoderprofile : Guid*, pkeyexchangetype : Guid*, ppcryptosession : ID3D11CryptoSession*) : HRESULT
    @lpVtbl.value.create_crypto_session.call(this, pcryptotype, pdecoderprofile, pkeyexchangetype, ppcryptosession)
  end
  def create_video_decoder_output_view(this : ID3D11VideoDevice2*, presource : ID3D11Resource, pdesc : D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC*, ppvdovview : ID3D11VideoDecoderOutputView*) : HRESULT
    @lpVtbl.value.create_video_decoder_output_view.call(this, presource, pdesc, ppvdovview)
  end
  def create_video_processor_input_view(this : ID3D11VideoDevice2*, presource : ID3D11Resource, penum : ID3D11VideoProcessorEnumerator, pdesc : D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*, ppvpiview : ID3D11VideoProcessorInputView*) : HRESULT
    @lpVtbl.value.create_video_processor_input_view.call(this, presource, penum, pdesc, ppvpiview)
  end
  def create_video_processor_output_view(this : ID3D11VideoDevice2*, presource : ID3D11Resource, penum : ID3D11VideoProcessorEnumerator, pdesc : D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*, ppvpoview : ID3D11VideoProcessorOutputView*) : HRESULT
    @lpVtbl.value.create_video_processor_output_view.call(this, presource, penum, pdesc, ppvpoview)
  end
  def create_video_processor_enumerator(this : ID3D11VideoDevice2*, pdesc : D3D11_VIDEO_PROCESSOR_CONTENT_DESC*, ppenum : ID3D11VideoProcessorEnumerator*) : HRESULT
    @lpVtbl.value.create_video_processor_enumerator.call(this, pdesc, ppenum)
  end
  def get_video_decoder_profile_count(this : ID3D11VideoDevice2*) : UInt32
    @lpVtbl.value.get_video_decoder_profile_count.call(this)
  end
  def get_video_decoder_profile(this : ID3D11VideoDevice2*, index : UInt32, pdecoderprofile : Guid*) : HRESULT
    @lpVtbl.value.get_video_decoder_profile.call(this, index, pdecoderprofile)
  end
  def check_video_decoder_format(this : ID3D11VideoDevice2*, pdecoderprofile : Guid*, format : DXGI_FORMAT, psupported : LibC::BOOL*) : HRESULT
    @lpVtbl.value.check_video_decoder_format.call(this, pdecoderprofile, format, psupported)
  end
  def get_video_decoder_config_count(this : ID3D11VideoDevice2*, pdesc : D3D11_VIDEO_DECODER_DESC*, pcount : UInt32*) : HRESULT
    @lpVtbl.value.get_video_decoder_config_count.call(this, pdesc, pcount)
  end
  def get_video_decoder_config(this : ID3D11VideoDevice2*, pdesc : D3D11_VIDEO_DECODER_DESC*, index : UInt32, pconfig : D3D11_VIDEO_DECODER_CONFIG*) : HRESULT
    @lpVtbl.value.get_video_decoder_config.call(this, pdesc, index, pconfig)
  end
  def get_content_protection_caps(this : ID3D11VideoDevice2*, pcryptotype : Guid*, pdecoderprofile : Guid*, pcaps : D3D11_VIDEO_CONTENT_PROTECTION_CAPS*) : HRESULT
    @lpVtbl.value.get_content_protection_caps.call(this, pcryptotype, pdecoderprofile, pcaps)
  end
  def check_crypto_key_exchange(this : ID3D11VideoDevice2*, pcryptotype : Guid*, pdecoderprofile : Guid*, index : UInt32, pkeyexchangetype : Guid*) : HRESULT
    @lpVtbl.value.check_crypto_key_exchange.call(this, pcryptotype, pdecoderprofile, index, pkeyexchangetype)
  end
  def set_private_data(this : ID3D11VideoDevice2*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11VideoDevice2*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_crypto_session_private_data_size(this : ID3D11VideoDevice2*, pcryptotype : Guid*, pdecoderprofile : Guid*, pkeyexchangetype : Guid*, pprivateinputsize : UInt32*, pprivateoutputsize : UInt32*) : HRESULT
    @lpVtbl.value.get_crypto_session_private_data_size.call(this, pcryptotype, pdecoderprofile, pkeyexchangetype, pprivateinputsize, pprivateoutputsize)
  end
  def get_video_decoder_caps(this : ID3D11VideoDevice2*, pdecoderprofile : Guid*, samplewidth : UInt32, sampleheight : UInt32, pframerate : DXGI_RATIONAL*, bitrate : UInt32, pcryptotype : Guid*, pdecodercaps : UInt32*) : HRESULT
    @lpVtbl.value.get_video_decoder_caps.call(this, pdecoderprofile, samplewidth, sampleheight, pframerate, bitrate, pcryptotype, pdecodercaps)
  end
  def check_video_decoder_downsampling(this : ID3D11VideoDevice2*, pinputdesc : D3D11_VIDEO_DECODER_DESC*, inputcolorspace : DXGI_COLOR_SPACE_TYPE, pinputconfig : D3D11_VIDEO_DECODER_CONFIG*, pframerate : DXGI_RATIONAL*, poutputdesc : D3D11_VIDEO_SAMPLE_DESC*, psupported : LibC::BOOL*, prealtimehint : LibC::BOOL*) : HRESULT
    @lpVtbl.value.check_video_decoder_downsampling.call(this, pinputdesc, inputcolorspace, pinputconfig, pframerate, poutputdesc, psupported, prealtimehint)
  end
  def recommend_video_decoder_downsample_parameters(this : ID3D11VideoDevice2*, pinputdesc : D3D11_VIDEO_DECODER_DESC*, inputcolorspace : DXGI_COLOR_SPACE_TYPE, pinputconfig : D3D11_VIDEO_DECODER_CONFIG*, pframerate : DXGI_RATIONAL*, precommendedoutputdesc : D3D11_VIDEO_SAMPLE_DESC*) : HRESULT
    @lpVtbl.value.recommend_video_decoder_downsample_parameters.call(this, pinputdesc, inputcolorspace, pinputconfig, pframerate, precommendedoutputdesc)
  end
  def check_feature_support(this : ID3D11VideoDevice2*, feature : D3D11_FEATURE_VIDEO, pfeaturesupportdata : Void*, featuresupportdatasize : UInt32) : HRESULT
    @lpVtbl.value.check_feature_support.call(this, feature, pfeaturesupportdata, featuresupportdatasize)
  end
  def negotiate_crypto_session_key_exchange_mt(this : ID3D11VideoDevice2*, pcryptosession : ID3D11CryptoSession, flags : D3D11_CRYPTO_SESSION_KEY_EXCHANGE_FLAGS, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.negotiate_crypto_session_key_exchange_mt.call(this, pcryptosession, flags, datasize, pdata)
  end
end
struct LibWin32::ID3D11VideoContext3
  def query_interface(this : ID3D11VideoContext3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11VideoContext3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11VideoContext3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_device(this : ID3D11VideoContext3*, ppdevice : ID3D11Device*) : Void
    @lpVtbl.value.get_device.call(this, ppdevice)
  end
  def get_private_data(this : ID3D11VideoContext3*, guid : Guid*, pdatasize : UInt32*, pdata : Void*) : HRESULT
    @lpVtbl.value.get_private_data.call(this, guid, pdatasize, pdata)
  end
  def set_private_data(this : ID3D11VideoContext3*, guid : Guid*, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.set_private_data.call(this, guid, datasize, pdata)
  end
  def set_private_data_interface(this : ID3D11VideoContext3*, guid : Guid*, pdata : IUnknown) : HRESULT
    @lpVtbl.value.set_private_data_interface.call(this, guid, pdata)
  end
  def get_decoder_buffer(this : ID3D11VideoContext3*, pdecoder : ID3D11VideoDecoder, type : D3D11_VIDEO_DECODER_BUFFER_TYPE, pbuffersize : UInt32*, ppbuffer : Void**) : HRESULT
    @lpVtbl.value.get_decoder_buffer.call(this, pdecoder, type, pbuffersize, ppbuffer)
  end
  def release_decoder_buffer(this : ID3D11VideoContext3*, pdecoder : ID3D11VideoDecoder, type : D3D11_VIDEO_DECODER_BUFFER_TYPE) : HRESULT
    @lpVtbl.value.release_decoder_buffer.call(this, pdecoder, type)
  end
  def decoder_begin_frame(this : ID3D11VideoContext3*, pdecoder : ID3D11VideoDecoder, pview : ID3D11VideoDecoderOutputView, contentkeysize : UInt32, pcontentkey : Void*) : HRESULT
    @lpVtbl.value.decoder_begin_frame.call(this, pdecoder, pview, contentkeysize, pcontentkey)
  end
  def decoder_end_frame(this : ID3D11VideoContext3*, pdecoder : ID3D11VideoDecoder) : HRESULT
    @lpVtbl.value.decoder_end_frame.call(this, pdecoder)
  end
  def submit_decoder_buffers(this : ID3D11VideoContext3*, pdecoder : ID3D11VideoDecoder, numbuffers : UInt32, pbufferdesc : D3D11_VIDEO_DECODER_BUFFER_DESC*) : HRESULT
    @lpVtbl.value.submit_decoder_buffers.call(this, pdecoder, numbuffers, pbufferdesc)
  end
  def decoder_extension(this : ID3D11VideoContext3*, pdecoder : ID3D11VideoDecoder, pextensiondata : D3D11_VIDEO_DECODER_EXTENSION*) : Int32
    @lpVtbl.value.decoder_extension.call(this, pdecoder, pextensiondata)
  end
  def video_processor_set_output_target_rect(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, enable : LibC::BOOL, prect : RECT*) : Void
    @lpVtbl.value.video_processor_set_output_target_rect.call(this, pvideoprocessor, enable, prect)
  end
  def video_processor_set_output_background_color(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, ycbcr : LibC::BOOL, pcolor : D3D11_VIDEO_COLOR*) : Void
    @lpVtbl.value.video_processor_set_output_background_color.call(this, pvideoprocessor, ycbcr, pcolor)
  end
  def video_processor_set_output_color_space(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, pcolorspace : D3D11_VIDEO_PROCESSOR_COLOR_SPACE*) : Void
    @lpVtbl.value.video_processor_set_output_color_space.call(this, pvideoprocessor, pcolorspace)
  end
  def video_processor_set_output_alpha_fill_mode(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, alphafillmode : D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE, streamindex : UInt32) : Void
    @lpVtbl.value.video_processor_set_output_alpha_fill_mode.call(this, pvideoprocessor, alphafillmode, streamindex)
  end
  def video_processor_set_output_constriction(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, enable : LibC::BOOL, size : SIZE) : Void
    @lpVtbl.value.video_processor_set_output_constriction.call(this, pvideoprocessor, enable, size)
  end
  def video_processor_set_output_stereo_mode(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, enable : LibC::BOOL) : Void
    @lpVtbl.value.video_processor_set_output_stereo_mode.call(this, pvideoprocessor, enable)
  end
  def video_processor_set_output_extension(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, pextensionguid : Guid*, datasize : UInt32, pdata : Void*) : Int32
    @lpVtbl.value.video_processor_set_output_extension.call(this, pvideoprocessor, pextensionguid, datasize, pdata)
  end
  def video_processor_get_output_target_rect(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, enabled : LibC::BOOL*, prect : RECT*) : Void
    @lpVtbl.value.video_processor_get_output_target_rect.call(this, pvideoprocessor, enabled, prect)
  end
  def video_processor_get_output_background_color(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, pycbcr : LibC::BOOL*, pcolor : D3D11_VIDEO_COLOR*) : Void
    @lpVtbl.value.video_processor_get_output_background_color.call(this, pvideoprocessor, pycbcr, pcolor)
  end
  def video_processor_get_output_color_space(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, pcolorspace : D3D11_VIDEO_PROCESSOR_COLOR_SPACE*) : Void
    @lpVtbl.value.video_processor_get_output_color_space.call(this, pvideoprocessor, pcolorspace)
  end
  def video_processor_get_output_alpha_fill_mode(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, palphafillmode : D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE*, pstreamindex : UInt32*) : Void
    @lpVtbl.value.video_processor_get_output_alpha_fill_mode.call(this, pvideoprocessor, palphafillmode, pstreamindex)
  end
  def video_processor_get_output_constriction(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, penabled : LibC::BOOL*, psize : SIZE*) : Void
    @lpVtbl.value.video_processor_get_output_constriction.call(this, pvideoprocessor, penabled, psize)
  end
  def video_processor_get_output_stereo_mode(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, penabled : LibC::BOOL*) : Void
    @lpVtbl.value.video_processor_get_output_stereo_mode.call(this, pvideoprocessor, penabled)
  end
  def video_processor_get_output_extension(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, pextensionguid : Guid*, datasize : UInt32, pdata : Void*) : Int32
    @lpVtbl.value.video_processor_get_output_extension.call(this, pvideoprocessor, pextensionguid, datasize, pdata)
  end
  def video_processor_set_stream_frame_format(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, frameformat : D3D11_VIDEO_FRAME_FORMAT) : Void
    @lpVtbl.value.video_processor_set_stream_frame_format.call(this, pvideoprocessor, streamindex, frameformat)
  end
  def video_processor_set_stream_color_space(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, pcolorspace : D3D11_VIDEO_PROCESSOR_COLOR_SPACE*) : Void
    @lpVtbl.value.video_processor_set_stream_color_space.call(this, pvideoprocessor, streamindex, pcolorspace)
  end
  def video_processor_set_stream_output_rate(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, outputrate : D3D11_VIDEO_PROCESSOR_OUTPUT_RATE, repeatframe : LibC::BOOL, pcustomrate : DXGI_RATIONAL*) : Void
    @lpVtbl.value.video_processor_set_stream_output_rate.call(this, pvideoprocessor, streamindex, outputrate, repeatframe, pcustomrate)
  end
  def video_processor_set_stream_source_rect(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, prect : RECT*) : Void
    @lpVtbl.value.video_processor_set_stream_source_rect.call(this, pvideoprocessor, streamindex, enable, prect)
  end
  def video_processor_set_stream_dest_rect(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, prect : RECT*) : Void
    @lpVtbl.value.video_processor_set_stream_dest_rect.call(this, pvideoprocessor, streamindex, enable, prect)
  end
  def video_processor_set_stream_alpha(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, alpha : Float32) : Void
    @lpVtbl.value.video_processor_set_stream_alpha.call(this, pvideoprocessor, streamindex, enable, alpha)
  end
  def video_processor_set_stream_palette(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, count : UInt32, pentries : UInt32*) : Void
    @lpVtbl.value.video_processor_set_stream_palette.call(this, pvideoprocessor, streamindex, count, pentries)
  end
  def video_processor_set_stream_pixel_aspect_ratio(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, psourceaspectratio : DXGI_RATIONAL*, pdestinationaspectratio : DXGI_RATIONAL*) : Void
    @lpVtbl.value.video_processor_set_stream_pixel_aspect_ratio.call(this, pvideoprocessor, streamindex, enable, psourceaspectratio, pdestinationaspectratio)
  end
  def video_processor_set_stream_luma_key(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, lower : Float32, upper : Float32) : Void
    @lpVtbl.value.video_processor_set_stream_luma_key.call(this, pvideoprocessor, streamindex, enable, lower, upper)
  end
  def video_processor_set_stream_stereo_format(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, format : D3D11_VIDEO_PROCESSOR_STEREO_FORMAT, leftviewframe0 : LibC::BOOL, baseviewframe0 : LibC::BOOL, flipmode : D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE, monooffset : Int32) : Void
    @lpVtbl.value.video_processor_set_stream_stereo_format.call(this, pvideoprocessor, streamindex, enable, format, leftviewframe0, baseviewframe0, flipmode, monooffset)
  end
  def video_processor_set_stream_auto_processing_mode(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL) : Void
    @lpVtbl.value.video_processor_set_stream_auto_processing_mode.call(this, pvideoprocessor, streamindex, enable)
  end
  def video_processor_set_stream_filter(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, filter : D3D11_VIDEO_PROCESSOR_FILTER, enable : LibC::BOOL, level : Int32) : Void
    @lpVtbl.value.video_processor_set_stream_filter.call(this, pvideoprocessor, streamindex, filter, enable, level)
  end
  def video_processor_set_stream_extension(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, pextensionguid : Guid*, datasize : UInt32, pdata : Void*) : Int32
    @lpVtbl.value.video_processor_set_stream_extension.call(this, pvideoprocessor, streamindex, pextensionguid, datasize, pdata)
  end
  def video_processor_get_stream_frame_format(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, pframeformat : D3D11_VIDEO_FRAME_FORMAT*) : Void
    @lpVtbl.value.video_processor_get_stream_frame_format.call(this, pvideoprocessor, streamindex, pframeformat)
  end
  def video_processor_get_stream_color_space(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, pcolorspace : D3D11_VIDEO_PROCESSOR_COLOR_SPACE*) : Void
    @lpVtbl.value.video_processor_get_stream_color_space.call(this, pvideoprocessor, streamindex, pcolorspace)
  end
  def video_processor_get_stream_output_rate(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, poutputrate : D3D11_VIDEO_PROCESSOR_OUTPUT_RATE*, prepeatframe : LibC::BOOL*, pcustomrate : DXGI_RATIONAL*) : Void
    @lpVtbl.value.video_processor_get_stream_output_rate.call(this, pvideoprocessor, streamindex, poutputrate, prepeatframe, pcustomrate)
  end
  def video_processor_get_stream_source_rect(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penabled : LibC::BOOL*, prect : RECT*) : Void
    @lpVtbl.value.video_processor_get_stream_source_rect.call(this, pvideoprocessor, streamindex, penabled, prect)
  end
  def video_processor_get_stream_dest_rect(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penabled : LibC::BOOL*, prect : RECT*) : Void
    @lpVtbl.value.video_processor_get_stream_dest_rect.call(this, pvideoprocessor, streamindex, penabled, prect)
  end
  def video_processor_get_stream_alpha(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penabled : LibC::BOOL*, palpha : Float32*) : Void
    @lpVtbl.value.video_processor_get_stream_alpha.call(this, pvideoprocessor, streamindex, penabled, palpha)
  end
  def video_processor_get_stream_palette(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, count : UInt32, pentries : UInt32*) : Void
    @lpVtbl.value.video_processor_get_stream_palette.call(this, pvideoprocessor, streamindex, count, pentries)
  end
  def video_processor_get_stream_pixel_aspect_ratio(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penabled : LibC::BOOL*, psourceaspectratio : DXGI_RATIONAL*, pdestinationaspectratio : DXGI_RATIONAL*) : Void
    @lpVtbl.value.video_processor_get_stream_pixel_aspect_ratio.call(this, pvideoprocessor, streamindex, penabled, psourceaspectratio, pdestinationaspectratio)
  end
  def video_processor_get_stream_luma_key(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penabled : LibC::BOOL*, plower : Float32*, pupper : Float32*) : Void
    @lpVtbl.value.video_processor_get_stream_luma_key.call(this, pvideoprocessor, streamindex, penabled, plower, pupper)
  end
  def video_processor_get_stream_stereo_format(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penable : LibC::BOOL*, pformat : D3D11_VIDEO_PROCESSOR_STEREO_FORMAT*, pleftviewframe0 : LibC::BOOL*, pbaseviewframe0 : LibC::BOOL*, pflipmode : D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE*, monooffset : Int32*) : Void
    @lpVtbl.value.video_processor_get_stream_stereo_format.call(this, pvideoprocessor, streamindex, penable, pformat, pleftviewframe0, pbaseviewframe0, pflipmode, monooffset)
  end
  def video_processor_get_stream_auto_processing_mode(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penabled : LibC::BOOL*) : Void
    @lpVtbl.value.video_processor_get_stream_auto_processing_mode.call(this, pvideoprocessor, streamindex, penabled)
  end
  def video_processor_get_stream_filter(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, filter : D3D11_VIDEO_PROCESSOR_FILTER, penabled : LibC::BOOL*, plevel : Int32*) : Void
    @lpVtbl.value.video_processor_get_stream_filter.call(this, pvideoprocessor, streamindex, filter, penabled, plevel)
  end
  def video_processor_get_stream_extension(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, pextensionguid : Guid*, datasize : UInt32, pdata : Void*) : Int32
    @lpVtbl.value.video_processor_get_stream_extension.call(this, pvideoprocessor, streamindex, pextensionguid, datasize, pdata)
  end
  def video_processor_blt(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, pview : ID3D11VideoProcessorOutputView, outputframe : UInt32, streamcount : UInt32, pstreams : D3D11_VIDEO_PROCESSOR_STREAM*) : HRESULT
    @lpVtbl.value.video_processor_blt.call(this, pvideoprocessor, pview, outputframe, streamcount, pstreams)
  end
  def negotiate_crypto_session_key_exchange(this : ID3D11VideoContext3*, pcryptosession : ID3D11CryptoSession, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.negotiate_crypto_session_key_exchange.call(this, pcryptosession, datasize, pdata)
  end
  def encryption_blt(this : ID3D11VideoContext3*, pcryptosession : ID3D11CryptoSession, psrcsurface : ID3D11Texture2D, pdstsurface : ID3D11Texture2D, ivsize : UInt32, piv : Void*) : Void
    @lpVtbl.value.encryption_blt.call(this, pcryptosession, psrcsurface, pdstsurface, ivsize, piv)
  end
  def decryption_blt(this : ID3D11VideoContext3*, pcryptosession : ID3D11CryptoSession, psrcsurface : ID3D11Texture2D, pdstsurface : ID3D11Texture2D, pencryptedblockinfo : D3D11_ENCRYPTED_BLOCK_INFO*, contentkeysize : UInt32, pcontentkey : Void*, ivsize : UInt32, piv : Void*) : Void
    @lpVtbl.value.decryption_blt.call(this, pcryptosession, psrcsurface, pdstsurface, pencryptedblockinfo, contentkeysize, pcontentkey, ivsize, piv)
  end
  def start_session_key_refresh(this : ID3D11VideoContext3*, pcryptosession : ID3D11CryptoSession, randomnumbersize : UInt32, prandomnumber : Void*) : Void
    @lpVtbl.value.start_session_key_refresh.call(this, pcryptosession, randomnumbersize, prandomnumber)
  end
  def finish_session_key_refresh(this : ID3D11VideoContext3*, pcryptosession : ID3D11CryptoSession) : Void
    @lpVtbl.value.finish_session_key_refresh.call(this, pcryptosession)
  end
  def get_encryption_blt_key(this : ID3D11VideoContext3*, pcryptosession : ID3D11CryptoSession, keysize : UInt32, preadbackkey : Void*) : HRESULT
    @lpVtbl.value.get_encryption_blt_key.call(this, pcryptosession, keysize, preadbackkey)
  end
  def negotiate_authenticated_channel_key_exchange(this : ID3D11VideoContext3*, pchannel : ID3D11AuthenticatedChannel, datasize : UInt32, pdata : Void*) : HRESULT
    @lpVtbl.value.negotiate_authenticated_channel_key_exchange.call(this, pchannel, datasize, pdata)
  end
  def query_authenticated_channel(this : ID3D11VideoContext3*, pchannel : ID3D11AuthenticatedChannel, inputsize : UInt32, pinput : Void*, outputsize : UInt32, poutput : Void*) : HRESULT
    @lpVtbl.value.query_authenticated_channel.call(this, pchannel, inputsize, pinput, outputsize, poutput)
  end
  def configure_authenticated_channel(this : ID3D11VideoContext3*, pchannel : ID3D11AuthenticatedChannel, inputsize : UInt32, pinput : Void*, poutput : D3D11_AUTHENTICATED_CONFIGURE_OUTPUT*) : HRESULT
    @lpVtbl.value.configure_authenticated_channel.call(this, pchannel, inputsize, pinput, poutput)
  end
  def video_processor_set_stream_rotation(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, rotation : D3D11_VIDEO_PROCESSOR_ROTATION) : Void
    @lpVtbl.value.video_processor_set_stream_rotation.call(this, pvideoprocessor, streamindex, enable, rotation)
  end
  def video_processor_get_stream_rotation(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penable : LibC::BOOL*, protation : D3D11_VIDEO_PROCESSOR_ROTATION*) : Void
    @lpVtbl.value.video_processor_get_stream_rotation.call(this, pvideoprocessor, streamindex, penable, protation)
  end
  def submit_decoder_buffers1(this : ID3D11VideoContext3*, pdecoder : ID3D11VideoDecoder, numbuffers : UInt32, pbufferdesc : D3D11_VIDEO_DECODER_BUFFER_DESC1*) : HRESULT
    @lpVtbl.value.submit_decoder_buffers1.call(this, pdecoder, numbuffers, pbufferdesc)
  end
  def get_data_for_new_hardware_key(this : ID3D11VideoContext3*, pcryptosession : ID3D11CryptoSession, privateinputsize : UInt32, pprivatinputdata : Void*, pprivateoutputdata : UInt64*) : HRESULT
    @lpVtbl.value.get_data_for_new_hardware_key.call(this, pcryptosession, privateinputsize, pprivatinputdata, pprivateoutputdata)
  end
  def check_crypto_session_status(this : ID3D11VideoContext3*, pcryptosession : ID3D11CryptoSession, pstatus : D3D11_CRYPTO_SESSION_STATUS*) : HRESULT
    @lpVtbl.value.check_crypto_session_status.call(this, pcryptosession, pstatus)
  end
  def decoder_enable_downsampling(this : ID3D11VideoContext3*, pdecoder : ID3D11VideoDecoder, inputcolorspace : DXGI_COLOR_SPACE_TYPE, poutputdesc : D3D11_VIDEO_SAMPLE_DESC*, referenceframecount : UInt32) : HRESULT
    @lpVtbl.value.decoder_enable_downsampling.call(this, pdecoder, inputcolorspace, poutputdesc, referenceframecount)
  end
  def decoder_update_downsampling(this : ID3D11VideoContext3*, pdecoder : ID3D11VideoDecoder, poutputdesc : D3D11_VIDEO_SAMPLE_DESC*) : HRESULT
    @lpVtbl.value.decoder_update_downsampling.call(this, pdecoder, poutputdesc)
  end
  def video_processor_set_output_color_space1(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, colorspace : DXGI_COLOR_SPACE_TYPE) : Void
    @lpVtbl.value.video_processor_set_output_color_space1.call(this, pvideoprocessor, colorspace)
  end
  def video_processor_set_output_shader_usage(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, shaderusage : LibC::BOOL) : Void
    @lpVtbl.value.video_processor_set_output_shader_usage.call(this, pvideoprocessor, shaderusage)
  end
  def video_processor_get_output_color_space1(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, pcolorspace : DXGI_COLOR_SPACE_TYPE*) : Void
    @lpVtbl.value.video_processor_get_output_color_space1.call(this, pvideoprocessor, pcolorspace)
  end
  def video_processor_get_output_shader_usage(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, pshaderusage : LibC::BOOL*) : Void
    @lpVtbl.value.video_processor_get_output_shader_usage.call(this, pvideoprocessor, pshaderusage)
  end
  def video_processor_set_stream_color_space1(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, colorspace : DXGI_COLOR_SPACE_TYPE) : Void
    @lpVtbl.value.video_processor_set_stream_color_space1.call(this, pvideoprocessor, streamindex, colorspace)
  end
  def video_processor_set_stream_mirror(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, enable : LibC::BOOL, fliphorizontal : LibC::BOOL, flipvertical : LibC::BOOL) : Void
    @lpVtbl.value.video_processor_set_stream_mirror.call(this, pvideoprocessor, streamindex, enable, fliphorizontal, flipvertical)
  end
  def video_processor_get_stream_color_space1(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, pcolorspace : DXGI_COLOR_SPACE_TYPE*) : Void
    @lpVtbl.value.video_processor_get_stream_color_space1.call(this, pvideoprocessor, streamindex, pcolorspace)
  end
  def video_processor_get_stream_mirror(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, penable : LibC::BOOL*, pfliphorizontal : LibC::BOOL*, pflipvertical : LibC::BOOL*) : Void
    @lpVtbl.value.video_processor_get_stream_mirror.call(this, pvideoprocessor, streamindex, penable, pfliphorizontal, pflipvertical)
  end
  def video_processor_get_behavior_hints(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, outputwidth : UInt32, outputheight : UInt32, outputformat : DXGI_FORMAT, streamcount : UInt32, pstreams : D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT*, pbehaviorhints : UInt32*) : HRESULT
    @lpVtbl.value.video_processor_get_behavior_hints.call(this, pvideoprocessor, outputwidth, outputheight, outputformat, streamcount, pstreams, pbehaviorhints)
  end
  def video_processor_set_output_hdr_meta_data(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, type : DXGI_HDR_METADATA_TYPE, size : UInt32, phdrmetadata : Void*) : Void
    @lpVtbl.value.video_processor_set_output_hdr_meta_data.call(this, pvideoprocessor, type, size, phdrmetadata)
  end
  def video_processor_get_output_hdr_meta_data(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, ptype : DXGI_HDR_METADATA_TYPE*, size : UInt32, pmetadata : Void*) : Void
    @lpVtbl.value.video_processor_get_output_hdr_meta_data.call(this, pvideoprocessor, ptype, size, pmetadata)
  end
  def video_processor_set_stream_hdr_meta_data(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, type : DXGI_HDR_METADATA_TYPE, size : UInt32, phdrmetadata : Void*) : Void
    @lpVtbl.value.video_processor_set_stream_hdr_meta_data.call(this, pvideoprocessor, streamindex, type, size, phdrmetadata)
  end
  def video_processor_get_stream_hdr_meta_data(this : ID3D11VideoContext3*, pvideoprocessor : ID3D11VideoProcessor, streamindex : UInt32, ptype : DXGI_HDR_METADATA_TYPE*, size : UInt32, pmetadata : Void*) : Void
    @lpVtbl.value.video_processor_get_stream_hdr_meta_data.call(this, pvideoprocessor, streamindex, ptype, size, pmetadata)
  end
  def decoder_begin_frame1(this : ID3D11VideoContext3*, pdecoder : ID3D11VideoDecoder, pview : ID3D11VideoDecoderOutputView, contentkeysize : UInt32, pcontentkey : Void*, numcomponenthistograms : UInt32, phistogramoffsets : UInt32*, pphistogrambuffers : ID3D11Buffer*) : HRESULT
    @lpVtbl.value.decoder_begin_frame1.call(this, pdecoder, pview, contentkeysize, pcontentkey, numcomponenthistograms, phistogramoffsets, pphistogrambuffers)
  end
  def submit_decoder_buffers2(this : ID3D11VideoContext3*, pdecoder : ID3D11VideoDecoder, numbuffers : UInt32, pbufferdesc : D3D11_VIDEO_DECODER_BUFFER_DESC2*) : HRESULT
    @lpVtbl.value.submit_decoder_buffers2.call(this, pdecoder, numbuffers, pbufferdesc)
  end
end
struct LibWin32::ID3D11ShaderReflectionType
  def get_desc(this : ID3D11ShaderReflectionType*, pdesc : D3D11_SHADER_TYPE_DESC*) : HRESULT
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
  def get_member_type_by_index(this : ID3D11ShaderReflectionType*, index : UInt32) : ID3D11ShaderReflectionType
    @lpVtbl.value.get_member_type_by_index.call(this, index)
  end
  def get_member_type_by_name(this : ID3D11ShaderReflectionType*, name : PSTR) : ID3D11ShaderReflectionType
    @lpVtbl.value.get_member_type_by_name.call(this, name)
  end
  def get_member_type_name(this : ID3D11ShaderReflectionType*, index : UInt32) : PSTR
    @lpVtbl.value.get_member_type_name.call(this, index)
  end
  def is_equal(this : ID3D11ShaderReflectionType*, ptype : ID3D11ShaderReflectionType) : HRESULT
    @lpVtbl.value.is_equal.call(this, ptype)
  end
  def get_sub_type(this : ID3D11ShaderReflectionType*) : ID3D11ShaderReflectionType
    @lpVtbl.value.get_sub_type.call(this)
  end
  def get_base_class(this : ID3D11ShaderReflectionType*) : ID3D11ShaderReflectionType
    @lpVtbl.value.get_base_class.call(this)
  end
  def get_num_interfaces(this : ID3D11ShaderReflectionType*) : UInt32
    @lpVtbl.value.get_num_interfaces.call(this)
  end
  def get_interface_by_index(this : ID3D11ShaderReflectionType*, uindex : UInt32) : ID3D11ShaderReflectionType
    @lpVtbl.value.get_interface_by_index.call(this, uindex)
  end
  def is_of_type(this : ID3D11ShaderReflectionType*, ptype : ID3D11ShaderReflectionType) : HRESULT
    @lpVtbl.value.is_of_type.call(this, ptype)
  end
  def implements_interface(this : ID3D11ShaderReflectionType*, pbase : ID3D11ShaderReflectionType) : HRESULT
    @lpVtbl.value.implements_interface.call(this, pbase)
  end
end
struct LibWin32::ID3D11ShaderReflectionVariable
  def get_desc(this : ID3D11ShaderReflectionVariable*, pdesc : D3D11_SHADER_VARIABLE_DESC*) : HRESULT
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
  def get_type(this : ID3D11ShaderReflectionVariable*) : ID3D11ShaderReflectionType
    @lpVtbl.value.get_type.call(this)
  end
  def get_buffer(this : ID3D11ShaderReflectionVariable*) : ID3D11ShaderReflectionConstantBuffer
    @lpVtbl.value.get_buffer.call(this)
  end
  def get_interface_slot(this : ID3D11ShaderReflectionVariable*, uarrayindex : UInt32) : UInt32
    @lpVtbl.value.get_interface_slot.call(this, uarrayindex)
  end
end
struct LibWin32::ID3D11ShaderReflectionConstantBuffer
  def get_desc(this : ID3D11ShaderReflectionConstantBuffer*, pdesc : D3D11_SHADER_BUFFER_DESC*) : HRESULT
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
  def get_variable_by_index(this : ID3D11ShaderReflectionConstantBuffer*, index : UInt32) : ID3D11ShaderReflectionVariable
    @lpVtbl.value.get_variable_by_index.call(this, index)
  end
  def get_variable_by_name(this : ID3D11ShaderReflectionConstantBuffer*, name : PSTR) : ID3D11ShaderReflectionVariable
    @lpVtbl.value.get_variable_by_name.call(this, name)
  end
end
struct LibWin32::ID3D11ShaderReflection
  def query_interface(this : ID3D11ShaderReflection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11ShaderReflection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11ShaderReflection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_desc(this : ID3D11ShaderReflection*, pdesc : D3D11_SHADER_DESC*) : HRESULT
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
  def get_constant_buffer_by_index(this : ID3D11ShaderReflection*, index : UInt32) : ID3D11ShaderReflectionConstantBuffer
    @lpVtbl.value.get_constant_buffer_by_index.call(this, index)
  end
  def get_constant_buffer_by_name(this : ID3D11ShaderReflection*, name : PSTR) : ID3D11ShaderReflectionConstantBuffer
    @lpVtbl.value.get_constant_buffer_by_name.call(this, name)
  end
  def get_resource_binding_desc(this : ID3D11ShaderReflection*, resourceindex : UInt32, pdesc : D3D11_SHADER_INPUT_BIND_DESC*) : HRESULT
    @lpVtbl.value.get_resource_binding_desc.call(this, resourceindex, pdesc)
  end
  def get_input_parameter_desc(this : ID3D11ShaderReflection*, parameterindex : UInt32, pdesc : D3D11_SIGNATURE_PARAMETER_DESC*) : HRESULT
    @lpVtbl.value.get_input_parameter_desc.call(this, parameterindex, pdesc)
  end
  def get_output_parameter_desc(this : ID3D11ShaderReflection*, parameterindex : UInt32, pdesc : D3D11_SIGNATURE_PARAMETER_DESC*) : HRESULT
    @lpVtbl.value.get_output_parameter_desc.call(this, parameterindex, pdesc)
  end
  def get_patch_constant_parameter_desc(this : ID3D11ShaderReflection*, parameterindex : UInt32, pdesc : D3D11_SIGNATURE_PARAMETER_DESC*) : HRESULT
    @lpVtbl.value.get_patch_constant_parameter_desc.call(this, parameterindex, pdesc)
  end
  def get_variable_by_name(this : ID3D11ShaderReflection*, name : PSTR) : ID3D11ShaderReflectionVariable
    @lpVtbl.value.get_variable_by_name.call(this, name)
  end
  def get_resource_binding_desc_by_name(this : ID3D11ShaderReflection*, name : PSTR, pdesc : D3D11_SHADER_INPUT_BIND_DESC*) : HRESULT
    @lpVtbl.value.get_resource_binding_desc_by_name.call(this, name, pdesc)
  end
  def get_mov_instruction_count(this : ID3D11ShaderReflection*) : UInt32
    @lpVtbl.value.get_mov_instruction_count.call(this)
  end
  def get_movc_instruction_count(this : ID3D11ShaderReflection*) : UInt32
    @lpVtbl.value.get_movc_instruction_count.call(this)
  end
  def get_conversion_instruction_count(this : ID3D11ShaderReflection*) : UInt32
    @lpVtbl.value.get_conversion_instruction_count.call(this)
  end
  def get_bitwise_instruction_count(this : ID3D11ShaderReflection*) : UInt32
    @lpVtbl.value.get_bitwise_instruction_count.call(this)
  end
  def get_gs_input_primitive(this : ID3D11ShaderReflection*) : D3D_PRIMITIVE
    @lpVtbl.value.get_gs_input_primitive.call(this)
  end
  def is_sample_frequency_shader(this : ID3D11ShaderReflection*) : LibC::BOOL
    @lpVtbl.value.is_sample_frequency_shader.call(this)
  end
  def get_num_interface_slots(this : ID3D11ShaderReflection*) : UInt32
    @lpVtbl.value.get_num_interface_slots.call(this)
  end
  def get_min_feature_level(this : ID3D11ShaderReflection*, plevel : D3D_FEATURE_LEVEL*) : HRESULT
    @lpVtbl.value.get_min_feature_level.call(this, plevel)
  end
  def get_thread_group_size(this : ID3D11ShaderReflection*, psizex : UInt32*, psizey : UInt32*, psizez : UInt32*) : UInt32
    @lpVtbl.value.get_thread_group_size.call(this, psizex, psizey, psizez)
  end
  def get_requires_flags(this : ID3D11ShaderReflection*) : UInt64
    @lpVtbl.value.get_requires_flags.call(this)
  end
end
struct LibWin32::ID3D11LibraryReflection
  def query_interface(this : ID3D11LibraryReflection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11LibraryReflection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11LibraryReflection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_desc(this : ID3D11LibraryReflection*, pdesc : D3D11_LIBRARY_DESC*) : HRESULT
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
  def get_function_by_index(this : ID3D11LibraryReflection*, functionindex : Int32) : ID3D11FunctionReflection
    @lpVtbl.value.get_function_by_index.call(this, functionindex)
  end
end
struct LibWin32::ID3D11FunctionReflection
  def get_desc(this : ID3D11FunctionReflection*, pdesc : D3D11_FUNCTION_DESC*) : HRESULT
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
  def get_constant_buffer_by_index(this : ID3D11FunctionReflection*, bufferindex : UInt32) : ID3D11ShaderReflectionConstantBuffer
    @lpVtbl.value.get_constant_buffer_by_index.call(this, bufferindex)
  end
  def get_constant_buffer_by_name(this : ID3D11FunctionReflection*, name : PSTR) : ID3D11ShaderReflectionConstantBuffer
    @lpVtbl.value.get_constant_buffer_by_name.call(this, name)
  end
  def get_resource_binding_desc(this : ID3D11FunctionReflection*, resourceindex : UInt32, pdesc : D3D11_SHADER_INPUT_BIND_DESC*) : HRESULT
    @lpVtbl.value.get_resource_binding_desc.call(this, resourceindex, pdesc)
  end
  def get_variable_by_name(this : ID3D11FunctionReflection*, name : PSTR) : ID3D11ShaderReflectionVariable
    @lpVtbl.value.get_variable_by_name.call(this, name)
  end
  def get_resource_binding_desc_by_name(this : ID3D11FunctionReflection*, name : PSTR, pdesc : D3D11_SHADER_INPUT_BIND_DESC*) : HRESULT
    @lpVtbl.value.get_resource_binding_desc_by_name.call(this, name, pdesc)
  end
  def get_function_parameter(this : ID3D11FunctionReflection*, parameterindex : Int32) : ID3D11FunctionParameterReflection
    @lpVtbl.value.get_function_parameter.call(this, parameterindex)
  end
end
struct LibWin32::ID3D11FunctionParameterReflection
  def get_desc(this : ID3D11FunctionParameterReflection*, pdesc : D3D11_PARAMETER_DESC*) : HRESULT
    @lpVtbl.value.get_desc.call(this, pdesc)
  end
end
struct LibWin32::ID3D11ModuleInstance
  def query_interface(this : ID3D11ModuleInstance*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11ModuleInstance*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11ModuleInstance*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def bind_constant_buffer(this : ID3D11ModuleInstance*, usrcslot : UInt32, udstslot : UInt32, cbdstoffset : UInt32) : HRESULT
    @lpVtbl.value.bind_constant_buffer.call(this, usrcslot, udstslot, cbdstoffset)
  end
  def bind_constant_buffer_by_name(this : ID3D11ModuleInstance*, pname : PSTR, udstslot : UInt32, cbdstoffset : UInt32) : HRESULT
    @lpVtbl.value.bind_constant_buffer_by_name.call(this, pname, udstslot, cbdstoffset)
  end
  def bind_resource(this : ID3D11ModuleInstance*, usrcslot : UInt32, udstslot : UInt32, ucount : UInt32) : HRESULT
    @lpVtbl.value.bind_resource.call(this, usrcslot, udstslot, ucount)
  end
  def bind_resource_by_name(this : ID3D11ModuleInstance*, pname : PSTR, udstslot : UInt32, ucount : UInt32) : HRESULT
    @lpVtbl.value.bind_resource_by_name.call(this, pname, udstslot, ucount)
  end
  def bind_sampler(this : ID3D11ModuleInstance*, usrcslot : UInt32, udstslot : UInt32, ucount : UInt32) : HRESULT
    @lpVtbl.value.bind_sampler.call(this, usrcslot, udstslot, ucount)
  end
  def bind_sampler_by_name(this : ID3D11ModuleInstance*, pname : PSTR, udstslot : UInt32, ucount : UInt32) : HRESULT
    @lpVtbl.value.bind_sampler_by_name.call(this, pname, udstslot, ucount)
  end
  def bind_unordered_access_view(this : ID3D11ModuleInstance*, usrcslot : UInt32, udstslot : UInt32, ucount : UInt32) : HRESULT
    @lpVtbl.value.bind_unordered_access_view.call(this, usrcslot, udstslot, ucount)
  end
  def bind_unordered_access_view_by_name(this : ID3D11ModuleInstance*, pname : PSTR, udstslot : UInt32, ucount : UInt32) : HRESULT
    @lpVtbl.value.bind_unordered_access_view_by_name.call(this, pname, udstslot, ucount)
  end
  def bind_resource_as_unordered_access_view(this : ID3D11ModuleInstance*, usrcsrvslot : UInt32, udstuavslot : UInt32, ucount : UInt32) : HRESULT
    @lpVtbl.value.bind_resource_as_unordered_access_view.call(this, usrcsrvslot, udstuavslot, ucount)
  end
  def bind_resource_as_unordered_access_view_by_name(this : ID3D11ModuleInstance*, psrvname : PSTR, udstuavslot : UInt32, ucount : UInt32) : HRESULT
    @lpVtbl.value.bind_resource_as_unordered_access_view_by_name.call(this, psrvname, udstuavslot, ucount)
  end
end
struct LibWin32::ID3D11Module
  def query_interface(this : ID3D11Module*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11Module*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11Module*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_instance(this : ID3D11Module*, pnamespace : PSTR, ppmoduleinstance : ID3D11ModuleInstance*) : HRESULT
    @lpVtbl.value.create_instance.call(this, pnamespace, ppmoduleinstance)
  end
end
struct LibWin32::ID3D11Linker
  def query_interface(this : ID3D11Linker*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11Linker*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11Linker*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def link(this : ID3D11Linker*, pentry : ID3D11ModuleInstance, pentryname : PSTR, ptargetname : PSTR, uflags : UInt32, ppshaderblob : ID3DBlob*, pperrorbuffer : ID3DBlob*) : HRESULT
    @lpVtbl.value.link.call(this, pentry, pentryname, ptargetname, uflags, ppshaderblob, pperrorbuffer)
  end
  def use_library(this : ID3D11Linker*, plibrarymi : ID3D11ModuleInstance) : HRESULT
    @lpVtbl.value.use_library.call(this, plibrarymi)
  end
  def add_clip_plane_from_c_buffer(this : ID3D11Linker*, ucbufferslot : UInt32, ucbufferentry : UInt32) : HRESULT
    @lpVtbl.value.add_clip_plane_from_c_buffer.call(this, ucbufferslot, ucbufferentry)
  end
end
struct LibWin32::ID3D11LinkingNode
  def query_interface(this : ID3D11LinkingNode*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11LinkingNode*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11LinkingNode*) : UInt32
    @lpVtbl.value.release.call(this)
  end
end
struct LibWin32::ID3D11FunctionLinkingGraph
  def query_interface(this : ID3D11FunctionLinkingGraph*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11FunctionLinkingGraph*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11FunctionLinkingGraph*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_module_instance(this : ID3D11FunctionLinkingGraph*, ppmoduleinstance : ID3D11ModuleInstance*, pperrorbuffer : ID3DBlob*) : HRESULT
    @lpVtbl.value.create_module_instance.call(this, ppmoduleinstance, pperrorbuffer)
  end
  def set_input_signature(this : ID3D11FunctionLinkingGraph*, pinputparameters : D3D11_PARAMETER_DESC*, cinputparameters : UInt32, ppinputnode : ID3D11LinkingNode*) : HRESULT
    @lpVtbl.value.set_input_signature.call(this, pinputparameters, cinputparameters, ppinputnode)
  end
  def set_output_signature(this : ID3D11FunctionLinkingGraph*, poutputparameters : D3D11_PARAMETER_DESC*, coutputparameters : UInt32, ppoutputnode : ID3D11LinkingNode*) : HRESULT
    @lpVtbl.value.set_output_signature.call(this, poutputparameters, coutputparameters, ppoutputnode)
  end
  def call_function(this : ID3D11FunctionLinkingGraph*, pmoduleinstancenamespace : PSTR, pmodulewithfunctionprototype : ID3D11Module, pfunctionname : PSTR, ppcallnode : ID3D11LinkingNode*) : HRESULT
    @lpVtbl.value.call_function.call(this, pmoduleinstancenamespace, pmodulewithfunctionprototype, pfunctionname, ppcallnode)
  end
  def pass_value(this : ID3D11FunctionLinkingGraph*, psrcnode : ID3D11LinkingNode, srcparameterindex : Int32, pdstnode : ID3D11LinkingNode, dstparameterindex : Int32) : HRESULT
    @lpVtbl.value.pass_value.call(this, psrcnode, srcparameterindex, pdstnode, dstparameterindex)
  end
  def pass_value_with_swizzle(this : ID3D11FunctionLinkingGraph*, psrcnode : ID3D11LinkingNode, srcparameterindex : Int32, psrcswizzle : PSTR, pdstnode : ID3D11LinkingNode, dstparameterindex : Int32, pdstswizzle : PSTR) : HRESULT
    @lpVtbl.value.pass_value_with_swizzle.call(this, psrcnode, srcparameterindex, psrcswizzle, pdstnode, dstparameterindex, pdstswizzle)
  end
  def get_last_error(this : ID3D11FunctionLinkingGraph*, pperrorbuffer : ID3DBlob*) : HRESULT
    @lpVtbl.value.get_last_error.call(this, pperrorbuffer)
  end
  def generate_hlsl(this : ID3D11FunctionLinkingGraph*, uflags : UInt32, ppbuffer : ID3DBlob*) : HRESULT
    @lpVtbl.value.generate_hlsl.call(this, uflags, ppbuffer)
  end
end
struct LibWin32::ID3D11ShaderTrace
  def query_interface(this : ID3D11ShaderTrace*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11ShaderTrace*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11ShaderTrace*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def trace_ready(this : ID3D11ShaderTrace*, ptestcount : UInt64*) : HRESULT
    @lpVtbl.value.trace_ready.call(this, ptestcount)
  end
  def reset_trace(this : ID3D11ShaderTrace*) : Void
    @lpVtbl.value.reset_trace.call(this)
  end
  def get_trace_stats(this : ID3D11ShaderTrace*, ptracestats : D3D11_TRACE_STATS*) : HRESULT
    @lpVtbl.value.get_trace_stats.call(this, ptracestats)
  end
  def ps_select_stamp(this : ID3D11ShaderTrace*, stampindex : UInt32) : HRESULT
    @lpVtbl.value.ps_select_stamp.call(this, stampindex)
  end
  def get_initial_register_contents(this : ID3D11ShaderTrace*, pregister : D3D11_TRACE_REGISTER*, pvalue : D3D11_TRACE_VALUE*) : HRESULT
    @lpVtbl.value.get_initial_register_contents.call(this, pregister, pvalue)
  end
  def get_step(this : ID3D11ShaderTrace*, stepindex : UInt32, ptracestep : D3D11_TRACE_STEP*) : HRESULT
    @lpVtbl.value.get_step.call(this, stepindex, ptracestep)
  end
  def get_written_register(this : ID3D11ShaderTrace*, stepindex : UInt32, writtenregisterindex : UInt32, pregister : D3D11_TRACE_REGISTER*, pvalue : D3D11_TRACE_VALUE*) : HRESULT
    @lpVtbl.value.get_written_register.call(this, stepindex, writtenregisterindex, pregister, pvalue)
  end
  def get_read_register(this : ID3D11ShaderTrace*, stepindex : UInt32, readregisterindex : UInt32, pregister : D3D11_TRACE_REGISTER*, pvalue : D3D11_TRACE_VALUE*) : HRESULT
    @lpVtbl.value.get_read_register.call(this, stepindex, readregisterindex, pregister, pvalue)
  end
end
struct LibWin32::ID3D11ShaderTraceFactory
  def query_interface(this : ID3D11ShaderTraceFactory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3D11ShaderTraceFactory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3D11ShaderTraceFactory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_shader_trace(this : ID3D11ShaderTraceFactory*, pshader : IUnknown, ptracedesc : D3D11_SHADER_TRACE_DESC*, ppshadertrace : ID3D11ShaderTrace*) : HRESULT
    @lpVtbl.value.create_shader_trace.call(this, pshader, ptracedesc, ppshadertrace)
  end
end
struct LibWin32::ID3DX11Scan
  def query_interface(this : ID3DX11Scan*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3DX11Scan*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3DX11Scan*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_scan_direction(this : ID3DX11Scan*, direction : D3DX11_SCAN_DIRECTION) : HRESULT
    @lpVtbl.value.set_scan_direction.call(this, direction)
  end
  def scan(this : ID3DX11Scan*, elementtype : D3DX11_SCAN_DATA_TYPE, opcode : D3DX11_SCAN_OPCODE, elementscansize : UInt32, psrc : ID3D11UnorderedAccessView, pdst : ID3D11UnorderedAccessView) : HRESULT
    @lpVtbl.value.scan.call(this, elementtype, opcode, elementscansize, psrc, pdst)
  end
  def multiscan(this : ID3DX11Scan*, elementtype : D3DX11_SCAN_DATA_TYPE, opcode : D3DX11_SCAN_OPCODE, elementscansize : UInt32, elementscanpitch : UInt32, scancount : UInt32, psrc : ID3D11UnorderedAccessView, pdst : ID3D11UnorderedAccessView) : HRESULT
    @lpVtbl.value.multiscan.call(this, elementtype, opcode, elementscansize, elementscanpitch, scancount, psrc, pdst)
  end
end
struct LibWin32::ID3DX11SegmentedScan
  def query_interface(this : ID3DX11SegmentedScan*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3DX11SegmentedScan*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3DX11SegmentedScan*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_scan_direction(this : ID3DX11SegmentedScan*, direction : D3DX11_SCAN_DIRECTION) : HRESULT
    @lpVtbl.value.set_scan_direction.call(this, direction)
  end
  def seg_scan(this : ID3DX11SegmentedScan*, elementtype : D3DX11_SCAN_DATA_TYPE, opcode : D3DX11_SCAN_OPCODE, elementscansize : UInt32, psrc : ID3D11UnorderedAccessView, psrcelementflags : ID3D11UnorderedAccessView, pdst : ID3D11UnorderedAccessView) : HRESULT
    @lpVtbl.value.seg_scan.call(this, elementtype, opcode, elementscansize, psrc, psrcelementflags, pdst)
  end
end
struct LibWin32::ID3DX11FFT
  def query_interface(this : ID3DX11FFT*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ID3DX11FFT*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ID3DX11FFT*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_forward_scale(this : ID3DX11FFT*, forwardscale : Float32) : HRESULT
    @lpVtbl.value.set_forward_scale.call(this, forwardscale)
  end
  def get_forward_scale(this : ID3DX11FFT*) : Float32
    @lpVtbl.value.get_forward_scale.call(this)
  end
  def set_inverse_scale(this : ID3DX11FFT*, inversescale : Float32) : HRESULT
    @lpVtbl.value.set_inverse_scale.call(this, inversescale)
  end
  def get_inverse_scale(this : ID3DX11FFT*) : Float32
    @lpVtbl.value.get_inverse_scale.call(this)
  end
  def attach_buffers_and_precompute(this : ID3DX11FFT*, numtempbuffers : UInt32, pptempbuffers : ID3D11UnorderedAccessView*, numprecomputebuffers : UInt32, ppprecomputebuffersizes : ID3D11UnorderedAccessView*) : HRESULT
    @lpVtbl.value.attach_buffers_and_precompute.call(this, numtempbuffers, pptempbuffers, numprecomputebuffers, ppprecomputebuffersizes)
  end
  def forward_transform(this : ID3DX11FFT*, pinputbuffer : ID3D11UnorderedAccessView, ppoutputbuffer : ID3D11UnorderedAccessView*) : HRESULT
    @lpVtbl.value.forward_transform.call(this, pinputbuffer, ppoutputbuffer)
  end
  def inverse_transform(this : ID3DX11FFT*, pinputbuffer : ID3D11UnorderedAccessView, ppoutputbuffer : ID3D11UnorderedAccessView*) : HRESULT
    @lpVtbl.value.inverse_transform.call(this, pinputbuffer, ppoutputbuffer)
  end
end
