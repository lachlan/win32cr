require "../../system/com.cr"
require "../../foundation.cr"
require "../../security/cryptography.cr"
require "../../security/authentication/identity.cr"

{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link("delayimp")]
{% end %}
@[Link("user32")]
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/IGNORE:4199")]
{% end %}
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/DELAYLOAD:certadm.dll")]
@[Link(ldflags: "/DELAYLOAD:certpoleng.dll")]
{% else %}
@[Link("certadm")]
@[Link("certpoleng")]
{% end %}
lib LibWin32
  CA_DISP_INCOMPLETE = 0_u32
  CA_DISP_ERROR = 1_u32
  CA_DISP_REVOKED = 2_u32
  CA_DISP_VALID = 3_u32
  CA_DISP_INVALID = 4_u32
  CA_DISP_UNDER_SUBMISSION = 5_u32
  KRA_DISP_EXPIRED = 0_u32
  KRA_DISP_NOTFOUND = 1_u32
  KRA_DISP_REVOKED = 2_u32
  KRA_DISP_VALID = 3_u32
  KRA_DISP_INVALID = 4_u32
  KRA_DISP_UNTRUSTED = 5_u32
  KRA_DISP_NOTLOADED = 6_u32
  CA_ACCESS_MASKROLES = 255_u32
  CA_CRL_BASE = 1_u32
  CA_CRL_DELTA = 2_u32
  CA_CRL_REPUBLISH = 16_u32
  ICF_ALLOWFOREIGN = 65536_u32
  ICF_EXISTINGROW = 131072_u32
  IKF_OVERWRITE = 65536_u32
  CSBACKUP_TYPE_MASK = 3_u32
  CSRESTORE_TYPE_FULL = 1_u32
  CSRESTORE_TYPE_ONLINE = 2_u32
  CSRESTORE_TYPE_CATCHUP = 4_u32
  CSRESTORE_TYPE_MASK = 5_u32
  CSBACKUP_DISABLE_INCREMENTAL = 4294967295_u32
  CSBFT_DIRECTORY = 128_u32
  CSBFT_DATABASE_DIRECTORY = 64_u32
  CSBFT_LOG_DIRECTORY = 32_u32
  CSCONTROL_SHUTDOWN = 1_u64
  CSCONTROL_SUSPEND = 2_u64
  CSCONTROL_RESTART = 3_u64
  CAIF_DSENTRY = 1_u32
  CAIF_SHAREDFOLDERENTRY = 2_u32
  CAIF_REGISTRY = 4_u32
  CAIF_LOCAL = 8_u32
  CAIF_REGISTRYPARENT = 16_u32
  CR_IN_ENCODEANY = 255_u32
  CR_IN_ENCODEMASK = 255_u32
  CR_IN_FORMATANY = 0_u32
  CR_IN_PKCS10 = 256_u32
  CR_IN_KEYGEN = 512_u32
  CR_IN_PKCS7 = 768_u32
  CR_IN_CMC = 1024_u32
  CR_IN_CHALLENGERESPONSE = 1280_u32
  CR_IN_SIGNEDCERTIFICATETIMESTAMPLIST = 1536_u32
  CR_IN_FORMATMASK = 65280_u32
  CR_IN_SCEP = 65536_u32
  CR_IN_RPC = 131072_u32
  CR_IN_HTTP = 196608_u32
  CR_IN_FULLRESPONSE = 262144_u32
  CR_IN_CRLS = 524288_u32
  CR_IN_MACHINE = 1048576_u32
  CR_IN_ROBO = 2097152_u32
  CR_IN_CLIENTIDNONE = 4194304_u32
  CR_IN_CONNECTONLY = 8388608_u32
  CR_IN_RETURNCHALLENGE = 16777216_u32
  CR_IN_SCEPPOST = 33554432_u32
  CR_IN_CERTIFICATETRANSPARENCY = 67108864_u32
  CC_UIPICKCONFIGSKIPLOCALCA = 5_u32
  CR_DISP_REVOKED = 6_u32
  CR_OUT_BASE64REQUESTHEADER = 3_u32
  CR_OUT_HEX = 4_u32
  CR_OUT_HEXASCII = 5_u32
  CR_OUT_BASE64X509CRLHEADER = 9_u32
  CR_OUT_HEXADDR = 10_u32
  CR_OUT_HEXASCIIADDR = 11_u32
  CR_OUT_HEXRAW = 12_u32
  CR_OUT_ENCODEMASK = 255_u32
  CR_OUT_CHAIN = 256_u32
  CR_OUT_CRLS = 512_u32
  CR_OUT_NOCRLF = 1073741824_u32
  CR_OUT_NOCR = 2147483648_u32
  CR_GEMT_DEFAULT = 0_u32
  CR_GEMT_HRESULT_STRING = 1_u32
  CR_GEMT_HTTP_ERROR = 2_u32
  CR_PROP_NONE = 0_u32
  CR_PROP_FILEVERSION = 1_u32
  CR_PROP_PRODUCTVERSION = 2_u32
  CR_PROP_EXITCOUNT = 3_u32
  CR_PROP_EXITDESCRIPTION = 4_u32
  CR_PROP_POLICYDESCRIPTION = 5_u32
  CR_PROP_CANAME = 6_u32
  CR_PROP_SANITIZEDCANAME = 7_u32
  CR_PROP_SHAREDFOLDER = 8_u32
  CR_PROP_PARENTCA = 9_u32
  CR_PROP_CATYPE = 10_u32
  CR_PROP_CASIGCERTCOUNT = 11_u32
  CR_PROP_CASIGCERT = 12_u32
  CR_PROP_CASIGCERTCHAIN = 13_u32
  CR_PROP_CAXCHGCERTCOUNT = 14_u32
  CR_PROP_CAXCHGCERT = 15_u32
  CR_PROP_CAXCHGCERTCHAIN = 16_u32
  CR_PROP_BASECRL = 17_u32
  CR_PROP_DELTACRL = 18_u32
  CR_PROP_CACERTSTATE = 19_u32
  CR_PROP_CRLSTATE = 20_u32
  CR_PROP_CAPROPIDMAX = 21_u32
  CR_PROP_DNSNAME = 22_u32
  CR_PROP_ROLESEPARATIONENABLED = 23_u32
  CR_PROP_KRACERTUSEDCOUNT = 24_u32
  CR_PROP_KRACERTCOUNT = 25_u32
  CR_PROP_KRACERT = 26_u32
  CR_PROP_KRACERTSTATE = 27_u32
  CR_PROP_ADVANCEDSERVER = 28_u32
  CR_PROP_TEMPLATES = 29_u32
  CR_PROP_BASECRLPUBLISHSTATUS = 30_u32
  CR_PROP_DELTACRLPUBLISHSTATUS = 31_u32
  CR_PROP_CASIGCERTCRLCHAIN = 32_u32
  CR_PROP_CAXCHGCERTCRLCHAIN = 33_u32
  CR_PROP_CACERTSTATUSCODE = 34_u32
  CR_PROP_CAFORWARDCROSSCERT = 35_u32
  CR_PROP_CABACKWARDCROSSCERT = 36_u32
  CR_PROP_CAFORWARDCROSSCERTSTATE = 37_u32
  CR_PROP_CABACKWARDCROSSCERTSTATE = 38_u32
  CR_PROP_CACERTVERSION = 39_u32
  CR_PROP_SANITIZEDCASHORTNAME = 40_u32
  CR_PROP_CERTCDPURLS = 41_u32
  CR_PROP_CERTAIAURLS = 42_u32
  CR_PROP_CERTAIAOCSPURLS = 43_u32
  CR_PROP_LOCALENAME = 44_u32
  CR_PROP_SUBJECTTEMPLATE_OIDS = 45_u32
  CR_PROP_SCEPSERVERCERTS = 1000_u32
  CR_PROP_SCEPSERVERCAPABILITIES = 1001_u32
  CR_PROP_SCEPSERVERCERTSCHAIN = 1002_u32
  CR_PROP_SCEPMIN = 1000_u32
  CR_PROP_SCEPMAX = 1002_u32
  FR_PROP_CLAIMCHALLENGE = 22_u32
  EAN_NAMEOBJECTID = 2147483648_u32
  EANR_SUPPRESS_IA5CONVERSION = 2147483648_u32
  CERTENROLL_INDEX_BASE = 0_u32
  EXITEVENT_INVALID = 0_u32
  EXITEVENT_STARTUP = 128_u32
  EXITEVENT_CERTIMPORTED = 512_u32
  ENUMEXT_OBJECTID = 1_u32
  CMM_REFRESHONLY = 1_u32
  CMM_READONLY = 2_u32
  DBSESSIONCOUNTDEFAULT = 100_u32
  DBFLAGS_READONLY = 1_u32
  DBFLAGS_CREATEIFNEEDED = 2_u32
  DBFLAGS_CIRCULARLOGGING = 4_u32
  DBFLAGS_LAZYFLUSH = 8_u32
  DBFLAGS_MAXCACHESIZEX100 = 16_u32
  DBFLAGS_CHECKPOINTDEPTH60MB = 32_u32
  DBFLAGS_LOGBUFFERSLARGE = 64_u32
  DBFLAGS_LOGBUFFERSHUGE = 128_u32
  DBFLAGS_LOGFILESIZE16MB = 256_u32
  DBFLAGS_MULTITHREADTRANSACTIONS = 512_u32
  DBFLAGS_DISABLESNAPSHOTBACKUP = 1024_u32
  DBFLAGS_ENABLEVOLATILEREQUESTS = 2048_u32
  LDAPF_SSLENABLE = 1_u32
  LDAPF_SIGNDISABLE = 2_u32
  CSVER_MAJOR_WIN2K = 1_u32
  CSVER_MINOR_WIN2K = 1_u32
  CSVER_MAJOR_WHISTLER = 2_u32
  CSVER_MINOR_WHISTLER_BETA2 = 1_u32
  CSVER_MINOR_WHISTLER_BETA3 = 2_u32
  CSVER_MAJOR_LONGHORN = 3_u32
  CSVER_MINOR_LONGHORN_BETA1 = 1_u32
  CSVER_MAJOR_WIN7 = 4_u32
  CSVER_MINOR_WIN7 = 1_u32
  CSVER_MAJOR_WIN8 = 5_u32
  CSVER_MINOR_WIN8 = 1_u32
  CSVER_MAJOR_WINBLUE = 6_u32
  CSVER_MINOR_WINBLUE = 1_u32
  CSVER_MAJOR_THRESHOLD = 7_u32
  CSVER_MINOR_THRESHOLD = 1_u32
  CSVER_MAJOR = 7_u32
  CSVER_MINOR = 1_u32
  CCLOCKSKEWMINUTESDEFAULT = 10_u32
  CVIEWAGEMINUTESDEFAULT = 16_u32
  SETUP_SERVER_FLAG = 1_u32
  SETUP_CLIENT_FLAG = 2_u32
  SETUP_SUSPEND_FLAG = 4_u32
  SETUP_REQUEST_FLAG = 8_u32
  SETUP_ONLINE_FLAG = 16_u32
  SETUP_DENIED_FLAG = 32_u32
  SETUP_CREATEDB_FLAG = 64_u32
  SETUP_ATTEMPT_VROOT_CREATE = 128_u32
  SETUP_FORCECRL_FLAG = 256_u32
  SETUP_UPDATE_CAOBJECT_SVRTYPE = 512_u32
  SETUP_SERVER_UPGRADED_FLAG = 1024_u32
  SETUP_W2K_SECURITY_NOT_UPGRADED_FLAG = 2048_u32
  SETUP_SECURITY_CHANGED = 4096_u32
  SETUP_DCOM_SECURITY_UPDATED_FLAG = 8192_u32
  SETUP_SERVER_IS_UP_TO_DATE_FLAG = 16384_u32
  CRLF_DELTA_USE_OLDEST_UNEXPIRED_BASE = 1_u32
  CRLF_DELETE_EXPIRED_CRLS = 2_u32
  CRLF_CRLNUMBER_CRITICAL = 4_u32
  CRLF_REVCHECK_IGNORE_OFFLINE = 8_u32
  CRLF_IGNORE_INVALID_POLICIES = 16_u32
  CRLF_REBUILD_MODIFIED_SUBJECT_ONLY = 32_u32
  CRLF_SAVE_FAILED_CERTS = 64_u32
  CRLF_IGNORE_UNKNOWN_CMC_ATTRIBUTES = 128_u32
  CRLF_IGNORE_CROSS_CERT_TRUST_ERROR = 256_u32
  CRLF_PUBLISH_EXPIRED_CERT_CRLS = 512_u32
  CRLF_ENFORCE_ENROLLMENT_AGENT = 1024_u32
  CRLF_DISABLE_RDN_REORDER = 2048_u32
  CRLF_DISABLE_ROOT_CROSS_CERTS = 4096_u32
  CRLF_LOG_FULL_RESPONSE = 8192_u32
  CRLF_USE_XCHG_CERT_TEMPLATE = 16384_u32
  CRLF_USE_CROSS_CERT_TEMPLATE = 32768_u32
  CRLF_ALLOW_REQUEST_ATTRIBUTE_SUBJECT = 65536_u32
  CRLF_REVCHECK_IGNORE_NOREVCHECK = 131072_u32
  CRLF_PRESERVE_EXPIRED_CA_CERTS = 262144_u32
  CRLF_PRESERVE_REVOKED_CA_CERTS = 524288_u32
  CRLF_DISABLE_CHAIN_VERIFICATION = 1048576_u32
  CRLF_BUILD_ROOTCA_CRLENTRIES_BASEDONKEY = 2097152_u32
  KRAF_ENABLEFOREIGN = 1_u32
  KRAF_SAVEBADREQUESTKEY = 2_u32
  KRAF_ENABLEARCHIVEALL = 4_u32
  KRAF_DISABLEUSEDEFAULTPROVIDER = 8_u32
  IF_LOCKICERTREQUEST = 1_u32
  IF_NOREMOTEICERTREQUEST = 2_u32
  IF_NOLOCALICERTREQUEST = 4_u32
  IF_NORPCICERTREQUEST = 8_u32
  IF_NOREMOTEICERTADMIN = 16_u32
  IF_NOLOCALICERTADMIN = 32_u32
  IF_NOREMOTEICERTADMINBACKUP = 64_u32
  IF_NOLOCALICERTADMINBACKUP = 128_u32
  IF_NOSNAPSHOTBACKUP = 256_u32
  IF_ENFORCEENCRYPTICERTREQUEST = 512_u32
  IF_ENFORCEENCRYPTICERTADMIN = 1024_u32
  IF_ENABLEEXITKEYRETRIEVAL = 2048_u32
  IF_ENABLEADMINASAUDITOR = 4096_u32
  PROCFLG_NONE = 0_u32
  PROCFLG_ENFORCEGOODKEYS = 1_u32
  CSURL_SERVERPUBLISH = 1_u32
  CSURL_ADDTOCERTCDP = 2_u32
  CSURL_ADDTOFRESHESTCRL = 4_u32
  CSURL_ADDTOCRLCDP = 8_u32
  CSURL_PUBLISHRETRY = 16_u32
  CSURL_ADDTOCERTOCSP = 32_u32
  CSURL_SERVERPUBLISHDELTA = 64_u32
  CSURL_ADDTOIDP = 128_u32
  CAPATHLENGTH_INFINITE = 4294967295_u32
  REQDISP_PENDING = 0_u32
  REQDISP_ISSUE = 1_u32
  REQDISP_DENY = 2_u32
  REQDISP_USEREQUESTATTRIBUTE = 3_u32
  REQDISP_MASK = 255_u32
  REQDISP_PENDINGFIRST = 256_u32
  REQDISP_DEFAULT_ENTERPRISE = 1_u32
  REVEXT_CDPLDAPURL_OLD = 1_u32
  REVEXT_CDPHTTPURL_OLD = 2_u32
  REVEXT_CDPFTPURL_OLD = 4_u32
  REVEXT_CDPFILEURL_OLD = 8_u32
  REVEXT_CDPURLMASK_OLD = 255_u32
  REVEXT_CDPENABLE = 256_u32
  REVEXT_ASPENABLE = 512_u32
  REVEXT_DEFAULT_NODS = 256_u32
  REVEXT_DEFAULT_DS = 256_u32
  ISSCERT_LDAPURL_OLD = 1_u32
  ISSCERT_HTTPURL_OLD = 2_u32
  ISSCERT_FTPURL_OLD = 4_u32
  ISSCERT_FILEURL_OLD = 8_u32
  ISSCERT_URLMASK_OLD = 255_u32
  ISSCERT_ENABLE = 256_u32
  ISSCERT_DEFAULT_NODS = 256_u32
  ISSCERT_DEFAULT_DS = 256_u32
  EDITF_ENABLEREQUESTEXTENSIONS = 1_u32
  EDITF_REQUESTEXTENSIONLIST = 2_u32
  EDITF_DISABLEEXTENSIONLIST = 4_u32
  EDITF_ADDOLDKEYUSAGE = 8_u32
  EDITF_ADDOLDCERTTYPE = 16_u32
  EDITF_ATTRIBUTEENDDATE = 32_u32
  EDITF_BASICCONSTRAINTSCRITICAL = 64_u32
  EDITF_BASICCONSTRAINTSCA = 128_u32
  EDITF_ENABLEAKIKEYID = 256_u32
  EDITF_ATTRIBUTECA = 512_u32
  EDITF_IGNOREREQUESTERGROUP = 1024_u32
  EDITF_ENABLEAKIISSUERNAME = 2048_u32
  EDITF_ENABLEAKIISSUERSERIAL = 4096_u32
  EDITF_ENABLEAKICRITICAL = 8192_u32
  EDITF_SERVERUPGRADED = 16384_u32
  EDITF_ATTRIBUTEEKU = 32768_u32
  EDITF_ENABLEDEFAULTSMIME = 65536_u32
  EDITF_EMAILOPTIONAL = 131072_u32
  EDITF_ATTRIBUTESUBJECTALTNAME2 = 262144_u32
  EDITF_ENABLELDAPREFERRALS = 524288_u32
  EDITF_ENABLECHASECLIENTDC = 1048576_u32
  EDITF_AUDITCERTTEMPLATELOAD = 2097152_u32
  EDITF_DISABLEOLDOSCNUPN = 4194304_u32
  EDITF_DISABLELDAPPACKAGELIST = 8388608_u32
  EDITF_ENABLEUPNMAP = 16777216_u32
  EDITF_ENABLEOCSPREVNOCHECK = 33554432_u32
  EDITF_ENABLERENEWONBEHALFOF = 67108864_u32
  EDITF_ENABLEKEYENCIPHERMENTCACERT = 134217728_u32
  EXITPUB_FILE = 1_u32
  EXITPUB_ACTIVEDIRECTORY = 2_u32
  EXITPUB_REMOVEOLDCERTS = 16_u32
  EXITPUB_DEFAULT_ENTERPRISE = 2_u32
  EXITPUB_DEFAULT_STANDALONE = 1_u32
  TP_MACHINEPOLICY = 1_u32
  KR_ENABLE_MACHINE = 1_u32
  KR_ENABLE_USER = 2_u32
  EXTENSION_CRITICAL_FLAG = 1_u32
  EXTENSION_DISABLE_FLAG = 2_u32
  EXTENSION_DELETE_FLAG = 4_u32
  EXTENSION_POLICY_MASK = 65535_u32
  EXTENSION_ORIGIN_REQUEST = 65536_u32
  EXTENSION_ORIGIN_POLICY = 131072_u32
  EXTENSION_ORIGIN_ADMIN = 196608_u32
  EXTENSION_ORIGIN_SERVER = 262144_u32
  EXTENSION_ORIGIN_RENEWALCERT = 327680_u32
  EXTENSION_ORIGIN_IMPORTEDCERT = 393216_u32
  EXTENSION_ORIGIN_PKCS7 = 458752_u32
  EXTENSION_ORIGIN_CMC = 524288_u32
  EXTENSION_ORIGIN_CACERT = 589824_u32
  EXTENSION_ORIGIN_MASK = 983040_u32
  CPF_BASE = 1_u32
  CPF_DELTA = 2_u32
  CPF_COMPLETE = 4_u32
  CPF_SHADOW = 8_u32
  CPF_CASTORE_ERROR = 16_u32
  CPF_BADURL_ERROR = 32_u32
  CPF_MANUAL = 64_u32
  CPF_SIGNATURE_ERROR = 128_u32
  CPF_LDAP_ERROR = 256_u32
  CPF_FILE_ERROR = 512_u32
  CPF_FTP_ERROR = 1024_u32
  CPF_HTTP_ERROR = 2048_u32
  CPF_POSTPONED_BASE_LDAP_ERROR = 4096_u32
  CPF_POSTPONED_BASE_FILE_ERROR = 8192_u32
  PROPTYPE_MASK = 255_u32
  PROPCALLER_SERVER = 256_u32
  PROPCALLER_POLICY = 512_u32
  PROPCALLER_EXIT = 768_u32
  PROPCALLER_ADMIN = 1024_u32
  PROPCALLER_REQUEST = 1280_u32
  PROPCALLER_MASK = 3840_u32
  PROPFLAGS_INDEXED = 65536_u32
  CR_FLG_FORCETELETEX = 1_u32
  CR_FLG_RENEWAL = 2_u32
  CR_FLG_FORCEUTF8 = 4_u32
  CR_FLG_CAXCHGCERT = 8_u32
  CR_FLG_ENROLLONBEHALFOF = 16_u32
  CR_FLG_SUBJECTUNMODIFIED = 32_u32
  CR_FLG_VALIDENCRYPTEDKEYHASH = 64_u32
  CR_FLG_CACROSSCERT = 128_u32
  CR_FLG_ENFORCEUTF8 = 256_u32
  CR_FLG_DEFINEDCACERT = 512_u32
  CR_FLG_CHALLENGEPENDING = 1024_u32
  CR_FLG_CHALLENGESATISFIED = 2048_u32
  CR_FLG_TRUSTONUSE = 4096_u32
  CR_FLG_TRUSTEKCERT = 8192_u32
  CR_FLG_TRUSTEKKEY = 16384_u32
  CR_FLG_PUBLISHERROR = 2147483648_u32
  DB_DISP_ACTIVE = 8_u32
  DB_DISP_PENDING = 9_u32
  DB_DISP_QUEUE_MAX = 9_u32
  DB_DISP_FOREIGN = 12_u32
  DB_DISP_CA_CERT = 15_u32
  DB_DISP_CA_CERT_CHAIN = 16_u32
  DB_DISP_KRA_CERT = 17_u32
  DB_DISP_LOG_MIN = 20_u32
  DB_DISP_ISSUED = 20_u32
  DB_DISP_REVOKED = 21_u32
  DB_DISP_LOG_FAILED_MIN = 30_u32
  DB_DISP_ERROR = 30_u32
  DB_DISP_DENIED = 31_u32
  VR_PENDING = 0_u32
  VR_INSTANT_OK = 1_u32
  VR_INSTANT_BAD = 2_u32
  CV_OUT_HEXRAW = 12_u32
  CV_OUT_ENCODEMASK = 255_u32
  CV_OUT_NOCRLF = 1073741824_u32
  CV_OUT_NOCR = 2147483648_u32
  CVR_SEEK_NONE = 0_u32
  CVR_SEEK_MASK = 255_u32
  CVR_SEEK_NODELTA = 4096_u32
  CVR_SORT_NONE = 0_u32
  CVR_SORT_ASCEND = 1_u32
  CVR_SORT_DESCEND = 2_u32
  CV_COLUMN_EXTENSION_DEFAULT = -4_i32
  CV_COLUMN_ATTRIBUTE_DEFAULT = -5_i32
  CV_COLUMN_CRL_DEFAULT = -6_i32
  CV_COLUMN_LOG_REVOKED_DEFAULT = -7_i32
  CVRC_TABLE_MASK = 61440_u32
  CVRC_TABLE_SHIFT = 12_u32
  CRYPT_ENUM_ALL_PROVIDERS = 1_u32
  XEPR_ENUM_FIRST = -1_i32
  XEPR_DATE = 5_u32
  XEPR_TEMPLATENAME = 6_u32
  XEPR_VERSION = 7_u32
  XEPR_V1TEMPLATENAME = 9_u32
  XEPR_V2TEMPLATEOID = 16_u32
  XEKL_KEYSIZE_DEFAULT = 4_u32
  XECP_STRING_PROPERTY = 1_u32
  XECI_DISABLE = 0_u32
  XECI_XENROLL = 1_u32
  XECI_AUTOENROLL = 2_u32
  XECI_REQWIZARD = 3_u32
  XECI_CERTREQ = 4_u32
  Wszcmm_prop_name = "Name"
  Wszcmm_prop_description = "Description"
  Wszcmm_prop_copyright = "Copyright"
  Wszcmm_prop_filever = "File Version"
  Wszcmm_prop_productver = "Product Version"
  Wszcmm_prop_display_hwnd = "HWND"
  Wszcmm_prop_ismultithreaded = "IsMultiThreaded"
  CLSID_CCertAdmin = LibC::GUID.new(0x37eabaf0_u32, 0x7fb6_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x17_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
  CLSID_CCertView = LibC::GUID.new(0xa12d0f7a_u32, 0x1e84_u16, 0x11d1_u16, StaticArray[0x9b_u8, 0xd6_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x83_u8, 0xfa_u8])
  CLSID_OCSPPropertyCollection = LibC::GUID.new(0xf935a528_u32, 0xba8a_u16, 0x4dd9_u16, StaticArray[0xba_u8, 0x79_u8, 0xf2_u8, 0x83_u8, 0x27_u8, 0x5c_u8, 0xb2_u8, 0xde_u8])
  CLSID_OCSPAdmin = LibC::GUID.new(0xd3f73511_u32, 0x92c9_u16, 0x47cb_u16, StaticArray[0x8f_u8, 0xf2_u8, 0x8d_u8, 0x89_u8, 0x1a_u8, 0x7c_u8, 0x4d_u8, 0xe4_u8])
  CLSID_CCertGetConfig = LibC::GUID.new(0xc6cc49b0_u32, 0xce17_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x33_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
  CLSID_CCertConfig = LibC::GUID.new(0x372fce38_u32, 0x4324_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x10_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
  CLSID_CCertRequest = LibC::GUID.new(0x98aff3f0_u32, 0x5524_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x12_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
  CLSID_CCertServerPolicy = LibC::GUID.new(0xaa000926_u32, 0xffbe_u16, 0x11cf_u16, StaticArray[0x88_u8, 0x0_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
  CLSID_CCertServerExit = LibC::GUID.new(0x4c4a5e40_u32, 0x732c_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x16_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
  CLSID_CCertEncodeStringArray = LibC::GUID.new(0x19a76fe0_u32, 0x7494_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x16_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
  CLSID_CCertEncodeLongArray = LibC::GUID.new(0x4e0680a0_u32, 0xa0a2_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x21_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
  CLSID_CCertEncodeDateArray = LibC::GUID.new(0x301f77b0_u32, 0xa470_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x21_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
  CLSID_CCertEncodeCRLDistInfo = LibC::GUID.new(0x1fa60a0_u32, 0xbbff_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x25_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
  CLSID_CCertEncodeAltName = LibC::GUID.new(0x1cfc4cda_u32, 0x1271_u16, 0x11d1_u16, StaticArray[0x9b_u8, 0xd4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x83_u8, 0xfa_u8])
  CLSID_CCertEncodeBitString = LibC::GUID.new(0x6d6b3cd8_u32, 0x1278_u16, 0x11d1_u16, StaticArray[0x9b_u8, 0xd4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x83_u8, 0xfa_u8])
  CLSID_CObjectId = LibC::GUID.new(0x884e2000_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CObjectIds = LibC::GUID.new(0x884e2001_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CBinaryConverter = LibC::GUID.new(0x884e2002_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX500DistinguishedName = LibC::GUID.new(0x884e2003_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CCspInformation = LibC::GUID.new(0x884e2007_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CCspInformations = LibC::GUID.new(0x884e2008_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CCspStatus = LibC::GUID.new(0x884e2009_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509PublicKey = LibC::GUID.new(0x884e200b_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509PrivateKey = LibC::GUID.new(0x884e200c_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509EndorsementKey = LibC::GUID.new(0x11a25a1d_u32, 0xb9a3_u16, 0x4edd_u16, StaticArray[0xaf_u8, 0x83_u8, 0x3b_u8, 0x59_u8, 0xad_u8, 0xbe_u8, 0xd3_u8, 0x61_u8])
  CLSID_CX509Extension = LibC::GUID.new(0x884e200d_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509Extensions = LibC::GUID.new(0x884e200e_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509ExtensionKeyUsage = LibC::GUID.new(0x884e200f_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509ExtensionEnhancedKeyUsage = LibC::GUID.new(0x884e2010_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509ExtensionTemplateName = LibC::GUID.new(0x884e2011_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509ExtensionTemplate = LibC::GUID.new(0x884e2012_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CAlternativeName = LibC::GUID.new(0x884e2013_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CAlternativeNames = LibC::GUID.new(0x884e2014_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509ExtensionAlternativeNames = LibC::GUID.new(0x884e2015_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509ExtensionBasicConstraints = LibC::GUID.new(0x884e2016_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509ExtensionSubjectKeyIdentifier = LibC::GUID.new(0x884e2017_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509ExtensionAuthorityKeyIdentifier = LibC::GUID.new(0x884e2018_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CSmimeCapability = LibC::GUID.new(0x884e2019_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CSmimeCapabilities = LibC::GUID.new(0x884e201a_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509ExtensionSmimeCapabilities = LibC::GUID.new(0x884e201b_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CPolicyQualifier = LibC::GUID.new(0x884e201c_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CPolicyQualifiers = LibC::GUID.new(0x884e201d_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CCertificatePolicy = LibC::GUID.new(0x884e201e_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CCertificatePolicies = LibC::GUID.new(0x884e201f_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509ExtensionCertificatePolicies = LibC::GUID.new(0x884e2020_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509ExtensionMSApplicationPolicies = LibC::GUID.new(0x884e2021_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509Attribute = LibC::GUID.new(0x884e2022_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509Attributes = LibC::GUID.new(0x884e2023_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509AttributeExtensions = LibC::GUID.new(0x884e2024_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509AttributeClientId = LibC::GUID.new(0x884e2025_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509AttributeRenewalCertificate = LibC::GUID.new(0x884e2026_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509AttributeArchiveKey = LibC::GUID.new(0x884e2027_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509AttributeArchiveKeyHash = LibC::GUID.new(0x884e2028_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509AttributeOSVersion = LibC::GUID.new(0x884e202a_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509AttributeCspProvider = LibC::GUID.new(0x884e202b_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CCryptAttribute = LibC::GUID.new(0x884e202c_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CCryptAttributes = LibC::GUID.new(0x884e202d_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CCertProperty = LibC::GUID.new(0x884e202e_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CCertProperties = LibC::GUID.new(0x884e202f_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CCertPropertyFriendlyName = LibC::GUID.new(0x884e2030_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CCertPropertyDescription = LibC::GUID.new(0x884e2031_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CCertPropertyAutoEnroll = LibC::GUID.new(0x884e2032_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CCertPropertyRequestOriginator = LibC::GUID.new(0x884e2033_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CCertPropertySHA1Hash = LibC::GUID.new(0x884e2034_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CCertPropertyKeyProvInfo = LibC::GUID.new(0x884e2036_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CCertPropertyArchived = LibC::GUID.new(0x884e2037_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CCertPropertyBackedUp = LibC::GUID.new(0x884e2038_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CCertPropertyEnrollment = LibC::GUID.new(0x884e2039_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CCertPropertyRenewal = LibC::GUID.new(0x884e203a_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CCertPropertyArchivedKeyHash = LibC::GUID.new(0x884e203b_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CCertPropertyEnrollmentPolicyServer = LibC::GUID.new(0x884e204c_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CSignerCertificate = LibC::GUID.new(0x884e203d_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509NameValuePair = LibC::GUID.new(0x884e203f_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CCertificateAttestationChallenge = LibC::GUID.new(0x1362ada1_u32, 0xeb60_u16, 0x456a_u16, StaticArray[0xb6_u8, 0xe1_u8, 0x11_u8, 0x80_u8, 0x50_u8, 0xdb_u8, 0x74_u8, 0x1b_u8])
  CLSID_CX509CertificateRequestPkcs10 = LibC::GUID.new(0x884e2042_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509CertificateRequestCertificate = LibC::GUID.new(0x884e2043_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509CertificateRequestPkcs7 = LibC::GUID.new(0x884e2044_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509CertificateRequestCmc = LibC::GUID.new(0x884e2045_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509Enrollment = LibC::GUID.new(0x884e2046_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509EnrollmentWebClassFactory = LibC::GUID.new(0x884e2049_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509EnrollmentHelper = LibC::GUID.new(0x884e2050_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509MachineEnrollmentFactory = LibC::GUID.new(0x884e2051_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509EnrollmentPolicyActiveDirectory = LibC::GUID.new(0x91f39027_u32, 0x217f_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509EnrollmentPolicyWebService = LibC::GUID.new(0x91f39028_u32, 0x217f_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509PolicyServerListManager = LibC::GUID.new(0x91f39029_u32, 0x217f_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509PolicyServerUrl = LibC::GUID.new(0x91f3902a_u32, 0x217f_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509CertificateTemplateADWritable = LibC::GUID.new(0x8336e323_u32, 0x2e6a_u16, 0x4a04_u16, StaticArray[0x93_u8, 0x7c_u8, 0x54_u8, 0x8f_u8, 0x68_u8, 0x18_u8, 0x39_u8, 0xb3_u8])
  CLSID_CX509CertificateRevocationListEntry = LibC::GUID.new(0x884e205e_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509CertificateRevocationListEntries = LibC::GUID.new(0x884e205f_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509CertificateRevocationList = LibC::GUID.new(0x884e2060_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509SCEPEnrollment = LibC::GUID.new(0x884e2061_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CX509SCEPEnrollmentHelper = LibC::GUID.new(0x884e2062_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  CLSID_CEnroll2 = LibC::GUID.new(0x127698e4_u32, 0xe730_u16, 0x4e5c_u16, StaticArray[0xa2_u8, 0xb1_u8, 0x21_u8, 0x49_u8, 0xa_u8, 0x70_u8, 0xc8_u8, 0xa1_u8])
  CLSID_CEnroll = LibC::GUID.new(0x43f8f289_u32, 0x7a20_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0x6_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0x95_u8, 0xe1_u8])

  alias FNCERTSRVISSERVERONLINEW = Proc(LibC::LPWSTR, LibC::BOOL*, HRESULT)
  alias FNCERTSRVBACKUPGETDYNAMICFILELISTW = Proc(Void*, UInt16**, UInt32*, HRESULT)
  alias FNCERTSRVBACKUPPREPAREW = Proc(LibC::LPWSTR, UInt32, UInt32, Void**, HRESULT)
  alias FNCERTSRVBACKUPGETDATABASENAMESW = Proc(Void*, UInt16**, UInt32*, HRESULT)
  alias FNCERTSRVBACKUPOPENFILEW = Proc(Void*, LibC::LPWSTR, UInt32, LARGE_INTEGER*, HRESULT)
  alias FNCERTSRVBACKUPREAD = Proc(Void*, Void*, UInt32, UInt32*, HRESULT)
  alias FNCERTSRVBACKUPCLOSE = Proc(Void*, HRESULT)
  alias FNCERTSRVBACKUPGETBACKUPLOGSW = Proc(Void*, UInt16**, UInt32*, HRESULT)
  alias FNCERTSRVBACKUPTRUNCATELOGS = Proc(Void*, HRESULT)
  alias FNCERTSRVBACKUPEND = Proc(Void*, HRESULT)
  alias FNCERTSRVBACKUPFREE = Proc(Void*, Void)
  alias FNCERTSRVRESTOREGETDATABASELOCATIONSW = Proc(Void*, UInt16**, UInt32*, HRESULT)
  alias FNCERTSRVRESTOREPREPAREW = Proc(LibC::LPWSTR, UInt32, Void**, HRESULT)
  alias FNCERTSRVRESTOREREGISTERW = Proc(Void*, LibC::LPWSTR, LibC::LPWSTR, CSEDB_RSTMAPW*, Int32, LibC::LPWSTR, UInt32, UInt32, HRESULT)
  alias FNCERTSRVRESTOREREGISTERCOMPLETE = Proc(Void*, HRESULT, HRESULT)
  alias FNCERTSRVRESTOREEND = Proc(Void*, HRESULT)
  alias FNCERTSRVSERVERCONTROLW = Proc(LibC::LPWSTR, UInt32, UInt32*, UInt8**, HRESULT)
  alias FNIMPORTPFXTOPROVIDER = Proc(LibC::HANDLE, UInt8*, UInt32, ImportPFXFlags, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, UInt32*, CERT_CONTEXT***, HRESULT)
  alias FNIMPORTPFXTOPROVIDERFREEDATA = Proc(UInt32, CERT_CONTEXT**, Void)


  enum CERT_VIEW_COLUMN_INDEX : Int32
    CV_COLUMN_LOG_DEFAULT = -2
    CV_COLUMN_LOG_FAILED_DEFAULT = -3
    CV_COLUMN_QUEUE_DEFAULT = -1
  end

  enum CERT_DELETE_ROW_FLAGS : UInt32
    CDR_EXPIRED = 1
    CDR_REQUEST_LAST_CHANGED = 2
  end

  enum FULL_RESPONSE_PROPERTY_ID : UInt32
    FR_PROP_NONE = 0
    FR_PROP_FULLRESPONSE = 1
    FR_PROP_STATUSINFOCOUNT = 2
    FR_PROP_BODYPARTSTRING = 3
    FR_PROP_STATUS = 4
    FR_PROP_STATUSSTRING = 5
    FR_PROP_OTHERINFOCHOICE = 6
    FR_PROP_FAILINFO = 7
    FR_PROP_PENDINFOTOKEN = 8
    FR_PROP_PENDINFOTIME = 9
    FR_PROP_ISSUEDCERTIFICATEHASH = 10
    FR_PROP_ISSUEDCERTIFICATE = 11
    FR_PROP_ISSUEDCERTIFICATECHAIN = 12
    FR_PROP_ISSUEDCERTIFICATECRLCHAIN = 13
    FR_PROP_ENCRYPTEDKEYHASH = 14
    FR_PROP_FULLRESPONSENOPKCS7 = 15
    FR_PROP_CAEXCHANGECERTIFICATEHASH = 16
    FR_PROP_CAEXCHANGECERTIFICATE = 17
    FR_PROP_CAEXCHANGECERTIFICATECHAIN = 18
    FR_PROP_CAEXCHANGECERTIFICATECRLCHAIN = 19
    FR_PROP_ATTESTATIONCHALLENGE = 20
    FR_PROP_ATTESTATIONPROVIDERNAME = 21
  end

  enum CVRC_COLUMN : UInt32
    CVRC_COLUMN_SCHEMA = 0
    CVRC_COLUMN_RESULT = 1
    CVRC_COLUMN_VALUE = 2
    CVRC_COLUMN_MASK = 4095
  end

  enum CERT_IMPORT_FLAGS : UInt32
    CR_IN_BASE64HEADER = 0
    CR_IN_BASE64 = 1
    CR_IN_BINARY = 2
  end

  enum CERT_GET_CONFIG_FLAGS : UInt32
    CC_DEFAULTCONFIG = 0
    CC_FIRSTCONFIG = 2
    CC_LOCALACTIVECONFIG = 4
    CC_LOCALCONFIG = 3
    CC_UIPICKCONFIG = 1
    CC_UIPICKCONFIGSKIPLOCALCA_ = 5
  end

  enum ENUM_CERT_COLUMN_VALUE_FLAGS : UInt32
    CV_OUT_BASE64 = 1
    CV_OUT_BASE64HEADER = 0
    CV_OUT_BASE64REQUESTHEADER = 3
    CV_OUT_BASE64X509CRLHEADER = 9
    CV_OUT_BINARY = 2
    CV_OUT_HEX = 4
    CV_OUT_HEXADDR = 10
    CV_OUT_HEXASCII = 5
    CV_OUT_HEXASCIIADDR = 11
  end

  enum PENDING_REQUEST_DESIRED_PROPERTY : UInt32
    XEPR_CADNS = 1
    XEPR_CAFRIENDLYNAME = 3
    XEPR_CANAME = 2
    XEPR_HASH = 8
    XEPR_REQUESTID = 4
  end

  enum CERTADMIN_GET_ROLES_FLAGS : UInt32
    CA_ACCESS_ADMIN = 1
    CA_ACCESS_AUDITOR = 4
    CA_ACCESS_ENROLL = 512
    CA_ACCESS_OFFICER = 2
    CA_ACCESS_OPERATOR = 8
    CA_ACCESS_READ = 256
  end

  enum CR_DISP : UInt32
    CR_DISP_DENIED = 2
    CR_DISP_ERROR = 1
    CR_DISP_INCOMPLETE = 0
    CR_DISP_ISSUED = 3
    CR_DISP_ISSUED_OUT_OF_BAND = 4
    CR_DISP_UNDER_SUBMISSION = 5
  end

  enum XEKL_KEYSIZE : UInt32
    XEKL_KEYSIZE_MIN = 1
    XEKL_KEYSIZE_MAX = 2
    XEKL_KEYSIZE_INC = 3
  end

  enum CERT_CREATE_REQUEST_FLAGS : UInt32
    XECR_CMC = 3
    XECR_PKCS10_V1_5 = 4
    XECR_PKCS10_V2_0 = 1
    XECR_PKCS7 = 2
  end

  enum CERT_EXIT_EVENT_MASK : UInt32
    EXITEVENT_CERTDENIED = 4
    EXITEVENT_CERTISSUED = 1
    EXITEVENT_CERTPENDING = 2
    EXITEVENT_CERTRETRIEVEPENDING = 16
    EXITEVENT_CERTREVOKED = 8
    EXITEVENT_CRLISSUED = 32
    EXITEVENT_SHUTDOWN = 64
  end

  enum ADDED_CERT_TYPE : UInt32
    XECT_EXTENSION_V1 = 1
    XECT_EXTENSION_V2 = 2
  end

  enum CVRC_TABLE : UInt32
    CVRC_TABLE_ATTRIBUTES = 16384
    CVRC_TABLE_CRL = 20480
    CVRC_TABLE_EXTENSIONS = 12288
    CVRC_TABLE_REQCERT = 0
  end

  enum CERT_PROPERTY_TYPE : UInt32
    PROPTYPE_BINARY = 3
    PROPTYPE_DATE = 2
    PROPTYPE_LONG = 1
    PROPTYPE_STRING = 4
  end

  enum CERT_ALT_NAME : UInt32
    CERT_ALT_NAME_RFC822_NAME = 2
    CERT_ALT_NAME_DNS_NAME = 3
    CERT_ALT_NAME_URL = 7
    CERT_ALT_NAME_REGISTERED_ID = 9
    CERT_ALT_NAME_DIRECTORY_NAME = 5
    CERT_ALT_NAME_IP_ADDRESS = 8
    CERT_ALT_NAME_OTHER_NAME = 1
  end

  enum CSBACKUP_TYPE : UInt32
    CSBACKUP_TYPE_FULL = 1
    CSBACKUP_TYPE_LOGS_ONLY = 2
  end

  enum XEKL_KEYSPEC : UInt32
    XEKL_KEYSPEC_KEYX = 1
    XEKL_KEYSPEC_SIG = 2
  end

  enum CERT_REQUEST_OUT_TYPE : UInt32
    CR_OUT_BASE64HEADER = 0
    CR_OUT_BASE64 = 1
    CR_OUT_BINARY = 2
  end

  enum CERT_VIEW_SEEK_OPERATOR_FLAGS : UInt32
    CVR_SEEK_EQ = 1
    CVR_SEEK_LE = 4
    CVR_SEEK_LT = 2
    CVR_SEEK_GE = 8
    CVR_SEEK_GT = 16
  end

  enum OCSPSigningFlag : Int32
    OCSP_SF_SILENT = 1
    OCSP_SF_USE_CACERT = 2
    OCSP_SF_ALLOW_SIGNINGCERT_AUTORENEWAL = 4
    OCSP_SF_FORCE_SIGNINGCERT_ISSUER_ISCA = 8
    OCSP_SF_AUTODISCOVER_SIGNINGCERT = 16
    OCSP_SF_MANUAL_ASSIGN_SIGNINGCERT = 32
    OCSP_SF_RESPONDER_ID_KEYHASH = 64
    OCSP_SF_RESPONDER_ID_NAME = 128
    OCSP_SF_ALLOW_NONCE_EXTENSION = 256
    OCSP_SF_ALLOW_SIGNINGCERT_AUTOENROLLMENT = 512
  end

  enum OCSPRequestFlag : Int32
    OCSP_RF_REJECT_SIGNED_REQUESTS = 1
  end

  enum X509EnrollmentAuthFlags : Int32
    X509AuthNone = 0
    X509AuthAnonymous = 1
    X509AuthKerberos = 2
    X509AuthUsername = 4
    X509AuthCertificate = 8
  end

  enum X509SCEPMessageType : Int32
    SCEPMessageUnknown = -1
    SCEPMessageCertResponse = 3
    SCEPMessagePKCSRequest = 19
    SCEPMessageGetCertInitial = 20
    SCEPMessageGetCert = 21
    SCEPMessageGetCRL = 22
    SCEPMessageClaimChallengeAnswer = 41
  end

  enum X509SCEPDisposition : Int32
    SCEPDispositionUnknown = -1
    SCEPDispositionSuccess = 0
    SCEPDispositionFailure = 2
    SCEPDispositionPending = 3
    SCEPDispositionPendingChallenge = 11
  end

  enum X509SCEPFailInfo : Int32
    SCEPFailUnknown = -1
    SCEPFailBadAlgorithm = 0
    SCEPFailBadMessageCheck = 1
    SCEPFailBadRequest = 2
    SCEPFailBadTime = 3
    SCEPFailBadCertId = 4
  end

  enum CERTENROLL_OBJECTID : Int32
    XCN_OID_NONE = 0
    XCN_OID_RSA = 1
    XCN_OID_PKCS = 2
    XCN_OID_RSA_HASH = 3
    XCN_OID_RSA_ENCRYPT = 4
    XCN_OID_PKCS_1 = 5
    XCN_OID_PKCS_2 = 6
    XCN_OID_PKCS_3 = 7
    XCN_OID_PKCS_4 = 8
    XCN_OID_PKCS_5 = 9
    XCN_OID_PKCS_6 = 10
    XCN_OID_PKCS_7 = 11
    XCN_OID_PKCS_8 = 12
    XCN_OID_PKCS_9 = 13
    XCN_OID_PKCS_10 = 14
    XCN_OID_PKCS_12 = 15
    XCN_OID_RSA_RSA = 16
    XCN_OID_RSA_MD2RSA = 17
    XCN_OID_RSA_MD4RSA = 18
    XCN_OID_RSA_MD5RSA = 19
    XCN_OID_RSA_SHA1RSA = 20
    XCN_OID_RSA_SETOAEP_RSA = 21
    XCN_OID_RSA_DH = 22
    XCN_OID_RSA_data = 23
    XCN_OID_RSA_signedData = 24
    XCN_OID_RSA_envelopedData = 25
    XCN_OID_RSA_signEnvData = 26
    XCN_OID_RSA_digestedData = 27
    XCN_OID_RSA_hashedData = 28
    XCN_OID_RSA_encryptedData = 29
    XCN_OID_RSA_emailAddr = 30
    XCN_OID_RSA_unstructName = 31
    XCN_OID_RSA_contentType = 32
    XCN_OID_RSA_messageDigest = 33
    XCN_OID_RSA_signingTime = 34
    XCN_OID_RSA_counterSign = 35
    XCN_OID_RSA_challengePwd = 36
    XCN_OID_RSA_unstructAddr = 37
    XCN_OID_RSA_extCertAttrs = 38
    XCN_OID_RSA_certExtensions = 39
    XCN_OID_RSA_SMIMECapabilities = 40
    XCN_OID_RSA_preferSignedData = 41
    XCN_OID_RSA_SMIMEalg = 42
    XCN_OID_RSA_SMIMEalgESDH = 43
    XCN_OID_RSA_SMIMEalgCMS3DESwrap = 44
    XCN_OID_RSA_SMIMEalgCMSRC2wrap = 45
    XCN_OID_RSA_MD2 = 46
    XCN_OID_RSA_MD4 = 47
    XCN_OID_RSA_MD5 = 48
    XCN_OID_RSA_RC2CBC = 49
    XCN_OID_RSA_RC4 = 50
    XCN_OID_RSA_DES_EDE3_CBC = 51
    XCN_OID_RSA_RC5_CBCPad = 52
    XCN_OID_ANSI_X942 = 53
    XCN_OID_ANSI_X942_DH = 54
    XCN_OID_X957 = 55
    XCN_OID_X957_DSA = 56
    XCN_OID_X957_SHA1DSA = 57
    XCN_OID_DS = 58
    XCN_OID_DSALG = 59
    XCN_OID_DSALG_CRPT = 60
    XCN_OID_DSALG_HASH = 61
    XCN_OID_DSALG_SIGN = 62
    XCN_OID_DSALG_RSA = 63
    XCN_OID_OIW = 64
    XCN_OID_OIWSEC = 65
    XCN_OID_OIWSEC_md4RSA = 66
    XCN_OID_OIWSEC_md5RSA = 67
    XCN_OID_OIWSEC_md4RSA2 = 68
    XCN_OID_OIWSEC_desECB = 69
    XCN_OID_OIWSEC_desCBC = 70
    XCN_OID_OIWSEC_desOFB = 71
    XCN_OID_OIWSEC_desCFB = 72
    XCN_OID_OIWSEC_desMAC = 73
    XCN_OID_OIWSEC_rsaSign = 74
    XCN_OID_OIWSEC_dsa = 75
    XCN_OID_OIWSEC_shaDSA = 76
    XCN_OID_OIWSEC_mdc2RSA = 77
    XCN_OID_OIWSEC_shaRSA = 78
    XCN_OID_OIWSEC_dhCommMod = 79
    XCN_OID_OIWSEC_desEDE = 80
    XCN_OID_OIWSEC_sha = 81
    XCN_OID_OIWSEC_mdc2 = 82
    XCN_OID_OIWSEC_dsaComm = 83
    XCN_OID_OIWSEC_dsaCommSHA = 84
    XCN_OID_OIWSEC_rsaXchg = 85
    XCN_OID_OIWSEC_keyHashSeal = 86
    XCN_OID_OIWSEC_md2RSASign = 87
    XCN_OID_OIWSEC_md5RSASign = 88
    XCN_OID_OIWSEC_sha1 = 89
    XCN_OID_OIWSEC_dsaSHA1 = 90
    XCN_OID_OIWSEC_dsaCommSHA1 = 91
    XCN_OID_OIWSEC_sha1RSASign = 92
    XCN_OID_OIWDIR = 93
    XCN_OID_OIWDIR_CRPT = 94
    XCN_OID_OIWDIR_HASH = 95
    XCN_OID_OIWDIR_SIGN = 96
    XCN_OID_OIWDIR_md2 = 97
    XCN_OID_OIWDIR_md2RSA = 98
    XCN_OID_INFOSEC = 99
    XCN_OID_INFOSEC_sdnsSignature = 100
    XCN_OID_INFOSEC_mosaicSignature = 101
    XCN_OID_INFOSEC_sdnsConfidentiality = 102
    XCN_OID_INFOSEC_mosaicConfidentiality = 103
    XCN_OID_INFOSEC_sdnsIntegrity = 104
    XCN_OID_INFOSEC_mosaicIntegrity = 105
    XCN_OID_INFOSEC_sdnsTokenProtection = 106
    XCN_OID_INFOSEC_mosaicTokenProtection = 107
    XCN_OID_INFOSEC_sdnsKeyManagement = 108
    XCN_OID_INFOSEC_mosaicKeyManagement = 109
    XCN_OID_INFOSEC_sdnsKMandSig = 110
    XCN_OID_INFOSEC_mosaicKMandSig = 111
    XCN_OID_INFOSEC_SuiteASignature = 112
    XCN_OID_INFOSEC_SuiteAConfidentiality = 113
    XCN_OID_INFOSEC_SuiteAIntegrity = 114
    XCN_OID_INFOSEC_SuiteATokenProtection = 115
    XCN_OID_INFOSEC_SuiteAKeyManagement = 116
    XCN_OID_INFOSEC_SuiteAKMandSig = 117
    XCN_OID_INFOSEC_mosaicUpdatedSig = 118
    XCN_OID_INFOSEC_mosaicKMandUpdSig = 119
    XCN_OID_INFOSEC_mosaicUpdatedInteg = 120
    XCN_OID_COMMON_NAME = 121
    XCN_OID_SUR_NAME = 122
    XCN_OID_DEVICE_SERIAL_NUMBER = 123
    XCN_OID_COUNTRY_NAME = 124
    XCN_OID_LOCALITY_NAME = 125
    XCN_OID_STATE_OR_PROVINCE_NAME = 126
    XCN_OID_STREET_ADDRESS = 127
    XCN_OID_ORGANIZATION_NAME = 128
    XCN_OID_ORGANIZATIONAL_UNIT_NAME = 129
    XCN_OID_TITLE = 130
    XCN_OID_DESCRIPTION = 131
    XCN_OID_SEARCH_GUIDE = 132
    XCN_OID_BUSINESS_CATEGORY = 133
    XCN_OID_POSTAL_ADDRESS = 134
    XCN_OID_POSTAL_CODE = 135
    XCN_OID_POST_OFFICE_BOX = 136
    XCN_OID_PHYSICAL_DELIVERY_OFFICE_NAME = 137
    XCN_OID_TELEPHONE_NUMBER = 138
    XCN_OID_TELEX_NUMBER = 139
    XCN_OID_TELETEXT_TERMINAL_IDENTIFIER = 140
    XCN_OID_FACSIMILE_TELEPHONE_NUMBER = 141
    XCN_OID_X21_ADDRESS = 142
    XCN_OID_INTERNATIONAL_ISDN_NUMBER = 143
    XCN_OID_REGISTERED_ADDRESS = 144
    XCN_OID_DESTINATION_INDICATOR = 145
    XCN_OID_PREFERRED_DELIVERY_METHOD = 146
    XCN_OID_PRESENTATION_ADDRESS = 147
    XCN_OID_SUPPORTED_APPLICATION_CONTEXT = 148
    XCN_OID_MEMBER = 149
    XCN_OID_OWNER = 150
    XCN_OID_ROLE_OCCUPANT = 151
    XCN_OID_SEE_ALSO = 152
    XCN_OID_USER_PASSWORD = 153
    XCN_OID_USER_CERTIFICATE = 154
    XCN_OID_CA_CERTIFICATE = 155
    XCN_OID_AUTHORITY_REVOCATION_LIST = 156
    XCN_OID_CERTIFICATE_REVOCATION_LIST = 157
    XCN_OID_CROSS_CERTIFICATE_PAIR = 158
    XCN_OID_GIVEN_NAME = 159
    XCN_OID_INITIALS = 160
    XCN_OID_DN_QUALIFIER = 161
    XCN_OID_DOMAIN_COMPONENT = 162
    XCN_OID_PKCS_12_FRIENDLY_NAME_ATTR = 163
    XCN_OID_PKCS_12_LOCAL_KEY_ID = 164
    XCN_OID_PKCS_12_KEY_PROVIDER_NAME_ATTR = 165
    XCN_OID_LOCAL_MACHINE_KEYSET = 166
    XCN_OID_PKCS_12_EXTENDED_ATTRIBUTES = 167
    XCN_OID_KEYID_RDN = 168
    XCN_OID_AUTHORITY_KEY_IDENTIFIER = 169
    XCN_OID_KEY_ATTRIBUTES = 170
    XCN_OID_CERT_POLICIES_95 = 171
    XCN_OID_KEY_USAGE_RESTRICTION = 172
    XCN_OID_SUBJECT_ALT_NAME = 173
    XCN_OID_ISSUER_ALT_NAME = 174
    XCN_OID_BASIC_CONSTRAINTS = 175
    XCN_OID_KEY_USAGE = 176
    XCN_OID_PRIVATEKEY_USAGE_PERIOD = 177
    XCN_OID_BASIC_CONSTRAINTS2 = 178
    XCN_OID_CERT_POLICIES = 179
    XCN_OID_ANY_CERT_POLICY = 180
    XCN_OID_AUTHORITY_KEY_IDENTIFIER2 = 181
    XCN_OID_SUBJECT_KEY_IDENTIFIER = 182
    XCN_OID_SUBJECT_ALT_NAME2 = 183
    XCN_OID_ISSUER_ALT_NAME2 = 184
    XCN_OID_CRL_REASON_CODE = 185
    XCN_OID_REASON_CODE_HOLD = 186
    XCN_OID_CRL_DIST_POINTS = 187
    XCN_OID_ENHANCED_KEY_USAGE = 188
    XCN_OID_CRL_NUMBER = 189
    XCN_OID_DELTA_CRL_INDICATOR = 190
    XCN_OID_ISSUING_DIST_POINT = 191
    XCN_OID_FRESHEST_CRL = 192
    XCN_OID_NAME_CONSTRAINTS = 193
    XCN_OID_POLICY_MAPPINGS = 194
    XCN_OID_LEGACY_POLICY_MAPPINGS = 195
    XCN_OID_POLICY_CONSTRAINTS = 196
    XCN_OID_RENEWAL_CERTIFICATE = 197
    XCN_OID_ENROLLMENT_NAME_VALUE_PAIR = 198
    XCN_OID_ENROLLMENT_CSP_PROVIDER = 199
    XCN_OID_OS_VERSION = 200
    XCN_OID_ENROLLMENT_AGENT = 201
    XCN_OID_PKIX = 202
    XCN_OID_PKIX_PE = 203
    XCN_OID_AUTHORITY_INFO_ACCESS = 204
    XCN_OID_BIOMETRIC_EXT = 205
    XCN_OID_LOGOTYPE_EXT = 206
    XCN_OID_CERT_EXTENSIONS = 207
    XCN_OID_NEXT_UPDATE_LOCATION = 208
    XCN_OID_REMOVE_CERTIFICATE = 209
    XCN_OID_CROSS_CERT_DIST_POINTS = 210
    XCN_OID_CTL = 211
    XCN_OID_SORTED_CTL = 212
    XCN_OID_SERIALIZED = 213
    XCN_OID_NT_PRINCIPAL_NAME = 214
    XCN_OID_PRODUCT_UPDATE = 215
    XCN_OID_ANY_APPLICATION_POLICY = 216
    XCN_OID_AUTO_ENROLL_CTL_USAGE = 217
    XCN_OID_ENROLL_CERTTYPE_EXTENSION = 218
    XCN_OID_CERT_MANIFOLD = 219
    XCN_OID_CERTSRV_CA_VERSION = 220
    XCN_OID_CERTSRV_PREVIOUS_CERT_HASH = 221
    XCN_OID_CRL_VIRTUAL_BASE = 222
    XCN_OID_CRL_NEXT_PUBLISH = 223
    XCN_OID_KP_CA_EXCHANGE = 224
    XCN_OID_KP_KEY_RECOVERY_AGENT = 225
    XCN_OID_CERTIFICATE_TEMPLATE = 226
    XCN_OID_ENTERPRISE_OID_ROOT = 227
    XCN_OID_RDN_DUMMY_SIGNER = 228
    XCN_OID_APPLICATION_CERT_POLICIES = 229
    XCN_OID_APPLICATION_POLICY_MAPPINGS = 230
    XCN_OID_APPLICATION_POLICY_CONSTRAINTS = 231
    XCN_OID_ARCHIVED_KEY_ATTR = 232
    XCN_OID_CRL_SELF_CDP = 233
    XCN_OID_REQUIRE_CERT_CHAIN_POLICY = 234
    XCN_OID_ARCHIVED_KEY_CERT_HASH = 235
    XCN_OID_ISSUED_CERT_HASH = 236
    XCN_OID_DS_EMAIL_REPLICATION = 237
    XCN_OID_REQUEST_CLIENT_INFO = 238
    XCN_OID_ENCRYPTED_KEY_HASH = 239
    XCN_OID_CERTSRV_CROSSCA_VERSION = 240
    XCN_OID_NTDS_REPLICATION = 241
    XCN_OID_SUBJECT_DIR_ATTRS = 242
    XCN_OID_PKIX_KP = 243
    XCN_OID_PKIX_KP_SERVER_AUTH = 244
    XCN_OID_PKIX_KP_CLIENT_AUTH = 245
    XCN_OID_PKIX_KP_CODE_SIGNING = 246
    XCN_OID_PKIX_KP_EMAIL_PROTECTION = 247
    XCN_OID_PKIX_KP_IPSEC_END_SYSTEM = 248
    XCN_OID_PKIX_KP_IPSEC_TUNNEL = 249
    XCN_OID_PKIX_KP_IPSEC_USER = 250
    XCN_OID_PKIX_KP_TIMESTAMP_SIGNING = 251
    XCN_OID_PKIX_KP_OCSP_SIGNING = 252
    XCN_OID_PKIX_OCSP_NOCHECK = 253
    XCN_OID_IPSEC_KP_IKE_INTERMEDIATE = 254
    XCN_OID_KP_CTL_USAGE_SIGNING = 255
    XCN_OID_KP_TIME_STAMP_SIGNING = 256
    XCN_OID_SERVER_GATED_CRYPTO = 257
    XCN_OID_SGC_NETSCAPE = 258
    XCN_OID_KP_EFS = 259
    XCN_OID_EFS_RECOVERY = 260
    XCN_OID_WHQL_CRYPTO = 261
    XCN_OID_NT5_CRYPTO = 262
    XCN_OID_OEM_WHQL_CRYPTO = 263
    XCN_OID_EMBEDDED_NT_CRYPTO = 264
    XCN_OID_ROOT_LIST_SIGNER = 265
    XCN_OID_KP_QUALIFIED_SUBORDINATION = 266
    XCN_OID_KP_KEY_RECOVERY = 267
    XCN_OID_KP_DOCUMENT_SIGNING = 268
    XCN_OID_KP_LIFETIME_SIGNING = 269
    XCN_OID_KP_MOBILE_DEVICE_SOFTWARE = 270
    XCN_OID_KP_SMART_DISPLAY = 271
    XCN_OID_KP_CSP_SIGNATURE = 272
    XCN_OID_DRM = 273
    XCN_OID_DRM_INDIVIDUALIZATION = 274
    XCN_OID_LICENSES = 275
    XCN_OID_LICENSE_SERVER = 276
    XCN_OID_KP_SMARTCARD_LOGON = 277
    XCN_OID_YESNO_TRUST_ATTR = 278
    XCN_OID_PKIX_POLICY_QUALIFIER_CPS = 279
    XCN_OID_PKIX_POLICY_QUALIFIER_USERNOTICE = 280
    XCN_OID_CERT_POLICIES_95_QUALIFIER1 = 281
    XCN_OID_PKIX_ACC_DESCR = 282
    XCN_OID_PKIX_OCSP = 283
    XCN_OID_PKIX_CA_ISSUERS = 284
    XCN_OID_VERISIGN_PRIVATE_6_9 = 285
    XCN_OID_VERISIGN_ONSITE_JURISDICTION_HASH = 286
    XCN_OID_VERISIGN_BITSTRING_6_13 = 287
    XCN_OID_VERISIGN_ISS_STRONG_CRYPTO = 288
    XCN_OID_NETSCAPE = 289
    XCN_OID_NETSCAPE_CERT_EXTENSION = 290
    XCN_OID_NETSCAPE_CERT_TYPE = 291
    XCN_OID_NETSCAPE_BASE_URL = 292
    XCN_OID_NETSCAPE_REVOCATION_URL = 293
    XCN_OID_NETSCAPE_CA_REVOCATION_URL = 294
    XCN_OID_NETSCAPE_CERT_RENEWAL_URL = 295
    XCN_OID_NETSCAPE_CA_POLICY_URL = 296
    XCN_OID_NETSCAPE_SSL_SERVER_NAME = 297
    XCN_OID_NETSCAPE_COMMENT = 298
    XCN_OID_NETSCAPE_DATA_TYPE = 299
    XCN_OID_NETSCAPE_CERT_SEQUENCE = 300
    XCN_OID_CT_PKI_DATA = 301
    XCN_OID_CT_PKI_RESPONSE = 302
    XCN_OID_PKIX_NO_SIGNATURE = 303
    XCN_OID_CMC = 304
    XCN_OID_CMC_STATUS_INFO = 305
    XCN_OID_CMC_IDENTIFICATION = 306
    XCN_OID_CMC_IDENTITY_PROOF = 307
    XCN_OID_CMC_DATA_RETURN = 308
    XCN_OID_CMC_TRANSACTION_ID = 309
    XCN_OID_CMC_SENDER_NONCE = 310
    XCN_OID_CMC_RECIPIENT_NONCE = 311
    XCN_OID_CMC_ADD_EXTENSIONS = 312
    XCN_OID_CMC_ENCRYPTED_POP = 313
    XCN_OID_CMC_DECRYPTED_POP = 314
    XCN_OID_CMC_LRA_POP_WITNESS = 315
    XCN_OID_CMC_GET_CERT = 316
    XCN_OID_CMC_GET_CRL = 317
    XCN_OID_CMC_REVOKE_REQUEST = 318
    XCN_OID_CMC_REG_INFO = 319
    XCN_OID_CMC_RESPONSE_INFO = 320
    XCN_OID_CMC_QUERY_PENDING = 321
    XCN_OID_CMC_ID_POP_LINK_RANDOM = 322
    XCN_OID_CMC_ID_POP_LINK_WITNESS = 323
    XCN_OID_CMC_ID_CONFIRM_CERT_ACCEPTANCE = 324
    XCN_OID_CMC_ADD_ATTRIBUTES = 325
    XCN_OID_LOYALTY_OTHER_LOGOTYPE = 326
    XCN_OID_BACKGROUND_OTHER_LOGOTYPE = 327
    XCN_OID_PKIX_OCSP_BASIC_SIGNED_RESPONSE = 328
    XCN_OID_PKCS_7_DATA = 329
    XCN_OID_PKCS_7_SIGNED = 330
    XCN_OID_PKCS_7_ENVELOPED = 331
    XCN_OID_PKCS_7_SIGNEDANDENVELOPED = 332
    XCN_OID_PKCS_7_DIGESTED = 333
    XCN_OID_PKCS_7_ENCRYPTED = 334
    XCN_OID_PKCS_9_CONTENT_TYPE = 335
    XCN_OID_PKCS_9_MESSAGE_DIGEST = 336
    XCN_OID_CERT_PROP_ID_PREFIX = 337
    XCN_OID_CERT_KEY_IDENTIFIER_PROP_ID = 338
    XCN_OID_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = 339
    XCN_OID_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = 340
    XCN_OID_CERT_MD5_HASH_PROP_ID = 341
    XCN_OID_RSA_SHA256RSA = 342
    XCN_OID_RSA_SHA384RSA = 343
    XCN_OID_RSA_SHA512RSA = 344
    XCN_OID_NIST_sha256 = 345
    XCN_OID_NIST_sha384 = 346
    XCN_OID_NIST_sha512 = 347
    XCN_OID_RSA_MGF1 = 348
    XCN_OID_ECC_PUBLIC_KEY = 349
    XCN_OID_ECDSA_SHA1 = 350
    XCN_OID_ECDSA_SPECIFIED = 351
    XCN_OID_ANY_ENHANCED_KEY_USAGE = 352
    XCN_OID_RSA_SSA_PSS = 353
    XCN_OID_ATTR_SUPPORTED_ALGORITHMS = 355
    XCN_OID_ATTR_TPM_SECURITY_ASSERTIONS = 356
    XCN_OID_ATTR_TPM_SPECIFICATION = 357
    XCN_OID_CERT_DISALLOWED_FILETIME_PROP_ID = 358
    XCN_OID_CERT_SIGNATURE_HASH_PROP_ID = 359
    XCN_OID_CERT_STRONG_KEY_OS_1 = 360
    XCN_OID_CERT_STRONG_KEY_OS_CURRENT = 361
    XCN_OID_CERT_STRONG_KEY_OS_PREFIX = 362
    XCN_OID_CERT_STRONG_SIGN_OS_1 = 363
    XCN_OID_CERT_STRONG_SIGN_OS_CURRENT = 364
    XCN_OID_CERT_STRONG_SIGN_OS_PREFIX = 365
    XCN_OID_DH_SINGLE_PASS_STDDH_SHA1_KDF = 366
    XCN_OID_DH_SINGLE_PASS_STDDH_SHA256_KDF = 367
    XCN_OID_DH_SINGLE_PASS_STDDH_SHA384_KDF = 368
    XCN_OID_DISALLOWED_HASH = 369
    XCN_OID_DISALLOWED_LIST = 370
    XCN_OID_ECC_CURVE_P256 = 371
    XCN_OID_ECC_CURVE_P384 = 372
    XCN_OID_ECC_CURVE_P521 = 373
    XCN_OID_ECDSA_SHA256 = 374
    XCN_OID_ECDSA_SHA384 = 375
    XCN_OID_ECDSA_SHA512 = 376
    XCN_OID_ENROLL_CAXCHGCERT_HASH = 377
    XCN_OID_ENROLL_EK_INFO = 378
    XCN_OID_ENROLL_EKPUB_CHALLENGE = 379
    XCN_OID_ENROLL_EKVERIFYCERT = 380
    XCN_OID_ENROLL_EKVERIFYCREDS = 381
    XCN_OID_ENROLL_EKVERIFYKEY = 382
    XCN_OID_EV_RDN_COUNTRY = 383
    XCN_OID_EV_RDN_LOCALE = 384
    XCN_OID_EV_RDN_STATE_OR_PROVINCE = 385
    XCN_OID_INHIBIT_ANY_POLICY = 386
    XCN_OID_INTERNATIONALIZED_EMAIL_ADDRESS = 387
    XCN_OID_KP_KERNEL_MODE_CODE_SIGNING = 388
    XCN_OID_KP_KERNEL_MODE_HAL_EXTENSION_SIGNING = 389
    XCN_OID_KP_KERNEL_MODE_TRUSTED_BOOT_SIGNING = 390
    XCN_OID_KP_TPM_AIK_CERTIFICATE = 391
    XCN_OID_KP_TPM_EK_CERTIFICATE = 392
    XCN_OID_KP_TPM_PLATFORM_CERTIFICATE = 393
    XCN_OID_NIST_AES128_CBC = 394
    XCN_OID_NIST_AES128_WRAP = 395
    XCN_OID_NIST_AES192_CBC = 396
    XCN_OID_NIST_AES192_WRAP = 397
    XCN_OID_NIST_AES256_CBC = 398
    XCN_OID_NIST_AES256_WRAP = 399
    XCN_OID_PKCS_12_PbeIds = 400
    XCN_OID_PKCS_12_pbeWithSHA1And128BitRC2 = 401
    XCN_OID_PKCS_12_pbeWithSHA1And128BitRC4 = 402
    XCN_OID_PKCS_12_pbeWithSHA1And2KeyTripleDES = 403
    XCN_OID_PKCS_12_pbeWithSHA1And3KeyTripleDES = 404
    XCN_OID_PKCS_12_pbeWithSHA1And40BitRC2 = 405
    XCN_OID_PKCS_12_pbeWithSHA1And40BitRC4 = 406
    XCN_OID_PKCS_12_PROTECTED_PASSWORD_SECRET_BAG_TYPE_ID = 407
    XCN_OID_PKINIT_KP_KDC = 408
    XCN_OID_PKIX_CA_REPOSITORY = 409
    XCN_OID_PKIX_OCSP_NONCE = 410
    XCN_OID_PKIX_TIME_STAMPING = 411
    XCN_OID_QC_EU_COMPLIANCE = 412
    XCN_OID_QC_SSCD = 413
    XCN_OID_QC_STATEMENTS_EXT = 414
    XCN_OID_RDN_TPM_MANUFACTURER = 415
    XCN_OID_RDN_TPM_MODEL = 416
    XCN_OID_RDN_TPM_VERSION = 417
    XCN_OID_REVOKED_LIST_SIGNER = 418
    XCN_OID_RFC3161_counterSign = 419
    XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION = 420
    XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION = 421
    XCN_OID_ROOT_PROGRAM_FLAGS = 422
    XCN_OID_ROOT_PROGRAM_NO_OCSP_FAILOVER_TO_CRL = 423
    XCN_OID_RSA_PSPECIFIED = 424
    XCN_OID_RSAES_OAEP = 425
    XCN_OID_SUBJECT_INFO_ACCESS = 426
    XCN_OID_TIMESTAMP_TOKEN = 427
    XCN_OID_ENROLL_SCEP_ERROR = 428
    XCN_OIDVerisign_MessageType = 429
    XCN_OIDVerisign_PkiStatus = 430
    XCN_OIDVerisign_FailInfo = 431
    XCN_OIDVerisign_SenderNonce = 432
    XCN_OIDVerisign_RecipientNonce = 433
    XCN_OIDVerisign_TransactionID = 434
    XCN_OID_ENROLL_ATTESTATION_CHALLENGE = 435
    XCN_OID_ENROLL_ATTESTATION_STATEMENT = 436
    XCN_OID_ENROLL_ENCRYPTION_ALGORITHM = 437
    XCN_OID_ENROLL_KSP_NAME = 438
  end

  enum WebSecurityLevel : Int32
    LevelUnsafe = 0
    LevelSafe = 1
  end

  enum EncodingType : Int32
    XCN_CRYPT_STRING_BASE64HEADER = 0
    XCN_CRYPT_STRING_BASE64 = 1
    XCN_CRYPT_STRING_BINARY = 2
    XCN_CRYPT_STRING_BASE64REQUESTHEADER = 3
    XCN_CRYPT_STRING_HEX = 4
    XCN_CRYPT_STRING_HEXASCII = 5
    XCN_CRYPT_STRING_BASE64_ANY = 6
    XCN_CRYPT_STRING_ANY = 7
    XCN_CRYPT_STRING_HEX_ANY = 8
    XCN_CRYPT_STRING_BASE64X509CRLHEADER = 9
    XCN_CRYPT_STRING_HEXADDR = 10
    XCN_CRYPT_STRING_HEXASCIIADDR = 11
    XCN_CRYPT_STRING_HEXRAW = 12
    XCN_CRYPT_STRING_BASE64URI = 13
    XCN_CRYPT_STRING_ENCODEMASK = 255
    XCN_CRYPT_STRING_CHAIN = 256
    XCN_CRYPT_STRING_TEXT = 512
    XCN_CRYPT_STRING_PERCENTESCAPE = 134217728
    XCN_CRYPT_STRING_HASHDATA = 268435456
    XCN_CRYPT_STRING_STRICT = 536870912
    XCN_CRYPT_STRING_NOCRLF = 1073741824
    XCN_CRYPT_STRING_NOCR = -2147483648
  end

  enum PFXExportOptions : Int32
    PFXExportEEOnly = 0
    PFXExportChainNoRoot = 1
    PFXExportChainWithRoot = 2
  end

  enum ObjectIdGroupId : Int32
    XCN_CRYPT_ANY_GROUP_ID = 0
    XCN_CRYPT_HASH_ALG_OID_GROUP_ID = 1
    XCN_CRYPT_ENCRYPT_ALG_OID_GROUP_ID = 2
    XCN_CRYPT_PUBKEY_ALG_OID_GROUP_ID = 3
    XCN_CRYPT_SIGN_ALG_OID_GROUP_ID = 4
    XCN_CRYPT_RDN_ATTR_OID_GROUP_ID = 5
    XCN_CRYPT_EXT_OR_ATTR_OID_GROUP_ID = 6
    XCN_CRYPT_ENHKEY_USAGE_OID_GROUP_ID = 7
    XCN_CRYPT_POLICY_OID_GROUP_ID = 8
    XCN_CRYPT_TEMPLATE_OID_GROUP_ID = 9
    XCN_CRYPT_KDF_OID_GROUP_ID = 10
    XCN_CRYPT_LAST_OID_GROUP_ID = 10
    XCN_CRYPT_FIRST_ALG_OID_GROUP_ID = 1
    XCN_CRYPT_LAST_ALG_OID_GROUP_ID = 4
    XCN_CRYPT_GROUP_ID_MASK = 65535
    XCN_CRYPT_OID_PREFER_CNG_ALGID_FLAG = 1073741824
    XCN_CRYPT_OID_DISABLE_SEARCH_DS_FLAG = -2147483648
    XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_MASK = 268369920
    XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT = 16
    XCN_CRYPT_KEY_LENGTH_MASK = 268369920
  end

  enum ObjectIdPublicKeyFlags : Int32
    XCN_CRYPT_OID_INFO_PUBKEY_ANY = 0
    XCN_CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG = -2147483648
    XCN_CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG = 1073741824
  end

  enum AlgorithmFlags : Int32
    AlgorithmFlagsNone = 0
    AlgorithmFlagsWrap = 1
  end

  enum X500NameFlags : Int32
    XCN_CERT_NAME_STR_NONE = 0
    XCN_CERT_SIMPLE_NAME_STR = 1
    XCN_CERT_OID_NAME_STR = 2
    XCN_CERT_X500_NAME_STR = 3
    XCN_CERT_XML_NAME_STR = 4
    XCN_CERT_NAME_STR_SEMICOLON_FLAG = 1073741824
    XCN_CERT_NAME_STR_NO_PLUS_FLAG = 536870912
    XCN_CERT_NAME_STR_NO_QUOTING_FLAG = 268435456
    XCN_CERT_NAME_STR_CRLF_FLAG = 134217728
    XCN_CERT_NAME_STR_COMMA_FLAG = 67108864
    XCN_CERT_NAME_STR_REVERSE_FLAG = 33554432
    XCN_CERT_NAME_STR_FORWARD_FLAG = 16777216
    XCN_CERT_NAME_STR_AMBIGUOUS_SEPARATOR_FLAGS = 1275068416
    XCN_CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG = 65536
    XCN_CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG = 131072
    XCN_CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG = 262144
    XCN_CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG = 524288
    XCN_CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG = 1048576
    XCN_CERT_NAME_STR_ENABLE_PUNYCODE_FLAG = 2097152
    XCN_CERT_NAME_STR_DS_ESCAPED = 8388608
  end

  enum X509CertificateEnrollmentContext : Int32
    ContextNone = 0
    ContextUser = 1
    ContextMachine = 2
    ContextAdministratorForceMachine = 3
  end

  enum EnrollmentEnrollStatus : Int32
    Enrolled = 1
    EnrollPended = 2
    EnrollUIDeferredEnrollmentRequired = 4
    EnrollError = 16
    EnrollUnknown = 32
    EnrollSkipped = 64
    EnrollDenied = 256
  end

  enum EnrollmentSelectionStatus : Int32
    SelectedNo = 0
    SelectedYes = 1
  end

  enum EnrollmentDisplayStatus : Int32
    DisplayNo = 0
    DisplayYes = 1
  end

  enum X509ProviderType : Int32
    XCN_PROV_NONE = 0
    XCN_PROV_RSA_FULL = 1
    XCN_PROV_RSA_SIG = 2
    XCN_PROV_DSS = 3
    XCN_PROV_FORTEZZA = 4
    XCN_PROV_MS_EXCHANGE = 5
    XCN_PROV_SSL = 6
    XCN_PROV_RSA_SCHANNEL = 12
    XCN_PROV_DSS_DH = 13
    XCN_PROV_EC_ECDSA_SIG = 14
    XCN_PROV_EC_ECNRA_SIG = 15
    XCN_PROV_EC_ECDSA_FULL = 16
    XCN_PROV_EC_ECNRA_FULL = 17
    XCN_PROV_DH_SCHANNEL = 18
    XCN_PROV_SPYRUS_LYNKS = 20
    XCN_PROV_RNG = 21
    XCN_PROV_INTEL_SEC = 22
    XCN_PROV_REPLACE_OWF = 23
    XCN_PROV_RSA_AES = 24
  end

  enum AlgorithmType : Int32
    XCN_BCRYPT_UNKNOWN_INTERFACE = 0
    XCN_BCRYPT_CIPHER_INTERFACE = 1
    XCN_BCRYPT_HASH_INTERFACE = 2
    XCN_BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = 3
    XCN_BCRYPT_SIGNATURE_INTERFACE = 5
    XCN_BCRYPT_SECRET_AGREEMENT_INTERFACE = 4
    XCN_BCRYPT_RNG_INTERFACE = 6
    XCN_BCRYPT_KEY_DERIVATION_INTERFACE = 7
  end

  enum AlgorithmOperationFlags : Int32
    XCN_NCRYPT_NO_OPERATION = 0
    XCN_NCRYPT_CIPHER_OPERATION = 1
    XCN_NCRYPT_HASH_OPERATION = 2
    XCN_NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = 4
    XCN_NCRYPT_SECRET_AGREEMENT_OPERATION = 8
    XCN_NCRYPT_SIGNATURE_OPERATION = 16
    XCN_NCRYPT_RNG_OPERATION = 32
    XCN_NCRYPT_KEY_DERIVATION_OPERATION = 64
    XCN_NCRYPT_ANY_ASYMMETRIC_OPERATION = 28
    XCN_NCRYPT_PREFER_SIGNATURE_ONLY_OPERATION = 2097152
    XCN_NCRYPT_PREFER_NON_SIGNATURE_OPERATION = 4194304
    XCN_NCRYPT_EXACT_MATCH_OPERATION = 8388608
    XCN_NCRYPT_PREFERENCE_MASK_OPERATION = 14680064
  end

  enum X509KeySpec : Int32
    XCN_AT_NONE = 0
    XCN_AT_KEYEXCHANGE = 1
    XCN_AT_SIGNATURE = 2
  end

  enum KeyIdentifierHashAlgorithm : Int32
    SKIHashDefault = 0
    SKIHashSha1 = 1
    SKIHashCapiSha1 = 2
    SKIHashSha256 = 3
    SKIHashHPKP = 5
  end

  enum X509PrivateKeyExportFlags : Int32
    XCN_NCRYPT_ALLOW_EXPORT_NONE = 0
    XCN_NCRYPT_ALLOW_EXPORT_FLAG = 1
    XCN_NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG = 2
    XCN_NCRYPT_ALLOW_ARCHIVING_FLAG = 4
    XCN_NCRYPT_ALLOW_PLAINTEXT_ARCHIVING_FLAG = 8
  end

  enum X509PrivateKeyUsageFlags : Int32
    XCN_NCRYPT_ALLOW_USAGES_NONE = 0
    XCN_NCRYPT_ALLOW_DECRYPT_FLAG = 1
    XCN_NCRYPT_ALLOW_SIGNING_FLAG = 2
    XCN_NCRYPT_ALLOW_KEY_AGREEMENT_FLAG = 4
    XCN_NCRYPT_ALLOW_KEY_IMPORT_FLAG = 8
    XCN_NCRYPT_ALLOW_ALL_USAGES = 16777215
  end

  enum X509PrivateKeyProtection : Int32
    XCN_NCRYPT_UI_NO_PROTECTION_FLAG = 0
    XCN_NCRYPT_UI_PROTECT_KEY_FLAG = 1
    XCN_NCRYPT_UI_FORCE_HIGH_PROTECTION_FLAG = 2
    XCN_NCRYPT_UI_FINGERPRINT_PROTECTION_FLAG = 4
    XCN_NCRYPT_UI_APPCONTAINER_ACCESS_MEDIUM_FLAG = 8
  end

  enum X509PrivateKeyVerify : Int32
    VerifyNone = 0
    VerifySilent = 1
    VerifySmartCardNone = 2
    VerifySmartCardSilent = 3
    VerifyAllowUI = 4
  end

  enum X509HardwareKeyUsageFlags : Int32
    XCN_NCRYPT_PCP_NONE = 0
    XCN_NCRYPT_TPM12_PROVIDER = 65536
    XCN_NCRYPT_PCP_SIGNATURE_KEY = 1
    XCN_NCRYPT_PCP_ENCRYPTION_KEY = 2
    XCN_NCRYPT_PCP_GENERIC_KEY = 3
    XCN_NCRYPT_PCP_STORAGE_KEY = 4
    XCN_NCRYPT_PCP_IDENTITY_KEY = 8
  end

  enum X509KeyParametersExportType : Int32
    XCN_CRYPT_OID_USE_CURVE_NONE = 0
    XCN_CRYPT_OID_USE_CURVE_NAME_FOR_ENCODE_FLAG = 536870912
    XCN_CRYPT_OID_USE_CURVE_PARAMETERS_FOR_ENCODE_FLAG = 268435456
  end

  enum X509KeyUsageFlags : Int32
    XCN_CERT_NO_KEY_USAGE = 0
    XCN_CERT_DIGITAL_SIGNATURE_KEY_USAGE = 128
    XCN_CERT_NON_REPUDIATION_KEY_USAGE = 64
    XCN_CERT_KEY_ENCIPHERMENT_KEY_USAGE = 32
    XCN_CERT_DATA_ENCIPHERMENT_KEY_USAGE = 16
    XCN_CERT_KEY_AGREEMENT_KEY_USAGE = 8
    XCN_CERT_KEY_CERT_SIGN_KEY_USAGE = 4
    XCN_CERT_OFFLINE_CRL_SIGN_KEY_USAGE = 2
    XCN_CERT_CRL_SIGN_KEY_USAGE = 2
    XCN_CERT_ENCIPHER_ONLY_KEY_USAGE = 1
    XCN_CERT_DECIPHER_ONLY_KEY_USAGE = 32768
  end

  enum AlternativeNameType : Int32
    XCN_CERT_ALT_NAME_UNKNOWN = 0
    XCN_CERT_ALT_NAME_OTHER_NAME = 1
    XCN_CERT_ALT_NAME_RFC822_NAME = 2
    XCN_CERT_ALT_NAME_DNS_NAME = 3
    XCN_CERT_ALT_NAME_X400_ADDRESS = 4
    XCN_CERT_ALT_NAME_DIRECTORY_NAME = 5
    XCN_CERT_ALT_NAME_EDI_PARTY_NAME = 6
    XCN_CERT_ALT_NAME_URL = 7
    XCN_CERT_ALT_NAME_IP_ADDRESS = 8
    XCN_CERT_ALT_NAME_REGISTERED_ID = 9
    XCN_CERT_ALT_NAME_GUID = 10
    XCN_CERT_ALT_NAME_USER_PRINCIPLE_NAME = 11
  end

  enum PolicyQualifierType : Int32
    PolicyQualifierTypeUnknown = 0
    PolicyQualifierTypeUrl = 1
    PolicyQualifierTypeUserNotice = 2
    PolicyQualifierTypeFlags = 3
  end

  enum RequestClientInfoClientId : Int32
    ClientIdNone = 0
    ClientIdXEnroll2003 = 1
    ClientIdAutoEnroll2003 = 2
    ClientIdWizard2003 = 3
    ClientIdCertReq2003 = 4
    ClientIdDefaultRequest = 5
    ClientIdAutoEnroll = 6
    ClientIdRequestWizard = 7
    ClientIdEOBO = 8
    ClientIdCertReq = 9
    ClientIdTest = 10
    ClientIdWinRT = 11
    ClientIdUserStart = 1000
  end

  enum CERTENROLL_PROPERTYID : Int32
    XCN_PROPERTYID_NONE = 0
    XCN_CERT_KEY_PROV_HANDLE_PROP_ID = 1
    XCN_CERT_KEY_PROV_INFO_PROP_ID = 2
    XCN_CERT_SHA1_HASH_PROP_ID = 3
    XCN_CERT_MD5_HASH_PROP_ID = 4
    XCN_CERT_HASH_PROP_ID = 3
    XCN_CERT_KEY_CONTEXT_PROP_ID = 5
    XCN_CERT_KEY_SPEC_PROP_ID = 6
    XCN_CERT_IE30_RESERVED_PROP_ID = 7
    XCN_CERT_PUBKEY_HASH_RESERVED_PROP_ID = 8
    XCN_CERT_ENHKEY_USAGE_PROP_ID = 9
    XCN_CERT_CTL_USAGE_PROP_ID = 9
    XCN_CERT_NEXT_UPDATE_LOCATION_PROP_ID = 10
    XCN_CERT_FRIENDLY_NAME_PROP_ID = 11
    XCN_CERT_PVK_FILE_PROP_ID = 12
    XCN_CERT_DESCRIPTION_PROP_ID = 13
    XCN_CERT_ACCESS_STATE_PROP_ID = 14
    XCN_CERT_SIGNATURE_HASH_PROP_ID = 15
    XCN_CERT_SMART_CARD_DATA_PROP_ID = 16
    XCN_CERT_EFS_PROP_ID = 17
    XCN_CERT_FORTEZZA_DATA_PROP_ID = 18
    XCN_CERT_ARCHIVED_PROP_ID = 19
    XCN_CERT_KEY_IDENTIFIER_PROP_ID = 20
    XCN_CERT_AUTO_ENROLL_PROP_ID = 21
    XCN_CERT_PUBKEY_ALG_PARA_PROP_ID = 22
    XCN_CERT_CROSS_CERT_DIST_POINTS_PROP_ID = 23
    XCN_CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID = 24
    XCN_CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID = 25
    XCN_CERT_ENROLLMENT_PROP_ID = 26
    XCN_CERT_DATE_STAMP_PROP_ID = 27
    XCN_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = 28
    XCN_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = 29
    XCN_CERT_EXTENDED_ERROR_INFO_PROP_ID = 30
    XCN_CERT_RENEWAL_PROP_ID = 64
    XCN_CERT_ARCHIVED_KEY_HASH_PROP_ID = 65
    XCN_CERT_AUTO_ENROLL_RETRY_PROP_ID = 66
    XCN_CERT_AIA_URL_RETRIEVED_PROP_ID = 67
    XCN_CERT_AUTHORITY_INFO_ACCESS_PROP_ID = 68
    XCN_CERT_BACKED_UP_PROP_ID = 69
    XCN_CERT_OCSP_RESPONSE_PROP_ID = 70
    XCN_CERT_REQUEST_ORIGINATOR_PROP_ID = 71
    XCN_CERT_SOURCE_LOCATION_PROP_ID = 72
    XCN_CERT_SOURCE_URL_PROP_ID = 73
    XCN_CERT_NEW_KEY_PROP_ID = 74
    XCN_CERT_OCSP_CACHE_PREFIX_PROP_ID = 75
    XCN_CERT_SMART_CARD_ROOT_INFO_PROP_ID = 76
    XCN_CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID = 77
    XCN_CERT_NCRYPT_KEY_HANDLE_PROP_ID = 78
    XCN_CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID = 79
    XCN_CERT_SUBJECT_INFO_ACCESS_PROP_ID = 80
    XCN_CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 81
    XCN_CERT_CA_DISABLE_CRL_PROP_ID = 82
    XCN_CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID = 83
    XCN_CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID = 84
    XCN_CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 85
    XCN_CERT_SUBJECT_DISABLE_CRL_PROP_ID = 86
    XCN_CERT_CEP_PROP_ID = 87
    XCN_CERT_SIGN_HASH_CNG_ALG_PROP_ID = 89
    XCN_CERT_SCARD_PIN_ID_PROP_ID = 90
    XCN_CERT_SCARD_PIN_INFO_PROP_ID = 91
    XCN_CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID = 92
    XCN_CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 93
    XCN_CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID = 94
    XCN_CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID = 95
    XCN_CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 96
    XCN_CERT_NO_EXPIRE_NOTIFICATION_PROP_ID = 97
    XCN_CERT_AUTH_ROOT_SHA256_HASH_PROP_ID = 98
    XCN_CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID = 99
    XCN_CERT_HCRYPTPROV_TRANSFER_PROP_ID = 100
    XCN_CERT_SMART_CARD_READER_PROP_ID = 101
    XCN_CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID = 102
    XCN_CERT_KEY_REPAIR_ATTEMPTED_PROP_ID = 103
    XCN_CERT_DISALLOWED_FILETIME_PROP_ID = 104
    XCN_CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID = 105
    XCN_CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID = 106
    XCN_CERT_SHA256_HASH_PROP_ID = 107
    XCN_CERT_SCEP_SERVER_CERTS_PROP_ID = 108
    XCN_CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID = 109
    XCN_CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID = 110
    XCN_CERT_SCEP_CA_CERT_PROP_ID = 111
    XCN_CERT_SCEP_SIGNER_CERT_PROP_ID = 112
    XCN_CERT_SCEP_NONCE_PROP_ID = 113
    XCN_CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID = 114
    XCN_CERT_SCEP_FLAGS_PROP_ID = 115
    XCN_CERT_SCEP_GUID_PROP_ID = 116
    XCN_CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID = 117
    XCN_CERT_ISOLATED_KEY_PROP_ID = 118
    XCN_CERT_SERIAL_CHAIN_PROP_ID = 119
    XCN_CERT_KEY_CLASSIFICATION_PROP_ID = 120
    XCN_CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID = 122
    XCN_CERT_NONCOMPLIANT_ROOT_URL_PROP_ID = 123
    XCN_CERT_PIN_SHA256_HASH_PROP_ID = 124
    XCN_CERT_CLR_DELETE_KEY_PROP_ID = 125
    XCN_CERT_NOT_BEFORE_FILETIME_PROP_ID = 126
    XCN_CERT_CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID = 127
    XCN_CERT_FIRST_RESERVED_PROP_ID = 128
    XCN_CERT_LAST_RESERVED_PROP_ID = 32767
    XCN_CERT_FIRST_USER_PROP_ID = 32768
    XCN_CERT_LAST_USER_PROP_ID = 65535
    XCN_CERT_STORE_LOCALIZED_NAME_PROP_ID = 4096
  end

  enum EnrollmentPolicyServerPropertyFlags : Int32
    DefaultNone = 0
    DefaultPolicyServer = 1
  end

  enum PolicyServerUrlFlags : Int32
    PsfNone = 0
    PsfLocationGroupPolicy = 1
    PsfLocationRegistry = 2
    PsfUseClientId = 4
    PsfAutoEnrollmentEnabled = 16
    PsfAllowUnTrustedCA = 32
  end

  enum EnrollmentTemplateProperty : Int32
    TemplatePropCommonName = 1
    TemplatePropFriendlyName = 2
    TemplatePropEKUs = 3
    TemplatePropCryptoProviders = 4
    TemplatePropMajorRevision = 5
    TemplatePropDescription = 6
    TemplatePropKeySpec = 7
    TemplatePropSchemaVersion = 8
    TemplatePropMinorRevision = 9
    TemplatePropRASignatureCount = 10
    TemplatePropMinimumKeySize = 11
    TemplatePropOID = 12
    TemplatePropSupersede = 13
    TemplatePropRACertificatePolicies = 14
    TemplatePropRAEKUs = 15
    TemplatePropCertificatePolicies = 16
    TemplatePropV1ApplicationPolicy = 17
    TemplatePropAsymmetricAlgorithm = 18
    TemplatePropKeySecurityDescriptor = 19
    TemplatePropSymmetricAlgorithm = 20
    TemplatePropSymmetricKeyLength = 21
    TemplatePropHashAlgorithm = 22
    TemplatePropKeyUsage = 23
    TemplatePropEnrollmentFlags = 24
    TemplatePropSubjectNameFlags = 25
    TemplatePropPrivateKeyFlags = 26
    TemplatePropGeneralFlags = 27
    TemplatePropSecurityDescriptor = 28
    TemplatePropExtensions = 29
    TemplatePropValidityPeriod = 30
    TemplatePropRenewalPeriod = 31
  end

  enum CommitTemplateFlags : Int32
    CommitFlagSaveTemplateGenerateOID = 1
    CommitFlagSaveTemplateUseCurrentOID = 2
    CommitFlagSaveTemplateOverwrite = 3
    CommitFlagDeleteTemplate = 4
  end

  enum EnrollmentCAProperty : Int32
    CAPropCommonName = 1
    CAPropDistinguishedName = 2
    CAPropSanitizedName = 3
    CAPropSanitizedShortName = 4
    CAPropDNSName = 5
    CAPropCertificateTypes = 6
    CAPropCertificate = 7
    CAPropDescription = 8
    CAPropWebServers = 9
    CAPropSiteName = 10
    CAPropSecurity = 11
    CAPropRenewalOnly = 12
  end

  enum X509EnrollmentPolicyLoadOption : Int32
    LoadOptionDefault = 0
    LoadOptionCacheOnly = 1
    LoadOptionReload = 2
    LoadOptionRegisterForADChanges = 4
  end

  enum EnrollmentPolicyFlags : Int32
    DisableGroupPolicyList = 2
    DisableUserServerList = 4
  end

  enum PolicyServerUrlPropertyID : Int32
    PsPolicyID = 0
    PsFriendlyName = 1
  end

  enum X509EnrollmentPolicyExportFlags : Int32
    ExportTemplates = 1
    ExportOIDs = 2
    ExportCAs = 4
  end

  enum X509RequestType : Int32
    TypeAny = 0
    TypePkcs10 = 1
    TypePkcs7 = 2
    TypeCmc = 3
    TypeCertificate = 4
  end

  enum X509RequestInheritOptions : Int32
    InheritDefault = 0
    InheritNewDefaultKey = 1
    InheritNewSimilarKey = 2
    InheritPrivateKey = 3
    InheritPublicKey = 4
    InheritKeyMask = 15
    InheritNone = 16
    InheritRenewalCertificateFlag = 32
    InheritTemplateFlag = 64
    InheritSubjectFlag = 128
    InheritExtensionsFlag = 256
    InheritSubjectAltNameFlag = 512
    InheritValidityPeriodFlag = 1024
    InheritReserved80000000 = -2147483648
  end

  enum InnerRequestLevel : Int32
    LevelInnermost = 0
    LevelNext = 1
  end

  enum Pkcs10AllowedSignatureTypes : Int32
    AllowedKeySignature = 1
    AllowedNullSignature = 2
  end

  enum KeyAttestationClaimType : Int32
    XCN_NCRYPT_CLAIM_NONE = 0
    XCN_NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT = 3
    XCN_NCRYPT_CLAIM_AUTHORITY_ONLY = 1
    XCN_NCRYPT_CLAIM_SUBJECT_ONLY = 2
    XCN_NCRYPT_CLAIM_UNKNOWN = 4096
  end

  enum InstallResponseRestrictionFlags : Int32
    AllowNone = 0
    AllowNoOutstandingRequest = 1
    AllowUntrustedCertificate = 2
    AllowUntrustedRoot = 4
  end

  enum WebEnrollmentFlags : Int32
    EnrollPrompt = 1
  end

  enum CRLRevocationReason : Int32
    XCN_CRL_REASON_UNSPECIFIED = 0
    XCN_CRL_REASON_KEY_COMPROMISE = 1
    XCN_CRL_REASON_CA_COMPROMISE = 2
    XCN_CRL_REASON_AFFILIATION_CHANGED = 3
    XCN_CRL_REASON_SUPERSEDED = 4
    XCN_CRL_REASON_CESSATION_OF_OPERATION = 5
    XCN_CRL_REASON_CERTIFICATE_HOLD = 6
    XCN_CRL_REASON_REMOVE_FROM_CRL = 8
    XCN_CRL_REASON_PRIVILEGE_WITHDRAWN = 9
    XCN_CRL_REASON_AA_COMPROMISE = 10
  end

  enum X509SCEPProcessMessageFlags : Int32
    SCEPProcessDefault = 0
    SCEPProcessSkipCertInstall = 1
  end

  enum DelayRetryAction : Int32
    DelayRetryUnknown = 0
    DelayRetryNone = 1
    DelayRetryShort = 2
    DelayRetryLong = 3
    DelayRetrySuccess = 4
    DelayRetryPastSuccess = 5
  end

  enum X509CertificateTemplateGeneralFlag : Int32
    GeneralMachineType = 64
    GeneralCA = 128
    GeneralCrossCA = 2048
    GeneralDefault = 65536
    GeneralModified = 131072
    GeneralDonotPersist = 4096
  end

  enum X509CertificateTemplateEnrollmentFlag : Int32
    EnrollmentIncludeSymmetricAlgorithms = 1
    EnrollmentPendAllRequests = 2
    EnrollmentPublishToKRAContainer = 4
    EnrollmentPublishToDS = 8
    EnrollmentAutoEnrollmentCheckUserDSCertificate = 16
    EnrollmentAutoEnrollment = 32
    EnrollmentDomainAuthenticationNotRequired = 128
    EnrollmentPreviousApprovalValidateReenrollment = 64
    EnrollmentUserInteractionRequired = 256
    EnrollmentAddTemplateName = 512
    EnrollmentRemoveInvalidCertificateFromPersonalStore = 1024
    EnrollmentAllowEnrollOnBehalfOf = 2048
    EnrollmentAddOCSPNoCheck = 4096
    EnrollmentReuseKeyOnFullSmartCard = 8192
    EnrollmentNoRevocationInfoInCerts = 16384
    EnrollmentIncludeBasicConstraintsForEECerts = 32768
    EnrollmentPreviousApprovalKeyBasedValidateReenrollment = 65536
    EnrollmentCertificateIssuancePoliciesFromRequest = 131072
    EnrollmentSkipAutoRenewal = 262144
  end

  enum X509CertificateTemplateSubjectNameFlag : Int32
    SubjectNameEnrolleeSupplies = 1
    SubjectNameRequireDirectoryPath = -2147483648
    SubjectNameRequireCommonName = 1073741824
    SubjectNameRequireEmail = 536870912
    SubjectNameRequireDNS = 268435456
    SubjectNameAndAlternativeNameOldCertSupplies = 8
    SubjectAlternativeNameEnrolleeSupplies = 65536
    SubjectAlternativeNameRequireDirectoryGUID = 16777216
    SubjectAlternativeNameRequireUPN = 33554432
    SubjectAlternativeNameRequireEmail = 67108864
    SubjectAlternativeNameRequireSPN = 8388608
    SubjectAlternativeNameRequireDNS = 134217728
    SubjectAlternativeNameRequireDomainDNS = 4194304
  end

  enum X509CertificateTemplatePrivateKeyFlag : Int32
    PrivateKeyRequireArchival = 1
    PrivateKeyExportable = 16
    PrivateKeyRequireStrongKeyProtection = 32
    PrivateKeyRequireAlternateSignatureAlgorithm = 64
    PrivateKeyRequireSameKeyRenewal = 128
    PrivateKeyUseLegacyProvider = 256
    PrivateKeyEKTrustOnUse = 512
    PrivateKeyEKValidateCert = 1024
    PrivateKeyEKValidateKey = 2048
    PrivateKeyAttestNone = 0
    PrivateKeyAttestPreferred = 4096
    PrivateKeyAttestRequired = 8192
    PrivateKeyAttestMask = 12288
    PrivateKeyAttestWithoutPolicy = 16384
    PrivateKeyServerVersionMask = 983040
    PrivateKeyServerVersionShift = 16
    PrivateKeyHelloKspKey = 1048576
    PrivateKeyHelloLogonKey = 2097152
    PrivateKeyClientVersionMask = 251658240
    PrivateKeyClientVersionShift = 24
  end

  enum ImportPFXFlags : Int32
    ImportNone = 0
    ImportMachineContext = 1
    ImportForceOverwrite = 2
    ImportSilent = 4
    ImportSaveProperties = 8
    ImportExportable = 16
    ImportExportableEncrypted = 32
    ImportNoUserProtected = 64
    ImportUserProtected = 128
    ImportUserProtectedHigh = 256
    ImportInstallCertificate = 512
    ImportInstallChain = 1024
    ImportInstallChainAndRoot = 2048
  end

  enum ENUM_CATYPES : Int32
    ENUM_ENTERPRISE_ROOTCA = 0
    ENUM_ENTERPRISE_SUBCA = 1
    ENUM_STANDALONE_ROOTCA = 3
    ENUM_STANDALONE_SUBCA = 4
    ENUM_UNKNOWN_CA = 5
  end

  struct CSEDB_RSTMAPW
    pwsz_database_name : LibC::LPWSTR
    pwsz_new_database_name : LibC::LPWSTR
  end
  struct CERTTRANSBLOB
    cb : UInt32
    pb : UInt8*
  end
  struct CERTVIEWRESTRICTION
    column_index : UInt32
    seek_operator : Int32
    sort_order : Int32
    pb_value : UInt8*
    cb_value : UInt32
  end
  struct CAINFO
    cb_size : UInt32
    ca_type : ENUM_CATYPES
    c_ca_signature_certs : UInt32
    c_ca_exchange_certs : UInt32
    c_exit_modules : UInt32
    l_prop_id_max : Int32
    l_role_separation_enabled : Int32
    c_kra_cert_used_count : UInt32
    c_kra_cert_count : UInt32
    f_advanced_server : UInt32
  end


  struct IEnumCERTVIEWCOLUMNVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    next : UInt64
    get_name : UInt64
    get_display_name : UInt64
    get_type : UInt64
    is_indexed : UInt64
    get_max_length : UInt64
    get_value : UInt64
    skip : UInt64
    reset : UInt64
    clone : UInt64
  end

  IEnumCERTVIEWCOLUMN_GUID = "9c735be2-57a5-11d1-9bdb-00c04fb683fa"
  IID_IEnumCERTVIEWCOLUMN = LibC::GUID.new(0x9c735be2_u32, 0x57a5_u16, 0x11d1_u16, StaticArray[0x9b_u8, 0xdb_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x83_u8, 0xfa_u8])
  struct IEnumCERTVIEWCOLUMN
    lpVtbl : IEnumCERTVIEWCOLUMNVTbl*
  end

  struct IEnumCERTVIEWATTRIBUTEVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    next : UInt64
    get_name : UInt64
    get_value : UInt64
    skip : UInt64
    reset : UInt64
    clone : UInt64
  end

  IEnumCERTVIEWATTRIBUTE_GUID = "e77db656-7653-11d1-9bde-00c04fb683fa"
  IID_IEnumCERTVIEWATTRIBUTE = LibC::GUID.new(0xe77db656_u32, 0x7653_u16, 0x11d1_u16, StaticArray[0x9b_u8, 0xde_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x83_u8, 0xfa_u8])
  struct IEnumCERTVIEWATTRIBUTE
    lpVtbl : IEnumCERTVIEWATTRIBUTEVTbl*
  end

  struct IEnumCERTVIEWEXTENSIONVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    next : UInt64
    get_name : UInt64
    get_flags : UInt64
    get_value : UInt64
    skip : UInt64
    reset : UInt64
    clone : UInt64
  end

  IEnumCERTVIEWEXTENSION_GUID = "e7dd1466-7653-11d1-9bde-00c04fb683fa"
  IID_IEnumCERTVIEWEXTENSION = LibC::GUID.new(0xe7dd1466_u32, 0x7653_u16, 0x11d1_u16, StaticArray[0x9b_u8, 0xde_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x83_u8, 0xfa_u8])
  struct IEnumCERTVIEWEXTENSION
    lpVtbl : IEnumCERTVIEWEXTENSIONVTbl*
  end

  struct IEnumCERTVIEWROWVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    next : UInt64
    enum_cert_view_column : UInt64
    enum_cert_view_attribute : UInt64
    enum_cert_view_extension : UInt64
    skip : UInt64
    reset : UInt64
    clone : UInt64
    get_max_index : UInt64
  end

  IEnumCERTVIEWROW_GUID = "d1157f4c-5af2-11d1-9bdc-00c04fb683fa"
  IID_IEnumCERTVIEWROW = LibC::GUID.new(0xd1157f4c_u32, 0x5af2_u16, 0x11d1_u16, StaticArray[0x9b_u8, 0xdc_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x83_u8, 0xfa_u8])
  struct IEnumCERTVIEWROW
    lpVtbl : IEnumCERTVIEWROWVTbl*
  end

  struct ICertViewVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    open_connection : UInt64
    enum_cert_view_column : UInt64
    get_column_count : UInt64
    get_column_index : UInt64
    set_result_column_count : UInt64
    set_result_column : UInt64
    set_restriction : UInt64
    open_view : UInt64
  end

  ICertView_GUID = "c3fac344-1e84-11d1-9bd6-00c04fb683fa"
  IID_ICertView = LibC::GUID.new(0xc3fac344_u32, 0x1e84_u16, 0x11d1_u16, StaticArray[0x9b_u8, 0xd6_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x83_u8, 0xfa_u8])
  struct ICertView
    lpVtbl : ICertViewVTbl*
  end

  struct ICertView2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    open_connection : UInt64
    enum_cert_view_column : UInt64
    get_column_count : UInt64
    get_column_index : UInt64
    set_result_column_count : UInt64
    set_result_column : UInt64
    set_restriction : UInt64
    open_view : UInt64
    set_table : UInt64
  end

  ICertView2_GUID = "d594b282-8851-4b61-9c66-3edadf848863"
  IID_ICertView2 = LibC::GUID.new(0xd594b282_u32, 0x8851_u16, 0x4b61_u16, StaticArray[0x9c_u8, 0x66_u8, 0x3e_u8, 0xda_u8, 0xdf_u8, 0x84_u8, 0x88_u8, 0x63_u8])
  struct ICertView2
    lpVtbl : ICertView2VTbl*
  end

  struct ICertAdminVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    is_valid_certificate : UInt64
    get_revocation_reason : UInt64
    revoke_certificate : UInt64
    set_request_attributes : UInt64
    set_certificate_extension : UInt64
    deny_request : UInt64
    resubmit_request : UInt64
    publish_crl : UInt64
    get_crl : UInt64
    import_certificate : UInt64
  end

  ICertAdmin_GUID = "34df6950-7fb6-11d0-8817-00a0c903b83c"
  IID_ICertAdmin = LibC::GUID.new(0x34df6950_u32, 0x7fb6_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x17_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
  struct ICertAdmin
    lpVtbl : ICertAdminVTbl*
  end

  struct ICertAdmin2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    is_valid_certificate : UInt64
    get_revocation_reason : UInt64
    revoke_certificate : UInt64
    set_request_attributes : UInt64
    set_certificate_extension : UInt64
    deny_request : UInt64
    resubmit_request : UInt64
    publish_crl : UInt64
    get_crl : UInt64
    import_certificate : UInt64
    publish_cr_ls : UInt64
    get_ca_property : UInt64
    set_ca_property : UInt64
    get_ca_property_flags : UInt64
    get_ca_property_display_name : UInt64
    get_archived_key : UInt64
    get_config_entry : UInt64
    set_config_entry : UInt64
    import_key : UInt64
    get_my_roles : UInt64
    delete_row : UInt64
  end

  ICertAdmin2_GUID = "f7c3ac41-b8ce-4fb4-aa58-3d1dc0e36b39"
  IID_ICertAdmin2 = LibC::GUID.new(0xf7c3ac41_u32, 0xb8ce_u16, 0x4fb4_u16, StaticArray[0xaa_u8, 0x58_u8, 0x3d_u8, 0x1d_u8, 0xc0_u8, 0xe3_u8, 0x6b_u8, 0x39_u8])
  struct ICertAdmin2
    lpVtbl : ICertAdmin2VTbl*
  end

  struct IOCSPPropertyVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_name : UInt64
    get_value : UInt64
    put_value : UInt64
    get_modified : UInt64
  end

  IOCSPProperty_GUID = "66fb7839-5f04-4c25-ad18-9ff1a8376ee0"
  IID_IOCSPProperty = LibC::GUID.new(0x66fb7839_u32, 0x5f04_u16, 0x4c25_u16, StaticArray[0xad_u8, 0x18_u8, 0x9f_u8, 0xf1_u8, 0xa8_u8, 0x37_u8, 0x6e_u8, 0xe0_u8])
  struct IOCSPProperty
    lpVtbl : IOCSPPropertyVTbl*
  end

  struct IOCSPPropertyCollectionVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get__new_enum : UInt64
    get_item : UInt64
    get_count : UInt64
    get_item_by_name : UInt64
    create_property : UInt64
    delete_property : UInt64
    initialize_from_properties : UInt64
    get_all_properties : UInt64
  end

  IOCSPPropertyCollection_GUID = "2597c18d-54e6-4b74-9fa9-a6bfda99cbbe"
  IID_IOCSPPropertyCollection = LibC::GUID.new(0x2597c18d_u32, 0x54e6_u16, 0x4b74_u16, StaticArray[0x9f_u8, 0xa9_u8, 0xa6_u8, 0xbf_u8, 0xda_u8, 0x99_u8, 0xcb_u8, 0xbe_u8])
  struct IOCSPPropertyCollection
    lpVtbl : IOCSPPropertyCollectionVTbl*
  end

  struct IOCSPCAConfigurationVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_identifier : UInt64
    get_ca_certificate : UInt64
    get_hash_algorithm : UInt64
    put_hash_algorithm : UInt64
    get_signing_flags : UInt64
    put_signing_flags : UInt64
    get_signing_certificate : UInt64
    put_signing_certificate : UInt64
    get_reminder_duration : UInt64
    put_reminder_duration : UInt64
    get_error_code : UInt64
    get_csp_name : UInt64
    get_key_spec : UInt64
    get_provider_clsid : UInt64
    put_provider_clsid : UInt64
    get_provider_properties : UInt64
    put_provider_properties : UInt64
    get_modified : UInt64
    get_local_revocation_information : UInt64
    put_local_revocation_information : UInt64
    get_signing_certificate_template : UInt64
    put_signing_certificate_template : UInt64
    get_ca_config : UInt64
    put_ca_config : UInt64
  end

  IOCSPCAConfiguration_GUID = "aec92b40-3d46-433f-87d1-b84d5c1e790d"
  IID_IOCSPCAConfiguration = LibC::GUID.new(0xaec92b40_u32, 0x3d46_u16, 0x433f_u16, StaticArray[0x87_u8, 0xd1_u8, 0xb8_u8, 0x4d_u8, 0x5c_u8, 0x1e_u8, 0x79_u8, 0xd_u8])
  struct IOCSPCAConfiguration
    lpVtbl : IOCSPCAConfigurationVTbl*
  end

  struct IOCSPCAConfigurationCollectionVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get__new_enum : UInt64
    get_item : UInt64
    get_count : UInt64
    get_item_by_name : UInt64
    create_ca_configuration : UInt64
    delete_ca_configuration : UInt64
  end

  IOCSPCAConfigurationCollection_GUID = "2bebea0b-5ece-4f28-a91c-86b4bb20f0d3"
  IID_IOCSPCAConfigurationCollection = LibC::GUID.new(0x2bebea0b_u32, 0x5ece_u16, 0x4f28_u16, StaticArray[0xa9_u8, 0x1c_u8, 0x86_u8, 0xb4_u8, 0xbb_u8, 0x20_u8, 0xf0_u8, 0xd3_u8])
  struct IOCSPCAConfigurationCollection
    lpVtbl : IOCSPCAConfigurationCollectionVTbl*
  end

  struct IOCSPAdminVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_ocsp_service_properties : UInt64
    get_ocspca_configuration_collection : UInt64
    get_configuration : UInt64
    set_configuration : UInt64
    get_my_roles : UInt64
    ping : UInt64
    set_security : UInt64
    get_security : UInt64
    get_signing_certificates : UInt64
    get_hash_algorithms : UInt64
  end

  IOCSPAdmin_GUID = "322e830d-67db-4fe9-9577-4596d9f09294"
  IID_IOCSPAdmin = LibC::GUID.new(0x322e830d_u32, 0x67db_u16, 0x4fe9_u16, StaticArray[0x95_u8, 0x77_u8, 0x45_u8, 0x96_u8, 0xd9_u8, 0xf0_u8, 0x92_u8, 0x94_u8])
  struct IOCSPAdmin
    lpVtbl : IOCSPAdminVTbl*
  end

  struct ICertServerPolicyVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    set_context : UInt64
    get_request_property : UInt64
    get_request_attribute : UInt64
    get_certificate_property : UInt64
    set_certificate_property : UInt64
    get_certificate_extension : UInt64
    get_certificate_extension_flags : UInt64
    set_certificate_extension : UInt64
    enumerate_extensions_setup : UInt64
    enumerate_extensions : UInt64
    enumerate_extensions_close : UInt64
    enumerate_attributes_setup : UInt64
    enumerate_attributes : UInt64
    enumerate_attributes_close : UInt64
  end

  ICertServerPolicy_GUID = "aa000922-ffbe-11cf-8800-00a0c903b83c"
  IID_ICertServerPolicy = LibC::GUID.new(0xaa000922_u32, 0xffbe_u16, 0x11cf_u16, StaticArray[0x88_u8, 0x0_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
  struct ICertServerPolicy
    lpVtbl : ICertServerPolicyVTbl*
  end

  struct ICertServerExitVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    set_context : UInt64
    get_request_property : UInt64
    get_request_attribute : UInt64
    get_certificate_property : UInt64
    get_certificate_extension : UInt64
    get_certificate_extension_flags : UInt64
    enumerate_extensions_setup : UInt64
    enumerate_extensions : UInt64
    enumerate_extensions_close : UInt64
    enumerate_attributes_setup : UInt64
    enumerate_attributes : UInt64
    enumerate_attributes_close : UInt64
  end

  ICertServerExit_GUID = "4ba9eb90-732c-11d0-8816-00a0c903b83c"
  IID_ICertServerExit = LibC::GUID.new(0x4ba9eb90_u32, 0x732c_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x16_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
  struct ICertServerExit
    lpVtbl : ICertServerExitVTbl*
  end

  struct ICertGetConfigVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_config : UInt64
  end

  ICertGetConfig_GUID = "c7ea09c0-ce17-11d0-8833-00a0c903b83c"
  IID_ICertGetConfig = LibC::GUID.new(0xc7ea09c0_u32, 0xce17_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x33_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
  struct ICertGetConfig
    lpVtbl : ICertGetConfigVTbl*
  end

  struct ICertConfigVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    reset : UInt64
    next : UInt64
    get_field : UInt64
    get_config : UInt64
  end

  ICertConfig_GUID = "372fce34-4324-11d0-8810-00a0c903b83c"
  IID_ICertConfig = LibC::GUID.new(0x372fce34_u32, 0x4324_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x10_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
  struct ICertConfig
    lpVtbl : ICertConfigVTbl*
  end

  struct ICertConfig2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    reset : UInt64
    next : UInt64
    get_field : UInt64
    get_config : UInt64
    set_shared_folder : UInt64
  end

  ICertConfig2_GUID = "7a18edde-7e78-4163-8ded-78e2c9cee924"
  IID_ICertConfig2 = LibC::GUID.new(0x7a18edde_u32, 0x7e78_u16, 0x4163_u16, StaticArray[0x8d_u8, 0xed_u8, 0x78_u8, 0xe2_u8, 0xc9_u8, 0xce_u8, 0xe9_u8, 0x24_u8])
  struct ICertConfig2
    lpVtbl : ICertConfig2VTbl*
  end

  struct ICertRequestVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    submit : UInt64
    retrieve_pending : UInt64
    get_last_status : UInt64
    get_request_id : UInt64
    get_disposition_message : UInt64
    get_ca_certificate : UInt64
    get_certificate : UInt64
  end

  ICertRequest_GUID = "014e4840-5523-11d0-8812-00a0c903b83c"
  IID_ICertRequest = LibC::GUID.new(0x14e4840_u32, 0x5523_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x12_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
  struct ICertRequest
    lpVtbl : ICertRequestVTbl*
  end

  struct ICertRequest2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    submit : UInt64
    retrieve_pending : UInt64
    get_last_status : UInt64
    get_request_id : UInt64
    get_disposition_message : UInt64
    get_ca_certificate : UInt64
    get_certificate : UInt64
    get_issued_certificate : UInt64
    get_error_message_text : UInt64
    get_ca_property : UInt64
    get_ca_property_flags : UInt64
    get_ca_property_display_name : UInt64
    get_full_response_property : UInt64
  end

  ICertRequest2_GUID = "a4772988-4a85-4fa9-824e-b5cf5c16405a"
  IID_ICertRequest2 = LibC::GUID.new(0xa4772988_u32, 0x4a85_u16, 0x4fa9_u16, StaticArray[0x82_u8, 0x4e_u8, 0xb5_u8, 0xcf_u8, 0x5c_u8, 0x16_u8, 0x40_u8, 0x5a_u8])
  struct ICertRequest2
    lpVtbl : ICertRequest2VTbl*
  end

  struct ICertRequest3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    submit : UInt64
    retrieve_pending : UInt64
    get_last_status : UInt64
    get_request_id : UInt64
    get_disposition_message : UInt64
    get_ca_certificate : UInt64
    get_certificate : UInt64
    get_issued_certificate : UInt64
    get_error_message_text : UInt64
    get_ca_property : UInt64
    get_ca_property_flags : UInt64
    get_ca_property_display_name : UInt64
    get_full_response_property : UInt64
    set_credential : UInt64
    get_request_id_string : UInt64
    get_issued_certificate2 : UInt64
    get_refresh_policy : UInt64
  end

  ICertRequest3_GUID = "afc8f92b-33a2-4861-bf36-2933b7cd67b3"
  IID_ICertRequest3 = LibC::GUID.new(0xafc8f92b_u32, 0x33a2_u16, 0x4861_u16, StaticArray[0xbf_u8, 0x36_u8, 0x29_u8, 0x33_u8, 0xb7_u8, 0xcd_u8, 0x67_u8, 0xb3_u8])
  struct ICertRequest3
    lpVtbl : ICertRequest3VTbl*
  end

  struct ICertManageModuleVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_property : UInt64
    set_property : UInt64
    configure : UInt64
  end

  ICertManageModule_GUID = "e7d7ad42-bd3d-11d1-9a4d-00c04fc297eb"
  IID_ICertManageModule = LibC::GUID.new(0xe7d7ad42_u32, 0xbd3d_u16, 0x11d1_u16, StaticArray[0x9a_u8, 0x4d_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0x97_u8, 0xeb_u8])
  struct ICertManageModule
    lpVtbl : ICertManageModuleVTbl*
  end

  struct ICertPolicyVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    verify_request : UInt64
    get_description : UInt64
    shut_down : UInt64
  end

  ICertPolicy_GUID = "38bb5a00-7636-11d0-b413-00a0c91bbf8c"
  IID_ICertPolicy = LibC::GUID.new(0x38bb5a00_u32, 0x7636_u16, 0x11d0_u16, StaticArray[0xb4_u8, 0x13_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x1b_u8, 0xbf_u8, 0x8c_u8])
  struct ICertPolicy
    lpVtbl : ICertPolicyVTbl*
  end

  struct ICertPolicy2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    verify_request : UInt64
    get_description : UInt64
    shut_down : UInt64
    get_manage_module : UInt64
  end

  ICertPolicy2_GUID = "3db4910e-8001-4bf1-aa1b-f43a808317a0"
  IID_ICertPolicy2 = LibC::GUID.new(0x3db4910e_u32, 0x8001_u16, 0x4bf1_u16, StaticArray[0xaa_u8, 0x1b_u8, 0xf4_u8, 0x3a_u8, 0x80_u8, 0x83_u8, 0x17_u8, 0xa0_u8])
  struct ICertPolicy2
    lpVtbl : ICertPolicy2VTbl*
  end

  struct INDESPolicyVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    initialize : UInt64
    uninitialize : UInt64
    generate_challenge : UInt64
    verify_request : UInt64
    notify : UInt64
  end

  INDESPolicy_GUID = "13ca515d-431d-46cc-8c2e-1da269bbd625"
  IID_INDESPolicy = LibC::GUID.new(0x13ca515d_u32, 0x431d_u16, 0x46cc_u16, StaticArray[0x8c_u8, 0x2e_u8, 0x1d_u8, 0xa2_u8, 0x69_u8, 0xbb_u8, 0xd6_u8, 0x25_u8])
  struct INDESPolicy
    lpVtbl : INDESPolicyVTbl*
  end

  struct IObjectIdVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize_from_name : UInt64
    initialize_from_value : UInt64
    initialize_from_algorithm_name : UInt64
    get_name : UInt64
    get_friendly_name : UInt64
    put_friendly_name : UInt64
    get_value : UInt64
    get_algorithm_name : UInt64
  end

  IObjectId_GUID = "728ab300-217d-11da-b2a4-000e7bbb2b09"
  IID_IObjectId = LibC::GUID.new(0x728ab300_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IObjectId
    lpVtbl : IObjectIdVTbl*
  end

  struct IObjectIdsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_item_by_index : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    add : UInt64
    remove : UInt64
    clear : UInt64
    add_range : UInt64
  end

  IObjectIds_GUID = "728ab301-217d-11da-b2a4-000e7bbb2b09"
  IID_IObjectIds = LibC::GUID.new(0x728ab301_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IObjectIds
    lpVtbl : IObjectIdsVTbl*
  end

  struct IBinaryConverterVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    string_to_string : UInt64
    variant_byte_array_to_string : UInt64
    string_to_variant_byte_array : UInt64
  end

  IBinaryConverter_GUID = "728ab302-217d-11da-b2a4-000e7bbb2b09"
  IID_IBinaryConverter = LibC::GUID.new(0x728ab302_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IBinaryConverter
    lpVtbl : IBinaryConverterVTbl*
  end

  struct IBinaryConverter2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    string_to_string : UInt64
    variant_byte_array_to_string : UInt64
    string_to_variant_byte_array : UInt64
    string_array_to_variant_array : UInt64
    variant_array_to_string_array : UInt64
  end

  IBinaryConverter2_GUID = "8d7928b4-4e17-428d-9a17-728df00d1b2b"
  IID_IBinaryConverter2 = LibC::GUID.new(0x8d7928b4_u32, 0x4e17_u16, 0x428d_u16, StaticArray[0x9a_u8, 0x17_u8, 0x72_u8, 0x8d_u8, 0xf0_u8, 0xd_u8, 0x1b_u8, 0x2b_u8])
  struct IBinaryConverter2
    lpVtbl : IBinaryConverter2VTbl*
  end

  struct IX500DistinguishedNameVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    decode : UInt64
    encode : UInt64
    get_name : UInt64
    get_encoded_name : UInt64
  end

  IX500DistinguishedName_GUID = "728ab303-217d-11da-b2a4-000e7bbb2b09"
  IID_IX500DistinguishedName = LibC::GUID.new(0x728ab303_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX500DistinguishedName
    lpVtbl : IX500DistinguishedNameVTbl*
  end

  struct IX509EnrollmentStatusVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    append_text : UInt64
    get_text : UInt64
    put_text : UInt64
    get_selected : UInt64
    put_selected : UInt64
    get_display : UInt64
    put_display : UInt64
    get_status : UInt64
    put_status : UInt64
    get_error : UInt64
    put_error : UInt64
    get_error_text : UInt64
  end

  IX509EnrollmentStatus_GUID = "728ab304-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509EnrollmentStatus = LibC::GUID.new(0x728ab304_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509EnrollmentStatus
    lpVtbl : IX509EnrollmentStatusVTbl*
  end

  struct ICspAlgorithmVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_algorithm_oid : UInt64
    get_default_length : UInt64
    get_increment_length : UInt64
    get_long_name : UInt64
    get_valid : UInt64
    get_max_length : UInt64
    get_min_length : UInt64
    get_name : UInt64
    get_type : UInt64
    get_operations : UInt64
  end

  ICspAlgorithm_GUID = "728ab305-217d-11da-b2a4-000e7bbb2b09"
  IID_ICspAlgorithm = LibC::GUID.new(0x728ab305_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ICspAlgorithm
    lpVtbl : ICspAlgorithmVTbl*
  end

  struct ICspAlgorithmsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_item_by_index : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    add : UInt64
    remove : UInt64
    clear : UInt64
    get_item_by_name : UInt64
    get_index_by_object_id : UInt64
  end

  ICspAlgorithms_GUID = "728ab306-217d-11da-b2a4-000e7bbb2b09"
  IID_ICspAlgorithms = LibC::GUID.new(0x728ab306_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ICspAlgorithms
    lpVtbl : ICspAlgorithmsVTbl*
  end

  struct ICspInformationVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize_from_name : UInt64
    initialize_from_type : UInt64
    get_csp_algorithms : UInt64
    get_has_hardware_random_number_generator : UInt64
    get_is_hardware_device : UInt64
    get_is_removable : UInt64
    get_is_software_device : UInt64
    get_valid : UInt64
    get_max_key_container_name_length : UInt64
    get_name : UInt64
    get_type : UInt64
    get_version : UInt64
    get_key_spec : UInt64
    get_is_smart_card : UInt64
    get_default_security_descriptor : UInt64
    get_legacy_csp : UInt64
    get_csp_status_from_operations : UInt64
  end

  ICspInformation_GUID = "728ab307-217d-11da-b2a4-000e7bbb2b09"
  IID_ICspInformation = LibC::GUID.new(0x728ab307_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ICspInformation
    lpVtbl : ICspInformationVTbl*
  end

  struct ICspInformationsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_item_by_index : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    add : UInt64
    remove : UInt64
    clear : UInt64
    add_available_csps : UInt64
    get_item_by_name : UInt64
    get_csp_status_from_provider_name : UInt64
    get_csp_statuses_from_operations : UInt64
    get_encryption_csp_algorithms : UInt64
    get_hash_algorithms : UInt64
  end

  ICspInformations_GUID = "728ab308-217d-11da-b2a4-000e7bbb2b09"
  IID_ICspInformations = LibC::GUID.new(0x728ab308_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ICspInformations
    lpVtbl : ICspInformationsVTbl*
  end

  struct ICspStatusVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    get_ordinal : UInt64
    put_ordinal : UInt64
    get_csp_algorithm : UInt64
    get_csp_information : UInt64
    get_enrollment_status : UInt64
    get_display_name : UInt64
  end

  ICspStatus_GUID = "728ab309-217d-11da-b2a4-000e7bbb2b09"
  IID_ICspStatus = LibC::GUID.new(0x728ab309_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ICspStatus
    lpVtbl : ICspStatusVTbl*
  end

  struct ICspStatusesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_item_by_index : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    add : UInt64
    remove : UInt64
    clear : UInt64
    get_item_by_name : UInt64
    get_item_by_ordinal : UInt64
    get_item_by_operations : UInt64
    get_item_by_provider : UInt64
  end

  ICspStatuses_GUID = "728ab30a-217d-11da-b2a4-000e7bbb2b09"
  IID_ICspStatuses = LibC::GUID.new(0x728ab30a_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ICspStatuses
    lpVtbl : ICspStatusesVTbl*
  end

  struct IX509PublicKeyVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    initialize_from_encoded_public_key_info : UInt64
    get_algorithm : UInt64
    get_length : UInt64
    get_encoded_key : UInt64
    get_encoded_parameters : UInt64
    compute_key_identifier : UInt64
  end

  IX509PublicKey_GUID = "728ab30b-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509PublicKey = LibC::GUID.new(0x728ab30b_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509PublicKey
    lpVtbl : IX509PublicKeyVTbl*
  end

  struct IX509PrivateKeyVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    open : UInt64
    create : UInt64
    close : UInt64
    delete : UInt64
    verify : UInt64
    import : UInt64
    export : UInt64
    export_public_key : UInt64
    get_container_name : UInt64
    put_container_name : UInt64
    get_container_name_prefix : UInt64
    put_container_name_prefix : UInt64
    get_reader_name : UInt64
    put_reader_name : UInt64
    get_csp_informations : UInt64
    put_csp_informations : UInt64
    get_csp_status : UInt64
    put_csp_status : UInt64
    get_provider_name : UInt64
    put_provider_name : UInt64
    get_provider_type : UInt64
    put_provider_type : UInt64
    get_legacy_csp : UInt64
    put_legacy_csp : UInt64
    get_algorithm : UInt64
    put_algorithm : UInt64
    get_key_spec : UInt64
    put_key_spec : UInt64
    get_length : UInt64
    put_length : UInt64
    get_export_policy : UInt64
    put_export_policy : UInt64
    get_key_usage : UInt64
    put_key_usage : UInt64
    get_key_protection : UInt64
    put_key_protection : UInt64
    get_machine_context : UInt64
    put_machine_context : UInt64
    get_security_descriptor : UInt64
    put_security_descriptor : UInt64
    get_certificate : UInt64
    put_certificate : UInt64
    get_unique_container_name : UInt64
    get_opened : UInt64
    get_default_container : UInt64
    get_existing : UInt64
    put_existing : UInt64
    get_silent : UInt64
    put_silent : UInt64
    get_parent_window : UInt64
    put_parent_window : UInt64
    get_ui_context_message : UInt64
    put_ui_context_message : UInt64
    put_pin : UInt64
    get_friendly_name : UInt64
    put_friendly_name : UInt64
    get_description : UInt64
    put_description : UInt64
  end

  IX509PrivateKey_GUID = "728ab30c-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509PrivateKey = LibC::GUID.new(0x728ab30c_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509PrivateKey
    lpVtbl : IX509PrivateKeyVTbl*
  end

  struct IX509PrivateKey2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    open : UInt64
    create : UInt64
    close : UInt64
    delete : UInt64
    verify : UInt64
    import : UInt64
    export : UInt64
    export_public_key : UInt64
    get_container_name : UInt64
    put_container_name : UInt64
    get_container_name_prefix : UInt64
    put_container_name_prefix : UInt64
    get_reader_name : UInt64
    put_reader_name : UInt64
    get_csp_informations : UInt64
    put_csp_informations : UInt64
    get_csp_status : UInt64
    put_csp_status : UInt64
    get_provider_name : UInt64
    put_provider_name : UInt64
    get_provider_type : UInt64
    put_provider_type : UInt64
    get_legacy_csp : UInt64
    put_legacy_csp : UInt64
    get_algorithm : UInt64
    put_algorithm : UInt64
    get_key_spec : UInt64
    put_key_spec : UInt64
    get_length : UInt64
    put_length : UInt64
    get_export_policy : UInt64
    put_export_policy : UInt64
    get_key_usage : UInt64
    put_key_usage : UInt64
    get_key_protection : UInt64
    put_key_protection : UInt64
    get_machine_context : UInt64
    put_machine_context : UInt64
    get_security_descriptor : UInt64
    put_security_descriptor : UInt64
    get_certificate : UInt64
    put_certificate : UInt64
    get_unique_container_name : UInt64
    get_opened : UInt64
    get_default_container : UInt64
    get_existing : UInt64
    put_existing : UInt64
    get_silent : UInt64
    put_silent : UInt64
    get_parent_window : UInt64
    put_parent_window : UInt64
    get_ui_context_message : UInt64
    put_ui_context_message : UInt64
    put_pin : UInt64
    get_friendly_name : UInt64
    put_friendly_name : UInt64
    get_description : UInt64
    put_description : UInt64
    get_hardware_key_usage : UInt64
    put_hardware_key_usage : UInt64
    get_alternate_storage_location : UInt64
    put_alternate_storage_location : UInt64
    get_algorithm_name : UInt64
    put_algorithm_name : UInt64
    get_algorithm_parameters : UInt64
    put_algorithm_parameters : UInt64
    get_parameters_export_type : UInt64
    put_parameters_export_type : UInt64
  end

  IX509PrivateKey2_GUID = "728ab362-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509PrivateKey2 = LibC::GUID.new(0x728ab362_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509PrivateKey2
    lpVtbl : IX509PrivateKey2VTbl*
  end

  struct IX509EndorsementKeyVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_provider_name : UInt64
    put_provider_name : UInt64
    get_length : UInt64
    get_opened : UInt64
    add_certificate : UInt64
    remove_certificate : UInt64
    get_certificate_by_index : UInt64
    get_certificate_count : UInt64
    export_public_key : UInt64
    open : UInt64
    close : UInt64
  end

  IX509EndorsementKey_GUID = "b11cd855-f4c4-4fc6-b710-4422237f09e9"
  IID_IX509EndorsementKey = LibC::GUID.new(0xb11cd855_u32, 0xf4c4_u16, 0x4fc6_u16, StaticArray[0xb7_u8, 0x10_u8, 0x44_u8, 0x22_u8, 0x23_u8, 0x7f_u8, 0x9_u8, 0xe9_u8])
  struct IX509EndorsementKey
    lpVtbl : IX509EndorsementKeyVTbl*
  end

  struct IX509ExtensionVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    get_object_id : UInt64
    get_raw_data : UInt64
    get_critical : UInt64
    put_critical : UInt64
  end

  IX509Extension_GUID = "728ab30d-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509Extension = LibC::GUID.new(0x728ab30d_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509Extension
    lpVtbl : IX509ExtensionVTbl*
  end

  struct IX509ExtensionsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_item_by_index : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    add : UInt64
    remove : UInt64
    clear : UInt64
    get_index_by_object_id : UInt64
    add_range : UInt64
  end

  IX509Extensions_GUID = "728ab30e-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509Extensions = LibC::GUID.new(0x728ab30e_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509Extensions
    lpVtbl : IX509ExtensionsVTbl*
  end

  struct IX509ExtensionKeyUsageVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    get_object_id : UInt64
    get_raw_data : UInt64
    get_critical : UInt64
    put_critical : UInt64
    initialize_encode : UInt64
    initialize_decode : UInt64
    get_key_usage : UInt64
  end

  IX509ExtensionKeyUsage_GUID = "728ab30f-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509ExtensionKeyUsage = LibC::GUID.new(0x728ab30f_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509ExtensionKeyUsage
    lpVtbl : IX509ExtensionKeyUsageVTbl*
  end

  struct IX509ExtensionEnhancedKeyUsageVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    get_object_id : UInt64
    get_raw_data : UInt64
    get_critical : UInt64
    put_critical : UInt64
    initialize_encode : UInt64
    initialize_decode : UInt64
    get_enhanced_key_usage : UInt64
  end

  IX509ExtensionEnhancedKeyUsage_GUID = "728ab310-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509ExtensionEnhancedKeyUsage = LibC::GUID.new(0x728ab310_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509ExtensionEnhancedKeyUsage
    lpVtbl : IX509ExtensionEnhancedKeyUsageVTbl*
  end

  struct IX509ExtensionTemplateNameVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    get_object_id : UInt64
    get_raw_data : UInt64
    get_critical : UInt64
    put_critical : UInt64
    initialize_encode : UInt64
    initialize_decode : UInt64
    get_template_name : UInt64
  end

  IX509ExtensionTemplateName_GUID = "728ab311-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509ExtensionTemplateName = LibC::GUID.new(0x728ab311_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509ExtensionTemplateName
    lpVtbl : IX509ExtensionTemplateNameVTbl*
  end

  struct IX509ExtensionTemplateVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    get_object_id : UInt64
    get_raw_data : UInt64
    get_critical : UInt64
    put_critical : UInt64
    initialize_encode : UInt64
    initialize_decode : UInt64
    get_template_oid : UInt64
    get_major_version : UInt64
    get_minor_version : UInt64
  end

  IX509ExtensionTemplate_GUID = "728ab312-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509ExtensionTemplate = LibC::GUID.new(0x728ab312_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509ExtensionTemplate
    lpVtbl : IX509ExtensionTemplateVTbl*
  end

  struct IAlternativeNameVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize_from_string : UInt64
    initialize_from_raw_data : UInt64
    initialize_from_other_name : UInt64
    get_type : UInt64
    get_str_value : UInt64
    get_object_id : UInt64
    get_raw_data : UInt64
  end

  IAlternativeName_GUID = "728ab313-217d-11da-b2a4-000e7bbb2b09"
  IID_IAlternativeName = LibC::GUID.new(0x728ab313_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IAlternativeName
    lpVtbl : IAlternativeNameVTbl*
  end

  struct IAlternativeNamesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_item_by_index : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    add : UInt64
    remove : UInt64
    clear : UInt64
  end

  IAlternativeNames_GUID = "728ab314-217d-11da-b2a4-000e7bbb2b09"
  IID_IAlternativeNames = LibC::GUID.new(0x728ab314_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IAlternativeNames
    lpVtbl : IAlternativeNamesVTbl*
  end

  struct IX509ExtensionAlternativeNamesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    get_object_id : UInt64
    get_raw_data : UInt64
    get_critical : UInt64
    put_critical : UInt64
    initialize_encode : UInt64
    initialize_decode : UInt64
    get_alternative_names : UInt64
  end

  IX509ExtensionAlternativeNames_GUID = "728ab315-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509ExtensionAlternativeNames = LibC::GUID.new(0x728ab315_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509ExtensionAlternativeNames
    lpVtbl : IX509ExtensionAlternativeNamesVTbl*
  end

  struct IX509ExtensionBasicConstraintsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    get_object_id : UInt64
    get_raw_data : UInt64
    get_critical : UInt64
    put_critical : UInt64
    initialize_encode : UInt64
    initialize_decode : UInt64
    get_is_ca : UInt64
    get_path_len_constraint : UInt64
  end

  IX509ExtensionBasicConstraints_GUID = "728ab316-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509ExtensionBasicConstraints = LibC::GUID.new(0x728ab316_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509ExtensionBasicConstraints
    lpVtbl : IX509ExtensionBasicConstraintsVTbl*
  end

  struct IX509ExtensionSubjectKeyIdentifierVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    get_object_id : UInt64
    get_raw_data : UInt64
    get_critical : UInt64
    put_critical : UInt64
    initialize_encode : UInt64
    initialize_decode : UInt64
    get_subject_key_identifier : UInt64
  end

  IX509ExtensionSubjectKeyIdentifier_GUID = "728ab317-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509ExtensionSubjectKeyIdentifier = LibC::GUID.new(0x728ab317_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509ExtensionSubjectKeyIdentifier
    lpVtbl : IX509ExtensionSubjectKeyIdentifierVTbl*
  end

  struct IX509ExtensionAuthorityKeyIdentifierVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    get_object_id : UInt64
    get_raw_data : UInt64
    get_critical : UInt64
    put_critical : UInt64
    initialize_encode : UInt64
    initialize_decode : UInt64
    get_authority_key_identifier : UInt64
  end

  IX509ExtensionAuthorityKeyIdentifier_GUID = "728ab318-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509ExtensionAuthorityKeyIdentifier = LibC::GUID.new(0x728ab318_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509ExtensionAuthorityKeyIdentifier
    lpVtbl : IX509ExtensionAuthorityKeyIdentifierVTbl*
  end

  struct ISmimeCapabilityVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    get_object_id : UInt64
    get_bit_count : UInt64
  end

  ISmimeCapability_GUID = "728ab319-217d-11da-b2a4-000e7bbb2b09"
  IID_ISmimeCapability = LibC::GUID.new(0x728ab319_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ISmimeCapability
    lpVtbl : ISmimeCapabilityVTbl*
  end

  struct ISmimeCapabilitiesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_item_by_index : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    add : UInt64
    remove : UInt64
    clear : UInt64
    add_from_csp : UInt64
    add_available_smime_capabilities : UInt64
  end

  ISmimeCapabilities_GUID = "728ab31a-217d-11da-b2a4-000e7bbb2b09"
  IID_ISmimeCapabilities = LibC::GUID.new(0x728ab31a_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ISmimeCapabilities
    lpVtbl : ISmimeCapabilitiesVTbl*
  end

  struct IX509ExtensionSmimeCapabilitiesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    get_object_id : UInt64
    get_raw_data : UInt64
    get_critical : UInt64
    put_critical : UInt64
    initialize_encode : UInt64
    initialize_decode : UInt64
    get_smime_capabilities : UInt64
  end

  IX509ExtensionSmimeCapabilities_GUID = "728ab31b-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509ExtensionSmimeCapabilities = LibC::GUID.new(0x728ab31b_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509ExtensionSmimeCapabilities
    lpVtbl : IX509ExtensionSmimeCapabilitiesVTbl*
  end

  struct IPolicyQualifierVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize_encode : UInt64
    get_object_id : UInt64
    get_qualifier : UInt64
    get_type : UInt64
    get_raw_data : UInt64
  end

  IPolicyQualifier_GUID = "728ab31c-217d-11da-b2a4-000e7bbb2b09"
  IID_IPolicyQualifier = LibC::GUID.new(0x728ab31c_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IPolicyQualifier
    lpVtbl : IPolicyQualifierVTbl*
  end

  struct IPolicyQualifiersVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_item_by_index : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    add : UInt64
    remove : UInt64
    clear : UInt64
  end

  IPolicyQualifiers_GUID = "728ab31d-217d-11da-b2a4-000e7bbb2b09"
  IID_IPolicyQualifiers = LibC::GUID.new(0x728ab31d_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IPolicyQualifiers
    lpVtbl : IPolicyQualifiersVTbl*
  end

  struct ICertificatePolicyVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    get_object_id : UInt64
    get_policy_qualifiers : UInt64
  end

  ICertificatePolicy_GUID = "728ab31e-217d-11da-b2a4-000e7bbb2b09"
  IID_ICertificatePolicy = LibC::GUID.new(0x728ab31e_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ICertificatePolicy
    lpVtbl : ICertificatePolicyVTbl*
  end

  struct ICertificatePoliciesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_item_by_index : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    add : UInt64
    remove : UInt64
    clear : UInt64
  end

  ICertificatePolicies_GUID = "728ab31f-217d-11da-b2a4-000e7bbb2b09"
  IID_ICertificatePolicies = LibC::GUID.new(0x728ab31f_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ICertificatePolicies
    lpVtbl : ICertificatePoliciesVTbl*
  end

  struct IX509ExtensionCertificatePoliciesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    get_object_id : UInt64
    get_raw_data : UInt64
    get_critical : UInt64
    put_critical : UInt64
    initialize_encode : UInt64
    initialize_decode : UInt64
    get_policies : UInt64
  end

  IX509ExtensionCertificatePolicies_GUID = "728ab320-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509ExtensionCertificatePolicies = LibC::GUID.new(0x728ab320_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509ExtensionCertificatePolicies
    lpVtbl : IX509ExtensionCertificatePoliciesVTbl*
  end

  struct IX509ExtensionMSApplicationPoliciesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    get_object_id : UInt64
    get_raw_data : UInt64
    get_critical : UInt64
    put_critical : UInt64
    initialize_encode : UInt64
    initialize_decode : UInt64
    get_policies : UInt64
  end

  IX509ExtensionMSApplicationPolicies_GUID = "728ab321-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509ExtensionMSApplicationPolicies = LibC::GUID.new(0x728ab321_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509ExtensionMSApplicationPolicies
    lpVtbl : IX509ExtensionMSApplicationPoliciesVTbl*
  end

  struct IX509AttributeVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    get_object_id : UInt64
    get_raw_data : UInt64
  end

  IX509Attribute_GUID = "728ab322-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509Attribute = LibC::GUID.new(0x728ab322_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509Attribute
    lpVtbl : IX509AttributeVTbl*
  end

  struct IX509AttributesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_item_by_index : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    add : UInt64
    remove : UInt64
    clear : UInt64
  end

  IX509Attributes_GUID = "728ab323-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509Attributes = LibC::GUID.new(0x728ab323_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509Attributes
    lpVtbl : IX509AttributesVTbl*
  end

  struct IX509AttributeExtensionsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    get_object_id : UInt64
    get_raw_data : UInt64
    initialize_encode : UInt64
    initialize_decode : UInt64
    get_x509_extensions : UInt64
  end

  IX509AttributeExtensions_GUID = "728ab324-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509AttributeExtensions = LibC::GUID.new(0x728ab324_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509AttributeExtensions
    lpVtbl : IX509AttributeExtensionsVTbl*
  end

  struct IX509AttributeClientIdVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    get_object_id : UInt64
    get_raw_data : UInt64
    initialize_encode : UInt64
    initialize_decode : UInt64
    get_client_id : UInt64
    get_machine_dns_name : UInt64
    get_user_sam_name : UInt64
    get_process_name : UInt64
  end

  IX509AttributeClientId_GUID = "728ab325-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509AttributeClientId = LibC::GUID.new(0x728ab325_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509AttributeClientId
    lpVtbl : IX509AttributeClientIdVTbl*
  end

  struct IX509AttributeRenewalCertificateVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    get_object_id : UInt64
    get_raw_data : UInt64
    initialize_encode : UInt64
    initialize_decode : UInt64
    get_renewal_certificate : UInt64
  end

  IX509AttributeRenewalCertificate_GUID = "728ab326-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509AttributeRenewalCertificate = LibC::GUID.new(0x728ab326_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509AttributeRenewalCertificate
    lpVtbl : IX509AttributeRenewalCertificateVTbl*
  end

  struct IX509AttributeArchiveKeyVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    get_object_id : UInt64
    get_raw_data : UInt64
    initialize_encode : UInt64
    initialize_decode : UInt64
    get_encrypted_key_blob : UInt64
    get_encryption_algorithm : UInt64
    get_encryption_strength : UInt64
  end

  IX509AttributeArchiveKey_GUID = "728ab327-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509AttributeArchiveKey = LibC::GUID.new(0x728ab327_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509AttributeArchiveKey
    lpVtbl : IX509AttributeArchiveKeyVTbl*
  end

  struct IX509AttributeArchiveKeyHashVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    get_object_id : UInt64
    get_raw_data : UInt64
    initialize_encode_from_encrypted_key_blob : UInt64
    initialize_decode : UInt64
    get_encrypted_key_hash_blob : UInt64
  end

  IX509AttributeArchiveKeyHash_GUID = "728ab328-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509AttributeArchiveKeyHash = LibC::GUID.new(0x728ab328_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509AttributeArchiveKeyHash
    lpVtbl : IX509AttributeArchiveKeyHashVTbl*
  end

  struct IX509AttributeOSVersionVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    get_object_id : UInt64
    get_raw_data : UInt64
    initialize_encode : UInt64
    initialize_decode : UInt64
    get_os_version : UInt64
  end

  IX509AttributeOSVersion_GUID = "728ab32a-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509AttributeOSVersion = LibC::GUID.new(0x728ab32a_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509AttributeOSVersion
    lpVtbl : IX509AttributeOSVersionVTbl*
  end

  struct IX509AttributeCspProviderVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    get_object_id : UInt64
    get_raw_data : UInt64
    initialize_encode : UInt64
    initialize_decode : UInt64
    get_key_spec : UInt64
    get_provider_name : UInt64
    get_signature : UInt64
  end

  IX509AttributeCspProvider_GUID = "728ab32b-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509AttributeCspProvider = LibC::GUID.new(0x728ab32b_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509AttributeCspProvider
    lpVtbl : IX509AttributeCspProviderVTbl*
  end

  struct ICryptAttributeVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize_from_object_id : UInt64
    initialize_from_values : UInt64
    get_object_id : UInt64
    get_values : UInt64
  end

  ICryptAttribute_GUID = "728ab32c-217d-11da-b2a4-000e7bbb2b09"
  IID_ICryptAttribute = LibC::GUID.new(0x728ab32c_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ICryptAttribute
    lpVtbl : ICryptAttributeVTbl*
  end

  struct ICryptAttributesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_item_by_index : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    add : UInt64
    remove : UInt64
    clear : UInt64
    get_index_by_object_id : UInt64
    add_range : UInt64
  end

  ICryptAttributes_GUID = "728ab32d-217d-11da-b2a4-000e7bbb2b09"
  IID_ICryptAttributes = LibC::GUID.new(0x728ab32d_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ICryptAttributes
    lpVtbl : ICryptAttributesVTbl*
  end

  struct ICertPropertyVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize_from_certificate : UInt64
    initialize_decode : UInt64
    get_property_id : UInt64
    put_property_id : UInt64
    get_raw_data : UInt64
    remove_from_certificate : UInt64
    set_value_on_certificate : UInt64
  end

  ICertProperty_GUID = "728ab32e-217d-11da-b2a4-000e7bbb2b09"
  IID_ICertProperty = LibC::GUID.new(0x728ab32e_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ICertProperty
    lpVtbl : ICertPropertyVTbl*
  end

  struct ICertPropertiesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_item_by_index : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    add : UInt64
    remove : UInt64
    clear : UInt64
    initialize_from_certificate : UInt64
  end

  ICertProperties_GUID = "728ab32f-217d-11da-b2a4-000e7bbb2b09"
  IID_ICertProperties = LibC::GUID.new(0x728ab32f_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ICertProperties
    lpVtbl : ICertPropertiesVTbl*
  end

  struct ICertPropertyFriendlyNameVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize_from_certificate : UInt64
    initialize_decode : UInt64
    get_property_id : UInt64
    put_property_id : UInt64
    get_raw_data : UInt64
    remove_from_certificate : UInt64
    set_value_on_certificate : UInt64
    initialize : UInt64
    get_friendly_name : UInt64
  end

  ICertPropertyFriendlyName_GUID = "728ab330-217d-11da-b2a4-000e7bbb2b09"
  IID_ICertPropertyFriendlyName = LibC::GUID.new(0x728ab330_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ICertPropertyFriendlyName
    lpVtbl : ICertPropertyFriendlyNameVTbl*
  end

  struct ICertPropertyDescriptionVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize_from_certificate : UInt64
    initialize_decode : UInt64
    get_property_id : UInt64
    put_property_id : UInt64
    get_raw_data : UInt64
    remove_from_certificate : UInt64
    set_value_on_certificate : UInt64
    initialize : UInt64
    get_description : UInt64
  end

  ICertPropertyDescription_GUID = "728ab331-217d-11da-b2a4-000e7bbb2b09"
  IID_ICertPropertyDescription = LibC::GUID.new(0x728ab331_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ICertPropertyDescription
    lpVtbl : ICertPropertyDescriptionVTbl*
  end

  struct ICertPropertyAutoEnrollVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize_from_certificate : UInt64
    initialize_decode : UInt64
    get_property_id : UInt64
    put_property_id : UInt64
    get_raw_data : UInt64
    remove_from_certificate : UInt64
    set_value_on_certificate : UInt64
    initialize : UInt64
    get_template_name : UInt64
  end

  ICertPropertyAutoEnroll_GUID = "728ab332-217d-11da-b2a4-000e7bbb2b09"
  IID_ICertPropertyAutoEnroll = LibC::GUID.new(0x728ab332_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ICertPropertyAutoEnroll
    lpVtbl : ICertPropertyAutoEnrollVTbl*
  end

  struct ICertPropertyRequestOriginatorVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize_from_certificate : UInt64
    initialize_decode : UInt64
    get_property_id : UInt64
    put_property_id : UInt64
    get_raw_data : UInt64
    remove_from_certificate : UInt64
    set_value_on_certificate : UInt64
    initialize : UInt64
    initialize_from_local_request_originator : UInt64
    get_request_originator : UInt64
  end

  ICertPropertyRequestOriginator_GUID = "728ab333-217d-11da-b2a4-000e7bbb2b09"
  IID_ICertPropertyRequestOriginator = LibC::GUID.new(0x728ab333_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ICertPropertyRequestOriginator
    lpVtbl : ICertPropertyRequestOriginatorVTbl*
  end

  struct ICertPropertySHA1HashVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize_from_certificate : UInt64
    initialize_decode : UInt64
    get_property_id : UInt64
    put_property_id : UInt64
    get_raw_data : UInt64
    remove_from_certificate : UInt64
    set_value_on_certificate : UInt64
    initialize : UInt64
    get_sha1_hash : UInt64
  end

  ICertPropertySHA1Hash_GUID = "728ab334-217d-11da-b2a4-000e7bbb2b09"
  IID_ICertPropertySHA1Hash = LibC::GUID.new(0x728ab334_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ICertPropertySHA1Hash
    lpVtbl : ICertPropertySHA1HashVTbl*
  end

  struct ICertPropertyKeyProvInfoVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize_from_certificate : UInt64
    initialize_decode : UInt64
    get_property_id : UInt64
    put_property_id : UInt64
    get_raw_data : UInt64
    remove_from_certificate : UInt64
    set_value_on_certificate : UInt64
    initialize : UInt64
    get_private_key : UInt64
  end

  ICertPropertyKeyProvInfo_GUID = "728ab336-217d-11da-b2a4-000e7bbb2b09"
  IID_ICertPropertyKeyProvInfo = LibC::GUID.new(0x728ab336_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ICertPropertyKeyProvInfo
    lpVtbl : ICertPropertyKeyProvInfoVTbl*
  end

  struct ICertPropertyArchivedVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize_from_certificate : UInt64
    initialize_decode : UInt64
    get_property_id : UInt64
    put_property_id : UInt64
    get_raw_data : UInt64
    remove_from_certificate : UInt64
    set_value_on_certificate : UInt64
    initialize : UInt64
    get_archived : UInt64
  end

  ICertPropertyArchived_GUID = "728ab337-217d-11da-b2a4-000e7bbb2b09"
  IID_ICertPropertyArchived = LibC::GUID.new(0x728ab337_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ICertPropertyArchived
    lpVtbl : ICertPropertyArchivedVTbl*
  end

  struct ICertPropertyBackedUpVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize_from_certificate : UInt64
    initialize_decode : UInt64
    get_property_id : UInt64
    put_property_id : UInt64
    get_raw_data : UInt64
    remove_from_certificate : UInt64
    set_value_on_certificate : UInt64
    initialize_from_current_time : UInt64
    initialize : UInt64
    get_backed_up_value : UInt64
    get_backed_up_time : UInt64
  end

  ICertPropertyBackedUp_GUID = "728ab338-217d-11da-b2a4-000e7bbb2b09"
  IID_ICertPropertyBackedUp = LibC::GUID.new(0x728ab338_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ICertPropertyBackedUp
    lpVtbl : ICertPropertyBackedUpVTbl*
  end

  struct ICertPropertyEnrollmentVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize_from_certificate : UInt64
    initialize_decode : UInt64
    get_property_id : UInt64
    put_property_id : UInt64
    get_raw_data : UInt64
    remove_from_certificate : UInt64
    set_value_on_certificate : UInt64
    initialize : UInt64
    get_request_id : UInt64
    get_ca_dns_name : UInt64
    get_ca_name : UInt64
    get_friendly_name : UInt64
  end

  ICertPropertyEnrollment_GUID = "728ab339-217d-11da-b2a4-000e7bbb2b09"
  IID_ICertPropertyEnrollment = LibC::GUID.new(0x728ab339_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ICertPropertyEnrollment
    lpVtbl : ICertPropertyEnrollmentVTbl*
  end

  struct ICertPropertyRenewalVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize_from_certificate : UInt64
    initialize_decode : UInt64
    get_property_id : UInt64
    put_property_id : UInt64
    get_raw_data : UInt64
    remove_from_certificate : UInt64
    set_value_on_certificate : UInt64
    initialize : UInt64
    initialize_from_certificate_hash : UInt64
    get_renewal : UInt64
  end

  ICertPropertyRenewal_GUID = "728ab33a-217d-11da-b2a4-000e7bbb2b09"
  IID_ICertPropertyRenewal = LibC::GUID.new(0x728ab33a_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ICertPropertyRenewal
    lpVtbl : ICertPropertyRenewalVTbl*
  end

  struct ICertPropertyArchivedKeyHashVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize_from_certificate : UInt64
    initialize_decode : UInt64
    get_property_id : UInt64
    put_property_id : UInt64
    get_raw_data : UInt64
    remove_from_certificate : UInt64
    set_value_on_certificate : UInt64
    initialize : UInt64
    get_archived_key_hash : UInt64
  end

  ICertPropertyArchivedKeyHash_GUID = "728ab33b-217d-11da-b2a4-000e7bbb2b09"
  IID_ICertPropertyArchivedKeyHash = LibC::GUID.new(0x728ab33b_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ICertPropertyArchivedKeyHash
    lpVtbl : ICertPropertyArchivedKeyHashVTbl*
  end

  struct ICertPropertyEnrollmentPolicyServerVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize_from_certificate : UInt64
    initialize_decode : UInt64
    get_property_id : UInt64
    put_property_id : UInt64
    get_raw_data : UInt64
    remove_from_certificate : UInt64
    set_value_on_certificate : UInt64
    initialize : UInt64
    get_policy_server_url : UInt64
    get_policy_server_id : UInt64
    get_enrollment_server_url : UInt64
    get_request_id_string : UInt64
    get_property_flags : UInt64
    get_url_flags : UInt64
    get_authentication : UInt64
    get_enrollment_server_authentication : UInt64
  end

  ICertPropertyEnrollmentPolicyServer_GUID = "728ab34a-217d-11da-b2a4-000e7bbb2b09"
  IID_ICertPropertyEnrollmentPolicyServer = LibC::GUID.new(0x728ab34a_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ICertPropertyEnrollmentPolicyServer
    lpVtbl : ICertPropertyEnrollmentPolicyServerVTbl*
  end

  struct IX509SignatureInformationVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_hash_algorithm : UInt64
    put_hash_algorithm : UInt64
    get_public_key_algorithm : UInt64
    put_public_key_algorithm : UInt64
    get_parameters : UInt64
    put_parameters : UInt64
    get_alternate_signature_algorithm : UInt64
    put_alternate_signature_algorithm : UInt64
    get_alternate_signature_algorithm_set : UInt64
    get_null_signed : UInt64
    put_null_signed : UInt64
    get_signature_algorithm : UInt64
    set_default_values : UInt64
  end

  IX509SignatureInformation_GUID = "728ab33c-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509SignatureInformation = LibC::GUID.new(0x728ab33c_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509SignatureInformation
    lpVtbl : IX509SignatureInformationVTbl*
  end

  struct ISignerCertificateVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    get_certificate : UInt64
    get_private_key : UInt64
    get_silent : UInt64
    put_silent : UInt64
    get_parent_window : UInt64
    put_parent_window : UInt64
    get_ui_context_message : UInt64
    put_ui_context_message : UInt64
    put_pin : UInt64
    get_signature_information : UInt64
  end

  ISignerCertificate_GUID = "728ab33d-217d-11da-b2a4-000e7bbb2b09"
  IID_ISignerCertificate = LibC::GUID.new(0x728ab33d_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ISignerCertificate
    lpVtbl : ISignerCertificateVTbl*
  end

  struct ISignerCertificatesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_item_by_index : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    add : UInt64
    remove : UInt64
    clear : UInt64
    find : UInt64
  end

  ISignerCertificates_GUID = "728ab33e-217d-11da-b2a4-000e7bbb2b09"
  IID_ISignerCertificates = LibC::GUID.new(0x728ab33e_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ISignerCertificates
    lpVtbl : ISignerCertificatesVTbl*
  end

  struct IX509NameValuePairVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    get_value : UInt64
    get_name : UInt64
  end

  IX509NameValuePair_GUID = "728ab33f-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509NameValuePair = LibC::GUID.new(0x728ab33f_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509NameValuePair
    lpVtbl : IX509NameValuePairVTbl*
  end

  struct IX509NameValuePairsVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_item_by_index : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    add : UInt64
    remove : UInt64
    clear : UInt64
  end

  IX509NameValuePairs_GUID = "728ab340-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509NameValuePairs = LibC::GUID.new(0x728ab340_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509NameValuePairs
    lpVtbl : IX509NameValuePairsVTbl*
  end

  struct IX509CertificateTemplateVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_property : UInt64
  end

  IX509CertificateTemplate_GUID = "54244a13-555a-4e22-896d-1b0e52f76406"
  IID_IX509CertificateTemplate = LibC::GUID.new(0x54244a13_u32, 0x555a_u16, 0x4e22_u16, StaticArray[0x89_u8, 0x6d_u8, 0x1b_u8, 0xe_u8, 0x52_u8, 0xf7_u8, 0x64_u8, 0x6_u8])
  struct IX509CertificateTemplate
    lpVtbl : IX509CertificateTemplateVTbl*
  end

  struct IX509CertificateTemplatesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_item_by_index : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    add : UInt64
    remove : UInt64
    clear : UInt64
    get_item_by_name : UInt64
    get_item_by_oid : UInt64
  end

  IX509CertificateTemplates_GUID = "13b79003-2181-11da-b2a4-000e7bbb2b09"
  IID_IX509CertificateTemplates = LibC::GUID.new(0x13b79003_u32, 0x2181_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509CertificateTemplates
    lpVtbl : IX509CertificateTemplatesVTbl*
  end

  struct IX509CertificateTemplateWritableVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    commit : UInt64
    get_property : UInt64
    put_property : UInt64
    get_template : UInt64
  end

  IX509CertificateTemplateWritable_GUID = "f49466a7-395a-4e9e-b6e7-32b331600dc0"
  IID_IX509CertificateTemplateWritable = LibC::GUID.new(0xf49466a7_u32, 0x395a_u16, 0x4e9e_u16, StaticArray[0xb6_u8, 0xe7_u8, 0x32_u8, 0xb3_u8, 0x31_u8, 0x60_u8, 0xd_u8, 0xc0_u8])
  struct IX509CertificateTemplateWritable
    lpVtbl : IX509CertificateTemplateWritableVTbl*
  end

  struct ICertificationAuthorityVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_property : UInt64
  end

  ICertificationAuthority_GUID = "835d1f61-1e95-4bc8-b4d3-976c42b968f7"
  IID_ICertificationAuthority = LibC::GUID.new(0x835d1f61_u32, 0x1e95_u16, 0x4bc8_u16, StaticArray[0xb4_u8, 0xd3_u8, 0x97_u8, 0x6c_u8, 0x42_u8, 0xb9_u8, 0x68_u8, 0xf7_u8])
  struct ICertificationAuthority
    lpVtbl : ICertificationAuthorityVTbl*
  end

  struct ICertificationAuthoritiesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_item_by_index : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    add : UInt64
    remove : UInt64
    clear : UInt64
    compute_site_costs : UInt64
    get_item_by_name : UInt64
  end

  ICertificationAuthorities_GUID = "13b79005-2181-11da-b2a4-000e7bbb2b09"
  IID_ICertificationAuthorities = LibC::GUID.new(0x13b79005_u32, 0x2181_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct ICertificationAuthorities
    lpVtbl : ICertificationAuthoritiesVTbl*
  end

  struct IX509EnrollmentPolicyServerVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    load_policy : UInt64
    get_templates : UInt64
    get_c_as_for_template : UInt64
    get_c_as : UInt64
    validate : UInt64
    get_custom_oids : UInt64
    get_next_update_time : UInt64
    get_last_update_time : UInt64
    get_policy_server_url : UInt64
    get_policy_server_id : UInt64
    get_friendly_name : UInt64
    get_is_default_cep : UInt64
    get_use_client_id : UInt64
    get_allow_un_trusted_ca : UInt64
    get_cache_path : UInt64
    get_cache_dir : UInt64
    get_auth_flags : UInt64
    set_credential : UInt64
    query_changes : UInt64
    initialize_import : UInt64
    export : UInt64
    get_cost : UInt64
    put_cost : UInt64
  end

  IX509EnrollmentPolicyServer_GUID = "13b79026-2181-11da-b2a4-000e7bbb2b09"
  IID_IX509EnrollmentPolicyServer = LibC::GUID.new(0x13b79026_u32, 0x2181_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509EnrollmentPolicyServer
    lpVtbl : IX509EnrollmentPolicyServerVTbl*
  end

  struct IX509PolicyServerUrlVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    get_url : UInt64
    put_url : UInt64
    get_default : UInt64
    put_default : UInt64
    get_flags : UInt64
    put_flags : UInt64
    get_auth_flags : UInt64
    put_auth_flags : UInt64
    get_cost : UInt64
    put_cost : UInt64
    get_string_property : UInt64
    set_string_property : UInt64
    update_registry : UInt64
    remove_from_registry : UInt64
  end

  IX509PolicyServerUrl_GUID = "884e204a-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509PolicyServerUrl = LibC::GUID.new(0x884e204a_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509PolicyServerUrl
    lpVtbl : IX509PolicyServerUrlVTbl*
  end

  struct IX509PolicyServerListManagerVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_item_by_index : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    add : UInt64
    remove : UInt64
    clear : UInt64
    initialize : UInt64
  end

  IX509PolicyServerListManager_GUID = "884e204b-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509PolicyServerListManager = LibC::GUID.new(0x884e204b_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509PolicyServerListManager
    lpVtbl : IX509PolicyServerListManagerVTbl*
  end

  struct IX509CertificateRequestVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    encode : UInt64
    reset_for_encode : UInt64
    get_inner_request : UInt64
    get_type : UInt64
    get_enrollment_context : UInt64
    get_silent : UInt64
    put_silent : UInt64
    get_parent_window : UInt64
    put_parent_window : UInt64
    get_ui_context_message : UInt64
    put_ui_context_message : UInt64
    get_suppress_defaults : UInt64
    put_suppress_defaults : UInt64
    get_renewal_certificate : UInt64
    put_renewal_certificate : UInt64
    get_client_id : UInt64
    put_client_id : UInt64
    get_csp_informations : UInt64
    put_csp_informations : UInt64
    get_hash_algorithm : UInt64
    put_hash_algorithm : UInt64
    get_alternate_signature_algorithm : UInt64
    put_alternate_signature_algorithm : UInt64
    get_raw_data : UInt64
  end

  IX509CertificateRequest_GUID = "728ab341-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509CertificateRequest = LibC::GUID.new(0x728ab341_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509CertificateRequest
    lpVtbl : IX509CertificateRequestVTbl*
  end

  struct IX509CertificateRequestPkcs10VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    encode : UInt64
    reset_for_encode : UInt64
    get_inner_request : UInt64
    get_type : UInt64
    get_enrollment_context : UInt64
    get_silent : UInt64
    put_silent : UInt64
    get_parent_window : UInt64
    put_parent_window : UInt64
    get_ui_context_message : UInt64
    put_ui_context_message : UInt64
    get_suppress_defaults : UInt64
    put_suppress_defaults : UInt64
    get_renewal_certificate : UInt64
    put_renewal_certificate : UInt64
    get_client_id : UInt64
    put_client_id : UInt64
    get_csp_informations : UInt64
    put_csp_informations : UInt64
    get_hash_algorithm : UInt64
    put_hash_algorithm : UInt64
    get_alternate_signature_algorithm : UInt64
    put_alternate_signature_algorithm : UInt64
    get_raw_data : UInt64
    initialize_from_template_name : UInt64
    initialize_from_private_key : UInt64
    initialize_from_public_key : UInt64
    initialize_from_certificate : UInt64
    initialize_decode : UInt64
    check_signature : UInt64
    is_smart_card : UInt64
    get_template_object_id : UInt64
    get_public_key : UInt64
    get_private_key : UInt64
    get_null_signed : UInt64
    get_reuse_key : UInt64
    get_old_certificate : UInt64
    get_subject : UInt64
    put_subject : UInt64
    get_csp_statuses : UInt64
    get_smime_capabilities : UInt64
    put_smime_capabilities : UInt64
    get_signature_information : UInt64
    get_key_container_name_prefix : UInt64
    put_key_container_name_prefix : UInt64
    get_crypt_attributes : UInt64
    get_x509_extensions : UInt64
    get_critical_extensions : UInt64
    get_suppress_oids : UInt64
    get_raw_data_to_be_signed : UInt64
    get_signature : UInt64
    get_csp_statuses2 : UInt64
  end

  IX509CertificateRequestPkcs10_GUID = "728ab342-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509CertificateRequestPkcs10 = LibC::GUID.new(0x728ab342_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509CertificateRequestPkcs10
    lpVtbl : IX509CertificateRequestPkcs10VTbl*
  end

  struct IX509CertificateRequestPkcs10V2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    encode : UInt64
    reset_for_encode : UInt64
    get_inner_request : UInt64
    get_type : UInt64
    get_enrollment_context : UInt64
    get_silent : UInt64
    put_silent : UInt64
    get_parent_window : UInt64
    put_parent_window : UInt64
    get_ui_context_message : UInt64
    put_ui_context_message : UInt64
    get_suppress_defaults : UInt64
    put_suppress_defaults : UInt64
    get_renewal_certificate : UInt64
    put_renewal_certificate : UInt64
    get_client_id : UInt64
    put_client_id : UInt64
    get_csp_informations : UInt64
    put_csp_informations : UInt64
    get_hash_algorithm : UInt64
    put_hash_algorithm : UInt64
    get_alternate_signature_algorithm : UInt64
    put_alternate_signature_algorithm : UInt64
    get_raw_data : UInt64
    initialize_from_template_name : UInt64
    initialize_from_private_key : UInt64
    initialize_from_public_key : UInt64
    initialize_from_certificate : UInt64
    initialize_decode : UInt64
    check_signature : UInt64
    is_smart_card : UInt64
    get_template_object_id : UInt64
    get_public_key : UInt64
    get_private_key : UInt64
    get_null_signed : UInt64
    get_reuse_key : UInt64
    get_old_certificate : UInt64
    get_subject : UInt64
    put_subject : UInt64
    get_csp_statuses : UInt64
    get_smime_capabilities : UInt64
    put_smime_capabilities : UInt64
    get_signature_information : UInt64
    get_key_container_name_prefix : UInt64
    put_key_container_name_prefix : UInt64
    get_crypt_attributes : UInt64
    get_x509_extensions : UInt64
    get_critical_extensions : UInt64
    get_suppress_oids : UInt64
    get_raw_data_to_be_signed : UInt64
    get_signature : UInt64
    get_csp_statuses2 : UInt64
    initialize_from_template : UInt64
    initialize_from_private_key_template : UInt64
    initialize_from_public_key_template : UInt64
    get_policy_server : UInt64
    get_template : UInt64
  end

  IX509CertificateRequestPkcs10V2_GUID = "728ab35b-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509CertificateRequestPkcs10V2 = LibC::GUID.new(0x728ab35b_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509CertificateRequestPkcs10V2
    lpVtbl : IX509CertificateRequestPkcs10V2VTbl*
  end

  struct IX509CertificateRequestPkcs10V3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    encode : UInt64
    reset_for_encode : UInt64
    get_inner_request : UInt64
    get_type : UInt64
    get_enrollment_context : UInt64
    get_silent : UInt64
    put_silent : UInt64
    get_parent_window : UInt64
    put_parent_window : UInt64
    get_ui_context_message : UInt64
    put_ui_context_message : UInt64
    get_suppress_defaults : UInt64
    put_suppress_defaults : UInt64
    get_renewal_certificate : UInt64
    put_renewal_certificate : UInt64
    get_client_id : UInt64
    put_client_id : UInt64
    get_csp_informations : UInt64
    put_csp_informations : UInt64
    get_hash_algorithm : UInt64
    put_hash_algorithm : UInt64
    get_alternate_signature_algorithm : UInt64
    put_alternate_signature_algorithm : UInt64
    get_raw_data : UInt64
    initialize_from_template_name : UInt64
    initialize_from_private_key : UInt64
    initialize_from_public_key : UInt64
    initialize_from_certificate : UInt64
    initialize_decode : UInt64
    check_signature : UInt64
    is_smart_card : UInt64
    get_template_object_id : UInt64
    get_public_key : UInt64
    get_private_key : UInt64
    get_null_signed : UInt64
    get_reuse_key : UInt64
    get_old_certificate : UInt64
    get_subject : UInt64
    put_subject : UInt64
    get_csp_statuses : UInt64
    get_smime_capabilities : UInt64
    put_smime_capabilities : UInt64
    get_signature_information : UInt64
    get_key_container_name_prefix : UInt64
    put_key_container_name_prefix : UInt64
    get_crypt_attributes : UInt64
    get_x509_extensions : UInt64
    get_critical_extensions : UInt64
    get_suppress_oids : UInt64
    get_raw_data_to_be_signed : UInt64
    get_signature : UInt64
    get_csp_statuses2 : UInt64
    initialize_from_template : UInt64
    initialize_from_private_key_template : UInt64
    initialize_from_public_key_template : UInt64
    get_policy_server : UInt64
    get_template : UInt64
    get_attest_private_key : UInt64
    put_attest_private_key : UInt64
    get_attestation_encryption_certificate : UInt64
    put_attestation_encryption_certificate : UInt64
    get_encryption_algorithm : UInt64
    put_encryption_algorithm : UInt64
    get_encryption_strength : UInt64
    put_encryption_strength : UInt64
    get_challenge_password : UInt64
    put_challenge_password : UInt64
    get_name_value_pairs : UInt64
  end

  IX509CertificateRequestPkcs10V3_GUID = "54ea9942-3d66-4530-b76e-7c9170d3ec52"
  IID_IX509CertificateRequestPkcs10V3 = LibC::GUID.new(0x54ea9942_u32, 0x3d66_u16, 0x4530_u16, StaticArray[0xb7_u8, 0x6e_u8, 0x7c_u8, 0x91_u8, 0x70_u8, 0xd3_u8, 0xec_u8, 0x52_u8])
  struct IX509CertificateRequestPkcs10V3
    lpVtbl : IX509CertificateRequestPkcs10V3VTbl*
  end

  struct IX509CertificateRequestPkcs10V4VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    encode : UInt64
    reset_for_encode : UInt64
    get_inner_request : UInt64
    get_type : UInt64
    get_enrollment_context : UInt64
    get_silent : UInt64
    put_silent : UInt64
    get_parent_window : UInt64
    put_parent_window : UInt64
    get_ui_context_message : UInt64
    put_ui_context_message : UInt64
    get_suppress_defaults : UInt64
    put_suppress_defaults : UInt64
    get_renewal_certificate : UInt64
    put_renewal_certificate : UInt64
    get_client_id : UInt64
    put_client_id : UInt64
    get_csp_informations : UInt64
    put_csp_informations : UInt64
    get_hash_algorithm : UInt64
    put_hash_algorithm : UInt64
    get_alternate_signature_algorithm : UInt64
    put_alternate_signature_algorithm : UInt64
    get_raw_data : UInt64
    initialize_from_template_name : UInt64
    initialize_from_private_key : UInt64
    initialize_from_public_key : UInt64
    initialize_from_certificate : UInt64
    initialize_decode : UInt64
    check_signature : UInt64
    is_smart_card : UInt64
    get_template_object_id : UInt64
    get_public_key : UInt64
    get_private_key : UInt64
    get_null_signed : UInt64
    get_reuse_key : UInt64
    get_old_certificate : UInt64
    get_subject : UInt64
    put_subject : UInt64
    get_csp_statuses : UInt64
    get_smime_capabilities : UInt64
    put_smime_capabilities : UInt64
    get_signature_information : UInt64
    get_key_container_name_prefix : UInt64
    put_key_container_name_prefix : UInt64
    get_crypt_attributes : UInt64
    get_x509_extensions : UInt64
    get_critical_extensions : UInt64
    get_suppress_oids : UInt64
    get_raw_data_to_be_signed : UInt64
    get_signature : UInt64
    get_csp_statuses2 : UInt64
    initialize_from_template : UInt64
    initialize_from_private_key_template : UInt64
    initialize_from_public_key_template : UInt64
    get_policy_server : UInt64
    get_template : UInt64
    get_attest_private_key : UInt64
    put_attest_private_key : UInt64
    get_attestation_encryption_certificate : UInt64
    put_attestation_encryption_certificate : UInt64
    get_encryption_algorithm : UInt64
    put_encryption_algorithm : UInt64
    get_encryption_strength : UInt64
    put_encryption_strength : UInt64
    get_challenge_password : UInt64
    put_challenge_password : UInt64
    get_name_value_pairs : UInt64
    get_claim_type : UInt64
    put_claim_type : UInt64
    get_attest_private_key_preferred : UInt64
    put_attest_private_key_preferred : UInt64
  end

  IX509CertificateRequestPkcs10V4_GUID = "728ab363-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509CertificateRequestPkcs10V4 = LibC::GUID.new(0x728ab363_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509CertificateRequestPkcs10V4
    lpVtbl : IX509CertificateRequestPkcs10V4VTbl*
  end

  struct IX509CertificateRequestCertificateVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    encode : UInt64
    reset_for_encode : UInt64
    get_inner_request : UInt64
    get_type : UInt64
    get_enrollment_context : UInt64
    get_silent : UInt64
    put_silent : UInt64
    get_parent_window : UInt64
    put_parent_window : UInt64
    get_ui_context_message : UInt64
    put_ui_context_message : UInt64
    get_suppress_defaults : UInt64
    put_suppress_defaults : UInt64
    get_renewal_certificate : UInt64
    put_renewal_certificate : UInt64
    get_client_id : UInt64
    put_client_id : UInt64
    get_csp_informations : UInt64
    put_csp_informations : UInt64
    get_hash_algorithm : UInt64
    put_hash_algorithm : UInt64
    get_alternate_signature_algorithm : UInt64
    put_alternate_signature_algorithm : UInt64
    get_raw_data : UInt64
    initialize_from_template_name : UInt64
    initialize_from_private_key : UInt64
    initialize_from_public_key : UInt64
    initialize_from_certificate : UInt64
    initialize_decode : UInt64
    check_signature : UInt64
    is_smart_card : UInt64
    get_template_object_id : UInt64
    get_public_key : UInt64
    get_private_key : UInt64
    get_null_signed : UInt64
    get_reuse_key : UInt64
    get_old_certificate : UInt64
    get_subject : UInt64
    put_subject : UInt64
    get_csp_statuses : UInt64
    get_smime_capabilities : UInt64
    put_smime_capabilities : UInt64
    get_signature_information : UInt64
    get_key_container_name_prefix : UInt64
    put_key_container_name_prefix : UInt64
    get_crypt_attributes : UInt64
    get_x509_extensions : UInt64
    get_critical_extensions : UInt64
    get_suppress_oids : UInt64
    get_raw_data_to_be_signed : UInt64
    get_signature : UInt64
    get_csp_statuses2 : UInt64
    check_public_key_signature : UInt64
    get_issuer : UInt64
    put_issuer : UInt64
    get_not_before : UInt64
    put_not_before : UInt64
    get_not_after : UInt64
    put_not_after : UInt64
    get_serial_number : UInt64
    put_serial_number : UInt64
    get_signer_certificate : UInt64
    put_signer_certificate : UInt64
  end

  IX509CertificateRequestCertificate_GUID = "728ab343-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509CertificateRequestCertificate = LibC::GUID.new(0x728ab343_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509CertificateRequestCertificate
    lpVtbl : IX509CertificateRequestCertificateVTbl*
  end

  struct IX509CertificateRequestCertificate2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    encode : UInt64
    reset_for_encode : UInt64
    get_inner_request : UInt64
    get_type : UInt64
    get_enrollment_context : UInt64
    get_silent : UInt64
    put_silent : UInt64
    get_parent_window : UInt64
    put_parent_window : UInt64
    get_ui_context_message : UInt64
    put_ui_context_message : UInt64
    get_suppress_defaults : UInt64
    put_suppress_defaults : UInt64
    get_renewal_certificate : UInt64
    put_renewal_certificate : UInt64
    get_client_id : UInt64
    put_client_id : UInt64
    get_csp_informations : UInt64
    put_csp_informations : UInt64
    get_hash_algorithm : UInt64
    put_hash_algorithm : UInt64
    get_alternate_signature_algorithm : UInt64
    put_alternate_signature_algorithm : UInt64
    get_raw_data : UInt64
    initialize_from_template_name : UInt64
    initialize_from_private_key : UInt64
    initialize_from_public_key : UInt64
    initialize_from_certificate : UInt64
    initialize_decode : UInt64
    check_signature : UInt64
    is_smart_card : UInt64
    get_template_object_id : UInt64
    get_public_key : UInt64
    get_private_key : UInt64
    get_null_signed : UInt64
    get_reuse_key : UInt64
    get_old_certificate : UInt64
    get_subject : UInt64
    put_subject : UInt64
    get_csp_statuses : UInt64
    get_smime_capabilities : UInt64
    put_smime_capabilities : UInt64
    get_signature_information : UInt64
    get_key_container_name_prefix : UInt64
    put_key_container_name_prefix : UInt64
    get_crypt_attributes : UInt64
    get_x509_extensions : UInt64
    get_critical_extensions : UInt64
    get_suppress_oids : UInt64
    get_raw_data_to_be_signed : UInt64
    get_signature : UInt64
    get_csp_statuses2 : UInt64
    check_public_key_signature : UInt64
    get_issuer : UInt64
    put_issuer : UInt64
    get_not_before : UInt64
    put_not_before : UInt64
    get_not_after : UInt64
    put_not_after : UInt64
    get_serial_number : UInt64
    put_serial_number : UInt64
    get_signer_certificate : UInt64
    put_signer_certificate : UInt64
    initialize_from_template : UInt64
    initialize_from_private_key_template : UInt64
    get_policy_server : UInt64
    get_template : UInt64
  end

  IX509CertificateRequestCertificate2_GUID = "728ab35a-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509CertificateRequestCertificate2 = LibC::GUID.new(0x728ab35a_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509CertificateRequestCertificate2
    lpVtbl : IX509CertificateRequestCertificate2VTbl*
  end

  struct IX509CertificateRequestPkcs7VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    encode : UInt64
    reset_for_encode : UInt64
    get_inner_request : UInt64
    get_type : UInt64
    get_enrollment_context : UInt64
    get_silent : UInt64
    put_silent : UInt64
    get_parent_window : UInt64
    put_parent_window : UInt64
    get_ui_context_message : UInt64
    put_ui_context_message : UInt64
    get_suppress_defaults : UInt64
    put_suppress_defaults : UInt64
    get_renewal_certificate : UInt64
    put_renewal_certificate : UInt64
    get_client_id : UInt64
    put_client_id : UInt64
    get_csp_informations : UInt64
    put_csp_informations : UInt64
    get_hash_algorithm : UInt64
    put_hash_algorithm : UInt64
    get_alternate_signature_algorithm : UInt64
    put_alternate_signature_algorithm : UInt64
    get_raw_data : UInt64
    initialize_from_template_name : UInt64
    initialize_from_certificate : UInt64
    initialize_from_inner_request : UInt64
    initialize_decode : UInt64
    get_requester_name : UInt64
    put_requester_name : UInt64
    get_signer_certificate : UInt64
    put_signer_certificate : UInt64
  end

  IX509CertificateRequestPkcs7_GUID = "728ab344-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509CertificateRequestPkcs7 = LibC::GUID.new(0x728ab344_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509CertificateRequestPkcs7
    lpVtbl : IX509CertificateRequestPkcs7VTbl*
  end

  struct IX509CertificateRequestPkcs7V2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    encode : UInt64
    reset_for_encode : UInt64
    get_inner_request : UInt64
    get_type : UInt64
    get_enrollment_context : UInt64
    get_silent : UInt64
    put_silent : UInt64
    get_parent_window : UInt64
    put_parent_window : UInt64
    get_ui_context_message : UInt64
    put_ui_context_message : UInt64
    get_suppress_defaults : UInt64
    put_suppress_defaults : UInt64
    get_renewal_certificate : UInt64
    put_renewal_certificate : UInt64
    get_client_id : UInt64
    put_client_id : UInt64
    get_csp_informations : UInt64
    put_csp_informations : UInt64
    get_hash_algorithm : UInt64
    put_hash_algorithm : UInt64
    get_alternate_signature_algorithm : UInt64
    put_alternate_signature_algorithm : UInt64
    get_raw_data : UInt64
    initialize_from_template_name : UInt64
    initialize_from_certificate : UInt64
    initialize_from_inner_request : UInt64
    initialize_decode : UInt64
    get_requester_name : UInt64
    put_requester_name : UInt64
    get_signer_certificate : UInt64
    put_signer_certificate : UInt64
    initialize_from_template : UInt64
    get_policy_server : UInt64
    get_template : UInt64
    check_certificate_signature : UInt64
  end

  IX509CertificateRequestPkcs7V2_GUID = "728ab35c-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509CertificateRequestPkcs7V2 = LibC::GUID.new(0x728ab35c_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509CertificateRequestPkcs7V2
    lpVtbl : IX509CertificateRequestPkcs7V2VTbl*
  end

  struct IX509CertificateRequestCmcVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    encode : UInt64
    reset_for_encode : UInt64
    get_inner_request : UInt64
    get_type : UInt64
    get_enrollment_context : UInt64
    get_silent : UInt64
    put_silent : UInt64
    get_parent_window : UInt64
    put_parent_window : UInt64
    get_ui_context_message : UInt64
    put_ui_context_message : UInt64
    get_suppress_defaults : UInt64
    put_suppress_defaults : UInt64
    get_renewal_certificate : UInt64
    put_renewal_certificate : UInt64
    get_client_id : UInt64
    put_client_id : UInt64
    get_csp_informations : UInt64
    put_csp_informations : UInt64
    get_hash_algorithm : UInt64
    put_hash_algorithm : UInt64
    get_alternate_signature_algorithm : UInt64
    put_alternate_signature_algorithm : UInt64
    get_raw_data : UInt64
    initialize_from_template_name : UInt64
    initialize_from_certificate : UInt64
    initialize_from_inner_request : UInt64
    initialize_decode : UInt64
    get_requester_name : UInt64
    put_requester_name : UInt64
    get_signer_certificate : UInt64
    put_signer_certificate : UInt64
    initialize_from_inner_request_template_name : UInt64
    get_template_object_id : UInt64
    get_null_signed : UInt64
    get_crypt_attributes : UInt64
    get_name_value_pairs : UInt64
    get_x509_extensions : UInt64
    get_critical_extensions : UInt64
    get_suppress_oids : UInt64
    get_transaction_id : UInt64
    put_transaction_id : UInt64
    get_sender_nonce : UInt64
    put_sender_nonce : UInt64
    get_signature_information : UInt64
    get_archive_private_key : UInt64
    put_archive_private_key : UInt64
    get_key_archival_certificate : UInt64
    put_key_archival_certificate : UInt64
    get_encryption_algorithm : UInt64
    put_encryption_algorithm : UInt64
    get_encryption_strength : UInt64
    put_encryption_strength : UInt64
    get_encrypted_key_hash : UInt64
    get_signer_certificates : UInt64
  end

  IX509CertificateRequestCmc_GUID = "728ab345-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509CertificateRequestCmc = LibC::GUID.new(0x728ab345_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509CertificateRequestCmc
    lpVtbl : IX509CertificateRequestCmcVTbl*
  end

  struct IX509CertificateRequestCmc2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    encode : UInt64
    reset_for_encode : UInt64
    get_inner_request : UInt64
    get_type : UInt64
    get_enrollment_context : UInt64
    get_silent : UInt64
    put_silent : UInt64
    get_parent_window : UInt64
    put_parent_window : UInt64
    get_ui_context_message : UInt64
    put_ui_context_message : UInt64
    get_suppress_defaults : UInt64
    put_suppress_defaults : UInt64
    get_renewal_certificate : UInt64
    put_renewal_certificate : UInt64
    get_client_id : UInt64
    put_client_id : UInt64
    get_csp_informations : UInt64
    put_csp_informations : UInt64
    get_hash_algorithm : UInt64
    put_hash_algorithm : UInt64
    get_alternate_signature_algorithm : UInt64
    put_alternate_signature_algorithm : UInt64
    get_raw_data : UInt64
    initialize_from_template_name : UInt64
    initialize_from_certificate : UInt64
    initialize_from_inner_request : UInt64
    initialize_decode : UInt64
    get_requester_name : UInt64
    put_requester_name : UInt64
    get_signer_certificate : UInt64
    put_signer_certificate : UInt64
    initialize_from_inner_request_template_name : UInt64
    get_template_object_id : UInt64
    get_null_signed : UInt64
    get_crypt_attributes : UInt64
    get_name_value_pairs : UInt64
    get_x509_extensions : UInt64
    get_critical_extensions : UInt64
    get_suppress_oids : UInt64
    get_transaction_id : UInt64
    put_transaction_id : UInt64
    get_sender_nonce : UInt64
    put_sender_nonce : UInt64
    get_signature_information : UInt64
    get_archive_private_key : UInt64
    put_archive_private_key : UInt64
    get_key_archival_certificate : UInt64
    put_key_archival_certificate : UInt64
    get_encryption_algorithm : UInt64
    put_encryption_algorithm : UInt64
    get_encryption_strength : UInt64
    put_encryption_strength : UInt64
    get_encrypted_key_hash : UInt64
    get_signer_certificates : UInt64
    initialize_from_template : UInt64
    initialize_from_inner_request_template : UInt64
    get_policy_server : UInt64
    get_template : UInt64
    check_signature : UInt64
    check_certificate_signature : UInt64
  end

  IX509CertificateRequestCmc2_GUID = "728ab35d-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509CertificateRequestCmc2 = LibC::GUID.new(0x728ab35d_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509CertificateRequestCmc2
    lpVtbl : IX509CertificateRequestCmc2VTbl*
  end

  struct IX509EnrollmentVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    initialize_from_template_name : UInt64
    initialize_from_request : UInt64
    create_request : UInt64
    enroll : UInt64
    install_response : UInt64
    create_pfx : UInt64
    get_request : UInt64
    get_silent : UInt64
    put_silent : UInt64
    get_parent_window : UInt64
    put_parent_window : UInt64
    get_name_value_pairs : UInt64
    get_enrollment_context : UInt64
    get_status : UInt64
    get_certificate : UInt64
    get_response : UInt64
    get_certificate_friendly_name : UInt64
    put_certificate_friendly_name : UInt64
    get_certificate_description : UInt64
    put_certificate_description : UInt64
    get_request_id : UInt64
    get_ca_config_string : UInt64
  end

  IX509Enrollment_GUID = "728ab346-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509Enrollment = LibC::GUID.new(0x728ab346_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509Enrollment
    lpVtbl : IX509EnrollmentVTbl*
  end

  struct IX509Enrollment2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    initialize_from_template_name : UInt64
    initialize_from_request : UInt64
    create_request : UInt64
    enroll : UInt64
    install_response : UInt64
    create_pfx : UInt64
    get_request : UInt64
    get_silent : UInt64
    put_silent : UInt64
    get_parent_window : UInt64
    put_parent_window : UInt64
    get_name_value_pairs : UInt64
    get_enrollment_context : UInt64
    get_status : UInt64
    get_certificate : UInt64
    get_response : UInt64
    get_certificate_friendly_name : UInt64
    put_certificate_friendly_name : UInt64
    get_certificate_description : UInt64
    put_certificate_description : UInt64
    get_request_id : UInt64
    get_ca_config_string : UInt64
    initialize_from_template : UInt64
    install_response2 : UInt64
    get_policy_server : UInt64
    get_template : UInt64
    get_request_id_string : UInt64
  end

  IX509Enrollment2_GUID = "728ab350-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509Enrollment2 = LibC::GUID.new(0x728ab350_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509Enrollment2
    lpVtbl : IX509Enrollment2VTbl*
  end

  struct IX509EnrollmentHelperVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    add_policy_server : UInt64
    add_enrollment_server : UInt64
    enroll : UInt64
    initialize : UInt64
  end

  IX509EnrollmentHelper_GUID = "728ab351-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509EnrollmentHelper = LibC::GUID.new(0x728ab351_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509EnrollmentHelper
    lpVtbl : IX509EnrollmentHelperVTbl*
  end

  struct IX509EnrollmentWebClassFactoryVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    create_object : UInt64
  end

  IX509EnrollmentWebClassFactory_GUID = "728ab349-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509EnrollmentWebClassFactory = LibC::GUID.new(0x728ab349_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509EnrollmentWebClassFactory
    lpVtbl : IX509EnrollmentWebClassFactoryVTbl*
  end

  struct IX509MachineEnrollmentFactoryVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    create_object : UInt64
  end

  IX509MachineEnrollmentFactory_GUID = "728ab352-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509MachineEnrollmentFactory = LibC::GUID.new(0x728ab352_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509MachineEnrollmentFactory
    lpVtbl : IX509MachineEnrollmentFactoryVTbl*
  end

  struct IX509CertificateRevocationListEntryVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    get_serial_number : UInt64
    get_revocation_date : UInt64
    get_revocation_reason : UInt64
    put_revocation_reason : UInt64
    get_x509_extensions : UInt64
    get_critical_extensions : UInt64
  end

  IX509CertificateRevocationListEntry_GUID = "728ab35e-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509CertificateRevocationListEntry = LibC::GUID.new(0x728ab35e_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509CertificateRevocationListEntry
    lpVtbl : IX509CertificateRevocationListEntryVTbl*
  end

  struct IX509CertificateRevocationListEntriesVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    get_item_by_index : UInt64
    get_count : UInt64
    get__new_enum : UInt64
    add : UInt64
    remove : UInt64
    clear : UInt64
    get_index_by_serial_number : UInt64
    add_range : UInt64
  end

  IX509CertificateRevocationListEntries_GUID = "728ab35f-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509CertificateRevocationListEntries = LibC::GUID.new(0x728ab35f_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509CertificateRevocationListEntries
    lpVtbl : IX509CertificateRevocationListEntriesVTbl*
  end

  struct IX509CertificateRevocationListVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    initialize_decode : UInt64
    encode : UInt64
    reset_for_encode : UInt64
    check_public_key_signature : UInt64
    check_signature : UInt64
    get_issuer : UInt64
    put_issuer : UInt64
    get_this_update : UInt64
    put_this_update : UInt64
    get_next_update : UInt64
    put_next_update : UInt64
    get_x509_crl_entries : UInt64
    get_x509_extensions : UInt64
    get_critical_extensions : UInt64
    get_signer_certificate : UInt64
    put_signer_certificate : UInt64
    get_crl_number : UInt64
    put_crl_number : UInt64
    get_ca_version : UInt64
    put_ca_version : UInt64
    get_base_crl : UInt64
    get_null_signed : UInt64
    get_hash_algorithm : UInt64
    put_hash_algorithm : UInt64
    get_alternate_signature_algorithm : UInt64
    put_alternate_signature_algorithm : UInt64
    get_signature_information : UInt64
    get_raw_data : UInt64
    get_raw_data_to_be_signed : UInt64
    get_signature : UInt64
  end

  IX509CertificateRevocationList_GUID = "728ab360-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509CertificateRevocationList = LibC::GUID.new(0x728ab360_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509CertificateRevocationList
    lpVtbl : IX509CertificateRevocationListVTbl*
  end

  struct ICertificateAttestationChallengeVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    decrypt_challenge : UInt64
    get_request_id : UInt64
  end

  ICertificateAttestationChallenge_GUID = "6f175a7c-4a3a-40ae-9dba-592fd6bbf9b8"
  IID_ICertificateAttestationChallenge = LibC::GUID.new(0x6f175a7c_u32, 0x4a3a_u16, 0x40ae_u16, StaticArray[0x9d_u8, 0xba_u8, 0x59_u8, 0x2f_u8, 0xd6_u8, 0xbb_u8, 0xf9_u8, 0xb8_u8])
  struct ICertificateAttestationChallenge
    lpVtbl : ICertificateAttestationChallengeVTbl*
  end

  struct ICertificateAttestationChallenge2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    decrypt_challenge : UInt64
    get_request_id : UInt64
    put_key_container_name : UInt64
    put_key_blob : UInt64
  end

  ICertificateAttestationChallenge2_GUID = "4631334d-e266-47d6-bd79-be53cb2e2753"
  IID_ICertificateAttestationChallenge2 = LibC::GUID.new(0x4631334d_u32, 0xe266_u16, 0x47d6_u16, StaticArray[0xbd_u8, 0x79_u8, 0xbe_u8, 0x53_u8, 0xcb_u8, 0x2e_u8, 0x27_u8, 0x53_u8])
  struct ICertificateAttestationChallenge2
    lpVtbl : ICertificateAttestationChallenge2VTbl*
  end

  struct IX509SCEPEnrollmentVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    initialize_for_pending : UInt64
    create_request_message : UInt64
    create_retrieve_pending_message : UInt64
    create_retrieve_certificate_message : UInt64
    process_response_message : UInt64
    put_server_capabilities : UInt64
    get_fail_info : UInt64
    get_signer_certificate : UInt64
    put_signer_certificate : UInt64
    get_old_certificate : UInt64
    put_old_certificate : UInt64
    get_transaction_id : UInt64
    put_transaction_id : UInt64
    get_request : UInt64
    get_certificate_friendly_name : UInt64
    put_certificate_friendly_name : UInt64
    get_status : UInt64
    get_certificate : UInt64
    get_silent : UInt64
    put_silent : UInt64
    delete_request : UInt64
  end

  IX509SCEPEnrollment_GUID = "728ab361-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509SCEPEnrollment = LibC::GUID.new(0x728ab361_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509SCEPEnrollment
    lpVtbl : IX509SCEPEnrollmentVTbl*
  end

  struct IX509SCEPEnrollment2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    initialize_for_pending : UInt64
    create_request_message : UInt64
    create_retrieve_pending_message : UInt64
    create_retrieve_certificate_message : UInt64
    process_response_message : UInt64
    put_server_capabilities : UInt64
    get_fail_info : UInt64
    get_signer_certificate : UInt64
    put_signer_certificate : UInt64
    get_old_certificate : UInt64
    put_old_certificate : UInt64
    get_transaction_id : UInt64
    put_transaction_id : UInt64
    get_request : UInt64
    get_certificate_friendly_name : UInt64
    put_certificate_friendly_name : UInt64
    get_status : UInt64
    get_certificate : UInt64
    get_silent : UInt64
    put_silent : UInt64
    delete_request : UInt64
    create_challenge_answer_message : UInt64
    process_response_message2 : UInt64
    get_result_message_text : UInt64
    get_delay_retry : UInt64
    get_activity_id : UInt64
    put_activity_id : UInt64
  end

  IX509SCEPEnrollment2_GUID = "728ab364-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509SCEPEnrollment2 = LibC::GUID.new(0x728ab364_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509SCEPEnrollment2
    lpVtbl : IX509SCEPEnrollment2VTbl*
  end

  struct IX509SCEPEnrollmentHelperVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    initialize_for_pending : UInt64
    enroll : UInt64
    fetch_pending : UInt64
    get_x509_scep_enrollment : UInt64
    get_result_message_text : UInt64
  end

  IX509SCEPEnrollmentHelper_GUID = "728ab365-217d-11da-b2a4-000e7bbb2b09"
  IID_IX509SCEPEnrollmentHelper = LibC::GUID.new(0x728ab365_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
  struct IX509SCEPEnrollmentHelper
    lpVtbl : IX509SCEPEnrollmentHelperVTbl*
  end

  struct ICertEncodeStringArrayVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    decode : UInt64
    get_string_type : UInt64
    get_count : UInt64
    get_value : UInt64
    reset : UInt64
    set_value : UInt64
    encode : UInt64
  end

  ICertEncodeStringArray_GUID = "12a88820-7494-11d0-8816-00a0c903b83c"
  IID_ICertEncodeStringArray = LibC::GUID.new(0x12a88820_u32, 0x7494_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x16_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
  struct ICertEncodeStringArray
    lpVtbl : ICertEncodeStringArrayVTbl*
  end

  struct ICertEncodeStringArray2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    decode : UInt64
    get_string_type : UInt64
    get_count : UInt64
    get_value : UInt64
    reset : UInt64
    set_value : UInt64
    encode : UInt64
    decode_blob : UInt64
    encode_blob : UInt64
  end

  ICertEncodeStringArray2_GUID = "9c680d93-9b7d-4e95-9018-4ffe10ba5ada"
  IID_ICertEncodeStringArray2 = LibC::GUID.new(0x9c680d93_u32, 0x9b7d_u16, 0x4e95_u16, StaticArray[0x90_u8, 0x18_u8, 0x4f_u8, 0xfe_u8, 0x10_u8, 0xba_u8, 0x5a_u8, 0xda_u8])
  struct ICertEncodeStringArray2
    lpVtbl : ICertEncodeStringArray2VTbl*
  end

  struct ICertEncodeLongArrayVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    decode : UInt64
    get_count : UInt64
    get_value : UInt64
    reset : UInt64
    set_value : UInt64
    encode : UInt64
  end

  ICertEncodeLongArray_GUID = "15e2f230-a0a2-11d0-8821-00a0c903b83c"
  IID_ICertEncodeLongArray = LibC::GUID.new(0x15e2f230_u32, 0xa0a2_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x21_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
  struct ICertEncodeLongArray
    lpVtbl : ICertEncodeLongArrayVTbl*
  end

  struct ICertEncodeLongArray2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    decode : UInt64
    get_count : UInt64
    get_value : UInt64
    reset : UInt64
    set_value : UInt64
    encode : UInt64
    decode_blob : UInt64
    encode_blob : UInt64
  end

  ICertEncodeLongArray2_GUID = "4efde84a-bd9b-4fc2-a108-c347d478840f"
  IID_ICertEncodeLongArray2 = LibC::GUID.new(0x4efde84a_u32, 0xbd9b_u16, 0x4fc2_u16, StaticArray[0xa1_u8, 0x8_u8, 0xc3_u8, 0x47_u8, 0xd4_u8, 0x78_u8, 0x84_u8, 0xf_u8])
  struct ICertEncodeLongArray2
    lpVtbl : ICertEncodeLongArray2VTbl*
  end

  struct ICertEncodeDateArrayVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    decode : UInt64
    get_count : UInt64
    get_value : UInt64
    reset : UInt64
    set_value : UInt64
    encode : UInt64
  end

  ICertEncodeDateArray_GUID = "2f9469a0-a470-11d0-8821-00a0c903b83c"
  IID_ICertEncodeDateArray = LibC::GUID.new(0x2f9469a0_u32, 0xa470_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x21_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
  struct ICertEncodeDateArray
    lpVtbl : ICertEncodeDateArrayVTbl*
  end

  struct ICertEncodeDateArray2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    decode : UInt64
    get_count : UInt64
    get_value : UInt64
    reset : UInt64
    set_value : UInt64
    encode : UInt64
    decode_blob : UInt64
    encode_blob : UInt64
  end

  ICertEncodeDateArray2_GUID = "99a4edb5-2b8e-448d-bf95-bba8d7789dc8"
  IID_ICertEncodeDateArray2 = LibC::GUID.new(0x99a4edb5_u32, 0x2b8e_u16, 0x448d_u16, StaticArray[0xbf_u8, 0x95_u8, 0xbb_u8, 0xa8_u8, 0xd7_u8, 0x78_u8, 0x9d_u8, 0xc8_u8])
  struct ICertEncodeDateArray2
    lpVtbl : ICertEncodeDateArray2VTbl*
  end

  struct ICertEncodeCRLDistInfoVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    decode : UInt64
    get_dist_point_count : UInt64
    get_name_count : UInt64
    get_name_choice : UInt64
    get_name : UInt64
    reset : UInt64
    set_name_count : UInt64
    set_name_entry : UInt64
    encode : UInt64
  end

  ICertEncodeCRLDistInfo_GUID = "01958640-bbff-11d0-8825-00a0c903b83c"
  IID_ICertEncodeCRLDistInfo = LibC::GUID.new(0x1958640_u32, 0xbbff_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x25_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
  struct ICertEncodeCRLDistInfo
    lpVtbl : ICertEncodeCRLDistInfoVTbl*
  end

  struct ICertEncodeCRLDistInfo2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    decode : UInt64
    get_dist_point_count : UInt64
    get_name_count : UInt64
    get_name_choice : UInt64
    get_name : UInt64
    reset : UInt64
    set_name_count : UInt64
    set_name_entry : UInt64
    encode : UInt64
    decode_blob : UInt64
    encode_blob : UInt64
  end

  ICertEncodeCRLDistInfo2_GUID = "b4275d4b-3e30-446f-ad36-09d03120b078"
  IID_ICertEncodeCRLDistInfo2 = LibC::GUID.new(0xb4275d4b_u32, 0x3e30_u16, 0x446f_u16, StaticArray[0xad_u8, 0x36_u8, 0x9_u8, 0xd0_u8, 0x31_u8, 0x20_u8, 0xb0_u8, 0x78_u8])
  struct ICertEncodeCRLDistInfo2
    lpVtbl : ICertEncodeCRLDistInfo2VTbl*
  end

  struct ICertEncodeAltNameVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    decode : UInt64
    get_name_count : UInt64
    get_name_choice : UInt64
    get_name : UInt64
    reset : UInt64
    set_name_entry : UInt64
    encode : UInt64
  end

  ICertEncodeAltName_GUID = "1c9a8c70-1271-11d1-9bd4-00c04fb683fa"
  IID_ICertEncodeAltName = LibC::GUID.new(0x1c9a8c70_u32, 0x1271_u16, 0x11d1_u16, StaticArray[0x9b_u8, 0xd4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x83_u8, 0xfa_u8])
  struct ICertEncodeAltName
    lpVtbl : ICertEncodeAltNameVTbl*
  end

  struct ICertEncodeAltName2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    decode : UInt64
    get_name_count : UInt64
    get_name_choice : UInt64
    get_name : UInt64
    reset : UInt64
    set_name_entry : UInt64
    encode : UInt64
    decode_blob : UInt64
    encode_blob : UInt64
    get_name_blob : UInt64
    set_name_entry_blob : UInt64
  end

  ICertEncodeAltName2_GUID = "f67fe177-5ef1-4535-b4ce-29df15e2e0c3"
  IID_ICertEncodeAltName2 = LibC::GUID.new(0xf67fe177_u32, 0x5ef1_u16, 0x4535_u16, StaticArray[0xb4_u8, 0xce_u8, 0x29_u8, 0xdf_u8, 0x15_u8, 0xe2_u8, 0xe0_u8, 0xc3_u8])
  struct ICertEncodeAltName2
    lpVtbl : ICertEncodeAltName2VTbl*
  end

  struct ICertEncodeBitStringVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    decode : UInt64
    get_bit_count : UInt64
    get_bit_string : UInt64
    encode : UInt64
  end

  ICertEncodeBitString_GUID = "6db525be-1278-11d1-9bd4-00c04fb683fa"
  IID_ICertEncodeBitString = LibC::GUID.new(0x6db525be_u32, 0x1278_u16, 0x11d1_u16, StaticArray[0x9b_u8, 0xd4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x83_u8, 0xfa_u8])
  struct ICertEncodeBitString
    lpVtbl : ICertEncodeBitStringVTbl*
  end

  struct ICertEncodeBitString2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    decode : UInt64
    get_bit_count : UInt64
    get_bit_string : UInt64
    encode : UInt64
    decode_blob : UInt64
    encode_blob : UInt64
    get_bit_string_blob : UInt64
  end

  ICertEncodeBitString2_GUID = "e070d6e7-23ef-4dd2-8242-ebd9c928cb30"
  IID_ICertEncodeBitString2 = LibC::GUID.new(0xe070d6e7_u32, 0x23ef_u16, 0x4dd2_u16, StaticArray[0x82_u8, 0x42_u8, 0xeb_u8, 0xd9_u8, 0xc9_u8, 0x28_u8, 0xcb_u8, 0x30_u8])
  struct ICertEncodeBitString2
    lpVtbl : ICertEncodeBitString2VTbl*
  end

  struct ICertExitVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    notify : UInt64
    get_description : UInt64
  end

  ICertExit_GUID = "e19ae1a0-7364-11d0-8816-00a0c903b83c"
  IID_ICertExit = LibC::GUID.new(0xe19ae1a0_u32, 0x7364_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x16_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
  struct ICertExit
    lpVtbl : ICertExitVTbl*
  end

  struct ICertExit2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    initialize : UInt64
    notify : UInt64
    get_description : UInt64
    get_manage_module : UInt64
  end

  ICertExit2_GUID = "0abf484b-d049-464d-a7ed-552e7529b0ff"
  IID_ICertExit2 = LibC::GUID.new(0xabf484b_u32, 0xd049_u16, 0x464d_u16, StaticArray[0xa7_u8, 0xed_u8, 0x55_u8, 0x2e_u8, 0x75_u8, 0x29_u8, 0xb0_u8, 0xff_u8])
  struct ICertExit2
    lpVtbl : ICertExit2VTbl*
  end

  struct ICEnrollVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    create_file_pkcs10 : UInt64
    accept_file_pkcs7 : UInt64
    create_pkcs10 : UInt64
    accept_pkcs7 : UInt64
    get_cert_from_pkcs7 : UInt64
    enum_providers : UInt64
    enum_containers : UInt64
    free_request_info : UInt64
    get_my_store_name : UInt64
    put_my_store_name : UInt64
    get_my_store_type : UInt64
    put_my_store_type : UInt64
    get_my_store_flags : UInt64
    put_my_store_flags : UInt64
    get_ca_store_name : UInt64
    put_ca_store_name : UInt64
    get_ca_store_type : UInt64
    put_ca_store_type : UInt64
    get_ca_store_flags : UInt64
    put_ca_store_flags : UInt64
    get_root_store_name : UInt64
    put_root_store_name : UInt64
    get_root_store_type : UInt64
    put_root_store_type : UInt64
    get_root_store_flags : UInt64
    put_root_store_flags : UInt64
    get_request_store_name : UInt64
    put_request_store_name : UInt64
    get_request_store_type : UInt64
    put_request_store_type : UInt64
    get_request_store_flags : UInt64
    put_request_store_flags : UInt64
    get_container_name : UInt64
    put_container_name : UInt64
    get_provider_name : UInt64
    put_provider_name : UInt64
    get_provider_type : UInt64
    put_provider_type : UInt64
    get_key_spec : UInt64
    put_key_spec : UInt64
    get_provider_flags : UInt64
    put_provider_flags : UInt64
    get_use_existing_key_set : UInt64
    put_use_existing_key_set : UInt64
    get_gen_key_flags : UInt64
    put_gen_key_flags : UInt64
    get_delete_request_cert : UInt64
    put_delete_request_cert : UInt64
    get_write_cert_to_csp : UInt64
    put_write_cert_to_csp : UInt64
    get_spc_file_name : UInt64
    put_spc_file_name : UInt64
    get_pvk_file_name : UInt64
    put_pvk_file_name : UInt64
    get_hash_algorithm : UInt64
    put_hash_algorithm : UInt64
  end

  ICEnroll_GUID = "43f8f288-7a20-11d0-8f06-00c04fc295e1"
  IID_ICEnroll = LibC::GUID.new(0x43f8f288_u32, 0x7a20_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0x6_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0x95_u8, 0xe1_u8])
  struct ICEnroll
    lpVtbl : ICEnrollVTbl*
  end

  struct ICEnroll2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    create_file_pkcs10 : UInt64
    accept_file_pkcs7 : UInt64
    create_pkcs10 : UInt64
    accept_pkcs7 : UInt64
    get_cert_from_pkcs7 : UInt64
    enum_providers : UInt64
    enum_containers : UInt64
    free_request_info : UInt64
    get_my_store_name : UInt64
    put_my_store_name : UInt64
    get_my_store_type : UInt64
    put_my_store_type : UInt64
    get_my_store_flags : UInt64
    put_my_store_flags : UInt64
    get_ca_store_name : UInt64
    put_ca_store_name : UInt64
    get_ca_store_type : UInt64
    put_ca_store_type : UInt64
    get_ca_store_flags : UInt64
    put_ca_store_flags : UInt64
    get_root_store_name : UInt64
    put_root_store_name : UInt64
    get_root_store_type : UInt64
    put_root_store_type : UInt64
    get_root_store_flags : UInt64
    put_root_store_flags : UInt64
    get_request_store_name : UInt64
    put_request_store_name : UInt64
    get_request_store_type : UInt64
    put_request_store_type : UInt64
    get_request_store_flags : UInt64
    put_request_store_flags : UInt64
    get_container_name : UInt64
    put_container_name : UInt64
    get_provider_name : UInt64
    put_provider_name : UInt64
    get_provider_type : UInt64
    put_provider_type : UInt64
    get_key_spec : UInt64
    put_key_spec : UInt64
    get_provider_flags : UInt64
    put_provider_flags : UInt64
    get_use_existing_key_set : UInt64
    put_use_existing_key_set : UInt64
    get_gen_key_flags : UInt64
    put_gen_key_flags : UInt64
    get_delete_request_cert : UInt64
    put_delete_request_cert : UInt64
    get_write_cert_to_csp : UInt64
    put_write_cert_to_csp : UInt64
    get_spc_file_name : UInt64
    put_spc_file_name : UInt64
    get_pvk_file_name : UInt64
    put_pvk_file_name : UInt64
    get_hash_algorithm : UInt64
    put_hash_algorithm : UInt64
    add_cert_type_to_request : UInt64
    add_name_value_pair_to_signature : UInt64
    get_write_cert_to_user_ds : UInt64
    put_write_cert_to_user_ds : UInt64
    get_enable_t61_dn_encoding : UInt64
    put_enable_t61_dn_encoding : UInt64
  end

  ICEnroll2_GUID = "704ca730-c90b-11d1-9bec-00c04fc295e1"
  IID_ICEnroll2 = LibC::GUID.new(0x704ca730_u32, 0xc90b_u16, 0x11d1_u16, StaticArray[0x9b_u8, 0xec_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0x95_u8, 0xe1_u8])
  struct ICEnroll2
    lpVtbl : ICEnroll2VTbl*
  end

  struct ICEnroll3VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    create_file_pkcs10 : UInt64
    accept_file_pkcs7 : UInt64
    create_pkcs10 : UInt64
    accept_pkcs7 : UInt64
    get_cert_from_pkcs7 : UInt64
    enum_providers : UInt64
    enum_containers : UInt64
    free_request_info : UInt64
    get_my_store_name : UInt64
    put_my_store_name : UInt64
    get_my_store_type : UInt64
    put_my_store_type : UInt64
    get_my_store_flags : UInt64
    put_my_store_flags : UInt64
    get_ca_store_name : UInt64
    put_ca_store_name : UInt64
    get_ca_store_type : UInt64
    put_ca_store_type : UInt64
    get_ca_store_flags : UInt64
    put_ca_store_flags : UInt64
    get_root_store_name : UInt64
    put_root_store_name : UInt64
    get_root_store_type : UInt64
    put_root_store_type : UInt64
    get_root_store_flags : UInt64
    put_root_store_flags : UInt64
    get_request_store_name : UInt64
    put_request_store_name : UInt64
    get_request_store_type : UInt64
    put_request_store_type : UInt64
    get_request_store_flags : UInt64
    put_request_store_flags : UInt64
    get_container_name : UInt64
    put_container_name : UInt64
    get_provider_name : UInt64
    put_provider_name : UInt64
    get_provider_type : UInt64
    put_provider_type : UInt64
    get_key_spec : UInt64
    put_key_spec : UInt64
    get_provider_flags : UInt64
    put_provider_flags : UInt64
    get_use_existing_key_set : UInt64
    put_use_existing_key_set : UInt64
    get_gen_key_flags : UInt64
    put_gen_key_flags : UInt64
    get_delete_request_cert : UInt64
    put_delete_request_cert : UInt64
    get_write_cert_to_csp : UInt64
    put_write_cert_to_csp : UInt64
    get_spc_file_name : UInt64
    put_spc_file_name : UInt64
    get_pvk_file_name : UInt64
    put_pvk_file_name : UInt64
    get_hash_algorithm : UInt64
    put_hash_algorithm : UInt64
    add_cert_type_to_request : UInt64
    add_name_value_pair_to_signature : UInt64
    get_write_cert_to_user_ds : UInt64
    put_write_cert_to_user_ds : UInt64
    get_enable_t61_dn_encoding : UInt64
    put_enable_t61_dn_encoding : UInt64
    install_pkcs7 : UInt64
    reset : UInt64
    get_supported_key_spec : UInt64
    get_key_len : UInt64
    enum_algs : UInt64
    get_alg_name : UInt64
    put_reuse_hardware_key_if_unable_to_gen_new : UInt64
    get_reuse_hardware_key_if_unable_to_gen_new : UInt64
    put_hash_alg_id : UInt64
    get_hash_alg_id : UInt64
    put_limit_exchange_key_to_encipherment : UInt64
    get_limit_exchange_key_to_encipherment : UInt64
    put_enable_smime_capabilities : UInt64
    get_enable_smime_capabilities : UInt64
  end

  ICEnroll3_GUID = "c28c2d95-b7de-11d2-a421-00c04f79fe8e"
  IID_ICEnroll3 = LibC::GUID.new(0xc28c2d95_u32, 0xb7de_u16, 0x11d2_u16, StaticArray[0xa4_u8, 0x21_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0xfe_u8, 0x8e_u8])
  struct ICEnroll3
    lpVtbl : ICEnroll3VTbl*
  end

  struct ICEnroll4VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    get_type_info_count : UInt64
    get_type_info : UInt64
    get_i_ds_of_names : UInt64
    invoke : UInt64
    create_file_pkcs10 : UInt64
    accept_file_pkcs7 : UInt64
    create_pkcs10 : UInt64
    accept_pkcs7 : UInt64
    get_cert_from_pkcs7 : UInt64
    enum_providers : UInt64
    enum_containers : UInt64
    free_request_info : UInt64
    get_my_store_name : UInt64
    put_my_store_name : UInt64
    get_my_store_type : UInt64
    put_my_store_type : UInt64
    get_my_store_flags : UInt64
    put_my_store_flags : UInt64
    get_ca_store_name : UInt64
    put_ca_store_name : UInt64
    get_ca_store_type : UInt64
    put_ca_store_type : UInt64
    get_ca_store_flags : UInt64
    put_ca_store_flags : UInt64
    get_root_store_name : UInt64
    put_root_store_name : UInt64
    get_root_store_type : UInt64
    put_root_store_type : UInt64
    get_root_store_flags : UInt64
    put_root_store_flags : UInt64
    get_request_store_name : UInt64
    put_request_store_name : UInt64
    get_request_store_type : UInt64
    put_request_store_type : UInt64
    get_request_store_flags : UInt64
    put_request_store_flags : UInt64
    get_container_name : UInt64
    put_container_name : UInt64
    get_provider_name : UInt64
    put_provider_name : UInt64
    get_provider_type : UInt64
    put_provider_type : UInt64
    get_key_spec : UInt64
    put_key_spec : UInt64
    get_provider_flags : UInt64
    put_provider_flags : UInt64
    get_use_existing_key_set : UInt64
    put_use_existing_key_set : UInt64
    get_gen_key_flags : UInt64
    put_gen_key_flags : UInt64
    get_delete_request_cert : UInt64
    put_delete_request_cert : UInt64
    get_write_cert_to_csp : UInt64
    put_write_cert_to_csp : UInt64
    get_spc_file_name : UInt64
    put_spc_file_name : UInt64
    get_pvk_file_name : UInt64
    put_pvk_file_name : UInt64
    get_hash_algorithm : UInt64
    put_hash_algorithm : UInt64
    add_cert_type_to_request : UInt64
    add_name_value_pair_to_signature : UInt64
    get_write_cert_to_user_ds : UInt64
    put_write_cert_to_user_ds : UInt64
    get_enable_t61_dn_encoding : UInt64
    put_enable_t61_dn_encoding : UInt64
    install_pkcs7 : UInt64
    reset : UInt64
    get_supported_key_spec : UInt64
    get_key_len : UInt64
    enum_algs : UInt64
    get_alg_name : UInt64
    put_reuse_hardware_key_if_unable_to_gen_new : UInt64
    get_reuse_hardware_key_if_unable_to_gen_new : UInt64
    put_hash_alg_id : UInt64
    get_hash_alg_id : UInt64
    put_limit_exchange_key_to_encipherment : UInt64
    get_limit_exchange_key_to_encipherment : UInt64
    put_enable_smime_capabilities : UInt64
    get_enable_smime_capabilities : UInt64
    put_private_key_archive_certificate : UInt64
    get_private_key_archive_certificate : UInt64
    put_thumb_print : UInt64
    get_thumb_print : UInt64
    binary_to_string : UInt64
    string_to_binary : UInt64
    add_extension_to_request : UInt64
    add_attribute_to_request : UInt64
    add_name_value_pair_to_request : UInt64
    reset_extensions : UInt64
    reset_attributes : UInt64
    create_request : UInt64
    create_file_request : UInt64
    accept_response : UInt64
    accept_file_response : UInt64
    get_cert_from_response : UInt64
    get_cert_from_file_response : UInt64
    create_pfx : UInt64
    create_file_pfx : UInt64
    set_pending_request_info : UInt64
    enum_pending_request : UInt64
    remove_pending_request : UInt64
    get_key_len_ex : UInt64
    install_pkcs7_ex : UInt64
    add_cert_type_to_request_ex : UInt64
    get_provider_type2 : UInt64
    put_signer_certificate : UInt64
    put_client_id : UInt64
    get_client_id : UInt64
    add_blob_property_to_certificate : UInt64
    reset_blob_properties : UInt64
    put_include_subject_key_id : UInt64
    get_include_subject_key_id : UInt64
  end

  ICEnroll4_GUID = "c1f1188a-2eb5-4a80-841b-7e729a356d90"
  IID_ICEnroll4 = LibC::GUID.new(0xc1f1188a_u32, 0x2eb5_u16, 0x4a80_u16, StaticArray[0x84_u8, 0x1b_u8, 0x7e_u8, 0x72_u8, 0x9a_u8, 0x35_u8, 0x6d_u8, 0x90_u8])
  struct ICEnroll4
    lpVtbl : ICEnroll4VTbl*
  end

  struct IEnrollVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    create_file_pkcs10_w_str : UInt64
    accept_file_pkcs7_w_str : UInt64
    create_pkcs10_w_str : UInt64
    accept_pkcs7_blob : UInt64
    get_cert_context_from_pkcs7 : UInt64
    get_my_store : UInt64
    get_ca_store : UInt64
    get_rooth_store : UInt64
    enum_providers_w_str : UInt64
    enum_containers_w_str : UInt64
    free_request_info_blob : UInt64
    get_my_store_name_w_str : UInt64
    put_my_store_name_w_str : UInt64
    get_my_store_type_w_str : UInt64
    put_my_store_type_w_str : UInt64
    get_my_store_flags : UInt64
    put_my_store_flags : UInt64
    get_ca_store_name_w_str : UInt64
    put_ca_store_name_w_str : UInt64
    get_ca_store_type_w_str : UInt64
    put_ca_store_type_w_str : UInt64
    get_ca_store_flags : UInt64
    put_ca_store_flags : UInt64
    get_root_store_name_w_str : UInt64
    put_root_store_name_w_str : UInt64
    get_root_store_type_w_str : UInt64
    put_root_store_type_w_str : UInt64
    get_root_store_flags : UInt64
    put_root_store_flags : UInt64
    get_request_store_name_w_str : UInt64
    put_request_store_name_w_str : UInt64
    get_request_store_type_w_str : UInt64
    put_request_store_type_w_str : UInt64
    get_request_store_flags : UInt64
    put_request_store_flags : UInt64
    get_container_name_w_str : UInt64
    put_container_name_w_str : UInt64
    get_provider_name_w_str : UInt64
    put_provider_name_w_str : UInt64
    get_provider_type : UInt64
    put_provider_type : UInt64
    get_key_spec : UInt64
    put_key_spec : UInt64
    get_provider_flags : UInt64
    put_provider_flags : UInt64
    get_use_existing_key_set : UInt64
    put_use_existing_key_set : UInt64
    get_gen_key_flags : UInt64
    put_gen_key_flags : UInt64
    get_delete_request_cert : UInt64
    put_delete_request_cert : UInt64
    get_write_cert_to_user_ds : UInt64
    put_write_cert_to_user_ds : UInt64
    get_enable_t61_dn_encoding : UInt64
    put_enable_t61_dn_encoding : UInt64
    get_write_cert_to_csp : UInt64
    put_write_cert_to_csp : UInt64
    get_spc_file_name_w_str : UInt64
    put_spc_file_name_w_str : UInt64
    get_pvk_file_name_w_str : UInt64
    put_pvk_file_name_w_str : UInt64
    get_hash_algorithm_w_str : UInt64
    put_hash_algorithm_w_str : UInt64
    get_renewal_certificate : UInt64
    put_renewal_certificate : UInt64
    add_cert_type_to_request_w_str : UInt64
    add_name_value_pair_to_signature_w_str : UInt64
    add_extensions_to_request : UInt64
    add_authenticated_attributes_to_pkcs7_request : UInt64
    create_pkcs7_request_from_request : UInt64
  end

  IEnroll_GUID = "acaa7838-4585-11d1-ab57-00c04fc295e1"
  IID_IEnroll = LibC::GUID.new(0xacaa7838_u32, 0x4585_u16, 0x11d1_u16, StaticArray[0xab_u8, 0x57_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0x95_u8, 0xe1_u8])
  struct IEnroll
    lpVtbl : IEnrollVTbl*
  end

  struct IEnroll2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    create_file_pkcs10_w_str : UInt64
    accept_file_pkcs7_w_str : UInt64
    create_pkcs10_w_str : UInt64
    accept_pkcs7_blob : UInt64
    get_cert_context_from_pkcs7 : UInt64
    get_my_store : UInt64
    get_ca_store : UInt64
    get_rooth_store : UInt64
    enum_providers_w_str : UInt64
    enum_containers_w_str : UInt64
    free_request_info_blob : UInt64
    get_my_store_name_w_str : UInt64
    put_my_store_name_w_str : UInt64
    get_my_store_type_w_str : UInt64
    put_my_store_type_w_str : UInt64
    get_my_store_flags : UInt64
    put_my_store_flags : UInt64
    get_ca_store_name_w_str : UInt64
    put_ca_store_name_w_str : UInt64
    get_ca_store_type_w_str : UInt64
    put_ca_store_type_w_str : UInt64
    get_ca_store_flags : UInt64
    put_ca_store_flags : UInt64
    get_root_store_name_w_str : UInt64
    put_root_store_name_w_str : UInt64
    get_root_store_type_w_str : UInt64
    put_root_store_type_w_str : UInt64
    get_root_store_flags : UInt64
    put_root_store_flags : UInt64
    get_request_store_name_w_str : UInt64
    put_request_store_name_w_str : UInt64
    get_request_store_type_w_str : UInt64
    put_request_store_type_w_str : UInt64
    get_request_store_flags : UInt64
    put_request_store_flags : UInt64
    get_container_name_w_str : UInt64
    put_container_name_w_str : UInt64
    get_provider_name_w_str : UInt64
    put_provider_name_w_str : UInt64
    get_provider_type : UInt64
    put_provider_type : UInt64
    get_key_spec : UInt64
    put_key_spec : UInt64
    get_provider_flags : UInt64
    put_provider_flags : UInt64
    get_use_existing_key_set : UInt64
    put_use_existing_key_set : UInt64
    get_gen_key_flags : UInt64
    put_gen_key_flags : UInt64
    get_delete_request_cert : UInt64
    put_delete_request_cert : UInt64
    get_write_cert_to_user_ds : UInt64
    put_write_cert_to_user_ds : UInt64
    get_enable_t61_dn_encoding : UInt64
    put_enable_t61_dn_encoding : UInt64
    get_write_cert_to_csp : UInt64
    put_write_cert_to_csp : UInt64
    get_spc_file_name_w_str : UInt64
    put_spc_file_name_w_str : UInt64
    get_pvk_file_name_w_str : UInt64
    put_pvk_file_name_w_str : UInt64
    get_hash_algorithm_w_str : UInt64
    put_hash_algorithm_w_str : UInt64
    get_renewal_certificate : UInt64
    put_renewal_certificate : UInt64
    add_cert_type_to_request_w_str : UInt64
    add_name_value_pair_to_signature_w_str : UInt64
    add_extensions_to_request : UInt64
    add_authenticated_attributes_to_pkcs7_request : UInt64
    create_pkcs7_request_from_request : UInt64
    install_pkcs7_blob : UInt64
    reset : UInt64
    get_supported_key_spec : UInt64
    get_key_len : UInt64
    enum_algs : UInt64
    get_alg_name_w_str : UInt64
    put_reuse_hardware_key_if_unable_to_gen_new : UInt64
    get_reuse_hardware_key_if_unable_to_gen_new : UInt64
    put_hash_alg_id : UInt64
    get_hash_alg_id : UInt64
    set_h_store_my : UInt64
    set_h_store_ca : UInt64
    set_h_store_root : UInt64
    set_h_store_request : UInt64
    put_limit_exchange_key_to_encipherment : UInt64
    get_limit_exchange_key_to_encipherment : UInt64
    put_enable_smime_capabilities : UInt64
    get_enable_smime_capabilities : UInt64
  end

  IEnroll2_GUID = "c080e199-b7df-11d2-a421-00c04f79fe8e"
  IID_IEnroll2 = LibC::GUID.new(0xc080e199_u32, 0xb7df_u16, 0x11d2_u16, StaticArray[0xa4_u8, 0x21_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0xfe_u8, 0x8e_u8])
  struct IEnroll2
    lpVtbl : IEnroll2VTbl*
  end

  struct IEnroll4VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    create_file_pkcs10_w_str : UInt64
    accept_file_pkcs7_w_str : UInt64
    create_pkcs10_w_str : UInt64
    accept_pkcs7_blob : UInt64
    get_cert_context_from_pkcs7 : UInt64
    get_my_store : UInt64
    get_ca_store : UInt64
    get_rooth_store : UInt64
    enum_providers_w_str : UInt64
    enum_containers_w_str : UInt64
    free_request_info_blob : UInt64
    get_my_store_name_w_str : UInt64
    put_my_store_name_w_str : UInt64
    get_my_store_type_w_str : UInt64
    put_my_store_type_w_str : UInt64
    get_my_store_flags : UInt64
    put_my_store_flags : UInt64
    get_ca_store_name_w_str : UInt64
    put_ca_store_name_w_str : UInt64
    get_ca_store_type_w_str : UInt64
    put_ca_store_type_w_str : UInt64
    get_ca_store_flags : UInt64
    put_ca_store_flags : UInt64
    get_root_store_name_w_str : UInt64
    put_root_store_name_w_str : UInt64
    get_root_store_type_w_str : UInt64
    put_root_store_type_w_str : UInt64
    get_root_store_flags : UInt64
    put_root_store_flags : UInt64
    get_request_store_name_w_str : UInt64
    put_request_store_name_w_str : UInt64
    get_request_store_type_w_str : UInt64
    put_request_store_type_w_str : UInt64
    get_request_store_flags : UInt64
    put_request_store_flags : UInt64
    get_container_name_w_str : UInt64
    put_container_name_w_str : UInt64
    get_provider_name_w_str : UInt64
    put_provider_name_w_str : UInt64
    get_provider_type : UInt64
    put_provider_type : UInt64
    get_key_spec : UInt64
    put_key_spec : UInt64
    get_provider_flags : UInt64
    put_provider_flags : UInt64
    get_use_existing_key_set : UInt64
    put_use_existing_key_set : UInt64
    get_gen_key_flags : UInt64
    put_gen_key_flags : UInt64
    get_delete_request_cert : UInt64
    put_delete_request_cert : UInt64
    get_write_cert_to_user_ds : UInt64
    put_write_cert_to_user_ds : UInt64
    get_enable_t61_dn_encoding : UInt64
    put_enable_t61_dn_encoding : UInt64
    get_write_cert_to_csp : UInt64
    put_write_cert_to_csp : UInt64
    get_spc_file_name_w_str : UInt64
    put_spc_file_name_w_str : UInt64
    get_pvk_file_name_w_str : UInt64
    put_pvk_file_name_w_str : UInt64
    get_hash_algorithm_w_str : UInt64
    put_hash_algorithm_w_str : UInt64
    get_renewal_certificate : UInt64
    put_renewal_certificate : UInt64
    add_cert_type_to_request_w_str : UInt64
    add_name_value_pair_to_signature_w_str : UInt64
    add_extensions_to_request : UInt64
    add_authenticated_attributes_to_pkcs7_request : UInt64
    create_pkcs7_request_from_request : UInt64
    install_pkcs7_blob : UInt64
    reset : UInt64
    get_supported_key_spec : UInt64
    get_key_len : UInt64
    enum_algs : UInt64
    get_alg_name_w_str : UInt64
    put_reuse_hardware_key_if_unable_to_gen_new : UInt64
    get_reuse_hardware_key_if_unable_to_gen_new : UInt64
    put_hash_alg_id : UInt64
    get_hash_alg_id : UInt64
    set_h_store_my : UInt64
    set_h_store_ca : UInt64
    set_h_store_root : UInt64
    set_h_store_request : UInt64
    put_limit_exchange_key_to_encipherment : UInt64
    get_limit_exchange_key_to_encipherment : UInt64
    put_enable_smime_capabilities : UInt64
    get_enable_smime_capabilities : UInt64
    put_thumb_print_w_str : UInt64
    get_thumb_print_w_str : UInt64
    set_private_key_archive_certificate : UInt64
    get_private_key_archive_certificate : UInt64
    binary_blob_to_string : UInt64
    string_to_binary_blob : UInt64
    add_extension_to_request_w_str : UInt64
    add_attribute_to_request_w_str : UInt64
    add_name_value_pair_to_request_w_str : UInt64
    reset_extensions : UInt64
    reset_attributes : UInt64
    create_request_w_str : UInt64
    create_file_request_w_str : UInt64
    accept_response_blob : UInt64
    accept_file_response_w_str : UInt64
    get_cert_context_from_response_blob : UInt64
    get_cert_context_from_file_response_w_str : UInt64
    create_pfxw_str : UInt64
    create_file_pfxw_str : UInt64
    set_pending_request_info_w_str : UInt64
    enum_pending_request_w_str : UInt64
    remove_pending_request_w_str : UInt64
    get_key_len_ex : UInt64
    install_pkcs7_blob_ex : UInt64
    add_cert_type_to_request_w_str_ex : UInt64
    get_provider_type_w_str : UInt64
    add_blob_property_to_certificate_w_str : UInt64
    set_signer_certificate : UInt64
    put_client_id : UInt64
    get_client_id : UInt64
    put_include_subject_key_id : UInt64
    get_include_subject_key_id : UInt64
  end

  IEnroll4_GUID = "f8053fe5-78f4-448f-a0db-41d61b73446b"
  IID_IEnroll4 = LibC::GUID.new(0xf8053fe5_u32, 0x78f4_u16, 0x448f_u16, StaticArray[0xa0_u8, 0xdb_u8, 0x41_u8, 0xd6_u8, 0x1b_u8, 0x73_u8, 0x44_u8, 0x6b_u8])
  struct IEnroll4
    lpVtbl : IEnroll4VTbl*
  end

  struct ICertRequestDVTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    request : UInt64
    get_ca_cert : UInt64
    ping : UInt64
  end

  ICertRequestD_GUID = "d99e6e70-fc88-11d0-b498-00a0c90312f3"
  IID_ICertRequestD = LibC::GUID.new(0xd99e6e70_u32, 0xfc88_u16, 0x11d0_u16, StaticArray[0xb4_u8, 0x98_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0x12_u8, 0xf3_u8])
  struct ICertRequestD
    lpVtbl : ICertRequestDVTbl*
  end

  struct ICertRequestD2VTbl
    query_interface : UInt64
    add_ref : UInt64
    release : UInt64
    request : UInt64
    get_ca_cert : UInt64
    ping : UInt64
    request2 : UInt64
    get_ca_property : UInt64
    get_ca_property_info : UInt64
    ping2 : UInt64
  end

  ICertRequestD2_GUID = "5422fd3a-d4b8-4cef-a12e-e87d4ca22e90"
  IID_ICertRequestD2 = LibC::GUID.new(0x5422fd3a_u32, 0xd4b8_u16, 0x4cef_u16, StaticArray[0xa1_u8, 0x2e_u8, 0xe8_u8, 0x7d_u8, 0x4c_u8, 0xa2_u8, 0x2e_u8, 0x90_u8])
  struct ICertRequestD2
    lpVtbl : ICertRequestD2VTbl*
  end


  # Params # pwszservername : LibC::LPWSTR [In],pfserveronline : LibC::BOOL* [In]
  fun CertSrvIsServerOnlineW(pwszservername : LibC::LPWSTR, pfserveronline : LibC::BOOL*) : HRESULT

  # Params # hbc : Void* [In],ppwszzfilelist : LibC::LPWSTR* [In],pcbsize : UInt32* [In]
  fun CertSrvBackupGetDynamicFileListW(hbc : Void*, ppwszzfilelist : LibC::LPWSTR*, pcbsize : UInt32*) : HRESULT

  # Params # pwszservername : LibC::LPWSTR [In],grbitjet : UInt32 [In],dwbackupflags : CSBACKUP_TYPE [In],phbc : Void** [In]
  fun CertSrvBackupPrepareW(pwszservername : LibC::LPWSTR, grbitjet : UInt32, dwbackupflags : CSBACKUP_TYPE, phbc : Void**) : HRESULT

  # Params # hbc : Void* [In],ppwszzattachmentinformation : LibC::LPWSTR* [In],pcbsize : UInt32* [In]
  fun CertSrvBackupGetDatabaseNamesW(hbc : Void*, ppwszzattachmentinformation : LibC::LPWSTR*, pcbsize : UInt32*) : HRESULT

  # Params # hbc : Void* [In],pwszattachmentname : LibC::LPWSTR [In],cbreadhintsize : UInt32 [In],plifilesize : LARGE_INTEGER* [In]
  fun CertSrvBackupOpenFileW(hbc : Void*, pwszattachmentname : LibC::LPWSTR, cbreadhintsize : UInt32, plifilesize : LARGE_INTEGER*) : HRESULT

  # Params # hbc : Void* [In],pvbuffer : Void* [In],cbbuffer : UInt32 [In],pcbread : UInt32* [In]
  fun CertSrvBackupRead(hbc : Void*, pvbuffer : Void*, cbbuffer : UInt32, pcbread : UInt32*) : HRESULT

  # Params # hbc : Void* [In]
  fun CertSrvBackupClose(hbc : Void*) : HRESULT

  # Params # hbc : Void* [In],ppwszzbackuplogfiles : LibC::LPWSTR* [In],pcbsize : UInt32* [In]
  fun CertSrvBackupGetBackupLogsW(hbc : Void*, ppwszzbackuplogfiles : LibC::LPWSTR*, pcbsize : UInt32*) : HRESULT

  # Params # hbc : Void* [In]
  fun CertSrvBackupTruncateLogs(hbc : Void*) : HRESULT

  # Params # hbc : Void* [In]
  fun CertSrvBackupEnd(hbc : Void*) : HRESULT

  # Params # pv : Void* [In]
  fun CertSrvBackupFree(pv : Void*) : Void

  # Params # hbc : Void* [In],ppwszzdatabaselocationlist : LibC::LPWSTR* [In],pcbsize : UInt32* [In]
  fun CertSrvRestoreGetDatabaseLocationsW(hbc : Void*, ppwszzdatabaselocationlist : LibC::LPWSTR*, pcbsize : UInt32*) : HRESULT

  # Params # pwszservername : LibC::LPWSTR [In],dwrestoreflags : UInt32 [In],phbc : Void** [In]
  fun CertSrvRestorePrepareW(pwszservername : LibC::LPWSTR, dwrestoreflags : UInt32, phbc : Void**) : HRESULT

  # Params # hbc : Void* [In],pwszcheckpointfilepath : LibC::LPWSTR [In],pwszlogpath : LibC::LPWSTR [In],rgrstmap : CSEDB_RSTMAPW* [In],crstmap : Int32 [In],pwszbackuplogpath : LibC::LPWSTR [In],genlow : UInt32 [In],genhigh : UInt32 [In]
  fun CertSrvRestoreRegisterW(hbc : Void*, pwszcheckpointfilepath : LibC::LPWSTR, pwszlogpath : LibC::LPWSTR, rgrstmap : CSEDB_RSTMAPW*, crstmap : Int32, pwszbackuplogpath : LibC::LPWSTR, genlow : UInt32, genhigh : UInt32) : HRESULT

  # Params # hbc : Void* [In],pwszcheckpointfilepath : LibC::LPWSTR [In],pwszlogpath : LibC::LPWSTR [In],rgrstmap : CSEDB_RSTMAPW* [In],crstmap : Int32 [In],pwszbackuplogpath : LibC::LPWSTR [In],genlow : UInt32 [In],genhigh : UInt32 [In]
  fun CertSrvRestoreRegisterThroughFile(hbc : Void*, pwszcheckpointfilepath : LibC::LPWSTR, pwszlogpath : LibC::LPWSTR, rgrstmap : CSEDB_RSTMAPW*, crstmap : Int32, pwszbackuplogpath : LibC::LPWSTR, genlow : UInt32, genhigh : UInt32) : HRESULT

  # Params # hbc : Void* [In],hrrestorestate : HRESULT [In]
  fun CertSrvRestoreRegisterComplete(hbc : Void*, hrrestorestate : HRESULT) : HRESULT

  # Params # hbc : Void* [In]
  fun CertSrvRestoreEnd(hbc : Void*) : HRESULT

  # Params # pwszservername : LibC::LPWSTR [In],dwcontrolflags : UInt32 [In],pcbout : UInt32* [In],ppbout : UInt8** [In]
  fun CertSrvServerControlW(pwszservername : LibC::LPWSTR, dwcontrolflags : UInt32, pcbout : UInt32*, ppbout : UInt8**) : HRESULT

  # Params # ptargetname : UNICODE_STRING* [In],ccriteria : UInt32 [In],rgpcriteria : CERT_SELECT_CRITERIA* [In],pptrustedissuers : SecPkgContext_IssuerListInfoEx** [In]
  fun PstGetTrustAnchors(ptargetname : UNICODE_STRING*, ccriteria : UInt32, rgpcriteria : CERT_SELECT_CRITERIA*, pptrustedissuers : SecPkgContext_IssuerListInfoEx**) : NTSTATUS

  # Params # ptargetname : UNICODE_STRING* [In],ccriteria : UInt32 [In],rgpcriteria : CERT_SELECT_CRITERIA* [In],pcertcontext : CERT_CONTEXT* [In],pptrustedissuers : SecPkgContext_IssuerListInfoEx** [In]
  fun PstGetTrustAnchorsEx(ptargetname : UNICODE_STRING*, ccriteria : UInt32, rgpcriteria : CERT_SELECT_CRITERIA*, pcertcontext : CERT_CONTEXT*, pptrustedissuers : SecPkgContext_IssuerListInfoEx**) : NTSTATUS

  # Params # pcert : CERT_CONTEXT* [In],ptrustedissuers : SecPkgContext_IssuerListInfoEx* [In],ppcertchaincontext : CERT_CHAIN_CONTEXT** [In]
  fun PstGetCertificateChain(pcert : CERT_CONTEXT*, ptrustedissuers : SecPkgContext_IssuerListInfoEx*, ppcertchaincontext : CERT_CHAIN_CONTEXT**) : NTSTATUS

  # Params # ptargetname : UNICODE_STRING* [In],ccriteria : UInt32 [In],rgpcriteria : CERT_SELECT_CRITERIA* [In],bisclient : LibC::BOOL [In],pdwcertchaincontextcount : UInt32* [In],ppcertchaincontexts : CERT_CHAIN_CONTEXT*** [In]
  fun PstGetCertificates(ptargetname : UNICODE_STRING*, ccriteria : UInt32, rgpcriteria : CERT_SELECT_CRITERIA*, bisclient : LibC::BOOL, pdwcertchaincontextcount : UInt32*, ppcertchaincontexts : CERT_CHAIN_CONTEXT***) : NTSTATUS

  # Params # pcert : CERT_CONTEXT* [In]
  fun PstAcquirePrivateKey(pcert : CERT_CONTEXT*) : NTSTATUS

  # Params # ptargetname : UNICODE_STRING* [In],bisclient : LibC::BOOL [In],prequestedissuancepolicy : CERT_USAGE_MATCH* [In],phadditionalcertstore : Void** [In],pcert : CERT_CONTEXT* [In],pprovguid : Guid* [In]
  fun PstValidate(ptargetname : UNICODE_STRING*, bisclient : LibC::BOOL, prequestedissuancepolicy : CERT_USAGE_MATCH*, phadditionalcertstore : Void**, pcert : CERT_CONTEXT*, pprovguid : Guid*) : NTSTATUS

  # Params # pcert : CERT_CONTEXT* [In],ptokeninformationtype : LSA_TOKEN_INFORMATION_TYPE* [In],pptokeninformation : Void** [In]
  fun PstMapCertificate(pcert : CERT_CONTEXT*, ptokeninformationtype : LSA_TOKEN_INFORMATION_TYPE*, pptokeninformation : Void**) : NTSTATUS

  # Params # pcertcontext : CERT_CONTEXT* [In],username : UNICODE_STRING* [In]
  fun PstGetUserNameForCertificate(pcertcontext : CERT_CONTEXT*, username : UNICODE_STRING*) : NTSTATUS
end
struct LibWin32::IEnumCERTVIEWCOLUMN
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def next(pindex : Int32*) : HRESULT
    @lpVtbl.value.next.unsafe_as(Proc(Int32*, HRESULT)).call(pindex)
  end
  def get_name(pstrout : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrout)
  end
  def get_display_name(pstrout : UInt8**) : HRESULT
    @lpVtbl.value.get_display_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrout)
  end
  def get_type(ptype : Int32*) : HRESULT
    @lpVtbl.value.get_type.unsafe_as(Proc(Int32*, HRESULT)).call(ptype)
  end
  def is_indexed(pindexed : Int32*) : HRESULT
    @lpVtbl.value.is_indexed.unsafe_as(Proc(Int32*, HRESULT)).call(pindexed)
  end
  def get_max_length(pmaxlength : Int32*) : HRESULT
    @lpVtbl.value.get_max_length.unsafe_as(Proc(Int32*, HRESULT)).call(pmaxlength)
  end
  def get_value(flags : ENUM_CERT_COLUMN_VALUE_FLAGS, pvarvalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_value.unsafe_as(Proc(ENUM_CERT_COLUMN_VALUE_FLAGS, VARIANT*, HRESULT)).call(flags, pvarvalue)
  end
  def skip(celt : Int32) : HRESULT
    @lpVtbl.value.skip.unsafe_as(Proc(Int32, HRESULT)).call(celt)
  end
  def reset : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(HRESULT)).call
  end
  def clone(ppenum : IEnumCERTVIEWCOLUMN*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(IEnumCERTVIEWCOLUMN*, HRESULT)).call(ppenum)
  end
end
struct LibWin32::IEnumCERTVIEWATTRIBUTE
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def next(pindex : Int32*) : HRESULT
    @lpVtbl.value.next.unsafe_as(Proc(Int32*, HRESULT)).call(pindex)
  end
  def get_name(pstrout : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrout)
  end
  def get_value(pstrout : UInt8**) : HRESULT
    @lpVtbl.value.get_value.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrout)
  end
  def skip(celt : Int32) : HRESULT
    @lpVtbl.value.skip.unsafe_as(Proc(Int32, HRESULT)).call(celt)
  end
  def reset : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(HRESULT)).call
  end
  def clone(ppenum : IEnumCERTVIEWATTRIBUTE*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(IEnumCERTVIEWATTRIBUTE*, HRESULT)).call(ppenum)
  end
end
struct LibWin32::IEnumCERTVIEWEXTENSION
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def next(pindex : Int32*) : HRESULT
    @lpVtbl.value.next.unsafe_as(Proc(Int32*, HRESULT)).call(pindex)
  end
  def get_name(pstrout : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrout)
  end
  def get_flags(pflags : Int32*) : HRESULT
    @lpVtbl.value.get_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pflags)
  end
  def get_value(type : CERT_PROPERTY_TYPE, flags : ENUM_CERT_COLUMN_VALUE_FLAGS, pvarvalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_value.unsafe_as(Proc(CERT_PROPERTY_TYPE, ENUM_CERT_COLUMN_VALUE_FLAGS, VARIANT*, HRESULT)).call(type, flags, pvarvalue)
  end
  def skip(celt : Int32) : HRESULT
    @lpVtbl.value.skip.unsafe_as(Proc(Int32, HRESULT)).call(celt)
  end
  def reset : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(HRESULT)).call
  end
  def clone(ppenum : IEnumCERTVIEWEXTENSION*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(IEnumCERTVIEWEXTENSION*, HRESULT)).call(ppenum)
  end
end
struct LibWin32::IEnumCERTVIEWROW
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def next(pindex : Int32*) : HRESULT
    @lpVtbl.value.next.unsafe_as(Proc(Int32*, HRESULT)).call(pindex)
  end
  def enum_cert_view_column(ppenum : IEnumCERTVIEWCOLUMN*) : HRESULT
    @lpVtbl.value.enum_cert_view_column.unsafe_as(Proc(IEnumCERTVIEWCOLUMN*, HRESULT)).call(ppenum)
  end
  def enum_cert_view_attribute(flags : Int32, ppenum : IEnumCERTVIEWATTRIBUTE*) : HRESULT
    @lpVtbl.value.enum_cert_view_attribute.unsafe_as(Proc(Int32, IEnumCERTVIEWATTRIBUTE*, HRESULT)).call(flags, ppenum)
  end
  def enum_cert_view_extension(flags : Int32, ppenum : IEnumCERTVIEWEXTENSION*) : HRESULT
    @lpVtbl.value.enum_cert_view_extension.unsafe_as(Proc(Int32, IEnumCERTVIEWEXTENSION*, HRESULT)).call(flags, ppenum)
  end
  def skip(celt : Int32) : HRESULT
    @lpVtbl.value.skip.unsafe_as(Proc(Int32, HRESULT)).call(celt)
  end
  def reset : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(HRESULT)).call
  end
  def clone(ppenum : IEnumCERTVIEWROW*) : HRESULT
    @lpVtbl.value.clone.unsafe_as(Proc(IEnumCERTVIEWROW*, HRESULT)).call(ppenum)
  end
  def get_max_index(pindex : Int32*) : HRESULT
    @lpVtbl.value.get_max_index.unsafe_as(Proc(Int32*, HRESULT)).call(pindex)
  end
end
struct LibWin32::ICertView
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def open_connection(strconfig : UInt8*) : HRESULT
    @lpVtbl.value.open_connection.unsafe_as(Proc(UInt8*, HRESULT)).call(strconfig)
  end
  def enum_cert_view_column(fresultcolumn : CVRC_COLUMN, ppenum : IEnumCERTVIEWCOLUMN*) : HRESULT
    @lpVtbl.value.enum_cert_view_column.unsafe_as(Proc(CVRC_COLUMN, IEnumCERTVIEWCOLUMN*, HRESULT)).call(fresultcolumn, ppenum)
  end
  def get_column_count(fresultcolumn : CVRC_COLUMN, pccolumn : Int32*) : HRESULT
    @lpVtbl.value.get_column_count.unsafe_as(Proc(CVRC_COLUMN, Int32*, HRESULT)).call(fresultcolumn, pccolumn)
  end
  def get_column_index(fresultcolumn : CVRC_COLUMN, strcolumnname : UInt8*, pcolumnindex : Int32*) : HRESULT
    @lpVtbl.value.get_column_index.unsafe_as(Proc(CVRC_COLUMN, UInt8*, Int32*, HRESULT)).call(fresultcolumn, strcolumnname, pcolumnindex)
  end
  def set_result_column_count(cresultcolumn : Int32) : HRESULT
    @lpVtbl.value.set_result_column_count.unsafe_as(Proc(Int32, HRESULT)).call(cresultcolumn)
  end
  def set_result_column(columnindex : Int32) : HRESULT
    @lpVtbl.value.set_result_column.unsafe_as(Proc(Int32, HRESULT)).call(columnindex)
  end
  def set_restriction(columnindex : CERT_VIEW_COLUMN_INDEX, seekoperator : CERT_VIEW_SEEK_OPERATOR_FLAGS, sortorder : Int32, pvarvalue : VARIANT*) : HRESULT
    @lpVtbl.value.set_restriction.unsafe_as(Proc(CERT_VIEW_COLUMN_INDEX, CERT_VIEW_SEEK_OPERATOR_FLAGS, Int32, VARIANT*, HRESULT)).call(columnindex, seekoperator, sortorder, pvarvalue)
  end
  def open_view(ppenum : IEnumCERTVIEWROW*) : HRESULT
    @lpVtbl.value.open_view.unsafe_as(Proc(IEnumCERTVIEWROW*, HRESULT)).call(ppenum)
  end
end
struct LibWin32::ICertView2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def open_connection(strconfig : UInt8*) : HRESULT
    @lpVtbl.value.open_connection.unsafe_as(Proc(UInt8*, HRESULT)).call(strconfig)
  end
  def enum_cert_view_column(fresultcolumn : CVRC_COLUMN, ppenum : IEnumCERTVIEWCOLUMN*) : HRESULT
    @lpVtbl.value.enum_cert_view_column.unsafe_as(Proc(CVRC_COLUMN, IEnumCERTVIEWCOLUMN*, HRESULT)).call(fresultcolumn, ppenum)
  end
  def get_column_count(fresultcolumn : CVRC_COLUMN, pccolumn : Int32*) : HRESULT
    @lpVtbl.value.get_column_count.unsafe_as(Proc(CVRC_COLUMN, Int32*, HRESULT)).call(fresultcolumn, pccolumn)
  end
  def get_column_index(fresultcolumn : CVRC_COLUMN, strcolumnname : UInt8*, pcolumnindex : Int32*) : HRESULT
    @lpVtbl.value.get_column_index.unsafe_as(Proc(CVRC_COLUMN, UInt8*, Int32*, HRESULT)).call(fresultcolumn, strcolumnname, pcolumnindex)
  end
  def set_result_column_count(cresultcolumn : Int32) : HRESULT
    @lpVtbl.value.set_result_column_count.unsafe_as(Proc(Int32, HRESULT)).call(cresultcolumn)
  end
  def set_result_column(columnindex : Int32) : HRESULT
    @lpVtbl.value.set_result_column.unsafe_as(Proc(Int32, HRESULT)).call(columnindex)
  end
  def set_restriction(columnindex : CERT_VIEW_COLUMN_INDEX, seekoperator : CERT_VIEW_SEEK_OPERATOR_FLAGS, sortorder : Int32, pvarvalue : VARIANT*) : HRESULT
    @lpVtbl.value.set_restriction.unsafe_as(Proc(CERT_VIEW_COLUMN_INDEX, CERT_VIEW_SEEK_OPERATOR_FLAGS, Int32, VARIANT*, HRESULT)).call(columnindex, seekoperator, sortorder, pvarvalue)
  end
  def open_view(ppenum : IEnumCERTVIEWROW*) : HRESULT
    @lpVtbl.value.open_view.unsafe_as(Proc(IEnumCERTVIEWROW*, HRESULT)).call(ppenum)
  end
  def set_table(table : CVRC_TABLE) : HRESULT
    @lpVtbl.value.set_table.unsafe_as(Proc(CVRC_TABLE, HRESULT)).call(table)
  end
end
struct LibWin32::ICertAdmin
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def is_valid_certificate(strconfig : UInt8*, strserialnumber : UInt8*, pdisposition : Int32*) : HRESULT
    @lpVtbl.value.is_valid_certificate.unsafe_as(Proc(UInt8*, UInt8*, Int32*, HRESULT)).call(strconfig, strserialnumber, pdisposition)
  end
  def get_revocation_reason(preason : Int32*) : HRESULT
    @lpVtbl.value.get_revocation_reason.unsafe_as(Proc(Int32*, HRESULT)).call(preason)
  end
  def revoke_certificate(strconfig : UInt8*, strserialnumber : UInt8*, reason : Int32, date : Float64) : HRESULT
    @lpVtbl.value.revoke_certificate.unsafe_as(Proc(UInt8*, UInt8*, Int32, Float64, HRESULT)).call(strconfig, strserialnumber, reason, date)
  end
  def set_request_attributes(strconfig : UInt8*, requestid : Int32, strattributes : UInt8*) : HRESULT
    @lpVtbl.value.set_request_attributes.unsafe_as(Proc(UInt8*, Int32, UInt8*, HRESULT)).call(strconfig, requestid, strattributes)
  end
  def set_certificate_extension(strconfig : UInt8*, requestid : Int32, strextensionname : UInt8*, type : CERT_PROPERTY_TYPE, flags : Int32, pvarvalue : VARIANT*) : HRESULT
    @lpVtbl.value.set_certificate_extension.unsafe_as(Proc(UInt8*, Int32, UInt8*, CERT_PROPERTY_TYPE, Int32, VARIANT*, HRESULT)).call(strconfig, requestid, strextensionname, type, flags, pvarvalue)
  end
  def deny_request(strconfig : UInt8*, requestid : Int32) : HRESULT
    @lpVtbl.value.deny_request.unsafe_as(Proc(UInt8*, Int32, HRESULT)).call(strconfig, requestid)
  end
  def resubmit_request(strconfig : UInt8*, requestid : Int32, pdisposition : Int32*) : HRESULT
    @lpVtbl.value.resubmit_request.unsafe_as(Proc(UInt8*, Int32, Int32*, HRESULT)).call(strconfig, requestid, pdisposition)
  end
  def publish_crl(strconfig : UInt8*, date : Float64) : HRESULT
    @lpVtbl.value.publish_crl.unsafe_as(Proc(UInt8*, Float64, HRESULT)).call(strconfig, date)
  end
  def get_crl(strconfig : UInt8*, flags : Int32, pstrcrl : UInt8**) : HRESULT
    @lpVtbl.value.get_crl.unsafe_as(Proc(UInt8*, Int32, UInt8**, HRESULT)).call(strconfig, flags, pstrcrl)
  end
  def import_certificate(strconfig : UInt8*, strcertificate : UInt8*, flags : CERT_IMPORT_FLAGS, prequestid : Int32*) : HRESULT
    @lpVtbl.value.import_certificate.unsafe_as(Proc(UInt8*, UInt8*, CERT_IMPORT_FLAGS, Int32*, HRESULT)).call(strconfig, strcertificate, flags, prequestid)
  end
end
struct LibWin32::ICertAdmin2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def is_valid_certificate(strconfig : UInt8*, strserialnumber : UInt8*, pdisposition : Int32*) : HRESULT
    @lpVtbl.value.is_valid_certificate.unsafe_as(Proc(UInt8*, UInt8*, Int32*, HRESULT)).call(strconfig, strserialnumber, pdisposition)
  end
  def get_revocation_reason(preason : Int32*) : HRESULT
    @lpVtbl.value.get_revocation_reason.unsafe_as(Proc(Int32*, HRESULT)).call(preason)
  end
  def revoke_certificate(strconfig : UInt8*, strserialnumber : UInt8*, reason : Int32, date : Float64) : HRESULT
    @lpVtbl.value.revoke_certificate.unsafe_as(Proc(UInt8*, UInt8*, Int32, Float64, HRESULT)).call(strconfig, strserialnumber, reason, date)
  end
  def set_request_attributes(strconfig : UInt8*, requestid : Int32, strattributes : UInt8*) : HRESULT
    @lpVtbl.value.set_request_attributes.unsafe_as(Proc(UInt8*, Int32, UInt8*, HRESULT)).call(strconfig, requestid, strattributes)
  end
  def set_certificate_extension(strconfig : UInt8*, requestid : Int32, strextensionname : UInt8*, type : CERT_PROPERTY_TYPE, flags : Int32, pvarvalue : VARIANT*) : HRESULT
    @lpVtbl.value.set_certificate_extension.unsafe_as(Proc(UInt8*, Int32, UInt8*, CERT_PROPERTY_TYPE, Int32, VARIANT*, HRESULT)).call(strconfig, requestid, strextensionname, type, flags, pvarvalue)
  end
  def deny_request(strconfig : UInt8*, requestid : Int32) : HRESULT
    @lpVtbl.value.deny_request.unsafe_as(Proc(UInt8*, Int32, HRESULT)).call(strconfig, requestid)
  end
  def resubmit_request(strconfig : UInt8*, requestid : Int32, pdisposition : Int32*) : HRESULT
    @lpVtbl.value.resubmit_request.unsafe_as(Proc(UInt8*, Int32, Int32*, HRESULT)).call(strconfig, requestid, pdisposition)
  end
  def publish_crl(strconfig : UInt8*, date : Float64) : HRESULT
    @lpVtbl.value.publish_crl.unsafe_as(Proc(UInt8*, Float64, HRESULT)).call(strconfig, date)
  end
  def get_crl(strconfig : UInt8*, flags : Int32, pstrcrl : UInt8**) : HRESULT
    @lpVtbl.value.get_crl.unsafe_as(Proc(UInt8*, Int32, UInt8**, HRESULT)).call(strconfig, flags, pstrcrl)
  end
  def import_certificate(strconfig : UInt8*, strcertificate : UInt8*, flags : CERT_IMPORT_FLAGS, prequestid : Int32*) : HRESULT
    @lpVtbl.value.import_certificate.unsafe_as(Proc(UInt8*, UInt8*, CERT_IMPORT_FLAGS, Int32*, HRESULT)).call(strconfig, strcertificate, flags, prequestid)
  end
  def publish_cr_ls(strconfig : UInt8*, date : Float64, crlflags : Int32) : HRESULT
    @lpVtbl.value.publish_cr_ls.unsafe_as(Proc(UInt8*, Float64, Int32, HRESULT)).call(strconfig, date, crlflags)
  end
  def get_ca_property(strconfig : UInt8*, propid : Int32, propindex : Int32, proptype : Int32, flags : Int32, pvarpropertyvalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_ca_property.unsafe_as(Proc(UInt8*, Int32, Int32, Int32, Int32, VARIANT*, HRESULT)).call(strconfig, propid, propindex, proptype, flags, pvarpropertyvalue)
  end
  def set_ca_property(strconfig : UInt8*, propid : Int32, propindex : Int32, proptype : CERT_PROPERTY_TYPE, pvarpropertyvalue : VARIANT*) : HRESULT
    @lpVtbl.value.set_ca_property.unsafe_as(Proc(UInt8*, Int32, Int32, CERT_PROPERTY_TYPE, VARIANT*, HRESULT)).call(strconfig, propid, propindex, proptype, pvarpropertyvalue)
  end
  def get_ca_property_flags(strconfig : UInt8*, propid : Int32, ppropflags : Int32*) : HRESULT
    @lpVtbl.value.get_ca_property_flags.unsafe_as(Proc(UInt8*, Int32, Int32*, HRESULT)).call(strconfig, propid, ppropflags)
  end
  def get_ca_property_display_name(strconfig : UInt8*, propid : Int32, pstrdisplayname : UInt8**) : HRESULT
    @lpVtbl.value.get_ca_property_display_name.unsafe_as(Proc(UInt8*, Int32, UInt8**, HRESULT)).call(strconfig, propid, pstrdisplayname)
  end
  def get_archived_key(strconfig : UInt8*, requestid : Int32, flags : Int32, pstrarchivedkey : UInt8**) : HRESULT
    @lpVtbl.value.get_archived_key.unsafe_as(Proc(UInt8*, Int32, Int32, UInt8**, HRESULT)).call(strconfig, requestid, flags, pstrarchivedkey)
  end
  def get_config_entry(strconfig : UInt8*, strnodepath : UInt8*, strentryname : UInt8*, pvarentry : VARIANT*) : HRESULT
    @lpVtbl.value.get_config_entry.unsafe_as(Proc(UInt8*, UInt8*, UInt8*, VARIANT*, HRESULT)).call(strconfig, strnodepath, strentryname, pvarentry)
  end
  def set_config_entry(strconfig : UInt8*, strnodepath : UInt8*, strentryname : UInt8*, pvarentry : VARIANT*) : HRESULT
    @lpVtbl.value.set_config_entry.unsafe_as(Proc(UInt8*, UInt8*, UInt8*, VARIANT*, HRESULT)).call(strconfig, strnodepath, strentryname, pvarentry)
  end
  def import_key(strconfig : UInt8*, requestid : Int32, strcerthash : UInt8*, flags : CERT_IMPORT_FLAGS, strkey : UInt8*) : HRESULT
    @lpVtbl.value.import_key.unsafe_as(Proc(UInt8*, Int32, UInt8*, CERT_IMPORT_FLAGS, UInt8*, HRESULT)).call(strconfig, requestid, strcerthash, flags, strkey)
  end
  def get_my_roles(strconfig : UInt8*, proles : CERTADMIN_GET_ROLES_FLAGS*) : HRESULT
    @lpVtbl.value.get_my_roles.unsafe_as(Proc(UInt8*, CERTADMIN_GET_ROLES_FLAGS*, HRESULT)).call(strconfig, proles)
  end
  def delete_row(strconfig : UInt8*, flags : CERT_DELETE_ROW_FLAGS, date : Float64, table : CVRC_TABLE, rowid : Int32, pcdeleted : Int32*) : HRESULT
    @lpVtbl.value.delete_row.unsafe_as(Proc(UInt8*, CERT_DELETE_ROW_FLAGS, Float64, CVRC_TABLE, Int32, Int32*, HRESULT)).call(strconfig, flags, date, table, rowid, pcdeleted)
  end
end
struct LibWin32::IOCSPProperty
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(pval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pval)
  end
  def get_value(pval : VARIANT*) : HRESULT
    @lpVtbl.value.get_value.unsafe_as(Proc(VARIANT*, HRESULT)).call(pval)
  end
  def put_value(newval : VARIANT) : HRESULT
    @lpVtbl.value.put_value.unsafe_as(Proc(VARIANT, HRESULT)).call(newval)
  end
  def get_modified(pval : Int16*) : HRESULT
    @lpVtbl.value.get_modified.unsafe_as(Proc(Int16*, HRESULT)).call(pval)
  end
end
struct LibWin32::IOCSPPropertyCollection
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get__new_enum(ppval : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IUnknown*, HRESULT)).call(ppval)
  end
  def get_item(index : Int32, pval : VARIANT*) : HRESULT
    @lpVtbl.value.get_item.unsafe_as(Proc(Int32, VARIANT*, HRESULT)).call(index, pval)
  end
  def get_count(pval : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_item_by_name(bstrpropname : UInt8*, pval : VARIANT*) : HRESULT
    @lpVtbl.value.get_item_by_name.unsafe_as(Proc(UInt8*, VARIANT*, HRESULT)).call(bstrpropname, pval)
  end
  def create_property(bstrpropname : UInt8*, pvarpropvalue : VARIANT*, ppval : IOCSPProperty*) : HRESULT
    @lpVtbl.value.create_property.unsafe_as(Proc(UInt8*, VARIANT*, IOCSPProperty*, HRESULT)).call(bstrpropname, pvarpropvalue, ppval)
  end
  def delete_property(bstrpropname : UInt8*) : HRESULT
    @lpVtbl.value.delete_property.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrpropname)
  end
  def initialize_from_properties(pvarproperties : VARIANT*) : HRESULT
    @lpVtbl.value.initialize_from_properties.unsafe_as(Proc(VARIANT*, HRESULT)).call(pvarproperties)
  end
  def get_all_properties(pvarproperties : VARIANT*) : HRESULT
    @lpVtbl.value.get_all_properties.unsafe_as(Proc(VARIANT*, HRESULT)).call(pvarproperties)
  end
end
struct LibWin32::IOCSPCAConfiguration
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_identifier(pval : UInt8**) : HRESULT
    @lpVtbl.value.get_identifier.unsafe_as(Proc(UInt8**, HRESULT)).call(pval)
  end
  def get_ca_certificate(pval : VARIANT*) : HRESULT
    @lpVtbl.value.get_ca_certificate.unsafe_as(Proc(VARIANT*, HRESULT)).call(pval)
  end
  def get_hash_algorithm(pval : UInt8**) : HRESULT
    @lpVtbl.value.get_hash_algorithm.unsafe_as(Proc(UInt8**, HRESULT)).call(pval)
  end
  def put_hash_algorithm(newval : UInt8*) : HRESULT
    @lpVtbl.value.put_hash_algorithm.unsafe_as(Proc(UInt8*, HRESULT)).call(newval)
  end
  def get_signing_flags(pval : UInt32*) : HRESULT
    @lpVtbl.value.get_signing_flags.unsafe_as(Proc(UInt32*, HRESULT)).call(pval)
  end
  def put_signing_flags(newval : UInt32) : HRESULT
    @lpVtbl.value.put_signing_flags.unsafe_as(Proc(UInt32, HRESULT)).call(newval)
  end
  def get_signing_certificate(pval : VARIANT*) : HRESULT
    @lpVtbl.value.get_signing_certificate.unsafe_as(Proc(VARIANT*, HRESULT)).call(pval)
  end
  def put_signing_certificate(newval : VARIANT) : HRESULT
    @lpVtbl.value.put_signing_certificate.unsafe_as(Proc(VARIANT, HRESULT)).call(newval)
  end
  def get_reminder_duration(pval : UInt32*) : HRESULT
    @lpVtbl.value.get_reminder_duration.unsafe_as(Proc(UInt32*, HRESULT)).call(pval)
  end
  def put_reminder_duration(newval : UInt32) : HRESULT
    @lpVtbl.value.put_reminder_duration.unsafe_as(Proc(UInt32, HRESULT)).call(newval)
  end
  def get_error_code(pval : UInt32*) : HRESULT
    @lpVtbl.value.get_error_code.unsafe_as(Proc(UInt32*, HRESULT)).call(pval)
  end
  def get_csp_name(pval : UInt8**) : HRESULT
    @lpVtbl.value.get_csp_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pval)
  end
  def get_key_spec(pval : UInt32*) : HRESULT
    @lpVtbl.value.get_key_spec.unsafe_as(Proc(UInt32*, HRESULT)).call(pval)
  end
  def get_provider_clsid(pval : UInt8**) : HRESULT
    @lpVtbl.value.get_provider_clsid.unsafe_as(Proc(UInt8**, HRESULT)).call(pval)
  end
  def put_provider_clsid(newval : UInt8*) : HRESULT
    @lpVtbl.value.put_provider_clsid.unsafe_as(Proc(UInt8*, HRESULT)).call(newval)
  end
  def get_provider_properties(pval : VARIANT*) : HRESULT
    @lpVtbl.value.get_provider_properties.unsafe_as(Proc(VARIANT*, HRESULT)).call(pval)
  end
  def put_provider_properties(newval : VARIANT) : HRESULT
    @lpVtbl.value.put_provider_properties.unsafe_as(Proc(VARIANT, HRESULT)).call(newval)
  end
  def get_modified(pval : Int16*) : HRESULT
    @lpVtbl.value.get_modified.unsafe_as(Proc(Int16*, HRESULT)).call(pval)
  end
  def get_local_revocation_information(pval : VARIANT*) : HRESULT
    @lpVtbl.value.get_local_revocation_information.unsafe_as(Proc(VARIANT*, HRESULT)).call(pval)
  end
  def put_local_revocation_information(newval : VARIANT) : HRESULT
    @lpVtbl.value.put_local_revocation_information.unsafe_as(Proc(VARIANT, HRESULT)).call(newval)
  end
  def get_signing_certificate_template(pval : UInt8**) : HRESULT
    @lpVtbl.value.get_signing_certificate_template.unsafe_as(Proc(UInt8**, HRESULT)).call(pval)
  end
  def put_signing_certificate_template(newval : UInt8*) : HRESULT
    @lpVtbl.value.put_signing_certificate_template.unsafe_as(Proc(UInt8*, HRESULT)).call(newval)
  end
  def get_ca_config(pval : UInt8**) : HRESULT
    @lpVtbl.value.get_ca_config.unsafe_as(Proc(UInt8**, HRESULT)).call(pval)
  end
  def put_ca_config(newval : UInt8*) : HRESULT
    @lpVtbl.value.put_ca_config.unsafe_as(Proc(UInt8*, HRESULT)).call(newval)
  end
end
struct LibWin32::IOCSPCAConfigurationCollection
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get__new_enum(pval : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IUnknown*, HRESULT)).call(pval)
  end
  def get_item(index : Int32, pval : VARIANT*) : HRESULT
    @lpVtbl.value.get_item.unsafe_as(Proc(Int32, VARIANT*, HRESULT)).call(index, pval)
  end
  def get_count(pval : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get_item_by_name(bstridentifier : UInt8*, pval : VARIANT*) : HRESULT
    @lpVtbl.value.get_item_by_name.unsafe_as(Proc(UInt8*, VARIANT*, HRESULT)).call(bstridentifier, pval)
  end
  def create_ca_configuration(bstridentifier : UInt8*, varcacert : VARIANT, ppval : IOCSPCAConfiguration*) : HRESULT
    @lpVtbl.value.create_ca_configuration.unsafe_as(Proc(UInt8*, VARIANT, IOCSPCAConfiguration*, HRESULT)).call(bstridentifier, varcacert, ppval)
  end
  def delete_ca_configuration(bstridentifier : UInt8*) : HRESULT
    @lpVtbl.value.delete_ca_configuration.unsafe_as(Proc(UInt8*, HRESULT)).call(bstridentifier)
  end
end
struct LibWin32::IOCSPAdmin
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_ocsp_service_properties(ppval : IOCSPPropertyCollection*) : HRESULT
    @lpVtbl.value.get_ocsp_service_properties.unsafe_as(Proc(IOCSPPropertyCollection*, HRESULT)).call(ppval)
  end
  def get_ocspca_configuration_collection(pval : IOCSPCAConfigurationCollection*) : HRESULT
    @lpVtbl.value.get_ocspca_configuration_collection.unsafe_as(Proc(IOCSPCAConfigurationCollection*, HRESULT)).call(pval)
  end
  def get_configuration(bstrservername : UInt8*, bforce : Int16) : HRESULT
    @lpVtbl.value.get_configuration.unsafe_as(Proc(UInt8*, Int16, HRESULT)).call(bstrservername, bforce)
  end
  def set_configuration(bstrservername : UInt8*, bforce : Int16) : HRESULT
    @lpVtbl.value.set_configuration.unsafe_as(Proc(UInt8*, Int16, HRESULT)).call(bstrservername, bforce)
  end
  def get_my_roles(bstrservername : UInt8*, proles : Int32*) : HRESULT
    @lpVtbl.value.get_my_roles.unsafe_as(Proc(UInt8*, Int32*, HRESULT)).call(bstrservername, proles)
  end
  def ping(bstrservername : UInt8*) : HRESULT
    @lpVtbl.value.ping.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrservername)
  end
  def set_security(bstrservername : UInt8*, bstrval : UInt8*) : HRESULT
    @lpVtbl.value.set_security.unsafe_as(Proc(UInt8*, UInt8*, HRESULT)).call(bstrservername, bstrval)
  end
  def get_security(bstrservername : UInt8*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_security.unsafe_as(Proc(UInt8*, UInt8**, HRESULT)).call(bstrservername, pval)
  end
  def get_signing_certificates(bstrservername : UInt8*, pcacertvar : VARIANT*, pval : VARIANT*) : HRESULT
    @lpVtbl.value.get_signing_certificates.unsafe_as(Proc(UInt8*, VARIANT*, VARIANT*, HRESULT)).call(bstrservername, pcacertvar, pval)
  end
  def get_hash_algorithms(bstrservername : UInt8*, bstrcaid : UInt8*, pval : VARIANT*) : HRESULT
    @lpVtbl.value.get_hash_algorithms.unsafe_as(Proc(UInt8*, UInt8*, VARIANT*, HRESULT)).call(bstrservername, bstrcaid, pval)
  end
end
struct LibWin32::ICertServerPolicy
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def set_context(context : Int32) : HRESULT
    @lpVtbl.value.set_context.unsafe_as(Proc(Int32, HRESULT)).call(context)
  end
  def get_request_property(strpropertyname : UInt8*, propertytype : Int32, pvarpropertyvalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_request_property.unsafe_as(Proc(UInt8*, Int32, VARIANT*, HRESULT)).call(strpropertyname, propertytype, pvarpropertyvalue)
  end
  def get_request_attribute(strattributename : UInt8*, pstrattributevalue : UInt8**) : HRESULT
    @lpVtbl.value.get_request_attribute.unsafe_as(Proc(UInt8*, UInt8**, HRESULT)).call(strattributename, pstrattributevalue)
  end
  def get_certificate_property(strpropertyname : UInt8*, propertytype : CERT_PROPERTY_TYPE, pvarpropertyvalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_certificate_property.unsafe_as(Proc(UInt8*, CERT_PROPERTY_TYPE, VARIANT*, HRESULT)).call(strpropertyname, propertytype, pvarpropertyvalue)
  end
  def set_certificate_property(strpropertyname : UInt8*, propertytype : Int32, pvarpropertyvalue : VARIANT*) : HRESULT
    @lpVtbl.value.set_certificate_property.unsafe_as(Proc(UInt8*, Int32, VARIANT*, HRESULT)).call(strpropertyname, propertytype, pvarpropertyvalue)
  end
  def get_certificate_extension(strextensionname : UInt8*, type : CERT_PROPERTY_TYPE, pvarvalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_certificate_extension.unsafe_as(Proc(UInt8*, CERT_PROPERTY_TYPE, VARIANT*, HRESULT)).call(strextensionname, type, pvarvalue)
  end
  def get_certificate_extension_flags(pextflags : Int32*) : HRESULT
    @lpVtbl.value.get_certificate_extension_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pextflags)
  end
  def set_certificate_extension(strextensionname : UInt8*, type : Int32, extflags : Int32, pvarvalue : VARIANT*) : HRESULT
    @lpVtbl.value.set_certificate_extension.unsafe_as(Proc(UInt8*, Int32, Int32, VARIANT*, HRESULT)).call(strextensionname, type, extflags, pvarvalue)
  end
  def enumerate_extensions_setup(flags : Int32) : HRESULT
    @lpVtbl.value.enumerate_extensions_setup.unsafe_as(Proc(Int32, HRESULT)).call(flags)
  end
  def enumerate_extensions(pstrextensionname : UInt8**) : HRESULT
    @lpVtbl.value.enumerate_extensions.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrextensionname)
  end
  def enumerate_extensions_close : HRESULT
    @lpVtbl.value.enumerate_extensions_close.unsafe_as(Proc(HRESULT)).call
  end
  def enumerate_attributes_setup(flags : Int32) : HRESULT
    @lpVtbl.value.enumerate_attributes_setup.unsafe_as(Proc(Int32, HRESULT)).call(flags)
  end
  def enumerate_attributes(pstrattributename : UInt8**) : HRESULT
    @lpVtbl.value.enumerate_attributes.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrattributename)
  end
  def enumerate_attributes_close : HRESULT
    @lpVtbl.value.enumerate_attributes_close.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::ICertServerExit
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def set_context(context : Int32) : HRESULT
    @lpVtbl.value.set_context.unsafe_as(Proc(Int32, HRESULT)).call(context)
  end
  def get_request_property(strpropertyname : UInt8*, propertytype : Int32, pvarpropertyvalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_request_property.unsafe_as(Proc(UInt8*, Int32, VARIANT*, HRESULT)).call(strpropertyname, propertytype, pvarpropertyvalue)
  end
  def get_request_attribute(strattributename : UInt8*, pstrattributevalue : UInt8**) : HRESULT
    @lpVtbl.value.get_request_attribute.unsafe_as(Proc(UInt8*, UInt8**, HRESULT)).call(strattributename, pstrattributevalue)
  end
  def get_certificate_property(strpropertyname : UInt8*, propertytype : Int32, pvarpropertyvalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_certificate_property.unsafe_as(Proc(UInt8*, Int32, VARIANT*, HRESULT)).call(strpropertyname, propertytype, pvarpropertyvalue)
  end
  def get_certificate_extension(strextensionname : UInt8*, type : Int32, pvarvalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_certificate_extension.unsafe_as(Proc(UInt8*, Int32, VARIANT*, HRESULT)).call(strextensionname, type, pvarvalue)
  end
  def get_certificate_extension_flags(pextflags : Int32*) : HRESULT
    @lpVtbl.value.get_certificate_extension_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pextflags)
  end
  def enumerate_extensions_setup(flags : Int32) : HRESULT
    @lpVtbl.value.enumerate_extensions_setup.unsafe_as(Proc(Int32, HRESULT)).call(flags)
  end
  def enumerate_extensions(pstrextensionname : UInt8**) : HRESULT
    @lpVtbl.value.enumerate_extensions.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrextensionname)
  end
  def enumerate_extensions_close : HRESULT
    @lpVtbl.value.enumerate_extensions_close.unsafe_as(Proc(HRESULT)).call
  end
  def enumerate_attributes_setup(flags : Int32) : HRESULT
    @lpVtbl.value.enumerate_attributes_setup.unsafe_as(Proc(Int32, HRESULT)).call(flags)
  end
  def enumerate_attributes(pstrattributename : UInt8**) : HRESULT
    @lpVtbl.value.enumerate_attributes.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrattributename)
  end
  def enumerate_attributes_close : HRESULT
    @lpVtbl.value.enumerate_attributes_close.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::ICertGetConfig
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_config(flags : CERT_GET_CONFIG_FLAGS, pstrout : UInt8**) : HRESULT
    @lpVtbl.value.get_config.unsafe_as(Proc(CERT_GET_CONFIG_FLAGS, UInt8**, HRESULT)).call(flags, pstrout)
  end
end
struct LibWin32::ICertConfig
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def reset(index : Int32, pcount : Int32*) : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(index, pcount)
  end
  def next(pindex : Int32*) : HRESULT
    @lpVtbl.value.next.unsafe_as(Proc(Int32*, HRESULT)).call(pindex)
  end
  def get_field(strfieldname : UInt8*, pstrout : UInt8**) : HRESULT
    @lpVtbl.value.get_field.unsafe_as(Proc(UInt8*, UInt8**, HRESULT)).call(strfieldname, pstrout)
  end
  def get_config(flags : Int32, pstrout : UInt8**) : HRESULT
    @lpVtbl.value.get_config.unsafe_as(Proc(Int32, UInt8**, HRESULT)).call(flags, pstrout)
  end
end
struct LibWin32::ICertConfig2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def reset(index : Int32, pcount : Int32*) : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(index, pcount)
  end
  def next(pindex : Int32*) : HRESULT
    @lpVtbl.value.next.unsafe_as(Proc(Int32*, HRESULT)).call(pindex)
  end
  def get_field(strfieldname : UInt8*, pstrout : UInt8**) : HRESULT
    @lpVtbl.value.get_field.unsafe_as(Proc(UInt8*, UInt8**, HRESULT)).call(strfieldname, pstrout)
  end
  def get_config(flags : Int32, pstrout : UInt8**) : HRESULT
    @lpVtbl.value.get_config.unsafe_as(Proc(Int32, UInt8**, HRESULT)).call(flags, pstrout)
  end
  def set_shared_folder(strsharedfolder : UInt8*) : HRESULT
    @lpVtbl.value.set_shared_folder.unsafe_as(Proc(UInt8*, HRESULT)).call(strsharedfolder)
  end
end
struct LibWin32::ICertRequest
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def submit(flags : Int32, strrequest : UInt8*, strattributes : UInt8*, strconfig : UInt8*, pdisposition : Int32*) : HRESULT
    @lpVtbl.value.submit.unsafe_as(Proc(Int32, UInt8*, UInt8*, UInt8*, Int32*, HRESULT)).call(flags, strrequest, strattributes, strconfig, pdisposition)
  end
  def retrieve_pending(requestid : Int32, strconfig : UInt8*, pdisposition : Int32*) : HRESULT
    @lpVtbl.value.retrieve_pending.unsafe_as(Proc(Int32, UInt8*, Int32*, HRESULT)).call(requestid, strconfig, pdisposition)
  end
  def get_last_status(pstatus : Int32*) : HRESULT
    @lpVtbl.value.get_last_status.unsafe_as(Proc(Int32*, HRESULT)).call(pstatus)
  end
  def get_request_id(prequestid : Int32*) : HRESULT
    @lpVtbl.value.get_request_id.unsafe_as(Proc(Int32*, HRESULT)).call(prequestid)
  end
  def get_disposition_message(pstrdispositionmessage : UInt8**) : HRESULT
    @lpVtbl.value.get_disposition_message.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrdispositionmessage)
  end
  def get_ca_certificate(fexchangecertificate : Int32, strconfig : UInt8*, flags : Int32, pstrcertificate : UInt8**) : HRESULT
    @lpVtbl.value.get_ca_certificate.unsafe_as(Proc(Int32, UInt8*, Int32, UInt8**, HRESULT)).call(fexchangecertificate, strconfig, flags, pstrcertificate)
  end
  def get_certificate(flags : Int32, pstrcertificate : UInt8**) : HRESULT
    @lpVtbl.value.get_certificate.unsafe_as(Proc(Int32, UInt8**, HRESULT)).call(flags, pstrcertificate)
  end
end
struct LibWin32::ICertRequest2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def submit(flags : Int32, strrequest : UInt8*, strattributes : UInt8*, strconfig : UInt8*, pdisposition : Int32*) : HRESULT
    @lpVtbl.value.submit.unsafe_as(Proc(Int32, UInt8*, UInt8*, UInt8*, Int32*, HRESULT)).call(flags, strrequest, strattributes, strconfig, pdisposition)
  end
  def retrieve_pending(requestid : Int32, strconfig : UInt8*, pdisposition : Int32*) : HRESULT
    @lpVtbl.value.retrieve_pending.unsafe_as(Proc(Int32, UInt8*, Int32*, HRESULT)).call(requestid, strconfig, pdisposition)
  end
  def get_last_status(pstatus : Int32*) : HRESULT
    @lpVtbl.value.get_last_status.unsafe_as(Proc(Int32*, HRESULT)).call(pstatus)
  end
  def get_request_id(prequestid : Int32*) : HRESULT
    @lpVtbl.value.get_request_id.unsafe_as(Proc(Int32*, HRESULT)).call(prequestid)
  end
  def get_disposition_message(pstrdispositionmessage : UInt8**) : HRESULT
    @lpVtbl.value.get_disposition_message.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrdispositionmessage)
  end
  def get_ca_certificate(fexchangecertificate : Int32, strconfig : UInt8*, flags : Int32, pstrcertificate : UInt8**) : HRESULT
    @lpVtbl.value.get_ca_certificate.unsafe_as(Proc(Int32, UInt8*, Int32, UInt8**, HRESULT)).call(fexchangecertificate, strconfig, flags, pstrcertificate)
  end
  def get_certificate(flags : Int32, pstrcertificate : UInt8**) : HRESULT
    @lpVtbl.value.get_certificate.unsafe_as(Proc(Int32, UInt8**, HRESULT)).call(flags, pstrcertificate)
  end
  def get_issued_certificate(strconfig : UInt8*, requestid : Int32, strserialnumber : UInt8*, pdisposition : CR_DISP*) : HRESULT
    @lpVtbl.value.get_issued_certificate.unsafe_as(Proc(UInt8*, Int32, UInt8*, CR_DISP*, HRESULT)).call(strconfig, requestid, strserialnumber, pdisposition)
  end
  def get_error_message_text(hrmessage : Int32, flags : Int32, pstrerrormessagetext : UInt8**) : HRESULT
    @lpVtbl.value.get_error_message_text.unsafe_as(Proc(Int32, Int32, UInt8**, HRESULT)).call(hrmessage, flags, pstrerrormessagetext)
  end
  def get_ca_property(strconfig : UInt8*, propid : Int32, propindex : Int32, proptype : Int32, flags : Int32, pvarpropertyvalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_ca_property.unsafe_as(Proc(UInt8*, Int32, Int32, Int32, Int32, VARIANT*, HRESULT)).call(strconfig, propid, propindex, proptype, flags, pvarpropertyvalue)
  end
  def get_ca_property_flags(strconfig : UInt8*, propid : Int32, ppropflags : Int32*) : HRESULT
    @lpVtbl.value.get_ca_property_flags.unsafe_as(Proc(UInt8*, Int32, Int32*, HRESULT)).call(strconfig, propid, ppropflags)
  end
  def get_ca_property_display_name(strconfig : UInt8*, propid : Int32, pstrdisplayname : UInt8**) : HRESULT
    @lpVtbl.value.get_ca_property_display_name.unsafe_as(Proc(UInt8*, Int32, UInt8**, HRESULT)).call(strconfig, propid, pstrdisplayname)
  end
  def get_full_response_property(propid : FULL_RESPONSE_PROPERTY_ID, propindex : Int32, proptype : CERT_PROPERTY_TYPE, flags : CERT_REQUEST_OUT_TYPE, pvarpropertyvalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_full_response_property.unsafe_as(Proc(FULL_RESPONSE_PROPERTY_ID, Int32, CERT_PROPERTY_TYPE, CERT_REQUEST_OUT_TYPE, VARIANT*, HRESULT)).call(propid, propindex, proptype, flags, pvarpropertyvalue)
  end
end
struct LibWin32::ICertRequest3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def submit(flags : Int32, strrequest : UInt8*, strattributes : UInt8*, strconfig : UInt8*, pdisposition : Int32*) : HRESULT
    @lpVtbl.value.submit.unsafe_as(Proc(Int32, UInt8*, UInt8*, UInt8*, Int32*, HRESULT)).call(flags, strrequest, strattributes, strconfig, pdisposition)
  end
  def retrieve_pending(requestid : Int32, strconfig : UInt8*, pdisposition : Int32*) : HRESULT
    @lpVtbl.value.retrieve_pending.unsafe_as(Proc(Int32, UInt8*, Int32*, HRESULT)).call(requestid, strconfig, pdisposition)
  end
  def get_last_status(pstatus : Int32*) : HRESULT
    @lpVtbl.value.get_last_status.unsafe_as(Proc(Int32*, HRESULT)).call(pstatus)
  end
  def get_request_id(prequestid : Int32*) : HRESULT
    @lpVtbl.value.get_request_id.unsafe_as(Proc(Int32*, HRESULT)).call(prequestid)
  end
  def get_disposition_message(pstrdispositionmessage : UInt8**) : HRESULT
    @lpVtbl.value.get_disposition_message.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrdispositionmessage)
  end
  def get_ca_certificate(fexchangecertificate : Int32, strconfig : UInt8*, flags : Int32, pstrcertificate : UInt8**) : HRESULT
    @lpVtbl.value.get_ca_certificate.unsafe_as(Proc(Int32, UInt8*, Int32, UInt8**, HRESULT)).call(fexchangecertificate, strconfig, flags, pstrcertificate)
  end
  def get_certificate(flags : Int32, pstrcertificate : UInt8**) : HRESULT
    @lpVtbl.value.get_certificate.unsafe_as(Proc(Int32, UInt8**, HRESULT)).call(flags, pstrcertificate)
  end
  def get_issued_certificate(strconfig : UInt8*, requestid : Int32, strserialnumber : UInt8*, pdisposition : CR_DISP*) : HRESULT
    @lpVtbl.value.get_issued_certificate.unsafe_as(Proc(UInt8*, Int32, UInt8*, CR_DISP*, HRESULT)).call(strconfig, requestid, strserialnumber, pdisposition)
  end
  def get_error_message_text(hrmessage : Int32, flags : Int32, pstrerrormessagetext : UInt8**) : HRESULT
    @lpVtbl.value.get_error_message_text.unsafe_as(Proc(Int32, Int32, UInt8**, HRESULT)).call(hrmessage, flags, pstrerrormessagetext)
  end
  def get_ca_property(strconfig : UInt8*, propid : Int32, propindex : Int32, proptype : Int32, flags : Int32, pvarpropertyvalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_ca_property.unsafe_as(Proc(UInt8*, Int32, Int32, Int32, Int32, VARIANT*, HRESULT)).call(strconfig, propid, propindex, proptype, flags, pvarpropertyvalue)
  end
  def get_ca_property_flags(strconfig : UInt8*, propid : Int32, ppropflags : Int32*) : HRESULT
    @lpVtbl.value.get_ca_property_flags.unsafe_as(Proc(UInt8*, Int32, Int32*, HRESULT)).call(strconfig, propid, ppropflags)
  end
  def get_ca_property_display_name(strconfig : UInt8*, propid : Int32, pstrdisplayname : UInt8**) : HRESULT
    @lpVtbl.value.get_ca_property_display_name.unsafe_as(Proc(UInt8*, Int32, UInt8**, HRESULT)).call(strconfig, propid, pstrdisplayname)
  end
  def get_full_response_property(propid : FULL_RESPONSE_PROPERTY_ID, propindex : Int32, proptype : CERT_PROPERTY_TYPE, flags : CERT_REQUEST_OUT_TYPE, pvarpropertyvalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_full_response_property.unsafe_as(Proc(FULL_RESPONSE_PROPERTY_ID, Int32, CERT_PROPERTY_TYPE, CERT_REQUEST_OUT_TYPE, VARIANT*, HRESULT)).call(propid, propindex, proptype, flags, pvarpropertyvalue)
  end
  def set_credential(hwnd : Int32, authtype : X509EnrollmentAuthFlags, strcredential : UInt8*, strpassword : UInt8*) : HRESULT
    @lpVtbl.value.set_credential.unsafe_as(Proc(Int32, X509EnrollmentAuthFlags, UInt8*, UInt8*, HRESULT)).call(hwnd, authtype, strcredential, strpassword)
  end
  def get_request_id_string(pstrrequestid : UInt8**) : HRESULT
    @lpVtbl.value.get_request_id_string.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrrequestid)
  end
  def get_issued_certificate2(strconfig : UInt8*, strrequestid : UInt8*, strserialnumber : UInt8*, pdisposition : CR_DISP*) : HRESULT
    @lpVtbl.value.get_issued_certificate2.unsafe_as(Proc(UInt8*, UInt8*, UInt8*, CR_DISP*, HRESULT)).call(strconfig, strrequestid, strserialnumber, pdisposition)
  end
  def get_refresh_policy(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_refresh_policy.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
end
struct LibWin32::ICertManageModule
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_property(strconfig : UInt8*, strstoragelocation : UInt8*, strpropertyname : UInt8*, flags : Int32, pvarproperty : VARIANT*) : HRESULT
    @lpVtbl.value.get_property.unsafe_as(Proc(UInt8*, UInt8*, UInt8*, Int32, VARIANT*, HRESULT)).call(strconfig, strstoragelocation, strpropertyname, flags, pvarproperty)
  end
  def set_property(strconfig : UInt8*, strstoragelocation : UInt8*, strpropertyname : UInt8*, flags : Int32, pvarproperty : VARIANT*) : HRESULT
    @lpVtbl.value.set_property.unsafe_as(Proc(UInt8*, UInt8*, UInt8*, Int32, VARIANT*, HRESULT)).call(strconfig, strstoragelocation, strpropertyname, flags, pvarproperty)
  end
  def configure(strconfig : UInt8*, strstoragelocation : UInt8*, flags : Int32) : HRESULT
    @lpVtbl.value.configure.unsafe_as(Proc(UInt8*, UInt8*, Int32, HRESULT)).call(strconfig, strstoragelocation, flags)
  end
end
struct LibWin32::ICertPolicy
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(strconfig : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(UInt8*, HRESULT)).call(strconfig)
  end
  def verify_request(strconfig : UInt8*, context : Int32, bnewrequest : Int32, flags : Int32, pdisposition : Int32*) : HRESULT
    @lpVtbl.value.verify_request.unsafe_as(Proc(UInt8*, Int32, Int32, Int32, Int32*, HRESULT)).call(strconfig, context, bnewrequest, flags, pdisposition)
  end
  def get_description(pstrdescription : UInt8**) : HRESULT
    @lpVtbl.value.get_description.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrdescription)
  end
  def shut_down : HRESULT
    @lpVtbl.value.shut_down.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::ICertPolicy2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(strconfig : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(UInt8*, HRESULT)).call(strconfig)
  end
  def verify_request(strconfig : UInt8*, context : Int32, bnewrequest : Int32, flags : Int32, pdisposition : Int32*) : HRESULT
    @lpVtbl.value.verify_request.unsafe_as(Proc(UInt8*, Int32, Int32, Int32, Int32*, HRESULT)).call(strconfig, context, bnewrequest, flags, pdisposition)
  end
  def get_description(pstrdescription : UInt8**) : HRESULT
    @lpVtbl.value.get_description.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrdescription)
  end
  def shut_down : HRESULT
    @lpVtbl.value.shut_down.unsafe_as(Proc(HRESULT)).call
  end
  def get_manage_module(ppmanagemodule : ICertManageModule*) : HRESULT
    @lpVtbl.value.get_manage_module.unsafe_as(Proc(ICertManageModule*, HRESULT)).call(ppmanagemodule)
  end
end
struct LibWin32::INDESPolicy
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def initialize : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(HRESULT)).call
  end
  def uninitialize : HRESULT
    @lpVtbl.value.uninitialize.unsafe_as(Proc(HRESULT)).call
  end
  def generate_challenge(pwsztemplate : LibC::LPWSTR, pwszparams : LibC::LPWSTR, ppwszresponse : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.generate_challenge.unsafe_as(Proc(LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR*, HRESULT)).call(pwsztemplate, pwszparams, ppwszresponse)
  end
  def verify_request(pctbrequest : CERTTRANSBLOB*, pctbsigningcertencoded : CERTTRANSBLOB*, pwsztemplate : LibC::LPWSTR, pwsztransactionid : LibC::LPWSTR, pfverified : LibC::BOOL*) : HRESULT
    @lpVtbl.value.verify_request.unsafe_as(Proc(CERTTRANSBLOB*, CERTTRANSBLOB*, LibC::LPWSTR, LibC::LPWSTR, LibC::BOOL*, HRESULT)).call(pctbrequest, pctbsigningcertencoded, pwsztemplate, pwsztransactionid, pfverified)
  end
  def notify(pwszchallenge : LibC::LPWSTR, pwsztransactionid : LibC::LPWSTR, disposition : X509SCEPDisposition, lasthresult : Int32, pctbissuedcertencoded : CERTTRANSBLOB*) : HRESULT
    @lpVtbl.value.notify.unsafe_as(Proc(LibC::LPWSTR, LibC::LPWSTR, X509SCEPDisposition, Int32, CERTTRANSBLOB*, HRESULT)).call(pwszchallenge, pwsztransactionid, disposition, lasthresult, pctbissuedcertencoded)
  end
end
struct LibWin32::IObjectId
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize_from_name(name : CERTENROLL_OBJECTID) : HRESULT
    @lpVtbl.value.initialize_from_name.unsafe_as(Proc(CERTENROLL_OBJECTID, HRESULT)).call(name)
  end
  def initialize_from_value(strvalue : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_value.unsafe_as(Proc(UInt8*, HRESULT)).call(strvalue)
  end
  def initialize_from_algorithm_name(groupid : ObjectIdGroupId, keyflags : ObjectIdPublicKeyFlags, algflags : AlgorithmFlags, stralgorithmname : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_algorithm_name.unsafe_as(Proc(ObjectIdGroupId, ObjectIdPublicKeyFlags, AlgorithmFlags, UInt8*, HRESULT)).call(groupid, keyflags, algflags, stralgorithmname)
  end
  def get_name(pvalue : CERTENROLL_OBJECTID*) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(CERTENROLL_OBJECTID*, HRESULT)).call(pvalue)
  end
  def get_friendly_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_friendly_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_friendly_name(value : UInt8*) : HRESULT
    @lpVtbl.value.put_friendly_name.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_value(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_value.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def get_algorithm_name(groupid : ObjectIdGroupId, keyflags : ObjectIdPublicKeyFlags, pstralgorithmname : UInt8**) : HRESULT
    @lpVtbl.value.get_algorithm_name.unsafe_as(Proc(ObjectIdGroupId, ObjectIdPublicKeyFlags, UInt8**, HRESULT)).call(groupid, keyflags, pstralgorithmname)
  end
end
struct LibWin32::IObjectIds
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_item_by_index(index : Int32, pval : IObjectId*) : HRESULT
    @lpVtbl.value.get_item_by_index.unsafe_as(Proc(Int32, IObjectId*, HRESULT)).call(index, pval)
  end
  def get_count(pval : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get__new_enum(pval : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IUnknown*, HRESULT)).call(pval)
  end
  def add(pval : IObjectId) : HRESULT
    @lpVtbl.value.add.unsafe_as(Proc(IObjectId, HRESULT)).call(pval)
  end
  def remove(index : Int32) : HRESULT
    @lpVtbl.value.remove.unsafe_as(Proc(Int32, HRESULT)).call(index)
  end
  def clear : HRESULT
    @lpVtbl.value.clear.unsafe_as(Proc(HRESULT)).call
  end
  def add_range(pvalue : IObjectIds) : HRESULT
    @lpVtbl.value.add_range.unsafe_as(Proc(IObjectIds, HRESULT)).call(pvalue)
  end
end
struct LibWin32::IBinaryConverter
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def string_to_string(strencodedin : UInt8*, encodingin : EncodingType, encoding : EncodingType, pstrencoded : UInt8**) : HRESULT
    @lpVtbl.value.string_to_string.unsafe_as(Proc(UInt8*, EncodingType, EncodingType, UInt8**, HRESULT)).call(strencodedin, encodingin, encoding, pstrencoded)
  end
  def variant_byte_array_to_string(pvarbytearray : VARIANT*, encoding : EncodingType, pstrencoded : UInt8**) : HRESULT
    @lpVtbl.value.variant_byte_array_to_string.unsafe_as(Proc(VARIANT*, EncodingType, UInt8**, HRESULT)).call(pvarbytearray, encoding, pstrencoded)
  end
  def string_to_variant_byte_array(strencoded : UInt8*, encoding : EncodingType, pvarbytearray : VARIANT*) : HRESULT
    @lpVtbl.value.string_to_variant_byte_array.unsafe_as(Proc(UInt8*, EncodingType, VARIANT*, HRESULT)).call(strencoded, encoding, pvarbytearray)
  end
end
struct LibWin32::IBinaryConverter2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def string_to_string(strencodedin : UInt8*, encodingin : EncodingType, encoding : EncodingType, pstrencoded : UInt8**) : HRESULT
    @lpVtbl.value.string_to_string.unsafe_as(Proc(UInt8*, EncodingType, EncodingType, UInt8**, HRESULT)).call(strencodedin, encodingin, encoding, pstrencoded)
  end
  def variant_byte_array_to_string(pvarbytearray : VARIANT*, encoding : EncodingType, pstrencoded : UInt8**) : HRESULT
    @lpVtbl.value.variant_byte_array_to_string.unsafe_as(Proc(VARIANT*, EncodingType, UInt8**, HRESULT)).call(pvarbytearray, encoding, pstrencoded)
  end
  def string_to_variant_byte_array(strencoded : UInt8*, encoding : EncodingType, pvarbytearray : VARIANT*) : HRESULT
    @lpVtbl.value.string_to_variant_byte_array.unsafe_as(Proc(UInt8*, EncodingType, VARIANT*, HRESULT)).call(strencoded, encoding, pvarbytearray)
  end
  def string_array_to_variant_array(pvarstringarray : VARIANT*, pvarvariantarray : VARIANT*) : HRESULT
    @lpVtbl.value.string_array_to_variant_array.unsafe_as(Proc(VARIANT*, VARIANT*, HRESULT)).call(pvarstringarray, pvarvariantarray)
  end
  def variant_array_to_string_array(pvarvariantarray : VARIANT*, pvarstringarray : VARIANT*) : HRESULT
    @lpVtbl.value.variant_array_to_string_array.unsafe_as(Proc(VARIANT*, VARIANT*, HRESULT)).call(pvarvariantarray, pvarstringarray)
  end
end
struct LibWin32::IX500DistinguishedName
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def decode(strencodedname : UInt8*, encoding : EncodingType, nameflags : X500NameFlags) : HRESULT
    @lpVtbl.value.decode.unsafe_as(Proc(UInt8*, EncodingType, X500NameFlags, HRESULT)).call(strencodedname, encoding, nameflags)
  end
  def encode(strname : UInt8*, nameflags : X500NameFlags) : HRESULT
    @lpVtbl.value.encode.unsafe_as(Proc(UInt8*, X500NameFlags, HRESULT)).call(strname, nameflags)
  end
  def get_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def get_encoded_name(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_encoded_name.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
end
struct LibWin32::IX509EnrollmentStatus
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def append_text(strtext : UInt8*) : HRESULT
    @lpVtbl.value.append_text.unsafe_as(Proc(UInt8*, HRESULT)).call(strtext)
  end
  def get_text(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_text.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_text(value : UInt8*) : HRESULT
    @lpVtbl.value.put_text.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_selected(pvalue : EnrollmentSelectionStatus*) : HRESULT
    @lpVtbl.value.get_selected.unsafe_as(Proc(EnrollmentSelectionStatus*, HRESULT)).call(pvalue)
  end
  def put_selected(value : EnrollmentSelectionStatus) : HRESULT
    @lpVtbl.value.put_selected.unsafe_as(Proc(EnrollmentSelectionStatus, HRESULT)).call(value)
  end
  def get_display(pvalue : EnrollmentDisplayStatus*) : HRESULT
    @lpVtbl.value.get_display.unsafe_as(Proc(EnrollmentDisplayStatus*, HRESULT)).call(pvalue)
  end
  def put_display(value : EnrollmentDisplayStatus) : HRESULT
    @lpVtbl.value.put_display.unsafe_as(Proc(EnrollmentDisplayStatus, HRESULT)).call(value)
  end
  def get_status(pvalue : EnrollmentEnrollStatus*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(EnrollmentEnrollStatus*, HRESULT)).call(pvalue)
  end
  def put_status(value : EnrollmentEnrollStatus) : HRESULT
    @lpVtbl.value.put_status.unsafe_as(Proc(EnrollmentEnrollStatus, HRESULT)).call(value)
  end
  def get_error(pvalue : HRESULT*) : HRESULT
    @lpVtbl.value.get_error.unsafe_as(Proc(HRESULT*, HRESULT)).call(pvalue)
  end
  def put_error(value : HRESULT) : HRESULT
    @lpVtbl.value.put_error.unsafe_as(Proc(HRESULT, HRESULT)).call(value)
  end
  def get_error_text(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_error_text.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
end
struct LibWin32::ICspAlgorithm
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_algorithm_oid(length : Int32, algflags : AlgorithmFlags, ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_algorithm_oid.unsafe_as(Proc(Int32, AlgorithmFlags, IObjectId*, HRESULT)).call(length, algflags, ppvalue)
  end
  def get_default_length(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_default_length.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def get_increment_length(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_increment_length.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def get_long_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_long_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def get_valid(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_valid.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_max_length(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_max_length.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def get_min_length(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_min_length.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def get_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def get_type(pvalue : AlgorithmType*) : HRESULT
    @lpVtbl.value.get_type.unsafe_as(Proc(AlgorithmType*, HRESULT)).call(pvalue)
  end
  def get_operations(pvalue : AlgorithmOperationFlags*) : HRESULT
    @lpVtbl.value.get_operations.unsafe_as(Proc(AlgorithmOperationFlags*, HRESULT)).call(pvalue)
  end
end
struct LibWin32::ICspAlgorithms
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_item_by_index(index : Int32, pval : ICspAlgorithm*) : HRESULT
    @lpVtbl.value.get_item_by_index.unsafe_as(Proc(Int32, ICspAlgorithm*, HRESULT)).call(index, pval)
  end
  def get_count(pval : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get__new_enum(pval : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IUnknown*, HRESULT)).call(pval)
  end
  def add(pval : ICspAlgorithm) : HRESULT
    @lpVtbl.value.add.unsafe_as(Proc(ICspAlgorithm, HRESULT)).call(pval)
  end
  def remove(index : Int32) : HRESULT
    @lpVtbl.value.remove.unsafe_as(Proc(Int32, HRESULT)).call(index)
  end
  def clear : HRESULT
    @lpVtbl.value.clear.unsafe_as(Proc(HRESULT)).call
  end
  def get_item_by_name(strname : UInt8*, ppvalue : ICspAlgorithm*) : HRESULT
    @lpVtbl.value.get_item_by_name.unsafe_as(Proc(UInt8*, ICspAlgorithm*, HRESULT)).call(strname, ppvalue)
  end
  def get_index_by_object_id(pobjectid : IObjectId, pindex : Int32*) : HRESULT
    @lpVtbl.value.get_index_by_object_id.unsafe_as(Proc(IObjectId, Int32*, HRESULT)).call(pobjectid, pindex)
  end
end
struct LibWin32::ICspInformation
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize_from_name(strname : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_name.unsafe_as(Proc(UInt8*, HRESULT)).call(strname)
  end
  def initialize_from_type(type : X509ProviderType, palgorithm : IObjectId, machinecontext : Int16) : HRESULT
    @lpVtbl.value.initialize_from_type.unsafe_as(Proc(X509ProviderType, IObjectId, Int16, HRESULT)).call(type, palgorithm, machinecontext)
  end
  def get_csp_algorithms(ppvalue : ICspAlgorithms*) : HRESULT
    @lpVtbl.value.get_csp_algorithms.unsafe_as(Proc(ICspAlgorithms*, HRESULT)).call(ppvalue)
  end
  def get_has_hardware_random_number_generator(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_has_hardware_random_number_generator.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_is_hardware_device(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_is_hardware_device.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_is_removable(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_is_removable.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_is_software_device(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_is_software_device.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_valid(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_valid.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_max_key_container_name_length(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_max_key_container_name_length.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def get_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def get_type(pvalue : X509ProviderType*) : HRESULT
    @lpVtbl.value.get_type.unsafe_as(Proc(X509ProviderType*, HRESULT)).call(pvalue)
  end
  def get_version(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_version.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def get_key_spec(pvalue : X509KeySpec*) : HRESULT
    @lpVtbl.value.get_key_spec.unsafe_as(Proc(X509KeySpec*, HRESULT)).call(pvalue)
  end
  def get_is_smart_card(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_is_smart_card.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_default_security_descriptor(machinecontext : Int16, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_default_security_descriptor.unsafe_as(Proc(Int16, UInt8**, HRESULT)).call(machinecontext, pvalue)
  end
  def get_legacy_csp(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_legacy_csp.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_csp_status_from_operations(palgorithm : IObjectId, operations : AlgorithmOperationFlags, ppvalue : ICspStatus*) : HRESULT
    @lpVtbl.value.get_csp_status_from_operations.unsafe_as(Proc(IObjectId, AlgorithmOperationFlags, ICspStatus*, HRESULT)).call(palgorithm, operations, ppvalue)
  end
end
struct LibWin32::ICspInformations
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_item_by_index(index : Int32, pval : ICspInformation*) : HRESULT
    @lpVtbl.value.get_item_by_index.unsafe_as(Proc(Int32, ICspInformation*, HRESULT)).call(index, pval)
  end
  def get_count(pval : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get__new_enum(pval : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IUnknown*, HRESULT)).call(pval)
  end
  def add(pval : ICspInformation) : HRESULT
    @lpVtbl.value.add.unsafe_as(Proc(ICspInformation, HRESULT)).call(pval)
  end
  def remove(index : Int32) : HRESULT
    @lpVtbl.value.remove.unsafe_as(Proc(Int32, HRESULT)).call(index)
  end
  def clear : HRESULT
    @lpVtbl.value.clear.unsafe_as(Proc(HRESULT)).call
  end
  def add_available_csps : HRESULT
    @lpVtbl.value.add_available_csps.unsafe_as(Proc(HRESULT)).call
  end
  def get_item_by_name(strname : UInt8*, ppcspinformation : ICspInformation*) : HRESULT
    @lpVtbl.value.get_item_by_name.unsafe_as(Proc(UInt8*, ICspInformation*, HRESULT)).call(strname, ppcspinformation)
  end
  def get_csp_status_from_provider_name(strprovidername : UInt8*, legacykeyspec : X509KeySpec, ppvalue : ICspStatus*) : HRESULT
    @lpVtbl.value.get_csp_status_from_provider_name.unsafe_as(Proc(UInt8*, X509KeySpec, ICspStatus*, HRESULT)).call(strprovidername, legacykeyspec, ppvalue)
  end
  def get_csp_statuses_from_operations(operations : AlgorithmOperationFlags, pcspinformation : ICspInformation, ppvalue : ICspStatuses*) : HRESULT
    @lpVtbl.value.get_csp_statuses_from_operations.unsafe_as(Proc(AlgorithmOperationFlags, ICspInformation, ICspStatuses*, HRESULT)).call(operations, pcspinformation, ppvalue)
  end
  def get_encryption_csp_algorithms(pcspinformation : ICspInformation, ppvalue : ICspAlgorithms*) : HRESULT
    @lpVtbl.value.get_encryption_csp_algorithms.unsafe_as(Proc(ICspInformation, ICspAlgorithms*, HRESULT)).call(pcspinformation, ppvalue)
  end
  def get_hash_algorithms(pcspinformation : ICspInformation, ppvalue : IObjectIds*) : HRESULT
    @lpVtbl.value.get_hash_algorithms.unsafe_as(Proc(ICspInformation, IObjectIds*, HRESULT)).call(pcspinformation, ppvalue)
  end
end
struct LibWin32::ICspStatus
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(pcsp : ICspInformation, palgorithm : ICspAlgorithm) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(ICspInformation, ICspAlgorithm, HRESULT)).call(pcsp, palgorithm)
  end
  def get_ordinal(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_ordinal.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def put_ordinal(value : Int32) : HRESULT
    @lpVtbl.value.put_ordinal.unsafe_as(Proc(Int32, HRESULT)).call(value)
  end
  def get_csp_algorithm(ppvalue : ICspAlgorithm*) : HRESULT
    @lpVtbl.value.get_csp_algorithm.unsafe_as(Proc(ICspAlgorithm*, HRESULT)).call(ppvalue)
  end
  def get_csp_information(ppvalue : ICspInformation*) : HRESULT
    @lpVtbl.value.get_csp_information.unsafe_as(Proc(ICspInformation*, HRESULT)).call(ppvalue)
  end
  def get_enrollment_status(ppvalue : IX509EnrollmentStatus*) : HRESULT
    @lpVtbl.value.get_enrollment_status.unsafe_as(Proc(IX509EnrollmentStatus*, HRESULT)).call(ppvalue)
  end
  def get_display_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_display_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
end
struct LibWin32::ICspStatuses
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_item_by_index(index : Int32, pval : ICspStatus*) : HRESULT
    @lpVtbl.value.get_item_by_index.unsafe_as(Proc(Int32, ICspStatus*, HRESULT)).call(index, pval)
  end
  def get_count(pval : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get__new_enum(pval : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IUnknown*, HRESULT)).call(pval)
  end
  def add(pval : ICspStatus) : HRESULT
    @lpVtbl.value.add.unsafe_as(Proc(ICspStatus, HRESULT)).call(pval)
  end
  def remove(index : Int32) : HRESULT
    @lpVtbl.value.remove.unsafe_as(Proc(Int32, HRESULT)).call(index)
  end
  def clear : HRESULT
    @lpVtbl.value.clear.unsafe_as(Proc(HRESULT)).call
  end
  def get_item_by_name(strcspname : UInt8*, stralgorithmname : UInt8*, ppvalue : ICspStatus*) : HRESULT
    @lpVtbl.value.get_item_by_name.unsafe_as(Proc(UInt8*, UInt8*, ICspStatus*, HRESULT)).call(strcspname, stralgorithmname, ppvalue)
  end
  def get_item_by_ordinal(ordinal : Int32, ppvalue : ICspStatus*) : HRESULT
    @lpVtbl.value.get_item_by_ordinal.unsafe_as(Proc(Int32, ICspStatus*, HRESULT)).call(ordinal, ppvalue)
  end
  def get_item_by_operations(strcspname : UInt8*, stralgorithmname : UInt8*, operations : AlgorithmOperationFlags, ppvalue : ICspStatus*) : HRESULT
    @lpVtbl.value.get_item_by_operations.unsafe_as(Proc(UInt8*, UInt8*, AlgorithmOperationFlags, ICspStatus*, HRESULT)).call(strcspname, stralgorithmname, operations, ppvalue)
  end
  def get_item_by_provider(pcspstatus : ICspStatus, ppvalue : ICspStatus*) : HRESULT
    @lpVtbl.value.get_item_by_provider.unsafe_as(Proc(ICspStatus, ICspStatus*, HRESULT)).call(pcspstatus, ppvalue)
  end
end
struct LibWin32::IX509PublicKey
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(pobjectid : IObjectId, strencodedkey : UInt8*, strencodedparameters : UInt8*, encoding : EncodingType) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IObjectId, UInt8*, UInt8*, EncodingType, HRESULT)).call(pobjectid, strencodedkey, strencodedparameters, encoding)
  end
  def initialize_from_encoded_public_key_info(strencodedpublickeyinfo : UInt8*, encoding : EncodingType) : HRESULT
    @lpVtbl.value.initialize_from_encoded_public_key_info.unsafe_as(Proc(UInt8*, EncodingType, HRESULT)).call(strencodedpublickeyinfo, encoding)
  end
  def get_algorithm(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_algorithm.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_length(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def get_encoded_key(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_encoded_key.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_encoded_parameters(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_encoded_parameters.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def compute_key_identifier(algorithm : KeyIdentifierHashAlgorithm, encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.compute_key_identifier.unsafe_as(Proc(KeyIdentifierHashAlgorithm, EncodingType, UInt8**, HRESULT)).call(algorithm, encoding, pvalue)
  end
end
struct LibWin32::IX509PrivateKey
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def open : HRESULT
    @lpVtbl.value.open.unsafe_as(Proc(HRESULT)).call
  end
  def create : HRESULT
    @lpVtbl.value.create.unsafe_as(Proc(HRESULT)).call
  end
  def close : HRESULT
    @lpVtbl.value.close.unsafe_as(Proc(HRESULT)).call
  end
  def delete : HRESULT
    @lpVtbl.value.delete.unsafe_as(Proc(HRESULT)).call
  end
  def verify(verifytype : X509PrivateKeyVerify) : HRESULT
    @lpVtbl.value.verify.unsafe_as(Proc(X509PrivateKeyVerify, HRESULT)).call(verifytype)
  end
  def import(strexporttype : UInt8*, strencodedkey : UInt8*, encoding : EncodingType) : HRESULT
    @lpVtbl.value.import.unsafe_as(Proc(UInt8*, UInt8*, EncodingType, HRESULT)).call(strexporttype, strencodedkey, encoding)
  end
  def export(strexporttype : UInt8*, encoding : EncodingType, pstrencodedkey : UInt8**) : HRESULT
    @lpVtbl.value.export.unsafe_as(Proc(UInt8*, EncodingType, UInt8**, HRESULT)).call(strexporttype, encoding, pstrencodedkey)
  end
  def export_public_key(pppublickey : IX509PublicKey*) : HRESULT
    @lpVtbl.value.export_public_key.unsafe_as(Proc(IX509PublicKey*, HRESULT)).call(pppublickey)
  end
  def get_container_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_container_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_container_name(value : UInt8*) : HRESULT
    @lpVtbl.value.put_container_name.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_container_name_prefix(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_container_name_prefix.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_container_name_prefix(value : UInt8*) : HRESULT
    @lpVtbl.value.put_container_name_prefix.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_reader_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_reader_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_reader_name(value : UInt8*) : HRESULT
    @lpVtbl.value.put_reader_name.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_csp_informations(ppvalue : ICspInformations*) : HRESULT
    @lpVtbl.value.get_csp_informations.unsafe_as(Proc(ICspInformations*, HRESULT)).call(ppvalue)
  end
  def put_csp_informations(pvalue : ICspInformations) : HRESULT
    @lpVtbl.value.put_csp_informations.unsafe_as(Proc(ICspInformations, HRESULT)).call(pvalue)
  end
  def get_csp_status(ppvalue : ICspStatus*) : HRESULT
    @lpVtbl.value.get_csp_status.unsafe_as(Proc(ICspStatus*, HRESULT)).call(ppvalue)
  end
  def put_csp_status(pvalue : ICspStatus) : HRESULT
    @lpVtbl.value.put_csp_status.unsafe_as(Proc(ICspStatus, HRESULT)).call(pvalue)
  end
  def get_provider_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_provider_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_provider_name(value : UInt8*) : HRESULT
    @lpVtbl.value.put_provider_name.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_provider_type(pvalue : X509ProviderType*) : HRESULT
    @lpVtbl.value.get_provider_type.unsafe_as(Proc(X509ProviderType*, HRESULT)).call(pvalue)
  end
  def put_provider_type(value : X509ProviderType) : HRESULT
    @lpVtbl.value.put_provider_type.unsafe_as(Proc(X509ProviderType, HRESULT)).call(value)
  end
  def get_legacy_csp(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_legacy_csp.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_legacy_csp(value : Int16) : HRESULT
    @lpVtbl.value.put_legacy_csp.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_algorithm(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_algorithm.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def put_algorithm(pvalue : IObjectId) : HRESULT
    @lpVtbl.value.put_algorithm.unsafe_as(Proc(IObjectId, HRESULT)).call(pvalue)
  end
  def get_key_spec(pvalue : X509KeySpec*) : HRESULT
    @lpVtbl.value.get_key_spec.unsafe_as(Proc(X509KeySpec*, HRESULT)).call(pvalue)
  end
  def put_key_spec(value : X509KeySpec) : HRESULT
    @lpVtbl.value.put_key_spec.unsafe_as(Proc(X509KeySpec, HRESULT)).call(value)
  end
  def get_length(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def put_length(value : Int32) : HRESULT
    @lpVtbl.value.put_length.unsafe_as(Proc(Int32, HRESULT)).call(value)
  end
  def get_export_policy(pvalue : X509PrivateKeyExportFlags*) : HRESULT
    @lpVtbl.value.get_export_policy.unsafe_as(Proc(X509PrivateKeyExportFlags*, HRESULT)).call(pvalue)
  end
  def put_export_policy(value : X509PrivateKeyExportFlags) : HRESULT
    @lpVtbl.value.put_export_policy.unsafe_as(Proc(X509PrivateKeyExportFlags, HRESULT)).call(value)
  end
  def get_key_usage(pvalue : X509PrivateKeyUsageFlags*) : HRESULT
    @lpVtbl.value.get_key_usage.unsafe_as(Proc(X509PrivateKeyUsageFlags*, HRESULT)).call(pvalue)
  end
  def put_key_usage(value : X509PrivateKeyUsageFlags) : HRESULT
    @lpVtbl.value.put_key_usage.unsafe_as(Proc(X509PrivateKeyUsageFlags, HRESULT)).call(value)
  end
  def get_key_protection(pvalue : X509PrivateKeyProtection*) : HRESULT
    @lpVtbl.value.get_key_protection.unsafe_as(Proc(X509PrivateKeyProtection*, HRESULT)).call(pvalue)
  end
  def put_key_protection(value : X509PrivateKeyProtection) : HRESULT
    @lpVtbl.value.put_key_protection.unsafe_as(Proc(X509PrivateKeyProtection, HRESULT)).call(value)
  end
  def get_machine_context(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_machine_context.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_machine_context(value : Int16) : HRESULT
    @lpVtbl.value.put_machine_context.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_security_descriptor(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_security_descriptor.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_security_descriptor(value : UInt8*) : HRESULT
    @lpVtbl.value.put_security_descriptor.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def put_certificate(encoding : EncodingType, value : UInt8*) : HRESULT
    @lpVtbl.value.put_certificate.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, value)
  end
  def get_unique_container_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_unique_container_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def get_opened(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_opened.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_default_container(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_default_container.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_existing(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_existing.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_existing(value : Int16) : HRESULT
    @lpVtbl.value.put_existing.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_silent(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_silent.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_silent(value : Int16) : HRESULT
    @lpVtbl.value.put_silent.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_parent_window(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_parent_window.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def put_parent_window(value : Int32) : HRESULT
    @lpVtbl.value.put_parent_window.unsafe_as(Proc(Int32, HRESULT)).call(value)
  end
  def get_ui_context_message(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_ui_context_message.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_ui_context_message(value : UInt8*) : HRESULT
    @lpVtbl.value.put_ui_context_message.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def put_pin(value : UInt8*) : HRESULT
    @lpVtbl.value.put_pin.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_friendly_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_friendly_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_friendly_name(value : UInt8*) : HRESULT
    @lpVtbl.value.put_friendly_name.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_description(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_description.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_description(value : UInt8*) : HRESULT
    @lpVtbl.value.put_description.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
end
struct LibWin32::IX509PrivateKey2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def open : HRESULT
    @lpVtbl.value.open.unsafe_as(Proc(HRESULT)).call
  end
  def create : HRESULT
    @lpVtbl.value.create.unsafe_as(Proc(HRESULT)).call
  end
  def close : HRESULT
    @lpVtbl.value.close.unsafe_as(Proc(HRESULT)).call
  end
  def delete : HRESULT
    @lpVtbl.value.delete.unsafe_as(Proc(HRESULT)).call
  end
  def verify(verifytype : X509PrivateKeyVerify) : HRESULT
    @lpVtbl.value.verify.unsafe_as(Proc(X509PrivateKeyVerify, HRESULT)).call(verifytype)
  end
  def import(strexporttype : UInt8*, strencodedkey : UInt8*, encoding : EncodingType) : HRESULT
    @lpVtbl.value.import.unsafe_as(Proc(UInt8*, UInt8*, EncodingType, HRESULT)).call(strexporttype, strencodedkey, encoding)
  end
  def export(strexporttype : UInt8*, encoding : EncodingType, pstrencodedkey : UInt8**) : HRESULT
    @lpVtbl.value.export.unsafe_as(Proc(UInt8*, EncodingType, UInt8**, HRESULT)).call(strexporttype, encoding, pstrencodedkey)
  end
  def export_public_key(pppublickey : IX509PublicKey*) : HRESULT
    @lpVtbl.value.export_public_key.unsafe_as(Proc(IX509PublicKey*, HRESULT)).call(pppublickey)
  end
  def get_container_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_container_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_container_name(value : UInt8*) : HRESULT
    @lpVtbl.value.put_container_name.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_container_name_prefix(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_container_name_prefix.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_container_name_prefix(value : UInt8*) : HRESULT
    @lpVtbl.value.put_container_name_prefix.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_reader_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_reader_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_reader_name(value : UInt8*) : HRESULT
    @lpVtbl.value.put_reader_name.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_csp_informations(ppvalue : ICspInformations*) : HRESULT
    @lpVtbl.value.get_csp_informations.unsafe_as(Proc(ICspInformations*, HRESULT)).call(ppvalue)
  end
  def put_csp_informations(pvalue : ICspInformations) : HRESULT
    @lpVtbl.value.put_csp_informations.unsafe_as(Proc(ICspInformations, HRESULT)).call(pvalue)
  end
  def get_csp_status(ppvalue : ICspStatus*) : HRESULT
    @lpVtbl.value.get_csp_status.unsafe_as(Proc(ICspStatus*, HRESULT)).call(ppvalue)
  end
  def put_csp_status(pvalue : ICspStatus) : HRESULT
    @lpVtbl.value.put_csp_status.unsafe_as(Proc(ICspStatus, HRESULT)).call(pvalue)
  end
  def get_provider_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_provider_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_provider_name(value : UInt8*) : HRESULT
    @lpVtbl.value.put_provider_name.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_provider_type(pvalue : X509ProviderType*) : HRESULT
    @lpVtbl.value.get_provider_type.unsafe_as(Proc(X509ProviderType*, HRESULT)).call(pvalue)
  end
  def put_provider_type(value : X509ProviderType) : HRESULT
    @lpVtbl.value.put_provider_type.unsafe_as(Proc(X509ProviderType, HRESULT)).call(value)
  end
  def get_legacy_csp(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_legacy_csp.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_legacy_csp(value : Int16) : HRESULT
    @lpVtbl.value.put_legacy_csp.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_algorithm(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_algorithm.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def put_algorithm(pvalue : IObjectId) : HRESULT
    @lpVtbl.value.put_algorithm.unsafe_as(Proc(IObjectId, HRESULT)).call(pvalue)
  end
  def get_key_spec(pvalue : X509KeySpec*) : HRESULT
    @lpVtbl.value.get_key_spec.unsafe_as(Proc(X509KeySpec*, HRESULT)).call(pvalue)
  end
  def put_key_spec(value : X509KeySpec) : HRESULT
    @lpVtbl.value.put_key_spec.unsafe_as(Proc(X509KeySpec, HRESULT)).call(value)
  end
  def get_length(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def put_length(value : Int32) : HRESULT
    @lpVtbl.value.put_length.unsafe_as(Proc(Int32, HRESULT)).call(value)
  end
  def get_export_policy(pvalue : X509PrivateKeyExportFlags*) : HRESULT
    @lpVtbl.value.get_export_policy.unsafe_as(Proc(X509PrivateKeyExportFlags*, HRESULT)).call(pvalue)
  end
  def put_export_policy(value : X509PrivateKeyExportFlags) : HRESULT
    @lpVtbl.value.put_export_policy.unsafe_as(Proc(X509PrivateKeyExportFlags, HRESULT)).call(value)
  end
  def get_key_usage(pvalue : X509PrivateKeyUsageFlags*) : HRESULT
    @lpVtbl.value.get_key_usage.unsafe_as(Proc(X509PrivateKeyUsageFlags*, HRESULT)).call(pvalue)
  end
  def put_key_usage(value : X509PrivateKeyUsageFlags) : HRESULT
    @lpVtbl.value.put_key_usage.unsafe_as(Proc(X509PrivateKeyUsageFlags, HRESULT)).call(value)
  end
  def get_key_protection(pvalue : X509PrivateKeyProtection*) : HRESULT
    @lpVtbl.value.get_key_protection.unsafe_as(Proc(X509PrivateKeyProtection*, HRESULT)).call(pvalue)
  end
  def put_key_protection(value : X509PrivateKeyProtection) : HRESULT
    @lpVtbl.value.put_key_protection.unsafe_as(Proc(X509PrivateKeyProtection, HRESULT)).call(value)
  end
  def get_machine_context(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_machine_context.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_machine_context(value : Int16) : HRESULT
    @lpVtbl.value.put_machine_context.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_security_descriptor(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_security_descriptor.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_security_descriptor(value : UInt8*) : HRESULT
    @lpVtbl.value.put_security_descriptor.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def put_certificate(encoding : EncodingType, value : UInt8*) : HRESULT
    @lpVtbl.value.put_certificate.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, value)
  end
  def get_unique_container_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_unique_container_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def get_opened(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_opened.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_default_container(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_default_container.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_existing(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_existing.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_existing(value : Int16) : HRESULT
    @lpVtbl.value.put_existing.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_silent(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_silent.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_silent(value : Int16) : HRESULT
    @lpVtbl.value.put_silent.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_parent_window(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_parent_window.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def put_parent_window(value : Int32) : HRESULT
    @lpVtbl.value.put_parent_window.unsafe_as(Proc(Int32, HRESULT)).call(value)
  end
  def get_ui_context_message(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_ui_context_message.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_ui_context_message(value : UInt8*) : HRESULT
    @lpVtbl.value.put_ui_context_message.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def put_pin(value : UInt8*) : HRESULT
    @lpVtbl.value.put_pin.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_friendly_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_friendly_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_friendly_name(value : UInt8*) : HRESULT
    @lpVtbl.value.put_friendly_name.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_description(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_description.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_description(value : UInt8*) : HRESULT
    @lpVtbl.value.put_description.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_hardware_key_usage(pvalue : X509HardwareKeyUsageFlags*) : HRESULT
    @lpVtbl.value.get_hardware_key_usage.unsafe_as(Proc(X509HardwareKeyUsageFlags*, HRESULT)).call(pvalue)
  end
  def put_hardware_key_usage(value : X509HardwareKeyUsageFlags) : HRESULT
    @lpVtbl.value.put_hardware_key_usage.unsafe_as(Proc(X509HardwareKeyUsageFlags, HRESULT)).call(value)
  end
  def get_alternate_storage_location(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_alternate_storage_location.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_alternate_storage_location(value : UInt8*) : HRESULT
    @lpVtbl.value.put_alternate_storage_location.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_algorithm_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_algorithm_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_algorithm_name(value : UInt8*) : HRESULT
    @lpVtbl.value.put_algorithm_name.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_algorithm_parameters(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_algorithm_parameters.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def put_algorithm_parameters(encoding : EncodingType, value : UInt8*) : HRESULT
    @lpVtbl.value.put_algorithm_parameters.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, value)
  end
  def get_parameters_export_type(pvalue : X509KeyParametersExportType*) : HRESULT
    @lpVtbl.value.get_parameters_export_type.unsafe_as(Proc(X509KeyParametersExportType*, HRESULT)).call(pvalue)
  end
  def put_parameters_export_type(value : X509KeyParametersExportType) : HRESULT
    @lpVtbl.value.put_parameters_export_type.unsafe_as(Proc(X509KeyParametersExportType, HRESULT)).call(value)
  end
end
struct LibWin32::IX509EndorsementKey
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_provider_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_provider_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_provider_name(value : UInt8*) : HRESULT
    @lpVtbl.value.put_provider_name.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_length(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_length.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def get_opened(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_opened.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def add_certificate(encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.add_certificate.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strcertificate)
  end
  def remove_certificate(encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.remove_certificate.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strcertificate)
  end
  def get_certificate_by_index(manufactureronly : Int16, dwindex : Int32, encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_certificate_by_index.unsafe_as(Proc(Int16, Int32, EncodingType, UInt8**, HRESULT)).call(manufactureronly, dwindex, encoding, pvalue)
  end
  def get_certificate_count(manufactureronly : Int16, pcount : Int32*) : HRESULT
    @lpVtbl.value.get_certificate_count.unsafe_as(Proc(Int16, Int32*, HRESULT)).call(manufactureronly, pcount)
  end
  def export_public_key(pppublickey : IX509PublicKey*) : HRESULT
    @lpVtbl.value.export_public_key.unsafe_as(Proc(IX509PublicKey*, HRESULT)).call(pppublickey)
  end
  def open : HRESULT
    @lpVtbl.value.open.unsafe_as(Proc(HRESULT)).call
  end
  def close : HRESULT
    @lpVtbl.value.close.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IX509Extension
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(pobjectid : IObjectId, encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IObjectId, EncodingType, UInt8*, HRESULT)).call(pobjectid, encoding, strencodeddata)
  end
  def get_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_critical(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_critical.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_critical(value : Int16) : HRESULT
    @lpVtbl.value.put_critical.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
end
struct LibWin32::IX509Extensions
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_item_by_index(index : Int32, pval : IX509Extension*) : HRESULT
    @lpVtbl.value.get_item_by_index.unsafe_as(Proc(Int32, IX509Extension*, HRESULT)).call(index, pval)
  end
  def get_count(pval : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get__new_enum(pval : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IUnknown*, HRESULT)).call(pval)
  end
  def add(pval : IX509Extension) : HRESULT
    @lpVtbl.value.add.unsafe_as(Proc(IX509Extension, HRESULT)).call(pval)
  end
  def remove(index : Int32) : HRESULT
    @lpVtbl.value.remove.unsafe_as(Proc(Int32, HRESULT)).call(index)
  end
  def clear : HRESULT
    @lpVtbl.value.clear.unsafe_as(Proc(HRESULT)).call
  end
  def get_index_by_object_id(pobjectid : IObjectId, pindex : Int32*) : HRESULT
    @lpVtbl.value.get_index_by_object_id.unsafe_as(Proc(IObjectId, Int32*, HRESULT)).call(pobjectid, pindex)
  end
  def add_range(pvalue : IX509Extensions) : HRESULT
    @lpVtbl.value.add_range.unsafe_as(Proc(IX509Extensions, HRESULT)).call(pvalue)
  end
end
struct LibWin32::IX509ExtensionKeyUsage
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(pobjectid : IObjectId, encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IObjectId, EncodingType, UInt8*, HRESULT)).call(pobjectid, encoding, strencodeddata)
  end
  def get_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_critical(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_critical.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_critical(value : Int16) : HRESULT
    @lpVtbl.value.put_critical.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def initialize_encode(usageflags : X509KeyUsageFlags) : HRESULT
    @lpVtbl.value.initialize_encode.unsafe_as(Proc(X509KeyUsageFlags, HRESULT)).call(usageflags)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_key_usage(pvalue : X509KeyUsageFlags*) : HRESULT
    @lpVtbl.value.get_key_usage.unsafe_as(Proc(X509KeyUsageFlags*, HRESULT)).call(pvalue)
  end
end
struct LibWin32::IX509ExtensionEnhancedKeyUsage
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(pobjectid : IObjectId, encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IObjectId, EncodingType, UInt8*, HRESULT)).call(pobjectid, encoding, strencodeddata)
  end
  def get_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_critical(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_critical.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_critical(value : Int16) : HRESULT
    @lpVtbl.value.put_critical.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def initialize_encode(pvalue : IObjectIds) : HRESULT
    @lpVtbl.value.initialize_encode.unsafe_as(Proc(IObjectIds, HRESULT)).call(pvalue)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_enhanced_key_usage(ppvalue : IObjectIds*) : HRESULT
    @lpVtbl.value.get_enhanced_key_usage.unsafe_as(Proc(IObjectIds*, HRESULT)).call(ppvalue)
  end
end
struct LibWin32::IX509ExtensionTemplateName
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(pobjectid : IObjectId, encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IObjectId, EncodingType, UInt8*, HRESULT)).call(pobjectid, encoding, strencodeddata)
  end
  def get_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_critical(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_critical.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_critical(value : Int16) : HRESULT
    @lpVtbl.value.put_critical.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def initialize_encode(strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize_encode.unsafe_as(Proc(UInt8*, HRESULT)).call(strtemplatename)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_template_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_template_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
end
struct LibWin32::IX509ExtensionTemplate
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(pobjectid : IObjectId, encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IObjectId, EncodingType, UInt8*, HRESULT)).call(pobjectid, encoding, strencodeddata)
  end
  def get_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_critical(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_critical.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_critical(value : Int16) : HRESULT
    @lpVtbl.value.put_critical.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def initialize_encode(ptemplateoid : IObjectId, majorversion : Int32, minorversion : Int32) : HRESULT
    @lpVtbl.value.initialize_encode.unsafe_as(Proc(IObjectId, Int32, Int32, HRESULT)).call(ptemplateoid, majorversion, minorversion)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_template_oid(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_template_oid.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_major_version(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_major_version.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def get_minor_version(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_minor_version.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
end
struct LibWin32::IAlternativeName
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize_from_string(type : AlternativeNameType, strvalue : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_string.unsafe_as(Proc(AlternativeNameType, UInt8*, HRESULT)).call(type, strvalue)
  end
  def initialize_from_raw_data(type : AlternativeNameType, encoding : EncodingType, strrawdata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_raw_data.unsafe_as(Proc(AlternativeNameType, EncodingType, UInt8*, HRESULT)).call(type, encoding, strrawdata)
  end
  def initialize_from_other_name(pobjectid : IObjectId, encoding : EncodingType, strrawdata : UInt8*, tobewrapped : Int16) : HRESULT
    @lpVtbl.value.initialize_from_other_name.unsafe_as(Proc(IObjectId, EncodingType, UInt8*, Int16, HRESULT)).call(pobjectid, encoding, strrawdata, tobewrapped)
  end
  def get_type(pvalue : AlternativeNameType*) : HRESULT
    @lpVtbl.value.get_type.unsafe_as(Proc(AlternativeNameType*, HRESULT)).call(pvalue)
  end
  def get_str_value(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_str_value.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def get_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
end
struct LibWin32::IAlternativeNames
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_item_by_index(index : Int32, pval : IAlternativeName*) : HRESULT
    @lpVtbl.value.get_item_by_index.unsafe_as(Proc(Int32, IAlternativeName*, HRESULT)).call(index, pval)
  end
  def get_count(pval : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get__new_enum(pval : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IUnknown*, HRESULT)).call(pval)
  end
  def add(pval : IAlternativeName) : HRESULT
    @lpVtbl.value.add.unsafe_as(Proc(IAlternativeName, HRESULT)).call(pval)
  end
  def remove(index : Int32) : HRESULT
    @lpVtbl.value.remove.unsafe_as(Proc(Int32, HRESULT)).call(index)
  end
  def clear : HRESULT
    @lpVtbl.value.clear.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IX509ExtensionAlternativeNames
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(pobjectid : IObjectId, encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IObjectId, EncodingType, UInt8*, HRESULT)).call(pobjectid, encoding, strencodeddata)
  end
  def get_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_critical(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_critical.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_critical(value : Int16) : HRESULT
    @lpVtbl.value.put_critical.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def initialize_encode(pvalue : IAlternativeNames) : HRESULT
    @lpVtbl.value.initialize_encode.unsafe_as(Proc(IAlternativeNames, HRESULT)).call(pvalue)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_alternative_names(ppvalue : IAlternativeNames*) : HRESULT
    @lpVtbl.value.get_alternative_names.unsafe_as(Proc(IAlternativeNames*, HRESULT)).call(ppvalue)
  end
end
struct LibWin32::IX509ExtensionBasicConstraints
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(pobjectid : IObjectId, encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IObjectId, EncodingType, UInt8*, HRESULT)).call(pobjectid, encoding, strencodeddata)
  end
  def get_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_critical(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_critical.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_critical(value : Int16) : HRESULT
    @lpVtbl.value.put_critical.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def initialize_encode(isca : Int16, pathlenconstraint : Int32) : HRESULT
    @lpVtbl.value.initialize_encode.unsafe_as(Proc(Int16, Int32, HRESULT)).call(isca, pathlenconstraint)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_is_ca(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_is_ca.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_path_len_constraint(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_path_len_constraint.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
end
struct LibWin32::IX509ExtensionSubjectKeyIdentifier
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(pobjectid : IObjectId, encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IObjectId, EncodingType, UInt8*, HRESULT)).call(pobjectid, encoding, strencodeddata)
  end
  def get_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_critical(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_critical.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_critical(value : Int16) : HRESULT
    @lpVtbl.value.put_critical.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def initialize_encode(encoding : EncodingType, strkeyidentifier : UInt8*) : HRESULT
    @lpVtbl.value.initialize_encode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strkeyidentifier)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_subject_key_identifier(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_subject_key_identifier.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
end
struct LibWin32::IX509ExtensionAuthorityKeyIdentifier
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(pobjectid : IObjectId, encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IObjectId, EncodingType, UInt8*, HRESULT)).call(pobjectid, encoding, strencodeddata)
  end
  def get_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_critical(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_critical.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_critical(value : Int16) : HRESULT
    @lpVtbl.value.put_critical.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def initialize_encode(encoding : EncodingType, strkeyidentifier : UInt8*) : HRESULT
    @lpVtbl.value.initialize_encode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strkeyidentifier)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_authority_key_identifier(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_authority_key_identifier.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
end
struct LibWin32::ISmimeCapability
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(pobjectid : IObjectId, bitcount : Int32) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IObjectId, Int32, HRESULT)).call(pobjectid, bitcount)
  end
  def get_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_bit_count(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_bit_count.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
end
struct LibWin32::ISmimeCapabilities
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_item_by_index(index : Int32, pval : ISmimeCapability*) : HRESULT
    @lpVtbl.value.get_item_by_index.unsafe_as(Proc(Int32, ISmimeCapability*, HRESULT)).call(index, pval)
  end
  def get_count(pval : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get__new_enum(pval : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IUnknown*, HRESULT)).call(pval)
  end
  def add(pval : ISmimeCapability) : HRESULT
    @lpVtbl.value.add.unsafe_as(Proc(ISmimeCapability, HRESULT)).call(pval)
  end
  def remove(index : Int32) : HRESULT
    @lpVtbl.value.remove.unsafe_as(Proc(Int32, HRESULT)).call(index)
  end
  def clear : HRESULT
    @lpVtbl.value.clear.unsafe_as(Proc(HRESULT)).call
  end
  def add_from_csp(pvalue : ICspInformation) : HRESULT
    @lpVtbl.value.add_from_csp.unsafe_as(Proc(ICspInformation, HRESULT)).call(pvalue)
  end
  def add_available_smime_capabilities(machinecontext : Int16) : HRESULT
    @lpVtbl.value.add_available_smime_capabilities.unsafe_as(Proc(Int16, HRESULT)).call(machinecontext)
  end
end
struct LibWin32::IX509ExtensionSmimeCapabilities
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(pobjectid : IObjectId, encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IObjectId, EncodingType, UInt8*, HRESULT)).call(pobjectid, encoding, strencodeddata)
  end
  def get_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_critical(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_critical.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_critical(value : Int16) : HRESULT
    @lpVtbl.value.put_critical.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def initialize_encode(pvalue : ISmimeCapabilities) : HRESULT
    @lpVtbl.value.initialize_encode.unsafe_as(Proc(ISmimeCapabilities, HRESULT)).call(pvalue)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_smime_capabilities(ppvalue : ISmimeCapabilities*) : HRESULT
    @lpVtbl.value.get_smime_capabilities.unsafe_as(Proc(ISmimeCapabilities*, HRESULT)).call(ppvalue)
  end
end
struct LibWin32::IPolicyQualifier
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize_encode(strqualifier : UInt8*, type : PolicyQualifierType) : HRESULT
    @lpVtbl.value.initialize_encode.unsafe_as(Proc(UInt8*, PolicyQualifierType, HRESULT)).call(strqualifier, type)
  end
  def get_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_qualifier(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_qualifier.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def get_type(pvalue : PolicyQualifierType*) : HRESULT
    @lpVtbl.value.get_type.unsafe_as(Proc(PolicyQualifierType*, HRESULT)).call(pvalue)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
end
struct LibWin32::IPolicyQualifiers
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_item_by_index(index : Int32, pval : IPolicyQualifier*) : HRESULT
    @lpVtbl.value.get_item_by_index.unsafe_as(Proc(Int32, IPolicyQualifier*, HRESULT)).call(index, pval)
  end
  def get_count(pval : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get__new_enum(pval : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IUnknown*, HRESULT)).call(pval)
  end
  def add(pval : IPolicyQualifier) : HRESULT
    @lpVtbl.value.add.unsafe_as(Proc(IPolicyQualifier, HRESULT)).call(pval)
  end
  def remove(index : Int32) : HRESULT
    @lpVtbl.value.remove.unsafe_as(Proc(Int32, HRESULT)).call(index)
  end
  def clear : HRESULT
    @lpVtbl.value.clear.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::ICertificatePolicy
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(pvalue : IObjectId) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IObjectId, HRESULT)).call(pvalue)
  end
  def get_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_policy_qualifiers(ppvalue : IPolicyQualifiers*) : HRESULT
    @lpVtbl.value.get_policy_qualifiers.unsafe_as(Proc(IPolicyQualifiers*, HRESULT)).call(ppvalue)
  end
end
struct LibWin32::ICertificatePolicies
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_item_by_index(index : Int32, pval : ICertificatePolicy*) : HRESULT
    @lpVtbl.value.get_item_by_index.unsafe_as(Proc(Int32, ICertificatePolicy*, HRESULT)).call(index, pval)
  end
  def get_count(pval : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get__new_enum(pval : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IUnknown*, HRESULT)).call(pval)
  end
  def add(pval : ICertificatePolicy) : HRESULT
    @lpVtbl.value.add.unsafe_as(Proc(ICertificatePolicy, HRESULT)).call(pval)
  end
  def remove(index : Int32) : HRESULT
    @lpVtbl.value.remove.unsafe_as(Proc(Int32, HRESULT)).call(index)
  end
  def clear : HRESULT
    @lpVtbl.value.clear.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IX509ExtensionCertificatePolicies
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(pobjectid : IObjectId, encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IObjectId, EncodingType, UInt8*, HRESULT)).call(pobjectid, encoding, strencodeddata)
  end
  def get_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_critical(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_critical.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_critical(value : Int16) : HRESULT
    @lpVtbl.value.put_critical.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def initialize_encode(pvalue : ICertificatePolicies) : HRESULT
    @lpVtbl.value.initialize_encode.unsafe_as(Proc(ICertificatePolicies, HRESULT)).call(pvalue)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_policies(ppvalue : ICertificatePolicies*) : HRESULT
    @lpVtbl.value.get_policies.unsafe_as(Proc(ICertificatePolicies*, HRESULT)).call(ppvalue)
  end
end
struct LibWin32::IX509ExtensionMSApplicationPolicies
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(pobjectid : IObjectId, encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IObjectId, EncodingType, UInt8*, HRESULT)).call(pobjectid, encoding, strencodeddata)
  end
  def get_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_critical(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_critical.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_critical(value : Int16) : HRESULT
    @lpVtbl.value.put_critical.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def initialize_encode(pvalue : ICertificatePolicies) : HRESULT
    @lpVtbl.value.initialize_encode.unsafe_as(Proc(ICertificatePolicies, HRESULT)).call(pvalue)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_policies(ppvalue : ICertificatePolicies*) : HRESULT
    @lpVtbl.value.get_policies.unsafe_as(Proc(ICertificatePolicies*, HRESULT)).call(ppvalue)
  end
end
struct LibWin32::IX509Attribute
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(pobjectid : IObjectId, encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IObjectId, EncodingType, UInt8*, HRESULT)).call(pobjectid, encoding, strencodeddata)
  end
  def get_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
end
struct LibWin32::IX509Attributes
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_item_by_index(index : Int32, pval : IX509Attribute*) : HRESULT
    @lpVtbl.value.get_item_by_index.unsafe_as(Proc(Int32, IX509Attribute*, HRESULT)).call(index, pval)
  end
  def get_count(pval : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get__new_enum(pval : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IUnknown*, HRESULT)).call(pval)
  end
  def add(pval : IX509Attribute) : HRESULT
    @lpVtbl.value.add.unsafe_as(Proc(IX509Attribute, HRESULT)).call(pval)
  end
  def remove(index : Int32) : HRESULT
    @lpVtbl.value.remove.unsafe_as(Proc(Int32, HRESULT)).call(index)
  end
  def clear : HRESULT
    @lpVtbl.value.clear.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IX509AttributeExtensions
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(pobjectid : IObjectId, encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IObjectId, EncodingType, UInt8*, HRESULT)).call(pobjectid, encoding, strencodeddata)
  end
  def get_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def initialize_encode(pextensions : IX509Extensions) : HRESULT
    @lpVtbl.value.initialize_encode.unsafe_as(Proc(IX509Extensions, HRESULT)).call(pextensions)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_x509_extensions(ppvalue : IX509Extensions*) : HRESULT
    @lpVtbl.value.get_x509_extensions.unsafe_as(Proc(IX509Extensions*, HRESULT)).call(ppvalue)
  end
end
struct LibWin32::IX509AttributeClientId
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(pobjectid : IObjectId, encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IObjectId, EncodingType, UInt8*, HRESULT)).call(pobjectid, encoding, strencodeddata)
  end
  def get_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def initialize_encode(clientid : RequestClientInfoClientId, strmachinednsname : UInt8*, strusersamname : UInt8*, strprocessname : UInt8*) : HRESULT
    @lpVtbl.value.initialize_encode.unsafe_as(Proc(RequestClientInfoClientId, UInt8*, UInt8*, UInt8*, HRESULT)).call(clientid, strmachinednsname, strusersamname, strprocessname)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_client_id(pvalue : RequestClientInfoClientId*) : HRESULT
    @lpVtbl.value.get_client_id.unsafe_as(Proc(RequestClientInfoClientId*, HRESULT)).call(pvalue)
  end
  def get_machine_dns_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_machine_dns_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def get_user_sam_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_user_sam_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def get_process_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_process_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
end
struct LibWin32::IX509AttributeRenewalCertificate
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(pobjectid : IObjectId, encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IObjectId, EncodingType, UInt8*, HRESULT)).call(pobjectid, encoding, strencodeddata)
  end
  def get_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def initialize_encode(encoding : EncodingType, strcert : UInt8*) : HRESULT
    @lpVtbl.value.initialize_encode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strcert)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_renewal_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_renewal_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
end
struct LibWin32::IX509AttributeArchiveKey
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(pobjectid : IObjectId, encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IObjectId, EncodingType, UInt8*, HRESULT)).call(pobjectid, encoding, strencodeddata)
  end
  def get_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def initialize_encode(pkey : IX509PrivateKey, encoding : EncodingType, strcaxcert : UInt8*, palgorithm : IObjectId, encryptionstrength : Int32) : HRESULT
    @lpVtbl.value.initialize_encode.unsafe_as(Proc(IX509PrivateKey, EncodingType, UInt8*, IObjectId, Int32, HRESULT)).call(pkey, encoding, strcaxcert, palgorithm, encryptionstrength)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_encrypted_key_blob(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_encrypted_key_blob.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_encryption_algorithm(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_encryption_algorithm.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_encryption_strength(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_encryption_strength.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
end
struct LibWin32::IX509AttributeArchiveKeyHash
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(pobjectid : IObjectId, encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IObjectId, EncodingType, UInt8*, HRESULT)).call(pobjectid, encoding, strencodeddata)
  end
  def get_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def initialize_encode_from_encrypted_key_blob(encoding : EncodingType, strencryptedkeyblob : UInt8*) : HRESULT
    @lpVtbl.value.initialize_encode_from_encrypted_key_blob.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencryptedkeyblob)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_encrypted_key_hash_blob(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_encrypted_key_hash_blob.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
end
struct LibWin32::IX509AttributeOSVersion
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(pobjectid : IObjectId, encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IObjectId, EncodingType, UInt8*, HRESULT)).call(pobjectid, encoding, strencodeddata)
  end
  def get_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def initialize_encode(strosversion : UInt8*) : HRESULT
    @lpVtbl.value.initialize_encode.unsafe_as(Proc(UInt8*, HRESULT)).call(strosversion)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_os_version(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_os_version.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
end
struct LibWin32::IX509AttributeCspProvider
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(pobjectid : IObjectId, encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IObjectId, EncodingType, UInt8*, HRESULT)).call(pobjectid, encoding, strencodeddata)
  end
  def get_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def initialize_encode(keyspec : X509KeySpec, strprovidername : UInt8*, encoding : EncodingType, strsignature : UInt8*) : HRESULT
    @lpVtbl.value.initialize_encode.unsafe_as(Proc(X509KeySpec, UInt8*, EncodingType, UInt8*, HRESULT)).call(keyspec, strprovidername, encoding, strsignature)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_key_spec(pvalue : X509KeySpec*) : HRESULT
    @lpVtbl.value.get_key_spec.unsafe_as(Proc(X509KeySpec*, HRESULT)).call(pvalue)
  end
  def get_provider_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_provider_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def get_signature(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_signature.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
end
struct LibWin32::ICryptAttribute
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize_from_object_id(pobjectid : IObjectId) : HRESULT
    @lpVtbl.value.initialize_from_object_id.unsafe_as(Proc(IObjectId, HRESULT)).call(pobjectid)
  end
  def initialize_from_values(pattributes : IX509Attributes) : HRESULT
    @lpVtbl.value.initialize_from_values.unsafe_as(Proc(IX509Attributes, HRESULT)).call(pattributes)
  end
  def get_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_values(ppvalue : IX509Attributes*) : HRESULT
    @lpVtbl.value.get_values.unsafe_as(Proc(IX509Attributes*, HRESULT)).call(ppvalue)
  end
end
struct LibWin32::ICryptAttributes
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_item_by_index(index : Int32, pval : ICryptAttribute*) : HRESULT
    @lpVtbl.value.get_item_by_index.unsafe_as(Proc(Int32, ICryptAttribute*, HRESULT)).call(index, pval)
  end
  def get_count(pval : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get__new_enum(pval : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IUnknown*, HRESULT)).call(pval)
  end
  def add(pval : ICryptAttribute) : HRESULT
    @lpVtbl.value.add.unsafe_as(Proc(ICryptAttribute, HRESULT)).call(pval)
  end
  def remove(index : Int32) : HRESULT
    @lpVtbl.value.remove.unsafe_as(Proc(Int32, HRESULT)).call(index)
  end
  def clear : HRESULT
    @lpVtbl.value.clear.unsafe_as(Proc(HRESULT)).call
  end
  def get_index_by_object_id(pobjectid : IObjectId, pindex : Int32*) : HRESULT
    @lpVtbl.value.get_index_by_object_id.unsafe_as(Proc(IObjectId, Int32*, HRESULT)).call(pobjectid, pindex)
  end
  def add_range(pvalue : ICryptAttributes) : HRESULT
    @lpVtbl.value.add_range.unsafe_as(Proc(ICryptAttributes, HRESULT)).call(pvalue)
  end
end
struct LibWin32::ICertProperty
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize_from_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_property_id(pvalue : CERTENROLL_PROPERTYID*) : HRESULT
    @lpVtbl.value.get_property_id.unsafe_as(Proc(CERTENROLL_PROPERTYID*, HRESULT)).call(pvalue)
  end
  def put_property_id(value : CERTENROLL_PROPERTYID) : HRESULT
    @lpVtbl.value.put_property_id.unsafe_as(Proc(CERTENROLL_PROPERTYID, HRESULT)).call(value)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def remove_from_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.remove_from_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def set_value_on_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.set_value_on_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
end
struct LibWin32::ICertProperties
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_item_by_index(index : Int32, pval : ICertProperty*) : HRESULT
    @lpVtbl.value.get_item_by_index.unsafe_as(Proc(Int32, ICertProperty*, HRESULT)).call(index, pval)
  end
  def get_count(pval : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get__new_enum(pval : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IUnknown*, HRESULT)).call(pval)
  end
  def add(pval : ICertProperty) : HRESULT
    @lpVtbl.value.add.unsafe_as(Proc(ICertProperty, HRESULT)).call(pval)
  end
  def remove(index : Int32) : HRESULT
    @lpVtbl.value.remove.unsafe_as(Proc(Int32, HRESULT)).call(index)
  end
  def clear : HRESULT
    @lpVtbl.value.clear.unsafe_as(Proc(HRESULT)).call
  end
  def initialize_from_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
end
struct LibWin32::ICertPropertyFriendlyName
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize_from_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_property_id(pvalue : CERTENROLL_PROPERTYID*) : HRESULT
    @lpVtbl.value.get_property_id.unsafe_as(Proc(CERTENROLL_PROPERTYID*, HRESULT)).call(pvalue)
  end
  def put_property_id(value : CERTENROLL_PROPERTYID) : HRESULT
    @lpVtbl.value.put_property_id.unsafe_as(Proc(CERTENROLL_PROPERTYID, HRESULT)).call(value)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def remove_from_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.remove_from_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def set_value_on_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.set_value_on_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def initialize(strfriendlyname : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(UInt8*, HRESULT)).call(strfriendlyname)
  end
  def get_friendly_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_friendly_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
end
struct LibWin32::ICertPropertyDescription
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize_from_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_property_id(pvalue : CERTENROLL_PROPERTYID*) : HRESULT
    @lpVtbl.value.get_property_id.unsafe_as(Proc(CERTENROLL_PROPERTYID*, HRESULT)).call(pvalue)
  end
  def put_property_id(value : CERTENROLL_PROPERTYID) : HRESULT
    @lpVtbl.value.put_property_id.unsafe_as(Proc(CERTENROLL_PROPERTYID, HRESULT)).call(value)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def remove_from_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.remove_from_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def set_value_on_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.set_value_on_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def initialize(strdescription : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(UInt8*, HRESULT)).call(strdescription)
  end
  def get_description(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_description.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
end
struct LibWin32::ICertPropertyAutoEnroll
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize_from_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_property_id(pvalue : CERTENROLL_PROPERTYID*) : HRESULT
    @lpVtbl.value.get_property_id.unsafe_as(Proc(CERTENROLL_PROPERTYID*, HRESULT)).call(pvalue)
  end
  def put_property_id(value : CERTENROLL_PROPERTYID) : HRESULT
    @lpVtbl.value.put_property_id.unsafe_as(Proc(CERTENROLL_PROPERTYID, HRESULT)).call(value)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def remove_from_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.remove_from_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def set_value_on_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.set_value_on_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def initialize(strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(UInt8*, HRESULT)).call(strtemplatename)
  end
  def get_template_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_template_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
end
struct LibWin32::ICertPropertyRequestOriginator
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize_from_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_property_id(pvalue : CERTENROLL_PROPERTYID*) : HRESULT
    @lpVtbl.value.get_property_id.unsafe_as(Proc(CERTENROLL_PROPERTYID*, HRESULT)).call(pvalue)
  end
  def put_property_id(value : CERTENROLL_PROPERTYID) : HRESULT
    @lpVtbl.value.put_property_id.unsafe_as(Proc(CERTENROLL_PROPERTYID, HRESULT)).call(value)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def remove_from_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.remove_from_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def set_value_on_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.set_value_on_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def initialize(strrequestoriginator : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(UInt8*, HRESULT)).call(strrequestoriginator)
  end
  def initialize_from_local_request_originator : HRESULT
    @lpVtbl.value.initialize_from_local_request_originator.unsafe_as(Proc(HRESULT)).call
  end
  def get_request_originator(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_request_originator.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
end
struct LibWin32::ICertPropertySHA1Hash
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize_from_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_property_id(pvalue : CERTENROLL_PROPERTYID*) : HRESULT
    @lpVtbl.value.get_property_id.unsafe_as(Proc(CERTENROLL_PROPERTYID*, HRESULT)).call(pvalue)
  end
  def put_property_id(value : CERTENROLL_PROPERTYID) : HRESULT
    @lpVtbl.value.put_property_id.unsafe_as(Proc(CERTENROLL_PROPERTYID, HRESULT)).call(value)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def remove_from_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.remove_from_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def set_value_on_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.set_value_on_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def initialize(encoding : EncodingType, strrenewalvalue : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strrenewalvalue)
  end
  def get_sha1_hash(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_sha1_hash.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
end
struct LibWin32::ICertPropertyKeyProvInfo
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize_from_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_property_id(pvalue : CERTENROLL_PROPERTYID*) : HRESULT
    @lpVtbl.value.get_property_id.unsafe_as(Proc(CERTENROLL_PROPERTYID*, HRESULT)).call(pvalue)
  end
  def put_property_id(value : CERTENROLL_PROPERTYID) : HRESULT
    @lpVtbl.value.put_property_id.unsafe_as(Proc(CERTENROLL_PROPERTYID, HRESULT)).call(value)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def remove_from_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.remove_from_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def set_value_on_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.set_value_on_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def initialize(pvalue : IX509PrivateKey) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IX509PrivateKey, HRESULT)).call(pvalue)
  end
  def get_private_key(ppvalue : IX509PrivateKey*) : HRESULT
    @lpVtbl.value.get_private_key.unsafe_as(Proc(IX509PrivateKey*, HRESULT)).call(ppvalue)
  end
end
struct LibWin32::ICertPropertyArchived
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize_from_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_property_id(pvalue : CERTENROLL_PROPERTYID*) : HRESULT
    @lpVtbl.value.get_property_id.unsafe_as(Proc(CERTENROLL_PROPERTYID*, HRESULT)).call(pvalue)
  end
  def put_property_id(value : CERTENROLL_PROPERTYID) : HRESULT
    @lpVtbl.value.put_property_id.unsafe_as(Proc(CERTENROLL_PROPERTYID, HRESULT)).call(value)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def remove_from_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.remove_from_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def set_value_on_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.set_value_on_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def initialize(archivedvalue : Int16) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(Int16, HRESULT)).call(archivedvalue)
  end
  def get_archived(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_archived.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
end
struct LibWin32::ICertPropertyBackedUp
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize_from_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_property_id(pvalue : CERTENROLL_PROPERTYID*) : HRESULT
    @lpVtbl.value.get_property_id.unsafe_as(Proc(CERTENROLL_PROPERTYID*, HRESULT)).call(pvalue)
  end
  def put_property_id(value : CERTENROLL_PROPERTYID) : HRESULT
    @lpVtbl.value.put_property_id.unsafe_as(Proc(CERTENROLL_PROPERTYID, HRESULT)).call(value)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def remove_from_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.remove_from_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def set_value_on_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.set_value_on_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def initialize_from_current_time(backedupvalue : Int16) : HRESULT
    @lpVtbl.value.initialize_from_current_time.unsafe_as(Proc(Int16, HRESULT)).call(backedupvalue)
  end
  def initialize(backedupvalue : Int16, date : Float64) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(Int16, Float64, HRESULT)).call(backedupvalue, date)
  end
  def get_backed_up_value(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_backed_up_value.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_backed_up_time(pdate : Float64*) : HRESULT
    @lpVtbl.value.get_backed_up_time.unsafe_as(Proc(Float64*, HRESULT)).call(pdate)
  end
end
struct LibWin32::ICertPropertyEnrollment
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize_from_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_property_id(pvalue : CERTENROLL_PROPERTYID*) : HRESULT
    @lpVtbl.value.get_property_id.unsafe_as(Proc(CERTENROLL_PROPERTYID*, HRESULT)).call(pvalue)
  end
  def put_property_id(value : CERTENROLL_PROPERTYID) : HRESULT
    @lpVtbl.value.put_property_id.unsafe_as(Proc(CERTENROLL_PROPERTYID, HRESULT)).call(value)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def remove_from_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.remove_from_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def set_value_on_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.set_value_on_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def initialize(requestid : Int32, strcadnsname : UInt8*, strcaname : UInt8*, strfriendlyname : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(Int32, UInt8*, UInt8*, UInt8*, HRESULT)).call(requestid, strcadnsname, strcaname, strfriendlyname)
  end
  def get_request_id(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_request_id.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def get_ca_dns_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_ca_dns_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def get_ca_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_ca_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def get_friendly_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_friendly_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
end
struct LibWin32::ICertPropertyRenewal
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize_from_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_property_id(pvalue : CERTENROLL_PROPERTYID*) : HRESULT
    @lpVtbl.value.get_property_id.unsafe_as(Proc(CERTENROLL_PROPERTYID*, HRESULT)).call(pvalue)
  end
  def put_property_id(value : CERTENROLL_PROPERTYID) : HRESULT
    @lpVtbl.value.put_property_id.unsafe_as(Proc(CERTENROLL_PROPERTYID, HRESULT)).call(value)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def remove_from_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.remove_from_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def set_value_on_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.set_value_on_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def initialize(encoding : EncodingType, strrenewalvalue : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strrenewalvalue)
  end
  def initialize_from_certificate_hash(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_certificate_hash.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def get_renewal(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_renewal.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
end
struct LibWin32::ICertPropertyArchivedKeyHash
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize_from_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_property_id(pvalue : CERTENROLL_PROPERTYID*) : HRESULT
    @lpVtbl.value.get_property_id.unsafe_as(Proc(CERTENROLL_PROPERTYID*, HRESULT)).call(pvalue)
  end
  def put_property_id(value : CERTENROLL_PROPERTYID) : HRESULT
    @lpVtbl.value.put_property_id.unsafe_as(Proc(CERTENROLL_PROPERTYID, HRESULT)).call(value)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def remove_from_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.remove_from_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def set_value_on_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.set_value_on_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def initialize(encoding : EncodingType, strarchivedkeyhashvalue : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strarchivedkeyhashvalue)
  end
  def get_archived_key_hash(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_archived_key_hash.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
end
struct LibWin32::ICertPropertyEnrollmentPolicyServer
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize_from_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def initialize_decode(encoding : EncodingType, strencodeddata : UInt8*) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strencodeddata)
  end
  def get_property_id(pvalue : CERTENROLL_PROPERTYID*) : HRESULT
    @lpVtbl.value.get_property_id.unsafe_as(Proc(CERTENROLL_PROPERTYID*, HRESULT)).call(pvalue)
  end
  def put_property_id(value : CERTENROLL_PROPERTYID) : HRESULT
    @lpVtbl.value.put_property_id.unsafe_as(Proc(CERTENROLL_PROPERTYID, HRESULT)).call(value)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def remove_from_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.remove_from_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def set_value_on_certificate(machinecontext : Int16, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.set_value_on_certificate.unsafe_as(Proc(Int16, EncodingType, UInt8*, HRESULT)).call(machinecontext, encoding, strcertificate)
  end
  def initialize(propertyflags : EnrollmentPolicyServerPropertyFlags, authflags : X509EnrollmentAuthFlags, enrollmentserverauthflags : X509EnrollmentAuthFlags, urlflags : PolicyServerUrlFlags, strrequestid : UInt8*, strurl : UInt8*, strid : UInt8*, strenrollmentserverurl : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(EnrollmentPolicyServerPropertyFlags, X509EnrollmentAuthFlags, X509EnrollmentAuthFlags, PolicyServerUrlFlags, UInt8*, UInt8*, UInt8*, UInt8*, HRESULT)).call(propertyflags, authflags, enrollmentserverauthflags, urlflags, strrequestid, strurl, strid, strenrollmentserverurl)
  end
  def get_policy_server_url(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_policy_server_url.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def get_policy_server_id(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_policy_server_id.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def get_enrollment_server_url(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_enrollment_server_url.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def get_request_id_string(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_request_id_string.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def get_property_flags(pvalue : EnrollmentPolicyServerPropertyFlags*) : HRESULT
    @lpVtbl.value.get_property_flags.unsafe_as(Proc(EnrollmentPolicyServerPropertyFlags*, HRESULT)).call(pvalue)
  end
  def get_url_flags(pvalue : PolicyServerUrlFlags*) : HRESULT
    @lpVtbl.value.get_url_flags.unsafe_as(Proc(PolicyServerUrlFlags*, HRESULT)).call(pvalue)
  end
  def get_authentication(pvalue : X509EnrollmentAuthFlags*) : HRESULT
    @lpVtbl.value.get_authentication.unsafe_as(Proc(X509EnrollmentAuthFlags*, HRESULT)).call(pvalue)
  end
  def get_enrollment_server_authentication(pvalue : X509EnrollmentAuthFlags*) : HRESULT
    @lpVtbl.value.get_enrollment_server_authentication.unsafe_as(Proc(X509EnrollmentAuthFlags*, HRESULT)).call(pvalue)
  end
end
struct LibWin32::IX509SignatureInformation
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_hash_algorithm(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_hash_algorithm.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def put_hash_algorithm(pvalue : IObjectId) : HRESULT
    @lpVtbl.value.put_hash_algorithm.unsafe_as(Proc(IObjectId, HRESULT)).call(pvalue)
  end
  def get_public_key_algorithm(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_public_key_algorithm.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def put_public_key_algorithm(pvalue : IObjectId) : HRESULT
    @lpVtbl.value.put_public_key_algorithm.unsafe_as(Proc(IObjectId, HRESULT)).call(pvalue)
  end
  def get_parameters(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_parameters.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def put_parameters(encoding : EncodingType, value : UInt8*) : HRESULT
    @lpVtbl.value.put_parameters.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, value)
  end
  def get_alternate_signature_algorithm(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_alternate_signature_algorithm.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_alternate_signature_algorithm(value : Int16) : HRESULT
    @lpVtbl.value.put_alternate_signature_algorithm.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_alternate_signature_algorithm_set(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_alternate_signature_algorithm_set.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_null_signed(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_null_signed.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_null_signed(value : Int16) : HRESULT
    @lpVtbl.value.put_null_signed.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_signature_algorithm(pkcs7signature : Int16, signaturekey : Int16, ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_signature_algorithm.unsafe_as(Proc(Int16, Int16, IObjectId*, HRESULT)).call(pkcs7signature, signaturekey, ppvalue)
  end
  def set_default_values : HRESULT
    @lpVtbl.value.set_default_values.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::ISignerCertificate
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(machinecontext : Int16, verifytype : X509PrivateKeyVerify, encoding : EncodingType, strcertificate : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(Int16, X509PrivateKeyVerify, EncodingType, UInt8*, HRESULT)).call(machinecontext, verifytype, encoding, strcertificate)
  end
  def get_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_private_key(ppvalue : IX509PrivateKey*) : HRESULT
    @lpVtbl.value.get_private_key.unsafe_as(Proc(IX509PrivateKey*, HRESULT)).call(ppvalue)
  end
  def get_silent(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_silent.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_silent(value : Int16) : HRESULT
    @lpVtbl.value.put_silent.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_parent_window(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_parent_window.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def put_parent_window(value : Int32) : HRESULT
    @lpVtbl.value.put_parent_window.unsafe_as(Proc(Int32, HRESULT)).call(value)
  end
  def get_ui_context_message(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_ui_context_message.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_ui_context_message(value : UInt8*) : HRESULT
    @lpVtbl.value.put_ui_context_message.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def put_pin(value : UInt8*) : HRESULT
    @lpVtbl.value.put_pin.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_signature_information(ppvalue : IX509SignatureInformation*) : HRESULT
    @lpVtbl.value.get_signature_information.unsafe_as(Proc(IX509SignatureInformation*, HRESULT)).call(ppvalue)
  end
end
struct LibWin32::ISignerCertificates
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_item_by_index(index : Int32, pval : ISignerCertificate*) : HRESULT
    @lpVtbl.value.get_item_by_index.unsafe_as(Proc(Int32, ISignerCertificate*, HRESULT)).call(index, pval)
  end
  def get_count(pval : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get__new_enum(pval : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IUnknown*, HRESULT)).call(pval)
  end
  def add(pval : ISignerCertificate) : HRESULT
    @lpVtbl.value.add.unsafe_as(Proc(ISignerCertificate, HRESULT)).call(pval)
  end
  def remove(index : Int32) : HRESULT
    @lpVtbl.value.remove.unsafe_as(Proc(Int32, HRESULT)).call(index)
  end
  def clear : HRESULT
    @lpVtbl.value.clear.unsafe_as(Proc(HRESULT)).call
  end
  def find(psignercert : ISignerCertificate, pisignercert : Int32*) : HRESULT
    @lpVtbl.value.find.unsafe_as(Proc(ISignerCertificate, Int32*, HRESULT)).call(psignercert, pisignercert)
  end
end
struct LibWin32::IX509NameValuePair
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(strname : UInt8*, strvalue : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(UInt8*, UInt8*, HRESULT)).call(strname, strvalue)
  end
  def get_value(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_value.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def get_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
end
struct LibWin32::IX509NameValuePairs
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_item_by_index(index : Int32, pval : IX509NameValuePair*) : HRESULT
    @lpVtbl.value.get_item_by_index.unsafe_as(Proc(Int32, IX509NameValuePair*, HRESULT)).call(index, pval)
  end
  def get_count(pval : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get__new_enum(pval : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IUnknown*, HRESULT)).call(pval)
  end
  def add(pval : IX509NameValuePair) : HRESULT
    @lpVtbl.value.add.unsafe_as(Proc(IX509NameValuePair, HRESULT)).call(pval)
  end
  def remove(index : Int32) : HRESULT
    @lpVtbl.value.remove.unsafe_as(Proc(Int32, HRESULT)).call(index)
  end
  def clear : HRESULT
    @lpVtbl.value.clear.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IX509CertificateTemplate
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_property(property : EnrollmentTemplateProperty, pvalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_property.unsafe_as(Proc(EnrollmentTemplateProperty, VARIANT*, HRESULT)).call(property, pvalue)
  end
end
struct LibWin32::IX509CertificateTemplates
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_item_by_index(index : Int32, pval : IX509CertificateTemplate*) : HRESULT
    @lpVtbl.value.get_item_by_index.unsafe_as(Proc(Int32, IX509CertificateTemplate*, HRESULT)).call(index, pval)
  end
  def get_count(pval : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get__new_enum(pval : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IUnknown*, HRESULT)).call(pval)
  end
  def add(pval : IX509CertificateTemplate) : HRESULT
    @lpVtbl.value.add.unsafe_as(Proc(IX509CertificateTemplate, HRESULT)).call(pval)
  end
  def remove(index : Int32) : HRESULT
    @lpVtbl.value.remove.unsafe_as(Proc(Int32, HRESULT)).call(index)
  end
  def clear : HRESULT
    @lpVtbl.value.clear.unsafe_as(Proc(HRESULT)).call
  end
  def get_item_by_name(bstrname : UInt8*, ppvalue : IX509CertificateTemplate*) : HRESULT
    @lpVtbl.value.get_item_by_name.unsafe_as(Proc(UInt8*, IX509CertificateTemplate*, HRESULT)).call(bstrname, ppvalue)
  end
  def get_item_by_oid(poid : IObjectId, ppvalue : IX509CertificateTemplate*) : HRESULT
    @lpVtbl.value.get_item_by_oid.unsafe_as(Proc(IObjectId, IX509CertificateTemplate*, HRESULT)).call(poid, ppvalue)
  end
end
struct LibWin32::IX509CertificateTemplateWritable
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(pvalue : IX509CertificateTemplate) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IX509CertificateTemplate, HRESULT)).call(pvalue)
  end
  def commit(commitflags : CommitTemplateFlags, strservercontext : UInt8*) : HRESULT
    @lpVtbl.value.commit.unsafe_as(Proc(CommitTemplateFlags, UInt8*, HRESULT)).call(commitflags, strservercontext)
  end
  def get_property(property : EnrollmentTemplateProperty, pvalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_property.unsafe_as(Proc(EnrollmentTemplateProperty, VARIANT*, HRESULT)).call(property, pvalue)
  end
  def put_property(property : EnrollmentTemplateProperty, value : VARIANT) : HRESULT
    @lpVtbl.value.put_property.unsafe_as(Proc(EnrollmentTemplateProperty, VARIANT, HRESULT)).call(property, value)
  end
  def get_template(ppvalue : IX509CertificateTemplate*) : HRESULT
    @lpVtbl.value.get_template.unsafe_as(Proc(IX509CertificateTemplate*, HRESULT)).call(ppvalue)
  end
end
struct LibWin32::ICertificationAuthority
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_property(property : EnrollmentCAProperty, pvalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_property.unsafe_as(Proc(EnrollmentCAProperty, VARIANT*, HRESULT)).call(property, pvalue)
  end
end
struct LibWin32::ICertificationAuthorities
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_item_by_index(index : Int32, pval : ICertificationAuthority*) : HRESULT
    @lpVtbl.value.get_item_by_index.unsafe_as(Proc(Int32, ICertificationAuthority*, HRESULT)).call(index, pval)
  end
  def get_count(pval : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get__new_enum(pval : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IUnknown*, HRESULT)).call(pval)
  end
  def add(pval : ICertificationAuthority) : HRESULT
    @lpVtbl.value.add.unsafe_as(Proc(ICertificationAuthority, HRESULT)).call(pval)
  end
  def remove(index : Int32) : HRESULT
    @lpVtbl.value.remove.unsafe_as(Proc(Int32, HRESULT)).call(index)
  end
  def clear : HRESULT
    @lpVtbl.value.clear.unsafe_as(Proc(HRESULT)).call
  end
  def compute_site_costs : HRESULT
    @lpVtbl.value.compute_site_costs.unsafe_as(Proc(HRESULT)).call
  end
  def get_item_by_name(strname : UInt8*, ppvalue : ICertificationAuthority*) : HRESULT
    @lpVtbl.value.get_item_by_name.unsafe_as(Proc(UInt8*, ICertificationAuthority*, HRESULT)).call(strname, ppvalue)
  end
end
struct LibWin32::IX509EnrollmentPolicyServer
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(bstrpolicyserverurl : UInt8*, bstrpolicyserverid : UInt8*, authflags : X509EnrollmentAuthFlags, fisuntrusted : Int16, context : X509CertificateEnrollmentContext) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(UInt8*, UInt8*, X509EnrollmentAuthFlags, Int16, X509CertificateEnrollmentContext, HRESULT)).call(bstrpolicyserverurl, bstrpolicyserverid, authflags, fisuntrusted, context)
  end
  def load_policy(option : X509EnrollmentPolicyLoadOption) : HRESULT
    @lpVtbl.value.load_policy.unsafe_as(Proc(X509EnrollmentPolicyLoadOption, HRESULT)).call(option)
  end
  def get_templates(ptemplates : IX509CertificateTemplates*) : HRESULT
    @lpVtbl.value.get_templates.unsafe_as(Proc(IX509CertificateTemplates*, HRESULT)).call(ptemplates)
  end
  def get_c_as_for_template(ptemplate : IX509CertificateTemplate, ppcas : ICertificationAuthorities*) : HRESULT
    @lpVtbl.value.get_c_as_for_template.unsafe_as(Proc(IX509CertificateTemplate, ICertificationAuthorities*, HRESULT)).call(ptemplate, ppcas)
  end
  def get_c_as(ppcas : ICertificationAuthorities*) : HRESULT
    @lpVtbl.value.get_c_as.unsafe_as(Proc(ICertificationAuthorities*, HRESULT)).call(ppcas)
  end
  def validate : HRESULT
    @lpVtbl.value.validate.unsafe_as(Proc(HRESULT)).call
  end
  def get_custom_oids(ppobjectids : IObjectIds*) : HRESULT
    @lpVtbl.value.get_custom_oids.unsafe_as(Proc(IObjectIds*, HRESULT)).call(ppobjectids)
  end
  def get_next_update_time(pdate : Float64*) : HRESULT
    @lpVtbl.value.get_next_update_time.unsafe_as(Proc(Float64*, HRESULT)).call(pdate)
  end
  def get_last_update_time(pdate : Float64*) : HRESULT
    @lpVtbl.value.get_last_update_time.unsafe_as(Proc(Float64*, HRESULT)).call(pdate)
  end
  def get_policy_server_url(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_policy_server_url.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def get_policy_server_id(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_policy_server_id.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def get_friendly_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_friendly_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def get_is_default_cep(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_is_default_cep.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_use_client_id(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_use_client_id.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_allow_un_trusted_ca(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_allow_un_trusted_ca.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_cache_path(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_cache_path.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def get_cache_dir(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_cache_dir.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def get_auth_flags(pvalue : X509EnrollmentAuthFlags*) : HRESULT
    @lpVtbl.value.get_auth_flags.unsafe_as(Proc(X509EnrollmentAuthFlags*, HRESULT)).call(pvalue)
  end
  def set_credential(hwndparent : Int32, flag : X509EnrollmentAuthFlags, strcredential : UInt8*, strpassword : UInt8*) : HRESULT
    @lpVtbl.value.set_credential.unsafe_as(Proc(Int32, X509EnrollmentAuthFlags, UInt8*, UInt8*, HRESULT)).call(hwndparent, flag, strcredential, strpassword)
  end
  def query_changes(pvalue : Int16*) : HRESULT
    @lpVtbl.value.query_changes.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def initialize_import(val : VARIANT) : HRESULT
    @lpVtbl.value.initialize_import.unsafe_as(Proc(VARIANT, HRESULT)).call(val)
  end
  def export(exportflags : X509EnrollmentPolicyExportFlags, pval : VARIANT*) : HRESULT
    @lpVtbl.value.export.unsafe_as(Proc(X509EnrollmentPolicyExportFlags, VARIANT*, HRESULT)).call(exportflags, pval)
  end
  def get_cost(pvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_cost.unsafe_as(Proc(UInt32*, HRESULT)).call(pvalue)
  end
  def put_cost(value : UInt32) : HRESULT
    @lpVtbl.value.put_cost.unsafe_as(Proc(UInt32, HRESULT)).call(value)
  end
end
struct LibWin32::IX509PolicyServerUrl
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(context : X509CertificateEnrollmentContext) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(X509CertificateEnrollmentContext, HRESULT)).call(context)
  end
  def get_url(ppvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_url.unsafe_as(Proc(UInt8**, HRESULT)).call(ppvalue)
  end
  def put_url(pvalue : UInt8*) : HRESULT
    @lpVtbl.value.put_url.unsafe_as(Proc(UInt8*, HRESULT)).call(pvalue)
  end
  def get_default(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_default.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_default(value : Int16) : HRESULT
    @lpVtbl.value.put_default.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_flags(pvalue : PolicyServerUrlFlags*) : HRESULT
    @lpVtbl.value.get_flags.unsafe_as(Proc(PolicyServerUrlFlags*, HRESULT)).call(pvalue)
  end
  def put_flags(flags : PolicyServerUrlFlags) : HRESULT
    @lpVtbl.value.put_flags.unsafe_as(Proc(PolicyServerUrlFlags, HRESULT)).call(flags)
  end
  def get_auth_flags(pvalue : X509EnrollmentAuthFlags*) : HRESULT
    @lpVtbl.value.get_auth_flags.unsafe_as(Proc(X509EnrollmentAuthFlags*, HRESULT)).call(pvalue)
  end
  def put_auth_flags(flags : X509EnrollmentAuthFlags) : HRESULT
    @lpVtbl.value.put_auth_flags.unsafe_as(Proc(X509EnrollmentAuthFlags, HRESULT)).call(flags)
  end
  def get_cost(pvalue : UInt32*) : HRESULT
    @lpVtbl.value.get_cost.unsafe_as(Proc(UInt32*, HRESULT)).call(pvalue)
  end
  def put_cost(value : UInt32) : HRESULT
    @lpVtbl.value.put_cost.unsafe_as(Proc(UInt32, HRESULT)).call(value)
  end
  def get_string_property(propertyid : PolicyServerUrlPropertyID, ppvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_string_property.unsafe_as(Proc(PolicyServerUrlPropertyID, UInt8**, HRESULT)).call(propertyid, ppvalue)
  end
  def set_string_property(propertyid : PolicyServerUrlPropertyID, pvalue : UInt8*) : HRESULT
    @lpVtbl.value.set_string_property.unsafe_as(Proc(PolicyServerUrlPropertyID, UInt8*, HRESULT)).call(propertyid, pvalue)
  end
  def update_registry(context : X509CertificateEnrollmentContext) : HRESULT
    @lpVtbl.value.update_registry.unsafe_as(Proc(X509CertificateEnrollmentContext, HRESULT)).call(context)
  end
  def remove_from_registry(context : X509CertificateEnrollmentContext) : HRESULT
    @lpVtbl.value.remove_from_registry.unsafe_as(Proc(X509CertificateEnrollmentContext, HRESULT)).call(context)
  end
end
struct LibWin32::IX509PolicyServerListManager
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_item_by_index(index : Int32, pval : IX509PolicyServerUrl*) : HRESULT
    @lpVtbl.value.get_item_by_index.unsafe_as(Proc(Int32, IX509PolicyServerUrl*, HRESULT)).call(index, pval)
  end
  def get_count(pval : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get__new_enum(pval : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IUnknown*, HRESULT)).call(pval)
  end
  def add(pval : IX509PolicyServerUrl) : HRESULT
    @lpVtbl.value.add.unsafe_as(Proc(IX509PolicyServerUrl, HRESULT)).call(pval)
  end
  def remove(index : Int32) : HRESULT
    @lpVtbl.value.remove.unsafe_as(Proc(Int32, HRESULT)).call(index)
  end
  def clear : HRESULT
    @lpVtbl.value.clear.unsafe_as(Proc(HRESULT)).call
  end
  def initialize(context : X509CertificateEnrollmentContext, flags : PolicyServerUrlFlags) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(X509CertificateEnrollmentContext, PolicyServerUrlFlags, HRESULT)).call(context, flags)
  end
end
struct LibWin32::IX509CertificateRequest
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(context : X509CertificateEnrollmentContext) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(X509CertificateEnrollmentContext, HRESULT)).call(context)
  end
  def encode : HRESULT
    @lpVtbl.value.encode.unsafe_as(Proc(HRESULT)).call
  end
  def reset_for_encode : HRESULT
    @lpVtbl.value.reset_for_encode.unsafe_as(Proc(HRESULT)).call
  end
  def get_inner_request(level : InnerRequestLevel, ppvalue : IX509CertificateRequest*) : HRESULT
    @lpVtbl.value.get_inner_request.unsafe_as(Proc(InnerRequestLevel, IX509CertificateRequest*, HRESULT)).call(level, ppvalue)
  end
  def get_type(pvalue : X509RequestType*) : HRESULT
    @lpVtbl.value.get_type.unsafe_as(Proc(X509RequestType*, HRESULT)).call(pvalue)
  end
  def get_enrollment_context(pvalue : X509CertificateEnrollmentContext*) : HRESULT
    @lpVtbl.value.get_enrollment_context.unsafe_as(Proc(X509CertificateEnrollmentContext*, HRESULT)).call(pvalue)
  end
  def get_silent(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_silent.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_silent(value : Int16) : HRESULT
    @lpVtbl.value.put_silent.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_parent_window(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_parent_window.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def put_parent_window(value : Int32) : HRESULT
    @lpVtbl.value.put_parent_window.unsafe_as(Proc(Int32, HRESULT)).call(value)
  end
  def get_ui_context_message(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_ui_context_message.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_ui_context_message(value : UInt8*) : HRESULT
    @lpVtbl.value.put_ui_context_message.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_suppress_defaults(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_suppress_defaults.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_suppress_defaults(value : Int16) : HRESULT
    @lpVtbl.value.put_suppress_defaults.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_renewal_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_renewal_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def put_renewal_certificate(encoding : EncodingType, value : UInt8*) : HRESULT
    @lpVtbl.value.put_renewal_certificate.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, value)
  end
  def get_client_id(pvalue : RequestClientInfoClientId*) : HRESULT
    @lpVtbl.value.get_client_id.unsafe_as(Proc(RequestClientInfoClientId*, HRESULT)).call(pvalue)
  end
  def put_client_id(value : RequestClientInfoClientId) : HRESULT
    @lpVtbl.value.put_client_id.unsafe_as(Proc(RequestClientInfoClientId, HRESULT)).call(value)
  end
  def get_csp_informations(ppvalue : ICspInformations*) : HRESULT
    @lpVtbl.value.get_csp_informations.unsafe_as(Proc(ICspInformations*, HRESULT)).call(ppvalue)
  end
  def put_csp_informations(pvalue : ICspInformations) : HRESULT
    @lpVtbl.value.put_csp_informations.unsafe_as(Proc(ICspInformations, HRESULT)).call(pvalue)
  end
  def get_hash_algorithm(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_hash_algorithm.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def put_hash_algorithm(pvalue : IObjectId) : HRESULT
    @lpVtbl.value.put_hash_algorithm.unsafe_as(Proc(IObjectId, HRESULT)).call(pvalue)
  end
  def get_alternate_signature_algorithm(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_alternate_signature_algorithm.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_alternate_signature_algorithm(value : Int16) : HRESULT
    @lpVtbl.value.put_alternate_signature_algorithm.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
end
struct LibWin32::IX509CertificateRequestPkcs10
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(context : X509CertificateEnrollmentContext) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(X509CertificateEnrollmentContext, HRESULT)).call(context)
  end
  def encode : HRESULT
    @lpVtbl.value.encode.unsafe_as(Proc(HRESULT)).call
  end
  def reset_for_encode : HRESULT
    @lpVtbl.value.reset_for_encode.unsafe_as(Proc(HRESULT)).call
  end
  def get_inner_request(level : InnerRequestLevel, ppvalue : IX509CertificateRequest*) : HRESULT
    @lpVtbl.value.get_inner_request.unsafe_as(Proc(InnerRequestLevel, IX509CertificateRequest*, HRESULT)).call(level, ppvalue)
  end
  def get_type(pvalue : X509RequestType*) : HRESULT
    @lpVtbl.value.get_type.unsafe_as(Proc(X509RequestType*, HRESULT)).call(pvalue)
  end
  def get_enrollment_context(pvalue : X509CertificateEnrollmentContext*) : HRESULT
    @lpVtbl.value.get_enrollment_context.unsafe_as(Proc(X509CertificateEnrollmentContext*, HRESULT)).call(pvalue)
  end
  def get_silent(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_silent.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_silent(value : Int16) : HRESULT
    @lpVtbl.value.put_silent.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_parent_window(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_parent_window.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def put_parent_window(value : Int32) : HRESULT
    @lpVtbl.value.put_parent_window.unsafe_as(Proc(Int32, HRESULT)).call(value)
  end
  def get_ui_context_message(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_ui_context_message.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_ui_context_message(value : UInt8*) : HRESULT
    @lpVtbl.value.put_ui_context_message.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_suppress_defaults(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_suppress_defaults.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_suppress_defaults(value : Int16) : HRESULT
    @lpVtbl.value.put_suppress_defaults.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_renewal_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_renewal_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def put_renewal_certificate(encoding : EncodingType, value : UInt8*) : HRESULT
    @lpVtbl.value.put_renewal_certificate.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, value)
  end
  def get_client_id(pvalue : RequestClientInfoClientId*) : HRESULT
    @lpVtbl.value.get_client_id.unsafe_as(Proc(RequestClientInfoClientId*, HRESULT)).call(pvalue)
  end
  def put_client_id(value : RequestClientInfoClientId) : HRESULT
    @lpVtbl.value.put_client_id.unsafe_as(Proc(RequestClientInfoClientId, HRESULT)).call(value)
  end
  def get_csp_informations(ppvalue : ICspInformations*) : HRESULT
    @lpVtbl.value.get_csp_informations.unsafe_as(Proc(ICspInformations*, HRESULT)).call(ppvalue)
  end
  def put_csp_informations(pvalue : ICspInformations) : HRESULT
    @lpVtbl.value.put_csp_informations.unsafe_as(Proc(ICspInformations, HRESULT)).call(pvalue)
  end
  def get_hash_algorithm(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_hash_algorithm.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def put_hash_algorithm(pvalue : IObjectId) : HRESULT
    @lpVtbl.value.put_hash_algorithm.unsafe_as(Proc(IObjectId, HRESULT)).call(pvalue)
  end
  def get_alternate_signature_algorithm(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_alternate_signature_algorithm.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_alternate_signature_algorithm(value : Int16) : HRESULT
    @lpVtbl.value.put_alternate_signature_algorithm.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def initialize_from_template_name(context : X509CertificateEnrollmentContext, strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_template_name.unsafe_as(Proc(X509CertificateEnrollmentContext, UInt8*, HRESULT)).call(context, strtemplatename)
  end
  def initialize_from_private_key(context : X509CertificateEnrollmentContext, pprivatekey : IX509PrivateKey, strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_private_key.unsafe_as(Proc(X509CertificateEnrollmentContext, IX509PrivateKey, UInt8*, HRESULT)).call(context, pprivatekey, strtemplatename)
  end
  def initialize_from_public_key(context : X509CertificateEnrollmentContext, ppublickey : IX509PublicKey, strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_public_key.unsafe_as(Proc(X509CertificateEnrollmentContext, IX509PublicKey, UInt8*, HRESULT)).call(context, ppublickey, strtemplatename)
  end
  def initialize_from_certificate(context : X509CertificateEnrollmentContext, strcertificate : UInt8*, encoding : EncodingType, inheritoptions : X509RequestInheritOptions) : HRESULT
    @lpVtbl.value.initialize_from_certificate.unsafe_as(Proc(X509CertificateEnrollmentContext, UInt8*, EncodingType, X509RequestInheritOptions, HRESULT)).call(context, strcertificate, encoding, inheritoptions)
  end
  def initialize_decode(strencodeddata : UInt8*, encoding : EncodingType) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(UInt8*, EncodingType, HRESULT)).call(strencodeddata, encoding)
  end
  def check_signature(allowedsignaturetypes : Pkcs10AllowedSignatureTypes) : HRESULT
    @lpVtbl.value.check_signature.unsafe_as(Proc(Pkcs10AllowedSignatureTypes, HRESULT)).call(allowedsignaturetypes)
  end
  def is_smart_card(pvalue : Int16*) : HRESULT
    @lpVtbl.value.is_smart_card.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_template_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_template_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_public_key(ppvalue : IX509PublicKey*) : HRESULT
    @lpVtbl.value.get_public_key.unsafe_as(Proc(IX509PublicKey*, HRESULT)).call(ppvalue)
  end
  def get_private_key(ppvalue : IX509PrivateKey*) : HRESULT
    @lpVtbl.value.get_private_key.unsafe_as(Proc(IX509PrivateKey*, HRESULT)).call(ppvalue)
  end
  def get_null_signed(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_null_signed.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_reuse_key(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_reuse_key.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_old_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_old_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_subject(ppvalue : IX500DistinguishedName*) : HRESULT
    @lpVtbl.value.get_subject.unsafe_as(Proc(IX500DistinguishedName*, HRESULT)).call(ppvalue)
  end
  def put_subject(pvalue : IX500DistinguishedName) : HRESULT
    @lpVtbl.value.put_subject.unsafe_as(Proc(IX500DistinguishedName, HRESULT)).call(pvalue)
  end
  def get_csp_statuses(ppvalue : ICspStatuses*) : HRESULT
    @lpVtbl.value.get_csp_statuses.unsafe_as(Proc(ICspStatuses*, HRESULT)).call(ppvalue)
  end
  def get_smime_capabilities(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_smime_capabilities.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_smime_capabilities(value : Int16) : HRESULT
    @lpVtbl.value.put_smime_capabilities.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_signature_information(ppvalue : IX509SignatureInformation*) : HRESULT
    @lpVtbl.value.get_signature_information.unsafe_as(Proc(IX509SignatureInformation*, HRESULT)).call(ppvalue)
  end
  def get_key_container_name_prefix(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_key_container_name_prefix.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_key_container_name_prefix(value : UInt8*) : HRESULT
    @lpVtbl.value.put_key_container_name_prefix.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_crypt_attributes(ppvalue : ICryptAttributes*) : HRESULT
    @lpVtbl.value.get_crypt_attributes.unsafe_as(Proc(ICryptAttributes*, HRESULT)).call(ppvalue)
  end
  def get_x509_extensions(ppvalue : IX509Extensions*) : HRESULT
    @lpVtbl.value.get_x509_extensions.unsafe_as(Proc(IX509Extensions*, HRESULT)).call(ppvalue)
  end
  def get_critical_extensions(ppvalue : IObjectIds*) : HRESULT
    @lpVtbl.value.get_critical_extensions.unsafe_as(Proc(IObjectIds*, HRESULT)).call(ppvalue)
  end
  def get_suppress_oids(ppvalue : IObjectIds*) : HRESULT
    @lpVtbl.value.get_suppress_oids.unsafe_as(Proc(IObjectIds*, HRESULT)).call(ppvalue)
  end
  def get_raw_data_to_be_signed(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data_to_be_signed.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_signature(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_signature.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_csp_statuses2(keyspec : X509KeySpec, ppcspstatuses : ICspStatuses*) : HRESULT
    @lpVtbl.value.get_csp_statuses2.unsafe_as(Proc(X509KeySpec, ICspStatuses*, HRESULT)).call(keyspec, ppcspstatuses)
  end
end
struct LibWin32::IX509CertificateRequestPkcs10V2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(context : X509CertificateEnrollmentContext) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(X509CertificateEnrollmentContext, HRESULT)).call(context)
  end
  def encode : HRESULT
    @lpVtbl.value.encode.unsafe_as(Proc(HRESULT)).call
  end
  def reset_for_encode : HRESULT
    @lpVtbl.value.reset_for_encode.unsafe_as(Proc(HRESULT)).call
  end
  def get_inner_request(level : InnerRequestLevel, ppvalue : IX509CertificateRequest*) : HRESULT
    @lpVtbl.value.get_inner_request.unsafe_as(Proc(InnerRequestLevel, IX509CertificateRequest*, HRESULT)).call(level, ppvalue)
  end
  def get_type(pvalue : X509RequestType*) : HRESULT
    @lpVtbl.value.get_type.unsafe_as(Proc(X509RequestType*, HRESULT)).call(pvalue)
  end
  def get_enrollment_context(pvalue : X509CertificateEnrollmentContext*) : HRESULT
    @lpVtbl.value.get_enrollment_context.unsafe_as(Proc(X509CertificateEnrollmentContext*, HRESULT)).call(pvalue)
  end
  def get_silent(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_silent.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_silent(value : Int16) : HRESULT
    @lpVtbl.value.put_silent.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_parent_window(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_parent_window.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def put_parent_window(value : Int32) : HRESULT
    @lpVtbl.value.put_parent_window.unsafe_as(Proc(Int32, HRESULT)).call(value)
  end
  def get_ui_context_message(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_ui_context_message.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_ui_context_message(value : UInt8*) : HRESULT
    @lpVtbl.value.put_ui_context_message.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_suppress_defaults(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_suppress_defaults.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_suppress_defaults(value : Int16) : HRESULT
    @lpVtbl.value.put_suppress_defaults.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_renewal_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_renewal_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def put_renewal_certificate(encoding : EncodingType, value : UInt8*) : HRESULT
    @lpVtbl.value.put_renewal_certificate.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, value)
  end
  def get_client_id(pvalue : RequestClientInfoClientId*) : HRESULT
    @lpVtbl.value.get_client_id.unsafe_as(Proc(RequestClientInfoClientId*, HRESULT)).call(pvalue)
  end
  def put_client_id(value : RequestClientInfoClientId) : HRESULT
    @lpVtbl.value.put_client_id.unsafe_as(Proc(RequestClientInfoClientId, HRESULT)).call(value)
  end
  def get_csp_informations(ppvalue : ICspInformations*) : HRESULT
    @lpVtbl.value.get_csp_informations.unsafe_as(Proc(ICspInformations*, HRESULT)).call(ppvalue)
  end
  def put_csp_informations(pvalue : ICspInformations) : HRESULT
    @lpVtbl.value.put_csp_informations.unsafe_as(Proc(ICspInformations, HRESULT)).call(pvalue)
  end
  def get_hash_algorithm(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_hash_algorithm.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def put_hash_algorithm(pvalue : IObjectId) : HRESULT
    @lpVtbl.value.put_hash_algorithm.unsafe_as(Proc(IObjectId, HRESULT)).call(pvalue)
  end
  def get_alternate_signature_algorithm(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_alternate_signature_algorithm.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_alternate_signature_algorithm(value : Int16) : HRESULT
    @lpVtbl.value.put_alternate_signature_algorithm.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def initialize_from_template_name(context : X509CertificateEnrollmentContext, strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_template_name.unsafe_as(Proc(X509CertificateEnrollmentContext, UInt8*, HRESULT)).call(context, strtemplatename)
  end
  def initialize_from_private_key(context : X509CertificateEnrollmentContext, pprivatekey : IX509PrivateKey, strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_private_key.unsafe_as(Proc(X509CertificateEnrollmentContext, IX509PrivateKey, UInt8*, HRESULT)).call(context, pprivatekey, strtemplatename)
  end
  def initialize_from_public_key(context : X509CertificateEnrollmentContext, ppublickey : IX509PublicKey, strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_public_key.unsafe_as(Proc(X509CertificateEnrollmentContext, IX509PublicKey, UInt8*, HRESULT)).call(context, ppublickey, strtemplatename)
  end
  def initialize_from_certificate(context : X509CertificateEnrollmentContext, strcertificate : UInt8*, encoding : EncodingType, inheritoptions : X509RequestInheritOptions) : HRESULT
    @lpVtbl.value.initialize_from_certificate.unsafe_as(Proc(X509CertificateEnrollmentContext, UInt8*, EncodingType, X509RequestInheritOptions, HRESULT)).call(context, strcertificate, encoding, inheritoptions)
  end
  def initialize_decode(strencodeddata : UInt8*, encoding : EncodingType) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(UInt8*, EncodingType, HRESULT)).call(strencodeddata, encoding)
  end
  def check_signature(allowedsignaturetypes : Pkcs10AllowedSignatureTypes) : HRESULT
    @lpVtbl.value.check_signature.unsafe_as(Proc(Pkcs10AllowedSignatureTypes, HRESULT)).call(allowedsignaturetypes)
  end
  def is_smart_card(pvalue : Int16*) : HRESULT
    @lpVtbl.value.is_smart_card.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_template_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_template_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_public_key(ppvalue : IX509PublicKey*) : HRESULT
    @lpVtbl.value.get_public_key.unsafe_as(Proc(IX509PublicKey*, HRESULT)).call(ppvalue)
  end
  def get_private_key(ppvalue : IX509PrivateKey*) : HRESULT
    @lpVtbl.value.get_private_key.unsafe_as(Proc(IX509PrivateKey*, HRESULT)).call(ppvalue)
  end
  def get_null_signed(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_null_signed.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_reuse_key(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_reuse_key.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_old_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_old_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_subject(ppvalue : IX500DistinguishedName*) : HRESULT
    @lpVtbl.value.get_subject.unsafe_as(Proc(IX500DistinguishedName*, HRESULT)).call(ppvalue)
  end
  def put_subject(pvalue : IX500DistinguishedName) : HRESULT
    @lpVtbl.value.put_subject.unsafe_as(Proc(IX500DistinguishedName, HRESULT)).call(pvalue)
  end
  def get_csp_statuses(ppvalue : ICspStatuses*) : HRESULT
    @lpVtbl.value.get_csp_statuses.unsafe_as(Proc(ICspStatuses*, HRESULT)).call(ppvalue)
  end
  def get_smime_capabilities(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_smime_capabilities.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_smime_capabilities(value : Int16) : HRESULT
    @lpVtbl.value.put_smime_capabilities.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_signature_information(ppvalue : IX509SignatureInformation*) : HRESULT
    @lpVtbl.value.get_signature_information.unsafe_as(Proc(IX509SignatureInformation*, HRESULT)).call(ppvalue)
  end
  def get_key_container_name_prefix(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_key_container_name_prefix.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_key_container_name_prefix(value : UInt8*) : HRESULT
    @lpVtbl.value.put_key_container_name_prefix.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_crypt_attributes(ppvalue : ICryptAttributes*) : HRESULT
    @lpVtbl.value.get_crypt_attributes.unsafe_as(Proc(ICryptAttributes*, HRESULT)).call(ppvalue)
  end
  def get_x509_extensions(ppvalue : IX509Extensions*) : HRESULT
    @lpVtbl.value.get_x509_extensions.unsafe_as(Proc(IX509Extensions*, HRESULT)).call(ppvalue)
  end
  def get_critical_extensions(ppvalue : IObjectIds*) : HRESULT
    @lpVtbl.value.get_critical_extensions.unsafe_as(Proc(IObjectIds*, HRESULT)).call(ppvalue)
  end
  def get_suppress_oids(ppvalue : IObjectIds*) : HRESULT
    @lpVtbl.value.get_suppress_oids.unsafe_as(Proc(IObjectIds*, HRESULT)).call(ppvalue)
  end
  def get_raw_data_to_be_signed(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data_to_be_signed.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_signature(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_signature.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_csp_statuses2(keyspec : X509KeySpec, ppcspstatuses : ICspStatuses*) : HRESULT
    @lpVtbl.value.get_csp_statuses2.unsafe_as(Proc(X509KeySpec, ICspStatuses*, HRESULT)).call(keyspec, ppcspstatuses)
  end
  def initialize_from_template(context : X509CertificateEnrollmentContext, ppolicyserver : IX509EnrollmentPolicyServer, ptemplate : IX509CertificateTemplate) : HRESULT
    @lpVtbl.value.initialize_from_template.unsafe_as(Proc(X509CertificateEnrollmentContext, IX509EnrollmentPolicyServer, IX509CertificateTemplate, HRESULT)).call(context, ppolicyserver, ptemplate)
  end
  def initialize_from_private_key_template(context : X509CertificateEnrollmentContext, pprivatekey : IX509PrivateKey, ppolicyserver : IX509EnrollmentPolicyServer, ptemplate : IX509CertificateTemplate) : HRESULT
    @lpVtbl.value.initialize_from_private_key_template.unsafe_as(Proc(X509CertificateEnrollmentContext, IX509PrivateKey, IX509EnrollmentPolicyServer, IX509CertificateTemplate, HRESULT)).call(context, pprivatekey, ppolicyserver, ptemplate)
  end
  def initialize_from_public_key_template(context : X509CertificateEnrollmentContext, ppublickey : IX509PublicKey, ppolicyserver : IX509EnrollmentPolicyServer, ptemplate : IX509CertificateTemplate) : HRESULT
    @lpVtbl.value.initialize_from_public_key_template.unsafe_as(Proc(X509CertificateEnrollmentContext, IX509PublicKey, IX509EnrollmentPolicyServer, IX509CertificateTemplate, HRESULT)).call(context, ppublickey, ppolicyserver, ptemplate)
  end
  def get_policy_server(pppolicyserver : IX509EnrollmentPolicyServer*) : HRESULT
    @lpVtbl.value.get_policy_server.unsafe_as(Proc(IX509EnrollmentPolicyServer*, HRESULT)).call(pppolicyserver)
  end
  def get_template(pptemplate : IX509CertificateTemplate*) : HRESULT
    @lpVtbl.value.get_template.unsafe_as(Proc(IX509CertificateTemplate*, HRESULT)).call(pptemplate)
  end
end
struct LibWin32::IX509CertificateRequestPkcs10V3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(context : X509CertificateEnrollmentContext) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(X509CertificateEnrollmentContext, HRESULT)).call(context)
  end
  def encode : HRESULT
    @lpVtbl.value.encode.unsafe_as(Proc(HRESULT)).call
  end
  def reset_for_encode : HRESULT
    @lpVtbl.value.reset_for_encode.unsafe_as(Proc(HRESULT)).call
  end
  def get_inner_request(level : InnerRequestLevel, ppvalue : IX509CertificateRequest*) : HRESULT
    @lpVtbl.value.get_inner_request.unsafe_as(Proc(InnerRequestLevel, IX509CertificateRequest*, HRESULT)).call(level, ppvalue)
  end
  def get_type(pvalue : X509RequestType*) : HRESULT
    @lpVtbl.value.get_type.unsafe_as(Proc(X509RequestType*, HRESULT)).call(pvalue)
  end
  def get_enrollment_context(pvalue : X509CertificateEnrollmentContext*) : HRESULT
    @lpVtbl.value.get_enrollment_context.unsafe_as(Proc(X509CertificateEnrollmentContext*, HRESULT)).call(pvalue)
  end
  def get_silent(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_silent.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_silent(value : Int16) : HRESULT
    @lpVtbl.value.put_silent.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_parent_window(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_parent_window.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def put_parent_window(value : Int32) : HRESULT
    @lpVtbl.value.put_parent_window.unsafe_as(Proc(Int32, HRESULT)).call(value)
  end
  def get_ui_context_message(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_ui_context_message.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_ui_context_message(value : UInt8*) : HRESULT
    @lpVtbl.value.put_ui_context_message.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_suppress_defaults(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_suppress_defaults.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_suppress_defaults(value : Int16) : HRESULT
    @lpVtbl.value.put_suppress_defaults.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_renewal_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_renewal_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def put_renewal_certificate(encoding : EncodingType, value : UInt8*) : HRESULT
    @lpVtbl.value.put_renewal_certificate.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, value)
  end
  def get_client_id(pvalue : RequestClientInfoClientId*) : HRESULT
    @lpVtbl.value.get_client_id.unsafe_as(Proc(RequestClientInfoClientId*, HRESULT)).call(pvalue)
  end
  def put_client_id(value : RequestClientInfoClientId) : HRESULT
    @lpVtbl.value.put_client_id.unsafe_as(Proc(RequestClientInfoClientId, HRESULT)).call(value)
  end
  def get_csp_informations(ppvalue : ICspInformations*) : HRESULT
    @lpVtbl.value.get_csp_informations.unsafe_as(Proc(ICspInformations*, HRESULT)).call(ppvalue)
  end
  def put_csp_informations(pvalue : ICspInformations) : HRESULT
    @lpVtbl.value.put_csp_informations.unsafe_as(Proc(ICspInformations, HRESULT)).call(pvalue)
  end
  def get_hash_algorithm(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_hash_algorithm.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def put_hash_algorithm(pvalue : IObjectId) : HRESULT
    @lpVtbl.value.put_hash_algorithm.unsafe_as(Proc(IObjectId, HRESULT)).call(pvalue)
  end
  def get_alternate_signature_algorithm(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_alternate_signature_algorithm.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_alternate_signature_algorithm(value : Int16) : HRESULT
    @lpVtbl.value.put_alternate_signature_algorithm.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def initialize_from_template_name(context : X509CertificateEnrollmentContext, strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_template_name.unsafe_as(Proc(X509CertificateEnrollmentContext, UInt8*, HRESULT)).call(context, strtemplatename)
  end
  def initialize_from_private_key(context : X509CertificateEnrollmentContext, pprivatekey : IX509PrivateKey, strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_private_key.unsafe_as(Proc(X509CertificateEnrollmentContext, IX509PrivateKey, UInt8*, HRESULT)).call(context, pprivatekey, strtemplatename)
  end
  def initialize_from_public_key(context : X509CertificateEnrollmentContext, ppublickey : IX509PublicKey, strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_public_key.unsafe_as(Proc(X509CertificateEnrollmentContext, IX509PublicKey, UInt8*, HRESULT)).call(context, ppublickey, strtemplatename)
  end
  def initialize_from_certificate(context : X509CertificateEnrollmentContext, strcertificate : UInt8*, encoding : EncodingType, inheritoptions : X509RequestInheritOptions) : HRESULT
    @lpVtbl.value.initialize_from_certificate.unsafe_as(Proc(X509CertificateEnrollmentContext, UInt8*, EncodingType, X509RequestInheritOptions, HRESULT)).call(context, strcertificate, encoding, inheritoptions)
  end
  def initialize_decode(strencodeddata : UInt8*, encoding : EncodingType) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(UInt8*, EncodingType, HRESULT)).call(strencodeddata, encoding)
  end
  def check_signature(allowedsignaturetypes : Pkcs10AllowedSignatureTypes) : HRESULT
    @lpVtbl.value.check_signature.unsafe_as(Proc(Pkcs10AllowedSignatureTypes, HRESULT)).call(allowedsignaturetypes)
  end
  def is_smart_card(pvalue : Int16*) : HRESULT
    @lpVtbl.value.is_smart_card.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_template_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_template_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_public_key(ppvalue : IX509PublicKey*) : HRESULT
    @lpVtbl.value.get_public_key.unsafe_as(Proc(IX509PublicKey*, HRESULT)).call(ppvalue)
  end
  def get_private_key(ppvalue : IX509PrivateKey*) : HRESULT
    @lpVtbl.value.get_private_key.unsafe_as(Proc(IX509PrivateKey*, HRESULT)).call(ppvalue)
  end
  def get_null_signed(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_null_signed.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_reuse_key(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_reuse_key.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_old_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_old_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_subject(ppvalue : IX500DistinguishedName*) : HRESULT
    @lpVtbl.value.get_subject.unsafe_as(Proc(IX500DistinguishedName*, HRESULT)).call(ppvalue)
  end
  def put_subject(pvalue : IX500DistinguishedName) : HRESULT
    @lpVtbl.value.put_subject.unsafe_as(Proc(IX500DistinguishedName, HRESULT)).call(pvalue)
  end
  def get_csp_statuses(ppvalue : ICspStatuses*) : HRESULT
    @lpVtbl.value.get_csp_statuses.unsafe_as(Proc(ICspStatuses*, HRESULT)).call(ppvalue)
  end
  def get_smime_capabilities(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_smime_capabilities.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_smime_capabilities(value : Int16) : HRESULT
    @lpVtbl.value.put_smime_capabilities.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_signature_information(ppvalue : IX509SignatureInformation*) : HRESULT
    @lpVtbl.value.get_signature_information.unsafe_as(Proc(IX509SignatureInformation*, HRESULT)).call(ppvalue)
  end
  def get_key_container_name_prefix(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_key_container_name_prefix.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_key_container_name_prefix(value : UInt8*) : HRESULT
    @lpVtbl.value.put_key_container_name_prefix.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_crypt_attributes(ppvalue : ICryptAttributes*) : HRESULT
    @lpVtbl.value.get_crypt_attributes.unsafe_as(Proc(ICryptAttributes*, HRESULT)).call(ppvalue)
  end
  def get_x509_extensions(ppvalue : IX509Extensions*) : HRESULT
    @lpVtbl.value.get_x509_extensions.unsafe_as(Proc(IX509Extensions*, HRESULT)).call(ppvalue)
  end
  def get_critical_extensions(ppvalue : IObjectIds*) : HRESULT
    @lpVtbl.value.get_critical_extensions.unsafe_as(Proc(IObjectIds*, HRESULT)).call(ppvalue)
  end
  def get_suppress_oids(ppvalue : IObjectIds*) : HRESULT
    @lpVtbl.value.get_suppress_oids.unsafe_as(Proc(IObjectIds*, HRESULT)).call(ppvalue)
  end
  def get_raw_data_to_be_signed(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data_to_be_signed.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_signature(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_signature.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_csp_statuses2(keyspec : X509KeySpec, ppcspstatuses : ICspStatuses*) : HRESULT
    @lpVtbl.value.get_csp_statuses2.unsafe_as(Proc(X509KeySpec, ICspStatuses*, HRESULT)).call(keyspec, ppcspstatuses)
  end
  def initialize_from_template(context : X509CertificateEnrollmentContext, ppolicyserver : IX509EnrollmentPolicyServer, ptemplate : IX509CertificateTemplate) : HRESULT
    @lpVtbl.value.initialize_from_template.unsafe_as(Proc(X509CertificateEnrollmentContext, IX509EnrollmentPolicyServer, IX509CertificateTemplate, HRESULT)).call(context, ppolicyserver, ptemplate)
  end
  def initialize_from_private_key_template(context : X509CertificateEnrollmentContext, pprivatekey : IX509PrivateKey, ppolicyserver : IX509EnrollmentPolicyServer, ptemplate : IX509CertificateTemplate) : HRESULT
    @lpVtbl.value.initialize_from_private_key_template.unsafe_as(Proc(X509CertificateEnrollmentContext, IX509PrivateKey, IX509EnrollmentPolicyServer, IX509CertificateTemplate, HRESULT)).call(context, pprivatekey, ppolicyserver, ptemplate)
  end
  def initialize_from_public_key_template(context : X509CertificateEnrollmentContext, ppublickey : IX509PublicKey, ppolicyserver : IX509EnrollmentPolicyServer, ptemplate : IX509CertificateTemplate) : HRESULT
    @lpVtbl.value.initialize_from_public_key_template.unsafe_as(Proc(X509CertificateEnrollmentContext, IX509PublicKey, IX509EnrollmentPolicyServer, IX509CertificateTemplate, HRESULT)).call(context, ppublickey, ppolicyserver, ptemplate)
  end
  def get_policy_server(pppolicyserver : IX509EnrollmentPolicyServer*) : HRESULT
    @lpVtbl.value.get_policy_server.unsafe_as(Proc(IX509EnrollmentPolicyServer*, HRESULT)).call(pppolicyserver)
  end
  def get_template(pptemplate : IX509CertificateTemplate*) : HRESULT
    @lpVtbl.value.get_template.unsafe_as(Proc(IX509CertificateTemplate*, HRESULT)).call(pptemplate)
  end
  def get_attest_private_key(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_attest_private_key.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_attest_private_key(value : Int16) : HRESULT
    @lpVtbl.value.put_attest_private_key.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_attestation_encryption_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_attestation_encryption_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def put_attestation_encryption_certificate(encoding : EncodingType, value : UInt8*) : HRESULT
    @lpVtbl.value.put_attestation_encryption_certificate.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, value)
  end
  def get_encryption_algorithm(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_encryption_algorithm.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def put_encryption_algorithm(pvalue : IObjectId) : HRESULT
    @lpVtbl.value.put_encryption_algorithm.unsafe_as(Proc(IObjectId, HRESULT)).call(pvalue)
  end
  def get_encryption_strength(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_encryption_strength.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def put_encryption_strength(value : Int32) : HRESULT
    @lpVtbl.value.put_encryption_strength.unsafe_as(Proc(Int32, HRESULT)).call(value)
  end
  def get_challenge_password(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_challenge_password.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_challenge_password(value : UInt8*) : HRESULT
    @lpVtbl.value.put_challenge_password.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_name_value_pairs(ppvalue : IX509NameValuePairs*) : HRESULT
    @lpVtbl.value.get_name_value_pairs.unsafe_as(Proc(IX509NameValuePairs*, HRESULT)).call(ppvalue)
  end
end
struct LibWin32::IX509CertificateRequestPkcs10V4
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(context : X509CertificateEnrollmentContext) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(X509CertificateEnrollmentContext, HRESULT)).call(context)
  end
  def encode : HRESULT
    @lpVtbl.value.encode.unsafe_as(Proc(HRESULT)).call
  end
  def reset_for_encode : HRESULT
    @lpVtbl.value.reset_for_encode.unsafe_as(Proc(HRESULT)).call
  end
  def get_inner_request(level : InnerRequestLevel, ppvalue : IX509CertificateRequest*) : HRESULT
    @lpVtbl.value.get_inner_request.unsafe_as(Proc(InnerRequestLevel, IX509CertificateRequest*, HRESULT)).call(level, ppvalue)
  end
  def get_type(pvalue : X509RequestType*) : HRESULT
    @lpVtbl.value.get_type.unsafe_as(Proc(X509RequestType*, HRESULT)).call(pvalue)
  end
  def get_enrollment_context(pvalue : X509CertificateEnrollmentContext*) : HRESULT
    @lpVtbl.value.get_enrollment_context.unsafe_as(Proc(X509CertificateEnrollmentContext*, HRESULT)).call(pvalue)
  end
  def get_silent(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_silent.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_silent(value : Int16) : HRESULT
    @lpVtbl.value.put_silent.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_parent_window(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_parent_window.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def put_parent_window(value : Int32) : HRESULT
    @lpVtbl.value.put_parent_window.unsafe_as(Proc(Int32, HRESULT)).call(value)
  end
  def get_ui_context_message(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_ui_context_message.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_ui_context_message(value : UInt8*) : HRESULT
    @lpVtbl.value.put_ui_context_message.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_suppress_defaults(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_suppress_defaults.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_suppress_defaults(value : Int16) : HRESULT
    @lpVtbl.value.put_suppress_defaults.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_renewal_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_renewal_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def put_renewal_certificate(encoding : EncodingType, value : UInt8*) : HRESULT
    @lpVtbl.value.put_renewal_certificate.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, value)
  end
  def get_client_id(pvalue : RequestClientInfoClientId*) : HRESULT
    @lpVtbl.value.get_client_id.unsafe_as(Proc(RequestClientInfoClientId*, HRESULT)).call(pvalue)
  end
  def put_client_id(value : RequestClientInfoClientId) : HRESULT
    @lpVtbl.value.put_client_id.unsafe_as(Proc(RequestClientInfoClientId, HRESULT)).call(value)
  end
  def get_csp_informations(ppvalue : ICspInformations*) : HRESULT
    @lpVtbl.value.get_csp_informations.unsafe_as(Proc(ICspInformations*, HRESULT)).call(ppvalue)
  end
  def put_csp_informations(pvalue : ICspInformations) : HRESULT
    @lpVtbl.value.put_csp_informations.unsafe_as(Proc(ICspInformations, HRESULT)).call(pvalue)
  end
  def get_hash_algorithm(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_hash_algorithm.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def put_hash_algorithm(pvalue : IObjectId) : HRESULT
    @lpVtbl.value.put_hash_algorithm.unsafe_as(Proc(IObjectId, HRESULT)).call(pvalue)
  end
  def get_alternate_signature_algorithm(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_alternate_signature_algorithm.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_alternate_signature_algorithm(value : Int16) : HRESULT
    @lpVtbl.value.put_alternate_signature_algorithm.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def initialize_from_template_name(context : X509CertificateEnrollmentContext, strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_template_name.unsafe_as(Proc(X509CertificateEnrollmentContext, UInt8*, HRESULT)).call(context, strtemplatename)
  end
  def initialize_from_private_key(context : X509CertificateEnrollmentContext, pprivatekey : IX509PrivateKey, strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_private_key.unsafe_as(Proc(X509CertificateEnrollmentContext, IX509PrivateKey, UInt8*, HRESULT)).call(context, pprivatekey, strtemplatename)
  end
  def initialize_from_public_key(context : X509CertificateEnrollmentContext, ppublickey : IX509PublicKey, strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_public_key.unsafe_as(Proc(X509CertificateEnrollmentContext, IX509PublicKey, UInt8*, HRESULT)).call(context, ppublickey, strtemplatename)
  end
  def initialize_from_certificate(context : X509CertificateEnrollmentContext, strcertificate : UInt8*, encoding : EncodingType, inheritoptions : X509RequestInheritOptions) : HRESULT
    @lpVtbl.value.initialize_from_certificate.unsafe_as(Proc(X509CertificateEnrollmentContext, UInt8*, EncodingType, X509RequestInheritOptions, HRESULT)).call(context, strcertificate, encoding, inheritoptions)
  end
  def initialize_decode(strencodeddata : UInt8*, encoding : EncodingType) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(UInt8*, EncodingType, HRESULT)).call(strencodeddata, encoding)
  end
  def check_signature(allowedsignaturetypes : Pkcs10AllowedSignatureTypes) : HRESULT
    @lpVtbl.value.check_signature.unsafe_as(Proc(Pkcs10AllowedSignatureTypes, HRESULT)).call(allowedsignaturetypes)
  end
  def is_smart_card(pvalue : Int16*) : HRESULT
    @lpVtbl.value.is_smart_card.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_template_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_template_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_public_key(ppvalue : IX509PublicKey*) : HRESULT
    @lpVtbl.value.get_public_key.unsafe_as(Proc(IX509PublicKey*, HRESULT)).call(ppvalue)
  end
  def get_private_key(ppvalue : IX509PrivateKey*) : HRESULT
    @lpVtbl.value.get_private_key.unsafe_as(Proc(IX509PrivateKey*, HRESULT)).call(ppvalue)
  end
  def get_null_signed(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_null_signed.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_reuse_key(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_reuse_key.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_old_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_old_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_subject(ppvalue : IX500DistinguishedName*) : HRESULT
    @lpVtbl.value.get_subject.unsafe_as(Proc(IX500DistinguishedName*, HRESULT)).call(ppvalue)
  end
  def put_subject(pvalue : IX500DistinguishedName) : HRESULT
    @lpVtbl.value.put_subject.unsafe_as(Proc(IX500DistinguishedName, HRESULT)).call(pvalue)
  end
  def get_csp_statuses(ppvalue : ICspStatuses*) : HRESULT
    @lpVtbl.value.get_csp_statuses.unsafe_as(Proc(ICspStatuses*, HRESULT)).call(ppvalue)
  end
  def get_smime_capabilities(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_smime_capabilities.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_smime_capabilities(value : Int16) : HRESULT
    @lpVtbl.value.put_smime_capabilities.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_signature_information(ppvalue : IX509SignatureInformation*) : HRESULT
    @lpVtbl.value.get_signature_information.unsafe_as(Proc(IX509SignatureInformation*, HRESULT)).call(ppvalue)
  end
  def get_key_container_name_prefix(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_key_container_name_prefix.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_key_container_name_prefix(value : UInt8*) : HRESULT
    @lpVtbl.value.put_key_container_name_prefix.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_crypt_attributes(ppvalue : ICryptAttributes*) : HRESULT
    @lpVtbl.value.get_crypt_attributes.unsafe_as(Proc(ICryptAttributes*, HRESULT)).call(ppvalue)
  end
  def get_x509_extensions(ppvalue : IX509Extensions*) : HRESULT
    @lpVtbl.value.get_x509_extensions.unsafe_as(Proc(IX509Extensions*, HRESULT)).call(ppvalue)
  end
  def get_critical_extensions(ppvalue : IObjectIds*) : HRESULT
    @lpVtbl.value.get_critical_extensions.unsafe_as(Proc(IObjectIds*, HRESULT)).call(ppvalue)
  end
  def get_suppress_oids(ppvalue : IObjectIds*) : HRESULT
    @lpVtbl.value.get_suppress_oids.unsafe_as(Proc(IObjectIds*, HRESULT)).call(ppvalue)
  end
  def get_raw_data_to_be_signed(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data_to_be_signed.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_signature(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_signature.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_csp_statuses2(keyspec : X509KeySpec, ppcspstatuses : ICspStatuses*) : HRESULT
    @lpVtbl.value.get_csp_statuses2.unsafe_as(Proc(X509KeySpec, ICspStatuses*, HRESULT)).call(keyspec, ppcspstatuses)
  end
  def initialize_from_template(context : X509CertificateEnrollmentContext, ppolicyserver : IX509EnrollmentPolicyServer, ptemplate : IX509CertificateTemplate) : HRESULT
    @lpVtbl.value.initialize_from_template.unsafe_as(Proc(X509CertificateEnrollmentContext, IX509EnrollmentPolicyServer, IX509CertificateTemplate, HRESULT)).call(context, ppolicyserver, ptemplate)
  end
  def initialize_from_private_key_template(context : X509CertificateEnrollmentContext, pprivatekey : IX509PrivateKey, ppolicyserver : IX509EnrollmentPolicyServer, ptemplate : IX509CertificateTemplate) : HRESULT
    @lpVtbl.value.initialize_from_private_key_template.unsafe_as(Proc(X509CertificateEnrollmentContext, IX509PrivateKey, IX509EnrollmentPolicyServer, IX509CertificateTemplate, HRESULT)).call(context, pprivatekey, ppolicyserver, ptemplate)
  end
  def initialize_from_public_key_template(context : X509CertificateEnrollmentContext, ppublickey : IX509PublicKey, ppolicyserver : IX509EnrollmentPolicyServer, ptemplate : IX509CertificateTemplate) : HRESULT
    @lpVtbl.value.initialize_from_public_key_template.unsafe_as(Proc(X509CertificateEnrollmentContext, IX509PublicKey, IX509EnrollmentPolicyServer, IX509CertificateTemplate, HRESULT)).call(context, ppublickey, ppolicyserver, ptemplate)
  end
  def get_policy_server(pppolicyserver : IX509EnrollmentPolicyServer*) : HRESULT
    @lpVtbl.value.get_policy_server.unsafe_as(Proc(IX509EnrollmentPolicyServer*, HRESULT)).call(pppolicyserver)
  end
  def get_template(pptemplate : IX509CertificateTemplate*) : HRESULT
    @lpVtbl.value.get_template.unsafe_as(Proc(IX509CertificateTemplate*, HRESULT)).call(pptemplate)
  end
  def get_attest_private_key(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_attest_private_key.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_attest_private_key(value : Int16) : HRESULT
    @lpVtbl.value.put_attest_private_key.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_attestation_encryption_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_attestation_encryption_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def put_attestation_encryption_certificate(encoding : EncodingType, value : UInt8*) : HRESULT
    @lpVtbl.value.put_attestation_encryption_certificate.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, value)
  end
  def get_encryption_algorithm(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_encryption_algorithm.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def put_encryption_algorithm(pvalue : IObjectId) : HRESULT
    @lpVtbl.value.put_encryption_algorithm.unsafe_as(Proc(IObjectId, HRESULT)).call(pvalue)
  end
  def get_encryption_strength(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_encryption_strength.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def put_encryption_strength(value : Int32) : HRESULT
    @lpVtbl.value.put_encryption_strength.unsafe_as(Proc(Int32, HRESULT)).call(value)
  end
  def get_challenge_password(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_challenge_password.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_challenge_password(value : UInt8*) : HRESULT
    @lpVtbl.value.put_challenge_password.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_name_value_pairs(ppvalue : IX509NameValuePairs*) : HRESULT
    @lpVtbl.value.get_name_value_pairs.unsafe_as(Proc(IX509NameValuePairs*, HRESULT)).call(ppvalue)
  end
  def get_claim_type(pvalue : KeyAttestationClaimType*) : HRESULT
    @lpVtbl.value.get_claim_type.unsafe_as(Proc(KeyAttestationClaimType*, HRESULT)).call(pvalue)
  end
  def put_claim_type(value : KeyAttestationClaimType) : HRESULT
    @lpVtbl.value.put_claim_type.unsafe_as(Proc(KeyAttestationClaimType, HRESULT)).call(value)
  end
  def get_attest_private_key_preferred(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_attest_private_key_preferred.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_attest_private_key_preferred(value : Int16) : HRESULT
    @lpVtbl.value.put_attest_private_key_preferred.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
end
struct LibWin32::IX509CertificateRequestCertificate
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(context : X509CertificateEnrollmentContext) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(X509CertificateEnrollmentContext, HRESULT)).call(context)
  end
  def encode : HRESULT
    @lpVtbl.value.encode.unsafe_as(Proc(HRESULT)).call
  end
  def reset_for_encode : HRESULT
    @lpVtbl.value.reset_for_encode.unsafe_as(Proc(HRESULT)).call
  end
  def get_inner_request(level : InnerRequestLevel, ppvalue : IX509CertificateRequest*) : HRESULT
    @lpVtbl.value.get_inner_request.unsafe_as(Proc(InnerRequestLevel, IX509CertificateRequest*, HRESULT)).call(level, ppvalue)
  end
  def get_type(pvalue : X509RequestType*) : HRESULT
    @lpVtbl.value.get_type.unsafe_as(Proc(X509RequestType*, HRESULT)).call(pvalue)
  end
  def get_enrollment_context(pvalue : X509CertificateEnrollmentContext*) : HRESULT
    @lpVtbl.value.get_enrollment_context.unsafe_as(Proc(X509CertificateEnrollmentContext*, HRESULT)).call(pvalue)
  end
  def get_silent(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_silent.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_silent(value : Int16) : HRESULT
    @lpVtbl.value.put_silent.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_parent_window(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_parent_window.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def put_parent_window(value : Int32) : HRESULT
    @lpVtbl.value.put_parent_window.unsafe_as(Proc(Int32, HRESULT)).call(value)
  end
  def get_ui_context_message(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_ui_context_message.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_ui_context_message(value : UInt8*) : HRESULT
    @lpVtbl.value.put_ui_context_message.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_suppress_defaults(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_suppress_defaults.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_suppress_defaults(value : Int16) : HRESULT
    @lpVtbl.value.put_suppress_defaults.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_renewal_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_renewal_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def put_renewal_certificate(encoding : EncodingType, value : UInt8*) : HRESULT
    @lpVtbl.value.put_renewal_certificate.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, value)
  end
  def get_client_id(pvalue : RequestClientInfoClientId*) : HRESULT
    @lpVtbl.value.get_client_id.unsafe_as(Proc(RequestClientInfoClientId*, HRESULT)).call(pvalue)
  end
  def put_client_id(value : RequestClientInfoClientId) : HRESULT
    @lpVtbl.value.put_client_id.unsafe_as(Proc(RequestClientInfoClientId, HRESULT)).call(value)
  end
  def get_csp_informations(ppvalue : ICspInformations*) : HRESULT
    @lpVtbl.value.get_csp_informations.unsafe_as(Proc(ICspInformations*, HRESULT)).call(ppvalue)
  end
  def put_csp_informations(pvalue : ICspInformations) : HRESULT
    @lpVtbl.value.put_csp_informations.unsafe_as(Proc(ICspInformations, HRESULT)).call(pvalue)
  end
  def get_hash_algorithm(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_hash_algorithm.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def put_hash_algorithm(pvalue : IObjectId) : HRESULT
    @lpVtbl.value.put_hash_algorithm.unsafe_as(Proc(IObjectId, HRESULT)).call(pvalue)
  end
  def get_alternate_signature_algorithm(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_alternate_signature_algorithm.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_alternate_signature_algorithm(value : Int16) : HRESULT
    @lpVtbl.value.put_alternate_signature_algorithm.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def initialize_from_template_name(context : X509CertificateEnrollmentContext, strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_template_name.unsafe_as(Proc(X509CertificateEnrollmentContext, UInt8*, HRESULT)).call(context, strtemplatename)
  end
  def initialize_from_private_key(context : X509CertificateEnrollmentContext, pprivatekey : IX509PrivateKey, strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_private_key.unsafe_as(Proc(X509CertificateEnrollmentContext, IX509PrivateKey, UInt8*, HRESULT)).call(context, pprivatekey, strtemplatename)
  end
  def initialize_from_public_key(context : X509CertificateEnrollmentContext, ppublickey : IX509PublicKey, strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_public_key.unsafe_as(Proc(X509CertificateEnrollmentContext, IX509PublicKey, UInt8*, HRESULT)).call(context, ppublickey, strtemplatename)
  end
  def initialize_from_certificate(context : X509CertificateEnrollmentContext, strcertificate : UInt8*, encoding : EncodingType, inheritoptions : X509RequestInheritOptions) : HRESULT
    @lpVtbl.value.initialize_from_certificate.unsafe_as(Proc(X509CertificateEnrollmentContext, UInt8*, EncodingType, X509RequestInheritOptions, HRESULT)).call(context, strcertificate, encoding, inheritoptions)
  end
  def initialize_decode(strencodeddata : UInt8*, encoding : EncodingType) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(UInt8*, EncodingType, HRESULT)).call(strencodeddata, encoding)
  end
  def check_signature(allowedsignaturetypes : Pkcs10AllowedSignatureTypes) : HRESULT
    @lpVtbl.value.check_signature.unsafe_as(Proc(Pkcs10AllowedSignatureTypes, HRESULT)).call(allowedsignaturetypes)
  end
  def is_smart_card(pvalue : Int16*) : HRESULT
    @lpVtbl.value.is_smart_card.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_template_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_template_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_public_key(ppvalue : IX509PublicKey*) : HRESULT
    @lpVtbl.value.get_public_key.unsafe_as(Proc(IX509PublicKey*, HRESULT)).call(ppvalue)
  end
  def get_private_key(ppvalue : IX509PrivateKey*) : HRESULT
    @lpVtbl.value.get_private_key.unsafe_as(Proc(IX509PrivateKey*, HRESULT)).call(ppvalue)
  end
  def get_null_signed(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_null_signed.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_reuse_key(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_reuse_key.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_old_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_old_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_subject(ppvalue : IX500DistinguishedName*) : HRESULT
    @lpVtbl.value.get_subject.unsafe_as(Proc(IX500DistinguishedName*, HRESULT)).call(ppvalue)
  end
  def put_subject(pvalue : IX500DistinguishedName) : HRESULT
    @lpVtbl.value.put_subject.unsafe_as(Proc(IX500DistinguishedName, HRESULT)).call(pvalue)
  end
  def get_csp_statuses(ppvalue : ICspStatuses*) : HRESULT
    @lpVtbl.value.get_csp_statuses.unsafe_as(Proc(ICspStatuses*, HRESULT)).call(ppvalue)
  end
  def get_smime_capabilities(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_smime_capabilities.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_smime_capabilities(value : Int16) : HRESULT
    @lpVtbl.value.put_smime_capabilities.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_signature_information(ppvalue : IX509SignatureInformation*) : HRESULT
    @lpVtbl.value.get_signature_information.unsafe_as(Proc(IX509SignatureInformation*, HRESULT)).call(ppvalue)
  end
  def get_key_container_name_prefix(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_key_container_name_prefix.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_key_container_name_prefix(value : UInt8*) : HRESULT
    @lpVtbl.value.put_key_container_name_prefix.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_crypt_attributes(ppvalue : ICryptAttributes*) : HRESULT
    @lpVtbl.value.get_crypt_attributes.unsafe_as(Proc(ICryptAttributes*, HRESULT)).call(ppvalue)
  end
  def get_x509_extensions(ppvalue : IX509Extensions*) : HRESULT
    @lpVtbl.value.get_x509_extensions.unsafe_as(Proc(IX509Extensions*, HRESULT)).call(ppvalue)
  end
  def get_critical_extensions(ppvalue : IObjectIds*) : HRESULT
    @lpVtbl.value.get_critical_extensions.unsafe_as(Proc(IObjectIds*, HRESULT)).call(ppvalue)
  end
  def get_suppress_oids(ppvalue : IObjectIds*) : HRESULT
    @lpVtbl.value.get_suppress_oids.unsafe_as(Proc(IObjectIds*, HRESULT)).call(ppvalue)
  end
  def get_raw_data_to_be_signed(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data_to_be_signed.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_signature(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_signature.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_csp_statuses2(keyspec : X509KeySpec, ppcspstatuses : ICspStatuses*) : HRESULT
    @lpVtbl.value.get_csp_statuses2.unsafe_as(Proc(X509KeySpec, ICspStatuses*, HRESULT)).call(keyspec, ppcspstatuses)
  end
  def check_public_key_signature(ppublickey : IX509PublicKey) : HRESULT
    @lpVtbl.value.check_public_key_signature.unsafe_as(Proc(IX509PublicKey, HRESULT)).call(ppublickey)
  end
  def get_issuer(ppvalue : IX500DistinguishedName*) : HRESULT
    @lpVtbl.value.get_issuer.unsafe_as(Proc(IX500DistinguishedName*, HRESULT)).call(ppvalue)
  end
  def put_issuer(pvalue : IX500DistinguishedName) : HRESULT
    @lpVtbl.value.put_issuer.unsafe_as(Proc(IX500DistinguishedName, HRESULT)).call(pvalue)
  end
  def get_not_before(pvalue : Float64*) : HRESULT
    @lpVtbl.value.get_not_before.unsafe_as(Proc(Float64*, HRESULT)).call(pvalue)
  end
  def put_not_before(value : Float64) : HRESULT
    @lpVtbl.value.put_not_before.unsafe_as(Proc(Float64, HRESULT)).call(value)
  end
  def get_not_after(pvalue : Float64*) : HRESULT
    @lpVtbl.value.get_not_after.unsafe_as(Proc(Float64*, HRESULT)).call(pvalue)
  end
  def put_not_after(value : Float64) : HRESULT
    @lpVtbl.value.put_not_after.unsafe_as(Proc(Float64, HRESULT)).call(value)
  end
  def get_serial_number(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_serial_number.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def put_serial_number(encoding : EncodingType, value : UInt8*) : HRESULT
    @lpVtbl.value.put_serial_number.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, value)
  end
  def get_signer_certificate(ppvalue : ISignerCertificate*) : HRESULT
    @lpVtbl.value.get_signer_certificate.unsafe_as(Proc(ISignerCertificate*, HRESULT)).call(ppvalue)
  end
  def put_signer_certificate(pvalue : ISignerCertificate) : HRESULT
    @lpVtbl.value.put_signer_certificate.unsafe_as(Proc(ISignerCertificate, HRESULT)).call(pvalue)
  end
end
struct LibWin32::IX509CertificateRequestCertificate2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(context : X509CertificateEnrollmentContext) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(X509CertificateEnrollmentContext, HRESULT)).call(context)
  end
  def encode : HRESULT
    @lpVtbl.value.encode.unsafe_as(Proc(HRESULT)).call
  end
  def reset_for_encode : HRESULT
    @lpVtbl.value.reset_for_encode.unsafe_as(Proc(HRESULT)).call
  end
  def get_inner_request(level : InnerRequestLevel, ppvalue : IX509CertificateRequest*) : HRESULT
    @lpVtbl.value.get_inner_request.unsafe_as(Proc(InnerRequestLevel, IX509CertificateRequest*, HRESULT)).call(level, ppvalue)
  end
  def get_type(pvalue : X509RequestType*) : HRESULT
    @lpVtbl.value.get_type.unsafe_as(Proc(X509RequestType*, HRESULT)).call(pvalue)
  end
  def get_enrollment_context(pvalue : X509CertificateEnrollmentContext*) : HRESULT
    @lpVtbl.value.get_enrollment_context.unsafe_as(Proc(X509CertificateEnrollmentContext*, HRESULT)).call(pvalue)
  end
  def get_silent(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_silent.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_silent(value : Int16) : HRESULT
    @lpVtbl.value.put_silent.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_parent_window(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_parent_window.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def put_parent_window(value : Int32) : HRESULT
    @lpVtbl.value.put_parent_window.unsafe_as(Proc(Int32, HRESULT)).call(value)
  end
  def get_ui_context_message(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_ui_context_message.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_ui_context_message(value : UInt8*) : HRESULT
    @lpVtbl.value.put_ui_context_message.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_suppress_defaults(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_suppress_defaults.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_suppress_defaults(value : Int16) : HRESULT
    @lpVtbl.value.put_suppress_defaults.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_renewal_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_renewal_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def put_renewal_certificate(encoding : EncodingType, value : UInt8*) : HRESULT
    @lpVtbl.value.put_renewal_certificate.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, value)
  end
  def get_client_id(pvalue : RequestClientInfoClientId*) : HRESULT
    @lpVtbl.value.get_client_id.unsafe_as(Proc(RequestClientInfoClientId*, HRESULT)).call(pvalue)
  end
  def put_client_id(value : RequestClientInfoClientId) : HRESULT
    @lpVtbl.value.put_client_id.unsafe_as(Proc(RequestClientInfoClientId, HRESULT)).call(value)
  end
  def get_csp_informations(ppvalue : ICspInformations*) : HRESULT
    @lpVtbl.value.get_csp_informations.unsafe_as(Proc(ICspInformations*, HRESULT)).call(ppvalue)
  end
  def put_csp_informations(pvalue : ICspInformations) : HRESULT
    @lpVtbl.value.put_csp_informations.unsafe_as(Proc(ICspInformations, HRESULT)).call(pvalue)
  end
  def get_hash_algorithm(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_hash_algorithm.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def put_hash_algorithm(pvalue : IObjectId) : HRESULT
    @lpVtbl.value.put_hash_algorithm.unsafe_as(Proc(IObjectId, HRESULT)).call(pvalue)
  end
  def get_alternate_signature_algorithm(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_alternate_signature_algorithm.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_alternate_signature_algorithm(value : Int16) : HRESULT
    @lpVtbl.value.put_alternate_signature_algorithm.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def initialize_from_template_name(context : X509CertificateEnrollmentContext, strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_template_name.unsafe_as(Proc(X509CertificateEnrollmentContext, UInt8*, HRESULT)).call(context, strtemplatename)
  end
  def initialize_from_private_key(context : X509CertificateEnrollmentContext, pprivatekey : IX509PrivateKey, strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_private_key.unsafe_as(Proc(X509CertificateEnrollmentContext, IX509PrivateKey, UInt8*, HRESULT)).call(context, pprivatekey, strtemplatename)
  end
  def initialize_from_public_key(context : X509CertificateEnrollmentContext, ppublickey : IX509PublicKey, strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_public_key.unsafe_as(Proc(X509CertificateEnrollmentContext, IX509PublicKey, UInt8*, HRESULT)).call(context, ppublickey, strtemplatename)
  end
  def initialize_from_certificate(context : X509CertificateEnrollmentContext, strcertificate : UInt8*, encoding : EncodingType, inheritoptions : X509RequestInheritOptions) : HRESULT
    @lpVtbl.value.initialize_from_certificate.unsafe_as(Proc(X509CertificateEnrollmentContext, UInt8*, EncodingType, X509RequestInheritOptions, HRESULT)).call(context, strcertificate, encoding, inheritoptions)
  end
  def initialize_decode(strencodeddata : UInt8*, encoding : EncodingType) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(UInt8*, EncodingType, HRESULT)).call(strencodeddata, encoding)
  end
  def check_signature(allowedsignaturetypes : Pkcs10AllowedSignatureTypes) : HRESULT
    @lpVtbl.value.check_signature.unsafe_as(Proc(Pkcs10AllowedSignatureTypes, HRESULT)).call(allowedsignaturetypes)
  end
  def is_smart_card(pvalue : Int16*) : HRESULT
    @lpVtbl.value.is_smart_card.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_template_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_template_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_public_key(ppvalue : IX509PublicKey*) : HRESULT
    @lpVtbl.value.get_public_key.unsafe_as(Proc(IX509PublicKey*, HRESULT)).call(ppvalue)
  end
  def get_private_key(ppvalue : IX509PrivateKey*) : HRESULT
    @lpVtbl.value.get_private_key.unsafe_as(Proc(IX509PrivateKey*, HRESULT)).call(ppvalue)
  end
  def get_null_signed(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_null_signed.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_reuse_key(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_reuse_key.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_old_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_old_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_subject(ppvalue : IX500DistinguishedName*) : HRESULT
    @lpVtbl.value.get_subject.unsafe_as(Proc(IX500DistinguishedName*, HRESULT)).call(ppvalue)
  end
  def put_subject(pvalue : IX500DistinguishedName) : HRESULT
    @lpVtbl.value.put_subject.unsafe_as(Proc(IX500DistinguishedName, HRESULT)).call(pvalue)
  end
  def get_csp_statuses(ppvalue : ICspStatuses*) : HRESULT
    @lpVtbl.value.get_csp_statuses.unsafe_as(Proc(ICspStatuses*, HRESULT)).call(ppvalue)
  end
  def get_smime_capabilities(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_smime_capabilities.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_smime_capabilities(value : Int16) : HRESULT
    @lpVtbl.value.put_smime_capabilities.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_signature_information(ppvalue : IX509SignatureInformation*) : HRESULT
    @lpVtbl.value.get_signature_information.unsafe_as(Proc(IX509SignatureInformation*, HRESULT)).call(ppvalue)
  end
  def get_key_container_name_prefix(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_key_container_name_prefix.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_key_container_name_prefix(value : UInt8*) : HRESULT
    @lpVtbl.value.put_key_container_name_prefix.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_crypt_attributes(ppvalue : ICryptAttributes*) : HRESULT
    @lpVtbl.value.get_crypt_attributes.unsafe_as(Proc(ICryptAttributes*, HRESULT)).call(ppvalue)
  end
  def get_x509_extensions(ppvalue : IX509Extensions*) : HRESULT
    @lpVtbl.value.get_x509_extensions.unsafe_as(Proc(IX509Extensions*, HRESULT)).call(ppvalue)
  end
  def get_critical_extensions(ppvalue : IObjectIds*) : HRESULT
    @lpVtbl.value.get_critical_extensions.unsafe_as(Proc(IObjectIds*, HRESULT)).call(ppvalue)
  end
  def get_suppress_oids(ppvalue : IObjectIds*) : HRESULT
    @lpVtbl.value.get_suppress_oids.unsafe_as(Proc(IObjectIds*, HRESULT)).call(ppvalue)
  end
  def get_raw_data_to_be_signed(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data_to_be_signed.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_signature(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_signature.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_csp_statuses2(keyspec : X509KeySpec, ppcspstatuses : ICspStatuses*) : HRESULT
    @lpVtbl.value.get_csp_statuses2.unsafe_as(Proc(X509KeySpec, ICspStatuses*, HRESULT)).call(keyspec, ppcspstatuses)
  end
  def check_public_key_signature(ppublickey : IX509PublicKey) : HRESULT
    @lpVtbl.value.check_public_key_signature.unsafe_as(Proc(IX509PublicKey, HRESULT)).call(ppublickey)
  end
  def get_issuer(ppvalue : IX500DistinguishedName*) : HRESULT
    @lpVtbl.value.get_issuer.unsafe_as(Proc(IX500DistinguishedName*, HRESULT)).call(ppvalue)
  end
  def put_issuer(pvalue : IX500DistinguishedName) : HRESULT
    @lpVtbl.value.put_issuer.unsafe_as(Proc(IX500DistinguishedName, HRESULT)).call(pvalue)
  end
  def get_not_before(pvalue : Float64*) : HRESULT
    @lpVtbl.value.get_not_before.unsafe_as(Proc(Float64*, HRESULT)).call(pvalue)
  end
  def put_not_before(value : Float64) : HRESULT
    @lpVtbl.value.put_not_before.unsafe_as(Proc(Float64, HRESULT)).call(value)
  end
  def get_not_after(pvalue : Float64*) : HRESULT
    @lpVtbl.value.get_not_after.unsafe_as(Proc(Float64*, HRESULT)).call(pvalue)
  end
  def put_not_after(value : Float64) : HRESULT
    @lpVtbl.value.put_not_after.unsafe_as(Proc(Float64, HRESULT)).call(value)
  end
  def get_serial_number(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_serial_number.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def put_serial_number(encoding : EncodingType, value : UInt8*) : HRESULT
    @lpVtbl.value.put_serial_number.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, value)
  end
  def get_signer_certificate(ppvalue : ISignerCertificate*) : HRESULT
    @lpVtbl.value.get_signer_certificate.unsafe_as(Proc(ISignerCertificate*, HRESULT)).call(ppvalue)
  end
  def put_signer_certificate(pvalue : ISignerCertificate) : HRESULT
    @lpVtbl.value.put_signer_certificate.unsafe_as(Proc(ISignerCertificate, HRESULT)).call(pvalue)
  end
  def initialize_from_template(context : X509CertificateEnrollmentContext, ppolicyserver : IX509EnrollmentPolicyServer, ptemplate : IX509CertificateTemplate) : HRESULT
    @lpVtbl.value.initialize_from_template.unsafe_as(Proc(X509CertificateEnrollmentContext, IX509EnrollmentPolicyServer, IX509CertificateTemplate, HRESULT)).call(context, ppolicyserver, ptemplate)
  end
  def initialize_from_private_key_template(context : X509CertificateEnrollmentContext, pprivatekey : IX509PrivateKey, ppolicyserver : IX509EnrollmentPolicyServer, ptemplate : IX509CertificateTemplate) : HRESULT
    @lpVtbl.value.initialize_from_private_key_template.unsafe_as(Proc(X509CertificateEnrollmentContext, IX509PrivateKey, IX509EnrollmentPolicyServer, IX509CertificateTemplate, HRESULT)).call(context, pprivatekey, ppolicyserver, ptemplate)
  end
  def get_policy_server(pppolicyserver : IX509EnrollmentPolicyServer*) : HRESULT
    @lpVtbl.value.get_policy_server.unsafe_as(Proc(IX509EnrollmentPolicyServer*, HRESULT)).call(pppolicyserver)
  end
  def get_template(pptemplate : IX509CertificateTemplate*) : HRESULT
    @lpVtbl.value.get_template.unsafe_as(Proc(IX509CertificateTemplate*, HRESULT)).call(pptemplate)
  end
end
struct LibWin32::IX509CertificateRequestPkcs7
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(context : X509CertificateEnrollmentContext) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(X509CertificateEnrollmentContext, HRESULT)).call(context)
  end
  def encode : HRESULT
    @lpVtbl.value.encode.unsafe_as(Proc(HRESULT)).call
  end
  def reset_for_encode : HRESULT
    @lpVtbl.value.reset_for_encode.unsafe_as(Proc(HRESULT)).call
  end
  def get_inner_request(level : InnerRequestLevel, ppvalue : IX509CertificateRequest*) : HRESULT
    @lpVtbl.value.get_inner_request.unsafe_as(Proc(InnerRequestLevel, IX509CertificateRequest*, HRESULT)).call(level, ppvalue)
  end
  def get_type(pvalue : X509RequestType*) : HRESULT
    @lpVtbl.value.get_type.unsafe_as(Proc(X509RequestType*, HRESULT)).call(pvalue)
  end
  def get_enrollment_context(pvalue : X509CertificateEnrollmentContext*) : HRESULT
    @lpVtbl.value.get_enrollment_context.unsafe_as(Proc(X509CertificateEnrollmentContext*, HRESULT)).call(pvalue)
  end
  def get_silent(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_silent.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_silent(value : Int16) : HRESULT
    @lpVtbl.value.put_silent.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_parent_window(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_parent_window.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def put_parent_window(value : Int32) : HRESULT
    @lpVtbl.value.put_parent_window.unsafe_as(Proc(Int32, HRESULT)).call(value)
  end
  def get_ui_context_message(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_ui_context_message.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_ui_context_message(value : UInt8*) : HRESULT
    @lpVtbl.value.put_ui_context_message.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_suppress_defaults(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_suppress_defaults.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_suppress_defaults(value : Int16) : HRESULT
    @lpVtbl.value.put_suppress_defaults.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_renewal_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_renewal_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def put_renewal_certificate(encoding : EncodingType, value : UInt8*) : HRESULT
    @lpVtbl.value.put_renewal_certificate.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, value)
  end
  def get_client_id(pvalue : RequestClientInfoClientId*) : HRESULT
    @lpVtbl.value.get_client_id.unsafe_as(Proc(RequestClientInfoClientId*, HRESULT)).call(pvalue)
  end
  def put_client_id(value : RequestClientInfoClientId) : HRESULT
    @lpVtbl.value.put_client_id.unsafe_as(Proc(RequestClientInfoClientId, HRESULT)).call(value)
  end
  def get_csp_informations(ppvalue : ICspInformations*) : HRESULT
    @lpVtbl.value.get_csp_informations.unsafe_as(Proc(ICspInformations*, HRESULT)).call(ppvalue)
  end
  def put_csp_informations(pvalue : ICspInformations) : HRESULT
    @lpVtbl.value.put_csp_informations.unsafe_as(Proc(ICspInformations, HRESULT)).call(pvalue)
  end
  def get_hash_algorithm(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_hash_algorithm.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def put_hash_algorithm(pvalue : IObjectId) : HRESULT
    @lpVtbl.value.put_hash_algorithm.unsafe_as(Proc(IObjectId, HRESULT)).call(pvalue)
  end
  def get_alternate_signature_algorithm(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_alternate_signature_algorithm.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_alternate_signature_algorithm(value : Int16) : HRESULT
    @lpVtbl.value.put_alternate_signature_algorithm.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def initialize_from_template_name(context : X509CertificateEnrollmentContext, strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_template_name.unsafe_as(Proc(X509CertificateEnrollmentContext, UInt8*, HRESULT)).call(context, strtemplatename)
  end
  def initialize_from_certificate(context : X509CertificateEnrollmentContext, renewalrequest : Int16, strcertificate : UInt8*, encoding : EncodingType, inheritoptions : X509RequestInheritOptions) : HRESULT
    @lpVtbl.value.initialize_from_certificate.unsafe_as(Proc(X509CertificateEnrollmentContext, Int16, UInt8*, EncodingType, X509RequestInheritOptions, HRESULT)).call(context, renewalrequest, strcertificate, encoding, inheritoptions)
  end
  def initialize_from_inner_request(pinnerrequest : IX509CertificateRequest) : HRESULT
    @lpVtbl.value.initialize_from_inner_request.unsafe_as(Proc(IX509CertificateRequest, HRESULT)).call(pinnerrequest)
  end
  def initialize_decode(strencodeddata : UInt8*, encoding : EncodingType) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(UInt8*, EncodingType, HRESULT)).call(strencodeddata, encoding)
  end
  def get_requester_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_requester_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_requester_name(value : UInt8*) : HRESULT
    @lpVtbl.value.put_requester_name.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_signer_certificate(ppvalue : ISignerCertificate*) : HRESULT
    @lpVtbl.value.get_signer_certificate.unsafe_as(Proc(ISignerCertificate*, HRESULT)).call(ppvalue)
  end
  def put_signer_certificate(pvalue : ISignerCertificate) : HRESULT
    @lpVtbl.value.put_signer_certificate.unsafe_as(Proc(ISignerCertificate, HRESULT)).call(pvalue)
  end
end
struct LibWin32::IX509CertificateRequestPkcs7V2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(context : X509CertificateEnrollmentContext) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(X509CertificateEnrollmentContext, HRESULT)).call(context)
  end
  def encode : HRESULT
    @lpVtbl.value.encode.unsafe_as(Proc(HRESULT)).call
  end
  def reset_for_encode : HRESULT
    @lpVtbl.value.reset_for_encode.unsafe_as(Proc(HRESULT)).call
  end
  def get_inner_request(level : InnerRequestLevel, ppvalue : IX509CertificateRequest*) : HRESULT
    @lpVtbl.value.get_inner_request.unsafe_as(Proc(InnerRequestLevel, IX509CertificateRequest*, HRESULT)).call(level, ppvalue)
  end
  def get_type(pvalue : X509RequestType*) : HRESULT
    @lpVtbl.value.get_type.unsafe_as(Proc(X509RequestType*, HRESULT)).call(pvalue)
  end
  def get_enrollment_context(pvalue : X509CertificateEnrollmentContext*) : HRESULT
    @lpVtbl.value.get_enrollment_context.unsafe_as(Proc(X509CertificateEnrollmentContext*, HRESULT)).call(pvalue)
  end
  def get_silent(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_silent.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_silent(value : Int16) : HRESULT
    @lpVtbl.value.put_silent.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_parent_window(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_parent_window.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def put_parent_window(value : Int32) : HRESULT
    @lpVtbl.value.put_parent_window.unsafe_as(Proc(Int32, HRESULT)).call(value)
  end
  def get_ui_context_message(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_ui_context_message.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_ui_context_message(value : UInt8*) : HRESULT
    @lpVtbl.value.put_ui_context_message.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_suppress_defaults(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_suppress_defaults.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_suppress_defaults(value : Int16) : HRESULT
    @lpVtbl.value.put_suppress_defaults.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_renewal_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_renewal_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def put_renewal_certificate(encoding : EncodingType, value : UInt8*) : HRESULT
    @lpVtbl.value.put_renewal_certificate.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, value)
  end
  def get_client_id(pvalue : RequestClientInfoClientId*) : HRESULT
    @lpVtbl.value.get_client_id.unsafe_as(Proc(RequestClientInfoClientId*, HRESULT)).call(pvalue)
  end
  def put_client_id(value : RequestClientInfoClientId) : HRESULT
    @lpVtbl.value.put_client_id.unsafe_as(Proc(RequestClientInfoClientId, HRESULT)).call(value)
  end
  def get_csp_informations(ppvalue : ICspInformations*) : HRESULT
    @lpVtbl.value.get_csp_informations.unsafe_as(Proc(ICspInformations*, HRESULT)).call(ppvalue)
  end
  def put_csp_informations(pvalue : ICspInformations) : HRESULT
    @lpVtbl.value.put_csp_informations.unsafe_as(Proc(ICspInformations, HRESULT)).call(pvalue)
  end
  def get_hash_algorithm(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_hash_algorithm.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def put_hash_algorithm(pvalue : IObjectId) : HRESULT
    @lpVtbl.value.put_hash_algorithm.unsafe_as(Proc(IObjectId, HRESULT)).call(pvalue)
  end
  def get_alternate_signature_algorithm(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_alternate_signature_algorithm.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_alternate_signature_algorithm(value : Int16) : HRESULT
    @lpVtbl.value.put_alternate_signature_algorithm.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def initialize_from_template_name(context : X509CertificateEnrollmentContext, strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_template_name.unsafe_as(Proc(X509CertificateEnrollmentContext, UInt8*, HRESULT)).call(context, strtemplatename)
  end
  def initialize_from_certificate(context : X509CertificateEnrollmentContext, renewalrequest : Int16, strcertificate : UInt8*, encoding : EncodingType, inheritoptions : X509RequestInheritOptions) : HRESULT
    @lpVtbl.value.initialize_from_certificate.unsafe_as(Proc(X509CertificateEnrollmentContext, Int16, UInt8*, EncodingType, X509RequestInheritOptions, HRESULT)).call(context, renewalrequest, strcertificate, encoding, inheritoptions)
  end
  def initialize_from_inner_request(pinnerrequest : IX509CertificateRequest) : HRESULT
    @lpVtbl.value.initialize_from_inner_request.unsafe_as(Proc(IX509CertificateRequest, HRESULT)).call(pinnerrequest)
  end
  def initialize_decode(strencodeddata : UInt8*, encoding : EncodingType) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(UInt8*, EncodingType, HRESULT)).call(strencodeddata, encoding)
  end
  def get_requester_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_requester_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_requester_name(value : UInt8*) : HRESULT
    @lpVtbl.value.put_requester_name.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_signer_certificate(ppvalue : ISignerCertificate*) : HRESULT
    @lpVtbl.value.get_signer_certificate.unsafe_as(Proc(ISignerCertificate*, HRESULT)).call(ppvalue)
  end
  def put_signer_certificate(pvalue : ISignerCertificate) : HRESULT
    @lpVtbl.value.put_signer_certificate.unsafe_as(Proc(ISignerCertificate, HRESULT)).call(pvalue)
  end
  def initialize_from_template(context : X509CertificateEnrollmentContext, ppolicyserver : IX509EnrollmentPolicyServer, ptemplate : IX509CertificateTemplate) : HRESULT
    @lpVtbl.value.initialize_from_template.unsafe_as(Proc(X509CertificateEnrollmentContext, IX509EnrollmentPolicyServer, IX509CertificateTemplate, HRESULT)).call(context, ppolicyserver, ptemplate)
  end
  def get_policy_server(pppolicyserver : IX509EnrollmentPolicyServer*) : HRESULT
    @lpVtbl.value.get_policy_server.unsafe_as(Proc(IX509EnrollmentPolicyServer*, HRESULT)).call(pppolicyserver)
  end
  def get_template(pptemplate : IX509CertificateTemplate*) : HRESULT
    @lpVtbl.value.get_template.unsafe_as(Proc(IX509CertificateTemplate*, HRESULT)).call(pptemplate)
  end
  def check_certificate_signature(validatecertificatechain : Int16) : HRESULT
    @lpVtbl.value.check_certificate_signature.unsafe_as(Proc(Int16, HRESULT)).call(validatecertificatechain)
  end
end
struct LibWin32::IX509CertificateRequestCmc
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(context : X509CertificateEnrollmentContext) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(X509CertificateEnrollmentContext, HRESULT)).call(context)
  end
  def encode : HRESULT
    @lpVtbl.value.encode.unsafe_as(Proc(HRESULT)).call
  end
  def reset_for_encode : HRESULT
    @lpVtbl.value.reset_for_encode.unsafe_as(Proc(HRESULT)).call
  end
  def get_inner_request(level : InnerRequestLevel, ppvalue : IX509CertificateRequest*) : HRESULT
    @lpVtbl.value.get_inner_request.unsafe_as(Proc(InnerRequestLevel, IX509CertificateRequest*, HRESULT)).call(level, ppvalue)
  end
  def get_type(pvalue : X509RequestType*) : HRESULT
    @lpVtbl.value.get_type.unsafe_as(Proc(X509RequestType*, HRESULT)).call(pvalue)
  end
  def get_enrollment_context(pvalue : X509CertificateEnrollmentContext*) : HRESULT
    @lpVtbl.value.get_enrollment_context.unsafe_as(Proc(X509CertificateEnrollmentContext*, HRESULT)).call(pvalue)
  end
  def get_silent(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_silent.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_silent(value : Int16) : HRESULT
    @lpVtbl.value.put_silent.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_parent_window(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_parent_window.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def put_parent_window(value : Int32) : HRESULT
    @lpVtbl.value.put_parent_window.unsafe_as(Proc(Int32, HRESULT)).call(value)
  end
  def get_ui_context_message(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_ui_context_message.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_ui_context_message(value : UInt8*) : HRESULT
    @lpVtbl.value.put_ui_context_message.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_suppress_defaults(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_suppress_defaults.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_suppress_defaults(value : Int16) : HRESULT
    @lpVtbl.value.put_suppress_defaults.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_renewal_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_renewal_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def put_renewal_certificate(encoding : EncodingType, value : UInt8*) : HRESULT
    @lpVtbl.value.put_renewal_certificate.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, value)
  end
  def get_client_id(pvalue : RequestClientInfoClientId*) : HRESULT
    @lpVtbl.value.get_client_id.unsafe_as(Proc(RequestClientInfoClientId*, HRESULT)).call(pvalue)
  end
  def put_client_id(value : RequestClientInfoClientId) : HRESULT
    @lpVtbl.value.put_client_id.unsafe_as(Proc(RequestClientInfoClientId, HRESULT)).call(value)
  end
  def get_csp_informations(ppvalue : ICspInformations*) : HRESULT
    @lpVtbl.value.get_csp_informations.unsafe_as(Proc(ICspInformations*, HRESULT)).call(ppvalue)
  end
  def put_csp_informations(pvalue : ICspInformations) : HRESULT
    @lpVtbl.value.put_csp_informations.unsafe_as(Proc(ICspInformations, HRESULT)).call(pvalue)
  end
  def get_hash_algorithm(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_hash_algorithm.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def put_hash_algorithm(pvalue : IObjectId) : HRESULT
    @lpVtbl.value.put_hash_algorithm.unsafe_as(Proc(IObjectId, HRESULT)).call(pvalue)
  end
  def get_alternate_signature_algorithm(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_alternate_signature_algorithm.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_alternate_signature_algorithm(value : Int16) : HRESULT
    @lpVtbl.value.put_alternate_signature_algorithm.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def initialize_from_template_name(context : X509CertificateEnrollmentContext, strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_template_name.unsafe_as(Proc(X509CertificateEnrollmentContext, UInt8*, HRESULT)).call(context, strtemplatename)
  end
  def initialize_from_certificate(context : X509CertificateEnrollmentContext, renewalrequest : Int16, strcertificate : UInt8*, encoding : EncodingType, inheritoptions : X509RequestInheritOptions) : HRESULT
    @lpVtbl.value.initialize_from_certificate.unsafe_as(Proc(X509CertificateEnrollmentContext, Int16, UInt8*, EncodingType, X509RequestInheritOptions, HRESULT)).call(context, renewalrequest, strcertificate, encoding, inheritoptions)
  end
  def initialize_from_inner_request(pinnerrequest : IX509CertificateRequest) : HRESULT
    @lpVtbl.value.initialize_from_inner_request.unsafe_as(Proc(IX509CertificateRequest, HRESULT)).call(pinnerrequest)
  end
  def initialize_decode(strencodeddata : UInt8*, encoding : EncodingType) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(UInt8*, EncodingType, HRESULT)).call(strencodeddata, encoding)
  end
  def get_requester_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_requester_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_requester_name(value : UInt8*) : HRESULT
    @lpVtbl.value.put_requester_name.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_signer_certificate(ppvalue : ISignerCertificate*) : HRESULT
    @lpVtbl.value.get_signer_certificate.unsafe_as(Proc(ISignerCertificate*, HRESULT)).call(ppvalue)
  end
  def put_signer_certificate(pvalue : ISignerCertificate) : HRESULT
    @lpVtbl.value.put_signer_certificate.unsafe_as(Proc(ISignerCertificate, HRESULT)).call(pvalue)
  end
  def initialize_from_inner_request_template_name(pinnerrequest : IX509CertificateRequest, strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_inner_request_template_name.unsafe_as(Proc(IX509CertificateRequest, UInt8*, HRESULT)).call(pinnerrequest, strtemplatename)
  end
  def get_template_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_template_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_null_signed(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_null_signed.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_crypt_attributes(ppvalue : ICryptAttributes*) : HRESULT
    @lpVtbl.value.get_crypt_attributes.unsafe_as(Proc(ICryptAttributes*, HRESULT)).call(ppvalue)
  end
  def get_name_value_pairs(ppvalue : IX509NameValuePairs*) : HRESULT
    @lpVtbl.value.get_name_value_pairs.unsafe_as(Proc(IX509NameValuePairs*, HRESULT)).call(ppvalue)
  end
  def get_x509_extensions(ppvalue : IX509Extensions*) : HRESULT
    @lpVtbl.value.get_x509_extensions.unsafe_as(Proc(IX509Extensions*, HRESULT)).call(ppvalue)
  end
  def get_critical_extensions(ppvalue : IObjectIds*) : HRESULT
    @lpVtbl.value.get_critical_extensions.unsafe_as(Proc(IObjectIds*, HRESULT)).call(ppvalue)
  end
  def get_suppress_oids(ppvalue : IObjectIds*) : HRESULT
    @lpVtbl.value.get_suppress_oids.unsafe_as(Proc(IObjectIds*, HRESULT)).call(ppvalue)
  end
  def get_transaction_id(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_transaction_id.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def put_transaction_id(value : Int32) : HRESULT
    @lpVtbl.value.put_transaction_id.unsafe_as(Proc(Int32, HRESULT)).call(value)
  end
  def get_sender_nonce(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_sender_nonce.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def put_sender_nonce(encoding : EncodingType, value : UInt8*) : HRESULT
    @lpVtbl.value.put_sender_nonce.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, value)
  end
  def get_signature_information(ppvalue : IX509SignatureInformation*) : HRESULT
    @lpVtbl.value.get_signature_information.unsafe_as(Proc(IX509SignatureInformation*, HRESULT)).call(ppvalue)
  end
  def get_archive_private_key(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_archive_private_key.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_archive_private_key(value : Int16) : HRESULT
    @lpVtbl.value.put_archive_private_key.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_key_archival_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_key_archival_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def put_key_archival_certificate(encoding : EncodingType, value : UInt8*) : HRESULT
    @lpVtbl.value.put_key_archival_certificate.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, value)
  end
  def get_encryption_algorithm(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_encryption_algorithm.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def put_encryption_algorithm(pvalue : IObjectId) : HRESULT
    @lpVtbl.value.put_encryption_algorithm.unsafe_as(Proc(IObjectId, HRESULT)).call(pvalue)
  end
  def get_encryption_strength(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_encryption_strength.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def put_encryption_strength(value : Int32) : HRESULT
    @lpVtbl.value.put_encryption_strength.unsafe_as(Proc(Int32, HRESULT)).call(value)
  end
  def get_encrypted_key_hash(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_encrypted_key_hash.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_signer_certificates(ppvalue : ISignerCertificates*) : HRESULT
    @lpVtbl.value.get_signer_certificates.unsafe_as(Proc(ISignerCertificates*, HRESULT)).call(ppvalue)
  end
end
struct LibWin32::IX509CertificateRequestCmc2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(context : X509CertificateEnrollmentContext) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(X509CertificateEnrollmentContext, HRESULT)).call(context)
  end
  def encode : HRESULT
    @lpVtbl.value.encode.unsafe_as(Proc(HRESULT)).call
  end
  def reset_for_encode : HRESULT
    @lpVtbl.value.reset_for_encode.unsafe_as(Proc(HRESULT)).call
  end
  def get_inner_request(level : InnerRequestLevel, ppvalue : IX509CertificateRequest*) : HRESULT
    @lpVtbl.value.get_inner_request.unsafe_as(Proc(InnerRequestLevel, IX509CertificateRequest*, HRESULT)).call(level, ppvalue)
  end
  def get_type(pvalue : X509RequestType*) : HRESULT
    @lpVtbl.value.get_type.unsafe_as(Proc(X509RequestType*, HRESULT)).call(pvalue)
  end
  def get_enrollment_context(pvalue : X509CertificateEnrollmentContext*) : HRESULT
    @lpVtbl.value.get_enrollment_context.unsafe_as(Proc(X509CertificateEnrollmentContext*, HRESULT)).call(pvalue)
  end
  def get_silent(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_silent.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_silent(value : Int16) : HRESULT
    @lpVtbl.value.put_silent.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_parent_window(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_parent_window.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def put_parent_window(value : Int32) : HRESULT
    @lpVtbl.value.put_parent_window.unsafe_as(Proc(Int32, HRESULT)).call(value)
  end
  def get_ui_context_message(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_ui_context_message.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_ui_context_message(value : UInt8*) : HRESULT
    @lpVtbl.value.put_ui_context_message.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_suppress_defaults(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_suppress_defaults.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_suppress_defaults(value : Int16) : HRESULT
    @lpVtbl.value.put_suppress_defaults.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_renewal_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_renewal_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def put_renewal_certificate(encoding : EncodingType, value : UInt8*) : HRESULT
    @lpVtbl.value.put_renewal_certificate.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, value)
  end
  def get_client_id(pvalue : RequestClientInfoClientId*) : HRESULT
    @lpVtbl.value.get_client_id.unsafe_as(Proc(RequestClientInfoClientId*, HRESULT)).call(pvalue)
  end
  def put_client_id(value : RequestClientInfoClientId) : HRESULT
    @lpVtbl.value.put_client_id.unsafe_as(Proc(RequestClientInfoClientId, HRESULT)).call(value)
  end
  def get_csp_informations(ppvalue : ICspInformations*) : HRESULT
    @lpVtbl.value.get_csp_informations.unsafe_as(Proc(ICspInformations*, HRESULT)).call(ppvalue)
  end
  def put_csp_informations(pvalue : ICspInformations) : HRESULT
    @lpVtbl.value.put_csp_informations.unsafe_as(Proc(ICspInformations, HRESULT)).call(pvalue)
  end
  def get_hash_algorithm(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_hash_algorithm.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def put_hash_algorithm(pvalue : IObjectId) : HRESULT
    @lpVtbl.value.put_hash_algorithm.unsafe_as(Proc(IObjectId, HRESULT)).call(pvalue)
  end
  def get_alternate_signature_algorithm(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_alternate_signature_algorithm.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_alternate_signature_algorithm(value : Int16) : HRESULT
    @lpVtbl.value.put_alternate_signature_algorithm.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def initialize_from_template_name(context : X509CertificateEnrollmentContext, strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_template_name.unsafe_as(Proc(X509CertificateEnrollmentContext, UInt8*, HRESULT)).call(context, strtemplatename)
  end
  def initialize_from_certificate(context : X509CertificateEnrollmentContext, renewalrequest : Int16, strcertificate : UInt8*, encoding : EncodingType, inheritoptions : X509RequestInheritOptions) : HRESULT
    @lpVtbl.value.initialize_from_certificate.unsafe_as(Proc(X509CertificateEnrollmentContext, Int16, UInt8*, EncodingType, X509RequestInheritOptions, HRESULT)).call(context, renewalrequest, strcertificate, encoding, inheritoptions)
  end
  def initialize_from_inner_request(pinnerrequest : IX509CertificateRequest) : HRESULT
    @lpVtbl.value.initialize_from_inner_request.unsafe_as(Proc(IX509CertificateRequest, HRESULT)).call(pinnerrequest)
  end
  def initialize_decode(strencodeddata : UInt8*, encoding : EncodingType) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(UInt8*, EncodingType, HRESULT)).call(strencodeddata, encoding)
  end
  def get_requester_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_requester_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_requester_name(value : UInt8*) : HRESULT
    @lpVtbl.value.put_requester_name.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_signer_certificate(ppvalue : ISignerCertificate*) : HRESULT
    @lpVtbl.value.get_signer_certificate.unsafe_as(Proc(ISignerCertificate*, HRESULT)).call(ppvalue)
  end
  def put_signer_certificate(pvalue : ISignerCertificate) : HRESULT
    @lpVtbl.value.put_signer_certificate.unsafe_as(Proc(ISignerCertificate, HRESULT)).call(pvalue)
  end
  def initialize_from_inner_request_template_name(pinnerrequest : IX509CertificateRequest, strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_inner_request_template_name.unsafe_as(Proc(IX509CertificateRequest, UInt8*, HRESULT)).call(pinnerrequest, strtemplatename)
  end
  def get_template_object_id(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_template_object_id.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def get_null_signed(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_null_signed.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_crypt_attributes(ppvalue : ICryptAttributes*) : HRESULT
    @lpVtbl.value.get_crypt_attributes.unsafe_as(Proc(ICryptAttributes*, HRESULT)).call(ppvalue)
  end
  def get_name_value_pairs(ppvalue : IX509NameValuePairs*) : HRESULT
    @lpVtbl.value.get_name_value_pairs.unsafe_as(Proc(IX509NameValuePairs*, HRESULT)).call(ppvalue)
  end
  def get_x509_extensions(ppvalue : IX509Extensions*) : HRESULT
    @lpVtbl.value.get_x509_extensions.unsafe_as(Proc(IX509Extensions*, HRESULT)).call(ppvalue)
  end
  def get_critical_extensions(ppvalue : IObjectIds*) : HRESULT
    @lpVtbl.value.get_critical_extensions.unsafe_as(Proc(IObjectIds*, HRESULT)).call(ppvalue)
  end
  def get_suppress_oids(ppvalue : IObjectIds*) : HRESULT
    @lpVtbl.value.get_suppress_oids.unsafe_as(Proc(IObjectIds*, HRESULT)).call(ppvalue)
  end
  def get_transaction_id(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_transaction_id.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def put_transaction_id(value : Int32) : HRESULT
    @lpVtbl.value.put_transaction_id.unsafe_as(Proc(Int32, HRESULT)).call(value)
  end
  def get_sender_nonce(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_sender_nonce.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def put_sender_nonce(encoding : EncodingType, value : UInt8*) : HRESULT
    @lpVtbl.value.put_sender_nonce.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, value)
  end
  def get_signature_information(ppvalue : IX509SignatureInformation*) : HRESULT
    @lpVtbl.value.get_signature_information.unsafe_as(Proc(IX509SignatureInformation*, HRESULT)).call(ppvalue)
  end
  def get_archive_private_key(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_archive_private_key.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_archive_private_key(value : Int16) : HRESULT
    @lpVtbl.value.put_archive_private_key.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_key_archival_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_key_archival_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def put_key_archival_certificate(encoding : EncodingType, value : UInt8*) : HRESULT
    @lpVtbl.value.put_key_archival_certificate.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, value)
  end
  def get_encryption_algorithm(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_encryption_algorithm.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def put_encryption_algorithm(pvalue : IObjectId) : HRESULT
    @lpVtbl.value.put_encryption_algorithm.unsafe_as(Proc(IObjectId, HRESULT)).call(pvalue)
  end
  def get_encryption_strength(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_encryption_strength.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def put_encryption_strength(value : Int32) : HRESULT
    @lpVtbl.value.put_encryption_strength.unsafe_as(Proc(Int32, HRESULT)).call(value)
  end
  def get_encrypted_key_hash(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_encrypted_key_hash.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_signer_certificates(ppvalue : ISignerCertificates*) : HRESULT
    @lpVtbl.value.get_signer_certificates.unsafe_as(Proc(ISignerCertificates*, HRESULT)).call(ppvalue)
  end
  def initialize_from_template(context : X509CertificateEnrollmentContext, ppolicyserver : IX509EnrollmentPolicyServer, ptemplate : IX509CertificateTemplate) : HRESULT
    @lpVtbl.value.initialize_from_template.unsafe_as(Proc(X509CertificateEnrollmentContext, IX509EnrollmentPolicyServer, IX509CertificateTemplate, HRESULT)).call(context, ppolicyserver, ptemplate)
  end
  def initialize_from_inner_request_template(pinnerrequest : IX509CertificateRequest, ppolicyserver : IX509EnrollmentPolicyServer, ptemplate : IX509CertificateTemplate) : HRESULT
    @lpVtbl.value.initialize_from_inner_request_template.unsafe_as(Proc(IX509CertificateRequest, IX509EnrollmentPolicyServer, IX509CertificateTemplate, HRESULT)).call(pinnerrequest, ppolicyserver, ptemplate)
  end
  def get_policy_server(pppolicyserver : IX509EnrollmentPolicyServer*) : HRESULT
    @lpVtbl.value.get_policy_server.unsafe_as(Proc(IX509EnrollmentPolicyServer*, HRESULT)).call(pppolicyserver)
  end
  def get_template(pptemplate : IX509CertificateTemplate*) : HRESULT
    @lpVtbl.value.get_template.unsafe_as(Proc(IX509CertificateTemplate*, HRESULT)).call(pptemplate)
  end
  def check_signature(allowedsignaturetypes : Pkcs10AllowedSignatureTypes) : HRESULT
    @lpVtbl.value.check_signature.unsafe_as(Proc(Pkcs10AllowedSignatureTypes, HRESULT)).call(allowedsignaturetypes)
  end
  def check_certificate_signature(psignercertificate : ISignerCertificate, validatecertificatechain : Int16) : HRESULT
    @lpVtbl.value.check_certificate_signature.unsafe_as(Proc(ISignerCertificate, Int16, HRESULT)).call(psignercertificate, validatecertificatechain)
  end
end
struct LibWin32::IX509Enrollment
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(context : X509CertificateEnrollmentContext) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(X509CertificateEnrollmentContext, HRESULT)).call(context)
  end
  def initialize_from_template_name(context : X509CertificateEnrollmentContext, strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_template_name.unsafe_as(Proc(X509CertificateEnrollmentContext, UInt8*, HRESULT)).call(context, strtemplatename)
  end
  def initialize_from_request(prequest : IX509CertificateRequest) : HRESULT
    @lpVtbl.value.initialize_from_request.unsafe_as(Proc(IX509CertificateRequest, HRESULT)).call(prequest)
  end
  def create_request(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.create_request.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def enroll : HRESULT
    @lpVtbl.value.enroll.unsafe_as(Proc(HRESULT)).call
  end
  def install_response(restrictions : InstallResponseRestrictionFlags, strresponse : UInt8*, encoding : EncodingType, strpassword : UInt8*) : HRESULT
    @lpVtbl.value.install_response.unsafe_as(Proc(InstallResponseRestrictionFlags, UInt8*, EncodingType, UInt8*, HRESULT)).call(restrictions, strresponse, encoding, strpassword)
  end
  def create_pfx(strpassword : UInt8*, exportoptions : PFXExportOptions, encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.create_pfx.unsafe_as(Proc(UInt8*, PFXExportOptions, EncodingType, UInt8**, HRESULT)).call(strpassword, exportoptions, encoding, pvalue)
  end
  def get_request(pvalue : IX509CertificateRequest*) : HRESULT
    @lpVtbl.value.get_request.unsafe_as(Proc(IX509CertificateRequest*, HRESULT)).call(pvalue)
  end
  def get_silent(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_silent.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_silent(value : Int16) : HRESULT
    @lpVtbl.value.put_silent.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_parent_window(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_parent_window.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def put_parent_window(value : Int32) : HRESULT
    @lpVtbl.value.put_parent_window.unsafe_as(Proc(Int32, HRESULT)).call(value)
  end
  def get_name_value_pairs(ppvalue : IX509NameValuePairs*) : HRESULT
    @lpVtbl.value.get_name_value_pairs.unsafe_as(Proc(IX509NameValuePairs*, HRESULT)).call(ppvalue)
  end
  def get_enrollment_context(pvalue : X509CertificateEnrollmentContext*) : HRESULT
    @lpVtbl.value.get_enrollment_context.unsafe_as(Proc(X509CertificateEnrollmentContext*, HRESULT)).call(pvalue)
  end
  def get_status(ppvalue : IX509EnrollmentStatus*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(IX509EnrollmentStatus*, HRESULT)).call(ppvalue)
  end
  def get_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_response(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_response.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_certificate_friendly_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_certificate_friendly_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_certificate_friendly_name(strvalue : UInt8*) : HRESULT
    @lpVtbl.value.put_certificate_friendly_name.unsafe_as(Proc(UInt8*, HRESULT)).call(strvalue)
  end
  def get_certificate_description(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_certificate_description.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_certificate_description(strvalue : UInt8*) : HRESULT
    @lpVtbl.value.put_certificate_description.unsafe_as(Proc(UInt8*, HRESULT)).call(strvalue)
  end
  def get_request_id(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_request_id.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def get_ca_config_string(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_ca_config_string.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
end
struct LibWin32::IX509Enrollment2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(context : X509CertificateEnrollmentContext) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(X509CertificateEnrollmentContext, HRESULT)).call(context)
  end
  def initialize_from_template_name(context : X509CertificateEnrollmentContext, strtemplatename : UInt8*) : HRESULT
    @lpVtbl.value.initialize_from_template_name.unsafe_as(Proc(X509CertificateEnrollmentContext, UInt8*, HRESULT)).call(context, strtemplatename)
  end
  def initialize_from_request(prequest : IX509CertificateRequest) : HRESULT
    @lpVtbl.value.initialize_from_request.unsafe_as(Proc(IX509CertificateRequest, HRESULT)).call(prequest)
  end
  def create_request(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.create_request.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def enroll : HRESULT
    @lpVtbl.value.enroll.unsafe_as(Proc(HRESULT)).call
  end
  def install_response(restrictions : InstallResponseRestrictionFlags, strresponse : UInt8*, encoding : EncodingType, strpassword : UInt8*) : HRESULT
    @lpVtbl.value.install_response.unsafe_as(Proc(InstallResponseRestrictionFlags, UInt8*, EncodingType, UInt8*, HRESULT)).call(restrictions, strresponse, encoding, strpassword)
  end
  def create_pfx(strpassword : UInt8*, exportoptions : PFXExportOptions, encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.create_pfx.unsafe_as(Proc(UInt8*, PFXExportOptions, EncodingType, UInt8**, HRESULT)).call(strpassword, exportoptions, encoding, pvalue)
  end
  def get_request(pvalue : IX509CertificateRequest*) : HRESULT
    @lpVtbl.value.get_request.unsafe_as(Proc(IX509CertificateRequest*, HRESULT)).call(pvalue)
  end
  def get_silent(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_silent.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_silent(value : Int16) : HRESULT
    @lpVtbl.value.put_silent.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_parent_window(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_parent_window.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def put_parent_window(value : Int32) : HRESULT
    @lpVtbl.value.put_parent_window.unsafe_as(Proc(Int32, HRESULT)).call(value)
  end
  def get_name_value_pairs(ppvalue : IX509NameValuePairs*) : HRESULT
    @lpVtbl.value.get_name_value_pairs.unsafe_as(Proc(IX509NameValuePairs*, HRESULT)).call(ppvalue)
  end
  def get_enrollment_context(pvalue : X509CertificateEnrollmentContext*) : HRESULT
    @lpVtbl.value.get_enrollment_context.unsafe_as(Proc(X509CertificateEnrollmentContext*, HRESULT)).call(pvalue)
  end
  def get_status(ppvalue : IX509EnrollmentStatus*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(IX509EnrollmentStatus*, HRESULT)).call(ppvalue)
  end
  def get_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_response(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_response.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_certificate_friendly_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_certificate_friendly_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_certificate_friendly_name(strvalue : UInt8*) : HRESULT
    @lpVtbl.value.put_certificate_friendly_name.unsafe_as(Proc(UInt8*, HRESULT)).call(strvalue)
  end
  def get_certificate_description(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_certificate_description.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_certificate_description(strvalue : UInt8*) : HRESULT
    @lpVtbl.value.put_certificate_description.unsafe_as(Proc(UInt8*, HRESULT)).call(strvalue)
  end
  def get_request_id(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_request_id.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def get_ca_config_string(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_ca_config_string.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def initialize_from_template(context : X509CertificateEnrollmentContext, ppolicyserver : IX509EnrollmentPolicyServer, ptemplate : IX509CertificateTemplate) : HRESULT
    @lpVtbl.value.initialize_from_template.unsafe_as(Proc(X509CertificateEnrollmentContext, IX509EnrollmentPolicyServer, IX509CertificateTemplate, HRESULT)).call(context, ppolicyserver, ptemplate)
  end
  def install_response2(restrictions : InstallResponseRestrictionFlags, strresponse : UInt8*, encoding : EncodingType, strpassword : UInt8*, strenrollmentpolicyserverurl : UInt8*, strenrollmentpolicyserverid : UInt8*, enrollmentpolicyserverflags : PolicyServerUrlFlags, authflags : X509EnrollmentAuthFlags) : HRESULT
    @lpVtbl.value.install_response2.unsafe_as(Proc(InstallResponseRestrictionFlags, UInt8*, EncodingType, UInt8*, UInt8*, UInt8*, PolicyServerUrlFlags, X509EnrollmentAuthFlags, HRESULT)).call(restrictions, strresponse, encoding, strpassword, strenrollmentpolicyserverurl, strenrollmentpolicyserverid, enrollmentpolicyserverflags, authflags)
  end
  def get_policy_server(pppolicyserver : IX509EnrollmentPolicyServer*) : HRESULT
    @lpVtbl.value.get_policy_server.unsafe_as(Proc(IX509EnrollmentPolicyServer*, HRESULT)).call(pppolicyserver)
  end
  def get_template(pptemplate : IX509CertificateTemplate*) : HRESULT
    @lpVtbl.value.get_template.unsafe_as(Proc(IX509CertificateTemplate*, HRESULT)).call(pptemplate)
  end
  def get_request_id_string(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_request_id_string.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
end
struct LibWin32::IX509EnrollmentHelper
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def add_policy_server(strenrollmentpolicyserveruri : UInt8*, strenrollmentpolicyid : UInt8*, enrollmentpolicyserverflags : PolicyServerUrlFlags, authflags : X509EnrollmentAuthFlags, strcredential : UInt8*, strpassword : UInt8*) : HRESULT
    @lpVtbl.value.add_policy_server.unsafe_as(Proc(UInt8*, UInt8*, PolicyServerUrlFlags, X509EnrollmentAuthFlags, UInt8*, UInt8*, HRESULT)).call(strenrollmentpolicyserveruri, strenrollmentpolicyid, enrollmentpolicyserverflags, authflags, strcredential, strpassword)
  end
  def add_enrollment_server(strenrollmentserveruri : UInt8*, authflags : X509EnrollmentAuthFlags, strcredential : UInt8*, strpassword : UInt8*) : HRESULT
    @lpVtbl.value.add_enrollment_server.unsafe_as(Proc(UInt8*, X509EnrollmentAuthFlags, UInt8*, UInt8*, HRESULT)).call(strenrollmentserveruri, authflags, strcredential, strpassword)
  end
  def enroll(strenrollmentpolicyserveruri : UInt8*, strtemplatename : UInt8*, encoding : EncodingType, enrollflags : WebEnrollmentFlags, pstrcertificate : UInt8**) : HRESULT
    @lpVtbl.value.enroll.unsafe_as(Proc(UInt8*, UInt8*, EncodingType, WebEnrollmentFlags, UInt8**, HRESULT)).call(strenrollmentpolicyserveruri, strtemplatename, encoding, enrollflags, pstrcertificate)
  end
  def initialize(context : X509CertificateEnrollmentContext) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(X509CertificateEnrollmentContext, HRESULT)).call(context)
  end
end
struct LibWin32::IX509EnrollmentWebClassFactory
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def create_object(strprogid : UInt8*, ppiunknown : IUnknown*) : HRESULT
    @lpVtbl.value.create_object.unsafe_as(Proc(UInt8*, IUnknown*, HRESULT)).call(strprogid, ppiunknown)
  end
end
struct LibWin32::IX509MachineEnrollmentFactory
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def create_object(strprogid : UInt8*, ppihelper : IX509EnrollmentHelper*) : HRESULT
    @lpVtbl.value.create_object.unsafe_as(Proc(UInt8*, IX509EnrollmentHelper*, HRESULT)).call(strprogid, ppihelper)
  end
end
struct LibWin32::IX509CertificateRevocationListEntry
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(encoding : EncodingType, serialnumber : UInt8*, revocationdate : Float64) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(EncodingType, UInt8*, Float64, HRESULT)).call(encoding, serialnumber, revocationdate)
  end
  def get_serial_number(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_serial_number.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_revocation_date(pvalue : Float64*) : HRESULT
    @lpVtbl.value.get_revocation_date.unsafe_as(Proc(Float64*, HRESULT)).call(pvalue)
  end
  def get_revocation_reason(pvalue : CRLRevocationReason*) : HRESULT
    @lpVtbl.value.get_revocation_reason.unsafe_as(Proc(CRLRevocationReason*, HRESULT)).call(pvalue)
  end
  def put_revocation_reason(value : CRLRevocationReason) : HRESULT
    @lpVtbl.value.put_revocation_reason.unsafe_as(Proc(CRLRevocationReason, HRESULT)).call(value)
  end
  def get_x509_extensions(ppvalue : IX509Extensions*) : HRESULT
    @lpVtbl.value.get_x509_extensions.unsafe_as(Proc(IX509Extensions*, HRESULT)).call(ppvalue)
  end
  def get_critical_extensions(ppvalue : IObjectIds*) : HRESULT
    @lpVtbl.value.get_critical_extensions.unsafe_as(Proc(IObjectIds*, HRESULT)).call(ppvalue)
  end
end
struct LibWin32::IX509CertificateRevocationListEntries
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_item_by_index(index : Int32, pval : IX509CertificateRevocationListEntry*) : HRESULT
    @lpVtbl.value.get_item_by_index.unsafe_as(Proc(Int32, IX509CertificateRevocationListEntry*, HRESULT)).call(index, pval)
  end
  def get_count(pval : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(pval)
  end
  def get__new_enum(pval : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.unsafe_as(Proc(IUnknown*, HRESULT)).call(pval)
  end
  def add(pval : IX509CertificateRevocationListEntry) : HRESULT
    @lpVtbl.value.add.unsafe_as(Proc(IX509CertificateRevocationListEntry, HRESULT)).call(pval)
  end
  def remove(index : Int32) : HRESULT
    @lpVtbl.value.remove.unsafe_as(Proc(Int32, HRESULT)).call(index)
  end
  def clear : HRESULT
    @lpVtbl.value.clear.unsafe_as(Proc(HRESULT)).call
  end
  def get_index_by_serial_number(encoding : EncodingType, serialnumber : UInt8*, pindex : Int32*) : HRESULT
    @lpVtbl.value.get_index_by_serial_number.unsafe_as(Proc(EncodingType, UInt8*, Int32*, HRESULT)).call(encoding, serialnumber, pindex)
  end
  def add_range(pvalue : IX509CertificateRevocationListEntries) : HRESULT
    @lpVtbl.value.add_range.unsafe_as(Proc(IX509CertificateRevocationListEntries, HRESULT)).call(pvalue)
  end
end
struct LibWin32::IX509CertificateRevocationList
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(HRESULT)).call
  end
  def initialize_decode(strencodeddata : UInt8*, encoding : EncodingType) : HRESULT
    @lpVtbl.value.initialize_decode.unsafe_as(Proc(UInt8*, EncodingType, HRESULT)).call(strencodeddata, encoding)
  end
  def encode : HRESULT
    @lpVtbl.value.encode.unsafe_as(Proc(HRESULT)).call
  end
  def reset_for_encode : HRESULT
    @lpVtbl.value.reset_for_encode.unsafe_as(Proc(HRESULT)).call
  end
  def check_public_key_signature(ppublickey : IX509PublicKey) : HRESULT
    @lpVtbl.value.check_public_key_signature.unsafe_as(Proc(IX509PublicKey, HRESULT)).call(ppublickey)
  end
  def check_signature : HRESULT
    @lpVtbl.value.check_signature.unsafe_as(Proc(HRESULT)).call
  end
  def get_issuer(ppvalue : IX500DistinguishedName*) : HRESULT
    @lpVtbl.value.get_issuer.unsafe_as(Proc(IX500DistinguishedName*, HRESULT)).call(ppvalue)
  end
  def put_issuer(pvalue : IX500DistinguishedName) : HRESULT
    @lpVtbl.value.put_issuer.unsafe_as(Proc(IX500DistinguishedName, HRESULT)).call(pvalue)
  end
  def get_this_update(pvalue : Float64*) : HRESULT
    @lpVtbl.value.get_this_update.unsafe_as(Proc(Float64*, HRESULT)).call(pvalue)
  end
  def put_this_update(value : Float64) : HRESULT
    @lpVtbl.value.put_this_update.unsafe_as(Proc(Float64, HRESULT)).call(value)
  end
  def get_next_update(pvalue : Float64*) : HRESULT
    @lpVtbl.value.get_next_update.unsafe_as(Proc(Float64*, HRESULT)).call(pvalue)
  end
  def put_next_update(value : Float64) : HRESULT
    @lpVtbl.value.put_next_update.unsafe_as(Proc(Float64, HRESULT)).call(value)
  end
  def get_x509_crl_entries(ppvalue : IX509CertificateRevocationListEntries*) : HRESULT
    @lpVtbl.value.get_x509_crl_entries.unsafe_as(Proc(IX509CertificateRevocationListEntries*, HRESULT)).call(ppvalue)
  end
  def get_x509_extensions(ppvalue : IX509Extensions*) : HRESULT
    @lpVtbl.value.get_x509_extensions.unsafe_as(Proc(IX509Extensions*, HRESULT)).call(ppvalue)
  end
  def get_critical_extensions(ppvalue : IObjectIds*) : HRESULT
    @lpVtbl.value.get_critical_extensions.unsafe_as(Proc(IObjectIds*, HRESULT)).call(ppvalue)
  end
  def get_signer_certificate(ppvalue : ISignerCertificate*) : HRESULT
    @lpVtbl.value.get_signer_certificate.unsafe_as(Proc(ISignerCertificate*, HRESULT)).call(ppvalue)
  end
  def put_signer_certificate(pvalue : ISignerCertificate) : HRESULT
    @lpVtbl.value.put_signer_certificate.unsafe_as(Proc(ISignerCertificate, HRESULT)).call(pvalue)
  end
  def get_crl_number(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_crl_number.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def put_crl_number(encoding : EncodingType, value : UInt8*) : HRESULT
    @lpVtbl.value.put_crl_number.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, value)
  end
  def get_ca_version(pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_ca_version.unsafe_as(Proc(Int32*, HRESULT)).call(pvalue)
  end
  def put_ca_version(pvalue : Int32) : HRESULT
    @lpVtbl.value.put_ca_version.unsafe_as(Proc(Int32, HRESULT)).call(pvalue)
  end
  def get_base_crl(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_base_crl.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_null_signed(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_null_signed.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def get_hash_algorithm(ppvalue : IObjectId*) : HRESULT
    @lpVtbl.value.get_hash_algorithm.unsafe_as(Proc(IObjectId*, HRESULT)).call(ppvalue)
  end
  def put_hash_algorithm(pvalue : IObjectId) : HRESULT
    @lpVtbl.value.put_hash_algorithm.unsafe_as(Proc(IObjectId, HRESULT)).call(pvalue)
  end
  def get_alternate_signature_algorithm(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_alternate_signature_algorithm.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_alternate_signature_algorithm(value : Int16) : HRESULT
    @lpVtbl.value.put_alternate_signature_algorithm.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def get_signature_information(ppvalue : IX509SignatureInformation*) : HRESULT
    @lpVtbl.value.get_signature_information.unsafe_as(Proc(IX509SignatureInformation*, HRESULT)).call(ppvalue)
  end
  def get_raw_data(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_raw_data_to_be_signed(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_raw_data_to_be_signed.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_signature(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_signature.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
end
struct LibWin32::ICertificateAttestationChallenge
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(encoding : EncodingType, strpendingfullcmcresponsewithchallenge : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strpendingfullcmcresponsewithchallenge)
  end
  def decrypt_challenge(encoding : EncodingType, pstrenvelopedpkcs7reencryptedtoca : UInt8**) : HRESULT
    @lpVtbl.value.decrypt_challenge.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pstrenvelopedpkcs7reencryptedtoca)
  end
  def get_request_id(pstrrequestid : UInt8**) : HRESULT
    @lpVtbl.value.get_request_id.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrrequestid)
  end
end
struct LibWin32::ICertificateAttestationChallenge2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(encoding : EncodingType, strpendingfullcmcresponsewithchallenge : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, strpendingfullcmcresponsewithchallenge)
  end
  def decrypt_challenge(encoding : EncodingType, pstrenvelopedpkcs7reencryptedtoca : UInt8**) : HRESULT
    @lpVtbl.value.decrypt_challenge.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pstrenvelopedpkcs7reencryptedtoca)
  end
  def get_request_id(pstrrequestid : UInt8**) : HRESULT
    @lpVtbl.value.get_request_id.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrrequestid)
  end
  def put_key_container_name(value : UInt8*) : HRESULT
    @lpVtbl.value.put_key_container_name.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def put_key_blob(encoding : EncodingType, value : UInt8*) : HRESULT
    @lpVtbl.value.put_key_blob.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, value)
  end
end
struct LibWin32::IX509SCEPEnrollment
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(prequest : IX509CertificateRequestPkcs10, strthumbprint : UInt8*, thumprintencoding : EncodingType, strservercertificates : UInt8*, encoding : EncodingType) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IX509CertificateRequestPkcs10, UInt8*, EncodingType, UInt8*, EncodingType, HRESULT)).call(prequest, strthumbprint, thumprintencoding, strservercertificates, encoding)
  end
  def initialize_for_pending(context : X509CertificateEnrollmentContext) : HRESULT
    @lpVtbl.value.initialize_for_pending.unsafe_as(Proc(X509CertificateEnrollmentContext, HRESULT)).call(context)
  end
  def create_request_message(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.create_request_message.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def create_retrieve_pending_message(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.create_retrieve_pending_message.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def create_retrieve_certificate_message(context : X509CertificateEnrollmentContext, strissuer : UInt8*, issuerencoding : EncodingType, strserialnumber : UInt8*, serialnumberencoding : EncodingType, encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.create_retrieve_certificate_message.unsafe_as(Proc(X509CertificateEnrollmentContext, UInt8*, EncodingType, UInt8*, EncodingType, EncodingType, UInt8**, HRESULT)).call(context, strissuer, issuerencoding, strserialnumber, serialnumberencoding, encoding, pvalue)
  end
  def process_response_message(strresponse : UInt8*, encoding : EncodingType, pdisposition : X509SCEPDisposition*) : HRESULT
    @lpVtbl.value.process_response_message.unsafe_as(Proc(UInt8*, EncodingType, X509SCEPDisposition*, HRESULT)).call(strresponse, encoding, pdisposition)
  end
  def put_server_capabilities(value : UInt8*) : HRESULT
    @lpVtbl.value.put_server_capabilities.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_fail_info(pvalue : X509SCEPFailInfo*) : HRESULT
    @lpVtbl.value.get_fail_info.unsafe_as(Proc(X509SCEPFailInfo*, HRESULT)).call(pvalue)
  end
  def get_signer_certificate(ppvalue : ISignerCertificate*) : HRESULT
    @lpVtbl.value.get_signer_certificate.unsafe_as(Proc(ISignerCertificate*, HRESULT)).call(ppvalue)
  end
  def put_signer_certificate(pvalue : ISignerCertificate) : HRESULT
    @lpVtbl.value.put_signer_certificate.unsafe_as(Proc(ISignerCertificate, HRESULT)).call(pvalue)
  end
  def get_old_certificate(ppvalue : ISignerCertificate*) : HRESULT
    @lpVtbl.value.get_old_certificate.unsafe_as(Proc(ISignerCertificate*, HRESULT)).call(ppvalue)
  end
  def put_old_certificate(pvalue : ISignerCertificate) : HRESULT
    @lpVtbl.value.put_old_certificate.unsafe_as(Proc(ISignerCertificate, HRESULT)).call(pvalue)
  end
  def get_transaction_id(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_transaction_id.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def put_transaction_id(encoding : EncodingType, value : UInt8*) : HRESULT
    @lpVtbl.value.put_transaction_id.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, value)
  end
  def get_request(ppvalue : IX509CertificateRequestPkcs10*) : HRESULT
    @lpVtbl.value.get_request.unsafe_as(Proc(IX509CertificateRequestPkcs10*, HRESULT)).call(ppvalue)
  end
  def get_certificate_friendly_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_certificate_friendly_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_certificate_friendly_name(value : UInt8*) : HRESULT
    @lpVtbl.value.put_certificate_friendly_name.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_status(ppvalue : IX509EnrollmentStatus*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(IX509EnrollmentStatus*, HRESULT)).call(ppvalue)
  end
  def get_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_silent(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_silent.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_silent(value : Int16) : HRESULT
    @lpVtbl.value.put_silent.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def delete_request : HRESULT
    @lpVtbl.value.delete_request.unsafe_as(Proc(HRESULT)).call
  end
end
struct LibWin32::IX509SCEPEnrollment2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(prequest : IX509CertificateRequestPkcs10, strthumbprint : UInt8*, thumprintencoding : EncodingType, strservercertificates : UInt8*, encoding : EncodingType) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(IX509CertificateRequestPkcs10, UInt8*, EncodingType, UInt8*, EncodingType, HRESULT)).call(prequest, strthumbprint, thumprintencoding, strservercertificates, encoding)
  end
  def initialize_for_pending(context : X509CertificateEnrollmentContext) : HRESULT
    @lpVtbl.value.initialize_for_pending.unsafe_as(Proc(X509CertificateEnrollmentContext, HRESULT)).call(context)
  end
  def create_request_message(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.create_request_message.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def create_retrieve_pending_message(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.create_retrieve_pending_message.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def create_retrieve_certificate_message(context : X509CertificateEnrollmentContext, strissuer : UInt8*, issuerencoding : EncodingType, strserialnumber : UInt8*, serialnumberencoding : EncodingType, encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.create_retrieve_certificate_message.unsafe_as(Proc(X509CertificateEnrollmentContext, UInt8*, EncodingType, UInt8*, EncodingType, EncodingType, UInt8**, HRESULT)).call(context, strissuer, issuerencoding, strserialnumber, serialnumberencoding, encoding, pvalue)
  end
  def process_response_message(strresponse : UInt8*, encoding : EncodingType, pdisposition : X509SCEPDisposition*) : HRESULT
    @lpVtbl.value.process_response_message.unsafe_as(Proc(UInt8*, EncodingType, X509SCEPDisposition*, HRESULT)).call(strresponse, encoding, pdisposition)
  end
  def put_server_capabilities(value : UInt8*) : HRESULT
    @lpVtbl.value.put_server_capabilities.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_fail_info(pvalue : X509SCEPFailInfo*) : HRESULT
    @lpVtbl.value.get_fail_info.unsafe_as(Proc(X509SCEPFailInfo*, HRESULT)).call(pvalue)
  end
  def get_signer_certificate(ppvalue : ISignerCertificate*) : HRESULT
    @lpVtbl.value.get_signer_certificate.unsafe_as(Proc(ISignerCertificate*, HRESULT)).call(ppvalue)
  end
  def put_signer_certificate(pvalue : ISignerCertificate) : HRESULT
    @lpVtbl.value.put_signer_certificate.unsafe_as(Proc(ISignerCertificate, HRESULT)).call(pvalue)
  end
  def get_old_certificate(ppvalue : ISignerCertificate*) : HRESULT
    @lpVtbl.value.get_old_certificate.unsafe_as(Proc(ISignerCertificate*, HRESULT)).call(ppvalue)
  end
  def put_old_certificate(pvalue : ISignerCertificate) : HRESULT
    @lpVtbl.value.put_old_certificate.unsafe_as(Proc(ISignerCertificate, HRESULT)).call(pvalue)
  end
  def get_transaction_id(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_transaction_id.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def put_transaction_id(encoding : EncodingType, value : UInt8*) : HRESULT
    @lpVtbl.value.put_transaction_id.unsafe_as(Proc(EncodingType, UInt8*, HRESULT)).call(encoding, value)
  end
  def get_request(ppvalue : IX509CertificateRequestPkcs10*) : HRESULT
    @lpVtbl.value.get_request.unsafe_as(Proc(IX509CertificateRequestPkcs10*, HRESULT)).call(ppvalue)
  end
  def get_certificate_friendly_name(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_certificate_friendly_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_certificate_friendly_name(value : UInt8*) : HRESULT
    @lpVtbl.value.put_certificate_friendly_name.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
  def get_status(ppvalue : IX509EnrollmentStatus*) : HRESULT
    @lpVtbl.value.get_status.unsafe_as(Proc(IX509EnrollmentStatus*, HRESULT)).call(ppvalue)
  end
  def get_certificate(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_certificate.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def get_silent(pvalue : Int16*) : HRESULT
    @lpVtbl.value.get_silent.unsafe_as(Proc(Int16*, HRESULT)).call(pvalue)
  end
  def put_silent(value : Int16) : HRESULT
    @lpVtbl.value.put_silent.unsafe_as(Proc(Int16, HRESULT)).call(value)
  end
  def delete_request : HRESULT
    @lpVtbl.value.delete_request.unsafe_as(Proc(HRESULT)).call
  end
  def create_challenge_answer_message(encoding : EncodingType, pvalue : UInt8**) : HRESULT
    @lpVtbl.value.create_challenge_answer_message.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pvalue)
  end
  def process_response_message2(flags : X509SCEPProcessMessageFlags, strresponse : UInt8*, encoding : EncodingType, pdisposition : X509SCEPDisposition*) : HRESULT
    @lpVtbl.value.process_response_message2.unsafe_as(Proc(X509SCEPProcessMessageFlags, UInt8*, EncodingType, X509SCEPDisposition*, HRESULT)).call(flags, strresponse, encoding, pdisposition)
  end
  def get_result_message_text(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_result_message_text.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def get_delay_retry(pvalue : DelayRetryAction*) : HRESULT
    @lpVtbl.value.get_delay_retry.unsafe_as(Proc(DelayRetryAction*, HRESULT)).call(pvalue)
  end
  def get_activity_id(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_activity_id.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
  def put_activity_id(value : UInt8*) : HRESULT
    @lpVtbl.value.put_activity_id.unsafe_as(Proc(UInt8*, HRESULT)).call(value)
  end
end
struct LibWin32::IX509SCEPEnrollmentHelper
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(strserverurl : UInt8*, strrequestheaders : UInt8*, prequest : IX509CertificateRequestPkcs10, strcacertificatethumbprint : UInt8*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(UInt8*, UInt8*, IX509CertificateRequestPkcs10, UInt8*, HRESULT)).call(strserverurl, strrequestheaders, prequest, strcacertificatethumbprint)
  end
  def initialize_for_pending(strserverurl : UInt8*, strrequestheaders : UInt8*, context : X509CertificateEnrollmentContext, strtransactionid : UInt8*) : HRESULT
    @lpVtbl.value.initialize_for_pending.unsafe_as(Proc(UInt8*, UInt8*, X509CertificateEnrollmentContext, UInt8*, HRESULT)).call(strserverurl, strrequestheaders, context, strtransactionid)
  end
  def enroll(processflags : X509SCEPProcessMessageFlags, pdisposition : X509SCEPDisposition*) : HRESULT
    @lpVtbl.value.enroll.unsafe_as(Proc(X509SCEPProcessMessageFlags, X509SCEPDisposition*, HRESULT)).call(processflags, pdisposition)
  end
  def fetch_pending(processflags : X509SCEPProcessMessageFlags, pdisposition : X509SCEPDisposition*) : HRESULT
    @lpVtbl.value.fetch_pending.unsafe_as(Proc(X509SCEPProcessMessageFlags, X509SCEPDisposition*, HRESULT)).call(processflags, pdisposition)
  end
  def get_x509_scep_enrollment(ppvalue : IX509SCEPEnrollment*) : HRESULT
    @lpVtbl.value.get_x509_scep_enrollment.unsafe_as(Proc(IX509SCEPEnrollment*, HRESULT)).call(ppvalue)
  end
  def get_result_message_text(pvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_result_message_text.unsafe_as(Proc(UInt8**, HRESULT)).call(pvalue)
  end
end
struct LibWin32::ICertEncodeStringArray
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def decode(strbinary : UInt8*) : HRESULT
    @lpVtbl.value.decode.unsafe_as(Proc(UInt8*, HRESULT)).call(strbinary)
  end
  def get_string_type(pstringtype : Int32*) : HRESULT
    @lpVtbl.value.get_string_type.unsafe_as(Proc(Int32*, HRESULT)).call(pstringtype)
  end
  def get_count(pcount : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(pcount)
  end
  def get_value(index : Int32, pstr : UInt8**) : HRESULT
    @lpVtbl.value.get_value.unsafe_as(Proc(Int32, UInt8**, HRESULT)).call(index, pstr)
  end
  def reset(count : Int32, stringtype : CERT_RDN_ATTR_VALUE_TYPE) : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(Int32, CERT_RDN_ATTR_VALUE_TYPE, HRESULT)).call(count, stringtype)
  end
  def set_value(index : Int32, str : UInt8*) : HRESULT
    @lpVtbl.value.set_value.unsafe_as(Proc(Int32, UInt8*, HRESULT)).call(index, str)
  end
  def encode(pstrbinary : UInt8**) : HRESULT
    @lpVtbl.value.encode.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrbinary)
  end
end
struct LibWin32::ICertEncodeStringArray2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def decode(strbinary : UInt8*) : HRESULT
    @lpVtbl.value.decode.unsafe_as(Proc(UInt8*, HRESULT)).call(strbinary)
  end
  def get_string_type(pstringtype : Int32*) : HRESULT
    @lpVtbl.value.get_string_type.unsafe_as(Proc(Int32*, HRESULT)).call(pstringtype)
  end
  def get_count(pcount : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(pcount)
  end
  def get_value(index : Int32, pstr : UInt8**) : HRESULT
    @lpVtbl.value.get_value.unsafe_as(Proc(Int32, UInt8**, HRESULT)).call(index, pstr)
  end
  def reset(count : Int32, stringtype : CERT_RDN_ATTR_VALUE_TYPE) : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(Int32, CERT_RDN_ATTR_VALUE_TYPE, HRESULT)).call(count, stringtype)
  end
  def set_value(index : Int32, str : UInt8*) : HRESULT
    @lpVtbl.value.set_value.unsafe_as(Proc(Int32, UInt8*, HRESULT)).call(index, str)
  end
  def encode(pstrbinary : UInt8**) : HRESULT
    @lpVtbl.value.encode.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrbinary)
  end
  def decode_blob(strencodeddata : UInt8*, encoding : EncodingType) : HRESULT
    @lpVtbl.value.decode_blob.unsafe_as(Proc(UInt8*, EncodingType, HRESULT)).call(strencodeddata, encoding)
  end
  def encode_blob(encoding : EncodingType, pstrencodeddata : UInt8**) : HRESULT
    @lpVtbl.value.encode_blob.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pstrencodeddata)
  end
end
struct LibWin32::ICertEncodeLongArray
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def decode(strbinary : UInt8*) : HRESULT
    @lpVtbl.value.decode.unsafe_as(Proc(UInt8*, HRESULT)).call(strbinary)
  end
  def get_count(pcount : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(pcount)
  end
  def get_value(index : Int32, pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_value.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(index, pvalue)
  end
  def reset(count : Int32) : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(Int32, HRESULT)).call(count)
  end
  def set_value(index : Int32, value : Int32) : HRESULT
    @lpVtbl.value.set_value.unsafe_as(Proc(Int32, Int32, HRESULT)).call(index, value)
  end
  def encode(pstrbinary : UInt8**) : HRESULT
    @lpVtbl.value.encode.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrbinary)
  end
end
struct LibWin32::ICertEncodeLongArray2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def decode(strbinary : UInt8*) : HRESULT
    @lpVtbl.value.decode.unsafe_as(Proc(UInt8*, HRESULT)).call(strbinary)
  end
  def get_count(pcount : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(pcount)
  end
  def get_value(index : Int32, pvalue : Int32*) : HRESULT
    @lpVtbl.value.get_value.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(index, pvalue)
  end
  def reset(count : Int32) : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(Int32, HRESULT)).call(count)
  end
  def set_value(index : Int32, value : Int32) : HRESULT
    @lpVtbl.value.set_value.unsafe_as(Proc(Int32, Int32, HRESULT)).call(index, value)
  end
  def encode(pstrbinary : UInt8**) : HRESULT
    @lpVtbl.value.encode.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrbinary)
  end
  def decode_blob(strencodeddata : UInt8*, encoding : EncodingType) : HRESULT
    @lpVtbl.value.decode_blob.unsafe_as(Proc(UInt8*, EncodingType, HRESULT)).call(strencodeddata, encoding)
  end
  def encode_blob(encoding : EncodingType, pstrencodeddata : UInt8**) : HRESULT
    @lpVtbl.value.encode_blob.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pstrencodeddata)
  end
end
struct LibWin32::ICertEncodeDateArray
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def decode(strbinary : UInt8*) : HRESULT
    @lpVtbl.value.decode.unsafe_as(Proc(UInt8*, HRESULT)).call(strbinary)
  end
  def get_count(pcount : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(pcount)
  end
  def get_value(index : Int32, pvalue : Float64*) : HRESULT
    @lpVtbl.value.get_value.unsafe_as(Proc(Int32, Float64*, HRESULT)).call(index, pvalue)
  end
  def reset(count : Int32) : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(Int32, HRESULT)).call(count)
  end
  def set_value(index : Int32, value : Float64) : HRESULT
    @lpVtbl.value.set_value.unsafe_as(Proc(Int32, Float64, HRESULT)).call(index, value)
  end
  def encode(pstrbinary : UInt8**) : HRESULT
    @lpVtbl.value.encode.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrbinary)
  end
end
struct LibWin32::ICertEncodeDateArray2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def decode(strbinary : UInt8*) : HRESULT
    @lpVtbl.value.decode.unsafe_as(Proc(UInt8*, HRESULT)).call(strbinary)
  end
  def get_count(pcount : Int32*) : HRESULT
    @lpVtbl.value.get_count.unsafe_as(Proc(Int32*, HRESULT)).call(pcount)
  end
  def get_value(index : Int32, pvalue : Float64*) : HRESULT
    @lpVtbl.value.get_value.unsafe_as(Proc(Int32, Float64*, HRESULT)).call(index, pvalue)
  end
  def reset(count : Int32) : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(Int32, HRESULT)).call(count)
  end
  def set_value(index : Int32, value : Float64) : HRESULT
    @lpVtbl.value.set_value.unsafe_as(Proc(Int32, Float64, HRESULT)).call(index, value)
  end
  def encode(pstrbinary : UInt8**) : HRESULT
    @lpVtbl.value.encode.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrbinary)
  end
  def decode_blob(strencodeddata : UInt8*, encoding : EncodingType) : HRESULT
    @lpVtbl.value.decode_blob.unsafe_as(Proc(UInt8*, EncodingType, HRESULT)).call(strencodeddata, encoding)
  end
  def encode_blob(encoding : EncodingType, pstrencodeddata : UInt8**) : HRESULT
    @lpVtbl.value.encode_blob.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pstrencodeddata)
  end
end
struct LibWin32::ICertEncodeCRLDistInfo
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def decode(strbinary : UInt8*) : HRESULT
    @lpVtbl.value.decode.unsafe_as(Proc(UInt8*, HRESULT)).call(strbinary)
  end
  def get_dist_point_count(pdistpointcount : Int32*) : HRESULT
    @lpVtbl.value.get_dist_point_count.unsafe_as(Proc(Int32*, HRESULT)).call(pdistpointcount)
  end
  def get_name_count(distpointindex : Int32, pnamecount : Int32*) : HRESULT
    @lpVtbl.value.get_name_count.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(distpointindex, pnamecount)
  end
  def get_name_choice(distpointindex : Int32, nameindex : Int32, pnamechoice : Int32*) : HRESULT
    @lpVtbl.value.get_name_choice.unsafe_as(Proc(Int32, Int32, Int32*, HRESULT)).call(distpointindex, nameindex, pnamechoice)
  end
  def get_name(distpointindex : Int32, nameindex : Int32, pstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(Int32, Int32, UInt8**, HRESULT)).call(distpointindex, nameindex, pstrname)
  end
  def reset(distpointcount : Int32) : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(Int32, HRESULT)).call(distpointcount)
  end
  def set_name_count(distpointindex : Int32, namecount : Int32) : HRESULT
    @lpVtbl.value.set_name_count.unsafe_as(Proc(Int32, Int32, HRESULT)).call(distpointindex, namecount)
  end
  def set_name_entry(distpointindex : Int32, nameindex : Int32, namechoice : CERT_ALT_NAME, strname : UInt8*) : HRESULT
    @lpVtbl.value.set_name_entry.unsafe_as(Proc(Int32, Int32, CERT_ALT_NAME, UInt8*, HRESULT)).call(distpointindex, nameindex, namechoice, strname)
  end
  def encode(pstrbinary : UInt8**) : HRESULT
    @lpVtbl.value.encode.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrbinary)
  end
end
struct LibWin32::ICertEncodeCRLDistInfo2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def decode(strbinary : UInt8*) : HRESULT
    @lpVtbl.value.decode.unsafe_as(Proc(UInt8*, HRESULT)).call(strbinary)
  end
  def get_dist_point_count(pdistpointcount : Int32*) : HRESULT
    @lpVtbl.value.get_dist_point_count.unsafe_as(Proc(Int32*, HRESULT)).call(pdistpointcount)
  end
  def get_name_count(distpointindex : Int32, pnamecount : Int32*) : HRESULT
    @lpVtbl.value.get_name_count.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(distpointindex, pnamecount)
  end
  def get_name_choice(distpointindex : Int32, nameindex : Int32, pnamechoice : Int32*) : HRESULT
    @lpVtbl.value.get_name_choice.unsafe_as(Proc(Int32, Int32, Int32*, HRESULT)).call(distpointindex, nameindex, pnamechoice)
  end
  def get_name(distpointindex : Int32, nameindex : Int32, pstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(Int32, Int32, UInt8**, HRESULT)).call(distpointindex, nameindex, pstrname)
  end
  def reset(distpointcount : Int32) : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(Int32, HRESULT)).call(distpointcount)
  end
  def set_name_count(distpointindex : Int32, namecount : Int32) : HRESULT
    @lpVtbl.value.set_name_count.unsafe_as(Proc(Int32, Int32, HRESULT)).call(distpointindex, namecount)
  end
  def set_name_entry(distpointindex : Int32, nameindex : Int32, namechoice : CERT_ALT_NAME, strname : UInt8*) : HRESULT
    @lpVtbl.value.set_name_entry.unsafe_as(Proc(Int32, Int32, CERT_ALT_NAME, UInt8*, HRESULT)).call(distpointindex, nameindex, namechoice, strname)
  end
  def encode(pstrbinary : UInt8**) : HRESULT
    @lpVtbl.value.encode.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrbinary)
  end
  def decode_blob(strencodeddata : UInt8*, encoding : EncodingType) : HRESULT
    @lpVtbl.value.decode_blob.unsafe_as(Proc(UInt8*, EncodingType, HRESULT)).call(strencodeddata, encoding)
  end
  def encode_blob(encoding : EncodingType, pstrencodeddata : UInt8**) : HRESULT
    @lpVtbl.value.encode_blob.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pstrencodeddata)
  end
end
struct LibWin32::ICertEncodeAltName
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def decode(strbinary : UInt8*) : HRESULT
    @lpVtbl.value.decode.unsafe_as(Proc(UInt8*, HRESULT)).call(strbinary)
  end
  def get_name_count(pnamecount : Int32*) : HRESULT
    @lpVtbl.value.get_name_count.unsafe_as(Proc(Int32*, HRESULT)).call(pnamecount)
  end
  def get_name_choice(nameindex : Int32, pnamechoice : Int32*) : HRESULT
    @lpVtbl.value.get_name_choice.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(nameindex, pnamechoice)
  end
  def get_name(nameindex : Int32, pstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(Int32, UInt8**, HRESULT)).call(nameindex, pstrname)
  end
  def reset(namecount : Int32) : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(Int32, HRESULT)).call(namecount)
  end
  def set_name_entry(nameindex : Int32, namechoice : CERT_ALT_NAME, strname : UInt8*) : HRESULT
    @lpVtbl.value.set_name_entry.unsafe_as(Proc(Int32, CERT_ALT_NAME, UInt8*, HRESULT)).call(nameindex, namechoice, strname)
  end
  def encode(pstrbinary : UInt8**) : HRESULT
    @lpVtbl.value.encode.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrbinary)
  end
end
struct LibWin32::ICertEncodeAltName2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def decode(strbinary : UInt8*) : HRESULT
    @lpVtbl.value.decode.unsafe_as(Proc(UInt8*, HRESULT)).call(strbinary)
  end
  def get_name_count(pnamecount : Int32*) : HRESULT
    @lpVtbl.value.get_name_count.unsafe_as(Proc(Int32*, HRESULT)).call(pnamecount)
  end
  def get_name_choice(nameindex : Int32, pnamechoice : Int32*) : HRESULT
    @lpVtbl.value.get_name_choice.unsafe_as(Proc(Int32, Int32*, HRESULT)).call(nameindex, pnamechoice)
  end
  def get_name(nameindex : Int32, pstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.unsafe_as(Proc(Int32, UInt8**, HRESULT)).call(nameindex, pstrname)
  end
  def reset(namecount : Int32) : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(Int32, HRESULT)).call(namecount)
  end
  def set_name_entry(nameindex : Int32, namechoice : CERT_ALT_NAME, strname : UInt8*) : HRESULT
    @lpVtbl.value.set_name_entry.unsafe_as(Proc(Int32, CERT_ALT_NAME, UInt8*, HRESULT)).call(nameindex, namechoice, strname)
  end
  def encode(pstrbinary : UInt8**) : HRESULT
    @lpVtbl.value.encode.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrbinary)
  end
  def decode_blob(strencodeddata : UInt8*, encoding : EncodingType) : HRESULT
    @lpVtbl.value.decode_blob.unsafe_as(Proc(UInt8*, EncodingType, HRESULT)).call(strencodeddata, encoding)
  end
  def encode_blob(encoding : EncodingType, pstrencodeddata : UInt8**) : HRESULT
    @lpVtbl.value.encode_blob.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pstrencodeddata)
  end
  def get_name_blob(nameindex : Int32, encoding : EncodingType, pstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_name_blob.unsafe_as(Proc(Int32, EncodingType, UInt8**, HRESULT)).call(nameindex, encoding, pstrname)
  end
  def set_name_entry_blob(nameindex : Int32, namechoice : Int32, strname : UInt8*, encoding : EncodingType) : HRESULT
    @lpVtbl.value.set_name_entry_blob.unsafe_as(Proc(Int32, Int32, UInt8*, EncodingType, HRESULT)).call(nameindex, namechoice, strname, encoding)
  end
end
struct LibWin32::ICertEncodeBitString
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def decode(strbinary : UInt8*) : HRESULT
    @lpVtbl.value.decode.unsafe_as(Proc(UInt8*, HRESULT)).call(strbinary)
  end
  def get_bit_count(pbitcount : Int32*) : HRESULT
    @lpVtbl.value.get_bit_count.unsafe_as(Proc(Int32*, HRESULT)).call(pbitcount)
  end
  def get_bit_string(pstrbitstring : UInt8**) : HRESULT
    @lpVtbl.value.get_bit_string.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrbitstring)
  end
  def encode(bitcount : Int32, strbitstring : UInt8*, pstrbinary : UInt8**) : HRESULT
    @lpVtbl.value.encode.unsafe_as(Proc(Int32, UInt8*, UInt8**, HRESULT)).call(bitcount, strbitstring, pstrbinary)
  end
end
struct LibWin32::ICertEncodeBitString2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def decode(strbinary : UInt8*) : HRESULT
    @lpVtbl.value.decode.unsafe_as(Proc(UInt8*, HRESULT)).call(strbinary)
  end
  def get_bit_count(pbitcount : Int32*) : HRESULT
    @lpVtbl.value.get_bit_count.unsafe_as(Proc(Int32*, HRESULT)).call(pbitcount)
  end
  def get_bit_string(pstrbitstring : UInt8**) : HRESULT
    @lpVtbl.value.get_bit_string.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrbitstring)
  end
  def encode(bitcount : Int32, strbitstring : UInt8*, pstrbinary : UInt8**) : HRESULT
    @lpVtbl.value.encode.unsafe_as(Proc(Int32, UInt8*, UInt8**, HRESULT)).call(bitcount, strbitstring, pstrbinary)
  end
  def decode_blob(strencodeddata : UInt8*, encoding : EncodingType) : HRESULT
    @lpVtbl.value.decode_blob.unsafe_as(Proc(UInt8*, EncodingType, HRESULT)).call(strencodeddata, encoding)
  end
  def encode_blob(bitcount : Int32, strbitstring : UInt8*, encodingin : EncodingType, encoding : EncodingType, pstrencodeddata : UInt8**) : HRESULT
    @lpVtbl.value.encode_blob.unsafe_as(Proc(Int32, UInt8*, EncodingType, EncodingType, UInt8**, HRESULT)).call(bitcount, strbitstring, encodingin, encoding, pstrencodeddata)
  end
  def get_bit_string_blob(encoding : EncodingType, pstrbitstring : UInt8**) : HRESULT
    @lpVtbl.value.get_bit_string_blob.unsafe_as(Proc(EncodingType, UInt8**, HRESULT)).call(encoding, pstrbitstring)
  end
end
struct LibWin32::ICertExit
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(strconfig : UInt8*, peventmask : CERT_EXIT_EVENT_MASK*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(UInt8*, CERT_EXIT_EVENT_MASK*, HRESULT)).call(strconfig, peventmask)
  end
  def notify(exitevent : Int32, context : Int32) : HRESULT
    @lpVtbl.value.notify.unsafe_as(Proc(Int32, Int32, HRESULT)).call(exitevent, context)
  end
  def get_description(pstrdescription : UInt8**) : HRESULT
    @lpVtbl.value.get_description.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrdescription)
  end
end
struct LibWin32::ICertExit2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def initialize(strconfig : UInt8*, peventmask : CERT_EXIT_EVENT_MASK*) : HRESULT
    @lpVtbl.value.initialize.unsafe_as(Proc(UInt8*, CERT_EXIT_EVENT_MASK*, HRESULT)).call(strconfig, peventmask)
  end
  def notify(exitevent : Int32, context : Int32) : HRESULT
    @lpVtbl.value.notify.unsafe_as(Proc(Int32, Int32, HRESULT)).call(exitevent, context)
  end
  def get_description(pstrdescription : UInt8**) : HRESULT
    @lpVtbl.value.get_description.unsafe_as(Proc(UInt8**, HRESULT)).call(pstrdescription)
  end
  def get_manage_module(ppmanagemodule : ICertManageModule*) : HRESULT
    @lpVtbl.value.get_manage_module.unsafe_as(Proc(ICertManageModule*, HRESULT)).call(ppmanagemodule)
  end
end
struct LibWin32::ICEnroll
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def create_file_pkcs10(dnname : UInt8*, usage : UInt8*, wszpkcs10filename : UInt8*) : HRESULT
    @lpVtbl.value.create_file_pkcs10.unsafe_as(Proc(UInt8*, UInt8*, UInt8*, HRESULT)).call(dnname, usage, wszpkcs10filename)
  end
  def accept_file_pkcs7(wszpkcs7filename : UInt8*) : HRESULT
    @lpVtbl.value.accept_file_pkcs7.unsafe_as(Proc(UInt8*, HRESULT)).call(wszpkcs7filename)
  end
  def create_pkcs10(dnname : UInt8*, usage : UInt8*, ppkcs10 : UInt8**) : HRESULT
    @lpVtbl.value.create_pkcs10.unsafe_as(Proc(UInt8*, UInt8*, UInt8**, HRESULT)).call(dnname, usage, ppkcs10)
  end
  def accept_pkcs7(pkcs7 : UInt8*) : HRESULT
    @lpVtbl.value.accept_pkcs7.unsafe_as(Proc(UInt8*, HRESULT)).call(pkcs7)
  end
  def get_cert_from_pkcs7(wszpkcs7 : UInt8*, pbstrcert : UInt8**) : HRESULT
    @lpVtbl.value.get_cert_from_pkcs7.unsafe_as(Proc(UInt8*, UInt8**, HRESULT)).call(wszpkcs7, pbstrcert)
  end
  def enum_providers(dwindex : Int32, dwflags : Int32, pbstrprovname : UInt8**) : HRESULT
    @lpVtbl.value.enum_providers.unsafe_as(Proc(Int32, Int32, UInt8**, HRESULT)).call(dwindex, dwflags, pbstrprovname)
  end
  def enum_containers(dwindex : Int32, pbstr : UInt8**) : HRESULT
    @lpVtbl.value.enum_containers.unsafe_as(Proc(Int32, UInt8**, HRESULT)).call(dwindex, pbstr)
  end
  def free_request_info(pkcs7orpkcs10 : UInt8*) : HRESULT
    @lpVtbl.value.free_request_info.unsafe_as(Proc(UInt8*, HRESULT)).call(pkcs7orpkcs10)
  end
  def get_my_store_name(pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_my_store_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrname)
  end
  def put_my_store_name(bstrname : UInt8*) : HRESULT
    @lpVtbl.value.put_my_store_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrname)
  end
  def get_my_store_type(pbstrtype : UInt8**) : HRESULT
    @lpVtbl.value.get_my_store_type.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrtype)
  end
  def put_my_store_type(bstrtype : UInt8*) : HRESULT
    @lpVtbl.value.put_my_store_type.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrtype)
  end
  def get_my_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_my_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_my_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_my_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_ca_store_name(pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_ca_store_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrname)
  end
  def put_ca_store_name(bstrname : UInt8*) : HRESULT
    @lpVtbl.value.put_ca_store_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrname)
  end
  def get_ca_store_type(pbstrtype : UInt8**) : HRESULT
    @lpVtbl.value.get_ca_store_type.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrtype)
  end
  def put_ca_store_type(bstrtype : UInt8*) : HRESULT
    @lpVtbl.value.put_ca_store_type.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrtype)
  end
  def get_ca_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_ca_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_ca_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_ca_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_root_store_name(pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_root_store_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrname)
  end
  def put_root_store_name(bstrname : UInt8*) : HRESULT
    @lpVtbl.value.put_root_store_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrname)
  end
  def get_root_store_type(pbstrtype : UInt8**) : HRESULT
    @lpVtbl.value.get_root_store_type.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrtype)
  end
  def put_root_store_type(bstrtype : UInt8*) : HRESULT
    @lpVtbl.value.put_root_store_type.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrtype)
  end
  def get_root_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_root_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_root_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_root_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_request_store_name(pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_request_store_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrname)
  end
  def put_request_store_name(bstrname : UInt8*) : HRESULT
    @lpVtbl.value.put_request_store_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrname)
  end
  def get_request_store_type(pbstrtype : UInt8**) : HRESULT
    @lpVtbl.value.get_request_store_type.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrtype)
  end
  def put_request_store_type(bstrtype : UInt8*) : HRESULT
    @lpVtbl.value.put_request_store_type.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrtype)
  end
  def get_request_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_request_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_request_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_request_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_container_name(pbstrcontainer : UInt8**) : HRESULT
    @lpVtbl.value.get_container_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrcontainer)
  end
  def put_container_name(bstrcontainer : UInt8*) : HRESULT
    @lpVtbl.value.put_container_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrcontainer)
  end
  def get_provider_name(pbstrprovider : UInt8**) : HRESULT
    @lpVtbl.value.get_provider_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrprovider)
  end
  def put_provider_name(bstrprovider : UInt8*) : HRESULT
    @lpVtbl.value.put_provider_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrprovider)
  end
  def get_provider_type(pdwtype : Int32*) : HRESULT
    @lpVtbl.value.get_provider_type.unsafe_as(Proc(Int32*, HRESULT)).call(pdwtype)
  end
  def put_provider_type(dwtype : Int32) : HRESULT
    @lpVtbl.value.put_provider_type.unsafe_as(Proc(Int32, HRESULT)).call(dwtype)
  end
  def get_key_spec(pdw : Int32*) : HRESULT
    @lpVtbl.value.get_key_spec.unsafe_as(Proc(Int32*, HRESULT)).call(pdw)
  end
  def put_key_spec(dw : Int32) : HRESULT
    @lpVtbl.value.put_key_spec.unsafe_as(Proc(Int32, HRESULT)).call(dw)
  end
  def get_provider_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_provider_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_provider_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_provider_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_use_existing_key_set(fuseexistingkeys : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_use_existing_key_set.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fuseexistingkeys)
  end
  def put_use_existing_key_set(fuseexistingkeys : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_use_existing_key_set.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fuseexistingkeys)
  end
  def get_gen_key_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_gen_key_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_gen_key_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_gen_key_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_delete_request_cert(fdelete : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_delete_request_cert.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fdelete)
  end
  def put_delete_request_cert(fdelete : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_delete_request_cert.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fdelete)
  end
  def get_write_cert_to_csp(fbool : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_write_cert_to_csp.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fbool)
  end
  def put_write_cert_to_csp(fbool : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_write_cert_to_csp.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fbool)
  end
  def get_spc_file_name(pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_spc_file_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstr)
  end
  def put_spc_file_name(bstr : UInt8*) : HRESULT
    @lpVtbl.value.put_spc_file_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstr)
  end
  def get_pvk_file_name(pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_pvk_file_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstr)
  end
  def put_pvk_file_name(bstr : UInt8*) : HRESULT
    @lpVtbl.value.put_pvk_file_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstr)
  end
  def get_hash_algorithm(pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_hash_algorithm.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstr)
  end
  def put_hash_algorithm(bstr : UInt8*) : HRESULT
    @lpVtbl.value.put_hash_algorithm.unsafe_as(Proc(UInt8*, HRESULT)).call(bstr)
  end
end
struct LibWin32::ICEnroll2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def create_file_pkcs10(dnname : UInt8*, usage : UInt8*, wszpkcs10filename : UInt8*) : HRESULT
    @lpVtbl.value.create_file_pkcs10.unsafe_as(Proc(UInt8*, UInt8*, UInt8*, HRESULT)).call(dnname, usage, wszpkcs10filename)
  end
  def accept_file_pkcs7(wszpkcs7filename : UInt8*) : HRESULT
    @lpVtbl.value.accept_file_pkcs7.unsafe_as(Proc(UInt8*, HRESULT)).call(wszpkcs7filename)
  end
  def create_pkcs10(dnname : UInt8*, usage : UInt8*, ppkcs10 : UInt8**) : HRESULT
    @lpVtbl.value.create_pkcs10.unsafe_as(Proc(UInt8*, UInt8*, UInt8**, HRESULT)).call(dnname, usage, ppkcs10)
  end
  def accept_pkcs7(pkcs7 : UInt8*) : HRESULT
    @lpVtbl.value.accept_pkcs7.unsafe_as(Proc(UInt8*, HRESULT)).call(pkcs7)
  end
  def get_cert_from_pkcs7(wszpkcs7 : UInt8*, pbstrcert : UInt8**) : HRESULT
    @lpVtbl.value.get_cert_from_pkcs7.unsafe_as(Proc(UInt8*, UInt8**, HRESULT)).call(wszpkcs7, pbstrcert)
  end
  def enum_providers(dwindex : Int32, dwflags : Int32, pbstrprovname : UInt8**) : HRESULT
    @lpVtbl.value.enum_providers.unsafe_as(Proc(Int32, Int32, UInt8**, HRESULT)).call(dwindex, dwflags, pbstrprovname)
  end
  def enum_containers(dwindex : Int32, pbstr : UInt8**) : HRESULT
    @lpVtbl.value.enum_containers.unsafe_as(Proc(Int32, UInt8**, HRESULT)).call(dwindex, pbstr)
  end
  def free_request_info(pkcs7orpkcs10 : UInt8*) : HRESULT
    @lpVtbl.value.free_request_info.unsafe_as(Proc(UInt8*, HRESULT)).call(pkcs7orpkcs10)
  end
  def get_my_store_name(pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_my_store_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrname)
  end
  def put_my_store_name(bstrname : UInt8*) : HRESULT
    @lpVtbl.value.put_my_store_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrname)
  end
  def get_my_store_type(pbstrtype : UInt8**) : HRESULT
    @lpVtbl.value.get_my_store_type.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrtype)
  end
  def put_my_store_type(bstrtype : UInt8*) : HRESULT
    @lpVtbl.value.put_my_store_type.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrtype)
  end
  def get_my_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_my_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_my_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_my_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_ca_store_name(pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_ca_store_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrname)
  end
  def put_ca_store_name(bstrname : UInt8*) : HRESULT
    @lpVtbl.value.put_ca_store_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrname)
  end
  def get_ca_store_type(pbstrtype : UInt8**) : HRESULT
    @lpVtbl.value.get_ca_store_type.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrtype)
  end
  def put_ca_store_type(bstrtype : UInt8*) : HRESULT
    @lpVtbl.value.put_ca_store_type.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrtype)
  end
  def get_ca_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_ca_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_ca_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_ca_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_root_store_name(pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_root_store_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrname)
  end
  def put_root_store_name(bstrname : UInt8*) : HRESULT
    @lpVtbl.value.put_root_store_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrname)
  end
  def get_root_store_type(pbstrtype : UInt8**) : HRESULT
    @lpVtbl.value.get_root_store_type.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrtype)
  end
  def put_root_store_type(bstrtype : UInt8*) : HRESULT
    @lpVtbl.value.put_root_store_type.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrtype)
  end
  def get_root_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_root_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_root_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_root_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_request_store_name(pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_request_store_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrname)
  end
  def put_request_store_name(bstrname : UInt8*) : HRESULT
    @lpVtbl.value.put_request_store_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrname)
  end
  def get_request_store_type(pbstrtype : UInt8**) : HRESULT
    @lpVtbl.value.get_request_store_type.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrtype)
  end
  def put_request_store_type(bstrtype : UInt8*) : HRESULT
    @lpVtbl.value.put_request_store_type.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrtype)
  end
  def get_request_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_request_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_request_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_request_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_container_name(pbstrcontainer : UInt8**) : HRESULT
    @lpVtbl.value.get_container_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrcontainer)
  end
  def put_container_name(bstrcontainer : UInt8*) : HRESULT
    @lpVtbl.value.put_container_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrcontainer)
  end
  def get_provider_name(pbstrprovider : UInt8**) : HRESULT
    @lpVtbl.value.get_provider_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrprovider)
  end
  def put_provider_name(bstrprovider : UInt8*) : HRESULT
    @lpVtbl.value.put_provider_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrprovider)
  end
  def get_provider_type(pdwtype : Int32*) : HRESULT
    @lpVtbl.value.get_provider_type.unsafe_as(Proc(Int32*, HRESULT)).call(pdwtype)
  end
  def put_provider_type(dwtype : Int32) : HRESULT
    @lpVtbl.value.put_provider_type.unsafe_as(Proc(Int32, HRESULT)).call(dwtype)
  end
  def get_key_spec(pdw : Int32*) : HRESULT
    @lpVtbl.value.get_key_spec.unsafe_as(Proc(Int32*, HRESULT)).call(pdw)
  end
  def put_key_spec(dw : Int32) : HRESULT
    @lpVtbl.value.put_key_spec.unsafe_as(Proc(Int32, HRESULT)).call(dw)
  end
  def get_provider_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_provider_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_provider_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_provider_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_use_existing_key_set(fuseexistingkeys : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_use_existing_key_set.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fuseexistingkeys)
  end
  def put_use_existing_key_set(fuseexistingkeys : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_use_existing_key_set.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fuseexistingkeys)
  end
  def get_gen_key_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_gen_key_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_gen_key_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_gen_key_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_delete_request_cert(fdelete : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_delete_request_cert.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fdelete)
  end
  def put_delete_request_cert(fdelete : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_delete_request_cert.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fdelete)
  end
  def get_write_cert_to_csp(fbool : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_write_cert_to_csp.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fbool)
  end
  def put_write_cert_to_csp(fbool : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_write_cert_to_csp.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fbool)
  end
  def get_spc_file_name(pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_spc_file_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstr)
  end
  def put_spc_file_name(bstr : UInt8*) : HRESULT
    @lpVtbl.value.put_spc_file_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstr)
  end
  def get_pvk_file_name(pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_pvk_file_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstr)
  end
  def put_pvk_file_name(bstr : UInt8*) : HRESULT
    @lpVtbl.value.put_pvk_file_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstr)
  end
  def get_hash_algorithm(pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_hash_algorithm.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstr)
  end
  def put_hash_algorithm(bstr : UInt8*) : HRESULT
    @lpVtbl.value.put_hash_algorithm.unsafe_as(Proc(UInt8*, HRESULT)).call(bstr)
  end
  def add_cert_type_to_request(certtype : UInt8*) : HRESULT
    @lpVtbl.value.add_cert_type_to_request.unsafe_as(Proc(UInt8*, HRESULT)).call(certtype)
  end
  def add_name_value_pair_to_signature(name : UInt8*, value : UInt8*) : HRESULT
    @lpVtbl.value.add_name_value_pair_to_signature.unsafe_as(Proc(UInt8*, UInt8*, HRESULT)).call(name, value)
  end
  def get_write_cert_to_user_ds(fbool : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_write_cert_to_user_ds.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fbool)
  end
  def put_write_cert_to_user_ds(fbool : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_write_cert_to_user_ds.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fbool)
  end
  def get_enable_t61_dn_encoding(fbool : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_enable_t61_dn_encoding.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fbool)
  end
  def put_enable_t61_dn_encoding(fbool : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_enable_t61_dn_encoding.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fbool)
  end
end
struct LibWin32::ICEnroll3
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def create_file_pkcs10(dnname : UInt8*, usage : UInt8*, wszpkcs10filename : UInt8*) : HRESULT
    @lpVtbl.value.create_file_pkcs10.unsafe_as(Proc(UInt8*, UInt8*, UInt8*, HRESULT)).call(dnname, usage, wszpkcs10filename)
  end
  def accept_file_pkcs7(wszpkcs7filename : UInt8*) : HRESULT
    @lpVtbl.value.accept_file_pkcs7.unsafe_as(Proc(UInt8*, HRESULT)).call(wszpkcs7filename)
  end
  def create_pkcs10(dnname : UInt8*, usage : UInt8*, ppkcs10 : UInt8**) : HRESULT
    @lpVtbl.value.create_pkcs10.unsafe_as(Proc(UInt8*, UInt8*, UInt8**, HRESULT)).call(dnname, usage, ppkcs10)
  end
  def accept_pkcs7(pkcs7 : UInt8*) : HRESULT
    @lpVtbl.value.accept_pkcs7.unsafe_as(Proc(UInt8*, HRESULT)).call(pkcs7)
  end
  def get_cert_from_pkcs7(wszpkcs7 : UInt8*, pbstrcert : UInt8**) : HRESULT
    @lpVtbl.value.get_cert_from_pkcs7.unsafe_as(Proc(UInt8*, UInt8**, HRESULT)).call(wszpkcs7, pbstrcert)
  end
  def enum_providers(dwindex : Int32, dwflags : Int32, pbstrprovname : UInt8**) : HRESULT
    @lpVtbl.value.enum_providers.unsafe_as(Proc(Int32, Int32, UInt8**, HRESULT)).call(dwindex, dwflags, pbstrprovname)
  end
  def enum_containers(dwindex : Int32, pbstr : UInt8**) : HRESULT
    @lpVtbl.value.enum_containers.unsafe_as(Proc(Int32, UInt8**, HRESULT)).call(dwindex, pbstr)
  end
  def free_request_info(pkcs7orpkcs10 : UInt8*) : HRESULT
    @lpVtbl.value.free_request_info.unsafe_as(Proc(UInt8*, HRESULT)).call(pkcs7orpkcs10)
  end
  def get_my_store_name(pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_my_store_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrname)
  end
  def put_my_store_name(bstrname : UInt8*) : HRESULT
    @lpVtbl.value.put_my_store_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrname)
  end
  def get_my_store_type(pbstrtype : UInt8**) : HRESULT
    @lpVtbl.value.get_my_store_type.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrtype)
  end
  def put_my_store_type(bstrtype : UInt8*) : HRESULT
    @lpVtbl.value.put_my_store_type.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrtype)
  end
  def get_my_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_my_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_my_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_my_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_ca_store_name(pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_ca_store_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrname)
  end
  def put_ca_store_name(bstrname : UInt8*) : HRESULT
    @lpVtbl.value.put_ca_store_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrname)
  end
  def get_ca_store_type(pbstrtype : UInt8**) : HRESULT
    @lpVtbl.value.get_ca_store_type.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrtype)
  end
  def put_ca_store_type(bstrtype : UInt8*) : HRESULT
    @lpVtbl.value.put_ca_store_type.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrtype)
  end
  def get_ca_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_ca_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_ca_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_ca_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_root_store_name(pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_root_store_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrname)
  end
  def put_root_store_name(bstrname : UInt8*) : HRESULT
    @lpVtbl.value.put_root_store_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrname)
  end
  def get_root_store_type(pbstrtype : UInt8**) : HRESULT
    @lpVtbl.value.get_root_store_type.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrtype)
  end
  def put_root_store_type(bstrtype : UInt8*) : HRESULT
    @lpVtbl.value.put_root_store_type.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrtype)
  end
  def get_root_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_root_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_root_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_root_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_request_store_name(pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_request_store_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrname)
  end
  def put_request_store_name(bstrname : UInt8*) : HRESULT
    @lpVtbl.value.put_request_store_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrname)
  end
  def get_request_store_type(pbstrtype : UInt8**) : HRESULT
    @lpVtbl.value.get_request_store_type.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrtype)
  end
  def put_request_store_type(bstrtype : UInt8*) : HRESULT
    @lpVtbl.value.put_request_store_type.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrtype)
  end
  def get_request_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_request_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_request_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_request_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_container_name(pbstrcontainer : UInt8**) : HRESULT
    @lpVtbl.value.get_container_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrcontainer)
  end
  def put_container_name(bstrcontainer : UInt8*) : HRESULT
    @lpVtbl.value.put_container_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrcontainer)
  end
  def get_provider_name(pbstrprovider : UInt8**) : HRESULT
    @lpVtbl.value.get_provider_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrprovider)
  end
  def put_provider_name(bstrprovider : UInt8*) : HRESULT
    @lpVtbl.value.put_provider_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrprovider)
  end
  def get_provider_type(pdwtype : Int32*) : HRESULT
    @lpVtbl.value.get_provider_type.unsafe_as(Proc(Int32*, HRESULT)).call(pdwtype)
  end
  def put_provider_type(dwtype : Int32) : HRESULT
    @lpVtbl.value.put_provider_type.unsafe_as(Proc(Int32, HRESULT)).call(dwtype)
  end
  def get_key_spec(pdw : Int32*) : HRESULT
    @lpVtbl.value.get_key_spec.unsafe_as(Proc(Int32*, HRESULT)).call(pdw)
  end
  def put_key_spec(dw : Int32) : HRESULT
    @lpVtbl.value.put_key_spec.unsafe_as(Proc(Int32, HRESULT)).call(dw)
  end
  def get_provider_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_provider_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_provider_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_provider_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_use_existing_key_set(fuseexistingkeys : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_use_existing_key_set.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fuseexistingkeys)
  end
  def put_use_existing_key_set(fuseexistingkeys : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_use_existing_key_set.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fuseexistingkeys)
  end
  def get_gen_key_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_gen_key_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_gen_key_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_gen_key_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_delete_request_cert(fdelete : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_delete_request_cert.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fdelete)
  end
  def put_delete_request_cert(fdelete : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_delete_request_cert.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fdelete)
  end
  def get_write_cert_to_csp(fbool : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_write_cert_to_csp.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fbool)
  end
  def put_write_cert_to_csp(fbool : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_write_cert_to_csp.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fbool)
  end
  def get_spc_file_name(pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_spc_file_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstr)
  end
  def put_spc_file_name(bstr : UInt8*) : HRESULT
    @lpVtbl.value.put_spc_file_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstr)
  end
  def get_pvk_file_name(pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_pvk_file_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstr)
  end
  def put_pvk_file_name(bstr : UInt8*) : HRESULT
    @lpVtbl.value.put_pvk_file_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstr)
  end
  def get_hash_algorithm(pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_hash_algorithm.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstr)
  end
  def put_hash_algorithm(bstr : UInt8*) : HRESULT
    @lpVtbl.value.put_hash_algorithm.unsafe_as(Proc(UInt8*, HRESULT)).call(bstr)
  end
  def add_cert_type_to_request(certtype : UInt8*) : HRESULT
    @lpVtbl.value.add_cert_type_to_request.unsafe_as(Proc(UInt8*, HRESULT)).call(certtype)
  end
  def add_name_value_pair_to_signature(name : UInt8*, value : UInt8*) : HRESULT
    @lpVtbl.value.add_name_value_pair_to_signature.unsafe_as(Proc(UInt8*, UInt8*, HRESULT)).call(name, value)
  end
  def get_write_cert_to_user_ds(fbool : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_write_cert_to_user_ds.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fbool)
  end
  def put_write_cert_to_user_ds(fbool : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_write_cert_to_user_ds.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fbool)
  end
  def get_enable_t61_dn_encoding(fbool : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_enable_t61_dn_encoding.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fbool)
  end
  def put_enable_t61_dn_encoding(fbool : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_enable_t61_dn_encoding.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fbool)
  end
  def install_pkcs7(pkcs7 : UInt8*) : HRESULT
    @lpVtbl.value.install_pkcs7.unsafe_as(Proc(UInt8*, HRESULT)).call(pkcs7)
  end
  def reset : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(HRESULT)).call
  end
  def get_supported_key_spec(pdwkeyspec : Int32*) : HRESULT
    @lpVtbl.value.get_supported_key_spec.unsafe_as(Proc(Int32*, HRESULT)).call(pdwkeyspec)
  end
  def get_key_len(fmin : LibC::BOOL, fexchange : LibC::BOOL, pdwkeysize : Int32*) : HRESULT
    @lpVtbl.value.get_key_len.unsafe_as(Proc(LibC::BOOL, LibC::BOOL, Int32*, HRESULT)).call(fmin, fexchange, pdwkeysize)
  end
  def enum_algs(dwindex : Int32, algclass : Int32, pdwalgid : Int32*) : HRESULT
    @lpVtbl.value.enum_algs.unsafe_as(Proc(Int32, Int32, Int32*, HRESULT)).call(dwindex, algclass, pdwalgid)
  end
  def get_alg_name(algid : Int32, pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_alg_name.unsafe_as(Proc(Int32, UInt8**, HRESULT)).call(algid, pbstr)
  end
  def put_reuse_hardware_key_if_unable_to_gen_new(freusehardwarekeyifunabletogennew : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_reuse_hardware_key_if_unable_to_gen_new.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(freusehardwarekeyifunabletogennew)
  end
  def get_reuse_hardware_key_if_unable_to_gen_new(freusehardwarekeyifunabletogennew : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_reuse_hardware_key_if_unable_to_gen_new.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(freusehardwarekeyifunabletogennew)
  end
  def put_hash_alg_id(hashalgid : Int32) : HRESULT
    @lpVtbl.value.put_hash_alg_id.unsafe_as(Proc(Int32, HRESULT)).call(hashalgid)
  end
  def get_hash_alg_id(hashalgid : Int32*) : HRESULT
    @lpVtbl.value.get_hash_alg_id.unsafe_as(Proc(Int32*, HRESULT)).call(hashalgid)
  end
  def put_limit_exchange_key_to_encipherment(flimitexchangekeytoencipherment : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_limit_exchange_key_to_encipherment.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(flimitexchangekeytoencipherment)
  end
  def get_limit_exchange_key_to_encipherment(flimitexchangekeytoencipherment : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_limit_exchange_key_to_encipherment.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(flimitexchangekeytoencipherment)
  end
  def put_enable_smime_capabilities(fenablesmimecapabilities : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_enable_smime_capabilities.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fenablesmimecapabilities)
  end
  def get_enable_smime_capabilities(fenablesmimecapabilities : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_enable_smime_capabilities.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fenablesmimecapabilities)
  end
end
struct LibWin32::ICEnroll4
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def get_type_info_count(pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.unsafe_as(Proc(UInt32*, HRESULT)).call(pctinfo)
  end
  def get_type_info(itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.unsafe_as(Proc(UInt32, UInt32, ITypeInfo*, HRESULT)).call(itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.unsafe_as(Proc(Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)).call(riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.unsafe_as(Proc(Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)).call(dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def create_file_pkcs10(dnname : UInt8*, usage : UInt8*, wszpkcs10filename : UInt8*) : HRESULT
    @lpVtbl.value.create_file_pkcs10.unsafe_as(Proc(UInt8*, UInt8*, UInt8*, HRESULT)).call(dnname, usage, wszpkcs10filename)
  end
  def accept_file_pkcs7(wszpkcs7filename : UInt8*) : HRESULT
    @lpVtbl.value.accept_file_pkcs7.unsafe_as(Proc(UInt8*, HRESULT)).call(wszpkcs7filename)
  end
  def create_pkcs10(dnname : UInt8*, usage : UInt8*, ppkcs10 : UInt8**) : HRESULT
    @lpVtbl.value.create_pkcs10.unsafe_as(Proc(UInt8*, UInt8*, UInt8**, HRESULT)).call(dnname, usage, ppkcs10)
  end
  def accept_pkcs7(pkcs7 : UInt8*) : HRESULT
    @lpVtbl.value.accept_pkcs7.unsafe_as(Proc(UInt8*, HRESULT)).call(pkcs7)
  end
  def get_cert_from_pkcs7(wszpkcs7 : UInt8*, pbstrcert : UInt8**) : HRESULT
    @lpVtbl.value.get_cert_from_pkcs7.unsafe_as(Proc(UInt8*, UInt8**, HRESULT)).call(wszpkcs7, pbstrcert)
  end
  def enum_providers(dwindex : Int32, dwflags : Int32, pbstrprovname : UInt8**) : HRESULT
    @lpVtbl.value.enum_providers.unsafe_as(Proc(Int32, Int32, UInt8**, HRESULT)).call(dwindex, dwflags, pbstrprovname)
  end
  def enum_containers(dwindex : Int32, pbstr : UInt8**) : HRESULT
    @lpVtbl.value.enum_containers.unsafe_as(Proc(Int32, UInt8**, HRESULT)).call(dwindex, pbstr)
  end
  def free_request_info(pkcs7orpkcs10 : UInt8*) : HRESULT
    @lpVtbl.value.free_request_info.unsafe_as(Proc(UInt8*, HRESULT)).call(pkcs7orpkcs10)
  end
  def get_my_store_name(pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_my_store_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrname)
  end
  def put_my_store_name(bstrname : UInt8*) : HRESULT
    @lpVtbl.value.put_my_store_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrname)
  end
  def get_my_store_type(pbstrtype : UInt8**) : HRESULT
    @lpVtbl.value.get_my_store_type.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrtype)
  end
  def put_my_store_type(bstrtype : UInt8*) : HRESULT
    @lpVtbl.value.put_my_store_type.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrtype)
  end
  def get_my_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_my_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_my_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_my_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_ca_store_name(pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_ca_store_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrname)
  end
  def put_ca_store_name(bstrname : UInt8*) : HRESULT
    @lpVtbl.value.put_ca_store_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrname)
  end
  def get_ca_store_type(pbstrtype : UInt8**) : HRESULT
    @lpVtbl.value.get_ca_store_type.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrtype)
  end
  def put_ca_store_type(bstrtype : UInt8*) : HRESULT
    @lpVtbl.value.put_ca_store_type.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrtype)
  end
  def get_ca_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_ca_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_ca_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_ca_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_root_store_name(pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_root_store_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrname)
  end
  def put_root_store_name(bstrname : UInt8*) : HRESULT
    @lpVtbl.value.put_root_store_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrname)
  end
  def get_root_store_type(pbstrtype : UInt8**) : HRESULT
    @lpVtbl.value.get_root_store_type.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrtype)
  end
  def put_root_store_type(bstrtype : UInt8*) : HRESULT
    @lpVtbl.value.put_root_store_type.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrtype)
  end
  def get_root_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_root_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_root_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_root_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_request_store_name(pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_request_store_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrname)
  end
  def put_request_store_name(bstrname : UInt8*) : HRESULT
    @lpVtbl.value.put_request_store_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrname)
  end
  def get_request_store_type(pbstrtype : UInt8**) : HRESULT
    @lpVtbl.value.get_request_store_type.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrtype)
  end
  def put_request_store_type(bstrtype : UInt8*) : HRESULT
    @lpVtbl.value.put_request_store_type.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrtype)
  end
  def get_request_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_request_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_request_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_request_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_container_name(pbstrcontainer : UInt8**) : HRESULT
    @lpVtbl.value.get_container_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrcontainer)
  end
  def put_container_name(bstrcontainer : UInt8*) : HRESULT
    @lpVtbl.value.put_container_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrcontainer)
  end
  def get_provider_name(pbstrprovider : UInt8**) : HRESULT
    @lpVtbl.value.get_provider_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrprovider)
  end
  def put_provider_name(bstrprovider : UInt8*) : HRESULT
    @lpVtbl.value.put_provider_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrprovider)
  end
  def get_provider_type(pdwtype : Int32*) : HRESULT
    @lpVtbl.value.get_provider_type.unsafe_as(Proc(Int32*, HRESULT)).call(pdwtype)
  end
  def put_provider_type(dwtype : Int32) : HRESULT
    @lpVtbl.value.put_provider_type.unsafe_as(Proc(Int32, HRESULT)).call(dwtype)
  end
  def get_key_spec(pdw : Int32*) : HRESULT
    @lpVtbl.value.get_key_spec.unsafe_as(Proc(Int32*, HRESULT)).call(pdw)
  end
  def put_key_spec(dw : Int32) : HRESULT
    @lpVtbl.value.put_key_spec.unsafe_as(Proc(Int32, HRESULT)).call(dw)
  end
  def get_provider_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_provider_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_provider_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_provider_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_use_existing_key_set(fuseexistingkeys : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_use_existing_key_set.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fuseexistingkeys)
  end
  def put_use_existing_key_set(fuseexistingkeys : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_use_existing_key_set.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fuseexistingkeys)
  end
  def get_gen_key_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_gen_key_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_gen_key_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_gen_key_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_delete_request_cert(fdelete : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_delete_request_cert.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fdelete)
  end
  def put_delete_request_cert(fdelete : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_delete_request_cert.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fdelete)
  end
  def get_write_cert_to_csp(fbool : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_write_cert_to_csp.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fbool)
  end
  def put_write_cert_to_csp(fbool : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_write_cert_to_csp.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fbool)
  end
  def get_spc_file_name(pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_spc_file_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstr)
  end
  def put_spc_file_name(bstr : UInt8*) : HRESULT
    @lpVtbl.value.put_spc_file_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstr)
  end
  def get_pvk_file_name(pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_pvk_file_name.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstr)
  end
  def put_pvk_file_name(bstr : UInt8*) : HRESULT
    @lpVtbl.value.put_pvk_file_name.unsafe_as(Proc(UInt8*, HRESULT)).call(bstr)
  end
  def get_hash_algorithm(pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_hash_algorithm.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstr)
  end
  def put_hash_algorithm(bstr : UInt8*) : HRESULT
    @lpVtbl.value.put_hash_algorithm.unsafe_as(Proc(UInt8*, HRESULT)).call(bstr)
  end
  def add_cert_type_to_request(certtype : UInt8*) : HRESULT
    @lpVtbl.value.add_cert_type_to_request.unsafe_as(Proc(UInt8*, HRESULT)).call(certtype)
  end
  def add_name_value_pair_to_signature(name : UInt8*, value : UInt8*) : HRESULT
    @lpVtbl.value.add_name_value_pair_to_signature.unsafe_as(Proc(UInt8*, UInt8*, HRESULT)).call(name, value)
  end
  def get_write_cert_to_user_ds(fbool : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_write_cert_to_user_ds.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fbool)
  end
  def put_write_cert_to_user_ds(fbool : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_write_cert_to_user_ds.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fbool)
  end
  def get_enable_t61_dn_encoding(fbool : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_enable_t61_dn_encoding.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fbool)
  end
  def put_enable_t61_dn_encoding(fbool : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_enable_t61_dn_encoding.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fbool)
  end
  def install_pkcs7(pkcs7 : UInt8*) : HRESULT
    @lpVtbl.value.install_pkcs7.unsafe_as(Proc(UInt8*, HRESULT)).call(pkcs7)
  end
  def reset : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(HRESULT)).call
  end
  def get_supported_key_spec(pdwkeyspec : Int32*) : HRESULT
    @lpVtbl.value.get_supported_key_spec.unsafe_as(Proc(Int32*, HRESULT)).call(pdwkeyspec)
  end
  def get_key_len(fmin : LibC::BOOL, fexchange : LibC::BOOL, pdwkeysize : Int32*) : HRESULT
    @lpVtbl.value.get_key_len.unsafe_as(Proc(LibC::BOOL, LibC::BOOL, Int32*, HRESULT)).call(fmin, fexchange, pdwkeysize)
  end
  def enum_algs(dwindex : Int32, algclass : Int32, pdwalgid : Int32*) : HRESULT
    @lpVtbl.value.enum_algs.unsafe_as(Proc(Int32, Int32, Int32*, HRESULT)).call(dwindex, algclass, pdwalgid)
  end
  def get_alg_name(algid : Int32, pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_alg_name.unsafe_as(Proc(Int32, UInt8**, HRESULT)).call(algid, pbstr)
  end
  def put_reuse_hardware_key_if_unable_to_gen_new(freusehardwarekeyifunabletogennew : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_reuse_hardware_key_if_unable_to_gen_new.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(freusehardwarekeyifunabletogennew)
  end
  def get_reuse_hardware_key_if_unable_to_gen_new(freusehardwarekeyifunabletogennew : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_reuse_hardware_key_if_unable_to_gen_new.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(freusehardwarekeyifunabletogennew)
  end
  def put_hash_alg_id(hashalgid : Int32) : HRESULT
    @lpVtbl.value.put_hash_alg_id.unsafe_as(Proc(Int32, HRESULT)).call(hashalgid)
  end
  def get_hash_alg_id(hashalgid : Int32*) : HRESULT
    @lpVtbl.value.get_hash_alg_id.unsafe_as(Proc(Int32*, HRESULT)).call(hashalgid)
  end
  def put_limit_exchange_key_to_encipherment(flimitexchangekeytoencipherment : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_limit_exchange_key_to_encipherment.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(flimitexchangekeytoencipherment)
  end
  def get_limit_exchange_key_to_encipherment(flimitexchangekeytoencipherment : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_limit_exchange_key_to_encipherment.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(flimitexchangekeytoencipherment)
  end
  def put_enable_smime_capabilities(fenablesmimecapabilities : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_enable_smime_capabilities.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fenablesmimecapabilities)
  end
  def get_enable_smime_capabilities(fenablesmimecapabilities : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_enable_smime_capabilities.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fenablesmimecapabilities)
  end
  def put_private_key_archive_certificate(bstrcert : UInt8*) : HRESULT
    @lpVtbl.value.put_private_key_archive_certificate.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrcert)
  end
  def get_private_key_archive_certificate(pbstrcert : UInt8**) : HRESULT
    @lpVtbl.value.get_private_key_archive_certificate.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrcert)
  end
  def put_thumb_print(bstrthumbprint : UInt8*) : HRESULT
    @lpVtbl.value.put_thumb_print.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrthumbprint)
  end
  def get_thumb_print(pbstrthumbprint : UInt8**) : HRESULT
    @lpVtbl.value.get_thumb_print.unsafe_as(Proc(UInt8**, HRESULT)).call(pbstrthumbprint)
  end
  def binary_to_string(flags : Int32, strbinary : UInt8*, pstrencoded : UInt8**) : HRESULT
    @lpVtbl.value.binary_to_string.unsafe_as(Proc(Int32, UInt8*, UInt8**, HRESULT)).call(flags, strbinary, pstrencoded)
  end
  def string_to_binary(flags : Int32, strencoded : UInt8*, pstrbinary : UInt8**) : HRESULT
    @lpVtbl.value.string_to_binary.unsafe_as(Proc(Int32, UInt8*, UInt8**, HRESULT)).call(flags, strencoded, pstrbinary)
  end
  def add_extension_to_request(flags : Int32, strname : UInt8*, strvalue : UInt8*) : HRESULT
    @lpVtbl.value.add_extension_to_request.unsafe_as(Proc(Int32, UInt8*, UInt8*, HRESULT)).call(flags, strname, strvalue)
  end
  def add_attribute_to_request(flags : Int32, strname : UInt8*, strvalue : UInt8*) : HRESULT
    @lpVtbl.value.add_attribute_to_request.unsafe_as(Proc(Int32, UInt8*, UInt8*, HRESULT)).call(flags, strname, strvalue)
  end
  def add_name_value_pair_to_request(flags : Int32, strname : UInt8*, strvalue : UInt8*) : HRESULT
    @lpVtbl.value.add_name_value_pair_to_request.unsafe_as(Proc(Int32, UInt8*, UInt8*, HRESULT)).call(flags, strname, strvalue)
  end
  def reset_extensions : HRESULT
    @lpVtbl.value.reset_extensions.unsafe_as(Proc(HRESULT)).call
  end
  def reset_attributes : HRESULT
    @lpVtbl.value.reset_attributes.unsafe_as(Proc(HRESULT)).call
  end
  def create_request(flags : CERT_CREATE_REQUEST_FLAGS, strdnname : UInt8*, usage : UInt8*, pstrrequest : UInt8**) : HRESULT
    @lpVtbl.value.create_request.unsafe_as(Proc(CERT_CREATE_REQUEST_FLAGS, UInt8*, UInt8*, UInt8**, HRESULT)).call(flags, strdnname, usage, pstrrequest)
  end
  def create_file_request(flags : CERT_CREATE_REQUEST_FLAGS, strdnname : UInt8*, strusage : UInt8*, strrequestfilename : UInt8*) : HRESULT
    @lpVtbl.value.create_file_request.unsafe_as(Proc(CERT_CREATE_REQUEST_FLAGS, UInt8*, UInt8*, UInt8*, HRESULT)).call(flags, strdnname, strusage, strrequestfilename)
  end
  def accept_response(strresponse : UInt8*) : HRESULT
    @lpVtbl.value.accept_response.unsafe_as(Proc(UInt8*, HRESULT)).call(strresponse)
  end
  def accept_file_response(strresponsefilename : UInt8*) : HRESULT
    @lpVtbl.value.accept_file_response.unsafe_as(Proc(UInt8*, HRESULT)).call(strresponsefilename)
  end
  def get_cert_from_response(strresponse : UInt8*, pstrcert : UInt8**) : HRESULT
    @lpVtbl.value.get_cert_from_response.unsafe_as(Proc(UInt8*, UInt8**, HRESULT)).call(strresponse, pstrcert)
  end
  def get_cert_from_file_response(strresponsefilename : UInt8*, pstrcert : UInt8**) : HRESULT
    @lpVtbl.value.get_cert_from_file_response.unsafe_as(Proc(UInt8*, UInt8**, HRESULT)).call(strresponsefilename, pstrcert)
  end
  def create_pfx(strpassword : UInt8*, pstrpfx : UInt8**) : HRESULT
    @lpVtbl.value.create_pfx.unsafe_as(Proc(UInt8*, UInt8**, HRESULT)).call(strpassword, pstrpfx)
  end
  def create_file_pfx(strpassword : UInt8*, strpfxfilename : UInt8*) : HRESULT
    @lpVtbl.value.create_file_pfx.unsafe_as(Proc(UInt8*, UInt8*, HRESULT)).call(strpassword, strpfxfilename)
  end
  def set_pending_request_info(lrequestid : Int32, strcadns : UInt8*, strcaname : UInt8*, strfriendlyname : UInt8*) : HRESULT
    @lpVtbl.value.set_pending_request_info.unsafe_as(Proc(Int32, UInt8*, UInt8*, UInt8*, HRESULT)).call(lrequestid, strcadns, strcaname, strfriendlyname)
  end
  def enum_pending_request(lindex : Int32, ldesiredproperty : PENDING_REQUEST_DESIRED_PROPERTY, pvarproperty : VARIANT*) : HRESULT
    @lpVtbl.value.enum_pending_request.unsafe_as(Proc(Int32, PENDING_REQUEST_DESIRED_PROPERTY, VARIANT*, HRESULT)).call(lindex, ldesiredproperty, pvarproperty)
  end
  def remove_pending_request(strthumbprint : UInt8*) : HRESULT
    @lpVtbl.value.remove_pending_request.unsafe_as(Proc(UInt8*, HRESULT)).call(strthumbprint)
  end
  def get_key_len_ex(lsizespec : XEKL_KEYSIZE, lkeyspec : XEKL_KEYSPEC, pdwkeysize : Int32*) : HRESULT
    @lpVtbl.value.get_key_len_ex.unsafe_as(Proc(XEKL_KEYSIZE, XEKL_KEYSPEC, Int32*, HRESULT)).call(lsizespec, lkeyspec, pdwkeysize)
  end
  def install_pkcs7_ex(pkcs7 : UInt8*, plcertinstalled : Int32*) : HRESULT
    @lpVtbl.value.install_pkcs7_ex.unsafe_as(Proc(UInt8*, Int32*, HRESULT)).call(pkcs7, plcertinstalled)
  end
  def add_cert_type_to_request_ex(ltype : ADDED_CERT_TYPE, bstroidorname : UInt8*, lmajorversion : Int32, fminorversion : LibC::BOOL, lminorversion : Int32) : HRESULT
    @lpVtbl.value.add_cert_type_to_request_ex.unsafe_as(Proc(ADDED_CERT_TYPE, UInt8*, Int32, LibC::BOOL, Int32, HRESULT)).call(ltype, bstroidorname, lmajorversion, fminorversion, lminorversion)
  end
  def get_provider_type2(strprovname : UInt8*, plprovtype : Int32*) : HRESULT
    @lpVtbl.value.get_provider_type2.unsafe_as(Proc(UInt8*, Int32*, HRESULT)).call(strprovname, plprovtype)
  end
  def put_signer_certificate(bstrcert : UInt8*) : HRESULT
    @lpVtbl.value.put_signer_certificate.unsafe_as(Proc(UInt8*, HRESULT)).call(bstrcert)
  end
  def put_client_id(lclientid : Int32) : HRESULT
    @lpVtbl.value.put_client_id.unsafe_as(Proc(Int32, HRESULT)).call(lclientid)
  end
  def get_client_id(plclientid : Int32*) : HRESULT
    @lpVtbl.value.get_client_id.unsafe_as(Proc(Int32*, HRESULT)).call(plclientid)
  end
  def add_blob_property_to_certificate(lpropertyid : Int32, lreserved : Int32, bstrproperty : UInt8*) : HRESULT
    @lpVtbl.value.add_blob_property_to_certificate.unsafe_as(Proc(Int32, Int32, UInt8*, HRESULT)).call(lpropertyid, lreserved, bstrproperty)
  end
  def reset_blob_properties : HRESULT
    @lpVtbl.value.reset_blob_properties.unsafe_as(Proc(HRESULT)).call
  end
  def put_include_subject_key_id(finclude : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_include_subject_key_id.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(finclude)
  end
  def get_include_subject_key_id(pfinclude : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_include_subject_key_id.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pfinclude)
  end
end
struct LibWin32::IEnroll
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def create_file_pkcs10_w_str(dnname : LibC::LPWSTR, usage : LibC::LPWSTR, wszpkcs10filename : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.create_file_pkcs10_w_str.unsafe_as(Proc(LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, HRESULT)).call(dnname, usage, wszpkcs10filename)
  end
  def accept_file_pkcs7_w_str(wszpkcs7filename : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.accept_file_pkcs7_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(wszpkcs7filename)
  end
  def create_pkcs10_w_str(dnname : LibC::LPWSTR, usage : LibC::LPWSTR, ppkcs10blob : CRYPTOAPI_BLOB*) : HRESULT
    @lpVtbl.value.create_pkcs10_w_str.unsafe_as(Proc(LibC::LPWSTR, LibC::LPWSTR, CRYPTOAPI_BLOB*, HRESULT)).call(dnname, usage, ppkcs10blob)
  end
  def accept_pkcs7_blob(pblobpkcs7 : CRYPTOAPI_BLOB*) : HRESULT
    @lpVtbl.value.accept_pkcs7_blob.unsafe_as(Proc(CRYPTOAPI_BLOB*, HRESULT)).call(pblobpkcs7)
  end
  def get_cert_context_from_pkcs7(pblobpkcs7 : CRYPTOAPI_BLOB*) : CERT_CONTEXT*
    @lpVtbl.value.get_cert_context_from_pkcs7.unsafe_as(Proc(CRYPTOAPI_BLOB*, CERT_CONTEXT**)).call(pblobpkcs7)
  end
  def get_my_store : Void*
    @lpVtbl.value.get_my_store.unsafe_as(Proc(Void**)).call
  end
  def get_ca_store : Void*
    @lpVtbl.value.get_ca_store.unsafe_as(Proc(Void**)).call
  end
  def get_rooth_store : Void*
    @lpVtbl.value.get_rooth_store.unsafe_as(Proc(Void**)).call
  end
  def enum_providers_w_str(dwindex : Int32, dwflags : Int32, pbstrprovname : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.enum_providers_w_str.unsafe_as(Proc(Int32, Int32, LibC::LPWSTR*, HRESULT)).call(dwindex, dwflags, pbstrprovname)
  end
  def enum_containers_w_str(dwindex : Int32, pbstr : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.enum_containers_w_str.unsafe_as(Proc(Int32, LibC::LPWSTR*, HRESULT)).call(dwindex, pbstr)
  end
  def free_request_info_blob(pkcs7orpkcs10 : CRYPTOAPI_BLOB) : HRESULT
    @lpVtbl.value.free_request_info_blob.unsafe_as(Proc(CRYPTOAPI_BLOB, HRESULT)).call(pkcs7orpkcs10)
  end
  def get_my_store_name_w_str(szwname : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_my_store_name_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwname)
  end
  def put_my_store_name_w_str(szwname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_my_store_name_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwname)
  end
  def get_my_store_type_w_str(szwtype : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_my_store_type_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwtype)
  end
  def put_my_store_type_w_str(szwtype : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_my_store_type_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwtype)
  end
  def get_my_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_my_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_my_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_my_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_ca_store_name_w_str(szwname : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_ca_store_name_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwname)
  end
  def put_ca_store_name_w_str(szwname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_ca_store_name_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwname)
  end
  def get_ca_store_type_w_str(szwtype : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_ca_store_type_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwtype)
  end
  def put_ca_store_type_w_str(szwtype : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_ca_store_type_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwtype)
  end
  def get_ca_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_ca_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_ca_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_ca_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_root_store_name_w_str(szwname : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_root_store_name_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwname)
  end
  def put_root_store_name_w_str(szwname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_root_store_name_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwname)
  end
  def get_root_store_type_w_str(szwtype : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_root_store_type_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwtype)
  end
  def put_root_store_type_w_str(szwtype : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_root_store_type_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwtype)
  end
  def get_root_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_root_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_root_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_root_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_request_store_name_w_str(szwname : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_request_store_name_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwname)
  end
  def put_request_store_name_w_str(szwname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_request_store_name_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwname)
  end
  def get_request_store_type_w_str(szwtype : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_request_store_type_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwtype)
  end
  def put_request_store_type_w_str(szwtype : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_request_store_type_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwtype)
  end
  def get_request_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_request_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_request_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_request_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_container_name_w_str(szwcontainer : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_container_name_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwcontainer)
  end
  def put_container_name_w_str(szwcontainer : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_container_name_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwcontainer)
  end
  def get_provider_name_w_str(szwprovider : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_provider_name_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwprovider)
  end
  def put_provider_name_w_str(szwprovider : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_provider_name_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwprovider)
  end
  def get_provider_type(pdwtype : Int32*) : HRESULT
    @lpVtbl.value.get_provider_type.unsafe_as(Proc(Int32*, HRESULT)).call(pdwtype)
  end
  def put_provider_type(dwtype : Int32) : HRESULT
    @lpVtbl.value.put_provider_type.unsafe_as(Proc(Int32, HRESULT)).call(dwtype)
  end
  def get_key_spec(pdw : Int32*) : HRESULT
    @lpVtbl.value.get_key_spec.unsafe_as(Proc(Int32*, HRESULT)).call(pdw)
  end
  def put_key_spec(dw : Int32) : HRESULT
    @lpVtbl.value.put_key_spec.unsafe_as(Proc(Int32, HRESULT)).call(dw)
  end
  def get_provider_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_provider_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_provider_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_provider_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_use_existing_key_set(fuseexistingkeys : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_use_existing_key_set.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fuseexistingkeys)
  end
  def put_use_existing_key_set(fuseexistingkeys : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_use_existing_key_set.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fuseexistingkeys)
  end
  def get_gen_key_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_gen_key_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_gen_key_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_gen_key_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_delete_request_cert(fdelete : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_delete_request_cert.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fdelete)
  end
  def put_delete_request_cert(fdelete : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_delete_request_cert.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fdelete)
  end
  def get_write_cert_to_user_ds(fbool : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_write_cert_to_user_ds.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fbool)
  end
  def put_write_cert_to_user_ds(fbool : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_write_cert_to_user_ds.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fbool)
  end
  def get_enable_t61_dn_encoding(fbool : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_enable_t61_dn_encoding.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fbool)
  end
  def put_enable_t61_dn_encoding(fbool : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_enable_t61_dn_encoding.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fbool)
  end
  def get_write_cert_to_csp(fbool : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_write_cert_to_csp.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fbool)
  end
  def put_write_cert_to_csp(fbool : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_write_cert_to_csp.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fbool)
  end
  def get_spc_file_name_w_str(szw : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_spc_file_name_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szw)
  end
  def put_spc_file_name_w_str(szw : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_spc_file_name_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szw)
  end
  def get_pvk_file_name_w_str(szw : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_pvk_file_name_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szw)
  end
  def put_pvk_file_name_w_str(szw : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_pvk_file_name_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szw)
  end
  def get_hash_algorithm_w_str(szw : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_hash_algorithm_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szw)
  end
  def put_hash_algorithm_w_str(szw : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_hash_algorithm_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szw)
  end
  def get_renewal_certificate(ppcertcontext : CERT_CONTEXT**) : HRESULT
    @lpVtbl.value.get_renewal_certificate.unsafe_as(Proc(CERT_CONTEXT**, HRESULT)).call(ppcertcontext)
  end
  def put_renewal_certificate(pcertcontext : CERT_CONTEXT*) : HRESULT
    @lpVtbl.value.put_renewal_certificate.unsafe_as(Proc(CERT_CONTEXT*, HRESULT)).call(pcertcontext)
  end
  def add_cert_type_to_request_w_str(szw : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.add_cert_type_to_request_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szw)
  end
  def add_name_value_pair_to_signature_w_str(name : LibC::LPWSTR, value : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.add_name_value_pair_to_signature_w_str.unsafe_as(Proc(LibC::LPWSTR, LibC::LPWSTR, HRESULT)).call(name, value)
  end
  def add_extensions_to_request(pcertextensions : CERT_EXTENSIONS*) : HRESULT
    @lpVtbl.value.add_extensions_to_request.unsafe_as(Proc(CERT_EXTENSIONS*, HRESULT)).call(pcertextensions)
  end
  def add_authenticated_attributes_to_pkcs7_request(pattributes : CRYPT_ATTRIBUTES*) : HRESULT
    @lpVtbl.value.add_authenticated_attributes_to_pkcs7_request.unsafe_as(Proc(CRYPT_ATTRIBUTES*, HRESULT)).call(pattributes)
  end
  def create_pkcs7_request_from_request(prequest : CRYPTOAPI_BLOB*, psigningcertcontext : CERT_CONTEXT*, ppkcs7blob : CRYPTOAPI_BLOB*) : HRESULT
    @lpVtbl.value.create_pkcs7_request_from_request.unsafe_as(Proc(CRYPTOAPI_BLOB*, CERT_CONTEXT*, CRYPTOAPI_BLOB*, HRESULT)).call(prequest, psigningcertcontext, ppkcs7blob)
  end
end
struct LibWin32::IEnroll2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def create_file_pkcs10_w_str(dnname : LibC::LPWSTR, usage : LibC::LPWSTR, wszpkcs10filename : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.create_file_pkcs10_w_str.unsafe_as(Proc(LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, HRESULT)).call(dnname, usage, wszpkcs10filename)
  end
  def accept_file_pkcs7_w_str(wszpkcs7filename : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.accept_file_pkcs7_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(wszpkcs7filename)
  end
  def create_pkcs10_w_str(dnname : LibC::LPWSTR, usage : LibC::LPWSTR, ppkcs10blob : CRYPTOAPI_BLOB*) : HRESULT
    @lpVtbl.value.create_pkcs10_w_str.unsafe_as(Proc(LibC::LPWSTR, LibC::LPWSTR, CRYPTOAPI_BLOB*, HRESULT)).call(dnname, usage, ppkcs10blob)
  end
  def accept_pkcs7_blob(pblobpkcs7 : CRYPTOAPI_BLOB*) : HRESULT
    @lpVtbl.value.accept_pkcs7_blob.unsafe_as(Proc(CRYPTOAPI_BLOB*, HRESULT)).call(pblobpkcs7)
  end
  def get_cert_context_from_pkcs7(pblobpkcs7 : CRYPTOAPI_BLOB*) : CERT_CONTEXT*
    @lpVtbl.value.get_cert_context_from_pkcs7.unsafe_as(Proc(CRYPTOAPI_BLOB*, CERT_CONTEXT**)).call(pblobpkcs7)
  end
  def get_my_store : Void*
    @lpVtbl.value.get_my_store.unsafe_as(Proc(Void**)).call
  end
  def get_ca_store : Void*
    @lpVtbl.value.get_ca_store.unsafe_as(Proc(Void**)).call
  end
  def get_rooth_store : Void*
    @lpVtbl.value.get_rooth_store.unsafe_as(Proc(Void**)).call
  end
  def enum_providers_w_str(dwindex : Int32, dwflags : Int32, pbstrprovname : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.enum_providers_w_str.unsafe_as(Proc(Int32, Int32, LibC::LPWSTR*, HRESULT)).call(dwindex, dwflags, pbstrprovname)
  end
  def enum_containers_w_str(dwindex : Int32, pbstr : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.enum_containers_w_str.unsafe_as(Proc(Int32, LibC::LPWSTR*, HRESULT)).call(dwindex, pbstr)
  end
  def free_request_info_blob(pkcs7orpkcs10 : CRYPTOAPI_BLOB) : HRESULT
    @lpVtbl.value.free_request_info_blob.unsafe_as(Proc(CRYPTOAPI_BLOB, HRESULT)).call(pkcs7orpkcs10)
  end
  def get_my_store_name_w_str(szwname : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_my_store_name_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwname)
  end
  def put_my_store_name_w_str(szwname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_my_store_name_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwname)
  end
  def get_my_store_type_w_str(szwtype : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_my_store_type_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwtype)
  end
  def put_my_store_type_w_str(szwtype : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_my_store_type_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwtype)
  end
  def get_my_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_my_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_my_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_my_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_ca_store_name_w_str(szwname : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_ca_store_name_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwname)
  end
  def put_ca_store_name_w_str(szwname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_ca_store_name_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwname)
  end
  def get_ca_store_type_w_str(szwtype : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_ca_store_type_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwtype)
  end
  def put_ca_store_type_w_str(szwtype : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_ca_store_type_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwtype)
  end
  def get_ca_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_ca_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_ca_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_ca_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_root_store_name_w_str(szwname : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_root_store_name_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwname)
  end
  def put_root_store_name_w_str(szwname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_root_store_name_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwname)
  end
  def get_root_store_type_w_str(szwtype : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_root_store_type_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwtype)
  end
  def put_root_store_type_w_str(szwtype : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_root_store_type_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwtype)
  end
  def get_root_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_root_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_root_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_root_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_request_store_name_w_str(szwname : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_request_store_name_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwname)
  end
  def put_request_store_name_w_str(szwname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_request_store_name_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwname)
  end
  def get_request_store_type_w_str(szwtype : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_request_store_type_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwtype)
  end
  def put_request_store_type_w_str(szwtype : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_request_store_type_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwtype)
  end
  def get_request_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_request_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_request_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_request_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_container_name_w_str(szwcontainer : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_container_name_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwcontainer)
  end
  def put_container_name_w_str(szwcontainer : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_container_name_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwcontainer)
  end
  def get_provider_name_w_str(szwprovider : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_provider_name_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwprovider)
  end
  def put_provider_name_w_str(szwprovider : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_provider_name_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwprovider)
  end
  def get_provider_type(pdwtype : Int32*) : HRESULT
    @lpVtbl.value.get_provider_type.unsafe_as(Proc(Int32*, HRESULT)).call(pdwtype)
  end
  def put_provider_type(dwtype : Int32) : HRESULT
    @lpVtbl.value.put_provider_type.unsafe_as(Proc(Int32, HRESULT)).call(dwtype)
  end
  def get_key_spec(pdw : Int32*) : HRESULT
    @lpVtbl.value.get_key_spec.unsafe_as(Proc(Int32*, HRESULT)).call(pdw)
  end
  def put_key_spec(dw : Int32) : HRESULT
    @lpVtbl.value.put_key_spec.unsafe_as(Proc(Int32, HRESULT)).call(dw)
  end
  def get_provider_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_provider_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_provider_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_provider_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_use_existing_key_set(fuseexistingkeys : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_use_existing_key_set.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fuseexistingkeys)
  end
  def put_use_existing_key_set(fuseexistingkeys : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_use_existing_key_set.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fuseexistingkeys)
  end
  def get_gen_key_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_gen_key_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_gen_key_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_gen_key_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_delete_request_cert(fdelete : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_delete_request_cert.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fdelete)
  end
  def put_delete_request_cert(fdelete : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_delete_request_cert.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fdelete)
  end
  def get_write_cert_to_user_ds(fbool : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_write_cert_to_user_ds.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fbool)
  end
  def put_write_cert_to_user_ds(fbool : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_write_cert_to_user_ds.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fbool)
  end
  def get_enable_t61_dn_encoding(fbool : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_enable_t61_dn_encoding.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fbool)
  end
  def put_enable_t61_dn_encoding(fbool : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_enable_t61_dn_encoding.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fbool)
  end
  def get_write_cert_to_csp(fbool : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_write_cert_to_csp.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fbool)
  end
  def put_write_cert_to_csp(fbool : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_write_cert_to_csp.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fbool)
  end
  def get_spc_file_name_w_str(szw : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_spc_file_name_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szw)
  end
  def put_spc_file_name_w_str(szw : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_spc_file_name_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szw)
  end
  def get_pvk_file_name_w_str(szw : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_pvk_file_name_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szw)
  end
  def put_pvk_file_name_w_str(szw : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_pvk_file_name_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szw)
  end
  def get_hash_algorithm_w_str(szw : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_hash_algorithm_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szw)
  end
  def put_hash_algorithm_w_str(szw : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_hash_algorithm_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szw)
  end
  def get_renewal_certificate(ppcertcontext : CERT_CONTEXT**) : HRESULT
    @lpVtbl.value.get_renewal_certificate.unsafe_as(Proc(CERT_CONTEXT**, HRESULT)).call(ppcertcontext)
  end
  def put_renewal_certificate(pcertcontext : CERT_CONTEXT*) : HRESULT
    @lpVtbl.value.put_renewal_certificate.unsafe_as(Proc(CERT_CONTEXT*, HRESULT)).call(pcertcontext)
  end
  def add_cert_type_to_request_w_str(szw : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.add_cert_type_to_request_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szw)
  end
  def add_name_value_pair_to_signature_w_str(name : LibC::LPWSTR, value : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.add_name_value_pair_to_signature_w_str.unsafe_as(Proc(LibC::LPWSTR, LibC::LPWSTR, HRESULT)).call(name, value)
  end
  def add_extensions_to_request(pcertextensions : CERT_EXTENSIONS*) : HRESULT
    @lpVtbl.value.add_extensions_to_request.unsafe_as(Proc(CERT_EXTENSIONS*, HRESULT)).call(pcertextensions)
  end
  def add_authenticated_attributes_to_pkcs7_request(pattributes : CRYPT_ATTRIBUTES*) : HRESULT
    @lpVtbl.value.add_authenticated_attributes_to_pkcs7_request.unsafe_as(Proc(CRYPT_ATTRIBUTES*, HRESULT)).call(pattributes)
  end
  def create_pkcs7_request_from_request(prequest : CRYPTOAPI_BLOB*, psigningcertcontext : CERT_CONTEXT*, ppkcs7blob : CRYPTOAPI_BLOB*) : HRESULT
    @lpVtbl.value.create_pkcs7_request_from_request.unsafe_as(Proc(CRYPTOAPI_BLOB*, CERT_CONTEXT*, CRYPTOAPI_BLOB*, HRESULT)).call(prequest, psigningcertcontext, ppkcs7blob)
  end
  def install_pkcs7_blob(pblobpkcs7 : CRYPTOAPI_BLOB*) : HRESULT
    @lpVtbl.value.install_pkcs7_blob.unsafe_as(Proc(CRYPTOAPI_BLOB*, HRESULT)).call(pblobpkcs7)
  end
  def reset : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(HRESULT)).call
  end
  def get_supported_key_spec(pdwkeyspec : Int32*) : HRESULT
    @lpVtbl.value.get_supported_key_spec.unsafe_as(Proc(Int32*, HRESULT)).call(pdwkeyspec)
  end
  def get_key_len(fmin : LibC::BOOL, fexchange : LibC::BOOL, pdwkeysize : Int32*) : HRESULT
    @lpVtbl.value.get_key_len.unsafe_as(Proc(LibC::BOOL, LibC::BOOL, Int32*, HRESULT)).call(fmin, fexchange, pdwkeysize)
  end
  def enum_algs(dwindex : Int32, algclass : Int32, pdwalgid : Int32*) : HRESULT
    @lpVtbl.value.enum_algs.unsafe_as(Proc(Int32, Int32, Int32*, HRESULT)).call(dwindex, algclass, pdwalgid)
  end
  def get_alg_name_w_str(algid : Int32, ppwsz : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_alg_name_w_str.unsafe_as(Proc(Int32, LibC::LPWSTR*, HRESULT)).call(algid, ppwsz)
  end
  def put_reuse_hardware_key_if_unable_to_gen_new(freusehardwarekeyifunabletogennew : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_reuse_hardware_key_if_unable_to_gen_new.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(freusehardwarekeyifunabletogennew)
  end
  def get_reuse_hardware_key_if_unable_to_gen_new(freusehardwarekeyifunabletogennew : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_reuse_hardware_key_if_unable_to_gen_new.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(freusehardwarekeyifunabletogennew)
  end
  def put_hash_alg_id(hashalgid : Int32) : HRESULT
    @lpVtbl.value.put_hash_alg_id.unsafe_as(Proc(Int32, HRESULT)).call(hashalgid)
  end
  def get_hash_alg_id(hashalgid : Int32*) : HRESULT
    @lpVtbl.value.get_hash_alg_id.unsafe_as(Proc(Int32*, HRESULT)).call(hashalgid)
  end
  def set_h_store_my(hstore : Void*) : HRESULT
    @lpVtbl.value.set_h_store_my.unsafe_as(Proc(Void*, HRESULT)).call(hstore)
  end
  def set_h_store_ca(hstore : Void*) : HRESULT
    @lpVtbl.value.set_h_store_ca.unsafe_as(Proc(Void*, HRESULT)).call(hstore)
  end
  def set_h_store_root(hstore : Void*) : HRESULT
    @lpVtbl.value.set_h_store_root.unsafe_as(Proc(Void*, HRESULT)).call(hstore)
  end
  def set_h_store_request(hstore : Void*) : HRESULT
    @lpVtbl.value.set_h_store_request.unsafe_as(Proc(Void*, HRESULT)).call(hstore)
  end
  def put_limit_exchange_key_to_encipherment(flimitexchangekeytoencipherment : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_limit_exchange_key_to_encipherment.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(flimitexchangekeytoencipherment)
  end
  def get_limit_exchange_key_to_encipherment(flimitexchangekeytoencipherment : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_limit_exchange_key_to_encipherment.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(flimitexchangekeytoencipherment)
  end
  def put_enable_smime_capabilities(fenablesmimecapabilities : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_enable_smime_capabilities.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fenablesmimecapabilities)
  end
  def get_enable_smime_capabilities(fenablesmimecapabilities : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_enable_smime_capabilities.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fenablesmimecapabilities)
  end
end
struct LibWin32::IEnroll4
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def create_file_pkcs10_w_str(dnname : LibC::LPWSTR, usage : LibC::LPWSTR, wszpkcs10filename : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.create_file_pkcs10_w_str.unsafe_as(Proc(LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, HRESULT)).call(dnname, usage, wszpkcs10filename)
  end
  def accept_file_pkcs7_w_str(wszpkcs7filename : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.accept_file_pkcs7_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(wszpkcs7filename)
  end
  def create_pkcs10_w_str(dnname : LibC::LPWSTR, usage : LibC::LPWSTR, ppkcs10blob : CRYPTOAPI_BLOB*) : HRESULT
    @lpVtbl.value.create_pkcs10_w_str.unsafe_as(Proc(LibC::LPWSTR, LibC::LPWSTR, CRYPTOAPI_BLOB*, HRESULT)).call(dnname, usage, ppkcs10blob)
  end
  def accept_pkcs7_blob(pblobpkcs7 : CRYPTOAPI_BLOB*) : HRESULT
    @lpVtbl.value.accept_pkcs7_blob.unsafe_as(Proc(CRYPTOAPI_BLOB*, HRESULT)).call(pblobpkcs7)
  end
  def get_cert_context_from_pkcs7(pblobpkcs7 : CRYPTOAPI_BLOB*) : CERT_CONTEXT*
    @lpVtbl.value.get_cert_context_from_pkcs7.unsafe_as(Proc(CRYPTOAPI_BLOB*, CERT_CONTEXT**)).call(pblobpkcs7)
  end
  def get_my_store : Void*
    @lpVtbl.value.get_my_store.unsafe_as(Proc(Void**)).call
  end
  def get_ca_store : Void*
    @lpVtbl.value.get_ca_store.unsafe_as(Proc(Void**)).call
  end
  def get_rooth_store : Void*
    @lpVtbl.value.get_rooth_store.unsafe_as(Proc(Void**)).call
  end
  def enum_providers_w_str(dwindex : Int32, dwflags : Int32, pbstrprovname : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.enum_providers_w_str.unsafe_as(Proc(Int32, Int32, LibC::LPWSTR*, HRESULT)).call(dwindex, dwflags, pbstrprovname)
  end
  def enum_containers_w_str(dwindex : Int32, pbstr : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.enum_containers_w_str.unsafe_as(Proc(Int32, LibC::LPWSTR*, HRESULT)).call(dwindex, pbstr)
  end
  def free_request_info_blob(pkcs7orpkcs10 : CRYPTOAPI_BLOB) : HRESULT
    @lpVtbl.value.free_request_info_blob.unsafe_as(Proc(CRYPTOAPI_BLOB, HRESULT)).call(pkcs7orpkcs10)
  end
  def get_my_store_name_w_str(szwname : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_my_store_name_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwname)
  end
  def put_my_store_name_w_str(szwname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_my_store_name_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwname)
  end
  def get_my_store_type_w_str(szwtype : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_my_store_type_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwtype)
  end
  def put_my_store_type_w_str(szwtype : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_my_store_type_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwtype)
  end
  def get_my_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_my_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_my_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_my_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_ca_store_name_w_str(szwname : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_ca_store_name_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwname)
  end
  def put_ca_store_name_w_str(szwname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_ca_store_name_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwname)
  end
  def get_ca_store_type_w_str(szwtype : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_ca_store_type_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwtype)
  end
  def put_ca_store_type_w_str(szwtype : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_ca_store_type_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwtype)
  end
  def get_ca_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_ca_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_ca_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_ca_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_root_store_name_w_str(szwname : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_root_store_name_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwname)
  end
  def put_root_store_name_w_str(szwname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_root_store_name_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwname)
  end
  def get_root_store_type_w_str(szwtype : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_root_store_type_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwtype)
  end
  def put_root_store_type_w_str(szwtype : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_root_store_type_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwtype)
  end
  def get_root_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_root_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_root_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_root_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_request_store_name_w_str(szwname : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_request_store_name_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwname)
  end
  def put_request_store_name_w_str(szwname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_request_store_name_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwname)
  end
  def get_request_store_type_w_str(szwtype : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_request_store_type_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwtype)
  end
  def put_request_store_type_w_str(szwtype : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_request_store_type_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwtype)
  end
  def get_request_store_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_request_store_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_request_store_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_request_store_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_container_name_w_str(szwcontainer : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_container_name_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwcontainer)
  end
  def put_container_name_w_str(szwcontainer : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_container_name_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwcontainer)
  end
  def get_provider_name_w_str(szwprovider : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_provider_name_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szwprovider)
  end
  def put_provider_name_w_str(szwprovider : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_provider_name_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szwprovider)
  end
  def get_provider_type(pdwtype : Int32*) : HRESULT
    @lpVtbl.value.get_provider_type.unsafe_as(Proc(Int32*, HRESULT)).call(pdwtype)
  end
  def put_provider_type(dwtype : Int32) : HRESULT
    @lpVtbl.value.put_provider_type.unsafe_as(Proc(Int32, HRESULT)).call(dwtype)
  end
  def get_key_spec(pdw : Int32*) : HRESULT
    @lpVtbl.value.get_key_spec.unsafe_as(Proc(Int32*, HRESULT)).call(pdw)
  end
  def put_key_spec(dw : Int32) : HRESULT
    @lpVtbl.value.put_key_spec.unsafe_as(Proc(Int32, HRESULT)).call(dw)
  end
  def get_provider_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_provider_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_provider_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_provider_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_use_existing_key_set(fuseexistingkeys : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_use_existing_key_set.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fuseexistingkeys)
  end
  def put_use_existing_key_set(fuseexistingkeys : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_use_existing_key_set.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fuseexistingkeys)
  end
  def get_gen_key_flags(pdwflags : Int32*) : HRESULT
    @lpVtbl.value.get_gen_key_flags.unsafe_as(Proc(Int32*, HRESULT)).call(pdwflags)
  end
  def put_gen_key_flags(dwflags : Int32) : HRESULT
    @lpVtbl.value.put_gen_key_flags.unsafe_as(Proc(Int32, HRESULT)).call(dwflags)
  end
  def get_delete_request_cert(fdelete : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_delete_request_cert.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fdelete)
  end
  def put_delete_request_cert(fdelete : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_delete_request_cert.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fdelete)
  end
  def get_write_cert_to_user_ds(fbool : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_write_cert_to_user_ds.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fbool)
  end
  def put_write_cert_to_user_ds(fbool : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_write_cert_to_user_ds.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fbool)
  end
  def get_enable_t61_dn_encoding(fbool : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_enable_t61_dn_encoding.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fbool)
  end
  def put_enable_t61_dn_encoding(fbool : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_enable_t61_dn_encoding.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fbool)
  end
  def get_write_cert_to_csp(fbool : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_write_cert_to_csp.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fbool)
  end
  def put_write_cert_to_csp(fbool : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_write_cert_to_csp.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fbool)
  end
  def get_spc_file_name_w_str(szw : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_spc_file_name_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szw)
  end
  def put_spc_file_name_w_str(szw : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_spc_file_name_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szw)
  end
  def get_pvk_file_name_w_str(szw : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_pvk_file_name_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szw)
  end
  def put_pvk_file_name_w_str(szw : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_pvk_file_name_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szw)
  end
  def get_hash_algorithm_w_str(szw : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_hash_algorithm_w_str.unsafe_as(Proc(LibC::LPWSTR*, HRESULT)).call(szw)
  end
  def put_hash_algorithm_w_str(szw : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.put_hash_algorithm_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szw)
  end
  def get_renewal_certificate(ppcertcontext : CERT_CONTEXT**) : HRESULT
    @lpVtbl.value.get_renewal_certificate.unsafe_as(Proc(CERT_CONTEXT**, HRESULT)).call(ppcertcontext)
  end
  def put_renewal_certificate(pcertcontext : CERT_CONTEXT*) : HRESULT
    @lpVtbl.value.put_renewal_certificate.unsafe_as(Proc(CERT_CONTEXT*, HRESULT)).call(pcertcontext)
  end
  def add_cert_type_to_request_w_str(szw : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.add_cert_type_to_request_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(szw)
  end
  def add_name_value_pair_to_signature_w_str(name : LibC::LPWSTR, value : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.add_name_value_pair_to_signature_w_str.unsafe_as(Proc(LibC::LPWSTR, LibC::LPWSTR, HRESULT)).call(name, value)
  end
  def add_extensions_to_request(pcertextensions : CERT_EXTENSIONS*) : HRESULT
    @lpVtbl.value.add_extensions_to_request.unsafe_as(Proc(CERT_EXTENSIONS*, HRESULT)).call(pcertextensions)
  end
  def add_authenticated_attributes_to_pkcs7_request(pattributes : CRYPT_ATTRIBUTES*) : HRESULT
    @lpVtbl.value.add_authenticated_attributes_to_pkcs7_request.unsafe_as(Proc(CRYPT_ATTRIBUTES*, HRESULT)).call(pattributes)
  end
  def create_pkcs7_request_from_request(prequest : CRYPTOAPI_BLOB*, psigningcertcontext : CERT_CONTEXT*, ppkcs7blob : CRYPTOAPI_BLOB*) : HRESULT
    @lpVtbl.value.create_pkcs7_request_from_request.unsafe_as(Proc(CRYPTOAPI_BLOB*, CERT_CONTEXT*, CRYPTOAPI_BLOB*, HRESULT)).call(prequest, psigningcertcontext, ppkcs7blob)
  end
  def install_pkcs7_blob(pblobpkcs7 : CRYPTOAPI_BLOB*) : HRESULT
    @lpVtbl.value.install_pkcs7_blob.unsafe_as(Proc(CRYPTOAPI_BLOB*, HRESULT)).call(pblobpkcs7)
  end
  def reset : HRESULT
    @lpVtbl.value.reset.unsafe_as(Proc(HRESULT)).call
  end
  def get_supported_key_spec(pdwkeyspec : Int32*) : HRESULT
    @lpVtbl.value.get_supported_key_spec.unsafe_as(Proc(Int32*, HRESULT)).call(pdwkeyspec)
  end
  def get_key_len(fmin : LibC::BOOL, fexchange : LibC::BOOL, pdwkeysize : Int32*) : HRESULT
    @lpVtbl.value.get_key_len.unsafe_as(Proc(LibC::BOOL, LibC::BOOL, Int32*, HRESULT)).call(fmin, fexchange, pdwkeysize)
  end
  def enum_algs(dwindex : Int32, algclass : Int32, pdwalgid : Int32*) : HRESULT
    @lpVtbl.value.enum_algs.unsafe_as(Proc(Int32, Int32, Int32*, HRESULT)).call(dwindex, algclass, pdwalgid)
  end
  def get_alg_name_w_str(algid : Int32, ppwsz : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_alg_name_w_str.unsafe_as(Proc(Int32, LibC::LPWSTR*, HRESULT)).call(algid, ppwsz)
  end
  def put_reuse_hardware_key_if_unable_to_gen_new(freusehardwarekeyifunabletogennew : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_reuse_hardware_key_if_unable_to_gen_new.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(freusehardwarekeyifunabletogennew)
  end
  def get_reuse_hardware_key_if_unable_to_gen_new(freusehardwarekeyifunabletogennew : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_reuse_hardware_key_if_unable_to_gen_new.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(freusehardwarekeyifunabletogennew)
  end
  def put_hash_alg_id(hashalgid : Int32) : HRESULT
    @lpVtbl.value.put_hash_alg_id.unsafe_as(Proc(Int32, HRESULT)).call(hashalgid)
  end
  def get_hash_alg_id(hashalgid : Int32*) : HRESULT
    @lpVtbl.value.get_hash_alg_id.unsafe_as(Proc(Int32*, HRESULT)).call(hashalgid)
  end
  def set_h_store_my(hstore : Void*) : HRESULT
    @lpVtbl.value.set_h_store_my.unsafe_as(Proc(Void*, HRESULT)).call(hstore)
  end
  def set_h_store_ca(hstore : Void*) : HRESULT
    @lpVtbl.value.set_h_store_ca.unsafe_as(Proc(Void*, HRESULT)).call(hstore)
  end
  def set_h_store_root(hstore : Void*) : HRESULT
    @lpVtbl.value.set_h_store_root.unsafe_as(Proc(Void*, HRESULT)).call(hstore)
  end
  def set_h_store_request(hstore : Void*) : HRESULT
    @lpVtbl.value.set_h_store_request.unsafe_as(Proc(Void*, HRESULT)).call(hstore)
  end
  def put_limit_exchange_key_to_encipherment(flimitexchangekeytoencipherment : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_limit_exchange_key_to_encipherment.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(flimitexchangekeytoencipherment)
  end
  def get_limit_exchange_key_to_encipherment(flimitexchangekeytoencipherment : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_limit_exchange_key_to_encipherment.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(flimitexchangekeytoencipherment)
  end
  def put_enable_smime_capabilities(fenablesmimecapabilities : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_enable_smime_capabilities.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(fenablesmimecapabilities)
  end
  def get_enable_smime_capabilities(fenablesmimecapabilities : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_enable_smime_capabilities.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(fenablesmimecapabilities)
  end
  def put_thumb_print_w_str(thumbprintblob : CRYPTOAPI_BLOB) : HRESULT
    @lpVtbl.value.put_thumb_print_w_str.unsafe_as(Proc(CRYPTOAPI_BLOB, HRESULT)).call(thumbprintblob)
  end
  def get_thumb_print_w_str(thumbprintblob : CRYPTOAPI_BLOB*) : HRESULT
    @lpVtbl.value.get_thumb_print_w_str.unsafe_as(Proc(CRYPTOAPI_BLOB*, HRESULT)).call(thumbprintblob)
  end
  def set_private_key_archive_certificate(pprivatekeyarchivecert : CERT_CONTEXT*) : HRESULT
    @lpVtbl.value.set_private_key_archive_certificate.unsafe_as(Proc(CERT_CONTEXT*, HRESULT)).call(pprivatekeyarchivecert)
  end
  def get_private_key_archive_certificate : CERT_CONTEXT*
    @lpVtbl.value.get_private_key_archive_certificate.unsafe_as(Proc(CERT_CONTEXT**)).call
  end
  def binary_blob_to_string(flags : Int32, pblobbinary : CRYPTOAPI_BLOB*, ppwszstring : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.binary_blob_to_string.unsafe_as(Proc(Int32, CRYPTOAPI_BLOB*, LibC::LPWSTR*, HRESULT)).call(flags, pblobbinary, ppwszstring)
  end
  def string_to_binary_blob(flags : Int32, pwszstring : LibC::LPWSTR, pblobbinary : CRYPTOAPI_BLOB*, pdwskip : Int32*, pdwflags : Int32*) : HRESULT
    @lpVtbl.value.string_to_binary_blob.unsafe_as(Proc(Int32, LibC::LPWSTR, CRYPTOAPI_BLOB*, Int32*, Int32*, HRESULT)).call(flags, pwszstring, pblobbinary, pdwskip, pdwflags)
  end
  def add_extension_to_request_w_str(flags : Int32, pwszname : LibC::LPWSTR, pblobvalue : CRYPTOAPI_BLOB*) : HRESULT
    @lpVtbl.value.add_extension_to_request_w_str.unsafe_as(Proc(Int32, LibC::LPWSTR, CRYPTOAPI_BLOB*, HRESULT)).call(flags, pwszname, pblobvalue)
  end
  def add_attribute_to_request_w_str(flags : Int32, pwszname : LibC::LPWSTR, pblobvalue : CRYPTOAPI_BLOB*) : HRESULT
    @lpVtbl.value.add_attribute_to_request_w_str.unsafe_as(Proc(Int32, LibC::LPWSTR, CRYPTOAPI_BLOB*, HRESULT)).call(flags, pwszname, pblobvalue)
  end
  def add_name_value_pair_to_request_w_str(flags : Int32, pwszname : LibC::LPWSTR, pwszvalue : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.add_name_value_pair_to_request_w_str.unsafe_as(Proc(Int32, LibC::LPWSTR, LibC::LPWSTR, HRESULT)).call(flags, pwszname, pwszvalue)
  end
  def reset_extensions : HRESULT
    @lpVtbl.value.reset_extensions.unsafe_as(Proc(HRESULT)).call
  end
  def reset_attributes : HRESULT
    @lpVtbl.value.reset_attributes.unsafe_as(Proc(HRESULT)).call
  end
  def create_request_w_str(flags : CERT_CREATE_REQUEST_FLAGS, pwszdnname : LibC::LPWSTR, pwszusage : LibC::LPWSTR, pblobrequest : CRYPTOAPI_BLOB*) : HRESULT
    @lpVtbl.value.create_request_w_str.unsafe_as(Proc(CERT_CREATE_REQUEST_FLAGS, LibC::LPWSTR, LibC::LPWSTR, CRYPTOAPI_BLOB*, HRESULT)).call(flags, pwszdnname, pwszusage, pblobrequest)
  end
  def create_file_request_w_str(flags : CERT_CREATE_REQUEST_FLAGS, pwszdnname : LibC::LPWSTR, pwszusage : LibC::LPWSTR, pwszrequestfilename : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.create_file_request_w_str.unsafe_as(Proc(CERT_CREATE_REQUEST_FLAGS, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, HRESULT)).call(flags, pwszdnname, pwszusage, pwszrequestfilename)
  end
  def accept_response_blob(pblobresponse : CRYPTOAPI_BLOB*) : HRESULT
    @lpVtbl.value.accept_response_blob.unsafe_as(Proc(CRYPTOAPI_BLOB*, HRESULT)).call(pblobresponse)
  end
  def accept_file_response_w_str(pwszresponsefilename : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.accept_file_response_w_str.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(pwszresponsefilename)
  end
  def get_cert_context_from_response_blob(pblobresponse : CRYPTOAPI_BLOB*, ppcertcontext : CERT_CONTEXT**) : HRESULT
    @lpVtbl.value.get_cert_context_from_response_blob.unsafe_as(Proc(CRYPTOAPI_BLOB*, CERT_CONTEXT**, HRESULT)).call(pblobresponse, ppcertcontext)
  end
  def get_cert_context_from_file_response_w_str(pwszresponsefilename : LibC::LPWSTR, ppcertcontext : CERT_CONTEXT**) : HRESULT
    @lpVtbl.value.get_cert_context_from_file_response_w_str.unsafe_as(Proc(LibC::LPWSTR, CERT_CONTEXT**, HRESULT)).call(pwszresponsefilename, ppcertcontext)
  end
  def create_pfxw_str(pwszpassword : LibC::LPWSTR, pblobpfx : CRYPTOAPI_BLOB*) : HRESULT
    @lpVtbl.value.create_pfxw_str.unsafe_as(Proc(LibC::LPWSTR, CRYPTOAPI_BLOB*, HRESULT)).call(pwszpassword, pblobpfx)
  end
  def create_file_pfxw_str(pwszpassword : LibC::LPWSTR, pwszpfxfilename : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.create_file_pfxw_str.unsafe_as(Proc(LibC::LPWSTR, LibC::LPWSTR, HRESULT)).call(pwszpassword, pwszpfxfilename)
  end
  def set_pending_request_info_w_str(lrequestid : Int32, pwszcadns : LibC::LPWSTR, pwszcaname : LibC::LPWSTR, pwszfriendlyname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_pending_request_info_w_str.unsafe_as(Proc(Int32, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, HRESULT)).call(lrequestid, pwszcadns, pwszcaname, pwszfriendlyname)
  end
  def enum_pending_request_w_str(lindex : Int32, ldesiredproperty : PENDING_REQUEST_DESIRED_PROPERTY, ppproperty : Void*) : HRESULT
    @lpVtbl.value.enum_pending_request_w_str.unsafe_as(Proc(Int32, PENDING_REQUEST_DESIRED_PROPERTY, Void*, HRESULT)).call(lindex, ldesiredproperty, ppproperty)
  end
  def remove_pending_request_w_str(thumbprintblob : CRYPTOAPI_BLOB) : HRESULT
    @lpVtbl.value.remove_pending_request_w_str.unsafe_as(Proc(CRYPTOAPI_BLOB, HRESULT)).call(thumbprintblob)
  end
  def get_key_len_ex(lsizespec : XEKL_KEYSIZE, lkeyspec : XEKL_KEYSPEC, pdwkeysize : Int32*) : HRESULT
    @lpVtbl.value.get_key_len_ex.unsafe_as(Proc(XEKL_KEYSIZE, XEKL_KEYSPEC, Int32*, HRESULT)).call(lsizespec, lkeyspec, pdwkeysize)
  end
  def install_pkcs7_blob_ex(pblobpkcs7 : CRYPTOAPI_BLOB*, plcertinstalled : Int32*) : HRESULT
    @lpVtbl.value.install_pkcs7_blob_ex.unsafe_as(Proc(CRYPTOAPI_BLOB*, Int32*, HRESULT)).call(pblobpkcs7, plcertinstalled)
  end
  def add_cert_type_to_request_w_str_ex(ltype : ADDED_CERT_TYPE, pwszoidorname : LibC::LPWSTR, lmajorversion : Int32, fminorversion : LibC::BOOL, lminorversion : Int32) : HRESULT
    @lpVtbl.value.add_cert_type_to_request_w_str_ex.unsafe_as(Proc(ADDED_CERT_TYPE, LibC::LPWSTR, Int32, LibC::BOOL, Int32, HRESULT)).call(ltype, pwszoidorname, lmajorversion, fminorversion, lminorversion)
  end
  def get_provider_type_w_str(pwszprovname : LibC::LPWSTR, plprovtype : Int32*) : HRESULT
    @lpVtbl.value.get_provider_type_w_str.unsafe_as(Proc(LibC::LPWSTR, Int32*, HRESULT)).call(pwszprovname, plprovtype)
  end
  def add_blob_property_to_certificate_w_str(lpropertyid : Int32, lreserved : Int32, pblobproperty : CRYPTOAPI_BLOB*) : HRESULT
    @lpVtbl.value.add_blob_property_to_certificate_w_str.unsafe_as(Proc(Int32, Int32, CRYPTOAPI_BLOB*, HRESULT)).call(lpropertyid, lreserved, pblobproperty)
  end
  def set_signer_certificate(psignercert : CERT_CONTEXT*) : HRESULT
    @lpVtbl.value.set_signer_certificate.unsafe_as(Proc(CERT_CONTEXT*, HRESULT)).call(psignercert)
  end
  def put_client_id(lclientid : Int32) : HRESULT
    @lpVtbl.value.put_client_id.unsafe_as(Proc(Int32, HRESULT)).call(lclientid)
  end
  def get_client_id(plclientid : Int32*) : HRESULT
    @lpVtbl.value.get_client_id.unsafe_as(Proc(Int32*, HRESULT)).call(plclientid)
  end
  def put_include_subject_key_id(finclude : LibC::BOOL) : HRESULT
    @lpVtbl.value.put_include_subject_key_id.unsafe_as(Proc(LibC::BOOL, HRESULT)).call(finclude)
  end
  def get_include_subject_key_id(pfinclude : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_include_subject_key_id.unsafe_as(Proc(LibC::BOOL*, HRESULT)).call(pfinclude)
  end
end
struct LibWin32::ICertRequestD
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def request(dwflags : UInt32, pwszauthority : LibC::LPWSTR, pdwrequestid : UInt32*, pdwdisposition : UInt32*, pwszattributes : LibC::LPWSTR, pctbrequest : CERTTRANSBLOB*, pctbcertchain : CERTTRANSBLOB*, pctbencodedcert : CERTTRANSBLOB*, pctbdispositionmessage : CERTTRANSBLOB*) : HRESULT
    @lpVtbl.value.request.unsafe_as(Proc(UInt32, LibC::LPWSTR, UInt32*, UInt32*, LibC::LPWSTR, CERTTRANSBLOB*, CERTTRANSBLOB*, CERTTRANSBLOB*, CERTTRANSBLOB*, HRESULT)).call(dwflags, pwszauthority, pdwrequestid, pdwdisposition, pwszattributes, pctbrequest, pctbcertchain, pctbencodedcert, pctbdispositionmessage)
  end
  def get_ca_cert(fchain : UInt32, pwszauthority : LibC::LPWSTR, pctbout : CERTTRANSBLOB*) : HRESULT
    @lpVtbl.value.get_ca_cert.unsafe_as(Proc(UInt32, LibC::LPWSTR, CERTTRANSBLOB*, HRESULT)).call(fchain, pwszauthority, pctbout)
  end
  def ping(pwszauthority : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.ping.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(pwszauthority)
  end
end
struct LibWin32::ICertRequestD2
  def query_interface(riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.unsafe_as(Proc(Guid*, Void**, HRESULT)).call(riid, ppvobject)
  end
  def add_ref : UInt32
    @lpVtbl.value.add_ref.unsafe_as(Proc(UInt32)).call
  end
  def release : UInt32
    @lpVtbl.value.release.unsafe_as(Proc(UInt32)).call
  end
  def request(dwflags : UInt32, pwszauthority : LibC::LPWSTR, pdwrequestid : UInt32*, pdwdisposition : UInt32*, pwszattributes : LibC::LPWSTR, pctbrequest : CERTTRANSBLOB*, pctbcertchain : CERTTRANSBLOB*, pctbencodedcert : CERTTRANSBLOB*, pctbdispositionmessage : CERTTRANSBLOB*) : HRESULT
    @lpVtbl.value.request.unsafe_as(Proc(UInt32, LibC::LPWSTR, UInt32*, UInt32*, LibC::LPWSTR, CERTTRANSBLOB*, CERTTRANSBLOB*, CERTTRANSBLOB*, CERTTRANSBLOB*, HRESULT)).call(dwflags, pwszauthority, pdwrequestid, pdwdisposition, pwszattributes, pctbrequest, pctbcertchain, pctbencodedcert, pctbdispositionmessage)
  end
  def get_ca_cert(fchain : UInt32, pwszauthority : LibC::LPWSTR, pctbout : CERTTRANSBLOB*) : HRESULT
    @lpVtbl.value.get_ca_cert.unsafe_as(Proc(UInt32, LibC::LPWSTR, CERTTRANSBLOB*, HRESULT)).call(fchain, pwszauthority, pctbout)
  end
  def ping(pwszauthority : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.ping.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(pwszauthority)
  end
  def request2(pwszauthority : LibC::LPWSTR, dwflags : UInt32, pwszserialnumber : LibC::LPWSTR, pdwrequestid : UInt32*, pdwdisposition : UInt32*, pwszattributes : LibC::LPWSTR, pctbrequest : CERTTRANSBLOB*, pctbfullresponse : CERTTRANSBLOB*, pctbencodedcert : CERTTRANSBLOB*, pctbdispositionmessage : CERTTRANSBLOB*) : HRESULT
    @lpVtbl.value.request2.unsafe_as(Proc(LibC::LPWSTR, UInt32, LibC::LPWSTR, UInt32*, UInt32*, LibC::LPWSTR, CERTTRANSBLOB*, CERTTRANSBLOB*, CERTTRANSBLOB*, CERTTRANSBLOB*, HRESULT)).call(pwszauthority, dwflags, pwszserialnumber, pdwrequestid, pdwdisposition, pwszattributes, pctbrequest, pctbfullresponse, pctbencodedcert, pctbdispositionmessage)
  end
  def get_ca_property(pwszauthority : LibC::LPWSTR, propid : Int32, propindex : Int32, proptype : Int32, pctbpropertyvalue : CERTTRANSBLOB*) : HRESULT
    @lpVtbl.value.get_ca_property.unsafe_as(Proc(LibC::LPWSTR, Int32, Int32, Int32, CERTTRANSBLOB*, HRESULT)).call(pwszauthority, propid, propindex, proptype, pctbpropertyvalue)
  end
  def get_ca_property_info(pwszauthority : LibC::LPWSTR, pcproperty : Int32*, pctbpropinfo : CERTTRANSBLOB*) : HRESULT
    @lpVtbl.value.get_ca_property_info.unsafe_as(Proc(LibC::LPWSTR, Int32*, CERTTRANSBLOB*, HRESULT)).call(pwszauthority, pcproperty, pctbpropinfo)
  end
  def ping2(pwszauthority : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.ping2.unsafe_as(Proc(LibC::LPWSTR, HRESULT)).call(pwszauthority)
  end
end
