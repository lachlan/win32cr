require "../ui/windowsandmessaging.cr"
require "../foundation.cr"
require "../system/com.cr"
require "../system/registry.cr"
require "../system/com/structuredstorage.cr"
require "../ui/shell.cr"
require "../ui/controls.cr"
require "../system/ole.cr"
require "../security.cr"
require "../networking/winsock.cr"
require "../security/authentication/identity.cr"

{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link("delayimp")]
{% end %}
@[Link("user32")]
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/IGNORE:4199")]
{% end %}
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/DELAYLOAD:activeds.dll")]
@[Link(ldflags: "/DELAYLOAD:dsuiext.dll")]
@[Link(ldflags: "/DELAYLOAD:dsprop.dll")]
@[Link(ldflags: "/DELAYLOAD:dsparse.dll")]
@[Link(ldflags: "/DELAYLOAD:ntdsapi.dll")]
@[Link(ldflags: "/DELAYLOAD:netapi32.dll")]
{% else %}
@[Link("activeds")]
@[Link("dsuiext")]
@[Link("dsprop")]
@[Link("dsparse")]
@[Link("ntdsapi")]
@[Link("netapi32")]
{% end %}
lib LibWin32
  alias GetDcContextHandle = LibC::IntPtrT

  WM_ADSPROP_NOTIFY_PAGEINIT = 2125_u32
  WM_ADSPROP_NOTIFY_PAGEHWND = 2126_u32
  WM_ADSPROP_NOTIFY_CHANGE = 2127_u32
  WM_ADSPROP_NOTIFY_APPLY = 2128_u32
  WM_ADSPROP_NOTIFY_SETFOCUS = 2129_u32
  WM_ADSPROP_NOTIFY_FOREGROUND = 2130_u32
  WM_ADSPROP_NOTIFY_EXIT = 2131_u32
  WM_ADSPROP_NOTIFY_ERROR = 2134_u32
  CLSID_CommonQuery = "83bc5ec0-6f2a-11d0-a1c4-00aa00c16e65"
  QUERYFORM_CHANGESFORMLIST = 1_u64
  QUERYFORM_CHANGESOPTFORMLIST = 2_u64
  CQFF_NOGLOBALPAGES = 1_u32
  CQFF_ISOPTIONAL = 2_u32
  CQPM_INITIALIZE = 1_u32
  CQPM_RELEASE = 2_u32
  CQPM_ENABLE = 3_u32
  CQPM_GETPARAMETERS = 5_u32
  CQPM_CLEARFORM = 6_u32
  CQPM_PERSIST = 7_u32
  CQPM_HELP = 8_u32
  CQPM_SETDEFAULTPARAMETERS = 9_u32
  CQPM_HANDLERSPECIFIC = 268435456_u32
  OQWF_OKCANCEL = 1_u32
  OQWF_DEFAULTFORM = 2_u32
  OQWF_SINGLESELECT = 4_u32
  OQWF_LOADQUERY = 8_u32
  OQWF_REMOVESCOPES = 16_u32
  OQWF_REMOVEFORMS = 32_u32
  OQWF_ISSUEONOPEN = 64_u32
  OQWF_SHOWOPTIONAL = 128_u32
  OQWF_SAVEQUERYONOK = 512_u32
  OQWF_HIDEMENUS = 1024_u32
  OQWF_HIDESEARCHUI = 2048_u32
  OQWF_PARAMISPROPERTYBAG = 2147483648_u32
  CLSID_DsAdminCreateObj = "e301a009-f901-11d2-82b9-00c04f68928b"
  DSA_NEWOBJ_CTX_PRECOMMIT = 1_u32
  DSA_NEWOBJ_CTX_COMMIT = 2_u32
  DSA_NEWOBJ_CTX_POSTCOMMIT = 3_u32
  DSA_NEWOBJ_CTX_CLEANUP = 4_u32
  DSA_NOTIFY_DEL = 1_u32
  DSA_NOTIFY_REN = 2_u32
  DSA_NOTIFY_MOV = 4_u32
  DSA_NOTIFY_PROP = 8_u32
  DSA_NOTIFY_FLAG_ADDITIONAL_DATA = 2_u32
  DSA_NOTIFY_FLAG_FORCE_ADDITIONAL_DATA = 1_u32
  CLSID_MicrosoftDS = "fe1290f0-cfbd-11cf-a330-00aa00c16e65"
  CLSID_DsPropertyPages = "0d45d530-764b-11d0-a1ca-00aa00c16e65"
  CLSID_DsDomainTreeBrowser = "1698790a-e2b4-11d0-b0b1-00c04fd8dca6"
  CLSID_DsDisplaySpecifier = "1ab4a8c0-6a0b-11d2-ad49-00c04fa31a86"
  CLSID_DsFolderProperties = "9e51e0d0-6e0f-11d2-9601-00c04fa31a86"
  DSOBJECT_ISCONTAINER = 1_u32
  DSOBJECT_READONLYPAGES = 2147483648_u32
  DSPROVIDER_UNUSED_0 = 1_u32
  DSPROVIDER_UNUSED_1 = 2_u32
  DSPROVIDER_UNUSED_2 = 4_u32
  DSPROVIDER_UNUSED_3 = 8_u32
  DSPROVIDER_ADVANCED = 16_u32
  DSPROVIDER_AD_LDS = 32_u32
  DSDSOF_HASUSERANDSERVERINFO = 1_u32
  DSDSOF_SIMPLEAUTHENTICATE = 2_u32
  DSDSOF_DONTSIGNSEAL = 4_u32
  DSDSOF_DSAVAILABLE = 1073741824_u32
  DBDTF_RETURNFQDN = 1_u32
  DBDTF_RETURNMIXEDDOMAINS = 2_u32
  DBDTF_RETURNEXTERNAL = 4_u32
  DBDTF_RETURNINBOUND = 8_u32
  DBDTF_RETURNINOUTBOUND = 16_u32
  DSSSF_SIMPLEAUTHENTICATE = 1_u32
  DSSSF_DONTSIGNSEAL = 2_u32
  DSSSF_DSAVAILABLE = 2147483648_u32
  DSGIF_ISNORMAL = 0_u32
  DSGIF_ISOPEN = 1_u32
  DSGIF_ISDISABLED = 2_u32
  DSGIF_ISMASK = 15_u32
  DSGIF_GETDEFAULTICON = 16_u32
  DSGIF_DEFAULTISCONTAINER = 32_u32
  DSICCF_IGNORETREATASLEAF = 1_u32
  DSECAF_NOTLISTED = 1_u32
  DSCCIF_HASWIZARDDIALOG = 1_u32
  DSCCIF_HASWIZARDPRIMARYPAGE = 2_u32
  DSBI_NOBUTTONS = 1_u32
  DSBI_NOLINES = 2_u32
  DSBI_NOLINESATROOT = 4_u32
  DSBI_CHECKBOXES = 256_u32
  DSBI_NOROOT = 65536_u32
  DSBI_INCLUDEHIDDEN = 131072_u32
  DSBI_EXPANDONOPEN = 262144_u32
  DSBI_ENTIREDIRECTORY = 589824_u32
  DSBI_RETURN_FORMAT = 1048576_u32
  DSBI_HASCREDENTIALS = 2097152_u32
  DSBI_IGNORETREATASLEAF = 4194304_u32
  DSBI_SIMPLEAUTHENTICATE = 8388608_u32
  DSBI_RETURNOBJECTCLASS = 16777216_u32
  DSBI_DONTSIGNSEAL = 33554432_u32
  DSB_MAX_DISPLAYNAME_CHARS = 64_u32
  DSBF_STATE = 1_u32
  DSBF_ICONLOCATION = 2_u32
  DSBF_DISPLAYNAME = 4_u32
  DSBS_CHECKED = 1_u32
  DSBS_HIDDEN = 2_u32
  DSBS_ROOT = 4_u32
  DSBM_QUERYINSERTW = 100_u32
  DSBM_QUERYINSERTA = 101_u32
  DSBM_QUERYINSERT = 100_u32
  DSBM_CHANGEIMAGESTATE = 102_u32
  DSBM_HELP = 103_u32
  DSBM_CONTEXTMENU = 104_u32
  DSBID_BANNER = 256_u32
  DSBID_CONTAINERLIST = 257_u32
  DS_FORCE_REDISCOVERY = 1_u32
  DS_DIRECTORY_SERVICE_REQUIRED = 16_u32
  DS_DIRECTORY_SERVICE_PREFERRED = 32_u32
  DS_GC_SERVER_REQUIRED = 64_u32
  DS_PDC_REQUIRED = 128_u32
  DS_BACKGROUND_ONLY = 256_u32
  DS_IP_REQUIRED = 512_u32
  DS_KDC_REQUIRED = 1024_u32
  DS_TIMESERV_REQUIRED = 2048_u32
  DS_WRITABLE_REQUIRED = 4096_u32
  DS_GOOD_TIMESERV_PREFERRED = 8192_u32
  DS_AVOID_SELF = 16384_u32
  DS_ONLY_LDAP_NEEDED = 32768_u32
  DS_IS_FLAT_NAME = 65536_u32
  DS_IS_DNS_NAME = 131072_u32
  DS_TRY_NEXTCLOSEST_SITE = 262144_u32
  DS_DIRECTORY_SERVICE_6_REQUIRED = 524288_u32
  DS_WEB_SERVICE_REQUIRED = 1048576_u32
  DS_DIRECTORY_SERVICE_8_REQUIRED = 2097152_u32
  DS_DIRECTORY_SERVICE_9_REQUIRED = 4194304_u32
  DS_DIRECTORY_SERVICE_10_REQUIRED = 8388608_u32
  DS_KEY_LIST_SUPPORT_REQUIRED = 16777216_u32
  DS_RETURN_DNS_NAME = 1073741824_u32
  DS_RETURN_FLAT_NAME = 2147483648_u32
  DS_PDC_FLAG = 1_u32
  DS_GC_FLAG = 4_u32
  DS_LDAP_FLAG = 8_u32
  DS_DS_FLAG = 16_u32
  DS_KDC_FLAG = 32_u32
  DS_TIMESERV_FLAG = 64_u32
  DS_CLOSEST_FLAG = 128_u32
  DS_WRITABLE_FLAG = 256_u32
  DS_GOOD_TIMESERV_FLAG = 512_u32
  DS_NDNC_FLAG = 1024_u32
  DS_SELECT_SECRET_DOMAIN_6_FLAG = 2048_u32
  DS_FULL_SECRET_DOMAIN_6_FLAG = 4096_u32
  DS_WS_FLAG = 8192_u32
  DS_DS_8_FLAG = 16384_u32
  DS_DS_9_FLAG = 32768_u32
  DS_DS_10_FLAG = 65536_u32
  DS_KEY_LIST_FLAG = 131072_u32
  DS_PING_FLAGS = 1048575_u32
  DS_DNS_CONTROLLER_FLAG = 536870912_u32
  DS_DNS_DOMAIN_FLAG = 1073741824_u32
  DS_DNS_FOREST_FLAG = 2147483648_u32
  DS_DOMAIN_IN_FOREST = 1_u32
  DS_DOMAIN_DIRECT_OUTBOUND = 2_u32
  DS_DOMAIN_TREE_ROOT = 4_u32
  DS_DOMAIN_PRIMARY = 8_u32
  DS_DOMAIN_NATIVE_MODE = 16_u32
  DS_DOMAIN_DIRECT_INBOUND = 32_u32
  DS_GFTI_UPDATE_TDO = 1_u32
  DS_GFTI_VALID_FLAGS = 1_u32
  DS_ONLY_DO_SITE_NAME = 1_u32
  DS_NOTIFY_AFTER_SITE_RECORDS = 2_u32
  CLSID_DsQuery = "8a23e65e-31c2-11d0-891c-00a024ab2dbb"
  CLSID_DsFindObjects = "83ee3fe1-57d9-11d0-b932-00a024ab2dbb"
  CLSID_DsFindPeople = "83ee3fe2-57d9-11d0-b932-00a024ab2dbb"
  CLSID_DsFindPrinter = "b577f070-7ee2-11d0-913f-00aa00c16e65"
  CLSID_DsFindComputer = "16006700-87ad-11d0-9140-00aa00c16e65"
  CLSID_DsFindVolume = "c1b3cbf1-886a-11d0-9140-00aa00c16e65"
  CLSID_DsFindContainer = "c1b3cbf2-886a-11d0-9140-00aa00c16e65"
  CLSID_DsFindAdvanced = "83ee3fe3-57d9-11d0-b932-00a024ab2dbb"
  CLSID_DsFindDomainController = "538c7b7e-d25e-11d0-9742-00a0c906af45"
  CLSID_DsFindWriteableDomainController = "7cbef079-aa84-444b-bc70-68e41283eabc"
  CLSID_DsFindFrsMembers = "94ce4b18-b3d3-11d1-b9b4-00c04fd8d5b0"
  DSQPF_NOSAVE = 1_u32
  DSQPF_SAVELOCATION = 2_u32
  DSQPF_SHOWHIDDENOBJECTS = 4_u32
  DSQPF_ENABLEADMINFEATURES = 8_u32
  DSQPF_ENABLEADVANCEDFEATURES = 16_u32
  DSQPF_HASCREDENTIALS = 32_u32
  DSQPF_NOCHOOSECOLUMNS = 64_u32
  DSQPM_GETCLASSLIST = 268435456_u32
  DSQPM_HELPTOPICS = 268435457_u32
  DSROLE_PRIMARY_DS_RUNNING = 1_u32
  DSROLE_PRIMARY_DS_MIXED_MODE = 2_u32
  DSROLE_UPGRADE_IN_PROGRESS = 4_u32
  DSROLE_PRIMARY_DS_READONLY = 8_u32
  DSROLE_PRIMARY_DOMAIN_GUID_PRESENT = 16777216_u32
  ADS_ATTR_CLEAR = 1_u32
  ADS_ATTR_UPDATE = 2_u32
  ADS_ATTR_APPEND = 3_u32
  ADS_ATTR_DELETE = 4_u32
  ADS_EXT_MINEXTDISPID = 1_u32
  ADS_EXT_MAXEXTDISPID = 16777215_u32
  ADS_EXT_INITCREDENTIALS = 1_u32
  ADS_EXT_INITIALIZE_COMPLETE = 2_u32
  DS_BEHAVIOR_WIN2000 = 0_u32
  DS_BEHAVIOR_WIN2003_WITH_MIXED_DOMAINS = 1_u32
  DS_BEHAVIOR_WIN2003 = 2_u32
  DS_BEHAVIOR_WIN2008 = 3_u32
  DS_BEHAVIOR_WIN2008R2 = 4_u32
  DS_BEHAVIOR_WIN2012 = 5_u32
  DS_BEHAVIOR_WIN2012R2 = 6_u32
  DS_BEHAVIOR_WIN2016 = 7_u32
  DS_BEHAVIOR_LONGHORN = 3_u32
  DS_BEHAVIOR_WIN7 = 4_u32
  DS_BEHAVIOR_WIN8 = 5_u32
  DS_BEHAVIOR_WINBLUE = 6_u32
  DS_BEHAVIOR_WINTHRESHOLD = 7_u32
  ACTRL_DS_OPEN = 0_u32
  ACTRL_DS_CREATE_CHILD = 1_u32
  ACTRL_DS_DELETE_CHILD = 2_u32
  ACTRL_DS_LIST = 4_u32
  ACTRL_DS_SELF = 8_u32
  ACTRL_DS_READ_PROP = 16_u32
  ACTRL_DS_WRITE_PROP = 32_u32
  ACTRL_DS_DELETE_TREE = 64_u32
  ACTRL_DS_LIST_OBJECT = 128_u32
  ACTRL_DS_CONTROL_ACCESS = 256_u32
  NTDSAPI_BIND_ALLOW_DELEGATION = 1_u32
  NTDSAPI_BIND_FIND_BINDING = 2_u32
  NTDSAPI_BIND_FORCE_KERBEROS = 4_u32
  DS_REPSYNC_ASYNCHRONOUS_OPERATION = 1_u32
  DS_REPSYNC_WRITEABLE = 2_u32
  DS_REPSYNC_PERIODIC = 4_u32
  DS_REPSYNC_INTERSITE_MESSAGING = 8_u32
  DS_REPSYNC_FULL = 32_u32
  DS_REPSYNC_URGENT = 64_u32
  DS_REPSYNC_NO_DISCARD = 128_u32
  DS_REPSYNC_FORCE = 256_u32
  DS_REPSYNC_ADD_REFERENCE = 512_u32
  DS_REPSYNC_NEVER_COMPLETED = 1024_u32
  DS_REPSYNC_TWO_WAY = 2048_u32
  DS_REPSYNC_NEVER_NOTIFY = 4096_u32
  DS_REPSYNC_INITIAL = 8192_u32
  DS_REPSYNC_USE_COMPRESSION = 16384_u32
  DS_REPSYNC_ABANDONED = 32768_u32
  DS_REPSYNC_SELECT_SECRETS = 32768_u32
  DS_REPSYNC_INITIAL_IN_PROGRESS = 65536_u32
  DS_REPSYNC_PARTIAL_ATTRIBUTE_SET = 131072_u32
  DS_REPSYNC_REQUEUE = 262144_u32
  DS_REPSYNC_NOTIFICATION = 524288_u32
  DS_REPSYNC_ASYNCHRONOUS_REPLICA = 1048576_u32
  DS_REPSYNC_CRITICAL = 2097152_u32
  DS_REPSYNC_FULL_IN_PROGRESS = 4194304_u32
  DS_REPSYNC_PREEMPTED = 8388608_u32
  DS_REPSYNC_NONGC_RO_REPLICA = 16777216_u32
  DS_REPADD_ASYNCHRONOUS_OPERATION = 1_u32
  DS_REPADD_WRITEABLE = 2_u32
  DS_REPADD_INITIAL = 4_u32
  DS_REPADD_PERIODIC = 8_u32
  DS_REPADD_INTERSITE_MESSAGING = 16_u32
  DS_REPADD_ASYNCHRONOUS_REPLICA = 32_u32
  DS_REPADD_DISABLE_NOTIFICATION = 64_u32
  DS_REPADD_DISABLE_PERIODIC = 128_u32
  DS_REPADD_USE_COMPRESSION = 256_u32
  DS_REPADD_NEVER_NOTIFY = 512_u32
  DS_REPADD_TWO_WAY = 1024_u32
  DS_REPADD_CRITICAL = 2048_u32
  DS_REPADD_SELECT_SECRETS = 4096_u32
  DS_REPADD_NONGC_RO_REPLICA = 16777216_u32
  DS_REPDEL_ASYNCHRONOUS_OPERATION = 1_u32
  DS_REPDEL_WRITEABLE = 2_u32
  DS_REPDEL_INTERSITE_MESSAGING = 4_u32
  DS_REPDEL_IGNORE_ERRORS = 8_u32
  DS_REPDEL_LOCAL_ONLY = 16_u32
  DS_REPDEL_NO_SOURCE = 32_u32
  DS_REPDEL_REF_OK = 64_u32
  DS_REPMOD_ASYNCHRONOUS_OPERATION = 1_u32
  DS_REPMOD_WRITEABLE = 2_u32
  DS_REPMOD_UPDATE_FLAGS = 1_u32
  DS_REPMOD_UPDATE_INSTANCE = 2_u32
  DS_REPMOD_UPDATE_ADDRESS = 2_u32
  DS_REPMOD_UPDATE_SCHEDULE = 4_u32
  DS_REPMOD_UPDATE_RESULT = 8_u32
  DS_REPMOD_UPDATE_TRANSPORT = 16_u32
  DS_REPUPD_ASYNCHRONOUS_OPERATION = 1_u32
  DS_REPUPD_WRITEABLE = 2_u32
  DS_REPUPD_ADD_REFERENCE = 4_u32
  DS_REPUPD_DELETE_REFERENCE = 8_u32
  DS_REPUPD_REFERENCE_GCSPN = 16_u32
  DS_INSTANCETYPE_IS_NC_HEAD = 1_u32
  DS_INSTANCETYPE_NC_IS_WRITEABLE = 4_u32
  DS_INSTANCETYPE_NC_COMING = 16_u32
  DS_INSTANCETYPE_NC_GOING = 32_u32
  NTDSDSA_OPT_IS_GC = 1_u32
  NTDSDSA_OPT_DISABLE_INBOUND_REPL = 2_u32
  NTDSDSA_OPT_DISABLE_OUTBOUND_REPL = 4_u32
  NTDSDSA_OPT_DISABLE_NTDSCONN_XLATE = 8_u32
  NTDSDSA_OPT_DISABLE_SPN_REGISTRATION = 16_u32
  NTDSDSA_OPT_GENERATE_OWN_TOPO = 32_u32
  NTDSDSA_OPT_BLOCK_RPC = 64_u32
  NTDSCONN_OPT_IS_GENERATED = 1_u32
  NTDSCONN_OPT_TWOWAY_SYNC = 2_u32
  NTDSCONN_OPT_OVERRIDE_NOTIFY_DEFAULT = 4_u32
  NTDSCONN_OPT_USE_NOTIFY = 8_u32
  NTDSCONN_OPT_DISABLE_INTERSITE_COMPRESSION = 16_u32
  NTDSCONN_OPT_USER_OWNED_SCHEDULE = 32_u32
  NTDSCONN_OPT_RODC_TOPOLOGY = 64_u32
  NTDSCONN_KCC_NO_REASON = 0_u32
  NTDSCONN_KCC_GC_TOPOLOGY = 1_u32
  NTDSCONN_KCC_RING_TOPOLOGY = 2_u32
  NTDSCONN_KCC_MINIMIZE_HOPS_TOPOLOGY = 4_u32
  NTDSCONN_KCC_STALE_SERVERS_TOPOLOGY = 8_u32
  NTDSCONN_KCC_OSCILLATING_CONNECTION_TOPOLOGY = 16_u32
  NTDSCONN_KCC_INTERSITE_GC_TOPOLOGY = 32_u32
  NTDSCONN_KCC_INTERSITE_TOPOLOGY = 64_u32
  NTDSCONN_KCC_SERVER_FAILOVER_TOPOLOGY = 128_u32
  NTDSCONN_KCC_SITE_FAILOVER_TOPOLOGY = 256_u32
  NTDSCONN_KCC_REDUNDANT_SERVER_TOPOLOGY = 512_u32
  FRSCONN_PRIORITY_MASK = 1879048192_u32
  FRSCONN_MAX_PRIORITY = 8_u32
  NTDSCONN_OPT_IGNORE_SCHEDULE_MASK = 2147483648_u32
  NTDSSETTINGS_OPT_IS_AUTO_TOPOLOGY_DISABLED = 1_u32
  NTDSSETTINGS_OPT_IS_TOPL_CLEANUP_DISABLED = 2_u32
  NTDSSETTINGS_OPT_IS_TOPL_MIN_HOPS_DISABLED = 4_u32
  NTDSSETTINGS_OPT_IS_TOPL_DETECT_STALE_DISABLED = 8_u32
  NTDSSETTINGS_OPT_IS_INTER_SITE_AUTO_TOPOLOGY_DISABLED = 16_u32
  NTDSSETTINGS_OPT_IS_GROUP_CACHING_ENABLED = 32_u32
  NTDSSETTINGS_OPT_FORCE_KCC_WHISTLER_BEHAVIOR = 64_u32
  NTDSSETTINGS_OPT_FORCE_KCC_W2K_ELECTION = 128_u32
  NTDSSETTINGS_OPT_IS_RAND_BH_SELECTION_DISABLED = 256_u32
  NTDSSETTINGS_OPT_IS_SCHEDULE_HASHING_ENABLED = 512_u32
  NTDSSETTINGS_OPT_IS_REDUNDANT_SERVER_TOPOLOGY_ENABLED = 1024_u32
  NTDSSETTINGS_OPT_W2K3_IGNORE_SCHEDULES = 2048_u32
  NTDSSETTINGS_OPT_W2K3_BRIDGES_REQUIRED = 4096_u32
  NTDSSETTINGS_DEFAULT_SERVER_REDUNDANCY = 2_u32
  NTDSTRANSPORT_OPT_IGNORE_SCHEDULES = 1_u32
  NTDSTRANSPORT_OPT_BRIDGES_REQUIRED = 2_u32
  NTDSSITECONN_OPT_USE_NOTIFY = 1_u32
  NTDSSITECONN_OPT_TWOWAY_SYNC = 2_u32
  NTDSSITECONN_OPT_DISABLE_COMPRESSION = 4_u32
  NTDSSITELINK_OPT_USE_NOTIFY = 1_u32
  NTDSSITELINK_OPT_TWOWAY_SYNC = 2_u32
  NTDSSITELINK_OPT_DISABLE_COMPRESSION = 4_u32
  DS_REPSYNCALL_NO_OPTIONS = 0_u32
  DS_REPSYNCALL_ABORT_IF_SERVER_UNAVAILABLE = 1_u32
  DS_REPSYNCALL_SYNC_ADJACENT_SERVERS_ONLY = 2_u32
  DS_REPSYNCALL_ID_SERVERS_BY_DN = 4_u32
  DS_REPSYNCALL_DO_NOT_SYNC = 8_u32
  DS_REPSYNCALL_SKIP_INITIAL_CHECK = 16_u32
  DS_REPSYNCALL_PUSH_CHANGES_OUTWARD = 32_u32
  DS_REPSYNCALL_CROSS_SITE_BOUNDARIES = 64_u32
  DS_LIST_DSA_OBJECT_FOR_SERVER = 0_u32
  DS_LIST_DNS_HOST_NAME_FOR_SERVER = 1_u32
  DS_LIST_ACCOUNT_OBJECT_FOR_SERVER = 2_u32
  DS_ROLE_SCHEMA_OWNER = 0_u32
  DS_ROLE_DOMAIN_OWNER = 1_u32
  DS_ROLE_PDC_OWNER = 2_u32
  DS_ROLE_RID_OWNER = 3_u32
  DS_ROLE_INFRASTRUCTURE_OWNER = 4_u32
  DS_SCHEMA_GUID_NOT_FOUND = 0_u32
  DS_SCHEMA_GUID_ATTR = 1_u32
  DS_SCHEMA_GUID_ATTR_SET = 2_u32
  DS_SCHEMA_GUID_CLASS = 3_u32
  DS_SCHEMA_GUID_CONTROL_RIGHT = 4_u32
  DS_KCC_FLAG_ASYNC_OP = 1_u32
  DS_KCC_FLAG_DAMPED = 2_u32
  DS_EXIST_ADVISORY_MODE = 1_u32
  DS_REPL_INFO_FLAG_IMPROVE_LINKED_ATTRS = 1_u32
  DS_REPL_NBR_WRITEABLE = 16_u32
  DS_REPL_NBR_SYNC_ON_STARTUP = 32_u32
  DS_REPL_NBR_DO_SCHEDULED_SYNCS = 64_u32
  DS_REPL_NBR_USE_ASYNC_INTERSITE_TRANSPORT = 128_u32
  DS_REPL_NBR_TWO_WAY_SYNC = 512_u32
  DS_REPL_NBR_NONGC_RO_REPLICA = 1024_u32
  DS_REPL_NBR_RETURN_OBJECT_PARENTS = 2048_u32
  DS_REPL_NBR_SELECT_SECRETS = 4096_u32
  DS_REPL_NBR_FULL_SYNC_IN_PROGRESS = 65536_u32
  DS_REPL_NBR_FULL_SYNC_NEXT_PACKET = 131072_u32
  DS_REPL_NBR_GCSPN = 1048576_u32
  DS_REPL_NBR_NEVER_SYNCED = 2097152_u32
  DS_REPL_NBR_PREEMPTED = 16777216_u32
  DS_REPL_NBR_IGNORE_CHANGE_NOTIFICATIONS = 67108864_u32
  DS_REPL_NBR_DISABLE_SCHEDULED_SYNC = 134217728_u32
  DS_REPL_NBR_COMPRESS_CHANGES = 268435456_u32
  DS_REPL_NBR_NO_CHANGE_NOTIFICATIONS = 536870912_u32
  DS_REPL_NBR_PARTIAL_ATTRIBUTE_SET = 1073741824_u32
  ADAM_REPL_AUTHENTICATION_MODE_NEGOTIATE_PASS_THROUGH = 0_u32
  ADAM_REPL_AUTHENTICATION_MODE_NEGOTIATE = 1_u32
  ADAM_REPL_AUTHENTICATION_MODE_MUTUAL_AUTH_REQUIRED = 2_u32
  FLAG_FOREST_OPTIONAL_FEATURE = 1_u32
  FLAG_DOMAIN_OPTIONAL_FEATURE = 2_u32
  FLAG_DISABLABLE_OPTIONAL_FEATURE = 4_u32
  FLAG_SERVER_OPTIONAL_FEATURE = 8_u32
  DSOP_SCOPE_TYPE_TARGET_COMPUTER = 1_u32
  DSOP_SCOPE_TYPE_UPLEVEL_JOINED_DOMAIN = 2_u32
  DSOP_SCOPE_TYPE_DOWNLEVEL_JOINED_DOMAIN = 4_u32
  DSOP_SCOPE_TYPE_ENTERPRISE_DOMAIN = 8_u32
  DSOP_SCOPE_TYPE_GLOBAL_CATALOG = 16_u32
  DSOP_SCOPE_TYPE_EXTERNAL_UPLEVEL_DOMAIN = 32_u32
  DSOP_SCOPE_TYPE_EXTERNAL_DOWNLEVEL_DOMAIN = 64_u32
  DSOP_SCOPE_TYPE_WORKGROUP = 128_u32
  DSOP_SCOPE_TYPE_USER_ENTERED_UPLEVEL_SCOPE = 256_u32
  DSOP_SCOPE_TYPE_USER_ENTERED_DOWNLEVEL_SCOPE = 512_u32
  DSOP_SCOPE_FLAG_STARTING_SCOPE = 1_u32
  DSOP_SCOPE_FLAG_WANT_PROVIDER_WINNT = 2_u32
  DSOP_SCOPE_FLAG_WANT_PROVIDER_LDAP = 4_u32
  DSOP_SCOPE_FLAG_WANT_PROVIDER_GC = 8_u32
  DSOP_SCOPE_FLAG_WANT_SID_PATH = 16_u32
  DSOP_SCOPE_FLAG_WANT_DOWNLEVEL_BUILTIN_PATH = 32_u32
  DSOP_SCOPE_FLAG_DEFAULT_FILTER_USERS = 64_u32
  DSOP_SCOPE_FLAG_DEFAULT_FILTER_GROUPS = 128_u32
  DSOP_SCOPE_FLAG_DEFAULT_FILTER_COMPUTERS = 256_u32
  DSOP_SCOPE_FLAG_DEFAULT_FILTER_CONTACTS = 512_u32
  DSOP_SCOPE_FLAG_DEFAULT_FILTER_SERVICE_ACCOUNTS = 1024_u32
  DSOP_SCOPE_FLAG_DEFAULT_FILTER_PASSWORDSETTINGS_OBJECTS = 2048_u32
  DSOP_FILTER_INCLUDE_ADVANCED_VIEW = 1_u32
  DSOP_FILTER_USERS = 2_u32
  DSOP_FILTER_BUILTIN_GROUPS = 4_u32
  DSOP_FILTER_WELL_KNOWN_PRINCIPALS = 8_u32
  DSOP_FILTER_UNIVERSAL_GROUPS_DL = 16_u32
  DSOP_FILTER_UNIVERSAL_GROUPS_SE = 32_u32
  DSOP_FILTER_GLOBAL_GROUPS_DL = 64_u32
  DSOP_FILTER_GLOBAL_GROUPS_SE = 128_u32
  DSOP_FILTER_DOMAIN_LOCAL_GROUPS_DL = 256_u32
  DSOP_FILTER_DOMAIN_LOCAL_GROUPS_SE = 512_u32
  DSOP_FILTER_CONTACTS = 1024_u32
  DSOP_FILTER_COMPUTERS = 2048_u32
  DSOP_FILTER_SERVICE_ACCOUNTS = 4096_u32
  DSOP_FILTER_PASSWORDSETTINGS_OBJECTS = 8192_u32
  DSOP_DOWNLEVEL_FILTER_USERS = 2147483649_u32
  DSOP_DOWNLEVEL_FILTER_LOCAL_GROUPS = 2147483650_u32
  DSOP_DOWNLEVEL_FILTER_GLOBAL_GROUPS = 2147483652_u32
  DSOP_DOWNLEVEL_FILTER_COMPUTERS = 2147483656_u32
  DSOP_DOWNLEVEL_FILTER_WORLD = 2147483664_u32
  DSOP_DOWNLEVEL_FILTER_AUTHENTICATED_USER = 2147483680_u32
  DSOP_DOWNLEVEL_FILTER_ANONYMOUS = 2147483712_u32
  DSOP_DOWNLEVEL_FILTER_BATCH = 2147483776_u32
  DSOP_DOWNLEVEL_FILTER_CREATOR_OWNER = 2147483904_u32
  DSOP_DOWNLEVEL_FILTER_CREATOR_GROUP = 2147484160_u32
  DSOP_DOWNLEVEL_FILTER_DIALUP = 2147484672_u32
  DSOP_DOWNLEVEL_FILTER_INTERACTIVE = 2147485696_u32
  DSOP_DOWNLEVEL_FILTER_NETWORK = 2147487744_u32
  DSOP_DOWNLEVEL_FILTER_SERVICE = 2147491840_u32
  DSOP_DOWNLEVEL_FILTER_SYSTEM = 2147500032_u32
  DSOP_DOWNLEVEL_FILTER_EXCLUDE_BUILTIN_GROUPS = 2147516416_u32
  DSOP_DOWNLEVEL_FILTER_TERMINAL_SERVER = 2147549184_u32
  DSOP_DOWNLEVEL_FILTER_ALL_WELLKNOWN_SIDS = 2147614720_u32
  DSOP_DOWNLEVEL_FILTER_LOCAL_SERVICE = 2147745792_u32
  DSOP_DOWNLEVEL_FILTER_NETWORK_SERVICE = 2148007936_u32
  DSOP_DOWNLEVEL_FILTER_REMOTE_LOGON = 2148532224_u32
  DSOP_DOWNLEVEL_FILTER_INTERNET_USER = 2149580800_u32
  DSOP_DOWNLEVEL_FILTER_OWNER_RIGHTS = 2151677952_u32
  DSOP_DOWNLEVEL_FILTER_SERVICES = 2155872256_u32
  DSOP_DOWNLEVEL_FILTER_LOCAL_LOGON = 2164260864_u32
  DSOP_DOWNLEVEL_FILTER_THIS_ORG_CERT = 2181038080_u32
  DSOP_DOWNLEVEL_FILTER_IIS_APP_POOL = 2214592512_u32
  DSOP_DOWNLEVEL_FILTER_ALL_APP_PACKAGES = 2281701376_u32
  DSOP_DOWNLEVEL_FILTER_LOCAL_ACCOUNTS = 2415919104_u32
  DSOP_FLAG_MULTISELECT = 1_u32
  DSOP_FLAG_SKIP_TARGET_COMPUTER_DC_CHECK = 2_u32
  SCHEDULE_INTERVAL = 0_u32
  SCHEDULE_BANDWIDTH = 1_u32
  SCHEDULE_PRIORITY = 2_u32
  FACILITY_NTDSB = 2048_u32
  FACILITY_BACKUP = 2047_u32
  FACILITY_SYSTEM = 0_u32
  STATUS_SEVERITY_SUCCESS = 0_u32
  STATUS_SEVERITY_INFORMATIONAL = 1_u32
  STATUS_SEVERITY_WARNING = 2_u32
  STATUS_SEVERITY_ERROR = 3_u32
  CLSID_DsObjectPicker = "17d6ccd8-3b7b-11d2-b9e0-00c04fd8dbf7"
  CLSID_PropertyEntry = LibC::GUID.new(0x72d3edc2_u32, 0xa4c4_u16, 0x11d0_u16, StaticArray[0x85_u8, 0x33_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
  CLSID_PropertyValue = LibC::GUID.new(0x7b9e38b0_u32, 0xa97c_u16, 0x11d0_u16, StaticArray[0x85_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
  CLSID_AccessControlEntry = LibC::GUID.new(0xb75ac000_u32, 0x9bdd_u16, 0x11d0_u16, StaticArray[0x85_u8, 0x2c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
  CLSID_AccessControlList = LibC::GUID.new(0xb85ea052_u32, 0x9bdd_u16, 0x11d0_u16, StaticArray[0x85_u8, 0x2c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
  CLSID_SecurityDescriptor = LibC::GUID.new(0xb958f73c_u32, 0x9bdd_u16, 0x11d0_u16, StaticArray[0x85_u8, 0x2c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
  CLSID_LargeInteger = LibC::GUID.new(0x927971f5_u32, 0x939_u16, 0x11d1_u16, StaticArray[0x8b_u8, 0xe1_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
  CLSID_NameTranslate = LibC::GUID.new(0x274fae1f_u32, 0x3626_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xa4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  CLSID_CaseIgnoreList = LibC::GUID.new(0x15f88a55_u32, 0x4680_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xb4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  CLSID_FaxNumber = LibC::GUID.new(0xa5062215_u32, 0x4681_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xb4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  CLSID_NetAddress = LibC::GUID.new(0xb0b71247_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  CLSID_OctetList = LibC::GUID.new(0x1241400f_u32, 0x4680_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xb4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  CLSID_Email = LibC::GUID.new(0x8f92a857_u32, 0x478e_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xb4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  CLSID_Path = LibC::GUID.new(0xb2538919_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  CLSID_ReplicaPointer = LibC::GUID.new(0xf5d1badf_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  CLSID_Timestamp = LibC::GUID.new(0xb2bed2eb_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  CLSID_PostalAddress = LibC::GUID.new(0xa75afcd_u32, 0x4680_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xb4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  CLSID_BackLink = LibC::GUID.new(0xfcbf906f_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  CLSID_TypedName = LibC::GUID.new(0xb33143cb_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  CLSID_Hold = LibC::GUID.new(0xb3ad3e13_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  CLSID_Pathname = LibC::GUID.new(0x80d0d78_u32, 0xf421_u16, 0x11d0_u16, StaticArray[0xa3_u8, 0x6e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  CLSID_ADSystemInfo = LibC::GUID.new(0x50b6327f_u32, 0xafd1_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0xb9_u8, 0x0_u8, 0x0_u8, 0xf8_u8, 0x7a_u8, 0x36_u8, 0x9e_u8])
  CLSID_WinNTSystemInfo = LibC::GUID.new(0x66182ec4_u32, 0xafd1_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0xb9_u8, 0x0_u8, 0x0_u8, 0xf8_u8, 0x7a_u8, 0x36_u8, 0x9e_u8])
  CLSID_DNWithBinary = LibC::GUID.new(0x7e99c0a3_u32, 0xf935_u16, 0x11d2_u16, StaticArray[0xba_u8, 0x96_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xd0_u8, 0xd1_u8])
  CLSID_DNWithString = LibC::GUID.new(0x334857cc_u32, 0xf934_u16, 0x11d2_u16, StaticArray[0xba_u8, 0x96_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xd0_u8, 0xd1_u8])
  CLSID_ADsSecurityUtility = LibC::GUID.new(0xf270c64a_u32, 0xffb8_u16, 0x4ae4_u16, StaticArray[0x85_u8, 0xfe_u8, 0x3a_u8, 0x75_u8, 0xe5_u8, 0x34_u8, 0x79_u8, 0x66_u8])

  alias LPCQADDFORMSPROC = Proc(LPARAM, CQFORM*, HRESULT)
  alias LPCQADDPAGESPROC = Proc(LPARAM, Guid*, CQPAGE*, HRESULT)
  alias LPCQPAGEPROC = Proc(CQPAGE*, LibC::HANDLE, UInt32, LibC::UINT_PTR, LPARAM, HRESULT)
  alias LPDSENUMATTRIBUTES = Proc(LPARAM, LibC::LPWSTR, LibC::LPWSTR, UInt32, HRESULT)


  enum ADSTYPEENUM : Int32
    ADSTYPE_INVALID = 0
    ADSTYPE_DN_STRING = 1
    ADSTYPE_CASE_EXACT_STRING = 2
    ADSTYPE_CASE_IGNORE_STRING = 3
    ADSTYPE_PRINTABLE_STRING = 4
    ADSTYPE_NUMERIC_STRING = 5
    ADSTYPE_BOOLEAN = 6
    ADSTYPE_INTEGER = 7
    ADSTYPE_OCTET_STRING = 8
    ADSTYPE_UTC_TIME = 9
    ADSTYPE_LARGE_INTEGER = 10
    ADSTYPE_PROV_SPECIFIC = 11
    ADSTYPE_OBJECT_CLASS = 12
    ADSTYPE_CASEIGNORE_LIST = 13
    ADSTYPE_OCTET_LIST = 14
    ADSTYPE_PATH = 15
    ADSTYPE_POSTALADDRESS = 16
    ADSTYPE_TIMESTAMP = 17
    ADSTYPE_BACKLINK = 18
    ADSTYPE_TYPEDNAME = 19
    ADSTYPE_HOLD = 20
    ADSTYPE_NETADDRESS = 21
    ADSTYPE_REPLICAPOINTER = 22
    ADSTYPE_FAXNUMBER = 23
    ADSTYPE_EMAIL = 24
    ADSTYPE_NT_SECURITY_DESCRIPTOR = 25
    ADSTYPE_UNKNOWN = 26
    ADSTYPE_DN_WITH_BINARY = 27
    ADSTYPE_DN_WITH_STRING = 28
  end

  enum ADS_AUTHENTICATION_ENUM : UInt32
    ADS_SECURE_AUTHENTICATION = 1
    ADS_USE_ENCRYPTION = 2
    ADS_USE_SSL = 2
    ADS_READONLY_SERVER = 4
    ADS_PROMPT_CREDENTIALS = 8
    ADS_NO_AUTHENTICATION = 16
    ADS_FAST_BIND = 32
    ADS_USE_SIGNING = 64
    ADS_USE_SEALING = 128
    ADS_USE_DELEGATION = 256
    ADS_SERVER_BIND = 512
    ADS_NO_REFERRAL_CHASING = 1024
    ADS_AUTH_RESERVED = 2147483648
  end

  enum ADS_STATUSENUM : Int32
    ADS_STATUS_S_OK = 0
    ADS_STATUS_INVALID_SEARCHPREF = 1
    ADS_STATUS_INVALID_SEARCHPREFVALUE = 2
  end

  enum ADS_DEREFENUM : Int32
    ADS_DEREF_NEVER = 0
    ADS_DEREF_SEARCHING = 1
    ADS_DEREF_FINDING = 2
    ADS_DEREF_ALWAYS = 3
  end

  enum ADS_SCOPEENUM : Int32
    ADS_SCOPE_BASE = 0
    ADS_SCOPE_ONELEVEL = 1
    ADS_SCOPE_SUBTREE = 2
  end

  enum ADS_PREFERENCES_ENUM : Int32
    ADSIPROP_ASYNCHRONOUS = 0
    ADSIPROP_DEREF_ALIASES = 1
    ADSIPROP_SIZE_LIMIT = 2
    ADSIPROP_TIME_LIMIT = 3
    ADSIPROP_ATTRIBTYPES_ONLY = 4
    ADSIPROP_SEARCH_SCOPE = 5
    ADSIPROP_TIMEOUT = 6
    ADSIPROP_PAGESIZE = 7
    ADSIPROP_PAGED_TIME_LIMIT = 8
    ADSIPROP_CHASE_REFERRALS = 9
    ADSIPROP_SORT_ON = 10
    ADSIPROP_CACHE_RESULTS = 11
    ADSIPROP_ADSIFLAG = 12
  end

  enum ADSI_DIALECT_ENUM : Int32
    ADSI_DIALECT_LDAP = 0
    ADSI_DIALECT_SQL = 1
  end

  enum ADS_CHASE_REFERRALS_ENUM : Int32
    ADS_CHASE_REFERRALS_NEVER = 0
    ADS_CHASE_REFERRALS_SUBORDINATE = 32
    ADS_CHASE_REFERRALS_EXTERNAL = 64
    ADS_CHASE_REFERRALS_ALWAYS = 96
  end

  enum ADS_SEARCHPREF_ENUM : Int32
    ADS_SEARCHPREF_ASYNCHRONOUS = 0
    ADS_SEARCHPREF_DEREF_ALIASES = 1
    ADS_SEARCHPREF_SIZE_LIMIT = 2
    ADS_SEARCHPREF_TIME_LIMIT = 3
    ADS_SEARCHPREF_ATTRIBTYPES_ONLY = 4
    ADS_SEARCHPREF_SEARCH_SCOPE = 5
    ADS_SEARCHPREF_TIMEOUT = 6
    ADS_SEARCHPREF_PAGESIZE = 7
    ADS_SEARCHPREF_PAGED_TIME_LIMIT = 8
    ADS_SEARCHPREF_CHASE_REFERRALS = 9
    ADS_SEARCHPREF_SORT_ON = 10
    ADS_SEARCHPREF_CACHE_RESULTS = 11
    ADS_SEARCHPREF_DIRSYNC = 12
    ADS_SEARCHPREF_TOMBSTONE = 13
    ADS_SEARCHPREF_VLV = 14
    ADS_SEARCHPREF_ATTRIBUTE_QUERY = 15
    ADS_SEARCHPREF_SECURITY_MASK = 16
    ADS_SEARCHPREF_DIRSYNC_FLAG = 17
    ADS_SEARCHPREF_EXTENDED_DN = 18
  end

  enum ADS_PASSWORD_ENCODING_ENUM : Int32
    ADS_PASSWORD_ENCODE_REQUIRE_SSL = 0
    ADS_PASSWORD_ENCODE_CLEAR = 1
  end

  enum ADS_PROPERTY_OPERATION_ENUM : Int32
    ADS_PROPERTY_CLEAR = 1
    ADS_PROPERTY_UPDATE = 2
    ADS_PROPERTY_APPEND = 3
    ADS_PROPERTY_DELETE = 4
  end

  enum ADS_SYSTEMFLAG_ENUM : Int32
    ADS_SYSTEMFLAG_DISALLOW_DELETE = -2147483648
    ADS_SYSTEMFLAG_CONFIG_ALLOW_RENAME = 1073741824
    ADS_SYSTEMFLAG_CONFIG_ALLOW_MOVE = 536870912
    ADS_SYSTEMFLAG_CONFIG_ALLOW_LIMITED_MOVE = 268435456
    ADS_SYSTEMFLAG_DOMAIN_DISALLOW_RENAME = 134217728
    ADS_SYSTEMFLAG_DOMAIN_DISALLOW_MOVE = 67108864
    ADS_SYSTEMFLAG_CR_NTDS_NC = 1
    ADS_SYSTEMFLAG_CR_NTDS_DOMAIN = 2
    ADS_SYSTEMFLAG_ATTR_NOT_REPLICATED = 1
    ADS_SYSTEMFLAG_ATTR_IS_CONSTRUCTED = 4
  end

  enum ADS_GROUP_TYPE_ENUM : Int32
    ADS_GROUP_TYPE_GLOBAL_GROUP = 2
    ADS_GROUP_TYPE_DOMAIN_LOCAL_GROUP = 4
    ADS_GROUP_TYPE_LOCAL_GROUP = 4
    ADS_GROUP_TYPE_UNIVERSAL_GROUP = 8
    ADS_GROUP_TYPE_SECURITY_ENABLED = -2147483648
  end

  enum ADS_USER_FLAG_ENUM : Int32
    ADS_UF_SCRIPT = 1
    ADS_UF_ACCOUNTDISABLE = 2
    ADS_UF_HOMEDIR_REQUIRED = 8
    ADS_UF_LOCKOUT = 16
    ADS_UF_PASSWD_NOTREQD = 32
    ADS_UF_PASSWD_CANT_CHANGE = 64
    ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED = 128
    ADS_UF_TEMP_DUPLICATE_ACCOUNT = 256
    ADS_UF_NORMAL_ACCOUNT = 512
    ADS_UF_INTERDOMAIN_TRUST_ACCOUNT = 2048
    ADS_UF_WORKSTATION_TRUST_ACCOUNT = 4096
    ADS_UF_SERVER_TRUST_ACCOUNT = 8192
    ADS_UF_DONT_EXPIRE_PASSWD = 65536
    ADS_UF_MNS_LOGON_ACCOUNT = 131072
    ADS_UF_SMARTCARD_REQUIRED = 262144
    ADS_UF_TRUSTED_FOR_DELEGATION = 524288
    ADS_UF_NOT_DELEGATED = 1048576
    ADS_UF_USE_DES_KEY_ONLY = 2097152
    ADS_UF_DONT_REQUIRE_PREAUTH = 4194304
    ADS_UF_PASSWORD_EXPIRED = 8388608
    ADS_UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION = 16777216
  end

  enum ADS_RIGHTS_ENUM : Int32
    ADS_RIGHT_DELETE = 65536
    ADS_RIGHT_READ_CONTROL = 131072
    ADS_RIGHT_WRITE_DAC = 262144
    ADS_RIGHT_WRITE_OWNER = 524288
    ADS_RIGHT_SYNCHRONIZE = 1048576
    ADS_RIGHT_ACCESS_SYSTEM_SECURITY = 16777216
    ADS_RIGHT_GENERIC_READ = -2147483648
    ADS_RIGHT_GENERIC_WRITE = 1073741824
    ADS_RIGHT_GENERIC_EXECUTE = 536870912
    ADS_RIGHT_GENERIC_ALL = 268435456
    ADS_RIGHT_DS_CREATE_CHILD = 1
    ADS_RIGHT_DS_DELETE_CHILD = 2
    ADS_RIGHT_ACTRL_DS_LIST = 4
    ADS_RIGHT_DS_SELF = 8
    ADS_RIGHT_DS_READ_PROP = 16
    ADS_RIGHT_DS_WRITE_PROP = 32
    ADS_RIGHT_DS_DELETE_TREE = 64
    ADS_RIGHT_DS_LIST_OBJECT = 128
    ADS_RIGHT_DS_CONTROL_ACCESS = 256
  end

  enum ADS_ACETYPE_ENUM : Int32
    ADS_ACETYPE_ACCESS_ALLOWED = 0
    ADS_ACETYPE_ACCESS_DENIED = 1
    ADS_ACETYPE_SYSTEM_AUDIT = 2
    ADS_ACETYPE_ACCESS_ALLOWED_OBJECT = 5
    ADS_ACETYPE_ACCESS_DENIED_OBJECT = 6
    ADS_ACETYPE_SYSTEM_AUDIT_OBJECT = 7
    ADS_ACETYPE_SYSTEM_ALARM_OBJECT = 8
    ADS_ACETYPE_ACCESS_ALLOWED_CALLBACK = 9
    ADS_ACETYPE_ACCESS_DENIED_CALLBACK = 10
    ADS_ACETYPE_ACCESS_ALLOWED_CALLBACK_OBJECT = 11
    ADS_ACETYPE_ACCESS_DENIED_CALLBACK_OBJECT = 12
    ADS_ACETYPE_SYSTEM_AUDIT_CALLBACK = 13
    ADS_ACETYPE_SYSTEM_ALARM_CALLBACK = 14
    ADS_ACETYPE_SYSTEM_AUDIT_CALLBACK_OBJECT = 15
    ADS_ACETYPE_SYSTEM_ALARM_CALLBACK_OBJECT = 16
  end

  enum ADS_ACEFLAG_ENUM : Int32
    ADS_ACEFLAG_INHERIT_ACE = 2
    ADS_ACEFLAG_NO_PROPAGATE_INHERIT_ACE = 4
    ADS_ACEFLAG_INHERIT_ONLY_ACE = 8
    ADS_ACEFLAG_INHERITED_ACE = 16
    ADS_ACEFLAG_VALID_INHERIT_FLAGS = 31
    ADS_ACEFLAG_SUCCESSFUL_ACCESS = 64
    ADS_ACEFLAG_FAILED_ACCESS = 128
  end

  enum ADS_FLAGTYPE_ENUM : Int32
    ADS_FLAG_OBJECT_TYPE_PRESENT = 1
    ADS_FLAG_INHERITED_OBJECT_TYPE_PRESENT = 2
  end

  enum ADS_SD_CONTROL_ENUM : Int32
    ADS_SD_CONTROL_SE_OWNER_DEFAULTED = 1
    ADS_SD_CONTROL_SE_GROUP_DEFAULTED = 2
    ADS_SD_CONTROL_SE_DACL_PRESENT = 4
    ADS_SD_CONTROL_SE_DACL_DEFAULTED = 8
    ADS_SD_CONTROL_SE_SACL_PRESENT = 16
    ADS_SD_CONTROL_SE_SACL_DEFAULTED = 32
    ADS_SD_CONTROL_SE_DACL_AUTO_INHERIT_REQ = 256
    ADS_SD_CONTROL_SE_SACL_AUTO_INHERIT_REQ = 512
    ADS_SD_CONTROL_SE_DACL_AUTO_INHERITED = 1024
    ADS_SD_CONTROL_SE_SACL_AUTO_INHERITED = 2048
    ADS_SD_CONTROL_SE_DACL_PROTECTED = 4096
    ADS_SD_CONTROL_SE_SACL_PROTECTED = 8192
    ADS_SD_CONTROL_SE_SELF_RELATIVE = 32768
  end

  enum ADS_SD_REVISION_ENUM : Int32
    ADS_SD_REVISION_DS = 4
  end

  enum ADS_NAME_TYPE_ENUM : Int32
    ADS_NAME_TYPE_1779 = 1
    ADS_NAME_TYPE_CANONICAL = 2
    ADS_NAME_TYPE_NT4 = 3
    ADS_NAME_TYPE_DISPLAY = 4
    ADS_NAME_TYPE_DOMAIN_SIMPLE = 5
    ADS_NAME_TYPE_ENTERPRISE_SIMPLE = 6
    ADS_NAME_TYPE_GUID = 7
    ADS_NAME_TYPE_UNKNOWN = 8
    ADS_NAME_TYPE_USER_PRINCIPAL_NAME = 9
    ADS_NAME_TYPE_CANONICAL_EX = 10
    ADS_NAME_TYPE_SERVICE_PRINCIPAL_NAME = 11
    ADS_NAME_TYPE_SID_OR_SID_HISTORY_NAME = 12
  end

  enum ADS_NAME_INITTYPE_ENUM : Int32
    ADS_NAME_INITTYPE_DOMAIN = 1
    ADS_NAME_INITTYPE_SERVER = 2
    ADS_NAME_INITTYPE_GC = 3
  end

  enum ADS_OPTION_ENUM : Int32
    ADS_OPTION_SERVERNAME = 0
    ADS_OPTION_REFERRALS = 1
    ADS_OPTION_PAGE_SIZE = 2
    ADS_OPTION_SECURITY_MASK = 3
    ADS_OPTION_MUTUAL_AUTH_STATUS = 4
    ADS_OPTION_QUOTA = 5
    ADS_OPTION_PASSWORD_PORTNUMBER = 6
    ADS_OPTION_PASSWORD_METHOD = 7
    ADS_OPTION_ACCUMULATIVE_MODIFICATION = 8
    ADS_OPTION_SKIP_SID_LOOKUP = 9
  end

  enum ADS_SECURITY_INFO_ENUM : Int32
    ADS_SECURITY_INFO_OWNER = 1
    ADS_SECURITY_INFO_GROUP = 2
    ADS_SECURITY_INFO_DACL = 4
    ADS_SECURITY_INFO_SACL = 8
  end

  enum ADS_SETTYPE_ENUM : Int32
    ADS_SETTYPE_FULL = 1
    ADS_SETTYPE_PROVIDER = 2
    ADS_SETTYPE_SERVER = 3
    ADS_SETTYPE_DN = 4
  end

  enum ADS_FORMAT_ENUM : Int32
    ADS_FORMAT_WINDOWS = 1
    ADS_FORMAT_WINDOWS_NO_SERVER = 2
    ADS_FORMAT_WINDOWS_DN = 3
    ADS_FORMAT_WINDOWS_PARENT = 4
    ADS_FORMAT_X500 = 5
    ADS_FORMAT_X500_NO_SERVER = 6
    ADS_FORMAT_X500_DN = 7
    ADS_FORMAT_X500_PARENT = 8
    ADS_FORMAT_SERVER = 9
    ADS_FORMAT_PROVIDER = 10
    ADS_FORMAT_LEAF = 11
  end

  enum ADS_DISPLAY_ENUM : Int32
    ADS_DISPLAY_FULL = 1
    ADS_DISPLAY_VALUE_ONLY = 2
  end

  enum ADS_ESCAPE_MODE_ENUM : Int32
    ADS_ESCAPEDMODE_DEFAULT = 1
    ADS_ESCAPEDMODE_ON = 2
    ADS_ESCAPEDMODE_OFF = 3
    ADS_ESCAPEDMODE_OFF_EX = 4
  end

  enum ADS_PATHTYPE_ENUM : Int32
    ADS_PATH_FILE = 1
    ADS_PATH_FILESHARE = 2
    ADS_PATH_REGISTRY = 3
  end

  enum ADS_SD_FORMAT_ENUM : Int32
    ADS_SD_FORMAT_IID = 1
    ADS_SD_FORMAT_RAW = 2
    ADS_SD_FORMAT_HEXSTRING = 3
  end

  enum DS_MANGLE_FOR : Int32
    DS_MANGLE_UNKNOWN = 0
    DS_MANGLE_OBJECT_RDN_FOR_DELETION = 1
    DS_MANGLE_OBJECT_RDN_FOR_NAME_CONFLICT = 2
  end

  enum DS_NAME_FORMAT : Int32
    DS_UNKNOWN_NAME = 0
    DS_FQDN_1779_NAME = 1
    DS_NT4_ACCOUNT_NAME = 2
    DS_DISPLAY_NAME = 3
    DS_UNIQUE_ID_NAME = 6
    DS_CANONICAL_NAME = 7
    DS_USER_PRINCIPAL_NAME = 8
    DS_CANONICAL_NAME_EX = 9
    DS_SERVICE_PRINCIPAL_NAME = 10
    DS_SID_OR_SID_HISTORY_NAME = 11
    DS_DNS_DOMAIN_NAME = 12
  end

  enum DS_NAME_FLAGS : Int32
    DS_NAME_NO_FLAGS = 0
    DS_NAME_FLAG_SYNTACTICAL_ONLY = 1
    DS_NAME_FLAG_EVAL_AT_DC = 2
    DS_NAME_FLAG_GCVERIFY = 4
    DS_NAME_FLAG_TRUST_REFERRAL = 8
  end

  enum DS_NAME_ERROR : Int32
    DS_NAME_NO_ERROR = 0
    DS_NAME_ERROR_RESOLVING = 1
    DS_NAME_ERROR_NOT_FOUND = 2
    DS_NAME_ERROR_NOT_UNIQUE = 3
    DS_NAME_ERROR_NO_MAPPING = 4
    DS_NAME_ERROR_DOMAIN_ONLY = 5
    DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING = 6
    DS_NAME_ERROR_TRUST_REFERRAL = 7
  end

  enum DS_SPN_NAME_TYPE : Int32
    DS_SPN_DNS_HOST = 0
    DS_SPN_DN_HOST = 1
    DS_SPN_NB_HOST = 2
    DS_SPN_DOMAIN = 3
    DS_SPN_NB_DOMAIN = 4
    DS_SPN_SERVICE = 5
  end

  enum DS_SPN_WRITE_OP : Int32
    DS_SPN_ADD_SPN_OP = 0
    DS_SPN_REPLACE_SPN_OP = 1
    DS_SPN_DELETE_SPN_OP = 2
  end

  enum DS_REPSYNCALL_ERROR : Int32
    DS_REPSYNCALL_WIN32_ERROR_CONTACTING_SERVER = 0
    DS_REPSYNCALL_WIN32_ERROR_REPLICATING = 1
    DS_REPSYNCALL_SERVER_UNREACHABLE = 2
  end

  enum DS_REPSYNCALL_EVENT : Int32
    DS_REPSYNCALL_EVENT_ERROR = 0
    DS_REPSYNCALL_EVENT_SYNC_STARTED = 1
    DS_REPSYNCALL_EVENT_SYNC_COMPLETED = 2
    DS_REPSYNCALL_EVENT_FINISHED = 3
  end

  enum DS_KCC_TASKID : Int32
    DS_KCC_TASKID_UPDATE_TOPOLOGY = 0
  end

  enum DS_REPL_INFO_TYPE : Int32
    DS_REPL_INFO_NEIGHBORS = 0
    DS_REPL_INFO_CURSORS_FOR_NC = 1
    DS_REPL_INFO_METADATA_FOR_OBJ = 2
    DS_REPL_INFO_KCC_DSA_CONNECT_FAILURES = 3
    DS_REPL_INFO_KCC_DSA_LINK_FAILURES = 4
    DS_REPL_INFO_PENDING_OPS = 5
    DS_REPL_INFO_METADATA_FOR_ATTR_VALUE = 6
    DS_REPL_INFO_CURSORS_2_FOR_NC = 7
    DS_REPL_INFO_CURSORS_3_FOR_NC = 8
    DS_REPL_INFO_METADATA_2_FOR_OBJ = 9
    DS_REPL_INFO_METADATA_2_FOR_ATTR_VALUE = 10
    DS_REPL_INFO_METADATA_EXT_FOR_ATTR_VALUE = 11
    DS_REPL_INFO_TYPE_MAX = 12
  end

  enum DS_REPL_OP_TYPE : Int32
    DS_REPL_OP_TYPE_SYNC = 0
    DS_REPL_OP_TYPE_ADD = 1
    DS_REPL_OP_TYPE_DELETE = 2
    DS_REPL_OP_TYPE_MODIFY = 3
    DS_REPL_OP_TYPE_UPDATE_REFS = 4
  end

  enum DSROLE_MACHINE_ROLE : Int32
    DsRole_RoleStandaloneWorkstation = 0
    DsRole_RoleMemberWorkstation = 1
    DsRole_RoleStandaloneServer = 2
    DsRole_RoleMemberServer = 3
    DsRole_RoleBackupDomainController = 4
    DsRole_RolePrimaryDomainController = 5
  end

  enum DSROLE_SERVER_STATE : Int32
    DsRoleServerUnknown = 0
    DsRoleServerPrimary = 1
    DsRoleServerBackup = 2
  end

  enum DSROLE_PRIMARY_DOMAIN_INFO_LEVEL : Int32
    DsRolePrimaryDomainInfoBasic = 1
    DsRoleUpgradeStatus = 2
    DsRoleOperationState = 3
  end

  enum DSROLE_OPERATION_STATE : Int32
    DsRoleOperationIdle = 0
    DsRoleOperationActive = 1
    DsRoleOperationNeedReboot = 2
  end

  union OPENQUERYWINDOW_Anonymous_e__Union
    p_form_parameters : Void*
    ppb_form_parameters : IPropertyBag
  end
  union ADSVALUE_Anonymous_e__Union
    dn_string : UInt16*
    case_exact_string : UInt16*
    case_ignore_string : UInt16*
    printable_string : UInt16*
    numeric_string : UInt16*
    boolean : UInt32
    integer : UInt32
    octet_string : ADS_OCTET_STRING
    utc_time : SYSTEMTIME
    large_integer : LARGE_INTEGER
    class_name : UInt16*
    provider_specific : ADS_PROV_SPECIFIC
    p_case_ignore_list : ADS_CASEIGNORE_LIST*
    p_octet_list : ADS_OCTET_LIST*
    p_path : ADS_PATH*
    p_postal_address : ADS_POSTALADDRESS*
    timestamp : ADS_TIMESTAMP
    back_link : ADS_BACKLINK
    p_typed_name : ADS_TYPEDNAME*
    hold : ADS_HOLD
    p_net_address : ADS_NETADDRESS*
    p_replica_pointer : ADS_REPLICAPOINTER*
    p_fax_number : ADS_FAXNUMBER*
    email : ADS_EMAIL
    security_descriptor : ADS_NT_SECURITY_DESCRIPTOR
    p_dn_with_binary : ADS_DN_WITH_BINARY*
    p_dn_with_string : ADS_DN_WITH_STRING*
  end

  struct CQFORM
    cb_struct : UInt32
    dw_flags : UInt32
    clsid : Guid
    h_icon : HANDLE
    psz_title : LibC::LPWSTR
  end
  struct CQPAGE
    cb_struct : UInt32
    dw_flags : UInt32
    p_page_proc : LPCQPAGEPROC
    h_instance : HINSTANCE
    id_page_name : Int32
    id_page_template : Int32
    p_dlg_proc : DLGPROC
    l_param : LPARAM
  end
  struct OPENQUERYWINDOW
    cb_struct : UInt32
    dw_flags : UInt32
    clsid_handler : Guid
    p_handler_parameters : Void*
    clsid_default_form : Guid
    p_persist_query : IPersistQuery
    anonymous : OPENQUERYWINDOW_Anonymous_e__Union
  end
  struct ADS_OCTET_STRING
    dw_length : UInt32
    lp_value : UInt8*
  end
  struct ADS_NT_SECURITY_DESCRIPTOR
    dw_length : UInt32
    lp_value : UInt8*
  end
  struct ADS_PROV_SPECIFIC
    dw_length : UInt32
    lp_value : UInt8*
  end
  struct ADS_CASEIGNORE_LIST
    next : ADS_CASEIGNORE_LIST*
    string : LibC::LPWSTR
  end
  struct ADS_OCTET_LIST
    next : ADS_OCTET_LIST*
    length : UInt32
    data : UInt8*
  end
  struct ADS_PATH
    type : UInt32
    volume_name : LibC::LPWSTR
    path : LibC::LPWSTR
  end
  struct ADS_POSTALADDRESS
    postal_address : LibC::LPWSTR[6]*
  end
  struct ADS_TIMESTAMP
    whole_seconds : UInt32
    event_id : UInt32
  end
  struct ADS_BACKLINK
    remote_id : UInt32
    object_name : LibC::LPWSTR
  end
  struct ADS_TYPEDNAME
    object_name : LibC::LPWSTR
    level : UInt32
    interval : UInt32
  end
  struct ADS_HOLD
    object_name : LibC::LPWSTR
    amount : UInt32
  end
  struct ADS_NETADDRESS
    address_type : UInt32
    address_length : UInt32
    address : UInt8*
  end
  struct ADS_REPLICAPOINTER
    server_name : LibC::LPWSTR
    replica_type : UInt32
    replica_number : UInt32
    count : UInt32
    replica_address_hints : ADS_NETADDRESS*
  end
  struct ADS_FAXNUMBER
    telephone_number : LibC::LPWSTR
    number_of_bits : UInt32
    parameters : UInt8*
  end
  struct ADS_EMAIL
    address : LibC::LPWSTR
    type : UInt32
  end
  struct ADS_DN_WITH_BINARY
    dw_length : UInt32
    lp_binary_value : UInt8*
    psz_dn_string : LibC::LPWSTR
  end
  struct ADS_DN_WITH_STRING
    psz_string_value : LibC::LPWSTR
    psz_dn_string : LibC::LPWSTR
  end
  struct ADSVALUE
    dw_type : ADSTYPEENUM
    anonymous : ADSVALUE_Anonymous_e__Union
  end
  struct ADS_ATTR_INFO
    psz_attr_name : LibC::LPWSTR
    dw_control_code : UInt32
    dw_a_ds_type : ADSTYPEENUM
    p_a_ds_values : ADSVALUE*
    dw_num_values : UInt32
  end
  struct ADS_OBJECT_INFO
    psz_rdn : LibC::LPWSTR
    psz_object_dn : LibC::LPWSTR
    psz_parent_dn : LibC::LPWSTR
    psz_schema_dn : LibC::LPWSTR
    psz_class_name : LibC::LPWSTR
  end
  struct Ads_searchpref_info
    dw_search_pref : ADS_SEARCHPREF_ENUM
    v_value : ADSVALUE
    dw_status : ADS_STATUSENUM
  end
  struct Ads_search_column
    psz_attr_name : LibC::LPWSTR
    dw_a_ds_type : ADSTYPEENUM
    p_a_ds_values : ADSVALUE*
    dw_num_values : UInt32
    h_reserved : LibC::HANDLE
  end
  struct ADS_ATTR_DEF
    psz_attr_name : LibC::LPWSTR
    dw_a_ds_type : ADSTYPEENUM
    dw_min_range : UInt32
    dw_max_range : UInt32
    f_multi_valued : LibC::BOOL
  end
  struct ADS_CLASS_DEF
    psz_class_name : LibC::LPWSTR
    dw_mandatory_attrs : UInt32
    ppsz_mandatory_attrs : LibC::LPWSTR*
    optional_attrs : UInt32
    ppsz_optional_attrs : LibC::LPWSTR**
    dw_naming_attrs : UInt32
    ppsz_naming_attrs : LibC::LPWSTR**
    dw_super_classes : UInt32
    ppsz_super_classes : LibC::LPWSTR**
    f_is_container : LibC::BOOL
  end
  struct ADS_SORTKEY
    psz_attr_type : LibC::LPWSTR
    psz_reserved : LibC::LPWSTR
    f_reverseorder : BOOLEAN
  end
  struct ADS_VLV
    dw_before_count : UInt32
    dw_after_count : UInt32
    dw_offset : UInt32
    dw_content_count : UInt32
    psz_target : LibC::LPWSTR
    dw_context_id_length : UInt32
    lp_context_id : UInt8*
  end
  struct DSOBJECT
    dw_flags : UInt32
    dw_provider_flags : UInt32
    offset_name : UInt32
    offset_class : UInt32
  end
  struct DSOBJECTNAMES
    clsid_namespace : Guid
    c_items : UInt32
    a_objects : DSOBJECT[0]*
  end
  struct DSDISPLAYSPECOPTIONS
    dw_size : UInt32
    dw_flags : UInt32
    offset_attrib_prefix : UInt32
    offset_user_name : UInt32
    offset_password : UInt32
    offset_server : UInt32
    offset_server_config_path : UInt32
  end
  struct DSPROPERTYPAGEINFO
    offset_string : UInt32
  end
  struct DOMAINDESC
    psz_name : LibC::LPWSTR
    psz_path : LibC::LPWSTR
    psz_nc_name : LibC::LPWSTR
    psz_trust_parent : LibC::LPWSTR
    psz_object_class : LibC::LPWSTR
    ul_flags : UInt32
    f_down_level : LibC::BOOL
    pd_child_list : DOMAINDESC*
    pd_next_sibling : DOMAINDESC*
  end
  struct DOMAIN_TREE
    ds_size : UInt32
    dw_count : UInt32
    a_domains : DOMAINDESC[0]*
  end
  struct DSCLASSCREATIONINFO
    dw_flags : UInt32
    clsid_wizard_dialog : Guid
    clsid_wizard_primary_page : Guid
    c_wizard_extensions : UInt32
    a_wizard_extensions : Guid[0]*
  end
  struct DSBROWSEINFOW
    cb_struct : UInt32
    hwnd_owner : HANDLE
    psz_caption : LibC::LPWSTR
    psz_title : LibC::LPWSTR
    psz_root : LibC::LPWSTR
    psz_path : LibC::LPWSTR
    cch_path : UInt32
    dw_flags : UInt32
    pfn_callback : BFFCALLBACK
    l_param : LPARAM
    dw_return_format : UInt32
    p_user_name : LibC::LPWSTR
    p_password : LibC::LPWSTR
    psz_object_class : LibC::LPWSTR
    cch_object_class : UInt32
  end
  struct DSBROWSEINFOA
    cb_struct : UInt32
    hwnd_owner : HANDLE
    psz_caption : PSTR
    psz_title : PSTR
    psz_root : LibC::LPWSTR
    psz_path : LibC::LPWSTR
    cch_path : UInt32
    dw_flags : UInt32
    pfn_callback : BFFCALLBACK
    l_param : LPARAM
    dw_return_format : UInt32
    p_user_name : LibC::LPWSTR
    p_password : LibC::LPWSTR
    psz_object_class : LibC::LPWSTR
    cch_object_class : UInt32
  end
  struct DSBITEMW
    cb_struct : UInt32
    psz_a_ds_path : LibC::LPWSTR
    psz_class : LibC::LPWSTR
    dw_mask : UInt32
    dw_state : UInt32
    dw_state_mask : UInt32
    sz_display_name : Char[64]*
    sz_icon_location : Char[260]*
    i_icon_res_id : Int32
  end
  struct DSBITEMA
    cb_struct : UInt32
    psz_a_ds_path : LibC::LPWSTR
    psz_class : LibC::LPWSTR
    dw_mask : UInt32
    dw_state : UInt32
    dw_state_mask : UInt32
    sz_display_name : CHAR[64]*
    sz_icon_location : CHAR[260]*
    i_icon_res_id : Int32
  end
  struct DSOP_UPLEVEL_FILTER_FLAGS
    fl_both_modes : UInt32
    fl_mixed_mode_only : UInt32
    fl_native_mode_only : UInt32
  end
  struct DSOP_FILTER_FLAGS
    uplevel : DSOP_UPLEVEL_FILTER_FLAGS
    fl_downlevel : UInt32
  end
  struct DSOP_SCOPE_INIT_INFO
    cb_size : UInt32
    fl_type : UInt32
    fl_scope : UInt32
    filter_flags : DSOP_FILTER_FLAGS
    pwz_dc_name : LibC::LPWSTR
    pwz_a_ds_path : LibC::LPWSTR
    hr : HRESULT
  end
  struct DSOP_INIT_INFO
    cb_size : UInt32
    pwz_target_computer : LibC::LPWSTR
    c_ds_scope_infos : UInt32
    a_ds_scope_infos : DSOP_SCOPE_INIT_INFO*
    fl_options : UInt32
    c_attributes_to_fetch : UInt32
    apwz_attribute_names : LibC::LPWSTR*
  end
  struct DS_SELECTION
    pwz_name : LibC::LPWSTR
    pwz_a_ds_path : LibC::LPWSTR
    pwz_class : LibC::LPWSTR
    pwz_upn : LibC::LPWSTR
    pvar_fetched_attributes : VARIANT*
    fl_scope_type : UInt32
  end
  struct DS_SELECTION_LIST
    c_items : UInt32
    c_fetched_attributes : UInt32
    a_ds_selection : DS_SELECTION[0]*
  end
  struct DSQUERYINITPARAMS
    cb_struct : UInt32
    dw_flags : UInt32
    p_default_scope : LibC::LPWSTR
    p_default_save_location : LibC::LPWSTR
    p_user_name : LibC::LPWSTR
    p_password : LibC::LPWSTR
    p_server : LibC::LPWSTR
  end
  struct DSCOLUMN
    dw_flags : UInt32
    fmt : Int32
    cx : Int32
    ids_name : Int32
    offset_property : Int32
    dw_reserved : UInt32
  end
  struct DSQUERYPARAMS
    cb_struct : UInt32
    dw_flags : UInt32
    h_instance : HINSTANCE
    offset_query : Int32
    i_columns : Int32
    dw_reserved : UInt32
    a_columns : DSCOLUMN[0]*
  end
  struct DSQUERYCLASSLIST
    cb_struct : UInt32
    c_classes : Int32
    offset_class : UInt32[0]*
  end
  struct DSA_NEWOBJ_DISPINFO
    dw_size : UInt32
    h_obj_class_icon : HANDLE
    lpsz_wiz_title : LibC::LPWSTR
    lpsz_cont_display_name : LibC::LPWSTR
  end
  struct ADSPROPINITPARAMS
    dw_size : UInt32
    dw_flags : UInt32
    hr : HRESULT
    p_ds_obj : IDirectoryObject
    pwz_cn : LibC::LPWSTR
    p_writable_attrs : ADS_ATTR_INFO*
  end
  struct ADSPROPERROR
    hwnd_page : HANDLE
    psz_page_title : LibC::LPWSTR
    psz_obj_path : LibC::LPWSTR
    psz_obj_class : LibC::LPWSTR
    hr : HRESULT
    psz_error : LibC::LPWSTR
  end
  struct SCHEDULE_HEADER
    type : UInt32
    offset : UInt32
  end
  struct SCHEDULE
    size : UInt32
    bandwidth : UInt32
    number_of_schedules : UInt32
    schedules : SCHEDULE_HEADER[0]*
  end
  struct DS_NAME_RESULT_ITEMA
    status : UInt32
    p_domain : PSTR
    p_name : PSTR
  end
  struct DS_NAME_RESULTA
    c_items : UInt32
    r_items : DS_NAME_RESULT_ITEMA*
  end
  struct DS_NAME_RESULT_ITEMW
    status : UInt32
    p_domain : LibC::LPWSTR
    p_name : LibC::LPWSTR
  end
  struct DS_NAME_RESULTW
    c_items : UInt32
    r_items : DS_NAME_RESULT_ITEMW*
  end
  struct DS_REPSYNCALL_SYNCA
    psz_src_id : PSTR
    psz_dst_id : PSTR
    psz_nc : PSTR
    pguid_src : Guid*
    pguid_dst : Guid*
  end
  struct DS_REPSYNCALL_SYNCW
    psz_src_id : LibC::LPWSTR
    psz_dst_id : LibC::LPWSTR
    psz_nc : LibC::LPWSTR
    pguid_src : Guid*
    pguid_dst : Guid*
  end
  struct DS_REPSYNCALL_ERRINFOA
    psz_svr_id : PSTR
    error : DS_REPSYNCALL_ERROR
    dw_win32_err : UInt32
    psz_src_id : PSTR
  end
  struct DS_REPSYNCALL_ERRINFOW
    psz_svr_id : LibC::LPWSTR
    error : DS_REPSYNCALL_ERROR
    dw_win32_err : UInt32
    psz_src_id : LibC::LPWSTR
  end
  struct DS_REPSYNCALL_UPDATEA
    event : DS_REPSYNCALL_EVENT
    p_err_info : DS_REPSYNCALL_ERRINFOA*
    p_sync : DS_REPSYNCALL_SYNCA*
  end
  struct DS_REPSYNCALL_UPDATEW
    event : DS_REPSYNCALL_EVENT
    p_err_info : DS_REPSYNCALL_ERRINFOW*
    p_sync : DS_REPSYNCALL_SYNCW*
  end
  struct DS_SITE_COST_INFO
    error_code : UInt32
    cost : UInt32
  end
  struct DS_SCHEMA_GUID_MAPA
    guid : Guid
    guid_type : UInt32
    p_name : PSTR
  end
  struct DS_SCHEMA_GUID_MAPW
    guid : Guid
    guid_type : UInt32
    p_name : LibC::LPWSTR
  end
  struct DS_DOMAIN_CONTROLLER_INFO_1A
    netbios_name : PSTR
    dns_host_name : PSTR
    site_name : PSTR
    computer_object_name : PSTR
    server_object_name : PSTR
    f_is_pdc : LibC::BOOL
    f_ds_enabled : LibC::BOOL
  end
  struct DS_DOMAIN_CONTROLLER_INFO_1W
    netbios_name : LibC::LPWSTR
    dns_host_name : LibC::LPWSTR
    site_name : LibC::LPWSTR
    computer_object_name : LibC::LPWSTR
    server_object_name : LibC::LPWSTR
    f_is_pdc : LibC::BOOL
    f_ds_enabled : LibC::BOOL
  end
  struct DS_DOMAIN_CONTROLLER_INFO_2A
    netbios_name : PSTR
    dns_host_name : PSTR
    site_name : PSTR
    site_object_name : PSTR
    computer_object_name : PSTR
    server_object_name : PSTR
    ntds_dsa_object_name : PSTR
    f_is_pdc : LibC::BOOL
    f_ds_enabled : LibC::BOOL
    f_is_gc : LibC::BOOL
    site_object_guid : Guid
    computer_object_guid : Guid
    server_object_guid : Guid
    ntds_dsa_object_guid : Guid
  end
  struct DS_DOMAIN_CONTROLLER_INFO_2W
    netbios_name : LibC::LPWSTR
    dns_host_name : LibC::LPWSTR
    site_name : LibC::LPWSTR
    site_object_name : LibC::LPWSTR
    computer_object_name : LibC::LPWSTR
    server_object_name : LibC::LPWSTR
    ntds_dsa_object_name : LibC::LPWSTR
    f_is_pdc : LibC::BOOL
    f_ds_enabled : LibC::BOOL
    f_is_gc : LibC::BOOL
    site_object_guid : Guid
    computer_object_guid : Guid
    server_object_guid : Guid
    ntds_dsa_object_guid : Guid
  end
  struct DS_DOMAIN_CONTROLLER_INFO_3A
    netbios_name : PSTR
    dns_host_name : PSTR
    site_name : PSTR
    site_object_name : PSTR
    computer_object_name : PSTR
    server_object_name : PSTR
    ntds_dsa_object_name : PSTR
    f_is_pdc : LibC::BOOL
    f_ds_enabled : LibC::BOOL
    f_is_gc : LibC::BOOL
    f_is_rodc : LibC::BOOL
    site_object_guid : Guid
    computer_object_guid : Guid
    server_object_guid : Guid
    ntds_dsa_object_guid : Guid
  end
  struct DS_DOMAIN_CONTROLLER_INFO_3W
    netbios_name : LibC::LPWSTR
    dns_host_name : LibC::LPWSTR
    site_name : LibC::LPWSTR
    site_object_name : LibC::LPWSTR
    computer_object_name : LibC::LPWSTR
    server_object_name : LibC::LPWSTR
    ntds_dsa_object_name : LibC::LPWSTR
    f_is_pdc : LibC::BOOL
    f_ds_enabled : LibC::BOOL
    f_is_gc : LibC::BOOL
    f_is_rodc : LibC::BOOL
    site_object_guid : Guid
    computer_object_guid : Guid
    server_object_guid : Guid
    ntds_dsa_object_guid : Guid
  end
  struct DS_REPL_NEIGHBORW
    psz_naming_context : LibC::LPWSTR
    psz_source_dsa_dn : LibC::LPWSTR
    psz_source_dsa_address : LibC::LPWSTR
    psz_async_intersite_transport_dn : LibC::LPWSTR
    dw_replica_flags : UInt32
    dw_reserved : UInt32
    uuid_naming_context_obj_guid : Guid
    uuid_source_dsa_obj_guid : Guid
    uuid_source_dsa_invocation_id : Guid
    uuid_async_intersite_transport_obj_guid : Guid
    usn_last_obj_change_synced : Int64
    usn_attribute_filter : Int64
    ftime_last_sync_success : FILETIME
    ftime_last_sync_attempt : FILETIME
    dw_last_sync_result : UInt32
    c_num_consecutive_sync_failures : UInt32
  end
  struct DS_REPL_NEIGHBORW_BLOB
    osz_naming_context : UInt32
    osz_source_dsa_dn : UInt32
    osz_source_dsa_address : UInt32
    osz_async_intersite_transport_dn : UInt32
    dw_replica_flags : UInt32
    dw_reserved : UInt32
    uuid_naming_context_obj_guid : Guid
    uuid_source_dsa_obj_guid : Guid
    uuid_source_dsa_invocation_id : Guid
    uuid_async_intersite_transport_obj_guid : Guid
    usn_last_obj_change_synced : Int64
    usn_attribute_filter : Int64
    ftime_last_sync_success : FILETIME
    ftime_last_sync_attempt : FILETIME
    dw_last_sync_result : UInt32
    c_num_consecutive_sync_failures : UInt32
  end
  struct DS_REPL_NEIGHBORSW
    c_num_neighbors : UInt32
    dw_reserved : UInt32
    rg_neighbor : DS_REPL_NEIGHBORW[0]*
  end
  struct DS_REPL_CURSOR
    uuid_source_dsa_invocation_id : Guid
    usn_attribute_filter : Int64
  end
  struct DS_REPL_CURSOR_2
    uuid_source_dsa_invocation_id : Guid
    usn_attribute_filter : Int64
    ftime_last_sync_success : FILETIME
  end
  struct DS_REPL_CURSOR_3W
    uuid_source_dsa_invocation_id : Guid
    usn_attribute_filter : Int64
    ftime_last_sync_success : FILETIME
    psz_source_dsa_dn : LibC::LPWSTR
  end
  struct DS_REPL_CURSOR_BLOB
    uuid_source_dsa_invocation_id : Guid
    usn_attribute_filter : Int64
    ftime_last_sync_success : FILETIME
    osz_source_dsa_dn : UInt32
  end
  struct DS_REPL_CURSORS
    c_num_cursors : UInt32
    dw_reserved : UInt32
    rg_cursor : DS_REPL_CURSOR[0]*
  end
  struct DS_REPL_CURSORS_2
    c_num_cursors : UInt32
    dw_enumeration_context : UInt32
    rg_cursor : DS_REPL_CURSOR_2[0]*
  end
  struct DS_REPL_CURSORS_3W
    c_num_cursors : UInt32
    dw_enumeration_context : UInt32
    rg_cursor : DS_REPL_CURSOR_3W[0]*
  end
  struct DS_REPL_ATTR_META_DATA
    psz_attribute_name : LibC::LPWSTR
    dw_version : UInt32
    ftime_last_originating_change : FILETIME
    uuid_last_originating_dsa_invocation_id : Guid
    usn_originating_change : Int64
    usn_local_change : Int64
  end
  struct DS_REPL_ATTR_META_DATA_2
    psz_attribute_name : LibC::LPWSTR
    dw_version : UInt32
    ftime_last_originating_change : FILETIME
    uuid_last_originating_dsa_invocation_id : Guid
    usn_originating_change : Int64
    usn_local_change : Int64
    psz_last_originating_dsa_dn : LibC::LPWSTR
  end
  struct DS_REPL_ATTR_META_DATA_BLOB
    osz_attribute_name : UInt32
    dw_version : UInt32
    ftime_last_originating_change : FILETIME
    uuid_last_originating_dsa_invocation_id : Guid
    usn_originating_change : Int64
    usn_local_change : Int64
    osz_last_originating_dsa_dn : UInt32
  end
  struct DS_REPL_OBJ_META_DATA
    c_num_entries : UInt32
    dw_reserved : UInt32
    rg_meta_data : DS_REPL_ATTR_META_DATA[0]*
  end
  struct DS_REPL_OBJ_META_DATA_2
    c_num_entries : UInt32
    dw_reserved : UInt32
    rg_meta_data : DS_REPL_ATTR_META_DATA_2[0]*
  end
  struct DS_REPL_KCC_DSA_FAILUREW
    psz_dsa_dn : LibC::LPWSTR
    uuid_dsa_obj_guid : Guid
    ftime_first_failure : FILETIME
    c_num_failures : UInt32
    dw_last_result : UInt32
  end
  struct DS_REPL_KCC_DSA_FAILUREW_BLOB
    osz_dsa_dn : UInt32
    uuid_dsa_obj_guid : Guid
    ftime_first_failure : FILETIME
    c_num_failures : UInt32
    dw_last_result : UInt32
  end
  struct DS_REPL_KCC_DSA_FAILURESW
    c_num_entries : UInt32
    dw_reserved : UInt32
    rg_dsa_failure : DS_REPL_KCC_DSA_FAILUREW[0]*
  end
  struct DS_REPL_OPW
    ftime_enqueued : FILETIME
    ul_serial_number : UInt32
    ul_priority : UInt32
    op_type : DS_REPL_OP_TYPE
    ul_options : UInt32
    psz_naming_context : LibC::LPWSTR
    psz_dsa_dn : LibC::LPWSTR
    psz_dsa_address : LibC::LPWSTR
    uuid_naming_context_obj_guid : Guid
    uuid_dsa_obj_guid : Guid
  end
  struct DS_REPL_OPW_BLOB
    ftime_enqueued : FILETIME
    ul_serial_number : UInt32
    ul_priority : UInt32
    op_type : DS_REPL_OP_TYPE
    ul_options : UInt32
    osz_naming_context : UInt32
    osz_dsa_dn : UInt32
    osz_dsa_address : UInt32
    uuid_naming_context_obj_guid : Guid
    uuid_dsa_obj_guid : Guid
  end
  struct DS_REPL_PENDING_OPSW
    ftime_current_op_started : FILETIME
    c_num_pending_ops : UInt32
    rg_pending_op : DS_REPL_OPW[0]*
  end
  struct DS_REPL_VALUE_META_DATA
    psz_attribute_name : LibC::LPWSTR
    psz_object_dn : LibC::LPWSTR
    cb_data : UInt32
    pb_data : UInt8*
    ftime_deleted : FILETIME
    ftime_created : FILETIME
    dw_version : UInt32
    ftime_last_originating_change : FILETIME
    uuid_last_originating_dsa_invocation_id : Guid
    usn_originating_change : Int64
    usn_local_change : Int64
  end
  struct DS_REPL_VALUE_META_DATA_2
    psz_attribute_name : LibC::LPWSTR
    psz_object_dn : LibC::LPWSTR
    cb_data : UInt32
    pb_data : UInt8*
    ftime_deleted : FILETIME
    ftime_created : FILETIME
    dw_version : UInt32
    ftime_last_originating_change : FILETIME
    uuid_last_originating_dsa_invocation_id : Guid
    usn_originating_change : Int64
    usn_local_change : Int64
    psz_last_originating_dsa_dn : LibC::LPWSTR
  end
  struct DS_REPL_VALUE_META_DATA_EXT
    psz_attribute_name : LibC::LPWSTR
    psz_object_dn : LibC::LPWSTR
    cb_data : UInt32
    pb_data : UInt8*
    ftime_deleted : FILETIME
    ftime_created : FILETIME
    dw_version : UInt32
    ftime_last_originating_change : FILETIME
    uuid_last_originating_dsa_invocation_id : Guid
    usn_originating_change : Int64
    usn_local_change : Int64
    psz_last_originating_dsa_dn : LibC::LPWSTR
    dw_user_identifier : UInt32
    dw_prior_link_state : UInt32
    dw_current_link_state : UInt32
  end
  struct DS_REPL_VALUE_META_DATA_BLOB
    osz_attribute_name : UInt32
    osz_object_dn : UInt32
    cb_data : UInt32
    ob_data : UInt32
    ftime_deleted : FILETIME
    ftime_created : FILETIME
    dw_version : UInt32
    ftime_last_originating_change : FILETIME
    uuid_last_originating_dsa_invocation_id : Guid
    usn_originating_change : Int64
    usn_local_change : Int64
    osz_last_originating_dsa_dn : UInt32
  end
  struct DS_REPL_VALUE_META_DATA_BLOB_EXT
    osz_attribute_name : UInt32
    osz_object_dn : UInt32
    cb_data : UInt32
    ob_data : UInt32
    ftime_deleted : FILETIME
    ftime_created : FILETIME
    dw_version : UInt32
    ftime_last_originating_change : FILETIME
    uuid_last_originating_dsa_invocation_id : Guid
    usn_originating_change : Int64
    usn_local_change : Int64
    osz_last_originating_dsa_dn : UInt32
    dw_user_identifier : UInt32
    dw_prior_link_state : UInt32
    dw_current_link_state : UInt32
  end
  struct DS_REPL_ATTR_VALUE_META_DATA
    c_num_entries : UInt32
    dw_enumeration_context : UInt32
    rg_meta_data : DS_REPL_VALUE_META_DATA[0]*
  end
  struct DS_REPL_ATTR_VALUE_META_DATA_2
    c_num_entries : UInt32
    dw_enumeration_context : UInt32
    rg_meta_data : DS_REPL_VALUE_META_DATA_2[0]*
  end
  struct DS_REPL_ATTR_VALUE_META_DATA_EXT
    c_num_entries : UInt32
    dw_enumeration_context : UInt32
    rg_meta_data : DS_REPL_VALUE_META_DATA_EXT[0]*
  end
  struct DS_REPL_QUEUE_STATISTICSW
    ftime_current_op_started : FILETIME
    c_num_pending_ops : UInt32
    ftime_oldest_sync : FILETIME
    ftime_oldest_add : FILETIME
    ftime_oldest_mod : FILETIME
    ftime_oldest_del : FILETIME
    ftime_oldest_upd_refs : FILETIME
  end
  struct DSROLE_PRIMARY_DOMAIN_INFO_BASIC
    machine_role : DSROLE_MACHINE_ROLE
    flags : UInt32
    domain_name_flat : LibC::LPWSTR
    domain_name_dns : LibC::LPWSTR
    domain_forest_name : LibC::LPWSTR
    domain_guid : Guid
  end
  struct DSROLE_UPGRADE_STATUS_INFO
    operation_state : UInt32
    previous_server_state : DSROLE_SERVER_STATE
  end
  struct DSROLE_OPERATION_STATE_INFO
    operation_state : DSROLE_OPERATION_STATE
  end
  struct DOMAIN_CONTROLLER_INFOA
    domain_controller_name : PSTR
    domain_controller_address : PSTR
    domain_controller_address_type : UInt32
    domain_guid : Guid
    domain_name : PSTR
    dns_forest_name : PSTR
    flags : UInt32
    dc_site_name : PSTR
    client_site_name : PSTR
  end
  struct DOMAIN_CONTROLLER_INFOW
    domain_controller_name : LibC::LPWSTR
    domain_controller_address : LibC::LPWSTR
    domain_controller_address_type : UInt32
    domain_guid : Guid
    domain_name : LibC::LPWSTR
    dns_forest_name : LibC::LPWSTR
    flags : UInt32
    dc_site_name : LibC::LPWSTR
    client_site_name : LibC::LPWSTR
  end
  struct DS_DOMAIN_TRUSTSW
    netbios_domain_name : LibC::LPWSTR
    dns_domain_name : LibC::LPWSTR
    flags : UInt32
    parent_index : UInt32
    trust_type : UInt32
    trust_attributes : UInt32
    domain_sid : PSID
    domain_guid : Guid
  end
  struct DS_DOMAIN_TRUSTSA
    netbios_domain_name : PSTR
    dns_domain_name : PSTR
    flags : UInt32
    parent_index : UInt32
    trust_type : UInt32
    trust_attributes : UInt32
    domain_sid : PSID
    domain_guid : Guid
  end


  struct IQueryFormVTbl
    query_interface : Proc(IQueryForm*, Guid*, Void**, HRESULT)
    add_ref : Proc(IQueryForm*, UInt32)
    release : Proc(IQueryForm*, UInt32)
    initialize : Proc(IQueryForm*, HKEY, HRESULT)
    add_forms : Proc(IQueryForm*, LPCQADDFORMSPROC, LPARAM, HRESULT)
    add_pages : Proc(IQueryForm*, LPCQADDPAGESPROC, LPARAM, HRESULT)
  end

  IQueryForm_GUID = "8cfcee30-39bd-11d0-b8d1-00a024ab2dbb"
  IID_IQueryForm = LibC::GUID.new(0x8cfcee30_u32, 0x39bd_u16, 0x11d0_u16, StaticArray[0xb8_u8, 0xd1_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0xab_u8, 0x2d_u8, 0xbb_u8])
  struct IQueryForm
    lpVtbl : IQueryFormVTbl*
  end

  struct IPersistQueryVTbl
    query_interface : Proc(IPersistQuery*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPersistQuery*, UInt32)
    release : Proc(IPersistQuery*, UInt32)
    get_class_id : Proc(IPersistQuery*, Guid*, HRESULT)
    write_string : Proc(IPersistQuery*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    read_string : Proc(IPersistQuery*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, Int32, HRESULT)
    write_int : Proc(IPersistQuery*, LibC::LPWSTR, LibC::LPWSTR, Int32, HRESULT)
    read_int : Proc(IPersistQuery*, LibC::LPWSTR, LibC::LPWSTR, Int32*, HRESULT)
    write_struct : Proc(IPersistQuery*, LibC::LPWSTR, LibC::LPWSTR, Void*, UInt32, HRESULT)
    read_struct : Proc(IPersistQuery*, LibC::LPWSTR, LibC::LPWSTR, Void*, UInt32, HRESULT)
    clear : Proc(IPersistQuery*, HRESULT)
  end

  IPersistQuery_GUID = "1a3114b8-a62e-11d0-a6c5-00a0c906af45"
  IID_IPersistQuery = LibC::GUID.new(0x1a3114b8_u32, 0xa62e_u16, 0x11d0_u16, StaticArray[0xa6_u8, 0xc5_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x6_u8, 0xaf_u8, 0x45_u8])
  struct IPersistQuery
    lpVtbl : IPersistQueryVTbl*
  end

  struct ICommonQueryVTbl
    query_interface : Proc(ICommonQuery*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICommonQuery*, UInt32)
    release : Proc(ICommonQuery*, UInt32)
    open_query_window : Proc(ICommonQuery*, LibC::HANDLE, OPENQUERYWINDOW*, IDataObject*, HRESULT)
  end

  ICommonQuery_GUID = "ab50dec0-6f1d-11d0-a1c4-00aa00c16e65"
  IID_ICommonQuery = LibC::GUID.new(0xab50dec0_u32, 0x6f1d_u16, 0x11d0_u16, StaticArray[0xa1_u8, 0xc4_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xc1_u8, 0x6e_u8, 0x65_u8])
  struct ICommonQuery
    lpVtbl : ICommonQueryVTbl*
  end

  struct IADsVTbl
    query_interface : Proc(IADs*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADs*, UInt32)
    release : Proc(IADs*, UInt32)
    get_type_info_count : Proc(IADs*, UInt32*, HRESULT)
    get_type_info : Proc(IADs*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADs*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADs*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IADs*, UInt8**, HRESULT)
    get_class : Proc(IADs*, UInt8**, HRESULT)
    get_guid : Proc(IADs*, UInt8**, HRESULT)
    get_a_ds_path : Proc(IADs*, UInt8**, HRESULT)
    get_parent : Proc(IADs*, UInt8**, HRESULT)
    get_schema : Proc(IADs*, UInt8**, HRESULT)
    get_info : Proc(IADs*, HRESULT)
    set_info : Proc(IADs*, HRESULT)
    get : Proc(IADs*, UInt8*, VARIANT*, HRESULT)
    put : Proc(IADs*, UInt8*, VARIANT, HRESULT)
    get_ex : Proc(IADs*, UInt8*, VARIANT*, HRESULT)
    put_ex : Proc(IADs*, Int32, UInt8*, VARIANT, HRESULT)
    get_info_ex : Proc(IADs*, VARIANT, Int32, HRESULT)
  end

  IADs_GUID = "fd8256d0-fd15-11ce-abc4-02608c9e7553"
  IID_IADs = LibC::GUID.new(0xfd8256d0_u32, 0xfd15_u16, 0x11ce_u16, StaticArray[0xab_u8, 0xc4_u8, 0x2_u8, 0x60_u8, 0x8c_u8, 0x9e_u8, 0x75_u8, 0x53_u8])
  struct IADs
    lpVtbl : IADsVTbl*
  end

  struct IADsContainerVTbl
    query_interface : Proc(IADsContainer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsContainer*, UInt32)
    release : Proc(IADsContainer*, UInt32)
    get_type_info_count : Proc(IADsContainer*, UInt32*, HRESULT)
    get_type_info : Proc(IADsContainer*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsContainer*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsContainer*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(IADsContainer*, Int32*, HRESULT)
    get__new_enum : Proc(IADsContainer*, IUnknown*, HRESULT)
    get_filter : Proc(IADsContainer*, VARIANT*, HRESULT)
    put_filter : Proc(IADsContainer*, VARIANT, HRESULT)
    get_hints : Proc(IADsContainer*, VARIANT*, HRESULT)
    put_hints : Proc(IADsContainer*, VARIANT, HRESULT)
    get_object : Proc(IADsContainer*, UInt8*, UInt8*, IDispatch*, HRESULT)
    create : Proc(IADsContainer*, UInt8*, UInt8*, IDispatch*, HRESULT)
    delete : Proc(IADsContainer*, UInt8*, UInt8*, HRESULT)
    copy_here : Proc(IADsContainer*, UInt8*, UInt8*, IDispatch*, HRESULT)
    move_here : Proc(IADsContainer*, UInt8*, UInt8*, IDispatch*, HRESULT)
  end

  IADsContainer_GUID = "001677d0-fd16-11ce-abc4-02608c9e7553"
  IID_IADsContainer = LibC::GUID.new(0x1677d0_u32, 0xfd16_u16, 0x11ce_u16, StaticArray[0xab_u8, 0xc4_u8, 0x2_u8, 0x60_u8, 0x8c_u8, 0x9e_u8, 0x75_u8, 0x53_u8])
  struct IADsContainer
    lpVtbl : IADsContainerVTbl*
  end

  struct IADsCollectionVTbl
    query_interface : Proc(IADsCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsCollection*, UInt32)
    release : Proc(IADsCollection*, UInt32)
    get_type_info_count : Proc(IADsCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IADsCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get__new_enum : Proc(IADsCollection*, IUnknown*, HRESULT)
    add : Proc(IADsCollection*, UInt8*, VARIANT, HRESULT)
    remove : Proc(IADsCollection*, UInt8*, HRESULT)
    get_object : Proc(IADsCollection*, UInt8*, VARIANT*, HRESULT)
  end

  IADsCollection_GUID = "72b945e0-253b-11cf-a988-00aa006bc149"
  IID_IADsCollection = LibC::GUID.new(0x72b945e0_u32, 0x253b_u16, 0x11cf_u16, StaticArray[0xa9_u8, 0x88_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0xc1_u8, 0x49_u8])
  struct IADsCollection
    lpVtbl : IADsCollectionVTbl*
  end

  struct IADsMembersVTbl
    query_interface : Proc(IADsMembers*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsMembers*, UInt32)
    release : Proc(IADsMembers*, UInt32)
    get_type_info_count : Proc(IADsMembers*, UInt32*, HRESULT)
    get_type_info : Proc(IADsMembers*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsMembers*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsMembers*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(IADsMembers*, Int32*, HRESULT)
    get__new_enum : Proc(IADsMembers*, IUnknown*, HRESULT)
    get_filter : Proc(IADsMembers*, VARIANT*, HRESULT)
    put_filter : Proc(IADsMembers*, VARIANT, HRESULT)
  end

  IADsMembers_GUID = "451a0030-72ec-11cf-b03b-00aa006e0975"
  IID_IADsMembers = LibC::GUID.new(0x451a0030_u32, 0x72ec_u16, 0x11cf_u16, StaticArray[0xb0_u8, 0x3b_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6e_u8, 0x9_u8, 0x75_u8])
  struct IADsMembers
    lpVtbl : IADsMembersVTbl*
  end

  struct IADsPropertyListVTbl
    query_interface : Proc(IADsPropertyList*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsPropertyList*, UInt32)
    release : Proc(IADsPropertyList*, UInt32)
    get_type_info_count : Proc(IADsPropertyList*, UInt32*, HRESULT)
    get_type_info : Proc(IADsPropertyList*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsPropertyList*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsPropertyList*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_property_count : Proc(IADsPropertyList*, Int32*, HRESULT)
    next : Proc(IADsPropertyList*, VARIANT*, HRESULT)
    skip : Proc(IADsPropertyList*, Int32, HRESULT)
    reset : Proc(IADsPropertyList*, HRESULT)
    item : Proc(IADsPropertyList*, VARIANT, VARIANT*, HRESULT)
    get_property_item : Proc(IADsPropertyList*, UInt8*, Int32, VARIANT*, HRESULT)
    put_property_item : Proc(IADsPropertyList*, VARIANT, HRESULT)
    reset_property_item : Proc(IADsPropertyList*, VARIANT, HRESULT)
    purge_property_list : Proc(IADsPropertyList*, HRESULT)
  end

  IADsPropertyList_GUID = "c6f602b6-8f69-11d0-8528-00c04fd8d503"
  IID_IADsPropertyList = LibC::GUID.new(0xc6f602b6_u32, 0x8f69_u16, 0x11d0_u16, StaticArray[0x85_u8, 0x28_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
  struct IADsPropertyList
    lpVtbl : IADsPropertyListVTbl*
  end

  struct IADsPropertyEntryVTbl
    query_interface : Proc(IADsPropertyEntry*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsPropertyEntry*, UInt32)
    release : Proc(IADsPropertyEntry*, UInt32)
    get_type_info_count : Proc(IADsPropertyEntry*, UInt32*, HRESULT)
    get_type_info : Proc(IADsPropertyEntry*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsPropertyEntry*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsPropertyEntry*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    clear : Proc(IADsPropertyEntry*, HRESULT)
    get_name : Proc(IADsPropertyEntry*, UInt8**, HRESULT)
    put_name : Proc(IADsPropertyEntry*, UInt8*, HRESULT)
    get_a_ds_type : Proc(IADsPropertyEntry*, Int32*, HRESULT)
    put_a_ds_type : Proc(IADsPropertyEntry*, Int32, HRESULT)
    get_control_code : Proc(IADsPropertyEntry*, Int32*, HRESULT)
    put_control_code : Proc(IADsPropertyEntry*, Int32, HRESULT)
    get_values : Proc(IADsPropertyEntry*, VARIANT*, HRESULT)
    put_values : Proc(IADsPropertyEntry*, VARIANT, HRESULT)
  end

  IADsPropertyEntry_GUID = "05792c8e-941f-11d0-8529-00c04fd8d503"
  IID_IADsPropertyEntry = LibC::GUID.new(0x5792c8e_u32, 0x941f_u16, 0x11d0_u16, StaticArray[0x85_u8, 0x29_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
  struct IADsPropertyEntry
    lpVtbl : IADsPropertyEntryVTbl*
  end

  struct IADsPropertyValueVTbl
    query_interface : Proc(IADsPropertyValue*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsPropertyValue*, UInt32)
    release : Proc(IADsPropertyValue*, UInt32)
    get_type_info_count : Proc(IADsPropertyValue*, UInt32*, HRESULT)
    get_type_info : Proc(IADsPropertyValue*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsPropertyValue*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsPropertyValue*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    clear : Proc(IADsPropertyValue*, HRESULT)
    get_a_ds_type : Proc(IADsPropertyValue*, Int32*, HRESULT)
    put_a_ds_type : Proc(IADsPropertyValue*, Int32, HRESULT)
    get_dn_string : Proc(IADsPropertyValue*, UInt8**, HRESULT)
    put_dn_string : Proc(IADsPropertyValue*, UInt8*, HRESULT)
    get_case_exact_string : Proc(IADsPropertyValue*, UInt8**, HRESULT)
    put_case_exact_string : Proc(IADsPropertyValue*, UInt8*, HRESULT)
    get_case_ignore_string : Proc(IADsPropertyValue*, UInt8**, HRESULT)
    put_case_ignore_string : Proc(IADsPropertyValue*, UInt8*, HRESULT)
    get_printable_string : Proc(IADsPropertyValue*, UInt8**, HRESULT)
    put_printable_string : Proc(IADsPropertyValue*, UInt8*, HRESULT)
    get_numeric_string : Proc(IADsPropertyValue*, UInt8**, HRESULT)
    put_numeric_string : Proc(IADsPropertyValue*, UInt8*, HRESULT)
    get_boolean : Proc(IADsPropertyValue*, Int32*, HRESULT)
    put_boolean : Proc(IADsPropertyValue*, Int32, HRESULT)
    get_integer : Proc(IADsPropertyValue*, Int32*, HRESULT)
    put_integer : Proc(IADsPropertyValue*, Int32, HRESULT)
    get_octet_string : Proc(IADsPropertyValue*, VARIANT*, HRESULT)
    put_octet_string : Proc(IADsPropertyValue*, VARIANT, HRESULT)
    get_security_descriptor : Proc(IADsPropertyValue*, IDispatch*, HRESULT)
    put_security_descriptor : Proc(IADsPropertyValue*, IDispatch, HRESULT)
    get_large_integer : Proc(IADsPropertyValue*, IDispatch*, HRESULT)
    put_large_integer : Proc(IADsPropertyValue*, IDispatch, HRESULT)
    get_utc_time : Proc(IADsPropertyValue*, Float64*, HRESULT)
    put_utc_time : Proc(IADsPropertyValue*, Float64, HRESULT)
  end

  IADsPropertyValue_GUID = "79fa9ad0-a97c-11d0-8534-00c04fd8d503"
  IID_IADsPropertyValue = LibC::GUID.new(0x79fa9ad0_u32, 0xa97c_u16, 0x11d0_u16, StaticArray[0x85_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
  struct IADsPropertyValue
    lpVtbl : IADsPropertyValueVTbl*
  end

  struct IADsPropertyValue2VTbl
    query_interface : Proc(IADsPropertyValue2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsPropertyValue2*, UInt32)
    release : Proc(IADsPropertyValue2*, UInt32)
    get_type_info_count : Proc(IADsPropertyValue2*, UInt32*, HRESULT)
    get_type_info : Proc(IADsPropertyValue2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsPropertyValue2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsPropertyValue2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_object_property : Proc(IADsPropertyValue2*, Int32*, VARIANT*, HRESULT)
    put_object_property : Proc(IADsPropertyValue2*, Int32, VARIANT, HRESULT)
  end

  IADsPropertyValue2_GUID = "306e831c-5bc7-11d1-a3b8-00c04fb950dc"
  IID_IADsPropertyValue2 = LibC::GUID.new(0x306e831c_u32, 0x5bc7_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xb8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  struct IADsPropertyValue2
    lpVtbl : IADsPropertyValue2VTbl*
  end

  struct IPrivateDispatchVTbl
    query_interface : Proc(IPrivateDispatch*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPrivateDispatch*, UInt32)
    release : Proc(IPrivateDispatch*, UInt32)
    adsi_initialize_dispatch_manager : Proc(IPrivateDispatch*, Int32, HRESULT)
    adsi_get_type_info_count : Proc(IPrivateDispatch*, UInt32*, HRESULT)
    adsi_get_type_info : Proc(IPrivateDispatch*, UInt32, UInt32, ITypeInfo*, HRESULT)
    adsi_get_i_ds_of_names : Proc(IPrivateDispatch*, Guid*, UInt16**, UInt32, UInt32, Int32*, HRESULT)
    adsi_invoke : Proc(IPrivateDispatch*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  IPrivateDispatch_GUID = "86ab4bbe-65f6-11d1-8c13-00c04fd8d503"
  IID_IPrivateDispatch = LibC::GUID.new(0x86ab4bbe_u32, 0x65f6_u16, 0x11d1_u16, StaticArray[0x8c_u8, 0x13_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
  struct IPrivateDispatch
    lpVtbl : IPrivateDispatchVTbl*
  end

  struct IPrivateUnknownVTbl
    query_interface : Proc(IPrivateUnknown*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPrivateUnknown*, UInt32)
    release : Proc(IPrivateUnknown*, UInt32)
    adsi_initialize_object : Proc(IPrivateUnknown*, UInt8*, UInt8*, Int32, HRESULT)
    adsi_release_object : Proc(IPrivateUnknown*, HRESULT)
  end

  IPrivateUnknown_GUID = "89126bab-6ead-11d1-8c18-00c04fd8d503"
  IID_IPrivateUnknown = LibC::GUID.new(0x89126bab_u32, 0x6ead_u16, 0x11d1_u16, StaticArray[0x8c_u8, 0x18_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
  struct IPrivateUnknown
    lpVtbl : IPrivateUnknownVTbl*
  end

  struct IADsExtensionVTbl
    query_interface : Proc(IADsExtension*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsExtension*, UInt32)
    release : Proc(IADsExtension*, UInt32)
    operate : Proc(IADsExtension*, UInt32, VARIANT, VARIANT, VARIANT, HRESULT)
    private_get_i_ds_of_names : Proc(IADsExtension*, Guid*, UInt16**, UInt32, UInt32, Int32*, HRESULT)
    private_invoke : Proc(IADsExtension*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  IADsExtension_GUID = "3d35553c-d2b0-11d1-b17b-0000f87593a0"
  IID_IADsExtension = LibC::GUID.new(0x3d35553c_u32, 0xd2b0_u16, 0x11d1_u16, StaticArray[0xb1_u8, 0x7b_u8, 0x0_u8, 0x0_u8, 0xf8_u8, 0x75_u8, 0x93_u8, 0xa0_u8])
  struct IADsExtension
    lpVtbl : IADsExtensionVTbl*
  end

  struct IADsDeleteOpsVTbl
    query_interface : Proc(IADsDeleteOps*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsDeleteOps*, UInt32)
    release : Proc(IADsDeleteOps*, UInt32)
    get_type_info_count : Proc(IADsDeleteOps*, UInt32*, HRESULT)
    get_type_info : Proc(IADsDeleteOps*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsDeleteOps*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsDeleteOps*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    delete_object : Proc(IADsDeleteOps*, Int32, HRESULT)
  end

  IADsDeleteOps_GUID = "b2bd0902-8878-11d1-8c21-00c04fd8d503"
  IID_IADsDeleteOps = LibC::GUID.new(0xb2bd0902_u32, 0x8878_u16, 0x11d1_u16, StaticArray[0x8c_u8, 0x21_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
  struct IADsDeleteOps
    lpVtbl : IADsDeleteOpsVTbl*
  end

  struct IADsNamespacesVTbl
    query_interface : Proc(IADsNamespaces*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsNamespaces*, UInt32)
    release : Proc(IADsNamespaces*, UInt32)
    get_type_info_count : Proc(IADsNamespaces*, UInt32*, HRESULT)
    get_type_info : Proc(IADsNamespaces*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsNamespaces*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsNamespaces*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IADsNamespaces*, UInt8**, HRESULT)
    get_class : Proc(IADsNamespaces*, UInt8**, HRESULT)
    get_guid : Proc(IADsNamespaces*, UInt8**, HRESULT)
    get_a_ds_path : Proc(IADsNamespaces*, UInt8**, HRESULT)
    get_parent : Proc(IADsNamespaces*, UInt8**, HRESULT)
    get_schema : Proc(IADsNamespaces*, UInt8**, HRESULT)
    get_info : Proc(IADsNamespaces*, HRESULT)
    set_info : Proc(IADsNamespaces*, HRESULT)
    get : Proc(IADsNamespaces*, UInt8*, VARIANT*, HRESULT)
    put : Proc(IADsNamespaces*, UInt8*, VARIANT, HRESULT)
    get_ex : Proc(IADsNamespaces*, UInt8*, VARIANT*, HRESULT)
    put_ex : Proc(IADsNamespaces*, Int32, UInt8*, VARIANT, HRESULT)
    get_info_ex : Proc(IADsNamespaces*, VARIANT, Int32, HRESULT)
    get_default_container : Proc(IADsNamespaces*, UInt8**, HRESULT)
    put_default_container : Proc(IADsNamespaces*, UInt8*, HRESULT)
  end

  IADsNamespaces_GUID = "28b96ba0-b330-11cf-a9ad-00aa006bc149"
  IID_IADsNamespaces = LibC::GUID.new(0x28b96ba0_u32, 0xb330_u16, 0x11cf_u16, StaticArray[0xa9_u8, 0xad_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0xc1_u8, 0x49_u8])
  struct IADsNamespaces
    lpVtbl : IADsNamespacesVTbl*
  end

  struct IADsClassVTbl
    query_interface : Proc(IADsClass*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsClass*, UInt32)
    release : Proc(IADsClass*, UInt32)
    get_type_info_count : Proc(IADsClass*, UInt32*, HRESULT)
    get_type_info : Proc(IADsClass*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsClass*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsClass*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IADsClass*, UInt8**, HRESULT)
    get_class : Proc(IADsClass*, UInt8**, HRESULT)
    get_guid : Proc(IADsClass*, UInt8**, HRESULT)
    get_a_ds_path : Proc(IADsClass*, UInt8**, HRESULT)
    get_parent : Proc(IADsClass*, UInt8**, HRESULT)
    get_schema : Proc(IADsClass*, UInt8**, HRESULT)
    get_info : Proc(IADsClass*, HRESULT)
    set_info : Proc(IADsClass*, HRESULT)
    get : Proc(IADsClass*, UInt8*, VARIANT*, HRESULT)
    put : Proc(IADsClass*, UInt8*, VARIANT, HRESULT)
    get_ex : Proc(IADsClass*, UInt8*, VARIANT*, HRESULT)
    put_ex : Proc(IADsClass*, Int32, UInt8*, VARIANT, HRESULT)
    get_info_ex : Proc(IADsClass*, VARIANT, Int32, HRESULT)
    get_primary_interface : Proc(IADsClass*, UInt8**, HRESULT)
    get_clsid : Proc(IADsClass*, UInt8**, HRESULT)
    put_clsid : Proc(IADsClass*, UInt8*, HRESULT)
    get_oid : Proc(IADsClass*, UInt8**, HRESULT)
    put_oid : Proc(IADsClass*, UInt8*, HRESULT)
    get_abstract : Proc(IADsClass*, Int16*, HRESULT)
    put_abstract : Proc(IADsClass*, Int16, HRESULT)
    get_auxiliary : Proc(IADsClass*, Int16*, HRESULT)
    put_auxiliary : Proc(IADsClass*, Int16, HRESULT)
    get_mandatory_properties : Proc(IADsClass*, VARIANT*, HRESULT)
    put_mandatory_properties : Proc(IADsClass*, VARIANT, HRESULT)
    get_optional_properties : Proc(IADsClass*, VARIANT*, HRESULT)
    put_optional_properties : Proc(IADsClass*, VARIANT, HRESULT)
    get_naming_properties : Proc(IADsClass*, VARIANT*, HRESULT)
    put_naming_properties : Proc(IADsClass*, VARIANT, HRESULT)
    get_derived_from : Proc(IADsClass*, VARIANT*, HRESULT)
    put_derived_from : Proc(IADsClass*, VARIANT, HRESULT)
    get_aux_derived_from : Proc(IADsClass*, VARIANT*, HRESULT)
    put_aux_derived_from : Proc(IADsClass*, VARIANT, HRESULT)
    get_possible_superiors : Proc(IADsClass*, VARIANT*, HRESULT)
    put_possible_superiors : Proc(IADsClass*, VARIANT, HRESULT)
    get_containment : Proc(IADsClass*, VARIANT*, HRESULT)
    put_containment : Proc(IADsClass*, VARIANT, HRESULT)
    get_container : Proc(IADsClass*, Int16*, HRESULT)
    put_container : Proc(IADsClass*, Int16, HRESULT)
    get_help_file_name : Proc(IADsClass*, UInt8**, HRESULT)
    put_help_file_name : Proc(IADsClass*, UInt8*, HRESULT)
    get_help_file_context : Proc(IADsClass*, Int32*, HRESULT)
    put_help_file_context : Proc(IADsClass*, Int32, HRESULT)
    qualifiers : Proc(IADsClass*, IADsCollection*, HRESULT)
  end

  IADsClass_GUID = "c8f93dd0-4ae0-11cf-9e73-00aa004a5691"
  IID_IADsClass = LibC::GUID.new(0xc8f93dd0_u32, 0x4ae0_u16, 0x11cf_u16, StaticArray[0x9e_u8, 0x73_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x4a_u8, 0x56_u8, 0x91_u8])
  struct IADsClass
    lpVtbl : IADsClassVTbl*
  end

  struct IADsPropertyVTbl
    query_interface : Proc(IADsProperty*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsProperty*, UInt32)
    release : Proc(IADsProperty*, UInt32)
    get_type_info_count : Proc(IADsProperty*, UInt32*, HRESULT)
    get_type_info : Proc(IADsProperty*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsProperty*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsProperty*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IADsProperty*, UInt8**, HRESULT)
    get_class : Proc(IADsProperty*, UInt8**, HRESULT)
    get_guid : Proc(IADsProperty*, UInt8**, HRESULT)
    get_a_ds_path : Proc(IADsProperty*, UInt8**, HRESULT)
    get_parent : Proc(IADsProperty*, UInt8**, HRESULT)
    get_schema : Proc(IADsProperty*, UInt8**, HRESULT)
    get_info : Proc(IADsProperty*, HRESULT)
    set_info : Proc(IADsProperty*, HRESULT)
    get : Proc(IADsProperty*, UInt8*, VARIANT*, HRESULT)
    put : Proc(IADsProperty*, UInt8*, VARIANT, HRESULT)
    get_ex : Proc(IADsProperty*, UInt8*, VARIANT*, HRESULT)
    put_ex : Proc(IADsProperty*, Int32, UInt8*, VARIANT, HRESULT)
    get_info_ex : Proc(IADsProperty*, VARIANT, Int32, HRESULT)
    get_oid : Proc(IADsProperty*, UInt8**, HRESULT)
    put_oid : Proc(IADsProperty*, UInt8*, HRESULT)
    get_syntax : Proc(IADsProperty*, UInt8**, HRESULT)
    put_syntax : Proc(IADsProperty*, UInt8*, HRESULT)
    get_max_range : Proc(IADsProperty*, Int32*, HRESULT)
    put_max_range : Proc(IADsProperty*, Int32, HRESULT)
    get_min_range : Proc(IADsProperty*, Int32*, HRESULT)
    put_min_range : Proc(IADsProperty*, Int32, HRESULT)
    get_multi_valued : Proc(IADsProperty*, Int16*, HRESULT)
    put_multi_valued : Proc(IADsProperty*, Int16, HRESULT)
    qualifiers : Proc(IADsProperty*, IADsCollection*, HRESULT)
  end

  IADsProperty_GUID = "c8f93dd3-4ae0-11cf-9e73-00aa004a5691"
  IID_IADsProperty = LibC::GUID.new(0xc8f93dd3_u32, 0x4ae0_u16, 0x11cf_u16, StaticArray[0x9e_u8, 0x73_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x4a_u8, 0x56_u8, 0x91_u8])
  struct IADsProperty
    lpVtbl : IADsPropertyVTbl*
  end

  struct IADsSyntaxVTbl
    query_interface : Proc(IADsSyntax*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsSyntax*, UInt32)
    release : Proc(IADsSyntax*, UInt32)
    get_type_info_count : Proc(IADsSyntax*, UInt32*, HRESULT)
    get_type_info : Proc(IADsSyntax*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsSyntax*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsSyntax*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IADsSyntax*, UInt8**, HRESULT)
    get_class : Proc(IADsSyntax*, UInt8**, HRESULT)
    get_guid : Proc(IADsSyntax*, UInt8**, HRESULT)
    get_a_ds_path : Proc(IADsSyntax*, UInt8**, HRESULT)
    get_parent : Proc(IADsSyntax*, UInt8**, HRESULT)
    get_schema : Proc(IADsSyntax*, UInt8**, HRESULT)
    get_info : Proc(IADsSyntax*, HRESULT)
    set_info : Proc(IADsSyntax*, HRESULT)
    get : Proc(IADsSyntax*, UInt8*, VARIANT*, HRESULT)
    put : Proc(IADsSyntax*, UInt8*, VARIANT, HRESULT)
    get_ex : Proc(IADsSyntax*, UInt8*, VARIANT*, HRESULT)
    put_ex : Proc(IADsSyntax*, Int32, UInt8*, VARIANT, HRESULT)
    get_info_ex : Proc(IADsSyntax*, VARIANT, Int32, HRESULT)
    get_ole_auto_data_type : Proc(IADsSyntax*, Int32*, HRESULT)
    put_ole_auto_data_type : Proc(IADsSyntax*, Int32, HRESULT)
  end

  IADsSyntax_GUID = "c8f93dd2-4ae0-11cf-9e73-00aa004a5691"
  IID_IADsSyntax = LibC::GUID.new(0xc8f93dd2_u32, 0x4ae0_u16, 0x11cf_u16, StaticArray[0x9e_u8, 0x73_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x4a_u8, 0x56_u8, 0x91_u8])
  struct IADsSyntax
    lpVtbl : IADsSyntaxVTbl*
  end

  struct IADsLocalityVTbl
    query_interface : Proc(IADsLocality*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsLocality*, UInt32)
    release : Proc(IADsLocality*, UInt32)
    get_type_info_count : Proc(IADsLocality*, UInt32*, HRESULT)
    get_type_info : Proc(IADsLocality*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsLocality*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsLocality*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IADsLocality*, UInt8**, HRESULT)
    get_class : Proc(IADsLocality*, UInt8**, HRESULT)
    get_guid : Proc(IADsLocality*, UInt8**, HRESULT)
    get_a_ds_path : Proc(IADsLocality*, UInt8**, HRESULT)
    get_parent : Proc(IADsLocality*, UInt8**, HRESULT)
    get_schema : Proc(IADsLocality*, UInt8**, HRESULT)
    get_info : Proc(IADsLocality*, HRESULT)
    set_info : Proc(IADsLocality*, HRESULT)
    get : Proc(IADsLocality*, UInt8*, VARIANT*, HRESULT)
    put : Proc(IADsLocality*, UInt8*, VARIANT, HRESULT)
    get_ex : Proc(IADsLocality*, UInt8*, VARIANT*, HRESULT)
    put_ex : Proc(IADsLocality*, Int32, UInt8*, VARIANT, HRESULT)
    get_info_ex : Proc(IADsLocality*, VARIANT, Int32, HRESULT)
    get_description : Proc(IADsLocality*, UInt8**, HRESULT)
    put_description : Proc(IADsLocality*, UInt8*, HRESULT)
    get_locality_name : Proc(IADsLocality*, UInt8**, HRESULT)
    put_locality_name : Proc(IADsLocality*, UInt8*, HRESULT)
    get_postal_address : Proc(IADsLocality*, UInt8**, HRESULT)
    put_postal_address : Proc(IADsLocality*, UInt8*, HRESULT)
    get_see_also : Proc(IADsLocality*, VARIANT*, HRESULT)
    put_see_also : Proc(IADsLocality*, VARIANT, HRESULT)
  end

  IADsLocality_GUID = "a05e03a2-effe-11cf-8abc-00c04fd8d503"
  IID_IADsLocality = LibC::GUID.new(0xa05e03a2_u32, 0xeffe_u16, 0x11cf_u16, StaticArray[0x8a_u8, 0xbc_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
  struct IADsLocality
    lpVtbl : IADsLocalityVTbl*
  end

  struct IADsOVTbl
    query_interface : Proc(IADsO*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsO*, UInt32)
    release : Proc(IADsO*, UInt32)
    get_type_info_count : Proc(IADsO*, UInt32*, HRESULT)
    get_type_info : Proc(IADsO*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsO*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsO*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IADsO*, UInt8**, HRESULT)
    get_class : Proc(IADsO*, UInt8**, HRESULT)
    get_guid : Proc(IADsO*, UInt8**, HRESULT)
    get_a_ds_path : Proc(IADsO*, UInt8**, HRESULT)
    get_parent : Proc(IADsO*, UInt8**, HRESULT)
    get_schema : Proc(IADsO*, UInt8**, HRESULT)
    get_info : Proc(IADsO*, HRESULT)
    set_info : Proc(IADsO*, HRESULT)
    get : Proc(IADsO*, UInt8*, VARIANT*, HRESULT)
    put : Proc(IADsO*, UInt8*, VARIANT, HRESULT)
    get_ex : Proc(IADsO*, UInt8*, VARIANT*, HRESULT)
    put_ex : Proc(IADsO*, Int32, UInt8*, VARIANT, HRESULT)
    get_info_ex : Proc(IADsO*, VARIANT, Int32, HRESULT)
    get_description : Proc(IADsO*, UInt8**, HRESULT)
    put_description : Proc(IADsO*, UInt8*, HRESULT)
    get_locality_name : Proc(IADsO*, UInt8**, HRESULT)
    put_locality_name : Proc(IADsO*, UInt8*, HRESULT)
    get_postal_address : Proc(IADsO*, UInt8**, HRESULT)
    put_postal_address : Proc(IADsO*, UInt8*, HRESULT)
    get_telephone_number : Proc(IADsO*, UInt8**, HRESULT)
    put_telephone_number : Proc(IADsO*, UInt8*, HRESULT)
    get_fax_number : Proc(IADsO*, UInt8**, HRESULT)
    put_fax_number : Proc(IADsO*, UInt8*, HRESULT)
    get_see_also : Proc(IADsO*, VARIANT*, HRESULT)
    put_see_also : Proc(IADsO*, VARIANT, HRESULT)
  end

  IADsO_GUID = "a1cd2dc6-effe-11cf-8abc-00c04fd8d503"
  IID_IADsO = LibC::GUID.new(0xa1cd2dc6_u32, 0xeffe_u16, 0x11cf_u16, StaticArray[0x8a_u8, 0xbc_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
  struct IADsO
    lpVtbl : IADsOVTbl*
  end

  struct IADsOUVTbl
    query_interface : Proc(IADsOU*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsOU*, UInt32)
    release : Proc(IADsOU*, UInt32)
    get_type_info_count : Proc(IADsOU*, UInt32*, HRESULT)
    get_type_info : Proc(IADsOU*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsOU*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsOU*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IADsOU*, UInt8**, HRESULT)
    get_class : Proc(IADsOU*, UInt8**, HRESULT)
    get_guid : Proc(IADsOU*, UInt8**, HRESULT)
    get_a_ds_path : Proc(IADsOU*, UInt8**, HRESULT)
    get_parent : Proc(IADsOU*, UInt8**, HRESULT)
    get_schema : Proc(IADsOU*, UInt8**, HRESULT)
    get_info : Proc(IADsOU*, HRESULT)
    set_info : Proc(IADsOU*, HRESULT)
    get : Proc(IADsOU*, UInt8*, VARIANT*, HRESULT)
    put : Proc(IADsOU*, UInt8*, VARIANT, HRESULT)
    get_ex : Proc(IADsOU*, UInt8*, VARIANT*, HRESULT)
    put_ex : Proc(IADsOU*, Int32, UInt8*, VARIANT, HRESULT)
    get_info_ex : Proc(IADsOU*, VARIANT, Int32, HRESULT)
    get_description : Proc(IADsOU*, UInt8**, HRESULT)
    put_description : Proc(IADsOU*, UInt8*, HRESULT)
    get_locality_name : Proc(IADsOU*, UInt8**, HRESULT)
    put_locality_name : Proc(IADsOU*, UInt8*, HRESULT)
    get_postal_address : Proc(IADsOU*, UInt8**, HRESULT)
    put_postal_address : Proc(IADsOU*, UInt8*, HRESULT)
    get_telephone_number : Proc(IADsOU*, UInt8**, HRESULT)
    put_telephone_number : Proc(IADsOU*, UInt8*, HRESULT)
    get_fax_number : Proc(IADsOU*, UInt8**, HRESULT)
    put_fax_number : Proc(IADsOU*, UInt8*, HRESULT)
    get_see_also : Proc(IADsOU*, VARIANT*, HRESULT)
    put_see_also : Proc(IADsOU*, VARIANT, HRESULT)
    get_business_category : Proc(IADsOU*, UInt8**, HRESULT)
    put_business_category : Proc(IADsOU*, UInt8*, HRESULT)
  end

  IADsOU_GUID = "a2f733b8-effe-11cf-8abc-00c04fd8d503"
  IID_IADsOU = LibC::GUID.new(0xa2f733b8_u32, 0xeffe_u16, 0x11cf_u16, StaticArray[0x8a_u8, 0xbc_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
  struct IADsOU
    lpVtbl : IADsOUVTbl*
  end

  struct IADsDomainVTbl
    query_interface : Proc(IADsDomain*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsDomain*, UInt32)
    release : Proc(IADsDomain*, UInt32)
    get_type_info_count : Proc(IADsDomain*, UInt32*, HRESULT)
    get_type_info : Proc(IADsDomain*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsDomain*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsDomain*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IADsDomain*, UInt8**, HRESULT)
    get_class : Proc(IADsDomain*, UInt8**, HRESULT)
    get_guid : Proc(IADsDomain*, UInt8**, HRESULT)
    get_a_ds_path : Proc(IADsDomain*, UInt8**, HRESULT)
    get_parent : Proc(IADsDomain*, UInt8**, HRESULT)
    get_schema : Proc(IADsDomain*, UInt8**, HRESULT)
    get_info : Proc(IADsDomain*, HRESULT)
    set_info : Proc(IADsDomain*, HRESULT)
    get : Proc(IADsDomain*, UInt8*, VARIANT*, HRESULT)
    put : Proc(IADsDomain*, UInt8*, VARIANT, HRESULT)
    get_ex : Proc(IADsDomain*, UInt8*, VARIANT*, HRESULT)
    put_ex : Proc(IADsDomain*, Int32, UInt8*, VARIANT, HRESULT)
    get_info_ex : Proc(IADsDomain*, VARIANT, Int32, HRESULT)
    get_is_workgroup : Proc(IADsDomain*, Int16*, HRESULT)
    get_min_password_length : Proc(IADsDomain*, Int32*, HRESULT)
    put_min_password_length : Proc(IADsDomain*, Int32, HRESULT)
    get_min_password_age : Proc(IADsDomain*, Int32*, HRESULT)
    put_min_password_age : Proc(IADsDomain*, Int32, HRESULT)
    get_max_password_age : Proc(IADsDomain*, Int32*, HRESULT)
    put_max_password_age : Proc(IADsDomain*, Int32, HRESULT)
    get_max_bad_passwords_allowed : Proc(IADsDomain*, Int32*, HRESULT)
    put_max_bad_passwords_allowed : Proc(IADsDomain*, Int32, HRESULT)
    get_password_history_length : Proc(IADsDomain*, Int32*, HRESULT)
    put_password_history_length : Proc(IADsDomain*, Int32, HRESULT)
    get_password_attributes : Proc(IADsDomain*, Int32*, HRESULT)
    put_password_attributes : Proc(IADsDomain*, Int32, HRESULT)
    get_auto_unlock_interval : Proc(IADsDomain*, Int32*, HRESULT)
    put_auto_unlock_interval : Proc(IADsDomain*, Int32, HRESULT)
    get_lockout_observation_interval : Proc(IADsDomain*, Int32*, HRESULT)
    put_lockout_observation_interval : Proc(IADsDomain*, Int32, HRESULT)
  end

  IADsDomain_GUID = "00e4c220-fd16-11ce-abc4-02608c9e7553"
  IID_IADsDomain = LibC::GUID.new(0xe4c220_u32, 0xfd16_u16, 0x11ce_u16, StaticArray[0xab_u8, 0xc4_u8, 0x2_u8, 0x60_u8, 0x8c_u8, 0x9e_u8, 0x75_u8, 0x53_u8])
  struct IADsDomain
    lpVtbl : IADsDomainVTbl*
  end

  struct IADsComputerVTbl
    query_interface : Proc(IADsComputer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsComputer*, UInt32)
    release : Proc(IADsComputer*, UInt32)
    get_type_info_count : Proc(IADsComputer*, UInt32*, HRESULT)
    get_type_info : Proc(IADsComputer*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsComputer*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsComputer*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IADsComputer*, UInt8**, HRESULT)
    get_class : Proc(IADsComputer*, UInt8**, HRESULT)
    get_guid : Proc(IADsComputer*, UInt8**, HRESULT)
    get_a_ds_path : Proc(IADsComputer*, UInt8**, HRESULT)
    get_parent : Proc(IADsComputer*, UInt8**, HRESULT)
    get_schema : Proc(IADsComputer*, UInt8**, HRESULT)
    get_info : Proc(IADsComputer*, HRESULT)
    set_info : Proc(IADsComputer*, HRESULT)
    get : Proc(IADsComputer*, UInt8*, VARIANT*, HRESULT)
    put : Proc(IADsComputer*, UInt8*, VARIANT, HRESULT)
    get_ex : Proc(IADsComputer*, UInt8*, VARIANT*, HRESULT)
    put_ex : Proc(IADsComputer*, Int32, UInt8*, VARIANT, HRESULT)
    get_info_ex : Proc(IADsComputer*, VARIANT, Int32, HRESULT)
    get_computer_id : Proc(IADsComputer*, UInt8**, HRESULT)
    get_site : Proc(IADsComputer*, UInt8**, HRESULT)
    get_description : Proc(IADsComputer*, UInt8**, HRESULT)
    put_description : Proc(IADsComputer*, UInt8*, HRESULT)
    get_location : Proc(IADsComputer*, UInt8**, HRESULT)
    put_location : Proc(IADsComputer*, UInt8*, HRESULT)
    get_primary_user : Proc(IADsComputer*, UInt8**, HRESULT)
    put_primary_user : Proc(IADsComputer*, UInt8*, HRESULT)
    get_owner : Proc(IADsComputer*, UInt8**, HRESULT)
    put_owner : Proc(IADsComputer*, UInt8*, HRESULT)
    get_division : Proc(IADsComputer*, UInt8**, HRESULT)
    put_division : Proc(IADsComputer*, UInt8*, HRESULT)
    get_department : Proc(IADsComputer*, UInt8**, HRESULT)
    put_department : Proc(IADsComputer*, UInt8*, HRESULT)
    get_role : Proc(IADsComputer*, UInt8**, HRESULT)
    put_role : Proc(IADsComputer*, UInt8*, HRESULT)
    get_operating_system : Proc(IADsComputer*, UInt8**, HRESULT)
    put_operating_system : Proc(IADsComputer*, UInt8*, HRESULT)
    get_operating_system_version : Proc(IADsComputer*, UInt8**, HRESULT)
    put_operating_system_version : Proc(IADsComputer*, UInt8*, HRESULT)
    get_model : Proc(IADsComputer*, UInt8**, HRESULT)
    put_model : Proc(IADsComputer*, UInt8*, HRESULT)
    get_processor : Proc(IADsComputer*, UInt8**, HRESULT)
    put_processor : Proc(IADsComputer*, UInt8*, HRESULT)
    get_processor_count : Proc(IADsComputer*, UInt8**, HRESULT)
    put_processor_count : Proc(IADsComputer*, UInt8*, HRESULT)
    get_memory_size : Proc(IADsComputer*, UInt8**, HRESULT)
    put_memory_size : Proc(IADsComputer*, UInt8*, HRESULT)
    get_storage_capacity : Proc(IADsComputer*, UInt8**, HRESULT)
    put_storage_capacity : Proc(IADsComputer*, UInt8*, HRESULT)
    get_net_addresses : Proc(IADsComputer*, VARIANT*, HRESULT)
    put_net_addresses : Proc(IADsComputer*, VARIANT, HRESULT)
  end

  IADsComputer_GUID = "efe3cc70-1d9f-11cf-b1f3-02608c9e7553"
  IID_IADsComputer = LibC::GUID.new(0xefe3cc70_u32, 0x1d9f_u16, 0x11cf_u16, StaticArray[0xb1_u8, 0xf3_u8, 0x2_u8, 0x60_u8, 0x8c_u8, 0x9e_u8, 0x75_u8, 0x53_u8])
  struct IADsComputer
    lpVtbl : IADsComputerVTbl*
  end

  struct IADsComputerOperationsVTbl
    query_interface : Proc(IADsComputerOperations*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsComputerOperations*, UInt32)
    release : Proc(IADsComputerOperations*, UInt32)
    get_type_info_count : Proc(IADsComputerOperations*, UInt32*, HRESULT)
    get_type_info : Proc(IADsComputerOperations*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsComputerOperations*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsComputerOperations*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IADsComputerOperations*, UInt8**, HRESULT)
    get_class : Proc(IADsComputerOperations*, UInt8**, HRESULT)
    get_guid : Proc(IADsComputerOperations*, UInt8**, HRESULT)
    get_a_ds_path : Proc(IADsComputerOperations*, UInt8**, HRESULT)
    get_parent : Proc(IADsComputerOperations*, UInt8**, HRESULT)
    get_schema : Proc(IADsComputerOperations*, UInt8**, HRESULT)
    get_info : Proc(IADsComputerOperations*, HRESULT)
    set_info : Proc(IADsComputerOperations*, HRESULT)
    get : Proc(IADsComputerOperations*, UInt8*, VARIANT*, HRESULT)
    put : Proc(IADsComputerOperations*, UInt8*, VARIANT, HRESULT)
    get_ex : Proc(IADsComputerOperations*, UInt8*, VARIANT*, HRESULT)
    put_ex : Proc(IADsComputerOperations*, Int32, UInt8*, VARIANT, HRESULT)
    get_info_ex : Proc(IADsComputerOperations*, VARIANT, Int32, HRESULT)
    status : Proc(IADsComputerOperations*, IDispatch*, HRESULT)
    shutdown : Proc(IADsComputerOperations*, Int16, HRESULT)
  end

  IADsComputerOperations_GUID = "ef497680-1d9f-11cf-b1f3-02608c9e7553"
  IID_IADsComputerOperations = LibC::GUID.new(0xef497680_u32, 0x1d9f_u16, 0x11cf_u16, StaticArray[0xb1_u8, 0xf3_u8, 0x2_u8, 0x60_u8, 0x8c_u8, 0x9e_u8, 0x75_u8, 0x53_u8])
  struct IADsComputerOperations
    lpVtbl : IADsComputerOperationsVTbl*
  end

  struct IADsGroupVTbl
    query_interface : Proc(IADsGroup*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsGroup*, UInt32)
    release : Proc(IADsGroup*, UInt32)
    get_type_info_count : Proc(IADsGroup*, UInt32*, HRESULT)
    get_type_info : Proc(IADsGroup*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsGroup*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsGroup*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IADsGroup*, UInt8**, HRESULT)
    get_class : Proc(IADsGroup*, UInt8**, HRESULT)
    get_guid : Proc(IADsGroup*, UInt8**, HRESULT)
    get_a_ds_path : Proc(IADsGroup*, UInt8**, HRESULT)
    get_parent : Proc(IADsGroup*, UInt8**, HRESULT)
    get_schema : Proc(IADsGroup*, UInt8**, HRESULT)
    get_info : Proc(IADsGroup*, HRESULT)
    set_info : Proc(IADsGroup*, HRESULT)
    get : Proc(IADsGroup*, UInt8*, VARIANT*, HRESULT)
    put : Proc(IADsGroup*, UInt8*, VARIANT, HRESULT)
    get_ex : Proc(IADsGroup*, UInt8*, VARIANT*, HRESULT)
    put_ex : Proc(IADsGroup*, Int32, UInt8*, VARIANT, HRESULT)
    get_info_ex : Proc(IADsGroup*, VARIANT, Int32, HRESULT)
    get_description : Proc(IADsGroup*, UInt8**, HRESULT)
    put_description : Proc(IADsGroup*, UInt8*, HRESULT)
    members : Proc(IADsGroup*, IADsMembers*, HRESULT)
    is_member : Proc(IADsGroup*, UInt8*, Int16*, HRESULT)
    add : Proc(IADsGroup*, UInt8*, HRESULT)
    remove : Proc(IADsGroup*, UInt8*, HRESULT)
  end

  IADsGroup_GUID = "27636b00-410f-11cf-b1ff-02608c9e7553"
  IID_IADsGroup = LibC::GUID.new(0x27636b00_u32, 0x410f_u16, 0x11cf_u16, StaticArray[0xb1_u8, 0xff_u8, 0x2_u8, 0x60_u8, 0x8c_u8, 0x9e_u8, 0x75_u8, 0x53_u8])
  struct IADsGroup
    lpVtbl : IADsGroupVTbl*
  end

  struct IADsUserVTbl
    query_interface : Proc(IADsUser*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsUser*, UInt32)
    release : Proc(IADsUser*, UInt32)
    get_type_info_count : Proc(IADsUser*, UInt32*, HRESULT)
    get_type_info : Proc(IADsUser*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsUser*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsUser*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IADsUser*, UInt8**, HRESULT)
    get_class : Proc(IADsUser*, UInt8**, HRESULT)
    get_guid : Proc(IADsUser*, UInt8**, HRESULT)
    get_a_ds_path : Proc(IADsUser*, UInt8**, HRESULT)
    get_parent : Proc(IADsUser*, UInt8**, HRESULT)
    get_schema : Proc(IADsUser*, UInt8**, HRESULT)
    get_info : Proc(IADsUser*, HRESULT)
    set_info : Proc(IADsUser*, HRESULT)
    get : Proc(IADsUser*, UInt8*, VARIANT*, HRESULT)
    put : Proc(IADsUser*, UInt8*, VARIANT, HRESULT)
    get_ex : Proc(IADsUser*, UInt8*, VARIANT*, HRESULT)
    put_ex : Proc(IADsUser*, Int32, UInt8*, VARIANT, HRESULT)
    get_info_ex : Proc(IADsUser*, VARIANT, Int32, HRESULT)
    get_bad_login_address : Proc(IADsUser*, UInt8**, HRESULT)
    get_bad_login_count : Proc(IADsUser*, Int32*, HRESULT)
    get_last_login : Proc(IADsUser*, Float64*, HRESULT)
    get_last_logoff : Proc(IADsUser*, Float64*, HRESULT)
    get_last_failed_login : Proc(IADsUser*, Float64*, HRESULT)
    get_password_last_changed : Proc(IADsUser*, Float64*, HRESULT)
    get_description : Proc(IADsUser*, UInt8**, HRESULT)
    put_description : Proc(IADsUser*, UInt8*, HRESULT)
    get_division : Proc(IADsUser*, UInt8**, HRESULT)
    put_division : Proc(IADsUser*, UInt8*, HRESULT)
    get_department : Proc(IADsUser*, UInt8**, HRESULT)
    put_department : Proc(IADsUser*, UInt8*, HRESULT)
    get_employee_id : Proc(IADsUser*, UInt8**, HRESULT)
    put_employee_id : Proc(IADsUser*, UInt8*, HRESULT)
    get_full_name : Proc(IADsUser*, UInt8**, HRESULT)
    put_full_name : Proc(IADsUser*, UInt8*, HRESULT)
    get_first_name : Proc(IADsUser*, UInt8**, HRESULT)
    put_first_name : Proc(IADsUser*, UInt8*, HRESULT)
    get_last_name : Proc(IADsUser*, UInt8**, HRESULT)
    put_last_name : Proc(IADsUser*, UInt8*, HRESULT)
    get_other_name : Proc(IADsUser*, UInt8**, HRESULT)
    put_other_name : Proc(IADsUser*, UInt8*, HRESULT)
    get_name_prefix : Proc(IADsUser*, UInt8**, HRESULT)
    put_name_prefix : Proc(IADsUser*, UInt8*, HRESULT)
    get_name_suffix : Proc(IADsUser*, UInt8**, HRESULT)
    put_name_suffix : Proc(IADsUser*, UInt8*, HRESULT)
    get_title : Proc(IADsUser*, UInt8**, HRESULT)
    put_title : Proc(IADsUser*, UInt8*, HRESULT)
    get_manager : Proc(IADsUser*, UInt8**, HRESULT)
    put_manager : Proc(IADsUser*, UInt8*, HRESULT)
    get_telephone_home : Proc(IADsUser*, VARIANT*, HRESULT)
    put_telephone_home : Proc(IADsUser*, VARIANT, HRESULT)
    get_telephone_mobile : Proc(IADsUser*, VARIANT*, HRESULT)
    put_telephone_mobile : Proc(IADsUser*, VARIANT, HRESULT)
    get_telephone_number : Proc(IADsUser*, VARIANT*, HRESULT)
    put_telephone_number : Proc(IADsUser*, VARIANT, HRESULT)
    get_telephone_pager : Proc(IADsUser*, VARIANT*, HRESULT)
    put_telephone_pager : Proc(IADsUser*, VARIANT, HRESULT)
    get_fax_number : Proc(IADsUser*, VARIANT*, HRESULT)
    put_fax_number : Proc(IADsUser*, VARIANT, HRESULT)
    get_office_locations : Proc(IADsUser*, VARIANT*, HRESULT)
    put_office_locations : Proc(IADsUser*, VARIANT, HRESULT)
    get_postal_addresses : Proc(IADsUser*, VARIANT*, HRESULT)
    put_postal_addresses : Proc(IADsUser*, VARIANT, HRESULT)
    get_postal_codes : Proc(IADsUser*, VARIANT*, HRESULT)
    put_postal_codes : Proc(IADsUser*, VARIANT, HRESULT)
    get_see_also : Proc(IADsUser*, VARIANT*, HRESULT)
    put_see_also : Proc(IADsUser*, VARIANT, HRESULT)
    get_account_disabled : Proc(IADsUser*, Int16*, HRESULT)
    put_account_disabled : Proc(IADsUser*, Int16, HRESULT)
    get_account_expiration_date : Proc(IADsUser*, Float64*, HRESULT)
    put_account_expiration_date : Proc(IADsUser*, Float64, HRESULT)
    get_grace_logins_allowed : Proc(IADsUser*, Int32*, HRESULT)
    put_grace_logins_allowed : Proc(IADsUser*, Int32, HRESULT)
    get_grace_logins_remaining : Proc(IADsUser*, Int32*, HRESULT)
    put_grace_logins_remaining : Proc(IADsUser*, Int32, HRESULT)
    get_is_account_locked : Proc(IADsUser*, Int16*, HRESULT)
    put_is_account_locked : Proc(IADsUser*, Int16, HRESULT)
    get_login_hours : Proc(IADsUser*, VARIANT*, HRESULT)
    put_login_hours : Proc(IADsUser*, VARIANT, HRESULT)
    get_login_workstations : Proc(IADsUser*, VARIANT*, HRESULT)
    put_login_workstations : Proc(IADsUser*, VARIANT, HRESULT)
    get_max_logins : Proc(IADsUser*, Int32*, HRESULT)
    put_max_logins : Proc(IADsUser*, Int32, HRESULT)
    get_max_storage : Proc(IADsUser*, Int32*, HRESULT)
    put_max_storage : Proc(IADsUser*, Int32, HRESULT)
    get_password_expiration_date : Proc(IADsUser*, Float64*, HRESULT)
    put_password_expiration_date : Proc(IADsUser*, Float64, HRESULT)
    get_password_minimum_length : Proc(IADsUser*, Int32*, HRESULT)
    put_password_minimum_length : Proc(IADsUser*, Int32, HRESULT)
    get_password_required : Proc(IADsUser*, Int16*, HRESULT)
    put_password_required : Proc(IADsUser*, Int16, HRESULT)
    get_require_unique_password : Proc(IADsUser*, Int16*, HRESULT)
    put_require_unique_password : Proc(IADsUser*, Int16, HRESULT)
    get_email_address : Proc(IADsUser*, UInt8**, HRESULT)
    put_email_address : Proc(IADsUser*, UInt8*, HRESULT)
    get_home_directory : Proc(IADsUser*, UInt8**, HRESULT)
    put_home_directory : Proc(IADsUser*, UInt8*, HRESULT)
    get_languages : Proc(IADsUser*, VARIANT*, HRESULT)
    put_languages : Proc(IADsUser*, VARIANT, HRESULT)
    get_profile : Proc(IADsUser*, UInt8**, HRESULT)
    put_profile : Proc(IADsUser*, UInt8*, HRESULT)
    get_login_script : Proc(IADsUser*, UInt8**, HRESULT)
    put_login_script : Proc(IADsUser*, UInt8*, HRESULT)
    get_picture : Proc(IADsUser*, VARIANT*, HRESULT)
    put_picture : Proc(IADsUser*, VARIANT, HRESULT)
    get_home_page : Proc(IADsUser*, UInt8**, HRESULT)
    put_home_page : Proc(IADsUser*, UInt8*, HRESULT)
    groups : Proc(IADsUser*, IADsMembers*, HRESULT)
    set_password : Proc(IADsUser*, UInt8*, HRESULT)
    change_password : Proc(IADsUser*, UInt8*, UInt8*, HRESULT)
  end

  IADsUser_GUID = "3e37e320-17e2-11cf-abc4-02608c9e7553"
  IID_IADsUser = LibC::GUID.new(0x3e37e320_u32, 0x17e2_u16, 0x11cf_u16, StaticArray[0xab_u8, 0xc4_u8, 0x2_u8, 0x60_u8, 0x8c_u8, 0x9e_u8, 0x75_u8, 0x53_u8])
  struct IADsUser
    lpVtbl : IADsUserVTbl*
  end

  struct IADsPrintQueueVTbl
    query_interface : Proc(IADsPrintQueue*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsPrintQueue*, UInt32)
    release : Proc(IADsPrintQueue*, UInt32)
    get_type_info_count : Proc(IADsPrintQueue*, UInt32*, HRESULT)
    get_type_info : Proc(IADsPrintQueue*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsPrintQueue*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsPrintQueue*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IADsPrintQueue*, UInt8**, HRESULT)
    get_class : Proc(IADsPrintQueue*, UInt8**, HRESULT)
    get_guid : Proc(IADsPrintQueue*, UInt8**, HRESULT)
    get_a_ds_path : Proc(IADsPrintQueue*, UInt8**, HRESULT)
    get_parent : Proc(IADsPrintQueue*, UInt8**, HRESULT)
    get_schema : Proc(IADsPrintQueue*, UInt8**, HRESULT)
    get_info : Proc(IADsPrintQueue*, HRESULT)
    set_info : Proc(IADsPrintQueue*, HRESULT)
    get : Proc(IADsPrintQueue*, UInt8*, VARIANT*, HRESULT)
    put : Proc(IADsPrintQueue*, UInt8*, VARIANT, HRESULT)
    get_ex : Proc(IADsPrintQueue*, UInt8*, VARIANT*, HRESULT)
    put_ex : Proc(IADsPrintQueue*, Int32, UInt8*, VARIANT, HRESULT)
    get_info_ex : Proc(IADsPrintQueue*, VARIANT, Int32, HRESULT)
    get_printer_path : Proc(IADsPrintQueue*, UInt8**, HRESULT)
    put_printer_path : Proc(IADsPrintQueue*, UInt8*, HRESULT)
    get_model : Proc(IADsPrintQueue*, UInt8**, HRESULT)
    put_model : Proc(IADsPrintQueue*, UInt8*, HRESULT)
    get_datatype : Proc(IADsPrintQueue*, UInt8**, HRESULT)
    put_datatype : Proc(IADsPrintQueue*, UInt8*, HRESULT)
    get_print_processor : Proc(IADsPrintQueue*, UInt8**, HRESULT)
    put_print_processor : Proc(IADsPrintQueue*, UInt8*, HRESULT)
    get_description : Proc(IADsPrintQueue*, UInt8**, HRESULT)
    put_description : Proc(IADsPrintQueue*, UInt8*, HRESULT)
    get_location : Proc(IADsPrintQueue*, UInt8**, HRESULT)
    put_location : Proc(IADsPrintQueue*, UInt8*, HRESULT)
    get_start_time : Proc(IADsPrintQueue*, Float64*, HRESULT)
    put_start_time : Proc(IADsPrintQueue*, Float64, HRESULT)
    get_until_time : Proc(IADsPrintQueue*, Float64*, HRESULT)
    put_until_time : Proc(IADsPrintQueue*, Float64, HRESULT)
    get_default_job_priority : Proc(IADsPrintQueue*, Int32*, HRESULT)
    put_default_job_priority : Proc(IADsPrintQueue*, Int32, HRESULT)
    get_priority : Proc(IADsPrintQueue*, Int32*, HRESULT)
    put_priority : Proc(IADsPrintQueue*, Int32, HRESULT)
    get_banner_page : Proc(IADsPrintQueue*, UInt8**, HRESULT)
    put_banner_page : Proc(IADsPrintQueue*, UInt8*, HRESULT)
    get_print_devices : Proc(IADsPrintQueue*, VARIANT*, HRESULT)
    put_print_devices : Proc(IADsPrintQueue*, VARIANT, HRESULT)
    get_net_addresses : Proc(IADsPrintQueue*, VARIANT*, HRESULT)
    put_net_addresses : Proc(IADsPrintQueue*, VARIANT, HRESULT)
  end

  IADsPrintQueue_GUID = "b15160d0-1226-11cf-a985-00aa006bc149"
  IID_IADsPrintQueue = LibC::GUID.new(0xb15160d0_u32, 0x1226_u16, 0x11cf_u16, StaticArray[0xa9_u8, 0x85_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0xc1_u8, 0x49_u8])
  struct IADsPrintQueue
    lpVtbl : IADsPrintQueueVTbl*
  end

  struct IADsPrintQueueOperationsVTbl
    query_interface : Proc(IADsPrintQueueOperations*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsPrintQueueOperations*, UInt32)
    release : Proc(IADsPrintQueueOperations*, UInt32)
    get_type_info_count : Proc(IADsPrintQueueOperations*, UInt32*, HRESULT)
    get_type_info : Proc(IADsPrintQueueOperations*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsPrintQueueOperations*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsPrintQueueOperations*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IADsPrintQueueOperations*, UInt8**, HRESULT)
    get_class : Proc(IADsPrintQueueOperations*, UInt8**, HRESULT)
    get_guid : Proc(IADsPrintQueueOperations*, UInt8**, HRESULT)
    get_a_ds_path : Proc(IADsPrintQueueOperations*, UInt8**, HRESULT)
    get_parent : Proc(IADsPrintQueueOperations*, UInt8**, HRESULT)
    get_schema : Proc(IADsPrintQueueOperations*, UInt8**, HRESULT)
    get_info : Proc(IADsPrintQueueOperations*, HRESULT)
    set_info : Proc(IADsPrintQueueOperations*, HRESULT)
    get : Proc(IADsPrintQueueOperations*, UInt8*, VARIANT*, HRESULT)
    put : Proc(IADsPrintQueueOperations*, UInt8*, VARIANT, HRESULT)
    get_ex : Proc(IADsPrintQueueOperations*, UInt8*, VARIANT*, HRESULT)
    put_ex : Proc(IADsPrintQueueOperations*, Int32, UInt8*, VARIANT, HRESULT)
    get_info_ex : Proc(IADsPrintQueueOperations*, VARIANT, Int32, HRESULT)
    get_status : Proc(IADsPrintQueueOperations*, Int32*, HRESULT)
    print_jobs : Proc(IADsPrintQueueOperations*, IADsCollection*, HRESULT)
    pause : Proc(IADsPrintQueueOperations*, HRESULT)
    resume : Proc(IADsPrintQueueOperations*, HRESULT)
    purge : Proc(IADsPrintQueueOperations*, HRESULT)
  end

  IADsPrintQueueOperations_GUID = "124be5c0-156e-11cf-a986-00aa006bc149"
  IID_IADsPrintQueueOperations = LibC::GUID.new(0x124be5c0_u32, 0x156e_u16, 0x11cf_u16, StaticArray[0xa9_u8, 0x86_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0xc1_u8, 0x49_u8])
  struct IADsPrintQueueOperations
    lpVtbl : IADsPrintQueueOperationsVTbl*
  end

  struct IADsPrintJobVTbl
    query_interface : Proc(IADsPrintJob*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsPrintJob*, UInt32)
    release : Proc(IADsPrintJob*, UInt32)
    get_type_info_count : Proc(IADsPrintJob*, UInt32*, HRESULT)
    get_type_info : Proc(IADsPrintJob*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsPrintJob*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsPrintJob*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IADsPrintJob*, UInt8**, HRESULT)
    get_class : Proc(IADsPrintJob*, UInt8**, HRESULT)
    get_guid : Proc(IADsPrintJob*, UInt8**, HRESULT)
    get_a_ds_path : Proc(IADsPrintJob*, UInt8**, HRESULT)
    get_parent : Proc(IADsPrintJob*, UInt8**, HRESULT)
    get_schema : Proc(IADsPrintJob*, UInt8**, HRESULT)
    get_info : Proc(IADsPrintJob*, HRESULT)
    set_info : Proc(IADsPrintJob*, HRESULT)
    get : Proc(IADsPrintJob*, UInt8*, VARIANT*, HRESULT)
    put : Proc(IADsPrintJob*, UInt8*, VARIANT, HRESULT)
    get_ex : Proc(IADsPrintJob*, UInt8*, VARIANT*, HRESULT)
    put_ex : Proc(IADsPrintJob*, Int32, UInt8*, VARIANT, HRESULT)
    get_info_ex : Proc(IADsPrintJob*, VARIANT, Int32, HRESULT)
    get_host_print_queue : Proc(IADsPrintJob*, UInt8**, HRESULT)
    get_user : Proc(IADsPrintJob*, UInt8**, HRESULT)
    get_user_path : Proc(IADsPrintJob*, UInt8**, HRESULT)
    get_time_submitted : Proc(IADsPrintJob*, Float64*, HRESULT)
    get_total_pages : Proc(IADsPrintJob*, Int32*, HRESULT)
    get_size : Proc(IADsPrintJob*, Int32*, HRESULT)
    get_description : Proc(IADsPrintJob*, UInt8**, HRESULT)
    put_description : Proc(IADsPrintJob*, UInt8*, HRESULT)
    get_priority : Proc(IADsPrintJob*, Int32*, HRESULT)
    put_priority : Proc(IADsPrintJob*, Int32, HRESULT)
    get_start_time : Proc(IADsPrintJob*, Float64*, HRESULT)
    put_start_time : Proc(IADsPrintJob*, Float64, HRESULT)
    get_until_time : Proc(IADsPrintJob*, Float64*, HRESULT)
    put_until_time : Proc(IADsPrintJob*, Float64, HRESULT)
    get_notify : Proc(IADsPrintJob*, UInt8**, HRESULT)
    put_notify : Proc(IADsPrintJob*, UInt8*, HRESULT)
    get_notify_path : Proc(IADsPrintJob*, UInt8**, HRESULT)
    put_notify_path : Proc(IADsPrintJob*, UInt8*, HRESULT)
  end

  IADsPrintJob_GUID = "32fb6780-1ed0-11cf-a988-00aa006bc149"
  IID_IADsPrintJob = LibC::GUID.new(0x32fb6780_u32, 0x1ed0_u16, 0x11cf_u16, StaticArray[0xa9_u8, 0x88_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0xc1_u8, 0x49_u8])
  struct IADsPrintJob
    lpVtbl : IADsPrintJobVTbl*
  end

  struct IADsPrintJobOperationsVTbl
    query_interface : Proc(IADsPrintJobOperations*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsPrintJobOperations*, UInt32)
    release : Proc(IADsPrintJobOperations*, UInt32)
    get_type_info_count : Proc(IADsPrintJobOperations*, UInt32*, HRESULT)
    get_type_info : Proc(IADsPrintJobOperations*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsPrintJobOperations*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsPrintJobOperations*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IADsPrintJobOperations*, UInt8**, HRESULT)
    get_class : Proc(IADsPrintJobOperations*, UInt8**, HRESULT)
    get_guid : Proc(IADsPrintJobOperations*, UInt8**, HRESULT)
    get_a_ds_path : Proc(IADsPrintJobOperations*, UInt8**, HRESULT)
    get_parent : Proc(IADsPrintJobOperations*, UInt8**, HRESULT)
    get_schema : Proc(IADsPrintJobOperations*, UInt8**, HRESULT)
    get_info : Proc(IADsPrintJobOperations*, HRESULT)
    set_info : Proc(IADsPrintJobOperations*, HRESULT)
    get : Proc(IADsPrintJobOperations*, UInt8*, VARIANT*, HRESULT)
    put : Proc(IADsPrintJobOperations*, UInt8*, VARIANT, HRESULT)
    get_ex : Proc(IADsPrintJobOperations*, UInt8*, VARIANT*, HRESULT)
    put_ex : Proc(IADsPrintJobOperations*, Int32, UInt8*, VARIANT, HRESULT)
    get_info_ex : Proc(IADsPrintJobOperations*, VARIANT, Int32, HRESULT)
    get_status : Proc(IADsPrintJobOperations*, Int32*, HRESULT)
    get_time_elapsed : Proc(IADsPrintJobOperations*, Int32*, HRESULT)
    get_pages_printed : Proc(IADsPrintJobOperations*, Int32*, HRESULT)
    get_position : Proc(IADsPrintJobOperations*, Int32*, HRESULT)
    put_position : Proc(IADsPrintJobOperations*, Int32, HRESULT)
    pause : Proc(IADsPrintJobOperations*, HRESULT)
    resume : Proc(IADsPrintJobOperations*, HRESULT)
  end

  IADsPrintJobOperations_GUID = "9a52db30-1ecf-11cf-a988-00aa006bc149"
  IID_IADsPrintJobOperations = LibC::GUID.new(0x9a52db30_u32, 0x1ecf_u16, 0x11cf_u16, StaticArray[0xa9_u8, 0x88_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0xc1_u8, 0x49_u8])
  struct IADsPrintJobOperations
    lpVtbl : IADsPrintJobOperationsVTbl*
  end

  struct IADsServiceVTbl
    query_interface : Proc(IADsService*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsService*, UInt32)
    release : Proc(IADsService*, UInt32)
    get_type_info_count : Proc(IADsService*, UInt32*, HRESULT)
    get_type_info : Proc(IADsService*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsService*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsService*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IADsService*, UInt8**, HRESULT)
    get_class : Proc(IADsService*, UInt8**, HRESULT)
    get_guid : Proc(IADsService*, UInt8**, HRESULT)
    get_a_ds_path : Proc(IADsService*, UInt8**, HRESULT)
    get_parent : Proc(IADsService*, UInt8**, HRESULT)
    get_schema : Proc(IADsService*, UInt8**, HRESULT)
    get_info : Proc(IADsService*, HRESULT)
    set_info : Proc(IADsService*, HRESULT)
    get : Proc(IADsService*, UInt8*, VARIANT*, HRESULT)
    put : Proc(IADsService*, UInt8*, VARIANT, HRESULT)
    get_ex : Proc(IADsService*, UInt8*, VARIANT*, HRESULT)
    put_ex : Proc(IADsService*, Int32, UInt8*, VARIANT, HRESULT)
    get_info_ex : Proc(IADsService*, VARIANT, Int32, HRESULT)
    get_host_computer : Proc(IADsService*, UInt8**, HRESULT)
    put_host_computer : Proc(IADsService*, UInt8*, HRESULT)
    get_display_name : Proc(IADsService*, UInt8**, HRESULT)
    put_display_name : Proc(IADsService*, UInt8*, HRESULT)
    get_version : Proc(IADsService*, UInt8**, HRESULT)
    put_version : Proc(IADsService*, UInt8*, HRESULT)
    get_service_type : Proc(IADsService*, Int32*, HRESULT)
    put_service_type : Proc(IADsService*, Int32, HRESULT)
    get_start_type : Proc(IADsService*, Int32*, HRESULT)
    put_start_type : Proc(IADsService*, Int32, HRESULT)
    get_path : Proc(IADsService*, UInt8**, HRESULT)
    put_path : Proc(IADsService*, UInt8*, HRESULT)
    get_startup_parameters : Proc(IADsService*, UInt8**, HRESULT)
    put_startup_parameters : Proc(IADsService*, UInt8*, HRESULT)
    get_error_control : Proc(IADsService*, Int32*, HRESULT)
    put_error_control : Proc(IADsService*, Int32, HRESULT)
    get_load_order_group : Proc(IADsService*, UInt8**, HRESULT)
    put_load_order_group : Proc(IADsService*, UInt8*, HRESULT)
    get_service_account_name : Proc(IADsService*, UInt8**, HRESULT)
    put_service_account_name : Proc(IADsService*, UInt8*, HRESULT)
    get_service_account_path : Proc(IADsService*, UInt8**, HRESULT)
    put_service_account_path : Proc(IADsService*, UInt8*, HRESULT)
    get_dependencies : Proc(IADsService*, VARIANT*, HRESULT)
    put_dependencies : Proc(IADsService*, VARIANT, HRESULT)
  end

  IADsService_GUID = "68af66e0-31ca-11cf-a98a-00aa006bc149"
  IID_IADsService = LibC::GUID.new(0x68af66e0_u32, 0x31ca_u16, 0x11cf_u16, StaticArray[0xa9_u8, 0x8a_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0xc1_u8, 0x49_u8])
  struct IADsService
    lpVtbl : IADsServiceVTbl*
  end

  struct IADsServiceOperationsVTbl
    query_interface : Proc(IADsServiceOperations*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsServiceOperations*, UInt32)
    release : Proc(IADsServiceOperations*, UInt32)
    get_type_info_count : Proc(IADsServiceOperations*, UInt32*, HRESULT)
    get_type_info : Proc(IADsServiceOperations*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsServiceOperations*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsServiceOperations*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IADsServiceOperations*, UInt8**, HRESULT)
    get_class : Proc(IADsServiceOperations*, UInt8**, HRESULT)
    get_guid : Proc(IADsServiceOperations*, UInt8**, HRESULT)
    get_a_ds_path : Proc(IADsServiceOperations*, UInt8**, HRESULT)
    get_parent : Proc(IADsServiceOperations*, UInt8**, HRESULT)
    get_schema : Proc(IADsServiceOperations*, UInt8**, HRESULT)
    get_info : Proc(IADsServiceOperations*, HRESULT)
    set_info : Proc(IADsServiceOperations*, HRESULT)
    get : Proc(IADsServiceOperations*, UInt8*, VARIANT*, HRESULT)
    put : Proc(IADsServiceOperations*, UInt8*, VARIANT, HRESULT)
    get_ex : Proc(IADsServiceOperations*, UInt8*, VARIANT*, HRESULT)
    put_ex : Proc(IADsServiceOperations*, Int32, UInt8*, VARIANT, HRESULT)
    get_info_ex : Proc(IADsServiceOperations*, VARIANT, Int32, HRESULT)
    get_status : Proc(IADsServiceOperations*, Int32*, HRESULT)
    start : Proc(IADsServiceOperations*, HRESULT)
    stop : Proc(IADsServiceOperations*, HRESULT)
    pause : Proc(IADsServiceOperations*, HRESULT)
    continue : Proc(IADsServiceOperations*, HRESULT)
    set_password : Proc(IADsServiceOperations*, UInt8*, HRESULT)
  end

  IADsServiceOperations_GUID = "5d7b33f0-31ca-11cf-a98a-00aa006bc149"
  IID_IADsServiceOperations = LibC::GUID.new(0x5d7b33f0_u32, 0x31ca_u16, 0x11cf_u16, StaticArray[0xa9_u8, 0x8a_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0xc1_u8, 0x49_u8])
  struct IADsServiceOperations
    lpVtbl : IADsServiceOperationsVTbl*
  end

  struct IADsFileServiceVTbl
    query_interface : Proc(IADsFileService*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsFileService*, UInt32)
    release : Proc(IADsFileService*, UInt32)
    get_type_info_count : Proc(IADsFileService*, UInt32*, HRESULT)
    get_type_info : Proc(IADsFileService*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsFileService*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsFileService*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IADsFileService*, UInt8**, HRESULT)
    get_class : Proc(IADsFileService*, UInt8**, HRESULT)
    get_guid : Proc(IADsFileService*, UInt8**, HRESULT)
    get_a_ds_path : Proc(IADsFileService*, UInt8**, HRESULT)
    get_parent : Proc(IADsFileService*, UInt8**, HRESULT)
    get_schema : Proc(IADsFileService*, UInt8**, HRESULT)
    get_info : Proc(IADsFileService*, HRESULT)
    set_info : Proc(IADsFileService*, HRESULT)
    get : Proc(IADsFileService*, UInt8*, VARIANT*, HRESULT)
    put : Proc(IADsFileService*, UInt8*, VARIANT, HRESULT)
    get_ex : Proc(IADsFileService*, UInt8*, VARIANT*, HRESULT)
    put_ex : Proc(IADsFileService*, Int32, UInt8*, VARIANT, HRESULT)
    get_info_ex : Proc(IADsFileService*, VARIANT, Int32, HRESULT)
    get_host_computer : Proc(IADsFileService*, UInt8**, HRESULT)
    put_host_computer : Proc(IADsFileService*, UInt8*, HRESULT)
    get_display_name : Proc(IADsFileService*, UInt8**, HRESULT)
    put_display_name : Proc(IADsFileService*, UInt8*, HRESULT)
    get_version : Proc(IADsFileService*, UInt8**, HRESULT)
    put_version : Proc(IADsFileService*, UInt8*, HRESULT)
    get_service_type : Proc(IADsFileService*, Int32*, HRESULT)
    put_service_type : Proc(IADsFileService*, Int32, HRESULT)
    get_start_type : Proc(IADsFileService*, Int32*, HRESULT)
    put_start_type : Proc(IADsFileService*, Int32, HRESULT)
    get_path : Proc(IADsFileService*, UInt8**, HRESULT)
    put_path : Proc(IADsFileService*, UInt8*, HRESULT)
    get_startup_parameters : Proc(IADsFileService*, UInt8**, HRESULT)
    put_startup_parameters : Proc(IADsFileService*, UInt8*, HRESULT)
    get_error_control : Proc(IADsFileService*, Int32*, HRESULT)
    put_error_control : Proc(IADsFileService*, Int32, HRESULT)
    get_load_order_group : Proc(IADsFileService*, UInt8**, HRESULT)
    put_load_order_group : Proc(IADsFileService*, UInt8*, HRESULT)
    get_service_account_name : Proc(IADsFileService*, UInt8**, HRESULT)
    put_service_account_name : Proc(IADsFileService*, UInt8*, HRESULT)
    get_service_account_path : Proc(IADsFileService*, UInt8**, HRESULT)
    put_service_account_path : Proc(IADsFileService*, UInt8*, HRESULT)
    get_dependencies : Proc(IADsFileService*, VARIANT*, HRESULT)
    put_dependencies : Proc(IADsFileService*, VARIANT, HRESULT)
    get_description : Proc(IADsFileService*, UInt8**, HRESULT)
    put_description : Proc(IADsFileService*, UInt8*, HRESULT)
    get_max_user_count : Proc(IADsFileService*, Int32*, HRESULT)
    put_max_user_count : Proc(IADsFileService*, Int32, HRESULT)
  end

  IADsFileService_GUID = "a89d1900-31ca-11cf-a98a-00aa006bc149"
  IID_IADsFileService = LibC::GUID.new(0xa89d1900_u32, 0x31ca_u16, 0x11cf_u16, StaticArray[0xa9_u8, 0x8a_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0xc1_u8, 0x49_u8])
  struct IADsFileService
    lpVtbl : IADsFileServiceVTbl*
  end

  struct IADsFileServiceOperationsVTbl
    query_interface : Proc(IADsFileServiceOperations*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsFileServiceOperations*, UInt32)
    release : Proc(IADsFileServiceOperations*, UInt32)
    get_type_info_count : Proc(IADsFileServiceOperations*, UInt32*, HRESULT)
    get_type_info : Proc(IADsFileServiceOperations*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsFileServiceOperations*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsFileServiceOperations*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IADsFileServiceOperations*, UInt8**, HRESULT)
    get_class : Proc(IADsFileServiceOperations*, UInt8**, HRESULT)
    get_guid : Proc(IADsFileServiceOperations*, UInt8**, HRESULT)
    get_a_ds_path : Proc(IADsFileServiceOperations*, UInt8**, HRESULT)
    get_parent : Proc(IADsFileServiceOperations*, UInt8**, HRESULT)
    get_schema : Proc(IADsFileServiceOperations*, UInt8**, HRESULT)
    get_info : Proc(IADsFileServiceOperations*, HRESULT)
    set_info : Proc(IADsFileServiceOperations*, HRESULT)
    get : Proc(IADsFileServiceOperations*, UInt8*, VARIANT*, HRESULT)
    put : Proc(IADsFileServiceOperations*, UInt8*, VARIANT, HRESULT)
    get_ex : Proc(IADsFileServiceOperations*, UInt8*, VARIANT*, HRESULT)
    put_ex : Proc(IADsFileServiceOperations*, Int32, UInt8*, VARIANT, HRESULT)
    get_info_ex : Proc(IADsFileServiceOperations*, VARIANT, Int32, HRESULT)
    get_status : Proc(IADsFileServiceOperations*, Int32*, HRESULT)
    start : Proc(IADsFileServiceOperations*, HRESULT)
    stop : Proc(IADsFileServiceOperations*, HRESULT)
    pause : Proc(IADsFileServiceOperations*, HRESULT)
    continue : Proc(IADsFileServiceOperations*, HRESULT)
    set_password : Proc(IADsFileServiceOperations*, UInt8*, HRESULT)
    sessions : Proc(IADsFileServiceOperations*, IADsCollection*, HRESULT)
    resources : Proc(IADsFileServiceOperations*, IADsCollection*, HRESULT)
  end

  IADsFileServiceOperations_GUID = "a02ded10-31ca-11cf-a98a-00aa006bc149"
  IID_IADsFileServiceOperations = LibC::GUID.new(0xa02ded10_u32, 0x31ca_u16, 0x11cf_u16, StaticArray[0xa9_u8, 0x8a_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0xc1_u8, 0x49_u8])
  struct IADsFileServiceOperations
    lpVtbl : IADsFileServiceOperationsVTbl*
  end

  struct IADsFileShareVTbl
    query_interface : Proc(IADsFileShare*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsFileShare*, UInt32)
    release : Proc(IADsFileShare*, UInt32)
    get_type_info_count : Proc(IADsFileShare*, UInt32*, HRESULT)
    get_type_info : Proc(IADsFileShare*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsFileShare*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsFileShare*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IADsFileShare*, UInt8**, HRESULT)
    get_class : Proc(IADsFileShare*, UInt8**, HRESULT)
    get_guid : Proc(IADsFileShare*, UInt8**, HRESULT)
    get_a_ds_path : Proc(IADsFileShare*, UInt8**, HRESULT)
    get_parent : Proc(IADsFileShare*, UInt8**, HRESULT)
    get_schema : Proc(IADsFileShare*, UInt8**, HRESULT)
    get_info : Proc(IADsFileShare*, HRESULT)
    set_info : Proc(IADsFileShare*, HRESULT)
    get : Proc(IADsFileShare*, UInt8*, VARIANT*, HRESULT)
    put : Proc(IADsFileShare*, UInt8*, VARIANT, HRESULT)
    get_ex : Proc(IADsFileShare*, UInt8*, VARIANT*, HRESULT)
    put_ex : Proc(IADsFileShare*, Int32, UInt8*, VARIANT, HRESULT)
    get_info_ex : Proc(IADsFileShare*, VARIANT, Int32, HRESULT)
    get_current_user_count : Proc(IADsFileShare*, Int32*, HRESULT)
    get_description : Proc(IADsFileShare*, UInt8**, HRESULT)
    put_description : Proc(IADsFileShare*, UInt8*, HRESULT)
    get_host_computer : Proc(IADsFileShare*, UInt8**, HRESULT)
    put_host_computer : Proc(IADsFileShare*, UInt8*, HRESULT)
    get_path : Proc(IADsFileShare*, UInt8**, HRESULT)
    put_path : Proc(IADsFileShare*, UInt8*, HRESULT)
    get_max_user_count : Proc(IADsFileShare*, Int32*, HRESULT)
    put_max_user_count : Proc(IADsFileShare*, Int32, HRESULT)
  end

  IADsFileShare_GUID = "eb6dcaf0-4b83-11cf-a995-00aa006bc149"
  IID_IADsFileShare = LibC::GUID.new(0xeb6dcaf0_u32, 0x4b83_u16, 0x11cf_u16, StaticArray[0xa9_u8, 0x95_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0xc1_u8, 0x49_u8])
  struct IADsFileShare
    lpVtbl : IADsFileShareVTbl*
  end

  struct IADsSessionVTbl
    query_interface : Proc(IADsSession*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsSession*, UInt32)
    release : Proc(IADsSession*, UInt32)
    get_type_info_count : Proc(IADsSession*, UInt32*, HRESULT)
    get_type_info : Proc(IADsSession*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsSession*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsSession*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IADsSession*, UInt8**, HRESULT)
    get_class : Proc(IADsSession*, UInt8**, HRESULT)
    get_guid : Proc(IADsSession*, UInt8**, HRESULT)
    get_a_ds_path : Proc(IADsSession*, UInt8**, HRESULT)
    get_parent : Proc(IADsSession*, UInt8**, HRESULT)
    get_schema : Proc(IADsSession*, UInt8**, HRESULT)
    get_info : Proc(IADsSession*, HRESULT)
    set_info : Proc(IADsSession*, HRESULT)
    get : Proc(IADsSession*, UInt8*, VARIANT*, HRESULT)
    put : Proc(IADsSession*, UInt8*, VARIANT, HRESULT)
    get_ex : Proc(IADsSession*, UInt8*, VARIANT*, HRESULT)
    put_ex : Proc(IADsSession*, Int32, UInt8*, VARIANT, HRESULT)
    get_info_ex : Proc(IADsSession*, VARIANT, Int32, HRESULT)
    get_user : Proc(IADsSession*, UInt8**, HRESULT)
    get_user_path : Proc(IADsSession*, UInt8**, HRESULT)
    get_computer : Proc(IADsSession*, UInt8**, HRESULT)
    get_computer_path : Proc(IADsSession*, UInt8**, HRESULT)
    get_connect_time : Proc(IADsSession*, Int32*, HRESULT)
    get_idle_time : Proc(IADsSession*, Int32*, HRESULT)
  end

  IADsSession_GUID = "398b7da0-4aab-11cf-ae2c-00aa006ebfb9"
  IID_IADsSession = LibC::GUID.new(0x398b7da0_u32, 0x4aab_u16, 0x11cf_u16, StaticArray[0xae_u8, 0x2c_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6e_u8, 0xbf_u8, 0xb9_u8])
  struct IADsSession
    lpVtbl : IADsSessionVTbl*
  end

  struct IADsResourceVTbl
    query_interface : Proc(IADsResource*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsResource*, UInt32)
    release : Proc(IADsResource*, UInt32)
    get_type_info_count : Proc(IADsResource*, UInt32*, HRESULT)
    get_type_info : Proc(IADsResource*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsResource*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsResource*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IADsResource*, UInt8**, HRESULT)
    get_class : Proc(IADsResource*, UInt8**, HRESULT)
    get_guid : Proc(IADsResource*, UInt8**, HRESULT)
    get_a_ds_path : Proc(IADsResource*, UInt8**, HRESULT)
    get_parent : Proc(IADsResource*, UInt8**, HRESULT)
    get_schema : Proc(IADsResource*, UInt8**, HRESULT)
    get_info : Proc(IADsResource*, HRESULT)
    set_info : Proc(IADsResource*, HRESULT)
    get : Proc(IADsResource*, UInt8*, VARIANT*, HRESULT)
    put : Proc(IADsResource*, UInt8*, VARIANT, HRESULT)
    get_ex : Proc(IADsResource*, UInt8*, VARIANT*, HRESULT)
    put_ex : Proc(IADsResource*, Int32, UInt8*, VARIANT, HRESULT)
    get_info_ex : Proc(IADsResource*, VARIANT, Int32, HRESULT)
    get_user : Proc(IADsResource*, UInt8**, HRESULT)
    get_user_path : Proc(IADsResource*, UInt8**, HRESULT)
    get_path : Proc(IADsResource*, UInt8**, HRESULT)
    get_lock_count : Proc(IADsResource*, Int32*, HRESULT)
  end

  IADsResource_GUID = "34a05b20-4aab-11cf-ae2c-00aa006ebfb9"
  IID_IADsResource = LibC::GUID.new(0x34a05b20_u32, 0x4aab_u16, 0x11cf_u16, StaticArray[0xae_u8, 0x2c_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6e_u8, 0xbf_u8, 0xb9_u8])
  struct IADsResource
    lpVtbl : IADsResourceVTbl*
  end

  struct IADsOpenDSObjectVTbl
    query_interface : Proc(IADsOpenDSObject*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsOpenDSObject*, UInt32)
    release : Proc(IADsOpenDSObject*, UInt32)
    get_type_info_count : Proc(IADsOpenDSObject*, UInt32*, HRESULT)
    get_type_info : Proc(IADsOpenDSObject*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsOpenDSObject*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsOpenDSObject*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    open_ds_object : Proc(IADsOpenDSObject*, UInt8*, UInt8*, UInt8*, Int32, IDispatch*, HRESULT)
  end

  IADsOpenDSObject_GUID = "ddf2891e-0f9c-11d0-8ad4-00c04fd8d503"
  IID_IADsOpenDSObject = LibC::GUID.new(0xddf2891e_u32, 0xf9c_u16, 0x11d0_u16, StaticArray[0x8a_u8, 0xd4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
  struct IADsOpenDSObject
    lpVtbl : IADsOpenDSObjectVTbl*
  end

  struct IDirectoryObjectVTbl
    query_interface : Proc(IDirectoryObject*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectoryObject*, UInt32)
    release : Proc(IDirectoryObject*, UInt32)
    get_object_information : Proc(IDirectoryObject*, ADS_OBJECT_INFO**, HRESULT)
    get_object_attributes : Proc(IDirectoryObject*, LibC::LPWSTR*, UInt32, ADS_ATTR_INFO**, UInt32*, HRESULT)
    set_object_attributes : Proc(IDirectoryObject*, ADS_ATTR_INFO*, UInt32, UInt32*, HRESULT)
    create_ds_object : Proc(IDirectoryObject*, LibC::LPWSTR, ADS_ATTR_INFO*, UInt32, IDispatch*, HRESULT)
    delete_ds_object : Proc(IDirectoryObject*, LibC::LPWSTR, HRESULT)
  end

  IDirectoryObject_GUID = "e798de2c-22e4-11d0-84fe-00c04fd8d503"
  IID_IDirectoryObject = LibC::GUID.new(0xe798de2c_u32, 0x22e4_u16, 0x11d0_u16, StaticArray[0x84_u8, 0xfe_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
  struct IDirectoryObject
    lpVtbl : IDirectoryObjectVTbl*
  end

  struct IDirectorySearchVTbl
    query_interface : Proc(IDirectorySearch*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectorySearch*, UInt32)
    release : Proc(IDirectorySearch*, UInt32)
    set_search_preference : Proc(IDirectorySearch*, Ads_searchpref_info*, UInt32, HRESULT)
    execute_search : Proc(IDirectorySearch*, LibC::LPWSTR, LibC::LPWSTR*, UInt32, LibC::IntPtrT*, HRESULT)
    abandon_search : Proc(IDirectorySearch*, LibC::IntPtrT, HRESULT)
    get_first_row : Proc(IDirectorySearch*, LibC::IntPtrT, HRESULT)
    get_next_row : Proc(IDirectorySearch*, LibC::IntPtrT, HRESULT)
    get_previous_row : Proc(IDirectorySearch*, LibC::IntPtrT, HRESULT)
    get_next_column_name : Proc(IDirectorySearch*, LibC::IntPtrT, LibC::LPWSTR*, HRESULT)
    get_column : Proc(IDirectorySearch*, LibC::IntPtrT, LibC::LPWSTR, Ads_search_column*, HRESULT)
    free_column : Proc(IDirectorySearch*, Ads_search_column*, HRESULT)
    close_search_handle : Proc(IDirectorySearch*, LibC::IntPtrT, HRESULT)
  end

  IDirectorySearch_GUID = "109ba8ec-92f0-11d0-a790-00c04fd8d5a8"
  IID_IDirectorySearch = LibC::GUID.new(0x109ba8ec_u32, 0x92f0_u16, 0x11d0_u16, StaticArray[0xa7_u8, 0x90_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0xa8_u8])
  struct IDirectorySearch
    lpVtbl : IDirectorySearchVTbl*
  end

  struct IDirectorySchemaMgmtVTbl
    query_interface : Proc(IDirectorySchemaMgmt*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectorySchemaMgmt*, UInt32)
    release : Proc(IDirectorySchemaMgmt*, UInt32)
    enum_attributes : Proc(IDirectorySchemaMgmt*, LibC::LPWSTR*, UInt32, ADS_ATTR_DEF**, UInt32*, HRESULT)
    create_attribute_definition : Proc(IDirectorySchemaMgmt*, LibC::LPWSTR, ADS_ATTR_DEF*, HRESULT)
    write_attribute_definition : Proc(IDirectorySchemaMgmt*, LibC::LPWSTR, ADS_ATTR_DEF*, HRESULT)
    delete_attribute_definition : Proc(IDirectorySchemaMgmt*, LibC::LPWSTR, HRESULT)
    enum_classes : Proc(IDirectorySchemaMgmt*, LibC::LPWSTR*, UInt32, ADS_CLASS_DEF**, UInt32*, HRESULT)
    write_class_definition : Proc(IDirectorySchemaMgmt*, LibC::LPWSTR, ADS_CLASS_DEF*, HRESULT)
    create_class_definition : Proc(IDirectorySchemaMgmt*, LibC::LPWSTR, ADS_CLASS_DEF*, HRESULT)
    delete_class_definition : Proc(IDirectorySchemaMgmt*, LibC::LPWSTR, HRESULT)
  end

  IDirectorySchemaMgmt_GUID = "75db3b9c-a4d8-11d0-a79c-00c04fd8d5a8"
  IID_IDirectorySchemaMgmt = LibC::GUID.new(0x75db3b9c_u32, 0xa4d8_u16, 0x11d0_u16, StaticArray[0xa7_u8, 0x9c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0xa8_u8])
  struct IDirectorySchemaMgmt
    lpVtbl : IDirectorySchemaMgmtVTbl*
  end

  struct IADsAggregateeVTbl
    query_interface : Proc(IADsAggregatee*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsAggregatee*, UInt32)
    release : Proc(IADsAggregatee*, UInt32)
    connect_as_aggregatee : Proc(IADsAggregatee*, IUnknown, HRESULT)
    disconnect_as_aggregatee : Proc(IADsAggregatee*, HRESULT)
    relinquish_interface : Proc(IADsAggregatee*, Guid*, HRESULT)
    restore_interface : Proc(IADsAggregatee*, Guid*, HRESULT)
  end

  IADsAggregatee_GUID = "1346ce8c-9039-11d0-8528-00c04fd8d503"
  IID_IADsAggregatee = LibC::GUID.new(0x1346ce8c_u32, 0x9039_u16, 0x11d0_u16, StaticArray[0x85_u8, 0x28_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
  struct IADsAggregatee
    lpVtbl : IADsAggregateeVTbl*
  end

  struct IADsAggregatorVTbl
    query_interface : Proc(IADsAggregator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsAggregator*, UInt32)
    release : Proc(IADsAggregator*, UInt32)
    connect_as_aggregator : Proc(IADsAggregator*, IUnknown, HRESULT)
    disconnect_as_aggregator : Proc(IADsAggregator*, HRESULT)
  end

  IADsAggregator_GUID = "52db5fb0-941f-11d0-8529-00c04fd8d503"
  IID_IADsAggregator = LibC::GUID.new(0x52db5fb0_u32, 0x941f_u16, 0x11d0_u16, StaticArray[0x85_u8, 0x29_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
  struct IADsAggregator
    lpVtbl : IADsAggregatorVTbl*
  end

  struct IADsAccessControlEntryVTbl
    query_interface : Proc(IADsAccessControlEntry*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsAccessControlEntry*, UInt32)
    release : Proc(IADsAccessControlEntry*, UInt32)
    get_type_info_count : Proc(IADsAccessControlEntry*, UInt32*, HRESULT)
    get_type_info : Proc(IADsAccessControlEntry*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsAccessControlEntry*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsAccessControlEntry*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_access_mask : Proc(IADsAccessControlEntry*, Int32*, HRESULT)
    put_access_mask : Proc(IADsAccessControlEntry*, Int32, HRESULT)
    get_ace_type : Proc(IADsAccessControlEntry*, Int32*, HRESULT)
    put_ace_type : Proc(IADsAccessControlEntry*, Int32, HRESULT)
    get_ace_flags : Proc(IADsAccessControlEntry*, Int32*, HRESULT)
    put_ace_flags : Proc(IADsAccessControlEntry*, Int32, HRESULT)
    get_flags : Proc(IADsAccessControlEntry*, Int32*, HRESULT)
    put_flags : Proc(IADsAccessControlEntry*, Int32, HRESULT)
    get_object_type : Proc(IADsAccessControlEntry*, UInt8**, HRESULT)
    put_object_type : Proc(IADsAccessControlEntry*, UInt8*, HRESULT)
    get_inherited_object_type : Proc(IADsAccessControlEntry*, UInt8**, HRESULT)
    put_inherited_object_type : Proc(IADsAccessControlEntry*, UInt8*, HRESULT)
    get_trustee : Proc(IADsAccessControlEntry*, UInt8**, HRESULT)
    put_trustee : Proc(IADsAccessControlEntry*, UInt8*, HRESULT)
  end

  IADsAccessControlEntry_GUID = "b4f3a14c-9bdd-11d0-852c-00c04fd8d503"
  IID_IADsAccessControlEntry = LibC::GUID.new(0xb4f3a14c_u32, 0x9bdd_u16, 0x11d0_u16, StaticArray[0x85_u8, 0x2c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
  struct IADsAccessControlEntry
    lpVtbl : IADsAccessControlEntryVTbl*
  end

  struct IADsAccessControlListVTbl
    query_interface : Proc(IADsAccessControlList*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsAccessControlList*, UInt32)
    release : Proc(IADsAccessControlList*, UInt32)
    get_type_info_count : Proc(IADsAccessControlList*, UInt32*, HRESULT)
    get_type_info : Proc(IADsAccessControlList*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsAccessControlList*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsAccessControlList*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_acl_revision : Proc(IADsAccessControlList*, Int32*, HRESULT)
    put_acl_revision : Proc(IADsAccessControlList*, Int32, HRESULT)
    get_ace_count : Proc(IADsAccessControlList*, Int32*, HRESULT)
    put_ace_count : Proc(IADsAccessControlList*, Int32, HRESULT)
    add_ace : Proc(IADsAccessControlList*, IDispatch, HRESULT)
    remove_ace : Proc(IADsAccessControlList*, IDispatch, HRESULT)
    copy_access_list : Proc(IADsAccessControlList*, IDispatch*, HRESULT)
    get__new_enum : Proc(IADsAccessControlList*, IUnknown*, HRESULT)
  end

  IADsAccessControlList_GUID = "b7ee91cc-9bdd-11d0-852c-00c04fd8d503"
  IID_IADsAccessControlList = LibC::GUID.new(0xb7ee91cc_u32, 0x9bdd_u16, 0x11d0_u16, StaticArray[0x85_u8, 0x2c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
  struct IADsAccessControlList
    lpVtbl : IADsAccessControlListVTbl*
  end

  struct IADsSecurityDescriptorVTbl
    query_interface : Proc(IADsSecurityDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsSecurityDescriptor*, UInt32)
    release : Proc(IADsSecurityDescriptor*, UInt32)
    get_type_info_count : Proc(IADsSecurityDescriptor*, UInt32*, HRESULT)
    get_type_info : Proc(IADsSecurityDescriptor*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsSecurityDescriptor*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsSecurityDescriptor*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_revision : Proc(IADsSecurityDescriptor*, Int32*, HRESULT)
    put_revision : Proc(IADsSecurityDescriptor*, Int32, HRESULT)
    get_control : Proc(IADsSecurityDescriptor*, Int32*, HRESULT)
    put_control : Proc(IADsSecurityDescriptor*, Int32, HRESULT)
    get_owner : Proc(IADsSecurityDescriptor*, UInt8**, HRESULT)
    put_owner : Proc(IADsSecurityDescriptor*, UInt8*, HRESULT)
    get_owner_defaulted : Proc(IADsSecurityDescriptor*, Int16*, HRESULT)
    put_owner_defaulted : Proc(IADsSecurityDescriptor*, Int16, HRESULT)
    get_group : Proc(IADsSecurityDescriptor*, UInt8**, HRESULT)
    put_group : Proc(IADsSecurityDescriptor*, UInt8*, HRESULT)
    get_group_defaulted : Proc(IADsSecurityDescriptor*, Int16*, HRESULT)
    put_group_defaulted : Proc(IADsSecurityDescriptor*, Int16, HRESULT)
    get_discretionary_acl : Proc(IADsSecurityDescriptor*, IDispatch*, HRESULT)
    put_discretionary_acl : Proc(IADsSecurityDescriptor*, IDispatch, HRESULT)
    get_dacl_defaulted : Proc(IADsSecurityDescriptor*, Int16*, HRESULT)
    put_dacl_defaulted : Proc(IADsSecurityDescriptor*, Int16, HRESULT)
    get_system_acl : Proc(IADsSecurityDescriptor*, IDispatch*, HRESULT)
    put_system_acl : Proc(IADsSecurityDescriptor*, IDispatch, HRESULT)
    get_sacl_defaulted : Proc(IADsSecurityDescriptor*, Int16*, HRESULT)
    put_sacl_defaulted : Proc(IADsSecurityDescriptor*, Int16, HRESULT)
    copy_security_descriptor : Proc(IADsSecurityDescriptor*, IDispatch*, HRESULT)
  end

  IADsSecurityDescriptor_GUID = "b8c787ca-9bdd-11d0-852c-00c04fd8d503"
  IID_IADsSecurityDescriptor = LibC::GUID.new(0xb8c787ca_u32, 0x9bdd_u16, 0x11d0_u16, StaticArray[0x85_u8, 0x2c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
  struct IADsSecurityDescriptor
    lpVtbl : IADsSecurityDescriptorVTbl*
  end

  struct IADsLargeIntegerVTbl
    query_interface : Proc(IADsLargeInteger*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsLargeInteger*, UInt32)
    release : Proc(IADsLargeInteger*, UInt32)
    get_type_info_count : Proc(IADsLargeInteger*, UInt32*, HRESULT)
    get_type_info : Proc(IADsLargeInteger*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsLargeInteger*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsLargeInteger*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_high_part : Proc(IADsLargeInteger*, Int32*, HRESULT)
    put_high_part : Proc(IADsLargeInteger*, Int32, HRESULT)
    get_low_part : Proc(IADsLargeInteger*, Int32*, HRESULT)
    put_low_part : Proc(IADsLargeInteger*, Int32, HRESULT)
  end

  IADsLargeInteger_GUID = "9068270b-0939-11d1-8be1-00c04fd8d503"
  IID_IADsLargeInteger = LibC::GUID.new(0x9068270b_u32, 0x939_u16, 0x11d1_u16, StaticArray[0x8b_u8, 0xe1_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
  struct IADsLargeInteger
    lpVtbl : IADsLargeIntegerVTbl*
  end

  struct IADsNameTranslateVTbl
    query_interface : Proc(IADsNameTranslate*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsNameTranslate*, UInt32)
    release : Proc(IADsNameTranslate*, UInt32)
    get_type_info_count : Proc(IADsNameTranslate*, UInt32*, HRESULT)
    get_type_info : Proc(IADsNameTranslate*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsNameTranslate*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsNameTranslate*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_chase_referral : Proc(IADsNameTranslate*, Int32, HRESULT)
    init : Proc(IADsNameTranslate*, Int32, UInt8*, HRESULT)
    init_ex : Proc(IADsNameTranslate*, Int32, UInt8*, UInt8*, UInt8*, UInt8*, HRESULT)
    set : Proc(IADsNameTranslate*, Int32, UInt8*, HRESULT)
    get : Proc(IADsNameTranslate*, Int32, UInt8**, HRESULT)
    set_ex : Proc(IADsNameTranslate*, Int32, VARIANT, HRESULT)
    get_ex : Proc(IADsNameTranslate*, Int32, VARIANT*, HRESULT)
  end

  IADsNameTranslate_GUID = "b1b272a3-3625-11d1-a3a4-00c04fb950dc"
  IID_IADsNameTranslate = LibC::GUID.new(0xb1b272a3_u32, 0x3625_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xa4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  struct IADsNameTranslate
    lpVtbl : IADsNameTranslateVTbl*
  end

  struct IADsCaseIgnoreListVTbl
    query_interface : Proc(IADsCaseIgnoreList*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsCaseIgnoreList*, UInt32)
    release : Proc(IADsCaseIgnoreList*, UInt32)
    get_type_info_count : Proc(IADsCaseIgnoreList*, UInt32*, HRESULT)
    get_type_info : Proc(IADsCaseIgnoreList*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsCaseIgnoreList*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsCaseIgnoreList*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_case_ignore_list : Proc(IADsCaseIgnoreList*, VARIANT*, HRESULT)
    put_case_ignore_list : Proc(IADsCaseIgnoreList*, VARIANT, HRESULT)
  end

  IADsCaseIgnoreList_GUID = "7b66b533-4680-11d1-a3b4-00c04fb950dc"
  IID_IADsCaseIgnoreList = LibC::GUID.new(0x7b66b533_u32, 0x4680_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xb4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  struct IADsCaseIgnoreList
    lpVtbl : IADsCaseIgnoreListVTbl*
  end

  struct IADsFaxNumberVTbl
    query_interface : Proc(IADsFaxNumber*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsFaxNumber*, UInt32)
    release : Proc(IADsFaxNumber*, UInt32)
    get_type_info_count : Proc(IADsFaxNumber*, UInt32*, HRESULT)
    get_type_info : Proc(IADsFaxNumber*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsFaxNumber*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsFaxNumber*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_telephone_number : Proc(IADsFaxNumber*, UInt8**, HRESULT)
    put_telephone_number : Proc(IADsFaxNumber*, UInt8*, HRESULT)
    get_parameters : Proc(IADsFaxNumber*, VARIANT*, HRESULT)
    put_parameters : Proc(IADsFaxNumber*, VARIANT, HRESULT)
  end

  IADsFaxNumber_GUID = "a910dea9-4680-11d1-a3b4-00c04fb950dc"
  IID_IADsFaxNumber = LibC::GUID.new(0xa910dea9_u32, 0x4680_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xb4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  struct IADsFaxNumber
    lpVtbl : IADsFaxNumberVTbl*
  end

  struct IADsNetAddressVTbl
    query_interface : Proc(IADsNetAddress*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsNetAddress*, UInt32)
    release : Proc(IADsNetAddress*, UInt32)
    get_type_info_count : Proc(IADsNetAddress*, UInt32*, HRESULT)
    get_type_info : Proc(IADsNetAddress*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsNetAddress*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsNetAddress*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_address_type : Proc(IADsNetAddress*, Int32*, HRESULT)
    put_address_type : Proc(IADsNetAddress*, Int32, HRESULT)
    get_address : Proc(IADsNetAddress*, VARIANT*, HRESULT)
    put_address : Proc(IADsNetAddress*, VARIANT, HRESULT)
  end

  IADsNetAddress_GUID = "b21a50a9-4080-11d1-a3ac-00c04fb950dc"
  IID_IADsNetAddress = LibC::GUID.new(0xb21a50a9_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  struct IADsNetAddress
    lpVtbl : IADsNetAddressVTbl*
  end

  struct IADsOctetListVTbl
    query_interface : Proc(IADsOctetList*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsOctetList*, UInt32)
    release : Proc(IADsOctetList*, UInt32)
    get_type_info_count : Proc(IADsOctetList*, UInt32*, HRESULT)
    get_type_info : Proc(IADsOctetList*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsOctetList*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsOctetList*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_octet_list : Proc(IADsOctetList*, VARIANT*, HRESULT)
    put_octet_list : Proc(IADsOctetList*, VARIANT, HRESULT)
  end

  IADsOctetList_GUID = "7b28b80f-4680-11d1-a3b4-00c04fb950dc"
  IID_IADsOctetList = LibC::GUID.new(0x7b28b80f_u32, 0x4680_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xb4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  struct IADsOctetList
    lpVtbl : IADsOctetListVTbl*
  end

  struct IADsEmailVTbl
    query_interface : Proc(IADsEmail*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsEmail*, UInt32)
    release : Proc(IADsEmail*, UInt32)
    get_type_info_count : Proc(IADsEmail*, UInt32*, HRESULT)
    get_type_info : Proc(IADsEmail*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsEmail*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsEmail*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_type : Proc(IADsEmail*, Int32*, HRESULT)
    put_type : Proc(IADsEmail*, Int32, HRESULT)
    get_address : Proc(IADsEmail*, UInt8**, HRESULT)
    put_address : Proc(IADsEmail*, UInt8*, HRESULT)
  end

  IADsEmail_GUID = "97af011a-478e-11d1-a3b4-00c04fb950dc"
  IID_IADsEmail = LibC::GUID.new(0x97af011a_u32, 0x478e_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xb4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  struct IADsEmail
    lpVtbl : IADsEmailVTbl*
  end

  struct IADsPathVTbl
    query_interface : Proc(IADsPath*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsPath*, UInt32)
    release : Proc(IADsPath*, UInt32)
    get_type_info_count : Proc(IADsPath*, UInt32*, HRESULT)
    get_type_info : Proc(IADsPath*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsPath*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsPath*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_type : Proc(IADsPath*, Int32*, HRESULT)
    put_type : Proc(IADsPath*, Int32, HRESULT)
    get_volume_name : Proc(IADsPath*, UInt8**, HRESULT)
    put_volume_name : Proc(IADsPath*, UInt8*, HRESULT)
    get_path : Proc(IADsPath*, UInt8**, HRESULT)
    put_path : Proc(IADsPath*, UInt8*, HRESULT)
  end

  IADsPath_GUID = "b287fcd5-4080-11d1-a3ac-00c04fb950dc"
  IID_IADsPath = LibC::GUID.new(0xb287fcd5_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  struct IADsPath
    lpVtbl : IADsPathVTbl*
  end

  struct IADsReplicaPointerVTbl
    query_interface : Proc(IADsReplicaPointer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsReplicaPointer*, UInt32)
    release : Proc(IADsReplicaPointer*, UInt32)
    get_type_info_count : Proc(IADsReplicaPointer*, UInt32*, HRESULT)
    get_type_info : Proc(IADsReplicaPointer*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsReplicaPointer*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsReplicaPointer*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_server_name : Proc(IADsReplicaPointer*, UInt8**, HRESULT)
    put_server_name : Proc(IADsReplicaPointer*, UInt8*, HRESULT)
    get_replica_type : Proc(IADsReplicaPointer*, Int32*, HRESULT)
    put_replica_type : Proc(IADsReplicaPointer*, Int32, HRESULT)
    get_replica_number : Proc(IADsReplicaPointer*, Int32*, HRESULT)
    put_replica_number : Proc(IADsReplicaPointer*, Int32, HRESULT)
    get_count : Proc(IADsReplicaPointer*, Int32*, HRESULT)
    put_count : Proc(IADsReplicaPointer*, Int32, HRESULT)
    get_replica_address_hints : Proc(IADsReplicaPointer*, VARIANT*, HRESULT)
    put_replica_address_hints : Proc(IADsReplicaPointer*, VARIANT, HRESULT)
  end

  IADsReplicaPointer_GUID = "f60fb803-4080-11d1-a3ac-00c04fb950dc"
  IID_IADsReplicaPointer = LibC::GUID.new(0xf60fb803_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  struct IADsReplicaPointer
    lpVtbl : IADsReplicaPointerVTbl*
  end

  struct IADsAclVTbl
    query_interface : Proc(IADsAcl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsAcl*, UInt32)
    release : Proc(IADsAcl*, UInt32)
    get_type_info_count : Proc(IADsAcl*, UInt32*, HRESULT)
    get_type_info : Proc(IADsAcl*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsAcl*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsAcl*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_protected_attr_name : Proc(IADsAcl*, UInt8**, HRESULT)
    put_protected_attr_name : Proc(IADsAcl*, UInt8*, HRESULT)
    get_subject_name : Proc(IADsAcl*, UInt8**, HRESULT)
    put_subject_name : Proc(IADsAcl*, UInt8*, HRESULT)
    get_privileges : Proc(IADsAcl*, Int32*, HRESULT)
    put_privileges : Proc(IADsAcl*, Int32, HRESULT)
    copy_acl : Proc(IADsAcl*, IDispatch*, HRESULT)
  end

  IADsAcl_GUID = "8452d3ab-0869-11d1-a377-00c04fb950dc"
  IID_IADsAcl = LibC::GUID.new(0x8452d3ab_u32, 0x869_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0x77_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  struct IADsAcl
    lpVtbl : IADsAclVTbl*
  end

  struct IADsTimestampVTbl
    query_interface : Proc(IADsTimestamp*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsTimestamp*, UInt32)
    release : Proc(IADsTimestamp*, UInt32)
    get_type_info_count : Proc(IADsTimestamp*, UInt32*, HRESULT)
    get_type_info : Proc(IADsTimestamp*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsTimestamp*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsTimestamp*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_whole_seconds : Proc(IADsTimestamp*, Int32*, HRESULT)
    put_whole_seconds : Proc(IADsTimestamp*, Int32, HRESULT)
    get_event_id : Proc(IADsTimestamp*, Int32*, HRESULT)
    put_event_id : Proc(IADsTimestamp*, Int32, HRESULT)
  end

  IADsTimestamp_GUID = "b2f5a901-4080-11d1-a3ac-00c04fb950dc"
  IID_IADsTimestamp = LibC::GUID.new(0xb2f5a901_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  struct IADsTimestamp
    lpVtbl : IADsTimestampVTbl*
  end

  struct IADsPostalAddressVTbl
    query_interface : Proc(IADsPostalAddress*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsPostalAddress*, UInt32)
    release : Proc(IADsPostalAddress*, UInt32)
    get_type_info_count : Proc(IADsPostalAddress*, UInt32*, HRESULT)
    get_type_info : Proc(IADsPostalAddress*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsPostalAddress*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsPostalAddress*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_postal_address : Proc(IADsPostalAddress*, VARIANT*, HRESULT)
    put_postal_address : Proc(IADsPostalAddress*, VARIANT, HRESULT)
  end

  IADsPostalAddress_GUID = "7adecf29-4680-11d1-a3b4-00c04fb950dc"
  IID_IADsPostalAddress = LibC::GUID.new(0x7adecf29_u32, 0x4680_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xb4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  struct IADsPostalAddress
    lpVtbl : IADsPostalAddressVTbl*
  end

  struct IADsBackLinkVTbl
    query_interface : Proc(IADsBackLink*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsBackLink*, UInt32)
    release : Proc(IADsBackLink*, UInt32)
    get_type_info_count : Proc(IADsBackLink*, UInt32*, HRESULT)
    get_type_info : Proc(IADsBackLink*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsBackLink*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsBackLink*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_remote_id : Proc(IADsBackLink*, Int32*, HRESULT)
    put_remote_id : Proc(IADsBackLink*, Int32, HRESULT)
    get_object_name : Proc(IADsBackLink*, UInt8**, HRESULT)
    put_object_name : Proc(IADsBackLink*, UInt8*, HRESULT)
  end

  IADsBackLink_GUID = "fd1302bd-4080-11d1-a3ac-00c04fb950dc"
  IID_IADsBackLink = LibC::GUID.new(0xfd1302bd_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  struct IADsBackLink
    lpVtbl : IADsBackLinkVTbl*
  end

  struct IADsTypedNameVTbl
    query_interface : Proc(IADsTypedName*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsTypedName*, UInt32)
    release : Proc(IADsTypedName*, UInt32)
    get_type_info_count : Proc(IADsTypedName*, UInt32*, HRESULT)
    get_type_info : Proc(IADsTypedName*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsTypedName*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsTypedName*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_object_name : Proc(IADsTypedName*, UInt8**, HRESULT)
    put_object_name : Proc(IADsTypedName*, UInt8*, HRESULT)
    get_level : Proc(IADsTypedName*, Int32*, HRESULT)
    put_level : Proc(IADsTypedName*, Int32, HRESULT)
    get_interval : Proc(IADsTypedName*, Int32*, HRESULT)
    put_interval : Proc(IADsTypedName*, Int32, HRESULT)
  end

  IADsTypedName_GUID = "b371a349-4080-11d1-a3ac-00c04fb950dc"
  IID_IADsTypedName = LibC::GUID.new(0xb371a349_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  struct IADsTypedName
    lpVtbl : IADsTypedNameVTbl*
  end

  struct IADsHoldVTbl
    query_interface : Proc(IADsHold*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsHold*, UInt32)
    release : Proc(IADsHold*, UInt32)
    get_type_info_count : Proc(IADsHold*, UInt32*, HRESULT)
    get_type_info : Proc(IADsHold*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsHold*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsHold*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_object_name : Proc(IADsHold*, UInt8**, HRESULT)
    put_object_name : Proc(IADsHold*, UInt8*, HRESULT)
    get_amount : Proc(IADsHold*, Int32*, HRESULT)
    put_amount : Proc(IADsHold*, Int32, HRESULT)
  end

  IADsHold_GUID = "b3eb3b37-4080-11d1-a3ac-00c04fb950dc"
  IID_IADsHold = LibC::GUID.new(0xb3eb3b37_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  struct IADsHold
    lpVtbl : IADsHoldVTbl*
  end

  struct IADsObjectOptionsVTbl
    query_interface : Proc(IADsObjectOptions*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsObjectOptions*, UInt32)
    release : Proc(IADsObjectOptions*, UInt32)
    get_type_info_count : Proc(IADsObjectOptions*, UInt32*, HRESULT)
    get_type_info : Proc(IADsObjectOptions*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsObjectOptions*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsObjectOptions*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_option : Proc(IADsObjectOptions*, Int32, VARIANT*, HRESULT)
    set_option : Proc(IADsObjectOptions*, Int32, VARIANT, HRESULT)
  end

  IADsObjectOptions_GUID = "46f14fda-232b-11d1-a808-00c04fd8d5a8"
  IID_IADsObjectOptions = LibC::GUID.new(0x46f14fda_u32, 0x232b_u16, 0x11d1_u16, StaticArray[0xa8_u8, 0x8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0xa8_u8])
  struct IADsObjectOptions
    lpVtbl : IADsObjectOptionsVTbl*
  end

  struct IADsPathnameVTbl
    query_interface : Proc(IADsPathname*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsPathname*, UInt32)
    release : Proc(IADsPathname*, UInt32)
    get_type_info_count : Proc(IADsPathname*, UInt32*, HRESULT)
    get_type_info : Proc(IADsPathname*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsPathname*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsPathname*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    set : Proc(IADsPathname*, UInt8*, Int32, HRESULT)
    set_display_type : Proc(IADsPathname*, Int32, HRESULT)
    retrieve : Proc(IADsPathname*, Int32, UInt8**, HRESULT)
    get_num_elements : Proc(IADsPathname*, Int32*, HRESULT)
    get_element : Proc(IADsPathname*, Int32, UInt8**, HRESULT)
    add_leaf_element : Proc(IADsPathname*, UInt8*, HRESULT)
    remove_leaf_element : Proc(IADsPathname*, HRESULT)
    copy_path : Proc(IADsPathname*, IDispatch*, HRESULT)
    get_escaped_element : Proc(IADsPathname*, Int32, UInt8*, UInt8**, HRESULT)
    get_escaped_mode : Proc(IADsPathname*, Int32*, HRESULT)
    put_escaped_mode : Proc(IADsPathname*, Int32, HRESULT)
  end

  IADsPathname_GUID = "d592aed4-f420-11d0-a36e-00c04fb950dc"
  IID_IADsPathname = LibC::GUID.new(0xd592aed4_u32, 0xf420_u16, 0x11d0_u16, StaticArray[0xa3_u8, 0x6e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
  struct IADsPathname
    lpVtbl : IADsPathnameVTbl*
  end

  struct IADsADSystemInfoVTbl
    query_interface : Proc(IADsADSystemInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsADSystemInfo*, UInt32)
    release : Proc(IADsADSystemInfo*, UInt32)
    get_type_info_count : Proc(IADsADSystemInfo*, UInt32*, HRESULT)
    get_type_info : Proc(IADsADSystemInfo*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsADSystemInfo*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsADSystemInfo*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_user_name : Proc(IADsADSystemInfo*, UInt8**, HRESULT)
    get_computer_name : Proc(IADsADSystemInfo*, UInt8**, HRESULT)
    get_site_name : Proc(IADsADSystemInfo*, UInt8**, HRESULT)
    get_domain_short_name : Proc(IADsADSystemInfo*, UInt8**, HRESULT)
    get_domain_dns_name : Proc(IADsADSystemInfo*, UInt8**, HRESULT)
    get_forest_dns_name : Proc(IADsADSystemInfo*, UInt8**, HRESULT)
    get_pdc_role_owner : Proc(IADsADSystemInfo*, UInt8**, HRESULT)
    get_schema_role_owner : Proc(IADsADSystemInfo*, UInt8**, HRESULT)
    get_is_native_mode : Proc(IADsADSystemInfo*, Int16*, HRESULT)
    get_any_dc_name : Proc(IADsADSystemInfo*, UInt8**, HRESULT)
    get_dc_site_name : Proc(IADsADSystemInfo*, UInt8*, UInt8**, HRESULT)
    refresh_schema_cache : Proc(IADsADSystemInfo*, HRESULT)
    get_trees : Proc(IADsADSystemInfo*, VARIANT*, HRESULT)
  end

  IADsADSystemInfo_GUID = "5bb11929-afd1-11d2-9cb9-0000f87a369e"
  IID_IADsADSystemInfo = LibC::GUID.new(0x5bb11929_u32, 0xafd1_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0xb9_u8, 0x0_u8, 0x0_u8, 0xf8_u8, 0x7a_u8, 0x36_u8, 0x9e_u8])
  struct IADsADSystemInfo
    lpVtbl : IADsADSystemInfoVTbl*
  end

  struct IADsWinNTSystemInfoVTbl
    query_interface : Proc(IADsWinNTSystemInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsWinNTSystemInfo*, UInt32)
    release : Proc(IADsWinNTSystemInfo*, UInt32)
    get_type_info_count : Proc(IADsWinNTSystemInfo*, UInt32*, HRESULT)
    get_type_info : Proc(IADsWinNTSystemInfo*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsWinNTSystemInfo*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsWinNTSystemInfo*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_user_name : Proc(IADsWinNTSystemInfo*, UInt8**, HRESULT)
    get_computer_name : Proc(IADsWinNTSystemInfo*, UInt8**, HRESULT)
    get_domain_name : Proc(IADsWinNTSystemInfo*, UInt8**, HRESULT)
    get_pdc : Proc(IADsWinNTSystemInfo*, UInt8**, HRESULT)
  end

  IADsWinNTSystemInfo_GUID = "6c6d65dc-afd1-11d2-9cb9-0000f87a369e"
  IID_IADsWinNTSystemInfo = LibC::GUID.new(0x6c6d65dc_u32, 0xafd1_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0xb9_u8, 0x0_u8, 0x0_u8, 0xf8_u8, 0x7a_u8, 0x36_u8, 0x9e_u8])
  struct IADsWinNTSystemInfo
    lpVtbl : IADsWinNTSystemInfoVTbl*
  end

  struct IADsDNWithBinaryVTbl
    query_interface : Proc(IADsDNWithBinary*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsDNWithBinary*, UInt32)
    release : Proc(IADsDNWithBinary*, UInt32)
    get_type_info_count : Proc(IADsDNWithBinary*, UInt32*, HRESULT)
    get_type_info : Proc(IADsDNWithBinary*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsDNWithBinary*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsDNWithBinary*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_binary_value : Proc(IADsDNWithBinary*, VARIANT*, HRESULT)
    put_binary_value : Proc(IADsDNWithBinary*, VARIANT, HRESULT)
    get_dn_string : Proc(IADsDNWithBinary*, UInt8**, HRESULT)
    put_dn_string : Proc(IADsDNWithBinary*, UInt8*, HRESULT)
  end

  IADsDNWithBinary_GUID = "7e99c0a2-f935-11d2-ba96-00c04fb6d0d1"
  IID_IADsDNWithBinary = LibC::GUID.new(0x7e99c0a2_u32, 0xf935_u16, 0x11d2_u16, StaticArray[0xba_u8, 0x96_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xd0_u8, 0xd1_u8])
  struct IADsDNWithBinary
    lpVtbl : IADsDNWithBinaryVTbl*
  end

  struct IADsDNWithStringVTbl
    query_interface : Proc(IADsDNWithString*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsDNWithString*, UInt32)
    release : Proc(IADsDNWithString*, UInt32)
    get_type_info_count : Proc(IADsDNWithString*, UInt32*, HRESULT)
    get_type_info : Proc(IADsDNWithString*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsDNWithString*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsDNWithString*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_string_value : Proc(IADsDNWithString*, UInt8**, HRESULT)
    put_string_value : Proc(IADsDNWithString*, UInt8*, HRESULT)
    get_dn_string : Proc(IADsDNWithString*, UInt8**, HRESULT)
    put_dn_string : Proc(IADsDNWithString*, UInt8*, HRESULT)
  end

  IADsDNWithString_GUID = "370df02e-f934-11d2-ba96-00c04fb6d0d1"
  IID_IADsDNWithString = LibC::GUID.new(0x370df02e_u32, 0xf934_u16, 0x11d2_u16, StaticArray[0xba_u8, 0x96_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xd0_u8, 0xd1_u8])
  struct IADsDNWithString
    lpVtbl : IADsDNWithStringVTbl*
  end

  struct IADsSecurityUtilityVTbl
    query_interface : Proc(IADsSecurityUtility*, Guid*, Void**, HRESULT)
    add_ref : Proc(IADsSecurityUtility*, UInt32)
    release : Proc(IADsSecurityUtility*, UInt32)
    get_type_info_count : Proc(IADsSecurityUtility*, UInt32*, HRESULT)
    get_type_info : Proc(IADsSecurityUtility*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IADsSecurityUtility*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IADsSecurityUtility*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_security_descriptor : Proc(IADsSecurityUtility*, VARIANT, Int32, Int32, VARIANT*, HRESULT)
    set_security_descriptor : Proc(IADsSecurityUtility*, VARIANT, Int32, VARIANT, Int32, HRESULT)
    convert_security_descriptor : Proc(IADsSecurityUtility*, VARIANT, Int32, Int32, VARIANT*, HRESULT)
    get_security_mask : Proc(IADsSecurityUtility*, Int32*, HRESULT)
    put_security_mask : Proc(IADsSecurityUtility*, Int32, HRESULT)
  end

  IADsSecurityUtility_GUID = "a63251b2-5f21-474b-ab52-4a8efad10895"
  IID_IADsSecurityUtility = LibC::GUID.new(0xa63251b2_u32, 0x5f21_u16, 0x474b_u16, StaticArray[0xab_u8, 0x52_u8, 0x4a_u8, 0x8e_u8, 0xfa_u8, 0xd1_u8, 0x8_u8, 0x95_u8])
  struct IADsSecurityUtility
    lpVtbl : IADsSecurityUtilityVTbl*
  end

  struct IDsBrowseDomainTreeVTbl
    query_interface : Proc(IDsBrowseDomainTree*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDsBrowseDomainTree*, UInt32)
    release : Proc(IDsBrowseDomainTree*, UInt32)
    browse_to : Proc(IDsBrowseDomainTree*, LibC::HANDLE, LibC::LPWSTR*, UInt32, HRESULT)
    get_domains : Proc(IDsBrowseDomainTree*, DOMAIN_TREE**, UInt32, HRESULT)
    free_domains : Proc(IDsBrowseDomainTree*, DOMAIN_TREE**, HRESULT)
    flush_cached_domains : Proc(IDsBrowseDomainTree*, HRESULT)
    set_computer : Proc(IDsBrowseDomainTree*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
  end

  IDsBrowseDomainTree_GUID = "7cabcf1e-78f5-11d2-960c-00c04fa31a86"
  IID_IDsBrowseDomainTree = LibC::GUID.new(0x7cabcf1e_u32, 0x78f5_u16, 0x11d2_u16, StaticArray[0x96_u8, 0xc_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xa3_u8, 0x1a_u8, 0x86_u8])
  struct IDsBrowseDomainTree
    lpVtbl : IDsBrowseDomainTreeVTbl*
  end

  struct IDsDisplaySpecifierVTbl
    query_interface : Proc(IDsDisplaySpecifier*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDsDisplaySpecifier*, UInt32)
    release : Proc(IDsDisplaySpecifier*, UInt32)
    set_server : Proc(IDsDisplaySpecifier*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, UInt32, HRESULT)
    set_language_id : Proc(IDsDisplaySpecifier*, UInt16, HRESULT)
    get_display_specifier : Proc(IDsDisplaySpecifier*, LibC::LPWSTR, Guid*, Void**, HRESULT)
    get_icon_location : Proc(IDsDisplaySpecifier*, LibC::LPWSTR, UInt32, Char*, Int32, Int32*, HRESULT)
    get_icon : Proc(IDsDisplaySpecifier*, LibC::LPWSTR, UInt32, Int32, Int32, HANDLE)
    get_friendly_class_name : Proc(IDsDisplaySpecifier*, LibC::LPWSTR, Char*, Int32, HRESULT)
    get_friendly_attribute_name : Proc(IDsDisplaySpecifier*, LibC::LPWSTR, LibC::LPWSTR, Char*, UInt32, HRESULT)
    is_class_container : Proc(IDsDisplaySpecifier*, LibC::LPWSTR, LibC::LPWSTR, UInt32, LibC::BOOL)
    get_class_creation_info : Proc(IDsDisplaySpecifier*, LibC::LPWSTR, DSCLASSCREATIONINFO**, HRESULT)
    enum_class_attributes : Proc(IDsDisplaySpecifier*, LibC::LPWSTR, LPDSENUMATTRIBUTES, LPARAM, HRESULT)
    get_attribute_a_ds_type : Proc(IDsDisplaySpecifier*, LibC::LPWSTR, ADSTYPEENUM)
  end

  IDsDisplaySpecifier_GUID = "1ab4a8c0-6a0b-11d2-ad49-00c04fa31a86"
  IID_IDsDisplaySpecifier = LibC::GUID.new(0x1ab4a8c0_u32, 0x6a0b_u16, 0x11d2_u16, StaticArray[0xad_u8, 0x49_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xa3_u8, 0x1a_u8, 0x86_u8])
  struct IDsDisplaySpecifier
    lpVtbl : IDsDisplaySpecifierVTbl*
  end

  struct IDsObjectPickerVTbl
    query_interface : Proc(IDsObjectPicker*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDsObjectPicker*, UInt32)
    release : Proc(IDsObjectPicker*, UInt32)
    initialize : Proc(IDsObjectPicker*, DSOP_INIT_INFO*, HRESULT)
    invoke_dialog : Proc(IDsObjectPicker*, LibC::HANDLE, IDataObject*, HRESULT)
  end

  IDsObjectPicker_GUID = "0c87e64e-3b7a-11d2-b9e0-00c04fd8dbf7"
  IID_IDsObjectPicker = LibC::GUID.new(0xc87e64e_u32, 0x3b7a_u16, 0x11d2_u16, StaticArray[0xb9_u8, 0xe0_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xdb_u8, 0xf7_u8])
  struct IDsObjectPicker
    lpVtbl : IDsObjectPickerVTbl*
  end

  struct IDsObjectPickerCredentialsVTbl
    query_interface : Proc(IDsObjectPickerCredentials*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDsObjectPickerCredentials*, UInt32)
    release : Proc(IDsObjectPickerCredentials*, UInt32)
    initialize : Proc(IDsObjectPickerCredentials*, DSOP_INIT_INFO*, HRESULT)
    invoke_dialog : Proc(IDsObjectPickerCredentials*, LibC::HANDLE, IDataObject*, HRESULT)
    set_credentials : Proc(IDsObjectPickerCredentials*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
  end

  IDsObjectPickerCredentials_GUID = "e2d3ec9b-d041-445a-8f16-4748de8fb1cf"
  IID_IDsObjectPickerCredentials = LibC::GUID.new(0xe2d3ec9b_u32, 0xd041_u16, 0x445a_u16, StaticArray[0x8f_u8, 0x16_u8, 0x47_u8, 0x48_u8, 0xde_u8, 0x8f_u8, 0xb1_u8, 0xcf_u8])
  struct IDsObjectPickerCredentials
    lpVtbl : IDsObjectPickerCredentialsVTbl*
  end

  struct IDsAdminCreateObjVTbl
    query_interface : Proc(IDsAdminCreateObj*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDsAdminCreateObj*, UInt32)
    release : Proc(IDsAdminCreateObj*, UInt32)
    initialize : Proc(IDsAdminCreateObj*, IADsContainer, IADs, LibC::LPWSTR, HRESULT)
    create_modal : Proc(IDsAdminCreateObj*, LibC::HANDLE, IADs*, HRESULT)
  end

  IDsAdminCreateObj_GUID = "53554a38-f902-11d2-82b9-00c04f68928b"
  IID_IDsAdminCreateObj = LibC::GUID.new(0x53554a38_u32, 0xf902_u16, 0x11d2_u16, StaticArray[0x82_u8, 0xb9_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x68_u8, 0x92_u8, 0x8b_u8])
  struct IDsAdminCreateObj
    lpVtbl : IDsAdminCreateObjVTbl*
  end

  struct IDsAdminNewObjVTbl
    query_interface : Proc(IDsAdminNewObj*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDsAdminNewObj*, UInt32)
    release : Proc(IDsAdminNewObj*, UInt32)
    set_buttons : Proc(IDsAdminNewObj*, UInt32, LibC::BOOL, HRESULT)
    get_page_counts : Proc(IDsAdminNewObj*, Int32*, Int32*, HRESULT)
  end

  IDsAdminNewObj_GUID = "f2573587-e6fc-11d2-82af-00c04f68928b"
  IID_IDsAdminNewObj = LibC::GUID.new(0xf2573587_u32, 0xe6fc_u16, 0x11d2_u16, StaticArray[0x82_u8, 0xaf_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x68_u8, 0x92_u8, 0x8b_u8])
  struct IDsAdminNewObj
    lpVtbl : IDsAdminNewObjVTbl*
  end

  struct IDsAdminNewObjPrimarySiteVTbl
    query_interface : Proc(IDsAdminNewObjPrimarySite*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDsAdminNewObjPrimarySite*, UInt32)
    release : Proc(IDsAdminNewObjPrimarySite*, UInt32)
    create_new : Proc(IDsAdminNewObjPrimarySite*, LibC::LPWSTR, HRESULT)
    commit : Proc(IDsAdminNewObjPrimarySite*, HRESULT)
  end

  IDsAdminNewObjPrimarySite_GUID = "be2b487e-f904-11d2-82b9-00c04f68928b"
  IID_IDsAdminNewObjPrimarySite = LibC::GUID.new(0xbe2b487e_u32, 0xf904_u16, 0x11d2_u16, StaticArray[0x82_u8, 0xb9_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x68_u8, 0x92_u8, 0x8b_u8])
  struct IDsAdminNewObjPrimarySite
    lpVtbl : IDsAdminNewObjPrimarySiteVTbl*
  end

  struct IDsAdminNewObjExtVTbl
    query_interface : Proc(IDsAdminNewObjExt*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDsAdminNewObjExt*, UInt32)
    release : Proc(IDsAdminNewObjExt*, UInt32)
    initialize : Proc(IDsAdminNewObjExt*, IADsContainer, IADs, LibC::LPWSTR, IDsAdminNewObj, DSA_NEWOBJ_DISPINFO*, HRESULT)
    add_pages : Proc(IDsAdminNewObjExt*, LPFNSVADDPROPSHEETPAGE, LPARAM, HRESULT)
    set_object : Proc(IDsAdminNewObjExt*, IADs, HRESULT)
    write_data : Proc(IDsAdminNewObjExt*, LibC::HANDLE, UInt32, HRESULT)
    on_error : Proc(IDsAdminNewObjExt*, LibC::HANDLE, HRESULT, UInt32, HRESULT)
    get_summary_info : Proc(IDsAdminNewObjExt*, UInt8**, HRESULT)
  end

  IDsAdminNewObjExt_GUID = "6088eae2-e7bf-11d2-82af-00c04f68928b"
  IID_IDsAdminNewObjExt = LibC::GUID.new(0x6088eae2_u32, 0xe7bf_u16, 0x11d2_u16, StaticArray[0x82_u8, 0xaf_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x68_u8, 0x92_u8, 0x8b_u8])
  struct IDsAdminNewObjExt
    lpVtbl : IDsAdminNewObjExtVTbl*
  end

  struct IDsAdminNotifyHandlerVTbl
    query_interface : Proc(IDsAdminNotifyHandler*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDsAdminNotifyHandler*, UInt32)
    release : Proc(IDsAdminNotifyHandler*, UInt32)
    initialize : Proc(IDsAdminNotifyHandler*, IDataObject, UInt32*, HRESULT)
    begin_ : Proc(IDsAdminNotifyHandler*, UInt32, IDataObject, IDataObject, UInt32*, UInt8**, HRESULT)
    notify : Proc(IDsAdminNotifyHandler*, UInt32, UInt32, HRESULT)
    end_ : Proc(IDsAdminNotifyHandler*, HRESULT)
  end

  IDsAdminNotifyHandler_GUID = "e4a2b8b3-5a18-11d2-97c1-00a0c9a06d2d"
  IID_IDsAdminNotifyHandler = LibC::GUID.new(0xe4a2b8b3_u32, 0x5a18_u16, 0x11d2_u16, StaticArray[0x97_u8, 0xc1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xa0_u8, 0x6d_u8, 0x2d_u8])
  struct IDsAdminNotifyHandler
    lpVtbl : IDsAdminNotifyHandlerVTbl*
  end


  # Params # lpszpathname : LibC::LPWSTR [In],riid : Guid* [In],ppobject : Void** [In]
  fun ADsGetObject(lpszpathname : LibC::LPWSTR, riid : Guid*, ppobject : Void**) : HRESULT

  # Params # padscontainer : IADsContainer [In],ppenumvariant : IEnumVARIANT* [In]
  fun ADsBuildEnumerator(padscontainer : IADsContainer, ppenumvariant : IEnumVARIANT*) : HRESULT

  # Params # penumvariant : IEnumVARIANT [In]
  fun ADsFreeEnumerator(penumvariant : IEnumVARIANT) : HRESULT

  # Params # penumvariant : IEnumVARIANT [In],celements : UInt32 [In],pvar : VARIANT* [In],pcelementsfetched : UInt32* [In]
  fun ADsEnumerateNext(penumvariant : IEnumVARIANT, celements : UInt32, pvar : VARIANT*, pcelementsfetched : UInt32*) : HRESULT

  # Params # lpppathnames : LibC::LPWSTR* [In],dwpathnames : UInt32 [In],pvar : VARIANT* [In]
  fun ADsBuildVarArrayStr(lpppathnames : LibC::LPWSTR*, dwpathnames : UInt32, pvar : VARIANT*) : HRESULT

  # Params # lpdwobjecttypes : UInt32* [In],dwobjecttypes : UInt32 [In],pvar : VARIANT* [In]
  fun ADsBuildVarArrayInt(lpdwobjecttypes : UInt32*, dwobjecttypes : UInt32, pvar : VARIANT*) : HRESULT

  # Params # lpszpathname : LibC::LPWSTR [In],lpszusername : LibC::LPWSTR [In],lpszpassword : LibC::LPWSTR [In],dwreserved : ADS_AUTHENTICATION_ENUM [In],riid : Guid* [In],ppobject : Void** [In]
  fun ADsOpenObject(lpszpathname : LibC::LPWSTR, lpszusername : LibC::LPWSTR, lpszpassword : LibC::LPWSTR, dwreserved : ADS_AUTHENTICATION_ENUM, riid : Guid*, ppobject : Void**) : HRESULT

  # Params # lperror : UInt32* [In],lperrorbuf : Char* [In],dwerrorbuflen : UInt32 [In],lpnamebuf : Char* [In],dwnamebuflen : UInt32 [In]
  fun ADsGetLastError(lperror : UInt32*, lperrorbuf : Char*, dwerrorbuflen : UInt32, lpnamebuf : Char*, dwnamebuflen : UInt32) : HRESULT

  # Params # dwerr : UInt32 [In],pszerror : LibC::LPWSTR [In],pszprovider : LibC::LPWSTR [In]
  fun ADsSetLastError(dwerr : UInt32, pszerror : LibC::LPWSTR, pszprovider : LibC::LPWSTR) : Void

  # Params # cb : UInt32 [In]
  fun AllocADsMem(cb : UInt32) : Void*

  # Params # pmem : Void* [In]
  fun FreeADsMem(pmem : Void*) : LibC::BOOL

  # Params # poldmem : Void* [In],cbold : UInt32 [In],cbnew : UInt32 [In]
  fun ReallocADsMem(poldmem : Void*, cbold : UInt32, cbnew : UInt32) : Void*

  # Params # pstr : LibC::LPWSTR [In]
  fun AllocADsStr(pstr : LibC::LPWSTR) : LibC::LPWSTR

  # Params # pstr : LibC::LPWSTR [In]
  fun FreeADsStr(pstr : LibC::LPWSTR) : LibC::BOOL

  # Params # ppstr : LibC::LPWSTR* [In],pstr : LibC::LPWSTR [In]
  fun ReallocADsStr(ppstr : LibC::LPWSTR*, pstr : LibC::LPWSTR) : LibC::BOOL

  # Params # pbsrcdata : UInt8* [In],dwsrclen : UInt32 [In],ppszdestdata : LibC::LPWSTR* [In]
  fun ADsEncodeBinaryData(pbsrcdata : UInt8*, dwsrclen : UInt32, ppszdestdata : LibC::LPWSTR*) : HRESULT

  # Params # szsrcdata : LibC::LPWSTR [In],ppbdestdata : UInt8** [In],pdwdestlen : UInt32* [In]
  fun ADsDecodeBinaryData(szsrcdata : LibC::LPWSTR, ppbdestdata : UInt8**, pdwdestlen : UInt32*) : HRESULT

  # Params # pvariant : VARIANT* [In],dwnumvariant : UInt32 [In],ppadsvalues : ADSVALUE** [In],pdwnumvalues : UInt32* [In]
  fun PropVariantToAdsType(pvariant : VARIANT*, dwnumvariant : UInt32, ppadsvalues : ADSVALUE**, pdwnumvalues : UInt32*) : HRESULT

  # Params # padsvalues : ADSVALUE* [In],dwnumvalues : UInt32 [In],pvariant : VARIANT* [In]
  fun AdsTypeToPropVariant(padsvalues : ADSVALUE*, dwnumvalues : UInt32, pvariant : VARIANT*) : HRESULT

  # Params # padsvalues : ADSVALUE* [In],dwnumvalues : UInt32 [In]
  fun AdsFreeAdsValues(padsvalues : ADSVALUE*, dwnumvalues : UInt32) : Void

  # Params # psecuritydescriptor : SECURITY_DESCRIPTOR* [In],pvarsec : VARIANT* [In],pszservername : LibC::LPWSTR [In],username : LibC::LPWSTR [In],password : LibC::LPWSTR [In],dwflags : UInt32 [In]
  fun BinarySDToSecurityDescriptor(psecuritydescriptor : SECURITY_DESCRIPTOR*, pvarsec : VARIANT*, pszservername : LibC::LPWSTR, username : LibC::LPWSTR, password : LibC::LPWSTR, dwflags : UInt32) : HRESULT

  # Params # vvarsecdes : VARIANT [In],ppsecuritydescriptor : SECURITY_DESCRIPTOR** [In],pdwsdlength : UInt32* [In],pszservername : LibC::LPWSTR [In],username : LibC::LPWSTR [In],password : LibC::LPWSTR [In],dwflags : UInt32 [In]
  fun SecurityDescriptorToBinarySD(vvarsecdes : VARIANT, ppsecuritydescriptor : SECURITY_DESCRIPTOR**, pdwsdlength : UInt32*, pszservername : LibC::LPWSTR, username : LibC::LPWSTR, password : LibC::LPWSTR, dwflags : UInt32) : HRESULT

  # Params # pinfo : DSBROWSEINFOW* [In]
  fun DsBrowseForContainerW(pinfo : DSBROWSEINFOW*) : Int32

  # Params # pinfo : DSBROWSEINFOA* [In]
  fun DsBrowseForContainerA(pinfo : DSBROWSEINFOA*) : Int32

  # Params # dwflags : UInt32 [In],pszobjectclass : LibC::LPWSTR [In],cximage : Int32 [In],cyimage : Int32 [In]
  fun DsGetIcon(dwflags : UInt32, pszobjectclass : LibC::LPWSTR, cximage : Int32, cyimage : Int32) : HANDLE

  # Params # pszobjectclass : LibC::LPWSTR [In],pszbuffer : Char* [In],cchbuffer : UInt32 [In]
  fun DsGetFriendlyClassName(pszobjectclass : LibC::LPWSTR, pszbuffer : Char*, cchbuffer : UInt32) : HRESULT

  # Params # pappthddataobj : IDataObject [In],pwzadsobjname : LibC::LPWSTR [In],phnotifyobj : HANDLE* [In]
  fun ADsPropCreateNotifyObj(pappthddataobj : IDataObject, pwzadsobjname : LibC::LPWSTR, phnotifyobj : HANDLE*) : HRESULT

  # Params # hnotifyobj : LibC::HANDLE [In],pinitparams : ADSPROPINITPARAMS* [In]
  fun ADsPropGetInitInfo(hnotifyobj : LibC::HANDLE, pinitparams : ADSPROPINITPARAMS*) : LibC::BOOL

  # Params # hnotifyobj : LibC::HANDLE [In],hpage : LibC::HANDLE [In],ptztitle : Int8* [In]
  fun ADsPropSetHwndWithTitle(hnotifyobj : LibC::HANDLE, hpage : LibC::HANDLE, ptztitle : Int8*) : LibC::BOOL

  # Params # hnotifyobj : LibC::HANDLE [In],hpage : LibC::HANDLE [In]
  fun ADsPropSetHwnd(hnotifyobj : LibC::HANDLE, hpage : LibC::HANDLE) : LibC::BOOL

  # Params # pwzattr : LibC::LPWSTR [In],pwritableattrs : ADS_ATTR_INFO* [In]
  fun ADsPropCheckIfWritable(pwzattr : LibC::LPWSTR, pwritableattrs : ADS_ATTR_INFO*) : LibC::BOOL

  # Params # hnotifyobj : LibC::HANDLE [In],perror : ADSPROPERROR* [In]
  fun ADsPropSendErrorMessage(hnotifyobj : LibC::HANDLE, perror : ADSPROPERROR*) : LibC::BOOL

  # Params # hnotifyobj : LibC::HANDLE [In],hpage : LibC::HANDLE [In]
  fun ADsPropShowErrorDialog(hnotifyobj : LibC::HANDLE, hpage : LibC::HANDLE) : LibC::BOOL

  # Params # serviceclass : LibC::LPWSTR [In],servicename : LibC::LPWSTR [In],instancename : LibC::LPWSTR [In],instanceport : UInt16 [In],referrer : LibC::LPWSTR [In],pcspnlength : UInt32* [In],pszspn : Char* [In]
  fun DsMakeSpnW(serviceclass : LibC::LPWSTR, servicename : LibC::LPWSTR, instancename : LibC::LPWSTR, instanceport : UInt16, referrer : LibC::LPWSTR, pcspnlength : UInt32*, pszspn : Char*) : UInt32

  # Params # serviceclass : PSTR [In],servicename : PSTR [In],instancename : PSTR [In],instanceport : UInt16 [In],referrer : PSTR [In],pcspnlength : UInt32* [In],pszspn : UInt8* [In]
  fun DsMakeSpnA(serviceclass : PSTR, servicename : PSTR, instancename : PSTR, instanceport : UInt16, referrer : PSTR, pcspnlength : UInt32*, pszspn : UInt8*) : UInt32

  # Params # pszspn : PSTR [In],pcserviceclass : UInt32* [In],serviceclass : UInt8* [In],pcservicename : UInt32* [In],servicename : UInt8* [In],pcinstancename : UInt32* [In],instancename : UInt8* [In],pinstanceport : UInt16* [In]
  fun DsCrackSpnA(pszspn : PSTR, pcserviceclass : UInt32*, serviceclass : UInt8*, pcservicename : UInt32*, servicename : UInt8*, pcinstancename : UInt32*, instancename : UInt8*, pinstanceport : UInt16*) : UInt32

  # Params # pszspn : LibC::LPWSTR [In],pcserviceclass : UInt32* [In],serviceclass : Char* [In],pcservicename : UInt32* [In],servicename : Char* [In],pcinstancename : UInt32* [In],instancename : Char* [In],pinstanceport : UInt16* [In]
  fun DsCrackSpnW(pszspn : LibC::LPWSTR, pcserviceclass : UInt32*, serviceclass : Char*, pcservicename : UInt32*, servicename : Char*, pcinstancename : UInt32*, instancename : Char*, pinstanceport : UInt16*) : UInt32

  # Params # cunquotedrdnvaluelength : UInt32 [In],psunquotedrdnvalue : Char* [In],pcquotedrdnvaluelength : UInt32* [In],psquotedrdnvalue : Char* [In]
  fun DsQuoteRdnValueW(cunquotedrdnvaluelength : UInt32, psunquotedrdnvalue : Char*, pcquotedrdnvaluelength : UInt32*, psquotedrdnvalue : Char*) : UInt32

  # Params # cunquotedrdnvaluelength : UInt32 [In],psunquotedrdnvalue : UInt8* [In],pcquotedrdnvaluelength : UInt32* [In],psquotedrdnvalue : UInt8* [In]
  fun DsQuoteRdnValueA(cunquotedrdnvaluelength : UInt32, psunquotedrdnvalue : UInt8*, pcquotedrdnvaluelength : UInt32*, psquotedrdnvalue : UInt8*) : UInt32

  # Params # cquotedrdnvaluelength : UInt32 [In],psquotedrdnvalue : Char* [In],pcunquotedrdnvaluelength : UInt32* [In],psunquotedrdnvalue : Char* [In]
  fun DsUnquoteRdnValueW(cquotedrdnvaluelength : UInt32, psquotedrdnvalue : Char*, pcunquotedrdnvaluelength : UInt32*, psunquotedrdnvalue : Char*) : UInt32

  # Params # cquotedrdnvaluelength : UInt32 [In],psquotedrdnvalue : UInt8* [In],pcunquotedrdnvaluelength : UInt32* [In],psunquotedrdnvalue : UInt8* [In]
  fun DsUnquoteRdnValueA(cquotedrdnvaluelength : UInt32, psquotedrdnvalue : UInt8*, pcunquotedrdnvaluelength : UInt32*, psunquotedrdnvalue : UInt8*) : UInt32

  # Params # ppdn : LibC::LPWSTR* [In],pcdn : UInt32* [In],ppkey : LibC::LPWSTR* [In],pckey : UInt32* [In],ppval : LibC::LPWSTR* [In],pcval : UInt32* [In]
  fun DsGetRdnW(ppdn : LibC::LPWSTR*, pcdn : UInt32*, ppkey : LibC::LPWSTR*, pckey : UInt32*, ppval : LibC::LPWSTR*, pcval : UInt32*) : UInt32

  # Params # pszrdn : Char* [In],cchrdn : UInt32 [In],pguid : Guid* [In],pedsmanglefor : DS_MANGLE_FOR* [In]
  fun DsCrackUnquotedMangledRdnW(pszrdn : Char*, cchrdn : UInt32, pguid : Guid*, pedsmanglefor : DS_MANGLE_FOR*) : LibC::BOOL

  # Params # pszrdn : UInt8* [In],cchrdn : UInt32 [In],pguid : Guid* [In],pedsmanglefor : DS_MANGLE_FOR* [In]
  fun DsCrackUnquotedMangledRdnA(pszrdn : UInt8*, cchrdn : UInt32, pguid : Guid*, pedsmanglefor : DS_MANGLE_FOR*) : LibC::BOOL

  # Params # pszrdn : Char* [In],crdn : UInt32 [In],edsmanglefordesired : DS_MANGLE_FOR [In]
  fun DsIsMangledRdnValueW(pszrdn : Char*, crdn : UInt32, edsmanglefordesired : DS_MANGLE_FOR) : LibC::BOOL

  # Params # pszrdn : UInt8* [In],crdn : UInt32 [In],edsmanglefordesired : DS_MANGLE_FOR [In]
  fun DsIsMangledRdnValueA(pszrdn : UInt8*, crdn : UInt32, edsmanglefordesired : DS_MANGLE_FOR) : LibC::BOOL

  # Params # pszdn : PSTR [In],edsmanglefor : DS_MANGLE_FOR [In]
  fun DsIsMangledDnA(pszdn : PSTR, edsmanglefor : DS_MANGLE_FOR) : LibC::BOOL

  # Params # pszdn : LibC::LPWSTR [In],edsmanglefor : DS_MANGLE_FOR [In]
  fun DsIsMangledDnW(pszdn : LibC::LPWSTR, edsmanglefor : DS_MANGLE_FOR) : LibC::BOOL

  # Params # pszspn : UInt8* [In],cspn : UInt32 [In],pcserviceclass : UInt32* [In],serviceclass : UInt8* [In],pcservicename : UInt32* [In],servicename : UInt8* [In],pcinstancename : UInt32* [In],instancename : UInt8* [In],pinstanceport : UInt16* [In]
  fun DsCrackSpn2A(pszspn : UInt8*, cspn : UInt32, pcserviceclass : UInt32*, serviceclass : UInt8*, pcservicename : UInt32*, servicename : UInt8*, pcinstancename : UInt32*, instancename : UInt8*, pinstanceport : UInt16*) : UInt32

  # Params # pszspn : Char* [In],cspn : UInt32 [In],pcserviceclass : UInt32* [In],serviceclass : Char* [In],pcservicename : UInt32* [In],servicename : Char* [In],pcinstancename : UInt32* [In],instancename : Char* [In],pinstanceport : UInt16* [In]
  fun DsCrackSpn2W(pszspn : Char*, cspn : UInt32, pcserviceclass : UInt32*, serviceclass : Char*, pcservicename : UInt32*, servicename : Char*, pcinstancename : UInt32*, instancename : Char*, pinstanceport : UInt16*) : UInt32

  # Params # pszspn : LibC::LPWSTR [In],cspn : UInt32 [In],pchostname : UInt32* [In],hostname : Char* [In],pcinstancename : UInt32* [In],instancename : Char* [In],pportnumber : UInt16* [In],pcdomainname : UInt32* [In],domainname : Char* [In],pcrealmname : UInt32* [In],realmname : Char* [In]
  fun DsCrackSpn3W(pszspn : LibC::LPWSTR, cspn : UInt32, pchostname : UInt32*, hostname : Char*, pcinstancename : UInt32*, instancename : Char*, pportnumber : UInt16*, pcdomainname : UInt32*, domainname : Char*, pcrealmname : UInt32*, realmname : Char*) : UInt32

  # Params # pszspn : LibC::LPWSTR [In],cspn : UInt32 [In],pchostname : UInt32* [In],hostname : Char* [In],pcinstancename : UInt32* [In],instancename : Char* [In],pcportname : UInt32* [In],portname : Char* [In],pcdomainname : UInt32* [In],domainname : Char* [In],pcrealmname : UInt32* [In],realmname : Char* [In]
  fun DsCrackSpn4W(pszspn : LibC::LPWSTR, cspn : UInt32, pchostname : UInt32*, hostname : Char*, pcinstancename : UInt32*, instancename : Char*, pcportname : UInt32*, portname : Char*, pcdomainname : UInt32*, domainname : Char*, pcrealmname : UInt32*, realmname : Char*) : UInt32

  # Params # domaincontrollername : LibC::LPWSTR [In],dnsdomainname : LibC::LPWSTR [In],phds : LibC::HANDLE* [In]
  fun DsBindW(domaincontrollername : LibC::LPWSTR, dnsdomainname : LibC::LPWSTR, phds : LibC::HANDLE*) : UInt32

  # Params # domaincontrollername : PSTR [In],dnsdomainname : PSTR [In],phds : LibC::HANDLE* [In]
  fun DsBindA(domaincontrollername : PSTR, dnsdomainname : PSTR, phds : LibC::HANDLE*) : UInt32

  # Params # domaincontrollername : LibC::LPWSTR [In],dnsdomainname : LibC::LPWSTR [In],authidentity : Void* [In],phds : LibC::HANDLE* [In]
  fun DsBindWithCredW(domaincontrollername : LibC::LPWSTR, dnsdomainname : LibC::LPWSTR, authidentity : Void*, phds : LibC::HANDLE*) : UInt32

  # Params # domaincontrollername : PSTR [In],dnsdomainname : PSTR [In],authidentity : Void* [In],phds : LibC::HANDLE* [In]
  fun DsBindWithCredA(domaincontrollername : PSTR, dnsdomainname : PSTR, authidentity : Void*, phds : LibC::HANDLE*) : UInt32

  # Params # domaincontrollername : LibC::LPWSTR [In],dnsdomainname : LibC::LPWSTR [In],authidentity : Void* [In],serviceprincipalname : LibC::LPWSTR [In],phds : LibC::HANDLE* [In]
  fun DsBindWithSpnW(domaincontrollername : LibC::LPWSTR, dnsdomainname : LibC::LPWSTR, authidentity : Void*, serviceprincipalname : LibC::LPWSTR, phds : LibC::HANDLE*) : UInt32

  # Params # domaincontrollername : PSTR [In],dnsdomainname : PSTR [In],authidentity : Void* [In],serviceprincipalname : PSTR [In],phds : LibC::HANDLE* [In]
  fun DsBindWithSpnA(domaincontrollername : PSTR, dnsdomainname : PSTR, authidentity : Void*, serviceprincipalname : PSTR, phds : LibC::HANDLE*) : UInt32

  # Params # domaincontrollername : LibC::LPWSTR [In],dnsdomainname : LibC::LPWSTR [In],authidentity : Void* [In],serviceprincipalname : LibC::LPWSTR [In],bindflags : UInt32 [In],phds : LibC::HANDLE* [In]
  fun DsBindWithSpnExW(domaincontrollername : LibC::LPWSTR, dnsdomainname : LibC::LPWSTR, authidentity : Void*, serviceprincipalname : LibC::LPWSTR, bindflags : UInt32, phds : LibC::HANDLE*) : UInt32

  # Params # domaincontrollername : PSTR [In],dnsdomainname : PSTR [In],authidentity : Void* [In],serviceprincipalname : PSTR [In],bindflags : UInt32 [In],phds : LibC::HANDLE* [In]
  fun DsBindWithSpnExA(domaincontrollername : PSTR, dnsdomainname : PSTR, authidentity : Void*, serviceprincipalname : PSTR, bindflags : UInt32, phds : LibC::HANDLE*) : UInt32

  # Params # servername : LibC::LPWSTR [In],annotation : LibC::LPWSTR [In],instanceguid : Guid* [In],dnsdomainname : LibC::LPWSTR [In],authidentity : Void* [In],serviceprincipalname : LibC::LPWSTR [In],bindflags : UInt32 [In],phds : LibC::HANDLE* [In]
  fun DsBindByInstanceW(servername : LibC::LPWSTR, annotation : LibC::LPWSTR, instanceguid : Guid*, dnsdomainname : LibC::LPWSTR, authidentity : Void*, serviceprincipalname : LibC::LPWSTR, bindflags : UInt32, phds : LibC::HANDLE*) : UInt32

  # Params # servername : PSTR [In],annotation : PSTR [In],instanceguid : Guid* [In],dnsdomainname : PSTR [In],authidentity : Void* [In],serviceprincipalname : PSTR [In],bindflags : UInt32 [In],phds : LibC::HANDLE* [In]
  fun DsBindByInstanceA(servername : PSTR, annotation : PSTR, instanceguid : Guid*, dnsdomainname : PSTR, authidentity : Void*, serviceprincipalname : PSTR, bindflags : UInt32, phds : LibC::HANDLE*) : UInt32

  # Params # sitename : LibC::LPWSTR [In],phds : LibC::HANDLE* [In]
  fun DsBindToISTGW(sitename : LibC::LPWSTR, phds : LibC::HANDLE*) : UInt32

  # Params # sitename : PSTR [In],phds : LibC::HANDLE* [In]
  fun DsBindToISTGA(sitename : PSTR, phds : LibC::HANDLE*) : UInt32

  # Params # hds : LibC::HANDLE [In],ctimeoutsecs : UInt32 [In]
  fun DsBindingSetTimeout(hds : LibC::HANDLE, ctimeoutsecs : UInt32) : UInt32

  # Params # phds : LibC::HANDLE* [In]
  fun DsUnBindW(phds : LibC::HANDLE*) : UInt32

  # Params # phds : LibC::HANDLE* [In]
  fun DsUnBindA(phds : LibC::HANDLE*) : UInt32

  # Params # user : LibC::LPWSTR [In],domain : LibC::LPWSTR [In],password : LibC::LPWSTR [In],pauthidentity : Void** [In]
  fun DsMakePasswordCredentialsW(user : LibC::LPWSTR, domain : LibC::LPWSTR, password : LibC::LPWSTR, pauthidentity : Void**) : UInt32

  # Params # user : PSTR [In],domain : PSTR [In],password : PSTR [In],pauthidentity : Void** [In]
  fun DsMakePasswordCredentialsA(user : PSTR, domain : PSTR, password : PSTR, pauthidentity : Void**) : UInt32

  # Params # authidentity : Void* [In]
  fun DsFreePasswordCredentials(authidentity : Void*) : Void

  # Params # hds : LibC::HANDLE [In],flags : DS_NAME_FLAGS [In],formatoffered : DS_NAME_FORMAT [In],formatdesired : DS_NAME_FORMAT [In],cnames : UInt32 [In],rpnames : LibC::LPWSTR* [In],ppresult : DS_NAME_RESULTW** [In]
  fun DsCrackNamesW(hds : LibC::HANDLE, flags : DS_NAME_FLAGS, formatoffered : DS_NAME_FORMAT, formatdesired : DS_NAME_FORMAT, cnames : UInt32, rpnames : LibC::LPWSTR*, ppresult : DS_NAME_RESULTW**) : UInt32

  # Params # hds : LibC::HANDLE [In],flags : DS_NAME_FLAGS [In],formatoffered : DS_NAME_FORMAT [In],formatdesired : DS_NAME_FORMAT [In],cnames : UInt32 [In],rpnames : PSTR* [In],ppresult : DS_NAME_RESULTA** [In]
  fun DsCrackNamesA(hds : LibC::HANDLE, flags : DS_NAME_FLAGS, formatoffered : DS_NAME_FORMAT, formatdesired : DS_NAME_FORMAT, cnames : UInt32, rpnames : PSTR*, ppresult : DS_NAME_RESULTA**) : UInt32

  # Params # presult : DS_NAME_RESULTW* [In]
  fun DsFreeNameResultW(presult : DS_NAME_RESULTW*) : Void

  # Params # presult : DS_NAME_RESULTA* [In]
  fun DsFreeNameResultA(presult : DS_NAME_RESULTA*) : Void

  # Params # servicetype : DS_SPN_NAME_TYPE [In],serviceclass : PSTR [In],servicename : PSTR [In],instanceport : UInt16 [In],cinstancenames : UInt16 [In],pinstancenames : PSTR* [In],pinstanceports : UInt16* [In],pcspn : UInt32* [In],prpszspn : PSTR** [In]
  fun DsGetSpnA(servicetype : DS_SPN_NAME_TYPE, serviceclass : PSTR, servicename : PSTR, instanceport : UInt16, cinstancenames : UInt16, pinstancenames : PSTR*, pinstanceports : UInt16*, pcspn : UInt32*, prpszspn : PSTR**) : UInt32

  # Params # servicetype : DS_SPN_NAME_TYPE [In],serviceclass : LibC::LPWSTR [In],servicename : LibC::LPWSTR [In],instanceport : UInt16 [In],cinstancenames : UInt16 [In],pinstancenames : LibC::LPWSTR* [In],pinstanceports : UInt16* [In],pcspn : UInt32* [In],prpszspn : LibC::LPWSTR** [In]
  fun DsGetSpnW(servicetype : DS_SPN_NAME_TYPE, serviceclass : LibC::LPWSTR, servicename : LibC::LPWSTR, instanceport : UInt16, cinstancenames : UInt16, pinstancenames : LibC::LPWSTR*, pinstanceports : UInt16*, pcspn : UInt32*, prpszspn : LibC::LPWSTR**) : UInt32

  # Params # cspn : UInt32 [In],rpszspn : PSTR* [In]
  fun DsFreeSpnArrayA(cspn : UInt32, rpszspn : PSTR*) : Void

  # Params # cspn : UInt32 [In],rpszspn : LibC::LPWSTR* [In]
  fun DsFreeSpnArrayW(cspn : UInt32, rpszspn : LibC::LPWSTR*) : Void

  # Params # hds : LibC::HANDLE [In],operation : DS_SPN_WRITE_OP [In],pszaccount : PSTR [In],cspn : UInt32 [In],rpszspn : PSTR* [In]
  fun DsWriteAccountSpnA(hds : LibC::HANDLE, operation : DS_SPN_WRITE_OP, pszaccount : PSTR, cspn : UInt32, rpszspn : PSTR*) : UInt32

  # Params # hds : LibC::HANDLE [In],operation : DS_SPN_WRITE_OP [In],pszaccount : LibC::LPWSTR [In],cspn : UInt32 [In],rpszspn : LibC::LPWSTR* [In]
  fun DsWriteAccountSpnW(hds : LibC::HANDLE, operation : DS_SPN_WRITE_OP, pszaccount : LibC::LPWSTR, cspn : UInt32, rpszspn : LibC::LPWSTR*) : UInt32

  # Params # serviceclass : LibC::LPWSTR [In],servicename : LibC::LPWSTR [In],pcspnlength : UInt32* [In],pszspn : Char* [In]
  fun DsClientMakeSpnForTargetServerW(serviceclass : LibC::LPWSTR, servicename : LibC::LPWSTR, pcspnlength : UInt32*, pszspn : Char*) : UInt32

  # Params # serviceclass : PSTR [In],servicename : PSTR [In],pcspnlength : UInt32* [In],pszspn : UInt8* [In]
  fun DsClientMakeSpnForTargetServerA(serviceclass : PSTR, servicename : PSTR, pcspnlength : UInt32*, pszspn : UInt8*) : UInt32

  # Params # operation : DS_SPN_WRITE_OP [In],serviceclass : PSTR [In],userobjectdn : PSTR [In]
  fun DsServerRegisterSpnA(operation : DS_SPN_WRITE_OP, serviceclass : PSTR, userobjectdn : PSTR) : UInt32

  # Params # operation : DS_SPN_WRITE_OP [In],serviceclass : LibC::LPWSTR [In],userobjectdn : LibC::LPWSTR [In]
  fun DsServerRegisterSpnW(operation : DS_SPN_WRITE_OP, serviceclass : LibC::LPWSTR, userobjectdn : LibC::LPWSTR) : UInt32

  # Params # hds : LibC::HANDLE [In],namecontext : PSTR [In],puuiddsasrc : Guid* [In],options : UInt32 [In]
  fun DsReplicaSyncA(hds : LibC::HANDLE, namecontext : PSTR, puuiddsasrc : Guid*, options : UInt32) : UInt32

  # Params # hds : LibC::HANDLE [In],namecontext : LibC::LPWSTR [In],puuiddsasrc : Guid* [In],options : UInt32 [In]
  fun DsReplicaSyncW(hds : LibC::HANDLE, namecontext : LibC::LPWSTR, puuiddsasrc : Guid*, options : UInt32) : UInt32

  # Params # hds : LibC::HANDLE [In],namecontext : PSTR [In],sourcedsadn : PSTR [In],transportdn : PSTR [In],sourcedsaaddress : PSTR [In],pschedule : SCHEDULE* [In],options : UInt32 [In]
  fun DsReplicaAddA(hds : LibC::HANDLE, namecontext : PSTR, sourcedsadn : PSTR, transportdn : PSTR, sourcedsaaddress : PSTR, pschedule : SCHEDULE*, options : UInt32) : UInt32

  # Params # hds : LibC::HANDLE [In],namecontext : LibC::LPWSTR [In],sourcedsadn : LibC::LPWSTR [In],transportdn : LibC::LPWSTR [In],sourcedsaaddress : LibC::LPWSTR [In],pschedule : SCHEDULE* [In],options : UInt32 [In]
  fun DsReplicaAddW(hds : LibC::HANDLE, namecontext : LibC::LPWSTR, sourcedsadn : LibC::LPWSTR, transportdn : LibC::LPWSTR, sourcedsaaddress : LibC::LPWSTR, pschedule : SCHEDULE*, options : UInt32) : UInt32

  # Params # hds : LibC::HANDLE [In],namecontext : PSTR [In],dsasrc : PSTR [In],options : UInt32 [In]
  fun DsReplicaDelA(hds : LibC::HANDLE, namecontext : PSTR, dsasrc : PSTR, options : UInt32) : UInt32

  # Params # hds : LibC::HANDLE [In],namecontext : LibC::LPWSTR [In],dsasrc : LibC::LPWSTR [In],options : UInt32 [In]
  fun DsReplicaDelW(hds : LibC::HANDLE, namecontext : LibC::LPWSTR, dsasrc : LibC::LPWSTR, options : UInt32) : UInt32

  # Params # hds : LibC::HANDLE [In],namecontext : PSTR [In],puuidsourcedsa : Guid* [In],transportdn : PSTR [In],sourcedsaaddress : PSTR [In],pschedule : SCHEDULE* [In],replicaflags : UInt32 [In],modifyfields : UInt32 [In],options : UInt32 [In]
  fun DsReplicaModifyA(hds : LibC::HANDLE, namecontext : PSTR, puuidsourcedsa : Guid*, transportdn : PSTR, sourcedsaaddress : PSTR, pschedule : SCHEDULE*, replicaflags : UInt32, modifyfields : UInt32, options : UInt32) : UInt32

  # Params # hds : LibC::HANDLE [In],namecontext : LibC::LPWSTR [In],puuidsourcedsa : Guid* [In],transportdn : LibC::LPWSTR [In],sourcedsaaddress : LibC::LPWSTR [In],pschedule : SCHEDULE* [In],replicaflags : UInt32 [In],modifyfields : UInt32 [In],options : UInt32 [In]
  fun DsReplicaModifyW(hds : LibC::HANDLE, namecontext : LibC::LPWSTR, puuidsourcedsa : Guid*, transportdn : LibC::LPWSTR, sourcedsaaddress : LibC::LPWSTR, pschedule : SCHEDULE*, replicaflags : UInt32, modifyfields : UInt32, options : UInt32) : UInt32

  # Params # hds : LibC::HANDLE [In],namecontext : PSTR [In],dsadest : PSTR [In],puuiddsadest : Guid* [In],options : UInt32 [In]
  fun DsReplicaUpdateRefsA(hds : LibC::HANDLE, namecontext : PSTR, dsadest : PSTR, puuiddsadest : Guid*, options : UInt32) : UInt32

  # Params # hds : LibC::HANDLE [In],namecontext : LibC::LPWSTR [In],dsadest : LibC::LPWSTR [In],puuiddsadest : Guid* [In],options : UInt32 [In]
  fun DsReplicaUpdateRefsW(hds : LibC::HANDLE, namecontext : LibC::LPWSTR, dsadest : LibC::LPWSTR, puuiddsadest : Guid*, options : UInt32) : UInt32

  # Params # hds : LibC::HANDLE [In],psznamecontext : PSTR [In],ulflags : UInt32 [In],pfncallback : LibC::IntPtrT [In],pcallbackdata : Void* [In],perrors : DS_REPSYNCALL_ERRINFOA*** [In]
  fun DsReplicaSyncAllA(hds : LibC::HANDLE, psznamecontext : PSTR, ulflags : UInt32, pfncallback : LibC::IntPtrT, pcallbackdata : Void*, perrors : DS_REPSYNCALL_ERRINFOA***) : UInt32

  # Params # hds : LibC::HANDLE [In],psznamecontext : LibC::LPWSTR [In],ulflags : UInt32 [In],pfncallback : LibC::IntPtrT [In],pcallbackdata : Void* [In],perrors : DS_REPSYNCALL_ERRINFOW*** [In]
  fun DsReplicaSyncAllW(hds : LibC::HANDLE, psznamecontext : LibC::LPWSTR, ulflags : UInt32, pfncallback : LibC::IntPtrT, pcallbackdata : Void*, perrors : DS_REPSYNCALL_ERRINFOW***) : UInt32

  # Params # hds : LibC::HANDLE [In],serverdn : LibC::LPWSTR [In],domaindn : LibC::LPWSTR [In],flastdcindomain : LibC::BOOL* [In],fcommit : LibC::BOOL [In]
  fun DsRemoveDsServerW(hds : LibC::HANDLE, serverdn : LibC::LPWSTR, domaindn : LibC::LPWSTR, flastdcindomain : LibC::BOOL*, fcommit : LibC::BOOL) : UInt32

  # Params # hds : LibC::HANDLE [In],serverdn : PSTR [In],domaindn : PSTR [In],flastdcindomain : LibC::BOOL* [In],fcommit : LibC::BOOL [In]
  fun DsRemoveDsServerA(hds : LibC::HANDLE, serverdn : PSTR, domaindn : PSTR, flastdcindomain : LibC::BOOL*, fcommit : LibC::BOOL) : UInt32

  # Params # hds : LibC::HANDLE [In],domaindn : LibC::LPWSTR [In]
  fun DsRemoveDsDomainW(hds : LibC::HANDLE, domaindn : LibC::LPWSTR) : UInt32

  # Params # hds : LibC::HANDLE [In],domaindn : PSTR [In]
  fun DsRemoveDsDomainA(hds : LibC::HANDLE, domaindn : PSTR) : UInt32

  # Params # hds : LibC::HANDLE [In],ppsites : DS_NAME_RESULTA** [In]
  fun DsListSitesA(hds : LibC::HANDLE, ppsites : DS_NAME_RESULTA**) : UInt32

  # Params # hds : LibC::HANDLE [In],ppsites : DS_NAME_RESULTW** [In]
  fun DsListSitesW(hds : LibC::HANDLE, ppsites : DS_NAME_RESULTW**) : UInt32

  # Params # hds : LibC::HANDLE [In],site : PSTR [In],ppservers : DS_NAME_RESULTA** [In]
  fun DsListServersInSiteA(hds : LibC::HANDLE, site : PSTR, ppservers : DS_NAME_RESULTA**) : UInt32

  # Params # hds : LibC::HANDLE [In],site : LibC::LPWSTR [In],ppservers : DS_NAME_RESULTW** [In]
  fun DsListServersInSiteW(hds : LibC::HANDLE, site : LibC::LPWSTR, ppservers : DS_NAME_RESULTW**) : UInt32

  # Params # hds : LibC::HANDLE [In],site : PSTR [In],ppdomains : DS_NAME_RESULTA** [In]
  fun DsListDomainsInSiteA(hds : LibC::HANDLE, site : PSTR, ppdomains : DS_NAME_RESULTA**) : UInt32

  # Params # hds : LibC::HANDLE [In],site : LibC::LPWSTR [In],ppdomains : DS_NAME_RESULTW** [In]
  fun DsListDomainsInSiteW(hds : LibC::HANDLE, site : LibC::LPWSTR, ppdomains : DS_NAME_RESULTW**) : UInt32

  # Params # hds : LibC::HANDLE [In],domain : PSTR [In],site : PSTR [In],ppservers : DS_NAME_RESULTA** [In]
  fun DsListServersForDomainInSiteA(hds : LibC::HANDLE, domain : PSTR, site : PSTR, ppservers : DS_NAME_RESULTA**) : UInt32

  # Params # hds : LibC::HANDLE [In],domain : LibC::LPWSTR [In],site : LibC::LPWSTR [In],ppservers : DS_NAME_RESULTW** [In]
  fun DsListServersForDomainInSiteW(hds : LibC::HANDLE, domain : LibC::LPWSTR, site : LibC::LPWSTR, ppservers : DS_NAME_RESULTW**) : UInt32

  # Params # hds : LibC::HANDLE [In],server : PSTR [In],ppinfo : DS_NAME_RESULTA** [In]
  fun DsListInfoForServerA(hds : LibC::HANDLE, server : PSTR, ppinfo : DS_NAME_RESULTA**) : UInt32

  # Params # hds : LibC::HANDLE [In],server : LibC::LPWSTR [In],ppinfo : DS_NAME_RESULTW** [In]
  fun DsListInfoForServerW(hds : LibC::HANDLE, server : LibC::LPWSTR, ppinfo : DS_NAME_RESULTW**) : UInt32

  # Params # hds : LibC::HANDLE [In],pproles : DS_NAME_RESULTA** [In]
  fun DsListRolesA(hds : LibC::HANDLE, pproles : DS_NAME_RESULTA**) : UInt32

  # Params # hds : LibC::HANDLE [In],pproles : DS_NAME_RESULTW** [In]
  fun DsListRolesW(hds : LibC::HANDLE, pproles : DS_NAME_RESULTW**) : UInt32

  # Params # hds : LibC::HANDLE [In],pwszfromsite : LibC::LPWSTR [In],rgwsztosites : LibC::LPWSTR* [In],ctosites : UInt32 [In],dwflags : UInt32 [In],prgsiteinfo : DS_SITE_COST_INFO** [In]
  fun DsQuerySitesByCostW(hds : LibC::HANDLE, pwszfromsite : LibC::LPWSTR, rgwsztosites : LibC::LPWSTR*, ctosites : UInt32, dwflags : UInt32, prgsiteinfo : DS_SITE_COST_INFO**) : UInt32

  # Params # hds : LibC::HANDLE [In],pszfromsite : PSTR [In],rgsztosites : PSTR* [In],ctosites : UInt32 [In],dwflags : UInt32 [In],prgsiteinfo : DS_SITE_COST_INFO** [In]
  fun DsQuerySitesByCostA(hds : LibC::HANDLE, pszfromsite : PSTR, rgsztosites : PSTR*, ctosites : UInt32, dwflags : UInt32, prgsiteinfo : DS_SITE_COST_INFO**) : UInt32

  # Params # rgsiteinfo : DS_SITE_COST_INFO* [In]
  fun DsQuerySitesFree(rgsiteinfo : DS_SITE_COST_INFO*) : Void

  # Params # hds : LibC::HANDLE [In],cguids : UInt32 [In],rguids : Guid* [In],ppguidmap : DS_SCHEMA_GUID_MAPA** [In]
  fun DsMapSchemaGuidsA(hds : LibC::HANDLE, cguids : UInt32, rguids : Guid*, ppguidmap : DS_SCHEMA_GUID_MAPA**) : UInt32

  # Params # pguidmap : DS_SCHEMA_GUID_MAPA* [In]
  fun DsFreeSchemaGuidMapA(pguidmap : DS_SCHEMA_GUID_MAPA*) : Void

  # Params # hds : LibC::HANDLE [In],cguids : UInt32 [In],rguids : Guid* [In],ppguidmap : DS_SCHEMA_GUID_MAPW** [In]
  fun DsMapSchemaGuidsW(hds : LibC::HANDLE, cguids : UInt32, rguids : Guid*, ppguidmap : DS_SCHEMA_GUID_MAPW**) : UInt32

  # Params # pguidmap : DS_SCHEMA_GUID_MAPW* [In]
  fun DsFreeSchemaGuidMapW(pguidmap : DS_SCHEMA_GUID_MAPW*) : Void

  # Params # hds : LibC::HANDLE [In],domainname : PSTR [In],infolevel : UInt32 [In],pcout : UInt32* [In],ppinfo : Void** [In]
  fun DsGetDomainControllerInfoA(hds : LibC::HANDLE, domainname : PSTR, infolevel : UInt32, pcout : UInt32*, ppinfo : Void**) : UInt32

  # Params # hds : LibC::HANDLE [In],domainname : LibC::LPWSTR [In],infolevel : UInt32 [In],pcout : UInt32* [In],ppinfo : Void** [In]
  fun DsGetDomainControllerInfoW(hds : LibC::HANDLE, domainname : LibC::LPWSTR, infolevel : UInt32, pcout : UInt32*, ppinfo : Void**) : UInt32

  # Params # infolevel : UInt32 [In],cinfo : UInt32 [In],pinfo : Void* [In]
  fun DsFreeDomainControllerInfoA(infolevel : UInt32, cinfo : UInt32, pinfo : Void*) : Void

  # Params # infolevel : UInt32 [In],cinfo : UInt32 [In],pinfo : Void* [In]
  fun DsFreeDomainControllerInfoW(infolevel : UInt32, cinfo : UInt32, pinfo : Void*) : Void

  # Params # hds : LibC::HANDLE [In],taskid : DS_KCC_TASKID [In],dwflags : UInt32 [In]
  fun DsReplicaConsistencyCheck(hds : LibC::HANDLE, taskid : DS_KCC_TASKID, dwflags : UInt32) : UInt32

  # Params # hds : LibC::HANDLE [In],namecontext : LibC::LPWSTR [In],puuiddsasrc : Guid* [In],uloptions : UInt32 [In]
  fun DsReplicaVerifyObjectsW(hds : LibC::HANDLE, namecontext : LibC::LPWSTR, puuiddsasrc : Guid*, uloptions : UInt32) : UInt32

  # Params # hds : LibC::HANDLE [In],namecontext : PSTR [In],puuiddsasrc : Guid* [In],uloptions : UInt32 [In]
  fun DsReplicaVerifyObjectsA(hds : LibC::HANDLE, namecontext : PSTR, puuiddsasrc : Guid*, uloptions : UInt32) : UInt32

  # Params # hds : LibC::HANDLE [In],infotype : DS_REPL_INFO_TYPE [In],pszobject : LibC::LPWSTR [In],puuidforsourcedsaobjguid : Guid* [In],ppinfo : Void** [In]
  fun DsReplicaGetInfoW(hds : LibC::HANDLE, infotype : DS_REPL_INFO_TYPE, pszobject : LibC::LPWSTR, puuidforsourcedsaobjguid : Guid*, ppinfo : Void**) : UInt32

  # Params # hds : LibC::HANDLE [In],infotype : DS_REPL_INFO_TYPE [In],pszobject : LibC::LPWSTR [In],puuidforsourcedsaobjguid : Guid* [In],pszattributename : LibC::LPWSTR [In],pszvalue : LibC::LPWSTR [In],dwflags : UInt32 [In],dwenumerationcontext : UInt32 [In],ppinfo : Void** [In]
  fun DsReplicaGetInfo2W(hds : LibC::HANDLE, infotype : DS_REPL_INFO_TYPE, pszobject : LibC::LPWSTR, puuidforsourcedsaobjguid : Guid*, pszattributename : LibC::LPWSTR, pszvalue : LibC::LPWSTR, dwflags : UInt32, dwenumerationcontext : UInt32, ppinfo : Void**) : UInt32

  # Params # infotype : DS_REPL_INFO_TYPE [In],pinfo : Void* [In]
  fun DsReplicaFreeInfo(infotype : DS_REPL_INFO_TYPE, pinfo : Void*) : Void

  # Params # hds : LibC::HANDLE [In],flags : UInt32 [In],srcdomain : LibC::LPWSTR [In],srcprincipal : LibC::LPWSTR [In],srcdomaincontroller : LibC::LPWSTR [In],srcdomaincreds : Void* [In],dstdomain : LibC::LPWSTR [In],dstprincipal : LibC::LPWSTR [In]
  fun DsAddSidHistoryW(hds : LibC::HANDLE, flags : UInt32, srcdomain : LibC::LPWSTR, srcprincipal : LibC::LPWSTR, srcdomaincontroller : LibC::LPWSTR, srcdomaincreds : Void*, dstdomain : LibC::LPWSTR, dstprincipal : LibC::LPWSTR) : UInt32

  # Params # hds : LibC::HANDLE [In],flags : UInt32 [In],srcdomain : PSTR [In],srcprincipal : PSTR [In],srcdomaincontroller : PSTR [In],srcdomaincreds : Void* [In],dstdomain : PSTR [In],dstprincipal : PSTR [In]
  fun DsAddSidHistoryA(hds : LibC::HANDLE, flags : UInt32, srcdomain : PSTR, srcprincipal : PSTR, srcdomaincontroller : PSTR, srcdomaincreds : Void*, dstdomain : PSTR, dstprincipal : PSTR) : UInt32

  # Params # hds : LibC::HANDLE [In],flags : UInt32 [In],srcprincipal : LibC::LPWSTR [In],dstprincipal : LibC::LPWSTR [In]
  fun DsInheritSecurityIdentityW(hds : LibC::HANDLE, flags : UInt32, srcprincipal : LibC::LPWSTR, dstprincipal : LibC::LPWSTR) : UInt32

  # Params # hds : LibC::HANDLE [In],flags : UInt32 [In],srcprincipal : PSTR [In],dstprincipal : PSTR [In]
  fun DsInheritSecurityIdentityA(hds : LibC::HANDLE, flags : UInt32, srcprincipal : PSTR, dstprincipal : PSTR) : UInt32

  # Params # lpserver : LibC::LPWSTR [In],infolevel : DSROLE_PRIMARY_DOMAIN_INFO_LEVEL [In],buffer : UInt8** [In]
  fun DsRoleGetPrimaryDomainInformation(lpserver : LibC::LPWSTR, infolevel : DSROLE_PRIMARY_DOMAIN_INFO_LEVEL, buffer : UInt8**) : UInt32

  # Params # buffer : Void* [In]
  fun DsRoleFreeMemory(buffer : Void*) : Void

  # Params # computername : PSTR [In],domainname : PSTR [In],domainguid : Guid* [In],sitename : PSTR [In],flags : UInt32 [In],domaincontrollerinfo : DOMAIN_CONTROLLER_INFOA** [In]
  fun DsGetDcNameA(computername : PSTR, domainname : PSTR, domainguid : Guid*, sitename : PSTR, flags : UInt32, domaincontrollerinfo : DOMAIN_CONTROLLER_INFOA**) : UInt32

  # Params # computername : LibC::LPWSTR [In],domainname : LibC::LPWSTR [In],domainguid : Guid* [In],sitename : LibC::LPWSTR [In],flags : UInt32 [In],domaincontrollerinfo : DOMAIN_CONTROLLER_INFOW** [In]
  fun DsGetDcNameW(computername : LibC::LPWSTR, domainname : LibC::LPWSTR, domainguid : Guid*, sitename : LibC::LPWSTR, flags : UInt32, domaincontrollerinfo : DOMAIN_CONTROLLER_INFOW**) : UInt32

  # Params # computername : PSTR [In],sitename : PSTR* [In]
  fun DsGetSiteNameA(computername : PSTR, sitename : PSTR*) : UInt32

  # Params # computername : LibC::LPWSTR [In],sitename : LibC::LPWSTR* [In]
  fun DsGetSiteNameW(computername : LibC::LPWSTR, sitename : LibC::LPWSTR*) : UInt32

  # Params # subnetname : LibC::LPWSTR [In]
  fun DsValidateSubnetNameW(subnetname : LibC::LPWSTR) : UInt32

  # Params # subnetname : PSTR [In]
  fun DsValidateSubnetNameA(subnetname : PSTR) : UInt32

  # Params # computername : LibC::LPWSTR [In],entrycount : UInt32 [In],socketaddresses : SOCKET_ADDRESS* [In],sitenames : LibC::LPWSTR** [In]
  fun DsAddressToSiteNamesW(computername : LibC::LPWSTR, entrycount : UInt32, socketaddresses : SOCKET_ADDRESS*, sitenames : LibC::LPWSTR**) : UInt32

  # Params # computername : PSTR [In],entrycount : UInt32 [In],socketaddresses : SOCKET_ADDRESS* [In],sitenames : PSTR** [In]
  fun DsAddressToSiteNamesA(computername : PSTR, entrycount : UInt32, socketaddresses : SOCKET_ADDRESS*, sitenames : PSTR**) : UInt32

  # Params # computername : LibC::LPWSTR [In],entrycount : UInt32 [In],socketaddresses : SOCKET_ADDRESS* [In],sitenames : LibC::LPWSTR** [In],subnetnames : LibC::LPWSTR** [In]
  fun DsAddressToSiteNamesExW(computername : LibC::LPWSTR, entrycount : UInt32, socketaddresses : SOCKET_ADDRESS*, sitenames : LibC::LPWSTR**, subnetnames : LibC::LPWSTR**) : UInt32

  # Params # computername : PSTR [In],entrycount : UInt32 [In],socketaddresses : SOCKET_ADDRESS* [In],sitenames : PSTR** [In],subnetnames : PSTR** [In]
  fun DsAddressToSiteNamesExA(computername : PSTR, entrycount : UInt32, socketaddresses : SOCKET_ADDRESS*, sitenames : PSTR**, subnetnames : PSTR**) : UInt32

  # Params # servername : LibC::LPWSTR [In],flags : UInt32 [In],domains : DS_DOMAIN_TRUSTSW** [In],domaincount : UInt32* [In]
  fun DsEnumerateDomainTrustsW(servername : LibC::LPWSTR, flags : UInt32, domains : DS_DOMAIN_TRUSTSW**, domaincount : UInt32*) : UInt32

  # Params # servername : PSTR [In],flags : UInt32 [In],domains : DS_DOMAIN_TRUSTSA** [In],domaincount : UInt32* [In]
  fun DsEnumerateDomainTrustsA(servername : PSTR, flags : UInt32, domains : DS_DOMAIN_TRUSTSA**, domaincount : UInt32*) : UInt32

  # Params # servername : LibC::LPWSTR [In],trusteddomainname : LibC::LPWSTR [In],flags : UInt32 [In],foresttrustinfo : LSA_FOREST_TRUST_INFORMATION** [In]
  fun DsGetForestTrustInformationW(servername : LibC::LPWSTR, trusteddomainname : LibC::LPWSTR, flags : UInt32, foresttrustinfo : LSA_FOREST_TRUST_INFORMATION**) : UInt32

  # Params # domainname : LibC::LPWSTR [In],newforesttrustinfo : LSA_FOREST_TRUST_INFORMATION* [In],oldforesttrustinfo : LSA_FOREST_TRUST_INFORMATION* [In],mergedforesttrustinfo : LSA_FOREST_TRUST_INFORMATION** [In]
  fun DsMergeForestTrustInformationW(domainname : LibC::LPWSTR, newforesttrustinfo : LSA_FOREST_TRUST_INFORMATION*, oldforesttrustinfo : LSA_FOREST_TRUST_INFORMATION*, mergedforesttrustinfo : LSA_FOREST_TRUST_INFORMATION**) : UInt32

  # Params # servername : LibC::LPWSTR [In],entrycount : UInt32* [In],sitenames : LibC::LPWSTR** [In]
  fun DsGetDcSiteCoverageW(servername : LibC::LPWSTR, entrycount : UInt32*, sitenames : LibC::LPWSTR**) : UInt32

  # Params # servername : PSTR [In],entrycount : UInt32* [In],sitenames : PSTR** [In]
  fun DsGetDcSiteCoverageA(servername : PSTR, entrycount : UInt32*, sitenames : PSTR**) : UInt32

  # Params # servername : LibC::LPWSTR [In],dnsdomainname : LibC::LPWSTR [In],domainguid : Guid* [In],dsaguid : Guid* [In],dnshostname : LibC::LPWSTR [In]
  fun DsDeregisterDnsHostRecordsW(servername : LibC::LPWSTR, dnsdomainname : LibC::LPWSTR, domainguid : Guid*, dsaguid : Guid*, dnshostname : LibC::LPWSTR) : UInt32

  # Params # servername : PSTR [In],dnsdomainname : PSTR [In],domainguid : Guid* [In],dsaguid : Guid* [In],dnshostname : PSTR [In]
  fun DsDeregisterDnsHostRecordsA(servername : PSTR, dnsdomainname : PSTR, domainguid : Guid*, dsaguid : Guid*, dnshostname : PSTR) : UInt32

  # Params # dnsname : LibC::LPWSTR [In],optionflags : UInt32 [In],sitename : LibC::LPWSTR [In],domainguid : Guid* [In],dnsforestname : LibC::LPWSTR [In],dcflags : UInt32 [In],retgetdccontext : GetDcContextHandle* [In]
  fun DsGetDcOpenW(dnsname : LibC::LPWSTR, optionflags : UInt32, sitename : LibC::LPWSTR, domainguid : Guid*, dnsforestname : LibC::LPWSTR, dcflags : UInt32, retgetdccontext : GetDcContextHandle*) : UInt32

  # Params # dnsname : PSTR [In],optionflags : UInt32 [In],sitename : PSTR [In],domainguid : Guid* [In],dnsforestname : PSTR [In],dcflags : UInt32 [In],retgetdccontext : GetDcContextHandle* [In]
  fun DsGetDcOpenA(dnsname : PSTR, optionflags : UInt32, sitename : PSTR, domainguid : Guid*, dnsforestname : PSTR, dcflags : UInt32, retgetdccontext : GetDcContextHandle*) : UInt32

  # Params # getdccontexthandle : LibC::HANDLE [In],sockaddresscount : UInt32* [In],sockaddresses : SOCKET_ADDRESS** [In],dnshostname : LibC::LPWSTR* [In]
  fun DsGetDcNextW(getdccontexthandle : LibC::HANDLE, sockaddresscount : UInt32*, sockaddresses : SOCKET_ADDRESS**, dnshostname : LibC::LPWSTR*) : UInt32

  # Params # getdccontexthandle : LibC::HANDLE [In],sockaddresscount : UInt32* [In],sockaddresses : SOCKET_ADDRESS** [In],dnshostname : PSTR* [In]
  fun DsGetDcNextA(getdccontexthandle : LibC::HANDLE, sockaddresscount : UInt32*, sockaddresses : SOCKET_ADDRESS**, dnshostname : PSTR*) : UInt32

  # Params # getdccontexthandle : GetDcContextHandle [In]
  fun DsGetDcCloseW(getdccontexthandle : GetDcContextHandle) : Void
end
struct LibWin32::IQueryForm
  def query_interface(this : IQueryForm*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IQueryForm*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IQueryForm*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def initialize(this : IQueryForm*, hkform : HKEY) : HRESULT
    @lpVtbl.value.initialize.call(this, hkform)
  end
  def add_forms(this : IQueryForm*, paddformsproc : LPCQADDFORMSPROC, lparam : LPARAM) : HRESULT
    @lpVtbl.value.add_forms.call(this, paddformsproc, lparam)
  end
  def add_pages(this : IQueryForm*, paddpagesproc : LPCQADDPAGESPROC, lparam : LPARAM) : HRESULT
    @lpVtbl.value.add_pages.call(this, paddpagesproc, lparam)
  end
end
struct LibWin32::IPersistQuery
  def query_interface(this : IPersistQuery*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IPersistQuery*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IPersistQuery*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_class_id(this : IPersistQuery*, pclassid : Guid*) : HRESULT
    @lpVtbl.value.get_class_id.call(this, pclassid)
  end
  def write_string(this : IPersistQuery*, psection : LibC::LPWSTR, pvaluename : LibC::LPWSTR, pvalue : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.write_string.call(this, psection, pvaluename, pvalue)
  end
  def read_string(this : IPersistQuery*, psection : LibC::LPWSTR, pvaluename : LibC::LPWSTR, pbuffer : LibC::LPWSTR, cchbuffer : Int32) : HRESULT
    @lpVtbl.value.read_string.call(this, psection, pvaluename, pbuffer, cchbuffer)
  end
  def write_int(this : IPersistQuery*, psection : LibC::LPWSTR, pvaluename : LibC::LPWSTR, value : Int32) : HRESULT
    @lpVtbl.value.write_int.call(this, psection, pvaluename, value)
  end
  def read_int(this : IPersistQuery*, psection : LibC::LPWSTR, pvaluename : LibC::LPWSTR, pvalue : Int32*) : HRESULT
    @lpVtbl.value.read_int.call(this, psection, pvaluename, pvalue)
  end
  def write_struct(this : IPersistQuery*, psection : LibC::LPWSTR, pvaluename : LibC::LPWSTR, pstruct : Void*, cbstruct : UInt32) : HRESULT
    @lpVtbl.value.write_struct.call(this, psection, pvaluename, pstruct, cbstruct)
  end
  def read_struct(this : IPersistQuery*, psection : LibC::LPWSTR, pvaluename : LibC::LPWSTR, pstruct : Void*, cbstruct : UInt32) : HRESULT
    @lpVtbl.value.read_struct.call(this, psection, pvaluename, pstruct, cbstruct)
  end
  def clear(this : IPersistQuery*) : HRESULT
    @lpVtbl.value.clear.call(this)
  end
end
struct LibWin32::ICommonQuery
  def query_interface(this : ICommonQuery*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ICommonQuery*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ICommonQuery*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def open_query_window(this : ICommonQuery*, hwndparent : LibC::HANDLE, pquerywnd : OPENQUERYWINDOW*, ppdataobject : IDataObject*) : HRESULT
    @lpVtbl.value.open_query_window.call(this, hwndparent, pquerywnd, ppdataobject)
  end
end
struct LibWin32::IADs
  def query_interface(this : IADs*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADs*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADs*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADs*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADs*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADs*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADs*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IADs*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, retval)
  end
  def get_class(this : IADs*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_class.call(this, retval)
  end
  def get_guid(this : IADs*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_guid.call(this, retval)
  end
  def get_a_ds_path(this : IADs*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_a_ds_path.call(this, retval)
  end
  def get_parent(this : IADs*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_parent.call(this, retval)
  end
  def get_schema(this : IADs*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_schema.call(this, retval)
  end
  def get_info(this : IADs*) : HRESULT
    @lpVtbl.value.get_info.call(this)
  end
  def set_info(this : IADs*) : HRESULT
    @lpVtbl.value.set_info.call(this)
  end
  def get(this : IADs*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get.call(this, bstrname, pvprop)
  end
  def put(this : IADs*, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put.call(this, bstrname, vprop)
  end
  def get_ex(this : IADs*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get_ex.call(this, bstrname, pvprop)
  end
  def put_ex(this : IADs*, lncontrolcode : Int32, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put_ex.call(this, lncontrolcode, bstrname, vprop)
  end
  def get_info_ex(this : IADs*, vproperties : VARIANT, lnreserved : Int32) : HRESULT
    @lpVtbl.value.get_info_ex.call(this, vproperties, lnreserved)
  end
end
struct LibWin32::IADsContainer
  def query_interface(this : IADsContainer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsContainer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsContainer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsContainer*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsContainer*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsContainer*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsContainer*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_count(this : IADsContainer*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_count.call(this, retval)
  end
  def get__new_enum(this : IADsContainer*, retval : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.call(this, retval)
  end
  def get_filter(this : IADsContainer*, pvar : VARIANT*) : HRESULT
    @lpVtbl.value.get_filter.call(this, pvar)
  end
  def put_filter(this : IADsContainer*, var : VARIANT) : HRESULT
    @lpVtbl.value.put_filter.call(this, var)
  end
  def get_hints(this : IADsContainer*, pvfilter : VARIANT*) : HRESULT
    @lpVtbl.value.get_hints.call(this, pvfilter)
  end
  def put_hints(this : IADsContainer*, vhints : VARIANT) : HRESULT
    @lpVtbl.value.put_hints.call(this, vhints)
  end
  def get_object(this : IADsContainer*, classname : UInt8*, relativename : UInt8*, ppobject : IDispatch*) : HRESULT
    @lpVtbl.value.get_object.call(this, classname, relativename, ppobject)
  end
  def create(this : IADsContainer*, classname : UInt8*, relativename : UInt8*, ppobject : IDispatch*) : HRESULT
    @lpVtbl.value.create.call(this, classname, relativename, ppobject)
  end
  def delete(this : IADsContainer*, bstrclassname : UInt8*, bstrrelativename : UInt8*) : HRESULT
    @lpVtbl.value.delete.call(this, bstrclassname, bstrrelativename)
  end
  def copy_here(this : IADsContainer*, sourcename : UInt8*, newname : UInt8*, ppobject : IDispatch*) : HRESULT
    @lpVtbl.value.copy_here.call(this, sourcename, newname, ppobject)
  end
  def move_here(this : IADsContainer*, sourcename : UInt8*, newname : UInt8*, ppobject : IDispatch*) : HRESULT
    @lpVtbl.value.move_here.call(this, sourcename, newname, ppobject)
  end
end
struct LibWin32::IADsCollection
  def query_interface(this : IADsCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get__new_enum(this : IADsCollection*, ppenumerator : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.call(this, ppenumerator)
  end
  def add(this : IADsCollection*, bstrname : UInt8*, vitem : VARIANT) : HRESULT
    @lpVtbl.value.add.call(this, bstrname, vitem)
  end
  def remove(this : IADsCollection*, bstritemtoberemoved : UInt8*) : HRESULT
    @lpVtbl.value.remove.call(this, bstritemtoberemoved)
  end
  def get_object(this : IADsCollection*, bstrname : UInt8*, pvitem : VARIANT*) : HRESULT
    @lpVtbl.value.get_object.call(this, bstrname, pvitem)
  end
end
struct LibWin32::IADsMembers
  def query_interface(this : IADsMembers*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsMembers*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsMembers*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsMembers*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsMembers*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsMembers*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsMembers*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_count(this : IADsMembers*, plcount : Int32*) : HRESULT
    @lpVtbl.value.get_count.call(this, plcount)
  end
  def get__new_enum(this : IADsMembers*, ppenumerator : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.call(this, ppenumerator)
  end
  def get_filter(this : IADsMembers*, pvfilter : VARIANT*) : HRESULT
    @lpVtbl.value.get_filter.call(this, pvfilter)
  end
  def put_filter(this : IADsMembers*, pvfilter : VARIANT) : HRESULT
    @lpVtbl.value.put_filter.call(this, pvfilter)
  end
end
struct LibWin32::IADsPropertyList
  def query_interface(this : IADsPropertyList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsPropertyList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsPropertyList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsPropertyList*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsPropertyList*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsPropertyList*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsPropertyList*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_property_count(this : IADsPropertyList*, plcount : Int32*) : HRESULT
    @lpVtbl.value.get_property_count.call(this, plcount)
  end
  def next(this : IADsPropertyList*, pvariant : VARIANT*) : HRESULT
    @lpVtbl.value.next.call(this, pvariant)
  end
  def skip(this : IADsPropertyList*, celements : Int32) : HRESULT
    @lpVtbl.value.skip.call(this, celements)
  end
  def reset(this : IADsPropertyList*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def item(this : IADsPropertyList*, varindex : VARIANT, pvariant : VARIANT*) : HRESULT
    @lpVtbl.value.item.call(this, varindex, pvariant)
  end
  def get_property_item(this : IADsPropertyList*, bstrname : UInt8*, lnadstype : Int32, pvariant : VARIANT*) : HRESULT
    @lpVtbl.value.get_property_item.call(this, bstrname, lnadstype, pvariant)
  end
  def put_property_item(this : IADsPropertyList*, vardata : VARIANT) : HRESULT
    @lpVtbl.value.put_property_item.call(this, vardata)
  end
  def reset_property_item(this : IADsPropertyList*, varentry : VARIANT) : HRESULT
    @lpVtbl.value.reset_property_item.call(this, varentry)
  end
  def purge_property_list(this : IADsPropertyList*) : HRESULT
    @lpVtbl.value.purge_property_list.call(this)
  end
end
struct LibWin32::IADsPropertyEntry
  def query_interface(this : IADsPropertyEntry*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsPropertyEntry*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsPropertyEntry*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsPropertyEntry*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsPropertyEntry*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsPropertyEntry*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsPropertyEntry*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def clear(this : IADsPropertyEntry*) : HRESULT
    @lpVtbl.value.clear.call(this)
  end
  def get_name(this : IADsPropertyEntry*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, retval)
  end
  def put_name(this : IADsPropertyEntry*, bstrname : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, bstrname)
  end
  def get_a_ds_type(this : IADsPropertyEntry*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_a_ds_type.call(this, retval)
  end
  def put_a_ds_type(this : IADsPropertyEntry*, lnadstype : Int32) : HRESULT
    @lpVtbl.value.put_a_ds_type.call(this, lnadstype)
  end
  def get_control_code(this : IADsPropertyEntry*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_control_code.call(this, retval)
  end
  def put_control_code(this : IADsPropertyEntry*, lncontrolcode : Int32) : HRESULT
    @lpVtbl.value.put_control_code.call(this, lncontrolcode)
  end
  def get_values(this : IADsPropertyEntry*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_values.call(this, retval)
  end
  def put_values(this : IADsPropertyEntry*, vvalues : VARIANT) : HRESULT
    @lpVtbl.value.put_values.call(this, vvalues)
  end
end
struct LibWin32::IADsPropertyValue
  def query_interface(this : IADsPropertyValue*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsPropertyValue*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsPropertyValue*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsPropertyValue*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsPropertyValue*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsPropertyValue*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsPropertyValue*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def clear(this : IADsPropertyValue*) : HRESULT
    @lpVtbl.value.clear.call(this)
  end
  def get_a_ds_type(this : IADsPropertyValue*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_a_ds_type.call(this, retval)
  end
  def put_a_ds_type(this : IADsPropertyValue*, lnadstype : Int32) : HRESULT
    @lpVtbl.value.put_a_ds_type.call(this, lnadstype)
  end
  def get_dn_string(this : IADsPropertyValue*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_dn_string.call(this, retval)
  end
  def put_dn_string(this : IADsPropertyValue*, bstrdnstring : UInt8*) : HRESULT
    @lpVtbl.value.put_dn_string.call(this, bstrdnstring)
  end
  def get_case_exact_string(this : IADsPropertyValue*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_case_exact_string.call(this, retval)
  end
  def put_case_exact_string(this : IADsPropertyValue*, bstrcaseexactstring : UInt8*) : HRESULT
    @lpVtbl.value.put_case_exact_string.call(this, bstrcaseexactstring)
  end
  def get_case_ignore_string(this : IADsPropertyValue*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_case_ignore_string.call(this, retval)
  end
  def put_case_ignore_string(this : IADsPropertyValue*, bstrcaseignorestring : UInt8*) : HRESULT
    @lpVtbl.value.put_case_ignore_string.call(this, bstrcaseignorestring)
  end
  def get_printable_string(this : IADsPropertyValue*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_printable_string.call(this, retval)
  end
  def put_printable_string(this : IADsPropertyValue*, bstrprintablestring : UInt8*) : HRESULT
    @lpVtbl.value.put_printable_string.call(this, bstrprintablestring)
  end
  def get_numeric_string(this : IADsPropertyValue*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_numeric_string.call(this, retval)
  end
  def put_numeric_string(this : IADsPropertyValue*, bstrnumericstring : UInt8*) : HRESULT
    @lpVtbl.value.put_numeric_string.call(this, bstrnumericstring)
  end
  def get_boolean(this : IADsPropertyValue*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_boolean.call(this, retval)
  end
  def put_boolean(this : IADsPropertyValue*, lnboolean : Int32) : HRESULT
    @lpVtbl.value.put_boolean.call(this, lnboolean)
  end
  def get_integer(this : IADsPropertyValue*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_integer.call(this, retval)
  end
  def put_integer(this : IADsPropertyValue*, lninteger : Int32) : HRESULT
    @lpVtbl.value.put_integer.call(this, lninteger)
  end
  def get_octet_string(this : IADsPropertyValue*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_octet_string.call(this, retval)
  end
  def put_octet_string(this : IADsPropertyValue*, voctetstring : VARIANT) : HRESULT
    @lpVtbl.value.put_octet_string.call(this, voctetstring)
  end
  def get_security_descriptor(this : IADsPropertyValue*, retval : IDispatch*) : HRESULT
    @lpVtbl.value.get_security_descriptor.call(this, retval)
  end
  def put_security_descriptor(this : IADsPropertyValue*, psecuritydescriptor : IDispatch) : HRESULT
    @lpVtbl.value.put_security_descriptor.call(this, psecuritydescriptor)
  end
  def get_large_integer(this : IADsPropertyValue*, retval : IDispatch*) : HRESULT
    @lpVtbl.value.get_large_integer.call(this, retval)
  end
  def put_large_integer(this : IADsPropertyValue*, plargeinteger : IDispatch) : HRESULT
    @lpVtbl.value.put_large_integer.call(this, plargeinteger)
  end
  def get_utc_time(this : IADsPropertyValue*, retval : Float64*) : HRESULT
    @lpVtbl.value.get_utc_time.call(this, retval)
  end
  def put_utc_time(this : IADsPropertyValue*, dautctime : Float64) : HRESULT
    @lpVtbl.value.put_utc_time.call(this, dautctime)
  end
end
struct LibWin32::IADsPropertyValue2
  def query_interface(this : IADsPropertyValue2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsPropertyValue2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsPropertyValue2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsPropertyValue2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsPropertyValue2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsPropertyValue2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsPropertyValue2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_object_property(this : IADsPropertyValue2*, lnadstype : Int32*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get_object_property.call(this, lnadstype, pvprop)
  end
  def put_object_property(this : IADsPropertyValue2*, lnadstype : Int32, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put_object_property.call(this, lnadstype, vprop)
  end
end
struct LibWin32::IPrivateDispatch
  def query_interface(this : IPrivateDispatch*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IPrivateDispatch*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IPrivateDispatch*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def adsi_initialize_dispatch_manager(this : IPrivateDispatch*, dwextensionid : Int32) : HRESULT
    @lpVtbl.value.adsi_initialize_dispatch_manager.call(this, dwextensionid)
  end
  def adsi_get_type_info_count(this : IPrivateDispatch*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.adsi_get_type_info_count.call(this, pctinfo)
  end
  def adsi_get_type_info(this : IPrivateDispatch*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.adsi_get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def adsi_get_i_ds_of_names(this : IPrivateDispatch*, riid : Guid*, rgsznames : UInt16**, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.adsi_get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def adsi_invoke(this : IPrivateDispatch*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.adsi_invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IPrivateUnknown
  def query_interface(this : IPrivateUnknown*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IPrivateUnknown*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IPrivateUnknown*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def adsi_initialize_object(this : IPrivateUnknown*, lpszusername : UInt8*, lpszpassword : UInt8*, lnreserved : Int32) : HRESULT
    @lpVtbl.value.adsi_initialize_object.call(this, lpszusername, lpszpassword, lnreserved)
  end
  def adsi_release_object(this : IPrivateUnknown*) : HRESULT
    @lpVtbl.value.adsi_release_object.call(this)
  end
end
struct LibWin32::IADsExtension
  def query_interface(this : IADsExtension*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsExtension*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsExtension*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def operate(this : IADsExtension*, dwcode : UInt32, vardata1 : VARIANT, vardata2 : VARIANT, vardata3 : VARIANT) : HRESULT
    @lpVtbl.value.operate.call(this, dwcode, vardata1, vardata2, vardata3)
  end
  def private_get_i_ds_of_names(this : IADsExtension*, riid : Guid*, rgsznames : UInt16**, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.private_get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def private_invoke(this : IADsExtension*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.private_invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IADsDeleteOps
  def query_interface(this : IADsDeleteOps*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsDeleteOps*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsDeleteOps*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsDeleteOps*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsDeleteOps*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsDeleteOps*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsDeleteOps*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def delete_object(this : IADsDeleteOps*, lnflags : Int32) : HRESULT
    @lpVtbl.value.delete_object.call(this, lnflags)
  end
end
struct LibWin32::IADsNamespaces
  def query_interface(this : IADsNamespaces*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsNamespaces*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsNamespaces*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsNamespaces*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsNamespaces*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsNamespaces*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsNamespaces*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IADsNamespaces*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, retval)
  end
  def get_class(this : IADsNamespaces*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_class.call(this, retval)
  end
  def get_guid(this : IADsNamespaces*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_guid.call(this, retval)
  end
  def get_a_ds_path(this : IADsNamespaces*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_a_ds_path.call(this, retval)
  end
  def get_parent(this : IADsNamespaces*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_parent.call(this, retval)
  end
  def get_schema(this : IADsNamespaces*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_schema.call(this, retval)
  end
  def get_info(this : IADsNamespaces*) : HRESULT
    @lpVtbl.value.get_info.call(this)
  end
  def set_info(this : IADsNamespaces*) : HRESULT
    @lpVtbl.value.set_info.call(this)
  end
  def get(this : IADsNamespaces*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get.call(this, bstrname, pvprop)
  end
  def put(this : IADsNamespaces*, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put.call(this, bstrname, vprop)
  end
  def get_ex(this : IADsNamespaces*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get_ex.call(this, bstrname, pvprop)
  end
  def put_ex(this : IADsNamespaces*, lncontrolcode : Int32, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put_ex.call(this, lncontrolcode, bstrname, vprop)
  end
  def get_info_ex(this : IADsNamespaces*, vproperties : VARIANT, lnreserved : Int32) : HRESULT
    @lpVtbl.value.get_info_ex.call(this, vproperties, lnreserved)
  end
  def get_default_container(this : IADsNamespaces*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_default_container.call(this, retval)
  end
  def put_default_container(this : IADsNamespaces*, bstrdefaultcontainer : UInt8*) : HRESULT
    @lpVtbl.value.put_default_container.call(this, bstrdefaultcontainer)
  end
end
struct LibWin32::IADsClass
  def query_interface(this : IADsClass*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsClass*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsClass*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsClass*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsClass*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsClass*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsClass*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IADsClass*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, retval)
  end
  def get_class(this : IADsClass*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_class.call(this, retval)
  end
  def get_guid(this : IADsClass*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_guid.call(this, retval)
  end
  def get_a_ds_path(this : IADsClass*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_a_ds_path.call(this, retval)
  end
  def get_parent(this : IADsClass*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_parent.call(this, retval)
  end
  def get_schema(this : IADsClass*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_schema.call(this, retval)
  end
  def get_info(this : IADsClass*) : HRESULT
    @lpVtbl.value.get_info.call(this)
  end
  def set_info(this : IADsClass*) : HRESULT
    @lpVtbl.value.set_info.call(this)
  end
  def get(this : IADsClass*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get.call(this, bstrname, pvprop)
  end
  def put(this : IADsClass*, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put.call(this, bstrname, vprop)
  end
  def get_ex(this : IADsClass*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get_ex.call(this, bstrname, pvprop)
  end
  def put_ex(this : IADsClass*, lncontrolcode : Int32, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put_ex.call(this, lncontrolcode, bstrname, vprop)
  end
  def get_info_ex(this : IADsClass*, vproperties : VARIANT, lnreserved : Int32) : HRESULT
    @lpVtbl.value.get_info_ex.call(this, vproperties, lnreserved)
  end
  def get_primary_interface(this : IADsClass*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_primary_interface.call(this, retval)
  end
  def get_clsid(this : IADsClass*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_clsid.call(this, retval)
  end
  def put_clsid(this : IADsClass*, bstrclsid : UInt8*) : HRESULT
    @lpVtbl.value.put_clsid.call(this, bstrclsid)
  end
  def get_oid(this : IADsClass*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_oid.call(this, retval)
  end
  def put_oid(this : IADsClass*, bstroid : UInt8*) : HRESULT
    @lpVtbl.value.put_oid.call(this, bstroid)
  end
  def get_abstract(this : IADsClass*, retval : Int16*) : HRESULT
    @lpVtbl.value.get_abstract.call(this, retval)
  end
  def put_abstract(this : IADsClass*, fabstract : Int16) : HRESULT
    @lpVtbl.value.put_abstract.call(this, fabstract)
  end
  def get_auxiliary(this : IADsClass*, retval : Int16*) : HRESULT
    @lpVtbl.value.get_auxiliary.call(this, retval)
  end
  def put_auxiliary(this : IADsClass*, fauxiliary : Int16) : HRESULT
    @lpVtbl.value.put_auxiliary.call(this, fauxiliary)
  end
  def get_mandatory_properties(this : IADsClass*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_mandatory_properties.call(this, retval)
  end
  def put_mandatory_properties(this : IADsClass*, vmandatoryproperties : VARIANT) : HRESULT
    @lpVtbl.value.put_mandatory_properties.call(this, vmandatoryproperties)
  end
  def get_optional_properties(this : IADsClass*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_optional_properties.call(this, retval)
  end
  def put_optional_properties(this : IADsClass*, voptionalproperties : VARIANT) : HRESULT
    @lpVtbl.value.put_optional_properties.call(this, voptionalproperties)
  end
  def get_naming_properties(this : IADsClass*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_naming_properties.call(this, retval)
  end
  def put_naming_properties(this : IADsClass*, vnamingproperties : VARIANT) : HRESULT
    @lpVtbl.value.put_naming_properties.call(this, vnamingproperties)
  end
  def get_derived_from(this : IADsClass*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_derived_from.call(this, retval)
  end
  def put_derived_from(this : IADsClass*, vderivedfrom : VARIANT) : HRESULT
    @lpVtbl.value.put_derived_from.call(this, vderivedfrom)
  end
  def get_aux_derived_from(this : IADsClass*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_aux_derived_from.call(this, retval)
  end
  def put_aux_derived_from(this : IADsClass*, vauxderivedfrom : VARIANT) : HRESULT
    @lpVtbl.value.put_aux_derived_from.call(this, vauxderivedfrom)
  end
  def get_possible_superiors(this : IADsClass*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_possible_superiors.call(this, retval)
  end
  def put_possible_superiors(this : IADsClass*, vpossiblesuperiors : VARIANT) : HRESULT
    @lpVtbl.value.put_possible_superiors.call(this, vpossiblesuperiors)
  end
  def get_containment(this : IADsClass*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_containment.call(this, retval)
  end
  def put_containment(this : IADsClass*, vcontainment : VARIANT) : HRESULT
    @lpVtbl.value.put_containment.call(this, vcontainment)
  end
  def get_container(this : IADsClass*, retval : Int16*) : HRESULT
    @lpVtbl.value.get_container.call(this, retval)
  end
  def put_container(this : IADsClass*, fcontainer : Int16) : HRESULT
    @lpVtbl.value.put_container.call(this, fcontainer)
  end
  def get_help_file_name(this : IADsClass*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_help_file_name.call(this, retval)
  end
  def put_help_file_name(this : IADsClass*, bstrhelpfilename : UInt8*) : HRESULT
    @lpVtbl.value.put_help_file_name.call(this, bstrhelpfilename)
  end
  def get_help_file_context(this : IADsClass*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_help_file_context.call(this, retval)
  end
  def put_help_file_context(this : IADsClass*, lnhelpfilecontext : Int32) : HRESULT
    @lpVtbl.value.put_help_file_context.call(this, lnhelpfilecontext)
  end
  def qualifiers(this : IADsClass*, ppqualifiers : IADsCollection*) : HRESULT
    @lpVtbl.value.qualifiers.call(this, ppqualifiers)
  end
end
struct LibWin32::IADsProperty
  def query_interface(this : IADsProperty*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsProperty*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsProperty*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsProperty*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsProperty*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsProperty*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsProperty*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IADsProperty*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, retval)
  end
  def get_class(this : IADsProperty*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_class.call(this, retval)
  end
  def get_guid(this : IADsProperty*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_guid.call(this, retval)
  end
  def get_a_ds_path(this : IADsProperty*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_a_ds_path.call(this, retval)
  end
  def get_parent(this : IADsProperty*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_parent.call(this, retval)
  end
  def get_schema(this : IADsProperty*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_schema.call(this, retval)
  end
  def get_info(this : IADsProperty*) : HRESULT
    @lpVtbl.value.get_info.call(this)
  end
  def set_info(this : IADsProperty*) : HRESULT
    @lpVtbl.value.set_info.call(this)
  end
  def get(this : IADsProperty*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get.call(this, bstrname, pvprop)
  end
  def put(this : IADsProperty*, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put.call(this, bstrname, vprop)
  end
  def get_ex(this : IADsProperty*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get_ex.call(this, bstrname, pvprop)
  end
  def put_ex(this : IADsProperty*, lncontrolcode : Int32, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put_ex.call(this, lncontrolcode, bstrname, vprop)
  end
  def get_info_ex(this : IADsProperty*, vproperties : VARIANT, lnreserved : Int32) : HRESULT
    @lpVtbl.value.get_info_ex.call(this, vproperties, lnreserved)
  end
  def get_oid(this : IADsProperty*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_oid.call(this, retval)
  end
  def put_oid(this : IADsProperty*, bstroid : UInt8*) : HRESULT
    @lpVtbl.value.put_oid.call(this, bstroid)
  end
  def get_syntax(this : IADsProperty*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_syntax.call(this, retval)
  end
  def put_syntax(this : IADsProperty*, bstrsyntax : UInt8*) : HRESULT
    @lpVtbl.value.put_syntax.call(this, bstrsyntax)
  end
  def get_max_range(this : IADsProperty*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_max_range.call(this, retval)
  end
  def put_max_range(this : IADsProperty*, lnmaxrange : Int32) : HRESULT
    @lpVtbl.value.put_max_range.call(this, lnmaxrange)
  end
  def get_min_range(this : IADsProperty*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_min_range.call(this, retval)
  end
  def put_min_range(this : IADsProperty*, lnminrange : Int32) : HRESULT
    @lpVtbl.value.put_min_range.call(this, lnminrange)
  end
  def get_multi_valued(this : IADsProperty*, retval : Int16*) : HRESULT
    @lpVtbl.value.get_multi_valued.call(this, retval)
  end
  def put_multi_valued(this : IADsProperty*, fmultivalued : Int16) : HRESULT
    @lpVtbl.value.put_multi_valued.call(this, fmultivalued)
  end
  def qualifiers(this : IADsProperty*, ppqualifiers : IADsCollection*) : HRESULT
    @lpVtbl.value.qualifiers.call(this, ppqualifiers)
  end
end
struct LibWin32::IADsSyntax
  def query_interface(this : IADsSyntax*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsSyntax*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsSyntax*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsSyntax*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsSyntax*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsSyntax*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsSyntax*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IADsSyntax*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, retval)
  end
  def get_class(this : IADsSyntax*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_class.call(this, retval)
  end
  def get_guid(this : IADsSyntax*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_guid.call(this, retval)
  end
  def get_a_ds_path(this : IADsSyntax*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_a_ds_path.call(this, retval)
  end
  def get_parent(this : IADsSyntax*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_parent.call(this, retval)
  end
  def get_schema(this : IADsSyntax*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_schema.call(this, retval)
  end
  def get_info(this : IADsSyntax*) : HRESULT
    @lpVtbl.value.get_info.call(this)
  end
  def set_info(this : IADsSyntax*) : HRESULT
    @lpVtbl.value.set_info.call(this)
  end
  def get(this : IADsSyntax*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get.call(this, bstrname, pvprop)
  end
  def put(this : IADsSyntax*, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put.call(this, bstrname, vprop)
  end
  def get_ex(this : IADsSyntax*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get_ex.call(this, bstrname, pvprop)
  end
  def put_ex(this : IADsSyntax*, lncontrolcode : Int32, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put_ex.call(this, lncontrolcode, bstrname, vprop)
  end
  def get_info_ex(this : IADsSyntax*, vproperties : VARIANT, lnreserved : Int32) : HRESULT
    @lpVtbl.value.get_info_ex.call(this, vproperties, lnreserved)
  end
  def get_ole_auto_data_type(this : IADsSyntax*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_ole_auto_data_type.call(this, retval)
  end
  def put_ole_auto_data_type(this : IADsSyntax*, lnoleautodatatype : Int32) : HRESULT
    @lpVtbl.value.put_ole_auto_data_type.call(this, lnoleautodatatype)
  end
end
struct LibWin32::IADsLocality
  def query_interface(this : IADsLocality*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsLocality*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsLocality*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsLocality*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsLocality*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsLocality*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsLocality*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IADsLocality*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, retval)
  end
  def get_class(this : IADsLocality*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_class.call(this, retval)
  end
  def get_guid(this : IADsLocality*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_guid.call(this, retval)
  end
  def get_a_ds_path(this : IADsLocality*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_a_ds_path.call(this, retval)
  end
  def get_parent(this : IADsLocality*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_parent.call(this, retval)
  end
  def get_schema(this : IADsLocality*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_schema.call(this, retval)
  end
  def get_info(this : IADsLocality*) : HRESULT
    @lpVtbl.value.get_info.call(this)
  end
  def set_info(this : IADsLocality*) : HRESULT
    @lpVtbl.value.set_info.call(this)
  end
  def get(this : IADsLocality*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get.call(this, bstrname, pvprop)
  end
  def put(this : IADsLocality*, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put.call(this, bstrname, vprop)
  end
  def get_ex(this : IADsLocality*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get_ex.call(this, bstrname, pvprop)
  end
  def put_ex(this : IADsLocality*, lncontrolcode : Int32, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put_ex.call(this, lncontrolcode, bstrname, vprop)
  end
  def get_info_ex(this : IADsLocality*, vproperties : VARIANT, lnreserved : Int32) : HRESULT
    @lpVtbl.value.get_info_ex.call(this, vproperties, lnreserved)
  end
  def get_description(this : IADsLocality*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_description.call(this, retval)
  end
  def put_description(this : IADsLocality*, bstrdescription : UInt8*) : HRESULT
    @lpVtbl.value.put_description.call(this, bstrdescription)
  end
  def get_locality_name(this : IADsLocality*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_locality_name.call(this, retval)
  end
  def put_locality_name(this : IADsLocality*, bstrlocalityname : UInt8*) : HRESULT
    @lpVtbl.value.put_locality_name.call(this, bstrlocalityname)
  end
  def get_postal_address(this : IADsLocality*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_postal_address.call(this, retval)
  end
  def put_postal_address(this : IADsLocality*, bstrpostaladdress : UInt8*) : HRESULT
    @lpVtbl.value.put_postal_address.call(this, bstrpostaladdress)
  end
  def get_see_also(this : IADsLocality*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_see_also.call(this, retval)
  end
  def put_see_also(this : IADsLocality*, vseealso : VARIANT) : HRESULT
    @lpVtbl.value.put_see_also.call(this, vseealso)
  end
end
struct LibWin32::IADsO
  def query_interface(this : IADsO*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsO*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsO*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsO*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsO*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsO*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsO*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IADsO*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, retval)
  end
  def get_class(this : IADsO*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_class.call(this, retval)
  end
  def get_guid(this : IADsO*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_guid.call(this, retval)
  end
  def get_a_ds_path(this : IADsO*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_a_ds_path.call(this, retval)
  end
  def get_parent(this : IADsO*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_parent.call(this, retval)
  end
  def get_schema(this : IADsO*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_schema.call(this, retval)
  end
  def get_info(this : IADsO*) : HRESULT
    @lpVtbl.value.get_info.call(this)
  end
  def set_info(this : IADsO*) : HRESULT
    @lpVtbl.value.set_info.call(this)
  end
  def get(this : IADsO*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get.call(this, bstrname, pvprop)
  end
  def put(this : IADsO*, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put.call(this, bstrname, vprop)
  end
  def get_ex(this : IADsO*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get_ex.call(this, bstrname, pvprop)
  end
  def put_ex(this : IADsO*, lncontrolcode : Int32, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put_ex.call(this, lncontrolcode, bstrname, vprop)
  end
  def get_info_ex(this : IADsO*, vproperties : VARIANT, lnreserved : Int32) : HRESULT
    @lpVtbl.value.get_info_ex.call(this, vproperties, lnreserved)
  end
  def get_description(this : IADsO*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_description.call(this, retval)
  end
  def put_description(this : IADsO*, bstrdescription : UInt8*) : HRESULT
    @lpVtbl.value.put_description.call(this, bstrdescription)
  end
  def get_locality_name(this : IADsO*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_locality_name.call(this, retval)
  end
  def put_locality_name(this : IADsO*, bstrlocalityname : UInt8*) : HRESULT
    @lpVtbl.value.put_locality_name.call(this, bstrlocalityname)
  end
  def get_postal_address(this : IADsO*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_postal_address.call(this, retval)
  end
  def put_postal_address(this : IADsO*, bstrpostaladdress : UInt8*) : HRESULT
    @lpVtbl.value.put_postal_address.call(this, bstrpostaladdress)
  end
  def get_telephone_number(this : IADsO*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_telephone_number.call(this, retval)
  end
  def put_telephone_number(this : IADsO*, bstrtelephonenumber : UInt8*) : HRESULT
    @lpVtbl.value.put_telephone_number.call(this, bstrtelephonenumber)
  end
  def get_fax_number(this : IADsO*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_fax_number.call(this, retval)
  end
  def put_fax_number(this : IADsO*, bstrfaxnumber : UInt8*) : HRESULT
    @lpVtbl.value.put_fax_number.call(this, bstrfaxnumber)
  end
  def get_see_also(this : IADsO*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_see_also.call(this, retval)
  end
  def put_see_also(this : IADsO*, vseealso : VARIANT) : HRESULT
    @lpVtbl.value.put_see_also.call(this, vseealso)
  end
end
struct LibWin32::IADsOU
  def query_interface(this : IADsOU*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsOU*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsOU*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsOU*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsOU*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsOU*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsOU*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IADsOU*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, retval)
  end
  def get_class(this : IADsOU*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_class.call(this, retval)
  end
  def get_guid(this : IADsOU*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_guid.call(this, retval)
  end
  def get_a_ds_path(this : IADsOU*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_a_ds_path.call(this, retval)
  end
  def get_parent(this : IADsOU*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_parent.call(this, retval)
  end
  def get_schema(this : IADsOU*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_schema.call(this, retval)
  end
  def get_info(this : IADsOU*) : HRESULT
    @lpVtbl.value.get_info.call(this)
  end
  def set_info(this : IADsOU*) : HRESULT
    @lpVtbl.value.set_info.call(this)
  end
  def get(this : IADsOU*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get.call(this, bstrname, pvprop)
  end
  def put(this : IADsOU*, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put.call(this, bstrname, vprop)
  end
  def get_ex(this : IADsOU*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get_ex.call(this, bstrname, pvprop)
  end
  def put_ex(this : IADsOU*, lncontrolcode : Int32, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put_ex.call(this, lncontrolcode, bstrname, vprop)
  end
  def get_info_ex(this : IADsOU*, vproperties : VARIANT, lnreserved : Int32) : HRESULT
    @lpVtbl.value.get_info_ex.call(this, vproperties, lnreserved)
  end
  def get_description(this : IADsOU*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_description.call(this, retval)
  end
  def put_description(this : IADsOU*, bstrdescription : UInt8*) : HRESULT
    @lpVtbl.value.put_description.call(this, bstrdescription)
  end
  def get_locality_name(this : IADsOU*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_locality_name.call(this, retval)
  end
  def put_locality_name(this : IADsOU*, bstrlocalityname : UInt8*) : HRESULT
    @lpVtbl.value.put_locality_name.call(this, bstrlocalityname)
  end
  def get_postal_address(this : IADsOU*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_postal_address.call(this, retval)
  end
  def put_postal_address(this : IADsOU*, bstrpostaladdress : UInt8*) : HRESULT
    @lpVtbl.value.put_postal_address.call(this, bstrpostaladdress)
  end
  def get_telephone_number(this : IADsOU*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_telephone_number.call(this, retval)
  end
  def put_telephone_number(this : IADsOU*, bstrtelephonenumber : UInt8*) : HRESULT
    @lpVtbl.value.put_telephone_number.call(this, bstrtelephonenumber)
  end
  def get_fax_number(this : IADsOU*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_fax_number.call(this, retval)
  end
  def put_fax_number(this : IADsOU*, bstrfaxnumber : UInt8*) : HRESULT
    @lpVtbl.value.put_fax_number.call(this, bstrfaxnumber)
  end
  def get_see_also(this : IADsOU*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_see_also.call(this, retval)
  end
  def put_see_also(this : IADsOU*, vseealso : VARIANT) : HRESULT
    @lpVtbl.value.put_see_also.call(this, vseealso)
  end
  def get_business_category(this : IADsOU*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_business_category.call(this, retval)
  end
  def put_business_category(this : IADsOU*, bstrbusinesscategory : UInt8*) : HRESULT
    @lpVtbl.value.put_business_category.call(this, bstrbusinesscategory)
  end
end
struct LibWin32::IADsDomain
  def query_interface(this : IADsDomain*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsDomain*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsDomain*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsDomain*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsDomain*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsDomain*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsDomain*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IADsDomain*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, retval)
  end
  def get_class(this : IADsDomain*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_class.call(this, retval)
  end
  def get_guid(this : IADsDomain*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_guid.call(this, retval)
  end
  def get_a_ds_path(this : IADsDomain*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_a_ds_path.call(this, retval)
  end
  def get_parent(this : IADsDomain*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_parent.call(this, retval)
  end
  def get_schema(this : IADsDomain*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_schema.call(this, retval)
  end
  def get_info(this : IADsDomain*) : HRESULT
    @lpVtbl.value.get_info.call(this)
  end
  def set_info(this : IADsDomain*) : HRESULT
    @lpVtbl.value.set_info.call(this)
  end
  def get(this : IADsDomain*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get.call(this, bstrname, pvprop)
  end
  def put(this : IADsDomain*, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put.call(this, bstrname, vprop)
  end
  def get_ex(this : IADsDomain*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get_ex.call(this, bstrname, pvprop)
  end
  def put_ex(this : IADsDomain*, lncontrolcode : Int32, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put_ex.call(this, lncontrolcode, bstrname, vprop)
  end
  def get_info_ex(this : IADsDomain*, vproperties : VARIANT, lnreserved : Int32) : HRESULT
    @lpVtbl.value.get_info_ex.call(this, vproperties, lnreserved)
  end
  def get_is_workgroup(this : IADsDomain*, retval : Int16*) : HRESULT
    @lpVtbl.value.get_is_workgroup.call(this, retval)
  end
  def get_min_password_length(this : IADsDomain*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_min_password_length.call(this, retval)
  end
  def put_min_password_length(this : IADsDomain*, lnminpasswordlength : Int32) : HRESULT
    @lpVtbl.value.put_min_password_length.call(this, lnminpasswordlength)
  end
  def get_min_password_age(this : IADsDomain*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_min_password_age.call(this, retval)
  end
  def put_min_password_age(this : IADsDomain*, lnminpasswordage : Int32) : HRESULT
    @lpVtbl.value.put_min_password_age.call(this, lnminpasswordage)
  end
  def get_max_password_age(this : IADsDomain*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_max_password_age.call(this, retval)
  end
  def put_max_password_age(this : IADsDomain*, lnmaxpasswordage : Int32) : HRESULT
    @lpVtbl.value.put_max_password_age.call(this, lnmaxpasswordage)
  end
  def get_max_bad_passwords_allowed(this : IADsDomain*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_max_bad_passwords_allowed.call(this, retval)
  end
  def put_max_bad_passwords_allowed(this : IADsDomain*, lnmaxbadpasswordsallowed : Int32) : HRESULT
    @lpVtbl.value.put_max_bad_passwords_allowed.call(this, lnmaxbadpasswordsallowed)
  end
  def get_password_history_length(this : IADsDomain*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_password_history_length.call(this, retval)
  end
  def put_password_history_length(this : IADsDomain*, lnpasswordhistorylength : Int32) : HRESULT
    @lpVtbl.value.put_password_history_length.call(this, lnpasswordhistorylength)
  end
  def get_password_attributes(this : IADsDomain*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_password_attributes.call(this, retval)
  end
  def put_password_attributes(this : IADsDomain*, lnpasswordattributes : Int32) : HRESULT
    @lpVtbl.value.put_password_attributes.call(this, lnpasswordattributes)
  end
  def get_auto_unlock_interval(this : IADsDomain*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_auto_unlock_interval.call(this, retval)
  end
  def put_auto_unlock_interval(this : IADsDomain*, lnautounlockinterval : Int32) : HRESULT
    @lpVtbl.value.put_auto_unlock_interval.call(this, lnautounlockinterval)
  end
  def get_lockout_observation_interval(this : IADsDomain*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_lockout_observation_interval.call(this, retval)
  end
  def put_lockout_observation_interval(this : IADsDomain*, lnlockoutobservationinterval : Int32) : HRESULT
    @lpVtbl.value.put_lockout_observation_interval.call(this, lnlockoutobservationinterval)
  end
end
struct LibWin32::IADsComputer
  def query_interface(this : IADsComputer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsComputer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsComputer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsComputer*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsComputer*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsComputer*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsComputer*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IADsComputer*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, retval)
  end
  def get_class(this : IADsComputer*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_class.call(this, retval)
  end
  def get_guid(this : IADsComputer*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_guid.call(this, retval)
  end
  def get_a_ds_path(this : IADsComputer*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_a_ds_path.call(this, retval)
  end
  def get_parent(this : IADsComputer*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_parent.call(this, retval)
  end
  def get_schema(this : IADsComputer*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_schema.call(this, retval)
  end
  def get_info(this : IADsComputer*) : HRESULT
    @lpVtbl.value.get_info.call(this)
  end
  def set_info(this : IADsComputer*) : HRESULT
    @lpVtbl.value.set_info.call(this)
  end
  def get(this : IADsComputer*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get.call(this, bstrname, pvprop)
  end
  def put(this : IADsComputer*, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put.call(this, bstrname, vprop)
  end
  def get_ex(this : IADsComputer*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get_ex.call(this, bstrname, pvprop)
  end
  def put_ex(this : IADsComputer*, lncontrolcode : Int32, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put_ex.call(this, lncontrolcode, bstrname, vprop)
  end
  def get_info_ex(this : IADsComputer*, vproperties : VARIANT, lnreserved : Int32) : HRESULT
    @lpVtbl.value.get_info_ex.call(this, vproperties, lnreserved)
  end
  def get_computer_id(this : IADsComputer*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_computer_id.call(this, retval)
  end
  def get_site(this : IADsComputer*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_site.call(this, retval)
  end
  def get_description(this : IADsComputer*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_description.call(this, retval)
  end
  def put_description(this : IADsComputer*, bstrdescription : UInt8*) : HRESULT
    @lpVtbl.value.put_description.call(this, bstrdescription)
  end
  def get_location(this : IADsComputer*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_location.call(this, retval)
  end
  def put_location(this : IADsComputer*, bstrlocation : UInt8*) : HRESULT
    @lpVtbl.value.put_location.call(this, bstrlocation)
  end
  def get_primary_user(this : IADsComputer*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_primary_user.call(this, retval)
  end
  def put_primary_user(this : IADsComputer*, bstrprimaryuser : UInt8*) : HRESULT
    @lpVtbl.value.put_primary_user.call(this, bstrprimaryuser)
  end
  def get_owner(this : IADsComputer*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_owner.call(this, retval)
  end
  def put_owner(this : IADsComputer*, bstrowner : UInt8*) : HRESULT
    @lpVtbl.value.put_owner.call(this, bstrowner)
  end
  def get_division(this : IADsComputer*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_division.call(this, retval)
  end
  def put_division(this : IADsComputer*, bstrdivision : UInt8*) : HRESULT
    @lpVtbl.value.put_division.call(this, bstrdivision)
  end
  def get_department(this : IADsComputer*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_department.call(this, retval)
  end
  def put_department(this : IADsComputer*, bstrdepartment : UInt8*) : HRESULT
    @lpVtbl.value.put_department.call(this, bstrdepartment)
  end
  def get_role(this : IADsComputer*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_role.call(this, retval)
  end
  def put_role(this : IADsComputer*, bstrrole : UInt8*) : HRESULT
    @lpVtbl.value.put_role.call(this, bstrrole)
  end
  def get_operating_system(this : IADsComputer*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_operating_system.call(this, retval)
  end
  def put_operating_system(this : IADsComputer*, bstroperatingsystem : UInt8*) : HRESULT
    @lpVtbl.value.put_operating_system.call(this, bstroperatingsystem)
  end
  def get_operating_system_version(this : IADsComputer*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_operating_system_version.call(this, retval)
  end
  def put_operating_system_version(this : IADsComputer*, bstroperatingsystemversion : UInt8*) : HRESULT
    @lpVtbl.value.put_operating_system_version.call(this, bstroperatingsystemversion)
  end
  def get_model(this : IADsComputer*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_model.call(this, retval)
  end
  def put_model(this : IADsComputer*, bstrmodel : UInt8*) : HRESULT
    @lpVtbl.value.put_model.call(this, bstrmodel)
  end
  def get_processor(this : IADsComputer*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_processor.call(this, retval)
  end
  def put_processor(this : IADsComputer*, bstrprocessor : UInt8*) : HRESULT
    @lpVtbl.value.put_processor.call(this, bstrprocessor)
  end
  def get_processor_count(this : IADsComputer*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_processor_count.call(this, retval)
  end
  def put_processor_count(this : IADsComputer*, bstrprocessorcount : UInt8*) : HRESULT
    @lpVtbl.value.put_processor_count.call(this, bstrprocessorcount)
  end
  def get_memory_size(this : IADsComputer*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_memory_size.call(this, retval)
  end
  def put_memory_size(this : IADsComputer*, bstrmemorysize : UInt8*) : HRESULT
    @lpVtbl.value.put_memory_size.call(this, bstrmemorysize)
  end
  def get_storage_capacity(this : IADsComputer*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_storage_capacity.call(this, retval)
  end
  def put_storage_capacity(this : IADsComputer*, bstrstoragecapacity : UInt8*) : HRESULT
    @lpVtbl.value.put_storage_capacity.call(this, bstrstoragecapacity)
  end
  def get_net_addresses(this : IADsComputer*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_net_addresses.call(this, retval)
  end
  def put_net_addresses(this : IADsComputer*, vnetaddresses : VARIANT) : HRESULT
    @lpVtbl.value.put_net_addresses.call(this, vnetaddresses)
  end
end
struct LibWin32::IADsComputerOperations
  def query_interface(this : IADsComputerOperations*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsComputerOperations*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsComputerOperations*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsComputerOperations*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsComputerOperations*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsComputerOperations*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsComputerOperations*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IADsComputerOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, retval)
  end
  def get_class(this : IADsComputerOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_class.call(this, retval)
  end
  def get_guid(this : IADsComputerOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_guid.call(this, retval)
  end
  def get_a_ds_path(this : IADsComputerOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_a_ds_path.call(this, retval)
  end
  def get_parent(this : IADsComputerOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_parent.call(this, retval)
  end
  def get_schema(this : IADsComputerOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_schema.call(this, retval)
  end
  def get_info(this : IADsComputerOperations*) : HRESULT
    @lpVtbl.value.get_info.call(this)
  end
  def set_info(this : IADsComputerOperations*) : HRESULT
    @lpVtbl.value.set_info.call(this)
  end
  def get(this : IADsComputerOperations*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get.call(this, bstrname, pvprop)
  end
  def put(this : IADsComputerOperations*, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put.call(this, bstrname, vprop)
  end
  def get_ex(this : IADsComputerOperations*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get_ex.call(this, bstrname, pvprop)
  end
  def put_ex(this : IADsComputerOperations*, lncontrolcode : Int32, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put_ex.call(this, lncontrolcode, bstrname, vprop)
  end
  def get_info_ex(this : IADsComputerOperations*, vproperties : VARIANT, lnreserved : Int32) : HRESULT
    @lpVtbl.value.get_info_ex.call(this, vproperties, lnreserved)
  end
  def status(this : IADsComputerOperations*, ppobject : IDispatch*) : HRESULT
    @lpVtbl.value.status.call(this, ppobject)
  end
  def shutdown(this : IADsComputerOperations*, breboot : Int16) : HRESULT
    @lpVtbl.value.shutdown.call(this, breboot)
  end
end
struct LibWin32::IADsGroup
  def query_interface(this : IADsGroup*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsGroup*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsGroup*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsGroup*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsGroup*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsGroup*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsGroup*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IADsGroup*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, retval)
  end
  def get_class(this : IADsGroup*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_class.call(this, retval)
  end
  def get_guid(this : IADsGroup*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_guid.call(this, retval)
  end
  def get_a_ds_path(this : IADsGroup*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_a_ds_path.call(this, retval)
  end
  def get_parent(this : IADsGroup*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_parent.call(this, retval)
  end
  def get_schema(this : IADsGroup*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_schema.call(this, retval)
  end
  def get_info(this : IADsGroup*) : HRESULT
    @lpVtbl.value.get_info.call(this)
  end
  def set_info(this : IADsGroup*) : HRESULT
    @lpVtbl.value.set_info.call(this)
  end
  def get(this : IADsGroup*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get.call(this, bstrname, pvprop)
  end
  def put(this : IADsGroup*, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put.call(this, bstrname, vprop)
  end
  def get_ex(this : IADsGroup*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get_ex.call(this, bstrname, pvprop)
  end
  def put_ex(this : IADsGroup*, lncontrolcode : Int32, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put_ex.call(this, lncontrolcode, bstrname, vprop)
  end
  def get_info_ex(this : IADsGroup*, vproperties : VARIANT, lnreserved : Int32) : HRESULT
    @lpVtbl.value.get_info_ex.call(this, vproperties, lnreserved)
  end
  def get_description(this : IADsGroup*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_description.call(this, retval)
  end
  def put_description(this : IADsGroup*, bstrdescription : UInt8*) : HRESULT
    @lpVtbl.value.put_description.call(this, bstrdescription)
  end
  def members(this : IADsGroup*, ppmembers : IADsMembers*) : HRESULT
    @lpVtbl.value.members.call(this, ppmembers)
  end
  def is_member(this : IADsGroup*, bstrmember : UInt8*, bmember : Int16*) : HRESULT
    @lpVtbl.value.is_member.call(this, bstrmember, bmember)
  end
  def add(this : IADsGroup*, bstrnewitem : UInt8*) : HRESULT
    @lpVtbl.value.add.call(this, bstrnewitem)
  end
  def remove(this : IADsGroup*, bstritemtoberemoved : UInt8*) : HRESULT
    @lpVtbl.value.remove.call(this, bstritemtoberemoved)
  end
end
struct LibWin32::IADsUser
  def query_interface(this : IADsUser*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsUser*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsUser*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsUser*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsUser*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsUser*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsUser*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IADsUser*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, retval)
  end
  def get_class(this : IADsUser*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_class.call(this, retval)
  end
  def get_guid(this : IADsUser*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_guid.call(this, retval)
  end
  def get_a_ds_path(this : IADsUser*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_a_ds_path.call(this, retval)
  end
  def get_parent(this : IADsUser*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_parent.call(this, retval)
  end
  def get_schema(this : IADsUser*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_schema.call(this, retval)
  end
  def get_info(this : IADsUser*) : HRESULT
    @lpVtbl.value.get_info.call(this)
  end
  def set_info(this : IADsUser*) : HRESULT
    @lpVtbl.value.set_info.call(this)
  end
  def get(this : IADsUser*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get.call(this, bstrname, pvprop)
  end
  def put(this : IADsUser*, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put.call(this, bstrname, vprop)
  end
  def get_ex(this : IADsUser*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get_ex.call(this, bstrname, pvprop)
  end
  def put_ex(this : IADsUser*, lncontrolcode : Int32, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put_ex.call(this, lncontrolcode, bstrname, vprop)
  end
  def get_info_ex(this : IADsUser*, vproperties : VARIANT, lnreserved : Int32) : HRESULT
    @lpVtbl.value.get_info_ex.call(this, vproperties, lnreserved)
  end
  def get_bad_login_address(this : IADsUser*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_bad_login_address.call(this, retval)
  end
  def get_bad_login_count(this : IADsUser*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_bad_login_count.call(this, retval)
  end
  def get_last_login(this : IADsUser*, retval : Float64*) : HRESULT
    @lpVtbl.value.get_last_login.call(this, retval)
  end
  def get_last_logoff(this : IADsUser*, retval : Float64*) : HRESULT
    @lpVtbl.value.get_last_logoff.call(this, retval)
  end
  def get_last_failed_login(this : IADsUser*, retval : Float64*) : HRESULT
    @lpVtbl.value.get_last_failed_login.call(this, retval)
  end
  def get_password_last_changed(this : IADsUser*, retval : Float64*) : HRESULT
    @lpVtbl.value.get_password_last_changed.call(this, retval)
  end
  def get_description(this : IADsUser*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_description.call(this, retval)
  end
  def put_description(this : IADsUser*, bstrdescription : UInt8*) : HRESULT
    @lpVtbl.value.put_description.call(this, bstrdescription)
  end
  def get_division(this : IADsUser*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_division.call(this, retval)
  end
  def put_division(this : IADsUser*, bstrdivision : UInt8*) : HRESULT
    @lpVtbl.value.put_division.call(this, bstrdivision)
  end
  def get_department(this : IADsUser*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_department.call(this, retval)
  end
  def put_department(this : IADsUser*, bstrdepartment : UInt8*) : HRESULT
    @lpVtbl.value.put_department.call(this, bstrdepartment)
  end
  def get_employee_id(this : IADsUser*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_employee_id.call(this, retval)
  end
  def put_employee_id(this : IADsUser*, bstremployeeid : UInt8*) : HRESULT
    @lpVtbl.value.put_employee_id.call(this, bstremployeeid)
  end
  def get_full_name(this : IADsUser*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_full_name.call(this, retval)
  end
  def put_full_name(this : IADsUser*, bstrfullname : UInt8*) : HRESULT
    @lpVtbl.value.put_full_name.call(this, bstrfullname)
  end
  def get_first_name(this : IADsUser*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_first_name.call(this, retval)
  end
  def put_first_name(this : IADsUser*, bstrfirstname : UInt8*) : HRESULT
    @lpVtbl.value.put_first_name.call(this, bstrfirstname)
  end
  def get_last_name(this : IADsUser*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_last_name.call(this, retval)
  end
  def put_last_name(this : IADsUser*, bstrlastname : UInt8*) : HRESULT
    @lpVtbl.value.put_last_name.call(this, bstrlastname)
  end
  def get_other_name(this : IADsUser*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_other_name.call(this, retval)
  end
  def put_other_name(this : IADsUser*, bstrothername : UInt8*) : HRESULT
    @lpVtbl.value.put_other_name.call(this, bstrothername)
  end
  def get_name_prefix(this : IADsUser*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_name_prefix.call(this, retval)
  end
  def put_name_prefix(this : IADsUser*, bstrnameprefix : UInt8*) : HRESULT
    @lpVtbl.value.put_name_prefix.call(this, bstrnameprefix)
  end
  def get_name_suffix(this : IADsUser*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_name_suffix.call(this, retval)
  end
  def put_name_suffix(this : IADsUser*, bstrnamesuffix : UInt8*) : HRESULT
    @lpVtbl.value.put_name_suffix.call(this, bstrnamesuffix)
  end
  def get_title(this : IADsUser*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_title.call(this, retval)
  end
  def put_title(this : IADsUser*, bstrtitle : UInt8*) : HRESULT
    @lpVtbl.value.put_title.call(this, bstrtitle)
  end
  def get_manager(this : IADsUser*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_manager.call(this, retval)
  end
  def put_manager(this : IADsUser*, bstrmanager : UInt8*) : HRESULT
    @lpVtbl.value.put_manager.call(this, bstrmanager)
  end
  def get_telephone_home(this : IADsUser*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_telephone_home.call(this, retval)
  end
  def put_telephone_home(this : IADsUser*, vtelephonehome : VARIANT) : HRESULT
    @lpVtbl.value.put_telephone_home.call(this, vtelephonehome)
  end
  def get_telephone_mobile(this : IADsUser*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_telephone_mobile.call(this, retval)
  end
  def put_telephone_mobile(this : IADsUser*, vtelephonemobile : VARIANT) : HRESULT
    @lpVtbl.value.put_telephone_mobile.call(this, vtelephonemobile)
  end
  def get_telephone_number(this : IADsUser*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_telephone_number.call(this, retval)
  end
  def put_telephone_number(this : IADsUser*, vtelephonenumber : VARIANT) : HRESULT
    @lpVtbl.value.put_telephone_number.call(this, vtelephonenumber)
  end
  def get_telephone_pager(this : IADsUser*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_telephone_pager.call(this, retval)
  end
  def put_telephone_pager(this : IADsUser*, vtelephonepager : VARIANT) : HRESULT
    @lpVtbl.value.put_telephone_pager.call(this, vtelephonepager)
  end
  def get_fax_number(this : IADsUser*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_fax_number.call(this, retval)
  end
  def put_fax_number(this : IADsUser*, vfaxnumber : VARIANT) : HRESULT
    @lpVtbl.value.put_fax_number.call(this, vfaxnumber)
  end
  def get_office_locations(this : IADsUser*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_office_locations.call(this, retval)
  end
  def put_office_locations(this : IADsUser*, vofficelocations : VARIANT) : HRESULT
    @lpVtbl.value.put_office_locations.call(this, vofficelocations)
  end
  def get_postal_addresses(this : IADsUser*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_postal_addresses.call(this, retval)
  end
  def put_postal_addresses(this : IADsUser*, vpostaladdresses : VARIANT) : HRESULT
    @lpVtbl.value.put_postal_addresses.call(this, vpostaladdresses)
  end
  def get_postal_codes(this : IADsUser*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_postal_codes.call(this, retval)
  end
  def put_postal_codes(this : IADsUser*, vpostalcodes : VARIANT) : HRESULT
    @lpVtbl.value.put_postal_codes.call(this, vpostalcodes)
  end
  def get_see_also(this : IADsUser*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_see_also.call(this, retval)
  end
  def put_see_also(this : IADsUser*, vseealso : VARIANT) : HRESULT
    @lpVtbl.value.put_see_also.call(this, vseealso)
  end
  def get_account_disabled(this : IADsUser*, retval : Int16*) : HRESULT
    @lpVtbl.value.get_account_disabled.call(this, retval)
  end
  def put_account_disabled(this : IADsUser*, faccountdisabled : Int16) : HRESULT
    @lpVtbl.value.put_account_disabled.call(this, faccountdisabled)
  end
  def get_account_expiration_date(this : IADsUser*, retval : Float64*) : HRESULT
    @lpVtbl.value.get_account_expiration_date.call(this, retval)
  end
  def put_account_expiration_date(this : IADsUser*, daaccountexpirationdate : Float64) : HRESULT
    @lpVtbl.value.put_account_expiration_date.call(this, daaccountexpirationdate)
  end
  def get_grace_logins_allowed(this : IADsUser*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_grace_logins_allowed.call(this, retval)
  end
  def put_grace_logins_allowed(this : IADsUser*, lngraceloginsallowed : Int32) : HRESULT
    @lpVtbl.value.put_grace_logins_allowed.call(this, lngraceloginsallowed)
  end
  def get_grace_logins_remaining(this : IADsUser*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_grace_logins_remaining.call(this, retval)
  end
  def put_grace_logins_remaining(this : IADsUser*, lngraceloginsremaining : Int32) : HRESULT
    @lpVtbl.value.put_grace_logins_remaining.call(this, lngraceloginsremaining)
  end
  def get_is_account_locked(this : IADsUser*, retval : Int16*) : HRESULT
    @lpVtbl.value.get_is_account_locked.call(this, retval)
  end
  def put_is_account_locked(this : IADsUser*, fisaccountlocked : Int16) : HRESULT
    @lpVtbl.value.put_is_account_locked.call(this, fisaccountlocked)
  end
  def get_login_hours(this : IADsUser*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_login_hours.call(this, retval)
  end
  def put_login_hours(this : IADsUser*, vloginhours : VARIANT) : HRESULT
    @lpVtbl.value.put_login_hours.call(this, vloginhours)
  end
  def get_login_workstations(this : IADsUser*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_login_workstations.call(this, retval)
  end
  def put_login_workstations(this : IADsUser*, vloginworkstations : VARIANT) : HRESULT
    @lpVtbl.value.put_login_workstations.call(this, vloginworkstations)
  end
  def get_max_logins(this : IADsUser*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_max_logins.call(this, retval)
  end
  def put_max_logins(this : IADsUser*, lnmaxlogins : Int32) : HRESULT
    @lpVtbl.value.put_max_logins.call(this, lnmaxlogins)
  end
  def get_max_storage(this : IADsUser*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_max_storage.call(this, retval)
  end
  def put_max_storage(this : IADsUser*, lnmaxstorage : Int32) : HRESULT
    @lpVtbl.value.put_max_storage.call(this, lnmaxstorage)
  end
  def get_password_expiration_date(this : IADsUser*, retval : Float64*) : HRESULT
    @lpVtbl.value.get_password_expiration_date.call(this, retval)
  end
  def put_password_expiration_date(this : IADsUser*, dapasswordexpirationdate : Float64) : HRESULT
    @lpVtbl.value.put_password_expiration_date.call(this, dapasswordexpirationdate)
  end
  def get_password_minimum_length(this : IADsUser*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_password_minimum_length.call(this, retval)
  end
  def put_password_minimum_length(this : IADsUser*, lnpasswordminimumlength : Int32) : HRESULT
    @lpVtbl.value.put_password_minimum_length.call(this, lnpasswordminimumlength)
  end
  def get_password_required(this : IADsUser*, retval : Int16*) : HRESULT
    @lpVtbl.value.get_password_required.call(this, retval)
  end
  def put_password_required(this : IADsUser*, fpasswordrequired : Int16) : HRESULT
    @lpVtbl.value.put_password_required.call(this, fpasswordrequired)
  end
  def get_require_unique_password(this : IADsUser*, retval : Int16*) : HRESULT
    @lpVtbl.value.get_require_unique_password.call(this, retval)
  end
  def put_require_unique_password(this : IADsUser*, frequireuniquepassword : Int16) : HRESULT
    @lpVtbl.value.put_require_unique_password.call(this, frequireuniquepassword)
  end
  def get_email_address(this : IADsUser*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_email_address.call(this, retval)
  end
  def put_email_address(this : IADsUser*, bstremailaddress : UInt8*) : HRESULT
    @lpVtbl.value.put_email_address.call(this, bstremailaddress)
  end
  def get_home_directory(this : IADsUser*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_home_directory.call(this, retval)
  end
  def put_home_directory(this : IADsUser*, bstrhomedirectory : UInt8*) : HRESULT
    @lpVtbl.value.put_home_directory.call(this, bstrhomedirectory)
  end
  def get_languages(this : IADsUser*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_languages.call(this, retval)
  end
  def put_languages(this : IADsUser*, vlanguages : VARIANT) : HRESULT
    @lpVtbl.value.put_languages.call(this, vlanguages)
  end
  def get_profile(this : IADsUser*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_profile.call(this, retval)
  end
  def put_profile(this : IADsUser*, bstrprofile : UInt8*) : HRESULT
    @lpVtbl.value.put_profile.call(this, bstrprofile)
  end
  def get_login_script(this : IADsUser*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_login_script.call(this, retval)
  end
  def put_login_script(this : IADsUser*, bstrloginscript : UInt8*) : HRESULT
    @lpVtbl.value.put_login_script.call(this, bstrloginscript)
  end
  def get_picture(this : IADsUser*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_picture.call(this, retval)
  end
  def put_picture(this : IADsUser*, vpicture : VARIANT) : HRESULT
    @lpVtbl.value.put_picture.call(this, vpicture)
  end
  def get_home_page(this : IADsUser*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_home_page.call(this, retval)
  end
  def put_home_page(this : IADsUser*, bstrhomepage : UInt8*) : HRESULT
    @lpVtbl.value.put_home_page.call(this, bstrhomepage)
  end
  def groups(this : IADsUser*, ppgroups : IADsMembers*) : HRESULT
    @lpVtbl.value.groups.call(this, ppgroups)
  end
  def set_password(this : IADsUser*, newpassword : UInt8*) : HRESULT
    @lpVtbl.value.set_password.call(this, newpassword)
  end
  def change_password(this : IADsUser*, bstroldpassword : UInt8*, bstrnewpassword : UInt8*) : HRESULT
    @lpVtbl.value.change_password.call(this, bstroldpassword, bstrnewpassword)
  end
end
struct LibWin32::IADsPrintQueue
  def query_interface(this : IADsPrintQueue*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsPrintQueue*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsPrintQueue*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsPrintQueue*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsPrintQueue*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsPrintQueue*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsPrintQueue*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IADsPrintQueue*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, retval)
  end
  def get_class(this : IADsPrintQueue*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_class.call(this, retval)
  end
  def get_guid(this : IADsPrintQueue*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_guid.call(this, retval)
  end
  def get_a_ds_path(this : IADsPrintQueue*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_a_ds_path.call(this, retval)
  end
  def get_parent(this : IADsPrintQueue*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_parent.call(this, retval)
  end
  def get_schema(this : IADsPrintQueue*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_schema.call(this, retval)
  end
  def get_info(this : IADsPrintQueue*) : HRESULT
    @lpVtbl.value.get_info.call(this)
  end
  def set_info(this : IADsPrintQueue*) : HRESULT
    @lpVtbl.value.set_info.call(this)
  end
  def get(this : IADsPrintQueue*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get.call(this, bstrname, pvprop)
  end
  def put(this : IADsPrintQueue*, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put.call(this, bstrname, vprop)
  end
  def get_ex(this : IADsPrintQueue*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get_ex.call(this, bstrname, pvprop)
  end
  def put_ex(this : IADsPrintQueue*, lncontrolcode : Int32, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put_ex.call(this, lncontrolcode, bstrname, vprop)
  end
  def get_info_ex(this : IADsPrintQueue*, vproperties : VARIANT, lnreserved : Int32) : HRESULT
    @lpVtbl.value.get_info_ex.call(this, vproperties, lnreserved)
  end
  def get_printer_path(this : IADsPrintQueue*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_printer_path.call(this, retval)
  end
  def put_printer_path(this : IADsPrintQueue*, bstrprinterpath : UInt8*) : HRESULT
    @lpVtbl.value.put_printer_path.call(this, bstrprinterpath)
  end
  def get_model(this : IADsPrintQueue*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_model.call(this, retval)
  end
  def put_model(this : IADsPrintQueue*, bstrmodel : UInt8*) : HRESULT
    @lpVtbl.value.put_model.call(this, bstrmodel)
  end
  def get_datatype(this : IADsPrintQueue*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_datatype.call(this, retval)
  end
  def put_datatype(this : IADsPrintQueue*, bstrdatatype : UInt8*) : HRESULT
    @lpVtbl.value.put_datatype.call(this, bstrdatatype)
  end
  def get_print_processor(this : IADsPrintQueue*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_print_processor.call(this, retval)
  end
  def put_print_processor(this : IADsPrintQueue*, bstrprintprocessor : UInt8*) : HRESULT
    @lpVtbl.value.put_print_processor.call(this, bstrprintprocessor)
  end
  def get_description(this : IADsPrintQueue*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_description.call(this, retval)
  end
  def put_description(this : IADsPrintQueue*, bstrdescription : UInt8*) : HRESULT
    @lpVtbl.value.put_description.call(this, bstrdescription)
  end
  def get_location(this : IADsPrintQueue*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_location.call(this, retval)
  end
  def put_location(this : IADsPrintQueue*, bstrlocation : UInt8*) : HRESULT
    @lpVtbl.value.put_location.call(this, bstrlocation)
  end
  def get_start_time(this : IADsPrintQueue*, retval : Float64*) : HRESULT
    @lpVtbl.value.get_start_time.call(this, retval)
  end
  def put_start_time(this : IADsPrintQueue*, dastarttime : Float64) : HRESULT
    @lpVtbl.value.put_start_time.call(this, dastarttime)
  end
  def get_until_time(this : IADsPrintQueue*, retval : Float64*) : HRESULT
    @lpVtbl.value.get_until_time.call(this, retval)
  end
  def put_until_time(this : IADsPrintQueue*, dauntiltime : Float64) : HRESULT
    @lpVtbl.value.put_until_time.call(this, dauntiltime)
  end
  def get_default_job_priority(this : IADsPrintQueue*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_default_job_priority.call(this, retval)
  end
  def put_default_job_priority(this : IADsPrintQueue*, lndefaultjobpriority : Int32) : HRESULT
    @lpVtbl.value.put_default_job_priority.call(this, lndefaultjobpriority)
  end
  def get_priority(this : IADsPrintQueue*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_priority.call(this, retval)
  end
  def put_priority(this : IADsPrintQueue*, lnpriority : Int32) : HRESULT
    @lpVtbl.value.put_priority.call(this, lnpriority)
  end
  def get_banner_page(this : IADsPrintQueue*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_banner_page.call(this, retval)
  end
  def put_banner_page(this : IADsPrintQueue*, bstrbannerpage : UInt8*) : HRESULT
    @lpVtbl.value.put_banner_page.call(this, bstrbannerpage)
  end
  def get_print_devices(this : IADsPrintQueue*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_print_devices.call(this, retval)
  end
  def put_print_devices(this : IADsPrintQueue*, vprintdevices : VARIANT) : HRESULT
    @lpVtbl.value.put_print_devices.call(this, vprintdevices)
  end
  def get_net_addresses(this : IADsPrintQueue*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_net_addresses.call(this, retval)
  end
  def put_net_addresses(this : IADsPrintQueue*, vnetaddresses : VARIANT) : HRESULT
    @lpVtbl.value.put_net_addresses.call(this, vnetaddresses)
  end
end
struct LibWin32::IADsPrintQueueOperations
  def query_interface(this : IADsPrintQueueOperations*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsPrintQueueOperations*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsPrintQueueOperations*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsPrintQueueOperations*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsPrintQueueOperations*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsPrintQueueOperations*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsPrintQueueOperations*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IADsPrintQueueOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, retval)
  end
  def get_class(this : IADsPrintQueueOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_class.call(this, retval)
  end
  def get_guid(this : IADsPrintQueueOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_guid.call(this, retval)
  end
  def get_a_ds_path(this : IADsPrintQueueOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_a_ds_path.call(this, retval)
  end
  def get_parent(this : IADsPrintQueueOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_parent.call(this, retval)
  end
  def get_schema(this : IADsPrintQueueOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_schema.call(this, retval)
  end
  def get_info(this : IADsPrintQueueOperations*) : HRESULT
    @lpVtbl.value.get_info.call(this)
  end
  def set_info(this : IADsPrintQueueOperations*) : HRESULT
    @lpVtbl.value.set_info.call(this)
  end
  def get(this : IADsPrintQueueOperations*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get.call(this, bstrname, pvprop)
  end
  def put(this : IADsPrintQueueOperations*, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put.call(this, bstrname, vprop)
  end
  def get_ex(this : IADsPrintQueueOperations*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get_ex.call(this, bstrname, pvprop)
  end
  def put_ex(this : IADsPrintQueueOperations*, lncontrolcode : Int32, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put_ex.call(this, lncontrolcode, bstrname, vprop)
  end
  def get_info_ex(this : IADsPrintQueueOperations*, vproperties : VARIANT, lnreserved : Int32) : HRESULT
    @lpVtbl.value.get_info_ex.call(this, vproperties, lnreserved)
  end
  def get_status(this : IADsPrintQueueOperations*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_status.call(this, retval)
  end
  def print_jobs(this : IADsPrintQueueOperations*, pobject : IADsCollection*) : HRESULT
    @lpVtbl.value.print_jobs.call(this, pobject)
  end
  def pause(this : IADsPrintQueueOperations*) : HRESULT
    @lpVtbl.value.pause.call(this)
  end
  def resume(this : IADsPrintQueueOperations*) : HRESULT
    @lpVtbl.value.resume.call(this)
  end
  def purge(this : IADsPrintQueueOperations*) : HRESULT
    @lpVtbl.value.purge.call(this)
  end
end
struct LibWin32::IADsPrintJob
  def query_interface(this : IADsPrintJob*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsPrintJob*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsPrintJob*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsPrintJob*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsPrintJob*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsPrintJob*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsPrintJob*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IADsPrintJob*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, retval)
  end
  def get_class(this : IADsPrintJob*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_class.call(this, retval)
  end
  def get_guid(this : IADsPrintJob*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_guid.call(this, retval)
  end
  def get_a_ds_path(this : IADsPrintJob*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_a_ds_path.call(this, retval)
  end
  def get_parent(this : IADsPrintJob*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_parent.call(this, retval)
  end
  def get_schema(this : IADsPrintJob*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_schema.call(this, retval)
  end
  def get_info(this : IADsPrintJob*) : HRESULT
    @lpVtbl.value.get_info.call(this)
  end
  def set_info(this : IADsPrintJob*) : HRESULT
    @lpVtbl.value.set_info.call(this)
  end
  def get(this : IADsPrintJob*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get.call(this, bstrname, pvprop)
  end
  def put(this : IADsPrintJob*, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put.call(this, bstrname, vprop)
  end
  def get_ex(this : IADsPrintJob*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get_ex.call(this, bstrname, pvprop)
  end
  def put_ex(this : IADsPrintJob*, lncontrolcode : Int32, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put_ex.call(this, lncontrolcode, bstrname, vprop)
  end
  def get_info_ex(this : IADsPrintJob*, vproperties : VARIANT, lnreserved : Int32) : HRESULT
    @lpVtbl.value.get_info_ex.call(this, vproperties, lnreserved)
  end
  def get_host_print_queue(this : IADsPrintJob*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_host_print_queue.call(this, retval)
  end
  def get_user(this : IADsPrintJob*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_user.call(this, retval)
  end
  def get_user_path(this : IADsPrintJob*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_user_path.call(this, retval)
  end
  def get_time_submitted(this : IADsPrintJob*, retval : Float64*) : HRESULT
    @lpVtbl.value.get_time_submitted.call(this, retval)
  end
  def get_total_pages(this : IADsPrintJob*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_total_pages.call(this, retval)
  end
  def get_size(this : IADsPrintJob*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_size.call(this, retval)
  end
  def get_description(this : IADsPrintJob*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_description.call(this, retval)
  end
  def put_description(this : IADsPrintJob*, bstrdescription : UInt8*) : HRESULT
    @lpVtbl.value.put_description.call(this, bstrdescription)
  end
  def get_priority(this : IADsPrintJob*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_priority.call(this, retval)
  end
  def put_priority(this : IADsPrintJob*, lnpriority : Int32) : HRESULT
    @lpVtbl.value.put_priority.call(this, lnpriority)
  end
  def get_start_time(this : IADsPrintJob*, retval : Float64*) : HRESULT
    @lpVtbl.value.get_start_time.call(this, retval)
  end
  def put_start_time(this : IADsPrintJob*, dastarttime : Float64) : HRESULT
    @lpVtbl.value.put_start_time.call(this, dastarttime)
  end
  def get_until_time(this : IADsPrintJob*, retval : Float64*) : HRESULT
    @lpVtbl.value.get_until_time.call(this, retval)
  end
  def put_until_time(this : IADsPrintJob*, dauntiltime : Float64) : HRESULT
    @lpVtbl.value.put_until_time.call(this, dauntiltime)
  end
  def get_notify(this : IADsPrintJob*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_notify.call(this, retval)
  end
  def put_notify(this : IADsPrintJob*, bstrnotify : UInt8*) : HRESULT
    @lpVtbl.value.put_notify.call(this, bstrnotify)
  end
  def get_notify_path(this : IADsPrintJob*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_notify_path.call(this, retval)
  end
  def put_notify_path(this : IADsPrintJob*, bstrnotifypath : UInt8*) : HRESULT
    @lpVtbl.value.put_notify_path.call(this, bstrnotifypath)
  end
end
struct LibWin32::IADsPrintJobOperations
  def query_interface(this : IADsPrintJobOperations*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsPrintJobOperations*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsPrintJobOperations*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsPrintJobOperations*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsPrintJobOperations*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsPrintJobOperations*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsPrintJobOperations*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IADsPrintJobOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, retval)
  end
  def get_class(this : IADsPrintJobOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_class.call(this, retval)
  end
  def get_guid(this : IADsPrintJobOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_guid.call(this, retval)
  end
  def get_a_ds_path(this : IADsPrintJobOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_a_ds_path.call(this, retval)
  end
  def get_parent(this : IADsPrintJobOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_parent.call(this, retval)
  end
  def get_schema(this : IADsPrintJobOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_schema.call(this, retval)
  end
  def get_info(this : IADsPrintJobOperations*) : HRESULT
    @lpVtbl.value.get_info.call(this)
  end
  def set_info(this : IADsPrintJobOperations*) : HRESULT
    @lpVtbl.value.set_info.call(this)
  end
  def get(this : IADsPrintJobOperations*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get.call(this, bstrname, pvprop)
  end
  def put(this : IADsPrintJobOperations*, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put.call(this, bstrname, vprop)
  end
  def get_ex(this : IADsPrintJobOperations*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get_ex.call(this, bstrname, pvprop)
  end
  def put_ex(this : IADsPrintJobOperations*, lncontrolcode : Int32, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put_ex.call(this, lncontrolcode, bstrname, vprop)
  end
  def get_info_ex(this : IADsPrintJobOperations*, vproperties : VARIANT, lnreserved : Int32) : HRESULT
    @lpVtbl.value.get_info_ex.call(this, vproperties, lnreserved)
  end
  def get_status(this : IADsPrintJobOperations*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_status.call(this, retval)
  end
  def get_time_elapsed(this : IADsPrintJobOperations*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_time_elapsed.call(this, retval)
  end
  def get_pages_printed(this : IADsPrintJobOperations*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_pages_printed.call(this, retval)
  end
  def get_position(this : IADsPrintJobOperations*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_position.call(this, retval)
  end
  def put_position(this : IADsPrintJobOperations*, lnposition : Int32) : HRESULT
    @lpVtbl.value.put_position.call(this, lnposition)
  end
  def pause(this : IADsPrintJobOperations*) : HRESULT
    @lpVtbl.value.pause.call(this)
  end
  def resume(this : IADsPrintJobOperations*) : HRESULT
    @lpVtbl.value.resume.call(this)
  end
end
struct LibWin32::IADsService
  def query_interface(this : IADsService*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsService*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsService*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsService*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsService*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsService*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsService*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IADsService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, retval)
  end
  def get_class(this : IADsService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_class.call(this, retval)
  end
  def get_guid(this : IADsService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_guid.call(this, retval)
  end
  def get_a_ds_path(this : IADsService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_a_ds_path.call(this, retval)
  end
  def get_parent(this : IADsService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_parent.call(this, retval)
  end
  def get_schema(this : IADsService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_schema.call(this, retval)
  end
  def get_info(this : IADsService*) : HRESULT
    @lpVtbl.value.get_info.call(this)
  end
  def set_info(this : IADsService*) : HRESULT
    @lpVtbl.value.set_info.call(this)
  end
  def get(this : IADsService*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get.call(this, bstrname, pvprop)
  end
  def put(this : IADsService*, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put.call(this, bstrname, vprop)
  end
  def get_ex(this : IADsService*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get_ex.call(this, bstrname, pvprop)
  end
  def put_ex(this : IADsService*, lncontrolcode : Int32, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put_ex.call(this, lncontrolcode, bstrname, vprop)
  end
  def get_info_ex(this : IADsService*, vproperties : VARIANT, lnreserved : Int32) : HRESULT
    @lpVtbl.value.get_info_ex.call(this, vproperties, lnreserved)
  end
  def get_host_computer(this : IADsService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_host_computer.call(this, retval)
  end
  def put_host_computer(this : IADsService*, bstrhostcomputer : UInt8*) : HRESULT
    @lpVtbl.value.put_host_computer.call(this, bstrhostcomputer)
  end
  def get_display_name(this : IADsService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_display_name.call(this, retval)
  end
  def put_display_name(this : IADsService*, bstrdisplayname : UInt8*) : HRESULT
    @lpVtbl.value.put_display_name.call(this, bstrdisplayname)
  end
  def get_version(this : IADsService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_version.call(this, retval)
  end
  def put_version(this : IADsService*, bstrversion : UInt8*) : HRESULT
    @lpVtbl.value.put_version.call(this, bstrversion)
  end
  def get_service_type(this : IADsService*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_service_type.call(this, retval)
  end
  def put_service_type(this : IADsService*, lnservicetype : Int32) : HRESULT
    @lpVtbl.value.put_service_type.call(this, lnservicetype)
  end
  def get_start_type(this : IADsService*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_start_type.call(this, retval)
  end
  def put_start_type(this : IADsService*, lnstarttype : Int32) : HRESULT
    @lpVtbl.value.put_start_type.call(this, lnstarttype)
  end
  def get_path(this : IADsService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_path.call(this, retval)
  end
  def put_path(this : IADsService*, bstrpath : UInt8*) : HRESULT
    @lpVtbl.value.put_path.call(this, bstrpath)
  end
  def get_startup_parameters(this : IADsService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_startup_parameters.call(this, retval)
  end
  def put_startup_parameters(this : IADsService*, bstrstartupparameters : UInt8*) : HRESULT
    @lpVtbl.value.put_startup_parameters.call(this, bstrstartupparameters)
  end
  def get_error_control(this : IADsService*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_error_control.call(this, retval)
  end
  def put_error_control(this : IADsService*, lnerrorcontrol : Int32) : HRESULT
    @lpVtbl.value.put_error_control.call(this, lnerrorcontrol)
  end
  def get_load_order_group(this : IADsService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_load_order_group.call(this, retval)
  end
  def put_load_order_group(this : IADsService*, bstrloadordergroup : UInt8*) : HRESULT
    @lpVtbl.value.put_load_order_group.call(this, bstrloadordergroup)
  end
  def get_service_account_name(this : IADsService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_service_account_name.call(this, retval)
  end
  def put_service_account_name(this : IADsService*, bstrserviceaccountname : UInt8*) : HRESULT
    @lpVtbl.value.put_service_account_name.call(this, bstrserviceaccountname)
  end
  def get_service_account_path(this : IADsService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_service_account_path.call(this, retval)
  end
  def put_service_account_path(this : IADsService*, bstrserviceaccountpath : UInt8*) : HRESULT
    @lpVtbl.value.put_service_account_path.call(this, bstrserviceaccountpath)
  end
  def get_dependencies(this : IADsService*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_dependencies.call(this, retval)
  end
  def put_dependencies(this : IADsService*, vdependencies : VARIANT) : HRESULT
    @lpVtbl.value.put_dependencies.call(this, vdependencies)
  end
end
struct LibWin32::IADsServiceOperations
  def query_interface(this : IADsServiceOperations*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsServiceOperations*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsServiceOperations*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsServiceOperations*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsServiceOperations*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsServiceOperations*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsServiceOperations*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IADsServiceOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, retval)
  end
  def get_class(this : IADsServiceOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_class.call(this, retval)
  end
  def get_guid(this : IADsServiceOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_guid.call(this, retval)
  end
  def get_a_ds_path(this : IADsServiceOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_a_ds_path.call(this, retval)
  end
  def get_parent(this : IADsServiceOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_parent.call(this, retval)
  end
  def get_schema(this : IADsServiceOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_schema.call(this, retval)
  end
  def get_info(this : IADsServiceOperations*) : HRESULT
    @lpVtbl.value.get_info.call(this)
  end
  def set_info(this : IADsServiceOperations*) : HRESULT
    @lpVtbl.value.set_info.call(this)
  end
  def get(this : IADsServiceOperations*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get.call(this, bstrname, pvprop)
  end
  def put(this : IADsServiceOperations*, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put.call(this, bstrname, vprop)
  end
  def get_ex(this : IADsServiceOperations*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get_ex.call(this, bstrname, pvprop)
  end
  def put_ex(this : IADsServiceOperations*, lncontrolcode : Int32, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put_ex.call(this, lncontrolcode, bstrname, vprop)
  end
  def get_info_ex(this : IADsServiceOperations*, vproperties : VARIANT, lnreserved : Int32) : HRESULT
    @lpVtbl.value.get_info_ex.call(this, vproperties, lnreserved)
  end
  def get_status(this : IADsServiceOperations*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_status.call(this, retval)
  end
  def start(this : IADsServiceOperations*) : HRESULT
    @lpVtbl.value.start.call(this)
  end
  def stop(this : IADsServiceOperations*) : HRESULT
    @lpVtbl.value.stop.call(this)
  end
  def pause(this : IADsServiceOperations*) : HRESULT
    @lpVtbl.value.pause.call(this)
  end
  def continue(this : IADsServiceOperations*) : HRESULT
    @lpVtbl.value.continue.call(this)
  end
  def set_password(this : IADsServiceOperations*, bstrnewpassword : UInt8*) : HRESULT
    @lpVtbl.value.set_password.call(this, bstrnewpassword)
  end
end
struct LibWin32::IADsFileService
  def query_interface(this : IADsFileService*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsFileService*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsFileService*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsFileService*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsFileService*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsFileService*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsFileService*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IADsFileService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, retval)
  end
  def get_class(this : IADsFileService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_class.call(this, retval)
  end
  def get_guid(this : IADsFileService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_guid.call(this, retval)
  end
  def get_a_ds_path(this : IADsFileService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_a_ds_path.call(this, retval)
  end
  def get_parent(this : IADsFileService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_parent.call(this, retval)
  end
  def get_schema(this : IADsFileService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_schema.call(this, retval)
  end
  def get_info(this : IADsFileService*) : HRESULT
    @lpVtbl.value.get_info.call(this)
  end
  def set_info(this : IADsFileService*) : HRESULT
    @lpVtbl.value.set_info.call(this)
  end
  def get(this : IADsFileService*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get.call(this, bstrname, pvprop)
  end
  def put(this : IADsFileService*, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put.call(this, bstrname, vprop)
  end
  def get_ex(this : IADsFileService*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get_ex.call(this, bstrname, pvprop)
  end
  def put_ex(this : IADsFileService*, lncontrolcode : Int32, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put_ex.call(this, lncontrolcode, bstrname, vprop)
  end
  def get_info_ex(this : IADsFileService*, vproperties : VARIANT, lnreserved : Int32) : HRESULT
    @lpVtbl.value.get_info_ex.call(this, vproperties, lnreserved)
  end
  def get_host_computer(this : IADsFileService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_host_computer.call(this, retval)
  end
  def put_host_computer(this : IADsFileService*, bstrhostcomputer : UInt8*) : HRESULT
    @lpVtbl.value.put_host_computer.call(this, bstrhostcomputer)
  end
  def get_display_name(this : IADsFileService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_display_name.call(this, retval)
  end
  def put_display_name(this : IADsFileService*, bstrdisplayname : UInt8*) : HRESULT
    @lpVtbl.value.put_display_name.call(this, bstrdisplayname)
  end
  def get_version(this : IADsFileService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_version.call(this, retval)
  end
  def put_version(this : IADsFileService*, bstrversion : UInt8*) : HRESULT
    @lpVtbl.value.put_version.call(this, bstrversion)
  end
  def get_service_type(this : IADsFileService*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_service_type.call(this, retval)
  end
  def put_service_type(this : IADsFileService*, lnservicetype : Int32) : HRESULT
    @lpVtbl.value.put_service_type.call(this, lnservicetype)
  end
  def get_start_type(this : IADsFileService*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_start_type.call(this, retval)
  end
  def put_start_type(this : IADsFileService*, lnstarttype : Int32) : HRESULT
    @lpVtbl.value.put_start_type.call(this, lnstarttype)
  end
  def get_path(this : IADsFileService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_path.call(this, retval)
  end
  def put_path(this : IADsFileService*, bstrpath : UInt8*) : HRESULT
    @lpVtbl.value.put_path.call(this, bstrpath)
  end
  def get_startup_parameters(this : IADsFileService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_startup_parameters.call(this, retval)
  end
  def put_startup_parameters(this : IADsFileService*, bstrstartupparameters : UInt8*) : HRESULT
    @lpVtbl.value.put_startup_parameters.call(this, bstrstartupparameters)
  end
  def get_error_control(this : IADsFileService*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_error_control.call(this, retval)
  end
  def put_error_control(this : IADsFileService*, lnerrorcontrol : Int32) : HRESULT
    @lpVtbl.value.put_error_control.call(this, lnerrorcontrol)
  end
  def get_load_order_group(this : IADsFileService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_load_order_group.call(this, retval)
  end
  def put_load_order_group(this : IADsFileService*, bstrloadordergroup : UInt8*) : HRESULT
    @lpVtbl.value.put_load_order_group.call(this, bstrloadordergroup)
  end
  def get_service_account_name(this : IADsFileService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_service_account_name.call(this, retval)
  end
  def put_service_account_name(this : IADsFileService*, bstrserviceaccountname : UInt8*) : HRESULT
    @lpVtbl.value.put_service_account_name.call(this, bstrserviceaccountname)
  end
  def get_service_account_path(this : IADsFileService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_service_account_path.call(this, retval)
  end
  def put_service_account_path(this : IADsFileService*, bstrserviceaccountpath : UInt8*) : HRESULT
    @lpVtbl.value.put_service_account_path.call(this, bstrserviceaccountpath)
  end
  def get_dependencies(this : IADsFileService*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_dependencies.call(this, retval)
  end
  def put_dependencies(this : IADsFileService*, vdependencies : VARIANT) : HRESULT
    @lpVtbl.value.put_dependencies.call(this, vdependencies)
  end
  def get_description(this : IADsFileService*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_description.call(this, retval)
  end
  def put_description(this : IADsFileService*, bstrdescription : UInt8*) : HRESULT
    @lpVtbl.value.put_description.call(this, bstrdescription)
  end
  def get_max_user_count(this : IADsFileService*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_max_user_count.call(this, retval)
  end
  def put_max_user_count(this : IADsFileService*, lnmaxusercount : Int32) : HRESULT
    @lpVtbl.value.put_max_user_count.call(this, lnmaxusercount)
  end
end
struct LibWin32::IADsFileServiceOperations
  def query_interface(this : IADsFileServiceOperations*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsFileServiceOperations*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsFileServiceOperations*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsFileServiceOperations*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsFileServiceOperations*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsFileServiceOperations*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsFileServiceOperations*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IADsFileServiceOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, retval)
  end
  def get_class(this : IADsFileServiceOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_class.call(this, retval)
  end
  def get_guid(this : IADsFileServiceOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_guid.call(this, retval)
  end
  def get_a_ds_path(this : IADsFileServiceOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_a_ds_path.call(this, retval)
  end
  def get_parent(this : IADsFileServiceOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_parent.call(this, retval)
  end
  def get_schema(this : IADsFileServiceOperations*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_schema.call(this, retval)
  end
  def get_info(this : IADsFileServiceOperations*) : HRESULT
    @lpVtbl.value.get_info.call(this)
  end
  def set_info(this : IADsFileServiceOperations*) : HRESULT
    @lpVtbl.value.set_info.call(this)
  end
  def get(this : IADsFileServiceOperations*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get.call(this, bstrname, pvprop)
  end
  def put(this : IADsFileServiceOperations*, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put.call(this, bstrname, vprop)
  end
  def get_ex(this : IADsFileServiceOperations*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get_ex.call(this, bstrname, pvprop)
  end
  def put_ex(this : IADsFileServiceOperations*, lncontrolcode : Int32, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put_ex.call(this, lncontrolcode, bstrname, vprop)
  end
  def get_info_ex(this : IADsFileServiceOperations*, vproperties : VARIANT, lnreserved : Int32) : HRESULT
    @lpVtbl.value.get_info_ex.call(this, vproperties, lnreserved)
  end
  def get_status(this : IADsFileServiceOperations*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_status.call(this, retval)
  end
  def start(this : IADsFileServiceOperations*) : HRESULT
    @lpVtbl.value.start.call(this)
  end
  def stop(this : IADsFileServiceOperations*) : HRESULT
    @lpVtbl.value.stop.call(this)
  end
  def pause(this : IADsFileServiceOperations*) : HRESULT
    @lpVtbl.value.pause.call(this)
  end
  def continue(this : IADsFileServiceOperations*) : HRESULT
    @lpVtbl.value.continue.call(this)
  end
  def set_password(this : IADsFileServiceOperations*, bstrnewpassword : UInt8*) : HRESULT
    @lpVtbl.value.set_password.call(this, bstrnewpassword)
  end
  def sessions(this : IADsFileServiceOperations*, ppsessions : IADsCollection*) : HRESULT
    @lpVtbl.value.sessions.call(this, ppsessions)
  end
  def resources(this : IADsFileServiceOperations*, ppresources : IADsCollection*) : HRESULT
    @lpVtbl.value.resources.call(this, ppresources)
  end
end
struct LibWin32::IADsFileShare
  def query_interface(this : IADsFileShare*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsFileShare*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsFileShare*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsFileShare*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsFileShare*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsFileShare*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsFileShare*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IADsFileShare*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, retval)
  end
  def get_class(this : IADsFileShare*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_class.call(this, retval)
  end
  def get_guid(this : IADsFileShare*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_guid.call(this, retval)
  end
  def get_a_ds_path(this : IADsFileShare*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_a_ds_path.call(this, retval)
  end
  def get_parent(this : IADsFileShare*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_parent.call(this, retval)
  end
  def get_schema(this : IADsFileShare*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_schema.call(this, retval)
  end
  def get_info(this : IADsFileShare*) : HRESULT
    @lpVtbl.value.get_info.call(this)
  end
  def set_info(this : IADsFileShare*) : HRESULT
    @lpVtbl.value.set_info.call(this)
  end
  def get(this : IADsFileShare*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get.call(this, bstrname, pvprop)
  end
  def put(this : IADsFileShare*, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put.call(this, bstrname, vprop)
  end
  def get_ex(this : IADsFileShare*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get_ex.call(this, bstrname, pvprop)
  end
  def put_ex(this : IADsFileShare*, lncontrolcode : Int32, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put_ex.call(this, lncontrolcode, bstrname, vprop)
  end
  def get_info_ex(this : IADsFileShare*, vproperties : VARIANT, lnreserved : Int32) : HRESULT
    @lpVtbl.value.get_info_ex.call(this, vproperties, lnreserved)
  end
  def get_current_user_count(this : IADsFileShare*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_current_user_count.call(this, retval)
  end
  def get_description(this : IADsFileShare*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_description.call(this, retval)
  end
  def put_description(this : IADsFileShare*, bstrdescription : UInt8*) : HRESULT
    @lpVtbl.value.put_description.call(this, bstrdescription)
  end
  def get_host_computer(this : IADsFileShare*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_host_computer.call(this, retval)
  end
  def put_host_computer(this : IADsFileShare*, bstrhostcomputer : UInt8*) : HRESULT
    @lpVtbl.value.put_host_computer.call(this, bstrhostcomputer)
  end
  def get_path(this : IADsFileShare*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_path.call(this, retval)
  end
  def put_path(this : IADsFileShare*, bstrpath : UInt8*) : HRESULT
    @lpVtbl.value.put_path.call(this, bstrpath)
  end
  def get_max_user_count(this : IADsFileShare*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_max_user_count.call(this, retval)
  end
  def put_max_user_count(this : IADsFileShare*, lnmaxusercount : Int32) : HRESULT
    @lpVtbl.value.put_max_user_count.call(this, lnmaxusercount)
  end
end
struct LibWin32::IADsSession
  def query_interface(this : IADsSession*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsSession*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsSession*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsSession*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsSession*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsSession*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsSession*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IADsSession*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, retval)
  end
  def get_class(this : IADsSession*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_class.call(this, retval)
  end
  def get_guid(this : IADsSession*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_guid.call(this, retval)
  end
  def get_a_ds_path(this : IADsSession*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_a_ds_path.call(this, retval)
  end
  def get_parent(this : IADsSession*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_parent.call(this, retval)
  end
  def get_schema(this : IADsSession*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_schema.call(this, retval)
  end
  def get_info(this : IADsSession*) : HRESULT
    @lpVtbl.value.get_info.call(this)
  end
  def set_info(this : IADsSession*) : HRESULT
    @lpVtbl.value.set_info.call(this)
  end
  def get(this : IADsSession*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get.call(this, bstrname, pvprop)
  end
  def put(this : IADsSession*, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put.call(this, bstrname, vprop)
  end
  def get_ex(this : IADsSession*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get_ex.call(this, bstrname, pvprop)
  end
  def put_ex(this : IADsSession*, lncontrolcode : Int32, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put_ex.call(this, lncontrolcode, bstrname, vprop)
  end
  def get_info_ex(this : IADsSession*, vproperties : VARIANT, lnreserved : Int32) : HRESULT
    @lpVtbl.value.get_info_ex.call(this, vproperties, lnreserved)
  end
  def get_user(this : IADsSession*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_user.call(this, retval)
  end
  def get_user_path(this : IADsSession*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_user_path.call(this, retval)
  end
  def get_computer(this : IADsSession*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_computer.call(this, retval)
  end
  def get_computer_path(this : IADsSession*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_computer_path.call(this, retval)
  end
  def get_connect_time(this : IADsSession*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_connect_time.call(this, retval)
  end
  def get_idle_time(this : IADsSession*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_idle_time.call(this, retval)
  end
end
struct LibWin32::IADsResource
  def query_interface(this : IADsResource*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsResource*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsResource*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsResource*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsResource*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsResource*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsResource*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IADsResource*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, retval)
  end
  def get_class(this : IADsResource*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_class.call(this, retval)
  end
  def get_guid(this : IADsResource*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_guid.call(this, retval)
  end
  def get_a_ds_path(this : IADsResource*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_a_ds_path.call(this, retval)
  end
  def get_parent(this : IADsResource*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_parent.call(this, retval)
  end
  def get_schema(this : IADsResource*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_schema.call(this, retval)
  end
  def get_info(this : IADsResource*) : HRESULT
    @lpVtbl.value.get_info.call(this)
  end
  def set_info(this : IADsResource*) : HRESULT
    @lpVtbl.value.set_info.call(this)
  end
  def get(this : IADsResource*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get.call(this, bstrname, pvprop)
  end
  def put(this : IADsResource*, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put.call(this, bstrname, vprop)
  end
  def get_ex(this : IADsResource*, bstrname : UInt8*, pvprop : VARIANT*) : HRESULT
    @lpVtbl.value.get_ex.call(this, bstrname, pvprop)
  end
  def put_ex(this : IADsResource*, lncontrolcode : Int32, bstrname : UInt8*, vprop : VARIANT) : HRESULT
    @lpVtbl.value.put_ex.call(this, lncontrolcode, bstrname, vprop)
  end
  def get_info_ex(this : IADsResource*, vproperties : VARIANT, lnreserved : Int32) : HRESULT
    @lpVtbl.value.get_info_ex.call(this, vproperties, lnreserved)
  end
  def get_user(this : IADsResource*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_user.call(this, retval)
  end
  def get_user_path(this : IADsResource*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_user_path.call(this, retval)
  end
  def get_path(this : IADsResource*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_path.call(this, retval)
  end
  def get_lock_count(this : IADsResource*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_lock_count.call(this, retval)
  end
end
struct LibWin32::IADsOpenDSObject
  def query_interface(this : IADsOpenDSObject*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsOpenDSObject*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsOpenDSObject*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsOpenDSObject*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsOpenDSObject*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsOpenDSObject*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsOpenDSObject*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def open_ds_object(this : IADsOpenDSObject*, lpszdnname : UInt8*, lpszusername : UInt8*, lpszpassword : UInt8*, lnreserved : Int32, ppoledsobj : IDispatch*) : HRESULT
    @lpVtbl.value.open_ds_object.call(this, lpszdnname, lpszusername, lpszpassword, lnreserved, ppoledsobj)
  end
end
struct LibWin32::IDirectoryObject
  def query_interface(this : IDirectoryObject*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDirectoryObject*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDirectoryObject*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_object_information(this : IDirectoryObject*, ppobjinfo : ADS_OBJECT_INFO**) : HRESULT
    @lpVtbl.value.get_object_information.call(this, ppobjinfo)
  end
  def get_object_attributes(this : IDirectoryObject*, pattributenames : LibC::LPWSTR*, dwnumberattributes : UInt32, ppattributeentries : ADS_ATTR_INFO**, pdwnumattributesreturned : UInt32*) : HRESULT
    @lpVtbl.value.get_object_attributes.call(this, pattributenames, dwnumberattributes, ppattributeentries, pdwnumattributesreturned)
  end
  def set_object_attributes(this : IDirectoryObject*, pattributeentries : ADS_ATTR_INFO*, dwnumattributes : UInt32, pdwnumattributesmodified : UInt32*) : HRESULT
    @lpVtbl.value.set_object_attributes.call(this, pattributeentries, dwnumattributes, pdwnumattributesmodified)
  end
  def create_ds_object(this : IDirectoryObject*, pszrdnname : LibC::LPWSTR, pattributeentries : ADS_ATTR_INFO*, dwnumattributes : UInt32, ppobject : IDispatch*) : HRESULT
    @lpVtbl.value.create_ds_object.call(this, pszrdnname, pattributeentries, dwnumattributes, ppobject)
  end
  def delete_ds_object(this : IDirectoryObject*, pszrdnname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.delete_ds_object.call(this, pszrdnname)
  end
end
struct LibWin32::IDirectorySearch
  def query_interface(this : IDirectorySearch*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDirectorySearch*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDirectorySearch*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_search_preference(this : IDirectorySearch*, psearchprefs : Ads_searchpref_info*, dwnumprefs : UInt32) : HRESULT
    @lpVtbl.value.set_search_preference.call(this, psearchprefs, dwnumprefs)
  end
  def execute_search(this : IDirectorySearch*, pszsearchfilter : LibC::LPWSTR, pattributenames : LibC::LPWSTR*, dwnumberattributes : UInt32, phsearchresult : LibC::IntPtrT*) : HRESULT
    @lpVtbl.value.execute_search.call(this, pszsearchfilter, pattributenames, dwnumberattributes, phsearchresult)
  end
  def abandon_search(this : IDirectorySearch*, phsearchresult : LibC::IntPtrT) : HRESULT
    @lpVtbl.value.abandon_search.call(this, phsearchresult)
  end
  def get_first_row(this : IDirectorySearch*, hsearchresult : LibC::IntPtrT) : HRESULT
    @lpVtbl.value.get_first_row.call(this, hsearchresult)
  end
  def get_next_row(this : IDirectorySearch*, hsearchresult : LibC::IntPtrT) : HRESULT
    @lpVtbl.value.get_next_row.call(this, hsearchresult)
  end
  def get_previous_row(this : IDirectorySearch*, hsearchresult : LibC::IntPtrT) : HRESULT
    @lpVtbl.value.get_previous_row.call(this, hsearchresult)
  end
  def get_next_column_name(this : IDirectorySearch*, hsearchhandle : LibC::IntPtrT, ppszcolumnname : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_next_column_name.call(this, hsearchhandle, ppszcolumnname)
  end
  def get_column(this : IDirectorySearch*, hsearchresult : LibC::IntPtrT, szcolumnname : LibC::LPWSTR, psearchcolumn : Ads_search_column*) : HRESULT
    @lpVtbl.value.get_column.call(this, hsearchresult, szcolumnname, psearchcolumn)
  end
  def free_column(this : IDirectorySearch*, psearchcolumn : Ads_search_column*) : HRESULT
    @lpVtbl.value.free_column.call(this, psearchcolumn)
  end
  def close_search_handle(this : IDirectorySearch*, hsearchresult : LibC::IntPtrT) : HRESULT
    @lpVtbl.value.close_search_handle.call(this, hsearchresult)
  end
end
struct LibWin32::IDirectorySchemaMgmt
  def query_interface(this : IDirectorySchemaMgmt*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDirectorySchemaMgmt*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDirectorySchemaMgmt*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def enum_attributes(this : IDirectorySchemaMgmt*, ppszattrnames : LibC::LPWSTR*, dwnumattributes : UInt32, ppattrdefinition : ADS_ATTR_DEF**, pdwnumattributes : UInt32*) : HRESULT
    @lpVtbl.value.enum_attributes.call(this, ppszattrnames, dwnumattributes, ppattrdefinition, pdwnumattributes)
  end
  def create_attribute_definition(this : IDirectorySchemaMgmt*, pszattributename : LibC::LPWSTR, pattributedefinition : ADS_ATTR_DEF*) : HRESULT
    @lpVtbl.value.create_attribute_definition.call(this, pszattributename, pattributedefinition)
  end
  def write_attribute_definition(this : IDirectorySchemaMgmt*, pszattributename : LibC::LPWSTR, pattributedefinition : ADS_ATTR_DEF*) : HRESULT
    @lpVtbl.value.write_attribute_definition.call(this, pszattributename, pattributedefinition)
  end
  def delete_attribute_definition(this : IDirectorySchemaMgmt*, pszattributename : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.delete_attribute_definition.call(this, pszattributename)
  end
  def enum_classes(this : IDirectorySchemaMgmt*, ppszclassnames : LibC::LPWSTR*, dwnumclasses : UInt32, ppclassdefinition : ADS_CLASS_DEF**, pdwnumclasses : UInt32*) : HRESULT
    @lpVtbl.value.enum_classes.call(this, ppszclassnames, dwnumclasses, ppclassdefinition, pdwnumclasses)
  end
  def write_class_definition(this : IDirectorySchemaMgmt*, pszclassname : LibC::LPWSTR, pclassdefinition : ADS_CLASS_DEF*) : HRESULT
    @lpVtbl.value.write_class_definition.call(this, pszclassname, pclassdefinition)
  end
  def create_class_definition(this : IDirectorySchemaMgmt*, pszclassname : LibC::LPWSTR, pclassdefinition : ADS_CLASS_DEF*) : HRESULT
    @lpVtbl.value.create_class_definition.call(this, pszclassname, pclassdefinition)
  end
  def delete_class_definition(this : IDirectorySchemaMgmt*, pszclassname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.delete_class_definition.call(this, pszclassname)
  end
end
struct LibWin32::IADsAggregatee
  def query_interface(this : IADsAggregatee*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsAggregatee*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsAggregatee*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def connect_as_aggregatee(this : IADsAggregatee*, pouterunknown : IUnknown) : HRESULT
    @lpVtbl.value.connect_as_aggregatee.call(this, pouterunknown)
  end
  def disconnect_as_aggregatee(this : IADsAggregatee*) : HRESULT
    @lpVtbl.value.disconnect_as_aggregatee.call(this)
  end
  def relinquish_interface(this : IADsAggregatee*, riid : Guid*) : HRESULT
    @lpVtbl.value.relinquish_interface.call(this, riid)
  end
  def restore_interface(this : IADsAggregatee*, riid : Guid*) : HRESULT
    @lpVtbl.value.restore_interface.call(this, riid)
  end
end
struct LibWin32::IADsAggregator
  def query_interface(this : IADsAggregator*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsAggregator*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsAggregator*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def connect_as_aggregator(this : IADsAggregator*, paggregatee : IUnknown) : HRESULT
    @lpVtbl.value.connect_as_aggregator.call(this, paggregatee)
  end
  def disconnect_as_aggregator(this : IADsAggregator*) : HRESULT
    @lpVtbl.value.disconnect_as_aggregator.call(this)
  end
end
struct LibWin32::IADsAccessControlEntry
  def query_interface(this : IADsAccessControlEntry*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsAccessControlEntry*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsAccessControlEntry*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsAccessControlEntry*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsAccessControlEntry*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsAccessControlEntry*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsAccessControlEntry*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_access_mask(this : IADsAccessControlEntry*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_access_mask.call(this, retval)
  end
  def put_access_mask(this : IADsAccessControlEntry*, lnaccessmask : Int32) : HRESULT
    @lpVtbl.value.put_access_mask.call(this, lnaccessmask)
  end
  def get_ace_type(this : IADsAccessControlEntry*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_ace_type.call(this, retval)
  end
  def put_ace_type(this : IADsAccessControlEntry*, lnacetype : Int32) : HRESULT
    @lpVtbl.value.put_ace_type.call(this, lnacetype)
  end
  def get_ace_flags(this : IADsAccessControlEntry*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_ace_flags.call(this, retval)
  end
  def put_ace_flags(this : IADsAccessControlEntry*, lnaceflags : Int32) : HRESULT
    @lpVtbl.value.put_ace_flags.call(this, lnaceflags)
  end
  def get_flags(this : IADsAccessControlEntry*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_flags.call(this, retval)
  end
  def put_flags(this : IADsAccessControlEntry*, lnflags : Int32) : HRESULT
    @lpVtbl.value.put_flags.call(this, lnflags)
  end
  def get_object_type(this : IADsAccessControlEntry*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_object_type.call(this, retval)
  end
  def put_object_type(this : IADsAccessControlEntry*, bstrobjecttype : UInt8*) : HRESULT
    @lpVtbl.value.put_object_type.call(this, bstrobjecttype)
  end
  def get_inherited_object_type(this : IADsAccessControlEntry*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_inherited_object_type.call(this, retval)
  end
  def put_inherited_object_type(this : IADsAccessControlEntry*, bstrinheritedobjecttype : UInt8*) : HRESULT
    @lpVtbl.value.put_inherited_object_type.call(this, bstrinheritedobjecttype)
  end
  def get_trustee(this : IADsAccessControlEntry*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_trustee.call(this, retval)
  end
  def put_trustee(this : IADsAccessControlEntry*, bstrtrustee : UInt8*) : HRESULT
    @lpVtbl.value.put_trustee.call(this, bstrtrustee)
  end
end
struct LibWin32::IADsAccessControlList
  def query_interface(this : IADsAccessControlList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsAccessControlList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsAccessControlList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsAccessControlList*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsAccessControlList*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsAccessControlList*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsAccessControlList*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_acl_revision(this : IADsAccessControlList*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_acl_revision.call(this, retval)
  end
  def put_acl_revision(this : IADsAccessControlList*, lnaclrevision : Int32) : HRESULT
    @lpVtbl.value.put_acl_revision.call(this, lnaclrevision)
  end
  def get_ace_count(this : IADsAccessControlList*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_ace_count.call(this, retval)
  end
  def put_ace_count(this : IADsAccessControlList*, lnacecount : Int32) : HRESULT
    @lpVtbl.value.put_ace_count.call(this, lnacecount)
  end
  def add_ace(this : IADsAccessControlList*, paccesscontrolentry : IDispatch) : HRESULT
    @lpVtbl.value.add_ace.call(this, paccesscontrolentry)
  end
  def remove_ace(this : IADsAccessControlList*, paccesscontrolentry : IDispatch) : HRESULT
    @lpVtbl.value.remove_ace.call(this, paccesscontrolentry)
  end
  def copy_access_list(this : IADsAccessControlList*, ppaccesscontrollist : IDispatch*) : HRESULT
    @lpVtbl.value.copy_access_list.call(this, ppaccesscontrollist)
  end
  def get__new_enum(this : IADsAccessControlList*, retval : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.call(this, retval)
  end
end
struct LibWin32::IADsSecurityDescriptor
  def query_interface(this : IADsSecurityDescriptor*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsSecurityDescriptor*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsSecurityDescriptor*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsSecurityDescriptor*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsSecurityDescriptor*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsSecurityDescriptor*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsSecurityDescriptor*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_revision(this : IADsSecurityDescriptor*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_revision.call(this, retval)
  end
  def put_revision(this : IADsSecurityDescriptor*, lnrevision : Int32) : HRESULT
    @lpVtbl.value.put_revision.call(this, lnrevision)
  end
  def get_control(this : IADsSecurityDescriptor*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_control.call(this, retval)
  end
  def put_control(this : IADsSecurityDescriptor*, lncontrol : Int32) : HRESULT
    @lpVtbl.value.put_control.call(this, lncontrol)
  end
  def get_owner(this : IADsSecurityDescriptor*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_owner.call(this, retval)
  end
  def put_owner(this : IADsSecurityDescriptor*, bstrowner : UInt8*) : HRESULT
    @lpVtbl.value.put_owner.call(this, bstrowner)
  end
  def get_owner_defaulted(this : IADsSecurityDescriptor*, retval : Int16*) : HRESULT
    @lpVtbl.value.get_owner_defaulted.call(this, retval)
  end
  def put_owner_defaulted(this : IADsSecurityDescriptor*, fownerdefaulted : Int16) : HRESULT
    @lpVtbl.value.put_owner_defaulted.call(this, fownerdefaulted)
  end
  def get_group(this : IADsSecurityDescriptor*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_group.call(this, retval)
  end
  def put_group(this : IADsSecurityDescriptor*, bstrgroup : UInt8*) : HRESULT
    @lpVtbl.value.put_group.call(this, bstrgroup)
  end
  def get_group_defaulted(this : IADsSecurityDescriptor*, retval : Int16*) : HRESULT
    @lpVtbl.value.get_group_defaulted.call(this, retval)
  end
  def put_group_defaulted(this : IADsSecurityDescriptor*, fgroupdefaulted : Int16) : HRESULT
    @lpVtbl.value.put_group_defaulted.call(this, fgroupdefaulted)
  end
  def get_discretionary_acl(this : IADsSecurityDescriptor*, retval : IDispatch*) : HRESULT
    @lpVtbl.value.get_discretionary_acl.call(this, retval)
  end
  def put_discretionary_acl(this : IADsSecurityDescriptor*, pdiscretionaryacl : IDispatch) : HRESULT
    @lpVtbl.value.put_discretionary_acl.call(this, pdiscretionaryacl)
  end
  def get_dacl_defaulted(this : IADsSecurityDescriptor*, retval : Int16*) : HRESULT
    @lpVtbl.value.get_dacl_defaulted.call(this, retval)
  end
  def put_dacl_defaulted(this : IADsSecurityDescriptor*, fdacldefaulted : Int16) : HRESULT
    @lpVtbl.value.put_dacl_defaulted.call(this, fdacldefaulted)
  end
  def get_system_acl(this : IADsSecurityDescriptor*, retval : IDispatch*) : HRESULT
    @lpVtbl.value.get_system_acl.call(this, retval)
  end
  def put_system_acl(this : IADsSecurityDescriptor*, psystemacl : IDispatch) : HRESULT
    @lpVtbl.value.put_system_acl.call(this, psystemacl)
  end
  def get_sacl_defaulted(this : IADsSecurityDescriptor*, retval : Int16*) : HRESULT
    @lpVtbl.value.get_sacl_defaulted.call(this, retval)
  end
  def put_sacl_defaulted(this : IADsSecurityDescriptor*, fsacldefaulted : Int16) : HRESULT
    @lpVtbl.value.put_sacl_defaulted.call(this, fsacldefaulted)
  end
  def copy_security_descriptor(this : IADsSecurityDescriptor*, ppsecuritydescriptor : IDispatch*) : HRESULT
    @lpVtbl.value.copy_security_descriptor.call(this, ppsecuritydescriptor)
  end
end
struct LibWin32::IADsLargeInteger
  def query_interface(this : IADsLargeInteger*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsLargeInteger*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsLargeInteger*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsLargeInteger*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsLargeInteger*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsLargeInteger*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsLargeInteger*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_high_part(this : IADsLargeInteger*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_high_part.call(this, retval)
  end
  def put_high_part(this : IADsLargeInteger*, lnhighpart : Int32) : HRESULT
    @lpVtbl.value.put_high_part.call(this, lnhighpart)
  end
  def get_low_part(this : IADsLargeInteger*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_low_part.call(this, retval)
  end
  def put_low_part(this : IADsLargeInteger*, lnlowpart : Int32) : HRESULT
    @lpVtbl.value.put_low_part.call(this, lnlowpart)
  end
end
struct LibWin32::IADsNameTranslate
  def query_interface(this : IADsNameTranslate*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsNameTranslate*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsNameTranslate*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsNameTranslate*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsNameTranslate*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsNameTranslate*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsNameTranslate*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_chase_referral(this : IADsNameTranslate*, lnchasereferral : Int32) : HRESULT
    @lpVtbl.value.put_chase_referral.call(this, lnchasereferral)
  end
  def init(this : IADsNameTranslate*, lnsettype : Int32, bstradspath : UInt8*) : HRESULT
    @lpVtbl.value.init.call(this, lnsettype, bstradspath)
  end
  def init_ex(this : IADsNameTranslate*, lnsettype : Int32, bstradspath : UInt8*, bstruserid : UInt8*, bstrdomain : UInt8*, bstrpassword : UInt8*) : HRESULT
    @lpVtbl.value.init_ex.call(this, lnsettype, bstradspath, bstruserid, bstrdomain, bstrpassword)
  end
  def set(this : IADsNameTranslate*, lnsettype : Int32, bstradspath : UInt8*) : HRESULT
    @lpVtbl.value.set.call(this, lnsettype, bstradspath)
  end
  def get(this : IADsNameTranslate*, lnformattype : Int32, pbstradspath : UInt8**) : HRESULT
    @lpVtbl.value.get.call(this, lnformattype, pbstradspath)
  end
  def set_ex(this : IADsNameTranslate*, lnformattype : Int32, pvar : VARIANT) : HRESULT
    @lpVtbl.value.set_ex.call(this, lnformattype, pvar)
  end
  def get_ex(this : IADsNameTranslate*, lnformattype : Int32, pvar : VARIANT*) : HRESULT
    @lpVtbl.value.get_ex.call(this, lnformattype, pvar)
  end
end
struct LibWin32::IADsCaseIgnoreList
  def query_interface(this : IADsCaseIgnoreList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsCaseIgnoreList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsCaseIgnoreList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsCaseIgnoreList*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsCaseIgnoreList*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsCaseIgnoreList*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsCaseIgnoreList*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_case_ignore_list(this : IADsCaseIgnoreList*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_case_ignore_list.call(this, retval)
  end
  def put_case_ignore_list(this : IADsCaseIgnoreList*, vcaseignorelist : VARIANT) : HRESULT
    @lpVtbl.value.put_case_ignore_list.call(this, vcaseignorelist)
  end
end
struct LibWin32::IADsFaxNumber
  def query_interface(this : IADsFaxNumber*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsFaxNumber*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsFaxNumber*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsFaxNumber*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsFaxNumber*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsFaxNumber*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsFaxNumber*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_telephone_number(this : IADsFaxNumber*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_telephone_number.call(this, retval)
  end
  def put_telephone_number(this : IADsFaxNumber*, bstrtelephonenumber : UInt8*) : HRESULT
    @lpVtbl.value.put_telephone_number.call(this, bstrtelephonenumber)
  end
  def get_parameters(this : IADsFaxNumber*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_parameters.call(this, retval)
  end
  def put_parameters(this : IADsFaxNumber*, vparameters : VARIANT) : HRESULT
    @lpVtbl.value.put_parameters.call(this, vparameters)
  end
end
struct LibWin32::IADsNetAddress
  def query_interface(this : IADsNetAddress*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsNetAddress*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsNetAddress*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsNetAddress*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsNetAddress*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsNetAddress*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsNetAddress*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_address_type(this : IADsNetAddress*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_address_type.call(this, retval)
  end
  def put_address_type(this : IADsNetAddress*, lnaddresstype : Int32) : HRESULT
    @lpVtbl.value.put_address_type.call(this, lnaddresstype)
  end
  def get_address(this : IADsNetAddress*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_address.call(this, retval)
  end
  def put_address(this : IADsNetAddress*, vaddress : VARIANT) : HRESULT
    @lpVtbl.value.put_address.call(this, vaddress)
  end
end
struct LibWin32::IADsOctetList
  def query_interface(this : IADsOctetList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsOctetList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsOctetList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsOctetList*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsOctetList*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsOctetList*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsOctetList*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_octet_list(this : IADsOctetList*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_octet_list.call(this, retval)
  end
  def put_octet_list(this : IADsOctetList*, voctetlist : VARIANT) : HRESULT
    @lpVtbl.value.put_octet_list.call(this, voctetlist)
  end
end
struct LibWin32::IADsEmail
  def query_interface(this : IADsEmail*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsEmail*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsEmail*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsEmail*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsEmail*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsEmail*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsEmail*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_type(this : IADsEmail*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_type.call(this, retval)
  end
  def put_type(this : IADsEmail*, lntype : Int32) : HRESULT
    @lpVtbl.value.put_type.call(this, lntype)
  end
  def get_address(this : IADsEmail*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_address.call(this, retval)
  end
  def put_address(this : IADsEmail*, bstraddress : UInt8*) : HRESULT
    @lpVtbl.value.put_address.call(this, bstraddress)
  end
end
struct LibWin32::IADsPath
  def query_interface(this : IADsPath*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsPath*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsPath*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsPath*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsPath*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsPath*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsPath*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_type(this : IADsPath*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_type.call(this, retval)
  end
  def put_type(this : IADsPath*, lntype : Int32) : HRESULT
    @lpVtbl.value.put_type.call(this, lntype)
  end
  def get_volume_name(this : IADsPath*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_volume_name.call(this, retval)
  end
  def put_volume_name(this : IADsPath*, bstrvolumename : UInt8*) : HRESULT
    @lpVtbl.value.put_volume_name.call(this, bstrvolumename)
  end
  def get_path(this : IADsPath*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_path.call(this, retval)
  end
  def put_path(this : IADsPath*, bstrpath : UInt8*) : HRESULT
    @lpVtbl.value.put_path.call(this, bstrpath)
  end
end
struct LibWin32::IADsReplicaPointer
  def query_interface(this : IADsReplicaPointer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsReplicaPointer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsReplicaPointer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsReplicaPointer*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsReplicaPointer*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsReplicaPointer*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsReplicaPointer*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_server_name(this : IADsReplicaPointer*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_server_name.call(this, retval)
  end
  def put_server_name(this : IADsReplicaPointer*, bstrservername : UInt8*) : HRESULT
    @lpVtbl.value.put_server_name.call(this, bstrservername)
  end
  def get_replica_type(this : IADsReplicaPointer*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_replica_type.call(this, retval)
  end
  def put_replica_type(this : IADsReplicaPointer*, lnreplicatype : Int32) : HRESULT
    @lpVtbl.value.put_replica_type.call(this, lnreplicatype)
  end
  def get_replica_number(this : IADsReplicaPointer*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_replica_number.call(this, retval)
  end
  def put_replica_number(this : IADsReplicaPointer*, lnreplicanumber : Int32) : HRESULT
    @lpVtbl.value.put_replica_number.call(this, lnreplicanumber)
  end
  def get_count(this : IADsReplicaPointer*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_count.call(this, retval)
  end
  def put_count(this : IADsReplicaPointer*, lncount : Int32) : HRESULT
    @lpVtbl.value.put_count.call(this, lncount)
  end
  def get_replica_address_hints(this : IADsReplicaPointer*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_replica_address_hints.call(this, retval)
  end
  def put_replica_address_hints(this : IADsReplicaPointer*, vreplicaaddresshints : VARIANT) : HRESULT
    @lpVtbl.value.put_replica_address_hints.call(this, vreplicaaddresshints)
  end
end
struct LibWin32::IADsAcl
  def query_interface(this : IADsAcl*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsAcl*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsAcl*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsAcl*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsAcl*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsAcl*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsAcl*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_protected_attr_name(this : IADsAcl*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_protected_attr_name.call(this, retval)
  end
  def put_protected_attr_name(this : IADsAcl*, bstrprotectedattrname : UInt8*) : HRESULT
    @lpVtbl.value.put_protected_attr_name.call(this, bstrprotectedattrname)
  end
  def get_subject_name(this : IADsAcl*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_subject_name.call(this, retval)
  end
  def put_subject_name(this : IADsAcl*, bstrsubjectname : UInt8*) : HRESULT
    @lpVtbl.value.put_subject_name.call(this, bstrsubjectname)
  end
  def get_privileges(this : IADsAcl*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_privileges.call(this, retval)
  end
  def put_privileges(this : IADsAcl*, lnprivileges : Int32) : HRESULT
    @lpVtbl.value.put_privileges.call(this, lnprivileges)
  end
  def copy_acl(this : IADsAcl*, ppacl : IDispatch*) : HRESULT
    @lpVtbl.value.copy_acl.call(this, ppacl)
  end
end
struct LibWin32::IADsTimestamp
  def query_interface(this : IADsTimestamp*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsTimestamp*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsTimestamp*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsTimestamp*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsTimestamp*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsTimestamp*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsTimestamp*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_whole_seconds(this : IADsTimestamp*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_whole_seconds.call(this, retval)
  end
  def put_whole_seconds(this : IADsTimestamp*, lnwholeseconds : Int32) : HRESULT
    @lpVtbl.value.put_whole_seconds.call(this, lnwholeseconds)
  end
  def get_event_id(this : IADsTimestamp*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_event_id.call(this, retval)
  end
  def put_event_id(this : IADsTimestamp*, lneventid : Int32) : HRESULT
    @lpVtbl.value.put_event_id.call(this, lneventid)
  end
end
struct LibWin32::IADsPostalAddress
  def query_interface(this : IADsPostalAddress*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsPostalAddress*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsPostalAddress*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsPostalAddress*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsPostalAddress*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsPostalAddress*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsPostalAddress*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_postal_address(this : IADsPostalAddress*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_postal_address.call(this, retval)
  end
  def put_postal_address(this : IADsPostalAddress*, vpostaladdress : VARIANT) : HRESULT
    @lpVtbl.value.put_postal_address.call(this, vpostaladdress)
  end
end
struct LibWin32::IADsBackLink
  def query_interface(this : IADsBackLink*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsBackLink*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsBackLink*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsBackLink*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsBackLink*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsBackLink*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsBackLink*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_remote_id(this : IADsBackLink*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_remote_id.call(this, retval)
  end
  def put_remote_id(this : IADsBackLink*, lnremoteid : Int32) : HRESULT
    @lpVtbl.value.put_remote_id.call(this, lnremoteid)
  end
  def get_object_name(this : IADsBackLink*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_object_name.call(this, retval)
  end
  def put_object_name(this : IADsBackLink*, bstrobjectname : UInt8*) : HRESULT
    @lpVtbl.value.put_object_name.call(this, bstrobjectname)
  end
end
struct LibWin32::IADsTypedName
  def query_interface(this : IADsTypedName*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsTypedName*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsTypedName*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsTypedName*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsTypedName*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsTypedName*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsTypedName*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_object_name(this : IADsTypedName*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_object_name.call(this, retval)
  end
  def put_object_name(this : IADsTypedName*, bstrobjectname : UInt8*) : HRESULT
    @lpVtbl.value.put_object_name.call(this, bstrobjectname)
  end
  def get_level(this : IADsTypedName*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_level.call(this, retval)
  end
  def put_level(this : IADsTypedName*, lnlevel : Int32) : HRESULT
    @lpVtbl.value.put_level.call(this, lnlevel)
  end
  def get_interval(this : IADsTypedName*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_interval.call(this, retval)
  end
  def put_interval(this : IADsTypedName*, lninterval : Int32) : HRESULT
    @lpVtbl.value.put_interval.call(this, lninterval)
  end
end
struct LibWin32::IADsHold
  def query_interface(this : IADsHold*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsHold*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsHold*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsHold*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsHold*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsHold*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsHold*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_object_name(this : IADsHold*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_object_name.call(this, retval)
  end
  def put_object_name(this : IADsHold*, bstrobjectname : UInt8*) : HRESULT
    @lpVtbl.value.put_object_name.call(this, bstrobjectname)
  end
  def get_amount(this : IADsHold*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_amount.call(this, retval)
  end
  def put_amount(this : IADsHold*, lnamount : Int32) : HRESULT
    @lpVtbl.value.put_amount.call(this, lnamount)
  end
end
struct LibWin32::IADsObjectOptions
  def query_interface(this : IADsObjectOptions*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsObjectOptions*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsObjectOptions*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsObjectOptions*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsObjectOptions*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsObjectOptions*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsObjectOptions*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_option(this : IADsObjectOptions*, lnoption : Int32, pvvalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_option.call(this, lnoption, pvvalue)
  end
  def set_option(this : IADsObjectOptions*, lnoption : Int32, vvalue : VARIANT) : HRESULT
    @lpVtbl.value.set_option.call(this, lnoption, vvalue)
  end
end
struct LibWin32::IADsPathname
  def query_interface(this : IADsPathname*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsPathname*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsPathname*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsPathname*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsPathname*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsPathname*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsPathname*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def set(this : IADsPathname*, bstradspath : UInt8*, lnsettype : Int32) : HRESULT
    @lpVtbl.value.set.call(this, bstradspath, lnsettype)
  end
  def set_display_type(this : IADsPathname*, lndisplaytype : Int32) : HRESULT
    @lpVtbl.value.set_display_type.call(this, lndisplaytype)
  end
  def retrieve(this : IADsPathname*, lnformattype : Int32, pbstradspath : UInt8**) : HRESULT
    @lpVtbl.value.retrieve.call(this, lnformattype, pbstradspath)
  end
  def get_num_elements(this : IADsPathname*, plnnumpathelements : Int32*) : HRESULT
    @lpVtbl.value.get_num_elements.call(this, plnnumpathelements)
  end
  def get_element(this : IADsPathname*, lnelementindex : Int32, pbstrelement : UInt8**) : HRESULT
    @lpVtbl.value.get_element.call(this, lnelementindex, pbstrelement)
  end
  def add_leaf_element(this : IADsPathname*, bstrleafelement : UInt8*) : HRESULT
    @lpVtbl.value.add_leaf_element.call(this, bstrleafelement)
  end
  def remove_leaf_element(this : IADsPathname*) : HRESULT
    @lpVtbl.value.remove_leaf_element.call(this)
  end
  def copy_path(this : IADsPathname*, ppadspath : IDispatch*) : HRESULT
    @lpVtbl.value.copy_path.call(this, ppadspath)
  end
  def get_escaped_element(this : IADsPathname*, lnreserved : Int32, bstrinstr : UInt8*, pbstroutstr : UInt8**) : HRESULT
    @lpVtbl.value.get_escaped_element.call(this, lnreserved, bstrinstr, pbstroutstr)
  end
  def get_escaped_mode(this : IADsPathname*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_escaped_mode.call(this, retval)
  end
  def put_escaped_mode(this : IADsPathname*, lnescapedmode : Int32) : HRESULT
    @lpVtbl.value.put_escaped_mode.call(this, lnescapedmode)
  end
end
struct LibWin32::IADsADSystemInfo
  def query_interface(this : IADsADSystemInfo*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsADSystemInfo*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsADSystemInfo*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsADSystemInfo*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsADSystemInfo*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsADSystemInfo*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsADSystemInfo*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_user_name(this : IADsADSystemInfo*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_user_name.call(this, retval)
  end
  def get_computer_name(this : IADsADSystemInfo*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_computer_name.call(this, retval)
  end
  def get_site_name(this : IADsADSystemInfo*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_site_name.call(this, retval)
  end
  def get_domain_short_name(this : IADsADSystemInfo*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_domain_short_name.call(this, retval)
  end
  def get_domain_dns_name(this : IADsADSystemInfo*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_domain_dns_name.call(this, retval)
  end
  def get_forest_dns_name(this : IADsADSystemInfo*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_forest_dns_name.call(this, retval)
  end
  def get_pdc_role_owner(this : IADsADSystemInfo*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_pdc_role_owner.call(this, retval)
  end
  def get_schema_role_owner(this : IADsADSystemInfo*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_schema_role_owner.call(this, retval)
  end
  def get_is_native_mode(this : IADsADSystemInfo*, retval : Int16*) : HRESULT
    @lpVtbl.value.get_is_native_mode.call(this, retval)
  end
  def get_any_dc_name(this : IADsADSystemInfo*, pszdcname : UInt8**) : HRESULT
    @lpVtbl.value.get_any_dc_name.call(this, pszdcname)
  end
  def get_dc_site_name(this : IADsADSystemInfo*, szserver : UInt8*, pszsitename : UInt8**) : HRESULT
    @lpVtbl.value.get_dc_site_name.call(this, szserver, pszsitename)
  end
  def refresh_schema_cache(this : IADsADSystemInfo*) : HRESULT
    @lpVtbl.value.refresh_schema_cache.call(this)
  end
  def get_trees(this : IADsADSystemInfo*, pvtrees : VARIANT*) : HRESULT
    @lpVtbl.value.get_trees.call(this, pvtrees)
  end
end
struct LibWin32::IADsWinNTSystemInfo
  def query_interface(this : IADsWinNTSystemInfo*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsWinNTSystemInfo*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsWinNTSystemInfo*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsWinNTSystemInfo*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsWinNTSystemInfo*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsWinNTSystemInfo*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsWinNTSystemInfo*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_user_name(this : IADsWinNTSystemInfo*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_user_name.call(this, retval)
  end
  def get_computer_name(this : IADsWinNTSystemInfo*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_computer_name.call(this, retval)
  end
  def get_domain_name(this : IADsWinNTSystemInfo*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_domain_name.call(this, retval)
  end
  def get_pdc(this : IADsWinNTSystemInfo*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_pdc.call(this, retval)
  end
end
struct LibWin32::IADsDNWithBinary
  def query_interface(this : IADsDNWithBinary*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsDNWithBinary*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsDNWithBinary*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsDNWithBinary*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsDNWithBinary*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsDNWithBinary*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsDNWithBinary*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_binary_value(this : IADsDNWithBinary*, retval : VARIANT*) : HRESULT
    @lpVtbl.value.get_binary_value.call(this, retval)
  end
  def put_binary_value(this : IADsDNWithBinary*, vbinaryvalue : VARIANT) : HRESULT
    @lpVtbl.value.put_binary_value.call(this, vbinaryvalue)
  end
  def get_dn_string(this : IADsDNWithBinary*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_dn_string.call(this, retval)
  end
  def put_dn_string(this : IADsDNWithBinary*, bstrdnstring : UInt8*) : HRESULT
    @lpVtbl.value.put_dn_string.call(this, bstrdnstring)
  end
end
struct LibWin32::IADsDNWithString
  def query_interface(this : IADsDNWithString*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsDNWithString*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsDNWithString*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsDNWithString*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsDNWithString*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsDNWithString*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsDNWithString*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_string_value(this : IADsDNWithString*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_string_value.call(this, retval)
  end
  def put_string_value(this : IADsDNWithString*, bstrstringvalue : UInt8*) : HRESULT
    @lpVtbl.value.put_string_value.call(this, bstrstringvalue)
  end
  def get_dn_string(this : IADsDNWithString*, retval : UInt8**) : HRESULT
    @lpVtbl.value.get_dn_string.call(this, retval)
  end
  def put_dn_string(this : IADsDNWithString*, bstrdnstring : UInt8*) : HRESULT
    @lpVtbl.value.put_dn_string.call(this, bstrdnstring)
  end
end
struct LibWin32::IADsSecurityUtility
  def query_interface(this : IADsSecurityUtility*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IADsSecurityUtility*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IADsSecurityUtility*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IADsSecurityUtility*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IADsSecurityUtility*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IADsSecurityUtility*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IADsSecurityUtility*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_security_descriptor(this : IADsSecurityUtility*, varpath : VARIANT, lpathformat : Int32, lformat : Int32, pvariant : VARIANT*) : HRESULT
    @lpVtbl.value.get_security_descriptor.call(this, varpath, lpathformat, lformat, pvariant)
  end
  def set_security_descriptor(this : IADsSecurityUtility*, varpath : VARIANT, lpathformat : Int32, vardata : VARIANT, ldataformat : Int32) : HRESULT
    @lpVtbl.value.set_security_descriptor.call(this, varpath, lpathformat, vardata, ldataformat)
  end
  def convert_security_descriptor(this : IADsSecurityUtility*, varsd : VARIANT, ldataformat : Int32, loutformat : Int32, presult : VARIANT*) : HRESULT
    @lpVtbl.value.convert_security_descriptor.call(this, varsd, ldataformat, loutformat, presult)
  end
  def get_security_mask(this : IADsSecurityUtility*, retval : Int32*) : HRESULT
    @lpVtbl.value.get_security_mask.call(this, retval)
  end
  def put_security_mask(this : IADsSecurityUtility*, lnsecuritymask : Int32) : HRESULT
    @lpVtbl.value.put_security_mask.call(this, lnsecuritymask)
  end
end
struct LibWin32::IDsBrowseDomainTree
  def query_interface(this : IDsBrowseDomainTree*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDsBrowseDomainTree*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDsBrowseDomainTree*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def browse_to(this : IDsBrowseDomainTree*, hwndparent : LibC::HANDLE, ppsztargetpath : LibC::LPWSTR*, dwflags : UInt32) : HRESULT
    @lpVtbl.value.browse_to.call(this, hwndparent, ppsztargetpath, dwflags)
  end
  def get_domains(this : IDsBrowseDomainTree*, ppdomaintree : DOMAIN_TREE**, dwflags : UInt32) : HRESULT
    @lpVtbl.value.get_domains.call(this, ppdomaintree, dwflags)
  end
  def free_domains(this : IDsBrowseDomainTree*, ppdomaintree : DOMAIN_TREE**) : HRESULT
    @lpVtbl.value.free_domains.call(this, ppdomaintree)
  end
  def flush_cached_domains(this : IDsBrowseDomainTree*) : HRESULT
    @lpVtbl.value.flush_cached_domains.call(this)
  end
  def set_computer(this : IDsBrowseDomainTree*, pszcomputername : LibC::LPWSTR, pszusername : LibC::LPWSTR, pszpassword : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_computer.call(this, pszcomputername, pszusername, pszpassword)
  end
end
struct LibWin32::IDsDisplaySpecifier
  def query_interface(this : IDsDisplaySpecifier*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDsDisplaySpecifier*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDsDisplaySpecifier*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_server(this : IDsDisplaySpecifier*, pszserver : LibC::LPWSTR, pszusername : LibC::LPWSTR, pszpassword : LibC::LPWSTR, dwflags : UInt32) : HRESULT
    @lpVtbl.value.set_server.call(this, pszserver, pszusername, pszpassword, dwflags)
  end
  def set_language_id(this : IDsDisplaySpecifier*, langid : UInt16) : HRESULT
    @lpVtbl.value.set_language_id.call(this, langid)
  end
  def get_display_specifier(this : IDsDisplaySpecifier*, pszobjectclass : LibC::LPWSTR, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.get_display_specifier.call(this, pszobjectclass, riid, ppv)
  end
  def get_icon_location(this : IDsDisplaySpecifier*, pszobjectclass : LibC::LPWSTR, dwflags : UInt32, pszbuffer : Char*, cchbuffer : Int32, presid : Int32*) : HRESULT
    @lpVtbl.value.get_icon_location.call(this, pszobjectclass, dwflags, pszbuffer, cchbuffer, presid)
  end
  def get_icon(this : IDsDisplaySpecifier*, pszobjectclass : LibC::LPWSTR, dwflags : UInt32, cxicon : Int32, cyicon : Int32) : HANDLE
    @lpVtbl.value.get_icon.call(this, pszobjectclass, dwflags, cxicon, cyicon)
  end
  def get_friendly_class_name(this : IDsDisplaySpecifier*, pszobjectclass : LibC::LPWSTR, pszbuffer : Char*, cchbuffer : Int32) : HRESULT
    @lpVtbl.value.get_friendly_class_name.call(this, pszobjectclass, pszbuffer, cchbuffer)
  end
  def get_friendly_attribute_name(this : IDsDisplaySpecifier*, pszobjectclass : LibC::LPWSTR, pszattributename : LibC::LPWSTR, pszbuffer : Char*, cchbuffer : UInt32) : HRESULT
    @lpVtbl.value.get_friendly_attribute_name.call(this, pszobjectclass, pszattributename, pszbuffer, cchbuffer)
  end
  def is_class_container(this : IDsDisplaySpecifier*, pszobjectclass : LibC::LPWSTR, pszadspath : LibC::LPWSTR, dwflags : UInt32) : LibC::BOOL
    @lpVtbl.value.is_class_container.call(this, pszobjectclass, pszadspath, dwflags)
  end
  def get_class_creation_info(this : IDsDisplaySpecifier*, pszobjectclass : LibC::LPWSTR, ppdscci : DSCLASSCREATIONINFO**) : HRESULT
    @lpVtbl.value.get_class_creation_info.call(this, pszobjectclass, ppdscci)
  end
  def enum_class_attributes(this : IDsDisplaySpecifier*, pszobjectclass : LibC::LPWSTR, pcbenum : LPDSENUMATTRIBUTES, lparam : LPARAM) : HRESULT
    @lpVtbl.value.enum_class_attributes.call(this, pszobjectclass, pcbenum, lparam)
  end
  def get_attribute_a_ds_type(this : IDsDisplaySpecifier*, pszattributename : LibC::LPWSTR) : ADSTYPEENUM
    @lpVtbl.value.get_attribute_a_ds_type.call(this, pszattributename)
  end
end
struct LibWin32::IDsObjectPicker
  def query_interface(this : IDsObjectPicker*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDsObjectPicker*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDsObjectPicker*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def initialize(this : IDsObjectPicker*, pinitinfo : DSOP_INIT_INFO*) : HRESULT
    @lpVtbl.value.initialize.call(this, pinitinfo)
  end
  def invoke_dialog(this : IDsObjectPicker*, hwndparent : LibC::HANDLE, ppdoselections : IDataObject*) : HRESULT
    @lpVtbl.value.invoke_dialog.call(this, hwndparent, ppdoselections)
  end
end
struct LibWin32::IDsObjectPickerCredentials
  def query_interface(this : IDsObjectPickerCredentials*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDsObjectPickerCredentials*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDsObjectPickerCredentials*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def initialize(this : IDsObjectPickerCredentials*, pinitinfo : DSOP_INIT_INFO*) : HRESULT
    @lpVtbl.value.initialize.call(this, pinitinfo)
  end
  def invoke_dialog(this : IDsObjectPickerCredentials*, hwndparent : LibC::HANDLE, ppdoselections : IDataObject*) : HRESULT
    @lpVtbl.value.invoke_dialog.call(this, hwndparent, ppdoselections)
  end
  def set_credentials(this : IDsObjectPickerCredentials*, szusername : LibC::LPWSTR, szpassword : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_credentials.call(this, szusername, szpassword)
  end
end
struct LibWin32::IDsAdminCreateObj
  def query_interface(this : IDsAdminCreateObj*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDsAdminCreateObj*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDsAdminCreateObj*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def initialize(this : IDsAdminCreateObj*, padscontainerobj : IADsContainer, padscopysource : IADs, lpszclassname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.initialize.call(this, padscontainerobj, padscopysource, lpszclassname)
  end
  def create_modal(this : IDsAdminCreateObj*, hwndparent : LibC::HANDLE, ppadsobj : IADs*) : HRESULT
    @lpVtbl.value.create_modal.call(this, hwndparent, ppadsobj)
  end
end
struct LibWin32::IDsAdminNewObj
  def query_interface(this : IDsAdminNewObj*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDsAdminNewObj*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDsAdminNewObj*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_buttons(this : IDsAdminNewObj*, ncurrindex : UInt32, bvalid : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_buttons.call(this, ncurrindex, bvalid)
  end
  def get_page_counts(this : IDsAdminNewObj*, pntotal : Int32*, pnstartindex : Int32*) : HRESULT
    @lpVtbl.value.get_page_counts.call(this, pntotal, pnstartindex)
  end
end
struct LibWin32::IDsAdminNewObjPrimarySite
  def query_interface(this : IDsAdminNewObjPrimarySite*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDsAdminNewObjPrimarySite*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDsAdminNewObjPrimarySite*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_new(this : IDsAdminNewObjPrimarySite*, pszname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.create_new.call(this, pszname)
  end
  def commit(this : IDsAdminNewObjPrimarySite*) : HRESULT
    @lpVtbl.value.commit.call(this)
  end
end
struct LibWin32::IDsAdminNewObjExt
  def query_interface(this : IDsAdminNewObjExt*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDsAdminNewObjExt*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDsAdminNewObjExt*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def initialize(this : IDsAdminNewObjExt*, padscontainerobj : IADsContainer, padscopysource : IADs, lpszclassname : LibC::LPWSTR, pdsadminnewobj : IDsAdminNewObj, pdispinfo : DSA_NEWOBJ_DISPINFO*) : HRESULT
    @lpVtbl.value.initialize.call(this, padscontainerobj, padscopysource, lpszclassname, pdsadminnewobj, pdispinfo)
  end
  def add_pages(this : IDsAdminNewObjExt*, lpfnaddpage : LPFNSVADDPROPSHEETPAGE, lparam : LPARAM) : HRESULT
    @lpVtbl.value.add_pages.call(this, lpfnaddpage, lparam)
  end
  def set_object(this : IDsAdminNewObjExt*, padsobj : IADs) : HRESULT
    @lpVtbl.value.set_object.call(this, padsobj)
  end
  def write_data(this : IDsAdminNewObjExt*, hwnd : LibC::HANDLE, ucontext : UInt32) : HRESULT
    @lpVtbl.value.write_data.call(this, hwnd, ucontext)
  end
  def on_error(this : IDsAdminNewObjExt*, hwnd : LibC::HANDLE, hr : HRESULT, ucontext : UInt32) : HRESULT
    @lpVtbl.value.on_error.call(this, hwnd, hr, ucontext)
  end
  def get_summary_info(this : IDsAdminNewObjExt*, pbstrtext : UInt8**) : HRESULT
    @lpVtbl.value.get_summary_info.call(this, pbstrtext)
  end
end
struct LibWin32::IDsAdminNotifyHandler
  def query_interface(this : IDsAdminNotifyHandler*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDsAdminNotifyHandler*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDsAdminNotifyHandler*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def initialize(this : IDsAdminNotifyHandler*, pextrainfo : IDataObject, pueventflags : UInt32*) : HRESULT
    @lpVtbl.value.initialize.call(this, pextrainfo, pueventflags)
  end
  def begin_(this : IDsAdminNotifyHandler*, uevent : UInt32, parg1 : IDataObject, parg2 : IDataObject, puflags : UInt32*, pbstr : UInt8**) : HRESULT
    @lpVtbl.value.begin_.call(this, uevent, parg1, parg2, puflags, pbstr)
  end
  def notify(this : IDsAdminNotifyHandler*, nitem : UInt32, uflags : UInt32) : HRESULT
    @lpVtbl.value.notify.call(this, nitem, uflags)
  end
  def end_(this : IDsAdminNotifyHandler*) : HRESULT
    @lpVtbl.value.end_.call(this)
  end
end
