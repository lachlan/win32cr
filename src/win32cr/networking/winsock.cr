require "../foundation.cr"
require "../system/kernel.cr"
require "../networkmanagement/qos.cr"
require "../system/io.cr"
require "../system/com.cr"
require "../networkmanagement/windowsfilteringplatform.cr"

@[Link("delayimp")]
@[Link("user32")]
@[Link(ldflags: "/IGNORE:4199")]
@[Link(ldflags: "/DELAYLOAD:ws2_32.dll")]
@[Link(ldflags: "/DELAYLOAD:mswsock.dll")]
@[Link(ldflags: "/DELAYLOAD:fwpuclnt.dll")]
@[Link(ldflags: "/DELAYLOAD:windows.networking.dll")]
lib LibWin32
  alias HWSAEVENT = LibC::IntPtrT
  alias SOCKET = LibC::UINT_PTR

  SOCKET_DEFAULT2_QM_POLICY = "aec2ef9c-3a4d-4d3e-8842-239942e39a47"
  REAL_TIME_NOTIFICATION_CAPABILITY = "6b59819a-5cae-492d-a901-2a3c2c50164f"
  REAL_TIME_NOTIFICATION_CAPABILITY_EX = "6843da03-154a-4616-a508-44371295f96b"
  ASSOCIATE_NAMERES_CONTEXT = "59a38b67-d4fe-46e1-ba3c-87ea74ca3049"
  TIMESTAMPING_FLAG_RX = 1_u32
  TIMESTAMPING_FLAG_TX = 2_u32
  SO_TIMESTAMP = 12298_u32
  SO_TIMESTAMP_ID = 12299_u32
  TCP_INITIAL_RTO_DEFAULT_RTT = 0_u32
  TCP_INITIAL_RTO_DEFAULT_MAX_SYN_RETRANSMISSIONS = 0_u32
  SOCKET_SETTINGS_GUARANTEE_ENCRYPTION = 1_u32
  SOCKET_SETTINGS_ALLOW_INSECURE = 2_u32
  SOCKET_SETTINGS_IPSEC_SKIP_FILTER_INSTANTIATION = 1_u32
  SOCKET_SETTINGS_IPSEC_OPTIONAL_PEER_NAME_VERIFICATION = 2_u32
  SOCKET_SETTINGS_IPSEC_ALLOW_FIRST_INBOUND_PKT_UNENCRYPTED = 4_u32
  SOCKET_SETTINGS_IPSEC_PEER_NAME_IS_RAW_FORMAT = 8_u32
  SOCKET_QUERY_IPSEC2_ABORT_CONNECTION_ON_FIELD_CHANGE = 1_u32
  SOCKET_QUERY_IPSEC2_FIELD_MASK_MM_SA_ID = 1_u32
  SOCKET_QUERY_IPSEC2_FIELD_MASK_QM_SA_ID = 2_u32
  SOCKET_INFO_CONNECTION_SECURED = 1_u32
  SOCKET_INFO_CONNECTION_ENCRYPTED = 2_u32
  SOCKET_INFO_CONNECTION_IMPERSONATED = 4_u32
  IN4ADDR_LOOPBACK = 16777343_u32
  IN4ADDR_LOOPBACKPREFIX_LENGTH = 8_u32
  IN4ADDR_LINKLOCALPREFIX_LENGTH = 16_u32
  IN4ADDR_MULTICASTPREFIX_LENGTH = 4_u32
  RIO_MSG_DONT_NOTIFY = 1_u32
  RIO_MSG_DEFER = 2_u32
  RIO_MSG_WAITALL = 4_u32
  RIO_MSG_COMMIT_ONLY = 8_u32
  RIO_MAX_CQ_SIZE = 134217728_u32
  RIO_CORRUPT_CQ = 4294967295_u32
  AF_UNIX = 1_u16
  AF_IMPLINK = 3_u16
  AF_PUP = 4_u16
  AF_CHAOS = 5_u16
  AF_NS = 6_u16
  AF_IPX = 6_u16
  AF_ISO = 7_u16
  AF_OSI = 7_u16
  AF_ECMA = 8_u16
  AF_DATAKIT = 9_u16
  AF_CCITT = 10_u16
  AF_SNA = 11_u16
  AF_DECnet = 12_u16
  AF_DLI = 13_u16
  AF_LAT = 14_u16
  AF_HYLINK = 15_u16
  AF_APPLETALK = 16_u16
  AF_NETBIOS = 17_u16
  AF_VOICEVIEW = 18_u16
  AF_FIREFOX = 19_u16
  AF_UNKNOWN1 = 20_u16
  AF_BAN = 21_u16
  AF_ATM = 22_u16
  AF_CLUSTER = 24_u16
  AF_12844 = 25_u16
  AF_IRDA = 26_u16
  AF_NETDES = 28_u16
  AF_MAX = 29_u16
  AF_TCNPROCESS = 29_u16
  AF_TCNMESSAGE = 30_u16
  AF_ICLFXBM = 31_u16
  AF_LINK = 33_u16
  AF_HYPERV = 34_u16
  SOCK_STREAM = 1_u16
  SOCK_DGRAM = 2_u16
  SOCK_RAW = 3_u16
  SOCK_RDM = 4_u16
  SOCK_SEQPACKET = 5_u16
  SOL_SOCKET = 65535_u32
  SO_DEBUG = 1_u32
  SO_ACCEPTCONN = 2_u32
  SO_REUSEADDR = 4_u32
  SO_KEEPALIVE = 8_u32
  SO_DONTROUTE = 16_u32
  SO_BROADCAST = 32_u32
  SO_USELOOPBACK = 64_u32
  SO_LINGER = 128_u32
  SO_OOBINLINE = 256_u32
  SO_SNDBUF = 4097_u32
  SO_RCVBUF = 4098_u32
  SO_SNDLOWAT = 4099_u32
  SO_RCVLOWAT = 4100_u32
  SO_SNDTIMEO = 4101_u32
  SO_RCVTIMEO = 4102_u32
  SO_ERROR = 4103_u32
  SO_TYPE = 4104_u32
  SO_BSP_STATE = 4105_u32
  SO_GROUP_ID = 8193_u32
  SO_GROUP_PRIORITY = 8194_u32
  SO_MAX_MSG_SIZE = 8195_u32
  SO_CONDITIONAL_ACCEPT = 12290_u32
  SO_PAUSE_ACCEPT = 12291_u32
  SO_COMPARTMENT_ID = 12292_u32
  SO_RANDOMIZE_PORT = 12293_u32
  SO_PORT_SCALABILITY = 12294_u32
  SO_REUSE_UNICASTPORT = 12295_u32
  SO_REUSE_MULTICASTPORT = 12296_u32
  SO_ORIGINAL_DST = 12303_u32
  IP6T_SO_ORIGINAL_DST = 12303_u32
  WSK_SO_BASE = 16384_u32
  TCP_NODELAY = 1_u32
  SS_MAXSIZE = 128_u32
  IOC_UNIX = 0_u32
  IOC_WS2 = 134217728_u32
  IOC_PROTOCOL = 268435456_u32
  IOC_VENDOR = 402653184_u32
  IPPROTO_IP = 0_u32
  IPPORT_TCPMUX = 1_u32
  IPPORT_ECHO = 7_u32
  IPPORT_DISCARD = 9_u32
  IPPORT_SYSTAT = 11_u32
  IPPORT_DAYTIME = 13_u32
  IPPORT_NETSTAT = 15_u32
  IPPORT_QOTD = 17_u32
  IPPORT_MSP = 18_u32
  IPPORT_CHARGEN = 19_u32
  IPPORT_FTP_DATA = 20_u32
  IPPORT_FTP = 21_u32
  IPPORT_TELNET = 23_u32
  IPPORT_SMTP = 25_u32
  IPPORT_TIMESERVER = 37_u32
  IPPORT_NAMESERVER = 42_u32
  IPPORT_WHOIS = 43_u32
  IPPORT_MTP = 57_u32
  IPPORT_TFTP = 69_u32
  IPPORT_RJE = 77_u32
  IPPORT_FINGER = 79_u32
  IPPORT_TTYLINK = 87_u32
  IPPORT_SUPDUP = 95_u32
  IPPORT_POP3 = 110_u32
  IPPORT_NTP = 123_u32
  IPPORT_EPMAP = 135_u32
  IPPORT_NETBIOS_NS = 137_u32
  IPPORT_NETBIOS_DGM = 138_u32
  IPPORT_NETBIOS_SSN = 139_u32
  IPPORT_IMAP = 143_u32
  IPPORT_SNMP = 161_u32
  IPPORT_SNMP_TRAP = 162_u32
  IPPORT_IMAP3 = 220_u32
  IPPORT_LDAP = 389_u32
  IPPORT_HTTPS = 443_u32
  IPPORT_MICROSOFT_DS = 445_u32
  IPPORT_EXECSERVER = 512_u32
  IPPORT_LOGINSERVER = 513_u32
  IPPORT_CMDSERVER = 514_u32
  IPPORT_EFSSERVER = 520_u32
  IPPORT_BIFFUDP = 512_u32
  IPPORT_WHOSERVER = 513_u32
  IPPORT_ROUTESERVER = 520_u32
  IPPORT_RESERVED = 1024_u32
  IPPORT_REGISTERED_MIN = 1024_u32
  IPPORT_REGISTERED_MAX = 49151_u32
  IPPORT_DYNAMIC_MIN = 49152_u32
  IPPORT_DYNAMIC_MAX = 65535_u32
  IN_CLASSA_NET = 4278190080_u32
  IN_CLASSA_NSHIFT = 24_u32
  IN_CLASSA_HOST = 16777215_u32
  IN_CLASSA_MAX = 128_u32
  IN_CLASSB_NET = 4294901760_u32
  IN_CLASSB_NSHIFT = 16_u32
  IN_CLASSB_HOST = 65535_u32
  IN_CLASSB_MAX = 65536_u32
  IN_CLASSC_NET = 4294967040_u32
  IN_CLASSC_NSHIFT = 8_u32
  IN_CLASSC_HOST = 255_u32
  IN_CLASSD_NET = 4026531840_u32
  IN_CLASSD_NSHIFT = 28_u32
  IN_CLASSD_HOST = 268435455_u32
  INADDR_LOOPBACK = 2130706433_u32
  INADDR_NONE = 4294967295_u32
  IOCPARM_MASK = 127_u32
  IOC_VOID = 536870912_u32
  IOC_OUT = 1073741824_u32
  IOC_IN = 2147483648_u32
  MSG_TRUNC = 256_u32
  MSG_CTRUNC = 512_u32
  MSG_BCAST = 1024_u32
  MSG_MCAST = 2048_u32
  MSG_ERRQUEUE = 4096_u32
  AI_PASSIVE = 1_u32
  AI_CANONNAME = 2_u32
  AI_NUMERICHOST = 4_u32
  AI_NUMERICSERV = 8_u32
  AI_DNS_ONLY = 16_u32
  AI_FORCE_CLEAR_TEXT = 32_u32
  AI_BYPASS_DNS_CACHE = 64_u32
  AI_RETURN_TTL = 128_u32
  AI_ALL = 256_u32
  AI_ADDRCONFIG = 1024_u32
  AI_V4MAPPED = 2048_u32
  AI_NON_AUTHORITATIVE = 16384_u32
  AI_SECURE = 32768_u32
  AI_RETURN_PREFERRED_NAMES = 65536_u32
  AI_FQDN = 131072_u32
  AI_FILESERVER = 262144_u32
  AI_DISABLE_IDN_ENCODING = 524288_u32
  AI_SECURE_WITH_FALLBACK = 1048576_u32
  AI_EXCLUSIVE_CUSTOM_SERVERS = 2097152_u32
  AI_RETURN_RESPONSE_FLAGS = 268435456_u32
  AI_REQUIRE_SECURE = 536870912_u32
  AI_RESOLUTION_HANDLE = 1073741824_u32
  AI_EXTENDED = 2147483648_u32
  ADDRINFOEX_VERSION_2 = 2_u32
  ADDRINFOEX_VERSION_3 = 3_u32
  ADDRINFOEX_VERSION_4 = 4_u32
  ADDRINFOEX_VERSION_5 = 5_u32
  ADDRINFOEX_VERSION_6 = 6_u32
  AI_DNS_SERVER_TYPE_UDP = 1_u32
  AI_DNS_SERVER_TYPE_DOH = 2_u32
  AI_DNS_SERVER_UDP_FALLBACK = 1_u32
  AI_DNS_RESPONSE_SECURE = 1_u32
  AI_DNS_RESPONSE_HOSTFILE = 2_u32
  NS_ALL = 0_u32
  NS_SAP = 1_u32
  NS_NDS = 2_u32
  NS_PEER_BROWSE = 3_u32
  NS_SLP = 5_u32
  NS_DHCP = 6_u32
  NS_TCPIP_LOCAL = 10_u32
  NS_TCPIP_HOSTS = 11_u32
  NS_DNS = 12_u32
  NS_NETBT = 13_u32
  NS_WINS = 14_u32
  NS_NLA = 15_u32
  NS_NBP = 20_u32
  NS_MS = 30_u32
  NS_STDA = 31_u32
  NS_NTDS = 32_u32
  NS_EMAIL = 37_u32
  NS_X500 = 40_u32
  NS_NIS = 41_u32
  NS_NISPLUS = 42_u32
  NS_WRQ = 50_u32
  NS_NETDES = 60_u32
  NI_NOFQDN = 1_u32
  NI_NUMERICHOST = 2_u32
  NI_NAMEREQD = 4_u32
  NI_NUMERICSERV = 8_u32
  NI_DGRAM = 16_u32
  NI_MAXHOST = 1025_u32
  NI_MAXSERV = 32_u32
  IFF_UP = 1_u32
  IFF_BROADCAST = 2_u32
  IFF_LOOPBACK = 4_u32
  IFF_POINTTOPOINT = 8_u32
  IFF_MULTICAST = 16_u32
  IP_OPTIONS = 1_u32
  IP_HDRINCL = 2_u32
  IP_TOS = 3_u32
  IP_TTL = 4_u32
  IP_MULTICAST_IF = 9_u32
  IP_MULTICAST_TTL = 10_u32
  IP_MULTICAST_LOOP = 11_u32
  IP_ADD_MEMBERSHIP = 12_u32
  IP_DROP_MEMBERSHIP = 13_u32
  IP_DONTFRAGMENT = 14_u32
  IP_ADD_SOURCE_MEMBERSHIP = 15_u32
  IP_DROP_SOURCE_MEMBERSHIP = 16_u32
  IP_BLOCK_SOURCE = 17_u32
  IP_UNBLOCK_SOURCE = 18_u32
  IP_PKTINFO = 19_u32
  IP_HOPLIMIT = 21_u32
  IP_RECVTTL = 21_u32
  IP_RECEIVE_BROADCAST = 22_u32
  IP_RECVIF = 24_u32
  IP_RECVDSTADDR = 25_u32
  IP_IFLIST = 28_u32
  IP_ADD_IFLIST = 29_u32
  IP_DEL_IFLIST = 30_u32
  IP_UNICAST_IF = 31_u32
  IP_RTHDR = 32_u32
  IP_GET_IFLIST = 33_u32
  IP_RECVRTHDR = 38_u32
  IP_TCLASS = 39_u32
  IP_RECVTCLASS = 40_u32
  IP_RECVTOS = 40_u32
  IP_ORIGINAL_ARRIVAL_IF = 47_u32
  IP_ECN = 50_u32
  IP_RECVECN = 50_u32
  IP_PKTINFO_EX = 51_u32
  IP_WFP_REDIRECT_RECORDS = 60_u32
  IP_WFP_REDIRECT_CONTEXT = 70_u32
  IP_MTU_DISCOVER = 71_u32
  IP_MTU = 73_u32
  IP_NRT_INTERFACE = 74_u32
  IP_RECVERR = 75_u32
  IP_USER_MTU = 76_u32
  IP_UNSPECIFIED_TYPE_OF_SERVICE = -1_i32
  IP_UNSPECIFIED_USER_MTU = 4294967295_u32
  IN6ADDR_LINKLOCALPREFIX_LENGTH = 64_u32
  IN6ADDR_MULTICASTPREFIX_LENGTH = 8_u32
  IN6ADDR_SOLICITEDNODEMULTICASTPREFIX_LENGTH = 104_u32
  IN6ADDR_V4MAPPEDPREFIX_LENGTH = 96_u32
  IN6ADDR_6TO4PREFIX_LENGTH = 16_u32
  IN6ADDR_TEREDOPREFIX_LENGTH = 32_u32
  MCAST_JOIN_GROUP = 41_u32
  MCAST_LEAVE_GROUP = 42_u32
  MCAST_BLOCK_SOURCE = 43_u32
  MCAST_UNBLOCK_SOURCE = 44_u32
  MCAST_JOIN_SOURCE_GROUP = 45_u32
  MCAST_LEAVE_SOURCE_GROUP = 46_u32
  IPV6_HOPOPTS = 1_u32
  IPV6_HDRINCL = 2_u32
  IPV6_UNICAST_HOPS = 4_u32
  IPV6_MULTICAST_IF = 9_u32
  IPV6_MULTICAST_HOPS = 10_u32
  IPV6_MULTICAST_LOOP = 11_u32
  IPV6_ADD_MEMBERSHIP = 12_u32
  IPV6_JOIN_GROUP = 12_u32
  IPV6_DROP_MEMBERSHIP = 13_u32
  IPV6_LEAVE_GROUP = 13_u32
  IPV6_DONTFRAG = 14_u32
  IPV6_PKTINFO = 19_u32
  IPV6_HOPLIMIT = 21_u32
  IPV6_PROTECTION_LEVEL = 23_u32
  IPV6_RECVIF = 24_u32
  IPV6_RECVDSTADDR = 25_u32
  IPV6_CHECKSUM = 26_u32
  IPV6_V6ONLY = 27_u32
  IPV6_IFLIST = 28_u32
  IPV6_ADD_IFLIST = 29_u32
  IPV6_DEL_IFLIST = 30_u32
  IPV6_UNICAST_IF = 31_u32
  IPV6_RTHDR = 32_u32
  IPV6_GET_IFLIST = 33_u32
  IPV6_RECVRTHDR = 38_u32
  IPV6_TCLASS = 39_u32
  IPV6_RECVTCLASS = 40_u32
  IPV6_ECN = 50_u32
  IPV6_RECVECN = 50_u32
  IPV6_PKTINFO_EX = 51_u32
  IPV6_WFP_REDIRECT_RECORDS = 60_u32
  IPV6_WFP_REDIRECT_CONTEXT = 70_u32
  IPV6_MTU_DISCOVER = 71_u32
  IPV6_MTU = 72_u32
  IPV6_NRT_INTERFACE = 74_u32
  IPV6_RECVERR = 75_u32
  IPV6_USER_MTU = 76_u32
  IP_UNSPECIFIED_HOP_LIMIT = -1_i32
  IP_PROTECTION_LEVEL = 23_u32
  PROTECTION_LEVEL_UNRESTRICTED = 10_u32
  PROTECTION_LEVEL_EDGERESTRICTED = 20_u32
  PROTECTION_LEVEL_RESTRICTED = 30_u32
  PROTECTION_LEVEL_DEFAULT = 20_u32
  INET_ADDRSTRLEN = 22_u32
  INET6_ADDRSTRLEN = 65_u32
  TCP_OFFLOAD_NO_PREFERENCE = 0_u32
  TCP_OFFLOAD_NOT_PREFERRED = 1_u32
  TCP_OFFLOAD_PREFERRED = 2_u32
  TCP_EXPEDITED_1122 = 2_u32
  TCP_KEEPALIVE = 3_u32
  TCP_MAXSEG = 4_u32
  TCP_MAXRT = 5_u32
  TCP_STDURG = 6_u32
  TCP_NOURG = 7_u32
  TCP_ATMARK = 8_u32
  TCP_NOSYNRETRIES = 9_u32
  TCP_TIMESTAMPS = 10_u32
  TCP_OFFLOAD_PREFERENCE = 11_u32
  TCP_CONGESTION_ALGORITHM = 12_u32
  TCP_DELAY_FIN_ACK = 13_u32
  TCP_MAXRTMS = 14_u32
  TCP_FASTOPEN = 15_u32
  TCP_KEEPCNT = 16_u32
  TCP_KEEPIDLE = 3_u32
  TCP_KEEPINTVL = 17_u32
  TCP_FAIL_CONNECT_ON_ICMP_ERROR = 18_u32
  TCP_ICMP_ERROR_INFO = 19_u32
  UDP_SEND_MSG_SIZE = 2_u32
  UDP_RECV_MAX_COALESCED_SIZE = 3_u32
  UDP_COALESCED_INFO = 3_u32
  WINDOWS_AF_IRDA = 26_u32
  WINDOWS_PF_IRDA = 26_u32
  WCE_AF_IRDA = 22_u32
  WCE_PF_IRDA = 22_u32
  IRDA_PROTO_SOCK_STREAM = 1_u32
  PF_IRDA = 26_u16
  SOL_IRLMP = 255_u32
  IRLMP_ENUMDEVICES = 16_u32
  IRLMP_IAS_SET = 17_u32
  IRLMP_IAS_QUERY = 18_u32
  IRLMP_SEND_PDU_LEN = 19_u32
  IRLMP_EXCLUSIVE_MODE = 20_u32
  IRLMP_IRLPT_MODE = 21_u32
  IRLMP_9WIRE_MODE = 22_u32
  IRLMP_TINYTP_MODE = 23_u32
  IRLMP_PARAMETERS = 24_u32
  IRLMP_DISCOVERY_MODE = 25_u32
  IRLMP_SHARP_MODE = 32_u32
  IAS_ATTRIB_NO_CLASS = 16_u32
  IAS_ATTRIB_NO_ATTRIB = 0_u32
  IAS_ATTRIB_INT = 1_u32
  IAS_ATTRIB_OCTETSEQ = 2_u32
  IAS_ATTRIB_STR = 3_u32
  IAS_MAX_USER_STRING = 256_u32
  IAS_MAX_OCTET_STRING = 1024_u32
  IAS_MAX_CLASSNAME = 64_u32
  IAS_MAX_ATTRIBNAME = 256_u32
  LmCharSetASCII = 0_u32
  LmCharSetISO_8859_1 = 1_u32
  LmCharSetISO_8859_2 = 2_u32
  LmCharSetISO_8859_3 = 3_u32
  LmCharSetISO_8859_4 = 4_u32
  LmCharSetISO_8859_5 = 5_u32
  LmCharSetISO_8859_6 = 6_u32
  LmCharSetISO_8859_7 = 7_u32
  LmCharSetISO_8859_8 = 8_u32
  LmCharSetISO_8859_9 = 9_u32
  LmCharSetUNICODE = 255_u32
  LM_BAUD_1200 = 1200_u32
  LM_BAUD_2400 = 2400_u32
  LM_BAUD_9600 = 9600_u32
  LM_BAUD_19200 = 19200_u32
  LM_BAUD_38400 = 38400_u32
  LM_BAUD_57600 = 57600_u32
  LM_BAUD_115200 = 115200_u32
  LM_BAUD_576K = 576000_u32
  LM_BAUD_1152K = 1152000_u32
  LM_BAUD_4M = 4000000_u32
  LM_BAUD_16M = 16000000_u32
  SO_CONNDATA = 28672_u32
  SO_CONNOPT = 28673_u32
  SO_DISCDATA = 28674_u32
  SO_DISCOPT = 28675_u32
  SO_CONNDATALEN = 28676_u32
  SO_CONNOPTLEN = 28677_u32
  SO_DISCDATALEN = 28678_u32
  SO_DISCOPTLEN = 28679_u32
  SO_OPENTYPE = 28680_u32
  SO_SYNCHRONOUS_ALERT = 16_u32
  SO_SYNCHRONOUS_NONALERT = 32_u32
  SO_MAXDG = 28681_u32
  SO_MAXPATHDG = 28682_u32
  SO_UPDATE_ACCEPT_CONTEXT = 28683_u32
  SO_CONNECT_TIME = 28684_u32
  SO_UPDATE_CONNECT_CONTEXT = 28688_u32
  TCP_BSDURGENT = 28672_u32
  TF_DISCONNECT = 1_u32
  TF_REUSE_SOCKET = 2_u32
  TF_WRITE_BEHIND = 4_u32
  TF_USE_DEFAULT_WORKER = 0_u32
  TF_USE_SYSTEM_THREAD = 16_u32
  TF_USE_KERNEL_APC = 32_u32
  TP_ELEMENT_MEMORY = 1_u32
  TP_ELEMENT_FILE = 2_u32
  TP_ELEMENT_EOP = 4_u32
  TP_DISCONNECT = 1_u32
  TP_REUSE_SOCKET = 2_u32
  TP_USE_DEFAULT_WORKER = 0_u32
  TP_USE_SYSTEM_THREAD = 16_u32
  TP_USE_KERNEL_APC = 32_u32
  DE_REUSE_SOCKET = 2_u32
  NLA_ALLUSERS_NETWORK = 1_u32
  NLA_FRIENDLY_NAME = 2_u32
  SERVICE_RESOURCE = 1_u32
  SERVICE_SERVICE = 2_u32
  SERVICE_LOCAL = 4_u32
  SERVICE_FLAG_DEFER = 1_u32
  SERVICE_FLAG_HARD = 2_u32
  PROP_COMMENT = 1_u32
  PROP_LOCALE = 2_u32
  PROP_DISPLAY_HINT = 4_u32
  PROP_VERSION = 8_u32
  PROP_START_TIME = 16_u32
  PROP_MACHINE = 32_u32
  PROP_ADDRESSES = 256_u32
  PROP_SD = 512_u32
  PROP_ALL = 2147483648_u32
  SERVICE_ADDRESS_FLAG_RPC_CN = 1_u32
  SERVICE_ADDRESS_FLAG_RPC_DG = 2_u32
  SERVICE_ADDRESS_FLAG_RPC_NB = 4_u32
  NS_DEFAULT = 0_u32
  NS_VNS = 50_u32
  NSTYPE_HIERARCHICAL = 1_u32
  NSTYPE_DYNAMIC = 2_u32
  NSTYPE_ENUMERABLE = 4_u32
  NSTYPE_WORKGROUP = 8_u32
  XP_CONNECTIONLESS = 1_u32
  XP_GUARANTEED_DELIVERY = 2_u32
  XP_GUARANTEED_ORDER = 4_u32
  XP_MESSAGE_ORIENTED = 8_u32
  XP_PSEUDO_STREAM = 16_u32
  XP_GRACEFUL_CLOSE = 32_u32
  XP_EXPEDITED_DATA = 64_u32
  XP_CONNECT_DATA = 128_u32
  XP_DISCONNECT_DATA = 256_u32
  XP_SUPPORTS_BROADCAST = 512_u32
  XP_SUPPORTS_MULTICAST = 1024_u32
  XP_BANDWIDTH_ALLOCATION = 2048_u32
  XP_FRAGMENTATION = 4096_u32
  XP_ENCRYPTS = 8192_u32
  RES_SOFT_SEARCH = 1_u32
  RES_FIND_MULTIPLE = 2_u32
  RES_SERVICE = 4_u32
  SET_SERVICE_PARTIAL_SUCCESS = 1_u32
  FD_SETSIZE = 64_u32
  IMPLINK_IP = 155_u32
  IMPLINK_LOWEXPER = 156_u32
  IMPLINK_HIGHEXPER = 158_u32
  WSADESCRIPTION_LEN = 256_u32
  WSASYS_STATUS_LEN = 128_u32
  IP_DEFAULT_MULTICAST_TTL = 1_u32
  IP_DEFAULT_MULTICAST_LOOP = 1_u32
  IP_MAX_MEMBERSHIPS = 20_u32
  SOCKET_ERROR = -1_i32
  PF_UNIX = 1_u16
  PF_IMPLINK = 3_u16
  PF_PUP = 4_u16
  PF_CHAOS = 5_u16
  PF_NS = 6_u16
  PF_IPX = 6_u16
  PF_ISO = 7_u16
  PF_OSI = 7_u16
  PF_ECMA = 8_u16
  PF_DATAKIT = 9_u16
  PF_CCITT = 10_u16
  PF_SNA = 11_u16
  PF_DECnet = 12_u16
  PF_DLI = 13_u16
  PF_LAT = 14_u16
  PF_HYLINK = 15_u16
  PF_APPLETALK = 16_u16
  PF_VOICEVIEW = 18_u16
  PF_FIREFOX = 19_u16
  PF_UNKNOWN1 = 20_u16
  PF_BAN = 21_u16
  PF_MAX = 29_u16
  SOMAXCONN = 5_u32
  MSG_PEEK = 2_u32
  MSG_MAXIOVLEN = 16_u32
  MSG_PARTIAL = 32768_u32
  MAXGETHOSTSTRUCT = 1024_u32
  FD_READ = 1_u32
  FD_WRITE = 2_u32
  FD_OOB = 4_u32
  FD_ACCEPT = 8_u32
  FD_CONNECT = 16_u32
  FD_CLOSE = 32_u32
  INCL_WINSOCK_API_PROTOTYPES = 1_u32
  INCL_WINSOCK_API_TYPEDEFS = 0_u32
  FROM_PROTOCOL_INFO = -1_i32
  SO_PROTOCOL_INFOA = 8196_u32
  SO_PROTOCOL_INFOW = 8197_u32
  SO_PROTOCOL_INFO = 8197_u32
  PVD_CONFIG = 12289_u32
  PF_ATM = 22_u16
  MSG_WAITALL = 8_u32
  MSG_PUSH_IMMEDIATE = 32_u32
  MSG_INTERRUPT = 16_u32
  FD_READ_BIT = 0_u32
  FD_WRITE_BIT = 1_u32
  FD_OOB_BIT = 2_u32
  FD_ACCEPT_BIT = 3_u32
  FD_CONNECT_BIT = 4_u32
  FD_CLOSE_BIT = 5_u32
  FD_QOS_BIT = 6_u32
  FD_GROUP_QOS_BIT = 7_u32
  FD_ROUTING_INTERFACE_CHANGE_BIT = 8_u32
  FD_ADDRESS_LIST_CHANGE_BIT = 9_u32
  FD_MAX_EVENTS = 10_u32
  WSA_MAXIMUM_WAIT_EVENTS = 64_u32
  WSA_WAIT_EVENT_0 = 0_u32
  WSA_WAIT_IO_COMPLETION = 192_u32
  WSA_WAIT_FAILED = 4294967295_u32
  CF_ACCEPT = 0_u32
  CF_REJECT = 1_u32
  CF_DEFER = 2_u32
  SD_RECEIVE = 0_u32
  SD_SEND = 1_u32
  SD_BOTH = 2_u32
  SG_UNCONSTRAINED_GROUP = 1_u32
  SG_CONSTRAINED_GROUP = 2_u32
  MAX_PROTOCOL_CHAIN = 7_u32
  BASE_PROTOCOL = 1_u32
  LAYERED_PROTOCOL = 0_u32
  WSAPROTOCOL_LEN = 255_u32
  PFL_MULTIPLE_PROTO_ENTRIES = 1_u32
  PFL_RECOMMENDED_PROTO_ENTRY = 2_u32
  PFL_HIDDEN = 4_u32
  PFL_MATCHES_PROTOCOL_ZERO = 8_u32
  PFL_NETWORKDIRECT_PROVIDER = 16_u32
  XP1_CONNECTIONLESS = 1_u32
  XP1_GUARANTEED_DELIVERY = 2_u32
  XP1_GUARANTEED_ORDER = 4_u32
  XP1_MESSAGE_ORIENTED = 8_u32
  XP1_PSEUDO_STREAM = 16_u32
  XP1_GRACEFUL_CLOSE = 32_u32
  XP1_EXPEDITED_DATA = 64_u32
  XP1_CONNECT_DATA = 128_u32
  XP1_DISCONNECT_DATA = 256_u32
  XP1_SUPPORT_BROADCAST = 512_u32
  XP1_SUPPORT_MULTIPOINT = 1024_u32
  XP1_MULTIPOINT_CONTROL_PLANE = 2048_u32
  XP1_MULTIPOINT_DATA_PLANE = 4096_u32
  XP1_QOS_SUPPORTED = 8192_u32
  XP1_INTERRUPT = 16384_u32
  XP1_UNI_SEND = 32768_u32
  XP1_UNI_RECV = 65536_u32
  XP1_IFS_HANDLES = 131072_u32
  XP1_PARTIAL_MESSAGE = 262144_u32
  XP1_SAN_SUPPORT_SDP = 524288_u32
  BIGENDIAN = 0_u32
  LITTLEENDIAN = 1_u32
  SECURITY_PROTOCOL_NONE = 0_u32
  JL_SENDER_ONLY = 1_u32
  JL_RECEIVER_ONLY = 2_u32
  JL_BOTH = 4_u32
  WSA_FLAG_OVERLAPPED = 1_u32
  WSA_FLAG_MULTIPOINT_C_ROOT = 2_u32
  WSA_FLAG_MULTIPOINT_C_LEAF = 4_u32
  WSA_FLAG_MULTIPOINT_D_ROOT = 8_u32
  WSA_FLAG_MULTIPOINT_D_LEAF = 16_u32
  WSA_FLAG_ACCESS_SYSTEM_SECURITY = 64_u32
  WSA_FLAG_NO_HANDLE_INHERIT = 128_u32
  WSA_FLAG_REGISTERED_IO = 256_u32
  TH_NETDEV = 1_u32
  TH_TAPI = 2_u32
  SERVICE_MULTIPLE = 1_u32
  NS_LOCALNAME = 19_u32
  RES_UNUSED_1 = 1_u32
  RES_FLUSH_CACHE = 2_u32
  LUP_DEEP = 1_u32
  LUP_CONTAINERS = 2_u32
  LUP_NOCONTAINERS = 4_u32
  LUP_NEAREST = 8_u32
  LUP_RETURN_NAME = 16_u32
  LUP_RETURN_TYPE = 32_u32
  LUP_RETURN_VERSION = 64_u32
  LUP_RETURN_COMMENT = 128_u32
  LUP_RETURN_ADDR = 256_u32
  LUP_RETURN_BLOB = 512_u32
  LUP_RETURN_ALIASES = 1024_u32
  LUP_RETURN_QUERY_STRING = 2048_u32
  LUP_RETURN_ALL = 4080_u32
  LUP_RES_SERVICE = 32768_u32
  LUP_FLUSHCACHE = 4096_u32
  LUP_FLUSHPREVIOUS = 8192_u32
  LUP_NON_AUTHORITATIVE = 16384_u32
  LUP_SECURE = 32768_u32
  LUP_RETURN_PREFERRED_NAMES = 65536_u32
  LUP_DNS_ONLY = 131072_u32
  LUP_RETURN_RESPONSE_FLAGS = 262144_u32
  LUP_ADDRCONFIG = 1048576_u32
  LUP_DUAL_ADDR = 2097152_u32
  LUP_FILESERVER = 4194304_u32
  LUP_DISABLE_IDN_ENCODING = 8388608_u32
  LUP_API_ANSI = 16777216_u32
  LUP_EXTENDED_QUERYSET = 33554432_u32
  LUP_SECURE_WITH_FALLBACK = 67108864_u32
  LUP_EXCLUSIVE_CUSTOM_SERVERS = 134217728_u32
  LUP_REQUIRE_SECURE = 268435456_u32
  LUP_RETURN_TTL = 536870912_u32
  LUP_FORCE_CLEAR_TEXT = 1073741824_u32
  LUP_RESOLUTION_HANDLE = 2147483648_u32
  RESULT_IS_ALIAS = 1_u32
  RESULT_IS_ADDED = 16_u32
  RESULT_IS_CHANGED = 32_u32
  RESULT_IS_DELETED = 64_u32
  POLLRDNORM = 256_u32
  POLLRDBAND = 512_u32
  POLLPRI = 1024_u32
  POLLWRNORM = 16_u32
  POLLOUT = 16_u32
  POLLWRBAND = 32_u32
  POLLERR = 1_u32
  POLLHUP = 2_u32
  POLLNVAL = 4_u32
  SOCK_NOTIFY_REGISTER_EVENT_NONE = 0_u32
  SOCK_NOTIFY_REGISTER_EVENT_IN = 1_u32
  SOCK_NOTIFY_REGISTER_EVENT_OUT = 2_u32
  SOCK_NOTIFY_REGISTER_EVENT_HANGUP = 4_u32
  SOCK_NOTIFY_EVENT_IN = 1_u32
  SOCK_NOTIFY_EVENT_OUT = 2_u32
  SOCK_NOTIFY_EVENT_HANGUP = 4_u32
  SOCK_NOTIFY_EVENT_ERR = 64_u32
  SOCK_NOTIFY_EVENT_REMOVE = 128_u32
  SOCK_NOTIFY_OP_NONE = 0_u32
  SOCK_NOTIFY_OP_ENABLE = 1_u32
  SOCK_NOTIFY_OP_DISABLE = 2_u32
  SOCK_NOTIFY_OP_REMOVE = 4_u32
  SOCK_NOTIFY_TRIGGER_ONESHOT = 1_u32
  SOCK_NOTIFY_TRIGGER_PERSISTENT = 2_u32
  SOCK_NOTIFY_TRIGGER_LEVEL = 4_u32
  SOCK_NOTIFY_TRIGGER_EDGE = 8_u32
  ATMPROTO_AALUSER = 0_u32
  ATMPROTO_AAL1 = 1_u32
  ATMPROTO_AAL2 = 2_u32
  ATMPROTO_AAL34 = 3_u32
  ATMPROTO_AAL5 = 5_u32
  SAP_FIELD_ABSENT = 4294967294_u32
  SAP_FIELD_ANY = 4294967295_u32
  SAP_FIELD_ANY_AESA_SEL = 4294967290_u32
  SAP_FIELD_ANY_AESA_REST = 4294967291_u32
  ATM_E164 = 1_u32
  ATM_NSAP = 2_u32
  ATM_AESA = 2_u32
  ATM_ADDR_SIZE = 20_u32
  BLLI_L2_ISO_1745 = 1_u32
  BLLI_L2_Q921 = 2_u32
  BLLI_L2_X25L = 6_u32
  BLLI_L2_X25M = 7_u32
  BLLI_L2_ELAPB = 8_u32
  BLLI_L2_HDLC_ARM = 9_u32
  BLLI_L2_HDLC_NRM = 10_u32
  BLLI_L2_HDLC_ABM = 11_u32
  BLLI_L2_LLC = 12_u32
  BLLI_L2_X75 = 13_u32
  BLLI_L2_Q922 = 14_u32
  BLLI_L2_USER_SPECIFIED = 16_u32
  BLLI_L2_ISO_7776 = 17_u32
  BLLI_L3_X25 = 6_u32
  BLLI_L3_ISO_8208 = 7_u32
  BLLI_L3_X223 = 8_u32
  BLLI_L3_SIO_8473 = 9_u32
  BLLI_L3_T70 = 10_u32
  BLLI_L3_ISO_TR9577 = 11_u32
  BLLI_L3_USER_SPECIFIED = 16_u32
  BLLI_L3_IPI_SNAP = 128_u32
  BLLI_L3_IPI_IP = 204_u32
  BHLI_ISO = 0_u32
  BHLI_UserSpecific = 1_u32
  BHLI_HighLayerProfile = 2_u32
  BHLI_VendorSpecificAppId = 3_u32
  AAL5_MODE_MESSAGE = 1_u32
  AAL5_MODE_STREAMING = 2_u32
  AAL5_SSCS_NULL = 0_u32
  AAL5_SSCS_SSCOP_ASSURED = 1_u32
  AAL5_SSCS_SSCOP_NON_ASSURED = 2_u32
  AAL5_SSCS_FRAME_RELAY = 4_u32
  BCOB_A = 1_u32
  BCOB_C = 3_u32
  BCOB_X = 16_u32
  TT_NOIND = 0_u32
  TT_CBR = 4_u32
  TT_VBR = 8_u32
  TR_NOIND = 0_u32
  TR_END_TO_END = 1_u32
  TR_NO_END_TO_END = 2_u32
  CLIP_NOT = 0_u32
  CLIP_SUS = 32_u32
  UP_P2P = 0_u32
  UP_P2MP = 1_u32
  BLLI_L2_MODE_NORMAL = 64_u32
  BLLI_L2_MODE_EXT = 128_u32
  BLLI_L3_MODE_NORMAL = 64_u32
  BLLI_L3_MODE_EXT = 128_u32
  BLLI_L3_PACKET_16 = 4_u32
  BLLI_L3_PACKET_32 = 5_u32
  BLLI_L3_PACKET_64 = 6_u32
  BLLI_L3_PACKET_128 = 7_u32
  BLLI_L3_PACKET_256 = 8_u32
  BLLI_L3_PACKET_512 = 9_u32
  BLLI_L3_PACKET_1024 = 10_u32
  BLLI_L3_PACKET_2048 = 11_u32
  BLLI_L3_PACKET_4096 = 12_u32
  PI_ALLOWED = 0_u32
  PI_RESTRICTED = 64_u32
  PI_NUMBER_NOT_AVAILABLE = 128_u32
  SI_USER_NOT_SCREENED = 0_u32
  SI_USER_PASSED = 1_u32
  SI_USER_FAILED = 2_u32
  SI_NETWORK = 3_u32
  CAUSE_LOC_USER = 0_u32
  CAUSE_LOC_PRIVATE_LOCAL = 1_u32
  CAUSE_LOC_PUBLIC_LOCAL = 2_u32
  CAUSE_LOC_TRANSIT_NETWORK = 3_u32
  CAUSE_LOC_PUBLIC_REMOTE = 4_u32
  CAUSE_LOC_PRIVATE_REMOTE = 5_u32
  CAUSE_LOC_INTERNATIONAL_NETWORK = 7_u32
  CAUSE_LOC_BEYOND_INTERWORKING = 10_u32
  CAUSE_UNALLOCATED_NUMBER = 1_u32
  CAUSE_NO_ROUTE_TO_TRANSIT_NETWORK = 2_u32
  CAUSE_NO_ROUTE_TO_DESTINATION = 3_u32
  CAUSE_VPI_VCI_UNACCEPTABLE = 10_u32
  CAUSE_NORMAL_CALL_CLEARING = 16_u32
  CAUSE_USER_BUSY = 17_u32
  CAUSE_NO_USER_RESPONDING = 18_u32
  CAUSE_CALL_REJECTED = 21_u32
  CAUSE_NUMBER_CHANGED = 22_u32
  CAUSE_USER_REJECTS_CLIR = 23_u32
  CAUSE_DESTINATION_OUT_OF_ORDER = 27_u32
  CAUSE_INVALID_NUMBER_FORMAT = 28_u32
  CAUSE_STATUS_ENQUIRY_RESPONSE = 30_u32
  CAUSE_NORMAL_UNSPECIFIED = 31_u32
  CAUSE_VPI_VCI_UNAVAILABLE = 35_u32
  CAUSE_NETWORK_OUT_OF_ORDER = 38_u32
  CAUSE_TEMPORARY_FAILURE = 41_u32
  CAUSE_ACCESS_INFORMAION_DISCARDED = 43_u32
  CAUSE_NO_VPI_VCI_AVAILABLE = 45_u32
  CAUSE_RESOURCE_UNAVAILABLE = 47_u32
  CAUSE_QOS_UNAVAILABLE = 49_u32
  CAUSE_USER_CELL_RATE_UNAVAILABLE = 51_u32
  CAUSE_BEARER_CAPABILITY_UNAUTHORIZED = 57_u32
  CAUSE_BEARER_CAPABILITY_UNAVAILABLE = 58_u32
  CAUSE_OPTION_UNAVAILABLE = 63_u32
  CAUSE_BEARER_CAPABILITY_UNIMPLEMENTED = 65_u32
  CAUSE_UNSUPPORTED_TRAFFIC_PARAMETERS = 73_u32
  CAUSE_INVALID_CALL_REFERENCE = 81_u32
  CAUSE_CHANNEL_NONEXISTENT = 82_u32
  CAUSE_INCOMPATIBLE_DESTINATION = 88_u32
  CAUSE_INVALID_ENDPOINT_REFERENCE = 89_u32
  CAUSE_INVALID_TRANSIT_NETWORK_SELECTION = 91_u32
  CAUSE_TOO_MANY_PENDING_ADD_PARTY = 92_u32
  CAUSE_AAL_PARAMETERS_UNSUPPORTED = 93_u32
  CAUSE_MANDATORY_IE_MISSING = 96_u32
  CAUSE_UNIMPLEMENTED_MESSAGE_TYPE = 97_u32
  CAUSE_UNIMPLEMENTED_IE = 99_u32
  CAUSE_INVALID_IE_CONTENTS = 100_u32
  CAUSE_INVALID_STATE_FOR_MESSAGE = 101_u32
  CAUSE_RECOVERY_ON_TIMEOUT = 102_u32
  CAUSE_INCORRECT_MESSAGE_LENGTH = 104_u32
  CAUSE_PROTOCOL_ERROR = 111_u32
  CAUSE_COND_UNKNOWN = 0_u32
  CAUSE_COND_PERMANENT = 1_u32
  CAUSE_COND_TRANSIENT = 2_u32
  CAUSE_REASON_USER = 0_u32
  CAUSE_REASON_IE_MISSING = 4_u32
  CAUSE_REASON_IE_INSUFFICIENT = 8_u32
  CAUSE_PU_PROVIDER = 0_u32
  CAUSE_PU_USER = 8_u32
  CAUSE_NA_NORMAL = 0_u32
  CAUSE_NA_ABNORMAL = 4_u32
  QOS_CLASS0 = 0_u32
  QOS_CLASS1 = 1_u32
  QOS_CLASS2 = 2_u32
  QOS_CLASS3 = 3_u32
  QOS_CLASS4 = 4_u32
  TNS_TYPE_NATIONAL = 64_u32
  TNS_PLAN_CARRIER_ID_CODE = 1_u32
  SIO_GET_NUMBER_OF_ATM_DEVICES = 1343619073_u32
  SIO_GET_ATM_ADDRESS = 3491102722_u32
  SIO_ASSOCIATE_PVC = 2417360899_u32
  SIO_GET_ATM_CONNECTION_ID = 1343619076_u32
  WSPDESCRIPTION_LEN = 255_u32
  WSS_OPERATION_IN_PROGRESS = 259_i32
  LSP_SYSTEM = 2147483648_u32
  LSP_INSPECTOR = 1_u32
  LSP_REDIRECTOR = 2_u32
  LSP_PROXY = 4_u32
  LSP_FIREWALL = 8_u32
  LSP_INBOUND_MODIFY = 16_u32
  LSP_OUTBOUND_MODIFY = 32_u32
  LSP_CRYPTO_COMPRESS = 64_u32
  LSP_LOCAL_CACHE = 128_u32
  UDP_NOCHECKSUM = 1_u32
  UDP_CHECKSUM_COVERAGE = 20_u32
  GAI_STRERROR_BUFFER_SIZE = 1024_u32
  IPX_PTYPE = 16384_u32
  IPX_FILTERPTYPE = 16385_u32
  IPX_STOPFILTERPTYPE = 16387_u32
  IPX_DSTYPE = 16386_u32
  IPX_EXTENDED_ADDRESS = 16388_u32
  IPX_RECVHDR = 16389_u32
  IPX_MAXSIZE = 16390_u32
  IPX_ADDRESS = 16391_u32
  IPX_GETNETINFO = 16392_u32
  IPX_GETNETINFO_NORIP = 16393_u32
  IPX_SPXGETCONNECTIONSTATUS = 16395_u32
  IPX_ADDRESS_NOTIFY = 16396_u32
  IPX_MAX_ADAPTER_NUM = 16397_u32
  IPX_RERIPNETNUMBER = 16398_u32
  IPX_RECEIVE_BROADCAST = 16399_u32
  IPX_IMMEDIATESPXACK = 16400_u32
  IPPROTO_RM = 113_u32
  MAX_MCAST_TTL = 255_u32
  RM_OPTIONSBASE = 1000_u32
  RM_RATE_WINDOW_SIZE = 1001_u32
  RM_SET_MESSAGE_BOUNDARY = 1002_u32
  RM_FLUSHCACHE = 1003_u32
  RM_SENDER_WINDOW_ADVANCE_METHOD = 1004_u32
  RM_SENDER_STATISTICS = 1005_u32
  RM_LATEJOIN = 1006_u32
  RM_SET_SEND_IF = 1007_u32
  RM_ADD_RECEIVE_IF = 1008_u32
  RM_DEL_RECEIVE_IF = 1009_u32
  RM_SEND_WINDOW_ADV_RATE = 1010_u32
  RM_USE_FEC = 1011_u32
  RM_SET_MCAST_TTL = 1012_u32
  RM_RECEIVER_STATISTICS = 1013_u32
  RM_HIGH_SPEED_INTRANET_OPT = 1014_u32
  SENDER_DEFAULT_RATE_KBITS_PER_SEC = 56_u32
  SENDER_DEFAULT_WINDOW_ADV_PERCENTAGE = 15_u32
  MAX_WINDOW_INCREMENT_PERCENTAGE = 25_u32
  SENDER_DEFAULT_LATE_JOINER_PERCENTAGE = 0_u32
  SENDER_MAX_LATE_JOINER_PERCENTAGE = 75_u32
  BITS_PER_BYTE = 8_u32
  LOG2_BITS_PER_BYTE = 3_u32
  UNIX_PATH_MAX = 108_u32
  ISOPROTO_TP0 = 25_u32
  ISOPROTO_TP1 = 26_u32
  ISOPROTO_TP2 = 27_u32
  ISOPROTO_TP3 = 28_u32
  ISOPROTO_TP4 = 29_u32
  ISOPROTO_TP = 29_u32
  ISOPROTO_CLTP = 30_u32
  ISOPROTO_CLNP = 31_u32
  ISOPROTO_X25 = 32_u32
  ISOPROTO_INACT_NL = 33_u32
  ISOPROTO_ESIS = 34_u32
  ISOPROTO_INTRAISIS = 35_u32
  ISO_MAX_ADDR_LENGTH = 64_u32
  ISO_HIERARCHICAL = 0_u32
  ISO_NON_HIERARCHICAL = 1_u32
  ISO_EXP_DATA_USE = 0_u32
  ISO_EXP_DATA_NUSE = 1_u32
  NSPROTO_IPX = 1000_u32
  NSPROTO_SPX = 1256_u32
  NSPROTO_SPXII = 1257_u32
  NETBIOS_NAME_LENGTH = 16_u32
  NETBIOS_UNIQUE_NAME = 0_u32
  NETBIOS_GROUP_NAME = 1_u32
  NETBIOS_TYPE_QUICK_UNIQUE = 2_u32
  NETBIOS_TYPE_QUICK_GROUP = 3_u32
  VNSPROTO_IPC = 1_u32
  VNSPROTO_RELIABLE_IPC = 2_u32
  VNSPROTO_SPP = 3_u32
  INVALID_SOCKET = 4294967295_u32
  WSA_INFINITE = 4294967295_u32
  IOC_INOUT = 3221225472_u32
  FIONREAD = 1074030207_i32
  FIONBIO = -2147195266_i32
  FIOASYNC = -2147195267_i32
  SIOCSHIWAT = -2147192064_i32
  SIOCGHIWAT = 1074033409_i32
  SIOCSLOWAT = -2147192062_i32
  SIOCGLOWAT = 1074033411_i32
  SIOCATMARK = 1074033415_i32
  LM_HB_Extension = 128_i32
  LM_HB1_PnP = 1_i32
  LM_HB1_PDA_Palmtop = 2_i32
  LM_HB1_Computer = 4_i32
  LM_HB1_Printer = 8_i32
  LM_HB1_Modem = 16_i32
  LM_HB1_Fax = 32_i32
  LM_HB1_LANAccess = 64_i32
  LM_HB2_Telephony = 1_i32
  LM_HB2_FileServer = 2_i32

  type RIO_BUFFERID_t = Void
  type RIO_CQ_t = Void
  type RIO_RQ_t = Void

  alias LPCONDITIONPROC = Proc(WSABUF*, WSABUF*, QOS*, QOS*, WSABUF*, WSABUF*, UInt32*, LibC::UINT_PTR, Int32)
  alias LPWSAOVERLAPPED_COMPLETION_ROUTINE = Proc(UInt32, UInt32, OVERLAPPED*, UInt32, Void)
  alias LPFN_TRANSMITFILE = Proc(SOCKET, LibC::HANDLE, UInt32, UInt32, OVERLAPPED*, TRANSMIT_FILE_BUFFERS*, UInt32, LibC::BOOL)
  alias LPFN_ACCEPTEX = Proc(SOCKET, SOCKET, Void*, UInt32, UInt32, UInt32, UInt32*, OVERLAPPED*, LibC::BOOL)
  alias LPFN_GETACCEPTEXSOCKADDRS = Proc(Void*, UInt32, UInt32, UInt32, SOCKADDR**, Int32*, SOCKADDR**, Int32*, Void)
  alias LPFN_TRANSMITPACKETS = Proc(SOCKET, TRANSMIT_PACKETS_ELEMENT*, UInt32, UInt32, OVERLAPPED*, UInt32, LibC::BOOL)
  alias LPFN_CONNECTEX = Proc(SOCKET, SOCKADDR*, Int32, Void*, UInt32, UInt32*, OVERLAPPED*, LibC::BOOL)
  alias LPFN_DISCONNECTEX = Proc(SOCKET, OVERLAPPED*, UInt32, UInt32, LibC::BOOL)
  alias LPFN_WSARECVMSG = Proc(SOCKET, WSAMSG*, UInt32*, OVERLAPPED*, LPWSAOVERLAPPED_COMPLETION_ROUTINE, Int32)
  alias LPFN_WSASENDMSG = Proc(SOCKET, WSAMSG*, UInt32, UInt32*, OVERLAPPED*, LPWSAOVERLAPPED_COMPLETION_ROUTINE, Int32)
  alias LPFN_WSAPOLL = Proc(WSAPOLLFD*, UInt32, Int32, Int32)
  alias LPFN_RIORECEIVE = Proc(RIO_RQ_t*, RIO_BUF*, UInt32, UInt32, Void*, LibC::BOOL)
  alias LPFN_RIORECEIVEEX = Proc(RIO_RQ_t*, RIO_BUF*, UInt32, RIO_BUF*, RIO_BUF*, RIO_BUF*, RIO_BUF*, UInt32, Void*, Int32)
  alias LPFN_RIOSEND = Proc(RIO_RQ_t*, RIO_BUF*, UInt32, UInt32, Void*, LibC::BOOL)
  alias LPFN_RIOSENDEX = Proc(RIO_RQ_t*, RIO_BUF*, UInt32, RIO_BUF*, RIO_BUF*, RIO_BUF*, RIO_BUF*, UInt32, Void*, LibC::BOOL)
  alias LPFN_RIOCLOSECOMPLETIONQUEUE = Proc(RIO_CQ_t*, Void)
  alias LPFN_RIOCREATECOMPLETIONQUEUE = Proc(UInt32, RIO_NOTIFICATION_COMPLETION*, RIO_CQ_t*)
  alias LPFN_RIOCREATEREQUESTQUEUE = Proc(SOCKET, UInt32, UInt32, UInt32, UInt32, RIO_CQ_t*, RIO_CQ_t*, Void*, RIO_RQ_t*)
  alias LPFN_RIODEQUEUECOMPLETION = Proc(RIO_CQ_t*, RIORESULT*, UInt32, UInt32)
  alias LPFN_RIODEREGISTERBUFFER = Proc(RIO_BUFFERID_t*, Void)
  alias LPFN_RIONOTIFY = Proc(RIO_CQ_t*, Int32)
  alias LPFN_RIOREGISTERBUFFER = Proc(PSTR, UInt32, RIO_BUFFERID_t*)
  alias LPFN_RIORESIZECOMPLETIONQUEUE = Proc(RIO_CQ_t*, UInt32, LibC::BOOL)
  alias LPFN_RIORESIZEREQUESTQUEUE = Proc(RIO_RQ_t*, UInt32, UInt32, LibC::BOOL)
  alias LPBLOCKINGCALLBACK = Proc(LibC::UINT_PTR, LibC::BOOL)
  alias LPWSAUSERAPC = Proc(LibC::UINT_PTR, Void)
  alias LPWSPACCEPT = Proc(SOCKET, SOCKADDR*, Int32*, LPCONDITIONPROC, LibC::UINT_PTR, Int32*, SOCKET)
  alias LPWSPADDRESSTOSTRING = Proc(SOCKADDR*, UInt32, WSAPROTOCOL_INFOW*, Char*, UInt32*, Int32*, Int32)
  alias LPWSPASYNCSELECT = Proc(SOCKET, LibC::HANDLE, UInt32, Int32, Int32*, Int32)
  alias LPWSPBIND = Proc(SOCKET, SOCKADDR*, Int32, Int32*, Int32)
  alias LPWSPCANCELBLOCKINGCALL = Proc(Int32*, Int32)
  alias LPWSPCLEANUP = Proc(Int32*, Int32)
  alias LPWSPCLOSESOCKET = Proc(SOCKET, Int32*, Int32)
  alias LPWSPCONNECT = Proc(SOCKET, SOCKADDR*, Int32, WSABUF*, WSABUF*, QOS*, QOS*, Int32*, Int32)
  alias LPWSPDUPLICATESOCKET = Proc(SOCKET, UInt32, WSAPROTOCOL_INFOW*, Int32*, Int32)
  alias LPWSPENUMNETWORKEVENTS = Proc(SOCKET, LibC::HANDLE, WSANETWORKEVENTS*, Int32*, Int32)
  alias LPWSPEVENTSELECT = Proc(SOCKET, LibC::HANDLE, Int32, Int32*, Int32)
  alias LPWSPGETOVERLAPPEDRESULT = Proc(SOCKET, OVERLAPPED*, UInt32*, LibC::BOOL, UInt32*, Int32*, LibC::BOOL)
  alias LPWSPGETPEERNAME = Proc(SOCKET, SOCKADDR*, Int32*, Int32*, Int32)
  alias LPWSPGETSOCKNAME = Proc(SOCKET, SOCKADDR*, Int32*, Int32*, Int32)
  alias LPWSPGETSOCKOPT = Proc(SOCKET, Int32, Int32, PSTR, Int32*, Int32*, Int32)
  alias LPWSPGETQOSBYNAME = Proc(SOCKET, WSABUF*, QOS*, Int32*, LibC::BOOL)
  alias LPWSPIOCTL = Proc(SOCKET, UInt32, Void*, UInt32, Void*, UInt32, UInt32*, OVERLAPPED*, LPWSAOVERLAPPED_COMPLETION_ROUTINE, WSATHREADID*, Int32*, Int32)
  alias LPWSPJOINLEAF = Proc(SOCKET, SOCKADDR*, Int32, WSABUF*, WSABUF*, QOS*, QOS*, UInt32, Int32*, SOCKET)
  alias LPWSPLISTEN = Proc(SOCKET, Int32, Int32*, Int32)
  alias LPWSPRECV = Proc(SOCKET, WSABUF*, UInt32, UInt32*, UInt32*, OVERLAPPED*, LPWSAOVERLAPPED_COMPLETION_ROUTINE, WSATHREADID*, Int32*, Int32)
  alias LPWSPRECVDISCONNECT = Proc(SOCKET, WSABUF*, Int32*, Int32)
  alias LPWSPRECVFROM = Proc(SOCKET, WSABUF*, UInt32, UInt32*, UInt32*, SOCKADDR*, Int32*, OVERLAPPED*, LPWSAOVERLAPPED_COMPLETION_ROUTINE, WSATHREADID*, Int32*, Int32)
  alias LPWSPSELECT = Proc(Int32, Fd_set*, Fd_set*, Fd_set*, Timeval*, Int32*, Int32)
  alias LPWSPSEND = Proc(SOCKET, WSABUF*, UInt32, UInt32*, UInt32, OVERLAPPED*, LPWSAOVERLAPPED_COMPLETION_ROUTINE, WSATHREADID*, Int32*, Int32)
  alias LPWSPSENDDISCONNECT = Proc(SOCKET, WSABUF*, Int32*, Int32)
  alias LPWSPSENDTO = Proc(SOCKET, WSABUF*, UInt32, UInt32*, UInt32, SOCKADDR*, Int32, OVERLAPPED*, LPWSAOVERLAPPED_COMPLETION_ROUTINE, WSATHREADID*, Int32*, Int32)
  alias LPWSPSETSOCKOPT = Proc(SOCKET, Int32, Int32, PSTR, Int32, Int32*, Int32)
  alias LPWSPSHUTDOWN = Proc(SOCKET, Int32, Int32*, Int32)
  alias LPWSPSOCKET = Proc(Int32, Int32, Int32, WSAPROTOCOL_INFOW*, UInt32, UInt32, Int32*, SOCKET)
  alias LPWSPSTRINGTOADDRESS = Proc(LibC::LPWSTR, Int32, WSAPROTOCOL_INFOW*, SOCKADDR*, Int32*, Int32*, Int32)
  alias LPWPUCLOSEEVENT = Proc(LibC::HANDLE, Int32*, LibC::BOOL)
  alias LPWPUCLOSESOCKETHANDLE = Proc(SOCKET, Int32*, Int32)
  alias LPWPUCREATEEVENT = Proc(Int32*, LibC::HANDLE)
  alias LPWPUCREATESOCKETHANDLE = Proc(UInt32, LibC::UINT_PTR, Int32*, SOCKET)
  alias LPWPUFDISSET = Proc(SOCKET, Fd_set*, Int32)
  alias LPWPUGETPROVIDERPATH = Proc(Guid*, Char*, Int32*, Int32*, Int32)
  alias LPWPUMODIFYIFSHANDLE = Proc(UInt32, SOCKET, Int32*, SOCKET)
  alias LPWPUPOSTMESSAGE = Proc(LibC::HANDLE, UInt32, LibC::UINT_PTR, LPARAM, LibC::BOOL)
  alias LPWPUQUERYBLOCKINGCALLBACK = Proc(UInt32, LPBLOCKINGCALLBACK*, LibC::UINT_PTR*, Int32*, Int32)
  alias LPWPUQUERYSOCKETHANDLECONTEXT = Proc(SOCKET, LibC::UINT_PTR*, Int32*, Int32)
  alias LPWPUQUEUEAPC = Proc(WSATHREADID*, LPWSAUSERAPC, LibC::UINT_PTR, Int32*, Int32)
  alias LPWPURESETEVENT = Proc(LibC::HANDLE, Int32*, LibC::BOOL)
  alias LPWPUSETEVENT = Proc(LibC::HANDLE, Int32*, LibC::BOOL)
  alias LPWPUOPENCURRENTTHREAD = Proc(WSATHREADID*, Int32*, Int32)
  alias LPWPUCLOSETHREAD = Proc(WSATHREADID*, Int32*, Int32)
  alias LPWPUCOMPLETEOVERLAPPEDREQUEST = Proc(SOCKET, OVERLAPPED*, UInt32, UInt32, Int32*, Int32)
  alias LPWSPSTARTUP = Proc(UInt16, WSPData*, WSAPROTOCOL_INFOW*, WSPUPCALLTABLE, WSPPROC_TABLE*, Int32)
  alias LPWSCENUMPROTOCOLS = Proc(Int32*, WSAPROTOCOL_INFOW*, UInt32*, Int32*, Int32)
  alias LPWSCDEINSTALLPROVIDER = Proc(Guid*, Int32*, Int32)
  alias LPWSCINSTALLPROVIDER = Proc(Guid*, LibC::LPWSTR, WSAPROTOCOL_INFOW*, UInt32, Int32*, Int32)
  alias LPWSCGETPROVIDERPATH = Proc(Guid*, Char*, Int32*, Int32*, Int32)
  alias LPWSCUPDATEPROVIDER = Proc(Guid*, LibC::LPWSTR, WSAPROTOCOL_INFOW*, UInt32, Int32*, Int32)
  alias LPWSCINSTALLNAMESPACE = Proc(LibC::LPWSTR, LibC::LPWSTR, UInt32, UInt32, Guid*, Int32)
  alias LPWSCUNINSTALLNAMESPACE = Proc(Guid*, Int32)
  alias LPWSCENABLENSPROVIDER = Proc(Guid*, LibC::BOOL, Int32)
  alias LPNSPCLEANUP = Proc(Guid*, Int32)
  alias LPNSPLOOKUPSERVICEBEGIN = Proc(Guid*, WSAQUERYSETW*, WSASERVICECLASSINFOW*, UInt32, LibC::HANDLE*, Int32)
  alias LPNSPLOOKUPSERVICENEXT = Proc(LibC::HANDLE, UInt32, UInt32*, WSAQUERYSETW*, Int32)
  alias LPNSPIOCTL = Proc(LibC::HANDLE, UInt32, Void*, UInt32, Void*, UInt32, UInt32*, WSACOMPLETION*, WSATHREADID*, Int32)
  alias LPNSPLOOKUPSERVICEEND = Proc(LibC::HANDLE, Int32)
  alias LPNSPSETSERVICE = Proc(Guid*, WSASERVICECLASSINFOW*, WSAQUERYSETW*, WSAESETSERVICEOP, UInt32, Int32)
  alias LPNSPINSTALLSERVICECLASS = Proc(Guid*, WSASERVICECLASSINFOW*, Int32)
  alias LPNSPREMOVESERVICECLASS = Proc(Guid*, Guid*, Int32)
  alias LPNSPGETSERVICECLASSINFO = Proc(Guid*, UInt32*, WSASERVICECLASSINFOW*, Int32)
  alias LPNSPSTARTUP = Proc(Guid*, NSP_ROUTINE*, Int32)
  alias LPNSPV2STARTUP = Proc(Guid*, Void**, Int32)
  alias LPNSPV2CLEANUP = Proc(Guid*, Void*, Int32)
  alias LPNSPV2LOOKUPSERVICEBEGIN = Proc(Guid*, WSAQUERYSET2W*, UInt32, Void*, LibC::HANDLE*, Int32)
  alias LPNSPV2LOOKUPSERVICENEXTEX = Proc(LibC::HANDLE, LibC::HANDLE, UInt32, UInt32*, WSAQUERYSET2W*, Void)
  alias LPNSPV2LOOKUPSERVICEEND = Proc(LibC::HANDLE, Int32)
  alias LPNSPV2SETSERVICEEX = Proc(LibC::HANDLE, Guid*, WSAQUERYSET2W*, WSAESETSERVICEOP, UInt32, Void*, Void)
  alias LPNSPV2CLIENTSESSIONRUNDOWN = Proc(Guid*, Void*, Void)
  alias LPFN_NSPAPI = Proc(UInt32)
  alias LPSERVICE_CALLBACK_PROC = Proc(LPARAM, LibC::HANDLE, Void)
  alias LPLOOKUPSERVICE_COMPLETION_ROUTINE = Proc(UInt32, UInt32, OVERLAPPED*, Void)
  alias LPWSCWRITEPROVIDERORDER = Proc(UInt32*, UInt32, Int32)
  alias LPWSCWRITENAMESPACEORDER = Proc(Guid*, UInt32, Int32)


  enum WSA_ERROR : Int32
    WSA_IO_PENDING = 997
    WSA_IO_INCOMPLETE = 996
    WSA_INVALID_HANDLE = 6
    WSA_INVALID_PARAMETER = 87
    WSA_NOT_ENOUGH_MEMORY = 8
    WSA_OPERATION_ABORTED = 995
    WSABASEERR = 10000
    WSAEINTR = 10004
    WSAEBADF = 10009
    WSAEACCES = 10013
    WSAEFAULT = 10014
    WSAEINVAL = 10022
    WSAEMFILE = 10024
    WSAEWOULDBLOCK = 10035
    WSAEINPROGRESS = 10036
    WSAEALREADY = 10037
    WSAENOTSOCK = 10038
    WSAEDESTADDRREQ = 10039
    WSAEMSGSIZE = 10040
    WSAEPROTOTYPE = 10041
    WSAENOPROTOOPT = 10042
    WSAEPROTONOSUPPORT = 10043
    WSAESOCKTNOSUPPORT = 10044
    WSAEOPNOTSUPP = 10045
    WSAEPFNOSUPPORT = 10046
    WSAEAFNOSUPPORT = 10047
    WSAEADDRINUSE = 10048
    WSAEADDRNOTAVAIL = 10049
    WSAENETDOWN = 10050
    WSAENETUNREACH = 10051
    WSAENETRESET = 10052
    WSAECONNABORTED = 10053
    WSAECONNRESET = 10054
    WSAENOBUFS = 10055
    WSAEISCONN = 10056
    WSAENOTCONN = 10057
    WSAESHUTDOWN = 10058
    WSAETOOMANYREFS = 10059
    WSAETIMEDOUT = 10060
    WSAECONNREFUSED = 10061
    WSAELOOP = 10062
    WSAENAMETOOLONG = 10063
    WSAEHOSTDOWN = 10064
    WSAEHOSTUNREACH = 10065
    WSAENOTEMPTY = 10066
    WSAEPROCLIM = 10067
    WSAEUSERS = 10068
    WSAEDQUOT = 10069
    WSAESTALE = 10070
    WSAEREMOTE = 10071
    WSASYSNOTREADY = 10091
    WSAVERNOTSUPPORTED = 10092
    WSANOTINITIALISED = 10093
    WSAEDISCON = 10101
    WSAENOMORE = 10102
    WSAECANCELLED = 10103
    WSAEINVALIDPROCTABLE = 10104
    WSAEINVALIDPROVIDER = 10105
    WSAEPROVIDERFAILEDINIT = 10106
    WSASYSCALLFAILURE = 10107
    WSASERVICE_NOT_FOUND = 10108
    WSATYPE_NOT_FOUND = 10109
    WSA_E_NO_MORE = 10110
    WSA_E_CANCELLED = 10111
    WSAEREFUSED = 10112
    WSAHOST_NOT_FOUND = 11001
    WSATRY_AGAIN = 11002
    WSANO_RECOVERY = 11003
    WSANO_DATA = 11004
    WSA_QOS_RECEIVERS = 11005
    WSA_QOS_SENDERS = 11006
    WSA_QOS_NO_SENDERS = 11007
    WSA_QOS_NO_RECEIVERS = 11008
    WSA_QOS_REQUEST_CONFIRMED = 11009
    WSA_QOS_ADMISSION_FAILURE = 11010
    WSA_QOS_POLICY_FAILURE = 11011
    WSA_QOS_BAD_STYLE = 11012
    WSA_QOS_BAD_OBJECT = 11013
    WSA_QOS_TRAFFIC_CTRL_ERROR = 11014
    WSA_QOS_GENERIC_ERROR = 11015
    WSA_QOS_ESERVICETYPE = 11016
    WSA_QOS_EFLOWSPEC = 11017
    WSA_QOS_EPROVSPECBUF = 11018
    WSA_QOS_EFILTERSTYLE = 11019
    WSA_QOS_EFILTERTYPE = 11020
    WSA_QOS_EFILTERCOUNT = 11021
    WSA_QOS_EOBJLENGTH = 11022
    WSA_QOS_EFLOWCOUNT = 11023
    WSA_QOS_EUNKOWNPSOBJ = 11024
    WSA_QOS_EPOLICYOBJ = 11025
    WSA_QOS_EFLOWDESC = 11026
    WSA_QOS_EPSFLOWSPEC = 11027
    WSA_QOS_EPSFILTERSPEC = 11028
    WSA_QOS_ESDMODEOBJ = 11029
    WSA_QOS_ESHAPERATEOBJ = 11030
    WSA_QOS_RESERVED_PETYPE = 11031
    WSA_SECURE_HOST_NOT_FOUND = 11032
    WSA_IPSEC_NAME_POLICY_ERROR = 11033
  end

  enum SET_SERVICE_OPERATION : UInt32
    SERVICE_REGISTER = 1
    SERVICE_DEREGISTER = 2
    SERVICE_FLUSH = 3
    SERVICE_ADD_TYPE = 4
    SERVICE_DELETE_TYPE = 5
  end

  enum SEND_FLAGS : UInt32
    MSG_DONTROUTE = 4
    MSG_OOB = 1
  end

  enum RESOURCE_DISPLAY_TYPE : UInt32
    RESOURCEDISPLAYTYPE_DOMAIN = 1
    RESOURCEDISPLAYTYPE_FILE = 4
    RESOURCEDISPLAYTYPE_GENERIC = 0
    RESOURCEDISPLAYTYPE_GROUP = 5
    RESOURCEDISPLAYTYPE_SERVER = 2
    RESOURCEDISPLAYTYPE_SHARE = 3
    RESOURCEDISPLAYTYPE_TREE = 10
  end

  enum IPPROTO : Int32
    IPPROTO_HOPOPTS = 0
    IPPROTO_ICMP = 1
    IPPROTO_IGMP = 2
    IPPROTO_GGP = 3
    IPPROTO_IPV4 = 4
    IPPROTO_ST = 5
    IPPROTO_TCP = 6
    IPPROTO_CBT = 7
    IPPROTO_EGP = 8
    IPPROTO_IGP = 9
    IPPROTO_PUP = 12
    IPPROTO_UDP = 17
    IPPROTO_IDP = 22
    IPPROTO_RDP = 27
    IPPROTO_IPV6 = 41
    IPPROTO_ROUTING = 43
    IPPROTO_FRAGMENT = 44
    IPPROTO_ESP = 50
    IPPROTO_AH = 51
    IPPROTO_ICMPV6 = 58
    IPPROTO_NONE = 59
    IPPROTO_DSTOPTS = 60
    IPPROTO_ND = 77
    IPPROTO_ICLFXBM = 78
    IPPROTO_PIM = 103
    IPPROTO_PGM = 113
    IPPROTO_L2TP = 115
    IPPROTO_SCTP = 132
    IPPROTO_RAW = 255
    IPPROTO_MAX = 256
    IPPROTO_RESERVED_RAW = 257
    IPPROTO_RESERVED_IPSEC = 258
    IPPROTO_RESERVED_IPSECOFFLOAD = 259
    IPPROTO_RESERVED_WNV = 260
    IPPROTO_RESERVED_MAX = 261
  end

  enum SCOPE_LEVEL : Int32
    ScopeLevelInterface = 1
    ScopeLevelLink = 2
    ScopeLevelSubnet = 3
    ScopeLevelAdmin = 4
    ScopeLevelSite = 5
    ScopeLevelOrganization = 8
    ScopeLevelGlobal = 14
    ScopeLevelCount = 16
  end

  enum WSACOMPLETIONTYPE : Int32
    NSP_NOTIFY_IMMEDIATELY = 0
    NSP_NOTIFY_HWND = 1
    NSP_NOTIFY_EVENT = 2
    NSP_NOTIFY_PORT = 3
    NSP_NOTIFY_APC = 4
  end

  enum WSAECOMPARATOR : Int32
    COMP_EQUAL = 0
    COMP_NOTLESS = 1
  end

  enum WSAESETSERVICEOP : Int32
    RNRSERVICE_REGISTER = 0
    RNRSERVICE_DEREGISTER = 1
    RNRSERVICE_DELETE = 2
  end

  enum PMTUD_STATE : Int32
    IP_PMTUDISC_NOT_SET = 0
    IP_PMTUDISC_DO = 1
    IP_PMTUDISC_DONT = 2
    IP_PMTUDISC_PROBE = 3
    IP_PMTUDISC_MAX = 4
  end

  enum MULTICAST_MODE_TYPE : Int32
    MCAST_INCLUDE = 0
    MCAST_EXCLUDE = 1
  end

  enum Ewindow_advance_method : Int32
    E_WINDOW_ADVANCE_BY_TIME = 1
    E_WINDOW_USE_AS_DATA_CACHE = 2
  end

  enum NL_PREFIX_ORIGIN : Int32
    IpPrefixOriginOther = 0
    IpPrefixOriginManual = 1
    IpPrefixOriginWellKnown = 2
    IpPrefixOriginDhcp = 3
    IpPrefixOriginRouterAdvertisement = 4
    IpPrefixOriginUnchanged = 16
  end

  enum NL_SUFFIX_ORIGIN : Int32
    NlsoOther = 0
    NlsoManual = 1
    NlsoWellKnown = 2
    NlsoDhcp = 3
    NlsoLinkLayerAddress = 4
    NlsoRandom = 5
    IpSuffixOriginOther = 0
    IpSuffixOriginManual = 1
    IpSuffixOriginWellKnown = 2
    IpSuffixOriginDhcp = 3
    IpSuffixOriginLinkLayerAddress = 4
    IpSuffixOriginRandom = 5
    IpSuffixOriginUnchanged = 16
  end

  enum NL_DAD_STATE : Int32
    NldsInvalid = 0
    NldsTentative = 1
    NldsDuplicate = 2
    NldsDeprecated = 3
    NldsPreferred = 4
    IpDadStateInvalid = 0
    IpDadStateTentative = 1
    IpDadStateDuplicate = 2
    IpDadStateDeprecated = 3
    IpDadStatePreferred = 4
  end

  enum NL_ROUTE_PROTOCOL : Int32
    RouteProtocolOther = 1
    RouteProtocolLocal = 2
    RouteProtocolNetMgmt = 3
    RouteProtocolIcmp = 4
    RouteProtocolEgp = 5
    RouteProtocolGgp = 6
    RouteProtocolHello = 7
    RouteProtocolRip = 8
    RouteProtocolIsIs = 9
    RouteProtocolEsIs = 10
    RouteProtocolCisco = 11
    RouteProtocolBbn = 12
    RouteProtocolOspf = 13
    RouteProtocolBgp = 14
    RouteProtocolIdpr = 15
    RouteProtocolEigrp = 16
    RouteProtocolDvmrp = 17
    RouteProtocolRpl = 18
    RouteProtocolDhcp = 19
    MIB_IPPROTO_OTHER = 1
    PROTO_IP_OTHER = 1
    MIB_IPPROTO_LOCAL = 2
    PROTO_IP_LOCAL = 2
    MIB_IPPROTO_NETMGMT = 3
    PROTO_IP_NETMGMT = 3
    MIB_IPPROTO_ICMP = 4
    PROTO_IP_ICMP = 4
    MIB_IPPROTO_EGP = 5
    PROTO_IP_EGP = 5
    MIB_IPPROTO_GGP = 6
    PROTO_IP_GGP = 6
    MIB_IPPROTO_HELLO = 7
    PROTO_IP_HELLO = 7
    MIB_IPPROTO_RIP = 8
    PROTO_IP_RIP = 8
    MIB_IPPROTO_IS_IS = 9
    PROTO_IP_IS_IS = 9
    MIB_IPPROTO_ES_IS = 10
    PROTO_IP_ES_IS = 10
    MIB_IPPROTO_CISCO = 11
    PROTO_IP_CISCO = 11
    MIB_IPPROTO_BBN = 12
    PROTO_IP_BBN = 12
    MIB_IPPROTO_OSPF = 13
    PROTO_IP_OSPF = 13
    MIB_IPPROTO_BGP = 14
    PROTO_IP_BGP = 14
    MIB_IPPROTO_IDPR = 15
    PROTO_IP_IDPR = 15
    MIB_IPPROTO_EIGRP = 16
    PROTO_IP_EIGRP = 16
    MIB_IPPROTO_DVMRP = 17
    PROTO_IP_DVMRP = 17
    MIB_IPPROTO_RPL = 18
    PROTO_IP_RPL = 18
    MIB_IPPROTO_DHCP = 19
    PROTO_IP_DHCP = 19
    MIB_IPPROTO_NT_AUTOSTATIC = 10002
    PROTO_IP_NT_AUTOSTATIC = 10002
    MIB_IPPROTO_NT_STATIC = 10006
    PROTO_IP_NT_STATIC = 10006
    MIB_IPPROTO_NT_STATIC_NON_DOD = 10007
    PROTO_IP_NT_STATIC_NON_DOD = 10007
  end

  enum NL_ADDRESS_TYPE : Int32
    NlatUnspecified = 0
    NlatUnicast = 1
    NlatAnycast = 2
    NlatMulticast = 3
    NlatBroadcast = 4
    NlatInvalid = 5
  end

  enum NL_ROUTE_ORIGIN : Int32
    NlroManual = 0
    NlroWellKnown = 1
    NlroDHCP = 2
    NlroRouterAdvertisement = 3
    Nlro6to4 = 4
  end

  enum NL_NEIGHBOR_STATE : Int32
    NlnsUnreachable = 0
    NlnsIncomplete = 1
    NlnsProbe = 2
    NlnsDelay = 3
    NlnsStale = 4
    NlnsReachable = 5
    NlnsPermanent = 6
    NlnsMaximum = 7
  end

  enum NL_LINK_LOCAL_ADDRESS_BEHAVIOR : Int32
    LinkLocalAlwaysOff = 0
    LinkLocalDelayed = 1
    LinkLocalAlwaysOn = 2
    LinkLocalUnchanged = -1
  end

  enum NL_ROUTER_DISCOVERY_BEHAVIOR : Int32
    RouterDiscoveryDisabled = 0
    RouterDiscoveryEnabled = 1
    RouterDiscoveryDhcp = 2
    RouterDiscoveryUnchanged = -1
  end

  enum NL_BANDWIDTH_FLAG : Int32
    NlbwDisabled = 0
    NlbwEnabled = 1
    NlbwUnchanged = -1
  end

  enum NL_NETWORK_CATEGORY : Int32
    NetworkCategoryPublic = 0
    NetworkCategoryPrivate = 1
    NetworkCategoryDomainAuthenticated = 2
    NetworkCategoryUnchanged = -1
    NetworkCategoryUnknown = -1
  end

  enum NL_INTERFACE_NETWORK_CATEGORY_STATE : Int32
    NlincCategoryUnknown = 0
    NlincPublic = 1
    NlincPrivate = 2
    NlincDomainAuthenticated = 3
    NlincCategoryStateMax = 4
  end

  enum NL_NETWORK_CONNECTIVITY_LEVEL_HINT : Int32
    NetworkConnectivityLevelHintUnknown = 0
    NetworkConnectivityLevelHintNone = 1
    NetworkConnectivityLevelHintLocalAccess = 2
    NetworkConnectivityLevelHintInternetAccess = 3
    NetworkConnectivityLevelHintConstrainedInternetAccess = 4
    NetworkConnectivityLevelHintHidden = 5
  end

  enum NL_NETWORK_CONNECTIVITY_COST_HINT : Int32
    NetworkConnectivityCostHintUnknown = 0
    NetworkConnectivityCostHintUnrestricted = 1
    NetworkConnectivityCostHintFixed = 2
    NetworkConnectivityCostHintVariable = 3
  end

  enum TCPSTATE : Int32
    TCPSTATE_CLOSED = 0
    TCPSTATE_LISTEN = 1
    TCPSTATE_SYN_SENT = 2
    TCPSTATE_SYN_RCVD = 3
    TCPSTATE_ESTABLISHED = 4
    TCPSTATE_FIN_WAIT_1 = 5
    TCPSTATE_FIN_WAIT_2 = 6
    TCPSTATE_CLOSE_WAIT = 7
    TCPSTATE_CLOSING = 8
    TCPSTATE_LAST_ACK = 9
    TCPSTATE_TIME_WAIT = 10
    TCPSTATE_MAX = 11
  end

  enum CONTROL_CHANNEL_TRIGGER_STATUS : Int32
    CONTROL_CHANNEL_TRIGGER_STATUS_INVALID = 0
    CONTROL_CHANNEL_TRIGGER_STATUS_SOFTWARE_SLOT_ALLOCATED = 1
    CONTROL_CHANNEL_TRIGGER_STATUS_HARDWARE_SLOT_ALLOCATED = 2
    CONTROL_CHANNEL_TRIGGER_STATUS_POLICY_ERROR = 3
    CONTROL_CHANNEL_TRIGGER_STATUS_SYSTEM_ERROR = 4
    CONTROL_CHANNEL_TRIGGER_STATUS_TRANSPORT_DISCONNECTED = 5
    CONTROL_CHANNEL_TRIGGER_STATUS_SERVICE_UNAVAILABLE = 6
  end

  enum SOCKET_PRIORITY_HINT : Int32
    SocketPriorityHintVeryLow = 0
    SocketPriorityHintLow = 1
    SocketPriorityHintNormal = 2
    SocketMaximumPriorityHintType = 3
  end

  enum RCVALL_VALUE : Int32
    RCVALL_OFF = 0
    RCVALL_ON = 1
    RCVALL_SOCKETLEVELONLY = 2
    RCVALL_IPLEVEL = 3
  end

  enum TCP_ICW_LEVEL : Int32
    TCP_ICW_LEVEL_DEFAULT = 0
    TCP_ICW_LEVEL_HIGH = 1
    TCP_ICW_LEVEL_VERY_HIGH = 2
    TCP_ICW_LEVEL_AGGRESSIVE = 3
    TCP_ICW_LEVEL_EXPERIMENTAL = 4
    TCP_ICW_LEVEL_COMPAT = 254
    TCP_ICW_LEVEL_MAX = 255
  end

  enum SOCKET_USAGE_TYPE : Int32
    SYSTEM_CRITICAL_SOCKET = 1
  end

  enum SOCKET_SECURITY_PROTOCOL : Int32
    SOCKET_SECURITY_PROTOCOL_DEFAULT = 0
    SOCKET_SECURITY_PROTOCOL_IPSEC = 1
    SOCKET_SECURITY_PROTOCOL_IPSEC2 = 2
    SOCKET_SECURITY_PROTOCOL_INVALID = 3
  end

  enum WSA_COMPATIBILITY_BEHAVIOR_ID : Int32
    WsaBehaviorAll = 0
    WsaBehaviorReceiveBuffering = 1
    WsaBehaviorAutoTuning = 2
  end

  enum Q2931_IE_TYPE : Int32
    IE_AALParameters = 0
    IE_TrafficDescriptor = 1
    IE_BroadbandBearerCapability = 2
    IE_BHLI = 3
    IE_BLLI = 4
    IE_CalledPartyNumber = 5
    IE_CalledPartySubaddress = 6
    IE_CallingPartyNumber = 7
    IE_CallingPartySubaddress = 8
    IE_Cause = 9
    IE_QOSClass = 10
    IE_TransitNetworkSelection = 11
  end

  enum AAL_TYPE : Int32
    AALTYPE_5 = 5
    AALTYPE_USER = 16
  end

  enum NAPI_PROVIDER_TYPE : Int32
    ProviderType_Application = 1
    ProviderType_Service = 2
  end

  enum NAPI_PROVIDER_LEVEL : Int32
    ProviderLevel_None = 0
    ProviderLevel_Secondary = 1
    ProviderLevel_Primary = 2
  end

  enum NLA_BLOB_DATA_TYPE : Int32
    NLA_RAW_DATA = 0
    NLA_INTERFACE = 1
    NLA_802_1X_LOCATION = 2
    NLA_CONNECTIVITY = 3
    NLA_ICS = 4
  end

  enum NLA_CONNECTIVITY_TYPE : Int32
    NLA_NETWORK_AD_HOC = 0
    NLA_NETWORK_MANAGED = 1
    NLA_NETWORK_UNMANAGED = 2
    NLA_NETWORK_UNKNOWN = 3
  end

  enum NLA_INTERNET : Int32
    NLA_INTERNET_UNKNOWN = 0
    NLA_INTERNET_NO = 1
    NLA_INTERNET_YES = 2
  end

  enum RIO_NOTIFICATION_COMPLETION_TYPE : Int32
    RIO_EVENT_COMPLETION = 1
    RIO_IOCP_COMPLETION = 2
  end

  enum WSC_PROVIDER_INFO_TYPE : Int32
    ProviderInfoLspCategories = 0
    ProviderInfoAudit = 1
  end

  union IN_ADDR_S_un_e__Union
    s_un_b : IN_ADDR_S_un_e__Union_S_un_b_e__Struct
    s_un_w : IN_ADDR_S_un_e__Union_S_un_w_e__Struct
    s_addr : UInt32
  end
  union SCOPE_ID_Anonymous_e__Union
    anonymous : SCOPE_ID_Anonymous_e__Union_Anonymous_e__Struct
    value : UInt32
  end
  union Addrinfo_dns_server_Anonymous_e__Union
    ai_template : LibC::LPWSTR
  end
  union WSACOMPLETION_Parameters_e__Union
    window_message : WSACOMPLETION_Parameters_e__Union_WindowMessage_e__Struct
    event : WSACOMPLETION_Parameters_e__Union_Event_e__Struct
    apc : WSACOMPLETION_Parameters_e__Union_Apc_e__Struct
    port : WSACOMPLETION_Parameters_e__Union_Port_e__Struct
  end
  union IN6_ADDR_u_e__Union
    byte : UInt8[16]*
    word : UInt16[8]*
  end
  union Sockaddr_gen
    address : SOCKADDR
    address_in : SOCKADDR_IN
    address_in6 : Sockaddr_in6_old
  end
  union SOCKADDR_IN6_Anonymous_e__Union
    sin6_scope_id : UInt32
    sin6_scope_struct : SCOPE_ID
  end
  union SOCKADDR_INET
    ipv4 : SOCKADDR_IN
    ipv6 : SOCKADDR_IN6
    si_family : UInt16
  end
  union WINDOWS_IAS_SET_irdaAttribute_e__Union
    irda_attrib_int : Int32
    irda_attrib_octet_seq : WINDOWS_IAS_SET_irdaAttribute_e__Union_irdaAttribOctetSeq_e__Struct
    irda_attrib_usr_str : WINDOWS_IAS_SET_irdaAttribute_e__Union_irdaAttribUsrStr_e__Struct
  end
  union WINDOWS_IAS_QUERY_irdaAttribute_e__Union
    irda_attrib_int : Int32
    irda_attrib_octet_seq : WINDOWS_IAS_QUERY_irdaAttribute_e__Union_irdaAttribOctetSeq_e__Struct
    irda_attrib_usr_str : WINDOWS_IAS_QUERY_irdaAttribute_e__Union_irdaAttribUsrStr_e__Struct
  end
  union AAL_PARAMETERS_IE_AALSpecificParameters_e__Union
    aal5_parameters : AAL5_PARAMETERS
    aal_user_parameters : AALUSER_PARAMETERS
  end
  union TRANSMIT_PACKETS_ELEMENT_Anonymous_e__Union
    anonymous : TRANSMIT_PACKETS_ELEMENT_Anonymous_e__Union_Anonymous_e__Struct
    p_buffer : Void*
  end
  union NLA_BLOB_data_e__Union
    raw_data : CHAR[0]*
    interface_data : NLA_BLOB_data_e__Union_interfaceData_e__Struct
    location_data : NLA_BLOB_data_e__Union_locationData_e__Struct
    connectivity : NLA_BLOB_data_e__Union_connectivity_e__Struct
    ics : NLA_BLOB_data_e__Union_ICS_e__Struct
  end
  union RIO_NOTIFICATION_COMPLETION_Anonymous_e__Union
    event : RIO_NOTIFICATION_COMPLETION_Anonymous_e__Union_Event_e__Struct
    iocp : RIO_NOTIFICATION_COMPLETION_Anonymous_e__Union_Iocp_e__Struct
  end

  struct IN_ADDR
    s_un : IN_ADDR_S_un_e__Union
  end
  struct IN_ADDR_S_un_e__Union_S_un_w_e__Struct
    s_w1 : UInt16
    s_w2 : UInt16
  end
  struct IN_ADDR_S_un_e__Union_S_un_b_e__Struct
    s_b1 : UInt8
    s_b2 : UInt8
    s_b3 : UInt8
    s_b4 : UInt8
  end
  struct SOCKADDR
    sa_family : UInt16
    sa_data : CHAR[14]*
  end
  struct SOCKET_ADDRESS
    lp_sockaddr : SOCKADDR*
    i_sockaddr_length : Int32
  end
  struct SOCKET_ADDRESS_LIST
    i_address_count : Int32
    address : SOCKET_ADDRESS[0]*
  end
  struct CSADDR_INFO
    local_addr : SOCKET_ADDRESS
    remote_addr : SOCKET_ADDRESS
    i_socket_type : Int32
    i_protocol : Int32
  end
  struct SOCKADDR_STORAGE
    ss_family : UInt16
    __ss_pad1 : CHAR[6]*
    __ss_align : Int64
    __ss_pad2 : CHAR[112]*
  end
  struct SOCKADDR_STORAGE_XP
    ss_family : Int16
    __ss_pad1 : CHAR[6]*
    __ss_align : Int64
    __ss_pad2 : CHAR[112]*
  end
  struct SOCKET_PROCESSOR_AFFINITY
    processor : PROCESSOR_NUMBER
    numa_node_id : UInt16
    reserved : UInt16
  end
  struct SCOPE_ID
    anonymous : SCOPE_ID_Anonymous_e__Union
  end
  struct SCOPE_ID_Anonymous_e__Union_Anonymous_e__Struct
    _bitfield : UInt32
  end
  struct SOCKADDR_IN
    sin_family : UInt16
    sin_port : UInt16
    sin_addr : IN_ADDR
    sin_zero : CHAR[8]*
  end
  struct SOCKADDR_DL
    sdl_family : UInt16
    sdl_data : UInt8[8]*
    sdl_zero : UInt8[4]*
  end
  struct WSABUF
    len : UInt32
    buf : PSTR
  end
  struct WSAMSG
    name : SOCKADDR*
    namelen : Int32
    lp_buffers : WSABUF*
    dw_buffer_count : UInt32
    control : WSABUF
    dw_flags : UInt32
  end
  struct Cmsghdr
    cmsg_len : LibC::UINT_PTR
    cmsg_level : Int32
    cmsg_type : Int32
  end
  struct ADDRINFOA
    ai_flags : Int32
    ai_family : Int32
    ai_socktype : Int32
    ai_protocol : Int32
    ai_addrlen : LibC::UINT_PTR
    ai_canonname : PSTR
    ai_addr : SOCKADDR*
    ai_next : ADDRINFOA*
  end
  struct Addrinfow
    ai_flags : Int32
    ai_family : Int32
    ai_socktype : Int32
    ai_protocol : Int32
    ai_addrlen : LibC::UINT_PTR
    ai_canonname : LibC::LPWSTR
    ai_addr : SOCKADDR*
    ai_next : Addrinfow*
  end
  struct Addrinfoexa
    ai_flags : Int32
    ai_family : Int32
    ai_socktype : Int32
    ai_protocol : Int32
    ai_addrlen : LibC::UINT_PTR
    ai_canonname : PSTR
    ai_addr : SOCKADDR*
    ai_blob : Void*
    ai_bloblen : LibC::UINT_PTR
    ai_provider : Guid*
    ai_next : Addrinfoexa*
  end
  struct Addrinfoexw
    ai_flags : Int32
    ai_family : Int32
    ai_socktype : Int32
    ai_protocol : Int32
    ai_addrlen : LibC::UINT_PTR
    ai_canonname : LibC::LPWSTR
    ai_addr : SOCKADDR*
    ai_blob : Void*
    ai_bloblen : LibC::UINT_PTR
    ai_provider : Guid*
    ai_next : Addrinfoexw*
  end
  struct Addrinfoex2a
    ai_flags : Int32
    ai_family : Int32
    ai_socktype : Int32
    ai_protocol : Int32
    ai_addrlen : LibC::UINT_PTR
    ai_canonname : PSTR
    ai_addr : SOCKADDR*
    ai_blob : Void*
    ai_bloblen : LibC::UINT_PTR
    ai_provider : Guid*
    ai_next : Addrinfoex2a*
    ai_version : Int32
    ai_fqdn : PSTR
  end
  struct Addrinfoex2w
    ai_flags : Int32
    ai_family : Int32
    ai_socktype : Int32
    ai_protocol : Int32
    ai_addrlen : LibC::UINT_PTR
    ai_canonname : LibC::LPWSTR
    ai_addr : SOCKADDR*
    ai_blob : Void*
    ai_bloblen : LibC::UINT_PTR
    ai_provider : Guid*
    ai_next : Addrinfoex2w*
    ai_version : Int32
    ai_fqdn : LibC::LPWSTR
  end
  struct Addrinfoex3
    ai_flags : Int32
    ai_family : Int32
    ai_socktype : Int32
    ai_protocol : Int32
    ai_addrlen : LibC::UINT_PTR
    ai_canonname : LibC::LPWSTR
    ai_addr : SOCKADDR*
    ai_blob : Void*
    ai_bloblen : LibC::UINT_PTR
    ai_provider : Guid*
    ai_next : Addrinfoex3*
    ai_version : Int32
    ai_fqdn : LibC::LPWSTR
    ai_interfaceindex : Int32
  end
  struct Addrinfoex4
    ai_flags : Int32
    ai_family : Int32
    ai_socktype : Int32
    ai_protocol : Int32
    ai_addrlen : LibC::UINT_PTR
    ai_canonname : LibC::LPWSTR
    ai_addr : SOCKADDR*
    ai_blob : Void*
    ai_bloblen : LibC::UINT_PTR
    ai_provider : Guid*
    ai_next : Addrinfoex4*
    ai_version : Int32
    ai_fqdn : LibC::LPWSTR
    ai_interfaceindex : Int32
    ai_resolutionhandle : LibC::HANDLE
  end
  struct Addrinfoex5
    ai_flags : Int32
    ai_family : Int32
    ai_socktype : Int32
    ai_protocol : Int32
    ai_addrlen : LibC::UINT_PTR
    ai_canonname : LibC::LPWSTR
    ai_addr : SOCKADDR*
    ai_blob : Void*
    ai_bloblen : LibC::UINT_PTR
    ai_provider : Guid*
    ai_next : Addrinfoex5*
    ai_version : Int32
    ai_fqdn : LibC::LPWSTR
    ai_interfaceindex : Int32
    ai_resolutionhandle : LibC::HANDLE
    ai_ttl : UInt32
  end
  struct Addrinfo_dns_server
    ai_servertype : UInt32
    ai_flags : UInt64
    ai_addrlen : UInt32
    ai_addr : SOCKADDR*
    anonymous : Addrinfo_dns_server_Anonymous_e__Union
  end
  struct Addrinfoex6
    ai_flags : Int32
    ai_family : Int32
    ai_socktype : Int32
    ai_protocol : Int32
    ai_addrlen : LibC::UINT_PTR
    ai_canonname : LibC::LPWSTR
    ai_addr : SOCKADDR*
    ai_blob : Void*
    ai_bloblen : LibC::UINT_PTR
    ai_provider : Guid*
    ai_next : Addrinfoex5*
    ai_version : Int32
    ai_fqdn : LibC::LPWSTR
    ai_interfaceindex : Int32
    ai_resolutionhandle : LibC::HANDLE
    ai_ttl : UInt32
    ai_numservers : UInt32
    ai_servers : Addrinfo_dns_server*
    ai_responseflags : UInt64
  end
  struct Fd_set
    fd_count : UInt32
    fd_array : SOCKET[64]*
  end
  struct Timeval
    tv_sec : Int32
    tv_usec : Int32
  end
  struct Hostent
    h_name : PSTR
    h_aliases : Int8**
    h_addrtype : Int16
    h_length : Int16
    h_addr_list : Int8**
  end
  struct Netent
    n_name : PSTR
    n_aliases : Int8**
    n_addrtype : Int16
    n_net : UInt32
  end
  struct Servent
    s_name : PSTR
    s_aliases : Int8**
    s_proto : PSTR
    s_port : Int16
  end
  struct Protoent
    p_name : PSTR
    p_aliases : Int8**
    p_proto : Int16
  end
  struct WSAData
    w_version : UInt16
    w_high_version : UInt16
    i_max_sockets : UInt16
    i_max_udp_dg : UInt16
    lp_vendor_info : PSTR
    sz_description : CHAR[257]*
    sz_system_status : CHAR[129]*
  end
  struct Sockproto
    sp_family : UInt16
    sp_protocol : UInt16
  end
  struct Linger
    l_onoff : UInt16
    l_linger : UInt16
  end
  struct WSANETWORKEVENTS
    l_network_events : Int32
    i_error_code : Int32[10]*
  end
  struct WSAPROTOCOLCHAIN
    chain_len : Int32
    chain_entries : UInt32[7]*
  end
  struct WSAPROTOCOL_INFOA
    dw_service_flags1 : UInt32
    dw_service_flags2 : UInt32
    dw_service_flags3 : UInt32
    dw_service_flags4 : UInt32
    dw_provider_flags : UInt32
    provider_id : Guid
    dw_catalog_entry_id : UInt32
    protocol_chain : WSAPROTOCOLCHAIN
    i_version : Int32
    i_address_family : Int32
    i_max_sock_addr : Int32
    i_min_sock_addr : Int32
    i_socket_type : Int32
    i_protocol : Int32
    i_protocol_max_offset : Int32
    i_network_byte_order : Int32
    i_security_scheme : Int32
    dw_message_size : UInt32
    dw_provider_reserved : UInt32
    sz_protocol : CHAR[256]*
  end
  struct WSAPROTOCOL_INFOW
    dw_service_flags1 : UInt32
    dw_service_flags2 : UInt32
    dw_service_flags3 : UInt32
    dw_service_flags4 : UInt32
    dw_provider_flags : UInt32
    provider_id : Guid
    dw_catalog_entry_id : UInt32
    protocol_chain : WSAPROTOCOLCHAIN
    i_version : Int32
    i_address_family : Int32
    i_max_sock_addr : Int32
    i_min_sock_addr : Int32
    i_socket_type : Int32
    i_protocol : Int32
    i_protocol_max_offset : Int32
    i_network_byte_order : Int32
    i_security_scheme : Int32
    dw_message_size : UInt32
    dw_provider_reserved : UInt32
    sz_protocol : Char[256]*
  end
  struct WSACOMPLETION
    type : WSACOMPLETIONTYPE
    parameters : WSACOMPLETION_Parameters_e__Union
  end
  struct WSACOMPLETION_Parameters_e__Union_Port_e__Struct
    lp_overlapped : OVERLAPPED*
    h_port : LibC::HANDLE
    key : LibC::UINT_PTR
  end
  struct WSACOMPLETION_Parameters_e__Union_Event_e__Struct
    lp_overlapped : OVERLAPPED*
  end
  struct WSACOMPLETION_Parameters_e__Union_WindowMessage_e__Struct
    h_wnd : HANDLE
    u_msg : UInt32
    context : LibC::UINT_PTR
  end
  struct WSACOMPLETION_Parameters_e__Union_Apc_e__Struct
    lp_overlapped : OVERLAPPED*
    lpfn_completion_proc : LPWSAOVERLAPPED_COMPLETION_ROUTINE
  end
  struct AFPROTOCOLS
    i_address_family : Int32
    i_protocol : Int32
  end
  struct WSAVERSION
    dw_version : UInt32
    ec_how : WSAECOMPARATOR
  end
  struct WSAQUERYSETA
    dw_size : UInt32
    lpsz_service_instance_name : PSTR
    lp_service_class_id : Guid*
    lp_version : WSAVERSION*
    lpsz_comment : PSTR
    dw_name_space : UInt32
    lp_ns_provider_id : Guid*
    lpsz_context : PSTR
    dw_number_of_protocols : UInt32
    lpafp_protocols : AFPROTOCOLS*
    lpsz_query_string : PSTR
    dw_number_of_cs_addrs : UInt32
    lpcsa_buffer : CSADDR_INFO*
    dw_output_flags : UInt32
    lp_blob : BLOB*
  end
  struct WSAQUERYSETW
    dw_size : UInt32
    lpsz_service_instance_name : LibC::LPWSTR
    lp_service_class_id : Guid*
    lp_version : WSAVERSION*
    lpsz_comment : LibC::LPWSTR
    dw_name_space : UInt32
    lp_ns_provider_id : Guid*
    lpsz_context : LibC::LPWSTR
    dw_number_of_protocols : UInt32
    lpafp_protocols : AFPROTOCOLS*
    lpsz_query_string : LibC::LPWSTR
    dw_number_of_cs_addrs : UInt32
    lpcsa_buffer : CSADDR_INFO*
    dw_output_flags : UInt32
    lp_blob : BLOB*
  end
  struct WSAQUERYSET2A
    dw_size : UInt32
    lpsz_service_instance_name : PSTR
    lp_version : WSAVERSION*
    lpsz_comment : PSTR
    dw_name_space : UInt32
    lp_ns_provider_id : Guid*
    lpsz_context : PSTR
    dw_number_of_protocols : UInt32
    lpafp_protocols : AFPROTOCOLS*
    lpsz_query_string : PSTR
    dw_number_of_cs_addrs : UInt32
    lpcsa_buffer : CSADDR_INFO*
    dw_output_flags : UInt32
    lp_blob : BLOB*
  end
  struct WSAQUERYSET2W
    dw_size : UInt32
    lpsz_service_instance_name : LibC::LPWSTR
    lp_version : WSAVERSION*
    lpsz_comment : LibC::LPWSTR
    dw_name_space : UInt32
    lp_ns_provider_id : Guid*
    lpsz_context : LibC::LPWSTR
    dw_number_of_protocols : UInt32
    lpafp_protocols : AFPROTOCOLS*
    lpsz_query_string : LibC::LPWSTR
    dw_number_of_cs_addrs : UInt32
    lpcsa_buffer : CSADDR_INFO*
    dw_output_flags : UInt32
    lp_blob : BLOB*
  end
  struct WSANSCLASSINFOA
    lpsz_name : PSTR
    dw_name_space : UInt32
    dw_value_type : UInt32
    dw_value_size : UInt32
    lp_value : Void*
  end
  struct WSANSCLASSINFOW
    lpsz_name : LibC::LPWSTR
    dw_name_space : UInt32
    dw_value_type : UInt32
    dw_value_size : UInt32
    lp_value : Void*
  end
  struct WSASERVICECLASSINFOA
    lp_service_class_id : Guid*
    lpsz_service_class_name : PSTR
    dw_count : UInt32
    lp_class_infos : WSANSCLASSINFOA*
  end
  struct WSASERVICECLASSINFOW
    lp_service_class_id : Guid*
    lpsz_service_class_name : LibC::LPWSTR
    dw_count : UInt32
    lp_class_infos : WSANSCLASSINFOW*
  end
  struct WSANAMESPACE_INFOA
    ns_provider_id : Guid
    dw_name_space : UInt32
    f_active : LibC::BOOL
    dw_version : UInt32
    lpsz_identifier : PSTR
  end
  struct WSANAMESPACE_INFOW
    ns_provider_id : Guid
    dw_name_space : UInt32
    f_active : LibC::BOOL
    dw_version : UInt32
    lpsz_identifier : LibC::LPWSTR
  end
  struct WSANAMESPACE_INFOEXA
    ns_provider_id : Guid
    dw_name_space : UInt32
    f_active : LibC::BOOL
    dw_version : UInt32
    lpsz_identifier : PSTR
    provider_specific : BLOB
  end
  struct WSANAMESPACE_INFOEXW
    ns_provider_id : Guid
    dw_name_space : UInt32
    f_active : LibC::BOOL
    dw_version : UInt32
    lpsz_identifier : LibC::LPWSTR
    provider_specific : BLOB
  end
  struct WSAPOLLFD
    fd : SOCKET
    events : Int16
    revents : Int16
  end
  struct SOCK_NOTIFY_REGISTRATION
    socket : SOCKET
    completion_key : Void*
    event_filter : UInt16
    operation : UInt8
    trigger_flags : UInt8
    registration_result : UInt32
  end
  struct IN6_ADDR
    u : IN6_ADDR_u_e__Union
  end
  struct Sockaddr_in6_old
    sin6_family : Int16
    sin6_port : UInt16
    sin6_flowinfo : UInt32
    sin6_addr : IN6_ADDR
  end
  struct INTERFACE_INFO
    ii_flags : UInt32
    ii_address : Sockaddr_gen
    ii_broadcast_address : Sockaddr_gen
    ii_netmask : Sockaddr_gen
  end
  struct INTERFACE_INFO_EX
    ii_flags : UInt32
    ii_address : SOCKET_ADDRESS
    ii_broadcast_address : SOCKET_ADDRESS
    ii_netmask : SOCKET_ADDRESS
  end
  struct SOCKADDR_IN6
    sin6_family : UInt16
    sin6_port : UInt16
    sin6_flowinfo : UInt32
    sin6_addr : IN6_ADDR
    anonymous : SOCKADDR_IN6_Anonymous_e__Union
  end
  struct SOCKADDR_IN6_W2KSP1
    sin6_family : Int16
    sin6_port : UInt16
    sin6_flowinfo : UInt32
    sin6_addr : IN6_ADDR
    sin6_scope_id : UInt32
  end
  struct SOCKADDR_IN6_PAIR
    source_address : SOCKADDR_IN6*
    destination_address : SOCKADDR_IN6*
  end
  struct IP_MREQ
    imr_multiaddr : IN_ADDR
    imr_interface : IN_ADDR
  end
  struct IP_MREQ_SOURCE
    imr_multiaddr : IN_ADDR
    imr_sourceaddr : IN_ADDR
    imr_interface : IN_ADDR
  end
  struct IP_MSFILTER
    imsf_multiaddr : IN_ADDR
    imsf_interface : IN_ADDR
    imsf_fmode : MULTICAST_MODE_TYPE
    imsf_numsrc : UInt32
    imsf_slist : IN_ADDR[0]*
  end
  struct IPV6_MREQ
    ipv6mr_multiaddr : IN6_ADDR
    ipv6mr_interface : UInt32
  end
  struct GROUP_REQ
    gr_interface : UInt32
    gr_group : SOCKADDR_STORAGE
  end
  struct GROUP_SOURCE_REQ
    gsr_interface : UInt32
    gsr_group : SOCKADDR_STORAGE
    gsr_source : SOCKADDR_STORAGE
  end
  struct GROUP_FILTER
    gf_interface : UInt32
    gf_group : SOCKADDR_STORAGE
    gf_fmode : MULTICAST_MODE_TYPE
    gf_numsrc : UInt32
    gf_slist : SOCKADDR_STORAGE[0]*
  end
  struct IN_PKTINFO
    ipi_addr : IN_ADDR
    ipi_ifindex : UInt32
  end
  struct IN6_PKTINFO
    ipi6_addr : IN6_ADDR
    ipi6_ifindex : UInt32
  end
  struct IN_PKTINFO_EX
    pkt_info : IN_PKTINFO
    scope_id : SCOPE_ID
  end
  struct In6_pktinfo_ex
    pkt_info : IN6_PKTINFO
    scope_id : SCOPE_ID
  end
  struct IN_RECVERR
    protocol : IPPROTO
    info : UInt32
    type : UInt8
    code : UInt8
  end
  struct ICMP_ERROR_INFO
    srcaddress : SOCKADDR_INET
    protocol : IPPROTO
    type : UInt8
    code : UInt8
  end
  struct RM_SEND_WINDOW
    rate_kbits_per_sec : UInt32
    window_size_in_m_secs : UInt32
    window_size_in_bytes : UInt32
  end
  struct RM_SENDER_STATS
    data_bytes_sent : UInt64
    total_bytes_sent : UInt64
    naks_received : UInt64
    naks_received_too_late : UInt64
    num_outstanding_naks : UInt64
    num_naks_after_r_data : UInt64
    repair_packets_sent : UInt64
    buffer_space_available : UInt64
    trailing_edge_seq_id : UInt64
    leading_edge_seq_id : UInt64
    rate_k_bits_per_sec_overall : UInt64
    rate_k_bits_per_sec_last : UInt64
    total_o_data_packets_sent : UInt64
  end
  struct RM_RECEIVER_STATS
    num_o_data_packets_received : UInt64
    num_r_data_packets_received : UInt64
    num_duplicate_data_packets : UInt64
    data_bytes_received : UInt64
    total_bytes_received : UInt64
    rate_k_bits_per_sec_overall : UInt64
    rate_k_bits_per_sec_last : UInt64
    trailing_edge_seq_id : UInt64
    leading_edge_seq_id : UInt64
    average_sequences_in_window : UInt64
    min_sequences_in_window : UInt64
    max_sequences_in_window : UInt64
    first_nak_sequence_number : UInt64
    num_pending_naks : UInt64
    num_outstanding_naks : UInt64
    num_data_packets_buffered : UInt64
    total_selective_naks_sent : UInt64
    total_parity_naks_sent : UInt64
  end
  struct RM_FEC_INFO
    fec_block_size : UInt16
    fec_pro_active_packets : UInt16
    fec_group_size : UInt8
    f_fec_on_demand_parity_enabled : BOOLEAN
  end
  struct IPX_ADDRESS_DATA
    adapternum : Int32
    netnum : UInt8[4]*
    nodenum : UInt8[6]*
    wan : BOOLEAN
    status : BOOLEAN
    maxpkt : Int32
    linkspeed : UInt32
  end
  struct IPX_NETNUM_DATA
    netnum : UInt8[4]*
    hopcount : UInt16
    netdelay : UInt16
    cardnum : Int32
    router : UInt8[6]*
  end
  struct IPX_SPXCONNSTATUS_DATA
    connection_state : UInt8
    watch_dog_active : UInt8
    local_connection_id : UInt16
    remote_connection_id : UInt16
    local_sequence_number : UInt16
    local_ack_number : UInt16
    local_alloc_number : UInt16
    remote_ack_number : UInt16
    remote_alloc_number : UInt16
    local_socket : UInt16
    immediate_address : UInt8[6]*
    remote_network : UInt8[4]*
    remote_node : UInt8[6]*
    remote_socket : UInt16
    retransmission_count : UInt16
    estimated_round_trip_delay : UInt16
    retransmitted_packets : UInt16
    suppressed_packet : UInt16
  end
  struct LM_IRPARMS
    n_tx_data_bytes : UInt32
    n_rx_data_bytes : UInt32
    n_baud_rate : UInt32
    threshold_time : UInt32
    disc_time : UInt32
    n_ms_link_turn : UInt16
    n_tx_packets : UInt8
    n_rx_packets : UInt8
  end
  struct SOCKADDR_IRDA
    irda_address_family : UInt16
    irda_device_id : UInt8[4]*
    irda_service_name : CHAR[25]*
  end
  struct WINDOWS_IRDA_DEVICE_INFO
    irda_device_id : UInt8[4]*
    irda_device_name : CHAR[22]*
    irda_device_hints1 : UInt8
    irda_device_hints2 : UInt8
    irda_char_set : UInt8
  end
  struct WCE_IRDA_DEVICE_INFO
    irda_device_id : UInt8[4]*
    irda_device_name : CHAR[22]*
    reserved : UInt8[2]*
  end
  struct WINDOWS_DEVICELIST
    num_device : UInt32
    device : WINDOWS_IRDA_DEVICE_INFO[0]*
  end
  struct WCE_DEVICELIST
    num_device : UInt32
    device : WCE_IRDA_DEVICE_INFO[0]*
  end
  struct WINDOWS_IAS_SET
    irda_class_name : CHAR[64]*
    irda_attrib_name : CHAR[256]*
    irda_attrib_type : UInt32
    irda_attribute : WINDOWS_IAS_SET_irdaAttribute_e__Union
  end
  struct WINDOWS_IAS_SET_irdaAttribute_e__Union_irdaAttribOctetSeq_e__Struct
    len : UInt16
    octet_seq : UInt8[1024]*
  end
  struct WINDOWS_IAS_SET_irdaAttribute_e__Union_irdaAttribUsrStr_e__Struct
    len : UInt8
    char_set : UInt8
    usr_str : UInt8[256]*
  end
  struct WINDOWS_IAS_QUERY
    irda_device_id : UInt8[4]*
    irda_class_name : CHAR[64]*
    irda_attrib_name : CHAR[256]*
    irda_attrib_type : UInt32
    irda_attribute : WINDOWS_IAS_QUERY_irdaAttribute_e__Union
  end
  struct WINDOWS_IAS_QUERY_irdaAttribute_e__Union_irdaAttribOctetSeq_e__Struct
    len : UInt32
    octet_seq : UInt8[1024]*
  end
  struct WINDOWS_IAS_QUERY_irdaAttribute_e__Union_irdaAttribUsrStr_e__Struct
    len : UInt32
    char_set : UInt32
    usr_str : UInt8[256]*
  end
  struct NL_INTERFACE_OFFLOAD_ROD
    _bitfield : UInt8
  end
  struct NL_PATH_BANDWIDTH_ROD
    bandwidth : UInt64
    instability : UInt64
    bandwidth_peaked : BOOLEAN
  end
  struct NL_NETWORK_CONNECTIVITY_HINT
    connectivity_level : NL_NETWORK_CONNECTIVITY_LEVEL_HINT
    connectivity_cost : NL_NETWORK_CONNECTIVITY_COST_HINT
    approaching_data_limit : BOOLEAN
    over_data_limit : BOOLEAN
    roaming : BOOLEAN
  end
  struct NL_BANDWIDTH_INFORMATION
    bandwidth : UInt64
    instability : UInt64
    bandwidth_peaked : BOOLEAN
  end
  struct TRANSPORT_SETTING_ID
    guid : Guid
  end
  struct Tcp_keepalive
    onoff : UInt32
    keepalivetime : UInt32
    keepaliveinterval : UInt32
  end
  struct REAL_TIME_NOTIFICATION_SETTING_INPUT
    transport_setting_id : TRANSPORT_SETTING_ID
    broker_event_guid : Guid
  end
  struct REAL_TIME_NOTIFICATION_SETTING_INPUT_EX
    transport_setting_id : TRANSPORT_SETTING_ID
    broker_event_guid : Guid
    unmark : BOOLEAN
  end
  struct REAL_TIME_NOTIFICATION_SETTING_OUTPUT
    channel_status : CONTROL_CHANNEL_TRIGGER_STATUS
  end
  struct ASSOCIATE_NAMERES_CONTEXT_INPUT
    transport_setting_id : TRANSPORT_SETTING_ID
    handle : UInt64
  end
  struct TIMESTAMPING_CONFIG
    flags : UInt32
    tx_timestamps_buffered : UInt16
  end
  struct PRIORITY_STATUS
    sender : SOCKET_PRIORITY_HINT
    receiver : SOCKET_PRIORITY_HINT
  end
  struct RCVALL_IF
    mode : RCVALL_VALUE
    interface : UInt32
  end
  struct TCP_INITIAL_RTO_PARAMETERS
    rtt : UInt16
    max_syn_retransmissions : UInt8
  end
  struct TCP_ICW_PARAMETERS
    level : TCP_ICW_LEVEL
  end
  struct TCP_ACK_FREQUENCY_PARAMETERS
    tcp_delayed_ack_frequency : UInt8
  end
  struct TCP_INFO_v0
    state : TCPSTATE
    mss : UInt32
    connection_time_ms : UInt64
    timestamps_enabled : BOOLEAN
    rtt_us : UInt32
    min_rtt_us : UInt32
    bytes_in_flight : UInt32
    cwnd : UInt32
    snd_wnd : UInt32
    rcv_wnd : UInt32
    rcv_buf : UInt32
    bytes_out : UInt64
    bytes_in : UInt64
    bytes_reordered : UInt32
    bytes_retrans : UInt32
    fast_retrans : UInt32
    dup_acks_in : UInt32
    timeout_episodes : UInt32
    syn_retrans : UInt8
  end
  struct TCP_INFO_v1
    state : TCPSTATE
    mss : UInt32
    connection_time_ms : UInt64
    timestamps_enabled : BOOLEAN
    rtt_us : UInt32
    min_rtt_us : UInt32
    bytes_in_flight : UInt32
    cwnd : UInt32
    snd_wnd : UInt32
    rcv_wnd : UInt32
    rcv_buf : UInt32
    bytes_out : UInt64
    bytes_in : UInt64
    bytes_reordered : UInt32
    bytes_retrans : UInt32
    fast_retrans : UInt32
    dup_acks_in : UInt32
    timeout_episodes : UInt32
    syn_retrans : UInt8
    snd_lim_trans_rwin : UInt32
    snd_lim_time_rwin : UInt32
    snd_lim_bytes_rwin : UInt64
    snd_lim_trans_cwnd : UInt32
    snd_lim_time_cwnd : UInt32
    snd_lim_bytes_cwnd : UInt64
    snd_lim_trans_snd : UInt32
    snd_lim_time_snd : UInt32
    snd_lim_bytes_snd : UInt64
  end
  struct INET_PORT_RANGE
    start_port : UInt16
    number_of_ports : UInt16
  end
  struct INET_PORT_RESERVATION_TOKEN
    token : UInt64
  end
  struct INET_PORT_RESERVATION_INSTANCE
    reservation : INET_PORT_RANGE
    token : INET_PORT_RESERVATION_TOKEN
  end
  struct INET_PORT_RESERVATION_INFORMATION
    owning_pid : UInt32
  end
  struct SOCKET_SECURITY_SETTINGS
    security_protocol : SOCKET_SECURITY_PROTOCOL
    security_flags : UInt32
  end
  struct SOCKET_SECURITY_SETTINGS_IPSEC
    security_protocol : SOCKET_SECURITY_PROTOCOL
    security_flags : UInt32
    ipsec_flags : UInt32
    authip_mm_policy_key : Guid
    authip_qm_policy_key : Guid
    reserved : Guid
    reserved2 : UInt64
    user_name_string_len : UInt32
    domain_name_string_len : UInt32
    password_string_len : UInt32
    all_strings : Char[0]*
  end
  struct SOCKET_PEER_TARGET_NAME
    security_protocol : SOCKET_SECURITY_PROTOCOL
    peer_address : SOCKADDR_STORAGE
    peer_target_name_string_len : UInt32
    all_strings : Char[0]*
  end
  struct SOCKET_SECURITY_QUERY_TEMPLATE
    security_protocol : SOCKET_SECURITY_PROTOCOL
    peer_address : SOCKADDR_STORAGE
    peer_token_access_mask : UInt32
  end
  struct SOCKET_SECURITY_QUERY_TEMPLATE_IPSEC2
    security_protocol : SOCKET_SECURITY_PROTOCOL
    peer_address : SOCKADDR_STORAGE
    peer_token_access_mask : UInt32
    flags : UInt32
    field_mask : UInt32
  end
  struct SOCKET_SECURITY_QUERY_INFO
    security_protocol : SOCKET_SECURITY_PROTOCOL
    flags : UInt32
    peer_application_access_token_handle : UInt64
    peer_machine_access_token_handle : UInt64
  end
  struct SOCKET_SECURITY_QUERY_INFO_IPSEC2
    security_protocol : SOCKET_SECURITY_PROTOCOL
    flags : UInt32
    peer_application_access_token_handle : UInt64
    peer_machine_access_token_handle : UInt64
    mm_sa_id : UInt64
    qm_sa_id : UInt64
    negotiation_winerr : UInt32
    sa_lookup_context : Guid
  end
  struct RSS_SCALABILITY_INFO
    rss_enabled : BOOLEAN
  end
  struct WSA_COMPATIBILITY_MODE
    behavior_id : WSA_COMPATIBILITY_BEHAVIOR_ID
    target_os_version : UInt32
  end
  struct RIORESULT
    status : Int32
    bytes_transferred : UInt32
    socket_context : UInt64
    request_context : UInt64
  end
  struct RIO_BUF
    buffer_id : RIO_BUFFERID_t*
    offset : UInt32
    length : UInt32
  end
  struct RIO_CMSG_BUFFER
    total_length : UInt32
  end
  struct ATM_ADDRESS
    address_type : UInt32
    numof_digits : UInt32
    addr : UInt8[20]*
  end
  struct ATM_BLLI
    layer2_protocol : UInt32
    layer2_user_specified_protocol : UInt32
    layer3_protocol : UInt32
    layer3_user_specified_protocol : UInt32
    layer3_ipi : UInt32
    snap_id : UInt8[5]*
  end
  struct ATM_BHLI
    high_layer_info_type : UInt32
    high_layer_info_length : UInt32
    high_layer_info : UInt8[8]*
  end
  struct Sockaddr_atm
    satm_family : UInt16
    satm_number : ATM_ADDRESS
    satm_blli : ATM_BLLI
    satm_bhli : ATM_BHLI
  end
  struct Q2931_IE
    ie_type : Q2931_IE_TYPE
    ie_length : UInt32
    ie : UInt8[0]*
  end
  struct AAL5_PARAMETERS
    forward_max_cpcssdu_size : UInt32
    backward_max_cpcssdu_size : UInt32
    mode : UInt8
    sscs_type : UInt8
  end
  struct AALUSER_PARAMETERS
    user_defined : UInt32
  end
  struct AAL_PARAMETERS_IE
    aal_type : AAL_TYPE
    aal_specific_parameters : AAL_PARAMETERS_IE_AALSpecificParameters_e__Union
  end
  struct ATM_TD
    peak_cell_rate_clp0 : UInt32
    peak_cell_rate_clp01 : UInt32
    sustainable_cell_rate_clp0 : UInt32
    sustainable_cell_rate_clp01 : UInt32
    max_burst_size_clp0 : UInt32
    max_burst_size_clp01 : UInt32
    tagging : LibC::BOOL
  end
  struct ATM_TRAFFIC_DESCRIPTOR_IE
    forward : ATM_TD
    backward : ATM_TD
    best_effort : LibC::BOOL
  end
  struct ATM_BROADBAND_BEARER_CAPABILITY_IE
    bearer_class : UInt8
    traffic_type : UInt8
    timing_requirements : UInt8
    clipping_susceptability : UInt8
    user_plane_connection_config : UInt8
  end
  struct ATM_BLLI_IE
    layer2_protocol : UInt32
    layer2_mode : UInt8
    layer2_window_size : UInt8
    layer2_user_specified_protocol : UInt32
    layer3_protocol : UInt32
    layer3_mode : UInt8
    layer3_default_packet_size : UInt8
    layer3_packet_window_size : UInt8
    layer3_user_specified_protocol : UInt32
    layer3_ipi : UInt32
    snap_id : UInt8[5]*
  end
  struct ATM_CALLING_PARTY_NUMBER_IE
    atm_number : ATM_ADDRESS
    presentation_indication : UInt8
    screening_indicator : UInt8
  end
  struct ATM_CAUSE_IE
    location : UInt8
    cause : UInt8
    diagnostics_length : UInt8
    diagnostics : UInt8[4]*
  end
  struct ATM_QOS_CLASS_IE
    qos_class_forward : UInt8
    qos_class_backward : UInt8
  end
  struct ATM_TRANSIT_NETWORK_SELECTION_IE
    type_of_network_id : UInt8
    network_id_plan : UInt8
    network_id_length : UInt8
    network_id : UInt8[0]*
  end
  struct ATM_CONNECTION_ID
    device_number : UInt32
    vpi : UInt32
    vci : UInt32
  end
  struct ATM_PVC_PARAMS
    pvc_connection_id : ATM_CONNECTION_ID
    pvc_qos : QOS
  end
  struct NAPI_DOMAIN_DESCRIPTION_BLOB
    auth_level : UInt32
    cch_domain_name : UInt32
    offset_next_domain_description : UInt32
    offset_this_domain_name : UInt32
  end
  struct NAPI_PROVIDER_INSTALLATION_BLOB
    dw_version : UInt32
    dw_provider_type : UInt32
    f_supports_wild_card : UInt32
    c_domains : UInt32
    offset_first_domain : UInt32
  end
  struct TRANSMIT_FILE_BUFFERS
    head : Void*
    head_length : UInt32
    tail : Void*
    tail_length : UInt32
  end
  struct TRANSMIT_PACKETS_ELEMENT
    dw_el_flags : UInt32
    c_length : UInt32
    anonymous : TRANSMIT_PACKETS_ELEMENT_Anonymous_e__Union
  end
  struct TRANSMIT_PACKETS_ELEMENT_Anonymous_e__Union_Anonymous_e__Struct
    n_file_offset : LARGE_INTEGER
    h_file : LibC::HANDLE
  end
  struct NLA_BLOB
    header : NLA_BLOB_header_e__Struct
    data : NLA_BLOB_data_e__Union
  end
  struct NLA_BLOB_data_e__Union_ICS_e__Struct
    remote : NLA_BLOB_data_e__Union_ICS_e__Struct_remote_e__Struct
  end
  struct NLA_BLOB_data_e__Union_ICS_e__Struct_remote_e__Struct
    speed : UInt32
    type : UInt32
    state : UInt32
    machine_name : Char[256]*
    shared_adapter_name : Char[256]*
  end
  struct NLA_BLOB_data_e__Union_locationData_e__Struct
    information : CHAR[0]*
  end
  struct NLA_BLOB_data_e__Union_interfaceData_e__Struct
    dw_type : UInt32
    dw_speed : UInt32
    adapter_name : CHAR[0]*
  end
  struct NLA_BLOB_data_e__Union_connectivity_e__Struct
    type : NLA_CONNECTIVITY_TYPE
    internet : NLA_INTERNET
  end
  struct NLA_BLOB_header_e__Struct
    type : NLA_BLOB_DATA_TYPE
    dw_size : UInt32
    next_offset : UInt32
  end
  struct WSAPOLLDATA
    result : Int32
    fds : UInt32
    timeout : Int32
    fd_array : WSAPOLLFD[0]*
  end
  struct WSASENDMSG
    lp_msg : WSAMSG*
    dw_flags : UInt32
    lp_number_of_bytes_sent : UInt32*
    lp_overlapped : OVERLAPPED*
    lp_completion_routine : LPWSAOVERLAPPED_COMPLETION_ROUTINE
  end
  struct RIO_NOTIFICATION_COMPLETION
    type : RIO_NOTIFICATION_COMPLETION_TYPE
    anonymous : RIO_NOTIFICATION_COMPLETION_Anonymous_e__Union
  end
  struct RIO_NOTIFICATION_COMPLETION_Anonymous_e__Union_Iocp_e__Struct
    iocp_handle : LibC::HANDLE
    completion_key : Void*
    overlapped : Void*
  end
  struct RIO_NOTIFICATION_COMPLETION_Anonymous_e__Union_Event_e__Struct
    event_handle : LibC::HANDLE
    notify_reset : LibC::BOOL
  end
  struct RIO_EXTENSION_FUNCTION_TABLE
    cb_size : UInt32
    rio_receive : LPFN_RIORECEIVE
    rio_receive_ex : LPFN_RIORECEIVEEX
    rio_send : LPFN_RIOSEND
    rio_send_ex : LPFN_RIOSENDEX
    rio_close_completion_queue : LPFN_RIOCLOSECOMPLETIONQUEUE
    rio_create_completion_queue : LPFN_RIOCREATECOMPLETIONQUEUE
    rio_create_request_queue : LPFN_RIOCREATEREQUESTQUEUE
    rio_dequeue_completion : LPFN_RIODEQUEUECOMPLETION
    rio_deregister_buffer : LPFN_RIODEREGISTERBUFFER
    rio_notify : LPFN_RIONOTIFY
    rio_register_buffer : LPFN_RIOREGISTERBUFFER
    rio_resize_completion_queue : LPFN_RIORESIZECOMPLETIONQUEUE
    rio_resize_request_queue : LPFN_RIORESIZEREQUESTQUEUE
  end
  struct WSPData
    w_version : UInt16
    w_high_version : UInt16
    sz_description : Char[256]*
  end
  struct WSATHREADID
    thread_handle : LibC::HANDLE
    reserved : LibC::UINT_PTR
  end
  struct WSPPROC_TABLE
    lp_wsp_accept : LPWSPACCEPT
    lp_wsp_address_to_string : LPWSPADDRESSTOSTRING
    lp_wsp_async_select : LPWSPASYNCSELECT
    lp_wsp_bind : LPWSPBIND
    lp_wsp_cancel_blocking_call : LPWSPCANCELBLOCKINGCALL
    lp_wsp_cleanup : LPWSPCLEANUP
    lp_wsp_close_socket : LPWSPCLOSESOCKET
    lp_wsp_connect : LPWSPCONNECT
    lp_wsp_duplicate_socket : LPWSPDUPLICATESOCKET
    lp_wsp_enum_network_events : LPWSPENUMNETWORKEVENTS
    lp_wsp_event_select : LPWSPEVENTSELECT
    lp_wsp_get_overlapped_result : LPWSPGETOVERLAPPEDRESULT
    lp_wsp_get_peer_name : LPWSPGETPEERNAME
    lp_wsp_get_sock_name : LPWSPGETSOCKNAME
    lp_wsp_get_sock_opt : LPWSPGETSOCKOPT
    lp_wsp_get_qos_by_name : LPWSPGETQOSBYNAME
    lp_wsp_ioctl : LPWSPIOCTL
    lp_wsp_join_leaf : LPWSPJOINLEAF
    lp_wsp_listen : LPWSPLISTEN
    lp_wsp_recv : LPWSPRECV
    lp_wsp_recv_disconnect : LPWSPRECVDISCONNECT
    lp_wsp_recv_from : LPWSPRECVFROM
    lp_wsp_select : LPWSPSELECT
    lp_wsp_send : LPWSPSEND
    lp_wsp_send_disconnect : LPWSPSENDDISCONNECT
    lp_wsp_send_to : LPWSPSENDTO
    lp_wsp_set_sock_opt : LPWSPSETSOCKOPT
    lp_wsp_shutdown : LPWSPSHUTDOWN
    lp_wsp_socket : LPWSPSOCKET
    lp_wsp_string_to_address : LPWSPSTRINGTOADDRESS
  end
  struct WSPUPCALLTABLE
    lp_wpu_close_event : LPWPUCLOSEEVENT
    lp_wpu_close_socket_handle : LPWPUCLOSESOCKETHANDLE
    lp_wpu_create_event : LPWPUCREATEEVENT
    lp_wpu_create_socket_handle : LPWPUCREATESOCKETHANDLE
    lp_wpufd_is_set : LPWPUFDISSET
    lp_wpu_get_provider_path : LPWPUGETPROVIDERPATH
    lp_wpu_modify_ifs_handle : LPWPUMODIFYIFSHANDLE
    lp_wpu_post_message : LPWPUPOSTMESSAGE
    lp_wpu_query_blocking_callback : LPWPUQUERYBLOCKINGCALLBACK
    lp_wpu_query_socket_handle_context : LPWPUQUERYSOCKETHANDLECONTEXT
    lp_wpu_queue_apc : LPWPUQUEUEAPC
    lp_wpu_reset_event : LPWPURESETEVENT
    lp_wpu_set_event : LPWPUSETEVENT
    lp_wpu_open_current_thread : LPWPUOPENCURRENTTHREAD
    lp_wpu_close_thread : LPWPUCLOSETHREAD
  end
  struct WSC_PROVIDER_AUDIT_INFO
    record_size : UInt32
    reserved : Void*
  end
  struct NSP_ROUTINE
    cb_size : UInt32
    dw_major_version : UInt32
    dw_minor_version : UInt32
    nsp_cleanup : LPNSPCLEANUP
    nsp_lookup_service_begin : LPNSPLOOKUPSERVICEBEGIN
    nsp_lookup_service_next : LPNSPLOOKUPSERVICENEXT
    nsp_lookup_service_end : LPNSPLOOKUPSERVICEEND
    nsp_set_service : LPNSPSETSERVICE
    nsp_install_service_class : LPNSPINSTALLSERVICECLASS
    nsp_remove_service_class : LPNSPREMOVESERVICECLASS
    nsp_get_service_class_info : LPNSPGETSERVICECLASSINFO
    nsp_ioctl : LPNSPIOCTL
  end
  struct NSPV2_ROUTINE
    cb_size : UInt32
    dw_major_version : UInt32
    dw_minor_version : UInt32
    ns_pv2_startup : LPNSPV2STARTUP
    ns_pv2_cleanup : LPNSPV2CLEANUP
    ns_pv2_lookup_service_begin : LPNSPV2LOOKUPSERVICEBEGIN
    ns_pv2_lookup_service_next_ex : LPNSPV2LOOKUPSERVICENEXTEX
    ns_pv2_lookup_service_end : LPNSPV2LOOKUPSERVICEEND
    ns_pv2_set_service_ex : LPNSPV2SETSERVICEEX
    ns_pv2_client_session_rundown : LPNSPV2CLIENTSESSIONRUNDOWN
  end
  struct NS_INFOA
    dw_name_space : UInt32
    dw_name_space_flags : UInt32
    lp_name_space : PSTR
  end
  struct NS_INFOW
    dw_name_space : UInt32
    dw_name_space_flags : UInt32
    lp_name_space : LibC::LPWSTR
  end
  struct SERVICE_TYPE_VALUE
    dw_name_space : UInt32
    dw_value_type : UInt32
    dw_value_size : UInt32
    dw_value_name_offset : UInt32
    dw_value_offset : UInt32
  end
  struct SERVICE_TYPE_VALUE_ABSA
    dw_name_space : UInt32
    dw_value_type : UInt32
    dw_value_size : UInt32
    lp_value_name : PSTR
    lp_value : Void*
  end
  struct SERVICE_TYPE_VALUE_ABSW
    dw_name_space : UInt32
    dw_value_type : UInt32
    dw_value_size : UInt32
    lp_value_name : LibC::LPWSTR
    lp_value : Void*
  end
  struct SERVICE_TYPE_INFO
    dw_type_name_offset : UInt32
    dw_value_count : UInt32
    values : SERVICE_TYPE_VALUE[0]*
  end
  struct SERVICE_TYPE_INFO_ABSA
    lp_type_name : PSTR
    dw_value_count : UInt32
    values : SERVICE_TYPE_VALUE_ABSA[0]*
  end
  struct SERVICE_TYPE_INFO_ABSW
    lp_type_name : LibC::LPWSTR
    dw_value_count : UInt32
    values : SERVICE_TYPE_VALUE_ABSW[0]*
  end
  struct SERVICE_ADDRESS
    dw_address_type : UInt32
    dw_address_flags : UInt32
    dw_address_length : UInt32
    dw_principal_length : UInt32
    lp_address : UInt8*
    lp_principal : UInt8*
  end
  struct SERVICE_ADDRESSES
    dw_address_count : UInt32
    addresses : SERVICE_ADDRESS[0]*
  end
  struct SERVICE_INFOA
    lp_service_type : Guid*
    lp_service_name : PSTR
    lp_comment : PSTR
    lp_locale : PSTR
    dw_display_hint : RESOURCE_DISPLAY_TYPE
    dw_version : UInt32
    dw_time : UInt32
    lp_machine_name : PSTR
    lp_service_address : SERVICE_ADDRESSES*
    service_specific_info : BLOB
  end
  struct SERVICE_INFOW
    lp_service_type : Guid*
    lp_service_name : LibC::LPWSTR
    lp_comment : LibC::LPWSTR
    lp_locale : LibC::LPWSTR
    dw_display_hint : RESOURCE_DISPLAY_TYPE
    dw_version : UInt32
    dw_time : UInt32
    lp_machine_name : LibC::LPWSTR
    lp_service_address : SERVICE_ADDRESSES*
    service_specific_info : BLOB
  end
  struct NS_SERVICE_INFOA
    dw_name_space : UInt32
    service_info : SERVICE_INFOA
  end
  struct NS_SERVICE_INFOW
    dw_name_space : UInt32
    service_info : SERVICE_INFOW
  end
  struct PROTOCOL_INFOA
    dw_service_flags : UInt32
    i_address_family : Int32
    i_max_sock_addr : Int32
    i_min_sock_addr : Int32
    i_socket_type : Int32
    i_protocol : Int32
    dw_message_size : UInt32
    lp_protocol : PSTR
  end
  struct PROTOCOL_INFOW
    dw_service_flags : UInt32
    i_address_family : Int32
    i_max_sock_addr : Int32
    i_min_sock_addr : Int32
    i_socket_type : Int32
    i_protocol : Int32
    dw_message_size : UInt32
    lp_protocol : LibC::LPWSTR
  end
  struct NETRESOURCE2A
    dw_scope : UInt32
    dw_type : UInt32
    dw_usage : UInt32
    dw_display_type : UInt32
    lp_local_name : PSTR
    lp_remote_name : PSTR
    lp_comment : PSTR
    ns_info : NS_INFOA
    service_type : Guid
    dw_protocols : UInt32
    lpi_protocols : Int32*
  end
  struct NETRESOURCE2W
    dw_scope : UInt32
    dw_type : UInt32
    dw_usage : UInt32
    dw_display_type : UInt32
    lp_local_name : LibC::LPWSTR
    lp_remote_name : LibC::LPWSTR
    lp_comment : LibC::LPWSTR
    ns_info : NS_INFOA
    service_type : Guid
    dw_protocols : UInt32
    lpi_protocols : Int32*
  end
  struct SERVICE_ASYNC_INFO
    lp_service_callback_proc : LPSERVICE_CALLBACK_PROC
    l_param : LPARAM
    h_async_task_handle : LibC::HANDLE
  end
  struct Sockaddr_un
    sun_family : UInt16
    sun_path : CHAR[108]*
  end
  struct Sockaddr_ipx
    sa_family : Int16
    sa_netnum : CHAR[4]*
    sa_nodenum : CHAR[6]*
    sa_socket : UInt16
  end
  struct Sockaddr_tp
    tp_family : UInt16
    tp_addr_type : UInt16
    tp_taddr_len : UInt16
    tp_tsel_len : UInt16
    tp_addr : UInt8[64]*
  end
  struct Sockaddr_nb
    snb_family : Int16
    snb_type : UInt16
    snb_name : CHAR[16]*
  end
  struct Sockaddr_vns
    sin_family : UInt16
    net_address : UInt8[4]*
    subnet_addr : UInt8[2]*
    port : UInt8[2]*
    hops : UInt8
    filler : UInt8[5]*
  end


  # Params # fd : SOCKET [In],param1 : Fd_set* [In]
  fun __WSAFDIsSet(fd : SOCKET, param1 : Fd_set*) : Int32

  # Params # s : SOCKET [In],addr : SOCKADDR* [In],addrlen : Int32* [In]
  # Commented out because function is part of Lib C
  #fun accept(s : SOCKET, addr : SOCKADDR*, addrlen : Int32*) : SOCKET

  # Params # s : SOCKET [In],name : SOCKADDR* [In],namelen : Int32 [In]
  # Commented out because function is part of Lib C
  #fun bind(s : SOCKET, name : SOCKADDR*, namelen : Int32) : Int32

  # Params # s : SOCKET [In]
  # Commented out because function is part of Lib C
  #fun closesocket(s : SOCKET) : Int32

  # Params # s : SOCKET [In],name : SOCKADDR* [In],namelen : Int32 [In]
  # Commented out because function is part of Lib C
  #fun connect(s : SOCKET, name : SOCKADDR*, namelen : Int32) : Int32

  # Params # s : SOCKET [In],cmd : Int32 [In],argp : UInt32* [In]
  # Commented out because function is part of Lib C
  #fun ioctlsocket(s : SOCKET, cmd : Int32, argp : UInt32*) : Int32

  # Params # s : SOCKET [In],name : SOCKADDR* [In],namelen : Int32* [In]
  # Commented out because function is part of Lib C
  #fun getpeername(s : SOCKET, name : SOCKADDR*, namelen : Int32*) : Int32

  # Params # s : SOCKET [In],name : SOCKADDR* [In],namelen : Int32* [In]
  # Commented out because function is part of Lib C
  #fun getsockname(s : SOCKET, name : SOCKADDR*, namelen : Int32*) : Int32

  # Params # s : SOCKET [In],level : Int32 [In],optname : Int32 [In],optval : PSTR [In],optlen : Int32* [In]
  # Commented out because function is part of Lib C
  #fun getsockopt(s : SOCKET, level : Int32, optname : Int32, optval : PSTR, optlen : Int32*) : Int32

  # Params # hostlong : UInt32 [In]
  fun htonl(hostlong : UInt32) : UInt32

  # Params # hostshort : UInt16 [In]
  # Commented out because function is part of Lib C
  #fun htons(hostshort : UInt16) : UInt16

  # Params # cp : PSTR [In]
  fun inet_addr(cp : PSTR) : UInt32

  # Params # in : IN_ADDR [In]
  fun inet_ntoa(in : IN_ADDR) : PSTR

  # Params # s : SOCKET [In],backlog : Int32 [In]
  # Commented out because function is part of Lib C
  #fun listen(s : SOCKET, backlog : Int32) : Int32

  # Params # netlong : UInt32 [In]
  fun ntohl(netlong : UInt32) : UInt32

  # Params # netshort : UInt16 [In]
  # Commented out because function is part of Lib C
  #fun ntohs(netshort : UInt16) : UInt16

  # Params # s : SOCKET [In],buf : PSTR [In],len : Int32 [In],flags : Int32 [In]
  # Commented out because function is part of Lib C
  #fun recv(s : SOCKET, buf : PSTR, len : Int32, flags : Int32) : Int32

  # Params # s : SOCKET [In],buf : PSTR [In],len : Int32 [In],flags : Int32 [In],from : SOCKADDR* [In],fromlen : Int32* [In]
  # Commented out because function is part of Lib C
  #fun recvfrom(s : SOCKET, buf : PSTR, len : Int32, flags : Int32, from : SOCKADDR*, fromlen : Int32*) : Int32

  # Params # nfds : Int32 [In],readfds : Fd_set* [In],writefds : Fd_set* [In],exceptfds : Fd_set* [In],timeout : Timeval* [In]
  fun select(nfds : Int32, readfds : Fd_set*, writefds : Fd_set*, exceptfds : Fd_set*, timeout : Timeval*) : Int32

  # Params # s : SOCKET [In],buf : PSTR [In],len : Int32 [In],flags : SEND_FLAGS [In]
  # Commented out because function is part of Lib C
  #fun send(s : SOCKET, buf : PSTR, len : Int32, flags : SEND_FLAGS) : Int32

  # Params # s : SOCKET [In],buf : PSTR [In],len : Int32 [In],flags : Int32 [In],to : SOCKADDR* [In],tolen : Int32 [In]
  fun sendto(s : SOCKET, buf : PSTR, len : Int32, flags : Int32, to : SOCKADDR*, tolen : Int32) : Int32

  # Params # s : SOCKET [In],level : Int32 [In],optname : Int32 [In],optval : PSTR [In],optlen : Int32 [In]
  # Commented out because function is part of Lib C
  #fun setsockopt(s : SOCKET, level : Int32, optname : Int32, optval : PSTR, optlen : Int32) : Int32

  # Params # s : SOCKET [In],how : Int32 [In]
  # Commented out because function is part of Lib C
  #fun shutdown(s : SOCKET, how : Int32) : Int32

  # Params # af : Int32 [In],type : Int32 [In],protocol : Int32 [In]
  # Commented out because function is part of Lib C
  #fun socket(af : Int32, type : Int32, protocol : Int32) : SOCKET

  # Params # addr : PSTR [In],len : Int32 [In],type : Int32 [In]
  fun gethostbyaddr(addr : PSTR, len : Int32, type : Int32) : Hostent*

  # Params # name : PSTR [In]
  fun gethostbyname(name : PSTR) : Hostent*

  # Params # name : PSTR [In],namelen : Int32 [In]
  fun gethostname(name : PSTR, namelen : Int32) : Int32

  # Params # name : Char* [In],namelen : Int32 [In]
  fun GetHostNameW(name : Char*, namelen : Int32) : Int32

  # Params # port : Int32 [In],proto : PSTR [In]
  fun getservbyport(port : Int32, proto : PSTR) : Servent*

  # Params # name : PSTR [In],proto : PSTR [In]
  fun getservbyname(name : PSTR, proto : PSTR) : Servent*

  # Params # number : Int32 [In]
  fun getprotobynumber(number : Int32) : Protoent*

  # Params # name : PSTR [In]
  fun getprotobyname(name : PSTR) : Protoent*

  # Params # wversionrequested : UInt16 [In],lpwsadata : WSAData* [In]
  # Commented out because function is part of Lib C
  #fun WSAStartup(wversionrequested : UInt16, lpwsadata : WSAData*) : Int32

  # Params # 
  # Commented out because function is part of Lib C
  #fun WSACleanup : Int32

  # Params # ierror : Int32 [In]
  # Commented out because function is part of Lib C
  #fun WSASetLastError(ierror : Int32)

  # Params # 
  # Commented out because function is part of Lib C
  #fun WSAGetLastError : WSA_ERROR

  # Params # 
  fun WSAIsBlocking : LibC::BOOL

  # Params # 
  fun WSAUnhookBlockingHook : Int32

  # Params # lpblockfunc : FARPROC [In]
  fun WSASetBlockingHook(lpblockfunc : FARPROC) : FARPROC

  # Params # 
  fun WSACancelBlockingCall : Int32

  # Params # hwnd : LibC::HANDLE [In],wmsg : UInt32 [In],name : PSTR [In],proto : PSTR [In],buf : PSTR [In],buflen : Int32 [In]
  fun WSAAsyncGetServByName(hwnd : LibC::HANDLE, wmsg : UInt32, name : PSTR, proto : PSTR, buf : PSTR, buflen : Int32) : LibC::HANDLE

  # Params # hwnd : LibC::HANDLE [In],wmsg : UInt32 [In],port : Int32 [In],proto : PSTR [In],buf : PSTR [In],buflen : Int32 [In]
  fun WSAAsyncGetServByPort(hwnd : LibC::HANDLE, wmsg : UInt32, port : Int32, proto : PSTR, buf : PSTR, buflen : Int32) : LibC::HANDLE

  # Params # hwnd : LibC::HANDLE [In],wmsg : UInt32 [In],name : PSTR [In],buf : PSTR [In],buflen : Int32 [In]
  fun WSAAsyncGetProtoByName(hwnd : LibC::HANDLE, wmsg : UInt32, name : PSTR, buf : PSTR, buflen : Int32) : LibC::HANDLE

  # Params # hwnd : LibC::HANDLE [In],wmsg : UInt32 [In],number : Int32 [In],buf : PSTR [In],buflen : Int32 [In]
  fun WSAAsyncGetProtoByNumber(hwnd : LibC::HANDLE, wmsg : UInt32, number : Int32, buf : PSTR, buflen : Int32) : LibC::HANDLE

  # Params # hwnd : LibC::HANDLE [In],wmsg : UInt32 [In],name : PSTR [In],buf : PSTR [In],buflen : Int32 [In]
  fun WSAAsyncGetHostByName(hwnd : LibC::HANDLE, wmsg : UInt32, name : PSTR, buf : PSTR, buflen : Int32) : LibC::HANDLE

  # Params # hwnd : LibC::HANDLE [In],wmsg : UInt32 [In],addr : PSTR [In],len : Int32 [In],type : Int32 [In],buf : PSTR [In],buflen : Int32 [In]
  fun WSAAsyncGetHostByAddr(hwnd : LibC::HANDLE, wmsg : UInt32, addr : PSTR, len : Int32, type : Int32, buf : PSTR, buflen : Int32) : LibC::HANDLE

  # Params # hasynctaskhandle : LibC::HANDLE [In]
  fun WSACancelAsyncRequest(hasynctaskhandle : LibC::HANDLE) : Int32

  # Params # s : SOCKET [In],hwnd : LibC::HANDLE [In],wmsg : UInt32 [In],levent : Int32 [In]
  fun WSAAsyncSelect(s : SOCKET, hwnd : LibC::HANDLE, wmsg : UInt32, levent : Int32) : Int32

  # Params # s : SOCKET [In],addr : SOCKADDR* [In],addrlen : Int32* [In],lpfncondition : LPCONDITIONPROC [In],dwcallbackdata : LibC::UINT_PTR [In]
  # Commented out because function is part of Lib C
  #fun WSAAccept(s : SOCKET, addr : SOCKADDR*, addrlen : Int32*, lpfncondition : LPCONDITIONPROC, dwcallbackdata : LibC::UINT_PTR) : SOCKET

  # Params # hevent : LibC::HANDLE [In]
  fun WSACloseEvent(hevent : LibC::HANDLE) : LibC::BOOL

  # Params # s : SOCKET [In],name : SOCKADDR* [In],namelen : Int32 [In],lpcallerdata : WSABUF* [In],lpcalleedata : WSABUF* [In],lpsqos : QOS* [In],lpgqos : QOS* [In]
  # Commented out because function is part of Lib C
  #fun WSAConnect(s : SOCKET, name : SOCKADDR*, namelen : Int32, lpcallerdata : WSABUF*, lpcalleedata : WSABUF*, lpsqos : QOS*, lpgqos : QOS*) : Int32

  # Params # s : SOCKET [In],nodename : LibC::LPWSTR [In],servicename : LibC::LPWSTR [In],localaddresslength : UInt32* [In],localaddress : SOCKADDR* [In],remoteaddresslength : UInt32* [In],remoteaddress : SOCKADDR* [In],timeout : Timeval* [In],reserved : OVERLAPPED* [In]
  fun WSAConnectByNameW(s : SOCKET, nodename : LibC::LPWSTR, servicename : LibC::LPWSTR, localaddresslength : UInt32*, localaddress : SOCKADDR*, remoteaddresslength : UInt32*, remoteaddress : SOCKADDR*, timeout : Timeval*, reserved : OVERLAPPED*) : LibC::BOOL

  # Params # s : SOCKET [In],nodename : PSTR [In],servicename : PSTR [In],localaddresslength : UInt32* [In],localaddress : SOCKADDR* [In],remoteaddresslength : UInt32* [In],remoteaddress : SOCKADDR* [In],timeout : Timeval* [In],reserved : OVERLAPPED* [In]
  fun WSAConnectByNameA(s : SOCKET, nodename : PSTR, servicename : PSTR, localaddresslength : UInt32*, localaddress : SOCKADDR*, remoteaddresslength : UInt32*, remoteaddress : SOCKADDR*, timeout : Timeval*, reserved : OVERLAPPED*) : LibC::BOOL

  # Params # s : SOCKET [In],socketaddress : SOCKET_ADDRESS_LIST* [In],localaddresslength : UInt32* [In],localaddress : SOCKADDR* [In],remoteaddresslength : UInt32* [In],remoteaddress : SOCKADDR* [In],timeout : Timeval* [In],reserved : OVERLAPPED* [In]
  fun WSAConnectByList(s : SOCKET, socketaddress : SOCKET_ADDRESS_LIST*, localaddresslength : UInt32*, localaddress : SOCKADDR*, remoteaddresslength : UInt32*, remoteaddress : SOCKADDR*, timeout : Timeval*, reserved : OVERLAPPED*) : LibC::BOOL

  # Params # 
  # Commented out because function is part of Lib C
  #fun WSACreateEvent : LibC::HANDLE

  # Params # s : SOCKET [In],dwprocessid : UInt32 [In],lpprotocolinfo : WSAPROTOCOL_INFOA* [In]
  fun WSADuplicateSocketA(s : SOCKET, dwprocessid : UInt32, lpprotocolinfo : WSAPROTOCOL_INFOA*) : Int32

  # Params # s : SOCKET [In],dwprocessid : UInt32 [In],lpprotocolinfo : WSAPROTOCOL_INFOW* [In]
  fun WSADuplicateSocketW(s : SOCKET, dwprocessid : UInt32, lpprotocolinfo : WSAPROTOCOL_INFOW*) : Int32

  # Params # s : SOCKET [In],heventobject : LibC::HANDLE [In],lpnetworkevents : WSANETWORKEVENTS* [In]
  fun WSAEnumNetworkEvents(s : SOCKET, heventobject : LibC::HANDLE, lpnetworkevents : WSANETWORKEVENTS*) : Int32

  # Params # lpiprotocols : Int32* [In],lpprotocolbuffer : WSAPROTOCOL_INFOA* [In],lpdwbufferlength : UInt32* [In]
  fun WSAEnumProtocolsA(lpiprotocols : Int32*, lpprotocolbuffer : WSAPROTOCOL_INFOA*, lpdwbufferlength : UInt32*) : Int32

  # Params # lpiprotocols : Int32* [In],lpprotocolbuffer : WSAPROTOCOL_INFOW* [In],lpdwbufferlength : UInt32* [In]
  fun WSAEnumProtocolsW(lpiprotocols : Int32*, lpprotocolbuffer : WSAPROTOCOL_INFOW*, lpdwbufferlength : UInt32*) : Int32

  # Params # s : SOCKET [In],heventobject : LibC::HANDLE [In],lnetworkevents : Int32 [In]
  # Commented out because function is part of Lib C
  #fun WSAEventSelect(s : SOCKET, heventobject : LibC::HANDLE, lnetworkevents : Int32) : Int32

  # Params # s : SOCKET [In],lpoverlapped : OVERLAPPED* [In],lpcbtransfer : UInt32* [In],fwait : LibC::BOOL [In],lpdwflags : UInt32* [In]
  # Commented out because function is part of Lib C
  #fun WSAGetOverlappedResult(s : SOCKET, lpoverlapped : OVERLAPPED*, lpcbtransfer : UInt32*, fwait : LibC::BOOL, lpdwflags : UInt32*) : LibC::BOOL

  # Params # s : SOCKET [In],lpqosname : WSABUF* [In],lpqos : QOS* [In]
  fun WSAGetQOSByName(s : SOCKET, lpqosname : WSABUF*, lpqos : QOS*) : LibC::BOOL

  # Params # s : SOCKET [In],hostlong : UInt32 [In],lpnetlong : UInt32* [In]
  fun WSAHtonl(s : SOCKET, hostlong : UInt32, lpnetlong : UInt32*) : Int32

  # Params # s : SOCKET [In],hostshort : UInt16 [In],lpnetshort : UInt16* [In]
  fun WSAHtons(s : SOCKET, hostshort : UInt16, lpnetshort : UInt16*) : Int32

  # Params # s : SOCKET [In],dwiocontrolcode : UInt32 [In],lpvinbuffer : Void* [In],cbinbuffer : UInt32 [In],lpvoutbuffer : Void* [In],cboutbuffer : UInt32 [In],lpcbbytesreturned : UInt32* [In],lpoverlapped : OVERLAPPED* [In],lpcompletionroutine : LPWSAOVERLAPPED_COMPLETION_ROUTINE [In]
  # Commented out because function is part of Lib C
  #fun WSAIoctl(s : SOCKET, dwiocontrolcode : UInt32, lpvinbuffer : Void*, cbinbuffer : UInt32, lpvoutbuffer : Void*, cboutbuffer : UInt32, lpcbbytesreturned : UInt32*, lpoverlapped : OVERLAPPED*, lpcompletionroutine : LPWSAOVERLAPPED_COMPLETION_ROUTINE) : Int32

  # Params # s : SOCKET [In],name : SOCKADDR* [In],namelen : Int32 [In],lpcallerdata : WSABUF* [In],lpcalleedata : WSABUF* [In],lpsqos : QOS* [In],lpgqos : QOS* [In],dwflags : UInt32 [In]
  fun WSAJoinLeaf(s : SOCKET, name : SOCKADDR*, namelen : Int32, lpcallerdata : WSABUF*, lpcalleedata : WSABUF*, lpsqos : QOS*, lpgqos : QOS*, dwflags : UInt32) : SOCKET

  # Params # s : SOCKET [In],netlong : UInt32 [In],lphostlong : UInt32* [In]
  fun WSANtohl(s : SOCKET, netlong : UInt32, lphostlong : UInt32*) : Int32

  # Params # s : SOCKET [In],netshort : UInt16 [In],lphostshort : UInt16* [In]
  fun WSANtohs(s : SOCKET, netshort : UInt16, lphostshort : UInt16*) : Int32

  # Params # s : SOCKET [In],lpbuffers : WSABUF* [In],dwbuffercount : UInt32 [In],lpnumberofbytesrecvd : UInt32* [In],lpflags : UInt32* [In],lpoverlapped : OVERLAPPED* [In],lpcompletionroutine : LPWSAOVERLAPPED_COMPLETION_ROUTINE [In]
  # Commented out because function is part of Lib C
  #fun WSARecv(s : SOCKET, lpbuffers : WSABUF*, dwbuffercount : UInt32, lpnumberofbytesrecvd : UInt32*, lpflags : UInt32*, lpoverlapped : OVERLAPPED*, lpcompletionroutine : LPWSAOVERLAPPED_COMPLETION_ROUTINE) : Int32

  # Params # s : SOCKET [In],lpinbounddisconnectdata : WSABUF* [In]
  fun WSARecvDisconnect(s : SOCKET, lpinbounddisconnectdata : WSABUF*) : Int32

  # Params # s : SOCKET [In],lpbuffers : WSABUF* [In],dwbuffercount : UInt32 [In],lpnumberofbytesrecvd : UInt32* [In],lpflags : UInt32* [In],lpfrom : SOCKADDR* [In],lpfromlen : Int32* [In],lpoverlapped : OVERLAPPED* [In],lpcompletionroutine : LPWSAOVERLAPPED_COMPLETION_ROUTINE [In]
  # Commented out because function is part of Lib C
  #fun WSARecvFrom(s : SOCKET, lpbuffers : WSABUF*, dwbuffercount : UInt32, lpnumberofbytesrecvd : UInt32*, lpflags : UInt32*, lpfrom : SOCKADDR*, lpfromlen : Int32*, lpoverlapped : OVERLAPPED*, lpcompletionroutine : LPWSAOVERLAPPED_COMPLETION_ROUTINE) : Int32

  # Params # hevent : LibC::HANDLE [In]
  # Commented out because function is part of Lib C
  #fun WSAResetEvent(hevent : LibC::HANDLE) : LibC::BOOL

  # Params # s : SOCKET [In],lpbuffers : WSABUF* [In],dwbuffercount : UInt32 [In],lpnumberofbytessent : UInt32* [In],dwflags : UInt32 [In],lpoverlapped : OVERLAPPED* [In],lpcompletionroutine : LPWSAOVERLAPPED_COMPLETION_ROUTINE [In]
  # Commented out because function is part of Lib C
  #fun WSASend(s : SOCKET, lpbuffers : WSABUF*, dwbuffercount : UInt32, lpnumberofbytessent : UInt32*, dwflags : UInt32, lpoverlapped : OVERLAPPED*, lpcompletionroutine : LPWSAOVERLAPPED_COMPLETION_ROUTINE) : Int32

  # Params # handle : SOCKET [In],lpmsg : WSAMSG* [In],dwflags : UInt32 [In],lpnumberofbytessent : UInt32* [In],lpoverlapped : OVERLAPPED* [In],lpcompletionroutine : LPWSAOVERLAPPED_COMPLETION_ROUTINE [In]
  fun WSASendMsg(handle : SOCKET, lpmsg : WSAMSG*, dwflags : UInt32, lpnumberofbytessent : UInt32*, lpoverlapped : OVERLAPPED*, lpcompletionroutine : LPWSAOVERLAPPED_COMPLETION_ROUTINE) : Int32

  # Params # s : SOCKET [In],lpoutbounddisconnectdata : WSABUF* [In]
  fun WSASendDisconnect(s : SOCKET, lpoutbounddisconnectdata : WSABUF*) : Int32

  # Params # s : SOCKET [In],lpbuffers : WSABUF* [In],dwbuffercount : UInt32 [In],lpnumberofbytessent : UInt32* [In],dwflags : UInt32 [In],lpto : SOCKADDR* [In],itolen : Int32 [In],lpoverlapped : OVERLAPPED* [In],lpcompletionroutine : LPWSAOVERLAPPED_COMPLETION_ROUTINE [In]
  # Commented out because function is part of Lib C
  #fun WSASendTo(s : SOCKET, lpbuffers : WSABUF*, dwbuffercount : UInt32, lpnumberofbytessent : UInt32*, dwflags : UInt32, lpto : SOCKADDR*, itolen : Int32, lpoverlapped : OVERLAPPED*, lpcompletionroutine : LPWSAOVERLAPPED_COMPLETION_ROUTINE) : Int32

  # Params # hevent : LibC::HANDLE [In]
  fun WSASetEvent(hevent : LibC::HANDLE) : LibC::BOOL

  # Params # af : Int32 [In],type : Int32 [In],protocol : Int32 [In],lpprotocolinfo : WSAPROTOCOL_INFOA* [In],g : UInt32 [In],dwflags : UInt32 [In]
  fun WSASocketA(af : Int32, type : Int32, protocol : Int32, lpprotocolinfo : WSAPROTOCOL_INFOA*, g : UInt32, dwflags : UInt32) : SOCKET

  # Params # af : Int32 [In],type : Int32 [In],protocol : Int32 [In],lpprotocolinfo : WSAPROTOCOL_INFOW* [In],g : UInt32 [In],dwflags : UInt32 [In]
  # Commented out because function is part of Lib C
  #fun WSASocketW(af : Int32, type : Int32, protocol : Int32, lpprotocolinfo : WSAPROTOCOL_INFOW*, g : UInt32, dwflags : UInt32) : SOCKET

  # Params # cevents : UInt32 [In],lphevents : LibC::HANDLE* [In],fwaitall : LibC::BOOL [In],dwtimeout : UInt32 [In],falertable : LibC::BOOL [In]
  # Commented out because function is part of Lib C
  #fun WSAWaitForMultipleEvents(cevents : UInt32, lphevents : LibC::HANDLE*, fwaitall : LibC::BOOL, dwtimeout : UInt32, falertable : LibC::BOOL) : UInt32

  # Params # lpsaaddress : SOCKADDR* [In],dwaddresslength : UInt32 [In],lpprotocolinfo : WSAPROTOCOL_INFOA* [In],lpszaddressstring : UInt8* [In],lpdwaddressstringlength : UInt32* [In]
  fun WSAAddressToStringA(lpsaaddress : SOCKADDR*, dwaddresslength : UInt32, lpprotocolinfo : WSAPROTOCOL_INFOA*, lpszaddressstring : UInt8*, lpdwaddressstringlength : UInt32*) : Int32

  # Params # lpsaaddress : SOCKADDR* [In],dwaddresslength : UInt32 [In],lpprotocolinfo : WSAPROTOCOL_INFOW* [In],lpszaddressstring : Char* [In],lpdwaddressstringlength : UInt32* [In]
  fun WSAAddressToStringW(lpsaaddress : SOCKADDR*, dwaddresslength : UInt32, lpprotocolinfo : WSAPROTOCOL_INFOW*, lpszaddressstring : Char*, lpdwaddressstringlength : UInt32*) : Int32

  # Params # addressstring : PSTR [In],addressfamily : Int32 [In],lpprotocolinfo : WSAPROTOCOL_INFOA* [In],lpaddress : SOCKADDR* [In],lpaddresslength : Int32* [In]
  fun WSAStringToAddressA(addressstring : PSTR, addressfamily : Int32, lpprotocolinfo : WSAPROTOCOL_INFOA*, lpaddress : SOCKADDR*, lpaddresslength : Int32*) : Int32

  # Params # addressstring : LibC::LPWSTR [In],addressfamily : Int32 [In],lpprotocolinfo : WSAPROTOCOL_INFOW* [In],lpaddress : SOCKADDR* [In],lpaddresslength : Int32* [In]
  fun WSAStringToAddressW(addressstring : LibC::LPWSTR, addressfamily : Int32, lpprotocolinfo : WSAPROTOCOL_INFOW*, lpaddress : SOCKADDR*, lpaddresslength : Int32*) : Int32

  # Params # lpqsrestrictions : WSAQUERYSETA* [In],dwcontrolflags : UInt32 [In],lphlookup : LibC::HANDLE* [In]
  fun WSALookupServiceBeginA(lpqsrestrictions : WSAQUERYSETA*, dwcontrolflags : UInt32, lphlookup : LibC::HANDLE*) : Int32

  # Params # lpqsrestrictions : WSAQUERYSETW* [In],dwcontrolflags : UInt32 [In],lphlookup : LibC::HANDLE* [In]
  fun WSALookupServiceBeginW(lpqsrestrictions : WSAQUERYSETW*, dwcontrolflags : UInt32, lphlookup : LibC::HANDLE*) : Int32

  # Params # hlookup : LibC::HANDLE [In],dwcontrolflags : UInt32 [In],lpdwbufferlength : UInt32* [In],lpqsresults : WSAQUERYSETA* [In]
  fun WSALookupServiceNextA(hlookup : LibC::HANDLE, dwcontrolflags : UInt32, lpdwbufferlength : UInt32*, lpqsresults : WSAQUERYSETA*) : Int32

  # Params # hlookup : LibC::HANDLE [In],dwcontrolflags : UInt32 [In],lpdwbufferlength : UInt32* [In],lpqsresults : WSAQUERYSETW* [In]
  fun WSALookupServiceNextW(hlookup : LibC::HANDLE, dwcontrolflags : UInt32, lpdwbufferlength : UInt32*, lpqsresults : WSAQUERYSETW*) : Int32

  # Params # hlookup : LibC::HANDLE [In],dwcontrolcode : UInt32 [In],lpvinbuffer : Void* [In],cbinbuffer : UInt32 [In],lpvoutbuffer : Void* [In],cboutbuffer : UInt32 [In],lpcbbytesreturned : UInt32* [In],lpcompletion : WSACOMPLETION* [In]
  fun WSANSPIoctl(hlookup : LibC::HANDLE, dwcontrolcode : UInt32, lpvinbuffer : Void*, cbinbuffer : UInt32, lpvoutbuffer : Void*, cboutbuffer : UInt32, lpcbbytesreturned : UInt32*, lpcompletion : WSACOMPLETION*) : Int32

  # Params # hlookup : LibC::HANDLE [In]
  fun WSALookupServiceEnd(hlookup : LibC::HANDLE) : Int32

  # Params # lpserviceclassinfo : WSASERVICECLASSINFOA* [In]
  fun WSAInstallServiceClassA(lpserviceclassinfo : WSASERVICECLASSINFOA*) : Int32

  # Params # lpserviceclassinfo : WSASERVICECLASSINFOW* [In]
  fun WSAInstallServiceClassW(lpserviceclassinfo : WSASERVICECLASSINFOW*) : Int32

  # Params # lpserviceclassid : Guid* [In]
  fun WSARemoveServiceClass(lpserviceclassid : Guid*) : Int32

  # Params # lpproviderid : Guid* [In],lpserviceclassid : Guid* [In],lpdwbufsize : UInt32* [In],lpserviceclassinfo : WSASERVICECLASSINFOA* [In]
  fun WSAGetServiceClassInfoA(lpproviderid : Guid*, lpserviceclassid : Guid*, lpdwbufsize : UInt32*, lpserviceclassinfo : WSASERVICECLASSINFOA*) : Int32

  # Params # lpproviderid : Guid* [In],lpserviceclassid : Guid* [In],lpdwbufsize : UInt32* [In],lpserviceclassinfo : WSASERVICECLASSINFOW* [In]
  fun WSAGetServiceClassInfoW(lpproviderid : Guid*, lpserviceclassid : Guid*, lpdwbufsize : UInt32*, lpserviceclassinfo : WSASERVICECLASSINFOW*) : Int32

  # Params # lpdwbufferlength : UInt32* [In],lpnspbuffer : WSANAMESPACE_INFOA* [In]
  fun WSAEnumNameSpaceProvidersA(lpdwbufferlength : UInt32*, lpnspbuffer : WSANAMESPACE_INFOA*) : Int32

  # Params # lpdwbufferlength : UInt32* [In],lpnspbuffer : WSANAMESPACE_INFOW* [In]
  fun WSAEnumNameSpaceProvidersW(lpdwbufferlength : UInt32*, lpnspbuffer : WSANAMESPACE_INFOW*) : Int32

  # Params # lpdwbufferlength : UInt32* [In],lpnspbuffer : WSANAMESPACE_INFOEXA* [In]
  fun WSAEnumNameSpaceProvidersExA(lpdwbufferlength : UInt32*, lpnspbuffer : WSANAMESPACE_INFOEXA*) : Int32

  # Params # lpdwbufferlength : UInt32* [In],lpnspbuffer : WSANAMESPACE_INFOEXW* [In]
  fun WSAEnumNameSpaceProvidersExW(lpdwbufferlength : UInt32*, lpnspbuffer : WSANAMESPACE_INFOEXW*) : Int32

  # Params # lpserviceclassid : Guid* [In],lpszserviceclassname : PSTR [In],lpdwbufferlength : UInt32* [In]
  fun WSAGetServiceClassNameByClassIdA(lpserviceclassid : Guid*, lpszserviceclassname : PSTR, lpdwbufferlength : UInt32*) : Int32

  # Params # lpserviceclassid : Guid* [In],lpszserviceclassname : LibC::LPWSTR [In],lpdwbufferlength : UInt32* [In]
  fun WSAGetServiceClassNameByClassIdW(lpserviceclassid : Guid*, lpszserviceclassname : LibC::LPWSTR, lpdwbufferlength : UInt32*) : Int32

  # Params # lpqsreginfo : WSAQUERYSETA* [In],essoperation : WSAESETSERVICEOP [In],dwcontrolflags : UInt32 [In]
  fun WSASetServiceA(lpqsreginfo : WSAQUERYSETA*, essoperation : WSAESETSERVICEOP, dwcontrolflags : UInt32) : Int32

  # Params # lpqsreginfo : WSAQUERYSETW* [In],essoperation : WSAESETSERVICEOP [In],dwcontrolflags : UInt32 [In]
  fun WSASetServiceW(lpqsreginfo : WSAQUERYSETW*, essoperation : WSAESETSERVICEOP, dwcontrolflags : UInt32) : Int32

  # Params # lpnotificationhandle : LibC::HANDLE* [In],lpoverlapped : OVERLAPPED* [In],lpcompletionroutine : LPWSAOVERLAPPED_COMPLETION_ROUTINE [In]
  fun WSAProviderConfigChange(lpnotificationhandle : LibC::HANDLE*, lpoverlapped : OVERLAPPED*, lpcompletionroutine : LPWSAOVERLAPPED_COMPLETION_ROUTINE) : Int32

  # Params # fdarray : WSAPOLLFD* [In],fds : UInt32 [In],timeout : Int32 [In]
  fun WSAPoll(fdarray : WSAPOLLFD*, fds : UInt32, timeout : Int32) : Int32

  # Params # completionport : LibC::HANDLE [In],registrationcount : UInt32 [In],registrationinfos : SOCK_NOTIFY_REGISTRATION* [In],timeoutms : UInt32 [In],completioncount : UInt32 [In],completionportentries : OVERLAPPED_ENTRY* [In],receivedentrycount : UInt32* [In]
  fun ProcessSocketNotifications(completionport : LibC::HANDLE, registrationcount : UInt32, registrationinfos : SOCK_NOTIFY_REGISTRATION*, timeoutms : UInt32, completioncount : UInt32, completionportentries : OVERLAPPED_ENTRY*, receivedentrycount : UInt32*) : UInt32

  # Params # addr : IN_ADDR* [In],s : UInt8* [In]
  fun RtlIpv4AddressToStringA(addr : IN_ADDR*, s : UInt8*) : PSTR

  # Params # address : IN_ADDR* [In],port : UInt16 [In],addressstring : UInt8* [In],addressstringlength : UInt32* [In]
  fun RtlIpv4AddressToStringExA(address : IN_ADDR*, port : UInt16, addressstring : UInt8*, addressstringlength : UInt32*) : Int32

  # Params # addr : IN_ADDR* [In],s : Char* [In]
  fun RtlIpv4AddressToStringW(addr : IN_ADDR*, s : Char*) : LibC::LPWSTR

  # Params # address : IN_ADDR* [In],port : UInt16 [In],addressstring : Char* [In],addressstringlength : UInt32* [In]
  fun RtlIpv4AddressToStringExW(address : IN_ADDR*, port : UInt16, addressstring : Char*, addressstringlength : UInt32*) : Int32

  # Params # s : PSTR [In],strict : BOOLEAN [In],terminator : PSTR* [In],addr : IN_ADDR* [In]
  fun RtlIpv4StringToAddressA(s : PSTR, strict : BOOLEAN, terminator : PSTR*, addr : IN_ADDR*) : Int32

  # Params # addressstring : PSTR [In],strict : BOOLEAN [In],address : IN_ADDR* [In],port : UInt16* [In]
  fun RtlIpv4StringToAddressExA(addressstring : PSTR, strict : BOOLEAN, address : IN_ADDR*, port : UInt16*) : Int32

  # Params # s : LibC::LPWSTR [In],strict : BOOLEAN [In],terminator : LibC::LPWSTR* [In],addr : IN_ADDR* [In]
  fun RtlIpv4StringToAddressW(s : LibC::LPWSTR, strict : BOOLEAN, terminator : LibC::LPWSTR*, addr : IN_ADDR*) : Int32

  # Params # addressstring : LibC::LPWSTR [In],strict : BOOLEAN [In],address : IN_ADDR* [In],port : UInt16* [In]
  fun RtlIpv4StringToAddressExW(addressstring : LibC::LPWSTR, strict : BOOLEAN, address : IN_ADDR*, port : UInt16*) : Int32

  # Params # addr : IN6_ADDR* [In],s : UInt8* [In]
  fun RtlIpv6AddressToStringA(addr : IN6_ADDR*, s : UInt8*) : PSTR

  # Params # address : IN6_ADDR* [In],scopeid : UInt32 [In],port : UInt16 [In],addressstring : UInt8* [In],addressstringlength : UInt32* [In]
  fun RtlIpv6AddressToStringExA(address : IN6_ADDR*, scopeid : UInt32, port : UInt16, addressstring : UInt8*, addressstringlength : UInt32*) : Int32

  # Params # addr : IN6_ADDR* [In],s : Char* [In]
  fun RtlIpv6AddressToStringW(addr : IN6_ADDR*, s : Char*) : LibC::LPWSTR

  # Params # address : IN6_ADDR* [In],scopeid : UInt32 [In],port : UInt16 [In],addressstring : Char* [In],addressstringlength : UInt32* [In]
  fun RtlIpv6AddressToStringExW(address : IN6_ADDR*, scopeid : UInt32, port : UInt16, addressstring : Char*, addressstringlength : UInt32*) : Int32

  # Params # s : PSTR [In],terminator : PSTR* [In],addr : IN6_ADDR* [In]
  fun RtlIpv6StringToAddressA(s : PSTR, terminator : PSTR*, addr : IN6_ADDR*) : Int32

  # Params # addressstring : PSTR [In],address : IN6_ADDR* [In],scopeid : UInt32* [In],port : UInt16* [In]
  fun RtlIpv6StringToAddressExA(addressstring : PSTR, address : IN6_ADDR*, scopeid : UInt32*, port : UInt16*) : Int32

  # Params # s : LibC::LPWSTR [In],terminator : LibC::LPWSTR* [In],addr : IN6_ADDR* [In]
  fun RtlIpv6StringToAddressW(s : LibC::LPWSTR, terminator : LibC::LPWSTR*, addr : IN6_ADDR*) : Int32

  # Params # addressstring : LibC::LPWSTR [In],address : IN6_ADDR* [In],scopeid : UInt32* [In],port : UInt16* [In]
  fun RtlIpv6StringToAddressExW(addressstring : LibC::LPWSTR, address : IN6_ADDR*, scopeid : UInt32*, port : UInt16*) : Int32

  # Params # addr : DL_EUI48* [In],s : UInt8* [In]
  fun RtlEthernetAddressToStringA(addr : DL_EUI48*, s : UInt8*) : PSTR

  # Params # addr : DL_EUI48* [In],s : Char* [In]
  fun RtlEthernetAddressToStringW(addr : DL_EUI48*, s : Char*) : LibC::LPWSTR

  # Params # s : PSTR [In],terminator : PSTR* [In],addr : DL_EUI48* [In]
  fun RtlEthernetStringToAddressA(s : PSTR, terminator : PSTR*, addr : DL_EUI48*) : Int32

  # Params # s : LibC::LPWSTR [In],terminator : LibC::LPWSTR* [In],addr : DL_EUI48* [In]
  fun RtlEthernetStringToAddressW(s : LibC::LPWSTR, terminator : LibC::LPWSTR*, addr : DL_EUI48*) : Int32

  # Params # s : SOCKET [In],buf : PSTR [In],len : Int32 [In],flags : Int32* [In]
  fun WSARecvEx(s : SOCKET, buf : PSTR, len : Int32, flags : Int32*) : Int32

  # Params # hsocket : SOCKET [In],hfile : LibC::HANDLE [In],nnumberofbytestowrite : UInt32 [In],nnumberofbytespersend : UInt32 [In],lpoverlapped : OVERLAPPED* [In],lptransmitbuffers : TRANSMIT_FILE_BUFFERS* [In],dwreserved : UInt32 [In]
  fun TransmitFile(hsocket : SOCKET, hfile : LibC::HANDLE, nnumberofbytestowrite : UInt32, nnumberofbytespersend : UInt32, lpoverlapped : OVERLAPPED*, lptransmitbuffers : TRANSMIT_FILE_BUFFERS*, dwreserved : UInt32) : LibC::BOOL

  # Params # slistensocket : SOCKET [In],sacceptsocket : SOCKET [In],lpoutputbuffer : Void* [In],dwreceivedatalength : UInt32 [In],dwlocaladdresslength : UInt32 [In],dwremoteaddresslength : UInt32 [In],lpdwbytesreceived : UInt32* [In],lpoverlapped : OVERLAPPED* [In]
  fun AcceptEx(slistensocket : SOCKET, sacceptsocket : SOCKET, lpoutputbuffer : Void*, dwreceivedatalength : UInt32, dwlocaladdresslength : UInt32, dwremoteaddresslength : UInt32, lpdwbytesreceived : UInt32*, lpoverlapped : OVERLAPPED*) : LibC::BOOL

  # Params # lpoutputbuffer : Void* [In],dwreceivedatalength : UInt32 [In],dwlocaladdresslength : UInt32 [In],dwremoteaddresslength : UInt32 [In],localsockaddr : SOCKADDR** [In],localsockaddrlength : Int32* [In],remotesockaddr : SOCKADDR** [In],remotesockaddrlength : Int32* [In]
  fun GetAcceptExSockaddrs(lpoutputbuffer : Void*, dwreceivedatalength : UInt32, dwlocaladdresslength : UInt32, dwremoteaddresslength : UInt32, localsockaddr : SOCKADDR**, localsockaddrlength : Int32*, remotesockaddr : SOCKADDR**, remotesockaddrlength : Int32*)

  # Params # lpiprotocols : Int32* [In],lpprotocolbuffer : WSAPROTOCOL_INFOW* [In],lpdwbufferlength : UInt32* [In],lperrno : Int32* [In]
  fun WSCEnumProtocols(lpiprotocols : Int32*, lpprotocolbuffer : WSAPROTOCOL_INFOW*, lpdwbufferlength : UInt32*, lperrno : Int32*) : Int32

  # Params # lpiprotocols : Int32* [In],lpprotocolbuffer : WSAPROTOCOL_INFOW* [In],lpdwbufferlength : UInt32* [In],lperrno : Int32* [In]
  fun WSCEnumProtocols32(lpiprotocols : Int32*, lpprotocolbuffer : WSAPROTOCOL_INFOW*, lpdwbufferlength : UInt32*, lperrno : Int32*) : Int32

  # Params # lpproviderid : Guid* [In],lperrno : Int32* [In]
  fun WSCDeinstallProvider(lpproviderid : Guid*, lperrno : Int32*) : Int32

  # Params # lpproviderid : Guid* [In],lperrno : Int32* [In]
  fun WSCDeinstallProvider32(lpproviderid : Guid*, lperrno : Int32*) : Int32

  # Params # lpproviderid : Guid* [In],lpszproviderdllpath : LibC::LPWSTR [In],lpprotocolinfolist : WSAPROTOCOL_INFOW* [In],dwnumberofentries : UInt32 [In],lperrno : Int32* [In]
  fun WSCInstallProvider(lpproviderid : Guid*, lpszproviderdllpath : LibC::LPWSTR, lpprotocolinfolist : WSAPROTOCOL_INFOW*, dwnumberofentries : UInt32, lperrno : Int32*) : Int32

  # Params # lpproviderid : Guid* [In],lpszproviderdllpath : LibC::LPWSTR [In],lpprotocolinfolist : WSAPROTOCOL_INFOW* [In],dwnumberofentries : UInt32 [In],lperrno : Int32* [In]
  fun WSCInstallProvider64_32(lpproviderid : Guid*, lpszproviderdllpath : LibC::LPWSTR, lpprotocolinfolist : WSAPROTOCOL_INFOW*, dwnumberofentries : UInt32, lperrno : Int32*) : Int32

  # Params # lpproviderid : Guid* [In],lpszproviderdllpath : Char* [In],lpproviderdllpathlen : Int32* [In],lperrno : Int32* [In]
  fun WSCGetProviderPath(lpproviderid : Guid*, lpszproviderdllpath : Char*, lpproviderdllpathlen : Int32*, lperrno : Int32*) : Int32

  # Params # lpproviderid : Guid* [In],lpszproviderdllpath : Char* [In],lpproviderdllpathlen : Int32* [In],lperrno : Int32* [In]
  fun WSCGetProviderPath32(lpproviderid : Guid*, lpszproviderdllpath : Char*, lpproviderdllpathlen : Int32*, lperrno : Int32*) : Int32

  # Params # lpproviderid : Guid* [In],lpszproviderdllpath : LibC::LPWSTR [In],lpprotocolinfolist : WSAPROTOCOL_INFOW* [In],dwnumberofentries : UInt32 [In],lperrno : Int32* [In]
  fun WSCUpdateProvider(lpproviderid : Guid*, lpszproviderdllpath : LibC::LPWSTR, lpprotocolinfolist : WSAPROTOCOL_INFOW*, dwnumberofentries : UInt32, lperrno : Int32*) : Int32

  # Params # lpproviderid : Guid* [In],lpszproviderdllpath : LibC::LPWSTR [In],lpprotocolinfolist : WSAPROTOCOL_INFOW* [In],dwnumberofentries : UInt32 [In],lperrno : Int32* [In]
  fun WSCUpdateProvider32(lpproviderid : Guid*, lpszproviderdllpath : LibC::LPWSTR, lpprotocolinfolist : WSAPROTOCOL_INFOW*, dwnumberofentries : UInt32, lperrno : Int32*) : Int32

  # Params # lpproviderid : Guid* [In],infotype : WSC_PROVIDER_INFO_TYPE [In],info : UInt8* [In],infosize : LibC::UINT_PTR [In],flags : UInt32 [In],lperrno : Int32* [In]
  fun WSCSetProviderInfo(lpproviderid : Guid*, infotype : WSC_PROVIDER_INFO_TYPE, info : UInt8*, infosize : LibC::UINT_PTR, flags : UInt32, lperrno : Int32*) : Int32

  # Params # lpproviderid : Guid* [In],infotype : WSC_PROVIDER_INFO_TYPE [In],info : UInt8* [In],infosize : LibC::UINT_PTR* [In],flags : UInt32 [In],lperrno : Int32* [In]
  fun WSCGetProviderInfo(lpproviderid : Guid*, infotype : WSC_PROVIDER_INFO_TYPE, info : UInt8*, infosize : LibC::UINT_PTR*, flags : UInt32, lperrno : Int32*) : Int32

  # Params # lpproviderid : Guid* [In],infotype : WSC_PROVIDER_INFO_TYPE [In],info : UInt8* [In],infosize : LibC::UINT_PTR [In],flags : UInt32 [In],lperrno : Int32* [In]
  fun WSCSetProviderInfo32(lpproviderid : Guid*, infotype : WSC_PROVIDER_INFO_TYPE, info : UInt8*, infosize : LibC::UINT_PTR, flags : UInt32, lperrno : Int32*) : Int32

  # Params # lpproviderid : Guid* [In],infotype : WSC_PROVIDER_INFO_TYPE [In],info : UInt8* [In],infosize : LibC::UINT_PTR* [In],flags : UInt32 [In],lperrno : Int32* [In]
  fun WSCGetProviderInfo32(lpproviderid : Guid*, infotype : WSC_PROVIDER_INFO_TYPE, info : UInt8*, infosize : LibC::UINT_PTR*, flags : UInt32, lperrno : Int32*) : Int32

  # Params # path : Char* [In],pathlength : UInt32 [In],extra : Char* [In],extralength : UInt32 [In],permittedlspcategories : UInt32 [In],pprevpermlspcat : UInt32* [In],lperrno : Int32* [In]
  fun WSCSetApplicationCategory(path : Char*, pathlength : UInt32, extra : Char*, extralength : UInt32, permittedlspcategories : UInt32, pprevpermlspcat : UInt32*, lperrno : Int32*) : Int32

  # Params # path : Char* [In],pathlength : UInt32 [In],extra : Char* [In],extralength : UInt32 [In],ppermittedlspcategories : UInt32* [In],lperrno : Int32* [In]
  fun WSCGetApplicationCategory(path : Char*, pathlength : UInt32, extra : Char*, extralength : UInt32, ppermittedlspcategories : UInt32*, lperrno : Int32*) : Int32

  # Params # s : SOCKET [In],lpoverlapped : OVERLAPPED* [In],dwerror : UInt32 [In],cbtransferred : UInt32 [In],lperrno : Int32* [In]
  fun WPUCompleteOverlappedRequest(s : SOCKET, lpoverlapped : OVERLAPPED*, dwerror : UInt32, cbtransferred : UInt32, lperrno : Int32*) : Int32

  # Params # lpdwbufferlength : UInt32* [In],lpnspbuffer : WSANAMESPACE_INFOW* [In]
  fun WSCEnumNameSpaceProviders32(lpdwbufferlength : UInt32*, lpnspbuffer : WSANAMESPACE_INFOW*) : Int32

  # Params # lpdwbufferlength : UInt32* [In],lpnspbuffer : WSANAMESPACE_INFOEXW* [In]
  fun WSCEnumNameSpaceProvidersEx32(lpdwbufferlength : UInt32*, lpnspbuffer : WSANAMESPACE_INFOEXW*) : Int32

  # Params # lpszidentifier : LibC::LPWSTR [In],lpszpathname : LibC::LPWSTR [In],dwnamespace : UInt32 [In],dwversion : UInt32 [In],lpproviderid : Guid* [In]
  fun WSCInstallNameSpace(lpszidentifier : LibC::LPWSTR, lpszpathname : LibC::LPWSTR, dwnamespace : UInt32, dwversion : UInt32, lpproviderid : Guid*) : Int32

  # Params # lpszidentifier : LibC::LPWSTR [In],lpszpathname : LibC::LPWSTR [In],dwnamespace : UInt32 [In],dwversion : UInt32 [In],lpproviderid : Guid* [In]
  fun WSCInstallNameSpace32(lpszidentifier : LibC::LPWSTR, lpszpathname : LibC::LPWSTR, dwnamespace : UInt32, dwversion : UInt32, lpproviderid : Guid*) : Int32

  # Params # lpproviderid : Guid* [In]
  fun WSCUnInstallNameSpace(lpproviderid : Guid*) : Int32

  # Params # lpszidentifier : LibC::LPWSTR [In],lpszpathname : LibC::LPWSTR [In],dwnamespace : UInt32 [In],dwversion : UInt32 [In],lpproviderid : Guid* [In],lpproviderspecific : BLOB* [In]
  fun WSCInstallNameSpaceEx(lpszidentifier : LibC::LPWSTR, lpszpathname : LibC::LPWSTR, dwnamespace : UInt32, dwversion : UInt32, lpproviderid : Guid*, lpproviderspecific : BLOB*) : Int32

  # Params # lpszidentifier : LibC::LPWSTR [In],lpszpathname : LibC::LPWSTR [In],dwnamespace : UInt32 [In],dwversion : UInt32 [In],lpproviderid : Guid* [In],lpproviderspecific : BLOB* [In]
  fun WSCInstallNameSpaceEx32(lpszidentifier : LibC::LPWSTR, lpszpathname : LibC::LPWSTR, dwnamespace : UInt32, dwversion : UInt32, lpproviderid : Guid*, lpproviderspecific : BLOB*) : Int32

  # Params # lpproviderid : Guid* [In]
  fun WSCUnInstallNameSpace32(lpproviderid : Guid*) : Int32

  # Params # lpproviderid : Guid* [In],fenable : LibC::BOOL [In]
  fun WSCEnableNSProvider(lpproviderid : Guid*, fenable : LibC::BOOL) : Int32

  # Params # lpproviderid : Guid* [In],fenable : LibC::BOOL [In]
  fun WSCEnableNSProvider32(lpproviderid : Guid*, fenable : LibC::BOOL) : Int32

  # Params # lpproviderid : Guid* [In],lpszproviderdllpath : LibC::LPWSTR [In],lpszproviderdllpath32 : LibC::LPWSTR [In],lpszlspname : LibC::LPWSTR [In],dwserviceflags : UInt32 [In],lpprotocolinfolist : WSAPROTOCOL_INFOW* [In],dwnumberofentries : UInt32 [In],lpdwcatalogentryid : UInt32* [In],lperrno : Int32* [In]
  fun WSCInstallProviderAndChains64_32(lpproviderid : Guid*, lpszproviderdllpath : LibC::LPWSTR, lpszproviderdllpath32 : LibC::LPWSTR, lpszlspname : LibC::LPWSTR, dwserviceflags : UInt32, lpprotocolinfolist : WSAPROTOCOL_INFOW*, dwnumberofentries : UInt32, lpdwcatalogentryid : UInt32*, lperrno : Int32*) : Int32

  # Params # puuidproviderid : Guid* [In],pnspv2routine : NSPV2_ROUTINE* [In]
  fun WSAAdvertiseProvider(puuidproviderid : Guid*, pnspv2routine : NSPV2_ROUTINE*) : Int32

  # Params # puuidproviderid : Guid* [In]
  fun WSAUnadvertiseProvider(puuidproviderid : Guid*) : Int32

  # Params # hasynccall : LibC::HANDLE [In],iretcode : Int32 [In]
  fun WSAProviderCompleteAsyncCall(hasynccall : LibC::HANDLE, iretcode : Int32) : Int32

  # Params # lpiprotocols : Int32* [In],lpprotocolbuffer : Void* [In],lpdwbufferlength : UInt32* [In]
  fun EnumProtocolsA(lpiprotocols : Int32*, lpprotocolbuffer : Void*, lpdwbufferlength : UInt32*) : Int32

  # Params # lpiprotocols : Int32* [In],lpprotocolbuffer : Void* [In],lpdwbufferlength : UInt32* [In]
  fun EnumProtocolsW(lpiprotocols : Int32*, lpprotocolbuffer : Void*, lpdwbufferlength : UInt32*) : Int32

  # Params # dwnamespace : UInt32 [In],lpservicetype : Guid* [In],lpservicename : PSTR [In],lpiprotocols : Int32* [In],dwresolution : UInt32 [In],lpserviceasyncinfo : SERVICE_ASYNC_INFO* [In],lpcsaddrbuffer : Void* [In],lpdwbufferlength : UInt32* [In],lpaliasbuffer : UInt8* [In],lpdwaliasbufferlength : UInt32* [In]
  fun GetAddressByNameA(dwnamespace : UInt32, lpservicetype : Guid*, lpservicename : PSTR, lpiprotocols : Int32*, dwresolution : UInt32, lpserviceasyncinfo : SERVICE_ASYNC_INFO*, lpcsaddrbuffer : Void*, lpdwbufferlength : UInt32*, lpaliasbuffer : UInt8*, lpdwaliasbufferlength : UInt32*) : Int32

  # Params # dwnamespace : UInt32 [In],lpservicetype : Guid* [In],lpservicename : LibC::LPWSTR [In],lpiprotocols : Int32* [In],dwresolution : UInt32 [In],lpserviceasyncinfo : SERVICE_ASYNC_INFO* [In],lpcsaddrbuffer : Void* [In],lpdwbufferlength : UInt32* [In],lpaliasbuffer : Char* [In],lpdwaliasbufferlength : UInt32* [In]
  fun GetAddressByNameW(dwnamespace : UInt32, lpservicetype : Guid*, lpservicename : LibC::LPWSTR, lpiprotocols : Int32*, dwresolution : UInt32, lpserviceasyncinfo : SERVICE_ASYNC_INFO*, lpcsaddrbuffer : Void*, lpdwbufferlength : UInt32*, lpaliasbuffer : Char*, lpdwaliasbufferlength : UInt32*) : Int32

  # Params # lpservicename : PSTR [In],lpservicetype : Guid* [In]
  fun GetTypeByNameA(lpservicename : PSTR, lpservicetype : Guid*) : Int32

  # Params # lpservicename : LibC::LPWSTR [In],lpservicetype : Guid* [In]
  fun GetTypeByNameW(lpservicename : LibC::LPWSTR, lpservicetype : Guid*) : Int32

  # Params # lpservicetype : Guid* [In],lpservicename : PSTR [In],dwnamelength : UInt32 [In]
  fun GetNameByTypeA(lpservicetype : Guid*, lpservicename : PSTR, dwnamelength : UInt32) : Int32

  # Params # lpservicetype : Guid* [In],lpservicename : LibC::LPWSTR [In],dwnamelength : UInt32 [In]
  fun GetNameByTypeW(lpservicetype : Guid*, lpservicename : LibC::LPWSTR, dwnamelength : UInt32) : Int32

  # Params # dwnamespace : UInt32 [In],dwoperation : SET_SERVICE_OPERATION [In],dwflags : UInt32 [In],lpserviceinfo : SERVICE_INFOA* [In],lpserviceasyncinfo : SERVICE_ASYNC_INFO* [In],lpdwstatusflags : UInt32* [In]
  fun SetServiceA(dwnamespace : UInt32, dwoperation : SET_SERVICE_OPERATION, dwflags : UInt32, lpserviceinfo : SERVICE_INFOA*, lpserviceasyncinfo : SERVICE_ASYNC_INFO*, lpdwstatusflags : UInt32*) : Int32

  # Params # dwnamespace : UInt32 [In],dwoperation : SET_SERVICE_OPERATION [In],dwflags : UInt32 [In],lpserviceinfo : SERVICE_INFOW* [In],lpserviceasyncinfo : SERVICE_ASYNC_INFO* [In],lpdwstatusflags : UInt32* [In]
  fun SetServiceW(dwnamespace : UInt32, dwoperation : SET_SERVICE_OPERATION, dwflags : UInt32, lpserviceinfo : SERVICE_INFOW*, lpserviceasyncinfo : SERVICE_ASYNC_INFO*, lpdwstatusflags : UInt32*) : Int32

  # Params # dwnamespace : UInt32 [In],lpguid : Guid* [In],lpservicename : PSTR [In],dwproperties : UInt32 [In],lpbuffer : Void* [In],lpdwbuffersize : UInt32* [In],lpserviceasyncinfo : SERVICE_ASYNC_INFO* [In]
  fun GetServiceA(dwnamespace : UInt32, lpguid : Guid*, lpservicename : PSTR, dwproperties : UInt32, lpbuffer : Void*, lpdwbuffersize : UInt32*, lpserviceasyncinfo : SERVICE_ASYNC_INFO*) : Int32

  # Params # dwnamespace : UInt32 [In],lpguid : Guid* [In],lpservicename : LibC::LPWSTR [In],dwproperties : UInt32 [In],lpbuffer : Void* [In],lpdwbuffersize : UInt32* [In],lpserviceasyncinfo : SERVICE_ASYNC_INFO* [In]
  fun GetServiceW(dwnamespace : UInt32, lpguid : Guid*, lpservicename : LibC::LPWSTR, dwproperties : UInt32, lpbuffer : Void*, lpdwbuffersize : UInt32*, lpserviceasyncinfo : SERVICE_ASYNC_INFO*) : Int32

  # Params # pnodename : PSTR [In],pservicename : PSTR [In],phints : ADDRINFOA* [In],ppresult : ADDRINFOA** [In]
  # Commented out because function is part of Lib C
  #fun getaddrinfo(pnodename : PSTR, pservicename : PSTR, phints : ADDRINFOA*, ppresult : ADDRINFOA**) : Int32

  # Params # pnodename : LibC::LPWSTR [In],pservicename : LibC::LPWSTR [In],phints : Addrinfow* [In],ppresult : Addrinfow** [In]
  fun GetAddrInfoW(pnodename : LibC::LPWSTR, pservicename : LibC::LPWSTR, phints : Addrinfow*, ppresult : Addrinfow**) : Int32

  # Params # pname : PSTR [In],pservicename : PSTR [In],dwnamespace : UInt32 [In],lpnspid : Guid* [In],hints : Addrinfoexa* [In],ppresult : Addrinfoexa** [In],timeout : Timeval* [In],lpoverlapped : OVERLAPPED* [In],lpcompletionroutine : LPLOOKUPSERVICE_COMPLETION_ROUTINE [In],lpnamehandle : LibC::HANDLE* [In]
  fun GetAddrInfoExA(pname : PSTR, pservicename : PSTR, dwnamespace : UInt32, lpnspid : Guid*, hints : Addrinfoexa*, ppresult : Addrinfoexa**, timeout : Timeval*, lpoverlapped : OVERLAPPED*, lpcompletionroutine : LPLOOKUPSERVICE_COMPLETION_ROUTINE, lpnamehandle : LibC::HANDLE*) : Int32

  # Params # pname : LibC::LPWSTR [In],pservicename : LibC::LPWSTR [In],dwnamespace : UInt32 [In],lpnspid : Guid* [In],hints : Addrinfoexw* [In],ppresult : Addrinfoexw** [In],timeout : Timeval* [In],lpoverlapped : OVERLAPPED* [In],lpcompletionroutine : LPLOOKUPSERVICE_COMPLETION_ROUTINE [In],lphandle : LibC::HANDLE* [In]
  fun GetAddrInfoExW(pname : LibC::LPWSTR, pservicename : LibC::LPWSTR, dwnamespace : UInt32, lpnspid : Guid*, hints : Addrinfoexw*, ppresult : Addrinfoexw**, timeout : Timeval*, lpoverlapped : OVERLAPPED*, lpcompletionroutine : LPLOOKUPSERVICE_COMPLETION_ROUTINE, lphandle : LibC::HANDLE*) : Int32

  # Params # lphandle : LibC::HANDLE* [In]
  fun GetAddrInfoExCancel(lphandle : LibC::HANDLE*) : Int32

  # Params # lpoverlapped : OVERLAPPED* [In]
  fun GetAddrInfoExOverlappedResult(lpoverlapped : OVERLAPPED*) : Int32

  # Params # pname : PSTR [In],pservicename : PSTR [In],paddresses : SOCKET_ADDRESS* [In],dwaddresscount : UInt32 [In],lpblob : BLOB* [In],dwflags : UInt32 [In],dwnamespace : UInt32 [In],lpnspid : Guid* [In],timeout : Timeval* [In],lpoverlapped : OVERLAPPED* [In],lpcompletionroutine : LPLOOKUPSERVICE_COMPLETION_ROUTINE [In],lpnamehandle : LibC::HANDLE* [In]
  fun SetAddrInfoExA(pname : PSTR, pservicename : PSTR, paddresses : SOCKET_ADDRESS*, dwaddresscount : UInt32, lpblob : BLOB*, dwflags : UInt32, dwnamespace : UInt32, lpnspid : Guid*, timeout : Timeval*, lpoverlapped : OVERLAPPED*, lpcompletionroutine : LPLOOKUPSERVICE_COMPLETION_ROUTINE, lpnamehandle : LibC::HANDLE*) : Int32

  # Params # pname : LibC::LPWSTR [In],pservicename : LibC::LPWSTR [In],paddresses : SOCKET_ADDRESS* [In],dwaddresscount : UInt32 [In],lpblob : BLOB* [In],dwflags : UInt32 [In],dwnamespace : UInt32 [In],lpnspid : Guid* [In],timeout : Timeval* [In],lpoverlapped : OVERLAPPED* [In],lpcompletionroutine : LPLOOKUPSERVICE_COMPLETION_ROUTINE [In],lpnamehandle : LibC::HANDLE* [In]
  fun SetAddrInfoExW(pname : LibC::LPWSTR, pservicename : LibC::LPWSTR, paddresses : SOCKET_ADDRESS*, dwaddresscount : UInt32, lpblob : BLOB*, dwflags : UInt32, dwnamespace : UInt32, lpnspid : Guid*, timeout : Timeval*, lpoverlapped : OVERLAPPED*, lpcompletionroutine : LPLOOKUPSERVICE_COMPLETION_ROUTINE, lpnamehandle : LibC::HANDLE*) : Int32

  # Params # paddrinfo : ADDRINFOA* [In]
  # Commented out because function is part of Lib C
  #fun freeaddrinfo(paddrinfo : ADDRINFOA*)

  # Params # paddrinfo : Addrinfow* [In]
  fun FreeAddrInfoW(paddrinfo : Addrinfow*)

  # Params # paddrinfoex : Addrinfoexa* [In]
  fun FreeAddrInfoEx(paddrinfoex : Addrinfoexa*)

  # Params # paddrinfoex : Addrinfoexw* [In]
  fun FreeAddrInfoExW(paddrinfoex : Addrinfoexw*)

  # Params # psockaddr : SOCKADDR* [In],sockaddrlength : Int32 [In],pnodebuffer : UInt8* [In],nodebuffersize : UInt32 [In],pservicebuffer : UInt8* [In],servicebuffersize : UInt32 [In],flags : Int32 [In]
  fun getnameinfo(psockaddr : SOCKADDR*, sockaddrlength : Int32, pnodebuffer : UInt8*, nodebuffersize : UInt32, pservicebuffer : UInt8*, servicebuffersize : UInt32, flags : Int32) : Int32

  # Params # psockaddr : SOCKADDR* [In],sockaddrlength : Int32 [In],pnodebuffer : Char* [In],nodebuffersize : UInt32 [In],pservicebuffer : Char* [In],servicebuffersize : UInt32 [In],flags : Int32 [In]
  fun GetNameInfoW(psockaddr : SOCKADDR*, sockaddrlength : Int32, pnodebuffer : Char*, nodebuffersize : UInt32, pservicebuffer : Char*, servicebuffersize : UInt32, flags : Int32) : Int32

  # Params # family : Int32 [In],pszaddrstring : PSTR [In],paddrbuf : Void* [In]
  # Commented out because function is part of Lib C
  #fun inet_pton(family : Int32, pszaddrstring : PSTR, paddrbuf : Void*) : Int32

  # Params # family : Int32 [In],pszaddrstring : LibC::LPWSTR [In],paddrbuf : Void* [In]
  fun InetPtonW(family : Int32, pszaddrstring : LibC::LPWSTR, paddrbuf : Void*) : Int32

  # Params # family : Int32 [In],paddr : Void* [In],pstringbuf : UInt8* [In],stringbufsize : LibC::UINT_PTR [In]
  # Commented out because function is part of Lib C
  #fun inet_ntop(family : Int32, paddr : Void*, pstringbuf : UInt8*, stringbufsize : LibC::UINT_PTR) : PSTR

  # Params # family : Int32 [In],paddr : Void* [In],pstringbuf : Char* [In],stringbufsize : LibC::UINT_PTR [In]
  fun InetNtopW(family : Int32, paddr : Void*, pstringbuf : Char*, stringbufsize : LibC::UINT_PTR) : LibC::LPWSTR

  # Params # socket : SOCKET [In],securitysettings : SOCKET_SECURITY_SETTINGS* [In],securitysettingslen : UInt32 [In],overlapped : OVERLAPPED* [In],completionroutine : LPWSAOVERLAPPED_COMPLETION_ROUTINE [In]
  fun WSASetSocketSecurity(socket : SOCKET, securitysettings : SOCKET_SECURITY_SETTINGS*, securitysettingslen : UInt32, overlapped : OVERLAPPED*, completionroutine : LPWSAOVERLAPPED_COMPLETION_ROUTINE) : Int32

  # Params # socket : SOCKET [In],securityquerytemplate : SOCKET_SECURITY_QUERY_TEMPLATE* [In],securityquerytemplatelen : UInt32 [In],securityqueryinfo : SOCKET_SECURITY_QUERY_INFO* [In],securityqueryinfolen : UInt32* [In],overlapped : OVERLAPPED* [In],completionroutine : LPWSAOVERLAPPED_COMPLETION_ROUTINE [In]
  fun WSAQuerySocketSecurity(socket : SOCKET, securityquerytemplate : SOCKET_SECURITY_QUERY_TEMPLATE*, securityquerytemplatelen : UInt32, securityqueryinfo : SOCKET_SECURITY_QUERY_INFO*, securityqueryinfolen : UInt32*, overlapped : OVERLAPPED*, completionroutine : LPWSAOVERLAPPED_COMPLETION_ROUTINE) : Int32

  # Params # socket : SOCKET [In],peertargetname : SOCKET_PEER_TARGET_NAME* [In],peertargetnamelen : UInt32 [In],overlapped : OVERLAPPED* [In],completionroutine : LPWSAOVERLAPPED_COMPLETION_ROUTINE [In]
  fun WSASetSocketPeerTargetName(socket : SOCKET, peertargetname : SOCKET_PEER_TARGET_NAME*, peertargetnamelen : UInt32, overlapped : OVERLAPPED*, completionroutine : LPWSAOVERLAPPED_COMPLETION_ROUTINE) : Int32

  # Params # socket : SOCKET [In],peeraddr : SOCKADDR* [In],peeraddrlen : UInt32 [In],overlapped : OVERLAPPED* [In],completionroutine : LPWSAOVERLAPPED_COMPLETION_ROUTINE [In]
  fun WSADeleteSocketPeerTargetName(socket : SOCKET, peeraddr : SOCKADDR*, peeraddrlen : UInt32, overlapped : OVERLAPPED*, completionroutine : LPWSAOVERLAPPED_COMPLETION_ROUTINE) : Int32

  # Params # socket : SOCKET [In],peeraddr : SOCKADDR* [In],peeraddrlen : UInt32 [In]
  fun WSAImpersonateSocketPeer(socket : SOCKET, peeraddr : SOCKADDR*, peeraddrlen : UInt32) : Int32

  # Params # 
  fun WSARevertImpersonation : Int32

  # Params # value : LibC::BOOL [In]
  fun SetSocketMediaStreamingMode(value : LibC::BOOL) : HRESULT

  # Params # lpwdcatalogentryid : UInt32* [In],dwnumberofentries : UInt32 [In]
  fun WSCWriteProviderOrder(lpwdcatalogentryid : UInt32*, dwnumberofentries : UInt32) : Int32

  # Params # lpwdcatalogentryid : UInt32* [In],dwnumberofentries : UInt32 [In]
  fun WSCWriteProviderOrder32(lpwdcatalogentryid : UInt32*, dwnumberofentries : UInt32) : Int32

  # Params # lpproviderid : Guid* [In],dwnumberofentries : UInt32 [In]
  fun WSCWriteNameSpaceOrder(lpproviderid : Guid*, dwnumberofentries : UInt32) : Int32

  # Params # lpproviderid : Guid* [In],dwnumberofentries : UInt32 [In]
  fun WSCWriteNameSpaceOrder32(lpproviderid : Guid*, dwnumberofentries : UInt32) : Int32
end
